void *FocusableViewResponder.hostedItem.getter()
{
  uint64_t v0;
  void *v1;
  objc_class *v2;
  char *v3;
  char *v4;
  char *v5;
  char *v6;
  id v7;
  void *v8;
  id v9;
  objc_super v11;

  if (!*(void *)(v0 + 248) || (*(unsigned char *)(v0 + 240) & 8) != 0) {
    return 0;
  }
  v1 = *(void **)(v0 + 440);
  if (v1) {
    goto LABEL_5;
  }
  v2 = (objc_class *)type metadata accessor for UIKitFocusableViewResponderItem();
  v3 = (char *)objc_allocWithZone(v2);
  swift_weakInit();
  swift_unknownObjectWeakInit();
  v4 = &v3[OBJC_IVAR____TtC7SwiftUIP33_B6A2D4E72E5722B5103497ADB7778B5F31UIKitFocusableViewResponderItem_frame];
  *(_OWORD *)v4 = 0u;
  *((_OWORD *)v4 + 1) = 0u;
  v5 = &v3[OBJC_IVAR____TtC7SwiftUIP33_B6A2D4E72E5722B5103497ADB7778B5F31UIKitFocusableViewResponderItem_contentPath];
  *(_OWORD *)v5 = 0u;
  *((_OWORD *)v5 + 1) = 0u;
  v5[32] = -1;
  v6 = &v3[OBJC_IVAR____TtC7SwiftUIP33_B6A2D4E72E5722B5103497ADB7778B5F31UIKitFocusableViewResponderItem____lazy_storage___defaultFocusGroupIdentifier];
  *(void *)v6 = 0;
  *((_WORD *)v6 + 4) = 256;
  swift_weakAssign();
  v11.receiver = v3;
  v11.super_class = v2;
  v7 = objc_msgSendSuper2(&v11, sel_init);
  v8 = *(void **)(v0 + 440);
  *(void *)(v0 + 440) = v7;

  v1 = *(void **)(v0 + 440);
  if (v1) {
LABEL_5:
  }
    v9 = v1;
  return v1;
}

void FocusableViewResponder.focusItem.getter(uint64_t a1@<X8>)
{
  uint64_t v3 = *(void *)(v1 + 248);
  if (!v3)
  {
    *(_OWORD *)(a1 + 16) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)a1 = 0u;
    *(void *)(a1 + 48) = 1;
    *(_DWORD *)(a1 + 56) = 0;
    return;
  }
  if (*(unsigned char *)(v1 + 417) == 1)
  {
    if (FocusableViewResponder.hostedItem.getter())
    {
      v17 = 0;
      swift_weakInit();
      int v18 = 0;
      swift_unknownObjectWeakInit();
      swift_unknownObjectWeakAssign();
      outlined init with take of WeakBox<UIFocusItem>((uint64_t)v9, (uint64_t)&v10);
      swift_retain();
      swift_unknownObjectRelease();
      char v15 = 1;
      v17 = &protocol witness table for FocusableViewResponder;
      swift_weakAssign();
      swift_release();
      char v16 = 0;
      outlined init with take of FocusItem((uint64_t)&v10, a1);
      return;
    }
    uint64_t v3 = *(void *)(v1 + 248);
    if (!v3)
    {
      __break(1u);
      return;
    }
    uint64_t v6 = *(void *)(v1 + 256);
    uint64_t v8 = *(void *)(v1 + 232);
    uint64_t v7 = *(void *)(v1 + 240);
    v17 = 0;
    swift_weakInit();
    int v18 = 0;
    int v10 = v8;
    char v11 = BYTE4(v8) & 1;
    uint64_t v12 = v7;
  }
  else
  {
    uint64_t v4 = *(void *)(v1 + 232);
    uint64_t v5 = *(void *)(v1 + 240);
    uint64_t v6 = *(void *)(v1 + 256);
    v17 = 0;
    swift_weakInit();
    int v18 = 0;
    int v10 = v4;
    char v11 = BYTE4(v4) & 1;
    uint64_t v12 = v5;
  }
  uint64_t v13 = v3;
  uint64_t v14 = v6;
  char v15 = 0;
  v17 = &protocol witness table for FocusableViewResponder;
  swift_weakAssign();
  char v16 = 0;
  outlined init with take of FocusItem((uint64_t)&v10, a1);
  swift_retain();
}

uint64_t FocusableViewResponder.bindEvent(_:)(uint64_t a1)
{
  type metadata accessor for DefaultLayoutViewResponder();
  v2 = (uint64_t (*)(uint64_t))method lookup function for ResponderNode();
  uint64_t v3 = v2(a1);
  outlined init with copy of TableColumnList(a1, (uint64_t)v7);
  if (v3)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v7);
  }
  else
  {
    __swift_project_boxed_opaque_existential_1(v7, v7[3]);
    uint64_t v4 = EventType.isFocusEvent.getter();
    uint64_t v5 = __swift_destroy_boxed_opaque_existential_1((uint64_t)v7);
    if (v4)
    {
      MEMORY[0x1F4188790](v5);
      MultiViewResponder.visit(applying:)();
    }
    return 0;
  }
  return v3;
}

uint64_t closure #1 in FocusableViewResponder.focusProxyResponder.getter@<X0>(uint64_t a1@<X0>, void *a2@<X1>, char *a3@<X8>)
{
  type metadata accessor for FocusEventProxyResponder();
  uint64_t result = swift_dynamicCastClass();
  if (result)
  {
    *a2 = a1;
    swift_retain();
    uint64_t result = swift_release();
    char v7 = 2;
  }
  else
  {
    char v7 = 0;
  }
  *a3 = v7;
  return result;
}

uint64_t FocusableViewResponder.__allocating_init(inputs:viewSubgraph:)()
{
  return FocusableViewResponder.init(inputs:viewSubgraph:)();
}

uint64_t FocusableViewResponder.init(inputs:viewSubgraph:)()
{
  swift_unknownObjectWeakInit();
  *(void *)(v0 + 224) = MEMORY[0x1E4FBC860];
  *(_OWORD *)(v0 + 232) = 0u;
  *(_OWORD *)(v0 + 248) = 0u;
  *(_OWORD *)(v0 + 264) = 0u;
  *(_OWORD *)(v0 + 280) = 0u;
  *(_WORD *)(v0 + 296) = 257;
  swift_retain();
  ContentResponderHelper.init()();
  *(void *)(v0 + 408) = 0;
  *(_WORD *)(v0 + 416) = 1;
  *(void *)(v0 + 424) = 0;
  *(_WORD *)(v0 + 432) = 256;
  *(void *)(v0 + 440) = 0;
  swift_release();
  return DefaultLayoutViewResponder.init(inputs:viewSubgraph:)();
}

void FocusableViewResponder.__ivar_destroyer()
{
  swift_unknownObjectWeakDestroy();
  swift_bridgeObjectRelease();
  outlined consume of FocusItem.ViewItem?(v0[29], v0[30], v0[31]);
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t v1 = (void *)v0[55];
}

uint64_t FocusableViewResponder.__deallocating_deinit()
{
  uint64_t v0 = DefaultLayoutViewResponder.deinit();
  swift_unknownObjectWeakDestroy();
  swift_bridgeObjectRelease();
  outlined consume of FocusItem.ViewItem?(*(void *)(v0 + 232), *(void *)(v0 + 240), *(void *)(v0 + 248));
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t protocol witness for FocusResponder.keyPressHandlers.getter in conformance FocusableViewResponder()
{
  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for BaseFocusResponder.isEnabled.getter in conformance FocusableViewResponder()
{
  return *(unsigned __int8 *)(v0 + 297);
}

uint64_t UIKitFocusableViewResponderItem.next.getter()
{
  if ((MEMORY[0x18C111F70]() & 1) == 0) {
    return MEMORY[0x18C119DF0](v0 + OBJC_IVAR____TtC7SwiftUIP33_B6A2D4E72E5722B5103497ADB7778B5F31UIKitFocusableViewResponderItem_host);
  }
  uint64_t Strong = swift_weakLoadStrong();
  if (!Strong) {
    return 0;
  }
  uint64_t v2 = Strong;
  v10[4] = 0;
  MEMORY[0x1F4188790](Strong);
  MultiViewResponder.visit(applying:)();
  swift_retain_n();
  swift_beginAccess();
  if (swift_weakLoadStrong())
  {
    while (1)
    {
      uint64_t v4 = dispatch thunk of ViewResponder.gestureContainer.getter();
      if (v4) {
        break;
      }
      type metadata accessor for UIViewResponder();
      uint64_t v5 = swift_dynamicCastClass();
      if (v5)
      {
        uint64_t v4 = MEMORY[0x18C119DF0](v5 + 48);
        if (v4) {
          break;
        }
      }
      swift_release();
      swift_beginAccess();
      if (!swift_weakLoadStrong()) {
        goto LABEL_13;
      }
    }
    uint64_t v3 = v4;
    swift_release_n();
    swift_release();
  }
  else
  {
LABEL_13:
    swift_beginAccess();
    uint64_t v3 = MEMORY[0x18C119DF0](v2 + 16);
    if (v3)
    {
      uint64_t v6 = *(void *)(v2 + 24);
      uint64_t ObjectType = swift_getObjectType();
      uint64_t v8 = type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIView);
      (*(void (**)(void *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 16))(v10, v8, v8, ObjectType, v6);
      swift_unknownObjectRelease();
      uint64_t v3 = v10[0];
    }
    swift_release_n();
  }
  swift_release();
  return v3;
}

uint64_t UIKitFocusableViewResponderItem.defaultFocusGroupIdentifier.getter()
{
  uint64_t v1 = (_WORD *)(v0
               + OBJC_IVAR____TtC7SwiftUIP33_B6A2D4E72E5722B5103497ADB7778B5F31UIKitFocusableViewResponderItem____lazy_storage___defaultFocusGroupIdentifier);
  if ((*(unsigned char *)(v0
                 + OBJC_IVAR____TtC7SwiftUIP33_B6A2D4E72E5722B5103497ADB7778B5F31UIKitFocusableViewResponderItem____lazy_storage___defaultFocusGroupIdentifier
                 + 9) & 1) == 0)
    return *(void *)v1;
  uint64_t result = AGMakeUniqueID();
  *(void *)uint64_t v1 = result;
  v1[4] = 0;
  return result;
}

unint64_t UIKitFocusableViewResponderItem.swiftui_focusGroupIdentifier.getter()
{
  uint64_t Strong = swift_weakLoadStrong();
  if (Strong && (char v1 = *(unsigned char *)(Strong + 432), v2 = *(unsigned char *)(Strong + 433), swift_release(), (v2 & 1) == 0))
  {
    if ((v1 & 1) == 0)
    {
LABEL_6:
      _StringGuts.grow(_:)(31);
      swift_bridgeObjectRelease();
      v4._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v4);
      swift_bridgeObjectRelease();
      return 0xD00000000000001DLL;
    }
  }
  else
  {
    UIKitFocusableViewResponderItem.defaultFocusGroupIdentifier.getter();
    if ((v3 & 1) == 0) {
      goto LABEL_6;
    }
  }
  return 0;
}

uint64_t UIKitFocusableViewResponderItem.shouldUpdateFocus(in:)(void *a1)
{
  id v3 = objc_msgSend(a1, sel_nextFocusedItem);
  if (!v3) {
    return 1;
  }
  id v4 = v3;
  swift_unknownObjectRelease();
  if (v4 != v1) {
    return 1;
  }
  if (!objc_msgSend(a1, sel_previouslyFocusedItem)) {
    return 1;
  }
  swift_unknownObjectRelease();
  uint64_t Strong = (void *)swift_weakLoadStrong();
  if (!Strong) {
    return 1;
  }
  uint64_t v8 = Strong[29];
  uint64_t v7 = Strong[30];
  uint64_t v9 = Strong[31];
  outlined copy of FocusItem.ViewItem?(v8, v7, v9);
  swift_release();
  if (!v9) {
    return 1;
  }
  outlined consume of FocusItem.ViewItem?(v8, v7, v9);
  return BYTE4(v8) & ((v7 & 2) != 0);
}

uint64_t UIKitFocusableViewResponderItem.updateFocusedState()()
{
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    char v1 = *(unsigned char *)(result + 416);
    uint64_t result = swift_release();
    if ((v1 & 1) == 0)
    {
      uint64_t result = AGWeakAttributeGetAttribute();
      if (result != *MEMORY[0x1E4F4E7A0])
      {
        id v2 = (id)AGGraphGetAttributeGraph();
        AGGraphRef.viewGraph()();

        type metadata accessor for UIKitFocusableViewResponderItem();
        UIFocusItem.isFocused.getter();
        lazy protocol witness table accessor for type UIKitFocusableViewResponderItem.FocusedStateCommitMutation and conformance UIKitFocusableViewResponderItem.FocusedStateCommitMutation();
        default argument 1 of GraphHost.asyncTransaction<A>(_:id:mutation:style:mayDeferUpdate:)();
        GraphHost.asyncTransaction<A>(_:id:mutation:style:mayDeferUpdate:)();
        return swift_release();
      }
    }
  }
  return result;
}

uint64_t UIKitFocusableViewResponderItem.FocusedStateCommitMutation.combine<A>(with:)(uint64_t a1)
{
  double v2 = MEMORY[0x1F4188790](a1);
  (*(void (**)(unsigned char *, double))(v4 + 16))(&v9[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)], v2);
  uint64_t result = swift_dynamicCast();
  if (result)
  {
    char v6 = v9[4];
    int v7 = v10;
    int v8 = v11;
    if (static WeakAttribute.== infix(_:_:)())
    {
      *(unsigned char *)uint64_t v1 = v6;
      uint64_t result = 1;
      *(_DWORD *)(v1 + 4) = v7;
      *(_DWORD *)(v1 + 8) = v8;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t protocol witness for GraphMutation.apply() in conformance UIKitFocusableViewResponderItem.FocusedStateCommitMutation()
{
  uint64_t result = AGWeakAttributeGetAttribute();
  if (result != *MEMORY[0x1E4F4E7A0]) {
    return AGGraphSetValue();
  }
  return result;
}

uint64_t UIKitFocusableViewResponderItem.focusEffect.getter()
{
  uint64_t v1 = v0;
  uint64_t v2 = v0 + OBJC_IVAR____TtC7SwiftUIP33_B6A2D4E72E5722B5103497ADB7778B5F31UIKitFocusableViewResponderItem_contentPath;
  uint64_t v3 = *(void *)(v0
                 + OBJC_IVAR____TtC7SwiftUIP33_B6A2D4E72E5722B5103497ADB7778B5F31UIKitFocusableViewResponderItem_contentPath);
  uint64_t v4 = *(void *)(v0
                 + OBJC_IVAR____TtC7SwiftUIP33_B6A2D4E72E5722B5103497ADB7778B5F31UIKitFocusableViewResponderItem_contentPath
                 + 8);
  uint64_t v5 = *(void *)(v0
                 + OBJC_IVAR____TtC7SwiftUIP33_B6A2D4E72E5722B5103497ADB7778B5F31UIKitFocusableViewResponderItem_contentPath
                 + 16);
  uint64_t v6 = *(void *)(v0
                 + OBJC_IVAR____TtC7SwiftUIP33_B6A2D4E72E5722B5103497ADB7778B5F31UIKitFocusableViewResponderItem_contentPath
                 + 24);
  uint64_t v7 = v3;
  uint64_t v8 = v4;
  uint64_t v52 = v6;
  uint64_t v53 = v5;
  int v9 = *(unsigned __int8 *)(v0
                          + OBJC_IVAR____TtC7SwiftUIP33_B6A2D4E72E5722B5103497ADB7778B5F31UIKitFocusableViewResponderItem_contentPath
                          + 32);
  unsigned __int8 v51 = *(unsigned char *)(v0
                 + OBJC_IVAR____TtC7SwiftUIP33_B6A2D4E72E5722B5103497ADB7778B5F31UIKitFocusableViewResponderItem_contentPath
                 + 32);
  if (v9 != 255) {
    goto LABEL_11;
  }
  uint64_t Strong = (_DWORD *)swift_weakLoadStrong();
  if (!Strong) {
    return (uint64_t)Strong;
  }
  long long v67 = 0u;
  long long v68 = 0u;
  char v69 = 6;
  uint64_t v11 = MEMORY[0x18C119DF0](v1 + OBJC_IVAR____TtC7SwiftUIP33_B6A2D4E72E5722B5103497ADB7778B5F31UIKitFocusableViewResponderItem_host);
  v45 = Strong;
  if (!v11) {
    goto LABEL_7;
  }
  uint64_t v12 = (void *)v11;
  type metadata accessor for HostingScrollView.PlatformGroupContainer();
  if (!swift_dynamicCastClass())
  {

LABEL_7:
    v72[0] = 16;
    hostingViewCoordinateSpace.getter();
    LOBYTE(v58) = 1;
    MultiViewResponder.addContentPath(to:kind:in:observer:)();
    goto LABEL_8;
  }
  v72[0] = 16;
  static CoordinateSpace.scrollViewSafeArea.getter();
  MultiViewResponder.addContentPath(to:kind:in:observer:)();

LABEL_8:
  outlined destroy of CoordinateSpace((uint64_t)&v54);
  uint64_t v49 = v4;
  uint64_t v50 = v1;
  v70[0] = v67;
  v70[1] = v68;
  LOBYTE(v9) = v69;
  char v71 = v69;
  uint64_t v8 = *((void *)&v67 + 1);
  uint64_t v7 = v67;
  uint64_t v6 = *((void *)&v68 + 1);
  uint64_t v5 = v68;
  outlined init with take of Path.Storage((uint64_t)v70, (uint64_t)v72);
  outlined retain of Path.Storage((uint64_t)v72, (void (*)(void, void, void, void, void))outlined copy of Path.Storage);
  char v13 = Path.isEmpty.getter();
  uint64_t v14 = outlined retain of Path.Storage((uint64_t)v70, (void (*)(void, void, void, void, void))outlined consume of Path.Storage);
  if (v13)
  {
    MEMORY[0x18C113CA0](v14);
    AGGraphClearUpdate();
    int v15 = v45[24];
    uint64_t v16 = *((void *)v45 + 13);
    unsigned int v17 = v45[28];
    unsigned int v18 = v45[29];
    int v9 = v45[30];
    int v19 = v45[31];
    uint64_t v20 = *((void *)v45 + 16);
    uint64_t v44 = *((void *)v45 + 17);
    int v42 = v45[37];
    int v43 = v45[36];
    int v40 = v45[39];
    int v41 = v45[38];
    int v38 = v45[41];
    int v39 = v45[40];
    int v37 = v45[42];
    *(void *)&long long v54 = *((void *)v45 + 11);
    uint64_t v46 = v54;
    DWORD2(v54) = v15;
    *(void *)&long long v55 = v16;
    *((void *)&v55 + 1) = __PAIR64__(v18, v17);
    int v56 = v9;
    int v57 = v19;
    uint64_t v58 = v20;
    uint64_t v59 = v44;
    int v60 = v43;
    int v61 = v42;
    int v62 = v41;
    int v63 = v40;
    int v64 = v39;
    int v65 = v38;
    int v66 = v37;
    _ViewInputs.position.getter();
    long long v54 = *(_OWORD *)AGGraphGetValue();
    double v21 = MEMORY[0x18C10C240]();
    uint64_t v23 = v22;
    AGGraphSetUpdate();
    AGGraphClearUpdate();
    *(void *)&long long v54 = v46;
    DWORD2(v54) = v15;
    *(void *)&long long v55 = v16;
    *((void *)&v55 + 1) = __PAIR64__(v18, v17);
    int v56 = v9;
    int v57 = v19;
    uint64_t v58 = v20;
    uint64_t v59 = v44;
    int v60 = v43;
    int v61 = v42;
    int v62 = v41;
    int v63 = v40;
    int v64 = v39;
    int v65 = v38;
    int v66 = v37;
    _ViewInputs.size.getter();
    Value = (long long *)AGGraphGetValue();
    long long v25 = Value[1];
    long long v54 = *Value;
    long long v55 = v25;
    double v26 = MEMORY[0x18C114450]();
    uint64_t v28 = v27;
    AGGraphSetUpdate();
    static Update.end()();
    outlined retain of Path.Storage((uint64_t)v70, (void (*)(void, void, void, void, void))outlined consume of Path.Storage);
    LOBYTE(v9) = 0;
    uint64_t v7 = *(void *)&v21;
    uint64_t v8 = v23;
    uint64_t v5 = *(void *)&v26;
    uint64_t v6 = v28;
  }
  uint64_t v29 = *(void *)v2;
  uint64_t v30 = *(void *)(v2 + 24);
  uint64_t v47 = *(void *)(v2 + 16);
  uint64_t v48 = *(void *)(v2 + 8);
  *(void *)uint64_t v2 = v7;
  *(void *)(v2 + 8) = v8;
  *(void *)(v2 + 16) = v5;
  *(void *)(v2 + 24) = v6;
  unsigned __int8 v31 = *(unsigned char *)(v2 + 32);
  *(unsigned char *)(v2 + 32) = v9;
  outlined copy of Path.Storage(v7, v8, v5, v6, v9);
  outlined consume of Path?(v29, v48, v47, v30, v31);
  swift_release();
  uint64_t v1 = v50;
  uint64_t v4 = v49;
LABEL_11:
  *(void *)&long long v54 = v7;
  *((void *)&v54 + 1) = v8;
  *(void *)&long long v55 = v5;
  *((void *)&v55 + 1) = v6;
  LOBYTE(v56) = v9;
  uint64_t result = swift_weakLoadStrong();
  if (!result)
  {
    outlined copy of Path?(v3, v4, v53, v52, v51);
    goto LABEL_16;
  }
  if (*(void *)(result + 248))
  {
    uint64_t v33 = *(void *)(result + 240);
    outlined copy of Path?(v3, v4, v53, v52, v51);
    swift_release();
    if ((v33 & 4) != 0)
    {
      outlined consume of Path.Storage(v7, v8, v5, v6, v9);
      return 0;
    }
LABEL_16:
    if (Path.isEmpty.getter())
    {
      uint64_t Strong = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1788]), sel_init);
    }
    else
    {
      v34 = (void *)Path.cgPath.getter();
      id v35 = objc_msgSend(self, sel_bezierPathWithCGPath_, v34);

      uint64_t Strong = objc_msgSend(self, sel_effectWithPath_, v35);
    }
    v36 = (void *)MEMORY[0x18C119DF0](v1+ OBJC_IVAR____TtC7SwiftUIP33_B6A2D4E72E5722B5103497ADB7778B5F31UIKitFocusableViewResponderItem_host);
    objc_msgSend(Strong, sel_setContainerView_, v36);
    outlined consume of Path.Storage(v7, v8, v5, v6, v9);

    return (uint64_t)Strong;
  }
  __break(1u);
  return result;
}

id UIKitFocusableViewResponderItem.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for UIKitFocusableViewResponderItem();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t protocol witness for TrivialContentPathObserver.contentPathDidChange(for:) in conformance UIKitFocusableViewResponderItem()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC7SwiftUIP33_B6A2D4E72E5722B5103497ADB7778B5F31UIKitFocusableViewResponderItem_contentPath;
  uint64_t v2 = *(void *)(v0
                 + OBJC_IVAR____TtC7SwiftUIP33_B6A2D4E72E5722B5103497ADB7778B5F31UIKitFocusableViewResponderItem_contentPath);
  uint64_t v3 = *(void *)(v0
                 + OBJC_IVAR____TtC7SwiftUIP33_B6A2D4E72E5722B5103497ADB7778B5F31UIKitFocusableViewResponderItem_contentPath
                 + 8);
  uint64_t v4 = *(void *)(v0
                 + OBJC_IVAR____TtC7SwiftUIP33_B6A2D4E72E5722B5103497ADB7778B5F31UIKitFocusableViewResponderItem_contentPath
                 + 16);
  uint64_t v5 = *(void *)(v0
                 + OBJC_IVAR____TtC7SwiftUIP33_B6A2D4E72E5722B5103497ADB7778B5F31UIKitFocusableViewResponderItem_contentPath
                 + 24);
  *(_OWORD *)uint64_t v1 = 0u;
  *(_OWORD *)(v1 + 16) = 0u;
  unsigned __int8 v6 = *(unsigned char *)(v1 + 32);
  *(unsigned char *)(v1 + 32) = -1;
  return outlined consume of Path?(v2, v3, v4, v5, v6);
}

void protocol witness for AnyUIKitHostedFocusItem.host.getter in conformance UIKitFocusableViewResponderItem()
{
}

void protocol witness for AnyUIKitHostedFocusItem.host.setter in conformance UIKitFocusableViewResponderItem(void *a1)
{
  swift_unknownObjectWeakAssign();
}

void protocol witness for AnyUIKitHostedFocusItem.frame.setter in conformance UIKitFocusableViewResponderItem(double a1, double a2, double a3, double a4)
{
  uint64_t v5 = (double *)(v4
                + OBJC_IVAR____TtC7SwiftUIP33_B6A2D4E72E5722B5103497ADB7778B5F31UIKitFocusableViewResponderItem_frame);
  *uint64_t v5 = a1;
  v5[1] = a2;
  v5[2] = a3;
  v5[3] = a4;
}

uint64_t protocol witness for AnyUIKitHostedFocusItem.responder.getter in conformance UIKitFocusableViewResponderItem()
{
  return swift_weakLoadStrong();
}

uint64_t protocol witness for ContentPathObserver.respondersDidChange(for:) in conformance UIKitFocusableViewResponderItem(uint64_t a1, uint64_t a2)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F4100310](a1, a2, WitnessTable);
}

uint64_t protocol witness for ContentPathObserver.contentPathDidChange(for:changes:transform:finished:) in conformance UIKitFocusableViewResponderItem(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F4100308](a1, a2, a3, a4, a5, a6, WitnessTable);
}

uint64_t protocol witness for static PreferenceKey.defaultValue.getter in conformance FocusDelegationPreferenceKey@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for defaultValue != -1) {
    swift_once();
  }

  return outlined init with copy of FocusItem?((uint64_t)&static FocusDelegationPreferenceKey.defaultValue, a1);
}

uint64_t protocol witness for static PreferenceKey.reduce(value:nextValue:) in conformance FocusDelegationPreferenceKey(uint64_t a1, void (*a2)(void *__return_ptr, uint64_t))
{
  uint64_t v4 = outlined init with take of FocusItem?(a1, (uint64_t)v7);
  if (v7[5]) {
    BOOL v5 = 0;
  }
  else {
    BOOL v5 = v7[6] == 1;
  }
  if (v5)
  {
    a2(v8, v4);
    _s7SwiftUI9FocusItemVSgWOhTm_0((uint64_t)v7, (uint64_t)&lazy cache variable for type metadata for FocusItem?, (uint64_t)&type metadata for FocusItem, MEMORY[0x1E4FBB718], (uint64_t (*)(void))_s7SwiftUI32_EnvironmentKeyTransformModifierVySbGMaTm_3);
  }
  else
  {
    outlined init with take of FocusItem((uint64_t)v7, (uint64_t)v8);
  }
  return outlined init with take of FocusItem?((uint64_t)v8, a1);
}

int64x2_t protocol witness for static Rule.initialValue.getter in conformance FocusDelegationPreferenceProvider@<Q0>(uint64_t a1@<X8>)
{
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  int64x2_t result = vdupq_n_s64(1uLL);
  *(int64x2_t *)(a1 + 40) = result;
  *(_DWORD *)(a1 + 56) = 0;
  return result;
}

uint64_t protocol witness for Rule.value.getter in conformance FocusDelegationPreferenceProvider@<X0>(uint64_t a1@<X8>)
{
  uint64_t Value = AGGraphGetValue();
  int v3 = *(_DWORD *)Value;
  char v4 = *(unsigned char *)(Value + 4);
  uint64_t v5 = *(void *)(Value + 8);
  uint64_t v6 = *(void *)(Value + 16);
  uint64_t v7 = *(void *)(Value + 24);
  swift_weakInit();
  int v17 = 0;
  int v9 = v3;
  char v10 = v4;
  uint64_t v11 = v5;
  uint64_t v12 = v6;
  uint64_t v13 = v7;
  char v14 = 0;
  uint64_t v16 = &protocol witness table for FocusableViewResponder;
  swift_weakAssign();
  char v15 = 0;
  outlined init with take of FocusItem((uint64_t)&v9, a1);
  return swift_retain();
}

void *protocol witness for static PreferenceKey.reduce(value:nextValue:) in conformance FocusableOptionsKey(void *a1, void *(*a2)(uint64_t *__return_ptr))
{
  int64x2_t result = a2(&v4);
  *a1 |= v4;
  return result;
}

void View.focusable(_:onFocusChange:)()
{
}

uint64_t View.focusable(_:options:)(char a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return View.focusable(_:interactions:)(a1, a2, a3, a4, (uint64_t)&type metadata for FocusableOptions, (uint64_t)&protocol witness table for FocusableOptions);
}

uint64_t View.focusable(_:interactions:)(char a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6 = *a2;
  uint64_t v10 = a5;
  uint64_t v11 = a6;
  uint64_t v9 = v6;
  v8[0] = a1;
  uint64_t v12 = destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
  uint64_t v13 = 0;
  MEMORY[0x18C113660](v8, a3, &type metadata for _FocusableModifier);
  return outlined destroy of _FocusableModifier((uint64_t)v8);
}

unint64_t lazy protocol witness table accessor for type FocusInteractions and conformance FocusInteractions()
{
  unint64_t result = lazy protocol witness table cache variable for type FocusInteractions and conformance FocusInteractions;
  if (!lazy protocol witness table cache variable for type FocusInteractions and conformance FocusInteractions)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FocusInteractions and conformance FocusInteractions);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type FocusInteractions and conformance FocusInteractions;
  if (!lazy protocol witness table cache variable for type FocusInteractions and conformance FocusInteractions)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FocusInteractions and conformance FocusInteractions);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type FocusInteractions and conformance FocusInteractions;
  if (!lazy protocol witness table cache variable for type FocusInteractions and conformance FocusInteractions)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FocusInteractions and conformance FocusInteractions);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type FocusInteractions and conformance FocusInteractions;
  if (!lazy protocol witness table cache variable for type FocusInteractions and conformance FocusInteractions)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FocusInteractions and conformance FocusInteractions);
  }
  return result;
}

_UNKNOWN **base witness table accessor for ViewModifier in _FocusableModifier()
{
  return &protocol witness table for _FocusableModifier;
}

unint64_t lazy protocol witness table accessor for type FocusableOptions and conformance FocusableOptions()
{
  unint64_t result = lazy protocol witness table cache variable for type FocusableOptions and conformance FocusableOptions;
  if (!lazy protocol witness table cache variable for type FocusableOptions and conformance FocusableOptions)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FocusableOptions and conformance FocusableOptions);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type FocusableOptions and conformance FocusableOptions;
  if (!lazy protocol witness table cache variable for type FocusableOptions and conformance FocusableOptions)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FocusableOptions and conformance FocusableOptions);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type FocusableOptions and conformance FocusableOptions;
  if (!lazy protocol witness table cache variable for type FocusableOptions and conformance FocusableOptions)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FocusableOptions and conformance FocusableOptions);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type FocusableOptions and conformance FocusableOptions;
  if (!lazy protocol witness table cache variable for type FocusableOptions and conformance FocusableOptions)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FocusableOptions and conformance FocusableOptions);
  }
  return result;
}

ValueMetadata *type metadata accessor for FocusInteractions()
{
  return &type metadata for FocusInteractions;
}

ValueMetadata *type metadata accessor for FocusEffect()
{
  return &type metadata for FocusEffect;
}

uint64_t assignWithTake for _FocusableModifier(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  __swift_destroy_boxed_opaque_existential_1(a1 + 8);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  swift_release();
  return a1;
}

uint64_t ObjC metadata update function for FocusableViewResponder()
{
  return type metadata accessor for FocusableViewResponder();
}

uint64_t type metadata accessor for UIKitFocusableViewResponderItem()
{
  return self;
}

uint64_t sub_18821BEB8()
{
  return swift_getWitnessTable();
}

uint64_t sub_18821BF1C()
{
  return swift_getWitnessTable();
}

unint64_t lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<FocusEffect> and conformance _EnvironmentKeyWritingModifier<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<FocusEffect> and conformance _EnvironmentKeyWritingModifier<A>;
  if (!lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<FocusEffect> and conformance _EnvironmentKeyWritingModifier<A>)
  {
    _s7SwiftUI32_EnvironmentKeyTransformModifierVySbGMaTm_3(255, &lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<FocusEffect>, (uint64_t)&type metadata for FocusEffect, MEMORY[0x1E4F411E8]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<FocusEffect> and conformance _EnvironmentKeyWritingModifier<A>);
  }
  return result;
}

uint64_t sub_18821C028()
{
  uint64_t v0 = (uint64_t (*)(void, uint64_t))MEMORY[0x1E4F41280];
  _s7SwiftUI32_EnvironmentKeyTransformModifierVySbGMaTm_3(255, &lazy cache variable for type metadata for _EnvironmentKeyTransformModifier<Bool>, MEMORY[0x1E4FBB390], MEMORY[0x1E4F41280]);
  type metadata accessor for ModifiedContent();
  lazy protocol witness table accessor for type _EnvironmentKeyTransformModifier<Bool> and conformance _EnvironmentKeyTransformModifier<A>((unint64_t *)&lazy protocol witness table cache variable for type _EnvironmentKeyTransformModifier<Bool> and conformance _EnvironmentKeyTransformModifier<A>, &lazy cache variable for type metadata for _EnvironmentKeyTransformModifier<Bool>, v0);
  return swift_getWitnessTable();
}

unsigned char *storeEnumTagSinglePayload for FocusEffect(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x18821C1B8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for FocusEffect.Kind()
{
  return &type metadata for FocusEffect.Kind;
}

ValueMetadata *type metadata accessor for FocusableOptionsKey()
{
  return &type metadata for FocusableOptionsKey;
}

ValueMetadata *type metadata accessor for IsFocusedEnvironmentChild()
{
  return &type metadata for IsFocusedEnvironmentChild;
}

ValueMetadata *type metadata accessor for IOSFocusEnabledFlag()
{
  return &type metadata for IOSFocusEnabledFlag;
}

uint64_t assignWithCopy for UpdateViewFocusItem(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  swift_weakCopyAssign();
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  return a1;
}

uint64_t initializeWithTake for UpdateViewFocusItem(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return initializeWithCopy for UpdateViewFocusItem(a1, a2, a3, MEMORY[0x1E4FBC950]);
}

uint64_t assignWithTake for UpdateViewFocusItem(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  swift_weakTakeAssign();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  return a1;
}

void *type metadata accessor for UpdateViewFocusItem()
{
  return &unk_1ED42ED98;
}

void *type metadata accessor for ResolvedOptions()
{
  return &unk_1ED41B300;
}

void *type metadata accessor for EnvironmentValues.IsFocusEffectEnabledKey()
{
  return &unk_1ED421EB8;
}

ValueMetadata *type metadata accessor for EnvironmentValues.IsFocusedKey()
{
  return &type metadata for EnvironmentValues.IsFocusedKey;
}

_UNKNOWN **base witness table accessor for _GraphInputsModifier in IOSFocusEnabledFlag()
{
  return &protocol witness table for IOSFocusEnabledFlag;
}

unint64_t lazy protocol witness table accessor for type FocusEffect.Kind and conformance FocusEffect.Kind()
{
  unint64_t result = lazy protocol witness table cache variable for type FocusEffect.Kind and conformance FocusEffect.Kind;
  if (!lazy protocol witness table cache variable for type FocusEffect.Kind and conformance FocusEffect.Kind)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FocusEffect.Kind and conformance FocusEffect.Kind);
  }
  return result;
}

_UNKNOWN **base witness table accessor for ContentPathObserver in UIKitFocusableViewResponderItem()
{
  return &protocol witness table for UIKitFocusableViewResponderItem;
}

unint64_t lazy protocol witness table accessor for type UIKitFocusableViewResponderItem.FocusedStateCommitMutation and conformance UIKitFocusableViewResponderItem.FocusedStateCommitMutation()
{
  unint64_t result = lazy protocol witness table cache variable for type UIKitFocusableViewResponderItem.FocusedStateCommitMutation and conformance UIKitFocusableViewResponderItem.FocusedStateCommitMutation;
  if (!lazy protocol witness table cache variable for type UIKitFocusableViewResponderItem.FocusedStateCommitMutation and conformance UIKitFocusableViewResponderItem.FocusedStateCommitMutation)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UIKitFocusableViewResponderItem.FocusedStateCommitMutation and conformance UIKitFocusableViewResponderItem.FocusedStateCommitMutation);
  }
  return result;
}

uint64_t outlined copy of FocusItem.ViewItem?(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3) {
    return swift_retain();
  }
  return result;
}

uint64_t outlined consume of FocusItem.ViewItem?(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3) {
    return swift_release();
  }
  return result;
}

uint64_t specialized UIKitFocusableViewResponderItem.didUpdateFocus(in:with:)(void *a1)
{
  uint64_t v2 = v1;
  _sSay7SwiftUI8KeyPressV7HandlerVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for Logger?, MEMORY[0x1E4FBD360], MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v4 - 8);
  unsigned int v6 = (char *)&v23 - v5;
  static Log.focus.getter();
  uint64_t v7 = type metadata accessor for Logger();
  uint64_t v8 = *(void *)(v7 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1)
  {
    _s7SwiftUI9FocusItemVSgWOhTm_0((uint64_t)v6, (uint64_t)&lazy cache variable for type metadata for Logger?, MEMORY[0x1E4FBD360], MEMORY[0x1E4FBB718], (uint64_t (*)(void))_sSay7SwiftUI8KeyPressV7HandlerVGMaTm_0);
  }
  else
  {
    id v9 = v2;
    uint64_t v10 = Logger.logObject.getter();
    os_log_type_t v11 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v10, v11))
    {
      double v26 = a1;
      uint64_t v12 = (uint8_t *)swift_slowAlloc();
      uint64_t v25 = swift_slowAlloc();
      uint64_t v28 = v25;
      *(_DWORD *)uint64_t v12 = 136315138;
      uint64_t v23 = v12 + 4;
      v24 = v12;
      id v13 = v9;
      uint64_t v14 = specialized UIKitFocusItemDescription.init(_:)(v13);
      unint64_t v16 = v15;

      uint64_t v17 = v14;
      a1 = v26;
      uint64_t v27 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v17, v16, &v28);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      os_log_type_t v18 = v11;
      int v19 = v24;
      _os_log_impl(&dword_1872C6000, v10, v18, "focus changed for: %s", v24, 0xCu);
      uint64_t v20 = v25;
      swift_arrayDestroy();
      MEMORY[0x18C119C60](v20, -1, -1);
      MEMORY[0x18C119C60](v19, -1, -1);
    }
    else
    {
    }
    (*(void (**)(char *, uint64_t))(v8 + 8))(v6, v7);
  }
  uint64_t result = swift_weakLoadStrong();
  if (!result) {
    return UIKitFocusableViewResponderItem.updateFocusedState()();
  }
  uint64_t v22 = *(void (**)(void))(result + 248);
  if (v22)
  {
    swift_retain();
    swift_release();
    if (objc_msgSend(a1, sel_nextFocusedItem)) {
      swift_unknownObjectRelease();
    }
    v22();
    swift_release();
    return UIKitFocusableViewResponderItem.updateFocusedState()();
  }
  __break(1u);
  return result;
}

uint64_t partial apply for closure #1 in FocusableViewResponder.focusProxyResponder.getter@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  return closure #1 in FocusableViewResponder.focusProxyResponder.getter(a1, *(void **)(v2 + 16), a2);
}

uint64_t outlined release of UpdateViewGeometry(uint64_t a1)
{
  return a1;
}

uint64_t sub_18821C93C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  return keypath_get_2Tm_1(a1, a2, (uint64_t (*)(uint64_t, uint64_t))EnvironmentValues.isPlatformFocusSystemEnabled.getter, a3);
}

uint64_t keypath_get_2Tm_1@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t)@<X3>, unsigned char *a4@<X8>)
{
  uint64_t result = a3(a1, a2);
  *a4 = result & 1;
  return result;
}

uint64_t sub_18821C998(unsigned __int8 *a1)
{
  return EnvironmentValues.isFocused.setter(*a1, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.IsPlatformFocusSystemEnabled>, (uint64_t)&type metadata for EnvironmentValues.IsPlatformFocusSystemEnabled, (uint64_t)&protocol witness table for EnvironmentValues.IsPlatformFocusSystemEnabled, lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.IsPlatformFocusSystemEnabled> and conformance EnvironmentPropertyKey<A>);
}

uint64_t sub_18821C9E4@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = EnvironmentValues.focusGroupID.getter();
  *(void *)a1 = result;
  *(unsigned char *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 9) = v4 & 1;
  return result;
}

uint64_t sub_18821CA2C()
{
  return EnvironmentValues.focusGroupID.setter();
}

uint64_t sub_18821CA7C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  return keypath_get_2Tm_1(a1, a2, (uint64_t (*)(uint64_t, uint64_t))EnvironmentValues.focusDisabled.getter, a3);
}

uint64_t sub_18821CA94(unsigned __int8 *a1)
{
  return EnvironmentValues.isFocused.setter(*a1, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.FocusDisabledKey>, (uint64_t)&unk_1ED421A60, (uint64_t)&protocol witness table for EnvironmentValues.FocusDisabledKey, &lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.FocusDisabledKey> and conformance EnvironmentPropertyKey<A>);
}

void *type metadata accessor for EnvironmentValues.FocusDisabledKey()
{
  return &unk_1ED421A60;
}

ValueMetadata *type metadata accessor for EnvironmentValues.IsPlatformFocusSystemEnabled()
{
  return &type metadata for EnvironmentValues.IsPlatformFocusSystemEnabled;
}

ValueMetadata *type metadata accessor for PreferredDisabledFocusEffectKey()
{
  return &type metadata for PreferredDisabledFocusEffectKey;
}

void *type metadata accessor for FocusDelegationPreferenceProvider()
{
  return &unk_1ED45E9C8;
}

uint64_t assignWithCopy for UpdateFocusableViewResponder(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for UpdateFocusableViewResponder(uint64_t a1, uint64_t a2)
{
  long long v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v3;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_release();
  return a1;
}

void *type metadata accessor for UpdateFocusableViewResponder()
{
  return &unk_1ED454F58;
}

uint64_t destroy for UpdateViewGeometry()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_release();
}

uint64_t assignWithCopy for UpdateViewGeometry(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_retain();
  swift_release();
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  int v4 = *(_DWORD *)(a2 + 88);
  *(unsigned char *)(a1 + 92) = *(unsigned char *)(a2 + 92);
  *(_DWORD *)(a1 + 88) = v4;
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for UpdateViewGeometry(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_release();
  long long v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(unsigned char *)(a1 + 92) = *(unsigned char *)(a2 + 92);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for UpdateViewGeometry(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 128)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 80);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for UpdateViewGeometry(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 120) = 0;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 128) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 80) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 128) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

void *type metadata accessor for UpdateViewGeometry()
{
  return &unk_1ED472DB8;
}

void *type metadata accessor for EnvironmentValues.AllControlsNavigableKey()
{
  return &unk_1ED421E78;
}

uint64_t getEnumTagSinglePayload for UIKitFocusableViewResponderItem.FocusedStateCommitMutation(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && a1[12]) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *a1;
  BOOL v4 = v3 >= 2;
  int v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for UIKitFocusableViewResponderItem.FocusedStateCommitMutation(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_DWORD *)(result + 8) = 0;
    *(void *)uint64_t result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 12) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 12) = 0;
    }
    if (a2) {
      *(unsigned char *)uint64_t result = a2 + 1;
    }
  }
  return result;
}

void *type metadata accessor for UIKitFocusableViewResponderItem.FocusedStateCommitMutation()
{
  return &unk_1ED45BE98;
}

ValueMetadata *type metadata accessor for FocusDelegationPreferenceKey()
{
  return &type metadata for FocusDelegationPreferenceKey;
}

uint64_t EnvironmentValues.labelsVisibility.setter()
{
  type metadata accessor for EnvironmentPropertyKey<LabelsVisibilityKey>();
  lazy protocol witness table accessor for type EnvironmentPropertyKey<LabelsVisibilityKey> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<LabelsVisibilityKey> and conformance EnvironmentPropertyKey<A>, (void (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<LabelsVisibilityKey>);
  swift_retain();
  PropertyList.subscript.setter();
  if (*(void *)(v0 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  return swift_release();
}

uint64_t View.labels(_:)(char a1, uint64_t a2, uint64_t a3)
{
  type metadata accessor for _EnvironmentKeyWritingModifier<Visibility>();
  uint64_t v5 = type metadata accessor for ModifiedContent();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v8 = (char *)v13 - v7;
  swift_getKeyPath();
  char v14 = a1;
  View.environment<A>(_:_:)();
  swift_release();
  uint64_t v9 = lazy protocol witness table accessor for type EnvironmentPropertyKey<LabelsVisibilityKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<Visibility> and conformance _EnvironmentKeyWritingModifier<A>, (void (*)(uint64_t))type metadata accessor for _EnvironmentKeyWritingModifier<Visibility>);
  v13[1] = a3;
  v13[2] = v9;
  uint64_t WitnessTable = swift_getWitnessTable();
  unint64_t v11 = lazy protocol witness table accessor for type LabelVisibilityConfigured and conformance LabelVisibilityConfigured();
  View.input<A>(_:)((uint64_t)&type metadata for LabelVisibilityConfigured, v5, (uint64_t)&type metadata for LabelVisibilityConfigured, WitnessTable, v11);
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t (*EnvironmentValues.labelsVisibility.modify(uint64_t a1))(uint64_t *a1)
{
  *(void *)a1 = v1;
  if (*(void *)(v1 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<LabelsVisibilityKey>();
    lazy protocol witness table accessor for type EnvironmentPropertyKey<LabelsVisibilityKey> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<LabelsVisibilityKey> and conformance EnvironmentPropertyKey<A>, (void (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<LabelsVisibilityKey>);
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<LabelsVisibilityKey>();
    lazy protocol witness table accessor for type EnvironmentPropertyKey<LabelsVisibilityKey> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<LabelsVisibilityKey> and conformance EnvironmentPropertyKey<A>, (void (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<LabelsVisibilityKey>);
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a1 + 9);
  return EnvironmentValues.labelsVisibility.modify;
}

uint64_t EnvironmentValues.labelsVisibility.modify(uint64_t *a1)
{
  uint64_t v1 = *a1;
  *((unsigned char *)a1 + 9) = *((unsigned char *)a1 + 8);
  type metadata accessor for EnvironmentPropertyKey<LabelsVisibilityKey>();
  lazy protocol witness table accessor for type EnvironmentPropertyKey<LabelsVisibilityKey> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<LabelsVisibilityKey> and conformance EnvironmentPropertyKey<A>, (void (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<LabelsVisibilityKey>);
  swift_retain();
  PropertyList.subscript.setter();
  if (*(void *)(v1 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }

  return swift_release();
}

uint64_t sub_18821D500()
{
  return swift_getWitnessTable();
}

void type metadata accessor for ViewInputFlagModifier<LabelVisibilityConfigured>()
{
  if (!lazy cache variable for type metadata for ViewInputFlagModifier<LabelVisibilityConfigured>)
  {
    lazy protocol witness table accessor for type LabelVisibilityConfigured and conformance LabelVisibilityConfigured();
    unint64_t v0 = type metadata accessor for ViewInputFlagModifier();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ViewInputFlagModifier<LabelVisibilityConfigured>);
    }
  }
}

void *type metadata accessor for LabelsVisibilityKey()
{
  return &unk_1ED42C448;
}

uint64_t protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance LabelVisibilityConfigured()
{
  return PropertyList.subscript.setter();
}

_UNKNOWN **base witness table accessor for _GraphInputsModifier in LabelVisibilityConfigured()
{
  return &protocol witness table for LabelVisibilityConfigured;
}

double _CircleLayout.radius.getter()
{
  return *(double *)v0;
}

void _CircleLayout.init(radius:)(double *a1@<X8>, double a2@<D0>)
{
  *a1 = a2;
}

uint64_t static _CircleLayout._makeView(root:inputs:body:)()
{
  return static Layout.makeLayoutView(root:inputs:body:)();
}

unint64_t lazy protocol witness table accessor for type _CircleLayout and conformance _CircleLayout()
{
  unint64_t result = lazy protocol witness table cache variable for type _CircleLayout and conformance _CircleLayout;
  if (!lazy protocol witness table cache variable for type _CircleLayout and conformance _CircleLayout)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _CircleLayout and conformance _CircleLayout);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type _CircleLayout and conformance _CircleLayout;
  if (!lazy protocol witness table cache variable for type _CircleLayout and conformance _CircleLayout)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _CircleLayout and conformance _CircleLayout);
  }
  return result;
}

uint64_t protocol witness for static _VariadicView_ViewRoot._makeView(root:inputs:body:) in conformance _CircleLayout()
{
  return static Layout.makeLayoutView(root:inputs:body:)();
}

uint64_t protocol witness for static _VariadicView_ViewRoot._makeViewList(root:inputs:body:) in conformance _CircleLayout(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return MEMORY[0x1F40FD028](a1, a2, a3, a4, a5, &protocol witness table for _CircleLayout);
}

void protocol witness for _VariadicView_ViewRoot.body(children:) in conformance _CircleLayout()
{
}

uint64_t _CircleLayout.placeSubviews(in:proposal:subviews:cache:)(CGFloat a1, CGFloat a2, CGFloat a3, CGFloat a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double *a9)
{
  return specialized _CircleLayout.placeSubviews(in:proposal:subviews:cache:)(a9, a1, a2, a3, a4);
}

double _CircleLayout.sizeThatFits(proposal:subviews:cache:)()
{
  return *v0 + *v0;
}

double protocol witness for Layout.sizeThatFits(proposal:subviews:cache:) in conformance _CircleLayout()
{
  return *v0 + *v0;
}

uint64_t protocol witness for Layout.placeSubviews(in:proposal:subviews:cache:) in conformance _CircleLayout(CGFloat a1, CGFloat a2, CGFloat a3, CGFloat a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double *a9)
{
  return specialized _CircleLayout.placeSubviews(in:proposal:subviews:cache:)(a9, a1, a2, a3, a4);
}

uint64_t specialized _CircleLayout.placeSubviews(in:proposal:subviews:cache:)(double *a1, CGFloat a2, CGFloat a3, CGFloat a4, CGFloat a5)
{
  int v10 = *(_DWORD *)a1;
  CGFloat v11 = a1[1];
  char v12 = *((unsigned char *)a1 + 16);
  char v13 = *((unsigned char *)a1 + 17);
  double v14 = *v5;
  CGRectGetMidX(*(CGRect *)&a2);
  v24.origin.x = a2;
  v24.origin.y = a3;
  v24.size.width = a4;
  v24.size.height = a5;
  CGRectGetMidY(v24);
  LODWORD(v22.a) = v10;
  v22.b = v11;
  LOBYTE(v22.c) = v12;
  BYTE1(v22.c) = v13;
  swift_bridgeObjectRetain();
  uint64_t v15 = LayoutSubviews.endIndex.getter();
  uint64_t result = LayoutSubviews.endIndex.getter();
  if (result < 0)
  {
    __break(1u);
LABEL_9:
    __break(1u);
    return result;
  }
  uint64_t v17 = LayoutSubviews.endIndex.getter();
  uint64_t result = swift_bridgeObjectRelease();
  if (v15 < 0 || v17 < v15) {
    goto LABEL_9;
  }
  if (v15)
  {
    for (uint64_t i = 0; i != v15; ++i)
    {
      CGAffineTransform.init(rotation:)();
      CGAffineTransform v21 = v22;
      v23.x = 0.0;
      v23.y = -v14;
      CGPointApplyAffineTransform(v23, &v21);
      LODWORD(v21.a) = v10;
      v21.b = v11;
      LOBYTE(v21.c) = v12;
      BYTE1(v21.c) = v13;
      LayoutSubviews.subscript.getter();
      *(_OWORD *)&v21.a = v19;
      LOBYTE(v21.c) = v20;
      static UnitPoint.center.getter();
      uint64_t result = LayoutSubview.place(at:anchor:proposal:)();
    }
  }
  return result;
}

unint64_t instantiation function for generic protocol witness table for _CircleLayout(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type _CircleLayout and conformance _CircleLayout();
  *(void *)(a1 + 8) = result;
  return result;
}

ValueMetadata *type metadata accessor for _CircleLayout()
{
  return &type metadata for _CircleLayout;
}

uint64_t getEnumTagSinglePayload for InitialSceneSizeState(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 26)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for InitialSceneSizeState(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)unint64_t result = 0;
    *(void *)(result + 8) = 0;
    *(_WORD *)(result + 24) = 0;
    *(void *)(result + 16) = 0;
    *(_DWORD *)unint64_t result = a2 - 1;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 26) = v3;
  return result;
}

uint64_t getEnumTag for InitialSceneSizeState(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 25)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t destructiveInjectEnumTag for InitialSceneSizeState(uint64_t result, int a2)
{
  if (a2)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(unsigned char *)(result + 24) = 0;
    *(void *)unint64_t result = (a2 - 1);
    *(unsigned char *)(result + 25) = 1;
  }
  else
  {
    *(unsigned char *)(result + 25) = 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for InitialSceneSizeState()
{
  return &type metadata for InitialSceneSizeState;
}

Swift::Void __swiftcall SceneBridge.updateWindowSizeRestrictions(min:max:)(CGSize_optional min, CGSize_optional max)
{
  char v7 = v5;
  double v8 = v4;
  double v9 = v3;
  if ((v2 & 1) == 0)
  {
    double v10 = *(double *)&max.is_nil;
    double v11 = *(double *)&min.is_nil;
    char v12 = (void *)MEMORY[0x18C119DF0](v6 + 32, (__n128)min.value, *(__n128 *)&min.value.height, (__n128)max.value, *(__n128 *)&max.value.height);
    if (v12)
    {
      char v13 = v12;
      double v14 = v11;
      id v15 = objc_msgSend(v12, sel_sizeRestrictions);

      objc_msgSend(v15, sel_setMinimumSize_, v14, v10);
    }
  }
  if ((v7 & 1) == 0)
  {
    unint64_t v16 = (void *)MEMORY[0x18C119DF0](v6 + 32, *(void *)&max.is_nil, (__n128)min.value, *(__n128 *)&min.value.height, (__n128)max.value, *(__n128 *)&max.value.height);
    if (v16)
    {
      uint64_t v17 = v16;
      id v18 = objc_msgSend(v16, sel_sizeRestrictions);

      objc_msgSend(v18, sel_setMaximumSize_, v9, v8);
    }
  }
}

uint64_t closure #1 in SceneBridge.updateMinimumSizeObserver(added:viewGraph:)(uint64_t a1, double *a2)
{
  double v2 = *a2;
  double v3 = a2[1];
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    if (*(unsigned char *)(result + 161) != 1
      || ((uint64_t v5 = *(void *)(result + 136), !*(unsigned char *)(result + 160))
        ? (BOOL v6 = (*(void *)(result + 144) | *(void *)(result + 152) | v5) == 0)
        : (BOOL v6 = 0),
          !v6 ? (BOOL v7 = *(unsigned char *)(result + 160) == 0) : (BOOL v7 = 0),
          v7 ? (BOOL v8 = v5 == 1) : (BOOL v8 = 0),
          v8 ? (BOOL v9 = *(_OWORD *)(result + 144) == 0) : (BOOL v9 = 0),
          !v9))
    {
      double v10 = (void *)MEMORY[0x18C119DF0](result + 32);
      if (v10)
      {
        double v11 = v10;
        id v12 = objc_msgSend(v10, sel_sizeRestrictions);

        if (v12)
        {
          objc_msgSend(v12, sel_minimumSize);
          if (v14 != v2 || v13 != v3) {
            objc_msgSend(v12, sel_setMinimumSize_, v2, v3);
          }
        }
      }
    }
    return swift_release();
  }
  return result;
}

uint64_t closure #1 in SceneBridge.updateMaximumSizeObserver(added:viewGraph:)(uint64_t a1, double *a2)
{
  double v3 = *a2;
  double v2 = a2[1];
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    if (*(unsigned char *)(result + 161) != 1
      || ((uint64_t v5 = *(void *)(result + 136), !*(unsigned char *)(result + 160))
        ? (BOOL v6 = (*(void *)(result + 144) | *(void *)(result + 152) | v5) == 0)
        : (BOOL v6 = 0),
          !v6 ? (BOOL v7 = *(unsigned char *)(result + 160) == 0) : (BOOL v7 = 0),
          v7 ? (BOOL v8 = v5 == 1) : (BOOL v8 = 0),
          v8 ? (BOOL v9 = *(_OWORD *)(result + 144) == 0) : (BOOL v9 = 0),
          !v9))
    {
      double v10 = (void *)MEMORY[0x18C119DF0](result + 32);
      if (v10)
      {
        double v11 = v10;
        id v12 = objc_msgSend(v10, sel_sizeRestrictions);

        if (v12)
        {
          objc_msgSend(v12, sel_maximumSize);
          if (v14 != INFINITY || v13 != INFINITY)
          {
            double v16 = 2777777.0;
            if (v3 <= 2777777.0) {
              double v17 = v3;
            }
            else {
              double v17 = 2777777.0;
            }
            if (v2 <= 2777777.0) {
              double v16 = v2;
            }
            objc_msgSend(v12, sel_setMaximumSize_, v17, v16);
          }
        }
      }
    }
    return swift_release();
  }
  return result;
}

uint64_t specialized static InitialSceneSizeState.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v4 = a1[2];
  int v5 = *((unsigned __int8 *)a1 + 24);
  uint64_t v6 = *a2;
  uint64_t v7 = a2[1];
  uint64_t v8 = a2[2];
  int v9 = *((unsigned __int8 *)a2 + 24);
  if (*((unsigned char *)a1 + 25) == 1)
  {
    uint64_t v10 = v4 | v3;
    if (v10 | v2) {
      BOOL v11 = 0;
    }
    else {
      BOOL v11 = v5 == 0;
    }
    if (v11)
    {
      if (v8 | v7 | v6) {
        BOOL v15 = 0;
      }
      else {
        BOOL v15 = v9 == 0;
      }
      char v16 = v15;
      if (*((unsigned char *)a2 + 25)) {
        char v14 = v16;
      }
      else {
        char v14 = 0;
      }
    }
    else if (!*((unsigned char *)a1 + 24) && (v2 == 1 ? (BOOL v12 = v10 == 0) : (BOOL v12 = 0), v12))
    {
      v14 = *((unsigned char *)a2 + 25) && ((uint64_t v13 = v8 | v7, v13 | v6) || *((unsigned char *)a2 + 24)) && v6 == 1 && v13 == 0 && v9 == 0;
    }
    else
    {
      uint64_t v17 = v8 | v7;
      uint64_t v18 = v17 | v6;
      BOOL v21 = v6 != 1 || v17 != 0 || v9 != 0;
      if (v18) {
        BOOL v22 = 0;
      }
      else {
        BOOL v22 = v9 == 0;
      }
      BOOL v23 = !v22 && v21;
      char v14 = (*((unsigned char *)a2 + 25) & 1) != 0 && v23;
    }
  }
  else if (*((unsigned char *)a2 + 25))
  {
    char v14 = 0;
  }
  else
  {
    uint64_t v31 = *a1;
    char v32 = v3 & 1;
    uint64_t v33 = v4;
    char v34 = v5 & 1;
    uint64_t v27 = v6;
    char v28 = v7 & 1;
    uint64_t v29 = v8;
    char v30 = v9 & 1;
    char v14 = MEMORY[0x18C10E0D0](&v31, &v27);
  }
  return v14 & 1;
}

id specialized static SceneBridge.applySizes(min:max:toRestrictions:)(id result, uint64_t a2, char a3, uint64_t a4, uint64_t a5, char a6, id a7)
{
  if ((a3 & 1) == 0)
  {
    double v11 = *(double *)&result;
    *(double *)&uint64_t result = COERCE_DOUBLE(objc_msgSend(a7, sel_minimumSize));
    if (v14 != v11 || v13 != *(double *)&a2) {
      *(double *)&uint64_t result = COERCE_DOUBLE(objc_msgSend(a7, sel_setMinimumSize_, v11, *(double *)&a2));
    }
  }
  if ((a6 & 1) == 0)
  {
    *(double *)&uint64_t result = COERCE_DOUBLE(objc_msgSend(a7, sel_maximumSize));
    if (v17 != INFINITY || v16 != INFINITY)
    {
      double v19 = *(double *)&a5;
      double v20 = *(double *)&a4;
      if (*(double *)&a4 > 2777777.0) {
        double v20 = 2777777.0;
      }
      if (*(double *)&a5 > 2777777.0) {
        double v19 = 2777777.0;
      }
      *(double *)&uint64_t result = COERCE_DOUBLE(objc_msgSend(a7, sel_setMaximumSize_, v20, v19));
    }
  }
  return result;
}

BOOL static TimelineView.Context.Cadence.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

void TimelineView.Context.Cadence.hash(into:)()
{
  Hasher._combine(_:)(*v0);
}

BOOL static TimelineView.Context.Cadence.< infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 < *a2;
}

Swift::Int TimelineView.Context.Cadence.hashValue.getter()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance TimelineView<A, B>.Context.Cadence()
{
  return Hasher._finalize()();
}

uint64_t TimelineView.Context.date.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for Date();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 16);

  return v4(a1, v1, v3);
}

uint64_t TimelineView.Context.cadence.getter@<X0>(uint64_t result@<X0>, unsigned char *a2@<X8>)
{
  *a2 = *(unsigned char *)(v2 + *(int *)(result + 44));
  return result;
}

uint64_t sub_18821E78C()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t closure #1 in static TimelineView<>._makeView(view:inputs:)(uint64_t a1, uint64_t a2)
{
  v7[2] = type metadata accessor for TimelineView();
  v7[3] = a2;
  uint64_t v4 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(a1, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply, (uint64_t)v7, a2, MEMORY[0x1E4FBC248], v4, MEMORY[0x1E4FBC278], v5);
  return v7[5];
}

uint64_t sub_18821E858@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = EnvironmentValues.alwaysOnFrameSpecifier.getter();
  *a1 = result;
  return result;
}

void sub_18821E894(id *a1)
{
  id v1 = *a1;
  id v2 = *a1;
  specialized EnvironmentValues.subscript.setter(v1);
}

uint64_t sub_18821E8E4@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = EnvironmentValues.updateFidelity.getter();
  *a1 = result;
  return result;
}

uint64_t sub_18821E920()
{
  return EnvironmentValues.updateFidelity.setter();
}

uint64_t sub_18821E94C(uint64_t a1)
{
  outlined init with copy of TimelineInvalidationAction(a1, (uint64_t)v2);
  return EnvironmentValues.alwaysOnInvalidationHandler.setter((uint64_t)v2);
}

uint64_t implicit closure #1 in static TimelineView<>._makeView(view:inputs:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  type metadata accessor for TimelineView();
  type metadata accessor for _GraphValue();
  id v11 = a1;
  _GraphValue.value.getter();
  uint64_t OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
  id v17 = (id)destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(v11, OffsetAttribute2, a3, a4);
  int v18 = v13;
  uint64_t v22 = a3;
  uint64_t v23 = a4;
  uint64_t v24 = a5;
  uint64_t v25 = a6;
  uint64_t v20 = type metadata accessor for TimelineView<>.AlwaysOnTimelinePreferenceWriter();
  uint64_t WitnessTable = swift_getWitnessTable();
  _s10Foundation4DateVSgMaTm_1(0, &lazy cache variable for type metadata for Attribute<(_:)>, (uint64_t (*)(uint64_t))type metadata accessor for (_:), MEMORY[0x1E4F4E740]);
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v17, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TA_36, (uint64_t)v19, v20, MEMORY[0x1E4FBC248], v14, MEMORY[0x1E4FBC278], v15);

  return v22;
}

uint64_t partial apply for implicit closure #1 in static TimelineView<>._makeView(view:inputs:)()
{
  return implicit closure #1 in static TimelineView<>._makeView(view:inputs:)(*(void **)(v0 + 48), *(unsigned int *)(v0 + 56), *(void *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40));
}

uint64_t base witness table accessor for Equatable in TimelineView<A, B>.Context.Cadence()
{
  return swift_getWitnessTable();
}

uint64_t TimelineView<>.UpdateFilter.updateFromBacklightServices(frameSpecifier:)(void *a1, uint64_t a2)
{
  uint64_t v3 = v2;
  _s10Foundation4DateVSgMaTm_1(0, (unint64_t *)&lazy cache variable for type metadata for Date?, MEMORY[0x1E4F27928], MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v8 = (char *)&v25 - v7;
  uint64_t v9 = type metadata accessor for Date();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9);
  BOOL v12 = (char *)&v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v14 = MEMORY[0x1F4188790](v13);
  double v16 = (char *)&v25 - v15;
  id v17 = objc_msgSend(a1, sel_entrySpecifierForTimelineIdentifier_, *(void *)(v3 + 24), v14);
  if (!v17)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56))(v8, 1, 1, v9);
    goto LABEL_5;
  }
  int v18 = v17;
  id v19 = objc_msgSend(v17, sel_timelineEntry);
  id v20 = objc_msgSend(v19, sel_presentationTime);

  static Date._unconditionallyBridgeFromObjectiveC(_:)();
  BOOL v21 = *(void (**)(char *, char *, uint64_t))(v10 + 32);
  v21(v8, v12, v9);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v8, 0, 1, v9);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
  {

LABEL_5:
    outlined destroy of Date?((uint64_t)v8);
    return 0;
  }
  v21(v16, v8, v9);
  Date.timeIntervalSinceReferenceDate.getter();
  uint64_t v24 = v23;

  *(void *)(v3 + *(int *)(a2 + 96)) = v24;
  (*(void (**)(char *, uint64_t))(v10 + 8))(v16, v9);
  *(void *)(v3 + *(int *)(a2 + 100)) = 0x7FF0000000000000;
  return 1;
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance <> TimelineView<A, B>()
{
  return static UnaryView._makeViewList(view:inputs:)();
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance <> TimelineView<A, B>()
{
  return static UnaryView._viewListCount(inputs:)();
}

void protocol witness for View.body.getter in conformance <> TimelineView<A, B>()
{
}

uint64_t base witness table accessor for View in <> TimelineView<A, B>()
{
  return swift_getWitnessTable();
}

uint64_t getEnumTagSinglePayload for TimelineView(_DWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (v5 <= 0x7FFFFFFF) {
    unsigned int v7 = 0x7FFFFFFF;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  if (v7 < a2)
  {
    unint64_t v8 = ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
    unsigned int v9 = a2 - v7;
    uint64_t v10 = v8 & 0xFFFFFFF8;
    if ((v8 & 0xFFFFFFF8) != 0) {
      unsigned int v11 = 2;
    }
    else {
      unsigned int v11 = v9 + 1;
    }
    if (v11 >= 0x10000) {
      unsigned int v12 = 4;
    }
    else {
      unsigned int v12 = 2;
    }
    if (v11 < 0x100) {
      unsigned int v12 = 1;
    }
    if (v11 >= 2) {
      uint64_t v13 = v12;
    }
    else {
      uint64_t v13 = 0;
    }
    switch(v13)
    {
      case 1:
        int v14 = *((unsigned __int8 *)a1 + v8);
        if (!v14) {
          break;
        }
        goto LABEL_22;
      case 2:
        int v14 = *(unsigned __int16 *)((char *)a1 + v8);
        if (v14) {
          goto LABEL_22;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x18821F100);
      case 4:
        int v14 = *(_DWORD *)((char *)a1 + v8);
        if (!v14) {
          break;
        }
LABEL_22:
        int v16 = v14 - 1;
        if (v10)
        {
          int v16 = 0;
          LODWORD(v10) = *a1;
        }
        return v7 + (v10 | v16) + 1;
      default:
        break;
    }
  }
  if (v5 >= 0x7FFFFFFF) {
    return (*(uint64_t (**)(void))(v4 + 48))();
  }
  unint64_t v17 = *(void *)(((unint64_t)a1 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
  if (v17 >= 0xFFFFFFFF) {
    LODWORD(v17) = -1;
  }
  return (v17 + 1);
}

void storeEnumTagSinglePayload for TimelineView(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  unint64_t v10 = ((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
  if (((v9 + 7) & 0xFFFFFFF8) == 0xFFFFFFF0) {
    unsigned int v11 = a3 - v8 + 1;
  }
  else {
    unsigned int v11 = 2;
  }
  if (v11 >= 0x10000) {
    int v12 = 4;
  }
  else {
    int v12 = 2;
  }
  if (v11 < 0x100) {
    int v12 = 1;
  }
  if (v11 >= 2) {
    unsigned int v13 = v12;
  }
  else {
    unsigned int v13 = 0;
  }
  if (v8 < a3) {
    uint64_t v14 = v13;
  }
  else {
    uint64_t v14 = 0;
  }
  if (a2 > v8)
  {
    if (((v9 + 7) & 0xFFFFFFF8) == 0xFFFFFFF0) {
      int v15 = a2 - v8;
    }
    else {
      int v15 = 1;
    }
    if (((v9 + 7) & 0xFFFFFFF8) != 0xFFFFFFF0)
    {
      int v16 = ~v8 + a2;
      bzero(a1, ((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 16);
      *(_DWORD *)a1 = v16;
    }
    switch(v14)
    {
      case 1:
        a1[v10] = v15;
        return;
      case 2:
        *(_WORD *)&a1[v10] = v15;
        return;
      case 3:
        goto LABEL_44;
      case 4:
        *(_DWORD *)&a1[v10] = v15;
        return;
      default:
        return;
    }
  }
  switch(v14)
  {
    case 1:
      a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_33;
    case 2:
      *(_WORD *)&a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_33;
    case 3:
LABEL_44:
      __break(1u);
      JUMPOUT(0x18821F2F4);
    case 4:
      *(_DWORD *)&a1[v10] = 0;
      goto LABEL_32;
    default:
LABEL_32:
      if (a2)
      {
LABEL_33:
        if (v7 < 0x7FFFFFFF)
        {
          int v18 = (void *)((unint64_t)&a1[v9 + 7] & 0xFFFFFFFFFFFFFFF8);
          if ((a2 & 0x80000000) != 0)
          {
            uint64_t v19 = a2 ^ 0x80000000;
            v18[1] = 0;
          }
          else
          {
            uint64_t v19 = a2 - 1;
          }
          *int v18 = v19;
        }
        else
        {
          unint64_t v17 = *(void (**)(void))(v6 + 56);
          v17();
        }
      }
      return;
  }
}

void *initializeBufferWithCopyOfBuffer for TimelineView.Context(void *a1, void *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v8 = *a2;
    *a1 = *a2;
    a1 = (void *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for Date();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    *((unsigned char *)a1 + *(int *)(a3 + 44)) = *((unsigned char *)a2 + *(int *)(a3 + 44));
    swift_weakCopyInit();
  }
  return a1;
}

uint64_t assignWithCopy for TimelineView.Context(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  *(unsigned char *)(a1 + *(int *)(a3 + 44)) = *(unsigned char *)(a2 + *(int *)(a3 + 44));
  swift_weakCopyAssign();
  return a1;
}

uint64_t initializeWithTake for TimelineView.Context(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  *(unsigned char *)(a1 + *(int *)(a3 + 44)) = *(unsigned char *)(a2 + *(int *)(a3 + 44));
  swift_weakTakeInit();
  return a1;
}

uint64_t assignWithTake for TimelineView.Context(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  *(unsigned char *)(a1 + *(int *)(a3 + 44)) = *(unsigned char *)(a2 + *(int *)(a3 + 44));
  swift_weakTakeAssign();
  return a1;
}

uint64_t getEnumTagSinglePayload for TimelineView.Context(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_18821F5A4);
}

uint64_t sub_18821F5A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Date();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unsigned int v10 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 44));
    if (v10 >= 3) {
      return v10 - 2;
    }
    else {
      return 0;
    }
  }
}

uint64_t storeEnumTagSinglePayload for TimelineView.Context(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_18821F674);
}

uint64_t sub_18821F674(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for Date();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unsigned int v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(unsigned char *)(a1 + *(int *)(a4 + 44)) = a2 + 2;
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for TimelineView.Context.Cadence(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x18821F7FCLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

uint64_t type metadata accessor for TimelineView.Context.Cadence()
{
  return __swift_instantiateGenericMetadata();
}

_DWORD *assignWithCopy for TimelineView<>.UpdateFilter(_DWORD *a1, _DWORD *a2)
{
  *a1 = *a2;
  int v3 = (_DWORD *)(((unint64_t)a2 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  unsigned int v4 = (_DWORD *)(((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *unsigned int v4 = *v3;
  uint64_t v5 = (_DWORD *)(((unint64_t)v3 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  unsigned int v6 = (_DWORD *)(((unint64_t)v4 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *unsigned int v6 = *v5;
  uint64_t v7 = (_DWORD *)(((unint64_t)v5 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  uint64_t v8 = (_DWORD *)(((unint64_t)v6 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *uint64_t v8 = *v7;
  uint64_t v9 = (_DWORD *)(((unint64_t)v8 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  unsigned int v10 = (_DWORD *)(((unint64_t)v7 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *uint64_t v9 = *v10;
  v9[1] = v10[1];
  unint64_t v11 = ((unint64_t)v9 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v12 = ((unint64_t)v10 + 15) & 0xFFFFFFFFFFFFFFF8;
  unsigned int v13 = *(void **)v12;
  v12 += 11;
  uint64_t v14 = *(void **)v11;
  *(void *)unint64_t v11 = v13;
  v11 += 11;
  id v15 = v13;

  *(_DWORD *)(v11 & 0xFFFFFFFFFFFFFFF8) = *(_DWORD *)(v12 & 0xFFFFFFFFFFFFFFF8);
  *(_DWORD *)((v11 & 0xFFFFFFFFFFFFFFF8) + 4) = *(_DWORD *)((v12 & 0xFFFFFFFFFFFFFFF8) + 4);
  unint64_t v16 = ((v11 & 0xFFFFFFFFFFFFFFF8) + 11) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v17 = ((v12 & 0xFFFFFFFFFFFFFFF8) + 11) & 0xFFFFFFFFFFFFFFF8;
  *(_DWORD *)unint64_t v16 = *(_DWORD *)v17;
  *(unsigned char *)(v16 + 4) = *(unsigned char *)(v17 + 4);
  int v18 = (_DWORD *)(((v11 & 0xFFFFFFFFFFFFFFF8) + 19) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v19 = (_DWORD *)(((v12 & 0xFFFFFFFFFFFFFFF8) + 19) & 0xFFFFFFFFFFFFFFF8);
  *int v18 = *v19;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v21 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v22 = *(unsigned __int8 *)(v21 + 80);
  uint64_t v23 = (void *)(((unint64_t)v18 + v22 + 4) & ~v22);
  uint64_t v24 = (void *)(((unint64_t)v19 + v22 + 4) & ~v22);
  uint64_t v25 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v21 + 48);
  LODWORD(v18) = v25(v23, 1, AssociatedTypeWitness);
  int v26 = v25(v24, 1, AssociatedTypeWitness);
  if (v18)
  {
    if (!v26)
    {
      (*(void (**)(void *, void *, uint64_t))(v21 + 16))(v23, v24, AssociatedTypeWitness);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v21 + 56))(v23, 0, 1, AssociatedTypeWitness);
      goto LABEL_12;
    }
    int v27 = *(_DWORD *)(v21 + 84);
    size_t v28 = *(void *)(v21 + 64);
  }
  else
  {
    if (!v26)
    {
      (*(void (**)(void *, void *, uint64_t))(v21 + 24))(v23, v24, AssociatedTypeWitness);
      goto LABEL_12;
    }
    (*(void (**)(void *, uint64_t))(v21 + 8))(v23, AssociatedTypeWitness);
    int v27 = *(_DWORD *)(v21 + 84);
    size_t v28 = *(void *)(v21 + 64);
  }
  if (v27) {
    size_t v29 = v28;
  }
  else {
    size_t v29 = v28 + 1;
  }
  memcpy(v23, v24, v29);
LABEL_12:
  if (*(_DWORD *)(v21 + 84)) {
    uint64_t v30 = *(void *)(v21 + 64);
  }
  else {
    uint64_t v30 = *(void *)(v21 + 64) + 1;
  }
  uint64_t v31 = (void *)(((unint64_t)v23 + v30 + 7) & 0xFFFFFFFFFFFFFFF8);
  char v32 = (void *)(((unint64_t)v24 + v30 + 7) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v31 = *v32;
  unint64_t v33 = ((unint64_t)v31 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v34 = ((unint64_t)v32 + 15) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v33 = *(void *)v34;
  *(unsigned char *)(v33 + 8) = *(unsigned char *)(v34 + 8);
  return a1;
}

_DWORD *initializeWithTake for TimelineView<>.UpdateFilter(_DWORD *a1, _DWORD *a2)
{
  *a1 = *a2;
  int v3 = (_DWORD *)(((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  unsigned int v4 = (_DWORD *)(((unint64_t)a2 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *int v3 = *v4;
  uint64_t v5 = (_DWORD *)(((unint64_t)v3 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  unsigned int v6 = (_DWORD *)(((unint64_t)v4 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *uint64_t v5 = *v6;
  uint64_t v7 = (_DWORD *)(((unint64_t)v5 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  uint64_t v8 = (_DWORD *)(((unint64_t)v6 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *uint64_t v7 = *v8;
  uint64_t v9 = (void *)(((unint64_t)v7 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  unsigned int v10 = (void *)(((unint64_t)v8 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *uint64_t v9 = *v10;
  unint64_t v11 = (void *)(((unint64_t)v9 + 15) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v12 = (void *)(((unint64_t)v10 + 15) & 0xFFFFFFFFFFFFFFF8);
  *unint64_t v11 = *v12;
  unsigned int v13 = (_DWORD *)(((unint64_t)v11 + 11) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v14 = (_DWORD *)(((unint64_t)v12 + 11) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v15 = (unint64_t)v14 + 19;
  *unsigned int v13 = *v14;
  unint64_t v16 = (unint64_t)v13 + 19;
  v13[1] = v14[1];
  unint64_t v17 = ((unint64_t)v13 + 11) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v18 = ((unint64_t)v14 + 11) & 0xFFFFFFFFFFFFFFF8;
  *(_DWORD *)unint64_t v17 = *(_DWORD *)v18;
  *(unsigned char *)(v17 + 4) = *(unsigned char *)(v18 + 4);
  unint64_t v19 = v16 & 0xFFFFFFFFFFFFFFF8;
  unint64_t v20 = v15 & 0xFFFFFFFFFFFFFFF8;
  *(_DWORD *)(v16 & 0xFFFFFFFFFFFFFFF8) = *(_DWORD *)(v15 & 0xFFFFFFFFFFFFFFF8);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v22 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v23 = *(unsigned __int8 *)(v22 + 80);
  uint64_t v24 = (void *)((v23 + v19 + 4) & ~v23);
  uint64_t v25 = (const void *)((v23 + v20 + 4) & ~v23);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v22 + 48))(v25, 1, AssociatedTypeWitness))
  {
    int v26 = *(_DWORD *)(v22 + 84);
    size_t v27 = *(void *)(v22 + 64);
    if (v26) {
      size_t v28 = v27;
    }
    else {
      size_t v28 = v27 + 1;
    }
    memcpy(v24, v25, v28);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v22 + 32))(v24, v25, AssociatedTypeWitness);
    uint64_t v30 = *(void (**)(void *, void, uint64_t, uint64_t))(v22 + 56);
    uint64_t v29 = v22 + 56;
    v30(v24, 0, 1, AssociatedTypeWitness);
    int v26 = *(_DWORD *)(v29 + 28);
    size_t v27 = *(void *)(v29 + 8);
  }
  if (v26) {
    size_t v31 = v27;
  }
  else {
    size_t v31 = v27 + 1;
  }
  char v32 = (void *)(((unint64_t)v24 + v31 + 7) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v33 = (void *)(((unint64_t)v25 + v31 + 7) & 0xFFFFFFFFFFFFFFF8);
  *char v32 = *v33;
  unint64_t v34 = ((unint64_t)v32 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v35 = ((unint64_t)v33 + 15) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v34 = *(void *)v35;
  *(unsigned char *)(v34 + 8) = *(unsigned char *)(v35 + 8);
  return a1;
}

_DWORD *assignWithTake for TimelineView<>.UpdateFilter(_DWORD *a1, _DWORD *a2)
{
  *a1 = *a2;
  int v3 = (_DWORD *)(((unint64_t)a2 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  unsigned int v4 = (_DWORD *)(((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *unsigned int v4 = *v3;
  uint64_t v5 = (_DWORD *)(((unint64_t)v3 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  unsigned int v6 = (_DWORD *)(((unint64_t)v4 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *unsigned int v6 = *v5;
  uint64_t v7 = (_DWORD *)(((unint64_t)v5 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  uint64_t v8 = (_DWORD *)(((unint64_t)v6 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *uint64_t v8 = *v7;
  uint64_t v9 = (_DWORD *)(((unint64_t)v8 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  unsigned int v10 = (_DWORD *)(((unint64_t)v7 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *uint64_t v9 = *v10;
  v9[1] = v10[1];
  unint64_t v11 = ((unint64_t)v9 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v12 = ((unint64_t)v10 + 15) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v13 = *(void *)v12;
  v12 += 11;
  uint64_t v14 = *(void **)v11;
  *(void *)unint64_t v11 = v13;
  v11 += 11;

  *(_DWORD *)(v11 & 0xFFFFFFFFFFFFFFF8) = *(_DWORD *)(v12 & 0xFFFFFFFFFFFFFFF8);
  *(_DWORD *)((v11 & 0xFFFFFFFFFFFFFFF8) + 4) = *(_DWORD *)((v12 & 0xFFFFFFFFFFFFFFF8) + 4);
  unint64_t v15 = ((v11 & 0xFFFFFFFFFFFFFFF8) + 11) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v16 = ((v12 & 0xFFFFFFFFFFFFFFF8) + 11) & 0xFFFFFFFFFFFFFFF8;
  *(_DWORD *)unint64_t v15 = *(_DWORD *)v16;
  *(unsigned char *)(v15 + 4) = *(unsigned char *)(v16 + 4);
  unint64_t v17 = (_DWORD *)(((v11 & 0xFFFFFFFFFFFFFFF8) + 19) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v18 = (_DWORD *)(((v12 & 0xFFFFFFFFFFFFFFF8) + 19) & 0xFFFFFFFFFFFFFFF8);
  *unint64_t v17 = *v18;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v20 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v21 = *(unsigned __int8 *)(v20 + 80);
  uint64_t v22 = (void *)(((unint64_t)v17 + v21 + 4) & ~v21);
  uint64_t v23 = (void *)(((unint64_t)v18 + v21 + 4) & ~v21);
  uint64_t v24 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v20 + 48);
  LODWORD(v17) = v24(v22, 1, AssociatedTypeWitness);
  int v25 = v24(v23, 1, AssociatedTypeWitness);
  if (v17)
  {
    if (!v25)
    {
      (*(void (**)(void *, void *, uint64_t))(v20 + 32))(v22, v23, AssociatedTypeWitness);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v20 + 56))(v22, 0, 1, AssociatedTypeWitness);
      goto LABEL_12;
    }
    int v26 = *(_DWORD *)(v20 + 84);
    size_t v27 = *(void *)(v20 + 64);
  }
  else
  {
    if (!v25)
    {
      (*(void (**)(void *, void *, uint64_t))(v20 + 40))(v22, v23, AssociatedTypeWitness);
      goto LABEL_12;
    }
    (*(void (**)(void *, uint64_t))(v20 + 8))(v22, AssociatedTypeWitness);
    int v26 = *(_DWORD *)(v20 + 84);
    size_t v27 = *(void *)(v20 + 64);
  }
  if (v26) {
    size_t v28 = v27;
  }
  else {
    size_t v28 = v27 + 1;
  }
  memcpy(v22, v23, v28);
LABEL_12:
  if (*(_DWORD *)(v20 + 84)) {
    uint64_t v29 = *(void *)(v20 + 64);
  }
  else {
    uint64_t v29 = *(void *)(v20 + 64) + 1;
  }
  uint64_t v30 = (void *)(((unint64_t)v22 + v29 + 7) & 0xFFFFFFFFFFFFFFF8);
  size_t v31 = (void *)(((unint64_t)v23 + v29 + 7) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v30 = *v31;
  unint64_t v32 = ((unint64_t)v30 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v33 = ((unint64_t)v31 + 15) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v32 = *(void *)v33;
  *(unsigned char *)(v32 + 8) = *(unsigned char *)(v33 + 8);
  return a1;
}

uint64_t getEnumTagSinglePayload for TimelineView<>.UpdateFilter(unsigned __int8 *a1, unsigned int a2)
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = v5;
  int v7 = *(_DWORD *)(v5 + 84);
  if (v7) {
    unsigned int v8 = v7 - 1;
  }
  else {
    unsigned int v8 = 0;
  }
  if (v8 <= 0x7FFFFFFF) {
    unsigned int v9 = 0x7FFFFFFF;
  }
  else {
    unsigned int v9 = v8;
  }
  uint64_t v10 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v11 = 7;
  if (!v7) {
    uint64_t v11 = 8;
  }
  if (!a2) {
    return 0;
  }
  if (v9 < a2)
  {
    unint64_t v12 = ((((v11 + *(void *)(*(void *)(AssociatedTypeWitness - 8) + 64) + ((v10 + 52) & ~v10)) & 0xFFFFFFFFFFFFFFF8)
          + 15) & 0xFFFFFFFFFFFFFFF8)
        + 9;
    if (v12 < 4) {
      unsigned int v13 = ((a2 - v9 + 255) >> (8 * v12)) + 1;
    }
    else {
      unsigned int v13 = 2;
    }
    if (v13 >= 0x10000) {
      unsigned int v14 = 4;
    }
    else {
      unsigned int v14 = 2;
    }
    if (v13 < 0x100) {
      unsigned int v14 = 1;
    }
    if (v13 >= 2) {
      uint64_t v15 = v14;
    }
    else {
      uint64_t v15 = 0;
    }
    switch(v15)
    {
      case 1:
        int v16 = a1[v12];
        if (!a1[v12]) {
          break;
        }
        goto LABEL_27;
      case 2:
        int v16 = *(unsigned __int16 *)&a1[v12];
        if (*(_WORD *)&a1[v12]) {
          goto LABEL_27;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x188220314);
      case 4:
        int v16 = *(_DWORD *)&a1[v12];
        if (!v16) {
          break;
        }
LABEL_27:
        int v18 = (v16 - 1) << (8 * v12);
        if (v12 >= 4) {
          int v18 = 0;
        }
        if (((((v11
               + *(_DWORD *)(*(void *)(AssociatedTypeWitness - 8) + 64)
               + ((v10 + 52) & ~v10)) & 0xFFFFFFF8)
             + 15) & 0xFFFFFFF8) == 0xFFFFFFF8)
          int v19 = *a1;
        else {
          int v19 = *(_DWORD *)a1;
        }
        return v9 + (v19 | v18) + 1;
      default:
        break;
    }
  }
  uint64_t v20 = (unint64_t *)((((((((((unint64_t)(a1 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL)
                              + 7) & 0xFFFFFFFFFFFFFFFCLL)
                            + 15) & 0xFFFFFFFFFFFFFFF8);
  if ((v8 & 0x80000000) != 0)
  {
    unsigned int v22 = (*(uint64_t (**)(unint64_t))(v6 + 48))(((((((unint64_t)v20 + 11) & 0xFFFFFFFFFFFFFFF8)
                                                                   + 11) & 0xFFFFFFFFFFFFFFF8)
                                                                 + v10
                                                                 + 12) & ~v10);
    if (v22 >= 2) {
      return v22 - 1;
    }
    else {
      return 0;
    }
  }
  else
  {
    unint64_t v21 = *v20;
    if (v21 >= 0xFFFFFFFF) {
      LODWORD(v21) = -1;
    }
    return (v21 + 1);
  }
}

void storeEnumTagSinglePayload for TimelineView<>.UpdateFilter(unsigned char *a1, unsigned int a2, unsigned int a3)
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  int v6 = 0;
  uint64_t v7 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  int v8 = *(_DWORD *)(v7 + 84);
  unsigned int v9 = v8 - 1;
  uint64_t v10 = *(unsigned __int8 *)(v7 + 80);
  if (!v8) {
    unsigned int v9 = 0;
  }
  if (v9 <= 0x7FFFFFFF) {
    unsigned int v11 = 0x7FFFFFFF;
  }
  else {
    unsigned int v11 = v9;
  }
  if (v8) {
    size_t v12 = *(void *)(v7 + 64);
  }
  else {
    size_t v12 = *(void *)(v7 + 64) + 1;
  }
  size_t v13 = ((((v12 + ((v10 + 52) & ~v10) + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 9;
  char v14 = 8 * v13;
  if (v11 < a3)
  {
    if (v13 <= 3) {
      unsigned int v15 = ((a3 - v11 + 255) >> v14) + 1;
    }
    else {
      unsigned int v15 = 2;
    }
    if (v15 >= 0x10000) {
      int v16 = 4;
    }
    else {
      int v16 = 2;
    }
    if (v15 < 0x100) {
      int v16 = 1;
    }
    if (v15 >= 2) {
      int v6 = v16;
    }
    else {
      int v6 = 0;
    }
  }
  if (v11 < a2)
  {
    unsigned int v17 = ~v11 + a2;
    unsigned int v18 = (~(_BYTE)v11 + a2);
    if (v13 < 4) {
      int v19 = (v17 >> v14) + 1;
    }
    else {
      int v19 = 1;
    }
    if (v13 >= 4) {
      unsigned int v20 = v17;
    }
    else {
      unsigned int v20 = v18;
    }
    bzero(a1, v13);
    if (v13 == 1) {
      *a1 = v20;
    }
    else {
      *(_DWORD *)a1 = v20;
    }
    switch(v6)
    {
      case 1:
        a1[v13] = v19;
        return;
      case 2:
        *(_WORD *)&a1[v13] = v19;
        return;
      case 3:
        goto LABEL_64;
      case 4:
        *(_DWORD *)&a1[v13] = v19;
        return;
      default:
        return;
    }
  }
  switch(v6)
  {
    case 1:
      a1[v13] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_38;
    case 2:
      *(_WORD *)&a1[v13] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_38;
    case 3:
LABEL_64:
      __break(1u);
      JUMPOUT(0x188220698);
    case 4:
      *(_DWORD *)&a1[v13] = 0;
      goto LABEL_37;
    default:
LABEL_37:
      if (a2)
      {
LABEL_38:
        unint64_t v21 = (void *)((((((((((unint64_t)(a1 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL)
                          + 7) & 0xFFFFFFFFFFFFFFFCLL)
                        + 15) & 0xFFFFFFFFFFFFFFF8);
        if ((v9 & 0x80000000) != 0)
        {
          uint64_t v23 = (unsigned char *)(((((((unint64_t)v21 + 11) & 0xFFFFFFFFFFFFFFF8) + 11) & 0xFFFFFFFFFFFFFFF8)
                         + v10
                         + 12) & ~v10);
          if (v9 >= a2)
          {
            size_t v27 = *(void (**)(unint64_t, void))(v7 + 56);
            v27(((((((unint64_t)v21 + 11) & 0xFFFFFFFFFFFFFFF8) + 11) & 0xFFFFFFFFFFFFFFF8) + v10 + 12) & ~v10, a2 + 1);
          }
          else
          {
            if (v12 <= 3) {
              int v24 = ~(-1 << (8 * v12));
            }
            else {
              int v24 = -1;
            }
            if (v12)
            {
              int v25 = v24 & (~v9 + a2);
              if (v12 <= 3) {
                int v26 = v12;
              }
              else {
                int v26 = 4;
              }
              bzero(v23, v12);
              switch(v26)
              {
                case 2:
                  *(_WORD *)uint64_t v23 = v25;
                  break;
                case 3:
                  *(_WORD *)uint64_t v23 = v25;
                  v23[2] = BYTE2(v25);
                  break;
                case 4:
                  *(_DWORD *)uint64_t v23 = v25;
                  break;
                default:
                  *uint64_t v23 = v25;
                  break;
              }
            }
          }
        }
        else
        {
          if ((a2 & 0x80000000) != 0) {
            uint64_t v22 = a2 ^ 0x80000000;
          }
          else {
            uint64_t v22 = a2 - 1;
          }
          *unint64_t v21 = v22;
        }
      }
      return;
  }
}

unint64_t type metadata accessor for BLSAlwaysOnFrameSpecifier()
{
  unint64_t result = lazy cache variable for type metadata for BLSAlwaysOnFrameSpecifier;
  if (!lazy cache variable for type metadata for BLSAlwaysOnFrameSpecifier)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for BLSAlwaysOnFrameSpecifier);
  }
  return result;
}

uint64_t outlined destroy of TimelineView<EveryMinuteTimelineSchedule, Never>.Context(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t outlined init with copy of TimelineView<EveryMinuteTimelineSchedule, Never>.Context(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

ValueMetadata *type metadata accessor for ListBadgedViewStyle()
{
  return &type metadata for ListBadgedViewStyle;
}

uint64_t associated type witness table accessor for BadgedViewStyle.Body : View in ListBadgedViewStyle()
{
  return swift_getOpaqueTypeConformance2();
}

void *ListBadgedViewStyle.makeBody(configuration:)(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = a1[1];
  unint64_t v3 = a1[2];
  uint64_t v4 = a1[3];
  static VerticalAlignment.center.getter();
  closure #1 in ListBadgedViewStyle.makeBody(configuration:)(v1, v2, v3, v4, (uint64_t)v6);
  long long v14 = v6[6];
  long long v13 = v6[5];
  long long v10 = v6[2];
  long long v9 = v6[1];
  long long v15 = v6[7];
  uint64_t v16 = v7;
  long long v11 = v6[3];
  long long v12 = v6[4];
  long long v8 = v6[0];
  char v17 = 0;
  Spacing.init()();
  type metadata accessor for HStack<TupleView<(BadgeViewStyleConfiguration.Content, Spacer, ModifiedContent<Badge<BadgeLabel>, _TraitWritingModifier<LayoutPriorityTraitKey>>?)>>();
  lazy protocol witness table accessor for type _InsettableBackgroundShapeModifier<AnyShapeStyle, Capsule> and conformance _InsettableBackgroundShapeModifier<A, B>(&lazy protocol witness table cache variable for type HStack<TupleView<(BadgeViewStyleConfiguration.Content, Spacer, ModifiedContent<Badge<BadgeLabel>, _TraitWritingModifier<LayoutPriorityTraitKey>>?)>> and conformance HStack<A>, (void (*)(uint64_t))type metadata accessor for HStack<TupleView<(BadgeViewStyleConfiguration.Content, Spacer, ModifiedContent<Badge<BadgeLabel>, _TraitWritingModifier<LayoutPriorityTraitKey>>?)>>);
  View.spacing(_:)();
  swift_bridgeObjectRelease();
  return outlined release of TupleView<(BadgeViewStyleConfiguration.Content, Spacer, ModifiedContent<Badge<BadgeLabel>, _TraitWritingModifier<LayoutPriorityTraitKey>>?)>(v6);
}

uint64_t closure #1 in ListBadgedViewStyle.makeBody(configuration:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  if (a3 >> 1 == 0xFFFFFFFF)
  {
    uint64_t v6 = 0;
    uint64_t v7 = 0;
    uint64_t v8 = 0;
    uint64_t v23 = 0;
    uint64_t KeyPath = 0;
    uint64_t v21 = 0;
    uint64_t v22 = 0;
    uint64_t v9 = 0;
    uint64_t v10 = 0;
    uint64_t v11 = 0;
    unint64_t v12 = 0x1FFFFFFFELL;
  }
  else
  {
    uint64_t v13 = a1;
    unint64_t v15 = a3;
    uint64_t v16 = a2;
    uint64_t KeyPath = swift_getKeyPath();
    uint64_t v23 = swift_getKeyPath();
    uint64_t v22 = swift_getKeyPath();
    uint64_t v21 = swift_getKeyPath();
    uint64_t v17 = swift_getKeyPath();
    a2 = v16;
    a3 = v15;
    uint64_t v18 = a4;
    uint64_t v9 = v17;
    a1 = v13;
    uint64_t v11 = 0x4024000000000000;
    uint64_t v10 = 0x3FF0000000000000;
    uint64_t v6 = v13;
    uint64_t v7 = v16;
    unint64_t v12 = v15;
    uint64_t v8 = v18;
  }
  *(void *)a5 = v11;
  *(unsigned char *)(a5 + 8) = 0;
  *(void *)(a5 + 16) = v6;
  *(void *)(a5 + 24) = v7;
  *(void *)(a5 + 32) = v12;
  *(void *)(a5 + 40) = v8;
  *(void *)(a5 + 48) = KeyPath;
  *(void *)(a5 + 56) = 0;
  *(void *)(a5 + 64) = v23;
  *(void *)(a5 + 72) = 0;
  *(void *)(a5 + 80) = v22;
  *(void *)(a5 + 88) = 0;
  *(void *)(a5 + 96) = v21;
  *(void *)(a5 + 104) = 0;
  *(void *)(a5 + 112) = v9;
  *(void *)(a5 + 120) = 0;
  *(void *)(a5 + 128) = v10;
  uint64_t v19 = v6;
  outlined copy of BadgeLabel?(a1, a2, a3);
  outlined copy of ModifiedContent<Badge<BadgeLabel>, _TraitWritingModifier<LayoutPriorityTraitKey>>?(v19, v7, v12, v8, KeyPath, 0, v23, 0, v22, 0, v21, 0, v9, 0);
  return outlined consume of ModifiedContent<Badge<BadgeLabel>, _TraitWritingModifier<LayoutPriorityTraitKey>>?(v19, v7, v12, v8, KeyPath, 0, v23, 0, v22, 0, v21, 0, v9, 0);
}

void type metadata accessor for HStack<TupleView<(BadgeViewStyleConfiguration.Content, Spacer, ModifiedContent<Badge<BadgeLabel>, _TraitWritingModifier<LayoutPriorityTraitKey>>?)>>()
{
  if (!lazy cache variable for type metadata for HStack<TupleView<(BadgeViewStyleConfiguration.Content, Spacer, ModifiedContent<Badge<BadgeLabel>, _TraitWritingModifier<LayoutPriorityTraitKey>>?)>>)
  {
    type metadata accessor for TupleView<(BadgeViewStyleConfiguration.Content, Spacer, ModifiedContent<Badge<BadgeLabel>, _TraitWritingModifier<LayoutPriorityTraitKey>>?)>(255, &lazy cache variable for type metadata for TupleView<(BadgeViewStyleConfiguration.Content, Spacer, ModifiedContent<Badge<BadgeLabel>, _TraitWritingModifier<LayoutPriorityTraitKey>>?)>, (uint64_t (*)(uint64_t))type metadata accessor for (BadgeViewStyleConfiguration.Content, Spacer, ModifiedContent<Badge<BadgeLabel>, _TraitWritingModifier<LayoutPriorityTraitKey>>?), MEMORY[0x1E4F41850]);
    lazy protocol witness table accessor for type TupleView<(BadgeViewStyleConfiguration.Content, Spacer, ModifiedContent<Badge<BadgeLabel>, _TraitWritingModifier<LayoutPriorityTraitKey>>?)> and conformance TupleView<A>();
    unint64_t v0 = type metadata accessor for HStack();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for HStack<TupleView<(BadgeViewStyleConfiguration.Content, Spacer, ModifiedContent<Badge<BadgeLabel>, _TraitWritingModifier<LayoutPriorityTraitKey>>?)>>);
    }
  }
}

void type metadata accessor for (BadgeViewStyleConfiguration.Content, Spacer, ModifiedContent<Badge<BadgeLabel>, _TraitWritingModifier<LayoutPriorityTraitKey>>?)()
{
  if (!lazy cache variable for type metadata for (BadgeViewStyleConfiguration.Content, Spacer, ModifiedContent<Badge<BadgeLabel>, _TraitWritingModifier<LayoutPriorityTraitKey>>?))
  {
    type metadata accessor for TupleView<(BadgeViewStyleConfiguration.Content, Spacer, ModifiedContent<Badge<BadgeLabel>, _TraitWritingModifier<LayoutPriorityTraitKey>>?)>(255, &lazy cache variable for type metadata for ModifiedContent<Badge<BadgeLabel>, _TraitWritingModifier<LayoutPriorityTraitKey>>?, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<Badge<BadgeLabel>, _TraitWritingModifier<LayoutPriorityTraitKey>>, MEMORY[0x1E4FBB718]);
    TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
    if (!v1) {
      atomic_store(TupleTypeMetadata3, (unint64_t *)&lazy cache variable for type metadata for (BadgeViewStyleConfiguration.Content, Spacer, ModifiedContent<Badge<BadgeLabel>, _TraitWritingModifier<LayoutPriorityTraitKey>>?));
    }
  }
}

void type metadata accessor for ModifiedContent<Badge<BadgeLabel>, _TraitWritingModifier<LayoutPriorityTraitKey>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<Badge<BadgeLabel>, _TraitWritingModifier<LayoutPriorityTraitKey>>)
  {
    type metadata accessor for Badge<BadgeLabel>();
    _s7SwiftUI21_TraitWritingModifierVyAA014LayoutPriorityC3KeyVGMaTm_0(255, &lazy cache variable for type metadata for _TraitWritingModifier<LayoutPriorityTraitKey>, MEMORY[0x1E4F40980], MEMORY[0x1E4F40978], MEMORY[0x1E4F408B8]);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<Badge<BadgeLabel>, _TraitWritingModifier<LayoutPriorityTraitKey>>);
    }
  }
}

void type metadata accessor for Badge<BadgeLabel>()
{
  if (!lazy cache variable for type metadata for Badge<BadgeLabel>)
  {
    lazy protocol witness table accessor for type BadgeLabel and conformance BadgeLabel();
    unint64_t v0 = type metadata accessor for Badge();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Badge<BadgeLabel>);
    }
  }
}

uint64_t type metadata accessor for Badge()
{
  return __swift_instantiateGenericMetadata();
}

unint64_t lazy protocol witness table accessor for type TupleView<(BadgeViewStyleConfiguration.Content, Spacer, ModifiedContent<Badge<BadgeLabel>, _TraitWritingModifier<LayoutPriorityTraitKey>>?)> and conformance TupleView<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type TupleView<(BadgeViewStyleConfiguration.Content, Spacer, ModifiedContent<Badge<BadgeLabel>, _TraitWritingModifier<LayoutPriorityTraitKey>>?)> and conformance TupleView<A>;
  if (!lazy protocol witness table cache variable for type TupleView<(BadgeViewStyleConfiguration.Content, Spacer, ModifiedContent<Badge<BadgeLabel>, _TraitWritingModifier<LayoutPriorityTraitKey>>?)> and conformance TupleView<A>)
  {
    type metadata accessor for TupleView<(BadgeViewStyleConfiguration.Content, Spacer, ModifiedContent<Badge<BadgeLabel>, _TraitWritingModifier<LayoutPriorityTraitKey>>?)>(255, &lazy cache variable for type metadata for TupleView<(BadgeViewStyleConfiguration.Content, Spacer, ModifiedContent<Badge<BadgeLabel>, _TraitWritingModifier<LayoutPriorityTraitKey>>?)>, (uint64_t (*)(uint64_t))type metadata accessor for (BadgeViewStyleConfiguration.Content, Spacer, ModifiedContent<Badge<BadgeLabel>, _TraitWritingModifier<LayoutPriorityTraitKey>>?), MEMORY[0x1E4F41850]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TupleView<(BadgeViewStyleConfiguration.Content, Spacer, ModifiedContent<Badge<BadgeLabel>, _TraitWritingModifier<LayoutPriorityTraitKey>>?)> and conformance TupleView<A>);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type _InsettableBackgroundShapeModifier<AnyShapeStyle, Capsule> and conformance _InsettableBackgroundShapeModifier<A, B>(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void *outlined release of TupleView<(BadgeViewStyleConfiguration.Content, Spacer, ModifiedContent<Badge<BadgeLabel>, _TraitWritingModifier<LayoutPriorityTraitKey>>?)>(void *a1)
{
  return a1;
}

uint64_t outlined consume of ModifiedContent<Badge<BadgeLabel>, _TraitWritingModifier<LayoutPriorityTraitKey>>?(uint64_t result, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7, char a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, char a14)
{
  if (a3 >> 1 != 0xFFFFFFFF)
  {
    char v17 = a6 & 1;
    char v18 = a8 & 1;
    outlined consume of BadgeLabel(result, a2, a3);
    outlined consume of Environment<Bool>.Content(a5, v17);
    outlined consume of Environment<Bool>.Content(a7, v18);
    outlined consume of Environment<Bool>.Content(a9, a10 & 1);
    outlined consume of Environment<Bool>.Content(a11, a12 & 1);
    return outlined consume of Environment<Bool>.Content(a13, a14 & 1);
  }
  return result;
}

uint64_t outlined copy of ModifiedContent<Badge<BadgeLabel>, _TraitWritingModifier<LayoutPriorityTraitKey>>?(uint64_t result, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7, char a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, char a14)
{
  if (a3 >> 1 != 0xFFFFFFFF)
  {
    char v17 = a6 & 1;
    char v18 = a8 & 1;
    outlined copy of BadgeLabel(result, a2, a3);
    outlined copy of Environment<Bool>.Content(a5, v17);
    outlined copy of Environment<Bool>.Content(a7, v18);
    outlined copy of Environment<Bool>.Content(a9, a10 & 1);
    outlined copy of Environment<Bool>.Content(a11, a12 & 1);
    return outlined copy of Environment<Bool>.Content(a13, a14 & 1);
  }
  return result;
}

uint64_t Badge.style.getter(uint64_t a1)
{
  uint64_t v2 = v1 + *(int *)(a1 + 36);
  uint64_t v3 = *(void *)v2;
  char v4 = *(unsigned char *)(v2 + 8);
  outlined copy of Environment<Bool>.Content(*(void *)v2, v4);
  specialized Environment.wrappedValue.getter(v3, v4, &v7);
  outlined consume of Environment<Bool>.Content(v3, v4);
  if (v7 == 2)
  {
    outlined copy of Environment<Bool>.Content(v3, v4);
    specialized Environment.wrappedValue.getter(v3, v4, &v7);
    outlined consume of Environment<Bool>.Content(v3, v4);
    if (v7 == 2)
    {
      uint64_t v7 = static Color.white.getter();
      AnyShapeStyle.init<A>(_:)();
      uint64_t v7 = static Color.red.getter();
    }
    else
    {
      LODWORD(v7) = 1;
      AnyShapeStyle.init<A>(_:)();
      LODWORD(v7) = 4;
    }
    AnyShapeStyle.init<A>(_:)();
    return static Font.body.getter();
  }
  else
  {
    uint64_t v5 = static Font.body.getter();
    LODWORD(v7) = 1;
    AnyShapeStyle.init<A>(_:)();
  }
  return v5;
}

uint64_t Badge.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v76 = a2;
  type metadata accessor for TupleView<(BadgeViewStyleConfiguration.Content, Spacer, ModifiedContent<Badge<BadgeLabel>, _TraitWritingModifier<LayoutPriorityTraitKey>>?)>(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Font?>, (uint64_t (*)(uint64_t))type metadata accessor for Font?, MEMORY[0x1E4F411E8]);
  uint64_t v4 = type metadata accessor for ModifiedContent();
  uint64_t v62 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v6 = (char *)&v57 - v5;
  _s7SwiftUI21_TraitWritingModifierVyAA014LayoutPriorityC3KeyVGMaTm_0(255, &lazy cache variable for type metadata for _ForegroundStyleModifier<AnyShapeStyle>, MEMORY[0x1E4F3F700], MEMORY[0x1E4F3F6F8], MEMORY[0x1E4F40E20]);
  uint64_t v7 = type metadata accessor for ModifiedContent();
  uint64_t v61 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  uint64_t v9 = (char *)&v57 - v8;
  uint64_t v10 = type metadata accessor for ModifiedContent();
  uint64_t v65 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v10);
  int v60 = (char *)&v57 - v11;
  uint64_t v57 = v12;
  uint64_t v13 = type metadata accessor for ModifiedContent();
  uint64_t v66 = *(void *)(v13 - 8);
  MEMORY[0x1F4188790](v13);
  int v64 = (char *)&v57 - v14;
  uint64_t v63 = v15;
  uint64_t v16 = type metadata accessor for ModifiedContent();
  uint64_t v68 = *(void *)(v16 - 8);
  MEMORY[0x1F4188790](v16);
  long long v67 = (char *)&v57 - v17;
  type metadata accessor for _InsettableBackgroundShapeModifier<AnyShapeStyle, Capsule>();
  uint64_t v69 = v16;
  uint64_t v18 = type metadata accessor for ModifiedContent();
  uint64_t v73 = *(void *)(v18 - 8);
  MEMORY[0x1F4188790](v18);
  v72 = (char *)&v57 - v19;
  uint64_t v59 = v20;
  uint64_t v75 = type metadata accessor for ModifiedContent();
  uint64_t v74 = *(void *)(v75 - 8);
  MEMORY[0x1F4188790](v75);
  v70 = (char *)&v57 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v22);
  char v71 = (char *)&v57 - v23;
  uint64_t v24 = Badge.style.getter(a1);
  uint64_t v77 = v25;
  uint64_t v78 = v24;
  uint64_t v27 = v26;
  double v28 = *(double *)(a1 + 24);
  BOOL v58 = v26 == 0;
  if (v26)
  {
    uint64_t v80 = 0x4038000000000000;
    closure #1 in Badge.body.getter((double *)&v80, v2, v79);
  }
  View.font(_:)();
  uint64_t v80 = v77;
  unint64_t v29 = lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<Font?> and conformance _EnvironmentKeyWritingModifier<A>();
  v79[13] = v28;
  *(void *)&v79[14] = v29;
  uint64_t WitnessTable = swift_getWitnessTable();
  View.foregroundStyle<A>(_:)();
  (*(void (**)(char *, uint64_t))(v62 + 8))(v6, v4);
  static Edge.Set.horizontal.getter();
  unint64_t v31 = lazy protocol witness table accessor for type _ForegroundStyleModifier<AnyShapeStyle> and conformance _ForegroundStyleModifier<A>();
  *(void *)&v79[11] = WitnessTable;
  *(void *)&v79[12] = v31;
  uint64_t v32 = swift_getWitnessTable();
  unint64_t v33 = v60;
  View.padding(_:_:)();
  (*(void (**)(char *, uint64_t))(v61 + 8))(v9, v7);
  static Alignment.center.getter();
  *(void *)&v79[9] = v32;
  *(void *)&v79[10] = MEMORY[0x1E4F3FA78];
  uint64_t v55 = v57;
  uint64_t v56 = swift_getWitnessTable();
  unint64_t v34 = v64;
  View.frame(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)();
  (*(void (**)(char *, uint64_t))(v65 + 8))(v33, v55);
  static Alignment.center.getter();
  *(void *)&v79[7] = v56;
  *(void *)&v79[8] = MEMORY[0x1E4F3FE50];
  uint64_t v35 = v63;
  uint64_t v36 = swift_getWitnessTable();
  int v37 = v67;
  View.frame(width:height:alignment:)();
  (*(void (**)(char *, uint64_t))(v66 + 8))(v34, v35);
  if (v27)
  {
    uint64_t v38 = v27;
  }
  else
  {
    uint64_t v80 = static Color.clear.getter();
    uint64_t v38 = AnyShapeStyle.init<A>(_:)();
  }
  uint64_t v80 = v38;
  LOBYTE(v79[0]) = 1;
  *(void *)&v79[5] = v36;
  *(void *)&v79[6] = MEMORY[0x1E4F3F698];
  swift_retain();
  uint64_t v39 = v69;
  uint64_t v40 = swift_getWitnessTable();
  lazy protocol witness table accessor for type Capsule and conformance Capsule();
  int v41 = v72;
  View.background<A, B>(_:in:fillStyle:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v68 + 8))(v37, v39);
  uint64_t v42 = lazy protocol witness table accessor for type _InsettableBackgroundShapeModifier<AnyShapeStyle, Capsule> and conformance _InsettableBackgroundShapeModifier<A, B>(&lazy protocol witness table cache variable for type _InsettableBackgroundShapeModifier<AnyShapeStyle, Capsule> and conformance _InsettableBackgroundShapeModifier<A, B>, (void (*)(uint64_t))type metadata accessor for _InsettableBackgroundShapeModifier<AnyShapeStyle, Capsule>);
  *(void *)&v79[3] = v40;
  *(void *)&v79[4] = v42;
  uint64_t v43 = v59;
  uint64_t v44 = swift_getWitnessTable();
  destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(v43, v44, v45, v46);
  uint64_t v47 = type metadata accessor for AccessibilityBadgedViewModifier.Badge();
  uint64_t v48 = swift_getWitnessTable();
  *(void *)&v79[1] = v44;
  *(void *)&v79[2] = &protocol witness table for AccessibilityAttachmentModifier;
  uint64_t v49 = v75;
  uint64_t v50 = swift_getWitnessTable();
  unsigned __int8 v51 = v70;
  View.accessibilityConfiguration<A>(_:)(v50, v43, v47, v44, v48);
  swift_release();
  swift_release();
  swift_release();
  (*(void (**)(char *, uint64_t))(v73 + 8))(v41, v43);
  uint64_t v52 = v71;
  static ViewBuilder.buildExpression<A>(_:)(v51);
  uint64_t v53 = *(void (**)(char *, uint64_t))(v74 + 8);
  v53(v51, v49);
  static ViewBuilder.buildExpression<A>(_:)(v52);
  return ((uint64_t (*)(char *, uint64_t))v53)(v52, v49);
}

uint64_t closure #1 in Badge.body.getter@<X0>(double *a1@<X0>, uint64_t a2@<X1>, double *a3@<X8>)
{
  uint64_t v6 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v9 = (char *)&v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v10 = *a1;
  char v23 = 6;
  uint64_t v11 = type metadata accessor for Badge();
  uint64_t v12 = a2 + *(int *)(v11 + 48);
  uint64_t v13 = *(void *)v12;
  LOBYTE(a1) = *(unsigned char *)(v12 + 8);
  outlined copy of Environment<Bool>.Content(*(void *)v12, (char)a1);
  specialized Environment.wrappedValue.getter(v13, (char)a1, &v22);
  outlined consume of Environment<Bool>.Content(v13, (char)a1);
  double v14 = v10 * MEMORY[0x18C112CD0](&v23, &v22);
  uint64_t v15 = a2 + *(int *)(v11 + 52);
  uint64_t v16 = *(void *)v15;
  LOBYTE(v11) = *(unsigned char *)(v15 + 8);
  outlined copy of Environment<Bool>.Content(*(void *)v15, v11);
  double v17 = specialized Environment.wrappedValue.getter(v16, v11);
  outlined consume of Environment<Bool>.Content(v16, v11);
  (*(void (**)(char *, void, uint64_t))(v7 + 104))(v9, *MEMORY[0x1E4FBBEA0], v6);
  double v21 = v14;
  specialized FloatingPoint.round(_:toMultipleOf:)((uint64_t)v9, v17);
  double v18 = v21;
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  *a3 = v18;
  return result;
}

uint64_t sub_188221DEC@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = EnvironmentValues.appearsActive.getter();
  *a1 = result & 1;
  return result;
}

uint64_t sub_188221E2C()
{
  return EnvironmentValues.appearsActive.setter();
}

uint64_t type metadata completion function for Badge()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for Badge(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  int v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0 || ((v6 + 71) & 0xFFFFFFFFFFFFFFF8) + 9 > 0x18)
  {
    uint64_t v9 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
    swift_retain();
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    double v10 = (char *)v4 + v6;
    uint64_t v11 = (char *)a2 + v6;
    unint64_t v12 = ((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v13 = ((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v14 = *(void *)v13;
    char v15 = *(unsigned char *)(v13 + 8);
    outlined copy of Environment<Bool>.Content(*(void *)v13, v15);
    *(void *)unint64_t v12 = v14;
    *(unsigned char *)(v12 + 8) = v15;
    unint64_t v16 = (unint64_t)(v10 + 23) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v17 = (unint64_t)(v11 + 23) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v18 = *(void *)v17;
    char v19 = *(unsigned char *)(v17 + 8);
    outlined copy of Environment<Bool>.Content(*(void *)v17, v19);
    *(void *)unint64_t v16 = v18;
    *(unsigned char *)(v16 + 8) = v19;
    unint64_t v20 = (unint64_t)(v10 + 39) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v21 = (unint64_t)(v11 + 39) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v22 = *(void *)v21;
    char v23 = *(unsigned char *)(v21 + 8);
    outlined copy of Environment<Bool>.Content(*(void *)v21, v23);
    *(void *)unint64_t v20 = v22;
    *(unsigned char *)(v20 + 8) = v23;
    unint64_t v24 = (unint64_t)(v10 + 55) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v25 = (unint64_t)(v11 + 55) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v26 = *(void *)v25;
    char v27 = *(unsigned char *)(v25 + 8);
    outlined copy of Environment<Bool>.Content(*(void *)v25, v27);
    *(void *)unint64_t v24 = v26;
    *(unsigned char *)(v24 + 8) = v27;
    unint64_t v28 = (unint64_t)(v10 + 71) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v29 = (unint64_t)(v11 + 71) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v30 = *(void *)v29;
    char v31 = *(unsigned char *)(v29 + 8);
    outlined copy of Environment<Bool>.Content(*(void *)v29, v31);
    *(void *)unint64_t v28 = v30;
    *(unsigned char *)(v28 + 8) = v31;
  }
  return v4;
}

uint64_t destroy for Badge(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(*(void *)(a2 + 16) - 8) + 8;
  (*(void (**)(void))v3)();
  uint64_t v4 = *(void *)(v3 + 56) + a1;
  outlined consume of Environment<Bool>.Content(*(void *)((v4 + 7) & 0xFFFFFFFFFFFFFFF8), *(unsigned char *)(((v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 8));
  outlined consume of Environment<Bool>.Content(*(void *)((v4 + 23) & 0xFFFFFFFFFFFFFFF8), *(unsigned char *)(((v4 + 23) & 0xFFFFFFFFFFFFFFF8) + 8));
  outlined consume of Environment<Bool>.Content(*(void *)((v4 + 39) & 0xFFFFFFFFFFFFFFF8), *(unsigned char *)(((v4 + 39) & 0xFFFFFFFFFFFFFFF8) + 8));
  outlined consume of Environment<Bool>.Content(*(void *)((v4 + 55) & 0xFFFFFFFFFFFFFFF8), *(unsigned char *)(((v4 + 55) & 0xFFFFFFFFFFFFFFF8) + 8));
  unint64_t v5 = (v4 + 71) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v6 = *(void *)v5;
  char v7 = *(unsigned char *)(v5 + 8);

  return outlined consume of Environment<Bool>.Content(v6, v7);
}

uint64_t initializeWithCopy for Badge(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 16;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 48);
  uint64_t v7 = v6 + a1;
  uint64_t v8 = v6 + a2;
  unint64_t v9 = (v6 + a1 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v10 = (v6 + a2 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v11 = *(void *)v10;
  LOBYTE(v5) = *(unsigned char *)(v10 + 8);
  outlined copy of Environment<Bool>.Content(*(void *)v10, v5);
  *(void *)unint64_t v9 = v11;
  *(unsigned char *)(v9 + 8) = v5;
  unint64_t v12 = (v7 + 23) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v13 = (v8 + 23) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v14 = *(void *)v13;
  LOBYTE(v5) = *(unsigned char *)(v13 + 8);
  outlined copy of Environment<Bool>.Content(*(void *)v13, v5);
  *(void *)unint64_t v12 = v14;
  *(unsigned char *)(v12 + 8) = v5;
  unint64_t v15 = (v7 + 39) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v16 = (v8 + 39) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v17 = *(void *)v16;
  LOBYTE(v5) = *(unsigned char *)(v16 + 8);
  outlined copy of Environment<Bool>.Content(*(void *)v16, v5);
  *(void *)unint64_t v15 = v17;
  *(unsigned char *)(v15 + 8) = v5;
  unint64_t v18 = (v7 + 55) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v19 = (v8 + 55) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v20 = *(void *)v19;
  LOBYTE(v5) = *(unsigned char *)(v19 + 8);
  outlined copy of Environment<Bool>.Content(*(void *)v19, v5);
  *(void *)unint64_t v18 = v20;
  *(unsigned char *)(v18 + 8) = v5;
  unint64_t v21 = (v7 + 71) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v22 = (v8 + 71) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v23 = *(void *)v22;
  LOBYTE(v5) = *(unsigned char *)(v22 + 8);
  outlined copy of Environment<Bool>.Content(*(void *)v22, v5);
  *(void *)unint64_t v21 = v23;
  *(unsigned char *)(v21 + 8) = v5;
  return a1;
}

uint64_t assignWithCopy for Badge(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 24;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 40);
  uint64_t v7 = v6 + a1;
  uint64_t v8 = v6 + a2;
  unint64_t v9 = (v6 + a1 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v10 = (v6 + a2 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v11 = *(void *)v10;
  LOBYTE(v5) = *(unsigned char *)(v10 + 8);
  outlined copy of Environment<Bool>.Content(*(void *)v10, v5);
  uint64_t v12 = *(void *)v9;
  char v13 = *(unsigned char *)(v9 + 8);
  *(void *)unint64_t v9 = v11;
  *(unsigned char *)(v9 + 8) = v5;
  outlined consume of Environment<Bool>.Content(v12, v13);
  unint64_t v14 = (v7 + 23) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v15 = (v8 + 23) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v16 = *(void *)v15;
  LOBYTE(v5) = *(unsigned char *)(v15 + 8);
  outlined copy of Environment<Bool>.Content(*(void *)v15, v5);
  uint64_t v17 = *(void *)v14;
  char v18 = *(unsigned char *)(v14 + 8);
  *(void *)unint64_t v14 = v16;
  *(unsigned char *)(v14 + 8) = v5;
  outlined consume of Environment<Bool>.Content(v17, v18);
  unint64_t v19 = (v7 + 39) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v20 = (v8 + 39) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v21 = *(void *)v20;
  LOBYTE(v5) = *(unsigned char *)(v20 + 8);
  outlined copy of Environment<Bool>.Content(*(void *)v20, v5);
  uint64_t v22 = *(void *)v19;
  char v23 = *(unsigned char *)(v19 + 8);
  *(void *)unint64_t v19 = v21;
  *(unsigned char *)(v19 + 8) = v5;
  outlined consume of Environment<Bool>.Content(v22, v23);
  unint64_t v24 = (v7 + 55) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v25 = (v8 + 55) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v26 = *(void *)v25;
  LOBYTE(v5) = *(unsigned char *)(v25 + 8);
  outlined copy of Environment<Bool>.Content(*(void *)v25, v5);
  uint64_t v27 = *(void *)v24;
  char v28 = *(unsigned char *)(v24 + 8);
  *(void *)unint64_t v24 = v26;
  *(unsigned char *)(v24 + 8) = v5;
  outlined consume of Environment<Bool>.Content(v27, v28);
  unint64_t v29 = (v7 + 71) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v30 = (v8 + 71) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v31 = *(void *)v30;
  LOBYTE(v5) = *(unsigned char *)(v30 + 8);
  outlined copy of Environment<Bool>.Content(*(void *)v30, v5);
  uint64_t v32 = *(void *)v29;
  char v33 = *(unsigned char *)(v29 + 8);
  *(void *)unint64_t v29 = v31;
  *(unsigned char *)(v29 + 8) = v5;
  outlined consume of Environment<Bool>.Content(v32, v33);
  return a1;
}

uint64_t initializeWithTake for Badge(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 32;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 32);
  uint64_t v7 = v6 + a1;
  uint64_t v8 = v6 + a2;
  unint64_t v9 = (v7 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v10 = (v8 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v11 = *(void *)v10;
  *(unsigned char *)(v9 + 8) = *(unsigned char *)(v10 + 8);
  *(void *)unint64_t v9 = v11;
  unint64_t v12 = (v7 + 23) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v13 = (v8 + 23) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v14 = *(void *)v13;
  *(unsigned char *)(v12 + 8) = *(unsigned char *)(v13 + 8);
  *(void *)unint64_t v12 = v14;
  unint64_t v15 = (v7 + 39) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v16 = (v8 + 39) & 0xFFFFFFFFFFFFFFF8;
  LOBYTE(v14) = *(unsigned char *)(v16 + 8);
  *(void *)unint64_t v15 = *(void *)v16;
  *(unsigned char *)(v15 + 8) = v14;
  unint64_t v17 = (v7 + 55) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v18 = (v8 + 55) & 0xFFFFFFFFFFFFFFF8;
  LOBYTE(v14) = *(unsigned char *)(v18 + 8);
  *(void *)unint64_t v17 = *(void *)v18;
  *(unsigned char *)(v17 + 8) = v14;
  unint64_t v19 = (v7 + 71) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v20 = (v8 + 71) & 0xFFFFFFFFFFFFFFF8;
  LOBYTE(v17) = *(unsigned char *)(v20 + 8);
  *(void *)unint64_t v19 = *(void *)v20;
  *(unsigned char *)(v19 + 8) = v17;
  return a1;
}

uint64_t assignWithTake for Badge(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 40;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 24);
  uint64_t v7 = v6 + a1;
  uint64_t v8 = v6 + a2;
  unint64_t v9 = (v6 + a1 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v10 = (v8 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v11 = *(void *)v10;
  LOBYTE(v10) = *(unsigned char *)(v10 + 8);
  uint64_t v12 = *(void *)v9;
  char v13 = *(unsigned char *)(v9 + 8);
  *(void *)unint64_t v9 = v11;
  *(unsigned char *)(v9 + 8) = v10;
  outlined consume of Environment<Bool>.Content(v12, v13);
  unint64_t v14 = (v7 + 23) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v15 = (v8 + 23) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v16 = *(void *)v15;
  LOBYTE(v15) = *(unsigned char *)(v15 + 8);
  uint64_t v17 = *(void *)v14;
  char v18 = *(unsigned char *)(v14 + 8);
  *(void *)unint64_t v14 = v16;
  *(unsigned char *)(v14 + 8) = v15;
  outlined consume of Environment<Bool>.Content(v17, v18);
  unint64_t v19 = (v7 + 39) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v20 = (v8 + 39) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v21 = *(void *)v20;
  LOBYTE(v20) = *(unsigned char *)(v20 + 8);
  uint64_t v22 = *(void *)v19;
  char v23 = *(unsigned char *)(v19 + 8);
  *(void *)unint64_t v19 = v21;
  *(unsigned char *)(v19 + 8) = v20;
  outlined consume of Environment<Bool>.Content(v22, v23);
  unint64_t v24 = (v7 + 55) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v25 = (v8 + 55) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v26 = *(void *)v25;
  LOBYTE(v25) = *(unsigned char *)(v25 + 8);
  uint64_t v27 = *(void *)v24;
  char v28 = *(unsigned char *)(v24 + 8);
  *(void *)unint64_t v24 = v26;
  *(unsigned char *)(v24 + 8) = v25;
  outlined consume of Environment<Bool>.Content(v27, v28);
  unint64_t v29 = (v7 + 71) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v30 = (v8 + 71) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v31 = *(void *)v30;
  LOBYTE(v30) = *(unsigned char *)(v30 + 8);
  uint64_t v32 = *(void *)v29;
  char v33 = *(unsigned char *)(v29 + 8);
  *(void *)unint64_t v29 = v31;
  *(unsigned char *)(v29 + 8) = v30;
  outlined consume of Environment<Bool>.Content(v32, v33);
  return a1;
}

uint64_t getEnumTagSinglePayload for Badge(unsigned __int8 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (v5 <= 0xFE) {
    unsigned int v7 = 254;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  if (v7 < a2)
  {
    unint64_t v8 = ((v6 + 71) & 0xFFFFFFFFFFFFFFF8) + 9;
    unsigned int v9 = (a2 - v7 + 255) >> (8 * v8);
    if (v8 < 4) {
      unsigned int v10 = v9 + 1;
    }
    else {
      unsigned int v10 = 2;
    }
    if (v10 >= 0x10000) {
      unsigned int v11 = 4;
    }
    else {
      unsigned int v11 = 2;
    }
    if (v10 < 0x100) {
      unsigned int v11 = 1;
    }
    if (v10 >= 2) {
      uint64_t v12 = v11;
    }
    else {
      uint64_t v12 = 0;
    }
    switch(v12)
    {
      case 1:
        int v13 = a1[v8];
        if (!a1[v8]) {
          break;
        }
        goto LABEL_22;
      case 2:
        int v13 = *(unsigned __int16 *)&a1[v8];
        if (*(_WORD *)&a1[v8]) {
          goto LABEL_22;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x188222808);
      case 4:
        int v13 = *(_DWORD *)&a1[v8];
        if (!v13) {
          break;
        }
LABEL_22:
        int v15 = (v13 - 1) << (8 * v8);
        if (v8 >= 4) {
          int v15 = 0;
        }
        if (((v6 + 71) & 0xFFFFFFF8) == 0xFFFFFFF8) {
          int v16 = *a1;
        }
        else {
          int v16 = *(_DWORD *)a1;
        }
        return v7 + (v16 | v15) + 1;
      default:
        break;
    }
  }
  if (v5 >= 0xFE) {
    return (*(uint64_t (**)(void))(v4 + 48))();
  }
  unsigned int v17 = *(unsigned __int8 *)(((unint64_t)&a1[v6 + 7] & 0xFFFFFFFFFFFFFFF8) + 8);
  if (v17 > 1) {
    return (v17 ^ 0xFF) + 1;
  }
  else {
    return 0;
  }
}

void storeEnumTagSinglePayload for Badge(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0xFE) {
    unsigned int v8 = 254;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  size_t v10 = ((v9 + 71) & 0xFFFFFFFFFFFFFFF8) + 9;
  char v11 = 8 * v10;
  if (v8 >= a3)
  {
    int v15 = 0;
    if (v8 >= a2)
    {
LABEL_17:
      switch(v15)
      {
        case 1:
          a1[v10] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_34;
        case 2:
          *(_WORD *)&a1[v10] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_34;
        case 3:
          goto LABEL_46;
        case 4:
          *(_DWORD *)&a1[v10] = 0;
          goto LABEL_33;
        default:
LABEL_33:
          if (a2)
          {
LABEL_34:
            if (v7 < 0xFE)
            {
              unint64_t v21 = (unint64_t)&a1[v9 + 7] & 0xFFFFFFFFFFFFFFF8;
              if (a2 > 0xFE)
              {
                *(unsigned char *)(v21 + 8) = 0;
                *(void *)unint64_t v21 = a2 - 255;
              }
              else
              {
                *(unsigned char *)(v21 + 8) = -(char)a2;
              }
            }
            else
            {
              unint64_t v20 = *(void (**)(void))(v6 + 56);
              v20();
            }
          }
          break;
      }
      return;
    }
  }
  else
  {
    unsigned int v12 = (a3 - v8 + 255) >> v11;
    if (v10 <= 3) {
      unsigned int v13 = v12 + 1;
    }
    else {
      unsigned int v13 = 2;
    }
    if (v13 >= 0x10000) {
      int v14 = 4;
    }
    else {
      int v14 = 2;
    }
    if (v13 < 0x100) {
      int v14 = 1;
    }
    if (v13 >= 2) {
      int v15 = v14;
    }
    else {
      int v15 = 0;
    }
    if (v8 >= a2) {
      goto LABEL_17;
    }
  }
  unsigned int v16 = ~v8 + a2;
  unsigned int v17 = (~(_BYTE)v8 + a2);
  if (v10 < 4) {
    int v18 = (v16 >> v11) + 1;
  }
  else {
    int v18 = 1;
  }
  if (v10 >= 4) {
    unsigned int v19 = v16;
  }
  else {
    unsigned int v19 = v17;
  }
  bzero(a1, v10);
  if (v10 == 1) {
    *a1 = v19;
  }
  else {
    *(_DWORD *)a1 = v19;
  }
  switch(v15)
  {
    case 1:
      a1[v10] = v18;
      break;
    case 2:
      *(_WORD *)&a1[v10] = v18;
      break;
    case 3:
LABEL_46:
      __break(1u);
      JUMPOUT(0x188222A34);
    case 4:
      *(_DWORD *)&a1[v10] = v18;
      break;
    default:
      return;
  }
}

uint64_t sub_188222A5C()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for View.Body : View in Badge<A>()
{
  return swift_getOpaqueTypeConformance2();
}

void type metadata accessor for TupleView<(BadgeViewStyleConfiguration.Content, Spacer, ModifiedContent<Badge<BadgeLabel>, _TraitWritingModifier<LayoutPriorityTraitKey>>?)>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

void _s7SwiftUI21_TraitWritingModifierVyAA014LayoutPriorityC3KeyVGMaTm_0(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = a5(0, a3, a4);
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

void type metadata accessor for _InsettableBackgroundShapeModifier<AnyShapeStyle, Capsule>()
{
  if (!lazy cache variable for type metadata for _InsettableBackgroundShapeModifier<AnyShapeStyle, Capsule>)
  {
    lazy protocol witness table accessor for type Capsule and conformance Capsule();
    unint64_t v0 = type metadata accessor for _InsettableBackgroundShapeModifier();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _InsettableBackgroundShapeModifier<AnyShapeStyle, Capsule>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type _ForegroundStyleModifier<AnyShapeStyle> and conformance _ForegroundStyleModifier<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type _ForegroundStyleModifier<AnyShapeStyle> and conformance _ForegroundStyleModifier<A>;
  if (!lazy protocol witness table cache variable for type _ForegroundStyleModifier<AnyShapeStyle> and conformance _ForegroundStyleModifier<A>)
  {
    _s7SwiftUI21_TraitWritingModifierVyAA014LayoutPriorityC3KeyVGMaTm_0(255, &lazy cache variable for type metadata for _ForegroundStyleModifier<AnyShapeStyle>, MEMORY[0x1E4F3F700], MEMORY[0x1E4F3F6F8], MEMORY[0x1E4F40E20]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ForegroundStyleModifier<AnyShapeStyle> and conformance _ForegroundStyleModifier<A>);
  }
  return result;
}

uint64_t sub_188222D34()
{
  return swift_getWitnessTable();
}

uint64_t specialized AccessibilityProperties.init<A>(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  type metadata accessor for CVarArg(0, (unint64_t *)&lazy cache variable for type metadata for AnyAccessibilityPropertiesEntry);
  uint64_t v8 = Dictionary.init(minimumCapacity:)();
  type metadata accessor for AccessibilityPropertiesEntry<AccessibilityScrollableContext?>();
  v7[3] = v4;
  void v7[4] = lazy protocol witness table accessor for type AccessibilityPropertiesEntry<AccessibilityScrollableContext?> and conformance AccessibilityPropertiesEntry<A>((unint64_t *)&lazy protocol witness table cache variable for type AccessibilityPropertiesEntry<AccessibilityScrollableContext?> and conformance AccessibilityPropertiesEntry<A>, (void (*)(uint64_t))type metadata accessor for AccessibilityPropertiesEntry<AccessibilityScrollableContext?>);
  v7[0] = swift_allocObject();
  unsigned int v5 = (uint64_t (*)(void, uint64_t))MEMORY[0x1E4FBB718];
  outlined init with copy of HashableWeakBox<Swift.AnyObject>(a1, v7[0] + 16, (unint64_t *)&lazy cache variable for type metadata for AccessibilityScrollableContext?, (uint64_t)&type metadata for AccessibilityScrollableContext, MEMORY[0x1E4FBB718]);
  specialized Dictionary.subscript.setter((uint64_t)v7, (uint64_t)&type metadata for AccessibilityProperties.ScrollableContextKey);
  uint64_t result = _s7SwiftUI15HashableWeakBoxVyyXlGWOhTm_0(a1, (unint64_t *)&lazy cache variable for type metadata for AccessibilityScrollableContext?, (uint64_t)&type metadata for AccessibilityScrollableContext, v5);
  *a2 = v8;
  return result;
}

Swift::Bool __swiftcall AccessibilityNode.scrollToVisible()()
{
  uint64_t v1 = v0;
  AccessibilityNode.enclosingScrollableContext.getter((uint64_t)&v61);
  if (v63 == 255)
  {
    _s7SwiftUI15HashableWeakBoxVyyXlGWOhTm_0((uint64_t)&v61, (unint64_t *)&lazy cache variable for type metadata for AccessibilityScrollableContext?, (uint64_t)&type metadata for AccessibilityScrollableContext, MEMORY[0x1E4FBB718]);
LABEL_21:
    char v17 = 0;
    goto LABEL_22;
  }
  outlined init with take of AccessibilityScrollableContext((uint64_t)&v61, (uint64_t)v64);
  AccessibilityScrollableContext.scrollableCollection.getter((uint64_t)&v61);
  if (!v62)
  {
    outlined destroy of AccessibilityScrollableContext((uint64_t)v64);
    outlined destroy of ScrollableCollection?((uint64_t)&v61);
    goto LABEL_21;
  }
  outlined init with take of OptionalBinaryInteger(&v61, (uint64_t)v60);
  uint64_t v2 = MEMORY[0x18C119DF0](&v0[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_parent]);
  if (!v2)
  {
LABEL_19:
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v60);
    outlined destroy of AccessibilityScrollableContext((uint64_t)v64);
    goto LABEL_21;
  }
  uint64_t v3 = (char *)v2;
  while (1)
  {
    unint64_t v6 = &v3[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_attachmentsStorage];
    swift_beginAccess();
    uint64_t v7 = *(void *)v6;
    uint64_t v8 = *(void *)(*(void *)v6 + 16);
    if (v8) {
      break;
    }
    uint64_t v4 = v3;
    swift_bridgeObjectRetain();
LABEL_7:
    swift_bridgeObjectRelease();
LABEL_8:
    uint64_t v5 = MEMORY[0x18C119DF0](&v3[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_parent]);

    uint64_t v3 = (char *)v5;
    if (!v5) {
      goto LABEL_19;
    }
  }
  uint64_t v9 = v3;
  swift_bridgeObjectRetain();
  size_t v10 = (uint64_t *)(v7 + 40 * v8);
  while (1)
  {
    if (v8 > *(void *)(v7 + 16))
    {
      __break(1u);
      goto LABEL_31;
    }
    uint64_t v11 = *v10;
    *(void *)&long long v61 = *(v10 - 1);
    *((void *)&v61 + 1) = v11;
    unsigned int v12 = (void *)AccessibilityAttachment.platformElement.getter();

    if (v12) {
      break;
    }
    v10 -= 5;
    if (!--v8) {
      goto LABEL_7;
    }
  }
  if (v8 > *(void *)(v7 + 16))
  {
    __break(1u);
    goto LABEL_48;
  }
  uint64_t v14 = *v10;
  *(void *)&long long v61 = *(v10 - 1);
  *((void *)&v61 + 1) = v14;
  uint64_t v13 = AccessibilityAttachment.platformElement.getter();
  if (!v13)
  {
LABEL_48:
    __break(1u);
    return v13;
  }
  int v15 = (void *)v13;
  swift_bridgeObjectRelease();
  type metadata accessor for HostingScrollView();
  uint64_t v16 = swift_dynamicCastClass();
  if (!v16)
  {

    goto LABEL_8;
  }
  int v18 = (void *)v16;

  MEMORY[0x18C113CA0]();
  uint64_t v9 = v15;
  objc_msgSend(v18, sel_accessibilityFrame);
  CGFloat x = v65.origin.x;
  CGFloat y = v65.origin.y;
  CGFloat width = v65.size.width;
  CGFloat height = v65.size.height;
  if (!CGRectIsEmpty(v65)) {
    goto LABEL_25;
  }
  char v23 = (NSString *)MEMORY[0x18C115780](0x4774694B49555841, 0xEB0000000065756CLL);
  Class v24 = NSClassFromString(v23);

  if (v24) {
    goto LABEL_25;
  }
  self;
  uint64_t v32 = swift_dynamicCastObjCClass();
  if (!v32) {
    goto LABEL_25;
  }
  char v33 = (void *)v32;
  id v34 = v18;
  objc_msgSend(v33, sel_frame);
  CGFloat x = v35;
  CGFloat y = v36;
  CGFloat width = v37;
  CGFloat height = v38;
  id v39 = objc_msgSend(v33, sel_window);
  if (!v39)
  {

LABEL_25:
    goto LABEL_26;
  }
  uint64_t v40 = v39;
  objc_msgSend(v33, sel_bounds);
  objc_msgSend(v40, sel_convertRect_fromCoordinateSpace_, v33);
  CGFloat x = v41;
  CGFloat y = v42;
  CGFloat width = v43;
  CGFloat height = v44;

LABEL_26:
  objc_msgSend(v1, sel_accessibilityFrame);
  CGFloat v25 = v66.origin.x;
  CGFloat v26 = v66.origin.y;
  CGFloat v27 = v66.size.width;
  CGFloat v28 = v66.size.height;
  if (CGRectIsEmpty(v66))
  {
    unint64_t v29 = (NSString *)MEMORY[0x18C115780](0x4774694B49555841, 0xEB0000000065756CLL);
    Class v30 = NSClassFromString(v29);

    if (!v30)
    {
      self;
      uint64_t v45 = swift_dynamicCastObjCClass();
      if (v45)
      {
        uint64_t v46 = (void *)v45;
        uint64_t v47 = v1;
        objc_msgSend(v46, sel_frame);
        CGFloat v25 = v48;
        CGFloat v26 = v49;
        CGFloat v27 = v50;
        CGFloat v28 = v51;
        id v52 = objc_msgSend(v46, sel_window);
        if (v52)
        {
          uint64_t v53 = v52;
          objc_msgSend(v46, sel_bounds);
          objc_msgSend(v53, sel_convertRect_fromCoordinateSpace_, v46);
          CGFloat v25 = v54;
          CGFloat v26 = v55;
          CGFloat v27 = v56;
          CGFloat v28 = v57;
        }
        else
        {
        }
      }
    }
  }
  v67.origin.CGFloat x = x;
  v67.origin.CGFloat y = y;
  v67.size.CGFloat width = width;
  v67.size.CGFloat height = height;
  v69.origin.CGFloat x = v25;
  v69.origin.CGFloat y = v26;
  v69.size.CGFloat width = v27;
  v69.size.CGFloat height = v28;
  CGRect v68 = CGRectIntersection(v67, v69);
  v70.origin.CGFloat x = v25;
  v70.origin.CGFloat y = v26;
  v70.size.CGFloat width = v27;
  v70.size.CGFloat height = v28;
  if (CGRectEqualToRect(v68, v70))
  {
    static Update.end()();

    __swift_destroy_boxed_opaque_existential_1((uint64_t)v60);
    outlined destroy of AccessibilityScrollableContext((uint64_t)v64);
    char v17 = 1;
    goto LABEL_22;
  }
LABEL_31:
  uint64_t v31 = outlined init with copy of AccessibilityScrollableContext((uint64_t)v64, (uint64_t)&v61);
  if (!v63 || v63 != 1) {
    uint64_t v31 = __swift_destroy_boxed_opaque_existential_1((uint64_t)&v61);
  }
  MEMORY[0x1F4188790](v31);
  static Update.ensure<A>(_:)();
  char v17 = v59;
  if (v59 == 1 && MEMORY[0x18C119DF0](&v1[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_viewRendererHost]))
  {
    swift_getObjectType();
    *(void *)&long long v61 = 0;
    BYTE8(v61) = 1;
    ViewRendererHost.render(interval:updateDisplayList:targetTimestamp:)();
    swift_unknownObjectRelease();
  }
  swift_release();
  static Update.end()();

  __swift_destroy_boxed_opaque_existential_1((uint64_t)v60);
  outlined destroy of AccessibilityScrollableContext((uint64_t)v64);
LABEL_22:
  LOBYTE(v13) = v17;
  return v13;
}

double AccessibilityScrollableModifier.scrollableCollection.getter@<D0>(uint64_t a1@<X8>)
{
  type metadata accessor for PPTScrollable?(0, (unint64_t *)&lazy cache variable for type metadata for [Scrollable], (unint64_t *)&lazy cache variable for type metadata for Scrollable, MEMORY[0x1E4F3F3B0], MEMORY[0x1E4FBB320]);
  uint64_t Value = AGGraphGetValue();
  if (*(void *)(*(void *)Value + 16))
  {
    outlined init with copy of TableColumnList(*(void *)Value + 32, (uint64_t)v6);
    type metadata accessor for CVarArg(0, (unint64_t *)&lazy cache variable for type metadata for Scrollable);
    type metadata accessor for CVarArg(0, (unint64_t *)&lazy cache variable for type metadata for ScrollableCollection);
    if (swift_dynamicCast())
    {
      outlined init with take of OptionalBinaryInteger(v4, a1);
      return result;
    }
    uint64_t v5 = 0;
    memset(v4, 0, sizeof(v4));
    outlined destroy of ScrollableCollection?((uint64_t)v4);
  }
  *(void *)(a1 + 32) = 0;
  double result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

id AccessibilityScrollableModifier.createOrUpdateNode(viewRendererHost:existingNode:)(uint64_t a1, uint64_t a2, void *a3)
{
  int v6 = *v3;
  AccessibilityScrollableModifier.scrollableCollection.getter((uint64_t)v16);
  if (v17) {
    int v7 = v6;
  }
  else {
    int v7 = 0;
  }
  if (!a3)
  {
    if (v7)
    {
      unsigned int v12 = (objc_class *)type metadata accessor for AccessibilityLazyLayoutNode();
LABEL_13:
      id v13 = objc_allocWithZone(v12);
      uint64_t v14 = swift_unknownObjectRetain();
      id v10 = specialized AccessibilityNode.init(viewRendererHost:isFromDisplayList:)(v14, a2, 0);
      swift_unknownObjectRelease();
      goto LABEL_14;
    }
LABEL_10:
    unsigned int v12 = (objc_class *)type metadata accessor for AccessibilityNode();
    goto LABEL_13;
  }
  uint64_t v8 = type metadata accessor for AccessibilityLazyLayoutNode();
  uint64_t v9 = swift_dynamicCastClass();
  if (!v9)
  {
    if (!v7)
    {
      id v10 = a3;
      goto LABEL_14;
    }
    unsigned int v12 = (objc_class *)v8;
    goto LABEL_13;
  }
  if (!v7) {
    goto LABEL_10;
  }
  id v10 = (id)v9;
  id v11 = a3;
LABEL_14:
  outlined destroy of ScrollableCollection?((uint64_t)v16);
  return v10;
}

uint64_t AccessibilityScrollableModifier.initialAttachment(for:)()
{
  int v1 = *(_DWORD *)(v0 + 4);
  uint64_t v2 = *(void *)(v0 + 8);
  v5[0] = *(unsigned char *)v0;
  int v6 = v1;
  uint64_t v7 = v2;
  AccessibilityScrollableModifier.scrollableCollection.getter((uint64_t)&v9);
  if (v10)
  {
    outlined init with take of OptionalBinaryInteger(&v9, (uint64_t)v11);
    uint64_t v8 = v2;
    outlined init with copy of TableColumnList((uint64_t)v11, (uint64_t)&v9);
    outlined init with copy of ScrollableCollection?((uint64_t)&v9, (uint64_t)v5);
    swift_bridgeObjectRetain();
    specialized AccessibilityProperties.subscript.setter((uint64_t)v5);
    outlined destroy of ScrollableCollection?((uint64_t)&v9);
    static AccessibilityVisibility.containerElement.getter();
    LODWORD(v9) = v4;
    DWORD1(v9) = v4;
    AccessibilityProperties.visibility.setter();
    *(void *)&long long v9 = v8;
    static AccessibilityAttachment.properties(_:)();
    swift_bridgeObjectRelease();
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v11);
  }
  else
  {
    outlined destroy of ScrollableCollection?((uint64_t)&v9);
    v11[0] = v2;
    return static AccessibilityAttachment.properties(_:)();
  }
}

uint64_t protocol witness for AccessibilityViewModifier.willCreateNode(for:) in conformance AccessibilityScrollableModifier()
{
  LODWORD(v1) = *v0;
  AccessibilityScrollableModifier.scrollableCollection.getter((uint64_t)v3);
  if (v4) {
    uint64_t v1 = v1;
  }
  else {
    uint64_t v1 = 0;
  }
  outlined destroy of ScrollableCollection?((uint64_t)v3);
  return v1;
}

uint64_t protocol witness for AccessibilityViewModifier.updatedAttachment(for:nodes:atIndex:) in conformance AccessibilityScrollableModifier()
{
  return AccessibilityScrollableModifier.initialAttachment(for:)();
}

void protocol witness for ViewModifier.body(content:) in conformance AccessibilityScrollableModifier()
{
}

uint64_t protocol witness for AccessibilityViewModifier.initialAttachment(for:) in conformance AccessibilityScrollableContextModifier()
{
  outlined init with copy of AccessibilityScrollableContext(v0, (uint64_t)v2);
  specialized AccessibilityProperties.init<A>(_:_:)((uint64_t)v2, &v3);
  v2[0] = v3;
  static AccessibilityAttachment.properties(_:)();
  return swift_bridgeObjectRelease();
}

void protocol witness for ViewModifier.body(content:) in conformance AccessibilityScrollableContextModifier()
{
}

uint64_t type metadata accessor for AccessibilityLazyLayoutNode()
{
  return self;
}

uint64_t assignWithCopy for AccessibilityScrollableContext(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    unsigned int v4 = *(unsigned __int8 *)(a1 + 70);
    if (v4 >= 3) {
      unsigned int v4 = *(_DWORD *)a1 + 3;
    }
    if (v4 != 1) {
      __swift_destroy_boxed_opaque_existential_1(a1);
    }
    swift_release();
    unsigned int v5 = *(unsigned __int8 *)(a2 + 70);
    if (v5 >= 3) {
      unsigned int v5 = *(_DWORD *)a2 + 3;
    }
    if (v5 == 2)
    {
      uint64_t v7 = *(void *)(a2 + 24);
      *(void *)(a1 + 24) = v7;
      *(void *)(a1 + 32) = *(void *)(a2 + 32);
      (**(void (***)(uint64_t, uint64_t))(v7 - 8))(a1, a2);
      *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
      *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
      *(void *)(a1 + 48) = *(void *)(a2 + 48);
      char v6 = 2;
    }
    else if (v5 == 1)
    {
      *(_DWORD *)a1 = *(_DWORD *)a2;
      *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
      *(void *)(a1 + 8) = *(void *)(a2 + 8);
      char v6 = 1;
    }
    else
    {
      uint64_t v8 = *(void *)(a2 + 24);
      *(void *)(a1 + 24) = v8;
      *(void *)(a1 + 32) = *(void *)(a2 + 32);
      (**(void (***)(uint64_t, uint64_t))(v8 - 8))(a1, a2);
      char v6 = 0;
      *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
      *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
      *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
      *(void *)(a1 + 56) = *(void *)(a2 + 56);
      int v9 = *(_DWORD *)(a2 + 64);
      *(_WORD *)(a1 + 68) = *(_WORD *)(a2 + 68);
      *(_DWORD *)(a1 + 64) = v9;
    }
    *(unsigned char *)(a1 + 70) = v6;
    swift_retain();
  }
  return a1;
}

__n128 __swift_memcpy71_8(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  __n128 result = *(__n128 *)(a2 + 16);
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  *(void *)(a1 + 63) = *(void *)(a2 + 63);
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

uint64_t assignWithTake for AccessibilityScrollableContext(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    unsigned int v4 = *(unsigned __int8 *)(a1 + 70);
    if (v4 >= 3) {
      unsigned int v4 = *(_DWORD *)a1 + 3;
    }
    if (v4 != 1) {
      __swift_destroy_boxed_opaque_existential_1(a1);
    }
    swift_release();
    unsigned int v5 = *(unsigned __int8 *)(a2 + 70);
    if (v5 >= 3) {
      unsigned int v5 = *(_DWORD *)a2 + 3;
    }
    if (v5 == 2)
    {
      long long v6 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v6;
      *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
      *(void *)(a1 + 48) = *(void *)(a2 + 48);
      LOBYTE(v5) = 2;
    }
    else if (v5 == 1)
    {
      *(_OWORD *)a1 = *(_OWORD *)a2;
    }
    else
    {
      LOBYTE(v5) = 0;
      long long v7 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
      *(_OWORD *)(a1 + 48) = v7;
      *(void *)(a1 + 62) = *(void *)(a2 + 62);
      long long v8 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v8;
    }
    *(unsigned char *)(a1 + 70) = v5;
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for AccessibilityScrollableContext(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFE && *(unsigned char *)(a1 + 71)) {
    return (*(_DWORD *)a1 + 254);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 70);
  if (v3 >= 3) {
    return (v3 ^ 0xFF) + 1;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for AccessibilityScrollableContext(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(void *)(result + 63) = 0;
    *(_OWORD *)(result + 32) = 0u;
    *(_OWORD *)(result + 48) = 0u;
    *(_OWORD *)__n128 result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_DWORD *)__n128 result = a2 - 254;
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 71) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 71) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 70) = -(char)a2;
    }
  }
  return result;
}

uint64_t LayoutScrollableTransform.updateValue()()
{
  unint64_t v4 = (unint64_t)v0;
  uint64_t v146 = *MEMORY[0x1E4F143B8];
  int CurrentAttribute = AGGraphGetCurrentAttribute();
  unint64_t v6 = *MEMORY[0x1E4F4E7A0];
  if (CurrentAttribute == v6) {
    goto LABEL_112;
  }
  AccessibilityAttachmentToken.init<A>(_:)();
  unint64_t v1 = v133;
  LOBYTE(v2) = BYTE8(v133);
  if (*(unsigned char *)AGGraphGetValue() == 1 && *((_DWORD *)v0 + 2) != v6)
  {
    uint64_t Value = (unint64_t *)AGGraphGetValue();
    unint64_t v3 = *Value;
    unint64_t v109 = Value[1];
    v110 = v0;
    type metadata accessor for PPTScrollable?(0, (unint64_t *)&lazy cache variable for type metadata for [Scrollable], (unint64_t *)&lazy cache variable for type metadata for Scrollable, MEMORY[0x1E4F3F3B0], MEMORY[0x1E4FBB320]);
    uint64_t v12 = AGGraphGetValue();
    uint64_t v13 = *(void *)(*(void *)v12 + 16);
    uint64_t v124 = v133;
    unint64_t v125 = v3;
    char v123 = BYTE8(v133);
    if (v13)
    {
      unsigned int v119 = v6;
      unint64_t v4 = *(void *)v12 + 32;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v14 = (void *)MEMORY[0x1E4FBC860];
      LOBYTE(v2) = MEMORY[0x1E4F3F3B0];
      do
      {
        outlined init with copy of TableColumnList(v4, (uint64_t)&v133);
        outlined init with copy of TableColumnList((uint64_t)&v133, (uint64_t)v132);
        type metadata accessor for CVarArg(0, (unint64_t *)&lazy cache variable for type metadata for Scrollable);
        type metadata accessor for CVarArg(0, (unint64_t *)&lazy cache variable for type metadata for ScrollableCollection);
        if ((swift_dynamicCast() & 1) == 0)
        {
          uint64_t v145 = 0;
          long long v143 = 0u;
          long long v144 = 0u;
        }
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v133);
        if (*((void *)&v144 + 1))
        {
          outlined init with take of OptionalBinaryInteger(&v143, (uint64_t)v132);
          outlined init with take of OptionalBinaryInteger(v132, (uint64_t)&v143);
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v14[2] + 1, 1, v14);
          }
          unint64_t v16 = v14[2];
          unint64_t v15 = v14[3];
          if (v16 >= v15 >> 1) {
            uint64_t v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v15 > 1), v16 + 1, 1, v14);
          }
          v14[2] = v16 + 1;
          outlined init with take of OptionalBinaryInteger(&v143, (uint64_t)&v14[5 * v16 + 4]);
        }
        else
        {
          outlined destroy of ScrollableCollection?((uint64_t)&v143);
        }
        v4 += 40;
        --v13;
      }
      while (v13);
      swift_bridgeObjectRelease();
      unint64_t v6 = v119;
      if (v14[2]) {
        goto LABEL_25;
      }
    }
    else
    {
      swift_bridgeObjectRetain();
      uint64_t v14 = (void *)MEMORY[0x1E4FBC860];
      if (*(void *)(MEMORY[0x1E4FBC860] + 16))
      {
LABEL_25:
        outlined init with copy of TableColumnList((uint64_t)(v14 + 4), (uint64_t)&v133);
LABEL_28:
        unint64_t v1 = (unint64_t)v0;
        swift_bridgeObjectRelease();
        if (!*((void *)&v134 + 1))
        {
          outlined destroy of ScrollableCollection?((uint64_t)&v133);
          *(void *)&long long v133 = v3;
          *((void *)&v133 + 1) = v109;
          AGGraphSetOutputValue();
          return swift_bridgeObjectRelease();
        }
        outlined init with take of OptionalBinaryInteger(&v133, (uint64_t)&v143);
        AGGraphGetValue();
        char v18 = v17;
        uint64_t v19 = *((void *)v110 + 3);
        uint64_t v20 = swift_bridgeObjectRetain();
        char v21 = specialized static Array<A>.== infix(_:_:)(v20, v19);
        swift_bridgeObjectRelease();
        if (v18 & 1) == 0 && (v21)
        {
          unint64_t v22 = v109;
LABEL_164:
          *(void *)&long long v133 = v3;
          *((void *)&v133 + 1) = v22;
          AGGraphSetOutputValue();
          swift_bridgeObjectRelease();
          return __swift_destroy_boxed_opaque_existential_1((uint64_t)&v143);
        }
        uint64_t v127 = MEMORY[0x1E4FBC870];
        if (*((_DWORD *)v110 + 4) == v6)
        {
          uint64_t v24 = 0;
        }
        else
        {
          _sSay7SwiftUI25_LazyLayout_PlacedSubviewVGMaTm_3(0, &lazy cache variable for type metadata for [_LazyLayout_PlacedSubview], (uint64_t)&type metadata for _LazyLayout_PlacedSubview, MEMORY[0x1E4FBB320]);
          AGGraphGetValue();
          uint64_t v24 = swift_bridgeObjectRetain();
        }
        uint64_t v111 = v24;
        if (v3 >> 62) {
          goto LABEL_118;
        }
        uint64_t v25 = *(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain_n();
        if (v25)
        {
LABEL_38:
          unint64_t v1 = 0;
          unint64_t v121 = v3 & 0xC000000000000001;
          uint64_t v117 = v3 & 0xFFFFFFFFFFFFFF8;
          v120 = (unsigned __int8 *)MEMORY[0x1E4FBC868];
          unint64_t v115 = v3 + 32;
          while (1)
          {
            if (v121)
            {
              CGFloat v28 = (char *)MEMORY[0x18C117680](v1, v3);
            }
            else
            {
              if (v1 >= *(void *)(v117 + 16))
              {
                __break(1u);
                goto LABEL_116;
              }
              CGFloat v28 = (char *)*(id *)(v115 + 8 * v1);
            }
            unint64_t v29 = v28;
            BOOL v30 = __OFADD__(v1++, 1);
            if (v30)
            {
              __break(1u);
              goto LABEL_111;
            }
            uint64_t v31 = &v28[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_attachmentsStorage];
            swift_beginAccess();
            uint64_t v32 = *(void *)v31;
            unint64_t v6 = *(void *)(*(void *)v31 + 16);
            if (!v6)
            {

              goto LABEL_40;
            }
            swift_bridgeObjectRetain();
            char v33 = (unsigned __int8 *)(v32 + 64);
            while (1)
            {
              int v34 = *v33;
              if (v34 != 255) {
                break;
              }
LABEL_48:
              v33 += 40;
              if (!--v6)
              {

                swift_bridgeObjectRelease();
LABEL_53:
                unint64_t v3 = v125;
                goto LABEL_40;
              }
            }
            uint64_t v2 = (char *)*((void *)v33 - 2);
            unint64_t v4 = *((void *)v33 - 4);
            double v35 = (void *)*((void *)v33 - 3);
            *(void *)&long long v133 = *((void *)v33 - 1);
            BYTE8(v133) = v34 & 1;
            swift_retain();
            swift_bridgeObjectRetain();
            id v36 = v35;
            if ((AccessibilityAttachmentToken.attribute.getter() & 0x100000000) != 0) {
              break;
            }
            swift_bridgeObjectRelease();
            unint64_t v6 = (unint64_t)(id)AGGraphGetAttributeSubgraph();
            swift_release();

            swift_bridgeObjectRelease();
            if (!v6)
            {

              goto LABEL_53;
            }
            uint64_t v37 = *((void *)&v144 + 1);
            uint64_t v38 = v145;
            __swift_project_boxed_opaque_existential_1(&v143, *((uint64_t *)&v144 + 1));
            (*(void (**)(long long *__return_ptr, unint64_t, uint64_t, uint64_t))(v38 + 72))(&v133, v6, v37, v38);
            uint64_t v2 = (char *)*((void *)&v133 + 1);
            unint64_t v3 = v125;
            if (*((void *)&v133 + 1) == 1)
            {
            }
            else
            {
              v107 = (void *)v6;
              uint64_t v113 = v133;
              if (v111 && (uint64_t v39 = *(void *)(v111 + 16)) != 0)
              {
                unint64_t v40 = DWORD1(v133);
                swift_bridgeObjectRetain_n();
                uint64_t v41 = 32;
                while (1)
                {
                  unint64_t v4 = *(void *)(v111 + v41);
                  uint64_t v42 = *(void *)(v4 + 144);
                  *(void *)&v132[0] = *(void *)(v4 + 136);
                  *((void *)&v132[0] + 1) = v42;
                  swift_retain();
                  _ViewList_ID.canonicalID.getter();
                  v132[0] = v133;
                  uint64_t v128 = __PAIR64__(v40, v113);
                  v129 = v2;
                  char v43 = MEMORY[0x18C10D6E0](v132, &v128);
                  swift_release();
                  if (v43) {
                    break;
                  }
                  swift_release();
                  v41 += 72;
                  if (!--v39)
                  {
                    swift_bridgeObjectRelease_n();
                    unint64_t v3 = v125;
                    goto LABEL_64;
                  }
                }
                swift_bridgeObjectRelease_n();
                double v44 = (uint64_t *)&v29[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_id];
                uint64_t v48 = *(unsigned int *)(v4 + 160);
                if (*(unsigned char *)(v4 + 164)) {
                  uint64_t v48 = 0;
                }
                uint64_t v49 = 0x100000000;
                if (!*(unsigned char *)(v4 + 165)) {
                  uint64_t v49 = 0;
                }
                uint64_t v50 = v49 | v48;
                uint64_t v51 = 0x10000000000;
                if (!*(unsigned char *)(v4 + 166)) {
                  uint64_t v51 = 0;
                }
                uint64_t v45 = v50 | v51;
                unint64_t v3 = v125;
              }
              else
              {
LABEL_64:
                unint64_t v4 = 0;
                double v44 = (uint64_t *)&v29[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_id];
                uint64_t v45 = 0x200000000;
              }
              uint64_t v46 = *v44;
              outlined copy of Text.LineStyle?(v113, (uint64_t)v2);
              unint64_t v6 = (unint64_t)v120;
              char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
              *(void *)&long long v133 = v120;
              unint64_t v108 = v45 | v108 & 0xFFFF000000000000;
              specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v113, (uint64_t)v2, v108, v46, isUniquelyReferenced_nonNull_native);
              v120 = (unsigned __int8 *)v133;
              swift_bridgeObjectRelease();
              outlined copy of Text.LineStyle?(v113, (uint64_t)v2);
              specialized Set._Variant.insert(_:)((uint64_t)&v133, v113, (uint64_t)v2);

              outlined consume of Text.LineStyle?(v113, (uint64_t)v2);
              swift_release();
              swift_release();
            }
LABEL_40:
            uint64_t v26 = v124;
            char v27 = v123;
            if (v1 == v25)
            {
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              unint64_t v1 = (unint64_t)v110;
              if ((*v110 & 1) == 0 && *(void *)(v127 + 16) < 2uLL)
              {
                char v114 = 0;
                goto LABEL_121;
              }
              swift_bridgeObjectRetain();
              char v114 = 0;
              unint64_t v4 = 0;
              while (1)
              {
                if (v121)
                {
                  id v52 = (char *)MEMORY[0x18C117680](v4, v3);
                }
                else
                {
                  if (v4 >= *(void *)(v117 + 16)) {
                    goto LABEL_117;
                  }
                  id v52 = (char *)*(id *)(v115 + 8 * v4);
                }
                uint64_t v2 = v52;
                BOOL v30 = __OFADD__(v4++, 1);
                if (v30) {
                  break;
                }
                if (*((void *)v120 + 2)
                  && (uint64_t v53 = specialized __RawDictionaryStorage.find<A>(_:)(*(void *)&v52[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_id]),
                      (v54 & 1) != 0))
                {
                  uint64_t v55 = *((void *)v120 + 7) + 24 * v53;
                  unsigned int v57 = *(_DWORD *)v55;
                  unsigned int v56 = *(_DWORD *)(v55 + 4);
                  unint64_t v58 = *(void *)(v55 + 8);
                  uint64_t v59 = *(unsigned __int16 *)(v55 + 20);
                  uint64_t v60 = *(unsigned int *)(v55 + 16);
                  long long v61 = (unsigned __int8 *)v1;
                  int v62 = *(unsigned __int8 *)v1;
                  outlined init with copy of TableColumnList((uint64_t)&v143, (uint64_t)&v133);
                  if (v62 == 1)
                  {
                    char v63 = 0;
                    LOBYTE(v136) = v61[1];
                    unint64_t v138 = __PAIR64__(v56, v57);
                    unint64_t v139 = v58;
                    int v140 = v60;
                    __int16 v141 = (v60 | (unint64_t)(v59 << 32)) >> 32;
                  }
                  else
                  {
                    unsigned int v136 = v57;
                    unsigned int v137 = v56;
                    char v63 = 2;
                    unint64_t v138 = v58;
                  }
                  unint64_t v1 = (unint64_t)v61;
                  char v142 = v63;
                  outlined init with copy of AccessibilityScrollableContext((uint64_t)&v133, (uint64_t)v132);
                  type metadata accessor for CVarArg(0, (unint64_t *)&lazy cache variable for type metadata for AnyAccessibilityPropertiesEntry);
                  uint64_t v111 = v58;
                  swift_retain_n();
                  uint64_t v126 = Dictionary.init(minimumCapacity:)();
                  type metadata accessor for AccessibilityPropertiesEntry<AccessibilityScrollableContext?>();
                  uint64_t v130 = v70;
                  uint64_t v131 = lazy protocol witness table accessor for type AccessibilityPropertiesEntry<AccessibilityScrollableContext?> and conformance AccessibilityPropertiesEntry<A>((unint64_t *)&lazy protocol witness table cache variable for type AccessibilityPropertiesEntry<AccessibilityScrollableContext?> and conformance AccessibilityPropertiesEntry<A>, (void (*)(uint64_t))type metadata accessor for AccessibilityPropertiesEntry<AccessibilityScrollableContext?>);
                  uint64_t v128 = swift_allocObject();
                  char v71 = (uint64_t (*)(void, uint64_t))MEMORY[0x1E4FBB718];
                  outlined init with copy of HashableWeakBox<Swift.AnyObject>((uint64_t)v132, v128 + 16, (unint64_t *)&lazy cache variable for type metadata for AccessibilityScrollableContext?, (uint64_t)&type metadata for AccessibilityScrollableContext, MEMORY[0x1E4FBB718]);
                  specialized Dictionary.subscript.setter((uint64_t)&v128, (uint64_t)&type metadata for AccessibilityProperties.ScrollableContextKey);
                  _s7SwiftUI15HashableWeakBoxVyyXlGWOhTm_0((uint64_t)v132, (unint64_t *)&lazy cache variable for type metadata for AccessibilityScrollableContext?, (uint64_t)&type metadata for AccessibilityScrollableContext, v71);
                  uint64_t v128 = v126;
                  static AccessibilityAttachment.properties(_:)();
                  swift_bridgeObjectRelease();
                  long long v72 = v132[0];
                  uint64_t v73 = (char **)&v2[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_attachmentsStorage];
                  swift_beginAccess();
                  uint64_t v74 = *v73;
                  uint64_t v75 = *((void *)*v73 + 2);
                  if (v75)
                  {
                    swift_bridgeObjectRetain();
                    unint64_t v76 = (unint64_t)(v74 + 64);
                    unint64_t v6 = (unint64_t)(v74 + 64);
                    do
                    {
                      int v78 = *(unsigned __int8 *)v6;
                      v6 += 40;
                      char v77 = v78;
                      if (v78 != 255)
                      {
                        *(void *)&v132[0] = *(void *)(v76 - 8);
                        BYTE8(v132[0]) = v77;
                        uint64_t v128 = v124;
                        LOBYTE(v129) = v123;
                        if (static AccessibilityAttachmentToken.== infix(_:_:)())
                        {
                          swift_bridgeObjectRelease();
                          v132[0] = v72;
                          uint64_t v128 = v124;
                          LOBYTE(v129) = v123;
                          char v79 = specialized AccessibilityNode.updateAttachment(_:isInPlatformItemList:token:merge:)((char **)v132, &v128, 0);
                          swift_release();

                          outlined destroy of AccessibilityScrollableContext((uint64_t)&v133);
                          swift_bridgeObjectRelease();

                          v114 |= v79;
                          goto LABEL_108;
                        }
                      }
                      unint64_t v76 = v6;
                      --v75;
                    }
                    while (v75);
                    swift_bridgeObjectRelease();
                  }
                  v132[0] = v72;
                  AccessibilityNode.scheduleNotifyForAttachmentAddition(of:)(v132);
                  uint64_t v80 = *v73;
                  id v81 = *((id *)&v72 + 1);
                  swift_bridgeObjectRetain_n();
                  id v82 = v81;
                  char v83 = swift_isUniquelyReferenced_nonNull_native();
                  *uint64_t v73 = v80;
                  if ((v83 & 1) == 0)
                  {
                    uint64_t v80 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v80 + 2) + 1, 1, v80);
                    *uint64_t v73 = v80;
                  }
                  unint64_t v6 = *((void *)v80 + 2);
                  unint64_t v84 = *((void *)v80 + 3);
                  if (v6 >= v84 >> 1)
                  {
                    uint64_t v80 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v84 > 1), v6 + 1, 1, v80);
                    *uint64_t v73 = v80;
                  }
                  *((void *)v80 + 2) = v6 + 1;
                  v85 = &v80[40 * v6];
                  *((_OWORD *)v85 + 2) = v72;
                  *((void *)v85 + 6) = 0;
                  *((void *)v85 + 7) = v124;
                  v85[64] = v123;
                  v86 = &v2[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_cachedCombinedAttachment];
                  uint64_t v87 = *(void *)&v2[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_cachedCombinedAttachment];
                  v88 = *(void **)&v2[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_cachedCombinedAttachment + 8];
                  *(void *)v86 = 0;
                  *((void *)v86 + 1) = 0;
                  outlined consume of AccessibilityAttachment?(v87, v88);
                  char v114 = 1;
                  v2[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_platformElementPropertiesDirty] = 1;
                  swift_release();

                  swift_bridgeObjectRelease();
                  outlined destroy of AccessibilityScrollableContext((uint64_t)&v133);

                  swift_bridgeObjectRelease();
                  unint64_t v1 = (unint64_t)v110;
LABEL_108:
                  uint64_t v26 = v124;
                  unint64_t v3 = v125;
                  char v27 = v123;
                }
                else
                {
                  int v64 = &v2[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_attachmentsStorage];
                  swift_beginAccess();
                  uint64_t v65 = *(void *)v64;
                  uint64_t v66 = *(void *)(*(void *)v64 + 16);
                  if (v66)
                  {
                    swift_bridgeObjectRetain();
                    unint64_t v67 = v65 + 64;
                    unint64_t v6 = v65 + 64;
                    while (1)
                    {
                      int v69 = *(unsigned __int8 *)v6;
                      v6 += 40;
                      char v68 = v69;
                      if (v69 != 255)
                      {
                        *(void *)&long long v133 = *(void *)(v67 - 8);
                        BYTE8(v133) = v68;
                        *(void *)&v132[0] = v26;
                        BYTE8(v132[0]) = v27;
                        if (static AccessibilityAttachmentToken.== infix(_:_:)()) {
                          break;
                        }
                      }
                      unint64_t v67 = v6;
                      if (!--v66)
                      {

                        swift_bridgeObjectRelease();
                        goto LABEL_78;
                      }
                    }
                    swift_bridgeObjectRelease();
                    *(void *)&long long v133 = v26;
                    BYTE8(v133) = v27;
                    specialized AccessibilityNode.removeAttachment(isInPlatformItemList:token:)((uint64_t *)&v133);

                    char v114 = 1;
                  }
                  else
                  {
                  }
                }
LABEL_78:
                if (v4 == v25) {
                  goto LABEL_120;
                }
              }
LABEL_111:
              __break(1u);
LABEL_112:
              __break(1u);
LABEL_113:
              swift_bridgeObjectRetain();
              uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
              if (!v7) {
                goto LABEL_114;
              }
LABEL_6:
              if (v7 >= 1)
              {
                uint64_t v8 = 0;
                do
                {
                  if ((v6 & 0xC000000000000001) != 0) {
                    id v9 = (id)MEMORY[0x18C117680](v8, v6);
                  }
                  else {
                    id v9 = *(id *)(v6 + 8 * v8 + 32);
                  }
                  uint64_t v10 = v9;
                  ++v8;
                  *(void *)&long long v133 = v1;
                  BYTE8(v133) = (_BYTE)v2;
                  specialized AccessibilityNode.removeAttachment(isInPlatformItemList:token:)((uint64_t *)&v133);
                }
                while (v7 != v8);
                goto LABEL_114;
              }
LABEL_116:
              __break(1u);
LABEL_117:
              __break(1u);
LABEL_118:
              swift_bridgeObjectRetain_n();
              uint64_t v25 = _CocoaArrayWrapper.endIndex.getter();
              if (!v25) {
                goto LABEL_119;
              }
              goto LABEL_38;
            }
          }
          swift_release();

          swift_bridgeObjectRelease();
          goto LABEL_48;
        }
LABEL_119:
        swift_bridgeObjectRelease();
        char v114 = 0;
LABEL_120:
        swift_bridgeObjectRelease();
LABEL_121:
        unint64_t v90 = *(void *)(v1 + 24);
        if (v90 >> 62) {
          goto LABEL_161;
        }
        uint64_t v91 = *(void *)((v90 & 0xFFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain();
        if (!v91)
        {
LABEL_162:
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          *((void *)v110 + 3) = v3;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          unint64_t v22 = v109;
          if (v114)
          {
LABEL_163:
            DisplayList.Version.init(forUpdate:)();
            unint64_t v22 = v133;
          }
          goto LABEL_164;
        }
LABEL_123:
        unint64_t v92 = 0;
        unint64_t v122 = v90 & 0xC000000000000001;
        unint64_t v116 = v90 + 32;
        uint64_t v118 = v90 & 0xFFFFFFFFFFFFFF8;
        unint64_t v93 = v3 & 0xC000000000000001;
        unint64_t v112 = v90;
        while (1)
        {
          while (1)
          {
LABEL_125:
            if (v122)
            {
              id v94 = (id)MEMORY[0x18C117680](v92, v90);
            }
            else
            {
              if (v92 >= *(void *)(v118 + 16)) {
                goto LABEL_160;
              }
              id v94 = *(id *)(v116 + 8 * v92);
            }
            v95 = v94;
            BOOL v30 = __OFADD__(v92++, 1);
            if (v30)
            {
LABEL_159:
              __break(1u);
LABEL_160:
              __break(1u);
LABEL_161:
              swift_bridgeObjectRetain();
              uint64_t v91 = _CocoaArrayWrapper.endIndex.getter();
              if (!v91) {
                goto LABEL_162;
              }
              goto LABEL_123;
            }
            if (v25) {
              break;
            }
LABEL_151:
            *(void *)&long long v133 = v124;
            BYTE8(v133) = v123;
            specialized AccessibilityNode.removeAttachment(isInPlatformItemList:token:)((uint64_t *)&v133);

            char v114 = 1;
            if (v92 == v91)
            {
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRelease();
              *((void *)v110 + 3) = v3;
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              goto LABEL_163;
            }
          }
          if (v93)
          {
            swift_bridgeObjectRetain();
            id v97 = (id)MEMORY[0x18C117680](0, v3);
          }
          else
          {
            v96 = *(void **)(v3 + 32);
            swift_bridgeObjectRetain();
            id v97 = v96;
          }
          v98 = v97;
          type metadata accessor for AccessibilityNode();
          char v99 = static NSObject.== infix(_:_:)();

          if ((v99 & 1) == 0)
          {
            if (v25 == 1) {
              goto LABEL_155;
            }
            if (v93)
            {
              MEMORY[0x18C117680](1, v3);
              char v100 = static NSObject.== infix(_:_:)();
              swift_unknownObjectRelease();
              if ((v100 & 1) == 0)
              {
                if (v25 != 2)
                {
                  uint64_t v101 = 2;
                  while (1)
                  {
                    MEMORY[0x18C117680](v101, v3);
                    unint64_t v90 = v101 + 1;
                    if (__OFADD__(v101, 1)) {
                      break;
                    }
                    char v102 = static NSObject.== infix(_:_:)();
                    swift_unknownObjectRelease();
                    if (v102) {
                      goto LABEL_153;
                    }
                    ++v101;
                    unint64_t v3 = v125;
                    if (v90 == v25) {
                      goto LABEL_150;
                    }
                  }
                  __break(1u);
LABEL_158:
                  __break(1u);
                  goto LABEL_159;
                }
LABEL_155:
                swift_bridgeObjectRelease();
                goto LABEL_151;
              }
            }
            else
            {
              id v103 = *(id *)(v3 + 40);
              char v104 = static NSObject.== infix(_:_:)();

              if ((v104 & 1) == 0)
              {
                if (v25 != 2)
                {
                  unint64_t v90 = 6;
                  while (1)
                  {
                    unint64_t v3 = v90 - 3;
                    if (__OFADD__(v90 - 4, 1)) {
                      goto LABEL_158;
                    }
                    id v105 = *(id *)(v125 + 8 * v90);
                    char v106 = static NSObject.== infix(_:_:)();

                    if (v106)
                    {
LABEL_153:

                      unint64_t v3 = v125;
                      swift_bridgeObjectRelease();
                      unint64_t v90 = v112;
                      if (v92 != v91) {
                        goto LABEL_125;
                      }
                      goto LABEL_162;
                    }
                    ++v90;
                    if (v3 == v25)
                    {
                      unint64_t v3 = v125;
LABEL_150:
                      swift_bridgeObjectRelease();
                      unint64_t v90 = v112;
                      goto LABEL_151;
                    }
                  }
                }
                goto LABEL_155;
              }
            }
          }

          swift_bridgeObjectRelease();
          if (v92 == v91) {
            goto LABEL_162;
          }
        }
      }
    }
    uint64_t v135 = 0;
    long long v133 = 0u;
    long long v134 = 0u;
    goto LABEL_28;
  }
  unint64_t v6 = *((void *)v0 + 3);
  if (v6 >> 62) {
    goto LABEL_113;
  }
  uint64_t v7 = *(void *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (v7) {
    goto LABEL_6;
  }
LABEL_114:
  swift_bridgeObjectRelease_n();
  unint64_t v89 = MEMORY[0x1E4FBC860];
  *(void *)(v4 + 24) = MEMORY[0x1E4FBC860];
  long long v133 = v89;
  return AGGraphSetOutputValue();
}

uint64_t LayoutScrollableTransform.description.getter()
{
  int v1 = *v0;
  _StringGuts.grow(_:)(68);
  v2._object = (void *)0x80000001883443A0;
  v2._countAndFlagsBits = 0xD000000000000036;
  String.append(_:)(v2);
  if (v1) {
    uint64_t v3 = 1702195828;
  }
  else {
    uint64_t v3 = 0x65736C6166;
  }
  if (v1) {
    unint64_t v4 = 0xE400000000000000;
  }
  else {
    unint64_t v4 = 0xE500000000000000;
  }
  unint64_t v5 = v4;
  String.append(_:)(*(Swift::String *)&v3);
  swift_bridgeObjectRelease();
  v6._countAndFlagsBits = 0x6C6F722020202020;
  v6._object = (void *)0xEA00000000002065;
  String.append(_:)(v6);
  _sSay7SwiftUI25_LazyLayout_PlacedSubviewVGMaTm_3(0, &lazy cache variable for type metadata for AccessibilityLayoutRole?, MEMORY[0x1E4F40A88], MEMORY[0x1E4FBB718]);
  v7._countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  return 0;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance AccessibilitySectionContext(uint64_t a1, uint64_t a2)
{
  return ((*(_DWORD *)a1 != *(_DWORD *)a2) | ((*(unsigned char *)(a1 + 4) ^ *(unsigned char *)(a2 + 4)) | (*(unsigned char *)(a2 + 5) ^ *(unsigned char *)(a1 + 5))) & 1) == 0;
}

uint64_t AccessibilityScrollableContext.scrollableCollection.getter@<X0>(uint64_t a1@<X8>)
{
  outlined init with copy of AccessibilityScrollableContext(v1, (uint64_t)v4);
  if (v5 && v5 == 1)
  {
    *(void *)(a1 + 32) = 0;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    return outlined destroy of AccessibilityScrollableContext((uint64_t)v4);
  }
  else
  {
    swift_release();
    return outlined init with take of OptionalBinaryInteger(v4, a1);
  }
}

double AccessibilityNode.enclosingScrollableContext.getter@<D0>(uint64_t a1@<X8>)
{
  AccessibilityNode.attachment.getter(v7);

  uint64_t v3 = swift_bridgeObjectRetain();
  specialized AccessibilityProperties.subscript.getter(v3, (uint64_t)v8);
  swift_bridgeObjectRelease_n();
  if (v8[70] == 255)
  {
    _s7SwiftUI15HashableWeakBoxVyyXlGWOhTm_0((uint64_t)v8, (unint64_t *)&lazy cache variable for type metadata for AccessibilityScrollableContext?, (uint64_t)&type metadata for AccessibilityScrollableContext, MEMORY[0x1E4FBB718]);
    uint64_t v4 = MEMORY[0x18C119DF0](v1 + OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_parent);
    if (v4)
    {
      char v5 = (void *)v4;
      AccessibilityNode.enclosingScrollableContext.getter();
    }
    else
    {
      double result = 0.0;
      *(_OWORD *)(a1 + 32) = 0u;
      *(_OWORD *)(a1 + 48) = 0u;
      *(_OWORD *)a1 = 0u;
      *(_OWORD *)(a1 + 16) = 0u;
      *(_WORD *)(a1 + 68) = 0;
      *(_DWORD *)(a1 + 64) = 0;
      *(unsigned char *)(a1 + 70) = -1;
    }
  }
  else
  {
    outlined init with take of AccessibilityScrollableContext((uint64_t)v8, a1);
  }
  return result;
}

uint64_t closure #1 in scroll #1 () in AccessibilityNode.scroll(toCollectionViewID:in:)@<X0>(void *a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, unsigned char *a4@<X8>)
{
  int v5 = a2;
  unint64_t v7 = HIDWORD(a2);
  uint64_t v8 = a1[3];
  uint64_t v9 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v8);
  v11[0] = v5;
  v11[1] = v7;
  uint64_t v12 = a3;
  uint64_t result = (*(uint64_t (**)(_DWORD *, void, void, uint64_t, uint64_t, uint64_t))(v9 + 80))(v11, 0, 0, 1, v8, v9);
  *a4 = result & 1;
  return result;
}

uint64_t specialized Set._Variant.insert(_:)(Swift::UInt *a1, Swift::UInt a2)
{
  return specialized Set._Variant.insert(_:)(a1, a2, &lazy cache variable for type metadata for _SetStorage<UniqueID>, (void (*)(void))lazy protocol witness table accessor for type UniqueID and conformance UniqueID);
}

{
  return specialized Set._Variant.insert(_:)(a1, a2, &lazy cache variable for type metadata for _SetStorage<Namespace.ID>, (void (*)(void))lazy protocol witness table accessor for type Namespace.ID and conformance Namespace.ID);
}

{
  uint64_t *v2;
  uint64_t v5;
  Swift::Int v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v13;

  int v5 = *v2;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a2);
  Swift::String v6 = Hasher._finalize()();
  unint64_t v7 = -1 << *(unsigned char *)(v5 + 32);
  uint64_t v8 = v6 & ~v7;
  if (((*(void *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v8) & 1) == 0)
  {
LABEL_7:
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v13 = *v2;
    *Swift::String v2 = 0x8000000000000000;
    specialized _NativeSet.insertNew(_:at:isUnique:)(a2, v8, isUniquelyReferenced_nonNull_native);
    *Swift::String v2 = v13;
    swift_bridgeObjectRelease();
    uint64_t result = 1;
    goto LABEL_8;
  }
  uint64_t v9 = *(void *)(v5 + 48);
  if (*(void *)(v9 + 8 * v8) != a2)
  {
    uint64_t v10 = ~v7;
    do
    {
      uint64_t v8 = (v8 + 1) & v10;
      if (((*(void *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v8) & 1) == 0) {
        goto LABEL_7;
      }
    }
    while (*(void *)(v9 + 8 * v8) != a2);
  }
  uint64_t result = 0;
  a2 = *(void *)(*(void *)(*v2 + 48) + 8 * v8);
LABEL_8:
  *a1 = a2;
  return result;
}

uint64_t specialized Set._Variant.insert(_:)(Swift::UInt *a1, Swift::UInt a2, Swift::UInt a3)
{
  uint64_t v7 = *v3;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a2);
  Hasher._combine(_:)(a3);
  Swift::Int v8 = Hasher._finalize()();
  uint64_t v9 = -1 << *(unsigned char *)(v7 + 32);
  unint64_t v10 = v8 & ~v9;
  if ((*(void *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10))
  {
    uint64_t v11 = ~v9;
    while (1)
    {
      uint64_t v12 = (void *)(*(void *)(v7 + 48) + 16 * v10);
      if (v12[1] == a3 && *v12 == a2) {
        break;
      }
      unint64_t v10 = (v10 + 1) & v11;
      if (((*(void *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10) & 1) == 0) {
        goto LABEL_8;
      }
    }
    uint64_t result = 0;
    unint64_t v16 = (Swift::UInt *)(*(void *)(*v3 + 48) + 16 * v10);
    a2 = *v16;
    a3 = v16[1];
  }
  else
  {
LABEL_8:
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v17 = *v3;
    *uint64_t v3 = 0x8000000000000000;
    specialized _NativeSet.insertNew(_:at:isUnique:)(a2, a3, v10, isUniquelyReferenced_nonNull_native);
    *uint64_t v3 = v17;
    swift_bridgeObjectRelease();
    uint64_t result = 1;
  }
  *a1 = a2;
  a1[1] = a3;
  return result;
}

uint64_t specialized Set._Variant.insert(_:)(Swift::UInt *a1, Swift::UInt a2, unint64_t *a3, void (*a4)(void))
{
  uint64_t v9 = *v4;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a2);
  Swift::Int v10 = Hasher._finalize()();
  uint64_t v11 = -1 << *(unsigned char *)(v9 + 32);
  unint64_t v12 = v10 & ~v11;
  if (((*(void *)(v9 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v12) & 1) == 0)
  {
LABEL_7:
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v17 = *v4;
    *uint64_t v4 = 0x8000000000000000;
    specialized _NativeSet.insertNew(_:at:isUnique:)(a2, v12, isUniquelyReferenced_nonNull_native, a3, a4);
    *uint64_t v4 = v17;
    swift_bridgeObjectRelease();
    uint64_t result = 1;
    goto LABEL_8;
  }
  uint64_t v13 = *(void *)(v9 + 48);
  if (*(void *)(v13 + 8 * v12) != a2)
  {
    uint64_t v14 = ~v11;
    do
    {
      unint64_t v12 = (v12 + 1) & v14;
      if (((*(void *)(v9 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v12) & 1) == 0) {
        goto LABEL_7;
      }
    }
    while (*(void *)(v13 + 8 * v12) != a2);
  }
  uint64_t result = 0;
  a2 = *(void *)(*(void *)(*v4 + 48) + 8 * v12);
LABEL_8:
  *a1 = a2;
  return result;
}

uint64_t specialized Set._Variant.insert(_:)(uint64_t a1, char *a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for UTType();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v9 = (char *)v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *v2;
  lazy protocol witness table accessor for type AccessibilityPropertiesEntry<AccessibilityScrollableContext?> and conformance AccessibilityPropertiesEntry<A>(&lazy protocol witness table cache variable for type UTType and conformance UTType, MEMORY[0x1E4FBCEA8]);
  swift_bridgeObjectRetain();
  char v33 = a2;
  uint64_t v11 = dispatch thunk of Hashable._rawHashValue(seed:)();
  uint64_t v12 = -1 << *(unsigned char *)(v10 + 32);
  unint64_t v13 = v11 & ~v12;
  uint64_t v32 = v10 + 56;
  if ((*(void *)(v10 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v13))
  {
    CGFloat v28 = v2;
    uint64_t v29 = a1;
    uint64_t v30 = ~v12;
    uint64_t v27 = v7;
    unint64_t v16 = *(void (**)(void, void, void))(v7 + 16);
    uint64_t v15 = v7 + 16;
    uint64_t v14 = v16;
    uint64_t v31 = *(void *)(v15 + 56);
    uint64_t v17 = (void (**)(char *, uint64_t))(v15 - 8);
    v26[1] = v15 & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
    while (1)
    {
      uint64_t v18 = v10;
      unint64_t v19 = v31 * v13;
      uint64_t v20 = v14;
      v14(v9, *(void *)(v10 + 48) + v31 * v13, v6);
      lazy protocol witness table accessor for type AccessibilityPropertiesEntry<AccessibilityScrollableContext?> and conformance AccessibilityPropertiesEntry<A>((unint64_t *)&lazy protocol witness table cache variable for type UTType and conformance UTType, MEMORY[0x1E4FBCEA8]);
      char v21 = dispatch thunk of static Equatable.== infix(_:_:)();
      unint64_t v22 = *v17;
      (*v17)(v9, v6);
      if (v21) {
        break;
      }
      unint64_t v13 = (v13 + 1) & v30;
      uint64_t v10 = v18;
      uint64_t v14 = v20;
      if (((*(void *)(v32 + ((v13 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v13) & 1) == 0)
      {
        swift_bridgeObjectRelease();
        uint64_t v3 = v28;
        a1 = v29;
        uint64_t v7 = v27;
        goto LABEL_7;
      }
    }
    swift_bridgeObjectRelease();
    v22(v33, v6);
    v20(v29, *(void *)(*v28 + 48) + v19, v6);
    return 0;
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v14 = *(void (**)(void, void, void))(v7 + 16);
LABEL_7:
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v24 = v33;
    v14(v9, v33, v6);
    uint64_t v34 = *v3;
    *uint64_t v3 = 0x8000000000000000;
    specialized _NativeSet.insertNew(_:at:isUnique:)((uint64_t)v9, v13, isUniquelyReferenced_nonNull_native);
    *uint64_t v3 = v34;
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(a1, v24, v6);
    return 1;
  }
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  void (*v14)(void, void, void);
  uint64_t v15;
  void (*v16)(void, void, void);
  void (**v17)(char *, uint64_t);
  uint64_t v18;
  unint64_t v19;
  void (*v20)(void, void, void);
  char v21;
  void (*v22)(char *, uint64_t);
  char isUniquelyReferenced_nonNull_native;
  char *v24;
  void v26[2];
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;

  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for URL();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v9 = (char *)v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *v2;
  lazy protocol witness table accessor for type AccessibilityPropertiesEntry<AccessibilityScrollableContext?> and conformance AccessibilityPropertiesEntry<A>(&lazy protocol witness table cache variable for type URL and conformance URL, MEMORY[0x1E4F276F0]);
  swift_bridgeObjectRetain();
  char v33 = a2;
  uint64_t v11 = dispatch thunk of Hashable._rawHashValue(seed:)();
  uint64_t v12 = -1 << *(unsigned char *)(v10 + 32);
  unint64_t v13 = v11 & ~v12;
  uint64_t v32 = v10 + 56;
  if ((*(void *)(v10 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v13))
  {
    CGFloat v28 = v2;
    uint64_t v29 = a1;
    uint64_t v30 = ~v12;
    uint64_t v27 = v7;
    unint64_t v16 = *(void (**)(void, void, void))(v7 + 16);
    uint64_t v15 = v7 + 16;
    uint64_t v14 = v16;
    uint64_t v31 = *(void *)(v15 + 56);
    uint64_t v17 = (void (**)(char *, uint64_t))(v15 - 8);
    v26[1] = v15 & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
    while (1)
    {
      uint64_t v18 = v10;
      unint64_t v19 = v31 * v13;
      uint64_t v20 = v14;
      v14(v9, *(void *)(v10 + 48) + v31 * v13, v6);
      lazy protocol witness table accessor for type AccessibilityPropertiesEntry<AccessibilityScrollableContext?> and conformance AccessibilityPropertiesEntry<A>(&lazy protocol witness table cache variable for type URL and conformance URL, MEMORY[0x1E4F276F0]);
      char v21 = dispatch thunk of static Equatable.== infix(_:_:)();
      unint64_t v22 = *v17;
      (*v17)(v9, v6);
      if (v21) {
        break;
      }
      unint64_t v13 = (v13 + 1) & v30;
      uint64_t v10 = v18;
      uint64_t v14 = v20;
      if (((*(void *)(v32 + ((v13 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v13) & 1) == 0)
      {
        swift_bridgeObjectRelease();
        uint64_t v3 = v28;
        a1 = v29;
        uint64_t v7 = v27;
        goto LABEL_7;
      }
    }
    swift_bridgeObjectRelease();
    v22(v33, v6);
    v20(v29, *(void *)(*v28 + 48) + v19, v6);
    return 0;
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v14 = *(void (**)(void, void, void))(v7 + 16);
LABEL_7:
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v24 = v33;
    v14(v9, v33, v6);
    uint64_t v34 = *v3;
    *uint64_t v3 = 0x8000000000000000;
    specialized _NativeSet.insertNew(_:at:isUnique:)((uint64_t)v9, v13, isUniquelyReferenced_nonNull_native);
    *uint64_t v3 = v34;
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(a1, v24, v6);
    return 1;
  }
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  void (*v14)(void, void, void);
  uint64_t v15;
  void (*v16)(void, void, void);
  void (**v17)(char *, uint64_t);
  uint64_t v18;
  unint64_t v19;
  void (*v20)(void, void, void);
  char v21;
  void (*v22)(char *, uint64_t);
  char isUniquelyReferenced_nonNull_native;
  char *v24;
  void v26[2];
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;

  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for IndexPath();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v9 = (char *)v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *v2;
  lazy protocol witness table accessor for type AccessibilityPropertiesEntry<AccessibilityScrollableContext?> and conformance AccessibilityPropertiesEntry<A>(&lazy protocol witness table cache variable for type IndexPath and conformance IndexPath, MEMORY[0x1E4F27DE8]);
  swift_bridgeObjectRetain();
  char v33 = a2;
  uint64_t v11 = dispatch thunk of Hashable._rawHashValue(seed:)();
  uint64_t v12 = -1 << *(unsigned char *)(v10 + 32);
  unint64_t v13 = v11 & ~v12;
  uint64_t v32 = v10 + 56;
  if ((*(void *)(v10 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v13))
  {
    CGFloat v28 = v2;
    uint64_t v29 = a1;
    uint64_t v30 = ~v12;
    uint64_t v27 = v7;
    unint64_t v16 = *(void (**)(void, void, void))(v7 + 16);
    uint64_t v15 = v7 + 16;
    uint64_t v14 = v16;
    uint64_t v31 = *(void *)(v15 + 56);
    uint64_t v17 = (void (**)(char *, uint64_t))(v15 - 8);
    v26[1] = v15 & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
    while (1)
    {
      uint64_t v18 = v10;
      unint64_t v19 = v31 * v13;
      uint64_t v20 = v14;
      v14(v9, *(void *)(v10 + 48) + v31 * v13, v6);
      lazy protocol witness table accessor for type AccessibilityPropertiesEntry<AccessibilityScrollableContext?> and conformance AccessibilityPropertiesEntry<A>(&lazy protocol witness table cache variable for type IndexPath and conformance IndexPath, MEMORY[0x1E4F27DE8]);
      char v21 = dispatch thunk of static Equatable.== infix(_:_:)();
      unint64_t v22 = *v17;
      (*v17)(v9, v6);
      if (v21) {
        break;
      }
      unint64_t v13 = (v13 + 1) & v30;
      uint64_t v10 = v18;
      uint64_t v14 = v20;
      if (((*(void *)(v32 + ((v13 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v13) & 1) == 0)
      {
        swift_bridgeObjectRelease();
        uint64_t v3 = v28;
        a1 = v29;
        uint64_t v7 = v27;
        goto LABEL_7;
      }
    }
    swift_bridgeObjectRelease();
    v22(v33, v6);
    v20(v29, *(void *)(*v28 + 48) + v19, v6);
    return 0;
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v14 = *(void (**)(void, void, void))(v7 + 16);
LABEL_7:
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v24 = v33;
    v14(v9, v33, v6);
    uint64_t v34 = *v3;
    *uint64_t v3 = 0x8000000000000000;
    specialized _NativeSet.insertNew(_:at:isUnique:)((uint64_t)v9, v13, isUniquelyReferenced_nonNull_native);
    *uint64_t v3 = v34;
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(a1, v24, v6);
    return 1;
  }
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  void (*v14)(void, void, void);
  uint64_t v15;
  void (*v16)(void, void, void);
  void (**v17)(char *, uint64_t);
  uint64_t v18;
  unint64_t v19;
  void (*v20)(void, void, void);
  char v21;
  void (*v22)(char *, uint64_t);
  char isUniquelyReferenced_nonNull_native;
  char *v24;
  void v26[2];
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;

  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for DateComponents();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v9 = (char *)v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *v2;
  lazy protocol witness table accessor for type AccessibilityPropertiesEntry<AccessibilityScrollableContext?> and conformance AccessibilityPropertiesEntry<A>((unint64_t *)&lazy protocol witness table cache variable for type DateComponents and conformance DateComponents, MEMORY[0x1E4F26F90]);
  swift_bridgeObjectRetain();
  char v33 = a2;
  uint64_t v11 = dispatch thunk of Hashable._rawHashValue(seed:)();
  uint64_t v12 = -1 << *(unsigned char *)(v10 + 32);
  unint64_t v13 = v11 & ~v12;
  uint64_t v32 = v10 + 56;
  if ((*(void *)(v10 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v13))
  {
    CGFloat v28 = v2;
    uint64_t v29 = a1;
    uint64_t v30 = ~v12;
    uint64_t v27 = v7;
    unint64_t v16 = *(void (**)(void, void, void))(v7 + 16);
    uint64_t v15 = v7 + 16;
    uint64_t v14 = v16;
    uint64_t v31 = *(void *)(v15 + 56);
    uint64_t v17 = (void (**)(char *, uint64_t))(v15 - 8);
    v26[1] = v15 & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
    while (1)
    {
      uint64_t v18 = v10;
      unint64_t v19 = v31 * v13;
      uint64_t v20 = v14;
      v14(v9, *(void *)(v10 + 48) + v31 * v13, v6);
      lazy protocol witness table accessor for type AccessibilityPropertiesEntry<AccessibilityScrollableContext?> and conformance AccessibilityPropertiesEntry<A>(&lazy protocol witness table cache variable for type DateComponents and conformance DateComponents, MEMORY[0x1E4F26F90]);
      char v21 = dispatch thunk of static Equatable.== infix(_:_:)();
      unint64_t v22 = *v17;
      (*v17)(v9, v6);
      if (v21) {
        break;
      }
      unint64_t v13 = (v13 + 1) & v30;
      uint64_t v10 = v18;
      uint64_t v14 = v20;
      if (((*(void *)(v32 + ((v13 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v13) & 1) == 0)
      {
        swift_bridgeObjectRelease();
        uint64_t v3 = v28;
        a1 = v29;
        uint64_t v7 = v27;
        goto LABEL_7;
      }
    }
    swift_bridgeObjectRelease();
    v22(v33, v6);
    v20(v29, *(void *)(*v28 + 48) + v19, v6);
    return 0;
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v14 = *(void (**)(void, void, void))(v7 + 16);
LABEL_7:
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v24 = v33;
    v14(v9, v33, v6);
    uint64_t v34 = *v3;
    *uint64_t v3 = 0x8000000000000000;
    specialized _NativeSet.insertNew(_:at:isUnique:)((uint64_t)v9, v13, isUniquelyReferenced_nonNull_native);
    *uint64_t v3 = v34;
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(a1, v24, v6);
    return 1;
  }
}

uint64_t specialized Set._Variant.insert(_:)(_DWORD *a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v5 = a4;
  unint64_t v6 = a3;
  unint64_t v7 = a2;
  unint64_t v8 = HIDWORD(a2);
  unint64_t v9 = HIDWORD(a3);
  unint64_t v10 = HIDWORD(a4);
  uint64_t v11 = *v4;
  Hasher.init(_seed:)();
  Hasher.combine(bytes:)();
  Hasher._combine(_:)(v10);
  Swift::Int v12 = Hasher._finalize()();
  uint64_t v13 = -1 << *(unsigned char *)(v11 + 32);
  unint64_t v14 = v12 & ~v13;
  if ((*(void *)(v11 + 56 + ((v14 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v14))
  {
    uint64_t v15 = ~v13;
    while (1)
    {
      unint64_t v16 = (int *)(*(void *)(v11 + 48) + 24 * v14);
      int v17 = *v16;
      int v18 = v16[1];
      int v19 = v16[2];
      int v20 = v16[3];
      int v22 = v16[4];
      int v21 = v16[5];
      BOOL v23 = v17 == v7 && v18 == v8;
      BOOL v24 = v23 && v19 == v6;
      BOOL v25 = v24 && v20 == v9;
      BOOL v26 = v25 && v22 == v5;
      if (v26 && v21 == v10) {
        break;
      }
      unint64_t v14 = (v14 + 1) & v15;
      if (((*(void *)(v11 + 56 + ((v14 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v14) & 1) == 0) {
        goto LABEL_20;
      }
    }
    uint64_t result = 0;
    uint64_t v30 = (_DWORD *)(*(void *)(*v4 + 48) + 24 * v14);
    LODWORD(v7) = *v30;
    LODWORD(v8) = v30[1];
    LODWORD(v6) = v30[2];
    LODWORD(v9) = v30[3];
    LODWORD(v5) = v30[4];
    LODWORD(v10) = v30[5];
  }
  else
  {
LABEL_20:
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v32 = *v4;
    *uint64_t v4 = 0x8000000000000000;
    specialized _NativeSet.insertNew(_:at:isUnique:)(v7, v6, v5, v14, isUniquelyReferenced_nonNull_native);
    *uint64_t v4 = v32;
    swift_bridgeObjectRelease();
    uint64_t result = 1;
  }
  *a1 = v7;
  a1[1] = v8;
  a1[2] = v6;
  a1[3] = v9;
  a1[4] = v5;
  a1[5] = v10;
  return result;
}

uint64_t specialized Set._Variant.insert(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v20 = a2;
  uint64_t v21 = a3;
  uint64_t v5 = *v3;
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  _ViewList_ID.Canonical.hash(into:)();
  Swift::Int v6 = Hasher._finalize()();
  uint64_t v7 = -1 << *(unsigned char *)(v5 + 32);
  unint64_t v8 = v6 & ~v7;
  if ((*(void *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v8))
  {
    uint64_t v9 = ~v7;
    while (1)
    {
      unint64_t v10 = (void *)(*(void *)(v5 + 48) + 16 * v8);
      uint64_t v11 = v10[1];
      v19[0] = *v10;
      v19[1] = v11;
      if (MEMORY[0x18C10D6E0](v19, &v20)) {
        break;
      }
      unint64_t v8 = (v8 + 1) & v9;
      if (((*(void *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v8) & 1) == 0) {
        goto LABEL_5;
      }
    }
    swift_bridgeObjectRelease();
    swift_release();
    int v17 = (void *)(*(void *)(*v3 + 48) + 16 * v8);
    uint64_t v18 = v17[1];
    *(void *)a1 = *v17;
    *(void *)(a1 + 8) = v18;
    swift_retain();
    return 0;
  }
  else
  {
LABEL_5:
    swift_bridgeObjectRelease();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v13 = v21;
    uint64_t v14 = v20;
    uint64_t v15 = HIDWORD(v20);
    v19[0] = *v3;
    *uint64_t v3 = 0x8000000000000000;
    swift_retain();
    specialized _NativeSet.insertNew(_:at:isUnique:)(v14 | (v15 << 32), v13, v8, isUniquelyReferenced_nonNull_native);
    *uint64_t v3 = v19[0];
    swift_bridgeObjectRelease();
    *(_DWORD *)a1 = v14;
    *(_DWORD *)(a1 + 4) = v15;
    uint64_t result = 1;
    *(void *)(a1 + 8) = v13;
  }
  return result;
}

Swift::Int specialized _NativeSet.init(_:capacity:)(uint64_t a1, uint64_t a2)
{
  return specialized _NativeSet.init(_:capacity:)(a1, a2, (unint64_t *)&lazy cache variable for type metadata for _SetStorage<UIOpenURLContext>, (unint64_t *)&lazy cache variable for type metadata for UIOpenURLContext, 0x1E4FB1A30, &lazy protocol witness table cache variable for type UIOpenURLContext and conformance NSObject);
}

{
  uint64_t v2;
  Swift::Int result;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  char v9;
  unint64_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  if (a2)
  {
    type metadata accessor for _SetStorage<NavigationStackHostingController<AnyView>>();
    Swift::String v2 = static _SetStorage.convert(_:capacity:)();
    uint64_t v14 = v2;
    __CocoaSet.makeIterator()();
    if (__CocoaSet.Iterator.next()())
    {
      type metadata accessor for _SetStorage<String>(0, &lazy cache variable for type metadata for NavigationStackHostingController<AnyView>, MEMORY[0x1E4F41618], MEMORY[0x1E4F41610], (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for NavigationStackHostingController);
      do
      {
        swift_dynamicCast();
        Swift::String v2 = v14;
        if (*(void *)(v14 + 24) <= *(void *)(v14 + 16))
        {
          specialized _NativeSet.resize(capacity:)();
          Swift::String v2 = v14;
        }
        uint64_t result = NSObject._rawHashValue(seed:)(*(void *)(v2 + 40));
        uint64_t v4 = v2 + 56;
        uint64_t v5 = -1 << *(unsigned char *)(v2 + 32);
        Swift::Int v6 = result & ~v5;
        uint64_t v7 = v6 >> 6;
        if (((-1 << v6) & ~*(void *)(v2 + 56 + 8 * (v6 >> 6))) != 0)
        {
          unint64_t v8 = __clz(__rbit64((-1 << v6) & ~*(void *)(v2 + 56 + 8 * (v6 >> 6)))) | v6 & 0x7FFFFFFFFFFFFFC0;
        }
        else
        {
          uint64_t v9 = 0;
          unint64_t v10 = (unint64_t)(63 - v5) >> 6;
          do
          {
            if (++v7 == v10 && (v9 & 1) != 0)
            {
              __break(1u);
              return result;
            }
            uint64_t v11 = v7 == v10;
            if (v7 == v10) {
              uint64_t v7 = 0;
            }
            v9 |= v11;
            Swift::Int v12 = *(void *)(v4 + 8 * v7);
          }
          while (v12 == -1);
          unint64_t v8 = __clz(__rbit64(~v12)) + (v7 << 6);
        }
        *(void *)(v4 + ((v8 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v8;
        *(void *)(*(void *)(v2 + 48) + 8 * v8) = v13;
        ++*(void *)(v2 + 16);
      }
      while (__CocoaSet.Iterator.next()());
    }
    swift_release();
  }
  else
  {
    swift_unknownObjectRelease();
    return MEMORY[0x1E4FBC870];
  }
  return v2;
}

Swift::Int specialized _NativeSet.init(_:capacity:)(uint64_t a1, uint64_t a2, unint64_t *a3, unint64_t *a4, uint64_t a5, unint64_t *a6)
{
  if (a2)
  {
    type metadata accessor for _SetStorage<UIOpenURLContext>(0, a3, a4, a5, a6);
    uint64_t v10 = static _SetStorage.convert(_:capacity:)();
    uint64_t v23 = v10;
    __CocoaSet.makeIterator()();
    if (__CocoaSet.Iterator.next()())
    {
      type metadata accessor for NSObject(0, a4);
      do
      {
        swift_dynamicCast();
        uint64_t v10 = v23;
        unint64_t v17 = *(void *)(v23 + 16);
        if (*(void *)(v23 + 24) <= v17)
        {
          specialized _NativeSet.resize(capacity:)(v17 + 1, a3, a4, a5, a6);
          uint64_t v10 = v23;
        }
        Swift::Int result = NSObject._rawHashValue(seed:)(*(void *)(v10 + 40));
        uint64_t v12 = v10 + 56;
        uint64_t v13 = -1 << *(unsigned char *)(v10 + 32);
        unint64_t v14 = result & ~v13;
        unint64_t v15 = v14 >> 6;
        if (((-1 << v14) & ~*(void *)(v10 + 56 + 8 * (v14 >> 6))) != 0)
        {
          unint64_t v16 = __clz(__rbit64((-1 << v14) & ~*(void *)(v10 + 56 + 8 * (v14 >> 6)))) | v14 & 0x7FFFFFFFFFFFFFC0;
        }
        else
        {
          char v18 = 0;
          unint64_t v19 = (unint64_t)(63 - v13) >> 6;
          do
          {
            if (++v15 == v19 && (v18 & 1) != 0)
            {
              __break(1u);
              return result;
            }
            BOOL v20 = v15 == v19;
            if (v15 == v19) {
              unint64_t v15 = 0;
            }
            v18 |= v20;
            uint64_t v21 = *(void *)(v12 + 8 * v15);
          }
          while (v21 == -1);
          unint64_t v16 = __clz(__rbit64(~v21)) + (v15 << 6);
        }
        *(void *)(v12 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
        *(void *)(*(void *)(v10 + 48) + 8 * v16) = v22;
        ++*(void *)(v10 + 16);
      }
      while (__CocoaSet.Iterator.next()());
    }
    swift_release();
  }
  else
  {
    swift_unknownObjectRelease();
    return MEMORY[0x1E4FBC870];
  }
  return v10;
}

uint64_t specialized _NativeSet.resize(capacity:)(uint64_t a1, unint64_t *a2, void (*a3)(void))
{
  uint64_t v4 = v3;
  uint64_t v5 = *v3;
  type metadata accessor for _SetStorage<_ViewList_ID.Canonical>(0, a2, a3);
  uint64_t result = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    int64_t v8 = 0;
    uint64_t v9 = (void *)(v5 + 56);
    uint64_t v10 = 1 << *(unsigned char *)(v5 + 32);
    if (v10 < 64) {
      uint64_t v11 = ~(-1 << v10);
    }
    else {
      uint64_t v11 = -1;
    }
    unint64_t v12 = v11 & *(void *)(v5 + 56);
    int64_t v13 = (unint64_t)(v10 + 63) >> 6;
    uint64_t v14 = result + 56;
    while (1)
    {
      if (v12)
      {
        unint64_t v16 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        unint64_t v17 = v16 | (v8 << 6);
      }
      else
      {
        int64_t v18 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v18 >= v13) {
          goto LABEL_33;
        }
        unint64_t v19 = v9[v18];
        ++v8;
        if (!v19)
        {
          int64_t v8 = v18 + 1;
          if (v18 + 1 >= v13) {
            goto LABEL_33;
          }
          unint64_t v19 = v9[v8];
          if (!v19)
          {
            int64_t v8 = v18 + 2;
            if (v18 + 2 >= v13) {
              goto LABEL_33;
            }
            unint64_t v19 = v9[v8];
            if (!v19)
            {
              int64_t v20 = v18 + 3;
              if (v20 >= v13)
              {
LABEL_33:
                uint64_t v29 = 1 << *(unsigned char *)(v5 + 32);
                if (v29 > 63) {
                  bzero((void *)(v5 + 56), ((unint64_t)(v29 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v9 = -1 << v29;
                }
                uint64_t v4 = v3;
                *(void *)(v5 + 16) = 0;
                break;
              }
              unint64_t v19 = v9[v20];
              if (!v19)
              {
                while (1)
                {
                  int64_t v8 = v20 + 1;
                  if (__OFADD__(v20, 1)) {
                    goto LABEL_39;
                  }
                  if (v8 >= v13) {
                    goto LABEL_33;
                  }
                  unint64_t v19 = v9[v8];
                  ++v20;
                  if (v19) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v8 = v20;
            }
          }
        }
LABEL_23:
        unint64_t v12 = (v19 - 1) & v19;
        unint64_t v17 = __clz(__rbit64(v19)) + (v8 << 6);
      }
      Swift::UInt v21 = *(void *)(*(void *)(v5 + 48) + 8 * v17);
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v21);
      uint64_t result = Hasher._finalize()();
      uint64_t v22 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v23 = result & ~v22;
      unint64_t v24 = v23 >> 6;
      if (((-1 << v23) & ~*(void *)(v14 + 8 * (v23 >> 6))) != 0)
      {
        unint64_t v15 = __clz(__rbit64((-1 << v23) & ~*(void *)(v14 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v25 = 0;
        unint64_t v26 = (unint64_t)(63 - v22) >> 6;
        do
        {
          if (++v24 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v27 = v24 == v26;
          if (v24 == v26) {
            unint64_t v24 = 0;
          }
          v25 |= v27;
          uint64_t v28 = *(void *)(v14 + 8 * v24);
        }
        while (v28 == -1);
        unint64_t v15 = __clz(__rbit64(~v28)) + (v24 << 6);
      }
      *(void *)(v14 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
      *(void *)(*(void *)(v7 + 48) + 8 * v15) = v21;
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v4 = v7;
  return result;
}

uint64_t specialized _NativeSet.resize(capacity:)(uint64_t a1)
{
  return specialized _NativeSet.resize(capacity:)(a1, (unint64_t *)&lazy cache variable for type metadata for _SetStorage<UIOpenURLContext>, (unint64_t *)&lazy cache variable for type metadata for UIOpenURLContext, 0x1E4FB1A30, &lazy protocol witness table cache variable for type UIOpenURLContext and conformance NSObject);
}

uint64_t specialized _NativeSet.resize(capacity:)(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t a4, unint64_t *a5)
{
  Swift::Int v6 = v5;
  uint64_t v7 = *v5;
  type metadata accessor for _SetStorage<UIOpenURLContext>(0, a2, a3, a4, a5);
  uint64_t v8 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v9 = v8;
  if (*(void *)(v7 + 16))
  {
    char v33 = v5;
    uint64_t v10 = 1 << *(unsigned char *)(v7 + 32);
    uint64_t v11 = (void *)(v7 + 56);
    if (v10 < 64) {
      uint64_t v12 = ~(-1 << v10);
    }
    else {
      uint64_t v12 = -1;
    }
    unint64_t v13 = v12 & *(void *)(v7 + 56);
    int64_t v14 = (unint64_t)(v10 + 63) >> 6;
    uint64_t v15 = v8 + 56;
    uint64_t result = swift_retain();
    int64_t v17 = 0;
    while (1)
    {
      if (v13)
      {
        unint64_t v19 = __clz(__rbit64(v13));
        v13 &= v13 - 1;
        unint64_t v20 = v19 | (v17 << 6);
      }
      else
      {
        int64_t v21 = v17 + 1;
        if (__OFADD__(v17, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v21 >= v14) {
          goto LABEL_33;
        }
        unint64_t v22 = v11[v21];
        ++v17;
        if (!v22)
        {
          int64_t v17 = v21 + 1;
          if (v21 + 1 >= v14) {
            goto LABEL_33;
          }
          unint64_t v22 = v11[v17];
          if (!v22)
          {
            int64_t v17 = v21 + 2;
            if (v21 + 2 >= v14) {
              goto LABEL_33;
            }
            unint64_t v22 = v11[v17];
            if (!v22)
            {
              int64_t v23 = v21 + 3;
              if (v23 >= v14)
              {
LABEL_33:
                swift_release();
                Swift::Int v6 = v33;
                uint64_t v32 = 1 << *(unsigned char *)(v7 + 32);
                if (v32 > 63) {
                  bzero((void *)(v7 + 56), ((unint64_t)(v32 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v11 = -1 << v32;
                }
                *(void *)(v7 + 16) = 0;
                break;
              }
              unint64_t v22 = v11[v23];
              if (!v22)
              {
                while (1)
                {
                  int64_t v17 = v23 + 1;
                  if (__OFADD__(v23, 1)) {
                    goto LABEL_39;
                  }
                  if (v17 >= v14) {
                    goto LABEL_33;
                  }
                  unint64_t v22 = v11[v17];
                  ++v23;
                  if (v22) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v17 = v23;
            }
          }
        }
LABEL_23:
        unint64_t v13 = (v22 - 1) & v22;
        unint64_t v20 = __clz(__rbit64(v22)) + (v17 << 6);
      }
      uint64_t v24 = *(void *)(*(void *)(v7 + 48) + 8 * v20);
      uint64_t result = NSObject._rawHashValue(seed:)(*(void *)(v9 + 40));
      uint64_t v25 = -1 << *(unsigned char *)(v9 + 32);
      unint64_t v26 = result & ~v25;
      unint64_t v27 = v26 >> 6;
      if (((-1 << v26) & ~*(void *)(v15 + 8 * (v26 >> 6))) != 0)
      {
        unint64_t v18 = __clz(__rbit64((-1 << v26) & ~*(void *)(v15 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v28 = 0;
        unint64_t v29 = (unint64_t)(63 - v25) >> 6;
        do
        {
          if (++v27 == v29 && (v28 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v30 = v27 == v29;
          if (v27 == v29) {
            unint64_t v27 = 0;
          }
          v28 |= v30;
          uint64_t v31 = *(void *)(v15 + 8 * v27);
        }
        while (v31 == -1);
        unint64_t v18 = __clz(__rbit64(~v31)) + (v27 << 6);
      }
      *(void *)(v15 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
      *(void *)(*(void *)(v9 + 48) + 8 * v18) = v24;
      ++*(void *)(v9 + 16);
    }
  }
  uint64_t result = swift_release();
  *Swift::Int v6 = v9;
  return result;
}

unint64_t specialized _NativeSet._unsafeInsertNew(_:)(uint64_t a1, void *a2)
{
  NSObject._rawHashValue(seed:)(a2[5]);
  unint64_t result = _HashTable.nextHole(atOrAfter:)();
  *(void *)((char *)a2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 56) |= 1 << result;
  *(void *)(a2[6] + 8 * result) = a1;
  ++a2[2];
  return result;
}

Swift::Int specialized _NativeSet.insertNew(_:at:isUnique:)(Swift::Int result, Swift::UInt a2, unint64_t a3, char a4)
{
  Swift::UInt v7 = result;
  unint64_t v8 = *(void *)(*v4 + 16);
  unint64_t v9 = *(void *)(*v4 + 24);
  if (v9 <= v8 || (a4 & 1) == 0)
  {
    if (a4)
    {
      specialized _NativeSet.resize(capacity:)();
    }
    else
    {
      if (v9 > v8)
      {
        unint64_t result = (Swift::Int)specialized _NativeSet.copy()();
        goto LABEL_15;
      }
      specialized _NativeSet.copyAndResize(capacity:)();
    }
    uint64_t v10 = *v4;
    Hasher.init(_seed:)();
    Hasher._combine(_:)(v7);
    Hasher._combine(_:)(a2);
    unint64_t result = Hasher._finalize()();
    uint64_t v11 = -1 << *(unsigned char *)(v10 + 32);
    a3 = result & ~v11;
    if ((*(void *)(v10 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a3))
    {
      uint64_t v12 = ~v11;
      while (1)
      {
        unint64_t v13 = (void *)(*(void *)(v10 + 48) + 16 * a3);
        if (v13[1] == a2 && *v13 == v7) {
          break;
        }
        a3 = (a3 + 1) & v12;
        if (((*(void *)(v10 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a3) & 1) == 0) {
          goto LABEL_15;
        }
      }
LABEL_18:
      ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
      JUMPOUT(0x18822B68CLL);
    }
  }
LABEL_15:
  uint64_t v15 = *v4;
  *(void *)(*v4 + 8 * (a3 >> 6) + 56) |= 1 << a3;
  unint64_t v16 = (Swift::UInt *)(*(void *)(v15 + 48) + 16 * a3);
  *unint64_t v16 = v7;
  v16[1] = a2;
  uint64_t v17 = *(void *)(v15 + 16);
  BOOL v18 = __OFADD__(v17, 1);
  uint64_t v19 = v17 + 1;
  if (v18)
  {
    __break(1u);
    goto LABEL_18;
  }
  *(void *)(v15 + 16) = v19;
  return result;
}

Swift::Int specialized _NativeSet.insertNew(_:at:isUnique:)(Swift::Int result, unint64_t a2, char a3, unint64_t *a4, void (*a5)(void))
{
  Swift::UInt v7 = result;
  unint64_t v8 = *(void *)(*v5 + 16);
  unint64_t v9 = *(void *)(*v5 + 24);
  if (v9 > v8 && (a3 & 1) != 0) {
    goto LABEL_14;
  }
  uint64_t v10 = v8 + 1;
  if (a3)
  {
    specialized _NativeSet.resize(capacity:)(v10, a4, a5);
  }
  else
  {
    if (v9 > v8)
    {
      unint64_t result = (Swift::Int)specialized _NativeSet.copy()(a4, a5);
      goto LABEL_14;
    }
    specialized _NativeSet.copyAndResize(capacity:)(v10, a4, a5);
  }
  uint64_t v11 = *v5;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v7);
  unint64_t result = Hasher._finalize()();
  uint64_t v12 = -1 << *(unsigned char *)(v11 + 32);
  a2 = result & ~v12;
  if ((*(void *)(v11 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    uint64_t v13 = *(void *)(v11 + 48);
    if (*(void *)(v13 + 8 * a2) == v7)
    {
LABEL_13:
      unint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    else
    {
      uint64_t v14 = ~v12;
      while (1)
      {
        a2 = (a2 + 1) & v14;
        if (((*(void *)(v11 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) == 0) {
          break;
        }
        if (*(void *)(v13 + 8 * a2) == v7) {
          goto LABEL_13;
        }
      }
    }
  }
LABEL_14:
  uint64_t v15 = *v5;
  *(void *)(*v5 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(void *)(*(void *)(v15 + 48) + 8 * a2) = v7;
  uint64_t v16 = *(void *)(v15 + 16);
  BOOL v17 = __OFADD__(v16, 1);
  uint64_t v18 = v16 + 1;
  if (v17) {
    __break(1u);
  }
  else {
    *(void *)(v15 + 16) = v18;
  }
  return result;
}

unint64_t specialized _NativeSet.insertNew(_:at:isUnique:)(unint64_t result, unint64_t a2, unint64_t a3, unint64_t a4, char a5)
{
  int v7 = a3;
  int v8 = a2;
  int v9 = result;
  unint64_t v10 = HIDWORD(result);
  unint64_t v11 = HIDWORD(a2);
  unint64_t v12 = HIDWORD(a3);
  unint64_t v13 = *(void *)(*v5 + 16);
  unint64_t v14 = *(void *)(*v5 + 24);
  if (v14 > v13 && (a5 & 1) != 0)
  {
LABEL_27:
    uint64_t v30 = *v5;
    *(void *)(*v5 + 8 * (a4 >> 6) + 56) |= 1 << a4;
    uint64_t v31 = (_DWORD *)(*(void *)(v30 + 48) + 24 * a4);
    *uint64_t v31 = v9;
    v31[1] = v10;
    v31[2] = v8;
    v31[3] = v11;
    v31[4] = v7;
    v31[5] = v12;
    uint64_t v32 = *(void *)(v30 + 16);
    BOOL v33 = __OFADD__(v32, 1);
    uint64_t v34 = v32 + 1;
    if (v33) {
      __break(1u);
    }
    *(void *)(v30 + 16) = v34;
    return result;
  }
  if (a5)
  {
    specialized _NativeSet.resize(capacity:)();
    goto LABEL_8;
  }
  if (v14 > v13)
  {
    unint64_t result = (unint64_t)specialized _NativeSet.copy()();
    goto LABEL_27;
  }
  specialized _NativeSet.copyAndResize(capacity:)();
LABEL_8:
  uint64_t v15 = *v5;
  Hasher.init(_seed:)();
  Hasher.combine(bytes:)();
  Hasher._combine(_:)(v12);
  unint64_t result = Hasher._finalize()();
  uint64_t v16 = -1 << *(unsigned char *)(v15 + 32);
  a4 = result & ~v16;
  if (((*(void *)(v15 + 56 + ((a4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a4) & 1) == 0) {
    goto LABEL_27;
  }
  uint64_t v17 = ~v16;
  while (1)
  {
    uint64_t v18 = (int *)(*(void *)(v15 + 48) + 24 * a4);
    int v19 = *v18;
    int v20 = v18[1];
    int v21 = v18[2];
    int v22 = v18[3];
    int v24 = v18[4];
    int v23 = v18[5];
    BOOL v25 = v19 == v9 && v20 == v10;
    BOOL v26 = v25 && v21 == v8;
    BOOL v27 = v26 && v22 == v11;
    BOOL v28 = v27 && v24 == v7;
    if (v28 && v23 == v12) {
      break;
    }
    a4 = (a4 + 1) & v17;
    if (((*(void *)(v15 + 56 + ((a4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a4) & 1) == 0) {
      goto LABEL_27;
    }
  }
  unint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

unint64_t specialized _NativeSet.insertNew(_:at:isUnique:)(unint64_t result, uint64_t a2, unint64_t a3, char a4)
{
  int v7 = result;
  unint64_t v8 = HIDWORD(result);
  v22[0] = result;
  v22[1] = a2;
  unint64_t v9 = *(void *)(*v4 + 16);
  unint64_t v10 = *(void *)(*v4 + 24);
  if (v10 > v9 && (a4 & 1) != 0) {
    goto LABEL_12;
  }
  if (a4)
  {
    specialized _NativeSet.resize(capacity:)();
  }
  else
  {
    if (v10 > v9)
    {
      unint64_t result = (unint64_t)specialized _NativeSet.copy()();
      goto LABEL_12;
    }
    specialized _NativeSet.copyAndResize(capacity:)();
  }
  uint64_t v11 = *v4;
  Hasher.init(_seed:)();
  _ViewList_ID.Canonical.hash(into:)();
  unint64_t result = Hasher._finalize()();
  uint64_t v12 = -1 << *(unsigned char *)(v11 + 32);
  a3 = result & ~v12;
  if ((*(void *)(v11 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a3))
  {
    uint64_t v13 = ~v12;
    do
    {
      unint64_t v14 = (void *)(*(void *)(v11 + 48) + 16 * a3);
      uint64_t v15 = v14[1];
      v21[0] = *v14;
      v21[1] = v15;
      unint64_t result = MEMORY[0x18C10D6E0](v21, v22);
      if (result) {
        goto LABEL_15;
      }
      a3 = (a3 + 1) & v13;
    }
    while (((*(void *)(v11 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a3) & 1) != 0);
  }
LABEL_12:
  uint64_t v16 = *v4;
  *(void *)(*v4 + 8 * (a3 >> 6) + 56) |= 1 << a3;
  uint64_t v17 = *(void *)(v16 + 48) + 16 * a3;
  *(_DWORD *)uint64_t v17 = v7;
  *(_DWORD *)(v17 + 4) = v8;
  *(void *)(v17 + 8) = a2;
  uint64_t v18 = *(void *)(v16 + 16);
  BOOL v19 = __OFADD__(v18, 1);
  uint64_t v20 = v18 + 1;
  if (!v19)
  {
    *(void *)(v16 + 16) = v20;
    return result;
  }
  __break(1u);
LABEL_15:
  unint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

void *specialized _NativeSet.copy()(unint64_t *a1, void (*a2)(void))
{
  uint64_t v3 = v2;
  type metadata accessor for _SetStorage<_ViewList_ID.Canonical>(0, a1, a2);
  uint64_t v4 = *v2;
  uint64_t v5 = static _SetStorage.copy(original:)();
  uint64_t v6 = v5;
  if (!*(void *)(v4 + 16))
  {
LABEL_28:
    unint64_t result = (void *)swift_release();
    *uint64_t v3 = v6;
    return result;
  }
  unint64_t result = (void *)(v5 + 56);
  uint64_t v8 = v4 + 56;
  unint64_t v9 = (unint64_t)((1 << *(unsigned char *)(v6 + 32)) + 63) >> 6;
  if (v6 != v4 || (unint64_t)result >= v4 + 56 + 8 * v9) {
    unint64_t result = memmove(result, (const void *)(v4 + 56), 8 * v9);
  }
  int64_t v11 = 0;
  *(void *)(v6 + 16) = *(void *)(v4 + 16);
  uint64_t v12 = 1 << *(unsigned char *)(v4 + 32);
  uint64_t v13 = -1;
  if (v12 < 64) {
    uint64_t v13 = ~(-1 << v12);
  }
  unint64_t v14 = v13 & *(void *)(v4 + 56);
  int64_t v15 = (unint64_t)(v12 + 63) >> 6;
  while (1)
  {
    if (v14)
    {
      unint64_t v16 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      unint64_t v17 = v16 | (v11 << 6);
      goto LABEL_12;
    }
    int64_t v18 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v18 >= v15) {
      goto LABEL_28;
    }
    unint64_t v19 = *(void *)(v8 + 8 * v18);
    ++v11;
    if (!v19)
    {
      int64_t v11 = v18 + 1;
      if (v18 + 1 >= v15) {
        goto LABEL_28;
      }
      unint64_t v19 = *(void *)(v8 + 8 * v11);
      if (!v19)
      {
        int64_t v11 = v18 + 2;
        if (v18 + 2 >= v15) {
          goto LABEL_28;
        }
        unint64_t v19 = *(void *)(v8 + 8 * v11);
        if (!v19) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v14 = (v19 - 1) & v19;
    unint64_t v17 = __clz(__rbit64(v19)) + (v11 << 6);
LABEL_12:
    *(void *)(*(void *)(v6 + 48) + 8 * v17) = *(void *)(*(void *)(v4 + 48) + 8 * v17);
  }
  int64_t v20 = v18 + 3;
  if (v20 >= v15) {
    goto LABEL_28;
  }
  unint64_t v19 = *(void *)(v8 + 8 * v20);
  if (v19)
  {
    int64_t v11 = v20;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v11 = v20 + 1;
    if (__OFADD__(v20, 1)) {
      break;
    }
    if (v11 >= v15) {
      goto LABEL_28;
    }
    unint64_t v19 = *(void *)(v8 + 8 * v11);
    ++v20;
    if (v19) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

id specialized _NativeSet.copy()()
{
  return specialized _NativeSet.copy()((unint64_t *)&lazy cache variable for type metadata for _SetStorage<UIOpenURLContext>, (unint64_t *)&lazy cache variable for type metadata for UIOpenURLContext, 0x1E4FB1A30, &lazy protocol witness table cache variable for type UIOpenURLContext and conformance NSObject);
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;

  uint64_t v1 = v0;
  type metadata accessor for _SetStorage<NavigationStackHostingController<AnyView>>();
  Swift::String v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    unint64_t result = (id)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  unint64_t result = (id)(v3 + 56);
  uint64_t v6 = v2 + 56;
  int v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    unint64_t result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  unint64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  unint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  int64_t v11 = -1;
  if (v10 < 64) {
    int64_t v11 = ~(-1 << v10);
  }
  uint64_t v12 = v11 & *(void *)(v2 + 56);
  uint64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      int64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v18 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v18 >= v13) {
      goto LABEL_28;
    }
    unint64_t v19 = *(void *)(v6 + 8 * v18);
    ++v9;
    if (!v19)
    {
      unint64_t v9 = v18 + 1;
      if (v18 + 1 >= v13) {
        goto LABEL_28;
      }
      unint64_t v19 = *(void *)(v6 + 8 * v9);
      if (!v19)
      {
        unint64_t v9 = v18 + 2;
        if (v18 + 2 >= v13) {
          goto LABEL_28;
        }
        unint64_t v19 = *(void *)(v6 + 8 * v9);
        if (!v19) {
          break;
        }
      }
    }
LABEL_27:
    uint64_t v12 = (v19 - 1) & v19;
    int64_t v15 = __clz(__rbit64(v19)) + (v9 << 6);
LABEL_12:
    unint64_t v16 = 8 * v15;
    unint64_t v17 = *(void **)(*(void *)(v2 + 48) + v16);
    *(void *)(*(void *)(v4 + 48) + v16) = v17;
    unint64_t result = v17;
  }
  int64_t v20 = v18 + 3;
  if (v20 >= v13) {
    goto LABEL_28;
  }
  unint64_t v19 = *(void *)(v6 + 8 * v20);
  if (v19)
  {
    unint64_t v9 = v20;
    goto LABEL_27;
  }
  while (1)
  {
    unint64_t v9 = v20 + 1;
    if (__OFADD__(v20, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    unint64_t v19 = *(void *)(v6 + 8 * v9);
    ++v20;
    if (v19) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

void *specialized _NativeSet.copy()(uint64_t (*a1)(void), void (*a2)(void, double))
{
  uint64_t v4 = v2;
  uint64_t v5 = a1(0);
  uint64_t v6 = *(void *)(v5 - 8);
  double v7 = MEMORY[0x1F4188790](v5);
  unint64_t v9 = (char *)&v26 - v8;
  a2(0, v7);
  uint64_t v10 = *v2;
  uint64_t v11 = static _SetStorage.copy(original:)();
  uint64_t v12 = v11;
  if (!*(void *)(v10 + 16))
  {
    unint64_t result = (void *)swift_release();
LABEL_30:
    *uint64_t v4 = v12;
    return result;
  }
  unint64_t result = (void *)(v11 + 56);
  unint64_t v14 = (unint64_t)((1 << *(unsigned char *)(v12 + 32)) + 63) >> 6;
  BOOL v27 = v4;
  BOOL v28 = (const void *)(v10 + 56);
  if (v12 != v10 || (unint64_t)result >= v10 + 56 + 8 * v14) {
    unint64_t result = memmove(result, v28, 8 * v14);
  }
  int64_t v16 = 0;
  *(void *)(v12 + 16) = *(void *)(v10 + 16);
  uint64_t v17 = 1 << *(unsigned char *)(v10 + 32);
  uint64_t v18 = -1;
  if (v17 < 64) {
    uint64_t v18 = ~(-1 << v17);
  }
  unint64_t v19 = v18 & *(void *)(v10 + 56);
  int64_t v29 = (unint64_t)(v17 + 63) >> 6;
  while (1)
  {
    if (v19)
    {
      unint64_t v20 = __clz(__rbit64(v19));
      v19 &= v19 - 1;
      unint64_t v21 = v20 | (v16 << 6);
      goto LABEL_12;
    }
    int64_t v23 = v16 + 1;
    if (__OFADD__(v16, 1))
    {
      __break(1u);
      goto LABEL_32;
    }
    if (v23 >= v29) {
      goto LABEL_28;
    }
    unint64_t v24 = *((void *)v28 + v23);
    ++v16;
    if (!v24)
    {
      int64_t v16 = v23 + 1;
      if (v23 + 1 >= v29) {
        goto LABEL_28;
      }
      unint64_t v24 = *((void *)v28 + v16);
      if (!v24)
      {
        int64_t v16 = v23 + 2;
        if (v23 + 2 >= v29) {
          goto LABEL_28;
        }
        unint64_t v24 = *((void *)v28 + v16);
        if (!v24) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v19 = (v24 - 1) & v24;
    unint64_t v21 = __clz(__rbit64(v24)) + (v16 << 6);
LABEL_12:
    unint64_t v22 = *(void *)(v6 + 72) * v21;
    (*(void (**)(char *, unint64_t, uint64_t))(v6 + 16))(v9, *(void *)(v10 + 48) + v22, v5);
    unint64_t result = (void *)(*(uint64_t (**)(unint64_t, char *, uint64_t))(v6 + 32))(*(void *)(v12 + 48) + v22, v9, v5);
  }
  int64_t v25 = v23 + 3;
  if (v25 >= v29)
  {
LABEL_28:
    unint64_t result = (void *)swift_release();
    uint64_t v4 = v27;
    goto LABEL_30;
  }
  unint64_t v24 = *((void *)v28 + v25);
  if (v24)
  {
    int64_t v16 = v25;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v16 = v25 + 1;
    if (__OFADD__(v25, 1)) {
      break;
    }
    if (v16 >= v29) {
      goto LABEL_28;
    }
    unint64_t v24 = *((void *)v28 + v16);
    ++v25;
    if (v24) {
      goto LABEL_27;
    }
  }
LABEL_32:
  __break(1u);
  return result;
}

id specialized _NativeSet.copy()(unint64_t *a1, unint64_t *a2, uint64_t a3, unint64_t *a4)
{
  uint64_t v5 = v4;
  type metadata accessor for _SetStorage<UIOpenURLContext>(0, a1, a2, a3, a4);
  uint64_t v6 = *v4;
  uint64_t v7 = static _SetStorage.copy(original:)();
  uint64_t v8 = v7;
  if (!*(void *)(v6 + 16))
  {
LABEL_28:
    id result = (id)swift_release();
    *uint64_t v5 = v8;
    return result;
  }
  id result = (id)(v7 + 56);
  uint64_t v10 = v6 + 56;
  unint64_t v11 = (unint64_t)((1 << *(unsigned char *)(v8 + 32)) + 63) >> 6;
  if (v8 != v6 || (unint64_t)result >= v6 + 56 + 8 * v11) {
    id result = memmove(result, (const void *)(v6 + 56), 8 * v11);
  }
  int64_t v13 = 0;
  *(void *)(v8 + 16) = *(void *)(v6 + 16);
  uint64_t v14 = 1 << *(unsigned char *)(v6 + 32);
  uint64_t v15 = -1;
  if (v14 < 64) {
    uint64_t v15 = ~(-1 << v14);
  }
  unint64_t v16 = v15 & *(void *)(v6 + 56);
  int64_t v17 = (unint64_t)(v14 + 63) >> 6;
  while (1)
  {
    if (v16)
    {
      unint64_t v18 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      unint64_t v19 = v18 | (v13 << 6);
      goto LABEL_12;
    }
    int64_t v22 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v22 >= v17) {
      goto LABEL_28;
    }
    unint64_t v23 = *(void *)(v10 + 8 * v22);
    ++v13;
    if (!v23)
    {
      int64_t v13 = v22 + 1;
      if (v22 + 1 >= v17) {
        goto LABEL_28;
      }
      unint64_t v23 = *(void *)(v10 + 8 * v13);
      if (!v23)
      {
        int64_t v13 = v22 + 2;
        if (v22 + 2 >= v17) {
          goto LABEL_28;
        }
        unint64_t v23 = *(void *)(v10 + 8 * v13);
        if (!v23) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v16 = (v23 - 1) & v23;
    unint64_t v19 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_12:
    uint64_t v20 = 8 * v19;
    unint64_t v21 = *(void **)(*(void *)(v6 + 48) + v20);
    *(void *)(*(void *)(v8 + 48) + v20) = v21;
    id result = v21;
  }
  int64_t v24 = v22 + 3;
  if (v24 >= v17) {
    goto LABEL_28;
  }
  unint64_t v23 = *(void *)(v10 + 8 * v24);
  if (v23)
  {
    int64_t v13 = v24;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v13 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v13 >= v17) {
      goto LABEL_28;
    }
    unint64_t v23 = *(void *)(v10 + 8 * v13);
    ++v24;
    if (v23) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

uint64_t specialized _NativeSet.copyAndResize(capacity:)(uint64_t a1, unint64_t *a2, void (*a3)(void))
{
  uint64_t v4 = v3;
  uint64_t v5 = *v3;
  type metadata accessor for _SetStorage<_ViewList_ID.Canonical>(0, a2, a3);
  uint64_t result = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v7 = result;
  if (!*(void *)(v5 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    *uint64_t v4 = v7;
    return result;
  }
  int64_t v8 = 0;
  uint64_t v9 = v5 + 56;
  uint64_t v10 = 1 << *(unsigned char *)(v5 + 32);
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  else {
    uint64_t v11 = -1;
  }
  unint64_t v12 = v11 & *(void *)(v5 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  uint64_t v14 = result + 56;
  while (1)
  {
    if (v12)
    {
      unint64_t v16 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v17 = v16 | (v8 << 6);
      goto LABEL_24;
    }
    int64_t v18 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v18 >= v13) {
      goto LABEL_33;
    }
    unint64_t v19 = *(void *)(v9 + 8 * v18);
    ++v8;
    if (!v19)
    {
      int64_t v8 = v18 + 1;
      if (v18 + 1 >= v13) {
        goto LABEL_33;
      }
      unint64_t v19 = *(void *)(v9 + 8 * v8);
      if (!v19)
      {
        int64_t v8 = v18 + 2;
        if (v18 + 2 >= v13) {
          goto LABEL_33;
        }
        unint64_t v19 = *(void *)(v9 + 8 * v8);
        if (!v19) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v12 = (v19 - 1) & v19;
    unint64_t v17 = __clz(__rbit64(v19)) + (v8 << 6);
LABEL_24:
    Swift::UInt v21 = *(void *)(*(void *)(v5 + 48) + 8 * v17);
    Hasher.init(_seed:)();
    Hasher._combine(_:)(v21);
    uint64_t result = Hasher._finalize()();
    uint64_t v22 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v23 = result & ~v22;
    unint64_t v24 = v23 >> 6;
    if (((-1 << v23) & ~*(void *)(v14 + 8 * (v23 >> 6))) != 0)
    {
      unint64_t v15 = __clz(__rbit64((-1 << v23) & ~*(void *)(v14 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v25 = 0;
      unint64_t v26 = (unint64_t)(63 - v22) >> 6;
      do
      {
        if (++v24 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        BOOL v27 = v24 == v26;
        if (v24 == v26) {
          unint64_t v24 = 0;
        }
        v25 |= v27;
        uint64_t v28 = *(void *)(v14 + 8 * v24);
      }
      while (v28 == -1);
      unint64_t v15 = __clz(__rbit64(~v28)) + (v24 << 6);
    }
    *(void *)(v14 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
    *(void *)(*(void *)(v7 + 48) + 8 * v15) = v21;
    ++*(void *)(v7 + 16);
  }
  int64_t v20 = v18 + 3;
  if (v20 >= v13)
  {
LABEL_33:
    uint64_t result = swift_release();
    uint64_t v4 = v3;
    goto LABEL_35;
  }
  unint64_t v19 = *(void *)(v9 + 8 * v20);
  if (v19)
  {
    int64_t v8 = v20;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v8 = v20 + 1;
    if (__OFADD__(v20, 1)) {
      break;
    }
    if (v8 >= v13) {
      goto LABEL_33;
    }
    unint64_t v19 = *(void *)(v9 + 8 * v8);
    ++v20;
    if (v19) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_188232008()
{
  if (*(unsigned __int8 *)(v0 + 86) != 255)
  {
    unint64_t v1 = (*(unsigned int *)(v0 + 80) | ((unint64_t)((*(unsigned __int16 *)(v0 + 84) | (*(unsigned __int8 *)(v0 + 86) << 16)) & 0xFFFFFF) << 32)) >> 48;
    if (v1 != 2)
    {
      if (v1 == 1)
      {
LABEL_6:
        swift_release();
        goto LABEL_7;
      }
      if (v1) {
        goto LABEL_7;
      }
    }
    __swift_destroy_boxed_opaque_existential_1(v0 + 16);
    goto LABEL_6;
  }
LABEL_7:

  return swift_deallocObject();
}

uint64_t outlined init with copy of HashableWeakBox<Swift.AnyObject>(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t a4, uint64_t (*a5)(void, uint64_t))
{
  _sSay7SwiftUI25_LazyLayout_PlacedSubviewVGMaTm_3(0, a3, a4, a5);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 16))(a2, a1, v7);
  return a2;
}

void type metadata accessor for _SetStorage<UIOpenURLContext>(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t a4, unint64_t *a5)
{
  if (!*a2)
  {
    type metadata accessor for NSObject(255, a3);
    lazy protocol witness table accessor for type UIScene and conformance NSObject(a5, a3);
    unint64_t v8 = type metadata accessor for _SetStorage();
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

uint64_t partial apply for closure #1 in scroll #1 () in AccessibilityNode.scroll(toCollectionViewID:in:)@<X0>(unsigned char *a1@<X8>)
{
  return closure #1 in scroll #1 () in AccessibilityNode.scroll(toCollectionViewID:in:)(*(void **)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), a1);
}

void type metadata accessor for _SetStorage<DateComponents>()
{
  if (!lazy cache variable for type metadata for _SetStorage<DateComponents>)
  {
    type metadata accessor for DateComponents();
    lazy protocol witness table accessor for type AccessibilityPropertiesEntry<AccessibilityScrollableContext?> and conformance AccessibilityPropertiesEntry<A>((unint64_t *)&lazy protocol witness table cache variable for type DateComponents and conformance DateComponents, MEMORY[0x1E4F26F90]);
    unint64_t v0 = type metadata accessor for _SetStorage();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _SetStorage<DateComponents>);
    }
  }
}

void type metadata accessor for _SetStorage<IndexPath>()
{
  if (!lazy cache variable for type metadata for _SetStorage<IndexPath>)
  {
    type metadata accessor for IndexPath();
    lazy protocol witness table accessor for type AccessibilityPropertiesEntry<AccessibilityScrollableContext?> and conformance AccessibilityPropertiesEntry<A>(&lazy protocol witness table cache variable for type IndexPath and conformance IndexPath, MEMORY[0x1E4F27DE8]);
    unint64_t v0 = type metadata accessor for _SetStorage();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _SetStorage<IndexPath>);
    }
  }
}

void type metadata accessor for _SetStorage<URL>()
{
  if (!lazy cache variable for type metadata for _SetStorage<URL>)
  {
    type metadata accessor for URL();
    lazy protocol witness table accessor for type AccessibilityPropertiesEntry<AccessibilityScrollableContext?> and conformance AccessibilityPropertiesEntry<A>(&lazy protocol witness table cache variable for type URL and conformance URL, MEMORY[0x1E4F276F0]);
    unint64_t v0 = type metadata accessor for _SetStorage();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _SetStorage<URL>);
    }
  }
}

void type metadata accessor for _SetStorage<UTType>()
{
  if (!lazy cache variable for type metadata for _SetStorage<UTType>)
  {
    type metadata accessor for UTType();
    lazy protocol witness table accessor for type AccessibilityPropertiesEntry<AccessibilityScrollableContext?> and conformance AccessibilityPropertiesEntry<A>(&lazy protocol witness table cache variable for type UTType and conformance UTType, MEMORY[0x1E4FBCEA8]);
    unint64_t v0 = type metadata accessor for _SetStorage();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _SetStorage<UTType>);
    }
  }
}

uint64_t outlined destroy of CommandGroupPlacementBox(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for CommandGroupPlacementBox(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void type metadata accessor for _SetStorage<CommandGroupPlacementBox>()
{
  if (!lazy cache variable for type metadata for _SetStorage<CommandGroupPlacementBox>)
  {
    type metadata accessor for CommandGroupPlacementBox(255);
    lazy protocol witness table accessor for type AccessibilityPropertiesEntry<AccessibilityScrollableContext?> and conformance AccessibilityPropertiesEntry<A>(&lazy protocol witness table cache variable for type CommandGroupPlacementBox and conformance CommandGroupPlacementBox, (void (*)(uint64_t))type metadata accessor for CommandGroupPlacementBox);
    unint64_t v0 = type metadata accessor for _SetStorage();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _SetStorage<CommandGroupPlacementBox>);
    }
  }
}

uint64_t assignWithCopy for LayoutScrollableTransform(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(unsigned char *)(a1 + 1) = *(unsigned char *)(a2 + 1);
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for LayoutScrollableTransform(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(unsigned char *)(a1 + 1) = *(unsigned char *)(a2 + 1);
  *(_OWORD *)(a1 + 4) = *(_OWORD *)(a2 + 4);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRelease();
  return a1;
}

void *type metadata accessor for LayoutScrollableTransform()
{
  return &unk_1ED447098;
}

uint64_t assignWithCopy for AccessibilityScrollableModifier(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for AccessibilityScrollableModifier(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for AccessibilityScrollableModifier()
{
  return &type metadata for AccessibilityScrollableModifier;
}

uint64_t assignWithTake for AccessibilityScrollableContextModifier(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    outlined destroy of AccessibilityScrollableContext(a1);
    long long v4 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 48) = v4;
    *(void *)(a1 + 63) = *(void *)(a2 + 63);
    long long v5 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v5;
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for AccessibilityScrollableContextModifier(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFE && *(unsigned char *)(a1 + 71)) {
    return (*(_DWORD *)a1 + 254);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 70);
  if (v3 <= 2) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for AccessibilityScrollableContextModifier(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(void *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 70) = 0;
    *(_WORD *)(result + 68) = 0;
    *(_DWORD *)(result + 64) = 0;
    *(void *)uint64_t result = a2 - 254;
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 71) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 71) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 70) = -(char)a2;
    }
  }
  return result;
}

uint64_t DefaultGaugeStyle.makeBody(configuration:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *a1;
  char v4 = *((unsigned char *)a1 + 8);
  char v5 = *((unsigned char *)a1 + 9);
  char v6 = *((unsigned char *)a1 + 10);
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t result = swift_getKeyPath();
  *(void *)a2 = v3;
  *(unsigned char *)(a2 + 8) = v4;
  *(unsigned char *)(a2 + 9) = v5;
  *(unsigned char *)(a2 + 10) = v6;
  *(void *)(a2 + 16) = KeyPath;
  *(unsigned char *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = result;
  *(unsigned char *)(a2 + 40) = 0;
  return result;
}

uint64_t associated type witness table accessor for GaugeStyle.Body : View in DefaultGaugeStyle()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t protocol witness for GaugeStyle.makeBody(configuration:) in conformance DefaultGaugeStyle@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *a1;
  char v4 = *((unsigned char *)a1 + 8);
  char v5 = *((unsigned char *)a1 + 9);
  char v6 = *((unsigned char *)a1 + 10);
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t result = swift_getKeyPath();
  *(void *)a2 = v3;
  *(unsigned char *)(a2 + 8) = v4;
  *(unsigned char *)(a2 + 9) = v5;
  *(unsigned char *)(a2 + 10) = v6;
  *(void *)(a2 + 16) = KeyPath;
  *(unsigned char *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = result;
  *(unsigned char *)(a2 + 40) = 0;
  return result;
}

ValueMetadata *type metadata accessor for DefaultGaugeStyle()
{
  return &type metadata for DefaultGaugeStyle;
}

uint64_t ContextMenuPreviewDestinationModifier.init(menuView:preview:destination:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a4 - 8) + 32))(a7, a1, a4);
  uint64_t v12 = type metadata accessor for ContextMenuPreviewDestinationModifier();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a5 - 8) + 32))(a7 + *(int *)(v12 + 68), a2, a5);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a6 - 8) + 32))(a7 + *(int *)(v12 + 72), a3, a6);
}

uint64_t ContextMenuPreviewResponder.__allocating_init(inputs:space:itemList:displayList:)(uint64_t *a1, uint64_t *a2)
{
  return ContextMenuPreviewResponder.init(inputs:space:itemList:displayList:)(a1, a2);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance ContextMenuPreviewModifierCore<A, B>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F40FF3A0](a1, a2, a3, a4, a5, WitnessTable);
}

uint64_t ContextMenuPreviewResponderFilter.updateValue()(uint64_t a1)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a1 + 24);
  uint64_t v3 = type metadata accessor for Optional();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  char v6 = (char *)&v31 - v5;
  long long v7 = *(_OWORD *)(v1 + 16);
  v35[0] = *(_OWORD *)v1;
  v35[1] = v7;
  v35[2] = *(_OWORD *)(v1 + 32);
  uint64_t v36 = *(void *)(v1 + 48);
  uint64_t Value = (uint64_t *)AGGraphGetValue();
  int v10 = v9;
  uint64_t v11 = *Value;
  uint64_t v12 = Value[1];
  uint64_t v13 = v36;
  uint64_t v14 = (long long *)AGGraphGetValue();
  long long v15 = *v14;
  long long v16 = v14[1];
  if (((v10 | v17) & 1) != 0
    || (long long v31 = v14[1],
        long long v32 = v15,
        type metadata accessor for [ViewResponder](),
        Outputuint64_t Value = AGGraphGetOutputValue(),
        long long v16 = v31,
        long long v15 = v32,
        !OutputValue))
  {
    long long v33 = v15;
    long long v34 = v16;
    *(double *)(v13 + 224) = MEMORY[0x18C114450]();
    *(void *)(v13 + 232) = v19;
    *(void *)&long long v33 = v11;
    *((void *)&v33 + 1) = v12;
    *(double *)(v13 + 240) = MEMORY[0x18C10C240]();
    *(void *)(v13 + 248) = v20;
  }
  *(_DWORD *)(v13 + 304) = *(_DWORD *)AGGraphGetValue();
  *(void *)(v13 + 256) = AGCreateWeakAttribute();
  *(unsigned char *)(v13 + 264) = *(unsigned char *)AGGraphGetValue();
  type metadata accessor for [ViewResponder]();
  uint64_t v21 = AGGraphGetValue();
  if (v22)
  {
    swift_bridgeObjectRetain_n();
    MultiViewResponder.children.setter();
    uint64_t v21 = swift_bridgeObjectRelease();
  }
  *(void *)&long long v33 = v11;
  *((void *)&v33 + 1) = v12;
  double v23 = MEMORY[0x18C10C240](v21);
  double v25 = v24;
  long long v33 = *(_OWORD *)AGGraphGetValue();
  *(double *)(v13 + 280) = v23 - MEMORY[0x18C10C240]();
  *(double *)(v13 + 288) = v25 - v26;
  if (*(unsigned char *)AGGraphGetValue() == 1)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56))(v6, 1, 1, v2);
  }
  else
  {
    uint64_t v27 = AGGraphGetValue();
    uint64_t v28 = *(void *)(v2 - 8);
    (*(void (**)(char *, uint64_t, uint64_t))(v28 + 16))(v6, v27, v2);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v28 + 56))(v6, 0, 1, v2);
  }
  specialized ContextMenuPreviewResponder.preview.setter((uint64_t)v6);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  AGWeakAttributeGetAttribute();
  *(void *)(v13 + 308) = AGCreateWeakAttribute();
  *(unsigned char *)(v13 + 316) = 0;
  uint64_t result = AGGraphGetOutputValue();
  if (!result)
  {
    _s14AttributeGraph0A0Vy7SwiftUI16PlatformItemListVGMaTm_2(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>, MEMORY[0x1E4FBC838] + 8, MEMORY[0x1E4FBBE00]);
    uint64_t v30 = swift_allocObject();
    *(_OWORD *)(v30 + 16) = xmmword_188351940;
    *(void *)(v30 + 32) = v13;
    *(void *)&long long v33 = v30;
    specialized Array._endMutation()();
    outlined retain of ContextMenuPreviewResponderFilter<A, B>((uint64_t)v35);
    AGGraphSetOutputValue();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t static ContextMenuPreviewDestinationModifier._makeView(modifier:inputs:body:)(_DWORD *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, unint64_t a8, unint64_t a9, uint64_t a10)
{
  uint64_t v10 = *a2;
  int v11 = *((_DWORD *)a2 + 2);
  unsigned int v12 = *((_DWORD *)a2 + 6);
  unsigned int v28 = *((_DWORD *)a2 + 7);
  unsigned int v13 = *((_DWORD *)a2 + 9);
  unsigned int v31 = *((_DWORD *)a2 + 8);
  uint64_t v21 = a2[5];
  uint64_t v22 = a2[2];
  uint64_t v20 = a2[6];
  int v14 = *((_DWORD *)a2 + 14);
  int v27 = *((_DWORD *)a2 + 15);
  int v15 = *((_DWORD *)a2 + 16);
  int v16 = *((_DWORD *)a2 + 17);
  int v17 = *((_DWORD *)a2 + 19);
  int v29 = *((_DWORD *)a2 + 20);
  int v30 = *((_DWORD *)a2 + 18);
  v32[0] = *a1;
  HIDWORD(v34) = HIDWORD(a6);
  type metadata accessor for ContextMenuPreviewDestinationModifier();
  type metadata accessor for _GraphValue();
  int v18 = _GraphValue.value.getter();
  uint64_t v33 = v10;
  LODWORD(v34) = v11;
  uint64_t v35 = v22;
  unint64_t v36 = __PAIR64__(v28, v12);
  unint64_t v37 = __PAIR64__(v13, v31);
  uint64_t v38 = v21;
  uint64_t v39 = v20;
  int v40 = v14;
  int v41 = v27;
  int v42 = v15;
  int v43 = v16;
  int v44 = v30;
  int v45 = v17;
  int v46 = v29;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  ContextMenuPreviewDestinationModifier.Child.init(modifier:inputs:)(v18, (uint64_t)v32);
  uint64_t v33 = a5;
  uint64_t v34 = a6;
  uint64_t v35 = a7;
  unint64_t v36 = a8;
  unint64_t v37 = a9;
  uint64_t v38 = a10;
  type metadata accessor for ContextMenuPreviewDestinationModifier.Transform();
  uint64_t v33 = a5;
  uint64_t v34 = a6;
  uint64_t v35 = a7;
  unint64_t v36 = a8;
  unint64_t v37 = a9;
  uint64_t v38 = a10;
  type metadata accessor for ContextMenuPreviewDestinationModifier.Child();
  swift_getWitnessTable();
  _GraphValue.init<A>(_:)();
  uint64_t v33 = v10;
  LODWORD(v34) = v11;
  uint64_t v35 = v22;
  unint64_t v36 = __PAIR64__(v28, v12);
  unint64_t v37 = __PAIR64__(v13, v31);
  uint64_t v38 = v21;
  uint64_t v39 = v20;
  int v40 = v14;
  int v41 = v27;
  int v42 = v15;
  int v43 = v16;
  int v44 = v30;
  int v45 = v17;
  int v46 = v29;
  swift_getWitnessTable();
  return static ViewModifier.makeDebuggableView(modifier:inputs:body:)();
}

__n128 ContextMenuPreviewDestinationModifier.Child.init(modifier:inputs:)@<Q0>(int a1@<W0>, uint64_t a2@<X8>)
{
  lazy protocol witness table accessor for type NavigationAuthority.DepthKey and conformance NavigationAuthority.DepthKey();
  swift_retain_n();
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  PropertyList.subscript.getter();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  swift_release_n();
  lazy protocol witness table accessor for type NavigationAuthority.StackKeyViewInputKey and conformance NavigationAuthority.StackKeyViewInputKey();
  swift_retain_n();
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  PropertyList.subscript.getter();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  swift_release_n();
  lazy protocol witness table accessor for type NavigationAuthority.ViewInputKey and conformance NavigationAuthority.ViewInputKey();
  swift_retain_n();
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  PropertyList.subscript.getter();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  swift_release_n();
  lazy protocol witness table accessor for type NavigationAuthority.SeedInputs and conformance NavigationAuthority.SeedInputs();
  swift_retain_n();
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  PropertyList.subscript.getter();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  swift_release_n();
  lazy protocol witness table accessor for type IsExtractingNavigationDestinations and conformance IsExtractingNavigationDestinations();
  v4.n128_u64[0] = v7;
  v4.n128_u64[1] = v7;
  __n128 v6 = v4;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  PropertyList.subscript.getter();
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  swift_release_n();
  *(_DWORD *)a2 = a1;
  *(_DWORD *)(a2 + 4) = v7;
  __n128 result = v6;
  *(__n128 *)(a2 + 8) = v6;
  *(void *)(a2 + 24) = v7;
  *(unsigned char *)(a2 + 32) = v7;
  return result;
}

uint64_t ContextMenuPreviewDestinationModifier.Child.modifier.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for ContextMenuPreviewDestinationModifier();
  uint64_t Value = AGGraphGetValue();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16))(a1, Value, v2);
}

uint64_t ContextMenuPreviewDestinationModifier.Child.stackKey.getter()
{
  _s14AttributeGraph0A0Vy7SwiftUI16PlatformItemListVGMaTm_2(0, &lazy cache variable for type metadata for NavigationState.StackContent.Key?, (uint64_t)&type metadata for NavigationState.StackContent.Key, MEMORY[0x1E4FBB718]);
  uint64_t result = AGGraphGetWeakValue();
  if (result) {
    return *(void *)result;
  }
  return result;
}

double ContextMenuPreviewDestinationModifier.Child.authority.getter@<D0>(uint64_t a1@<X8>)
{
  _s14AttributeGraph0A0Vy7SwiftUI16PlatformItemListVGMaTm_2(0, &lazy cache variable for type metadata for NavigationAuthority?, (uint64_t)&type metadata for NavigationAuthority, MEMORY[0x1E4FBB718]);
  Weakuint64_t Value = AGGraphGetWeakValue();
  if (WeakValue)
  {
    outlined init with copy of NavigationAuthority?(WeakValue, a1);
  }
  else
  {
    double result = 0.0;
    *(_OWORD *)a1 = xmmword_18834C6B0;
    *(void *)(a1 + 16) = 0;
  }
  return result;
}

uint64_t ContextMenuPreviewDestinationModifier.Child.value.getter@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = a1[3];
  uint64_t v5 = a1[4];
  uint64_t v6 = a1[5];
  uint64_t v7 = a1[6];
  uint64_t v8 = a1[7];
  *(void *)&long long v30 = a1[2];
  *((void *)&v30 + 1) = v4;
  uint64_t v23 = v4;
  uint64_t v25 = v6;
  uint64_t v26 = v5;
  uint64_t v31 = v5;
  uint64_t v32 = v6;
  uint64_t v33 = v7;
  uint64_t v34 = v8;
  uint64_t v9 = type metadata accessor for ContextMenuPreviewDestinationModifier();
  MEMORY[0x1F4188790](v9 - 8);
  int v11 = (char *)&v23 - v10;
  ContextMenuPreviewDestinationModifier.Child.modifier.getter((uint64_t)&v23 - v10);
  uint64_t v24 = *(void *)AGGraphGetValue();
  uint64_t v12 = ContextMenuPreviewDestinationModifier.Child.stackKey.getter();
  uint64_t v14 = v13;
  uint64_t v16 = v15;
  ContextMenuPreviewDestinationModifier.Child.authority.getter((uint64_t)v29);
  outlined init with copy of NavigationAuthority??((uint64_t)v29, (uint64_t)v27);
  if (v28 == 2)
  {
    long long v30 = xmmword_18834BB90;
    uint64_t v31 = 0;
  }
  else
  {
    outlined init with take of NavigationAuthority?((uint64_t)v27, (uint64_t)&v30);
  }
  outlined destroy of NavigationAuthority??((uint64_t)v29);
  Weakuint64_t Value = (uint64_t *)AGGraphGetWeakValue();
  if (WeakValue) {
    uint64_t v18 = *WeakValue;
  }
  else {
    uint64_t v18 = -1;
  }
  if (v14 == 7) {
    uint64_t v19 = 0;
  }
  else {
    uint64_t v19 = v16;
  }
  if (v14 == 7) {
    uint64_t v20 = 6;
  }
  else {
    uint64_t v20 = v14;
  }
  if (v14 == 7) {
    uint64_t v21 = 0;
  }
  else {
    uint64_t v21 = v12;
  }
  return ContextMenuPreviewDestinationModifier.Transform.init(modifier:depth:stackKey:navigationAuthority:navigationStateSeeds:isExtracting:)((uint64_t)v11, v24, v21, v20, v19, (uint64_t)&v30, v18, *(unsigned char *)(v2 + 32), a2);
}

uint64_t ContextMenuPreviewDestinationModifier.Transform.init(modifier:depth:stackKey:navigationAuthority:navigationStateSeeds:isExtracting:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, char a8@<W7>, uint64_t a9@<X8>)
{
  *(void *)a9 = 0;
  *(unsigned char *)(a9 + 8) = 0;
  *(void *)(a9 + 16) = 0;
  int v11 = (int *)type metadata accessor for ContextMenuPreviewDestinationModifier.Transform();
  uint64_t v12 = a9 + v11[18];
  uint64_t v13 = type metadata accessor for ContextMenuPreviewDestinationModifier();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 32))(v12, a1, v13);
  *(void *)(a9 + v11[19]) = a2;
  uint64_t v14 = (void *)(a9 + v11[20]);
  *uint64_t v14 = a3;
  v14[1] = a4;
  v14[2] = a5;
  uint64_t result = outlined init with take of NavigationAuthority?(a6, a9 + v11[21]);
  *(void *)(a9 + v11[22]) = a7;
  *(unsigned char *)(a9 + v11[23]) = a8;
  return result;
}

uint64_t protocol witness for static Rule.initialValue.getter in conformance ContextMenuPreviewDestinationModifier<A, B, C>.Child@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for ContextMenuPreviewDestinationModifier.Transform();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56))(a1, 1, 1, v2);
}

uint64_t protocol witness for Rule.value.getter in conformance ContextMenuPreviewDestinationModifier<A, B, C>.Child@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return ContextMenuPreviewDestinationModifier.Child.value.getter(a1, a2);
}

uint64_t ContextMenuPreviewDestinationModifier.Transform.body(content:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v59 = a2;
  uint64_t v5 = *(void *)(a1 + 24);
  uint64_t v51 = *(void *)(a1 + 16);
  uint64_t v48 = v5;
  uint64_t v50 = *(void *)(a1 + 40);
  uint64_t v49 = *(void *)(a1 + 48);
  uint64_t v68 = v51;
  uint64_t v69 = v5;
  uint64_t v70 = v50;
  uint64_t v71 = v49;
  uint64_t v6 = type metadata accessor for ContextMenuPreviewModifier();
  uint64_t v47 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v8 = &v43[-v7];
  swift_getWitnessTable();
  uint64_t v9 = type metadata accessor for _ViewModifier_Content();
  uint64_t v10 = type metadata accessor for ModifiedContent();
  uint64_t v57 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v10);
  uint64_t v12 = &v43[-v11];
  uint64_t v13 = *(void *)(a1 + 32);
  uint64_t v14 = *(void *)(a1 + 56);
  type metadata accessor for UpdateViewDestinationViewModifier();
  type metadata accessor for UpdateViewDestinationRequestProcessor();
  uint64_t v15 = type metadata accessor for ModifiedContent();
  uint64_t v58 = v10;
  uint64_t v53 = v15;
  uint64_t v16 = type metadata accessor for ModifiedContent();
  uint64_t v56 = *(void *)(v16 - 8);
  MEMORY[0x1F4188790](v16);
  id v52 = &v43[-((v17 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1F4188790](v18);
  char v54 = &v43[-v19];
  ContextMenuPreviewDestinationModifier.Transform.contextMenuModifier.getter(a1, (uint64_t)v8);
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v55 = v12;
  uint64_t v46 = WitnessTable;
  MEMORY[0x18C113660](v8, v9, v6);
  (*(void (**)(unsigned char *, uint64_t))(v47 + 8))(v8, v6);
  uint64_t v21 = *(void *)(v2 + 16);
  LOBYTE(v66) = *(unsigned char *)(v2 + 8);
  uint64_t v67 = v21;
  _s14AttributeGraph0A0Vy7SwiftUI16PlatformItemListVGMaTm_2(0, (unint64_t *)&lazy cache variable for type metadata for State<Bool>, MEMORY[0x1E4FBB390], MEMORY[0x1E4F41580]);
  State.projectedValue.getter();
  uint64_t v47 = v68;
  uint64_t v45 = v69;
  int v44 = v70;
  uint64_t v22 = *(int *)(a1 + 72);
  uint64_t v68 = v51;
  uint64_t v69 = v48;
  uint64_t v51 = v13;
  uint64_t v70 = v13;
  uint64_t v71 = v50;
  uint64_t v72 = v49;
  uint64_t v73 = v14;
  uint64_t v50 = v14;
  uint64_t v23 = type metadata accessor for ContextMenuPreviewDestinationModifier();
  uint64_t v24 = v3 + *(int *)(a1 + 80);
  uint64_t v25 = *(unsigned __int8 *)(v24 + 8);
  if (v25 == 6)
  {
    uint64_t v26 = 0;
    uint64_t v25 = 0;
    uint64_t v27 = 0;
    uint64_t v28 = 0x1FFFFFFFELL;
  }
  else
  {
    uint64_t v28 = 0;
    uint64_t v27 = *(void *)(v24 + 16);
    uint64_t v26 = *(void *)v24;
  }
  uint64_t v49 = v3 + v22 + *(int *)(v23 + 72);
  uint64_t v68 = v26;
  uint64_t v69 = v25;
  uint64_t v70 = v27;
  uint64_t v71 = 0;
  uint64_t v72 = v28;
  uint64_t v73 = 0;
  uint64_t v48 = *(void *)(v3 + *(int *)(a1 + 76));
  uint64_t v29 = Namespace.wrappedValue.getter();
  uint64_t v30 = v3 + *(int *)(a1 + 84);
  unsigned __int8 v31 = *(unsigned char *)(v3 + *(int *)(a1 + 92));
  uint64_t v66 = 0;
  Transaction.disablesAnimations.setter();
  uint64_t v32 = v66;
  uint64_t v33 = swift_getWitnessTable();
  uint64_t v64 = v46;
  uint64_t v65 = v33;
  uint64_t v34 = v58;
  uint64_t v35 = swift_getWitnessTable();
  unsigned __int8 v42 = v31;
  unint64_t v36 = v52;
  unint64_t v37 = v55;
  View.updateViewDestinations<A>(isPresented:destination:key:kind:id:shouldTargetSourceColumn:navigationAuthority:isExtractingDestinations:transaction:)(v47, v45, v44, v49, (uint64_t)&v68, v48, 0, v29, (uint64_t)v52, 0, v30, v42, v32, v34, v51, v35);
  swift_release();
  swift_release();
  swift_release();
  (*(void (**)(unsigned char *, uint64_t))(v57 + 8))(v37, v34);
  int v62 = &protocol witness table for UpdateViewDestinationViewModifier<A>;
  char v63 = &protocol witness table for UpdateViewDestinationRequestProcessor<A, B>;
  uint64_t v38 = swift_getWitnessTable();
  uint64_t v60 = v35;
  uint64_t v61 = v38;
  swift_getWitnessTable();
  uint64_t v39 = v54;
  static ViewBuilder.buildExpression<A>(_:)(v36);
  int v40 = *(void (**)(unsigned char *, uint64_t))(v56 + 8);
  v40(v36, v16);
  static ViewBuilder.buildExpression<A>(_:)(v39);
  return ((uint64_t (*)(unsigned char *, uint64_t))v40)(v39, v16);
}

uint64_t ContextMenuPreviewDestinationModifier.Transform.contextMenuModifier.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = *(void *)(a1 + 24);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v8 = (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *(void *)(v9 + 16);
  double v11 = MEMORY[0x1F4188790](v9);
  uint64_t v13 = (char *)&v25 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = v2 + *(int *)(v14 + 72);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v16 + 16))(v13, v15, v10, v11);
  uint64_t v17 = *(void *)(a1 + 32);
  uint64_t v18 = *(void *)(a1 + 40);
  uint64_t v28 = v10;
  uint64_t v29 = v5;
  uint64_t v30 = v17;
  uint64_t v31 = v18;
  long long v25 = *(_OWORD *)(a1 + 48);
  long long v32 = v25;
  uint64_t v19 = type metadata accessor for ContextMenuPreviewDestinationModifier();
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, v15 + *(int *)(v19 + 68), v5);
  if (ContextMenuPreviewDestinationModifier.Transform.isDisabled.getter(a1))
  {
    uint64_t v20 = 0;
    uint64_t v21 = 0;
    char v22 = -2;
  }
  else
  {
    uint64_t v23 = *(void *)(v2 + 16);
    char v26 = *(unsigned char *)(v2 + 8);
    uint64_t v27 = v23;
    _s14AttributeGraph0A0Vy7SwiftUI16PlatformItemListVGMaTm_2(0, (unint64_t *)&lazy cache variable for type metadata for State<Bool>, MEMORY[0x1E4FBB390], MEMORY[0x1E4F41580]);
    State.projectedValue.getter();
    uint64_t v20 = v28;
    uint64_t v21 = v29;
    char v22 = v30 | 0x80;
  }
  return ContextMenuPreviewModifier.init(menuView:preview:hidePreview:previewAction:)((uint64_t)v13, (uint64_t)v8, 0, v20, v21, v22, v10, v5, a2);
}

BOOL ContextMenuPreviewDestinationModifier.Transform.isDisabled.getter(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *(void *)(a1 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v6 = &v12[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  outlined init with copy of NavigationAuthority?(v2 + *(int *)(v7 + 84), (uint64_t)v12);
  uint64_t v8 = v13;
  outlined destroy of NavigationAuthority?((uint64_t)v12);
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, v2, a1);
  BOOL v9 = v8 == 1 || v6[*(int *)(a1 + 80) + 8] == 6;
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, a1);
  return v9;
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance ContextMenuPreviewDestinationModifier<A, B, C>(_DWORD *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return static ContextMenuPreviewDestinationModifier._makeView(modifier:inputs:body:)(a1, a2, a3, a4, *(void *)(a5 + 16), *(void *)(a5 + 24), *(void *)(a5 + 32), *(void *)(a5 + 40), *(void *)(a5 + 48), *(void *)(a5 + 56));
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance ContextMenuPreviewDestinationModifier<A, B, C>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F40FF3A0](a1, a2, a3, a4, a5, WitnessTable);
}

void ContextMenuPreviewResponder.preview.didset(uint64_t a1)
{
  uint64_t v20 = a1;
  uint64_t v2 = *v1;
  uint64_t v3 = class metadata base offset for ContextMenuPreviewResponder;
  uint64_t v4 = (uint64_t *)(*v1 + class metadata base offset for ContextMenuPreviewResponder);
  uint64_t v5 = *v4;
  uint64_t v6 = type metadata accessor for Optional();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  BOOL v9 = (char *)&v19 - v8;
  uint64_t v10 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v11);
  uint64_t v13 = (char *)&v19 - v12;
  uint64_t v14 = *(void **)((char *)v1 + v4[3]);
  if (v14)
  {
    uint64_t v15 = (char *)v1 + *(void *)(v3 + v2 + 16);
    swift_beginAccess();
    (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v9, v15, v6);
    uint64_t v16 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48);
    if (v16((uint64_t)v9, 1, v5) == 1)
    {
      (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v13, v9, v5);
      if (v16(v20, 1, v5) != 1)
      {
        id v17 = v14;
        specialized UIHostingController.rootView.setter((uint64_t)v13);
        MEMORY[0x1F4188790](v18);
        *(&v19 - 2) = (uint64_t)v17;
        static Update.ensure<A>(_:)();
      }
      (*(void (**)(char *, uint64_t))(v10 + 8))(v13, v5);
    }
  }
}

void closure #1 in ContextMenuPreviewResponder.preview.didset(void *a1)
{
  objc_msgSend(a1, sel_preferredContentSize);
  unint64_t v2 = v1;
  unint64_t v4 = v3;
  uint64_t v5 = (void *)specialized UIHostingController.host.getter();
  type metadata accessor for _UIHostingView();
  id v6 = v5;
  swift_getWitnessTable();
  CGSize v7 = ViewRendererHost.idealSize()();

  UIHostingController.idealSizeDidChange(from:to:)((CGSize)__PAIR128__(v4, v2), v7);
}

uint64_t ContextMenuPreviewResponder.previewHost.getter()
{
  unint64_t v1 = v0;
  uint64_t v2 = *v0;
  uint64_t v3 = class metadata base offset for ContextMenuPreviewResponder;
  uint64_t v4 = v2 + class metadata base offset for ContextMenuPreviewResponder;
  uint64_t v5 = *(void *)(v2 + class metadata base offset for ContextMenuPreviewResponder);
  uint64_t v6 = type metadata accessor for Optional();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  BOOL v9 = (objc_class *)&v20[-v8];
  uint64_t v10 = *(void *)(v4 + 24);
  uint64_t v11 = *(void **)((char *)v1 + v10);
  id v12 = v11;
  if (v11)
  {
LABEL_6:
    id v19 = v11;
    return (uint64_t)v12;
  }
  uint64_t v13 = (char *)v1 + *(void *)(v3 + v2 + 16);
  swift_beginAccess();
  (*(void (**)(objc_class *, char *, uint64_t))(v7 + 16))(v9, v13, v6);
  uint64_t v14 = *(void *)(v5 - 8);
  uint64_t result = (*(uint64_t (**)(objc_class *, uint64_t, uint64_t))(v14 + 48))(v9, 1, v5);
  if (result != 1)
  {
    type metadata accessor for UIHostingController();
    id v12 = specialized UIHostingController.__allocating_init(rootView:)(v9);
    (*(void (**)(objc_class *, uint64_t))(v14 + 8))(v9, v5);
    if (one-time initialization token for idealSizeOptions != -1) {
      swift_once();
    }
    uint64_t v21 = static UIHostingControllerSizingOptions.idealSizeOptions;
    uint64_t v16 = UIHostingController.sizingOptions.setter(&v21);
    MEMORY[0x1F4188790](v16);
    *(void *)&v20[-16] = v12;
    static Update.ensure<A>(_:)();
    id v17 = *(void **)((char *)v1 + v10);
    *(void *)((char *)v1 + v10) = v12;
    id v18 = v12;

    goto LABEL_6;
  }
  __break(1u);
  return result;
}

void closure #1 in ContextMenuPreviewResponder.previewHost.getter()
{
  unint64_t v0 = (void *)specialized UIHostingController.host.getter();
  type metadata accessor for _UIHostingView();
  id v1 = v0;
  swift_getWitnessTable();
  CGSize v2 = ViewRendererHost.idealSize()();

  UIHostingController.idealSizeDidChange(from:to:)((CGSize)0, v2);
}

uint64_t (*ContextMenuPreviewResponder.previewProvider.getter())()
{
  id v1 = (uint64_t *)(*v0 + class metadata base offset for ContextMenuPreviewResponder);
  uint64_t v2 = *v1;
  uint64_t v3 = type metadata accessor for Optional();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  uint64_t v6 = (char *)&v9 - v5;
  uint64_t v7 = (char *)v0 + v1[2];
  swift_beginAccess();
  (*(void (**)(char *, char *, uint64_t))(v4 + 16))(v6, v7, v3);
  LODWORD(v2) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v2 - 8) + 48))(v6, 1, v2);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  uint64_t result = 0;
  if (v2 != 1)
  {
    swift_retain();
    return partial apply for closure #1 in ContextMenuPreviewResponder.previewProvider.getter;
  }
  return result;
}

Swift::Void __swiftcall ContextMenuPreviewResponder.extendPrintTree(string:)(Swift::String *string)
{
  v1._object = (void *)0x8000000188344480;
  v1._countAndFlagsBits = 0xD000000000000012;
  String.append(_:)(v1);
}

void ContextMenuPreviewResponder.__ivar_destroyer()
{
  Swift::String v1 = (char *)v0 + *(void *)(*v0 + class metadata base offset for ContextMenuPreviewResponder + 16);
  uint64_t v2 = type metadata accessor for Optional();
  (*(void (**)(char *, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  uint64_t v3 = *(void **)((char *)v0 + *(void *)(class metadata base offset for ContextMenuPreviewResponder + *v0 + 24));
}

void *ContextMenuPreviewResponder.deinit()
{
  unint64_t v0 = (void *)DefaultLayoutViewResponder.deinit();
  Swift::String v1 = (char *)v0 + *(void *)(class metadata base offset for ContextMenuPreviewResponder + *v0 + 16);
  uint64_t v2 = type metadata accessor for Optional();
  (*(void (**)(char *, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);

  return v0;
}

uint64_t ContextMenuPreviewResponder.__deallocating_deinit()
{
  ContextMenuPreviewResponder.deinit();

  return swift_deallocClassInstance();
}

uint64_t destroy for ContextMenuPreviewAction(uint64_t a1)
{
  return outlined consume of ContextMenuPreviewAction(*(void *)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16));
}

uint64_t initializeBufferWithCopyOfBuffer for ContextMenuPreviewAction(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  char v5 = *(unsigned char *)(a2 + 16);
  outlined copy of ContextMenuPreviewAction(*(void *)a2, v4, v5);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for ContextMenuPreviewAction(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  char v5 = *(unsigned char *)(a2 + 16);
  outlined copy of ContextMenuPreviewAction(*(void *)a2, v4, v5);
  uint64_t v6 = *(void *)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  char v8 = *(unsigned char *)(a1 + 16);
  *(unsigned char *)(a1 + 16) = v5;
  outlined consume of ContextMenuPreviewAction(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for ContextMenuPreviewAction(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 16);
  uint64_t v4 = *(void *)a1;
  uint64_t v5 = *(void *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  char v6 = *(unsigned char *)(a1 + 16);
  *(unsigned char *)(a1 + 16) = v3;
  outlined consume of ContextMenuPreviewAction(v4, v5, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for ContextMenuPreviewDestinationModifier(unsigned __int16 *a1, unsigned int a2, void *a3)
{
  uint64_t v5 = *(void *)(a3[2] - 8);
  unsigned int v6 = *(_DWORD *)(v5 + 84);
  uint64_t v7 = *(void *)(a3[3] - 8);
  unsigned int v8 = *(_DWORD *)(v7 + 84);
  if (v8 <= v6) {
    unsigned int v9 = *(_DWORD *)(v5 + 84);
  }
  else {
    unsigned int v9 = *(_DWORD *)(v7 + 84);
  }
  uint64_t v10 = a3[4];
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(unsigned int *)(v11 + 84);
  uint64_t v13 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v14 = *(void *)(*(void *)(a3[3] - 8) + 64);
  uint64_t v15 = *(unsigned __int8 *)(v11 + 80);
  if (v12 <= v9) {
    unsigned int v16 = v9;
  }
  else {
    unsigned int v16 = *(_DWORD *)(v11 + 84);
  }
  if (!a2) {
    return 0;
  }
  uint64_t v17 = *(void *)(*(void *)(a3[2] - 8) + 64) + v13;
  int v18 = a2 - v16;
  if (a2 <= v16) {
    goto LABEL_27;
  }
  uint64_t v19 = ((v14 + v15 + (v17 & ~v13)) & ~v15) + *(void *)(*(void *)(v10 - 8) + 64);
  char v20 = 8 * v19;
  if (v19 <= 3)
  {
    unsigned int v22 = ((v18 + ~(-1 << v20)) >> v20) + 1;
    if (HIWORD(v22))
    {
      int v21 = *(_DWORD *)((char *)a1 + v19);
      if (!v21) {
        goto LABEL_27;
      }
      goto LABEL_17;
    }
    if (v22 > 0xFF)
    {
      int v21 = *(unsigned __int16 *)((char *)a1 + v19);
      if (!*(unsigned __int16 *)((char *)a1 + v19)) {
        goto LABEL_27;
      }
      goto LABEL_17;
    }
    if (v22 < 2)
    {
LABEL_27:
      if (v16)
      {
        if (v6 == v16)
        {
          char v26 = *(uint64_t (**)(void))(v5 + 48);
          return v26();
        }
        else
        {
          unint64_t v28 = ((unint64_t)a1 + v17) & ~v13;
          if (v8 == v16)
          {
            uint64_t v29 = *(uint64_t (**)(unint64_t))(v7 + 48);
            return v29(v28);
          }
          else
          {
            unint64_t v30 = (v28 + v14 + v15) & ~v15;
            uint64_t v31 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v11 + 48);
            return v31(v30, v12, v10);
          }
        }
      }
      return 0;
    }
  }
  int v21 = *((unsigned __int8 *)a1 + v19);
  if (!*((unsigned char *)a1 + v19)) {
    goto LABEL_27;
  }
LABEL_17:
  int v23 = (v21 - 1) << v20;
  if (v19 > 3) {
    int v23 = 0;
  }
  if (v19)
  {
    if (v19 <= 3) {
      int v24 = ((v14 + v15 + (v17 & ~v13)) & ~v15) + *(_DWORD *)(*(void *)(v10 - 8) + 64);
    }
    else {
      int v24 = 4;
    }
    switch(v24)
    {
      case 2:
        int v25 = *a1;
        break;
      case 3:
        int v25 = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        int v25 = *(_DWORD *)a1;
        break;
      default:
        int v25 = *(unsigned __int8 *)a1;
        break;
    }
  }
  else
  {
    int v25 = 0;
  }
  return v16 + (v25 | v23) + 1;
}

void storeEnumTagSinglePayload for ContextMenuPreviewDestinationModifier(char *a1, unsigned int a2, unsigned int a3, void *a4)
{
  uint64_t v6 = *(void *)(a4[2] - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  uint64_t v8 = a4[3];
  uint64_t v9 = a4[4];
  uint64_t v10 = *(void *)(v8 - 8);
  unsigned int v11 = *(_DWORD *)(v10 + 84);
  if (v11 <= v7) {
    unsigned int v12 = *(_DWORD *)(v6 + 84);
  }
  else {
    unsigned int v12 = *(_DWORD *)(v10 + 84);
  }
  uint64_t v13 = *(void *)(v9 - 8);
  uint64_t v14 = *(unsigned __int8 *)(v10 + 80);
  uint64_t v15 = *(void *)(*(void *)(v8 - 8) + 64);
  uint64_t v16 = *(unsigned __int8 *)(v13 + 80);
  if (*(_DWORD *)(v13 + 84) <= v12) {
    unsigned int v17 = v12;
  }
  else {
    unsigned int v17 = *(_DWORD *)(v13 + 84);
  }
  uint64_t v18 = *(void *)(*(void *)(a4[2] - 8) + 64) + v14;
  size_t v19 = ((v15 + v16 + (v18 & ~v14)) & ~v16) + *(void *)(*(void *)(v9 - 8) + 64);
  BOOL v20 = a3 >= v17;
  unsigned int v21 = a3 - v17;
  if (v21 != 0 && v20)
  {
    if (v19 <= 3)
    {
      unsigned int v26 = ((v21 + ~(-1 << (8 * v19))) >> (8 * v19)) + 1;
      if (HIWORD(v26))
      {
        int v22 = 4;
      }
      else if (v26 >= 0x100)
      {
        int v22 = 2;
      }
      else
      {
        int v22 = v26 > 1;
      }
    }
    else
    {
      int v22 = 1;
    }
  }
  else
  {
    int v22 = 0;
  }
  if (v17 < a2)
  {
    unsigned int v23 = ~v17 + a2;
    if (v19 < 4)
    {
      int v24 = (v23 >> (8 * v19)) + 1;
      if (v19)
      {
        int v27 = v23 & ~(-1 << (8 * v19));
        bzero(a1, v19);
        if (v19 == 3)
        {
          *(_WORD *)a1 = v27;
          a1[2] = BYTE2(v27);
        }
        else if (v19 == 2)
        {
          *(_WORD *)a1 = v27;
        }
        else
        {
          *a1 = v27;
        }
      }
    }
    else
    {
      bzero(a1, v19);
      *(_DWORD *)a1 = v23;
      int v24 = 1;
    }
    switch(v22)
    {
      case 1:
        a1[v19] = v24;
        return;
      case 2:
        *(_WORD *)&a1[v19] = v24;
        return;
      case 3:
        goto LABEL_48;
      case 4:
        *(_DWORD *)&a1[v19] = v24;
        return;
      default:
        return;
    }
  }
  uint64_t v25 = ~v14;
  switch(v22)
  {
    case 1:
      a1[v19] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_27;
    case 2:
      *(_WORD *)&a1[v19] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_27;
    case 3:
LABEL_48:
      __break(1u);
      JUMPOUT(0x1882356ACLL);
    case 4:
      *(_DWORD *)&a1[v19] = 0;
      goto LABEL_26;
    default:
LABEL_26:
      if (!a2) {
        return;
      }
LABEL_27:
      if (v7 == v17)
      {
        unint64_t v28 = *(void (**)(char *))(v6 + 56);
        uint64_t v29 = a1;
LABEL_30:
        v28(v29);
        return;
      }
      unint64_t v30 = (unint64_t)&a1[v18] & v25;
      if (v11 != v17)
      {
        uint64_t v29 = (char *)((v30 + v15 + v16) & ~v16);
        unint64_t v28 = *(void (**)(char *))(v13 + 56);
        goto LABEL_30;
      }
      uint64_t v31 = *(void (**)(unint64_t))(v10 + 56);
      v31(v30);
      return;
  }
}

uint64_t type metadata accessor for ContextMenuPreviewDestinationModifier()
{
  return swift_getGenericMetadata();
}

_DWORD *initializeBufferWithCopyOfBuffer for ContextMenuPreviewModifier(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 + 16);
  uint64_t v5 = *(void *)(a3 + 24);
  uint64_t v6 = *(void *)(v4 - 8);
  unint64_t v7 = *(_DWORD *)(v6 + 80);
  uint64_t v8 = *(void *)(v6 + 64);
  uint64_t v9 = *(void *)(v5 - 8);
  uint64_t v10 = *(_DWORD *)(v9 + 80);
  uint64_t v11 = v8 + v10;
  uint64_t v12 = *(void *)(v9 + 64);
  if ((v10 | v7) <= 7
    && ((*(_DWORD *)(v9 + 80) | *(_DWORD *)(v6 + 80)) & 0x100000) == 0
    && ((((v8 + v10 + ((v7 + 17) & ~v7)) & ~v10) + v12) & 0xFFFFFFFFFFFFFFF8) >= 0xFFFFFFFFFFFFFFE7)
  {
    uint64_t v33 = ~v10;
    uint64_t v34 = a1;
    *a1 = *a2;
    unint64_t v17 = ((unint64_t)a1 + 11) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v18 = ((unint64_t)a2 + 11) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v19 = *(void *)v18;
    char v20 = *(unsigned char *)(v18 + 8);
    uint64_t v31 = v4;
    uint64_t v32 = v5;
    outlined copy of Environment<Bool>.Content(*(void *)v18, v20);
    *(void *)unint64_t v17 = v19;
    *(unsigned char *)(v17 + 8) = v20;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v6 + 16))((v17 + v7 + 9) & ~v7, (v18 + v7 + 9) & ~v7, v31);
    uint64_t v21 = (((v17 + v7 + 9) & ~v7) + v11) & v33;
    uint64_t v22 = (((v18 + v7 + 9) & ~v7) + v11) & v33;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16))(v21, v22, v32);
    *(unsigned char *)(v21 + v12) = *(unsigned char *)(v22 + v12);
    unint64_t v23 = ((v21 + v12) & 0xFFFFFFFFFFFFFFF8) + 8;
    unint64_t v24 = (v22 + v12) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v25 = (uint64_t *)(v24 + 8);
    char v26 = *(unsigned char *)(v24 + 24);
    if ((v26 & 0x7E) != 0)
    {
      long long v27 = *(_OWORD *)v25;
      *(unsigned char *)(v23 + 16) = *(unsigned char *)(v24 + 24);
      *(_OWORD *)unint64_t v23 = v27;
    }
    else
    {
      uint64_t v28 = *v25;
      uint64_t v29 = *(void *)(v24 + 16);
      outlined copy of ContextMenuPreviewAction(*v25, v29, *(unsigned char *)(v24 + 24));
      *(void *)unint64_t v23 = v28;
      *(void *)(v23 + 8) = v29;
      *(unsigned char *)(v23 + 16) = v26;
    }
    return v34;
  }
  else
  {
    uint64_t v15 = *(void *)a2;
    *(void *)a1 = *(void *)a2;
    uint64_t v16 = v15 + (((v10 | v7) & 0xF8 ^ 0x1F8) & ((v10 | v7) + 16));
    swift_retain();
  }
  return (_DWORD *)v16;
}

_DWORD *assignWithCopy for ContextMenuPreviewModifier(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  unint64_t v5 = ((unint64_t)a1 + 11) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v6 = ((unint64_t)a2 + 11) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v7 = *(void *)v6;
  char v8 = *(unsigned char *)(v6 + 8);
  outlined copy of Environment<Bool>.Content(*(void *)v6, v8);
  uint64_t v9 = *(void *)v5;
  char v10 = *(unsigned char *)(v5 + 8);
  *(void *)unint64_t v5 = v7;
  *(unsigned char *)(v5 + 8) = v8;
  outlined consume of Environment<Bool>.Content(v9, v10);
  uint64_t v11 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v12 = v11 + 24;
  uint64_t v13 = *(unsigned __int8 *)(v11 + 80);
  uint64_t v14 = (v13 + 9 + v5) & ~v13;
  uint64_t v15 = (v13 + 9 + v6) & ~v13;
  (*(void (**)(uint64_t, uint64_t))(v11 + 24))(v14, v15);
  uint64_t v16 = *(void *)(*(void *)(a3 + 24) - 8);
  uint64_t v17 = v16 + 24;
  uint64_t v18 = *(unsigned __int8 *)(v16 + 80);
  uint64_t v19 = *(void *)(v12 + 40) + v18;
  uint64_t v20 = (v19 + v14) & ~v18;
  uint64_t v21 = (v19 + v15) & ~v18;
  (*(void (**)(uint64_t, uint64_t))(v16 + 24))(v20, v21);
  uint64_t v22 = *(void *)(v17 + 40);
  unint64_t v23 = v22 + v20;
  unint64_t v24 = v22 + v21;
  *(unsigned char *)unint64_t v23 = *(unsigned char *)v24;
  unint64_t v25 = v23 & 0xFFFFFFFFFFFFFFF8;
  unint64_t v26 = v25 + 8;
  unint64_t v27 = v24 & 0xFFFFFFFFFFFFFFF8;
  unint64_t v28 = v27 + 8;
  char v29 = *(unsigned char *)(v27 + 24);
  if ((*(unsigned char *)(v25 + 24) & 0x7E) == 0)
  {
    if ((v29 & 0x7E) == 0)
    {
      uint64_t v34 = *(void *)v28;
      uint64_t v35 = *(void *)(v27 + 16);
      outlined copy of ContextMenuPreviewAction(v34, v35, v29);
      uint64_t v36 = *(void *)v26;
      uint64_t v37 = *(void *)(v26 + 8);
      *(void *)unint64_t v26 = v34;
      *(void *)(v26 + 8) = v35;
      char v38 = *(unsigned char *)(v26 + 16);
      *(unsigned char *)(v26 + 16) = v29;
      outlined consume of ContextMenuPreviewAction(v36, v37, v38);
      return a1;
    }
    outlined consume of ContextMenuPreviewAction(*(void *)v26, *(void *)(v25 + 16), *(unsigned char *)(v25 + 24));
    goto LABEL_6;
  }
  if ((v29 & 0x7E) != 0)
  {
LABEL_6:
    long long v32 = *(_OWORD *)v28;
    *(unsigned char *)(v26 + 16) = *(unsigned char *)(v28 + 16);
    *(_OWORD *)unint64_t v26 = v32;
    return a1;
  }
  uint64_t v30 = *(void *)v28;
  uint64_t v31 = *(void *)(v27 + 16);
  outlined copy of ContextMenuPreviewAction(v30, v31, v29);
  *(void *)unint64_t v26 = v30;
  *(void *)(v26 + 8) = v31;
  *(unsigned char *)(v26 + 16) = v29;
  return a1;
}

_DWORD *initializeWithTake for ContextMenuPreviewModifier(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  unint64_t v5 = ((unint64_t)a1 + 11) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v6 = ((unint64_t)a2 + 11) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v7 = *(void *)v6;
  *(unsigned char *)(v5 + 8) = *(unsigned char *)(v6 + 8);
  *(void *)unint64_t v5 = v7;
  uint64_t v8 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v9 = v8 + 32;
  uint64_t v10 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v11 = (v10 + 9 + v5) & ~v10;
  uint64_t v12 = (v10 + 9 + v6) & ~v10;
  (*(void (**)(uint64_t, uint64_t))(v8 + 32))(v11, v12);
  uint64_t v13 = *(void *)(v9 + 32);
  uint64_t v14 = *(void *)(*(void *)(a3 + 24) - 8);
  uint64_t v15 = v14 + 32;
  uint64_t v16 = *(unsigned __int8 *)(v14 + 80);
  uint64_t v17 = v13 + v16;
  uint64_t v18 = (v17 + v11) & ~v16;
  uint64_t v19 = (v17 + v12) & ~v16;
  (*(void (**)(uint64_t, uint64_t))(v14 + 32))(v18, v19);
  uint64_t v20 = *(void *)(v15 + 32);
  uint64_t v21 = v20 + v18;
  uint64_t v22 = v20 + v19;
  *(unsigned char *)uint64_t v21 = *(unsigned char *)v22;
  v21 &= 0xFFFFFFFFFFFFFFF8;
  v22 &= 0xFFFFFFFFFFFFFFF8;
  char v23 = *(unsigned char *)(v22 + 24);
  *(_OWORD *)(v21 + 8) = *(_OWORD *)(v22 + 8);
  *(unsigned char *)(v21 + 24) = v23;
  return a1;
}

_DWORD *assignWithTake for ContextMenuPreviewModifier(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  unint64_t v5 = ((unint64_t)a1 + 11) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v6 = ((unint64_t)a2 + 11) & 0xFFFFFFFFFFFFFFF8;
  char v7 = *(unsigned char *)(v6 + 8);
  uint64_t v8 = *(void *)v5;
  char v9 = *(unsigned char *)(v5 + 8);
  *(void *)unint64_t v5 = *(void *)v6;
  *(unsigned char *)(v5 + 8) = v7;
  outlined consume of Environment<Bool>.Content(v8, v9);
  uint64_t v10 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v11 = v10 + 40;
  uint64_t v12 = *(unsigned __int8 *)(v10 + 80);
  uint64_t v13 = (v12 + 9 + v5) & ~v12;
  uint64_t v14 = (v12 + 9 + v6) & ~v12;
  (*(void (**)(uint64_t, uint64_t))(v10 + 40))(v13, v14);
  uint64_t v15 = *(void *)(v11 + 24);
  uint64_t v16 = *(void *)(*(void *)(a3 + 24) - 8);
  uint64_t v17 = v16 + 40;
  uint64_t v18 = *(unsigned __int8 *)(v16 + 80);
  uint64_t v19 = v15 + v18;
  uint64_t v20 = (v19 + v13) & ~v18;
  uint64_t v21 = (v19 + v14) & ~v18;
  (*(void (**)(uint64_t, uint64_t))(v16 + 40))(v20, v21);
  uint64_t v22 = *(void *)(v17 + 24);
  unint64_t v23 = v22 + v20;
  unint64_t v24 = v22 + v21;
  *(unsigned char *)unint64_t v23 = *(unsigned char *)v24;
  unint64_t v25 = v23 & 0xFFFFFFFFFFFFFFF8;
  unint64_t v26 = v25 + 8;
  unint64_t v27 = v24 & 0xFFFFFFFFFFFFFFF8;
  unint64_t v28 = v27 + 8;
  char v29 = *(unsigned char *)(v25 + 24);
  if ((v29 & 0x7E) == 0)
  {
    char v30 = *(unsigned char *)(v27 + 24);
    uint64_t v31 = *(void *)v26;
    uint64_t v32 = *(void *)(v25 + 16);
    if ((v30 & 0x7E) == 0)
    {
      *(_OWORD *)unint64_t v26 = *(_OWORD *)v28;
      *(unsigned char *)(v25 + 24) = v30;
      outlined consume of ContextMenuPreviewAction(v31, v32, v29);
      return a1;
    }
    outlined consume of ContextMenuPreviewAction(v31, v32, v29);
  }
  long long v33 = *(_OWORD *)v28;
  *(unsigned char *)(v26 + 16) = *(unsigned char *)(v28 + 16);
  *(_OWORD *)unint64_t v26 = v33;
  return a1;
}

uint64_t getEnumTagSinglePayload for ContextMenuPreviewModifier(unsigned __int8 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(a3 + 24);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(unsigned int *)(v7 + 84);
  uint64_t v9 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v10 = *(void *)(v4 + 64);
  uint64_t v11 = *(unsigned __int8 *)(v7 + 80);
  if (v5 <= v8) {
    unsigned int v12 = *(_DWORD *)(v7 + 84);
  }
  else {
    unsigned int v12 = *(_DWORD *)(v4 + 84);
  }
  if (v12 <= 0xFE) {
    unsigned int v13 = 254;
  }
  else {
    unsigned int v13 = v12;
  }
  if (!a2) {
    return 0;
  }
  if (v13 < a2)
  {
    unint64_t v14 = ((((v10 + v11 + ((v9 + 17) & ~v9)) & ~v11) + *(void *)(*(void *)(v6 - 8) + 64)) & 0xFFFFFFFFFFFFFFF8)
        + 25;
    unsigned int v15 = (a2 - v13 + 255) >> (8 * v14);
    if (v14 < 4) {
      unsigned int v16 = v15 + 1;
    }
    else {
      unsigned int v16 = 2;
    }
    if (v16 >= 0x10000) {
      LODWORD(v17) = 4;
    }
    else {
      LODWORD(v17) = 2;
    }
    if (v16 < 0x100) {
      LODWORD(v17) = 1;
    }
    if (v16 >= 2) {
      uint64_t v17 = v17;
    }
    else {
      uint64_t v17 = 0;
    }
    switch(v17)
    {
      case 1:
        int v18 = a1[v14];
        if (!a1[v14]) {
          break;
        }
        goto LABEL_25;
      case 2:
        int v18 = *(unsigned __int16 *)&a1[v14];
        if (*(_WORD *)&a1[v14]) {
          goto LABEL_25;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x188235F88);
      case 4:
        int v18 = *(_DWORD *)&a1[v14];
        if (!v18) {
          break;
        }
LABEL_25:
        int v20 = (v18 - 1) << (8 * v14);
        if (v14 >= 4) {
          int v20 = 0;
        }
        if (v14 == 1) {
          int v21 = *a1;
        }
        else {
          int v21 = *(_DWORD *)a1;
        }
        return v13 + (v21 | v20) + 1;
      default:
        break;
    }
  }
  unint64_t v22 = (unint64_t)(a1 + 11) & 0xFFFFFFFFFFFFFFF8;
  if (v12 > 0xFE)
  {
    uint64_t v24 = (v22 + v9 + 9) & ~v9;
    if (v5 == v13) {
      return (*(uint64_t (**)(uint64_t))(v4 + 48))(v24);
    }
    else {
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))((v24 + v10 + v11) & ~v11, v8, v6);
    }
  }
  else
  {
    unsigned int v23 = *(unsigned __int8 *)(v22 + 8);
    if (v23 > 1) {
      return (v23 ^ 0xFF) + 1;
    }
    else {
      return 0;
    }
  }
}

void storeEnumTagSinglePayload for ContextMenuPreviewModifier(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  uint64_t v8 = *(void *)(a4 + 24);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v11 = *(void *)(v6 + 64);
  uint64_t v12 = *(unsigned __int8 *)(v9 + 80);
  if (v7 <= *(_DWORD *)(v9 + 84)) {
    unsigned int v13 = *(_DWORD *)(v9 + 84);
  }
  else {
    unsigned int v13 = *(_DWORD *)(v6 + 84);
  }
  if (v13 <= 0xFE) {
    unsigned int v14 = 254;
  }
  else {
    unsigned int v14 = v13;
  }
  size_t v15 = ((((v11 + v12 + ((v10 + 17) & ~v10)) & ~v12) + *(void *)(*(void *)(v8 - 8) + 64)) & 0xFFFFFFFFFFFFFFF8)
      + 25;
  char v16 = 8 * v15;
  if (v14 >= a3)
  {
    int v20 = 0;
    if (v14 >= a2)
    {
LABEL_20:
      switch(v20)
      {
        case 1:
          a1[v15] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_37;
        case 2:
          *(_WORD *)&a1[v15] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_37;
        case 3:
          goto LABEL_53;
        case 4:
          *(_DWORD *)&a1[v15] = 0;
          goto LABEL_36;
        default:
LABEL_36:
          if (a2)
          {
LABEL_37:
            unint64_t v23 = (unint64_t)(a1 + 11) & 0xFFFFFFFFFFFFFFF8;
            if (v13 > 0xFE)
            {
              uint64_t v24 = (v23 + v10 + 9) & ~v10;
              if (v7 == v14)
              {
                unint64_t v25 = *(void (**)(uint64_t))(v6 + 56);
                v25(v24);
              }
              else
              {
                uint64_t v26 = (v24 + v11 + v12) & ~v12;
                unint64_t v27 = *(void (**)(uint64_t))(v9 + 56);
                v27(v26);
              }
            }
            else if (a2 > 0xFE)
            {
              *(unsigned char *)(v23 + 8) = 0;
              *(void *)unint64_t v23 = a2 - 255;
            }
            else
            {
              *(unsigned char *)(v23 + 8) = -(char)a2;
            }
          }
          break;
      }
      return;
    }
  }
  else
  {
    unsigned int v17 = (a3 - v14 + 255) >> v16;
    if (v15 <= 3) {
      unsigned int v18 = v17 + 1;
    }
    else {
      unsigned int v18 = 2;
    }
    if (v18 >= 0x10000) {
      int v19 = 4;
    }
    else {
      int v19 = 2;
    }
    if (v18 < 0x100) {
      int v19 = 1;
    }
    if (v18 >= 2) {
      int v20 = v19;
    }
    else {
      int v20 = 0;
    }
    if (v14 >= a2) {
      goto LABEL_20;
    }
  }
  if (v15 < 4) {
    unsigned int v21 = ((~v14 + a2) >> v16) + 1;
  }
  else {
    unsigned int v21 = 1;
  }
  if (v15 >= 4) {
    unsigned int v22 = ~v14 + a2;
  }
  else {
    unsigned int v22 = (~(_BYTE)v14 + a2);
  }
  bzero(a1, v15);
  if (v15 == 1) {
    *a1 = v22;
  }
  else {
    *(_DWORD *)a1 = v22;
  }
  switch(v20)
  {
    case 1:
      a1[v15] = v21;
      break;
    case 2:
      *(_WORD *)&a1[v15] = v21;
      break;
    case 3:
LABEL_53:
      __break(1u);
      JUMPOUT(0x188236280);
    case 4:
      *(_DWORD *)&a1[v15] = v21;
      break;
    default:
      return;
  }
}

_UNKNOWN **base witness table accessor for ViewModifier in ContextMenuPreviewDestinationModifier<A, B, C>()
{
  return &protocol witness table for ContextMenuPreviewDestinationModifier<A, B, C>;
}

uint64_t type metadata accessor for ContextMenuPreviewDestinationModifier.Transform()
{
  return swift_getGenericMetadata();
}

uint64_t type metadata accessor for ContextMenuPreviewDestinationModifier.Child()
{
  return swift_getGenericMetadata();
}

void partial apply for closure #1 in ContextMenuPreviewResponder.previewHost.getter()
{
}

uint64_t type metadata completion function for ContextMenuPreviewDestinationModifier.Transform()
{
  uint64_t result = type metadata accessor for ContextMenuPreviewDestinationModifier();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for ContextMenuPreviewDestinationModifier.Transform(uint64_t *a1, uint64_t *a2, void *a3)
{
  char v3 = *(_DWORD *)(*(void *)(a3[4] - 8) + 80);
  char v4 = *(_DWORD *)(*(void *)(a3[3] - 8) + 80);
  int v5 = *(_DWORD *)(*(void *)(a3[2] - 8) + 80);
  uint64_t v6 = *a2;
  *a1 = *a2;
  uint64_t v7 = ((v4 | v3) | v5) & 0xF8 | 7u;
  uint64_t v8 = v6 + ((v7 + 16) & ~v7);
  swift_retain();
  return v8;
}

uint64_t destroy for ContextMenuPreviewDestinationModifier.Transform(uint64_t a1, void *a2)
{
  unint64_t v3 = (a1 + 15) & 0xFFFFFFFFFFFFFFF8;
  swift_release();
  uint64_t v4 = a2[3];
  uint64_t v5 = *(void *)(a2[2] - 8);
  uint64_t v6 = v5 + 8;
  uint64_t v7 = *(void *)(v4 - 8);
  uint64_t v8 = a2[4];
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = (*(_DWORD *)(v7 + 80) | *(_DWORD *)(v9 + 80) | *(_DWORD *)(v5 + 80));
  uint64_t v11 = *(_DWORD *)(v7 + 80);
  uint64_t v12 = *(_DWORD *)(v9 + 80);
  uint64_t v13 = (v3 + v10 + 16) & ~v10;
  (*(void (**)(uint64_t))(v5 + 8))(v13);
  uint64_t v14 = *(void *)(v6 + 56) + v11;
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))((v14 + v13) & ~v11, v4);
  uint64_t v15 = *(void *)(v7 + 64) + v12;
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v9 + 8))((v15 + ((v14 + v13) & ~v11)) & ~v12, v8);
  unint64_t v17 = *(void *)(((((((v13 + ((v15 + (v14 & ~v11)) & ~v12) + *(void *)(v9 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
                    + 31) & 0xFFFFFFFFFFFFFFF8)
                  + 8);
  if (v17 >= 0xFFFFFFFF) {
    LODWORD(v17) = -1;
  }
  if ((int)v17 - 1 < 0)
  {
    swift_weakDestroy();
    swift_release();
    return swift_release();
  }
  return result;
}

void *initializeWithCopy for ContextMenuPreviewDestinationModifier.Transform(void *a1, uint64_t *a2, void *a3)
{
  uint64_t v4 = *a2;
  unint64_t v3 = (unint64_t)a2 + 15;
  *a1 = v4;
  unint64_t v5 = ((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8;
  *(unsigned char *)unint64_t v5 = *(unsigned char *)(v3 & 0xFFFFFFFFFFFFFFF8);
  *(void *)(v5 + 8) = *(void *)((v3 & 0xFFFFFFFFFFFFFFF8) + 8);
  uint64_t v6 = a3[2];
  uint64_t v7 = a3[3];
  uint64_t v8 = *(void *)(v6 - 8);
  uint64_t v9 = *(void (**)(uint64_t, unint64_t, uint64_t))(v8 + 16);
  uint64_t v10 = v8 + 16;
  uint64_t v11 = *(void *)(v7 - 8);
  uint64_t v12 = *(_DWORD *)(v11 + 80);
  uint64_t v33 = a3[4];
  uint64_t v13 = *(void *)(v33 - 8);
  uint64_t v14 = *(_DWORD *)(v13 + 80);
  uint64_t v15 = (*(_DWORD *)(v11 + 80) | *(_DWORD *)(v13 + 80) | *(_DWORD *)(v8 + 80));
  uint64_t v16 = (v15 + 16 + v5) & ~v15;
  unint64_t v17 = (v15 + 16 + (v3 & 0xFFFFFFFFFFFFFFF8)) & ~v15;
  swift_retain();
  v9(v16, v17, v6);
  uint64_t v18 = *(void *)(v10 + 48) + v12;
  (*(void (**)(uint64_t, unint64_t, uint64_t))(v11 + 16))((v18 + v16) & ~v12, (v18 + v17) & ~v12, v7);
  uint64_t v19 = *(void *)(v11 + 64) + v14;
  (*(void (**)(uint64_t, unint64_t, uint64_t))(v13 + 16))((v19 + ((v18 + v16) & ~v12)) & ~v14, (v19 + ((v18 + v17) & ~v12)) & ~v14, v33);
  uint64_t v20 = *(void *)(v13 + 64) + ((v19 + (v18 & ~v12)) & ~v14) + 7;
  unint64_t v21 = v20 + v16;
  unsigned int v22 = (void *)((v20 + v17) & 0xFFFFFFFFFFFFFFF8);
  v21 &= 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v21 = *v22;
  unint64_t v23 = (v21 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v24 = ((unint64_t)v22 + 15) & 0xFFFFFFFFFFFFFFF8;
  long long v25 = *(_OWORD *)v24;
  *(void *)(v23 + 16) = *(void *)(v24 + 16);
  *(_OWORD *)unint64_t v23 = v25;
  unint64_t v26 = (v23 + 31) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v27 = (v24 + 31) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v28 = *(void *)(v27 + 8);
  if (v28 >= 0xFFFFFFFF) {
    LODWORD(v28) = -1;
  }
  if ((int)v28 - 1 < 0)
  {
    swift_weakCopyInit();
    *(void *)(v26 + 8) = *(void *)(v27 + 8);
    *(void *)(v26 + 16) = *(void *)(v27 + 16);
    swift_retain();
    swift_retain();
  }
  else
  {
    long long v29 = *(_OWORD *)v27;
    *(void *)(v26 + 16) = *(void *)(v27 + 16);
    *(_OWORD *)unint64_t v26 = v29;
  }
  unint64_t v30 = (v26 + 27) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v31 = (v27 + 27) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v30 = *(void *)v31;
  *(unsigned char *)(v30 + 8) = *(unsigned char *)(v31 + 8);
  return a1;
}

void *assignWithCopy for ContextMenuPreviewDestinationModifier.Transform(void *a1, void *a2, void *a3)
{
  *a1 = *a2;
  unint64_t v4 = ((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v5 = ((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8;
  *(unsigned char *)unint64_t v4 = *(unsigned char *)v5;
  *(void *)(v4 + 8) = *(void *)(v5 + 8);
  swift_retain();
  swift_release();
  uint64_t v6 = a3[3];
  uint64_t v7 = *(void *)(a3[2] - 8);
  uint64_t v8 = v7 + 24;
  uint64_t v9 = *(void *)(v6 - 8);
  uint64_t v10 = *(_DWORD *)(v9 + 80);
  uint64_t v34 = a3[4];
  uint64_t v11 = *(void *)(v34 - 8);
  uint64_t v12 = *(_DWORD *)(v11 + 80);
  uint64_t v13 = (*(_DWORD *)(v9 + 80) | *(_DWORD *)(v11 + 80) | *(_DWORD *)(v7 + 80));
  uint64_t v14 = (v13 + 16 + v4) & ~v13;
  uint64_t v15 = (v13 + 16 + v5) & ~v13;
  (*(void (**)(uint64_t, uint64_t))(v7 + 24))(v14, v15);
  uint64_t v16 = *(void *)(v8 + 40) + v10;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 24))((v16 + v14) & ~v10, (v16 + v15) & ~v10, v6);
  uint64_t v17 = *(void *)(v9 + 64) + v12;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 24))((v17 + ((v16 + v14) & ~v10)) & ~v12, (v17 + ((v16 + v15) & ~v10)) & ~v12, v34);
  uint64_t v18 = *(void *)(v11 + 64) + ((v17 + (v16 & ~v10)) & ~v12) + 7;
  uint64_t v19 = (void *)((v18 + v14) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v20 = (void *)((v18 + v15) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v19 = *v20;
  unint64_t v21 = ((unint64_t)v19 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v22 = ((unint64_t)v20 + 15) & 0xFFFFFFFFFFFFFFF8;
  long long v23 = *(_OWORD *)v22;
  *(void *)(v21 + 16) = *(void *)(v22 + 16);
  *(_OWORD *)unint64_t v21 = v23;
  unint64_t v24 = (v21 + 31) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v25 = (v22 + 31) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v26 = *(void *)(v24 + 8);
  if (v26 >= 0xFFFFFFFF) {
    LODWORD(v26) = -1;
  }
  int v27 = v26 - 1;
  unint64_t v28 = *(void *)(v25 + 8);
  if (v28 >= 0xFFFFFFFF) {
    LODWORD(v28) = -1;
  }
  int v29 = v28 - 1;
  if (v27 < 0)
  {
    if (v29 < 0)
    {
      swift_weakCopyAssign();
      *(void *)(v24 + 8) = *(void *)(v25 + 8);
      swift_retain();
      swift_release();
      *(void *)(v24 + 16) = *(void *)(v25 + 16);
      swift_retain();
      swift_release();
      goto LABEL_11;
    }
    swift_weakDestroy();
    swift_release();
    swift_release();
    goto LABEL_10;
  }
  if ((v29 & 0x80000000) == 0)
  {
LABEL_10:
    long long v30 = *(_OWORD *)v25;
    *(void *)(v24 + 16) = *(void *)(v25 + 16);
    *(_OWORD *)unint64_t v24 = v30;
    goto LABEL_11;
  }
  swift_weakCopyInit();
  *(void *)(v24 + 8) = *(void *)(v25 + 8);
  *(void *)(v24 + 16) = *(void *)(v25 + 16);
  swift_retain();
  swift_retain();
LABEL_11:
  unint64_t v31 = (v24 + 27) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v32 = (v25 + 27) & 0xFFFFFFFFFFFFFFF8;
  *(_DWORD *)unint64_t v31 = *(_DWORD *)v32;
  *(_DWORD *)(v31 + 4) = *(_DWORD *)(v32 + 4);
  *(unsigned char *)(v31 + 8) = *(unsigned char *)(v32 + 8);
  return a1;
}

void *initializeWithTake for ContextMenuPreviewDestinationModifier.Transform(void *a1, void *a2, void *a3)
{
  *a1 = *a2;
  unint64_t v3 = (_OWORD *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v4 = (_OWORD *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
  *unint64_t v3 = *v4;
  uint64_t v5 = a3[3];
  uint64_t v6 = *(void *)(a3[2] - 8);
  uint64_t v7 = v6 + 32;
  uint64_t v8 = *(void *)(v5 - 8);
  uint64_t v9 = *(_DWORD *)(v8 + 80);
  uint64_t v30 = a3[4];
  uint64_t v10 = *(void *)(v30 - 8);
  uint64_t v11 = *(_DWORD *)(v10 + 80);
  uint64_t v12 = (*(_DWORD *)(v8 + 80) | *(_DWORD *)(v10 + 80) | *(_DWORD *)(v6 + 80));
  uint64_t v13 = ((unint64_t)v3 + v12 + 16) & ~v12;
  uint64_t v14 = ((unint64_t)v4 + v12 + 16) & ~v12;
  (*(void (**)(uint64_t, uint64_t, void))(v6 + 32))(v13, v14, a3[2]);
  uint64_t v15 = *(void *)(v7 + 32) + v9;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 32))((v15 + v13) & ~v9, (v15 + v14) & ~v9, v5);
  uint64_t v16 = *(void *)(v8 + 64) + v11;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 32))((v16 + ((v15 + v13) & ~v9)) & ~v11, (v16 + ((v15 + v14) & ~v9)) & ~v11, v30);
  uint64_t v17 = *(void *)(v10 + 64) + ((v16 + (v15 & ~v9)) & ~v11) + 7;
  uint64_t v18 = (void *)((v17 + v13) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v19 = (void *)((v17 + v14) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v18 = *v19;
  unint64_t v20 = ((unint64_t)v18 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v21 = ((unint64_t)v19 + 15) & 0xFFFFFFFFFFFFFFF8;
  long long v22 = *(_OWORD *)v21;
  *(void *)(v20 + 16) = *(void *)(v21 + 16);
  *(_OWORD *)unint64_t v20 = v22;
  unint64_t v23 = (v20 + 31) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v24 = (v21 + 31) & 0xFFFFFFFFFFFFFFF8;
  int v25 = *(void *)(v24 + 8);
  if (*(void *)(v24 + 8) >= 0xFFFFFFFFuLL) {
    int v25 = -1;
  }
  if (v25 - 1 < 0)
  {
    unint64_t v23 = swift_weakTakeInit();
    *(_OWORD *)(v23 + 8) = *(_OWORD *)(v24 + 8);
  }
  else
  {
    long long v26 = *(_OWORD *)v24;
    *(void *)(v23 + 16) = *(void *)(v24 + 16);
    *(_OWORD *)unint64_t v23 = v26;
  }
  unint64_t v27 = (v23 + 27) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v28 = (v24 + 27) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v27 = *(void *)v28;
  *(unsigned char *)(v27 + 8) = *(unsigned char *)(v28 + 8);
  return a1;
}

void *assignWithTake for ContextMenuPreviewDestinationModifier.Transform(void *a1, void *a2, void *a3)
{
  *a1 = *a2;
  unint64_t v4 = ((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v5 = ((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8;
  *(unsigned char *)unint64_t v4 = *(unsigned char *)v5;
  *(void *)(v4 + 8) = *(void *)(v5 + 8);
  swift_release();
  uint64_t v6 = a3[3];
  uint64_t v7 = *(void *)(a3[2] - 8);
  uint64_t v8 = v7 + 40;
  uint64_t v9 = *(void *)(v6 - 8);
  uint64_t v10 = *(_DWORD *)(v9 + 80);
  uint64_t v34 = a3[4];
  uint64_t v11 = *(void *)(v34 - 8);
  uint64_t v12 = *(_DWORD *)(v11 + 80);
  uint64_t v13 = (*(_DWORD *)(v9 + 80) | *(_DWORD *)(v11 + 80) | *(_DWORD *)(v7 + 80));
  uint64_t v14 = (v13 + 16 + v4) & ~v13;
  uint64_t v15 = (v13 + 16 + v5) & ~v13;
  (*(void (**)(uint64_t, uint64_t))(v7 + 40))(v14, v15);
  uint64_t v16 = *(void *)(v8 + 24) + v10;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 40))((v16 + v14) & ~v10, (v16 + v15) & ~v10, v6);
  uint64_t v17 = *(void *)(v9 + 64) + v12;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 40))((v17 + ((v16 + v14) & ~v10)) & ~v12, (v17 + ((v16 + v15) & ~v10)) & ~v12, v34);
  uint64_t v18 = *(void *)(v11 + 64) + ((v17 + (v16 & ~v10)) & ~v12) + 7;
  uint64_t v19 = (void *)((v18 + v14) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v20 = (void *)((v18 + v15) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v19 = *v20;
  unint64_t v21 = ((unint64_t)v19 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v22 = ((unint64_t)v20 + 15) & 0xFFFFFFFFFFFFFFF8;
  long long v23 = *(_OWORD *)v22;
  *(void *)(v21 + 16) = *(void *)(v22 + 16);
  *(_OWORD *)unint64_t v21 = v23;
  unint64_t v24 = (v21 + 31) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v25 = (v22 + 31) & 0xFFFFFFFFFFFFFFF8;
  int v26 = *(void *)(v24 + 8);
  if (*(void *)(v24 + 8) >= 0xFFFFFFFFuLL) {
    int v26 = -1;
  }
  int v27 = v26 - 1;
  unint64_t v28 = *(void *)(v25 + 8);
  if (v28 >= 0xFFFFFFFF) {
    LODWORD(v28) = -1;
  }
  int v29 = v28 - 1;
  if (v27 < 0)
  {
    if (v29 < 0)
    {
      swift_weakTakeAssign();
      *(void *)(v24 + 8) = *(void *)(v25 + 8);
      swift_release();
      *(void *)(v24 + 16) = *(void *)(v25 + 16);
      swift_release();
      goto LABEL_11;
    }
    swift_weakDestroy();
    swift_release();
    swift_release();
    goto LABEL_10;
  }
  if ((v29 & 0x80000000) == 0)
  {
LABEL_10:
    long long v30 = *(_OWORD *)v25;
    *(void *)(v24 + 16) = *(void *)(v25 + 16);
    *(_OWORD *)unint64_t v24 = v30;
    goto LABEL_11;
  }
  swift_weakTakeInit();
  *(_OWORD *)(v24 + 8) = *(_OWORD *)(v25 + 8);
LABEL_11:
  unint64_t v31 = (v24 + 27) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v32 = (v25 + 27) & 0xFFFFFFFFFFFFFFF8;
  *(_DWORD *)unint64_t v31 = *(_DWORD *)v32;
  *(_DWORD *)(v31 + 4) = *(_DWORD *)(v32 + 4);
  *(unsigned char *)(v31 + 8) = *(unsigned char *)(v32 + 8);
  return a1;
}

uint64_t getEnumTagSinglePayload for ContextMenuPreviewDestinationModifier.Transform(unsigned __int8 *a1, unsigned int a2, void *a3)
{
  uint64_t v5 = *(void *)(a3[2] - 8);
  unsigned int v6 = *(_DWORD *)(v5 + 84);
  uint64_t v7 = a3[3];
  uint64_t v8 = a3[4];
  uint64_t v9 = *(void *)(v7 - 8);
  uint64_t v10 = *(unsigned int *)(v9 + 84);
  if (v10 <= v6) {
    unsigned int v11 = *(_DWORD *)(v5 + 84);
  }
  else {
    unsigned int v11 = *(_DWORD *)(v9 + 84);
  }
  uint64_t v12 = *(void *)(v8 - 8);
  uint64_t v13 = *(unsigned int *)(v12 + 84);
  if (v13 <= v11) {
    unsigned int v14 = v11;
  }
  else {
    unsigned int v14 = *(_DWORD *)(v12 + 84);
  }
  if (v14 <= 0x7FFFFFFE) {
    unsigned int v15 = 2147483646;
  }
  else {
    unsigned int v15 = v14;
  }
  if (!a2) {
    return 0;
  }
  uint64_t v16 = *(_DWORD *)(v9 + 80);
  uint64_t v17 = *(_DWORD *)(v12 + 80);
  uint64_t v18 = (*(_DWORD *)(v9 + 80) | *(_DWORD *)(v5 + 80) | *(_DWORD *)(v12 + 80));
  uint64_t v19 = *(void *)(*(void *)(a3[2] - 8) + 64) + v16;
  uint64_t v20 = *(void *)(*(void *)(v7 - 8) + 64) + v17;
  if (v15 < a2)
  {
    unint64_t v21 = ((((((((*(void *)(*(void *)(v8 - 8) + 64) + ((v20 + (v19 & ~v16)) & ~v17) + ((v18 + 24) & ~v18) + 7) & 0xFFFFFFFFFFFFFFF8)
              + 15) & 0xFFFFFFFFFFFFFFF8)
            + 31) & 0xFFFFFFFFFFFFFFF8)
          + 27) & 0xFFFFFFFFFFFFFFF8)
        + 9;
    unsigned int v22 = (a2 - v15 + 255) >> (8 * v21);
    if (v21 < 4) {
      unsigned int v23 = v22 + 1;
    }
    else {
      unsigned int v23 = 2;
    }
    if (v23 >= 0x10000) {
      LODWORD(v24) = 4;
    }
    else {
      LODWORD(v24) = 2;
    }
    if (v23 < 0x100) {
      LODWORD(v24) = 1;
    }
    if (v23 >= 2) {
      uint64_t v24 = v24;
    }
    else {
      uint64_t v24 = 0;
    }
    switch(v24)
    {
      case 1:
        int v25 = a1[v21];
        if (!a1[v21]) {
          break;
        }
        goto LABEL_28;
      case 2:
        int v25 = *(unsigned __int16 *)&a1[v21];
        if (*(_WORD *)&a1[v21]) {
          goto LABEL_28;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x18823741CLL);
      case 4:
        int v25 = *(_DWORD *)&a1[v21];
        if (!v25) {
          break;
        }
LABEL_28:
        int v27 = (v25 - 1) << (8 * v21);
        if (v21 >= 4) {
          int v27 = 0;
        }
        if (((((((((*(_DWORD *)(*(void *)(v8 - 8) + 64)
                   + ((v20 + (v19 & ~v16)) & ~v17)
                   + ((v18 + 24) & ~v18)
                   + 7) & 0xFFFFFFF8)
                 + 15) & 0xFFFFFFF8)
               + 31) & 0xFFFFFFF8)
             + 27) & 0xFFFFFFF8) == 0xFFFFFFF8)
          int v28 = *a1;
        else {
          int v28 = *(_DWORD *)a1;
        }
        int v31 = v15 + (v28 | v27);
        return (v31 + 1);
      default:
        break;
    }
  }
  unint64_t v29 = (unint64_t)(a1 + 15) & 0xFFFFFFFFFFFFFFF8;
  if (v14 > 0x7FFFFFFE)
  {
    uint64_t v32 = (v29 + v18 + 16) & ~v18;
    if (v6 == v14)
    {
      uint64_t v33 = *(uint64_t (**)(uint64_t))(v5 + 48);
      return v33(v32);
    }
    else
    {
      uint64_t v34 = (v19 + v32) & ~v16;
      if (v10 == v14)
      {
        uint64_t v35 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
        return v35(v34, v10, v7);
      }
      else
      {
        uint64_t v36 = (v20 + v34) & ~v17;
        uint64_t v37 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
        return v37(v36, v13, v8);
      }
    }
  }
  else
  {
    unint64_t v30 = *(void *)(v29 + 8);
    if (v30 >= 0xFFFFFFFF) {
      LODWORD(v30) = -1;
    }
    int v31 = v30 - 1;
    if (v31 < 0) {
      int v31 = -1;
    }
    return (v31 + 1);
  }
}

void storeEnumTagSinglePayload for ContextMenuPreviewDestinationModifier.Transform(char *a1, unsigned int a2, unsigned int a3, void *a4)
{
  uint64_t v6 = *(void *)(a4[2] - 8);
  uint64_t v7 = a4[3];
  uint64_t v8 = a4[4];
  unsigned int v9 = *(_DWORD *)(v6 + 84);
  uint64_t v10 = *(void *)(v7 - 8);
  unsigned int v11 = *(_DWORD *)(v10 + 84);
  if (v11 <= v9) {
    unsigned int v12 = *(_DWORD *)(v6 + 84);
  }
  else {
    unsigned int v12 = *(_DWORD *)(v10 + 84);
  }
  uint64_t v13 = *(void *)(v8 - 8);
  int v14 = *(_DWORD *)(v10 + 80);
  int v15 = *(_DWORD *)(v13 + 80);
  if (*(_DWORD *)(v13 + 84) <= v12) {
    unsigned int v16 = v12;
  }
  else {
    unsigned int v16 = *(_DWORD *)(v13 + 84);
  }
  if (v16 <= 0x7FFFFFFE) {
    unsigned int v17 = 2147483646;
  }
  else {
    unsigned int v17 = v16;
  }
  uint64_t v18 = (v14 | *(_DWORD *)(v6 + 80) | v15);
  uint64_t v19 = *(void *)(*(void *)(a4[2] - 8) + 64) + *(_DWORD *)(v10 + 80);
  uint64_t v20 = *(void *)(*(void *)(v7 - 8) + 64) + *(_DWORD *)(v13 + 80);
  size_t v21 = ((v20 + (v19 & ~(unint64_t)*(_DWORD *)(v10 + 80))) & ~(unint64_t)*(_DWORD *)(v13 + 80))
      + *(void *)(*(void *)(v8 - 8) + 64);
  unint64_t v22 = ((((((((((v18 + 24) & ~v18) + v21 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8)
        + 27) & 0xFFFFFFFFFFFFFFF8)
      + 9;
  char v23 = 8 * v22;
  if (v17 >= a3)
  {
    int v26 = 0;
    if (v17 >= a2) {
      goto LABEL_22;
    }
LABEL_26:
    unsigned int v28 = ~v17 + a2;
    unsigned int v29 = (~(_BYTE)v17 + a2);
    if (v22 < 4) {
      int v30 = (v28 >> v23) + 1;
    }
    else {
      int v30 = 1;
    }
    if (v22 >= 4) {
      unsigned int v31 = v28;
    }
    else {
      unsigned int v31 = v29;
    }
    bzero(a1, ((((((((((v18 + 24) & ~v18) + v21 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8)+ 27) & 0xFFFFFFFFFFFFFFF8)+ 9);
    if (v22 == 1) {
      *a1 = v31;
    }
    else {
      *(_DWORD *)a1 = v31;
    }
    switch(v26)
    {
      case 1:
        a1[v22] = v30;
        break;
      case 2:
        *(_WORD *)&a1[v22] = v30;
        break;
      case 3:
LABEL_72:
        __break(1u);
        JUMPOUT(0x188237894);
      case 4:
        *(_DWORD *)&a1[v22] = v30;
        break;
      default:
        return;
    }
    return;
  }
  unsigned int v24 = (a3 - v17 + 255) >> v23;
  if (v22 <= 3) {
    unsigned int v25 = v24 + 1;
  }
  else {
    unsigned int v25 = 2;
  }
  if (v25 >= 0x10000) {
    int v26 = 4;
  }
  else {
    int v26 = 2;
  }
  if (v25 < 0x100) {
    int v26 = 1;
  }
  if (v25 < 2) {
    int v26 = 0;
  }
  if (v17 < a2) {
    goto LABEL_26;
  }
LABEL_22:
  switch(v26)
  {
    case 1:
      a1[v22] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_39;
    case 2:
      *(_WORD *)&a1[v22] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_39;
    case 3:
      goto LABEL_72;
    case 4:
      *(_DWORD *)&a1[v22] = 0;
      goto LABEL_38;
    default:
LABEL_38:
      if (!a2) {
        return;
      }
LABEL_39:
      uint64_t v32 = (void *)((unint64_t)(a1 + 15) & 0xFFFFFFFFFFFFFFF8);
      if (v16 <= 0x7FFFFFFE)
      {
        if (a2 > 0x7FFFFFFE)
        {
          *uint64_t v32 = a2 - 0x7FFFFFFF;
          v32[1] = 0;
        }
        else
        {
          v32[1] = a2;
        }
        return;
      }
      uint64_t v27 = ~v18;
      uint64_t v33 = ((unint64_t)v32 + v18 + 16) & ~v18;
      if (v16 < a2)
      {
        if (v21 <= 3) {
          int v34 = ~(-1 << (8 * v21));
        }
        else {
          int v34 = -1;
        }
        if (v21)
        {
          int v35 = v34 & (~v16 + a2);
          if (v21 <= 3) {
            int v36 = v21;
          }
          else {
            int v36 = 4;
          }
          bzero((void *)(((unint64_t)v32 + v18 + 16) & v27), v21);
          switch(v36)
          {
            case 2:
              *(_WORD *)uint64_t v33 = v35;
              break;
            case 3:
              *(_WORD *)uint64_t v33 = v35;
              *(unsigned char *)(v33 + 2) = BYTE2(v35);
              break;
            case 4:
              *(_DWORD *)uint64_t v33 = v35;
              break;
            default:
              *(unsigned char *)uint64_t v33 = v35;
              break;
          }
        }
        return;
      }
      if (v9 == v16)
      {
        uint64_t v37 = *(void (**)(unint64_t))(v6 + 56);
        unint64_t v38 = ((unint64_t)v32 + v18 + 16) & v27;
LABEL_61:
        v37(v38);
        return;
      }
      unint64_t v39 = (v19 + v33) & ~(unint64_t)v14;
      if (v11 != v16)
      {
        unint64_t v38 = (v20 + v39) & ~(unint64_t)v15;
        uint64_t v37 = *(void (**)(unint64_t))(v13 + 56);
        goto LABEL_61;
      }
      int v40 = *(void (**)(unint64_t))(v10 + 56);
      v40(v39);
      break;
  }
}

uint64_t *initializeBufferWithCopyOfBuffer for ContextMenuPreviewModifierCore(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  unint64_t v4 = a1;
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  uint64_t v7 = *(void *)(a3 + 24);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(_DWORD *)(v8 + 80);
  uint64_t v10 = v6 + v9;
  uint64_t v11 = *(void *)(v8 + 64);
  unint64_t v12 = ((((((v6 + v9) & ~v9) + v11) & 0xFFFFFFFFFFFFFFFCLL) + 15) & 0xFFFFFFFFFFFFFFF8) + 17;
  unsigned int v13 = v9 | *(_DWORD *)(v5 + 80) & 0xF8;
  if (v13 > 7 || ((*(_DWORD *)(v5 + 80) | *(_DWORD *)(v8 + 80)) & 0x100000) != 0 || v12 > 0x18)
  {
    uint64_t v16 = *a2;
    *unint64_t v4 = *a2;
    unint64_t v4 = (uint64_t *)(v16 + (((v13 | 7) + 16) & ~(unint64_t)(v13 | 7)));
    swift_retain();
  }
  else
  {
    uint64_t v17 = ~v9;
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    unint64_t v18 = ((unint64_t)v4 + v10) & v17;
    unint64_t v19 = ((unint64_t)a2 + v10) & v17;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v8 + 16))(v18, v19, v7);
    *(unsigned char *)(v18 + v11) = *(unsigned char *)(v19 + v11);
    unint64_t v20 = (v18 + v11) & 0xFFFFFFFFFFFFFFFCLL;
    unint64_t v21 = (v19 + v11) & 0xFFFFFFFFFFFFFFFCLL;
    *(_DWORD *)(v20 + 4) = *(_DWORD *)(v21 + 4);
    unint64_t v22 = (v20 + 15) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v23 = (v21 + 15) & 0xFFFFFFFFFFFFFFF8;
    char v24 = *(unsigned char *)(v23 + 16);
    if ((v24 & 0x7E) != 0)
    {
      long long v25 = *(_OWORD *)v23;
      *(unsigned char *)(v22 + 16) = *(unsigned char *)(v23 + 16);
      *(_OWORD *)unint64_t v22 = v25;
    }
    else
    {
      uint64_t v26 = *(void *)v23;
      uint64_t v27 = *(void *)(v23 + 8);
      outlined copy of ContextMenuPreviewAction(*(void *)v23, v27, *(unsigned char *)(v23 + 16));
      *(void *)unint64_t v22 = v26;
      *(void *)(v22 + 8) = v27;
      *(unsigned char *)(v22 + 16) = v24;
    }
  }
  return v4;
}

uint64_t assignWithCopy for ContextMenuPreviewModifierCore(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8) + 24;
  (*(void (**)(void))v6)();
  uint64_t v7 = *(void *)(v6 + 40);
  uint64_t v8 = *(void *)(*(void *)(a3 + 24) - 8);
  uint64_t v9 = v8 + 24;
  uint64_t v10 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v11 = v7 + v10;
  uint64_t v12 = (v11 + a1) & ~v10;
  uint64_t v13 = (v11 + a2) & ~v10;
  (*(void (**)(uint64_t, uint64_t))(v8 + 24))(v12, v13);
  uint64_t v14 = *(void *)(v9 + 40);
  uint64_t v15 = v14 + v12;
  uint64_t v16 = v14 + v13;
  *(unsigned char *)uint64_t v15 = *(unsigned char *)v16;
  v15 &= 0xFFFFFFFFFFFFFFFCLL;
  v16 &= 0xFFFFFFFFFFFFFFFCLL;
  *(_DWORD *)(v15 + 4) = *(_DWORD *)(v16 + 4);
  unint64_t v17 = (v15 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v18 = (v16 + 15) & 0xFFFFFFFFFFFFFFF8;
  char v19 = *(unsigned char *)(v18 + 16);
  if ((*(unsigned char *)(v17 + 16) & 0x7E) == 0)
  {
    if ((v19 & 0x7E) == 0)
    {
      uint64_t v24 = *(void *)v18;
      uint64_t v25 = *(void *)(v18 + 8);
      outlined copy of ContextMenuPreviewAction(v24, v25, v19);
      uint64_t v26 = *(void *)v17;
      uint64_t v27 = *(void *)(v17 + 8);
      *(void *)unint64_t v17 = v24;
      *(void *)(v17 + 8) = v25;
      char v28 = *(unsigned char *)(v17 + 16);
      *(unsigned char *)(v17 + 16) = v19;
      outlined consume of ContextMenuPreviewAction(v26, v27, v28);
      return a1;
    }
    outlined consume of ContextMenuPreviewAction(*(void *)v17, *(void *)(v17 + 8), *(unsigned char *)(v17 + 16));
    goto LABEL_6;
  }
  if ((v19 & 0x7E) != 0)
  {
LABEL_6:
    long long v22 = *(_OWORD *)v18;
    *(unsigned char *)(v17 + 16) = *(unsigned char *)(v18 + 16);
    *(_OWORD *)unint64_t v17 = v22;
    return a1;
  }
  uint64_t v20 = *(void *)v18;
  uint64_t v21 = *(void *)(v18 + 8);
  outlined copy of ContextMenuPreviewAction(v20, v21, v19);
  *(void *)unint64_t v17 = v20;
  *(void *)(v17 + 8) = v21;
  *(unsigned char *)(v17 + 16) = v19;
  return a1;
}

uint64_t initializeWithTake for ContextMenuPreviewModifierCore(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8) + 32;
  (*(void (**)(void))v6)();
  uint64_t v7 = *(void *)(v6 + 32);
  uint64_t v8 = *(void *)(*(void *)(a3 + 24) - 8);
  uint64_t v9 = v8 + 32;
  uint64_t v10 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v11 = v7 + v10;
  uint64_t v12 = (v11 + a1) & ~v10;
  uint64_t v13 = (v11 + a2) & ~v10;
  (*(void (**)(uint64_t, uint64_t))(v8 + 32))(v12, v13);
  uint64_t v14 = *(void *)(v9 + 32);
  uint64_t v15 = v14 + v12;
  uint64_t v16 = v14 + v13;
  *(unsigned char *)uint64_t v15 = *(unsigned char *)v16;
  v15 &= 0xFFFFFFFFFFFFFFFCLL;
  v16 &= 0xFFFFFFFFFFFFFFFCLL;
  *(_DWORD *)(v15 + 4) = *(_DWORD *)(v16 + 4);
  unint64_t v17 = (v15 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v18 = (v16 + 15) & 0xFFFFFFFFFFFFFFF8;
  char v19 = *(unsigned char *)(v18 + 16);
  *(_OWORD *)unint64_t v17 = *(_OWORD *)v18;
  *(unsigned char *)(v17 + 16) = v19;
  return a1;
}

uint64_t assignWithTake for ContextMenuPreviewModifierCore(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8) + 40;
  (*(void (**)(void))v6)();
  uint64_t v7 = *(void *)(v6 + 24);
  uint64_t v8 = *(void *)(*(void *)(a3 + 24) - 8);
  uint64_t v9 = v8 + 40;
  uint64_t v10 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v11 = v7 + v10;
  uint64_t v12 = (v11 + a1) & ~v10;
  uint64_t v13 = (v11 + a2) & ~v10;
  (*(void (**)(uint64_t, uint64_t))(v8 + 40))(v12, v13);
  uint64_t v14 = *(void *)(v9 + 24);
  uint64_t v15 = v14 + v12;
  uint64_t v16 = v14 + v13;
  *(unsigned char *)uint64_t v15 = *(unsigned char *)v16;
  v15 &= 0xFFFFFFFFFFFFFFFCLL;
  v16 &= 0xFFFFFFFFFFFFFFFCLL;
  *(_DWORD *)(v15 + 4) = *(_DWORD *)(v16 + 4);
  unint64_t v17 = (v15 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v18 = (v16 + 15) & 0xFFFFFFFFFFFFFFF8;
  char v19 = *(unsigned char *)(v17 + 16);
  if ((v19 & 0x7E) == 0)
  {
    char v20 = *(unsigned char *)(v18 + 16);
    uint64_t v21 = *(void *)v17;
    uint64_t v22 = *(void *)(v17 + 8);
    if ((v20 & 0x7E) == 0)
    {
      *(_OWORD *)unint64_t v17 = *(_OWORD *)v18;
      *(unsigned char *)(v17 + 16) = v20;
      outlined consume of ContextMenuPreviewAction(v21, v22, v19);
      return a1;
    }
    outlined consume of ContextMenuPreviewAction(v21, v22, v19);
  }
  long long v23 = *(_OWORD *)v18;
  *(unsigned char *)(v17 + 16) = *(unsigned char *)(v18 + 16);
  *(_OWORD *)unint64_t v17 = v23;
  return a1;
}

uint64_t getEnumTagSinglePayload for ContextMenuPreviewModifierCore(unsigned __int8 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(unsigned int *)(v5 + 84);
  uint64_t v7 = *(void *)(*(void *)(a3 + 24) - 8);
  unsigned int v8 = *(_DWORD *)(v7 + 84);
  uint64_t v9 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v10 = *(void *)(v7 + 64);
  if (v8 <= v6) {
    unsigned int v11 = *(_DWORD *)(v5 + 84);
  }
  else {
    unsigned int v11 = *(_DWORD *)(v7 + 84);
  }
  if (v11 <= 0xFE) {
    unsigned int v11 = 254;
  }
  if (!a2) {
    return 0;
  }
  uint64_t v12 = *(void *)(*(void *)(v4 - 8) + 64) + v9;
  if (v11 < a2)
  {
    unint64_t v13 = (((((v12 & ~v9) + v10) & 0xFFFFFFFFFFFFFFFCLL) + 15) & 0xFFFFFFFFFFFFFFF8) + 17;
    unsigned int v14 = (a2 - v11 + 255) >> (8 * v13);
    if (v13 < 4) {
      unsigned int v15 = v14 + 1;
    }
    else {
      unsigned int v15 = 2;
    }
    if (v15 >= 0x10000) {
      LODWORD(v16) = 4;
    }
    else {
      LODWORD(v16) = 2;
    }
    if (v15 < 0x100) {
      LODWORD(v16) = 1;
    }
    if (v15 >= 2) {
      uint64_t v16 = v16;
    }
    else {
      uint64_t v16 = 0;
    }
    switch(v16)
    {
      case 1:
        int v17 = a1[v13];
        if (!a1[v13]) {
          break;
        }
        goto LABEL_23;
      case 2:
        int v17 = *(unsigned __int16 *)&a1[v13];
        if (*(_WORD *)&a1[v13]) {
          goto LABEL_23;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x188238034);
      case 4:
        int v17 = *(_DWORD *)&a1[v13];
        if (!v17) {
          break;
        }
LABEL_23:
        int v18 = (v17 - 1) << (8 * v13);
        if (v13 >= 4) {
          int v18 = 0;
        }
        if ((((((v12 & ~v9) + v10) & 0xFFFFFFFC) + 15) & 0xFFFFFFF8) == 0xFFFFFFF0) {
          int v19 = *a1;
        }
        else {
          int v19 = *(_DWORD *)a1;
        }
        return v11 + (v19 | v18) + 1;
      default:
        break;
    }
  }
  if (v6 == v11) {
    return (*(uint64_t (**)(unsigned __int8 *, uint64_t, uint64_t))(v5 + 48))(a1, v6, v4);
  }
  unint64_t v21 = (unint64_t)&a1[v12] & ~v9;
  if (v8 == v11) {
    return (*(uint64_t (**)(unint64_t))(v7 + 48))(v21);
  }
  unsigned int v22 = *(unsigned __int8 *)(v21 + v10);
  if (v22 >= 2) {
    return ((v22 + 2147483646) & 0x7FFFFFFF) + 1;
  }
  else {
    return 0;
  }
}

void storeEnumTagSinglePayload for ContextMenuPreviewModifierCore(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  uint64_t v8 = *(void *)(*(void *)(a4 + 24) - 8);
  unsigned int v9 = *(_DWORD *)(v8 + 84);
  uint64_t v10 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v11 = *(void *)(v8 + 64);
  if (v9 <= v7) {
    unsigned int v12 = *(_DWORD *)(v6 + 84);
  }
  else {
    unsigned int v12 = *(_DWORD *)(v8 + 84);
  }
  if (v12 <= 0xFE) {
    unsigned int v12 = 254;
  }
  uint64_t v13 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64) + v10;
  size_t v14 = (((((v13 & ~v10) + v11) & 0xFFFFFFFFFFFFFFFCLL) + 15) & 0xFFFFFFFFFFFFFFF8) + 17;
  char v15 = 8 * v14;
  if (v12 >= a3)
  {
    int v19 = 0;
    if (v12 >= a2)
    {
LABEL_19:
      switch(v19)
      {
        case 1:
          a1[v14] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_36;
        case 2:
          *(_WORD *)&a1[v14] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_36;
        case 3:
          goto LABEL_50;
        case 4:
          *(_DWORD *)&a1[v14] = 0;
          goto LABEL_35;
        default:
LABEL_35:
          if (a2)
          {
LABEL_36:
            if (v7 == v12)
            {
              unsigned int v22 = *(void (**)(void))(v6 + 56);
              v22();
            }
            else
            {
              unint64_t v23 = (unint64_t)&a1[v13] & ~v10;
              if (v9 == v12)
              {
                uint64_t v24 = *(void (**)(unint64_t))(v8 + 56);
                v24(v23);
              }
              else
              {
                *(unsigned char *)(v23 + v11) = a2 + 1;
              }
            }
          }
          break;
      }
      return;
    }
  }
  else
  {
    unsigned int v16 = (a3 - v12 + 255) >> v15;
    if (v14 <= 3) {
      unsigned int v17 = v16 + 1;
    }
    else {
      unsigned int v17 = 2;
    }
    if (v17 >= 0x10000) {
      int v18 = 4;
    }
    else {
      int v18 = 2;
    }
    if (v17 < 0x100) {
      int v18 = 1;
    }
    if (v17 >= 2) {
      int v19 = v18;
    }
    else {
      int v19 = 0;
    }
    if (v12 >= a2) {
      goto LABEL_19;
    }
  }
  if (v14 < 4) {
    unsigned int v20 = ((~v12 + a2) >> v15) + 1;
  }
  else {
    unsigned int v20 = 1;
  }
  if (v14 >= 4) {
    unsigned int v21 = ~v12 + a2;
  }
  else {
    unsigned int v21 = (~(_BYTE)v12 + a2);
  }
  bzero(a1, v14);
  if (v14 == 1) {
    *a1 = v21;
  }
  else {
    *(_DWORD *)a1 = v21;
  }
  switch(v19)
  {
    case 1:
      a1[v14] = v20;
      break;
    case 2:
      *(_WORD *)&a1[v14] = v20;
      break;
    case 3:
LABEL_50:
      __break(1u);
      JUMPOUT(0x1882382F8);
    case 4:
      *(_DWORD *)&a1[v14] = v20;
      break;
    default:
      return;
  }
}

uint64_t sub_188238320()
{
  return swift_getWitnessTable();
}

_UNKNOWN **base witness table accessor for ViewModifier in ContextMenuPreviewModifierCore<A, B>()
{
  return &protocol witness table for ContextMenuPreviewModifierCore<A, B>;
}

uint64_t associated type witness table accessor for ViewModifier.Body : View in ContextMenuPreviewDestinationModifier<A, B, C>.Transform()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t base witness table accessor for _AttributeBody in ContextMenuPreviewDestinationModifier<A, B, C>.Child()
{
  return swift_getWitnessTable();
}

uint64_t sub_188238584()
{
  return swift_getWitnessTable();
}

uint64_t specialized ContextMenuPreviewResponder.preview.setter(uint64_t a1)
{
  uint64_t v3 = *v1 + class metadata base offset for ContextMenuPreviewResponder;
  uint64_t v4 = type metadata accessor for Optional();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  unsigned int v7 = &v10[-v6];
  uint64_t v8 = (char *)v1 + *(void *)(v3 + 16);
  swift_beginAccess();
  (*(void (**)(unsigned char *, char *, uint64_t))(v5 + 16))(v7, v8, v4);
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 24))(v8, a1, v4);
  swift_endAccess();
  ContextMenuPreviewResponder.preview.didset((uint64_t)v7);
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v5 + 8))(v7, v4);
}

void partial apply for closure #1 in ContextMenuPreviewResponder.preview.didset()
{
  closure #1 in ContextMenuPreviewResponder.preview.didset(*(void **)(v0 + 16));
}

uint64_t destroy for SectionedIdentifierAccumulator()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for SectionedIdentifierAccumulator(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v3 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v3;
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for SectionedIdentifierAccumulator(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  return a1;
}

uint64_t assignWithTake for SectionedIdentifierAccumulator(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  return a1;
}

ValueMetadata *type metadata accessor for SectionedIdentifierAccumulator()
{
  return &type metadata for SectionedIdentifierAccumulator;
}

uint64_t SectionedIdentifierAccumulator.visit(view:traits:)(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = v2;
  uint64_t v4 = *a2;
  v33[0] = *a2;
  if (ViewTraitCollection.groupDepth.getter()) {
    goto LABEL_17;
  }
  v33[0] = v4;
  if (ViewTraitCollection.isSectioned.getter())
  {
    *(unsigned char *)(v2 + 32) = 1;
    *(unsigned char *)(v2 + 48) = 0;
    v33[0] = v4;
    char v5 = ViewTraitCollection.isEmptyView.getter();
    uint64_t v6 = *(void *)(v2 + 56);
    unsigned int v7 = *(char **)(v2 + 8);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      unsigned int v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v7 + 2) + 1, 1, v7);
    }
    char v8 = v5 ^ 1;
    unint64_t v9 = *((void *)v7 + 2);
    unint64_t v10 = *((void *)v7 + 3);
    unint64_t v11 = v9 + 1;
    if (v9 >= v10 >> 1)
    {
      uint64_t v25 = v7;
      char v31 = v8;
      unint64_t v26 = *((void *)v7 + 2);
      uint64_t v27 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v10 > 1), v9 + 1, 1, v25);
      unint64_t v9 = v26;
      char v8 = v31;
      unsigned int v7 = v27;
    }
    *((void *)v7 + 2) = v11;
    unsigned int v12 = &v7[16 * v9];
    *((void *)v12 + 4) = v6;
    v12[40] = 0;
    v12[41] = v8 & 1;
  }
  else
  {
    if (*(unsigned char *)(v2 + 48)) {
      goto LABEL_15;
    }
    *(unsigned char *)(v2 + 48) = 1;
    uint64_t v13 = *(void *)(v2 + 56);
    unsigned int v7 = *(char **)(v2 + 8);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      unsigned int v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v7 + 2) + 1, 1, v7);
    }
    unint64_t v14 = *((void *)v7 + 2);
    unint64_t v15 = *((void *)v7 + 3);
    unint64_t v16 = v14 + 1;
    if (v14 >= v15 >> 1)
    {
      char v28 = v7;
      unint64_t v29 = *((void *)v7 + 2);
      int v30 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v15 > 1), v14 + 1, 1, v28);
      unint64_t v14 = v29;
      unsigned int v7 = v30;
    }
    *((void *)v7 + 2) = v16;
    unsigned int v17 = &v7[16 * v14];
    *((void *)v17 + 4) = v13;
    *((_WORD *)v17 + 20) = 1;
  }
  *(void *)(v3 + 8) = v7;
LABEL_15:
  v33[0] = v4;
  ViewTraitCollection.value<A>(for:defaultValue:)();
  if (v32 == 1) {
    specialized Set._Variant.insert(_:)(v33, *(void *)(*(void *)(v3 + 8) + 16) - 1);
  }
LABEL_17:
  if (*(void *)(v3 + 16))
  {
    v33[0] = v4;
    if (ViewTraitCollection.isSectionFooter.getter()) {
      specialized Set._Variant.insert(_:)(v33, *(void *)(*(void *)(v3 + 8) + 16) - 1);
    }
  }
  if (*(unsigned char *)v3 == 1)
  {
    _ViewList_View.elementID.getter();
    uint64_t v18 = v33[0];
    uint64_t v19 = v33[1];
    unsigned int v20 = *(char **)(v3 + 24);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      unsigned int v20 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v20 + 2) + 1, 1, v20);
    }
    unint64_t v22 = *((void *)v20 + 2);
    unint64_t v21 = *((void *)v20 + 3);
    if (v22 >= v21 >> 1) {
      unsigned int v20 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v21 > 1), v22 + 1, 1, v20);
    }
    *((void *)v20 + 2) = v22 + 1;
    unint64_t v23 = &v20[16 * v22];
    *((void *)v23 + 4) = v18;
    *((void *)v23 + 5) = v19;
    *(void *)(v3 + 24) = v20;
  }
  ++*(void *)(v3 + 56);
  return 1;
}

uint64_t protocol witness for ViewListVisitor.visit(view:traits:) in conformance SectionedIdentifierAccumulator(uint64_t a1, uint64_t *a2)
{
  return 1;
}

void View.supportedVolumeViewpoints(_:)()
{
}

{
  View.supportedVolumeViewpoints(_:)();
}

uint64_t Button<>.init(_:)@<X0>(unsigned char *a1@<X0>, unsigned char *a2@<X8>)
{
  char v4 = a1[1];
  *a2 = *a1;
  a2[1] = v4;
  uint64_t v5 = (uint64_t)&a1[*(int *)(type metadata accessor for PrimitiveButtonStyleConfiguration(0) + 24)];
  _s7SwiftUI6ButtonVyAA09PrimitiveC18StyleConfigurationV5LabelVGMaTm_10(0, (unint64_t *)&lazy cache variable for type metadata for Button<PrimitiveButtonStyleConfiguration.Label>);
  outlined init with copy of ButtonAction(v5, (uint64_t)&a2[*(int *)(v6 + 36)], (uint64_t (*)(void))type metadata accessor for ButtonAction);
  return _s7SwiftUI33PrimitiveButtonStyleConfigurationVWOhTm_6((uint64_t)a1, type metadata accessor for PrimitiveButtonStyleConfiguration);
}

Swift::Void __swiftcall ButtonAction.callAsFunction()()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for LinkDestination();
  MEMORY[0x1F4188790](v2 - 8);
  char v4 = &v16[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v5 = type metadata accessor for ButtonAction();
  MEMORY[0x1F4188790](v5);
  unsigned int v7 = &v16[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  outlined init with copy of ButtonAction(v1, (uint64_t)v7, (uint64_t (*)(void))type metadata accessor for ButtonAction);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      outlined init with take of LinkDestination((uint64_t)v7, (uint64_t)v4);
      LinkDestination.open()();
      _s7SwiftUI33PrimitiveButtonStyleConfigurationVWOhTm_6((uint64_t)v4, MEMORY[0x1E4F3FB98]);
    }
    else
    {
      long long v12 = *((_OWORD *)v7 + 1);
      long long v17 = *(_OWORD *)v7;
      long long v18 = v12;
      long long v19 = *((_OWORD *)v7 + 2);
      type metadata accessor for MainActor();
      uint64_t v13 = static Semantics.v7.getter();
      MEMORY[0x1F4188790](v13);
      static MainActor.assumeIsolatedIfLinkedOnOrAfter<A>(_:context:_:file:line:)();
      long long v20 = v17;
      char v21 = v18;
      outlined release of Environment<AppIntentExecutor?>((uint64_t)&v20);

      swift_release();
    }
  }
  else
  {
    uint64_t v10 = *(void *)v7;
    uint64_t v9 = *((void *)v7 + 1);
    uint64_t v11 = type metadata accessor for MainActor();
    MEMORY[0x1F4188790](v11);
    uint64_t v14 = v10;
    uint64_t v15 = v9;
    specialized static MainActor.assumeIsolated<A>(_:file:line:)((uint64_t)partial apply for closure #1 in closure #2 in UICollectionViewListCoordinator.collectionView(_:willPerformPreviewActionForMenuWith:animator:), (uint64_t)&v16[-32]);
    swift_release();
  }
}

uint64_t Button.init(destination:label:)@<X0>(uint64_t a1@<X0>, void (*a2)(uint64_t)@<X1>, uint64_t a3@<X3>, char *a4@<X8>)
{
  uint64_t v8 = *(void *)(a3 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v10 = (char *)&v14 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_WORD *)a4 = 256;
  uint64_t v11 = type metadata accessor for Button();
  outlined init with copy of ButtonAction(a1, (uint64_t)&a4[*(int *)(v11 + 36)], MEMORY[0x1E4F3FB98]);
  type metadata accessor for ButtonAction();
  uint64_t v12 = swift_storeEnumTagMultiPayload();
  a2(v12);
  _s7SwiftUI33PrimitiveButtonStyleConfigurationVWOhTm_6(a1, MEMORY[0x1E4F3FB98]);
  return (*(uint64_t (**)(char *, char *, uint64_t))(v8 + 32))(&a4[*(int *)(v11 + 40)], v10, a3);
}

__n128 Button.init<>(_:action:)@<Q0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _WORD *a4@<X8>)
{
  uint64_t v8 = *a1;
  uint64_t v9 = a1[1];
  char v10 = *((unsigned char *)a1 + 16);
  *a4 = 256;
  type metadata accessor for Button<Label<Text, Image>>();
  uint64_t v12 = v11;
  uint64_t v13 = (void *)((char *)a4 + *(int *)(v11 + 36));
  *uint64_t v13 = a2;
  v13[1] = a3;
  type metadata accessor for ButtonAction();
  __n128 v16 = *(__n128 *)(a1 + 3);
  swift_storeEnumTagMultiPayload();
  uint64_t v14 = (char *)a4 + *(int *)(v12 + 40);
  *(void *)uint64_t v14 = v8;
  *((void *)v14 + 1) = v9;
  v14[16] = v10;
  __n128 result = v16;
  *(__n128 *)(v14 + 24) = v16;
  return result;
}

uint64_t Button<>.init(_:action:)@<X0>(uint64_t a1@<X4>, uint64_t a2@<X5>, _WORD *a3@<X8>)
{
  *a3 = 256;
  _s7SwiftUI6ButtonVyAA09PrimitiveC18StyleConfigurationV5LabelVGMaTm_10(0, (unint64_t *)&lazy cache variable for type metadata for Button<Text>);
  uint64_t v7 = v6;
  uint64_t v8 = (void *)((char *)a3 + *(int *)(v6 + 36));
  *uint64_t v8 = a1;
  v8[1] = a2;
  type metadata accessor for ButtonAction();
  swift_storeEnumTagMultiPayload();
  uint64_t v9 = (char *)a3 + *(int *)(v7 + 40);
  uint64_t result = Text.init(_:tableName:bundle:comment:)();
  *(void *)uint64_t v9 = result;
  *((void *)v9 + 1) = v11;
  v9[16] = v12 & 1;
  *((void *)v9 + 3) = v13;
  return result;
}

uint64_t Button<>.init(_:image:action:)@<X0>(uint64_t a1@<X0>, int a2@<W2>, uint64_t a3@<X4>, uint64_t a4@<X5>, uint64_t a5@<X6>, _WORD *a6@<X8>)
{
  *a6 = 256;
  type metadata accessor for Button<Label<Text, Image>>();
  uint64_t v13 = v12;
  uint64_t v14 = (void *)((char *)a6 + *(int *)(v12 + 36));
  *uint64_t v14 = a4;
  v14[1] = a5;
  type metadata accessor for ButtonAction();
  swift_storeEnumTagMultiPayload();
  uint64_t v15 = (uint64_t)a6 + *(int *)(v13 + 40);
  swift_retain();
  closure #1 in Button<>.init(_:image:action:)(a1, a2, a3, v15);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t v16 = type metadata accessor for ImageResource();
  long long v17 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v16 - 8) + 8);

  return v17(a3, v16);
}

uint64_t Button<>.init<A>(_:image:action:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, _WORD *a6@<X8>)
{
  *a6 = 256;
  type metadata accessor for Button<Label<Text, Image>>();
  uint64_t v13 = v12;
  uint64_t v14 = (void *)((char *)a6 + *(int *)(v12 + 36));
  *uint64_t v14 = a3;
  v14[1] = a4;
  type metadata accessor for ButtonAction();
  swift_storeEnumTagMultiPayload();
  closure #1 in Button<>.init<A>(_:image:action:)(a1, a2, a5, (uint64_t)a6 + *(int *)(v13 + 40));
  uint64_t v15 = type metadata accessor for ImageResource();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v15 - 8) + 8))(a2, v15);
  uint64_t v16 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a5 - 8) + 8);

  return v16(a1, a5);
}

uint64_t Button<>.init(_:role:action:)@<X0>(unsigned char *a1@<X4>, uint64_t a2@<X5>, uint64_t a3@<X6>, unsigned char *a4@<X8>)
{
  char v7 = a1[1];
  *a4 = *a1;
  a4[1] = v7;
  _s7SwiftUI6ButtonVyAA09PrimitiveC18StyleConfigurationV5LabelVGMaTm_10(0, (unint64_t *)&lazy cache variable for type metadata for Button<Text>);
  uint64_t v9 = v8;
  char v10 = &a4[*(int *)(v8 + 36)];
  *char v10 = a2;
  v10[1] = a3;
  type metadata accessor for ButtonAction();
  swift_storeEnumTagMultiPayload();
  uint64_t v11 = &a4[*(int *)(v9 + 40)];
  uint64_t result = Text.init(_:tableName:bundle:comment:)();
  *(void *)uint64_t v11 = result;
  *((void *)v11 + 1) = v13;
  v11[16] = v14 & 1;
  *((void *)v11 + 3) = v15;
  return result;
}

uint64_t Button<>.init<A>(_:role:action:)@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, unsigned char *a6@<X8>)
{
  char v11 = a2[1];
  *a6 = *a2;
  a6[1] = v11;
  _s7SwiftUI6ButtonVyAA09PrimitiveC18StyleConfigurationV5LabelVGMaTm_10(0, (unint64_t *)&lazy cache variable for type metadata for Button<Text>);
  uint64_t v13 = v12;
  char v14 = &a6[*(int *)(v12 + 36)];
  *char v14 = a3;
  v14[1] = a4;
  type metadata accessor for ButtonAction();
  swift_storeEnumTagMultiPayload();
  closure #1 in Button<>.init<A>(_:action:)(a1, (uint64_t)&a6[*(int *)(v13 + 40)]);
  uint64_t v15 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a5 - 8) + 8);

  return v15(a1, a5);
}

uint64_t Button<>.init(_:image:role:action:)@<X0>(uint64_t a1@<X0>, int a2@<W2>, uint64_t a3@<X4>, unsigned char *a4@<X5>, uint64_t a5@<X6>, uint64_t a6@<X7>, unsigned char *a7@<X8>)
{
  char v13 = a4[1];
  *a7 = *a4;
  a7[1] = v13;
  type metadata accessor for Button<Label<Text, Image>>();
  uint64_t v15 = v14;
  uint64_t v16 = &a7[*(int *)(v14 + 36)];
  *uint64_t v16 = a5;
  v16[1] = a6;
  type metadata accessor for ButtonAction();
  swift_storeEnumTagMultiPayload();
  uint64_t v17 = (uint64_t)&a7[*(int *)(v15 + 40)];
  swift_retain();
  closure #1 in Button<>.init(_:image:action:)(a1, a2, a3, v17);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t v18 = type metadata accessor for ImageResource();
  long long v19 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v18 - 8) + 8);

  return v19(a3, v18);
}

uint64_t closure #1 in Button<>.init(_:image:action:)@<X0>(uint64_t a1@<X0>, int a2@<W2>, uint64_t a3@<X4>, uint64_t a4@<X8>)
{
  LODWORD(v25) = a2;
  uint64_t v24 = a1;
  uint64_t v6 = type metadata accessor for ImageResource();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v9 = (char *)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v11 = MEMORY[0x1F4188790](v10);
  char v13 = (char *)&v24 - v12;
  uint64_t v14 = *(void (**)(char *, uint64_t, uint64_t, double))(v7 + 16);
  v14((char *)&v24 - v12, a3, v6, v11);
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  uint64_t v15 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v24 = v16;
  uint64_t v25 = v15;
  uint64_t v18 = v17;
  char v26 = v19 & 1;
  ((void (*)(char *, char *, uint64_t))v14)(v9, v13, v6);
  uint64_t v20 = Image.init(_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v13, v6);
  char v22 = v26;
  uint64_t v23 = v24;
  *(void *)a4 = v25;
  *(void *)(a4 + 8) = v23;
  *(unsigned char *)(a4 + 16) = v22;
  *(void *)(a4 + 24) = v18;
  *(void *)(a4 + 32) = v20;
  return result;
}

uint64_t Button<>.init<A>(_:image:role:action:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, unsigned char *a7@<X8>)
{
  char v13 = a3[1];
  *a7 = *a3;
  a7[1] = v13;
  type metadata accessor for Button<Label<Text, Image>>();
  uint64_t v15 = v14;
  uint64_t v16 = &a7[*(int *)(v14 + 36)];
  *uint64_t v16 = a4;
  v16[1] = a5;
  type metadata accessor for ButtonAction();
  swift_storeEnumTagMultiPayload();
  closure #1 in Button<>.init<A>(_:image:action:)(a1, a2, a6, (uint64_t)&a7[*(int *)(v15 + 40)]);
  uint64_t v17 = type metadata accessor for ImageResource();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v17 - 8) + 8))(a2, v17);
  uint64_t v18 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a6 - 8) + 8);

  return v18(a1, a6);
}

__n128 closure #1 in Button<>.init<A>(_:image:action:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = type metadata accessor for ImageResource();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  double v11 = (char *)&v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v13 = MEMORY[0x1F4188790](v12);
  uint64_t v15 = (char *)&v19 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v16 + 16))(v15, a1, a3, v13);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
  Label<>.init<A>(_:image:)((uint64_t)v15, (uint64_t)v11, a3, (uint64_t)&v19);
  char v17 = v20;
  __n128 result = v21;
  *(_OWORD *)a4 = v19;
  *(unsigned char *)(a4 + 16) = v17;
  *(__n128 *)(a4 + 24) = result;
  return result;
}

uint64_t Button.init(lnAction:label:)@<X0>(void *a1@<X0>, void (*a2)(uint64_t)@<X1>, unsigned char *a3@<X8>)
{
  __int16 v4 = 256;
  return Button.init(role:lnAction:perform:label:)((char *)&v4, a1, (uint64_t)destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation, 0, a2, a3);
}

uint64_t Button.init(lnAction:perform:label:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void (*a4)(uint64_t)@<X3>, unsigned char *a5@<X8>)
{
  __int16 v6 = 256;
  return Button.init(role:lnAction:perform:label:)((char *)&v6, a1, a2, a3, a4, a5);
}

uint64_t Button.init(role:lnAction:perform:label:)@<X0>(char *a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void (*a5)(uint64_t)@<X4>, unsigned char *a6@<X8>)
{
  char v11 = *a1;
  char v12 = a1[1];
  uint64_t KeyPath = swift_getKeyPath();
  *a6 = v11;
  a6[1] = v12;
  uint64_t v14 = &a6[*(int *)(type metadata accessor for Button() + 36)];
  *(void *)uint64_t v14 = KeyPath;
  *((void *)v14 + 1) = 0;
  v14[16] = 0;
  *((void *)v14 + 3) = a2;
  *((void *)v14 + 4) = a3;
  *((void *)v14 + 5) = a4;
  type metadata accessor for ButtonAction();
  swift_storeEnumTagMultiPayload();
  id v15 = a2;
  swift_retain();
  uint64_t v16 = swift_retain();
  a5(v16);
  swift_release();

  return swift_release();
}

_WORD *initializeBufferWithCopyOfBuffer for Button(_WORD *a1, _WORD *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for URL();
  uint64_t v7 = *(void *)(v6 - 8);
  int v8 = *(_DWORD *)(v7 + 80);
  uint64_t v9 = v8;
  uint64_t v10 = v8 | 7;
  uint64_t v11 = *(void *)(v7 + 64);
  uint64_t v12 = v11 + ((v9 + 75) & ~v9);
  if ((unint64_t)(v12 + 1) > 0x30) {
    uint64_t v13 = v12 + 1;
  }
  else {
    uint64_t v13 = 48;
  }
  uint64_t v14 = *(void *)(a3 + 16);
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = *(_DWORD *)(v15 + 80);
  uint64_t v17 = v13 + v16 + 1;
  unint64_t v18 = ((v17 + (((v8 | 7) + 2) & ~(v8 | 7))) & ~v16) + *(void *)(v15 + 64);
  int v19 = (*(_DWORD *)(v15 + 80) | v8) & 0x100000;
  if ((v10 | v16) == 7 && v19 == 0 && v18 <= 0x18)
  {
    *a1 = *a2;
    uint64_t v23 = ((unint64_t)a1 + v10 + 2) & ~v10;
    uint64_t v24 = (unsigned __int8 *)(((unint64_t)a2 + v10 + 2) & ~v10);
    unsigned int v25 = v24[v13];
    unsigned int v26 = v25 - 3;
    if (v25 >= 3)
    {
      if (v13 <= 3) {
        uint64_t v27 = v13;
      }
      else {
        uint64_t v27 = 4;
      }
      switch(v27)
      {
        case 1:
          int v28 = *v24;
          goto LABEL_22;
        case 2:
          int v28 = *(unsigned __int16 *)v24;
          goto LABEL_22;
        case 3:
          int v28 = *(unsigned __int16 *)v24 | (v24[2] << 16);
          goto LABEL_22;
        case 4:
          int v28 = *(_DWORD *)v24;
LABEL_22:
          int v29 = (v28 | (v26 << (8 * v13))) + 3;
          unsigned int v25 = v28 + 3;
          if (v13 < 4) {
            unsigned int v25 = v29;
          }
          break;
        default:
          break;
      }
    }
    uint64_t v30 = ~v16;
    if (v25 == 2)
    {
      uint64_t v59 = ~v16;
      uint64_t v39 = *(void *)v24;
      uint64_t v40 = *((void *)v24 + 1);
      char v41 = v24[16];
      outlined copy of Environment<AppIntentExecutor?>.Content(*(void *)v24, v40, v41);
      *(void *)uint64_t v23 = v39;
      *(void *)(v23 + 8) = v40;
      uint64_t v30 = v59;
      *(unsigned char *)(v23 + 16) = v41;
      unsigned __int8 v42 = (void *)*((void *)v24 + 3);
      *(void *)(v23 + 24) = v42;
      uint64_t v43 = *((void *)v24 + 5);
      *(void *)(v23 + 32) = *((void *)v24 + 4);
      *(void *)(v23 + 40) = v43;
      *(unsigned char *)(v23 + v13) = 2;
      id v44 = v42;
    }
    else
    {
      if (v25 == 1)
      {
        uint64_t v55 = v6;
        uint64_t v57 = v14;
        uint64_t v58 = ~v16;
        uint64_t v31 = *(void *)v24;
        uint64_t v32 = *((void *)v24 + 1);
        uint64_t v49 = *((void *)v24 + 3);
        uint64_t v51 = *((void *)v24 + 2);
        char v52 = v24[34];
        __int16 v33 = *((_WORD *)v24 + 16);
        uint64_t v54 = v7;
        uint64_t v56 = v11;
        outlined copy of Environment<OpenURLAction>.Content(*(void *)v24, v32, v51, v49, v33, v52);
        *(void *)uint64_t v23 = v31;
        *(void *)(v23 + 8) = v32;
        *(void *)(v23 + 16) = v51;
        *(void *)(v23 + 24) = v49;
        *(_WORD *)(v23 + 32) = v33;
        *(unsigned char *)(v23 + 34) = v52;
        unint64_t v34 = (v23 + 42) & 0xFFFFFFFFFFFFFFF8;
        unint64_t v35 = (unint64_t)(v24 + 42) & 0xFFFFFFFFFFFFFFF8;
        uint64_t v48 = *(void *)(v35 + 8);
        uint64_t v50 = *(void *)v35;
        uint64_t v36 = *(void *)(v35 + 24);
        uint64_t v47 = *(void *)(v35 + 16);
        LOBYTE(v51) = *(unsigned char *)(v35 + 34);
        __int16 v53 = *(_WORD *)(v35 + 32);
        outlined copy of Environment<OpenURLAction>.Content(*(void *)v35, v48, v47, v36, v53, v51);
        *(void *)unint64_t v34 = v50;
        *(void *)(v34 + 8) = v48;
        *(void *)(v34 + 16) = v47;
        *(void *)(v34 + 24) = v36;
        uint64_t v14 = v57;
        *(_WORD *)(v34 + 32) = v53;
        *(unsigned char *)(v34 + 34) = v51;
        uint64_t v37 = (v9 + 35 + v34) & ~v9;
        uint64_t v38 = (v9 + 35 + v35) & ~v9;
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v54 + 16))(v37, v38, v55);
        *(unsigned char *)(v37 + v56) = *(unsigned char *)(v38 + v56);
        uint64_t v30 = v58;
        *(unsigned char *)(v23 + v13) = 1;
LABEL_30:
        (*(void (**)(uint64_t, unint64_t, uint64_t))(v15 + 16))((v17 + v23) & v30, (unint64_t)&v24[v17] & v30, v14);
        return a1;
      }
      uint64_t v45 = *((void *)v24 + 1);
      *(void *)uint64_t v23 = *(void *)v24;
      *(void *)(v23 + 8) = v45;
      *(unsigned char *)(v23 + v13) = 0;
    }
    swift_retain();
    goto LABEL_30;
  }
  uint64_t v22 = *(void *)a2;
  *(void *)a1 = *(void *)a2;
  a1 = (_WORD *)(v22 + (((v10 | v16) + 16) & ~(v10 | v16)));
  swift_retain();
  return a1;
}

_WORD *initializeWithTake for Button(_WORD *a1, _WORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = type metadata accessor for URL();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v9 = (v8 | 7) + 2;
  uint64_t v10 = (_OWORD *)(((unint64_t)a1 + v9) & ~(v8 | 7));
  uint64_t v11 = (unsigned __int8 *)(((unint64_t)a2 + v9) & ~(v8 | 7));
  uint64_t v12 = *(void *)(v7 + 64);
  uint64_t v13 = v12 + ((v8 + 75) & ~v8);
  if ((unint64_t)(v13 + 1) > 0x30) {
    uint64_t v14 = v13 + 1;
  }
  else {
    uint64_t v14 = 48;
  }
  unsigned int v15 = v11[v14];
  unsigned int v16 = v15 - 3;
  if (v15 >= 3)
  {
    if (v14 <= 3) {
      uint64_t v17 = v14;
    }
    else {
      uint64_t v17 = 4;
    }
    switch(v17)
    {
      case 1:
        int v18 = *v11;
        goto LABEL_13;
      case 2:
        int v18 = *(unsigned __int16 *)v11;
        goto LABEL_13;
      case 3:
        int v18 = *(unsigned __int16 *)(((unint64_t)a2 + v9) & ~(v8 | 7)) | (*(unsigned __int8 *)((((unint64_t)a2 + v9) & ~(v8 | 7)) + 2) << 16);
        goto LABEL_13;
      case 4:
        int v18 = *(_DWORD *)v11;
LABEL_13:
        int v19 = (v18 | (v16 << (8 * v14))) + 3;
        unsigned int v15 = v18 + 3;
        if (v14 < 4) {
          unsigned int v15 = v19;
        }
        break;
      default:
        break;
    }
  }
  if (v15 == 2)
  {
    long long v31 = *(_OWORD *)v11;
    long long v32 = *(_OWORD *)((((unint64_t)a2 + v9) & ~(v8 | 7)) + 0x20);
    *(_OWORD *)((((unint64_t)a1 + v9) & ~(v8 | 7)) + 0x10) = *(_OWORD *)((((unint64_t)a2 + v9) & ~(v8 | 7))
                                                                              + 0x10);
    *(_OWORD *)((((unint64_t)a1 + v9) & ~(v8 | 7)) + 0x20) = v32;
    *uint64_t v10 = v31;
    char v30 = 2;
  }
  else if (v15 == 1)
  {
    uint64_t v20 = ~v8;
    long long v21 = *(_OWORD *)v11;
    long long v22 = *(_OWORD *)((((unint64_t)a2 + v9) & ~(v8 | 7)) + 0x10);
    *(_DWORD *)((((unint64_t)a1 + v9) & ~(v8 | 7)) + 0x1F) = *(_DWORD *)((((unint64_t)a2 + v9) & ~(v8 | 7))
                                                                              + 0x1F);
    *uint64_t v10 = v21;
    *(_OWORD *)((((unint64_t)a1 + v9) & ~(v8 | 7)) + 0x10) = v22;
    unint64_t v23 = ((unint64_t)v10 + 42) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v24 = (unint64_t)(v11 + 42) & 0xFFFFFFFFFFFFFFF8;
    long long v25 = *(_OWORD *)v24;
    long long v26 = *(_OWORD *)(v24 + 16);
    *(_DWORD *)(v23 + 31) = *(_DWORD *)(v24 + 31);
    *(_OWORD *)unint64_t v23 = v25;
    *(_OWORD *)(v23 + 16) = v26;
    uint64_t v27 = v8 + 35;
    unint64_t v28 = (v27 + v23) & v20;
    unint64_t v29 = (v27 + v24) & v20;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v7 + 32))(v28, v29, v6);
    *(unsigned char *)(v28 + v12) = *(unsigned char *)(v29 + v12);
    char v30 = 1;
  }
  else
  {
    char v30 = 0;
    *uint64_t v10 = *(_OWORD *)v11;
  }
  *((unsigned char *)v10 + v14) = v30;
  uint64_t v33 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v33 + 32))(((unint64_t)v10 + v14 + *(unsigned __int8 *)(v33 + 80) + 1) & ~(unint64_t)*(unsigned __int8 *)(v33 + 80), (unint64_t)&v11[v14 + 1 + *(unsigned __int8 *)(v33 + 80)] & ~(unint64_t)*(unsigned __int8 *)(v33 + 80));
  return a1;
}

uint64_t sub_18823A6B8()
{
  return swift_getWitnessTable();
}

unint64_t initializeBufferWithCopyOfBuffer for ButtonAction(unint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v24 = *(void *)a2;
    *(void *)a1 = *(void *)a2;
    a1 = v24 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      uint64_t v25 = *(void *)a2;
      uint64_t v26 = *(void *)(a2 + 8);
      char v27 = *(unsigned char *)(a2 + 16);
      outlined copy of Environment<AppIntentExecutor?>.Content(*(void *)a2, v26, v27);
      *(void *)a1 = v25;
      *(void *)(a1 + 8) = v26;
      *(unsigned char *)(a1 + 16) = v27;
      uint64_t v28 = *(void *)(a2 + 40);
      long long v29 = *(_OWORD *)(a2 + 24);
      *(_OWORD *)(a1 + 24) = v29;
      *(void *)(a1 + 40) = v28;
      id v30 = (id)v29;
      swift_retain();
    }
    else if (EnumCaseMultiPayload == 1)
    {
      uint64_t v7 = *(void *)a2;
      uint64_t v8 = *(void *)(a2 + 8);
      uint64_t v9 = *(void *)(a2 + 16);
      uint64_t v10 = *(void *)(a2 + 24);
      char v11 = *(unsigned char *)(a2 + 34);
      __int16 v12 = *(_WORD *)(a2 + 32);
      outlined copy of Environment<OpenURLAction>.Content(*(void *)a2, v8, v9, v10, v12, v11);
      *(void *)a1 = v7;
      *(void *)(a1 + 8) = v8;
      *(void *)(a1 + 16) = v9;
      *(void *)(a1 + 24) = v10;
      *(_WORD *)(a1 + 32) = v12;
      *(unsigned char *)(a1 + 34) = v11;
      uint64_t v13 = *(void *)(a2 + 40);
      uint64_t v14 = *(void *)(a2 + 48);
      uint64_t v15 = *(void *)(a2 + 56);
      uint64_t v16 = *(void *)(a2 + 64);
      char v17 = *(unsigned char *)(a2 + 74);
      __int16 v18 = *(_WORD *)(a2 + 72);
      outlined copy of Environment<OpenURLAction>.Content(v13, v14, v15, v16, v18, v17);
      *(void *)(a1 + 40) = v13;
      *(void *)(a1 + 48) = v14;
      *(void *)(a1 + 56) = v15;
      *(void *)(a1 + 64) = v16;
      *(_WORD *)(a1 + 72) = v18;
      *(unsigned char *)(a1 + 74) = v17;
      uint64_t v19 = *(int *)(type metadata accessor for LinkDestination() + 24);
      uint64_t v20 = a1 + v19;
      uint64_t v21 = a2 + v19;
      uint64_t v22 = type metadata accessor for URL();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 16))(v20, v21, v22);
      uint64_t v23 = type metadata accessor for LinkDestination.Configuration();
      *(unsigned char *)(v20 + *(int *)(v23 + 20)) = *(unsigned char *)(v21 + *(int *)(v23 + 20));
    }
    else
    {
      uint64_t v31 = *(void *)(a2 + 8);
      *(void *)a1 = *(void *)a2;
      *(void *)(a1 + 8) = v31;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t assignWithCopy for ButtonAction(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    _s7SwiftUI33PrimitiveButtonStyleConfigurationVWOhTm_6(a1, (uint64_t (*)(void))type metadata accessor for ButtonAction);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      uint64_t v22 = *(void *)a2;
      uint64_t v23 = *(void *)(a2 + 8);
      char v24 = *(unsigned char *)(a2 + 16);
      outlined copy of Environment<AppIntentExecutor?>.Content(*(void *)a2, v23, v24);
      *(void *)a1 = v22;
      *(void *)(a1 + 8) = v23;
      *(unsigned char *)(a1 + 16) = v24;
      uint64_t v25 = *(void **)(a2 + 24);
      *(void *)(a1 + 24) = v25;
      uint64_t v26 = *(void *)(a2 + 32);
      uint64_t v27 = *(void *)(a2 + 40);
      *(void *)(a1 + 32) = v26;
      *(void *)(a1 + 40) = v27;
      id v28 = v25;
    }
    else
    {
      if (EnumCaseMultiPayload == 1)
      {
        uint64_t v5 = *(void *)a2;
        uint64_t v6 = *(void *)(a2 + 8);
        uint64_t v7 = *(void *)(a2 + 16);
        uint64_t v8 = *(void *)(a2 + 24);
        char v9 = *(unsigned char *)(a2 + 34);
        __int16 v10 = *(_WORD *)(a2 + 32);
        outlined copy of Environment<OpenURLAction>.Content(*(void *)a2, v6, v7, v8, v10, v9);
        *(void *)a1 = v5;
        *(void *)(a1 + 8) = v6;
        *(void *)(a1 + 16) = v7;
        *(void *)(a1 + 24) = v8;
        *(_WORD *)(a1 + 32) = v10;
        *(unsigned char *)(a1 + 34) = v9;
        uint64_t v11 = *(void *)(a2 + 40);
        uint64_t v12 = *(void *)(a2 + 48);
        uint64_t v13 = *(void *)(a2 + 56);
        uint64_t v14 = *(void *)(a2 + 64);
        char v15 = *(unsigned char *)(a2 + 74);
        __int16 v16 = *(_WORD *)(a2 + 72);
        outlined copy of Environment<OpenURLAction>.Content(v11, v12, v13, v14, v16, v15);
        *(void *)(a1 + 40) = v11;
        *(void *)(a1 + 48) = v12;
        *(void *)(a1 + 56) = v13;
        *(void *)(a1 + 64) = v14;
        *(_WORD *)(a1 + 72) = v16;
        *(unsigned char *)(a1 + 74) = v15;
        uint64_t v17 = *(int *)(type metadata accessor for LinkDestination() + 24);
        uint64_t v18 = a1 + v17;
        uint64_t v19 = a2 + v17;
        uint64_t v20 = type metadata accessor for URL();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 16))(v18, v19, v20);
        uint64_t v21 = type metadata accessor for LinkDestination.Configuration();
        *(unsigned char *)(v18 + *(int *)(v21 + 20)) = *(unsigned char *)(v19 + *(int *)(v21 + 20));
LABEL_8:
        swift_storeEnumTagMultiPayload();
        return a1;
      }
      uint64_t v29 = *(void *)(a2 + 8);
      *(void *)a1 = *(void *)a2;
      *(void *)(a1 + 8) = v29;
    }
    swift_retain();
    goto LABEL_8;
  }
  return a1;
}

char *initializeWithTake for ButtonAction(char *a1, char *a2, uint64_t a3)
{
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    long long v6 = *((_OWORD *)a2 + 1);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *((_OWORD *)a1 + 1) = v6;
    *(_DWORD *)(a1 + 31) = *(_DWORD *)(a2 + 31);
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
    *(_DWORD *)(a1 + 71) = *(_DWORD *)(a2 + 71);
    uint64_t v7 = *(int *)(type metadata accessor for LinkDestination() + 24);
    uint64_t v8 = &a1[v7];
    char v9 = &a2[v7];
    uint64_t v10 = type metadata accessor for URL();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 32))(v8, v9, v10);
    uint64_t v11 = type metadata accessor for LinkDestination.Configuration();
    v8[*(int *)(v11 + 20)] = v9[*(int *)(v11 + 20)];
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  return a1;
}

char *assignWithTake for ButtonAction(char *a1, char *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    _s7SwiftUI33PrimitiveButtonStyleConfigurationVWOhTm_6((uint64_t)a1, (uint64_t (*)(void))type metadata accessor for ButtonAction);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      long long v6 = *((_OWORD *)a2 + 1);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *((_OWORD *)a1 + 1) = v6;
      *(_DWORD *)(a1 + 31) = *(_DWORD *)(a2 + 31);
      *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
      *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
      *(_DWORD *)(a1 + 71) = *(_DWORD *)(a2 + 71);
      uint64_t v7 = *(int *)(type metadata accessor for LinkDestination() + 24);
      uint64_t v8 = &a1[v7];
      char v9 = &a2[v7];
      uint64_t v10 = type metadata accessor for URL();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 32))(v8, v9, v10);
      uint64_t v11 = type metadata accessor for LinkDestination.Configuration();
      v8[*(int *)(v11 + 20)] = v9[*(int *)(v11 + 20)];
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    }
  }
  return a1;
}

uint64_t outlined init with take of LinkDestination(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for LinkDestination();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t type metadata accessor for TestableSubgraph()
{
  uint64_t result = type metadata singleton initialization cache for TestableSubgraph;
  if (!type metadata singleton initialization cache for TestableSubgraph) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t type metadata completion function for TestableSubgraph()
{
  return swift_initClassMetadata2();
}

uint64_t View.withChildrenForTest<A>(environment:options:body:)()
{
  return static Update.ensure<A>(_:)();
}

uint64_t closure #1 in View.withChildrenForTest<A>(environment:options:body:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(long long *), uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  *(void *)&v13[0] = a2;
  *((void *)&v13[0] + 1) = a3;
  uint64_t v15 = a4;
  swift_retain();
  swift_retain();
  specialized TestableViewContent.init(_:environment:options:)(a1, v13, &v15, a7, a9, (uint64_t)v14);
  type metadata accessor for TestableViewContent();
  TestableViewContent.children.getter();
  a5(v13);
  swift_release();
  swift_release();
  return outlined destroy of _VariadicView_Children((uint64_t)v13);
}

uint64_t TestableViewContent.children.getter()
{
  return _VariadicView_Children.init(_:contentSubgraph:transform:)();
}

uint64_t closure #1 in TestableViewContent.init(_:environment:options:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, _DWORD *a6@<X8>)
{
  uint64_t v50 = a5;
  uint64_t v43 = a6;
  uint64_t v73 = *MEMORY[0x1E4F143B8];
  uint64_t v9 = *(void *)(a4 - 8);
  double v10 = MEMORY[0x1F4188790](a1);
  uint64_t v12 = (char *)&v34 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, double))(v9 + 16))(v12, v10);
  v53[2] = a4;
  uint64_t v52 = a4;
  uint64_t v13 = type metadata accessor for Attribute();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v12, (uint64_t)partial apply for closure #1 in Attribute.init(value:), (uint64_t)v53, a4, MEMORY[0x1E4FBC248], v13, MEMORY[0x1E4FBC278], v14);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v12, a4);
  int v49 = v62;
  uint64_t v15 = *(void *)(a2 + 16);
  swift_beginAccess();
  int v16 = *(_DWORD *)(v15 + 80);
  uint64_t v17 = *(void *)(v15 + 88);
  uint64_t v18 = *(void *)(v15 + 112);
  uint64_t v57 = *(void *)(v15 + 72);
  int v58 = v16;
  uint64_t v59 = v17;
  long long v60 = *(_OWORD *)(v15 + 96);
  uint64_t v61 = v18;
  *(void *)&long long v54 = a3;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  _ViewListInputs.init(_:options:)();
  uint64_t v19 = v62;
  LODWORD(v15) = DWORD2(v62);
  uint64_t v20 = v63;
  uint64_t v35 = v63;
  uint64_t v36 = v62;
  LODWORD(v12) = v64;
  unsigned int v48 = v64;
  int v21 = v65;
  int v40 = v65;
  int v44 = v66;
  unsigned int v45 = HIDWORD(v64);
  uint64_t v22 = v67;
  uint64_t v23 = v68;
  uint64_t v38 = v68;
  uint64_t v39 = v67;
  uint64_t v24 = v69;
  uint64_t v47 = v69;
  int v46 = v70;
  uint64_t v51 = v71;
  LOBYTE(v17) = v72;
  int v37 = v72;
  _GraphValue.init(_:)();
  *(void *)&long long v62 = v19;
  DWORD2(v62) = v15;
  int v41 = v15;
  uint64_t v63 = v20;
  unint64_t v64 = __PAIR64__(v45, v12);
  LODWORD(v12) = v45;
  int v65 = v21;
  int v25 = v44;
  int v66 = v44;
  uint64_t v67 = v22;
  uint64_t v68 = v23;
  uint64_t v69 = v24;
  LODWORD(v24) = v46;
  int v70 = v46;
  uint64_t v71 = v51;
  unsigned __int8 v72 = v17;
  static View.makeDebuggableViewList(view:inputs:)();
  long long v62 = 0uLL;
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  lazy protocol witness table accessor for type TransactionWrapper and conformance TransactionWrapper();
  int v42 = Attribute.init<A>(body:value:flags:update:)();
  uint64_t v27 = v35;
  uint64_t v26 = v36;
  *(void *)&long long v62 = v36;
  DWORD2(v62) = v15;
  uint64_t v63 = v35;
  unint64_t v64 = __PAIR64__(v12, v48);
  LODWORD(v12) = v40;
  int v65 = v40;
  int v66 = v25;
  uint64_t v28 = v38;
  uint64_t v29 = v39;
  uint64_t v67 = v39;
  uint64_t v68 = v38;
  uint64_t v69 = v47;
  int v70 = v24;
  uint64_t v71 = v51;
  LOBYTE(v24) = v37;
  unsigned __int8 v72 = v37;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  _ViewListCountInputs.init(_:)();
  long long v34 = v54;
  long long v62 = v54;
  LODWORD(v63) = v55;
  unint64_t v64 = v56;
  uint64_t v52 = (*(uint64_t (**)(long long *))(v50 + 40))(&v62);
  LODWORD(v50) = v30;
  uint64_t v31 = v43;
  *uint64_t v43 = v49;
  *(void *)&long long v62 = v26;
  DWORD2(v62) = v41;
  uint64_t v63 = v27;
  unint64_t v64 = __PAIR64__(v45, v48);
  int v65 = (int)v12;
  int v66 = v44;
  uint64_t v67 = v29;
  uint64_t v68 = v28;
  uint64_t v69 = v47;
  int v70 = v46;
  uint64_t v71 = v51;
  unsigned __int8 v72 = v24;
  LODWORD(v20) = _ViewListOutputs.makeAttribute(inputs:)();
  swift_bridgeObjectRelease();
  swift_release();
  outlined destroy of _ViewListOutputs((uint64_t)&v57);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t result = swift_release();
  int v33 = v42;
  v31[1] = v20;
  v31[2] = v33;
  *((unsigned char *)v31 + 12) = 0;
  *((void *)v31 + 2) = v52;
  *((unsigned char *)v31 + 24) = v50 & 1;
  return result;
}

uint64_t TestableViewContent.list.getter()
{
  type metadata accessor for ViewList();
  uint64_t Value = AGGraphGetValue();
  outlined init with copy of TableColumnList(Value, (uint64_t)v2);
  _ViewList_Subgraph.wrapping(_:)();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v2);
}

void TestableSubgraph.__allocating_init(subgraph:)()
{
}

uint64_t TestableSubgraph.__ivar_destroyer()
{
  return swift_release();
}

uint64_t TestableSubgraph.__deallocating_deinit()
{
  _ViewList_Subgraph.deinit();
  swift_release();

  return swift_deallocClassInstance();
}

uint64_t ObjC metadata update function for TestableSubgraph()
{
  return type metadata accessor for TestableSubgraph();
}

uint64_t partial apply for closure #1 in View.withChildrenForTest<A>(environment:options:body:)()
{
  return closure #1 in View.withChildrenForTest<A>(environment:options:body:)(*(void *)(v0 + 40), *(void *)(v0 + 48), *(void *)(v0 + 56), *(void *)(v0 + 64), *(void (**)(long long *))(v0 + 72), *(void *)(v0 + 80), *(void *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32));
}

uint64_t TransactionWrapper.updateValue()()
{
  void (*v1)(void *__return_ptr, uint64_t *);
  uint64_t result;
  uint64_t v3;
  void v4[5];

  v4[4] = *MEMORY[0x1E4F143B8];
  uint64_t v1 = (void (*)(void *__return_ptr, uint64_t *))*v0;
  if (!*v0) {
LABEL_5:
  }
    __break(1u);
  if (AGGraphGetCurrentAttribute() == *MEMORY[0x1E4F4E7A0])
  {
    __break(1u);
    goto LABEL_5;
  }
  TransactionID.init<A>(context:)();
  v1(v4, &v3);
  AGGraphSetOutputValue();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v4);
  uint64_t result = outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(*v0);
  *uint64_t v0 = 0;
  v0[1] = 0;
  return result;
}

double specialized TestableViewContent.init(_:environment:options:)@<D0>(uint64_t a1@<X0>, long long *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v10 = *a3;
  long long v23 = *a2;
  type metadata accessor for EmptyViewRendererHost();
  swift_allocObject();
  uint64_t v11 = EmptyViewRendererHost.init(environment:)();
  swift_retain();
  swift_retain();
  uint64_t v12 = (void *)GraphHost.graph.getter();
  swift_release();
  AGSubgraphCreate();

  type metadata accessor for TestableSubgraph();
  *(void *)(swift_allocObject() + 32) = v11;
  uint64_t v13 = _ViewList_Subgraph.init(subgraph:)();
  swift_retain();
  uint64_t v14 = (void *)GraphHost.rootSubgraph.getter();
  swift_release();
  swift_retain();
  uint64_t v15 = (void *)_ViewList_Subgraph.subgraph.getter();
  swift_release();
  AGSubgraphAddChild();

  swift_retain();
  int v16 = (void *)_ViewList_Subgraph.subgraph.getter();
  swift_release();
  AGGraphClearUpdate();
  id v17 = (id)AGSubgraphGetCurrent();
  AGSubgraphSetCurrent();
  closure #1 in TestableViewContent.init(_:environment:options:)(a1, v11, v10, a4, a5, &v23);
  AGSubgraphSetCurrent();

  AGGraphSetUpdate();
  int v18 = DWORD2(v23);
  char v19 = BYTE12(v23);
  uint64_t v20 = v24;
  char v21 = v25;
  double result = *(double *)&v23;
  *(void *)a6 = v23;
  *(_DWORD *)(a6 + 8) = v18;
  *(unsigned char *)(a6 + 12) = v19;
  *(void *)(a6 + 16) = v11;
  *(void *)(a6 + 24) = v13;
  *(void *)(a6 + 32) = v20;
  *(unsigned char *)(a6 + 40) = v21;
  return result;
}

uint64_t type metadata accessor for TestableViewContent()
{
  return __swift_instantiateGenericMetadata();
}

unint64_t lazy protocol witness table accessor for type TransactionWrapper and conformance TransactionWrapper()
{
  unint64_t result = lazy protocol witness table cache variable for type TransactionWrapper and conformance TransactionWrapper;
  if (!lazy protocol witness table cache variable for type TransactionWrapper and conformance TransactionWrapper)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TransactionWrapper and conformance TransactionWrapper);
  }
  return result;
}

void *type metadata accessor for TransactionWrapper()
{
  return &unk_1ED42A398;
}

uint64_t initializeWithCopy for TestableViewContent(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(unsigned char *)(a1 + 12) = *(unsigned char *)(a2 + 12);
  uint64_t v3 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v3;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for TestableViewContent(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  int v4 = *(_DWORD *)(a2 + 8);
  *(unsigned char *)(a1 + 12) = *(unsigned char *)(a2 + 12);
  *(_DWORD *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_retain();
  swift_release();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_retain();
  swift_release();
  uint64_t v5 = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(void *)(a1 + 32) = v5;
  return a1;
}

uint64_t assignWithTake for TestableViewContent(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(unsigned char *)(a1 + 12) = *(unsigned char *)(a2 + 12);
  swift_release();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  swift_release();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  return a1;
}

uint64_t getEnumTagSinglePayload for TestableViewContent(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 41)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for TestableViewContent(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 40) = 0;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 41) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 16) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 41) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t PushDestination.init(destination:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  *a3 = result;
  a3[1] = a2;
  return result;
}

void PushDestination.init(presenting:destination:)(uint64_t a1@<X1>, uint64_t a2@<X2>, void *a3@<X8>)
{
  *a3 = a1;
  a3[1] = a2;
}

uint64_t static PushDestination._makeDestinations(content:inputs:resolved:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  uint64_t v11 = *(void *)(a2 + 48);
  int v12 = *(_DWORD *)(a2 + 56);
  type metadata accessor for PushDestination();
  type metadata accessor for _GraphValue();
  _GraphValue.value.getter();
  closure #1 in static PushDestination._makeDestinations(content:inputs:resolved:)(1, a4, a5, a6, a7);
  int OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
  uint64_t v26 = a4;
  uint64_t v27 = a5;
  uint64_t v28 = a6;
  uint64_t v29 = a7;
  uint64_t Destination = type metadata accessor for PushDestination.MakeDestination();
  uint64_t WitnessTable = swift_getWitnessTable();
  type metadata accessor for Attribute<NavigationDestinationResolverBase>(0, &lazy cache variable for type metadata for Attribute<NavigationDestinationResolverBase>, (uint64_t (*)(uint64_t))type metadata accessor for NavigationDestinationResolverBase, MEMORY[0x1E4F4E740]);
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&OffsetAttribute2, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TA_37, (uint64_t)v23, Destination, MEMORY[0x1E4FBC248], v13, MEMORY[0x1E4FBC278], v14);
  uint64_t v15 = AGCreateWeakAttribute();
  uint64_t v26 = v11;
  LODWORD(v27) = v12;
  uint64_t v18 = a4;
  uint64_t v19 = a5;
  uint64_t v20 = a6;
  uint64_t v21 = a7;
  uint64_t v22 = v15;
  swift_bridgeObjectRetain();
  PreferencesOutputs.makePreferenceTransformer<A>(inputs:key:transform:)();
  return swift_bridgeObjectRelease();
}

uint64_t type metadata accessor for PushDestination()
{
  return swift_getGenericMetadata();
}

uint64_t closure #1 in static PushDestination._makeDestinations(content:inputs:resolved:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v11 = a2;
  uint64_t v12 = a3;
  uint64_t v13 = a4;
  uint64_t v14 = a5;
  v9[2] = type metadata accessor for PushDestination();
  FunctionTypeMetadata1 = swift_getFunctionTypeMetadata1();
  uint64_t v6 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(a1, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply, (uint64_t)v9, FunctionTypeMetadata1, MEMORY[0x1E4FBC248], v6, MEMORY[0x1E4FBC278], v7);
  return v11;
}

uint64_t implicit closure #1 in static PushDestination._makeDestinations(content:inputs:resolved:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = a1;
  uint64_t v12 = a2;
  uint64_t v13 = a3;
  uint64_t v14 = a4;
  uint64_t v15 = a5;
  uint64_t v10 = type metadata accessor for PushDestination.PreferenceTransform();
  uint64_t WitnessTable = swift_getWitnessTable();
  type metadata accessor for Attribute<NavigationDestinationResolverBase>(0, &lazy cache variable for type metadata for Attribute<(_:)>, (uint64_t (*)(uint64_t))type metadata accessor for (_:), MEMORY[0x1E4F4E740]);
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v8, (uint64_t)closure #1 in Attribute.init<A>(_:)partial apply, (uint64_t)v9, v10, MEMORY[0x1E4FBC248], v5, MEMORY[0x1E4FBC278], v6);
  return v12;
}

uint64_t PushDestination.MakeDestination.value.getter()
{
  type metadata accessor for NavigationDestinationResolver();
  swift_getFunctionTypeMetadata1();
  uint64_t Value = (uint64_t *)AGGraphGetValue();
  uint64_t v1 = NavigationDestinationResolver.__allocating_init(transform:)(*Value, Value[1]);
  swift_retain();
  return v1;
}

uint64_t PushDestination.PreferenceTransform.destination.getter()
{
  type metadata accessor for NavigationDestinationResolverBase();
  uint64_t result = AGGraphGetWeakValue();
  if (result) {
    return swift_retain();
  }
  return result;
}

uint64_t protocol witness for Rule.value.getter in conformance PushDestination<A, B>.MakeDestination@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = PushDestination.MakeDestination.value.getter();
  *a1 = result;
  return result;
}

uint64_t (*PushDestination.PreferenceTransform.value.getter())(uint64_t a1)
{
  uint64_t v0 = PushDestination.PreferenceTransform.destination.getter();
  *(void *)(swift_allocObject() + 16) = v0;
  return partial apply for closure #1 in PushDestination.PreferenceTransform.value.getter;
}

uint64_t closure #1 in PushDestination.PreferenceTransform.value.getter(uint64_t result, uint64_t a2)
{
  if (a2)
  {
    unint64_t v2 = (void *)result;
    uint64_t v3 = swift_retain();
    MEMORY[0x18C115B40](v3);
    if (*(void *)((*v2 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*v2 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    }
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    return specialized Array._endMutation()();
  }
  return result;
}

uint64_t protocol witness for Rule.value.getter in conformance PushDestination<A, B>.PreferenceTransform@<X0>(uint64_t (**a1)(uint64_t a1)@<X8>)
{
  unint64_t v2 = PushDestination.PreferenceTransform.value.getter();
  uint64_t v4 = v3;
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = v2;
  *(void *)(result + 24) = v4;
  *a1 = partial apply for thunk for @escaping @callee_guaranteed (@inout AccessibilityLargeContentViewTree) -> ();
  a1[1] = (uint64_t (*)(uint64_t))result;
  return result;
}

uint64_t protocol witness for static NavigationDestination._makeDestinations(content:inputs:resolved:) in conformance PushDestination<A, B>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  return static PushDestination._makeDestinations(content:inputs:resolved:)(a1, a2, a3, a4[2], a4[3], a4[4], a4[5]);
}

uint64_t type metadata accessor for PushDestination.MakeDestination()
{
  return swift_getGenericMetadata();
}

uint64_t partial apply for implicit closure #1 in static PushDestination._makeDestinations(content:inputs:resolved:)()
{
  return implicit closure #1 in static PushDestination._makeDestinations(content:inputs:resolved:)(v0[6], v0[2], v0[3], v0[4], v0[5]);
}

_UNKNOWN **associated type witness table accessor for NavigationDestination.Body : NavigationDestination in PushDestination<A, B>()
{
  return &protocol witness table for Never;
}

uint64_t base witness table accessor for _AttributeBody in PushDestination<A, B>.MakeDestination()
{
  return swift_getWitnessTable();
}

uint64_t type metadata accessor for PushDestination.PreferenceTransform()
{
  return swift_getGenericMetadata();
}

void type metadata accessor for Attribute<NavigationDestinationResolverBase>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

uint64_t base witness table accessor for _AttributeBody in PushDestination<A, B>.PreferenceTransform()
{
  return swift_getWitnessTable();
}

uint64_t sub_18823C26C()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_18823C2A4()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in PushDestination.PreferenceTransform.value.getter(uint64_t a1)
{
  return closure #1 in PushDestination.PreferenceTransform.value.getter(a1, *(void *)(v1 + 16));
}

uint64_t specialized Sequence.contains(where:)(unint64_t a1)
{
  uint64_t v2 = v1;
  if (a1 >> 62) {
    goto LABEL_25;
  }
  uint64_t v4 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v4; uint64_t v4 = _CocoaArrayWrapper.endIndex.getter())
  {
    uint64_t v19 = v2;
    uint64_t v5 = 4;
    while (1)
    {
      uint64_t v6 = (a1 & 0xC000000000000001) != 0
         ? (char *)MEMORY[0x18C117680](v5 - 4, a1)
         : (char *)*(id *)(a1 + 8 * v5);
      uint64_t v7 = v6;
      uint64_t v2 = v5 - 3;
      if (__OFADD__(v5 - 4, 1)) {
        break;
      }
      AccessibilityNode.traits.getter(&v18);
      if ((v18 & 0x80000) != 0)
      {
        swift_bridgeObjectRelease();

        return 1;
      }
      uint64_t v8 = *(void *)&v7[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_relationshipScope];
      if (v8)
      {
        Swift::UInt v9 = *(void *)&v7[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_id];
        swift_beginAccess();
        uint64_t v10 = *(void *)(v8 + 32);
        if (*(void *)(v10 + 16) && (unint64_t v11 = specialized __RawDictionaryStorage.find<A>(_:)(v9, 0), (v12 & 1) != 0))
        {
          uint64_t v13 = *(void *)(*(void *)(v10 + 56) + 8 * v11);
          swift_endAccess();
          swift_retain();
          swift_bridgeObjectRetain();
          uint64_t v14 = v19;
          unint64_t v15 = specialized Sequence.reduce<A>(into:_:)(MEMORY[0x1E4FBC860], v13, v8, 1u);
          uint64_t v19 = v14;
          swift_bridgeObjectRelease();
        }
        else
        {
          swift_endAccess();
          swift_retain();
          unint64_t v15 = MEMORY[0x1E4FBC860];
        }
        if (v15 >> 62) {
          uint64_t v16 = _CocoaArrayWrapper.endIndex.getter();
        }
        else {
          uint64_t v16 = *(void *)((v15 & 0xFFFFFFFFFFFFFF8) + 0x10);
        }

        swift_release();
        swift_bridgeObjectRelease();
        if (v16)
        {
          swift_bridgeObjectRelease();
          return 1;
        }
      }
      else
      {
      }
      ++v5;
      if (v2 == v4) {
        goto LABEL_26;
      }
    }
    __break(1u);
LABEL_25:
    swift_bridgeObjectRetain();
  }
LABEL_26:
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySay7SwiftUI4TextVG_SayAF22AnyAccessibilityActionVGtG_ALs5NeverOTg503_s7d4UI26h68ChildBehaviorV7CombineV7combine8children7optionsAA0C10AttachmentVSayr30C4NodeCG_AE7OptionsVtFZSayAA03g2C6i8VGSayAA4F65VG_ARt_tcfu_33_9dd3dc44810f90035f5de19741f16de0AU_ARtARTf3nnnpk_nTf1cn_n(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = MEMORY[0x1E4FBC860];
  if (v1)
  {
    uint64_t v9 = MEMORY[0x1E4FBC860];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0);
    uint64_t v2 = v9;
    uint64_t v4 = (uint64_t *)(a1 + 40);
    do
    {
      uint64_t v5 = *v4;
      unint64_t v7 = *(void *)(v9 + 16);
      unint64_t v6 = *(void *)(v9 + 24);
      swift_bridgeObjectRetain();
      if (v7 >= v6 >> 1) {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v6 > 1), v7 + 1, 1);
      }
      *(void *)(v9 + 16) = v7 + 1;
      *(void *)(v9 + 8 * v7 + 32) = v5;
      v4 += 2;
      --v1;
    }
    while (v1);
  }
  return v2;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySay7SwiftUI4TextVG_SayAF22AnyAccessibilityActionVGtG_AIs5NeverOTg503_s7d4UI26h68ChildBehaviorV7CombineV7combine8children7optionsAA0C10AttachmentVSayr29C4NodeCG_AE7OptionsVtFZSayAA4f12VGAR_SayAA03g2C6I62VGt_tcfu1_32c6725c17a8d2e901e1a99f6670bf37f6AR_AUtARTf3nnnpk_nTf1cn_n(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = MEMORY[0x1E4FBC860];
  if (v1)
  {
    uint64_t v9 = MEMORY[0x1E4FBC860];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0);
    uint64_t v2 = v9;
    uint64_t v4 = (uint64_t *)(a1 + 32);
    do
    {
      uint64_t v5 = *v4;
      unint64_t v7 = *(void *)(v9 + 16);
      unint64_t v6 = *(void *)(v9 + 24);
      swift_bridgeObjectRetain();
      if (v7 >= v6 >> 1) {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v6 > 1), v7 + 1, 1);
      }
      *(void *)(v9 + 16) = v7 + 1;
      *(void *)(v9 + 8 * v7 + 32) = v5;
      v4 += 2;
      --v1;
    }
    while (v1);
  }
  return v2;
}

unint64_t specialized RandomAccessCollection<>.distance(from:to:)(unint64_t result, unint64_t a2, uint64_t a3, char a4)
{
  uint64_t v4 = a3;
  unint64_t v6 = result;
  if (a4)
  {
    if (*(void *)(a3 + 16) >= result)
    {
LABEL_10:
      swift_bridgeObjectRetain();
      goto LABEL_11;
    }
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  if (AGGraphGetWeakValue()) {
    uint64_t v7 = swift_bridgeObjectRetain();
  }
  else {
    uint64_t v7 = MEMORY[0x1E4FBC860];
  }
  unint64_t v8 = *(void *)(v7 + 16);
  uint64_t result = swift_bridgeObjectRelease();
  if (v8 < v6) {
    goto LABEL_14;
  }
  Weakuint64_t Value = (uint64_t *)AGGraphGetWeakValue();
  if (WeakValue)
  {
    uint64_t v4 = *WeakValue;
    goto LABEL_10;
  }
  uint64_t v4 = MEMORY[0x1E4FBC860];
LABEL_11:
  unint64_t v10 = *(void *)(v4 + 16);
  uint64_t result = swift_bridgeObjectRelease();
  if (v10 >= a2) {
    return a2 - v6;
  }
LABEL_15:
  __break(1u);
  return result;
}

uint64_t specialized RandomAccessCollection<>.distance(from:to:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  outlined init with copy of TableColumnCollection.Backing(v2, (uint64_t)v16);
  if (v17)
  {
    uint64_t v6 = *(void *)(*(void *)&v16[0] + 16);
    uint64_t result = swift_bridgeObjectRelease();
  }
  else
  {
    outlined init with take of OptionalBinaryInteger(v16, (uint64_t)v13);
    uint64_t v8 = v14;
    uint64_t v9 = v15;
    __swift_project_boxed_opaque_existential_1(v13, v14);
    uint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t))(v9 + 8))(v8, v9);
    uint64_t result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v13);
  }
  if (a1 < 0 || v6 < a1)
  {
    __break(1u);
  }
  else
  {
    outlined init with copy of TableColumnCollection.Backing(v3, (uint64_t)v16);
    if (v17)
    {
      uint64_t v10 = *(void *)(*(void *)&v16[0] + 16);
      uint64_t result = swift_bridgeObjectRelease();
    }
    else
    {
      outlined init with take of OptionalBinaryInteger(v16, (uint64_t)v13);
      uint64_t v11 = v14;
      uint64_t v12 = v15;
      __swift_project_boxed_opaque_existential_1(v13, v14);
      uint64_t v10 = (*(uint64_t (**)(uint64_t, uint64_t))(v12 + 8))(v11, v12);
      uint64_t result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v13);
    }
    if ((a2 & 0x8000000000000000) == 0 && v10 >= a2) {
      return a2 - a1;
    }
  }
  __break(1u);
  return result;
}

uint64_t specialized MutableCollection<>.sort(by:)(uint64_t *a1, char a2, char a3, char a4)
{
  uint64_t v8 = *a1;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *a1 = v8;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
    specialized _ContiguousArrayBuffer._consumeAndCreateNew()();
  }
  uint64_t v10 = *(void *)(v8 + 16);
  v12[0] = v8 + 32;
  v12[1] = v10;
  specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(v12, a2 & 1, a3, a4);
  return specialized ContiguousArray._endMutation()();
}

uint64_t specialized Collection.distance(from:to:)(uint64_t result, uint64_t a2, char a3, uint64_t a4, unsigned int a5, char a6, uint64_t a7)
{
  if (a6 & 1) != 0 || (a3) {
    goto LABEL_39;
  }
  unint64_t v8 = result;
  if (a4 < result) {
    goto LABEL_37;
  }
  if (a5 != a2)
  {
LABEL_38:
    __break(1u);
LABEL_39:
    __break(1u);
    return result;
  }
  if (result != a4)
  {
    uint64_t v12 = a7 + 64;
    uint64_t v22 = a7 + 96;
    uint64_t v10 = 1;
    while (1)
    {
      if ((v8 & 0x8000000000000000) != 0 || (uint64_t v13 = 1 << *(unsigned char *)(a7 + 32), (uint64_t)v8 >= v13))
      {
LABEL_34:
        __break(1u);
LABEL_35:
        __break(1u);
LABEL_36:
        __break(1u);
LABEL_37:
        __break(1u);
        goto LABEL_38;
      }
      unint64_t v14 = v8 >> 6;
      unint64_t v15 = *(void *)(v12 + 8 * (v8 >> 6));
      if (((v15 >> v8) & 1) == 0) {
        goto LABEL_35;
      }
      if (*(_DWORD *)(a7 + 36) != a5) {
        goto LABEL_36;
      }
      unint64_t v16 = v15 & (-2 << (v8 & 0x3F));
      if (v16)
      {
        uint64_t result = outlined consume of Set<UIOpenURLContext>.Index._Variant(v8, a2, 0);
        unint64_t v8 = __clz(__rbit64(v16)) | v8 & 0xFFFFFFFFFFFFFFC0;
        if (v8 == a4) {
          return v10;
        }
      }
      else
      {
        unint64_t v17 = v14 + 1;
        unint64_t v18 = (unint64_t)(v13 + 63) >> 6;
        if (v14 + 1 < v18)
        {
          unint64_t v19 = *(void *)(v12 + 8 * v17);
          if (v19) {
            goto LABEL_18;
          }
          unint64_t v17 = v14 + 2;
          if (v14 + 2 >= v18)
          {
LABEL_29:
            uint64_t result = outlined consume of Set<UIOpenURLContext>.Index._Variant(v8, a2, 0);
            unint64_t v8 = v13;
          }
          else
          {
            unint64_t v19 = *(void *)(v12 + 8 * v17);
            if (!v19)
            {
              unint64_t v17 = v14 + 3;
              if (v14 + 3 >= v18) {
                goto LABEL_29;
              }
              unint64_t v19 = *(void *)(v12 + 8 * v17);
              if (!v19)
              {
                unint64_t v20 = v18 - 4;
                while (v20 != v14)
                {
                  unint64_t v19 = *(void *)(v22 + 8 * v14++);
                  if (v19)
                  {
                    unint64_t v17 = v14 + 3;
                    goto LABEL_18;
                  }
                }
                goto LABEL_29;
              }
            }
LABEL_18:
            uint64_t result = outlined consume of Set<UIOpenURLContext>.Index._Variant(v8, a2, 0);
            unint64_t v8 = __clz(__rbit64(v19)) | (v17 << 6);
          }
          if (v8 == a4) {
            return v10;
          }
          goto LABEL_31;
        }
        uint64_t result = outlined consume of Set<UIOpenURLContext>.Index._Variant(v8, a2, 0);
        unint64_t v8 = v13;
        if (v13 == a4) {
          return v10;
        }
      }
LABEL_31:
      a2 = a5;
      if (__OFADD__(v10++, 1))
      {
        __break(1u);
        goto LABEL_34;
      }
    }
  }
  outlined consume of Set<UIOpenURLContext>.Index._Variant(a4, a2, 0);
  return 0;
}

uint64_t static AccessibilityChildBehavior.defaultCombine(childProperties:createsCustomActions:)@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t *a3@<X8>)
{
  void (*v17)(long long *__return_ptr, uint64_t, uint64_t);
  uint64_t v18;
  uint64_t (*v19)(void, uint64_t);
  uint64_t v20;
  int v21;
  unint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(long long *__return_ptr, uint64_t, uint64_t);
  uint64_t v27;
  uint64_t (*v28)(void, uint64_t);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  void (*v39)(long long *__return_ptr, uint64_t, uint64_t);
  uint64_t v40;
  uint64_t (*v41)(void, uint64_t);
  long long v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  char v49;
  char v50;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  char v58;
  uint64_t v59;
  uint64_t v60;
  void (*v61)(long long *__return_ptr, uint64_t, uint64_t);
  uint64_t v62;
  uint64_t v63;
  int64_t v64;
  char *v65;
  int64_t v66;
  char *isUniquelyReferenced_nonNull_native;
  int64_t v68;
  uint64_t v69;
  BOOL v70;
  uint64_t v71;
  int64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  char v89;
  char v90;
  uint64_t v91;
  unint64_t v92;
  char v93;
  unint64_t v94;
  char v95;
  unint64_t v96;
  char v97;
  unint64_t v98;
  char v99;
  unint64_t v100;
  char v101;
  unint64_t v102;
  char v103;
  char v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v110;
  char v111;
  _OWORD v112[3];
  long long v113;
  long long v114;
  long long v115;
  long long v116;
  long long v117;
  long long v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  char *v122;
  unint64_t v123;

  unint64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
    type metadata accessor for CVarArg(0, (unint64_t *)&lazy cache variable for type metadata for AnyAccessibilityPropertiesEntry);
    uint64_t result = Dictionary.init(minimumCapacity:)();
    *a3 = result;
    return result;
  }
  if (v4 == 1)
  {
    uint64_t v6 = swift_bridgeObjectRetain();
  }
  else
  {
    closure #1 in static AccessibilityChildBehavior.defaultCombine(childProperties:createsCustomActions:)(a1, (uint64_t *)&v116);
    uint64_t v6 = v116;
  }
  unint64_t v122 = (char *)MEMORY[0x1E4FBC860];
  char v123 = v6;
  v120 = MEMORY[0x1E4FBC860];
  unint64_t v121 = MEMORY[0x1E4FBC860];
  char v106 = (char *)MEMORY[0x1E4FBC860];
  v107 = a1;
  unsigned int v119 = MEMORY[0x1E4FBC860];
  v110 = a1 + 32;
  swift_bridgeObjectRetain();
  unint64_t v8 = 0;
  char v9 = 1;
  uint64_t v10 = MEMORY[0x1E4FBC840];
  unint64_t v108 = MEMORY[0x1E4FBC840] + 8;
  while (2)
  {
    id v105 = v9;
    if (v8 <= v4) {
      int64_t v11 = v4;
    }
    else {
      int64_t v11 = v8;
    }
    while (1)
    {
      if (v11 == v8)
      {
        __break(1u);
LABEL_128:
        __break(1u);
LABEL_129:
        __break(1u);
LABEL_130:
        __break(1u);
LABEL_131:
        __break(1u);
        goto LABEL_132;
      }
      uint64_t v12 = *(void *)(v110 + 8 * v8);
      *(void *)&uint64_t v113 = v12;
      swift_bridgeObjectRetain();
      AccessibilityProperties.traits.getter();
      if ((v116 & 0x20) == 0) {
        goto LABEL_21;
      }
      if (*(void *)(v12 + 16)
        && (unint64_t v13 = specialized __RawDictionaryStorage.find<A>(_:)(MEMORY[0x1E4F40B88]), (v14 & 1) != 0))
      {
        outlined init with copy of TableColumnList(*(void *)(v12 + 56) + 40 * v13, (uint64_t)&v116);
        uint64_t v15 = *((void *)&v117 + 1);
        uint64_t v16 = v118;
        __swift_project_boxed_opaque_existential_1(&v116, *((uint64_t *)&v117 + 1));
        unint64_t v17 = *(void (**)(long long *__return_ptr, uint64_t, uint64_t))(v16 + 8);
        swift_bridgeObjectRetain();
        unint64_t v18 = v16;
        uint64_t v10 = MEMORY[0x1E4FBC840];
        v17(&v113, v15, v18);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v116);
      }
      else
      {
        uint64_t v113 = 0u;
        char v114 = 0u;
        swift_bridgeObjectRetain();
      }
      unint64_t v19 = (uint64_t (*)(void, uint64_t))MEMORY[0x1E4FBB718];
      _sypSgMaTm_9(0, (unint64_t *)&lazy cache variable for type metadata for Any?, v10 + 8, MEMORY[0x1E4FBB718]);
      _sypSgMaTm_9(0, &lazy cache variable for type metadata for AccessibilityLabelStorage?, MEMORY[0x1E4F40E40], v19);
      if (swift_dynamicCast())
      {
        unint64_t v20 = v116;
        uint64_t v21 = BYTE8(v116);
        swift_bridgeObjectRelease();
        if (v20)
        {
          outlined consume of WidgetAuxiliaryTextImagePreference?(v20);
          if (v21 == 3) {
            goto LABEL_33;
          }
        }
LABEL_21:
        if (a2) {
          goto LABEL_24;
        }
        goto LABEL_25;
      }
      swift_bridgeObjectRelease();
      if (a2)
      {
LABEL_24:
        *(void *)&uint64_t v113 = v12;
        AccessibilityProperties.traits.getter();
        if (v116) {
          goto LABEL_33;
        }
      }
LABEL_25:
      if (*(void *)(v12 + 16)
        && (uint64_t v22 = specialized __RawDictionaryStorage.find<A>(_:)(MEMORY[0x1E4F40B88]), (v23 & 1) != 0))
      {
        outlined init with copy of TableColumnList(*(void *)(v12 + 56) + 40 * v22, (uint64_t)&v116);
        uint64_t v24 = *((void *)&v117 + 1);
        char v25 = v118;
        __swift_project_boxed_opaque_existential_1(&v116, *((uint64_t *)&v117 + 1));
        uint64_t v26 = *(void (**)(long long *__return_ptr, uint64_t, uint64_t))(v25 + 8);
        swift_bridgeObjectRetain();
        uint64_t v27 = v25;
        uint64_t v10 = MEMORY[0x1E4FBC840];
        v26(&v113, v24, v27);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v116);
      }
      else
      {
        uint64_t v113 = 0u;
        char v114 = 0u;
        swift_bridgeObjectRetain();
      }
      uint64_t v28 = (uint64_t (*)(void, uint64_t))MEMORY[0x1E4FBB718];
      _sypSgMaTm_9(0, (unint64_t *)&lazy cache variable for type metadata for Any?, v108, MEMORY[0x1E4FBB718]);
      _sypSgMaTm_9(0, &lazy cache variable for type metadata for AccessibilityLabelStorage?, MEMORY[0x1E4F40E40], v28);
      if (swift_dynamicCast())
      {
        uint64_t v29 = v116;
        swift_bridgeObjectRelease();
        if (v29) {
          specialized Array.append<A>(contentsOf:)(v29);
        }
      }
      else
      {
        swift_bridgeObjectRelease();
      }
LABEL_33:
      uint64_t v30 = swift_bridgeObjectRetain();
      specialized AccessibilityProperties.subscript.getter(v30, &v116);
      swift_bridgeObjectRelease();
      _s7SwiftUI25AccessibilityValueStorageVSgWOcTm_2((uint64_t)&v116, (uint64_t)&v113, &lazy cache variable for type metadata for AccessibilityValueStorage?, MEMORY[0x1E4F40E80]);
      if (*((void *)&v115 + 1))
      {
        v112[1] = v114;
        v112[2] = v115;
        v112[0] = v113;
        uint64_t v31 = swift_bridgeObjectRetain();
        specialized Array.append<A>(contentsOf:)(v31);
        outlined destroy of AccessibilityValueStorage((uint64_t)v112);
      }
      _s7SwiftUI25AccessibilityValueStorageVSgWOhTm_5((uint64_t)&v116, &lazy cache variable for type metadata for AccessibilityValueStorage?, MEMORY[0x1E4F40E80]);
      *(void *)&unint64_t v116 = v12;
      long long v32 = AccessibilityProperties.hints.getter();
      specialized Array.append<A>(contentsOf:)(v32);
      int v33 = swift_bridgeObjectRetain();
      long long v34 = specialized AccessibilityProperties.subscript.getter(v33);
      swift_bridgeObjectRelease();
      if (v34) {
        specialized Array.append<A>(contentsOf:)(v34);
      }
      if (*(void *)(v12 + 16)
        && (uint64_t v35 = specialized __RawDictionaryStorage.find<A>(_:)(MEMORY[0x1E4F40A98]), (v36 & 1) != 0))
      {
        outlined init with copy of TableColumnList(*(void *)(v12 + 56) + 40 * v35, (uint64_t)&v116);
        int v37 = *((void *)&v117 + 1);
        uint64_t v38 = v118;
        __swift_project_boxed_opaque_existential_1(&v116, *((uint64_t *)&v117 + 1));
        uint64_t v39 = *(void (**)(long long *__return_ptr, uint64_t, uint64_t))(v38 + 8);
        swift_bridgeObjectRetain();
        int v40 = v38;
        uint64_t v10 = MEMORY[0x1E4FBC840];
        v39(&v113, v37, v40);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v116);
      }
      else
      {
        uint64_t v113 = 0u;
        char v114 = 0u;
        swift_bridgeObjectRetain();
      }
      int v41 = (uint64_t (*)(void, uint64_t))MEMORY[0x1E4FBB718];
      _sypSgMaTm_9(0, (unint64_t *)&lazy cache variable for type metadata for Any?, v10 + 8, MEMORY[0x1E4FBB718]);
      _sypSgMaTm_9(0, (unint64_t *)&lazy cache variable for type metadata for AccessibilityIdentifierStorage?, MEMORY[0x1E4F41168], v41);
      if ((swift_dynamicCast() & 1) == 0)
      {
        swift_bridgeObjectRelease();
        goto LABEL_56;
      }
      int v42 = v116;
      uint64_t v43 = v117;
      swift_bridgeObjectRelease();
      if (!*((void *)&v42 + 1)) {
        goto LABEL_56;
      }
      if (v43)
      {
        unsigned int v45 = *((void *)&v42 + 1);
        int v44 = v42;
LABEL_55:
        outlined consume of _ViewList_ID??(v44, v45);
        goto LABEL_56;
      }
      int v46 = HIBYTE(*((void *)&v42 + 1)) & 0xFLL;
      if ((*((void *)&v42 + 1) & 0x2000000000000000) == 0) {
        int v46 = v42 & 0xFFFFFFFFFFFFLL;
      }
      if (!v46)
      {
        unsigned int v45 = *((void *)&v42 + 1);
        int v44 = v42;
        goto LABEL_55;
      }
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        char v106 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v106 + 2) + 1, 1, v106);
      }
      unsigned int v48 = *((void *)v106 + 2);
      uint64_t v47 = *((void *)v106 + 3);
      if (v48 >= v47 >> 1) {
        char v106 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v47 > 1), v48 + 1, 1, v106);
      }
      *((void *)v106 + 2) = v48 + 1;
      *(_OWORD *)&v106[16 * v48 + 32] = v42;
      uint64_t v10 = MEMORY[0x1E4FBC840];
LABEL_56:
      *(void *)&unint64_t v116 = v12;
      LOBYTE(v113) = 8;
      if ((AccessibilityProperties.subscript.getter() & 1) == 0) {
        break;
      }
      swift_bridgeObjectRelease();
LABEL_11:
      if (v4 == ++v8)
      {
        uint64_t v50 = v105;
        goto LABEL_62;
      }
    }
    *(void *)&unint64_t v116 = v12;
    LOBYTE(v113) = 5;
    int v49 = AccessibilityProperties.subscript.getter();
    swift_bridgeObjectRelease();
    if (v49) {
      goto LABEL_11;
    }
    char v9 = 0;
    uint64_t v50 = 0;
    if (v4 - 1 != v8++) {
      continue;
    }
    break;
  }
LABEL_62:
  uint64_t v111 = v50;
  uint64_t v52 = v107;
  swift_bridgeObjectRelease();
  __int16 v53 = v122;
  if (*((void *)v122 + 2)) {
    goto LABEL_87;
  }
  swift_bridgeObjectRetain();
  long long v54 = 0;
  int v55 = MEMORY[0x1E4F40E40];
  while (2)
  {
    unint64_t v56 = *(void *)(v52 + 8 * v54 + 32);
    if (*(void *)(v56 + 16)
      && (uint64_t v57 = specialized __RawDictionaryStorage.find<A>(_:)(MEMORY[0x1E4F40B88]), (v58 & 1) != 0))
    {
      outlined init with copy of TableColumnList(*(void *)(v56 + 56) + 40 * v57, (uint64_t)&v116);
      uint64_t v59 = *((void *)&v117 + 1);
      long long v60 = v118;
      __swift_project_boxed_opaque_existential_1(&v116, *((uint64_t *)&v117 + 1));
      uint64_t v61 = *(void (**)(long long *__return_ptr, uint64_t, uint64_t))(v60 + 8);
      swift_bridgeObjectRetain();
      long long v62 = v60;
      uint64_t v52 = v107;
      v61(&v113, v59, v62);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v116);
    }
    else
    {
      uint64_t v113 = 0u;
      char v114 = 0u;
      swift_bridgeObjectRetain();
    }
    _sypSgMaTm_9(0, &lazy cache variable for type metadata for AccessibilityLabelStorage?, v55, MEMORY[0x1E4FBB718]);
    if (swift_dynamicCast())
    {
      uint64_t v63 = v116;
      swift_bridgeObjectRelease();
      if (v63)
      {
        unint64_t v64 = *(void *)(v63 + 16);
        int v65 = v122;
        int v66 = *((void *)v122 + 2);
        int64_t v11 = v66 + v64;
        if (__OFADD__(v66, v64)) {
          goto LABEL_128;
        }
        char isUniquelyReferenced_nonNull_native = (char *)swift_isUniquelyReferenced_nonNull_native();
        if (isUniquelyReferenced_nonNull_native && (uint64_t v68 = *((void *)v65 + 3) >> 1, v68 >= v11))
        {
          if (*(void *)(v63 + 16))
          {
LABEL_76:
            if (v68 - *((void *)v65 + 2) < v64) {
              goto LABEL_130;
            }
            swift_arrayInitWithCopy();
            if (v64)
            {
              uint64_t v69 = *((void *)v65 + 2);
              int v70 = __OFADD__(v69, v64);
              uint64_t v71 = v69 + v64;
              if (v70) {
                goto LABEL_131;
              }
              *((void *)v65 + 2) = v71;
            }
            goto LABEL_85;
          }
        }
        else
        {
          if (v66 <= v11) {
            unsigned __int8 v72 = v66 + v64;
          }
          else {
            unsigned __int8 v72 = v66;
          }
          int v65 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v72, 1, v65);
          uint64_t v68 = *((void *)v65 + 3) >> 1;
          if (*(void *)(v63 + 16)) {
            goto LABEL_76;
          }
        }
        if (v64) {
          goto LABEL_129;
        }
LABEL_85:
        outlined consume of WidgetAuxiliaryTextImagePreference?(v63);
        unint64_t v122 = v65;
        uint64_t v52 = v107;
      }
    }
    else
    {
      *(void *)&unint64_t v116 = 1;
      BYTE8(v116) = 0;
      swift_bridgeObjectRelease();
    }
    if (v4 != ++v54) {
      continue;
    }
    break;
  }
  swift_bridgeObjectRelease();
  __int16 v53 = v122;
  if (*((void *)v122 + 2))
  {
LABEL_87:
    _s7SwiftUI28AccessibilityPropertiesEntryVyAA0C12LabelStorageVSgGMaTm_2(0, (unint64_t *)&lazy cache variable for type metadata for AccessibilityPropertiesEntry<AccessibilityLabelStorage?>, &lazy cache variable for type metadata for AccessibilityLabelStorage?, MEMORY[0x1E4F40E40]);
    *((void *)&v117 + 1) = v73;
    *(void *)&uint64_t v118 = lazy protocol witness table accessor for type AccessibilityPropertiesEntry<AccessibilityLabelStorage?> and conformance AccessibilityPropertiesEntry<A>();
    *(void *)&unint64_t v116 = v53;
    BYTE8(v116) = 2;
    swift_bridgeObjectRetain();
    specialized Dictionary.subscript.setter((uint64_t)&v116, MEMORY[0x1E4F40B88]);
  }
  uint64_t v74 = v121;
  if (!*(void *)(v121 + 16))
  {
    swift_bridgeObjectRelease();
    goto LABEL_95;
  }
  uint64_t v75 = swift_bridgeObjectRetain();
  specialized AccessibilityProperties.subscript.getter(v75, &v116);
  swift_bridgeObjectRelease();
  unint64_t v76 = *((void *)&v118 + 1);
  _s7SwiftUI25AccessibilityValueStorageVSgWOhTm_5((uint64_t)&v116, &lazy cache variable for type metadata for AccessibilityValueStorage?, MEMORY[0x1E4F40E80]);
  if (!v76)
  {
    swift_bridgeObjectRelease();
    *(void *)&unint64_t v115 = 0;
    uint64_t v113 = 0u;
    char v114 = 0u;
    swift_bridgeObjectRetain();
    _s7SwiftUI25AccessibilityValueStorageVSgWOhTm_5((uint64_t)&v113, &lazy cache variable for type metadata for AnyAccessibilityValue?, MEMORY[0x1E4F40788]);
    uint64_t v113 = 0u;
    char v114 = 0u;
    *(void *)&unint64_t v115 = 0;
    *((void *)&v115 + 1) = v74;
    unint64_t v116 = 0u;
    uint64_t v117 = 0u;
    uint64_t v118 = v115;
LABEL_94:
    int v78 = MEMORY[0x1E4F40E80];
    _s7SwiftUI25AccessibilityValueStorageVSgWOcTm_2((uint64_t)&v116, (uint64_t)&v113, &lazy cache variable for type metadata for AccessibilityValueStorage?, MEMORY[0x1E4F40E80]);
    specialized AccessibilityProperties.subscript.setter((uint64_t)&v113);
    _s7SwiftUI25AccessibilityValueStorageVSgWOhTm_5((uint64_t)&v116, &lazy cache variable for type metadata for AccessibilityValueStorage?, v78);
LABEL_95:
    MEMORY[0x18C111DD0](v120);
    *(void *)&unint64_t v116 = v106;
    _sypSgMaTm_9(0, (unint64_t *)&lazy cache variable for type metadata for [String], MEMORY[0x1E4FBB1A0], MEMORY[0x1E4FBB320]);
    lazy protocol witness table accessor for type [String] and conformance [A]();
    char v79 = BidirectionalCollection<>.joined(separator:)();
    id v81 = v80;
    swift_bridgeObjectRelease();
    id v82 = HIBYTE(v81) & 0xF;
    if ((v81 & 0x2000000000000000) == 0) {
      id v82 = v79 & 0xFFFFFFFFFFFFLL;
    }
    if (!v82)
    {
      swift_bridgeObjectRelease();
      char v79 = 0;
      id v81 = 0;
    }
    specialized AccessibilityProperties.subscript.setter(v79, v81, 0);
    if (*(void *)(v119 + 16)) {
      char v83 = swift_bridgeObjectRetain();
    }
    else {
      char v83 = 0;
    }
    specialized AccessibilityProperties.subscript.setter(v83);
    if ((v111 & 1) == 0)
    {
      LOBYTE(v116) = 8;
      AccessibilityProperties.subscript.setter();
    }
    LOBYTE(v116) = 5;
    AccessibilityProperties.subscript.setter();
    unint64_t v84 = v123;
    if (a2)
    {
      v85 = swift_bridgeObjectRetain();
      v86 = specialized AccessibilityProperties.subscript.getter(v85);
      swift_bridgeObjectRelease();
      uint64_t v87 = *(void *)(v86 + 16);
      swift_bridgeObjectRelease();
      if (v87)
      {
        LOBYTE(v116) = 0;
        AccessibilityProperties.subscript.setter();
        LOBYTE(v116) = 3;
        AccessibilityProperties.subscript.setter();
        unint64_t v84 = v123;
      }
    }
    v88 = specialized __RawDictionaryStorage.find<A>(_:)(MEMORY[0x1E4F40AF0]);
    if ((v89 & 1) == 0)
    {
      *(void *)&uint64_t v118 = 0;
      unint64_t v116 = 0u;
      uint64_t v117 = 0u;
      goto LABEL_111;
    }
    int64_t v11 = v88;
    unint64_t v90 = swift_isUniquelyReferenced_nonNull_native();
    *(void *)&uint64_t v113 = v84;
    char v123 = 0x8000000000000000;
    if (v90)
    {
LABEL_109:
      outlined init with take of OptionalBinaryInteger((long long *)(*(void *)(v84 + 56) + 40 * v11), (uint64_t)&v116);
      specialized _NativeDictionary._delete(at:)(v11, v84);
      char v123 = v84;
      swift_bridgeObjectRelease();
LABEL_111:
      outlined destroy of AnyAccessibilityPropertiesEntry?((uint64_t)&v116);
      LOBYTE(v116) = 19;
      AccessibilityProperties.subscript.setter();
      uint64_t v91 = v123;
      unint64_t v92 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&type metadata for AccessibilityProperties.AutomationVisibilityKey);
      if (v93)
      {
        id v94 = v92;
        v95 = swift_isUniquelyReferenced_nonNull_native();
        *(void *)&uint64_t v113 = v91;
        if ((v95 & 1) == 0)
        {
          specialized _NativeDictionary.copy()();
          uint64_t v91 = v113;
        }
        outlined init with take of OptionalBinaryInteger((long long *)(*(void *)(v91 + 56) + 40 * v94), (uint64_t)&v116);
        specialized _NativeDictionary._delete(at:)(v94, v91);
        char v123 = v91;
        swift_bridgeObjectRelease();
      }
      else
      {
        *(void *)&uint64_t v118 = 0;
        unint64_t v116 = 0u;
        uint64_t v117 = 0u;
      }
      outlined destroy of AnyAccessibilityPropertiesEntry?((uint64_t)&v116);
      v96 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&type metadata for AccessibilityProperties.TextLayoutPropertiesKey);
      if (v97)
      {
        v98 = v96;
        char v99 = swift_isUniquelyReferenced_nonNull_native();
        *(void *)&uint64_t v113 = v91;
        char v123 = 0x8000000000000000;
        if ((v99 & 1) == 0)
        {
          specialized _NativeDictionary.copy()();
          uint64_t v91 = v113;
        }
        outlined init with take of OptionalBinaryInteger((long long *)(*(void *)(v91 + 56) + 40 * v98), (uint64_t)&v116);
        specialized _NativeDictionary._delete(at:)(v98, v91);
        char v123 = v91;
        swift_bridgeObjectRelease();
      }
      else
      {
        *(void *)&uint64_t v118 = 0;
        unint64_t v116 = 0u;
        uint64_t v117 = 0u;
        uint64_t v91 = v123;
      }
      outlined destroy of AnyAccessibilityPropertiesEntry?((uint64_t)&v116);
      char v100 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&type metadata for AccessibilityProperties.UIKitBridgedInteractionKey);
      if (v101)
      {
        char v102 = v100;
        id v103 = swift_isUniquelyReferenced_nonNull_native();
        *(void *)&uint64_t v113 = v91;
        char v123 = 0x8000000000000000;
        if ((v103 & 1) == 0)
        {
          specialized _NativeDictionary.copy()();
          uint64_t v91 = v113;
        }
        outlined init with take of OptionalBinaryInteger((long long *)(*(void *)(v91 + 56) + 40 * v102), (uint64_t)&v116);
        specialized _NativeDictionary._delete(at:)(v102, v91);
        char v123 = v91;
        swift_bridgeObjectRelease();
      }
      else
      {
        *(void *)&uint64_t v118 = 0;
        unint64_t v116 = 0u;
        uint64_t v117 = 0u;
        uint64_t v91 = v123;
      }
      outlined destroy of AnyAccessibilityPropertiesEntry?((uint64_t)&v116);
      *a3 = v91;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    }
LABEL_132:
    specialized _NativeDictionary.copy()();
    unint64_t v84 = v113;
    goto LABEL_109;
  }
  swift_bridgeObjectRetain();
  char v77 = swift_bridgeObjectRetain();
  specialized AccessibilityProperties.subscript.getter(v77, &v116);
  uint64_t result = swift_bridgeObjectRelease();
  if (*((void *)&v118 + 1))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    *((void *)&v118 + 1) = v74;
    goto LABEL_94;
  }
  __break(1u);
  return result;
}

unint64_t *specialized CoalescingAdjacentDuplicates.formIndex(after:)(unint64_t *result, uint64_t a2, uint64_t (*a3)(uint64_t *, void *))
{
  unint64_t v3 = *result;
  if ((*result & 0x8000000000000000) != 0)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  unint64_t v5 = *(void *)(a2 + 16);
  if (v3 < v5)
  {
    uint64_t v6 = result;
    uint64_t v7 = (void *)(a2 + 40 * v3);
    uint64_t v9 = v7[4];
    uint64_t v8 = v7[5];
    uint64_t v10 = v7[6];
    uint64_t v11 = v7[7];
    uint64_t v12 = v7[8];
    uint64_t result = (unint64_t *)outlined copy of Text?(v9, v8, v10, v11);
    unint64_t v13 = v3 + 1;
    uint64_t v28 = v9;
    uint64_t v29 = v8;
    uint64_t v30 = v10;
    uint64_t v31 = v11;
    uint64_t v32 = v12;
    if (v3 + 1 == v5)
    {
LABEL_10:
      uint64_t result = (unint64_t *)outlined consume of Text?(v9, v8, v10, v11);
      *uint64_t v6 = v5;
      return result;
    }
    uint64_t v21 = v6;
    unint64_t v22 = v5;
    char v14 = (uint64_t *)(a2 + 40 * v3 + 104);
    uint64_t v25 = v11;
    uint64_t v26 = v10;
    while (v5 != v13)
    {
      uint64_t v15 = *(v14 - 3);
      uint64_t v16 = *(v14 - 2);
      uint64_t v17 = *(v14 - 1);
      uint64_t v18 = *v14;
      v27[0] = *(v14 - 4);
      uint64_t v10 = v27[0];
      v27[1] = v15;
      v27[2] = v16;
      v27[3] = v17;
      v27[4] = v18;
      outlined copy of Text?(v9, v8, v26, v25);
      swift_bridgeObjectRetain();
      swift_retain();
      outlined copy of Text?(v10, v15, v16, v17);
      char v24 = a3(&v28, v27);
      uint64_t v19 = v10;
      uint64_t v20 = v15;
      uint64_t v11 = v25;
      LOBYTE(v10) = v26;
      outlined consume of Text?(v19, v20, v16, v17);
      outlined consume of Text?(v9, v8, v26, v25);
      swift_release();
      uint64_t result = (unint64_t *)swift_bridgeObjectRelease();
      if ((v24 & 1) == 0)
      {
        unint64_t v5 = v13;
        uint64_t v6 = v21;
        goto LABEL_10;
      }
      ++v13;
      uint64_t v28 = v9;
      uint64_t v29 = v8;
      uint64_t v30 = v26;
      uint64_t v31 = v25;
      v14 += 5;
      uint64_t v32 = v12;
      unint64_t v5 = v22;
      if (v22 == v13)
      {
        uint64_t v6 = v21;
        goto LABEL_10;
      }
    }
    __break(1u);
    goto LABEL_12;
  }
LABEL_13:
  __break(1u);
  return result;
}

uint64_t specialized closure #1 in Collection<>.filterVisible(_:)(uint64_t a1, uint64_t (*a2)(uint64_t))
{
  AccessibilityNode.visibility.getter(&v5);
  if (v5 & 4) != 0 || (v5 & 8) != 0 && (v6 & 4) == 0 || (AccessibilityNode.isPlaceholderOrIgnored.getter()) {
    return 0;
  }
  if (a2) {
    return a2(a1) & 1;
  }
  return 1;
}

uint64_t AccessibilityChildBehavior.hash(into:)()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 112))();
}

uint64_t static AccessibilityChildBehavior.== infix(_:_:)(uint64_t a1, void *a2)
{
  return (*(uint64_t (**)(void))(**(void **)a1 + 104))(*a2) & 1;
}

Swift::Int AccessibilityChildBehavior.hashValue.getter()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)();
  (*(void (**)(unsigned char *))(*(void *)v1 + 112))(v3);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AccessibilityChildBehavior()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)();
  (*(void (**)(unsigned char *))(*(void *)v1 + 112))(v3);
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AccessibilityChildBehavior()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 112))();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AccessibilityChildBehavior()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)();
  (*(void (**)(unsigned char *))(*(void *)v1 + 112))(v3);
  return Hasher._finalize()();
}

unint64_t lazy protocol witness table accessor for type AccessibilityChildBehavior and conformance AccessibilityChildBehavior()
{
  unint64_t result = lazy protocol witness table cache variable for type AccessibilityChildBehavior and conformance AccessibilityChildBehavior;
  if (!lazy protocol witness table cache variable for type AccessibilityChildBehavior and conformance AccessibilityChildBehavior)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityChildBehavior and conformance AccessibilityChildBehavior);
  }
  return result;
}

uint64_t one-time initialization function for automatic(uint64_t a1)
{
  return one-time initialization function for automatic(a1, &lazy cache variable for type metadata for AccessibilityChildBehaviorBox<AccessibilityChildBehavior.Automatic>, (uint64_t (*)(void))lazy protocol witness table accessor for type AccessibilityChildBehavior.Automatic and conformance AccessibilityChildBehavior.Automatic, (uint64_t)&type metadata for AccessibilityChildBehavior.Automatic, &static AccessibilityChildBehavior.automatic);
}

uint64_t one-time initialization function for automation(uint64_t a1)
{
  return one-time initialization function for automatic(a1, &lazy cache variable for type metadata for AccessibilityChildBehaviorBox<AccessibilityChildBehavior.Automation>, (uint64_t (*)(void))lazy protocol witness table accessor for type AccessibilityChildBehavior.Automation and conformance AccessibilityChildBehavior.Automation, (uint64_t)&type metadata for AccessibilityChildBehavior.Automation, &static AccessibilityChildBehavior.automation);
}

uint64_t AccessibilityChildBehavior.Ignore.initialAttachment(for:)()
{
  int v0 = unk_1ED449E24;
  if ((unk_1ED449E24 & ~dword_1ED449E20) == 0) {
    int v0 = 0;
  }
  int v1 = v0 | dword_1ED449E20;
  int v2 = v0 | dword_1ED449E20 | dword_1ED449DF8;
  type metadata accessor for CVarArg(0, (unint64_t *)&lazy cache variable for type metadata for AnyAccessibilityPropertiesEntry);
  uint64_t v6 = Dictionary.init(minimumCapacity:)();
  _s10Foundation14DateComponentsVSgMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for AccessibilityPropertiesEntry<AccessibilityNullableOptionSet<AccessibilityVisibility>>, (uint64_t (*)(uint64_t))type metadata accessor for AccessibilityNullableOptionSet<AccessibilityVisibility>, MEMORY[0x1E4F41090]);
  v5[3] = v3;
  unsigned char v5[4] = lazy protocol witness table accessor for type AccessibilityPropertiesEntry<AccessibilityNullableOptionSet<AccessibilityVisibility>> and conformance AccessibilityPropertiesEntry<A>();
  v5[0] = __PAIR64__(v2, v1);
  specialized Dictionary.subscript.setter((uint64_t)v5, MEMORY[0x1E4F40AA8]);
  v5[0] = v6;
  static AccessibilityAttachment.properties(_:)();

  return swift_bridgeObjectRelease();
}

void specialized AccessibilityChildBehaviorProvider.visibility(for:nodes:)(unint64_t a1@<X2>, void *a2@<X8>)
{
  if (!(a1 >> 62))
  {
    uint64_t v4 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v4) {
      goto LABEL_3;
    }
LABEL_8:
    swift_bridgeObjectRelease();
    uint64_t v7 = 0;
    goto LABEL_9;
  }
  swift_bridgeObjectRetain();
  if (!_CocoaArrayWrapper.endIndex.getter()) {
    goto LABEL_8;
  }
LABEL_3:
  if ((a1 & 0xC000000000000001) != 0)
  {
    id v5 = (id)MEMORY[0x18C117680](0, a1);
    goto LABEL_6;
  }
  if (*(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    id v5 = *(id *)(a1 + 32);
LABEL_6:
    uint64_t v6 = v5;
    swift_bridgeObjectRelease();
    AccessibilityNode.visibility.getter((int *)&v8);

    uint64_t v7 = v8;
LABEL_9:
    *a2 = v7;
    return;
  }
  __break(1u);
}

uint64_t AccessibilityChildBehavior.Host.initialAttachment(for:)()
{
  int v0 = unk_1ED449D84;
  if ((unk_1ED449D84 & ~dword_1ED449D80) == 0) {
    int v0 = 0;
  }
  int v1 = dword_1ED449D88;
  if ((dword_1ED449D88 & ~(v0 | dword_1ED449D80)) == 0) {
    int v1 = 0;
  }
  int v2 = v1 | v0 | dword_1ED449D80;
  type metadata accessor for CVarArg(0, (unint64_t *)&lazy cache variable for type metadata for AnyAccessibilityPropertiesEntry);
  uint64_t v6 = Dictionary.init(minimumCapacity:)();
  _s10Foundation14DateComponentsVSgMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for AccessibilityPropertiesEntry<AccessibilityNullableOptionSet<AccessibilityVisibility>>, (uint64_t (*)(uint64_t))type metadata accessor for AccessibilityNullableOptionSet<AccessibilityVisibility>, MEMORY[0x1E4F41090]);
  v5[3] = v3;
  unsigned char v5[4] = lazy protocol witness table accessor for type AccessibilityPropertiesEntry<AccessibilityNullableOptionSet<AccessibilityVisibility>> and conformance AccessibilityPropertiesEntry<A>();
  LODWORD(v5[0]) = v2;
  HIDWORD(v5[0]) = v2;
  specialized Dictionary.subscript.setter((uint64_t)v5, MEMORY[0x1E4F40AA8]);
  v5[0] = v6;
  static AccessibilityAttachment.properties(_:)();

  return swift_bridgeObjectRelease();
}

uint64_t AccessibilityChildBehavior.Contain.initialAttachment(for:)()
{
  _sypSgMaTm_9(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<AccessibilityVisibility>, MEMORY[0x1E4F40BB8], MEMORY[0x1E4FBBE00]);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_18834BB80;
  static AccessibilityVisibility.containerElement.getter();
  unsigned int v1 = *(_DWORD *)(inited + 32);
  swift_bridgeObjectRelease();
  LODWORD(inited) = dword_1ED449F58 | v1;
  type metadata accessor for CVarArg(0, (unint64_t *)&lazy cache variable for type metadata for AnyAccessibilityPropertiesEntry);
  uint64_t v5 = Dictionary.init(minimumCapacity:)();
  _s10Foundation14DateComponentsVSgMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for AccessibilityPropertiesEntry<AccessibilityNullableOptionSet<AccessibilityVisibility>>, (uint64_t (*)(uint64_t))type metadata accessor for AccessibilityNullableOptionSet<AccessibilityVisibility>, MEMORY[0x1E4F41090]);
  long long v4[3] = v2;
  v4[4] = lazy protocol witness table accessor for type AccessibilityPropertiesEntry<AccessibilityNullableOptionSet<AccessibilityVisibility>> and conformance AccessibilityPropertiesEntry<A>();
  v4[0] = __PAIR64__(inited, v1);
  specialized Dictionary.subscript.setter((uint64_t)v4, MEMORY[0x1E4F40AA8]);
  v4[0] = v5;
  return AccessibilityAttachment.init(properties:)();
}

uint64_t AccessibilityChildBehavior.Automation.initialAttachment(for:)()
{
  int v0 = dword_1ED476D68;
  type metadata accessor for CVarArg(0, (unint64_t *)&lazy cache variable for type metadata for AnyAccessibilityPropertiesEntry);
  uint64_t v4 = Dictionary.init(minimumCapacity:)();
  _s10Foundation14DateComponentsVSgMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for AccessibilityPropertiesEntry<AccessibilityNullableOptionSet<AccessibilityVisibility>>, (uint64_t (*)(uint64_t))type metadata accessor for AccessibilityNullableOptionSet<AccessibilityVisibility>, MEMORY[0x1E4F41090]);
  v3[3] = v1;
  v3[4] = lazy protocol witness table accessor for type AccessibilityPropertiesEntry<AccessibilityNullableOptionSet<AccessibilityVisibility>> and conformance AccessibilityPropertiesEntry<A>();
  LODWORD(v3[0]) = v0;
  HIDWORD(v3[0]) = v0;
  specialized Dictionary.subscript.setter((uint64_t)v3, MEMORY[0x1E4F40AA8]);
  v3[0] = v4;
  return AccessibilityAttachment.init(properties:)();
}

void protocol witness for AccessibilityChildBehaviorProvider.visibility(for:nodes:) in conformance AccessibilityChildBehavior.Automation(unint64_t a1@<X1>, void *a2@<X8>)
{
}

Swift::Bool __swiftcall AccessibilityChildBehavior.Combine.willCreateNode(for:)(Swift::OpaquePointer a1)
{
  char v2 = v1;
  rawuint64_t Value = (unint64_t)a1._rawValue;
  if ((unint64_t)a1._rawValue >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
    LOBYTE(a1._rawValue) = swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v4 = *(void *)(((unint64_t)a1._rawValue & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  char v5 = v2;
  if (v4 != 1)
  {
    if (v4 < 2 || (v2 & 2) == 0 || (specialized Sequence.contains(where:)(rawValue) & 1) == 0)
    {
LABEL_21:
      LOBYTE(a1._rawValue) = 1;
      return (Swift::Bool)a1._rawValue;
    }
LABEL_14:
    LOBYTE(a1._rawValue) = 0;
    return (Swift::Bool)a1._rawValue;
  }
  if ((rawValue & 0xC000000000000001) != 0)
  {
    id v6 = (id)MEMORY[0x18C117680](0, rawValue);
  }
  else
  {
    if (!*(void *)((rawValue & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      return (Swift::Bool)a1._rawValue;
    }
    id v6 = *(id *)(rawValue + 32);
  }
  uint64_t v7 = v6;
  AccessibilityNode.platformElement.getter();
  uint64_t v9 = v8;

  if (!v9)
  {
    if ((v5 & 8) != 0)
    {
      id v10 = (rawValue & 0xC000000000000001) != 0
          ? (id)MEMORY[0x18C117680](0, rawValue)
          : *(id *)(rawValue + 32);
      uint64_t v11 = v10;
      AccessibilityNode.visibility.getter(&v13);

      if ((v13 & 4) != 0 || (v14 & 4) == 0 && (v13 & 8) != 0) {
        goto LABEL_21;
      }
    }
    goto LABEL_14;
  }

  LOBYTE(a1._rawValue) = (v5 & 1) == 0;
  return (Swift::Bool)a1._rawValue;
}

void AccessibilityChildBehavior.Combine.initialAttachment(for:)(unint64_t a1@<X0>, char a2@<W1>, void *a3@<X8>)
{
  void (*v52)(_OWORD *__return_ptr, uint64_t, unint64_t);
  uint64_t (*v53)(void, uint64_t);
  unint64_t v54;
  uint64_t v55;
  char v56;
  unint64_t v57;
  int v58;
  Swift::Bool v59;
  unint64_t v60;
  uint64_t *v61;
  char *v62;
  void *v63;
  void *v64;
  char *v65;
  uint64_t v66;
  unint64_t v67;
  void *v68;
  uint64_t v69;
  uint64_t v70;
  void *v71;
  id v72;
  void *v73;
  uint64_t v74;
  uint64_t v75;
  char *v78;
  unsigned char *v79;
  unint64_t v80;
  uint64_t *v81;
  void *rawValue;
  uint64_t v83;
  unsigned char v84[21];
  char v85;
  uint64_t v86;
  unint64_t v87;
  _OWORD v88[2];
  char v89;
  uint64_t v90;

  v4._rawuint64_t Value = (void *)a1;
  unint64_t v90 = a1;
  char v5 = (uint64_t *)(a1 >> 62);
  if (a1 >> 62) {
    goto LABEL_85;
  }
  uint64_t v6 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (v6 == 1)
  {
LABEL_3:
    unint64_t v7 = (unint64_t)v4._rawValue & 0xC000000000000001;
    if (((unint64_t)v4._rawValue & 0xC000000000000001) != 0)
    {
      id v8 = (id)MEMORY[0x18C117680](0, v4._rawValue);
    }
    else
    {
      if (!*(void *)(((unint64_t)v4._rawValue & 0xFFFFFFFFFFFFFF8) + 0x10))
      {
        __break(1u);
        goto LABEL_89;
      }
      id v8 = *((id *)v4._rawValue + 4);
    }
    uint64_t v9 = v8;
    AccessibilityNode.platformElement.getter();
    uint64_t v11 = v10;

    if (!v11) {
      goto LABEL_22;
    }

    if (v7) {
      uint64_t v12 = (char *)MEMORY[0x18C117680](0, v4._rawValue);
    }
    else {
      uint64_t v12 = (char *)*((id *)v4._rawValue + 4);
    }
    int v13 = v12;
    uint64_t v14 = MEMORY[0x18C119DF0](&v12[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_bridgedChild]);
    uint64_t v3 = &OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_children;
    if (v14)
    {
      uint64_t v15 = (void *)v14;
      uint64_t v16 = (unint64_t *)(v14 + OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_children);
      swift_beginAccess();
      unint64_t v17 = *v16;
      swift_bridgeObjectRetain();
    }
    else
    {

      unint64_t v17 = MEMORY[0x1E4FBC860];
    }
    specialized Array.append<A>(contentsOf:)(v17);
    uint64_t v6 = v90;
    unint64_t v7 = v90 & 0xC000000000000001;
    if ((v90 & 0xC000000000000001) == 0)
    {
      if (!*(void *)((v90 & 0xFFFFFFFFFFFFFF8) + 0x10))
      {
        __break(1u);
        goto LABEL_91;
      }
      id v18 = *(id *)(v90 + 32);
LABEL_16:
      uint64_t v19 = v18;
      AccessibilityNode.visibility.getter((int *)v84);

      *(void *)&v88[0] = *(void *)v84;
      AccessibilityNullableOptionSet<>.resolved.getter();
      if (!v89) {
        goto LABEL_22;
      }
      if (v7)
      {
        uint64_t v20 = (char *)MEMORY[0x18C117680](0, v6);
LABEL_21:
        uint64_t v21 = v20;
        unint64_t v22 = (unint64_t *)&v20[*v3];
        swift_beginAccess();
        unint64_t v23 = *v22;
        swift_bridgeObjectRetain();

        specialized Array.append<A>(contentsOf:)(v23);
        goto LABEL_22;
      }
      if (*(void *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x10))
      {
        uint64_t v20 = (char *)*(id *)(v6 + 32);
        goto LABEL_21;
      }
LABEL_91:
      __break(1u);
LABEL_92:
      __break(1u);
LABEL_93:
      __break(1u);
LABEL_94:
      __break(1u);
LABEL_95:
      __break(1u);
LABEL_96:
      __break(1u);
      return;
    }
LABEL_89:
    id v18 = (id)MEMORY[0x18C117680](0, v6);
    goto LABEL_16;
  }
  while (1)
  {
LABEL_22:
    if (!v5)
    {
      char v5 = *(uint64_t **)(((unint64_t)v4._rawValue & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      id v81 = v5;
      rawuint64_t Value = v4._rawValue;
      if (!v5) {
        break;
      }
      goto LABEL_26;
    }
    swift_bridgeObjectRetain();
    char v5 = (uint64_t *)_CocoaArrayWrapper.endIndex.getter();
    id v81 = v5;
    rawuint64_t Value = v4._rawValue;
    if (!v5) {
      break;
    }
LABEL_26:
    uint64_t v3 = 0;
    unint64_t v24 = (unint64_t)v4._rawValue & 0xC000000000000001;
    int v78 = (char *)v4._rawValue + 32;
    char v83 = MEMORY[0x1E4FBC840] + 8;
    uint64_t v80 = (unint64_t)v4._rawValue & 0xC000000000000001;
    while (1)
    {
      uint64_t v25 = v24 ? (char *)MEMORY[0x18C117680](v3, v4._rawValue) : (char *)*(id *)&v78[8 * (void)v3];
      uint64_t v26 = v25;
      BOOL v27 = __OFADD__(v3, 1);
      uint64_t v3 = (uint64_t *)((char *)v3 + 1);
      if (v27) {
        break;
      }
      uint64_t v28 = (id *)&v25[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_cachedCombinedAttachment];
      uint64_t v29 = *(void *)&v25[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_cachedCombinedAttachment];
      if (v29)
      {
        id v30 = v28[1];
        swift_bridgeObjectRetain();
      }
      else
      {
        uint64_t v31 = &v25[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_attachmentsStorage];
        swift_beginAccess();
        uint64_t v32 = *(void *)v31;
        int64_t v33 = *(void *)(v32 + 16);
        if (v33)
        {
          char v79 = v26;
          *(void *)unint64_t v84 = MEMORY[0x1E4FBC860];
          swift_bridgeObjectRetain();
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v33, 0);
          long long v34 = *(void **)v84;
          uint64_t v35 = (void **)(v32 + 40);
          do
          {
            uint64_t v36 = (uint64_t)*(v35 - 1);
            int v37 = *v35;
            *(void *)unint64_t v84 = v34;
            unint64_t v39 = v34[2];
            unint64_t v38 = v34[3];
            swift_bridgeObjectRetain();
            id v40 = v37;
            if (v39 >= v38 >> 1)
            {
              specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v38 > 1), v39 + 1, 1);
              long long v34 = *(void **)v84;
            }
            v34[2] = v39 + 1;
            int v41 = &v34[2 * v39];
            v41[4] = v36;
            v41[5] = v37;
            v35 += 5;
            --v33;
          }
          while (v33);
          swift_bridgeObjectRelease();
          char v5 = v81;
          v4._rawuint64_t Value = rawValue;
          uint64_t v26 = v79;
          unint64_t v24 = v80;
        }
        else
        {
          long long v34 = (void *)MEMORY[0x1E4FBC860];
        }
        static AccessibilityAttachment.combine(_:)(v34, (uint64_t *)v84);
        swift_bridgeObjectRelease();
        int v42 = *(void **)&v84[8];
        uint64_t v29 = *(void *)v84;
        uint64_t v43 = (uint64_t)*v28;
        id v44 = v28[1];
        *uint64_t v28 = *(id *)v84;
        v28[1] = v42;
        id v30 = v42;
        swift_bridgeObjectRetain();
        outlined consume of AccessibilityAttachment?(v43, v44);
        v26[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_platformElementPropertiesDirty] = 1;
      }

      if (*(void *)(v29 + 16)
        && (unint64_t v45 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&type metadata for AccessibilityProperties.TemporalState),
            (v46 & 1) != 0))
      {
        outlined init with copy of TableColumnList(*(void *)(v29 + 56) + 40 * v45, (uint64_t)v84);
        uint64_t v47 = v86;
        unint64_t v48 = v87;
        __swift_project_boxed_opaque_existential_1(v84, v86);
        int v49 = v4._rawValue;
        uint64_t v50 = v5;
        uint64_t v51 = v26;
        uint64_t v52 = *(void (**)(_OWORD *__return_ptr, uint64_t, unint64_t))(v48 + 8);
        swift_bridgeObjectRetain();
        v52(v88, v47, v48);
        uint64_t v26 = v51;
        char v5 = v50;
        v4._rawuint64_t Value = v49;
        unint64_t v24 = v80;
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v84);
      }
      else
      {
        memset(v88, 0, sizeof(v88));
        swift_bridgeObjectRetain();
      }
      __int16 v53 = (uint64_t (*)(void, uint64_t))MEMORY[0x1E4FBB718];
      _sypSgMaTm_9(0, (unint64_t *)&lazy cache variable for type metadata for Any?, v83, MEMORY[0x1E4FBB718]);
      _sypSgMaTm_9(0, &lazy cache variable for type metadata for StrongHash?, MEMORY[0x1E4F3F3B8], v53);
      if (swift_dynamicCast())
      {
        v85 = 0;
        long long v54 = *(unsigned int *)&v84[16] | ((unint64_t)v84[20] << 32);

        swift_bridgeObjectRelease_n();
        if ((v54 & 0x100000000) == 0)
        {
          swift_bridgeObjectRelease();
          type metadata accessor for CVarArg(0, (unint64_t *)&lazy cache variable for type metadata for AnyAccessibilityPropertiesEntry);
          *(void *)&v88[0] = Dictionary.init(minimumCapacity:)();
          _s7SwiftUI28AccessibilityPropertiesEntryVyAA0C12LabelStorageVSgGMaTm_2(0, (unint64_t *)&lazy cache variable for type metadata for AccessibilityPropertiesEntry<AccessibilityChildBehaviorKind?>, &lazy cache variable for type metadata for AccessibilityChildBehaviorKind?, MEMORY[0x1E4F41158]);
          v86 = v55;
          uint64_t v87 = lazy protocol witness table accessor for type AccessibilityPropertiesEntry<AccessibilityChildBehaviorKind?> and conformance AccessibilityPropertiesEntry<A>();
          v84[0] = 0;
          specialized Dictionary.subscript.setter((uint64_t)v84, MEMORY[0x1E4F40AE0]);
          AccessibilityAttachment.init(properties:)();
          v88[0] = *(_OWORD *)v84;
          unint64_t v56 = a2;
          goto LABEL_51;
        }
      }
      else
      {
        memset(v84, 0, sizeof(v84));
        v85 = 1;

        swift_bridgeObjectRelease_n();
      }
      if (v3 == v5) {
        goto LABEL_50;
      }
    }
    __break(1u);
LABEL_84:
    __break(1u);
LABEL_85:
    swift_bridgeObjectRetain();
    uint64_t v6 = _CocoaArrayWrapper.endIndex.getter();
    if (v6 == 1) {
      goto LABEL_3;
    }
  }
LABEL_50:
  swift_bridgeObjectRelease();
  uint64_t v57 = swift_bridgeObjectRetain();
  unint64_t v56 = a2;
  static AccessibilityChildBehavior.Combine.combine(children:options:)(v57, a2);
  swift_bridgeObjectRelease();
  v88[0] = *(_OWORD *)v84;
LABEL_51:
  int v58 = unk_1ED449EBC;
  if ((unk_1ED449EBC & ~dword_1ED449EB8) == 0) {
    int v58 = 0;
  }
  *(_DWORD *)unint64_t v84 = v58 | dword_1ED449EB8;
  *(_DWORD *)&v84[4] = v58 | dword_1ED449EB8 | dword_1ED449E90;
  AccessibilityProperties.visibility.setter();
  if (v56)
  {
    uint64_t v59 = AccessibilityChildBehavior.Combine.willCreateNode(for:)(v4);
    if (v5)
    {
      if (v59)
      {
        long long v60 = (unint64_t)v4._rawValue & 0xC000000000000001;
        char v5 = (uint64_t *)((char *)v4._rawValue + 32);
        swift_bridgeObjectRetain();
        uint64_t v61 = 0;
        while (1)
        {
          if (v60)
          {
            swift_bridgeObjectRetain();
            long long v62 = (char *)MEMORY[0x18C117680](v61, v4._rawValue);
          }
          else
          {
            uint64_t v63 = (void *)v5[(void)v61];
            swift_bridgeObjectRetain();
            long long v62 = v63;
          }
          unint64_t v64 = v62;
          int v65 = &v62[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_attachmentsStorage];
          swift_beginAccess();
          uint64_t v3 = *(uint64_t **)v65;
          int v66 = *(void *)(*(void *)v65 + 16);
          if (v66) {
            break;
          }
          swift_bridgeObjectRetain();
LABEL_68:
          v4._rawuint64_t Value = rawValue;
          swift_bridgeObjectRelease();

          swift_bridgeObjectRelease();
          BOOL v27 = __OFADD__(v61, 1);
          uint64_t v61 = (uint64_t *)((char *)v61 + 1);
          if (v27) {
            goto LABEL_84;
          }
          if (v61 == v81)
          {
LABEL_70:
            swift_bridgeObjectRelease();
            goto LABEL_71;
          }
        }
        swift_bridgeObjectRetain();
        uint64_t v67 = (unint64_t)&v3[5 * v66];
        while (1)
        {
          if (v66 > v3[2])
          {
            __break(1u);
            goto LABEL_78;
          }
          uint64_t v68 = (void *)AccessibilityAttachment.platformElement.getter();

          if (v68) {
            break;
          }
          v67 -= 40;
          if (!--v66) {
            goto LABEL_68;
          }
        }
        if (v66 > v3[2]) {
          goto LABEL_92;
        }
        int v70 = AccessibilityAttachment.platformElement.getter();
        if (!v70) {
          goto LABEL_95;
        }
        uint64_t v71 = (void *)v70;
        uint64_t v67 = (unint64_t)rawValue;
        swift_bridgeObjectRelease();

        swift_bridgeObjectRelease();
        if (v61 == v81) {
          goto LABEL_70;
        }
        if (v60)
        {
          unsigned __int8 v72 = (id)MEMORY[0x18C117680](v61, rawValue);
          goto LABEL_81;
        }
LABEL_78:
        if (((unint64_t)v61 & 0x8000000000000000) != 0) {
          goto LABEL_93;
        }
        if ((unint64_t)v61 >= *(void *)((v67 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
          goto LABEL_94;
        }
        unsigned __int8 v72 = (id)v5[(void)v61];
LABEL_81:
        uint64_t v73 = v72;
        AccessibilityNode.platformElement.getter();
        uint64_t v75 = v74;

        if (!v75) {
          goto LABEL_96;
        }
        swift_bridgeObjectRelease();
        AccessibilityAttachment.platformElement.setter();
      }
    }
  }
LABEL_71:
  uint64_t v69 = *((void *)&v88[0] + 1);
  *a3 = *(void *)&v88[0];
  a3[1] = v69;
  swift_bridgeObjectRelease();
}

uint64_t static AccessibilityChildBehavior.Combine.combine(children:options:)(unint64_t a1, char a2)
{
  void (*v38)(_OWORD *__return_ptr, uint64_t, uint64_t);
  uint64_t v39;
  void *v40;
  uint64_t ObjectType;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  char v45;
  unint64_t v46;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  id v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  int64_t v57;
  int64_t v58;
  char *v59;
  int64_t v60;
  uint64_t v61;
  BOOL v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  int64_t v69;
  int64_t v70;
  char *v71;
  int64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  char v79;
  void (*v80)(long long *, void);
  void *v81;
  uint64_t result;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  unint64_t v86;
  char *v87;
  char *v88;
  char v89;
  unint64_t v90;
  long long v91;
  long long v92;
  uint64_t v93;
  _OWORD v94[2];
  uint64_t v95;
  uint64_t vars8;

  LOBYTE(v2) = a2;
  if (a1 >> 62) {
    goto LABEL_128;
  }
  if (!*(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
LABEL_129:
    return AccessibilityAttachment.init()();
  }
  while (2)
  {
    unint64_t v3 = swift_bridgeObjectRetain();
    uint64_t v4 = specialized Sequence.filter(_:)(v3, 0);
    swift_bridgeObjectRelease();
    if (v4 < 0 || (v4 & 0x4000000000000000) != 0)
    {
      unint64_t v84 = swift_bridgeObjectRetain();
      uint64_t v5 = (uint64_t)specialized _copyCollectionToContiguousArray<A>(_:)(v84, (void (*)(void *, uint64_t, unint64_t))specialized Array._copyContents(initializing:));
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v5 = v4 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain();
    }
    *(void *)&uint64_t v91 = v5;
    specialized MutableCollection<>.sort(by:)((uint64_t *)&v91, 1, 4, 2);
    swift_bridgeObjectRelease();
    unint64_t v6 = v91;
    if ((v91 & 0x8000000000000000) != 0 || (v91 & 0x4000000000000000) != 0)
    {
      swift_retain();
      uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
    }
    else
    {
      uint64_t v7 = *(void *)(v91 + 16);
      swift_retain();
    }
    unint64_t v89 = v2;
    v86 = v6;
    if (!v7)
    {
      swift_release();
      BOOL v27 = (char *)MEMORY[0x1E4FBC860];
      id v10 = (char *)MEMORY[0x1E4FBC860];
      goto LABEL_40;
    }
    unint64_t v8 = 0;
    unint64_t v9 = v6 & 0xC000000000000001;
    unint64_t v90 = v6 + 32;
    id v10 = (char *)MEMORY[0x1E4FBC860];
    uint64_t v87 = (char *)MEMORY[0x1E4FBC860];
    while (1)
    {
      if (v9)
      {
        uint64_t v11 = (char *)MEMORY[0x18C117680](v8, v6);
      }
      else
      {
        if (v8 >= *(void *)(v6 + 16)) {
          goto LABEL_124;
        }
        uint64_t v11 = (char *)*(id *)(v90 + 8 * v8);
      }
      uint64_t v12 = v11;
      unint64_t v13 = v8 + 1;
      if (__OFADD__(v8, 1)) {
        goto LABEL_114;
      }
      AccessibilityNode.attachment.getter((uint64_t *)&v91);
      uint64_t v14 = v91;

      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        id v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v10 + 2) + 1, 1, v10);
      }
      unint64_t v16 = *((void *)v10 + 2);
      unint64_t v15 = *((void *)v10 + 3);
      uint64_t v2 = v16 + 1;
      if (v16 >= v15 >> 1) {
        id v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v15 > 1), v16 + 1, 1, v10);
      }
      *((void *)v10 + 2) = v2;
      *(void *)&v10[8 * v16 + 32] = v14;
      if ((v89 & 1) == 0) {
        break;
      }
LABEL_12:

LABEL_13:
      ++v8;
      if (v13 == v7)
      {
        swift_release();
        BOOL v27 = v87;
LABEL_40:
        uint64_t v28 = *((void *)v27 + 2);
        v88 = v27;
        if (!v28) {
          goto LABEL_65;
        }
        swift_bridgeObjectRetain();
        uint64_t v29 = 0;
        uint64_t v30 = MEMORY[0x1E4FBC840] + 8;
        v85 = MEMORY[0x1E4FBC840] + 8;
        while (1)
        {
          unint64_t v31 = *(void *)&v27[8 * v29 + 32];
          if ((v31 & 0x8000000000000000) != 0) {
            goto LABEL_115;
          }
          if (v31 >= *((void *)v10 + 2)) {
            goto LABEL_116;
          }
          v95 = *(void *)&v10[8 * v31 + 32];
          uint64_t v2 = v95;
          swift_bridgeObjectRetain_n();
          AGGraphClearUpdate();
          if (*(void *)(v2 + 16)
            && (unint64_t v32 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&type metadata for AccessibilityProperties.BridgedElementKey),
                (v33 & 1) != 0))
          {
            outlined init with copy of TableColumnList(*(void *)(v2 + 56) + 40 * v32, (uint64_t)&v91);
            uint64_t v34 = *((void *)&v92 + 1);
            uint64_t v35 = v93;
            __swift_project_boxed_opaque_existential_1(&v91, *((uint64_t *)&v92 + 1));
            uint64_t v36 = v10;
            uint64_t v37 = v28;
            unint64_t v38 = *(void (**)(_OWORD *__return_ptr, uint64_t, uint64_t))(v35 + 8);
            swift_bridgeObjectRetain();
            unint64_t v39 = v35;
            BOOL v27 = v88;
            v38(v94, v34, v39);
            uint64_t v28 = v37;
            id v10 = v36;
            uint64_t v30 = v85;
            __swift_destroy_boxed_opaque_existential_1((uint64_t)&v91);
          }
          else
          {
            memset(v94, 0, sizeof(v94));
            swift_bridgeObjectRetain();
          }
          _sypSgMaTm_9(0, (unint64_t *)&lazy cache variable for type metadata for Any?, v30, MEMORY[0x1E4FBB718]);
          _s10Foundation14DateComponentsVSgMaTm_0(0, &lazy cache variable for type metadata for (NSObject & PlatformAccessibilityElementProtocol)?, (uint64_t (*)(uint64_t))type metadata accessor for NSObject & PlatformAccessibilityElementProtocol, MEMORY[0x1E4FBB718]);
          if ((swift_dynamicCast() & 1) == 0) {
            break;
          }
          id v40 = (void *)v91;
          swift_bridgeObjectRelease();
          if (!v40) {
            goto LABEL_53;
          }
          uint64_t ObjectType = swift_getObjectType();
          PlatformAccessibilityElementProtocol<>.bridgedProperties.getter(ObjectType, (uint64_t *)&v91);
          outlined consume of SheetBridge<_ViewList_View, SheetPreference.Key>??(v40);
          int v42 = v91;
LABEL_54:
          AGGraphSetUpdate();
          swift_bridgeObjectRelease();
          if (v42)
          {
            uint64_t v43 = v95;
            id v44 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&type metadata for AccessibilityProperties.BridgedElementKey);
            if (v45)
            {
              char v46 = v44;
              char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
              *(void *)&v94[0] = v43;
              if ((isUniquelyReferenced_nonNull_native & 1) == 0)
              {
                specialized _NativeDictionary.copy()();
                uint64_t v43 = *(void *)&v94[0];
              }
              outlined init with take of OptionalBinaryInteger((long long *)(*(void *)(v43 + 56) + 40 * v46), (uint64_t)&v91);
              specialized _NativeDictionary._delete(at:)(v46, v43);
              v95 = v43;
              swift_bridgeObjectRelease();
            }
            else
            {
              unint64_t v93 = 0;
              uint64_t v91 = 0u;
              unint64_t v92 = 0u;
            }
            outlined destroy of AnyAccessibilityPropertiesEntry?((uint64_t)&v91);
            *(void *)&uint64_t v91 = v42;
            AccessibilityProperties.merge(with:)((uint64_t *)&v91);
            swift_bridgeObjectRelease();
            uint64_t v2 = v95;
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              id v10 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v10);
            }
            if (v31 >= *((void *)v10 + 2)) {
              goto LABEL_119;
            }
            *(void *)&v10[8 * v31 + 32] = v2;
          }
          ++v29;
          swift_bridgeObjectRelease();
          if (v28 == v29)
          {
            swift_bridgeObjectRelease();
            unint64_t v6 = v86;
LABEL_65:
            unint64_t v48 = swift_bridgeObjectRetain();
            static AccessibilityChildBehavior.defaultCombine(childProperties:createsCustomActions:)(v48, 1, (uint64_t *)v94);
            int v49 = swift_bridgeObjectRelease();
            LOBYTE(v95) = (v89 & 4) != 0;
            MEMORY[0x1F4188790](v49);
            uint64_t v50 = swift_bridgeObjectRetain();
            uint64_t v51 = _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs12Zip2SequenceVySay7SwiftUI23AccessibilityPropertiesVGSayAH0H4NodeCGG_SayAH4TextVG_SayAH03AnyH6ActionVGts5NeverOTg503_s7f4UI23hi6VAA0C4j7CSayAA4k9VGSayAA03l2C6m23VGIgngoo_AC_AEtAH_AKts5N11OIegnrzr_TRAjmrUIgngoo_Tf1cn_nTf4ng_n(v50, v6, partial apply for closure #1 in static AccessibilityChildBehavior.Combine.combine(children:options:));
            swift_release();
            swift_bridgeObjectRelease();
            uint64_t v2 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySay7SwiftUI4TextVG_SayAF22AnyAccessibilityActionVGtG_ALs5NeverOTg503_s7d4UI26h68ChildBehaviorV7CombineV7combine8children7optionsAA0C10AttachmentVSayr30C4NodeCG_AE7OptionsVtFZSayAA03g2C6i8VGSayAA4F65VG_ARt_tcfu_33_9dd3dc44810f90035f5de19741f16de0AU_ARtARTf3nnnpk_nTf1cn_n((uint64_t)v51);
            uint64_t v52 = *(void *)(v2 + 16);
            if (v52)
            {
              swift_bridgeObjectRetain();
              __int16 v53 = 0;
              long long v54 = (char *)MEMORY[0x1E4FBC860];
              while (1)
              {
                int v55 = *(void *)(v2 + 8 * v53 + 32);
                unint64_t v56 = *(void *)(v55 + 16);
                uint64_t v57 = *((void *)v54 + 2);
                int v58 = v57 + v56;
                if (__OFADD__(v57, v56)) {
                  goto LABEL_117;
                }
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                uint64_t v59 = (char *)swift_isUniquelyReferenced_nonNull_native();
                if (v59 && v58 <= *((void *)v54 + 3) >> 1)
                {
                  if (*(void *)(v55 + 16)) {
                    goto LABEL_78;
                  }
                }
                else
                {
                  if (v57 <= v58) {
                    long long v60 = v57 + v56;
                  }
                  else {
                    long long v60 = v57;
                  }
                  long long v54 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v59, v60, 1, v54);
                  if (*(void *)(v55 + 16))
                  {
LABEL_78:
                    if ((*((void *)v54 + 3) >> 1) - *((void *)v54 + 2) < v56) {
                      goto LABEL_120;
                    }
                    swift_arrayInitWithCopy();
                    if (v56)
                    {
                      uint64_t v61 = *((void *)v54 + 2);
                      long long v62 = __OFADD__(v61, v56);
                      uint64_t v63 = v61 + v56;
                      if (v62) {
                        goto LABEL_123;
                      }
                      *((void *)v54 + 2) = v63;
                    }
                    goto LABEL_68;
                  }
                }
                if (v56) {
                  goto LABEL_118;
                }
LABEL_68:
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                if (v52 == ++v53)
                {
                  swift_bridgeObjectRelease();
                  goto LABEL_84;
                }
              }
            }
            long long v54 = (char *)MEMORY[0x1E4FBC860];
LABEL_84:
            swift_bridgeObjectRelease();
            specialized AccessibilityProperties.subscript.setter((uint64_t)v54);
            if (*((void *)v10 + 2) <= 1uLL) {
              goto LABEL_111;
            }
            uint64_t v2 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySay7SwiftUI4TextVG_SayAF22AnyAccessibilityActionVGtG_AIs5NeverOTg503_s7d4UI26h68ChildBehaviorV7CombineV7combine8children7optionsAA0C10AttachmentVSayr29C4NodeCG_AE7OptionsVtFZSayAA4f12VGAR_SayAA03g2C6I62VGt_tcfu1_32c6725c17a8d2e901e1a99f6670bf37f6AR_AUtARTf3nnnpk_nTf1cn_n((uint64_t)v51);
            swift_bridgeObjectRelease();
            unint64_t v64 = *(void *)(v2 + 16);
            if (v64)
            {
              swift_bridgeObjectRetain();
              int v65 = 0;
              int v66 = (char *)MEMORY[0x1E4FBC860];
              while (1)
              {
                uint64_t v67 = *(void *)(v2 + 8 * v65 + 32);
                uint64_t v68 = *(void *)(v67 + 16);
                uint64_t v69 = *((void *)v66 + 2);
                int v70 = v69 + v68;
                if (__OFADD__(v69, v68)) {
                  goto LABEL_121;
                }
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                uint64_t v71 = (char *)swift_isUniquelyReferenced_nonNull_native();
                if (v71 && v70 <= *((void *)v66 + 3) >> 1)
                {
                  if (*(void *)(v67 + 16)) {
                    goto LABEL_98;
                  }
                }
                else
                {
                  if (v69 <= v70) {
                    unsigned __int8 v72 = v69 + v68;
                  }
                  else {
                    unsigned __int8 v72 = v69;
                  }
                  int v66 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v71, v72, 1, v66);
                  if (*(void *)(v67 + 16))
                  {
LABEL_98:
                    if ((*((void *)v66 + 3) >> 1) - *((void *)v66 + 2) < v68) {
                      goto LABEL_125;
                    }
                    swift_arrayInitWithCopy();
                    if (v68)
                    {
                      uint64_t v73 = *((void *)v66 + 2);
                      long long v62 = __OFADD__(v73, v68);
                      uint64_t v74 = v73 + v68;
                      if (v62) {
                        goto LABEL_126;
                      }
                      *((void *)v66 + 2) = v74;
                    }
                    goto LABEL_88;
                  }
                }
                if (v68) {
                  goto LABEL_122;
                }
LABEL_88:
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                if (v64 == ++v65)
                {
                  swift_bridgeObjectRelease();
                  goto LABEL_105;
                }
              }
            }
            int v66 = (char *)MEMORY[0x1E4FBC860];
LABEL_105:
            swift_bridgeObjectRelease();
            uint64_t v75 = *((void *)v66 + 2);
            if (v75)
            {
              swift_bridgeObjectRetain();
              unint64_t v76 = v66 + 56;
              do
              {
                char v77 = *((void *)v76 - 3);
                int v78 = *((void *)v76 - 2);
                char v79 = *(v76 - 8);
                swift_bridgeObjectRetain();
                outlined copy of Text.Storage(v77, v78, v79);
                uint64_t v80 = (void (*)(long long *, void))AccessibilityProperties.labelStorage.modify();
                if (*v81) {
                  AccessibilityLabelStorage.removing(_:)();
                }
                v80(&v91, 0);
                outlined consume of Text.Storage(v77, v78, v79);
                swift_bridgeObjectRelease();
                v76 += 32;
                --v75;
              }
              while (v75);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease_n();
            }
            else
            {
LABEL_111:
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
            }
            *(void *)&uint64_t v91 = *(void *)&v94[0];
            AccessibilityAttachment.init(properties:platformElement:)();
            return swift_bridgeObjectRelease();
          }
        }
        *(void *)&uint64_t v91 = 1;
        swift_bridgeObjectRelease();
LABEL_53:
        int v42 = 0;
        goto LABEL_54;
      }
    }
    unint64_t v17 = (uint64_t *)&v12[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_attachmentsStorage];
    swift_beginAccess();
    uint64_t v2 = *v17;
    uint64_t v18 = *(void *)(v2 + 16);
    if (!v18)
    {
      swift_bridgeObjectRetain();
LABEL_37:

      swift_bridgeObjectRelease();
      unint64_t v6 = v86;
      goto LABEL_13;
    }
    swift_bridgeObjectRetain();
    uint64_t v19 = (uint64_t *)(v2 + 40 * v18);
LABEL_26:
    if (v18 > *(void *)(v2 + 16))
    {
      __break(1u);
LABEL_114:
      __break(1u);
LABEL_115:
      __break(1u);
LABEL_116:
      __break(1u);
LABEL_117:
      __break(1u);
LABEL_118:
      __break(1u);
LABEL_119:
      __break(1u);
LABEL_120:
      __break(1u);
LABEL_121:
      __break(1u);
LABEL_122:
      __break(1u);
LABEL_123:
      __break(1u);
LABEL_124:
      __break(1u);
LABEL_125:
      __break(1u);
LABEL_126:
      __break(1u);
LABEL_127:
      __break(1u);
LABEL_128:
      swift_bridgeObjectRetain();
      char v83 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (!v83) {
        goto LABEL_129;
      }
      continue;
    }
    break;
  }
  uint64_t v20 = *v19;
  *(void *)&uint64_t v91 = *(v19 - 1);
  *((void *)&v91 + 1) = v20;
  uint64_t v21 = (void *)AccessibilityAttachment.platformElement.getter();

  if (!v21)
  {
    v19 -= 5;
    if (!--v18) {
      goto LABEL_37;
    }
    goto LABEL_26;
  }
  if (v18 > *(void *)(v2 + 16)) {
    goto LABEL_127;
  }
  uint64_t v22 = *v19;
  *(void *)&uint64_t v91 = *(v19 - 1);
  *((void *)&v91 + 1) = v22;
  uint64_t v23 = AccessibilityAttachment.platformElement.getter();
  if (v23)
  {
    unint64_t v24 = (void *)v23;
    swift_bridgeObjectRelease();

    unint64_t v6 = v86;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v87 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v87 + 2) + 1, 1, v87);
    }
    unint64_t v26 = *((void *)v87 + 2);
    unint64_t v25 = *((void *)v87 + 3);
    uint64_t v2 = v26 + 1;
    if (v26 >= v25 >> 1) {
      uint64_t v87 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v25 > 1), v26 + 1, 1, v87);
    }
    *((void *)v87 + 2) = v2;
    *(void *)&v87[8 * v26 + 32] = v8;
    goto LABEL_12;
  }
  __break(1u);
  unint64_t result = swift_release();
  __break(1u);
  return result;
}

uint64_t closure #1 in static AccessibilityChildBehavior.Combine.combine(children:options:)(uint64_t *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char *a7, uint64_t *a8)
{
  void (*v43)(long long *__return_ptr, uint64_t, uint64_t);
  uint64_t (*v44)(void, uint64_t);
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  uint64_t v49;
  unint64_t v50;
  char v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char v57;
  char v58;
  uint64_t v59;
  uint64_t v60;
  char v61;
  char v62;
  unint64_t v63;
  char v64;
  uint64_t v65;
  uint64_t v66;
  void (*v67)(long long *__return_ptr, uint64_t, uint64_t);
  uint64_t (*v68)(void, uint64_t);
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  unint64_t v89;
  char *v90;
  long long v91;
  long long v92;
  uint64_t v93;
  uint64_t v94;
  char v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  char v99;
  uint64_t v100;
  void (*v101)(long long *__return_ptr, uint64_t, uint64_t);
  uint64_t v102;
  char v103;
  uint64_t v104;
  uint64_t v105;
  char v106;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  long long v116;
  long long v117;
  _OWORD v118[2];
  long long v119;
  _OWORD v120[3];
  long long v121;
  unsigned char v122[25];
  _OWORD v123[3];
  void v124[3];
  uint64_t v125;
  uint64_t v126;
  char v127;
  uint64_t v128;

  *(void *)&unint64_t v116 = a3;
  *((void *)&v116 + 1) = a4;
  uint64_t v10 = *a1;
  uint64_t v11 = (char *)MEMORY[0x1E4FBC860];
  uint64_t v128 = MEMORY[0x1E4FBC860];
  uint64_t v12 = swift_bridgeObjectRetain();
  uint64_t v13 = specialized AccessibilityProperties.subscript.getter(v12);
  swift_bridgeObjectRelease();
  int64_t v14 = *(void *)(v13 + 16);
  swift_bridgeObjectRelease();
  unint64_t v15 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v14, 0, v11);
  uint64_t v16 = swift_bridgeObjectRetain();
  uint64_t v17 = specialized AccessibilityProperties.subscript.getter(v16);
  uint64_t result = swift_bridgeObjectRelease();
  unint64_t v115 = *(void *)(v17 + 16);
  if (!v115)
  {
    swift_bridgeObjectRelease();
    return MEMORY[0x1E4FBC860];
  }
  unint64_t v19 = 0;
  char v114 = v17 + 32;
  unint64_t v108 = MEMORY[0x1E4FBC840] + 8;
  unint64_t v109 = a6;
  v110 = a5;
  uint64_t v113 = v17;
  while (1)
  {
    if (v19 >= *(void *)(v17 + 16))
    {
      __break(1u);
LABEL_80:
      __break(1u);
      goto LABEL_81;
    }
    outlined init with copy of AnyAccessibilityAction(v114 + 48 * v19, (uint64_t)v124);
    v123[0] = v116;
    *(void *)&v123[1] = a5;
    *((void *)&v123[1] + 1) = a6;
    uint64_t v20 = v125;
    uint64_t v21 = v126;
    __swift_project_boxed_opaque_existential_1(v124, v125);
    uint64_t v22 = *(uint64_t (**)(_OWORD *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(v21 + 80);
    unint64_t v23 = lazy protocol witness table accessor for type AccessibilityVoidAction and conformance AccessibilityVoidAction();
    if ((v22(v123, &type metadata for AccessibilityVoidAction, v23, v20, v21) & 1) == 0)
    {
      if (v127 == 1)
      {
        outlined init with copy of AnyAccessibilityAction((uint64_t)v124, (uint64_t)v123);
      }
      else
      {
        uint64_t v25 = v125;
        uint64_t v26 = v126;
        __swift_project_boxed_opaque_existential_1(v124, v125);
        (*(void (**)(_OWORD *__return_ptr, void *, uint64_t, uint64_t))(v26 + 56))(v123, a2, v25, v26);
      }
      unint64_t v28 = *((void *)v15 + 2);
      unint64_t v27 = *((void *)v15 + 3);
      if (v28 >= v27 >> 1) {
        unint64_t v15 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v27 > 1), v28 + 1, 1, v15);
      }
      *((void *)v15 + 2) = v28 + 1;
      uint64_t v29 = &v15[48 * v28];
      long long v30 = v123[0];
      long long v31 = v123[1];
      *(_OWORD *)(v29 + 57) = *(_OWORD *)((char *)&v123[1] + 9);
      *((_OWORD *)v29 + 2) = v30;
      *((_OWORD *)v29 + 3) = v31;
      goto LABEL_4;
    }
    char v24 = *a7;
    if ((*a7 & 1) == 0)
    {
      if (v127 == 1)
      {
        outlined init with copy of AnyAccessibilityAction((uint64_t)v124, (uint64_t)v123);
      }
      else
      {
        uint64_t v32 = v125;
        uint64_t v33 = v126;
        __swift_project_boxed_opaque_existential_1(v124, v125);
        (*(void (**)(_OWORD *__return_ptr, void *, uint64_t, uint64_t))(v33 + 56))(v123, a2, v32, v33);
      }
      unint64_t v35 = *((void *)v15 + 2);
      unint64_t v34 = *((void *)v15 + 3);
      if (v35 >= v34 >> 1) {
        unint64_t v15 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v34 > 1), v35 + 1, 1, v15);
      }
      *((void *)v15 + 2) = v35 + 1;
      uint64_t v36 = &v15[48 * v35];
      long long v37 = v123[0];
      long long v38 = v123[1];
      *(_OWORD *)(v36 + 57) = *(_OWORD *)((char *)&v123[1] + 9);
      *((_OWORD *)v36 + 2) = v37;
      *((_OWORD *)v36 + 3) = v38;
      *a7 = 1;
      *(void *)&unint64_t v121 = v10;
      AccessibilityProperties.traits.getter();
      if ((v123[0] & 1) == 0) {
        goto LABEL_21;
      }
      if (*(void *)(v10 + 16)
        && (unint64_t v39 = specialized __RawDictionaryStorage.find<A>(_:)(MEMORY[0x1E4F40B88]), (v40 & 1) != 0))
      {
        outlined init with copy of TableColumnList(*(void *)(v10 + 56) + 40 * v39, (uint64_t)v123);
        uint64_t v41 = *((void *)&v123[1] + 1);
        uint64_t v42 = *(void *)&v123[2];
        __swift_project_boxed_opaque_existential_1(v123, *((uint64_t *)&v123[1] + 1));
        uint64_t v43 = *(void (**)(long long *__return_ptr, uint64_t, uint64_t))(v42 + 8);
        swift_bridgeObjectRetain();
        v43(&v121, v41, v42);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v123);
      }
      else
      {
        unint64_t v121 = 0u;
        *(_OWORD *)unint64_t v122 = 0u;
        swift_bridgeObjectRetain();
      }
      id v44 = (uint64_t (*)(void, uint64_t))MEMORY[0x1E4FBB718];
      _sypSgMaTm_9(0, (unint64_t *)&lazy cache variable for type metadata for Any?, MEMORY[0x1E4FBC840] + 8, MEMORY[0x1E4FBB718]);
      _sypSgMaTm_9(0, &lazy cache variable for type metadata for AccessibilityLabelStorage?, MEMORY[0x1E4F40E40], v44);
      if ((swift_dynamicCast() & 1) == 0)
      {
        swift_bridgeObjectRelease();
        goto LABEL_45;
      }
      unint64_t v45 = *(void *)&v123[0];
      swift_bridgeObjectRelease();
      if (v45) {
        break;
      }
    }
LABEL_45:
    memset(v123, 0, 41);
    if (*(void *)(v10 + 16)
      && (uint64_t v63 = specialized __RawDictionaryStorage.find<A>(_:)(MEMORY[0x1E4F40B88]), (v64 & 1) != 0))
    {
      outlined init with copy of TableColumnList(*(void *)(v10 + 56) + 40 * v63, (uint64_t)&v121);
      int v65 = *(void *)&v122[8];
      int v66 = *(void *)&v122[16];
      __swift_project_boxed_opaque_existential_1(&v121, *(uint64_t *)&v122[8]);
      uint64_t v67 = *(void (**)(long long *__return_ptr, uint64_t, uint64_t))(v66 + 8);
      swift_bridgeObjectRetain();
      v67(&v119, v65, v66);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v121);
    }
    else
    {
      unsigned int v119 = 0u;
      v120[0] = 0u;
      swift_bridgeObjectRetain();
    }
    uint64_t v68 = (uint64_t (*)(void, uint64_t))MEMORY[0x1E4FBB718];
    _sypSgMaTm_9(0, (unint64_t *)&lazy cache variable for type metadata for Any?, v108, MEMORY[0x1E4FBB718]);
    _sypSgMaTm_9(0, &lazy cache variable for type metadata for AccessibilityLabelStorage?, MEMORY[0x1E4F40E40], v68);
    if (swift_dynamicCast())
    {
      uint64_t v69 = v121;
      swift_bridgeObjectRelease();
      if (v69)
      {
        if (*(void *)(v69 + 16)) {
          goto LABEL_57;
        }
        outlined consume of WidgetAuxiliaryTextImagePreference?(v69);
      }
    }
    else
    {
      *(void *)&unint64_t v121 = 1;
      BYTE8(v121) = 0;
      swift_bridgeObjectRelease();
    }
    int v70 = v125;
    uint64_t v71 = v126;
    __swift_project_boxed_opaque_existential_1(v124, v125);
    unsigned __int8 v72 = (*(uint64_t (**)(uint64_t, uint64_t))(v71 + 8))(v70, v71);
    if (v75)
    {
      unint64_t v76 = v72;
      char v77 = v73;
      int v78 = v74;
      char v79 = v75;
      _sypSgMaTm_9(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Text>, MEMORY[0x1E4F41420], MEMORY[0x1E4FBBE00]);
      uint64_t v69 = swift_allocObject();
      *(_OWORD *)(v69 + 16) = xmmword_18834BB80;
      *(void *)(v69 + 32) = v76;
      *(void *)(v69 + 40) = v77;
      *(unsigned char *)(v69 + 48) = v78 & 1;
      *(void *)(v69 + 56) = v79;
LABEL_57:
      if (v24)
      {
        uint64_t v80 = swift_bridgeObjectRetain();
        uint64_t result = specialized Array.append<A>(contentsOf:)(v80);
        if (!*(void *)(v69 + 16)) {
          goto LABEL_80;
        }
      }
      id v81 = *(void *)(v69 + 32);
      id v82 = *(void *)(v69 + 40);
      char v83 = *(unsigned char *)(v69 + 48);
      unint64_t v84 = *(void *)(v69 + 56);
      outlined copy of Text.Storage(v81, v82, v83);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)&unsigned int v119 = v10;
      AnyAccessibilityAction.asCombinedAction(name:properties:child:)(v81, v82, v83, v84, (uint64_t *)&v119, a2, &v121);
      outlined consume of Text.Storage(v81, v82, v83);
      swift_bridgeObjectRelease();
      _s7SwiftUI25AccessibilityValueStorageVSgWOhTm_5((uint64_t)v123, (unint64_t *)&lazy cache variable for type metadata for AnyAccessibilityAction?, (uint64_t)&type metadata for AnyAccessibilityAction);
      outlined init with take of AnyAccessibilityAction?((uint64_t)&v121, (uint64_t)v123, (unint64_t *)&lazy cache variable for type metadata for AnyAccessibilityAction?, (uint64_t)&type metadata for AnyAccessibilityAction);
      goto LABEL_60;
    }
    uint64_t v69 = MEMORY[0x1E4FBC860];
    if (*(void *)(MEMORY[0x1E4FBC860] + 16)) {
      goto LABEL_57;
    }
    swift_bridgeObjectRelease();
LABEL_60:
    _s7SwiftUI25AccessibilityValueStorageVSgWOcTm_2((uint64_t)v123, (uint64_t)&v121, (unint64_t *)&lazy cache variable for type metadata for AnyAccessibilityAction?, (uint64_t)&type metadata for AnyAccessibilityAction);
    v85 = *(void *)&v122[8];
    _s7SwiftUI25AccessibilityValueStorageVSgWOhTm_5((uint64_t)&v121, (unint64_t *)&lazy cache variable for type metadata for AnyAccessibilityAction?, (uint64_t)&type metadata for AnyAccessibilityAction);
    a6 = v109;
    a5 = v110;
    if (!v85)
    {
      if (v127 == 1)
      {
        _s7SwiftUI25AccessibilityValueStorageVSgWOhTm_5((uint64_t)v123, (unint64_t *)&lazy cache variable for type metadata for AnyAccessibilityAction?, (uint64_t)&type metadata for AnyAccessibilityAction);
        outlined init with copy of AnyAccessibilityAction((uint64_t)v124, (uint64_t)&v121);
      }
      else
      {
        v86 = v125;
        uint64_t v87 = v126;
        __swift_project_boxed_opaque_existential_1(v124, v125);
        (*(void (**)(long long *__return_ptr, void *, uint64_t, uint64_t))(v87 + 56))(&v121, a2, v86, v87);
        _s7SwiftUI25AccessibilityValueStorageVSgWOhTm_5((uint64_t)v123, (unint64_t *)&lazy cache variable for type metadata for AnyAccessibilityAction?, (uint64_t)&type metadata for AnyAccessibilityAction);
      }
      outlined init with take of AnyAccessibilityAction?((uint64_t)&v121, (uint64_t)v123, (unint64_t *)&lazy cache variable for type metadata for AnyAccessibilityAction?, (uint64_t)&type metadata for AnyAccessibilityAction);
    }
    _s7SwiftUI25AccessibilityValueStorageVSgWOcTm_2((uint64_t)v123, (uint64_t)&v121, (unint64_t *)&lazy cache variable for type metadata for AnyAccessibilityAction?, (uint64_t)&type metadata for AnyAccessibilityAction);
    if (*(void *)&v122[8])
    {
      unsigned int v119 = v121;
      v120[0] = *(_OWORD *)v122;
      *(_OWORD *)((char *)v120 + 9) = *(_OWORD *)&v122[9];
      outlined init with copy of AnyAccessibilityAction((uint64_t)&v119, (uint64_t)&v117);
      unint64_t v89 = *((void *)v15 + 2);
      v88 = *((void *)v15 + 3);
      if (v89 >= v88 >> 1) {
        unint64_t v15 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v88 > 1), v89 + 1, 1, v15);
      }
      *((void *)v15 + 2) = v89 + 1;
      unint64_t v90 = &v15[48 * v89];
      uint64_t v91 = v117;
      unint64_t v92 = v118[0];
      *(_OWORD *)(v90 + 57) = *(_OWORD *)((char *)v118 + 9);
      *((_OWORD *)v90 + 2) = v91;
      *((_OWORD *)v90 + 3) = v92;
      outlined destroy of AnyAccessibilityAction((uint64_t)&v119);
    }
    _s7SwiftUI25AccessibilityValueStorageVSgWOhTm_5((uint64_t)v123, (unint64_t *)&lazy cache variable for type metadata for AnyAccessibilityAction?, (uint64_t)&type metadata for AnyAccessibilityAction);
LABEL_4:
    uint64_t result = outlined destroy of AnyAccessibilityAction((uint64_t)v124);
LABEL_5:
    uint64_t v17 = v113;
    if (++v19 == v115)
    {
      swift_bridgeObjectRelease();
      return v128;
    }
  }
  if (!*(void *)(v45 + 16))
  {
    outlined consume of WidgetAuxiliaryTextImagePreference?(v45);
    goto LABEL_45;
  }
  id v103 = v24;
  uint64_t v47 = *(void *)(v45 + 32);
  char v46 = *(void *)(v45 + 40);
  unint64_t v48 = *(unsigned char *)(v45 + 48);
  swift_bridgeObjectRetain();
  char v104 = v47;
  id v105 = v46;
  char v106 = v48;
  outlined copy of Text.Storage(v47, v46, v48);
  outlined consume of WidgetAuxiliaryTextImagePreference?(v45);
  int v49 = *a8;
  if (*(void *)(*a8 + 16)
    && (uint64_t v50 = specialized __RawDictionaryStorage.find<A>(_:)(MEMORY[0x1E4F40B88]), (v51 & 1) != 0))
  {
    outlined init with copy of TableColumnList(*(void *)(v49 + 56) + 40 * v50, (uint64_t)v123);
    uint64_t v52 = *((void *)&v123[1] + 1);
    __int16 v53 = *(void *)&v123[2];
    __swift_project_boxed_opaque_existential_1(v123, *((uint64_t *)&v123[1] + 1));
    uint64_t v101 = *(void (**)(long long *__return_ptr, uint64_t, uint64_t))(v53 + 8);
    swift_bridgeObjectRetain();
    v101(&v121, v52, v53);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v123);
  }
  else
  {
    unint64_t v121 = 0u;
    *(_OWORD *)unint64_t v122 = 0u;
    swift_bridgeObjectRetain();
  }
  if ((swift_dynamicCast() & 1) == 0)
  {
    swift_bridgeObjectRelease();
    goto LABEL_43;
  }
  long long v54 = *(void *)&v123[0];
  swift_bridgeObjectRelease();
  if (!v54)
  {
LABEL_43:
    outlined consume of Text.Storage(v104, v105, v48);
LABEL_44:
    swift_bridgeObjectRelease();
    char v24 = v103;
    goto LABEL_45;
  }
  char v102 = *(void *)(v54 + 16);
  if (!v102)
  {
    outlined consume of WidgetAuxiliaryTextImagePreference?(v54);
    goto LABEL_43;
  }
  int v55 = *(void *)(v54 + 32);
  unint64_t v56 = *(void *)(v54 + 40);
  uint64_t v57 = *(unsigned char *)(v54 + 48);
  char v100 = v54;
  outlined copy of WidgetAuxiliaryTextImagePreference?(v54);
  outlined copy of Text.Storage(v55, v56, v57);
  swift_bridgeObjectRetain();
  int v58 = static Text.== infix(_:_:)();
  outlined consume of Text.Storage(v55, v56, v57);
  swift_bridgeObjectRelease();
  if (v58) {
    goto LABEL_40;
  }
  if (v102 == 1) {
    goto LABEL_76;
  }
  uint64_t v59 = *(void *)(v100 + 64);
  long long v60 = *(void *)(v100 + 72);
  uint64_t v61 = *(unsigned char *)(v100 + 80);
  outlined copy of Text.Storage(v59, v60, v61);
  swift_bridgeObjectRetain();
  long long v62 = static Text.== infix(_:_:)();
  outlined consume of Text.Storage(v59, v60, v61);
  uint64_t result = swift_bridgeObjectRelease();
  if (v62)
  {
LABEL_40:
    outlined consume of WidgetAuxiliaryTextImagePreference?(v100);
    outlined consume of WidgetAuxiliaryTextImagePreference?(v100);
    outlined consume of Text.Storage(v104, v105, v106);
    swift_bridgeObjectRelease();
LABEL_21:
    uint64_t result = outlined destroy of AnyAccessibilityAction((uint64_t)v124);
    a6 = v109;
    a5 = v110;
    goto LABEL_5;
  }
  if (v102 == 2)
  {
LABEL_76:
    outlined consume of WidgetAuxiliaryTextImagePreference?(v100);
    outlined consume of WidgetAuxiliaryTextImagePreference?(v100);
    outlined consume of Text.Storage(v104, v105, v106);
    goto LABEL_44;
  }
  unint64_t v93 = v100 + 120;
  id v94 = 2;
  while (1)
  {
    v98 = v94 + 1;
    if (__OFADD__(v94, 1)) {
      break;
    }
    v95 = *(unsigned char *)(v93 - 8);
    id v97 = *(void *)(v93 - 24);
    v96 = *(void *)(v93 - 16);
    outlined copy of Text.Storage(v97, v96, v95);
    swift_bridgeObjectRetain();
    char v99 = static Text.== infix(_:_:)();
    outlined consume of Text.Storage(v97, v96, v95);
    uint64_t result = swift_bridgeObjectRelease();
    if (v99) {
      goto LABEL_40;
    }
    v93 += 32;
    ++v94;
    if (v98 == v102) {
      goto LABEL_76;
    }
  }
LABEL_81:
  __break(1u);
  return result;
}

void AccessibilityChildBehavior.Combine.visibility(for:nodes:)(uint64_t a1@<X0>, unint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v5 = *(void *)a1;
  char v6 = *(unsigned char *)(a1 + 8);
  if (!(a2 >> 62))
  {
    uint64_t v7 = *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v7) {
      goto LABEL_3;
    }
LABEL_8:
    swift_bridgeObjectRelease();
    uint64_t v10 = 0;
    goto LABEL_9;
  }
  swift_bridgeObjectRetain();
  if (!_CocoaArrayWrapper.endIndex.getter()) {
    goto LABEL_8;
  }
LABEL_3:
  if ((a2 & 0xC000000000000001) != 0)
  {
    id v8 = (id)MEMORY[0x18C117680](0, a2);
    goto LABEL_6;
  }
  if (*(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    id v8 = *(id *)(a2 + 32);
LABEL_6:
    unint64_t v9 = v8;
    swift_bridgeObjectRelease();
    uint64_t v11 = v5;
    char v12 = v6;
    AccessibilityNode.visibilityIgnoringAttachment(with:)(&v11, &v13);

    uint64_t v10 = v13;
LABEL_9:
    *a3 = v10;
    return;
  }
  __break(1u);
}

void protocol witness for AccessibilityChildBehaviorProvider.initialAttachment(for:) in conformance AccessibilityChildBehavior.Combine(unint64_t a1@<X0>, void *a2@<X8>)
{
  AccessibilityChildBehavior.Combine.initialAttachment(for:)(a1, *v2, a2);
}

BOOL protocol witness for AccessibilityChildBehaviorProvider.willCreateNode(for:) in conformance AccessibilityChildBehavior.Combine(Swift::OpaquePointer a1)
{
  return AccessibilityChildBehavior.Combine.willCreateNode(for:)(a1);
}

uint64_t AccessibilityChildBehavior.Automatic.initialAttachment(for:)(unint64_t a1)
{
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v3 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v3 == 1) {
      goto LABEL_3;
    }
    swift_bridgeObjectRetain();
    uint64_t v1 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v1 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v1 == 1)
    {
LABEL_3:
      return AccessibilityAttachment.init()();
    }
  }
  if (v1) {
    int v4 = 3;
  }
  else {
    int v4 = 1;
  }
  type metadata accessor for CVarArg(0, (unint64_t *)&lazy cache variable for type metadata for AnyAccessibilityPropertiesEntry);
  uint64_t v7 = Dictionary.init(minimumCapacity:)();
  _s10Foundation14DateComponentsVSgMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for AccessibilityPropertiesEntry<AccessibilityNullableOptionSet<AccessibilityVisibility>>, (uint64_t (*)(uint64_t))type metadata accessor for AccessibilityNullableOptionSet<AccessibilityVisibility>, MEMORY[0x1E4F41090]);
  v6[3] = v5;
  v6[4] = lazy protocol witness table accessor for type AccessibilityPropertiesEntry<AccessibilityNullableOptionSet<AccessibilityVisibility>> and conformance AccessibilityPropertiesEntry<A>();
  LODWORD(v6[0]) = v4;
  HIDWORD(v6[0]) = v4;
  specialized Dictionary.subscript.setter((uint64_t)v6, MEMORY[0x1E4F40AA8]);
  v6[0] = v7;
  static AccessibilityAttachment.properties(_:)();

  return swift_bridgeObjectRelease();
}

BOOL protocol witness for AccessibilityChildBehaviorProvider.willCreateNode(for:) in conformance AccessibilityChildBehavior.Automatic(unint64_t a1)
{
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v1 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v1 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  return v1 != 1;
}

uint64_t closure #1 in static AccessibilityChildBehavior.defaultCombine(childProperties:createsCustomActions:)@<X0>(uint64_t result@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2 = *(void *)(result + 16);
  if (v2)
  {
    uint64_t v3 = result;
    uint64_t v7 = *(void *)(result + 8 * (v2 - 1) + 32);
    uint64_t result = swift_bridgeObjectRetain();
    if (v2 == 1)
    {
LABEL_7:
      *a2 = result;
      return result;
    }
    uint64_t result = swift_bridgeObjectRetain();
    uint64_t v5 = v2 + 2;
    while (v5 - 4 < v2 - 1)
    {
      uint64_t v6 = *(void *)(v3 + 8 * v5);
      uint64_t result = AccessibilityProperties.merge(with:)(&v6);
      if (--v5 == 3)
      {
        swift_bridgeObjectRelease();
        uint64_t result = v7;
        goto LABEL_7;
      }
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t AccessibilityChildBehaviorBox.willCreateNode(for:)(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, void))(*(void *)(*(void *)v1 + 144) + 24))(a1, *(void *)(*(void *)v1 + 136)) & 1;
}

uint64_t AccessibilityChildBehaviorBox.initialAttachment(for:)(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, void))(*(void *)(*(void *)v1 + 144) + 16))(a1, *(void *)(*(void *)v1 + 136));
}

uint64_t AccessibilityChildBehaviorBox.hash(into:)()
{
  return dispatch thunk of Hashable.hash(into:)();
}

uint64_t AccessibilityChildBehaviorBox.visibility(for:nodes:)(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *v2;
  char v4 = *((unsigned char *)a1 + 8);
  uint64_t v6 = *a1;
  char v7 = v4;
  return (*(uint64_t (**)(uint64_t *, uint64_t, void))(*(void *)(v3 + 144) + 32))(&v6, a2, *(void *)(v3 + 136));
}

uint64_t AccessibilityChildBehaviorBox.__ivar_destroyer()
{
  return (*(uint64_t (**)(uint64_t))(*(void *)(*(void *)(*(void *)v0 + 136) - 8) + 8))(v0 + *(void *)(*(void *)v0 + 152));
}

ValueMetadata *type metadata accessor for AccessibilityChildBehavior.Combine()
{
  return &type metadata for AccessibilityChildBehavior.Combine;
}

void *specialized Sequence._copySequenceContents(initializing:)(void *result, _OWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4 + 56;
  uint64_t v5 = -1;
  uint64_t v6 = -1 << *(unsigned char *)(a4 + 32);
  if (-v6 < 64) {
    uint64_t v5 = ~(-1 << -(char)v6);
  }
  unint64_t v7 = v5 & *(void *)(a4 + 56);
  if (!a2)
  {
    int64_t v8 = 0;
    a3 = 0;
LABEL_35:
    *uint64_t result = a4;
    result[1] = v4;
    result[2] = ~v6;
    result[3] = v8;
    result[4] = v7;
    return (void *)a3;
  }
  if (!a3)
  {
    int64_t v8 = 0;
    goto LABEL_35;
  }
  if (a3 < 0)
  {
LABEL_37:
    __break(1u);
    goto LABEL_38;
  }
  int64_t v8 = 0;
  uint64_t v9 = 0;
  int64_t v10 = (unint64_t)(63 - v6) >> 6;
  while (v7)
  {
    unint64_t v11 = __clz(__rbit64(v7));
    v7 &= v7 - 1;
    unint64_t v12 = v11 | (v8 << 6);
LABEL_8:
    ++v9;
    *a2++ = *(_OWORD *)(*(void *)(a4 + 48) + 16 * v12);
    if (v9 == a3) {
      goto LABEL_35;
    }
  }
  int64_t v13 = v8 + 1;
  if (__OFADD__(v8, 1))
  {
    __break(1u);
    goto LABEL_37;
  }
  if (v13 >= v10) {
    goto LABEL_30;
  }
  unint64_t v14 = *(void *)(v4 + 8 * v13);
  if (v14) {
    goto LABEL_19;
  }
  v8 += 2;
  if (v13 + 1 >= v10)
  {
    unint64_t v7 = 0;
    int64_t v8 = v13;
    goto LABEL_34;
  }
  unint64_t v14 = *(void *)(v4 + 8 * v8);
  if (v14)
  {
LABEL_15:
    int64_t v13 = v8;
LABEL_19:
    unint64_t v16 = __clz(__rbit64(v14));
    unint64_t v7 = (v14 - 1) & v14;
    unint64_t v12 = v16 + (v13 << 6);
    int64_t v8 = v13;
    goto LABEL_8;
  }
  int64_t v15 = v13 + 2;
  if (v13 + 2 >= v10) {
    goto LABEL_30;
  }
  unint64_t v14 = *(void *)(v4 + 8 * v15);
  if (v14)
  {
LABEL_18:
    int64_t v13 = v15;
    goto LABEL_19;
  }
  int64_t v8 = v13 + 3;
  if (v13 + 3 >= v10)
  {
    unint64_t v7 = 0;
    int64_t v8 = v13 + 2;
    goto LABEL_34;
  }
  unint64_t v14 = *(void *)(v4 + 8 * v8);
  if (v14) {
    goto LABEL_15;
  }
  int64_t v15 = v13 + 4;
  if (v13 + 4 >= v10)
  {
LABEL_30:
    unint64_t v7 = 0;
LABEL_34:
    a3 = v9;
    goto LABEL_35;
  }
  unint64_t v14 = *(void *)(v4 + 8 * v15);
  if (v14) {
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v13 = v15 + 1;
    if (__OFADD__(v15, 1)) {
      break;
    }
    if (v13 >= v10)
    {
      unint64_t v7 = 0;
      int64_t v8 = v10 - 1;
      goto LABEL_34;
    }
    unint64_t v14 = *(void *)(v4 + 8 * v13);
    ++v15;
    if (v14) {
      goto LABEL_19;
    }
  }
LABEL_38:
  __break(1u);
  return result;
}

void *specialized Sequence._copySequenceContents(initializing:)(void *result, uint64_t a2, uint64_t a3)
{
  void *(*v9)(long long *__return_ptr, uint64_t);
  uint64_t v10;
  long long v11;
  uint64_t v12;
  long long v13;
  long long v14;
  long long v15;
  long long v16;
  long long v17;
  long long v18;
  long long v19;
  long long v20;
  long long v21;
  long long v22;
  long long v23;
  long long v24;
  long long v25;
  long long v26;
  long long v27;
  long long v28;
  long long v29;
  uint64_t v30;
  long long v31;
  long long v32;
  uint64_t v33;

  uint64_t v4 = result;
  if (!a2)
  {
    uint64_t v5 = 0;
    uint64_t v18 = *(_OWORD *)(v3 + 112);
    *((_OWORD *)result + 6) = *(_OWORD *)(v3 + 96);
    *((_OWORD *)result + 7) = v18;
    unint64_t v19 = *(_OWORD *)(v3 + 144);
    *((_OWORD *)result + 8) = *(_OWORD *)(v3 + 128);
    *((_OWORD *)result + 9) = v19;
    uint64_t v20 = *(_OWORD *)(v3 + 48);
    *((_OWORD *)result + 2) = *(_OWORD *)(v3 + 32);
    *((_OWORD *)result + 3) = v20;
    uint64_t v21 = *(_OWORD *)(v3 + 80);
    *((_OWORD *)result + 4) = *(_OWORD *)(v3 + 64);
    *((_OWORD *)result + 5) = v21;
    uint64_t v22 = *(_OWORD *)(v3 + 16);
    *(_OWORD *)uint64_t result = *(_OWORD *)v3;
    *((_OWORD *)result + 1) = v22;
    result[20] = 0;
    return (void *)v5;
  }
  uint64_t v5 = a3;
  if (!a3)
  {
LABEL_11:
    unint64_t v23 = *(_OWORD *)(v3 + 112);
    *((_OWORD *)v4 + 6) = *(_OWORD *)(v3 + 96);
    *((_OWORD *)v4 + 7) = v23;
    char v24 = *(_OWORD *)(v3 + 144);
    *((_OWORD *)v4 + 8) = *(_OWORD *)(v3 + 128);
    *((_OWORD *)v4 + 9) = v24;
    uint64_t v25 = *(_OWORD *)(v3 + 48);
    *((_OWORD *)v4 + 2) = *(_OWORD *)(v3 + 32);
    *((_OWORD *)v4 + 3) = v25;
    uint64_t v26 = *(_OWORD *)(v3 + 80);
    *((_OWORD *)v4 + 4) = *(_OWORD *)(v3 + 64);
    *((_OWORD *)v4 + 5) = v26;
    unint64_t v27 = *(_OWORD *)(v3 + 16);
    *(_OWORD *)uint64_t v4 = *(_OWORD *)v3;
    *((_OWORD *)v4 + 1) = v27;
    v4[20] = v5;
    return (void *)v5;
  }
  if ((a3 & 0x8000000000000000) == 0)
  {
    uint64_t v6 = *(void *)(v3 + 64);
    if (v6)
    {
      uint64_t v7 = a2;
      uint64_t v8 = 0;
      uint64_t v9 = *(void *(**)(long long *__return_ptr, uint64_t))(v3 + 72);
      int64_t v10 = a3 - 1;
      while (1)
      {
        uint64_t result = v9(&v28, v8);
        if ((v6 & ~(v6 >> 63)) == v8) {
          break;
        }
        unint64_t v11 = v29;
        long long v31 = v28;
        uint64_t v32 = v29;
        unint64_t v12 = v30;
        uint64_t v33 = v30;
        *(_OWORD *)uint64_t v7 = v28;
        *(_OWORD *)(v7 + 16) = v11;
        *(void *)(v7 + 32) = v12;
        if (v10 == v8) {
          goto LABEL_11;
        }
        v7 += 40;
        if (v6 == ++v8) {
          goto LABEL_9;
        }
      }
      __break(1u);
      goto LABEL_14;
    }
LABEL_9:
    int64_t v13 = *(_OWORD *)(v3 + 112);
    *((_OWORD *)v4 + 6) = *(_OWORD *)(v3 + 96);
    *((_OWORD *)v4 + 7) = v13;
    unint64_t v14 = *(_OWORD *)(v3 + 144);
    *((_OWORD *)v4 + 8) = *(_OWORD *)(v3 + 128);
    *((_OWORD *)v4 + 9) = v14;
    int64_t v15 = *(_OWORD *)(v3 + 48);
    *((_OWORD *)v4 + 2) = *(_OWORD *)(v3 + 32);
    *((_OWORD *)v4 + 3) = v15;
    unint64_t v16 = *(_OWORD *)(v3 + 80);
    *((_OWORD *)v4 + 4) = *(_OWORD *)(v3 + 64);
    *((_OWORD *)v4 + 5) = v16;
    uint64_t v17 = *(_OWORD *)(v3 + 16);
    *(_OWORD *)uint64_t v4 = *(_OWORD *)v3;
    *((_OWORD *)v4 + 1) = v17;
    uint64_t v5 = v6;
    v4[20] = v6;
    return (void *)v5;
  }
LABEL_14:
  __break(1u);
  return result;
}

{
  uint64_t *v3;
  void *v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  void *(*v13)(_OWORD *__return_ptr, void *);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int16 v24;
  long long v25;
  long long v26;
  long long v27;
  long long v28;
  char v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  BOOL v42;
  void *(*v43)(_OWORD *__return_ptr, void *);
  _OWORD v44[5];
  uint64_t v45;
  __int16 v46;
  void v47[2];
  BOOL v48;

  uint64_t v4 = result;
  uint64_t v5 = *v3;
  uint64_t v6 = *((unsigned char *)v3 + 8);
  uint64_t v7 = v3[2];
  uint64_t v8 = v3[3];
  int64_t v10 = v3[4];
  uint64_t v9 = v3[5];
  unint64_t v11 = *((unsigned char *)v3 + 48);
  unint64_t v12 = v3[7];
  unint64_t v39 = v3[8];
  char v40 = *((unsigned char *)v3 + 72);
  int64_t v13 = (void *(*)(_OWORD *__return_ptr, void *))v3[10];
  unint64_t v14 = v3[11];
  uint64_t v43 = v13;
  if (!a2)
  {
LABEL_24:
    a3 = 0;
LABEL_25:
    long long v31 = v10;
    uint64_t v21 = v9;
    long long v30 = v11;
LABEL_29:
    *uint64_t v4 = v5;
    *((unsigned char *)v4 + 8) = v6;
    long long v4[2] = v7;
    long long v4[3] = v8;
    v4[4] = v10;
    void v4[5] = v9;
    *((unsigned char *)v4 + 48) = v11;
    v4[7] = v12;
    v4[8] = v39;
    *((unsigned char *)v4 + 72) = v40;
    v4[10] = v31;
    v4[11] = v21;
    *((unsigned char *)v4 + 96) = v30;
    v4[13] = v43;
    v4[14] = v14;
    return (void *)a3;
  }
  if (!a3) {
    goto LABEL_25;
  }
  if ((a3 & 0x8000000000000000) == 0)
  {
    int64_t v15 = a2;
    long long v37 = v6;
    long long v38 = v5;
    unint64_t v16 = 0;
    uint64_t v17 = __OFADD__(v7, v8);
    uint64_t v42 = v17;
    unint64_t v35 = v8;
    uint64_t v36 = v7;
    uint64_t v41 = v10 - (v7 + v8) + 1;
    uint64_t v32 = v12;
    uint64_t v18 = v10 - v12;
    uint64_t v33 = v11;
    unint64_t v19 = v11;
    unint64_t v34 = v9;
    uint64_t v5 = v9;
    uint64_t v20 = a3;
    while (1)
    {
      if (!(v18 + v16))
      {
        if (v19)
        {
          if (v40)
          {
            unint64_t v12 = v32;
            long long v31 = v32;
            uint64_t v21 = v5;
LABEL_28:
            long long v30 = v19;
            a3 = v16;
            uint64_t v5 = v38;
            uint64_t v6 = v37;
            uint64_t v8 = v35;
            uint64_t v7 = v36;
            uint64_t v9 = v34;
            unint64_t v11 = v33;
            goto LABEL_29;
          }
        }
        else
        {
          uint64_t v29 = v40;
          if (v5 != v39) {
            uint64_t v29 = 1;
          }
          if ((v29 & 1) == 0)
          {
            unint64_t v12 = v32;
            long long v31 = v32;
            uint64_t v21 = v39;
            goto LABEL_28;
          }
        }
      }
      if (!(v10 - 0x7FFFFFFFFFFFFFFFLL + v16)) {
        break;
      }
      if (v42) {
        goto LABEL_31;
      }
      long long v30 = v41 + v16 == 0;
      if (v41 + v16)
      {
        if (v19) {
          goto LABEL_33;
        }
        uint64_t v21 = v5 + 1;
        if (__OFADD__(v5, 1))
        {
          __break(1u);
          goto LABEL_24;
        }
      }
      else
      {
        uint64_t v21 = 0;
      }
      uint64_t v22 = v10 + v16++;
      v47[0] = v22;
      v47[1] = v5;
      unint64_t v48 = v19;
      uint64_t result = v43(v44, v47);
      unint64_t v23 = v45;
      char v24 = v46;
      uint64_t v25 = v44[1];
      uint64_t v26 = v44[2];
      unint64_t v27 = v44[3];
      unint64_t v28 = v44[4];
      *(_OWORD *)int64_t v15 = v44[0];
      *(_OWORD *)(v15 + 16) = v25;
      *(_OWORD *)(v15 + 32) = v26;
      *(_OWORD *)(v15 + 48) = v27;
      *(_OWORD *)(v15 + 64) = v28;
      *(void *)(v15 + 80) = v23;
      *(_WORD *)(v15 + 88) = v24;
      v15 += 96;
      unint64_t v19 = v30;
      uint64_t v5 = v21;
      if (v20 == v16)
      {
        a3 = v20;
        long long v31 = v10 + v16;
        uint64_t v5 = v38;
        uint64_t v6 = v37;
        uint64_t v8 = v35;
        uint64_t v7 = v36;
        uint64_t v9 = v34;
        unint64_t v11 = v33;
        unint64_t v12 = v32;
        goto LABEL_29;
      }
    }
    __break(1u);
LABEL_31:
    __break(1u);
  }
  __break(1u);
LABEL_33:
  __break(1u);
  return result;
}

uint64_t specialized Sequence._copySequenceContents(initializing:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = result;
  uint64_t v5 = a4 + 64;
  uint64_t v6 = -1 << *(unsigned char *)(a4 + 32);
  uint64_t v7 = ~v6;
  uint64_t v8 = -v6;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  uint64_t v10 = v9 & *(void *)(a4 + 64);
  uint64_t v29 = a4;
  uint64_t v30 = a4 + 64;
  long long v31 = (unint64_t)v7;
  uint64_t v32 = v10;
  long long v11 = (unint64_t)v7;
  if (!a2)
  {
    uint64_t v12 = 0;
    goto LABEL_16;
  }
  uint64_t v12 = a3;
  if (!a3)
  {
LABEL_16:
    *(void *)uint64_t v4 = a4;
    *(void *)(v4 + 8) = v5;
    *(_OWORD *)(v4 + 16) = v11;
    *(void *)(v4 + 32) = v10;
    return v12;
  }
  if ((a3 & 0x8000000000000000) == 0)
  {
    uint64_t v13 = a2;
    SpatialEventCollection.Iterator.next()((uint64_t)v22);
    char v14 = v25;
    if (v25 == 3)
    {
      uint64_t v15 = 0;
LABEL_13:
      a4 = v29;
      uint64_t v5 = v30;
      long long v11 = v31;
      uint64_t v12 = v15;
    }
    else
    {
      uint64_t v15 = 0;
      while (1)
      {
        char v16 = v28;
        uint64_t v17 = v27;
        char v18 = v23;
        uint64_t v19 = v22[1];
        long long v20 = v24;
        long long v21 = v26;
        *(void *)uint64_t v13 = v22[0];
        *(void *)(v13 + 8) = v19;
        *(unsigned char *)(v13 + 16) = v18;
        *(_OWORD *)(v13 + 24) = v20;
        *(unsigned char *)(v13 + 40) = v14;
        *(_OWORD *)(v13 + 48) = v21;
        *(void *)(v13 + 64) = v17;
        *(unsigned char *)(v13 + 72) = v16 & 1;
        if (v12 - 1 == v15) {
          break;
        }
        v13 += 80;
        SpatialEventCollection.Iterator.next()((uint64_t)v22);
        char v14 = v25;
        ++v15;
        if (v25 == 3) {
          goto LABEL_13;
        }
      }
      a4 = v29;
      uint64_t v5 = v30;
      long long v11 = v31;
    }
    uint64_t v10 = v32;
    goto LABEL_16;
  }
  __break(1u);
  return result;
}

{
  void *v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  uint64_t v5 = (void *)result;
  uint64_t v6 = *(void *)(a4 + 16);
  if (!a2)
  {
    uint64_t v13 = *(void *)(a4 + 16);
    uint64_t v6 = 0;
    goto LABEL_14;
  }
  if (!a3)
  {
    uint64_t v13 = *(void *)(a4 + 16);
LABEL_13:
    uint64_t v6 = a3;
    goto LABEL_14;
  }
  if ((a3 & 0x8000000000000000) == 0)
  {
    if (v6)
    {
      uint64_t v8 = a2;
      uint64_t v9 = 0;
      while (v6 + v9 <= *(void *)(a4 + 16))
      {
        uint64_t v10 = type metadata accessor for IntelligenceElement();
        long long v11 = *(void *)(v10 - 8);
        uint64_t v12 = *(void *)(v11 + 72);
        uint64_t result = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(v11 + 16))(v8, a4+ ((*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80))+ v12 * (v6 + v9 - 1), v10);
        if (a3 + v9 == 1)
        {
          uint64_t v13 = v6 + v9 - 1;
          goto LABEL_13;
        }
        v8 += v12;
        --v9;
        if (!(v6 + v9)) {
          goto LABEL_9;
        }
      }
      __break(1u);
      goto LABEL_16;
    }
LABEL_9:
    uint64_t v13 = 0;
LABEL_14:
    *uint64_t v5 = a4;
    v5[1] = v13;
    return v6;
  }
LABEL_16:
  __break(1u);
  return result;
}

void specialized Sequence._copySequenceContents(initializing:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, int a5)
{
  int v25 = a5;
  _s10Foundation14DateComponentsVSgMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for PlatformItemList.Item?, (uint64_t (*)(uint64_t))type metadata accessor for PlatformItemList.Item, MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v9 - 8);
  long long v11 = (char *)&v22 - v10;
  uint64_t v12 = type metadata accessor for PlatformItemList.Item();
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x1F4188790](v12);
  uint64_t v15 = (char *)&v22 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!a2)
  {
    a3 = 0;
    goto LABEL_22;
  }
  if (!a3)
  {
LABEL_22:
    *(void *)a1 = a4;
    *(unsigned char *)(a1 + 8) = v25 & 1;
    *(void *)(a1 + 16) = a3;
    return;
  }
  if ((a3 & 0x8000000000000000) == 0)
  {
    uint64_t v23 = a1;
    unint64_t v16 = a3;
    a3 = 0;
    unint64_t v22 = v16;
    unint64_t v24 = v16 - 1;
    if ((v25 & 1) == 0) {
      goto LABEL_7;
    }
LABEL_5:
    if (a3 != *(void *)(a4 + 16))
    {
      swift_bridgeObjectRetain();
      uint64_t v17 = a4;
      while (a3 < *(void *)(v17 + 16))
      {
        uint64_t v21 = *(void *)(v13 + 72);
        outlined init with copy of _ArchivedViewStates(v17 + ((*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80)) + v21 * a3, (uint64_t)v11, (uint64_t (*)(void))type metadata accessor for PlatformItemList.Item);
        swift_bridgeObjectRelease();
        (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v11, 0, 1, v12);
        outlined init with take of AnimationTimelineSchedule.Entries((uint64_t)v11, (uint64_t)v15, (uint64_t (*)(void))type metadata accessor for PlatformItemList.Item);
        outlined init with take of AnimationTimelineSchedule.Entries((uint64_t)v15, a2, (uint64_t (*)(void))type metadata accessor for PlatformItemList.Item);
        if (v24 == a3)
        {
          a3 = v22;
          goto LABEL_21;
        }
        a2 += v21;
        ++a3;
        if (v25) {
          goto LABEL_5;
        }
LABEL_7:
        Weakuint64_t Value = AGGraphGetWeakValue();
        if (WeakValue)
        {
          if (a3 == *(void *)(*(void *)WeakValue + 16)) {
            goto LABEL_19;
          }
        }
        else
        {
          uint64_t v19 = *(void *)(MEMORY[0x1E4FBC860] + 16);
          swift_bridgeObjectRelease();
          if (a3 == v19) {
            goto LABEL_19;
          }
        }
        long long v20 = (uint64_t *)AGGraphGetWeakValue();
        if (v20)
        {
          uint64_t v17 = *v20;
          swift_bridgeObjectRetain();
        }
        else
        {
          uint64_t v17 = MEMORY[0x1E4FBC860];
        }
      }
      __break(1u);
      goto LABEL_24;
    }
LABEL_19:
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v13 + 56))(v11, 1, 1, v12);
    outlined destroy of DateComponents?((uint64_t)v11, (unint64_t *)&lazy cache variable for type metadata for PlatformItemList.Item?, (uint64_t (*)(uint64_t))type metadata accessor for PlatformItemList.Item);
LABEL_21:
    a1 = v23;
    goto LABEL_22;
  }
LABEL_24:
  __break(1u);
}

void specialized Sequence._copySequenceContents(initializing:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v43 = type metadata accessor for TableColumnCollection.Visitor(0);
  MEMORY[0x1F4188790](v43);
  uint64_t v8 = (void *)((char *)v40 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  _s10Foundation14DateComponentsVSgMaTm_0(0, &lazy cache variable for type metadata for TableColumnCollection.Entry?, type metadata accessor for TableColumnCollection.Entry, MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v9 - 8);
  long long v11 = (char *)v40 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v12);
  uint64_t v49 = (uint64_t)v40 - v13;
  uint64_t v48 = type metadata accessor for TableColumnCollection.Entry(0);
  uint64_t v44 = *(void *)(v48 - 8);
  MEMORY[0x1F4188790](v48);
  uint64_t v46 = (uint64_t)v40 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  long long v15 = v3[1];
  long long v59 = *v3;
  *(_OWORD *)long long v60 = v15;
  *(_OWORD *)&v60[9] = *(long long *)((char *)v3 + 25);
  unint64_t v61 = 0;
  if (a2 && a3)
  {
    if ((a3 & 0x8000000000000000) == 0)
    {
      uint64_t v41 = a1;
      uint64_t v16 = a3;
      uint64_t v17 = 0;
      uint64_t v18 = v44;
      uint64_t v47 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v44 + 56);
      uint64_t v42 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v44 + 48);
      v40[1] = v16;
      uint64_t v45 = v16 - 1;
      while (1)
      {
        unint64_t v19 = v61;
        outlined init with copy of TableColumnCollection.Backing((uint64_t)&v59, (uint64_t)v57);
        if (v58)
        {
          uint64_t v20 = *(void *)(*(void *)&v57[0] + 16);
          swift_bridgeObjectRelease();
          if (v19 == v20) {
            goto LABEL_23;
          }
        }
        else
        {
          outlined init with take of OptionalBinaryInteger(v57, (uint64_t)&v53);
          uint64_t v22 = v54;
          uint64_t v21 = v55;
          __swift_project_boxed_opaque_existential_1(&v53, v54);
          uint64_t v23 = (*(uint64_t (**)(uint64_t, uint64_t))(v21 + 8))(v22, v21);
          __swift_destroy_boxed_opaque_existential_1((uint64_t)&v53);
          if (v19 == v23)
          {
LABEL_23:
            uint64_t v38 = v49;
            (*v47)(v49, 1, 1, v48);
            outlined destroy of DateComponents?(v38, &lazy cache variable for type metadata for TableColumnCollection.Entry?, type metadata accessor for TableColumnCollection.Entry);
LABEL_24:
            a1 = v41;
            goto LABEL_25;
          }
        }
        uint64_t v24 = (uint64_t)v11;
        outlined init with copy of TableColumnCollection.Backing((uint64_t)&v59, (uint64_t)v57);
        if (v58)
        {
          if ((v19 & 0x8000000000000000) != 0) {
            goto LABEL_27;
          }
          if (v19 >= *(void *)(*(void *)&v57[0] + 16)) {
            goto LABEL_28;
          }
          outlined init with copy of _ArchivedViewStates(*(void *)&v57[0]+ ((*(unsigned __int8 *)(v18 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80))+ *(void *)(v18 + 72) * v19, v49, type metadata accessor for TableColumnCollection.Entry);
          swift_bridgeObjectRelease();
        }
        else
        {
          uint64_t v25 = v17;
          outlined init with take of OptionalBinaryInteger(v57, (uint64_t)&v53);
          uint64_t v26 = v43;
          uint64_t v27 = (uint64_t)v8 + *(int *)(v43 + 20);
          uint64_t v28 = v48;
          (*v47)(v27, 1, 1, v48);
          *uint64_t v8 = v19;
          uint64_t v29 = v54;
          uint64_t v30 = v55;
          __swift_project_boxed_opaque_existential_1(&v53, v54);
          TableColumnList.visitColumns<A>(applying:from:)((uint64_t)v8, v19, v29, v26, v30, (uint64_t)&protocol witness table for TableColumnCollection.Visitor);
          long long v11 = (char *)v24;
          outlined init with copy of TableColumnCollection.Entry?(v27, v24);
          if ((*v42)(v24, 1, v28) == 1) {
            goto LABEL_30;
          }
          outlined destroy of IndexingIterator<_ArchivedViewStates>((uint64_t)v8, type metadata accessor for TableColumnCollection.Visitor);
          outlined init with take of AnimationTimelineSchedule.Entries(v24, v49, type metadata accessor for TableColumnCollection.Entry);
          __swift_destroy_boxed_opaque_existential_1((uint64_t)&v53);
          uint64_t v17 = v25;
          uint64_t v18 = v44;
        }
        outlined init with copy of TableColumnCollection((uint64_t)&v59, (uint64_t)v57);
        uint64_t v31 = v61;
        outlined init with copy of TableColumnCollection.Backing((uint64_t)v57, (uint64_t)&v53);
        if (v56)
        {
          uint64_t v32 = *(void *)(v53 + 16);
          swift_bridgeObjectRelease();
        }
        else
        {
          outlined init with take of OptionalBinaryInteger(&v53, (uint64_t)v50);
          uint64_t v33 = v51;
          uint64_t v34 = v52;
          __swift_project_boxed_opaque_existential_1(v50, v51);
          uint64_t v32 = (*(uint64_t (**)(uint64_t, uint64_t))(v34 + 8))(v33, v34);
          __swift_destroy_boxed_opaque_existential_1((uint64_t)v50);
        }
        if (v31 < 0 || v31 >= v32) {
          break;
        }
        unint64_t v61 = v31 + 1;
        outlined destroy of TableColumnCollection((uint64_t)v57);
        uint64_t v35 = v49;
        (*v47)(v49, 0, 1, v48);
        uint64_t v36 = v35;
        uint64_t v37 = v46;
        outlined init with take of AnimationTimelineSchedule.Entries(v36, v46, type metadata accessor for TableColumnCollection.Entry);
        outlined init with take of AnimationTimelineSchedule.Entries(v37, a2, type metadata accessor for TableColumnCollection.Entry);
        if (v45 == v17) {
          goto LABEL_24;
        }
        a2 += *(void *)(v18 + 72);
        ++v17;
      }
      __break(1u);
LABEL_27:
      __break(1u);
LABEL_28:
      __break(1u);
    }
    __break(1u);
LABEL_30:
    __break(1u);
  }
  else
  {
LABEL_25:
    long long v39 = *(_OWORD *)v60;
    *(_OWORD *)a1 = v59;
    *(_OWORD *)(a1 + 16) = v39;
    *(_OWORD *)(a1 + 32) = *(_OWORD *)&v60[16];
    *(void *)(a1 + 48) = v61;
  }
}

uint64_t specialized Sequence._copySequenceContents(initializing:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v34 = a1;
  uint64_t v45 = type metadata accessor for _ArchivedViewStates(0);
  MEMORY[0x1F4188790](v45);
  uint64_t v46 = (uint64_t)&v33 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  _s10Foundation14DateComponentsVSgMaTm_0(0, &lazy cache variable for type metadata for _ArchivedView?, type metadata accessor for _ArchivedView, MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v8 - 8);
  uint64_t v10 = (char *)&v33 - v9;
  uint64_t v11 = type metadata accessor for _ArchivedView(0);
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v42 = v11;
  uint64_t v43 = v12;
  MEMORY[0x1F4188790](v11);
  uint64_t v14 = (char *)&v33 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v15);
  uint64_t v17 = (char *)&v33 - v16;
  MEMORY[0x1F4188790](v18);
  uint64_t v41 = (uint64_t)&v33 - v19;
  type metadata accessor for IndexingIterator<_ArchivedViewStates>(0);
  uint64_t v21 = v20 - 8;
  MEMORY[0x1F4188790](v20);
  uint64_t v23 = (char *)&v33 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = outlined init with take of AnimationTimelineSchedule.Entries(v4, (uint64_t)v23, type metadata accessor for _ArchivedViewStates);
  uint64_t v25 = *(int *)(v21 + 44);
  uint64_t v44 = v23;
  *(void *)&v23[v25] = 0;
  if (!a2) {
    goto LABEL_5;
  }
  if (!a3)
  {
    uint64_t v27 = 0;
    uint64_t v28 = (uint64_t)v44;
    goto LABEL_13;
  }
  if ((a3 & 0x8000000000000000) == 0)
  {
    unint64_t v26 = *(void *)&v44[v25];
    char v40 = &v44[*(int *)(v45 + 20)];
    if (v26 == *(void *)(*((void *)v40 + 1) + 16))
    {
LABEL_5:
      uint64_t v27 = 0;
      uint64_t v28 = (uint64_t)v44;
LABEL_13:
      outlined init with take of AnimationTimelineSchedule.Entries(v28, v34, (uint64_t (*)(void))type metadata accessor for IndexingIterator<_ArchivedViewStates>);
      return v27;
    }
    uint64_t v27 = 0;
    uint64_t v28 = (uint64_t)v44;
    uint64_t v37 = (void (**)(char *, void, uint64_t, uint64_t))(v43 + 56);
    uint64_t v38 = v46 + 8;
    uint64_t v33 = a3;
    uint64_t v35 = &v47;
    uint64_t v36 = a3 - 1;
    long long v39 = v17;
    while (1)
    {
      _ArchivedViewStates.state(at:)(v26, (uint64_t)v10);
      (*v37)(v10, 0, 1, v42);
      outlined init with take of AnimationTimelineSchedule.Entries((uint64_t)v10, (uint64_t)v14, type metadata accessor for _ArchivedView);
      uint64_t v29 = (uint64_t)v39;
      outlined init with take of AnimationTimelineSchedule.Entries((uint64_t)v14, (uint64_t)v39, type metadata accessor for _ArchivedView);
      uint64_t result = outlined init with copy of _ArchivedViewStates(v28, v46, type metadata accessor for _ArchivedViewStates);
      unint64_t v30 = *(void *)(v28 + v25);
      if (v30 >= *(void *)(*(void *)(v38 + *(int *)(v45 + 20)) + 16)) {
        break;
      }
      *(void *)(v28 + v25) = v30 + 1;
      outlined destroy of IndexingIterator<_ArchivedViewStates>(v46, type metadata accessor for _ArchivedViewStates);
      uint64_t v31 = v25;
      uint64_t v32 = v41;
      outlined init with take of AnimationTimelineSchedule.Entries(v29, v41, type metadata accessor for _ArchivedView);
      outlined init with take of AnimationTimelineSchedule.Entries(v32, a2, type metadata accessor for _ArchivedView);
      if (v36 == v27)
      {
        uint64_t v27 = v33;
        goto LABEL_13;
      }
      a2 += *(void *)(v43 + 72);
      unint64_t v26 = *(void *)(v28 + v31);
      ++v27;
      uint64_t v25 = v31;
      if (v26 == *(void *)(*((void *)v40 + 1) + 16)) {
        goto LABEL_13;
      }
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t specialized Sequence._copySequenceContents(initializing:)(uint64_t result, uint64_t a2, uint64_t a3, void *a4, char a5, uint64_t a6, uint64_t a7)
{
  void (*v16)(void *__return_ptr, unint64_t);
  uint64_t v17;
  uint64_t v18;
  void v20[6];
  unsigned char v21[48];
  unsigned char v22[56];

  uint64_t v9 = result;
  if (!a2)
  {
    a3 = 0;
    goto LABEL_17;
  }
  if (!a3)
  {
LABEL_17:
    uint64_t v10 = a6;
    goto LABEL_18;
  }
  if (a3 < 0)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  if (!__OFADD__(a6, a7))
  {
    uint64_t v10 = a6;
    if (a7)
    {
      unint64_t v12 = 0;
      uint64_t v17 = a3;
      uint64_t v18 = a6;
      uint64_t v13 = a6 ^ 0x7FFFFFFFFFFFFFFFLL;
      uint64_t v14 = a3 - 1;
      uint64_t v15 = 4;
      while (1)
      {
        if (a5)
        {
          if (v12 >= a4[2]) {
            goto LABEL_21;
          }
          outlined init with copy of TableRowID((uint64_t)&a4[v15], (uint64_t)v20);
        }
        else
        {
          uint64_t v16 = *(void (**)(void *__return_ptr, unint64_t))(*a4 + 104);
          swift_retain();
          v16(v20, v12);
          outlined consume of Environment<[SceneID : KeyboardShortcut]>.Content((uint64_t)a4, 0);
        }
        uint64_t result = outlined init with take of TableRowID((uint64_t)v20, (uint64_t)v21);
        if (v13 == v12) {
          break;
        }
        outlined init with take of TableRowID((uint64_t)v21, (uint64_t)v22);
        uint64_t result = outlined init with take of TableRowID((uint64_t)v22, a2 + v15 * 8 - 32);
        if (v14 == v12)
        {
          a3 = v17;
          a6 = v18;
          uint64_t v10 = v18 + v12 + 1;
          goto LABEL_18;
        }
        ++v12;
        v15 += 6;
        if (a7 == v12)
        {
          a6 = v18;
          uint64_t v10 = v18 + v12;
          goto LABEL_15;
        }
      }
      __break(1u);
LABEL_21:
      __break(1u);
      goto LABEL_22;
    }
LABEL_15:
    a3 = a7;
LABEL_18:
    *(void *)uint64_t v9 = a4;
    *(unsigned char *)(v9 + 8) = a5 & 1;
    *(void *)(v9 + 16) = a6;
    *(void *)(v9 + 24) = a7;
    *(void *)(v9 + 32) = v10;
    return a3;
  }
LABEL_23:
  __break(1u);
  return result;
}

uint64_t specialized Sequence._copySequenceContents(initializing:)(uint64_t result, _OWORD *a2, uint64_t a3)
{
  uint64_t v4 = (_OWORD *)result;
  long long v5 = v3[1];
  long long v30 = *v3;
  long long v31 = v5;
  long long v32 = v3[2];
  long long v33 = *((unint64_t *)v3 + 6);
  if (!a2)
  {
    uint64_t v6 = 0;
    goto LABEL_13;
  }
  uint64_t v6 = a3;
  if (!a3)
  {
LABEL_13:
    long long v15 = v31;
    *uint64_t v4 = v30;
    v4[1] = v15;
    long long v16 = v33;
    long long v4[2] = v32;
    long long v4[3] = v16;
    return v6;
  }
  if ((a3 & 0x8000000000000000) == 0)
  {
    uint64_t v7 = a2;
    uint64_t v8 = *((void *)&v33 + 1);
    if (*((void *)&v33 + 1) == _VariadicView_Children.endIndex.getter())
    {
      uint64_t v9 = 0;
LABEL_12:
      uint64_t v6 = v9;
      goto LABEL_13;
    }
    uint64_t v9 = 0;
    while (1)
    {
      _VariadicView_Children.subscript.getter();
      outlined init with copy of SubviewCollection((uint64_t)&v30, (uint64_t)v17);
      uint64_t result = _VariadicView_Children.endIndex.getter();
      if (v8 < 0 || v8 >= result) {
        break;
      }
      *((void *)&v33 + 1) = v8 + 1;
      outlined destroy of SubviewCollection((uint64_t)v17);
      long long v11 = v18;
      long long v10 = v19;
      long long v24 = v18;
      long long v25 = v19;
      long long v12 = v23;
      long long v14 = v21;
      long long v13 = v22;
      long long v28 = v22;
      long long v29 = v23;
      long long v26 = v20;
      long long v27 = v21;
      uint64_t v7[2] = v20;
      v7[3] = v14;
      void v7[4] = v13;
      void v7[5] = v12;
      *uint64_t v7 = v11;
      v7[1] = v10;
      if (v6 - 1 == v9) {
        goto LABEL_13;
      }
      v7 += 6;
      uint64_t v8 = *((void *)&v33 + 1);
      ++v9;
      if (v8 == _VariadicView_Children.endIndex.getter()) {
        goto LABEL_12;
      }
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t specialized Sequence._copySequenceContents(initializing:)(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = *(uint64_t (**)(uint64_t))(*(void *)v3 + 88);
  uint64_t v8 = swift_retain();
  uint64_t v9 = v7(v8);
  uint64_t result = swift_release();
  if (!a2)
  {
    a3 = 0;
    goto LABEL_11;
  }
  if (!a3)
  {
LABEL_11:
    *a1 = v3;
    a1[1] = v9;
    return a3;
  }
  if ((a3 & 0x8000000000000000) == 0)
  {
    long long v11 = *(uint64_t (**)(uint64_t))(*(void *)v3 + 96);
    if (v9 == v11(result))
    {
      uint64_t v12 = 0;
LABEL_10:
      a3 = v12;
    }
    else
    {
      uint64_t v12 = 0;
      while (1)
      {
        (*(void (**)(_OWORD *__return_ptr, uint64_t))(*(void *)v3 + 104))(v16, v9);
        long long v13 = *(uint64_t (**)(uint64_t))(*(void *)v3 + 120);
        swift_retain();
        uint64_t v9 = v13(v9);
        uint64_t v14 = swift_release();
        long long v15 = v16[1];
        *(_OWORD *)a2 = v16[0];
        *(_OWORD *)(a2 + 16) = v15;
        *(void *)(a2 + 32) = v17;
        if (a3 - 1 == v12) {
          break;
        }
        a2 += 40;
        ++v12;
        if (v9 == v11(v14)) {
          goto LABEL_10;
        }
      }
    }
    goto LABEL_11;
  }
  __break(1u);
  return result;
}

{
  uint64_t v3;
  uint64_t (*v7)(uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t (*v11)(uint64_t);
  uint64_t v12;
  uint64_t (*v13)(uint64_t);
  uint64_t v14;
  void v15[6];
  unsigned char v16[48];

  uint64_t v7 = *(uint64_t (**)(uint64_t))(*(void *)v3 + 88);
  uint64_t v8 = swift_retain();
  uint64_t v9 = v7(v8);
  uint64_t result = swift_release();
  if (!a2)
  {
    a3 = 0;
    goto LABEL_11;
  }
  if (!a3)
  {
LABEL_11:
    *a1 = v3;
    a1[1] = v9;
    return a3;
  }
  if ((a3 & 0x8000000000000000) == 0)
  {
    long long v11 = *(uint64_t (**)(uint64_t))(*(void *)v3 + 96);
    if (v9 == v11(result))
    {
      uint64_t v12 = 0;
LABEL_10:
      a3 = v12;
    }
    else
    {
      uint64_t v12 = 0;
      while (1)
      {
        (*(void (**)(void *__return_ptr, uint64_t))(*(void *)v3 + 104))(v15, v9);
        long long v13 = *(uint64_t (**)(uint64_t))(*(void *)v3 + 120);
        swift_retain();
        uint64_t v9 = v13(v9);
        swift_release();
        outlined init with take of TableRowID((uint64_t)v15, (uint64_t)v16);
        uint64_t v14 = outlined init with take of TableRowID((uint64_t)v16, a2);
        if (a3 - 1 == v12) {
          break;
        }
        a2 += 48;
        ++v12;
        if (v9 == v11(v14)) {
          goto LABEL_10;
        }
      }
    }
    goto LABEL_11;
  }
  __break(1u);
  return result;
}

{
  uint64_t v3;
  uint64_t v7;
  BOOL v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t updated;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  void *v20;
  char v21;
  void (*v22)(void *__return_ptr, unint64_t);
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  BOOL v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned __int8 v32;
  uint64_t v33;
  unsigned char v34[32];
  uint64_t v35;
  char v36;
  unsigned char v37[48];
  void v38[33];
  void v39[34];

  outlined init with copy of _ArchivedViewStates(v3, (uint64_t)v38, (uint64_t (*)(void))type metadata accessor for CountingIndexCollection<ShadowRowCollection<TableDataSourceAdaptor>>);
  uint64_t v7 = *(void *)(v3 + 208);
  uint64_t v8 = v7 == specialized ShadowRowCollection.endIndex.getter();
  outlined destroy of IndexingIterator<_ArchivedViewStates>(v3, (uint64_t (*)(void))type metadata accessor for CountingIndexCollection<ShadowRowCollection<TableDataSourceAdaptor>>);
  v38[30] = v7;
  v38[31] = 0;
  LOBYTE(v38[32]) = v8;
  uint64_t result = (uint64_t)memcpy(v39, v38, 0x101uLL);
  if (!a2)
  {
LABEL_35:
    a3 = 0;
    goto LABEL_39;
  }
  if (!a3)
  {
LABEL_39:
    memcpy(a1, v39, 0x101uLL);
    return a3;
  }
  if ((a3 & 0x8000000000000000) == 0)
  {
    long long v28 = a1;
    long long v29 = a3;
    long long v10 = v39[26] + v39[27];
    if (!__OFADD__(v39[26], v39[27]))
    {
      a3 = 0;
      long long v11 = v39[30];
      uint64_t v12 = v39[31];
      long long v32 = v39[32];
      while (1)
      {
        long long v30 = v12;
        long long v13 = v39[28];
        uint64_t v14 = v39[23];
        a1 = (void *)v39[22];
        long long v15 = *(void *)(v39[23] + 16);
        if (v15 || (long long v15 = *(void *)(v39[22] + 16)) != 0)
        {
          uint64_t result = (uint64_t)specialized ShadowListUpdateRecorder.applyUpdates<A>(_:to:)(v38, v39[23], v39[22], v39[28], v10, v15);
          long long v10 = v38[0];
        }
        if (((v11 == v10) & v32) != 0)
        {
          uint64_t v35 = 0;
          memset(v34, 0, sizeof(v34));
          uint64_t v36 = -1;
          _s7SwiftUI25AccessibilityValueStorageVSgWOhTm_5((uint64_t)v34, &lazy cache variable for type metadata for TableRowID?, (uint64_t)&type metadata for TableRowID);
          goto LABEL_38;
        }
        long long v31 = a2;
        if (*(void *)(v14 + 16) || a1[2])
        {
          MEMORY[0x1F4188790](result);
          lazy protocol witness table accessor for type TableDataSourceAdaptor and conformance TableDataSourceAdaptor();
          swift_getKeyPath();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_retain();
          updated = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF7SwiftUI22ConcatenatedCollectionVySayAF10ListUpdateOyS2iGGALG_AKs5NeverOTB503_s7d10UI24ShadowhI114RecorderV12initialIndexy10SectionIDs_0H0QZ_03RowJ0_AFQZtAG_AIt_tFAA0dE0OyAgIGALcfu_AA22TableDataSourceAdaptorV_TG5s7KeyPathCyA2KGTf1cn_nTf4ng_n(v14, (uint64_t)a1);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_release_n();
          long long v13 = (unint64_t)specialized ShadowListUpdateRecorder.applyUpdates<A>(_:to:)(&v33, updated, v13, v11);
          uint64_t result = swift_bridgeObjectRelease();
          if ((v13 & 0x8000000000000000) != 0) {
            goto LABEL_34;
          }
        }
        else
        {
          long long v33 = v11;
          if ((v13 & 0x8000000000000000) != 0)
          {
LABEL_34:
            __break(1u);
            goto LABEL_35;
          }
        }
        if (v13 >= *(void *)(v39[5] + 16)) {
          goto LABEL_41;
        }
        uint64_t v17 = v39[5] + 96 * v13;
        long long v18 = *(void *)(v17 + 112);
        long long v19 = v33 - v18;
        if (__OFSUB__(v33, v18)) {
          goto LABEL_42;
        }
        long long v20 = *(void **)(v17 + 96);
        long long v21 = *(unsigned char *)(v17 + 104);
        if (v21)
        {
          if ((v19 & 0x8000000000000000) != 0) {
            goto LABEL_45;
          }
          if (v19 >= v20[2]) {
            goto LABEL_46;
          }
          outlined init with copy of TableRowID((uint64_t)&v20[6 * v19 + 4], (uint64_t)v38);
          swift_bridgeObjectRetain();
        }
        else
        {
          long long v22 = *(void (**)(void *__return_ptr, unint64_t))(*v20 + 104);
          swift_retain();
          v22(v38, v19);
        }
        outlined init with take of TableRowID((uint64_t)v38, (uint64_t)v34);
        outlined consume of Environment<[SceneID : KeyboardShortcut]>.Content((uint64_t)v20, v21);
        uint64_t result = outlined init with copy of _ArchivedViewStates((uint64_t)v39, (uint64_t)v38, (uint64_t (*)(void))type metadata accessor for CountingIndexCollection<ShadowRowCollection<TableDataSourceAdaptor>>);
        long long v23 = v11 + 1;
        if (__OFADD__(v11, 1)) {
          goto LABEL_43;
        }
        long long v24 = v38[26] + v38[27];
        if (__OFADD__(v38[26], v38[27])) {
          goto LABEL_44;
        }
        long long v25 = *(void *)(v38[23] + 16);
        if (v25 || (long long v25 = *(void *)(v38[22] + 16)) != 0)
        {
          uint64_t result = (uint64_t)specialized ShadowListUpdateRecorder.applyUpdates<A>(_:to:)(&v33, v38[23], v38[22], v38[28], v24, v25);
          long long v24 = v33;
        }
        if (v23 == v24)
        {
          long long v26 = 0;
        }
        else
        {
          if (v32) {
            goto LABEL_49;
          }
          long long v26 = v30 + 1;
          if (__OFADD__(v30, 1)) {
            goto LABEL_47;
          }
        }
        long long v27 = v23 == v24;
        outlined destroy of IndexingIterator<_ArchivedViewStates>((uint64_t)v38, (uint64_t (*)(void))type metadata accessor for CountingIndexCollection<ShadowRowCollection<TableDataSourceAdaptor>>);
        v39[30] = v11 + 1;
        v39[31] = v26;
        LOBYTE(v39[32]) = v27;
        outlined init with take of TableRowID((uint64_t)v34, (uint64_t)v37);
        uint64_t result = outlined init with take of TableRowID((uint64_t)v37, v31);
        if (v29 - 1 == a3) {
          break;
        }
        a2 = v31 + 48;
        long long v11 = v39[30];
        uint64_t v12 = v39[31];
        long long v32 = v39[32];
        ++a3;
        long long v10 = v39[26] + v39[27];
        if (__OFADD__(v39[26], v39[27])) {
          goto LABEL_40;
        }
      }
      a3 = v29;
LABEL_38:
      a1 = v28;
      goto LABEL_39;
    }
LABEL_40:
    __break(1u);
LABEL_41:
    __break(1u);
LABEL_42:
    __break(1u);
LABEL_43:
    __break(1u);
LABEL_44:
    __break(1u);
LABEL_45:
    __break(1u);
LABEL_46:
    __break(1u);
LABEL_47:
    __break(1u);
  }
  __break(1u);
LABEL_49:
  __break(1u);
  return result;
}

uint64_t specialized Sequence._copySequenceContents(initializing:)(unint64_t *a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (!a2)
  {
    uint64_t v8 = 0;
    goto LABEL_17;
  }
  if (!a3)
  {
LABEL_16:
    uint64_t v8 = a3;
    goto LABEL_17;
  }
  if (a3 < 0)
  {
LABEL_19:
    __break(1u);
  }
  else
  {
    uint64_t v4 = a2;
    if (!(a4 >> 62))
    {
      uint64_t v8 = *(void *)((a4 & 0xFFFFFFFFFFFFFF8) + 0x10);
      if (v8) {
        goto LABEL_6;
      }
LABEL_17:
      *a1 = a4;
      a1[1] = v8;
      return v8;
    }
  }
  swift_bridgeObjectRetain();
  uint64_t v8 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v8) {
    goto LABEL_17;
  }
LABEL_6:
  unint64_t v9 = 0;
  while (1)
  {
    if ((a4 & 0xC000000000000001) != 0)
    {
      uint64_t v11 = MEMORY[0x18C117680](v9, a4);
      uint64_t v10 = v11;
    }
    else
    {
      if (v9 >= *(void *)((a4 & 0xFFFFFFFFFFFFFF8) + 0x10))
      {
        __break(1u);
        goto LABEL_19;
      }
      uint64_t v10 = *(void *)(a4 + 8 * v9 + 32);
      uint64_t v11 = swift_retain();
    }
    (*(void (**)(long long *__return_ptr, uint64_t))(*(void *)v10 + 120))(&v13, v11);
    uint64_t result = swift_release();
    if (!v14) {
      break;
    }
    outlined init with take of Decodable & Encodable & Hashable(&v13, (uint64_t)v15);
    outlined init with take of Decodable & Encodable & Hashable(v15, (uint64_t)v16);
    outlined init with take of Decodable & Encodable & Hashable(v16, (uint64_t)v17);
    outlined init with take of Decodable & Encodable & Hashable(v17, v4);
    if (a3 - 1 == v9) {
      goto LABEL_16;
    }
    v4 += 56;
    if (v8 == ++v9) {
      goto LABEL_17;
    }
  }
  __break(1u);
  return result;
}

{
  uint64_t v4;
  uint64_t v8;
  unint64_t i;
  uint64_t v10;
  uint64_t v11;
  long long v13[2];
  long long v14[2];

  if (a2)
  {
    if (a3)
    {
      if (a3 < 0) {
        goto LABEL_18;
      }
      uint64_t v4 = a2;
      if (a4 >> 62)
      {
LABEL_19:
        swift_bridgeObjectRetain();
        uint64_t v8 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (v8) {
          goto LABEL_6;
        }
      }
      else
      {
        uint64_t v8 = *(void *)((a4 & 0xFFFFFFFFFFFFFF8) + 0x10);
        if (v8)
        {
LABEL_6:
          for (uint64_t i = 0; v8 != i; ++i)
          {
            if ((a4 & 0xC000000000000001) != 0)
            {
              uint64_t v11 = MEMORY[0x18C117680](i, a4);
              uint64_t v10 = v11;
            }
            else
            {
              if (i >= *(void *)((a4 & 0xFFFFFFFFFFFFFF8) + 0x10))
              {
                __break(1u);
LABEL_18:
                __break(1u);
                goto LABEL_19;
              }
              uint64_t v10 = *(void *)(a4 + 8 * i + 32);
              uint64_t v11 = swift_retain();
            }
            (*(void (**)(long long *__return_ptr, uint64_t))(*(void *)v10 + 112))(v13, v11);
            swift_release();
            outlined init with take of OptionalBinaryInteger(v13, (uint64_t)v14);
            outlined init with take of OptionalBinaryInteger(v14, v4);
            if (a3 - 1 == i) {
              goto LABEL_15;
            }
            v4 += 40;
          }
        }
      }
    }
    else
    {
LABEL_15:
      uint64_t v8 = a3;
    }
  }
  else
  {
    uint64_t v8 = 0;
  }
  *a1 = a4;
  a1[1] = v8;
  return v8;
}

uint64_t specialized Sequence._copySequenceContents(initializing:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6)
{
  uint64_t v9 = result;
  if (!a2)
  {
    uint64_t v10 = 0;
    goto LABEL_11;
  }
  uint64_t v10 = a3;
  if (!a3)
  {
LABEL_11:
    *(void *)uint64_t v9 = a4;
    *(_DWORD *)(v9 + 8) = a5;
    *(void *)(v9 + 16) = a6;
    *(void *)(v9 + 24) = v10;
    return v10;
  }
  if ((a3 & 0x8000000000000000) == 0)
  {
    uint64_t v11 = *(void *)(a6 + 16);
    if (v11)
    {
      uint64_t v12 = a2;
      unint64_t v13 = 0;
      uint64_t v14 = a6 + 32;
      uint64_t v15 = a3 - 1;
      while (v13 < *(void *)(a6 + 16))
      {
        uint64_t result = outlined init with copy of PlatformItem(v14, v12);
        if (v15 == v13) {
          goto LABEL_11;
        }
        v12 += 336;
        ++v13;
        v14 += 336;
        if (v11 == v13) {
          goto LABEL_9;
        }
      }
      __break(1u);
      goto LABEL_13;
    }
LABEL_9:
    uint64_t v10 = v11;
    goto LABEL_11;
  }
LABEL_13:
  __break(1u);
  return result;
}

uint64_t specialized Sequence._copySequenceContents(initializing:)(uint64_t a1, char *a2, uint64_t a3)
{
  uint64_t v4 = v3;
  _s10Foundation14DateComponentsVSgMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for Date?, MEMORY[0x1E4F27928], MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v8 - 8);
  uint64_t v10 = (char *)&v24 - v9;
  uint64_t v11 = type metadata accessor for Date();
  uint64_t v31 = *(void *)(v11 - 8);
  MEMORY[0x1F4188790](v11);
  unint64_t v13 = (char *)&v24 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for AnimationTimelineSchedule.Entries();
  MEMORY[0x1F4188790](v14);
  long long v16 = (char *)&v24 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = outlined init with take of AnimationTimelineSchedule.Entries(v4, (uint64_t)v16, (uint64_t (*)(void))type metadata accessor for AnimationTimelineSchedule.Entries);
  if (!a2)
  {
    a3 = 0;
    goto LABEL_12;
  }
  if (!a3)
  {
LABEL_12:
    outlined init with take of AnimationTimelineSchedule.Entries((uint64_t)v16, a1, (uint64_t (*)(void))type metadata accessor for AnimationTimelineSchedule.Entries);
    return a3;
  }
  if ((a3 & 0x8000000000000000) == 0)
  {
    uint64_t v25 = a3;
    uint64_t v26 = a1;
    long long v18 = &v16[*(int *)(v14 + 20)];
    long long v19 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v31 + 56);
    int v30 = v18[8];
    if (v30)
    {
LABEL_9:
      (*v19)(v10, 1, 1, v11);
      uint64_t v20 = 0;
    }
    else
    {
      uint64_t v20 = 0;
      long long v21 = (unsigned int (**)(char *, uint64_t, uint64_t))(v31 + 48);
      long long v22 = (void (**)(char *, char *, uint64_t))(v31 + 32);
      long long v28 = *(void (**)(char *, char *, uint64_t))(v31 + 16);
      uint64_t v29 = v31 + 16;
      uint64_t v27 = v25 - 1;
      while (1)
      {
        v28(v10, v16, v11);
        (*v19)(v10, 0, 1, v11);
        static Date.+= infix(_:_:)();
        if ((*v21)(v10, 1, v11) == 1) {
          break;
        }
        long long v23 = *v22;
        (*v22)(v13, v10, v11);
        v23(a2, v13, v11);
        if (v27 == v20)
        {
          a3 = v25;
          a1 = v26;
          goto LABEL_12;
        }
        a2 += *(void *)(v31 + 72);
        ++v20;
        if (v30) {
          goto LABEL_9;
        }
      }
    }
    a1 = v26;
    outlined destroy of DateComponents?((uint64_t)v10, (unint64_t *)&lazy cache variable for type metadata for Date?, MEMORY[0x1E4F27928]);
    a3 = v20;
    goto LABEL_12;
  }
  __break(1u);
  return result;
}

uint64_t specialized Sequence._copySequenceContents(initializing:)(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  outlined init with copy of _LazyLayout_Subviews(v3, (uint64_t)v28);
  *((void *)&v29 + 1) = 0;
  uint64_t result = outlined destroy of _LazyLayout_Subviews_V1.SubviewsSequence(v3);
  if (!a2)
  {
    uint64_t v8 = 0;
LABEL_11:
    long long v14 = v28[5];
    a1[4] = v28[4];
    a1[5] = v14;
    long long v15 = v29;
    a1[6] = v28[6];
    a1[7] = v15;
    long long v16 = v28[1];
    *a1 = v28[0];
    a1[1] = v16;
    long long v17 = v28[3];
    a1[2] = v28[2];
    a1[3] = v17;
    return v8;
  }
  if (!a3)
  {
    uint64_t v8 = 0;
    goto LABEL_11;
  }
  if ((a3 & 0x8000000000000000) == 0)
  {
    uint64_t v8 = 0;
    while (1)
    {
      memset(v21, 0, 95);
      v20[13] = *((void *)&v29 + 1);
      uint64_t v9 = outlined init with copy of _LazyLayout_Subviews((uint64_t)v28, (uint64_t)v19);
      MEMORY[0x1F4188790](v9);
      v18[11] = v20[11];
      uint64_t v10 = outlined init with copy of _ViewList_Node((uint64_t)v20, (uint64_t)v18);
      MEMORY[0x1F4188790](v10);
      swift_bridgeObjectRetain();
      _ViewList_Node.applyNodes(from:style:transform:to:)();
      outlined destroy of _ViewList_Node((uint64_t)v18);
      swift_bridgeObjectRelease();
      outlined destroy of _LazyLayout_Subviews((uint64_t)v19);
      outlined init with take of AnyAccessibilityAction?((uint64_t)v21, (uint64_t)&v22, &lazy cache variable for type metadata for _LazyLayout_Subview_V1?, (uint64_t)&type metadata for _LazyLayout_Subview_V1);
      if (!(void)v22) {
        break;
      }
      ++v8;
      *(_OWORD *)((char *)v27 + 15) = *(_OWORD *)((char *)v26 + 15);
      v26[5] = v25;
      long long v11 = v25;
      v27[0] = v26[0];
      v26[3] = v23;
      long long v12 = v23;
      v26[4] = v24;
      void v26[2] = v22;
      long long v13 = v22;
      a2[2] = v24;
      a2[3] = v11;
      a2[4] = v27[0];
      *(_OWORD *)((char *)a2 + 79) = *(_OWORD *)((char *)v27 + 15);
      *a2 = v13;
      a2[1] = v12;
      a2 += 6;
      if (a3 == v8)
      {
        uint64_t v8 = a3;
        goto LABEL_11;
      }
    }
    _s7SwiftUI25AccessibilityValueStorageVSgWOhTm_5((uint64_t)&v22, &lazy cache variable for type metadata for _LazyLayout_Subview_V1?, (uint64_t)&type metadata for _LazyLayout_Subview_V1);
    goto LABEL_11;
  }
  __break(1u);
  return result;
}

void *specialized Sequence._copySequenceContents(initializing:)(void *result, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t *, void *), uint64_t a6)
{
  unint64_t v22 = 0;
  if (!a2)
  {
LABEL_11:
    unint64_t v9 = 0;
LABEL_12:
    uint64_t v8 = 0;
LABEL_17:
    *uint64_t result = a4;
    result[1] = a5;
    result[2] = a6;
    result[3] = v9;
    return (void *)v8;
  }
  uint64_t v8 = a3;
  if (!a3)
  {
    unint64_t v9 = 0;
    goto LABEL_17;
  }
  if ((a3 & 0x8000000000000000) == 0)
  {
    unint64_t v9 = *(void *)(a4 + 16);
    if (v9)
    {
      uint64_t v10 = a2;
      unint64_t v11 = 0;
      long long v19 = result;
      uint64_t v20 = a4 + 32;
      uint64_t v12 = 1;
      while (v11 < *(void *)(a4 + 16))
      {
        long long v13 = (uint64_t *)(v20 + 40 * v11);
        uint64_t v14 = *v13;
        uint64_t v15 = v13[1];
        uint64_t v16 = v13[2];
        uint64_t v17 = v13[3];
        uint64_t v18 = v13[4];
        outlined copy of Text?(*v13, v15, v16, v17);
        swift_bridgeObjectRetain();
        swift_retain();
        specialized CoalescingAdjacentDuplicates.formIndex(after:)(&v22, a4, a5);
        swift_release();
        uint64_t result = (void *)swift_bridgeObjectRelease();
        *uint64_t v10 = v14;
        v10[1] = v15;
        v10[2] = v16;
        v10[3] = v17;
        v10[4] = v18;
        unint64_t v11 = v22;
        if (v8 == v12)
        {
          unint64_t v9 = v22;
LABEL_16:
          uint64_t result = v19;
          goto LABEL_17;
        }
        if (v22 == v9)
        {
          uint64_t v8 = v12;
          goto LABEL_16;
        }
        ++v12;
        v10 += 5;
        if ((v22 & 0x8000000000000000) != 0)
        {
          __break(1u);
          goto LABEL_11;
        }
      }
      __break(1u);
      goto LABEL_19;
    }
    goto LABEL_12;
  }
LABEL_19:
  __break(1u);
  return result;
}

void *specialized Sequence._copySequenceContents(initializing:)(void *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4 + 64;
  uint64_t v5 = -1;
  uint64_t v6 = -1 << *(unsigned char *)(a4 + 32);
  if (-v6 < 64) {
    uint64_t v5 = ~(-1 << -(char)v6);
  }
  unint64_t v7 = v5 & *(void *)(a4 + 64);
  if (!a2)
  {
    int64_t v8 = 0;
    a3 = 0;
LABEL_35:
    *uint64_t result = a4;
    result[1] = v4;
    result[2] = ~v6;
    result[3] = v8;
    result[4] = v7;
    return (void *)a3;
  }
  if (!a3)
  {
    int64_t v8 = 0;
    goto LABEL_35;
  }
  if (a3 < 0)
  {
LABEL_37:
    __break(1u);
    goto LABEL_38;
  }
  int64_t v8 = 0;
  uint64_t v9 = 0;
  int64_t v10 = (unint64_t)(63 - v6) >> 6;
  while (v7)
  {
    unint64_t v11 = __clz(__rbit64(v7));
    v7 &= v7 - 1;
    unint64_t v12 = v11 | (v8 << 6);
LABEL_8:
    ++v9;
    uint64_t v13 = *(void *)(*(void *)(a4 + 48) + 8 * v12);
    uint64_t v14 = (long long *)(*(void *)(a4 + 56) + 48 * v12);
    long long v15 = *v14;
    long long v16 = v14[1];
    long long v17 = v14[2];
    *(void *)a2 = v13;
    *(_OWORD *)(a2 + 8) = v15;
    *(_OWORD *)(a2 + 24) = v16;
    *(_OWORD *)(a2 + 40) = v17;
    a2 += 56;
    if (v9 == a3) {
      goto LABEL_35;
    }
  }
  int64_t v18 = v8 + 1;
  if (__OFADD__(v8, 1))
  {
    __break(1u);
    goto LABEL_37;
  }
  if (v18 >= v10) {
    goto LABEL_30;
  }
  unint64_t v19 = *(void *)(v4 + 8 * v18);
  if (v19) {
    goto LABEL_19;
  }
  v8 += 2;
  if (v18 + 1 >= v10)
  {
    unint64_t v7 = 0;
    int64_t v8 = v18;
    goto LABEL_34;
  }
  unint64_t v19 = *(void *)(v4 + 8 * v8);
  if (v19)
  {
LABEL_15:
    int64_t v18 = v8;
LABEL_19:
    unint64_t v21 = __clz(__rbit64(v19));
    unint64_t v7 = (v19 - 1) & v19;
    unint64_t v12 = v21 + (v18 << 6);
    int64_t v8 = v18;
    goto LABEL_8;
  }
  int64_t v20 = v18 + 2;
  if (v18 + 2 >= v10) {
    goto LABEL_30;
  }
  unint64_t v19 = *(void *)(v4 + 8 * v20);
  if (v19)
  {
LABEL_18:
    int64_t v18 = v20;
    goto LABEL_19;
  }
  int64_t v8 = v18 + 3;
  if (v18 + 3 >= v10)
  {
    unint64_t v7 = 0;
    int64_t v8 = v18 + 2;
    goto LABEL_34;
  }
  unint64_t v19 = *(void *)(v4 + 8 * v8);
  if (v19) {
    goto LABEL_15;
  }
  int64_t v20 = v18 + 4;
  if (v18 + 4 >= v10)
  {
LABEL_30:
    unint64_t v7 = 0;
LABEL_34:
    a3 = v9;
    goto LABEL_35;
  }
  unint64_t v19 = *(void *)(v4 + 8 * v20);
  if (v19) {
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v18 = v20 + 1;
    if (__OFADD__(v20, 1)) {
      break;
    }
    if (v18 >= v10)
    {
      unint64_t v7 = 0;
      int64_t v8 = v10 - 1;
      goto LABEL_34;
    }
    unint64_t v19 = *(void *)(v4 + 8 * v18);
    ++v20;
    if (v19) {
      goto LABEL_19;
    }
  }
LABEL_38:
  __break(1u);
  return result;
}

void specialized Sequence._copySequenceContents(initializing:)(void *a1, char *a2, uint64_t a3, uint64_t a4)
{
  _s10Foundation14DateComponentsVSgMaTm_0(0, &lazy cache variable for type metadata for DateComponents?, MEMORY[0x1E4F26F90], MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v8 - 8);
  int64_t v10 = (char *)&v30 - v9;
  uint64_t v11 = type metadata accessor for DateComponents();
  uint64_t v42 = *(void *)(v11 - 8);
  v12.n128_f64[0] = MEMORY[0x1F4188790](v11);
  uint64_t v41 = (char *)&v30 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v43 = a4;
  uint64_t v15 = a4 + 56;
  uint64_t v14 = *(void *)(a4 + 56);
  uint64_t v33 = -1 << *(unsigned char *)(a4 + 32);
  if (-v33 < 64) {
    uint64_t v16 = ~(-1 << -(char)v33);
  }
  else {
    uint64_t v16 = -1;
  }
  unint64_t v17 = v16 & v14;
  if (!a2)
  {
    int64_t v18 = 0;
LABEL_39:
    uint64_t v29 = ~v33;
    *a1 = v43;
    a1[1] = v15;
    a1[2] = v29;
    a1[3] = v18;
    a1[4] = v17;
    return;
  }
  if (!a3)
  {
    int64_t v18 = 0;
    goto LABEL_39;
  }
  if (a3 < 0) {
    goto LABEL_41;
  }
  uint64_t v37 = a3;
  int64_t v18 = 0;
  uint64_t v19 = 0;
  int64_t v20 = v41;
  uint64_t v39 = v42 + 16;
  char v40 = (void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v42 + 56);
  uint64_t v38 = v42 + 48;
  uint64_t v36 = (void (**)(char *, char *, uint64_t))(v42 + 32);
  uint64_t v34 = v15;
  int64_t v35 = (unint64_t)(63 - v33) >> 6;
  int64_t v31 = v35 - 1;
  long long v32 = a1;
  if (!v17) {
    goto LABEL_9;
  }
LABEL_8:
  unint64_t v21 = __clz(__rbit64(v17));
  v17 &= v17 - 1;
  unint64_t v22 = v21 | (v18 << 6);
  while (1)
  {
    uint64_t v26 = v42;
    uint64_t v27 = *(void *)(v42 + 72);
    (*(void (**)(char *, unint64_t, uint64_t, __n128))(v42 + 16))(v10, *(void *)(v43 + 48) + v27 * v22, v11, v12);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v26 + 56))(v10, 0, 1, v11);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v26 + 48))(v10, 1, v11) == 1)
    {
      uint64_t v15 = v34;
      goto LABEL_38;
    }
    ++v19;
    long long v28 = *v36;
    (*v36)(v20, v10, v11);
    v28(a2, v20, v11);
    if (v19 == v37)
    {
      a1 = v32;
      uint64_t v15 = v34;
      goto LABEL_39;
    }
    a2 += v27;
    if (v17) {
      goto LABEL_8;
    }
LABEL_9:
    int64_t v23 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    uint64_t v15 = v34;
    if (v23 >= v35) {
      goto LABEL_37;
    }
    unint64_t v24 = *(void *)(v34 + 8 * v23);
    if (!v24)
    {
      int64_t v25 = v18 + 2;
      ++v18;
      if (v23 + 1 >= v35) {
        goto LABEL_37;
      }
      unint64_t v24 = *(void *)(v34 + 8 * v25);
      if (v24) {
        goto LABEL_14;
      }
      int64_t v18 = v23 + 1;
      if (v23 + 2 >= v35) {
        goto LABEL_37;
      }
      unint64_t v24 = *(void *)(v34 + 8 * (v23 + 2));
      if (v24)
      {
        v23 += 2;
      }
      else
      {
        int64_t v18 = v23 + 2;
        if (v23 + 3 >= v35) {
          goto LABEL_37;
        }
        unint64_t v24 = *(void *)(v34 + 8 * (v23 + 3));
        if (!v24)
        {
          int64_t v25 = v23 + 4;
          int64_t v18 = v23 + 3;
          if (v23 + 4 < v35)
          {
            unint64_t v24 = *(void *)(v34 + 8 * v25);
            if (!v24)
            {
              while (1)
              {
                int64_t v23 = v25 + 1;
                if (__OFADD__(v25, 1)) {
                  goto LABEL_42;
                }
                if (v23 >= v35)
                {
                  int64_t v18 = v31;
                  goto LABEL_37;
                }
                unint64_t v24 = *(void *)(v34 + 8 * v23);
                ++v25;
                if (v24) {
                  goto LABEL_21;
                }
              }
            }
LABEL_14:
            int64_t v23 = v25;
            goto LABEL_21;
          }
LABEL_37:
          (*v40)(v10, 1, 1, v11, v12);
          unint64_t v17 = 0;
LABEL_38:
          outlined destroy of DateComponents?((uint64_t)v10, &lazy cache variable for type metadata for DateComponents?, MEMORY[0x1E4F26F90]);
          a1 = v32;
          goto LABEL_39;
        }
        v23 += 3;
      }
    }
LABEL_21:
    unint64_t v17 = (v24 - 1) & v24;
    unint64_t v22 = __clz(__rbit64(v24)) + (v23 << 6);
    int64_t v18 = v23;
  }
  __break(1u);
LABEL_41:
  __break(1u);
LABEL_42:
  __break(1u);
}

uint64_t specialized Sequence._copySequenceContents(initializing:)(char *a1, uint64_t a2, uint64_t a3)
{
  outlined init with copy of DefaultIndices<CountingIndexCollection<ShadowRowCollection<TableDataSourceAdaptor>>>(v3, (uint64_t)__src);
  uint64_t v7 = *(void *)(v3 + 240);
  uint64_t v8 = *(void *)(v3 + 248);
  char v9 = *(unsigned char *)(v3 + 256);
  outlined destroy of DefaultIndices<CountingIndexCollection<ShadowRowCollection<TableDataSourceAdaptor>>>(v3, (unint64_t *)&lazy cache variable for type metadata for DefaultIndices<CountingIndexCollection<ShadowRowCollection<TableDataSourceAdaptor>>>, MEMORY[0x1E4FBAF10]);
  *(void *)&__src[18] = v7;
  *((void *)&__src[18] + 1) = v8;
  LOBYTE(__src[19]) = v9;
  uint64_t result = (uint64_t)memcpy(__dst, __src, 0x131uLL);
  *(_OWORD *)&__dst[39] = *(_OWORD *)(v3 + 288);
  if (!a2)
  {
LABEL_24:
    a3 = 0;
    goto LABEL_27;
  }
  if (!a3)
  {
LABEL_27:
    memcpy(a1, __dst, 0x148uLL);
    return a3;
  }
  if ((a3 & 0x8000000000000000) == 0)
  {
    int64_t v25 = a1;
    uint64_t v11 = 0;
    while (1)
    {
      a1 = (char *)__dst[37];
      char v19 = __dst[38];
      uint64_t v20 = __dst[36];
      if (__dst[36] == __dst[33])
      {
        char v21 = __dst[35];
        if (__dst[38])
        {
          if (__dst[35]) {
            goto LABEL_25;
          }
        }
        else
        {
          if (__dst[37] != __dst[34]) {
            char v21 = 1;
          }
          if ((v21 & 1) == 0)
          {
LABEL_25:
            a3 = v11;
LABEL_26:
            a1 = v25;
            goto LABEL_27;
          }
        }
      }
      uint64_t result = outlined init with copy of DefaultIndices<CountingIndexCollection<ShadowRowCollection<TableDataSourceAdaptor>>>((uint64_t)__dst, (uint64_t)__src);
      uint64_t v22 = v20 + 1;
      if (__OFADD__(v20, 1)) {
        break;
      }
      uint64_t v23 = *(void *)&__src[13] + *((void *)&__src[13] + 1);
      if (__OFADD__(*(void *)&__src[13], *((void *)&__src[13] + 1))) {
        goto LABEL_29;
      }
      unint64_t v24 = *(void *)(*((void *)&__src[11] + 1) + 16);
      if (v24 || (unint64_t v24 = *(void *)(*(void *)&__src[11] + 16)) != 0)
      {
        uint64_t result = (uint64_t)specialized ShadowListUpdateRecorder.applyUpdates<A>(_:to:)(v26, *((uint64_t *)&__src[11] + 1), *(uint64_t *)&__src[11], *(unint64_t *)&__src[14], v23, v24);
        uint64_t v23 = v26[0];
      }
      if (v22 == v23)
      {
        __n128 v12 = 0;
      }
      else
      {
        if (v19) {
          goto LABEL_31;
        }
        __n128 v12 = a1 + 1;
        if (__OFADD__(a1, 1))
        {
          __break(1u);
          goto LABEL_24;
        }
      }
      ++v11;
      __dst[36] = v20 + 1;
      __dst[37] = v12;
      LOBYTE(__dst[38]) = v22 == v23;
      outlined destroy of DefaultIndices<CountingIndexCollection<ShadowRowCollection<TableDataSourceAdaptor>>>((uint64_t)__src, (unint64_t *)&lazy cache variable for type metadata for DefaultIndices<CountingIndexCollection<ShadowRowCollection<TableDataSourceAdaptor>>>, MEMORY[0x1E4FBAF10]);
      v26[0] = v20;
      v26[1] = a1;
      char v27 = v19;
      ((void (*)(_OWORD *__return_ptr, void *))__dst[39])(__src, v26);
      uint64_t v13 = *(void *)&__src[5];
      __int16 v14 = WORD4(__src[5]);
      long long v15 = __src[1];
      long long v16 = __src[2];
      long long v17 = __src[3];
      long long v18 = __src[4];
      *(_OWORD *)a2 = __src[0];
      *(_OWORD *)(a2 + 16) = v15;
      *(_OWORD *)(a2 + 32) = v16;
      *(_OWORD *)(a2 + 48) = v17;
      *(_OWORD *)(a2 + 64) = v18;
      *(void *)(a2 + 80) = v13;
      *(_WORD *)(a2 + 88) = v14;
      a2 += 96;
      if (a3 == v11) {
        goto LABEL_26;
      }
    }
    __break(1u);
LABEL_29:
    __break(1u);
  }
  __break(1u);
LABEL_31:
  __break(1u);
  return result;
}

uint64_t specialized Sequence._copySequenceContents(initializing:)(uint64_t result, uint64_t a2, unint64_t a3, void *a4, char a5, uint64_t a6, uint64_t a7)
{
  void (*v17)(void *__return_ptr, unint64_t);
  BOOL v18;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  void v27[6];
  unsigned char v28[48];
  _OWORD v29[2];
  uint64_t v30;
  char v31;
  unsigned char v32[56];

  uint64_t v7 = a6 + a7;
  if (__OFADD__(a6, a7)) {
    goto LABEL_28;
  }
  BOOL v10 = v7 == a6;
  if (!a2)
  {
    uint64_t v11 = 0;
    a3 = 0;
    uint64_t v13 = a6;
LABEL_24:
    *(void *)uint64_t result = a4;
    *(unsigned char *)(result + 8) = a5 & 1;
    *(void *)(result + 16) = a6;
    *(void *)(result + 24) = a7;
    *(void *)(result + 32) = v13;
    *(void *)(result + 40) = v11;
    *(unsigned char *)(result + 48) = v10;
    return a3;
  }
  if (!a3)
  {
    uint64_t v11 = 0;
    uint64_t v13 = a6;
    goto LABEL_24;
  }
  if ((a3 & 0x8000000000000000) != 0) {
    goto LABEL_29;
  }
  char v21 = a6 + a7;
  uint64_t v22 = result;
  uint64_t v23 = a6;
  if (v7 == a6)
  {
    uint64_t v11 = 0;
    unint64_t v12 = 0;
LABEL_21:
    uint64_t v30 = 0;
    memset(v29, 0, sizeof(v29));
    int64_t v31 = -1;
    _s7SwiftUI25AccessibilityValueStorageVSgWOhTm_5((uint64_t)v29, &lazy cache variable for type metadata for TableRowID?, (uint64_t)&type metadata for TableRowID);
    BOOL v10 = 1;
    a3 = v12;
    a6 = v23;
    uint64_t v13 = v21;
LABEL_23:
    uint64_t result = v22;
    goto LABEL_24;
  }
  unint64_t v12 = 0;
  uint64_t v11 = 0;
  uint64_t v14 = a6 ^ 0x7FFFFFFFFFFFFFFFLL;
  uint64_t v20 = a3;
  unint64_t v24 = a3 - 1;
  uint64_t v15 = a7 - 1;
  uint64_t v16 = 4;
  while (1)
  {
    if (a5)
    {
      if (v12 >= a4[2]) {
        goto LABEL_26;
      }
      outlined init with copy of TableRowID((uint64_t)&a4[v16], (uint64_t)v27);
    }
    else
    {
      long long v17 = *(void (**)(void *__return_ptr, unint64_t))(*a4 + 104);
      outlined copy of ResolvedTableRowIDs.Storage((uint64_t)a4, 0);
      v17(v27, v12);
      outlined consume of Environment<[SceneID : KeyboardShortcut]>.Content((uint64_t)a4, 0);
    }
    outlined init with take of TableRowID((uint64_t)v27, (uint64_t)v28);
    uint64_t result = outlined init with take of TableRowID((uint64_t)v28, (uint64_t)v29);
    if (v14 == v12) {
      break;
    }
    long long v18 = v15 == v12;
    if (v15 == v12)
    {
      uint64_t v11 = 0;
    }
    else
    {
      if (v10) {
        goto LABEL_30;
      }
      if (__OFADD__(v11++, 1)) {
        goto LABEL_27;
      }
    }
    outlined init with take of TableRowID((uint64_t)v29, (uint64_t)v32);
    uint64_t result = outlined init with take of TableRowID((uint64_t)v32, a2 + v16 * 8 - 32);
    if (v24 == v12)
    {
      a6 = v23;
      uint64_t v13 = v23 + v12 + 1;
      BOOL v10 = v15 == v12;
      a3 = v20;
      goto LABEL_23;
    }
    ++v12;
    v16 += 6;
    BOOL v10 = v18;
    if (a7 == v12) {
      goto LABEL_21;
    }
  }
  __break(1u);
LABEL_26:
  __break(1u);
LABEL_27:
  __break(1u);
LABEL_28:
  __break(1u);
LABEL_29:
  __break(1u);
LABEL_30:
  __break(1u);
  return result;
}

uint64_t specialized Sequence._copySequenceContents(initializing:)(_OWORD *a1, uint64_t a2, uint64_t a3)
{
  outlined init with copy of _ArchivedViewStates(v3, (uint64_t)v32, (uint64_t (*)(void))type metadata accessor for CountingIndexCollection<ShadowSectionCollection<TableDataSourceAdaptor>>);
  BOOL v7 = *(void *)(v3 + 192) == 0;
  uint64_t result = outlined destroy of IndexingIterator<_ArchivedViewStates>(v3, (uint64_t (*)(void))type metadata accessor for CountingIndexCollection<ShadowSectionCollection<TableDataSourceAdaptor>>);
  *(void *)uint64_t v34 = 0;
  *(void *)&v34[8] = 0;
  v34[16] = v7;
  long long v45 = v32[10];
  long long v46 = v32[11];
  long long v41 = v32[6];
  long long v42 = v32[7];
  long long v43 = v32[8];
  long long v44 = v32[9];
  long long v37 = v32[2];
  long long v38 = v32[3];
  long long v39 = v32[4];
  long long v40 = v32[5];
  long long v35 = v32[0];
  long long v36 = v32[1];
  *(_OWORD *)uint64_t v47 = v33;
  *(_OWORD *)&v47[9] = *(_OWORD *)&v34[1];
  uint64_t v29 = a2;
  if (!a2) {
    goto LABEL_26;
  }
  if (!a3)
  {
    a2 = 0;
    goto LABEL_26;
  }
  if (a3 < 0) {
    goto LABEL_30;
  }
  char v9 = v47[24];
  uint64_t v28 = *(void *)&v47[8];
  if (*(void *)&v47[8] == *(void *)v47 && (v47[24] & 1) != 0)
  {
    a2 = 0;
LABEL_26:
    long long v20 = v46;
    a1[10] = v45;
    a1[11] = v20;
    a1[12] = *(_OWORD *)v47;
    *(_OWORD *)((char *)a1 + 201) = *(_OWORD *)&v47[9];
    long long v21 = v42;
    a1[6] = v41;
    a1[7] = v21;
    long long v22 = v44;
    a1[8] = v43;
    a1[9] = v22;
    long long v23 = v38;
    a1[2] = v37;
    a1[3] = v23;
    long long v24 = v40;
    a1[4] = v39;
    a1[5] = v24;
    long long v25 = v36;
    *a1 = v35;
    a1[1] = v25;
    return a2;
  }
  a2 = 0;
  uint64_t v10 = *(void *)&v47[16];
  uint64_t v26 = a3;
  uint64_t v27 = a3 - 1;
  while (1)
  {
    uint64_t v30 = v10;
    uint64_t v11 = v28 + a2;
    long long v12 = v46;
    uint64_t v13 = *((void *)&v37 + 1);
    char v31 = v9;
    if (*(void *)(*((void *)&v46 + 1) + 16))
    {
      uint64_t result = swift_bridgeObjectRetain();
LABEL_12:
      MEMORY[0x1F4188790](result);
      lazy protocol witness table accessor for type TableDataSourceAdaptor and conformance TableDataSourceAdaptor();
      swift_getKeyPath();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_retain();
      uint64_t updated = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF7SwiftUI22ConcatenatedCollectionVySayAF10ListUpdateOyS2iGGALG_AKs5NeverOTB503_s7d10UI24ShadowhI114RecorderV12initialIndexy10SectionIDs_0H0QZ_03RowJ0_AFQZtAG_AIt_tFAA0dE0OyAgIGALcfu_AA22TableDataSourceAdaptorV_TG5s7KeyPathCyA2KGTf1cn_nTf4ng_n(*((uint64_t *)&v12 + 1), v12);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release_n();
      unint64_t v16 = specialized ShadowListUpdateRecorder.applyUpdates<A>(_:to:)(updated, v11);
      uint64_t result = swift_bridgeObjectRelease();
      if ((v16 & 0x8000000000000000) != 0) {
        goto LABEL_24;
      }
      goto LABEL_13;
    }
    uint64_t v14 = *(void *)(v46 + 16);
    uint64_t result = swift_bridgeObjectRetain();
    if (v14) {
      goto LABEL_12;
    }
    unint64_t v16 = v28 + a2;
    if (v11 < 0)
    {
LABEL_24:
      __break(1u);
LABEL_25:
      a2 = v26;
      goto LABEL_26;
    }
LABEL_13:
    if (v16 >= *(void *)(v13 + 16)) {
      break;
    }
    outlined init with copy of TableSections.Item(v13 + 96 * v16 + 32, (uint64_t)v32);
    uint64_t v17 = *(void *)&v32[0];
    outlined destroy of TableSections.Item((uint64_t)v32);
    swift_bridgeObjectRelease();
    uint64_t result = outlined init with copy of _ArchivedViewStates((uint64_t)&v35, (uint64_t)v32, (uint64_t (*)(void))type metadata accessor for CountingIndexCollection<ShadowSectionCollection<TableDataSourceAdaptor>>);
    uint64_t v18 = v11 + 1;
    if (__OFADD__(v11, 1)) {
      goto LABEL_28;
    }
    unint64_t v19 = v33;
    if (v18 == v33)
    {
      uint64_t v10 = 0;
    }
    else
    {
      if (v31) {
        goto LABEL_31;
      }
      uint64_t v10 = v30 + 1;
      if (__OFADD__(v30, 1)) {
        goto LABEL_29;
      }
    }
    outlined destroy of IndexingIterator<_ArchivedViewStates>((uint64_t)v32, (uint64_t (*)(void))type metadata accessor for CountingIndexCollection<ShadowSectionCollection<TableDataSourceAdaptor>>);
    *(void *)&v47[8] = v18;
    *(void *)&v47[16] = v10;
    v47[24] = v18 == v19;
    *(void *)(v29 + 8 * a2) = v17;
    if (v27 == a2) {
      goto LABEL_25;
    }
    ++a2;
    char v9 = v18 == v19;
    if (v18 == *(void *)v47)
    {
      char v9 = v18 == v19;
      if (v18 == v19) {
        goto LABEL_26;
      }
    }
  }
  __break(1u);
LABEL_28:
  __break(1u);
LABEL_29:
  __break(1u);
LABEL_30:
  __break(1u);
LABEL_31:
  __break(1u);
  return result;
}

void *specialized Sequence._copySequenceContents(initializing:)(void *result, uint64_t a2, unint64_t a3, uint64_t a4, void (*a5)(uint64_t *__return_ptr, unsigned char *), uint64_t a6)
{
  char v9 = result;
  uint64_t v10 = *(void *)(a4 + 16);
  BOOL v11 = v10 == 0;
  if (!a2)
  {
    a3 = 0;
    *uint64_t result = a4;
    result[1] = a5;
    result[3] = 0;
    result[4] = 0;
    result[2] = a6;
LABEL_20:
    *((unsigned char *)v9 + 40) = v11;
    return (void *)a3;
  }
  if (!a3)
  {
    uint64_t v13 = 0;
LABEL_19:
    *char v9 = a4;
    v9[1] = a5;
    v9[2] = a6;
    void v9[3] = a3;
    v9[4] = v13;
    goto LABEL_20;
  }
  if ((a3 & 0x8000000000000000) == 0)
  {
    unint64_t v12 = *(void *)(a4 + 16);
    if (!(v12 | v10))
    {
      uint64_t v13 = 0;
      unint64_t v14 = 0;
LABEL_17:
      *char v9 = a4;
      v9[1] = a5;
      v9[2] = a6;
      void v9[3] = v14;
      v9[4] = v13;
      a3 = v14;
      *((unsigned char *)v9 + 40) = 1;
      return (void *)a3;
    }
    unint64_t v14 = 0;
    uint64_t v13 = 0;
    uint64_t v16 = a4 + 32;
    unint64_t v20 = a3;
    unint64_t v21 = a3 - 1;
    while (v14 < v12)
    {
      unint64_t v17 = v14 + 1;
      outlined init with copy of TableSections.Item(v16, (uint64_t)v22);
      a5(&v23, v22);
      uint64_t result = (void *)outlined destroy of TableSections.Item((uint64_t)v22);
      uint64_t v18 = *(void *)(a4 + 16);
      if (v14 + 1 == v18)
      {
        uint64_t v13 = 0;
      }
      else
      {
        if (v11) {
          goto LABEL_25;
        }
        if (__OFADD__(v13++, 1)) {
          goto LABEL_23;
        }
      }
      *(void *)(a2 + 8 * v14) = v23;
      if (v21 == v14)
      {
        BOOL v11 = v17 == v18;
        a3 = v20;
        goto LABEL_19;
      }
      unint64_t v12 = *(void *)(a4 + 16);
      ++v14;
      v16 += 96;
      BOOL v11 = v17 == v18;
      if (v17 == v12)
      {
        BOOL v11 = v17 == v18;
        if (v17 == v18) {
          goto LABEL_17;
        }
      }
    }
    __break(1u);
LABEL_23:
    __break(1u);
  }
  __break(1u);
LABEL_25:
  __break(1u);
  return result;
}

uint64_t specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return MEMORY[0x1E4FBC860];
  }
  _sypSgMaTm_9(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<PresentationDetent>, (uint64_t)&type metadata for PresentationDetent, MEMORY[0x1E4FBBE00]);
  uint64_t v3 = swift_allocObject();
  int64_t v4 = _swift_stdlib_malloc_size_2((const void *)v3);
  uint64_t v5 = v4 - 32;
  if (v4 < 32) {
    uint64_t v5 = v4 - 17;
  }
  *(void *)(v3 + 16) = v1;
  *(void *)(v3 + 24) = 2 * (v5 >> 4);
  uint64_t v6 = specialized Sequence._copySequenceContents(initializing:)(&v8, (_OWORD *)(v3 + 32), v1, a1);
  swift_bridgeObjectRetain();
  outlined consume of Set<UIPress>.Iterator._Variant();
  if (v6 != (void *)v1)
  {
    __break(1u);
    return MEMORY[0x1E4FBC860];
  }
  return v3;
}

{
  uint64_t v1;
  void *v3;
  size_t v4;
  void (*v5)(_OWORD *__return_ptr);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  long long v10;
  uint64_t result;
  _OWORD v12[2];
  uint64_t v13;

  uint64_t v1 = *(void *)(a1 + 64);
  if (!v1) {
    return MEMORY[0x1E4FBC860];
  }
  if (v1 > 0)
  {
    _sypSgMaTm_9(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<AnyHashable>, MEMORY[0x1E4FBB960], MEMORY[0x1E4FBBE00]);
    uint64_t v3 = (void *)swift_allocObject();
    int64_t v4 = _swift_stdlib_malloc_size_2(v3);
    v3[2] = v1;
    v3[3] = 2 * ((uint64_t)(v4 - 32) / 40);
    uint64_t v5 = *(void (**)(_OWORD *__return_ptr))(a1 + 72);
    outlined retain of _ScrollableLayoutProxy(a1);
    uint64_t v6 = 0;
    BOOL v7 = 4;
    do
    {
      uint64_t v8 = v6 + 1;
      char v9 = &v3[v7];
      v5(v12);
      uint64_t v10 = v12[1];
      *(_OWORD *)char v9 = v12[0];
      *((_OWORD *)v9 + 1) = v10;
      v9[4] = v13;
      v7 += 5;
      uint64_t v6 = v8;
    }
    while (v1 != v8);
    outlined release of _ScrollableLayoutProxy(a1);
    return (uint64_t)v3;
  }
  uint64_t result = outlined retain of _ScrollableLayoutProxy(a1);
  __break(1u);
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  char v6;
  uint64_t v7;
  void *v8;
  size_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;

  uint64_t v2 = specialized Dictionary.startIndex.getter(a1);
  int64_t v4 = v3;
  uint64_t v6 = v5 & 1;
  BOOL v7 = specialized Collection.distance(from:to:)(v2, v3, v5 & 1, 1 << *(unsigned char *)(a1 + 32), *(_DWORD *)(a1 + 36), 0, a1);
  outlined consume of Set<UIOpenURLContext>.Index._Variant(v2, v4, v6);
  if (!v7) {
    return MEMORY[0x1E4FBC860];
  }
  if (v7 <= 0)
  {
    uint64_t v8 = (void *)MEMORY[0x1E4FBC860];
  }
  else
  {
    _sypSgMaTm_9(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<SpatialEventCollection.Event>, (uint64_t)&type metadata for SpatialEventCollection.Event, MEMORY[0x1E4FBBE00]);
    uint64_t v8 = (void *)swift_allocObject();
    char v9 = _swift_stdlib_malloc_size_2(v8);
    v8[2] = v7;
    v8[3] = 2 * ((uint64_t)(v9 - 32) / 80);
  }
  uint64_t v10 = specialized Sequence._copySequenceContents(initializing:)((uint64_t)&v12, (uint64_t)(v8 + 4), v7, a1);
  swift_bridgeObjectRetain();
  uint64_t result = outlined consume of Set<UIPress>.Iterator._Variant();
  if (v10 == v7) {
    return (uint64_t)v8;
  }
  __break(1u);
  return result;
}

{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  size_t v5;
  uint64_t v6;
  unsigned char v7[56];
  unsigned char v8[64];

  uint64_t v2 = _VariadicView_Children.endIndex.getter();
  uint64_t result = _VariadicView_Children.endIndex.getter();
  if (result < 0)
  {
    __break(1u);
  }
  else
  {
    uint64_t result = _VariadicView_Children.endIndex.getter();
    if ((v2 & 0x8000000000000000) == 0 && result >= v2)
    {
      if (v2)
      {
        _sypSgMaTm_9(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<Subview>, MEMORY[0x1E4F41708], MEMORY[0x1E4FBBE00]);
        int64_t v4 = swift_allocObject();
        uint64_t v5 = _swift_stdlib_malloc_size_2((const void *)v4);
        *(void *)(v4 + 16) = v2;
        *(void *)(v4 + 24) = 2 * ((uint64_t)(v5 - 32) / 96);
        outlined init with copy of SubviewCollection(a1, (uint64_t)v7);
        uint64_t v6 = specialized Sequence._copySequenceContents(initializing:)((uint64_t)v8, (_OWORD *)(v4 + 32), v2);
        outlined destroy of IndexingIterator<SubviewCollection>((uint64_t)v8, &lazy cache variable for type metadata for IndexingIterator<SubviewCollection>, (uint64_t (*)(void))lazy protocol witness table accessor for type SubviewCollection and conformance SubviewCollection, (uint64_t)&type metadata for SubviewCollection);
        if (v6 == v2) {
          return v4;
        }
        __break(1u);
      }
      return MEMORY[0x1E4FBC860];
    }
  }
  __break(1u);
  return result;
}

{
  uint64_t (*v2)(void);
  uint64_t v3;
  uint64_t (*v4)(void);
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v9;
  BOOL v11;
  uint64_t v12;
  void *v13;
  size_t v14;
  uint64_t v15;
  uint64_t v16;

  uint64_t v2 = *(uint64_t (**)(void))(*(void *)a1 + 88);
  uint64_t v3 = v2();
  int64_t v4 = *(uint64_t (**)(void))(*(void *)a1 + 96);
  uint64_t v5 = v4();
  uint64_t v6 = v2();
  uint64_t result = v4();
  if (v3 < v6 || result < v3)
  {
    __break(1u);
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  char v9 = ((uint64_t (*)(uint64_t))v2)(result);
  uint64_t result = v4();
  if (v5 < v9 || result < v5) {
    goto LABEL_18;
  }
  BOOL v11 = __OFSUB__(v5, v3);
  unint64_t v12 = v5 - v3;
  if (v11)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  if (!v12) {
    return MEMORY[0x1E4FBC860];
  }
  if (v12 <= 0)
  {
    uint64_t v13 = (void *)MEMORY[0x1E4FBC860];
  }
  else
  {
    _sypSgMaTm_9(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<TableColumnID>, (uint64_t)&type metadata for TableColumnID, MEMORY[0x1E4FBBE00]);
    uint64_t v13 = (void *)swift_allocObject();
    unint64_t v14 = _swift_stdlib_malloc_size_2(v13);
    v13[2] = v12;
    void v13[3] = 2 * ((uint64_t)(v14 - 32) / 40);
  }
  swift_retain();
  uint64_t v15 = specialized Sequence._copySequenceContents(initializing:)(&v16, (uint64_t)(v13 + 4), v12);
  uint64_t result = swift_release();
  if (v15 == v12) {
    return (uint64_t)v13;
  }
LABEL_20:
  __break(1u);
  return result;
}

{
  uint64_t (*v2)(void);
  uint64_t v3;
  uint64_t (*v4)(void);
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v9;
  BOOL v11;
  uint64_t v12;
  void *v13;
  size_t v14;
  uint64_t v15;
  uint64_t v16;

  uint64_t v2 = *(uint64_t (**)(void))(*(void *)a1 + 88);
  uint64_t v3 = v2();
  int64_t v4 = *(uint64_t (**)(void))(*(void *)a1 + 96);
  uint64_t v5 = v4();
  uint64_t v6 = v2();
  uint64_t result = v4();
  if (v3 < v6 || result < v3)
  {
    __break(1u);
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  char v9 = ((uint64_t (*)(uint64_t))v2)(result);
  uint64_t result = v4();
  if (v5 < v9 || result < v5) {
    goto LABEL_18;
  }
  BOOL v11 = __OFSUB__(v5, v3);
  unint64_t v12 = v5 - v3;
  if (v11)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  if (!v12) {
    return MEMORY[0x1E4FBC860];
  }
  if (v12 <= 0)
  {
    uint64_t v13 = (void *)MEMORY[0x1E4FBC860];
  }
  else
  {
    _sypSgMaTm_9(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<TableRowID>, (uint64_t)&type metadata for TableRowID, MEMORY[0x1E4FBBE00]);
    uint64_t v13 = (void *)swift_allocObject();
    unint64_t v14 = _swift_stdlib_malloc_size_2(v13);
    v13[2] = v12;
    void v13[3] = 2 * ((uint64_t)(v14 - 32) / 48);
  }
  swift_retain();
  uint64_t v15 = specialized Sequence._copySequenceContents(initializing:)(&v16, (uint64_t)(v13 + 4), v12);
  uint64_t result = swift_release();
  if (v15 == v12) {
    return (uint64_t)v13;
  }
LABEL_20:
  __break(1u);
  return result;
}

{
  uint64_t v1;
  void *v3;
  size_t v4;
  uint64_t v5;
  uint64_t result;
  unsigned char v7[240];
  void v8[33];

  uint64_t v1 = *(void *)(a1 + 232);
  if (!v1) {
    return MEMORY[0x1E4FBC860];
  }
  if (v1 <= 0)
  {
    uint64_t v3 = (void *)MEMORY[0x1E4FBC860];
  }
  else
  {
    _sypSgMaTm_9(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<TableRowID>, (uint64_t)&type metadata for TableRowID, MEMORY[0x1E4FBBE00]);
    uint64_t v3 = (void *)swift_allocObject();
    int64_t v4 = _swift_stdlib_malloc_size_2(v3);
    v3[2] = v1;
    v3[3] = 2 * ((uint64_t)(v4 - 32) / 48);
  }
  outlined init with copy of _ArchivedViewStates(a1, (uint64_t)v7, (uint64_t (*)(void))type metadata accessor for CountingIndexCollection<ShadowRowCollection<TableDataSourceAdaptor>>);
  uint64_t v5 = specialized Sequence._copySequenceContents(initializing:)(v8, (uint64_t)(v3 + 4), v1);
  uint64_t result = outlined destroy of DefaultIndices<CountingIndexCollection<ShadowRowCollection<TableDataSourceAdaptor>>>((uint64_t)v8, &lazy cache variable for type metadata for IndexingIterator<CountingIndexCollection<ShadowRowCollection<TableDataSourceAdaptor>>>, MEMORY[0x1E4FBBC18]);
  if (v5 == v1) {
    return (uint64_t)v3;
  }
  __break(1u);
  return result;
}

{
  uint64_t v1;
  void *v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  unsigned char v8[200];
  _OWORD v9[14];

  uint64_t v1 = *(void *)(a1 + 192);
  if (!v1) {
    return MEMORY[0x1E4FBC860];
  }
  if (v1 <= 0)
  {
    uint64_t v3 = (void *)MEMORY[0x1E4FBC860];
  }
  else
  {
    _sypSgMaTm_9(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<Int>, MEMORY[0x1E4FBB550], MEMORY[0x1E4FBBE00]);
    uint64_t v3 = (void *)swift_allocObject();
    int64_t v4 = _swift_stdlib_malloc_size_2(v3);
    uint64_t v5 = v4 - 32;
    if (v4 < 32) {
      uint64_t v5 = v4 - 25;
    }
    v3[2] = v1;
    v3[3] = 2 * (v5 >> 3);
  }
  outlined init with copy of _ArchivedViewStates(a1, (uint64_t)v8, (uint64_t (*)(void))type metadata accessor for CountingIndexCollection<ShadowSectionCollection<TableDataSourceAdaptor>>);
  uint64_t v6 = specialized Sequence._copySequenceContents(initializing:)(v9, (uint64_t)(v3 + 4), v1);
  uint64_t result = outlined destroy of IndexingIterator<_ArchivedViewStates>((uint64_t)v9, (uint64_t (*)(void))type metadata accessor for IndexingIterator<CountingIndexCollection<ShadowSectionCollection<TableDataSourceAdaptor>>>);
  if (v6 == v1) {
    return (uint64_t)v3;
  }
  __break(1u);
  return result;
}

void *specialized _copyCollectionToContiguousArray<A>(_:)(unint64_t a1)
{
  return specialized _copyCollectionToContiguousArray<A>(_:)(a1, MEMORY[0x1E4FBBA40]);
}

{
  return specialized _copyCollectionToContiguousArray<A>(_:)(a1, (void (*)(void *, uint64_t, unint64_t))specialized Array._copyContents(initializing:));
}

{
  return specialized _copyCollectionToContiguousArray<A>(_:)(a1, (void (*)(void *, uint64_t, unint64_t))specialized Array._copyContents(initializing:));
}

{
  return specialized _copyCollectionToContiguousArray<A>(_:)(a1, (void (*)(void *, uint64_t, unint64_t))specialized Array._copyContents(initializing:));
}

{
  return specialized _copyCollectionToContiguousArray<A>(_:)(a1, (void (*)(void *, uint64_t, unint64_t))specialized Array._copyContents(initializing:));
}

{
  return specialized _copyCollectionToContiguousArray<A>(_:)(a1, (void (*)(void *, uint64_t, unint64_t))specialized Array._copyContents(initializing:));
}

{
  return specialized _copyCollectionToContiguousArray<A>(_:)(a1, (void (*)(void *, uint64_t, unint64_t))specialized Array._copyContents(initializing:));
}

size_t specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t a1, char a2)
{
  int v3 = a2 & 1;
  int64_t v4 = specialized Collection.underestimatedCount.getter(a1, a2 & 1);
  if (!v4) {
    return MEMORY[0x1E4FBC860];
  }
  unint64_t v5 = v4;
  if (v4 <= 0)
  {
    char v9 = (void *)MEMORY[0x1E4FBC860];
LABEL_11:
    uint64_t v12 = *(void *)(type metadata accessor for PlatformItemList.Item() - 8);
    uint64_t v13 = (uint64_t)v9 + ((*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80));
    outlined copy of PlatformItemCollection.Storage(a1, v3);
    specialized Sequence._copySequenceContents(initializing:)((uint64_t)&v16, v13, v5, a1, v3);
    uint64_t v15 = v14;
    size_t result = outlined consume of PlatformItemCollection.Storage(v16, v17);
    if (v15 == v5) {
      return (size_t)v9;
    }
    __break(1u);
    goto LABEL_14;
  }
  _s10Foundation14DateComponentsVSgMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<PlatformItemList.Item>, (uint64_t (*)(uint64_t))type metadata accessor for PlatformItemList.Item, MEMORY[0x1E4FBBE00]);
  uint64_t v6 = *(void *)(type metadata accessor for PlatformItemList.Item() - 8);
  uint64_t v7 = *(void *)(v6 + 72);
  unint64_t v8 = (*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  char v9 = (void *)swift_allocObject();
  size_t result = _swift_stdlib_malloc_size_2(v9);
  if (v7)
  {
    if (result - v8 == 0x8000000000000000 && v7 == -1) {
      goto LABEL_15;
    }
    v9[2] = v5;
    void v9[3] = 2 * ((uint64_t)(result - v8) / v7);
    goto LABEL_11;
  }
LABEL_14:
  __break(1u);
LABEL_15:
  __break(1u);
  return result;
}

size_t specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t a1)
{
  outlined init with copy of TableColumnCollection.Backing(a1, (uint64_t)v20);
  if (v21)
  {
    uint64_t v2 = *(void *)(*(void *)&v20[0] + 16);
    swift_bridgeObjectRelease();
  }
  else
  {
    outlined init with take of OptionalBinaryInteger(v20, (uint64_t)v17);
    uint64_t v3 = v18;
    uint64_t v4 = v19;
    __swift_project_boxed_opaque_existential_1(v17, v18);
    uint64_t v2 = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8))(v3, v4);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v17);
  }
  uint64_t v5 = specialized RandomAccessCollection<>.distance(from:to:)(0, v2);
  if (!v5) {
    return MEMORY[0x1E4FBC860];
  }
  uint64_t v6 = v5;
  if (v5 <= 0)
  {
    uint64_t v10 = (void *)MEMORY[0x1E4FBC860];
LABEL_14:
    uint64_t v13 = *(void *)(type metadata accessor for TableColumnCollection.Entry(0) - 8);
    uint64_t v14 = (uint64_t)v10 + ((*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80));
    outlined init with copy of TableColumnCollection(a1, (uint64_t)v17);
    specialized Sequence._copySequenceContents(initializing:)((uint64_t)v20, v14, v6);
    uint64_t v16 = v15;
    size_t result = outlined destroy of IndexingIterator<SubviewCollection>((uint64_t)v20, &lazy cache variable for type metadata for IndexingIterator<TableColumnCollection>, (uint64_t (*)(void))lazy protocol witness table accessor for type TableColumnCollection and conformance TableColumnCollection, (uint64_t)&type metadata for TableColumnCollection);
    if (v16 == v6) {
      return (size_t)v10;
    }
    __break(1u);
    goto LABEL_17;
  }
  _s10Foundation14DateComponentsVSgMaTm_0(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<TableColumnCollection.Entry>, type metadata accessor for TableColumnCollection.Entry, MEMORY[0x1E4FBBE00]);
  uint64_t v7 = *(void *)(type metadata accessor for TableColumnCollection.Entry(0) - 8);
  uint64_t v8 = *(void *)(v7 + 72);
  unint64_t v9 = (*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  uint64_t v10 = (void *)swift_allocObject();
  size_t result = _swift_stdlib_malloc_size_2(v10);
  if (v8)
  {
    if (result - v9 == 0x8000000000000000 && v8 == -1) {
      goto LABEL_18;
    }
    v10[2] = v6;
    v10[3] = 2 * ((uint64_t)(result - v9) / v8);
    goto LABEL_14;
  }
LABEL_17:
  __break(1u);
LABEL_18:
  __break(1u);
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  void *v13;
  size_t result;
  uint64_t v16;
  uint64_t v17;

  uint64_t v2 = type metadata accessor for _ArchivedViewStates(0);
  uint64_t v3 = v2 - 8;
  MEMORY[0x1F4188790](v2);
  uint64_t v5 = (char *)&v17 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for IndexingIterator<_ArchivedViewStates>(0);
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v9 = *(void *)(*(void *)(a1 + *(int *)(v3 + 28) + 8) + 16);
  if (!v9) {
    return MEMORY[0x1E4FBC860];
  }
  _s10Foundation14DateComponentsVSgMaTm_0(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<_ArchivedView>, type metadata accessor for _ArchivedView, MEMORY[0x1E4FBBE00]);
  uint64_t v10 = *(void *)(type metadata accessor for _ArchivedView(0) - 8);
  BOOL v11 = *(void *)(v10 + 72);
  uint64_t v12 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  uint64_t v13 = (void *)swift_allocObject();
  size_t result = _swift_stdlib_malloc_size_2(v13);
  if (v11)
  {
    if (result - v12 != 0x8000000000000000 || v11 != -1)
    {
      v13[2] = v9;
      void v13[3] = 2 * ((uint64_t)(result - v12) / v11);
      outlined init with copy of _ArchivedViewStates(a1, (uint64_t)v5, type metadata accessor for _ArchivedViewStates);
      uint64_t v16 = specialized Sequence._copySequenceContents(initializing:)((uint64_t)v8, (uint64_t)v13 + v12, v9);
      outlined destroy of IndexingIterator<_ArchivedViewStates>((uint64_t)v8, (uint64_t (*)(void))type metadata accessor for IndexingIterator<_ArchivedViewStates>);
      if (v16 == v9) {
        return (size_t)v13;
      }
      __break(1u);
      return MEMORY[0x1E4FBC860];
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  void *v6;
  size_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return MEMORY[0x1E4FBC860];
  }
  _s10Foundation14DateComponentsVSgMaTm_0(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<DateComponents>, MEMORY[0x1E4F26F90], MEMORY[0x1E4FBBE00]);
  uint64_t v3 = *(void *)(type metadata accessor for DateComponents() - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (void *)swift_allocObject();
  size_t result = _swift_stdlib_malloc_size_2(v6);
  if (v4)
  {
    if (result - v5 != 0x8000000000000000 || v4 != -1)
    {
      v6[2] = v1;
      v6[3] = 2 * ((uint64_t)(result - v5) / v4);
      swift_bridgeObjectRetain();
      specialized Sequence._copySequenceContents(initializing:)(&v11, (char *)v6 + v5, v1, a1);
      uint64_t v10 = v9;
      outlined consume of Set<UIPress>.Iterator._Variant();
      if (v10 == v1) {
        return (size_t)v6;
      }
      __break(1u);
      return MEMORY[0x1E4FBC860];
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t specialized _copyCollectionToContiguousArray<A>(_:)(void *a1, char a2, uint64_t a3, uint64_t a4)
{
  if (!a4) {
    return MEMORY[0x1E4FBC860];
  }
  if (a4 <= 0)
  {
    uint64_t v8 = (void *)MEMORY[0x1E4FBC860];
  }
  else
  {
    _sypSgMaTm_9(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<TableRowID>, (uint64_t)&type metadata for TableRowID, MEMORY[0x1E4FBBE00]);
    uint64_t v8 = (void *)swift_allocObject();
    size_t v9 = _swift_stdlib_malloc_size_2(v8);
    v8[2] = a4;
    v8[3] = 2 * ((uint64_t)(v9 - 32) / 48);
  }
  char v10 = a2 & 1;
  outlined copy of ResolvedTableRowIDs.Storage((uint64_t)a1, v10);
  uint64_t v11 = specialized Sequence._copySequenceContents(initializing:)((uint64_t)&v13, (uint64_t)(v8 + 4), a4, a1, v10, a3, a4);
  uint64_t result = outlined consume of Environment<[SceneID : KeyboardShortcut]>.Content(v13, v14);
  if (v11 == a4) {
    return (uint64_t)v8;
  }
  __break(1u);
  return result;
}

{
  void *v8;
  size_t v9;
  char v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  char v14;

  if (!a4) {
    return MEMORY[0x1E4FBC860];
  }
  if (a4 <= 0)
  {
    uint64_t v8 = (void *)MEMORY[0x1E4FBC860];
  }
  else
  {
    _sypSgMaTm_9(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<TableRowID>, (uint64_t)&type metadata for TableRowID, MEMORY[0x1E4FBBE00]);
    uint64_t v8 = (void *)swift_allocObject();
    size_t v9 = _swift_stdlib_malloc_size_2(v8);
    v8[2] = a4;
    v8[3] = 2 * ((uint64_t)(v9 - 32) / 48);
  }
  char v10 = a2 & 1;
  outlined copy of ResolvedTableRowIDs.Storage((uint64_t)a1, v10);
  uint64_t v11 = specialized Sequence._copySequenceContents(initializing:)((uint64_t)&v13, (uint64_t)(v8 + 4), a4, a1, v10, a3, a4);
  uint64_t result = outlined consume of Environment<[SceneID : KeyboardShortcut]>.Content(v13, v14);
  if (v11 == a4) {
    return (uint64_t)v8;
  }
  __break(1u);
  return result;
}

uint64_t specialized _copyCollectionToContiguousArray<A>(_:)(unint64_t a1)
{
  if (!(a1 >> 62))
  {
    uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    goto LABEL_3;
  }
  swift_bridgeObjectRetain();
  uint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
  uint64_t result = swift_bridgeObjectRelease();
  if ((v2 & 0x8000000000000000) == 0)
  {
LABEL_3:
    if (v2)
    {
      _s10Foundation14DateComponentsVSgMaTm_0(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<Decodable & Encodable & Hashable>, (uint64_t (*)(uint64_t))type metadata accessor for Decodable & Encodable & Hashable, MEMORY[0x1E4FBBE00]);
      uint64_t v3 = (void *)swift_allocObject();
      size_t v4 = _swift_stdlib_malloc_size_2(v3);
      v3[2] = v2;
      v3[3] = 2 * ((uint64_t)(v4 - 32) / 56);
      swift_bridgeObjectRetain();
      uint64_t v5 = specialized Sequence._copySequenceContents(initializing:)(&v7, (uint64_t)(v3 + 4), v2, a1);
      swift_bridgeObjectRelease();
      if (v5 == v2) {
        return (uint64_t)v3;
      }
      __break(1u);
    }
    return MEMORY[0x1E4FBC860];
  }
  __break(1u);
  return result;
}

{
  uint64_t v2;
  void *v3;
  size_t v4;
  uint64_t v5;
  uint64_t result;
  unint64_t v7;

  if (!(a1 >> 62))
  {
    uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    goto LABEL_3;
  }
  swift_bridgeObjectRetain();
  uint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
  uint64_t result = swift_bridgeObjectRelease();
  if ((v2 & 0x8000000000000000) == 0)
  {
LABEL_3:
    if (v2)
    {
      _ss23_ContiguousArrayStorageCys7CVarArg_pGMaTm_1(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<Hashable>, (unint64_t *)&lazy cache variable for type metadata for Hashable, MEMORY[0x1E4FBAF08], MEMORY[0x1E4FBBE00]);
      uint64_t v3 = (void *)swift_allocObject();
      size_t v4 = _swift_stdlib_malloc_size_2(v3);
      v3[2] = v2;
      v3[3] = 2 * ((uint64_t)(v4 - 32) / 40);
      swift_bridgeObjectRetain();
      uint64_t v5 = specialized Sequence._copySequenceContents(initializing:)(&v7, (uint64_t)(v3 + 4), v2, a1);
      swift_bridgeObjectRelease();
      if (v5 == v2) {
        return (uint64_t)v3;
      }
      __break(1u);
    }
    return MEMORY[0x1E4FBC860];
  }
  __break(1u);
  return result;
}

void *specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a3 + 16);
  if (!v3) {
    return (void *)MEMORY[0x1E4FBC860];
  }
  _sypSgMaTm_9(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<PlatformItem>, (uint64_t)&type metadata for PlatformItem, MEMORY[0x1E4FBBE00]);
  unint64_t v7 = (void *)swift_allocObject();
  size_t v8 = _swift_stdlib_malloc_size_2(v7);
  uint64_t v7[2] = v3;
  v7[3] = 2 * ((uint64_t)(v8 - 32) / 336);
  uint64_t v9 = specialized Sequence._copySequenceContents(initializing:)((uint64_t)&v11, (uint64_t)(v7 + 4), v3, a1, a2, a3);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  if (v9 != v3)
  {
    __break(1u);
    return (void *)MEMORY[0x1E4FBC860];
  }
  return v7;
}

void *specialized _copyCollectionToContiguousArray<A>(_:)(unint64_t a1, void (*a2)(void *, uint64_t, unint64_t))
{
  if (a1 >> 62) {
    goto LABEL_10;
  }
  uint64_t v4 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (!v4) {
    return (void *)MEMORY[0x1E4FBC860];
  }
  while (1)
  {
    if (v4 <= 0)
    {
      uint64_t v5 = (void *)MEMORY[0x1E4FBC860];
    }
    else
    {
      _sypSgMaTm_9(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>, MEMORY[0x1E4FBC838] + 8, MEMORY[0x1E4FBBE00]);
      uint64_t v5 = (void *)swift_allocObject();
      int64_t v6 = _swift_stdlib_malloc_size_2(v5);
      uint64_t v7 = v6 - 32;
      if (v6 < 32) {
        uint64_t v7 = v6 - 25;
      }
      v5[2] = v4;
      v5[3] = (2 * (v7 >> 3)) | 1;
    }
    swift_bridgeObjectRetain();
    a2(v5 + 4, v4, a1);
    a2 = v8;
    swift_bridgeObjectRelease();
    if (a2 == (void (*)(void *, uint64_t, unint64_t))v4) {
      break;
    }
    __break(1u);
LABEL_10:
    swift_bridgeObjectRetain();
    uint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v4) {
      return (void *)MEMORY[0x1E4FBC860];
    }
  }
  return v5;
}

unint64_t specialized _copyCollectionToContiguousArray<A>(_:)(unint64_t result, unint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = *(void *)(a3 + 16);
  if (v4 >= result && v4 >= a2)
  {
    uint64_t v7 = result;
    uint64_t v8 = a2 - result;
    if (a2 == result) {
      return MEMORY[0x1E4FBC860];
    }
    if (v8 <= 0)
    {
      uint64_t v9 = (void *)MEMORY[0x1E4FBC860];
    }
    else
    {
      _sypSgMaTm_9(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<NavigationViewDestinationView>, (uint64_t)&type metadata for NavigationViewDestinationView, MEMORY[0x1E4FBBE00]);
      uint64_t v9 = (void *)swift_allocObject();
      size_t v12 = _swift_stdlib_malloc_size_2(v9);
      v9[2] = v8;
      void v9[3] = 2 * ((uint64_t)(v12 - 32) / 56);
    }
    uint64_t v13 = specialized Slice._copyContents(initializing:)(&v14, (uint64_t)(v9 + 4), v8, v7, a2, a3, a4);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease();
    if (v13 != (void *)v8) {
      goto LABEL_13;
    }
    return (unint64_t)v9;
  }
  __break(1u);
LABEL_13:
  __break(1u);
  return result;
}

uint64_t specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t result, uint64_t (*a2)(uint64_t *, void *), uint64_t a3)
{
  uint64_t v3 = *(void *)(result + 16);
  v12[0] = 0;
  if (v3)
  {
    uint64_t v6 = result;
    uint64_t v7 = 0;
    while (1)
    {
      uint64_t v8 = v7 + 1;
      if (__OFADD__(v7, 1)) {
        break;
      }
      uint64_t result = (uint64_t)specialized CoalescingAdjacentDuplicates.formIndex(after:)(v12, v6, a2);
      ++v7;
      if (v12[0] == v3)
      {
        if (!v8) {
          return MEMORY[0x1E4FBC860];
        }
        if (v8 <= 0)
        {
          uint64_t v9 = (uint64_t *)MEMORY[0x1E4FBC860];
        }
        else
        {
          type metadata accessor for _ContiguousArrayStorage<SliderMark<Double>>();
          uint64_t v9 = (uint64_t *)swift_allocObject();
          size_t v10 = _swift_stdlib_malloc_size_2(v9);
          v9[2] = v8;
          void v9[3] = 2 * ((uint64_t)(v10 - 32) / 40);
        }
        swift_bridgeObjectRetain();
        swift_retain();
        uint64_t v11 = specialized Sequence._copySequenceContents(initializing:)(v12, v9 + 4, v8, v6, a2, a3);
        swift_bridgeObjectRelease();
        uint64_t result = swift_release();
        if (v11 == (void *)v8) {
          return (uint64_t)v9;
        }
LABEL_13:
        __break(1u);
        return result;
      }
    }
    __break(1u);
    goto LABEL_13;
  }
  return MEMORY[0x1E4FBC860];
}

void specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v4 = a4 >> 1;
  uint64_t v5 = (a4 >> 1) - a3;
  if (__OFSUB__(a4 >> 1, a3))
  {
LABEL_9:
    __break(1u);
    return;
  }
  if (v5)
  {
    if (v5 <= 0)
    {
      if (v4 != a3) {
        goto LABEL_5;
      }
    }
    else
    {
      _sypSgMaTm_9(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<DocumentLaunchScreenAction>, (uint64_t)&type metadata for DocumentLaunchScreenAction, MEMORY[0x1E4FBBE00]);
      uint64_t v7 = (void *)swift_allocObject();
      size_t v8 = _swift_stdlib_malloc_size_2(v7);
      uint64_t v7[2] = v5;
      v7[3] = 2 * ((uint64_t)(v8 - 32) / 48);
      if (v4 != a3)
      {
LABEL_5:
        swift_arrayInitWithCopy();
        return;
      }
    }
    __break(1u);
    goto LABEL_9;
  }
}

{
  unint64_t v4;
  uint64_t v5;
  void *v7;
  int64_t v8;
  uint64_t v9;

  unint64_t v4 = a4 >> 1;
  uint64_t v5 = (a4 >> 1) - a3;
  if (__OFSUB__(a4 >> 1, a3))
  {
LABEL_11:
    __break(1u);
    return;
  }
  if (v5)
  {
    if (v5 <= 0)
    {
      if (v4 != a3)
      {
LABEL_7:
        type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIMenuElement);
        swift_arrayInitWithCopy();
        return;
      }
    }
    else
    {
      _sypSgMaTm_9(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>, MEMORY[0x1E4FBC838] + 8, MEMORY[0x1E4FBBE00]);
      uint64_t v7 = (void *)swift_allocObject();
      size_t v8 = _swift_stdlib_malloc_size_2(v7);
      uint64_t v9 = v8 - 32;
      if (v8 < 32) {
        uint64_t v9 = v8 - 25;
      }
      uint64_t v7[2] = v5;
      v7[3] = (2 * (v9 >> 3)) | 1;
      if (v4 != a3) {
        goto LABEL_7;
      }
    }
    __break(1u);
    goto LABEL_11;
  }
}

void *specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t a1, void (*a2)(uint64_t *__return_ptr, unsigned char *), uint64_t a3)
{
  unint64_t v3 = *(void *)(a1 + 16);
  if (!v3) {
    return (void *)MEMORY[0x1E4FBC860];
  }
  _sypSgMaTm_9(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<Int>, MEMORY[0x1E4FBB550], MEMORY[0x1E4FBBE00]);
  uint64_t v7 = (void *)swift_allocObject();
  int64_t v8 = _swift_stdlib_malloc_size_2(v7);
  uint64_t v9 = v8 - 32;
  if (v8 < 32) {
    uint64_t v9 = v8 - 25;
  }
  uint64_t v7[2] = v3;
  v7[3] = 2 * (v9 >> 3);
  swift_bridgeObjectRetain();
  swift_retain();
  size_t v10 = specialized Sequence._copySequenceContents(initializing:)(&v12, (uint64_t)(v7 + 4), v3, a1, a2, a3);
  swift_release();
  swift_bridgeObjectRelease();
  if (v10 != (void *)v3)
  {
    __break(1u);
    return (void *)MEMORY[0x1E4FBC860];
  }
  return v7;
}

void specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(uint64_t *a1, char a2, char a3, char a4)
{
  void (*v279)(long long *__return_ptr, uint64_t, uint64_t);
  void (*v280)(long long *__return_ptr, uint64_t, uint64_t);
  long long v281;
  char v282;
  char *v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  char *v287;
  char *v288;
  char v289;
  char *v290;
  long long v291;
  long long v292;
  uint64_t v293;
  long long v294;
  long long v295;
  uint64_t v296;
  char v297;
  long long v298;
  long long v299;
  uint64_t v300;
  void v301[5];
  unsigned char v302[40];
  void v303[4];
  char v304;
  void v305[5];
  void v306[4];
  char v307;
  void v308[5];
  unsigned char v309[40];
  void v310[4];
  char v311;
  void v312[5];
  void v313[4];
  char v314;
  unsigned char v315[40];
  unsigned char v316[40];
  unsigned char v317[40];
  unsigned char v318[40];
  unsigned char v319[40];
  unsigned char v320[40];
  CGFloat v321[4];
  char v322;
  void v323[4];
  char v324;
  void v325[4];
  char v326;
  void v327[4];
  char v328;
  CGFloat v329[4];
  char v330;
  void v331[4];
  char v332;
  unsigned char v333[40];
  unsigned char v334[40];
  _OWORD v335[2];
  unsigned __int8 v336;
  long long v337;
  long long v338;
  unsigned __int8 v339;
  unsigned char v340[40];
  unsigned char v341[40];
  _OWORD v342[2];
  unsigned __int8 v343;
  long long v344;
  long long v345;
  unsigned __int8 v346;
  uint64_t v347;
  CGRect v348;
  CGRect v349;
  CGRect v350;
  CGRect v351;

  uint64_t v5 = a1;
  Swift::Int v6 = a1[1];
  Swift::Int v7 = _minimumMergeRunLength(_:)(v6);
  if (v7 >= v6)
  {
    if ((v6 & 0x8000000000000000) == 0)
    {
      if (v6) {
        specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(0, v6, 1, v5, a2 & 1, a3, a4);
      }
      return;
    }
    goto LABEL_347;
  }
  Swift::Int v258 = v7;
  if (v6 >= 0) {
    uint64_t v8 = v6;
  }
  else {
    uint64_t v8 = v6 + 1;
  }
  if (v6 < -1) {
    goto LABEL_366;
  }
  Swift::Int v261 = v6;
  if (v6 < 2)
  {
    uint64_t v11 = (char *)MEMORY[0x1E4FBC860];
    v300 = MEMORY[0x1E4FBC860];
    __dst = (uint64_t *)((MEMORY[0x1E4FBC860] & 0xFFFFFFFFFFFFFF8) + 32);
    if (v6 != 1)
    {
      unint64_t v17 = *(void *)(MEMORY[0x1E4FBC860] + 16);
      if (v17 < 2) {
        goto LABEL_318;
      }
      goto LABEL_302;
    }
  }
  else
  {
    uint64_t v9 = v8 >> 1;
    type metadata accessor for AccessibilityNode();
    uint64_t v10 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x10) = v9;
    __dst = (uint64_t *)((v10 & 0xFFFFFFFFFFFFFF8) + 32);
    v300 = v10;
  }
  Swift::Int v12 = 0;
  uint64_t v13 = *v5;
  v255 = v5;
  uint64_t v256 = *v5 - 8;
  uint64_t v11 = (char *)MEMORY[0x1E4FBC860];
  v347 = MEMORY[0x1E4FBC840] + 8;
  Swift::Int v14 = v6;
  uint64_t v276 = v13;
LABEL_13:
  Swift::Int v15 = v12 + 1;
  v260 = v11;
  Swift::Int v267 = v12;
  if (v12 + 1 >= v14)
  {
    Swift::Int v21 = v12 + 1;
    goto LABEL_124;
  }
  *(void *)&v294 = *(void *)(v13 + 8 * v15);
  *(void *)&v291 = *(void *)(v13 + 8 * v12);
  uint64_t v16 = (void *)v291;
  unint64_t v17 = (unint64_t)(id)v294;
  uint64_t v18 = v16;
  v289 = closure #1 in Sequence<>.sorted(with:explicitPriorityOnly:parentVisibility:)((uint64_t *)&v294, (uint64_t *)&v291, a2 & 1, a3, a4);
  if (v4)
  {
LABEL_322:
    swift_bridgeObjectRelease();

    goto LABEL_319;
  }

  Swift::Int v19 = v12 + 2;
  uint64_t v13 = v276;
  if (v19 < v261)
  {
    while (1)
    {
      while (1)
      {
        char v31 = *(void **)(v13 + 8 * v15);
        long long v32 = (char *)*(id *)(v13 + 8 * v19);
        unint64_t v33 = v31;
        double v34 = COERCE_DOUBLE(AccessibilityNode.sortPriority.getter());
        if (v35) {
          double v36 = 0.0;
        }
        else {
          double v36 = v34;
        }
        double v37 = COERCE_DOUBLE(AccessibilityNode.sortPriority.getter());
        if (v38)
        {
          if (v36 != 0.0)
          {
            double v27 = 0.0;
LABEL_26:

            char v28 = v27 < v36;
            Swift::Int v29 = v261;
            uint64_t v13 = v276;
            goto LABEL_27;
          }
        }
        else
        {
          double v27 = v37;
          if (v36 != v37) {
            goto LABEL_26;
          }
        }
        if (a2)
        {

          if (v289) {
            goto LABEL_296;
          }
LABEL_38:
          char v20 = 0;
          Swift::Int v29 = v261;
          uint64_t v13 = v276;
          goto LABEL_28;
        }
        v283 = v32;
        v287 = v33;
        Swift::Int v272 = v19;
        long long v39 = &v32[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_attachmentsStorage];
        swift_beginAccess();
        uint64_t v40 = *(void *)v39;
        uint64_t v41 = *(void *)(*(void *)v39 + 16);
        if (v41)
        {
          swift_bridgeObjectRetain();
          uint64_t v42 = v40 + 40 * v41;
          while (v41 <= *(void *)(v40 + 16))
          {
            uint64_t v45 = *(void *)(v42 + 8);
            if (v45)
            {
              id v46 = *(id *)v42;
              if ((*(unsigned char *)(v45 + 17) & 1) == 0
                || (*(unsigned char *)(v45 + 17) = 0, (*(unsigned char *)(v45 + 80) & 1) != 0)
                || (uint64_t v47 = *(void *)(v45 + 24), v47 == 1))
              {
                id v43 = v46;
                swift_retain_n();
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
              }
              else
              {
                uint64_t v48 = *(void *)(v45 + 56);
                uint64_t v277 = *(void *)(v45 + 48);
                uint64_t v49 = *(void *)(v45 + 32);
                uint64_t v269 = *(void *)(v45 + 40);
                v298 = 0uLL;
                v299 = *(_OWORD *)(v45 + 64);
                v296 = 0;
                v294 = 0u;
                v295 = 0u;
                v297 = 2;
                *(void *)&v291 = v47;
                *((void *)&v291 + 1) = v49;
                *(void *)&v292 = v269;
                *((void *)&v292 + 1) = v277;
                v293 = v48;
                id v43 = v46;
                swift_retain_n();
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                outlined copy of Transaction?(v47);
                CGRect.convert(to:transform:)();
                outlined destroy of CoordinateSpace((uint64_t)&v294);
                outlined consume of Transaction?(v47);
                long long v50 = v299;
                *(_OWORD *)(v45 + 88) = v298;
                *(_OWORD *)(v45 + 104) = v50;
                *(unsigned char *)(v45 + 120) = 0;
              }
              char v44 = *(unsigned char *)(v45 + 120);
              swift_bridgeObjectRelease();

              swift_bridgeObjectRelease();
              swift_release_n();
              if ((v44 & 1) == 0)
              {
                if (v41 <= *(void *)(v40 + 16))
                {
                  uint64_t v73 = *(void *)(v42 + 8);
                  if (!v73) {
                    goto LABEL_364;
                  }
                  int v74 = *(unsigned __int8 *)(v73 + 17);
                  id v75 = *(id *)v42;
                  swift_retain_n();
                  swift_bridgeObjectRetain();
                  if (v74 == 1) {
                    AccessibilityGeometryStorage.updateFrame()();
                  }
                  CGFloat x = *(double *)(v73 + 88);
                  CGFloat y = *(double *)(v73 + 96);
                  CGFloat width = *(double *)(v73 + 104);
                  CGFloat height = *(double *)(v73 + 112);
                  char v76 = *(unsigned char *)(v73 + 120);

                  swift_bridgeObjectRelease();
                  swift_release_n();
                  if (v76) {
                    goto LABEL_364;
                  }
                  char v270 = 0;
                  goto LABEL_52;
                }
LABEL_354:
                __break(1u);
LABEL_355:
                __break(1u);
LABEL_356:
                __break(1u);
LABEL_357:
                __break(1u);
LABEL_358:
                __break(1u);
LABEL_359:
                __break(1u);
LABEL_360:
                __break(1u);
LABEL_361:
                __break(1u);
                goto LABEL_362;
              }
            }
            v42 -= 40;
            if (!--v41) {
              goto LABEL_51;
            }
          }
          __break(1u);
LABEL_324:
          __break(1u);
LABEL_325:
          __break(1u);
LABEL_326:
          __break(1u);
LABEL_327:
          __break(1u);
LABEL_328:
          __break(1u);
LABEL_329:
          __break(1u);
LABEL_330:
          __break(1u);
LABEL_331:
          __break(1u);
LABEL_332:
          __break(1u);
LABEL_333:
          __break(1u);
LABEL_334:
          __break(1u);
LABEL_335:
          __break(1u);
LABEL_336:
          __break(1u);
LABEL_337:
          __break(1u);
LABEL_338:
          __break(1u);
LABEL_339:
          __break(1u);
LABEL_340:
          __break(1u);
LABEL_341:
          __break(1u);
LABEL_342:
          __break(1u);
LABEL_343:
          __break(1u);
LABEL_344:
          __break(1u);
LABEL_345:
          __break(1u);
LABEL_346:
          __break(1u);
LABEL_347:
          __break(1u);
LABEL_348:
          __break(1u);
          goto LABEL_349;
        }
        swift_bridgeObjectRetain();
LABEL_51:
        CGFloat x = 0.0;
        char v270 = 1;
        CGFloat y = 0.0;
        CGFloat width = 0.0;
        CGFloat height = 0.0;
LABEL_52:
        swift_bridgeObjectRelease();
        uint64_t v55 = &v287[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_attachmentsStorage];
        swift_beginAccess();
        uint64_t v56 = *(void *)v55;
        uint64_t v57 = *(void *)(*(void *)v55 + 16);
        if (v57)
        {
          swift_bridgeObjectRetain();
          uint64_t v58 = v56 + 40 * v57;
          while (1)
          {
            if (v57 > *(void *)(v56 + 16)) {
              goto LABEL_324;
            }
            uint64_t v61 = *(void *)(v58 + 8);
            if (v61)
            {
              long long v62 = *(void **)v58;
              if ((*(unsigned char *)(v61 + 17) & 1) == 0
                || (*(unsigned char *)(v61 + 17) = 0, (*(unsigned char *)(v61 + 80) & 1) != 0)
                || (uint64_t v63 = *(void *)(v61 + 24), v63 == 1))
              {
                id v59 = v62;
                swift_retain_n();
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
              }
              else
              {
                uint64_t v64 = *(void *)(v61 + 56);
                uint64_t v278 = *(void *)(v61 + 48);
                uint64_t v263 = *(void *)(v61 + 32);
                uint64_t v265 = *(void *)(v61 + 40);
                v298 = 0uLL;
                v299 = *(_OWORD *)(v61 + 64);
                v296 = 0;
                v294 = 0u;
                v295 = 0u;
                v297 = 2;
                *(void *)&v291 = v63;
                *((void *)&v291 + 1) = v263;
                *(void *)&v292 = v265;
                *((void *)&v292 + 1) = v278;
                v293 = v64;
                id v59 = v62;
                swift_retain_n();
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                outlined copy of Transaction?(v63);
                CGRect.convert(to:transform:)();
                outlined destroy of CoordinateSpace((uint64_t)&v294);
                outlined consume of Transaction?(v63);
                long long v65 = v299;
                *(_OWORD *)(v61 + 88) = v298;
                *(_OWORD *)(v61 + 104) = v65;
                *(unsigned char *)(v61 + 120) = 0;
              }
              char v60 = *(unsigned char *)(v61 + 120);
              swift_bridgeObjectRelease();

              swift_bridgeObjectRelease();
              swift_release_n();
              if ((v60 & 1) == 0) {
                break;
              }
            }
            v58 -= 40;
            if (!--v57) {
              goto LABEL_64;
            }
          }
          if (v57 > *(void *)(v56 + 16)) {
            goto LABEL_355;
          }
          uint64_t v77 = *(void *)(v58 + 8);
          Swift::Int v19 = v272;
          if (!v77) {
            goto LABEL_365;
          }
          int v78 = *(void **)v58;
          int v79 = *(unsigned __int8 *)(v77 + 17);
          id v80 = v78;
          swift_retain_n();
          swift_bridgeObjectRetain();
          if (v79 == 1) {
            AccessibilityGeometryStorage.updateFrame()();
          }
          CGFloat v67 = *(double *)(v77 + 88);
          CGFloat v68 = *(double *)(v77 + 96);
          CGFloat v69 = *(double *)(v77 + 104);
          CGFloat v70 = *(double *)(v77 + 112);
          char v81 = *(unsigned char *)(v77 + 120);

          swift_bridgeObjectRelease();
          swift_release_n();
          if (v81) {
            goto LABEL_365;
          }
          int v66 = 1;
        }
        else
        {
          swift_bridgeObjectRetain();
LABEL_64:
          int v66 = 0;
          CGFloat v67 = 0.0;
          CGFloat v68 = 0.0;
          CGFloat v69 = 0.0;
          CGFloat v70 = 0.0;
          Swift::Int v19 = v272;
        }
        swift_bridgeObjectRelease();
        int v71 = v66;
        if ((v270 & 1) == 0) {
          goto LABEL_94;
        }
        LOBYTE(v291) = a3;
        AccessibilityNode.impliedVisibility(consideringParent:with:)(1, (unsigned __int8 *)&v291, (char *)&v294);
        char v72 = v294;
        if (v294 == 2) {
          break;
        }
        AccessibilityNode.contentPath.getter((uint64_t)v302);
        outlined init with take of AnyAccessibilityAction?((uint64_t)v302, (uint64_t)v342, &lazy cache variable for type metadata for Path?, MEMORY[0x1E4F413B0]);
        if (v343 == 255)
        {
          AccessibilityNode.globalFrame.getter((uint64_t)v305);
          CGFloat x = *(double *)v305;
          CGFloat y = *(double *)&v305[1];
          CGFloat width = *(double *)&v305[2];
          CGFloat height = *(double *)&v305[3];
          outlined init with take of CGRect?((uint64_t)v305, (uint64_t)v341);
          if ((v341[32] & 1) == 0)
          {
            int v71 = 0;
LABEL_94:
            if (v66) {
              goto LABEL_108;
            }
            goto LABEL_95;
          }
          LOBYTE(v291) = v72;
          AccessibilityNode.contentFrameFromChildren(with:)((char *)&v291, (uint64_t)v306);
          if (v307) {
            goto LABEL_90;
          }
          int v71 = 0;
          CGFloat x = *(double *)v306;
          CGFloat y = *(double *)&v306[1];
          CGFloat width = *(double *)&v306[2];
          CGFloat height = *(double *)&v306[3];
          if (v66) {
            goto LABEL_108;
          }
        }
        else
        {
          v344 = v342[0];
          v345 = v342[1];
          v346 = v343;
          Path.boundingRect.getter();
          v349 = CGRectStandardize(v348);
          CGFloat x = v349.origin.x;
          CGFloat y = v349.origin.y;
          CGFloat width = v349.size.width;
          CGFloat height = v349.size.height;
          outlined release of Path?((uint64_t)v302);
          int v71 = 0;
          if (v66) {
            goto LABEL_108;
          }
        }
LABEL_95:
        LOBYTE(v291) = a3;
        AccessibilityNode.impliedVisibility(consideringParent:with:)(1, (unsigned __int8 *)&v291, (char *)&v294);
        char v82 = v294;
        if (v294 == 2)
        {
          AccessibilityNode.globalFrame.getter((uint64_t)v308);
          CGFloat v67 = *(double *)v308;
          CGFloat v68 = *(double *)&v308[1];
          CGFloat v69 = *(double *)&v308[2];
          CGFloat v70 = *(double *)&v308[3];
          outlined init with take of CGRect?((uint64_t)v308, (uint64_t)v333);
          if (v333[32])
          {
            LOBYTE(v291) = 2;
            AccessibilityNode.contentFrameFromChildren(with:)((char *)&v291, (uint64_t)v310);
            if (v311) {
              goto LABEL_103;
            }
            CGFloat v67 = *(double *)v310;
            CGFloat v68 = *(double *)&v310[1];
            CGFloat v69 = *(double *)&v310[2];
            CGFloat v70 = *(double *)&v310[3];
          }
        }
        else
        {
          AccessibilityNode.contentPath.getter((uint64_t)v309);
          outlined init with take of AnyAccessibilityAction?((uint64_t)v309, (uint64_t)v335, &lazy cache variable for type metadata for Path?, MEMORY[0x1E4F413B0]);
          if (v336 == 255)
          {
            AccessibilityNode.globalFrame.getter((uint64_t)v312);
            CGFloat v67 = *(double *)v312;
            CGFloat v68 = *(double *)&v312[1];
            CGFloat v69 = *(double *)&v312[2];
            CGFloat v70 = *(double *)&v312[3];
            outlined init with take of CGRect?((uint64_t)v312, (uint64_t)v334);
            if (v334[32])
            {
              LOBYTE(v291) = v82;
              AccessibilityNode.contentFrameFromChildren(with:)((char *)&v291, (uint64_t)v313);
              if (v314)
              {
LABEL_103:

                if (v289)
                {
LABEL_296:
                  Swift::Int v21 = v19;
                  uint64_t v13 = v276;
                  goto LABEL_18;
                }
                goto LABEL_38;
              }
              CGFloat v67 = *(double *)v313;
              CGFloat v68 = *(double *)&v313[1];
              CGFloat v69 = *(double *)&v313[2];
              CGFloat v70 = *(double *)&v313[3];
            }
          }
          else
          {
            v337 = v335[0];
            v338 = v335[1];
            v339 = v336;
            Path.boundingRect.getter();
            v351 = CGRectStandardize(v350);
            CGFloat v67 = v351.origin.x;
            CGFloat v68 = v351.origin.y;
            CGFloat v69 = v351.size.width;
            CGFloat v70 = v351.size.height;
            outlined release of Path?((uint64_t)v309);
          }
        }
LABEL_108:
        char v83 = a4;
        if (a4 == 2)
        {
          v294 = *(_OWORD *)&v283[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_environment];
          EnvironmentValues.layoutDirection.getter();
          char v84 = v291;
          v294 = *(_OWORD *)&v287[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_environment];
          EnvironmentValues.layoutDirection.getter();
          if ((v84 ^ v291)) {
            char v83 = 2;
          }
          else {
            char v83 = v84;
          }
        }
        LOBYTE(v294) = v83;
        char v85 = CGRect.compare(to:layoutDirection:)((unsigned __int8 *)&v294, v67, v68, v69, v70, x, y, width, height);
        if (v85 != 2)
        {
          char v90 = v85;

LABEL_120:
          char v28 = v90 & 1;
          Swift::Int v29 = v261;
          uint64_t v13 = v276;
          Swift::Int v19 = v272;
LABEL_27:
          char v30 = v289 ^ v28;
          char v20 = v289;
          if (v30) {
            goto LABEL_16;
          }
          goto LABEL_28;
        }
        if (!v71) {
          goto LABEL_116;
        }
        LOBYTE(v294) = a3;
        AccessibilityNode.contentFrame(with:)(&v294, (uint64_t)v315);
        outlined init with take of CGRect?((uint64_t)v315, (uint64_t)v331);
        if ((v332 & 1) != 0
          || (CGFloat v86 = *(double *)v331,
              CGFloat v87 = *(double *)&v331[1],
              CGFloat v88 = *(double *)&v331[2],
              CGFloat v89 = *(double *)&v331[3],
              LOBYTE(v294) = a3,
              AccessibilityNode.contentFrame(with:)(&v294, (uint64_t)v316),
              outlined init with take of CGRect?((uint64_t)v316, (uint64_t)v329),
              (v330 & 1) != 0))
        {
LABEL_116:
        }
        else
        {
          LOBYTE(v294) = v83;
          char v90 = CGRect.compare(to:layoutDirection:)((unsigned __int8 *)&v294, v329[0], v329[1], v329[2], v329[3], v86, v87, v88, v89);

          if (v90 != 2) {
            goto LABEL_120;
          }
        }
        Swift::Int v29 = v261;
        uint64_t v13 = v276;
        Swift::Int v19 = v272;
        if ((v289 & 1) == 0)
        {
          Swift::Int v21 = v272;
          goto LABEL_124;
        }
        char v20 = 1;
LABEL_28:
        Swift::Int v21 = v19 + 1;
        Swift::Int v15 = v19;
        Swift::Int v19 = v21;
        if (v21 >= v29) {
          goto LABEL_17;
        }
      }
      AccessibilityNode.globalFrame.getter((uint64_t)v301);
      CGFloat x = *(double *)v301;
      CGFloat y = *(double *)&v301[1];
      CGFloat width = *(double *)&v301[2];
      CGFloat height = *(double *)&v301[3];
      outlined init with take of CGRect?((uint64_t)v301, (uint64_t)v340);
      if ((v340[32] & 1) == 0)
      {
        int v71 = 0;
        if (v66) {
          goto LABEL_108;
        }
        goto LABEL_95;
      }
      LOBYTE(v291) = 2;
      AccessibilityNode.contentFrameFromChildren(with:)((char *)&v291, (uint64_t)v303);
      if ((v304 & 1) == 0)
      {
        int v71 = 0;
        CGFloat x = *(double *)v303;
        CGFloat y = *(double *)&v303[1];
        CGFloat width = *(double *)&v303[2];
        CGFloat height = *(double *)&v303[3];
        if (v66) {
          goto LABEL_108;
        }
        goto LABEL_95;
      }
LABEL_90:

      if (v289) {
        goto LABEL_296;
      }
      Swift::Int v21 = v19 + 1;
      Swift::Int v15 = v19;
      Swift::Int v19 = v21;
      uint64_t v13 = v276;
      if (v21 >= v261) {
        goto LABEL_124;
      }
    }
  }
LABEL_16:
  char v20 = v289;
  Swift::Int v21 = v19;
LABEL_17:
  if (v20)
  {
LABEL_18:
    if (v21 < v267) {
      goto LABEL_351;
    }
    if (v267 < v21)
    {
      long long v22 = (uint64_t *)(v256 + 8 * v21);
      Swift::Int v23 = v21;
      Swift::Int v24 = v267;
      long long v25 = (uint64_t *)(v13 + 8 * v267);
      do
      {
        if (v24 != --v23)
        {
          if (!v13) {
            goto LABEL_358;
          }
          uint64_t v26 = *v25;
          *long long v25 = *v22;
          *long long v22 = v26;
        }
        ++v24;
        --v22;
        ++v25;
      }
      while (v24 < v23);
    }
  }
LABEL_124:
  if (v21 >= v261) {
    goto LABEL_132;
  }
  if (__OFSUB__(v21, v267)) {
    goto LABEL_348;
  }
  if (v21 - v267 >= v258) {
    goto LABEL_132;
  }
  Swift::Int v91 = v267 + v258;
  if (__OFADD__(v267, v258)) {
    goto LABEL_352;
  }
  if (v91 >= v261) {
    Swift::Int v91 = v261;
  }
  if (v91 < v267)
  {
LABEL_353:
    __break(1u);
    goto LABEL_354;
  }
  Swift::Int v257 = v91;
  if (v21 == v91) {
    goto LABEL_132;
  }
LABEL_184:
  long long v143 = *(char **)(v13 + 8 * v21);
  Swift::Int v259 = v21;
  while (1)
  {
    Swift::Int v271 = v21 - 1;
    Swift::Int v273 = v21;
    char v142 = *(char **)(v13 + 8 * (v21 - 1));
    unint64_t v17 = *(void *)&v143[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_cachedCombinedAttachment];
    v288 = v143;
    v290 = v142;
    if (!v17)
    {
      v152 = &v143[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_attachmentsStorage];
      swift_beginAccess();
      uint64_t v153 = *(void *)v152;
      uint64_t v154 = *(void *)(*(void *)v152 + 16);
      if (v154)
      {
        v155 = v143;
        v156 = v290;
        swift_bridgeObjectRetain();
        v157 = (void **)(v153 + 40 * v154);
        while (v154 <= *(void *)(v153 + 16))
        {
          uint64_t v158 = (uint64_t)*(v157 - 1);
          v159 = *v157;
          if (*(void *)(v158 + 16)
            && (unint64_t v160 = specialized __RawDictionaryStorage.find<A>(_:)(MEMORY[0x1E4F40AC8]), (v161 & 1) != 0))
          {
            outlined init with copy of TableColumnList(*(void *)(v158 + 56) + 40 * v160, (uint64_t)&v294);
            uint64_t v162 = v296;
            v284 = *((void *)&v295 + 1);
            __swift_project_boxed_opaque_existential_1(&v294, *((uint64_t *)&v295 + 1));
            v279 = *(void (**)(long long *__return_ptr, uint64_t, uint64_t))(v162 + 8);
            swift_retain();
            swift_bridgeObjectRetain_n();
            swift_bridgeObjectRetain();
            id v163 = v159;
            v279(&v291, v284, v162);
            __swift_destroy_boxed_opaque_existential_1((uint64_t)&v294);
          }
          else
          {
            v291 = 0u;
            v292 = 0u;
            swift_retain();
            swift_bridgeObjectRetain_n();
            swift_bridgeObjectRetain();
            id v164 = v159;
          }
          v165 = (uint64_t (*)(void, uint64_t))MEMORY[0x1E4FBB718];
          _sypSgMaTm_9(0, (unint64_t *)&lazy cache variable for type metadata for Any?, v347, MEMORY[0x1E4FBB718]);
          unint64_t v17 = v166;
          _sypSgMaTm_9(0, &lazy cache variable for type metadata for Double?, MEMORY[0x1E4FBB3D0], v165);
          if (swift_dynamicCast())
          {
            BYTE9(v294) = 0;
            char v167 = BYTE8(v294);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease_n();

            swift_release();
            if ((v167 & 1) == 0)
            {
              if (v154 <= *(void *)(v153 + 16))
              {
                uint64_t v169 = (uint64_t)*(v157 - 1);
                v168 = *v157;
                swift_retain();
                swift_bridgeObjectRetain_n();
                id v170 = v168;
                *(double *)&uint64_t v148 = COERCE_DOUBLE(specialized AccessibilityProperties.subscript.getter(v169));
                char v172 = v171;
                swift_release();

                swift_bridgeObjectRelease_n();
                if ((v172 & 1) == 0)
                {
                  swift_bridgeObjectRelease();
                  goto LABEL_204;
                }
LABEL_362:
                __break(1u);
                goto LABEL_363;
              }
LABEL_349:
              __break(1u);
LABEL_350:
              __break(1u);
LABEL_351:
              __break(1u);
LABEL_352:
              __break(1u);
              goto LABEL_353;
            }
          }
          else
          {
            *(void *)&v294 = 0;
            WORD4(v294) = 256;
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease_n();

            swift_release();
          }
          v157 -= 5;
          if (!--v154) {
            goto LABEL_203;
          }
        }
LABEL_316:
        __break(1u);
        goto LABEL_317;
      }
      v173 = v143;
      v174 = v290;
      swift_bridgeObjectRetain();
LABEL_203:
      swift_bridgeObjectRelease();
      *(double *)&uint64_t v148 = 0.0;
LABEL_204:
      long long v143 = v288;
      char v142 = v290;
LABEL_205:
      double v151 = *(double *)&v148;
      goto LABEL_206;
    }
    long long v144 = *(void **)&v143[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_cachedCombinedAttachment + 8];
    uint64_t v145 = v143;
    uint64_t v146 = v142;
    outlined copy of AccessibilityAttachment?(v17, v144);
    uint64_t v147 = swift_bridgeObjectRetain();
    *(double *)&uint64_t v148 = COERCE_DOUBLE(specialized AccessibilityProperties.subscript.getter(v147));
    char v150 = v149;
    outlined consume of AccessibilityAttachment?(v17, v144);
    swift_bridgeObjectRelease();
    double v151 = 0.0;
    if ((v150 & 1) == 0) {
      goto LABEL_205;
    }
LABEL_206:
    unint64_t v17 = *(void *)&v142[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_cachedCombinedAttachment];
    if (!v17) {
      break;
    }
    v175 = *(void **)&v142[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_cachedCombinedAttachment + 8];
    outlined copy of AccessibilityAttachment?(*(void *)&v142[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_cachedCombinedAttachment], v175);
    uint64_t v176 = swift_bridgeObjectRetain();
    double v177 = COERCE_DOUBLE(specialized AccessibilityProperties.subscript.getter(v176));
    char v179 = v178;
    outlined consume of AccessibilityAttachment?(v17, v175);
    swift_bridgeObjectRelease();
    if ((v179 & 1) == 0) {
      goto LABEL_227;
    }
    if (v151 != 0.0)
    {
      double v180 = 0.0;
LABEL_240:

      uint64_t v13 = v276;
      Swift::Int v208 = v273;
      if (v180 >= v151) {
        goto LABEL_183;
      }
      goto LABEL_276;
    }
LABEL_228:
    if (a2) {
      goto LABEL_182;
    }
    v196 = &v143[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_attachmentsStorage];
    swift_beginAccess();
    uint64_t v197 = *(void *)v196;
    uint64_t v198 = *(void *)(*(void *)v196 + 16);
    if (v198)
    {
      swift_bridgeObjectRetain();
      uint64_t v199 = v197 + 40 * v198;
      while (1)
      {
        if (v198 > *(void *)(v197 + 16))
        {
          __break(1u);
LABEL_315:
          __break(1u);
          goto LABEL_316;
        }
        uint64_t v202 = *(void *)(v199 + 8);
        if (v202)
        {
          id v203 = *(id *)v199;
          if ((*(unsigned char *)(v202 + 17) & 1) == 0
            || (*(unsigned char *)(v202 + 17) = 0, (*(unsigned char *)(v202 + 80) & 1) != 0)
            || (uint64_t v204 = *(void *)(v202 + 24), v204 == 1))
          {
            id v200 = v203;
            swift_retain_n();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
          }
          else
          {
            uint64_t v205 = *(void *)(v202 + 56);
            uint64_t v206 = *(void *)(v202 + 32);
            v281 = *(_OWORD *)(v202 + 40);
            v298 = 0uLL;
            v299 = *(_OWORD *)(v202 + 64);
            v296 = 0;
            v294 = 0u;
            v295 = 0u;
            v297 = 2;
            *(void *)&v291 = v204;
            *((void *)&v291 + 1) = v206;
            v292 = v281;
            v293 = v205;
            id v200 = v203;
            swift_retain_n();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            outlined copy of Transaction?(v204);
            unint64_t v17 = (unint64_t)&v298;
            CGRect.convert(to:transform:)();
            outlined destroy of CoordinateSpace((uint64_t)&v294);
            outlined consume of Transaction?(v204);
            long long v207 = v299;
            *(_OWORD *)(v202 + 88) = v298;
            *(_OWORD *)(v202 + 104) = v207;
            *(unsigned char *)(v202 + 120) = 0;
          }
          char v201 = *(unsigned char *)(v202 + 120);
          swift_bridgeObjectRelease();

          swift_bridgeObjectRelease();
          swift_release_n();
          if ((v201 & 1) == 0) {
            break;
          }
        }
        v199 -= 40;
        if (!--v198) {
          goto LABEL_243;
        }
      }
      if (v198 > *(void *)(v197 + 16)) {
        goto LABEL_345;
      }
      unint64_t v17 = *(void *)(v199 + 8);
      if (v17)
      {
        int v239 = *(unsigned __int8 *)(v17 + 17);
        id v240 = *(id *)v199;
        swift_retain_n();
        swift_bridgeObjectRetain();
        if (v239 == 1) {
          AccessibilityGeometryStorage.updateFrame()();
        }
        CGFloat v209 = *(double *)(v17 + 88);
        CGFloat v210 = *(double *)(v17 + 96);
        CGFloat v211 = *(double *)(v17 + 104);
        CGFloat v212 = *(double *)(v17 + 112);
        char v241 = *(unsigned char *)(v17 + 120);

        swift_bridgeObjectRelease();
        swift_release_n();
        if ((v241 & 1) == 0)
        {
          v282 = 0;
          goto LABEL_244;
        }
      }
      goto LABEL_359;
    }
    swift_bridgeObjectRetain();
LABEL_243:
    CGFloat v209 = 0.0;
    v282 = 1;
    CGFloat v210 = 0.0;
    CGFloat v211 = 0.0;
    CGFloat v212 = 0.0;
LABEL_244:
    swift_bridgeObjectRelease();
    v213 = &v290[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_attachmentsStorage];
    swift_beginAccess();
    uint64_t v214 = *(void *)v213;
    uint64_t v215 = *(void *)(*(void *)v213 + 16);
    if (v215)
    {
      swift_bridgeObjectRetain();
      uint64_t v216 = v214 + 40 * v215;
      while (1)
      {
        if (v215 > *(void *)(v214 + 16)) {
          goto LABEL_315;
        }
        uint64_t v219 = *(void *)(v216 + 8);
        if (v219)
        {
          v220 = *(void **)v216;
          if ((*(unsigned char *)(v219 + 17) & 1) == 0
            || (*(unsigned char *)(v219 + 17) = 0, (*(unsigned char *)(v219 + 80) & 1) != 0)
            || (uint64_t v221 = *(void *)(v219 + 24), v221 == 1))
          {
            id v217 = v220;
            swift_retain_n();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
          }
          else
          {
            uint64_t v222 = *(void *)(v219 + 56);
            v286 = *(void *)(v219 + 48);
            uint64_t v264 = *(void *)(v219 + 32);
            uint64_t v266 = *(void *)(v219 + 40);
            v298 = 0uLL;
            v299 = *(_OWORD *)(v219 + 64);
            v296 = 0;
            v294 = 0u;
            v295 = 0u;
            v297 = 2;
            *(void *)&v291 = v221;
            *((void *)&v291 + 1) = v264;
            *(void *)&v292 = v266;
            *((void *)&v292 + 1) = v286;
            v293 = v222;
            id v217 = v220;
            swift_retain_n();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            outlined copy of Transaction?(v221);
            unint64_t v17 = (unint64_t)&v298;
            CGRect.convert(to:transform:)();
            outlined destroy of CoordinateSpace((uint64_t)&v294);
            outlined consume of Transaction?(v221);
            long long v223 = v299;
            *(_OWORD *)(v219 + 88) = v298;
            *(_OWORD *)(v219 + 104) = v223;
            *(unsigned char *)(v219 + 120) = 0;
          }
          char v218 = *(unsigned char *)(v219 + 120);
          swift_bridgeObjectRelease();

          swift_bridgeObjectRelease();
          swift_release_n();
          if ((v218 & 1) == 0) {
            break;
          }
        }
        v216 -= 40;
        if (!--v215) {
          goto LABEL_256;
        }
      }
      if (v215 > *(void *)(v214 + 16)) {
        goto LABEL_346;
      }
      uint64_t v242 = *(void *)(v216 + 8);
      long long v143 = v288;
      if (!v242) {
        goto LABEL_360;
      }
      v243 = *(void **)v216;
      int v244 = *(unsigned __int8 *)(v242 + 17);
      id v245 = v243;
      swift_retain_n();
      swift_bridgeObjectRetain();
      if (v244 == 1) {
        AccessibilityGeometryStorage.updateFrame()();
      }
      CGFloat v225 = *(double *)(v242 + 88);
      CGFloat v226 = *(double *)(v242 + 96);
      CGFloat v227 = *(double *)(v242 + 104);
      CGFloat v228 = *(double *)(v242 + 112);
      char v246 = *(unsigned char *)(v242 + 120);

      swift_bridgeObjectRelease();
      swift_release_n();
      if (v246) {
        goto LABEL_360;
      }
      int v224 = 1;
    }
    else
    {
      swift_bridgeObjectRetain();
LABEL_256:
      int v224 = 0;
      CGFloat v225 = 0.0;
      CGFloat v226 = 0.0;
      CGFloat v227 = 0.0;
      CGFloat v228 = 0.0;
      long long v143 = v288;
    }
    swift_bridgeObjectRelease();
    int v229 = v224;
    if (v282)
    {
      LOBYTE(v294) = a3;
      AccessibilityNode.contentFrame(with:)(&v294, (uint64_t)v317);
      outlined init with take of CGRect?((uint64_t)v317, (uint64_t)v327);
      if (v328) {
        goto LABEL_181;
      }
      int v229 = 0;
      CGFloat v209 = *(double *)v327;
      CGFloat v210 = *(double *)&v327[1];
      CGFloat v211 = *(double *)&v327[2];
      CGFloat v212 = *(double *)&v327[3];
    }
    if ((v224 & 1) == 0)
    {
      LOBYTE(v294) = a3;
      AccessibilityNode.contentFrame(with:)(&v294, (uint64_t)v318);
      outlined init with take of CGRect?((uint64_t)v318, (uint64_t)v325);
      if ((v326 & 1) == 0)
      {
        CGFloat v225 = *(double *)v325;
        CGFloat v226 = *(double *)&v325[1];
        CGFloat v227 = *(double *)&v325[2];
        CGFloat v228 = *(double *)&v325[3];
        goto LABEL_263;
      }
LABEL_181:
      char v142 = v290;
LABEL_182:

      uint64_t v13 = v276;
LABEL_183:
      Swift::Int v21 = v259 + 1;
      if (v259 + 1 != v257) {
        goto LABEL_184;
      }
      Swift::Int v21 = v257;
LABEL_132:
      if (v21 < v267) {
        goto LABEL_344;
      }
      if (swift_isUniquelyReferenced_nonNull_native()) {
        uint64_t v11 = v260;
      }
      else {
        uint64_t v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v260 + 2) + 1, 1, v260);
      }
      unint64_t v93 = *((void *)v11 + 2);
      unint64_t v92 = *((void *)v11 + 3);
      unint64_t v17 = v93 + 1;
      uint64_t v13 = v276;
      if (v93 >= v92 >> 1)
      {
        v247 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v92 > 1), v93 + 1, 1, v11);
        uint64_t v13 = v276;
        uint64_t v11 = v247;
      }
      *((void *)v11 + 2) = v17;
      id v94 = v11 + 32;
      v95 = &v11[16 * v93 + 32];
      *(void *)v95 = v267;
      *((void *)v95 + 1) = v21;
      if (v93)
      {
        v96 = v11;
        while (1)
        {
          unint64_t v97 = v17 - 1;
          if (v17 >= 4)
          {
            char v102 = &v94[16 * v17];
            uint64_t v103 = *((void *)v102 - 8);
            uint64_t v104 = *((void *)v102 - 7);
            BOOL v108 = __OFSUB__(v104, v103);
            uint64_t v105 = v104 - v103;
            if (v108) {
              goto LABEL_329;
            }
            uint64_t v107 = *((void *)v102 - 6);
            uint64_t v106 = *((void *)v102 - 5);
            BOOL v108 = __OFSUB__(v106, v107);
            uint64_t v100 = v106 - v107;
            char v101 = v108;
            if (v108) {
              goto LABEL_330;
            }
            unint64_t v109 = v17 - 2;
            v110 = &v94[16 * v17 - 32];
            uint64_t v112 = *(void *)v110;
            uint64_t v111 = *((void *)v110 + 1);
            BOOL v108 = __OFSUB__(v111, v112);
            uint64_t v113 = v111 - v112;
            if (v108) {
              goto LABEL_332;
            }
            BOOL v108 = __OFADD__(v100, v113);
            uint64_t v114 = v100 + v113;
            if (v108) {
              goto LABEL_335;
            }
            if (v114 >= v105)
            {
              v132 = &v94[16 * v97];
              uint64_t v134 = *(void *)v132;
              uint64_t v133 = *((void *)v132 + 1);
              BOOL v108 = __OFSUB__(v133, v134);
              uint64_t v135 = v133 - v134;
              if (v108) {
                goto LABEL_339;
              }
              BOOL v125 = v100 < v135;
              goto LABEL_170;
            }
          }
          else
          {
            if (v17 != 3)
            {
              uint64_t v126 = *((void *)v11 + 4);
              uint64_t v127 = *((void *)v11 + 5);
              BOOL v108 = __OFSUB__(v127, v126);
              uint64_t v119 = v127 - v126;
              char v120 = v108;
              goto LABEL_164;
            }
            uint64_t v99 = *((void *)v11 + 4);
            uint64_t v98 = *((void *)v11 + 5);
            BOOL v108 = __OFSUB__(v98, v99);
            uint64_t v100 = v98 - v99;
            char v101 = v108;
          }
          if (v101) {
            goto LABEL_331;
          }
          unint64_t v109 = v17 - 2;
          unint64_t v115 = &v94[16 * v17 - 32];
          uint64_t v117 = *(void *)v115;
          uint64_t v116 = *((void *)v115 + 1);
          BOOL v118 = __OFSUB__(v116, v117);
          uint64_t v119 = v116 - v117;
          char v120 = v118;
          if (v118) {
            goto LABEL_334;
          }
          unint64_t v121 = &v94[16 * v97];
          uint64_t v123 = *(void *)v121;
          uint64_t v122 = *((void *)v121 + 1);
          BOOL v108 = __OFSUB__(v122, v123);
          uint64_t v124 = v122 - v123;
          if (v108) {
            goto LABEL_337;
          }
          if (__OFADD__(v119, v124)) {
            goto LABEL_338;
          }
          if (v119 + v124 >= v100)
          {
            BOOL v125 = v100 < v124;
LABEL_170:
            if (v125) {
              unint64_t v97 = v109;
            }
            goto LABEL_172;
          }
LABEL_164:
          if (v120) {
            goto LABEL_333;
          }
          uint64_t v128 = &v94[16 * v97];
          uint64_t v130 = *(void *)v128;
          uint64_t v129 = *((void *)v128 + 1);
          BOOL v108 = __OFSUB__(v129, v130);
          uint64_t v131 = v129 - v130;
          if (v108) {
            goto LABEL_336;
          }
          if (v131 < v119)
          {
            uint64_t v11 = v96;
            Swift::Int v12 = v21;
            goto LABEL_294;
          }
LABEL_172:
          unint64_t v136 = v97 - 1;
          if (v97 - 1 >= v17) {
            goto LABEL_325;
          }
          if (!v13) {
            goto LABEL_357;
          }
          unsigned int v137 = &v94[16 * v136];
          uint64_t v138 = *(void *)v137;
          unint64_t v139 = &v94[16 * v97];
          uint64_t v140 = *((void *)v139 + 1);
          specialized _merge<A>(low:mid:high:buffer:by:)((id *)(v13 + 8 * *(void *)v137), (id *)(v13 + 8 * *(void *)v139), v13 + 8 * v140, __dst, a2 & 1, a3, a4);
          if (v4) {
            goto LABEL_318;
          }
          if (v140 < v138) {
            goto LABEL_326;
          }
          if (v97 > *((void *)v96 + 2)) {
            goto LABEL_327;
          }
          *(void *)unsigned int v137 = v138;
          *(void *)&v94[16 * v136 + 8] = v140;
          unint64_t v141 = *((void *)v96 + 2);
          if (v97 >= v141) {
            goto LABEL_328;
          }
          unint64_t v17 = v141 - 1;
          memmove(&v94[16 * v97], v139 + 16, 16 * (v141 - 1 - v97));
          uint64_t v11 = v96;
          *((void *)v96 + 2) = v141 - 1;
          uint64_t v13 = v276;
          Swift::Int v12 = v21;
          if (v141 <= 2) {
            goto LABEL_294;
          }
        }
      }
      Swift::Int v12 = v21;
      unint64_t v17 = 1;
LABEL_294:
      Swift::Int v14 = v261;
      if (v12 >= v261)
      {
LABEL_317:
        uint64_t v5 = v255;
        if (v17 < 2)
        {
LABEL_318:
          swift_bridgeObjectRelease();
LABEL_319:
          *(void *)((v300 & 0xFFFFFFFFFFFFFF8) + 0x10) = 0;
          specialized Array._endMutation()();
          swift_bridgeObjectRelease();
          return;
        }
LABEL_302:
        uint64_t v248 = *v5;
        while (1)
        {
          unint64_t v249 = v17 - 2;
          if (v17 < 2) {
            goto LABEL_340;
          }
          if (!v248) {
            goto LABEL_361;
          }
          v250 = v11;
          uint64_t v251 = *(void *)&v11[16 * v249 + 32];
          uint64_t v252 = *(void *)&v11[16 * v17 + 24];
          specialized _merge<A>(low:mid:high:buffer:by:)((id *)(v248 + 8 * v251), (id *)(v248 + 8 * *(void *)&v11[16 * v17 + 16]), v248 + 8 * v252, __dst, a2 & 1, a3, a4);
          if (v4) {
            goto LABEL_318;
          }
          if (v252 < v251) {
            goto LABEL_341;
          }
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            v250 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v250);
          }
          if (v249 >= *((void *)v250 + 2)) {
            goto LABEL_342;
          }
          v253 = &v250[16 * v249 + 32];
          *(void *)v253 = v251;
          *((void *)v253 + 1) = v252;
          unint64_t v254 = *((void *)v250 + 2);
          if (v17 > v254) {
            goto LABEL_343;
          }
          memmove(&v250[16 * v17 + 16], &v250[16 * v17 + 32], 16 * (v254 - v17));
          uint64_t v11 = v250;
          *((void *)v250 + 2) = v254 - 1;
          unint64_t v17 = v254 - 1;
          if (v254 <= 2) {
            goto LABEL_318;
          }
        }
      }
      goto LABEL_13;
    }
LABEL_263:
    char v230 = a4;
    if (a4 == 2)
    {
      v294 = *(_OWORD *)&v288[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_environment];
      EnvironmentValues.layoutDirection.getter();
      char v231 = v291;
      v294 = *(_OWORD *)&v290[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_environment];
      EnvironmentValues.layoutDirection.getter();
      if ((v231 ^ v291)) {
        char v230 = 2;
      }
      else {
        char v230 = v231;
      }
    }
    LOBYTE(v294) = v230;
    char v232 = CGRect.compare(to:layoutDirection:)((unsigned __int8 *)&v294, v225, v226, v227, v228, v209, v210, v211, v212);
    if (v232 != 2)
    {
      char v237 = v232;

LABEL_275:
      uint64_t v13 = v276;
      Swift::Int v208 = v273;
      if ((v237 & 1) == 0) {
        goto LABEL_183;
      }
LABEL_276:
      if (!v13) {
        goto LABEL_356;
      }
      goto LABEL_277;
    }
    if (!v229) {
      goto LABEL_271;
    }
    LOBYTE(v294) = a3;
    AccessibilityNode.contentFrame(with:)(&v294, (uint64_t)v319);
    outlined init with take of CGRect?((uint64_t)v319, (uint64_t)v323);
    if ((v324 & 1) != 0
      || (CGFloat v233 = *(double *)v323,
          CGFloat v234 = *(double *)&v323[1],
          CGFloat v235 = *(double *)&v323[2],
          CGFloat v236 = *(double *)&v323[3],
          LOBYTE(v294) = a3,
          AccessibilityNode.contentFrame(with:)(&v294, (uint64_t)v320),
          outlined init with take of CGRect?((uint64_t)v320, (uint64_t)v321),
          (v322 & 1) != 0))
    {
LABEL_271:
    }
    else
    {
      LOBYTE(v294) = v230;
      char v237 = CGRect.compare(to:layoutDirection:)((unsigned __int8 *)&v294, v321[0], v321[1], v321[2], v321[3], v233, v234, v235, v236);

      if (v237 != 2) {
        goto LABEL_275;
      }
    }
    uint64_t v13 = v276;
    Swift::Int v208 = v273;
    if (!v276) {
      goto LABEL_356;
    }
LABEL_277:
    uint64_t v238 = 8 * v208;
    long long v143 = *(char **)(v13 + v238);
    *(void *)(v13 + v238) = *(void *)(v13 + 8 * v271);
    *(void *)(v13 + 8 * v271) = v143;
    Swift::Int v21 = v271;
    if (v271 == v267) {
      goto LABEL_183;
    }
  }
  uint64_t v18 = &v142[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_attachmentsStorage];
  swift_beginAccess();
  uint64_t v181 = *(void *)v18;
  uint64_t v182 = *(void *)(*(void *)v18 + 16);
  if (!v182)
  {
    swift_bridgeObjectRetain();
LABEL_225:
    swift_bridgeObjectRelease();
    double v177 = 0.0;
LABEL_226:
    long long v143 = v288;
    char v142 = v290;
LABEL_227:
    double v180 = v177;
    if (v151 != v177) {
      goto LABEL_240;
    }
    goto LABEL_228;
  }
  swift_bridgeObjectRetain();
  v183 = (void **)(v181 + 40 * v182);
  while (2)
  {
    if (v182 > *(void *)(v181 + 16))
    {
      __break(1u);
      goto LABEL_322;
    }
    uint64_t v184 = (uint64_t)*(v183 - 1);
    v185 = *v183;
    if (*(void *)(v184 + 16)
      && (unint64_t v186 = specialized __RawDictionaryStorage.find<A>(_:)(MEMORY[0x1E4F40AC8]), (v187 & 1) != 0))
    {
      outlined init with copy of TableColumnList(*(void *)(v184 + 56) + 40 * v186, (uint64_t)&v294);
      uint64_t v188 = v296;
      v285 = *((void *)&v295 + 1);
      __swift_project_boxed_opaque_existential_1(&v294, *((uint64_t *)&v295 + 1));
      v280 = *(void (**)(long long *__return_ptr, uint64_t, uint64_t))(v188 + 8);
      swift_retain();
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain();
      id v189 = v185;
      v280(&v291, v285, v188);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v294);
    }
    else
    {
      v291 = 0u;
      v292 = 0u;
      swift_retain();
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain();
      id v190 = v185;
    }
    uint64_t v18 = (char *)MEMORY[0x1E4FBB718];
    _sypSgMaTm_9(0, (unint64_t *)&lazy cache variable for type metadata for Any?, MEMORY[0x1E4FBC840] + 8, MEMORY[0x1E4FBB718]);
    unint64_t v17 = v191;
    _sypSgMaTm_9(0, &lazy cache variable for type metadata for Double?, MEMORY[0x1E4FBB3D0], (uint64_t (*)(void, uint64_t))v18);
    if (!swift_dynamicCast())
    {
      *(void *)&v294 = 0;
      WORD4(v294) = 256;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();

      swift_release();
      goto LABEL_213;
    }
    BYTE9(v294) = 0;
    uint64_t v18 = (char *)BYTE8(v294);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();

    swift_release();
    if (v18)
    {
LABEL_213:
      v183 -= 5;
      if (!--v182) {
        goto LABEL_225;
      }
      continue;
    }
    break;
  }
  if (v182 > *(void *)(v181 + 16)) {
    goto LABEL_350;
  }
  unint64_t v17 = (unint64_t)*(v183 - 1);
  v192 = *v183;
  swift_retain();
  swift_bridgeObjectRetain_n();
  id v193 = v192;
  double v177 = COERCE_DOUBLE(specialized AccessibilityProperties.subscript.getter(v17));
  char v195 = v194;
  swift_release();

  swift_bridgeObjectRelease_n();
  if ((v195 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    goto LABEL_226;
  }
LABEL_363:
  __break(1u);
LABEL_364:
  __break(1u);
LABEL_365:
  __break(1u);
LABEL_366:
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, char a5, char a6, char a7)
{
  if (a3 == a2) {
    return;
  }
  uint64_t v7 = *a4;
  uint64_t v203 = *a4;
LABEL_7:
  uint64_t v9 = *(void **)(v7 + 8 * a3);
  uint64_t v194 = a3;
  while (1)
  {
    uint64_t v258 = a3;
    uint64_t v209 = a3 - 1;
    uint64_t v10 = *(void **)(v7 + 8 * (a3 - 1));
    uint64_t v11 = v9;
    uint64_t v8 = v10;
    double v12 = COERCE_DOUBLE(AccessibilityNode.sortPriority.getter());
    double v14 = (v13 & 1) != 0 ? 0.0 : v12;
    double v15 = COERCE_DOUBLE(AccessibilityNode.sortPriority.getter());
    if (v16)
    {
      if (v14 != 0.0)
      {
        double v17 = 0.0;
LABEL_29:

        uint64_t v7 = v203;
        uint64_t v33 = v258;
        if (v17 >= v14) {
          goto LABEL_6;
        }
        goto LABEL_172;
      }
    }
    else
    {
      double v17 = v15;
      if (v14 != v15) {
        goto LABEL_29;
      }
    }
    if (a5) {
      goto LABEL_5;
    }
    long long v207 = v11;
    uint64_t v18 = &v11[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_attachmentsStorage];
    swift_beginAccess();
    char v201 = v18;
    uint64_t v19 = *(void *)v18;
    uint64_t v20 = *(void *)(v19 + 16);
    Swift::Int v208 = v8;
    if (v20) {
      break;
    }
    swift_bridgeObjectRetain();
    CGFloat x = 0.0;
    char v29 = 1;
    CGFloat y = 0.0;
    CGFloat width = 0.0;
    CGFloat height = 0.0;
LABEL_41:
    swift_bridgeObjectRelease();
    long long v39 = &v8[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_attachmentsStorage];
    swift_beginAccess();
    id v200 = v39;
    uint64_t v40 = *(void *)v39;
    uint64_t v41 = *(void *)(*(void *)v39 + 16);
    if (v41)
    {
      swift_bridgeObjectRetain();
      uint64_t v42 = v40 + 40 * v41;
      while (v41 <= *(void *)(v40 + 16))
      {
        uint64_t v45 = *(void *)(v42 + 8);
        if (v45)
        {
          id v46 = *(void **)v42;
          if ((*(unsigned char *)(v45 + 17) & 1) == 0
            || (*(unsigned char *)(v45 + 17) = 0, (*(unsigned char *)(v45 + 80) & 1) != 0)
            || (uint64_t v47 = *(void *)(v45 + 24), v47 == 1))
          {
            id v43 = v46;
            swift_retain_n();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
          }
          else
          {
            long long v215 = 0uLL;
            long long v216 = *(_OWORD *)(v45 + 64);
            uint64_t v213 = 0;
            long long v211 = 0u;
            long long v212 = 0u;
            char v214 = 2;
            char v210 = v47;
            id v43 = v46;
            swift_retain_n();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            outlined copy of Transaction?(v47);
            CGRect.convert(to:transform:)();
            outlined destroy of CoordinateSpace((uint64_t)&v211);
            outlined consume of Transaction?(v47);
            long long v48 = v216;
            *(_OWORD *)(v45 + 88) = v215;
            *(_OWORD *)(v45 + 104) = v48;
            *(unsigned char *)(v45 + 120) = 0;
          }
          char v44 = *(unsigned char *)(v45 + 120);
          swift_bridgeObjectRelease();

          swift_bridgeObjectRelease();
          swift_release_n();
          if ((v44 & 1) == 0)
          {
            if (v41 > *(void *)(v40 + 16)) {
              goto LABEL_287;
            }
            uint64_t v54 = *(void *)(v42 + 8);
            uint64_t v11 = v207;
            if (v54)
            {
              uint64_t v55 = *(void **)v42;
              if (*(unsigned char *)(v54 + 17) != 1
                || (*(unsigned char *)(v54 + 17) = 0, (*(unsigned char *)(v54 + 80) & 1) != 0)
                || (uint64_t v56 = *(void *)(v54 + 24), v56 == 1))
              {
                id v57 = v55;
                swift_retain_n();
                swift_bridgeObjectRetain();
              }
              else
              {
                long long v215 = 0uLL;
                long long v216 = *(_OWORD *)(v54 + 64);
                uint64_t v213 = 0;
                long long v211 = 0u;
                long long v212 = 0u;
                char v214 = 2;
                char v210 = v56;
                id v57 = v55;
                swift_retain_n();
                swift_bridgeObjectRetain();
                outlined copy of Transaction?(v56);
                CGRect.convert(to:transform:)();
                outlined destroy of CoordinateSpace((uint64_t)&v211);
                uint64_t v11 = v207;
                outlined consume of Transaction?(v56);
                long long v149 = v216;
                *(_OWORD *)(v54 + 88) = v215;
                *(_OWORD *)(v54 + 104) = v149;
                *(unsigned char *)(v54 + 120) = 0;
              }
              CGFloat v50 = *(double *)(v54 + 88);
              CGFloat v51 = *(double *)(v54 + 96);
              CGFloat v52 = *(double *)(v54 + 104);
              CGFloat v53 = *(double *)(v54 + 112);
              char v58 = *(unsigned char *)(v54 + 120);

              swift_bridgeObjectRelease();
              swift_release_n();
              if ((v58 & 1) == 0)
              {
                int v49 = 1;
                uint64_t v8 = v208;
                goto LABEL_62;
              }
            }
            goto LABEL_298;
          }
        }
        v42 -= 40;
        if (!--v41)
        {
          int v49 = 0;
          CGFloat v50 = 0.0;
          CGFloat v51 = 0.0;
          CGFloat v52 = 0.0;
          CGFloat v53 = 0.0;
          uint64_t v11 = v207;
          uint64_t v8 = v208;
          goto LABEL_62;
        }
      }
LABEL_277:
      __break(1u);
LABEL_278:
      __break(1u);
LABEL_279:
      __break(1u);
LABEL_280:
      __break(1u);
LABEL_281:
      __break(1u);
      goto LABEL_282;
    }
    swift_bridgeObjectRetain();
    int v49 = 0;
    CGFloat v50 = 0.0;
    CGFloat v51 = 0.0;
    CGFloat v52 = 0.0;
    CGFloat v53 = 0.0;
    uint64_t v11 = v207;
LABEL_62:
    swift_bridgeObjectRelease();
    if (v29)
    {
      LOBYTE(v211) = a6;
      AccessibilityNode.impliedVisibility(consideringParent:with:)(1, (unsigned __int8 *)&v211, &v217);
      char v59 = v217;
      if (v217 == 2)
      {
        char v204 = v49;
        uint64_t v60 = *(void *)v201;
        uint64_t v61 = *(void *)(*(void *)v201 + 16);
        if (v61)
        {
          swift_bridgeObjectRetain();
          uint64_t v62 = v60 + 40 * v61;
          while (v61 <= *(void *)(v60 + 16))
          {
            uint64_t v65 = *(void *)(v62 + 8);
            if (v65)
            {
              int v66 = *(void **)v62;
              if ((*(unsigned char *)(v65 + 17) & 1) == 0
                || (*(unsigned char *)(v65 + 17) = 0, (*(unsigned char *)(v65 + 80) & 1) != 0)
                || (uint64_t v67 = *(void *)(v65 + 24), v67 == 1))
              {
                id v63 = v66;
                swift_retain_n();
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
              }
              else
              {
                long long v215 = 0uLL;
                long long v216 = *(_OWORD *)(v65 + 64);
                uint64_t v213 = 0;
                long long v211 = 0u;
                long long v212 = 0u;
                char v214 = 2;
                char v210 = v67;
                id v63 = v66;
                swift_retain_n();
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                outlined copy of Transaction?(v67);
                CGRect.convert(to:transform:)();
                outlined destroy of CoordinateSpace((uint64_t)&v211);
                outlined consume of Transaction?(v67);
                long long v68 = v216;
                *(_OWORD *)(v65 + 88) = v215;
                *(_OWORD *)(v65 + 104) = v68;
                *(unsigned char *)(v65 + 120) = 0;
              }
              char v64 = *(unsigned char *)(v65 + 120);
              swift_bridgeObjectRelease();

              swift_bridgeObjectRelease();
              swift_release_n();
              if ((v64 & 1) == 0)
              {
                if (v61 > *(void *)(v60 + 16)) {
                  goto LABEL_288;
                }
                uint64_t v78 = *(void *)(v62 + 8);
                uint64_t v11 = v207;
                if (v78)
                {
                  int v79 = *(void **)v62;
                  if (*(unsigned char *)(v78 + 17) != 1
                    || (*(unsigned char *)(v78 + 17) = 0, (*(unsigned char *)(v78 + 80) & 1) != 0)
                    || (uint64_t v80 = *(void *)(v78 + 24), v80 == 1))
                  {
                    id v81 = v79;
                    swift_retain_n();
                    swift_bridgeObjectRetain();
                  }
                  else
                  {
                    long long v215 = 0uLL;
                    long long v216 = *(_OWORD *)(v78 + 64);
                    uint64_t v213 = 0;
                    long long v211 = 0u;
                    long long v212 = 0u;
                    char v214 = 2;
                    char v210 = v80;
                    id v81 = v79;
                    swift_retain_n();
                    swift_bridgeObjectRetain();
                    outlined copy of Transaction?(v80);
                    CGRect.convert(to:transform:)();
                    outlined destroy of CoordinateSpace((uint64_t)&v211);
                    uint64_t v11 = v207;
                    outlined consume of Transaction?(v80);
                    long long v186 = v216;
                    *(_OWORD *)(v78 + 88) = v215;
                    *(_OWORD *)(v78 + 104) = v186;
                    *(unsigned char *)(v78 + 120) = 0;
                  }
                  CGFloat x = *(double *)(v78 + 88);
                  CGFloat y = *(double *)(v78 + 96);
                  CGFloat width = *(double *)(v78 + 104);
                  CGFloat height = *(double *)(v78 + 112);
                  char v82 = *(unsigned char *)(v78 + 120);

                  swift_bridgeObjectRelease();
                  swift_release_n();
                  if ((v82 & 1) == 0) {
                    goto LABEL_112;
                  }
                }
                goto LABEL_299;
              }
            }
            v62 -= 40;
            if (!--v61) {
              goto LABEL_81;
            }
          }
          goto LABEL_278;
        }
        swift_bridgeObjectRetain();
LABEL_81:
        swift_bridgeObjectRelease();
        LOBYTE(v211) = 2;
        uint64_t v11 = v207;
        AccessibilityNode.contentFrameFromChildren(with:)((char *)&v211, (uint64_t)v219);
        if (v220) {
          goto LABEL_4;
        }
        int v205 = 0;
        CGFloat x = *(double *)v219;
        CGFloat y = *(double *)&v219[1];
        CGFloat width = *(double *)&v219[2];
        CGFloat height = *(double *)&v219[3];
      }
      else
      {
        AccessibilityNode.contentPath.getter((uint64_t)v218);
        outlined init with take of AnyAccessibilityAction?((uint64_t)v218, (uint64_t)v253, &lazy cache variable for type metadata for Path?, MEMORY[0x1E4F413B0]);
        if (v254 != 255)
        {
          long long v255 = v253[0];
          long long v256 = v253[1];
          unsigned __int8 v257 = v254;
          Path.boundingRect.getter();
          CGRect v260 = CGRectStandardize(v259);
          CGFloat x = v260.origin.x;
          CGFloat y = v260.origin.y;
          CGFloat width = v260.size.width;
          CGFloat height = v260.size.height;
          outlined release of Path?((uint64_t)v218);
          int v205 = 0;
          if (v49) {
            goto LABEL_154;
          }
          goto LABEL_114;
        }
        char v191 = v59;
        char v204 = v49;
        uint64_t v69 = *(void *)v201;
        uint64_t v70 = *(void *)(*(void *)v201 + 16);
        if (v70)
        {
          swift_bridgeObjectRetain();
          uint64_t v71 = v69 + 40 * v70;
          while (v70 <= *(void *)(v69 + 16))
          {
            uint64_t v74 = *(void *)(v71 + 8);
            if (v74)
            {
              id v75 = *(void **)v71;
              if ((*(unsigned char *)(v74 + 17) & 1) == 0
                || (*(unsigned char *)(v74 + 17) = 0, (*(unsigned char *)(v74 + 80) & 1) != 0)
                || (uint64_t v76 = *(void *)(v74 + 24), v76 == 1))
              {
                id v72 = v75;
                swift_retain_n();
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
              }
              else
              {
                long long v215 = 0uLL;
                long long v216 = *(_OWORD *)(v74 + 64);
                uint64_t v213 = 0;
                long long v211 = 0u;
                long long v212 = 0u;
                char v214 = 2;
                char v210 = v76;
                id v72 = v75;
                swift_retain_n();
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                outlined copy of Transaction?(v76);
                CGRect.convert(to:transform:)();
                outlined destroy of CoordinateSpace((uint64_t)&v211);
                outlined consume of Transaction?(v76);
                long long v77 = v216;
                *(_OWORD *)(v74 + 88) = v215;
                *(_OWORD *)(v74 + 104) = v77;
                *(unsigned char *)(v74 + 120) = 0;
              }
              char v73 = *(unsigned char *)(v74 + 120);
              swift_bridgeObjectRelease();

              swift_bridgeObjectRelease();
              swift_release_n();
              if ((v73 & 1) == 0)
              {
                if (v70 > *(void *)(v69 + 16)) {
                  goto LABEL_291;
                }
                uint64_t v83 = *(void *)(v71 + 8);
                uint64_t v11 = v207;
                if (v83)
                {
                  char v84 = *(void **)v71;
                  if (*(unsigned char *)(v83 + 17) != 1
                    || (*(unsigned char *)(v83 + 17) = 0, (*(unsigned char *)(v83 + 80) & 1) != 0)
                    || (uint64_t v85 = *(void *)(v83 + 24), v85 == 1))
                  {
                    id v86 = v84;
                    swift_retain_n();
                    swift_bridgeObjectRetain();
                  }
                  else
                  {
                    long long v215 = 0uLL;
                    long long v216 = *(_OWORD *)(v83 + 64);
                    uint64_t v213 = 0;
                    long long v211 = 0u;
                    long long v212 = 0u;
                    char v214 = 2;
                    char v210 = v85;
                    id v86 = v84;
                    swift_retain_n();
                    swift_bridgeObjectRetain();
                    outlined copy of Transaction?(v85);
                    CGRect.convert(to:transform:)();
                    outlined destroy of CoordinateSpace((uint64_t)&v211);
                    uint64_t v11 = v207;
                    outlined consume of Transaction?(v85);
                    long long v189 = v216;
                    *(_OWORD *)(v83 + 88) = v215;
                    *(_OWORD *)(v83 + 104) = v189;
                    *(unsigned char *)(v83 + 120) = 0;
                  }
                  CGFloat x = *(double *)(v83 + 88);
                  CGFloat y = *(double *)(v83 + 96);
                  CGFloat width = *(double *)(v83 + 104);
                  CGFloat height = *(double *)(v83 + 112);
                  char v87 = *(unsigned char *)(v83 + 120);

                  swift_bridgeObjectRelease();
                  swift_release_n();
                  if ((v87 & 1) == 0)
                  {
LABEL_112:
                    swift_bridgeObjectRelease();
                    int v205 = 0;
                    goto LABEL_113;
                  }
                }
                goto LABEL_302;
              }
            }
            v71 -= 40;
            if (!--v70) {
              goto LABEL_103;
            }
          }
          goto LABEL_281;
        }
        swift_bridgeObjectRetain();
LABEL_103:
        swift_bridgeObjectRelease();
        LOBYTE(v211) = v191;
        uint64_t v11 = v207;
        AccessibilityNode.contentFrameFromChildren(with:)((char *)&v211, (uint64_t)v221);
        if (v222)
        {
LABEL_4:
          uint64_t v8 = v208;
LABEL_5:

          uint64_t v7 = v203;
LABEL_6:
          a3 = v194 + 1;
          if (v194 + 1 == a2) {
            return;
          }
          goto LABEL_7;
        }
        int v205 = 0;
        CGFloat x = *(double *)v221;
        CGFloat y = *(double *)&v221[1];
        CGFloat width = *(double *)&v221[2];
        CGFloat height = *(double *)&v221[3];
      }
LABEL_113:
      uint64_t v8 = v208;
      if (v204) {
        goto LABEL_154;
      }
    }
    else
    {
      int v205 = v49;
      if (v49) {
        goto LABEL_154;
      }
    }
LABEL_114:
    LOBYTE(v211) = a6;
    AccessibilityNode.impliedVisibility(consideringParent:with:)(1, (unsigned __int8 *)&v211, &v217);
    char v88 = v217;
    if (v217 == 2)
    {
      uint64_t v89 = *(void *)v200;
      uint64_t v90 = *(void *)(*(void *)v200 + 16);
      if (v90)
      {
        swift_bridgeObjectRetain();
        uint64_t v91 = v89 + 40 * v90;
        while (v90 <= *(void *)(v89 + 16))
        {
          uint64_t v94 = *(void *)(v91 + 8);
          if (v94)
          {
            v95 = *(void **)v91;
            if ((*(unsigned char *)(v94 + 17) & 1) == 0
              || (*(unsigned char *)(v94 + 17) = 0, (*(unsigned char *)(v94 + 80) & 1) != 0)
              || (uint64_t v96 = *(void *)(v94 + 24), v96 == 1))
            {
              id v92 = v95;
              swift_retain_n();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
            }
            else
            {
              long long v215 = 0uLL;
              long long v216 = *(_OWORD *)(v94 + 64);
              uint64_t v213 = 0;
              long long v211 = 0u;
              long long v212 = 0u;
              char v214 = 2;
              char v210 = v96;
              id v92 = v95;
              swift_retain_n();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              outlined copy of Transaction?(v96);
              CGRect.convert(to:transform:)();
              outlined destroy of CoordinateSpace((uint64_t)&v211);
              outlined consume of Transaction?(v96);
              long long v97 = v216;
              *(_OWORD *)(v94 + 88) = v215;
              *(_OWORD *)(v94 + 104) = v97;
              *(unsigned char *)(v94 + 120) = 0;
            }
            char v93 = *(unsigned char *)(v94 + 120);
            swift_bridgeObjectRelease();

            swift_bridgeObjectRelease();
            swift_release_n();
            if ((v93 & 1) == 0)
            {
              if (v90 > *(void *)(v89 + 16)) {
                goto LABEL_289;
              }
              uint64_t v107 = *(void *)(v91 + 8);
              uint64_t v11 = v207;
              if (v107)
              {
                BOOL v108 = *(void **)v91;
                if (*(unsigned char *)(v107 + 17) != 1
                  || (*(unsigned char *)(v107 + 17) = 0, (*(unsigned char *)(v107 + 80) & 1) != 0)
                  || (uint64_t v109 = *(void *)(v107 + 24), v109 == 1))
                {
                  id v110 = v108;
                  swift_retain_n();
                  swift_bridgeObjectRetain();
                }
                else
                {
                  long long v215 = 0uLL;
                  long long v216 = *(_OWORD *)(v107 + 64);
                  uint64_t v213 = 0;
                  long long v211 = 0u;
                  long long v212 = 0u;
                  char v214 = 2;
                  char v210 = v109;
                  id v110 = v108;
                  swift_retain_n();
                  swift_bridgeObjectRetain();
                  outlined copy of Transaction?(v109);
                  CGRect.convert(to:transform:)();
                  outlined destroy of CoordinateSpace((uint64_t)&v211);
                  uint64_t v11 = v207;
                  outlined consume of Transaction?(v109);
                  long long v187 = v216;
                  *(_OWORD *)(v107 + 88) = v215;
                  *(_OWORD *)(v107 + 104) = v187;
                  *(unsigned char *)(v107 + 120) = 0;
                }
                CGFloat v50 = *(double *)(v107 + 88);
                CGFloat v51 = *(double *)(v107 + 96);
                CGFloat v52 = *(double *)(v107 + 104);
                CGFloat v53 = *(double *)(v107 + 112);
                char v111 = *(unsigned char *)(v107 + 120);

                swift_bridgeObjectRelease();
                swift_release_n();
                if ((v111 & 1) == 0) {
                  goto LABEL_205;
                }
              }
              goto LABEL_300;
            }
          }
          v91 -= 40;
          if (!--v90) {
            goto LABEL_129;
          }
        }
        goto LABEL_279;
      }
      swift_bridgeObjectRetain();
LABEL_129:
      swift_bridgeObjectRelease();
      LOBYTE(v211) = 2;
      uint64_t v8 = v208;
      AccessibilityNode.contentFrameFromChildren(with:)((char *)&v211, (uint64_t)v224);
      if (v225) {
        goto LABEL_275;
      }
      CGFloat v50 = *(double *)v224;
      CGFloat v51 = *(double *)&v224[1];
      CGFloat v52 = *(double *)&v224[2];
      CGFloat v53 = *(double *)&v224[3];
    }
    else
    {
      AccessibilityNode.contentPath.getter((uint64_t)v223);
      outlined init with take of AnyAccessibilityAction?((uint64_t)v223, (uint64_t)v248, &lazy cache variable for type metadata for Path?, MEMORY[0x1E4F413B0]);
      if (v249 != 255)
      {
        long long v250 = v248[0];
        long long v251 = v248[1];
        unsigned __int8 v252 = v249;
        Path.boundingRect.getter();
        CGRect v262 = CGRectStandardize(v261);
        CGFloat v50 = v262.origin.x;
        CGFloat v51 = v262.origin.y;
        CGFloat v52 = v262.size.width;
        CGFloat v53 = v262.size.height;
        outlined release of Path?((uint64_t)v223);
        goto LABEL_154;
      }
      char v192 = v88;
      uint64_t v98 = *(void *)v200;
      uint64_t v99 = *(void *)(*(void *)v200 + 16);
      if (v99)
      {
        swift_bridgeObjectRetain();
        uint64_t v100 = v98 + 40 * v99;
        while (v99 <= *(void *)(v98 + 16))
        {
          uint64_t v103 = *(void *)(v100 + 8);
          if (v103)
          {
            uint64_t v104 = *(void **)v100;
            if ((*(unsigned char *)(v103 + 17) & 1) == 0
              || (*(unsigned char *)(v103 + 17) = 0, (*(unsigned char *)(v103 + 80) & 1) != 0)
              || (uint64_t v105 = *(void *)(v103 + 24), v105 == 1))
            {
              id v101 = v104;
              swift_retain_n();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
            }
            else
            {
              long long v215 = 0uLL;
              long long v216 = *(_OWORD *)(v103 + 64);
              uint64_t v213 = 0;
              long long v211 = 0u;
              long long v212 = 0u;
              char v214 = 2;
              char v210 = v105;
              id v101 = v104;
              swift_retain_n();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              outlined copy of Transaction?(v105);
              CGRect.convert(to:transform:)();
              outlined destroy of CoordinateSpace((uint64_t)&v211);
              outlined consume of Transaction?(v105);
              long long v106 = v216;
              *(_OWORD *)(v103 + 88) = v215;
              *(_OWORD *)(v103 + 104) = v106;
              *(unsigned char *)(v103 + 120) = 0;
            }
            char v102 = *(unsigned char *)(v103 + 120);
            swift_bridgeObjectRelease();

            swift_bridgeObjectRelease();
            swift_release_n();
            if ((v102 & 1) == 0)
            {
              if (v99 > *(void *)(v98 + 16)) {
                goto LABEL_292;
              }
              uint64_t v143 = *(void *)(v100 + 8);
              uint64_t v11 = v207;
              if (v143)
              {
                long long v144 = *(void **)v100;
                if (*(unsigned char *)(v143 + 17) != 1
                  || (*(unsigned char *)(v143 + 17) = 0, (*(unsigned char *)(v143 + 80) & 1) != 0)
                  || (uint64_t v145 = *(void *)(v143 + 24), v145 == 1))
                {
                  id v146 = v144;
                  swift_retain_n();
                  swift_bridgeObjectRetain();
                }
                else
                {
                  long long v215 = 0uLL;
                  long long v216 = *(_OWORD *)(v143 + 64);
                  uint64_t v213 = 0;
                  long long v211 = 0u;
                  long long v212 = 0u;
                  char v214 = 2;
                  char v210 = v145;
                  id v146 = v144;
                  swift_retain_n();
                  swift_bridgeObjectRetain();
                  outlined copy of Transaction?(v145);
                  CGRect.convert(to:transform:)();
                  outlined destroy of CoordinateSpace((uint64_t)&v211);
                  uint64_t v11 = v207;
                  outlined consume of Transaction?(v145);
                  long long v190 = v216;
                  *(_OWORD *)(v143 + 88) = v215;
                  *(_OWORD *)(v143 + 104) = v190;
                  *(unsigned char *)(v143 + 120) = 0;
                }
                CGFloat v50 = *(double *)(v143 + 88);
                CGFloat v51 = *(double *)(v143 + 96);
                CGFloat v52 = *(double *)(v143 + 104);
                CGFloat v53 = *(double *)(v143 + 112);
                char v147 = *(unsigned char *)(v143 + 120);

                swift_bridgeObjectRelease();
                swift_release_n();
                if ((v147 & 1) == 0)
                {
LABEL_205:
                  swift_bridgeObjectRelease();
                  uint64_t v8 = v208;
                  goto LABEL_154;
                }
              }
              goto LABEL_303;
            }
          }
          v100 -= 40;
          if (!--v99) {
            goto LABEL_151;
          }
        }
LABEL_282:
        __break(1u);
LABEL_283:
        __break(1u);
LABEL_284:
        __break(1u);
        goto LABEL_285;
      }
      swift_bridgeObjectRetain();
LABEL_151:
      swift_bridgeObjectRelease();
      LOBYTE(v211) = v192;
      uint64_t v8 = v208;
      AccessibilityNode.contentFrameFromChildren(with:)((char *)&v211, (uint64_t)v226);
      if (v227)
      {
LABEL_275:
        uint64_t v11 = v207;
        goto LABEL_5;
      }
      CGFloat v50 = *(double *)v226;
      CGFloat v51 = *(double *)&v226[1];
      CGFloat v52 = *(double *)&v226[2];
      CGFloat v53 = *(double *)&v226[3];
    }
    uint64_t v11 = v207;
LABEL_154:
    char v112 = a7;
    if (a7 == 2)
    {
      long long v211 = *(_OWORD *)&v11[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_environment];
      EnvironmentValues.layoutDirection.getter();
      long long v211 = *(_OWORD *)&v8[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_environment];
      EnvironmentValues.layoutDirection.getter();
      char v112 = v210;
    }
    LOBYTE(v211) = v112;
    char v113 = CGRect.compare(to:layoutDirection:)((unsigned __int8 *)&v211, v50, v51, v52, v53, x, y, width, height);
    if (v113 == 2)
    {
      if (!v205) {
        goto LABEL_256;
      }
      char v206 = v112;
      LOBYTE(v211) = a6;
      AccessibilityNode.impliedVisibility(consideringParent:with:)(1, (unsigned __int8 *)&v211, &v217);
      char v114 = v217;
      if (v217 == 2)
      {
        uint64_t v115 = *(void *)v201;
        uint64_t v116 = *(void *)(*(void *)v201 + 16);
        if (v116)
        {
          swift_bridgeObjectRetain();
          uint64_t v117 = v115 + 40 * v116;
          while (v116 <= *(void *)(v115 + 16))
          {
            uint64_t v120 = *(void *)(v117 + 8);
            if (v120)
            {
              unint64_t v121 = *(void **)v117;
              if ((*(unsigned char *)(v120 + 17) & 1) == 0
                || (*(unsigned char *)(v120 + 17) = 0, (*(unsigned char *)(v120 + 80) & 1) != 0)
                || (uint64_t v122 = *(void *)(v120 + 24), v122 == 1))
              {
                id v118 = v121;
                swift_retain_n();
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
              }
              else
              {
                long long v215 = 0uLL;
                long long v216 = *(_OWORD *)(v120 + 64);
                uint64_t v213 = 0;
                long long v211 = 0u;
                long long v212 = 0u;
                char v214 = 2;
                char v210 = v122;
                id v118 = v121;
                swift_retain_n();
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                outlined copy of Transaction?(v122);
                CGRect.convert(to:transform:)();
                outlined destroy of CoordinateSpace((uint64_t)&v211);
                outlined consume of Transaction?(v122);
                long long v123 = v216;
                *(_OWORD *)(v120 + 88) = v215;
                *(_OWORD *)(v120 + 104) = v123;
                *(unsigned char *)(v120 + 120) = 0;
              }
              char v119 = *(unsigned char *)(v120 + 120);
              swift_bridgeObjectRelease();

              swift_bridgeObjectRelease();
              swift_release_n();
              if ((v119 & 1) == 0)
              {
                if (v116 > *(void *)(v115 + 16)) {
                  goto LABEL_290;
                }
                uint64_t v138 = *(void *)(v117 + 8);
                uint64_t v11 = v207;
                if (v138)
                {
                  unint64_t v139 = *(void **)v117;
                  if (*(unsigned char *)(v138 + 17) != 1
                    || (*(unsigned char *)(v138 + 17) = 0, (*(unsigned char *)(v138 + 80) & 1) != 0)
                    || (uint64_t v140 = *(void *)(v138 + 24), v140 == 1))
                  {
                    id v141 = v139;
                    swift_retain_n();
                    swift_bridgeObjectRetain();
                  }
                  else
                  {
                    long long v215 = 0uLL;
                    long long v216 = *(_OWORD *)(v138 + 64);
                    uint64_t v213 = 0;
                    long long v211 = 0u;
                    long long v212 = 0u;
                    char v214 = 2;
                    char v210 = v140;
                    id v141 = v139;
                    swift_retain_n();
                    swift_bridgeObjectRetain();
                    outlined copy of Transaction?(v140);
                    CGRect.convert(to:transform:)();
                    outlined destroy of CoordinateSpace((uint64_t)&v211);
                    uint64_t v11 = v207;
                    outlined consume of Transaction?(v140);
                    long long v188 = v216;
                    *(_OWORD *)(v138 + 88) = v215;
                    *(_OWORD *)(v138 + 104) = v188;
                    *(unsigned char *)(v138 + 120) = 0;
                  }
                  CGFloat v125 = *(double *)(v138 + 88);
                  CGFloat v126 = *(double *)(v138 + 96);
                  CGFloat v127 = *(double *)(v138 + 104);
                  CGFloat v128 = *(double *)(v138 + 112);
                  char v142 = *(unsigned char *)(v138 + 120);

                  swift_bridgeObjectRelease();
                  swift_release_n();
                  if ((v142 & 1) == 0) {
                    goto LABEL_217;
                  }
                }
                goto LABEL_301;
              }
            }
            v117 -= 40;
            if (!--v116) {
              goto LABEL_177;
            }
          }
          goto LABEL_280;
        }
        swift_bridgeObjectRetain();
LABEL_177:
        swift_bridgeObjectRelease();
        LOBYTE(v211) = 2;
        uint64_t v11 = v207;
        AccessibilityNode.contentFrameFromChildren(with:)((char *)&v211, (uint64_t)v229);
        if (v230) {
          goto LABEL_210;
        }
        CGFloat v125 = *(double *)v229;
        CGFloat v126 = *(double *)&v229[1];
        CGFloat v127 = *(double *)&v229[2];
        CGFloat v128 = *(double *)&v229[3];
        goto LABEL_218;
      }
      AccessibilityNode.contentPath.getter((uint64_t)&v228);
      outlined init with take of AnyAccessibilityAction?((uint64_t)&v228, (uint64_t)v243, &lazy cache variable for type metadata for Path?, MEMORY[0x1E4F413B0]);
      if (v244 == 255)
      {
        char v197 = v114;
        uint64_t v129 = *(void *)v201;
        uint64_t v130 = *(void *)(*(void *)v201 + 16);
        if (v130)
        {
          swift_bridgeObjectRetain();
          uint64_t v131 = v129 + 40 * v130;
          while (v130 <= *(void *)(v129 + 16))
          {
            uint64_t v134 = *(void *)(v131 + 8);
            if (v134)
            {
              id v135 = *(id *)v131;
              if ((*(unsigned char *)(v134 + 17) & 1) == 0
                || (*(unsigned char *)(v134 + 17) = 0, (*(unsigned char *)(v134 + 80) & 1) != 0)
                || (uint64_t v136 = *(void *)(v134 + 24), v136 == 1))
              {
                id v132 = v135;
                swift_retain_n();
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
              }
              else
              {
                long long v215 = 0uLL;
                long long v216 = *(_OWORD *)(v134 + 64);
                uint64_t v213 = 0;
                long long v211 = 0u;
                long long v212 = 0u;
                char v214 = 2;
                char v210 = v136;
                id v132 = v135;
                swift_retain_n();
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                outlined copy of Transaction?(v136);
                CGRect.convert(to:transform:)();
                outlined destroy of CoordinateSpace((uint64_t)&v211);
                outlined consume of Transaction?(v136);
                long long v137 = v216;
                *(_OWORD *)(v134 + 88) = v215;
                *(_OWORD *)(v134 + 104) = v137;
                *(unsigned char *)(v134 + 120) = 0;
              }
              char v133 = *(unsigned char *)(v134 + 120);
              swift_bridgeObjectRelease();

              swift_bridgeObjectRelease();
              swift_release_n();
              if ((v133 & 1) == 0)
              {
                if (v130 > *(void *)(v129 + 16)) {
                  goto LABEL_294;
                }
                uint64_t v150 = *(void *)(v131 + 8);
                uint64_t v11 = v207;
                if (v150)
                {
                  int v151 = *(unsigned __int8 *)(v150 + 17);
                  id v152 = *(id *)v131;
                  swift_retain_n();
                  swift_bridgeObjectRetain();
                  if (v151 == 1) {
                    AccessibilityGeometryStorage.updateFrame()();
                  }
                  CGFloat v125 = *(double *)(v150 + 88);
                  CGFloat v126 = *(double *)(v150 + 96);
                  CGFloat v127 = *(double *)(v150 + 104);
                  CGFloat v128 = *(double *)(v150 + 112);
                  char v153 = *(unsigned char *)(v150 + 120);

                  swift_bridgeObjectRelease();
                  swift_release_n();
                  if ((v153 & 1) == 0)
                  {
LABEL_217:
                    swift_bridgeObjectRelease();
                    goto LABEL_218;
                  }
                }
                goto LABEL_305;
              }
            }
            v131 -= 40;
            if (!--v130) {
              goto LABEL_209;
            }
          }
          goto LABEL_284;
        }
        swift_bridgeObjectRetain();
LABEL_209:
        swift_bridgeObjectRelease();
        LOBYTE(v211) = v197;
        uint64_t v11 = v207;
        AccessibilityNode.contentFrameFromChildren(with:)((char *)&v211, (uint64_t)v231);
        if (v232)
        {
LABEL_210:
          uint64_t v8 = v208;
LABEL_256:

LABEL_257:
          uint64_t v7 = v203;
          uint64_t v33 = v258;
          if (!v203) {
            goto LABEL_296;
          }
          goto LABEL_258;
        }
        CGFloat v125 = *(double *)v231;
        CGFloat v126 = *(double *)&v231[1];
        CGFloat v127 = *(double *)&v231[2];
        CGFloat v128 = *(double *)&v231[3];
LABEL_218:
        uint64_t v8 = v208;
      }
      else
      {
        long long v245 = v243[0];
        long long v246 = v243[1];
        unsigned __int8 v247 = v244;
        Path.boundingRect.getter();
        CGRect v264 = CGRectStandardize(v263);
        CGFloat v125 = v264.origin.x;
        CGFloat v126 = v264.origin.y;
        CGFloat v127 = v264.size.width;
        CGFloat v128 = v264.size.height;
        outlined release of Path?((uint64_t)&v228);
      }
      LOBYTE(v211) = a6;
      AccessibilityNode.impliedVisibility(consideringParent:with:)(1, (unsigned __int8 *)&v211, &v217);
      char v154 = v217;
      if (v217 == 2)
      {
        uint64_t v155 = *(void *)v200;
        uint64_t v156 = *(void *)(*(void *)v200 + 16);
        if (v156)
        {
          swift_bridgeObjectRetain();
          uint64_t v157 = v155 + 40 * v156;
          while (v156 <= *(void *)(v155 + 16))
          {
            uint64_t v160 = *(void *)(v157 + 8);
            if (v160)
            {
              id v161 = *(id *)v157;
              if ((*(unsigned char *)(v160 + 17) & 1) == 0
                || (*(unsigned char *)(v160 + 17) = 0, (*(unsigned char *)(v160 + 80) & 1) != 0)
                || (uint64_t v162 = *(void *)(v160 + 24), v162 == 1))
              {
                id v158 = v161;
                swift_retain_n();
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
              }
              else
              {
                long long v215 = 0uLL;
                long long v216 = *(_OWORD *)(v160 + 64);
                uint64_t v213 = 0;
                long long v211 = 0u;
                long long v212 = 0u;
                char v214 = 2;
                char v210 = v162;
                id v158 = v161;
                swift_retain_n();
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                outlined copy of Transaction?(v162);
                CGRect.convert(to:transform:)();
                outlined destroy of CoordinateSpace((uint64_t)&v211);
                outlined consume of Transaction?(v162);
                long long v163 = v216;
                *(_OWORD *)(v160 + 88) = v215;
                *(_OWORD *)(v160 + 104) = v163;
                *(unsigned char *)(v160 + 120) = 0;
              }
              char v159 = *(unsigned char *)(v160 + 120);
              swift_bridgeObjectRelease();

              swift_bridgeObjectRelease();
              swift_release_n();
              if ((v159 & 1) == 0)
              {
                if (v156 > *(void *)(v155 + 16)) {
                  goto LABEL_293;
                }
                uint64_t v177 = *(void *)(v157 + 8);
                uint64_t v11 = v207;
                if (v177)
                {
                  int v178 = *(unsigned __int8 *)(v177 + 17);
                  id v179 = *(id *)v157;
                  swift_retain_n();
                  swift_bridgeObjectRetain();
                  if (v178 == 1) {
                    AccessibilityGeometryStorage.updateFrame()();
                  }
                  CGFloat v164 = *(double *)(v177 + 88);
                  CGFloat v165 = *(double *)(v177 + 96);
                  CGFloat v166 = *(double *)(v177 + 104);
                  CGFloat v167 = *(double *)(v177 + 112);
                  char v180 = *(unsigned char *)(v177 + 120);

                  swift_bridgeObjectRelease();
                  swift_release_n();
                  if ((v180 & 1) == 0) {
                    goto LABEL_267;
                  }
                }
                goto LABEL_304;
              }
            }
            v157 -= 40;
            if (!--v156) {
              goto LABEL_234;
            }
          }
          goto LABEL_283;
        }
        swift_bridgeObjectRetain();
LABEL_234:
        swift_bridgeObjectRelease();
        LOBYTE(v211) = 2;
        uint64_t v8 = v208;
        AccessibilityNode.contentFrameFromChildren(with:)((char *)&v211, (uint64_t)v234);
        if (v235) {
          goto LABEL_255;
        }
        CGFloat v164 = *(double *)v234;
        CGFloat v165 = *(double *)&v234[1];
        CGFloat v166 = *(double *)&v234[2];
        CGFloat v167 = *(double *)&v234[3];
LABEL_261:
        uint64_t v11 = v207;
      }
      else
      {
        AccessibilityNode.contentPath.getter((uint64_t)v233);
        outlined init with take of AnyAccessibilityAction?((uint64_t)v233, (uint64_t)v238, &lazy cache variable for type metadata for Path?, MEMORY[0x1E4F413B0]);
        if (v239 == 255)
        {
          char v198 = v154;
          uint64_t v168 = *(void *)v200;
          uint64_t v169 = *(void *)(*(void *)v200 + 16);
          if (v169)
          {
            swift_bridgeObjectRetain();
            uint64_t v170 = v168 + 40 * v169;
            while (v169 <= *(void *)(v168 + 16))
            {
              uint64_t v173 = *(void *)(v170 + 8);
              if (v173)
              {
                id v174 = *(id *)v170;
                if ((*(unsigned char *)(v173 + 17) & 1) == 0
                  || (*(unsigned char *)(v173 + 17) = 0, (*(unsigned char *)(v173 + 80) & 1) != 0)
                  || (uint64_t v175 = *(void *)(v173 + 24), v175 == 1))
                {
                  id v171 = v174;
                  swift_retain_n();
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRetain();
                }
                else
                {
                  long long v215 = 0uLL;
                  long long v216 = *(_OWORD *)(v173 + 64);
                  uint64_t v213 = 0;
                  long long v211 = 0u;
                  long long v212 = 0u;
                  char v214 = 2;
                  char v210 = v175;
                  id v171 = v174;
                  swift_retain_n();
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRetain();
                  outlined copy of Transaction?(v175);
                  CGRect.convert(to:transform:)();
                  outlined destroy of CoordinateSpace((uint64_t)&v211);
                  outlined consume of Transaction?(v175);
                  long long v176 = v216;
                  *(_OWORD *)(v173 + 88) = v215;
                  *(_OWORD *)(v173 + 104) = v176;
                  *(unsigned char *)(v173 + 120) = 0;
                }
                char v172 = *(unsigned char *)(v173 + 120);
                swift_bridgeObjectRelease();

                swift_bridgeObjectRelease();
                swift_release_n();
                if ((v172 & 1) == 0)
                {
                  if (v169 > *(void *)(v168 + 16)) {
                    goto LABEL_295;
                  }
                  uint64_t v182 = *(void *)(v170 + 8);
                  uint64_t v11 = v207;
                  if (v182)
                  {
                    int v183 = *(unsigned __int8 *)(v182 + 17);
                    id v184 = *(id *)v170;
                    swift_retain_n();
                    swift_bridgeObjectRetain();
                    if (v183 == 1) {
                      AccessibilityGeometryStorage.updateFrame()();
                    }
                    CGFloat v164 = *(double *)(v182 + 88);
                    CGFloat v165 = *(double *)(v182 + 96);
                    CGFloat v166 = *(double *)(v182 + 104);
                    CGFloat v167 = *(double *)(v182 + 112);
                    char v185 = *(unsigned char *)(v182 + 120);

                    swift_bridgeObjectRelease();
                    swift_release_n();
                    if ((v185 & 1) == 0)
                    {
LABEL_267:
                      swift_bridgeObjectRelease();
                      uint64_t v8 = v208;
                      goto LABEL_268;
                    }
                  }
                  goto LABEL_306;
                }
              }
              v170 -= 40;
              if (!--v169) {
                goto LABEL_254;
              }
            }
LABEL_285:
            __break(1u);
LABEL_286:
            __break(1u);
LABEL_287:
            __break(1u);
LABEL_288:
            __break(1u);
LABEL_289:
            __break(1u);
LABEL_290:
            __break(1u);
LABEL_291:
            __break(1u);
LABEL_292:
            __break(1u);
LABEL_293:
            __break(1u);
LABEL_294:
            __break(1u);
LABEL_295:
            __break(1u);
LABEL_296:
            __break(1u);
            goto LABEL_297;
          }
          swift_bridgeObjectRetain();
LABEL_254:
          swift_bridgeObjectRelease();
          LOBYTE(v211) = v198;
          uint64_t v8 = v208;
          AccessibilityNode.contentFrameFromChildren(with:)((char *)&v211, (uint64_t)v236);
          if (v237)
          {
LABEL_255:
            uint64_t v11 = v207;
            goto LABEL_256;
          }
          CGFloat v164 = *(double *)v236;
          CGFloat v165 = *(double *)&v236[1];
          CGFloat v166 = *(double *)&v236[2];
          CGFloat v167 = *(double *)&v236[3];
          goto LABEL_261;
        }
        long long v240 = v238[0];
        long long v241 = v238[1];
        unsigned __int8 v242 = v239;
        Path.boundingRect.getter();
        CGRect v266 = CGRectStandardize(v265);
        CGFloat v164 = v266.origin.x;
        CGFloat v165 = v266.origin.y;
        CGFloat v166 = v266.size.width;
        CGFloat v167 = v266.size.height;
        outlined release of Path?((uint64_t)v233);
      }
LABEL_268:
      LOBYTE(v211) = v206;
      char v124 = CGRect.compare(to:layoutDirection:)((unsigned __int8 *)&v211, v164, v165, v166, v167, v125, v126, v127, v128);

      if (v124 == 2) {
        goto LABEL_257;
      }
      goto LABEL_171;
    }
    char v124 = v113;

LABEL_171:
    uint64_t v7 = v203;
    uint64_t v33 = v258;
    if ((v124 & 1) == 0) {
      goto LABEL_6;
    }
LABEL_172:
    if (!v7) {
      goto LABEL_296;
    }
LABEL_258:
    uint64_t v181 = 8 * v33;
    uint64_t v9 = *(void **)(v7 + 8 * v33);
    *(void *)(v7 + v181) = *(void *)(v7 + 8 * v209);
    *(void *)(v7 + 8 * v209) = v9;
    a3 = v209;
    if (v209 == a1) {
      goto LABEL_6;
    }
  }
  swift_bridgeObjectRetain();
  uint64_t v21 = v19 + 40 * v20;
  while (1)
  {
    if (v20 > *(void *)(v19 + 16))
    {
      __break(1u);
      goto LABEL_277;
    }
    uint64_t v24 = *(void *)(v21 + 8);
    if (v24)
    {
      long long v25 = *(void **)v21;
      if ((*(unsigned char *)(v24 + 17) & 1) == 0
        || (*(unsigned char *)(v24 + 17) = 0, (*(unsigned char *)(v24 + 80) & 1) != 0)
        || (uint64_t v26 = *(void *)(v24 + 24), v26 == 1))
      {
        id v22 = v25;
        swift_retain_n();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
      else
      {
        long long v215 = 0uLL;
        long long v216 = *(_OWORD *)(v24 + 64);
        uint64_t v213 = 0;
        long long v211 = 0u;
        long long v212 = 0u;
        char v214 = 2;
        char v210 = v26;
        id v22 = v25;
        swift_retain_n();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        outlined copy of Transaction?(v26);
        CGRect.convert(to:transform:)();
        outlined destroy of CoordinateSpace((uint64_t)&v211);
        outlined consume of Transaction?(v26);
        long long v27 = v216;
        *(_OWORD *)(v24 + 88) = v215;
        *(_OWORD *)(v24 + 104) = v27;
        *(unsigned char *)(v24 + 120) = 0;
      }
      char v23 = *(unsigned char *)(v24 + 120);
      swift_bridgeObjectRelease();

      swift_bridgeObjectRelease();
      swift_release_n();
      if ((v23 & 1) == 0) {
        break;
      }
    }
    v21 -= 40;
    if (!--v20)
    {
      CGFloat x = 0.0;
      char v29 = 1;
      CGFloat y = 0.0;
      CGFloat width = 0.0;
      CGFloat height = 0.0;
      goto LABEL_40;
    }
  }
  if (v20 > *(void *)(v19 + 16)) {
    goto LABEL_286;
  }
  uint64_t v34 = *(void *)(v21 + 8);
  if (v34)
  {
    char v35 = *(void **)v21;
    if (*(unsigned char *)(v34 + 17) != 1
      || (*(unsigned char *)(v34 + 17) = 0, (*(unsigned char *)(v34 + 80) & 1) != 0)
      || (uint64_t v36 = *(void *)(v34 + 24), v36 == 1))
    {
      id v37 = v35;
      swift_retain_n();
      swift_bridgeObjectRetain();
    }
    else
    {
      long long v215 = 0uLL;
      long long v216 = *(_OWORD *)(v34 + 64);
      uint64_t v213 = 0;
      long long v211 = 0u;
      long long v212 = 0u;
      char v214 = 2;
      char v210 = v36;
      id v37 = v35;
      swift_retain_n();
      swift_bridgeObjectRetain();
      outlined copy of Transaction?(v36);
      CGRect.convert(to:transform:)();
      outlined destroy of CoordinateSpace((uint64_t)&v211);
      outlined consume of Transaction?(v36);
      long long v148 = v216;
      *(_OWORD *)(v34 + 88) = v215;
      *(_OWORD *)(v34 + 104) = v148;
      *(unsigned char *)(v34 + 120) = 0;
    }
    CGFloat x = *(double *)(v34 + 88);
    CGFloat y = *(double *)(v34 + 96);
    CGFloat width = *(double *)(v34 + 104);
    CGFloat height = *(double *)(v34 + 112);
    char v38 = *(unsigned char *)(v34 + 120);

    swift_bridgeObjectRelease();
    swift_release_n();
    if ((v38 & 1) == 0)
    {
      char v29 = 0;
LABEL_40:
      uint64_t v8 = v208;
      goto LABEL_41;
    }
  }
LABEL_297:
  __break(1u);
LABEL_298:
  __break(1u);
LABEL_299:
  __break(1u);
LABEL_300:
  __break(1u);
LABEL_301:
  __break(1u);
LABEL_302:
  __break(1u);
LABEL_303:
  __break(1u);
LABEL_304:
  __break(1u);
LABEL_305:
  __break(1u);
LABEL_306:
  __break(1u);
}

uint64_t specialized _merge<A>(low:mid:high:buffer:by:)(id *__src, id *a2, unint64_t a3, uint64_t *__dst, char a5, char a6, unsigned __int8 a7)
{
  uint64_t v7 = __dst;
  uint64_t v9 = a2;
  int64_t v11 = (char *)a2 - (char *)__src;
  int64_t v12 = (char *)a2 - (char *)__src + 7;
  if ((char *)a2 - (char *)__src >= 0) {
    int64_t v12 = (char *)a2 - (char *)__src;
  }
  uint64_t v13 = v12 >> 3;
  uint64_t v14 = a3 - (void)a2;
  uint64_t v15 = a3 - (void)a2 + 7;
  if ((uint64_t)(a3 - (void)a2) >= 0) {
    uint64_t v15 = a3 - (void)a2;
  }
  uint64_t v16 = v15 >> 3;
  int v49 = __src;
  long long v48 = __dst;
  if (v13 >= v15 >> 3)
  {
    if (v14 >= -7)
    {
      if (__dst != (uint64_t *)a2 || &a2[v16] <= (id *)__dst) {
        memmove(__dst, a2, 8 * v16);
      }
      uint64_t v26 = &v7[v16];
      uint64_t v47 = v26;
      int v49 = v9;
      if (__src < v9 && v14 >= 8)
      {
        long long v39 = __src;
        long long v27 = (uint64_t *)(a3 - 8);
        char v28 = v9;
        while (1)
        {
          uint64_t v40 = v9;
          char v29 = v7;
          char v30 = v26;
          char v31 = (void *)*--v26;
          id v46 = v31;
          long long v32 = *--v28;
          uint64_t v45 = v32;
          id v33 = v46;
          id v34 = v32;
          char v35 = closure #1 in Sequence<>.sorted(with:explicitPriorityOnly:parentVisibility:)((uint64_t *)&v46, (uint64_t *)&v45, a5 & 1, a6, a7);
          if (v44) {
            break;
          }
          char v36 = v35;
          uint64_t v44 = 0;
          id v37 = (id *)(v27 + 1);

          if (v36)
          {
            uint64_t v7 = v29;
            uint64_t v26 = v30;
            if (v37 != v40 || v27 >= (uint64_t *)v40) {
              *long long v27 = (uint64_t)*v28;
            }
            int v49 = v28;
          }
          else
          {
            uint64_t v47 = v26;
            uint64_t v7 = v29;
            if (v37 < (id *)v30 || v27 >= v30 || v37 != (id *)v30) {
              *long long v27 = *v26;
            }
            char v28 = v40;
          }
          if (v28 > v39)
          {
            --v27;
            uint64_t v9 = v28;
            if (v26 > v7) {
              continue;
            }
          }
          goto LABEL_48;
        }
      }
      goto LABEL_48;
    }
  }
  else if (v11 >= -7)
  {
    if (__dst != (uint64_t *)__src || &__src[v13] <= (id *)__dst) {
      memmove(__dst, __src, 8 * v13);
    }
    double v17 = &v7[v13];
    uint64_t v47 = v17;
    if ((unint64_t)v9 < a3 && v11 >= 8)
    {
      uint64_t v18 = __src;
      while (1)
      {
        id v46 = *v9;
        uint64_t v19 = v7;
        uint64_t v45 = (void *)*v7;
        uint64_t v20 = v45;
        id v21 = v46;
        id v22 = v20;
        char v23 = closure #1 in Sequence<>.sorted(with:explicitPriorityOnly:parentVisibility:)((uint64_t *)&v46, (uint64_t *)&v45, a5 & 1, a6, a7);
        if (v44) {
          break;
        }
        char v24 = v23;

        if (v24)
        {
          long long v25 = v9 + 1;
          uint64_t v7 = v19;
          if (v18 < v9 || v18 >= v25 || v18 != v9) {
            *uint64_t v18 = *v9;
          }
        }
        else
        {
          if (v18 != (id *)v19) {
            *uint64_t v18 = (id)*v19;
          }
          uint64_t v7 = v19 + 1;
          long long v48 = v19 + 1;
          long long v25 = v9;
        }
        uint64_t v44 = 0;
        int v49 = ++v18;
        if (v7 < v17)
        {
          uint64_t v9 = v25;
          if ((unint64_t)v25 < a3) {
            continue;
          }
        }
        goto LABEL_48;
      }
    }
LABEL_48:
    specialized $defer #1 <A>() in _merge<A>(low:mid:high:buffer:by:)(&v49, &v48, &v47);
    return 1;
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void *specialized Slice._copyContents(initializing:)(void *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (!a2) {
    goto LABEL_5;
  }
  uint64_t v10 = a3;
  if (!a3)
  {
LABEL_6:
    uint64_t v11 = a4;
LABEL_7:
    *uint64_t result = a4;
    result[1] = a5;
    result[2] = a6;
    result[3] = a7;
    result[4] = v11;
    return (void *)v10;
  }
  if ((a3 & 0x8000000000000000) == 0)
  {
    if (a5 == a4)
    {
LABEL_5:
      uint64_t v10 = 0;
      goto LABEL_6;
    }
    id v21 = result;
    uint64_t v22 = a7;
    if (a5 <= a4)
    {
LABEL_16:
      __break(1u);
LABEL_17:
      uint64_t v11 = a5;
      uint64_t v10 = a5 - a4;
LABEL_18:
      swift_retain();
      swift_retain();
      outlined copy of Text.LineStyle?(v7, v25);
      swift_retain();
      uint64_t result = v21;
      a7 = v22;
      goto LABEL_7;
    }
    uint64_t v13 = 0;
    uint64_t v11 = a4 + 1;
    uint64_t v23 = a6 + 56 * a4;
    uint64_t v14 = 1;
    while ((a4 & 0x8000000000000000) == 0)
    {
      if ((unint64_t)(v11 - 1) >= *(void *)(a6 + 16)) {
        goto LABEL_20;
      }
      uint64_t v15 = a2 + v13;
      uint64_t v16 = *(void *)(v23 + v13 + 40);
      uint64_t v7 = *(void *)(v23 + v13 + 48);
      uint64_t v17 = *(void *)(v23 + v13 + 72);
      uint64_t v18 = *(void *)(v23 + v13 + 80);
      long long v19 = *(_OWORD *)(v23 + v13 + 56);
      *(void *)uint64_t v15 = *(void *)(v23 + v13 + 32);
      *(void *)(v15 + 8) = v16;
      *(void *)(v15 + 16) = v7;
      *(_OWORD *)(v15 + 24) = v19;
      *(void *)(v15 + 40) = v17;
      *(void *)(v15 + 48) = v18;
      uint64_t v25 = v19;
      if (v10 == v14) {
        goto LABEL_18;
      }
      if (a5 == v11) {
        goto LABEL_17;
      }
      swift_retain();
      swift_retain();
      outlined copy of Text.LineStyle?(v7, v25);
      uint64_t result = (void *)swift_retain();
      if (v11 >= a4)
      {
        ++v14;
        v13 += 56;
        if (v11++ < a5) {
          continue;
        }
      }
      goto LABEL_16;
    }
    __break(1u);
LABEL_20:
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t specialized closure #1 in Collection<>.filterVisible(_:)(uint64_t *a1, uint64_t (*a2)(uint64_t))
{
  return specialized closure #1 in Collection<>.filterVisible(_:)(*a1, a2) & 1;
}

unint64_t lazy protocol witness table accessor for type AccessibilityPropertiesEntry<AccessibilityChildBehaviorKind?> and conformance AccessibilityPropertiesEntry<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type AccessibilityPropertiesEntry<AccessibilityChildBehaviorKind?> and conformance AccessibilityPropertiesEntry<A>;
  if (!lazy protocol witness table cache variable for type AccessibilityPropertiesEntry<AccessibilityChildBehaviorKind?> and conformance AccessibilityPropertiesEntry<A>)
  {
    _s7SwiftUI28AccessibilityPropertiesEntryVyAA0C12LabelStorageVSgGMaTm_2(255, (unint64_t *)&lazy cache variable for type metadata for AccessibilityPropertiesEntry<AccessibilityChildBehaviorKind?>, &lazy cache variable for type metadata for AccessibilityChildBehaviorKind?, MEMORY[0x1E4F41158]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityPropertiesEntry<AccessibilityChildBehaviorKind?> and conformance AccessibilityPropertiesEntry<A>);
  }
  return result;
}

id _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs12Zip2SequenceVySay7SwiftUI23AccessibilityPropertiesVGSayAH0H4NodeCGG_SayAH4TextVG_SayAH03AnyH6ActionVGts5NeverOTg503_s7f4UI23hi6VAA0C4j7CSayAA4k9VGSayAA03l2C6m23VGIgngoo_AC_AEtAH_AKts5N11OIegnrzr_TRAjmrUIgngoo_Tf1cn_nTf4ng_n(uint64_t a1, unint64_t a2, uint64_t (*a3)(uint64_t *, id))
{
  unint64_t v3 = a2;
  unint64_t v4 = *(void *)(a1 + 16);
  unint64_t v38 = a2 >> 62;
  if (a2 >> 62) {
    goto LABEL_46;
  }
  uint64_t v5 = *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    uint64_t v6 = v5 >= (uint64_t)v4 ? v4 : v5;
    uint64_t v41 = MEMORY[0x1E4FBC860];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v6 & ~(v6 >> 63), 0);
    if (v6 < 0) {
      break;
    }
    uint64_t v31 = v5;
    int64_t v32 = v4;
    uint64_t v7 = v41;
    unint64_t v36 = v3;
    if (v6)
    {
      uint64_t v8 = v3 & 0xFFFFFFFFFFFFFF8;
      unint64_t v34 = v3 & 0xC000000000000001;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      unint64_t v9 = 0;
      while (v6 != v9)
      {
        uint64_t v10 = *(void *)(a1 + 32 + 8 * v9);
        if (v38)
        {
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          uint64_t v11 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
        }
        else
        {
          uint64_t v11 = *(void *)(v8 + 16);
          swift_bridgeObjectRetain();
        }
        if (v9 == v11) {
          goto LABEL_48;
        }
        if (v34)
        {
          id result = (id)MEMORY[0x18C117680](v9, v3);
        }
        else
        {
          if (v9 >= *(void *)(v8 + 16)) {
            goto LABEL_43;
          }
          id result = *(id *)(v3 + 8 * v9 + 32);
        }
        uint64_t v13 = result;
        uint64_t v39 = v10;
        id v40 = result;
        if (!v10) {
          goto LABEL_49;
        }
        uint64_t v14 = a3(&v39, result);
        uint64_t v16 = v15;

        swift_bridgeObjectRelease();
        uint64_t v41 = v7;
        unint64_t v4 = *(void *)(v7 + 16);
        unint64_t v17 = *(void *)(v7 + 24);
        if (v4 >= v17 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v17 > 1), v4 + 1, 1);
          uint64_t v7 = v41;
        }
        ++v9;
        *(void *)(v7 + 16) = v4 + 1;
        uint64_t v18 = v7 + 16 * v4;
        *(void *)(v18 + 32) = v14;
        *(void *)(v18 + 40) = v16;
        unint64_t v3 = v36;
        if (v6 == v9) {
          goto LABEL_24;
        }
      }
      __break(1u);
LABEL_43:
      __break(1u);
    }
    else
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
LABEL_24:
      uint64_t v19 = v32;
      if (v32 <= v31)
      {
LABEL_39:
        swift_bridgeObjectRelease();
LABEL_41:
        swift_bridgeObjectRelease();
        return (id)v7;
      }
      uint64_t v20 = v3 & 0xFFFFFFFFFFFFFF8;
      unint64_t v35 = v3 & 0xC000000000000001;
      while (v6 < v19)
      {
        uint64_t v21 = *(void *)(a1 + 8 * v6 + 32);
        if (v38)
        {
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          uint64_t v23 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
          if (v6 == v23)
          {
LABEL_40:
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            goto LABEL_41;
          }
        }
        else
        {
          uint64_t v22 = *(void *)(v20 + 16);
          swift_bridgeObjectRetain();
          if (v6 == v22) {
            goto LABEL_40;
          }
        }
        if (v35)
        {
          id v24 = (id)MEMORY[0x18C117680](v6, v3);
        }
        else
        {
          if ((unint64_t)v6 >= *(void *)(v20 + 16)) {
            goto LABEL_45;
          }
          id v24 = *(id *)(v3 + 8 * v6 + 32);
        }
        uint64_t v25 = v24;
        uint64_t v39 = v21;
        id v40 = v24;
        uint64_t v26 = a3(&v39, v24);
        uint64_t v28 = v27;

        swift_bridgeObjectRelease();
        uint64_t v41 = v7;
        unint64_t v4 = *(void *)(v7 + 16);
        unint64_t v29 = *(void *)(v7 + 24);
        if (v4 >= v29 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v29 > 1), v4 + 1, 1);
          uint64_t v7 = v41;
        }
        ++v6;
        *(void *)(v7 + 16) = v4 + 1;
        uint64_t v30 = v7 + 16 * v4;
        *(void *)(v30 + 32) = v26;
        *(void *)(v30 + 40) = v28;
        uint64_t v19 = v32;
        unint64_t v3 = v36;
        if (v32 == v6) {
          goto LABEL_39;
        }
      }
    }
    __break(1u);
LABEL_45:
    __break(1u);
LABEL_46:
    swift_bridgeObjectRetain();
    uint64_t v5 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  __break(1u);
LABEL_48:
  id result = (id)swift_bridgeObjectRelease();
LABEL_49:
  __break(1u);
  return result;
}

uint64_t specialized Sequence.filter(_:)(unint64_t a1, uint64_t (*a2)(unsigned char *))
{
  uint64_t v19 = MEMORY[0x1E4FBC860];
  if (a1 >> 62) {
    goto LABEL_28;
  }
  uint64_t v3 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v3)
  {
    while (1)
    {
      unint64_t v4 = 0;
      unint64_t v5 = a1 & 0xC000000000000001;
      uint64_t v6 = a1 & 0xFFFFFFFFFFFFFF8;
      uint64_t v7 = a2;
      while (v5)
      {
        uint64_t v8 = (unsigned char *)MEMORY[0x18C117680](v4, a1);
LABEL_9:
        unint64_t v9 = v8;
        unint64_t v10 = v4 + 1;
        if (__OFADD__(v4, 1)) {
          goto LABEL_27;
        }
        AccessibilityNode.visibility.getter((int *)&v18);
        if ((v18 & 4) == 0 && ((v18 & 8) == 0 || (BYTE4(v18) & 4) != 0))
        {
          unint64_t v11 = v5;
          uint64_t v12 = OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_cachedIsPlaceholderOrIgnored;
          int v13 = v9[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_cachedIsPlaceholderOrIgnored];
          if (v13 == 2)
          {
            AccessibilityNode.traits.getter((uint64_t *)&v18);
            __int16 v14 = v18;
            AccessibilityNode.traits.getter((uint64_t *)&v18);
            if ((v18 & 0x20) == 0 && (v14 & 0x100) == 0)
            {
              v9[v12] = 0;
              uint64_t v7 = a2;
              unint64_t v5 = v11;
LABEL_19:
              if (!v7 || (v7(v9) & 1) != 0)
              {
                specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
                specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
                unint64_t v5 = v11;
                specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
                specialized ContiguousArray._endMutation()();
LABEL_23:
                uint64_t v6 = a1 & 0xFFFFFFFFFFFFFF8;
                goto LABEL_5;
              }
LABEL_22:

              goto LABEL_23;
            }
            long long v18 = *(_OWORD *)&v9[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_environment];
            EnvironmentValues.redactionReasons.getter();
            LOBYTE(v13) = v17;
            v9[v12] = v17 & 1;
            uint64_t v7 = a2;
          }
          unint64_t v5 = v11;
          if ((v13 & 1) == 0) {
            goto LABEL_19;
          }
          goto LABEL_22;
        }

LABEL_5:
        ++v4;
        if (v10 == v3) {
          return v19;
        }
      }
      if (v4 < *(void *)(v6 + 16)) {
        break;
      }
      __break(1u);
LABEL_27:
      __break(1u);
LABEL_28:
      uint64_t v3 = _CocoaArrayWrapper.endIndex.getter();
      if (!v3) {
        return MEMORY[0x1E4FBC860];
      }
    }
    uint64_t v8 = *(id *)(a1 + 8 * v4 + 32);
    goto LABEL_9;
  }
  return MEMORY[0x1E4FBC860];
}

uint64_t partial apply for closure #1 in static AccessibilityChildBehavior.Combine.combine(children:options:)(uint64_t *a1, void *a2)
{
  return closure #1 in static AccessibilityChildBehavior.Combine.combine(children:options:)(a1, a2, *(void *)(v2 + 16), *(void *)(v2 + 24), *(void *)(v2 + 32), *(void *)(v2 + 40), *(char **)(v2 + 48), *(uint64_t **)(v2 + 56));
}

uint64_t outlined init with take of AnyAccessibilityAction?(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t a4)
{
  _sypSgMaTm_9(0, a3, a4, MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a2, a1, v6);
  return a2;
}

uint64_t outlined init with copy of DefaultIndices<CountingIndexCollection<ShadowRowCollection<TableDataSourceAdaptor>>>(uint64_t a1, uint64_t a2)
{
  type metadata accessor for DefaultIndices<CountingIndexCollection<ShadowRowCollection<TableDataSourceAdaptor>>>(0, (unint64_t *)&lazy cache variable for type metadata for DefaultIndices<CountingIndexCollection<ShadowRowCollection<TableDataSourceAdaptor>>>, MEMORY[0x1E4FBAF10]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with copy of _ArchivedViewStates(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t outlined destroy of DefaultIndices<CountingIndexCollection<ShadowRowCollection<TableDataSourceAdaptor>>>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t))
{
  type metadata accessor for DefaultIndices<CountingIndexCollection<ShadowRowCollection<TableDataSourceAdaptor>>>(0, a2, a3);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  return a1;
}

void type metadata accessor for DefaultIndices<CountingIndexCollection<ShadowRowCollection<TableDataSourceAdaptor>>>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    type metadata accessor for CountingIndexCollection<ShadowRowCollection<TableDataSourceAdaptor>>();
    uint64_t v7 = v6;
    uint64_t v8 = lazy protocol witness table accessor for type CountingIndexCollection<ShadowRowCollection<TableDataSourceAdaptor>> and conformance CountingIndexCollection<A>(&lazy protocol witness table cache variable for type CountingIndexCollection<ShadowRowCollection<TableDataSourceAdaptor>> and conformance CountingIndexCollection<A>, (void (*)(uint64_t))type metadata accessor for CountingIndexCollection<ShadowRowCollection<TableDataSourceAdaptor>>);
    unint64_t v9 = a3(a1, v7, v8);
    if (!v10) {
      atomic_store(v9, a2);
    }
  }
}

uint64_t outlined destroy of IndexingIterator<_ArchivedViewStates>(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_18824B5D0()
{
  return 16;
}

__n128 sub_18824B5DC(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

void type metadata accessor for IndexingIterator<CountingIndexCollection<ShadowSectionCollection<TableDataSourceAdaptor>>>()
{
  if (!lazy cache variable for type metadata for IndexingIterator<CountingIndexCollection<ShadowSectionCollection<TableDataSourceAdaptor>>>)
  {
    type metadata accessor for CountingIndexCollection<ShadowSectionCollection<TableDataSourceAdaptor>>();
    lazy protocol witness table accessor for type CountingIndexCollection<ShadowRowCollection<TableDataSourceAdaptor>> and conformance CountingIndexCollection<A>(&lazy protocol witness table cache variable for type CountingIndexCollection<ShadowSectionCollection<TableDataSourceAdaptor>> and conformance CountingIndexCollection<A>, (void (*)(uint64_t))type metadata accessor for CountingIndexCollection<ShadowSectionCollection<TableDataSourceAdaptor>>);
    unint64_t v0 = type metadata accessor for IndexingIterator();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for IndexingIterator<CountingIndexCollection<ShadowSectionCollection<TableDataSourceAdaptor>>>);
    }
  }
}

uint64_t lazy protocol witness table accessor for type CountingIndexCollection<ShadowRowCollection<TableDataSourceAdaptor>> and conformance CountingIndexCollection<A>(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t outlined destroy of IndexingIterator<SubviewCollection>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void), uint64_t a4)
{
  type metadata accessor for ShadowRowCollection<TableDataSourceAdaptor>(0, a2, a3, a4, MEMORY[0x1E4FBBC18]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(a1, v5);
  return a1;
}

uint64_t outlined init with copy of TableColumnCollection.Entry?(uint64_t a1, uint64_t a2)
{
  _s10Foundation14DateComponentsVSgMaTm_0(0, &lazy cache variable for type metadata for TableColumnCollection.Entry?, type metadata accessor for TableColumnCollection.Entry, MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with copy of SubviewCollection(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t outlined destroy of SubviewCollection(uint64_t a1)
{
  return a1;
}

unint64_t lazy protocol witness table accessor for type SubviewCollection and conformance SubviewCollection()
{
  unint64_t result = lazy protocol witness table cache variable for type SubviewCollection and conformance SubviewCollection;
  if (!lazy protocol witness table cache variable for type SubviewCollection and conformance SubviewCollection)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SubviewCollection and conformance SubviewCollection);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SubviewCollection and conformance SubviewCollection;
  if (!lazy protocol witness table cache variable for type SubviewCollection and conformance SubviewCollection)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SubviewCollection and conformance SubviewCollection);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SubviewCollection and conformance SubviewCollection;
  if (!lazy protocol witness table cache variable for type SubviewCollection and conformance SubviewCollection)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SubviewCollection and conformance SubviewCollection);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SubviewCollection and conformance SubviewCollection;
  if (!lazy protocol witness table cache variable for type SubviewCollection and conformance SubviewCollection)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SubviewCollection and conformance SubviewCollection);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SubviewCollection and conformance SubviewCollection;
  if (!lazy protocol witness table cache variable for type SubviewCollection and conformance SubviewCollection)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SubviewCollection and conformance SubviewCollection);
  }
  return result;
}

uint64_t outlined init with take of AnimationTimelineSchedule.Entries(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t outlined destroy of DateComponents?(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t))
{
  _s10Foundation14DateComponentsVSgMaTm_0(0, a2, a3, MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  return a1;
}

unint64_t lazy protocol witness table accessor for type AccessibilityChildBehavior.Automation and conformance AccessibilityChildBehavior.Automation()
{
  unint64_t result = lazy protocol witness table cache variable for type AccessibilityChildBehavior.Automation and conformance AccessibilityChildBehavior.Automation;
  if (!lazy protocol witness table cache variable for type AccessibilityChildBehavior.Automation and conformance AccessibilityChildBehavior.Automation)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityChildBehavior.Automation and conformance AccessibilityChildBehavior.Automation);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AccessibilityChildBehavior.Automation and conformance AccessibilityChildBehavior.Automation;
  if (!lazy protocol witness table cache variable for type AccessibilityChildBehavior.Automation and conformance AccessibilityChildBehavior.Automation)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityChildBehavior.Automation and conformance AccessibilityChildBehavior.Automation);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AccessibilityChildBehavior.Automation and conformance AccessibilityChildBehavior.Automation;
  if (!lazy protocol witness table cache variable for type AccessibilityChildBehavior.Automation and conformance AccessibilityChildBehavior.Automation)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityChildBehavior.Automation and conformance AccessibilityChildBehavior.Automation);
  }
  return result;
}

ValueMetadata *type metadata accessor for AccessibilityChildBehavior.Automation()
{
  return &type metadata for AccessibilityChildBehavior.Automation;
}

ValueMetadata *type metadata accessor for AccessibilityChildBehavior.Ignore()
{
  return &type metadata for AccessibilityChildBehavior.Ignore;
}

ValueMetadata *type metadata accessor for AccessibilityChildBehavior.Contain()
{
  return &type metadata for AccessibilityChildBehavior.Contain;
}

ValueMetadata *type metadata accessor for AccessibilityChildBehavior.Combine.Options()
{
  return &type metadata for AccessibilityChildBehavior.Combine.Options;
}

unint64_t lazy protocol witness table accessor for type AccessibilityChildBehavior.Combine.Options and conformance AccessibilityChildBehavior.Combine.Options()
{
  unint64_t result = lazy protocol witness table cache variable for type AccessibilityChildBehavior.Combine.Options and conformance AccessibilityChildBehavior.Combine.Options;
  if (!lazy protocol witness table cache variable for type AccessibilityChildBehavior.Combine.Options and conformance AccessibilityChildBehavior.Combine.Options)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityChildBehavior.Combine.Options and conformance AccessibilityChildBehavior.Combine.Options);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AccessibilityChildBehavior.Combine.Options and conformance AccessibilityChildBehavior.Combine.Options;
  if (!lazy protocol witness table cache variable for type AccessibilityChildBehavior.Combine.Options and conformance AccessibilityChildBehavior.Combine.Options)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityChildBehavior.Combine.Options and conformance AccessibilityChildBehavior.Combine.Options);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AccessibilityChildBehavior.Combine.Options and conformance AccessibilityChildBehavior.Combine.Options;
  if (!lazy protocol witness table cache variable for type AccessibilityChildBehavior.Combine.Options and conformance AccessibilityChildBehavior.Combine.Options)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityChildBehavior.Combine.Options and conformance AccessibilityChildBehavior.Combine.Options);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AccessibilityChildBehavior.Combine.Options and conformance AccessibilityChildBehavior.Combine.Options;
  if (!lazy protocol witness table cache variable for type AccessibilityChildBehavior.Combine.Options and conformance AccessibilityChildBehavior.Combine.Options)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityChildBehavior.Combine.Options and conformance AccessibilityChildBehavior.Combine.Options);
  }
  return result;
}

unint64_t instantiation function for generic protocol witness table for AccessibilityChildBehavior.Automation(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type AccessibilityChildBehavior.Automation and conformance AccessibilityChildBehavior.Automation();
  *(void *)(a1 + 8) = result;
  return result;
}

BOOL specialized AccessibilityChildBehavior.Contain.willCreateNode(for:)(unint64_t a1)
{
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v10 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v10 != 1) {
      return 1;
    }
  }
  else if (*(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10) != 1)
  {
    return 1;
  }
  if ((a1 & 0xC000000000000001) != 0)
  {
    id v2 = (id)MEMORY[0x18C117680](0, a1);
  }
  else
  {
    if (!*(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      goto LABEL_20;
    }
    id v2 = *(id *)(a1 + 32);
  }
  uint64_t v3 = v2;
  AccessibilityNode.visibility.getter(v11);

  if ((v11[0] & 2) != 0) {
    return 0;
  }
  if ((v11[0] & 0x41) == 1)
  {
    if ((a1 & 0xC000000000000001) != 0) {
      uint64_t v4 = (char *)MEMORY[0x18C117680](0, a1);
    }
    else {
      uint64_t v4 = (char *)*(id *)(a1 + 32);
    }
    uint64_t v6 = v4;
    uint64_t v7 = &v4[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_children];
    swift_beginAccess();
    unint64_t v8 = *(void *)v7;
    swift_bridgeObjectRetain();

    if (!(v8 >> 62))
    {
      uint64_t v9 = *(void *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10);
LABEL_14:
      swift_bridgeObjectRelease();
      return v9 == 0;
    }
LABEL_20:
    swift_bridgeObjectRetain();
    uint64_t v9 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    goto LABEL_14;
  }
  return 1;
}

unint64_t lazy protocol witness table accessor for type AccessibilityChildBehavior.Automatic and conformance AccessibilityChildBehavior.Automatic()
{
  unint64_t result = lazy protocol witness table cache variable for type AccessibilityChildBehavior.Automatic and conformance AccessibilityChildBehavior.Automatic;
  if (!lazy protocol witness table cache variable for type AccessibilityChildBehavior.Automatic and conformance AccessibilityChildBehavior.Automatic)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityChildBehavior.Automatic and conformance AccessibilityChildBehavior.Automatic);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AccessibilityChildBehavior.Automatic and conformance AccessibilityChildBehavior.Automatic;
  if (!lazy protocol witness table cache variable for type AccessibilityChildBehavior.Automatic and conformance AccessibilityChildBehavior.Automatic)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityChildBehavior.Automatic and conformance AccessibilityChildBehavior.Automatic);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AccessibilityChildBehavior.Automatic and conformance AccessibilityChildBehavior.Automatic;
  if (!lazy protocol witness table cache variable for type AccessibilityChildBehavior.Automatic and conformance AccessibilityChildBehavior.Automatic)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityChildBehavior.Automatic and conformance AccessibilityChildBehavior.Automatic);
  }
  return result;
}

ValueMetadata *type metadata accessor for AccessibilityChildBehavior.Automatic()
{
  return &type metadata for AccessibilityChildBehavior.Automatic;
}

ValueMetadata *type metadata accessor for AccessibilityChildBehavior.Host()
{
  return &type metadata for AccessibilityChildBehavior.Host;
}

unint64_t instantiation function for generic protocol witness table for AccessibilityChildBehavior.Automatic(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type AccessibilityChildBehavior.Automatic and conformance AccessibilityChildBehavior.Automatic();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySi6offset_7SwiftUI17AccessibilityNodeC7elementtG_AIs5NeverOTg505_sST7e6UIAA17gh2C7B125RtzrlE24sortedSupplementaryItemsSayACGyFACSi6offset_AC7elementt_tcfu_33_0d1082609908173d57d8a66622345aa3SiAH_AcItACTf3nnnpk_nTf1cn_n(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t result = MEMORY[0x1E4FBC860];
  if (v2)
  {
    uint64_t v7 = MEMORY[0x1E4FBC860];
    specialized ContiguousArray.reserveCapacity(_:)();
    uint64_t v4 = (void **)(a1 + 40);
    do
    {
      uint64_t v5 = *v4;
      v4 += 2;
      id v6 = v5;
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      --v2;
    }
    while (v2);
    return v7;
  }
  return result;
}

uint64_t PlatformItem.AccessibilityContent.resolvedAttributedLabel.getter()
{
  uint64_t v0 = swift_bridgeObjectRetain();
  specialized AccessibilityProperties.subscript.getter(v0, (uint64_t)&v4);
  swift_bridgeObjectRelease();
  if (!v4) {
    return 0;
  }
  swift_bridgeObjectRetain();
  uint64_t v1 = AGGraphClearUpdate();
  MEMORY[0x1F4188790](v1);
  static Update.ensure<A>(_:)();
  AGGraphSetUpdate();
  swift_bridgeObjectRelease();
  uint64_t v2 = static AccessibilityCore.textsResolvedToAttributedText(_:in:includeResolvableAttributes:includeDefaultAttributes:updateResolvableAttributes:resolveSuffix:idiom:separator:)();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return v2;
}

void *static AccessibilityCore.queryChildren(element:options:)(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    char v4 = 2;
    char v6 = 2;
LABEL_5:
    uint64_t v7 = (unint64_t *)(a1 + OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_children);
    if ((a2 & 2) != 0)
    {
      swift_beginAccess();
      unint64_t v9 = *v7;
      if ((v9 & 0x8000000000000000) != 0 || (v9 & 0x4000000000000000) != 0)
      {
        swift_bridgeObjectRetain_n();
        uint64_t v10 = (uint64_t)specialized _copyCollectionToContiguousArray<A>(_:)(v9);
        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v10 = v9 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain_n();
      }
      uint64_t v12 = v10;
      specialized MutableCollection<>.sort(by:)(&v12, 0, v6, v4);
      swift_bridgeObjectRelease();
      unint64_t v8 = v12;
    }
    else
    {
      swift_beginAccess();
      unint64_t v8 = *v7;
      swift_bridgeObjectRetain();
    }
    uint64_t v5 = static AccessibilityCore.queryFilter(elements:options:)(v8, a2);
    swift_bridgeObjectRelease();
  }
  else
  {
    LOBYTE(v12) = 4;
    AccessibilityNode.impliedVisibility(consideringParent:with:)(1, (unsigned __int8 *)&v12, v13);
    char v4 = v13[0];
    uint64_t v5 = (void *)MEMORY[0x1E4FBC860];
    char v6 = v13[0];
    switch(v13[0])
    {
      case 1:
        *(_OWORD *)int v13 = *(_OWORD *)(a1 + OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_environment);
        EnvironmentValues.layoutDirection.getter();
        char v4 = v12;
        char v6 = 1;
        goto LABEL_5;
      case 2:
        goto LABEL_5;
      default:
        return v5;
    }
  }
  return v5;
}

Swift::Void __swiftcall AccessibilityCoreNotification.post()()
{
  uint64_t v2 = v1;
  uint64_t v3 = v0;
  (*(void (**)(void *__return_ptr))(v1 + 16))(v14);
  UIAccessibilityNotifications v4 = (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v3, v2);
  outlined init with copy of Any?((uint64_t)v14, (uint64_t)v12);
  uint64_t v5 = v13;
  if (v13)
  {
    char v6 = __swift_project_boxed_opaque_existential_1(v12, v13);
    uint64_t v7 = *(void *)(v5 - 8);
    double v8 = MEMORY[0x1F4188790](v6);
    uint64_t v10 = (char *)v12 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *, double))(v7 + 16))(v10, v8);
    unint64_t v11 = (void *)_bridgeAnythingToObjectiveC<A>(_:)();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v5);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v12);
  }
  else
  {
    unint64_t v11 = 0;
  }
  UIAccessibilityPostNotification(v4, v11);
  swift_unknownObjectRelease();
  outlined destroy of AccessibilityCore.Notification.Info((uint64_t)v14);
}

id PlatformAccessibilityElementProtocol<>.elementResolvingNode.getter()
{
  uint64_t v1 = v0;
  type metadata accessor for AccessibilityNode();
  uint64_t v2 = swift_dynamicCastClass();
  id v3 = v1;
  UIAccessibilityNotifications v4 = v3;
  if (!v2) {
    return v3;
  }
  AccessibilityNode.platformElement.getter();
  if (v5)
  {
    uint64_t v6 = v5;

    return (id)v6;
  }
  return (id)v2;
}

uint64_t ViewRendererHost.containsAccessibilityElement(_:)(void *a1)
{
  type metadata accessor for AccessibilityNode();
  uint64_t v3 = swift_dynamicCastClass();
  if (v3)
  {
    UIAccessibilityNotifications v4 = (char *)v3;
    id v5 = a1;
  }
  else
  {
    UIAccessibilityNotifications v4 = (char *)objc_msgSend(a1, sel_accessibilityNodeForPlatformElement);
    if (!v4) {
      goto LABEL_8;
    }
  }
  uint64_t v6 = MEMORY[0x18C119DF0](&v4[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_viewRendererHost]);
  if (v6)
  {
    uint64_t v7 = v6;
    swift_unknownObjectRelease();

    if (v7 == v1) {
      return 1;
    }
  }
  else
  {
  }
LABEL_8:
  uint64_t ObjectType = swift_getObjectType();
  MEMORY[0x1F4188790](ObjectType);
  PlatformAccessibilityElementProtocol<>.traverseAncestors(_:)((uint64_t (*)(void))partial apply for closure #1 in ViewRendererHost.containsAccessibilityElement(_:));
  return 0;
}

uint64_t Array<A>.merge(with:options:)(unint64_t a1, char a2, unint64_t a3)
{
  unint64_t v3 = a3;
  if ((a2 & 2) != 0)
  {
    if (a3 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v14 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v14)
      {
LABEL_5:
        if (a1 >> 62)
        {
          swift_bridgeObjectRetain();
          uint64_t v16 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
          if (v16) {
            goto LABEL_7;
          }
        }
        else if (*(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
        {
LABEL_7:
          if ((v3 & 0xC000000000000001) != 0)
          {
            id v6 = (id)MEMORY[0x18C117680](0, v3);
LABEL_10:
            uint64_t v7 = v6;
            unint64_t v19 = a1;
            swift_bridgeObjectRetain();
            id v8 = v7;
            MEMORY[0x18C115B40]();
            if (*(void *)((v19 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v19 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
              specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
            }
            specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
            specialized Array._endMutation()();
            specialized MutableCollection<>.sort(by:)((uint64_t *)&v19);
            id v9 = v8;
            unint64_t v10 = swift_bridgeObjectRetain();
            uint64_t v11 = specialized Collection.firstIndex(where:)(v10, v9);
            char v13 = v12;
            swift_bridgeObjectRelease();

            if (v13)
            {
              swift_bridgeObjectRelease();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              specialized Array.append<A>(contentsOf:)(v3);

              return a1;
            }
            if (__OFADD__(v11, 1))
            {
              __break(1u);
            }
            else if (v11 + 1 >= v11)
            {
              swift_bridgeObjectRetain();
              specialized Array.replaceSubrange<A>(_:with:)(v11, v11 + 1, v3);

              return v19;
            }
            __break(1u);
            JUMPOUT(0x18824C8D4);
          }
          if (*(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10))
          {
            id v6 = *(id *)(v3 + 32);
            goto LABEL_10;
          }
          __break(1u);
          goto LABEL_27;
        }
        swift_bridgeObjectRetain();
        return v3;
      }
    }
    else if (*(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      goto LABEL_5;
    }
    if ((a1 & 0x8000000000000000) == 0 && (a1 & 0x4000000000000000) == 0)
    {
      uint64_t v15 = a1 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain();
LABEL_21:
      unint64_t v19 = v15;
      specialized MutableCollection<>.sort(by:)((uint64_t *)&v19);
      return v19;
    }
LABEL_27:
    unint64_t v18 = swift_bridgeObjectRetain();
    uint64_t v15 = (uint64_t)specialized _copyCollectionToContiguousArray<A>(_:)(v18);
    swift_bridgeObjectRelease();
    goto LABEL_21;
  }
  unint64_t v19 = a1;
  swift_bridgeObjectRetain();
  unint64_t v5 = swift_bridgeObjectRetain();
  specialized Array.append<A>(contentsOf:)(v5);
  return v19;
}

id @objc NSObject.accessibilityNodeForPlatformElement.getter(void *a1)
{
  id v1 = a1;
  uint64_t v2 = NSObject.accessibilityNodeForPlatformElement.getter();

  return v2;
}

uint64_t NSObject.accessibilityNodeForPlatformElement.getter()
{
  swift_beginAccess();
  id v1 = objc_getAssociatedObject(v0, &accessibilityNodeForPlatformElementKey);
  swift_endAccess();
  if (v1
    && (_bridgeAnyObjectToAny(_:)(),
        swift_unknownObjectRelease(),
        outlined init with take of Any(v4, v5),
        outlined init with take of Any(v5, v4),
        type metadata accessor for AccessibilityNode(),
        (swift_dynamicCast() & 1) != 0))
  {
    return v3;
  }
  else
  {
    return 0;
  }
}

void @objc NSObject.accessibilityNodeForPlatformElement.setter(void *a1, uint64_t a2, void *a3)
{
  swift_beginAccess();
  id v5 = a3;
  id v6 = a1;
  objc_setAssociatedObject(v6, &accessibilityNodeForPlatformElementKey, v5, 0);
  swift_endAccess();
}

void *initializeBufferWithCopyOfBuffer for PlatformItemList.Item.Accessibility(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  return a1;
}

void *assignWithCopy for PlatformItemList.Item.Accessibility(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  a1[2] = a2[2];
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for PlatformItemList.Item.Accessibility(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_release();
  return a1;
}

ValueMetadata *type metadata accessor for PlatformItemList.Item.Accessibility()
{
  return &type metadata for PlatformItemList.Item.Accessibility;
}

uint64_t specialized _copySequenceToContiguousArray<A>(_:)(uint64_t a1)
{
  _ss23_ContiguousArrayStorageCySo18NSNotificationNameaGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for Date?, MEMORY[0x1E4F27928], MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v2 - 8);
  UIAccessibilityNotifications v4 = (char *)&v40 - v3;
  uint64_t v5 = type metadata accessor for Date();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  int v49 = (char *)&v40 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for AnimationTimelineSchedule.Entries();
  uint64_t v9 = v8 - 8;
  MEMORY[0x1F4188790](v8);
  uint64_t v11 = (char *)&v40 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = *(unsigned __int8 *)(v6 + 80);
  outlined init with copy of AnimationTimelineSchedule.Entries(a1, (uint64_t)v11);
  uint64_t v13 = *(int *)(v9 + 28);
  uint64_t v14 = (uint64_t)v11;
  if (v11[v13 + 8])
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56))(v4, 1, 1, v5);
    uint64_t v15 = 0;
    uint64_t v16 = (void *)MEMORY[0x1E4FBC860];
  }
  else
  {
    uint64_t v15 = 0;
    uint64_t v16 = (void *)MEMORY[0x1E4FBC860];
    uint64_t v44 = (v12 + 32) & ~v12;
    uint64_t v22 = MEMORY[0x1E4FBC860] + v44;
    uint64_t v23 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 16);
    id v46 = (void (**)(char *, void, uint64_t, uint64_t))(v6 + 56);
    uint64_t v47 = v23;
    uint64_t v45 = (unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48);
    uint64_t v48 = v6 + 16;
    id v24 = (uint64_t (**)(char *, char *, uint64_t))(v6 + 32);
    uint64_t v42 = v6;
    uint64_t v43 = v12 | 7;
    uint64_t v41 = v14;
    v23(v4, v14, v5);
    while (1)
    {
      (*v46)(v4, 0, 1, v5);
      static Date.+= infix(_:_:)();
      if ((*v45)(v4, 1, v5) == 1) {
        break;
      }
      uint64_t v26 = *v24;
      uint64_t result = (*v24)(v49, v4, v5);
      if (v15)
      {
        uint64_t v25 = v16;
        BOOL v20 = __OFSUB__(v15--, 1);
        if (v20) {
          goto LABEL_33;
        }
      }
      else
      {
        unint64_t v27 = v16[3];
        if ((uint64_t)((v27 >> 1) + 0x4000000000000000) < 0) {
          goto LABEL_34;
        }
        int64_t v28 = v27 & 0xFFFFFFFFFFFFFFFELL;
        if (v28 <= 1) {
          uint64_t v29 = 1;
        }
        else {
          uint64_t v29 = v28;
        }
        _ss23_ContiguousArrayStorageCySo18NSNotificationNameaGMaTm_0(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<Date>, MEMORY[0x1E4F27928], MEMORY[0x1E4FBBE00]);
        uint64_t v30 = *(void *)(v6 + 72);
        uint64_t v31 = v44;
        uint64_t v25 = (void *)swift_allocObject();
        uint64_t result = _swift_stdlib_malloc_size_2(v25);
        if (!v30) {
          goto LABEL_35;
        }
        uint64_t v32 = result - v31;
        if (result - v31 == 0x8000000000000000 && v30 == -1) {
          goto LABEL_36;
        }
        uint64_t v34 = v32 / v30;
        v25[2] = v29;
        v25[3] = 2 * (v32 / v30);
        unint64_t v35 = (char *)v25 + v31;
        uint64_t v36 = v16[3] >> 1;
        uint64_t v37 = v36 * v30;
        if (v16[2])
        {
          if (v25 < v16 || v35 >= (char *)v16 + v44 + v37)
          {
            swift_arrayInitWithTakeFrontToBack();
          }
          else if (v25 != v16)
          {
            swift_arrayInitWithTakeBackToFront();
          }
          _OWORD v16[2] = 0;
        }
        uint64_t v22 = (uint64_t)&v35[v37];
        uint64_t v39 = (v34 & 0x7FFFFFFFFFFFFFFFLL) - v36;
        uint64_t result = swift_release();
        uint64_t v14 = v41;
        uint64_t v6 = v42;
        BOOL v20 = __OFSUB__(v39, 1);
        uint64_t v15 = v39 - 1;
        if (v20)
        {
LABEL_33:
          __break(1u);
LABEL_34:
          __break(1u);
LABEL_35:
          __break(1u);
LABEL_36:
          __break(1u);
          goto LABEL_37;
        }
      }
      v26((char *)v22, v49, v5);
      v22 += *(void *)(v6 + 72);
      uint64_t v16 = v25;
      v47(v4, v14, v5);
    }
  }
  outlined destroy of AccessibilityScrollableContext??(v14, (uint64_t (*)(void))type metadata accessor for AnimationTimelineSchedule.Entries);
  uint64_t result = outlined destroy of Date?((uint64_t)v4);
  unint64_t v18 = v16[3];
  if (v18 < 2) {
    return (uint64_t)v16;
  }
  unint64_t v19 = v18 >> 1;
  BOOL v20 = __OFSUB__(v19, v15);
  uint64_t v21 = v19 - v15;
  if (!v20)
  {
    _OWORD v16[2] = v21;
    return (uint64_t)v16;
  }
LABEL_37:
  __break(1u);
  return result;
}

{
  uint64_t v1;
  char *v2;
  char *i;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  BOOL v16;
  long long v17;
  long long v18;
  long long v19;
  long long v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  void v24[13];
  unsigned char v25[96];
  _OWORD v26[4];
  _OWORD v27[2];
  long long v28;
  long long v29;
  long long v30;
  long long v31;
  _OWORD v32[2];
  unsigned char v33[16];
  void v34[13];
  unsigned char v35[120];
  uint64_t v36;

  outlined init with copy of _LazyLayout_Subviews_V1.SubviewsSequence(a1, (uint64_t)v33);
  outlined init with copy of _LazyLayout_Subviews((uint64_t)v33, (uint64_t)v35);
  uint64_t v36 = 0;
  outlined destroy of _LazyLayout_Subviews_V1.SubviewsSequence((uint64_t)v33);
  id v1 = 0;
  uint64_t v2 = (char *)MEMORY[0x1E4FBC860];
  for (uint64_t i = (char *)(MEMORY[0x1E4FBC860] + 32); ; i += 96)
  {
    memset(v25, 0, 95);
    v24[12] = v36;
    UIAccessibilityNotifications v4 = outlined init with copy of _LazyLayout_Subviews((uint64_t)v35, (uint64_t)v33);
    MEMORY[0x1F4188790](v4);
    v24[11] = v34[11];
    uint64_t v5 = outlined init with copy of _ViewList_Node((uint64_t)v34, (uint64_t)v24);
    MEMORY[0x1F4188790](v5);
    swift_bridgeObjectRetain();
    _ViewList_Node.applyNodes(from:style:transform:to:)();
    outlined destroy of _ViewList_Node((uint64_t)v24);
    swift_bridgeObjectRelease();
    outlined destroy of _LazyLayout_Subviews((uint64_t)v33);
    uint64_t result = outlined init with take of AccessibilityScrollableContext?((uint64_t)v25, (uint64_t)v26, &lazy cache variable for type metadata for _LazyLayout_Subview_V1?, (uint64_t)&type metadata for _LazyLayout_Subview_V1);
    if (!*(void *)&v26[0])
    {
      outlined destroy of _LazyLayout_Subviews_V1.SubviewsIterator((uint64_t)v35);
      uint64_t result = _s7SwiftUI22_LazyLayout_Subview_V1VSgWOhTm_0((uint64_t)v26, &lazy cache variable for type metadata for _LazyLayout_Subview_V1?, (uint64_t)&type metadata for _LazyLayout_Subview_V1);
      uint64_t v21 = *((void *)v2 + 3);
      if (v21 >= 2)
      {
        uint64_t v22 = v21 >> 1;
        uint64_t v16 = __OFSUB__(v22, v1);
        uint64_t v23 = v22 - v1;
        if (v16) {
          goto LABEL_22;
        }
        *((void *)v2 + 2) = v23;
      }
      return (uint64_t)v2;
    }
    uint64_t v30 = v26[2];
    uint64_t v31 = v26[3];
    v32[0] = v27[0];
    *(_OWORD *)((char *)v32 + 15) = *(_OWORD *)((char *)v27 + 15);
    int64_t v28 = v26[0];
    uint64_t v29 = v26[1];
    if (!v1)
    {
      uint64_t v7 = *((void *)v2 + 3);
      if ((uint64_t)((v7 >> 1) + 0x4000000000000000) < 0) {
        goto LABEL_21;
      }
      uint64_t v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
      if (v8 <= 1) {
        uint64_t v9 = 1;
      }
      else {
        uint64_t v9 = v8;
      }
      _sypSgMaTm_10(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<_LazyLayout_Subview_V1>, (uint64_t)&type metadata for _LazyLayout_Subview_V1, MEMORY[0x1E4FBBE00]);
      uint64_t v10 = (char *)swift_allocObject();
      uint64_t v11 = (uint64_t)(_swift_stdlib_malloc_size_2(v10) - 32) / 96;
      *((void *)v10 + 2) = v9;
      *((void *)v10 + 3) = 2 * v11;
      uint64_t v12 = v10 + 32;
      uint64_t v13 = *((void *)v2 + 3) >> 1;
      uint64_t v14 = 96 * v13;
      if (*((void *)v2 + 2))
      {
        uint64_t v15 = v2 + 32;
        if (v10 != v2 || v12 >= &v15[v14]) {
          memmove(v10 + 32, v15, 96 * v13);
        }
        *((void *)v2 + 2) = 0;
      }
      uint64_t i = &v12[v14];
      id v1 = (v11 & 0x7FFFFFFFFFFFFFFFLL) - v13;
      uint64_t result = swift_release();
      uint64_t v2 = v10;
    }
    uint64_t v16 = __OFSUB__(v1--, 1);
    if (v16) {
      break;
    }
    char v17 = v29;
    *(_OWORD *)uint64_t i = v28;
    *((_OWORD *)i + 1) = v17;
    unint64_t v18 = v30;
    unint64_t v19 = v31;
    BOOL v20 = v32[0];
    *(_OWORD *)(i + 79) = *(_OWORD *)((char *)v32 + 15);
    *((_OWORD *)i + 3) = v19;
    *((_OWORD *)i + 4) = v20;
    *((_OWORD *)i + 2) = v18;
  }
  __break(1u);
LABEL_21:
  __break(1u);
LABEL_22:
  __break(1u);
  return result;
}

void specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(uint64_t *a1)
{
  void (*v57)(long long *__return_ptr, uint64_t, uint64_t);
  uint64_t v58;
  uint64_t (*v59)(void, uint64_t);
  unint64_t v60;
  char v61;
  Swift::Int v62;
  uint64_t *v63;
  uint64_t v64;
  id v65;
  char *v66;
  uint64_t v67;
  int64_t v68;
  void *v69;
  void **v70;
  void *v71;
  uint64_t v72;
  unint64_t v73;
  unint64_t v74;
  id v75;
  void *v76;
  void *v77;
  uint64_t v78;
  void *v79;
  unint64_t v80;
  char v81;
  uint64_t v82;
  uint64_t v83;
  void (*v84)(long long *__return_ptr, uint64_t, uint64_t);
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  Swift::Int v90;
  Swift::Int v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  Swift::Int v95;
  unint64_t v96;
  unint64_t v97;
  unint64_t v98;
  uint64_t v99;
  Swift::Int *v100;
  unint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  char v105;
  unint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  BOOL v112;
  unint64_t v113;
  uint64_t *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t *v119;
  uint64_t v120;
  uint64_t v121;
  BOOL v122;
  uint64_t v123;
  char v124;
  uint64_t *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  BOOL v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  unint64_t v140;
  uint64_t v141;
  uint64_t *v142;
  uint64_t v143;
  void *v144;
  uint64_t v145;
  unint64_t v146;
  uint64_t *v147;
  uint64_t v148;
  char *v149;
  Swift::Int v150;
  void *v151;
  char *v152;
  uint64_t v153;
  id v154;
  char *v155;
  char *v156;
  char *v157;
  void *v158;
  uint64_t v159;
  int64_t v160;
  id v161;
  char *v162;
  void *v163;
  void **v164;
  uint64_t v165;
  void *v166;
  unint64_t v167;
  unint64_t v168;
  id v169;
  void *v170;
  id v171;
  char *v172;
  uint64_t v173;
  void *v174;
  id v175;
  void *v176;
  uint64_t v177;
  void *v178;
  unint64_t v179;
  char v180;
  uint64_t v181;
  uint64_t v182;
  void (*v183)(long long *__return_ptr, uint64_t, uint64_t);
  uint64_t (*v184)(void, uint64_t);
  Swift::Int v185;
  unint64_t v186;
  Swift::Int v187;
  uint64_t v188;
  uint64_t *v189;
  void *v190;
  void *v191;
  id v192;
  uint64_t v193;
  uint64_t v194;
  void *v195;
  id v196;
  uint64_t v197;
  id v198;
  char *v199;
  uint64_t v200;
  int64_t v201;
  void *v202;
  void **v203;
  uint64_t v204;
  void *v205;
  unint64_t v206;
  unint64_t v207;
  id v208;
  void *v209;
  uint64_t v210;
  uint64_t v211;
  void *v212;
  id v213;
  void *v214;
  uint64_t v215;
  void *v216;
  unint64_t v217;
  char v218;
  uint64_t v219;
  uint64_t v220;
  void (*v221)(long long *__return_ptr, uint64_t, uint64_t);
  uint64_t v222;
  unint64_t v223;
  void *v224;
  void *v225;
  uint64_t v226;
  id v227;
  void **v228;
  uint64_t v229;
  uint64_t v230;
  void *v231;
  id v232;
  void *v233;
  char *v234;
  uint64_t v235;
  unint64_t v236;
  uint64_t v237;
  uint64_t v238;
  void *v239;
  unint64_t v240;
  uint64_t *v241;
  unint64_t v242;
  Swift::Int v243;
  uint64_t *v244;
  uint64_t v245;
  Swift::Int v246;
  uint64_t *v247;
  Swift::Int v248;
  uint64_t *v249;
  void *v250;
  unint64_t v251;
  _OWORD *v252;
  char v253;
  Swift::Int v254;
  char *v255;
  char *v256;
  char *v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  Swift::Int v262;
  uint64_t v263;
  Swift::Int v264;
  uint64_t v265;
  char *v266;
  Swift::Int v267;
  unsigned char *v268;
  void **v269;
  uint64_t *__dst;
  void *v271;
  Swift::Int v272;
  Swift::Int v273;
  long long v274;
  long long v275;
  long long v276;
  long long v277;
  unsigned int v278;
  unsigned __int16 v279;
  char v280;
  long long v281;
  long long v282;
  long long v283;
  long long v284;
  long long v285;
  long long v286;
  int v287;
  __int16 v288;
  unsigned __int8 v289;
  uint64_t v290;

  uint64_t v2 = v1;
  uint64_t v3 = a1;
  Swift::Int v4 = a1[1];
  Swift::Int v5 = _minimumMergeRunLength(_:)(v4);
  if (v5 >= v4)
  {
    if (v4 < 0) {
      goto LABEL_290;
    }
    if (v4) {
      specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(0, v4, 1, v3);
    }
  }
  else
  {
    if (v4 >= 0) {
      uint64_t v6 = v4;
    }
    else {
      uint64_t v6 = v4 + 1;
    }
    if (v4 < -1) {
      goto LABEL_299;
    }
    uint64_t v7 = MEMORY[0x1E4FBC860];
    CGRect v262 = v4;
    long long v246 = v5;
    if (v4 < 2)
    {
      __dst = (uint64_t *)(MEMORY[0x1E4FBC860] + 32);
      if (v4 != 1)
      {
        uint64_t v98 = *(void *)(MEMORY[0x1E4FBC860] + 16);
        long long v245 = MEMORY[0x1E4FBC860];
        if (v98 < 2) {
          goto LABEL_265;
        }
        goto LABEL_252;
      }
      long long v245 = MEMORY[0x1E4FBC860];
    }
    else
    {
      uint64_t v8 = v6 >> 1;
      type metadata accessor for (offset: Int, element: AccessibilityNode)();
      uint64_t v9 = static Array._allocateBufferUninitialized(minimumCapacity:)();
      *(void *)(v9 + 16) = v8;
      long long v245 = v9;
      __dst = (uint64_t *)(v9 + 32);
    }
    Swift::Int v10 = 0;
    unsigned __int8 v244 = v3;
    uint64_t v11 = *v3;
    CGRect v260 = MEMORY[0x1E4FBC840] + 8;
    Swift::Int v12 = v262;
    v290 = *v3;
LABEL_14:
    Swift::Int v13 = v10 + 1;
    CGRect v261 = v7;
    uint64_t v248 = v10;
    if (v10 + 1 >= v12)
    {
      uint64_t v62 = v10 + 1;
      goto LABEL_99;
    }
    uint64_t v14 = (uint64_t *)(v11 + 16 * v13);
    uint64_t v16 = *v14;
    uint64_t v15 = (void *)v14[1];
    *(void *)&v283 = v16;
    *((void *)&v283 + 1) = v15;
    char v17 = (void *)(v11 + 16 * v10);
    unint64_t v18 = (void *)v17[1];
    *(void *)&v274 = *v17;
    *((void *)&v274 + 1) = v18;
    Swift::Int v19 = v10;
    id v20 = v15;
    id v21 = v18;
    char v22 = closure #1 in Sequence<>.sortedSupplementaryItems()((uint64_t *)&v283, (uint64_t *)&v274);
    if (v2)
    {
      swift_bridgeObjectRelease();

LABEL_266:
      *(void *)(v245 + 16) = 0;
      swift_bridgeObjectRelease();
      return;
    }
    char v23 = v22;

    Swift::Int v24 = v19 + 2;
    uint64_t v11 = v290;
    v253 = v23;
    if (v19 + 2 < v262)
    {
      while (1)
      {
        while (1)
        {
          uint64_t v25 = (uint64_t *)(v11 + 16 * v24);
          uint64_t v26 = (char *)v25[1];
          CGRect v265 = *v25;
          Swift::Int v267 = v24;
          unint64_t v27 = (uint64_t *)(v11 + 16 * v13);
          int64_t v28 = (char *)v27[1];
          CGRect v263 = *v27;
          uint64_t v29 = (uint64_t *)&v26[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_cachedCombinedAttachment];
          uint64_t v30 = *(void *)&v26[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_cachedCombinedAttachment];
          Swift::Int v271 = v26;
          if (v30)
          {
            id v31 = (id)v29[1];
            uint64_t v32 = v26;
            id v33 = v28;
            outlined copy of AccessibilityAttachment?(v30, v31);
          }
          else
          {
            uint64_t v34 = &v26[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_attachmentsStorage];
            swift_beginAccess();
            uint64_t v35 = *(void *)v34;
            int64_t v36 = *(void *)(*(void *)v34 + 16);
            long long v255 = v28;
            if (v36)
            {
              *(void *)&v274 = MEMORY[0x1E4FBC860];
              uint64_t v37 = v26;
              unint64_t v38 = v28;
              swift_bridgeObjectRetain();
              specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v36, 0);
              uint64_t v39 = (void *)v274;
              uint64_t v40 = (void **)(v35 + 40);
              do
              {
                uint64_t v42 = (uint64_t)*(v40 - 1);
                uint64_t v41 = *v40;
                *(void *)&v274 = v39;
                unint64_t v44 = v39[2];
                unint64_t v43 = v39[3];
                swift_bridgeObjectRetain();
                id v45 = v41;
                if (v44 >= v43 >> 1)
                {
                  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v43 > 1), v44 + 1, 1);
                  uint64_t v39 = (void *)v274;
                }
                v39[2] = v44 + 1;
                id v46 = &v39[2 * v44];
                v46[4] = v42;
                v46[5] = v41;
                v40 += 5;
                --v36;
              }
              while (v36);
              swift_bridgeObjectRelease();
              char v23 = v253;
            }
            else
            {
              uint64_t v47 = v26;
              uint64_t v48 = v28;
              uint64_t v39 = (void *)MEMORY[0x1E4FBC860];
            }
            static AccessibilityAttachment.combine(_:)(v39, (uint64_t *)&v274);
            swift_bridgeObjectRelease();
            int v49 = (void *)*((void *)&v274 + 1);
            uint64_t v30 = v274;
            uint64_t v50 = *v29;
            CGFloat v51 = (void *)v29[1];
            *uint64_t v29 = v274;
            v29[1] = (uint64_t)v49;
            id v31 = v49;
            swift_bridgeObjectRetain();
            outlined consume of AccessibilityAttachment?(v50, v51);
            v26[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_platformElementPropertiesDirty] = 1;
            int64_t v28 = v255;
          }

          uint64_t v7 = v261;
          if (*(void *)(v30 + 16)
            && (unint64_t v52 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&type metadata for AccessibilityProperties.ScrollableContextKey),
                (v53 & 1) != 0))
          {
            outlined init with copy of TableColumnList(*(void *)(v30 + 56) + 40 * v52, (uint64_t)&v274);
            uint64_t v54 = v28;
            uint64_t v55 = *((void *)&v275 + 1);
            uint64_t v56 = v276;
            __swift_project_boxed_opaque_existential_1(&v274, *((uint64_t *)&v275 + 1));
            id v57 = *(void (**)(long long *__return_ptr, uint64_t, uint64_t))(v56 + 8);
            swift_bridgeObjectRetain();
            char v58 = v56;
            int64_t v28 = v54;
            v57(&v281, v55, v58);
            __swift_destroy_boxed_opaque_existential_1((uint64_t)&v274);
          }
          else
          {
            v281 = 0u;
            v282 = 0u;
            swift_bridgeObjectRetain();
          }
          char v59 = (uint64_t (*)(void, uint64_t))MEMORY[0x1E4FBB718];
          _sypSgMaTm_10(0, (unint64_t *)&lazy cache variable for type metadata for Any?, v260, MEMORY[0x1E4FBB718]);
          _sypSgMaTm_10(0, (unint64_t *)&lazy cache variable for type metadata for AccessibilityScrollableContext?, (uint64_t)&type metadata for AccessibilityScrollableContext, v59);
          if (swift_dynamicCast())
          {
            outlined init with take of AccessibilityScrollableContext?((uint64_t)&v274, (uint64_t)&v283, (unint64_t *)&lazy cache variable for type metadata for AccessibilityScrollableContext?, (uint64_t)&type metadata for AccessibilityScrollableContext);
          }
          else
          {
            uint64_t v276 = 0u;
            uint64_t v277 = 0u;
            v274 = 0u;
            v275 = 0u;
            v279 = 0;
            uint64_t v278 = 0;
            v280 = -2;
            v283 = 0u;
            v284 = 0u;
            v285 = 0u;
            v286 = 0u;
            v288 = 0;
            v287 = 0;
            v289 = -1;
            outlined destroy of AccessibilityScrollableContext??((uint64_t)&v274, (uint64_t (*)(void))type metadata accessor for AccessibilityScrollableContext??);
          }
          swift_bridgeObjectRelease_n();
          if (v289 == 255)
          {
            _s7SwiftUI22_LazyLayout_Subview_V1VSgWOhTm_0((uint64_t)&v283, (unint64_t *)&lazy cache variable for type metadata for AccessibilityScrollableContext?, (uint64_t)&type metadata for AccessibilityScrollableContext);
LABEL_39:

            Swift::Int v13 = v267;
            uint64_t v2 = 0;
            goto LABEL_40;
          }
          outlined init with copy of AccessibilityScrollableContext((uint64_t)&v283, (uint64_t)&v274);
          if (v280)
          {
            outlined destroy of AccessibilityScrollableContext((uint64_t)&v274);
            outlined destroy of AccessibilityScrollableContext((uint64_t)&v283);
            goto LABEL_39;
          }
          swift_release();
          uint64_t v60 = v278 | ((unint64_t)v279 << 32);
          __swift_destroy_boxed_opaque_existential_1((uint64_t)&v274);
          outlined destroy of AccessibilityScrollableContext((uint64_t)&v283);
          if ((v60 & 0xFF00000000) == 0x200000000) {
            goto LABEL_39;
          }
          long long v251 = v60;
          id v63 = (uint64_t *)&v28[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_cachedCombinedAttachment];
          char v64 = *(void *)&v28[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_cachedCombinedAttachment];
          if (v64)
          {
            uint64_t v65 = (id)v63[1];
            outlined copy of AccessibilityAttachment?(*(void *)&v28[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_cachedCombinedAttachment], v65);
          }
          else
          {
            long long v256 = v28;
            int v66 = &v28[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_attachmentsStorage];
            swift_beginAccess();
            uint64_t v67 = *(void *)v66;
            long long v68 = *(void *)(*(void *)v66 + 16);
            if (v68)
            {
              unsigned __int8 v249 = v63;
              *(void *)&v274 = MEMORY[0x1E4FBC860];
              swift_bridgeObjectRetain();
              specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v68, 0);
              uint64_t v69 = (void *)v274;
              uint64_t v70 = (void **)(v67 + 40);
              do
              {
                id v72 = (uint64_t)*(v70 - 1);
                uint64_t v71 = *v70;
                *(void *)&v274 = v69;
                uint64_t v74 = v69[2];
                char v73 = v69[3];
                swift_bridgeObjectRetain();
                id v75 = v71;
                if (v74 >= v73 >> 1)
                {
                  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v73 > 1), v74 + 1, 1);
                  uint64_t v69 = (void *)v274;
                }
                v69[2] = v74 + 1;
                uint64_t v76 = &v69[2 * v74];
                v76[4] = v72;
                v76[5] = v71;
                v70 += 5;
                --v68;
              }
              while (v68);
              swift_bridgeObjectRelease();
              char v23 = v253;
              id v63 = v249;
            }
            else
            {
              uint64_t v69 = (void *)MEMORY[0x1E4FBC860];
            }
            static AccessibilityAttachment.combine(_:)(v69, (uint64_t *)&v274);
            swift_bridgeObjectRelease();
            long long v77 = (void *)*((void *)&v274 + 1);
            char v64 = v274;
            uint64_t v78 = *v63;
            int v79 = (void *)v63[1];
            *id v63 = v274;
            v63[1] = (uint64_t)v77;
            uint64_t v65 = v77;
            swift_bridgeObjectRetain();
            outlined consume of AccessibilityAttachment?(v78, v79);
            int64_t v28 = v256;
            v256[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_platformElementPropertiesDirty] = 1;
            uint64_t v7 = v261;
          }

          if (*(void *)(v64 + 16)
            && (uint64_t v80 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&type metadata for AccessibilityProperties.ScrollableContextKey),
                (v81 & 1) != 0))
          {
            outlined init with copy of TableColumnList(*(void *)(v64 + 56) + 40 * v80, (uint64_t)&v274);
            unsigned __int8 v257 = v28;
            char v82 = *((void *)&v275 + 1);
            uint64_t v83 = v276;
            __swift_project_boxed_opaque_existential_1(&v274, *((uint64_t *)&v275 + 1));
            char v84 = *(void (**)(long long *__return_ptr, uint64_t, uint64_t))(v83 + 8);
            swift_bridgeObjectRetain();
            uint64_t v85 = v82;
            int64_t v28 = v257;
            id v86 = v83;
            uint64_t v7 = v261;
            v84(&v281, v85, v86);
            __swift_destroy_boxed_opaque_existential_1((uint64_t)&v274);
          }
          else
          {
            v281 = 0u;
            v282 = 0u;
            swift_bridgeObjectRetain();
          }
          if (swift_dynamicCast())
          {
            outlined init with take of AccessibilityScrollableContext?((uint64_t)&v274, (uint64_t)&v283, (unint64_t *)&lazy cache variable for type metadata for AccessibilityScrollableContext?, (uint64_t)&type metadata for AccessibilityScrollableContext);
          }
          else
          {
            uint64_t v276 = 0u;
            uint64_t v277 = 0u;
            v274 = 0u;
            v275 = 0u;
            v279 = 0;
            uint64_t v278 = 0;
            v280 = -2;
            v283 = 0u;
            v284 = 0u;
            v285 = 0u;
            v286 = 0u;
            v288 = 0;
            v287 = 0;
            v289 = -1;
            outlined destroy of AccessibilityScrollableContext??((uint64_t)&v274, (uint64_t (*)(void))type metadata accessor for AccessibilityScrollableContext??);
          }
          uint64_t v2 = 0;
          swift_bridgeObjectRelease_n();
          if (v289 == 255)
          {
            _s7SwiftUI22_LazyLayout_Subview_V1VSgWOhTm_0((uint64_t)&v283, (unint64_t *)&lazy cache variable for type metadata for AccessibilityScrollableContext?, (uint64_t)&type metadata for AccessibilityScrollableContext);
LABEL_64:

            Swift::Int v13 = v267;
            goto LABEL_40;
          }
          outlined init with copy of AccessibilityScrollableContext((uint64_t)&v283, (uint64_t)&v274);
          if (v280)
          {
            outlined destroy of AccessibilityScrollableContext((uint64_t)&v274);
            outlined destroy of AccessibilityScrollableContext((uint64_t)&v283);
            goto LABEL_64;
          }
          swift_release();
          char v87 = v278 | ((unint64_t)v279 << 32);
          __swift_destroy_boxed_opaque_existential_1((uint64_t)&v274);
          outlined destroy of AccessibilityScrollableContext((uint64_t)&v283);

          Swift::Int v13 = v267;
          if ((v87 & 0xFF00000000) != 0x200000000 && v251 == v87) {
            break;
          }
LABEL_40:
          uint64_t v61 = v23;
          uint64_t v11 = v290;
          if ((v23 ^ (v265 < v263)))
          {
            uint64_t v62 = v13;
            if (v23) {
              goto LABEL_87;
            }
LABEL_98:
            Swift::Int v10 = v248;
LABEL_99:
            if (v62 >= v262) {
              goto LABEL_107;
            }
            if (__OFSUB__(v62, v10)) {
              goto LABEL_291;
            }
            if (v62 - v10 >= v246)
            {
LABEL_107:
              if (v62 < v10) {
                goto LABEL_289;
              }
              goto LABEL_108;
            }
            v95 = v10 + v246;
            if (__OFADD__(v10, v246)) {
              goto LABEL_292;
            }
            if (v95 >= v262) {
              v95 = v262;
            }
            if (v95 < v10)
            {
LABEL_293:
              __break(1u);
              goto LABEL_294;
            }
            if (v62 == v95) {
              goto LABEL_107;
            }
            while (2)
            {
              v243 = v95;
              char v147 = (uint64_t *)(v11 + 16 * v62);
              long long v148 = *v147;
              long long v149 = (char *)v147[1];
              uint64_t v150 = v62;
              Swift::Int v273 = v62;
              while (2)
              {
                v268 = v149;
                uint64_t v269 = v2;
                CGRect v264 = v150;
                unsigned __int8 v254 = v150 - 1;
                int v151 = (void *)(v11 + 16 * (v150 - 1));
                uint64_t v258 = *v151;
                CGRect v259 = v148;
                unsigned __int8 v252 = v151;
                id v152 = (char *)v151[1];
                long long v250 = v151 + 1;
                char v153 = *(void *)&v149[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_cachedCombinedAttachment];
                CGRect v266 = v152;
                if (!v153)
                {
                  unsigned __int8 v247 = (uint64_t *)&v149[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_cachedCombinedAttachment];
                  uint64_t v157 = &v149[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_attachmentsStorage];
                  id v158 = v149;
                  swift_beginAccess();
                  char v159 = *(void *)v157;
                  uint64_t v160 = *(void *)(*(void *)v157 + 16);
                  if (v160)
                  {
                    *(void *)&v274 = MEMORY[0x1E4FBC860];
                    id v161 = v158;
                    uint64_t v162 = v152;
                    swift_bridgeObjectRetain();
                    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v160, 0);
                    long long v163 = (void *)v274;
                    CGFloat v164 = (void **)(v159 + 40);
                    do
                    {
                      CGFloat v165 = (uint64_t)*(v164 - 1);
                      CGFloat v166 = *v164;
                      *(void *)&v274 = v163;
                      uint64_t v168 = v163[2];
                      CGFloat v167 = v163[3];
                      swift_bridgeObjectRetain();
                      uint64_t v169 = v166;
                      if (v168 >= v167 >> 1)
                      {
                        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v167 > 1), v168 + 1, 1);
                        long long v163 = (void *)v274;
                      }
                      v163[2] = v168 + 1;
                      uint64_t v170 = &v163[2 * v168];
                      v170[4] = v165;
                      v170[5] = v166;
                      v164 += 5;
                      --v160;
                    }
                    while (v160);
                    swift_bridgeObjectRelease();
                  }
                  else
                  {
                    id v171 = v158;
                    char v172 = v152;
                    long long v163 = (void *)MEMORY[0x1E4FBC860];
                  }
                  uint64_t v173 = v163[2];
                  uint64_t v7 = v173 - 1;
                  if (v173 == 1)
                  {
                    id v174 = (void *)v163[5];
                    *(void *)&v274 = v163[4];
                    *((void *)&v274 + 1) = v174;
                    uint64_t v175 = v174;
                    swift_bridgeObjectRetain();
LABEL_171:
                    swift_bridgeObjectRelease();
                  }
                  else
                  {
                    if (!v173)
                    {
                      AccessibilityAttachment.init()();
                      goto LABEL_171;
                    }
                    long long v190 = &v163[2 * v7];
                    uint64_t v98 = v190[4];
                    char v191 = (void *)v190[5];
                    *(void *)&v281 = v98;
                    *((void *)&v281 + 1) = v191;
                    char v192 = v191;
                    swift_bridgeObjectRetain();
                    swift_bridgeObjectRetain();
                    uint64_t v2 = (void **)&v163[2 * v173 + 1];
                    id v193 = v173 - 2;
                    do
                    {
                      if (v193 >= v7)
                      {
                        __break(1u);
                        goto LABEL_264;
                      }
                      uint64_t v194 = (uint64_t)*(v2 - 1);
                      char v195 = *v2;
                      *(void *)&v274 = v194;
                      v196 = v195;
                      swift_bridgeObjectRetain();
                      AccessibilityProperties.merge(with:)((uint64_t *)&v274);
                      v274 = v281;
                      uint64_t v98 = AccessibilityAttachment.platformElement.getter();

                      if (!v98)
                      {
                        *(void *)&v274 = v194;
                        *((void *)&v274 + 1) = v195;
                        uint64_t v98 = (unint64_t)&v274;
                        if (AccessibilityAttachment.platformElement.getter())
                        {
                          uint64_t v98 = (unint64_t)&v281;
                          AccessibilityAttachment.platformElement.setter();
                        }
                      }

                      swift_bridgeObjectRelease();
                      v2 -= 2;
                      --v193;
                    }
                    while (v193 != -1);
                    swift_bridgeObjectRelease_n();
                    v274 = v281;
                  }
                  long long v176 = (void *)*((void *)&v274 + 1);
                  char v153 = v274;
                  uint64_t v177 = *v247;
                  int v178 = (void *)v247[1];
                  char *v247 = v274;
                  v247[1] = (uint64_t)v176;
                  char v154 = v176;
                  swift_bridgeObjectRetain();
                  outlined consume of AccessibilityAttachment?(v177, v178);
                  v268[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_platformElementPropertiesDirty] = 1;
                  uint64_t v7 = v261;
                  goto LABEL_173;
                }
                char v154 = *(id *)&v149[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_cachedCombinedAttachment + 8];
                uint64_t v155 = v149;
                uint64_t v156 = v152;
                outlined copy of AccessibilityAttachment?(v153, v154);
LABEL_173:

                if (*(void *)(v153 + 16)
                  && (id v179 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&type metadata for AccessibilityProperties.ScrollableContextKey),
                      (v180 & 1) != 0))
                {
                  outlined init with copy of TableColumnList(*(void *)(v153 + 56) + 40 * v179, (uint64_t)&v274);
                  uint64_t v181 = *((void *)&v275 + 1);
                  uint64_t v182 = v276;
                  __swift_project_boxed_opaque_existential_1(&v274, *((uint64_t *)&v275 + 1));
                  int v183 = *(void (**)(long long *__return_ptr, uint64_t, uint64_t))(v182 + 8);
                  swift_bridgeObjectRetain();
                  v183(&v281, v181, v182);
                  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v274);
                }
                else
                {
                  v281 = 0u;
                  v282 = 0u;
                  swift_bridgeObjectRetain();
                }
                id v184 = (uint64_t (*)(void, uint64_t))MEMORY[0x1E4FBB718];
                _sypSgMaTm_10(0, (unint64_t *)&lazy cache variable for type metadata for Any?, MEMORY[0x1E4FBC840] + 8, MEMORY[0x1E4FBB718]);
                _sypSgMaTm_10(0, (unint64_t *)&lazy cache variable for type metadata for AccessibilityScrollableContext?, (uint64_t)&type metadata for AccessibilityScrollableContext, v184);
                if (swift_dynamicCast())
                {
                  outlined init with take of AccessibilityScrollableContext?((uint64_t)&v274, (uint64_t)&v283, (unint64_t *)&lazy cache variable for type metadata for AccessibilityScrollableContext?, (uint64_t)&type metadata for AccessibilityScrollableContext);
                }
                else
                {
                  uint64_t v276 = 0u;
                  uint64_t v277 = 0u;
                  v274 = 0u;
                  v275 = 0u;
                  v279 = 0;
                  uint64_t v278 = 0;
                  v280 = -2;
                  v283 = 0u;
                  v284 = 0u;
                  v285 = 0u;
                  v286 = 0u;
                  v288 = 0;
                  v287 = 0;
                  v289 = -1;
                  outlined destroy of AccessibilityScrollableContext??((uint64_t)&v274, (uint64_t (*)(void))type metadata accessor for AccessibilityScrollableContext??);
                }
                char v185 = v273;
                swift_bridgeObjectRelease_n();
                if (v289 == 255)
                {
                  _s7SwiftUI22_LazyLayout_Subview_V1VSgWOhTm_0((uint64_t)&v283, (unint64_t *)&lazy cache variable for type metadata for AccessibilityScrollableContext?, (uint64_t)&type metadata for AccessibilityScrollableContext);

                  uint64_t v2 = v269;
                  goto LABEL_186;
                }
                outlined init with copy of AccessibilityScrollableContext((uint64_t)&v283, (uint64_t)&v274);
                uint64_t v2 = v269;
                if (v280)
                {
                  outlined destroy of AccessibilityScrollableContext((uint64_t)&v274);
                  outlined destroy of AccessibilityScrollableContext((uint64_t)&v283);
LABEL_185:

LABEL_186:
                  uint64_t v11 = v290;
                  Swift::Int v10 = v248;
                  goto LABEL_187;
                }
                swift_release();
                long long v186 = v278 | ((unint64_t)v279 << 32);
                __swift_destroy_boxed_opaque_existential_1((uint64_t)&v274);
                outlined destroy of AccessibilityScrollableContext((uint64_t)&v283);
                if ((v186 & 0xFF00000000) == 0x200000000) {
                  goto LABEL_185;
                }
                unsigned __int8 v242 = v186;
                char v197 = *(void *)&v266[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_cachedCombinedAttachment];
                if (v197)
                {
                  char v198 = *(id *)&v266[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_cachedCombinedAttachment + 8];
                  outlined copy of AccessibilityAttachment?(*(void *)&v266[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_cachedCombinedAttachment], v198);
                  goto LABEL_214;
                }
                long long v241 = (uint64_t *)&v266[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_cachedCombinedAttachment];
                uint64_t v199 = &v266[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_attachmentsStorage];
                swift_beginAccess();
                id v200 = *(void *)v199;
                char v201 = *(void *)(*(void *)v199 + 16);
                if (v201)
                {
                  *(void *)&v274 = MEMORY[0x1E4FBC860];
                  swift_bridgeObjectRetain();
                  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v201, 0);
                  uint64_t v202 = (void *)v274;
                  uint64_t v203 = (void **)(v200 + 40);
                  do
                  {
                    char v204 = (uint64_t)*(v203 - 1);
                    int v205 = *v203;
                    *(void *)&v274 = v202;
                    long long v207 = v202[2];
                    char v206 = v202[3];
                    swift_bridgeObjectRetain();
                    Swift::Int v208 = v205;
                    if (v207 >= v206 >> 1)
                    {
                      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v206 > 1), v207 + 1, 1);
                      uint64_t v202 = (void *)v274;
                    }
                    v202[2] = v207 + 1;
                    uint64_t v209 = &v202[2 * v207];
                    v209[4] = v204;
                    v209[5] = v205;
                    v203 += 5;
                    --v201;
                  }
                  while (v201);
                  swift_bridgeObjectRelease();
                }
                else
                {
                  uint64_t v202 = (void *)MEMORY[0x1E4FBC860];
                }
                char v210 = v202[2];
                long long v211 = v210 - 1;
                if (v210 == 1)
                {
                  long long v212 = (void *)v202[5];
                  *(void *)&v274 = v202[4];
                  *((void *)&v274 + 1) = v212;
                  uint64_t v213 = v212;
                  swift_bridgeObjectRetain();
                  goto LABEL_212;
                }
                if (!v210)
                {
                  AccessibilityAttachment.init()();
LABEL_212:
                  swift_bridgeObjectRelease();
                  goto LABEL_213;
                }
                int v224 = &v202[2 * v211];
                CGFloat v226 = v224[4];
                char v225 = (void *)v224[5];
                *(void *)&v281 = v226;
                *((void *)&v281 + 1) = v225;
                char v227 = v225;
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                char v228 = (void **)&v202[2 * v210 + 1];
                int v229 = v210 - 2;
                do
                {
                  if (v229 >= v211)
                  {
                    __break(1u);
LABEL_270:
                    __break(1u);
LABEL_271:
                    __break(1u);
LABEL_272:
                    __break(1u);
LABEL_273:
                    __break(1u);
LABEL_274:
                    __break(1u);
LABEL_275:
                    __break(1u);
LABEL_276:
                    __break(1u);
LABEL_277:
                    __break(1u);
LABEL_278:
                    __break(1u);
LABEL_279:
                    __break(1u);
LABEL_280:
                    __break(1u);
LABEL_281:
                    __break(1u);
LABEL_282:
                    __break(1u);
LABEL_283:
                    __break(1u);
LABEL_284:
                    __break(1u);
                    goto LABEL_285;
                  }
                  char v230 = (uint64_t)*(v228 - 1);
                  char v231 = *v228;
                  *(void *)&v274 = v230;
                  char v232 = v231;
                  swift_bridgeObjectRetain();
                  AccessibilityProperties.merge(with:)((uint64_t *)&v274);
                  v274 = v281;
                  CGFloat v233 = (void *)AccessibilityAttachment.platformElement.getter();

                  if (!v233)
                  {
                    *(void *)&v274 = v230;
                    *((void *)&v274 + 1) = v231;
                    if (AccessibilityAttachment.platformElement.getter()) {
                      AccessibilityAttachment.platformElement.setter();
                    }
                  }

                  swift_bridgeObjectRelease();
                  v228 -= 2;
                  --v229;
                }
                while (v229 != -1);
                swift_bridgeObjectRelease_n();
                v274 = v281;
LABEL_213:
                char v214 = (void *)*((void *)&v274 + 1);
                char v197 = v274;
                long long v215 = *v241;
                long long v216 = (void *)v241[1];
                *long long v241 = v274;
                v241[1] = (uint64_t)v214;
                char v198 = v214;
                swift_bridgeObjectRetain();
                outlined consume of AccessibilityAttachment?(v215, v216);
                v266[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_platformElementPropertiesDirty] = 1;
                uint64_t v2 = v269;
                uint64_t v7 = v261;
LABEL_214:

                if (*(void *)(v197 + 16)
                  && (char v217 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&type metadata for AccessibilityProperties.ScrollableContextKey),
                      (v218 & 1) != 0))
                {
                  outlined init with copy of TableColumnList(*(void *)(v197 + 56) + 40 * v217, (uint64_t)&v274);
                  uint64_t v219 = *((void *)&v275 + 1);
                  char v220 = v276;
                  __swift_project_boxed_opaque_existential_1(&v274, *((uint64_t *)&v275 + 1));
                  uint64_t v221 = *(void (**)(long long *__return_ptr, uint64_t, uint64_t))(v220 + 8);
                  swift_bridgeObjectRetain();
                  char v222 = v220;
                  uint64_t v7 = v261;
                  v221(&v281, v219, v222);
                  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v274);
                }
                else
                {
                  v281 = 0u;
                  v282 = 0u;
                  swift_bridgeObjectRetain();
                }
                char v185 = v273;
                if (swift_dynamicCast())
                {
                  outlined init with take of AccessibilityScrollableContext?((uint64_t)&v274, (uint64_t)&v283, (unint64_t *)&lazy cache variable for type metadata for AccessibilityScrollableContext?, (uint64_t)&type metadata for AccessibilityScrollableContext);
                }
                else
                {
                  uint64_t v276 = 0u;
                  uint64_t v277 = 0u;
                  v274 = 0u;
                  v275 = 0u;
                  v279 = 0;
                  uint64_t v278 = 0;
                  v280 = -2;
                  v283 = 0u;
                  v284 = 0u;
                  v285 = 0u;
                  v286 = 0u;
                  v288 = 0;
                  v287 = 0;
                  v289 = -1;
                  outlined destroy of AccessibilityScrollableContext??((uint64_t)&v274, (uint64_t (*)(void))type metadata accessor for AccessibilityScrollableContext??);
                }
                Swift::Int v10 = v248;
                swift_bridgeObjectRelease_n();
                if (v289 == 255)
                {
                  _s7SwiftUI22_LazyLayout_Subview_V1VSgWOhTm_0((uint64_t)&v283, (unint64_t *)&lazy cache variable for type metadata for AccessibilityScrollableContext?, (uint64_t)&type metadata for AccessibilityScrollableContext);
                  goto LABEL_225;
                }
                outlined init with copy of AccessibilityScrollableContext((uint64_t)&v283, (uint64_t)&v274);
                if (v280)
                {
                  outlined destroy of AccessibilityScrollableContext((uint64_t)&v274);
                  outlined destroy of AccessibilityScrollableContext((uint64_t)&v283);
LABEL_225:

                  uint64_t v11 = v290;
LABEL_187:
                  long long v187 = v264;
                  long long v188 = v259;
                  goto LABEL_188;
                }
                swift_release();
                long long v223 = v278 | ((unint64_t)v279 << 32);
                __swift_destroy_boxed_opaque_existential_1((uint64_t)&v274);
                outlined destroy of AccessibilityScrollableContext((uint64_t)&v283);

                if ((v223 & 0xFF00000000) == 0x200000000)
                {
                  uint64_t v11 = v290;
                  goto LABEL_187;
                }
                uint64_t v11 = v290;
                long long v187 = v264;
                long long v188 = v259;
                if (v242 != v223)
                {
LABEL_188:
                  if (v188 >= v258) {
                    goto LABEL_247;
                  }
LABEL_189:
                  if (!v11) {
                    goto LABEL_297;
                  }
LABEL_190:
                  long long v189 = (uint64_t *)(v11 + 16 * v187);
                  long long v148 = *v189;
                  long long v149 = (char *)v189[1];
                  *(_OWORD *)long long v189 = *v252;
                  *(void *)unsigned __int8 v252 = v148;
                  char *v250 = v149;
                  uint64_t v150 = v254;
                  if (v254 == v10) {
                    goto LABEL_247;
                  }
                  continue;
                }
                break;
              }
              if ((v242 & 0x100000000) != 0)
              {
                if ((v223 & 0x100000000) == 0) {
                  goto LABEL_243;
                }
LABEL_241:
                if ((v242 & 0x10000000000) != 0)
                {
                  if ((v223 & 0x10000000000) == 0) {
                    goto LABEL_247;
                  }
                }
                else if ((v223 & 0x10000000000) != 0)
                {
LABEL_243:
                  if (!v290) {
                    goto LABEL_297;
                  }
                  goto LABEL_190;
                }
                if (v259 >= v258) {
                  goto LABEL_247;
                }
                goto LABEL_189;
              }
              if ((v223 & 0x100000000) == 0) {
                goto LABEL_241;
              }
LABEL_247:
              uint64_t v62 = v185 + 1;
              v95 = v243;
              if (v62 != v243) {
                continue;
              }
              break;
            }
            uint64_t v62 = v243;
            if (v243 < v10) {
              goto LABEL_289;
            }
LABEL_108:
            Swift::Int v272 = v62;
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              uint64_t v7 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v7 + 16) + 1, 1, (char *)v7);
            }
            long long v97 = *(void *)(v7 + 16);
            uint64_t v96 = *(void *)(v7 + 24);
            uint64_t v98 = v97 + 1;
            uint64_t v11 = v290;
            if (v97 >= v96 >> 1)
            {
              CGFloat v234 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v96 > 1), v97 + 1, 1, (char *)v7);
              uint64_t v11 = v290;
              uint64_t v7 = (uint64_t)v234;
            }
            *(void *)(v7 + 16) = v98;
            uint64_t v99 = v7 + 32;
            uint64_t v100 = (Swift::Int *)(v7 + 32 + 16 * v97);
            *uint64_t v100 = v10;
            v100[1] = v272;
            if (v97)
            {
              while (2)
              {
                id v101 = v98 - 1;
                if (v98 >= 4)
                {
                  long long v106 = v99 + 16 * v98;
                  uint64_t v107 = *(void *)(v106 - 64);
                  BOOL v108 = *(void *)(v106 - 56);
                  char v112 = __OFSUB__(v108, v107);
                  uint64_t v109 = v108 - v107;
                  if (v112) {
                    goto LABEL_274;
                  }
                  char v111 = *(void *)(v106 - 48);
                  id v110 = *(void *)(v106 - 40);
                  char v112 = __OFSUB__(v110, v111);
                  uint64_t v104 = v110 - v111;
                  uint64_t v105 = v112;
                  if (v112) {
                    goto LABEL_275;
                  }
                  char v113 = v98 - 2;
                  char v114 = (uint64_t *)(v99 + 16 * (v98 - 2));
                  uint64_t v116 = *v114;
                  uint64_t v115 = v114[1];
                  char v112 = __OFSUB__(v115, v116);
                  uint64_t v117 = v115 - v116;
                  if (v112) {
                    goto LABEL_277;
                  }
                  char v112 = __OFADD__(v104, v117);
                  id v118 = v104 + v117;
                  if (v112) {
                    goto LABEL_280;
                  }
                  if (v118 >= v109)
                  {
                    uint64_t v136 = (uint64_t *)(v99 + 16 * v101);
                    uint64_t v138 = *v136;
                    long long v137 = v136[1];
                    char v112 = __OFSUB__(v137, v138);
                    unint64_t v139 = v137 - v138;
                    if (v112) {
                      goto LABEL_284;
                    }
                    uint64_t v129 = v104 < v139;
                  }
                  else
                  {
LABEL_126:
                    if (v105) {
                      goto LABEL_276;
                    }
                    char v113 = v98 - 2;
                    char v119 = (uint64_t *)(v99 + 16 * (v98 - 2));
                    unint64_t v121 = *v119;
                    uint64_t v120 = v119[1];
                    uint64_t v122 = __OFSUB__(v120, v121);
                    long long v123 = v120 - v121;
                    char v124 = v122;
                    if (v122) {
                      goto LABEL_279;
                    }
                    CGFloat v125 = (uint64_t *)(v99 + 16 * v101);
                    CGFloat v127 = *v125;
                    CGFloat v126 = v125[1];
                    char v112 = __OFSUB__(v126, v127);
                    CGFloat v128 = v126 - v127;
                    if (v112) {
                      goto LABEL_282;
                    }
                    if (__OFADD__(v123, v128)) {
                      goto LABEL_283;
                    }
                    if (v123 + v128 < v104) {
                      goto LABEL_138;
                    }
                    uint64_t v129 = v104 < v128;
                  }
                  if (v129) {
                    id v101 = v113;
                  }
                }
                else
                {
                  if (v98 == 3)
                  {
                    uint64_t v103 = *(void *)(v7 + 32);
                    char v102 = *(void *)(v7 + 40);
                    char v112 = __OFSUB__(v102, v103);
                    uint64_t v104 = v102 - v103;
                    uint64_t v105 = v112;
                    goto LABEL_126;
                  }
                  uint64_t v130 = *(void *)(v7 + 32);
                  uint64_t v131 = *(void *)(v7 + 40);
                  char v112 = __OFSUB__(v131, v130);
                  long long v123 = v131 - v130;
                  char v124 = v112;
LABEL_138:
                  if (v124) {
                    goto LABEL_278;
                  }
                  id v132 = (uint64_t *)(v99 + 16 * v101);
                  uint64_t v134 = *v132;
                  char v133 = v132[1];
                  char v112 = __OFSUB__(v133, v134);
                  id v135 = v133 - v134;
                  if (v112) {
                    goto LABEL_281;
                  }
                  if (v135 < v123) {
                    goto LABEL_155;
                  }
                }
                uint64_t v140 = v101 - 1;
                if (v101 - 1 >= v98) {
                  goto LABEL_270;
                }
                if (!v11) {
                  goto LABEL_295;
                }
                id v141 = v7;
                char v142 = (uint64_t *)(v99 + 16 * v140);
                uint64_t v143 = *v142;
                long long v144 = (void *)(v99 + 16 * v101);
                uint64_t v145 = v144[1];
                specialized _merge<A>(low:mid:high:buffer:by:)((uint64_t *)(v11 + 16 * *v142), (uint64_t *)(v11 + 16 * *v144), v11 + 16 * v145, __dst);
                if (v2) {
                  goto LABEL_265;
                }
                if (v145 < v143) {
                  goto LABEL_271;
                }
                if (v101 > *(void *)(v141 + 16)) {
                  goto LABEL_272;
                }
                *char v142 = v143;
                *(void *)(v99 + 16 * v140 + 8) = v145;
                id v146 = *(void *)(v141 + 16);
                if (v101 >= v146) {
                  goto LABEL_273;
                }
                uint64_t v7 = v141;
                uint64_t v98 = v146 - 1;
                memmove((void *)(v99 + 16 * v101), v144 + 2, 16 * (v146 - 1 - v101));
                *(void *)(v141 + 16) = v146 - 1;
                uint64_t v11 = v290;
                if (v146 <= 2) {
                  goto LABEL_155;
                }
                continue;
              }
            }
            uint64_t v98 = 1;
LABEL_155:
            Swift::Int v12 = v262;
            Swift::Int v10 = v272;
            if (v272 >= v262)
            {
LABEL_264:
              uint64_t v3 = v244;
              if (v98 < 2)
              {
LABEL_265:
                swift_bridgeObjectRelease();
                goto LABEL_266;
              }
LABEL_252:
              char v235 = *v3;
              while (1)
              {
                CGFloat v236 = v98 - 2;
                if (v98 < 2) {
                  break;
                }
                if (!v235) {
                  goto LABEL_298;
                }
                char v237 = *(void *)(v7 + 32 + 16 * v236);
                uint64_t v238 = *(void *)(v7 + 32 + 16 * (v98 - 1) + 8);
                specialized _merge<A>(low:mid:high:buffer:by:)((uint64_t *)(v235 + 16 * v237), (uint64_t *)(v235 + 16 * *(void *)(v7 + 32 + 16 * (v98 - 1))), v235 + 16 * v238, __dst);
                if (v2) {
                  goto LABEL_265;
                }
                if (v238 < v237) {
                  goto LABEL_286;
                }
                if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                  uint64_t v7 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v7);
                }
                if (v236 >= *(void *)(v7 + 16)) {
                  goto LABEL_287;
                }
                unsigned __int8 v239 = (void *)(v7 + 32 + 16 * v236);
                *unsigned __int8 v239 = v237;
                v239[1] = v238;
                long long v240 = *(void *)(v7 + 16);
                if (v98 > v240) {
                  goto LABEL_288;
                }
                memmove((void *)(v7 + 32 + 16 * (v98 - 1)), (const void *)(v7 + 32 + 16 * v98), 16 * (v240 - v98));
                *(void *)(v7 + 16) = v240 - 1;
                uint64_t v98 = v240 - 1;
                if (v240 <= 2) {
                  goto LABEL_265;
                }
              }
LABEL_285:
              __break(1u);
LABEL_286:
              __break(1u);
LABEL_287:
              __break(1u);
LABEL_288:
              __break(1u);
LABEL_289:
              __break(1u);
LABEL_290:
              __break(1u);
LABEL_291:
              __break(1u);
LABEL_292:
              __break(1u);
              goto LABEL_293;
            }
            goto LABEL_14;
          }
LABEL_41:
          uint64_t v62 = v13 + 1;
          Swift::Int v24 = v13 + 1;
          if (v13 + 1 >= v262) {
            goto LABEL_84;
          }
        }
        if ((v251 & 0x100000000) != 0) {
          break;
        }
        uint64_t v11 = v290;
        if ((v87 & 0x100000000) == 0) {
          goto LABEL_75;
        }
        if (v23)
        {
          uint64_t v62 = v267;
          goto LABEL_87;
        }
        uint64_t v62 = v267 + 1;
        Swift::Int v24 = v267 + 1;
        if (v267 + 1 >= v262) {
          goto LABEL_98;
        }
      }
      uint64_t v11 = v290;
      if ((v87 & 0x100000000) == 0)
      {
        if ((v23 & 1) == 0)
        {
          uint64_t v62 = v267;
          goto LABEL_98;
        }
        uint64_t v61 = 1;
        goto LABEL_41;
      }
LABEL_75:
      if ((v251 & 0x10000000000) != 0)
      {
        if ((v87 & 0x10000000000) == 0)
        {
          if (v23)
          {
            uint64_t v62 = v267;
            uint64_t v11 = v290;
            goto LABEL_87;
          }
          uint64_t v61 = 0;
          uint64_t v11 = v290;
          goto LABEL_41;
        }
      }
      else if ((v87 & 0x10000000000) != 0)
      {
        if ((v23 & 1) == 0)
        {
          uint64_t v62 = v267;
          uint64_t v11 = v290;
          goto LABEL_98;
        }
        uint64_t v61 = 1;
        uint64_t v11 = v290;
        goto LABEL_41;
      }
      goto LABEL_40;
    }
    uint64_t v61 = v23;
    uint64_t v62 = v19 + 2;
LABEL_84:
    if ((v61 & 1) == 0) {
      goto LABEL_98;
    }
LABEL_87:
    Swift::Int v10 = v248;
    if (v62 >= v248)
    {
      if (v248 < v62)
      {
        char v88 = 16 * v62;
        uint64_t v89 = 16 * v248;
        uint64_t v90 = v62;
        uint64_t v91 = v248;
        while (1)
        {
          if (v91 != --v90)
          {
            if (!v11) {
              goto LABEL_296;
            }
            id v92 = v11 + v88;
            char v93 = *(void *)(v11 + v89);
            uint64_t v94 = *(void *)(v11 + v89 + 8);
            *(_OWORD *)(v11 + v89) = *(_OWORD *)(v11 + v88 - 16);
            *(void *)(v92 - 16) = v93;
            *(void *)(v92 - 8) = v94;
          }
          ++v91;
          v88 -= 16;
          v89 += 16;
          if (v91 >= v90) {
            goto LABEL_99;
          }
        }
      }
      goto LABEL_99;
    }
LABEL_294:
    __break(1u);
LABEL_295:
    __break(1u);
LABEL_296:
    __break(1u);
LABEL_297:
    __break(1u);
LABEL_298:
    __break(1u);
LABEL_299:
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
}

{
  uint64_t v1;
  uint64_t *v2;
  Swift::Int v3;
  Swift::Int v4;
  uint64_t v5;
  Swift::Int v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  Swift::Int v11;
  uint64_t v12;
  unint64_t v13;
  Swift::Int v14;
  void *v15;
  void *v16;
  id v17;
  id v18;
  id v19;
  void **v20;
  void *v21;
  void *v22;
  id v23;
  id v24;
  id v25;
  uint64_t *v26;
  Swift::Int v27;
  Swift::Int v28;
  uint64_t *v29;
  uint64_t v30;
  Swift::Int v31;
  uint64_t v32;
  void *v33;
  Swift::Int v34;
  uint64_t v35;
  void *v36;
  id v37;
  id v38;
  id v39;
  void *v40;
  unint64_t v41;
  unint64_t v42;
  char *v43;
  char *v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  BOOL v56;
  unint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  BOOL v66;
  uint64_t v67;
  char v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  BOOL v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  char *v86;
  char *v87;
  uint64_t v88;
  char *v89;
  unint64_t v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  unint64_t v100;
  uint64_t *v101;
  uint64_t v102;
  uint64_t v103;
  Swift::Int v104;
  char *v105;
  char *v106;
  Swift::Int v107;
  Swift::Int v108;
  Swift::Int v109;
  Swift::Int v110;
  char *v111;
  uint64_t v112;

  uint64_t v2 = a1;
  uint64_t v3 = a1[1];
  Swift::Int v4 = _minimumMergeRunLength(_:)(v3);
  if (v4 >= v3)
  {
    if (v3 < 0) {
      goto LABEL_133;
    }
    if (v3) {
      specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(0, v3, 1, v2);
    }
    return;
  }
  if (v3 >= 0) {
    Swift::Int v5 = v3;
  }
  else {
    Swift::Int v5 = v3 + 1;
  }
  if (v3 < -1) {
    goto LABEL_141;
  }
  uint64_t v6 = v4;
  id v101 = v2;
  if (v3 < 2)
  {
    Swift::Int v10 = (char *)MEMORY[0x1E4FBC860];
    char v112 = MEMORY[0x1E4FBC860];
    char v111 = (char *)((MEMORY[0x1E4FBC860] & 0xFFFFFFFFFFFFFF8) + 32);
    if (v3 != 1)
    {
      Swift::Int v13 = *(void *)(MEMORY[0x1E4FBC860] + 16);
LABEL_99:
      if (v13 >= 2)
      {
        v95 = *v101;
        do
        {
          uint64_t v96 = v13 - 2;
          if (v13 < 2) {
            goto LABEL_128;
          }
          if (!v95) {
            goto LABEL_140;
          }
          long long v97 = *(void *)&v10[16 * v96 + 32];
          uint64_t v98 = *(void *)&v10[16 * v13 + 24];
          specialized _merge<A>(low:mid:high:buffer:by:)((void **)(v95 + 8 * v97), (void **)(v95 + 8 * *(void *)&v10[16 * v13 + 16]), v95 + 8 * v98, v111);
          if (v1) {
            break;
          }
          if (v98 < v97) {
            goto LABEL_129;
          }
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            Swift::Int v10 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v10);
          }
          if (v96 >= *((void *)v10 + 2)) {
            goto LABEL_130;
          }
          uint64_t v99 = &v10[16 * v96 + 32];
          *(void *)uint64_t v99 = v97;
          *((void *)v99 + 1) = v98;
          uint64_t v100 = *((void *)v10 + 2);
          if (v13 > v100) {
            goto LABEL_131;
          }
          memmove(&v10[16 * v13 + 16], &v10[16 * v13 + 32], 16 * (v100 - v13));
          *((void *)v10 + 2) = v100 - 1;
          Swift::Int v13 = v100 - 1;
        }
        while (v100 > 2);
      }
LABEL_110:
      swift_bridgeObjectRelease();
      *(void *)((v112 & 0xFFFFFFFFFFFFFF8) + 0x10) = 0;
      specialized Array._endMutation()();
      swift_bridgeObjectRelease();
      return;
    }
  }
  else
  {
    uint64_t v7 = v2;
    uint64_t v8 = v5 >> 1;
    type metadata accessor for NSObject & PlatformAccessibilityElementProtocol();
    uint64_t v9 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10) = v8;
    uint64_t v2 = v7;
    char v111 = (char *)((v9 & 0xFFFFFFFFFFFFFF8) + 32);
    char v112 = v9;
  }
  uint64_t v11 = 0;
  Swift::Int v12 = *v2;
  uint64_t v103 = *v2 + 16;
  uint64_t v104 = v6;
  char v102 = *v2 - 8;
  Swift::Int v10 = (char *)MEMORY[0x1E4FBC860];
  BOOL v108 = v3;
  while (1)
  {
    uint64_t v14 = v11++;
    uint64_t v109 = v14;
    if (v11 < v3)
    {
      uint64_t v105 = v10;
      uint64_t v15 = *(void **)(v12 + 8 * v11);
      uint64_t v16 = *(void **)(v12 + 8 * v14);
      swift_getObjectType();
      char v17 = v15;
      unint64_t v18 = v16;
      Swift::Int v19 = PlatformAccessibilityElementProtocol<>.compareGeometry(to:)((uint64_t)v18);

      uint64_t v11 = v14 + 2;
      if (v14 + 2 < v3)
      {
        id v20 = (void **)(v103 + 8 * v14);
        while (1)
        {
          char v22 = *(v20 - 1);
          id v21 = *v20;
          swift_getObjectType();
          char v23 = v21;
          Swift::Int v24 = v22;
          uint64_t v25 = PlatformAccessibilityElementProtocol<>.compareGeometry(to:)((uint64_t)v24);

          if ((v19 == (id)-1) == (v25 != (id)-1)) {
            break;
          }
          ++v11;
          ++v20;
          uint64_t v3 = v108;
          if (v108 == v11)
          {
            uint64_t v11 = v108;
            goto LABEL_22;
          }
        }
        uint64_t v3 = v108;
LABEL_22:
        uint64_t v14 = v109;
      }
      Swift::Int v10 = v105;
      if (v19 == (id)-1)
      {
        if (v11 < v14) {
          goto LABEL_136;
        }
        if (v14 < v11)
        {
          uint64_t v26 = (uint64_t *)(v102 + 8 * v11);
          unint64_t v27 = v11;
          int64_t v28 = v14;
          uint64_t v29 = (uint64_t *)(v12 + 8 * v14);
          do
          {
            if (v28 != --v27)
            {
              if (!v12) {
                goto LABEL_139;
              }
              uint64_t v30 = *v29;
              *uint64_t v29 = *v26;
              *uint64_t v26 = v30;
            }
            ++v28;
            --v26;
            ++v29;
          }
          while (v28 < v27);
        }
      }
    }
    if (v11 < v3)
    {
      if (__OFSUB__(v11, v14)) {
        goto LABEL_132;
      }
      if (v11 - v14 < v104) {
        break;
      }
    }
LABEL_49:
    if (v11 < v14) {
      goto LABEL_127;
    }
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      Swift::Int v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v10 + 2) + 1, 1, v10);
    }
    uint64_t v42 = *((void *)v10 + 2);
    uint64_t v41 = *((void *)v10 + 3);
    Swift::Int v13 = v42 + 1;
    if (v42 >= v41 >> 1) {
      Swift::Int v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v41 > 1), v42 + 1, 1, v10);
    }
    *((void *)v10 + 2) = v13;
    unint64_t v43 = v10 + 32;
    unint64_t v44 = &v10[16 * v42 + 32];
    *(void *)unint64_t v44 = v14;
    *((void *)v44 + 1) = v11;
    if (v42)
    {
      id v110 = v11;
      while (1)
      {
        id v45 = v13 - 1;
        if (v13 >= 4)
        {
          uint64_t v50 = &v43[16 * v13];
          CGFloat v51 = *((void *)v50 - 8);
          unint64_t v52 = *((void *)v50 - 7);
          uint64_t v56 = __OFSUB__(v52, v51);
          char v53 = v52 - v51;
          if (v56) {
            goto LABEL_116;
          }
          uint64_t v55 = *((void *)v50 - 6);
          uint64_t v54 = *((void *)v50 - 5);
          uint64_t v56 = __OFSUB__(v54, v55);
          uint64_t v48 = v54 - v55;
          int v49 = v56;
          if (v56) {
            goto LABEL_117;
          }
          id v57 = v13 - 2;
          char v58 = &v43[16 * v13 - 32];
          uint64_t v60 = *(void *)v58;
          char v59 = *((void *)v58 + 1);
          uint64_t v56 = __OFSUB__(v59, v60);
          uint64_t v61 = v59 - v60;
          if (v56) {
            goto LABEL_119;
          }
          uint64_t v56 = __OFADD__(v48, v61);
          uint64_t v62 = v48 + v61;
          if (v56) {
            goto LABEL_122;
          }
          if (v62 >= v53)
          {
            uint64_t v80 = &v43[16 * v45];
            char v82 = *(void *)v80;
            id v81 = *((void *)v80 + 1);
            uint64_t v56 = __OFSUB__(v81, v82);
            uint64_t v83 = v81 - v82;
            if (v56) {
              goto LABEL_126;
            }
            char v73 = v48 < v83;
            goto LABEL_87;
          }
        }
        else
        {
          if (v13 != 3)
          {
            uint64_t v74 = *((void *)v10 + 4);
            id v75 = *((void *)v10 + 5);
            uint64_t v56 = __OFSUB__(v75, v74);
            uint64_t v67 = v75 - v74;
            long long v68 = v56;
            goto LABEL_81;
          }
          uint64_t v47 = *((void *)v10 + 4);
          id v46 = *((void *)v10 + 5);
          uint64_t v56 = __OFSUB__(v46, v47);
          uint64_t v48 = v46 - v47;
          int v49 = v56;
        }
        if (v49) {
          goto LABEL_118;
        }
        id v57 = v13 - 2;
        id v63 = &v43[16 * v13 - 32];
        uint64_t v65 = *(void *)v63;
        char v64 = *((void *)v63 + 1);
        int v66 = __OFSUB__(v64, v65);
        uint64_t v67 = v64 - v65;
        long long v68 = v66;
        if (v66) {
          goto LABEL_121;
        }
        uint64_t v69 = &v43[16 * v45];
        uint64_t v71 = *(void *)v69;
        uint64_t v70 = *((void *)v69 + 1);
        uint64_t v56 = __OFSUB__(v70, v71);
        id v72 = v70 - v71;
        if (v56) {
          goto LABEL_124;
        }
        if (__OFADD__(v67, v72)) {
          goto LABEL_125;
        }
        if (v67 + v72 >= v48)
        {
          char v73 = v48 < v72;
LABEL_87:
          if (v73) {
            id v45 = v57;
          }
          goto LABEL_89;
        }
LABEL_81:
        if (v68) {
          goto LABEL_120;
        }
        uint64_t v76 = &v43[16 * v45];
        uint64_t v78 = *(void *)v76;
        long long v77 = *((void *)v76 + 1);
        uint64_t v56 = __OFSUB__(v77, v78);
        int v79 = v77 - v78;
        if (v56) {
          goto LABEL_123;
        }
        if (v79 < v67) {
          goto LABEL_14;
        }
LABEL_89:
        char v84 = v45 - 1;
        if (v45 - 1 >= v13)
        {
          __break(1u);
LABEL_113:
          __break(1u);
LABEL_114:
          __break(1u);
LABEL_115:
          __break(1u);
LABEL_116:
          __break(1u);
LABEL_117:
          __break(1u);
LABEL_118:
          __break(1u);
LABEL_119:
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
          goto LABEL_135;
        }
        uint64_t v85 = v12;
        if (!v12) {
          goto LABEL_138;
        }
        id v86 = v10;
        char v87 = &v43[16 * v84];
        char v88 = *(void *)v87;
        uint64_t v89 = v43;
        uint64_t v90 = v45;
        uint64_t v91 = &v43[16 * v45];
        id v92 = *((void *)v91 + 1);
        char v93 = v85;
        specialized _merge<A>(low:mid:high:buffer:by:)((void **)(v85 + 8 * *(void *)v87), (void **)(v85 + 8 * *(void *)v91), v85 + 8 * v92, v111);
        if (v1) {
          goto LABEL_110;
        }
        if (v92 < v88) {
          goto LABEL_113;
        }
        if (v90 > *((void *)v86 + 2)) {
          goto LABEL_114;
        }
        *(void *)char v87 = v88;
        *(void *)&v89[16 * v84 + 8] = v92;
        uint64_t v94 = *((void *)v86 + 2);
        if (v90 >= v94) {
          goto LABEL_115;
        }
        Swift::Int v10 = v86;
        Swift::Int v13 = v94 - 1;
        memmove(v91, v91 + 16, 16 * (v94 - 1 - v90));
        unint64_t v43 = v89;
        *((void *)v86 + 2) = v94 - 1;
        Swift::Int v12 = v93;
        uint64_t v11 = v110;
        if (v94 <= 2) {
          goto LABEL_14;
        }
      }
    }
    Swift::Int v13 = 1;
LABEL_14:
    uint64_t v3 = v108;
    if (v11 >= v108) {
      goto LABEL_99;
    }
  }
  if (__OFADD__(v14, v104)) {
    goto LABEL_134;
  }
  if (v14 + v104 >= v3) {
    id v31 = v3;
  }
  else {
    id v31 = v14 + v104;
  }
  if (v31 >= v14)
  {
    if (v11 != v31)
    {
      long long v106 = v10;
      uint64_t v107 = v31;
      uint64_t v32 = v102 + 8 * v11;
      do
      {
        id v33 = *(void **)(v12 + 8 * v11);
        uint64_t v34 = v14;
        uint64_t v35 = v32;
        do
        {
          int64_t v36 = *(void **)v35;
          swift_getObjectType();
          uint64_t v37 = v33;
          unint64_t v38 = v36;
          uint64_t v39 = PlatformAccessibilityElementProtocol<>.compareGeometry(to:)((uint64_t)v38);

          if (v39 != (id)-1) {
            break;
          }
          if (!v12) {
            goto LABEL_137;
          }
          uint64_t v40 = *(void **)v35;
          id v33 = *(void **)(v35 + 8);
          *(void *)uint64_t v35 = v33;
          *(void *)(v35 + 8) = v40;
          v35 -= 8;
          ++v34;
        }
        while (v11 != v34);
        ++v11;
        v32 += 8;
        uint64_t v14 = v109;
      }
      while (v11 != v107);
      uint64_t v11 = v107;
      Swift::Int v10 = v106;
    }
    goto LABEL_49;
  }
LABEL_135:
  __break(1u);
LABEL_136:
  __break(1u);
LABEL_137:
  __break(1u);
LABEL_138:
  __break(1u);
LABEL_139:
  __break(1u);
LABEL_140:
  __break(1u);
LABEL_141:
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t specialized _merge<A>(low:mid:high:buffer:by:)(uint64_t *__src, uint64_t *a2, unint64_t a3, uint64_t *__dst)
{
  unint64_t v38 = __dst;
  Swift::Int v5 = a2;
  uint64_t v6 = __src;
  int64_t v7 = (char *)a2 - (char *)__src;
  int64_t v8 = (char *)a2 - (char *)__src + 15;
  if ((char *)a2 - (char *)__src >= 0) {
    int64_t v8 = (char *)a2 - (char *)__src;
  }
  uint64_t v9 = v8 >> 4;
  uint64_t v10 = a3 - (void)a2;
  uint64_t v11 = a3 - (void)a2 + 15;
  if ((uint64_t)(a3 - (void)a2) >= 0) {
    uint64_t v11 = a3 - (void)a2;
  }
  uint64_t v12 = v11 >> 4;
  id v46 = __src;
  id v45 = __dst;
  if (v9 >= v11 >> 4)
  {
    if (v10 >= -15)
    {
      if (__dst != a2 || &a2[2 * v12] <= __dst)
      {
        memmove(__dst, a2, 16 * v12);
        __dst = v38;
      }
      char v22 = &__dst[2 * v12];
      unint64_t v44 = v22;
      id v46 = v5;
      if (v6 < v5 && v10 >= 16)
      {
        char v23 = (uint64_t *)(a3 - 16);
        Swift::Int v24 = v5;
        uint64_t v37 = v6;
        while (1)
        {
          uint64_t v25 = v22;
          uint64_t v26 = *(v22 - 2);
          unint64_t v27 = (void *)*(v22 - 1);
          v22 -= 2;
          uint64_t v42 = v26;
          unint64_t v43 = v27;
          uint64_t v28 = *(v24 - 2);
          uint64_t v29 = (void *)*(v24 - 1);
          v24 -= 2;
          uint64_t v40 = v28;
          uint64_t v41 = v29;
          id v30 = v27;
          id v31 = v29;
          char v32 = closure #1 in Sequence<>.sortedSupplementaryItems()(&v42, &v40);
          if (v39) {
            break;
          }
          char v33 = v32;
          uint64_t v39 = 0;
          uint64_t v34 = v23 + 2;

          if (v33)
          {
            uint64_t v35 = v38;
            char v22 = v25;
            if (v34 != v5 || v23 >= v5) {
              *(_OWORD *)char v23 = *(_OWORD *)v24;
            }
            id v46 = v24;
          }
          else
          {
            unint64_t v44 = v22;
            uint64_t v35 = v38;
            if (v34 < v25 || v23 >= v25 || v34 != v25) {
              *(_OWORD *)char v23 = *(_OWORD *)v22;
            }
            Swift::Int v24 = v5;
          }
          if (v24 > v37)
          {
            v23 -= 2;
            Swift::Int v5 = v24;
            if (v22 > v35) {
              continue;
            }
          }
          goto LABEL_47;
        }
      }
      goto LABEL_47;
    }
  }
  else if (v7 >= -15)
  {
    if (__dst != __src || &__src[2 * v9] <= __dst)
    {
      memmove(__dst, __src, 16 * v9);
      __dst = v38;
    }
    Swift::Int v13 = &__dst[2 * v9];
    unint64_t v44 = v13;
    if ((unint64_t)v5 < a3 && v7 >= 16)
    {
      while (1)
      {
        uint64_t v14 = (void *)v5[1];
        uint64_t v42 = *v5;
        unint64_t v43 = v14;
        uint64_t v15 = (void *)__dst[1];
        uint64_t v16 = __dst;
        uint64_t v40 = *__dst;
        uint64_t v41 = v15;
        id v17 = v14;
        id v18 = v15;
        char v19 = closure #1 in Sequence<>.sortedSupplementaryItems()(&v42, &v40);
        if (v39) {
          break;
        }
        char v20 = v19;

        if (v20)
        {
          id v21 = v5 + 2;
          __dst = v16;
          if (v6 < v5 || v6 >= v21 || v6 != v5) {
            *(_OWORD *)uint64_t v6 = *(_OWORD *)v5;
          }
        }
        else
        {
          if (v6 != v16) {
            *(_OWORD *)uint64_t v6 = *(_OWORD *)v16;
          }
          __dst = v16 + 2;
          id v45 = v16 + 2;
          id v21 = v5;
        }
        uint64_t v39 = 0;
        v6 += 2;
        id v46 = v6;
        if (__dst < v13)
        {
          Swift::Int v5 = v21;
          if ((unint64_t)v21 < a3) {
            continue;
          }
        }
        goto LABEL_47;
      }
    }
LABEL_47:
    specialized $defer #1 <A>() in _merge<A>(low:mid:high:buffer:by:)((void **)&v46, (const void **)&v45, &v44);
    return 1;
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized _merge<A>(low:mid:high:buffer:by:)(void **a1, void **__src, unint64_t a3, char *a4)
{
  uint64_t v35 = a1;
  Swift::Int v5 = __src;
  uint64_t v6 = (char *)__src - (char *)a1;
  uint64_t v7 = (char *)__src - (char *)a1 + 7;
  if ((char *)__src - (char *)a1 >= 0) {
    uint64_t v7 = (char *)__src - (char *)a1;
  }
  uint64_t v8 = v7 >> 3;
  uint64_t v9 = a3 - (void)__src;
  uint64_t v10 = a3 - (void)__src + 7;
  if ((uint64_t)(a3 - (void)__src) >= 0) {
    uint64_t v10 = a3 - (void)__src;
  }
  uint64_t v11 = v10 >> 3;
  uint64_t v34 = (void **)a4;
  if (v8 < v10 >> 3)
  {
    if (v6 >= -7)
    {
      if (a4 != (char *)a1 || &a1[v8] <= (void **)a4) {
        memmove(a4, a1, 8 * v8);
      }
      uint64_t v12 = (void **)&a4[8 * v8];
      char v33 = (char *)v12;
      if ((unint64_t)v5 < a3 && v6 >= 8)
      {
        Swift::Int v13 = (void **)a4;
        uint64_t v14 = a1;
        do
        {
          uint64_t v15 = *v5;
          uint64_t v16 = *v13;
          swift_getObjectType();
          id v17 = v15;
          id v18 = v16;
          id v19 = PlatformAccessibilityElementProtocol<>.compareGeometry(to:)((uint64_t)v18);

          if (v19 == (id)-1)
          {
            char v20 = v5 + 1;
            if (v14 < v5 || v14 >= v20 || v14 != v5) {
              *uint64_t v14 = *v5;
            }
          }
          else
          {
            if (v14 != v13) {
              *uint64_t v14 = *v13;
            }
            uint64_t v34 = ++v13;
            char v20 = v5;
          }
          ++v14;
          if (v13 >= v12) {
            break;
          }
          Swift::Int v5 = v20;
        }
        while ((unint64_t)v20 < a3);
        uint64_t v35 = v14;
      }
      goto LABEL_43;
    }
LABEL_44:
    _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
    JUMPOUT(0x18824F9D8);
  }
  if (v9 < -7) {
    goto LABEL_44;
  }
  if (a4 != (char *)__src || &__src[v11] <= (void **)a4) {
    memmove(a4, __src, 8 * v11);
  }
  id v21 = &a4[8 * v11];
  char v33 = v21;
  uint64_t v35 = v5;
  if (a1 < v5 && v9 >= 8)
  {
    char v22 = (void **)(a3 - 8);
    char v23 = v5;
    do
    {
      Swift::Int v24 = v22 + 1;
      uint64_t v25 = (void *)*((void *)v21 - 1);
      uint64_t v26 = *--v23;
      swift_getObjectType();
      id v27 = v25;
      id v28 = v26;
      id v29 = PlatformAccessibilityElementProtocol<>.compareGeometry(to:)((uint64_t)v28);

      if (v29 == (id)-1)
      {
        if (v24 != v5 || v22 >= v5) {
          *char v22 = *v23;
        }
        uint64_t v35 = v23;
      }
      else
      {
        char v33 = v21 - 8;
        if (v24 < (void **)v21 || v22 >= (void **)v21 || v24 != (void **)v21) {
          *char v22 = (void *)*((void *)v21 - 1);
        }
        char v23 = v5;
        v21 -= 8;
      }
      if (v23 <= a1) {
        break;
      }
      --v22;
      Swift::Int v5 = v23;
    }
    while (v21 > a4);
  }
LABEL_43:
  specialized $defer #1 <A>() in _merge<A>(low:mid:high:buffer:by:)((void **)&v35, (const void **)&v34, &v33);
  return 1;
}

void type metadata accessor for (offset: Int, element: AccessibilityNode)()
{
  if (!lazy cache variable for type metadata for (offset: Int, element: AccessibilityNode))
  {
    type metadata accessor for AccessibilityNode();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (offset: Int, element: AccessibilityNode));
    }
  }
}

uint64_t _s7SwiftUI22_LazyLayout_Subview_V1VSgWOhTm_0(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  _sypSgMaTm_10(0, a2, a3, MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  return a1;
}

uint64_t outlined init with copy of _LazyLayout_Subviews_V1.SubviewsSequence(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t outlined init with take of AccessibilityScrollableContext?(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t a4)
{
  _sypSgMaTm_10(0, a3, a4, MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a2, a1, v6);
  return a2;
}

uint64_t outlined destroy of _LazyLayout_Subviews_V1.SubviewsIterator(uint64_t a1)
{
  return a1;
}

uint64_t outlined init with copy of AnimationTimelineSchedule.Entries(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AnimationTimelineSchedule.Entries();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of AccessibilityScrollableContext??(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t specialized Collection.firstIndex(where:)(unint64_t a1, id a2)
{
  if (a1 >> 62) {
    goto LABEL_11;
  }
  uint64_t v4 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  uint64_t v5 = 0;
  if (v4)
  {
    while (1)
    {
      id v6 = (a1 & 0xC000000000000001) != 0 ? (id)MEMORY[0x18C117680](v5, a1) : *(id *)(a1 + 8 * v5 + 32);
      id v7 = v6;

      if (v7 == a2) {
        break;
      }
      uint64_t v8 = v5 + 1;
      if (__OFADD__(v5, 1))
      {
        __break(1u);
LABEL_11:
        swift_bridgeObjectRetain();
        uint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        uint64_t v5 = 0;
        if (!v4) {
          return v5;
        }
      }
      else
      {
        ++v5;
        if (v8 == v4) {
          return 0;
        }
      }
    }
  }
  return v5;
}

BOOL partial apply for closure #1 in ViewRendererHost.containsAccessibilityElement(_:)(uint64_t a1)
{
  uint64_t v2 = *(void *)(v1 + 32);
  if (v2 == a1) {
    **(unsigned char **)(v1 + 40) = 1;
  }
  return v2 != a1;
}

uint64_t assignWithTake for AccessibilityCore.Notification.ScreenChanged(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a1;
  *(void *)a1 = *(void *)a2;

  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  return a1;
}

ValueMetadata *type metadata accessor for AccessibilityCore.Notification.ScreenChanged()
{
  return &type metadata for AccessibilityCore.Notification.ScreenChanged;
}

void **initializeBufferWithCopyOfBuffer for AccessibilityCore.Notification.LayoutChanged(void **a1, void **a2)
{
  uint64_t v3 = *a2;
  *a1 = *a2;
  id v4 = v3;
  return a1;
}

ValueMetadata *type metadata accessor for AccessibilityCore.Notification.LayoutChanged()
{
  return &type metadata for AccessibilityCore.Notification.LayoutChanged;
}

ValueMetadata *type metadata accessor for AccessibilityCore.Notification.LabelChanged()
{
  return &type metadata for AccessibilityCore.Notification.LabelChanged;
}

ValueMetadata *type metadata accessor for AccessibilityCore.Notification.ValueChanged()
{
  return &type metadata for AccessibilityCore.Notification.ValueChanged;
}

ValueMetadata *type metadata accessor for AccessibilityRole()
{
  return &type metadata for AccessibilityRole;
}

ValueMetadata *type metadata accessor for HostingViewTransparentBackgroundReason()
{
  return &type metadata for HostingViewTransparentBackgroundReason;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance HostingViewTransparentBackgroundReason()
{
  return HostingViewTransparentBackgroundReason.description.getter(*v0);
}

uint64_t specialized RangeReplaceableCollection<>.removeLast(_:)(uint64_t result)
{
  if (result)
  {
    if (result < 0)
    {
      __break(1u);
    }
    else
    {
      unint64_t v2 = v1[1];
      if ((v2 & 0x2000000000000000) != 0) {
        uint64_t v3 = HIBYTE(v2) & 0xF;
      }
      else {
        uint64_t v3 = *v1 & 0xFFFFFFFFFFFFLL;
      }
      unint64_t v4 = String.index(_:offsetBy:limitedBy:)();
      if (v5) {
        goto LABEL_14;
      }
      if (4 * v3 >= v4 >> 14)
      {
        return MEMORY[0x1F41838E8]();
      }
    }
    __break(1u);
LABEL_14:
    __break(1u);
    return MEMORY[0x1F41838E8]();
  }
  return result;
}

void __swiftcall PopUpButtonPickerStyle.init()()
{
}

void static PopUpButtonPickerStyle._makeView<A>(value:inputs:)()
{
}

void static PopUpButtonPickerStyle._makeViewList<A>(value:inputs:)()
{
}

ValueMetadata *type metadata accessor for PopUpButtonPickerStyle()
{
  return &type metadata for PopUpButtonPickerStyle;
}

ValueMetadata *type metadata accessor for ButtonStyleDebugOverlayModifier()
{
  return &type metadata for ButtonStyleDebugOverlayModifier;
}

ValueMetadata *type metadata accessor for VisualizeViewsEnabled()
{
  return &type metadata for VisualizeViewsEnabled;
}

uint64_t associated type witness table accessor for ViewModifier.Body : View in ButtonStyleDebugOverlayModifier()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t protocol witness for static UserDefaultKeyedFeature.key.getter in conformance VisualizeViews()
{
  uint64_t v0 = static VisualizeViews.key;
  swift_bridgeObjectRetain();
  return v0;
}

id protocol witness for static UserDefaultKeyedFeature.defaults.getter in conformance VisualizeViews()
{
  if (one-time initialization token for defaults != -1) {
    swift_once();
  }
  uint64_t v0 = (void *)static VisualizeViews.defaults;

  return v0;
}

uint64_t protocol witness for static UserDefaultKeyedFeature.cachedValue.getter in conformance VisualizeViews()
{
  return static VisualizeViews.cachedValue;
}

uint64_t protocol witness for static UserDefaultKeyedFeature.cachedValue.setter in conformance VisualizeViews(char a1)
{
  uint64_t result = swift_beginAccess();
  static VisualizeViews.cacheduint64_t Value = a1;
  return result;
}

uint64_t (*protocol witness for static UserDefaultKeyedFeature.cachedValue.modify in conformance VisualizeViews())()
{
  return _defaultSwiftUIActivityEnvironmentLoggingEnabled.modify;
}

uint64_t protocol witness for static Feature.isEnabled.getter in conformance VisualizeViews()
{
  lazy protocol witness table accessor for type VisualizeViews and conformance VisualizeViews();

  return static UserDefaultKeyedFeature.isEnabled.getter();
}

uint64_t protocol witness for static ViewInputPredicate.evaluate(inputs:) in conformance VisualizeViews()
{
  lazy protocol witness table accessor for type VisualizeViews and conformance VisualizeViews();
  PropertyList.subscript.getter();
  return v1;
}

uint64_t protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance VisualizeViews()
{
  return PropertyList.subscript.setter();
}

uint64_t protocol witness for static PropertyKey.defaultValue.getter in conformance VisualizeViews@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t v4 = lazy protocol witness table accessor for type VisualizeViews and conformance VisualizeViews();
  uint64_t result = (*(uint64_t (**)(uint64_t, unint64_t))(v4 + 16))(a1, v4);
  *a2 = result & 1;
  return result;
}

uint64_t protocol witness for static ViewInputPredicate.evaluate(inputs:) in conformance VisualizeViewsEnabled()
{
  uint64_t result = _SwiftUIIsAppleInternalBuild();
  if (result)
  {
    lazy protocol witness table accessor for type VisualizeViews and conformance VisualizeViews();
    return static UserDefaultKeyedFeature.isEnabled.getter() & 1;
  }
  return result;
}

uint64_t ButtonStyleDebugOverlayModifier.color.getter(ValueMetadata *a1)
{
  lazy protocol witness table accessor for type PlainButtonStyle and conformance PlainButtonStyle();
  if (a1 == &type metadata for PlainButtonStyle)
  {
    return static Color.red.getter();
  }
  if (!AnyButtonStyleType.isTopLevelStyle.getter(a1))
  {
    type metadata accessor for PrimitiveButtonStyle.Type();
    String.init<A>(reflecting:)();
    char v3 = specialized Sequence<>.starts<A>(with:)();
    swift_bridgeObjectRelease();
    if (v3) {
      return static Color.mint.getter();
    }
    return static Color.red.getter();
  }

  return static Color.blue.getter();
}

uint64_t closure #1 in closure #1 in ButtonStyleDebugOverlayModifier.body(content:)@<X0>(ValueMetadata *a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = static Color.clear.getter();
  uint64_t v5 = ButtonStyleDebugOverlayModifier.color.getter(a1);
  StrokeStyle.init(lineWidth:lineCap:lineJoin:miterLimit:dash:dashPhase:)();
  uint64_t v6 = static Alignment.center.getter();
  __asm { FMOV            V0.2D, #4.0 }
  long long v42 = _Q0;
  LOBYTE(v43) = 1;
  *((void *)&v43 + 1) = v30;
  long long v44 = v31;
  long long v45 = v32;
  *(void *)&long long v46 = v5;
  WORD4(v46) = 256;
  long long v47 = _Q0;
  LOBYTE(v48) = 1;
  *((void *)&v48 + 1) = v4;
  LOWORD(v49) = 256;
  *((void *)&v49 + 1) = v6;
  uint64_t v50 = v12;
  long long v39 = v48;
  long long v40 = v49;
  uint64_t v41 = v12;
  long long v37 = v46;
  long long v38 = _Q0;
  long long v33 = _Q0;
  long long v34 = v43;
  long long v35 = v31;
  long long v36 = v32;
  static Alignment.center.getter();
  specialized View.frame(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, (uint64_t)&v14, 0.0, 1, INFINITY, 0);
  outlined release of ModifiedContent<_ShapeView<_StrokedShape<RoundedRectangle>, Color>, _BackgroundModifier<_ShapeView<RoundedRectangle, Color>>>((uint64_t)&v42);
  ButtonStyleDebugOverlayModifier.label.getter(a1, (uint64_t)&v51);
  v67[8] = v59;
  v67[9] = v60;
  v68[0] = v61[0];
  *(_OWORD *)((char *)v68 + 11) = *(_OWORD *)((char *)v61 + 11);
  v67[4] = v55;
  v67[5] = v56;
  v67[6] = v57;
  v67[7] = v58;
  v67[0] = v51;
  v67[1] = v52;
  v67[2] = v53;
  v67[3] = v54;
  v62[12] = v26;
  v62[13] = v27;
  v62[14] = v28;
  v62[8] = v22;
  v62[9] = v23;
  v62[10] = v24;
  v62[11] = v25;
  v62[4] = v18;
  v62[5] = v19;
  v62[6] = v20;
  v62[7] = v21;
  v62[0] = v14;
  v62[1] = v15;
  v62[2] = v16;
  v62[3] = v17;
  v64[8] = v59;
  v64[9] = v60;
  *(_OWORD *)uint64_t v65 = v61[0];
  *(_OWORD *)&v65[11] = *(_OWORD *)((char *)v61 + 11);
  v64[4] = v55;
  v64[5] = v56;
  v64[6] = v57;
  v64[7] = v58;
  v64[0] = v51;
  v64[1] = v52;
  v64[2] = v53;
  v64[3] = v54;
  __src[12] = v26;
  __src[13] = v27;
  __src[14] = v28;
  __src[8] = v22;
  __src[9] = v23;
  __src[10] = v24;
  __src[11] = v25;
  __src[4] = v18;
  __src[5] = v19;
  __src[6] = v20;
  __src[7] = v21;
  __src[0] = v14;
  __src[1] = v15;
  __src[2] = v16;
  __src[3] = v17;
  *(_OWORD *)((char *)&__src[24] + 8) = v60;
  *(_OWORD *)((char *)&__src[25] + 8) = v61[0];
  *(_OWORD *)((char *)&__src[26] + 3) = *(_OWORD *)((char *)v61 + 11);
  *(_OWORD *)((char *)&__src[20] + 8) = v56;
  *(_OWORD *)((char *)&__src[21] + 8) = v57;
  *(_OWORD *)((char *)&__src[22] + 8) = v58;
  *(_OWORD *)((char *)&__src[23] + 8) = v59;
  *(_OWORD *)((char *)&__src[16] + 8) = v52;
  *(_OWORD *)((char *)&__src[17] + 8) = v53;
  *(_OWORD *)((char *)&__src[18] + 8) = v54;
  *(_OWORD *)((char *)&__src[19] + 8) = v55;
  uint64_t v63 = v29;
  *(void *)&__src[15] = v29;
  *(_OWORD *)((char *)&__src[15] + 8) = v51;
  memcpy(a2, __src, 0x1B3uLL);
  outlined retain of StrokeShapeView<RoundedRectangle, Color, _ShapeView<RoundedRectangle, Color>>((uint64_t)v62);
  outlined retain of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<Int?>>, _EnvironmentKeyWritingModifier<Text.TruncationMode>>, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundStyleModifier<Color>>, _PaddingLayout>, _InsettableBackgroundShapeModifier<Color, UnevenRoundedRectangle>>((uint64_t)v64);
  outlined release of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<Int?>>, _EnvironmentKeyWritingModifier<Text.TruncationMode>>, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundStyleModifier<Color>>, _PaddingLayout>, _InsettableBackgroundShapeModifier<Color, UnevenRoundedRectangle>>((uint64_t)v67);
  v69[12] = v26;
  v69[13] = v27;
  v69[14] = v28;
  uint64_t v70 = v29;
  v69[8] = v22;
  v69[9] = v23;
  v69[10] = v24;
  v69[11] = v25;
  v69[4] = v18;
  v69[5] = v19;
  v69[6] = v20;
  v69[7] = v21;
  v69[0] = v14;
  v69[1] = v15;
  v69[2] = v16;
  v69[3] = v17;
  return outlined release of ModifiedContent<_ShapeView<_StrokedShape<RoundedRectangle>, Color>, _BackgroundModifier<_ShapeView<RoundedRectangle, Color>>>((uint64_t)v69);
}

uint64_t ButtonStyleDebugOverlayModifier.label.getter@<X0>(ValueMetadata *a1@<X0>, uint64_t a2@<X8>)
{
  type metadata accessor for PrimitiveButtonStyle.Type();
  uint64_t v31 = String.init<A>(describing:)();
  lazy protocol witness table accessor for type String and conformance String();
  uint64_t v28 = Text.init<A>(_:)();
  uint64_t v5 = v4;
  char v7 = v6;
  uint64_t v30 = v8;
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v29 = swift_getKeyPath();
  LOBYTE(v31) = 4;
  uint64_t v10 = static Font.system(size:weight:design:)();
  uint64_t v11 = swift_getKeyPath();
  uint64_t v12 = static Color.white.getter();
  char v13 = static Edge.Set.horizontal.getter();
  EdgeInsets.init(_all:)();
  uint64_t v15 = v14;
  uint64_t v17 = v16;
  uint64_t v19 = v18;
  uint64_t v21 = v20;
  uint64_t v22 = ButtonStyleDebugOverlayModifier.color.getter(a1);
  uint64_t result = RectangleCornerRadii.init(topLeft:topRight:bottomRight:bottomLeft:)();
  *(void *)a2 = v28;
  *(void *)(a2 + 8) = v5;
  *(unsigned char *)(a2 + 16) = v7 & 1;
  *(_DWORD *)(a2 + 17) = v31;
  *(_DWORD *)(a2 + 20) = *(_DWORD *)((char *)&v31 + 3);
  *(void *)(a2 + 24) = v30;
  *(void *)(a2 + 32) = KeyPath;
  *(void *)(a2 + 40) = 1;
  *(unsigned char *)(a2 + 48) = 0;
  *(_DWORD *)(a2 + 52) = *(_DWORD *)&v34[3];
  *(_DWORD *)(a2 + 49) = *(_DWORD *)v34;
  *(void *)(a2 + 56) = v29;
  *(unsigned char *)(a2 + 64) = 1;
  *(_DWORD *)(a2 + 68) = *(_DWORD *)&v33[3];
  *(_DWORD *)(a2 + 65) = *(_DWORD *)v33;
  *(void *)(a2 + 72) = v11;
  *(void *)(a2 + 80) = v10;
  *(void *)(a2 + 88) = v12;
  *(unsigned char *)(a2 + 96) = v13;
  *(_DWORD *)(a2 + 100) = *(_DWORD *)&v32[3];
  *(_DWORD *)(a2 + 97) = *(_DWORD *)v32;
  *(void *)(a2 + 104) = v15;
  *(void *)(a2 + 112) = v17;
  *(void *)(a2 + 120) = v19;
  *(void *)(a2 + 128) = v21;
  *(unsigned char *)(a2 + 136) = 0;
  *(void *)(a2 + 144) = v22;
  *(void *)(a2 + 152) = v24;
  *(void *)(a2 + 160) = v25;
  *(void *)(a2 + 168) = v26;
  *(void *)(a2 + 176) = v27;
  *(_WORD *)(a2 + 184) = 1;
  *(unsigned char *)(a2 + 186) = 1;
  return result;
}

void *protocol witness for ViewModifier.body(content:) in conformance ButtonStyleDebugOverlayModifier@<X0>(uint64_t a1@<X8>)
{
  char v3 = *v1;
  uint64_t v4 = static Alignment.center.getter();
  uint64_t v6 = v5;
  uint64_t v7 = static Alignment.topLeading.getter();
  uint64_t v9 = v8;
  closure #1 in closure #1 in ButtonStyleDebugOverlayModifier.body(content:)(v3, __src);
  *(void *)a1 = v7;
  *(void *)(a1 + 8) = v9;
  uint64_t result = memcpy((void *)(a1 + 16), __src, 0x1B3uLL);
  *(unsigned char *)(a1 + 451) = 0;
  *(void *)(a1 + 456) = v4;
  *(void *)(a1 + 464) = v6;
  return result;
}

unint64_t lazy protocol witness table accessor for type VisualizeViews and conformance VisualizeViews()
{
  unint64_t result = lazy protocol witness table cache variable for type VisualizeViews and conformance VisualizeViews;
  if (!lazy protocol witness table cache variable for type VisualizeViews and conformance VisualizeViews)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type VisualizeViews and conformance VisualizeViews);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type VisualizeViews and conformance VisualizeViews;
  if (!lazy protocol witness table cache variable for type VisualizeViews and conformance VisualizeViews)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type VisualizeViews and conformance VisualizeViews);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type VisualizeViews and conformance VisualizeViews;
  if (!lazy protocol witness table cache variable for type VisualizeViews and conformance VisualizeViews)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type VisualizeViews and conformance VisualizeViews);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type VisualizeViews and conformance VisualizeViews;
  if (!lazy protocol witness table cache variable for type VisualizeViews and conformance VisualizeViews)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type VisualizeViews and conformance VisualizeViews);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type VisualizeViews and conformance VisualizeViews;
  if (!lazy protocol witness table cache variable for type VisualizeViews and conformance VisualizeViews)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type VisualizeViews and conformance VisualizeViews);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type VisualizeViews and conformance VisualizeViews;
  if (!lazy protocol witness table cache variable for type VisualizeViews and conformance VisualizeViews)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type VisualizeViews and conformance VisualizeViews);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type VisualizeViews and conformance VisualizeViews;
  if (!lazy protocol witness table cache variable for type VisualizeViews and conformance VisualizeViews)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type VisualizeViews and conformance VisualizeViews);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type VisualizeViews and conformance VisualizeViews;
  if (!lazy protocol witness table cache variable for type VisualizeViews and conformance VisualizeViews)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type VisualizeViews and conformance VisualizeViews);
  }
  return result;
}

uint64_t outlined retain of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<Int?>>, _EnvironmentKeyWritingModifier<Text.TruncationMode>>, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundStyleModifier<Color>>, _PaddingLayout>, _InsettableBackgroundShapeModifier<Color, UnevenRoundedRectangle>>(uint64_t a1)
{
  return a1;
}

uint64_t outlined release of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<Int?>>, _EnvironmentKeyWritingModifier<Text.TruncationMode>>, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundStyleModifier<Color>>, _PaddingLayout>, _InsettableBackgroundShapeModifier<Color, UnevenRoundedRectangle>>(uint64_t a1)
{
  return a1;
}

uint64_t outlined release of ModifiedContent<_ShapeView<_StrokedShape<RoundedRectangle>, Color>, _BackgroundModifier<_ShapeView<RoundedRectangle, Color>>>(uint64_t a1)
{
  return a1;
}

uint64_t sub_188250D60()
{
  return EnvironmentValues.truncationMode.getter();
}

uint64_t sub_188250D84()
{
  return EnvironmentValues.truncationMode.setter();
}

void *type metadata accessor for VisualizeViews()
{
  return &unk_1ED491808;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<_ViewModifier_Content<ButtonStyleDebugOverlayModifier>, _OverlayModifier<ModifiedContent<ZStack<TupleView<(ModifiedContent<StrokeShapeView<RoundedRectangle, Color, _ShapeView<RoundedRectangle, Color>>, _FlexFrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<Int?>>, _EnvironmentKeyWritingModifier<Text.TruncationMode>>, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundStyleModifier<Color>>, _PaddingLayout>, _InsettableBackgroundShapeModifier<Color, UnevenRoundedRectangle>>)>>, _AllowsHitTestingModifier>>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<ButtonStyleDebugOverlayModifier>, _OverlayModifier<ModifiedContent<ZStack<TupleView<(ModifiedContent<StrokeShapeView<RoundedRectangle, Color, _ShapeView<RoundedRectangle, Color>>, _FlexFrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<Int?>>, _EnvironmentKeyWritingModifier<Text.TruncationMode>>, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundStyleModifier<Color>>, _PaddingLayout>, _InsettableBackgroundShapeModifier<Color, UnevenRoundedRectangle>>)>>, _AllowsHitTestingModifier>>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<ButtonStyleDebugOverlayModifier>, _OverlayModifier<ModifiedContent<ZStack<TupleView<(ModifiedContent<StrokeShapeView<RoundedRectangle, Color, _ShapeView<RoundedRectangle, Color>>, _FlexFrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<Int?>>, _EnvironmentKeyWritingModifier<Text.TruncationMode>>, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundStyleModifier<Color>>, _PaddingLayout>, _InsettableBackgroundShapeModifier<Color, UnevenRoundedRectangle>>)>>, _AllowsHitTestingModifier>>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<_ViewModifier_Content<ButtonStyleDebugOverlayModifier>, _OverlayModifier<ModifiedContent<ZStack<TupleView<(ModifiedContent<StrokeShapeView<RoundedRectangle, Color, _ShapeView<RoundedRectangle, Color>>, _FlexFrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<Int?>>, _EnvironmentKeyWritingModifier<Text.TruncationMode>>, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundStyleModifier<Color>>, _PaddingLayout>, _InsettableBackgroundShapeModifier<Color, UnevenRoundedRectangle>>)>>, _AllowsHitTestingModifier>>>(255, &lazy cache variable for type metadata for ModifiedContent<_ViewModifier_Content<ButtonStyleDebugOverlayModifier>, _OverlayModifier<ModifiedContent<ZStack<TupleView<(ModifiedContent<StrokeShapeView<RoundedRectangle, Color, _ShapeView<RoundedRectangle, Color>>, _FlexFrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<Int?>>, _EnvironmentKeyWritingModifier<Text.TruncationMode>>, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundStyleModifier<Color>>, _PaddingLayout>, _InsettableBackgroundShapeModifier<Color, UnevenRoundedRectangle>>)>>, _AllowsHitTestingModifier>>>, (void (*)(uint64_t))type metadata accessor for _ViewModifier_Content<ButtonStyleDebugOverlayModifier>, type metadata accessor for _OverlayModifier<ModifiedContent<ZStack<TupleView<(ModifiedContent<StrokeShapeView<RoundedRectangle, Color, _ShapeView<RoundedRectangle, Color>>, _FlexFrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<Int?>>, _EnvironmentKeyWritingModifier<Text.TruncationMode>>, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundStyleModifier<Color>>, _PaddingLayout>, _InsettableBackgroundShapeModifier<Color, UnevenRoundedRectangle>>)>>, _AllowsHitTestingModifier>>);
    lazy protocol witness table accessor for type _ShapeView<RoundedRectangle, Color> and conformance _ShapeView<A, B>(&lazy protocol witness table cache variable for type _ViewModifier_Content<ButtonStyleDebugOverlayModifier> and conformance _ViewModifier_Content<A>, (void (*)(uint64_t))type metadata accessor for _ViewModifier_Content<ButtonStyleDebugOverlayModifier>);
    lazy protocol witness table accessor for type _ShapeView<RoundedRectangle, Color> and conformance _ShapeView<A, B>(&lazy protocol witness table cache variable for type _OverlayModifier<ModifiedContent<ZStack<TupleView<(ModifiedContent<StrokeShapeView<RoundedRectangle, Color, _ShapeView<RoundedRectangle, Color>>, _FlexFrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<Int?>>, _EnvironmentKeyWritingModifier<Text.TruncationMode>>, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundStyleModifier<Color>>, _PaddingLayout>, _InsettableBackgroundShapeModifier<Color, UnevenRoundedRectangle>>)>>, _AllowsHitTestingModifier>> and conformance _OverlayModifier<A>, type metadata accessor for _OverlayModifier<ModifiedContent<ZStack<TupleView<(ModifiedContent<StrokeShapeView<RoundedRectangle, Color, _ShapeView<RoundedRectangle, Color>>, _FlexFrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<Int?>>, _EnvironmentKeyWritingModifier<Text.TruncationMode>>, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundStyleModifier<Color>>, _PaddingLayout>, _InsettableBackgroundShapeModifier<Color, UnevenRoundedRectangle>>)>>, _AllowsHitTestingModifier>>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<ButtonStyleDebugOverlayModifier>, _OverlayModifier<ModifiedContent<ZStack<TupleView<(ModifiedContent<StrokeShapeView<RoundedRectangle, Color, _ShapeView<RoundedRectangle, Color>>, _FlexFrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<Int?>>, _EnvironmentKeyWritingModifier<Text.TruncationMode>>, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundStyleModifier<Color>>, _PaddingLayout>, _InsettableBackgroundShapeModifier<Color, UnevenRoundedRectangle>>)>>, _AllowsHitTestingModifier>>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for _ViewModifier_Content<ButtonStyleDebugOverlayModifier>()
{
  if (!lazy cache variable for type metadata for _ViewModifier_Content<ButtonStyleDebugOverlayModifier>)
  {
    lazy protocol witness table accessor for type ButtonStyleDebugOverlayModifier and conformance ButtonStyleDebugOverlayModifier();
    unint64_t v0 = type metadata accessor for _ViewModifier_Content();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ViewModifier_Content<ButtonStyleDebugOverlayModifier>);
    }
  }
}

void type metadata accessor for _OverlayModifier<ModifiedContent<ZStack<TupleView<(ModifiedContent<StrokeShapeView<RoundedRectangle, Color, _ShapeView<RoundedRectangle, Color>>, _FlexFrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<Int?>>, _EnvironmentKeyWritingModifier<Text.TruncationMode>>, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundStyleModifier<Color>>, _PaddingLayout>, _InsettableBackgroundShapeModifier<Color, UnevenRoundedRectangle>>)>>, _AllowsHitTestingModifier>>(uint64_t a1)
{
}

void type metadata accessor for ModifiedContent<ZStack<TupleView<(ModifiedContent<StrokeShapeView<RoundedRectangle, Color, _ShapeView<RoundedRectangle, Color>>, _FlexFrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<Int?>>, _EnvironmentKeyWritingModifier<Text.TruncationMode>>, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundStyleModifier<Color>>, _PaddingLayout>, _InsettableBackgroundShapeModifier<Color, UnevenRoundedRectangle>>)>>, _AllowsHitTestingModifier>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ZStack<TupleView<(ModifiedContent<StrokeShapeView<RoundedRectangle, Color, _ShapeView<RoundedRectangle, Color>>, _FlexFrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<Int?>>, _EnvironmentKeyWritingModifier<Text.TruncationMode>>, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundStyleModifier<Color>>, _PaddingLayout>, _InsettableBackgroundShapeModifier<Color, UnevenRoundedRectangle>>)>>, _AllowsHitTestingModifier>)
  {
    type metadata accessor for _OverlayModifier<ModifiedContent<ZStack<TupleView<(ModifiedContent<StrokeShapeView<RoundedRectangle, Color, _ShapeView<RoundedRectangle, Color>>, _FlexFrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<Int?>>, _EnvironmentKeyWritingModifier<Text.TruncationMode>>, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundStyleModifier<Color>>, _PaddingLayout>, _InsettableBackgroundShapeModifier<Color, UnevenRoundedRectangle>>)>>, _AllowsHitTestingModifier>>(255, &lazy cache variable for type metadata for ZStack<TupleView<(ModifiedContent<StrokeShapeView<RoundedRectangle, Color, _ShapeView<RoundedRectangle, Color>>, _FlexFrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<Int?>>, _EnvironmentKeyWritingModifier<Text.TruncationMode>>, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundStyleModifier<Color>>, _PaddingLayout>, _InsettableBackgroundShapeModifier<Color, UnevenRoundedRectangle>>)>>, (uint64_t (*)(uint64_t))type metadata accessor for TupleView<(ModifiedContent<StrokeShapeView<RoundedRectangle, Color, _ShapeView<RoundedRectangle, Color>>, _FlexFrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<Int?>>, _EnvironmentKeyWritingModifier<Text.TruncationMode>>, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundStyleModifier<Color>>, _PaddingLayout>, _InsettableBackgroundShapeModifier<Color, UnevenRoundedRectangle>>)>, lazy protocol witness table accessor for type TupleView<(ModifiedContent<StrokeShapeView<RoundedRectangle, Color, _ShapeView<RoundedRectangle, Color>>, _FlexFrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<Int?>>, _EnvironmentKeyWritingModifier<Text.TruncationMode>>, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundStyleModifier<Color>>, _PaddingLayout>, _InsettableBackgroundShapeModifier<Color, UnevenRoundedRectangle>>)> and conformance TupleView<A>, MEMORY[0x1E4F415F8]);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ZStack<TupleView<(ModifiedContent<StrokeShapeView<RoundedRectangle, Color, _ShapeView<RoundedRectangle, Color>>, _FlexFrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<Int?>>, _EnvironmentKeyWritingModifier<Text.TruncationMode>>, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundStyleModifier<Color>>, _PaddingLayout>, _InsettableBackgroundShapeModifier<Color, UnevenRoundedRectangle>>)>>, _AllowsHitTestingModifier>);
    }
  }
}

void type metadata accessor for _OverlayModifier<ModifiedContent<ZStack<TupleView<(ModifiedContent<StrokeShapeView<RoundedRectangle, Color, _ShapeView<RoundedRectangle, Color>>, _FlexFrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<Int?>>, _EnvironmentKeyWritingModifier<Text.TruncationMode>>, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundStyleModifier<Color>>, _PaddingLayout>, _InsettableBackgroundShapeModifier<Color, UnevenRoundedRectangle>>)>>, _AllowsHitTestingModifier>>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(void), uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v9 = a3(255);
    uint64_t v10 = a4();
    unint64_t v11 = a5(a1, v9, v10);
    if (!v12) {
      atomic_store(v11, a2);
    }
  }
}

void type metadata accessor for TupleView<(ModifiedContent<StrokeShapeView<RoundedRectangle, Color, _ShapeView<RoundedRectangle, Color>>, _FlexFrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<Int?>>, _EnvironmentKeyWritingModifier<Text.TruncationMode>>, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundStyleModifier<Color>>, _PaddingLayout>, _InsettableBackgroundShapeModifier<Color, UnevenRoundedRectangle>>)>()
{
  if (!lazy cache variable for type metadata for TupleView<(ModifiedContent<StrokeShapeView<RoundedRectangle, Color, _ShapeView<RoundedRectangle, Color>>, _FlexFrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<Int?>>, _EnvironmentKeyWritingModifier<Text.TruncationMode>>, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundStyleModifier<Color>>, _PaddingLayout>, _InsettableBackgroundShapeModifier<Color, UnevenRoundedRectangle>>)>)
  {
    type metadata accessor for (ModifiedContent<StrokeShapeView<RoundedRectangle, Color, _ShapeView<RoundedRectangle, Color>>, _FlexFrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<Int?>>, _EnvironmentKeyWritingModifier<Text.TruncationMode>>, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundStyleModifier<Color>>, _PaddingLayout>, _InsettableBackgroundShapeModifier<Color, UnevenRoundedRectangle>>)();
    unint64_t v0 = type metadata accessor for TupleView();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TupleView<(ModifiedContent<StrokeShapeView<RoundedRectangle, Color, _ShapeView<RoundedRectangle, Color>>, _FlexFrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<Int?>>, _EnvironmentKeyWritingModifier<Text.TruncationMode>>, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundStyleModifier<Color>>, _PaddingLayout>, _InsettableBackgroundShapeModifier<Color, UnevenRoundedRectangle>>)>);
    }
  }
}

void type metadata accessor for (ModifiedContent<StrokeShapeView<RoundedRectangle, Color, _ShapeView<RoundedRectangle, Color>>, _FlexFrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<Int?>>, _EnvironmentKeyWritingModifier<Text.TruncationMode>>, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundStyleModifier<Color>>, _PaddingLayout>, _InsettableBackgroundShapeModifier<Color, UnevenRoundedRectangle>>)()
{
  if (!lazy cache variable for type metadata for (ModifiedContent<StrokeShapeView<RoundedRectangle, Color, _ShapeView<RoundedRectangle, Color>>, _FlexFrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<Int?>>, _EnvironmentKeyWritingModifier<Text.TruncationMode>>, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundStyleModifier<Color>>, _PaddingLayout>, _InsettableBackgroundShapeModifier<Color, UnevenRoundedRectangle>>))
  {
    type metadata accessor for ModifiedContent<StrokeShapeView<RoundedRectangle, Color, _ShapeView<RoundedRectangle, Color>>, _FlexFrameLayout>();
    type metadata accessor for ModifiedContent<_ViewModifier_Content<ButtonStyleDebugOverlayModifier>, _OverlayModifier<ModifiedContent<ZStack<TupleView<(ModifiedContent<StrokeShapeView<RoundedRectangle, Color, _ShapeView<RoundedRectangle, Color>>, _FlexFrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<Int?>>, _EnvironmentKeyWritingModifier<Text.TruncationMode>>, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundStyleModifier<Color>>, _PaddingLayout>, _InsettableBackgroundShapeModifier<Color, UnevenRoundedRectangle>>)>>, _AllowsHitTestingModifier>>>(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<Int?>>, _EnvironmentKeyWritingModifier<Text.TruncationMode>>, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundStyleModifier<Color>>, _PaddingLayout>, _InsettableBackgroundShapeModifier<Color, UnevenRoundedRectangle>>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<Int?>>, _EnvironmentKeyWritingModifier<Text.TruncationMode>>, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundStyleModifier<Color>>, _PaddingLayout>, (void (*)(uint64_t))type metadata accessor for _InsettableBackgroundShapeModifier<Color, UnevenRoundedRectangle>);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (ModifiedContent<StrokeShapeView<RoundedRectangle, Color, _ShapeView<RoundedRectangle, Color>>, _FlexFrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<Int?>>, _EnvironmentKeyWritingModifier<Text.TruncationMode>>, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundStyleModifier<Color>>, _PaddingLayout>, _InsettableBackgroundShapeModifier<Color, UnevenRoundedRectangle>>));
    }
  }
}

void type metadata accessor for ModifiedContent<StrokeShapeView<RoundedRectangle, Color, _ShapeView<RoundedRectangle, Color>>, _FlexFrameLayout>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<StrokeShapeView<RoundedRectangle, Color, _ShapeView<RoundedRectangle, Color>>, _FlexFrameLayout>)
  {
    type metadata accessor for StrokeShapeView<RoundedRectangle, Color, _ShapeView<RoundedRectangle, Color>>();
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<StrokeShapeView<RoundedRectangle, Color, _ShapeView<RoundedRectangle, Color>>, _FlexFrameLayout>);
    }
  }
}

void type metadata accessor for StrokeShapeView<RoundedRectangle, Color, _ShapeView<RoundedRectangle, Color>>()
{
  if (!lazy cache variable for type metadata for StrokeShapeView<RoundedRectangle, Color, _ShapeView<RoundedRectangle, Color>>)
  {
    type metadata accessor for _ShapeView<RoundedRectangle, Color>();
    lazy protocol witness table accessor for type RoundedRectangle and conformance RoundedRectangle();
    lazy protocol witness table accessor for type _ShapeView<RoundedRectangle, Color> and conformance _ShapeView<A, B>(&lazy protocol witness table cache variable for type _ShapeView<RoundedRectangle, Color> and conformance _ShapeView<A, B>, (void (*)(uint64_t))type metadata accessor for _ShapeView<RoundedRectangle, Color>);
    unint64_t v0 = type metadata accessor for StrokeShapeView();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for StrokeShapeView<RoundedRectangle, Color, _ShapeView<RoundedRectangle, Color>>);
    }
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<Int?>>, _EnvironmentKeyWritingModifier<Text.TruncationMode>>, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundStyleModifier<Color>>, _PaddingLayout>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<Int?>>, _EnvironmentKeyWritingModifier<Text.TruncationMode>>, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundStyleModifier<Color>>, _PaddingLayout>)
  {
    type metadata accessor for ModifiedContent<_ViewModifier_Content<ButtonStyleDebugOverlayModifier>, _OverlayModifier<ModifiedContent<ZStack<TupleView<(ModifiedContent<StrokeShapeView<RoundedRectangle, Color, _ShapeView<RoundedRectangle, Color>>, _FlexFrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<Int?>>, _EnvironmentKeyWritingModifier<Text.TruncationMode>>, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundStyleModifier<Color>>, _PaddingLayout>, _InsettableBackgroundShapeModifier<Color, UnevenRoundedRectangle>>)>>, _AllowsHitTestingModifier>>>(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<Int?>>, _EnvironmentKeyWritingModifier<Text.TruncationMode>>, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundStyleModifier<Color>>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<Int?>>, _EnvironmentKeyWritingModifier<Text.TruncationMode>>, _EnvironmentKeyWritingModifier<Font?>>, (void (*)(uint64_t))type metadata accessor for _ForegroundStyleModifier<Color>);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<Int?>>, _EnvironmentKeyWritingModifier<Text.TruncationMode>>, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundStyleModifier<Color>>, _PaddingLayout>);
    }
  }
}

void type metadata accessor for ModifiedContent<_ViewModifier_Content<ButtonStyleDebugOverlayModifier>, _OverlayModifier<ModifiedContent<ZStack<TupleView<(ModifiedContent<StrokeShapeView<RoundedRectangle, Color, _ShapeView<RoundedRectangle, Color>>, _FlexFrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<Int?>>, _EnvironmentKeyWritingModifier<Text.TruncationMode>>, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundStyleModifier<Color>>, _PaddingLayout>, _InsettableBackgroundShapeModifier<Color, UnevenRoundedRectangle>>)>>, _AllowsHitTestingModifier>>>(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t), void (*a4)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    a4(255);
    unint64_t v6 = type metadata accessor for ModifiedContent();
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<Int?>>, _EnvironmentKeyWritingModifier<Text.TruncationMode>>, _EnvironmentKeyWritingModifier<Font?>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<Int?>>, _EnvironmentKeyWritingModifier<Text.TruncationMode>>, _EnvironmentKeyWritingModifier<Font?>>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<Int?>>, _EnvironmentKeyWritingModifier<Text.TruncationMode>>();
    _s7SwiftUI30_EnvironmentKeyWritingModifierVyAA4FontVSgGMaTm_7(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Font?>, (unint64_t *)&lazy cache variable for type metadata for Font?, MEMORY[0x1E4F41390]);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<Int?>>, _EnvironmentKeyWritingModifier<Text.TruncationMode>>, _EnvironmentKeyWritingModifier<Font?>>);
    }
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<Int?>>, _EnvironmentKeyWritingModifier<Text.TruncationMode>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<Int?>>, _EnvironmentKeyWritingModifier<Text.TruncationMode>>)
  {
    type metadata accessor for ModifiedContent<Text, _EnvironmentKeyWritingModifier<Int?>>();
    _sSiSgMaTm_0(255, &lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Text.TruncationMode>, MEMORY[0x1E4F413B8], MEMORY[0x1E4F411E8]);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<Int?>>, _EnvironmentKeyWritingModifier<Text.TruncationMode>>);
    }
  }
}

void type metadata accessor for ModifiedContent<Text, _EnvironmentKeyWritingModifier<Int?>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<Text, _EnvironmentKeyWritingModifier<Int?>>)
  {
    _s7SwiftUI30_EnvironmentKeyWritingModifierVyAA4FontVSgGMaTm_7(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Int?>, (unint64_t *)&lazy cache variable for type metadata for Int?, MEMORY[0x1E4FBB550]);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<Text, _EnvironmentKeyWritingModifier<Int?>>);
    }
  }
}

void _sSiSgMaTm_0(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

void type metadata accessor for _ForegroundStyleModifier<Color>()
{
  if (!lazy cache variable for type metadata for _ForegroundStyleModifier<Color>)
  {
    unint64_t v0 = type metadata accessor for _ForegroundStyleModifier();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ForegroundStyleModifier<Color>);
    }
  }
}

void type metadata accessor for _InsettableBackgroundShapeModifier<Color, UnevenRoundedRectangle>()
{
  if (!lazy cache variable for type metadata for _InsettableBackgroundShapeModifier<Color, UnevenRoundedRectangle>)
  {
    lazy protocol witness table accessor for type UnevenRoundedRectangle and conformance UnevenRoundedRectangle();
    unint64_t v0 = type metadata accessor for _InsettableBackgroundShapeModifier();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _InsettableBackgroundShapeModifier<Color, UnevenRoundedRectangle>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type UnevenRoundedRectangle and conformance UnevenRoundedRectangle()
{
  unint64_t result = lazy protocol witness table cache variable for type UnevenRoundedRectangle and conformance UnevenRoundedRectangle;
  if (!lazy protocol witness table cache variable for type UnevenRoundedRectangle and conformance UnevenRoundedRectangle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UnevenRoundedRectangle and conformance UnevenRoundedRectangle);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type TupleView<(ModifiedContent<StrokeShapeView<RoundedRectangle, Color, _ShapeView<RoundedRectangle, Color>>, _FlexFrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<Int?>>, _EnvironmentKeyWritingModifier<Text.TruncationMode>>, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundStyleModifier<Color>>, _PaddingLayout>, _InsettableBackgroundShapeModifier<Color, UnevenRoundedRectangle>>)> and conformance TupleView<A>()
{
  return lazy protocol witness table accessor for type _ShapeView<RoundedRectangle, Color> and conformance _ShapeView<A, B>(&lazy protocol witness table cache variable for type TupleView<(ModifiedContent<StrokeShapeView<RoundedRectangle, Color, _ShapeView<RoundedRectangle, Color>>, _FlexFrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<Int?>>, _EnvironmentKeyWritingModifier<Text.TruncationMode>>, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundStyleModifier<Color>>, _PaddingLayout>, _InsettableBackgroundShapeModifier<Color, UnevenRoundedRectangle>>)> and conformance TupleView<A>, (void (*)(uint64_t))type metadata accessor for TupleView<(ModifiedContent<StrokeShapeView<RoundedRectangle, Color, _ShapeView<RoundedRectangle, Color>>, _FlexFrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<Int?>>, _EnvironmentKeyWritingModifier<Text.TruncationMode>>, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundStyleModifier<Color>>, _PaddingLayout>, _InsettableBackgroundShapeModifier<Color, UnevenRoundedRectangle>>)>);
}

uint64_t lazy protocol witness table accessor for type _ShapeView<RoundedRectangle, Color> and conformance _ShapeView<A, B>(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ZStack<TupleView<(ModifiedContent<StrokeShapeView<RoundedRectangle, Color, _ShapeView<RoundedRectangle, Color>>, _FlexFrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<Int?>>, _EnvironmentKeyWritingModifier<Text.TruncationMode>>, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundStyleModifier<Color>>, _PaddingLayout>, _InsettableBackgroundShapeModifier<Color, UnevenRoundedRectangle>>)>>, _AllowsHitTestingModifier> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ZStack<TupleView<(ModifiedContent<StrokeShapeView<RoundedRectangle, Color, _ShapeView<RoundedRectangle, Color>>, _FlexFrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<Int?>>, _EnvironmentKeyWritingModifier<Text.TruncationMode>>, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundStyleModifier<Color>>, _PaddingLayout>, _InsettableBackgroundShapeModifier<Color, UnevenRoundedRectangle>>)>>, _AllowsHitTestingModifier> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ZStack<TupleView<(ModifiedContent<StrokeShapeView<RoundedRectangle, Color, _ShapeView<RoundedRectangle, Color>>, _FlexFrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<Int?>>, _EnvironmentKeyWritingModifier<Text.TruncationMode>>, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundStyleModifier<Color>>, _PaddingLayout>, _InsettableBackgroundShapeModifier<Color, UnevenRoundedRectangle>>)>>, _AllowsHitTestingModifier> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ZStack<TupleView<(ModifiedContent<StrokeShapeView<RoundedRectangle, Color, _ShapeView<RoundedRectangle, Color>>, _FlexFrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<Int?>>, _EnvironmentKeyWritingModifier<Text.TruncationMode>>, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundStyleModifier<Color>>, _PaddingLayout>, _InsettableBackgroundShapeModifier<Color, UnevenRoundedRectangle>>)>>, _AllowsHitTestingModifier>();
    lazy protocol witness table accessor for type ZStack<TupleView<(ModifiedContent<StrokeShapeView<RoundedRectangle, Color, _ShapeView<RoundedRectangle, Color>>, _FlexFrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<Int?>>, _EnvironmentKeyWritingModifier<Text.TruncationMode>>, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundStyleModifier<Color>>, _PaddingLayout>, _InsettableBackgroundShapeModifier<Color, UnevenRoundedRectangle>>)>> and conformance ZStack<A>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ZStack<TupleView<(ModifiedContent<StrokeShapeView<RoundedRectangle, Color, _ShapeView<RoundedRectangle, Color>>, _FlexFrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<Int?>>, _EnvironmentKeyWritingModifier<Text.TruncationMode>>, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundStyleModifier<Color>>, _PaddingLayout>, _InsettableBackgroundShapeModifier<Color, UnevenRoundedRectangle>>)>>, _AllowsHitTestingModifier> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ZStack<TupleView<(ModifiedContent<StrokeShapeView<RoundedRectangle, Color, _ShapeView<RoundedRectangle, Color>>, _FlexFrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<Int?>>, _EnvironmentKeyWritingModifier<Text.TruncationMode>>, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundStyleModifier<Color>>, _PaddingLayout>, _InsettableBackgroundShapeModifier<Color, UnevenRoundedRectangle>>)>> and conformance ZStack<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type ZStack<TupleView<(ModifiedContent<StrokeShapeView<RoundedRectangle, Color, _ShapeView<RoundedRectangle, Color>>, _FlexFrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<Int?>>, _EnvironmentKeyWritingModifier<Text.TruncationMode>>, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundStyleModifier<Color>>, _PaddingLayout>, _InsettableBackgroundShapeModifier<Color, UnevenRoundedRectangle>>)>> and conformance ZStack<A>;
  if (!lazy protocol witness table cache variable for type ZStack<TupleView<(ModifiedContent<StrokeShapeView<RoundedRectangle, Color, _ShapeView<RoundedRectangle, Color>>, _FlexFrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<Int?>>, _EnvironmentKeyWritingModifier<Text.TruncationMode>>, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundStyleModifier<Color>>, _PaddingLayout>, _InsettableBackgroundShapeModifier<Color, UnevenRoundedRectangle>>)>> and conformance ZStack<A>)
  {
    type metadata accessor for _OverlayModifier<ModifiedContent<ZStack<TupleView<(ModifiedContent<StrokeShapeView<RoundedRectangle, Color, _ShapeView<RoundedRectangle, Color>>, _FlexFrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<Int?>>, _EnvironmentKeyWritingModifier<Text.TruncationMode>>, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundStyleModifier<Color>>, _PaddingLayout>, _InsettableBackgroundShapeModifier<Color, UnevenRoundedRectangle>>)>>, _AllowsHitTestingModifier>>(255, &lazy cache variable for type metadata for ZStack<TupleView<(ModifiedContent<StrokeShapeView<RoundedRectangle, Color, _ShapeView<RoundedRectangle, Color>>, _FlexFrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<Int?>>, _EnvironmentKeyWritingModifier<Text.TruncationMode>>, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundStyleModifier<Color>>, _PaddingLayout>, _InsettableBackgroundShapeModifier<Color, UnevenRoundedRectangle>>)>>, (uint64_t (*)(uint64_t))type metadata accessor for TupleView<(ModifiedContent<StrokeShapeView<RoundedRectangle, Color, _ShapeView<RoundedRectangle, Color>>, _FlexFrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<Int?>>, _EnvironmentKeyWritingModifier<Text.TruncationMode>>, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundStyleModifier<Color>>, _PaddingLayout>, _InsettableBackgroundShapeModifier<Color, UnevenRoundedRectangle>>)>, lazy protocol witness table accessor for type TupleView<(ModifiedContent<StrokeShapeView<RoundedRectangle, Color, _ShapeView<RoundedRectangle, Color>>, _FlexFrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<Int?>>, _EnvironmentKeyWritingModifier<Text.TruncationMode>>, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundStyleModifier<Color>>, _PaddingLayout>, _InsettableBackgroundShapeModifier<Color, UnevenRoundedRectangle>>)> and conformance TupleView<A>, MEMORY[0x1E4F415F8]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ZStack<TupleView<(ModifiedContent<StrokeShapeView<RoundedRectangle, Color, _ShapeView<RoundedRectangle, Color>>, _FlexFrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<Int?>>, _EnvironmentKeyWritingModifier<Text.TruncationMode>>, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundStyleModifier<Color>>, _PaddingLayout>, _InsettableBackgroundShapeModifier<Color, UnevenRoundedRectangle>>)>> and conformance ZStack<A>);
  }
  return result;
}

_UNKNOWN **base witness table accessor for _GraphInputsModifier in VisualizeViews()
{
  return &protocol witness table for VisualizeViews;
}

void static ToolbarRole.navigationStack.getter(unsigned char *a1@<X8>)
{
  *a1 = 0;
}

void static ToolbarRole.browser.getter(unsigned char *a1@<X8>)
{
  *a1 = 1;
}

void static ToolbarRole.editor.getter(unsigned char *a1@<X8>)
{
  *a1 = 2;
}

uint64_t View.toolbarRole(_:)()
{
  return View.preference<A>(key:value:)();
}

ValueMetadata *type metadata accessor for ToolbarRole()
{
  return &type metadata for ToolbarRole;
}

uint64_t sub_188251B4C()
{
  return swift_getWitnessTable();
}

void type metadata accessor for _PreferenceWritingModifier<ToolbarRoleKey>()
{
  if (!lazy cache variable for type metadata for _PreferenceWritingModifier<ToolbarRoleKey>)
  {
    unint64_t v0 = type metadata accessor for _PreferenceWritingModifier();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _PreferenceWritingModifier<ToolbarRoleKey>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type _PreferenceWritingModifier<ToolbarRoleKey> and conformance _PreferenceWritingModifier<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type _PreferenceWritingModifier<ToolbarRoleKey> and conformance _PreferenceWritingModifier<A>;
  if (!lazy protocol witness table cache variable for type _PreferenceWritingModifier<ToolbarRoleKey> and conformance _PreferenceWritingModifier<A>)
  {
    type metadata accessor for _PreferenceWritingModifier<ToolbarRoleKey>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _PreferenceWritingModifier<ToolbarRoleKey> and conformance _PreferenceWritingModifier<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ToolbarRole.Role and conformance ToolbarRole.Role()
{
  unint64_t result = lazy protocol witness table cache variable for type ToolbarRole.Role and conformance ToolbarRole.Role;
  if (!lazy protocol witness table cache variable for type ToolbarRole.Role and conformance ToolbarRole.Role)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ToolbarRole.Role and conformance ToolbarRole.Role);
  }
  return result;
}

unsigned __int8 *protocol witness for static PreferenceKey.reduce(value:nextValue:) in conformance ToolbarRoleKey(unsigned __int8 *result, void *(*a2)(uint64_t *__return_ptr))
{
  unint64_t v2 = result;
  int v3 = *result;
  if (v3 == 3)
  {
    unint64_t result = (unsigned __int8 *)a2(&v4);
    LOBYTE(v3) = v4;
  }
  *unint64_t v2 = v3;
  return result;
}

ValueMetadata *type metadata accessor for EnvironmentValues.DefaultToolbarRoleKey()
{
  return &type metadata for EnvironmentValues.DefaultToolbarRoleKey;
}

BOOL protocol witness for static EnvironmentKey._valuesEqual(_:_:) in conformance EnvironmentValues.DefaultToolbarRoleKey(unsigned __int8 *a1, unsigned __int8 *a2)
{
  int v2 = *a1;
  int v3 = *a2;
  BOOL v4 = v3 == 3;
  BOOL v6 = v3 != 3 && v2 == v3;
  if (v2 == 3) {
    return v4;
  }
  else {
    return v6;
  }
}

ValueMetadata *type metadata accessor for InspectorColumnSeparator()
{
  return &type metadata for InspectorColumnSeparator;
}

ValueMetadata *type metadata accessor for InspectorDimmingView()
{
  return &type metadata for InspectorDimmingView;
}

uint64_t associated type witness table accessor for View.Body : View in InspectorColumnSeparator()
{
  return swift_getOpaqueTypeConformance2();
}

id InspectorDimmingView.body.getter@<X0>(char a1@<W0>, void *a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X8>)
{
  id result = objc_msgSend(self, sel__dimmingViewColor);
  if (result)
  {
    id v35 = result;
    type metadata accessor for UIColor();
    _sSo7UIColorCAB7SwiftUI13ColorProviderACWlTm_3((unint64_t *)&lazy protocol witness table cache variable for type UIColor and conformance UIColor, (void (*)(uint64_t))type metadata accessor for UIColor);
    uint64_t v11 = Color.init<A>(provider:)();
    char v12 = static Edge.Set.all.getter();
    if (a1)
    {
      char v13 = a4 & 1;
    }
    else
    {
      id v35 = a2;
      uint64_t v36 = a3;
      char v13 = a4 & 1;
      char v37 = a4 & 1;
      type metadata accessor for Binding<Bool>();
      MEMORY[0x18C113DA0](v29);
      double v14 = 1.0;
      if (v29[0])
      {
LABEL_6:
        lazy protocol witness table accessor for type OpacityTransition and conformance OpacityTransition();
        uint64_t v15 = AnyTransition.init<A>(_:)();
        uint64_t v16 = static Animation.easeInOut(duration:)();
        id v35 = a2;
        uint64_t v36 = a3;
        char v37 = v13;
        type metadata accessor for Binding<Bool>();
        MEMORY[0x18C113DA0](v29);
        char v17 = v29[0];
        v29[0] = v11;
        v29[1] = -1;
        char v30 = v12;
        double v31 = v14;
        uint64_t v32 = v15;
        uint64_t v33 = v16;
        char v34 = v17;
        uint64_t v18 = swift_allocObject();
        *(unsigned char *)(v18 + 16) = a1;
        *(void *)(v18 + 24) = a2;
        *(void *)(v18 + 32) = a3;
        *(unsigned char *)(v18 + 40) = v13;
        type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Color, _SafeAreaRegionsIgnoringLayout>, _OpacityEffect>, _TraitWritingModifier<TransitionTraitKey>>, _AnimationModifier<Bool>>();
        lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Color, _SafeAreaRegionsIgnoringLayout>, _OpacityEffect>, _TraitWritingModifier<TransitionTraitKey>>, _AnimationModifier<Bool>> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Color, _SafeAreaRegionsIgnoringLayout>, _OpacityEffect>, _TraitWritingModifier<TransitionTraitKey>>, _AnimationModifier<Bool>> and conformance <> ModifiedContent<A, B>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Color, _SafeAreaRegionsIgnoringLayout>, _OpacityEffect>, _TraitWritingModifier<TransitionTraitKey>>, _AnimationModifier<Bool>>, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<Color, _SafeAreaRegionsIgnoringLayout>, _OpacityEffect>, _TraitWritingModifier<TransitionTraitKey>> and conformance <> ModifiedContent<A, B>, (void (*)(void))lazy protocol witness table accessor for type _AnimationModifier<Bool> and conformance _AnimationModifier<A>);
        swift_retain();
        swift_retain();
        View.onTapGesture(count:perform:)();
        swift_release();
        swift_release();
        swift_release();
        id result = (id)swift_release();
        uint64_t v19 = v36;
        char v20 = v37;
        uint64_t v21 = v38;
        uint64_t v22 = v39;
        uint64_t v23 = v40;
        char v24 = v41;
        uint64_t v25 = v42;
        int v26 = v45;
        long long v28 = v43;
        long long v27 = v44;
        *(void *)a5 = v35;
        *(void *)(a5 + 8) = v19;
        *(unsigned char *)(a5 + 16) = v20;
        *(void *)(a5 + 24) = v21;
        *(void *)(a5 + 32) = v22;
        *(void *)(a5 + 40) = v23;
        *(unsigned char *)(a5 + 48) = v24;
        *(void *)(a5 + 56) = v25;
        *(_OWORD *)(a5 + 64) = v28;
        *(_OWORD *)(a5 + 80) = v27;
        *(_DWORD *)(a5 + 96) = v26;
        return result;
      }
    }
    double v14 = 0.0;
    goto LABEL_6;
  }
  __break(1u);
  return result;
}

uint64_t closure #1 in InspectorDimmingView.body.getter()
{
  return swift_release();
}

uint64_t closure #1 in closure #1 in InspectorDimmingView.body.getter()
{
  return swift_release();
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance InspectorDimmingView()
{
  return static ModifiedContent<>._viewListCount(inputs:)();
}

id protocol witness for View.body.getter in conformance InspectorDimmingView@<X0>(uint64_t a1@<X8>)
{
  return InspectorDimmingView.body.getter(*(unsigned char *)v1, *(void **)(v1 + 8), *(void *)(v1 + 16), *(unsigned char *)(v1 + 24), a1);
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance InspectorColumnSeparator()
{
  return static ModifiedContent<>._viewListCount(inputs:)();
}

uint64_t protocol witness for View.body.getter in conformance InspectorColumnSeparator@<X0>(uint64_t a1@<X8>)
{
  id v4 = objc_msgSend(self, sel_opaqueSeparatorColor);
  type metadata accessor for UIColor();
  _sSo7UIColorCAB7SwiftUI13ColorProviderACWlTm_3((unint64_t *)&lazy protocol witness table cache variable for type UIColor and conformance UIColor, (void (*)(uint64_t))type metadata accessor for UIColor);
  uint64_t v2 = Color.init<A>(provider:)();
  static Alignment.center.getter();
  _FrameLayout.init(width:height:alignment:)();
  uint64_t result = static Edge.Set.vertical.getter();
  *(void *)a1 = v2;
  *(_WORD *)(a1 + 8) = 256;
  *(void *)(a1 + 16) = v4;
  *(unsigned char *)(a1 + 24) = v5;
  *(void *)(a1 + 32) = v6;
  *(unsigned char *)(a1 + 40) = v7;
  *(void *)(a1 + 48) = v8;
  *(void *)(a1 + 56) = v9;
  *(void *)(a1 + 64) = 1;
  *(unsigned char *)(a1 + 72) = result;
  return result;
}

uint64_t associated type witness table accessor for View.Body : View in InspectorSeparatorShadow()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance InspectorSeparatorShadow()
{
  return static ModifiedContent<>._viewListCount(inputs:)();
}

double protocol witness for View.body.getter in conformance InspectorSeparatorShadow@<D0>(uint64_t a1@<X8>)
{
  static Color.black.getter();
  uint64_t v2 = Color.opacity(_:)();
  swift_release();
  static Alignment.center.getter();
  _FrameLayout.init(width:height:alignment:)();
  *(void *)a1 = v2;
  *(void *)(a1 + 8) = 0x4012000000000000;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = v4;
  *(unsigned char *)(a1 + 40) = v5;
  *(void *)(a1 + 48) = v6;
  *(unsigned char *)(a1 + 56) = v7;
  double result = *(double *)&v8;
  *(_OWORD *)(a1 + 64) = v8;
  return result;
}

uint64_t associated type witness table accessor for View.Body : View in InspectorDimmingView()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_188252584()
{
  swift_release();
  swift_release();

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in InspectorDimmingView.body.getter()
{
  return closure #1 in InspectorDimmingView.body.getter();
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Color, _SafeAreaRegionsIgnoringLayout>, _OpacityEffect>, _TraitWritingModifier<TransitionTraitKey>>, _AnimationModifier<Bool>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Color, _SafeAreaRegionsIgnoringLayout>, _OpacityEffect>, _TraitWritingModifier<TransitionTraitKey>>, _AnimationModifier<Bool>>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<Color, _SafeAreaRegionsIgnoringLayout>, _OpacityEffect>, _TraitWritingModifier<TransitionTraitKey>>();
    type metadata accessor for ModifiedContent<Color, _SafeAreaRegionsIgnoringLayout>(255, &lazy cache variable for type metadata for _AnimationModifier<Bool>, MEMORY[0x1E4FBB390], MEMORY[0x1E4FBB3A8], MEMORY[0x1E4F40370]);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Color, _SafeAreaRegionsIgnoringLayout>, _OpacityEffect>, _TraitWritingModifier<TransitionTraitKey>>, _AnimationModifier<Bool>>);
    }
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<Color, _SafeAreaRegionsIgnoringLayout>, _OpacityEffect>, _TraitWritingModifier<TransitionTraitKey>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<Color, _SafeAreaRegionsIgnoringLayout>, _OpacityEffect>, _TraitWritingModifier<TransitionTraitKey>>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<Color, _SafeAreaRegionsIgnoringLayout>, _OpacityEffect>();
    type metadata accessor for ModifiedContent<Color, _SafeAreaRegionsIgnoringLayout>(255, (unint64_t *)&lazy cache variable for type metadata for _TraitWritingModifier<TransitionTraitKey>, MEMORY[0x1E4F40358], MEMORY[0x1E4F40350], MEMORY[0x1E4F408B8]);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<Color, _SafeAreaRegionsIgnoringLayout>, _OpacityEffect>, _TraitWritingModifier<TransitionTraitKey>>);
    }
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<Color, _SafeAreaRegionsIgnoringLayout>, _OpacityEffect>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<Color, _SafeAreaRegionsIgnoringLayout>, _OpacityEffect>)
  {
    type metadata accessor for ModifiedContent<Color, _SafeAreaRegionsIgnoringLayout>(255, &lazy cache variable for type metadata for ModifiedContent<Color, _SafeAreaRegionsIgnoringLayout>, MEMORY[0x1E4F414E0], MEMORY[0x1E4F41208], MEMORY[0x1E4F3FBA0]);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<Color, _SafeAreaRegionsIgnoringLayout>, _OpacityEffect>);
    }
  }
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<Color, _SafeAreaRegionsIgnoringLayout>, _OpacityEffect>, _TraitWritingModifier<TransitionTraitKey>> and conformance <> ModifiedContent<A, B>()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Color, _SafeAreaRegionsIgnoringLayout>, _OpacityEffect>, _TraitWritingModifier<TransitionTraitKey>>, _AnimationModifier<Bool>> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<Color, _SafeAreaRegionsIgnoringLayout>, _OpacityEffect>, _TraitWritingModifier<TransitionTraitKey>> and conformance <> ModifiedContent<A, B>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<Color, _SafeAreaRegionsIgnoringLayout>, _OpacityEffect>, _TraitWritingModifier<TransitionTraitKey>>, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Color, _SafeAreaRegionsIgnoringLayout>, _OpacityEffect> and conformance <> ModifiedContent<A, B>, (void (*)(void))lazy protocol witness table accessor for type _TraitWritingModifier<TransitionTraitKey> and conformance _TraitWritingModifier<A>);
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Color, _SafeAreaRegionsIgnoringLayout>, _OpacityEffect>, _TraitWritingModifier<TransitionTraitKey>>, _AnimationModifier<Bool>> and conformance <> ModifiedContent<A, B>(unint64_t *a1, void (*a2)(uint64_t), void (*a3)(void), void (*a4)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    a3();
    a4();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Color, _SafeAreaRegionsIgnoringLayout>, _OpacityEffect> and conformance <> ModifiedContent<A, B>()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Color, _SafeAreaRegionsIgnoringLayout>, _OpacityEffect> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<Color, _SafeAreaRegionsIgnoringLayout>, _OpacityEffect> and conformance <> ModifiedContent<A, B>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<Color, _SafeAreaRegionsIgnoringLayout>, _OpacityEffect>, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<Color, _SafeAreaRegionsIgnoringLayout> and conformance <> ModifiedContent<A, B>);
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<Color, _SafeAreaRegionsIgnoringLayout> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<Color, _SafeAreaRegionsIgnoringLayout> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<Color, _SafeAreaRegionsIgnoringLayout> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<Color, _SafeAreaRegionsIgnoringLayout>(255, &lazy cache variable for type metadata for ModifiedContent<Color, _SafeAreaRegionsIgnoringLayout>, MEMORY[0x1E4F414E0], MEMORY[0x1E4F41208], MEMORY[0x1E4F3FBA0]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<Color, _SafeAreaRegionsIgnoringLayout> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t partial apply for closure #1 in closure #1 in InspectorDimmingView.body.getter()
{
  return closure #1 in closure #1 in InspectorDimmingView.body.getter();
}

void type metadata accessor for _ShadowView<Rectangle>()
{
  if (!lazy cache variable for type metadata for _ShadowView<Rectangle>)
  {
    lazy protocol witness table accessor for type Rectangle and conformance Rectangle();
    unint64_t v0 = type metadata accessor for _ShadowView();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ShadowView<Rectangle>);
    }
  }
}

void type metadata accessor for ModifiedContent<_ShapeView<Rectangle, Color>, _FrameLayout>(uint64_t a1)
{
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Color, _SafeAreaRegionsIgnoringLayout>, _OpacityEffect>, _TraitWritingModifier<TransitionTraitKey>>, _AnimationModifier<Bool>>, AddGestureModifier<_EndedGesture<TapGesture>>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Color, _SafeAreaRegionsIgnoringLayout>, _OpacityEffect>, _TraitWritingModifier<TransitionTraitKey>>, _AnimationModifier<Bool>>, AddGestureModifier<_EndedGesture<TapGesture>>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Color, _SafeAreaRegionsIgnoringLayout>, _OpacityEffect>, _TraitWritingModifier<TransitionTraitKey>>, _AnimationModifier<Bool>>, AddGestureModifier<_EndedGesture<TapGesture>>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Color, _SafeAreaRegionsIgnoringLayout>, _OpacityEffect>, _TraitWritingModifier<TransitionTraitKey>>, _AnimationModifier<Bool>>, AddGestureModifier<_EndedGesture<TapGesture>>>();
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Color, _SafeAreaRegionsIgnoringLayout>, _OpacityEffect>, _TraitWritingModifier<TransitionTraitKey>>, _AnimationModifier<Bool>> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Color, _SafeAreaRegionsIgnoringLayout>, _OpacityEffect>, _TraitWritingModifier<TransitionTraitKey>>, _AnimationModifier<Bool>> and conformance <> ModifiedContent<A, B>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Color, _SafeAreaRegionsIgnoringLayout>, _OpacityEffect>, _TraitWritingModifier<TransitionTraitKey>>, _AnimationModifier<Bool>>, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<Color, _SafeAreaRegionsIgnoringLayout>, _OpacityEffect>, _TraitWritingModifier<TransitionTraitKey>> and conformance <> ModifiedContent<A, B>, (void (*)(void))lazy protocol witness table accessor for type _AnimationModifier<Bool> and conformance _AnimationModifier<A>);
    _sSo7UIColorCAB7SwiftUI13ColorProviderACWlTm_3(&lazy protocol witness table cache variable for type AddGestureModifier<_EndedGesture<TapGesture>> and conformance AddGestureModifier<A>, (void (*)(uint64_t))type metadata accessor for AddGestureModifier<_EndedGesture<TapGesture>>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Color, _SafeAreaRegionsIgnoringLayout>, _OpacityEffect>, _TraitWritingModifier<TransitionTraitKey>>, _AnimationModifier<Bool>>, AddGestureModifier<_EndedGesture<TapGesture>>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Color, _SafeAreaRegionsIgnoringLayout>, _OpacityEffect>, _TraitWritingModifier<TransitionTraitKey>>, _AnimationModifier<Bool>>, AddGestureModifier<_EndedGesture<TapGesture>>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Color, _SafeAreaRegionsIgnoringLayout>, _OpacityEffect>, _TraitWritingModifier<TransitionTraitKey>>, _AnimationModifier<Bool>>, AddGestureModifier<_EndedGesture<TapGesture>>>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Color, _SafeAreaRegionsIgnoringLayout>, _OpacityEffect>, _TraitWritingModifier<TransitionTraitKey>>, _AnimationModifier<Bool>>();
    type metadata accessor for AddGestureModifier<_EndedGesture<TapGesture>>();
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Color, _SafeAreaRegionsIgnoringLayout>, _OpacityEffect>, _TraitWritingModifier<TransitionTraitKey>>, _AnimationModifier<Bool>>, AddGestureModifier<_EndedGesture<TapGesture>>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<_ShadowView<Rectangle>, _FrameLayout> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<_ShadowView<Rectangle>, _FrameLayout> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<_ShadowView<Rectangle>, _FrameLayout> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<_ShapeView<Rectangle, Color>, _FrameLayout>, _SafeAreaRegionsIgnoringLayout>(255, &lazy cache variable for type metadata for ModifiedContent<_ShadowView<Rectangle>, _FrameLayout>, (void (*)(uint64_t))type metadata accessor for _ShadowView<Rectangle>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<_ShadowView<Rectangle>, _FrameLayout> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<ModifiedContent<_ShapeView<Rectangle, Color>, _FrameLayout>, _SafeAreaRegionsIgnoringLayout>(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = type metadata accessor for ModifiedContent();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t sub_188252C30()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Color, _SafeAreaRegionsIgnoringLayout>, _OpacityEffect> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<_ShapeView<Rectangle, Color>, _FrameLayout>, _SafeAreaRegionsIgnoringLayout> and conformance <> ModifiedContent<A, B>, type metadata accessor for ModifiedContent<ModifiedContent<_ShapeView<Rectangle, Color>, _FrameLayout>, _SafeAreaRegionsIgnoringLayout>, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<_ShapeView<Rectangle, Color>, _FrameLayout> and conformance <> ModifiedContent<A, B>);
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Color, _SafeAreaRegionsIgnoringLayout>, _OpacityEffect> and conformance <> ModifiedContent<A, B>(unint64_t *a1, void (*a2)(uint64_t), void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    a3();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void type metadata accessor for ModifiedContent<ModifiedContent<_ShapeView<Rectangle, Color>, _FrameLayout>, _SafeAreaRegionsIgnoringLayout>(uint64_t a1)
{
}

void _sSNy10Foundation4DateVGSgMaTm_1(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = type metadata accessor for Optional();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t outlined init with copy of PlaybackButton.State(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for PlaybackButton.State(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t _sSNy10Foundation4DateVGSgWOhTm_1(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  _sSNy10Foundation4DateVGSgMaTm_1(0, a2, a3);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  return a1;
}

uint64_t outlined destroy of ClosedRange<Date>(uint64_t a1)
{
  type metadata accessor for ClosedRange<Date>();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

char *initializeBufferWithCopyOfBuffer for PlaybackButton.Specs(char *a1, uint64_t *a2, int *a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v11 = *a2;
    *(void *)a1 = *a2;
    uint64_t v4 = (char *)(v11 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    type metadata accessor for ClosedRange<Date>();
    uint64_t v8 = v7;
    uint64_t v9 = *(void *)(v7 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v9 + 48))(a2, 1, v7))
    {
      _sSNy10Foundation4DateVGSgMaTm_1(0, &lazy cache variable for type metadata for ClosedRange<Date>?, (void (*)(uint64_t))type metadata accessor for ClosedRange<Date>);
      memcpy(v4, a2, *(void *)(*(void *)(v10 - 8) + 64));
    }
    else
    {
      uint64_t v12 = type metadata accessor for Date();
      char v13 = *(void (**)(char *, uint64_t *, uint64_t))(*(void *)(v12 - 8) + 16);
      v13(v4, a2, v12);
      v13(&v4[*(int *)(v8 + 36)], (uint64_t *)((char *)a2 + *(int *)(v8 + 36)), v12);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v9 + 56))(v4, 0, 1, v8);
    }
    double v14 = (int *)type metadata accessor for PlaybackButton.Configuration(0);
    uint64_t v15 = v14[5];
    uint64_t v16 = &v4[v15];
    char v17 = (char *)a2 + v15;
    uint64_t v18 = type metadata accessor for Date();
    uint64_t v19 = *(void *)(v18 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v17, 2, v18))
    {
      uint64_t v20 = type metadata accessor for PlaybackButton.State(0);
      memcpy(v16, v17, *(void *)(*(void *)(v20 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v19 + 16))(v16, v17, v18);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v19 + 56))(v16, 0, 2, v18);
    }
    uint64_t v21 = v14[6];
    uint64_t v22 = &v4[v21];
    uint64_t v23 = (uint64_t *)((char *)a2 + v21);
    uint64_t v24 = v23[1];
    *(void *)uint64_t v22 = *v23;
    *((void *)v22 + 1) = v24;
    v4[v14[7]] = *((unsigned char *)a2 + v14[7]);
    v4[v14[8]] = *((unsigned char *)a2 + v14[8]);
    *(_OWORD *)&v4[v14[9]] = *(_OWORD *)((char *)a2 + v14[9]);
    uint64_t v25 = v14[10];
    int v26 = &v4[v25];
    long long v27 = (char *)a2 + v25;
    uint64_t v28 = *(uint64_t *)((char *)a2 + v25);
    uint64_t v29 = *(uint64_t *)((char *)a2 + v25 + 8);
    char v30 = *((unsigned char *)a2 + v25 + 16);
    swift_bridgeObjectRetain();
    outlined copy of Environment<AppIntentExecutor?>.Content(v28, v29, v30);
    *(void *)int v26 = v28;
    *((void *)v26 + 1) = v29;
    v26[16] = v30;
    uint64_t v31 = *((void *)v27 + 5);
    long long v32 = *(_OWORD *)(v27 + 24);
    *(_OWORD *)(v26 + 24) = v32;
    *((void *)v26 + 5) = v31;
    uint64_t v33 = a3[6];
    *(void *)&v4[a3[5]] = *(uint64_t *)((char *)a2 + a3[5]);
    *(void *)&v4[v33] = *(uint64_t *)((char *)a2 + v33);
    *(void *)&v4[a3[7]] = *(uint64_t *)((char *)a2 + a3[7]);
    id v34 = (id)v32;
  }
  swift_retain();
  return v4;
}

char *initializeWithCopy for PlaybackButton.Specs(char *a1, char *a2, int *a3)
{
  type metadata accessor for ClosedRange<Date>();
  uint64_t v7 = v6;
  uint64_t v8 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v6))
  {
    _sSNy10Foundation4DateVGSgMaTm_1(0, &lazy cache variable for type metadata for ClosedRange<Date>?, (void (*)(uint64_t))type metadata accessor for ClosedRange<Date>);
    memcpy(a1, a2, *(void *)(*(void *)(v9 - 8) + 64));
  }
  else
  {
    uint64_t v10 = type metadata accessor for Date();
    uint64_t v11 = *(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16);
    v11(a1, a2, v10);
    v11(&a1[*(int *)(v7 + 36)], &a2[*(int *)(v7 + 36)], v10);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
  }
  uint64_t v12 = (int *)type metadata accessor for PlaybackButton.Configuration(0);
  uint64_t v13 = v12[5];
  double v14 = &a1[v13];
  uint64_t v15 = &a2[v13];
  uint64_t v16 = type metadata accessor for Date();
  uint64_t v17 = *(void *)(v16 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v15, 2, v16))
  {
    uint64_t v18 = type metadata accessor for PlaybackButton.State(0);
    memcpy(v14, v15, *(void *)(*(void *)(v18 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v17 + 16))(v14, v15, v16);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v17 + 56))(v14, 0, 2, v16);
  }
  uint64_t v19 = v12[6];
  uint64_t v20 = &a1[v19];
  uint64_t v21 = &a2[v19];
  uint64_t v22 = *((void *)v21 + 1);
  *(void *)uint64_t v20 = *(void *)v21;
  *((void *)v20 + 1) = v22;
  a1[v12[7]] = a2[v12[7]];
  a1[v12[8]] = a2[v12[8]];
  *(_OWORD *)&a1[v12[9]] = *(_OWORD *)&a2[v12[9]];
  uint64_t v23 = v12[10];
  uint64_t v24 = &a1[v23];
  uint64_t v25 = &a2[v23];
  uint64_t v26 = *(void *)&a2[v23];
  uint64_t v27 = *(void *)&a2[v23 + 8];
  char v28 = a2[v23 + 16];
  swift_bridgeObjectRetain();
  outlined copy of Environment<AppIntentExecutor?>.Content(v26, v27, v28);
  *(void *)uint64_t v24 = v26;
  *((void *)v24 + 1) = v27;
  v24[16] = v28;
  uint64_t v29 = *((void *)v25 + 5);
  long long v30 = *(_OWORD *)(v25 + 24);
  *(_OWORD *)(v24 + 24) = v30;
  *((void *)v24 + 5) = v29;
  uint64_t v31 = a3[6];
  *(void *)&a1[a3[5]] = *(void *)&a2[a3[5]];
  *(void *)&a1[v31] = *(void *)&a2[v31];
  *(void *)&a1[a3[7]] = *(void *)&a2[a3[7]];
  id v32 = (id)v30;
  swift_retain();
  return a1;
}

char *assignWithCopy for PlaybackButton.Specs(char *a1, char *a2, int *a3)
{
  type metadata accessor for ClosedRange<Date>();
  uint64_t v6 = v5;
  uint64_t v7 = *(void *)(v5 - 8);
  uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  int v9 = v8(a1, 1, v5);
  int v10 = v8(a2, 1, v6);
  if (v9)
  {
    if (!v10)
    {
      uint64_t v11 = type metadata accessor for Date();
      uint64_t v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16);
      v12(a1, a2, v11);
      v12(&a1[*(int *)(v6 + 36)], &a2[*(int *)(v6 + 36)], v11);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v10)
  {
    outlined destroy of ClosedRange<Date>((uint64_t)a1);
LABEL_6:
    _sSNy10Foundation4DateVGSgMaTm_1(0, &lazy cache variable for type metadata for ClosedRange<Date>?, (void (*)(uint64_t))type metadata accessor for ClosedRange<Date>);
    memcpy(a1, a2, *(void *)(*(void *)(v13 - 8) + 64));
    goto LABEL_7;
  }
  uint64_t v44 = type metadata accessor for Date();
  int v45 = *(void (**)(char *, char *, uint64_t))(*(void *)(v44 - 8) + 24);
  v45(a1, a2, v44);
  v45(&a1[*(int *)(v6 + 36)], &a2[*(int *)(v6 + 36)], v44);
LABEL_7:
  double v14 = (int *)type metadata accessor for PlaybackButton.Configuration(0);
  uint64_t v15 = v14[5];
  uint64_t v16 = &a1[v15];
  uint64_t v17 = &a2[v15];
  uint64_t v18 = type metadata accessor for Date();
  uint64_t v19 = *(void *)(v18 - 8);
  uint64_t v20 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v19 + 48);
  int v21 = v20(v16, 2, v18);
  int v22 = v20(v17, 2, v18);
  if (!v21)
  {
    if (!v22)
    {
      (*(void (**)(char *, char *, uint64_t))(v19 + 24))(v16, v17, v18);
      goto LABEL_13;
    }
    (*(void (**)(char *, uint64_t))(v19 + 8))(v16, v18);
    goto LABEL_12;
  }
  if (v22)
  {
LABEL_12:
    uint64_t v23 = type metadata accessor for PlaybackButton.State(0);
    memcpy(v16, v17, *(void *)(*(void *)(v23 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v19 + 16))(v16, v17, v18);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v19 + 56))(v16, 0, 2, v18);
LABEL_13:
  uint64_t v24 = v14[6];
  uint64_t v25 = &a1[v24];
  uint64_t v26 = &a2[v24];
  *(void *)uint64_t v25 = *(void *)v26;
  *((void *)v25 + 1) = *((void *)v26 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[v14[7]] = a2[v14[7]];
  a1[v14[8]] = a2[v14[8]];
  uint64_t v27 = v14[9];
  char v28 = &a1[v27];
  uint64_t v29 = &a2[v27];
  *(void *)char v28 = *(void *)v29;
  *((void *)v28 + 1) = *((void *)v29 + 1);
  uint64_t v30 = v14[10];
  uint64_t v31 = &a1[v30];
  id v32 = &a2[v30];
  uint64_t v33 = *(void *)&a2[v30];
  uint64_t v34 = *(void *)&a2[v30 + 8];
  char v35 = a2[v30 + 16];
  outlined copy of Environment<AppIntentExecutor?>.Content(v33, v34, v35);
  uint64_t v36 = *(void *)v31;
  uint64_t v37 = *((void *)v31 + 1);
  char v38 = v31[16];
  *(void *)uint64_t v31 = v33;
  *((void *)v31 + 1) = v34;
  v31[16] = v35;
  outlined consume of Environment<AppIntentExecutor?>.Content(v36, v37, v38);
  uint64_t v39 = (void *)*((void *)v32 + 3);
  uint64_t v40 = (void *)*((void *)v31 + 3);
  *((void *)v31 + 3) = v39;
  id v41 = v39;

  uint64_t v42 = *((void *)v32 + 5);
  *((void *)v31 + 4) = *((void *)v32 + 4);
  *((void *)v31 + 5) = v42;
  swift_retain();
  swift_release();
  *(void *)&a1[a3[5]] = *(void *)&a2[a3[5]];
  *(void *)&a1[a3[6]] = *(void *)&a2[a3[6]];
  *(void *)&a1[a3[7]] = *(void *)&a2[a3[7]];
  return a1;
}

char *initializeWithTake for PlaybackButton.Specs(char *a1, char *a2, int *a3)
{
  type metadata accessor for ClosedRange<Date>();
  uint64_t v7 = v6;
  uint64_t v8 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v6))
  {
    _sSNy10Foundation4DateVGSgMaTm_1(0, &lazy cache variable for type metadata for ClosedRange<Date>?, (void (*)(uint64_t))type metadata accessor for ClosedRange<Date>);
    memcpy(a1, a2, *(void *)(*(void *)(v9 - 8) + 64));
  }
  else
  {
    uint64_t v10 = type metadata accessor for Date();
    uint64_t v11 = *(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 32);
    v11(a1, a2, v10);
    v11(&a1[*(int *)(v7 + 36)], &a2[*(int *)(v7 + 36)], v10);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
  }
  uint64_t v12 = (int *)type metadata accessor for PlaybackButton.Configuration(0);
  uint64_t v13 = v12[5];
  double v14 = &a1[v13];
  uint64_t v15 = &a2[v13];
  uint64_t v16 = type metadata accessor for Date();
  uint64_t v17 = *(void *)(v16 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v15, 2, v16))
  {
    uint64_t v18 = type metadata accessor for PlaybackButton.State(0);
    memcpy(v14, v15, *(void *)(*(void *)(v18 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v17 + 32))(v14, v15, v16);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v17 + 56))(v14, 0, 2, v16);
  }
  *(_OWORD *)&a1[v12[6]] = *(_OWORD *)&a2[v12[6]];
  a1[v12[7]] = a2[v12[7]];
  a1[v12[8]] = a2[v12[8]];
  *(_OWORD *)&a1[v12[9]] = *(_OWORD *)&a2[v12[9]];
  uint64_t v19 = v12[10];
  uint64_t v20 = &a1[v19];
  int v21 = &a2[v19];
  long long v22 = *((_OWORD *)v21 + 1);
  *(_OWORD *)uint64_t v20 = *(_OWORD *)v21;
  *((_OWORD *)v20 + 1) = v22;
  *((_OWORD *)v20 + 2) = *((_OWORD *)v21 + 2);
  uint64_t v23 = a3[6];
  *(void *)&a1[a3[5]] = *(void *)&a2[a3[5]];
  *(void *)&a1[v23] = *(void *)&a2[v23];
  *(void *)&a1[a3[7]] = *(void *)&a2[a3[7]];
  return a1;
}

uint64_t getEnumTagSinglePayload for PlaybackButton.Specs(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_188253BF8);
}

uint64_t sub_188253BF8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for PlaybackButton.Configuration(0);
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48);

  return v5(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for PlaybackButton.Specs(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_188253C78);
}

uint64_t sub_188253C78(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for PlaybackButton.Configuration(0);
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);

  return v5(a1, a2, a2, v4);
}

uint64_t _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF7SwiftUI15AnyFileDocumentV_s5NeverOAD0F15ExportOperationVTg503_s7c167UI4ViewPAAE12fileExporter33_0D2FEC310BB860AE9CC7C05B8D27ECEFLL11isPresented8document12contentTypes15defaultFilename12onCompletion0V12CancellationQrAA7BindingVySbG_AA15efg76VSgyXKSay22UniformTypeIdentifiers6UTTypeVGSSSgys6ResultOy10Foundation3URLVs5b13_pGcyyctFAA19fiJ8VAPXEfU_Say22UniformTypeIdentifiers6UTTypeVGSSSgAD7BindingVySbGs6ResultOy10Foundation3URLVsAC_pGIegn_Ieg_Tf1ncn_n@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v15 = v14;
  uint64_t v25 = a7;
  if (a1)
  {
    v24[0] = a1;
    v24[1] = a2;
    v24[2] = a3;
    swift_retain();
    swift_bridgeObjectRetain();
    closure #1 in View.fileExporter(isPresented:document:contentTypes:defaultFilename:onCompletion:onCancellation:)(v24, a4, a5, a6, v25, a8, a10 & 1, a11, a9, a12, a13, a14);
    if (v15)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
      swift_release();
      return swift_release();
    }
    swift_bridgeObjectRelease();
    swift_release();
    uint64_t v22 = type metadata accessor for FileExportOperation(0);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v22 - 8) + 56))(a9, 0, 1, v22);
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v21 = type metadata accessor for FileExportOperation(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v21 - 8) + 56))(a9, 1, 1, v21);
    swift_bridgeObjectRelease();
  }
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t specialized FileDialogConfiguration.init(preferenceKey:operation:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return specialized FileDialogConfiguration.init(preferenceKey:operation:)(a1, (uint64_t (*)(void))type metadata accessor for FileDialogConfiguration<FileImportOperation.Key, FileImportOperation>, (uint64_t)&type metadata for FileImportOperation.Key, (uint64_t (*)(uint64_t, char *))outlined init with take of FileImportOperation?, a2);
}

{
  return specialized FileDialogConfiguration.init(preferenceKey:operation:)(a1, (uint64_t (*)(void))type metadata accessor for FileDialogConfiguration<FileExportOperation.Key, FileExportOperation>, (uint64_t)&type metadata for FileExportOperation.Key, (uint64_t (*)(uint64_t, char *))outlined init with take of FileExportOperation?, a2);
}

uint64_t View.fileExporter<A>(isPresented:document:contentType:defaultFilename:onCompletion:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t (*a8)(void *)@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v31 = a11;
  uint64_t v32 = a12;
  uint64_t v33 = a13;
  uint64_t v34 = a14;
  uint64_t v35 = a4;
  type metadata accessor for _ContiguousArrayStorage<UTType>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<UTType>, MEMORY[0x1E4FBCEA8], MEMORY[0x1E4FBBE00]);
  uint64_t v18 = type metadata accessor for UTType();
  uint64_t v19 = *(void *)(v18 - 8);
  unint64_t v20 = (*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
  uint64_t v21 = swift_allocObject();
  *(_OWORD *)(v21 + 16) = xmmword_18834BB80;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v19 + 16))(v21 + v20, a5, v18);
  uint64_t v36 = a1;
  uint64_t v37 = a2;
  char v38 = a3;
  type metadata accessor for Binding<Bool>();
  MEMORY[0x18C113DA0](&v39);
  if (v39 == 1)
  {
    uint64_t v22 = (*(uint64_t (**)(uint64_t, uint64_t))(a14 + 16))(a12, a14);
    if (*(void *)(v22 + 16))
    {
      if (*(void *)(v21 + 16))
      {
        uint64_t v23 = specialized Sequence.compactMap<A>(_:)(v21, v22);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v21 = (uint64_t)v23;
      }
      else
      {
        swift_bridgeObjectRelease();
        uint64_t v21 = v22;
      }
    }
    else
    {
      swift_bridgeObjectRelease();
      static os_log_type_t.fault.getter();
      uint64_t v24 = (void *)static Log.runtimeIssuesLog.getter();
      os_log(_:dso:log:_:_:)();
    }
  }
  View.fileExporter(isPresented:document:contentTypes:defaultFilename:onCompletion:onCancellation:)(a1, a2, a3 & 1, (uint64_t (*)(void *))partial apply for implicit closure #1 in View.fileExporter<A>(isPresented:document:contentType:defaultFilename:onCompletion:), (uint64_t)v30, v21, a6, a7, a9, a8, a10, (uint64_t)destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation, 0, a11, a13);
  return swift_bridgeObjectRelease();
}

{
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  void *v24;
  unsigned char v30[16];
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t v39;

  uint64_t v31 = a11;
  uint64_t v32 = a12;
  uint64_t v33 = a13;
  uint64_t v34 = a14;
  uint64_t v35 = a4;
  type metadata accessor for _ContiguousArrayStorage<UTType>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<UTType>, MEMORY[0x1E4FBCEA8], MEMORY[0x1E4FBBE00]);
  uint64_t v18 = type metadata accessor for UTType();
  uint64_t v19 = *(void *)(v18 - 8);
  unint64_t v20 = (*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
  uint64_t v21 = swift_allocObject();
  *(_OWORD *)(v21 + 16) = xmmword_18834BB80;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v19 + 16))(v21 + v20, a5, v18);
  uint64_t v36 = a1;
  uint64_t v37 = a2;
  char v38 = a3;
  type metadata accessor for Binding<Bool>();
  MEMORY[0x18C113DA0](&v39);
  if (v39 == 1)
  {
    uint64_t v22 = (*(uint64_t (**)(uint64_t, uint64_t))(a14 + 32))(a12, a14);
    if (*(void *)(v22 + 16))
    {
      if (*(void *)(v21 + 16))
      {
        uint64_t v23 = specialized Sequence.compactMap<A>(_:)(v21, v22);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v21 = (uint64_t)v23;
      }
      else
      {
        swift_bridgeObjectRelease();
        uint64_t v21 = v22;
      }
    }
    else
    {
      swift_bridgeObjectRelease();
      static os_log_type_t.fault.getter();
      uint64_t v24 = (void *)static Log.runtimeIssuesLog.getter();
      os_log(_:dso:log:_:_:)();
    }
  }
  View.fileExporter(isPresented:document:contentTypes:defaultFilename:onCompletion:onCancellation:)(a1, a2, a3 & 1, (uint64_t (*)(void *))partial apply for implicit closure #1 in View.fileExporter<A>(isPresented:document:contentType:defaultFilename:onCompletion:), (uint64_t)v30, v21, a6, a7, a9, a8, a10, (uint64_t)destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation, 0, a11, a13);
  return swift_bridgeObjectRelease();
}

uint64_t partial apply for implicit closure #1 in View.fileExporter<A>(isPresented:document:contentType:defaultFilename:onCompletion:)()
{
  return partial apply for implicit closure #1 in View.fileExporter<A>(isPresented:document:contentType:defaultFilename:onCompletion:)((void (*)(char *, char *))partial apply for implicit closure #2 in implicit closure #1 in View.fileExporter<A>(isPresented:document:contentTypes:defaultFilename:onCompletion:onCancellation:));
}

{
  return partial apply for implicit closure #1 in View.fileExporter<A>(isPresented:document:contentType:defaultFilename:onCompletion:)((void (*)(char *, char *))partial apply for implicit closure #2 in implicit closure #1 in View.fileExporter<A>(isPresented:document:contentTypes:defaultFilename:onCompletion:onCancellation:));
}

uint64_t View.fileExporter<A>(isPresented:documents:contentType:onCompletion:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  type metadata accessor for _ContiguousArrayStorage<UTType>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<UTType>, MEMORY[0x1E4FBCEA8], MEMORY[0x1E4FBBE00]);
  uint64_t v16 = type metadata accessor for UTType();
  uint64_t v17 = *(void *)(v16 - 8);
  unint64_t v18 = (*(unsigned __int8 *)(v17 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80);
  uint64_t v19 = swift_allocObject();
  *(_OWORD *)(v19 + 16) = xmmword_18834BB80;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v17 + 16))(v19 + v18, a4, v16);
  type metadata accessor for Binding<Bool>();
  MEMORY[0x18C113DA0](&v28);
  if (v28 == 1)
  {
    swift_getAssociatedTypeWitness();
    uint64_t v20 = (*(uint64_t (**)(void))(a12 + 16))();
    if (*(void *)(v20 + 16))
    {
      if (*(void *)(v19 + 16))
      {
        uint64_t v21 = specialized Sequence.compactMap<A>(_:)(v19, v20);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v19 = (uint64_t)v21;
      }
      else
      {
        swift_bridgeObjectRelease();
        uint64_t v19 = v20;
      }
    }
    else
    {
      swift_bridgeObjectRelease();
      static os_log_type_t.fault.getter();
      uint64_t v22 = (void *)static Log.runtimeIssuesLog.getter();
      os_log(_:dso:log:_:_:)();
    }
  }
  View.fileExporter(isPresented:documents:contentTypes:onCompletion:onCancellation:)(a1, a2, a3 & 1, (uint64_t (*)(void *))partial apply for implicit closure #1 in View.fileExporter<A>(isPresented:documents:contentType:onCompletion:), v19, a5, a6, a8, (uint64_t)destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation, 0, a7, a10);
  return swift_bridgeObjectRelease();
}

{
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  void *v22;
  uint64_t v28;

  type metadata accessor for _ContiguousArrayStorage<UTType>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<UTType>, MEMORY[0x1E4FBCEA8], MEMORY[0x1E4FBBE00]);
  uint64_t v16 = type metadata accessor for UTType();
  uint64_t v17 = *(void *)(v16 - 8);
  unint64_t v18 = (*(unsigned __int8 *)(v17 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80);
  uint64_t v19 = swift_allocObject();
  *(_OWORD *)(v19 + 16) = xmmword_18834BB80;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v17 + 16))(v19 + v18, a4, v16);
  type metadata accessor for Binding<Bool>();
  MEMORY[0x18C113DA0](&v28);
  if (v28 == 1)
  {
    swift_getAssociatedTypeWitness();
    uint64_t v20 = (*(uint64_t (**)(void))(a12 + 32))();
    if (*(void *)(v20 + 16))
    {
      if (*(void *)(v19 + 16))
      {
        uint64_t v21 = specialized Sequence.compactMap<A>(_:)(v19, v20);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v19 = (uint64_t)v21;
      }
      else
      {
        swift_bridgeObjectRelease();
        uint64_t v19 = v20;
      }
    }
    else
    {
      swift_bridgeObjectRelease();
      static os_log_type_t.fault.getter();
      uint64_t v22 = (void *)static Log.runtimeIssuesLog.getter();
      os_log(_:dso:log:_:_:)();
    }
  }
  View.fileExporter(isPresented:documents:contentTypes:onCompletion:onCancellation:)(a1, a2, a3 & 1, (uint64_t (*)(void *))partial apply for implicit closure #1 in View.fileExporter<A>(isPresented:documents:contentType:onCompletion:), v19, a5, a6, a8, (uint64_t)destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation, 0, a7, a10);
  return swift_bridgeObjectRelease();
}

uint64_t View.fileExporter(isPresented:documents:contentTypes:onCompletion:onCancellation:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t (*a4)(void *)@<X3>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v13 = v12;
  uint64_t v45 = a5;
  uint64_t v46 = a7;
  uint64_t v49 = a8;
  uint64_t v50 = a12;
  uint64_t v48 = a11;
  type metadata accessor for FileExportOperation?(0);
  MEMORY[0x1F4188790](v19 - 8);
  uint64_t v21 = (char *)v44 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for FileDialogConfiguration<FileExportOperation.Key, FileExportOperation>();
  uint64_t v47 = v22;
  MEMORY[0x1F4188790](v22);
  uint64_t v24 = (void *)((char *)v44 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v51 = a1;
  uint64_t v52 = a2;
  char v53 = a3;
  type metadata accessor for Binding<Bool>();
  uint64_t v25 = MEMORY[0x18C113DA0](&v54);
  if (v54 != 1) {
    goto LABEL_5;
  }
  uint64_t v26 = a4(v25);
  if (!*(void *)(v26 + 16))
  {
    swift_bridgeObjectRelease();
    static os_log_type_t.fault.getter();
    id v41 = (void *)static Log.runtimeIssuesLog.getter();
    os_log(_:dso:log:_:_:)();

LABEL_5:
    uint64_t v42 = type metadata accessor for FileExportOperation(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v42 - 8) + 56))(v21, 1, 1, v42);
    goto LABEL_6;
  }
  v44[1] = a10;
  v44[2] = v13;
  char v27 = a3 & 1;
  uint64_t v28 = swift_allocObject();
  *(void *)(v28 + 16) = a1;
  *(void *)(v28 + 24) = a2;
  *(unsigned char *)(v28 + 32) = v27;
  uint64_t v29 = v46;
  *(void *)(v28 + 40) = a6;
  *(void *)(v28 + 48) = v29;
  uint64_t v30 = swift_allocObject();
  *(void *)(v30 + 16) = a1;
  *(void *)(v30 + 24) = a2;
  *(unsigned char *)(v30 + 32) = v27;
  *(void *)(v30 + 40) = a9;
  *(void *)(v30 + 48) = a10;
  uint64_t v31 = (int *)type metadata accessor for FileExportOperation(0);
  uint64_t v32 = &v21[v31[5]];
  *(void *)uint64_t v32 = 0;
  *((void *)v32 + 1) = 0;
  uint64_t v33 = &v21[v31[6]];
  uint64_t v34 = type metadata accessor for URL();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v34 - 8) + 56))(v33, 1, 1, v34);
  uint64_t v35 = &v21[v31[7]];
  *(_OWORD *)uint64_t v35 = 0u;
  *((_OWORD *)v35 + 1) = 0u;
  uint64_t v36 = &v21[v31[8]];
  *(_OWORD *)uint64_t v36 = 0u;
  *((_OWORD *)v36 + 1) = 0u;
  uint64_t v37 = &v21[v31[9]];
  *(_OWORD *)uint64_t v37 = 0u;
  *((_OWORD *)v37 + 1) = 0u;
  char v38 = &v21[v31[10]];
  type metadata accessor for Predicate<Pack{URL}>();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v39 - 8) + 56))(v38, 1, 1, v39);
  v21[v31[11]] = 2;
  uint64_t v40 = &v21[v31[12]];
  *(void *)uint64_t v40 = 0;
  v40[8] = 1;
  *(void *)uint64_t v21 = v26;
  v21[8] = 0;
  *((void *)v21 + 2) = v45;
  *((void *)v21 + 3) = partial apply for closure #1 in View._fileExporter(isPresented:items:contentTypes:onCompletion:onCancellation:);
  *((void *)v21 + 4) = v28;
  *((void *)v21 + 5) = partial apply for closure #2 in View._fileExporter(isPresented:items:contentTypes:onCompletion:onCancellation:);
  *((void *)v21 + 6) = v30;
  type metadata accessor for FileExportOperation.Mode(0);
  swift_storeEnumTagMultiPayload();
  (*(void (**)(char *, void, uint64_t, int *))(*((void *)v31 - 1) + 56))(v21, 0, 1, v31);
  swift_retain_n();
  swift_retain_n();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
LABEL_6:
  specialized FileDialogConfiguration.init(preferenceKey:operation:)((uint64_t)v21, (uint64_t (*)(void))type metadata accessor for FileDialogConfiguration<FileExportOperation.Key, FileExportOperation>, (uint64_t)&type metadata for FileExportOperation.Key, (uint64_t (*)(uint64_t, char *))outlined init with take of FileExportOperation?, v24);
  MEMORY[0x18C113660](v24, v48, v47, v50);
  return _s7SwiftUI23FileDialogConfigurationVyAA0C15ExportOperationV3KeyVAEGWOhTm_0((uint64_t)v24, (uint64_t (*)(void))type metadata accessor for FileDialogConfiguration<FileExportOperation.Key, FileExportOperation>);
}

uint64_t View._fileExporter(isPresented:items:contentTypes:onCompletion:onCancellation:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v13 = v12;
  uint64_t v50 = a8;
  uint64_t v51 = a5;
  uint64_t v52 = a7;
  uint64_t v53 = a4;
  uint64_t v56 = a9;
  uint64_t v57 = a12;
  uint64_t v55 = a11;
  type metadata accessor for FileDialogConfiguration<FileExportOperation.Key, FileExportOperation>();
  uint64_t v54 = v18;
  MEMORY[0x1F4188790](v18);
  uint64_t v20 = (void *)((char *)v48 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0));
  type metadata accessor for FileExportOperation?(0);
  MEMORY[0x1F4188790](v21 - 8);
  uint64_t v23 = (char *)v48 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v24);
  uint64_t v26 = (char *)v48 - v25;
  uint64_t v58 = a1;
  uint64_t v59 = a2;
  char v27 = a3 & 1;
  char v60 = a3;
  type metadata accessor for Binding<Bool>();
  uint64_t v29 = v28;
  MEMORY[0x18C113DA0](&v61);
  if (v61 == 1 && !*(void *)(v53 + 16))
  {
    static os_log_type_t.fault.getter();
    uint64_t v30 = static Log.runtimeIssuesLog.getter();
    uint64_t v49 = v13;
    uint64_t v31 = (void *)v30;
    os_log(_:dso:log:_:_:)();

    uint64_t v13 = v49;
  }
  uint64_t v58 = a1;
  uint64_t v59 = a2;
  char v60 = a3 & 1;
  MEMORY[0x18C113DA0](&v61, v29);
  if (v61 == 1)
  {
    v48[1] = a10;
    uint64_t v32 = swift_allocObject();
    *(void *)(v32 + 16) = a1;
    *(void *)(v32 + 24) = a2;
    *(unsigned char *)(v32 + 32) = v27;
    uint64_t v33 = v52;
    *(void *)(v32 + 40) = a6;
    *(void *)(v32 + 48) = v33;
    uint64_t v34 = swift_allocObject();
    *(void *)(v34 + 16) = a1;
    *(void *)(v34 + 24) = a2;
    *(unsigned char *)(v34 + 32) = v27;
    *(void *)(v34 + 40) = v50;
    *(void *)(v34 + 48) = a10;
    uint64_t v35 = type metadata accessor for FileExportOperation(0);
    uint64_t v49 = v13;
    uint64_t v36 = (int *)v35;
    uint64_t v37 = &v26[*(int *)(v35 + 20)];
    *(void *)uint64_t v37 = 0;
    *((void *)v37 + 1) = 0;
    char v38 = &v26[*(int *)(v35 + 24)];
    uint64_t v39 = type metadata accessor for URL();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v39 - 8) + 56))(v38, 1, 1, v39);
    uint64_t v40 = &v26[v36[7]];
    *(_OWORD *)uint64_t v40 = 0u;
    *((_OWORD *)v40 + 1) = 0u;
    id v41 = &v26[v36[8]];
    *(_OWORD *)id v41 = 0u;
    *((_OWORD *)v41 + 1) = 0u;
    uint64_t v42 = &v26[v36[9]];
    *(_OWORD *)uint64_t v42 = 0u;
    *((_OWORD *)v42 + 1) = 0u;
    long long v43 = &v26[v36[10]];
    type metadata accessor for Predicate<Pack{URL}>();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v44 - 8) + 56))(v43, 1, 1, v44);
    v26[v36[11]] = 2;
    uint64_t v45 = &v26[v36[12]];
    *(void *)uint64_t v45 = 0;
    v45[8] = 1;
    *(void *)uint64_t v26 = v53;
    v26[8] = 1;
    *((void *)v26 + 2) = v51;
    *((void *)v26 + 3) = partial apply for closure #1 in View._fileExporter(isPresented:items:contentTypes:onCompletion:onCancellation:);
    *((void *)v26 + 4) = v32;
    *((void *)v26 + 5) = partial apply for closure #2 in View._fileExporter(isPresented:items:contentTypes:onCompletion:onCancellation:);
    *((void *)v26 + 6) = v34;
    type metadata accessor for FileExportOperation.Mode(0);
    swift_storeEnumTagMultiPayload();
    (*(void (**)(char *, void, uint64_t, int *))(*((void *)v36 - 1) + 56))(v26, 0, 1, v36);
    swift_retain_n();
    swift_retain_n();
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
  }
  else
  {
    uint64_t v46 = type metadata accessor for FileExportOperation(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v46 - 8) + 56))(v26, 1, 1, v46);
  }
  outlined init with copy of FileExportOperation?((uint64_t)v26, (uint64_t)v23, (uint64_t (*)(void))type metadata accessor for FileExportOperation?);
  specialized FileDialogConfiguration.init(preferenceKey:operation:)((uint64_t)v23, (uint64_t (*)(void))type metadata accessor for FileDialogConfiguration<FileExportOperation.Key, FileExportOperation>, (uint64_t)&type metadata for FileExportOperation.Key, (uint64_t (*)(uint64_t, char *))outlined init with take of FileExportOperation?, v20);
  MEMORY[0x18C113660](v20, v55, v54, v57);
  _s7SwiftUI23FileDialogConfigurationVyAA0C15ExportOperationV3KeyVAEGWOhTm_0((uint64_t)v20, (uint64_t (*)(void))type metadata accessor for FileDialogConfiguration<FileExportOperation.Key, FileExportOperation>);
  return _s7SwiftUI23FileDialogConfigurationVyAA0C15ExportOperationV3KeyVAEGWOhTm_0((uint64_t)v26, (uint64_t (*)(void))type metadata accessor for FileExportOperation?);
}

uint64_t View.fileExporter<A>(isPresented:document:contentTypes:defaultFilename:onCompletion:onCancellation:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, void *a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t (*a8)(void *)@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  uint64_t v28 = a13;
  uint64_t v29 = a14;
  uint64_t v30 = a15;
  uint64_t v31 = a16;
  uint64_t v32 = a4;
  uint64_t v33 = a1;
  uint64_t v34 = a2;
  char v35 = a3;
  type metadata accessor for Binding<Bool>();
  MEMORY[0x18C113DA0](&v36);
  if (v36 != 1) {
    goto LABEL_6;
  }
  uint64_t v20 = (*(uint64_t (**)(uint64_t, uint64_t))(a16 + 16))(a14, a16);
  if (!*(void *)(v20 + 16))
  {
    swift_bridgeObjectRelease();
    static os_log_type_t.fault.getter();
    uint64_t v21 = (void *)static Log.runtimeIssuesLog.getter();
    os_log(_:dso:log:_:_:)();

LABEL_6:
    swift_bridgeObjectRetain();
    goto LABEL_7;
  }
  if (a5[2])
  {
    a5 = specialized Sequence.compactMap<A>(_:)((uint64_t)a5, v20);
    swift_bridgeObjectRelease();
  }
  else
  {
    a5 = (void *)v20;
  }
LABEL_7:
  View.fileExporter(isPresented:document:contentTypes:defaultFilename:onCompletion:onCancellation:)(a1, a2, a3 & 1, (uint64_t (*)(void *))partial apply for implicit closure #1 in View.fileExporter<A>(isPresented:document:contentType:defaultFilename:onCompletion:), (uint64_t)v27, (uint64_t)a5, a6, a7, a9, a8, a10, a11, a12, a13, a15);
  return swift_bridgeObjectRelease();
}

{
  uint64_t v20;
  void *v21;
  unsigned char v27[16];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;

  uint64_t v28 = a13;
  uint64_t v29 = a14;
  uint64_t v30 = a15;
  uint64_t v31 = a16;
  uint64_t v32 = a4;
  uint64_t v33 = a1;
  uint64_t v34 = a2;
  char v35 = a3;
  type metadata accessor for Binding<Bool>();
  MEMORY[0x18C113DA0](&v36);
  if (v36 != 1) {
    goto LABEL_6;
  }
  uint64_t v20 = (*(uint64_t (**)(uint64_t, uint64_t))(a16 + 32))(a14, a16);
  if (!*(void *)(v20 + 16))
  {
    swift_bridgeObjectRelease();
    static os_log_type_t.fault.getter();
    uint64_t v21 = (void *)static Log.runtimeIssuesLog.getter();
    os_log(_:dso:log:_:_:)();

LABEL_6:
    swift_bridgeObjectRetain();
    goto LABEL_7;
  }
  if (a5[2])
  {
    a5 = specialized Sequence.compactMap<A>(_:)((uint64_t)a5, v20);
    swift_bridgeObjectRelease();
  }
  else
  {
    a5 = (void *)v20;
  }
LABEL_7:
  View.fileExporter(isPresented:document:contentTypes:defaultFilename:onCompletion:onCancellation:)(a1, a2, a3 & 1, (uint64_t (*)(void *))partial apply for implicit closure #1 in View.fileExporter<A>(isPresented:document:contentType:defaultFilename:onCompletion:), (uint64_t)v27, (uint64_t)a5, a6, a7, a9, a8, a10, a11, a12, a13, a15);
  return swift_bridgeObjectRelease();
}

uint64_t implicit closure #1 in View.fileExporter<A>(isPresented:document:contentType:defaultFilename:onCompletion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void (*a6)(char *, char *))
{
  v9[2] = a2;
  void v9[3] = a3;
  v9[4] = a4;
  v9[5] = a5;
  type metadata accessor for Optional();
  _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF(a6, (uint64_t)v9, MEMORY[0x1E4FBC248], (uint64_t)&type metadata for AnyFileDocument, v7, (uint64_t)&v10);
  return v10;
}

{
  uint64_t v7;
  void v9[9];
  uint64_t v10;

  unsigned char v9[8] = a1;
  v9[2] = a2;
  void v9[3] = a3;
  v9[4] = a4;
  v9[5] = a5;
  type metadata accessor for Optional();
  _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF(a6, (uint64_t)v9, MEMORY[0x1E4FBC248], (uint64_t)&type metadata for AnyFileDocument, v7, (uint64_t)&v10);
  return v10;
}

uint64_t View.fileExporter<A>(isPresented:documents:contentTypes:onCompletion:onCancellation:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, void *a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  type metadata accessor for Binding<Bool>();
  MEMORY[0x18C113DA0](&v25);
  if (v25 != 1) {
    goto LABEL_6;
  }
  swift_getAssociatedTypeWitness();
  uint64_t v18 = (*(uint64_t (**)(void))(a14 + 16))();
  if (!*(void *)(v18 + 16))
  {
    swift_bridgeObjectRelease();
    static os_log_type_t.fault.getter();
    uint64_t v19 = (void *)static Log.runtimeIssuesLog.getter();
    os_log(_:dso:log:_:_:)();

LABEL_6:
    swift_bridgeObjectRetain();
    goto LABEL_7;
  }
  if (a4[2])
  {
    a4 = specialized Sequence.compactMap<A>(_:)((uint64_t)a4, v18);
    swift_bridgeObjectRelease();
  }
  else
  {
    a4 = (void *)v18;
  }
LABEL_7:
  View.fileExporter(isPresented:documents:contentTypes:onCompletion:onCancellation:)(a1, a2, a3 & 1, (uint64_t (*)(void *))partial apply for implicit closure #1 in View.fileExporter<A>(isPresented:documents:contentType:onCompletion:), (uint64_t)a4, a5, a6, a8, a7, a9, a10, a12);
  return swift_bridgeObjectRelease();
}

{
  uint64_t v18;
  void *v19;
  uint64_t v25;

  type metadata accessor for Binding<Bool>();
  MEMORY[0x18C113DA0](&v25);
  if (v25 != 1) {
    goto LABEL_6;
  }
  swift_getAssociatedTypeWitness();
  uint64_t v18 = (*(uint64_t (**)(void))(a14 + 32))();
  if (!*(void *)(v18 + 16))
  {
    swift_bridgeObjectRelease();
    static os_log_type_t.fault.getter();
    uint64_t v19 = (void *)static Log.runtimeIssuesLog.getter();
    os_log(_:dso:log:_:_:)();

LABEL_6:
    swift_bridgeObjectRetain();
    goto LABEL_7;
  }
  if (a4[2])
  {
    a4 = specialized Sequence.compactMap<A>(_:)((uint64_t)a4, v18);
    swift_bridgeObjectRelease();
  }
  else
  {
    a4 = (void *)v18;
  }
LABEL_7:
  View.fileExporter(isPresented:documents:contentTypes:onCompletion:onCancellation:)(a1, a2, a3 & 1, (uint64_t (*)(void *))partial apply for implicit closure #1 in View.fileExporter<A>(isPresented:documents:contentType:onCompletion:), (uint64_t)a4, a5, a6, a8, a7, a9, a10, a12);
  return swift_bridgeObjectRelease();
}

uint64_t (*implicit closure #2 in implicit closure #1 in View.fileExporter<A>(isPresented:documents:contentType:onCompletion:)@<X0>(uint64_t a1@<X5>, uint64_t (**a2)(uint64_t a1)@<X8>))(uint64_t a1)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = swift_unknownObjectRetain();
  uint64_t result = AnyFileDocument.init<A>(_:)(v5, AssociatedTypeWitness, a1);
  *a2 = result;
  a2[1] = v7;
  a2[2] = v8;
  return result;
}

uint64_t closure #1 in View.fileExporter(isPresented:document:contentTypes:defaultFilename:onCompletion:onCancellation:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, char a7@<W6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v35 = a1[1];
  uint64_t v30 = a1[2];
  uint64_t v31 = *a1;
  uint64_t v17 = swift_allocObject();
  *(void *)(v17 + 16) = a5;
  *(void *)(v17 + 24) = a6;
  *(unsigned char *)(v17 + 32) = a7;
  *(void *)(v17 + 40) = a8;
  *(void *)(v17 + 48) = a10;
  uint64_t v18 = swift_allocObject();
  *(void *)(v18 + 16) = a5;
  *(void *)(v18 + 24) = a6;
  *(unsigned char *)(v18 + 32) = a7;
  *(void *)(v18 + 40) = a11;
  *(void *)(v18 + 48) = a12;
  uint64_t v19 = (int *)type metadata accessor for FileExportOperation(0);
  uint64_t v20 = (void *)(a9 + v19[5]);
  *uint64_t v20 = 0;
  v20[1] = 0;
  uint64_t v21 = a9 + v19[6];
  uint64_t v22 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 56))(v21, 1, 1, v22);
  uint64_t v23 = (_OWORD *)(a9 + v19[7]);
  *uint64_t v23 = 0u;
  v23[1] = 0u;
  uint64_t v24 = (_OWORD *)(a9 + v19[8]);
  _OWORD *v24 = 0u;
  v24[1] = 0u;
  uint64_t v25 = (_OWORD *)(a9 + v19[9]);
  *uint64_t v25 = 0u;
  v25[1] = 0u;
  uint64_t v26 = a9 + v19[10];
  type metadata accessor for Predicate<Pack{URL}>();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v27 - 8) + 56))(v26, 1, 1, v27);
  *(unsigned char *)(a9 + v19[11]) = 2;
  uint64_t v28 = a9 + v19[12];
  *(void *)uint64_t v28 = 0;
  *(unsigned char *)(v28 + 8) = 1;
  *(void *)a9 = v31;
  *(void *)(a9 + 8) = v35;
  *(void *)(a9 + 16) = v30;
  *(void *)(a9 + 24) = 0;
  *(unsigned char *)(a9 + 32) = 0;
  *(void *)(a9 + 40) = a2;
  *(void *)(a9 + 48) = a3;
  *(void *)(a9 + 56) = a4;
  *(void *)(a9 + 64) = partial apply for closure #1 in View._fileExporter(isPresented:item:contentTypes:defaultFilename:onCompletion:onCancellation:);
  *(void *)(a9 + 72) = v17;
  *(void *)(a9 + 80) = partial apply for closure #2 in View._fileExporter(isPresented:items:contentTypes:onCompletion:onCancellation:);
  *(void *)(a9 + 88) = v18;
  type metadata accessor for FileExportOperation.Mode(0);
  swift_storeEnumTagMultiPayload();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_retain_n();
  swift_retain_n();
  swift_retain();
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

uint64_t closure #1 in View._fileExporter(isPresented:item:contentTypes:defaultFilename:onCompletion:onCancellation:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(unsigned char *))
{
  type metadata accessor for Result<URL, Error>?(0);
  MEMORY[0x1F4188790](v7 - 8);
  uint64_t v9 = &v18[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  type metadata accessor for Result<URL, Error>();
  uint64_t v11 = v10;
  uint64_t v12 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v10);
  uint64_t v14 = &v18[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v18[15] = 0;
  swift_retain();
  swift_retain();
  dispatch thunk of AnyLocation.set(_:transaction:)();
  swift_release();
  swift_release();
  outlined init with copy of FileExportOperation?(a1, (uint64_t)v9, (uint64_t (*)(void))type metadata accessor for Result<URL, Error>?);
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v12 + 48))(v9, 1, v11) == 1)
  {
    uint64_t v15 = (uint64_t (*)(void))type metadata accessor for Result<URL, Error>?;
    uint64_t v16 = (uint64_t)v9;
  }
  else
  {
    outlined init with take of FileExportOperation?((uint64_t)v9, (uint64_t)v14, (uint64_t (*)(void))type metadata accessor for Result<URL, Error>);
    a5(v14);
    uint64_t v15 = (uint64_t (*)(void))type metadata accessor for Result<URL, Error>;
    uint64_t v16 = (uint64_t)v14;
  }
  return _s7SwiftUI23FileDialogConfigurationVyAA0C15ExportOperationV3KeyVAEGWOhTm_0(v16, v15);
}

void *specialized Sequence.compactMap<A>(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = type metadata accessor for UTType();
  MEMORY[0x1F4188790](v5);
  uint64_t v50 = (char *)v40 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v7);
  uint64_t v9 = (char *)v40 - v8;
  MEMORY[0x1F4188790](v10);
  uint64_t v52 = *(void *)(a1 + 16);
  if (!v52) {
    return (void *)MEMORY[0x1E4FBC860];
  }
  uint64_t v55 = (char *)v40 - v12;
  void v40[2] = v2;
  unint64_t v13 = (*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  uint64_t v51 = a1 + v13;
  uint64_t v14 = *(void *)(a2 + 16);
  uint64_t v15 = *(void *)(v11 + 72);
  char v60 = (void (**)(char *, uint64_t, uint64_t))(v11 + 16);
  uint64_t v57 = (void (**)(char *, uint64_t))(v11 + 8);
  uint64_t v58 = v14;
  uint64_t v49 = a2 + v13;
  uint64_t v42 = a2 + v13 + v15;
  uint64_t v45 = (void (**)(char *, char *, uint64_t))(v11 + 32);
  v40[1] = a1;
  swift_bridgeObjectRetain();
  uint64_t v16 = 0;
  unint64_t v46 = v13;
  uint64_t v59 = v15;
  uint64_t v41 = a2 + v13 + 2 * v15;
  uint64_t v53 = (void *)MEMORY[0x1E4FBC860];
  *(void *)&long long v17 = 136315138;
  long long v44 = v17;
  uint64_t v43 = MEMORY[0x1E4FBC840] + 8;
  uint64_t v47 = v9;
  uint64_t v48 = a2;
  while (1)
  {
    uint64_t v18 = v51 + v59 * v16;
    if (!v58) {
      goto LABEL_20;
    }
    uint64_t v19 = v55;
    uint64_t v56 = *v60;
    v56(v55, v49, v5);
    uint64_t v20 = lazy protocol witness table accessor for type FileDialogConfiguration<FileExportOperation.Key, FileExportOperation> and conformance FileDialogConfiguration<A, B>((unint64_t *)&lazy protocol witness table cache variable for type UTType and conformance UTType, MEMORY[0x1E4FBCEA8]);
    swift_bridgeObjectRetain();
    uint64_t v54 = v20;
    char v21 = dispatch thunk of static Equatable.== infix(_:_:)();
    uint64_t v22 = *v57;
    (*v57)(v19, v5);
    if (v21) {
      goto LABEL_9;
    }
    if (v58 != 1)
    {
      uint64_t v23 = v55;
      v56(v55, v42, v5);
      char v24 = dispatch thunk of static Equatable.== infix(_:_:)();
      v22(v23, v5);
      if (v24)
      {
LABEL_9:
        swift_bridgeObjectRelease();
        v56(v50, v18, v5);
        if (swift_isUniquelyReferenced_nonNull_native()) {
          uint64_t v25 = v53;
        }
        else {
          uint64_t v25 = (void *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v53[2] + 1, 1, v53);
        }
        unint64_t v27 = v25[2];
        unint64_t v26 = v25[3];
        uint64_t v9 = v47;
        if (v27 >= v26 >> 1) {
          uint64_t v25 = (void *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v26 > 1, v27 + 1, 1, v25);
        }
        v25[2] = v27 + 1;
        uint64_t v53 = v25;
        (*v45)((char *)v25 + v46 + v27 * v59, v50, v5);
        goto LABEL_4;
      }
      if (v58 != 2) {
        break;
      }
    }
LABEL_19:
    swift_bridgeObjectRelease();
    uint64_t v9 = v47;
LABEL_20:
    os_log_type_t v34 = static os_log_type_t.fault.getter();
    uint64_t v35 = static Log.runtimeIssuesLog.getter();
    (*v60)(v9, v18, v5);
    if (os_log_type_enabled(v35, v34))
    {
      uint64_t v36 = swift_slowAlloc();
      uint64_t v37 = swift_slowAlloc();
      uint64_t v61 = v37;
      *(_DWORD *)uint64_t v36 = v44;
      lazy protocol witness table accessor for type FileDialogConfiguration<FileExportOperation.Key, FileExportOperation> and conformance FileDialogConfiguration<A, B>(&lazy protocol witness table cache variable for type UTType and conformance UTType, MEMORY[0x1E4FBCEA8]);
      uint64_t v38 = dispatch thunk of CustomStringConvertible.description.getter();
      *(void *)(v36 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v38, v39, &v61);
      swift_bridgeObjectRelease();
      (*v57)(v9, v5);
      swift_arrayDestroy();
      MEMORY[0x18C119C60](v37, -1, -1);
      MEMORY[0x18C119C60](v36, -1, -1);
    }
    else
    {

      (*v57)(v9, v5);
    }
LABEL_4:
    if (++v16 == v52)
    {
      swift_bridgeObjectRelease();
      return v53;
    }
  }
  uint64_t v28 = v41;
  uint64_t v29 = 2;
  while (1)
  {
    uint64_t v30 = v55;
    uint64_t result = (void *)((uint64_t (*)(char *, uint64_t, uint64_t))v56)(v55, v28, v5);
    uint64_t v32 = v29 + 1;
    if (__OFADD__(v29, 1)) {
      break;
    }
    char v33 = dispatch thunk of static Equatable.== infix(_:_:)();
    v22(v30, v5);
    if (v33) {
      goto LABEL_9;
    }
    ++v29;
    v28 += v59;
    if (v32 == v58) {
      goto LABEL_19;
    }
  }
  __break(1u);
  return result;
}

uint64_t partial apply for implicit closure #1 in View.fileExporter<A>(isPresented:documents:contentType:onCompletion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return partial apply for implicit closure #1 in View.fileExporter<A>(isPresented:documents:contentType:onCompletion:)((void (*)(char *, char *))partial apply for implicit closure #2 in implicit closure #1 in View.fileExporter<A>(isPresented:documents:contentTypes:onCompletion:onCancellation:), a2, a3, a4, a5, a6, a7, a8);
}

{
  return partial apply for implicit closure #1 in View.fileExporter<A>(isPresented:documents:contentType:onCompletion:)((void (*)(char *, char *))partial apply for implicit closure #2 in implicit closure #1 in View.fileExporter<A>(isPresented:documents:contentTypes:onCompletion:onCancellation:), a2, a3, a4, a5, a6, a7, a8);
}

void *partial apply for closure #1 in View.fileExporter<A, B>(isPresented:items:contentTypes:onCompletion:onCancellation:)@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  return closure #1 in View.fileExporter<A, B>(isPresented:items:contentTypes:onCompletion:onCancellation:)(a1, *(void *)(v2 + 32), *(void *)(v2 + 56), a2);
}

uint64_t partial apply for implicit closure #1 in View.fileExporter<A>(isPresented:document:contentType:defaultFilename:onCompletion:)(void (*a1)(char *, char *))
{
  return implicit closure #1 in View.fileExporter<A>(isPresented:document:contentType:defaultFilename:onCompletion:)(v1[6], v1[2], v1[3], v1[4], v1[5], a1);
}

{
  uint64_t *v1;

  return implicit closure #1 in View.fileExporter<A>(isPresented:document:contentType:defaultFilename:onCompletion:)(v1[6], v1[2], v1[3], v1[4], v1[5], a1);
}

uint64_t partial apply for implicit closure #1 in View.fileExporter<A>(isPresented:documents:contentType:onCompletion:)(void (*a1)(char *, char *), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v10[2] = v8[2];
  return _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF(a1, (uint64_t)v10, v8[3], (uint64_t)&type metadata for AnyFileDocument, MEMORY[0x1E4FBC248], v8[5], MEMORY[0x1E4FBC278], a8);
}

uint64_t get_witness_table_7SwiftUI4ViewRzAA12FileDocumentRd__r__lAA15ModifiedContentVyxAA0D19DialogConfigurationVyAA0D15ExportOperationV3KeyVAIGGAaBHPxAaBHD1__AlA0C8ModifierHPyHCHCTm()
{
  return swift_getWitnessTable();
}

uint64_t sub_188256760()
{
  return swift_getWitnessTable();
}

uint64_t (*partial apply for implicit closure #2 in implicit closure #1 in View.fileExporter<A>(isPresented:documents:contentTypes:onCompletion:onCancellation:)@<X0>(uint64_t (**a1)(uint64_t a1)@<X8>))(uint64_t a1)
{
  return partial apply for implicit closure #2 in implicit closure #1 in View.fileExporter<A>(isPresented:documents:contentTypes:onCompletion:onCancellation:)(a1);
}

{
  uint64_t v1;

  return implicit closure #2 in implicit closure #1 in View.fileExporter<A>(isPresented:documents:contentType:onCompletion:)(*(void *)(v1 + 48), a1);
}

uint64_t (*partial apply for implicit closure #2 in implicit closure #1 in View.fileExporter<A>(isPresented:documents:contentTypes:onCompletion:onCancellation:)@<X0>(uint64_t a1@<X0>, uint64_t (**a2)()@<X8>))()
{
  return partial apply for implicit closure #2 in implicit closure #1 in View.fileExporter<A>(isPresented:documents:contentTypes:onCompletion:onCancellation:)(a1, a2);
}

{
  uint64_t v2;
  uint64_t v5;
  uint64_t AssociatedTypeWitness;
  uint64_t (*result)();
  uint64_t (*v8)();
  uint64_t (*v9)();

  uint64_t v5 = *(void *)(v2 + 48);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t result = specialized AnyFileDocument.init<A>(_:)(a1, AssociatedTypeWitness, v5);
  *a2 = result;
  a2[1] = v8;
  a2[2] = v9;
  return result;
}

uint64_t (*partial apply for implicit closure #2 in implicit closure #1 in View.fileExporter<A>(isPresented:document:contentTypes:defaultFilename:onCompletion:onCancellation:)@<X0>(uint64_t (**a1)(uint64_t a1)@<X8>))(uint64_t a1)
{
  return partial apply for implicit closure #2 in implicit closure #1 in View.fileExporter<A>(isPresented:document:contentTypes:defaultFilename:onCompletion:onCancellation:)(a1);
}

{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*result)(uint64_t);
  uint64_t (*v7)(uint64_t);
  uint64_t (*v8)(uint64_t);

  int v3 = *(void *)(v1 + 24);
  uint64_t v4 = *(void *)(v1 + 40);
  uint64_t v5 = swift_unknownObjectRetain();
  uint64_t result = AnyFileDocument.init<A>(_:)(v5, v3, v4);
  *a1 = result;
  a1[1] = v7;
  a1[2] = v8;
  return result;
}

uint64_t (*partial apply for implicit closure #2 in implicit closure #1 in View.fileExporter<A>(isPresented:document:contentTypes:defaultFilename:onCompletion:onCancellation:)@<X0>(uint64_t a1@<X0>, uint64_t (**a2)()@<X8>))()
{
  return partial apply for implicit closure #2 in implicit closure #1 in View.fileExporter<A>(isPresented:document:contentTypes:defaultFilename:onCompletion:onCancellation:)(a1, a2);
}

{
  uint64_t v2;
  uint64_t (*result)();
  uint64_t (*v5)();
  uint64_t (*v6)();

  uint64_t result = specialized AnyFileDocument.init<A>(_:)(a1, *(void *)(v2 + 24), *(void *)(v2 + 40));
  *a2 = result;
  a2[1] = v5;
  a2[2] = v6;
  return result;
}

uint64_t partial apply for closure #1 in View._fileExporter(isPresented:item:contentTypes:defaultFilename:onCompletion:onCancellation:)(uint64_t a1)
{
  return partial apply for closure #1 in View._fileExporter(isPresented:item:contentTypes:defaultFilename:onCompletion:onCancellation:)(a1, (uint64_t (*)(uint64_t, void, void, void, void, void))closure #1 in View._fileExporter(isPresented:item:contentTypes:defaultFilename:onCompletion:onCancellation:));
}

uint64_t partial apply for closure #2 in View._fileExporter(isPresented:items:contentTypes:onCompletion:onCancellation:)()
{
  return closure #2 in View._fileImporter(isPresented:allowedContentTypes:allowsMultipleSelection:onCompletion:onCancellation:)(*(void *)(v0 + 16), *(void *)(v0 + 24), *(unsigned __int8 *)(v0 + 32), *(uint64_t (**)(uint64_t))(v0 + 40));
}

void type metadata accessor for Result<URL, Error>?(uint64_t a1)
{
}

uint64_t outlined init with copy of FileExportOperation?(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t _s7SwiftUI23FileDialogConfigurationVyAA0C15ExportOperationV3KeyVAEGWOhTm_0(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

void partial apply for closure #1 in View._fileExporter(isPresented:items:contentTypes:onCompletion:onCancellation:)(void *a1, unsigned __int8 a2)
{
  closure #1 in View._fileImporter(isPresented:allowedContentTypes:allowsMultipleSelection:onCompletion:onCancellation:)(a1, a2, *(void *)(v2 + 16), *(void *)(v2 + 24), *(unsigned __int8 *)(v2 + 32), *(void (**)(void *, void))(v2 + 40));
}

uint64_t lazy protocol witness table accessor for type FileDialogConfiguration<FileExportOperation.Key, FileExportOperation> and conformance FileDialogConfiguration<A, B>(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t outlined consume of AnyFileDocument?(uint64_t result)
{
  if (result)
  {
    swift_release();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t outlined copy of AnyFileDocument?(uint64_t result)
{
  if (result)
  {
    swift_retain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t partial apply for closure #1 in View._fileExporter(isPresented:item:contentTypes:defaultFilename:onCompletion:onCancellation:)(uint64_t a1, uint64_t (*a2)(uint64_t, void, void, void, void, void))
{
  return a2(a1, *(void *)(v2 + 16), *(void *)(v2 + 24), *(unsigned __int8 *)(v2 + 32), *(void *)(v2 + 40), *(void *)(v2 + 48));
}

uint64_t outlined init with take of FileExportOperation?(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

void type metadata accessor for _ContiguousArrayStorage<UTType>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

uint64_t ScenePresentationBridge.__deallocating_deinit()
{
  swift_release();
  swift_unknownObjectWeakDestroy();

  return swift_deallocClassInstance();
}

void HoverEffectContent.animation<A>(_:body:)()
{
}

void static CustomHoverEffectPhase.active.getter()
{
}

void CustomHoverEffectPhase.hash(into:)()
{
}

void static CustomHoverEffectPhase.== infix(_:_:)()
{
}

void CustomHoverEffectPhase.hashValue.getter()
{
}

void CustomHoverEffect.animation(_:to:)()
{
}

void static CustomHoverEffectPhase.active.setter()
{
}

unint64_t lazy protocol witness table accessor for type CustomHoverEffectPhase and conformance CustomHoverEffectPhase()
{
  unint64_t result = lazy protocol witness table cache variable for type CustomHoverEffectPhase and conformance CustomHoverEffectPhase;
  if (!lazy protocol witness table cache variable for type CustomHoverEffectPhase and conformance CustomHoverEffectPhase)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CustomHoverEffectPhase and conformance CustomHoverEffectPhase);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for CustomHoverEffectPhase(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x188256EF0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CustomHoverEffectPhase()
{
  return &type metadata for CustomHoverEffectPhase;
}

uint64_t sub_188256F28(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

uint64_t sub_188256F30(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

void static CustomHoverEffectPhase.inactive.getter()
{
}

uint64_t dispatch thunk of HelpStyle.makeBody(configuration:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t *initializeBufferWithCopyOfBuffer for HelpView(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  unsigned int v4 = a1;
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  int v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0 || ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 32 > 0x18)
  {
    uint64_t v9 = *a2;
    *unsigned int v4 = *a2;
    unsigned int v4 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
    swift_retain();
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    unint64_t v10 = ((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v11 = ((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v12 = *(void *)v11;
    uint64_t v13 = *(void *)(v11 + 8);
    char v14 = *(unsigned char *)(v11 + 16);
    outlined copy of Text.Storage(*(void *)v11, v13, v14);
    *(void *)unint64_t v10 = v12;
    *(void *)(v10 + 8) = v13;
    *(unsigned char *)(v10 + 16) = v14;
    *(void *)(v10 + 24) = *(void *)(v11 + 24);
    swift_bridgeObjectRetain();
  }
  return v4;
}

uint64_t assignWithTake for HelpView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 40;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 24) + 7;
  unint64_t v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  LOBYTE(v6) = *(unsigned char *)(v8 + 16);
  uint64_t v9 = *(void *)v7;
  uint64_t v10 = *(void *)(v7 + 8);
  char v11 = *(unsigned char *)(v7 + 16);
  *(_OWORD *)unint64_t v7 = *(_OWORD *)v8;
  *(unsigned char *)(v7 + 16) = v6;
  outlined consume of Text.Storage(v9, v10, v11);
  *(void *)(v7 + 24) = *(void *)(v8 + 24);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t HelpStyleModifier.styleBody(configuration:)(long long *a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 16);
  uint64_t v3 = *(void *)(a2 + 24);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v6 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  unint64_t v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v9);
  char v11 = (char *)&v16 - v10;
  char v12 = *((unsigned char *)a1 + 16);
  uint64_t v13 = *((void *)a1 + 3);
  long long v16 = *a1;
  char v17 = v12;
  uint64_t v18 = v13;
  (*(void (**)(long long *, uint64_t, uint64_t))(v3 + 24))(&v16, v4, v3);
  swift_getAssociatedConformanceWitness();
  static ViewBuilder.buildExpression<A>(_:)(v8);
  char v14 = *(void (**)(char *, uint64_t))(v6 + 8);
  v14(v8, AssociatedTypeWitness);
  static ViewBuilder.buildExpression<A>(_:)(v11);
  return ((uint64_t (*)(char *, uint64_t))v14)(v11, AssociatedTypeWitness);
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance HelpStyleModifier<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F40FDF88](a1, a2, a3, a4, a5, WitnessTable);
}

uint64_t protocol witness for static ViewModifier._viewListCount(inputs:body:) in conformance HelpStyleModifier<A>()
{
  return static StyleModifier._viewListCount(inputs:body:)();
}

uint64_t protocol witness for StyleableView.configuration.getter in conformance ResolvedHelpStyle@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *(void *)v1;
  uint64_t v3 = *(void *)(v1 + 8);
  char v4 = *(unsigned char *)(v1 + 16);
  uint64_t v5 = *(void *)(v1 + 24);
  *(void *)a1 = *(void *)v1;
  *(void *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 16) = v4;
  *(void *)(a1 + 24) = v5;
  outlined copy of Text.Storage(v2, v3, v4);

  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance ResolvedHelpStyle(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = lazy protocol witness table accessor for type ResolvedHelpStyle and conformance ResolvedHelpStyle();

  return MEMORY[0x1F40FDF90](a1, a2, a3, v6);
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance ResolvedHelpStyle()
{
  return static StyleableView._viewListCount(inputs:)();
}

__n128 protocol witness for View.body.getter in conformance ResolvedHelpStyle@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *(void *)v1;
  uint64_t v4 = *(void *)(v1 + 8);
  char v5 = *(unsigned char *)(v1 + 16);
  uint64_t v6 = *(void *)(v1 + 24);
  type metadata accessor for _ContiguousArrayStorage<Text>();
  uint64_t v7 = swift_allocObject();
  *(_OWORD *)(v7 + 16) = xmmword_18834BB80;
  *(void *)(v7 + 32) = v3;
  *(void *)(v7 + 40) = v4;
  *(unsigned char *)(v7 + 48) = v5;
  *(void *)(v7 + 56) = v6;
  outlined copy of Text.Storage(v3, v4, v5);
  swift_bridgeObjectRetain();
  outlined copy of Text.Storage(v3, v4, v5);
  swift_bridgeObjectRetain();
  specialized View.accessibility<A>(_:_:isEnabled:)(v7, 1, v3, v4, v5, v6, (uint64_t)&v11);
  swift_bridgeObjectRelease();
  outlined consume of Text.Storage(v3, v4, v5);
  swift_bridgeObjectRelease();
  char v8 = v12;
  uint64_t v9 = v14;
  __n128 result = v13;
  *(_OWORD *)a1 = v11;
  *(unsigned char *)(a1 + 16) = v8;
  *(__n128 *)(a1 + 24) = result;
  *(void *)(a1 + 40) = v9;
  return result;
}

uint64_t sub_18825761C()
{
  return swift_getWitnessTable();
}

void type metadata accessor for _ContiguousArrayStorage<Text>()
{
  if (!lazy cache variable for type metadata for _ContiguousArrayStorage<Text>)
  {
    unint64_t v0 = type metadata accessor for _ContiguousArrayStorage();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Text>);
    }
  }
}

uint64_t protocol witness for HelpStyle.makeBody(configuration:) in conformance DefaultHelpStyle@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *(void *)a1;
  uint64_t v2 = *(void *)(a1 + 8);
  char v4 = *(unsigned char *)(a1 + 16);
  uint64_t v5 = *(void *)(a1 + 24);
  *(void *)a2 = *(void *)a1;
  *(void *)(a2 + 8) = v2;
  *(unsigned char *)(a2 + 16) = v4;
  *(void *)(a2 + 24) = v5;
  outlined copy of Text.Storage(v3, v2, v4);

  return swift_bridgeObjectRetain();
}

uint64_t getEnumTagSinglePayload for HelpStyleModifier(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (!a2) {
    return 0;
  }
  unsigned int v7 = a2 - v5;
  if (a2 <= v5) {
    goto LABEL_19;
  }
  char v8 = 8 * v6;
  if (v6 <= 3)
  {
    unsigned int v10 = ((v7 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      int v9 = *(_DWORD *)((char *)a1 + v6);
      if (!v9) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      int v9 = *(unsigned __int16 *)((char *)a1 + v6);
      if (!*(unsigned __int16 *)((char *)a1 + v6)) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_19:
      if (v5) {
        return (*(uint64_t (**)(void))(v4 + 48))();
      }
      return 0;
    }
  }
  int v9 = *((unsigned __int8 *)a1 + v6);
  if (!*((unsigned char *)a1 + v6)) {
    goto LABEL_19;
  }
LABEL_11:
  int v11 = (v9 - 1) << v8;
  if (v6 > 3) {
    int v11 = 0;
  }
  if (v6)
  {
    if (v6 > 3) {
      LODWORD(v6) = 4;
    }
    switch((int)v6)
    {
      case 2:
        LODWORD(v6) = *a1;
        break;
      case 3:
        LODWORD(v6) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v6) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v6) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v5 + (v6 | v11) + 1;
}

void storeEnumTagSinglePayload for HelpStyleModifier(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = *(void *)(v6 + 64);
  BOOL v9 = a3 >= v7;
  unsigned int v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      unsigned int v14 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v14))
      {
        int v11 = 4;
      }
      else if (v14 >= 0x100)
      {
        int v11 = 2;
      }
      else
      {
        int v11 = v14 > 1;
      }
    }
    else
    {
      int v11 = 1;
    }
  }
  else
  {
    int v11 = 0;
  }
  if (v7 < a2)
  {
    unsigned int v12 = ~v7 + a2;
    if (v8 < 4)
    {
      int v13 = (v12 >> (8 * v8)) + 1;
      if (v8)
      {
        int v15 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if (v8 == 3)
        {
          *(_WORD *)a1 = v15;
          a1[2] = BYTE2(v15);
        }
        else if (v8 == 2)
        {
          *(_WORD *)a1 = v15;
        }
        else
        {
          *a1 = v15;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v12;
      int v13 = 1;
    }
    switch(v11)
    {
      case 1:
        a1[v8] = v13;
        return;
      case 2:
        *(_WORD *)&a1[v8] = v13;
        return;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v8] = v13;
        return;
      default:
        return;
    }
  }
  switch(v11)
  {
    case 1:
      a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 2:
      *(_WORD *)&a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 3:
LABEL_34:
      __break(1u);
      JUMPOUT(0x188257ACCLL);
    case 4:
      *(_DWORD *)&a1[v8] = 0;
      goto LABEL_20;
    default:
LABEL_20:
      if (a2)
      {
LABEL_21:
        long long v16 = *(void (**)(void))(v6 + 56);
        v16();
      }
      return;
  }
}

uint64_t sub_188257AF4()
{
  return lazy protocol witness table accessor for type ModifiedContent<HelpView<HelpStyleConfiguration.Content>, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<HelpView<HelpStyleConfiguration.Content>, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<HelpView<HelpStyleConfiguration.Content>, AccessibilityAttachmentModifier>, (void (*)(void))lazy protocol witness table accessor for type HelpView<HelpStyleConfiguration.Content> and conformance HelpView<A>);
}

uint64_t sub_188257B44()
{
  swift_getAssociatedTypeWitness();

  return swift_getAssociatedConformanceWitness();
}

uint64_t sub_188257BB8()
{
  return lazy protocol witness table accessor for type ModifiedContent<HelpView<HelpStyleConfiguration.Content>, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<HelpView<HelpStyleConfiguration.Content>, HelpStyleModifier<TooltipHelpStyle>>, HelpStyleModifier<EmptyHelpStyle>> and conformance <> ModifiedContent<A, B>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<HelpView<HelpStyleConfiguration.Content>, HelpStyleModifier<TooltipHelpStyle>>, HelpStyleModifier<EmptyHelpStyle>>, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<HelpView<HelpStyleConfiguration.Content>, HelpStyleModifier<TooltipHelpStyle>> and conformance <> ModifiedContent<A, B>);
}

uint64_t associated type witness table accessor for HelpStyle.Body : View in EmptyHelpStyle()
{
  return swift_getOpaqueTypeConformance2();
}

_UNKNOWN **sub_188257C24()
{
  return &protocol witness table for HelpStyleConfiguration.Content;
}

uint64_t ModifiedContent<>.accessibilityAddTraits(_:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  swift_bridgeObjectRetain();
  AccessibilityTraitSet.init(traits:)();
  v6[0] = v7;
  v6[1] = v7;
  uint64_t v4 = lazy protocol witness table accessor for type AccessibilityNullableOptionSet<AccessibilityTraitSet> and conformance AccessibilityNullableOptionSet<A>(&lazy protocol witness table cache variable for type AccessibilityNullableOptionSet<AccessibilityTraitSet> and conformance AccessibilityNullableOptionSet<A>);
  return ModifiedContent<>.update<A>(_:combining:isEnabled:)(MEMORY[0x1E4F40BA8], (uint64_t)v6, 1, a1, MEMORY[0x1E4F40BA8], MEMORY[0x1E4F40BA0], v4, a2);
}

uint64_t ModifiedContent<>.accessibilityAddTraits(_:)@<X0>(unsigned __int8 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unsigned int v5 = *a1;
  if (v5 >= 0x40) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = 1 << v5;
  }
  v9[0] = v6;
  v9[1] = v6;
  uint64_t v7 = lazy protocol witness table accessor for type AccessibilityNullableOptionSet<AccessibilityTraitSet> and conformance AccessibilityNullableOptionSet<A>(&lazy protocol witness table cache variable for type AccessibilityNullableOptionSet<AccessibilityTraitSet> and conformance AccessibilityNullableOptionSet<A>);
  return ModifiedContent<>.update<A>(_:combining:isEnabled:)(MEMORY[0x1E4F40BA8], (uint64_t)v9, 1, a2, MEMORY[0x1E4F40BA8], MEMORY[0x1E4F40BA0], v7, a3);
}

uint64_t AccessibilityNullableOptionSet<>.automationType.getter()
{
  unint64_t v1 = *v0;
  if (one-time initialization token for automationTypeMap != -1) {
    swift_once();
  }
  uint64_t v2 = *((void *)automationTypeMap + 2);
  if (!v2) {
    return 0;
  }
  for (uint64_t i = (char *)automationTypeMap + 40; ; i += 16)
  {
    unint64_t v4 = *(i - 8);
    if (v4 >= 0x40 || ((v1 >> v4) & 1) != 0) {
      break;
    }
    if (!--v2) {
      return 0;
    }
  }
  return *(void *)i;
}

void AccessibilityTraitStorageProxy.init()(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

BOOL static AccessibilityTraitStorageProxy.== infix(_:_:)(void *a1, void *a2)
{
  return *a1 == *a2 && a1[1] == a2[1];
}

BOOL AccessibilityTraitStorageProxy.isDefault.getter()
{
  return *v0 == 0;
}

char *AccessibilityTraitStorageProxy.uv_descriptions.getter()
{
  unint64_t v1 = *v0;
  uint64_t v2 = static AccessibilityTrait.allCases.getter();
  uint64_t v3 = *(void *)(v2 + 16);
  if (v3)
  {
    swift_bridgeObjectRetain();
    uint64_t v4 = 0;
    unsigned int v5 = (char *)MEMORY[0x1E4FBC860];
    do
    {
      unsigned int v7 = *(unsigned __int8 *)(v2 + v4 + 32);
      if (v7 > 0x3F || ((v1 >> v7)) && ((1 << v7) & 0x13C07FFF) != 0)
      {
        v8._countAndFlagsBits = String.init<A>(describing:)();
        String.append(_:)(v8);
        swift_bridgeObjectRelease();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          unsigned int v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v5 + 2) + 1, 1, v5);
        }
        unint64_t v10 = *((void *)v5 + 2);
        unint64_t v9 = *((void *)v5 + 3);
        if (v10 >= v9 >> 1) {
          unsigned int v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v9 > 1), v10 + 1, 1, v5);
        }
        *((void *)v5 + 2) = v10 + 1;
        uint64_t v6 = &v5[16 * v10];
        *((void *)v6 + 4) = 46;
        *((void *)v6 + 5) = 0xE100000000000000;
      }
      ++v4;
    }
    while (v3 != v4);
    swift_bridgeObjectRelease_n();
  }
  else
  {
    swift_bridgeObjectRelease();
    return (char *)MEMORY[0x1E4FBC860];
  }
  return v5;
}

void AccessibilityTraitStorageProxy.hash(into:)()
{
  Swift::UInt64 v1 = v0[1];
  Hasher._combine(_:)(*v0);
  Hasher._combine(_:)(v1);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AccessibilityTraitStorageProxy.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type AccessibilityTraitStorageProxy.CodingKeys and conformance AccessibilityTraitStorageProxy.CodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AccessibilityTraitStorageProxy.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type AccessibilityTraitStorageProxy.CodingKeys and conformance AccessibilityTraitStorageProxy.CodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t AccessibilityTraitStorageProxy.encode(to:)(void *a1)
{
  type metadata accessor for KeyedEncodingContainer<AccessibilityTraitStorageProxy.CodingKeys>(0, &lazy cache variable for type metadata for KeyedEncodingContainer<AccessibilityTraitStorageProxy.CodingKeys>, MEMORY[0x1E4FBBDE0]);
  uint64_t v4 = v3;
  uint64_t v5 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  unsigned int v7 = (char *)v11 - v6;
  uint64_t v9 = *v1;
  uint64_t v8 = v1[1];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type AccessibilityTraitStorageProxy.CodingKeys and conformance AccessibilityTraitStorageProxy.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v11[0] = v9;
  v11[1] = v8;
  type metadata accessor for AccessibilityNullableOptionSet<AccessibilityTraitSet>();
  lazy protocol witness table accessor for type AccessibilityNullableOptionSet<AccessibilityTraitSet> and conformance AccessibilityNullableOptionSet<A>(&lazy protocol witness table cache variable for type AccessibilityNullableOptionSet<AccessibilityTraitSet> and conformance AccessibilityNullableOptionSet<A>);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

Swift::Int AccessibilityTraitStorageProxy.hashValue.getter()
{
  Swift::UInt64 v1 = *v0;
  Swift::UInt64 v2 = v0[1];
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

uint64_t AccessibilityTraitStorageProxy.init(from:)@<X0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  type metadata accessor for KeyedEncodingContainer<AccessibilityTraitStorageProxy.CodingKeys>(0, &lazy cache variable for type metadata for KeyedDecodingContainer<AccessibilityTraitStorageProxy.CodingKeys>, MEMORY[0x1E4FBBDC0]);
  uint64_t v6 = v5;
  uint64_t v7 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v9 = (char *)&v11 - v8;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type AccessibilityTraitStorageProxy.CodingKeys and conformance AccessibilityTraitStorageProxy.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    type metadata accessor for AccessibilityNullableOptionSet<AccessibilityTraitSet>();
    lazy protocol witness table accessor for type AccessibilityNullableOptionSet<AccessibilityTraitSet> and conformance AccessibilityNullableOptionSet<A>((unint64_t *)&lazy protocol witness table cache variable for type AccessibilityNullableOptionSet<AccessibilityTraitSet> and conformance AccessibilityNullableOptionSet<A>);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    *a2 = v11;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AccessibilityTraitStorageProxy()
{
  Swift::UInt64 v1 = *v0;
  Swift::UInt64 v2 = v0[1];
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance AccessibilityTraitStorageProxy()
{
  Swift::UInt64 v1 = v0[1];
  Hasher._combine(_:)(*v0);
  Hasher._combine(_:)(v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AccessibilityTraitStorageProxy()
{
  Swift::UInt64 v1 = *v0;
  Swift::UInt64 v2 = v0[1];
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

uint64_t protocol witness for Decodable.init(from:) in conformance AccessibilityTraitStorageProxy@<X0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  return AccessibilityTraitStorageProxy.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance AccessibilityTraitStorageProxy(void *a1)
{
  return AccessibilityTraitStorageProxy.encode(to:)(a1);
}

void one-time initialization function for automationTypeMap()
{
  automationTypeMap = &outlined read-only object #0 of one-time initialization function for automationTypeMap;
}

uint64_t View.accessibility(addTraits:)(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *a1;
  return View.accessibilityAddTraits(_:)(&v4, a2, a3);
}

uint64_t View.accessibility(removeTraits:)(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *a1;
  return View.accessibilityRemoveTraits(_:)(&v4, a2, a3);
}

uint64_t ModifiedContent<>.accessibility(addTraits:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = *a1;
  return ModifiedContent<>.accessibilityAddTraits(_:)(&v4, a2, a3);
}

uint64_t ModifiedContent<>.accessibility(removeTraits:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = *a1;
  return ModifiedContent<>.accessibilityRemoveTraits(_:)(&v4, a2, a3);
}

void type metadata accessor for KeyedEncodingContainer<AccessibilityTraitStorageProxy.CodingKeys>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, void *, unint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = lazy protocol witness table accessor for type AccessibilityTraitStorageProxy.CodingKeys and conformance AccessibilityTraitStorageProxy.CodingKeys();
    unint64_t v7 = a3(a1, &unk_1ED458390, v6);
    if (!v8) {
      atomic_store(v7, a2);
    }
  }
}

ValueMetadata *type metadata accessor for AccessibilityTraitStorageProxy()
{
  return &type metadata for AccessibilityTraitStorageProxy;
}

unsigned char *storeEnumTagSinglePayload for AccessibilityTraitStorageProxy.CodingKeys(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *__n128 result = a2;
        return result;
      case 2:
        *(_WORD *)__n128 result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)__n128 result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *__n128 result = 0;
      break;
    case 2:
      *(_WORD *)__n128 result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x18825879CLL);
    case 4:
      *(_DWORD *)__n128 result = 0;
      break;
    default:
      return result;
  }
  return result;
}

void *type metadata accessor for AccessibilityTraitStorageProxy.CodingKeys()
{
  return &unk_1ED458390;
}

uint64_t View.navigationSplitViewExtraWidePrimaryColumn()()
{
  return View._trait<A>(_:_:)();
}

uint64_t static NavigationSplitViewExtraWidePrimaryColumnTraitKey.defaultValue.getter()
{
  return 0;
}

uint64_t sub_1882588D4()
{
  return swift_getWitnessTable();
}

void type metadata accessor for _TraitWritingModifier<NavigationSplitViewExtraWidePrimaryColumnTraitKey>()
{
  if (!lazy cache variable for type metadata for _TraitWritingModifier<NavigationSplitViewExtraWidePrimaryColumnTraitKey>)
  {
    unint64_t v0 = type metadata accessor for _TraitWritingModifier();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _TraitWritingModifier<NavigationSplitViewExtraWidePrimaryColumnTraitKey>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type _TraitWritingModifier<NavigationSplitViewExtraWidePrimaryColumnTraitKey> and conformance _TraitWritingModifier<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type _TraitWritingModifier<NavigationSplitViewExtraWidePrimaryColumnTraitKey> and conformance _TraitWritingModifier<A>;
  if (!lazy protocol witness table cache variable for type _TraitWritingModifier<NavigationSplitViewExtraWidePrimaryColumnTraitKey> and conformance _TraitWritingModifier<A>)
  {
    type metadata accessor for _TraitWritingModifier<NavigationSplitViewExtraWidePrimaryColumnTraitKey>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _TraitWritingModifier<NavigationSplitViewExtraWidePrimaryColumnTraitKey> and conformance _TraitWritingModifier<A>);
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for SystemListCell(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  unsigned int v4 = a1;
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  int v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0 || ((((v6 + 31) & 0xFFFFFFFFFFFFFFF8) + 55) & 0xFFFFFFFFFFFFFFF8) + 9 > 0x18)
  {
    uint64_t v9 = *a2;
    *unsigned int v4 = *a2;
    unsigned int v4 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
    swift_retain();
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    unint64_t v10 = ((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v11 = ((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
    *(void *)unint64_t v10 = *(void *)v11;
    *(void *)(v10 + 8) = *(void *)(v11 + 8);
    *(unsigned char *)(v10 + 16) = *(unsigned char *)(v11 + 16);
    unint64_t v12 = ((unint64_t)v4 + v6 + 31) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v13 = ((unint64_t)a2 + v6 + 31) & 0xFFFFFFFFFFFFFFF8;
    *(unsigned char *)unint64_t v12 = *(unsigned char *)v13;
    *(void *)(v12 + 8) = *(void *)(v13 + 8);
    unint64_t v14 = (v12 + 23) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v15 = (v13 + 23) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v16 = *(void *)v15;
    char v17 = *(unsigned char *)(v15 + 8);
    swift_retain();
    swift_retain();
    swift_retain();
    outlined copy of Environment<Bool>.Content(v16, v17);
    *(void *)unint64_t v14 = v16;
    *(unsigned char *)(v14 + 8) = v17;
    unint64_t v18 = (v12 + 39) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v19 = (v13 + 39) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v20 = *(void *)v19;
    char v21 = *(unsigned char *)(v19 + 8);
    outlined copy of Environment<Bool>.Content(*(void *)v19, v21);
    *(void *)unint64_t v18 = v20;
    *(unsigned char *)(v18 + 8) = v21;
    unint64_t v22 = (v12 + 55) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v23 = (v13 + 55) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v24 = *(void *)v23;
    char v25 = *(unsigned char *)(v23 + 8);
    outlined copy of Environment<Bool>.Content(*(void *)v23, v25);
    *(void *)unint64_t v22 = v24;
    *(unsigned char *)(v22 + 8) = v25;
  }
  return v4;
}

uint64_t destroy for SystemListCell(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(*(void *)(a2 + 16) - 8) + 8;
  (*(void (**)(void))v3)();
  uint64_t v4 = *(void *)(v3 + 56) + a1;
  swift_release();
  swift_release();
  unint64_t v5 = (v4 + 31) & 0xFFFFFFFFFFFFFFF8;
  swift_release();
  outlined consume of Environment<Bool>.Content(*(void *)((v5 + 23) & 0xFFFFFFFFFFFFFFF8), *(unsigned char *)(((v5 + 23) & 0xFFFFFFFFFFFFFFF8) + 8));
  outlined consume of Environment<Bool>.Content(*(void *)((v5 + 39) & 0xFFFFFFFFFFFFFFF8), *(unsigned char *)(((v5 + 39) & 0xFFFFFFFFFFFFFFF8) + 8));
  unint64_t v6 = (v5 + 55) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v7 = *(void *)v6;
  char v8 = *(unsigned char *)(v6 + 8);

  return outlined consume of Environment<Bool>.Content(v7, v8);
}

uint64_t initializeWithCopy for SystemListCell(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 16;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 48);
  uint64_t v7 = v6 + a1;
  uint64_t v8 = v6 + a2;
  unint64_t v9 = (v7 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v10 = (v8 + 7) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v9 = *(void *)v10;
  *(void *)(v9 + 8) = *(void *)(v10 + 8);
  *(unsigned char *)(v9 + 16) = *(unsigned char *)(v10 + 16);
  unint64_t v11 = (v7 + 31) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v12 = (v8 + 31) & 0xFFFFFFFFFFFFFFF8;
  *(unsigned char *)unint64_t v11 = *(unsigned char *)v12;
  *(void *)(v11 + 8) = *(void *)(v12 + 8);
  unint64_t v13 = (v11 + 23) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v14 = (v12 + 23) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v15 = *(void *)v14;
  char v16 = *(unsigned char *)(v14 + 8);
  swift_retain();
  swift_retain();
  swift_retain();
  outlined copy of Environment<Bool>.Content(v15, v16);
  *(void *)unint64_t v13 = v15;
  *(unsigned char *)(v13 + 8) = v16;
  unint64_t v17 = (v11 + 39) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v18 = (v12 + 39) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v19 = *(void *)v18;
  LOBYTE(v5) = *(unsigned char *)(v18 + 8);
  outlined copy of Environment<Bool>.Content(*(void *)v18, v5);
  *(void *)unint64_t v17 = v19;
  *(unsigned char *)(v17 + 8) = v5;
  unint64_t v20 = (v11 + 55) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v21 = (v12 + 55) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v22 = *(void *)v21;
  LOBYTE(v5) = *(unsigned char *)(v21 + 8);
  outlined copy of Environment<Bool>.Content(*(void *)v21, v5);
  *(void *)unint64_t v20 = v22;
  *(unsigned char *)(v20 + 8) = v5;
  return a1;
}

uint64_t assignWithCopy for SystemListCell(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 24;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 40);
  uint64_t v7 = v6 + a1;
  uint64_t v8 = v6 + a2;
  unint64_t v9 = (v6 + a1 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v10 = (v6 + a2 + 7) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v9 = *(void *)v10;
  swift_retain();
  swift_release();
  *(void *)(v9 + 8) = *(void *)(v10 + 8);
  swift_retain();
  swift_release();
  *(unsigned char *)(v9 + 16) = *(unsigned char *)(v10 + 16);
  unint64_t v11 = (v7 + 31) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v12 = (v8 + 31) & 0xFFFFFFFFFFFFFFF8;
  *(unsigned char *)unint64_t v11 = *(unsigned char *)v12;
  *(void *)(v11 + 8) = *(void *)(v12 + 8);
  swift_retain();
  swift_release();
  unint64_t v13 = (v11 + 23) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v14 = (v12 + 23) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v15 = *(void *)v14;
  LOBYTE(v7) = *(unsigned char *)(v14 + 8);
  outlined copy of Environment<Bool>.Content(*(void *)v14, v7);
  uint64_t v16 = *(void *)v13;
  char v17 = *(unsigned char *)(v13 + 8);
  *(void *)unint64_t v13 = v15;
  *(unsigned char *)(v13 + 8) = v7;
  outlined consume of Environment<Bool>.Content(v16, v17);
  unint64_t v18 = (v11 + 39) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v19 = (v12 + 39) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v20 = *(void *)v19;
  LOBYTE(v7) = *(unsigned char *)(v19 + 8);
  outlined copy of Environment<Bool>.Content(*(void *)v19, v7);
  uint64_t v21 = *(void *)v18;
  char v22 = *(unsigned char *)(v18 + 8);
  *(void *)unint64_t v18 = v20;
  *(unsigned char *)(v18 + 8) = v7;
  outlined consume of Environment<Bool>.Content(v21, v22);
  unint64_t v23 = (v11 + 55) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v24 = (v12 + 55) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v25 = *(void *)v24;
  LOBYTE(v7) = *(unsigned char *)(v24 + 8);
  outlined copy of Environment<Bool>.Content(*(void *)v24, v7);
  uint64_t v26 = *(void *)v23;
  char v27 = *(unsigned char *)(v23 + 8);
  *(void *)unint64_t v23 = v25;
  *(unsigned char *)(v23 + 8) = v7;
  outlined consume of Environment<Bool>.Content(v26, v27);
  return a1;
}

uint64_t initializeWithTake for SystemListCell(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 32;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 32);
  uint64_t v7 = v6 + a1;
  uint64_t v8 = v6 + a2;
  unint64_t v9 = (v7 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v10 = (v8 + 7) & 0xFFFFFFFFFFFFFFF8;
  char v11 = *(unsigned char *)(v10 + 16);
  *(_OWORD *)unint64_t v9 = *(_OWORD *)v10;
  *(unsigned char *)(v9 + 16) = v11;
  unint64_t v12 = (_OWORD *)((v7 + 31) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v13 = (_OWORD *)((v8 + 31) & 0xFFFFFFFFFFFFFFF8);
  *unint64_t v12 = *v13;
  unint64_t v14 = ((unint64_t)v12 + 23) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v15 = ((unint64_t)v13 + 23) & 0xFFFFFFFFFFFFFFF8;
  char v16 = *(unsigned char *)(v15 + 8);
  *(void *)unint64_t v14 = *(void *)v15;
  *(unsigned char *)(v14 + 8) = v16;
  unint64_t v17 = ((unint64_t)v12 + 39) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v18 = ((unint64_t)v13 + 39) & 0xFFFFFFFFFFFFFFF8;
  char v19 = *(unsigned char *)(v18 + 8);
  *(void *)unint64_t v17 = *(void *)v18;
  *(unsigned char *)(v17 + 8) = v19;
  unint64_t v20 = ((unint64_t)v12 + 55) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v21 = ((unint64_t)v13 + 55) & 0xFFFFFFFFFFFFFFF8;
  LOBYTE(v17) = *(unsigned char *)(v21 + 8);
  *(void *)unint64_t v20 = *(void *)v21;
  *(unsigned char *)(v20 + 8) = v17;
  return a1;
}

uint64_t assignWithTake for SystemListCell(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 40;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 24);
  uint64_t v7 = v6 + a1;
  uint64_t v8 = v6 + a2;
  unint64_t v9 = (v6 + a1 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v10 = (v8 + 7) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v9 = *(void *)v10;
  swift_release();
  *(void *)(v9 + 8) = *(void *)(v10 + 8);
  swift_release();
  *(unsigned char *)(v9 + 16) = *(unsigned char *)(v10 + 16);
  unint64_t v11 = (v7 + 31) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v12 = (v8 + 31) & 0xFFFFFFFFFFFFFFF8;
  *(unsigned char *)unint64_t v11 = *(unsigned char *)v12;
  *(void *)(v11 + 8) = *(void *)(v12 + 8);
  swift_release();
  unint64_t v13 = (v11 + 23) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v14 = (v12 + 23) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v15 = *(void *)v14;
  LOBYTE(v14) = *(unsigned char *)(v14 + 8);
  uint64_t v16 = *(void *)v13;
  char v17 = *(unsigned char *)(v13 + 8);
  *(void *)unint64_t v13 = v15;
  *(unsigned char *)(v13 + 8) = v14;
  outlined consume of Environment<Bool>.Content(v16, v17);
  unint64_t v18 = (v11 + 39) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v19 = (v12 + 39) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v20 = *(void *)v19;
  LOBYTE(v19) = *(unsigned char *)(v19 + 8);
  uint64_t v21 = *(void *)v18;
  char v22 = *(unsigned char *)(v18 + 8);
  *(void *)unint64_t v18 = v20;
  *(unsigned char *)(v18 + 8) = v19;
  outlined consume of Environment<Bool>.Content(v21, v22);
  unint64_t v23 = (v11 + 55) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v24 = (v12 + 55) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v25 = *(void *)v24;
  LOBYTE(v24) = *(unsigned char *)(v24 + 8);
  uint64_t v26 = *(void *)v23;
  char v27 = *(unsigned char *)(v23 + 8);
  *(void *)unint64_t v23 = v25;
  *(unsigned char *)(v23 + 8) = v24;
  outlined consume of Environment<Bool>.Content(v26, v27);
  return a1;
}

uint64_t getEnumTagSinglePayload for SystemListCell(unsigned __int8 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (v5 <= 0x7FFFFFFF) {
    unsigned int v7 = 0x7FFFFFFF;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  if (v7 < a2)
  {
    unint64_t v8 = ((((v6 + 31) & 0xFFFFFFFFFFFFFFF8) + 55) & 0xFFFFFFFFFFFFFFF8) + 9;
    unsigned int v9 = (a2 - v7 + 255) >> (8 * v8);
    if (v8 < 4) {
      unsigned int v10 = v9 + 1;
    }
    else {
      unsigned int v10 = 2;
    }
    if (v10 >= 0x10000) {
      unsigned int v11 = 4;
    }
    else {
      unsigned int v11 = 2;
    }
    if (v10 < 0x100) {
      unsigned int v11 = 1;
    }
    if (v10 >= 2) {
      uint64_t v12 = v11;
    }
    else {
      uint64_t v12 = 0;
    }
    switch(v12)
    {
      case 1:
        int v13 = a1[v8];
        if (!a1[v8]) {
          break;
        }
        goto LABEL_22;
      case 2:
        int v13 = *(unsigned __int16 *)&a1[v8];
        if (*(_WORD *)&a1[v8]) {
          goto LABEL_22;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x188259340);
      case 4:
        int v13 = *(_DWORD *)&a1[v8];
        if (!v13) {
          break;
        }
LABEL_22:
        int v15 = (v13 - 1) << (8 * v8);
        if (v8 >= 4) {
          int v15 = 0;
        }
        if (((((v6 + 31) & 0xFFFFFFF8) + 55) & 0xFFFFFFF8) == 0xFFFFFFF8) {
          int v16 = *a1;
        }
        else {
          int v16 = *(_DWORD *)a1;
        }
        return v7 + (v16 | v15) + 1;
      default:
        break;
    }
  }
  if (v5 >= 0x7FFFFFFF) {
    return (*(uint64_t (**)(void))(v4 + 48))();
  }
  unint64_t v17 = *(void *)(((unint64_t)&a1[v6 + 7] & 0xFFFFFFFFFFFFFFF8) + 8);
  if (v17 >= 0xFFFFFFFF) {
    LODWORD(v17) = -1;
  }
  return (v17 + 1);
}

void storeEnumTagSinglePayload for SystemListCell(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  size_t v10 = ((((v9 + 31) & 0xFFFFFFFFFFFFFFF8) + 55) & 0xFFFFFFFFFFFFFFF8) + 9;
  char v11 = 8 * v10;
  if (v8 >= a3)
  {
    int v15 = 0;
    if (v8 >= a2)
    {
LABEL_17:
      switch(v15)
      {
        case 1:
          a1[v10] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_34;
        case 2:
          *(_WORD *)&a1[v10] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_34;
        case 3:
          goto LABEL_46;
        case 4:
          *(_DWORD *)&a1[v10] = 0;
          goto LABEL_33;
        default:
LABEL_33:
          if (a2)
          {
LABEL_34:
            if (v7 < 0x7FFFFFFF)
            {
              unint64_t v21 = (unint64_t)&a1[v9 + 7] & 0xFFFFFFFFFFFFFFF8;
              if ((a2 & 0x80000000) != 0)
              {
                *(unsigned char *)(v21 + 16) = 0;
                *(void *)unint64_t v21 = a2 ^ 0x80000000;
                *(void *)(v21 + 8) = 0;
              }
              else
              {
                *(void *)(v21 + 8) = a2 - 1;
              }
            }
            else
            {
              uint64_t v20 = *(void (**)(void))(v6 + 56);
              v20();
            }
          }
          break;
      }
      return;
    }
  }
  else
  {
    unsigned int v12 = (a3 - v8 + 255) >> v11;
    if (v10 <= 3) {
      unsigned int v13 = v12 + 1;
    }
    else {
      unsigned int v13 = 2;
    }
    if (v13 >= 0x10000) {
      int v14 = 4;
    }
    else {
      int v14 = 2;
    }
    if (v13 < 0x100) {
      int v14 = 1;
    }
    if (v13 >= 2) {
      int v15 = v14;
    }
    else {
      int v15 = 0;
    }
    if (v8 >= a2) {
      goto LABEL_17;
    }
  }
  unsigned int v16 = ~v8 + a2;
  unsigned int v17 = (~(_BYTE)v8 + a2);
  if (v10 < 4) {
    int v18 = (v16 >> v11) + 1;
  }
  else {
    int v18 = 1;
  }
  if (v10 >= 4) {
    unsigned int v19 = v16;
  }
  else {
    unsigned int v19 = v17;
  }
  bzero(a1, v10);
  if (v10 == 1) {
    *a1 = v19;
  }
  else {
    *(_DWORD *)a1 = v19;
  }
  switch(v15)
  {
    case 1:
      a1[v10] = v18;
      break;
    case 2:
      *(_WORD *)&a1[v10] = v18;
      break;
    case 3:
LABEL_46:
      __break(1u);
      JUMPOUT(0x188259574);
    case 4:
      *(_DWORD *)&a1[v10] = v18;
      break;
    default:
      return;
  }
}

uint64_t type metadata accessor for SystemListCell()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t associated type witness table accessor for View.Body : View in SystemListCell<A>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t SystemListCell.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v120 = a2;
  uint64_t v96 = *(void *)(a1 + 16);
  uint64_t v98 = type metadata accessor for ModifiedContent();
  uint64_t v100 = *(void *)(v98 - 8);
  MEMORY[0x1F4188790](v98);
  uint64_t v94 = (char *)&v93 - v5;
  uint64_t v99 = type metadata accessor for ModifiedContent();
  uint64_t v101 = *(void *)(v99 - 8);
  MEMORY[0x1F4188790](v99);
  long long v97 = (char *)&v93 - v6;
  uint64_t v7 = type metadata accessor for ModifiedContent();
  uint64_t v102 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  unint64_t v121 = (uint64_t (*)(uint64_t))((char *)&v93 - v8);
  type metadata accessor for _BackgroundModifier<ModifiedContent<Color, _SafeAreaRegionsIgnoringLayout>>();
  uint64_t v103 = v7;
  uint64_t v9 = type metadata accessor for ModifiedContent();
  uint64_t v105 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9);
  uint64_t v104 = (char *)&v93 - v10;
  type metadata accessor for _BackgroundModifier<ModifiedContent<ModifiedContent<ModifiedContent<Color, _PaddingLayout>, _FrameLayout>, _AlignmentLayout>>();
  uint64_t v108 = v9;
  uint64_t v11 = type metadata accessor for ModifiedContent();
  uint64_t v109 = *(void *)(v11 - 8);
  MEMORY[0x1F4188790](v11);
  long long v106 = (char *)&v93 - v12;
  type metadata accessor for _ContentShapeModifier<Rectangle>();
  uint64_t v111 = v11;
  uint64_t v13 = type metadata accessor for ModifiedContent();
  uint64_t v112 = *(void *)(v13 - 8);
  MEMORY[0x1F4188790](v13);
  id v110 = (char *)&v93 - v14;
  _s7SwiftUI15ModifiedContentVyAA5ColorVAA30_SafeAreaRegionsIgnoringLayoutVGMaTm_0(255, &lazy cache variable for type metadata for AddGestureModifier<_ButtonGesture>, (uint64_t)&type metadata for _ButtonGesture, (uint64_t)&protocol witness table for _ButtonGesture, MEMORY[0x1E4F40248]);
  uint64_t v113 = v13;
  uint64_t v15 = type metadata accessor for ModifiedContent();
  uint64_t v115 = *(void *)(v15 - 8);
  MEMORY[0x1F4188790](v15);
  char v114 = (char *)&v93 - v16;
  uint64_t v116 = v17;
  uint64_t v18 = type metadata accessor for ModifiedContent();
  uint64_t v118 = *(void *)(v18 - 8);
  uint64_t v119 = v18;
  MEMORY[0x1F4188790](v18);
  uint64_t v117 = (char *)&v93 - v19;
  uint64_t v20 = *(void *)(a1 - 8);
  uint64_t v21 = *(void *)(v20 + 64);
  MEMORY[0x1F4188790](v22);
  unint64_t v23 = (char *)&v93 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v25 = MEMORY[0x1F4188790](v24);
  char v27 = (char *)&v93 - v26;
  uint64_t v122 = *(void (**)(char *, uint64_t, uint64_t, double))(v20 + 16);
  v122((char *)&v93 - v26, v3, a1, v25);
  unint64_t v28 = (*(unsigned __int8 *)(v20 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v20 + 80);
  uint64_t v95 = v28 + v21;
  uint64_t v29 = swift_allocObject();
  uint64_t v93 = *(void *)(a1 + 24);
  uint64_t v30 = v93;
  uint64_t v31 = v96;
  *(void *)(v29 + 16) = v96;
  *(void *)(v29 + 24) = v30;
  uint64_t v107 = v29;
  uint64_t v32 = *(void (**)(unint64_t, char *, uint64_t))(v20 + 32);
  v32(v29 + v28, v27, a1);
  uint64_t v33 = v124;
  ((void (*)(char *, uint64_t, uint64_t))v122)(v23, v124, a1);
  uint64_t v34 = swift_allocObject();
  uint64_t v35 = v31;
  uint64_t v36 = v93;
  *(void *)(v34 + 16) = v31;
  *(void *)(v34 + 24) = v36;
  uint64_t v122 = (void (*)(char *, uint64_t, uint64_t, double))v34;
  v32(v34 + v28, v23, a1);
  LOWORD(v135) = 768;
  uint64_t v37 = v94;
  uint64_t v38 = v36;
  MEMORY[0x18C113660](&v135, v35, MEMORY[0x1E4F3FE28], v36);
  uint64_t v39 = *(int *)(a1 + 44);
  uint64_t v123 = a1;
  uint64_t v40 = v33 + v39;
  uint64_t v41 = v33;
  uint64_t v42 = *(void *)v40;
  uint64_t v95 = v40;
  LOBYTE(v36) = *(unsigned char *)(v40 + 8);
  outlined copy of Environment<Bool>.Content(v42, v36);
  specialized Environment.wrappedValue.getter(v42, v36);
  outlined consume of Environment<Bool>.Content(v42, v36);
  uint64_t v43 = v33 + *(int *)(a1 + 48);
  uint64_t v44 = *(void *)v43;
  uint64_t v96 = v43;
  LOBYTE(v23) = *(unsigned char *)(v43 + 8);
  outlined copy of Environment<Bool>.Content(v44, (char)v23);
  specialized Environment.wrappedValue.getter(v44, (char)v23);
  outlined consume of Environment<Bool>.Content(v44, (char)v23);
  outlined copy of Environment<Bool>.Content(v42, v36);
  specialized Environment.wrappedValue.getter(v42, v36);
  outlined consume of Environment<Bool>.Content(v42, v36);
  uint64_t v150 = v38;
  uint64_t v151 = MEMORY[0x1E4F3FE20];
  uint64_t v45 = v98;
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v47 = v97;
  View.padding(_:)();
  (*(void (**)(char *, uint64_t))(v100 + 8))(v37, v45);
  LOWORD(v135) = 259;
  uint64_t v148 = WitnessTable;
  uint64_t v149 = MEMORY[0x1E4F3FA78];
  uint64_t v48 = v99;
  uint64_t v49 = swift_getWitnessTable();
  MEMORY[0x18C113660](&v135, v48, MEMORY[0x1E4F3FE28], v49);
  (*(void (**)(char *, uint64_t))(v101 + 8))(v47, v48);
  uint64_t v50 = (char *)(v41 + *(int *)(v123 + 40));
  char v51 = *v50;
  uint64_t v52 = *((void *)v50 + 1);
  LOBYTE(v135) = v51;
  *((void *)&v135 + 1) = v52;
  _s7SwiftUI5StateVySbGMaTm_3(0, (unint64_t *)&lazy cache variable for type metadata for State<Bool>, MEMORY[0x1E4FBB390], MEMORY[0x1E4F41580]);
  State.wrappedValue.getter();
  if (v152 == 1)
  {
    if (one-time initialization token for rowHighlightColor != -1) {
      swift_once();
    }
    uint64_t v53 = rowHighlightColor;
    swift_retain();
  }
  else
  {
    uint64_t v53 = static Color.clear.getter();
  }
  char v54 = static Edge.Set.horizontal.getter();
  *(void *)&long long v135 = v53;
  *((void *)&v135 + 1) = -1;
  LOBYTE(v136) = v54;
  static Alignment.center.getter();
  uint64_t v55 = MEMORY[0x1E4F41208];
  _s7SwiftUI15ModifiedContentVyAA5ColorVAA30_SafeAreaRegionsIgnoringLayoutVGMaTm_0(0, &lazy cache variable for type metadata for ModifiedContent<Color, _SafeAreaRegionsIgnoringLayout>, MEMORY[0x1E4F414E0], MEMORY[0x1E4F41208], MEMORY[0x1E4F3FBA0]);
  uint64_t v146 = v49;
  uint64_t v147 = MEMORY[0x1E4F3FE20];
  uint64_t v56 = v103;
  uint64_t v57 = swift_getWitnessTable();
  lazy protocol witness table accessor for type ModifiedContent<Color, _SafeAreaRegionsIgnoringLayout> and conformance <> ModifiedContent<A, B>((unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<Color, _SafeAreaRegionsIgnoringLayout> and conformance <> ModifiedContent<A, B>, &lazy cache variable for type metadata for ModifiedContent<Color, _SafeAreaRegionsIgnoringLayout>, v55);
  uint64_t v58 = v104;
  uint64_t v59 = v121;
  View.background<A>(_:alignment:)();
  swift_release();
  (*(void (**)(uint64_t (*)(uint64_t), uint64_t))(v102 + 8))(v59, v56);
  if (one-time initialization token for cellSeparatorColor != -1) {
    swift_once();
  }
  uint64_t v60 = cellSeparatorColor;
  uint64_t v61 = *(void *)v95;
  char v62 = *(unsigned char *)(v95 + 8);
  swift_retain();
  outlined copy of Environment<Bool>.Content(v61, v62);
  specialized Environment.wrappedValue.getter(v61, v62);
  outlined consume of Environment<Bool>.Content(v61, v62);
  EdgeInsets.init(_all:)();
  uint64_t v64 = v63;
  uint64_t v66 = v65;
  uint64_t v68 = v67;
  uint64_t v70 = v69;
  uint64_t v71 = *(void *)v96;
  char v72 = *(unsigned char *)(v96 + 8);
  outlined copy of Environment<Bool>.Content(*(void *)v96, v72);
  specialized Environment.wrappedValue.getter(v71, v72);
  outlined consume of Environment<Bool>.Content(v71, v72);
  static Alignment.center.getter();
  _FrameLayout.init(width:height:alignment:)();
  *(void *)&long long v135 = v60;
  BYTE8(v135) = 2;
  *(void *)&long long v136 = v64;
  *((void *)&v136 + 1) = v66;
  uint64_t v137 = v68;
  uint64_t v138 = v70;
  char v139 = 0;
  uint64_t v140 = v152;
  char v141 = v153;
  uint64_t v142 = v154;
  char v143 = v155;
  long long v144 = v156;
  __int16 v145 = 513;
  static Alignment.center.getter();
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<Color, _PaddingLayout>, _FrameLayout>, _AlignmentLayout>();
  uint64_t v73 = lazy protocol witness table accessor for type _BackgroundModifier<ModifiedContent<Color, _SafeAreaRegionsIgnoringLayout>> and conformance _BackgroundModifier<A>(&lazy protocol witness table cache variable for type _BackgroundModifier<ModifiedContent<Color, _SafeAreaRegionsIgnoringLayout>> and conformance _BackgroundModifier<A>, (void (*)(uint64_t))type metadata accessor for _BackgroundModifier<ModifiedContent<Color, _SafeAreaRegionsIgnoringLayout>>);
  uint64_t v133 = v57;
  uint64_t v134 = v73;
  uint64_t v74 = v108;
  uint64_t v75 = swift_getWitnessTable();
  lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<Color, _PaddingLayout>, _FrameLayout>, _AlignmentLayout> and conformance <> ModifiedContent<A, B>();
  uint64_t v76 = v106;
  View.background<A>(_:alignment:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v105 + 8))(v58, v74);
  uint64_t v77 = lazy protocol witness table accessor for type _BackgroundModifier<ModifiedContent<Color, _SafeAreaRegionsIgnoringLayout>> and conformance _BackgroundModifier<A>(&lazy protocol witness table cache variable for type _BackgroundModifier<ModifiedContent<ModifiedContent<ModifiedContent<Color, _PaddingLayout>, _FrameLayout>, _AlignmentLayout>> and conformance _BackgroundModifier<A>, (void (*)(uint64_t))type metadata accessor for _BackgroundModifier<ModifiedContent<ModifiedContent<ModifiedContent<Color, _PaddingLayout>, _FrameLayout>, _AlignmentLayout>>);
  uint64_t v131 = v75;
  uint64_t v132 = v77;
  uint64_t v78 = v111;
  uint64_t v79 = swift_getWitnessTable();
  unint64_t v80 = lazy protocol witness table accessor for type Rectangle and conformance Rectangle();
  id v81 = v110;
  View.contentShape<A>(_:eoFill:)(v80, 0, v78, MEMORY[0x1E4F41830], v79);
  (*(void (**)(char *, uint64_t))(v109 + 8))(v76, v78);
  *(void *)&long long v135 = partial apply for closure #1 in SystemListCell.body.getter;
  *((void *)&v135 + 1) = v107;
  unint64_t v121 = partial apply for closure #2 in SystemListCell.body.getter;
  *(void *)&long long v136 = partial apply for closure #2 in SystemListCell.body.getter;
  *((void *)&v136 + 1) = v122;
  uint64_t v137 = 0;
  LOBYTE(v138) = 1;
  uint64_t v129 = v79;
  uint64_t v130 = &protocol witness table for _ContentShapeModifier<A>;
  uint64_t v82 = v113;
  uint64_t v83 = swift_getWitnessTable();
  char v84 = v114;
  View.gesture<A>(_:including:)();
  (*(void (**)(char *, uint64_t))(v112 + 8))(v81, v82);
  uint64_t v85 = v124 + *(int *)(v123 + 52);
  uint64_t v86 = *(void *)v85;
  LOBYTE(v82) = *(unsigned char *)(v85 + 8);
  outlined copy of Environment<Bool>.Content(*(void *)v85, v82);
  specialized Environment.wrappedValue.getter(v86, v82);
  outlined consume of Environment<Bool>.Content(v86, v82);
  static Alignment.center.getter();
  unint64_t v87 = lazy protocol witness table accessor for type AddGestureModifier<_ButtonGesture> and conformance AddGestureModifier<A>();
  uint64_t v127 = v83;
  unint64_t v128 = v87;
  uint64_t v88 = v116;
  uint64_t v89 = swift_getWitnessTable();
  uint64_t v90 = v117;
  View.frame(width:height:alignment:)();
  (*(void (**)(char *, uint64_t))(v115 + 8))(v84, v88);
  swift_getKeyPath();
  long long v135 = xmmword_1883DDB70;
  long long v136 = xmmword_1883DDB70;
  uint64_t v125 = v89;
  uint64_t v126 = MEMORY[0x1E4F3F698];
  uint64_t v91 = v119;
  swift_getWitnessTable();
  View.environment<A>(_:_:)();
  swift_release();
  swift_release();
  outlined consume of (@escaping @callee_guaranteed (@unowned Bool) -> ())?(v121, v122);
  return (*(uint64_t (**)(char *, uint64_t))(v118 + 8))(v90, v91);
}

uint64_t closure #1 in SystemListCell.body.getter()
{
  return swift_release();
}

uint64_t closure #2 in SystemListCell.body.getter(uint64_t a1, uint64_t a2)
{
  uint64_t result = type metadata accessor for SystemListCell();
  if (*(void *)(a2 + *(int *)(result + 40) + 8))
  {
    swift_retain();
    dispatch thunk of AnyLocation.set(_:transaction:)();
    return swift_release();
  }
  return result;
}

void type metadata accessor for _BackgroundModifier<ModifiedContent<Color, _SafeAreaRegionsIgnoringLayout>>()
{
  if (!lazy cache variable for type metadata for _BackgroundModifier<ModifiedContent<Color, _SafeAreaRegionsIgnoringLayout>>)
  {
    uint64_t v0 = MEMORY[0x1E4F41208];
    _s7SwiftUI15ModifiedContentVyAA5ColorVAA30_SafeAreaRegionsIgnoringLayoutVGMaTm_0(255, &lazy cache variable for type metadata for ModifiedContent<Color, _SafeAreaRegionsIgnoringLayout>, MEMORY[0x1E4F414E0], MEMORY[0x1E4F41208], MEMORY[0x1E4F3FBA0]);
    lazy protocol witness table accessor for type ModifiedContent<Color, _SafeAreaRegionsIgnoringLayout> and conformance <> ModifiedContent<A, B>((unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<Color, _SafeAreaRegionsIgnoringLayout> and conformance <> ModifiedContent<A, B>, &lazy cache variable for type metadata for ModifiedContent<Color, _SafeAreaRegionsIgnoringLayout>, v0);
    unint64_t v1 = type metadata accessor for _BackgroundModifier();
    if (!v2) {
      atomic_store(v1, (unint64_t *)&lazy cache variable for type metadata for _BackgroundModifier<ModifiedContent<Color, _SafeAreaRegionsIgnoringLayout>>);
    }
  }
}

void type metadata accessor for _BackgroundModifier<ModifiedContent<ModifiedContent<ModifiedContent<Color, _PaddingLayout>, _FrameLayout>, _AlignmentLayout>>()
{
  if (!lazy cache variable for type metadata for _BackgroundModifier<ModifiedContent<ModifiedContent<ModifiedContent<Color, _PaddingLayout>, _FrameLayout>, _AlignmentLayout>>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<Color, _PaddingLayout>, _FrameLayout>, _AlignmentLayout>();
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<Color, _PaddingLayout>, _FrameLayout>, _AlignmentLayout> and conformance <> ModifiedContent<A, B>();
    unint64_t v0 = type metadata accessor for _BackgroundModifier();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _BackgroundModifier<ModifiedContent<ModifiedContent<ModifiedContent<Color, _PaddingLayout>, _FrameLayout>, _AlignmentLayout>>);
    }
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<Color, _PaddingLayout>, _FrameLayout>, _AlignmentLayout>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<Color, _PaddingLayout>, _FrameLayout>, _AlignmentLayout>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<Color, _PaddingLayout>, _FrameLayout>();
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<Color, _PaddingLayout>, _FrameLayout>, _AlignmentLayout>);
    }
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<Color, _PaddingLayout>, _FrameLayout>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<Color, _PaddingLayout>, _FrameLayout>)
  {
    _s7SwiftUI15ModifiedContentVyAA5ColorVAA30_SafeAreaRegionsIgnoringLayoutVGMaTm_0(255, &lazy cache variable for type metadata for ModifiedContent<Color, _PaddingLayout>, MEMORY[0x1E4F414E0], MEMORY[0x1E4F3FA80], MEMORY[0x1E4F3FBA0]);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<Color, _PaddingLayout>, _FrameLayout>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<Color, _PaddingLayout>, _FrameLayout>, _AlignmentLayout> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<Color, _PaddingLayout>, _FrameLayout>, _AlignmentLayout> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<Color, _PaddingLayout>, _FrameLayout>, _AlignmentLayout> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<Color, _PaddingLayout>, _FrameLayout>, _AlignmentLayout>();
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Color, _PaddingLayout>, _FrameLayout> and conformance <> ModifiedContent<A, B>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<Color, _PaddingLayout>, _FrameLayout>, _AlignmentLayout> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Color, _PaddingLayout>, _FrameLayout> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<Color, _PaddingLayout>, _FrameLayout> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<Color, _PaddingLayout>, _FrameLayout> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<Color, _PaddingLayout>, _FrameLayout>();
    lazy protocol witness table accessor for type ModifiedContent<Color, _SafeAreaRegionsIgnoringLayout> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<Color, _PaddingLayout> and conformance <> ModifiedContent<A, B>, &lazy cache variable for type metadata for ModifiedContent<Color, _PaddingLayout>, MEMORY[0x1E4F3FA80]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<Color, _PaddingLayout>, _FrameLayout> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<Color, _SafeAreaRegionsIgnoringLayout> and conformance <> ModifiedContent<A, B>(unint64_t *a1, unint64_t *a2, uint64_t a3)
{
  uint64_t result = *a1;
  if (!result)
  {
    _s7SwiftUI15ModifiedContentVyAA5ColorVAA30_SafeAreaRegionsIgnoringLayoutVGMaTm_0(255, a2, MEMORY[0x1E4F414E0], a3, MEMORY[0x1E4F3FBA0]);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t partial apply for closure #1 in SystemListCell.body.getter()
{
  type metadata accessor for SystemListCell();

  return closure #1 in SystemListCell.body.getter();
}

uint64_t partial apply for closure #2 in SystemListCell.body.getter(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for SystemListCell() - 8);
  uint64_t v4 = v1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));

  return closure #2 in SystemListCell.body.getter(a1, v4);
}

uint64_t one-time initialization function for cellSeparatorColor()
{
  char v1 = 0;
  uint64_t result = MEMORY[0x18C113940](&v1, 0.780392157, 0.780392157, 0.8, 1.0);
  cellSeparatorColor = result;
  return result;
}

uint64_t lazy protocol witness table accessor for type _BackgroundModifier<ModifiedContent<Color, _SafeAreaRegionsIgnoringLayout>> and conformance _BackgroundModifier<A>(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AddGestureModifier<_ButtonGesture> and conformance AddGestureModifier<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type AddGestureModifier<_ButtonGesture> and conformance AddGestureModifier<A>;
  if (!lazy protocol witness table cache variable for type AddGestureModifier<_ButtonGesture> and conformance AddGestureModifier<A>)
  {
    _s7SwiftUI15ModifiedContentVyAA5ColorVAA30_SafeAreaRegionsIgnoringLayoutVGMaTm_0(255, &lazy cache variable for type metadata for AddGestureModifier<_ButtonGesture>, (uint64_t)&type metadata for _ButtonGesture, (uint64_t)&protocol witness table for _ButtonGesture, MEMORY[0x1E4F40248]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AddGestureModifier<_ButtonGesture> and conformance AddGestureModifier<A>);
  }
  return result;
}

uint64_t sub_18825AACC@<X0>(void *a1@<X8>)
{
  uint64_t result = EnvironmentValues.defaultPadding.getter();
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v5;
  a1[3] = v6;
  return result;
}

uint64_t sub_18825AB0C()
{
  return EnvironmentValues.defaultPadding.setter();
}

uint64_t one-time initialization function for rowHighlightColor()
{
  uint64_t result = Color.init(_:white:opacity:)();
  rowHighlightColor = result;
  return result;
}

uint64_t sub_18825AB78()
{
  return swift_getWitnessTable();
}

uint64_t Shape.fill<A>(_:style:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a4 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v10 = MEMORY[0x1F4188790](v9);
  (*(void (**)(char *, uint64_t, double))(v12 + 16))((char *)&v15 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), v13, v10);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, a1, a4);
  return _ShapeView.init(shape:style:fillStyle:)();
}

void thunk for @escaping @callee_unowned @convention(block) (@unowned NSURL?, @unowned UIDocumentBrowserImportMode) -> ()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _s10Foundation3URLVSgMaTm_9(0, (unint64_t *)&lazy cache variable for type metadata for URL?, MEMORY[0x1E4F276F0], MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v8 = (char *)&v14 - v7;
  outlined init with copy of URL?(a1, (uint64_t)&v14 - v7);
  uint64_t v9 = type metadata accessor for URL();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v12 = 0;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) != 1)
  {
    URL._bridgeToObjectiveC()(v11);
    uint64_t v12 = v13;
    (*(void (**)(char *, uint64_t))(v10 + 8))(v8, v9);
  }
  (*(void (**)(uint64_t, void *, uint64_t))(a3 + 16))(a3, v12, a2);
}

uint64_t DocumentLaunchView.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v64 = a2;
  uint64_t v3 = *(void *)(a1 - 8);
  uint64_t v4 = *(void *)(v3 + 64);
  MEMORY[0x1F4188790](a1);
  uint64_t v59 = (char *)&v43 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *(void *)(v5 + 40);
  uint64_t v62 = *(void *)(v5 + 24);
  uint64_t v63 = v6;
  type metadata accessor for ResolvedDocumentLaunchView();
  type metadata accessor for _EnvironmentKeyWritingModifier<BackgroundContext>(255, &lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<BackgroundContext>, MEMORY[0x1E4F3FEC0], MEMORY[0x1E4F411E8]);
  type metadata accessor for ModifiedContent();
  uint64_t v7 = type metadata accessor for ModifiedContent();
  uint64_t v8 = *(void *)(a1 + 16);
  type metadata accessor for PrimitiveButtonStyleContainerModifier<PlatformItemListButtonStyle>();
  uint64_t v9 = type metadata accessor for ModifiedContent();
  unint64_t v10 = lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<BackgroundContext> and conformance _EnvironmentKeyWritingModifier<A>();
  v70[21] = &protocol witness table for ResolvedDocumentLaunchView<A>;
  v70[22] = v10;
  uint64_t v11 = MEMORY[0x1E4F3FBC0];
  v70[19] = swift_getWitnessTable();
  v70[20] = MEMORY[0x1E4F41200];
  uint64_t v12 = v7;
  uint64_t v57 = v7;
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v53 = WitnessTable;
  uint64_t v14 = *(void *)(a1 + 32);
  uint64_t v43 = a1;
  uint64_t v15 = lazy protocol witness table accessor for type UTType and conformance UTType((unint64_t *)&lazy protocol witness table cache variable for type PrimitiveButtonStyleContainerModifier<PlatformItemListButtonStyle> and conformance PrimitiveButtonStyleContainerModifier<A>, (void (*)(uint64_t))type metadata accessor for PrimitiveButtonStyleContainerModifier<PlatformItemListButtonStyle>);
  v70[17] = v14;
  v70[18] = v15;
  uint64_t v44 = v14;
  uint64_t v58 = v11;
  uint64_t v56 = v9;
  uint64_t v51 = swift_getWitnessTable();
  v70[11] = &type metadata for MultiButtonPlatformItemsStrategy;
  v70[12] = v12;
  v70[13] = v9;
  v70[14] = &protocol witness table for MultiButtonPlatformItemsStrategy;
  v70[15] = WitnessTable;
  v70[16] = v51;
  uint64_t v46 = type metadata accessor for PlatformItemsReader();
  uint64_t v60 = *(void *)(v46 - 8);
  MEMORY[0x1F4188790](v46);
  uint64_t v47 = (char *)&v43 - v16;
  uint64_t v17 = v8;
  uint64_t v50 = type metadata accessor for ModifiedContent();
  v70[9] = v14;
  v70[10] = MEMORY[0x1E4F3FA68];
  uint64_t v49 = swift_getWitnessTable();
  uint64_t v52 = type metadata accessor for _BackgroundModifier();
  uint64_t v18 = type metadata accessor for ModifiedContent();
  uint64_t v19 = *(void *)(v18 - 8);
  uint64_t v54 = v18;
  uint64_t v55 = v19;
  MEMORY[0x1F4188790](v18);
  uint64_t v45 = (char *)&v43 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v22 = MEMORY[0x1F4188790](v21);
  uint64_t v48 = (char *)&v43 - v23;
  uint64_t v24 = v3;
  double v25 = v59;
  uint64_t v26 = v61;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v3 + 16))(v59, v61, a1, v22);
  unint64_t v27 = (*(unsigned __int8 *)(v3 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  unint64_t v28 = (char *)swift_allocObject();
  uint64_t v30 = v62;
  uint64_t v29 = v63;
  *((void *)v28 + 2) = v17;
  *((void *)v28 + 3) = v30;
  uint64_t v31 = v43;
  uint64_t v32 = v44;
  *((void *)v28 + 4) = v44;
  *((void *)v28 + 5) = v29;
  uint64_t v33 = (*(uint64_t (**)(char *, char *, uint64_t))(v24 + 32))(&v28[v27], v25, v31);
  _OWORD v70[2] = v17;
  v70[3] = v30;
  v70[4] = v32;
  v70[5] = v29;
  uint64_t v34 = v26;
  v70[6] = v26;
  uint64_t v35 = v47;
  PlatformItemsReader.init(for:content:source:)(v33, (uint64_t)partial apply for closure #1 in DocumentLaunchView.body.getter, (uint64_t)v28, (uint64_t)partial apply for closure #2 in DocumentLaunchView.body.getter, (uint64_t)v70, (uint64_t)&type metadata for MultiButtonPlatformItemsStrategy, v57, v56, v47, (uint64_t)&protocol witness table for MultiButtonPlatformItemsStrategy, v53, v51);
  uint64_t v65 = v17;
  uint64_t v66 = v30;
  uint64_t v67 = v32;
  uint64_t v68 = v29;
  uint64_t v69 = v34;
  static Alignment.center.getter();
  uint64_t v37 = v45;
  uint64_t v36 = v46;
  View.background<A>(alignment:content:)();
  (*(void (**)(char *, uint64_t))(v60 + 8))(v35, v36);
  uint64_t v38 = swift_getWitnessTable();
  v70[7] = &protocol witness table for PlatformItemsReader<A, B, C>;
  v70[8] = v38;
  uint64_t v39 = v54;
  swift_getWitnessTable();
  uint64_t v40 = v48;
  static ViewBuilder.buildExpression<A>(_:)(v37);
  uint64_t v41 = *(void (**)(char *, uint64_t))(v55 + 8);
  v41(v37, v39);
  static ViewBuilder.buildExpression<A>(_:)(v40);
  return ((uint64_t (*)(char *, uint64_t))v41)(v40, v39);
}

uint64_t type metadata accessor for ResolvedDocumentLaunchView()
{
  return __swift_instantiateGenericMetadata();
}

unint64_t lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<BackgroundContext> and conformance _EnvironmentKeyWritingModifier<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<BackgroundContext> and conformance _EnvironmentKeyWritingModifier<A>;
  if (!lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<BackgroundContext> and conformance _EnvironmentKeyWritingModifier<A>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<BackgroundContext>(255, &lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<BackgroundContext>, MEMORY[0x1E4F3FEC0], MEMORY[0x1E4F411E8]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<BackgroundContext> and conformance _EnvironmentKeyWritingModifier<A>);
  }
  return result;
}

uint64_t *closure #1 in DocumentLaunchView.body.getter(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v30 = *a1;
  int v29 = *((_DWORD *)a1 + 2);
  uint64_t v28 = a1[2];
  *(void *)&long long v70 = a3;
  *((void *)&v70 + 1) = a4;
  *(void *)&long long v71 = a5;
  *((void *)&v71 + 1) = a6;
  uint64_t v7 = (int *)type metadata accessor for DocumentLaunchView();
  uint64_t v8 = (uint64_t *)((char *)a2 + v7[16]);
  uint64_t v9 = *v8;
  uint64_t v10 = v8[1];
  uint64_t v11 = v8[2];
  uint64_t v12 = v8[3];
  uint64_t v13 = *a2;
  uint64_t v14 = (uint64_t *)((char *)a2 + v7[14]);
  uint64_t v15 = *v14;
  uint64_t v16 = v14[1];
  uint64_t v17 = (uint64_t *)((char *)a2 + v7[15]);
  uint64_t v18 = *v17;
  uint64_t v19 = v17[1];
  uint64_t v20 = *(uint64_t *)((char *)a2 + v7[17]);
  uint64_t v21 = (uint64_t *)((char *)a2 + v7[18]);
  uint64_t v25 = *v21;
  uint64_t v22 = *v21;
  *(void *)&long long v26 = v21[1];
  uint64_t v23 = (uint64_t *)((char *)a2 + v7[19]);
  *((void *)&v26 + 1) = *v23;
  uint64_t v27 = v23[1];
  *(void *)&long long v70 = v9;
  *((void *)&v70 + 1) = v10;
  *(void *)&long long v71 = v11;
  *((void *)&v71 + 1) = v12;
  *(void *)&long long v72 = v13;
  *((void *)&v72 + 1) = v30;
  LODWORD(v73) = v29;
  *((void *)&v73 + 1) = v28;
  *(void *)&long long v74 = v15;
  *((void *)&v74 + 1) = v16;
  *(void *)&long long v75 = v18;
  *((void *)&v75 + 1) = v19;
  *(void *)&long long v76 = v20;
  *((void *)&v76 + 1) = v22;
  long long v77 = v26;
  *(void *)&long long v78 = v27;
  swift_getKeyPath();
  outlined copy of Text?(v9, v10, v11, v12);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  outlined copy of AppIntentExecutor?(v18);
  swift_retain();
  outlined copy of AppIntentExecutor?(v25);
  outlined copy of AppIntentExecutor?(*((uint64_t *)&v26 + 1));
  type metadata accessor for ResolvedDocumentLaunchView();
  View.environment<A>(_:_:)();
  swift_release();
  v55[6] = v76;
  v55[7] = v26;
  uint64_t v56 = v27;
  v55[2] = v72;
  v55[3] = v73;
  v55[4] = v74;
  v55[5] = v75;
  v55[0] = v70;
  v55[1] = v71;
  outlined release of ResolvedDocumentLaunchView<B>((uint64_t *)v55);
  v57[6] = v65;
  v57[7] = v66;
  v57[8] = v67;
  long long v57[2] = v61;
  v57[3] = v62;
  v57[4] = v63;
  v57[5] = v64;
  v57[0] = v59;
  v57[1] = v60;
  long long v50 = v65;
  long long v51 = v66;
  long long v52 = v67;
  long long v46 = v61;
  long long v47 = v62;
  long long v48 = v63;
  long long v49 = v64;
  char v58 = v68;
  LOBYTE(v53) = v68;
  long long v44 = v59;
  long long v45 = v60;
  static Edge.Set.all.getter();
  type metadata accessor for _EnvironmentKeyWritingModifier<BackgroundContext>(255, &lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<BackgroundContext>, MEMORY[0x1E4F3FEC0], MEMORY[0x1E4F411E8]);
  type metadata accessor for ModifiedContent();
  uint64_t v42 = &protocol witness table for ResolvedDocumentLaunchView<A>;
  unint64_t v43 = lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<BackgroundContext> and conformance _EnvironmentKeyWritingModifier<A>();
  swift_getWitnessTable();
  View.ignoresSafeArea(_:edges:)();
  outlined release of ModifiedContent<ResolvedDocumentLaunchView<B>, _EnvironmentKeyWritingModifier<BackgroundContext>>((uint64_t *)v57);
  long long v67 = v78;
  long long v68 = v79;
  long long v63 = v74;
  long long v64 = v75;
  long long v65 = v76;
  long long v66 = v77;
  long long v59 = v70;
  long long v60 = v71;
  long long v61 = v72;
  long long v62 = v73;
  long long v39 = v78;
  long long v40 = v79;
  long long v35 = v74;
  long long v36 = v75;
  long long v37 = v76;
  long long v38 = v77;
  long long v31 = v70;
  long long v32 = v71;
  char v69 = v80;
  char v41 = v80;
  long long v33 = v72;
  long long v34 = v73;
  type metadata accessor for ModifiedContent();
  swift_getWitnessTable();
  static ViewBuilder.buildExpression<A>(_:)(&v31);
  outlined release of ModifiedContent<ResolvedDocumentLaunchView<B>, _EnvironmentKeyWritingModifier<BackgroundContext>>((uint64_t *)&v59);
  long long v78 = v52;
  long long v79 = v53;
  long long v74 = v48;
  long long v75 = v49;
  long long v76 = v50;
  long long v77 = v51;
  long long v70 = v44;
  long long v71 = v45;
  long long v72 = v46;
  long long v73 = v47;
  long long v39 = v52;
  long long v40 = v53;
  long long v35 = v48;
  long long v36 = v49;
  long long v37 = v50;
  long long v38 = v51;
  long long v31 = v44;
  long long v32 = v45;
  char v80 = v54;
  char v41 = v54;
  long long v33 = v46;
  long long v34 = v47;
  static ViewBuilder.buildExpression<A>(_:)(&v31);
  return outlined release of ModifiedContent<ResolvedDocumentLaunchView<B>, _EnvironmentKeyWritingModifier<BackgroundContext>>((uint64_t *)&v70);
}

uint64_t sub_18825BB8C()
{
  long long v5 = *(_OWORD *)(v0 + 16);
  char v1 = (int *)type metadata accessor for DocumentLaunchView();
  uint64_t v2 = v0
     + ((*(unsigned __int8 *)(*((void *)v1 - 1) + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(*((void *)v1 - 1) + 80));
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t))(*(void *)(v5 - 8) + 8))(v2 + v1[13]);
  swift_release();
  if (*(void *)(v2 + v1[15])) {
    swift_release();
  }
  uint64_t v3 = v2 + v1[16];
  if (*(void *)(v3 + 24))
  {
    outlined consume of Text.Storage(*(void *)v3, *(void *)(v3 + 8), *(unsigned char *)(v3 + 16));
    swift_bridgeObjectRelease();
  }
  swift_release();
  if (*(void *)(v2 + v1[18])) {
    swift_release();
  }
  if (*(void *)(v2 + v1[19])) {
    swift_release();
  }
  return swift_deallocObject();
}

uint64_t type metadata accessor for DocumentLaunchView()
{
  return swift_getGenericMetadata();
}

uint64_t *partial apply for closure #1 in DocumentLaunchView.body.getter(uint64_t *a1)
{
  uint64_t v3 = v1[2];
  uint64_t v4 = v1[3];
  uint64_t v5 = v1[4];
  uint64_t v6 = v1[5];
  uint64_t v7 = *(void *)(type metadata accessor for DocumentLaunchView() - 8);
  uint64_t v8 = (void *)((char *)v1
                + ((*(unsigned __int8 *)(v7 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80)));

  return closure #1 in DocumentLaunchView.body.getter(a1, v8, v3, v4, v5, v6);
}

uint64_t closure #2 in DocumentLaunchView.body.getter@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  v25[0] = a3;
  v25[1] = a5;
  type metadata accessor for PrimitiveButtonStyleContainerModifier<PlatformItemListButtonStyle>();
  uint64_t v9 = type metadata accessor for ModifiedContent();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9);
  uint64_t v12 = (char *)v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v13);
  uint64_t v15 = (char *)v25 - v14;
  uint64_t v26 = a1;
  uint64_t v27 = a2;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  type metadata accessor for DocumentLaunchView();
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v17 = swift_getKeyPath();
  uint64_t v18 = swift_getKeyPath();
  uint64_t v19 = swift_getKeyPath();
  uint64_t v26 = KeyPath;
  LOBYTE(v27) = 0;
  uint64_t v28 = v17;
  LOBYTE(v29) = 0;
  uint64_t v30 = v18;
  char v31 = 0;
  uint64_t v32 = v19;
  char v33 = 0;
  lazy protocol witness table accessor for type PlatformItemListButtonStyle and conformance PlatformItemListButtonStyle();
  uint64_t v20 = a1;
  uint64_t v21 = v25[0];
  View.buttonStyle<A>(_:)((uint64_t)&v26, v20, (uint64_t)&type metadata for PlatformItemListButtonStyle, v25[0]);
  outlined consume of Environment<AnyShapeStyle?>.Content(KeyPath, 0);
  outlined consume of Environment<Bool>.Content(v17, 0);
  outlined consume of Environment<Bool>.Content(v18, 0);
  outlined consume of Environment<Bool>.Content(v19, 0);
  uint64_t v22 = lazy protocol witness table accessor for type UTType and conformance UTType((unint64_t *)&lazy protocol witness table cache variable for type PrimitiveButtonStyleContainerModifier<PlatformItemListButtonStyle> and conformance PrimitiveButtonStyleContainerModifier<A>, (void (*)(uint64_t))type metadata accessor for PrimitiveButtonStyleContainerModifier<PlatformItemListButtonStyle>);
  v25[2] = v21;
  v25[3] = v22;
  swift_getWitnessTable();
  static ViewBuilder.buildExpression<A>(_:)(v12);
  uint64_t v23 = *(void (**)(char *, uint64_t))(v10 + 8);
  v23(v12, v9);
  static ViewBuilder.buildExpression<A>(_:)(v15);
  return ((uint64_t (*)(char *, uint64_t))v23)(v15, v9);
}

uint64_t partial apply for closure #2 in DocumentLaunchView.body.getter()
{
  return partial apply for closure #2 in DocumentLaunchView.body.getter((uint64_t (*)(void, void, void, void, void))closure #2 in DocumentLaunchView.body.getter);
}

uint64_t closure #3 in DocumentLaunchView.body.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = type metadata accessor for ModifiedContent();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9);
  uint64_t v12 = (char *)v18 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v13);
  uint64_t v15 = (char *)v18 - v14;
  v18[2] = a2;
  v18[3] = a3;
  v18[4] = a4;
  v18[5] = a5;
  type metadata accessor for DocumentLaunchView();
  View.opacity(_:)();
  v18[0] = a4;
  v18[1] = MEMORY[0x1E4F3FA68];
  swift_getWitnessTable();
  static ViewBuilder.buildExpression<A>(_:)(v12);
  uint64_t v16 = *(void (**)(char *, uint64_t))(v10 + 8);
  v16(v12, v9);
  static ViewBuilder.buildExpression<A>(_:)(v15);
  return ((uint64_t (*)(char *, uint64_t))v16)(v15, v9);
}

uint64_t partial apply for closure #3 in DocumentLaunchView.body.getter()
{
  return partial apply for closure #2 in DocumentLaunchView.body.getter(closure #3 in DocumentLaunchView.body.getter);
}

uint64_t partial apply for closure #2 in DocumentLaunchView.body.getter(uint64_t (*a1)(void, void, void, void, void))
{
  return a1(v1[6], v1[2], v1[3], v1[4], v1[5]);
}

uint64_t DocumentLaunchView.init<A, B, C>(_:for:_:onDocumentOpen:background:backgroundAccessoryView:overlayAccessoryView:)@<X0>(uint64_t a1@<X4>, void (*a2)(uint64_t)@<X5>, uint64_t a3@<X6>, uint64_t a4@<X7>, void *a5@<X8>, uint64_t a6, void (*a7)(void), uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, long long a16, long long a17, long long a18, uint64_t a19)
{
  uint64_t v42 = a3;
  uint64_t v43 = a4;
  uint64_t v40 = a1;
  char v41 = a2;
  long long v39 = a5;
  long long v35 = a16;
  long long v32 = a18;
  long long v33 = a17;
  uint64_t v34 = a13;
  uint64_t v36 = a11;
  uint64_t v37 = a9;
  uint64_t v38 = a6;
  uint64_t v30 = a19;
  uint64_t v31 = a14;
  uint64_t v19 = type metadata accessor for Optional();
  MEMORY[0x1F4188790](v19 - 8);
  uint64_t v21 = (char *)&v30 - v20;
  uint64_t v22 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v24 = v23;
  uint64_t v26 = v25;
  uint64_t v28 = v27 & 1;
  a7();
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(a15 - 8) + 56))(v21, 0, 1, a15);
  swift_retain();
  swift_retain();
  DocumentLaunchView.init<A, B, C>(_:for:actions:onDocumentOpen:background:backgroundAccessoryView:overlayAccessoryView:)(v22, v24, v28, v26, v40, v41, v42, v43, v39, v38, (uint64_t)v21, v37, a10, v36, a12, v34, v31, a15, v35,
    *((uint64_t *)&v35 + 1),
    v33,
    *((uint64_t *)&v33 + 1),
    v32,
    *((uint64_t *)&v32 + 1),
    v30);
  swift_release();
  return swift_release();
}

uint64_t DocumentLaunchView.init<A, B, C>(_:for:actions:onDocumentOpen:background:backgroundAccessoryView:overlayAccessoryView:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, void (*a6)(uint64_t)@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, void *a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  uint64_t v82 = a5;
  uint64_t v83 = a8;
  uint64_t v78 = a7;
  long long v79 = a6;
  uint64_t v74 = a4;
  uint64_t v80 = a23;
  uint64_t v84 = a12;
  uint64_t v89 = a3;
  uint64_t v90 = a11;
  uint64_t v76 = a18;
  uint64_t v77 = a10;
  uint64_t v28 = type metadata accessor for Optional();
  uint64_t v75 = *(void *)(v28 - 8);
  MEMORY[0x1F4188790](v28);
  uint64_t v30 = (char *)&v68 - v29;
  uint64_t v73 = *(void *)(a18 - 8);
  MEMORY[0x1F4188790](v31);
  char v69 = (char *)&v68 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v33);
  long long v71 = (char *)&v68 - v34;
  uint64_t v85 = a16;
  uint64_t v86 = a17;
  uint64_t v91 = a16;
  uint64_t v92 = a17;
  uint64_t v35 = v74;
  uint64_t v87 = a21;
  uint64_t v88 = a22;
  uint64_t v93 = a21;
  uint64_t v94 = a22;
  uint64_t v36 = (int *)type metadata accessor for DocumentLaunchView();
  uint64_t v37 = (void *)((char *)a9 + v36[15]);
  *uint64_t v37 = 0;
  v37[1] = 0;
  uint64_t v38 = (void *)((char *)a9 + v36[16]);
  uint64_t v70 = v36[17];
  *(void *)((char *)a9 + v70) = 0;
  long long v39 = (void *)((char *)a9 + v36[18]);
  *long long v39 = 0;
  v39[1] = 0;
  uint64_t v40 = (void *)((char *)a9 + v36[19]);
  *uint64_t v40 = 0;
  v40[1] = 0;
  long long v72 = v40;
  *uint64_t v38 = a1;
  v38[1] = a2;
  char v41 = v89;
  v38[2] = v89;
  v38[3] = v35;
  *a9 = v82;
  uint64_t v81 = a1;
  uint64_t v82 = a2;
  uint64_t v42 = v75;
  uint64_t v43 = outlined copy of Text?(a1, a2, v41, v35);
  v79(v43);
  uint64_t v44 = v73;
  long long v45 = (void *)((char *)a9 + v36[14]);
  uint64_t v46 = v77;
  uint64_t *v45 = v83;
  v45[1] = v46;
  long long v47 = *(void (**)(char *, uint64_t, uint64_t))(v42 + 16);
  uint64_t v83 = v28;
  uint64_t v48 = v28;
  uint64_t v49 = v76;
  v47(v30, v90, v48);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v44 + 48))(v30, 1, v49) == 1)
  {
    uint64_t v50 = v80;
    outlined consume of Text?(v81, v82, v89, v35);
    long long v51 = *(void (**)(uint64_t, uint64_t))(v42 + 8);
    uint64_t v52 = v49;
    uint64_t v53 = v83;
    v51(v90, v83);
    uint64_t v54 = v53;
    uint64_t v49 = v52;
    uint64_t result = ((uint64_t (*)(char *, uint64_t))v51)(v30, v54);
  }
  else
  {
    uint64_t v56 = v71;
    (*(void (**)(char *, char *, uint64_t))(v44 + 32))(v71, v30, v49);
    (*(void (**)(char *, char *, uint64_t))(v44 + 16))(v69, v56, v49);
    uint64_t v50 = v80;
    uint64_t v57 = AnyView.init<A>(_:)();
    outlined consume of Text?(v81, v82, v89, v35);
    (*(void (**)(uint64_t, uint64_t))(v42 + 8))(v90, v83);
    (*(void (**)(char *, uint64_t))(v44 + 8))(v56, v49);
    uint64_t v58 = v70;
    uint64_t result = swift_release();
    *(void *)((char *)a9 + v58) = v57;
  }
  uint64_t v59 = v84;
  if (v84)
  {
    uint64_t v90 = a13;
    long long v60 = (void *)swift_allocObject();
    uint64_t v61 = v86;
    v60[2] = v85;
    v60[3] = v61;
    v60[4] = v49;
    v60[5] = a19;
    uint64_t v62 = v87;
    v60[6] = a20;
    v60[7] = v62;
    v60[8] = v88;
    v60[9] = v50;
    v60[10] = a24;
    v60[11] = a25;
    uint64_t v63 = v90;
    v60[12] = v59;
    v60[13] = v63;
    uint64_t result = outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(*v39);
    *long long v39 = (uint64_t)partial apply for closure #1 in DocumentLaunchView.init<A, B, C>(_:for:actions:onDocumentOpen:background:backgroundAccessoryView:overlayAccessoryView:);
    v39[1] = (uint64_t)v60;
  }
  if (a14)
  {
    long long v64 = (void *)swift_allocObject();
    uint64_t v65 = v86;
    v64[2] = v85;
    v64[3] = v65;
    v64[4] = v49;
    v64[5] = a19;
    uint64_t v66 = v87;
    v64[6] = a20;
    v64[7] = v66;
    v64[8] = v88;
    v64[9] = v50;
    _OWORD v64[10] = a24;
    v64[11] = a25;
    v64[12] = a14;
    v64[13] = a15;
    long long v67 = v72;
    uint64_t result = outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(*v72);
    *long long v67 = (uint64_t)partial apply for closure #2 in DocumentLaunchView.init<A, B, C>(_:for:actions:onDocumentOpen:background:backgroundAccessoryView:overlayAccessoryView:);
    v67[1] = (uint64_t)v64;
  }
  return result;
}

uint64_t DocumentLaunchView.init<A, B>(_:for:_:onDocumentOpen:background:backgroundAccessoryView:)@<X0>(uint64_t a1@<X4>, void (*a2)(uint64_t)@<X5>, uint64_t a3@<X6>, uint64_t a4@<X7>, void *a5@<X8>, uint64_t a6, void (*a7)(void), uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, long long a15, uint64_t a16, uint64_t a17)
{
  uint64_t v40 = a3;
  uint64_t v41 = a4;
  uint64_t v38 = a1;
  long long v39 = a2;
  uint64_t v37 = a5;
  long long v32 = a15;
  uint64_t v29 = a17;
  uint64_t v30 = a16;
  uint64_t v33 = a11;
  uint64_t v34 = a14;
  uint64_t v35 = a9;
  uint64_t v36 = a6;
  uint64_t v31 = a12;
  uint64_t v17 = type metadata accessor for Optional();
  MEMORY[0x1F4188790](v17 - 8);
  uint64_t v19 = (char *)&v28 - v18;
  uint64_t v20 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v22 = v21;
  uint64_t v24 = v23;
  uint64_t v26 = v25 & 1;
  a7();
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(a13 - 8) + 56))(v19, 0, 1, a13);
  swift_retain();
  DocumentLaunchView.init<A, B, C>(_:for:actions:onDocumentOpen:background:backgroundAccessoryView:overlayAccessoryView:)(v20, v22, v26, v24, v38, v39, v40, v41, v37, v36, (uint64_t)v19, v35, a10, 0, 0, v33, v31, a13, v34,
    MEMORY[0x1E4F417F8],
    v32,
    *((uint64_t *)&v32 + 1),
    v30,
    v29,
    MEMORY[0x1E4F417F0]);
  return swift_release();
}

uint64_t DocumentLaunchView.init<A, B>(_:for:_:onDocumentOpen:background:overlayAccessoryView:)@<X0>(uint64_t a1@<X4>, void (*a2)(uint64_t)@<X5>, uint64_t a3@<X6>, uint64_t a4@<X7>, void *a5@<X8>, uint64_t a6, void (*a7)(void), uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, long long a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  uint64_t v39 = a3;
  uint64_t v40 = a4;
  uint64_t v37 = a1;
  uint64_t v38 = a2;
  uint64_t v36 = a5;
  long long v32 = a14;
  uint64_t v28 = a17;
  uint64_t v29 = a16;
  uint64_t v33 = a11;
  uint64_t v34 = a9;
  uint64_t v35 = a6;
  uint64_t v30 = a12;
  uint64_t v31 = a15;
  uint64_t v17 = type metadata accessor for Optional();
  MEMORY[0x1F4188790](v17 - 8);
  uint64_t v19 = (char *)&v28 - v18;
  uint64_t v20 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v22 = v21;
  uint64_t v24 = v23;
  uint64_t v26 = v25 & 1;
  a7();
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(a13 - 8) + 56))(v19, 0, 1, a13);
  swift_retain();
  DocumentLaunchView.init<A, B, C>(_:for:actions:onDocumentOpen:background:backgroundAccessoryView:overlayAccessoryView:)(v20, v22, v26, v24, v37, v38, v39, v40, v36, v35, (uint64_t)v19, 0, 0, v34, a10, v33, v30, a13, MEMORY[0x1E4F417F8],
    v32,
    *((uint64_t *)&v32 + 1),
    v31,
    v29,
    MEMORY[0x1E4F417F0],
    v28);
  return swift_release();
}

uint64_t DocumentLaunchView.init<A>(_:for:_:onDocumentOpen:background:)@<X0>(uint64_t a1@<X4>, void (*a2)(uint64_t)@<X5>, uint64_t a3@<X6>, uint64_t a4@<X7>, void *a5@<X8>, uint64_t a6, void (*a7)(void), uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, long long a12, uint64_t a13)
{
  uint64_t v31 = a3;
  uint64_t v32 = a4;
  uint64_t v29 = a1;
  uint64_t v30 = a2;
  uint64_t v28 = a5;
  long long v24 = a12;
  uint64_t v26 = a9;
  uint64_t v27 = a6;
  uint64_t v25 = a10;
  uint64_t v13 = type metadata accessor for Optional();
  MEMORY[0x1F4188790](v13 - 8);
  uint64_t v15 = (char *)&v24 - v14;
  uint64_t v16 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v18 = v17;
  uint64_t v20 = v19;
  uint64_t v22 = v21 & 1;
  a7();
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(a11 - 8) + 56))(v15, 0, 1, a11);
  return DocumentLaunchView.init<A, B, C>(_:for:actions:onDocumentOpen:background:backgroundAccessoryView:overlayAccessoryView:)(v16, v18, v22, v20, v29, v30, v31, v32, v28, v27, (uint64_t)v15, 0, 0, 0, 0, v26, v25, a11, MEMORY[0x1E4F417F8],
           MEMORY[0x1E4F417F8],
           v24,
           *((uint64_t *)&v24 + 1),
           a13,
           MEMORY[0x1E4F417F0],
           MEMORY[0x1E4F417F0]);
}

uint64_t DocumentLaunchView.init<A, B, C, D>(_:for:_:onDocumentOpen:background:backgroundAccessoryView:overlayAccessoryView:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void (*a3)(uint64_t)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, void (*a7)(void)@<X6>, void *a8@<X8>, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, long long a17, long long a18, uint64_t a19, long long a20,uint64_t a21)
{
  uint64_t v37 = a1;
  uint64_t v38 = a7;
  uint64_t v48 = a6;
  uint64_t v49 = a2;
  uint64_t v51 = a4;
  uint64_t v52 = a5;
  uint64_t v50 = a3;
  long long v47 = a8;
  uint64_t v45 = a14;
  uint64_t v46 = a13;
  long long v41 = a18;
  long long v42 = a17;
  long long v40 = a20;
  uint64_t v39 = a21;
  uint64_t v43 = a11;
  uint64_t v44 = a9;
  uint64_t v22 = type metadata accessor for Optional();
  MEMORY[0x1F4188790](v22 - 8);
  long long v24 = (char *)&v36 - v23;
  uint64_t v25 = *(void *)(a15 - 8);
  double v27 = MEMORY[0x1F4188790](v26);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v25 + 16))((char *)&v36 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0), a1, a15, v27);
  uint64_t v29 = Text.init<A>(_:)();
  uint64_t v31 = v30;
  uint64_t v36 = v32;
  uint64_t v34 = v33 & 1;
  v38();
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(a16 - 8) + 56))(v24, 0, 1, a16);
  swift_retain();
  swift_retain();
  DocumentLaunchView.init<A, B, C>(_:for:actions:onDocumentOpen:background:backgroundAccessoryView:overlayAccessoryView:)(v29, v31, v34, v36, v49, v50, v51, v52, v47, v48, (uint64_t)v24, v44, a10, v43, a12, v46, v45, a16, v42,
    *((uint64_t *)&v42 + 1),
    v41,
    *((uint64_t *)&v41 + 1),
    v40,
    *((uint64_t *)&v40 + 1),
    v39);
  swift_release();
  swift_release();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v25 + 8))(v37, a15);
}

uint64_t DocumentLaunchView.init<A, B, C>(_:for:_:onDocumentOpen:background:backgroundAccessoryView:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void (*a3)(uint64_t)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, void (*a7)(void)@<X6>, void *a8@<X8>, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, long long a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  uint64_t v35 = a1;
  uint64_t v36 = a7;
  uint64_t v45 = a6;
  uint64_t v46 = a2;
  uint64_t v48 = a4;
  uint64_t v49 = a5;
  long long v47 = a3;
  uint64_t v44 = a8;
  uint64_t v42 = a12;
  uint64_t v43 = a11;
  long long v39 = a16;
  uint64_t v40 = a15;
  uint64_t v41 = a9;
  uint64_t v37 = a18;
  uint64_t v38 = a19;
  uint64_t v20 = type metadata accessor for Optional();
  MEMORY[0x1F4188790](v20 - 8);
  uint64_t v22 = (char *)&v35 - v21;
  uint64_t v23 = *(void *)(a13 - 8);
  double v25 = MEMORY[0x1F4188790](v24);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v23 + 16))((char *)&v35 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0), a1, a13, v25);
  uint64_t v27 = Text.init<A>(_:)();
  uint64_t v29 = v28;
  uint64_t v31 = v30;
  uint64_t v33 = v32 & 1;
  v36();
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(a14 - 8) + 56))(v22, 0, 1, a14);
  swift_retain();
  DocumentLaunchView.init<A, B, C>(_:for:actions:onDocumentOpen:background:backgroundAccessoryView:overlayAccessoryView:)(v27, v29, v33, v31, v46, v47, v48, v49, v44, v45, (uint64_t)v22, v41, a10, 0, 0, v43, v42, a14, v40,
    MEMORY[0x1E4F417F8],
    v39,
    *((uint64_t *)&v39 + 1),
    v37,
    v38,
    MEMORY[0x1E4F417F0]);
  swift_release();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v23 + 8))(v35, a13);
}

uint64_t DocumentLaunchView.init<A, B, C>(_:for:_:onDocumentOpen:background:overlayAccessoryView:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void (*a3)(uint64_t)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, void (*a7)(void)@<X6>, void *a8@<X8>, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, long long a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  uint64_t v36 = a1;
  uint64_t v37 = a7;
  uint64_t v46 = a6;
  uint64_t v47 = a2;
  uint64_t v49 = a4;
  uint64_t v50 = a5;
  uint64_t v48 = a3;
  uint64_t v45 = a8;
  uint64_t v43 = a12;
  uint64_t v44 = a11;
  long long v41 = a15;
  uint64_t v38 = a19;
  uint64_t v42 = a9;
  uint64_t v39 = a16;
  uint64_t v40 = a18;
  uint64_t v20 = type metadata accessor for Optional();
  MEMORY[0x1F4188790](v20 - 8);
  uint64_t v22 = (char *)&v35 - v21;
  uint64_t v23 = *(void *)(a13 - 8);
  double v25 = MEMORY[0x1F4188790](v24);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v23 + 16))((char *)&v35 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0), a1, a13, v25);
  uint64_t v27 = Text.init<A>(_:)();
  uint64_t v29 = v28;
  uint64_t v31 = v30;
  uint64_t v33 = v32 & 1;
  v37();
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(a14 - 8) + 56))(v22, 0, 1, a14);
  swift_retain();
  DocumentLaunchView.init<A, B, C>(_:for:actions:onDocumentOpen:background:backgroundAccessoryView:overlayAccessoryView:)(v27, v29, v33, v31, v47, v48, v49, v50, v45, v46, (uint64_t)v22, 0, 0, v42, a10, v44, v43, a14, MEMORY[0x1E4F417F8],
    v41,
    *((uint64_t *)&v41 + 1),
    v39,
    v40,
    MEMORY[0x1E4F417F0],
    v38);
  swift_release();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v23 + 8))(v36, a13);
}

uint64_t DocumentLaunchView.init<A, B>(_:for:_:onDocumentOpen:background:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void (*a3)(uint64_t)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, void (*a7)(uint64_t)@<X6>, void *a8@<X8>, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, long long a13, uint64_t a14, uint64_t a15)
{
  uint64_t v37 = a6;
  uint64_t v38 = a2;
  uint64_t v40 = a4;
  uint64_t v41 = a5;
  uint64_t v39 = a3;
  uint64_t v36 = a8;
  uint64_t v34 = a10;
  uint64_t v35 = a9;
  long long v33 = a13;
  uint64_t v31 = a7;
  uint64_t v32 = a15;
  uint64_t v16 = type metadata accessor for Optional();
  MEMORY[0x1F4188790](v16 - 8);
  uint64_t v18 = (char *)&v31 - v17;
  uint64_t v19 = *(void *)(a11 - 8);
  double v21 = MEMORY[0x1F4188790](v20);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v19 + 16))((char *)&v31 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0), a1, a11, v21);
  uint64_t v23 = Text.init<A>(_:)();
  uint64_t v25 = v24;
  uint64_t v27 = v26;
  uint64_t v29 = v28 & 1;
  v31(v23);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(a12 - 8) + 56))(v18, 0, 1, a12);
  DocumentLaunchView.init<A, B, C>(_:for:actions:onDocumentOpen:background:backgroundAccessoryView:overlayAccessoryView:)(v23, v25, v29, v27, v38, v39, v40, v41, v36, v37, (uint64_t)v18, 0, 0, 0, 0, v35, v34, a12, MEMORY[0x1E4F417F8],
    MEMORY[0x1E4F417F8],
    v33,
    *((uint64_t *)&v33 + 1),
    v32,
    MEMORY[0x1E4F417F0],
    MEMORY[0x1E4F417F0]);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v19 + 8))(a1, a11);
}

uint64_t DocumentLaunchView.init<A, B, C>(_:for:_:onDocumentOpen:background:backgroundAccessoryView:overlayAccessoryView:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, void (*a6)(uint64_t)@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, void *a9@<X8>, uint64_t a10, void (*a11)(double), uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, long long a20,long long a21,long long a22,uint64_t a23)
{
  uint64_t v40 = a7;
  uint64_t v41 = a8;
  uint64_t v38 = a5;
  uint64_t v39 = a6;
  uint64_t v36 = a3;
  uint64_t v37 = a4;
  uint64_t v34 = a1;
  uint64_t v35 = a2;
  long long v33 = a9;
  long long v29 = a21;
  long long v30 = a20;
  long long v28 = a22;
  uint64_t v31 = a13;
  uint64_t v32 = a10;
  uint64_t v23 = type metadata accessor for Optional();
  double v24 = MEMORY[0x1F4188790](v23 - 8);
  uint64_t v26 = (char *)&v28 - v25;
  a11(v24);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(a19 - 8) + 56))(v26, 0, 1, a19);
  swift_retain();
  swift_retain();
  DocumentLaunchView.init<A, B, C>(_:for:actions:onDocumentOpen:background:backgroundAccessoryView:overlayAccessoryView:)(v34, v35, v36, v37, v38, v39, v40, v41, v33, v32, (uint64_t)v26, v31, a14, a15, a16, a17, a18, a19, v30,
    *((uint64_t *)&v30 + 1),
    v29,
    *((uint64_t *)&v29 + 1),
    v28,
    *((uint64_t *)&v28 + 1),
    a23);
  swift_release();
  return swift_release();
}

uint64_t DocumentLaunchView.init<A, B>(_:for:_:onDocumentOpen:background:backgroundAccessoryView:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, void (*a6)(uint64_t)@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, void *a9@<X8>, uint64_t a10, void (*a11)(double), uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, long long a19, uint64_t a20,uint64_t a21)
{
  uint64_t v36 = a7;
  uint64_t v37 = a8;
  uint64_t v34 = a5;
  uint64_t v35 = a6;
  uint64_t v32 = a3;
  uint64_t v33 = a4;
  uint64_t v30 = a1;
  uint64_t v31 = a2;
  long long v29 = a9;
  long long v26 = a19;
  uint64_t v27 = a13;
  uint64_t v28 = a10;
  uint64_t v21 = type metadata accessor for Optional();
  double v22 = MEMORY[0x1F4188790](v21 - 8);
  double v24 = (char *)&v26 - v23;
  a11(v22);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(a17 - 8) + 56))(v24, 0, 1, a17);
  swift_retain();
  DocumentLaunchView.init<A, B, C>(_:for:actions:onDocumentOpen:background:backgroundAccessoryView:overlayAccessoryView:)(v30, v31, v32, v33, v34, v35, v36, v37, v29, v28, (uint64_t)v24, v27, a14, 0, 0, a15, a16, a17, a18,
    MEMORY[0x1E4F417F8],
    v26,
    *((uint64_t *)&v26 + 1),
    a20,
    a21,
    MEMORY[0x1E4F417F0]);
  return swift_release();
}

uint64_t DocumentLaunchView.init<A, B>(_:for:_:onDocumentOpen:background:overlayAccessoryView:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, void (*a6)(uint64_t)@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, void *a9@<X8>, uint64_t a10, void (*a11)(double), uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, long long a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  uint64_t v36 = a7;
  uint64_t v37 = a8;
  uint64_t v34 = a5;
  uint64_t v35 = a6;
  uint64_t v32 = a3;
  uint64_t v33 = a4;
  uint64_t v30 = a1;
  uint64_t v31 = a2;
  long long v29 = a9;
  long long v26 = a18;
  uint64_t v27 = a13;
  uint64_t v28 = a10;
  uint64_t v21 = type metadata accessor for Optional();
  double v22 = MEMORY[0x1F4188790](v21 - 8);
  double v24 = (char *)&v26 - v23;
  a11(v22);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(a17 - 8) + 56))(v24, 0, 1, a17);
  swift_retain();
  DocumentLaunchView.init<A, B, C>(_:for:actions:onDocumentOpen:background:backgroundAccessoryView:overlayAccessoryView:)(v30, v31, v32, v33, v34, v35, v36, v37, v29, v28, (uint64_t)v24, 0, 0, v27, a14, a15, a16, a17, MEMORY[0x1E4F417F8],
    v26,
    *((uint64_t *)&v26 + 1),
    a19,
    a20,
    MEMORY[0x1E4F417F0],
    a21);
  return swift_release();
}

uint64_t DocumentLaunchView.init<A>(_:for:_:onDocumentOpen:background:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, void (*a6)(uint64_t)@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, void *a9@<X8>, uint64_t a10, void (*a11)(double), uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, long long a16, uint64_t a17)
{
  uint64_t v30 = a7;
  uint64_t v31 = a8;
  uint64_t v28 = a5;
  long long v29 = a6;
  uint64_t v26 = a3;
  uint64_t v27 = a4;
  uint64_t v25 = a2;
  long long v24 = a16;
  uint64_t v19 = type metadata accessor for Optional();
  double v20 = MEMORY[0x1F4188790](v19 - 8);
  double v22 = (char *)&v24 - v21;
  a11(v20);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(a15 - 8) + 56))(v22, 0, 1, a15);
  return DocumentLaunchView.init<A, B, C>(_:for:actions:onDocumentOpen:background:backgroundAccessoryView:overlayAccessoryView:)(a1, v25, v26, v27, v28, v29, v30, v31, a9, a10, (uint64_t)v22, 0, 0, 0, 0, a13, a14, a15, MEMORY[0x1E4F417F8],
           MEMORY[0x1E4F417F8],
           v24,
           *((uint64_t *)&v24 + 1),
           a17,
           MEMORY[0x1E4F417F0],
           MEMORY[0x1E4F417F0]);
}

uint64_t DocumentLaunchView.init<A, B, C>(_:for:backgroundStyle:_:onDocumentOpen:backgroundAccessoryView:overlayAccessoryView:)@<X0>(uint64_t a1@<X0>, int a2@<W2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, void (*a6)(uint64_t)@<X6>, uint64_t a7@<X7>, void *a8@<X8>, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, long long a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  uint64_t v51 = a6;
  uint64_t v52 = a7;
  uint64_t v37 = a3;
  LODWORD(v36) = a2;
  uint64_t v48 = a8;
  uint64_t v49 = a9;
  uint64_t v50 = a4;
  uint64_t v46 = a15;
  uint64_t v47 = a10;
  long long v42 = a18;
  uint64_t v40 = a20;
  uint64_t v41 = a19;
  uint64_t v39 = a23;
  uint64_t v43 = a16;
  uint64_t v44 = a13;
  uint64_t v45 = a11;
  uint64_t v24 = *(void *)(a17 - 8);
  uint64_t v38 = a22;
  MEMORY[0x1F4188790](a1);
  uint64_t v26 = (char *)&v36 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = type metadata accessor for DocumentIntroHelper.ShapeStyleView();
  MEMORY[0x1F4188790](v27);
  long long v29 = (char *)&v36 - v28;
  uint64_t v30 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v36 = v32;
  uint64_t v37 = v31;
  uint64_t v34 = v33 & 1;
  (*(void (**)(char *, uint64_t, uint64_t))(v24 + 16))(v26, a5, a17);
  (*(void (**)(char *, char *, uint64_t))(v24 + 32))(v29, v26, a17);
  swift_getWitnessTable();
  v53[0] = AnyView.init<A>(_:)();
  swift_retain();
  swift_retain();
  DocumentLaunchView.init<A, B, C>(_:for:actions:onDocumentOpen:background:backgroundAccessoryView:overlayAccessoryView:)(v30, v37, v34, v36, v50, v51, v52, v49, v48, v47, (uint64_t)v53, v45, a12, v44, a14, v46, v43, MEMORY[0x1E4F41618], v42,
    *((uint64_t *)&v42 + 1),
    v41,
    v40,
    MEMORY[0x1E4F41610],
    v38,
    v39);
  swift_release();
  swift_release();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v24 + 8))(a5, a17);
}

uint64_t DocumentLaunchView.init<A, B>(_:for:backgroundStyle:_:onDocumentOpen:backgroundAccessoryView:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X4>, uint64_t a4@<X5>, void (*a5)(uint64_t)@<X6>, uint64_t a6@<X7>, void *a7@<X8>, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  uint64_t v46 = a5;
  uint64_t v47 = a6;
  uint64_t v34 = a2;
  uint64_t v43 = a7;
  uint64_t v44 = a8;
  uint64_t v45 = a3;
  uint64_t v41 = a12;
  uint64_t v42 = a9;
  uint64_t v36 = a17;
  uint64_t v39 = a10;
  uint64_t v40 = a13;
  uint64_t v37 = a15;
  uint64_t v38 = a16;
  uint64_t v20 = *(void *)(a14 - 8);
  uint64_t v35 = a19;
  MEMORY[0x1F4188790](a1);
  double v22 = (char *)&v33 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = type metadata accessor for DocumentIntroHelper.ShapeStyleView();
  MEMORY[0x1F4188790](v23);
  uint64_t v25 = (char *)&v33 - v24;
  uint64_t v26 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v28 = v27;
  uint64_t v34 = v29;
  uint64_t v31 = v30 & 1;
  (*(void (**)(char *, uint64_t, uint64_t))(v20 + 16))(v22, a4, a14);
  (*(void (**)(char *, char *, uint64_t))(v20 + 32))(v25, v22, a14);
  swift_getWitnessTable();
  v48[0] = AnyView.init<A>(_:)();
  swift_retain();
  DocumentLaunchView.init<A, B, C>(_:for:actions:onDocumentOpen:background:backgroundAccessoryView:overlayAccessoryView:)(v26, v28, v31, v34, v45, v46, v47, v44, v43, v42, (uint64_t)v48, v39, a11, 0, 0, v41, v40, MEMORY[0x1E4F41618], v37,
    MEMORY[0x1E4F417F8],
    v38,
    v36,
    MEMORY[0x1E4F41610],
    v35,
    MEMORY[0x1E4F417F0]);
  swift_release();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v20 + 8))(a4, a14);
}

uint64_t DocumentLaunchView.init<A, B>(_:for:backgroundStyle:_:onDocumentOpen:overlayAccessoryView:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X4>, uint64_t a4@<X5>, void (*a5)(uint64_t)@<X6>, uint64_t a6@<X7>, void *a7@<X8>, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, long long a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  uint64_t v44 = a5;
  uint64_t v45 = a6;
  uint64_t v33 = a2;
  uint64_t v41 = a7;
  uint64_t v42 = a8;
  uint64_t v43 = a3;
  uint64_t v39 = a12;
  uint64_t v40 = a9;
  long long v36 = a15;
  uint64_t v35 = a18;
  uint64_t v37 = a10;
  uint64_t v38 = a13;
  uint64_t v19 = *(void *)(a14 - 8);
  uint64_t v34 = a16;
  MEMORY[0x1F4188790](a1);
  uint64_t v21 = (char *)&v32 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = type metadata accessor for DocumentIntroHelper.ShapeStyleView();
  MEMORY[0x1F4188790](v22);
  uint64_t v24 = (char *)&v32 - v23;
  uint64_t v25 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v27 = v26;
  uint64_t v33 = v28;
  uint64_t v30 = v29 & 1;
  (*(void (**)(char *, uint64_t, uint64_t))(v19 + 16))(v21, a4, a14);
  (*(void (**)(char *, char *, uint64_t))(v19 + 32))(v24, v21, a14);
  swift_getWitnessTable();
  v46[0] = AnyView.init<A>(_:)();
  swift_retain();
  DocumentLaunchView.init<A, B, C>(_:for:actions:onDocumentOpen:background:backgroundAccessoryView:overlayAccessoryView:)(v25, v27, v30, v33, v43, v44, v45, v42, v41, v40, (uint64_t)v46, 0, 0, v37, a11, v39, v38, MEMORY[0x1E4F41618], MEMORY[0x1E4F417F8],
    v36,
    *((uint64_t *)&v36 + 1),
    v34,
    MEMORY[0x1E4F41610],
    MEMORY[0x1E4F417F0],
    v35);
  swift_release();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v19 + 8))(a4, a14);
}

uint64_t DocumentLaunchView.init<A>(_:for:backgroundStyle:_:onDocumentOpen:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X4>, uint64_t a3@<X5>, void (*a4)(uint64_t)@<X6>, uint64_t a5@<X7>, void *a6@<X8>, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  long long v36 = a4;
  uint64_t v37 = a5;
  uint64_t v33 = a6;
  uint64_t v34 = a7;
  uint64_t v35 = a2;
  uint64_t v31 = a9;
  uint64_t v32 = a8;
  uint64_t v29 = a12;
  uint64_t v30 = a10;
  uint64_t v14 = *(void *)(a11 - 8);
  uint64_t v28 = a13;
  MEMORY[0x1F4188790](a1);
  uint64_t v16 = (char *)&v28 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = type metadata accessor for DocumentIntroHelper.ShapeStyleView();
  MEMORY[0x1F4188790](v17);
  uint64_t v19 = (char *)&v28 - v18;
  uint64_t v20 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v22 = v21;
  uint64_t v24 = v23;
  uint64_t v26 = v25 & 1;
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v16, a3, a11);
  (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v19, v16, a11);
  swift_getWitnessTable();
  uint64_t v38 = AnyView.init<A>(_:)();
  DocumentLaunchView.init<A, B, C>(_:for:actions:onDocumentOpen:background:backgroundAccessoryView:overlayAccessoryView:)(v20, v22, v26, v24, v35, v36, v37, v34, v33, v32, (uint64_t)&v38, 0, 0, 0, 0, v31, v30, MEMORY[0x1E4F41618], MEMORY[0x1E4F417F8],
    MEMORY[0x1E4F417F8],
    v29,
    v28,
    MEMORY[0x1E4F41610],
    MEMORY[0x1E4F417F0],
    MEMORY[0x1E4F417F0]);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v14 + 8))(a3, a11);
}

uint64_t DocumentLaunchView.init<A, B, C, D>(_:for:backgroundStyle:_:onDocumentOpen:backgroundAccessoryView:overlayAccessoryView:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void (*a4)(uint64_t)@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, void *a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, long long a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  uint64_t v58 = a8;
  uint64_t v59 = a7;
  uint64_t v62 = a5;
  uint64_t v63 = a6;
  uint64_t v60 = a2;
  uint64_t v61 = a4;
  uint64_t v45 = a3;
  uint64_t v46 = a1;
  uint64_t v57 = a9;
  long long v55 = a17;
  uint64_t v52 = a19;
  uint64_t v53 = a18;
  uint64_t v49 = a23;
  uint64_t v50 = a22;
  uint64_t v54 = a13;
  uint64_t v56 = a11;
  uint64_t v47 = a10;
  uint64_t v48 = a12;
  uint64_t v51 = a14;
  uint64_t v24 = *(void *)(a15 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v26 = (char *)&v43 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = type metadata accessor for DocumentIntroHelper.ShapeStyleView();
  MEMORY[0x1F4188790](v27);
  uint64_t v29 = (char *)&v43 - v28;
  uint64_t v30 = *(void *)(a16 - 8);
  double v32 = MEMORY[0x1F4188790](v31);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v30 + 16))((char *)&v43 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0), a1, a16, v32);
  uint64_t v44 = Text.init<A>(_:)();
  uint64_t v35 = v34;
  uint64_t v43 = v36;
  uint64_t v38 = v37 & 1;
  uint64_t v39 = v45;
  (*(void (**)(char *, uint64_t, uint64_t))(v24 + 16))(v26, v45, a15);
  (*(void (**)(char *, char *, uint64_t))(v24 + 32))(v29, v26, a15);
  swift_getWitnessTable();
  uint64_t v64 = AnyView.init<A>(_:)();
  uint64_t v40 = v47;
  swift_retain();
  uint64_t v41 = v48;
  swift_retain();
  DocumentLaunchView.init<A, B, C>(_:for:actions:onDocumentOpen:background:backgroundAccessoryView:overlayAccessoryView:)(v44, v35, v38, v43, v60, v61, v62, v63, v57, v59, (uint64_t)&v64, v58, v40, v56, v41, v54, v51, MEMORY[0x1E4F41618], v55,
    *((uint64_t *)&v55 + 1),
    v53,
    v52,
    MEMORY[0x1E4F41610],
    v50,
    v49);
  swift_release();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v39, a15);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v30 + 8))(v46, a16);
}

uint64_t DocumentLaunchView.init<A, B, C>(_:for:backgroundStyle:_:onDocumentOpen:backgroundAccessoryView:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void (*a4)(uint64_t)@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, void *a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  uint64_t v52 = a8;
  uint64_t v53 = a7;
  uint64_t v56 = a5;
  uint64_t v57 = a6;
  uint64_t v54 = a2;
  long long v55 = a4;
  uint64_t v42 = a3;
  uint64_t v43 = a1;
  uint64_t v51 = a9;
  uint64_t v45 = a20;
  uint64_t v46 = a17;
  uint64_t v44 = a10;
  uint64_t v47 = a15;
  uint64_t v48 = a16;
  uint64_t v49 = a12;
  uint64_t v50 = a11;
  uint64_t v21 = *(void *)(a13 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v23 = (char *)&v40 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = type metadata accessor for DocumentIntroHelper.ShapeStyleView();
  MEMORY[0x1F4188790](v24);
  uint64_t v26 = (char *)&v40 - v25;
  uint64_t v27 = *(void *)(a14 - 8);
  double v29 = MEMORY[0x1F4188790](v28);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v27 + 16))((char *)&v40 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0), a1, a14, v29);
  uint64_t v31 = Text.init<A>(_:)();
  uint64_t v40 = v32;
  uint64_t v41 = v31;
  uint64_t v34 = v33;
  uint64_t v36 = v35 & 1;
  uint64_t v37 = v42;
  (*(void (**)(char *, uint64_t, uint64_t))(v21 + 16))(v23, v42, a13);
  (*(void (**)(char *, char *, uint64_t))(v21 + 32))(v26, v23, a13);
  swift_getWitnessTable();
  uint64_t v58 = AnyView.init<A>(_:)();
  uint64_t v38 = v44;
  swift_retain();
  DocumentLaunchView.init<A, B, C>(_:for:actions:onDocumentOpen:background:backgroundAccessoryView:overlayAccessoryView:)(v41, v40, v36, v34, v54, v55, v56, v57, v51, v53, (uint64_t)&v58, v52, v38, 0, 0, v50, v49, MEMORY[0x1E4F41618], v47,
    MEMORY[0x1E4F417F8],
    v48,
    v46,
    MEMORY[0x1E4F41610],
    v45,
    MEMORY[0x1E4F417F0]);
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v37, a13);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v27 + 8))(v43, a14);
}

uint64_t DocumentLaunchView.init<A, B, C>(_:for:backgroundStyle:_:onDocumentOpen:overlayAccessoryView:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void (*a4)(uint64_t)@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, void *a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, long long a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  uint64_t v49 = a8;
  uint64_t v50 = a7;
  uint64_t v53 = a5;
  uint64_t v54 = a6;
  uint64_t v51 = a2;
  uint64_t v52 = a4;
  uint64_t v41 = a3;
  uint64_t v42 = a1;
  uint64_t v48 = a9;
  long long v45 = a15;
  uint64_t v44 = a19;
  uint64_t v40 = a18;
  uint64_t v46 = a12;
  uint64_t v47 = a11;
  uint64_t v20 = *(void *)(a13 - 8);
  uint64_t v43 = a16;
  MEMORY[0x1F4188790](a1);
  uint64_t v22 = (char *)&v37 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = type metadata accessor for DocumentIntroHelper.ShapeStyleView();
  MEMORY[0x1F4188790](v23);
  uint64_t v25 = (char *)&v37 - v24;
  uint64_t v26 = *(void *)(a14 - 8);
  double v28 = MEMORY[0x1F4188790](v27);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v26 + 16))((char *)&v37 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0), a1, a14, v28);
  uint64_t v30 = Text.init<A>(_:)();
  uint64_t v39 = v31;
  uint64_t v40 = v30;
  uint64_t v38 = v32;
  uint64_t v34 = v33 & 1;
  uint64_t v35 = v41;
  (*(void (**)(char *, uint64_t, uint64_t))(v20 + 16))(v22, v41, a13);
  (*(void (**)(char *, char *, uint64_t))(v20 + 32))(v25, v22, a13);
  swift_getWitnessTable();
  uint64_t v55 = AnyView.init<A>(_:)();
  swift_retain();
  DocumentLaunchView.init<A, B, C>(_:for:actions:onDocumentOpen:background:backgroundAccessoryView:overlayAccessoryView:)(v40, v39, v34, v38, v51, v52, v53, v54, v48, v50, (uint64_t)&v55, 0, 0, v49, a10, v47, v46, MEMORY[0x1E4F41618], MEMORY[0x1E4F417F8],
    v45,
    *((uint64_t *)&v45 + 1),
    v43,
    MEMORY[0x1E4F41610],
    MEMORY[0x1E4F417F0],
    v44);
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v35, a13);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v26 + 8))(v42, a14);
}

uint64_t DocumentLaunchView.init<A, B>(_:for:backgroundStyle:_:onDocumentOpen:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void (*a4)(uint64_t)@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, void *a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v41 = a8;
  uint64_t v42 = a7;
  uint64_t v45 = a5;
  uint64_t v46 = a6;
  uint64_t v43 = a2;
  uint64_t v44 = a4;
  uint64_t v35 = a3;
  uint64_t v36 = a1;
  uint64_t v40 = a9;
  uint64_t v38 = a13;
  uint64_t v39 = a10;
  uint64_t v15 = *(void *)(a11 - 8);
  uint64_t v37 = a14;
  MEMORY[0x1F4188790](a1);
  uint64_t v17 = (char *)&v33 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = type metadata accessor for DocumentIntroHelper.ShapeStyleView();
  MEMORY[0x1F4188790](v18);
  uint64_t v20 = (char *)&v33 - v19;
  uint64_t v21 = *(void *)(a12 - 8);
  double v23 = MEMORY[0x1F4188790](v22);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v21 + 16))((char *)&v33 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0), a1, a12, v23);
  uint64_t v25 = Text.init<A>(_:)();
  uint64_t v33 = v26;
  uint64_t v34 = v25;
  uint64_t v28 = v27;
  uint64_t v30 = v29 & 1;
  uint64_t v31 = v35;
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v17, v35, a11);
  (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v20, v17, a11);
  swift_getWitnessTable();
  uint64_t v47 = AnyView.init<A>(_:)();
  DocumentLaunchView.init<A, B, C>(_:for:actions:onDocumentOpen:background:backgroundAccessoryView:overlayAccessoryView:)(v34, v28, v30, v33, v43, v44, v45, v46, v40, v42, (uint64_t)&v47, 0, 0, 0, 0, v41, v39, MEMORY[0x1E4F41618], MEMORY[0x1E4F417F8],
    MEMORY[0x1E4F417F8],
    v38,
    v37,
    MEMORY[0x1E4F41610],
    MEMORY[0x1E4F417F0],
    MEMORY[0x1E4F417F0]);
  (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v31, a11);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v21 + 8))(v36, a12);
}

uint64_t DocumentLaunchView.init<A, B, C>(_:for:backgroundStyle:_:onDocumentOpen:backgroundAccessoryView:overlayAccessoryView:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, void (*a7)(uint64_t)@<X6>, uint64_t a8@<X7>, void *a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, long long a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  uint64_t v48 = a7;
  uint64_t v49 = a8;
  uint64_t v46 = a4;
  uint64_t v47 = a5;
  uint64_t v43 = a2;
  uint64_t v44 = a3;
  uint64_t v41 = a9;
  uint64_t v42 = a1;
  uint64_t v45 = a10;
  uint64_t v39 = a16;
  uint64_t v40 = a11;
  long long v35 = a19;
  uint64_t v33 = a21;
  uint64_t v34 = a20;
  uint64_t v36 = a17;
  uint64_t v37 = a14;
  uint64_t v38 = a12;
  uint64_t v25 = *(void *)(a18 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v27 = (char *)&v33 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v28 = type metadata accessor for DocumentIntroHelper.ShapeStyleView();
  double v29 = MEMORY[0x1F4188790](v28);
  uint64_t v31 = (char *)&v33 - v30;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v25 + 16))(v27, a6, a18, v29);
  (*(void (**)(char *, char *, uint64_t))(v25 + 32))(v31, v27, a18);
  swift_getWitnessTable();
  uint64_t v50 = AnyView.init<A>(_:)();
  swift_retain();
  swift_retain();
  DocumentLaunchView.init<A, B, C>(_:for:actions:onDocumentOpen:background:backgroundAccessoryView:overlayAccessoryView:)(v42, v43, v44, v46, v47, v48, v49, v45, v41, v40, (uint64_t)&v50, v38, a13, v37, a15, v39, v36, MEMORY[0x1E4F41618], v35,
    *((uint64_t *)&v35 + 1),
    v34,
    v33,
    MEMORY[0x1E4F41610],
    a23,
    a24);
  swift_release();
  swift_release();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v25 + 8))(a6, a18);
}

uint64_t DocumentLaunchView.init<A, B>(_:for:backgroundStyle:_:onDocumentOpen:overlayAccessoryView:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, void (*a7)(uint64_t)@<X6>, uint64_t a8@<X7>, void *a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, long long a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  uint64_t v40 = a7;
  uint64_t v41 = a8;
  uint64_t v38 = a4;
  uint64_t v39 = a5;
  uint64_t v35 = a2;
  uint64_t v36 = a3;
  uint64_t v33 = a9;
  uint64_t v34 = a1;
  uint64_t v37 = a10;
  uint64_t v31 = a14;
  uint64_t v32 = a11;
  uint64_t v30 = a15;
  long long v29 = a17;
  uint64_t v21 = *(void *)(a16 - 8);
  MEMORY[0x1F4188790](a1);
  double v23 = (char *)&v29 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = type metadata accessor for DocumentIntroHelper.ShapeStyleView();
  double v25 = MEMORY[0x1F4188790](v24);
  uint64_t v27 = (char *)&v29 - v26;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v21 + 16))(v23, a6, a16, v25);
  (*(void (**)(char *, char *, uint64_t))(v21 + 32))(v27, v23, a16);
  swift_getWitnessTable();
  uint64_t v42 = AnyView.init<A>(_:)();
  swift_retain();
  DocumentLaunchView.init<A, B, C>(_:for:actions:onDocumentOpen:background:backgroundAccessoryView:overlayAccessoryView:)(v34, v35, v36, v38, v39, v40, v41, v37, v33, v32, (uint64_t)&v42, 0, 0, a12, a13, v31, v30, MEMORY[0x1E4F41618], MEMORY[0x1E4F417F8],
    v29,
    *((uint64_t *)&v29 + 1),
    a18,
    MEMORY[0x1E4F41610],
    MEMORY[0x1E4F417F0],
    a20);
  swift_release();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v21 + 8))(a6, a16);
}

uint64_t DocumentLaunchView.init<A, B>(_:for:backgroundStyle:_:onDocumentOpen:backgroundAccessoryView:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, void (*a7)(uint64_t)@<X6>, uint64_t a8@<X7>, void *a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  uint64_t v42 = a7;
  uint64_t v43 = a8;
  uint64_t v40 = a4;
  uint64_t v41 = a5;
  uint64_t v37 = a2;
  uint64_t v38 = a3;
  uint64_t v35 = a9;
  uint64_t v36 = a1;
  uint64_t v39 = a10;
  uint64_t v33 = a14;
  uint64_t v34 = a11;
  uint64_t v30 = a18;
  uint64_t v31 = a12;
  uint64_t v32 = a15;
  uint64_t v22 = *(void *)(a16 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v24 = (char *)&v30 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = type metadata accessor for DocumentIntroHelper.ShapeStyleView();
  double v26 = MEMORY[0x1F4188790](v25);
  uint64_t v28 = (char *)&v30 - v27;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v22 + 16))(v24, a6, a16, v26);
  (*(void (**)(char *, char *, uint64_t))(v22 + 32))(v28, v24, a16);
  swift_getWitnessTable();
  uint64_t v44 = AnyView.init<A>(_:)();
  swift_retain();
  DocumentLaunchView.init<A, B, C>(_:for:actions:onDocumentOpen:background:backgroundAccessoryView:overlayAccessoryView:)(v36, v37, v38, v40, v41, v42, v43, v39, v35, v34, (uint64_t)&v44, v31, a13, 0, 0, v33, v32, MEMORY[0x1E4F41618], a17,
    MEMORY[0x1E4F417F8],
    v30,
    a19,
    MEMORY[0x1E4F41610],
    a21,
    MEMORY[0x1E4F417F0]);
  swift_release();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v22 + 8))(a6, a16);
}

uint64_t DocumentLaunchView.init<A>(_:for:backgroundStyle:_:onDocumentOpen:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, void (*a7)(uint64_t)@<X6>, uint64_t a8@<X7>, void *a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  uint64_t v34 = a7;
  uint64_t v35 = a8;
  uint64_t v32 = a4;
  uint64_t v33 = a5;
  uint64_t v29 = a2;
  uint64_t v30 = a3;
  uint64_t v27 = a9;
  uint64_t v28 = a1;
  uint64_t v31 = a10;
  uint64_t v26 = a11;
  uint64_t v17 = *(void *)(a14 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v19 = (char *)&v25 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = type metadata accessor for DocumentIntroHelper.ShapeStyleView();
  double v21 = MEMORY[0x1F4188790](v20);
  uint64_t v23 = (char *)&v25 - v22;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v17 + 16))(v19, a6, a14, v21);
  (*(void (**)(char *, char *, uint64_t))(v17 + 32))(v23, v19, a14);
  swift_getWitnessTable();
  uint64_t v36 = AnyView.init<A>(_:)();
  DocumentLaunchView.init<A, B, C>(_:for:actions:onDocumentOpen:background:backgroundAccessoryView:overlayAccessoryView:)(v28, v29, v30, v32, v33, v34, v35, v31, v27, v26, (uint64_t)&v36, 0, 0, 0, 0, a12, a13, MEMORY[0x1E4F41618], MEMORY[0x1E4F417F8],
    MEMORY[0x1E4F417F8],
    a15,
    a16,
    MEMORY[0x1E4F41610],
    MEMORY[0x1E4F417F0],
    MEMORY[0x1E4F417F0]);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v17 + 8))(a6, a14);
}

uint64_t DocumentLaunchView.init<A, B>(_:for:_:onDocumentOpen:backgroundAccessoryView:overlayAccessoryView:)@<X0>(uint64_t a1@<X4>, void (*a2)(uint64_t)@<X5>, uint64_t a3@<X6>, uint64_t a4@<X7>, void *a5@<X8>, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  uint64_t v18 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v20 = v19;
  uint64_t v22 = v21;
  uint64_t v24 = v23 & 1;
  v31[0] = 1;
  swift_retain();
  swift_retain();
  DocumentLaunchView.init<A, B, C>(_:for:actions:onDocumentOpen:background:backgroundAccessoryView:overlayAccessoryView:)(v18, v20, v24, v22, a1, a2, a3, a4, a5, a6, (uint64_t)v31, a7, a8, a9, a10, a11, a12, MEMORY[0x1E4F417F8], a13,
    a14,
    a15,
    a16,
    MEMORY[0x1E4F417F0],
    a17,
    a18);
  swift_release();
  return swift_release();
}

uint64_t DocumentLaunchView.init<A>(_:for:_:onDocumentOpen:overlayAccessoryView:)@<X0>(uint64_t a1@<X4>, void (*a2)(uint64_t)@<X5>, uint64_t a3@<X6>, uint64_t a4@<X7>, void *a5@<X8>, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v14 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v16 = v15;
  uint64_t v18 = v17;
  uint64_t v20 = v19 & 1;
  v27[0] = 1;
  swift_retain();
  DocumentLaunchView.init<A, B, C>(_:for:actions:onDocumentOpen:background:backgroundAccessoryView:overlayAccessoryView:)(v14, v16, v20, v18, a1, a2, a3, a4, a5, a6, (uint64_t)v27, 0, 0, a7, a8, a9, a10, MEMORY[0x1E4F417F8], MEMORY[0x1E4F417F8],
    a11,
    a12,
    a13,
    MEMORY[0x1E4F417F0],
    MEMORY[0x1E4F417F0],
    a14);
  return swift_release();
}

uint64_t DocumentLaunchView.init<A>(_:for:_:onDocumentOpen:backgroundAccessoryView:)@<X0>(uint64_t a1@<X4>, void (*a2)(uint64_t)@<X5>, uint64_t a3@<X6>, uint64_t a4@<X7>, void *a5@<X8>, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v14 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v16 = v15;
  uint64_t v18 = v17;
  uint64_t v20 = v19 & 1;
  v27[0] = 1;
  swift_retain();
  DocumentLaunchView.init<A, B, C>(_:for:actions:onDocumentOpen:background:backgroundAccessoryView:overlayAccessoryView:)(v14, v16, v20, v18, a1, a2, a3, a4, a5, a6, (uint64_t)v27, a7, a8, 0, 0, a9, a10, MEMORY[0x1E4F417F8], a11,
    MEMORY[0x1E4F417F8],
    a12,
    a13,
    MEMORY[0x1E4F417F0],
    a14,
    MEMORY[0x1E4F417F0]);
  return swift_release();
}

uint64_t DocumentLaunchView.init(_:for:_:onDocumentOpen:)@<X0>(uint64_t a1@<X4>, void (*a2)(uint64_t)@<X5>, uint64_t a3@<X6>, uint64_t a4@<X7>, void *a5@<X8>, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v15 = Text.init(_:tableName:bundle:comment:)();
  v20[0] = 1;
  return DocumentLaunchView.init<A, B, C>(_:for:actions:onDocumentOpen:background:backgroundAccessoryView:overlayAccessoryView:)(v15, v17, v16 & 1, v18, a1, a2, a3, a4, a5, a6, (uint64_t)v20, 0, 0, 0, 0, a7, a8, MEMORY[0x1E4F417F8], MEMORY[0x1E4F417F8],
           MEMORY[0x1E4F417F8],
           a9,
           a10,
           MEMORY[0x1E4F417F0],
           MEMORY[0x1E4F417F0],
           MEMORY[0x1E4F417F0]);
}

uint64_t DocumentLaunchView.init<A, B, C>(_:for:_:onDocumentOpen:backgroundAccessoryView:overlayAccessoryView:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void (*a3)(uint64_t)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, void *a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, long long a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  uint64_t v40 = a7;
  uint64_t v41 = a6;
  uint64_t v44 = a4;
  uint64_t v45 = a5;
  uint64_t v42 = a2;
  uint64_t v43 = a3;
  uint64_t v39 = a9;
  uint64_t v37 = a1;
  uint64_t v38 = a12;
  long long v34 = a15;
  uint64_t v32 = a17;
  uint64_t v33 = a16;
  uint64_t v35 = a13;
  uint64_t v36 = a10;
  uint64_t v21 = *(void *)(a14 - 8);
  double v22 = MEMORY[0x1F4188790](a1);
  (*(void (**)(char *, double))(v21 + 16))((char *)&v32 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0), v22);
  uint64_t v24 = Text.init<A>(_:)();
  uint64_t v26 = v25;
  uint64_t v28 = v27;
  uint64_t v30 = v29 & 1;
  v46[0] = 1;
  swift_retain();
  swift_retain();
  DocumentLaunchView.init<A, B, C>(_:for:actions:onDocumentOpen:background:backgroundAccessoryView:overlayAccessoryView:)(v24, v26, v30, v28, v42, v43, v44, v45, v39, v41, (uint64_t)v46, v40, a8, v36, a11, v38, v35, MEMORY[0x1E4F417F8], v34,
    *((uint64_t *)&v34 + 1),
    v33,
    v32,
    MEMORY[0x1E4F417F0],
    a19,
    a20);
  swift_release();
  swift_release();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v21 + 8))(v37, a14);
}

uint64_t DocumentLaunchView.init<A, B>(_:for:_:onDocumentOpen:backgroundAccessoryView:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void (*a3)(uint64_t)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, void *a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  uint64_t v35 = a7;
  uint64_t v36 = a6;
  uint64_t v39 = a4;
  uint64_t v40 = a5;
  uint64_t v37 = a2;
  uint64_t v38 = a3;
  long long v34 = a9;
  uint64_t v32 = a11;
  uint64_t v33 = a10;
  uint64_t v30 = a14;
  uint64_t v31 = a13;
  uint64_t v19 = *(void *)(a12 - 8);
  double v20 = MEMORY[0x1F4188790](a1);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v19 + 16))((char *)&v30 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0), a1, a12, v20);
  uint64_t v22 = Text.init<A>(_:)();
  uint64_t v24 = v23;
  uint64_t v26 = v25;
  uint64_t v28 = v27 & 1;
  char v41 = 1;
  swift_retain();
  DocumentLaunchView.init<A, B, C>(_:for:actions:onDocumentOpen:background:backgroundAccessoryView:overlayAccessoryView:)(v22, v24, v28, v26, v37, v38, v39, v40, v34, v36, (uint64_t)&v41, v35, a8, 0, 0, v33, v32, MEMORY[0x1E4F417F8], v31,
    MEMORY[0x1E4F417F8],
    v30,
    a15,
    MEMORY[0x1E4F417F0],
    a17,
    MEMORY[0x1E4F417F0]);
  swift_release();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v19 + 8))(a1, a12);
}

uint64_t DocumentLaunchView.init<A, B>(_:for:_:onDocumentOpen:overlayAccessoryView:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void (*a3)(uint64_t)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, void *a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, long long a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  uint64_t v33 = a7;
  uint64_t v34 = a6;
  uint64_t v37 = a4;
  uint64_t v38 = a5;
  uint64_t v35 = a2;
  uint64_t v36 = a3;
  uint64_t v32 = a9;
  uint64_t v30 = a11;
  uint64_t v31 = a10;
  long long v29 = a13;
  uint64_t v18 = *(void *)(a12 - 8);
  double v19 = MEMORY[0x1F4188790](a1);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v18 + 16))((char *)&v29 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0), a1, a12, v19);
  uint64_t v21 = Text.init<A>(_:)();
  uint64_t v23 = v22;
  uint64_t v25 = v24;
  uint64_t v27 = v26 & 1;
  char v39 = 1;
  swift_retain();
  DocumentLaunchView.init<A, B, C>(_:for:actions:onDocumentOpen:background:backgroundAccessoryView:overlayAccessoryView:)(v21, v23, v27, v25, v35, v36, v37, v38, v32, v34, (uint64_t)&v39, 0, 0, v33, a8, v31, v30, MEMORY[0x1E4F417F8], MEMORY[0x1E4F417F8],
    v29,
    *((uint64_t *)&v29 + 1),
    a14,
    MEMORY[0x1E4F417F0],
    MEMORY[0x1E4F417F0],
    a16);
  swift_release();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v18 + 8))(a1, a12);
}

uint64_t DocumentLaunchView.init<A>(_:for:_:onDocumentOpen:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void (*a3)(uint64_t)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, void *a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v24 = a6;
  uint64_t v25 = a2;
  uint64_t v27 = a4;
  uint64_t v28 = a5;
  char v26 = a3;
  uint64_t v16 = *(void *)(a10 - 8);
  double v17 = MEMORY[0x1F4188790](a1);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v16 + 16))((char *)&v24 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0), a1, a10, v17);
  uint64_t v19 = Text.init<A>(_:)();
  char v29 = 1;
  DocumentLaunchView.init<A, B, C>(_:for:actions:onDocumentOpen:background:backgroundAccessoryView:overlayAccessoryView:)(v19, v21, v20 & 1, v22, v25, v26, v27, v28, a9, v24, (uint64_t)&v29, 0, 0, 0, 0, a7, a8, MEMORY[0x1E4F417F8], MEMORY[0x1E4F417F8],
    MEMORY[0x1E4F417F8],
    a11,
    a12,
    MEMORY[0x1E4F417F0],
    MEMORY[0x1E4F417F0],
    MEMORY[0x1E4F417F0]);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v16 + 8))(a1, a10);
}

uint64_t DocumentLaunchView.init<A, B>(_:for:_:onDocumentOpen:backgroundAccessoryView:overlayAccessoryView:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, void (*a6)(uint64_t)@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, void *a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  v32[0] = 1;
  swift_retain();
  swift_retain();
  DocumentLaunchView.init<A, B, C>(_:for:actions:onDocumentOpen:background:backgroundAccessoryView:overlayAccessoryView:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, (uint64_t)v32, a11, a12, a13, a14, a15, a16, MEMORY[0x1E4F417F8], a17,
    a18,
    a19,
    a20,
    MEMORY[0x1E4F417F0],
    a21,
    a22);
  swift_release();
  return swift_release();
}

uint64_t DocumentLaunchView.init<A>(_:for:_:onDocumentOpen:backgroundAccessoryView:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, void (*a6)(uint64_t)@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, void *a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  v28[0] = 1;
  swift_retain();
  DocumentLaunchView.init<A, B, C>(_:for:actions:onDocumentOpen:background:backgroundAccessoryView:overlayAccessoryView:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, (uint64_t)v28, a11, a12, 0, 0, a13, a14, MEMORY[0x1E4F417F8], a15,
    MEMORY[0x1E4F417F8],
    a16,
    a17,
    MEMORY[0x1E4F417F0],
    a18,
    MEMORY[0x1E4F417F0]);
  return swift_release();
}

uint64_t DocumentLaunchView.init<A>(_:for:_:onDocumentOpen:overlayAccessoryView:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, void (*a6)(uint64_t)@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, void *a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  v28[0] = 1;
  swift_retain();
  DocumentLaunchView.init<A, B, C>(_:for:actions:onDocumentOpen:background:backgroundAccessoryView:overlayAccessoryView:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, (uint64_t)v28, 0, 0, a11, a12, a13, a14, MEMORY[0x1E4F417F8], MEMORY[0x1E4F417F8],
    a15,
    a16,
    a17,
    MEMORY[0x1E4F417F0],
    MEMORY[0x1E4F417F0],
    a18);
  return swift_release();
}

uint64_t DocumentLaunchView.init(_:for:_:onDocumentOpen:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, void (*a6)(uint64_t)@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, void *a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  char v15 = 1;
  return DocumentLaunchView.init<A, B, C>(_:for:actions:onDocumentOpen:background:backgroundAccessoryView:overlayAccessoryView:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, (uint64_t)&v15, 0, 0, 0, 0, a11, a12, MEMORY[0x1E4F417F8], MEMORY[0x1E4F417F8],
           MEMORY[0x1E4F417F8],
           a13,
           a14,
           MEMORY[0x1E4F417F0],
           MEMORY[0x1E4F417F0],
           MEMORY[0x1E4F417F0]);
}

uint64_t DocumentLaunchView.init<A, B, C>(title:for:_:onDocumentOpen:onDocumentClose:background:backgroundAccessoryView:overlayAccessoryView:)@<X0>(uint64_t a1@<X4>, void (*a2)(uint64_t)@<X5>, uint64_t a3@<X6>, uint64_t a4@<X7>, void *a5@<X8>, uint64_t a6, uint64_t a7, uint64_t a8, void (*a9)(void), uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,long long a22,uint64_t a23)
{
  uint64_t v55 = a3;
  uint64_t v56 = a4;
  uint64_t v53 = a1;
  uint64_t v54 = a2;
  uint64_t v52 = a5;
  uint64_t v58 = a7;
  uint64_t v50 = a18;
  uint64_t v51 = a6;
  uint64_t v47 = a19;
  uint64_t v44 = a21;
  uint64_t v45 = a20;
  long long v43 = a22;
  uint64_t v41 = a23;
  uint64_t v46 = a15;
  uint64_t v48 = a13;
  uint64_t v49 = a11;
  uint64_t v57 = a8;
  uint64_t v42 = a16;
  uint64_t v23 = type metadata accessor for Optional();
  MEMORY[0x1F4188790](v23 - 8);
  uint64_t v25 = (char *)&v39 - v24;
  uint64_t v40 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v39 = v26;
  uint64_t v28 = v27;
  uint64_t v30 = v29 & 1;
  a9();
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(a17 - 8) + 56))(v25, 0, 1, a17);
  swift_retain();
  swift_retain();
  uint64_t v31 = v44;
  uint64_t v32 = v45;
  uint64_t v33 = v42;
  uint64_t v34 = v46;
  uint64_t v35 = v52;
  DocumentLaunchView.init<A, B, C>(_:for:actions:onDocumentOpen:background:backgroundAccessoryView:overlayAccessoryView:)(v40, v39, v30, v28, v53, v54, v55, v56, v52, v51, (uint64_t)v25, v49, a12, v48, a14, v46, v42, a17, v50,
    v47,
    v45,
    v44,
    v43,
    *((uint64_t *)&v43 + 1),
    v41);
  swift_release();
  swift_release();
  uint64_t v59 = v34;
  uint64_t v60 = v33;
  uint64_t v61 = v32;
  uint64_t v62 = v31;
  uint64_t v36 = (void *)((char *)v35 + *(int *)(type metadata accessor for DocumentLaunchView() + 60));
  uint64_t result = outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(*v36);
  uint64_t v38 = v57;
  uint64_t *v36 = v58;
  v36[1] = v38;
  return result;
}

uint64_t closure #1 in DocumentLaunchView.init<A, B, C>(_:for:actions:onDocumentOpen:background:backgroundAccessoryView:overlayAccessoryView:)(uint64_t a1)
{
  MEMORY[0x1F4188790](a1);
  long long v2 = v1[1];
  v6[0] = *v1;
  v6[1] = v2;
  long long v3 = v1[3];
  void v6[2] = v1[2];
  v6[3] = v3;
  v4(v6);
  return AnyView.init<A>(_:)();
}

uint64_t closure #2 in DocumentLaunchView.init<A, B, C>(_:for:actions:onDocumentOpen:background:backgroundAccessoryView:overlayAccessoryView:)(uint64_t a1)
{
  MEMORY[0x1F4188790](a1);
  long long v2 = v1[1];
  v6[0] = *v1;
  v6[1] = v2;
  long long v3 = v1[3];
  void v6[2] = v1[2];
  v6[3] = v3;
  v4(v6);
  return AnyView.init<A>(_:)();
}

uint64_t static ResolvedDocumentLaunchView._makeView(view:inputs:)@<X0>(_DWORD *a1@<X0>, uint64_t *a2@<X1>, void *a3@<X8>)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = *a2;
  int v6 = *((_DWORD *)a2 + 2);
  uint64_t v7 = a2[2];
  int v8 = *((_DWORD *)a2 + 20);
  LODWORD(v15) = *a1;
  type metadata accessor for ResolvedDocumentLaunchView();
  type metadata accessor for _GraphValue();
  long long v14 = *(_OWORD *)(a2 + 5);
  uint64_t v9 = a2[3];
  uint64_t v10 = a2[4];
  long long v13 = *(_OWORD *)(a2 + 7);
  uint64_t v11 = a2[9];
  _GraphValue.value.getter();
  closure #1 in static ResolvedDocumentLaunchView._makeView(view:inputs:)(1);
  AGGraphCreateOffsetAttribute2();
  lazy protocol witness table accessor for type _GraphInputs.DocumentBrowserContextMenuStorageKey and conformance _GraphInputs.DocumentBrowserContextMenuStorageKey();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  PropertyList.subscript.getter();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  type metadata accessor for _EnvironmentKeyWritingModifier<BackgroundContext>(0, &lazy cache variable for type metadata for External<DocumentBrowserContextMenuStorage>, (uint64_t)&type metadata for DocumentBrowserContextMenuStorage, MEMORY[0x1E4F4E778]);
  lazy protocol witness table accessor for type External<DocumentBrowserContextMenuStorage> and conformance External<A>();
  Attribute.init<A>(body:value:flags:update:)();
  type metadata accessor for ResolvedDocumentLaunchView.MakeRepresentable();
  swift_getWitnessTable();
  _GraphValue.init<A>(_:)();
  *(void *)&long long v15 = v5;
  DWORD2(v15) = v6;
  uint64_t v16 = v7;
  uint64_t v17 = v9;
  uint64_t v18 = v10;
  long long v19 = v14;
  long long v20 = v13;
  uint64_t v21 = v11;
  int v22 = v8;
  return static UIViewControllerRepresentable._makeView(view:inputs:)(&v15, a3);
}

uint64_t closure #1 in static ResolvedDocumentLaunchView._makeView(view:inputs:)(uint64_t a1)
{
  _OWORD v5[2] = type metadata accessor for ResolvedDocumentLaunchView();
  uint64_t v6 = type metadata accessor for ResolvedDocumentLaunchView.Configuration();
  uint64_t v2 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(a1, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply, (uint64_t)v5, v6, MEMORY[0x1E4FBC248], v2, MEMORY[0x1E4FBC278], v3);
  return v7;
}

uint64_t *ResolvedDocumentLaunchView.MakeRepresentable.configuration.getter@<X0>(uint64_t a1@<X8>)
{
  type metadata accessor for ResolvedDocumentLaunchView.Configuration();
  uint64_t Value = AGGraphGetValue();
  v14[0] = *(_OWORD *)Value;
  long long v3 = *(_OWORD *)(Value + 64);
  long long v5 = *(_OWORD *)(Value + 16);
  long long v4 = *(_OWORD *)(Value + 32);
  v14[3] = *(_OWORD *)(Value + 48);
  void v14[4] = v3;
  v14[1] = v5;
  v14[2] = v4;
  long long v7 = *(_OWORD *)(Value + 96);
  long long v6 = *(_OWORD *)(Value + 112);
  long long v8 = *(_OWORD *)(Value + 80);
  uint64_t v15 = *(void *)(Value + 128);
  v14[6] = v7;
  v14[7] = v6;
  v14[5] = v8;
  long long v9 = *(_OWORD *)(Value + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(Value + 96);
  *(_OWORD *)(a1 + 112) = v9;
  *(void *)(a1 + 128) = *(void *)(Value + 128);
  long long v10 = *(_OWORD *)(Value + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(Value + 32);
  *(_OWORD *)(a1 + 48) = v10;
  long long v11 = *(_OWORD *)(Value + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(Value + 64);
  *(_OWORD *)(a1 + 80) = v11;
  long long v12 = *(_OWORD *)(Value + 16);
  *(_OWORD *)a1 = *(_OWORD *)Value;
  *(_OWORD *)(a1 + 16) = v12;
  return outlined retain of ResolvedDocumentLaunchView<A>.Configuration((uint64_t *)v14);
}

uint64_t ResolvedDocumentLaunchView.MakeRepresentable.value.getter@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  ResolvedDocumentLaunchView.MakeRepresentable.configuration.getter((uint64_t)&v40);
  uint64_t v24 = v41;
  uint64_t v25 = v40;
  uint64_t v22 = v43;
  char v23 = v42;
  outlined copy of Text?(v40, v41, v42, v43);
  outlined release of ResolvedDocumentLaunchView<B>(&v40);
  ResolvedDocumentLaunchView.MakeRepresentable.configuration.getter((uint64_t)v44);
  uint64_t v21 = v44[12];
  swift_retain();
  outlined release of ResolvedDocumentLaunchView<B>(v44);
  ResolvedDocumentLaunchView.MakeRepresentable.configuration.getter((uint64_t)v45);
  uint64_t v20 = v45[4];
  swift_bridgeObjectRetain();
  outlined release of ResolvedDocumentLaunchView<B>(v45);
  ResolvedDocumentLaunchView.MakeRepresentable.configuration.getter((uint64_t)v46);
  uint64_t v5 = v46[5];
  int v6 = v47;
  uint64_t v7 = v48;
  swift_bridgeObjectRetain();
  outlined release of ResolvedDocumentLaunchView<B>(v46);
  uint64_t v37 = v5;
  int v38 = v6;
  uint64_t v39 = v7;
  if (*(_DWORD *)AGGraphGetValue() == *MEMORY[0x1E4F4E7A0])
  {
    uint64_t v8 = 0;
    unint64_t v18 = 0;
  }
  else
  {
    uint64_t v9 = AGCreateWeakAttribute();
    unint64_t v18 = v9 & 0xFFFFFFFF00000000;
    uint64_t v8 = v9;
  }
  ResolvedDocumentLaunchView.MakeRepresentable.configuration.getter((uint64_t)v27);
  uint64_t v10 = v27[9];
  uint64_t v19 = v27[8];
  swift_retain();
  outlined release of ResolvedDocumentLaunchView<B>(v27);
  ResolvedDocumentLaunchView.MakeRepresentable.configuration.getter((uint64_t)v28);
  uint64_t v11 = v29;
  uint64_t v12 = v30;
  outlined copy of AppIntentExecutor?(v29);
  outlined release of ResolvedDocumentLaunchView<B>(v28);
  ResolvedDocumentLaunchView.MakeRepresentable.configuration.getter((uint64_t)v31);
  uint64_t v13 = v32;
  uint64_t v14 = v33;
  outlined copy of AppIntentExecutor?(v32);
  outlined release of ResolvedDocumentLaunchView<B>(v31);
  ResolvedDocumentLaunchView.MakeRepresentable.configuration.getter((uint64_t)v34);
  uint64_t v15 = v35;
  uint64_t v16 = v36;
  outlined copy of AppIntentExecutor?(v35);
  outlined release of ResolvedDocumentLaunchView<B>(v34);
  return CustomizableURLDocumentViewControllerRepresentable.init<A>(title:background:contentTypes:actions:contextMenuActions:onDocumentOpen:onDocumentClose:backgroundAccessoryView:overlayAccessoryView:)(v25, v24, v23, v22, v21, v20, (uint64_t)&v37, v18 | v8, a3, v19, v10, v11, v12, v13, v14, v15, v16, a1, a2);
}

uint64_t CustomizableURLDocumentViewControllerRepresentable.init<A>(title:background:contentTypes:actions:contextMenuActions:onDocumentOpen:onDocumentClose:backgroundAccessoryView:overlayAccessoryView:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  uint64_t v25 = *(void *)a7;
  int v35 = *(_DWORD *)(a7 + 8);
  uint64_t v26 = *(void *)(a7 + 16);
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v39 = swift_getKeyPath();
  if (a4)
  {
    char v27 = a3 & 1;
    uint64_t v37 = a2;
    uint64_t v38 = a1;
    uint64_t v36 = a4;
  }
  else
  {
    Swift::String v43 = currentAppName()();
    lazy protocol witness table accessor for type String and conformance String();
    uint64_t v28 = Text.init<A>(_:)();
    uint64_t v37 = v29;
    uint64_t v38 = v28;
    uint64_t v36 = v30;
    char v27 = v31 & 1;
  }
  outlined copy of Text?(a1, a2, a3, a4);
  swift_retain();
  v43._countAndFlagsBits = v25;
  LODWORD(v43._object) = v35;
  uint64_t v44 = v26;
  uint64_t v32 = specialized static DocumentLaunchScreenAction.makeActions(from:)((uint64_t)&v43);
  swift_release();
  outlined consume of Text?(a1, a2, a3, a4);
  swift_bridgeObjectRelease();
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(0);
  uint64_t v33 = (void *)swift_allocObject();
  uint64_t v33[2] = a18;
  v33[3] = a19;
  v33[4] = a10;
  v33[5] = a11;
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(0);
  uint64_t result = outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(0);
  char v46 = 0;
  char v45 = 0;
  *(void *)a9 = v38;
  *(void *)(a9 + 8) = v37;
  *(unsigned char *)(a9 + 16) = v27;
  *(void *)(a9 + 24) = v36;
  *(void *)(a9 + 32) = partial apply for closure #1 in CustomizableURLDocumentViewControllerRepresentable.init<A>(title:background:contentTypes:actions:contextMenuActions:onDocumentOpen:onDocumentClose:backgroundAccessoryView:overlayAccessoryView:);
  *(void *)(a9 + 40) = v33;
  *(void *)(a9 + 48) = a12;
  *(void *)(a9 + 56) = a13;
  *(void *)(a9 + 64) = a5;
  *(void *)(a9 + 72) = v32;
  *(void *)(a9 + 80) = a8;
  *(void *)(a9 + 88) = a6;
  *(void *)(a9 + 96) = a14;
  *(void *)(a9 + 104) = a15;
  *(void *)(a9 + 112) = a16;
  *(void *)(a9 + 120) = a17;
  *(void *)(a9 + 128) = KeyPath;
  *(void *)(a9 + 136) = 0;
  *(unsigned char *)(a9 + 144) = v46;
  *(void *)(a9 + 152) = v39;
  *(unsigned char *)(a9 + 160) = v45;
  return result;
}

uint64_t protocol witness for static Rule.initialValue.getter in conformance ResolvedDocumentLaunchView<A>.MakeRepresentable@<X0>(uint64_t a1@<X8>)
{
  _s7SwiftUI50CustomizableURLDocumentViewControllerRepresentable33_C5D9187052031207E3ECDA2B55F1D5F4LLVSgWOi0_((uint64_t)v3);
  return outlined init with take of CustomizableURLDocumentViewControllerRepresentable?((uint64_t)v3, a1);
}

uint64_t protocol witness for Rule.value.getter in conformance ResolvedDocumentLaunchView<A>.MakeRepresentable@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return ResolvedDocumentLaunchView.MakeRepresentable.value.getter(*(void *)(a1 + 16), *(void *)(a1 + 24), a2);
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance ResolvedDocumentLaunchView<A>@<X0>(_DWORD *a1@<X0>, uint64_t *a2@<X1>, void *a3@<X8>)
{
  return static ResolvedDocumentLaunchView._makeView(view:inputs:)(a1, a2, a3);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance ResolvedDocumentLaunchView<A>()
{
  swift_getWitnessTable();

  return static UnaryView._makeViewList(view:inputs:)();
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance ResolvedDocumentLaunchView<A>()
{
  return static UnaryView._viewListCount(inputs:)();
}

void protocol witness for View.body.getter in conformance ResolvedDocumentLaunchView<A>()
{
}

double DocumentLaunchGeometryProxy.frame.getter()
{
  return *(double *)v0;
}

void DocumentLaunchGeometryProxy.frame.setter(double a1, double a2, double a3, double a4)
{
  *long long v4 = a1;
  v4[1] = a2;
  _OWORD v4[2] = a3;
  long long v4[3] = a4;
}

uint64_t (*DocumentLaunchGeometryProxy.frame.modify())(void, void, void, void)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

double DocumentLaunchGeometryProxy.titleViewFrame.getter()
{
  return *(double *)(v0 + 32);
}

void DocumentLaunchGeometryProxy.titleViewFrame.setter(double a1, double a2, double a3, double a4)
{
  v4[4] = a1;
  void v4[5] = a2;
  v4[6] = a3;
  v4[7] = a4;
}

uint64_t (*DocumentLaunchGeometryProxy.titleViewFrame.modify())(void, void, void, void)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t _IntroDocumentView<>.init(_:for:_:onDocumentOpen:)@<X0>(uint64_t a1@<X4>, void (*a2)(uint64_t)@<X5>, uint64_t a3@<X6>, uint64_t a4@<X7>, void *a5@<X8>, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v19 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v12 = v11;
  uint64_t v14 = v13;
  uint64_t v16 = v15 & 1;
  uint64_t v17 = (void *)swift_allocObject();
  v17[2] = a7;
  void v17[3] = a8;
  long long v17[4] = a9;
  v17[5] = a10;
  v17[6] = a4;
  v17[7] = a6;
  swift_retain();
  _IntroDocumentView.init<A>(_:for:_:onDocumentOpen:background:accessories:)(v19, v12, v16, v14, a1, a2, a3, (uint64_t)partial apply for closure #1 in _IntroDocumentView<>.init(_:for:_:onDocumentOpen:), a5, (uint64_t)v17, (void (*)(uint64_t))destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation, 0, (void (*)(void))closure #3 in _IntroDocumentView<>.init(_:for:_:onDocumentOpen:), 0, a7, a8, MEMORY[0x1E4F417F8], (uint64_t)&type metadata for EmptyDocumentIntroAccessory, a9,
    a10,
    MEMORY[0x1E4F417F0],
    (uint64_t)&protocol witness table for EmptyDocumentIntroAccessory);

  return swift_release();
}

uint64_t sub_188261DB4()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t type metadata accessor for _IntroDocumentView()
{
  return swift_getGenericMetadata();
}

uint64_t _IntroDocumentView<>.init(for:_:onDocumentOpen:)@<X0>(uint64_t a1@<X0>, void (*a2)(uint64_t)@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, void *a9@<X8>, uint64_t a10)
{
  unint64_t v18 = (void *)swift_allocObject();
  v18[2] = a6;
  v18[3] = a7;
  v18[4] = a8;
  v18[5] = a10;
  void v18[6] = a4;
  v18[7] = a5;
  swift_retain();
  _IntroDocumentView.init<A>(_:for:_:onDocumentOpen:background:accessories:)(0, 0, 0, 0, a1, a2, a3, (uint64_t)partial apply for closure #1 in _IntroDocumentView<>.init(_:for:_:onDocumentOpen:), a9, (uint64_t)v18, (void (*)(uint64_t))destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation, 0, (void (*)(void))closure #3 in _IntroDocumentView<>.init(_:for:_:onDocumentOpen:), 0, a6, a7, MEMORY[0x1E4F417F8], (uint64_t)&type metadata for EmptyDocumentIntroAccessory, a8,
    a10,
    MEMORY[0x1E4F417F0],
    (uint64_t)&protocol witness table for EmptyDocumentIntroAccessory);

  return swift_release();
}

uint64_t closure #1 in _IntroDocumentView<>.init(_:for:_:onDocumentOpen:)@<X0>(uint64_t a1@<X0>, void (*a2)(uint64_t)@<X1>, uint64_t a3@<X2>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  v19[1] = a3;
  uint64_t v20 = a2;
  uint64_t v21 = a5;
  uint64_t v7 = *(void *)(a4 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v9 = (char *)v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v10);
  uint64_t v12 = (char *)v19 - v11;
  _s10Foundation3URLVSgMaTm_9(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<URL>, MEMORY[0x1E4F276F0], MEMORY[0x1E4FBBE00]);
  uint64_t v13 = type metadata accessor for URL();
  uint64_t v14 = *(void *)(v13 - 8);
  unint64_t v15 = (*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80);
  uint64_t v16 = swift_allocObject();
  *(_OWORD *)(v16 + 16) = xmmword_18834BB80;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v14 + 16))(v16 + v15, a1, v13);
  v20(v16);
  swift_bridgeObjectRelease();
  static ViewBuilder.buildExpression<A>(_:)(v9);
  uint64_t v17 = *(void (**)(char *, uint64_t))(v7 + 8);
  v17(v9, a4);
  static ViewBuilder.buildExpression<A>(_:)(v12);
  return ((uint64_t (*)(char *, uint64_t))v17)(v12, a4);
}

uint64_t partial apply for closure #1 in _IntroDocumentView<>.init(_:for:_:onDocumentOpen:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return closure #1 in _IntroDocumentView<>.init(_:for:_:onDocumentOpen:)(a1, *(void (**)(uint64_t))(v2 + 48), *(void *)(v2 + 56), *(void *)(v2 + 24), a2);
}

uint64_t _IntroDocumentView<>.init<A>(_:for:_:onDocumentOpen:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void (*a3)(uint64_t)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, void *a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v30 = a5;
  uint64_t v31 = a1;
  uint64_t v34 = a3;
  uint64_t v35 = a4;
  uint64_t v32 = a9;
  uint64_t v33 = a2;
  uint64_t v16 = *(void *)(a10 - 8);
  double v17 = MEMORY[0x1F4188790](a1);
  (*(void (**)(char *, double))(v16 + 16))((char *)&v26 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0), v17);
  uint64_t v19 = Text.init<A>(_:)();
  uint64_t v28 = v20;
  uint64_t v29 = v19;
  uint64_t v27 = v21;
  uint64_t v23 = v22 & 1;
  uint64_t v24 = (void *)swift_allocObject();
  v24[2] = a7;
  uint64_t v24[3] = a8;
  v24[4] = a10;
  v24[5] = a11;
  v24[6] = a12;
  v24[7] = a13;
  v24[8] = v30;
  v24[9] = a6;
  swift_retain();
  _IntroDocumentView.init<A>(_:for:_:onDocumentOpen:background:accessories:)(v29, v28, v23, v27, v33, v34, v35, (uint64_t)partial apply for closure #1 in _IntroDocumentView<>.init<A>(_:for:_:onDocumentOpen:), v32, (uint64_t)v24, (void (*)(uint64_t))destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation, 0, (void (*)(void))closure #3 in _IntroDocumentView<>.init(_:for:_:onDocumentOpen:), 0, a7, a8, MEMORY[0x1E4F417F8], (uint64_t)&type metadata for EmptyDocumentIntroAccessory, a11,
    a12,
    MEMORY[0x1E4F417F0],
    (uint64_t)&protocol witness table for EmptyDocumentIntroAccessory);
  swift_release();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v16 + 8))(v31, a10);
}

uint64_t sub_188262384()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t _IntroDocumentView.init<A>(_:for:_:onDocumentOpen:background:accessories:)@<X0>(uint64_t a1@<X4>, void (*a2)(uint64_t)@<X5>, uint64_t a3@<X6>, uint64_t a4@<X7>, void *a5@<X8>, uint64_t a6, void (*a7)(uint64_t), uint64_t a8, void (*a9)(void), uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  uint64_t v18 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v22 = v21 & 1;

  return _IntroDocumentView.init<A>(_:for:_:onDocumentOpen:background:accessories:)(v18, v19, v22, v20, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15,
           a16,
           a17,
           a18);
}

uint64_t _IntroDocumentView.init<A, B>(_:for:_:onDocumentOpen:background:accessories:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void (*a3)(uint64_t)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, void (*a7)(uint64_t)@<X6>, uint64_t a8@<X7>, void *a9@<X8>, long long a10, long long a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  uint64_t v33 = a8;
  uint64_t v34 = a7;
  uint64_t v35 = a6;
  uint64_t v36 = a2;
  uint64_t v38 = a4;
  uint64_t v39 = a5;
  uint64_t v37 = a3;
  uint64_t v32 = a9;
  long long v30 = a11;
  long long v31 = a10;
  uint64_t v29 = a14;
  uint64_t v20 = *(void *)(a13 - 8);
  double v21 = MEMORY[0x1F4188790](a1);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v20 + 16))((char *)&v28 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0), a1, a13, v21);
  uint64_t v23 = Text.init<A>(_:)();
  _IntroDocumentView.init<A>(_:for:_:onDocumentOpen:background:accessories:)(v23, v25, v24 & 1, v26, v36, v37, v38, v39, v32, v35, v34, v33, (void (*)(void))v31, *((uint64_t *)&v31 + 1), v30, *((uint64_t *)&v30 + 1), a12, v29, a15,
    a16,
    a17,
    a19);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v20 + 8))(a1, a13);
}

uint64_t _IntroDocumentView.init(_:for:_:onDocumentOpen:background:)@<X0>(uint64_t a1@<X4>, void (*a2)(uint64_t)@<X5>, uint64_t a3@<X6>, uint64_t a4@<X7>, void *a5@<X8>, uint64_t a6, void (*a7)(uint64_t), uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v19 = Text.init(_:tableName:bundle:comment:)();
  return _IntroDocumentView.init<A>(_:for:_:onDocumentOpen:background:accessories:)(v19, v21, v20 & 1, v22, a1, a2, a3, a4, a5, a6, a7, a8, (void (*)(void))closure #3 in _IntroDocumentView<>.init(_:for:_:onDocumentOpen:), 0, a9, a10, a11, (uint64_t)&type metadata for EmptyDocumentIntroAccessory, a12,
           a13,
           a14,
           (uint64_t)&protocol witness table for EmptyDocumentIntroAccessory);
}

uint64_t _IntroDocumentView<>.init<A, B>(_:for:backgroundStyle:_:onDocumentOpen:accessories:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, void (*a7)(uint64_t)@<X6>, uint64_t a8@<X7>, void *a9@<X8>, uint64_t a10, uint64_t a11, void (*a12)(void), uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  uint64_t v24 = a14;
  uint64_t v25 = a15;
  uint64_t v26 = a16;
  uint64_t v27 = a17;
  uint64_t v28 = a18;
  uint64_t v29 = a19;
  uint64_t v30 = a20;
  uint64_t v31 = a21;
  uint64_t v32 = a6;
  _IntroDocumentView.init<A>(_:for:_:onDocumentOpen:background:accessories:)(a1, a2, a3, a4, a5, a7, a8, a10, a9, a11, (void (*)(uint64_t))partial apply for closure #1 in _IntroDocumentView<>.init<A, B>(_:for:backgroundStyle:_:onDocumentOpen:accessories:), (uint64_t)v23, a12, a13, a14, a15, MEMORY[0x1E4F41618], a17, a18,
    a19,
    MEMORY[0x1E4F41610],
    a21);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a16 - 8) + 8))(a6, a16);
}

uint64_t closure #1 in _IntroDocumentView<>.init<A, B>(_:for:backgroundStyle:_:onDocumentOpen:accessories:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t *a3@<X8>)
{
  uint64_t v6 = *(void *)(a2 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for DocumentIntroHelper.ShapeStyleView();
  double v10 = MEMORY[0x1F4188790](v9);
  uint64_t v12 = (char *)&v14 - v11;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v6 + 16))(v8, a1, a2, v10);
  (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v12, v8, a2);
  swift_getWitnessTable();
  uint64_t result = AnyView.init<A>(_:)();
  *a3 = result;
  return result;
}

uint64_t partial apply for closure #1 in _IntroDocumentView<>.init<A, B>(_:for:backgroundStyle:_:onDocumentOpen:accessories:)@<X0>(uint64_t *a1@<X8>)
{
  return closure #1 in _IntroDocumentView<>.init<A, B>(_:for:backgroundStyle:_:onDocumentOpen:accessories:)(*(void *)(v1 + 80), *(void *)(v1 + 32), a1);
}

uint64_t _IntroDocumentView<>.init<A, B>(_:for:backgroundStyle:_:onDocumentOpen:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void (*a4)(uint64_t)@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, void *a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  uint64_t v29 = a7;
  uint64_t v30 = a2;
  uint64_t v32 = a5;
  uint64_t v33 = a6;
  uint64_t v31 = a4;
  uint64_t v26 = a3;
  uint64_t v27 = a1;
  uint64_t v28 = a9;
  uint64_t v17 = *(void *)(a11 - 8);
  double v18 = MEMORY[0x1F4188790](a1);
  (*(void (**)(char *, double))(v17 + 16))((char *)&v26 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0), v18);
  uint64_t v20 = Text.init<A>(_:)();
  uint64_t v35 = a8;
  uint64_t v36 = a10;
  uint64_t v37 = a11;
  uint64_t v38 = a12;
  uint64_t v39 = a13;
  uint64_t v40 = a14;
  uint64_t v41 = a15;
  uint64_t v42 = a16;
  uint64_t v22 = v26;
  uint64_t v43 = v26;
  _IntroDocumentView.init<A>(_:for:_:onDocumentOpen:background:accessories:)(v20, v23, v21 & 1, v24, v30, v31, v32, v33, v28, v29, (void (*)(uint64_t))partial apply for closure #1 in _IntroDocumentView<>.init<A, B>(_:for:backgroundStyle:_:onDocumentOpen:), (uint64_t)v34, (void (*)(void))closure #3 in _IntroDocumentView<>.init(_:for:_:onDocumentOpen:), 0, a8, a10, MEMORY[0x1E4F41618], (uint64_t)&type metadata for EmptyDocumentIntroAccessory, a13,
    a14,
    MEMORY[0x1E4F41610],
    (uint64_t)&protocol witness table for EmptyDocumentIntroAccessory);
  (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v27, a11);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a12 - 8) + 8))(v22, a12);
}

uint64_t partial apply for closure #1 in _IntroDocumentView<>.init<A, B>(_:for:backgroundStyle:_:onDocumentOpen:)@<X0>(uint64_t *a1@<X8>)
{
  return closure #1 in _IntroDocumentView<>.init<A, B>(_:for:backgroundStyle:_:onDocumentOpen:)(*(void *)(v1 + 80), *(void *)(v1 + 40), a1);
}

uint64_t closure #1 in _IntroDocumentView<>.init<A>(_:for:backgroundStyle:_:onDocumentOpen:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t *a3@<X8>)
{
  uint64_t v6 = *(void *)(a2 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for DocumentIntroHelper.ShapeStyleView();
  double v10 = MEMORY[0x1F4188790](v9);
  uint64_t v12 = (char *)&v14 - v11;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v6 + 16))(v8, a1, a2, v10);
  (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v12, v8, a2);
  swift_getWitnessTable();
  uint64_t result = AnyView.init<A>(_:)();
  *a3 = result;
  return result;
}

uint64_t partial apply for closure #1 in _IntroDocumentView<>.init<A>(_:for:backgroundStyle:_:onDocumentOpen:)@<X0>(uint64_t *a1@<X8>)
{
  return closure #1 in _IntroDocumentView<>.init<A>(_:for:backgroundStyle:_:onDocumentOpen:)(*(void *)(v1 + 64), *(void *)(v1 + 32), a1);
}

uint64_t associated type witness table accessor for View.Body : View in DocumentLaunchView<A, B>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for View.Body : View in DefaultDocumentGroupLaunchActions()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for View.Body : View in _IntroDocumentView<A, B, C>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t destroy for DocumentLaunchView(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(*(void *)(a2 + 16) - 8);
  uint64_t v5 = v4 + 8;
  unint64_t v6 = (a1 + *(unsigned __int8 *)(v4 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  (*(void (**)(unint64_t))(v4 + 8))(v6);
  unint64_t v7 = (*(void *)(v5 + 56) + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_release();
  uint64_t v8 = (void *)((v7 + 23) & 0xFFFFFFFFFFFFFFF8);
  if (*v8 >= 0xFFFFFFFFuLL) {
    swift_release();
  }
  unint64_t v9 = ((unint64_t)v8 + 23) & 0xFFFFFFFFFFFFFFF8;
  if (*(void *)(v9 + 24) >= 0xFFFFFFFFuLL)
  {
    outlined consume of Text.Storage(*(void *)v9, *(void *)(v9 + 8), *(unsigned char *)(v9 + 16));
    swift_bridgeObjectRelease();
  }
  uint64_t result = swift_release();
  uint64_t v11 = (void *)((((v9 + 39) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8);
  if (*v11 >= 0xFFFFFFFFuLL) {
    uint64_t result = swift_release();
  }
  if (*(void *)(((unint64_t)v11 + 23) & 0xFFFFFFFFFFFFFFF8) >= 0xFFFFFFFFuLL)
  {
    return swift_release();
  }
  return result;
}

void *initializeWithCopy for DocumentLaunchView(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(void *)(a3 + 16);
  uint64_t v5 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);
  uint64_t v6 = *(void *)(v4 - 8) + 16;
  uint64_t v7 = *(unsigned __int8 *)(*(void *)(v4 - 8) + 80);
  uint64_t v8 = ((unint64_t)a1 + v7 + 8) & ~v7;
  uint64_t v9 = ((unint64_t)a2 + v7 + 8) & ~v7;
  swift_bridgeObjectRetain();
  v5(v8, v9, v4);
  uint64_t v10 = *(void *)(v6 + 48) + 7;
  uint64_t v11 = (void *)((v10 + v8) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v12 = (void *)((v10 + v9) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v13 = v12[1];
  *uint64_t v11 = *v12;
  v11[1] = v13;
  unint64_t v14 = ((unint64_t)v11 + 23) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v15 = (unint64_t *)(((unint64_t)v12 + 23) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v16 = *v15;
  swift_retain();
  if (v16 < 0xFFFFFFFF)
  {
    *(_OWORD *)unint64_t v14 = *(_OWORD *)v15;
  }
  else
  {
    unint64_t v17 = v15[1];
    *(void *)unint64_t v14 = v16;
    *(void *)(v14 + 8) = v17;
    swift_retain();
  }
  unint64_t v18 = (v14 + 23) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v19 = ((unint64_t)v15 + 23) & 0xFFFFFFFFFFFFFFF8;
  if (*(void *)(v19 + 24) < 0xFFFFFFFFuLL)
  {
    long long v23 = *(_OWORD *)(v19 + 16);
    *(_OWORD *)unint64_t v18 = *(_OWORD *)v19;
    *(_OWORD *)(v18 + 16) = v23;
  }
  else
  {
    uint64_t v20 = *(void *)v19;
    uint64_t v21 = *(void *)(v19 + 8);
    char v22 = *(unsigned char *)(v19 + 16);
    outlined copy of Text.Storage(*(void *)v19, v21, v22);
    *(void *)unint64_t v18 = v20;
    *(void *)(v18 + 8) = v21;
    *(unsigned char *)(v18 + 16) = v22;
    *(void *)(v18 + 24) = *(void *)(v19 + 24);
    swift_bridgeObjectRetain();
  }
  uint64_t v24 = (void *)((v19 + 39) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v25 = (void *)((v18 + 39) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v25 = *v24;
  unint64_t v26 = ((unint64_t)v25 + 15) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v27 = (unint64_t *)(((unint64_t)v24 + 15) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v28 = *v27;
  swift_retain();
  if (v28 < 0xFFFFFFFF)
  {
    *(_OWORD *)unint64_t v26 = *(_OWORD *)v27;
  }
  else
  {
    unint64_t v29 = v27[1];
    *(void *)unint64_t v26 = v28;
    *(void *)(v26 + 8) = v29;
    swift_retain();
  }
  unint64_t v30 = (v26 + 23) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v31 = ((unint64_t)v27 + 23) & 0xFFFFFFFFFFFFFFF8;
  if (*(void *)v31 < 0xFFFFFFFFuLL)
  {
    *(_OWORD *)unint64_t v30 = *(_OWORD *)v31;
  }
  else
  {
    uint64_t v32 = *(void *)(v31 + 8);
    *(void *)unint64_t v30 = *(void *)v31;
    *(void *)(v30 + 8) = v32;
    swift_retain();
  }
  return a1;
}

void *assignWithCopy for DocumentLaunchView(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v7 = v6 + 24;
  uint64_t v8 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v9 = ((unint64_t)a1 + v8 + 8) & ~v8;
  uint64_t v10 = ((unint64_t)a2 + v8 + 8) & ~v8;
  (*(void (**)(uint64_t, uint64_t))(v6 + 24))(v9, v10);
  uint64_t v11 = *(void *)(v7 + 40) + 7;
  uint64_t v12 = (void *)((v11 + v9) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v13 = (void *)((v11 + v10) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v14 = v13[1];
  *uint64_t v12 = *v13;
  v12[1] = v14;
  swift_retain();
  swift_release();
  unint64_t v15 = (void *)(((unint64_t)v12 + 23) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v16 = (unint64_t *)(((unint64_t)v13 + 23) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v17 = *v16;
  if (*v15 < 0xFFFFFFFFuLL)
  {
    if (v17 >= 0xFFFFFFFF)
    {
      unint64_t v19 = v16[1];
      *unint64_t v15 = v17;
      v15[1] = v19;
      swift_retain();
      goto LABEL_8;
    }
  }
  else
  {
    if (v17 >= 0xFFFFFFFF)
    {
      unint64_t v18 = v16[1];
      *unint64_t v15 = v17;
      v15[1] = v18;
      swift_retain();
      swift_release();
      goto LABEL_8;
    }
    swift_release();
  }
  *(_OWORD *)unint64_t v15 = *(_OWORD *)v16;
LABEL_8:
  unint64_t v20 = ((unint64_t)v15 + 23) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v21 = ((unint64_t)v16 + 23) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v22 = *(void *)(v21 + 24);
  if (*(void *)(v20 + 24) < 0xFFFFFFFFuLL)
  {
    if (v22 >= 0xFFFFFFFF)
    {
      uint64_t v29 = *(void *)v21;
      uint64_t v30 = *(void *)(v21 + 8);
      char v31 = *(unsigned char *)(v21 + 16);
      outlined copy of Text.Storage(*(void *)v21, v30, v31);
      *(void *)unint64_t v20 = v29;
      *(void *)(v20 + 8) = v30;
      *(unsigned char *)(v20 + 16) = v31;
      *(void *)(v20 + 24) = *(void *)(v21 + 24);
      swift_bridgeObjectRetain();
      goto LABEL_15;
    }
  }
  else
  {
    if (v22 >= 0xFFFFFFFF)
    {
      uint64_t v23 = *(void *)v21;
      uint64_t v24 = *(void *)(v21 + 8);
      char v25 = *(unsigned char *)(v21 + 16);
      outlined copy of Text.Storage(*(void *)v21, v24, v25);
      uint64_t v26 = *(void *)v20;
      uint64_t v27 = *(void *)(v20 + 8);
      char v28 = *(unsigned char *)(v20 + 16);
      *(void *)unint64_t v20 = v23;
      *(void *)(v20 + 8) = v24;
      *(unsigned char *)(v20 + 16) = v25;
      outlined consume of Text.Storage(v26, v27, v28);
      *(void *)(v20 + 24) = *(void *)(v21 + 24);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      goto LABEL_15;
    }
    outlined consume of Text.Storage(*(void *)v20, *(void *)(v20 + 8), *(unsigned char *)(v20 + 16));
    swift_bridgeObjectRelease();
  }
  long long v32 = *(_OWORD *)(v21 + 16);
  *(_OWORD *)unint64_t v20 = *(_OWORD *)v21;
  *(_OWORD *)(v20 + 16) = v32;
LABEL_15:
  uint64_t v33 = (void *)((v20 + 39) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v34 = (void *)((v21 + 39) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v33 = *v34;
  swift_retain();
  swift_release();
  uint64_t v35 = (void *)(((unint64_t)v33 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v36 = (unint64_t *)(((unint64_t)v34 + 15) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v37 = *v36;
  if (*v35 < 0xFFFFFFFFuLL)
  {
    if (v37 >= 0xFFFFFFFF)
    {
      unint64_t v39 = v36[1];
      *uint64_t v35 = v37;
      v35[1] = v39;
      swift_retain();
      goto LABEL_22;
    }
  }
  else
  {
    if (v37 >= 0xFFFFFFFF)
    {
      unint64_t v38 = v36[1];
      *uint64_t v35 = v37;
      v35[1] = v38;
      swift_retain();
      swift_release();
      goto LABEL_22;
    }
    swift_release();
  }
  *(_OWORD *)uint64_t v35 = *(_OWORD *)v36;
LABEL_22:
  uint64_t v40 = (void *)(((unint64_t)v35 + 23) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v41 = (unint64_t *)(((unint64_t)v36 + 23) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v42 = *v41;
  if (*v40 < 0xFFFFFFFFuLL)
  {
    if (v42 >= 0xFFFFFFFF)
    {
      unint64_t v44 = v41[1];
      *uint64_t v40 = v42;
      v40[1] = v44;
      swift_retain();
      return a1;
    }
LABEL_28:
    *(_OWORD *)uint64_t v40 = *(_OWORD *)v41;
    return a1;
  }
  if (v42 < 0xFFFFFFFF)
  {
    swift_release();
    goto LABEL_28;
  }
  unint64_t v43 = v41[1];
  *uint64_t v40 = v42;
  v40[1] = v43;
  swift_retain();
  swift_release();
  return a1;
}

void *initializeWithTake for DocumentLaunchView(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v5 = v4 + 32;
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v7 = ((unint64_t)a1 + v6 + 8) & ~v6;
  uint64_t v8 = ((unint64_t)a2 + v6 + 8) & ~v6;
  (*(void (**)(uint64_t, uint64_t))(v4 + 32))(v7, v8);
  uint64_t v9 = *(void *)(v5 + 32) + 7;
  uint64_t v10 = (_OWORD *)((v9 + v7) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v11 = (_OWORD *)((v9 + v8) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v10 = *v11;
  unint64_t v12 = ((unint64_t)v10 + 23) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v13 = ((unint64_t)v11 + 23) & 0xFFFFFFFFFFFFFFF8;
  if (*(void *)v13 < 0xFFFFFFFFuLL)
  {
    *(_OWORD *)unint64_t v12 = *(_OWORD *)v13;
  }
  else
  {
    uint64_t v14 = *(void *)(v13 + 8);
    *(void *)unint64_t v12 = *(void *)v13;
    *(void *)(v12 + 8) = v14;
  }
  unint64_t v15 = (_OWORD *)((v12 + 23) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v16 = (_OWORD *)((v13 + 23) & 0xFFFFFFFFFFFFFFF8);
  long long v17 = v16[1];
  *unint64_t v15 = *v16;
  v15[1] = v17;
  unint64_t v18 = (void *)(((unint64_t)v15 + 39) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v19 = (void *)(((unint64_t)v16 + 39) & 0xFFFFFFFFFFFFFFF8);
  *unint64_t v18 = *v19;
  unint64_t v20 = ((unint64_t)v18 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v21 = ((unint64_t)v19 + 15) & 0xFFFFFFFFFFFFFFF8;
  if (*(void *)v21 < 0xFFFFFFFFuLL)
  {
    *(_OWORD *)unint64_t v20 = *(_OWORD *)v21;
  }
  else
  {
    uint64_t v22 = *(void *)(v21 + 8);
    *(void *)unint64_t v20 = *(void *)v21;
    *(void *)(v20 + 8) = v22;
  }
  unint64_t v23 = (v20 + 23) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v24 = (uint64_t *)((v21 + 23) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v25 = *v24;
  if ((unint64_t)*v24 < 0xFFFFFFFF)
  {
    *(_OWORD *)unint64_t v23 = *(_OWORD *)v24;
  }
  else
  {
    uint64_t v26 = v24[1];
    *(void *)unint64_t v23 = v25;
    *(void *)(v23 + 8) = v26;
  }
  return a1;
}

void *assignWithTake for DocumentLaunchView(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v7 = v6 + 40;
  uint64_t v8 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v9 = ((unint64_t)a1 + v8 + 8) & ~v8;
  uint64_t v10 = ((unint64_t)a2 + v8 + 8) & ~v8;
  (*(void (**)(uint64_t, uint64_t))(v6 + 40))(v9, v10);
  uint64_t v11 = *(void *)(v7 + 24) + 7;
  unint64_t v12 = (_OWORD *)((v11 + v9) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v13 = v11 + v10;
  unint64_t v14 = (v13 & 0xFFFFFFFFFFFFFFF8) + 23;
  *unint64_t v12 = *(_OWORD *)(v13 & 0xFFFFFFFFFFFFFFF8);
  swift_release();
  unint64_t v15 = (void *)(((unint64_t)v12 + 23) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v16 = (unint64_t *)(v14 & 0xFFFFFFFFFFFFFFF8);
  unint64_t v17 = *v16;
  if (*v15 < 0xFFFFFFFFuLL)
  {
    if (v17 >= 0xFFFFFFFF)
    {
      unint64_t v19 = v16[1];
      *unint64_t v15 = v17;
      v15[1] = v19;
      goto LABEL_8;
    }
  }
  else
  {
    if (v17 >= 0xFFFFFFFF)
    {
      unint64_t v18 = v16[1];
      *unint64_t v15 = v17;
      v15[1] = v18;
      swift_release();
      goto LABEL_8;
    }
    swift_release();
  }
  *(_OWORD *)unint64_t v15 = *(_OWORD *)v16;
LABEL_8:
  unint64_t v20 = ((unint64_t)v15 + 23) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v21 = ((unint64_t)v16 + 23) & 0xFFFFFFFFFFFFFFF8;
  if (*(void *)(v20 + 24) >= 0xFFFFFFFFuLL)
  {
    if (*(void *)(v21 + 24) >= 0xFFFFFFFFuLL)
    {
      char v22 = *(unsigned char *)(v21 + 16);
      uint64_t v23 = *(void *)v20;
      uint64_t v24 = *(void *)(v20 + 8);
      char v25 = *(unsigned char *)(v20 + 16);
      *(_OWORD *)unint64_t v20 = *(_OWORD *)v21;
      *(unsigned char *)(v20 + 16) = v22;
      outlined consume of Text.Storage(v23, v24, v25);
      *(void *)(v20 + 24) = *(void *)(v21 + 24);
      swift_bridgeObjectRelease();
      goto LABEL_13;
    }
    outlined consume of Text.Storage(*(void *)v20, *(void *)(v20 + 8), *(unsigned char *)(v20 + 16));
    swift_bridgeObjectRelease();
  }
  long long v26 = *(_OWORD *)(v21 + 16);
  *(_OWORD *)unint64_t v20 = *(_OWORD *)v21;
  *(_OWORD *)(v20 + 16) = v26;
LABEL_13:
  uint64_t v27 = (void *)((v20 + 39) & 0xFFFFFFFFFFFFFFF8);
  char v28 = (void *)((v21 + 39) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v27 = *v28;
  swift_release();
  uint64_t v29 = (void *)(((unint64_t)v27 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v30 = (unint64_t *)(((unint64_t)v28 + 15) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v31 = *v30;
  if (*v29 < 0xFFFFFFFFuLL)
  {
    if (v31 >= 0xFFFFFFFF)
    {
      unint64_t v33 = v30[1];
      *uint64_t v29 = v31;
      v29[1] = v33;
      goto LABEL_20;
    }
  }
  else
  {
    if (v31 >= 0xFFFFFFFF)
    {
      unint64_t v32 = v30[1];
      *uint64_t v29 = v31;
      v29[1] = v32;
      swift_release();
      goto LABEL_20;
    }
    swift_release();
  }
  *(_OWORD *)uint64_t v29 = *(_OWORD *)v30;
LABEL_20:
  uint64_t v34 = (void *)(((unint64_t)v29 + 23) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v35 = (unint64_t *)(((unint64_t)v30 + 23) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v36 = *v35;
  if (*v34 < 0xFFFFFFFFuLL)
  {
    if (v36 >= 0xFFFFFFFF)
    {
      unint64_t v38 = v35[1];
      void *v34 = v36;
      v34[1] = v38;
      return a1;
    }
LABEL_26:
    *(_OWORD *)uint64_t v34 = *(_OWORD *)v35;
    return a1;
  }
  if (v36 < 0xFFFFFFFF)
  {
    swift_release();
    goto LABEL_26;
  }
  unint64_t v37 = v35[1];
  void *v34 = v36;
  v34[1] = v37;
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for DocumentLaunchView(_DWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  if (v5 <= 0x7FFFFFFF) {
    unsigned int v7 = 0x7FFFFFFF;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  if (v7 < a2)
  {
    unint64_t v8 = ((((((((((((*(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) + ((v6 + 8) & ~v6) + 7) & 0xFFFFFFFFFFFFFFF8)
                 + 23) & 0xFFFFFFFFFFFFFFF8)
               + 23) & 0xFFFFFFFFFFFFFFF8)
             + 39) & 0xFFFFFFFFFFFFFFF8)
           + 15) & 0xFFFFFFFFFFFFFFF8)
         + 23) & 0xFFFFFFFFFFFFFFF8)
       + 16;
    unsigned int v9 = a2 - v7;
    uint64_t v10 = v8 & 0xFFFFFFF8;
    if ((v8 & 0xFFFFFFF8) != 0) {
      unsigned int v11 = 2;
    }
    else {
      unsigned int v11 = v9 + 1;
    }
    if (v11 >= 0x10000) {
      unsigned int v12 = 4;
    }
    else {
      unsigned int v12 = 2;
    }
    if (v11 < 0x100) {
      unsigned int v12 = 1;
    }
    if (v11 >= 2) {
      uint64_t v13 = v12;
    }
    else {
      uint64_t v13 = 0;
    }
    switch(v13)
    {
      case 1:
        int v14 = *((unsigned __int8 *)a1 + v8);
        if (!v14) {
          break;
        }
        goto LABEL_22;
      case 2:
        int v14 = *(unsigned __int16 *)((char *)a1 + v8);
        if (v14) {
          goto LABEL_22;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x1882639B4);
      case 4:
        int v14 = *(_DWORD *)((char *)a1 + v8);
        if (!v14) {
          break;
        }
LABEL_22:
        int v16 = v14 - 1;
        if (v10)
        {
          int v16 = 0;
          LODWORD(v10) = *a1;
        }
        return v7 + (v10 | v16) + 1;
      default:
        break;
    }
  }
  if ((v5 & 0x80000000) != 0) {
    return (*(uint64_t (**)(unint64_t))(v4 + 48))(((unint64_t)a1 + v6 + 8) & ~v6);
  }
  uint64_t v17 = *(void *)a1;
  if (*(void *)a1 >= 0xFFFFFFFFuLL) {
    LODWORD(v17) = -1;
  }
  return (v17 + 1);
}

void storeEnumTagSinglePayload for DocumentLaunchView(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(unsigned __int8 *)(v6 + 80);
  size_t v10 = ((((((((((((*(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64) + ((v9 + 8) & ~v9) + 7) & 0xFFFFFFFFFFFFFFF8)
                + 23) & 0xFFFFFFFFFFFFFFF8)
              + 23) & 0xFFFFFFFFFFFFFFF8)
            + 39) & 0xFFFFFFFFFFFFFFF8)
          + 15) & 0xFFFFFFFFFFFFFFF8)
        + 23) & 0xFFFFFFFFFFFFFFF8)
      + 16;
  if (v8 >= a3)
  {
    int v14 = 0;
    int v15 = a2 - v8;
    if (a2 <= v8)
    {
LABEL_17:
      switch(v14)
      {
        case 1:
          a1[v10] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_30;
        case 2:
          *(_WORD *)&a1[v10] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_30;
        case 3:
          goto LABEL_43;
        case 4:
          *(_DWORD *)&a1[v10] = 0;
          goto LABEL_29;
        default:
LABEL_29:
          if (a2)
          {
LABEL_30:
            if ((v7 & 0x80000000) != 0)
            {
              unint64_t v19 = (unint64_t)&a1[v9 + 8] & ~v9;
              unint64_t v20 = *(void (**)(unint64_t))(v6 + 56);
              v20(v19);
            }
            else
            {
              if ((a2 & 0x80000000) != 0) {
                uint64_t v18 = a2 ^ 0x80000000;
              }
              else {
                uint64_t v18 = a2 - 1;
              }
              *(void *)a1 = v18;
            }
          }
          break;
      }
      return;
    }
  }
  else
  {
    unsigned int v11 = a3 - v8;
    if (((((((((((((*(_DWORD *)(*(void *)(*(void *)(a4 + 16) - 8) + 64) + ((v9 + 8) & ~v9) + 7) & 0xFFFFFFF8)
                 + 23) & 0xFFFFFFF8)
               + 23) & 0xFFFFFFF8)
             + 39) & 0xFFFFFFF8)
           + 15) & 0xFFFFFFF8)
         + 23) & 0xFFFFFFF8) == 0xFFFFFFF0)
      unsigned int v12 = v11 + 1;
    else {
      unsigned int v12 = 2;
    }
    if (v12 >= 0x10000) {
      int v13 = 4;
    }
    else {
      int v13 = 2;
    }
    if (v12 < 0x100) {
      int v13 = 1;
    }
    if (v12 >= 2) {
      int v14 = v13;
    }
    else {
      int v14 = 0;
    }
    int v15 = a2 - v8;
    if (a2 <= v8) {
      goto LABEL_17;
    }
  }
  if (((((((((((((*(_DWORD *)(*(void *)(*(void *)(a4 + 16) - 8) + 64) + ((v9 + 8) & ~v9) + 7) & 0xFFFFFFF8)
               + 23) & 0xFFFFFFF8)
             + 23) & 0xFFFFFFF8)
           + 39) & 0xFFFFFFF8)
         + 15) & 0xFFFFFFF8)
       + 23) & 0xFFFFFFF8) == 0xFFFFFFF0)
    int v16 = v15;
  else {
    int v16 = 1;
  }
  if (((((((((((((*(_DWORD *)(*(void *)(*(void *)(a4 + 16) - 8) + 64) + ((v9 + 8) & ~v9) + 7) & 0xFFFFFFF8)
               + 23) & 0xFFFFFFF8)
             + 23) & 0xFFFFFFF8)
           + 39) & 0xFFFFFFF8)
         + 15) & 0xFFFFFFF8)
       + 23) & 0xFFFFFFF8) != 0xFFFFFFF0)
  {
    int v17 = ~v8 + a2;
    bzero(a1, v10);
    *(_DWORD *)a1 = v17;
  }
  switch(v14)
  {
    case 1:
      a1[v10] = v16;
      break;
    case 2:
      *(_WORD *)&a1[v10] = v16;
      break;
    case 3:
LABEL_43:
      __break(1u);
      JUMPOUT(0x188263BE0);
    case 4:
      *(_DWORD *)&a1[v10] = v16;
      break;
    default:
      return;
  }
}

ValueMetadata *type metadata accessor for DocumentLaunchGeometryProxy()
{
  return &type metadata for DocumentLaunchGeometryProxy;
}

ValueMetadata *type metadata accessor for DefaultDocumentGroupLaunchActions()
{
  return &type metadata for DefaultDocumentGroupLaunchActions;
}

uint64_t type metadata completion function for _IntroDocumentView()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for _IntroDocumentView(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  unint64_t v6 = *(_DWORD *)(v5 + 80);
  uint64_t v7 = *(void *)(v5 + 64) + 7;
  uint64_t v8 = *(void *)(a3 + 32);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(_DWORD *)(v9 + 80);
  uint64_t v11 = v10 + 8;
  unint64_t v12 = ((v10
        + 8
        + ((((((v7 + ((v6 + 8) & ~v6)) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFFFF8)) & ~v10)
      + *(void *)(v9 + 64);
  int v13 = (*(_DWORD *)(v9 + 80) | *(_DWORD *)(v5 + 80)) & 0x100000;
  uint64_t v14 = *a2;
  *a1 = *a2;
  if ((v10 | v6) > 7 || v13 != 0 || v12 > 0x18)
  {
    a1 = (uint64_t *)(v14 + (((v10 | v6) & 0xF8 ^ 0x1F8) & ((v10 | v6) + 16)));
    swift_retain();
  }
  else
  {
    uint64_t v36 = ~v10;
    uint64_t v17 = ((unint64_t)a1 + v6 + 8) & ~v6;
    uint64_t v18 = ((unint64_t)a2 + v6 + 8) & ~v6;
    unint64_t v19 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
    swift_bridgeObjectRetain();
    v19(v17, v18, v4);
    unint64_t v20 = (void *)((v7 + v17) & 0xFFFFFFFFFFFFFFF8);
    unint64_t v21 = (void *)((v7 + v18) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v22 = v21[1];
    *unint64_t v20 = *v21;
    v20[1] = v22;
    unint64_t v23 = ((unint64_t)v20 + 23) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v24 = ((unint64_t)v21 + 23) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v25 = *(void *)(v24 + 24);
    swift_retain();
    if (v25 < 0xFFFFFFFF)
    {
      long long v29 = *(_OWORD *)(v24 + 16);
      *(_OWORD *)unint64_t v23 = *(_OWORD *)v24;
      *(_OWORD *)(v23 + 16) = v29;
    }
    else
    {
      uint64_t v26 = *(void *)v24;
      uint64_t v27 = *(void *)(v24 + 8);
      char v28 = *(unsigned char *)(v24 + 16);
      outlined copy of Text.Storage(*(void *)v24, v27, v28);
      *(void *)unint64_t v23 = v26;
      *(void *)(v23 + 8) = v27;
      *(unsigned char *)(v23 + 16) = v28;
      *(void *)(v23 + 24) = *(void *)(v24 + 24);
      swift_bridgeObjectRetain();
    }
    uint64_t v30 = (void *)((v23 + 39) & 0xFFFFFFFFFFFFFFF8);
    unint64_t v31 = (void *)((v24 + 39) & 0xFFFFFFFFFFFFFFF8);
    *uint64_t v30 = *v31;
    unint64_t v32 = ((unint64_t)v30 + v11) & v36;
    unint64_t v33 = ((unint64_t)v31 + v11) & v36;
    uint64_t v34 = *(void (**)(unint64_t, unint64_t, uint64_t))(v9 + 16);
    swift_bridgeObjectRetain();
    v34(v32, v33, v8);
  }
  return a1;
}

uint64_t destroy for _IntroDocumentView(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(*(void *)(a2 + 16) - 8);
  uint64_t v5 = v4 + 8;
  unint64_t v6 = (a1 + *(unsigned __int8 *)(v4 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  (*(void (**)(unint64_t))(v4 + 8))(v6);
  unint64_t v7 = (*(void *)(v5 + 56) + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_release();
  unint64_t v8 = (v7 + 23) & 0xFFFFFFFFFFFFFFF8;
  if (*(void *)(v8 + 24) >= 0xFFFFFFFFuLL)
  {
    outlined consume of Text.Storage(*(void *)v8, *(void *)(v8 + 8), *(unsigned char *)(v8 + 16));
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  uint64_t v9 = *(void *)(*(void *)(a2 + 32) - 8);
  uint64_t v10 = *(uint64_t (**)(unint64_t))(v9 + 8);
  unint64_t v11 = (((v8 + 39) & 0xFFFFFFFFFFFFFFF8) + *(unsigned __int8 *)(v9 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);

  return v10(v11);
}

void *initializeWithCopy for _IntroDocumentView(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v5 = *(void *)(a3 + 16);
  unint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);
  uint64_t v7 = *(void *)(v5 - 8) + 16;
  uint64_t v8 = *(unsigned __int8 *)(*(void *)(v5 - 8) + 80);
  uint64_t v9 = ((unint64_t)a1 + v8 + 8) & ~v8;
  uint64_t v10 = ((unint64_t)a2 + v8 + 8) & ~v8;
  swift_bridgeObjectRetain();
  v6(v9, v10, v5);
  uint64_t v11 = *(void *)(v7 + 48) + 7;
  unint64_t v12 = (void *)((v11 + v9) & 0xFFFFFFFFFFFFFFF8);
  int v13 = (void *)((v11 + v10) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v14 = v13[1];
  *unint64_t v12 = *v13;
  v12[1] = v14;
  unint64_t v15 = ((unint64_t)v12 + 23) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v16 = ((unint64_t)v13 + 23) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v17 = *(void *)(v16 + 24);
  swift_retain();
  if (v17 < 0xFFFFFFFF)
  {
    long long v21 = *(_OWORD *)(v16 + 16);
    *(_OWORD *)unint64_t v15 = *(_OWORD *)v16;
    *(_OWORD *)(v15 + 16) = v21;
  }
  else
  {
    uint64_t v18 = *(void *)v16;
    uint64_t v19 = *(void *)(v16 + 8);
    char v20 = *(unsigned char *)(v16 + 16);
    outlined copy of Text.Storage(*(void *)v16, v19, v20);
    *(void *)unint64_t v15 = v18;
    *(void *)(v15 + 8) = v19;
    *(unsigned char *)(v15 + 16) = v20;
    *(void *)(v15 + 24) = *(void *)(v16 + 24);
    swift_bridgeObjectRetain();
  }
  uint64_t v22 = (void *)((v15 + 39) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v23 = (void *)((v16 + 39) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v22 = *v23;
  uint64_t v24 = *(void *)(a3 + 32);
  uint64_t v25 = *(void *)(v24 - 8);
  uint64_t v26 = *(void (**)(uint64_t, uint64_t, uint64_t))(v25 + 16);
  uint64_t v27 = *(unsigned __int8 *)(v25 + 80);
  uint64_t v28 = ((unint64_t)v22 + v27 + 8) & ~v27;
  uint64_t v29 = ((unint64_t)v23 + v27 + 8) & ~v27;
  swift_bridgeObjectRetain();
  v26(v28, v29, v24);
  return a1;
}

void *assignWithCopy for _IntroDocumentView(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v7 = v6 + 24;
  uint64_t v8 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v9 = ((unint64_t)a1 + v8 + 8) & ~v8;
  uint64_t v10 = ((unint64_t)a2 + v8 + 8) & ~v8;
  (*(void (**)(uint64_t, uint64_t))(v6 + 24))(v9, v10);
  uint64_t v11 = *(void *)(v7 + 40) + 7;
  unint64_t v12 = (void *)((v11 + v9) & 0xFFFFFFFFFFFFFFF8);
  int v13 = (void *)((v11 + v10) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v14 = v13[1];
  *unint64_t v12 = *v13;
  v12[1] = v14;
  swift_retain();
  swift_release();
  unint64_t v15 = ((unint64_t)v12 + 23) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v16 = ((unint64_t)v13 + 23) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v17 = *(void *)(v16 + 24);
  if (*(void *)(v15 + 24) < 0xFFFFFFFFuLL)
  {
    if (v17 >= 0xFFFFFFFF)
    {
      uint64_t v24 = *(void *)v16;
      uint64_t v25 = *(void *)(v16 + 8);
      char v26 = *(unsigned char *)(v16 + 16);
      outlined copy of Text.Storage(*(void *)v16, v25, v26);
      *(void *)unint64_t v15 = v24;
      *(void *)(v15 + 8) = v25;
      *(unsigned char *)(v15 + 16) = v26;
      *(void *)(v15 + 24) = *(void *)(v16 + 24);
      swift_bridgeObjectRetain();
      goto LABEL_8;
    }
LABEL_7:
    long long v27 = *(_OWORD *)(v16 + 16);
    *(_OWORD *)unint64_t v15 = *(_OWORD *)v16;
    *(_OWORD *)(v15 + 16) = v27;
    goto LABEL_8;
  }
  if (v17 < 0xFFFFFFFF)
  {
    outlined consume of Text.Storage(*(void *)v15, *(void *)(v15 + 8), *(unsigned char *)(v15 + 16));
    swift_bridgeObjectRelease();
    goto LABEL_7;
  }
  uint64_t v18 = *(void *)v16;
  uint64_t v19 = *(void *)(v16 + 8);
  char v20 = *(unsigned char *)(v16 + 16);
  outlined copy of Text.Storage(*(void *)v16, v19, v20);
  uint64_t v21 = *(void *)v15;
  uint64_t v22 = *(void *)(v15 + 8);
  char v23 = *(unsigned char *)(v15 + 16);
  *(void *)unint64_t v15 = v18;
  *(void *)(v15 + 8) = v19;
  *(unsigned char *)(v15 + 16) = v20;
  outlined consume of Text.Storage(v21, v22, v23);
  *(void *)(v15 + 24) = *(void *)(v16 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
LABEL_8:
  uint64_t v28 = (void *)((v15 + 39) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v29 = (void *)((v16 + 39) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v28 = *v29;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v30 = *(void *)(*(void *)(a3 + 32) - 8);
  (*(void (**)(unint64_t, unint64_t))(v30 + 24))(((unint64_t)v28 + *(unsigned __int8 *)(v30 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v30 + 80), ((unint64_t)v29 + *(unsigned __int8 *)(v30 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v30 + 80));
  return a1;
}

void *initializeWithTake for _IntroDocumentView(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v6 = v5 + 32;
  uint64_t v7 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v8 = ((unint64_t)a1 + v7 + 8) & ~v7;
  uint64_t v9 = ((unint64_t)a2 + v7 + 8) & ~v7;
  (*(void (**)(uint64_t, uint64_t))(v5 + 32))(v8, v9);
  uint64_t v10 = *(void *)(v6 + 32) + 7;
  uint64_t v11 = (_OWORD *)((v10 + v8) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v12 = (_OWORD *)((v10 + v9) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v11 = *v12;
  int v13 = (_OWORD *)(((unint64_t)v11 + 23) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v14 = (_OWORD *)(((unint64_t)v12 + 23) & 0xFFFFFFFFFFFFFFF8);
  long long v15 = v14[1];
  *int v13 = *v14;
  v13[1] = v15;
  unint64_t v16 = (void *)(((unint64_t)v13 + 39) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v17 = (void *)(((unint64_t)v14 + 39) & 0xFFFFFFFFFFFFFFF8);
  *unint64_t v16 = *v17;
  uint64_t v18 = *(void *)(*(void *)(a3 + 32) - 8);
  (*(void (**)(unint64_t, unint64_t))(v18 + 32))(((unint64_t)v16 + *(unsigned __int8 *)(v18 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80), ((unint64_t)v17 + *(unsigned __int8 *)(v18 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80));
  return a1;
}

void *assignWithTake for _IntroDocumentView(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v7 = v6 + 40;
  uint64_t v8 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v9 = ((unint64_t)a1 + v8 + 8) & ~v8;
  uint64_t v10 = ((unint64_t)a2 + v8 + 8) & ~v8;
  (*(void (**)(uint64_t, uint64_t))(v6 + 40))(v9, v10);
  uint64_t v11 = *(void *)(v7 + 24) + 7;
  unint64_t v12 = (_OWORD *)((v11 + v9) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v13 = v11 + v10;
  unint64_t v14 = (v13 & 0xFFFFFFFFFFFFFFF8) + 23;
  *unint64_t v12 = *(_OWORD *)(v13 & 0xFFFFFFFFFFFFFFF8);
  swift_release();
  unint64_t v15 = ((unint64_t)v12 + 23) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v16 = v14 & 0xFFFFFFFFFFFFFFF8;
  if (*(void *)(v15 + 24) < 0xFFFFFFFFuLL) {
    goto LABEL_5;
  }
  if (*(void *)(v16 + 24) < 0xFFFFFFFFuLL)
  {
    outlined consume of Text.Storage(*(void *)v15, *(void *)(v15 + 8), *(unsigned char *)(v15 + 16));
    swift_bridgeObjectRelease();
LABEL_5:
    long long v21 = *(_OWORD *)(v16 + 16);
    *(_OWORD *)unint64_t v15 = *(_OWORD *)v16;
    *(_OWORD *)(v15 + 16) = v21;
    goto LABEL_6;
  }
  char v17 = *(unsigned char *)(v16 + 16);
  uint64_t v18 = *(void *)v15;
  uint64_t v19 = *(void *)(v15 + 8);
  char v20 = *(unsigned char *)(v15 + 16);
  *(_OWORD *)unint64_t v15 = *(_OWORD *)v16;
  *(unsigned char *)(v15 + 16) = v17;
  outlined consume of Text.Storage(v18, v19, v20);
  *(void *)(v15 + 24) = *(void *)(v16 + 24);
  swift_bridgeObjectRelease();
LABEL_6:
  uint64_t v22 = (void *)((v15 + 39) & 0xFFFFFFFFFFFFFFF8);
  char v23 = (void *)((v16 + 39) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v22 = *v23;
  swift_bridgeObjectRelease();
  uint64_t v24 = *(void *)(*(void *)(a3 + 32) - 8);
  (*(void (**)(unint64_t, unint64_t))(v24 + 40))(((unint64_t)v22 + *(unsigned __int8 *)(v24 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v24 + 80), ((unint64_t)v23 + *(unsigned __int8 *)(v24 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v24 + 80));
  return a1;
}

uint64_t getEnumTagSinglePayload for _IntroDocumentView(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v4 = *(unsigned int *)(v3 + 84);
  uint64_t v5 = *(void *)(*(void *)(a3 + 32) - 8);
  uint64_t v6 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v7 = *(unsigned __int8 *)(v5 + 80);
  if (v4 <= *(_DWORD *)(v5 + 84)) {
    unsigned int v8 = *(_DWORD *)(v5 + 84);
  }
  else {
    unsigned int v8 = *(_DWORD *)(v3 + 84);
  }
  if (v8 <= 0x7FFFFFFF) {
    unsigned int v9 = 0x7FFFFFFF;
  }
  else {
    unsigned int v9 = v8;
  }
  if (!a2) {
    return 0;
  }
  uint64_t v10 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) + 7;
  uint64_t v11 = v7 + 8;
  if (a2 <= v9) {
    goto LABEL_28;
  }
  unint64_t v12 = ((v11
        + ((((((v10 + ((v6 + 8) & ~v6)) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFFFF8)) & ~v7)
      + *(void *)(*(void *)(*(void *)(a3 + 32) - 8) + 64);
  char v13 = 8 * v12;
  if (v12 <= 3)
  {
    unsigned int v16 = ((a2 - v9 + ~(-1 << v13)) >> v13) + 1;
    if (HIWORD(v16))
    {
      int v14 = *(_DWORD *)((char *)a1 + v12);
      if (!v14) {
        goto LABEL_28;
      }
      goto LABEL_18;
    }
    if (v16 > 0xFF)
    {
      int v14 = *(unsigned __int16 *)((char *)a1 + v12);
      if (!*(unsigned __int16 *)((char *)a1 + v12)) {
        goto LABEL_28;
      }
      goto LABEL_18;
    }
    if (v16 < 2)
    {
LABEL_28:
      if ((v8 & 0x80000000) != 0)
      {
        uint64_t v21 = ((unint64_t)a1 + v6 + 8) & ~v6;
        if (v4 == v9) {
          return (*(uint64_t (**)(uint64_t, uint64_t, void))(v3 + 48))(v21, v4, *(void *)(a3 + 16));
        }
        else {
          return (*(uint64_t (**)(unint64_t))(v5 + 48))((v11
        }
                                                                        + ((((((v10 + v21) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)
                                                                          + 39) & 0xFFFFFFFFFFFFFFF8)) & ~v7);
      }
      else
      {
        uint64_t v20 = *(void *)a1;
        if (*(void *)a1 >= 0xFFFFFFFFuLL) {
          LODWORD(v20) = -1;
        }
        return (v20 + 1);
      }
    }
  }
  int v14 = *((unsigned __int8 *)a1 + v12);
  if (!*((unsigned char *)a1 + v12)) {
    goto LABEL_28;
  }
LABEL_18:
  int v17 = (v14 - 1) << v13;
  if (v12 > 3) {
    int v17 = 0;
  }
  if (v12)
  {
    if (v12 <= 3) {
      int v18 = ((v11 + ((((((v10 + ((v6 + 8) & ~v6)) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8) + 39) & 0xFFFFFFF8)) & ~v7)
    }
          + *(_DWORD *)(*(void *)(*(void *)(a3 + 32) - 8) + 64);
    else {
      int v18 = 4;
    }
    switch(v18)
    {
      case 2:
        int v19 = *a1;
        break;
      case 3:
        int v19 = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        int v19 = *(_DWORD *)a1;
        break;
      default:
        int v19 = *(unsigned __int8 *)a1;
        break;
    }
  }
  else
  {
    int v19 = 0;
  }
  return v9 + (v19 | v17) + 1;
}

void storeEnumTagSinglePayload for _IntroDocumentView(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5 = *(void *)(*(void *)(a4 + 16) - 8);
  uint64_t v6 = *(void *)(a4 + 32);
  unsigned int v7 = *(_DWORD *)(v5 + 84);
  uint64_t v8 = *(void *)(v6 - 8);
  uint64_t v9 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v10 = *(void *)(v5 + 64);
  uint64_t v11 = *(unsigned __int8 *)(v8 + 80);
  if (v7 <= *(_DWORD *)(v8 + 84)) {
    unsigned int v12 = *(_DWORD *)(v8 + 84);
  }
  else {
    unsigned int v12 = *(_DWORD *)(v5 + 84);
  }
  if (v12 <= 0x7FFFFFFF) {
    unsigned int v13 = 0x7FFFFFFF;
  }
  else {
    unsigned int v13 = v12;
  }
  uint64_t v14 = v10 + 7;
  unint64_t v15 = (((((v10 + 7 + ((v9 + 8) & ~v9)) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v16 = v11 + 8;
  size_t v17 = ((v11 + 8 + v15) & ~v11) + *(void *)(*(void *)(v6 - 8) + 64);
  if (a3 > v13)
  {
    if (v17 <= 3)
    {
      unsigned int v22 = ((a3 - v13 + ~(-1 << (8 * v17))) >> (8 * v17)) + 1;
      if (HIWORD(v22))
      {
        int v18 = 4;
      }
      else if (v22 >= 0x100)
      {
        int v18 = 2;
      }
      else
      {
        int v18 = v22 > 1;
      }
    }
    else
    {
      int v18 = 1;
    }
  }
  else
  {
    int v18 = 0;
  }
  if (v13 < a2)
  {
    unsigned int v19 = ~v13 + a2;
    if (v17 < 4)
    {
      int v20 = (v19 >> (8 * v17)) + 1;
      if (v17)
      {
        int v23 = v19 & ~(-1 << (8 * v17));
        bzero(a1, v17);
        if (v17 == 3)
        {
          *(_WORD *)a1 = v23;
          a1[2] = BYTE2(v23);
        }
        else if (v17 == 2)
        {
          *(_WORD *)a1 = v23;
        }
        else
        {
          *a1 = v23;
        }
      }
    }
    else
    {
      bzero(a1, v17);
      *(_DWORD *)a1 = v19;
      int v20 = 1;
    }
    switch(v18)
    {
      case 1:
        a1[v17] = v20;
        return;
      case 2:
        *(_WORD *)&a1[v17] = v20;
        return;
      case 3:
        goto LABEL_49;
      case 4:
        *(_DWORD *)&a1[v17] = v20;
        return;
      default:
        return;
    }
  }
  uint64_t v21 = ~v11;
  switch(v18)
  {
    case 1:
      a1[v17] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_27;
    case 2:
      *(_WORD *)&a1[v17] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_27;
    case 3:
LABEL_49:
      __break(1u);
      JUMPOUT(0x188264C98);
    case 4:
      *(_DWORD *)&a1[v17] = 0;
      goto LABEL_26;
    default:
LABEL_26:
      if (a2)
      {
LABEL_27:
        if ((v12 & 0x80000000) != 0)
        {
          unint64_t v25 = (unint64_t)&a1[v9 + 8] & ~v9;
          if (v7 == v13)
          {
            char v26 = *(void (**)(unint64_t))(v5 + 56);
            v26(v25);
          }
          else
          {
            unint64_t v27 = (v16
                 + ((((((v14 + v25) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFFFF8)) & v21;
            uint64_t v28 = *(void (**)(unint64_t))(v8 + 56);
            v28(v27);
          }
        }
        else
        {
          if ((a2 & 0x80000000) != 0) {
            uint64_t v24 = a2 ^ 0x80000000;
          }
          else {
            uint64_t v24 = a2 - 1;
          }
          *(void *)a1 = v24;
        }
      }
      return;
  }
}

uint64_t DocumentIntroHelper.ShapeStyleView.body.getter(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *(void *)(a1 + 16);
  unint64_t v5 = lazy protocol witness table accessor for type Rectangle and conformance Rectangle();
  uint64_t v6 = *(void *)(a1 + 24);
  uint64_t v7 = MEMORY[0x1E4F41830];
  v17[0] = MEMORY[0x1E4F41830];
  v17[1] = v4;
  v17[2] = v5;
  void v17[3] = v6;
  uint64_t v8 = type metadata accessor for _ShapeView();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  uint64_t v11 = (char *)v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v12);
  uint64_t v14 = (char *)v17 - v13;
  Shape.fill<A>(_:style:)(v2, 256, v7, v4);
  swift_getWitnessTable();
  static ViewBuilder.buildExpression<A>(_:)(v11);
  unint64_t v15 = *(void (**)(char *, uint64_t))(v9 + 8);
  v15(v11, v8);
  static ViewBuilder.buildExpression<A>(_:)(v14);
  return ((uint64_t (*)(char *, uint64_t))v15)(v14, v8);
}

uint64_t ObjC metadata update function for StubDocument()
{
  return type metadata accessor for StubDocument();
}

uint64_t type metadata accessor for StubDocument()
{
  uint64_t result = type metadata singleton initialization cache for StubDocument;
  if (!type metadata singleton initialization cache for StubDocument) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t type metadata completion function for StubDocument()
{
  uint64_t result = type metadata accessor for UTType();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t URLDocumentCreation.aggregatedContentTypes.getter()
{
  uint64_t v1 = OBJC_IVAR____TtC7SwiftUI19URLDocumentCreation____lazy_storage___aggregatedContentTypes;
  if (*(void *)(v0 + OBJC_IVAR____TtC7SwiftUI19URLDocumentCreation____lazy_storage___aggregatedContentTypes))
  {
    uint64_t v2 = *(void *)(v0 + OBJC_IVAR____TtC7SwiftUI19URLDocumentCreation____lazy_storage___aggregatedContentTypes);
  }
  else
  {
    uint64_t v2 = closure #1 in URLDocumentCreation.aggregatedContentTypes.getter(v0);
    *(void *)(v0 + v1) = v2;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t closure #1 in URLDocumentCreation.aggregatedContentTypes.getter(uint64_t a1)
{
  _s10Foundation3URLVSgMaTm_9(0, (unint64_t *)&lazy cache variable for type metadata for UTType?, MEMORY[0x1E4FBCEA8], MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)&v25 - v3;
  uint64_t v5 = type metadata accessor for UTType();
  MEMORY[0x1F4188790](v5);
  uint64_t v29 = (char *)&v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v7);
  uint64_t v28 = (char *)&v25 - v9;
  uint64_t v10 = *(void *)(a1 + OBJC_IVAR____TtC7SwiftUI19URLDocumentCreation_contentTypes);
  uint64_t v11 = *(void *)(a1 + OBJC_IVAR____TtC7SwiftUI19URLDocumentCreation_strategies);
  uint64_t v12 = *(void *)(v11 + 16);
  if (v12)
  {
    uint64_t v13 = v11 + 32;
    uint64_t v14 = (unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48);
    uint64_t v26 = v10;
    uint64_t v27 = v8;
    unint64_t v15 = (void (**)(char *, char *, uint64_t))(v8 + 32);
    swift_bridgeObjectRetain();
    uint64_t v25 = v11;
    swift_bridgeObjectRetain();
    uint64_t v16 = (char *)MEMORY[0x1E4FBC860];
    do
    {
      outlined init with copy of TableColumnList(v13, (uint64_t)v30);
      uint64_t v18 = v31;
      uint64_t v17 = v32;
      __swift_project_boxed_opaque_existential_1(v30, v31);
      (*(void (**)(uint64_t, uint64_t))(v17 + 24))(v18, v17);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v30);
      if ((*v14)(v4, 1, v5) == 1)
      {
        _s10Foundation3URLVSgWOhTm_4((uint64_t)v4, (unint64_t *)&lazy cache variable for type metadata for UTType?, MEMORY[0x1E4FBCEA8]);
      }
      else
      {
        unsigned int v19 = *v15;
        int v20 = v28;
        (*v15)(v28, v4, v5);
        v19(v29, v20, v5);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v16 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v16 + 2) + 1, 1, v16);
        }
        unint64_t v22 = *((void *)v16 + 2);
        unint64_t v21 = *((void *)v16 + 3);
        if (v22 >= v21 >> 1) {
          uint64_t v16 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v21 > 1, v22 + 1, 1, v16);
        }
        *((void *)v16 + 2) = v22 + 1;
        v19(&v16[((*(unsigned __int8 *)(v27 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v27 + 80))+ *(void *)(v27 + 72) * v22], v29, v5);
      }
      v13 += 40;
      --v12;
    }
    while (v12);
    swift_bridgeObjectRelease();
    uint64_t v23 = v26;
  }
  else
  {
    uint64_t v23 = swift_bridgeObjectRetain();
    uint64_t v16 = (char *)MEMORY[0x1E4FBC860];
  }
  v30[0] = v23;
  specialized Array.append<A>(contentsOf:)((uint64_t)v16);
  return v30[0];
}

id URLDocumentCreation.init(contentTypes:strategies:onDocumentOpen:documentBrowserContextMenu:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)&v5[OBJC_IVAR____TtC7SwiftUI19URLDocumentCreation____lazy_storage___aggregatedContentTypes] = 0;
  uint64_t v6 = &v5[OBJC_IVAR____TtC7SwiftUI19URLDocumentCreation_newDocumentHandler];
  *uint64_t v6 = 0;
  v6[1] = 0;
  v5[OBJC_IVAR____TtC7SwiftUI19URLDocumentCreation_canCreateNewDocuments] = 1;
  *(void *)&v5[OBJC_IVAR____TtC7SwiftUI19URLDocumentCreation____lazy_storage___documentBrowser] = 0;
  *(void *)&v5[OBJC_IVAR____TtC7SwiftUI19URLDocumentCreation_contentTypes] = a1;
  *(void *)&v5[OBJC_IVAR____TtC7SwiftUI19URLDocumentCreation_strategies] = a2;
  uint64_t v7 = &v5[OBJC_IVAR____TtC7SwiftUI19URLDocumentCreation_onDocumentOpen];
  *uint64_t v7 = a3;
  v7[1] = a4;
  *(void *)&v5[OBJC_IVAR____TtC7SwiftUI19URLDocumentCreation_documentBrowserContextMenu] = a5;
  v9.receiver = v5;
  v9.super_class = (Class)type metadata accessor for URLDocumentCreation();
  return objc_msgSendSuper2(&v9, sel_init);
}

id URLDocumentCreation.documentBrowser.getter()
{
  uint64_t v1 = OBJC_IVAR____TtC7SwiftUI19URLDocumentCreation____lazy_storage___documentBrowser;
  uint64_t v2 = *(void **)(v0 + OBJC_IVAR____TtC7SwiftUI19URLDocumentCreation____lazy_storage___documentBrowser);
  if (v2)
  {
    id v3 = *(id *)(v0 + OBJC_IVAR____TtC7SwiftUI19URLDocumentCreation____lazy_storage___documentBrowser);
  }
  else
  {
    swift_getObjectType();
    id v4 = closure #1 in URLDocumentCreation.documentBrowser.getter(v0);
    uint64_t v5 = *(void **)(v0 + v1);
    *(void *)(v0 + v1) = v4;
    id v3 = v4;

    uint64_t v2 = 0;
  }
  id v6 = v2;
  return v3;
}

id closure #1 in URLDocumentCreation.documentBrowser.getter(uint64_t a1)
{
  URLDocumentCreation.aggregatedContentTypes.getter();
  id v2 = objc_allocWithZone(MEMORY[0x1E4F42978]);
  type metadata accessor for UTType();
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v4 = objc_msgSend(v2, sel_initForOpeningContentTypes_, isa);

  objc_msgSend(v4, sel_setAllowsDocumentCreation_, 1);
  objc_msgSend(v4, sel_setDelegate_, a1);
  static DocumentBrowserMediator.resolveBrowserContextMenu(_:)(*(void *)(a1
                                                                         + OBJC_IVAR____TtC7SwiftUI19URLDocumentCreation_documentBrowserContextMenu));
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIDocumentBrowserAction);
  Class v5 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v4, sel_setCustomActions_, v5);

  return v4;
}

uint64_t URLDocumentCreation.presentDocument(at:)(uint64_t a1)
{
  id v2 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E4FBB718];
  _s10Foundation3URLVSgMaTm_9(0, (unint64_t *)&lazy cache variable for type metadata for UTType?, MEMORY[0x1E4FBCEA8], MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v3 - 8);
  uint64_t v70 = (char *)&v64 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v5);
  uint64_t v75 = (char *)&v64 - v6;
  uint64_t v7 = type metadata accessor for UTType();
  uint64_t v79 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  uint64_t v73 = (char *)&v64 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v9);
  char v69 = (char *)&v64 - v10;
  MEMORY[0x1F4188790](v11);
  long long v71 = (char *)&v64 - v12;
  MEMORY[0x1F4188790](v13);
  unint64_t v15 = (char *)&v64 - v14;
  uint64_t v16 = type metadata accessor for URL();
  uint64_t v17 = *(void *)(v16 - 8);
  MEMORY[0x1F4188790](v16);
  long long v72 = (char *)&v64 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v19);
  unint64_t v21 = (char *)&v64 - v20;
  _s10Foundation3URLVSgMaTm_9(0, (unint64_t *)&lazy cache variable for type metadata for Logger?, MEMORY[0x1E4FBD360], v2);
  MEMORY[0x1F4188790](v22 - 8);
  uint64_t v24 = (char *)&v64 - v23;
  static Log.documents.getter();
  uint64_t v25 = type metadata accessor for Logger();
  uint64_t v26 = *(void *)(v25 - 8);
  int v27 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v26 + 48))(v24, 1, v25);
  uint64_t v74 = a1;
  uint64_t v77 = v17;
  uint64_t v78 = v16;
  if (v27 == 1)
  {
    _s10Foundation3URLVSgWOhTm_4((uint64_t)v24, (unint64_t *)&lazy cache variable for type metadata for Logger?, MEMORY[0x1E4FBD360]);
  }
  else
  {
    uint64_t v68 = v7;
    (*(void (**)(char *, uint64_t, uint64_t))(v17 + 16))(v21, a1, v16);
    uint64_t v28 = Logger.logObject.getter();
    os_log_type_t v29 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v28, v29))
    {
      os_log_t v67 = v28;
      uint64_t v30 = (uint8_t *)swift_slowAlloc();
      uint64_t v66 = swift_slowAlloc();
      uint64_t v81 = v66;
      *(_DWORD *)uint64_t v30 = 136315138;
      uint64_t v64 = v30 + 4;
      uint64_t v65 = v30;
      uint64_t v31 = URL.path.getter();
      uint64_t v80 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v31, v32, &v81);
      a1 = v74;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v17 + 8))(v21, v16);
      os_log_t v33 = v67;
      uint64_t v34 = v65;
      _os_log_impl(&dword_1872C6000, v67, v29, "Present document at %s", v65, 0xCu);
      uint64_t v35 = v66;
      swift_arrayDestroy();
      MEMORY[0x18C119C60](v35, -1, -1);
      MEMORY[0x18C119C60](v34, -1, -1);
    }
    else
    {

      (*(void (**)(char *, uint64_t))(v17 + 8))(v21, v16);
    }
    (*(void (**)(char *, uint64_t))(v26 + 8))(v24, v25);
    uint64_t v7 = v68;
  }
  uint64_t v36 = v75;
  unint64_t v37 = v76;
  uint64_t v38 = v79;
  static DocumentUtils.contentType(of:)(a1, v75);
  unint64_t v39 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v38 + 48);
  if (v39(v36, 1, v7) != 1)
  {
    uint64_t v41 = *(void (**)(char *, char *, uint64_t))(v38 + 32);
    unint64_t v42 = v71;
    v41(v71, v36, v7);
LABEL_11:
    v41(v15, v42, v7);
    goto LABEL_12;
  }
  _s10Foundation3URLVSgWOhTm_4((uint64_t)v36, (unint64_t *)&lazy cache variable for type metadata for UTType?, MEMORY[0x1E4FBCEA8]);
  uint64_t v40 = *(void *)&v37[OBJC_IVAR____TtC7SwiftUI19URLDocumentCreation_contentTypes];
  if (*(void *)(v40 + 16))
  {
    (*(void (**)(char *, unint64_t, uint64_t))(v38 + 16))(v15, v40 + ((*(unsigned __int8 *)(v38 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v38 + 80)), v7);
    goto LABEL_12;
  }
  uint64_t v60 = URLDocumentCreation.aggregatedContentTypes.getter();
  if (*(void *)(v60 + 16))
  {
    uint64_t v61 = (uint64_t)v70;
    (*(void (**)(char *, unint64_t, uint64_t))(v38 + 16))(v70, v60 + ((*(unsigned __int8 *)(v38 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v38 + 80)), v7);
    uint64_t v62 = 0;
  }
  else
  {
    uint64_t v62 = 1;
    uint64_t v61 = (uint64_t)v70;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v38 + 56))(v61, v62, 1, v7);
  swift_bridgeObjectRelease();
  if (v39((char *)v61, 1, v7) != 1)
  {
    uint64_t v63 = v61;
    uint64_t v41 = *(void (**)(char *, char *, uint64_t))(v38 + 32);
    unint64_t v42 = v69;
    v41(v69, (char *)v63, v7);
    goto LABEL_11;
  }
  _s10Foundation3URLVSgWOhTm_4(v61, (unint64_t *)&lazy cache variable for type metadata for UTType?, MEMORY[0x1E4FBCEA8]);
  static UTType.data.getter();
LABEL_12:
  uint64_t v43 = URLDocumentCreation.aggregatedContentTypes.getter();
  uint64_t v44 = *(void *)(v43 + 16);
  if (v44)
  {
    unint64_t v45 = v43 + ((*(unsigned __int8 *)(v38 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v38 + 80));
    uint64_t v46 = *(void *)(v38 + 72);
    while ((UTType.conforms(to:)() & 1) == 0)
    {
      v45 += v46;
      if (!--v44) {
        goto LABEL_16;
      }
    }
    swift_bridgeObjectRelease();
    uint64_t v49 = v77;
    uint64_t v48 = v78;
  }
  else
  {
LABEL_16:
    uint64_t v47 = swift_bridgeObjectRelease();
    uint64_t v49 = v77;
    uint64_t v48 = v78;
    MEMORY[0x1F4188790](v47);
    *(&v64 - 2) = (uint8_t *)v15;
    *(&v64 - 1) = v37;
    static Log.internalWarning(_:)();
  }
  uint64_t v50 = *(void (**)(id))&v37[OBJC_IVAR____TtC7SwiftUI19URLDocumentCreation_newDocumentHandler];
  if (v50)
  {
    uint64_t v51 = *(void (**)(char *, char *, uint64_t))(v38 + 16);
    uint64_t v52 = v73;
    v51(v73, v15, v7);
    uint64_t v53 = (uint64_t)v72;
    (*(void (**)(char *, uint64_t, uint64_t))(v49 + 16))(v72, v74, v48);
    uint64_t v54 = *(void *)&v37[OBJC_IVAR____TtC7SwiftUI19URLDocumentCreation_onDocumentOpen];
    uint64_t v55 = *(void *)&v37[OBJC_IVAR____TtC7SwiftUI19URLDocumentCreation_onDocumentOpen + 8];
    id v56 = objc_allocWithZone((Class)type metadata accessor for StubDocument());
    outlined copy of AppIntentExecutor?((uint64_t)v50);
    swift_retain();
    uint64_t v57 = (uint64_t)v52;
    uint64_t v38 = v79;
    id v58 = specialized StubDocument.init(contentType:documentURL:viewProvider:)(v57, v53, v54, v55);
    swift_release();
    v50(v58);
    outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?((uint64_t)v50);
  }
  (*(void (**)(char *, uint64_t))(v38 + 8))(v15, v7);
  return 1;
}

uint64_t implicit closure #3 in URLDocumentCreation.presentDocument(at:)(uint64_t a1, uint64_t a2)
{
  _StringGuts.grow(_:)(90);
  v3._countAndFlagsBits = 0xD00000000000003BLL;
  v3._object = (void *)0x8000000188344990;
  String.append(_:)(v3);
  uint64_t v4 = type metadata accessor for UTType();
  lazy protocol witness table accessor for type UTType and conformance UTType(&lazy protocol witness table cache variable for type UTType and conformance UTType, MEMORY[0x1E4FBCEA8]);
  v5._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  v6._object = (void *)0x80000001883449D0;
  v6._countAndFlagsBits = 0xD00000000000001BLL;
  String.append(_:)(v6);
  uint64_t v7 = *(void *)(a2 + OBJC_IVAR____TtC7SwiftUI19URLDocumentCreation_contentTypes);
  int64_t v8 = *(void *)(v7 + 16);
  uint64_t v9 = MEMORY[0x1E4FBC860];
  if (v8)
  {
    uint64_t v22 = MEMORY[0x1E4FBC860];
    swift_bridgeObjectRetain();
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v8, 0);
    uint64_t v9 = v22;
    uint64_t v10 = *(void *)(v4 - 8);
    uint64_t v11 = v7 + ((*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80));
    uint64_t v12 = *(void *)(v10 + 72);
    do
    {
      uint64_t v13 = UTType.identifier.getter();
      uint64_t v15 = v14;
      unint64_t v17 = *(void *)(v22 + 16);
      unint64_t v16 = *(void *)(v22 + 24);
      if (v17 >= v16 >> 1) {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v16 > 1), v17 + 1, 1);
      }
      *(void *)(v22 + 16) = v17 + 1;
      uint64_t v18 = v22 + 16 * v17;
      *(void *)(v18 + 32) = v13;
      *(void *)(v18 + 40) = v15;
      v11 += v12;
      --v8;
    }
    while (v8);
    swift_bridgeObjectRelease();
  }
  v19._countAndFlagsBits = MEMORY[0x18C115B70](v9, MEMORY[0x1E4FBB1A0]);
  String.append(_:)(v19);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v20._countAndFlagsBits = 0;
  v20._object = (void *)0xE000000000000000;
  String.append(_:)(v20);
  return 0;
}

id URLDocumentCreation.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for URLDocumentCreation();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for URLDocumentCreation()
{
  return self;
}

uint64_t protocol witness for DocumentBrowserMediator.canCreateNewDocuments.getter in conformance URLDocumentCreation()
{
  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC7SwiftUI19URLDocumentCreation_canCreateNewDocuments);
}

uint64_t protocol witness for DocumentBrowserMediator.presentDocument(at:) in conformance URLDocumentCreation(uint64_t a1)
{
  return 1;
}

uint64_t closure #1 in URLDocumentCreation.documentBrowser(_:didRequestDocumentCreationWithHandler:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[32] = a6;
  v7[33] = a7;
  v7[30] = a4;
  v7[31] = a5;
  uint64_t v8 = type metadata accessor for URL();
  v7[34] = v8;
  v7[35] = *(void *)(v8 - 8);
  v7[36] = swift_task_alloc();
  uint64_t v9 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E4FBB718];
  _s10Foundation3URLVSgMaTm_9(0, (unint64_t *)&lazy cache variable for type metadata for URL?, MEMORY[0x1E4F276F0], MEMORY[0x1E4FBB718]);
  v7[37] = swift_task_alloc();
  v7[38] = swift_task_alloc();
  _s10Foundation3URLVSgMaTm_9(0, (unint64_t *)&lazy cache variable for type metadata for UTType?, MEMORY[0x1E4FBCEA8], v9);
  v7[39] = swift_task_alloc();
  uint64_t v10 = type metadata accessor for UTType();
  v7[40] = v10;
  uint64_t v11 = *(void *)(v10 - 8);
  v7[41] = v11;
  v7[42] = *(void *)(v11 + 64);
  v7[43] = swift_task_alloc();
  v7[44] = swift_task_alloc();
  v7[45] = swift_task_alloc();
  v7[46] = swift_task_alloc();
  v7[47] = swift_task_alloc();
  v7[48] = swift_task_alloc();
  v7[49] = swift_task_alloc();
  v7[50] = swift_task_alloc();
  return MEMORY[0x1F4188298](closure #1 in URLDocumentCreation.documentBrowser(_:didRequestDocumentCreationWithHandler:), 0, 0);
}

char *CustomizableURLDocumentViewController.makeDocumentHostingController()()
{
  uint64_t v1 = type metadata accessor for URL();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(void *)(v2 + 64);
  MEMORY[0x1F4188790](v1);
  MEMORY[0x1F4188790](v4);
  Swift::String v6 = (char *)v55 - v5;
  double v8 = MEMORY[0x1F4188790](v7);
  uint64_t v10 = (char *)v55 - v9;
  uint64_t v11 = (char *)objc_msgSend(v0, sel_document, v8);
  if (v11)
  {
    uint64_t v12 = v11;
    type metadata accessor for StubDocument();
    uint64_t v13 = (void *)swift_dynamicCastClass();
    if (v13)
    {
      uint64_t v14 = v13;
      uint64_t v66 = v12;
      id v15 = objc_msgSend(v13, sel_fileURL);
      static URL._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v16 = swift_allocObject();
      uint64_t v63 = v16 + 16;
      swift_unknownObjectWeakInit();
      uint64_t v65 = (uint64_t (*)@<X0>(uint64_t *@<X8>))v0;
      uint64_t v17 = v2;
      uint64_t v18 = *(void (**)(char *, char *, uint64_t))(v2 + 16);
      char v69 = v10;
      v18(v6, v10, v1);
      uint64_t v64 = (char *)v55 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
      v18(v64, v6, v1);
      unint64_t v19 = (*(unsigned __int8 *)(v17 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80);
      Swift::String v20 = (uint64_t (*)@<X0>(uint64_t *@<X8>))swift_allocObject();
      *((void *)v20 + 2) = v16;
      uint64_t v68 = v17;
      unint64_t v21 = *(void (**)(char *, char *, uint64_t))(v17 + 32);
      uint64_t v70 = v1;
      v21((char *)v20 + v19, v6, v1);
      uint64_t v67 = v16;
      swift_retain();
      specialized NavigationItemDescription.init(from:)(objc_msgSend(v65, sel_navigationItem), (uint64_t *)&v71);
      long long v22 = v71;
      uint64_t v23 = v72;
      uint64_t v57 = v73;
      uint64_t v56 = v74;
      uint64_t v59 = DocumentViewController.presentationModeLocation.getter();
      id v58 = objc_msgSend(v14, sel_undoManager);
      type metadata accessor for URLDocumentHostingController<AnyView>();
      uint64_t v25 = (char *)objc_allocWithZone(v24);
      uint64_t v26 = &v25[direct field offset for URLDocumentHostingController.navigationItemDescription];
      *(_OWORD *)uint64_t v26 = 0u;
      *((_OWORD *)v26 + 1) = 0u;
      *((void *)v26 + 4) = 0;
      uint64_t v27 = direct field offset for URLDocumentHostingController._undoManager;
      *(void *)&v25[direct field offset for URLDocumentHostingController._undoManager] = 0;
      uint64_t v28 = (uint64_t (**)@<X0>(uint64_t *@<X8>))&v25[direct field offset for URLDocumentHostingController.content];
      *uint64_t v28 = partial apply for closure #1 in CustomizableURLDocumentViewController.makeDocumentHostingController();
      v28[1] = v20;
      uint64_t v29 = *(void *)v26;
      uint64_t v30 = *((void *)v26 + 1);
      v55[1] = *((void *)v26 + 2);
      uint64_t v62 = v22;
      *(_OWORD *)uint64_t v26 = v22;
      uint64_t v61 = *((void *)&v22 + 1);
      uint64_t v31 = v56;
      uint64_t v60 = v23;
      *((void *)v26 + 2) = v23;
      uint64_t v32 = v57;
      *((void *)v26 + 3) = v57;
      *((void *)v26 + 4) = v31;
      uint64_t v76 = v73;
      uint64_t v77 = v72;
      long long v78 = v71;
      uint64_t v75 = v74;
      os_log_t v33 = v25;
      uint64_t v65 = v20;
      swift_retain();
      outlined retain of String?((uint64_t)&v78);
      outlined retain of [Text.Modifier]((uint64_t)&v77);
      outlined retain of [Text.Modifier]((uint64_t)&v76);
      outlined retain of [Text.Modifier]((uint64_t)&v75);
      outlined consume of NavigationListState?(v29, v30);
      uint64_t v34 = &v33[direct field offset for URLDocumentHostingController.presentationMode];
      uint64_t v35 = v59;
      *(void *)uint64_t v34 = 0;
      *((void *)v34 + 1) = v35;
      unsigned char v34[16] = 1;
      uint64_t v36 = *(void **)&v25[v27];
      unint64_t v37 = v58;
      *(void *)&v25[v27] = v58;
      id v38 = v37;

      uint64_t v39 = v63;
      swift_beginAccess();
      uint64_t v40 = MEMORY[0x18C119DF0](v39);
      if (v40)
      {
        uint64_t v41 = (void *)v40;
        unint64_t v42 = *(uint64_t (**)(void))(v40 + OBJC_IVAR____TtC7SwiftUI12StubDocument_viewProvider);
        swift_retain();
        uint64_t v43 = v64;
        uint64_t v44 = v42();

        swift_release();
      }
      else
      {
        uint64_t v43 = v64;
        uint64_t v44 = AnyView.init<A>(_:)();
      }
      v79[0] = v44;
      v79[1] = v62;
      v79[2] = v61;
      v79[3] = v60;
      v79[4] = v32;
      v79[5] = v31;
      uint64_t v47 = (char *)specialized UIHostingController.init(rootView:)((uint64_t)v79);
      swift_release();
      outlined release of NavigationItemDescription((uint64_t)&v71);
      *(void *)(*(void *)&v47[direct field offset for UIHostingController.host]
                + *(void *)((*MEMORY[0x1E4FBC8C8] & **(void **)&v47[direct field offset for UIHostingController.host])
                            + 0x198)
                + 8) = &protocol witness table for URLDocumentHostingController<A>;
      swift_unknownObjectWeakAssign();
      uint64_t v48 = static AppGraph.shared;
      uint64_t v49 = v70;
      uint64_t v50 = v69;
      uint64_t v51 = v66;
      if (static AppGraph.shared)
      {
        uint64_t v52 = v38;
        uint64_t v53 = v47;
        swift_retain();
        specialized AppGraph.addObserver(_:)(v53, v48);
        swift_release();
        swift_release();

        uint64_t v54 = *(void (**)(char *, uint64_t))(v68 + 8);
        v54(v43, v49);

        swift_release();
        uint64_t v51 = v53;
      }
      else
      {
        swift_release();
        swift_release();

        uint64_t v54 = *(void (**)(char *, uint64_t))(v68 + 8);
        v54(v43, v49);
      }

      v54(v50, v49);
      return v47;
    }
  }
  id v45 = objc_allocWithZone(MEMORY[0x1E4FB1EC0]);

  return (char *)objc_msgSend(v45, sel_initWithNibName_bundle_, 0, 0);
}

uint64_t closure #1 in CustomizableURLDocumentViewController.makeDocumentHostingController()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v5 = a1 + 16;
  swift_beginAccess();
  uint64_t v6 = MEMORY[0x18C119DF0](v5);
  if (v6)
  {
    uint64_t v7 = (void *)v6;
    double v8 = *(uint64_t (**)(uint64_t))(v6 + OBJC_IVAR____TtC7SwiftUI12StubDocument_viewProvider);
    swift_retain();
    uint64_t v9 = v8(a2);

    uint64_t result = swift_release();
  }
  else
  {
    uint64_t result = AnyView.init<A>(_:)();
    uint64_t v9 = result;
  }
  *a3 = v9;
  return result;
}

uint64_t type metadata accessor for CustomizableURLDocumentViewController()
{
  return self;
}

uint64_t sub_188267BD8()
{
  return swift_getWitnessTable();
}

uint64_t sub_188267DF0()
{
  return MEMORY[0x1E4F417F0];
}

uint64_t sub_188267DFC()
{
  return MEMORY[0x1E4F417F0];
}

uint64_t getEnumTagSinglePayload for DocumentIntroHelper.ShapeStyleView(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (!a2) {
    return 0;
  }
  unsigned int v7 = a2 - v5;
  if (a2 <= v5) {
    goto LABEL_19;
  }
  char v8 = 8 * v6;
  if (v6 <= 3)
  {
    unsigned int v10 = ((v7 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      int v9 = *(_DWORD *)((char *)a1 + v6);
      if (!v9) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      int v9 = *(unsigned __int16 *)((char *)a1 + v6);
      if (!*(unsigned __int16 *)((char *)a1 + v6)) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_19:
      if (v5) {
        return (*(uint64_t (**)(void))(v4 + 48))();
      }
      return 0;
    }
  }
  int v9 = *((unsigned __int8 *)a1 + v6);
  if (!*((unsigned char *)a1 + v6)) {
    goto LABEL_19;
  }
LABEL_11:
  int v11 = (v9 - 1) << v8;
  if (v6 > 3) {
    int v11 = 0;
  }
  if (v6)
  {
    if (v6 > 3) {
      LODWORD(v6) = 4;
    }
    switch((int)v6)
    {
      case 2:
        LODWORD(v6) = *a1;
        break;
      case 3:
        LODWORD(v6) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v6) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v6) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v5 + (v6 | v11) + 1;
}

void storeEnumTagSinglePayload for DocumentIntroHelper.ShapeStyleView(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = *(void *)(v6 + 64);
  BOOL v9 = a3 >= v7;
  unsigned int v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      unsigned int v14 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v14))
      {
        int v11 = 4;
      }
      else if (v14 >= 0x100)
      {
        int v11 = 2;
      }
      else
      {
        int v11 = v14 > 1;
      }
    }
    else
    {
      int v11 = 1;
    }
  }
  else
  {
    int v11 = 0;
  }
  if (v7 < a2)
  {
    unsigned int v12 = ~v7 + a2;
    if (v8 < 4)
    {
      int v13 = (v12 >> (8 * v8)) + 1;
      if (v8)
      {
        int v15 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if (v8 == 3)
        {
          *(_WORD *)a1 = v15;
          a1[2] = BYTE2(v15);
        }
        else if (v8 == 2)
        {
          *(_WORD *)a1 = v15;
        }
        else
        {
          *a1 = v15;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v12;
      int v13 = 1;
    }
    switch(v11)
    {
      case 1:
        a1[v8] = v13;
        return;
      case 2:
        *(_WORD *)&a1[v8] = v13;
        return;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v8] = v13;
        return;
      default:
        return;
    }
  }
  switch(v11)
  {
    case 1:
      a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 2:
      *(_WORD *)&a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 3:
LABEL_34:
      __break(1u);
      JUMPOUT(0x18826817CLL);
    case 4:
      *(_DWORD *)&a1[v8] = 0;
      goto LABEL_20;
    default:
LABEL_20:
      if (a2)
      {
LABEL_21:
        uint64_t v16 = *(void (**)(void))(v6 + 56);
        v16();
      }
      return;
  }
}

_UNKNOWN **base witness table accessor for View in ResolvedDocumentLaunchView<A>()
{
  return &protocol witness table for ResolvedDocumentLaunchView<A>;
}

uint64_t closure #1 in CustomizableURLDocumentViewControllerRepresentable.init<A>(title:background:contentTypes:actions:contextMenuActions:onDocumentOpen:onDocumentClose:backgroundAccessoryView:overlayAccessoryView:)(uint64_t a1)
{
  double v1 = MEMORY[0x1F4188790](a1);
  v2(v1);
  return AnyView.init<A>(_:)();
}

id CustomizableURLDocumentViewControllerRepresentable.makeUIViewController(context:)()
{
  uint64_t v28 = *(void *)(v0 + 40);
  uint64_t v29 = *(void *)(v0 + 32);
  uint64_t v1 = *(void *)(v0 + 64);
  uint64_t v2 = *(void *)(v0 + 72);
  uint64_t v27 = *(void *)(v0 + 80);
  uint64_t v34 = *(void *)(v0 + 88);
  uint64_t v35 = *(void *)(v0 + 56);
  uint64_t v3 = *(void *)(v0 + 104);
  uint64_t v32 = *(void *)(v0 + 112);
  uint64_t v33 = *(void *)(v0 + 96);
  uint64_t v4 = *(void *)(v0 + 128);
  uint64_t v30 = *(void *)(v0 + 48);
  uint64_t v31 = *(void *)(v0 + 120);
  uint64_t v5 = *(void *)(v0 + 136);
  char v6 = *(unsigned char *)(v0 + 144);
  outlined copy of Environment<EnvironmentValues>.Content(v4, v5, v6);
  specialized Environment.wrappedValue.getter(v4, v5, v6, (uint64_t *)v39);
  outlined consume of Environment<EnvironmentValues>.Content(v4, v5, v6);
  v38[0] = v39[0];
  long long v36 = 0uLL;
  uint64_t v40 = 0;
  uint64_t v7 = Text.resolveString(in:with:idiom:)();
  uint64_t v25 = v8;
  uint64_t v26 = v7;
  swift_release();
  uint64_t v9 = v2;
  swift_release();
  uint64_t v10 = *(void *)(v2 + 16);
  if (v10)
  {
    uint64_t v11 = v2 + 32;
    swift_retain();
    swift_bridgeObjectRetain_n();
    outlined copy of AppIntentExecutor?(v30);
    outlined copy of AppIntentExecutor?(v33);
    outlined copy of AppIntentExecutor?(v32);
    swift_bridgeObjectRetain();
    unsigned int v12 = (void *)MEMORY[0x1E4FBC860];
    do
    {
      outlined init with copy of DocumentLaunchScreenAction(v11, v39);
      outlined init with copy of DocumentCreationStrategy?((uint64_t)v39 + 8, (uint64_t)&v36);
      outlined destroy of DocumentLaunchScreenAction((uint64_t)v39);
      if (v37)
      {
        outlined init with take of OptionalBinaryInteger(&v36, (uint64_t)v38);
        outlined init with take of OptionalBinaryInteger(v38, (uint64_t)&v36);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          unsigned int v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v12[2] + 1, 1, v12);
        }
        unint64_t v14 = v12[2];
        unint64_t v13 = v12[3];
        if (v14 >= v13 >> 1) {
          unsigned int v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v13 > 1), v14 + 1, 1, v12);
        }
        unint64_t v12[2] = v14 + 1;
        outlined init with take of OptionalBinaryInteger(&v36, (uint64_t)&v12[5 * v14 + 4]);
      }
      else
      {
        outlined destroy of DocumentCreationStrategy?((uint64_t)&v36);
      }
      v11 += 48;
      --v10;
    }
    while (v10);
    uint64_t v9 = v2;
    swift_bridgeObjectRelease();
    uint64_t v15 = v32;
    uint64_t v16 = v33;
    uint64_t v18 = v30;
    uint64_t v17 = v31;
  }
  else
  {
    swift_retain();
    swift_bridgeObjectRetain();
    uint64_t v18 = v30;
    outlined copy of AppIntentExecutor?(v30);
    uint64_t v16 = v33;
    outlined copy of AppIntentExecutor?(v33);
    uint64_t v17 = v31;
    uint64_t v15 = v32;
    outlined copy of AppIntentExecutor?(v32);
    swift_bridgeObjectRetain();
    unsigned int v12 = (void *)MEMORY[0x1E4FBC860];
  }
  id v19 = objc_allocWithZone((Class)type metadata accessor for URLDocumentCreation());
  swift_retain();
  id v20 = URLDocumentCreation.init(contentTypes:strategies:onDocumentOpen:documentBrowserContextMenu:)(v34, (uint64_t)v12, v29, v28, v27);
  id v21 = objc_allocWithZone((Class)type metadata accessor for CustomizableURLDocumentViewController());
  long long v22 = (void *)specialized CustomizableDocumentViewController.init<A>(_:screenBackground:actions:backgroundAccessoryView:overlayAccessoryView:documentBrowserMediator:onDocumentClose:)(v26, v25, v1, v9, v16, v3, v15, v17, (uint64_t)v20, v18, v35, (uint64_t (*)(uint64_t, uint64_t, uint64_t))specialized DocumentViewController.init<A>(documentBrowserMediator:onDocumentClose:));
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v15);
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v16);
  swift_release();
  id v23 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for UIKitNavigationController()), sel_initWithRootViewController_, v22);

  return v23;
}

unint64_t lazy protocol witness table accessor for type External<DocumentBrowserContextMenuStorage> and conformance External<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type External<DocumentBrowserContextMenuStorage> and conformance External<A>;
  if (!lazy protocol witness table cache variable for type External<DocumentBrowserContextMenuStorage> and conformance External<A>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<BackgroundContext>(255, &lazy cache variable for type metadata for External<DocumentBrowserContextMenuStorage>, (uint64_t)&type metadata for DocumentBrowserContextMenuStorage, MEMORY[0x1E4F4E778]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type External<DocumentBrowserContextMenuStorage> and conformance External<A>);
  }
  return result;
}

uint64_t type metadata accessor for ResolvedDocumentLaunchView.MakeRepresentable()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for ResolvedDocumentLaunchView.Configuration()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_188268680()
{
  swift_unknownObjectWeakDestroy();

  return swift_deallocObject();
}

uint64_t sub_1882686B8()
{
  uint64_t v1 = type metadata accessor for URL();
  uint64_t v2 = *(void *)(v1 - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in CustomizableURLDocumentViewController.makeDocumentHostingController()@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v3 = *(void *)(type metadata accessor for URL() - 8);
  uint64_t v4 = *(void *)(v1 + 16);
  uint64_t v5 = v1 + ((*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));

  return closure #1 in CustomizableURLDocumentViewController.makeDocumentHostingController()(v4, v5, a1);
}

id specialized StubDocument.init(contentType:documentURL:viewProvider:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v42 = a3;
  uint64_t v43 = a4;
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  uint64_t v7 = type metadata accessor for URL();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  uint64_t v10 = (char *)v37 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  _s10Foundation3URLVSgMaTm_9(0, (unint64_t *)&lazy cache variable for type metadata for Logger?, MEMORY[0x1E4FBD360], MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v11 - 8);
  unint64_t v13 = (char *)v37 - v12;
  unint64_t v14 = v4;
  static Log.documents.getter();
  uint64_t v15 = type metadata accessor for Logger();
  uint64_t v16 = *(void *)(v15 - 8);
  int v17 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v16 + 48))(v13, 1, v15);
  uint64_t v45 = a2;
  if (v17 == 1)
  {
    _s10Foundation3URLVSgWOhTm_4((uint64_t)v13, (unint64_t *)&lazy cache variable for type metadata for Logger?, MEMORY[0x1E4FBD360]);
  }
  else
  {
    uint64_t v41 = a1;
    (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, a2, v7);
    uint64_t v18 = Logger.logObject.getter();
    os_log_type_t v19 = static os_log_type_t.info.getter();
    int v20 = v19;
    if (os_log_type_enabled(v18, v19))
    {
      int v40 = v20;
      id v21 = (uint8_t *)swift_slowAlloc();
      uint64_t v39 = swift_slowAlloc();
      uint64_t v47 = v39;
      id v38 = v21;
      *(_DWORD *)id v21 = 136315138;
      v37[1] = v21 + 4;
      lazy protocol witness table accessor for type UTType and conformance UTType((unint64_t *)&lazy protocol witness table cache variable for type URL and conformance URL, MEMORY[0x1E4F276F0]);
      uint64_t v22 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v46 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v22, v23, &v47);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
      Class v24 = v38;
      _os_log_impl(&dword_1872C6000, v18, (os_log_type_t)v40, "Creating a document with URL %s", v38, 0xCu);
      uint64_t v25 = v39;
      swift_arrayDestroy();
      MEMORY[0x18C119C60](v25, -1, -1);
      MEMORY[0x18C119C60](v24, -1, -1);
    }
    else
    {

      (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    }
    (*(void (**)(char *, uint64_t))(v16 + 8))(v13, v15);
    a1 = v41;
  }
  uint64_t v26 = &v14[OBJC_IVAR____TtC7SwiftUI12StubDocument_contentType];
  uint64_t v27 = type metadata accessor for UTType();
  uint64_t v28 = *(void *)(v27 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v28 + 16))(v26, a1, v27);
  uint64_t v29 = &v14[OBJC_IVAR____TtC7SwiftUI12StubDocument_viewProvider];
  uint64_t v30 = v43;
  *(void *)uint64_t v29 = v42;
  *((void *)v29 + 1) = v30;
  swift_retain();

  uint64_t v31 = v45;
  URL._bridgeToObjectiveC()(v32);
  uint64_t v34 = v33;
  v48.receiver = v14;
  v48.super_class = ObjectType;
  id v35 = objc_msgSendSuper2(&v48, sel_initWithFileURL_, v33);

  objc_msgSend(v35, sel_disableEditing);
  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v31, v7);
  (*(void (**)(uint64_t, uint64_t))(v28 + 8))(a1, v27);
  return v35;
}

uint64_t specialized CustomizableDocumentViewController.init<A>(_:screenBackground:actions:backgroundAccessoryView:overlayAccessoryView:documentBrowserMediator:onDocumentClose:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return specialized CustomizableDocumentViewController.init<A>(_:screenBackground:actions:backgroundAccessoryView:overlayAccessoryView:documentBrowserMediator:onDocumentClose:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, (uint64_t (*)(uint64_t, uint64_t, uint64_t))specialized DocumentViewController.init<A>(documentBrowserMediator:onDocumentClose:));
}

uint64_t specialized CustomizableDocumentViewController.init<A>(_:screenBackground:actions:backgroundAccessoryView:overlayAccessoryView:documentBrowserMediator:onDocumentClose:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t (*a12)(uint64_t, uint64_t, uint64_t))
{
  int v17 = &v12[OBJC_IVAR____TtC7SwiftUI34CustomizableDocumentViewController_cardTitle];
  *(void *)int v17 = 0;
  *((void *)v17 + 1) = 0;
  uint64_t v18 = OBJC_IVAR____TtC7SwiftUI34CustomizableDocumentViewController_screenBackground;
  *(void *)&v12[OBJC_IVAR____TtC7SwiftUI34CustomizableDocumentViewController_screenBackground] = 0;
  os_log_type_t v19 = (uint64_t *)&v12[OBJC_IVAR____TtC7SwiftUI34CustomizableDocumentViewController_backgroundAccessoryView];
  *os_log_type_t v19 = 0;
  v19[1] = 0;
  int v20 = (uint64_t *)&v12[OBJC_IVAR____TtC7SwiftUI34CustomizableDocumentViewController_overlayAccessoryView];
  *int v20 = 0;
  v20[1] = 0;
  *(void *)int v17 = a1;
  *((void *)v17 + 1) = a2;
  id v21 = v12;
  swift_bridgeObjectRelease();
  *(void *)&v12[v18] = a3;
  swift_retain();
  swift_release();
  *(void *)&v21[OBJC_IVAR____TtC7SwiftUI34CustomizableDocumentViewController_actions] = a4;
  uint64_t v22 = *v19;
  *os_log_type_t v19 = a5;
  v19[1] = a6;
  outlined copy of AppIntentExecutor?(a5);
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v22);
  uint64_t v23 = *v20;
  *int v20 = a7;
  v20[1] = a8;
  outlined copy of AppIntentExecutor?(a7);
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v23);

  return a12(a9, a10, a11);
}

void type metadata accessor for URLDocumentHostingController<AnyView>()
{
  if (!lazy cache variable for type metadata for URLDocumentHostingController<AnyView>)
  {
    unint64_t v0 = type metadata accessor for URLDocumentHostingController();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for URLDocumentHostingController<AnyView>);
    }
  }
}

uint64_t outlined release of NavigationItemDescription(uint64_t a1)
{
  return a1;
}

void specialized StubDocument.writeContents(_:to:for:originalContentsURL:)(uint64_t a1, uint64_t a2)
{
  v44[1] = *(id *)MEMORY[0x1E4F143B8];
  uint64_t v3 = type metadata accessor for URL();
  uint64_t v39 = *(void *)(v3 - 8);
  uint64_t v40 = v3;
  MEMORY[0x1F4188790](v3);
  long long v36 = (char *)&v36 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for URLResourceValues();
  uint64_t v37 = *(void *)(v5 - 8);
  uint64_t v38 = v5;
  MEMORY[0x1F4188790](v5);
  uint64_t v42 = (char *)&v36 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for UTType();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  uint64_t v10 = (char *)&v36 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v11);
  unint64_t v13 = (char *)&v36 - v12;
  unint64_t v14 = self;
  id v15 = objc_msgSend(v14, sel_defaultManager);
  uint64_t v16 = URL.path.getter();
  int v17 = (void *)MEMORY[0x18C115780](v16);
  swift_bridgeObjectRelease();
  unsigned __int8 v18 = objc_msgSend(v15, sel_fileExistsAtPath_, v17);

  if ((v18 & 1) == 0)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v13, v41 + OBJC_IVAR____TtC7SwiftUI12StubDocument_contentType, v7);
    static UTType.package.getter();
    char v19 = UTType.conforms(to:)();
    int v20 = *(void (**)(char *, uint64_t))(v8 + 8);
    v20(v10, v7);
    v20(v13, v7);
    if (v19)
    {
      URLResourceValues.init()();
      uint64_t v22 = v39;
      uint64_t v21 = v40;
      uint64_t v23 = v36;
      (*(void (**)(char *, uint64_t, uint64_t))(v39 + 16))(v36, a2, v40);
      URLResourceValues.isPackage.setter();
      Class v24 = v43;
      URL.setResourceValues(_:)();
      if (v24) {

      }
      id v25 = objc_msgSend(v14, sel_defaultManager);
      uint64_t v26 = URL.path.getter();
      uint64_t v27 = (void *)MEMORY[0x18C115780](v26);
      swift_bridgeObjectRelease();
      v44[0] = 0;
      unsigned int v28 = objc_msgSend(v25, sel_createDirectoryAtPath_withIntermediateDirectories_attributes_error_, v27, 1, 0, v44);

      if (v28)
      {
        uint64_t v29 = *(void (**)(char *, uint64_t))(v22 + 8);
        id v30 = v44[0];
        v29(v23, v21);
      }
      else
      {
        id v35 = v44[0];
        _convertNSErrorToError(_:)();

        swift_willThrow();
        (*(void (**)(char *, uint64_t))(v22 + 8))(v23, v21);
      }
      (*(void (**)(char *, uint64_t))(v37 + 8))(v42, v38);
    }
    else
    {
      id v31 = objc_msgSend(v14, sel_defaultManager);
      uint64_t v32 = URL.path.getter();
      uint64_t v33 = (void *)MEMORY[0x18C115780](v32);
      swift_bridgeObjectRelease();
      Class isa = Data._bridgeToObjectiveC()().super.isa;
      objc_msgSend(v31, sel_createFileAtPath_contents_attributes_, v33, isa, 0);
    }
  }
}

uint64_t sub_1882693A4()
{
  _Block_release(*(const void **)(v0 + 16));

  return swift_deallocObject();
}

uint64_t sub_1882693DC()
{
  swift_unknownObjectRelease();

  swift_release();

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in URLDocumentCreation.documentBrowser(_:didRequestDocumentCreationWithHandler:)(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = v1[5];
  uint64_t v9 = v1[6];
  uint64_t v8 = v1[7];
  uint64_t v10 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v10;
  *uint64_t v10 = v2;
  v10[1] = partial apply for closure #1 in FeedbackGenerator.body(content:);
  return closure #1 in URLDocumentCreation.documentBrowser(_:didRequestDocumentCreationWithHandler:)(a1, v4, v5, v6, v7, v9, v8);
}

uint64_t sub_188269500()
{
  uint64_t v1 = type metadata accessor for UTType();
  (*(void (**)(unint64_t, uint64_t))(*(void *)(v1 - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(void *)(v1 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v1 - 8) + 80)), v1);

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in static URLDocumentCreationStrategy.defaultDocumentProvider(contentType:)(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for UTType() - 8);
  uint64_t v5 = v1 + ((*(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v6;
  *uint64_t v6 = v2;
  v6[1] = partial apply for closure #1 in FeedbackGenerator.body(content:);
  return closure #1 in static URLDocumentCreationStrategy.defaultDocumentProvider(contentType:)(a1, v5);
}

uint64_t outlined destroy of DocumentCreationStrategy?(uint64_t a1)
{
  type metadata accessor for DocumentCreationStrategy?();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void type metadata accessor for DocumentCreationStrategy?()
{
  if (!lazy cache variable for type metadata for DocumentCreationStrategy?)
  {
    type metadata accessor for CVarArg(255, (unint64_t *)&lazy cache variable for type metadata for DocumentCreationStrategy);
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for DocumentCreationStrategy?);
    }
  }
}

uint64_t partial apply for implicit closure #3 in URLDocumentCreation.presentDocument(at:)()
{
  return implicit closure #3 in URLDocumentCreation.presentDocument(at:)(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_188269730()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in DocumentLaunchView.init<A, B, C>(_:for:actions:onDocumentOpen:background:backgroundAccessoryView:overlayAccessoryView:)(uint64_t a1)
{
  return partial apply for closure #2 in DocumentLaunchView.init<A, B, C>(_:for:actions:onDocumentOpen:background:backgroundAccessoryView:overlayAccessoryView:)(a1, (uint64_t (*)(uint64_t, void, void, void, void, void, void, void, void, void, void, void, void))closure #2 in DocumentLaunchView.init<A, B, C>(_:for:actions:onDocumentOpen:background:backgroundAccessoryView:overlayAccessoryView:));
}

uint64_t partial apply for closure #1 in DocumentLaunchView.init<A, B, C>(_:for:actions:onDocumentOpen:background:backgroundAccessoryView:overlayAccessoryView:)(uint64_t a1)
{
  return partial apply for closure #2 in DocumentLaunchView.init<A, B, C>(_:for:actions:onDocumentOpen:background:backgroundAccessoryView:overlayAccessoryView:)(a1, (uint64_t (*)(uint64_t, void, void, void, void, void, void, void, void, void, void, void, void))closure #1 in DocumentLaunchView.init<A, B, C>(_:for:actions:onDocumentOpen:background:backgroundAccessoryView:overlayAccessoryView:));
}

uint64_t partial apply for closure #2 in DocumentLaunchView.init<A, B, C>(_:for:actions:onDocumentOpen:background:backgroundAccessoryView:overlayAccessoryView:)(uint64_t a1, uint64_t (*a2)(uint64_t, void, void, void, void, void, void, void, void, void, void, void, void))
{
  return a2(a1, v2[12], v2[13], v2[2], v2[3], v2[4], v2[5], v2[6], v2[7], v2[8], v2[9], v2[10], v2[11]);
}

uint64_t *outlined release of ModifiedContent<ResolvedDocumentLaunchView<B>, _EnvironmentKeyWritingModifier<BackgroundContext>>(uint64_t *a1)
{
  uint64_t v2 = a1[10];
  uint64_t v3 = a1[13];
  uint64_t v4 = a1[15];
  outlined consume of Text?(*a1, a1[1], a1[2], a1[3]);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v2);
  swift_release();
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v3);
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v4);
  swift_release();
  return a1;
}

uint64_t destroy for CustomizableURLDocumentViewControllerRepresentable(uint64_t a1)
{
  outlined consume of Text.Storage(*(void *)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16));
  swift_bridgeObjectRelease();
  swift_release();
  if (*(void *)(a1 + 48)) {
    swift_release();
  }
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (*(void *)(a1 + 96)) {
    swift_release();
  }
  if (*(void *)(a1 + 112)) {
    swift_release();
  }
  outlined consume of Environment<EnvironmentValues>.Content(*(void *)(a1 + 128), *(void *)(a1 + 136), *(unsigned char *)(a1 + 144));
  uint64_t v2 = *(void *)(a1 + 152);
  uint64_t v3 = *(unsigned __int8 *)(a1 + 160);

  return outlined consume of Environment<AnyShapeStyle?>.Content(v2, v3);
}

uint64_t initializeWithCopy for CustomizableURLDocumentViewControllerRepresentable(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  uint64_t v5 = *(void *)(a2 + 8);
  char v6 = *(unsigned char *)(a2 + 16);
  outlined copy of Text.Storage(*(void *)a2, v5, v6);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  uint64_t v7 = *(void *)(a2 + 48);
  *(unsigned char *)(a1 + 16) = v6;
  uint64_t v8 = *(void *)(a2 + 40);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 40) = v8;
  swift_bridgeObjectRetain();
  swift_retain();
  if (v7)
  {
    uint64_t v9 = *(void *)(a2 + 56);
    *(void *)(a1 + 48) = v7;
    *(void *)(a1 + 56) = v9;
    swift_retain();
  }
  else
  {
    *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  }
  uint64_t v10 = *(void *)(a2 + 96);
  uint64_t v11 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v11;
  uint64_t v12 = *(void *)(a2 + 88);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = v12;
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v10)
  {
    uint64_t v13 = *(void *)(a2 + 104);
    *(void *)(a1 + 96) = v10;
    *(void *)(a1 + 104) = v13;
    swift_retain();
  }
  else
  {
    *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  }
  uint64_t v14 = *(void *)(a2 + 112);
  if (v14)
  {
    uint64_t v15 = *(void *)(a2 + 120);
    *(void *)(a1 + 112) = v14;
    *(void *)(a1 + 120) = v15;
    swift_retain();
  }
  else
  {
    *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  }
  uint64_t v16 = *(void *)(a2 + 128);
  uint64_t v17 = *(void *)(a2 + 136);
  char v18 = *(unsigned char *)(a2 + 144);
  outlined copy of Environment<EnvironmentValues>.Content(v16, v17, v18);
  *(void *)(a1 + 128) = v16;
  *(void *)(a1 + 136) = v17;
  *(unsigned char *)(a1 + 144) = v18;
  uint64_t v19 = *(void *)(a2 + 152);
  uint64_t v20 = *(unsigned __int8 *)(a2 + 160);
  outlined copy of Environment<HoverEffect?>.Content(v19, v20);
  *(void *)(a1 + 152) = v19;
  *(unsigned char *)(a1 + 160) = v20;
  return a1;
}

uint64_t assignWithCopy for CustomizableURLDocumentViewControllerRepresentable(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  uint64_t v5 = *(void *)(a2 + 8);
  char v6 = *(unsigned char *)(a2 + 16);
  outlined copy of Text.Storage(*(void *)a2, v5, v6);
  uint64_t v7 = *(void *)a1;
  uint64_t v8 = *(void *)(a1 + 8);
  char v9 = *(unsigned char *)(a1 + 16);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  *(unsigned char *)(a1 + 16) = v6;
  outlined consume of Text.Storage(v7, v8, v9);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v10 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v10;
  swift_retain();
  swift_release();
  uint64_t v11 = *(void *)(a2 + 48);
  if (*(void *)(a1 + 48))
  {
    if (v11)
    {
      uint64_t v12 = *(void *)(a2 + 56);
      *(void *)(a1 + 48) = v11;
      *(void *)(a1 + 56) = v12;
      swift_retain();
      swift_release();
      goto LABEL_8;
    }
    swift_release();
  }
  else if (v11)
  {
    uint64_t v13 = *(void *)(a2 + 56);
    *(void *)(a1 + 48) = v11;
    *(void *)(a1 + 56) = v13;
    swift_retain();
    goto LABEL_8;
  }
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
LABEL_8:
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_retain();
  swift_release();
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v14 = *(void *)(a2 + 96);
  if (*(void *)(a1 + 96))
  {
    if (v14)
    {
      uint64_t v15 = *(void *)(a2 + 104);
      *(void *)(a1 + 96) = v14;
      *(void *)(a1 + 104) = v15;
      swift_retain();
      swift_release();
      goto LABEL_15;
    }
    swift_release();
  }
  else if (v14)
  {
    uint64_t v16 = *(void *)(a2 + 104);
    *(void *)(a1 + 96) = v14;
    *(void *)(a1 + 104) = v16;
    swift_retain();
    goto LABEL_15;
  }
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
LABEL_15:
  uint64_t v17 = *(void *)(a2 + 112);
  if (!*(void *)(a1 + 112))
  {
    if (v17)
    {
      uint64_t v19 = *(void *)(a2 + 120);
      *(void *)(a1 + 112) = v17;
      *(void *)(a1 + 120) = v19;
      swift_retain();
      goto LABEL_22;
    }
LABEL_21:
    *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
    goto LABEL_22;
  }
  if (!v17)
  {
    swift_release();
    goto LABEL_21;
  }
  uint64_t v18 = *(void *)(a2 + 120);
  *(void *)(a1 + 112) = v17;
  *(void *)(a1 + 120) = v18;
  swift_retain();
  swift_release();
LABEL_22:
  uint64_t v20 = *(void *)(a2 + 128);
  uint64_t v21 = *(void *)(a2 + 136);
  char v22 = *(unsigned char *)(a2 + 144);
  outlined copy of Environment<EnvironmentValues>.Content(v20, v21, v22);
  uint64_t v23 = *(void *)(a1 + 128);
  uint64_t v24 = *(void *)(a1 + 136);
  char v25 = *(unsigned char *)(a1 + 144);
  *(void *)(a1 + 128) = v20;
  *(void *)(a1 + 136) = v21;
  *(unsigned char *)(a1 + 144) = v22;
  outlined consume of Environment<EnvironmentValues>.Content(v23, v24, v25);
  uint64_t v26 = *(void *)(a2 + 152);
  uint64_t v27 = *(unsigned __int8 *)(a2 + 160);
  outlined copy of Environment<HoverEffect?>.Content(v26, v27);
  uint64_t v28 = *(void *)(a1 + 152);
  uint64_t v29 = *(unsigned __int8 *)(a1 + 160);
  *(void *)(a1 + 152) = v26;
  *(unsigned char *)(a1 + 160) = v27;
  outlined consume of Environment<AnyShapeStyle?>.Content(v28, v29);
  return a1;
}

uint64_t assignWithTake for CustomizableURLDocumentViewControllerRepresentable(uint64_t a1, uint64_t a2)
{
  char v4 = *(unsigned char *)(a2 + 16);
  uint64_t v5 = *(void *)a1;
  uint64_t v6 = *(void *)(a1 + 8);
  char v7 = *(unsigned char *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(unsigned char *)(a1 + 16) = v4;
  outlined consume of Text.Storage(v5, v6, v7);
  swift_bridgeObjectRelease();
  uint64_t v8 = *(void *)(a2 + 40);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 40) = v8;
  swift_release();
  uint64_t v9 = *(void *)(a2 + 48);
  if (*(void *)(a1 + 48))
  {
    if (v9)
    {
      uint64_t v10 = *(void *)(a2 + 56);
      *(void *)(a1 + 48) = v9;
      *(void *)(a1 + 56) = v10;
      swift_release();
      goto LABEL_8;
    }
    swift_release();
  }
  else if (v9)
  {
    uint64_t v11 = *(void *)(a2 + 56);
    *(void *)(a1 + 48) = v9;
    *(void *)(a1 + 56) = v11;
    goto LABEL_8;
  }
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
LABEL_8:
  swift_release();
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  swift_bridgeObjectRelease();
  uint64_t v12 = *(void *)(a2 + 96);
  if (*(void *)(a1 + 96))
  {
    if (v12)
    {
      uint64_t v13 = *(void *)(a2 + 104);
      *(void *)(a1 + 96) = v12;
      *(void *)(a1 + 104) = v13;
      swift_release();
      goto LABEL_15;
    }
    swift_release();
  }
  else if (v12)
  {
    uint64_t v14 = *(void *)(a2 + 104);
    *(void *)(a1 + 96) = v12;
    *(void *)(a1 + 104) = v14;
    goto LABEL_15;
  }
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
LABEL_15:
  uint64_t v15 = *(void *)(a2 + 112);
  if (!*(void *)(a1 + 112))
  {
    if (v15)
    {
      uint64_t v17 = *(void *)(a2 + 120);
      *(void *)(a1 + 112) = v15;
      *(void *)(a1 + 120) = v17;
      goto LABEL_22;
    }
LABEL_21:
    *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
    goto LABEL_22;
  }
  if (!v15)
  {
    swift_release();
    goto LABEL_21;
  }
  uint64_t v16 = *(void *)(a2 + 120);
  *(void *)(a1 + 112) = v15;
  *(void *)(a1 + 120) = v16;
  swift_release();
LABEL_22:
  char v18 = *(unsigned char *)(a2 + 144);
  uint64_t v19 = *(void *)(a1 + 128);
  uint64_t v20 = *(void *)(a1 + 136);
  char v21 = *(unsigned char *)(a1 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(unsigned char *)(a1 + 144) = v18;
  outlined consume of Environment<EnvironmentValues>.Content(v19, v20, v21);
  char v22 = *(unsigned char *)(a2 + 160);
  uint64_t v23 = *(void *)(a1 + 152);
  uint64_t v24 = *(unsigned __int8 *)(a1 + 160);
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  *(unsigned char *)(a1 + 160) = v22;
  outlined consume of Environment<AnyShapeStyle?>.Content(v23, v24);
  return a1;
}

uint64_t getEnumTagSinglePayload for CustomizableURLDocumentViewControllerRepresentable(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 161)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for CustomizableURLDocumentViewControllerRepresentable(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 152) = 0;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 160) = 0;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 161) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 24) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 161) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CustomizableURLDocumentViewControllerRepresentable()
{
  return &type metadata for CustomizableURLDocumentViewControllerRepresentable;
}

uint64_t destroy for ResolvedDocumentLaunchView(uint64_t a1)
{
  if (*(void *)(a1 + 24))
  {
    outlined consume of Text.Storage(*(void *)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16));
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  if (*(void *)(a1 + 80)) {
    swift_release();
  }
  uint64_t result = swift_release();
  if (*(void *)(a1 + 104)) {
    uint64_t result = swift_release();
  }
  if (*(void *)(a1 + 120))
  {
    return swift_release();
  }
  return result;
}

uint64_t initializeWithCopy for ResolvedDocumentLaunchView(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    uint64_t v5 = *(void *)a2;
    uint64_t v6 = *(void *)(a2 + 8);
    char v7 = *(unsigned char *)(a2 + 16);
    outlined copy of Text.Storage(*(void *)a2, v6, v7);
    *(void *)a1 = v5;
    *(void *)(a1 + 8) = v6;
    *(unsigned char *)(a1 + 16) = v7;
    *(void *)(a1 + 24) = v4;
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v8 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v8;
  }
  uint64_t v9 = *(void *)(a2 + 80);
  uint64_t v10 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v10;
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  uint64_t v11 = *(void *)(a2 + 72);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(void *)(a1 + 72) = v11;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  if (v9)
  {
    uint64_t v12 = *(void *)(a2 + 88);
    *(void *)(a1 + 80) = v9;
    *(void *)(a1 + 88) = v12;
    swift_retain();
  }
  else
  {
    *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  }
  uint64_t v13 = *(void *)(a2 + 104);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  swift_retain();
  if (v13)
  {
    uint64_t v14 = *(void *)(a2 + 112);
    *(void *)(a1 + 104) = v13;
    *(void *)(a1 + 112) = v14;
    swift_retain();
  }
  else
  {
    *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  }
  uint64_t v15 = *(void *)(a2 + 120);
  if (v15)
  {
    uint64_t v16 = *(void *)(a2 + 128);
    *(void *)(a1 + 120) = v15;
    *(void *)(a1 + 128) = v16;
    swift_retain();
  }
  else
  {
    *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  }
  return a1;
}

uint64_t assignWithCopy for ResolvedDocumentLaunchView(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 24);
  if (*(void *)(a1 + 24))
  {
    if (v4)
    {
      uint64_t v5 = *(void *)a2;
      uint64_t v6 = *(void *)(a2 + 8);
      char v7 = *(unsigned char *)(a2 + 16);
      outlined copy of Text.Storage(*(void *)a2, v6, v7);
      uint64_t v8 = *(void *)a1;
      uint64_t v9 = *(void *)(a1 + 8);
      char v10 = *(unsigned char *)(a1 + 16);
      *(void *)a1 = v5;
      *(void *)(a1 + 8) = v6;
      *(unsigned char *)(a1 + 16) = v7;
      outlined consume of Text.Storage(v8, v9, v10);
      *(void *)(a1 + 24) = *(void *)(a2 + 24);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      outlined destroy of Text(a1);
      long long v14 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v14;
    }
  }
  else if (v4)
  {
    uint64_t v11 = *(void *)a2;
    uint64_t v12 = *(void *)(a2 + 8);
    char v13 = *(unsigned char *)(a2 + 16);
    outlined copy of Text.Storage(*(void *)a2, v12, v13);
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v12;
    *(unsigned char *)(a1 + 16) = v13;
    *(void *)(a1 + 24) = *(void *)(a2 + 24);
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v15 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v15;
  }
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v16 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v16;
  swift_retain();
  swift_release();
  uint64_t v17 = *(void *)(a2 + 80);
  if (*(void *)(a1 + 80))
  {
    if (v17)
    {
      uint64_t v18 = *(void *)(a2 + 88);
      *(void *)(a1 + 80) = v17;
      *(void *)(a1 + 88) = v18;
      swift_retain();
      swift_release();
      goto LABEL_15;
    }
    swift_release();
  }
  else if (v17)
  {
    uint64_t v19 = *(void *)(a2 + 88);
    *(void *)(a1 + 80) = v17;
    *(void *)(a1 + 88) = v19;
    swift_retain();
    goto LABEL_15;
  }
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
LABEL_15:
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  swift_retain();
  swift_release();
  uint64_t v20 = *(void *)(a2 + 104);
  if (*(void *)(a1 + 104))
  {
    if (v20)
    {
      uint64_t v21 = *(void *)(a2 + 112);
      *(void *)(a1 + 104) = v20;
      *(void *)(a1 + 112) = v21;
      swift_retain();
      swift_release();
      goto LABEL_22;
    }
    swift_release();
  }
  else if (v20)
  {
    uint64_t v22 = *(void *)(a2 + 112);
    *(void *)(a1 + 104) = v20;
    *(void *)(a1 + 112) = v22;
    swift_retain();
    goto LABEL_22;
  }
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
LABEL_22:
  uint64_t v23 = *(void *)(a2 + 120);
  if (!*(void *)(a1 + 120))
  {
    if (v23)
    {
      uint64_t v25 = *(void *)(a2 + 128);
      *(void *)(a1 + 120) = v23;
      *(void *)(a1 + 128) = v25;
      swift_retain();
      return a1;
    }
LABEL_28:
    *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
    return a1;
  }
  if (!v23)
  {
    swift_release();
    goto LABEL_28;
  }
  uint64_t v24 = *(void *)(a2 + 128);
  *(void *)(a1 + 120) = v23;
  *(void *)(a1 + 128) = v24;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for ResolvedDocumentLaunchView(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 24))
  {
    uint64_t v4 = *(void *)(a2 + 24);
    if (v4)
    {
      char v5 = *(unsigned char *)(a2 + 16);
      uint64_t v6 = *(void *)a1;
      uint64_t v7 = *(void *)(a1 + 8);
      char v8 = *(unsigned char *)(a1 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(unsigned char *)(a1 + 16) = v5;
      outlined consume of Text.Storage(v6, v7, v8);
      *(void *)(a1 + 24) = v4;
      swift_bridgeObjectRelease();
      goto LABEL_6;
    }
    outlined destroy of Text(a1);
  }
  long long v9 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v9;
LABEL_6:
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  swift_release();
  uint64_t v10 = *(void *)(a2 + 80);
  if (*(void *)(a1 + 80))
  {
    if (v10)
    {
      uint64_t v11 = *(void *)(a2 + 88);
      *(void *)(a1 + 80) = v10;
      *(void *)(a1 + 88) = v11;
      swift_release();
      goto LABEL_13;
    }
    swift_release();
  }
  else if (v10)
  {
    uint64_t v12 = *(void *)(a2 + 88);
    *(void *)(a1 + 80) = v10;
    *(void *)(a1 + 88) = v12;
    goto LABEL_13;
  }
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
LABEL_13:
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  swift_release();
  uint64_t v13 = *(void *)(a2 + 104);
  if (*(void *)(a1 + 104))
  {
    if (v13)
    {
      uint64_t v14 = *(void *)(a2 + 112);
      *(void *)(a1 + 104) = v13;
      *(void *)(a1 + 112) = v14;
      swift_release();
      goto LABEL_20;
    }
    swift_release();
  }
  else if (v13)
  {
    uint64_t v15 = *(void *)(a2 + 112);
    *(void *)(a1 + 104) = v13;
    *(void *)(a1 + 112) = v15;
    goto LABEL_20;
  }
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
LABEL_20:
  uint64_t v16 = *(void *)(a2 + 120);
  if (!*(void *)(a1 + 120))
  {
    if (v16)
    {
      uint64_t v18 = *(void *)(a2 + 128);
      *(void *)(a1 + 120) = v16;
      *(void *)(a1 + 128) = v18;
      return a1;
    }
LABEL_26:
    *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
    return a1;
  }
  if (!v16)
  {
    swift_release();
    goto LABEL_26;
  }
  uint64_t v17 = *(void *)(a2 + 128);
  *(void *)(a1 + 120) = v16;
  *(void *)(a1 + 128) = v17;
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for ResolvedDocumentLaunchView(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 136)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 32);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ResolvedDocumentLaunchView(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 136) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 32) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 136) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t sub_18826A628()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for _AttributeBody in ResolvedDocumentLaunchView<A>.MakeRepresentable()
{
  return swift_getWitnessTable();
}

uint64_t *outlined release of ResolvedDocumentLaunchView<B>(uint64_t *a1)
{
  uint64_t v2 = a1[10];
  uint64_t v3 = a1[13];
  uint64_t v4 = a1[15];
  outlined consume of Text?(*a1, a1[1], a1[2], a1[3]);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v2);
  swift_release();
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v3);
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v4);
  return a1;
}

uint64_t sub_18826A760@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = EnvironmentValues.backgroundStyle.getter();
  *a1 = result;
  return result;
}

uint64_t sub_18826A79C()
{
  return EnvironmentValues.backgroundStyle.setter();
}

uint64_t sub_18826A7C8()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in CustomizableURLDocumentViewControllerRepresentable.init<A>(title:background:contentTypes:actions:contextMenuActions:onDocumentOpen:onDocumentClose:backgroundAccessoryView:overlayAccessoryView:)(uint64_t a1)
{
  return closure #1 in CustomizableURLDocumentViewControllerRepresentable.init<A>(title:background:contentTypes:actions:contextMenuActions:onDocumentOpen:onDocumentClose:backgroundAccessoryView:overlayAccessoryView:)(a1);
}

uint64_t *outlined retain of ResolvedDocumentLaunchView<A>.Configuration(uint64_t *a1)
{
  uint64_t v2 = a1[10];
  uint64_t v3 = a1[13];
  uint64_t v4 = a1[15];
  outlined copy of Text?(*a1, a1[1], a1[2], a1[3]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  outlined copy of AppIntentExecutor?(v2);
  swift_retain();
  outlined copy of AppIntentExecutor?(v3);
  outlined copy of AppIntentExecutor?(v4);
  return a1;
}

double _s7SwiftUI50CustomizableURLDocumentViewControllerRepresentable33_C5D9187052031207E3ECDA2B55F1D5F4LLVSgWOi0_(uint64_t a1)
{
  *(unsigned char *)(a1 + 160) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

uint64_t outlined init with take of CustomizableURLDocumentViewControllerRepresentable?(uint64_t a1, uint64_t a2)
{
  type metadata accessor for _EnvironmentKeyWritingModifier<BackgroundContext>(0, &lazy cache variable for type metadata for CustomizableURLDocumentViewControllerRepresentable?, (uint64_t)&type metadata for CustomizableURLDocumentViewControllerRepresentable, MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void type metadata accessor for _EnvironmentKeyWritingModifier<BackgroundContext>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

uint64_t outlined init with copy of DocumentCreationStrategy?(uint64_t a1, uint64_t a2)
{
  type metadata accessor for DocumentCreationStrategy?();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

__n128 GridItem.size.getter@<Q0>(__n128 *a1@<X8>)
{
  unsigned __int8 v2 = v1[1].n128_u8[0];
  __n128 result = *v1;
  *a1 = *v1;
  a1[1].n128_u8[0] = v2;
  return result;
}

__n128 GridItem.size.setter(__n128 *a1)
{
  unsigned __int8 v2 = a1[1].n128_u8[0];
  __n128 result = *a1;
  *uint64_t v1 = *a1;
  v1[1].n128_u8[0] = v2;
  return result;
}

uint64_t (*GridItem.size.modify())(void, void, void, void)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t GridItem.spacing.getter()
{
  return *(void *)(v0 + 24);
}

uint64_t GridItem.spacing.setter(uint64_t result, char a2)
{
  *(void *)(v2 + 24) = result;
  *(unsigned char *)(v2 + 32) = a2 & 1;
  return result;
}

uint64_t (*GridItem.spacing.modify())(void, void, void, void)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t GridItem.alignment.getter()
{
  return *(void *)(v0 + 40);
}

uint64_t GridItem.alignment.setter(uint64_t result, uint64_t a2, char a3)
{
  *(void *)(v3 + 40) = result;
  *(void *)(v3 + 48) = a2;
  *(unsigned char *)(v3 + 56) = a3 & 1;
  return result;
}

uint64_t (*GridItem.alignment.modify())(void, void, void, void)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t partial apply for closure #1 in static LazyHGrid._makeView(view:inputs:)(uint64_t a1)
{
  return closure #1 in static LazyHGrid._makeView(view:inputs:)(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), (uint64_t (*)(void))type metadata accessor for LazyHGrid, (uint64_t)&type metadata for LazyHGridLayout, (uint64_t)&protocol witness table for LazyHGridLayout, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply);
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance LazyHGrid<A>()
{
  return protocol witness for static View._viewListCount(inputs:) in conformance ViewThatFits<A>();
}

void protocol witness for View.body.getter in conformance LazyHGrid<A>()
{
}

uint64_t closure #1 in static LazyHGrid._makeView(view:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void), uint64_t a5, uint64_t a6, uint64_t a7)
{
  unint64_t v12[2] = a4(0);
  uint64_t v13 = type metadata accessor for _VariadicView.Tree();
  uint64_t v9 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(a1, a7, (uint64_t)v12, v13, MEMORY[0x1E4FBC248], v9, MEMORY[0x1E4FBC278], v10);
  return v14;
}

uint64_t partial apply for closure #1 in static LazyVGrid._makeView(view:inputs:)(uint64_t a1)
{
  return closure #1 in static LazyHGrid._makeView(view:inputs:)(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), (uint64_t (*)(void))type metadata accessor for LazyVGrid, (uint64_t)&type metadata for LazyVGridLayout, (uint64_t)&protocol witness table for LazyVGridLayout, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply);
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance LazyVGrid<A>()
{
  return protocol witness for static View._viewListCount(inputs:) in conformance ViewThatFits<A>();
}

void protocol witness for View.body.getter in conformance LazyVGrid<A>()
{
}

uint64_t getEnumTagSinglePayload for GridItem(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFE && *(unsigned char *)(a1 + 57)) {
    return (*(_DWORD *)a1 + 254);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 2) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for GridItem(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 56) = 0;
    *(void *)__n128 result = a2 - 254;
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 57) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 57) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 16) = -(char)a2;
    }
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for LazyHGrid(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(_DWORD *)(v5 + 80);
  unint64_t v7 = ((v6 + 32) & ~v6) + *(void *)(v5 + 64);
  int v8 = *(_DWORD *)(v5 + 80) & 0x100000;
  uint64_t v9 = *a2;
  *(void *)a1 = *a2;
  if (v6 > 7 || v8 != 0 || v7 > 0x18)
  {
    a1 = v9 + ((v6 & 0xF8 ^ 0x1F8) & (v6 + 16));
    swift_retain();
  }
  else
  {
    uint64_t v12 = a2[2];
    *(void *)(a1 + 8) = a2[1];
    *(void *)(a1 + 16) = v12;
    *(unsigned char *)(a1 + 24) = *((unsigned char *)a2 + 24);
    *(_DWORD *)(a1 + 28) = *((_DWORD *)a2 + 7);
    uint64_t v13 = (a1 + v6 + 32) & ~v6;
    uint64_t v14 = ((unint64_t)a2 + v6 + 32) & ~v6;
    uint64_t v15 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
    swift_bridgeObjectRetain();
    v15(v13, v14, v4);
  }
  return a1;
}

uint64_t assignWithTake for LazyHGrid(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v6;
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  uint64_t v7 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v7 + 40))((*(unsigned __int8 *)(v7 + 80) + 32 + a1) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80), (*(unsigned __int8 *)(v7 + 80) + 32 + a2) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
  return a1;
}

ValueMetadata *type metadata accessor for LazyHGridLayout()
{
  return &type metadata for LazyHGridLayout;
}

uint64_t initializeWithCopy for LazyHGridLayout(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for LazyHGridLayout(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  uint64_t v4 = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(void *)(a1 + 16) = v4;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  return a1;
}

uint64_t assignWithTake for LazyHGridLayout(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v4;
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  return a1;
}

ValueMetadata *type metadata accessor for LazyVGridLayout()
{
  return &type metadata for LazyVGridLayout;
}

uint64_t protocol witness for LazyStack.minorGeometry(updatingSize:) in conformance LazyHGridLayout(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for LazyStack.minorGeometry(updatingSize:) in conformance LazyHGridLayout(a1, a2, a3, a4, (uint64_t (*)(uint64_t, void, void, void, unint64_t))specialized HVGrid.minorGeometry(updatingSize:));
}

uint64_t protocol witness for static LazyLayout.layoutProperties.getter in conformance LazyHGridLayout()
{
  return 769;
}

void protocol witness for LazyLayout.pinnedViews.getter in conformance LazyHGridLayout(_DWORD *a1@<X8>)
{
  *a1 = *(_DWORD *)(v1 + 28);
}

uint64_t protocol witness for static _VariadicView_ViewRoot._makeViewList(root:inputs:body:) in conformance LazyHGridLayout(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return MEMORY[0x1F40FD028](a1, a2, a3, a4, a5, &protocol witness table for LazyHGridLayout);
}

void protocol witness for _VariadicView_ViewRoot.body(children:) in conformance LazyHGridLayout()
{
}

{
  _StringGuts.grow(_:)(34);
  swift_bridgeObjectRelease();
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t protocol witness for LazyStack.minorGeometry(updatingSize:) in conformance LazyVGridLayout(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for LazyStack.minorGeometry(updatingSize:) in conformance LazyHGridLayout(a1, a2, a3, a4, (uint64_t (*)(uint64_t, void, void, void, unint64_t))specialized HVGrid.minorGeometry(updatingSize:));
}

uint64_t protocol witness for LazyStack.minorGeometry(updatingSize:) in conformance LazyHGridLayout(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t, void, void, void, unint64_t))
{
  uint64_t result = a5(a2, *(void *)v5, *(void *)(v5 + 8), *(void *)(v5 + 16), *(unsigned __int8 *)(v5 + 24) | ((unint64_t)*(unsigned int *)(v5 + 28) << 32));
  *a1 = v8;
  return result;
}

uint64_t protocol witness for static LazyLayout.layoutProperties.getter in conformance LazyVGridLayout()
{
  return 770;
}

unint64_t instantiation function for generic protocol witness table for LazyVGridLayout(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type LazyVGridLayout and conformance LazyVGridLayout();
  *(void *)(a1 + 8) = result;
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table accessor for type LazyVGridLayout and conformance LazyVGridLayout();
  *(void *)(a1 + 8) = result;
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table accessor for type LazyVGridLayout and conformance LazyVGridLayout();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type [HVGridGeometry] and conformance <A> [A]()
{
  unint64_t result = lazy protocol witness table cache variable for type [HVGridGeometry] and conformance <A> [A];
  if (!lazy protocol witness table cache variable for type [HVGridGeometry] and conformance <A> [A])
  {
    type metadata accessor for [HVGridGeometry]();
    lazy protocol witness table accessor for type HVGridGeometry and conformance HVGridGeometry();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [HVGridGeometry] and conformance <A> [A]);
  }
  return result;
}

void type metadata accessor for [HVGridGeometry]()
{
  if (!lazy cache variable for type metadata for [HVGridGeometry])
  {
    unint64_t v0 = type metadata accessor for Array();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for [HVGridGeometry]);
    }
  }
}

unint64_t lazy protocol witness table accessor for type HVGridGeometry and conformance HVGridGeometry()
{
  unint64_t result = lazy protocol witness table cache variable for type HVGridGeometry and conformance HVGridGeometry;
  if (!lazy protocol witness table cache variable for type HVGridGeometry and conformance HVGridGeometry)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HVGridGeometry and conformance HVGridGeometry);
  }
  return result;
}

unint64_t instantiation function for generic protocol witness table for LazyHGridLayout(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type LazyHGridLayout and conformance LazyHGridLayout();
  *(void *)(a1 + 8) = result;
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table accessor for type LazyHGridLayout and conformance LazyHGridLayout();
  *(void *)(a1 + 8) = result;
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table accessor for type LazyHGridLayout and conformance LazyHGridLayout();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t protocol witness for static _VariadicView_ViewRoot._makeViewList(root:inputs:body:) in conformance LazyVGridLayout(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return MEMORY[0x1F40FD028](a1, a2, a3, a4, a5, &protocol witness table for LazyVGridLayout);
}

void protocol witness for _VariadicView_ViewRoot.body(children:) in conformance LazyVGridLayout()
{
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance HVGridGeometry(double *a1, double *a2)
{
  if (*a1 == *a2 && a1[1] == a2[1]) {
    return static UnitPoint.== infix(_:_:)();
  }
  else {
    return 0;
  }
}

uint64_t specialized HVGrid.place(subviews:length:minorGeometry:emit:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v5 = *(void *)(result + 16);
  if (v5)
  {
    if (v5 > *(void *)(a4 + 16))
    {
      __break(1u);
    }
    else
    {
      uint64_t v7 = result + 32;
      uint64_t v8 = a4 + 56;
      do
      {
        double v9 = *(double *)(v8 - 24);
        _ProposedSize.init(_:in:by:)();
        uint64_t v10 = v15;
        double v11 = *(double *)(a5 + 120);
        double v12 = v11 + 0.0;
        if (!*(unsigned char *)(a5 + 32)) {
          double v11 = -0.0;
        }
        double v13 = v9 + v11;
        if (*(unsigned char *)(a5 + 32)) {
          double v14 = 0.0;
        }
        else {
          double v14 = v12;
        }
        LOBYTE(v15) = v16;
        unint64_t result = specialized StackPlacement.emit(_:at:size:anchor:)(v7, v10, v16, v17, v18, v14, v13);
        v8 += 32;
        v7 += 96;
        --v5;
      }
      while (v5);
    }
  }
  return result;
}

{
  unint64_t v5;
  uint64_t v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  double v11;
  double v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  char v16;

  unint64_t v5 = *(void *)(result + 16);
  if (v5)
  {
    if (v5 > *(void *)(a4 + 16))
    {
      __break(1u);
    }
    else
    {
      uint64_t v7 = result + 32;
      uint64_t v8 = a4 + 56;
      do
      {
        double v9 = *(double *)(v8 - 24);
        _ProposedSize.init(_:in:by:)();
        uint64_t v10 = v13;
        double v11 = *(double *)(a5 + 120);
        double v12 = v11 + 0.0;
        if (*(unsigned char *)(a5 + 32)) {
          double v11 = -0.0;
        }
        else {
          double v12 = 0.0;
        }
        LOBYTE(v13) = v14;
        unint64_t result = specialized StackPlacement.emit(_:at:size:anchor:)(v7, v10, v14, v15, v16, v9 + v11, v12);
        v8 += 32;
        v7 += 96;
        --v5;
      }
      while (v5);
    }
  }
  return result;
}

uint64_t EnvironmentValues.dismissWindow.getter()
{
  if (*(void *)(v0 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.DismissWindowActionKey>();
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.DismissWindowActionKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.DismissWindowActionKey>();
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.DismissWindowActionKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  return swift_release_n();
}

void type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.DismissWindowActionKey>()
{
  if (!lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.DismissWindowActionKey>)
  {
    unint64_t v0 = type metadata accessor for EnvironmentPropertyKey();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.DismissWindowActionKey>);
    }
  }
}

Swift::Void __swiftcall DismissWindowAction.callAsFunction()()
{
  uint64_t v1 = *v0;
  uint64_t v2 = v0[1];
  id v3 = objc_msgSend(self, sel_sharedApplication);
  unsigned int v4 = objc_msgSend(v3, sel_supportsMultipleScenes);

  if (v4 && v2)
  {
    type metadata accessor for Binding<PresentationMode>();
    uint64_t v6 = v5;
    swift_retain();
    swift_retain();
    MEMORY[0x18C113DA0](&v8, v6);
    swift_retain();
    swift_retain();
    dispatch thunk of AnyLocation.set(_:transaction:)();
    outlined consume of Binding<NavigationSplitViewColumn>?(v1, v2);
    outlined consume of Binding<NavigationSplitViewColumn>?(v1, v2);
  }
  else
  {
    static os_log_type_t.fault.getter();
    id v7 = (id)static Log.runtimeIssuesLog.getter();
    os_log(_:dso:log:_:_:)();
  }
}

Swift::Void __swiftcall DismissWindowAction.callAsFunction(id:)(Swift::String id)
{
  if (static SceneNavigationStrategy_Phone.shared == 1)
  {
    specialized SceneNavigationStrategy_Phone.dismissWindow(id:)(id._countAndFlagsBits, (uint64_t)id._object);
  }
  else
  {
    static os_log_type_t.fault.getter();
    id v1 = (id)static Log.runtimeIssuesLog.getter();
    os_log(_:dso:log:_:_:)();
  }
}

void DismissWindowAction.callAsFunction<A>(value:)(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (static SceneNavigationStrategy_Phone.shared == 1)
  {
    specialized SceneNavigationStrategy_Phone.dismissWindow<A>(value:)(a1, a2, a3, a4, a5);
  }
  else
  {
    static os_log_type_t.fault.getter();
    id v5 = (id)static Log.runtimeIssuesLog.getter();
    os_log(_:dso:log:_:_:)();
  }
}

void DismissWindowAction.callAsFunction<A>(id:value:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (static SceneNavigationStrategy_Phone.shared == 1)
  {
    specialized SceneNavigationStrategy_Phone.dismissWindow<A>(id:value:)(a1, a2, a3, a4, a5, a6, a7);
  }
  else
  {
    static os_log_type_t.fault.getter();
    id v7 = (id)static Log.runtimeIssuesLog.getter();
    os_log(_:dso:log:_:_:)();
  }
}

double key path getter for EnvironmentValues.dismissWindow : EnvironmentValues@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (*(void *)(a1 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.DismissWindowActionKey>();
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.DismissWindowActionKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.DismissWindowActionKey>();
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.DismissWindowActionKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  double result = *(double *)&v4;
  *(_OWORD *)a2 = v4;
  *(unsigned char *)(a2 + 16) = v5;
  return result;
}

uint64_t key path setter for EnvironmentValues.dismissWindow : EnvironmentValues(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = a1[1];
  outlined copy of Binding<NavigationSplitViewColumn>?(*a1, v2);
  specialized EnvironmentValues.subscript.setter(v1, v2);

  return outlined consume of Binding<NavigationSplitViewColumn>?(v1, v2);
}

uint64_t assignWithCopy for DismissWindowAction(uint64_t a1, long long *a2)
{
  uint64_t v4 = *((void *)a2 + 1);
  if (*(void *)(a1 + 8))
  {
    if (v4)
    {
      *(void *)a1 = *(void *)a2;
      swift_retain();
      swift_release();
      *(void *)(a1 + 8) = *((void *)a2 + 1);
      swift_retain();
      swift_release();
      *(unsigned char *)(a1 + 16) = *((unsigned char *)a2 + 16);
    }
    else
    {
      outlined destroy of Binding<PresentationMode>(a1);
      char v5 = *((unsigned char *)a2 + 16);
      *(_OWORD *)a1 = *a2;
      *(unsigned char *)(a1 + 16) = v5;
    }
  }
  else if (v4)
  {
    *(void *)a1 = *(void *)a2;
    *(void *)(a1 + 8) = *((void *)a2 + 1);
    *(unsigned char *)(a1 + 16) = *((unsigned char *)a2 + 16);
    swift_retain();
    swift_retain();
  }
  else
  {
    long long v6 = *a2;
    *(unsigned char *)(a1 + 16) = *((unsigned char *)a2 + 16);
    *(_OWORD *)a1 = v6;
  }
  return a1;
}

uint64_t outlined destroy of Binding<PresentationMode>(uint64_t a1)
{
  type metadata accessor for Binding<PresentationMode>();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t assignWithTake for DismissWindowAction(uint64_t a1, uint64_t a2)
{
  if (!*(void *)(a1 + 8)) {
    goto LABEL_5;
  }
  uint64_t v4 = *(void *)(a2 + 8);
  if (!v4)
  {
    outlined destroy of Binding<PresentationMode>(a1);
LABEL_5:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    goto LABEL_6;
  }
  *(void *)a1 = *(void *)a2;
  swift_release();
  *(void *)(a1 + 8) = v4;
  swift_release();
LABEL_6:
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  return a1;
}

ValueMetadata *type metadata accessor for EnvironmentValues.DismissWindowActionKey()
{
  return &type metadata for EnvironmentValues.DismissWindowActionKey;
}

uint64_t View.interactiveDismissDisabled(_:)()
{
  return View.preference<A>(key:value:)();
}

uint64_t View.interactiveDismissDisabled(_:attemptHandler:)@<X0>(char a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  v14[0] = a3;
  v14[1] = a5;
  type metadata accessor for _PreferenceWritingModifier<InteractiveDismissDisabledKey>(255, &lazy cache variable for type metadata for _PreferenceWritingModifier<InteractiveDismissDisabledKey>);
  uint64_t v8 = type metadata accessor for ModifiedContent();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  double v11 = (char *)v14 - v10;
  LOBYTE(v15) = a1;
  View.preference<A>(key:value:)();
  uint64_t v15 = a2;
  uint64_t v16 = v14[0];
  uint64_t v12 = lazy protocol witness table accessor for type _PreferenceWritingModifier<InteractiveDismissDisabledKey> and conformance _PreferenceWritingModifier<A>(&lazy protocol witness table cache variable for type _PreferenceWritingModifier<InteractiveDismissDisabledKey> and conformance _PreferenceWritingModifier<A>, &lazy cache variable for type metadata for _PreferenceWritingModifier<InteractiveDismissDisabledKey>);
  v14[2] = a4;
  v14[3] = v12;
  swift_getWitnessTable();
  View.preference<A>(key:value:)();
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
}

uint64_t sub_18826BFF8()
{
  return swift_getWitnessTable();
}

uint64_t sub_18826C0AC()
{
  return swift_getWitnessTable();
}

void type metadata accessor for _PreferenceWritingModifier<InteractiveDismissDisabledKey>(uint64_t a1, unint64_t *a2)
{
  if (!*a2)
  {
    unint64_t v3 = type metadata accessor for _PreferenceWritingModifier();
    if (!v4) {
      atomic_store(v3, a2);
    }
  }
}

uint64_t lazy protocol witness table accessor for type _PreferenceWritingModifier<InteractiveDismissDisabledKey> and conformance _PreferenceWritingModifier<A>(unint64_t *a1, unint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for _PreferenceWritingModifier<InteractiveDismissDisabledKey>(255, a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

ValueMetadata *type metadata accessor for InteractiveDismissAttemptKey()
{
  return &type metadata for InteractiveDismissAttemptKey;
}

ValueMetadata *type metadata accessor for InteractiveDismissDisabledKey()
{
  return &type metadata for InteractiveDismissDisabledKey;
}

uint64_t View.toolbarPlatformItemTint()(uint64_t a1, uint64_t a2)
{
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v7 = KeyPath;
  char v8 = 0;
  type metadata accessor for StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, PlatformItemTintModifier, EmptyModifier>();
  MEMORY[0x18C113660](&v7, a1, v5, a2);
  return outlined consume of Environment<Color?>.Content(KeyPath, 0);
}

void type metadata accessor for StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, PlatformItemTintModifier, EmptyModifier>()
{
  if (!lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, PlatformItemTintModifier, EmptyModifier>)
  {
    type metadata accessor for StyleContextAcceptsPredicate<ToolbarStyleContext>();
    _s7SwiftUI28StyleContextAcceptsPredicateVyAA07ToolbarcD0VGACyxGAA09ViewInputF0AAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type StyleContextAcceptsPredicate<ToolbarStyleContext> and conformance StyleContextAcceptsPredicate<A>, (void (*)(uint64_t))type metadata accessor for StyleContextAcceptsPredicate<ToolbarStyleContext>);
    unint64_t v0 = type metadata accessor for StaticIf();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, PlatformItemTintModifier, EmptyModifier>);
    }
  }
}

uint64_t sub_18826C3DC()
{
  outlined consume of Environment<Color?>.Content(*(void *)(v0 + 16), *(unsigned __int8 *)(v0 + 24));

  return swift_deallocObject();
}

uint64_t specialized static MainActor.assumeIsolated<A>(_:file:line:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  static MainActor.shared.getter();
  swift_release();
  swift_task_getMainExecutor();
  if (swift_task_isCurrentExecutor())
  {
    uint64_t v8 = swift_allocObject();
    *(void *)(v8 + 16) = a1;
    *(void *)(v8 + 24) = a2;
    partial apply for specialized thunk for @callee_guaranteed () -> (@out A, @error @owned Error)(v14);
    if (v4)
    {
      swift_release();
      return a4;
    }
    a4 = v14[0];
    char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
    swift_release();
    if ((isEscapingClosureAtFileLocation & 1) == 0) {
      return a4;
    }
    __break(1u);
  }
  v14[0] = 0;
  v14[1] = 0xE000000000000000;
  _StringGuts.grow(_:)(66);
  v11._object = (void *)0x8000000188344C20;
  v11._countAndFlagsBits = 0xD00000000000003FLL;
  String.append(_:)(v11);
  v12._countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v12);
  swift_bridgeObjectRelease();
  v13._countAndFlagsBits = 46;
  v13._object = (void *)0xE100000000000000;
  String.append(_:)(v13);
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized static MainActor.assumeIsolated<A>(_:file:line:)(uint64_t a1, uint64_t a2)
{
  static MainActor.shared.getter();
  swift_release();
  swift_task_getMainExecutor();
  if ((swift_task_isCurrentExecutor() & 1) == 0) {
    goto LABEL_6;
  }
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = a1;
  *(void *)(v5 + 24) = a2;
  partial apply for specialized thunk for @callee_guaranteed () -> (@out A, @error @owned Error)();
  if (v2) {
    return swift_release();
  }
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  uint64_t result = swift_release();
  if (isEscapingClosureAtFileLocation)
  {
    __break(1u);
LABEL_6:
    _StringGuts.grow(_:)(66);
    v8._object = (void *)0x8000000188344C20;
    v8._countAndFlagsBits = 0xD00000000000003FLL;
    String.append(_:)(v8);
    v9._countAndFlagsBits = _typeName(_:qualified:)();
    String.append(_:)(v9);
    swift_bridgeObjectRelease();
    v10._countAndFlagsBits = 46;
    v10._object = (void *)0xE100000000000000;
    String.append(_:)(v10);
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

uint64_t static MainActor.assumeIsolated<A>(_:file:line:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  static MainActor.shared.getter();
  swift_release();
  swift_task_getMainExecutor();
  if ((swift_task_isCurrentExecutor() & 1) == 0) {
    goto LABEL_6;
  }
  Swift::String v11 = (void *)swift_allocObject();
  void v11[2] = a7;
  v11[3] = a1;
  v11[4] = a2;
  partial apply for thunk for @callee_guaranteed () -> (@out A, @error @owned Error)();
  if (v7) {
    return swift_release();
  }
  int isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  uint64_t result = swift_release();
  if (isEscapingClosureAtFileLocation)
  {
    __break(1u);
LABEL_6:
    _StringGuts.grow(_:)(66);
    v14._object = (void *)0x8000000188344C20;
    v14._countAndFlagsBits = 0xD00000000000003FLL;
    String.append(_:)(v14);
    v15._countAndFlagsBits = _typeName(_:qualified:)();
    String.append(_:)(v15);
    swift_bridgeObjectRelease();
    v16._countAndFlagsBits = 46;
    v16._object = (void *)0xE100000000000000;
    String.append(_:)(v16);
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

uint64_t SectionedFetchResults.Section.startIndex.getter()
{
  return 0;
}

uint64_t SectionedFetchResults.Section.endIndex.getter()
{
  type metadata accessor for MainActor();
  static Semantics.v7.getter();
  static MainActor.assumeIsolatedIfLinkedOnOrAfter<A>(_:context:_:file:line:)();
  return v1;
}

id partial apply for closure #1 in SectionedFetchResults.Section.endIndex.getter@<X0>(void *a1@<X8>)
{
  id result = objc_msgSend(**(id **)(v1 + 40), sel_count);
  *a1 = result;
  return result;
}

uint64_t SectionedFetchResults.Section.subscript.getter()
{
  type metadata accessor for MainActor();
  static Semantics.v7.getter();
  static MainActor.assumeIsolatedIfLinkedOnOrAfter<A>(_:context:_:file:line:)();
  return v1;
}

uint64_t closure #1 in SectionedFetchResults.Section.subscript.getter(id *a1, uint64_t a2)
{
  id v2 = objc_msgSend(*a1, sel_objectAtIndex_, a2);
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  return swift_dynamicCast();
}

uint64_t partial apply for closure #1 in SectionedFetchResults.Section.subscript.getter()
{
  return closure #1 in SectionedFetchResults.Section.subscript.getter(*(id **)(v0 + 40), *(void *)(v0 + 48));
}

uint64_t SectionedFetchResults.Section.id.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 16) - 8) + 16))(a2, v2 + *(int *)(a1 + 44));
}

uint64_t protocol witness for BidirectionalCollection.index(before:) in conformance SectionedFetchResults<A, B>.Section(uint64_t a1, uint64_t a2)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v5 = MEMORY[0x1E4FBB590];

  return MEMORY[0x1F41842B0](a1, a2, WitnessTable, v5);
}

void *protocol witness for BidirectionalCollection.formIndex(before:) in conformance SectionedFetchResults<A, B>.Section(void *a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for BidirectionalCollection.formIndex(before:) in conformance SectionedFetchResults<A, B>.Section(a1, a2, a3, MEMORY[0x1E4FBB618]);
}

uint64_t protocol witness for BidirectionalCollection.index(_:offsetBy:) in conformance SectionedFetchResults<A, B>.Section(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v7 = MEMORY[0x1E4FBB590];

  return MEMORY[0x1F41842B8](a1, a2, a3, WitnessTable, v7);
}

uint64_t protocol witness for BidirectionalCollection.index(_:offsetBy:limitedBy:) in conformance SectionedFetchResults<A, B>.Section(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F41842A0](a1, a2, a3, a4, WitnessTable);
}

uint64_t protocol witness for BidirectionalCollection.distance(from:to:) in conformance SectionedFetchResults<A, B>.Section(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v7 = MEMORY[0x1E4FBB590];

  return MEMORY[0x1F41842C8](a1, a2, a3, WitnessTable, v7);
}

uint64_t protocol witness for Collection.endIndex.getter in conformance SectionedFetchResults<A, B>.Section@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = SectionedFetchResults.Section.endIndex.getter();
  *a1 = result;
  return result;
}

void (*protocol witness for Collection.subscript.read in conformance SectionedFetchResults<A, B>.Section(uint64_t **a1))(void *a1)
{
  uint64_t v2 = (uint64_t *)malloc(0x30uLL);
  *a1 = v2;
  unint64_t v3 = SectionedFetchResults.Section.subscript.read(v2);
  v2[4] = v4;
  v2[5] = (uint64_t)v3;
  return protocol witness for Collection.subscript.read in conformance FetchedResults<A>;
}

uint64_t (*SectionedFetchResults.Section.subscript.read(uint64_t *a1))()
{
  *a1 = SectionedFetchResults.Section.subscript.getter();
  return Array.subscript.readspecialized ;
}

uint64_t protocol witness for Collection.indices.getter in conformance SectionedFetchResults<A, B>.Section()
{
  swift_getWitnessTable();

  return RandomAccessCollection<>.indices.getter();
}

uint64_t protocol witness for Collection.index(after:) in conformance SectionedFetchResults<A, B>.Section(uint64_t a1, uint64_t a2)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v5 = MEMORY[0x1E4FBB590];

  return MEMORY[0x1F41842A8](a1, a2, WitnessTable, v5);
}

void *protocol witness for Collection.formIndex(after:) in conformance SectionedFetchResults<A, B>.Section(void *a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for BidirectionalCollection.formIndex(before:) in conformance SectionedFetchResults<A, B>.Section(a1, a2, a3, MEMORY[0x1E4FBB610]);
}

void *protocol witness for BidirectionalCollection.formIndex(before:) in conformance SectionedFetchResults<A, B>.Section(void *a1, uint64_t a2, uint64_t a3, void *(*a4)(uint64_t *__return_ptr, void *, uint64_t, uint64_t, void))
{
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t result = a4(&v9, a1, a2, WitnessTable, MEMORY[0x1E4FBB590]);
  *a1 = v9;
  return result;
}

uint64_t protocol witness for Sequence.makeIterator() in conformance SectionedFetchResults<A, B>.Section@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a1 - 8) + 32))(a2, v3, a1);
  swift_getWitnessTable();
  uint64_t result = type metadata accessor for IndexingIterator();
  *(void *)(a2 + *(int *)(result + 36)) = 0;
  return result;
}

uint64_t protocol witness for Sequence.underestimatedCount.getter in conformance SectionedFetchResults<A, B>.Section(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F4184360](a1, WitnessTable);
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance SectionedFetchResults<A, B>.Section(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F4184380](a1, WitnessTable);
}

uint64_t SectionedFetchResults.init(_:)@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = (void *)(*MEMORY[0x1E4FBC8C8] & *a1);
  uint64_t v5 = *(void **)((char *)a1 + v4[16]);
  if (v5)
  {
    id v6 = v5;
    id v7 = objc_msgSend(v6, sel_sections);
    if (v7)
    {
      Swift::String v8 = v7;
      type metadata accessor for NSFetchedResultsSectionInfo();
      uint64_t v9 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
    }
    else
    {
      uint64_t v9 = MEMORY[0x1E4FBC860];
    }
    v18[7] = v9;
    MEMORY[0x1F4188790](v7);
    uint64_t v12 = v4[11];
    v18[2] = v4[10];
    v18[3] = v12;
    v18[4] = *(void *)(v4[12] + 32);
    _ss23_ContiguousArrayStorageCys7CVarArg_pGMaTm_2(0, &lazy cache variable for type metadata for [NSFetchedResultsSectionInfo], (uint64_t (*)(uint64_t))type metadata accessor for NSFetchedResultsSectionInfo, MEMORY[0x1E4FBB320]);
    uint64_t v14 = v13;
    uint64_t v15 = type metadata accessor for SectionedFetchResults.Section();
    unint64_t v16 = lazy protocol witness table accessor for type [NSFetchedResultsSectionInfo] and conformance [A]();
    uint64_t v11 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF((void (*)(char *, char *))partial apply for closure #1 in SectionedFetchResults.init(_:), (uint64_t)v18, v14, v15, MEMORY[0x1E4FBC248], v16, MEMORY[0x1E4FBC278], v17);

    uint64_t result = swift_bridgeObjectRelease();
  }
  else
  {
    type metadata accessor for SectionedFetchResults.Section();
    uint64_t result = static Array._allocateUninitialized(_:)();
    uint64_t v11 = result;
  }
  *a2 = v11;
  a2[1] = (uint64_t)a1;
  return result;
}

id closure #1 in SectionedFetchResults.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X8>)
{
  uint64_t v5 = *(void *)(a2 - 8);
  MEMORY[0x1F4188790](a1);
  id v7 = (char *)v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *v8;
  self;
  Swift::String v10 = (void *)swift_dynamicCastObjCClassUnconditional();
  uint64_t v11 = (void *)MEMORY[0x18C115780](0x496E6F6974636573, 0xE900000000000064);
  id v12 = objc_msgSend(v10, sel_valueForKey_, v11);

  if (v12)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v16, 0, sizeof(v16));
  }
  outlined init with take of Any?((uint64_t)v16, (uint64_t)v17);
  type metadata accessor for Any?();
  swift_dynamicCast();
  id result = objc_msgSend(v9, sel_objects);
  if (result)
  {
    id v14 = result;
    uint64_t v15 = type metadata accessor for SectionedFetchResults.Section();
    id result = (id)(*(uint64_t (**)(char *, char *, uint64_t))(v5 + 32))(&a3[*(int *)(v15 + 44)], v7, a2);
    *(void *)a3 = v14;
  }
  else
  {
    __break(1u);
  }
  return result;
}

void SectionedFetchResults.nsSortDescriptors.getter()
{
  if (*(void *)(*(void *)(v0 + 8) + *(void *)((*MEMORY[0x1E4FBC8C8] & **(void **)(v0 + 8)) + 0x70)))
  {
    swift_retain();
    id v1 = DeferredFetchRequest.result.getter();
    swift_release();
    id v2 = objc_msgSend(v1, sel_sortDescriptors);

    if (v2)
    {
      type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSSortDescriptor);
      static Array._unconditionallyBridgeFromObjectiveC(_:)();

      return;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

void key path getter for SectionedFetchResults.nsSortDescriptors : <A, B>SectionedFetchResults<A, B>(void *a1@<X8>)
{
  SectionedFetchResults.nsSortDescriptors.getter();
  *a1 = v2;
}

void key path setter for SectionedFetchResults.nsSortDescriptors : <A, B>SectionedFetchResults<A, B>()
{
}

void SectionedFetchResults.nsSortDescriptors.setter()
{
  if (*(void *)(*(void *)(v0 + 8) + *(void *)((*MEMORY[0x1E4FBC8C8] & **(void **)(v0 + 8)) + 0x70)))
  {
    swift_retain();
    id v1 = DeferredFetchRequest.result.getter();
    swift_release();
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSSortDescriptor);
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    objc_msgSend(v1, sel_setSortDescriptors_, isa);

    v3.value.super.Class isa = 0;
    FetchController.update(in:)(v3);
  }
  else
  {
    __break(1u);
  }
}

void (*SectionedFetchResults.nsSortDescriptors.modify(void *a1, uint64_t a2))(uint64_t a1, char a2)
{
  uint64_t v4 = *v2;
  uint64_t v5 = v2[1];
  a1[1] = a2;
  a1[2] = v4;
  a1[3] = v5;
  SectionedFetchResults.nsSortDescriptors.getter();
  *a1 = v6;
  return SectionedFetchResults.nsSortDescriptors.modify;
}

void SectionedFetchResults.nsSortDescriptors.modify(uint64_t a1, char a2)
{
  if (a2)
  {
    swift_bridgeObjectRetain();
    SectionedFetchResults.nsSortDescriptors.setter();
    swift_bridgeObjectRelease();
  }
  else
  {
    SectionedFetchResults.nsSortDescriptors.setter();
  }
}

void SectionedFetchResults.nsPredicate.getter()
{
  if (*(void *)(*(void *)(v0 + 8) + *(void *)((*MEMORY[0x1E4FBC8C8] & **(void **)(v0 + 8)) + 0x70)))
  {
    swift_retain();
    id v1 = DeferredFetchRequest.result.getter();
    swift_release();
    objc_msgSend(v1, sel_predicate);
  }
  else
  {
    __break(1u);
  }
}

void key path getter for SectionedFetchResults.nsPredicate : <A, B>SectionedFetchResults<A, B>(void *a1@<X8>)
{
  SectionedFetchResults.nsPredicate.getter();
  *a1 = v2;
}

void key path setter for SectionedFetchResults.nsPredicate : <A, B>SectionedFetchResults<A, B>(void **a1)
{
  id v1 = *a1;
  type metadata accessor for SectionedFetchResults();
  id v2 = v1;
  specialized FetchedResults.nsPredicate.setter((uint64_t)v1);
}

void SectionedFetchResults.nsPredicate.setter(void *a1)
{
  specialized FetchedResults.nsPredicate.setter((uint64_t)a1);
}

void (*SectionedFetchResults.nsPredicate.modify(void *a1, uint64_t a2))(uint64_t *a1, char a2)
{
  uint64_t v4 = *v2;
  uint64_t v5 = v2[1];
  a1[1] = a2;
  a1[2] = v4;
  a1[3] = v5;
  SectionedFetchResults.nsPredicate.getter();
  *a1 = v6;
  return FetchedResults.nsPredicate.modify;
}

uint64_t SectionedFetchResults.sectionIdentifier.getter()
{
  uint64_t v0 = swift_retain();
  MEMORY[0x18C10C000](&v2, v0);
  swift_release();
  uint64_t result = v2;
  if (!v2) {
    __break(1u);
  }
  return result;
}

uint64_t key path getter for SectionedFetchResults.sectionIdentifier : <A, B>SectionedFetchResults<A, B>@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = SectionedFetchResults.sectionIdentifier.getter();
  *a1 = result;
  return result;
}

uint64_t key path setter for SectionedFetchResults.sectionIdentifier : <A, B>SectionedFetchResults<A, B>()
{
  type metadata accessor for SectionedFetchResults();
  uint64_t v0 = swift_retain();
  specialized SectionedFetchResults.sectionIdentifier.setter(v0);

  return swift_release();
}

uint64_t SectionedFetchResults.sectionIdentifier.setter(uint64_t a1)
{
  specialized SectionedFetchResults.sectionIdentifier.setter(a1);

  return swift_release();
}

uint64_t (*SectionedFetchResults.sectionIdentifier.modify(uint64_t *a1, uint64_t a2))(uint64_t *a1, char a2)
{
  uint64_t v3 = *v2;
  uint64_t v4 = v2[1];
  a1[1] = a2;
  a1[2] = v3;
  a1[3] = v4;
  *a1 = SectionedFetchResults.sectionIdentifier.getter();
  return SectionedFetchResults.sectionIdentifier.modify;
}

uint64_t SectionedFetchResults.sectionIdentifier.modify(uint64_t *a1, char a2)
{
  if (a2)
  {
    uint64_t v2 = swift_retain();
    specialized SectionedFetchResults.sectionIdentifier.setter(v2);
    swift_release();
  }
  else
  {
    specialized SectionedFetchResults.sectionIdentifier.setter(*a1);
  }

  return swift_release();
}

uint64_t SectionedFetchResults.startIndex.getter()
{
  return 0;
}

uint64_t SectionedFetchResults.endIndex.getter(uint64_t a1)
{
  type metadata accessor for MainActor();
  v4[1] = *(_OWORD *)(a1 + 16);
  uint64_t v5 = *(void *)(a1 + 32);
  long long v6 = *v1;
  return specialized static MainActor.assumeIsolated<A>(_:file:line:)((uint64_t)partial apply for closure #1 in SectionedFetchResults.endIndex.getter, (uint64_t)v4, (uint64_t)"SwiftUI/SectionedFetchRequest.swift", 35);
}

uint64_t SectionedFetchResults.subscript.getter(uint64_t a1, void *a2)
{
  type metadata accessor for MainActor();
  uint64_t v5 = a2[3];
  v8[2] = a2[2];
  v8[3] = v5;
  v8[4] = a2[4];
  long long v9 = *v2;
  uint64_t v10 = a1;
  uint64_t v6 = type metadata accessor for SectionedFetchResults.Section();
  return static MainActor.assumeIsolated<A>(_:file:line:)((uint64_t)partial apply for closure #1 in SectionedFetchResults.subscript.getter, (uint64_t)v8, (uint64_t)"SwiftUI/SectionedFetchRequest.swift", 35, 2, 272, v6);
}

uint64_t property wrapper backing initializer of SectionedFetchRequest.controller()
{
  return StateObject.init(wrappedValue:)();
}

uint64_t SectionedFetchRequest.controller.getter()
{
  type metadata accessor for SectionedFetchResults();
  type metadata accessor for FetchController();
  swift_getWitnessTable();

  return StateObject.wrappedValue.getter();
}

uint64_t protocol witness for BidirectionalCollection.index(before:) in conformance SectionedFetchResults<A, B>(uint64_t a1, uint64_t a2)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v5 = MEMORY[0x1E4FBB590];

  return MEMORY[0x1F41842B0](a1, a2, WitnessTable, v5);
}

void *protocol witness for BidirectionalCollection.formIndex(before:) in conformance SectionedFetchResults<A, B>(void *a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for BidirectionalCollection.formIndex(before:) in conformance SectionedFetchResults<A, B>(a1, a2, a3, MEMORY[0x1E4FBB618]);
}

uint64_t protocol witness for BidirectionalCollection.index(_:offsetBy:) in conformance SectionedFetchResults<A, B>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v7 = MEMORY[0x1E4FBB590];

  return MEMORY[0x1F41842B8](a1, a2, a3, WitnessTable, v7);
}

uint64_t protocol witness for BidirectionalCollection.index(_:offsetBy:limitedBy:) in conformance SectionedFetchResults<A, B>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F41842A0](a1, a2, a3, a4, WitnessTable);
}

uint64_t protocol witness for BidirectionalCollection.distance(from:to:) in conformance SectionedFetchResults<A, B>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v7 = MEMORY[0x1E4FBB590];

  return MEMORY[0x1F41842C8](a1, a2, a3, WitnessTable, v7);
}

uint64_t protocol witness for Collection.endIndex.getter in conformance SectionedFetchResults<A, B>@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = SectionedFetchResults.endIndex.getter(a1);
  *a2 = result;
  return result;
}

void (*protocol witness for Collection.subscript.read in conformance SectionedFetchResults<A, B>(uint64_t **a1, uint64_t *a2, void *a3))(void *a1)
{
  uint64_t v6 = (uint64_t *)malloc(0x28uLL);
  *a1 = v6;
  _OWORD v6[4] = (uint64_t)SectionedFetchResults.subscript.read(v6, *a2, a3);
  return protocol witness for Collection.subscript.read in conformance NavigationState.StackContent.Views.ViewsSequence<A, B>;
}

void (*SectionedFetchResults.subscript.read(uint64_t *a1, uint64_t a2, void *a3))(void *a1)
{
  uint64_t v6 = type metadata accessor for SectionedFetchResults.Section();
  *a1 = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  a1[1] = v7;
  a1[2] = (uint64_t)malloc(*(void *)(v7 + 64));
  SectionedFetchResults.subscript.getter(a2, a3);
  return CoalescingAdjacentDuplicates.subscript.read;
}

uint64_t protocol witness for Collection.indices.getter in conformance SectionedFetchResults<A, B>()
{
  swift_getWitnessTable();

  return RandomAccessCollection<>.indices.getter();
}

uint64_t protocol witness for Collection.index(after:) in conformance SectionedFetchResults<A, B>(uint64_t a1, uint64_t a2)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v5 = MEMORY[0x1E4FBB590];

  return MEMORY[0x1F41842A8](a1, a2, WitnessTable, v5);
}

void *protocol witness for Collection.formIndex(after:) in conformance SectionedFetchResults<A, B>(void *a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for BidirectionalCollection.formIndex(before:) in conformance SectionedFetchResults<A, B>(a1, a2, a3, MEMORY[0x1E4FBB610]);
}

void *protocol witness for BidirectionalCollection.formIndex(before:) in conformance SectionedFetchResults<A, B>(void *a1, uint64_t a2, uint64_t a3, void *(*a4)(uint64_t *__return_ptr, void *, uint64_t, uint64_t, void))
{
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t result = a4(&v9, a1, a2, WitnessTable, MEMORY[0x1E4FBB590]);
  *a1 = v9;
  return result;
}

uint64_t protocol witness for Sequence.underestimatedCount.getter in conformance SectionedFetchResults<A, B>(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F4184360](a1, WitnessTable);
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance SectionedFetchResults<A, B>(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F4184380](a1, WitnessTable);
}

id implicit closure #2 in implicit closure #1 in variable initialization expression of SectionedFetchRequest._controller()
{
  return specialized FetchController.__allocating_init(_:)((uint64_t)partial apply for implicit closure #3 in implicit closure #2 in implicit closure #1 in variable initialization expression of SectionedFetchRequest._controller, 0);
}

uint64_t property wrapper backing initializer of SectionedFetchRequest.results()
{
  return State.init(wrappedValue:)();
}

uint64_t SectionedFetchRequest.results.getter()
{
  return State.wrappedValue.getter();
}

uint64_t SectionedFetchRequest.$results.getter()
{
  return State.projectedValue.getter();
}

uint64_t property wrapper backing initializer of SectionedFetchRequest.sectionIdentifier(uint64_t a1)
{
  type metadata accessor for KeyPath();
  type metadata accessor for Optional();
  type metadata accessor for MutableBox();
  uint64_t v3 = a1;
  return MEMORY[0x18C10C050](&v3);
}

void SectionedFetchRequest.wrappedValue.getter()
{
  SectionedFetchRequest.results.getter();
  outlined consume of AccessibilityAttachment?(v1, v2);
  id v0 = (id)SectionedFetchRequest.controller.getter();
  FetchController.results.getter();
}

uint64_t SectionedFetchRequest.Configuration.sectionIdentifier.getter()
{
  return swift_retain();
}

uint64_t SectionedFetchRequest.Configuration.sectionIdentifier.setter(uint64_t a1)
{
  uint64_t result = swift_release();
  *uint64_t v1 = a1;
  return result;
}

uint64_t (*SectionedFetchRequest.Configuration.sectionIdentifier.modify())(void, void, void, void)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t SectionedFetchRequest.Configuration.nsSortDescriptors.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t SectionedFetchRequest.Configuration.nsSortDescriptors.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 8) = a1;
  return result;
}

uint64_t (*SectionedFetchRequest.Configuration.nsSortDescriptors.modify())(void, void, void, void)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

void *SectionedFetchRequest.Configuration.nsPredicate.getter()
{
  uint64_t v1 = *(void **)(v0 + 16);
  id v2 = v1;
  return v1;
}

void SectionedFetchRequest.Configuration.nsPredicate.setter(uint64_t a1)
{
  *(void *)(v1 + 16) = a1;
}

uint64_t (*SectionedFetchRequest.Configuration.nsPredicate.modify())(void, void, void, void)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t SectionedFetchRequest.projectedValue.getter(void *a1)
{
  long long v3 = v1[3];
  long long v20 = v1[2];
  long long v21 = v3;
  long long v22 = v1[4];
  uint64_t v23 = *((void *)v1 + 10);
  long long v4 = v1[1];
  long long v18 = *v1;
  long long v19 = v4;
  type metadata accessor for MainActor();
  outlined retain of SectionedFetchRequest<A, B>((uint64_t)&v18);
  uint64_t v5 = static MainActor.shared.getter();
  uint64_t v6 = swift_allocObject();
  uint64_t v7 = MEMORY[0x1E4FBCFD8];
  long long v8 = v21;
  *(_OWORD *)(v6 + 88) = v20;
  *(_OWORD *)(v6 + 104) = v8;
  *(_OWORD *)(v6 + 120) = v22;
  long long v9 = v19;
  *(_OWORD *)(v6 + 56) = v18;
  *(void *)(v6 + 16) = v5;
  *(void *)(v6 + 24) = v7;
  uint64_t v10 = a1[2];
  uint64_t v11 = a1[3];
  *(void *)(v6 + 32) = v10;
  *(void *)(v6 + 40) = v11;
  uint64_t v12 = a1[4];
  *(void *)(v6 + 48) = v12;
  *(void *)(v6 + 136) = v23;
  *(_OWORD *)(v6 + 72) = v9;
  outlined retain of SectionedFetchRequest<A, B>((uint64_t)&v18);
  uint64_t v13 = static MainActor.shared.getter();
  uint64_t v14 = swift_allocObject();
  long long v15 = v21;
  *(_OWORD *)(v14 + 88) = v20;
  *(_OWORD *)(v14 + 104) = v15;
  *(_OWORD *)(v14 + 120) = v22;
  long long v16 = v19;
  *(_OWORD *)(v14 + 56) = v18;
  *(void *)(v14 + 16) = v13;
  *(void *)(v14 + 24) = v7;
  *(void *)(v14 + 32) = v10;
  *(void *)(v14 + 40) = v11;
  *(void *)(v14 + 48) = v12;
  *(void *)(v14 + 136) = v23;
  *(_OWORD *)(v14 + 72) = v16;
  type metadata accessor for SectionedFetchRequest.Configuration();
  return Binding.init(get:set:)();
}

void closure #1 in SectionedFetchRequest.projectedValue.getter(uint64_t a1@<X2>, void *a2@<X8>)
{
  id v4 = DeferredFetchRequest.result.getter();
  long long v5 = *(_OWORD *)(a1 + 48);
  v13[2] = *(_OWORD *)(a1 + 32);
  void v13[3] = v5;
  v13[4] = *(_OWORD *)(a1 + 64);
  uint64_t v14 = *(void *)(a1 + 80);
  long long v6 = *(_OWORD *)(a1 + 16);
  v13[0] = *(_OWORD *)a1;
  v13[1] = v6;
  type metadata accessor for SectionedFetchRequest();
  uint64_t v7 = (void *)SectionedFetchRequest.controller.getter();
  swift_retain();

  MEMORY[0x18C10C000](v13);
  swift_release();
  uint64_t v8 = *(void *)&v13[0];
  if (*(void *)&v13[0])
  {
    id v9 = objc_msgSend(v4, sel_sortDescriptors);
    if (v9)
    {
      uint64_t v10 = v9;
      type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSSortDescriptor);
      uint64_t v11 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

      id v12 = objc_msgSend(v4, sel_predicate);
      *a2 = v8;
      a2[1] = v11;
      a2[2] = v12;

      return;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

void closure #2 in SectionedFetchRequest.projectedValue.getter(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, long long *a5)
{
  uint64_t v6 = *a1;
  uint64_t v7 = a1[2];
  long long v8 = a5[3];
  long long v17 = a5[2];
  long long v18 = v8;
  long long v19 = a5[4];
  uint64_t v20 = *((void *)a5 + 10);
  long long v9 = a5[1];
  long long v15 = *a5;
  long long v16 = v9;
  type metadata accessor for SectionedFetchRequest();
  uint64_t v10 = (void *)SectionedFetchRequest.controller.getter();
  swift_retain();

  *(void *)&long long v15 = v6;
  swift_retain();
  MEMORY[0x18C10C010](&v15);
  swift_release();
  id v11 = DeferredFetchRequest.result.getter();
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSSortDescriptor);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v11, sel_setSortDescriptors_, isa, v15, v16, v17, v18, v19, v20);

  objc_msgSend(v11, sel_setPredicate_, v7);
  long long v13 = a5[3];
  long long v17 = a5[2];
  long long v18 = v13;
  long long v19 = a5[4];
  uint64_t v20 = *((void *)a5 + 10);
  long long v14 = a5[1];
  long long v15 = *a5;
  long long v16 = v14;
  SectionedFetchRequest.update(_:)();
}

void SectionedFetchRequest.update(_:)()
{
  uint64_t v1 = *(void *)v0;
  char v2 = *(unsigned char *)(v0 + 8);
  uint64_t v3 = *(void *)(v0 + 16);
  uint64_t v17 = *(void *)(v0 + 24);
  id v4 = FetchRequest.managedObjectContext.getter();
  id v5 = objc_msgSend(v4, sel_persistentStoreCoordinator);

  if (v5)
  {
    long long v15 = (void *)SectionedFetchRequest.controller.getter();
    LOBYTE(v20) = v2;
    *(void *)&long long v21 = v3;
    *((void *)&v21 + 1) = v17;
    SectionedFetchRequest.$results.getter();
    type metadata accessor for SectionedFetchResults();
    type metadata accessor for Optional();
    type metadata accessor for Binding();
    Binding.transaction(_:)();
    swift_release();
    swift_release();
    outlined consume of AccessibilityAttachment?(v18, v19);
    uint64_t v6 = (void *)((char *)v15 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v15) + 0x88));
    uint64_t v7 = *v6;
    uint64_t v8 = v6[1];
    uint64_t v9 = v6[2];
    uint64_t v10 = (void *)v6[3];
    *uint64_t v6 = v1;
    v6[1] = v20;
    *((_OWORD *)v6 + 1) = v21;
    outlined consume of Binding<SectionedFetchResults<A, B>?>?<A, B>(v7, v8, v9, v10);

    long long v16 = (void *)SectionedFetchRequest.controller.getter();
    v23.value.super.Class isa = (Class)FetchRequest.managedObjectContext.getter();
    Class isa = v23.value.super.isa;
    FetchController.update(in:)(v23);
  }
  else
  {
    static os_log_type_t.fault.getter();
    id v12 = (void *)static Log.runtimeIssuesLog.getter();
    _ss23_ContiguousArrayStorageCys7CVarArg_pGMaTm_2(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<CVarArg>, (uint64_t (*)(uint64_t))type metadata accessor for CVarArg, MEMORY[0x1E4FBBE00]);
    uint64_t v13 = swift_allocObject();
    *(_OWORD *)(v13 + 16) = xmmword_18834BB80;
    id v14 = FetchRequest.managedObjectContext.getter();
    *(void *)(v13 + 56) = type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSManagedObjectContext);
    *(void *)(v13 + 64) = lazy protocol witness table accessor for type NSManagedObjectContext and conformance NSObject();
    *(void *)(v13 + 32) = v14;
    os_log(_:dso:log:_:_:)();

    swift_bridgeObjectRelease();
  }
}

uint64_t static SectionedFetchRequest._propertyBehaviors.getter()
{
  return 2;
}

Swift::Void __swiftcall SectionedFetchRequest.update()()
{
  id v5 = (void *)v0[3];
  uint64_t v6 = v0[2];
  uint64_t v1 = v0[9];
  uint64_t v2 = v0[10];
  uint64_t v3 = (void *)SectionedFetchRequest.controller.getter();
  *(void *)((char *)v3 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v3) + 0x70)) = v1;
  swift_retain();

  swift_release();
  id v4 = (void *)SectionedFetchRequest.controller.getter();
  *(void *)((char *)v4 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v4) + 0x78)) = v2;
  swift_retain();

  swift_release();
  SectionedFetchRequest.$results.getter();
  type metadata accessor for SectionedFetchResults();
  type metadata accessor for Optional();
  type metadata accessor for Binding();
  Binding.transaction(_:)();
  swift_release();
  swift_release();
  outlined consume of AccessibilityAttachment?(v7, v8);
  swift_release();
  outlined consume of AccessibilityAttachment?(v6, v5);
  SectionedFetchRequest.update(_:)();
  swift_release();
}

__n128 SectionedFetchRequest.init(entity:sectionIdentifier:sortDescriptors:predicate:animation:)@<Q0>(void *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, void *a4@<X3>, uint64_t a5@<X5>, uint64_t a6@<X8>)
{
  id v12 = (uint64_t *)(*a2 + *MEMORY[0x1E4FBC5F0]);
  uint64_t v13 = *v12;
  type metadata accessor for DeferredFetchRequest();
  id v14 = (void *)swift_allocObject();
  void v14[2] = v12[1];
  v14[3] = v13;
  void v14[4] = a5;
  v14[5] = a1;
  v14[6] = a3;
  v14[7] = a4;
  long long v15 = DeferredFetchRequest.__allocating_init(_:)((uint64_t)partial apply for closure #1 in SectionedFetchRequest.init(entity:sectionIdentifier:sortDescriptors:predicate:animation:), (uint64_t)v14);
  swift_retain();
  id v16 = a1;
  id v17 = a4;
  uint64_t v18 = Transaction.init(animation:)();
  SectionedFetchRequest.init(deferredFetchRequest:sectionIdentifier:transaction:)(v15, a2, v18, a5, (uint64_t)&v25);

  swift_release();
  char v19 = v26;
  char v20 = v28;
  long long v22 = v30;
  __n128 result = v31;
  long long v23 = v27;
  long long v24 = v29;
  *(void *)a6 = v25;
  *(unsigned char *)(a6 + 8) = v19;
  *(_OWORD *)(a6 + 16) = v23;
  *(unsigned char *)(a6 + 32) = v20;
  *(_OWORD *)(a6 + 40) = v24;
  *(_OWORD *)(a6 + 56) = v22;
  *(__n128 *)(a6 + 72) = result;
  return result;
}

id closure #1 in SectionedFetchRequest.init(entity:sectionIdentifier:sortDescriptors:predicate:animation:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for NSFetchRequest);
  id v5 = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_init);
  objc_msgSend(v5, sel_setEntity_, a1);
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSSortDescriptor);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v5, sel_setSortDescriptors_, isa);

  objc_msgSend(v5, sel_setPredicate_, a3);
  return v5;
}

__n128 SectionedFetchRequest.init(deferredFetchRequest:sectionIdentifier:transaction:)@<Q0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9 = *a1;
  uint64_t v10 = *a2;
  uint64_t KeyPath = swift_getKeyPath();
  id v11 = (void *)swift_allocObject();
  void v11[2] = *(void *)(*MEMORY[0x1E4FBC5F0] + v10 + 8);
  v11[3] = *(void *)(v9 + 80);
  v11[4] = a4;
  uint64_t v12 = property wrapper backing initializer of SectionedFetchRequest.controller();
  uint64_t v14 = v13;
  char v16 = v15;
  property wrapper backing initializer of SectionedFetchRequest.results();
  __n128 v20 = v23;
  uint64_t v17 = v24;
  uint64_t v18 = property wrapper backing initializer of SectionedFetchRequest.sectionIdentifier(0);
  v23.n128_u64[0] = (unint64_t)a2;
  swift_retain();
  MEMORY[0x18C10C010](&v23);
  swift_release();
  *(void *)a5 = KeyPath;
  *(unsigned char *)(a5 + 8) = 0;
  *(void *)(a5 + 16) = v12;
  *(void *)(a5 + 24) = v14;
  *(unsigned char *)(a5 + 32) = v16 & 1;
  __n128 result = v20;
  *(__n128 *)(a5 + 40) = v20;
  *(void *)(a5 + 56) = v17;
  *(void *)(a5 + 64) = a3;
  *(void *)(a5 + 72) = a1;
  *(void *)(a5 + 80) = v18;
  return result;
}

__n128 SectionedFetchRequest.init(fetchRequest:sectionIdentifier:animation:)@<Q0>(void *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  swift_retain();
  uint64_t v8 = Transaction.init(animation:)();
  SectionedFetchRequest.init(fetchRequest:sectionIdentifier:transaction:)(a1, a2, v8, a3, (uint64_t)&v15);
  swift_release();
  char v9 = v16;
  char v10 = v18;
  long long v12 = v20;
  __n128 result = v21;
  long long v13 = v17;
  long long v14 = v19;
  *(void *)a4 = v15;
  *(unsigned char *)(a4 + 8) = v9;
  *(_OWORD *)(a4 + 16) = v13;
  *(unsigned char *)(a4 + 32) = v10;
  *(_OWORD *)(a4 + 40) = v14;
  *(_OWORD *)(a4 + 56) = v12;
  *(__n128 *)(a4 + 72) = result;
  return result;
}

__n128 SectionedFetchRequest.init(fetchRequest:sectionIdentifier:transaction:)@<Q0>(void *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10 = *a2;
  objc_msgSend(a1, sel_copy);
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for NSFetchRequest);
  swift_dynamicCast();
  id v11 = v30;
  long long v12 = (uint64_t *)(v10 + *MEMORY[0x1E4FBC5F0]);
  uint64_t v13 = *v12;
  type metadata accessor for DeferredFetchRequest();
  long long v14 = (void *)swift_allocObject();
  void v14[2] = v12[1];
  v14[3] = v13;
  void v14[4] = a4;
  v14[5] = v11;
  uint64_t v15 = DeferredFetchRequest.__allocating_init(_:)((uint64_t)partial apply for closure #1 in SectionedFetchRequest.init(fetchRequest:sectionIdentifier:transaction:), (uint64_t)v14);
  id v16 = v11;
  SectionedFetchRequest.init(deferredFetchRequest:sectionIdentifier:transaction:)(v15, a2, a3, a4, (uint64_t)&v23);

  char v17 = v24;
  char v18 = v26;
  __n128 result = v29;
  long long v20 = v25;
  long long v21 = v27;
  long long v22 = v28;
  *(void *)a5 = v23;
  *(unsigned char *)(a5 + 8) = v17;
  *(_OWORD *)(a5 + 16) = v20;
  *(unsigned char *)(a5 + 32) = v18;
  *(_OWORD *)(a5 + 40) = v21;
  *(_OWORD *)(a5 + 56) = v22;
  *(__n128 *)(a5 + 72) = result;
  return result;
}

__n128 SectionedFetchRequest<>.init(sectionIdentifier:sortDescriptors:predicate:animation:)@<Q0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v10 = (uint64_t *)(*a1 + *MEMORY[0x1E4FBC5F0]);
  uint64_t v11 = *v10;
  type metadata accessor for DeferredFetchRequest();
  long long v12 = (void *)swift_allocObject();
  unint64_t v12[2] = v10[1];
  void v12[3] = v11;
  v12[4] = a4;
  v12[5] = a2;
  v12[6] = a3;
  uint64_t v13 = DeferredFetchRequest.__allocating_init(_:)((uint64_t)partial apply for closure #1 in SectionedFetchRequest<>.init(sectionIdentifier:sortDescriptors:predicate:animation:), (uint64_t)v12);
  swift_retain();
  id v14 = a3;
  uint64_t v15 = Transaction.init(animation:)();
  SectionedFetchRequest.init(deferredFetchRequest:sectionIdentifier:transaction:)(v13, a1, v15, a4, (uint64_t)&v22);

  swift_release();
  char v16 = v23;
  char v17 = v25;
  long long v19 = v27;
  __n128 result = v28;
  long long v20 = v24;
  long long v21 = v26;
  *(void *)a5 = v22;
  *(unsigned char *)(a5 + 8) = v16;
  *(_OWORD *)(a5 + 16) = v20;
  *(unsigned char *)(a5 + 32) = v17;
  *(_OWORD *)(a5 + 40) = v21;
  *(_OWORD *)(a5 + 56) = v19;
  *(__n128 *)(a5 + 72) = result;
  return result;
}

{
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t WitnessTable;
  uint64_t v14;
  uint64_t v15;
  char v16;
  char v17;
  __n128 result;
  long long v19;
  long long v20;
  long long v21;
  void v22[7];
  uint64_t v23;
  char v24;
  long long v25;
  char v26;
  long long v27;
  long long v28;
  __n128 v29;

  char v9 = *a1;
  char v23 = a2;
  uint64_t v10 = (void *)(v9 + *MEMORY[0x1E4FBC5F0]);
  void v22[2] = v10[1];
  v22[3] = *v10;
  v22[4] = a4;
  type metadata accessor for SortDescriptor();
  uint64_t v11 = type metadata accessor for Array();
  long long v12 = type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSSortDescriptor);
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v15 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF((void (*)(char *, char *))partial apply for closure #1 in SectionedFetchRequest<>.init(sectionIdentifier:sortDescriptors:predicate:animation:), (uint64_t)v22, v11, v12, MEMORY[0x1E4FBC248], WitnessTable, MEMORY[0x1E4FBC278], v14);
  swift_bridgeObjectRelease();
  SectionedFetchRequest<>.init(sectionIdentifier:sortDescriptors:predicate:animation:)(a1, v15, a3, a4, (uint64_t)&v23);
  char v16 = v24;
  char v17 = v26;
  long long v19 = v28;
  __n128 result = v29;
  long long v20 = v25;
  long long v21 = v27;
  *(void *)a5 = v23;
  *(unsigned char *)(a5 + 8) = v16;
  *(_OWORD *)(a5 + 16) = v20;
  *(unsigned char *)(a5 + 32) = v17;
  *(_OWORD *)(a5 + 40) = v21;
  *(_OWORD *)(a5 + 56) = v19;
  *(__n128 *)(a5 + 72) = result;
  return result;
}

id closure #1 in SectionedFetchRequest<>.init(sectionIdentifier:sortDescriptors:predicate:animation:)(uint64_t a1, uint64_t a2)
{
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for NSFetchRequest);
  id v3 = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_init);
  id v4 = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_entity);
  objc_msgSend(v3, sel_setEntity_, v4);

  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSSortDescriptor);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v3, sel_setSortDescriptors_, isa);

  objc_msgSend(v3, sel_setPredicate_, a2);
  return v3;
}

uint64_t SectionedFetchRequest.Configuration<>.sortDescriptors.getter(uint64_t a1)
{
  uint64_t v12 = *(void *)(v1 + 8);
  uint64_t v10 = *(void *)(a1 + 16);
  long long v11 = *(_OWORD *)(a1 + 24);
  type metadata accessor for [NSSortDescriptor]();
  uint64_t v3 = v2;
  uint64_t v4 = type metadata accessor for SortDescriptor();
  unint64_t v5 = lazy protocol witness table accessor for type [NSSortDescriptor] and conformance [A]();
  swift_bridgeObjectRetain();
  uint64_t v7 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF((void (*)(char *, char *))partial apply for closure #1 in SectionedFetchRequest.Configuration<>.sortDescriptors.getter, (uint64_t)v9, v3, v4, MEMORY[0x1E4FBC248], v5, MEMORY[0x1E4FBC278], v6);
  swift_bridgeObjectRelease();
  return v7;
}

uint64_t key path getter for SectionedFetchRequest.Configuration<>.sortDescriptors : <A, B>SectionedFetchRequest<A, B>.Configuration@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = type metadata accessor for SectionedFetchRequest.Configuration();
  uint64_t result = SectionedFetchRequest.Configuration<>.sortDescriptors.getter(v2);
  *a1 = result;
  return result;
}

uint64_t key path setter for SectionedFetchRequest.Configuration<>.sortDescriptors : <A, B>SectionedFetchRequest<A, B>.Configuration()
{
  uint64_t v0 = type metadata accessor for SectionedFetchRequest.Configuration();
  uint64_t v1 = swift_bridgeObjectRetain();
  return SectionedFetchRequest.Configuration<>.sortDescriptors.setter(v1, v0);
}

uint64_t SectionedFetchRequest.Configuration<>.sortDescriptors.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v12 = a1;
  v10[2] = *(void *)(a2 + 16);
  long long v11 = *(_OWORD *)(a2 + 24);
  type metadata accessor for SortDescriptor();
  uint64_t v4 = type metadata accessor for Array();
  uint64_t v5 = type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSSortDescriptor);
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v8 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF((void (*)(char *, char *))partial apply for closure #1 in SectionedFetchRequest.Configuration<>.sortDescriptors.setter, (uint64_t)v10, v4, v5, MEMORY[0x1E4FBC248], WitnessTable, MEMORY[0x1E4FBC278], v7);
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v3 + 8) = v8;
  return result;
}

uint64_t closure #1 in SectionedFetchRequest<>.init(sectionIdentifier:sortDescriptors:predicate:animation:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = type metadata accessor for SortDescriptor();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)&v9 - v6;
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSSortDescriptor);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a1, v4);
  uint64_t result = NSSortDescriptor.init<A>(_:)();
  *a2 = result;
  return result;
}

uint64_t (*SectionedFetchRequest.Configuration<>.sortDescriptors.modify(uint64_t *a1, uint64_t a2))(uint64_t *a1, char a2)
{
  a1[1] = a2;
  a1[2] = v2;
  *a1 = SectionedFetchRequest.Configuration<>.sortDescriptors.getter(a2);
  return SectionedFetchRequest.Configuration<>.sortDescriptors.modify;
}

uint64_t SectionedFetchRequest.Configuration<>.sortDescriptors.modify(uint64_t *a1, char a2)
{
  uint64_t v2 = a1[1];
  if ((a2 & 1) == 0) {
    return SectionedFetchRequest.Configuration<>.sortDescriptors.setter(*a1, v2);
  }
  uint64_t v3 = swift_bridgeObjectRetain();
  SectionedFetchRequest.Configuration<>.sortDescriptors.setter(v3, v2);

  return swift_bridgeObjectRelease();
}

uint64_t SectionedFetchResults<>.sortDescriptors.getter(uint64_t a1)
{
  long long v14 = *v1;
  SectionedFetchResults.nsSortDescriptors.getter();
  *(void *)&long long v14 = v3;
  uint64_t v12 = *(void *)(a1 + 16);
  long long v13 = *(_OWORD *)(a1 + 24);
  type metadata accessor for [NSSortDescriptor]();
  uint64_t v5 = v4;
  uint64_t v6 = type metadata accessor for SortDescriptor();
  unint64_t v7 = lazy protocol witness table accessor for type [NSSortDescriptor] and conformance [A]();
  uint64_t v9 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF((void (*)(char *, char *))partial apply for closure #1 in SectionedFetchResults<>.sortDescriptors.getter, (uint64_t)v11, v5, v6, MEMORY[0x1E4FBC248], v7, MEMORY[0x1E4FBC278], v8);
  swift_bridgeObjectRelease();
  return v9;
}

uint64_t key path getter for SectionedFetchResults<>.sortDescriptors : <A, B>SectionedFetchResults<A, B>@<X0>(uint64_t *a1@<X8>)
{
  uint64_t Results = type metadata accessor for SectionedFetchResults();
  uint64_t result = SectionedFetchResults<>.sortDescriptors.getter(Results);
  *a1 = result;
  return result;
}

uint64_t key path setter for SectionedFetchResults<>.sortDescriptors : <A, B>SectionedFetchResults<A, B>()
{
  uint64_t Results = type metadata accessor for SectionedFetchResults();
  uint64_t v1 = swift_bridgeObjectRetain();
  return SectionedFetchResults<>.sortDescriptors.setter(v1, Results);
}

uint64_t SectionedFetchResults<>.sortDescriptors.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *v2;
  uint64_t v3 = (void *)v2[1];
  uint64_t v14 = v4;
  id v15 = v3;
  uint64_t v13 = a1;
  void v11[2] = *(void *)(a2 + 16);
  long long v12 = *(_OWORD *)(a2 + 24);
  type metadata accessor for SortDescriptor();
  uint64_t v5 = type metadata accessor for Array();
  uint64_t v6 = type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSSortDescriptor);
  swift_bridgeObjectRetain();
  id v7 = v3;
  uint64_t WitnessTable = swift_getWitnessTable();
  _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF((void (*)(char *, char *))partial apply for closure #1 in SectionedFetchRequest<>.init(sectionIdentifier:sortDescriptors:predicate:animation:), (uint64_t)v11, v5, v6, MEMORY[0x1E4FBC248], WitnessTable, MEMORY[0x1E4FBC278], v9);
  swift_bridgeObjectRelease();
  SectionedFetchResults.nsSortDescriptors.setter();

  return swift_bridgeObjectRelease();
}

uint64_t closure #1 in SectionedFetchRequest.Configuration<>.sortDescriptors.getter@<X0>(id *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for SortDescriptor();
  uint64_t v5 = type metadata accessor for Optional();
  MEMORY[0x1F4188790](v5 - 8);
  id v7 = (char *)&v11 - v6;
  id v8 = *a1;
  SortDescriptor.init<A>(_:comparing:)();
  uint64_t v9 = *(void *)(v4 - 8);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v4);
  if (result != 1) {
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v9 + 32))(a2, v7, v4);
  }
  __break(1u);
  return result;
}

uint64_t (*SectionedFetchResults<>.sortDescriptors.modify(uint64_t *a1, uint64_t a2))(uint64_t *a1, char a2)
{
  uint64_t v3 = *v2;
  uint64_t v4 = v2[1];
  a1[1] = a2;
  a1[2] = v3;
  a1[3] = v4;
  *a1 = SectionedFetchResults<>.sortDescriptors.getter(a2);
  return SectionedFetchResults<>.sortDescriptors.modify;
}

uint64_t SectionedFetchResults<>.sortDescriptors.modify(uint64_t *a1, char a2)
{
  uint64_t v2 = a1[1];
  if ((a2 & 1) == 0) {
    return SectionedFetchResults<>.sortDescriptors.setter(*a1, v2);
  }
  uint64_t v3 = swift_bridgeObjectRetain();
  SectionedFetchResults<>.sortDescriptors.setter(v3, v2);

  return swift_bridgeObjectRelease();
}

void specialized SectionedFetchResults.sectionIdentifier.setter(uint64_t a1)
{
  uint64_t v1 = a1;
  swift_retain();
  swift_retain();
  MEMORY[0x18C10C010](&v1);
  swift_release();
  v2.value.super.Class isa = 0;
  FetchController.update(in:)(v2);
}

uint64_t partial apply for closure #1 in SectionedFetchResults.endIndex.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v3 = *(void *)(v1 + 40);
  uint64_t v4 = type metadata accessor for SectionedFetchResults.Section();
  uint64_t result = MEMORY[0x18C115C50](v3, v4);
  *a1 = result;
  return result;
}

uint64_t partial apply for closure #1 in SectionedFetchResults.subscript.getter()
{
  return Array.subscript.getter();
}

uint64_t type metadata accessor for SectionedFetchResults.Section()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t outlined retain of SectionedFetchRequest<A, B>(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(void **)(a1 + 24);
  char v4 = *(unsigned char *)(a1 + 32);
  uint64_t v5 = *(void **)(a1 + 40);
  uint64_t v6 = *(void **)(a1 + 48);
  outlined copy of Environment<UISceneSession?>.Content(*(id *)a1, *(unsigned char *)(a1 + 8));
  outlined copy of StateObject<FetchController<(), A, FetchedResults<A>>>.Storage<A>(v2, v3, v4);
  outlined copy of SectionedFetchResults<A, B>?<A, B>(v5, v6);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

id outlined copy of SectionedFetchResults<A, B>?<A, B>(id result, void *a2)
{
  if (result)
  {
    swift_bridgeObjectRetain();
    return a2;
  }
  return result;
}

void partial apply for closure #1 in SectionedFetchRequest.projectedValue.getter(void *a1@<X8>)
{
  closure #1 in SectionedFetchRequest.projectedValue.getter(v1 + 56, a1);
}

void partial apply for closure #2 in SectionedFetchRequest.projectedValue.getter(uint64_t *a1, uint64_t a2)
{
  closure #2 in SectionedFetchRequest.projectedValue.getter(a1, a2, *(void *)(v2 + 16), *(void *)(v2 + 24), (long long *)(v2 + 56));
}

uint64_t type metadata accessor for SectionedFetchRequest.Configuration()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for SectionedFetchResults()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_188270820()
{
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

id partial apply for closure #1 in SectionedFetchRequest.init(entity:sectionIdentifier:sortDescriptors:predicate:animation:)()
{
  return closure #1 in SectionedFetchRequest.init(entity:sectionIdentifier:sortDescriptors:predicate:animation:)(v0[5], v0[6], v0[7]);
}

uint64_t sub_188270878()
{
  return swift_deallocObject();
}

id partial apply for closure #1 in SectionedFetchRequest.init(fetchRequest:sectionIdentifier:transaction:)()
{
  destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(v0[5], v0[2], v0[3], v0[4]);

  return v1;
}

uint64_t sub_1882708E4()
{
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

id partial apply for closure #1 in SectionedFetchRequest<>.init(sectionIdentifier:sortDescriptors:predicate:animation:)()
{
  return closure #1 in SectionedFetchRequest<>.init(sectionIdentifier:sortDescriptors:predicate:animation:)(*(void *)(v0 + 40), *(void *)(v0 + 48));
}

uint64_t partial apply for closure #1 in SectionedFetchRequest.Configuration<>.sortDescriptors.getter@<X0>(id *a1@<X0>, uint64_t a2@<X8>)
{
  return closure #1 in SectionedFetchRequest.Configuration<>.sortDescriptors.getter(a1, a2);
}

uint64_t base witness table accessor for BidirectionalCollection in SectionedFetchResults<A, B>.Section()
{
  return swift_getWitnessTable();
}

uint64_t associated type witness table accessor for Collection.SubSequence : RandomAccessCollection in SectionedFetchResults<A, B>.Section()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for Collection in SectionedFetchResults<A, B>.Section()
{
  return swift_getWitnessTable();
}

uint64_t associated type witness table accessor for Collection.SubSequence : BidirectionalCollection in SectionedFetchResults<A, B>.Section()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for Sequence in SectionedFetchResults<A, B>.Section()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for BidirectionalCollection in SectionedFetchResults<A, B>()
{
  return swift_getWitnessTable();
}

uint64_t associated type witness table accessor for Collection.SubSequence : RandomAccessCollection in SectionedFetchResults<A, B>()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for Collection in SectionedFetchResults<A, B>()
{
  return swift_getWitnessTable();
}

uint64_t associated type witness table accessor for Collection.SubSequence : BidirectionalCollection in SectionedFetchResults<A, B>()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for Sequence in SectionedFetchResults<A, B>()
{
  return swift_getWitnessTable();
}

uint64_t sub_188270B98()
{
  return 24;
}

__n128 sub_188270BA4(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t sub_188270BC0()
{
  return 24;
}

__n128 sub_188270BCC(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t sub_188270BE8()
{
  return 24;
}

__n128 sub_188270BF4(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t sub_188270C10()
{
  return 24;
}

__n128 sub_188270C1C(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t sub_188270C38()
{
  return 24;
}

__n128 sub_188270C44(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t type metadata completion function for SectionedFetchResults.Section()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

void **initializeBufferWithCopyOfBuffer for SectionedFetchResults.Section(void **a1, void **a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(_DWORD *)(v5 + 80);
  unint64_t v7 = ((v6 + 8) & ~v6) + *(void *)(v5 + 64);
  int v8 = *(_DWORD *)(v5 + 80) & 0x100000;
  uint64_t v9 = (char *)*a2;
  *a1 = *a2;
  if (v6 > 7 || v8 != 0 || v7 > 0x18)
  {
    a1 = (void **)&v9[(v6 & 0xF8 ^ 0x1F8) & (v6 + 16)];
    swift_retain();
  }
  else
  {
    uint64_t v12 = ((unint64_t)a1 + v6 + 8) & ~v6;
    uint64_t v13 = ((unint64_t)a2 + v6 + 8) & ~v6;
    uint64_t v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
    id v15 = v9;
    v14(v12, v13, v4);
  }
  return a1;
}

uint64_t destroy for SectionedFetchResults.Section(id *a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(*(void *)(a2 + 16) - 8);
  uint64_t v5 = *(uint64_t (**)(unint64_t))(v4 + 8);
  unint64_t v6 = ((unint64_t)a1 + *(unsigned __int8 *)(v4 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);

  return v5(v6);
}

void **initializeWithCopy for SectionedFetchResults.Section(void **a1, void **a2, uint64_t a3)
{
  uint64_t v4 = *a2;
  *a1 = *a2;
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  unint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16);
  uint64_t v8 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v9 = ((unint64_t)a1 + v8 + 8) & ~v8;
  uint64_t v10 = ((unint64_t)a2 + v8 + 8) & ~v8;
  id v11 = v4;
  v7(v9, v10, v5);
  return a1;
}

void **assignWithCopy for SectionedFetchResults.Section(void **a1, void **a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  unint64_t v7 = *a1;
  *a1 = *a2;
  id v8 = v6;

  uint64_t v9 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v9 + 24))(((unint64_t)a1 + *(unsigned __int8 *)(v9 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80), ((unint64_t)a2 + *(unsigned __int8 *)(v9 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
  return a1;
}

void **assignWithTake for SectionedFetchResults.Section(void **a1, void **a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  *a1 = *a2;

  uint64_t v7 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v7 + 40))(((unint64_t)a1 + *(unsigned __int8 *)(v7 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80), ((unint64_t)a2 + *(unsigned __int8 *)(v7 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
  return a1;
}

uint64_t getEnumTagSinglePayload for SectionedFetchResults.Section(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  if (v5 <= 0x7FFFFFFF) {
    unsigned int v7 = 0x7FFFFFFF;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  int v8 = a2 - v7;
  if (a2 <= v7) {
    goto LABEL_23;
  }
  uint64_t v9 = ((v6 + 8) & ~v6) + *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  char v10 = 8 * v9;
  if (v9 <= 3)
  {
    unsigned int v13 = ((v8 + ~(-1 << v10)) >> v10) + 1;
    if (HIWORD(v13))
    {
      int v11 = *(_DWORD *)((char *)a1 + v9);
      if (!v11) {
        goto LABEL_23;
      }
      goto LABEL_15;
    }
    if (v13 > 0xFF)
    {
      int v11 = *(unsigned __int16 *)((char *)a1 + v9);
      if (!*(unsigned __int16 *)((char *)a1 + v9)) {
        goto LABEL_23;
      }
      goto LABEL_15;
    }
    if (v13 < 2)
    {
LABEL_23:
      if ((v5 & 0x80000000) != 0) {
        return (*(uint64_t (**)(unint64_t))(v4 + 48))(((unint64_t)a1 + v6 + 8) & ~v6);
      }
      uint64_t v15 = *(void *)a1;
      if (*(void *)a1 >= 0xFFFFFFFFuLL) {
        LODWORD(v15) = -1;
      }
      return (v15 + 1);
    }
  }
  int v11 = *((unsigned __int8 *)a1 + v9);
  if (!*((unsigned char *)a1 + v9)) {
    goto LABEL_23;
  }
LABEL_15:
  int v14 = (v11 - 1) << v10;
  if (v9 > 3) {
    int v14 = 0;
  }
  if (v9)
  {
    if (v9 > 3) {
      LODWORD(v9) = 4;
    }
    switch((int)v9)
    {
      case 2:
        LODWORD(v9) = *a1;
        break;
      case 3:
        LODWORD(v9) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v9) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v9) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v7 + (v9 | v14) + 1;
}

void storeEnumTagSinglePayload for SectionedFetchResults.Section(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(unsigned __int8 *)(v6 + 80);
  size_t v10 = ((v9 + 8) & ~v9) + *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  BOOL v11 = a3 >= v8;
  unsigned int v12 = a3 - v8;
  if (v12 != 0 && v11)
  {
    if (v10 <= 3)
    {
      unsigned int v16 = ((v12 + ~(-1 << (8 * v10))) >> (8 * v10)) + 1;
      if (HIWORD(v16))
      {
        int v13 = 4;
      }
      else if (v16 >= 0x100)
      {
        int v13 = 2;
      }
      else
      {
        int v13 = v16 > 1;
      }
    }
    else
    {
      int v13 = 1;
    }
  }
  else
  {
    int v13 = 0;
  }
  if (v8 < a2)
  {
    unsigned int v14 = ~v8 + a2;
    if (v10 < 4)
    {
      int v15 = (v14 >> (8 * v10)) + 1;
      if (v10)
      {
        int v17 = v14 & ~(-1 << (8 * v10));
        bzero(a1, v10);
        if (v10 == 3)
        {
          *(_WORD *)a1 = v17;
          a1[2] = BYTE2(v17);
        }
        else if (v10 == 2)
        {
          *(_WORD *)a1 = v17;
        }
        else
        {
          *a1 = v17;
        }
      }
    }
    else
    {
      bzero(a1, v10);
      *(_DWORD *)a1 = v14;
      int v15 = 1;
    }
    switch(v13)
    {
      case 1:
        a1[v10] = v15;
        return;
      case 2:
        *(_WORD *)&a1[v10] = v15;
        return;
      case 3:
        goto LABEL_42;
      case 4:
        *(_DWORD *)&a1[v10] = v15;
        return;
      default:
        return;
    }
  }
  switch(v13)
  {
    case 1:
      a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 2:
      *(_WORD *)&a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 3:
LABEL_42:
      __break(1u);
      JUMPOUT(0x188271410);
    case 4:
      *(_DWORD *)&a1[v10] = 0;
      goto LABEL_23;
    default:
LABEL_23:
      if (a2)
      {
LABEL_24:
        if ((v7 & 0x80000000) != 0)
        {
          unint64_t v19 = (unint64_t)&a1[v9 + 8] & ~v9;
          long long v20 = *(void (**)(unint64_t))(v6 + 56);
          v20(v19);
        }
        else
        {
          if ((a2 & 0x80000000) != 0) {
            uint64_t v18 = a2 ^ 0x80000000;
          }
          else {
            uint64_t v18 = a2 - 1;
          }
          *(void *)a1 = v18;
        }
      }
      return;
  }
}

uint64_t destroy for SectionedFetchRequest(uint64_t a1)
{
  outlined consume of Environment<UISceneSession?>.Content(*(id *)a1, *(unsigned char *)(a1 + 8));
  outlined consume of StateObject<FetchController<(), A, FetchedResults<A>>>.Storage<A>(*(void *)(a1 + 16), *(void **)(a1 + 24), *(unsigned char *)(a1 + 32));
  if (*(void *)(a1 + 40))
  {
    swift_bridgeObjectRelease();
  }
  swift_release();
  swift_release();
  swift_release();

  return swift_release();
}

uint64_t initializeWithCopy for SectionedFetchRequest(uint64_t a1, uint64_t a2)
{
  id v4 = *(id *)a2;
  char v5 = *(unsigned char *)(a2 + 8);
  outlined copy of Environment<UISceneSession?>.Content(*(id *)a2, v5);
  *(void *)a1 = v4;
  *(unsigned char *)(a1 + 8) = v5;
  uint64_t v6 = *(void *)(a2 + 16);
  unsigned int v7 = *(void **)(a2 + 24);
  char v8 = *(unsigned char *)(a2 + 32);
  outlined copy of StateObject<FetchController<(), A, FetchedResults<A>>>.Storage<A>(v6, v7, v8);
  *(void *)(a1 + 16) = v6;
  *(void *)(a1 + 24) = v7;
  *(unsigned char *)(a1 + 32) = v8;
  uint64_t v9 = *(void *)(a2 + 40);
  if (v9)
  {
    size_t v10 = *(void **)(a2 + 48);
    *(void *)(a1 + 40) = v9;
    *(void *)(a1 + 48) = v10;
    swift_bridgeObjectRetain();
    id v11 = v10;
  }
  else
  {
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  }
  uint64_t v12 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v12;
  uint64_t v14 = *(void *)(a2 + 72);
  uint64_t v13 = *(void *)(a2 + 80);
  *(void *)(a1 + 72) = v14;
  *(void *)(a1 + 80) = v13;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for SectionedFetchRequest(uint64_t a1, uint64_t a2)
{
  id v4 = *(id *)a2;
  char v5 = *(unsigned char *)(a2 + 8);
  outlined copy of Environment<UISceneSession?>.Content(*(id *)a2, v5);
  uint64_t v6 = *(void **)a1;
  char v7 = *(unsigned char *)(a1 + 8);
  *(void *)a1 = v4;
  *(unsigned char *)(a1 + 8) = v5;
  outlined consume of Environment<UISceneSession?>.Content(v6, v7);
  uint64_t v8 = *(void *)(a2 + 16);
  uint64_t v9 = *(void **)(a2 + 24);
  char v10 = *(unsigned char *)(a2 + 32);
  outlined copy of StateObject<FetchController<(), A, FetchedResults<A>>>.Storage<A>(v8, v9, v10);
  uint64_t v11 = *(void *)(a1 + 16);
  uint64_t v12 = *(void **)(a1 + 24);
  char v13 = *(unsigned char *)(a1 + 32);
  *(void *)(a1 + 16) = v8;
  *(void *)(a1 + 24) = v9;
  *(unsigned char *)(a1 + 32) = v10;
  outlined consume of StateObject<FetchController<(), A, FetchedResults<A>>>.Storage<A>(v11, v12, v13);
  uint64_t v14 = *(void *)(a2 + 40);
  if (!*(void *)(a1 + 40))
  {
    if (v14)
    {
      *(void *)(a1 + 40) = v14;
      uint64_t v18 = *(void **)(a2 + 48);
      *(void *)(a1 + 48) = v18;
      swift_bridgeObjectRetain();
      id v19 = v18;
      goto LABEL_8;
    }
LABEL_7:
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
    goto LABEL_8;
  }
  if (!v14)
  {
    uint64_t Results = type metadata accessor for SectionedFetchResults();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(Results - 8) + 8))(a1 + 40, Results);
    goto LABEL_7;
  }
  *(void *)(a1 + 40) = v14;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  int v15 = *(void **)(a2 + 48);
  unsigned int v16 = *(void **)(a1 + 48);
  *(void *)(a1 + 48) = v15;
  id v17 = v15;

LABEL_8:
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_retain();
  swift_release();
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_retain();
  swift_release();
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_retain();
  swift_release();
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for SectionedFetchRequest(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  char v5 = *((unsigned char *)a2 + 8);
  uint64_t v6 = *(void **)a1;
  char v7 = *(unsigned char *)(a1 + 8);
  *(void *)a1 = v4;
  *(unsigned char *)(a1 + 8) = v5;
  outlined consume of Environment<UISceneSession?>.Content(v6, v7);
  char v8 = *((unsigned char *)a2 + 32);
  uint64_t v9 = *(void *)(a1 + 16);
  char v10 = *(void **)(a1 + 24);
  char v11 = *(unsigned char *)(a1 + 32);
  *(_OWORD *)(a1 + 16) = *((_OWORD *)a2 + 1);
  *(unsigned char *)(a1 + 32) = v8;
  outlined consume of StateObject<FetchController<(), A, FetchedResults<A>>>.Storage<A>(v9, v10, v11);
  uint64_t v12 = a2[5];
  if (!*(void *)(a1 + 40)) {
    goto LABEL_5;
  }
  if (!v12)
  {
    uint64_t Results = type metadata accessor for SectionedFetchResults();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(Results - 8) + 8))(a1 + 40, Results);
LABEL_5:
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 5);
    goto LABEL_6;
  }
  *(void *)(a1 + 40) = v12;
  swift_bridgeObjectRelease();
  char v13 = *(void **)(a1 + 48);
  *(void *)(a1 + 48) = a2[6];

LABEL_6:
  *(void *)(a1 + 56) = a2[7];
  swift_release();
  *(void *)(a1 + 64) = a2[8];
  swift_release();
  *(void *)(a1 + 72) = a2[9];
  swift_release();
  *(void *)(a1 + 80) = a2[10];
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for SectionedFetchRequest(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 88)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 72);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SectionedFetchRequest(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 88) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 72) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 88) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t type metadata accessor for SectionedFetchRequest()
{
  return __swift_instantiateGenericMetadata();
}

void destroy for SectionedFetchRequest.Configuration(uint64_t a1)
{
  swift_release();
  swift_bridgeObjectRelease();
  unint64_t v2 = *(void **)(a1 + 16);
}

void *initializeBufferWithCopyOfBuffer for SectionedFetchRequest.Configuration(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = (void *)a2[2];
  a1[2] = v4;
  swift_retain();
  swift_bridgeObjectRetain();
  id v5 = v4;
  return a1;
}

void *assignWithCopy for SectionedFetchRequest.Configuration(void *a1, void *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = (void *)a1[2];
  id v5 = (void *)a2[2];
  a1[2] = v5;
  id v6 = v5;

  return a1;
}

uint64_t assignWithTake for SectionedFetchRequest.Configuration(uint64_t a1, uint64_t a2)
{
  swift_release();
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void **)(a1 + 16);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);

  return a1;
}

uint64_t sub_188271A50()
{
  return swift_deallocObject();
}

id partial apply for implicit closure #2 in implicit closure #1 in variable initialization expression of SectionedFetchRequest._controller()
{
  return implicit closure #2 in implicit closure #1 in variable initialization expression of SectionedFetchRequest._controller();
}

uint64_t partial apply for implicit closure #3 in implicit closure #2 in implicit closure #1 in variable initialization expression of SectionedFetchRequest._controller@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = a1;

  return SectionedFetchResults.init(_:)(v3, a2);
}

id partial apply for closure #1 in SectionedFetchResults.init(_:)@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  return closure #1 in SectionedFetchResults.init(_:)(a1, *(void *)(v2 + 16), a2);
}

unint64_t type metadata accessor for NSFetchedResultsSectionInfo()
{
  unint64_t result = lazy cache variable for type metadata for NSFetchedResultsSectionInfo;
  if (!lazy cache variable for type metadata for NSFetchedResultsSectionInfo)
  {
    unint64_t result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for NSFetchedResultsSectionInfo);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type [NSFetchedResultsSectionInfo] and conformance [A]()
{
  unint64_t result = lazy protocol witness table cache variable for type [NSFetchedResultsSectionInfo] and conformance [A];
  if (!lazy protocol witness table cache variable for type [NSFetchedResultsSectionInfo] and conformance [A])
  {
    _ss23_ContiguousArrayStorageCys7CVarArg_pGMaTm_2(255, &lazy cache variable for type metadata for [NSFetchedResultsSectionInfo], (uint64_t (*)(uint64_t))type metadata accessor for NSFetchedResultsSectionInfo, MEMORY[0x1E4FBB320]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [NSFetchedResultsSectionInfo] and conformance [A]);
  }
  return result;
}

void outlined consume of Binding<SectionedFetchResults<A, B>?>?<A, B>(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  if (a2)
  {
    swift_release();
    swift_release();
    outlined consume of AccessibilityAttachment?(a3, a4);
  }
}

uint64_t sub_188271C08()
{
  return swift_deallocObject();
}

uint64_t sub_188271C18()
{
  return swift_deallocObject();
}

void *partial apply for specialized thunk for @callee_guaranteed () -> (@out A, @error @owned Error)@<X0>(void *a1@<X8>)
{
  unint64_t result = (*(void *(**)(uint64_t *__return_ptr))(v1 + 16))(&v5);
  if (!v2) {
    *a1 = v5;
  }
  return result;
}

uint64_t sub_188271C6C()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in SectionedFetchRequest<>.init(sectionIdentifier:sortDescriptors:predicate:animation:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return partial apply for closure #1 in SectionedFetchRequest.Configuration<>.sortDescriptors.setter(a1, a2);
}

uint64_t partial apply for closure #1 in SectionedFetchResults<>.sortDescriptors.getter@<X0>(id *a1@<X0>, uint64_t a2@<X8>)
{
  return partial apply for closure #1 in SectionedFetchRequest.Configuration<>.sortDescriptors.getter(a1, a2);
}

uint64_t associated type witness table accessor for TupleGestureProtocol.GestureType : Gesture in <> Tuple<A, B>()
{
  return swift_getWitnessTable();
}

uint64_t associated type witness table accessor for TupleGestureProtocol.GestureType.Gesture.Value : TupleProtocol in <> Tuple<A, B>()
{
  return swift_getWitnessTable();
}

uint64_t protocol witness for static Gesture._makeGesture(gesture:inputs:) in conformance EmptyTupleGesture()
{
  return _GestureOutputs.init(phase:)();
}

void protocol witness for Gesture.body.getter in conformance EmptyTupleGesture()
{
}

uint64_t static TupleGesture._makeGesture(gesture:inputs:)@<X0>(unsigned int *a1@<X0>, long long *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v86 = *MEMORY[0x1E4F143B8];
  long long v12 = a2[5];
  long long v83 = a2[4];
  long long v84 = v12;
  long long v13 = a2[5];
  v85[0] = a2[6];
  *(_OWORD *)((char *)v85 + 12) = *(long long *)((char *)a2 + 108);
  long long v14 = a2[1];
  long long v79 = *a2;
  long long v80 = v14;
  long long v15 = a2[3];
  long long v17 = *a2;
  long long v16 = a2[1];
  long long v81 = a2[2];
  long long v82 = v15;
  long long v76 = v83;
  long long v77 = v13;
  v78[0] = a2[6];
  *(_OWORD *)((char *)v78 + 12) = *(long long *)((char *)a2 + 108);
  long long v72 = v17;
  long long v73 = v16;
  unsigned int v30 = *a1;
  _GestureInputs.events.getter();
  _GestureInputs.resetSeed.getter();
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  lazy protocol witness table accessor for type TupleEvents and conformance TupleEvents();
  Attribute.init<A>(body:value:flags:update:)();
  long long v76 = v83;
  long long v77 = v84;
  v78[0] = v85[0];
  *(_OWORD *)((char *)v78 + 12) = *(_OWORD *)((char *)v85 + 12);
  long long v72 = v79;
  long long v73 = v80;
  long long v74 = v81;
  long long v75 = v82;
  outlined retain of _GestureInputs((uint64_t)&v79);
  AGGraphCreateOffsetAttribute2();
  _GestureInputs.events.setter();
  uint64_t v46 = a3;
  uint64_t v47 = a4;
  uint64_t v48 = a5;
  uint64_t v49 = a6;
  uint64_t v50 = a7;
  type metadata accessor for TupleGesture();
  type metadata accessor for _GraphValue();
  _GraphValue.subscript.getter();
  static Gesture.makeDebuggableGesture(gesture:inputs:)();
  unsigned int v27 = DWORD1(v58);
  uint64_t v28 = *((void *)&v58 + 1);
  int v29 = v59;
  long long v69 = v83;
  long long v70 = v84;
  v71[0] = v85[0];
  *(_OWORD *)((char *)v71 + 12) = *(_OWORD *)((char *)v85 + 12);
  long long v65 = v79;
  long long v66 = v80;
  long long v67 = v81;
  long long v68 = v82;
  outlined retain of _GestureInputs((uint64_t)&v79);
  AGGraphCreateOffsetAttribute2();
  _GestureInputs.events.setter();
  uint64_t v41 = a3;
  uint64_t v42 = a4;
  uint64_t v43 = a5;
  uint64_t v44 = a6;
  uint64_t v45 = a7;
  _GraphValue.subscript.getter();
  long long v62 = v69;
  long long v63 = v70;
  v64[0] = v71[0];
  *(_OWORD *)((char *)v64 + 12) = *(_OWORD *)((char *)v71 + 12);
  long long v59 = v66;
  long long v60 = v67;
  long long v61 = v68;
  static Gesture.makeDebuggableGesture(gesture:inputs:)();
  uint64_t v26 = *((void *)&v51 + 1);
  int v25 = v52;
  swift_getAssociatedTypeWitness();
  type metadata accessor for _GestureOutputs();
  LODWORD(a5) = _GestureOutputs.phase.getter();
  *((void *)&v58 + 1) = *((void *)&v51 + 1);
  LODWORD(v59) = v52;
  swift_getAssociatedTypeWitness();
  type metadata accessor for _GestureOutputs();
  LODWORD(v58) = a5;
  DWORD1(v58) = _GestureOutputs.phase.getter();
  type metadata accessor for Tuple();
  uint64_t v38 = type metadata accessor for GesturePhase();
  uint64_t v39 = type metadata accessor for TuplePhase();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v18 = type metadata accessor for Attribute();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v58, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TA_4, (uint64_t)v37, v39, MEMORY[0x1E4FBC248], v18, MEMORY[0x1E4FBC278], v19);
  _GestureOutputs.init(phase:)();
  long long v62 = v83;
  long long v63 = v84;
  v64[0] = v85[0];
  *(_OWORD *)((char *)v64 + 12) = *(_OWORD *)((char *)v85 + 12);
  long long v58 = v79;
  long long v59 = v80;
  long long v60 = v81;
  long long v61 = v82;
  *(void *)&long long v51 = __PAIR64__(v27, v30);
  *((void *)&v51 + 1) = v28;
  LODWORD(v52) = v29;
  type metadata accessor for _GestureOutputs();
  _GestureOutputs.wrapDebugOutputs<A, B, C>(_:kind:properties:inputs:combiningOutputs:)();
  *(void *)&long long v58 = v28;
  DWORD2(v58) = v29;
  *(void *)&long long v51 = v26;
  DWORD2(v51) = v25;
  PairwisePreferenceCombinerVisitor.init(outputs:)();
  uint64_t v32 = *(void *)&v85[0];
  uint64_t v33 = 0;
  swift_bridgeObjectRetain();
  if (PreferenceKeys.endIndex.getter())
  {
    lazy protocol witness table accessor for type PreferenceKeys and conformance PreferenceKeys();
    do
    {
      long long v20 = (void (*)(long long *, void))protocol witness for Collection.subscript.read in conformance PreferenceKeys();
      v20(&v58, 0);
      uint64_t v21 = v33;
      *(void *)&long long v58 = v32;
      swift_bridgeObjectRetain();
      uint64_t v22 = PreferenceKeys.endIndex.getter();
      if (v33 < 0 || v33 >= v22) {
        __break(1u);
      }
      ++v33;
      swift_bridgeObjectRelease();
      static PreferenceKey.visitKey<A>(_:)();
    }
    while (v21 + 1 != PreferenceKeys.endIndex.getter());
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  long long v55 = v69;
  long long v56 = v70;
  v57[0] = v71[0];
  *(_OWORD *)((char *)v57 + 12) = *(_OWORD *)((char *)v71 + 12);
  long long v51 = v65;
  long long v52 = v66;
  long long v53 = v67;
  long long v54 = v68;
  outlined release of _GestureInputs((uint64_t)&v51);
  long long v62 = v76;
  long long v63 = v77;
  v64[0] = v78[0];
  *(_OWORD *)((char *)v64 + 12) = *(_OWORD *)((char *)v78 + 12);
  long long v58 = v72;
  long long v59 = v73;
  long long v60 = v74;
  long long v61 = v75;
  outlined release of _GestureInputs((uint64_t)&v58);
  *(void *)a8 = v34;
  *(void *)(a8 + 8) = v35;
  *(_DWORD *)(a8 + 16) = v36;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t closure #2 in static TupleGesture._makeGesture(gesture:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12 = a2;
  uint64_t v13 = a3;
  uint64_t v14 = a4;
  uint64_t v15 = a5;
  uint64_t v16 = a6;
  void v11[2] = type metadata accessor for TupleGesture();
  void v11[3] = a2;
  uint64_t v8 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(a1, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply, (uint64_t)v11, a2, MEMORY[0x1E4FBC248], v8, MEMORY[0x1E4FBC278], v9);
  return v12;
}

uint64_t closure #4 in static TupleGesture._makeGesture(gesture:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v14 = a2;
  uint64_t v15 = a3;
  uint64_t v16 = a4;
  uint64_t v17 = a5;
  uint64_t v18 = a6;
  uint64_t v8 = type metadata accessor for TupleGesture();
  uint64_t v9 = a1 + *(int *)(v8 + 60);
  v13[2] = v8;
  void v13[3] = a3;
  uint64_t v10 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v9, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply, (uint64_t)v13, a3, MEMORY[0x1E4FBC248], v10, MEMORY[0x1E4FBC278], v11);
  return v14;
}

uint64_t protocol witness for static Gesture._makeGesture(gesture:inputs:) in conformance TupleGesture<A, B>@<X0>(unsigned int *a1@<X0>, long long *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  return static TupleGesture._makeGesture(gesture:inputs:)(a1, a2, a3[2], a3[3], a3[4], a3[5], a3[6], a4);
}

void protocol witness for Gesture.body.getter in conformance TupleGesture<A, B>()
{
}

_UNKNOWN **associated type witness table accessor for TupleGestureProtocol.GestureType : Gesture in EmptyTuple()
{
  return &protocol witness table for EmptyTupleGesture;
}

_UNKNOWN **associated type witness table accessor for TupleGestureProtocol.GestureType.Gesture.Value : TupleProtocol in EmptyTuple()
{
  return &protocol witness table for EmptyTuple;
}

uint64_t TupleEvents.updateValue()()
{
  uint64_t v1 = v0;
  uint64_t v61 = *MEMORY[0x1E4F143B8];
  uint64_t Value = (_DWORD *)AGGraphGetValue();
  if (*(_DWORD *)(v0 + 24) != *Value)
  {
    *(_DWORD *)(v0 + 24) = *Value;
    *(void *)(v0 + 8) = 0;
    *(void *)(v0 + 16) = 0;
  }
  type metadata accessor for [EventID : EventType]();
  uint64_t v3 = *(void *)AGGraphGetValue();
  uint64_t v50 = v3 + 64;
  uint64_t v4 = 1 << *(unsigned char *)(v3 + 32);
  uint64_t v5 = -1;
  if (v4 < 64) {
    uint64_t v5 = ~(-1 << v4);
  }
  unint64_t v6 = v5 & *(void *)(v3 + 64);
  int64_t v51 = (unint64_t)(v4 + 63) >> 6;
  uint64_t v52 = v3;
  swift_bridgeObjectRetain();
  int64_t v53 = 0;
  char v7 = (void *)MEMORY[0x1E4FBC868];
  uint64_t v8 = (void *)MEMORY[0x1E4FBC868];
  while (1)
  {
    if (v6)
    {
      unint64_t v11 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      unint64_t v12 = v11 | (v53 << 6);
LABEL_11:
      uint64_t v13 = *(void *)(v52 + 56);
      uint64_t v14 = (uint64_t *)(*(void *)(v52 + 48) + 16 * v12);
      uint64_t v16 = *v14;
      uint64_t v15 = v14[1];
      *(void *)&long long v55 = v16;
      *((void *)&v55 + 1) = v15;
      outlined init with copy of TableColumnList(v13 + 40 * v12, (uint64_t)v56);
      goto LABEL_30;
    }
    int64_t v17 = v53 + 1;
    if (__OFADD__(v53, 1)) {
      goto LABEL_62;
    }
    if (v17 < v51)
    {
      unint64_t v18 = *(void *)(v50 + 8 * v17);
      if (v18) {
        goto LABEL_15;
      }
      int64_t v19 = v53 + 2;
      ++v53;
      if (v17 + 1 < v51)
      {
        unint64_t v18 = *(void *)(v50 + 8 * v19);
        if (v18) {
          goto LABEL_18;
        }
        int64_t v53 = v17 + 1;
        if (v17 + 2 < v51)
        {
          unint64_t v18 = *(void *)(v50 + 8 * (v17 + 2));
          if (v18)
          {
            v17 += 2;
            goto LABEL_15;
          }
          int64_t v19 = v17 + 3;
          int64_t v53 = v17 + 2;
          if (v17 + 3 < v51)
          {
            unint64_t v18 = *(void *)(v50 + 8 * v19);
            if (v18)
            {
LABEL_18:
              int64_t v17 = v19;
LABEL_15:
              unint64_t v6 = (v18 - 1) & v18;
              unint64_t v12 = __clz(__rbit64(v18)) + (v17 << 6);
              int64_t v53 = v17;
              goto LABEL_11;
            }
            while (1)
            {
              int64_t v17 = v19 + 1;
              if (__OFADD__(v19, 1)) {
                goto LABEL_65;
              }
              if (v17 >= v51) {
                break;
              }
              unint64_t v18 = *(void *)(v50 + 8 * v17);
              ++v19;
              if (v18) {
                goto LABEL_15;
              }
            }
            int64_t v53 = v51 - 1;
          }
        }
      }
    }
    unint64_t v6 = 0;
    uint64_t v57 = 0;
    memset(v56, 0, sizeof(v56));
    long long v55 = 0u;
LABEL_30:
    outlined init with take of (key: EventID, value: EventType)?((uint64_t)&v55, (uint64_t)&v58);
    Swift::UInt v20 = (Swift::UInt)v58;
    if (!v58)
    {
      swift_release();
      long long v58 = v8;
      long long v59 = v7;
      AGGraphSetOutputValue();
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    }
    Swift::UInt v21 = (Swift::UInt)v59;
    outlined init with take of OptionalBinaryInteger(&v60, (uint64_t)&v55);
    Swift::UInt v22 = *(void *)(v1 + 8);
    Swift::UInt v23 = *(void *)(v1 + 16);
    if (!v22)
    {
      Swift::UInt v22 = v20;
      Swift::UInt v23 = v21;
    }
    *(void *)(v1 + 8) = v22;
    *(void *)(v1 + 16) = v23;
    if (v23 == v21 && v22 == v20) {
      break;
    }
    outlined init with copy of TableColumnList((uint64_t)&v55, (uint64_t)v54);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v27 = specialized __RawDictionaryStorage.find<A>(_:)(v20, v21);
    uint64_t v28 = v7[2];
    BOOL v29 = (v26 & 1) == 0;
    uint64_t v30 = v28 + v29;
    if (__OFADD__(v28, v29))
    {
      __break(1u);
LABEL_61:
      __break(1u);
LABEL_62:
      __break(1u);
LABEL_63:
      __break(1u);
LABEL_64:
      __break(1u);
LABEL_65:
      __break(1u);
    }
    char v31 = v26;
    if (v7[3] >= v30)
    {
      if (isUniquelyReferenced_nonNull_native)
      {
        if (v26) {
          goto LABEL_50;
        }
      }
      else
      {
        specialized _NativeDictionary.copy()();
        if (v31) {
          goto LABEL_50;
        }
      }
    }
    else
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v30, isUniquelyReferenced_nonNull_native);
      unint64_t v32 = specialized __RawDictionaryStorage.find<A>(_:)(v20, v21);
      if ((v31 & 1) != (v33 & 1)) {
        goto LABEL_66;
      }
      unint64_t v27 = v32;
      if (v31)
      {
LABEL_50:
        uint64_t v9 = v7[7];
        goto LABEL_7;
      }
    }
    v7[(v27 >> 6) + 8] |= 1 << v27;
    uint64_t v34 = (Swift::UInt *)(v7[6] + 16 * v27);
    Swift::UInt *v34 = v20;
    v34[1] = v21;
    outlined init with take of OptionalBinaryInteger(v54, v7[7] + 40 * v27);
    uint64_t v35 = v7[2];
    BOOL v36 = __OFADD__(v35, 1);
    uint64_t v37 = v35 + 1;
    if (v36) {
      goto LABEL_63;
    }
    uint64_t v7[2] = v37;
LABEL_8:
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v55);
  }
  outlined init with copy of TableColumnList((uint64_t)&v55, (uint64_t)v54);
  char v38 = swift_isUniquelyReferenced_nonNull_native();
  unint64_t v27 = specialized __RawDictionaryStorage.find<A>(_:)(v20, v21);
  uint64_t v40 = v8[2];
  BOOL v41 = (v39 & 1) == 0;
  uint64_t v42 = v40 + v41;
  if (__OFADD__(v40, v41)) {
    goto LABEL_61;
  }
  char v43 = v39;
  if (v8[3] >= v42)
  {
    if (v38)
    {
      if (v39) {
        goto LABEL_6;
      }
    }
    else
    {
      specialized _NativeDictionary.copy()();
      if (v43)
      {
LABEL_6:
        uint64_t v9 = v8[7];
LABEL_7:
        uint64_t v10 = v9 + 40 * v27;
        __swift_destroy_boxed_opaque_existential_1(v10);
        outlined init with take of OptionalBinaryInteger(v54, v10);
        goto LABEL_8;
      }
    }
    goto LABEL_53;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v42, v38);
  unint64_t v44 = specialized __RawDictionaryStorage.find<A>(_:)(v20, v21);
  if ((v43 & 1) == (v45 & 1))
  {
    unint64_t v27 = v44;
    if (v43) {
      goto LABEL_6;
    }
LABEL_53:
    v8[(v27 >> 6) + 8] |= 1 << v27;
    uint64_t v46 = (Swift::UInt *)(v8[6] + 16 * v27);
    *uint64_t v46 = v20;
    v46[1] = v21;
    outlined init with take of OptionalBinaryInteger(v54, v8[7] + 40 * v27);
    uint64_t v47 = v8[2];
    BOOL v36 = __OFADD__(v47, 1);
    uint64_t v48 = v47 + 1;
    if (v36) {
      goto LABEL_64;
    }
    v8[2] = v48;
    goto LABEL_8;
  }
LABEL_66:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t TupleEvents.description.getter()
{
  uint64_t result = 0x764520656C707554;
  uint64_t v2 = *(void *)(v0 + 8);
  strcpy((char *)v8, "Tuple Events");
  BYTE5(v8[1]) = 0;
  HIWORD(v8[1]) = -5120;
  if (v2)
  {
    v7._countAndFlagsBits = _typeName(_:qualified:)();
    v7._object = v3;
    v4._countAndFlagsBits = 35;
    v4._object = (void *)0xE100000000000000;
    String.append(_:)(v4);
    v5._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v5);
    swift_bridgeObjectRelease();
    String.append(_:)(v7);
    swift_bridgeObjectRelease();
    v6._countAndFlagsBits = 32;
    v6._object = (void *)0xE100000000000000;
    String.append(_:)(v6);
    swift_bridgeObjectRelease();
    return v8[0];
  }
  return result;
}

uint64_t EmptyTuplePhase.updateValue()()
{
  lazy protocol witness table accessor for type EmptyTuplePhase and conformance EmptyTuplePhase();
  uint64_t result = ResettableGestureRule.resetIfNeeded()();
  if (result)
  {
    if ((*(unsigned char *)(v0 + 8) & 1) == 0)
    {
      type metadata accessor for [EventID : EventType]();
      if (*(void *)(*(void *)AGGraphGetValue() + 16)) {
        *(unsigned char *)(v0 + 8) = 1;
      }
    }
    type metadata accessor for GesturePhase<EmptyTuple>();
    return AGGraphSetOutputValue();
  }
  return result;
}

uint64_t TuplePhase.head.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for GesturePhase();
  uint64_t Value = AGGraphGetValue();
  Swift::String v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16);

  return v4(a1, Value, v2);
}

uint64_t TuplePhase.tail.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for GesturePhase();
  uint64_t Value = AGGraphGetValue();
  Swift::String v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16);

  return v4(a1, Value, v2);
}

uint64_t protocol witness for ResettableGestureRule.phaseValue.getter in conformance EmptyTuplePhase()
{
  return MEMORY[0x1F40FFCE8]();
}

uint64_t protocol witness for ResettableGestureRule.resetSeed.getter in conformance EmptyTuplePhase()
{
  return *(unsigned int *)AGGraphGetValue();
}

void protocol witness for ResettableGestureRule.resetPhase() in conformance EmptyTuplePhase()
{
  *(unsigned char *)(v0 + 8) = 0;
}

uint64_t TuplePhase.value.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, ValueMetadata *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10 = type metadata accessor for GesturePhase();
  uint64_t v11 = type metadata accessor for GesturePhase();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  MEMORY[0x1F4188790](TupleTypeMetadata2);
  uint64_t v14 = (char *)&v37 - v13;
  uint64_t v46 = v11;
  uint64_t v45 = *(void *)(v11 - 8);
  MEMORY[0x1F4188790](v15);
  uint64_t v43 = (uint64_t)&v37 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v17);
  int64_t v19 = (char *)&v37 - v18;
  uint64_t v20 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v21);
  uint64_t v42 = (uint64_t)&v37 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v23);
  unint64_t v27 = (char *)&v37 - v25;
  uint64_t v44 = a5;
  if (a3 == &type metadata for EmptyTuple) {
    goto LABEL_6;
  }
  uint64_t v38 = v26;
  uint64_t v28 = v24;
  TuplePhase.head.getter((uint64_t)&v37 - v25);
  uint64_t v40 = a1;
  uint64_t v41 = a4;
  TuplePhase.tail.getter((uint64_t)v19);
  uint64_t v39 = v28;
  BOOL v29 = &v14[*(int *)(v28 + 48)];
  (*(void (**)(char *, char *, uint64_t))(v20 + 32))(v14, v27, v10);
  uint64_t v31 = v45;
  uint64_t v30 = v46;
  (*(void (**)(char *, char *, uint64_t))(v45 + 32))(v29, v19, v46);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload != 2 || swift_getEnumCaseMultiPayload()) {
      goto LABEL_5;
    }
  }
  else if (swift_getEnumCaseMultiPayload() != 2)
  {
LABEL_5:
    (*(void (**)(char *, uint64_t))(v38 + 8))(v14, v39);
    a4 = v41;
LABEL_6:
    uint64_t v33 = v42;
    TuplePhase.head.getter(v42);
    uint64_t v34 = v43;
    uint64_t v35 = TuplePhase.tail.getter(v43);
    MEMORY[0x1F4188790](v35);
    *(&v37 - 4) = a2;
    *(&v37 - 3) = (uint64_t)a3;
    *(&v37 - 2) = a4;
    type metadata accessor for Tuple();
    GesturePhase.and<A, B>(_:value:)();
    (*(void (**)(uint64_t, uint64_t))(v45 + 8))(v34, v46);
    return (*(uint64_t (**)(uint64_t, uint64_t))(v20 + 8))(v33, v10);
  }
  (*(void (**)(char *, uint64_t))(v31 + 8))(v29, v30);
  (*(void (**)(char *, uint64_t))(v20 + 8))(v14, v10);
  type metadata accessor for Tuple();
  type metadata accessor for GesturePhase();
  return swift_storeEnumTagMultiPayload();
}

uint64_t closure #1 in TuplePhase.value.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a3 - 8) + 16))(a5, a1);
  uint64_t v8 = a5 + *(int *)(type metadata accessor for Tuple() + 44);
  uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a4 - 8) + 16);

  return v9(v8, a2, a4);
}

uint64_t protocol witness for static Rule.initialValue.getter in conformance TuplePhase<A, B>@<X0>(uint64_t a1@<X8>)
{
  type metadata accessor for Tuple();
  uint64_t v2 = type metadata accessor for GesturePhase();
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56);

  return v3(a1, 1, 1, v2);
}

uint64_t protocol witness for Rule.value.getter in conformance TuplePhase<A, B>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return TuplePhase.value.getter(*v2, *(void *)(a1 + 16), *(ValueMetadata **)(a1 + 24), *(void *)(a1 + 32), a2);
}

void type metadata accessor for GesturePhase<EmptyTuple>()
{
  if (!lazy cache variable for type metadata for GesturePhase<EmptyTuple>)
  {
    unint64_t v0 = type metadata accessor for GesturePhase();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for GesturePhase<EmptyTuple>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type TupleEvents and conformance TupleEvents()
{
  unint64_t result = lazy protocol witness table cache variable for type TupleEvents and conformance TupleEvents;
  if (!lazy protocol witness table cache variable for type TupleEvents and conformance TupleEvents)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TupleEvents and conformance TupleEvents);
  }
  return result;
}

uint64_t partial apply for closure #2 in static TupleGesture._makeGesture(gesture:inputs:)(uint64_t a1)
{
  return partial apply for closure #2 in static TupleGesture._makeGesture(gesture:inputs:)(a1, closure #2 in static TupleGesture._makeGesture(gesture:inputs:));
}

uint64_t type metadata accessor for TupleGesture()
{
  return swift_getGenericMetadata();
}

uint64_t partial apply for closure #4 in static TupleGesture._makeGesture(gesture:inputs:)(uint64_t a1)
{
  return partial apply for closure #2 in static TupleGesture._makeGesture(gesture:inputs:)(a1, closure #4 in static TupleGesture._makeGesture(gesture:inputs:));
}

uint64_t partial apply for closure #2 in static TupleGesture._makeGesture(gesture:inputs:)(uint64_t a1, uint64_t (*a2)(uint64_t, void, void, void, void, void))
{
  return a2(a1, v2[2], v2[3], v2[4], v2[5], v2[6]);
}

uint64_t type metadata accessor for TuplePhase()
{
  return __swift_instantiateGenericMetadata();
}

void *type metadata accessor for TupleEvents()
{
  return &unk_1ED40FE70;
}

void *type metadata accessor for TupleEvents.Value()
{
  return &unk_1ED40FDF0;
}

uint64_t getEnumTagSinglePayload for EmptyTuplePhase(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 8);
  BOOL v4 = v3 >= 2;
  int v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for EmptyTuplePhase(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(void *)unint64_t result = a2 - 255;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 16) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 8) = a2 + 1;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for EmptyTuplePhase()
{
  return &type metadata for EmptyTuplePhase;
}

ValueMetadata *type metadata accessor for EmptyTupleGesture()
{
  return &type metadata for EmptyTupleGesture;
}

uint64_t type metadata completion function for TupleGesture()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t getEnumTagSinglePayload for TupleGesture(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v5 = *(void *)(a3 + 24);
  unsigned int v6 = *(_DWORD *)(v4 + 84);
  uint64_t v7 = *(void *)(v5 - 8);
  uint64_t v8 = *(unsigned int *)(v7 + 84);
  uint64_t v9 = *(unsigned __int8 *)(v7 + 80);
  if (v8 <= v6) {
    unsigned int v10 = *(_DWORD *)(v4 + 84);
  }
  else {
    unsigned int v10 = *(_DWORD *)(v7 + 84);
  }
  if (!a2) {
    return 0;
  }
  uint64_t v11 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) + v9;
  unsigned int v12 = a2 - v10;
  if (a2 <= v10) {
    goto LABEL_24;
  }
  uint64_t v13 = (v11 & ~v9) + *(void *)(*(void *)(v5 - 8) + 64);
  char v14 = 8 * v13;
  if (v13 <= 3)
  {
    unsigned int v16 = ((v12 + ~(-1 << v14)) >> v14) + 1;
    if (HIWORD(v16))
    {
      int v15 = *(_DWORD *)((char *)a1 + v13);
      if (!v15) {
        goto LABEL_24;
      }
      goto LABEL_14;
    }
    if (v16 > 0xFF)
    {
      int v15 = *(unsigned __int16 *)((char *)a1 + v13);
      if (!*(unsigned __int16 *)((char *)a1 + v13)) {
        goto LABEL_24;
      }
      goto LABEL_14;
    }
    if (v16 < 2)
    {
LABEL_24:
      if (v10)
      {
        if (v6 >= v8) {
          return (*(uint64_t (**)(void))(v4 + 48))();
        }
        else {
          return (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v7 + 48))(((unint64_t)a1 + v11) & ~v9, v8, v5);
        }
      }
      return 0;
    }
  }
  int v15 = *((unsigned __int8 *)a1 + v13);
  if (!*((unsigned char *)a1 + v13)) {
    goto LABEL_24;
  }
LABEL_14:
  int v17 = (v15 - 1) << v14;
  if (v13 > 3) {
    int v17 = 0;
  }
  if (v13)
  {
    if (v13 <= 3) {
      int v18 = v13;
    }
    else {
      int v18 = 4;
    }
    switch(v18)
    {
      case 2:
        int v19 = *a1;
        break;
      case 3:
        int v19 = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        int v19 = *(_DWORD *)a1;
        break;
      default:
        int v19 = *(unsigned __int8 *)a1;
        break;
    }
  }
  else
  {
    int v19 = 0;
  }
  return v10 + (v19 | v17) + 1;
}

void storeEnumTagSinglePayload for TupleGesture(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  uint64_t v8 = *(void *)(a4 + 24);
  uint64_t v9 = *(void *)(v8 - 8);
  unsigned int v10 = *(_DWORD *)(v9 + 84);
  uint64_t v11 = *(unsigned __int8 *)(v9 + 80);
  if (v10 <= v7) {
    unsigned int v12 = *(_DWORD *)(v6 + 84);
  }
  else {
    unsigned int v12 = *(_DWORD *)(v9 + 84);
  }
  uint64_t v13 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64) + v11;
  size_t v14 = (v13 & ~v11) + *(void *)(*(void *)(v8 - 8) + 64);
  BOOL v15 = a3 >= v12;
  unsigned int v16 = a3 - v12;
  if (v16 != 0 && v15)
  {
    if (v14 <= 3)
    {
      unsigned int v20 = ((v16 + ~(-1 << (8 * v14))) >> (8 * v14)) + 1;
      if (HIWORD(v20))
      {
        int v17 = 4;
      }
      else if (v20 >= 0x100)
      {
        int v17 = 2;
      }
      else
      {
        int v17 = v20 > 1;
      }
    }
    else
    {
      int v17 = 1;
    }
  }
  else
  {
    int v17 = 0;
  }
  if (v12 < a2)
  {
    unsigned int v18 = ~v12 + a2;
    if (v14 < 4)
    {
      int v19 = (v18 >> (8 * v14)) + 1;
      if (v14)
      {
        int v21 = v18 & ~(-1 << (8 * v14));
        bzero(a1, v14);
        if (v14 == 3)
        {
          *(_WORD *)a1 = v21;
          a1[2] = BYTE2(v21);
        }
        else if (v14 == 2)
        {
          *(_WORD *)a1 = v21;
        }
        else
        {
          *a1 = v21;
        }
      }
    }
    else
    {
      bzero(a1, v14);
      *(_DWORD *)a1 = v18;
      int v19 = 1;
    }
    switch(v17)
    {
      case 1:
        a1[v14] = v19;
        return;
      case 2:
        *(_WORD *)&a1[v14] = v19;
        return;
      case 3:
        goto LABEL_41;
      case 4:
        *(_DWORD *)&a1[v14] = v19;
        return;
      default:
        return;
    }
  }
  switch(v17)
  {
    case 1:
      a1[v14] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 2:
      *(_WORD *)&a1[v14] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 3:
LABEL_41:
      __break(1u);
      JUMPOUT(0x188273DA4);
    case 4:
      *(_DWORD *)&a1[v14] = 0;
      goto LABEL_23;
    default:
LABEL_23:
      if (a2)
      {
LABEL_24:
        if (v7 >= v10)
        {
          uint64_t v24 = *(void (**)(void))(v6 + 56);
          v24();
        }
        else
        {
          unint64_t v22 = (unint64_t)&a1[v13] & ~v11;
          uint64_t v23 = *(void (**)(unint64_t))(v9 + 56);
          v23(v22);
        }
      }
      return;
  }
}

uint64_t base witness table accessor for _AttributeBody in TuplePhase<A, B>()
{
  return swift_getWitnessTable();
}

uint64_t partial apply for closure #1 in TuplePhase.value.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return closure #1 in TuplePhase.value.getter(a1, a2, *(void *)(v3 + 16), *(void *)(v3 + 24), a3);
}

uint64_t specialized Sequence.first(where:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 64;
  uint64_t v6 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v7 = -1;
  if (v6 < 64) {
    uint64_t v7 = ~(-1 << v6);
  }
  unint64_t v8 = v7 & *(void *)(a1 + 64);
  int64_t v9 = (unint64_t)(v6 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v11 = 0;
  if (!v8) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v12 = __clz(__rbit64(v8));
  v8 &= v8 - 1;
  for (unint64_t i = v12 | (v11 << 6); ; unint64_t i = __clz(__rbit64(v15)) + (v11 << 6))
  {
    uint64_t v17 = *(void *)(*(void *)(a1 + 48) + 8 * i);
    outlined init with copy of NavigationDestinationPresentation(*(void *)(a1 + 56) + 96 * i, (uint64_t)v29 + 8);
    *(void *)&v29[0] = v17;
    long long v26 = v29[4];
    long long v27 = v29[5];
    char v28 = v30;
    long long v22 = v29[0];
    long long v23 = v29[1];
    long long v24 = v29[2];
    long long v25 = v29[3];
    if (v17 != a2)
    {
      uint64_t result = swift_release();
      long long v18 = v27;
      *(_OWORD *)(a3 + 64) = v26;
      *(_OWORD *)(a3 + 80) = v18;
      *(unsigned char *)(a3 + 96) = v28;
      long long v19 = v23;
      *(_OWORD *)a3 = v22;
      *(_OWORD *)(a3 + 16) = v19;
      long long v20 = v25;
      *(_OWORD *)(a3 + 32) = v24;
      *(_OWORD *)(a3 + 48) = v20;
      return result;
    }
    uint64_t result = outlined destroy of (key: Namespace.ID, value: NavigationDestinationPresentation)((uint64_t)&v22);
    if (v8) {
      goto LABEL_4;
    }
LABEL_5:
    int64_t v14 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v14 >= v9) {
      goto LABEL_25;
    }
    unint64_t v15 = *(void *)(v5 + 8 * v14);
    ++v11;
    if (!v15)
    {
      int64_t v11 = v14 + 1;
      if (v14 + 1 >= v9) {
        goto LABEL_25;
      }
      unint64_t v15 = *(void *)(v5 + 8 * v11);
      if (!v15)
      {
        int64_t v11 = v14 + 2;
        if (v14 + 2 >= v9) {
          goto LABEL_25;
        }
        unint64_t v15 = *(void *)(v5 + 8 * v11);
        if (!v15)
        {
          int64_t v11 = v14 + 3;
          if (v14 + 3 >= v9) {
            goto LABEL_25;
          }
          unint64_t v15 = *(void *)(v5 + 8 * v11);
          if (!v15) {
            break;
          }
        }
      }
    }
LABEL_20:
    unint64_t v8 = (v15 - 1) & v15;
  }
  int64_t v16 = v14 + 4;
  if (v16 >= v9)
  {
LABEL_25:
    uint64_t result = swift_release();
    *(_OWORD *)(a3 + 64) = 0u;
    *(_OWORD *)(a3 + 80) = 0u;
    *(_OWORD *)(a3 + 32) = 0u;
    *(_OWORD *)(a3 + 48) = 0u;
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
    *(unsigned char *)(a3 + 96) = -1;
    return result;
  }
  unint64_t v15 = *(void *)(v5 + 8 * v16);
  if (v15)
  {
    int64_t v11 = v16;
    goto LABEL_20;
  }
  while (1)
  {
    int64_t v11 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      break;
    }
    if (v11 >= v9) {
      goto LABEL_25;
    }
    unint64_t v15 = *(void *)(v5 + 8 * v11);
    ++v16;
    if (v15) {
      goto LABEL_20;
    }
  }
LABEL_27:
  __break(1u);
  return result;
}

void UINavigationController.updateRootHost<A>(root:environment:transaction:)(objc_class *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  id v7 = objc_msgSend(v3, sel_viewControllers);
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIViewController);
  unint64_t v8 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v8 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v30 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v30) {
      goto LABEL_3;
    }
LABEL_22:
    swift_bridgeObjectRelease();
    goto LABEL_23;
  }
  if (!*(void *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
    goto LABEL_22;
  }
LABEL_3:
  if ((v8 & 0xC000000000000001) != 0)
  {
    id v9 = (id)MEMORY[0x18C117680](0, v8);
  }
  else
  {
    if (!*(void *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
LABEL_28:
      __break(1u);
      return;
    }
    id v9 = *(id *)(v8 + 32);
  }
  unsigned int v10 = v9;
  swift_bridgeObjectRelease();
  type metadata accessor for UIHostingController();
  if (swift_dynamicCastClass())
  {
    specialized UIHostingController.host.getter();
    uint64_t v11 = specialized _UIHostingView.viewGraph.getter();
    swift_beginAccess();
    int v12 = *(unsigned __int8 *)(v11 + 128);
    id v13 = (id)specialized UIHostingController.host.getter();
    if (v12 != 1 || a3 == 0) {
      specialized _UIHostingView.rootView.setter((uint64_t)a1);
    }
    else {
      _UIHostingView.setRootView(_:transaction:)((uint64_t)a1);
    }

    specialized UIHostingController.host.getter();
    uint64_t v15 = specialized _UIHostingView.viewGraph.getter();
    swift_beginAccess();
    if (*(unsigned char *)(v15 + 128)) {
      goto LABEL_20;
    }
    uint64_t v16 = Transaction.animation.getter();
    swift_release();
    if (!v16) {
      goto LABEL_20;
    }
    objc_msgSend((id)specialized UIHostingController.host.getter(), sel_frame);
    if (v18 != 0.0 || v17 != 0.0) {
      goto LABEL_20;
    }
    id v19 = (id)specialized UIHostingController.host.getter();
    id v20 = objc_msgSend(v4, sel_view);
    if (v20)
    {
      int v21 = v20;
      objc_msgSend(v20, sel_bounds);
      double v23 = v22;
      double v25 = v24;
      double v27 = v26;
      double v29 = v28;

      objc_msgSend(v19, sel_setFrame_, v23, v25, v27, v29);
LABEL_20:

      return;
    }
    goto LABEL_28;
  }

LABEL_23:
  type metadata accessor for UIHostingController();
  id v31 = specialized UIHostingController.__allocating_init(rootView:)(a1);
  type metadata accessor for _ContiguousArrayStorage<Swift.AnyObject>();
  uint64_t v32 = swift_allocObject();
  *(_OWORD *)(v32 + 16) = xmmword_188351940;
  *(void *)(v32 + 32) = v31;
  specialized Array._endMutation()();
  id v33 = v31;
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v3, sel_setViewControllers_, isa);
}

uint64_t NavigationDestinationContent.init<A>(id:content:isDetail:transaction:environment:updateSeed:onDismiss:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t *a5@<X4>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>, uint64_t a9, uint64_t a10)
{
  outlined consume of EnvironmentValues?(*a5);
  *(_OWORD *)(a8 + 56) = 0u;
  *(_OWORD *)(a8 + 40) = 0u;
  *(void *)a8 = a1;
  *(unsigned char *)(a8 + 8) = a3;
  *(void *)(a8 + 16) = a6;
  *(void *)(a8 + 24) = a7;
  *(void *)(a8 + 32) = a4;
  uint64_t v17 = *(void *)(a9 - 8);
  unint64_t v18 = (*(unsigned __int8 *)(v17 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80);
  unint64_t v19 = (*(void *)(v17 + 64) + v18 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v20 = swift_allocObject();
  *(void *)(v20 + 16) = a9;
  *(void *)(v20 + 24) = a10;
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v17 + 32))(v20 + v18, a2, a9);
  *(void *)(v20 + v19) = a1;
  *(void *)(a8 + 72) = partial apply for closure #1 in NavigationDestinationContent.init<A>(id:content:isDetail:transaction:environment:updateSeed:onDismiss:);
  *(void *)(a8 + 80) = v20;
  return result;
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance BridgedPresentation.RootView()
{
  return static ModifiedContent<>._viewListCount(inputs:)();
}

uint64_t protocol witness for View.body.getter in conformance BridgedPresentation.RootView@<X0>(uint64_t a1@<X8>)
{
  char v2 = *(unsigned char *)(v1 + 8);
  *(void *)a1 = *(void *)v1;
  *(unsigned char *)(a1 + 8) = v2;
  return swift_retain();
}

uint64_t EnvironmentValues.isNavigationEnabled.getter()
{
  lazy protocol witness table accessor for type NavigationEnabledKey and conformance NavigationEnabledKey();
  EnvironmentValues.subscript.getter();
  return v1;
}

unint64_t lazy protocol witness table accessor for type NavigationEnabledKey and conformance NavigationEnabledKey()
{
  unint64_t result = lazy protocol witness table cache variable for type NavigationEnabledKey and conformance NavigationEnabledKey;
  if (!lazy protocol witness table cache variable for type NavigationEnabledKey and conformance NavigationEnabledKey)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NavigationEnabledKey and conformance NavigationEnabledKey);
  }
  return result;
}

BOOL protocol witness for static DerivedEnvironmentKey.value(in:) in conformance NavigationEnabledKey@<W0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  BOOL result = specialized static NavigationEnabledKey.value(in:)(a1);
  *a2 = result;
  return result;
}

uint64_t closure #1 in NavigationDestinationContent.init<A>(id:content:isDetail:transaction:environment:updateSeed:onDismiss:)(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v30 = a5;
  uint64_t v31 = a2;
  int v32 = a1;
  unint64_t v8 = lazy protocol witness table accessor for type Namespace.ID and conformance Namespace.ID();
  v39[0] = a4;
  v39[1] = MEMORY[0x1E4F41808];
  v39[2] = a5;
  _OWORD v39[3] = v8;
  uint64_t v9 = type metadata accessor for IDView();
  type metadata accessor for EnvironmentPropertyKey<InternalNavigationEnabledKey>(255, (unint64_t *)&lazy cache variable for type metadata for RelationshipModifier<String>, MEMORY[0x1E4FBB1A0], MEMORY[0x1E4FBB1B0], (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for RelationshipModifier);
  uint64_t v10 = type metadata accessor for ModifiedContent();
  type metadata accessor for EnvironmentPropertyKey<InternalNavigationEnabledKey>(255, &lazy cache variable for type metadata for StyleContextWriter<NoStyleContext>, MEMORY[0x1E4F3F9B0], MEMORY[0x1E4F3F9A8], MEMORY[0x1E4F40318]);
  uint64_t v29 = type metadata accessor for ModifiedContent();
  MEMORY[0x1F4188790](v29);
  v28[1] = (char *)v28 - v11;
  uint64_t v12 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v13);
  uint64_t v15 = (char *)v28 - v14;
  uint64_t v16 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v17);
  unint64_t v19 = (char *)v28 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v20);
  double v22 = (char *)v28 - v21;
  v39[0] = a3;
  View.id<A>(_:)();
  strcpy((char *)v39, "navigationLink");
  HIBYTE(v39[1]) = -18;
  uint64_t WitnessTable = swift_getWitnessTable();
  View.accessibilityLinkedGroup<A>(id:in:)((uint64_t)v39, a3, v9, MEMORY[0x1E4FBB1A0], WitnessTable);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v15, v9);
  if (v32)
  {
    uint64_t v35 = WitnessTable;
    BOOL v36 = &protocol witness table for RelationshipModifier<A>;
    uint64_t v24 = swift_getWitnessTable();
    View.styleContext<A>(_:)();
    unint64_t v25 = lazy protocol witness table accessor for type StyleContextWriter<NoStyleContext> and conformance StyleContextWriter<A>();
    uint64_t v33 = v24;
    unint64_t v34 = v25;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v19, v22, v10);
    uint64_t v37 = WitnessTable;
    uint64_t v38 = &protocol witness table for RelationshipModifier<A>;
  }
  swift_getWitnessTable();
  uint64_t v26 = AnyView.init<A>(_:)();
  (*(void (**)(char *, uint64_t))(v16 + 8))(v22, v10);
  return v26;
}

uint64_t protocol witness for static ViewInputPredicate.evaluate(inputs:) in conformance IsInNavigationV4Context(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for static ViewInputPredicate.evaluate(inputs:) in conformance IsInNavigationV4Context(a1, a2, a3, (void (*)(void))lazy protocol witness table accessor for type IsInNavigationV4Context and conformance IsInNavigationV4Context);
}

uint64_t protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance IsInNavigationV4Context(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance IsInNavigationV4Context(a1, a2, a3, a4, (void (*)(void))lazy protocol witness table accessor for type IsInNavigationV4Context and conformance IsInNavigationV4Context);
}

uint64_t protocol witness for static ViewInputPredicate.evaluate(inputs:) in conformance IsExtractingNavigationDestinations(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for static ViewInputPredicate.evaluate(inputs:) in conformance IsInNavigationV4Context(a1, a2, a3, (void (*)(void))lazy protocol witness table accessor for type IsExtractingNavigationDestinations and conformance IsExtractingNavigationDestinations);
}

uint64_t protocol witness for static ViewInputPredicate.evaluate(inputs:) in conformance IsInNavigationV4Context(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void))
{
  a4();
  PropertyList.subscript.getter();
  return v5;
}

uint64_t protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance IsExtractingNavigationDestinations(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance IsInNavigationV4Context(a1, a2, a3, a4, (void (*)(void))lazy protocol witness table accessor for type IsExtractingNavigationDestinations and conformance IsExtractingNavigationDestinations);
}

uint64_t protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance IsInNavigationV4Context(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(void))
{
  return PropertyList.subscript.setter();
}

uint64_t closure #2 in UIHostingController.coordinateListSelection(transitionCoordinator:isAnimated:)(uint64_t a1, uint64_t a2)
{
  type metadata accessor for (key: Namespace.ID, value: NavigationDestinationPresentation)?(0, &lazy cache variable for type metadata for IndexPath?, MEMORY[0x1E4F27DE8]);
  MEMORY[0x1F4188790](v3 - 8);
  unsigned __int8 v5 = (char *)&v9 - v4;
  uint64_t v6 = type metadata accessor for IndexPath();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56))(v5, 1, 1, v6);
  uint64_t v7 = a2 + OBJC_IVAR____TtC7SwiftUI30UpdateCoalescingCollectionView_pendingDeselectedItem;
  swift_beginAccess();
  outlined assign with take of IndexPath?((uint64_t)v5, v7);
  return swift_endAccess();
}

void __swiftcall UISplitViewController.columnBounds(forNavController:)(__C::CGRect_optional *__return_ptr retstr, UINavigationController *forNavController)
{
  uint64_t v3 = v2;
  id v6 = objc_msgSend(v2, sel_viewIfLoaded);
  CGFloat v7 = 0.0;
  if (!v6) {
    goto LABEL_23;
  }
  unint64_t v8 = v6;
  objc_msgSend(v6, sel_bounds);
  double v10 = v9;
  double v12 = v11;
  double v14 = v13;
  double v16 = v15;

  id v17 = objc_msgSend(v3, sel_traitCollection);
  id v18 = objc_msgSend(v17, sel_horizontalSizeClass);

  if (v18 != (id)1)
  {
    uint64_t v46 = 1;
    uint64_t v47 = 1;
    uint64_t v26 = swift_allocObject();
    *(void *)(v26 + 16) = 1;
    double v27 = specialized getter of primaryVC #1 in UISplitViewController.columnBounds(forNavController:)((void **)&v47, v3);
    if (v27
      && (double v28 = v27,
          type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UINavigationController), uint64_t v29 = forNavController, v30 = static NSObject.== infix(_:_:)(), v28, v29, (v30 & 1) != 0))
    {
      objc_msgSend(v3, sel_primaryColumnWidth, v46, v47);
      double v24 = v31;
    }
    else
    {
      int v32 = specialized getter of secondaryVC #1 in UISplitViewController.columnBounds(forNavController:)((void **)&v46, v3);
      if (v32
        && (uint64_t v33 = v32,
            type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UINavigationController), v34 = forNavController, char v35 = static NSObject.== infix(_:_:)(), v33, v34, (v35 & 1) != 0))
      {
        if (objc_msgSend(v3, sel_displayMode, v46, v47) != (id)1)
        {
          objc_msgSend(v3, sel_primaryColumnWidth);
          double v37 = v36 + 0.0;
          uint64_t v38 = getter of supplementaryVC #1 in UISplitViewController.columnBounds(forNavController:)(v26, v3);
          if (v38)
          {

            objc_msgSend(v3, sel_supplementaryColumnWidth);
            double v37 = v37 + v39;
          }
          double v14 = v14 - v37;
        }
        if (v14 > 0.0) {
          double v24 = v14;
        }
        else {
          double v24 = 0.0;
        }
      }
      else
      {
        uint64_t v40 = (UINavigationController *)getter of supplementaryVC #1 in UISplitViewController.columnBounds(forNavController:)(v26, v3);
        if (!v40 || (uint64_t v41 = v40, v40, v41 != forNavController))
        {
          outlined consume of SheetBridge<_ViewList_View, SheetPreference.Key>??((id)v46);
          outlined consume of SheetBridge<_ViewList_View, SheetPreference.Key>??((id)v47);
          swift_release();
LABEL_23:
          Swift::Bool v22 = 1;
          goto LABEL_24;
        }
        objc_msgSend(v3, sel_primaryColumnWidth, v46, v47);
        double v43 = v42;
        objc_msgSend(v3, sel_supplementaryColumnWidth);
        double v45 = v14 - (v43 + v44);
        if (v45 > 0.0) {
          double v24 = v45;
        }
        else {
          double v24 = 0.0;
        }
      }
      outlined consume of SheetBridge<_ViewList_View, SheetPreference.Key>??((id)v46);
    }
    outlined consume of SheetBridge<_ViewList_View, SheetPreference.Key>??((id)v47);
    swift_release();
    Swift::Bool v22 = 0;
    CGFloat v7 = v10;
    CGFloat v23 = v12;
    goto LABEL_30;
  }
  if (!objc_msgSend(v3, sel_style)) {
    goto LABEL_23;
  }
  id v19 = objc_msgSend(v3, sel_viewControllerForColumn_, 3);
  if (!v19) {
    goto LABEL_23;
  }
  uint64_t v20 = v19;
  self;
  uint64_t v21 = (UINavigationController *)swift_dynamicCastObjCClass();

  Swift::Bool v22 = 1;
  if (!v21)
  {
LABEL_24:
    CGFloat v23 = 0.0;
    double v24 = 0.0;
    CGFloat v25 = 0.0;
    goto LABEL_31;
  }
  CGFloat v23 = 0.0;
  double v24 = 0.0;
  CGFloat v25 = 0.0;
  if (v21 == forNavController)
  {
    Swift::Bool v22 = 0;
    CGFloat v7 = v10;
    CGFloat v23 = v12;
    double v24 = v14;
LABEL_30:
    CGFloat v25 = v16;
  }
LABEL_31:
  retstr->value.origin.CGFloat x = v7;
  retstr->value.origin.CGFloat y = v23;
  retstr->value.size.CGFloat width = v24;
  retstr->value.size.CGFloat height = v25;
  retstr->is_nil = v22;
}

void *specialized getter of primaryVC #1 in UISplitViewController.columnBounds(forNavController:)(void **a1, id a2)
{
  char v2 = *a1;
  uint64_t v3 = *a1;
  if (*a1 == (void *)1)
  {
    if (objc_msgSend(a2, sel_style)
      && (id v6 = objc_msgSend(a2, sel_viewControllerForColumn_, 0)) != 0)
    {
      CGFloat v7 = v6;
      self;
      uint64_t v3 = (void *)swift_dynamicCastObjCClass();
      if (!v3) {
    }
      }
    else
    {
      uint64_t v3 = 0;
    }
    swift_beginAccess();
    unint64_t v8 = *a1;
    *a1 = v3;
    id v9 = v3;
    outlined consume of SheetBridge<_ViewList_View, SheetPreference.Key>??(v8);
  }
  outlined copy of SheetBridge<_ViewList_View, SheetPreference.Key>??(v2);
  return v3;
}

void *specialized getter of secondaryVC #1 in UISplitViewController.columnBounds(forNavController:)(void **a1, id a2)
{
  char v2 = *a1;
  uint64_t v3 = *a1;
  if (*a1 == (void *)1)
  {
    if (objc_msgSend(a2, sel_style)
      && (id v6 = objc_msgSend(a2, sel_viewControllerForColumn_, 2)) != 0)
    {
      CGFloat v7 = v6;
      self;
      uint64_t v3 = (void *)swift_dynamicCastObjCClass();
      if (!v3) {
    }
      }
    else
    {
      uint64_t v3 = 0;
    }
    swift_beginAccess();
    unint64_t v8 = *a1;
    *a1 = v3;
    id v9 = v3;
    outlined consume of SheetBridge<_ViewList_View, SheetPreference.Key>??(v8);
  }
  outlined copy of SheetBridge<_ViewList_View, SheetPreference.Key>??(v2);
  return v3;
}

void *getter of supplementaryVC #1 in UISplitViewController.columnBounds(forNavController:)(uint64_t a1, id a2)
{
  uint64_t v3 = (void **)(a1 + 16);
  char v2 = *(void **)(a1 + 16);
  uint64_t v4 = v2;
  if (v2 == (void *)1)
  {
    if (objc_msgSend(a2, sel_style)
      && (id v6 = objc_msgSend(a2, sel_viewControllerForColumn_, 1)) != 0)
    {
      CGFloat v7 = v6;
      self;
      uint64_t v4 = (void *)swift_dynamicCastObjCClass();
      if (!v4) {
    }
      }
    else
    {
      uint64_t v4 = 0;
    }
    swift_beginAccess();
    unint64_t v8 = *v3;
    *uint64_t v3 = v4;
    id v9 = v4;
    outlined consume of SheetBridge<_ViewList_View, SheetPreference.Key>??(v8);
  }
  outlined copy of SheetBridge<_ViewList_View, SheetPreference.Key>??(v2);
  return v4;
}

void _WKStoryboardContent.body.getter()
{
}

uint64_t associated type witness table accessor for View.Body : View in _WKStoryboardContent()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t destroy for _WKStoryboardContent(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  if (*(void *)(a1 + 40))
  {
    return __swift_destroy_boxed_opaque_existential_1(a1 + 16);
  }
  return result;
}

uint64_t initializeWithCopy for _WKStoryboardContent(uint64_t a1, void *a2)
{
  uint64_t v3 = a2[1];
  *(void *)a1 = *a2;
  *(void *)(a1 + 8) = v3;
  uint64_t v4 = a2 + 2;
  uint64_t v5 = a2[5];
  swift_bridgeObjectRetain();
  if (v5)
  {
    *(void *)(a1 + 40) = v5;
    (**(void (***)(uint64_t, _OWORD *, uint64_t))(v5 - 8))(a1 + 16, v4, v5);
  }
  else
  {
    long long v6 = v4[1];
    *(_OWORD *)(a1 + 16) = *v4;
    *(_OWORD *)(a1 + 32) = v6;
  }
  return a1;
}

uint64_t assignWithCopy for _WKStoryboardContent(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(a2 + 40);
  if (!*(void *)(a1 + 40))
  {
    if (v4)
    {
      *(void *)(a1 + 40) = v4;
      (**(void (***)(uint64_t, uint64_t))(v4 - 8))(a1 + 16, a2 + 16);
      return a1;
    }
LABEL_7:
    long long v5 = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
    *(_OWORD *)(a1 + 32) = v5;
    return a1;
  }
  if (!v4)
  {
    __swift_destroy_boxed_opaque_existential_1(a1 + 16);
    goto LABEL_7;
  }
  __swift_assign_boxed_opaque_existential_0((uint64_t *)(a1 + 16), (uint64_t *)(a2 + 16));
  return a1;
}

uint64_t assignWithTake for _WKStoryboardContent(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  if (*(void *)(a1 + 40)) {
    __swift_destroy_boxed_opaque_existential_1(a1 + 16);
  }
  long long v5 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v5;
  return a1;
}

ValueMetadata *type metadata accessor for _WKStoryboardContent()
{
  return &type metadata for _WKStoryboardContent;
}

uint64_t initializeWithCopy for PushTarget(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_unknownObjectWeakCopyInit();
  *(unsigned char *)(result + 8) = *(unsigned char *)(a2 + 8);
  *(void *)(result + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(result + 24) = *(unsigned char *)(a2 + 24);
  return result;
}

uint64_t assignWithCopy for PushTarget(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_unknownObjectWeakCopyAssign();
  *(unsigned char *)(result + 8) = *(unsigned char *)(a2 + 8);
  uint64_t v4 = *(void *)(a2 + 16);
  *(unsigned char *)(result + 24) = *(unsigned char *)(a2 + 24);
  *(void *)(result + 16) = v4;
  return result;
}

uint64_t initializeWithTake for PushTarget(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_unknownObjectWeakTakeInit();
  *(unsigned char *)(result + 8) = *(unsigned char *)(a2 + 8);
  *(void *)(result + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(result + 24) = *(unsigned char *)(a2 + 24);
  return result;
}

uint64_t assignWithTake for PushTarget(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_unknownObjectWeakTakeAssign();
  *(unsigned char *)(result + 8) = *(unsigned char *)(a2 + 8);
  *(void *)(result + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(result + 24) = *(unsigned char *)(a2 + 24);
  return result;
}

ValueMetadata *type metadata accessor for PushTarget()
{
  return &type metadata for PushTarget;
}

uint64_t destroy for NavigationDestinationPresentation(uint64_t a1)
{
  unsigned int v2 = *(unsigned __int8 *)(a1 + 88);
  if (v2 >= 2) {
    unsigned int v2 = *(_DWORD *)a1 + 2;
  }
  if (v2 != 1)
  {
    swift_release();
    swift_release();
    if (*(void *)(a1 + 64)) {
      __swift_destroy_boxed_opaque_existential_1(a1 + 40);
    }
  }

  return swift_release();
}

uint64_t initializeWithCopy for NavigationDestinationPresentation(uint64_t a1, uint64_t a2)
{
  unsigned int v4 = *(unsigned __int8 *)(a2 + 88);
  if (v4 >= 2) {
    unsigned int v4 = *(_DWORD *)a2 + 2;
  }
  *(void *)a1 = *(void *)a2;
  if (v4 == 1)
  {
    *(void *)(a1 + 8) = *(void *)(a2 + 8);
  }
  else
  {
    *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
    uint64_t v5 = *(void *)(a2 + 24);
    *(void *)(a1 + 16) = *(void *)(a2 + 16);
    *(void *)(a1 + 24) = v5;
    *(void *)(a1 + 32) = *(void *)(a2 + 32);
    long long v6 = (_OWORD *)(a2 + 40);
    uint64_t v7 = *(void *)(a2 + 64);
    swift_retain();
    swift_retain();
    if (v7)
    {
      *(void *)(a1 + 64) = v7;
      (**(void (***)(uint64_t, uint64_t, uint64_t))(v7 - 8))(a1 + 40, a2 + 40, v7);
    }
    else
    {
      long long v8 = *(_OWORD *)(a2 + 56);
      *(_OWORD *)(a1 + 40) = *v6;
      *(_OWORD *)(a1 + 56) = v8;
    }
    LOBYTE(v4) = 0;
    uint64_t v9 = *(void *)(a2 + 80);
    *(void *)(a1 + 72) = *(void *)(a2 + 72);
    *(void *)(a1 + 80) = v9;
  }
  *(unsigned char *)(a1 + 88) = v4;
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for NavigationDestinationPresentation(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    unsigned int v4 = *(unsigned __int8 *)(a1 + 88);
    if (v4 >= 2) {
      unsigned int v4 = *(_DWORD *)a1 + 2;
    }
    if (v4 != 1)
    {
      swift_release();
      swift_release();
      if (*(void *)(a1 + 64)) {
        __swift_destroy_boxed_opaque_existential_1(a1 + 40);
      }
    }
    swift_release();
    unsigned int v5 = *(unsigned __int8 *)(a2 + 88);
    if (v5 >= 2) {
      unsigned int v5 = *(_DWORD *)a2 + 2;
    }
    *(void *)a1 = *(void *)a2;
    if (v5 == 1)
    {
      *(void *)(a1 + 8) = *(void *)(a2 + 8);
    }
    else
    {
      *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
      uint64_t v6 = *(void *)(a2 + 24);
      *(void *)(a1 + 16) = *(void *)(a2 + 16);
      *(void *)(a1 + 24) = v6;
      *(void *)(a1 + 32) = *(void *)(a2 + 32);
      uint64_t v7 = *(void *)(a2 + 64);
      swift_retain();
      swift_retain();
      if (v7)
      {
        *(void *)(a1 + 64) = v7;
        (**(void (***)(uint64_t, uint64_t, uint64_t))(v7 - 8))(a1 + 40, a2 + 40, v7);
      }
      else
      {
        long long v8 = *(_OWORD *)(a2 + 56);
        *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
        *(_OWORD *)(a1 + 56) = v8;
      }
      LOBYTE(v5) = 0;
      uint64_t v9 = *(void *)(a2 + 80);
      *(void *)(a1 + 72) = *(void *)(a2 + 72);
      *(void *)(a1 + 80) = v9;
    }
    *(unsigned char *)(a1 + 88) = v5;
    swift_retain();
  }
  return a1;
}

uint64_t assignWithTake for NavigationDestinationPresentation(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    unsigned int v4 = *(unsigned __int8 *)(a1 + 88);
    if (v4 >= 2) {
      unsigned int v4 = *(_DWORD *)a1 + 2;
    }
    if (v4 != 1)
    {
      swift_release();
      swift_release();
      if (*(void *)(a1 + 64)) {
        __swift_destroy_boxed_opaque_existential_1(a1 + 40);
      }
    }
    swift_release();
    unsigned int v5 = *(unsigned __int8 *)(a2 + 88);
    if (v5 >= 2) {
      unsigned int v5 = *(_DWORD *)a2 + 2;
    }
    if (v5 == 1)
    {
      *(_OWORD *)a1 = *(_OWORD *)a2;
    }
    else
    {
      LOBYTE(v5) = 0;
      long long v6 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
      *(_OWORD *)(a1 + 48) = v6;
      *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
      *(void *)(a1 + 80) = *(void *)(a2 + 80);
      long long v7 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v7;
    }
    *(unsigned char *)(a1 + 88) = v5;
  }
  return a1;
}

uint64_t storeEnumTagSinglePayload for NavigationDestinationPresentation(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_OWORD *)(result + 73) = 0u;
    *(_OWORD *)(result + 48) = 0u;
    *(_OWORD *)(result + 64) = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_OWORD *)(result + 32) = 0u;
    *(_OWORD *)uint64_t result = 0u;
    *(_DWORD *)uint64_t result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 89) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 89) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 88) = -(char)a2;
    }
  }
  return result;
}

uint64_t getEnumTag for NavigationDestinationPresentation(uint64_t a1)
{
  uint64_t result = *(unsigned __int8 *)(a1 + 88);
  if (result >= 2) {
    return (*(_DWORD *)a1 + 2);
  }
  return result;
}

uint64_t destructiveInjectEnumTag for NavigationDestinationPresentation(uint64_t result, unsigned int a2)
{
  if (a2 > 1)
  {
    unsigned int v2 = a2 - 2;
    *(void *)(result + 80) = 0;
    *(_OWORD *)(result + 48) = 0u;
    *(_OWORD *)(result + 64) = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_OWORD *)(result + 32) = 0u;
    *(_OWORD *)uint64_t result = 0u;
    LOBYTE(a2) = 2;
    *(_DWORD *)uint64_t result = v2;
  }
  *(unsigned char *)(result + 88) = a2;
  return result;
}

void destroy for BridgedPresentation(void *a1)
{
  swift_release();
  swift_release();
  if (a1[8]) {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)(a1 + 5));
  }
  swift_release();
  uint64_t v2 = a1[12];
  if ((~v2 & 0xF000000000000007) != 0)
  {
    uint64_t v3 = (void *)a1[11];
    outlined consume of BridgedPresentation.ContentHost(v3, v2);
  }
}

uint64_t initializeWithCopy for BridgedPresentation(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  unsigned int v5 = (_OWORD *)(a2 + 40);
  uint64_t v6 = *(void *)(a2 + 64);
  swift_retain();
  swift_retain();
  if (v6)
  {
    *(void *)(a1 + 64) = v6;
    (**(void (***)(uint64_t, _OWORD *, uint64_t))(v6 - 8))(a1 + 40, v5, v6);
  }
  else
  {
    long long v7 = v5[1];
    *(_OWORD *)(a1 + 40) = *v5;
    *(_OWORD *)(a1 + 56) = v7;
  }
  uint64_t v8 = *(void *)(a2 + 80);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = v8;
  uint64_t v9 = (void **)(a2 + 88);
  uint64_t v10 = *(void *)(a2 + 96);
  swift_retain();
  if ((~v10 & 0xF000000000000007) != 0)
  {
    double v11 = *v9;
    outlined copy of BridgedPresentation.ContentHost(v11, v10);
    *(void *)(a1 + 88) = v11;
    *(void *)(a1 + 96) = v10;
  }
  else
  {
    *(_OWORD *)(a1 + 88) = *(_OWORD *)v9;
  }
  return a1;
}

uint64_t assignWithCopy for BridgedPresentation(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  swift_retain();
  swift_release();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_retain();
  swift_release();
  uint64_t v5 = *(void *)(a2 + 64);
  if (*(void *)(a1 + 64))
  {
    if (v5)
    {
      __swift_assign_boxed_opaque_existential_0((uint64_t *)(a1 + 40), (uint64_t *)(a2 + 40));
      goto LABEL_8;
    }
    __swift_destroy_boxed_opaque_existential_1(a1 + 40);
  }
  else if (v5)
  {
    *(void *)(a1 + 64) = v5;
    (**(void (***)(uint64_t, uint64_t))(v5 - 8))(a1 + 40, a2 + 40);
    goto LABEL_8;
  }
  long long v6 = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = v6;
LABEL_8:
  uint64_t v7 = *(void *)(a2 + 80);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = v7;
  swift_retain();
  swift_release();
  uint64_t v8 = (void **)(a2 + 88);
  uint64_t v9 = *(void *)(a2 + 96);
  unint64_t v10 = v9 & 0xF000000000000007;
  if ((~*(void *)(a1 + 96) & 0xF000000000000007) != 0)
  {
    if (v10 != 0xF000000000000007)
    {
      double v12 = *v8;
      outlined copy of BridgedPresentation.ContentHost(*v8, v9);
      double v13 = *(void **)(a1 + 88);
      uint64_t v14 = *(void *)(a1 + 96);
      *(void *)(a1 + 88) = v12;
      *(void *)(a1 + 96) = v9;
      outlined consume of BridgedPresentation.ContentHost(v13, v14);
      return a1;
    }
    outlined destroy of BridgedPresentation.ContentHost(a1 + 88);
    goto LABEL_13;
  }
  if (v10 == 0xF000000000000007)
  {
LABEL_13:
    *(_OWORD *)(a1 + 88) = *(_OWORD *)v8;
    return a1;
  }
  double v11 = *v8;
  outlined copy of BridgedPresentation.ContentHost(*v8, v9);
  *(void *)(a1 + 88) = v11;
  *(void *)(a1 + 96) = v9;
  return a1;
}

uint64_t outlined destroy of BridgedPresentation.ContentHost(uint64_t a1)
{
  return a1;
}

uint64_t assignWithTake for BridgedPresentation(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  swift_release();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_release();
  if (*(void *)(a1 + 64)) {
    __swift_destroy_boxed_opaque_existential_1(a1 + 40);
  }
  long long v4 = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = v4;
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  swift_release();
  uint64_t v5 = (void *)(a2 + 88);
  uint64_t v6 = *(void *)(a1 + 96);
  if ((~v6 & 0xF000000000000007) != 0)
  {
    uint64_t v7 = *(void *)(a2 + 96);
    if ((~v7 & 0xF000000000000007) != 0)
    {
      uint64_t v8 = *(void **)(a1 + 88);
      *(void *)(a1 + 88) = *v5;
      *(void *)(a1 + 96) = v7;
      outlined consume of BridgedPresentation.ContentHost(v8, v6);
      return a1;
    }
    outlined destroy of BridgedPresentation.ContentHost(a1 + 88);
  }
  *(_OWORD *)(a1 + 88) = *(_OWORD *)v5;
  return a1;
}

ValueMetadata *type metadata accessor for BridgedPresentation()
{
  return &type metadata for BridgedPresentation;
}

void *initializeBufferWithCopyOfBuffer for BridgedPresentation.ContentHost(void *a1, uint64_t a2)
{
  uint64_t v3 = *(void **)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  outlined copy of BridgedPresentation.ContentHost(*(void **)a2, v4);
  *a1 = v3;
  a1[1] = v4;
  return a1;
}

void destroy for BridgedPresentation.ContentHost(uint64_t a1)
{
}

uint64_t assignWithCopy for BridgedPresentation.ContentHost(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  outlined copy of BridgedPresentation.ContentHost(*(void **)a2, v4);
  uint64_t v5 = *(void **)a1;
  uint64_t v6 = *(void *)(a1 + 8);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  outlined consume of BridgedPresentation.ContentHost(v5, v6);
  return a1;
}

uint64_t assignWithTake for BridgedPresentation.ContentHost(uint64_t a1, _OWORD *a2)
{
  uint64_t v3 = *(void **)a1;
  uint64_t v4 = *(void *)(a1 + 8);
  *(_OWORD *)a1 = *a2;
  outlined consume of BridgedPresentation.ContentHost(v3, v4);
  return a1;
}

ValueMetadata *type metadata accessor for BridgedPresentation.ContentHost()
{
  return &type metadata for BridgedPresentation.ContentHost;
}

void *type metadata accessor for NavigationEnabledKey()
{
  return &unk_1ED431960;
}

uint64_t specialized _NativeDictionary.filter(_:)(uint64_t isStackAllocationSafe)
{
  uint64_t v2 = isStackAllocationSafe;
  v9[1] = *MEMORY[0x1E4F143B8];
  char v3 = *(unsigned char *)(isStackAllocationSafe + 32);
  unint64_t v4 = (unint64_t)((1 << v3) + 63) >> 6;
  size_t v5 = 8 * v4;
  if ((v3 & 0x3Fu) <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x1F4188790](isStackAllocationSafe);
    bzero((char *)v9 - ((v5 + 15) & 0x3FFFFFFFFFFFFFF0), v5);
    uint64_t v6 = specialized closure #1 in _NativeDictionary.filter(_:)((uint64_t)v9 - ((v5 + 15) & 0x3FFFFFFFFFFFFFF0), v4, v2);
    if (v1) {
      swift_willThrow();
    }
    else {
      return v6;
    }
  }
  else
  {
    uint64_t v7 = (void *)swift_slowAlloc();
    bzero(v7, v5);
    uint64_t v2 = specialized closure #1 in _NativeDictionary.filter(_:)((uint64_t)v7, v4, v2);
    MEMORY[0x18C119C60](v7, -1, -1);
  }
  return v2;
}

uint64_t specialized static PushTarget.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = (void *)MEMORY[0x18C119DF0]();
  size_t v5 = (void *)MEMORY[0x18C119DF0](a2);
  uint64_t v6 = v5;
  if (!v4)
  {
    if (!v5)
    {
      outlined init with copy of PushTarget(a1, (uint64_t)v20);
      outlined init with copy of PushTarget(a2, (uint64_t)v19);
      goto LABEL_12;
    }

    goto LABEL_7;
  }

  if (!v6)
  {
LABEL_7:
    outlined init with copy of PushTarget(a1, (uint64_t)v20);
    outlined init with copy of PushTarget(a2, (uint64_t)v19);
    goto LABEL_8;
  }

  outlined init with copy of PushTarget(a1, (uint64_t)v20);
  outlined init with copy of PushTarget(a2, (uint64_t)v19);
  if (v4 != v6)
  {
LABEL_8:
    outlined destroy of PushTarget((uint64_t)v19);
    outlined destroy of PushTarget((uint64_t)v20);
    outlined init with copy of PushTarget(a1, (uint64_t)v16);
    outlined init with copy of PushTarget(a2, (uint64_t)v14);
LABEL_9:
    outlined destroy of PushTarget((uint64_t)v14);
    outlined destroy of PushTarget((uint64_t)v16);
    return 0;
  }
LABEL_12:
  int v8 = v20[8];
  outlined destroy of PushTarget((uint64_t)v20);
  int v9 = v19[8];
  outlined destroy of PushTarget((uint64_t)v19);
  outlined init with copy of PushTarget(a1, (uint64_t)v16);
  outlined init with copy of PushTarget(a2, (uint64_t)v14);
  if (v8 != v9) {
    goto LABEL_9;
  }
  uint64_t v10 = v17;
  char v11 = v18;
  outlined destroy of PushTarget((uint64_t)v16);
  uint64_t v12 = v14[2];
  unsigned int v13 = v15;
  outlined destroy of PushTarget((uint64_t)v14);
  if (v11) {
    return v13;
  }
  else {
    return (v10 == v12) & ~v13;
  }
}

uint64_t specialized static NavigationDestinationsKey.reduce(value:nextValue:)(uint64_t *a1, void (*a2)(uint64_t *__return_ptr))
{
  a2(&v6);
  uint64_t v3 = v6;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v6 = *a1;
  *a1 = 0x8000000000000000;
  specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(v3, (uint64_t)specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A, @in_guaranteed B) -> (@out A, @out B), 0, isUniquelyReferenced_nonNull_native, (uint64_t)&v6);
  *a1 = v6;

  return swift_bridgeObjectRelease();
}

BOOL specialized static NavigationEnabledKey.value(in:)(uint64_t a1)
{
  if (*(void *)(a1 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<InternalNavigationEnabledKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<InternalNavigationEnabledKey>, (uint64_t)&type metadata for InternalNavigationEnabledKey, (uint64_t)&protocol witness table for InternalNavigationEnabledKey, MEMORY[0x1E4F40930]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<InternalNavigationEnabledKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<InternalNavigationEnabledKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<InternalNavigationEnabledKey>, (uint64_t)&type metadata for InternalNavigationEnabledKey, (uint64_t)&protocol witness table for InternalNavigationEnabledKey, MEMORY[0x1E4F40930]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<InternalNavigationEnabledKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  return v2 == 1;
}

uint64_t sub_1882768C8()
{
  (*(void (**)(unint64_t))(*(void *)(*(void *)(v0 + 16) - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(void *)(*(void *)(v0 + 16) - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(*(void *)(v0 + 16) - 8) + 80)));

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in NavigationDestinationContent.init<A>(id:content:isDetail:transaction:environment:updateSeed:onDismiss:)(int a1)
{
  unint64_t v2 = (*(unsigned __int8 *)(*(void *)(*(void *)(v1 + 16) - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(*(void *)(v1 + 16) - 8) + 80);
  return closure #1 in NavigationDestinationContent.init<A>(id:content:isDetail:transaction:environment:updateSeed:onDismiss:)(a1, v1 + v2, *(void *)(v1+ ((*(void *)(*(void *)(*(void *)(v1 + 16) - 8) + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8)), *(void *)(v1 + 16), *(void *)(v1 + 24));
}

unint64_t lazy protocol witness table accessor for type StyleContextWriter<NoStyleContext> and conformance StyleContextWriter<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type StyleContextWriter<NoStyleContext> and conformance StyleContextWriter<A>;
  if (!lazy protocol witness table cache variable for type StyleContextWriter<NoStyleContext> and conformance StyleContextWriter<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<InternalNavigationEnabledKey>(255, &lazy cache variable for type metadata for StyleContextWriter<NoStyleContext>, MEMORY[0x1E4F3F9B0], MEMORY[0x1E4F3F9A8], MEMORY[0x1E4F40318]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StyleContextWriter<NoStyleContext> and conformance StyleContextWriter<A>);
  }
  return result;
}

uint64_t outlined destroy of (key: Namespace.ID, value: NavigationDestinationPresentation)?(uint64_t a1)
{
  type metadata accessor for (key: Namespace.ID, value: NavigationDestinationPresentation)?(0, (unint64_t *)&lazy cache variable for type metadata for (key: Namespace.ID, value: NavigationDestinationPresentation)?, (void (*)(uint64_t))type metadata accessor for (key: Namespace.ID, value: NavigationDestinationPresentation));
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t outlined destroy of (key: Namespace.ID, value: NavigationDestinationPresentation)(uint64_t a1)
{
  type metadata accessor for (key: Namespace.ID, value: NavigationDestinationPresentation)();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_188276B1C()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in UIHostingController.coordinateListSelection(transitionCoordinator:isAnimated:)(uint64_t a1)
{
  return closure #2 in UIHostingController.coordinateListSelection(transitionCoordinator:isAnimated:)(a1, *(void *)(v1 + 16));
}

unint64_t type metadata accessor for UIViewControllerProvider()
{
  unint64_t result = lazy cache variable for type metadata for UIViewControllerProvider;
  if (!lazy cache variable for type metadata for UIViewControllerProvider)
  {
    unint64_t result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for UIViewControllerProvider);
  }
  return result;
}

void type metadata accessor for (key: Namespace.ID, value: NavigationDestinationPresentation)?(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = type metadata accessor for Optional();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t sub_188276C04()
{
  uint64_t v1 = *(void **)(v0 + 16);
  if (v1 != (void *)1) {

  }
  return swift_deallocObject();
}

ValueMetadata *type metadata accessor for InternalNavigationEnabledKey()
{
  return &type metadata for InternalNavigationEnabledKey;
}

ValueMetadata *type metadata accessor for IsInNavigationV4Context()
{
  return &type metadata for IsInNavigationV4Context;
}

ValueMetadata *type metadata accessor for IsExtractingNavigationDestinations()
{
  return &type metadata for IsExtractingNavigationDestinations;
}

ValueMetadata *type metadata accessor for NavigationDestinationsKey()
{
  return &type metadata for NavigationDestinationsKey;
}

uint64_t destroy for NavigationDestinationContent(uint64_t a1)
{
  swift_release();
  swift_release();
  if (*(void *)(a1 + 64)) {
    __swift_destroy_boxed_opaque_existential_1(a1 + 40);
  }

  return swift_release();
}

uint64_t initializeWithCopy for NavigationDestinationContent(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  uint64_t v5 = (_OWORD *)(a2 + 40);
  uint64_t v6 = *(void *)(a2 + 64);
  swift_retain();
  swift_retain();
  if (v6)
  {
    *(void *)(a1 + 64) = v6;
    (**(void (***)(uint64_t, _OWORD *, uint64_t))(v6 - 8))(a1 + 40, v5, v6);
  }
  else
  {
    long long v7 = v5[1];
    *(_OWORD *)(a1 + 40) = *v5;
    *(_OWORD *)(a1 + 56) = v7;
  }
  uint64_t v8 = *(void *)(a2 + 80);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = v8;
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for NavigationDestinationContent(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  swift_retain();
  swift_release();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_retain();
  swift_release();
  uint64_t v5 = *(void *)(a2 + 64);
  if (!*(void *)(a1 + 64))
  {
    if (v5)
    {
      *(void *)(a1 + 64) = v5;
      (**(void (***)(uint64_t, uint64_t))(v5 - 8))(a1 + 40, a2 + 40);
      goto LABEL_8;
    }
LABEL_7:
    long long v6 = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
    *(_OWORD *)(a1 + 56) = v6;
    goto LABEL_8;
  }
  if (!v5)
  {
    __swift_destroy_boxed_opaque_existential_1(a1 + 40);
    goto LABEL_7;
  }
  __swift_assign_boxed_opaque_existential_0((uint64_t *)(a1 + 40), (uint64_t *)(a2 + 40));
LABEL_8:
  uint64_t v7 = *(void *)(a2 + 80);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = v7;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for NavigationDestinationContent(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  swift_release();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_release();
  if (*(void *)(a1 + 64)) {
    __swift_destroy_boxed_opaque_existential_1(a1 + 40);
  }
  long long v4 = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = v4;
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for NavigationDestinationContent(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 88)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for NavigationDestinationContent(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 88) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 16) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 88) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for NavigationDestinationContent()
{
  return &type metadata for NavigationDestinationContent;
}

ValueMetadata *type metadata accessor for BridgedPresentation.RootView()
{
  return &type metadata for BridgedPresentation.RootView;
}

unint64_t lazy protocol witness table accessor for type NavigationEnabled and conformance NavigationEnabled()
{
  unint64_t result = lazy protocol witness table cache variable for type NavigationEnabled and conformance NavigationEnabled;
  if (!lazy protocol witness table cache variable for type NavigationEnabled and conformance NavigationEnabled)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NavigationEnabled and conformance NavigationEnabled);
  }
  return result;
}

_UNKNOWN **base witness table accessor for _GraphInputsModifier in IsExtractingNavigationDestinations()
{
  return &protocol witness table for IsExtractingNavigationDestinations;
}

_UNKNOWN **base witness table accessor for _GraphInputsModifier in IsInNavigationV4Context()
{
  return &protocol witness table for IsInNavigationV4Context;
}

uint64_t associated type witness table accessor for View.Body : View in BridgedPresentation.RootView()
{
  return swift_getOpaqueTypeConformance2();
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<AnyView, NavigationColumnModifier> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<AnyView, NavigationColumnModifier> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<AnyView, NavigationColumnModifier> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for EnvironmentPropertyKey<InternalNavigationEnabledKey>(255, &lazy cache variable for type metadata for ModifiedContent<AnyView, NavigationColumnModifier>, MEMORY[0x1E4F41618], (uint64_t)&type metadata for NavigationColumnModifier, MEMORY[0x1E4F3FBA0]);
    lazy protocol witness table accessor for type NavigationColumnModifier and conformance NavigationColumnModifier();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<AnyView, NavigationColumnModifier> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t AccessibilityContainerModifier.updatedAttachment(for:nodes:atIndex:)(uint64_t *a1, unint64_t a2)
{
  void (*v7)(uint64_t *__return_ptr, uint64_t *, unint64_t);
  uint64_t result;
  id v9;
  void *v10;
  void *v11;
  void *v12;
  char *v13;
  void *v14;
  void *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t vars8;

  uint64_t v4 = *a1;
  char v5 = *((unsigned char *)a1 + 8);
  uint64_t v6 = *v2;
  if (a2 >> 62)
  {
    swift_bridgeObjectRetain();
    char v18 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v18 != 1) {
      goto LABEL_9;
    }
  }
  else if (*(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10) != 1)
  {
LABEL_9:
    return AccessibilityAttachment.init()();
  }
  id v19 = v4;
  uint64_t v20 = v5;
  uint64_t v7 = *(void (**)(uint64_t *__return_ptr, uint64_t *, unint64_t))(*(void *)v6 + 120);
  swift_retain();
  v7(&v21, &v19, a2);
  unint64_t result = swift_release();
  if ((v21 & 0x40) != 0) {
    goto LABEL_9;
  }
  if ((a2 & 0xC000000000000001) != 0)
  {
    int v9 = (id)MEMORY[0x18C117680](0, a2);
  }
  else
  {
    if (!*(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      return result;
    }
    int v9 = *(id *)(a2 + 32);
  }
  uint64_t v10 = v9;
  AccessibilityNode.platformElement.getter();
  uint64_t v12 = v11;

  if (v12)
  {

    goto LABEL_9;
  }
  if ((a2 & 0xC000000000000001) != 0)
  {
    swift_retain();
    unsigned int v13 = (char *)MEMORY[0x18C117680](0, a2);
  }
  else
  {
    uint64_t v14 = *(void **)(a2 + 32);
    swift_retain();
    unsigned int v13 = v14;
  }
  unsigned __int8 v15 = v13;
  double v16 = &v13[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_children];
  swift_beginAccess();
  uint64_t v17 = *(void *)v16;
  swift_bridgeObjectRetain();

  (*(void (**)(uint64_t))(*(void *)v6 + 88))(v17);
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t static AccessibilityContainerModifier.makeAccessibilityViewModifier(modifier:inputs:body:)(uint64_t a1, uint64_t *a2, void (*a3)(uint64_t, uint64_t *))
{
  int v4 = *((_DWORD *)a2 + 2);
  uint64_t v5 = a2[2];
  int v6 = *((_DWORD *)a2 + 8);
  uint64_t v7 = a2[5];
  uint64_t v8 = a2[6];
  int v9 = *((_DWORD *)a2 + 20);
  unsigned int v10 = *((_DWORD *)a2 + 9) & 0xFFFFFFBF | (((*((_DWORD *)a2 + 9) >> 5) & 1) << 6);
  uint64_t v13 = *a2;
  int v14 = v4;
  uint64_t v15 = v5;
  uint64_t v16 = a2[3];
  int v17 = v6;
  unsigned int v18 = v10;
  uint64_t v19 = v7;
  uint64_t v20 = v8;
  long long v21 = *(_OWORD *)(a2 + 7);
  uint64_t v22 = a2[9];
  int v23 = v9;
  swift_retain_n();
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  uint64_t v11 = swift_bridgeObjectRetain_n();
  a3(v11, &v13);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  return swift_release_n();
}

uint64_t protocol witness for AccessibilityViewModifier.willCreateNode(for:) in conformance AccessibilityContainerModifier(uint64_t a1)
{
  uint64_t v3 = *(uint64_t (**)(uint64_t))(**(void **)v1 + 80);
  swift_retain();
  LOBYTE(a1) = v3(a1);
  swift_release();
  return a1 & 1;
}

uint64_t protocol witness for AccessibilityViewModifier.initialAttachment(for:) in conformance AccessibilityContainerModifier(uint64_t a1)
{
  uint64_t v3 = *(void (**)(uint64_t))(**(void **)v1 + 88);
  swift_retain();
  v3(a1);

  return swift_release();
}

void protocol witness for ViewModifier.body(content:) in conformance AccessibilityContainerModifier()
{
}

void static SearchSuggestionsPlacement.menu.getter(unsigned char *a1@<X8>)
{
  *a1 = 0;
}

void static SearchSuggestionsPlacement.content.getter(unsigned char *a1@<X8>)
{
  *a1 = 1;
}

uint64_t SearchSuggestionsPlacement.Set.rawValue.getter()
{
  return *(void *)v0;
}

uint64_t SearchSuggestionsPlacement.Set.rawValue.setter(uint64_t result)
{
  *uint64_t v1 = result;
  return result;
}

void static SearchSuggestionsPlacement.Set.menu.getter(void *a1@<X8>)
{
  *a1 = 1;
}

void static SearchSuggestionsPlacement.Set.content.getter(void *a1@<X8>)
{
  *a1 = 2;
}

SwiftUI::SearchSuggestionsPlacement::Set __swiftcall SearchSuggestionsPlacement.Set.init(rawValue:)(SwiftUI::SearchSuggestionsPlacement::Set rawValue)
{
  v1->rawuint64_t Value = rawValue.rawValue;
  return rawValue;
}

BOOL static SearchSuggestionsPlacement.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

unint64_t lazy protocol witness table accessor for type SearchSuggestionsPlacement.Set and conformance SearchSuggestionsPlacement.Set()
{
  unint64_t result = lazy protocol witness table cache variable for type SearchSuggestionsPlacement.Set and conformance SearchSuggestionsPlacement.Set;
  if (!lazy protocol witness table cache variable for type SearchSuggestionsPlacement.Set and conformance SearchSuggestionsPlacement.Set)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SearchSuggestionsPlacement.Set and conformance SearchSuggestionsPlacement.Set);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SearchSuggestionsPlacement.Set and conformance SearchSuggestionsPlacement.Set;
  if (!lazy protocol witness table cache variable for type SearchSuggestionsPlacement.Set and conformance SearchSuggestionsPlacement.Set)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SearchSuggestionsPlacement.Set and conformance SearchSuggestionsPlacement.Set);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SearchSuggestionsPlacement.Set and conformance SearchSuggestionsPlacement.Set;
  if (!lazy protocol witness table cache variable for type SearchSuggestionsPlacement.Set and conformance SearchSuggestionsPlacement.Set)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SearchSuggestionsPlacement.Set and conformance SearchSuggestionsPlacement.Set);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SearchSuggestionsPlacement.Set and conformance SearchSuggestionsPlacement.Set;
  if (!lazy protocol witness table cache variable for type SearchSuggestionsPlacement.Set and conformance SearchSuggestionsPlacement.Set)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SearchSuggestionsPlacement.Set and conformance SearchSuggestionsPlacement.Set);
  }
  return result;
}

ValueMetadata *type metadata accessor for SearchSuggestionsPlacement.Set()
{
  return &type metadata for SearchSuggestionsPlacement.Set;
}

unsigned char *storeEnumTagSinglePayload for SearchSuggestionsPlacement(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x188277B28);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type SearchSuggestionsPlacement.Role and conformance SearchSuggestionsPlacement.Role()
{
  unint64_t result = lazy protocol witness table cache variable for type SearchSuggestionsPlacement.Role and conformance SearchSuggestionsPlacement.Role;
  if (!lazy protocol witness table cache variable for type SearchSuggestionsPlacement.Role and conformance SearchSuggestionsPlacement.Role)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SearchSuggestionsPlacement.Role and conformance SearchSuggestionsPlacement.Role);
  }
  return result;
}

void closure #1 in FBSScene.updateClarityUIClientSettings(_:)(void *a1, void (*a2)(void *, uint64_t))
{
  swift_getObjectType();
  uint64_t v4 = swift_conformsToProtocol2();
  if (v4) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (v4) {
    unsigned int v6 = a1;
  }
  else {
    unsigned int v6 = 0;
  }
  if (v6)
  {
    id v7 = a1;
    a2(v6, v5);
  }
}

void NavigationBridge_PhoneTV.isContainedInDetailViewController.getter()
{
}

void sub_188277C78(void *a1)
{
  if (a1)
  {
    uint64_t v1 = a1;
    id v2 = objc_msgSend(a1, sel_viewControllers);
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIViewController);
    unint64_t v3 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    if (v3 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v4 = *(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    swift_bridgeObjectRelease();
    if (v4 < 2) {
      goto LABEL_17;
    }
    uint64_t v5 = UIKitNavigationBridge.host.getter();
    if (!v5) {
      goto LABEL_25;
    }
    unsigned int v6 = (void *)v5;
    id v7 = objc_msgSend(v1, sel_viewControllers);
    unint64_t v8 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    if (v8 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v9 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v9)
      {
LABEL_10:
        unint64_t v10 = v9 - 1;
        if (!__OFSUB__(v9, 1))
        {
          if ((v8 & 0xC000000000000001) == 0)
          {
            if ((v10 & 0x8000000000000000) != 0)
            {
              __break(1u);
            }
            else if (v10 < *(void *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10))
            {
              id v11 = *(id *)(v8 + 8 * v10 + 32);
              goto LABEL_15;
            }
            __break(1u);
LABEL_25:
            __break(1u);
LABEL_26:
            __break(1u);
            return;
          }
LABEL_22:
          id v11 = (id)MEMORY[0x18C117680](v10, v8);
LABEL_15:
          uint64_t v12 = v11;
          swift_bridgeObjectRelease();
          id v13 = objc_msgSend(v12, sel_view);

          if (v13)
          {
            objc_msgSend(v6, sel_isDescendantOfView_, v13);

            uint64_t v1 = v6;
LABEL_17:

            return;
          }
          goto LABEL_26;
        }
LABEL_21:
        __break(1u);
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v9 = *(void *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10);
      if (v9) {
        goto LABEL_10;
      }
    }
    unint64_t v10 = swift_bridgeObjectRelease();
    __break(1u);
    goto LABEL_21;
  }
}

unint64_t NavigationBridge_PhoneTV.updateContentHost(_:destination:pushTarget:animated:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  if (a2 < 0)
  {
    unint64_t result = MEMORY[0x18C119DF0](a4);
    if (!result) {
      return result;
    }
    id v16 = (id)result;
    id v17 = a1;
    unsigned int v18 = (char *)(id)(a2 & 0x7FFFFFFFFFFFFFFFLL);

    if (v16 != v17)
    {
LABEL_6:

      return 0;
    }
    id v19 = objc_msgSend(v17, sel_viewControllers);
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIViewController);
    unint64_t v20 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    if (v20 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v21 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v21)
      {
LABEL_14:
        unint64_t result = v21 - 1;
        if (__OFSUB__(v21, 1))
        {
          __break(1u);
        }
        else if ((v20 & 0xC000000000000001) == 0)
        {
          if ((result & 0x8000000000000000) != 0)
          {
            __break(1u);
          }
          else if (result < *(void *)((v20 & 0xFFFFFFFFFFFFFF8) + 0x10))
          {
            uint64_t v22 = *(void *)(v20 + 8 * result + 32);
            goto LABEL_19;
          }
          __break(1u);
          return result;
        }
        uint64_t v22 = MEMORY[0x18C117680](result, v20);
        swift_unknownObjectRelease();
LABEL_19:
        swift_bridgeObjectRelease();
        if ((char *)v22 == v18)
        {
          id v23 = v17;
          uint64_t v24 = specialized NavigationBridge_PhoneTV.content(for:targeting:)(a3, a1);

          CGFloat v25 = *(void **)&v18[direct field offset for UIHostingController.host];
          uint64_t v26 = (char *)v25 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v25) + 0x60);
          swift_beginAccess();
          *(void *)uint64_t v26 = v24;
          v26[8] = 0;
          swift_retain_n();
          double v27 = v25;
          swift_release();
          v29[0] = 1;
          type metadata accessor for UIHostingController<BridgedPresentation.RootView>(0, &lazy cache variable for type metadata for _UIHostingView<BridgedPresentation.RootView>, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))type metadata accessor for _UIHostingView);
          lazy protocol witness table accessor for type _UIHostingView<BridgedPresentation.RootView> and conformance _UIHostingView<A>();
          ViewRendererHost.invalidateProperties(_:mayDeferUpdate:)();

          swift_release_n();
          swift_beginAccess();
          outlined init with copy of BridgedPresentation?(v5 + 32, (uint64_t)v29);
          if (v30)
          {
            outlined assign with copy of NavigationDestinationContent(a3, (uint64_t)v29);
            UIKitNavigationBridge.activePresentation.setter((uint64_t)v29);

            swift_release();
            return 1;
          }
          outlined init with copy of BridgedPresentation?((uint64_t)v29, (uint64_t)v28);
          UIKitNavigationBridge.activePresentation.setter((uint64_t)v28);

          swift_release();
          goto LABEL_9;
        }
        goto LABEL_6;
      }
    }
    else
    {
      uint64_t v21 = *(void *)((v20 & 0xFFFFFFFFFFFFFF8) + 0x10);
      if (v21) {
        goto LABEL_14;
      }
    }

    swift_bridgeObjectRelease();
    return 0;
  }
  uint64_t v9 = a1;
  id v10 = objc_msgSend(v9, sel_navigationController);
  uint64_t v11 = specialized NavigationBridge_PhoneTV.content(for:targeting:)(a3, v10);

  uint64_t v12 = *(void **)&v9[direct field offset for UIHostingController.host];
  id v13 = (char *)v12 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v12) + 0x60);
  swift_beginAccess();
  *(void *)id v13 = v11;
  v13[8] = 0;
  swift_retain_n();
  int v14 = v12;
  swift_release();
  v29[0] = 1;
  type metadata accessor for UIHostingController<BridgedPresentation.RootView>(0, &lazy cache variable for type metadata for _UIHostingView<BridgedPresentation.RootView>, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))type metadata accessor for _UIHostingView);
  lazy protocol witness table accessor for type _UIHostingView<BridgedPresentation.RootView> and conformance _UIHostingView<A>();
  ViewRendererHost.invalidateProperties(_:mayDeferUpdate:)();

  swift_release_n();
  swift_beginAccess();
  outlined init with copy of BridgedPresentation?(v5 + 32, (uint64_t)v29);
  if (!v30)
  {
    outlined init with copy of BridgedPresentation?((uint64_t)v29, (uint64_t)v28);
    UIKitNavigationBridge.activePresentation.setter((uint64_t)v28);
    swift_release();
    outlined consume of BridgedPresentation.ContentHost(a1, a2);
LABEL_9:
    _ss11AnyHashableVSgWOhTm_3((uint64_t)v29, &lazy cache variable for type metadata for BridgedPresentation?, (uint64_t)&type metadata for BridgedPresentation);
    return 1;
  }
  outlined assign with copy of NavigationDestinationContent(a3, (uint64_t)v29);
  UIKitNavigationBridge.activePresentation.setter((uint64_t)v29);
  swift_release();
  outlined consume of BridgedPresentation.ContentHost(a1, a2);
  return 1;
}

void *NavigationBridge_PhoneTV.push(_:onto:animated:)(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4 = v3;
  unint64_t result = (void *)MEMORY[0x18C119DF0](a2);
  if (result)
  {
    uint64_t v9 = result;
    id v10 = result;
    uint64_t v11 = specialized NavigationBridge_PhoneTV.content(for:targeting:)(a1, v9);

    unsigned __int8 v12 = NavigationBridge_PhoneTV.shouldImplementSearch(at:)(*(void *)(a2 + 16), *(unsigned char *)(a2 + 24));
    type metadata accessor for UIHostingController<BridgedPresentation.RootView>(0, &lazy cache variable for type metadata for UIHostingController<BridgedPresentation.RootView>, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))type metadata accessor for UIHostingController);
    objc_allocWithZone(v13);
    swift_retain();
    if (v12) {
      char v14 = 2;
    }
    else {
      char v14 = 1;
    }
    id v15 = specialized UIHostingController.init(rootView:)(v11, v14);
    if (*(unsigned char *)(a2 + 8) == 1)
    {
      outlined init with copy of PushTarget(a2, (uint64_t)v19);
      uint64_t v16 = swift_allocObject();
      *(void *)(v16 + 16) = v10;
      *(void *)(v16 + 24) = v15;
      outlined init with take of PushTarget((uint64_t)v19, v16 + 32);
      *(void *)(v16 + 64) = v4;
      *(unsigned char *)(v16 + 72) = a3 & 1;
      id v17 = v10;
      id v18 = v15;
      swift_retain();
      UIKitNavigationBridge.withUpdatedNavigationBar<A>(pushTarget:nextVC:perform:)();
    }
    UIKitNavigationBridge.containingSplitViewController.getter();
  }
  return result;
}

void sub_18827865C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,unint64_t a22)
{
  swift_release();
  outlined init with copy of NavigationDestinationContent(v23, (uint64_t)&a10);
  a21 = v26;
  a22 = v25 | 0x8000000000000000;
  id v27 = (id)v25;
  id v28 = v26;
  UIKitNavigationBridge.activePresentation.setter((uint64_t)&a10);
  id v29 = objc_msgSend(self, sel_defaultCenter);
  if (one-time initialization token for willShowDetailNotification != -1) {
    swift_once();
  }
  uint64_t v30 = static DoubleColumnNavigationViewStyle.willShowDetailNotification;
  id v31 = v24;
  objc_msgSend(v29, sel_addObserver_selector_name_object_, v22, sel_detailChanged_, v30, v31);

  JUMPOUT(0x1882785A8);
}

void *NavigationBridge_PhoneTV.shouldImplementSearch(at:)(uint64_t a1, char a2)
{
  if (*(unsigned char *)(v2 + 152) != 1 || (a2 & 1) != 0) {
    return 0;
  }
  unint64_t result = (void *)MEMORY[0x18C119DF0](v2 + 24);
  if (result)
  {
    unsigned int v6 = result;
    id v7 = objc_msgSend(result, sel_splitViewController);

    if (v7)
    {
      id v8 = objc_msgSend(v7, sel_style);
      swift_beginAccess();
      if (*(void *)(v2 + 168))
      {
        type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.SearchFieldPlacementKey>();
        lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.SearchFieldPlacementKey> and conformance EnvironmentPropertyKey<A>();
        swift_retain_n();
        swift_retain_n();
        PropertyList.Tracker.value<A>(_:for:)();
        swift_release_n();
      }
      else
      {
        type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.SearchFieldPlacementKey>();
        lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.SearchFieldPlacementKey> and conformance EnvironmentPropertyKey<A>();
        swift_retain_n();
        PropertyList.subscript.getter();
      }
      swift_release_n();
      swift_endAccess();

      if (v8 == (id)2)
      {
        if (v9 == 2 || v9 == 3) {
          return (void *)(a1 == 1);
        }
      }
      else
      {
        if (v8 != (id)1) {
          return 0;
        }
        if (v9 == 2 || v9 == 3) {
          return (void *)!a1;
        }
      }
      if (v9 == 5) {
        return (void *)!a1;
      }
    }
    return 0;
  }
  __break(1u);
  return result;
}

id closure #1 in pushNavigationView #1 <A>() in NavigationBridge_PhoneTV.push(_:onto:animated:)(void *a1, id a2, char a3)
{
  id v6 = objc_msgSend(a2, sel_title);
  objc_msgSend(a1, sel_setTitle_, v6);

  return objc_msgSend(a1, sel_pushViewController_animated_, a2, a3 & 1);
}

void closure #1 in NavigationBridge_PhoneTV.push(_:onto:animated:)(void *a1, id a2, uint64_t a3, uint64_t *a4, char a5)
{
  uint64_t v9 = *a4;
  id v10 = objc_msgSend(a2, sel_title);
  objc_msgSend(a1, sel_setTitle_, v10);

  type metadata accessor for Data?(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>, MEMORY[0x1E4FBC838] + 8, MEMORY[0x1E4FBBE00]);
  uint64_t v11 = swift_allocObject();
  *(_OWORD *)(v11 + 16) = xmmword_188351940;
  *(void *)(v11 + 32) = a2;
  v19[0] = v11;
  specialized Array._endMutation()();
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIViewController);
  id v12 = a2;
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(a1, sel_setViewControllers_, isa, v19[0]);

  if ((*(unsigned char *)(a3 + 24) & 1) == 0)
  {
    uint64_t v14 = *(void *)(a3 + 16);
    id v15 = objc_msgSend(self, sel_sharedApplication);
    uint64_t v16 = swift_allocObject();
    swift_weakInit();
    uint64_t v17 = swift_allocObject();
    *(void *)(v17 + 16) = *(void *)(v9 + 376);
    *(void *)(v17 + 24) = *(void *)(v9 + 384);
    *(void *)(v17 + 32) = v16;
    *(void *)(v17 + 40) = v14;
    *(unsigned char *)(v17 + 48) = a5 & 1;
    v19[4] = partial apply for closure #1 in closure #1 in NavigationBridge_PhoneTV.push(_:onto:animated:);
    v19[5] = v17;
    v19[0] = MEMORY[0x1E4F143A8];
    v19[1] = 1107296256;
    void v19[2] = thunk for @escaping @callee_guaranteed () -> ();
    v19[3] = &block_descriptor_83;
    id v18 = _Block_copy(v19);
    swift_release();
    objc_msgSend(v15, sel__performBlockAfterCATransactionCommits_, v18);
    _Block_release(v18);
  }
}

uint64_t closure #1 in closure #1 in NavigationBridge_PhoneTV.push(_:onto:animated:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5)
{
  id v10 = (void *)swift_allocObject();
  v10[2] = a4;
  void v10[3] = a5;
  v10[4] = a1;
  v10[5] = a2;
  if (a3)
  {
    swift_retain();
    closure #1 in closure #1 in closure #1 in NavigationBridge_PhoneTV.push(_:onto:animated:)();
    return swift_release();
  }
  else
  {
    id v12 = self;
    uint64_t v13 = swift_allocObject();
    *(void *)(v13 + 16) = partial apply for closure #1 in closure #1 in closure #1 in NavigationBridge_PhoneTV.push(_:onto:animated:);
    *(void *)(v13 + 24) = v10;
    v16[4] = partial apply for thunk for @callee_guaranteed () -> ();
    v16[5] = v13;
    v16[0] = MEMORY[0x1E4F143A8];
    v16[1] = 1107296256;
    _OWORD v16[2] = thunk for @escaping @callee_guaranteed () -> ();
    long long v16[3] = &block_descriptor_24;
    uint64_t v14 = _Block_copy(v16);
    swift_retain();
    swift_retain();
    swift_retain();
    swift_release();
    objc_msgSend(v12, sel_performWithoutAnimation_, v14);
    _Block_release(v14);
    char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
    swift_release_n();
    uint64_t result = swift_release();
    if (isEscapingClosureAtFileLocation) {
      __break(1u);
    }
  }
  return result;
}

uint64_t closure #1 in closure #1 in closure #1 in NavigationBridge_PhoneTV.push(_:onto:animated:)()
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result) {
    UIKitNavigationBridge.containingSplitViewController.getter();
  }
  return result;
}

id closure #2 in NavigationBridge_PhoneTV.push(_:onto:animated:)(void *a1, void *a2, uint64_t a3)
{
  id v6 = objc_msgSend(a1, sel_navigationItem);
  id v7 = objc_msgSend(a2, sel_displayModeButtonItem);
  objc_msgSend(v6, sel_setLeftBarButtonItem_, v7);

  id v8 = objc_msgSend(a1, sel_navigationItem);
  objc_msgSend(v8, sel_setLeftItemsSupplementBackButton_, 1);

  return objc_msgSend(a2, sel_showDetailViewController_sender_, a3, 0);
}

Swift::Void __swiftcall NavigationBridge_PhoneTV.popDestination(animated:)(Swift::Bool animated)
{
  if (UIKitNavigationBridge.containingNavController.getter()) {
    UIKitNavigationBridge.containingVC.getter();
  }
}

unint64_t implicit closure #2 in NavigationBridge_PhoneTV.popDestination(animated:)()
{
  return 0xD000000000000026;
}

Swift::Void __swiftcall NavigationBridge_PhoneTV.popSelf(animated:)(Swift::Bool animated)
{
}

uint64_t sub_18827923C(uint64_t result)
{
  if (result) {
    UIKitNavigationBridge.containingSplitViewController.getter();
  }
  return result;
}

void NavigationBridge_PhoneTV.detailChanged(_:)(void *a1)
{
  uint64_t v2 = v1;
  id v3 = objc_msgSend(a1, sel_userInfo);
  uint64_t v4 = MEMORY[0x1E4FBC840];
  if (!v3)
  {
    long long v16 = 0u;
    long long v17 = 0u;
LABEL_11:
    _ss11AnyHashableVSgWOhTm_3((uint64_t)&v16, (unint64_t *)&lazy cache variable for type metadata for Any?, v4 + 8);
    id v9 = 0;
    goto LABEL_12;
  }
  uint64_t v5 = v3;
  uint64_t v6 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  *(void *)&long long v16 = 0xD000000000000017;
  *((void *)&v16 + 1) = 0x8000000188328A10;
  AnyHashable.init<A>(_:)();
  if (*(void *)(v6 + 16) && (unint64_t v7 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v14), (v8 & 1) != 0))
  {
    outlined init with copy of Any(*(void *)(v6 + 56) + 32 * v7, (uint64_t)&v16);
  }
  else
  {
    long long v16 = 0u;
    long long v17 = 0u;
  }
  swift_bridgeObjectRelease();
  outlined destroy of AnyHashable((uint64_t)v14);
  if (!*((void *)&v17 + 1)) {
    goto LABEL_11;
  }
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIViewController);
  if (swift_dynamicCast()) {
    id v9 = *(id *)&v14[0];
  }
  else {
    id v9 = 0;
  }
LABEL_12:
  swift_beginAccess();
  if (*(void *)(v2 + 48) && (uint64_t v10 = *(void *)(v2 + 128), (~v10 & 0xF000000000000007) != 0) && v10 < 0)
  {
    id v11 = *(id *)(v2 + 120);
    id v12 = v11;
    if (v9 && v11 == v9)
    {
    }
    else
    {
      id v13 = objc_msgSend(self, sel_defaultCenter);
      if (one-time initialization token for willShowDetailNotification != -1) {
        swift_once();
      }
      objc_msgSend(v13, sel_removeObserver_name_object_, v2, static DoubleColumnNavigationViewStyle.willShowDetailNotification, 0);

      uint64_t v15 = 0;
      memset(v14, 0, sizeof(v14));
      UIKitNavigationBridge.activePresentation.setter((uint64_t)v14);
    }
  }
  else
  {
  }
}

uint64_t @objc NavigationBridge_PhoneTV.detailChanged(_:)(uint64_t a1, uint64_t a2, void *a3)
{
  return @objc NavigationBridge_PhoneTV.detailChanged(_:)(a1, a2, a3, NavigationBridge_PhoneTV.detailChanged(_:));
}

Swift::Void __swiftcall NavigationBridge_PhoneTV.navigationChanged(_:)(NSNotification a1)
{
  if (![(objc_class *)a1.super.isa object])
  {
    __break(1u);
    return;
  }
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  outlined init with take of Any(&v17, v24);
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UINavigationController);
  swift_dynamicCast();
  uint64_t v2 = v26;
  uint64_t v3 = v1 + 32;
  swift_beginAccess();
  if (!*(void *)(v1 + 48)) {
    goto LABEL_6;
  }
  uint64_t v4 = *(void *)(v1 + 128);
  if ((~v4 & 0xF000000000000007) == 0) {
    goto LABEL_6;
  }
  uint64_t v5 = *(void **)(v1 + 120);
  if (v4 < 0)
  {
    char v8 = (void *)(v4 & 0x7FFFFFFFFFFFFFFFLL);
    outlined copy of BridgedPresentation.ContentHost(v5, v4);
    id v9 = objc_msgSend(v2, sel_viewControllers);
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIViewController);
    unint64_t v10 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    if (v2 == v5)
    {
      char v16 = specialized Sequence<>.contains(_:)((uint64_t)v8, v10);

      swift_bridgeObjectRelease();
      if (v16) {
        goto LABEL_6;
      }
    }
    else
    {
      char v11 = specialized Sequence<>.contains(_:)((uint64_t)v5, v10);

      swift_bridgeObjectRelease();
      if (v11) {
        goto LABEL_6;
      }
    }
  }
  else
  {
    outlined copy of BridgedPresentation.ContentHost(*(void **)(v1 + 120), *(void *)(v1 + 128));
    id v6 = objc_msgSend(v2, sel_viewControllers);
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIViewController);
    unint64_t v7 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    LOBYTE(v6) = specialized Sequence<>.contains(_:)((uint64_t)v5, v7);
    swift_bridgeObjectRelease();
    outlined consume of BridgedPresentation.ContentHost?(v5, v4);
    if (v6)
    {
LABEL_6:

      return;
    }
  }
  outlined init with copy of BridgedPresentation?(v3, (uint64_t)&v17);
  if ((void)v18)
  {
    v24[4] = v21;
    v24[5] = v22;
    uint64_t v25 = v23;
    v24[0] = v17;
    v24[1] = v18;
    v24[2] = v19;
    uint64_t v24[3] = v20;
    outlined init with copy of BridgedPresentation((uint64_t)v24, (uint64_t)&v17);
    uint64_t v12 = swift_allocObject();
    long long v13 = v22;
    *(_OWORD *)(v12 + 80) = v21;
    *(_OWORD *)(v12 + 96) = v13;
    *(void *)(v12 + 112) = v23;
    long long v14 = v18;
    *(_OWORD *)(v12 + 16) = v17;
    *(_OWORD *)(v12 + 32) = v14;
    long long v15 = v20;
    *(_OWORD *)(v12 + 48) = v19;
    *(_OWORD *)(v12 + 64) = v15;
    static Update.enqueueAction(_:)();

    swift_release();
    outlined destroy of BridgedPresentation((uint64_t)v24);
  }
  else
  {

    _ss11AnyHashableVSgWOhTm_3((uint64_t)&v17, &lazy cache variable for type metadata for BridgedPresentation?, (uint64_t)&type metadata for BridgedPresentation);
  }
}

uint64_t @objc NavigationBridge_PhoneTV.navigationChanged(_:)(uint64_t a1, uint64_t a2, void *a3)
{
  return @objc NavigationBridge_PhoneTV.detailChanged(_:)(a1, a2, a3, (void (*)(id))NavigationBridge_PhoneTV.navigationChanged(_:));
}

uint64_t @objc NavigationBridge_PhoneTV.detailChanged(_:)(uint64_t a1, uint64_t a2, void *a3, void (*a4)(id))
{
  id v5 = a3;
  swift_retain();
  a4(v5);

  return swift_release();
}

uint64_t specialized NavigationBridge_PhoneTV.content(for:targeting:)(uint64_t a1, void *a2)
{
  if (!a2) {
    return (*(uint64_t (**)(uint64_t))(a1 + 72))(1);
  }
  type metadata accessor for SplitViewNavigationController();
  uint64_t v4 = swift_dynamicCastClass();
  if (!v4) {
    return (*(uint64_t (**)(uint64_t))(a1 + 72))(1);
  }
  id v5 = (void *)v4;
  id v6 = *(uint64_t (**)(void))(a1 + 72);
  id v7 = a2;
  uint64_t v10 = v6(0);
  uint64_t v8 = (*(uint64_t (**)(uint64_t *, void, void))((*MEMORY[0x1E4FBC8C8] & *v5) + 0x188))(&v10, MEMORY[0x1E4F41618], MEMORY[0x1E4F41610]);
  swift_release();

  return v8;
}

uint64_t outlined init with copy of BridgedPresentation(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_188279B28()
{
  swift_release();
  swift_release();
  if (*(void *)(v0 + 80)) {
    __swift_destroy_boxed_opaque_existential_1(v0 + 56);
  }
  swift_release();
  uint64_t v1 = *(void *)(v0 + 112);
  if ((~v1 & 0xF000000000000007) != 0) {
    outlined consume of BridgedPresentation.ContentHost(*(void **)(v0 + 104), v1);
  }

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in NavigationBridge_PhoneTV.navigationChanged(_:)()
{
  return (*(uint64_t (**)(void))(v0 + 32))();
}

uint64_t sub_188279BC0()
{
  return swift_deallocObject();
}

id partial apply for closure #1 in pushNavigationView #1 <A>() in NavigationBridge_PhoneTV.push(_:onto:animated:)()
{
  return closure #1 in pushNavigationView #1 <A>() in NavigationBridge_PhoneTV.push(_:onto:animated:)(*(void **)(v0 + 16), *(id *)(v0 + 24), *(unsigned char *)(v0 + 32));
}

uint64_t sub_188279C0C()
{
  return swift_deallocObject();
}

id partial apply for closure #2 in NavigationBridge_PhoneTV.push(_:onto:animated:)()
{
  return closure #2 in NavigationBridge_PhoneTV.push(_:onto:animated:)(*(void **)(v0 + 16), *(void **)(v0 + 24), *(void *)(v0 + 32));
}

uint64_t sub_188279C60()
{
  swift_unknownObjectWeakDestroy();
  swift_release();

  return swift_deallocObject();
}

void partial apply for closure #1 in NavigationBridge_PhoneTV.push(_:onto:animated:)()
{
  closure #1 in NavigationBridge_PhoneTV.push(_:onto:animated:)(*(void **)(v0 + 16), *(id *)(v0 + 24), v0 + 32, *(uint64_t **)(v0 + 64), *(unsigned char *)(v0 + 72));
}

uint64_t sub_188279CC4()
{
  swift_weakDestroy();

  return swift_deallocObject();
}

uint64_t sub_188279CFC()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in NavigationBridge_PhoneTV.push(_:onto:animated:)()
{
  return closure #1 in closure #1 in NavigationBridge_PhoneTV.push(_:onto:animated:)(*(void *)(v0 + 32), *(void *)(v0 + 40), *(unsigned char *)(v0 + 48), *(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_188279D44()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in closure #1 in NavigationBridge_PhoneTV.push(_:onto:animated:)()
{
  return closure #1 in closure #1 in closure #1 in NavigationBridge_PhoneTV.push(_:onto:animated:)();
}

uint64_t sub_188279D88()
{
  return swift_deallocObject();
}

void type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.SearchFieldPlacementKey>()
{
  if (!lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.SearchFieldPlacementKey>)
  {
    unint64_t v0 = type metadata accessor for EnvironmentPropertyKey();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.SearchFieldPlacementKey>);
    }
  }
}

void type metadata accessor for UIHostingController<BridgedPresentation.RootView>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, unint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = lazy protocol witness table accessor for type BridgedPresentation.RootView and conformance BridgedPresentation.RootView();
    unint64_t v7 = a3(a1, &type metadata for BridgedPresentation.RootView, v6);
    if (!v8) {
      atomic_store(v7, a2);
    }
  }
}

uint64_t outlined assign with copy of NavigationDestinationContent(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t associated type witness table accessor for FormStyle.Body : View in AutomaticFormStyle()
{
  return swift_getOpaqueTypeConformance2();
}

ValueMetadata *type metadata accessor for AutomaticFormStyle()
{
  return &type metadata for AutomaticFormStyle;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Form<FormStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<InspectorStyleContext>, FormStyleWritingModifier<GroupedFormStyle>, EmptyModifier>>, FormStyleWritingModifier<GroupedFormStyle>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<Form<FormStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<InspectorStyleContext>, FormStyleWritingModifier<GroupedFormStyle>, EmptyModifier>>, FormStyleWritingModifier<GroupedFormStyle>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<Form<FormStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<InspectorStyleContext>, FormStyleWritingModifier<GroupedFormStyle>, EmptyModifier>>, FormStyleWritingModifier<GroupedFormStyle>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<Form<FormStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<InspectorStyleContext>, FormStyleWritingModifier<GroupedFormStyle>, EmptyModifier>>, FormStyleWritingModifier<GroupedFormStyle>>(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<Form<FormStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<InspectorStyleContext>, FormStyleWritingModifier<GroupedFormStyle>, EmptyModifier>>, FormStyleWritingModifier<GroupedFormStyle>>, type metadata accessor for ModifiedContent<Form<FormStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<InspectorStyleContext>, FormStyleWritingModifier<GroupedFormStyle>, EmptyModifier>>, (void (*)(uint64_t))type metadata accessor for FormStyleWritingModifier<GroupedFormStyle>);
    lazy protocol witness table accessor for type ModifiedContent<Form<FormStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<InspectorStyleContext>, FormStyleWritingModifier<GroupedFormStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>();
    lazy protocol witness table accessor for type StyleContextAcceptsPredicate<InspectorStyleContext> and conformance StyleContextAcceptsPredicate<A>(&lazy protocol witness table cache variable for type FormStyleWritingModifier<GroupedFormStyle> and conformance FormStyleWritingModifier<A>, (void (*)(uint64_t))type metadata accessor for FormStyleWritingModifier<GroupedFormStyle>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<Form<FormStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<InspectorStyleContext>, FormStyleWritingModifier<GroupedFormStyle>, EmptyModifier>>, FormStyleWritingModifier<GroupedFormStyle>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<Form<FormStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<InspectorStyleContext>, FormStyleWritingModifier<GroupedFormStyle>, EmptyModifier>>(uint64_t a1)
{
}

void type metadata accessor for ModifiedContent<ModifiedContent<Form<FormStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<InspectorStyleContext>, FormStyleWritingModifier<GroupedFormStyle>, EmptyModifier>>, FormStyleWritingModifier<GroupedFormStyle>>(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t), void (*a4)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    a4(255);
    unint64_t v6 = type metadata accessor for ModifiedContent();
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

void type metadata accessor for Form<FormStyleConfiguration.Content>()
{
  if (!lazy cache variable for type metadata for Form<FormStyleConfiguration.Content>)
  {
    unint64_t v0 = type metadata accessor for Form();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Form<FormStyleConfiguration.Content>);
    }
  }
}

void type metadata accessor for StaticIf<StyleContextAcceptsPredicate<InspectorStyleContext>, FormStyleWritingModifier<GroupedFormStyle>, EmptyModifier>()
{
  if (!lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<InspectorStyleContext>, FormStyleWritingModifier<GroupedFormStyle>, EmptyModifier>)
  {
    type metadata accessor for StyleContextAcceptsPredicate<InspectorStyleContext>();
    type metadata accessor for FormStyleWritingModifier<GroupedFormStyle>();
    lazy protocol witness table accessor for type StyleContextAcceptsPredicate<InspectorStyleContext> and conformance StyleContextAcceptsPredicate<A>(&lazy protocol witness table cache variable for type StyleContextAcceptsPredicate<InspectorStyleContext> and conformance StyleContextAcceptsPredicate<A>, (void (*)(uint64_t))type metadata accessor for StyleContextAcceptsPredicate<InspectorStyleContext>);
    unint64_t v0 = type metadata accessor for StaticIf();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<InspectorStyleContext>, FormStyleWritingModifier<GroupedFormStyle>, EmptyModifier>);
    }
  }
}

void type metadata accessor for StyleContextAcceptsPredicate<InspectorStyleContext>()
{
  if (!lazy cache variable for type metadata for StyleContextAcceptsPredicate<InspectorStyleContext>)
  {
    unint64_t v0 = type metadata accessor for StyleContextAcceptsPredicate();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for StyleContextAcceptsPredicate<InspectorStyleContext>);
    }
  }
}

void type metadata accessor for FormStyleWritingModifier<GroupedFormStyle>()
{
  if (!lazy cache variable for type metadata for FormStyleWritingModifier<GroupedFormStyle>)
  {
    lazy protocol witness table accessor for type GroupedFormStyle and conformance GroupedFormStyle();
    unint64_t v0 = type metadata accessor for FormStyleWritingModifier();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for FormStyleWritingModifier<GroupedFormStyle>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type GroupedFormStyle and conformance GroupedFormStyle()
{
  unint64_t result = lazy protocol witness table cache variable for type GroupedFormStyle and conformance GroupedFormStyle;
  if (!lazy protocol witness table cache variable for type GroupedFormStyle and conformance GroupedFormStyle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GroupedFormStyle and conformance GroupedFormStyle);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<Form<FormStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<InspectorStyleContext>, FormStyleWritingModifier<GroupedFormStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<Form<FormStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<InspectorStyleContext>, FormStyleWritingModifier<GroupedFormStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<Form<FormStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<InspectorStyleContext>, FormStyleWritingModifier<GroupedFormStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<Form<FormStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<InspectorStyleContext>, FormStyleWritingModifier<GroupedFormStyle>, EmptyModifier>>(255);
    lazy protocol witness table accessor for type StyleContextAcceptsPredicate<InspectorStyleContext> and conformance StyleContextAcceptsPredicate<A>((unint64_t *)&lazy protocol witness table cache variable for type Form<FormStyleConfiguration.Content> and conformance Form<A>, (void (*)(uint64_t))type metadata accessor for Form<FormStyleConfiguration.Content>);
    lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<InspectorStyleContext>, FormStyleWritingModifier<GroupedFormStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<Form<FormStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<InspectorStyleContext>, FormStyleWritingModifier<GroupedFormStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<InspectorStyleContext>, FormStyleWritingModifier<GroupedFormStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>()
{
  unint64_t result = lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<InspectorStyleContext>, FormStyleWritingModifier<GroupedFormStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>;
  if (!lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<InspectorStyleContext>, FormStyleWritingModifier<GroupedFormStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>)
  {
    type metadata accessor for StaticIf<StyleContextAcceptsPredicate<InspectorStyleContext>, FormStyleWritingModifier<GroupedFormStyle>, EmptyModifier>();
    lazy protocol witness table accessor for type StyleContextAcceptsPredicate<InspectorStyleContext> and conformance StyleContextAcceptsPredicate<A>(&lazy protocol witness table cache variable for type FormStyleWritingModifier<GroupedFormStyle> and conformance FormStyleWritingModifier<A>, (void (*)(uint64_t))type metadata accessor for FormStyleWritingModifier<GroupedFormStyle>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<InspectorStyleContext>, FormStyleWritingModifier<GroupedFormStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type StyleContextAcceptsPredicate<InspectorStyleContext> and conformance StyleContextAcceptsPredicate<A>(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t NavigationSplitRepresentable.makeCoordinator()()
{
  uint64_t v1 = v0;
  outlined init with copy of _VariadicView_Children(v0, (uint64_t)v20);
  outlined init with copy of _VariadicView_Children(v0 + 56, (uint64_t)v19);
  outlined init with copy of _VariadicView_Children(v0 + 112, (uint64_t)v18);
  uint64_t v2 = *(void *)(v0 + 168);
  uint64_t v3 = *(void *)(v0 + 184);
  int v4 = *(unsigned __int8 *)(v0 + 192);
  int v5 = *(unsigned __int8 *)(v0 + 193);
  int v6 = *(unsigned __int8 *)(v0 + 194);
  uint64_t v7 = *(void *)(v0 + 208);
  int v8 = *(_DWORD *)(v0 + 216);
  char v9 = *(unsigned char *)(v0 + 176);
  v16[0] = *(void *)(v0 + 200);
  v16[1] = v7;
  int v17 = v8;
  outlined init with copy of NavigationAuthority(v0 + 224, (uint64_t)v15);
  type metadata accessor for NavigationSplitCoordinator();
  uint64_t v10 = swift_allocObject();
  if (v5) {
    int v11 = 256;
  }
  else {
    int v11 = 0;
  }
  int v12 = v11 | v4;
  if (v6) {
    int v13 = 0x10000;
  }
  else {
    int v13 = 0;
  }
  NavigationSplitCoordinator.init(sidebar:content:detail:parameters:columnVisibility:navigationAuthority:)((uint64_t)v20, (uint64_t)v19, (uint64_t)v18, v2, v9, v3, v12 | v13, v16, (uint64_t)v15);
  swift_beginAccess();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  outlined assign with copy of UINavigationPresentationAdaptor?(v1 + 264, v10 + 304);
  swift_endAccess();
  return v10;
}

id protocol witness for UIViewControllerRepresentable.makeUIViewController(context:) in conformance NavigationSplitRepresentable(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 24);
  v6[0] = *(void *)(a1 + 16);
  v6[1] = v2;
  uint64_t v3 = *(void *)(v1 + 256);
  swift_retain();
  swift_retain();
  id v4 = specialized NavigationSplitCoordinator.makeSplitViewController(environment:seeds:splitViewControllerProxyStorage:)(v6, v3);
  swift_release();
  swift_release();
  return v4;
}

uint64_t protocol witness for UIViewControllerRepresentable.makeCoordinator() in conformance NavigationSplitRepresentable@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = NavigationSplitRepresentable.makeCoordinator()();
  *a1 = result;
  return result;
}

Swift::UInt NavigationSplitCoordinator.CoordinatorSequence.next()()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  if (!*(void *)(v2 + 16) || (v1[3] & 1) != 0) {
    return 0;
  }
  Swift::UInt v3 = v1[2];
  if (v3 == 1)
  {
LABEL_7:
    char v4 = 0;
    uint64_t v5 = 2;
    goto LABEL_9;
  }
  if (!v3)
  {
    if (v1[1] == 3)
    {
      char v4 = 0;
      uint64_t v5 = 1;
      goto LABEL_9;
    }
    goto LABEL_7;
  }
  uint64_t v5 = 0;
  char v4 = 1;
LABEL_9:
  v1[2] = v5;
  *((unsigned char *)v1 + 24) = v4;
  unint64_t v6 = specialized __RawDictionaryStorage.find<A>(_:)(v3);
  if ((v7 & 1) == 0) {
    return 0;
  }
  id v8 = *(id *)(*(void *)(v2 + 56) + 8 * v6);
  return v3;
}

uint64_t NavigationSplitCoordinator.__deallocating_deinit()
{
  NavigationSplitCoordinator.deinit();

  return swift_deallocClassInstance();
}

void *closure #1 in UISplitViewController.animateTopDetailAlongsideTransition(begin:end:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v4 = a2 + 16;
  swift_beginAccess();
  uint64_t result = (void *)MEMORY[0x18C119DF0](v4);
  if (!result) {
    return (void *)a3();
  }
  uint64_t v6 = *(void *)((*MEMORY[0x1E4FBC8C8] & *result) + 0x70);
  int v7 = *(_DWORD *)((char *)result + v6);
  BOOL v8 = __OFSUB__(v7, 1);
  int v9 = v7 - 1;
  if (!v8)
  {
    *(_DWORD *)((char *)result + v6) = v9 & ~(v9 >> 31);

    return (void *)a3();
  }
  __break(1u);
  return result;
}

void closure #1 in UISplitViewController.showIfNeeded(_:isAnimated:)(uint64_t a1, char a2, uint64_t a3)
{
  uint64_t v5 = a1 + 16;
  swift_beginAccess();
  uint64_t v6 = (void *)MEMORY[0x18C119DF0](v5);
  if (v6)
  {
    int v7 = v6;
    if (a2)
    {
      objc_msgSend(v6, sel_showColumn_, a3);
    }
    else
    {
      BOOL v8 = self;
      uint64_t v9 = swift_allocObject();
      *(void *)(v9 + 16) = v7;
      *(void *)(v9 + 24) = a3;
      uint64_t v10 = swift_allocObject();
      *(void *)(v10 + 16) = partial apply for closure #1 in closure #1 in UISplitViewController.showIfNeeded(_:isAnimated:);
      *(void *)(v10 + 24) = v9;
      aBlock[4] = partial apply for thunk for @callee_guaranteed () -> ();
      aBlock[5] = v10;
      aBlock[0] = MEMORY[0x1E4F143A8];
      aBlock[1] = 1107296256;
      aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
      aBlock[3] = &block_descriptor_84;
      int v11 = _Block_copy(aBlock);
      id v12 = v7;
      swift_retain();
      swift_release();
      objc_msgSend(v8, sel_performWithoutAnimation_, v11);

      _Block_release(v11);
      LOBYTE(v12) = swift_isEscapingClosureAtFileLocation();
      swift_release();
      swift_release();
      if (v12) {
        __break(1u);
      }
    }
  }
}

id specialized NavigationSplitCoordinator.applyOverrides(from:to:)(uint64_t *a1, void *a2)
{
  uint64_t v3 = *a1;
  swift_getKeyPath();
  if (*(void *)(v3 + 16))
  {
    swift_bridgeObjectRetain();
    uint64_t v4 = swift_retain();
    unint64_t v5 = specialized __RawDictionaryStorage.find<A>(_:)(v4);
    if (v6)
    {
      outlined init with copy of Any(*(void *)(v3 + 56) + 32 * v5, (uint64_t)&v18);
    }
    else
    {
      long long v18 = 0u;
      long long v19 = 0u;
    }
    swift_release();
  }
  else
  {
    long long v18 = 0u;
    long long v19 = 0u;
    swift_bridgeObjectRetain();
  }
  type metadata accessor for Environment<NavigationEventHandlers>.Content(0, (unint64_t *)&lazy cache variable for type metadata for Any?, MEMORY[0x1E4FBC840] + 8, MEMORY[0x1E4FBB718]);
  int v7 = swift_dynamicCast();
  int v8 = v7;
  if (v7)
  {
    double v9 = v20;
  }
  else
  {
    double v20 = 0.0;
    double v9 = 0.0;
  }
  char v21 = v7 ^ 1;
  swift_bridgeObjectRelease();
  swift_release();
  double v10 = *MEMORY[0x1E4FB2F10];
  if (!v8) {
    double v9 = *MEMORY[0x1E4FB2F10];
  }
  objc_msgSend(a2, sel_preferredPrimaryColumnWidthFraction, v18, v19);
  if (v11 != v9) {
    objc_msgSend(a2, sel_setPreferredPrimaryColumnWidthFraction_, v9);
  }
  swift_getKeyPath();
  if (*(void *)(v3 + 16))
  {
    swift_bridgeObjectRetain();
    uint64_t v12 = swift_retain();
    unint64_t v13 = specialized __RawDictionaryStorage.find<A>(_:)(v12);
    if (v14)
    {
      outlined init with copy of Any(*(void *)(v3 + 56) + 32 * v13, (uint64_t)&v18);
    }
    else
    {
      long long v18 = 0u;
      long long v19 = 0u;
    }
    swift_release();
  }
  else
  {
    long long v18 = 0u;
    long long v19 = 0u;
    swift_bridgeObjectRetain();
  }
  int v15 = swift_dynamicCast();
  if (v15) {
    double v10 = v20;
  }
  else {
    double v20 = 0.0;
  }
  char v21 = v15 ^ 1;
  swift_bridgeObjectRelease();
  swift_release();
  id result = objc_msgSend(a2, sel_preferredSupplementaryColumnWidthFraction);
  if (v17 != v10) {
    return objc_msgSend(a2, sel_setPreferredSupplementaryColumnWidthFraction_, v10);
  }
  return result;
}

UISplitViewControllerDisplayMode specialized NavigationSplitCoordinator.splitViewController(_:displayModeForExpandingToProposedDisplayMode:)(UISplitViewControllerDisplayMode a1)
{
  uint64_t v3 = v1[31];
  uint64_t v4 = v1[32];
  uint64_t v5 = v1[33];
  swift_beginAccess();
  swift_retain();
  swift_retain();
  outlined copy of NavigationEventHandlers?(v3, v4, v5);
  UISplitViewControllerDisplayMode v6 = UISplitViewControllerVisibilityEngine.displayModeForExpanding(proposed:)(a1);
  swift_release();
  swift_release();
  outlined consume of NavigationEventHandlers?(v3, v4, v5);
  return v6;
}

uint64_t sub_18827AD50()
{
  return swift_deallocObject();
}

id partial apply for closure #1 in closure #1 in UISplitViewController.showIfNeeded(_:isAnimated:)()
{
  return objc_msgSend(*(id *)(v0 + 16), sel_showColumn_, *(void *)(v0 + 24));
}

uint64_t sub_18827AD98()
{
  return swift_deallocObject();
}

id partial apply for closure #1 in closure #1 in UISplitViewController.hideIfNeeded(_:isAnimated:)()
{
  return objc_msgSend(*(id *)(v0 + 16), sel_hideColumn_, *(void *)(v0 + 24));
}

uint64_t sub_18827ADB8()
{
  return swift_deallocObject();
}

uint64_t assignWithTake for NavigationSplitRepresentable(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (char *)(a1 + 312);
  uint64_t v5 = (char *)(a2 + 312);
  __swift_destroy_boxed_opaque_existential_1(a1);
  long long v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  uint64_t v7 = *(void *)(a2 + 40);
  int v8 = *(void **)(a1 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v7;

  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(a1 + 56);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  uint64_t v9 = *(void *)(a2 + 96);
  double v10 = *(void **)(a1 + 96);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a1 + 96) = v9;

  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(a1 + 112);
  long long v11 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = v11;
  uint64_t v12 = *(void *)(a2 + 152);
  unint64_t v13 = *(void **)(a1 + 152);
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  *(void *)(a1 + 152) = v12;

  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 168) = *(void *)(a2 + 168);
  *(unsigned char *)(a1 + 176) = *(unsigned char *)(a2 + 176);
  *(void *)(a1 + 184) = *(void *)(a2 + 184);
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 192) = *(unsigned char *)(a2 + 192);
  *(unsigned char *)(a1 + 193) = *(unsigned char *)(a2 + 193);
  *(unsigned char *)(a1 + 194) = *(unsigned char *)(a2 + 194);
  *(void *)(a1 + 200) = *(void *)(a2 + 200);
  swift_release();
  *(void *)(a1 + 208) = *(void *)(a2 + 208);
  swift_release();
  *(_DWORD *)(a1 + 216) = *(_DWORD *)(a2 + 216);
  swift_weakTakeAssign();
  *(void *)(a1 + 232) = *(void *)(a2 + 232);
  swift_release();
  *(void *)(a1 + 240) = *(void *)(a2 + 240);
  swift_release();
  *(void *)(a1 + 248) = *(void *)(a2 + 248);
  *(void *)(a1 + 256) = *(void *)(a2 + 256);
  swift_release();
  if (*(void *)(a1 + 288)) {
    __swift_destroy_boxed_opaque_existential_1(a1 + 264);
  }
  uint64_t v14 = *(void *)(a2 + 304);
  *(void *)(a1 + 296) = *(void *)(a2 + 296);
  long long v15 = *(_OWORD *)(a2 + 280);
  *(_OWORD *)(a1 + 264) = *(_OWORD *)(a2 + 264);
  *(_OWORD *)(a1 + 280) = v15;
  char v16 = *v5;
  uint64_t v17 = *(void *)(a1 + 304);
  char v18 = *v4;
  *(void *)(a1 + 304) = v14;
  *uint64_t v4 = v16;
  outlined consume of Environment<Bool>.Content(v17, v18);
  char v19 = v5[16];
  uint64_t v20 = *(void *)(a1 + 320);
  char v21 = v4[16];
  *(void *)(a1 + 320) = *(void *)(a2 + 320);
  v4[16] = v19;
  outlined consume of Environment<Bool>.Content(v20, v21);
  char v22 = v5[56];
  uint64_t v23 = *(void *)(a1 + 336);
  uint64_t v24 = *(void *)(a1 + 344);
  uint64_t v25 = *(void *)(a1 + 352);
  uint64_t v26 = *(void *)(a1 + 360);
  char v27 = v4[56];
  long long v28 = *(_OWORD *)(a2 + 352);
  *(_OWORD *)(a1 + 336) = *(_OWORD *)(a2 + 336);
  *(_OWORD *)(a1 + 352) = v28;
  v4[56] = v22;
  outlined consume of Environment<NavigationEventHandlers>.Content(v23, v24, v25, v26, v27);
  return a1;
}

uint64_t getEnumTagSinglePayload for NavigationSplitRepresentable(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 369)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t sub_18827B004()
{
  swift_weakDestroy();

  return swift_deallocObject();
}

uint64_t sub_18827B03C()
{
  swift_unknownObjectWeakDestroy();

  return swift_deallocObject();
}

uint64_t sub_18827B074()
{
  swift_release();
  swift_release();

  return swift_deallocObject();
}

unint64_t lazy protocol witness table accessor for type UISplitViewControllerProxyStorage and conformance UISplitViewControllerProxyStorage()
{
  unint64_t result = lazy protocol witness table cache variable for type UISplitViewControllerProxyStorage and conformance UISplitViewControllerProxyStorage;
  if (!lazy protocol witness table cache variable for type UISplitViewControllerProxyStorage and conformance UISplitViewControllerProxyStorage)
  {
    type metadata accessor for UISplitViewControllerProxyStorage();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UISplitViewControllerProxyStorage and conformance UISplitViewControllerProxyStorage);
  }
  return result;
}

char *keypath_get_selector_preferredPrimaryColumnWidthFraction()
{
  return sel_preferredPrimaryColumnWidthFraction;
}

id sub_18827B120@<X0>(id *a1@<X0>, void *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_preferredPrimaryColumnWidthFraction);
  *a2 = v4;
  return result;
}

id sub_18827B154(double *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setPreferredPrimaryColumnWidthFraction_, *a1);
}

char *keypath_get_selector_preferredSupplementaryColumnWidthFraction()
{
  return sel_preferredSupplementaryColumnWidthFraction;
}

id sub_18827B174@<X0>(id *a1@<X0>, void *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_preferredSupplementaryColumnWidthFraction);
  *a2 = v4;
  return result;
}

id sub_18827B1A8(double *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setPreferredSupplementaryColumnWidthFraction_, *a1);
}

uint64_t closure #1 in static NavigationPropertiesModifier._makeView(modifier:inputs:body:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v14 = a2;
  uint64_t v15 = a3;
  uint64_t v16 = a4;
  uint64_t v17 = a5;
  uint64_t v18 = a6;
  uint64_t v7 = type metadata accessor for NavigationPropertiesModifier();
  uint64_t v8 = a1 + *(int *)(v7 + 60);
  unint64_t v12[2] = v7;
  uint64_t v13 = type metadata accessor for Optional();
  uint64_t v9 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v8, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply, (uint64_t)v12, v13, MEMORY[0x1E4FBC248], v9, MEMORY[0x1E4FBC278], v10);
  return v14;
}

uint64_t implicit closure #1 in static NavigationPropertiesModifier._makeView(modifier:inputs:body:)(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return implicit closure #1 in static NavigationPropertiesModifier._makeView(modifier:inputs:body:)(a1, a2, a3, a4, a5, a6, (uint64_t (*)(void, void *))type metadata accessor for NavigationPropertiesModifier.PropertiesTransform, (uint64_t)&protocol conformance descriptor for NavigationPropertiesModifier<A, B, C>.PropertiesTransform, (uint64_t (*)(void))type metadata accessor for Attribute<(_:)>, (uint64_t)closure #1 in Attribute.init<A>(_:)partial apply);
}

uint64_t implicit closure #2 in static NavigationPropertiesModifier._makeView(modifier:inputs:body:)(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return implicit closure #1 in static NavigationPropertiesModifier._makeView(modifier:inputs:body:)(a1, a2, a3, a4, a5, a6, (uint64_t (*)(void, void *))type metadata accessor for NavigationPropertiesModifier.NavigationTitleTransform, (uint64_t)&protocol conformance descriptor for NavigationPropertiesModifier<A, B, C>.NavigationTitleTransform, (uint64_t (*)(void))type metadata accessor for Attribute<(_:)>, (uint64_t)closure #1 in Attribute.init<A>(_:)partial apply);
}

uint64_t implicit closure #1 in static NavigationPropertiesModifier._makeView(modifier:inputs:body:)(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t (*a7)(void, void *), uint64_t a8, uint64_t (*a9)(void), uint64_t a10)
{
  v17[5] = *MEMORY[0x1E4F143B8];
  int v13 = a1;
  v17[0] = a2;
  v17[1] = a3;
  v17[2] = a4;
  void v17[3] = a5;
  void v17[4] = a6;
  uint64_t v15 = a7(0, v17);
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v10 = a9(0);
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v13, a10, (uint64_t)v14, v15, MEMORY[0x1E4FBC248], v10, MEMORY[0x1E4FBC278], v11);
  return LODWORD(v17[0]);
}

uint64_t NavigationPropertiesModifier.PropertiesValue.modifier.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for NavigationPropertiesModifier();
  uint64_t Value = AGGraphGetValue();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16))(a1, Value, v2);
}

uint64_t protocol witness for static Rule.initialValue.getter in conformance NavigationPropertiesModifier<A, B, C>.PropertiesValue@<X0>(uint64_t a1@<X8>)
{
  type metadata accessor for ToolbarStorage.NavigationProperties?(0);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56);

  return v3(a1, 1, 1, v2);
}

uint64_t protocol witness for Rule.value.getter in conformance NavigationPropertiesModifier<A, B, C>.PropertiesValue@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return NavigationPropertiesModifier.PropertiesValue.value.getter(a1[2], a1[3], a1[4], a1[5], a1[6], a2);
}

uint64_t (*NavigationPropertiesModifier.PropertiesTransform.value.getter())(uint64_t a1)
{
  type metadata accessor for ToolbarStorage.NavigationProperties?(0);
  uint64_t v1 = *(void *)(v0 - 8);
  uint64_t v2 = *(void *)(v1 + 64);
  MEMORY[0x1F4188790](v0);
  uint64_t v3 = (char *)&v11 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v4);
  long long v6 = (char *)&v11 - v5;
  uint64_t Value = AGGraphGetValue();
  _s7SwiftUI14ToolbarStorageV20NavigationPropertiesVSgWOcTm_0(Value, (uint64_t)v6, (uint64_t (*)(void))type metadata accessor for ToolbarStorage.NavigationProperties?);
  _s7SwiftUI14ToolbarStorageV20NavigationPropertiesVWObTm_0((uint64_t)v6, (uint64_t)v3, (uint64_t (*)(void))type metadata accessor for ToolbarStorage.NavigationProperties?);
  unint64_t v8 = (*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  uint64_t v9 = swift_allocObject();
  _s7SwiftUI14ToolbarStorageV20NavigationPropertiesVWObTm_0((uint64_t)v3, v9 + v8, (uint64_t (*)(void))type metadata accessor for ToolbarStorage.NavigationProperties?);
  return partial apply for closure #1 in NavigationPropertiesModifier.PropertiesTransform.value.getter;
}

uint64_t protocol witness for Rule.value.getter in conformance NavigationPropertiesModifier<A, B, C>.PropertiesTransform@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return protocol witness for Rule.value.getter in conformance NavigationPropertiesModifier<A, B, C>.PropertiesTransform(a1, (uint64_t (*)(void, void, void, void, void, void))NavigationPropertiesModifier.PropertiesTransform.value.getter, (uint64_t)partial apply for thunk for @escaping @callee_guaranteed (@inout AccessibilityLargeContentViewTree) -> (), a2);
}

uint64_t (*NavigationPropertiesModifier.NavigationTitleTransform.value.getter())(uint64_t a1)
{
  type metadata accessor for ToolbarStorage.NavigationProperties?(0);
  uint64_t v1 = *(void *)(v0 - 8);
  uint64_t v2 = *(void *)(v1 + 64);
  MEMORY[0x1F4188790](v0);
  uint64_t v3 = (char *)&v11 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v4);
  long long v6 = (char *)&v11 - v5;
  uint64_t Value = AGGraphGetValue();
  _s7SwiftUI14ToolbarStorageV20NavigationPropertiesVSgWOcTm_0(Value, (uint64_t)v6, (uint64_t (*)(void))type metadata accessor for ToolbarStorage.NavigationProperties?);
  _s7SwiftUI14ToolbarStorageV20NavigationPropertiesVWObTm_0((uint64_t)v6, (uint64_t)v3, (uint64_t (*)(void))type metadata accessor for ToolbarStorage.NavigationProperties?);
  unint64_t v8 = (*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  uint64_t v9 = swift_allocObject();
  _s7SwiftUI14ToolbarStorageV20NavigationPropertiesVWObTm_0((uint64_t)v3, v9 + v8, (uint64_t (*)(void))type metadata accessor for ToolbarStorage.NavigationProperties?);
  return partial apply for closure #1 in NavigationPropertiesModifier.NavigationTitleTransform.value.getter;
}

uint64_t protocol witness for Rule.value.getter in conformance NavigationPropertiesModifier<A, B, C>.NavigationTitleTransform@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return protocol witness for Rule.value.getter in conformance NavigationPropertiesModifier<A, B, C>.PropertiesTransform(a1, (uint64_t (*)(void, void, void, void, void, void))NavigationPropertiesModifier.NavigationTitleTransform.value.getter, (uint64_t)partial apply for thunk for @escaping @callee_guaranteed (@inout AccessibilityLargeContentViewTree) -> (), a2);
}

uint64_t protocol witness for Rule.value.getter in conformance NavigationPropertiesModifier<A, B, C>.PropertiesTransform@<X0>(void *a1@<X0>, uint64_t (*a2)(void, void, void, void, void, void)@<X2>, uint64_t a3@<X4>, void *a4@<X8>)
{
  uint64_t v7 = a2(*v4, a1[2], a1[3], a1[4], a1[5], a1[6]);
  uint64_t v9 = v8;
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = v7;
  *(void *)(result + 24) = v9;
  *a4 = a3;
  a4[1] = result;
  return result;
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance NavigationPropertiesModifier<A, B, C>@<X0>(int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(void *__return_ptr, uint64_t, id *)@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X4>, void *a6@<X8>)
{
  return static NavigationPropertiesModifier._makeView(modifier:inputs:body:)(a1, a2, a3, a4, a5[2], a5[3], a5[4], a5[5], a6, a5[6]);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance NavigationPropertiesModifier<A, B, C>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F40FF3A0](a1, a2, a3, a4, a5, WitnessTable);
}

uint64_t protocol witness for static PreferenceKey.reduce(value:nextValue:) in conformance NavigationPropertiesKey(uint64_t a1, void (*a2)(uint64_t))
{
  type metadata accessor for ToolbarStorage.NavigationProperties?(0);
  MEMORY[0x1F4188790](v4 - 8);
  long long v6 = &v14[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1F4188790](v7);
  uint64_t v9 = &v14[-v8];
  _s7SwiftUI14ToolbarStorageV20NavigationPropertiesVSgWOcTm_0(a1, (uint64_t)&v14[-v8], (uint64_t (*)(void))type metadata accessor for ToolbarStorage.NavigationProperties?);
  uint64_t v10 = type metadata accessor for ToolbarStorage.NavigationProperties(0);
  int v11 = (*(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(*(void *)(v10 - 8) + 48))(v9, 1, v10);
  uint64_t v12 = _s7SwiftUI14ToolbarStorageV20NavigationPropertiesVSgWOhTm_0((uint64_t)v9, (uint64_t (*)(void))type metadata accessor for ToolbarStorage.NavigationProperties?);
  a2(v12);
  if (v11 == 1) {
    return outlined assign with take of ToolbarStorage.NavigationProperties?((uint64_t)v6, a1);
  }
  _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF7SwiftUI14ToolbarStorageV20NavigationPropertiesV_s5NeverOytTg503_s7c4UI23gh32KeyV6reduce5value9nextValueyAA14eF26V0cD0VSgz_AKyXEtFZyAJXEfU_AHSgTf1cn_n((uint64_t)v6, a1);
  return _s7SwiftUI14ToolbarStorageV20NavigationPropertiesVSgWOhTm_0((uint64_t)v6, (uint64_t (*)(void))type metadata accessor for ToolbarStorage.NavigationProperties?);
}

uint64_t protocol witness for static PreferenceKey.defaultValue.getter in conformance NavigationPropertiesContentKey@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static PreferenceKey.defaultValue.getter in conformance NavigationPropertiesKey(&one-time initialization token for defaultValue, (uint64_t)static NavigationPropertiesContentKey.defaultValue, a1);
}

void AnyNavigationDocumentBox.makeContent()()
{
}

uint64_t type metadata accessor for AnyNavigationDocumentBox()
{
  return self;
}

uint64_t NavigationDocumentBox.makeContent()()
{
  return (*(uint64_t (**)(void))(*(void *)(*(void *)v0 + 104) + 8))(*(void *)(*(void *)v0 + 96));
}

uint64_t type metadata accessor for NavigationDocumentBox()
{
  return __swift_instantiateGenericMetadata();
}

ValueMetadata *type metadata accessor for NavigationPropertiesKey()
{
  return &type metadata for NavigationPropertiesKey;
}

ValueMetadata *type metadata accessor for NavigationPropertiesContentKey()
{
  return &type metadata for NavigationPropertiesContentKey;
}

uint64_t type metadata completion function for NavigationPropertiesModifier()
{
  uint64_t result = type metadata accessor for Optional();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for NavigationPropertiesModifier(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 + 32);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = v5;
  int v7 = *(_DWORD *)(v5 + 80);
  uint64_t v8 = v7;
  if (*(_DWORD *)(v5 + 84)) {
    size_t v9 = *(void *)(v5 + 64);
  }
  else {
    size_t v9 = *(void *)(v5 + 64) + 1;
  }
  unint64_t v10 = ((v7 + 8) & ~(unint64_t)v7) + v9;
  int v11 = v7 & 0x100000;
  uint64_t v12 = *a2;
  *a1 = *a2;
  if (v8 > 7 || v11 != 0 || v10 > 0x18)
  {
    a1 = (uint64_t *)(v12 + ((v8 & 0xF8 ^ 0x1F8) & (v8 + 16)));
    swift_retain();
  }
  else
  {
    uint64_t v15 = (void *)(((unint64_t)a1 + v8 + 8) & ~v8);
    uint64_t v16 = (const void *)(((unint64_t)a2 + v8 + 8) & ~v8);
    uint64_t v17 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v5 + 48);
    swift_retain();
    if (v17(v16, 1, v4))
    {
      memcpy(v15, v16, v9);
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v6 + 16))(v15, v16, v4);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v6 + 56))(v15, 0, 1, v4);
    }
  }
  return a1;
}

uint64_t destroy for NavigationPropertiesModifier(uint64_t a1, uint64_t a2)
{
  swift_release();
  uint64_t v4 = *(void *)(a2 + 32);
  uint64_t v8 = *(void *)(v4 - 8);
  unint64_t v5 = (a1 + *(unsigned __int8 *)(v8 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v8 + 48))(v5, 1, v4);
  if (!result)
  {
    int v7 = *(uint64_t (**)(unint64_t, uint64_t))(v8 + 8);
    return v7(v5, v4);
  }
  return result;
}

void *initializeWithCopy for NavigationPropertiesModifier(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(void *)(a3 + 32);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(unsigned __int8 *)(v5 + 80);
  int v7 = (void *)(((unint64_t)a1 + v6 + 8) & ~v6);
  uint64_t v8 = (const void *)(((unint64_t)a2 + v6 + 8) & ~v6);
  size_t v9 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v5 + 48);
  swift_retain();
  if (v9(v8, 1, v4))
  {
    if (*(_DWORD *)(v5 + 84)) {
      size_t v10 = *(void *)(v5 + 64);
    }
    else {
      size_t v10 = *(void *)(v5 + 64) + 1;
    }
    memcpy(v7, v8, v10);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v5 + 16))(v7, v8, v4);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v5 + 56))(v7, 0, 1, v4);
  }
  return a1;
}

void *assignWithCopy for NavigationPropertiesModifier(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  uint64_t v6 = *(void *)(a3 + 32);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(unsigned __int8 *)(v7 + 80);
  size_t v9 = (void *)(((unint64_t)a1 + v8 + 8) & ~v8);
  size_t v10 = (void *)(((unint64_t)a2 + v8 + 8) & ~v8);
  int v11 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v7 + 48);
  int v12 = v11(v9, 1, v6);
  int v13 = v11(v10, 1, v6);
  if (v12)
  {
    if (!v13)
    {
      (*(void (**)(void *, void *, uint64_t))(v7 + 16))(v9, v10, v6);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(v9, 0, 1, v6);
      return a1;
    }
    int v14 = *(_DWORD *)(v7 + 84);
    size_t v15 = *(void *)(v7 + 64);
  }
  else
  {
    if (!v13)
    {
      (*(void (**)(void *, void *, uint64_t))(v7 + 24))(v9, v10, v6);
      return a1;
    }
    uint64_t v17 = *(void (**)(void *, uint64_t))(v7 + 8);
    uint64_t v16 = v7 + 8;
    v17(v9, v6);
    int v14 = *(_DWORD *)(v16 + 76);
    size_t v15 = *(void *)(v16 + 56);
  }
  if (v14) {
    size_t v18 = v15;
  }
  else {
    size_t v18 = v15 + 1;
  }
  memcpy(v9, v10, v18);
  return a1;
}

void *initializeWithTake for NavigationPropertiesModifier(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(void *)(a3 + 32);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v7 = (void *)(((unint64_t)a1 + v6 + 8) & ~v6);
  uint64_t v8 = (const void *)(((unint64_t)a2 + v6 + 8) & ~v6);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v5 + 48))(v8, 1, v4))
  {
    if (*(_DWORD *)(v5 + 84)) {
      size_t v9 = *(void *)(v5 + 64);
    }
    else {
      size_t v9 = *(void *)(v5 + 64) + 1;
    }
    memcpy(v7, v8, v9);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v5 + 32))(v7, v8, v4);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v5 + 56))(v7, 0, 1, v4);
  }
  return a1;
}

void storeEnumTagSinglePayload for NavigationPropertiesModifier(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  int v6 = 0;
  uint64_t v7 = *(void *)(*(void *)(a4 + 32) - 8);
  int v8 = *(_DWORD *)(v7 + 84);
  unsigned int v9 = v8 - 1;
  if (!v8) {
    unsigned int v9 = 0;
  }
  if (v9 <= 0x7FFFFFFE) {
    unsigned int v10 = 2147483646;
  }
  else {
    unsigned int v10 = v9;
  }
  uint64_t v11 = *(unsigned __int8 *)(v7 + 80);
  size_t v12 = *(void *)(*(void *)(*(void *)(a4 + 32) - 8) + 64);
  if (!v8) {
    ++v12;
  }
  size_t v13 = ((v11 + 8) & ~v11) + v12;
  BOOL v14 = a3 >= v10;
  unsigned int v15 = a3 - v10;
  if (v15 == 0 || !v14)
  {
LABEL_17:
    if (v10 < a2) {
      goto LABEL_18;
    }
    goto LABEL_25;
  }
  if (v13 > 3)
  {
    int v6 = 1;
    if (v10 < a2) {
      goto LABEL_18;
    }
    goto LABEL_25;
  }
  unsigned int v16 = ((v15 + ~(-1 << (8 * v13))) >> (8 * v13)) + 1;
  if (!HIWORD(v16))
  {
    if (v16 >= 0x100) {
      int v6 = 2;
    }
    else {
      int v6 = v16 > 1;
    }
    goto LABEL_17;
  }
  int v6 = 4;
  if (v10 < a2)
  {
LABEL_18:
    unsigned int v17 = ~v10 + a2;
    if (v13 < 4)
    {
      int v18 = (v17 >> (8 * v13)) + 1;
      if (v13)
      {
        int v19 = v17 & ~(-1 << (8 * v13));
        bzero(a1, v13);
        if (v13 == 3)
        {
          *(_WORD *)a1 = v19;
          a1[2] = BYTE2(v19);
        }
        else if (v13 == 2)
        {
          *(_WORD *)a1 = v19;
        }
        else
        {
          *a1 = v19;
        }
      }
    }
    else
    {
      bzero(a1, v13);
      *(_DWORD *)a1 = v17;
      int v18 = 1;
    }
    switch(v6)
    {
      case 1:
        a1[v13] = v18;
        return;
      case 2:
        *(_WORD *)&a1[v13] = v18;
        return;
      case 3:
        goto LABEL_59;
      case 4:
        *(_DWORD *)&a1[v13] = v18;
        return;
      default:
        return;
    }
  }
LABEL_25:
  switch(v6)
  {
    case 1:
      a1[v13] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_30;
    case 2:
      *(_WORD *)&a1[v13] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_30;
    case 3:
LABEL_59:
      __break(1u);
      JUMPOUT(0x18827C6E4);
    case 4:
      *(_DWORD *)&a1[v13] = 0;
      goto LABEL_29;
    default:
LABEL_29:
      if (a2)
      {
LABEL_30:
        if (v9 > 0x7FFFFFFE)
        {
          uint64_t v20 = (unsigned char *)((unint64_t)&a1[v11 + 8] & ~v11);
          if (v9 >= a2)
          {
            uint64_t v24 = a2 + 1;
            uint64_t v25 = *(void (**)(unint64_t, uint64_t))(v7 + 56);
            unint64_t v26 = (unint64_t)&a1[v11 + 8] & ~v11;
            v25(v26, v24);
          }
          else
          {
            if (v12 <= 3) {
              int v21 = ~(-1 << (8 * v12));
            }
            else {
              int v21 = -1;
            }
            if (v12)
            {
              int v22 = v21 & (~v9 + a2);
              if (v12 <= 3) {
                int v23 = v12;
              }
              else {
                int v23 = 4;
              }
              bzero(v20, v12);
              switch(v23)
              {
                case 2:
                  *(_WORD *)uint64_t v20 = v22;
                  break;
                case 3:
                  *(_WORD *)uint64_t v20 = v22;
                  long long v20[2] = BYTE2(v22);
                  break;
                case 4:
                  *(_DWORD *)uint64_t v20 = v22;
                  break;
                default:
                  *uint64_t v20 = v22;
                  break;
              }
            }
          }
        }
        else if (a2 > 0x7FFFFFFE)
        {
          *(void *)a1 = 0;
          *(_DWORD *)a1 = a2 - 0x7FFFFFFF;
        }
        else
        {
          *(void *)a1 = a2;
        }
      }
      return;
  }
}

_UNKNOWN **base witness table accessor for ViewModifier in NavigationPropertiesModifier<A, B, C>()
{
  return &protocol witness table for NavigationPropertiesModifier<A, B, C>;
}

uint64_t outlined assign with take of ToolbarStorage.NavigationProperties?(uint64_t a1, uint64_t a2)
{
  type metadata accessor for ToolbarStorage.NavigationProperties?(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

void _s7SwiftUI14ToolbarStorageV20NavigationPropertiesVSgMaTm_0(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

uint64_t outlined assign with copy of PlatformItemList.Item?(uint64_t a1, uint64_t a2)
{
  type metadata accessor for PlatformItemList.Item?(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

uint64_t type metadata accessor for NavigationPropertiesModifier.PropertiesValue()
{
  return swift_getGenericMetadata();
}

uint64_t partial apply for implicit closure #1 in static NavigationPropertiesModifier._makeView(modifier:inputs:body:)()
{
  return partial apply for implicit closure #1 in static NavigationPropertiesModifier._makeView(modifier:inputs:body:)((uint64_t (*)(void, void, void, void, void, void))implicit closure #1 in static NavigationPropertiesModifier._makeView(modifier:inputs:body:));
}

uint64_t partial apply for implicit closure #2 in static NavigationPropertiesModifier._makeView(modifier:inputs:body:)()
{
  return partial apply for implicit closure #1 in static NavigationPropertiesModifier._makeView(modifier:inputs:body:)((uint64_t (*)(void, void, void, void, void, void))implicit closure #2 in static NavigationPropertiesModifier._makeView(modifier:inputs:body:));
}

uint64_t partial apply for implicit closure #1 in static NavigationPropertiesModifier._makeView(modifier:inputs:body:)(uint64_t (*a1)(void, void, void, void, void, void))
{
  return a1(*(unsigned int *)(v1 + 56), *(void *)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40), *(void *)(v1 + 48));
}

uint64_t type metadata accessor for NavigationPropertiesModifier.NavigationTitleTransform()
{
  return swift_getGenericMetadata();
}

uint64_t type metadata accessor for NavigationPropertiesModifier.PropertiesTransform()
{
  return swift_getGenericMetadata();
}

char *initializeBufferWithCopyOfBuffer for TitleDocumentContent(char *a1, char **a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) == 0)
  {
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      int v6 = *a2;
      *(void *)a1 = *a2;
      uint64_t v7 = a1 + 8;
      unint64_t v8 = a2 + 1;
      uint64_t v9 = a2[5];
      unsigned int v10 = v6;
      if (v9)
      {
        if (a2[4])
        {
          uint64_t v11 = (uint64_t)a2[1];
          uint64_t v12 = (uint64_t)a2[2];
          char v13 = *((unsigned char *)a2 + 24);
          outlined copy of Text.Storage(v11, v12, v13);
          *((void *)a1 + 1) = v11;
          *((void *)a1 + 2) = v12;
          a1[24] = v13;
          uint64_t v9 = a2[5];
          *((void *)a1 + 4) = a2[4];
          swift_bridgeObjectRetain();
        }
        else
        {
          long long v20 = *(_OWORD *)(a2 + 3);
          *uint64_t v7 = *v8;
          *(_OWORD *)(a1 + 24) = v20;
        }
        *((void *)a1 + 5) = v9;
        int v21 = a2[8];
        *((_OWORD *)a1 + 3) = *((_OWORD *)a2 + 3);
        *((void *)a1 + 8) = v21;
        uint64_t v7 = a1 + 72;
        int v22 = (long long *)(a2 + 9);
        int v23 = a2[12];
        swift_retain();
        swift_retain();
        if (v23)
        {
          *((void *)a1 + 12) = v23;
          (**((void (***)(uint64_t, long long *, uint64_t))v23 - 1))((uint64_t)(a1 + 72), v22, (uint64_t)v23);
          goto LABEL_14;
        }
        long long v18 = *v22;
        long long v19 = v22[1];
      }
      else
      {
        long long v16 = *(_OWORD *)(a2 + 7);
        *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 5);
        *(_OWORD *)(a1 + 56) = v16;
        long long v17 = *(_OWORD *)(a2 + 11);
        *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 9);
        *(_OWORD *)(a1 + 88) = v17;
        long long v18 = *v8;
        long long v19 = *(_OWORD *)(a2 + 3);
      }
      *uint64_t v7 = v18;
      v7[1] = v19;
      goto LABEL_14;
    }
    uint64_t v15 = type metadata accessor for URL();
    (*(void (**)(char *, char **, uint64_t))(*(void *)(v15 - 8) + 16))(a1, a2, v15);
LABEL_14:
    swift_storeEnumTagMultiPayload();
    return a1;
  }
  BOOL v14 = *a2;
  *(void *)a1 = *a2;
  a1 = &v14[(v5 + 16) & ~(unint64_t)v5];
  swift_retain();
  return a1;
}

void destroy for TitleDocumentContent(uint64_t a1)
{
  if (swift_getEnumCaseMultiPayload() == 1)
  {

    if (*(void *)(a1 + 40))
    {
      if (*(void *)(a1 + 32))
      {
        outlined consume of Text.Storage(*(void *)(a1 + 8), *(void *)(a1 + 16), *(unsigned char *)(a1 + 24));
        swift_bridgeObjectRelease();
      }
      swift_release();
      swift_release();
      if (*(void *)(a1 + 96))
      {
        __swift_destroy_boxed_opaque_existential_1(a1 + 72);
      }
    }
  }
  else
  {
    uint64_t v2 = type metadata accessor for URL();
    uint64_t v3 = *(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8);
    v3(a1, v2);
  }
}

uint64_t initializeWithCopy for TitleDocumentContent(uint64_t a1, uint64_t a2)
{
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v4 = *(void **)a2;
    *(void *)a1 = *(void *)a2;
    int v5 = (_OWORD *)(a1 + 8);
    int v6 = (_OWORD *)(a2 + 8);
    uint64_t v7 = *(void *)(a2 + 40);
    id v8 = v4;
    if (v7)
    {
      if (*(void *)(a2 + 32))
      {
        uint64_t v9 = *(void *)(a2 + 8);
        uint64_t v10 = *(void *)(a2 + 16);
        char v11 = *(unsigned char *)(a2 + 24);
        outlined copy of Text.Storage(v9, v10, v11);
        *(void *)(a1 + 8) = v9;
        *(void *)(a1 + 16) = v10;
        *(unsigned char *)(a1 + 24) = v11;
        uint64_t v7 = *(void *)(a2 + 40);
        *(void *)(a1 + 32) = *(void *)(a2 + 32);
        swift_bridgeObjectRetain();
      }
      else
      {
        long long v17 = *(_OWORD *)(a2 + 24);
        *int v5 = *v6;
        *(_OWORD *)(a1 + 24) = v17;
      }
      *(void *)(a1 + 40) = v7;
      uint64_t v18 = *(void *)(a2 + 64);
      *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
      *(void *)(a1 + 64) = v18;
      int v5 = (_OWORD *)(a1 + 72);
      long long v19 = (long long *)(a2 + 72);
      uint64_t v20 = *(void *)(a2 + 96);
      swift_retain();
      swift_retain();
      if (v20)
      {
        *(void *)(a1 + 96) = v20;
        (**(void (***)(uint64_t, long long *, uint64_t))(v20 - 8))(a1 + 72, v19, v20);
        goto LABEL_12;
      }
      long long v15 = *v19;
      long long v16 = v19[1];
    }
    else
    {
      long long v13 = *(_OWORD *)(a2 + 56);
      *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
      *(_OWORD *)(a1 + 56) = v13;
      long long v14 = *(_OWORD *)(a2 + 88);
      *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
      *(_OWORD *)(a1 + 88) = v14;
      long long v15 = *v6;
      long long v16 = *(_OWORD *)(a2 + 24);
    }
    *int v5 = v15;
    v5[1] = v16;
    goto LABEL_12;
  }
  uint64_t v12 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 16))(a1, a2, v12);
LABEL_12:
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t assignWithCopy for TitleDocumentContent(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    _s7SwiftUI14ToolbarStorageV20NavigationPropertiesVSgWOhTm_0(a1, (uint64_t (*)(void))type metadata accessor for TitleDocumentContent);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v4 = *(void **)a2;
      *(void *)a1 = *(void *)a2;
      int v5 = (_OWORD *)(a1 + 8);
      int v6 = (_OWORD *)(a2 + 8);
      uint64_t v7 = *(void *)(a2 + 40);
      id v8 = v4;
      if (v7)
      {
        if (*(void *)(a2 + 32))
        {
          uint64_t v9 = *(void *)(a2 + 8);
          uint64_t v10 = *(void *)(a2 + 16);
          char v11 = *(unsigned char *)(a2 + 24);
          outlined copy of Text.Storage(v9, v10, v11);
          *(void *)(a1 + 8) = v9;
          *(void *)(a1 + 16) = v10;
          *(unsigned char *)(a1 + 24) = v11;
          *(void *)(a1 + 32) = *(void *)(a2 + 32);
          swift_bridgeObjectRetain();
        }
        else
        {
          long long v17 = *(_OWORD *)(a2 + 24);
          *int v5 = *v6;
          *(_OWORD *)(a1 + 24) = v17;
        }
        uint64_t v18 = *(void *)(a2 + 48);
        *(void *)(a1 + 40) = *(void *)(a2 + 40);
        *(void *)(a1 + 48) = v18;
        uint64_t v19 = *(void *)(a2 + 64);
        *(void *)(a1 + 56) = *(void *)(a2 + 56);
        *(void *)(a1 + 64) = v19;
        uint64_t v20 = (_OWORD *)(a2 + 72);
        uint64_t v21 = *(void *)(a2 + 96);
        swift_retain();
        swift_retain();
        if (v21)
        {
          *(void *)(a1 + 96) = v21;
          (**(void (***)(uint64_t, _OWORD *, uint64_t))(v21 - 8))(a1 + 72, v20, v21);
        }
        else
        {
          long long v22 = v20[1];
          *(_OWORD *)(a1 + 72) = *v20;
          *(_OWORD *)(a1 + 88) = v22;
        }
      }
      else
      {
        long long v13 = *(_OWORD *)(a2 + 24);
        *int v5 = *v6;
        *(_OWORD *)(a1 + 24) = v13;
        long long v14 = *(_OWORD *)(a2 + 40);
        long long v15 = *(_OWORD *)(a2 + 56);
        long long v16 = *(_OWORD *)(a2 + 88);
        *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
        *(_OWORD *)(a1 + 88) = v16;
        *(_OWORD *)(a1 + 40) = v14;
        *(_OWORD *)(a1 + 56) = v15;
      }
    }
    else
    {
      uint64_t v12 = type metadata accessor for URL();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 16))(a1, a2, v12);
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t base witness table accessor for _AttributeBody in NavigationPropertiesModifier<A, B, C>.PropertiesTransform()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for _AttributeBody in NavigationPropertiesModifier<A, B, C>.NavigationTitleTransform()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for _AttributeBody in NavigationPropertiesModifier<A, B, C>.PropertiesValue()
{
  return swift_getWitnessTable();
}

uint64_t sub_18827CFB4()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in NavigationPropertiesModifier.NavigationTitleTransform.value.getter(uint64_t a1)
{
  type metadata accessor for ToolbarStorage.NavigationProperties?(0);
  uint64_t v4 = v1
     + ((*(unsigned __int8 *)(*(void *)(v3 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v3 - 8) + 80));

  return closure #1 in NavigationPropertiesModifier.NavigationTitleTransform.value.getter(a1, v4);
}

uint64_t partial apply for closure #1 in NavigationPropertiesModifier.PropertiesTransform.value.getter(uint64_t a1)
{
  type metadata accessor for ToolbarStorage.NavigationProperties?(0);
  uint64_t v4 = v1
     + ((*(unsigned __int8 *)(*(void *)(v3 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v3 - 8) + 80));

  return closure #1 in NavigationPropertiesModifier.PropertiesTransform.value.getter(a1, v4);
}

uint64_t initializeWithCopy for TitleDocumentContent.ItemProvider(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a2;
  *(void *)a1 = *(void *)a2;
  int v5 = (_OWORD *)(a1 + 8);
  int v6 = (_OWORD *)(a2 + 8);
  uint64_t v7 = *(void *)(a2 + 40);
  id v8 = v4;
  if (v7)
  {
    uint64_t v9 = *(void *)(a2 + 32);
    if (v9)
    {
      uint64_t v10 = *(void *)(a2 + 8);
      uint64_t v11 = *(void *)(a2 + 16);
      char v12 = *(unsigned char *)(a2 + 24);
      outlined copy of Text.Storage(v10, v11, v12);
      *(void *)(a1 + 8) = v10;
      *(void *)(a1 + 16) = v11;
      *(unsigned char *)(a1 + 24) = v12;
      *(void *)(a1 + 32) = v9;
      swift_bridgeObjectRetain();
    }
    else
    {
      long long v16 = v6[1];
      *int v5 = *v6;
      v5[1] = v16;
    }
    *(void *)(a1 + 40) = v7;
    uint64_t v17 = *(void *)(a2 + 64);
    *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
    *(void *)(a1 + 64) = v17;
    uint64_t v18 = (_OWORD *)(a2 + 72);
    uint64_t v19 = *(void *)(a2 + 96);
    swift_retain();
    swift_retain();
    if (v19)
    {
      *(void *)(a1 + 96) = v19;
      (**(void (***)(uint64_t, _OWORD *, uint64_t))(v19 - 8))(a1 + 72, v18, v19);
    }
    else
    {
      long long v20 = v18[1];
      *(_OWORD *)(a1 + 72) = *v18;
      *(_OWORD *)(a1 + 88) = v20;
    }
  }
  else
  {
    long long v13 = v6[3];
    _OWORD v5[2] = v6[2];
    void v5[3] = v13;
    long long v14 = v6[5];
    unsigned char v5[4] = v6[4];
    void v5[5] = v14;
    long long v15 = v6[1];
    *int v5 = *v6;
    v5[1] = v15;
  }
  return a1;
}

uint64_t assignWithCopy for TitleDocumentContent.ItemProvider(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a2;
  int v5 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  id v6 = v4;

  uint64_t v7 = (_OWORD *)(a1 + 8);
  id v8 = (_OWORD *)(a2 + 8);
  uint64_t v9 = *(void *)(a2 + 40);
  if (*(void *)(a1 + 40))
  {
    if (v9)
    {
      uint64_t v10 = *(void *)(a2 + 32);
      if (*(void *)(a1 + 32))
      {
        if (v10)
        {
          uint64_t v11 = *(void *)(a2 + 8);
          uint64_t v12 = *(void *)(a2 + 16);
          char v13 = *(unsigned char *)(a2 + 24);
          outlined copy of Text.Storage(v11, v12, v13);
          uint64_t v14 = *(void *)(a1 + 8);
          uint64_t v15 = *(void *)(a1 + 16);
          char v16 = *(unsigned char *)(a1 + 24);
          *(void *)(a1 + 8) = v11;
          *(void *)(a1 + 16) = v12;
          *(unsigned char *)(a1 + 24) = v13;
          outlined consume of Text.Storage(v14, v15, v16);
          *(void *)(a1 + 32) = *(void *)(a2 + 32);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
        }
        else
        {
          outlined destroy of Text(a1 + 8);
          long long v31 = *(_OWORD *)(a2 + 24);
          *uint64_t v7 = *v8;
          *(_OWORD *)(a1 + 24) = v31;
        }
      }
      else if (v10)
      {
        uint64_t v24 = *(void *)(a2 + 8);
        uint64_t v25 = *(void *)(a2 + 16);
        char v26 = *(unsigned char *)(a2 + 24);
        outlined copy of Text.Storage(v24, v25, v26);
        *(void *)(a1 + 8) = v24;
        *(void *)(a1 + 16) = v25;
        *(unsigned char *)(a1 + 24) = v26;
        *(void *)(a1 + 32) = *(void *)(a2 + 32);
        swift_bridgeObjectRetain();
      }
      else
      {
        long long v38 = *(_OWORD *)(a2 + 24);
        *uint64_t v7 = *v8;
        *(_OWORD *)(a1 + 24) = v38;
      }
      uint64_t v39 = *(void *)(a2 + 48);
      *(void *)(a1 + 40) = *(void *)(a2 + 40);
      *(void *)(a1 + 48) = v39;
      swift_retain();
      swift_release();
      uint64_t v40 = *(void *)(a2 + 64);
      *(void *)(a1 + 56) = *(void *)(a2 + 56);
      *(void *)(a1 + 64) = v40;
      swift_retain();
      swift_release();
      char v35 = (_OWORD *)(a1 + 72);
      double v36 = (_OWORD *)(a2 + 72);
      uint64_t v41 = *(void *)(a2 + 96);
      if (*(void *)(a1 + 96))
      {
        if (v41)
        {
          __swift_assign_boxed_opaque_existential_0((uint64_t *)(a1 + 72), (uint64_t *)(a2 + 72));
          return a1;
        }
        __swift_destroy_boxed_opaque_existential_1(a1 + 72);
      }
      else if (v41)
      {
        *(void *)(a1 + 96) = v41;
        (**(void (***)(uint64_t, uint64_t))(v41 - 8))(a1 + 72, a2 + 72);
        return a1;
      }
LABEL_24:
      long long v42 = v36[1];
      *char v35 = *v36;
      v35[1] = v42;
      return a1;
    }
    outlined destroy of AnySharePreview(a1 + 8);
    long long v20 = *(_OWORD *)(a2 + 24);
    *uint64_t v7 = *v8;
    *(_OWORD *)(a1 + 24) = v20;
    long long v21 = *(_OWORD *)(a2 + 88);
    long long v23 = *(_OWORD *)(a2 + 40);
    long long v22 = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
    *(_OWORD *)(a1 + 88) = v21;
    *(_OWORD *)(a1 + 40) = v23;
    *(_OWORD *)(a1 + 56) = v22;
  }
  else if (v9)
  {
    if (*(void *)(a2 + 32))
    {
      uint64_t v17 = *(void *)(a2 + 8);
      uint64_t v18 = *(void *)(a2 + 16);
      char v19 = *(unsigned char *)(a2 + 24);
      outlined copy of Text.Storage(v17, v18, v19);
      *(void *)(a1 + 8) = v17;
      *(void *)(a1 + 16) = v18;
      *(unsigned char *)(a1 + 24) = v19;
      *(void *)(a1 + 32) = *(void *)(a2 + 32);
      swift_bridgeObjectRetain();
    }
    else
    {
      long long v32 = *(_OWORD *)(a2 + 24);
      *uint64_t v7 = *v8;
      *(_OWORD *)(a1 + 24) = v32;
    }
    uint64_t v33 = *(void *)(a2 + 48);
    *(void *)(a1 + 40) = *(void *)(a2 + 40);
    *(void *)(a1 + 48) = v33;
    uint64_t v34 = *(void *)(a2 + 64);
    *(void *)(a1 + 56) = *(void *)(a2 + 56);
    *(void *)(a1 + 64) = v34;
    char v35 = (_OWORD *)(a1 + 72);
    double v36 = (_OWORD *)(a2 + 72);
    uint64_t v37 = *(void *)(a2 + 96);
    swift_retain();
    swift_retain();
    if (!v37) {
      goto LABEL_24;
    }
    *(void *)(a1 + 96) = v37;
    (**(void (***)(uint64_t, _OWORD *, uint64_t))(v37 - 8))(a1 + 72, v36, v37);
  }
  else
  {
    long long v27 = *(_OWORD *)(a2 + 24);
    *uint64_t v7 = *v8;
    *(_OWORD *)(a1 + 24) = v27;
    long long v28 = *(_OWORD *)(a2 + 40);
    long long v29 = *(_OWORD *)(a2 + 56);
    long long v30 = *(_OWORD *)(a2 + 88);
    *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
    *(_OWORD *)(a1 + 88) = v30;
    *(_OWORD *)(a1 + 40) = v28;
    *(_OWORD *)(a1 + 56) = v29;
  }
  return a1;
}

uint64_t assignWithTake for TitleDocumentContent.ItemProvider(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (long long *)(a2 + 8);
  int v5 = *(void **)a1;
  *(void *)a1 = *(void *)a2;

  id v6 = (long long *)(a1 + 8);
  if (!*(void *)(a1 + 40)) {
    goto LABEL_7;
  }
  uint64_t v7 = *(void *)(a2 + 40);
  if (!v7)
  {
    outlined destroy of AnySharePreview(a1 + 8);
LABEL_7:
    long long v13 = v4[3];
    *(_OWORD *)(a1 + 40) = v4[2];
    *(_OWORD *)(a1 + 56) = v13;
    long long v14 = v4[5];
    *(_OWORD *)(a1 + 72) = v4[4];
    *(_OWORD *)(a1 + 88) = v14;
    long long v15 = *v4;
    long long v16 = v4[1];
    goto LABEL_13;
  }
  if (!*(void *)(a1 + 32))
  {
LABEL_9:
    long long v17 = v4[1];
    *id v6 = *v4;
    *(_OWORD *)(a1 + 24) = v17;
    goto LABEL_10;
  }
  uint64_t v8 = *(void *)(a2 + 32);
  if (!v8)
  {
    outlined destroy of Text(a1 + 8);
    goto LABEL_9;
  }
  char v9 = *(unsigned char *)(a2 + 24);
  uint64_t v10 = *(void *)(a1 + 8);
  uint64_t v11 = *(void *)(a1 + 16);
  char v12 = *(unsigned char *)(a1 + 24);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(unsigned char *)(a1 + 24) = v9;
  outlined consume of Text.Storage(v10, v11, v12);
  *(void *)(a1 + 32) = v8;
  swift_bridgeObjectRelease();
LABEL_10:
  uint64_t v18 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = v7;
  *(void *)(a1 + 48) = v18;
  swift_release();
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  swift_release();
  id v6 = (long long *)(a1 + 72);
  char v19 = (long long *)(a2 + 72);
  if (*(void *)(a1 + 96)) {
    __swift_destroy_boxed_opaque_existential_1(a1 + 72);
  }
  long long v15 = *v19;
  long long v16 = v19[1];
LABEL_13:
  *id v6 = v15;
  v6[1] = v16;
  return a1;
}

ValueMetadata *type metadata accessor for TitleDocumentContent.ItemProvider()
{
  return &type metadata for TitleDocumentContent.ItemProvider;
}

uint64_t View.labeledContentStyle<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = *(void *)(a3 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for _LabeledContentStyleModifier();
  uint64_t v12 = *(void *)(v11 - 8);
  double v13 = MEMORY[0x1F4188790](v11);
  long long v15 = (char *)&v17 - v14;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v8 + 16))(v10, a1, a3, v13);
  (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v15, v10, a3);
  MEMORY[0x18C113660](v15, a2, v11, a4);
  return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v15, v11);
}

uint64_t dispatch thunk of LabeledContentStyle.makeBody(configuration:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t sub_18827D798()
{
  return swift_getWitnessTable();
}

uint64_t getEnumTagSinglePayload for _LabeledContentStyleModifier(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (!a2) {
    return 0;
  }
  unsigned int v7 = a2 - v5;
  if (a2 <= v5) {
    goto LABEL_19;
  }
  char v8 = 8 * v6;
  if (v6 <= 3)
  {
    unsigned int v10 = ((v7 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      int v9 = *(_DWORD *)((char *)a1 + v6);
      if (!v9) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      int v9 = *(unsigned __int16 *)((char *)a1 + v6);
      if (!*(unsigned __int16 *)((char *)a1 + v6)) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_19:
      if (v5) {
        return (*(uint64_t (**)(void))(v4 + 48))();
      }
      return 0;
    }
  }
  int v9 = *((unsigned __int8 *)a1 + v6);
  if (!*((unsigned char *)a1 + v6)) {
    goto LABEL_19;
  }
LABEL_11:
  int v11 = (v9 - 1) << v8;
  if (v6 > 3) {
    int v11 = 0;
  }
  if (v6)
  {
    if (v6 > 3) {
      LODWORD(v6) = 4;
    }
    switch((int)v6)
    {
      case 2:
        LODWORD(v6) = *a1;
        break;
      case 3:
        LODWORD(v6) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v6) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v6) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v5 + (v6 | v11) + 1;
}

void storeEnumTagSinglePayload for _LabeledContentStyleModifier(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = *(void *)(v6 + 64);
  BOOL v9 = a3 >= v7;
  unsigned int v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      unsigned int v14 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v14))
      {
        int v11 = 4;
      }
      else if (v14 >= 0x100)
      {
        int v11 = 2;
      }
      else
      {
        int v11 = v14 > 1;
      }
    }
    else
    {
      int v11 = 1;
    }
  }
  else
  {
    int v11 = 0;
  }
  if (v7 < a2)
  {
    unsigned int v12 = ~v7 + a2;
    if (v8 < 4)
    {
      int v13 = (v12 >> (8 * v8)) + 1;
      if (v8)
      {
        int v15 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if (v8 == 3)
        {
          *(_WORD *)a1 = v15;
          a1[2] = BYTE2(v15);
        }
        else if (v8 == 2)
        {
          *(_WORD *)a1 = v15;
        }
        else
        {
          *a1 = v15;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v12;
      int v13 = 1;
    }
    switch(v11)
    {
      case 1:
        a1[v8] = v13;
        return;
      case 2:
        *(_WORD *)&a1[v8] = v13;
        return;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v8] = v13;
        return;
      default:
        return;
    }
  }
  switch(v11)
  {
    case 1:
      a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 2:
      *(_WORD *)&a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 3:
LABEL_34:
      __break(1u);
      JUMPOUT(0x18827DB7CLL);
    case 4:
      *(_DWORD *)&a1[v8] = 0;
      goto LABEL_20;
    default:
LABEL_20:
      if (a2)
      {
LABEL_21:
        long long v16 = *(void (**)(void))(v6 + 56);
        v16();
      }
      return;
  }
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance ResolvedLabeledContent._Body()
{
  return static ModifiedContent<>._viewListCount(inputs:)();
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance ResolvedLabeledContent()
{
  return static StyleableView._viewListCount(inputs:)();
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance _LabeledContentStyleModifier<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F40FDF88](a1, a2, a3, a4, a5, WitnessTable);
}

uint64_t protocol witness for static ViewModifier._viewListCount(inputs:body:) in conformance _LabeledContentStyleModifier<A>()
{
  return static StyleModifier._viewListCount(inputs:body:)();
}

unsigned char *storeEnumTagSinglePayload for LabeledContentStyleConfiguration(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x18827DE34);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

uint64_t sub_18827DE5C()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<LabeledContent<LabeledContentStyleConfiguration.Label, LabeledContentStyleConfiguration.Content>, StaticSourceWriter<LabeledContentStyleConfiguration.Label, ModifiedContent<LabeledContentStyleConfiguration.Label, AccessibilityLabeledContentLabelModifier>>>, StaticSourceWriter<LabeledContentStyleConfiguration.Content, ModifiedContent<LabeledContentStyleConfiguration.Content, AccessibilityLabeledContentContentModifier<LabeledContentStyleConfiguration.Label>>>> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<LabeledContent<LabeledContentStyleConfiguration.Label, LabeledContentStyleConfiguration.Content>, StaticSourceWriter<LabeledContentStyleConfiguration.Label, ModifiedContent<LabeledContentStyleConfiguration.Label, AccessibilityLabeledContentLabelModifier>>>, StaticSourceWriter<LabeledContentStyleConfiguration.Content, ModifiedContent<LabeledContentStyleConfiguration.Content, AccessibilityLabeledContentContentModifier<LabeledContentStyleConfiguration.Label>>>>, AccessibilityFrameModifier> and conformance <> ModifiedContent<A, B>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<LabeledContent<LabeledContentStyleConfiguration.Label, LabeledContentStyleConfiguration.Content>, StaticSourceWriter<LabeledContentStyleConfiguration.Label, ModifiedContent<LabeledContentStyleConfiguration.Label, AccessibilityLabeledContentLabelModifier>>>, StaticSourceWriter<LabeledContentStyleConfiguration.Content, ModifiedContent<LabeledContentStyleConfiguration.Content, AccessibilityLabeledContentContentModifier<LabeledContentStyleConfiguration.Label>>>>, AccessibilityFrameModifier>, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<LabeledContent<LabeledContentStyleConfiguration.Label, LabeledContentStyleConfiguration.Content>, StaticSourceWriter<LabeledContentStyleConfiguration.Label, ModifiedContent<LabeledContentStyleConfiguration.Label, AccessibilityLabeledContentLabelModifier>>>, StaticSourceWriter<LabeledContentStyleConfiguration.Content, ModifiedContent<LabeledContentStyleConfiguration.Content, AccessibilityLabeledContentContentModifier<LabeledContentStyleConfiguration.Label>>>> and conformance <> ModifiedContent<A, B>);
}

void specialized CellConfiguration.updateValues<A>(pre:post:)(char a1, char a2)
{
  uint64_t v3 = v2;
  int v4 = a2 & 1;
  int v5 = a1 & 1;
  uint64_t v6 = type metadata accessor for UIListContentConfiguration();
  uint64_t v57 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  size_t v8 = (char *)&v50 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v9);
  int v11 = (char *)&v50 - v10;
  MEMORY[0x1F4188790](v12);
  unsigned int v14 = (char *)&v50 - v13;
  type metadata accessor for PreferenceValues.Value<FocusItem?>(0, &lazy cache variable for type metadata for UICellConfigurationState?, MEMORY[0x1E4FB0F00], MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v15 - 8);
  uint64_t v17 = (char *)&v50 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v18);
  long long v20 = (char *)&v50 - v19;
  uint64_t v21 = type metadata accessor for UICellConfigurationState();
  MEMORY[0x1F4188790](v21);
  long long v23 = (char *)&v50 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v24);
  if (v5 != v4)
  {
    uint64_t v28 = v25;
    long long v55 = v11;
    long long v56 = v8;
    uint64_t v52 = (char *)&v50 - v26;
    long long v54 = v14;
    uint64_t v29 = v27;
    uint64_t v30 = v6;
    uint64_t v31 = type metadata accessor for CellConfiguration();
    int v32 = *(unsigned __int8 *)(v3 + *(int *)(v31 + 28));
    uint64_t v33 = v29;
    uint64_t v34 = (unsigned int (**)(char *, uint64_t, uint64_t))(v29 + 48);
    int64_t v53 = (int *)v31;
    if (v32 == 2)
    {
      outlined init with copy of UICellConfigurationState?(v3, (uint64_t)v20);
      char v35 = *v34;
      uint64_t v36 = v30;
      uint64_t v38 = (uint64_t)v54;
      uint64_t v37 = (uint64_t)v55;
    }
    else
    {
      outlined init with copy of UICellConfigurationState?(v3, (uint64_t)v17);
      char v35 = *v34;
      if ((*v34)(v17, 1, v28) == 1)
      {
        outlined destroy of PreferenceValues.Value<FocusItem?>((uint64_t)v17, &lazy cache variable for type metadata for UICellConfigurationState?, MEMORY[0x1E4FB0F00], MEMORY[0x1E4FBB718]);
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v33 + 56))(v20, 1, 1, v28);
LABEL_12:
        outlined destroy of PreferenceValues.Value<FocusItem?>((uint64_t)v20, &lazy cache variable for type metadata for UICellConfigurationState?, MEMORY[0x1E4FB0F00], MEMORY[0x1E4FBB718]);
        return;
      }
      uint64_t v51 = v3;
      uint64_t v50 = *(void (**)(char *, char *, uint64_t))(v33 + 32);
      v50(v23, v17, v28);
      if (v32)
      {
        UICellConfigurationState.isDisabled.setter();
        uint64_t v36 = v30;
        uint64_t v38 = (uint64_t)v54;
        uint64_t v37 = (uint64_t)v55;
      }
      else
      {
        char v39 = UICellConfigurationState.isHighlighted.getter();
        uint64_t v36 = v30;
        uint64_t v38 = (uint64_t)v54;
        uint64_t v37 = (uint64_t)v55;
        if (v39)
        {
          UICellConfigurationState.isHighlighted.setter();
          UICellConfigurationState.isSelected.setter();
        }
      }
      v50(v20, v23, v28);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v33 + 56))(v20, 0, 1, v28);
      uint64_t v3 = v51;
    }
    uint64_t v40 = v56;
    if (v35(v20, 1, v28) == 1) {
      goto LABEL_12;
    }
    uint64_t v41 = v52;
    (*(void (**)(char *, char *, uint64_t))(v33 + 32))(v52, v20, v28);
    uint64_t v42 = v3;
    double v43 = v53;
    if (*(unsigned char *)(v42 + v53[5]) == 1)
    {
      uint64_t v44 = v42;
      double v45 = (void (**)(uint64_t, uint64_t))(v57 + 8);
      if (*(unsigned char *)(v42 + v53[6])) {
        static UIListContentConfiguration.header()();
      }
      else {
        static UIListContentConfiguration.cell()();
      }
      uint64_t v59 = v28;
      uint64_t v60 = MEMORY[0x1E4FB0EF8];
      boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v58);
      uint64_t v49 = v52;
      (*(void (**)(uint64_t *, char *, uint64_t))(v33 + 16))(boxed_opaque_existential_1, v52, v28);
      UIListContentConfiguration.updated(for:)();
      (*v45)(v37, v36);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v58);
      specialized CellConfiguration.Values.init(_:)(v38, v58);
      (*(void (**)(char *, uint64_t))(v33 + 8))(v49, v28);
      uint64_t v47 = v44 + v53[9];
    }
    else
    {
      static UIListContentConfiguration.cell()();
      uint64_t v59 = v28;
      uint64_t v60 = MEMORY[0x1E4FB0EF8];
      uint64_t v46 = __swift_allocate_boxed_opaque_existential_1(v58);
      (*(void (**)(uint64_t *, char *, uint64_t))(v33 + 16))(v46, v41, v28);
      UIListContentConfiguration.updated(for:)();
      (*(void (**)(char *, uint64_t))(v57 + 8))(v40, v36);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v58);
      specialized CellConfiguration.Values.init(_:)(v37, v58);
      (*(void (**)(char *, uint64_t))(v33 + 8))(v41, v28);
      uint64_t v47 = v42 + v43[9];
    }
    outlined assign with take of CellConfiguration.Values((uint64_t)v58, v47);
  }
}

uint64_t specialized CellConfiguration.updateValues<A>(pre:post:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UIListContentConfiguration();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v62 = v4;
  uint64_t v63 = v5;
  MEMORY[0x1F4188790](v4);
  uint64_t v60 = &v57[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1F4188790](v7);
  uint64_t v61 = &v57[-v8];
  MEMORY[0x1F4188790](v9);
  uint64_t v59 = &v57[-v10];
  uint64_t v11 = type metadata accessor for UICellConfigurationState();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x1F4188790](v11);
  uint64_t v64 = &v57[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1F4188790](v14);
  long long v65 = &v57[-v15];
  MEMORY[0x1F4188790](v16);
  uint64_t v18 = &v57[-v17];
  type metadata accessor for PreferenceValues.Value<FocusItem?>(0, &lazy cache variable for type metadata for UICellConfigurationState?, MEMORY[0x1E4FB0F00], MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v19 - 8);
  uint64_t v21 = &v57[-((v20 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1F4188790](v22);
  long long v66 = &v57[-v23];
  MEMORY[0x1F4188790](v24);
  uint64_t v26 = &v57[-v25];
  type metadata accessor for (UICellConfigurationState?, UICellConfigurationState?)();
  MEMORY[0x1F4188790](v27 - 8);
  uint64_t v29 = &v57[-((v28 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v31 = (uint64_t)&v29[*(int *)(v30 + 56)];
  outlined init with copy of UICellConfigurationState?(a1, (uint64_t)v29);
  outlined init with copy of UICellConfigurationState?(a2, v31);
  uint64_t v68 = v12;
  int v32 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
  if (v32((uint64_t)v29, 1, v11) == 1)
  {
    if (v32(v31, 1, v11) == 1)
    {
      uint64_t v33 = (uint64_t (*)(uint64_t))MEMORY[0x1E4FB0F00];
      uint64_t v34 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E4FBB718];
      uint64_t v35 = (uint64_t)v29;
      return outlined destroy of PreferenceValues.Value<FocusItem?>(v35, &lazy cache variable for type metadata for UICellConfigurationState?, v33, v34);
    }
  }
  else
  {
    outlined init with copy of UICellConfigurationState?((uint64_t)v29, (uint64_t)v26);
    if (v32(v31, 1, v11) != 1)
    {
      uint64_t v41 = v68;
      (*(void (**)(unsigned char *, uint64_t, uint64_t))(v68 + 32))(v18, v31, v11);
      lazy protocol witness table accessor for type ListTableViewCell and conformance ListTableViewCell(&lazy protocol witness table cache variable for type UICellConfigurationState and conformance UICellConfigurationState, MEMORY[0x1E4FB0F00]);
      int v58 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v42 = *(void (**)(unsigned char *, uint64_t))(v41 + 8);
      v42(v18, v11);
      v42(v26, v11);
      uint64_t result = outlined destroy of PreferenceValues.Value<FocusItem?>((uint64_t)v29, &lazy cache variable for type metadata for UICellConfigurationState?, MEMORY[0x1E4FB0F00], MEMORY[0x1E4FBB718]);
      if (v58) {
        return result;
      }
      goto LABEL_7;
    }
    (*(void (**)(unsigned char *, uint64_t))(v68 + 8))(v26, v11);
  }
  _s7SwiftUI9FocusItemVSgWOhTm_1((uint64_t)v29, (uint64_t (*)(void))type metadata accessor for (UICellConfigurationState?, UICellConfigurationState?));
LABEL_7:
  uint64_t v36 = (int *)type metadata accessor for CellConfiguration();
  uint64_t v37 = v67;
  int v38 = *(unsigned __int8 *)(v67 + v36[7]);
  if (v38 == 2)
  {
    char v39 = v66;
    outlined init with copy of UICellConfigurationState?(v67, (uint64_t)v66);
    uint64_t v40 = v68;
  }
  else
  {
    outlined init with copy of UICellConfigurationState?(v67, (uint64_t)v21);
    if (v32((uint64_t)v21, 1, v11) == 1)
    {
      outlined destroy of PreferenceValues.Value<FocusItem?>((uint64_t)v21, &lazy cache variable for type metadata for UICellConfigurationState?, MEMORY[0x1E4FB0F00], MEMORY[0x1E4FBB718]);
      char v39 = v66;
      (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(v68 + 56))(v66, 1, 1, v11);
LABEL_19:
      uint64_t v33 = (uint64_t (*)(uint64_t))MEMORY[0x1E4FB0F00];
      uint64_t v34 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E4FBB718];
      uint64_t v35 = (uint64_t)v39;
      return outlined destroy of PreferenceValues.Value<FocusItem?>(v35, &lazy cache variable for type metadata for UICellConfigurationState?, v33, v34);
    }
    uint64_t v44 = *(void (**)(unsigned char *, unsigned char *, uint64_t))(v68 + 32);
    double v45 = v64;
    v44(v64, v21, v11);
    if (v38)
    {
      UICellConfigurationState.isDisabled.setter();
      uint64_t v40 = v68;
      uint64_t v47 = v45;
    }
    else
    {
      char v46 = UICellConfigurationState.isHighlighted.getter();
      uint64_t v40 = v68;
      uint64_t v47 = v45;
      if (v46)
      {
        UICellConfigurationState.isHighlighted.setter();
        UICellConfigurationState.isSelected.setter();
        uint64_t v47 = v64;
      }
    }
    char v39 = v66;
    v44(v66, v47, v11);
    (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v40 + 56))(v39, 0, 1, v11);
  }
  if (v32((uint64_t)v39, 1, v11) == 1) {
    goto LABEL_19;
  }
  uint64_t v48 = v65;
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v40 + 32))(v65, v39, v11);
  if (*(unsigned char *)(v37 + v36[5]) == 1)
  {
    uint64_t v49 = (void (**)(unsigned char *, uint64_t))(v63 + 8);
    uint64_t v50 = v61;
    if (*(unsigned char *)(v37 + v36[6])) {
      static UIListContentConfiguration.header()();
    }
    else {
      static UIListContentConfiguration.cell()();
    }
    uint64_t v70 = v11;
    uint64_t v71 = MEMORY[0x1E4FB0EF8];
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v69);
    (*(void (**)(uint64_t *, unsigned char *, uint64_t))(v40 + 16))(boxed_opaque_existential_1, v48, v11);
    long long v56 = v59;
    UIListContentConfiguration.updated(for:)();
    (*v49)(v50, v62);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v69);
    uint64_t v54 = (uint64_t)v56;
  }
  else
  {
    uint64_t v51 = v60;
    static UIListContentConfiguration.cell()();
    uint64_t v70 = v11;
    uint64_t v71 = MEMORY[0x1E4FB0EF8];
    uint64_t v52 = __swift_allocate_boxed_opaque_existential_1(v69);
    (*(void (**)(uint64_t *, unsigned char *, uint64_t))(v40 + 16))(v52, v48, v11);
    int64_t v53 = v61;
    UIListContentConfiguration.updated(for:)();
    (*(void (**)(unsigned char *, uint64_t))(v63 + 8))(v51, v62);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v69);
    uint64_t v54 = (uint64_t)v53;
  }
  specialized CellConfiguration.Values.init(_:)(v54, v69);
  (*(void (**)(unsigned char *, uint64_t))(v40 + 8))(v48, v11);
  return outlined assign with take of CellConfiguration.Values((uint64_t)v69, v37 + v36[9]);
}

double specialized PlatformListViewBase<>.hostSizeThatFits(width:)()
{
  return specialized PlatformListViewBase<>.hostSizeThatFits(width:)(&OBJC_IVAR____TtC7SwiftUI25ListTableViewHeaderFooter_host, (void (*)(void))type metadata accessor for _UIHostingView<ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>>, (unint64_t *)&lazy protocol witness table cache variable for type _UIHostingView<ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>> and conformance _UIHostingView<A>, (void (*)(uint64_t))type metadata accessor for _UIHostingView<ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>>);
}

double specialized PlatformListViewBase<>.hostSizeThatFits(width:)(void *a1, void (*a2)(void), unint64_t *a3, void (*a4)(uint64_t))
{
  uint64_t v9 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9);
  uint64_t v12 = (char *)v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = *(void **)(v4 + *a1);
  if (!v13) {
    return *MEMORY[0x1E4F1DB30];
  }
  id v14 = v13;
  _ProposedSize.init(width:height:)();
  double v24 = v28;
  LOBYTE(v25) = v29;
  uint64_t v26 = v30;
  char v27 = v31;
  a2(0);
  lazy protocol witness table accessor for type ListTableViewCell and conformance ListTableViewCell(a3, a4);
  ViewRendererHost.sizeThatFits(_:)();
  double v16 = v15;
  uint64_t v18 = v17;
  (*(void (**)(char *, void, uint64_t))(v10 + 104))(v12, *MEMORY[0x1E4FBBEA8], v9);
  swift_retain();
  GraphHost.environment.getter();
  swift_release();
  double v24 = v28;
  uint64_t v25 = v29;
  EnvironmentValues.pixelLength.getter();
  double v20 = v19;
  swift_release();
  swift_release();
  v23[1] = v18;
  double v24 = v16;
  specialized FloatingPoint.round(_:toMultipleOf:)((uint64_t)v12, v20);
  specialized FloatingPoint.round(_:toMultipleOf:)((uint64_t)v12, v20);

  double v21 = v24;
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  return v21;
}

Swift::Void __swiftcall ListTableViewCell.prepareForReuse()()
{
  uint64_t v1 = type metadata accessor for UIListContentConfiguration();
  MEMORY[0x1F4188790](v1 - 8);
  uint64_t v3 = (char *)v20 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for CellConfiguration();
  uint64_t v5 = (int *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v8);
  uint64_t v10 = (char *)v20 - v9;
  uint64_t v11 = (objc_class *)type metadata accessor for ListTableViewCell();
  v21.receiver = v0;
  v21.super_class = v11;
  objc_msgSendSuper2(&v21, sel_prepareForReuse);
  uint64_t v12 = type metadata accessor for UICellConfigurationState();
  uint64_t v13 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56);
  v13(v7, 1, 1, v12);
  v7[v5[9]] = 2;
  outlined destroy of PreferenceValues.Value<FocusItem?>((uint64_t)v7, &lazy cache variable for type metadata for UICellConfigurationState?, MEMORY[0x1E4FB0F00], MEMORY[0x1E4FBB718]);
  v13(v7, 1, 1, v12);
  v7[v5[7]] = 0;
  static UIListContentConfiguration.cell()();
  specialized CellConfiguration.Values.init(_:)((uint64_t)v3, (uint64_t *)v22);
  id v14 = &v7[v5[11]];
  long long v15 = v22[1];
  *(_OWORD *)id v14 = v22[0];
  *((_OWORD *)v14 + 1) = v15;
  long long v16 = v22[3];
  *((_OWORD *)v14 + 2) = v22[2];
  *((_OWORD *)v14 + 3) = v16;
  v7[v5[8]] = 0;
  *(void *)&v7[v5[10]] = 0;
  outlined init with take of CellConfiguration((uint64_t)v7, (uint64_t)v10);
  uint64_t v17 = (uint64_t)&v0[OBJC_IVAR____TtC7SwiftUI17ListTableViewCell_cellConfiguration];
  swift_beginAccess();
  outlined assign with copy of CellConfiguration((uint64_t)v10, v17);
  swift_endAccess();
  uint64_t v18 = *(void **)&v0[OBJC_IVAR____TtC7SwiftUI17ListTableViewCell_host];
  if (v18)
  {
    v20[4] = 2;
    type metadata accessor for _UIHostingView<ModifiedContent<_ViewList_View, ListTableCellModifier>>();
    lazy protocol witness table accessor for type ListTableViewCell and conformance ListTableViewCell((unint64_t *)&lazy protocol witness table cache variable for type _UIHostingView<ModifiedContent<_ViewList_View, ListTableCellModifier>> and conformance _UIHostingView<A>, (void (*)(uint64_t))type metadata accessor for _UIHostingView<ModifiedContent<_ViewList_View, ListTableCellModifier>>);
    id v19 = v18;
    ViewRendererHost.invalidateProperties(_:mayDeferUpdate:)();
  }
  _s7SwiftUI9FocusItemVSgWOhTm_1((uint64_t)v10, (uint64_t (*)(void))type metadata accessor for CellConfiguration);
}

CGSize __swiftcall ListTableViewCell.sizeThatFits(_:)(CGSize a1)
{
  if (*(void *)&v1[OBJC_IVAR____TtC7SwiftUI17ListTableViewCell_host])
  {
    id v2 = objc_msgSend(v1, sel_contentView, a1.width, a1.height);
    objc_msgSend(v2, sel_bounds);

    double v3 = specialized PlatformListViewBase<>.hostSizeThatFits(width:)(&OBJC_IVAR____TtC7SwiftUI17ListTableViewCell_host, (void (*)(void))type metadata accessor for _UIHostingView<ModifiedContent<_ViewList_View, ListTableCellModifier>>, (unint64_t *)&lazy protocol witness table cache variable for type _UIHostingView<ModifiedContent<_ViewList_View, ListTableCellModifier>> and conformance _UIHostingView<A>, (void (*)(uint64_t))type metadata accessor for _UIHostingView<ModifiedContent<_ViewList_View, ListTableCellModifier>>);
    double v5 = v4;
    uint64_t v6 = &v1[OBJC_IVAR____TtC7SwiftUI17ListTableViewCell_cellConfiguration];
    swift_beginAccess();
    int v7 = v6[*(int *)(type metadata accessor for CellConfiguration() + 20)];
    if (v7 == 3 || v7 == 0)
    {
      id v9 = objc_msgSend(v1, sel_traitCollection);
      objc_msgSend(v9, sel_displayScale);
      double v11 = v10;

      double v5 = v5 + -1.0 / v11;
    }
  }
  else
  {
    double height = a1.height;
    double width = a1.width;
    v19.receiver = v1;
    v19.super_class = (Class)type metadata accessor for ListTableViewCell();
    objc_msgSendSuper2(&v19, sel_sizeThatFits_, width, height);
    double v3 = v14;
    double v5 = v15;
  }
  double v16 = v3;
  double v17 = v5;
  result.double height = v17;
  result.double width = v16;
  return result;
}

void ListTableViewCell.updateConfiguration(using:)(uint64_t a1)
{
  id v2 = v1;
  uint64_t v4 = type metadata accessor for CellConfiguration();
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v35 = (uint64_t)&v33 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E4FBB718];
  type metadata accessor for PreferenceValues.Value<FocusItem?>(0, (unint64_t *)&lazy cache variable for type metadata for UIBackgroundConfiguration?, MEMORY[0x1E4FB0F28], MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v7 - 8);
  uint64_t v34 = (uint64_t)&v33 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v9);
  double v11 = (char *)&v33 - v10;
  uint64_t v12 = (uint64_t (*)(uint64_t))MEMORY[0x1E4FB0F00];
  type metadata accessor for PreferenceValues.Value<FocusItem?>(0, &lazy cache variable for type metadata for UICellConfigurationState?, MEMORY[0x1E4FB0F00], v6);
  MEMORY[0x1F4188790](v13 - 8);
  double v15 = (char *)&v33 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v16);
  uint64_t v18 = (char *)&v33 - v17;
  Class isa = UICellConfigurationState._bridgeToObjectiveC()().super.super.isa;
  double v20 = (objc_class *)type metadata accessor for ListTableViewCell();
  v37.receiver = v2;
  v37.super_class = v20;
  objc_msgSendSuper2(&v37, sel__bridgedUpdateConfigurationUsingState_, isa);

  uint64_t v21 = type metadata accessor for UICellConfigurationState();
  uint64_t v22 = *(void *)(v21 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v22 + 16))(v18, a1, v21);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v22 + 56))(v18, 0, 1, v21);
  uint64_t v23 = (uint64_t)&v2[OBJC_IVAR____TtC7SwiftUI17ListTableViewCell_cellConfiguration];
  swift_beginAccess();
  outlined init with copy of UICellConfigurationState?(v23, (uint64_t)v15);
  outlined assign with copy of UICellConfigurationState?((uint64_t)v18, v23);
  specialized CellConfiguration.updateValues<A>(pre:post:)((uint64_t)v15, v23);
  outlined destroy of PreferenceValues.Value<FocusItem?>((uint64_t)v18, &lazy cache variable for type metadata for UICellConfigurationState?, v12, v6);
  outlined destroy of PreferenceValues.Value<FocusItem?>((uint64_t)v15, &lazy cache variable for type metadata for UICellConfigurationState?, v12, v6);
  uint64_t v24 = swift_endAccess();
  uint64_t v25 = *(void **)&v2[OBJC_IVAR____TtC7SwiftUI17ListTableViewCell_host];
  if (v25)
  {
    __int16 v36 = 2;
    type metadata accessor for _UIHostingView<ModifiedContent<_ViewList_View, ListTableCellModifier>>();
    lazy protocol witness table accessor for type ListTableViewCell and conformance ListTableViewCell((unint64_t *)&lazy protocol witness table cache variable for type _UIHostingView<ModifiedContent<_ViewList_View, ListTableCellModifier>> and conformance _UIHostingView<A>, (void (*)(uint64_t))type metadata accessor for _UIHostingView<ModifiedContent<_ViewList_View, ListTableCellModifier>>);
    id v26 = v25;
    ViewRendererHost.invalidateProperties(_:mayDeferUpdate:)();
  }
  MEMORY[0x18C116740](v24);
  uint64_t v27 = type metadata accessor for UIBackgroundConfiguration();
  uint64_t v28 = *(void *)(v27 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v28 + 48))(v11, 1, v27))
  {
    outlined destroy of PreferenceValues.Value<FocusItem?>((uint64_t)v11, (unint64_t *)&lazy cache variable for type metadata for UIBackgroundConfiguration?, MEMORY[0x1E4FB0F28], MEMORY[0x1E4FBB718]);
LABEL_5:
    if (static SemanticFeature.isEnabled.getter())
    {
      uint64_t v29 = v35;
      outlined init with copy of FocusItem?(v23, v35, (uint64_t (*)(void))type metadata accessor for CellConfiguration);
      uint64_t v30 = v34;
      CellConfiguration.backgroundConfiguration()(v34);
      _s7SwiftUI9FocusItemVSgWOhTm_1(v29, (uint64_t (*)(void))type metadata accessor for CellConfiguration);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v28 + 56))(v30, 0, 1, v27);
      MEMORY[0x18C116750](v30);
    }
    return;
  }
  char v31 = (void *)UIBackgroundConfiguration.customView.getter();
  outlined destroy of PreferenceValues.Value<FocusItem?>((uint64_t)v11, (unint64_t *)&lazy cache variable for type metadata for UIBackgroundConfiguration?, MEMORY[0x1E4FB0F28], MEMORY[0x1E4FBB718]);
  if (!v31) {
    goto LABEL_5;
  }
  type metadata accessor for _UIHostingView<ModifiedContent<AnyView, EmptyModifier>>();
  uint64_t v32 = swift_dynamicCastClass();

  if (!v32) {
    goto LABEL_5;
  }
}

id ListTableViewCell.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ListTableViewCell();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t ObjC metadata update function for ListTableViewCell()
{
  return type metadata accessor for ListTableViewCell();
}

_UNKNOWN **associated type witness table accessor for PlatformListViewBase.BaseContent : ListCellContent in ListTableViewCell()
{
  return &protocol witness table for _ViewList_View;
}

void protocol witness for PlatformListCell.selectionBehavior.getter in conformance ListTableViewCell(uint64_t a1@<X8>)
{
  uint64_t v2 = *(void *)(v1 + OBJC_IVAR____TtC7SwiftUI17ListTableViewCell_selectionBehavior);
  uint64_t v3 = *(void *)(v1 + OBJC_IVAR____TtC7SwiftUI17ListTableViewCell_selectionBehavior + 8);
  uint64_t v4 = *(void *)(v1 + OBJC_IVAR____TtC7SwiftUI17ListTableViewCell_selectionBehavior + 16);
  uint64_t v5 = *(void *)(v1 + OBJC_IVAR____TtC7SwiftUI17ListTableViewCell_selectionBehavior + 24);
  uint64_t v6 = *(void *)(v1 + OBJC_IVAR____TtC7SwiftUI17ListTableViewCell_selectionBehavior + 32);
  uint64_t v7 = *(void *)(v1 + OBJC_IVAR____TtC7SwiftUI17ListTableViewCell_selectionBehavior + 40);
  uint64_t v8 = *(void *)(v1 + OBJC_IVAR____TtC7SwiftUI17ListTableViewCell_selectionBehavior + 48);
  uint64_t v9 = *(void *)(v1 + OBJC_IVAR____TtC7SwiftUI17ListTableViewCell_selectionBehavior + 56);
  char v10 = *(unsigned char *)(v1 + OBJC_IVAR____TtC7SwiftUI17ListTableViewCell_selectionBehavior + 64);
  *(void *)a1 = v2;
  *(void *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = v4;
  *(void *)(a1 + 24) = v5;
  *(void *)(a1 + 32) = v6;
  *(void *)(a1 + 40) = v7;
  *(void *)(a1 + 48) = v8;
  *(void *)(a1 + 56) = v9;
  *(unsigned char *)(a1 + 64) = v10;
  LOBYTE(v11) = v10;
  outlined copy of PlatformItemList.Item.SelectionBehavior?(v2, v3, v4, v5, v6, v7, v8, v9, v11, (void (*)(uint64_t, uint64_t))outlined copy of AppIntentExecutor?, (void (*)(uint64_t, uint64_t))outlined copy of (@escaping @callee_guaranteed (@unowned Bool) -> ())?);
}

uint64_t protocol witness for UIHostingViewDelegate.hostingView<A>(_:willUpdate:) in conformance ListTableViewCell(uint64_t a1, uint64_t a2)
{
  return specialized ListTableViewCell.hostingView<A>(_:willUpdate:)(a2);
}

uint64_t protocol witness for UIHostingViewDelegate.hostingView<A>(_:didChangePreferences:) in conformance ListTableViewCell(uint64_t a1, uint64_t *a2)
{
  return specialized ListTableViewCell.hostingView<A>(_:didChangePreferences:)(a2);
}

void protocol witness for UIHostingViewDelegate.hostingView<A>(_:didChangePlatformItemList:) in conformance ListTableViewCell(uint64_t a1, uint64_t a2)
{
}

void *protocol witness for PlatformListViewBase.host.getter in conformance ListTableViewCell()
{
  uint64_t v1 = *(void **)(v0 + OBJC_IVAR____TtC7SwiftUI17ListTableViewCell_host);
  id v2 = v1;
  return v1;
}

uint64_t instantiation function for generic protocol witness table for ListTableViewCell(uint64_t a1)
{
  uint64_t result = lazy protocol witness table accessor for type ListTableViewCell and conformance ListTableViewCell(&lazy protocol witness table cache variable for type ListTableViewCell and conformance ListTableViewCell, (void (*)(uint64_t))type metadata accessor for ListTableViewCell);
  *(void *)(a1 + 8) = result;
  return result;
}

void specialized ListTableViewCell.hostingView<A>(_:didChangePlatformItemList:)(uint64_t a1)
{
  PlatformItemList.containerSelectionBehavior.getter(a1, (uint64_t)v31);
  char v2 = v32;
  uint64_t v3 = &v1[OBJC_IVAR____TtC7SwiftUI17ListTableViewCell_selectionBehavior];
  uint64_t v4 = *(void *)&v1[OBJC_IVAR____TtC7SwiftUI17ListTableViewCell_selectionBehavior];
  uint64_t v5 = *(void *)&v1[OBJC_IVAR____TtC7SwiftUI17ListTableViewCell_selectionBehavior + 8];
  uint64_t v6 = *(void *)&v1[OBJC_IVAR____TtC7SwiftUI17ListTableViewCell_selectionBehavior + 16];
  uint64_t v7 = *(void *)&v1[OBJC_IVAR____TtC7SwiftUI17ListTableViewCell_selectionBehavior + 24];
  uint64_t v8 = *(void *)&v1[OBJC_IVAR____TtC7SwiftUI17ListTableViewCell_selectionBehavior + 32];
  uint64_t v9 = *(void *)&v1[OBJC_IVAR____TtC7SwiftUI17ListTableViewCell_selectionBehavior + 40];
  uint64_t v10 = *(void *)&v1[OBJC_IVAR____TtC7SwiftUI17ListTableViewCell_selectionBehavior + 48];
  uint64_t v11 = *(void *)&v1[OBJC_IVAR____TtC7SwiftUI17ListTableViewCell_selectionBehavior + 56];
  char v12 = v1[OBJC_IVAR____TtC7SwiftUI17ListTableViewCell_selectionBehavior + 64];
  long long v13 = v31[1];
  *(_OWORD *)uint64_t v3 = v31[0];
  *((_OWORD *)v3 + 1) = v13;
  long long v14 = v31[3];
  *((_OWORD *)v3 + 2) = v31[2];
  *((_OWORD *)v3 + 3) = v14;
  v3[64] = v2;
  LOBYTE(v24) = v12;
  outlined copy of PlatformItemList.Item.SelectionBehavior?(v4, v5, v6, v7, v8, v9, v10, v11, v24, (void (*)(uint64_t, uint64_t))outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?, (void (*)(uint64_t, uint64_t))outlined consume of (@escaping @callee_guaranteed (@unowned Bool) -> ())?);
  if (*((void *)v3 + 1) == 1)
  {
    uint64_t v15 = 0;
  }
  else if ((unint64_t)v3[4] << 32 == 0x100000000)
  {
    uint64_t v15 = 3;
  }
  else
  {
    uint64_t v15 = 0;
  }
  objc_msgSend(v1, sel_setAccessoryType_, v15);
  uint64_t v16 = *((void *)v3 + 1);
  if (v16 != 1)
  {
    uint64_t v17 = *(void *)v3;
    uint64_t v18 = *((void *)v3 + 2);
    uint64_t v19 = *((void *)v3 + 3);
    uint64_t v20 = *((void *)v3 + 5);
    uint64_t v28 = *((void *)v3 + 6);
    uint64_t v29 = *((void *)v3 + 4);
    uint64_t v30 = *((void *)v3 + 7);
    char v21 = v3[64];
    uint64_t v22 = &v1[OBJC_IVAR____TtC7SwiftUI17ListTableViewCell_delegate];
    if (MEMORY[0x18C119DF0](&v1[OBJC_IVAR____TtC7SwiftUI17ListTableViewCell_delegate]))
    {
      uint64_t v23 = *((void *)v22 + 1);
      uint64_t ObjectType = swift_getObjectType();
      uint64_t v27 = *(void (**)(unsigned char *, BOOL, uint64_t, uint64_t))(v23 + 8);
      outlined copy of AppIntentExecutor?(v16);
      outlined copy of AppIntentExecutor?(v19);
      outlined copy of AppIntentExecutor?(v20);
      v27(v1, (v17 & 0xFF00000000) == 0x200000000, ObjectType, v23);
      swift_unknownObjectRelease();
      LOBYTE(v25) = v21;
      outlined copy of PlatformItemList.Item.SelectionBehavior?(v17, v16, v18, v19, v29, v20, v28, v30, v25, (void (*)(uint64_t, uint64_t))outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?, (void (*)(uint64_t, uint64_t))outlined consume of (@escaping @callee_guaranteed (@unowned Bool) -> ())?);
    }
  }
}

uint64_t specialized ListTableViewCell.hostingView<A>(_:didChangePreferences:)(uint64_t *a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = *a1;
  v16[0] = *a1;
  PreferenceValues.subscript.getter();
  char v4 = v17[0];
  int v5 = v18;
  uint64_t v6 = OBJC_IVAR____TtC7SwiftUI17ListTableViewCell_outlineRootSeed;
  if (v18 == -1
    || ((int v7 = *(_DWORD *)(v2 + OBJC_IVAR____TtC7SwiftUI17ListTableViewCell_outlineRootSeed), v7 != -1)
      ? (BOOL v8 = v18 == v7)
      : (BOOL v8 = 0),
        !v8))
  {
    uint64_t v9 = v2 + OBJC_IVAR____TtC7SwiftUI17ListTableViewCell_cellConfiguration;
    swift_beginAccess();
    uint64_t v10 = *(int *)(type metadata accessor for CellConfiguration() + 24);
    char v11 = *(unsigned char *)(v9 + v10);
    *(unsigned char *)(v9 + v10) = v17[0];
    specialized CellConfiguration.updateValues<A>(pre:post:)(v11, v4);
    swift_endAccess();
    char v12 = *(void **)(v2 + OBJC_IVAR____TtC7SwiftUI17ListTableViewCell_host);
    if (v12)
    {
      v17[0] = 2;
      type metadata accessor for _UIHostingView<ModifiedContent<_ViewList_View, ListTableCellModifier>>();
      lazy protocol witness table accessor for type ListTableViewCell and conformance ListTableViewCell((unint64_t *)&lazy protocol witness table cache variable for type _UIHostingView<ModifiedContent<_ViewList_View, ListTableCellModifier>> and conformance _UIHostingView<A>, (void (*)(uint64_t))type metadata accessor for _UIHostingView<ModifiedContent<_ViewList_View, ListTableCellModifier>>);
      id v13 = v12;
      ViewRendererHost.invalidateProperties(_:mayDeferUpdate:)();
    }
    *(_DWORD *)(v2 + v6) = v5;
  }
  PreferenceValues.subscript.getter();
  *(unsigned char *)(v2 + OBJC_IVAR____TtC7SwiftUI17ListTableViewCell_hasDragItemsPreference) = v17[0];
  v16[0] = v3;
  PreferenceValues.subscript.getter();
  outlined init with copy of FocusItem?((uint64_t)v17, (uint64_t)v16, (uint64_t (*)(void))type metadata accessor for FocusItem?);
  outlined destroy of PreferenceValues.Value<FocusItem?>((uint64_t)v17, &lazy cache variable for type metadata for PreferenceValues.Value<FocusItem?>, (uint64_t (*)(uint64_t))type metadata accessor for FocusItem?, MEMORY[0x1E4F3FD10]);
  uint64_t v14 = v2 + OBJC_IVAR____TtC7SwiftUI17ListTableViewCell_focusItem;
  swift_beginAccess();
  outlined assign with take of FocusItem?((uint64_t)v16, v14);
  return swift_endAccess();
}

uint64_t outlined assign with take of CellConfiguration.Values(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t specialized ListTableViewCell.hostingView<A>(_:willUpdate:)(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for CellConfiguration();
  MEMORY[0x1F4188790](v3 - 8);
  int v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  BOOL v8 = (char *)&v11 - v7;
  uint64_t v9 = v1 + OBJC_IVAR____TtC7SwiftUI17ListTableViewCell_cellConfiguration;
  swift_beginAccess();
  outlined init with copy of FocusItem?(v9, (uint64_t)v8, (uint64_t (*)(void))type metadata accessor for CellConfiguration);
  outlined init with copy of FocusItem?((uint64_t)v8, (uint64_t)v5, (uint64_t (*)(void))type metadata accessor for CellConfiguration);
  _s7SwiftUI15ModifiedContentVyAA010_ViewList_E0VAA0F17TableCellModifierVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<CellConfigurationKey>, (uint64_t)&type metadata for CellConfigurationKey, (uint64_t)&protocol witness table for CellConfigurationKey, MEMORY[0x1E4F40930]);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<CellConfigurationKey> and conformance EnvironmentPropertyKey<A>();
  swift_retain();
  PropertyList.subscript.setter();
  if (*(void *)(a1 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  swift_release();
  return _s7SwiftUI9FocusItemVSgWOhTm_1((uint64_t)v8, (uint64_t (*)(void))type metadata accessor for CellConfiguration);
}

uint64_t outlined init with copy of FocusItem?(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t specialized ListTableViewCell.hostingView<A>(_:didMoveTo:)()
{
  specialized _UIHostingView.viewGraph.getter();
  swift_retain();
  GraphHost.addPreference<A>(_:)();

  return swift_release();
}

uint64_t outlined assign with copy of UICellConfigurationState?(uint64_t a1, uint64_t a2)
{
  type metadata accessor for PreferenceValues.Value<FocusItem?>(0, &lazy cache variable for type metadata for UICellConfigurationState?, MEMORY[0x1E4FB0F00], MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

uint64_t outlined assign with copy of CellConfiguration(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CellConfiguration();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

uint64_t lazy protocol witness table accessor for type ListTableViewCell and conformance ListTableViewCell(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void __swiftcall ExpandedWindowToolbarStyle.init()()
{
}

void ExpandedWindowToolbarStyle.configureWindowToolbar(_:)()
{
}

void static ExpandedWindowToolbarStyle._makeInputs(style:inputs:)()
{
}

ValueMetadata *type metadata accessor for ExpandedWindowToolbarStyle()
{
  return &type metadata for ExpandedWindowToolbarStyle;
}

ValueMetadata *type metadata accessor for MenuStepperStyle()
{
  return &type metadata for MenuStepperStyle;
}

uint64_t associated type witness table accessor for StepperStyle.Body : View in MenuStepperStyle()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t closure #1 in MenuStepperStyle.makeBody(configuration:)@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v58 = a4;
  type metadata accessor for Button<Label<Text, Image>>();
  uint64_t v8 = v7 - 8;
  MEMORY[0x1F4188790](v7);
  uint64_t v57 = (uint64_t)&v48 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v10);
  uint64_t v56 = (uint64_t)&v48 - v11;
  MEMORY[0x1F4188790](v12);
  uint64_t v54 = (_WORD *)((char *)&v48 - v13);
  MEMORY[0x1F4188790](v14);
  uint64_t v16 = (uint64_t)&v48 - v15;
  uint64_t v17 = swift_allocObject();
  *(void *)(v17 + 16) = a1;
  uint64_t v49 = a1;
  uint64_t v18 = a2 & 1;
  *(unsigned char *)(v17 + 24) = a2 & 1;
  long long v19 = *(_OWORD *)(a3 + 16);
  *(_OWORD *)(v17 + 32) = *(_OWORD *)a3;
  *(_OWORD *)(v17 + 48) = v19;
  *(_OWORD *)(v17 + 64) = *(_OWORD *)(a3 + 32);
  *(void *)(v17 + 80) = *(void *)(a3 + 48);
  *(_WORD *)uint64_t v16 = 256;
  uint64_t v20 = (uint64_t (**)())(v16 + *(int *)(v8 + 44));
  uint64_t v55 = v16;
  *uint64_t v20 = partial apply for closure #1 in closure #1 in MenuStepperStyle.makeBody(configuration:);
  v20[1] = (uint64_t (*)())v17;
  uint64_t v53 = type metadata accessor for ButtonAction();
  swift_storeEnumTagMultiPayload();
  uint64_t v21 = v16 + *(int *)(v8 + 48);
  outlined copy of Environment<MenuActionDismissBehavior>.Content(a1, v18);
  outlined retain of StepperStyleConfiguration(a3);
  LocalizedStringKey.init(stringLiteral:)();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v22 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v24 = v23;
  LOBYTE(v16) = v25;
  uint64_t v48 = v26;
  type metadata accessor for ControlGroupStyleModifier<CompactMenuControlGroupStyle>(0, (unint64_t *)&lazy cache variable for type metadata for ImageProviderBox<Image.NamedImageProvider>, (uint64_t (*)(void))lazy protocol witness table accessor for type Image.NamedImageProvider and conformance Image.NamedImageProvider, MEMORY[0x1E4F41508], MEMORY[0x1E4F3FCE0]);
  uint64_t v52 = v27;
  uint64_t v28 = swift_allocObject();
  *(void *)(v28 + 16) = 0x73756E696DLL;
  *(void *)(v28 + 24) = 0xE500000000000000;
  *(_DWORD *)(v28 + 32) = 0;
  *(unsigned char *)(v28 + 36) = 1;
  long long v51 = xmmword_18834C6B0;
  *(_OWORD *)(v28 + 40) = xmmword_18834C6B0;
  *(_OWORD *)(v28 + 56) = xmmword_1883E0220;
  long long v50 = xmmword_18834C6D0;
  *(_OWORD *)(v28 + 72) = xmmword_18834C6D0;
  *(unsigned char *)(v28 + 88) = 0;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(void *)uint64_t v21 = v22;
  *(void *)(v21 + 8) = v24;
  *(unsigned char *)(v21 + 16) = v16 & 1;
  *(void *)(v21 + 24) = v48;
  *(void *)(v21 + 32) = v28;
  uint64_t v29 = swift_allocObject();
  uint64_t v30 = v49;
  *(void *)(v29 + 16) = v49;
  *(unsigned char *)(v29 + 24) = v18;
  long long v31 = *(_OWORD *)(a3 + 16);
  *(_OWORD *)(v29 + 32) = *(_OWORD *)a3;
  *(_OWORD *)(v29 + 48) = v31;
  *(_OWORD *)(v29 + 64) = *(_OWORD *)(a3 + 32);
  *(void *)(v29 + 80) = *(void *)(a3 + 48);
  uint64_t v32 = (uint64_t)v54;
  *uint64_t v54 = 256;
  uint64_t v33 = (uint64_t (**)())(v32 + *(int *)(v8 + 44));
  *uint64_t v33 = partial apply for closure #3 in closure #1 in MenuStepperStyle.makeBody(configuration:);
  v33[1] = (uint64_t (*)())v29;
  swift_storeEnumTagMultiPayload();
  uint64_t v34 = v32 + *(int *)(v8 + 48);
  outlined copy of Environment<MenuActionDismissBehavior>.Content(v30, v18);
  outlined retain of StepperStyleConfiguration(a3);
  LocalizedStringKey.init(stringLiteral:)();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v35 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v37 = v36;
  LOBYTE(v28) = v38;
  uint64_t v40 = v39;
  uint64_t v41 = swift_allocObject();
  *(void *)(v41 + 16) = 1937075312;
  *(void *)(v41 + 24) = 0xE400000000000000;
  *(_DWORD *)(v41 + 32) = 0;
  *(unsigned char *)(v41 + 36) = 1;
  *(_OWORD *)(v41 + 40) = v51;
  *(_OWORD *)(v41 + 56) = xmmword_1883E0230;
  *(_OWORD *)(v41 + 72) = v50;
  *(unsigned char *)(v41 + 88) = 0;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(void *)uint64_t v34 = v35;
  *(void *)(v34 + 8) = v37;
  *(unsigned char *)(v34 + 16) = v28 & 1;
  *(void *)(v34 + 24) = v40;
  *(void *)(v34 + 32) = v41;
  uint64_t v43 = v55;
  uint64_t v42 = v56;
  outlined init with copy of ControlGroup<LabeledControlGroupContent<TupleView<(Button<Label<Text, Image>>, Button<Label<Text, Image>>)>, StepperStyleConfiguration.Label>>(v55, v56, (uint64_t (*)(void))type metadata accessor for Button<Label<Text, Image>>);
  uint64_t v44 = v57;
  outlined init with copy of ControlGroup<LabeledControlGroupContent<TupleView<(Button<Label<Text, Image>>, Button<Label<Text, Image>>)>, StepperStyleConfiguration.Label>>(v32, v57, (uint64_t (*)(void))type metadata accessor for Button<Label<Text, Image>>);
  uint64_t v45 = v58;
  outlined init with copy of ControlGroup<LabeledControlGroupContent<TupleView<(Button<Label<Text, Image>>, Button<Label<Text, Image>>)>, StepperStyleConfiguration.Label>>(v42, v58, (uint64_t (*)(void))type metadata accessor for Button<Label<Text, Image>>);
  type metadata accessor for (Button<Label<Text, Image>>, Button<Label<Text, Image>>)();
  outlined init with copy of ControlGroup<LabeledControlGroupContent<TupleView<(Button<Label<Text, Image>>, Button<Label<Text, Image>>)>, StepperStyleConfiguration.Label>>(v44, v45 + *(int *)(v46 + 48), (uint64_t (*)(void))type metadata accessor for Button<Label<Text, Image>>);
  outlined destroy of ControlGroup<LabeledControlGroupContent<TupleView<(Button<Label<Text, Image>>, Button<Label<Text, Image>>)>, StepperStyleConfiguration.Label>>(v32, (uint64_t (*)(void))type metadata accessor for Button<Label<Text, Image>>);
  outlined destroy of ControlGroup<LabeledControlGroupContent<TupleView<(Button<Label<Text, Image>>, Button<Label<Text, Image>>)>, StepperStyleConfiguration.Label>>(v43, (uint64_t (*)(void))type metadata accessor for Button<Label<Text, Image>>);
  outlined destroy of ControlGroup<LabeledControlGroupContent<TupleView<(Button<Label<Text, Image>>, Button<Label<Text, Image>>)>, StepperStyleConfiguration.Label>>(v44, (uint64_t (*)(void))type metadata accessor for Button<Label<Text, Image>>);
  return outlined destroy of ControlGroup<LabeledControlGroupContent<TupleView<(Button<Label<Text, Image>>, Button<Label<Text, Image>>)>, StepperStyleConfiguration.Label>>(v42, (uint64_t (*)(void))type metadata accessor for Button<Label<Text, Image>>);
}

uint64_t closure #1 in closure #1 in MenuStepperStyle.makeBody(configuration:)(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = a3[3];
  uint64_t v4 = a3[4];
  uint64_t v5 = (void (*)(uint64_t))a3[5];
  v5(1);
  if (v3)
  {
    uint64_t v6 = swift_allocObject();
    *(void *)(v6 + 16) = v3;
    *(void *)(v6 + 24) = v4;
    uint64_t v7 = closure #1 in PlatformViewCoordinator.dispatchUpdate(_:)partial apply;
  }
  else
  {
    uint64_t v7 = (uint64_t (*)())destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
  }
  uint64_t v8 = outlined copy of AppIntentExecutor?(v3);
  ((void (*)(uint64_t))v7)(v8);
  swift_release();
  return ((uint64_t (*)(void))v5)(0);
}

uint64_t closure #3 in closure #1 in MenuStepperStyle.makeBody(configuration:)(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = a3[1];
  uint64_t v4 = a3[2];
  uint64_t v5 = (void (*)(uint64_t))a3[5];
  v5(1);
  if (v3)
  {
    uint64_t v6 = swift_allocObject();
    *(void *)(v6 + 16) = v3;
    *(void *)(v6 + 24) = v4;
    uint64_t v7 = partial apply for thunk for @callee_guaranteed () -> ();
  }
  else
  {
    uint64_t v7 = (uint64_t (*)())destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
  }
  uint64_t v8 = outlined copy of AppIntentExecutor?(v3);
  ((void (*)(uint64_t))v7)(v8);
  swift_release();
  return ((uint64_t (*)(void))v5)(0);
}

uint64_t protocol witness for StepperStyle.makeBody(configuration:) in conformance MenuStepperStyle@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  type metadata accessor for ControlGroup<LabeledControlGroupContent<TupleView<(Button<Label<Text, Image>>, Button<Label<Text, Image>>)>, StepperStyleConfiguration.Label>>(0);
  uint64_t v6 = v5 - 8;
  MEMORY[0x1F4188790](v5);
  uint64_t v8 = (char *)v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for ModifiedContent<ControlGroup<LabeledControlGroupContent<TupleView<(Button<Label<Text, Image>>, Button<Label<Text, Image>>)>, StepperStyleConfiguration.Label>>, ControlGroupStyleModifier<CompactMenuControlGroupStyle>>();
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v11 = (char *)v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  long long v12 = *(_OWORD *)(a1 + 16);
  v17[0] = *(_OWORD *)a1;
  v17[1] = v12;
  _WORD v17[2] = *(_OWORD *)(a1 + 32);
  uint64_t v18 = *(void *)(a1 + 48);
  closure #1 in MenuStepperStyle.makeBody(configuration:)(*(void *)v2, *(unsigned char *)(v2 + 8), (uint64_t)v17, (uint64_t)v8);
  v8[*(int *)(v6 + 44)] = 1;
  outlined init with copy of ControlGroup<LabeledControlGroupContent<TupleView<(Button<Label<Text, Image>>, Button<Label<Text, Image>>)>, StepperStyleConfiguration.Label>>((uint64_t)v8, (uint64_t)v11, (uint64_t (*)(void))type metadata accessor for ControlGroup<LabeledControlGroupContent<TupleView<(Button<Label<Text, Image>>, Button<Label<Text, Image>>)>, StepperStyleConfiguration.Label>>);
  outlined destroy of ControlGroup<LabeledControlGroupContent<TupleView<(Button<Label<Text, Image>>, Button<Label<Text, Image>>)>, StepperStyleConfiguration.Label>>((uint64_t)v8, (uint64_t (*)(void))type metadata accessor for ControlGroup<LabeledControlGroupContent<TupleView<(Button<Label<Text, Image>>, Button<Label<Text, Image>>)>, StepperStyleConfiguration.Label>>);
  uint64_t KeyPath = swift_getKeyPath();
  outlined init with copy of ControlGroup<LabeledControlGroupContent<TupleView<(Button<Label<Text, Image>>, Button<Label<Text, Image>>)>, StepperStyleConfiguration.Label>>((uint64_t)v11, a2, (uint64_t (*)(void))type metadata accessor for ModifiedContent<ControlGroup<LabeledControlGroupContent<TupleView<(Button<Label<Text, Image>>, Button<Label<Text, Image>>)>, StepperStyleConfiguration.Label>>, ControlGroupStyleModifier<CompactMenuControlGroupStyle>>);
  type metadata accessor for ModifiedContent<ModifiedContent<ControlGroup<LabeledControlGroupContent<TupleView<(Button<Label<Text, Image>>, Button<Label<Text, Image>>)>, StepperStyleConfiguration.Label>>, ControlGroupStyleModifier<CompactMenuControlGroupStyle>>, _EnvironmentKeyTransformModifier<MenuActionDismissBehavior>>();
  uint64_t v15 = (uint64_t *)(a2 + *(int *)(v14 + 36));
  *uint64_t v15 = KeyPath;
  v15[1] = (uint64_t)closure #4 in PaletteControlGroupStyle.makeBody(configuration:);
  v15[2] = 0;
  return outlined destroy of ControlGroup<LabeledControlGroupContent<TupleView<(Button<Label<Text, Image>>, Button<Label<Text, Image>>)>, StepperStyleConfiguration.Label>>((uint64_t)v11, (uint64_t (*)(void))type metadata accessor for ModifiedContent<ControlGroup<LabeledControlGroupContent<TupleView<(Button<Label<Text, Image>>, Button<Label<Text, Image>>)>, StepperStyleConfiguration.Label>>, ControlGroupStyleModifier<CompactMenuControlGroupStyle>>);
}

void type metadata accessor for ControlGroup<LabeledControlGroupContent<TupleView<(Button<Label<Text, Image>>, Button<Label<Text, Image>>)>, StepperStyleConfiguration.Label>>(uint64_t a1)
{
}

void type metadata accessor for LabeledControlGroupContent<TupleView<(Button<Label<Text, Image>>, Button<Label<Text, Image>>)>, StepperStyleConfiguration.Label>()
{
  if (!lazy cache variable for type metadata for LabeledControlGroupContent<TupleView<(Button<Label<Text, Image>>, Button<Label<Text, Image>>)>, StepperStyleConfiguration.Label>)
  {
    type metadata accessor for TupleView<(Button<Label<Text, Image>>, Button<Label<Text, Image>>)>();
    _s7SwiftUI5LabelVyAA4TextVAA5ImageVGACyxq_GAA4ViewAAWlTm_3(&lazy protocol witness table cache variable for type TupleView<(Button<Label<Text, Image>>, Button<Label<Text, Image>>)> and conformance TupleView<A>, (void (*)(uint64_t))type metadata accessor for TupleView<(Button<Label<Text, Image>>, Button<Label<Text, Image>>)>);
    unint64_t v0 = type metadata accessor for LabeledControlGroupContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for LabeledControlGroupContent<TupleView<(Button<Label<Text, Image>>, Button<Label<Text, Image>>)>, StepperStyleConfiguration.Label>);
    }
  }
}

void type metadata accessor for TupleView<(Button<Label<Text, Image>>, Button<Label<Text, Image>>)>()
{
  if (!lazy cache variable for type metadata for TupleView<(Button<Label<Text, Image>>, Button<Label<Text, Image>>)>)
  {
    type metadata accessor for (Button<Label<Text, Image>>, Button<Label<Text, Image>>)();
    unint64_t v0 = type metadata accessor for TupleView();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TupleView<(Button<Label<Text, Image>>, Button<Label<Text, Image>>)>);
    }
  }
}

void type metadata accessor for (Button<Label<Text, Image>>, Button<Label<Text, Image>>)()
{
  if (!lazy cache variable for type metadata for (Button<Label<Text, Image>>, Button<Label<Text, Image>>))
  {
    type metadata accessor for Button<Label<Text, Image>>();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (Button<Label<Text, Image>>, Button<Label<Text, Image>>));
    }
  }
}

void type metadata accessor for ControlGroup<LabeledControlGroupContent<TupleView<(Button<Label<Text, Image>>, Button<Label<Text, Image>>)>, StepperStyleConfiguration.Label>>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(void), uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v9 = a3(255);
    uint64_t v10 = a4();
    unint64_t v11 = a5(a1, v9, v10);
    if (!v12) {
      atomic_store(v11, a2);
    }
  }
}

uint64_t lazy protocol witness table accessor for type LabeledControlGroupContent<TupleView<(Button<Label<Text, Image>>, Button<Label<Text, Image>>)>, StepperStyleConfiguration.Label> and conformance LabeledControlGroupContent<A, B>()
{
  return _s7SwiftUI5LabelVyAA4TextVAA5ImageVGACyxq_GAA4ViewAAWlTm_3(&lazy protocol witness table cache variable for type LabeledControlGroupContent<TupleView<(Button<Label<Text, Image>>, Button<Label<Text, Image>>)>, StepperStyleConfiguration.Label> and conformance LabeledControlGroupContent<A, B>, (void (*)(uint64_t))type metadata accessor for LabeledControlGroupContent<TupleView<(Button<Label<Text, Image>>, Button<Label<Text, Image>>)>, StepperStyleConfiguration.Label>);
}

void type metadata accessor for ModifiedContent<ControlGroup<LabeledControlGroupContent<TupleView<(Button<Label<Text, Image>>, Button<Label<Text, Image>>)>, StepperStyleConfiguration.Label>>, ControlGroupStyleModifier<CompactMenuControlGroupStyle>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ControlGroup<LabeledControlGroupContent<TupleView<(Button<Label<Text, Image>>, Button<Label<Text, Image>>)>, StepperStyleConfiguration.Label>>, ControlGroupStyleModifier<CompactMenuControlGroupStyle>>)
  {
    type metadata accessor for ControlGroup<LabeledControlGroupContent<TupleView<(Button<Label<Text, Image>>, Button<Label<Text, Image>>)>, StepperStyleConfiguration.Label>>(255);
    type metadata accessor for ControlGroupStyleModifier<CompactMenuControlGroupStyle>(255, &lazy cache variable for type metadata for ControlGroupStyleModifier<CompactMenuControlGroupStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type CompactMenuControlGroupStyle and conformance CompactMenuControlGroupStyle, (uint64_t)&type metadata for CompactMenuControlGroupStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ControlGroupStyleModifier);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ControlGroup<LabeledControlGroupContent<TupleView<(Button<Label<Text, Image>>, Button<Label<Text, Image>>)>, StepperStyleConfiguration.Label>>, ControlGroupStyleModifier<CompactMenuControlGroupStyle>>);
    }
  }
}

uint64_t outlined init with copy of ControlGroup<LabeledControlGroupContent<TupleView<(Button<Label<Text, Image>>, Button<Label<Text, Image>>)>, StepperStyleConfiguration.Label>>(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

void type metadata accessor for ModifiedContent<ModifiedContent<ControlGroup<LabeledControlGroupContent<TupleView<(Button<Label<Text, Image>>, Button<Label<Text, Image>>)>, StepperStyleConfiguration.Label>>, ControlGroupStyleModifier<CompactMenuControlGroupStyle>>, _EnvironmentKeyTransformModifier<MenuActionDismissBehavior>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ControlGroup<LabeledControlGroupContent<TupleView<(Button<Label<Text, Image>>, Button<Label<Text, Image>>)>, StepperStyleConfiguration.Label>>, ControlGroupStyleModifier<CompactMenuControlGroupStyle>>, _EnvironmentKeyTransformModifier<MenuActionDismissBehavior>>)
  {
    type metadata accessor for ModifiedContent<ControlGroup<LabeledControlGroupContent<TupleView<(Button<Label<Text, Image>>, Button<Label<Text, Image>>)>, StepperStyleConfiguration.Label>>, ControlGroupStyleModifier<CompactMenuControlGroupStyle>>();
    type metadata accessor for _EnvironmentKeyTransformModifier<MenuActionDismissBehavior>();
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ControlGroup<LabeledControlGroupContent<TupleView<(Button<Label<Text, Image>>, Button<Label<Text, Image>>)>, StepperStyleConfiguration.Label>>, ControlGroupStyleModifier<CompactMenuControlGroupStyle>>, _EnvironmentKeyTransformModifier<MenuActionDismissBehavior>>);
    }
  }
}

void type metadata accessor for _EnvironmentKeyTransformModifier<MenuActionDismissBehavior>()
{
  if (!lazy cache variable for type metadata for _EnvironmentKeyTransformModifier<MenuActionDismissBehavior>)
  {
    unint64_t v0 = type metadata accessor for _EnvironmentKeyTransformModifier();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyTransformModifier<MenuActionDismissBehavior>);
    }
  }
}

uint64_t outlined destroy of ControlGroup<LabeledControlGroupContent<TupleView<(Button<Label<Text, Image>>, Button<Label<Text, Image>>)>, StepperStyleConfiguration.Label>>(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t partial apply for closure #1 in closure #1 in MenuStepperStyle.makeBody(configuration:)()
{
  return closure #1 in closure #1 in MenuStepperStyle.makeBody(configuration:)(*(void *)(v0 + 16), *(unsigned __int8 *)(v0 + 24), (void *)(v0 + 32));
}

uint64_t outlined retain of StepperStyleConfiguration(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 24);
  swift_retain();
  outlined copy of AppIntentExecutor?(v2);
  outlined copy of AppIntentExecutor?(v3);
  swift_retain();
  return a1;
}

uint64_t partial apply for closure #3 in closure #1 in MenuStepperStyle.makeBody(configuration:)()
{
  return closure #3 in closure #1 in MenuStepperStyle.makeBody(configuration:)(*(void *)(v0 + 16), *(unsigned __int8 *)(v0 + 24), (void *)(v0 + 32));
}

uint64_t sub_1882811FC()
{
  swift_release();

  return swift_deallocObject();
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ControlGroup<LabeledControlGroupContent<TupleView<(Button<Label<Text, Image>>, Button<Label<Text, Image>>)>, StepperStyleConfiguration.Label>>, ControlGroupStyleModifier<CompactMenuControlGroupStyle>>, _EnvironmentKeyTransformModifier<MenuActionDismissBehavior>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ControlGroup<LabeledControlGroupContent<TupleView<(Button<Label<Text, Image>>, Button<Label<Text, Image>>)>, StepperStyleConfiguration.Label>>, ControlGroupStyleModifier<CompactMenuControlGroupStyle>>, _EnvironmentKeyTransformModifier<MenuActionDismissBehavior>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ControlGroup<LabeledControlGroupContent<TupleView<(Button<Label<Text, Image>>, Button<Label<Text, Image>>)>, StepperStyleConfiguration.Label>>, ControlGroupStyleModifier<CompactMenuControlGroupStyle>>, _EnvironmentKeyTransformModifier<MenuActionDismissBehavior>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ControlGroup<LabeledControlGroupContent<TupleView<(Button<Label<Text, Image>>, Button<Label<Text, Image>>)>, StepperStyleConfiguration.Label>>, ControlGroupStyleModifier<CompactMenuControlGroupStyle>>, _EnvironmentKeyTransformModifier<MenuActionDismissBehavior>>();
    lazy protocol witness table accessor for type ModifiedContent<ControlGroup<LabeledControlGroupContent<TupleView<(Button<Label<Text, Image>>, Button<Label<Text, Image>>)>, StepperStyleConfiguration.Label>>, ControlGroupStyleModifier<CompactMenuControlGroupStyle>> and conformance <> ModifiedContent<A, B>();
    _s7SwiftUI5LabelVyAA4TextVAA5ImageVGACyxq_GAA4ViewAAWlTm_3((unint64_t *)&lazy protocol witness table cache variable for type _EnvironmentKeyTransformModifier<MenuActionDismissBehavior> and conformance _EnvironmentKeyTransformModifier<A>, (void (*)(uint64_t))type metadata accessor for _EnvironmentKeyTransformModifier<MenuActionDismissBehavior>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ControlGroup<LabeledControlGroupContent<TupleView<(Button<Label<Text, Image>>, Button<Label<Text, Image>>)>, StepperStyleConfiguration.Label>>, ControlGroupStyleModifier<CompactMenuControlGroupStyle>>, _EnvironmentKeyTransformModifier<MenuActionDismissBehavior>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ControlGroup<LabeledControlGroupContent<TupleView<(Button<Label<Text, Image>>, Button<Label<Text, Image>>)>, StepperStyleConfiguration.Label>>, ControlGroupStyleModifier<CompactMenuControlGroupStyle>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ControlGroup<LabeledControlGroupContent<TupleView<(Button<Label<Text, Image>>, Button<Label<Text, Image>>)>, StepperStyleConfiguration.Label>>, ControlGroupStyleModifier<CompactMenuControlGroupStyle>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ControlGroup<LabeledControlGroupContent<TupleView<(Button<Label<Text, Image>>, Button<Label<Text, Image>>)>, StepperStyleConfiguration.Label>>, ControlGroupStyleModifier<CompactMenuControlGroupStyle>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ControlGroup<LabeledControlGroupContent<TupleView<(Button<Label<Text, Image>>, Button<Label<Text, Image>>)>, StepperStyleConfiguration.Label>>, ControlGroupStyleModifier<CompactMenuControlGroupStyle>>();
    _s7SwiftUI5LabelVyAA4TextVAA5ImageVGACyxq_GAA4ViewAAWlTm_3(&lazy protocol witness table cache variable for type ControlGroup<LabeledControlGroupContent<TupleView<(Button<Label<Text, Image>>, Button<Label<Text, Image>>)>, StepperStyleConfiguration.Label>> and conformance ControlGroup<A>, type metadata accessor for ControlGroup<LabeledControlGroupContent<TupleView<(Button<Label<Text, Image>>, Button<Label<Text, Image>>)>, StepperStyleConfiguration.Label>>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ControlGroup<LabeledControlGroupContent<TupleView<(Button<Label<Text, Image>>, Button<Label<Text, Image>>)>, StepperStyleConfiguration.Label>>, ControlGroupStyleModifier<CompactMenuControlGroupStyle>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t UIHostingControllerSizingOptions.rawValue.getter()
{
  return *(void *)v0;
}

SwiftUI::UIHostingControllerSizingOptions __swiftcall UIHostingControllerSizingOptions.init(rawValue:)(SwiftUI::UIHostingControllerSizingOptions rawValue)
{
  v1->rawuint64_t Value = rawValue.rawValue;
  return rawValue;
}

void static UIHostingControllerSizingOptions.preferredContentSize.getter(void *a1@<X8>)
{
  *a1 = 1;
}

void static UIHostingControllerSizingOptions.intrinsicContentSize.getter(void *a1@<X8>)
{
  *a1 = 2;
}

unint64_t lazy protocol witness table accessor for type UIHostingControllerSizingOptions and conformance UIHostingControllerSizingOptions()
{
  unint64_t result = lazy protocol witness table cache variable for type UIHostingControllerSizingOptions and conformance UIHostingControllerSizingOptions;
  if (!lazy protocol witness table cache variable for type UIHostingControllerSizingOptions and conformance UIHostingControllerSizingOptions)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UIHostingControllerSizingOptions and conformance UIHostingControllerSizingOptions);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type UIHostingControllerSizingOptions and conformance UIHostingControllerSizingOptions;
  if (!lazy protocol witness table cache variable for type UIHostingControllerSizingOptions and conformance UIHostingControllerSizingOptions)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UIHostingControllerSizingOptions and conformance UIHostingControllerSizingOptions);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type UIHostingControllerSizingOptions and conformance UIHostingControllerSizingOptions;
  if (!lazy protocol witness table cache variable for type UIHostingControllerSizingOptions and conformance UIHostingControllerSizingOptions)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UIHostingControllerSizingOptions and conformance UIHostingControllerSizingOptions);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type UIHostingControllerSizingOptions and conformance UIHostingControllerSizingOptions;
  if (!lazy protocol witness table cache variable for type UIHostingControllerSizingOptions and conformance UIHostingControllerSizingOptions)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UIHostingControllerSizingOptions and conformance UIHostingControllerSizingOptions);
  }
  return result;
}

ValueMetadata *type metadata accessor for UIHostingControllerSizingOptions()
{
  return &type metadata for UIHostingControllerSizingOptions;
}

uint64_t WindowBackgroundShapeStyle._apply(to:)(uint64_t a1)
{
  EnvironmentValues.colorScheme.getter();
  v4.n128_u32[0] = 1.0;
  v5.n128_u32[1] = 0;
  if (v7) {
    v4.n128_f32[0] = 0.0;
  }
  v3.n128_u32[0] = 1.0;
  v5.n128_u32[0] = v4.n128_u32[0];
  v2.n128_u32[0] = v4.n128_u32[0];

  return MEMORY[0x1F4100D68](a1, v4, v5, v2, v3);
}

uint64_t protocol witness for ShapeStyle._apply(to:) in conformance WindowBackgroundShapeStyle(uint64_t a1)
{
  EnvironmentValues.colorScheme.getter();
  v4.n128_u32[0] = 1.0;
  v5.n128_u32[1] = 0;
  if (v7) {
    v4.n128_f32[0] = 0.0;
  }
  v3.n128_u32[0] = 1.0;
  v5.n128_u32[0] = v4.n128_u32[0];
  v2.n128_u32[0] = v4.n128_u32[0];

  return MEMORY[0x1F4100D68](a1, v4, v5, v2, v3);
}

ValueMetadata *type metadata accessor for WindowBackgroundShapeStyle()
{
  return &type metadata for WindowBackgroundShapeStyle;
}

void *initializeBufferWithCopyOfBuffer for SearchFieldConfiguration(void *a1, void *a2, int *a3)
{
  int v3 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  uint64_t v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    char v7 = (void *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain();
  }
  else
  {
    char v7 = a1;
    a1[1] = a2[1];
    _s7SwiftUI7BindingVyAA16SearchFieldStateVGMaTm_4(0, &lazy cache variable for type metadata for Binding<SearchFieldState>, type metadata accessor for SearchFieldState, MEMORY[0x1E4F41638]);
    uint64_t v9 = *(int *)(v8 + 32);
    uint64_t v10 = (char *)v7 + v9;
    unint64_t v11 = (char *)a2 + v9;
    *uint64_t v10 = *((unsigned char *)a2 + v9);
    v10[1] = *((unsigned char *)a2 + v9 + 1);
    *((_WORD *)v10 + 1) = *(_WORD *)((char *)a2 + v9 + 2);
    v10[8] = *((unsigned char *)a2 + v9 + 8);
    *((_DWORD *)v10 + 1) = *(_DWORD *)((char *)a2 + v9 + 4);
    uint64_t v12 = (int *)type metadata accessor for SearchFieldState(0);
    uint64_t v13 = v12[9];
    uint64_t v32 = &v11[v13];
    uint64_t v33 = &v10[v13];
    uint64_t v14 = type metadata accessor for AttributedString();
    uint64_t v15 = *(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 16);
    swift_retain();
    swift_retain();
    v15(v33, v32, v14);
    v10[v12[10]] = v11[v12[10]];
    uint64_t v16 = v12[11];
    uint64_t v17 = &v10[v16];
    uint64_t v18 = &v11[v16];
    void v17[4] = v18[4];
    *(_DWORD *)uint64_t v17 = *(_DWORD *)v18;
    uint64_t v19 = a3[6];
    uint64_t v20 = (char *)v7 + v19;
    uint64_t v21 = (char *)a2 + v19;
    int v22 = v21[8];
    if (v22 == 255)
    {
      *(void *)uint64_t v20 = *(void *)v21;
      v20[8] = v21[8];
    }
    else
    {
      char v23 = v22 & 1;
      uint64_t v24 = *(void *)v21;
      outlined copy of PlatformItemCollection.Storage(*(void *)v21, v22 & 1);
      *(void *)uint64_t v20 = v24;
      v20[8] = v23;
    }
    uint64_t v25 = a3[8];
    *((unsigned char *)v7 + a3[7]) = *((unsigned char *)a2 + a3[7]);
    uint64_t v26 = (char *)v7 + v25;
    uint64_t v27 = (char *)a2 + v25;
    uint64_t v28 = *(void *)((char *)a2 + v25);
    uint64_t v29 = *((void *)v27 + 1);
    char v30 = v27[16];
    outlined copy of Text.Storage(v28, v29, v30);
    *(void *)uint64_t v26 = v28;
    *((void *)v26 + 1) = v29;
    v26[16] = v30;
    *((void *)v26 + 3) = *((void *)v27 + 3);
    swift_bridgeObjectRetain();
  }
  return v7;
}

void *assignWithCopy for SearchFieldConfiguration(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  _s7SwiftUI7BindingVyAA16SearchFieldStateVGMaTm_4(0, &lazy cache variable for type metadata for Binding<SearchFieldState>, type metadata accessor for SearchFieldState, MEMORY[0x1E4F41638]);
  uint64_t v7 = *(int *)(v6 + 32);
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  *uint64_t v8 = *((unsigned char *)a2 + v7);
  v8[1] = *((unsigned char *)a2 + v7 + 1);
  void v8[2] = *((unsigned char *)a2 + v7 + 2);
  v8[3] = *((unsigned char *)a2 + v7 + 3);
  LODWORD(v7) = *(_DWORD *)((char *)a2 + v7 + 4);
  unsigned char v8[8] = v9[8];
  *((_DWORD *)v8 + 1) = v7;
  uint64_t v10 = (int *)type metadata accessor for SearchFieldState(0);
  uint64_t v11 = v10[9];
  uint64_t v12 = &v8[v11];
  uint64_t v13 = &v9[v11];
  uint64_t v14 = type metadata accessor for AttributedString();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 24))(v12, v13, v14);
  v8[v10[10]] = v9[v10[10]];
  uint64_t v15 = v10[11];
  uint64_t v16 = &v8[v15];
  uint64_t v17 = &v9[v15];
  *(_DWORD *)uint64_t v16 = *(_DWORD *)v17;
  v16[4] = v17[4];
  uint64_t v18 = a3[6];
  uint64_t v19 = (uint64_t)a1 + v18;
  uint64_t v20 = (char *)a2 + v18;
  LODWORD(v16) = *((unsigned __int8 *)a1 + v18 + 8);
  int v21 = *((unsigned __int8 *)a2 + v18 + 8);
  if (v16 == 255)
  {
    if (v21 == 255)
    {
      uint64_t v23 = *(void *)v20;
      *(unsigned char *)(v19 + 8) = v20[8];
      *(void *)uint64_t v19 = v23;
    }
    else
    {
      char v28 = v21 & 1;
      uint64_t v29 = *(void *)v20;
      outlined copy of PlatformItemCollection.Storage(v29, v21 & 1);
      *(void *)uint64_t v19 = v29;
      *(unsigned char *)(v19 + 8) = v28;
    }
  }
  else if (v21 == 255)
  {
    outlined destroy of PlatformItemCollection(v19);
    char v22 = v20[8];
    *(void *)uint64_t v19 = *(void *)v20;
    *(unsigned char *)(v19 + 8) = v22;
  }
  else
  {
    char v24 = v21 & 1;
    uint64_t v25 = *(void *)v20;
    outlined copy of PlatformItemCollection.Storage(v25, v21 & 1);
    uint64_t v26 = *(void *)v19;
    char v27 = *(unsigned char *)(v19 + 8);
    *(void *)uint64_t v19 = v25;
    *(unsigned char *)(v19 + 8) = v24;
    outlined consume of PlatformItemCollection.Storage(v26, v27);
  }
  *((unsigned char *)a1 + a3[7]) = *((unsigned char *)a2 + a3[7]);
  uint64_t v30 = a3[8];
  long long v31 = (char *)a1 + v30;
  uint64_t v32 = (char *)a2 + v30;
  uint64_t v33 = *(void *)((char *)a2 + v30);
  uint64_t v34 = *((void *)v32 + 1);
  char v35 = v32[16];
  outlined copy of Text.Storage(v33, v34, v35);
  uint64_t v36 = *(void *)v31;
  uint64_t v37 = *((void *)v31 + 1);
  char v38 = v31[16];
  *(void *)long long v31 = v33;
  *((void *)v31 + 1) = v34;
  v31[16] = v35;
  outlined consume of Text.Storage(v36, v37, v38);
  *((void *)v31 + 3) = *((void *)v32 + 3);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

void *initializeWithTake for SearchFieldConfiguration(void *a1, void *a2, int *a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  _s7SwiftUI7BindingVyAA16SearchFieldStateVGMaTm_4(0, &lazy cache variable for type metadata for Binding<SearchFieldState>, type metadata accessor for SearchFieldState, MEMORY[0x1E4F41638]);
  uint64_t v8 = *(int *)(v7 + 32);
  uint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  *uint64_t v9 = *((unsigned char *)a2 + v8);
  v9[1] = *((unsigned char *)a2 + v8 + 1);
  *((_WORD *)v9 + 1) = *(_WORD *)((char *)a2 + v8 + 2);
  unsigned char v9[8] = *((unsigned char *)a2 + v8 + 8);
  *((_DWORD *)v9 + 1) = *(_DWORD *)((char *)a2 + v8 + 4);
  uint64_t v11 = (int *)type metadata accessor for SearchFieldState(0);
  uint64_t v12 = v11[9];
  uint64_t v13 = &v9[v12];
  uint64_t v14 = &v10[v12];
  uint64_t v15 = type metadata accessor for AttributedString();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 32))(v13, v14, v15);
  v9[v11[10]] = v10[v11[10]];
  uint64_t v16 = v11[11];
  uint64_t v17 = &v9[v16];
  uint64_t v18 = &v10[v16];
  void v17[4] = v18[4];
  *(_DWORD *)uint64_t v17 = *(_DWORD *)v18;
  uint64_t v19 = a3[6];
  uint64_t v20 = a3[7];
  int v21 = (char *)a1 + v19;
  char v22 = (char *)a2 + v19;
  *(void *)int v21 = *(void *)v22;
  v21[8] = v22[8];
  *((unsigned char *)a1 + v20) = *((unsigned char *)a2 + v20);
  uint64_t v23 = a3[8];
  char v24 = (_OWORD *)((char *)a1 + v23);
  uint64_t v25 = (_OWORD *)((char *)a2 + v23);
  long long v26 = v25[1];
  _OWORD *v24 = *v25;
  v24[1] = v26;
  return a1;
}

uint64_t sub_188281C24(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _s7SwiftUI7BindingVyAA16SearchFieldStateVGMaTm_4(0, &lazy cache variable for type metadata for Binding<SearchFieldState>, type metadata accessor for SearchFieldState, MEMORY[0x1E4F41638]);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 32) + 24);
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    return (v10 + 1);
  }
}

void sub_188281D18(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  _s7SwiftUI7BindingVyAA16SearchFieldStateVGMaTm_4(0, &lazy cache variable for type metadata for Binding<SearchFieldState>, type metadata accessor for SearchFieldState, MEMORY[0x1E4F41638]);
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v10(a1, a2, a2, v8);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 32) + 24) = (a2 - 1);
  }
}

uint64_t *initializeBufferWithCopyOfBuffer for SearchFieldConfigurationReader(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for AttributedString();
  uint64_t v7 = *(void *)(v6 - 8);
  unint64_t v8 = *(_DWORD *)(v7 + 80);
  uint64_t v9 = v8 | 3;
  uint64_t v10 = *(void *)(v7 + 64);
  unint64_t v11 = ((v8 + 16) & ~(v8 | 3)) + ((((v8 + 9) & ~v8) + v10) & 0xFFFFFFFFFFFFFFFCLL);
  uint64_t v12 = *(void *)(a3 + 24);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = *(_DWORD *)(v13 + 80);
  uint64_t v15 = v14 + 16;
  unint64_t v16 = ((v14 + 16 + ((v11 + 40) & 0xFFFFFFFFFFFFFFF8)) & ~v14) + *(void *)(v13 + 64);
  int v17 = (*(_DWORD *)(v13 + 80) | *(_DWORD *)(v7 + 80)) & 0x100000;
  uint64_t v18 = *a2;
  *a1 = *a2;
  if ((v14 | v8) > 7 || v17 != 0 || v16 > 0x18)
  {
    a1 = (uint64_t *)(v18 + (((v14 | v8) & 0xF8 ^ 0x1F8) & ((v14 | v8) + 16)));
    swift_retain();
  }
  else
  {
    int v21 = (void *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
    char v22 = (void *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
    *int v21 = *v22;
    uint64_t v23 = ((unint64_t)v21 + v9 + 8) & ~v9;
    uint64_t v24 = ((unint64_t)v22 + v9 + 8) & ~v9;
    uint64_t v46 = v6;
    uint64_t v48 = v12;
    *(unsigned char *)uint64_t v23 = *(unsigned char *)v24;
    *(unsigned char *)(v23 | 1) = *(unsigned char *)(v24 | 1);
    uint64_t v25 = ~v8;
    unint64_t v26 = v11 + 9;
    uint64_t v47 = ~v14;
    *(unsigned char *)(v23 | 2) = *(unsigned char *)(v24 | 2);
    *(unsigned char *)(v23 | 3) = *(unsigned char *)(v24 | 3);
    unint64_t v27 = (v23 + 7) & 0xFFFFFFFFFFFFFFFCLL;
    unint64_t v28 = (v24 + 7) & 0xFFFFFFFFFFFFFFFCLL;
    int v29 = *(_DWORD *)v28;
    *(unsigned char *)(v27 + 4) = *(unsigned char *)(v28 + 4);
    *(_DWORD *)unint64_t v27 = v29;
    unint64_t v30 = v8 + 5;
    unint64_t v31 = (v30 + v27) & v25;
    unint64_t v32 = (v30 + v28) & v25;
    uint64_t v33 = *(void (**)(unint64_t, unint64_t, uint64_t))(v7 + 16);
    swift_retain();
    swift_retain();
    v33(v31, v32, v46);
    *(unsigned char *)(v31 + v10) = *(unsigned char *)(v32 + v10);
    unint64_t v34 = (v31 + v10) & 0xFFFFFFFFFFFFFFFCLL;
    unint64_t v35 = (v32 + v10) & 0xFFFFFFFFFFFFFFFCLL;
    int v36 = *(_DWORD *)(v35 + 4);
    *(unsigned char *)(v34 + 8) = *(unsigned char *)(v35 + 8);
    *(_DWORD *)(v34 + 4) = v36;
    unint64_t v37 = ((unint64_t)a1 + v26 + 7) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v38 = ((unint64_t)a2 + v26 + 7) & 0xFFFFFFFFFFFFFFF8;
    *(void *)unint64_t v37 = *(void *)v38;
    *(void *)(v37 + 8) = *(void *)(v38 + 8);
    *(unsigned char *)(v37 + 16) = *(unsigned char *)(v38 + 16);
    uint64_t v39 = (void *)(((unint64_t)a1 + v26 + 31) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v40 = (void *)(((unint64_t)a2 + v26 + 31) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v41 = v40[1];
    *uint64_t v39 = *v40;
    v39[1] = v41;
    unint64_t v42 = ((unint64_t)v39 + v15) & v47;
    unint64_t v43 = ((unint64_t)v40 + v15) & v47;
    uint64_t v44 = *(void (**)(unint64_t, unint64_t, uint64_t))(v13 + 16);
    swift_retain();
    swift_retain();
    swift_retain();
    v44(v42, v43, v48);
  }
  return a1;
}

void *initializeWithTake for SearchFieldConfigurationReader(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = (void *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v7 = (void *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v6 = *v7;
  uint64_t v8 = type metadata accessor for AttributedString();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(_DWORD *)(v9 + 80);
  unint64_t v11 = *(_DWORD *)(v9 + 80) & 0xFC ^ 0xFFFFFFFFFFFFFFFCLL;
  uint64_t v12 = (unsigned char *)(((unint64_t)v6 + v10 + 8) & v11);
  uint64_t v13 = (unsigned char *)(((unint64_t)v7 + v10 + 8) & v11);
  *uint64_t v12 = *v13;
  v12[1] = v13[1];
  unint64_t v12[2] = v13[2];
  void v12[3] = v13[3];
  unint64_t v14 = (unint64_t)(v12 + 7) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v15 = (unint64_t)(v13 + 7) & 0xFFFFFFFFFFFFFFFCLL;
  LOBYTE(v13) = *(unsigned char *)(v15 + 4);
  *(_DWORD *)unint64_t v14 = *(_DWORD *)v15;
  *(unsigned char *)(v14 + 4) = (_BYTE)v13;
  uint64_t v16 = (v10 + 5 + v14) & ~v10;
  uint64_t v17 = (v10 + 5 + v15) & ~v10;
  uint64_t v18 = v9 + 32;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 32))(v16, v17, v8);
  uint64_t v19 = *(void *)(v18 + 32);
  *(unsigned char *)(v19 + v16) = *(unsigned char *)(v19 + v17);
  unint64_t v20 = (v19 + v16) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v21 = (v19 + v17) & 0xFFFFFFFFFFFFFFFCLL;
  char v22 = *(unsigned char *)(v21 + 8);
  *(_DWORD *)(v20 + 4) = *(_DWORD *)(v21 + 4);
  *(unsigned char *)(v20 + 8) = v22;
  unint64_t v23 = ((v10 + 16) & v11) + ((v19 + ((v10 + 9) & ~v10)) & 0xFFFFFFFFFFFFFFFCLL) + 9;
  uint64_t v24 = (char *)a1 + v23;
  uint64_t v25 = (char *)a2 + v23;
  unint64_t v26 = (unint64_t)(v24 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v27 = (unint64_t)(v25 + 7) & 0xFFFFFFFFFFFFFFF8;
  char v28 = *(unsigned char *)(v27 + 16);
  *(_OWORD *)unint64_t v26 = *(_OWORD *)v27;
  *(unsigned char *)(v26 + 16) = v28;
  int v29 = (_OWORD *)((unint64_t)(v24 + 31) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v30 = (_OWORD *)((unint64_t)(v25 + 31) & 0xFFFFFFFFFFFFFFF8);
  *int v29 = *v30;
  uint64_t v31 = *(void *)(*(void *)(a3 + 24) - 8);
  (*(void (**)(unint64_t, unint64_t))(v31 + 32))(((unint64_t)v29 + *(unsigned __int8 *)(v31 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v31 + 80), ((unint64_t)v30 + *(unsigned __int8 *)(v31 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v31 + 80));
  return a1;
}

uint64_t getEnumTagSinglePayload for SearchFieldConfigurationReader(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(type metadata accessor for AttributedString() - 8);
  uint64_t v7 = v6;
  unsigned int v8 = *(_DWORD *)(v6 + 84);
  if (v8 <= 0x7FFFFFFF) {
    unsigned int v9 = 0x7FFFFFFF;
  }
  else {
    unsigned int v9 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v10 = *(void *)(*(void *)(a3 + 24) - 8);
  uint64_t v11 = *(unsigned int *)(v10 + 84);
  uint64_t v12 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v13 = *(void *)(v6 + 64);
  uint64_t v14 = *(unsigned __int8 *)(v10 + 80);
  if (v11 <= v9) {
    unsigned int v15 = v9;
  }
  else {
    unsigned int v15 = *(_DWORD *)(v10 + 84);
  }
  if (!a2) {
    return 0;
  }
  unint64_t v16 = ((v12 + 16) & ~(v12 | 3)) + ((((v12 + 9) & ~v12) + v13) & 0xFFFFFFFFFFFFFFFCLL);
  uint64_t v17 = v14 + 16;
  if (a2 > v15)
  {
    unint64_t v18 = ((v17 + ((v16 + 40) & 0xFFFFFFFFFFFFFFF8)) & ~v14) + *(void *)(v10 + 64);
    char v19 = 8 * v18;
    if (v18 > 3) {
      goto LABEL_10;
    }
    unsigned int v22 = ((a2 - v15 + ~(-1 << v19)) >> v19) + 1;
    if (HIWORD(v22))
    {
      int v20 = *(_DWORD *)((char *)a1 + v18);
      if (!v20) {
        goto LABEL_28;
      }
      goto LABEL_18;
    }
    if (v22 > 0xFF)
    {
      int v20 = *(unsigned __int16 *)((char *)a1 + v18);
      if (!*(unsigned __int16 *)((char *)a1 + v18)) {
        goto LABEL_28;
      }
      goto LABEL_18;
    }
    if (v22 >= 2)
    {
LABEL_10:
      int v20 = *((unsigned __int8 *)a1 + v18);
      if (!*((unsigned char *)a1 + v18)) {
        goto LABEL_28;
      }
LABEL_18:
      int v23 = (v20 - 1) << v19;
      if (v18 > 3) {
        int v23 = 0;
      }
      if (v18)
      {
        if (v18 <= 3) {
          int v24 = ((v17 + ((v16 + 40) & 0xFFFFFFF8)) & ~v14) + *(_DWORD *)(v10 + 64);
        }
        else {
          int v24 = 4;
        }
        switch(v24)
        {
          case 2:
            int v25 = *a1;
            break;
          case 3:
            int v25 = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
            break;
          case 4:
            int v25 = *(_DWORD *)a1;
            break;
          default:
            int v25 = *(unsigned __int8 *)a1;
            break;
        }
      }
      else
      {
        int v25 = 0;
      }
      return v15 + (v25 | v23) + 1;
    }
  }
LABEL_28:
  if (v9 >= v11)
  {
    char v28 = (unint64_t *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
    if ((v8 & 0x80000000) == 0)
    {
      unint64_t v27 = *v28;
      goto LABEL_33;
    }
    unint64_t v30 = *(uint64_t (**)(unint64_t))(v7 + 48);
    return v30((v12 + (((((unint64_t)v28 + (v12 | 3) + 8) & ~(v12 | 3)) + 7) & 0xFFFFFFFFFFFFFFFCLL) + 5) & ~v12);
  }
  else
  {
    unint64_t v26 = (char *)a1 + v16 + 9;
    if (v15 == 0x7FFFFFFF)
    {
      unint64_t v27 = *(void *)(((unint64_t)(v26 + 7) & 0xFFFFFFFFFFFFFFF8) + 8);
LABEL_33:
      if (v27 >= 0xFFFFFFFF) {
        LODWORD(v27) = -1;
      }
      return (v27 + 1);
    }
    int v29 = *(uint64_t (**)(unint64_t, uint64_t))(v10 + 48);
    return v29((v17 + ((unint64_t)(v26 + 31) & 0xFFFFFFFFFFFFFFF8)) & ~v14, v11);
  }
}

void storeEnumTagSinglePayload for SearchFieldConfigurationReader(unsigned char *a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  uint64_t v8 = *(void *)(type metadata accessor for AttributedString() - 8);
  unsigned int v9 = *(_DWORD *)(v8 + 84);
  if (v9 <= 0x7FFFFFFF) {
    unsigned int v10 = 0x7FFFFFFF;
  }
  else {
    unsigned int v10 = *(_DWORD *)(v8 + 84);
  }
  uint64_t v11 = *(void *)(*(void *)(a4 + 24) - 8);
  uint64_t v12 = *(unsigned int *)(v11 + 84);
  uint64_t v13 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v14 = *(unsigned __int8 *)(v11 + 80);
  if (v12 <= v10) {
    unsigned int v15 = v10;
  }
  else {
    unsigned int v15 = *(_DWORD *)(v11 + 84);
  }
  unint64_t v16 = ((v13 + 16) & ~(v13 | 3)) + ((((v13 + 9) & ~v13) + *(void *)(v8 + 64)) & 0xFFFFFFFFFFFFFFFCLL);
  uint64_t v17 = v14 + 16;
  size_t v18 = ((v14 + 16 + ((v16 + 40) & 0xFFFFFFFFFFFFFFF8)) & ~v14) + *(void *)(v11 + 64);
  if (a3 <= v15)
  {
    int v19 = 0;
  }
  else if (v18 <= 3)
  {
    unsigned int v24 = ((a3 - v15 + ~(-1 << (8 * v18))) >> (8 * v18)) + 1;
    if (HIWORD(v24))
    {
      int v19 = 4;
    }
    else if (v24 >= 0x100)
    {
      int v19 = 2;
    }
    else
    {
      int v19 = v24 > 1;
    }
  }
  else
  {
    int v19 = 1;
  }
  if (v15 < a2)
  {
    unsigned int v20 = ~v15 + a2;
    if (v18 < 4)
    {
      int v21 = (v20 >> (8 * v18)) + 1;
      if (v18)
      {
        int v25 = v20 & ~(-1 << (8 * v18));
        bzero(a1, v18);
        if (v18 == 3)
        {
          *(_WORD *)a1 = v25;
          a1[2] = BYTE2(v25);
        }
        else if (v18 == 2)
        {
          *(_WORD *)a1 = v25;
        }
        else
        {
          *a1 = v25;
        }
      }
    }
    else
    {
      bzero(a1, v18);
      *(_DWORD *)a1 = v20;
      int v21 = 1;
    }
    switch(v19)
    {
      case 1:
        a1[v18] = v21;
        return;
      case 2:
        *(_WORD *)&a1[v18] = v21;
        return;
      case 3:
        goto LABEL_60;
      case 4:
        *(_DWORD *)&a1[v18] = v21;
        return;
      default:
        return;
    }
  }
  size_t v22 = v16 + 9;
  uint64_t v23 = ~v14;
  switch(v19)
  {
    case 1:
      a1[v18] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_27;
    case 2:
      *(_WORD *)&a1[v18] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_27;
    case 3:
LABEL_60:
      __break(1u);
      JUMPOUT(0x188282A08);
    case 4:
      *(_DWORD *)&a1[v18] = 0;
      goto LABEL_26;
    default:
LABEL_26:
      if (a2)
      {
LABEL_27:
        if (v10 >= v12)
        {
          if (v10 >= a2)
          {
            uint64_t v31 = (void *)((unint64_t)(a1 + 15) & 0xFFFFFFFFFFFFFFF8);
            if ((v9 & 0x80000000) != 0)
            {
              uint64_t v33 = *(void (**)(unint64_t, uint64_t))(v8 + 56);
              v33((v13 + (((((unint64_t)v31 + (v13 | 3) + 8) & ~(v13 | 3)) + 7) & 0xFFFFFFFFFFFFFFFCLL) + 5) & ~v13, a2);
            }
            else
            {
              if ((a2 & 0x80000000) != 0) {
                uint64_t v32 = a2 ^ 0x80000000;
              }
              else {
                uint64_t v32 = (a2 - 1);
              }
              *uint64_t v31 = v32;
            }
          }
          else
          {
            if (v22 < 4) {
              int v28 = ~(-1 << (8 * v22));
            }
            else {
              int v28 = -1;
            }
            int v29 = v28 & (~v10 + a2);
            bzero(a1, v22);
            if (v22 == 1) {
              *a1 = v29;
            }
            else {
              *(_DWORD *)a1 = v29;
            }
          }
        }
        else
        {
          unint64_t v26 = &a1[v22];
          if (v15 == 0x7FFFFFFF)
          {
            unint64_t v27 = (unint64_t)(v26 + 7) & 0xFFFFFFFFFFFFFFF8;
            if ((a2 & 0x80000000) != 0)
            {
              *(unsigned char *)(v27 + 16) = 0;
              *(void *)unint64_t v27 = a2 ^ 0x80000000;
              *(void *)(v27 + 8) = 0;
            }
            else
            {
              *(void *)(v27 + 8) = (a2 - 1);
            }
          }
          else
          {
            unint64_t v30 = *(void (**)(unint64_t, uint64_t, uint64_t))(v11 + 56);
            v30((v17 + ((unint64_t)(v26 + 31) & 0xFFFFFFFFFFFFFFF8)) & v23, a2, v12);
          }
        }
      }
      return;
  }
}

void *initializeBufferWithCopyOfBuffer for ResolvedSearchFieldStyle(void *a1, void *a2)
{
  uint64_t v4 = type metadata accessor for SearchFieldConfiguration(0);
  int v5 = *(_DWORD *)(*(void *)(v4 - 8) + 80);
  uint64_t v6 = *a2;
  *a1 = *a2;
  if ((v5 & 0x20000) != 0)
  {
    a1 = (void *)(v6 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = (int *)v4;
    a1[1] = a2[1];
    _s7SwiftUI7BindingVyAA16SearchFieldStateVGMaTm_4(0, &lazy cache variable for type metadata for Binding<SearchFieldState>, type metadata accessor for SearchFieldState, MEMORY[0x1E4F41638]);
    uint64_t v9 = *(int *)(v8 + 32);
    unsigned int v10 = (char *)a1 + v9;
    uint64_t v11 = (char *)a2 + v9;
    *unsigned int v10 = *((unsigned char *)a2 + v9);
    v10[1] = *((unsigned char *)a2 + v9 + 1);
    *((_WORD *)v10 + 1) = *(_WORD *)((char *)a2 + v9 + 2);
    v10[8] = *((unsigned char *)a2 + v9 + 8);
    *((_DWORD *)v10 + 1) = *(_DWORD *)((char *)a2 + v9 + 4);
    uint64_t v12 = (int *)type metadata accessor for SearchFieldState(0);
    uint64_t v13 = v12[9];
    uint64_t v32 = &v11[v13];
    uint64_t v33 = &v10[v13];
    uint64_t v14 = type metadata accessor for AttributedString();
    unsigned int v15 = *(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 16);
    swift_retain();
    swift_retain();
    v15(v33, v32, v14);
    v10[v12[10]] = v11[v12[10]];
    uint64_t v16 = v12[11];
    uint64_t v17 = &v10[v16];
    size_t v18 = &v11[v16];
    *(_DWORD *)uint64_t v17 = *(_DWORD *)v18;
    void v17[4] = v18[4];
    uint64_t v19 = v7[6];
    unsigned int v20 = (char *)a1 + v19;
    int v21 = (char *)a2 + v19;
    int v22 = v21[8];
    if (v22 == 255)
    {
      *(void *)unsigned int v20 = *(void *)v21;
      v20[8] = v21[8];
    }
    else
    {
      char v23 = v22 & 1;
      uint64_t v24 = *(void *)v21;
      outlined copy of PlatformItemCollection.Storage(*(void *)v21, v22 & 1);
      *(void *)unsigned int v20 = v24;
      v20[8] = v23;
    }
    *((unsigned char *)a1 + v7[7]) = *((unsigned char *)a2 + v7[7]);
    uint64_t v25 = v7[8];
    unint64_t v26 = (char *)a1 + v25;
    unint64_t v27 = (char *)a2 + v25;
    uint64_t v28 = *(void *)((char *)a2 + v25);
    uint64_t v29 = *((void *)v27 + 1);
    char v30 = v27[16];
    outlined copy of Text.Storage(v28, v29, v30);
    *(void *)unint64_t v26 = v28;
    *((void *)v26 + 1) = v29;
    v26[16] = v30;
    *((void *)v26 + 3) = *((void *)v27 + 3);
    swift_bridgeObjectRetain();
  }
  return a1;
}

void *initializeWithTake for ResolvedSearchFieldStyle(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  _s7SwiftUI7BindingVyAA16SearchFieldStateVGMaTm_4(0, &lazy cache variable for type metadata for Binding<SearchFieldState>, type metadata accessor for SearchFieldState, MEMORY[0x1E4F41638]);
  uint64_t v6 = *(int *)(v5 + 32);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  *uint64_t v7 = *((unsigned char *)a2 + v6);
  v7[1] = *((unsigned char *)a2 + v6 + 1);
  *((_WORD *)v7 + 1) = *(_WORD *)((char *)a2 + v6 + 2);
  void v7[8] = *((unsigned char *)a2 + v6 + 8);
  *((_DWORD *)v7 + 1) = *(_DWORD *)((char *)a2 + v6 + 4);
  uint64_t v9 = (int *)type metadata accessor for SearchFieldState(0);
  uint64_t v10 = v9[9];
  uint64_t v11 = &v7[v10];
  uint64_t v12 = &v8[v10];
  uint64_t v13 = type metadata accessor for AttributedString();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 32))(v11, v12, v13);
  v7[v9[10]] = v8[v9[10]];
  uint64_t v14 = v9[11];
  unsigned int v15 = &v7[v14];
  uint64_t v16 = &v8[v14];
  v15[4] = v16[4];
  *(_DWORD *)unsigned int v15 = *(_DWORD *)v16;
  uint64_t v17 = (int *)type metadata accessor for SearchFieldConfiguration(0);
  uint64_t v18 = v17[6];
  uint64_t v19 = (char *)a1 + v18;
  unsigned int v20 = (char *)a2 + v18;
  *(void *)uint64_t v19 = *(void *)v20;
  v19[8] = v20[8];
  *((unsigned char *)a1 + v17[7]) = *((unsigned char *)a2 + v17[7]);
  uint64_t v21 = v17[8];
  int v22 = (_OWORD *)((char *)a1 + v21);
  char v23 = (_OWORD *)((char *)a2 + v21);
  long long v24 = v23[1];
  *int v22 = *v23;
  v22[1] = v24;
  return a1;
}

void *assignWithTake for ResolvedSearchFieldStyle(void *a1, void *a2)
{
  *a1 = *a2;
  swift_release();
  a1[1] = a2[1];
  swift_release();
  _s7SwiftUI7BindingVyAA16SearchFieldStateVGMaTm_4(0, &lazy cache variable for type metadata for Binding<SearchFieldState>, type metadata accessor for SearchFieldState, MEMORY[0x1E4F41638]);
  uint64_t v5 = *(int *)(v4 + 32);
  uint64_t v6 = (char *)a1 + v5;
  uint64_t v7 = (char *)a2 + v5;
  *uint64_t v6 = *((unsigned char *)a2 + v5);
  v6[1] = *((unsigned char *)a2 + v5 + 1);
  *((_WORD *)v6 + 1) = *(_WORD *)((char *)a2 + v5 + 2);
  _OWORD v6[8] = *((unsigned char *)a2 + v5 + 8);
  *((_DWORD *)v6 + 1) = *(_DWORD *)((char *)a2 + v5 + 4);
  uint64_t v8 = (int *)type metadata accessor for SearchFieldState(0);
  uint64_t v9 = v8[9];
  uint64_t v10 = &v6[v9];
  uint64_t v11 = &v7[v9];
  uint64_t v12 = type metadata accessor for AttributedString();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 40))(v10, v11, v12);
  v6[v8[10]] = v7[v8[10]];
  uint64_t v13 = v8[11];
  uint64_t v14 = &v6[v13];
  unsigned int v15 = &v7[v13];
  *(_DWORD *)uint64_t v14 = *(_DWORD *)v15;
  void v14[4] = v15[4];
  uint64_t v16 = (int *)type metadata accessor for SearchFieldConfiguration(0);
  uint64_t v17 = v16[6];
  uint64_t v18 = (uint64_t)a1 + v17;
  uint64_t v19 = (char *)a2 + v17;
  int v20 = *((unsigned __int8 *)a1 + v17 + 8);
  if (v20 != 255)
  {
    int v21 = v19[8];
    if (v21 != 255)
    {
      uint64_t v22 = *(void *)v18;
      *(void *)uint64_t v18 = *(void *)v19;
      *(unsigned char *)(v18 + 8) = v21 & 1;
      outlined consume of PlatformItemCollection.Storage(v22, v20 & 1);
      goto LABEL_6;
    }
    outlined destroy of PlatformItemCollection(v18);
  }
  *(void *)uint64_t v18 = *(void *)v19;
  *(unsigned char *)(v18 + 8) = v19[8];
LABEL_6:
  *((unsigned char *)a1 + v16[7]) = *((unsigned char *)a2 + v16[7]);
  uint64_t v23 = v16[8];
  long long v24 = (char *)a1 + v23;
  uint64_t v25 = (char *)a2 + v23;
  LOBYTE(v23) = v25[16];
  uint64_t v26 = *(void *)v24;
  uint64_t v27 = *((void *)v24 + 1);
  char v28 = v24[16];
  *(_OWORD *)long long v24 = *(_OWORD *)v25;
  v24[16] = v23;
  outlined consume of Text.Storage(v26, v27, v28);
  *((void *)v24 + 3) = *((void *)v25 + 3);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_188282FDC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for SearchFieldConfiguration(0);
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48);

  return v5(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for ResolvedSearchFieldStyle(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_18828305C);
}

uint64_t sub_18828305C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for SearchFieldConfiguration(0);
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);

  return v5(a1, a2, a2, v4);
}

uint64_t associated type witness table accessor for StyleableView.DefaultStyleModifier : StyleModifier in ResolvedSearchFieldStyle()
{
  return lazy protocol witness table accessor for type ResolvedSearchFieldStyle and conformance ResolvedSearchFieldStyle(&lazy protocol witness table cache variable for type SearchFieldStyleModifier<AutomaticSearchFieldStyle> and conformance SearchFieldStyleModifier<A>, (void (*)(uint64_t))type metadata accessor for SearchFieldStyleModifier<AutomaticSearchFieldStyle>);
}

void type metadata accessor for SearchFieldStyleModifier<AutomaticSearchFieldStyle>()
{
  if (!lazy cache variable for type metadata for SearchFieldStyleModifier<AutomaticSearchFieldStyle>)
  {
    lazy protocol witness table accessor for type AutomaticSearchFieldStyle and conformance AutomaticSearchFieldStyle();
    unint64_t v0 = type metadata accessor for SearchFieldStyleModifier();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for SearchFieldStyleModifier<AutomaticSearchFieldStyle>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type AutomaticSearchFieldStyle and conformance AutomaticSearchFieldStyle()
{
  unint64_t result = lazy protocol witness table cache variable for type AutomaticSearchFieldStyle and conformance AutomaticSearchFieldStyle;
  if (!lazy protocol witness table cache variable for type AutomaticSearchFieldStyle and conformance AutomaticSearchFieldStyle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AutomaticSearchFieldStyle and conformance AutomaticSearchFieldStyle);
  }
  return result;
}

void protocol witness for View.body.getter in conformance SearchFieldConfiguration.Control()
{
}

void protocol witness for View.body.getter in conformance SearchFieldConfiguration.Suggestions()
{
}

void protocol witness for View.body.getter in conformance SearchFieldConfiguration.Scopes()
{
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance ResolvedSearchFieldStyle(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = lazy protocol witness table accessor for type ResolvedSearchFieldStyle and conformance ResolvedSearchFieldStyle(&lazy protocol witness table cache variable for type ResolvedSearchFieldStyle and conformance ResolvedSearchFieldStyle, (void (*)(uint64_t))type metadata accessor for ResolvedSearchFieldStyle);

  return MEMORY[0x1F40FDF90](a1, a2, a3, v6);
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance ResolvedSearchFieldStyle()
{
  return static StyleableView._viewListCount(inputs:)();
}

uint64_t protocol witness for static Rule.initialValue.getter in conformance SearchFieldConfigurationReader<A, B>.MakeContent@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for Optional();
  int v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56);

  return v3(a1, 1, 1, v2);
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance SearchFieldConfigurationReader<A, B>()
{
  return static UnaryView._viewListCount(inputs:)();
}

void protocol witness for View.body.getter in conformance SearchFieldConfigurationReader<A, B>()
{
}

uint64_t protocol witness for static PreferenceKey.defaultValue.getter in conformance SearchFieldConfiguration.Key@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for defaultValue != -1) {
    swift_once();
  }
  uint64_t v2 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E4FBB718];
  _s7SwiftUI7BindingVyAA16SearchFieldStateVGMaTm_4(0, &lazy cache variable for type metadata for SearchFieldConfiguration.Data?, type metadata accessor for SearchFieldConfiguration.Data, MEMORY[0x1E4FBB718]);
  uint64_t v4 = __swift_project_value_buffer(v3, (uint64_t)static SearchFieldConfiguration.Key.defaultValue);
  return _s7SwiftUI24SearchFieldConfigurationV4DataVSgWOcTm_0(v4, a1, &lazy cache variable for type metadata for SearchFieldConfiguration.Data?, type metadata accessor for SearchFieldConfiguration.Data, v2);
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance SearchFieldStyleModifier<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F40FDF88](a1, a2, a3, a4, a5, WitnessTable);
}

uint64_t SearchZipLocation.set(_:transaction:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AttributedString();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for (SearchFieldState, AttributedString)();
  uint64_t v9 = v8 - 8;
  MEMORY[0x1F4188790](v8);
  uint64_t v11 = (char *)&v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  _s7SwiftUI16SearchFieldStateVWOcTm_1(a1, (uint64_t)v11, type metadata accessor for SearchFieldState);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(&v11[*(int *)(v9 + 56)], a2, v4);
  dispatch thunk of AnyLocation.set(_:transaction:)();
  dispatch thunk of AnyLocation.get()();
  lazy protocol witness table accessor for type ResolvedSearchFieldStyle and conformance ResolvedSearchFieldStyle(&lazy protocol witness table cache variable for type AttributedString and conformance AttributedString, MEMORY[0x1E4F273A8]);
  char v12 = dispatch thunk of static Equatable.== infix(_:_:)();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  if ((v12 & 1) == 0) {
    dispatch thunk of AnyLocation.set(_:transaction:)();
  }
  return _s7SwiftUI16SearchFieldStateVWOhTm_5((uint64_t)v11, (uint64_t (*)(void))type metadata accessor for (SearchFieldState, AttributedString));
}

uint64_t (*protocol witness for Location.wasRead.modify in conformance SearchZipLocation(uint64_t a1))()
{
  *(void *)a1 = v1;
  if (dispatch thunk of AnyLocation.wasRead.getter()) {
    char v3 = 1;
  }
  else {
    char v3 = dispatch thunk of AnyLocation.wasRead.getter();
  }
  *(unsigned char *)(a1 + 8) = v3 & 1;
  return protocol witness for Location.wasRead.modify in conformance SearchZipLocation;
}

uint64_t protocol witness for Location.wasRead.modify in conformance SearchZipLocation()
{
  return dispatch thunk of AnyLocation.wasRead.setter();
}

uint64_t protocol witness for Location.get() in conformance SearchZipLocation()
{
  return dispatch thunk of AnyLocation.get()();
}

uint64_t protocol witness for Location.set(_:transaction:) in conformance SearchZipLocation(uint64_t a1)
{
  type metadata accessor for (SearchFieldState, AttributedString)();
  uint64_t v3 = a1 + *(int *)(v2 + 48);

  return SearchZipLocation.set(_:transaction:)(a1, v3);
}

uint64_t specialized Binding<A>.apply(_:)()
{
  _s7SwiftUI7BindingVyAA16SearchFieldStateVGMaTm_4(0, (unint64_t *)&lazy cache variable for type metadata for Binding<PlatformSearchPopoverAnchor?>, (uint64_t (*)(uint64_t))type metadata accessor for PlatformSearchPopoverAnchor?, MEMORY[0x1E4F41638]);
  MEMORY[0x18C113DA0](v8);
  _s7SwiftUI16SearchFieldStateVWOcTm_1((uint64_t)v8, (uint64_t)v7, (uint64_t (*)(void))type metadata accessor for PlatformSearchPopoverAnchor?);
  _s7SwiftUI16SearchFieldStateVWOhTm_5((uint64_t)v7, (uint64_t (*)(void))type metadata accessor for PlatformSearchPopoverAnchor?);
  swift_unknownObjectWeakInit();
  void v7[8] = 0;
  _s7SwiftUI16SearchFieldStateVWOcTm_1((uint64_t)v8, (uint64_t)v4, (uint64_t (*)(void))type metadata accessor for PlatformSearchPopoverAnchor?);
  _s7SwiftUI16SearchFieldStateVWOcTm_1((uint64_t)v7, (uint64_t)&v5, (uint64_t (*)(void))type metadata accessor for PlatformSearchPopoverAnchor?);
  if ((v4[8] & 1) == 0)
  {
    _s7SwiftUI16SearchFieldStateVWOcTm_1((uint64_t)v4, (uint64_t)v3, (uint64_t (*)(void))type metadata accessor for PlatformSearchPopoverAnchor?);
    if ((v6 & 1) == 0)
    {
      outlined init with take of PlatformSearchPopoverAnchor((uint64_t)&v5, (uint64_t)v2);
      BOOL v0 = specialized static PlatformSearchPopoverAnchor.== infix(_:_:)((uint64_t)v3, (uint64_t)v2);
      outlined destroy of PlatformSearchPopoverAnchor((uint64_t)v2);
      outlined destroy of PlatformSearchPopoverAnchor((uint64_t)v3);
      _s7SwiftUI16SearchFieldStateVWOhTm_5((uint64_t)v4, (uint64_t (*)(void))type metadata accessor for PlatformSearchPopoverAnchor?);
      if (v0) {
        goto LABEL_9;
      }
LABEL_8:
      dispatch thunk of AnyLocation.set(_:transaction:)();
      goto LABEL_9;
    }
    outlined destroy of PlatformSearchPopoverAnchor((uint64_t)v3);
LABEL_6:
    _s7SwiftUI16SearchFieldStateVWOhTm_5((uint64_t)v4, (uint64_t (*)(void))type metadata accessor for (PlatformSearchPopoverAnchor?, PlatformSearchPopoverAnchor?));
    goto LABEL_8;
  }
  if ((v6 & 1) == 0) {
    goto LABEL_6;
  }
  _s7SwiftUI16SearchFieldStateVWOhTm_5((uint64_t)v4, (uint64_t (*)(void))type metadata accessor for PlatformSearchPopoverAnchor?);
LABEL_9:
  _s7SwiftUI16SearchFieldStateVWOhTm_5((uint64_t)v7, (uint64_t (*)(void))type metadata accessor for PlatformSearchPopoverAnchor?);
  return _s7SwiftUI16SearchFieldStateVWOhTm_5((uint64_t)v8, (uint64_t (*)(void))type metadata accessor for PlatformSearchPopoverAnchor?);
}

void type metadata accessor for PlatformSearchPopoverAnchor?()
{
  if (!lazy cache variable for type metadata for PlatformSearchPopoverAnchor?)
  {
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for PlatformSearchPopoverAnchor?);
    }
  }
}

void type metadata accessor for (PlatformSearchPopoverAnchor?, PlatformSearchPopoverAnchor?)()
{
  if (!lazy cache variable for type metadata for (PlatformSearchPopoverAnchor?, PlatformSearchPopoverAnchor?))
  {
    type metadata accessor for PlatformSearchPopoverAnchor?();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (PlatformSearchPopoverAnchor?, PlatformSearchPopoverAnchor?));
    }
  }
}

uint64_t outlined init with take of PlatformSearchPopoverAnchor(uint64_t a1, uint64_t a2)
{
  return a2;
}

void *initializeBufferWithCopyOfBuffer for SearchFieldConfiguration.Data(void *a1, void *a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  uint64_t v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    uint64_t v7 = (void *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain();
  }
  else
  {
    uint64_t v7 = a1;
    a1[1] = a2[1];
    _s7SwiftUI7BindingVyAA16SearchFieldStateVGMaTm_4(0, (unint64_t *)&lazy cache variable for type metadata for Binding<AttributedString>, MEMORY[0x1E4F273A8], MEMORY[0x1E4F41638]);
    uint64_t v9 = *(int *)(v8 + 32);
    uint64_t v10 = (char *)v7 + v9;
    uint64_t v11 = (char *)a2 + v9;
    uint64_t v12 = type metadata accessor for AttributedString();
    uint64_t v13 = *(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16);
    swift_retain();
    swift_retain();
    v13(v10, v11, v12);
    uint64_t v14 = *(int *)(a3 + 20);
    unsigned int v15 = (char *)v7 + v14;
    uint64_t v16 = (char *)a2 + v14;
    uint64_t v17 = *(void *)((char *)a2 + v14);
    uint64_t v18 = *(void *)((char *)a2 + v14 + 8);
    LOBYTE(v10) = *((unsigned char *)a2 + v14 + 16);
    outlined copy of Text.Storage(v17, v18, (char)v10);
    *(void *)unsigned int v15 = v17;
    *((void *)v15 + 1) = v18;
    v15[16] = (char)v10;
    *((void *)v15 + 3) = *((void *)v16 + 3);
    uint64_t v19 = *(int *)(a3 + 24);
    int v20 = (char *)v7 + v19;
    int v21 = (char *)a2 + v19;
    int v22 = *((unsigned __int8 *)a2 + v19 + 8);
    swift_bridgeObjectRetain();
    if (v22 == 255)
    {
      *(void *)int v20 = *(void *)v21;
      v20[8] = v21[8];
    }
    else
    {
      char v23 = v22 & 1;
      uint64_t v24 = *(void *)v21;
      outlined copy of PlatformItemCollection.Storage(v24, v23);
      *(void *)int v20 = v24;
      v20[8] = v23;
    }
  }
  return v7;
}

void *assignWithCopy for SearchFieldConfiguration.Data(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  _s7SwiftUI7BindingVyAA16SearchFieldStateVGMaTm_4(0, (unint64_t *)&lazy cache variable for type metadata for Binding<AttributedString>, MEMORY[0x1E4F273A8], MEMORY[0x1E4F41638]);
  uint64_t v7 = *(int *)(v6 + 32);
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for AttributedString();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 24))(v8, v9, v10);
  uint64_t v11 = *(int *)(a3 + 20);
  uint64_t v12 = (char *)a1 + v11;
  uint64_t v13 = (char *)a2 + v11;
  uint64_t v14 = *(void *)((char *)a2 + v11);
  uint64_t v15 = *(void *)((char *)a2 + v11 + 8);
  char v16 = *((unsigned char *)a2 + v11 + 16);
  outlined copy of Text.Storage(v14, v15, v16);
  uint64_t v17 = *(void *)v12;
  uint64_t v18 = *((void *)v12 + 1);
  char v19 = v12[16];
  *(void *)uint64_t v12 = v14;
  *((void *)v12 + 1) = v15;
  v12[16] = v16;
  outlined consume of Text.Storage(v17, v18, v19);
  *((void *)v12 + 3) = *((void *)v13 + 3);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v20 = *(int *)(a3 + 24);
  uint64_t v21 = (uint64_t)a1 + v20;
  int v22 = (char *)a2 + v20;
  int v23 = *((unsigned __int8 *)a1 + v20 + 8);
  int v24 = *((unsigned __int8 *)a2 + v20 + 8);
  if (v23 == 255)
  {
    if (v24 == 255)
    {
      uint64_t v26 = *(void *)v22;
      *(unsigned char *)(v21 + 8) = v22[8];
      *(void *)uint64_t v21 = v26;
    }
    else
    {
      char v31 = v24 & 1;
      uint64_t v32 = *(void *)v22;
      outlined copy of PlatformItemCollection.Storage(v32, v24 & 1);
      *(void *)uint64_t v21 = v32;
      *(unsigned char *)(v21 + 8) = v31;
    }
  }
  else if (v24 == 255)
  {
    outlined destroy of PlatformItemCollection(v21);
    char v25 = v22[8];
    *(void *)uint64_t v21 = *(void *)v22;
    *(unsigned char *)(v21 + 8) = v25;
  }
  else
  {
    char v27 = v24 & 1;
    uint64_t v28 = *(void *)v22;
    outlined copy of PlatformItemCollection.Storage(v28, v24 & 1);
    uint64_t v29 = *(void *)v21;
    char v30 = *(unsigned char *)(v21 + 8);
    *(void *)uint64_t v21 = v28;
    *(unsigned char *)(v21 + 8) = v27;
    outlined consume of PlatformItemCollection.Storage(v29, v30);
  }
  return a1;
}

void *initializeWithTake for SearchFieldConfiguration.Data(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  _s7SwiftUI7BindingVyAA16SearchFieldStateVGMaTm_4(0, (unint64_t *)&lazy cache variable for type metadata for Binding<AttributedString>, MEMORY[0x1E4F273A8], MEMORY[0x1E4F41638]);
  uint64_t v8 = *(int *)(v7 + 32);
  uint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = type metadata accessor for AttributedString();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 32))(v9, v10, v11);
  uint64_t v12 = *(int *)(a3 + 20);
  uint64_t v13 = *(int *)(a3 + 24);
  uint64_t v14 = (_OWORD *)((char *)a1 + v12);
  uint64_t v15 = (_OWORD *)((char *)a2 + v12);
  long long v16 = v15[1];
  *uint64_t v14 = *v15;
  v14[1] = v16;
  uint64_t v17 = (char *)a1 + v13;
  uint64_t v18 = (char *)a2 + v13;
  *(void *)uint64_t v17 = *(void *)v18;
  v17[8] = v18[8];
  return a1;
}

void *assignWithTake for SearchFieldConfiguration.Data(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_release();
  a1[1] = a2[1];
  swift_release();
  _s7SwiftUI7BindingVyAA16SearchFieldStateVGMaTm_4(0, (unint64_t *)&lazy cache variable for type metadata for Binding<AttributedString>, MEMORY[0x1E4F273A8], MEMORY[0x1E4F41638]);
  uint64_t v7 = *(int *)(v6 + 32);
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for AttributedString();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 40))(v8, v9, v10);
  uint64_t v11 = *(int *)(a3 + 20);
  uint64_t v12 = (char *)a1 + v11;
  uint64_t v13 = (char *)a2 + v11;
  LOBYTE(v11) = *((unsigned char *)a2 + v11 + 16);
  uint64_t v14 = *(void *)v12;
  uint64_t v15 = *((void *)v12 + 1);
  char v16 = v12[16];
  *(_OWORD *)uint64_t v12 = *(_OWORD *)v13;
  v12[16] = v11;
  outlined consume of Text.Storage(v14, v15, v16);
  *((void *)v12 + 3) = *((void *)v13 + 3);
  swift_bridgeObjectRelease();
  uint64_t v17 = *(int *)(a3 + 24);
  uint64_t v18 = (uint64_t)a1 + v17;
  char v19 = (char *)a2 + v17;
  int v20 = *((unsigned __int8 *)a1 + v17 + 8);
  if (v20 != 255)
  {
    int v21 = v19[8];
    if (v21 != 255)
    {
      uint64_t v22 = *(void *)v18;
      *(void *)uint64_t v18 = *(void *)v19;
      *(unsigned char *)(v18 + 8) = v21 & 1;
      outlined consume of PlatformItemCollection.Storage(v22, v20 & 1);
      return a1;
    }
    outlined destroy of PlatformItemCollection(v18);
  }
  *(void *)uint64_t v18 = *(void *)v19;
  *(unsigned char *)(v18 + 8) = v19[8];
  return a1;
}

uint64_t sub_1882842C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _s7SwiftUI7BindingVyAA16SearchFieldStateVGMaTm_4(0, (unint64_t *)&lazy cache variable for type metadata for Binding<AttributedString>, MEMORY[0x1E4F273A8], MEMORY[0x1E4F41638]);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 20) + 24);
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    return (v10 + 1);
  }
}

void sub_1882843BC(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  _s7SwiftUI7BindingVyAA16SearchFieldStateVGMaTm_4(0, (unint64_t *)&lazy cache variable for type metadata for Binding<AttributedString>, MEMORY[0x1E4F273A8], MEMORY[0x1E4F41638]);
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v10(a1, a2, a2, v8);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 20) + 24) = (a2 - 1);
  }
}

ValueMetadata *type metadata accessor for SearchStateProjection()
{
  return &type metadata for SearchStateProjection;
}

ValueMetadata *type metadata accessor for SearchZipLocation()
{
  return &type metadata for SearchZipLocation;
}

uint64_t getEnumTagSinglePayload for SearchFieldStyleModifier(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (!a2) {
    return 0;
  }
  unsigned int v7 = a2 - v5;
  if (a2 <= v5) {
    goto LABEL_19;
  }
  char v8 = 8 * v6;
  if (v6 <= 3)
  {
    unsigned int v10 = ((v7 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      int v9 = *(_DWORD *)((char *)a1 + v6);
      if (!v9) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      int v9 = *(unsigned __int16 *)((char *)a1 + v6);
      if (!*(unsigned __int16 *)((char *)a1 + v6)) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_19:
      if (v5) {
        return (*(uint64_t (**)(void))(v4 + 48))();
      }
      return 0;
    }
  }
  int v9 = *((unsigned __int8 *)a1 + v6);
  if (!*((unsigned char *)a1 + v6)) {
    goto LABEL_19;
  }
LABEL_11:
  int v11 = (v9 - 1) << v8;
  if (v6 > 3) {
    int v11 = 0;
  }
  if (v6)
  {
    if (v6 > 3) {
      LODWORD(v6) = 4;
    }
    switch((int)v6)
    {
      case 2:
        LODWORD(v6) = *a1;
        break;
      case 3:
        LODWORD(v6) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v6) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v6) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v5 + (v6 | v11) + 1;
}

void storeEnumTagSinglePayload for SearchFieldStyleModifier(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = *(void *)(v6 + 64);
  BOOL v9 = a3 >= v7;
  unsigned int v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      unsigned int v14 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v14))
      {
        int v11 = 4;
      }
      else if (v14 >= 0x100)
      {
        int v11 = 2;
      }
      else
      {
        int v11 = v14 > 1;
      }
    }
    else
    {
      int v11 = 1;
    }
  }
  else
  {
    int v11 = 0;
  }
  if (v7 < a2)
  {
    unsigned int v12 = ~v7 + a2;
    if (v8 < 4)
    {
      int v13 = (v12 >> (8 * v8)) + 1;
      if (v8)
      {
        int v15 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if (v8 == 3)
        {
          *(_WORD *)a1 = v15;
          a1[2] = BYTE2(v15);
        }
        else if (v8 == 2)
        {
          *(_WORD *)a1 = v15;
        }
        else
        {
          *a1 = v15;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v12;
      int v13 = 1;
    }
    switch(v11)
    {
      case 1:
        a1[v8] = v13;
        return;
      case 2:
        *(_WORD *)&a1[v8] = v13;
        return;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v8] = v13;
        return;
      default:
        return;
    }
  }
  switch(v11)
  {
    case 1:
      a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 2:
      *(_WORD *)&a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 3:
LABEL_34:
      __break(1u);
      JUMPOUT(0x188284840);
    case 4:
      *(_DWORD *)&a1[v8] = 0;
      goto LABEL_20;
    default:
LABEL_20:
      if (a2)
      {
LABEL_21:
        char v16 = *(void (**)(void))(v6 + 56);
        v16();
      }
      return;
  }
}

uint64_t sub_188284868()
{
  swift_getAssociatedTypeWitness();

  return swift_getAssociatedConformanceWitness();
}

uint64_t specialized SearchStateProjection.set(base:newValue:)(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v4 = type metadata accessor for AttributedString();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  unsigned int v7 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v8);
  unsigned int v10 = (char *)&v23 - v9;
  uint64_t v11 = *(int *)(type metadata accessor for SearchFieldState(0) + 36);
  int v24 = a2;
  unsigned int v12 = &a2[v11];
  int v13 = *(void (**)(char *, unsigned __int8 *, uint64_t))(v5 + 16);
  v13(v10, &a2[v11], v4);
  type metadata accessor for (SearchFieldState, AttributedString)();
  uint64_t v15 = a1 + *(int *)(v14 + 48);
  v13(v7, (unsigned __int8 *)v15, v4);
  lazy protocol witness table accessor for type ResolvedSearchFieldStyle and conformance ResolvedSearchFieldStyle(&lazy protocol witness table cache variable for type AttributedString and conformance AttributedString, MEMORY[0x1E4F273A8]);
  char v16 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v17 = *(void (**)(char *, uint64_t))(v5 + 8);
  v17(v7, v4);
  v17(v10, v4);
  if ((v16 & 1) == 0) {
    (*(void (**)(uint64_t, unsigned __int8 *, uint64_t))(v5 + 24))(v15, v12, v4);
  }
  uint64_t v18 = (uint64_t)v24;
  int v19 = *v24;
  type metadata accessor for ((SearchFieldState, AttributedString), Bool)(0, (unint64_t *)&lazy cache variable for type metadata for ((SearchFieldState, AttributedString), Bool), (void (*)(uint64_t))type metadata accessor for (SearchFieldState, AttributedString));
  uint64_t v21 = *(int *)(v20 + 48);
  if ((v19 != 2) != *(unsigned char *)(a1 + v21)) {
    *(unsigned char *)(a1 + v21) = v19 != 2;
  }
  return outlined assign with copy of SearchFieldState(v18, a1);
}

uint64_t outlined assign with copy of SearchFieldState(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for SearchFieldState(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

uint64_t MenuPickerStyle.Body.init(configuration:isBordered:)(unsigned int a1, char a2)
{
  uint64_t v2 = 0x100000000;
  if ((a2 & 1) == 0) {
    uint64_t v2 = 0;
  }
  return v2 | a1;
}

uint64_t type metadata accessor for MenuPickerStyle.Body()
{
  return __swift_instantiateGenericMetadata();
}

ValueMetadata *closure #1 in static MenuPickerStyle._makeView<A>(value:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v11 = &type metadata for MenuPickerStyle;
  uint64_t v12 = a2;
  int v13 = &protocol witness table for MenuPickerStyle;
  uint64_t v14 = a3;
  void v9[2] = type metadata accessor for _PickerValue();
  uint64_t v10 = type metadata accessor for PickerStyleConfiguration();
  uint64_t v6 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(a1, a4, (uint64_t)v9, v10, MEMORY[0x1E4FBC248], v6, MEMORY[0x1E4FBC278], v7);
  return v11;
}

uint64_t MenuPickerStyle.Body.configuration.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for PickerStyleConfiguration();
  uint64_t Value = AGGraphGetValue();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16);

  return v4(a1, Value, v2);
}

uint64_t closure #1 in MenuPickerStyle.Body.value.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  MenuPickerStyle.Body.menu.getter(a1 & 0x1FFFFFFFFLL, a2, a3);
  type metadata accessor for PickerStyleConfiguration.Content();
  _s7SwiftUI20SectionStyleModifierVyAA016MenuPickerOptioncD0VGMaTm_0(255, &lazy cache variable for type metadata for SectionStyleModifier<MenuPickerOptionSectionStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type MenuPickerOptionSectionStyle and conformance MenuPickerOptionSectionStyle, (uint64_t)&type metadata for MenuPickerOptionSectionStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for SectionStyleModifier);
  type metadata accessor for ModifiedContent();
  _s7SwiftUI18StyleContextWriterVyAA04MenucD0VGMaTm_0(255, (unint64_t *)&lazy cache variable for type metadata for StyleContextWriter<MenuStyleContext>, MEMORY[0x1E4F3FCF0], MEMORY[0x1E4F3FCE8], MEMORY[0x1E4F40318]);
  uint64_t v3 = type metadata accessor for ModifiedContent();
  type metadata accessor for PickerStyleConfiguration.Label();
  type metadata accessor for PickerContentView();
  swift_getWitnessTable();
  type metadata accessor for Menu();
  _s7SwiftUI20SectionStyleModifierVyAA016MenuPickerOptioncD0VGMaTm_0(255, &lazy cache variable for type metadata for MenuStyleModifier<DefaultMenuStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type DefaultMenuStyle and conformance DefaultMenuStyle, (uint64_t)&type metadata for DefaultMenuStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for MenuStyleModifier);
  uint64_t v4 = type metadata accessor for ModifiedContent();
  swift_getWitnessTable();
  lazy protocol witness table accessor for type StyleContextWriter<MenuStyleContext> and conformance StyleContextWriter<A>();
  uint64_t WitnessTable = swift_getWitnessTable();
  swift_getWitnessTable();
  v10[0] = v3;
  v10[1] = v4;
  v10[2] = WitnessTable;
  void v10[3] = swift_getWitnessTable();
  type metadata accessor for GroupElementsOfContent();
  uint64_t v6 = type metadata accessor for Group();
  swift_getWitnessTable();
  swift_getWitnessTable();
  static ViewBuilder.buildExpression<A>(_:)(v9);
  uint64_t v7 = *(void (**)(unsigned char *, uint64_t))(*(void *)(v6 - 8) + 8);
  v7(v9, v6);
  static ViewBuilder.buildExpression<A>(_:)(v10);
  return ((uint64_t (*)(void *, uint64_t))v7)(v10, v6);
}

uint64_t MenuPickerStyle.Body.menu.getter(unint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5 = a1;
  uint64_t v6 = HIDWORD(a1) & 1;
  MenuPickerStyle.Body.content.getter(a1 & 0x1FFFFFFFFLL, a2, a3);
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = a2;
  *(void *)(v7 + 24) = a3;
  *(_DWORD *)(v7 + 32) = v5;
  *(unsigned char *)(v7 + 36) = v6;
  type metadata accessor for PickerStyleConfiguration.Content();
  _s7SwiftUI20SectionStyleModifierVyAA016MenuPickerOptioncD0VGMaTm_0(255, &lazy cache variable for type metadata for SectionStyleModifier<MenuPickerOptionSectionStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type MenuPickerOptionSectionStyle and conformance MenuPickerOptionSectionStyle, (uint64_t)&type metadata for MenuPickerOptionSectionStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for SectionStyleModifier);
  type metadata accessor for ModifiedContent();
  _s7SwiftUI18StyleContextWriterVyAA04MenucD0VGMaTm_0(255, (unint64_t *)&lazy cache variable for type metadata for StyleContextWriter<MenuStyleContext>, MEMORY[0x1E4F3FCF0], MEMORY[0x1E4F3FCE8], MEMORY[0x1E4F40318]);
  type metadata accessor for ModifiedContent();
  type metadata accessor for PickerStyleConfiguration.Label();
  type metadata accessor for PickerContentView();
  swift_getWitnessTable();
  type metadata accessor for Menu();
  _s7SwiftUI20SectionStyleModifierVyAA016MenuPickerOptioncD0VGMaTm_0(255, &lazy cache variable for type metadata for MenuStyleModifier<DefaultMenuStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type DefaultMenuStyle and conformance DefaultMenuStyle, (uint64_t)&type metadata for DefaultMenuStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for MenuStyleModifier);
  type metadata accessor for ModifiedContent();
  swift_getWitnessTable();
  lazy protocol witness table accessor for type StyleContextWriter<MenuStyleContext> and conformance StyleContextWriter<A>();
  swift_getWitnessTable();
  swift_getWitnessTable();
  swift_getWitnessTable();
  return Group.init<A, B>(subviews:transform:)();
}

uint64_t closure #2 in MenuPickerStyle.Body.value.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  MenuPickerStyle.Body.popUpButton.getter(a1 & 0x1FFFFFFFFLL, a2, a3);
  type metadata accessor for PickerStyleConfiguration.Content();
  _s7SwiftUI20SectionStyleModifierVyAA016MenuPickerOptioncD0VGMaTm_0(255, &lazy cache variable for type metadata for SectionStyleModifier<MenuPickerOptionSectionStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type MenuPickerOptionSectionStyle and conformance MenuPickerOptionSectionStyle, (uint64_t)&type metadata for MenuPickerOptionSectionStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for SectionStyleModifier);
  type metadata accessor for ModifiedContent();
  _s7SwiftUI18StyleContextWriterVyAA04MenucD0VGMaTm_0(255, (unint64_t *)&lazy cache variable for type metadata for StyleContextWriter<MenuStyleContext>, MEMORY[0x1E4F3FCF0], MEMORY[0x1E4F3FCE8], MEMORY[0x1E4F40318]);
  uint64_t v3 = type metadata accessor for ModifiedContent();
  uint64_t v4 = type metadata accessor for PopUpButton();
  swift_getWitnessTable();
  lazy protocol witness table accessor for type StyleContextWriter<MenuStyleContext> and conformance StyleContextWriter<A>();
  v9[0] = v3;
  v9[1] = v4;
  void v9[2] = swift_getWitnessTable();
  void v9[3] = swift_getWitnessTable();
  type metadata accessor for GroupElementsOfContent();
  uint64_t v5 = type metadata accessor for Group();
  swift_getWitnessTable();
  swift_getWitnessTable();
  static ViewBuilder.buildExpression<A>(_:)(v8);
  uint64_t v6 = *(void (**)(unsigned char *, uint64_t))(*(void *)(v5 - 8) + 8);
  v6(v8, v5);
  static ViewBuilder.buildExpression<A>(_:)(v9);
  return ((uint64_t (*)(void *, uint64_t))v6)(v9, v5);
}

uint64_t MenuPickerStyle.Body.popUpButton.getter(unint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5 = a1;
  uint64_t v6 = HIDWORD(a1) & 1;
  MenuPickerStyle.Body.content.getter(a1 & 0x1FFFFFFFFLL, a2, a3);
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = a2;
  *(void *)(v7 + 24) = a3;
  *(_DWORD *)(v7 + 32) = v5;
  *(unsigned char *)(v7 + 36) = v6;
  type metadata accessor for PickerStyleConfiguration.Content();
  _s7SwiftUI20SectionStyleModifierVyAA016MenuPickerOptioncD0VGMaTm_0(255, &lazy cache variable for type metadata for SectionStyleModifier<MenuPickerOptionSectionStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type MenuPickerOptionSectionStyle and conformance MenuPickerOptionSectionStyle, (uint64_t)&type metadata for MenuPickerOptionSectionStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for SectionStyleModifier);
  type metadata accessor for ModifiedContent();
  _s7SwiftUI18StyleContextWriterVyAA04MenucD0VGMaTm_0(255, (unint64_t *)&lazy cache variable for type metadata for StyleContextWriter<MenuStyleContext>, MEMORY[0x1E4F3FCF0], MEMORY[0x1E4F3FCE8], MEMORY[0x1E4F40318]);
  type metadata accessor for ModifiedContent();
  type metadata accessor for PopUpButton();
  swift_getWitnessTable();
  lazy protocol witness table accessor for type StyleContextWriter<MenuStyleContext> and conformance StyleContextWriter<A>();
  swift_getWitnessTable();
  swift_getWitnessTable();
  return Group.init<A, B>(subviews:transform:)();
}

uint64_t MenuPickerStyle.Body.content.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = type metadata accessor for PickerStyleConfiguration();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v8 = (char *)v15 - v7;
  MenuPickerStyle.Body.configuration.getter((uint64_t)v15 - v7);
  double v11 = destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(a2, a3, v9, v10);
  (*(void (**)(char *, uint64_t, double))(v6 + 8))(v8, v5, v11);
  uint64_t v12 = type metadata accessor for PickerStyleConfiguration.Content();
  unint64_t v13 = lazy protocol witness table accessor for type MenuPickerOptionSectionStyle and conformance MenuPickerOptionSectionStyle();
  View.sectionStyle<A>(_:)(v13, v12, (uint64_t)&type metadata for MenuPickerOptionSectionStyle, (uint64_t)&protocol witness table for PickerStyleConfiguration<A>.Content);
  _s7SwiftUI20SectionStyleModifierVyAA016MenuPickerOptioncD0VGMaTm_0(255, &lazy cache variable for type metadata for SectionStyleModifier<MenuPickerOptionSectionStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type MenuPickerOptionSectionStyle and conformance MenuPickerOptionSectionStyle, (uint64_t)&type metadata for MenuPickerOptionSectionStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for SectionStyleModifier);
  type metadata accessor for ModifiedContent();
  v15[0] = &protocol witness table for PickerStyleConfiguration<A>.Content;
  v15[1] = &protocol witness table for SectionStyleModifier<A>;
  swift_getWitnessTable();
  return View.styleContext<A>(_:)();
}

uint64_t closure #1 in MenuPickerStyle.Body.menu.getter()
{
  uint64_t v0 = type metadata accessor for PickerStyleConfiguration.Label();
  uint64_t v1 = type metadata accessor for PickerContentView();
  uint64_t WitnessTable = swift_getWitnessTable();
  Menu.init(content:label:)((uint64_t (*)(uint64_t))partial apply for closure #1 in closure #1 in MenuPickerStyle.Body.menu.getter, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))partial apply for closure #2 in closure #1 in MenuPickerStyle.Body.menu.getter, (uint64_t)v10);
  v9[0] = v0;
  v9[1] = v1;
  void v9[2] = &protocol witness table for PickerStyleConfiguration<A>.Label;
  void v9[3] = WitnessTable;
  uint64_t v3 = type metadata accessor for Menu();
  uint64_t v4 = swift_getWitnessTable();
  unint64_t v5 = lazy protocol witness table accessor for type DefaultMenuStyle and conformance DefaultMenuStyle();
  View.menuStyle<A>(_:)(v5, v3, (uint64_t)&type metadata for DefaultMenuStyle, v4);
  (*(void (**)(unsigned char *, uint64_t))(*(void *)(v3 - 8) + 8))(v10, v3);
  _s7SwiftUI20SectionStyleModifierVyAA016MenuPickerOptioncD0VGMaTm_0(255, &lazy cache variable for type metadata for MenuStyleModifier<DefaultMenuStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type DefaultMenuStyle and conformance DefaultMenuStyle, (uint64_t)&type metadata for DefaultMenuStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for MenuStyleModifier);
  uint64_t v6 = type metadata accessor for ModifiedContent();
  swift_getWitnessTable();
  static ViewBuilder.buildExpression<A>(_:)(v9);
  uint64_t v7 = *(uint64_t (**)(unsigned char *, uint64_t))(*(void *)(v6 - 8) + 8);
  v7(v9, v6);
  static ViewBuilder.buildExpression<A>(_:)(v10);
  return v7(v10, v6);
}

uint64_t closure #1 in closure #1 in MenuPickerStyle.Body.menu.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = type metadata accessor for PickerStyleConfiguration();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  uint64_t v6 = &v12[-v5];
  MenuPickerStyle.Body.configuration.getter((uint64_t)&v12[-v5]);
  uint64_t v7 = *(void *)&v6[*(int *)(v3 + 36)];
  uint64_t v8 = *(void (**)(unsigned char *, uint64_t))(v4 + 8);
  swift_bridgeObjectRetain();
  v8(v6, v3);
  outlined init with copy of SubviewsCollection(a2, (uint64_t)v13);
  PickerContentView.init(selection:items:)(v7, (uint64_t)v13, (uint64_t)v12);
  uint64_t v9 = type metadata accessor for PickerContentView();
  swift_getWitnessTable();
  static ViewBuilder.buildExpression<A>(_:)(v12);
  uint64_t v10 = *(void (**)(unsigned char *, uint64_t))(*(void *)(v9 - 8) + 8);
  v10(v12, v9);
  static ViewBuilder.buildExpression<A>(_:)(v13);
  return ((uint64_t (*)(unsigned char *, uint64_t))v10)(v13, v9);
}

uint64_t closure #2 in closure #1 in MenuPickerStyle.Body.menu.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = type metadata accessor for PickerStyleConfiguration();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v8 = (char *)&v15 - v7;
  MenuPickerStyle.Body.configuration.getter((uint64_t)&v15 - v7);
  double v11 = destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(a2, a3, v9, v10);
  (*(void (**)(char *, uint64_t, double))(v6 + 8))(v8, v5, v11);
  uint64_t v12 = type metadata accessor for PickerStyleConfiguration.Label();
  uint64_t v13 = static ViewBuilder.buildExpression<A>(_:)(v12);
  return static ViewBuilder.buildExpression<A>(_:)(v13);
}

uint64_t closure #1 in MenuPickerStyle.Body.popUpButton.getter(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for PickerStyleConfiguration();
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = &v15[-v3 - 8];
  uint64_t v5 = type metadata accessor for PopUpButton();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v8 = &v15[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  MEMORY[0x1F4188790](v9);
  double v11 = &v15[-v10 - 8];
  outlined init with copy of SubviewsCollection(a1, (uint64_t)v15);
  MenuPickerStyle.Body.configuration.getter((uint64_t)v4);
  PopUpButton.init(children:configuration:)((uint64_t)v15, (uint64_t)v4, (uint64_t)v8);
  swift_getWitnessTable();
  static ViewBuilder.buildExpression<A>(_:)(v8);
  uint64_t v12 = *(void (**)(unsigned char *, uint64_t))(v6 + 8);
  v12(v8, v5);
  static ViewBuilder.buildExpression<A>(_:)(v11);
  return ((uint64_t (*)(unsigned char *, uint64_t))v12)(v11, v5);
}

double protocol witness for static Rule.initialValue.getter in conformance MenuPickerStyle.Body<A>@<D0>(_OWORD *a1@<X8>)
{
  double result = 0.0;
  a1[8] = 0u;
  a1[9] = 0u;
  a1[6] = 0u;
  a1[7] = 0u;
  a1[4] = 0u;
  a1[5] = 0u;
  a1[2] = 0u;
  a1[3] = 0u;
  *a1 = 0u;
  a1[1] = 0u;
  return result;
}

uint64_t protocol witness for Rule.value.getter in conformance MenuPickerStyle.Body<A>()
{
  return MenuPickerStyle.Body.value.getter();
}

ValueMetadata *type metadata accessor for MenuPickerStyle()
{
  return &type metadata for MenuPickerStyle;
}

ValueMetadata *type metadata accessor for MenuPickerOptionSectionStyle()
{
  return &type metadata for MenuPickerOptionSectionStyle;
}

uint64_t base witness table accessor for _AttributeBody in MenuPickerStyle.Body<A>()
{
  return swift_getWitnessTable();
}

uint64_t associated type witness table accessor for SectionStyle.Body : View in MenuPickerOptionSectionStyle()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t MenuPickerOptionSectionStyle.makeBody(configuration:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  v10[0] = 2;
  memset(&v10[1], 0, 24);
  v10[4] = 0xC000000000000000;
  long long v11 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  uint64_t v6 = swift_allocObject();
  uint64_t result = outlined init with take of PlatformItemList.Item.SystemItem?((uint64_t)v10, v6 + 16);
  BOOL v8 = 0;
  if (a2)
  {
    outlined copy of Binding<NavigationSplitViewColumn>?(a1, a2);
    _s7SwiftUI28StyleContextAcceptsPredicateVyAA04MenucD0VGMaTm_2(0, (unint64_t *)&lazy cache variable for type metadata for Binding<Bool>, MEMORY[0x1E4FBB390], MEMORY[0x1E4F41638]);
    MEMORY[0x18C113DA0](&v9);
    swift_release();
    uint64_t result = swift_release();
    if (v9 != 1) {
      BOOL v8 = 1;
    }
  }
  *(void *)a3 = partial apply for closure #1 in View.platformItemSystemType(_:);
  *(void *)(a3 + 8) = v6;
  *(unsigned char *)(a3 + 16) = 1;
  *(unsigned char *)(a3 + 17) = v8;
  *(unsigned char *)(a3 + 18) = 1;
  return result;
}

uint64_t sub_1882861FC()
{
  unint64_t v1 = *(void *)(v0 + 48);
  if (v1 >> 2 != 0xFFFFFFFF) {
    outlined consume of PlatformItemList.Item.SystemItem(*(void **)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40), v1, *(void *)(v0 + 56), *(void *)(v0 + 64), *(void *)(v0 + 72), *(void *)(v0 + 80), *(void *)(v0 + 88), *(void *)(v0 + 96), *(void *)(v0 + 104), *(void *)(v0 + 112));
  }

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in MenuPickerStyle.Body.value.getter()
{
  return partial apply for closure #1 in MenuPickerStyle.Body.value.getter(closure #1 in MenuPickerStyle.Body.value.getter);
}

uint64_t partial apply for closure #2 in MenuPickerStyle.Body.value.getter()
{
  return partial apply for closure #1 in MenuPickerStyle.Body.value.getter(closure #2 in MenuPickerStyle.Body.value.getter);
}

uint64_t partial apply for closure #1 in MenuPickerStyle.Body.value.getter(uint64_t (*a1)(uint64_t, void, void))
{
  uint64_t v2 = 0x100000000;
  if (!*(unsigned char *)(v1 + 36)) {
    uint64_t v2 = 0;
  }
  return a1(v2 | *(unsigned int *)(v1 + 32), *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_1882862C0()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in MenuPickerStyle.Body.popUpButton.getter(uint64_t a1)
{
  return closure #1 in MenuPickerStyle.Body.popUpButton.getter(a1);
}

uint64_t sub_1882862F0()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in MenuPickerStyle.Body.menu.getter()
{
  return closure #1 in MenuPickerStyle.Body.menu.getter();
}

uint64_t partial apply for closure #1 in closure #1 in MenuPickerStyle.Body.menu.getter()
{
  uint64_t v1 = 0x100000000;
  if (!*(unsigned char *)(v0 + 36)) {
    uint64_t v1 = 0;
  }
  return closure #1 in closure #1 in MenuPickerStyle.Body.menu.getter(v1 | *(unsigned int *)(v0 + 32), *(void *)(v0 + 40));
}

uint64_t partial apply for closure #2 in closure #1 in MenuPickerStyle.Body.menu.getter()
{
  uint64_t v1 = 0x100000000;
  if (!*(unsigned char *)(v0 + 36)) {
    uint64_t v1 = 0;
  }
  return closure #2 in closure #1 in MenuPickerStyle.Body.menu.getter(v1 | *(unsigned int *)(v0 + 32), *(void *)(v0 + 16), *(void *)(v0 + 24));
}

unint64_t lazy protocol witness table accessor for type TupleView<(ModifiedContent<ModifiedContent<SectionStyleConfiguration.Header, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, _TraitWritingModifier<IsAuxiliaryContentTraitKey>>, _ConditionalContent<SectionStyleConfiguration.RawContent, EmptyView>, ModifiedContent<Divider, _TraitWritingModifier<IsAuxiliaryContentTraitKey>>)> and conformance TupleView<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type TupleView<(ModifiedContent<ModifiedContent<SectionStyleConfiguration.Header, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, _TraitWritingModifier<IsAuxiliaryContentTraitKey>>, _ConditionalContent<SectionStyleConfiguration.RawContent, EmptyView>, ModifiedContent<Divider, _TraitWritingModifier<IsAuxiliaryContentTraitKey>>)> and conformance TupleView<A>;
  if (!lazy protocol witness table cache variable for type TupleView<(ModifiedContent<ModifiedContent<SectionStyleConfiguration.Header, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, _TraitWritingModifier<IsAuxiliaryContentTraitKey>>, _ConditionalContent<SectionStyleConfiguration.RawContent, EmptyView>, ModifiedContent<Divider, _TraitWritingModifier<IsAuxiliaryContentTraitKey>>)> and conformance TupleView<A>)
  {
    type metadata accessor for TupleView<(ModifiedContent<ModifiedContent<SectionStyleConfiguration.Header, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, _TraitWritingModifier<IsAuxiliaryContentTraitKey>>, _ConditionalContent<SectionStyleConfiguration.RawContent, EmptyView>, ModifiedContent<Divider, _TraitWritingModifier<IsAuxiliaryContentTraitKey>>)>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TupleView<(ModifiedContent<ModifiedContent<SectionStyleConfiguration.Header, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, _TraitWritingModifier<IsAuxiliaryContentTraitKey>>, _ConditionalContent<SectionStyleConfiguration.RawContent, EmptyView>, ModifiedContent<Divider, _TraitWritingModifier<IsAuxiliaryContentTraitKey>>)> and conformance TupleView<A>);
  }
  return result;
}

void type metadata accessor for TupleView<(ModifiedContent<ModifiedContent<SectionStyleConfiguration.Header, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, _TraitWritingModifier<IsAuxiliaryContentTraitKey>>, _ConditionalContent<SectionStyleConfiguration.RawContent, EmptyView>, ModifiedContent<Divider, _TraitWritingModifier<IsAuxiliaryContentTraitKey>>)>()
{
  if (!lazy cache variable for type metadata for TupleView<(ModifiedContent<ModifiedContent<SectionStyleConfiguration.Header, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, _TraitWritingModifier<IsAuxiliaryContentTraitKey>>, _ConditionalContent<SectionStyleConfiguration.RawContent, EmptyView>, ModifiedContent<Divider, _TraitWritingModifier<IsAuxiliaryContentTraitKey>>)>)
  {
    type metadata accessor for (ModifiedContent<ModifiedContent<SectionStyleConfiguration.Header, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, _TraitWritingModifier<IsAuxiliaryContentTraitKey>>, _ConditionalContent<SectionStyleConfiguration.RawContent, EmptyView>, ModifiedContent<Divider, _TraitWritingModifier<IsAuxiliaryContentTraitKey>>)();
    unint64_t v0 = type metadata accessor for TupleView();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TupleView<(ModifiedContent<ModifiedContent<SectionStyleConfiguration.Header, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, _TraitWritingModifier<IsAuxiliaryContentTraitKey>>, _ConditionalContent<SectionStyleConfiguration.RawContent, EmptyView>, ModifiedContent<Divider, _TraitWritingModifier<IsAuxiliaryContentTraitKey>>)>);
    }
  }
}

void type metadata accessor for (ModifiedContent<ModifiedContent<SectionStyleConfiguration.Header, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, _TraitWritingModifier<IsAuxiliaryContentTraitKey>>, _ConditionalContent<SectionStyleConfiguration.RawContent, EmptyView>, ModifiedContent<Divider, _TraitWritingModifier<IsAuxiliaryContentTraitKey>>)()
{
  if (!lazy cache variable for type metadata for (ModifiedContent<ModifiedContent<SectionStyleConfiguration.Header, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, _TraitWritingModifier<IsAuxiliaryContentTraitKey>>, _ConditionalContent<SectionStyleConfiguration.RawContent, EmptyView>, ModifiedContent<Divider, _TraitWritingModifier<IsAuxiliaryContentTraitKey>>))
  {
    type metadata accessor for ModifiedContent<ModifiedContent<SectionStyleConfiguration.Header, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, _TraitWritingModifier<IsAuxiliaryContentTraitKey>>();
    _s7SwiftUI18StyleContextWriterVyAA04MenucD0VGMaTm_0(255, (unint64_t *)&lazy cache variable for type metadata for _ConditionalContent<SectionStyleConfiguration.RawContent, EmptyView>, (uint64_t)&type metadata for SectionStyleConfiguration.RawContent, MEMORY[0x1E4F417F8], MEMORY[0x1E4F40578]);
    type metadata accessor for ModifiedContent<Divider, _TraitWritingModifier<IsAuxiliaryContentTraitKey>>();
    TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
    if (!v1) {
      atomic_store(TupleTypeMetadata3, (unint64_t *)&lazy cache variable for type metadata for (ModifiedContent<ModifiedContent<SectionStyleConfiguration.Header, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, _TraitWritingModifier<IsAuxiliaryContentTraitKey>>, _ConditionalContent<SectionStyleConfiguration.RawContent, EmptyView>, ModifiedContent<Divider, _TraitWritingModifier<IsAuxiliaryContentTraitKey>>));
    }
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<SectionStyleConfiguration.Header, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, _TraitWritingModifier<IsAuxiliaryContentTraitKey>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<SectionStyleConfiguration.Header, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, _TraitWritingModifier<IsAuxiliaryContentTraitKey>>)
  {
    type metadata accessor for ModifiedContent<SectionStyleConfiguration.Header, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>();
    _s7SwiftUI18StyleContextWriterVyAA04MenucD0VGMaTm_0(255, &lazy cache variable for type metadata for _TraitWritingModifier<IsAuxiliaryContentTraitKey>, MEMORY[0x1E4F40F48], MEMORY[0x1E4F40F40], MEMORY[0x1E4F408B8]);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<SectionStyleConfiguration.Header, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, _TraitWritingModifier<IsAuxiliaryContentTraitKey>>);
    }
  }
}

void type metadata accessor for ModifiedContent<SectionStyleConfiguration.Header, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<SectionStyleConfiguration.Header, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>)
  {
    _s7SwiftUI18StyleContextWriterVyAA04MenucD0VGMaTm_0(255, &lazy cache variable for type metadata for PlatformItemListTransformModifier<LayoutPlatformItemListFlags>, (uint64_t)&type metadata for LayoutPlatformItemListFlags, (uint64_t)&protocol witness table for LayoutPlatformItemListFlags, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PlatformItemListTransformModifier);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<SectionStyleConfiguration.Header, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>);
    }
  }
}

void _s7SwiftUI18StyleContextWriterVyAA04MenucD0VGMaTm_0(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = a5(0, a3, a4);
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

double SpatialTapGesture.Value.location.getter()
{
  return *(double *)v0;
}

void SpatialTapGesture.Value.location.setter(double a1, double a2)
{
  *uint64_t v2 = a1;
  v2[1] = a2;
}

uint64_t (*SpatialTapGesture.Value.location.modify())(void, void, void, void)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

BOOL static SpatialTapGesture.Value.== infix(_:_:)(double *a1, double *a2)
{
  return a1[1] == a2[1] && *a1 == *a2;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance SpatialTapGesture.Value(double *a1, double *a2)
{
  return a1[1] == a2[1] && *a1 == *a2;
}

uint64_t SpatialTapGesture.count.getter()
{
  return *(void *)v0;
}

uint64_t SpatialTapGesture.count.setter(uint64_t result)
{
  *uint64_t v1 = result;
  return result;
}

uint64_t (*SpatialTapGesture.count.modify())(void, void, void, void)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t SpatialTapGesture.coordinateSpace.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of CoordinateSpace(v1 + 8, a1);
}

uint64_t SpatialTapGesture.coordinateSpace.setter(uint64_t a1)
{
  return outlined assign with take of CoordinateSpace(a1, v1 + 8);
}

uint64_t (*SpatialTapGesture.coordinateSpace.modify())(void, void, void, void)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t SpatialTapGesture.init(count:coordinateSpace:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  *a3 = a1;
  return outlined init with take of CoordinateSpace(a2, (uint64_t)(a3 + 1));
}

uint64_t SpatialTapGesture.init<A>(count:coordinateSpace:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  *a5 = a1;
  uint64_t v7 = (uint64_t)(a5 + 1);
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(a4 + 8))(v9, a3, a4);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a3 - 8) + 8))(a2, a3);
  return outlined init with take of CoordinateSpace((uint64_t)v9, v7);
}

uint64_t static SpatialTapGesture._makeGesture(gesture:inputs:)(uint64_t a1, long long *a2)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  long long v2 = a2[5];
  long long v24 = a2[4];
  long long v25 = v2;
  v26[0] = a2[6];
  *(_OWORD *)((char *)v26 + 12) = *(long long *)((char *)a2 + 108);
  long long v3 = a2[1];
  long long v20 = *a2;
  long long v21 = v3;
  long long v4 = a2[3];
  long long v22 = a2[2];
  long long v23 = v4;
  type metadata accessor for <<opaque return type of Gesture.requiredTapCount(_:)>>.0();
  uint64_t v6 = v5;
  type metadata accessor for CoordinateSpaceGesture<TappableSpatialEvent>(0, &lazy cache variable for type metadata for _GraphValue<SpatialTapGesture>, (uint64_t)&type metadata for SpatialTapGesture, MEMORY[0x1E4F3F590]);
  _GraphValue.value.getter();
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  lazy protocol witness table accessor for type SpatialTapGesture.Child and conformance SpatialTapGesture.Child();
  Attribute.init<A>(body:value:flags:update:)();
  _GraphValue.init(_:)();
  long long v17 = v24;
  long long v18 = v25;
  v19[0] = v26[0];
  *(_OWORD *)((char *)v19 + 12) = *(_OWORD *)((char *)v26 + 12);
  long long v13 = v20;
  long long v14 = v21;
  long long v15 = v22;
  long long v16 = v23;
  type metadata accessor for ModifierGesture<CoordinateSpaceGesture<TappableSpatialEvent>, ModifierGesture<RepeatGesture<TappableSpatialEvent>, SingleTapGesture<TappableSpatialEvent>>>();
  *(void *)&long long v11 = v7;
  *((void *)&v11 + 1) = lazy protocol witness table accessor for type AddGestureModifier<_EndedGesture<SpatialTapGesture>> and conformance AddGestureModifier<A>(&lazy protocol witness table cache variable for type ModifierGesture<CoordinateSpaceGesture<TappableSpatialEvent>, ModifierGesture<RepeatGesture<TappableSpatialEvent>, SingleTapGesture<TappableSpatialEvent>>> and conformance ModifierGesture<A, B>, (void (*)(uint64_t))type metadata accessor for ModifierGesture<CoordinateSpaceGesture<TappableSpatialEvent>, ModifierGesture<RepeatGesture<TappableSpatialEvent>, SingleTapGesture<TappableSpatialEvent>>>);
  uint64_t OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  (*(void (**)(long long *__return_ptr, unsigned char *, long long *, uint64_t, uint64_t))(OpaqueTypeConformance2 + 32))(&v11, v10, &v13, v6, OpaqueTypeConformance2);
  long long v13 = v11;
  LODWORD(v14) = v12;
  type metadata accessor for CoordinateSpaceGesture<TappableSpatialEvent>(0, &lazy cache variable for type metadata for _GestureOutputs<TappableSpatialEvent>, MEMORY[0x1E4F406A8], MEMORY[0x1E4F3FC30]);
  LODWORD(v11) = _GestureOutputs.phase.getter();
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  type metadata accessor for CoordinateSpaceGesture<TappableSpatialEvent>(0, &lazy cache variable for type metadata for GesturePhase<SpatialTapGesture.Value>, (uint64_t)&type metadata for SpatialTapGesture.Value, MEMORY[0x1E4F3F5F8]);
  lazy protocol witness table accessor for type SpatialTapGesture.Phase and conformance SpatialTapGesture.Phase();
  Attribute.init<A>(body:value:flags:update:)();
  _GestureOutputs.withPhase<A>(_:)();
  return swift_bridgeObjectRelease();
}

uint64_t lazy protocol witness table accessor for type AddGestureModifier<_EndedGesture<SpatialTapGesture>> and conformance AddGestureModifier<A>(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t SpatialTapGesture.Child.value.getter()
{
  uint64_t v0 = *(void *)AGGraphGetValue();
  if (v0 <= 0)
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    uint64_t Value = (uint64_t *)AGGraphGetValue();
    outlined init with copy of SpatialTapGesture(Value, (uint64_t)v4);
    outlined init with copy of CoordinateSpace((uint64_t)v5, (uint64_t)v3);
    outlined init with copy of CoordinateSpaceGesture<TappableSpatialEvent>((uint64_t)v3, (uint64_t)&v7);
    v6[0] = v0;
    v6[1] = 0x3FD6666666666666;
    outlined destroy of CoordinateSpaceGesture<TappableSpatialEvent>((uint64_t)v3);
    outlined destroy of CoordinateSpace((uint64_t)v5);
    AGGraphGetValue();
    type metadata accessor for ModifierGesture<CoordinateSpaceGesture<TappableSpatialEvent>, ModifierGesture<RepeatGesture<TappableSpatialEvent>, SingleTapGesture<TappableSpatialEvent>>>();
    lazy protocol witness table accessor for type AddGestureModifier<_EndedGesture<SpatialTapGesture>> and conformance AddGestureModifier<A>(&lazy protocol witness table cache variable for type ModifierGesture<CoordinateSpaceGesture<TappableSpatialEvent>, ModifierGesture<RepeatGesture<TappableSpatialEvent>, SingleTapGesture<TappableSpatialEvent>>> and conformance ModifierGesture<A, B>, (void (*)(uint64_t))type metadata accessor for ModifierGesture<CoordinateSpaceGesture<TappableSpatialEvent>, ModifierGesture<RepeatGesture<TappableSpatialEvent>, SingleTapGesture<TappableSpatialEvent>>>);
    Gesture.requiredTapCount(_:)();
    return outlined destroy of ModifierGesture<CoordinateSpaceGesture<TappableSpatialEvent>, ModifierGesture<RepeatGesture<TappableSpatialEvent>, SingleTapGesture<TappableSpatialEvent>>>((uint64_t)v6);
  }
  return result;
}

uint64_t protocol witness for static Rule.initialValue.getter in conformance SpatialTapGesture.Child@<X0>(uint64_t a1@<X8>)
{
  type metadata accessor for <<opaque return type of Gesture.requiredTapCount(_:)>>.0();
  long long v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56);

  return v3(a1, 1, 1, v2);
}

uint64_t protocol witness for Rule.value.getter in conformance SpatialTapGesture.Child()
{
  return SpatialTapGesture.Child.value.getter();
}

uint64_t SpatialTapGesture.Phase.value.getter@<X0>(uint64_t a1@<X8>)
{
  type metadata accessor for CoordinateSpaceGesture<TappableSpatialEvent>(0, (unint64_t *)&lazy cache variable for type metadata for GesturePhase<TappableSpatialEvent>, MEMORY[0x1E4F406A8], MEMORY[0x1E4F3F5F8]);
  uint64_t Value = AGGraphGetValue();
  uint64_t result = *(void *)Value;
  uint64_t v4 = *(void *)(Value + 8);
  uint64_t v5 = *(void *)(Value + 16);
  uint64_t v6 = *(void *)(Value + 24);
  uint64_t v7 = *(void *)(Value + 32);
  uint64_t v8 = *(void *)(Value + 40);
  uint64_t v9 = *(void *)(Value + 48);
  uint64_t v10 = *(void *)(Value + 56);
  int v11 = *(unsigned __int8 *)(Value + 64);
  if ((v11 - 1) >= 2)
  {
    if (v11)
    {
      *(void *)a1 = 0;
      *(void *)(a1 + 8) = 0;
      *(_WORD *)(a1 + 16) = 768;
    }
    else if (v5 == 1)
    {
      uint64_t result = outlined consume of GesturePhase<TappableSpatialEvent>(result, v4, 1, v6, v7, v8, v9, v10, 0);
      *(void *)a1 = 0;
      *(void *)(a1 + 8) = 0;
      *(_WORD *)(a1 + 16) = 1;
    }
    else
    {
      uint64_t result = TappableSpatialEvent.location.getter();
      *(void *)a1 = v22;
      *(void *)(a1 + 8) = v23;
      *(_WORD *)(a1 + 16) = 0;
    }
  }
  else
  {
    TappableSpatialEvent.location.getter();
    uint64_t v12 = AGGraphGetValue();
    uint64_t v24 = *(void *)v12;
    uint64_t v25 = *(void *)(v12 + 8);
    uint64_t v26 = *(void *)(v12 + 16);
    uint64_t v27 = *(void *)(v12 + 24);
    uint64_t v28 = *(void *)(v12 + 32);
    uint64_t v29 = *(void *)(v12 + 40);
    uint64_t v30 = *(void *)(v12 + 48);
    uint64_t v31 = *(void *)(v12 + 56);
    char v32 = *(unsigned char *)(v12 + 64);
    MEMORY[0x1F4188790](v12);
    outlined copy of GesturePhase<TappableSpatialEvent>(v20, v13, v14, v15, v16, v17, v18, v19, v21);
    GesturePhase.withValue<A>(_:)();
    return outlined consume of GesturePhase<TappableSpatialEvent>(v24, v25, v26, v27, v28, v29, v30, v31, v32);
  }
  return result;
}

void protocol witness for static Rule.initialValue.getter in conformance SpatialTapGesture.Phase(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = -256;
}

uint64_t protocol witness for Rule.value.getter in conformance SpatialTapGesture.Phase@<X0>(uint64_t a1@<X8>)
{
  return SpatialTapGesture.Phase.value.getter(a1);
}

void protocol witness for Gesture.body.getter in conformance SpatialTapGesture()
{
}

uint64_t View.onTapGesture(count:coordinateSpace:perform:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  outlined init with copy of CoordinateSpace(a2, (uint64_t)&v10);
  uint64_t v9 = a1;
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = a3;
  *(void *)(v7 + 24) = a4;
  swift_retain();
  Gesture.onEnded(_:)();
  swift_release();
  outlined destroy of SpatialDragGesture((uint64_t)&v9);
  type metadata accessor for SingleTapGesture<TappableSpatialEvent>(0, &lazy cache variable for type metadata for _EndedGesture<SpatialTapGesture>, (uint64_t)&type metadata for SpatialTapGesture, (uint64_t)&protocol witness table for SpatialTapGesture, MEMORY[0x1E4F3F810]);
  lazy protocol witness table accessor for type _EndedGesture<SpatialTapGesture> and conformance _EndedGesture<A>();
  View.gesture<A>(_:including:)();
  return outlined destroy of _EndedGesture<SpatialTapGesture>((uint64_t)v11);
}

uint64_t View.onTapGesture<A>(count:coordinateSpace:perform:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v13 = *(void *)(a6 - 8);
  double v14 = MEMORY[0x1F4188790](a1);
  uint64_t v16 = (char *)&v19 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, double))(v13 + 16))(v16, v14);
  uint64_t v20 = a1;
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(a8 + 8))(v22, a6, a8);
  (*(void (**)(char *, uint64_t))(v13 + 8))(v16, a6);
  outlined init with take of CoordinateSpace((uint64_t)v22, (uint64_t)&v21);
  uint64_t v17 = swift_allocObject();
  *(void *)(v17 + 16) = a3;
  *(void *)(v17 + 24) = a4;
  swift_retain();
  Gesture.onEnded(_:)();
  swift_release();
  outlined destroy of SpatialDragGesture((uint64_t)&v20);
  type metadata accessor for SingleTapGesture<TappableSpatialEvent>(0, &lazy cache variable for type metadata for _EndedGesture<SpatialTapGesture>, (uint64_t)&type metadata for SpatialTapGesture, (uint64_t)&protocol witness table for SpatialTapGesture, MEMORY[0x1E4F3F810]);
  lazy protocol witness table accessor for type _EndedGesture<SpatialTapGesture> and conformance _EndedGesture<A>();
  View.gesture<A>(_:including:)();
  return outlined destroy of _EndedGesture<SpatialTapGesture>((uint64_t)v22);
}

unint64_t lazy protocol witness table accessor for type SpatialTapGesture.Child and conformance SpatialTapGesture.Child()
{
  unint64_t result = lazy protocol witness table cache variable for type SpatialTapGesture.Child and conformance SpatialTapGesture.Child;
  if (!lazy protocol witness table cache variable for type SpatialTapGesture.Child and conformance SpatialTapGesture.Child)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SpatialTapGesture.Child and conformance SpatialTapGesture.Child);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type SpatialTapGesture.Phase and conformance SpatialTapGesture.Phase()
{
  unint64_t result = lazy protocol witness table cache variable for type SpatialTapGesture.Phase and conformance SpatialTapGesture.Phase;
  if (!lazy protocol witness table cache variable for type SpatialTapGesture.Phase and conformance SpatialTapGesture.Phase)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SpatialTapGesture.Phase and conformance SpatialTapGesture.Phase);
  }
  return result;
}

uint64_t sub_188287400()
{
  swift_release();

  return swift_deallocObject();
}

void type metadata accessor for SingleTapGesture<TappableSpatialEvent>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = a5(0, a3, a4);
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

unint64_t lazy protocol witness table accessor for type _EndedGesture<SpatialTapGesture> and conformance _EndedGesture<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type _EndedGesture<SpatialTapGesture> and conformance _EndedGesture<A>;
  if (!lazy protocol witness table cache variable for type _EndedGesture<SpatialTapGesture> and conformance _EndedGesture<A>)
  {
    type metadata accessor for SingleTapGesture<TappableSpatialEvent>(255, &lazy cache variable for type metadata for _EndedGesture<SpatialTapGesture>, (uint64_t)&type metadata for SpatialTapGesture, (uint64_t)&protocol witness table for SpatialTapGesture, MEMORY[0x1E4F3F810]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _EndedGesture<SpatialTapGesture> and conformance _EndedGesture<A>);
  }
  return result;
}

uint64_t outlined destroy of _EndedGesture<SpatialTapGesture>(uint64_t a1)
{
  type metadata accessor for SingleTapGesture<TappableSpatialEvent>(0, &lazy cache variable for type metadata for _EndedGesture<SpatialTapGesture>, (uint64_t)&type metadata for SpatialTapGesture, (uint64_t)&protocol witness table for SpatialTapGesture, MEMORY[0x1E4F3F810]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t partial apply for closure #1 in View.onTapGesture(count:coordinateSpace:perform:)(double *a1)
{
  return (*(uint64_t (**)(double, double))(v1 + 16))(*a1, a1[1]);
}

_UNKNOWN **base witness table accessor for Gesture in SpatialTapGesture()
{
  return &protocol witness table for SpatialTapGesture;
}

uint64_t initializeWithCopy for SpatialTapGesture(uint64_t a1, uint64_t *a2)
{
  uint64_t v5 = *a2;
  uint64_t v4 = a2 + 1;
  *(void *)a1 = v5;
  unint64_t v6 = (_OWORD *)(a1 + 8);
  if (*((unsigned char *)a2 + 48))
  {
    long long v7 = v4[1];
    *unint64_t v6 = *v4;
    v6[1] = v7;
    *(_OWORD *)((char *)v6 + 25) = *(_OWORD *)((char *)v4 + 25);
  }
  else
  {
    long long v8 = *((_OWORD *)a2 + 2);
    *(_OWORD *)(a1 + 32) = v8;
    (**(void (***)(_OWORD *, _OWORD *))(v8 - 8))(v6, v4);
    *(unsigned char *)(a1 + 48) = 0;
  }
  return a1;
}

uint64_t assignWithCopy for SpatialTapGesture(uint64_t a1, uint64_t a2)
{
  long long v3 = (long long *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  uint64_t v4 = (_OWORD *)(a1 + 8);
  if (a1 != a2)
  {
    outlined destroy of CoordinateSpace(a1 + 8);
    if (*(unsigned char *)(a2 + 48))
    {
      long long v6 = *v3;
      long long v7 = v3[1];
      *(_OWORD *)((char *)v4 + 25) = *(long long *)((char *)v3 + 25);
      *uint64_t v4 = v6;
      v4[1] = v7;
    }
    else
    {
      uint64_t v8 = *(void *)(a2 + 32);
      *(void *)(a1 + 32) = v8;
      *(void *)(a1 + 40) = *(void *)(a2 + 40);
      (**(void (***)(_OWORD *, long long *))(v8 - 8))(v4, v3);
      *(unsigned char *)(a1 + 48) = 0;
    }
  }
  return a1;
}

uint64_t assignWithTake for SpatialTapGesture(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  if (a1 != a2)
  {
    outlined destroy of CoordinateSpace(a1 + 8);
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 33) = *(_OWORD *)(a2 + 33);
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for SpatialTapGesture(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFE && *(unsigned char *)(a1 + 49)) {
    return (*(_DWORD *)a1 + 254);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 48);
  if (v3 <= 2) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for SpatialTapGesture(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(void *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 48) = 0;
    *(void *)unint64_t result = a2 - 254;
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 49) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 49) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 48) = -(char)a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SpatialTapGesture()
{
  return &type metadata for SpatialTapGesture;
}

ValueMetadata *type metadata accessor for SpatialTapGesture.Value()
{
  return &type metadata for SpatialTapGesture.Value;
}

uint64_t sub_188287818()
{
  return swift_getWitnessTable();
}

void type metadata accessor for AddGestureModifier<_EndedGesture<SpatialTapGesture>>()
{
  if (!lazy cache variable for type metadata for AddGestureModifier<_EndedGesture<SpatialTapGesture>>)
  {
    type metadata accessor for SingleTapGesture<TappableSpatialEvent>(255, &lazy cache variable for type metadata for _EndedGesture<SpatialTapGesture>, (uint64_t)&type metadata for SpatialTapGesture, (uint64_t)&protocol witness table for SpatialTapGesture, MEMORY[0x1E4F3F810]);
    lazy protocol witness table accessor for type _EndedGesture<SpatialTapGesture> and conformance _EndedGesture<A>();
    unint64_t v0 = type metadata accessor for AddGestureModifier();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for AddGestureModifier<_EndedGesture<SpatialTapGesture>>);
    }
  }
}

uint64_t sub_188287944()
{
  return swift_getWitnessTable();
}

void *type metadata accessor for SpatialTapGesture.Phase()
{
  return &unk_1ED424E90;
}

void *type metadata accessor for SpatialTapGesture.Child()
{
  return &unk_1ED424E68;
}

void type metadata accessor for CoordinateSpaceGesture<TappableSpatialEvent>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

__n128 partial apply for implicit closure #1 in SpatialTapGesture.Phase.value.getter@<Q0>(__n128 *a1@<X8>)
{
  __n128 result = v1[1];
  *a1 = result;
  return result;
}

uint64_t outlined copy of GesturePhase<TappableSpatialEvent>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  if (a9 == 2 || a9 == 1) {
    return swift_retain();
  }
  if (!a9) {
    return outlined copy of HitTestableEvent?(result, a2, a3);
  }
  return result;
}

uint64_t outlined init with copy of SpatialTapGesture(uint64_t *a1, uint64_t a2)
{
  return a2;
}

uint64_t outlined init with copy of CoordinateSpaceGesture<TappableSpatialEvent>(uint64_t a1, uint64_t a2)
{
  type metadata accessor for CoordinateSpaceGesture<TappableSpatialEvent>(0, &lazy cache variable for type metadata for CoordinateSpaceGesture<TappableSpatialEvent>, MEMORY[0x1E4F406A8], MEMORY[0x1E4F40910]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of CoordinateSpaceGesture<TappableSpatialEvent>(uint64_t a1)
{
  type metadata accessor for CoordinateSpaceGesture<TappableSpatialEvent>(0, &lazy cache variable for type metadata for CoordinateSpaceGesture<TappableSpatialEvent>, MEMORY[0x1E4F406A8], MEMORY[0x1E4F40910]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t outlined destroy of ModifierGesture<CoordinateSpaceGesture<TappableSpatialEvent>, ModifierGesture<RepeatGesture<TappableSpatialEvent>, SingleTapGesture<TappableSpatialEvent>>>(uint64_t a1)
{
  type metadata accessor for ModifierGesture<CoordinateSpaceGesture<TappableSpatialEvent>, ModifierGesture<RepeatGesture<TappableSpatialEvent>, SingleTapGesture<TappableSpatialEvent>>>();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t destroy for SceneActivationBehavior(uint64_t result)
{
  unsigned int v1 = *(unsigned __int8 *)(result + 16);
  if (v1 <= 1) {
    return outlined consume of SceneID(*(void *)result, *(void *)(result + 8), v1 != 0);
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for SceneActivationBehavior(uint64_t a1, uint64_t *a2)
{
  unsigned int v3 = *((unsigned __int8 *)a2 + 16);
  if ((v3 + 1) > 2u || v3 > 1)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(unsigned char *)(a1 + 16) = *((unsigned char *)a2 + 16);
  }
  else
  {
    uint64_t v4 = *a2;
    uint64_t v5 = a2[1];
    char v6 = v3 & 1;
    outlined copy of SceneID(*a2, v5, v3 & 1);
    *(void *)a1 = v4;
    *(void *)(a1 + 8) = v5;
    *(unsigned char *)(a1 + 16) = v6;
  }
  return a1;
}

uint64_t assignWithCopy for SceneActivationBehavior(uint64_t a1, long long *a2)
{
  unsigned int v4 = *(unsigned __int8 *)(a1 + 16);
  unsigned int v5 = *((unsigned __int8 *)a2 + 16);
  if ((v4 + 1) > 2u)
  {
    if ((v5 + 1) > 2u) {
      goto LABEL_11;
    }
    goto LABEL_7;
  }
  if ((v5 + 1) > 2u)
  {
    if (v4 <= 1) {
      goto LABEL_10;
    }
LABEL_11:
    long long v15 = *a2;
    *(unsigned char *)(a1 + 16) = *((unsigned char *)a2 + 16);
    *(_OWORD *)a1 = v15;
    return a1;
  }
  if (v4 > 1)
  {
LABEL_7:
    if (v5 <= 1)
    {
      uint64_t v13 = *(void *)a2;
      uint64_t v12 = *((void *)a2 + 1);
      char v14 = v5 & 1;
      outlined copy of SceneID(*(void *)a2, v12, v5 & 1);
      *(void *)a1 = v13;
      *(void *)(a1 + 8) = v12;
      *(unsigned char *)(a1 + 16) = v14;
      return a1;
    }
    goto LABEL_11;
  }
  if (v5 > 1)
  {
LABEL_10:
    outlined consume of SceneID(*(void *)a1, *(void *)(a1 + 8), v4 & 1);
    goto LABEL_11;
  }
  uint64_t v7 = *(void *)a2;
  uint64_t v6 = *((void *)a2 + 1);
  char v8 = v5 & 1;
  outlined copy of SceneID(*(void *)a2, v6, v5 & 1);
  uint64_t v9 = *(void *)a1;
  uint64_t v10 = *(void *)(a1 + 8);
  char v11 = *(unsigned char *)(a1 + 16);
  *(void *)a1 = v7;
  *(void *)(a1 + 8) = v6;
  *(unsigned char *)(a1 + 16) = v8;
  outlined consume of SceneID(v9, v10, v11);
  return a1;
}

uint64_t assignWithTake for SceneActivationBehavior(uint64_t a1, uint64_t a2)
{
  unsigned int v4 = *(unsigned __int8 *)(a1 + 16);
  if ((v4 + 1) > 2u) {
    goto LABEL_9;
  }
  unsigned int v5 = *(unsigned __int8 *)(a2 + 16);
  if ((v5 + 1) > 2u)
  {
    if (v4 <= 1)
    {
      uint64_t v6 = *(void *)a1;
      uint64_t v7 = *(void *)(a1 + 8);
      goto LABEL_8;
    }
LABEL_9:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
    return a1;
  }
  if (v4 > 1) {
    goto LABEL_9;
  }
  uint64_t v6 = *(void *)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  if (v5 > 1)
  {
LABEL_8:
    outlined consume of SceneID(v6, v7, v4 & 1);
    goto LABEL_9;
  }
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(unsigned char *)(a1 + 16) = v5 & 1;
  outlined consume of SceneID(v6, v7, v4 & 1);
  return a1;
}

uint64_t getEnumTagSinglePayload for SceneActivationBehavior(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFD && *(unsigned char *)(a1 + 17)) {
    return (*(_DWORD *)a1 + 253);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 1) {
    unsigned int v4 = -1;
  }
  else {
    unsigned int v4 = v3 ^ 0xFF;
  }
  if (v4 + 1 < 2) {
    unsigned int v4 = 0;
  }
  if (v4 >= 2) {
    return v4 - 1;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for SceneActivationBehavior(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFC)
  {
    *(void *)__n128 result = 0;
    *(void *)(result + 8) = 0;
    *(unsigned char *)(result + 16) = 0;
    *(_DWORD *)__n128 result = a2 - 253;
    if (a3 >= 0xFD) {
      *(unsigned char *)(result + 17) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFD) {
      *(unsigned char *)(result + 17) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 16) = -2 - a2;
    }
  }
  return result;
}

uint64_t getEnumTag for SceneActivationBehavior(uint64_t a1)
{
  unsigned int v1 = *(unsigned __int8 *)(a1 + 16);
  if (v1 <= 1) {
    unsigned int v2 = -1;
  }
  else {
    unsigned int v2 = v1 ^ 0xFF;
  }
  if (v2 + 1 >= 2) {
    return v2;
  }
  else {
    return 0;
  }
}

uint64_t destructiveInjectEnumTag for SceneActivationBehavior(uint64_t result, unsigned int a2)
{
  if (a2 > 0xFD)
  {
    *(void *)__n128 result = 0;
    *(void *)(result + 8) = 0;
    *(unsigned char *)(result + 16) = 0;
    *(_DWORD *)__n128 result = a2 - 254;
  }
  else if (a2)
  {
    *(unsigned char *)(result + 16) = ~(_BYTE)a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for SceneActivationBehavior()
{
  return &type metadata for SceneActivationBehavior;
}

ValueMetadata *type metadata accessor for ContainerBackgroundKeys()
{
  return &type metadata for ContainerBackgroundKeys;
}

ValueMetadata *type metadata accessor for ContainerBackgroundKeys.CustomKey()
{
  return &type metadata for ContainerBackgroundKeys.CustomKey;
}

uint64_t ContainerBackgroundKeys.AnyCustomKey.init<A>(_:)(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t EnvironmentValues.presentationWantsTransparentBackground.setter(uint64_t a1)
{
  return EnvironmentValues.isSelectable.setter(a1, &lazy cache variable for type metadata for EnvironmentPropertyKey<ContainerBackgroundKeys.TransparentPresentation>, (uint64_t)&type metadata for ContainerBackgroundKeys.TransparentPresentation, (uint64_t)&protocol witness table for ContainerBackgroundKeys.TransparentPresentation, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<ContainerBackgroundKeys.TransparentPresentation> and conformance EnvironmentPropertyKey<A>);
}

unint64_t protocol witness for static PreferenceKey.defaultValue.getter in conformance ContainerBackgroundKeys.CustomKey@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
  *a1 = result;
  return result;
}

void protocol witness for static ContainerBackgroundPlacementKey.placement.getter in conformance ContainerBackgroundKeys.NavigationKey(void *a1@<X8>)
{
  *a1 = 0x8000000000000000;
}

void protocol witness for static ContainerBackgroundPlacementKey.placement.getter in conformance ContainerBackgroundKeys.PresentationKey(void *a1@<X8>)
{
  *a1 = 0x8000000000000003;
}

void protocol witness for static ContainerBackgroundPlacementKey.placement.getter in conformance ContainerBackgroundKeys.NavigationSplitViewKey(void *a1@<X8>)
{
  *a1 = 0x8000000000000001;
}

uint64_t specialized static ContainerBackgroundKeys.CustomKey.reduce(value:nextValue:)(uint64_t *a1, void (*a2)(uint64_t *__return_ptr))
{
  a2(&v6);
  uint64_t v3 = v6;
  swift_bridgeObjectRetain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v6 = *a1;
  *a1 = 0x8000000000000000;
  specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(v3, (uint64_t)keypath_getTm_1, 0, isUniquelyReferenced_nonNull_native, &v6);
  *a1 = v6;
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

ValueMetadata *type metadata accessor for ContainerBackgroundKeys.WantsContainerBackgroundPlacementKey()
{
  return &type metadata for ContainerBackgroundKeys.WantsContainerBackgroundPlacementKey;
}

ValueMetadata *type metadata accessor for ContainerBackgroundKeys.CustomValue()
{
  return &type metadata for ContainerBackgroundKeys.CustomValue;
}

ValueMetadata *type metadata accessor for ContainerBackgroundKeys.AnyCustomKey()
{
  return &type metadata for ContainerBackgroundKeys.AnyCustomKey;
}

void *type metadata accessor for ContainerBackgroundKeys.TransparentNavigationSplitViewKey()
{
  return &unk_1ED43E3A8;
}

ValueMetadata *type metadata accessor for PencilEventsModifier()
{
  return &type metadata for PencilEventsModifier;
}

_UNKNOWN **base witness table accessor for ViewModifier in PencilEventsModifier()
{
  return &protocol witness table for PencilEventsModifier;
}

double static PencilEventsModifier._makeView(modifier:inputs:body:)@<D0>(int *a1@<X0>, long long *a2@<X1>, void (*a3)(long long *__return_ptr)@<X2>, void *a4@<X8>)
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  long long v5 = a2[3];
  long long v6 = a2[1];
  long long v32 = a2[2];
  long long v33 = v5;
  long long v7 = a2[3];
  long long v34 = a2[4];
  long long v8 = a2[1];
  long long v30 = *a2;
  long long v31 = v8;
  long long v26 = v32;
  long long v27 = v7;
  long long v28 = a2[4];
  int v9 = *a1;
  int v35 = *((_DWORD *)a2 + 20);
  int v29 = *((_DWORD *)a2 + 20);
  long long v24 = v30;
  long long v25 = v6;
  a3(&v20);
  uint64_t v21 = v33;
  int v22 = DWORD2(v33);
  *(void *)&long long v24 = v33;
  DWORD2(v24) = DWORD2(v33);
  uint64_t v23 = &v30;
  outlined retain of [Text.Modifier]((uint64_t)&v21);
  PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
  swift_bridgeObjectRelease();
  *(void *)&long long v24 = v21;
  DWORD2(v24) = v22;
  if (PreferencesInputs.contains<A>(_:includeHostPreferences:)())
  {
    type metadata accessor for PencilEventsResponder();
    uint64_t v10 = swift_allocObject();
    *(void *)(v10 + 216) = 0;
    *(void *)(v10 + 224) = 0;
    outlined retain of _ViewInputs((uint64_t)&v30);
    swift_retain();
    static CGSize.invalidValue.getter();
    *(void *)(v10 + 232) = v11;
    *(void *)(v10 + 240) = v12;
    ViewTransform.init()();
    *(_OWORD *)(v10 + 288) = 0u;
    *(_OWORD *)(v10 + 304) = 0u;
    swift_release();
    long long v26 = v32;
    long long v27 = v33;
    long long v28 = v34;
    int v29 = v35;
    long long v24 = v30;
    long long v25 = v31;
    uint64_t v13 = DefaultLayoutViewResponder.init(inputs:)();
    LODWORD(v24) = v9;
    type metadata accessor for _GraphValue<PointerHoverEffectModifier>(0, &lazy cache variable for type metadata for _GraphValue<PencilEventsModifier>, (uint64_t)&type metadata for PencilEventsModifier, MEMORY[0x1E4F3F590]);
    unsigned int v14 = _GraphValue.value.getter();
    long long v26 = v32;
    long long v27 = v33;
    long long v28 = v34;
    int v29 = v35;
    long long v24 = v30;
    long long v25 = v31;
    unsigned int v15 = _ViewInputs.animatedPosition()();
    long long v26 = v32;
    long long v27 = v33;
    long long v28 = v34;
    int v29 = v35;
    long long v24 = v30;
    long long v25 = v31;
    unsigned int v16 = _ViewInputs.animatedSize()();
    long long v26 = v32;
    long long v27 = v33;
    long long v28 = v34;
    int v29 = v35;
    long long v24 = v30;
    long long v25 = v31;
    unsigned int v17 = _ViewInputs.transform.getter();
    long long v24 = v20;
    int v18 = _ViewOutputs.viewResponders()();
    *(void *)&long long v24 = v13;
    *((void *)&v24 + 1) = __PAIR64__(v15, v14);
    *(void *)&long long v25 = __PAIR64__(v17, v16);
    DWORD2(v25) = v18;
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    type metadata accessor for [ViewResponder]();
    lazy protocol witness table accessor for type ResponderUpdater and conformance ResponderUpdater();
    Attribute.init<A>(body:value:flags:update:)();
    swift_release();
    LOBYTE(v24) = 0;
    _ViewOutputs.subscript.setter();
  }
  *a4 = v20;
  double result = *((double *)&v20 + 1);
  a4[1] = *((void *)&v20 + 1);
  return result;
}

void protocol witness for ViewModifier.body(content:) in conformance PencilEventsModifier()
{
}

uint64_t ResponderUpdater.updateValue()()
{
  uint64_t v1 = *v0;
  uint64_t Value = (uint64_t *)AGGraphGetValue();
  uint64_t v4 = *Value;
  uint64_t v3 = Value[1];
  uint64_t v5 = *(void *)(v1 + 288);
  *(void *)(v1 + 288) = *Value;
  *(void *)(v1 + 296) = v3;
  outlined copy of AppIntentExecutor?(v4);
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v5);
  uint64_t v6 = AGGraphGetValue();
  uint64_t v8 = *(void *)(v6 + 16);
  uint64_t v7 = *(void *)(v6 + 24);
  uint64_t v9 = *(void *)(v1 + 304);
  *(void *)(v1 + 304) = v8;
  *(void *)(v1 + 312) = v7;
  outlined copy of AppIntentExecutor?(v8);
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v9);
  uint64_t v10 = AGGraphGetValue();
  *(double *)(v1 + 216) = MEMORY[0x18C10C240](v10, v11);
  *(void *)(v1 + 224) = v12;
  uint64_t v13 = AGGraphGetValue();
  *(double *)(v1 + 232) = MEMORY[0x18C114450](v13, v14, v15, v16);
  *(void *)(v1 + 240) = v17;
  uint64_t v18 = AGGraphGetValue();
  long long v19 = *(_OWORD *)(v18 + 8);
  long long v20 = *(_OWORD *)(v18 + 24);
  *(void *)(v1 + 248) = *(void *)v18;
  *(_OWORD *)(v1 + 256) = v19;
  *(_OWORD *)(v1 + 272) = v20;
  swift_retain();
  swift_release();
  type metadata accessor for [ViewResponder]();
  AGGraphGetValue();
  if (v21)
  {
    swift_bridgeObjectRetain_n();
    MultiViewResponder.children.setter();
    swift_bridgeObjectRelease();
  }
  uint64_t result = AGGraphGetOutputValue();
  if (!result)
  {
    type metadata accessor for _GraphValue<PointerHoverEffectModifier>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>, MEMORY[0x1E4FBC838] + 8, MEMORY[0x1E4FBBE00]);
    uint64_t v23 = swift_allocObject();
    *(_OWORD *)(v23 + 16) = xmmword_188351940;
    *(void *)(v23 + 32) = v1;
    specialized Array._endMutation()();
    swift_retain();
    AGGraphSetOutputValue();
    return swift_bridgeObjectRelease();
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ResponderUpdater and conformance ResponderUpdater()
{
  unint64_t result = lazy protocol witness table cache variable for type ResponderUpdater and conformance ResponderUpdater;
  if (!lazy protocol witness table cache variable for type ResponderUpdater and conformance ResponderUpdater)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ResponderUpdater and conformance ResponderUpdater);
  }
  return result;
}

void *type metadata accessor for ResponderUpdater()
{
  return &unk_1ED41EF60;
}

ValueMetadata *type metadata accessor for WantsPencilEventsKey()
{
  return &type metadata for WantsPencilEventsKey;
}

uint64_t View.interactionActivityTrackingTag(_:)(uint64_t a1, uint64_t a2)
{
  swift_getKeyPath();
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = a1;
  *(void *)(v4 + 24) = a2;
  swift_bridgeObjectRetain();
  View.transformEnvironment<A>(_:transform:)();
  swift_release();

  return swift_release();
}

uint64_t sub_188288BB0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = EnvironmentValues.interactionActivityTag.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t key path setter for EnvironmentValues.interactionActivityTag : EnvironmentValues(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = a1[1];
  swift_bridgeObjectRetain();
  specialized EnvironmentValues.subscript.setter(v1, v2);

  return swift_bridgeObjectRelease();
}

uint64_t closure #1 in View.interactionActivityTrackingTag(_:)(Swift::String *a1, Swift::String a2)
{
  if (a1->_object)
  {
    String.append(_:)(a2);
    v2._countAndFlagsBits = 45;
    v2._object = (void *)0xE100000000000000;
    String.append(_:)(v2);
    return swift_bridgeObjectRelease();
  }
  else
  {
    *a1 = a2;
    return swift_bridgeObjectRetain();
  }
}

uint64_t sub_188288CE8()
{
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in View.interactionActivityTrackingTag(_:)(Swift::String *a1)
{
  return closure #1 in View.interactionActivityTrackingTag(_:)(a1, v1[1]);
}

uint64_t sub_188288D28()
{
  return swift_getWitnessTable();
}

void type metadata accessor for _EnvironmentKeyTransformModifier<String?>()
{
  if (!lazy cache variable for type metadata for _EnvironmentKeyTransformModifier<String?>)
  {
    type metadata accessor for String?();
    unint64_t v0 = type metadata accessor for _EnvironmentKeyTransformModifier();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyTransformModifier<String?>);
    }
  }
}

ValueMetadata *type metadata accessor for UserInteractionActivityKey()
{
  return &type metadata for UserInteractionActivityKey;
}

id _UISecureHostingController.__allocating_init(rootView:)(objc_class *a1)
{
  id v3 = specialized _UISecureHostingController.__allocating_init(rootView:)(a1);
  (*(void (**)(objc_class *))(*(void *)(*(void *)(v1 + 960) - 8) + 8))(a1);
  return v3;
}

void specialized _UIHostingView.updateBackgroundColor()()
{
  uint64_t v1 = (void *)MEMORY[0x1E4FBC8C8];
  if (*((unsigned char *)v0 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v0) + 0x1C0)) == 1
    && (uint64_t v2 = *(void *)((char *)v0 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v0) + 0x1C8))) != 0)
  {
    type metadata accessor for _UIHostingView<ModifiedContent<AnyView, ClarityUIInterfaceIdiomModifier>>(0, (unint64_t *)&lazy cache variable for type metadata for _UIHostingView<ModifiedContent<AnyView, ClarityUIInterfaceIdiomModifier>>, (uint64_t (*)(uint64_t, uint64_t, unint64_t))type metadata accessor for _UIHostingView);
    v9.receiver = v0;
    v9.super_class = v3;
    objc_msgSendSuper2(&v9, sel_setBackgroundColor_, v2);
  }
  else
  {
    uint64_t v4 = (void *)MEMORY[0x18C119DF0]((char *)v0 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v0) + 0xC0));

    if (v4)
    {
      if (*(_DWORD *)((char *)v0 + *(void *)((*v1 & *v0) + 0x88)))
      {
        type metadata accessor for _UIHostingView<ModifiedContent<AnyView, ClarityUIInterfaceIdiomModifier>>(0, (unint64_t *)&lazy cache variable for type metadata for _UIHostingView<ModifiedContent<AnyView, ClarityUIInterfaceIdiomModifier>>, (uint64_t (*)(uint64_t, uint64_t, unint64_t))type metadata accessor for _UIHostingView);
        v11.receiver = v0;
        v11.super_class = v5;
        objc_msgSendSuper2(&v11, sel_setBackgroundColor_, 0);
      }
      else
      {
        id v6 = objc_msgSend(self, sel_systemBackgroundColor);
        if (*((unsigned char *)v0 + *(void *)((*v1 & *v0) + 0x78)) == 1)
        {
        }
        else
        {
          id v8 = v6;
          type metadata accessor for _UIHostingView<ModifiedContent<AnyView, ClarityUIInterfaceIdiomModifier>>(0, (unint64_t *)&lazy cache variable for type metadata for _UIHostingView<ModifiedContent<AnyView, ClarityUIInterfaceIdiomModifier>>, (uint64_t (*)(uint64_t, uint64_t, unint64_t))type metadata accessor for _UIHostingView);
          v10.receiver = v0;
          v10.super_class = v7;
          objc_msgSendSuper2(&v10, sel_setBackgroundColor_, v8);
        }
      }
    }
  }
}

{
  void *v0;
  void *v1;
  uint64_t v2;
  objc_class *v3;
  void *v4;
  objc_class *v5;
  id v6;
  objc_class *v7;
  id v8;
  objc_super v9;
  objc_super v10;
  objc_super v11;
  uint64_t vars8;

  uint64_t v1 = (void *)MEMORY[0x1E4FBC8C8];
  if (*((unsigned char *)v0 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v0) + 0x1C0)) == 1
    && (uint64_t v2 = *(void *)((char *)v0 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v0) + 0x1C8))) != 0)
  {
    type metadata accessor for UIHostingController<AnyView>(0, (unint64_t *)&lazy cache variable for type metadata for _UIHostingView<AnyView>, MEMORY[0x1E4F41618], MEMORY[0x1E4F41610], (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for _UIHostingView);
    v9.receiver = v0;
    v9.super_class = v3;
    objc_msgSendSuper2(&v9, sel_setBackgroundColor_, v2);
  }
  else
  {
    uint64_t v4 = (void *)MEMORY[0x18C119DF0]((char *)v0 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v0) + 0xC0));

    if (v4)
    {
      if (*(_DWORD *)((char *)v0 + *(void *)((*v1 & *v0) + 0x88)))
      {
        type metadata accessor for UIHostingController<AnyView>(0, (unint64_t *)&lazy cache variable for type metadata for _UIHostingView<AnyView>, MEMORY[0x1E4F41618], MEMORY[0x1E4F41610], (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for _UIHostingView);
        v11.receiver = v0;
        v11.super_class = v5;
        objc_msgSendSuper2(&v11, sel_setBackgroundColor_, 0);
      }
      else
      {
        id v6 = objc_msgSend(self, sel_systemBackgroundColor);
        if (*((unsigned char *)v0 + *(void *)((*v1 & *v0) + 0x78)) == 1)
        {
        }
        else
        {
          id v8 = v6;
          type metadata accessor for UIHostingController<AnyView>(0, (unint64_t *)&lazy cache variable for type metadata for _UIHostingView<AnyView>, MEMORY[0x1E4F41618], MEMORY[0x1E4F41610], (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for _UIHostingView);
          v10.receiver = v0;
          v10.super_class = v7;
          objc_msgSendSuper2(&v10, sel_setBackgroundColor_, v8);
        }
      }
    }
  }
}

{
  void *v0;
  void *v1;
  uint64_t v2;
  objc_class *v3;
  void *v4;
  objc_class *v5;
  id v6;
  objc_class *v7;
  id v8;
  objc_super v9;
  objc_super v10;
  objc_super v11;
  uint64_t vars8;

  uint64_t v1 = (void *)MEMORY[0x1E4FBC8C8];
  if (*((unsigned char *)v0 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v0) + 0x1C0)) == 1
    && (uint64_t v2 = *(void *)((char *)v0 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v0) + 0x1C8))) != 0)
  {
    type metadata accessor for UIHostingController<AnyView>(0, &lazy cache variable for type metadata for _UIHostingView<EmptyView>, MEMORY[0x1E4F417F8], MEMORY[0x1E4F417F0], (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for _UIHostingView);
    v9.receiver = v0;
    v9.super_class = v3;
    objc_msgSendSuper2(&v9, sel_setBackgroundColor_, v2);
  }
  else
  {
    uint64_t v4 = (void *)MEMORY[0x18C119DF0]((char *)v0 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v0) + 0xC0));

    if (v4)
    {
      if (*(_DWORD *)((char *)v0 + *(void *)((*v1 & *v0) + 0x88)))
      {
        type metadata accessor for UIHostingController<AnyView>(0, &lazy cache variable for type metadata for _UIHostingView<EmptyView>, MEMORY[0x1E4F417F8], MEMORY[0x1E4F417F0], (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for _UIHostingView);
        v11.receiver = v0;
        v11.super_class = v5;
        objc_msgSendSuper2(&v11, sel_setBackgroundColor_, 0);
      }
      else
      {
        id v6 = objc_msgSend(self, sel_systemBackgroundColor);
        if (*((unsigned char *)v0 + *(void *)((*v1 & *v0) + 0x78)) == 1)
        {
        }
        else
        {
          id v8 = v6;
          type metadata accessor for UIHostingController<AnyView>(0, &lazy cache variable for type metadata for _UIHostingView<EmptyView>, MEMORY[0x1E4F417F8], MEMORY[0x1E4F417F0], (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for _UIHostingView);
          v10.receiver = v0;
          v10.super_class = v7;
          objc_msgSendSuper2(&v10, sel_setBackgroundColor_, v8);
        }
      }
    }
  }
}

{
  void *v0;
  void *v1;
  uint64_t v2;
  objc_class *v3;
  void *v4;
  objc_class *v5;
  id v6;
  objc_class *v7;
  id v8;
  objc_super v9;
  objc_super v10;
  objc_super v11;
  uint64_t vars8;

  uint64_t v1 = (void *)MEMORY[0x1E4FBC8C8];
  if (*((unsigned char *)v0 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v0) + 0x1C0)) == 1
    && (uint64_t v2 = *(void *)((char *)v0 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v0) + 0x1C8))) != 0)
  {
    type metadata accessor for UIHostingController<AnyView>(0, (unint64_t *)&lazy cache variable for type metadata for _UIHostingView<BoundInputsView>, (uint64_t)&type metadata for BoundInputsView, (uint64_t)&protocol witness table for BoundInputsView, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for _UIHostingView);
    v9.receiver = v0;
    v9.super_class = v3;
    objc_msgSendSuper2(&v9, sel_setBackgroundColor_, v2);
  }
  else
  {
    uint64_t v4 = (void *)MEMORY[0x18C119DF0]((char *)v0 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v0) + 0xC0));

    if (v4)
    {
      if (*(_DWORD *)((char *)v0 + *(void *)((*v1 & *v0) + 0x88)))
      {
        type metadata accessor for UIHostingController<AnyView>(0, (unint64_t *)&lazy cache variable for type metadata for _UIHostingView<BoundInputsView>, (uint64_t)&type metadata for BoundInputsView, (uint64_t)&protocol witness table for BoundInputsView, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for _UIHostingView);
        v11.receiver = v0;
        v11.super_class = v5;
        objc_msgSendSuper2(&v11, sel_setBackgroundColor_, 0);
      }
      else
      {
        id v6 = objc_msgSend(self, sel_systemBackgroundColor);
        if (*((unsigned char *)v0 + *(void *)((*v1 & *v0) + 0x78)) == 1)
        {
        }
        else
        {
          id v8 = v6;
          type metadata accessor for UIHostingController<AnyView>(0, (unint64_t *)&lazy cache variable for type metadata for _UIHostingView<BoundInputsView>, (uint64_t)&type metadata for BoundInputsView, (uint64_t)&protocol witness table for BoundInputsView, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for _UIHostingView);
          v10.receiver = v0;
          v10.super_class = v7;
          objc_msgSendSuper2(&v10, sel_setBackgroundColor_, v8);
        }
      }
    }
  }
}

{
  specialized _UIHostingView.updateBackgroundColor()(&lazy cache variable for type metadata for _UIHostingView<BridgedNavigationView.RootView>, (uint64_t (*)(void))lazy protocol witness table accessor for type BridgedNavigationView.RootView and conformance BridgedNavigationView.RootView, (uint64_t)&type metadata for BridgedNavigationView.RootView);
}

void specialized _UIHostingView.updateBackgroundColor()(uint64_t (*a1)(void))
{
  id v3 = (void *)MEMORY[0x1E4FBC8C8];
  if (*((unsigned char *)v1 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v1) + 0x1C0)) == 1
    && (uint64_t v4 = *(void *)((char *)v1 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v1) + 0x1C8))) != 0)
  {
    v8.receiver = v1;
    v8.super_class = (Class)a1(0);
    objc_msgSendSuper2(&v8, sel_setBackgroundColor_, v4);
  }
  else
  {
    uint64_t v5 = (void *)MEMORY[0x18C119DF0]((char *)v1 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v1) + 0xC0));

    if (v5)
    {
      if (*(_DWORD *)((char *)v1 + *(void *)((*v3 & *v1) + 0x88)))
      {
        v10.receiver = v1;
        v10.super_class = (Class)a1(0);
        objc_msgSendSuper2(&v10, sel_setBackgroundColor_, 0);
      }
      else
      {
        id v6 = objc_msgSend(self, sel_systemBackgroundColor);
        if (*((unsigned char *)v1 + *(void *)((*v3 & *v1) + 0x78)) == 1)
        {
        }
        else
        {
          id v7 = v6;
          v9.receiver = v1;
          v9.super_class = (Class)a1(0);
          objc_msgSendSuper2(&v9, sel_setBackgroundColor_, v7);
        }
      }
    }
  }
}

void specialized _UIHostingView.updateBackgroundColor()(unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t (*a3)(void))
{
  id v7 = (void *)MEMORY[0x1E4FBC8C8];
  if (*((unsigned char *)v3 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v3) + 0x1C0)) == 1
    && (uint64_t v8 = *(void *)((char *)v3 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v3) + 0x1C8))) != 0)
  {
    type metadata accessor for ShareConfigurationBridge<TestIDView<<<opaque return type of View.truePreference<A>(_:)>>.0, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>>(0, a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _UIHostingView);
    v15.receiver = v3;
    v15.super_class = v9;
    objc_msgSendSuper2(&v15, sel_setBackgroundColor_, v8);
  }
  else
  {
    objc_super v10 = (void *)MEMORY[0x18C119DF0]((char *)v3 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v3) + 0xC0));

    if (v10)
    {
      if (*(_DWORD *)((char *)v3 + *(void *)((*v7 & *v3) + 0x88)))
      {
        type metadata accessor for ShareConfigurationBridge<TestIDView<<<opaque return type of View.truePreference<A>(_:)>>.0, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>>(0, a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _UIHostingView);
        v17.receiver = v3;
        v17.super_class = v11;
        objc_msgSendSuper2(&v17, sel_setBackgroundColor_, 0);
      }
      else
      {
        id v12 = objc_msgSend(self, sel_systemBackgroundColor);
        if (*((unsigned char *)v3 + *(void *)((*v7 & *v3) + 0x78)) == 1)
        {
        }
        else
        {
          id v14 = v12;
          type metadata accessor for ShareConfigurationBridge<TestIDView<<<opaque return type of View.truePreference<A>(_:)>>.0, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>>(0, a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _UIHostingView);
          v16.receiver = v3;
          v16.super_class = v13;
          objc_msgSendSuper2(&v16, sel_setBackgroundColor_, v14);
        }
      }
    }
  }
}

void specialized _UIHostingView.updateBackgroundColor()(unint64_t *a1, uint64_t (*a2)(void), uint64_t a3)
{
  id v7 = (void *)MEMORY[0x1E4FBC8C8];
  if (*((unsigned char *)v3 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v3) + 0x1C0)) == 1
    && (uint64_t v8 = *(void *)((char *)v3 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v3) + 0x1C8))) != 0)
  {
    type metadata accessor for _UIHostingView<BridgedPresentation.RootView>(0, a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _UIHostingView);
    v15.receiver = v3;
    v15.super_class = v9;
    objc_msgSendSuper2(&v15, sel_setBackgroundColor_, v8);
  }
  else
  {
    objc_super v10 = (void *)MEMORY[0x18C119DF0]((char *)v3 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v3) + 0xC0));

    if (v10)
    {
      if (*(_DWORD *)((char *)v3 + *(void *)((*v7 & *v3) + 0x88)))
      {
        type metadata accessor for _UIHostingView<BridgedPresentation.RootView>(0, a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _UIHostingView);
        v17.receiver = v3;
        v17.super_class = v11;
        objc_msgSendSuper2(&v17, sel_setBackgroundColor_, 0);
      }
      else
      {
        id v12 = objc_msgSend(self, sel_systemBackgroundColor);
        if (*((unsigned char *)v3 + *(void *)((*v7 & *v3) + 0x78)) == 1)
        {
        }
        else
        {
          id v14 = v12;
          type metadata accessor for _UIHostingView<BridgedPresentation.RootView>(0, a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _UIHostingView);
          v16.receiver = v3;
          v16.super_class = v13;
          objc_msgSendSuper2(&v16, sel_setBackgroundColor_, v14);
        }
      }
    }
  }
}

uint64_t specialized UIHostingController._commonInit()(unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t (*a3)(void), unint64_t *a4, unint64_t *a5, unint64_t *a6, uint64_t (*a7)(void), unint64_t *a8)
{
  uint64_t v13 = v8;
  uint64_t v14 = direct field offset for UIHostingController.host;
  objc_super v15 = *(void **)&v8[direct field offset for UIHostingController.host];
  objc_super v16 = (void *)MEMORY[0x1E4FBC8C8];
  swift_unknownObjectWeakAssign();
  id v17 = v15;
  uint64_t v18 = v13;
  specialized _UIHostingView.updateBackgroundColor()(a1, a2, a3);

  MEMORY[0x18C113CA0]();
  uint64_t v19 = *(void *)&v18[direct field offset for UIHostingController.dialogBridge];
  swift_unknownObjectWeakAssign();
  uint64_t v53 = a2;
  uint64_t v20 = lazy protocol witness table accessor for type _UIHostingView<TestIDView<<<opaque return type of View.truePreference<A>(_:)>>.0, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>> and conformance _UIHostingView<A>(a4, a1, a2, a3);
  *(void *)(v19 + 32) = v20;
  swift_unknownObjectWeakAssign();
  swift_retain();
  GraphHost.addPreference<A>(_:)();
  GraphHost.addPreference<A>(_:)();
  swift_release();
  swift_retain();
  GraphHost.addPreference<A>(_:)();
  swift_release();
  if (*(void *)&v18[direct field offset for UIHostingController.alwaysOnBridge])
  {
    swift_unknownObjectWeakAssign();
    swift_retain();
    swift_retain();
    GraphHost.addPreference<A>(_:)();
    swift_release();
    swift_release();
  }
  *(void *)(*(void *)&v18[direct field offset for UIHostingController.fileImportExportBridge]
            + OBJC_IVAR____TtC7SwiftUI22FileImportExportBridge_host
            + 8) = v20;
  swift_unknownObjectWeakAssign();
  swift_retain();
  GraphHost.addPreference<A>(_:)();
  GraphHost.addPreference<A>(_:)();
  swift_release();
  uint64_t ObjectType = swift_getObjectType();
  if (((*(uint64_t (**)(void))(ObjectType + 1200))() & 1) == 0)
  {
    type metadata accessor for ShareConfigurationBridge<TestIDView<<<opaque return type of View.truePreference<A>(_:)>>.0, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>>(0, a5, a2, a3, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UIKitInspectorV3Bridge);
    id v23 = objc_msgSend(objc_allocWithZone(v22), sel_init);
    swift_unknownObjectWeakAssign();
    swift_retain();
    GraphHost.addPreference<A>(_:)();
    GraphHost.addPreference<A>(_:)();
    GraphHost.addPreference<A>(_:)();
    GraphHost.addPreference<A>(_:)();
    GraphHost.addPreference<A>(_:)();
    swift_release();
    long long v24 = *(void **)&v13[v14];
    uint64_t v25 = *(void *)((*v16 & *v24) + 0x108);
    long long v26 = *(void **)((char *)v24 + v25);
    *(void *)((char *)v24 + v25) = v23;
  }
  swift_retain();
  GraphHost.addPreference<A>(_:)();
  long long v27 = (char **)&v18[direct field offset for UIHostingController.screenEdgesSystemGestureSeedTracker];
  swift_beginAccess();
  long long v28 = *v27;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *long long v27 = v28;
  uint64_t v49 = v20;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    long long v28 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v28 + 2) + 1, 1, v28);
    *long long v27 = v28;
  }
  unint64_t v31 = *((void *)v28 + 2);
  unint64_t v30 = *((void *)v28 + 3);
  if (v31 >= v30 >> 1)
  {
    long long v28 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v30 > 1), v31 + 1, 1, v28);
    *long long v27 = v28;
  }
  *((void *)v28 + 2) = v31 + 1;
  long long v32 = &v28[24 * v31];
  *((void *)v32 + 4) = &type metadata for ScreenEdgesSystemGestureKey;
  *((void *)v32 + 5) = &protocol witness table for ScreenEdgesSystemGestureKey;
  *((_DWORD *)v32 + 12) = -1;
  swift_release();
  swift_retain();
  GraphHost.addPreference<A>(_:)();
  long long v33 = (char **)&v18[direct field offset for UIHostingController.persistentSystemOverlaysSeedTracker];
  swift_beginAccess();
  long long v34 = *v33;
  char v35 = swift_isUniquelyReferenced_nonNull_native();
  *long long v33 = v34;
  if ((v35 & 1) == 0)
  {
    long long v34 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v34 + 2) + 1, 1, v34);
    *long long v33 = v34;
  }
  unint64_t v37 = *((void *)v34 + 2);
  unint64_t v36 = *((void *)v34 + 3);
  if (v37 >= v36 >> 1)
  {
    long long v34 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v36 > 1), v37 + 1, 1, v34);
    *long long v33 = v34;
  }
  *((void *)v34 + 2) = v37 + 1;
  unint64_t v38 = &v34[24 * v37];
  *((void *)v38 + 4) = &type metadata for PersistentSystemOverlaysKey;
  *((void *)v38 + 5) = &protocol witness table for PersistentSystemOverlaysKey;
  *((_DWORD *)v38 + 12) = -1;
  swift_release();
  if (one-time initialization token for isEnabled != -1) {
    swift_once();
  }
  if (static ValidTestCasesFeature.isEnabled == 1)
  {
    type metadata accessor for PPTTestBridge();
    uint64_t v39 = swift_allocObject();
    *(void *)(v39 + 24) = 0;
    swift_unknownObjectWeakInit();
    *(unsigned char *)(v39 + 32) = 0;
    *(_OWORD *)(v39 + 40) = xmmword_18834BB90;
    *(void *)(v39 + 64) = 0;
    *(void *)(v39 + 72) = 0;
    *(void *)(v39 + 56) = 0;
    *(_DWORD *)(v39 + 80) = 0;
    uint64_t v40 = direct field offset for UIHostingController.testBridge;
    *(void *)&v18[direct field offset for UIHostingController.testBridge] = v39;
    swift_release();
    uint64_t v41 = *(void *)&v18[v40];
    if (v41)
    {
      *(void *)(v41 + 24) = v49;
      swift_unknownObjectWeakAssign();
    }
  }
  uint64_t v42 = *(void *)&v18[direct field offset for UIHostingController.backgroundBridge];
  swift_unknownObjectWeakAssign();
  *(void *)(v42 + 72) = v49;
  swift_unknownObjectWeakAssign();
  unint64_t v43 = (void *)MEMORY[0x1E4FBC8C8];
  if (*(unsigned char *)(v42 + 137) != 5)
  {
    uint64_t v44 = swift_retain();
    ContainerBackgroundKind.Builtin.addPreference(to:)(v44);
    swift_release();
  }
  type metadata accessor for ShareConfigurationBridge<TestIDView<<<opaque return type of View.truePreference<A>(_:)>>.0, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>>(0, a6, v53, a3, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for SharingActivityPickerBridge);
  swift_allocObject();
  uint64_t v45 = a7();
  swift_unknownObjectWeakAssign();
  swift_retain();
  GraphHost.addPreference<A>(_:)();
  swift_release();
  *(void *)(*(void *)&v13[v14] + *(void *)((*v43 & **(void **)&v13[v14]) + 0x120)) = v45;
  swift_retain();
  swift_release();
  type metadata accessor for ShareConfigurationBridge<TestIDView<<<opaque return type of View.truePreference<A>(_:)>>.0, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>>(0, a8, v53, a3, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ShareConfigurationBridge);
  uint64_t v46 = swift_allocObject();
  swift_unknownObjectWeakInit();
  *(_DWORD *)(v46 + 24) = -1;
  swift_unknownObjectWeakAssign();
  swift_retain();
  GraphHost.addPreference<A>(_:)();
  swift_release();
  *(void *)(*(void *)&v13[v14] + *(void *)((*v43 & **(void **)&v13[v14]) + 0x128)) = v46;
  swift_retain();
  swift_release();
  swift_retain();
  GraphHost.addPreference<A>(_:)();
  swift_release();
  swift_release();
  swift_release();
  return static Update.end()();
}

uint64_t specialized UIHostingController._commonInit()(void (*a1)(void), uint64_t (*a2)(uint64_t), unint64_t *a3, uint64_t a4, uint64_t a5, unint64_t *a6, uint64_t (*a7)(void), unint64_t *a8)
{
  uint64_t v14 = v8;
  uint64_t v15 = direct field offset for UIHostingController.host;
  objc_super v16 = *(void **)&v8[direct field offset for UIHostingController.host];
  id v17 = (void *)MEMORY[0x1E4FBC8C8];
  swift_unknownObjectWeakAssign();
  id v18 = v16;
  uint64_t v19 = v14;
  a1();

  MEMORY[0x18C113CA0]();
  uint64_t v20 = *(void *)&v19[direct field offset for UIHostingController.dialogBridge];
  uint64_t v21 = swift_unknownObjectWeakAssign();
  uint64_t v22 = a2(v21);
  *(void *)(v20 + 32) = v22;
  uint64_t v23 = v22;
  swift_unknownObjectWeakAssign();
  swift_retain();
  GraphHost.addPreference<A>(_:)();
  GraphHost.addPreference<A>(_:)();
  swift_release();
  swift_retain();
  GraphHost.addPreference<A>(_:)();
  swift_release();
  if (*(void *)&v19[direct field offset for UIHostingController.alwaysOnBridge])
  {
    swift_unknownObjectWeakAssign();
    swift_retain();
    swift_retain();
    GraphHost.addPreference<A>(_:)();
    swift_release();
    swift_release();
  }
  uint64_t v51 = v23;
  *(void *)(*(void *)&v19[direct field offset for UIHostingController.fileImportExportBridge]
            + OBJC_IVAR____TtC7SwiftUI22FileImportExportBridge_host
            + 8) = v23;
  swift_unknownObjectWeakAssign();
  swift_retain();
  GraphHost.addPreference<A>(_:)();
  GraphHost.addPreference<A>(_:)();
  swift_release();
  uint64_t ObjectType = swift_getObjectType();
  if (((*(uint64_t (**)(void))(ObjectType + 1200))() & 1) == 0)
  {
    type metadata accessor for UIHostingController<AnyView>(0, a3, a4, a5, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for UIKitInspectorV3Bridge);
    id v26 = objc_msgSend(objc_allocWithZone(v25), sel_init);
    swift_unknownObjectWeakAssign();
    swift_retain();
    GraphHost.addPreference<A>(_:)();
    GraphHost.addPreference<A>(_:)();
    GraphHost.addPreference<A>(_:)();
    GraphHost.addPreference<A>(_:)();
    GraphHost.addPreference<A>(_:)();
    swift_release();
    long long v27 = *(void **)&v14[v15];
    uint64_t v28 = *(void *)((*v17 & *v27) + 0x108);
    int v29 = *(void **)((char *)v27 + v28);
    *(void *)((char *)v27 + v28) = v26;
  }
  swift_retain();
  GraphHost.addPreference<A>(_:)();
  unint64_t v30 = (char **)&v19[direct field offset for UIHostingController.screenEdgesSystemGestureSeedTracker];
  swift_beginAccess();
  unint64_t v31 = *v30;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *unint64_t v30 = v31;
  uint64_t v54 = a4;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    unint64_t v31 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v31 + 2) + 1, 1, v31);
    *unint64_t v30 = v31;
  }
  unint64_t v34 = *((void *)v31 + 2);
  unint64_t v33 = *((void *)v31 + 3);
  if (v34 >= v33 >> 1)
  {
    unint64_t v31 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v33 > 1), v34 + 1, 1, v31);
    *unint64_t v30 = v31;
  }
  *((void *)v31 + 2) = v34 + 1;
  char v35 = &v31[24 * v34];
  *((void *)v35 + 4) = &type metadata for ScreenEdgesSystemGestureKey;
  *((void *)v35 + 5) = &protocol witness table for ScreenEdgesSystemGestureKey;
  *((_DWORD *)v35 + 12) = -1;
  swift_release();
  swift_retain();
  GraphHost.addPreference<A>(_:)();
  unint64_t v36 = (char **)&v19[direct field offset for UIHostingController.persistentSystemOverlaysSeedTracker];
  swift_beginAccess();
  unint64_t v37 = *v36;
  char v38 = swift_isUniquelyReferenced_nonNull_native();
  int *v36 = v37;
  if ((v38 & 1) == 0)
  {
    unint64_t v37 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v37 + 2) + 1, 1, v37);
    int *v36 = v37;
  }
  unint64_t v40 = *((void *)v37 + 2);
  unint64_t v39 = *((void *)v37 + 3);
  if (v40 >= v39 >> 1)
  {
    unint64_t v37 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v39 > 1), v40 + 1, 1, v37);
    int *v36 = v37;
  }
  *((void *)v37 + 2) = v40 + 1;
  uint64_t v41 = &v37[24 * v40];
  *((void *)v41 + 4) = &type metadata for PersistentSystemOverlaysKey;
  *((void *)v41 + 5) = &protocol witness table for PersistentSystemOverlaysKey;
  *((_DWORD *)v41 + 12) = -1;
  swift_release();
  if (one-time initialization token for isEnabled != -1) {
    swift_once();
  }
  if (static ValidTestCasesFeature.isEnabled == 1)
  {
    type metadata accessor for PPTTestBridge();
    uint64_t v42 = swift_allocObject();
    *(void *)(v42 + 24) = 0;
    swift_unknownObjectWeakInit();
    *(unsigned char *)(v42 + 32) = 0;
    *(_OWORD *)(v42 + 40) = xmmword_18834BB90;
    *(void *)(v42 + 64) = 0;
    *(void *)(v42 + 72) = 0;
    *(void *)(v42 + 56) = 0;
    *(_DWORD *)(v42 + 80) = 0;
    uint64_t v43 = direct field offset for UIHostingController.testBridge;
    *(void *)&v19[direct field offset for UIHostingController.testBridge] = v42;
    swift_release();
    uint64_t v44 = *(void *)&v19[v43];
    if (v44)
    {
      *(void *)(v44 + 24) = v51;
      swift_unknownObjectWeakAssign();
    }
  }
  uint64_t v45 = *(void *)&v19[direct field offset for UIHostingController.backgroundBridge];
  swift_unknownObjectWeakAssign();
  *(void *)(v45 + 72) = v51;
  swift_unknownObjectWeakAssign();
  uint64_t v46 = (void *)MEMORY[0x1E4FBC8C8];
  if (*(unsigned char *)(v45 + 137) != 5)
  {
    uint64_t v47 = swift_retain();
    ContainerBackgroundKind.Builtin.addPreference(to:)(v47);
    swift_release();
  }
  type metadata accessor for UIHostingController<AnyView>(0, a6, v54, a5, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for SharingActivityPickerBridge);
  swift_allocObject();
  uint64_t v48 = a7();
  swift_unknownObjectWeakAssign();
  swift_retain();
  GraphHost.addPreference<A>(_:)();
  swift_release();
  *(void *)(*(void *)&v14[v15] + *(void *)((*v46 & **(void **)&v14[v15]) + 0x120)) = v48;
  swift_retain();
  swift_release();
  type metadata accessor for UIHostingController<AnyView>(0, a8, v54, a5, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for ShareConfigurationBridge);
  uint64_t v49 = swift_allocObject();
  swift_unknownObjectWeakInit();
  *(_DWORD *)(v49 + 24) = -1;
  swift_unknownObjectWeakAssign();
  swift_retain();
  GraphHost.addPreference<A>(_:)();
  swift_release();
  *(void *)(*(void *)&v14[v15] + *(void *)((*v46 & **(void **)&v14[v15]) + 0x128)) = v49;
  swift_retain();
  swift_release();
  swift_retain();
  GraphHost.addPreference<A>(_:)();
  swift_release();
  swift_release();
  swift_release();
  return static Update.end()();
}

uint64_t specialized UIHostingController._commonInit()(unint64_t *a1, uint64_t (*a2)(void), uint64_t a3, uint64_t (*a4)(uint64_t), unint64_t *a5, unint64_t *a6, uint64_t (*a7)(void), unint64_t *a8)
{
  uint64_t v14 = v8;
  uint64_t v15 = direct field offset for UIHostingController.host;
  objc_super v16 = *(void **)&v8[direct field offset for UIHostingController.host];
  id v17 = (void *)MEMORY[0x1E4FBC8C8];
  swift_unknownObjectWeakAssign();
  id v18 = v16;
  uint64_t v19 = v14;
  specialized _UIHostingView.updateBackgroundColor()(a1, a2, a3);

  MEMORY[0x18C113CA0]();
  uint64_t v20 = *(void *)&v19[direct field offset for UIHostingController.dialogBridge];
  uint64_t v21 = swift_unknownObjectWeakAssign();
  uint64_t v22 = a4(v21);
  *(void *)(v20 + 32) = v22;
  uint64_t v23 = v22;
  swift_unknownObjectWeakAssign();
  swift_retain();
  GraphHost.addPreference<A>(_:)();
  GraphHost.addPreference<A>(_:)();
  swift_release();
  swift_retain();
  GraphHost.addPreference<A>(_:)();
  swift_release();
  if (*(void *)&v19[direct field offset for UIHostingController.alwaysOnBridge])
  {
    swift_unknownObjectWeakAssign();
    swift_retain();
    swift_retain();
    GraphHost.addPreference<A>(_:)();
    swift_release();
    swift_release();
  }
  uint64_t v51 = v23;
  *(void *)(*(void *)&v19[direct field offset for UIHostingController.fileImportExportBridge]
            + OBJC_IVAR____TtC7SwiftUI22FileImportExportBridge_host
            + 8) = v23;
  swift_unknownObjectWeakAssign();
  swift_retain();
  GraphHost.addPreference<A>(_:)();
  GraphHost.addPreference<A>(_:)();
  swift_release();
  uint64_t ObjectType = swift_getObjectType();
  if (((*(uint64_t (**)(void))(ObjectType + 1200))() & 1) == 0)
  {
    type metadata accessor for _UIHostingView<BridgedPresentation.RootView>(0, a5, a2, a3, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UIKitInspectorV3Bridge);
    id v26 = objc_msgSend(objc_allocWithZone(v25), sel_init);
    swift_unknownObjectWeakAssign();
    swift_retain();
    GraphHost.addPreference<A>(_:)();
    GraphHost.addPreference<A>(_:)();
    GraphHost.addPreference<A>(_:)();
    GraphHost.addPreference<A>(_:)();
    GraphHost.addPreference<A>(_:)();
    swift_release();
    long long v27 = *(void **)&v14[v15];
    uint64_t v28 = *(void *)((*v17 & *v27) + 0x108);
    int v29 = *(void **)((char *)v27 + v28);
    *(void *)((char *)v27 + v28) = v26;
  }
  swift_retain();
  GraphHost.addPreference<A>(_:)();
  unint64_t v30 = (char **)&v19[direct field offset for UIHostingController.screenEdgesSystemGestureSeedTracker];
  swift_beginAccess();
  unint64_t v31 = *v30;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *unint64_t v30 = v31;
  uint64_t v54 = a2;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    unint64_t v31 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v31 + 2) + 1, 1, v31);
    *unint64_t v30 = v31;
  }
  unint64_t v34 = *((void *)v31 + 2);
  unint64_t v33 = *((void *)v31 + 3);
  if (v34 >= v33 >> 1)
  {
    unint64_t v31 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v33 > 1), v34 + 1, 1, v31);
    *unint64_t v30 = v31;
  }
  *((void *)v31 + 2) = v34 + 1;
  char v35 = &v31[24 * v34];
  *((void *)v35 + 4) = &type metadata for ScreenEdgesSystemGestureKey;
  *((void *)v35 + 5) = &protocol witness table for ScreenEdgesSystemGestureKey;
  *((_DWORD *)v35 + 12) = -1;
  swift_release();
  swift_retain();
  GraphHost.addPreference<A>(_:)();
  unint64_t v36 = (char **)&v19[direct field offset for UIHostingController.persistentSystemOverlaysSeedTracker];
  swift_beginAccess();
  unint64_t v37 = *v36;
  char v38 = swift_isUniquelyReferenced_nonNull_native();
  int *v36 = v37;
  if ((v38 & 1) == 0)
  {
    unint64_t v37 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v37 + 2) + 1, 1, v37);
    int *v36 = v37;
  }
  unint64_t v40 = *((void *)v37 + 2);
  unint64_t v39 = *((void *)v37 + 3);
  if (v40 >= v39 >> 1)
  {
    unint64_t v37 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v39 > 1), v40 + 1, 1, v37);
    int *v36 = v37;
  }
  *((void *)v37 + 2) = v40 + 1;
  uint64_t v41 = &v37[24 * v40];
  *((void *)v41 + 4) = &type metadata for PersistentSystemOverlaysKey;
  *((void *)v41 + 5) = &protocol witness table for PersistentSystemOverlaysKey;
  *((_DWORD *)v41 + 12) = -1;
  swift_release();
  if (one-time initialization token for isEnabled != -1) {
    swift_once();
  }
  if (static ValidTestCasesFeature.isEnabled == 1)
  {
    type metadata accessor for PPTTestBridge();
    uint64_t v42 = swift_allocObject();
    *(void *)(v42 + 24) = 0;
    swift_unknownObjectWeakInit();
    *(unsigned char *)(v42 + 32) = 0;
    *(_OWORD *)(v42 + 40) = xmmword_18834BB90;
    *(void *)(v42 + 64) = 0;
    *(void *)(v42 + 72) = 0;
    *(void *)(v42 + 56) = 0;
    *(_DWORD *)(v42 + 80) = 0;
    uint64_t v43 = direct field offset for UIHostingController.testBridge;
    *(void *)&v19[direct field offset for UIHostingController.testBridge] = v42;
    swift_release();
    uint64_t v44 = *(void *)&v19[v43];
    if (v44)
    {
      *(void *)(v44 + 24) = v51;
      swift_unknownObjectWeakAssign();
    }
  }
  uint64_t v45 = *(void *)&v19[direct field offset for UIHostingController.backgroundBridge];
  swift_unknownObjectWeakAssign();
  *(void *)(v45 + 72) = v51;
  swift_unknownObjectWeakAssign();
  uint64_t v46 = (void *)MEMORY[0x1E4FBC8C8];
  if (*(unsigned char *)(v45 + 137) != 5)
  {
    uint64_t v47 = swift_retain();
    ContainerBackgroundKind.Builtin.addPreference(to:)(v47);
    swift_release();
  }
  type metadata accessor for _UIHostingView<BridgedPresentation.RootView>(0, a6, v54, a3, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for SharingActivityPickerBridge);
  swift_allocObject();
  uint64_t v48 = a7();
  swift_unknownObjectWeakAssign();
  swift_retain();
  GraphHost.addPreference<A>(_:)();
  swift_release();
  *(void *)(*(void *)&v14[v15] + *(void *)((*v46 & **(void **)&v14[v15]) + 0x120)) = v48;
  swift_retain();
  swift_release();
  type metadata accessor for _UIHostingView<BridgedPresentation.RootView>(0, a8, v54, a3, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ShareConfigurationBridge);
  uint64_t v49 = swift_allocObject();
  swift_unknownObjectWeakInit();
  *(_DWORD *)(v49 + 24) = -1;
  swift_unknownObjectWeakAssign();
  swift_retain();
  GraphHost.addPreference<A>(_:)();
  swift_release();
  *(void *)(*(void *)&v14[v15] + *(void *)((*v46 & **(void **)&v14[v15]) + 0x128)) = v49;
  swift_retain();
  swift_release();
  swift_retain();
  GraphHost.addPreference<A>(_:)();
  swift_release();
  swift_release();
  swift_release();
  return static Update.end()();
}

id _makeUIHostingController(_:)()
{
  type metadata accessor for UIHostingController<AnyView>(0, (unint64_t *)&lazy cache variable for type metadata for UIHostingController<AnyView>, MEMORY[0x1E4F41618], MEMORY[0x1E4F41610], (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for UIHostingController);
  id v1 = objc_allocWithZone(v0);
  swift_retain();
  id v2 = specialized UIHostingController.init(rootView:)();
  swift_release();
  return v2;
}

void *_makeUIHostingController(_:tracksContentSize:secure:)(uint64_t a1, char a2, char a3)
{
  uint64_t v4 = (void *)MEMORY[0x1E4FBC8C8];
  if (a3)
  {
    type metadata accessor for UIHostingController<AnyView>(0, &lazy cache variable for type metadata for _UISecureHostingController<AnyView>, MEMORY[0x1E4F41618], MEMORY[0x1E4F41610], (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for _UISecureHostingController);
    id v6 = objc_allocWithZone(v5);
    swift_retain();
    id v7 = specialized UIHostingController.init(rootView:)();
    swift_release();
    lazy protocol witness table accessor for type SecureDrawingViewGraphFeature and conformance SecureDrawingViewGraphFeature();
    swift_retain();
    ViewGraph.append<A>(feature:)();
  }
  else
  {
    type metadata accessor for UIHostingController<AnyView>(0, (unint64_t *)&lazy cache variable for type metadata for UIHostingController<AnyView>, MEMORY[0x1E4F41618], MEMORY[0x1E4F41610], (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for UIHostingController);
    id v9 = objc_allocWithZone(v8);
    swift_retain();
    id v7 = specialized UIHostingController.init(rootView:)();
  }
  swift_release();
  if (a2)
  {
    objc_super v10 = (void *)((char *)v7 + direct field offset for UIHostingController.sizingOptions);
    swift_beginAccess();
    uint64_t v11 = *v10;
    *objc_super v10 = 1;
    uint64_t v13 = v11;
    (*(void (**)(uint64_t *))((*v4 & *v7) + 0x3B0))(&v13);
  }
  return v7;
}

void @objc _UISecureHostingController.init(coder:)()
{
}

uint64_t sub_18828E5A8(uint64_t a1)
{
  id v3 = v1;
  return a1;
}

void _UISecureHostingController.__allocating_init(coder:rootView:)()
{
}

void _UISecureHostingController.__allocating_init(hostingView:)()
{
}

id _UISecureHostingController.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for _UISecureHostingController();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

void _makeWatchKitUIHostingController(_:)()
{
}

id specialized UIHostingController.init(rootView:)(uint64_t a1, char a2)
{
  *(void *)&v2[direct field offset for UIHostingController.allowedBehaviors] = 0;
  *(void *)&v2[direct field offset for UIHostingController.requiredBridges] = 0;
  uint64_t v4 = (uint64_t)&v2[direct field offset for UIHostingController.overrides];
  long long v23 = xmmword_18834C6B0;
  uint64_t v24 = 0;
  char v25 = 0;
  swift_unknownObjectWeakInit();
  swift_unknownObjectWeakInit();
  char v26 = 2;
  outlined init with take of HostingControllerOverrides((uint64_t)&v23, v4);
  *(void *)&v2[direct field offset for UIHostingController.customTabItem] = 0;
  *(void *)&v2[direct field offset for UIHostingController.toolbarBridge] = 0;
  *(void *)&v2[direct field offset for UIHostingController.inspectorBridgeV5] = 0;
  *(void *)&v2[direct field offset for UIHostingController.barAppearanceBridge] = 0;
  uint64_t v5 = direct field offset for UIHostingController.dialogBridge;
  type metadata accessor for UIKitDialogBridge();
  uint64_t v6 = swift_allocObject();
  id v7 = v2;
  uint64_t v8 = specialized UIKitDialogBridge.init()(v6);
  swift_release();
  *(void *)&v2[v5] = v8;
  *(void *)&v7[direct field offset for UIHostingController.testBridge] = 0;
  *(void *)&v7[direct field offset for UIHostingController.contentScrollViewBridge] = 0;
  uint64_t v9 = direct field offset for UIHostingController.modernNavigationBridge;
  type metadata accessor for ModernNavigationBridge();
  uint64_t v10 = swift_allocObject();
  *(_DWORD *)(v10 + 16) = -1;
  *(void *)&v7[v9] = v10;
  *(void *)&v7[direct field offset for UIHostingController.alwaysOnBridge] = 0;
  uint64_t v11 = direct field offset for UIHostingController.fileImportExportBridge;
  *(void *)&v7[v11] = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for FileImportExportBridge(0)), sel_init);
  *(_WORD *)&v7[direct field offset for UIHostingController.deferredEdges] = 256;
  uint64_t v12 = MEMORY[0x1E4FBC860];
  *(void *)&v7[direct field offset for UIHostingController.screenEdgesSystemGestureSeedTracker] = MEMORY[0x1E4FBC860];
  uint64_t v13 = &v7[direct field offset for UIHostingController.persistentSystemOverlays];
  *(_WORD *)uint64_t v13 = 512;
  v13[2] = 3;
  *(void *)&v7[direct field offset for UIHostingController.persistentSystemOverlaysSeedTracker] = v12;
  v7[direct field offset for UIHostingController.shouldDeferScreenEdgesSystemGestureToChildViewController] = 0;
  v7[direct field offset for UIHostingController.shouldDeferPersistentSystemOverlaysToChildViewController] = 0;
  uint64_t v14 = direct field offset for UIHostingController.backgroundBridge;
  type metadata accessor for ContainerBackgroundBridge();
  swift_allocObject();
  *(void *)&v7[v14] = ContainerBackgroundBridge.init(vendsBackgroundAsHostingView:)(0);
  *(void *)&v7[direct field offset for UIHostingController.navigationBridge] = 0;
  *(void *)&v7[direct field offset for UIHostingController.keyboardShortcutBridge] = 0;
  *(void *)&v7[direct field offset for UIHostingController.sizingOptions] = 0;
  type metadata accessor for _UIHostingView<BridgedPresentation.RootView>(0, &lazy cache variable for type metadata for _UIHostingView<BridgedPresentation.RootView>, (uint64_t (*)(void))lazy protocol witness table accessor for type BridgedPresentation.RootView and conformance BridgedPresentation.RootView, (uint64_t)&type metadata for BridgedPresentation.RootView, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _UIHostingView);
  id v16 = objc_allocWithZone(v15);
  uint64_t v17 = swift_retain();
  uint64_t v18 = specialized _UIHostingView.init(rootView:)(v17, a2);
  swift_release();
  *(void *)&v7[direct field offset for UIHostingController.host] = v18;

  type metadata accessor for _UIHostingView<BridgedPresentation.RootView>(0, &lazy cache variable for type metadata for UIHostingController<BridgedPresentation.RootView>, (uint64_t (*)(void))lazy protocol witness table accessor for type BridgedPresentation.RootView and conformance BridgedPresentation.RootView, (uint64_t)&type metadata for BridgedPresentation.RootView, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UIHostingController);
  v22.receiver = v7;
  v22.super_class = v19;
  id v20 = objc_msgSendSuper2(&v22, sel_initWithNibName_bundle_, 0, 0);
  specialized UIHostingController._commonInit()(&lazy cache variable for type metadata for _UIHostingView<BridgedPresentation.RootView>, (uint64_t (*)(void))lazy protocol witness table accessor for type BridgedPresentation.RootView and conformance BridgedPresentation.RootView, (uint64_t)&type metadata for BridgedPresentation.RootView, (uint64_t (*)(uint64_t))lazy protocol witness table accessor for type _UIHostingView<BridgedPresentation.RootView> and conformance _UIHostingView<A>, &lazy cache variable for type metadata for UIKitInspectorV3Bridge<BridgedPresentation.RootView>, &lazy cache variable for type metadata for SharingActivityPickerBridge<BridgedPresentation.RootView>, specialized SharingActivityPickerBridge.init(), &lazy cache variable for type metadata for ShareConfigurationBridge<BridgedPresentation.RootView>);

  return v20;
}

uint64_t dispatch thunk of _UIHostingViewable.rootView.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of _UIHostingViewable.rootView.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 16))();
}

uint64_t dispatch thunk of _UIHostingViewable.rootView.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t dispatch thunk of _UIHostingViewable._render(seconds:)(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of _UIHostingViewable._forEachIdentifiedView(body:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 40))();
}

uint64_t dispatch thunk of _UIHostingViewable.sizeThatFits(in:)(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 48))();
}

uint64_t dispatch thunk of _UIHostingViewable._disableSafeArea.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 56))();
}

uint64_t dispatch thunk of _UIHostingViewable._disableSafeArea.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 64))();
}

uint64_t dispatch thunk of _UIHostingViewable._disableSafeArea.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 72))();
}

uint64_t dispatch thunk of _UIHostingViewable._rendererConfiguration.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 80))();
}

uint64_t dispatch thunk of _UIHostingViewable._rendererConfiguration.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 88))();
}

uint64_t dispatch thunk of _UIHostingViewable._rendererConfiguration.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 96))();
}

uint64_t dispatch thunk of _UIHostingViewable._rendererObject.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 104))();
}

id specialized _UISecureHostingController.init(rootView:)(objc_class *a1)
{
  id v1 = specialized UIHostingController.init(rootView:)(a1);
  specialized UIHostingController.host.getter();
  specialized _UIHostingView.viewGraph.getter();
  lazy protocol witness table accessor for type SecureDrawingViewGraphFeature and conformance SecureDrawingViewGraphFeature();
  swift_retain();
  ViewGraph.append<A>(feature:)();
  swift_release();
  return v1;
}

id specialized _UISecureHostingController.__allocating_init(rootView:)(objc_class *a1)
{
  id v2 = objc_allocWithZone((Class)type metadata accessor for _UISecureHostingController());
  return specialized _UISecureHostingController.init(rootView:)(a1);
}

void specialized _UISecureHostingController.init(coder:)()
{
}

void type metadata accessor for UIHostingController<ModifiedContent<AnyView, DocumentBaseModifier>>()
{
  if (!lazy cache variable for type metadata for UIHostingController<ModifiedContent<AnyView, DocumentBaseModifier>>)
  {
    type metadata accessor for UIHostingController<AnyView>(255, &lazy cache variable for type metadata for ModifiedContent<AnyView, DocumentBaseModifier>, MEMORY[0x1E4F41618], (uint64_t)&type metadata for DocumentBaseModifier, MEMORY[0x1E4F3FBA0]);
    lazy protocol witness table accessor for type ModifiedContent<AnyView, DocumentBaseModifier> and conformance <> ModifiedContent<A, B>((unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<AnyView, DocumentBaseModifier> and conformance <> ModifiedContent<A, B>, &lazy cache variable for type metadata for ModifiedContent<AnyView, DocumentBaseModifier>, (uint64_t)&type metadata for DocumentBaseModifier, (void (*)(void))lazy protocol witness table accessor for type DocumentBaseModifier and conformance DocumentBaseModifier);
    unint64_t v0 = type metadata accessor for UIHostingController();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for UIHostingController<ModifiedContent<AnyView, DocumentBaseModifier>>);
    }
  }
}

void type metadata accessor for UIKitInspectorV3Bridge<ModifiedContent<AnyView, DocumentBaseModifier>>()
{
  if (!lazy cache variable for type metadata for UIKitInspectorV3Bridge<ModifiedContent<AnyView, DocumentBaseModifier>>)
  {
    type metadata accessor for UIHostingController<AnyView>(255, &lazy cache variable for type metadata for ModifiedContent<AnyView, DocumentBaseModifier>, MEMORY[0x1E4F41618], (uint64_t)&type metadata for DocumentBaseModifier, MEMORY[0x1E4F3FBA0]);
    lazy protocol witness table accessor for type ModifiedContent<AnyView, DocumentBaseModifier> and conformance <> ModifiedContent<A, B>((unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<AnyView, DocumentBaseModifier> and conformance <> ModifiedContent<A, B>, &lazy cache variable for type metadata for ModifiedContent<AnyView, DocumentBaseModifier>, (uint64_t)&type metadata for DocumentBaseModifier, (void (*)(void))lazy protocol witness table accessor for type DocumentBaseModifier and conformance DocumentBaseModifier);
    unint64_t v0 = type metadata accessor for UIKitInspectorV3Bridge();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for UIKitInspectorV3Bridge<ModifiedContent<AnyView, DocumentBaseModifier>>);
    }
  }
}

void type metadata accessor for SharingActivityPickerBridge<ModifiedContent<AnyView, DocumentBaseModifier>>()
{
  if (!lazy cache variable for type metadata for SharingActivityPickerBridge<ModifiedContent<AnyView, DocumentBaseModifier>>)
  {
    type metadata accessor for UIHostingController<AnyView>(255, &lazy cache variable for type metadata for ModifiedContent<AnyView, DocumentBaseModifier>, MEMORY[0x1E4F41618], (uint64_t)&type metadata for DocumentBaseModifier, MEMORY[0x1E4F3FBA0]);
    lazy protocol witness table accessor for type ModifiedContent<AnyView, DocumentBaseModifier> and conformance <> ModifiedContent<A, B>((unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<AnyView, DocumentBaseModifier> and conformance <> ModifiedContent<A, B>, &lazy cache variable for type metadata for ModifiedContent<AnyView, DocumentBaseModifier>, (uint64_t)&type metadata for DocumentBaseModifier, (void (*)(void))lazy protocol witness table accessor for type DocumentBaseModifier and conformance DocumentBaseModifier);
    unint64_t v0 = type metadata accessor for SharingActivityPickerBridge();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for SharingActivityPickerBridge<ModifiedContent<AnyView, DocumentBaseModifier>>);
    }
  }
}

void type metadata accessor for ShareConfigurationBridge<ModifiedContent<AnyView, DocumentBaseModifier>>()
{
  if (!lazy cache variable for type metadata for ShareConfigurationBridge<ModifiedContent<AnyView, DocumentBaseModifier>>)
  {
    type metadata accessor for UIHostingController<AnyView>(255, &lazy cache variable for type metadata for ModifiedContent<AnyView, DocumentBaseModifier>, MEMORY[0x1E4F41618], (uint64_t)&type metadata for DocumentBaseModifier, MEMORY[0x1E4F3FBA0]);
    lazy protocol witness table accessor for type ModifiedContent<AnyView, DocumentBaseModifier> and conformance <> ModifiedContent<A, B>((unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<AnyView, DocumentBaseModifier> and conformance <> ModifiedContent<A, B>, &lazy cache variable for type metadata for ModifiedContent<AnyView, DocumentBaseModifier>, (uint64_t)&type metadata for DocumentBaseModifier, (void (*)(void))lazy protocol witness table accessor for type DocumentBaseModifier and conformance DocumentBaseModifier);
    unint64_t v0 = type metadata accessor for ShareConfigurationBridge();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ShareConfigurationBridge<ModifiedContent<AnyView, DocumentBaseModifier>>);
    }
  }
}

uint64_t lazy protocol witness table accessor for type _UIHostingView<TestIDView<<<opaque return type of View.truePreference<A>(_:)>>.0, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>> and conformance _UIHostingView<A>(unint64_t *a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for ShareConfigurationBridge<TestIDView<<<opaque return type of View.truePreference<A>(_:)>>.0, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>>(255, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _UIHostingView);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t outlined release of BoundInputsView(uint64_t a1)
{
  id v2 = *(void **)(a1 + 32);
  swift_bridgeObjectRelease();
  swift_release();

  swift_release();
  return a1;
}

void type metadata accessor for UIHostingController<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>>()
{
  if (!lazy cache variable for type metadata for UIHostingController<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>>)
  {
    type metadata accessor for TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>(255, (unint64_t *)&lazy cache variable for type metadata for TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>, (unint64_t *)&lazy cache variable for type metadata for <<opaque return type of static _TestApp.rootViewIdentifier>>.0);
    lazy protocol witness table accessor for type TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0> and conformance TestIDView<A, B>(&lazy protocol witness table cache variable for type TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0> and conformance TestIDView<A, B>, (unint64_t *)&lazy cache variable for type metadata for TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>, (unint64_t *)&lazy cache variable for type metadata for <<opaque return type of static _TestApp.rootViewIdentifier>>.0);
    unint64_t v0 = type metadata accessor for UIHostingController();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for UIHostingController<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>>);
    }
  }
}

void type metadata accessor for UIKitInspectorV3Bridge<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>>()
{
  if (!lazy cache variable for type metadata for UIKitInspectorV3Bridge<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>>)
  {
    type metadata accessor for TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>(255, (unint64_t *)&lazy cache variable for type metadata for TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>, (unint64_t *)&lazy cache variable for type metadata for <<opaque return type of static _TestApp.rootViewIdentifier>>.0);
    lazy protocol witness table accessor for type TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0> and conformance TestIDView<A, B>(&lazy protocol witness table cache variable for type TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0> and conformance TestIDView<A, B>, (unint64_t *)&lazy cache variable for type metadata for TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>, (unint64_t *)&lazy cache variable for type metadata for <<opaque return type of static _TestApp.rootViewIdentifier>>.0);
    unint64_t v0 = type metadata accessor for UIKitInspectorV3Bridge();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for UIKitInspectorV3Bridge<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>>);
    }
  }
}

void type metadata accessor for SharingActivityPickerBridge<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>>()
{
  if (!lazy cache variable for type metadata for SharingActivityPickerBridge<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>>)
  {
    type metadata accessor for TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>(255, (unint64_t *)&lazy cache variable for type metadata for TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>, (unint64_t *)&lazy cache variable for type metadata for <<opaque return type of static _TestApp.rootViewIdentifier>>.0);
    lazy protocol witness table accessor for type TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0> and conformance TestIDView<A, B>(&lazy protocol witness table cache variable for type TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0> and conformance TestIDView<A, B>, (unint64_t *)&lazy cache variable for type metadata for TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>, (unint64_t *)&lazy cache variable for type metadata for <<opaque return type of static _TestApp.rootViewIdentifier>>.0);
    unint64_t v0 = type metadata accessor for SharingActivityPickerBridge();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for SharingActivityPickerBridge<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>>);
    }
  }
}

void type metadata accessor for ShareConfigurationBridge<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>>()
{
  if (!lazy cache variable for type metadata for ShareConfigurationBridge<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>>)
  {
    type metadata accessor for TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>(255, (unint64_t *)&lazy cache variable for type metadata for TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>, (unint64_t *)&lazy cache variable for type metadata for <<opaque return type of static _TestApp.rootViewIdentifier>>.0);
    lazy protocol witness table accessor for type TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0> and conformance TestIDView<A, B>(&lazy protocol witness table cache variable for type TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0> and conformance TestIDView<A, B>, (unint64_t *)&lazy cache variable for type metadata for TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>, (unint64_t *)&lazy cache variable for type metadata for <<opaque return type of static _TestApp.rootViewIdentifier>>.0);
    unint64_t v0 = type metadata accessor for ShareConfigurationBridge();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ShareConfigurationBridge<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>>);
    }
  }
}

void type metadata accessor for UIHostingController<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>>()
{
  if (!lazy cache variable for type metadata for UIHostingController<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>>)
  {
    type metadata accessor for TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>(255, &lazy cache variable for type metadata for TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>, &lazy cache variable for type metadata for <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0);
    lazy protocol witness table accessor for type TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0> and conformance TestIDView<A, B>(&lazy protocol witness table cache variable for type TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0> and conformance TestIDView<A, B>, &lazy cache variable for type metadata for TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>, &lazy cache variable for type metadata for <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0);
    unint64_t v0 = type metadata accessor for UIHostingController();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for UIHostingController<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>>);
    }
  }
}

void type metadata accessor for UIKitInspectorV3Bridge<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>>()
{
  if (!lazy cache variable for type metadata for UIKitInspectorV3Bridge<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>>)
  {
    type metadata accessor for TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>(255, &lazy cache variable for type metadata for TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>, &lazy cache variable for type metadata for <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0);
    lazy protocol witness table accessor for type TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0> and conformance TestIDView<A, B>(&lazy protocol witness table cache variable for type TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0> and conformance TestIDView<A, B>, &lazy cache variable for type metadata for TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>, &lazy cache variable for type metadata for <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0);
    unint64_t v0 = type metadata accessor for UIKitInspectorV3Bridge();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for UIKitInspectorV3Bridge<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>>);
    }
  }
}

void type metadata accessor for SharingActivityPickerBridge<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>>()
{
  if (!lazy cache variable for type metadata for SharingActivityPickerBridge<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>>)
  {
    type metadata accessor for TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>(255, &lazy cache variable for type metadata for TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>, &lazy cache variable for type metadata for <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0);
    lazy protocol witness table accessor for type TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0> and conformance TestIDView<A, B>(&lazy protocol witness table cache variable for type TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0> and conformance TestIDView<A, B>, &lazy cache variable for type metadata for TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>, &lazy cache variable for type metadata for <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0);
    unint64_t v0 = type metadata accessor for SharingActivityPickerBridge();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for SharingActivityPickerBridge<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>>);
    }
  }
}

void type metadata accessor for ShareConfigurationBridge<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>>()
{
  if (!lazy cache variable for type metadata for ShareConfigurationBridge<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>>)
  {
    type metadata accessor for TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>(255, &lazy cache variable for type metadata for TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>, &lazy cache variable for type metadata for <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0);
    lazy protocol witness table accessor for type TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0> and conformance TestIDView<A, B>(&lazy protocol witness table cache variable for type TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0> and conformance TestIDView<A, B>, &lazy cache variable for type metadata for TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>, &lazy cache variable for type metadata for <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0);
    unint64_t v0 = type metadata accessor for ShareConfigurationBridge();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ShareConfigurationBridge<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>>);
    }
  }
}

uint64_t outlined init with copy of ModifiedContent<ModifiedContent<AnyView, DocumentSceneRootBoxModifier>, DocumentBaseModifier>(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t outlined destroy of ModifiedContent<ModifiedContent<AnyView, DocumentSceneRootBoxModifier>, DocumentBaseModifier>(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

void type metadata accessor for ShareConfigurationBridge<TestIDView<<<opaque return type of View.truePreference<A>(_:)>>.0, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(void), uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v9 = a3(255);
    uint64_t v10 = a4();
    unint64_t v11 = a5(a1, v9, v10);
    if (!v12) {
      atomic_store(v11, a2);
    }
  }
}

void type metadata accessor for _UIHostingView<ModifiedContent<AnyView, ClarityUIInterfaceIdiomModifier>>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, unint64_t))
{
  if (!*a2)
  {
    type metadata accessor for UIHostingController<AnyView>(255, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<AnyView, ClarityUIInterfaceIdiomModifier>, MEMORY[0x1E4F41618], (uint64_t)&type metadata for ClarityUIInterfaceIdiomModifier, MEMORY[0x1E4F3FBA0]);
    uint64_t v7 = v6;
    unint64_t v8 = lazy protocol witness table accessor for type ModifiedContent<AnyView, ClarityUIInterfaceIdiomModifier> and conformance <> ModifiedContent<A, B>();
    unint64_t v9 = a3(a1, v7, v8);
    if (!v10) {
      atomic_store(v9, a2);
    }
  }
}

void type metadata accessor for _UIHostingView<BridgedPresentation.RootView>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void), uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v9 = a3();
    unint64_t v10 = a5(a1, a4, v9);
    if (!v11) {
      atomic_store(v10, a2);
    }
  }
}

uint64_t WindowGroup.init(makeContent:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  return WindowGroup.init(id:title:lazyContent:)(0, 0, 0, 0, 0, 0, a1, a2, a3);
}

uint64_t WindowGroup.init(id:makeContent:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  return WindowGroup.init(id:title:lazyContent:)(a1, a2, 0, 0, 0, 0, a3, a4, a5);
}

uint64_t WindowGroup.init(_:id:makeContent:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, void *a9@<X8>)
{
  return WindowGroup.init(id:title:lazyContent:)(a5, a6, a1, a2, a3 & 1, a4, a7, a8, a9);
}

uint64_t WindowGroup.init(_:id:makeContent:)@<X0>(uint64_t a1@<X4>, uint64_t a2@<X5>, uint64_t a3@<X6>, uint64_t a4@<X7>, void *a5@<X8>)
{
  uint64_t v13 = Text.init(_:tableName:bundle:comment:)();

  return WindowGroup.init(id:title:lazyContent:)(a1, a2, v13, v10, v11 & 1, v12, a3, a4, a5);
}

uint64_t WindowGroup.init<A>(_:id:makeContent:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X6>, void *a7@<X8>)
{
  uint64_t v22 = a4;
  uint64_t v23 = a5;
  uint64_t v12 = *(void *)(a6 - 8);
  double v13 = MEMORY[0x1F4188790](a1);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v12 + 16))((char *)&v21 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v15, v13);
  uint64_t v16 = Text.init<A>(_:)();
  char v24 = v17 & 1;
  WindowGroup.init(id:title:lazyContent:)(a2, a3, v16, v18, v17 & 1, v19, v22, v23, a7);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v12 + 8))(a1, a6);
}

uint64_t WindowGroup.init(_:makeContent:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, void *a7@<X8>)
{
  return WindowGroup.init(id:title:lazyContent:)(0, 0, a1, a2, a3 & 1, a4, a5, a6, a7);
}

uint64_t WindowGroup.init(_:makeContent:)@<X0>(uint64_t a1@<X4>, uint64_t a2@<X5>, void *a3@<X8>)
{
  uint64_t v6 = Text.init(_:tableName:bundle:comment:)();
  return WindowGroup.init(id:title:lazyContent:)(0, 0, v6, v8, v7 & 1, v9, a1, a2, a3);
}

uint64_t WindowGroup.init<A>(_:makeContent:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X4>, void *a5@<X8>)
{
  uint64_t v10 = *(void *)(a4 - 8);
  double v11 = MEMORY[0x1F4188790](a1);
  (*(void (**)(unsigned char *, uint64_t, uint64_t, double))(v10 + 16))(&v19[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)], a1, v13, v11);
  uint64_t v14 = Text.init<A>(_:)();
  v19[8] = v15 & 1;
  WindowGroup.init(id:title:lazyContent:)(0, 0, v14, v16, v15 & 1, v17, a2, a3, a5);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v10 + 8))(a1, a4);
}

double WindowGroup.init<A>(id:content:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  double result = 0.0;
  *(_OWORD *)a5 = 0u;
  *(_OWORD *)(a5 + 16) = 0u;
  *(void *)(a5 + 32) = a3;
  *(void *)(a5 + 40) = a4;
  *(unsigned char *)(a5 + 48) = 0;
  *(void *)(a5 + 56) = a1;
  *(void *)(a5 + 64) = a2;
  *(void *)(a5 + 80) = 0;
  *(void *)(a5 + 88) = 0;
  *(void *)(a5 + 72) = 0;
  return result;
}

uint64_t WindowGroup.init<A>(_:id:content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t result = Text.assertUnstyled(_:options:)();
  *(void *)a9 = a1;
  *(void *)(a9 + 8) = a2;
  *(void *)(a9 + 16) = a3 & 1;
  *(void *)(a9 + 24) = a4;
  *(void *)(a9 + 32) = a7;
  *(void *)(a9 + 40) = a8;
  *(unsigned char *)(a9 + 48) = 0;
  *(void *)(a9 + 56) = a5;
  *(void *)(a9 + 64) = a6;
  *(void *)(a9 + 80) = 0;
  *(void *)(a9 + 88) = 0;
  *(void *)(a9 + 72) = 0;
  return result;
}

uint64_t WindowGroup.init<A>(_:id:content:)@<X0>(uint64_t a1@<X4>, uint64_t a2@<X5>, uint64_t a3@<X6>, uint64_t a4@<X7>, uint64_t a5@<X8>)
{
  uint64_t v10 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v12 = v11;
  uint64_t v14 = v13;
  uint64_t v16 = v15 & 1;
  uint64_t result = Text.assertUnstyled(_:options:)();
  *(void *)a5 = v10;
  *(void *)(a5 + 8) = v12;
  *(void *)(a5 + 16) = v16;
  *(void *)(a5 + 24) = v14;
  *(void *)(a5 + 32) = a3;
  *(void *)(a5 + 40) = a4;
  *(unsigned char *)(a5 + 48) = 0;
  *(void *)(a5 + 56) = a1;
  *(void *)(a5 + 64) = a2;
  *(void *)(a5 + 80) = 0;
  *(void *)(a5 + 88) = 0;
  *(void *)(a5 + 72) = 0;
  return result;
}

uint64_t WindowGroup.init<A, B>(_:id:content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v26 = a2;
  uint64_t v27 = a3;
  uint64_t v12 = *(void *)(a6 - 8);
  double v13 = MEMORY[0x1F4188790](a1);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v12 + 16))((char *)&v25 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v15, v13);
  uint64_t v16 = Text.init<A>(_:)();
  uint64_t v18 = v17;
  uint64_t v20 = v19;
  char v28 = v21 & 1;
  uint64_t v22 = v21 & 1;
  uint64_t v29 = 0;
  Text.assertUnstyled(_:options:)();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v12 + 8))(a1, a6);
  *(void *)a7 = v16;
  *(void *)(a7 + 8) = v18;
  *(void *)(a7 + 16) = v22;
  *(void *)(a7 + 24) = v20;
  *(void *)(a7 + 32) = a4;
  *(void *)(a7 + 40) = a5;
  *(unsigned char *)(a7 + 48) = 0;
  uint64_t v24 = v27;
  *(void *)(a7 + 56) = v26;
  *(void *)(a7 + 64) = v24;
  *(void *)(a7 + 80) = 0;
  *(void *)(a7 + 88) = 0;
  *(void *)(a7 + 72) = 0;
  return result;
}

double WindowGroup.init<A>(content:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  double result = 0.0;
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(void *)(a3 + 32) = a1;
  *(void *)(a3 + 40) = a2;
  *(unsigned char *)(a3 + 48) = 0;
  *(_OWORD *)(a3 + 56) = 0u;
  *(_OWORD *)(a3 + 72) = 0u;
  *(void *)(a3 + 88) = 0;
  return result;
}

double WindowGroup.init<A>(_:content:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  Text.assertUnstyled(_:options:)();
  *(void *)a7 = a1;
  *(void *)(a7 + 8) = a2;
  *(void *)(a7 + 16) = a3 & 1;
  *(void *)(a7 + 24) = a4;
  *(void *)(a7 + 32) = a5;
  *(void *)(a7 + 40) = a6;
  *(unsigned char *)(a7 + 48) = 0;
  double result = 0.0;
  *(_OWORD *)(a7 + 56) = 0u;
  *(_OWORD *)(a7 + 72) = 0u;
  *(void *)(a7 + 88) = 0;
  return result;
}

double WindowGroup.init<A>(_:content:)@<D0>(uint64_t a1@<X4>, uint64_t a2@<X5>, uint64_t a3@<X8>)
{
  uint64_t v6 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v8 = v7;
  uint64_t v10 = v9;
  uint64_t v12 = v11 & 1;
  Text.assertUnstyled(_:options:)();
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v8;
  *(void *)(a3 + 16) = v12;
  *(void *)(a3 + 24) = v10;
  *(void *)(a3 + 32) = a1;
  *(void *)(a3 + 40) = a2;
  *(unsigned char *)(a3 + 48) = 0;
  double result = 0.0;
  *(_OWORD *)(a3 + 56) = 0u;
  *(_OWORD *)(a3 + 72) = 0u;
  *(void *)(a3 + 88) = 0;
  return result;
}

double WindowGroup.init<A, B>(_:content:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10 = *(void *)(a4 - 8);
  double v11 = MEMORY[0x1F4188790](a1);
  (*(void (**)(unsigned char *, uint64_t, uint64_t, double))(v10 + 16))(&v22[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)], a1, v13, v11);
  uint64_t v14 = Text.init<A>(_:)();
  uint64_t v16 = v15;
  uint64_t v18 = v17;
  v22[8] = v19 & 1;
  uint64_t v20 = v19 & 1;
  uint64_t v23 = 0;
  Text.assertUnstyled(_:options:)();
  (*(void (**)(uint64_t, uint64_t))(v10 + 8))(a1, a4);
  *(void *)a5 = v14;
  *(void *)(a5 + 8) = v16;
  *(void *)(a5 + 16) = v20;
  *(void *)(a5 + 24) = v18;
  *(void *)(a5 + 32) = a2;
  *(void *)(a5 + 40) = a3;
  *(unsigned char *)(a5 + 48) = 0;
  double result = 0.0;
  *(_OWORD *)(a5 + 56) = 0u;
  *(_OWORD *)(a5 + 72) = 0u;
  *(void *)(a5 + 88) = 0;
  return result;
}

uint64_t LazyWindowGroupContent.body.getter(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v7 = MEMORY[0x1F4188790](v6);
  uint64_t v9 = (char *)&v12 - v8;
  (*v1)(v7);
  static ViewBuilder.buildExpression<A>(_:)(v5);
  uint64_t v10 = *(void (**)(char *, uint64_t))(v3 + 8);
  v10(v5, v2);
  static ViewBuilder.buildExpression<A>(_:)(v9);
  return ((uint64_t (*)(char *, uint64_t))v10)(v9, v2);
}

uint64_t associated type witness table accessor for View.Body : View in LazyWindowGroupContent<A>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t type metadata accessor for LazyWindowGroupContent()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t destroy for SceneList.Item.Summary(uint64_t a1)
{
  uint64_t result = outlined consume of SceneID(*(void *)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16));
  switch(*(unsigned char *)(a1 + 152))
  {
    case 0:
    case 1:
      uint64_t result = swift_release();
      if (*(void *)(a1 + 56))
      {
        outlined consume of Text.Storage(*(void *)(a1 + 32), *(void *)(a1 + 40), *(unsigned char *)(a1 + 48));
        uint64_t result = swift_bridgeObjectRelease();
      }
      if (*(void *)(a1 + 72)) {
        goto LABEL_31;
      }
      return result;
    case 2:
      if (*(void *)(a1 + 72)) {
        __swift_destroy_boxed_opaque_existential_1(a1 + 48);
      }
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v3 = *(void *)(a1 + 128);
      uint64_t v4 = *(void *)(a1 + 136);
      char v5 = *(unsigned char *)(a1 + 144);
      return outlined consume of SceneID(v3, v4, v5);
    case 3:
      goto LABEL_31;
    case 4:
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      goto LABEL_26;
    case 5:
      outlined consume of SceneID(*(void *)(a1 + 24), *(void *)(a1 + 32), *(unsigned char *)(a1 + 40));
      if (*(void *)(a1 + 56) >= 3uLL) {
        swift_bridgeObjectRelease();
      }
      goto LABEL_31;
    case 6:
      swift_bridgeObjectRelease();
      uint64_t result = swift_release();
      if (!*(void *)(a1 + 72)) {
        return result;
      }
      outlined consume of Text.Storage(*(void *)(a1 + 48), *(void *)(a1 + 56), *(unsigned char *)(a1 + 64));
LABEL_26:
      uint64_t result = swift_bridgeObjectRelease();
      break;
    case 7:
      swift_bridgeObjectRelease();
      swift_release();
      if (*(void *)(a1 + 48)) {
        swift_release();
      }
      if (*(void *)(a1 + 88))
      {
        outlined consume of Text.Storage(*(void *)(a1 + 64), *(void *)(a1 + 72), *(unsigned char *)(a1 + 80));
        swift_bridgeObjectRelease();
      }
      swift_release();
      if (*(void *)(a1 + 104)) {
        swift_release();
      }
      if (*(void *)(a1 + 120)) {
        swift_release();
      }
      goto LABEL_26;
    case 8:
      swift_release();
      swift_release();
      outlined consume of Text.Storage(*(void *)(a1 + 48), *(void *)(a1 + 56), *(unsigned char *)(a1 + 64));
      swift_bridgeObjectRelease();
LABEL_31:
      uint64_t result = swift_release();
      break;
    default:
      return result;
  }
  return result;
}

uint64_t initializeWithCopy for SceneList.Item.Summary(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  uint64_t v5 = *(void *)(a2 + 8);
  char v6 = *(unsigned char *)(a2 + 16);
  outlined copy of SceneID(*(void *)a2, v5, v6);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  *(unsigned char *)(a1 + 16) = v6;
  *(unsigned char *)(a1 + 17) = *(unsigned char *)(a2 + 17);
  switch(*(unsigned char *)(a2 + 152))
  {
    case 1:
      *(void *)(a1 + 24) = *(void *)(a2 + 24);
      uint64_t v11 = *(void *)(a2 + 56);
      swift_retain();
      if (v11)
      {
        uint64_t v12 = *(void *)(a2 + 32);
        uint64_t v13 = *(void *)(a2 + 40);
        char v14 = *(unsigned char *)(a2 + 48);
        outlined copy of Text.Storage(v12, v13, v14);
        *(void *)(a1 + 32) = v12;
        *(void *)(a1 + 40) = v13;
        *(unsigned char *)(a1 + 48) = v14;
        *(void *)(a1 + 56) = *(void *)(a2 + 56);
        swift_bridgeObjectRetain();
      }
      else
      {
        long long v48 = *(_OWORD *)(a2 + 48);
        *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
        *(_OWORD *)(a1 + 48) = v48;
      }
      uint64_t v49 = *(void *)(a2 + 72);
      *(void *)(a1 + 64) = *(void *)(a2 + 64);
      if (v49)
      {
        uint64_t v50 = *(void *)(a2 + 80);
        *(void *)(a1 + 72) = v49;
        *(void *)(a1 + 80) = v50;
        swift_retain();
      }
      else
      {
        *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
      }
      *(unsigned char *)(a1 + 152) = 1;
      goto LABEL_46;
    case 2:
      *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
      *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
      uint64_t v15 = (_OWORD *)(a1 + 48);
      uint64_t v16 = (_OWORD *)(a2 + 48);
      uint64_t v17 = *(void *)(a2 + 72);
      if (v17)
      {
        uint64_t v18 = *(void *)(a2 + 80);
        *(void *)(a1 + 72) = v17;
        *(void *)(a1 + 80) = v18;
        (**(void (***)(_OWORD *, _OWORD *))(v17 - 8))(v15, v16);
      }
      else
      {
        long long v51 = *(_OWORD *)(a2 + 64);
        *uint64_t v15 = *v16;
        *(_OWORD *)(a1 + 64) = v51;
        *(void *)(a1 + 80) = *(void *)(a2 + 80);
      }
      uint64_t v52 = *(void *)(a2 + 96);
      *(void *)(a1 + 88) = *(void *)(a2 + 88);
      *(void *)(a1 + 96) = v52;
      uint64_t v53 = *(void *)(a2 + 112);
      *(void *)(a1 + 104) = *(void *)(a2 + 104);
      *(void *)(a1 + 112) = v53;
      uint64_t v54 = *(void *)(a2 + 128);
      *(void *)(a1 + 120) = *(void *)(a2 + 120);
      uint64_t v55 = *(void *)(a2 + 136);
      char v56 = *(unsigned char *)(a2 + 144);
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      outlined copy of SceneID(v54, v55, v56);
      *(void *)(a1 + 128) = v54;
      *(void *)(a1 + 136) = v55;
      *(unsigned char *)(a1 + 144) = v56;
      *(unsigned char *)(a1 + 152) = 2;
      goto LABEL_46;
    case 3:
      *(void *)(a1 + 24) = *(void *)(a2 + 24);
      char v19 = 3;
      goto LABEL_20;
    case 4:
      uint64_t v20 = *(void *)(a2 + 32);
      *(void *)(a1 + 24) = *(void *)(a2 + 24);
      *(void *)(a1 + 32) = v20;
      *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
      uint64_t v21 = *(void *)(a2 + 56);
      *(void *)(a1 + 48) = *(void *)(a2 + 48);
      *(void *)(a1 + 56) = v21;
      *(_WORD *)(a1 + 64) = *(_WORD *)(a2 + 64);
      uint64_t v22 = *(void *)(a2 + 80);
      *(void *)(a1 + 72) = *(void *)(a2 + 72);
      *(void *)(a1 + 80) = v22;
      long long v23 = *(_OWORD *)(a2 + 88);
      *(unsigned char *)(a1 + 104) = *(unsigned char *)(a2 + 104);
      *(_OWORD *)(a1 + 88) = v23;
      *(unsigned char *)(a1 + 152) = 4;
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      goto LABEL_45;
    case 5:
      uint64_t v24 = *(void *)(a2 + 24);
      uint64_t v25 = *(void *)(a2 + 32);
      char v26 = *(unsigned char *)(a2 + 40);
      outlined copy of SceneID(v24, v25, v26);
      *(void *)(a1 + 24) = v24;
      *(void *)(a1 + 32) = v25;
      *(unsigned char *)(a1 + 40) = v26;
      uint64_t v27 = (void *)(a2 + 48);
      unint64_t v28 = *(void *)(a2 + 56);
      if (v28 >= 3)
      {
        *(void *)(a1 + 48) = *v27;
        *(void *)(a1 + 56) = v28;
        swift_bridgeObjectRetain();
      }
      else
      {
        *(_OWORD *)(a1 + 48) = *(_OWORD *)v27;
      }
      *(void *)(a1 + 64) = *(void *)(a2 + 64);
      char v19 = 5;
LABEL_20:
      *(unsigned char *)(a1 + 152) = v19;
      goto LABEL_21;
    case 6:
      uint64_t v29 = *(void *)(a2 + 32);
      *(void *)(a1 + 24) = *(void *)(a2 + 24);
      *(void *)(a1 + 32) = v29;
      *(void *)(a1 + 40) = *(void *)(a2 + 40);
      uint64_t v30 = *(void *)(a2 + 72);
      swift_bridgeObjectRetain();
      swift_retain();
      if (v30)
      {
        uint64_t v31 = *(void *)(a2 + 48);
        uint64_t v32 = *(void *)(a2 + 56);
        char v33 = *(unsigned char *)(a2 + 64);
        outlined copy of Text.Storage(v31, v32, v33);
        *(void *)(a1 + 48) = v31;
        *(void *)(a1 + 56) = v32;
        *(unsigned char *)(a1 + 64) = v33;
        *(void *)(a1 + 72) = *(void *)(a2 + 72);
        swift_bridgeObjectRetain();
      }
      else
      {
        long long v57 = *(_OWORD *)(a2 + 64);
        *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
        *(_OWORD *)(a1 + 64) = v57;
      }
      *(unsigned char *)(a1 + 152) = 6;
      goto LABEL_46;
    case 7:
      uint64_t v34 = *(void *)(a2 + 48);
      uint64_t v35 = *(void *)(a2 + 32);
      *(void *)(a1 + 24) = *(void *)(a2 + 24);
      *(void *)(a1 + 32) = v35;
      *(void *)(a1 + 40) = *(void *)(a2 + 40);
      swift_bridgeObjectRetain();
      swift_retain();
      if (v34)
      {
        uint64_t v36 = *(void *)(a2 + 56);
        *(void *)(a1 + 48) = v34;
        *(void *)(a1 + 56) = v36;
        swift_retain();
        if (*(void *)(a2 + 88))
        {
LABEL_16:
          uint64_t v37 = *(void *)(a2 + 64);
          uint64_t v38 = *(void *)(a2 + 72);
          char v39 = *(unsigned char *)(a2 + 80);
          outlined copy of Text.Storage(v37, v38, v39);
          *(void *)(a1 + 64) = v37;
          *(void *)(a1 + 72) = v38;
          *(unsigned char *)(a1 + 80) = v39;
          *(void *)(a1 + 88) = *(void *)(a2 + 88);
          swift_bridgeObjectRetain();
          goto LABEL_35;
        }
      }
      else
      {
        *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
        if (*(void *)(a2 + 88)) {
          goto LABEL_16;
        }
      }
      long long v58 = *(_OWORD *)(a2 + 80);
      *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
      *(_OWORD *)(a1 + 80) = v58;
LABEL_35:
      uint64_t v59 = *(void *)(a2 + 104);
      *(void *)(a1 + 96) = *(void *)(a2 + 96);
      swift_retain();
      if (v59)
      {
        uint64_t v60 = *(void *)(a2 + 112);
        *(void *)(a1 + 104) = v59;
        *(void *)(a1 + 112) = v60;
        swift_retain();
      }
      else
      {
        *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
      }
      uint64_t v61 = *(void *)(a2 + 120);
      if (v61)
      {
        uint64_t v62 = *(void *)(a2 + 128);
        *(void *)(a1 + 120) = v61;
        *(void *)(a1 + 128) = v62;
        swift_retain();
      }
      else
      {
        *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
      }
      uint64_t v63 = *(void *)(a2 + 144);
      *(void *)(a1 + 136) = *(void *)(a2 + 136);
      *(void *)(a1 + 144) = v63;
      *(unsigned char *)(a1 + 152) = 7;
LABEL_45:
      swift_bridgeObjectRetain();
LABEL_46:
      *(_WORD *)(a1 + 153) = *(_WORD *)(a2 + 153);
      return a1;
    case 8:
      uint64_t v40 = *(void *)(a2 + 32);
      *(void *)(a1 + 24) = *(void *)(a2 + 24);
      *(void *)(a1 + 32) = v40;
      *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
      uint64_t v41 = *(void *)(a2 + 48);
      uint64_t v42 = *(void *)(a2 + 56);
      char v43 = *(unsigned char *)(a2 + 64);
      swift_retain();
      swift_retain();
      outlined copy of Text.Storage(v41, v42, v43);
      *(void *)(a1 + 48) = v41;
      *(void *)(a1 + 56) = v42;
      *(unsigned char *)(a1 + 64) = v43;
      uint64_t v44 = *(void *)(a2 + 80);
      *(void *)(a1 + 72) = *(void *)(a2 + 72);
      *(void *)(a1 + 80) = v44;
      *(unsigned char *)(a1 + 152) = 8;
      swift_bridgeObjectRetain();
LABEL_21:
      swift_retain();
      goto LABEL_46;
    default:
      *(void *)(a1 + 24) = *(void *)(a2 + 24);
      uint64_t v7 = *(void *)(a2 + 56);
      swift_retain();
      if (v7)
      {
        uint64_t v8 = *(void *)(a2 + 32);
        uint64_t v9 = *(void *)(a2 + 40);
        char v10 = *(unsigned char *)(a2 + 48);
        outlined copy of Text.Storage(v8, v9, v10);
        *(void *)(a1 + 32) = v8;
        *(void *)(a1 + 40) = v9;
        *(unsigned char *)(a1 + 48) = v10;
        *(void *)(a1 + 56) = *(void *)(a2 + 56);
        swift_bridgeObjectRetain();
      }
      else
      {
        long long v45 = *(_OWORD *)(a2 + 48);
        *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
        *(_OWORD *)(a1 + 48) = v45;
      }
      uint64_t v46 = *(void *)(a2 + 72);
      *(void *)(a1 + 64) = *(void *)(a2 + 64);
      if (v46)
      {
        uint64_t v47 = *(void *)(a2 + 80);
        *(void *)(a1 + 72) = v46;
        *(void *)(a1 + 80) = v47;
        swift_retain();
      }
      else
      {
        *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
      }
      *(unsigned char *)(a1 + 152) = 0;
      goto LABEL_46;
  }
}

uint64_t assignWithCopy for SceneList.Item.Summary(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  uint64_t v5 = *(void *)(a2 + 8);
  char v6 = *(unsigned char *)(a2 + 16);
  outlined copy of SceneID(*(void *)a2, v5, v6);
  uint64_t v7 = *(void *)a1;
  uint64_t v8 = *(void *)(a1 + 8);
  char v9 = *(unsigned char *)(a1 + 16);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  *(unsigned char *)(a1 + 16) = v6;
  outlined consume of SceneID(v7, v8, v9);
  *(unsigned char *)(a1 + 17) = *(unsigned char *)(a2 + 17);
  if (a1 != a2)
  {
    outlined destroy of SceneList.Item.Value(a1 + 24);
    switch(*(unsigned char *)(a2 + 152))
    {
      case 1:
        *(void *)(a1 + 24) = *(void *)(a2 + 24);
        uint64_t v14 = *(void *)(a2 + 56);
        swift_retain();
        if (v14)
        {
          uint64_t v15 = *(void *)(a2 + 32);
          uint64_t v16 = *(void *)(a2 + 40);
          char v17 = *(unsigned char *)(a2 + 48);
          outlined copy of Text.Storage(v15, v16, v17);
          *(void *)(a1 + 32) = v15;
          *(void *)(a1 + 40) = v16;
          *(unsigned char *)(a1 + 48) = v17;
          *(void *)(a1 + 56) = *(void *)(a2 + 56);
          swift_bridgeObjectRetain();
        }
        else
        {
          long long v41 = *(_OWORD *)(a2 + 48);
          *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
          *(_OWORD *)(a1 + 48) = v41;
        }
        *(void *)(a1 + 64) = *(void *)(a2 + 64);
        uint64_t v42 = *(void *)(a2 + 72);
        if (v42)
        {
          uint64_t v43 = *(void *)(a2 + 80);
          *(void *)(a1 + 72) = v42;
          *(void *)(a1 + 80) = v43;
          swift_retain();
        }
        else
        {
          *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
        }
        *(unsigned char *)(a1 + 152) = 1;
        break;
      case 2:
        *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
        *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
        uint64_t v18 = (_OWORD *)(a1 + 48);
        char v19 = (long long *)(a2 + 48);
        uint64_t v20 = *(void *)(a2 + 72);
        if (v20)
        {
          *(void *)(a1 + 72) = v20;
          *(void *)(a1 + 80) = *(void *)(a2 + 80);
          (**(void (***)(_OWORD *, long long *))(v20 - 8))(v18, v19);
        }
        else
        {
          long long v44 = *v19;
          long long v45 = *(_OWORD *)(a2 + 64);
          *(void *)(a1 + 80) = *(void *)(a2 + 80);
          *uint64_t v18 = v44;
          *(_OWORD *)(a1 + 64) = v45;
        }
        *(void *)(a1 + 88) = *(void *)(a2 + 88);
        *(void *)(a1 + 96) = *(void *)(a2 + 96);
        *(void *)(a1 + 104) = *(void *)(a2 + 104);
        *(void *)(a1 + 112) = *(void *)(a2 + 112);
        *(void *)(a1 + 120) = *(void *)(a2 + 120);
        uint64_t v46 = *(void *)(a2 + 128);
        uint64_t v47 = *(void *)(a2 + 136);
        char v48 = *(unsigned char *)(a2 + 144);
        swift_retain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        outlined copy of SceneID(v46, v47, v48);
        *(void *)(a1 + 128) = v46;
        *(void *)(a1 + 136) = v47;
        *(unsigned char *)(a1 + 144) = v48;
        *(unsigned char *)(a1 + 152) = 2;
        break;
      case 3:
        *(void *)(a1 + 24) = *(void *)(a2 + 24);
        char v21 = 3;
        goto LABEL_21;
      case 4:
        *(void *)(a1 + 24) = *(void *)(a2 + 24);
        *(void *)(a1 + 32) = *(void *)(a2 + 32);
        *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
        *(void *)(a1 + 48) = *(void *)(a2 + 48);
        *(void *)(a1 + 56) = *(void *)(a2 + 56);
        *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
        *(unsigned char *)(a1 + 65) = *(unsigned char *)(a2 + 65);
        *(void *)(a1 + 72) = *(void *)(a2 + 72);
        *(void *)(a1 + 80) = *(void *)(a2 + 80);
        long long v22 = *(_OWORD *)(a2 + 88);
        *(unsigned char *)(a1 + 104) = *(unsigned char *)(a2 + 104);
        *(_OWORD *)(a1 + 88) = v22;
        *(unsigned char *)(a1 + 152) = 4;
        swift_retain();
        swift_retain();
        swift_retain();
        swift_retain();
        goto LABEL_46;
      case 5:
        uint64_t v23 = *(void *)(a2 + 24);
        uint64_t v24 = *(void *)(a2 + 32);
        char v25 = *(unsigned char *)(a2 + 40);
        outlined copy of SceneID(v23, v24, v25);
        *(void *)(a1 + 24) = v23;
        *(void *)(a1 + 32) = v24;
        *(unsigned char *)(a1 + 40) = v25;
        if (*(void *)(a2 + 56) >= 3uLL)
        {
          *(void *)(a1 + 48) = *(void *)(a2 + 48);
          *(void *)(a1 + 56) = *(void *)(a2 + 56);
          swift_bridgeObjectRetain();
        }
        else
        {
          *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
        }
        *(void *)(a1 + 64) = *(void *)(a2 + 64);
        char v21 = 5;
LABEL_21:
        *(unsigned char *)(a1 + 152) = v21;
        goto LABEL_22;
      case 6:
        *(void *)(a1 + 24) = *(void *)(a2 + 24);
        *(void *)(a1 + 32) = *(void *)(a2 + 32);
        *(void *)(a1 + 40) = *(void *)(a2 + 40);
        uint64_t v26 = *(void *)(a2 + 72);
        swift_bridgeObjectRetain();
        swift_retain();
        if (v26)
        {
          uint64_t v27 = *(void *)(a2 + 48);
          uint64_t v28 = *(void *)(a2 + 56);
          char v29 = *(unsigned char *)(a2 + 64);
          outlined copy of Text.Storage(v27, v28, v29);
          *(void *)(a1 + 48) = v27;
          *(void *)(a1 + 56) = v28;
          *(unsigned char *)(a1 + 64) = v29;
          *(void *)(a1 + 72) = *(void *)(a2 + 72);
          swift_bridgeObjectRetain();
        }
        else
        {
          long long v49 = *(_OWORD *)(a2 + 64);
          *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
          *(_OWORD *)(a1 + 64) = v49;
        }
        *(unsigned char *)(a1 + 152) = 6;
        break;
      case 7:
        *(void *)(a1 + 24) = *(void *)(a2 + 24);
        *(void *)(a1 + 32) = *(void *)(a2 + 32);
        *(void *)(a1 + 40) = *(void *)(a2 + 40);
        uint64_t v30 = *(void *)(a2 + 48);
        swift_bridgeObjectRetain();
        swift_retain();
        if (v30)
        {
          uint64_t v31 = *(void *)(a2 + 56);
          *(void *)(a1 + 48) = v30;
          *(void *)(a1 + 56) = v31;
          swift_retain();
          if (*(void *)(a2 + 88))
          {
LABEL_17:
            uint64_t v32 = *(void *)(a2 + 64);
            uint64_t v33 = *(void *)(a2 + 72);
            char v34 = *(unsigned char *)(a2 + 80);
            outlined copy of Text.Storage(v32, v33, v34);
            *(void *)(a1 + 64) = v32;
            *(void *)(a1 + 72) = v33;
            *(unsigned char *)(a1 + 80) = v34;
            *(void *)(a1 + 88) = *(void *)(a2 + 88);
            swift_bridgeObjectRetain();
            goto LABEL_36;
          }
        }
        else
        {
          *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
          if (*(void *)(a2 + 88)) {
            goto LABEL_17;
          }
        }
        long long v50 = *(_OWORD *)(a2 + 80);
        *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
        *(_OWORD *)(a1 + 80) = v50;
LABEL_36:
        *(void *)(a1 + 96) = *(void *)(a2 + 96);
        uint64_t v51 = *(void *)(a2 + 104);
        swift_retain();
        if (v51)
        {
          uint64_t v52 = *(void *)(a2 + 112);
          *(void *)(a1 + 104) = v51;
          *(void *)(a1 + 112) = v52;
          swift_retain();
        }
        else
        {
          *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
        }
        uint64_t v53 = *(void *)(a2 + 120);
        if (v53)
        {
          uint64_t v54 = *(void *)(a2 + 128);
          *(void *)(a1 + 120) = v53;
          *(void *)(a1 + 128) = v54;
          swift_retain();
        }
        else
        {
          *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
        }
        *(void *)(a1 + 136) = *(void *)(a2 + 136);
        *(void *)(a1 + 144) = *(void *)(a2 + 144);
        *(unsigned char *)(a1 + 152) = 7;
LABEL_46:
        swift_bridgeObjectRetain();
        break;
      case 8:
        *(void *)(a1 + 24) = *(void *)(a2 + 24);
        *(void *)(a1 + 32) = *(void *)(a2 + 32);
        *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
        uint64_t v35 = *(void *)(a2 + 48);
        uint64_t v36 = *(void *)(a2 + 56);
        char v37 = *(unsigned char *)(a2 + 64);
        swift_retain();
        swift_retain();
        outlined copy of Text.Storage(v35, v36, v37);
        *(void *)(a1 + 48) = v35;
        *(void *)(a1 + 56) = v36;
        *(unsigned char *)(a1 + 64) = v37;
        *(void *)(a1 + 72) = *(void *)(a2 + 72);
        *(void *)(a1 + 80) = *(void *)(a2 + 80);
        *(unsigned char *)(a1 + 152) = 8;
        swift_bridgeObjectRetain();
LABEL_22:
        swift_retain();
        break;
      default:
        *(void *)(a1 + 24) = *(void *)(a2 + 24);
        uint64_t v10 = *(void *)(a2 + 56);
        swift_retain();
        if (v10)
        {
          uint64_t v11 = *(void *)(a2 + 32);
          uint64_t v12 = *(void *)(a2 + 40);
          char v13 = *(unsigned char *)(a2 + 48);
          outlined copy of Text.Storage(v11, v12, v13);
          *(void *)(a1 + 32) = v11;
          *(void *)(a1 + 40) = v12;
          *(unsigned char *)(a1 + 48) = v13;
          *(void *)(a1 + 56) = *(void *)(a2 + 56);
          swift_bridgeObjectRetain();
        }
        else
        {
          long long v38 = *(_OWORD *)(a2 + 48);
          *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
          *(_OWORD *)(a1 + 48) = v38;
        }
        *(void *)(a1 + 64) = *(void *)(a2 + 64);
        uint64_t v39 = *(void *)(a2 + 72);
        if (v39)
        {
          uint64_t v40 = *(void *)(a2 + 80);
          *(void *)(a1 + 72) = v39;
          *(void *)(a1 + 80) = v40;
          swift_retain();
        }
        else
        {
          *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
        }
        *(unsigned char *)(a1 + 152) = 0;
        break;
    }
  }
  *(unsigned char *)(a1 + 153) = *(unsigned char *)(a2 + 153);
  *(unsigned char *)(a1 + 154) = *(unsigned char *)(a2 + 154);
  return a1;
}

__n128 __swift_memcpy155_8(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  long long v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  __n128 result = *(__n128 *)(a2 + 96);
  long long v7 = *(_OWORD *)(a2 + 112);
  long long v8 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 139) = *(_OWORD *)(a2 + 139);
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 128) = v8;
  *(__n128 *)(a1 + 96) = result;
  return result;
}

uint64_t assignWithTake for SceneList.Item.Summary(uint64_t a1, uint64_t a2)
{
  char v4 = *(unsigned char *)(a2 + 16);
  uint64_t v5 = *(void *)a1;
  uint64_t v6 = *(void *)(a1 + 8);
  char v7 = *(unsigned char *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(unsigned char *)(a1 + 16) = v4;
  outlined consume of SceneID(v5, v6, v7);
  *(unsigned char *)(a1 + 17) = *(unsigned char *)(a2 + 17);
  if (a1 != a2)
  {
    outlined destroy of SceneList.Item.Value(a1 + 24);
    *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
    *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
    *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
    *(unsigned char *)(a1 + 152) = *(unsigned char *)(a2 + 152);
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
    *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  }
  *(unsigned char *)(a1 + 153) = *(unsigned char *)(a2 + 153);
  *(unsigned char *)(a1 + 154) = *(unsigned char *)(a2 + 154);
  return a1;
}

uint64_t getEnumTagSinglePayload for SceneList.Item.Summary(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 155)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 1) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for SceneList.Item.Summary(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 154) = 0;
    *(_WORD *)(result + 152) = 0;
    *(void *)__n128 result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 155) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 155) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 16) = -(char)a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SceneList.Item.Summary()
{
  return &type metadata for SceneList.Item.Summary;
}

uint64_t assignWithCopy for SceneList.Item.Value(uint64_t a1, uint64_t *a2)
{
  if ((uint64_t *)a1 != a2)
  {
    unsigned int v4 = *(unsigned __int8 *)(a1 + 128);
    if (v4 >= 9) {
      unsigned int v4 = *(_DWORD *)a1 + 9;
    }
    switch(v4)
    {
      case 2u:
        if (*(void *)(a1 + 48)) {
          __swift_destroy_boxed_opaque_existential_1(a1 + 24);
        }
        swift_release();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        outlined consume of SceneID(*(void *)(a1 + 104), *(void *)(a1 + 112), *(unsigned char *)(a1 + 120));
        goto LABEL_29;
      case 3u:
        goto LABEL_28;
      case 4u:
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_bridgeObjectRelease();
        goto LABEL_29;
      case 5u:
        outlined consume of SceneID(*(void *)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16));
        if (*(void *)(a1 + 32) >= 3uLL) {
          swift_bridgeObjectRelease();
        }
        goto LABEL_28;
      case 6u:
        swift_bridgeObjectRelease();
        swift_release();
        if (*(void *)(a1 + 48))
        {
          outlined consume of Text.Storage(*(void *)(a1 + 24), *(void *)(a1 + 32), *(unsigned char *)(a1 + 40));
          swift_bridgeObjectRelease();
        }
        goto LABEL_29;
      case 7u:
        swift_bridgeObjectRelease();
        swift_release();
        if (*(void *)(a1 + 24)) {
          swift_release();
        }
        if (*(void *)(a1 + 64))
        {
          outlined consume of Text.Storage(*(void *)(a1 + 40), *(void *)(a1 + 48), *(unsigned char *)(a1 + 56));
          swift_bridgeObjectRelease();
        }
        swift_release();
        if (*(void *)(a1 + 80)) {
          swift_release();
        }
        if (*(void *)(a1 + 96)) {
          swift_release();
        }
        swift_bridgeObjectRelease();
        goto LABEL_29;
      case 8u:
        swift_release();
        swift_release();
        outlined consume of Text.Storage(*(void *)(a1 + 24), *(void *)(a1 + 32), *(unsigned char *)(a1 + 40));
        swift_bridgeObjectRelease();
        goto LABEL_28;
      default:
        swift_release();
        if (*(void *)(a1 + 32))
        {
          outlined consume of Text.Storage(*(void *)(a1 + 8), *(void *)(a1 + 16), *(unsigned char *)(a1 + 24));
          swift_bridgeObjectRelease();
        }
        if (!*(void *)(a1 + 48)) {
          goto LABEL_29;
        }
LABEL_28:
        swift_release();
LABEL_29:
        unsigned int v5 = *((unsigned __int8 *)a2 + 128);
        if (v5 >= 9) {
          unsigned int v5 = *(_DWORD *)a2 + 9;
        }
        break;
    }
    switch(v5)
    {
      case 1u:
        *(void *)a1 = *a2;
        uint64_t v10 = a2[4];
        swift_retain();
        if (v10)
        {
          uint64_t v11 = a2[1];
          uint64_t v12 = a2[2];
          char v13 = *((unsigned char *)a2 + 24);
          outlined copy of Text.Storage(v11, v12, v13);
          *(void *)(a1 + 8) = v11;
          *(void *)(a1 + 16) = v12;
          *(unsigned char *)(a1 + 24) = v13;
          *(void *)(a1 + 32) = a2[4];
          swift_bridgeObjectRetain();
        }
        else
        {
          long long v37 = *(_OWORD *)(a2 + 3);
          *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 1);
          *(_OWORD *)(a1 + 24) = v37;
        }
        *(void *)(a1 + 40) = a2[5];
        uint64_t v38 = a2[6];
        if (v38)
        {
          uint64_t v39 = a2[7];
          *(void *)(a1 + 48) = v38;
          *(void *)(a1 + 56) = v39;
          swift_retain();
        }
        else
        {
          *(_OWORD *)(a1 + 48) = *((_OWORD *)a2 + 3);
        }
        *(unsigned char *)(a1 + 128) = 1;
        return a1;
      case 2u:
        *(unsigned char *)a1 = *(unsigned char *)a2;
        *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 1);
        uint64_t v14 = (_OWORD *)(a1 + 24);
        uint64_t v15 = (long long *)(a2 + 3);
        uint64_t v16 = a2[6];
        if (v16)
        {
          *(void *)(a1 + 48) = v16;
          *(void *)(a1 + 56) = a2[7];
          (**(void (***)(_OWORD *, long long *))(v16 - 8))(v14, v15);
        }
        else
        {
          long long v40 = *v15;
          long long v41 = *(_OWORD *)(a2 + 5);
          *(void *)(a1 + 56) = a2[7];
          *uint64_t v14 = v40;
          *(_OWORD *)(a1 + 40) = v41;
        }
        *(void *)(a1 + 64) = a2[8];
        *(void *)(a1 + 72) = a2[9];
        *(void *)(a1 + 80) = a2[10];
        *(void *)(a1 + 88) = a2[11];
        *(void *)(a1 + 96) = a2[12];
        uint64_t v42 = a2[13];
        uint64_t v43 = a2[14];
        char v44 = *((unsigned char *)a2 + 120);
        swift_retain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        outlined copy of SceneID(v42, v43, v44);
        *(void *)(a1 + 104) = v42;
        *(void *)(a1 + 112) = v43;
        *(unsigned char *)(a1 + 120) = v44;
        *(unsigned char *)(a1 + 128) = 2;
        return a1;
      case 3u:
        *(void *)a1 = *a2;
        char v17 = 3;
        goto LABEL_50;
      case 4u:
        *(void *)a1 = *a2;
        *(void *)(a1 + 8) = a2[1];
        *(unsigned char *)(a1 + 16) = *((unsigned char *)a2 + 16);
        *(void *)(a1 + 24) = a2[3];
        *(void *)(a1 + 32) = a2[4];
        *(unsigned char *)(a1 + 40) = *((unsigned char *)a2 + 40);
        *(unsigned char *)(a1 + 41) = *((unsigned char *)a2 + 41);
        *(void *)(a1 + 48) = a2[6];
        *(void *)(a1 + 56) = a2[7];
        long long v18 = *((_OWORD *)a2 + 4);
        *(unsigned char *)(a1 + 80) = *((unsigned char *)a2 + 80);
        *(_OWORD *)(a1 + 64) = v18;
        *(unsigned char *)(a1 + 128) = 4;
        swift_retain();
        swift_retain();
        swift_retain();
        swift_retain();
        goto LABEL_75;
      case 5u:
        uint64_t v19 = *a2;
        uint64_t v20 = a2[1];
        char v21 = *((unsigned char *)a2 + 16);
        outlined copy of SceneID(*a2, v20, v21);
        *(void *)a1 = v19;
        *(void *)(a1 + 8) = v20;
        *(unsigned char *)(a1 + 16) = v21;
        if ((unint64_t)a2[4] >= 3)
        {
          *(void *)(a1 + 24) = a2[3];
          *(void *)(a1 + 32) = a2[4];
          swift_bridgeObjectRetain();
        }
        else
        {
          *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 3);
        }
        *(void *)(a1 + 40) = a2[5];
        char v17 = 5;
LABEL_50:
        *(unsigned char *)(a1 + 128) = v17;
        goto LABEL_51;
      case 6u:
        *(void *)a1 = *a2;
        *(void *)(a1 + 8) = a2[1];
        *(void *)(a1 + 16) = a2[2];
        uint64_t v22 = a2[6];
        swift_bridgeObjectRetain();
        swift_retain();
        if (v22)
        {
          uint64_t v23 = a2[3];
          uint64_t v24 = a2[4];
          char v25 = *((unsigned char *)a2 + 40);
          outlined copy of Text.Storage(v23, v24, v25);
          *(void *)(a1 + 24) = v23;
          *(void *)(a1 + 32) = v24;
          *(unsigned char *)(a1 + 40) = v25;
          *(void *)(a1 + 48) = a2[6];
          swift_bridgeObjectRetain();
        }
        else
        {
          long long v45 = *(_OWORD *)(a2 + 5);
          *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 3);
          *(_OWORD *)(a1 + 40) = v45;
        }
        *(unsigned char *)(a1 + 128) = 6;
        return a1;
      case 7u:
        *(void *)a1 = *a2;
        *(void *)(a1 + 8) = a2[1];
        *(void *)(a1 + 16) = a2[2];
        uint64_t v26 = a2[3];
        swift_bridgeObjectRetain();
        swift_retain();
        if (v26)
        {
          uint64_t v27 = a2[4];
          *(void *)(a1 + 24) = v26;
          *(void *)(a1 + 32) = v27;
          swift_retain();
          if (a2[8])
          {
LABEL_46:
            uint64_t v28 = a2[5];
            uint64_t v29 = a2[6];
            char v30 = *((unsigned char *)a2 + 56);
            outlined copy of Text.Storage(v28, v29, v30);
            *(void *)(a1 + 40) = v28;
            *(void *)(a1 + 48) = v29;
            *(unsigned char *)(a1 + 56) = v30;
            *(void *)(a1 + 64) = a2[8];
            swift_bridgeObjectRetain();
            goto LABEL_65;
          }
        }
        else
        {
          *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 3);
          if (a2[8]) {
            goto LABEL_46;
          }
        }
        long long v46 = *(_OWORD *)(a2 + 7);
        *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 5);
        *(_OWORD *)(a1 + 56) = v46;
LABEL_65:
        *(void *)(a1 + 72) = a2[9];
        uint64_t v47 = a2[10];
        swift_retain();
        if (v47)
        {
          uint64_t v48 = a2[11];
          *(void *)(a1 + 80) = v47;
          *(void *)(a1 + 88) = v48;
          swift_retain();
        }
        else
        {
          *(_OWORD *)(a1 + 80) = *((_OWORD *)a2 + 5);
        }
        uint64_t v49 = a2[12];
        if (v49)
        {
          uint64_t v50 = a2[13];
          *(void *)(a1 + 96) = v49;
          *(void *)(a1 + 104) = v50;
          swift_retain();
        }
        else
        {
          *(_OWORD *)(a1 + 96) = *((_OWORD *)a2 + 6);
        }
        *(void *)(a1 + 112) = a2[14];
        *(void *)(a1 + 120) = a2[15];
        *(unsigned char *)(a1 + 128) = 7;
LABEL_75:
        swift_bridgeObjectRetain();
        break;
      case 8u:
        *(void *)a1 = *a2;
        *(void *)(a1 + 8) = a2[1];
        *(unsigned char *)(a1 + 16) = *((unsigned char *)a2 + 16);
        uint64_t v31 = a2[3];
        uint64_t v32 = a2[4];
        char v33 = *((unsigned char *)a2 + 40);
        swift_retain();
        swift_retain();
        outlined copy of Text.Storage(v31, v32, v33);
        *(void *)(a1 + 24) = v31;
        *(void *)(a1 + 32) = v32;
        *(unsigned char *)(a1 + 40) = v33;
        *(void *)(a1 + 48) = a2[6];
        *(void *)(a1 + 56) = a2[7];
        *(unsigned char *)(a1 + 128) = 8;
        swift_bridgeObjectRetain();
LABEL_51:
        swift_retain();
        return a1;
      default:
        *(void *)a1 = *a2;
        uint64_t v6 = a2[4];
        swift_retain();
        if (v6)
        {
          uint64_t v7 = a2[1];
          uint64_t v8 = a2[2];
          char v9 = *((unsigned char *)a2 + 24);
          outlined copy of Text.Storage(v7, v8, v9);
          *(void *)(a1 + 8) = v7;
          *(void *)(a1 + 16) = v8;
          *(unsigned char *)(a1 + 24) = v9;
          *(void *)(a1 + 32) = a2[4];
          swift_bridgeObjectRetain();
        }
        else
        {
          long long v34 = *(_OWORD *)(a2 + 3);
          *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 1);
          *(_OWORD *)(a1 + 24) = v34;
        }
        *(void *)(a1 + 40) = a2[5];
        uint64_t v35 = a2[6];
        if (v35)
        {
          uint64_t v36 = a2[7];
          *(void *)(a1 + 48) = v35;
          *(void *)(a1 + 56) = v36;
          swift_retain();
        }
        else
        {
          *(_OWORD *)(a1 + 48) = *((_OWORD *)a2 + 3);
        }
        *(unsigned char *)(a1 + 128) = 0;
        return a1;
    }
  }
  return a1;
}

uint64_t assignWithTake for SceneList.Item.Value(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    unsigned int v4 = *(unsigned __int8 *)(a1 + 128);
    if (v4 >= 9) {
      unsigned int v4 = *(_DWORD *)a1 + 9;
    }
    switch(v4)
    {
      case 2u:
        if (*(void *)(a1 + 48)) {
          __swift_destroy_boxed_opaque_existential_1(a1 + 24);
        }
        swift_release();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        outlined consume of SceneID(*(void *)(a1 + 104), *(void *)(a1 + 112), *(unsigned char *)(a1 + 120));
        goto LABEL_29;
      case 3u:
        goto LABEL_28;
      case 4u:
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_bridgeObjectRelease();
        goto LABEL_29;
      case 5u:
        outlined consume of SceneID(*(void *)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16));
        if (*(void *)(a1 + 32) >= 3uLL) {
          swift_bridgeObjectRelease();
        }
        goto LABEL_28;
      case 6u:
        swift_bridgeObjectRelease();
        swift_release();
        if (*(void *)(a1 + 48))
        {
          outlined consume of Text.Storage(*(void *)(a1 + 24), *(void *)(a1 + 32), *(unsigned char *)(a1 + 40));
          swift_bridgeObjectRelease();
        }
        goto LABEL_29;
      case 7u:
        swift_bridgeObjectRelease();
        swift_release();
        if (*(void *)(a1 + 24)) {
          swift_release();
        }
        if (*(void *)(a1 + 64))
        {
          outlined consume of Text.Storage(*(void *)(a1 + 40), *(void *)(a1 + 48), *(unsigned char *)(a1 + 56));
          swift_bridgeObjectRelease();
        }
        swift_release();
        if (*(void *)(a1 + 80)) {
          swift_release();
        }
        if (*(void *)(a1 + 96)) {
          swift_release();
        }
        swift_bridgeObjectRelease();
        goto LABEL_29;
      case 8u:
        swift_release();
        swift_release();
        outlined consume of Text.Storage(*(void *)(a1 + 24), *(void *)(a1 + 32), *(unsigned char *)(a1 + 40));
        swift_bridgeObjectRelease();
        goto LABEL_28;
      default:
        swift_release();
        if (*(void *)(a1 + 32))
        {
          outlined consume of Text.Storage(*(void *)(a1 + 8), *(void *)(a1 + 16), *(unsigned char *)(a1 + 24));
          swift_bridgeObjectRelease();
        }
        if (!*(void *)(a1 + 48)) {
          goto LABEL_29;
        }
LABEL_28:
        swift_release();
LABEL_29:
        unsigned int v5 = *(unsigned __int8 *)(a2 + 128);
        if (v5 >= 9) {
          unsigned int v5 = *(_DWORD *)a2 + 9;
        }
        switch(v5)
        {
          case 1u:
            long long v10 = *(_OWORD *)(a2 + 16);
            *(_OWORD *)a1 = *(_OWORD *)a2;
            *(_OWORD *)(a1 + 16) = v10;
            long long v11 = *(_OWORD *)(a2 + 48);
            *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
            *(_OWORD *)(a1 + 48) = v11;
            char v6 = 1;
            goto LABEL_42;
          case 2u:
            long long v12 = *(_OWORD *)(a2 + 80);
            *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
            *(_OWORD *)(a1 + 80) = v12;
            *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
            *(_OWORD *)(a1 + 105) = *(_OWORD *)(a2 + 105);
            long long v13 = *(_OWORD *)(a2 + 16);
            *(_OWORD *)a1 = *(_OWORD *)a2;
            *(_OWORD *)(a1 + 16) = v13;
            long long v8 = *(_OWORD *)(a2 + 32);
            long long v9 = *(_OWORD *)(a2 + 48);
            char v6 = 2;
            goto LABEL_39;
          case 3u:
            *(void *)a1 = *(void *)a2;
            char v6 = 3;
            goto LABEL_42;
          case 4u:
            long long v14 = *(_OWORD *)(a2 + 48);
            *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
            *(_OWORD *)(a1 + 48) = v14;
            *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
            *(unsigned char *)(a1 + 80) = *(unsigned char *)(a2 + 80);
            long long v15 = *(_OWORD *)(a2 + 16);
            char v6 = 4;
            *(_OWORD *)a1 = *(_OWORD *)a2;
            *(_OWORD *)(a1 + 16) = v15;
            goto LABEL_42;
          case 5u:
            long long v16 = *(_OWORD *)(a2 + 16);
            *(_OWORD *)a1 = *(_OWORD *)a2;
            *(_OWORD *)(a1 + 16) = v16;
            *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
            char v6 = 5;
            goto LABEL_42;
          case 6u:
            long long v20 = *(_OWORD *)(a2 + 16);
            *(_OWORD *)a1 = *(_OWORD *)a2;
            *(_OWORD *)(a1 + 16) = v20;
            *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
            *(void *)(a1 + 48) = *(void *)(a2 + 48);
            char v6 = 6;
            goto LABEL_42;
          case 7u:
            long long v17 = *(_OWORD *)(a2 + 80);
            *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
            *(_OWORD *)(a1 + 80) = v17;
            long long v18 = *(_OWORD *)(a2 + 112);
            *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
            *(_OWORD *)(a1 + 112) = v18;
            long long v19 = *(_OWORD *)(a2 + 16);
            *(_OWORD *)a1 = *(_OWORD *)a2;
            *(_OWORD *)(a1 + 16) = v19;
            long long v8 = *(_OWORD *)(a2 + 32);
            long long v9 = *(_OWORD *)(a2 + 48);
            char v6 = 7;
            goto LABEL_39;
          case 8u:
            long long v21 = *(_OWORD *)(a2 + 16);
            *(_OWORD *)a1 = *(_OWORD *)a2;
            *(_OWORD *)(a1 + 16) = v21;
            long long v22 = *(_OWORD *)(a2 + 48);
            *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
            *(_OWORD *)(a1 + 48) = v22;
            char v6 = 8;
            goto LABEL_42;
          default:
            char v6 = 0;
            long long v7 = *(_OWORD *)(a2 + 16);
            *(_OWORD *)a1 = *(_OWORD *)a2;
            *(_OWORD *)(a1 + 16) = v7;
            long long v8 = *(_OWORD *)(a2 + 32);
            long long v9 = *(_OWORD *)(a2 + 48);
LABEL_39:
            *(_OWORD *)(a1 + 32) = v8;
            *(_OWORD *)(a1 + 48) = v9;
LABEL_42:
            *(unsigned char *)(a1 + 128) = v6;
            break;
        }
        break;
    }
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for SceneList.Item.Value(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xF8 && *(unsigned char *)(a1 + 129)) {
    return (*(_DWORD *)a1 + 248);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 128);
  if (v3 >= 9) {
    return (v3 ^ 0xFF) + 1;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for SceneList.Item.Value(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xF7)
  {
    *(unsigned char *)(result + 128) = 0;
    *(_OWORD *)(result + 96) = 0u;
    *(_OWORD *)(result + 112) = 0u;
    *(_OWORD *)(result + 64) = 0u;
    *(_OWORD *)(result + 80) = 0u;
    *(_OWORD *)(result + 32) = 0u;
    *(_OWORD *)(result + 48) = 0u;
    *(_OWORD *)__n128 result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_DWORD *)__n128 result = a2 - 248;
    if (a3 >= 0xF8) {
      *(unsigned char *)(result + 129) = 1;
    }
  }
  else
  {
    if (a3 >= 0xF8) {
      *(unsigned char *)(result + 129) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 128) = -(char)a2;
    }
  }
  return result;
}

uint64_t getEnumTag for SceneList.Item.Value(uint64_t a1)
{
  uint64_t result = *(unsigned __int8 *)(a1 + 128);
  if (result >= 9) {
    return (*(_DWORD *)a1 + 9);
  }
  return result;
}

uint64_t destructiveInjectEnumTag for SceneList.Item.Value(uint64_t result, unsigned int a2)
{
  if (a2 > 8)
  {
    unsigned int v2 = a2 - 9;
    *(_OWORD *)(result + 96) = 0u;
    *(_OWORD *)(result + 112) = 0u;
    *(_OWORD *)(result + 64) = 0u;
    *(_OWORD *)(result + 80) = 0u;
    *(_OWORD *)(result + 32) = 0u;
    *(_OWORD *)(result + 48) = 0u;
    *(_OWORD *)uint64_t result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    LOBYTE(a2) = 9;
    *(_DWORD *)uint64_t result = v2;
  }
  *(unsigned char *)(result + 128) = a2;
  return result;
}

ValueMetadata *type metadata accessor for SceneList.Item.Value()
{
  return &type metadata for SceneList.Item.Value;
}

uint64_t assignWithCopy for SceneList.Item(uint64_t a1, uint64_t *a2)
{
  if ((uint64_t *)a1 != a2)
  {
    outlined destroy of SceneList.Item.Value(a1);
    switch(*((unsigned char *)a2 + 128))
    {
      case 1:
        *(void *)a1 = *a2;
        uint64_t v8 = a2[4];
        swift_retain();
        if (v8)
        {
          uint64_t v9 = a2[1];
          uint64_t v10 = a2[2];
          char v11 = *((unsigned char *)a2 + 24);
          outlined copy of Text.Storage(v9, v10, v11);
          *(void *)(a1 + 8) = v9;
          *(void *)(a1 + 16) = v10;
          *(unsigned char *)(a1 + 24) = v11;
          *(void *)(a1 + 32) = a2[4];
          swift_bridgeObjectRetain();
        }
        else
        {
          long long v35 = *(_OWORD *)(a2 + 3);
          *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 1);
          *(_OWORD *)(a1 + 24) = v35;
        }
        *(void *)(a1 + 40) = a2[5];
        uint64_t v36 = a2[6];
        if (v36)
        {
          uint64_t v37 = a2[7];
          *(void *)(a1 + 48) = v36;
          *(void *)(a1 + 56) = v37;
          swift_retain();
        }
        else
        {
          *(_OWORD *)(a1 + 48) = *((_OWORD *)a2 + 3);
        }
        *(unsigned char *)(a1 + 128) = 1;
        break;
      case 2:
        *(unsigned char *)a1 = *(unsigned char *)a2;
        *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 1);
        long long v12 = (_OWORD *)(a1 + 24);
        long long v13 = (long long *)(a2 + 3);
        uint64_t v14 = a2[6];
        if (v14)
        {
          *(void *)(a1 + 48) = v14;
          *(void *)(a1 + 56) = a2[7];
          (**(void (***)(_OWORD *, long long *))(v14 - 8))(v12, v13);
        }
        else
        {
          long long v38 = *v13;
          long long v39 = *(_OWORD *)(a2 + 5);
          *(void *)(a1 + 56) = a2[7];
          *long long v12 = v38;
          *(_OWORD *)(a1 + 40) = v39;
        }
        *(void *)(a1 + 64) = a2[8];
        *(void *)(a1 + 72) = a2[9];
        *(void *)(a1 + 80) = a2[10];
        *(void *)(a1 + 88) = a2[11];
        *(void *)(a1 + 96) = a2[12];
        uint64_t v40 = a2[13];
        uint64_t v41 = a2[14];
        char v42 = *((unsigned char *)a2 + 120);
        swift_retain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        outlined copy of SceneID(v40, v41, v42);
        *(void *)(a1 + 104) = v40;
        *(void *)(a1 + 112) = v41;
        *(unsigned char *)(a1 + 120) = v42;
        *(unsigned char *)(a1 + 128) = 2;
        break;
      case 3:
        *(void *)a1 = *a2;
        char v15 = 3;
        goto LABEL_21;
      case 4:
        *(void *)a1 = *a2;
        *(void *)(a1 + 8) = a2[1];
        *(unsigned char *)(a1 + 16) = *((unsigned char *)a2 + 16);
        *(void *)(a1 + 24) = a2[3];
        *(void *)(a1 + 32) = a2[4];
        *(unsigned char *)(a1 + 40) = *((unsigned char *)a2 + 40);
        *(unsigned char *)(a1 + 41) = *((unsigned char *)a2 + 41);
        *(void *)(a1 + 48) = a2[6];
        *(void *)(a1 + 56) = a2[7];
        long long v16 = *((_OWORD *)a2 + 4);
        *(unsigned char *)(a1 + 80) = *((unsigned char *)a2 + 80);
        *(_OWORD *)(a1 + 64) = v16;
        *(unsigned char *)(a1 + 128) = 4;
        swift_retain();
        swift_retain();
        swift_retain();
        swift_retain();
        goto LABEL_46;
      case 5:
        uint64_t v17 = *a2;
        uint64_t v18 = a2[1];
        char v19 = *((unsigned char *)a2 + 16);
        outlined copy of SceneID(*a2, v18, v19);
        *(void *)a1 = v17;
        *(void *)(a1 + 8) = v18;
        *(unsigned char *)(a1 + 16) = v19;
        if ((unint64_t)a2[4] >= 3)
        {
          *(void *)(a1 + 24) = a2[3];
          *(void *)(a1 + 32) = a2[4];
          swift_bridgeObjectRetain();
        }
        else
        {
          *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 3);
        }
        *(void *)(a1 + 40) = a2[5];
        char v15 = 5;
LABEL_21:
        *(unsigned char *)(a1 + 128) = v15;
        goto LABEL_22;
      case 6:
        *(void *)a1 = *a2;
        *(void *)(a1 + 8) = a2[1];
        *(void *)(a1 + 16) = a2[2];
        uint64_t v20 = a2[6];
        swift_bridgeObjectRetain();
        swift_retain();
        if (v20)
        {
          uint64_t v21 = a2[3];
          uint64_t v22 = a2[4];
          char v23 = *((unsigned char *)a2 + 40);
          outlined copy of Text.Storage(v21, v22, v23);
          *(void *)(a1 + 24) = v21;
          *(void *)(a1 + 32) = v22;
          *(unsigned char *)(a1 + 40) = v23;
          *(void *)(a1 + 48) = a2[6];
          swift_bridgeObjectRetain();
        }
        else
        {
          long long v43 = *(_OWORD *)(a2 + 5);
          *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 3);
          *(_OWORD *)(a1 + 40) = v43;
        }
        *(unsigned char *)(a1 + 128) = 6;
        break;
      case 7:
        *(void *)a1 = *a2;
        *(void *)(a1 + 8) = a2[1];
        *(void *)(a1 + 16) = a2[2];
        uint64_t v24 = a2[3];
        swift_bridgeObjectRetain();
        swift_retain();
        if (v24)
        {
          uint64_t v25 = a2[4];
          *(void *)(a1 + 24) = v24;
          *(void *)(a1 + 32) = v25;
          swift_retain();
          if (a2[8])
          {
LABEL_17:
            uint64_t v26 = a2[5];
            uint64_t v27 = a2[6];
            char v28 = *((unsigned char *)a2 + 56);
            outlined copy of Text.Storage(v26, v27, v28);
            *(void *)(a1 + 40) = v26;
            *(void *)(a1 + 48) = v27;
            *(unsigned char *)(a1 + 56) = v28;
            *(void *)(a1 + 64) = a2[8];
            swift_bridgeObjectRetain();
            goto LABEL_36;
          }
        }
        else
        {
          *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 3);
          if (a2[8]) {
            goto LABEL_17;
          }
        }
        long long v44 = *(_OWORD *)(a2 + 7);
        *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 5);
        *(_OWORD *)(a1 + 56) = v44;
LABEL_36:
        *(void *)(a1 + 72) = a2[9];
        uint64_t v45 = a2[10];
        swift_retain();
        if (v45)
        {
          uint64_t v46 = a2[11];
          *(void *)(a1 + 80) = v45;
          *(void *)(a1 + 88) = v46;
          swift_retain();
        }
        else
        {
          *(_OWORD *)(a1 + 80) = *((_OWORD *)a2 + 5);
        }
        uint64_t v47 = a2[12];
        if (v47)
        {
          uint64_t v48 = a2[13];
          *(void *)(a1 + 96) = v47;
          *(void *)(a1 + 104) = v48;
          swift_retain();
        }
        else
        {
          *(_OWORD *)(a1 + 96) = *((_OWORD *)a2 + 6);
        }
        *(void *)(a1 + 112) = a2[14];
        *(void *)(a1 + 120) = a2[15];
        *(unsigned char *)(a1 + 128) = 7;
LABEL_46:
        swift_bridgeObjectRetain();
        break;
      case 8:
        *(void *)a1 = *a2;
        *(void *)(a1 + 8) = a2[1];
        *(unsigned char *)(a1 + 16) = *((unsigned char *)a2 + 16);
        uint64_t v29 = a2[3];
        uint64_t v30 = a2[4];
        char v31 = *((unsigned char *)a2 + 40);
        swift_retain();
        swift_retain();
        outlined copy of Text.Storage(v29, v30, v31);
        *(void *)(a1 + 24) = v29;
        *(void *)(a1 + 32) = v30;
        *(unsigned char *)(a1 + 40) = v31;
        *(void *)(a1 + 48) = a2[6];
        *(void *)(a1 + 56) = a2[7];
        *(unsigned char *)(a1 + 128) = 8;
        swift_bridgeObjectRetain();
LABEL_22:
        swift_retain();
        break;
      default:
        *(void *)a1 = *a2;
        uint64_t v4 = a2[4];
        swift_retain();
        if (v4)
        {
          uint64_t v5 = a2[1];
          uint64_t v6 = a2[2];
          char v7 = *((unsigned char *)a2 + 24);
          outlined copy of Text.Storage(v5, v6, v7);
          *(void *)(a1 + 8) = v5;
          *(void *)(a1 + 16) = v6;
          *(unsigned char *)(a1 + 24) = v7;
          *(void *)(a1 + 32) = a2[4];
          swift_bridgeObjectRetain();
        }
        else
        {
          long long v32 = *(_OWORD *)(a2 + 3);
          *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 1);
          *(_OWORD *)(a1 + 24) = v32;
        }
        *(void *)(a1 + 40) = a2[5];
        uint64_t v33 = a2[6];
        if (v33)
        {
          uint64_t v34 = a2[7];
          *(void *)(a1 + 48) = v33;
          *(void *)(a1 + 56) = v34;
          swift_retain();
        }
        else
        {
          *(_OWORD *)(a1 + 48) = *((_OWORD *)a2 + 3);
        }
        *(unsigned char *)(a1 + 128) = 0;
        break;
    }
  }
  uint64_t v49 = a2[17];
  uint64_t v50 = a2[18];
  char v51 = *((unsigned char *)a2 + 152);
  outlined copy of SceneID(v49, v50, v51);
  uint64_t v52 = *(void *)(a1 + 136);
  uint64_t v53 = *(void *)(a1 + 144);
  char v54 = *(unsigned char *)(a1 + 152);
  *(void *)(a1 + 136) = v49;
  *(void *)(a1 + 144) = v50;
  *(unsigned char *)(a1 + 152) = v51;
  outlined consume of SceneID(v52, v53, v54);
  *(void *)(a1 + 160) = a2[20];
  *(void *)(a1 + 168) = a2[21];
  swift_retain();
  swift_release();
  *(void *)(a1 + 176) = a2[22];
  swift_retain();
  swift_release();
  *(unsigned char *)(a1 + 184) = *((unsigned char *)a2 + 184);
  *(void *)(a1 + 192) = a2[24];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 200) = a2[25];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 208) = *((unsigned char *)a2 + 208);
  long long v55 = *(_OWORD *)(a2 + 27);
  *(unsigned char *)(a1 + 232) = *((unsigned char *)a2 + 232);
  *(_OWORD *)(a1 + 216) = v55;
  long long v56 = *((_OWORD *)a2 + 15);
  *(unsigned char *)(a1 + 256) = *((unsigned char *)a2 + 256);
  *(_OWORD *)(a1 + 240) = v56;
  *(unsigned char *)(a1 + 257) = *((unsigned char *)a2 + 257);
  *(unsigned char *)(a1 + 258) = *((unsigned char *)a2 + 258);
  *(void *)(a1 + 264) = a2[33];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 272) = a2[34];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for SceneList.Item(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    outlined destroy of SceneList.Item.Value(a1);
    long long v4 = *(_OWORD *)(a2 + 112);
    *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
    *(_OWORD *)(a1 + 112) = v4;
    *(unsigned char *)(a1 + 128) = *(unsigned char *)(a2 + 128);
    long long v5 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 48) = v5;
    long long v6 = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 80) = v6;
    long long v7 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v7;
  }
  char v8 = *(unsigned char *)(a2 + 152);
  uint64_t v9 = *(void *)(a1 + 136);
  uint64_t v10 = *(void *)(a1 + 144);
  char v11 = *(unsigned char *)(a1 + 152);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(unsigned char *)(a1 + 152) = v8;
  outlined consume of SceneID(v9, v10, v11);
  uint64_t v12 = *(void *)(a2 + 168);
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  *(void *)(a1 + 168) = v12;
  swift_release();
  *(void *)(a1 + 176) = *(void *)(a2 + 176);
  swift_release();
  *(unsigned char *)(a1 + 184) = *(unsigned char *)(a2 + 184);
  *(void *)(a1 + 192) = *(void *)(a2 + 192);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 200) = *(void *)(a2 + 200);
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 208) = *(unsigned char *)(a2 + 208);
  *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 216);
  *(unsigned char *)(a1 + 232) = *(unsigned char *)(a2 + 232);
  *(_OWORD *)(a1 + 240) = *(_OWORD *)(a2 + 240);
  *(unsigned char *)(a1 + 256) = *(unsigned char *)(a2 + 256);
  *(_WORD *)(a1 + 257) = *(_WORD *)(a2 + 257);
  *(void *)(a1 + 264) = *(void *)(a2 + 264);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 272) = *(void *)(a2 + 272);
  swift_bridgeObjectRelease();
  return a1;
}

char *SceneList.allDocumentGroups()(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return (char *)MEMORY[0x1E4FBC860];
  }
  uint64_t v2 = a1 + 32;
  swift_bridgeObjectRetain();
  unsigned int v3 = (char *)MEMORY[0x1E4FBC860];
  do
  {
    outlined init with copy of SceneList.Item(v2, (uint64_t)v21);
    outlined init with copy of SceneList.Item.Value((uint64_t)v21, (uint64_t)v18);
    outlined destroy of SceneList.Item((uint64_t)v21);
    if (v20 == 2)
    {
      v16[4] = v18[4];
      v16[5] = v18[5];
      v17[0] = v19[0];
      *(_OWORD *)((char *)v17 + 9) = *(_OWORD *)((char *)v19 + 9);
      v16[0] = v18[0];
      v16[1] = v18[1];
      uint64_t v16[2] = v18[2];
      long long v16[3] = v18[3];
      outlined init with copy of IdentifiedDocumentGroupConfiguration((uint64_t)v16, (uint64_t)v14);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        unsigned int v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v3 + 2) + 1, 1, v3);
      }
      unint64_t v5 = *((void *)v3 + 2);
      unint64_t v4 = *((void *)v3 + 3);
      if (v5 >= v4 >> 1) {
        unsigned int v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v4 > 1), v5 + 1, 1, v3);
      }
      *((void *)v3 + 2) = v5 + 1;
      long long v6 = &v3[128 * v5];
      long long v7 = v14[0];
      long long v8 = v14[1];
      long long v9 = v14[3];
      *((_OWORD *)v6 + 4) = v14[2];
      *((_OWORD *)v6 + 5) = v9;
      *((_OWORD *)v6 + 2) = v7;
      *((_OWORD *)v6 + 3) = v8;
      long long v10 = v14[4];
      long long v11 = v14[5];
      long long v12 = v15[0];
      *(_OWORD *)(v6 + 137) = *(_OWORD *)((char *)v15 + 9);
      *((_OWORD *)v6 + 7) = v11;
      *((_OWORD *)v6 + 8) = v12;
      *((_OWORD *)v6 + 6) = v10;
      outlined destroy of IdentifiedDocumentGroupConfiguration((uint64_t)v16);
    }
    else
    {
      outlined destroy of SceneList.Item.Value((uint64_t)v18);
    }
    v2 += 280;
    --v1;
  }
  while (v1);
  swift_bridgeObjectRelease();
  return v3;
}

void *SceneList.windowGroup(presenting:)@<X0>(void *result@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  long long v12 = result;
  uint64_t v4 = *(void *)(a2 + 16);
  if (v4)
  {
    uint64_t v5 = a2 + 32;
    swift_bridgeObjectRetain();
    while (1)
    {
      outlined init with copy of SceneList.Item(v5, (uint64_t)__src);
      outlined init with copy of SceneList.Item.Value((uint64_t)__src, (uint64_t)v13);
      if (v18)
      {
        outlined destroy of SceneList.Item((uint64_t)__src);
        outlined destroy of SceneList.Item.Value((uint64_t)v13);
      }
      else
      {
        uint64_t v6 = v13[1];
        uint64_t v7 = v13[2];
        char v8 = v14;
        uint64_t v10 = v15;
        long long v9 = v16;
        uint64_t v11 = v17;
        swift_release();
        outlined consume of Text?(v6, v7, v8, v10);
        outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v11);
        if (v9 && v9 == v12)
        {
          swift_bridgeObjectRelease();
          return memcpy(a3, __src, 0x118uLL);
        }
        outlined destroy of SceneList.Item((uint64_t)__src);
      }
      v5 += 280;
      if (!--v4)
      {
        uint64_t result = (void *)swift_bridgeObjectRelease();
        break;
      }
    }
  }
  *((void *)a3 + 34) = 0;
  a3[15] = 0u;
  a3[16] = 0u;
  a3[13] = 0u;
  a3[14] = 0u;
  a3[11] = 0u;
  a3[12] = 0u;
  a3[9] = 0u;
  a3[10] = 0u;
  a3[7] = 0u;
  a3[8] = 0u;
  a3[5] = 0u;
  a3[6] = 0u;
  a3[3] = 0u;
  a3[4] = 0u;
  a3[1] = 0u;
  a3[2] = 0u;
  *a3 = 0u;
  return result;
}

void *SceneList.windowGroup<A>(id:presenting:)@<X0>(void *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  uint64_t v21 = result;
  uint64_t v5 = *(void *)(a4 + 16);
  if (!v5)
  {
LABEL_20:
    a5[34] = 0;
    *((_OWORD *)a5 + 15) = 0u;
    *((_OWORD *)a5 + 16) = 0u;
    *((_OWORD *)a5 + 13) = 0u;
    *((_OWORD *)a5 + 14) = 0u;
    *((_OWORD *)a5 + 11) = 0u;
    *((_OWORD *)a5 + 12) = 0u;
    *((_OWORD *)a5 + 9) = 0u;
    *((_OWORD *)a5 + 10) = 0u;
    *((_OWORD *)a5 + 7) = 0u;
    *((_OWORD *)a5 + 8) = 0u;
    *((_OWORD *)a5 + 5) = 0u;
    *((_OWORD *)a5 + 6) = 0u;
    *((_OWORD *)a5 + 3) = 0u;
    *((_OWORD *)a5 + 4) = 0u;
    *((_OWORD *)a5 + 1) = 0u;
    *((_OWORD *)a5 + 2) = 0u;
    *(_OWORD *)a5 = 0u;
    return result;
  }
  __dst = a5;
  uint64_t v6 = a4 + 32;
  swift_bridgeObjectRetain();
  while (1)
  {
    outlined init with copy of SceneList.Item(v6, (uint64_t)__src);
    outlined init with copy of SceneList.Item.Value((uint64_t)__src, (uint64_t)v26);
    if (!v31) {
      break;
    }
    outlined destroy of SceneList.Item((uint64_t)__src);
    outlined destroy of SceneList.Item.Value((uint64_t)v26);
LABEL_4:
    v6 += 280;
    if (!--v5)
    {
      uint64_t result = (void *)swift_bridgeObjectRelease();
      a5 = __dst;
      goto LABEL_20;
    }
  }
  uint64_t v7 = v26[1];
  uint64_t v8 = v26[2];
  char v9 = v27;
  uint64_t v10 = v28;
  uint64_t v11 = v29;
  uint64_t v12 = v30;
  outlined init with copy of SceneList.Item((uint64_t)__src, (uint64_t)v26);
  if (a2)
  {
    uint64_t v22 = v12;
    uint64_t v14 = v32;
    uint64_t v13 = v33;
    if (v34)
    {
      uint64_t v24 = _typeName(_:qualified:)();
      uint64_t v25 = v15;
      v16._countAndFlagsBits = 45;
      v16._object = (void *)0xE100000000000000;
      String.append(_:)(v16);
      v17._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v17);
      swift_bridgeObjectRelease();
      uint64_t v14 = v24;
      uint64_t v13 = v25;
    }
    else
    {
      swift_bridgeObjectRetain();
    }
    if ((void *)v14 != v21 || v13 != a2)
    {
      char v18 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      outlined destroy of SceneList.Item((uint64_t)v26);
      swift_release();
      outlined consume of Text?(v7, v8, v9, v10);
      outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v22);
      if ((v18 & 1) == 0 || !v11) {
        goto LABEL_18;
      }
      goto LABEL_17;
    }
    swift_bridgeObjectRelease();
    uint64_t v12 = v22;
  }
  outlined destroy of SceneList.Item((uint64_t)v26);
  swift_release();
  outlined consume of Text?(v7, v8, v9, v10);
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v12);
  if (!v11) {
    goto LABEL_18;
  }
LABEL_17:
  if (v11 != a3)
  {
LABEL_18:
    outlined destroy of SceneList.Item((uint64_t)__src);
    goto LABEL_4;
  }
  swift_bridgeObjectRelease();
  return memcpy(__dst, __src, 0x118uLL);
}

uint64_t protocol witness for static PreferenceKey.defaultValue.getter in conformance SceneList.Key@<X0>(void *a1@<X8>)
{
  if (one-time initialization token for defaultValue != -1) {
    swift_once();
  }
  *a1 = static SceneList.Key.defaultValue;

  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for static PreferenceKey.reduce(value:nextValue:) in conformance SceneList.Key(uint64_t a1, void (*a2)(uint64_t *__return_ptr))
{
  a2(&v3);
  return specialized Array.append<A>(contentsOf:)(v3);
}

uint64_t protocol witness for Identifiable.id.getter in conformance SceneList.Item@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *(void *)(v1 + 136);
  uint64_t v3 = *(void *)(v1 + 144);
  char v4 = *(unsigned char *)(v1 + 152);
  *(void *)a1 = v2;
  *(void *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 16) = v4;
  return outlined copy of SceneID(v2, v3, v4);
}

uint64_t protocol witness for Identifiable.id.getter in conformance SceneList.Item.Summary@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *(void *)v1;
  uint64_t v3 = *(void *)(v1 + 8);
  char v4 = *(unsigned char *)(v1 + 16);
  *(void *)a1 = *(void *)v1;
  *(void *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 16) = v4;
  return outlined copy of SceneID(v2, v3, v4);
}

uint64_t specialized SceneList.modify(_:)(uint64_t result)
{
  uint64_t v1 = *(char **)result;
  uint64_t v2 = *(void *)(*(void *)result + 16);
  if (v2)
  {
    uint64_t v3 = (void *)result;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
LABEL_9:
    }
      uint64_t v1 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v1);
    unint64_t v4 = 0;
    unint64_t v5 = *((void *)v1 + 2);
    uint64_t v6 = 289;
    do
    {
      if (v4 >= v5)
      {
        __break(1u);
        goto LABEL_9;
      }
      ++v4;
      uint64_t result = AGGraphGetValue();
      v1[v6] = *(unsigned char *)result;
      v6 += 280;
    }
    while (v2 != v4);
    *uint64_t v3 = v1;
  }
  return result;
}

ValueMetadata *type metadata accessor for SceneList.Key()
{
  return &type metadata for SceneList.Key;
}

uint64_t getEnumTagSinglePayload for SceneList.Item.Kind(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xF6) {
    goto LABEL_17;
  }
  if (a2 + 10 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 10) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 10;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 10;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 10;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0xB;
  int v8 = v6 - 11;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for SceneList.Item.Kind(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 10 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 10) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF6) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF5)
  {
    unsigned int v6 = ((a2 - 246) >> 8) + 1;
    *uint64_t result = a2 + 10;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x188293BB4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 10;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SceneList.Item.Kind()
{
  return &type metadata for SceneList.Item.Kind;
}

ValueMetadata *type metadata accessor for SceneList.Item.Options()
{
  return &type metadata for SceneList.Item.Options;
}

unint64_t lazy protocol witness table accessor for type SceneList.Item.Options and conformance SceneList.Item.Options()
{
  unint64_t result = lazy protocol witness table cache variable for type SceneList.Item.Options and conformance SceneList.Item.Options;
  if (!lazy protocol witness table cache variable for type SceneList.Item.Options and conformance SceneList.Item.Options)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SceneList.Item.Options and conformance SceneList.Item.Options);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SceneList.Item.Options and conformance SceneList.Item.Options;
  if (!lazy protocol witness table cache variable for type SceneList.Item.Options and conformance SceneList.Item.Options)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SceneList.Item.Options and conformance SceneList.Item.Options);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SceneList.Item.Options and conformance SceneList.Item.Options;
  if (!lazy protocol witness table cache variable for type SceneList.Item.Options and conformance SceneList.Item.Options)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SceneList.Item.Options and conformance SceneList.Item.Options);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SceneList.Item.Options and conformance SceneList.Item.Options;
  if (!lazy protocol witness table cache variable for type SceneList.Item.Options and conformance SceneList.Item.Options)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SceneList.Item.Options and conformance SceneList.Item.Options);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type SceneList.Item.Kind and conformance SceneList.Item.Kind()
{
  unint64_t result = lazy protocol witness table cache variable for type SceneList.Item.Kind and conformance SceneList.Item.Kind;
  if (!lazy protocol witness table cache variable for type SceneList.Item.Kind and conformance SceneList.Item.Kind)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SceneList.Item.Kind and conformance SceneList.Item.Kind);
  }
  return result;
}

void HoverEffectContent.resizeShape<A>(_:)()
{
}

uint64_t sub_188293DC8(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

void HoverEffectContent._resizeShape<A>(_:)()
{
}

uint64_t View.presentationBackground<A>(_:)()
{
  return View.containerBackground<A>(_:for:)();
}

uint64_t View.presentationBackground<A>(alignment:content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v10 = 0x8000000000000003;
  return View.containerBackground<A>(for:alignment:content:)(&v10, a1, a2, a3, a4, a5, a6, a7, a9, a8);
}

uint64_t View.presentationBackground()()
{
  return View.containerBackground<A>(_:for:)();
}

uint64_t sub_188293EAC()
{
  return swift_getWitnessTable();
}

uint64_t sub_188293F70()
{
  return swift_getWitnessTable();
}

uint64_t sub_188293FD8()
{
  return swift_getWitnessTable();
}

uint64_t static _ArchivableViewModifier.registerDecoder()()
{
  return static ViewDecoders.registerDecodableFactoryType<A, B>(_:forType:)();
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance HandGestureShortcutInteractiveControl.HandGestureShortcutPreferenceWriter(unsigned int *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance HandGestureShortcutInteractiveControl.HandGestureShortcutPreferenceWriter(a1, a2, a3, a4, a5, a6, (uint64_t (*)(uint64_t, _OWORD *))specialized static _ArchivableViewModifier.makeArchivableView(modifier:inputs:body:));
}

double static _ArchivableViewModifier._makeView(modifier:inputs:body:)@<D0>(int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(uint64_t *__return_ptr, uint64_t, uint64_t *)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, double *a7@<X8>)
{
  uint64_t v7 = *(void *)a2;
  int v8 = *(_DWORD *)(a2 + 8);
  uint64_t v9 = *(void *)(a2 + 16);
  int v10 = *(_DWORD *)(a2 + 80);
  int v21 = *a1;
  uint64_t v13 = v7;
  int v14 = v8;
  uint64_t v15 = v9;
  long long v11 = *(_OWORD *)(a2 + 40);
  long long v16 = *(_OWORD *)(a2 + 24);
  long long v17 = v11;
  long long v18 = *(_OWORD *)(a2 + 56);
  uint64_t v19 = *(void *)(a2 + 72);
  int v20 = v10;
  return static _ArchivableViewModifier.makeArchivableView(modifier:inputs:body:)(&v21, &v13, a3, a4, a5, a6, a7);
}

uint64_t static _ArchivableViewModifier._makeViewList(modifier:inputs:body:)()
{
  return static ViewModifier.makeMultiViewList(modifier:inputs:body:)();
}

uint64_t static _ArchivableViewModifier._viewListCount(inputs:body:)(long long *a1, uint64_t (*a2)(long long *))
{
  int v2 = *((_DWORD *)a1 + 4);
  uint64_t v3 = *((void *)a1 + 3);
  long long v5 = *a1;
  int v6 = v2;
  uint64_t v7 = v3;
  return a2(&v5);
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance ArchivablePlaybackButtonViewModifier(unsigned int *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance HandGestureShortcutInteractiveControl.HandGestureShortcutPreferenceWriter(a1, a2, a3, a4, a5, a6, (uint64_t (*)(uint64_t, _OWORD *))specialized static _ArchivableViewModifier.makeArchivableView(modifier:inputs:body:));
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance InvalidatableContentModifier(unsigned int *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance HandGestureShortcutInteractiveControl.HandGestureShortcutPreferenceWriter(a1, a2, a3, a4, a5, a6, (uint64_t (*)(uint64_t, _OWORD *))specialized static _ArchivableViewModifier.makeArchivableView(modifier:inputs:body:));
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance ArchivableToggleAppIntentModifier(unsigned int *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance HandGestureShortcutInteractiveControl.HandGestureShortcutPreferenceWriter(a1, a2, a3, a4, a5, a6, (uint64_t (*)(uint64_t, _OWORD *))specialized static _ArchivableViewModifier.makeArchivableView(modifier:inputs:body:));
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance ArchivableAccessibilityViewModifier(unsigned int *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance HandGestureShortcutInteractiveControl.HandGestureShortcutPreferenceWriter(a1, a2, a3, a4, a5, a6, (uint64_t (*)(uint64_t, _OWORD *))specialized static _ArchivableViewModifier.makeArchivableView(modifier:inputs:body:));
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance ArchivableLinkModifier(unsigned int *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance HandGestureShortcutInteractiveControl.HandGestureShortcutPreferenceWriter(a1, a2, a3, a4, a5, a6, (uint64_t (*)(uint64_t, _OWORD *))specialized static _ArchivableViewModifier.makeArchivableView(modifier:inputs:body:));
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance ArchivableButtonAppIntentModifier(unsigned int *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance HandGestureShortcutInteractiveControl.HandGestureShortcutPreferenceWriter(a1, a2, a3, a4, a5, a6, (uint64_t (*)(uint64_t, _OWORD *))specialized static _ArchivableViewModifier.makeArchivableView(modifier:inputs:body:));
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance ArchivableAccessibilityActionModifier(unsigned int *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance HandGestureShortcutInteractiveControl.HandGestureShortcutPreferenceWriter(a1, a2, a3, a4, a5, a6, (uint64_t (*)(uint64_t, _OWORD *))specialized static _ArchivableViewModifier.makeArchivableView(modifier:inputs:body:));
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance HandGestureShortcutInteractiveControl.HandGestureShortcutPreferenceWriter(unsigned int *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t (*a7)(uint64_t, _OWORD *))
{
  uint64_t v7 = *a1;
  long long v8 = *(_OWORD *)(a2 + 48);
  void v11[2] = *(_OWORD *)(a2 + 32);
  void v11[3] = v8;
  v11[4] = *(_OWORD *)(a2 + 64);
  int v12 = *(_DWORD *)(a2 + 80);
  long long v9 = *(_OWORD *)(a2 + 16);
  v11[0] = *(_OWORD *)a2;
  v11[1] = v9;
  return a7(v7, v11);
}

double static _ArchivableViewModifier.makeArchivableView(modifier:inputs:body:)@<D0>(int *a1@<X0>, uint64_t *a2@<X1>, void (*a3)(uint64_t *__return_ptr, uint64_t, uint64_t *)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, double *a7@<X8>)
{
  void (*v38)(uint64_t *__return_ptr, uint64_t, uint64_t *);
  uint64_t v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42;
  int v43;
  long long v44;
  unsigned int v45;
  unsigned int v46;
  _DWORD v47[6];
  char v48;
  uint64_t v49;
  double v50;
  uint64_t v51;
  long long v52;
  long long v53;
  uint64_t v54;
  uint64_t v55;
  long long v56;
  unint64_t v57;
  int v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  long long v62;
  uint64_t v63;
  uint64_t v64;
  long long v65;
  unint64_t v66;
  int v67;
  uint64_t v68;

  long long v39 = a4;
  long long v38 = a3;
  uint64_t v68 = *MEMORY[0x1E4F143B8];
  int v10 = *a1;
  uint64_t v11 = *a2;
  long long v43 = *((_DWORD *)a2 + 2);
  uint64_t v12 = a2[2];
  long long v44 = *(_OWORD *)(a2 + 3);
  uint64_t v13 = a2[5];
  uint64_t v14 = a2[6];
  unsigned int v15 = *((_DWORD *)a2 + 14);
  uint64_t v40 = *((_DWORD *)a2 + 15);
  uint64_t v45 = *((_DWORD *)a2 + 16);
  uint64_t v41 = *((_DWORD *)a2 + 17);
  uint64_t v46 = *((_DWORD *)a2 + 18);
  int v16 = *((_DWORD *)a2 + 20);
  char v42 = *((_DWORD *)a2 + 19);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  PropertyList.subscript.getter();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  if (v59)
  {
    int v33 = v10;
    uint64_t v34 = a6;
    uint64_t v35 = a5;
    uint64_t v36 = a7;
    uint64_t v59 = v11;
    uint64_t v60 = v43;
    uint64_t v61 = v12;
    uint64_t v62 = v44;
    uint64_t v63 = v13;
    uint64_t v64 = v14;
    *(void *)&long long v65 = __PAIR64__(v40, v15);
    *((void *)&v65 + 1) = __PAIR64__(v41, v45);
    long long v66 = __PAIR64__(v42, v46);
    uint64_t v67 = v16;
    int v37 = v16;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    _ViewInputs.animatedPosition()();
    _ViewInputs.containerPosition.setter();
    char v51 = v11;
    LODWORD(v52) = v43;
    *((void *)&v52 + 1) = v12;
    uint64_t v53 = v44;
    char v54 = v13;
    long long v55 = v14;
    long long v56 = v65;
    long long v57 = __PAIR64__(v42, v46);
    long long v58 = v16;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    uint64_t v18 = swift_bridgeObjectRetain();
    v38(&v49, v18, &v51);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    char v51 = v14;
    LODWORD(v52) = v15;
    if (PreferencesInputs.contains<A>(_:includeHostPreferences:)())
    {
      _DisplayList_Identity.init()();
      LODWORD(v38) = v51;
      char v51 = v11;
      LODWORD(v52) = v43;
      *((void *)&v52 + 1) = v12;
      uint64_t v53 = v44;
      char v54 = v13;
      long long v55 = v14;
      *(void *)&long long v56 = __PAIR64__(v40, v15);
      *((void *)&v56 + 1) = __PAIR64__(v41, v45);
      long long v57 = __PAIR64__(v42, v46);
      long long v58 = v37;
      v47[0] = v38;
      _ViewInputs.pushIdentity(_:)();
      LODWORD(v51) = v33;
      type metadata accessor for _GraphValue();
      int v33 = _GraphValue.value.getter();
      char v51 = v11;
      LODWORD(v52) = v43;
      *((void *)&v52 + 1) = v12;
      uint64_t v53 = v44;
      char v54 = v13;
      long long v55 = v14;
      *(void *)&long long v56 = __PAIR64__(v40, v15);
      *((void *)&v56 + 1) = __PAIR64__(v41, v45);
      LODWORD(v39) = v15;
      long long v57 = __PAIR64__(v42, v46);
      long long v58 = v37;
      int v32 = _ViewInputs.animatedPosition()();
      char v51 = v11;
      LODWORD(v52) = v43;
      *((void *)&v52 + 1) = v12;
      uint64_t v53 = v44;
      char v54 = v13;
      long long v55 = v14;
      *(void *)&long long v56 = __PAIR64__(v40, v15);
      *((void *)&v56 + 1) = __PAIR64__(v41, v45);
      long long v57 = __PAIR64__(v42, v46);
      long long v58 = v37;
      int v31 = _ViewInputs.animatedSize()();
      char v51 = v11;
      LODWORD(v52) = v43;
      *((void *)&v52 + 1) = v12;
      uint64_t v53 = v44;
      char v54 = v13;
      long long v55 = v14;
      *(void *)&long long v56 = __PAIR64__(v40, v15);
      *((void *)&v56 + 1) = __PAIR64__(v41, v45);
      long long v57 = __PAIR64__(v42, v46);
      long long v58 = v37;
      int v19 = _ViewInputs.containerPosition.getter();
      char v51 = v49;
      *(double *)&uint64_t v52 = v50;
      uint64_t v20 = _ViewOutputs.subscript.getter();
      if ((v20 & 0x100000000) != 0) {
        int v21 = *MEMORY[0x1E4F4E7A0];
      }
      else {
        int v21 = v20;
      }
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      PropertyList.subscript.getter();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      uint64_t v22 = swift_release();
      v47[0] = v38;
      v47[1] = v33;
      v47[2] = v32;
      v47[3] = v31;
      v47[4] = v19;
      v47[5] = v21;
      uint64_t v48 = v51;
      *(double *)&long long v23 = MEMORY[0x1F4188790](v22);
      char v51 = v35;
      uint64_t v52 = v23;
      *(void *)&uint64_t v53 = v24;
      uint64_t v29 = type metadata accessor for ArchivableDisplayList();
      uint64_t WitnessTable = swift_getWitnessTable();
      type metadata accessor for Attribute<DisplayList>();
      _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v47, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TA_20, (uint64_t)&v28, v29, MEMORY[0x1E4FBC248], v25, MEMORY[0x1E4FBC278], v26);
      LOBYTE(v51) = 0;
      _ViewOutputs.subscript.setter();
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    uint64_t v27 = v36;
    *(void *)uint64_t v36 = v49;
    double result = v50;
    v27[1] = v50;
  }
  else
  {
    LODWORD(v51) = v10;
    uint64_t v59 = v11;
    uint64_t v60 = v43;
    uint64_t v61 = v12;
    uint64_t v62 = v44;
    uint64_t v63 = v13;
    uint64_t v64 = v14;
    *(void *)&long long v65 = __PAIR64__(v40, v15);
    *((void *)&v65 + 1) = __PAIR64__(v41, v45);
    long long v66 = __PAIR64__(v42, v46);
    uint64_t v67 = v16;
    static ViewModifier.makeView(modifier:inputs:body:)();
  }
  return result;
}

uint64_t type metadata completion function for ArchivableFactory()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for ArchivableFactory(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  unsigned int v4 = a1;
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  int v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0 || ((((v6 + 3) & 0xFFFFFFFFFFFFFFFCLL) + 11) & 0xFFFFFFFFFFFFFFF8) + 16 > 0x18)
  {
    uint64_t v9 = *a2;
    *unsigned int v4 = *a2;
    unsigned int v4 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
    swift_retain();
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    int v10 = (_DWORD *)(((unint64_t)v4 + v6 + 3) & 0xFFFFFFFFFFFFFFFCLL);
    uint64_t v11 = (_DWORD *)(((unint64_t)a2 + v6 + 3) & 0xFFFFFFFFFFFFFFFCLL);
    *int v10 = *v11;
    *(_OWORD *)(((unint64_t)v10 + 11) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v11 + 11) & 0xFFFFFFFFFFFFFFF8);
  }
  return v4;
}

uint64_t initializeWithCopy for ArchivableFactory(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 16;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 48) + 3;
  int v7 = (_DWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFFCLL);
  long long v8 = (_DWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFFCLL);
  *int v7 = *v8;
  *(_OWORD *)(((unint64_t)v7 + 11) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v8 + 11) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

uint64_t assignWithCopy for ArchivableFactory(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 24;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 40) + 3;
  int v7 = (_DWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFFCLL);
  long long v8 = (_DWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFFCLL);
  *int v7 = *v8;
  uint64_t v9 = (void *)(((unint64_t)v7 + 11) & 0xFFFFFFFFFFFFFFF8);
  int v10 = (void *)(((unint64_t)v8 + 11) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v9 = *v10;
  v9[1] = v10[1];
  return a1;
}

uint64_t initializeWithTake for ArchivableFactory(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 32;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 32) + 3;
  int v7 = (_DWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFFCLL);
  long long v8 = (_DWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFFCLL);
  *int v7 = *v8;
  *(_OWORD *)(((unint64_t)v7 + 11) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v8 + 11) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

uint64_t assignWithTake for ArchivableFactory(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 40;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 24) + 3;
  int v7 = (_DWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFFCLL);
  long long v8 = (_DWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFFCLL);
  *int v7 = *v8;
  uint64_t v9 = (void *)(((unint64_t)v7 + 11) & 0xFFFFFFFFFFFFFFF8);
  int v10 = (void *)(((unint64_t)v8 + 11) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v9 = *v10;
  v9[1] = v10[1];
  return a1;
}

uint64_t getEnumTagSinglePayload for ArchivableFactory(_DWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  if (!a2) {
    return 0;
  }
  if (v5 < a2)
  {
    unint64_t v6 = ((((*(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) + 3) & 0xFFFFFFFFFFFFFFFCLL) + 11) & 0xFFFFFFFFFFFFFFF8)
       + 16;
    unsigned int v7 = a2 - v5;
    uint64_t v8 = v6 & 0xFFFFFFF8;
    if ((v6 & 0xFFFFFFF8) != 0) {
      unsigned int v9 = 2;
    }
    else {
      unsigned int v9 = v7 + 1;
    }
    if (v9 >= 0x10000) {
      unsigned int v10 = 4;
    }
    else {
      unsigned int v10 = 2;
    }
    if (v9 < 0x100) {
      unsigned int v10 = 1;
    }
    if (v9 >= 2) {
      uint64_t v11 = v10;
    }
    else {
      uint64_t v11 = 0;
    }
    switch(v11)
    {
      case 1:
        int v12 = *((unsigned __int8 *)a1 + v6);
        if (!v12) {
          break;
        }
        goto LABEL_18;
      case 2:
        int v12 = *(unsigned __int16 *)((char *)a1 + v6);
        if (v12) {
          goto LABEL_18;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x188295178);
      case 4:
        int v12 = *(_DWORD *)((char *)a1 + v6);
        if (!v12) {
          break;
        }
LABEL_18:
        int v13 = v12 - 1;
        if (v8)
        {
          int v13 = 0;
          LODWORD(v8) = *a1;
        }
        return v5 + (v8 | v13) + 1;
      default:
        break;
    }
  }
  if (v5) {
    return (*(uint64_t (**)(void))(v4 + 48))();
  }
  else {
    return 0;
  }
}

void storeEnumTagSinglePayload for ArchivableFactory(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = ((((*(void *)(v6 + 64) + 3) & 0xFFFFFFFFFFFFFFFCLL) + 11) & 0xFFFFFFFFFFFFFFF8) + 16;
  if (v7 >= a3)
  {
    int v12 = 0;
    int v13 = a2 - v7;
    if (a2 <= v7)
    {
LABEL_14:
      switch(v12)
      {
        case 1:
          a1[v8] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_27;
        case 2:
          *(_WORD *)&a1[v8] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_27;
        case 3:
          goto LABEL_34;
        case 4:
          *(_DWORD *)&a1[v8] = 0;
          goto LABEL_26;
        default:
LABEL_26:
          if (a2)
          {
LABEL_27:
            int v16 = *(void (**)(void))(v6 + 56);
            v16();
          }
          break;
      }
      return;
    }
  }
  else
  {
    unsigned int v9 = a3 - v7;
    if (((((*(_DWORD *)(v6 + 64) + 3) & 0xFFFFFFFC) + 11) & 0xFFFFFFF8) == 0xFFFFFFF0) {
      unsigned int v10 = v9 + 1;
    }
    else {
      unsigned int v10 = 2;
    }
    if (v10 >= 0x10000) {
      int v11 = 4;
    }
    else {
      int v11 = 2;
    }
    if (v10 < 0x100) {
      int v11 = 1;
    }
    if (v10 >= 2) {
      int v12 = v11;
    }
    else {
      int v12 = 0;
    }
    int v13 = a2 - v7;
    if (a2 <= v7) {
      goto LABEL_14;
    }
  }
  if (((((*(_DWORD *)(v6 + 64) + 3) & 0xFFFFFFFC) + 11) & 0xFFFFFFF8) == 0xFFFFFFF0) {
    int v14 = v13;
  }
  else {
    int v14 = 1;
  }
  if (((((*(_DWORD *)(v6 + 64) + 3) & 0xFFFFFFFC) + 11) & 0xFFFFFFF8) != 0xFFFFFFF0)
  {
    unsigned int v15 = ~v7 + a2;
    bzero(a1, v8);
    *(_DWORD *)a1 = v15;
  }
  switch(v12)
  {
    case 1:
      a1[v8] = v14;
      break;
    case 2:
      *(_WORD *)&a1[v8] = v14;
      break;
    case 3:
LABEL_34:
      __break(1u);
      JUMPOUT(0x188295340);
    case 4:
      *(_DWORD *)&a1[v8] = v14;
      break;
    default:
      return;
  }
}

uint64_t ArchivableDisplayList.content.getter@<X0>(uint64_t a1@<X8>)
{
  if (*(_DWORD *)(v1 + 20) == *MEMORY[0x1E4F4E7A0])
  {
    uint64_t result = 0;
    *(unsigned char *)(a1 + 10) = 0;
    *(_WORD *)(a1 + 8) = 0;
  }
  else
  {
    uint64_t Value = AGGraphGetValue();
    char v5 = *(unsigned char *)(Value + 10);
    *(_WORD *)(a1 + 8) = *(_WORD *)(Value + 8);
    *(unsigned char *)(a1 + 10) = v5;
    uint64_t result = swift_bridgeObjectRetain();
  }
  *(void *)a1 = result;
  return result;
}

uint64_t ArchivableDisplayList.value.getter@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v39 = a2;
  uint64_t v4 = a1[2];
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](a1);
  unsigned int v7 = (char *)&v32 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  unsigned int v8 = v2[1];
  unsigned int v9 = v2[2];
  unsigned int v10 = v2[3];
  LODWORD(v6) = *((unsigned __int8 *)v2 + 24);
  unsigned int v37 = *v2;
  *(void *)&long long v50 = __PAIR64__(v8, v37);
  unsigned int v33 = v9;
  *((void *)&v50 + 1) = __PAIR64__(v10, v9);
  *(void *)&long long v11 = *((void *)v2 + 2);
  long long v35 = v11;
  *(void *)&long long v51 = v11;
  int v38 = v6;
  BYTE8(v51) = v6;
  ArchivableDisplayList.content.getter((uint64_t)&v40);
  if ((void)v40)
  {
    uint64_t v36 = v40;
    int v34 = WORD4(v40) | (BYTE10(v40) << 16);
    int v12 = BYTE10(v40);
  }
  else
  {
    DisplayList.init()();
    uint64_t v36 = v50;
    int v34 = WORD4(v50);
    int v12 = BYTE10(v50);
  }
  HIDWORD(v32) = v12;
  int v13 = (uint64_t *)swift_allocObject();
  uint64_t Value = AGGraphGetValue();
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, Value, v4);
  unsigned int v15 = (long long *)AGGraphGetValue();
  long long v16 = v15[1];
  long long v50 = *v15;
  long long v51 = v16;
  double v17 = MEMORY[0x18C114450]();
  uint64_t v19 = v18;
  uint64_t v21 = a1[3];
  uint64_t v20 = a1[4];
  uint64_t v22 = a1[5];
  *(void *)&long long v50 = v4;
  *((void *)&v50 + 1) = v21;
  *(void *)&long long v51 = v20;
  *((void *)&v51 + 1) = v22;
  void v13[5] = type metadata accessor for ArchivableFactory();
  v13[6] = swift_getWitnessTable();
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v13 + 2);
  (*(void (**)(uint64_t *, char *, uint64_t))(v5 + 32))(boxed_opaque_existential_1, v7, v4);
  *(void *)&long long v50 = v4;
  *((void *)&v50 + 1) = v21;
  *(void *)&long long v51 = v20;
  *((void *)&v51 + 1) = v22;
  uint64_t v24 = type metadata accessor for ArchivableFactory();
  LODWORD(v20) = v37;
  *(_DWORD *)((char *)boxed_opaque_existential_1 + *(int *)(v24 + 52)) = v37;
  uint64_t v25 = (double *)((char *)boxed_opaque_existential_1 + *(int *)(v24 + 56));
  *uint64_t v25 = v17;
  *((void *)v25 + 1) = v19;
  long long v50 = *(_OWORD *)AGGraphGetValue();
  MEMORY[0x18C10C240]();
  long long v50 = *(_OWORD *)AGGraphGetValue();
  MEMORY[0x18C10C240]();
  *(void *)&long long v40 = v13;
  *((void *)&v40 + 1) = 0x4000000C00000000;
  *(void *)&long long v41 = v36;
  BYTE10(v41) = BYTE4(v32);
  WORD4(v41) = v34;
  uint64_t v26 = (long long *)AGGraphGetValue();
  long long v27 = v26[1];
  long long v50 = *v26;
  long long v51 = v27;
  uint64_t v28 = swift_retain();
  MEMORY[0x18C114450](v28);
  int v49 = v20;
  DisplayList.Version.init(forUpdate:)();
  DisplayList.Item.init(_:frame:identity:version:)();
  LOBYTE(v40) = v38;
  DisplayList.Item.canonicalize(options:)();
  uint64_t v29 = v53;
  unint64_t v30 = v54;
  long long v40 = v50;
  long long v41 = v51;
  uint64_t v42 = v52;
  uint64_t v43 = v53;
  unint64_t v44 = v54;
  uint64_t v45 = v55;
  char v47 = v57;
  __int16 v46 = v56;
  int v48 = v58;
  outlined copy of DisplayList.Item.Value(v53, v54);
  DisplayList.init(_:)();
  swift_release();
  return outlined consume of DisplayList.Item.Value(v29, v30);
}

uint64_t ArchivableFactory.CodingKeys.stringValue.getter(char a1)
{
  if (!a1) {
    return 0x7265696669646F6DLL;
  }
  if (a1 == 1) {
    return 0x797469746E656469;
  }
  return 1702521203;
}

uint64_t ArchivableFactory.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v31 = a6;
  uint64_t v33 = *(void *)(a2 - 8);
  MEMORY[0x1F4188790](a1);
  long long v35 = (char *)&v29 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)&long long v39 = v12;
  *((void *)&v39 + 1) = v13;
  uint64_t v40 = v14;
  uint64_t v41 = v15;
  type metadata accessor for ArchivableFactory.CodingKeys();
  swift_getWitnessTable();
  uint64_t v37 = type metadata accessor for KeyedDecodingContainer();
  uint64_t v32 = *(void *)(v37 - 8);
  MEMORY[0x1F4188790](v37);
  double v17 = (char *)&v29 - v16;
  *(void *)&long long v39 = a2;
  *((void *)&v39 + 1) = a3;
  uint64_t v34 = a3;
  uint64_t v40 = a4;
  uint64_t v41 = a5;
  uint64_t v18 = type metadata accessor for ArchivableFactory();
  uint64_t v30 = *(void *)(v18 - 8);
  MEMORY[0x1F4188790](v18);
  uint64_t v20 = (char *)&v29 - v19;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  uint64_t v36 = v17;
  uint64_t v21 = (uint64_t)v38;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v21) {
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  int v38 = a1;
  uint64_t v22 = v33;
  LOBYTE(v39) = 0;
  uint64_t v24 = v35;
  long long v23 = v36;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v25 = v20;
  (*(void (**)(char *, char *, uint64_t))(v22 + 32))(v20, v24, a2);
  char v42 = 1;
  lazy protocol witness table accessor for type _DisplayList_Identity and conformance _DisplayList_Identity();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v26 = v18;
  *(_DWORD *)&v25[*(int *)(v18 + 52)] = v39;
  type metadata accessor for CGSize(0);
  char v42 = 2;
  lazy protocol witness table accessor for type CGSize and conformance CGSize(&lazy protocol witness table cache variable for type CGSize and conformance CGSize);
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v32 + 8))(v23, v37);
  *(_OWORD *)&v25[*(int *)(v18 + 56)] = v39;
  uint64_t v27 = v30;
  (*(void (**)(uint64_t, char *, uint64_t))(v30 + 16))(v31, v25, v26);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v38);
  return (*(uint64_t (**)(char *, uint64_t))(v27 + 8))(v25, v26);
}

uint64_t protocol witness for _DisplayList_ViewFactory.identity.getter in conformance ArchivableFactory<A>@<X0>(uint64_t result@<X0>, _DWORD *a2@<X8>)
{
  *a2 = *(_DWORD *)(v2 + *(int *)(result + 52));
  return result;
}

uint64_t protocol witness for Decodable.init(from:) in conformance ArchivableFactory<A>@<X0>(void *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  return ArchivableFactory.init(from:)(a1, a2[2], a2[3], a2[4], a2[5], a3);
}

uint64_t protocol witness for AnyViewFactory.viewType.getter in conformance ArchivableFactory<A>(void *a1)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(a1[2], a1[3], a1[4], a1[5]);
}

void protocol witness for RendererLeafView.content() in conformance ArchivablePlaceholder(unint64_t *a1@<X8>)
{
  *a1 = *v1 | 0xC000000000000000;
}

double protocol witness for LeafViewLayout.sizeThatFits(in:) in conformance ArchivablePlaceholder()
{
  return *(double *)(v0 + 8);
}

uint64_t protocol witness for ContentResponder.contains(points:size:) in conformance ArchivablePlaceholder(uint64_t a1, uint64_t a2, uint64_t a3, double a4, double a5)
{
  unint64_t v10 = lazy protocol witness table accessor for type ArchivablePlaceholder and conformance ArchivablePlaceholder();
  v11.n128_f64[0] = a4;
  v12.n128_f64[0] = a5;

  return MEMORY[0x1F40FEA50](a1, a2, a3, v10, v11, v12);
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance ArchivablePlaceholder()
{
  return static LeafViewLayout.makeLeafLayout(_:view:inputs:)();
}

void protocol witness for View.body.getter in conformance ArchivablePlaceholder()
{
}

ValueMetadata *type metadata accessor for ArchivablePlaceholder()
{
  return &type metadata for ArchivablePlaceholder;
}

unsigned char *storeEnumTagSinglePayload for ArchivableFactory.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x18829670CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

_UNKNOWN **base witness table accessor for View in ArchivablePlaceholder()
{
  return &protocol witness table for ArchivablePlaceholder;
}

unint64_t lazy protocol witness table accessor for type ArchivablePlaceholder and conformance ArchivablePlaceholder()
{
  unint64_t result = lazy protocol witness table cache variable for type ArchivablePlaceholder and conformance ArchivablePlaceholder;
  if (!lazy protocol witness table cache variable for type ArchivablePlaceholder and conformance ArchivablePlaceholder)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ArchivablePlaceholder and conformance ArchivablePlaceholder);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ArchivablePlaceholder and conformance ArchivablePlaceholder;
  if (!lazy protocol witness table cache variable for type ArchivablePlaceholder and conformance ArchivablePlaceholder)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ArchivablePlaceholder and conformance ArchivablePlaceholder);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ArchivablePlaceholder and conformance ArchivablePlaceholder;
  if (!lazy protocol witness table cache variable for type ArchivablePlaceholder and conformance ArchivablePlaceholder)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ArchivablePlaceholder and conformance ArchivablePlaceholder);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ArchivablePlaceholder and conformance ArchivablePlaceholder;
  if (!lazy protocol witness table cache variable for type ArchivablePlaceholder and conformance ArchivablePlaceholder)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ArchivablePlaceholder and conformance ArchivablePlaceholder);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ArchivablePlaceholder and conformance ArchivablePlaceholder;
  if (!lazy protocol witness table cache variable for type ArchivablePlaceholder and conformance ArchivablePlaceholder)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ArchivablePlaceholder and conformance ArchivablePlaceholder);
  }
  return result;
}

uint64_t sub_188296960()
{
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);

  return swift_deallocObject();
}

void static WindowDragGesture.Value.== infix(_:_:)()
{
}

void WindowDragGesture.init(minimumDistance:)()
{
}

void WindowDragGesture.init()()
{
}

void WindowDragGesture.minimumDistance.getter()
{
}

void WindowDragGesture.minimumDistance.setter()
{
}

void WindowDragGesture.minimumDistance.modify()
{
}

void WindowDragGesture.body.getter()
{
}

uint64_t associated type witness table accessor for Gesture.Body : Gesture in WindowDragGesture()
{
  return swift_getOpaqueTypeConformance2();
}

ValueMetadata *type metadata accessor for WindowDragGesture()
{
  return &type metadata for WindowDragGesture;
}

ValueMetadata *type metadata accessor for WindowDragGesture.Value()
{
  return &type metadata for WindowDragGesture.Value;
}

unint64_t lazy protocol witness table accessor for type EmptyGesture<WindowDragGesture.Value> and conformance EmptyGesture<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type EmptyGesture<WindowDragGesture.Value> and conformance EmptyGesture<A>;
  if (!lazy protocol witness table cache variable for type EmptyGesture<WindowDragGesture.Value> and conformance EmptyGesture<A>)
  {
    type metadata accessor for EmptyGesture<WindowDragGesture.Value>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EmptyGesture<WindowDragGesture.Value> and conformance EmptyGesture<A>);
  }
  return result;
}

void type metadata accessor for EmptyGesture<WindowDragGesture.Value>()
{
  if (!lazy cache variable for type metadata for EmptyGesture<WindowDragGesture.Value>)
  {
    unint64_t v0 = type metadata accessor for EmptyGesture();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for EmptyGesture<WindowDragGesture.Value>);
    }
  }
}

uint64_t EnvironmentValues.renameSelector.setter()
{
  type metadata accessor for PlatformItemListTransformModifier<SelectionPlatformItemListFlags>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.RenameSelectorKey>, (uint64_t)&type metadata for EnvironmentValues.RenameSelectorKey, (uint64_t)&protocol witness table for EnvironmentValues.RenameSelectorKey, MEMORY[0x1E4F40930]);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.RenameSelectorKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.RenameSelectorKey> and conformance EnvironmentPropertyKey<A>, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.RenameSelectorKey>, (uint64_t)&type metadata for EnvironmentValues.RenameSelectorKey, (uint64_t)&protocol witness table for EnvironmentValues.RenameSelectorKey);
  swift_retain();
  PropertyList.subscript.setter();
  if (*(void *)(v0 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  return swift_release();
}

uint64_t RenameButton.rename.getter@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1 + 36);
  uint64_t v5 = *(void *)v4;
  uint64_t v6 = *(void *)(v4 + 8);
  char v7 = *(unsigned char *)(v4 + 16);
  outlined copy of Environment<AppIntentExecutor?>.Content(*(void *)v4, v6, v7);
  specialized Environment.wrappedValue.getter(v5, v6, v7, a2);

  return outlined consume of Environment<AppIntentExecutor?>.Content(v5, v6, v7);
}

uint64_t RenameButton.renameSelector.getter(uint64_t a1)
{
  uint64_t v2 = v1 + *(int *)(a1 + 40);
  uint64_t v3 = *(void *)v2;
  char v4 = *(unsigned char *)(v2 + 8);
  outlined copy of Environment<Bool>.Content(*(void *)v2, v4);
  uint64_t v5 = specialized Environment.wrappedValue.getter(v3, v4);
  outlined consume of Environment<Bool>.Content(v3, v4);
  return v5;
}

double RenameButton.init<>()@<D0>(uint64_t a1@<X8>)
{
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v3 = swift_getKeyPath();
  uint64_t v4 = static Text.System.rename.getter();
  uint64_t v6 = v5;
  char v8 = v7;
  uint64_t v10 = v9;
  type metadata accessor for ImageProviderBox<Image.NamedImageProvider>();
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = 0x6C69636E6570;
  *(void *)(v11 + 24) = 0xE600000000000000;
  *(_DWORD *)(v11 + 32) = 0;
  *(unsigned char *)(v11 + 36) = 1;
  *(_OWORD *)(v11 + 40) = xmmword_18834C6B0;
  *(_OWORD *)(v11 + 56) = xmmword_1883E1A20;
  double result = -0.0;
  *(_OWORD *)(v11 + 72) = xmmword_18834C6D0;
  *(unsigned char *)(v11 + 88) = 0;
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v6;
  *(unsigned char *)(a1 + 16) = v8 & 1;
  *(void *)(a1 + 24) = v10;
  *(void *)(a1 + 32) = v11;
  *(void *)(a1 + 40) = KeyPath;
  *(void *)(a1 + 48) = 0;
  *(unsigned char *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = v3;
  *(unsigned char *)(a1 + 72) = 0;
  return result;
}

uint64_t RenameButton.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v54 = a2;
  uint64_t v4 = *(void *)(a1 - 8);
  uint64_t v5 = *(void *)(v4 + 64);
  MEMORY[0x1F4188790](a1);
  uint64_t v45 = (char *)&v42 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  char v8 = (char *)&v42 - v7;
  uint64_t v10 = *(void *)(v9 + 16);
  uint64_t v42 = *(void *)(v9 + 24);
  uint64_t v11 = v10;
  uint64_t v12 = type metadata accessor for Button();
  uint64_t v52 = *(void *)(v12 - 8);
  MEMORY[0x1F4188790](v12);
  uint64_t v55 = (_WORD *)((char *)&v42 - v13);
  _s7SwiftUI32_EnvironmentKeyTransformModifierVySbGMaTm_4(255, &lazy cache variable for type metadata for _EnvironmentKeyTransformModifier<Bool>, MEMORY[0x1E4FBB390], MEMORY[0x1E4F41280]);
  uint64_t v53 = v12;
  uint64_t v14 = type metadata accessor for ModifiedContent();
  uint64_t v51 = *(void *)(v14 - 8);
  MEMORY[0x1F4188790](v14);
  int v48 = (char *)&v42 - v15;
  type metadata accessor for PlatformItemListTransformModifier<SelectionPlatformItemListFlags>(255, (unint64_t *)&lazy cache variable for type metadata for PlatformItemListTransformModifier<SelectionPlatformItemListFlags>, (uint64_t)&type metadata for SelectionPlatformItemListFlags, (uint64_t)&protocol witness table for SelectionPlatformItemListFlags, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PlatformItemListTransformModifier);
  uint64_t v49 = v14;
  uint64_t v43 = type metadata accessor for ModifiedContent();
  uint64_t v50 = *(void *)(v43 - 8);
  MEMORY[0x1F4188790](v43);
  __int16 v46 = (char *)&v42 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v18 = MEMORY[0x1F4188790](v17);
  char v47 = (char *)&v42 - v19;
  uint64_t v20 = *(void (**)(char *, uint64_t, uint64_t, double))(v4 + 16);
  v20(v8, v2, a1, v18);
  unint64_t v21 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v22 = swift_allocObject();
  uint64_t v23 = v11;
  *(void *)(v22 + 16) = v11;
  uint64_t v24 = v42;
  *(void *)(v22 + 24) = v42;
  unint64_t v25 = v22 + v21;
  uint64_t v26 = v2;
  uint64_t v44 = v4;
  (*(void (**)(unint64_t, char *, uint64_t))(v4 + 32))(v25, v8, a1);
  uint64_t v56 = v23;
  uint64_t v57 = v24;
  uint64_t v58 = v2;
  uint64_t v27 = v45;
  Button.init(action:label:)((uint64_t)partial apply for closure #1 in RenameButton.body.getter, v22, (void (*)(uint64_t))partial apply for closure #2 in RenameButton.body.getter, v55);
  RenameButton.rename.getter(a1, &v63);
  uint64_t v28 = v63;
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v63);
  ((void (*)(char *, uint64_t, uint64_t))v20)(v27, v26, a1);
  if (!v28) {
    RenameButton.renameSelector.getter(a1);
  }
  (*(void (**)(char *, uint64_t))(v44 + 8))(v27, a1);
  uint64_t v29 = v53;
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v31 = v48;
  uint64_t v32 = v55;
  View.disabled(_:)();
  (*(void (**)(_WORD *, uint64_t))(v52 + 8))(v32, v29);
  uint64_t v33 = RenameButton.renameSelector.getter(a1);
  unint64_t v34 = lazy protocol witness table accessor for type _EnvironmentKeyTransformModifier<Bool> and conformance _EnvironmentKeyTransformModifier<A>();
  uint64_t v61 = WitnessTable;
  unint64_t v62 = v34;
  uint64_t v35 = v49;
  uint64_t v36 = swift_getWitnessTable();
  uint64_t v37 = v46;
  View.platformItemSelector(_:)(v33, v35, v36);
  (*(void (**)(char *, uint64_t))(v51 + 8))(v31, v35);
  uint64_t v59 = v36;
  uint64_t v60 = &protocol witness table for PlatformItemListTransformModifier<A>;
  uint64_t v38 = v43;
  swift_getWitnessTable();
  long long v39 = v47;
  static ViewBuilder.buildExpression<A>(_:)(v37);
  uint64_t v40 = *(void (**)(char *, uint64_t))(v50 + 8);
  v40(v37, v38);
  static ViewBuilder.buildExpression<A>(_:)(v39);
  return ((uint64_t (*)(char *, uint64_t))v40)(v39, v38);
}

uint64_t closure #1 in RenameButton.body.getter()
{
  uint64_t v0 = type metadata accessor for RenameButton();
  uint64_t result = RenameButton.rename.getter(v0, (uint64_t *)&v3);
  uint64_t v2 = (uint64_t)v3;
  if (v3)
  {
    v3(result);
    return outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v2);
  }
  return result;
}

Swift::Void __swiftcall RenameAction.callAsFunction()()
{
  (*v0)();
}

uint64_t closure #2 in RenameButton.body.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v5 = (char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  static ViewBuilder.buildExpression<A>(_:)(v6);
  static ViewBuilder.buildExpression<A>(_:)(v5);
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, a2);
}

uint64_t EnvironmentValues.renameSelector.getter()
{
  if (*(void *)(v0 + 8))
  {
    type metadata accessor for PlatformItemListTransformModifier<SelectionPlatformItemListFlags>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.RenameSelectorKey>, (uint64_t)&type metadata for EnvironmentValues.RenameSelectorKey, (uint64_t)&protocol witness table for EnvironmentValues.RenameSelectorKey, MEMORY[0x1E4F40930]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.RenameSelectorKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.RenameSelectorKey> and conformance EnvironmentPropertyKey<A>, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.RenameSelectorKey>, (uint64_t)&type metadata for EnvironmentValues.RenameSelectorKey, (uint64_t)&protocol witness table for EnvironmentValues.RenameSelectorKey);
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for PlatformItemListTransformModifier<SelectionPlatformItemListFlags>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.RenameSelectorKey>, (uint64_t)&type metadata for EnvironmentValues.RenameSelectorKey, (uint64_t)&protocol witness table for EnvironmentValues.RenameSelectorKey, MEMORY[0x1E4F40930]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.RenameSelectorKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.RenameSelectorKey> and conformance EnvironmentPropertyKey<A>, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.RenameSelectorKey>, (uint64_t)&type metadata for EnvironmentValues.RenameSelectorKey, (uint64_t)&protocol witness table for EnvironmentValues.RenameSelectorKey);
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  return v2;
}

uint64_t protocol witness for static EnvironmentKey._valuesEqual(_:_:) in conformance EnvironmentValues.RenameSelectorKey(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *a2;
  if (v2) {
    BOOL v4 = v3 == 0;
  }
  else {
    BOOL v4 = 1;
  }
  if (v4) {
    return (v2 | v3) == 0;
  }
  else {
    return static Selector.== infix(_:_:)();
  }
}

uint64_t View.renameAction(_:)(uint64_t a1, uint64_t a2, char a3)
{
  swift_getKeyPath();
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = a1;
  *(void *)(v6 + 24) = a2;
  *(unsigned char *)(v6 + 32) = a3;
  swift_retain();
  swift_retain();
  View.environment<A>(_:_:)();
  swift_release();
  return swift_release();
}

uint64_t EnvironmentValues.rename.getter()
{
  if (*(void *)(v0 + 8))
  {
    type metadata accessor for PlatformItemListTransformModifier<SelectionPlatformItemListFlags>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.RenameActionKey>, (uint64_t)&type metadata for EnvironmentValues.RenameActionKey, (uint64_t)&protocol witness table for EnvironmentValues.RenameActionKey, MEMORY[0x1E4F40930]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.RenameSelectorKey> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.RenameActionKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.RenameActionKey>, (uint64_t)&type metadata for EnvironmentValues.RenameActionKey, (uint64_t)&protocol witness table for EnvironmentValues.RenameActionKey);
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for PlatformItemListTransformModifier<SelectionPlatformItemListFlags>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.RenameActionKey>, (uint64_t)&type metadata for EnvironmentValues.RenameActionKey, (uint64_t)&protocol witness table for EnvironmentValues.RenameActionKey, MEMORY[0x1E4F40930]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.RenameSelectorKey> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.RenameActionKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.RenameActionKey>, (uint64_t)&type metadata for EnvironmentValues.RenameActionKey, (uint64_t)&protocol witness table for EnvironmentValues.RenameActionKey);
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  return swift_release_n();
}

double key path getter for EnvironmentValues.rename : EnvironmentValues@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  if (*(void *)(a1 + 8))
  {
    type metadata accessor for PlatformItemListTransformModifier<SelectionPlatformItemListFlags>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.RenameActionKey>, (uint64_t)&type metadata for EnvironmentValues.RenameActionKey, (uint64_t)&protocol witness table for EnvironmentValues.RenameActionKey, MEMORY[0x1E4F40930]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.RenameSelectorKey> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.RenameActionKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.RenameActionKey>, (uint64_t)&type metadata for EnvironmentValues.RenameActionKey, (uint64_t)&protocol witness table for EnvironmentValues.RenameActionKey);
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for PlatformItemListTransformModifier<SelectionPlatformItemListFlags>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.RenameActionKey>, (uint64_t)&type metadata for EnvironmentValues.RenameActionKey, (uint64_t)&protocol witness table for EnvironmentValues.RenameActionKey, MEMORY[0x1E4F40930]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.RenameSelectorKey> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.RenameActionKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.RenameActionKey>, (uint64_t)&type metadata for EnvironmentValues.RenameActionKey, (uint64_t)&protocol witness table for EnvironmentValues.RenameActionKey);
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  double result = *(double *)&v4;
  *a2 = v4;
  return result;
}

uint64_t key path setter for EnvironmentValues.rename : EnvironmentValues(uint64_t *a1)
{
  uint64_t v1 = *a1;
  outlined copy of AppIntentExecutor?(*a1);
  specialized EnvironmentValues.subscript.setter(v1);

  return outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v1);
}

uint64_t View.renameAction(_:)()
{
  return swift_release();
}

uint64_t sub_188297B50@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = EnvironmentValues.renameSelector.getter();
  *a1 = result;
  return result;
}

uint64_t sub_188297B8C()
{
  return EnvironmentValues.renameSelector.setter();
}

uint64_t sub_188297BB4()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = (int *)(type metadata accessor for RenameButton() - 8);
  uint64_t v3 = v0
     + ((*(unsigned __int8 *)(*(void *)v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v2 + 80));
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v1 - 8) + 8))(v3, v1);
  outlined consume of Environment<AppIntentExecutor?>.Content(*(void *)(v3 + v2[11]), *(void *)(v3 + v2[11] + 8), *(unsigned char *)(v3 + v2[11] + 16));
  outlined consume of Environment<Bool>.Content(*(void *)(v3 + v2[12]), *(unsigned char *)(v3 + v2[12] + 8));

  return swift_deallocObject();
}

uint64_t type metadata accessor for RenameButton()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t partial apply for closure #1 in RenameButton.body.getter()
{
  type metadata accessor for RenameButton();

  return closure #1 in RenameButton.body.getter();
}

uint64_t partial apply for closure #2 in RenameButton.body.getter()
{
  return closure #2 in RenameButton.body.getter(*(void *)(v0 + 32), *(void *)(v0 + 16));
}

uint64_t sub_188297D68()
{
  swift_release();
  swift_release();

  return swift_deallocObject();
}

uint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.RenameSelectorKey> and conformance EnvironmentPropertyKey<A>(unint64_t *a1, unint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for PlatformItemListTransformModifier<SelectionPlatformItemListFlags>(255, a2, a3, a4, MEMORY[0x1E4F40930]);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t associated type witness table accessor for View.Body : View in RenameButton<A>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t type metadata completion function for RenameButton()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for RenameButton(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  long long v4 = a1;
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  int v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0 || ((v6 + 31) & 0xFFFFFFFFFFFFFFF8) + 9 > 0x18)
  {
    uint64_t v9 = *a2;
    *long long v4 = *a2;
    long long v4 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
    swift_retain();
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    uint64_t v10 = (char *)v4 + v6;
    uint64_t v11 = (char *)a2 + v6;
    unint64_t v12 = ((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v13 = ((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v14 = *(void *)v13;
    uint64_t v15 = *(void *)(v13 + 8);
    char v16 = *(unsigned char *)(v13 + 16);
    outlined copy of Environment<AppIntentExecutor?>.Content(*(void *)v13, v15, v16);
    *(void *)unint64_t v12 = v14;
    *(void *)(v12 + 8) = v15;
    *(unsigned char *)(v12 + 16) = v16;
    unint64_t v17 = (unint64_t)(v10 + 31) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v18 = (unint64_t)(v11 + 31) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v19 = *(void *)v18;
    LOBYTE(v15) = *(unsigned char *)(v18 + 8);
    outlined copy of Environment<Bool>.Content(*(void *)v18, v15);
    *(void *)unint64_t v17 = v19;
    *(unsigned char *)(v17 + 8) = v15;
  }
  return v4;
}

uint64_t destroy for RenameButton(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(*(void *)(a2 + 16) - 8) + 8;
  (*(void (**)(void))v3)();
  uint64_t v4 = *(void *)(v3 + 56) + a1;
  outlined consume of Environment<AppIntentExecutor?>.Content(*(void *)((v4 + 7) & 0xFFFFFFFFFFFFFFF8), *(void *)(((v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 8), *(unsigned char *)(((v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 16));
  unint64_t v5 = (v4 + 31) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v6 = *(void *)v5;
  char v7 = *(unsigned char *)(v5 + 8);

  return outlined consume of Environment<Bool>.Content(v6, v7);
}

uint64_t initializeWithCopy for RenameButton(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 16;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 48);
  uint64_t v7 = v6 + a1;
  uint64_t v8 = v6 + a2;
  unint64_t v9 = (v6 + a1 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v10 = (v6 + a2 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v11 = *(void *)v10;
  uint64_t v12 = *(void *)(v10 + 8);
  char v13 = *(unsigned char *)(v10 + 16);
  outlined copy of Environment<AppIntentExecutor?>.Content(*(void *)v10, v12, v13);
  *(void *)unint64_t v9 = v11;
  *(void *)(v9 + 8) = v12;
  *(unsigned char *)(v9 + 16) = v13;
  unint64_t v14 = (v7 + 31) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v15 = (v8 + 31) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v16 = *(void *)v15;
  LOBYTE(v12) = *(unsigned char *)(v15 + 8);
  outlined copy of Environment<Bool>.Content(*(void *)v15, v12);
  *(void *)unint64_t v14 = v16;
  *(unsigned char *)(v14 + 8) = v12;
  return a1;
}

uint64_t assignWithCopy for RenameButton(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 24;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 40);
  uint64_t v7 = v6 + a1;
  uint64_t v8 = v6 + a2;
  unint64_t v9 = (v6 + a1 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v10 = (v6 + a2 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v11 = *(void *)v10;
  uint64_t v12 = *(void *)(v10 + 8);
  char v13 = *(unsigned char *)(v10 + 16);
  outlined copy of Environment<AppIntentExecutor?>.Content(*(void *)v10, v12, v13);
  uint64_t v14 = *(void *)v9;
  uint64_t v15 = *(void *)(v9 + 8);
  char v16 = *(unsigned char *)(v9 + 16);
  *(void *)unint64_t v9 = v11;
  *(void *)(v9 + 8) = v12;
  *(unsigned char *)(v9 + 16) = v13;
  outlined consume of Environment<AppIntentExecutor?>.Content(v14, v15, v16);
  unint64_t v17 = (v7 + 31) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v18 = (v8 + 31) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v19 = *(void *)v18;
  LOBYTE(v12) = *(unsigned char *)(v18 + 8);
  outlined copy of Environment<Bool>.Content(*(void *)v18, v12);
  uint64_t v20 = *(void *)v17;
  char v21 = *(unsigned char *)(v17 + 8);
  *(void *)unint64_t v17 = v19;
  *(unsigned char *)(v17 + 8) = v12;
  outlined consume of Environment<Bool>.Content(v20, v21);
  return a1;
}

uint64_t initializeWithTake for RenameButton(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 32;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 32);
  uint64_t v7 = v6 + a1;
  uint64_t v8 = v6 + a2;
  unint64_t v9 = (v7 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v10 = (v8 + 7) & 0xFFFFFFFFFFFFFFF8;
  long long v11 = *(_OWORD *)v10;
  *(unsigned char *)(v9 + 16) = *(unsigned char *)(v10 + 16);
  *(_OWORD *)unint64_t v9 = v11;
  unint64_t v12 = (v7 + 31) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v13 = (v8 + 31) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v14 = *(void *)v13;
  *(unsigned char *)(v12 + 8) = *(unsigned char *)(v13 + 8);
  *(void *)unint64_t v12 = v14;
  return a1;
}

uint64_t assignWithTake for RenameButton(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 40;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 24);
  uint64_t v7 = v6 + a1;
  uint64_t v8 = v6 + a2;
  unint64_t v9 = (v6 + a1 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v10 = (v8 + 7) & 0xFFFFFFFFFFFFFFF8;
  char v11 = *(unsigned char *)(v10 + 16);
  uint64_t v12 = *(void *)v9;
  uint64_t v13 = *(void *)(v9 + 8);
  char v14 = *(unsigned char *)(v9 + 16);
  *(_OWORD *)unint64_t v9 = *(_OWORD *)v10;
  *(unsigned char *)(v9 + 16) = v11;
  outlined consume of Environment<AppIntentExecutor?>.Content(v12, v13, v14);
  unint64_t v15 = (v7 + 31) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v16 = (v8 + 31) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v17 = *(void *)v16;
  LOBYTE(v16) = *(unsigned char *)(v16 + 8);
  uint64_t v18 = *(void *)v15;
  char v19 = *(unsigned char *)(v15 + 8);
  *(void *)unint64_t v15 = v17;
  *(unsigned char *)(v15 + 8) = v16;
  outlined consume of Environment<Bool>.Content(v18, v19);
  return a1;
}

uint64_t getEnumTagSinglePayload for RenameButton(unsigned __int8 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (v5 <= 0xFE) {
    unsigned int v7 = 254;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  if (v7 < a2)
  {
    unint64_t v8 = ((v6 + 31) & 0xFFFFFFFFFFFFFFF8) + 9;
    unsigned int v9 = (a2 - v7 + 255) >> (8 * v8);
    if (v8 < 4) {
      unsigned int v10 = v9 + 1;
    }
    else {
      unsigned int v10 = 2;
    }
    if (v10 >= 0x10000) {
      unsigned int v11 = 4;
    }
    else {
      unsigned int v11 = 2;
    }
    if (v10 < 0x100) {
      unsigned int v11 = 1;
    }
    if (v10 >= 2) {
      uint64_t v12 = v11;
    }
    else {
      uint64_t v12 = 0;
    }
    switch(v12)
    {
      case 1:
        int v13 = a1[v8];
        if (!a1[v8]) {
          break;
        }
        goto LABEL_22;
      case 2:
        int v13 = *(unsigned __int16 *)&a1[v8];
        if (*(_WORD *)&a1[v8]) {
          goto LABEL_22;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x188298550);
      case 4:
        int v13 = *(_DWORD *)&a1[v8];
        if (!v13) {
          break;
        }
LABEL_22:
        int v15 = (v13 - 1) << (8 * v8);
        if (v8 >= 4) {
          int v15 = 0;
        }
        if (((v6 + 31) & 0xFFFFFFF8) == 0xFFFFFFF8) {
          int v16 = *a1;
        }
        else {
          int v16 = *(_DWORD *)a1;
        }
        return v7 + (v16 | v15) + 1;
      default:
        break;
    }
  }
  if (v5 >= 0xFE) {
    return (*(uint64_t (**)(void))(v4 + 48))();
  }
  unsigned int v17 = *(unsigned __int8 *)(((unint64_t)&a1[v6 + 7] & 0xFFFFFFFFFFFFFFF8) + 16);
  if (v17 > 1) {
    return (v17 ^ 0xFF) + 1;
  }
  else {
    return 0;
  }
}

void storeEnumTagSinglePayload for RenameButton(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0xFE) {
    unsigned int v8 = 254;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  size_t v10 = ((v9 + 31) & 0xFFFFFFFFFFFFFFF8) + 9;
  char v11 = 8 * v10;
  if (v8 >= a3)
  {
    int v15 = 0;
    if (v8 >= a2)
    {
LABEL_17:
      switch(v15)
      {
        case 1:
          a1[v10] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_34;
        case 2:
          *(_WORD *)&a1[v10] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_34;
        case 3:
          goto LABEL_46;
        case 4:
          *(_DWORD *)&a1[v10] = 0;
          goto LABEL_33;
        default:
LABEL_33:
          if (a2)
          {
LABEL_34:
            if (v7 < 0xFE)
            {
              unint64_t v21 = (unint64_t)&a1[v9 + 7] & 0xFFFFFFFFFFFFFFF8;
              if (a2 > 0xFE)
              {
                *(unsigned char *)(v21 + 16) = 0;
                *(void *)unint64_t v21 = a2 - 255;
                *(void *)(v21 + 8) = 0;
              }
              else
              {
                *(unsigned char *)(v21 + 16) = -(char)a2;
              }
            }
            else
            {
              uint64_t v20 = *(void (**)(void))(v6 + 56);
              v20();
            }
          }
          break;
      }
      return;
    }
  }
  else
  {
    unsigned int v12 = (a3 - v8 + 255) >> v11;
    if (v10 <= 3) {
      unsigned int v13 = v12 + 1;
    }
    else {
      unsigned int v13 = 2;
    }
    if (v13 >= 0x10000) {
      int v14 = 4;
    }
    else {
      int v14 = 2;
    }
    if (v13 < 0x100) {
      int v14 = 1;
    }
    if (v13 >= 2) {
      int v15 = v14;
    }
    else {
      int v15 = 0;
    }
    if (v8 >= a2) {
      goto LABEL_17;
    }
  }
  unsigned int v16 = ~v8 + a2;
  unsigned int v17 = (~(_BYTE)v8 + a2);
  if (v10 < 4) {
    int v18 = (v16 >> v11) + 1;
  }
  else {
    int v18 = 1;
  }
  if (v10 >= 4) {
    unsigned int v19 = v16;
  }
  else {
    unsigned int v19 = v17;
  }
  bzero(a1, v10);
  if (v10 == 1) {
    *a1 = v19;
  }
  else {
    *(_DWORD *)a1 = v19;
  }
  switch(v15)
  {
    case 1:
      a1[v10] = v18;
      break;
    case 2:
      *(_WORD *)&a1[v10] = v18;
      break;
    case 3:
LABEL_46:
      __break(1u);
      JUMPOUT(0x18829877CLL);
    case 4:
      *(_DWORD *)&a1[v10] = v18;
      break;
    default:
      return;
  }
}

ValueMetadata *type metadata accessor for RenameAction()
{
  return &type metadata for RenameAction;
}

uint64_t sub_1882987B4()
{
  return swift_getWitnessTable();
}

uint64_t sub_1882988E0()
{
  return swift_getWitnessTable();
}

void type metadata accessor for _EnvironmentKeyWritingModifier<RenameAction?>()
{
  if (!lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<RenameAction?>)
  {
    _s7SwiftUI32_EnvironmentKeyTransformModifierVySbGMaTm_4(255, &lazy cache variable for type metadata for RenameAction?, (uint64_t)&type metadata for RenameAction, MEMORY[0x1E4FBB718]);
    unint64_t v0 = type metadata accessor for _EnvironmentKeyWritingModifier();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<RenameAction?>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<RenameAction?> and conformance _EnvironmentKeyWritingModifier<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<RenameAction?> and conformance _EnvironmentKeyWritingModifier<A>;
  if (!lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<RenameAction?> and conformance _EnvironmentKeyWritingModifier<A>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<RenameAction?>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<RenameAction?> and conformance _EnvironmentKeyWritingModifier<A>);
  }
  return result;
}

ValueMetadata *type metadata accessor for EnvironmentValues.RenameActionKey()
{
  return &type metadata for EnvironmentValues.RenameActionKey;
}

void type metadata accessor for PlatformItemListTransformModifier<SelectionPlatformItemListFlags>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = a5(0, a3, a4);
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

ValueMetadata *type metadata accessor for EnvironmentValues.RenameSelectorKey()
{
  return &type metadata for EnvironmentValues.RenameSelectorKey;
}

uint64_t UIHostingViewDebugOptions.debugRepresentation<A>(for:)(uint64_t a1, char a2)
{
  uint64_t v2 = MEMORY[0x1E4FBC860];
  if (a2)
  {
    _UIHostingView.sceneActivationState.getter();
    if (v5)
    {
      unsigned int v8 = (void *)0xE300000000000000;
      uint64_t v6 = 7104878;
    }
    else
    {
      uint64_t v6 = dispatch thunk of CustomStringConvertible.description.getter();
      unsigned int v8 = v7;
    }
    _StringGuts.grow(_:)(40);
    swift_bridgeObjectRelease();
    _UIHostingView.base.getter();
    char v9 = UIHostingViewBase.updatesWillBeVisible.getter();
    swift_release();
    if (v9) {
      uint64_t v10 = 1702195828;
    }
    else {
      uint64_t v10 = 0x65736C6166;
    }
    if (v9) {
      unint64_t v11 = 0xE400000000000000;
    }
    else {
      unint64_t v11 = 0xE500000000000000;
    }
    unint64_t v12 = v11;
    String.append(_:)(*(Swift::String *)&v10);
    swift_bridgeObjectRelease();
    v13._countAndFlagsBits = 0x3D73617328;
    v13._object = (void *)0xE500000000000000;
    String.append(_:)(v13);
    v14._countAndFlagsBits = v6;
    v14._object = v8;
    String.append(_:)(v14);
    swift_bridgeObjectRelease();
    v15._countAndFlagsBits = 0x3D7266686926;
    v15._object = (void *)0xE600000000000000;
    String.append(_:)(v15);
    char v16 = _UIHostingView.isHiddenForReuse.getter();
    BOOL v17 = (v16 & 1) == 0;
    if (v16) {
      uint64_t v18 = 1702195828;
    }
    else {
      uint64_t v18 = 0x65736C6166;
    }
    if (v17) {
      unint64_t v19 = 0xE500000000000000;
    }
    else {
      unint64_t v19 = 0xE400000000000000;
    }
    unint64_t v20 = v19;
    String.append(_:)(*(Swift::String *)&v18);
    swift_bridgeObjectRelease();
    v21._countAndFlagsBits = 0x3D66656926;
    v21._object = (void *)0xE500000000000000;
    String.append(_:)(v21);
    char v22 = _UIHostingView.isEnteringForeground.getter();
    BOOL v23 = (v22 & 1) == 0;
    if (v22) {
      uint64_t v24 = 1702195828;
    }
    else {
      uint64_t v24 = 0x65736C6166;
    }
    if (v23) {
      unint64_t v25 = 0xE500000000000000;
    }
    else {
      unint64_t v25 = 0xE400000000000000;
    }
    unint64_t v26 = v25;
    String.append(_:)(*(Swift::String *)&v24);
    swift_bridgeObjectRelease();
    v27._countAndFlagsBits = 0x3D73636926;
    v27._object = (void *)0xE500000000000000;
    String.append(_:)(v27);
    char v28 = _UIHostingView.isCapturingSnapshots.getter();
    BOOL v29 = (v28 & 1) == 0;
    if (v28) {
      uint64_t v30 = 1702195828;
    }
    else {
      uint64_t v30 = 0x65736C6166;
    }
    if (v29) {
      unint64_t v31 = 0xE500000000000000;
    }
    else {
      unint64_t v31 = 0xE400000000000000;
    }
    unint64_t v32 = v31;
    String.append(_:)(*(Swift::String *)&v30);
    swift_bridgeObjectRelease();
    v33._countAndFlagsBits = 41;
    v33._object = (void *)0xE100000000000000;
    String.append(_:)(v33);
    uint64_t v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 1, MEMORY[0x1E4FBC860]);
    unint64_t v35 = *((void *)v4 + 2);
    unint64_t v34 = *((void *)v4 + 3);
    int64_t v3 = v35 + 1;
    if (v35 >= v34 >> 1) {
      uint64_t v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v34 > 1), v35 + 1, 1, v4);
    }
    *((void *)v4 + 2) = v3;
    uint64_t v36 = &v4[16 * v35];
    *((void *)v36 + 4) = 0x3D656C6269736976;
    *((void *)v36 + 5) = 0xE800000000000000;
  }
  else
  {
    int64_t v3 = *(void *)(MEMORY[0x1E4FBC860] + 16);
    if (!v3)
    {
      swift_bridgeObjectRelease();
      goto LABEL_39;
    }
    uint64_t v4 = (char *)MEMORY[0x1E4FBC860];
  }
  swift_bridgeObjectRetain();
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3, 0);
  uint64_t v37 = v2;
  uint64_t v38 = (void **)(v4 + 40);
  do
  {
    uint64_t v39 = (uint64_t)*(v38 - 1);
    uint64_t v40 = *v38;
    swift_bridgeObjectRetain();
    v41._countAndFlagsBits = v39;
    v41._object = v40;
    String.append(_:)(v41);
    v42._countAndFlagsBits = 41;
    v42._object = (void *)0xE100000000000000;
    String.append(_:)(v42);
    swift_bridgeObjectRelease();
    unint64_t v44 = *(void *)(v37 + 16);
    unint64_t v43 = *(void *)(v37 + 24);
    if (v44 >= v43 >> 1) {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v43 > 1), v44 + 1, 1);
    }
    v38 += 2;
    *(void *)(v37 + 16) = v44 + 1;
    uint64_t v45 = v37 + 16 * v44;
    *(void *)(v45 + 32) = 40;
    *(void *)(v45 + 40) = 0xE100000000000000;
    --v3;
  }
  while (v3);
  swift_bridgeObjectRelease_n();
LABEL_39:
  type metadata accessor for [String]();
  lazy protocol witness table accessor for type [String] and conformance [A]();
  uint64_t v46 = BidirectionalCollection<>.joined(separator:)();
  swift_bridgeObjectRelease();
  return v46;
}

uint64_t key path setter for EnvironmentValues.presentationWantsTransparentBackground : EnvironmentValues(unsigned __int8 *a1)
{
  return EnvironmentValues.presentationWantsTransparentBackground.setter(*a1);
}

uint64_t associated type witness table accessor for NavigationViewStyle._Body : View in StackNavigationViewStyle()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for NavigationViewStyle._Body2 : View in StackNavigationViewStyle()
{
  return swift_getOpaqueTypeConformance2();
}

ValueMetadata *type metadata accessor for StackNavigationViewStyle()
{
  return &type metadata for StackNavigationViewStyle;
}

unint64_t lazy protocol witness table accessor for type _VariadicView.Tree<StackNavigationView, _NavigationViewStyleConfiguration.Content> and conformance <> _VariadicView.Tree<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type _VariadicView.Tree<StackNavigationView, _NavigationViewStyleConfiguration.Content> and conformance <> _VariadicView.Tree<A, B>;
  if (!lazy protocol witness table cache variable for type _VariadicView.Tree<StackNavigationView, _NavigationViewStyleConfiguration.Content> and conformance <> _VariadicView.Tree<A, B>)
  {
    type metadata accessor for _VariadicView.Tree<StackNavigationView, _NavigationViewStyleConfiguration.Content>();
    lazy protocol witness table accessor for type StackNavigationView and conformance StackNavigationView();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _VariadicView.Tree<StackNavigationView, _NavigationViewStyleConfiguration.Content> and conformance <> _VariadicView.Tree<A, B>);
  }
  return result;
}

void type metadata accessor for _VariadicView.Tree<StackNavigationView, _NavigationViewStyleConfiguration.Content>()
{
  if (!lazy cache variable for type metadata for _VariadicView.Tree<StackNavigationView, _NavigationViewStyleConfiguration.Content>)
  {
    unint64_t v0 = type metadata accessor for _VariadicView.Tree();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _VariadicView.Tree<StackNavigationView, _NavigationViewStyleConfiguration.Content>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type StackNavigationView and conformance StackNavigationView()
{
  unint64_t result = lazy protocol witness table cache variable for type StackNavigationView and conformance StackNavigationView;
  if (!lazy protocol witness table cache variable for type StackNavigationView and conformance StackNavigationView)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StackNavigationView and conformance StackNavigationView);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type StackNavigationView and conformance StackNavigationView;
  if (!lazy protocol witness table cache variable for type StackNavigationView and conformance StackNavigationView)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StackNavigationView and conformance StackNavigationView);
  }
  return result;
}

void *type metadata accessor for StackNavigationView()
{
  return &unk_1ED42E2E0;
}

unint64_t instantiation function for generic protocol witness table for StackNavigationView(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type StackNavigationView and conformance StackNavigationView();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t associated type witness table accessor for _VariadicView_ViewRoot.Body : View in StackNavigationView()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t protocol witness for static _VariadicView_ViewRoot._makeViewList(root:inputs:body:) in conformance StackNavigationView(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v10 = lazy protocol witness table accessor for type StackNavigationView and conformance StackNavigationView();

  return MEMORY[0x1F40FD028](a1, a2, a3, a4, a5, v10);
}

double protocol witness for _VariadicView_ViewRoot.body(children:) in conformance StackNavigationView@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  outlined init with copy of _VariadicView_Children(a1, (uint64_t)v8);
  v8[7] = swift_getKeyPath();
  char v9 = 0;
  char v4 = static Edge.Set.all.getter();
  outlined init with copy of BridgedNavigationView((uint64_t)v8, (uint64_t)v10);
  *((void *)&v11 + 1) = -1;
  char v12 = v4;
  outlined destroy of BridgedNavigationView((uint64_t)v8);
  outlined init with copy of _VariadicView_Children(a1, a2 + 88);
  long long v5 = v10[3];
  *(_OWORD *)(a2 + 32) = v10[2];
  *(_OWORD *)(a2 + 48) = v5;
  *(_OWORD *)(a2 + 64) = v11;
  *(unsigned char *)(a2 + 80) = v12;
  double result = *(double *)v10;
  long long v7 = v10[1];
  *(_OWORD *)a2 = v10[0];
  *(_OWORD *)(a2 + 16) = v7;
  return result;
}

uint64_t sub_188299258@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = EnvironmentValues.presentationWantsTransparentBackground.getter();
  *a1 = result & 1;
  return result;
}

uint64_t sub_188299298(unsigned __int8 *a1)
{
  return EnvironmentValues.presentationWantsTransparentBackground.setter(*a1);
}

uint64_t outlined init with copy of BridgedNavigationView(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t outlined destroy of BridgedNavigationView(uint64_t a1)
{
  return a1;
}

void *type metadata accessor for ContainerBackgroundModifier()
{
  return &unk_1ED44ED60;
}

uint64_t destroy for BridgedNavigationView(uint64_t a1)
{
  __swift_destroy_boxed_opaque_existential_1(a1);

  swift_bridgeObjectRelease();
  uint64_t v2 = *(void *)(a1 + 56);
  char v3 = *(unsigned char *)(a1 + 64);

  return outlined consume of Environment<Bool>.Content(v2, v3);
}

uint64_t initializeWithCopy for BridgedNavigationView(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  long long v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v4;
  (**(void (***)(void))(v4 - 8))();
  long long v5 = *(void **)(v2 + 40);
  uint64_t v6 = *(void *)(v2 + 48);
  *(void *)(a1 + 40) = v5;
  *(void *)(a1 + 48) = v6;
  uint64_t v7 = *(void *)(v2 + 56);
  LOBYTE(v2) = *(unsigned char *)(v2 + 64);
  id v8 = v5;
  swift_bridgeObjectRetain();
  outlined copy of Environment<Bool>.Content(v7, v2);
  *(void *)(a1 + 56) = v7;
  *(unsigned char *)(a1 + 64) = v2;
  return a1;
}

uint64_t assignWithCopy for BridgedNavigationView(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = a2;
  __swift_assign_boxed_opaque_existential_1((uint64_t *)a1, a2);
  long long v4 = (void *)v2[5];
  long long v5 = *(void **)(a1 + 40);
  *(void *)(a1 + 40) = v4;
  id v6 = v4;

  *(void *)(a1 + 48) = v2[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v7 = v2[7];
  LOBYTE(v2) = *((unsigned char *)v2 + 64);
  outlined copy of Environment<Bool>.Content(v7, (char)v2);
  uint64_t v8 = *(void *)(a1 + 56);
  char v9 = *(unsigned char *)(a1 + 64);
  *(void *)(a1 + 56) = v7;
  *(unsigned char *)(a1 + 64) = (_BYTE)v2;
  outlined consume of Environment<Bool>.Content(v8, v9);
  return a1;
}

uint64_t assignWithTake for BridgedNavigationView(uint64_t a1, uint64_t a2)
{
  __swift_destroy_boxed_opaque_existential_1(a1);
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  uint64_t v5 = *(void *)(a2 + 40);
  id v6 = *(void **)(a1 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v5;

  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRelease();
  char v7 = *(unsigned char *)(a2 + 64);
  uint64_t v8 = *(void *)(a1 + 56);
  char v9 = *(unsigned char *)(a1 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(unsigned char *)(a1 + 64) = v7;
  outlined consume of Environment<Bool>.Content(v8, v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for BridgedNavigationView(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 65)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for BridgedNavigationView(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 64) = 0;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 65) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 24) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 65) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for BridgedNavigationView()
{
  return &type metadata for BridgedNavigationView;
}

uint64_t sub_188299610()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<BridgedNavigationView, _SafeAreaRegionsIgnoringLayout>, ContainerBackgroundModifier> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<BridgedNavigationView, _SafeAreaRegionsIgnoringLayout>, ContainerBackgroundModifier> and conformance <> ModifiedContent<A, B>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<BridgedNavigationView, _SafeAreaRegionsIgnoringLayout>, ContainerBackgroundModifier>, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<BridgedNavigationView, _SafeAreaRegionsIgnoringLayout> and conformance <> ModifiedContent<A, B>, (void (*)(void))lazy protocol witness table accessor for type ContainerBackgroundModifier and conformance ContainerBackgroundModifier);
}

void type metadata accessor for ModifiedContent<ModifiedContent<BridgedNavigationView, _SafeAreaRegionsIgnoringLayout>, ContainerBackgroundModifier>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<BridgedNavigationView, _SafeAreaRegionsIgnoringLayout>, ContainerBackgroundModifier>)
  {
    type metadata accessor for ModifiedContent<TableRowView, CollectionViewCellModifier>(255, &lazy cache variable for type metadata for ModifiedContent<BridgedNavigationView, _SafeAreaRegionsIgnoringLayout>);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<BridgedNavigationView, _SafeAreaRegionsIgnoringLayout>, ContainerBackgroundModifier>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<BridgedNavigationView, _SafeAreaRegionsIgnoringLayout> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<BridgedNavigationView, _SafeAreaRegionsIgnoringLayout> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<BridgedNavigationView, _SafeAreaRegionsIgnoringLayout> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<TableRowView, CollectionViewCellModifier>(255, &lazy cache variable for type metadata for ModifiedContent<BridgedNavigationView, _SafeAreaRegionsIgnoringLayout>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<BridgedNavigationView, _SafeAreaRegionsIgnoringLayout> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ContainerBackgroundModifier and conformance ContainerBackgroundModifier()
{
  unint64_t result = lazy protocol witness table cache variable for type ContainerBackgroundModifier and conformance ContainerBackgroundModifier;
  if (!lazy protocol witness table cache variable for type ContainerBackgroundModifier and conformance ContainerBackgroundModifier)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ContainerBackgroundModifier and conformance ContainerBackgroundModifier);
  }
  return result;
}

uint64_t ContainerBackgroundModifier.background.getter()
{
  uint64_t result = _VariadicView_Children.endIndex.getter();
  if (result)
  {
    _VariadicView_Children.subscript.getter();
    swift_bridgeObjectRetain();
    outlined destroy of _VariadicView_Children.Element((uint64_t)v2);
    ViewTraitCollection.value<A>(for:defaultValue:)();
    swift_bridgeObjectRelease();
    return v1;
  }
  return result;
}

uint64_t protocol witness for ViewModifier.body(content:) in conformance ContainerBackgroundModifier@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = ContainerBackgroundModifier.background.getter();
  uint64_t result = static Alignment.center.getter();
  *a1 = v2;
  a1[1] = result;
  a1[2] = v4;
  return result;
}

id BridgedNavigationView.makeUIViewController(context:)()
{
  uint64_t v1 = v0;
  if (_VariadicView_Children.endIndex.getter())
  {
    _VariadicView_Children.subscript.getter();
    outlined init with copy of _VariadicView_Children.Element((uint64_t)v13, (uint64_t)v12);
    type metadata accessor for UIHostingController<BridgedNavigationView.RootView>(0, &lazy cache variable for type metadata for UIHostingController<BridgedNavigationView.RootView>, (uint64_t (*)(void))lazy protocol witness table accessor for type BridgedNavigationView.RootView and conformance BridgedNavigationView.RootView, (uint64_t)&type metadata for BridgedNavigationView.RootView, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UIHostingController);
    id v3 = objc_allocWithZone(v2);
    uint64_t v4 = (char *)specialized UIHostingController.init(rootView:)((uint64_t)v12);
    uint64_t v5 = *(void *)(v0 + 56);
    char v6 = *(unsigned char *)(v1 + 64);
    id v7 = *(id *)&v4[direct field offset for UIHostingController.host];
    outlined copy of Environment<Bool>.Content(v5, v6);
    char v8 = specialized Environment.wrappedValue.getter(v5, v6);
    outlined consume of Environment<Bool>.Content(v5, v6);
    specialized _UIHostingView.setWantsTransparentBackground(for:_:)(4, v8 & 1);

    id v9 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for UIKitNavigationController()), sel_initWithRootViewController_, v4);
    outlined destroy of _VariadicView_Children.Element((uint64_t)v13);
    return v9;
  }
  else
  {
    id v11 = objc_allocWithZone((Class)type metadata accessor for UIKitNavigationController());
    return objc_msgSend(v11, sel_initWithRootViewController_, 0);
  }
}

void BridgedNavigationView.updateUIViewController(_:context:)(void *a1, uint64_t *a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *a2;
  if (_VariadicView_Children.endIndex.getter())
  {
    _VariadicView_Children.subscript.getter();
    outlined init with copy of _VariadicView_Children.Element((uint64_t)v20, (uint64_t)v19);
    swift_retain();
    swift_retain();
    specialized UINavigationController.updateRootHost<A>(root:environment:transaction:)((uint64_t)v19, v5);
    swift_release();
    swift_release();
    outlined destroy of BridgedNavigationView.RootView((uint64_t)v19);
    id v6 = objc_msgSend(a1, sel_viewControllers);
    type metadata accessor for UIViewController();
    unint64_t v7 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    if (v7 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v18 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v18) {
        goto LABEL_4;
      }
    }
    else if (*(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
LABEL_4:
      if ((v7 & 0xC000000000000001) != 0)
      {
        id v8 = (id)MEMORY[0x18C117680](0, v7);
      }
      else
      {
        if (!*(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10))
        {
          __break(1u);
          return;
        }
        id v8 = *(id *)(v7 + 32);
      }
      id v9 = v8;
      swift_bridgeObjectRelease();
      type metadata accessor for UIHostingController<BridgedNavigationView.RootView>(0, &lazy cache variable for type metadata for UIHostingController<BridgedNavigationView.RootView>, (uint64_t (*)(void))lazy protocol witness table accessor for type BridgedNavigationView.RootView and conformance BridgedNavigationView.RootView, (uint64_t)&type metadata for BridgedNavigationView.RootView, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UIHostingController);
      uint64_t v10 = swift_dynamicCastClass();
      if (v10)
      {
        uint64_t v11 = v10;
        uint64_t v12 = direct field offset for UIHostingController.host;
        id v13 = *(id *)(v10 + direct field offset for UIHostingController.host);
        char v14 = BridgedNavigationView.hasContainerBackground.getter();
        specialized _UIHostingView.setWantsTransparentBackground(for:_:)(8, v14 & 1);

        uint64_t v15 = *(void *)(v3 + 56);
        char v16 = *(unsigned char *)(v3 + 64);
        id v17 = *(id *)(v11 + v12);
        outlined copy of Environment<Bool>.Content(v15, v16);
        LOBYTE(v13) = specialized Environment.wrappedValue.getter(v15, v16);
        outlined consume of Environment<Bool>.Content(v15, v16);
        specialized _UIHostingView.setWantsTransparentBackground(for:_:)(4, v13 & 1);
      }
      else
      {
      }
      goto LABEL_12;
    }
    swift_bridgeObjectRelease();
LABEL_12:
    outlined destroy of _VariadicView_Children.Element((uint64_t)v20);
  }
}

uint64_t BridgedNavigationView.hasContainerBackground.getter()
{
  uint64_t result = _VariadicView_Children.endIndex.getter();
  if (result)
  {
    _VariadicView_Children.subscript.getter();
    swift_bridgeObjectRetain();
    outlined destroy of _VariadicView_Children.Element((uint64_t)v2);
    ViewTraitCollection.value<A>(for:defaultValue:)();
    swift_bridgeObjectRelease();
    uint64_t result = v1;
    if (v1)
    {
      swift_release();
      return 1;
    }
  }
  return result;
}

char *BridgedNavigationView._identifiedViewTree(in:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v50 = (char *)MEMORY[0x1E4FBC860];
  id v4 = objc_msgSend(a1, sel_navigationBar);
  id v5 = objc_msgSend(v4, sel_topItem);

  if (v5)
  {
    id v6 = objc_msgSend(v5, sel_leftBarButtonItem);
    if (v6)
    {
      unint64_t v7 = v6;
      id v8 = objc_msgSend(v6, sel_customView);

      if (v8)
      {
        type metadata accessor for UIHostingController<BridgedNavigationView.RootView>(0, &lazy cache variable for type metadata for UIKitBarItemHost<BarItemView>, (uint64_t (*)(void))lazy protocol witness table accessor for type BarItemView and conformance BarItemView, (uint64_t)&type metadata for BarItemView, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UIKitBarItemHost);
        if (swift_dynamicCastClass())
        {
          type metadata accessor for UIHostingController<BridgedNavigationView.RootView>(0, &lazy cache variable for type metadata for _UIHostingView<BarItemView>, (uint64_t (*)(void))lazy protocol witness table accessor for type BarItemView and conformance BarItemView, (uint64_t)&type metadata for BarItemView, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _UIHostingView);
          lazy protocol witness table accessor for type _UIHostingView<BarItemView> and conformance _UIHostingView<A>();
          ViewRendererHost.preferenceValue<A>(_:)();
          outlined init with copy of _IdentifiedViewTree((uint64_t)v49, (uint64_t)&v38);
          if (v48 == 2
            && (int8x16_t v9 = vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(v40, v44), vorrq_s8(v42, v46)), vorrq_s8(vorrq_s8(v41, v45), vorrq_s8(v43, v47))), vorrq_s8(v38, v39)), !*(void *)&vorr_s8(*(int8x8_t *)v9.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v9, v9, 8uLL))))
          {
            outlined destroy of _IdentifiedViewTree((uint64_t)v49);
            char v14 = &v38;
          }
          else
          {
            outlined destroy of _IdentifiedViewTree((uint64_t)&v38);
            outlined init with copy of _IdentifiedViewTree((uint64_t)v49, (uint64_t)&v38);
            swift_beginAccess();
            uint64_t v10 = v50;
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              uint64_t v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v10 + 2) + 1, 1, v10);
            }
            unint64_t v12 = *((void *)v10 + 2);
            unint64_t v11 = *((void *)v10 + 3);
            unint64_t v13 = v12 + 1;
            if (v12 >= v11 >> 1)
            {
              uint64_t v36 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v11 > 1), v12 + 1, 1, v10);
              unint64_t v13 = v12 + 1;
              uint64_t v10 = v36;
            }
            *((void *)v10 + 2) = v13;
            outlined init with take of _IdentifiedViewTree((uint64_t)&v38, (uint64_t)&v10[168 * v12 + 32]);
            uint64_t v50 = v10;
            char v14 = (int8x16_t *)v49;
          }
          outlined destroy of _IdentifiedViewTree((uint64_t)v14);
        }
      }
    }
    id v15 = objc_msgSend(v5, sel_rightBarButtonItem);
    if (v15)
    {
      char v16 = v15;
      id v17 = objc_msgSend(v15, sel_customView);

      if (v17)
      {
        type metadata accessor for UIHostingController<BridgedNavigationView.RootView>(0, &lazy cache variable for type metadata for UIKitBarItemHost<BarItemView>, (uint64_t (*)(void))lazy protocol witness table accessor for type BarItemView and conformance BarItemView, (uint64_t)&type metadata for BarItemView, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UIKitBarItemHost);
        if (swift_dynamicCastClass())
        {
          type metadata accessor for UIHostingController<BridgedNavigationView.RootView>(0, &lazy cache variable for type metadata for _UIHostingView<BarItemView>, (uint64_t (*)(void))lazy protocol witness table accessor for type BarItemView and conformance BarItemView, (uint64_t)&type metadata for BarItemView, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _UIHostingView);
          lazy protocol witness table accessor for type _UIHostingView<BarItemView> and conformance _UIHostingView<A>();
          ViewRendererHost.preferenceValue<A>(_:)();
          outlined init with copy of _IdentifiedViewTree((uint64_t)v49, (uint64_t)&v38);
          if (v48 == 2
            && (int8x16_t v18 = vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(v40, v44), vorrq_s8(v42, v46)), vorrq_s8(vorrq_s8(v41, v45), vorrq_s8(v43, v47))), vorrq_s8(v38, v39)), !*(void *)&vorr_s8(*(int8x8_t *)v18.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v18, v18, 8uLL))))
          {
            outlined destroy of _IdentifiedViewTree((uint64_t)v49);
            BOOL v23 = &v38;
          }
          else
          {
            outlined destroy of _IdentifiedViewTree((uint64_t)&v38);
            outlined init with copy of _IdentifiedViewTree((uint64_t)v49, (uint64_t)&v38);
            swift_beginAccess();
            unint64_t v19 = v50;
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              unint64_t v19 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v19 + 2) + 1, 1, v19);
            }
            unint64_t v21 = *((void *)v19 + 2);
            unint64_t v20 = *((void *)v19 + 3);
            unint64_t v22 = v21 + 1;
            if (v21 >= v20 >> 1)
            {
              uint64_t v37 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v20 > 1), v21 + 1, 1, v19);
              unint64_t v22 = v21 + 1;
              unint64_t v19 = v37;
            }
            *((void *)v19 + 2) = v22;
            outlined init with take of _IdentifiedViewTree((uint64_t)&v38, (uint64_t)&v19[168 * v21 + 32]);
            uint64_t v50 = v19;
            BOOL v23 = (int8x16_t *)v49;
          }
          outlined destroy of _IdentifiedViewTree((uint64_t)v23);
        }
      }
    }
  }
  id v24 = objc_msgSend(a1, sel_topViewController);
  if (v24)
  {
    unint64_t v25 = v24;
    type metadata accessor for UIHostingController<BridgedNavigationView.RootView>(0, &lazy cache variable for type metadata for UIHostingController<BridgedNavigationView.RootView>, (uint64_t (*)(void))lazy protocol witness table accessor for type BridgedNavigationView.RootView and conformance BridgedNavigationView.RootView, (uint64_t)&type metadata for BridgedNavigationView.RootView, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UIHostingController);
    uint64_t v26 = swift_dynamicCastClass();
    if (v26)
    {
      Swift::String v27 = *(void **)(v26 + direct field offset for UIHostingController.host);
      type metadata accessor for UIHostingController<BridgedNavigationView.RootView>(0, &lazy cache variable for type metadata for _UIHostingView<BridgedNavigationView.RootView>, (uint64_t (*)(void))lazy protocol witness table accessor for type BridgedNavigationView.RootView and conformance BridgedNavigationView.RootView, (uint64_t)&type metadata for BridgedNavigationView.RootView, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _UIHostingView);
      lazy protocol witness table accessor for type _UIHostingView<BridgedNavigationView.RootView> and conformance _UIHostingView<A>();
      id v28 = v27;
      ViewRendererHost.preferenceValue<A>(_:)();
      outlined init with copy of _IdentifiedViewTree((uint64_t)v49, (uint64_t)&v38);
      if (v48 == 2
        && (int8x16_t v29 = vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(v40, v44), vorrq_s8(v42, v46)), vorrq_s8(vorrq_s8(v41, v45), vorrq_s8(v43, v47))), vorrq_s8(v38, v39)), !*(void *)&vorr_s8(*(int8x8_t *)v29.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v29, v29, 8uLL))))
      {
        outlined destroy of _IdentifiedViewTree((uint64_t)v49);
        Swift::String v33 = &v38;
      }
      else
      {
        outlined destroy of _IdentifiedViewTree((uint64_t)&v38);
        outlined init with copy of _IdentifiedViewTree((uint64_t)v49, (uint64_t)&v38);
        swift_beginAccess();
        uint64_t v30 = v50;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v30 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v30 + 2) + 1, 1, v30);
        }
        unint64_t v32 = *((void *)v30 + 2);
        unint64_t v31 = *((void *)v30 + 3);
        if (v32 >= v31 >> 1) {
          uint64_t v30 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v31 > 1), v32 + 1, 1, v30);
        }
        *((void *)v30 + 2) = v32 + 1;
        outlined init with take of _IdentifiedViewTree((uint64_t)&v38, (uint64_t)&v30[168 * v32 + 32]);
        uint64_t v50 = v30;
        Swift::String v33 = (int8x16_t *)v49;
      }
      outlined destroy of _IdentifiedViewTree((uint64_t)v33);
    }
    else
    {
    }
  }
  swift_beginAccess();
  uint64_t result = v50;
  if (*((void *)v50 + 2))
  {
    char v35 = 1;
  }
  else
  {
    *(void *)(a2 + 152) = 0;
    *(_OWORD *)(a2 + 136) = 0u;
    *(_OWORD *)(a2 + 120) = 0u;
    *(_OWORD *)(a2 + 104) = 0u;
    *(_OWORD *)(a2 + 88) = 0u;
    *(_OWORD *)(a2 + 72) = 0u;
    *(_OWORD *)(a2 + 56) = 0u;
    *(_OWORD *)(a2 + 40) = 0u;
    *(_OWORD *)(a2 + 24) = 0u;
    *(_OWORD *)(a2 + 8) = 0u;
    swift_bridgeObjectRelease();
    uint64_t result = 0;
    char v35 = 2;
  }
  *(void *)a2 = result;
  *(unsigned char *)(a2 + 160) = v35;
  return result;
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance BridgedNavigationView.RootView()
{
  return static ModifiedContent<>._viewListCount(inputs:)();
}

uint64_t protocol witness for View.body.getter in conformance BridgedNavigationView.RootView@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = outlined init with copy of _VariadicView_Children.Element(v1, a1);
  *(unsigned char *)(a1 + 96) = 2;
  return result;
}

uint64_t associated type witness table accessor for ViewModifier.Body : View in ContainerBackgroundModifier()
{
  return swift_getOpaqueTypeConformance2();
}

void specialized UINavigationController.updateRootHost<A>(root:environment:transaction:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  id v6 = objc_msgSend(v3, sel_viewControllers);
  type metadata accessor for UIViewController();
  unint64_t v7 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (!(v7 >> 62))
  {
    if (*(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
      goto LABEL_3;
    }
LABEL_21:
    swift_bridgeObjectRelease();
    goto LABEL_22;
  }
  swift_bridgeObjectRetain();
  uint64_t v34 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v34) {
    goto LABEL_21;
  }
LABEL_3:
  if ((v7 & 0xC000000000000001) != 0)
  {
    id v8 = (objc_class *)MEMORY[0x18C117680](0, v7);
  }
  else
  {
    if (!*(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      goto LABEL_27;
    }
    id v8 = (objc_class *)*(id *)(v7 + 32);
  }
  Class isa = v8;
  swift_bridgeObjectRelease();
  type metadata accessor for UIHostingController<BridgedNavigationView.RootView>(0, &lazy cache variable for type metadata for UIHostingController<BridgedNavigationView.RootView>, (uint64_t (*)(void))lazy protocol witness table accessor for type BridgedNavigationView.RootView and conformance BridgedNavigationView.RootView, (uint64_t)&type metadata for BridgedNavigationView.RootView, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UIHostingController);
  uint64_t v10 = swift_dynamicCastClass();
  if (!v10)
  {

LABEL_22:
    outlined init with copy of BridgedNavigationView.RootView(a1, (uint64_t)v40);
    type metadata accessor for UIHostingController<BridgedNavigationView.RootView>(0, &lazy cache variable for type metadata for UIHostingController<BridgedNavigationView.RootView>, (uint64_t (*)(void))lazy protocol witness table accessor for type BridgedNavigationView.RootView and conformance BridgedNavigationView.RootView, (uint64_t)&type metadata for BridgedNavigationView.RootView, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UIHostingController);
    id v36 = objc_allocWithZone(v35);
    id v37 = specialized UIHostingController.init(rootView:)((uint64_t)v40);
    type metadata accessor for _ContiguousArrayStorage<Text>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>, MEMORY[0x1E4FBC838] + 8, MEMORY[0x1E4FBBE00]);
    uint64_t v38 = swift_allocObject();
    *(_OWORD *)(v38 + 16) = xmmword_188351940;
    *(void *)(v38 + 32) = v37;
    v40[0] = v38;
    specialized Array._endMutation()();
    id v23 = v37;
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    objc_msgSend(v3, sel_setViewControllers_, isa);
    goto LABEL_23;
  }
  uint64_t v11 = v10;
  uint64_t v12 = direct field offset for UIHostingController.host;
  unint64_t v13 = *(void **)(v10 + direct field offset for UIHostingController.host);
  char v14 = (void *)MEMORY[0x1E4FBC8C8];
  uint64_t v15 = *(void *)(*(void *)((char *)v13 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v13) + 0x68)) + 64);
  swift_beginAccess();
  if (*(unsigned char *)(v15 + 128) != 1 || a2 == 0)
  {
    outlined init with copy of BridgedNavigationView.RootView(a1, (uint64_t)v40);
    outlined init with copy of BridgedNavigationView.RootView((uint64_t)v40, (uint64_t)v39);
    uint64_t v17 = (uint64_t)v13 + *(void *)((*v14 & *v13) + 0x60);
    swift_beginAccess();
    int8x16_t v18 = v13;
    outlined assign with take of BridgedNavigationView.RootView((uint64_t)v39, v17);
    swift_endAccess();
    v39[0] = 1;
    type metadata accessor for UIHostingController<BridgedNavigationView.RootView>(0, &lazy cache variable for type metadata for _UIHostingView<BridgedNavigationView.RootView>, (uint64_t (*)(void))lazy protocol witness table accessor for type BridgedNavigationView.RootView and conformance BridgedNavigationView.RootView, (uint64_t)&type metadata for BridgedNavigationView.RootView, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _UIHostingView);
    lazy protocol witness table accessor for type _UIHostingView<BridgedNavigationView.RootView> and conformance _UIHostingView<A>();
    ViewRendererHost.invalidateProperties(_:mayDeferUpdate:)();
    outlined destroy of BridgedNavigationView.RootView((uint64_t)v40);
  }
  else
  {
    int8x16_t v18 = v13;
    specialized _UIHostingView.setRootView(_:transaction:)(a1);
  }

  uint64_t v19 = *(void *)(*(void *)(*(void *)(v11 + v12) + *(void *)((*v14 & **(void **)(v11 + v12)) + 0x68)) + 64);
  swift_beginAccess();
  if (*(unsigned char *)(v19 + 128)) {
    goto LABEL_24;
  }
  uint64_t v20 = Transaction.animation.getter();
  swift_release();
  if (!v20) {
    goto LABEL_24;
  }
  objc_msgSend(*(id *)(v11 + v12), sel_frame);
  if (v22 != 0.0 || v21 != 0.0) {
    goto LABEL_24;
  }
  id v23 = *(id *)(v11 + v12);
  id v24 = objc_msgSend(v3, sel_view);
  if (v24)
  {
    unint64_t v25 = v24;
    objc_msgSend(v24, sel_bounds);
    double v27 = v26;
    double v29 = v28;
    double v31 = v30;
    double v33 = v32;

    objc_msgSend(v23, sel_setFrame_, v27, v29, v31, v33);
LABEL_23:

LABEL_24:
    return;
  }
LABEL_27:
  __break(1u);
}

uint64_t initializeWithCopy for BridgedNavigationView.RootView(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v4;
  (**(void (***)(void))(v4 - 8))();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  id v6 = *(void **)(a2 + 80);
  uint64_t v5 = *(void *)(a2 + 88);
  *(void *)(a1 + 80) = v6;
  *(void *)(a1 + 88) = v5;
  swift_retain();
  swift_bridgeObjectRetain();
  id v7 = v6;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for BridgedNavigationView.RootView(uint64_t a1, uint64_t a2)
{
  __swift_assign_boxed_opaque_existential_1((uint64_t *)a1, (uint64_t *)a2);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  long long v4 = *(void **)(a1 + 80);
  uint64_t v5 = *(void **)(a2 + 80);
  *(void *)(a1 + 80) = v5;
  id v6 = v5;

  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for BridgedNavigationView.RootView(uint64_t a1, uint64_t a2)
{
  __swift_destroy_boxed_opaque_existential_1(a1);
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  uint64_t v5 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v5;
  swift_release();
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  id v6 = *(void **)(a1 + 80);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);

  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for BridgedNavigationView.RootView()
{
  return &type metadata for BridgedNavigationView.RootView;
}

uint64_t sub_18829ABB0()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<BridgedNavigationView, _SafeAreaRegionsIgnoringLayout>, ContainerBackgroundModifier> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<ContainerBackgroundModifier>, _BackgroundModifier<AnyView?>> and conformance <> ModifiedContent<A, B>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<_ViewModifier_Content<ContainerBackgroundModifier>, _BackgroundModifier<AnyView?>>, (void (*)(void))lazy protocol witness table accessor for type _ViewModifier_Content<ContainerBackgroundModifier> and conformance _ViewModifier_Content<A>, (void (*)(void))lazy protocol witness table accessor for type _BackgroundModifier<AnyView?> and conformance _BackgroundModifier<A>);
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<BridgedNavigationView, _SafeAreaRegionsIgnoringLayout>, ContainerBackgroundModifier> and conformance <> ModifiedContent<A, B>(unint64_t *a1, void (*a2)(uint64_t), void (*a3)(void), void (*a4)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    a3();
    a4();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void type metadata accessor for ModifiedContent<_ViewModifier_Content<ContainerBackgroundModifier>, _BackgroundModifier<AnyView?>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<_ViewModifier_Content<ContainerBackgroundModifier>, _BackgroundModifier<AnyView?>>)
  {
    type metadata accessor for UIHostingController<BridgedNavigationView.RootView>(255, &lazy cache variable for type metadata for _ViewModifier_Content<ContainerBackgroundModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type ContainerBackgroundModifier and conformance ContainerBackgroundModifier, (uint64_t)&unk_1ED44ED60, MEMORY[0x1E4F408E0]);
    type metadata accessor for _BackgroundModifier<AnyView?>();
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<_ViewModifier_Content<ContainerBackgroundModifier>, _BackgroundModifier<AnyView?>>);
    }
  }
}

void type metadata accessor for UIHostingController<BridgedNavigationView.RootView>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void), uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v9 = a3();
    unint64_t v10 = a5(a1, a4, v9);
    if (!v11) {
      atomic_store(v10, a2);
    }
  }
}

void type metadata accessor for _BackgroundModifier<AnyView?>()
{
  if (!lazy cache variable for type metadata for _BackgroundModifier<AnyView?>)
  {
    type metadata accessor for _ContiguousArrayStorage<Text>(255, &lazy cache variable for type metadata for AnyView?, MEMORY[0x1E4F41618], MEMORY[0x1E4FBB718]);
    lazy protocol witness table accessor for type AnyView? and conformance <A> A?();
    unint64_t v0 = type metadata accessor for _BackgroundModifier();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _BackgroundModifier<AnyView?>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type _ViewModifier_Content<ContainerBackgroundModifier> and conformance _ViewModifier_Content<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type _ViewModifier_Content<ContainerBackgroundModifier> and conformance _ViewModifier_Content<A>;
  if (!lazy protocol witness table cache variable for type _ViewModifier_Content<ContainerBackgroundModifier> and conformance _ViewModifier_Content<A>)
  {
    type metadata accessor for UIHostingController<BridgedNavigationView.RootView>(255, &lazy cache variable for type metadata for _ViewModifier_Content<ContainerBackgroundModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type ContainerBackgroundModifier and conformance ContainerBackgroundModifier, (uint64_t)&unk_1ED44ED60, MEMORY[0x1E4F408E0]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ViewModifier_Content<ContainerBackgroundModifier> and conformance _ViewModifier_Content<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _BackgroundModifier<AnyView?> and conformance _BackgroundModifier<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type _BackgroundModifier<AnyView?> and conformance _BackgroundModifier<A>;
  if (!lazy protocol witness table cache variable for type _BackgroundModifier<AnyView?> and conformance _BackgroundModifier<A>)
  {
    type metadata accessor for _BackgroundModifier<AnyView?>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _BackgroundModifier<AnyView?> and conformance _BackgroundModifier<A>);
  }
  return result;
}

uint64_t associated type witness table accessor for View.Body : View in BridgedNavigationView.RootView()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t EnvironmentValues.labelIconToTitleSpacing.setter()
{
  type metadata accessor for EnvironmentPropertyKey<LabelIconToTitleSpacingKey>();
  _s7SwiftUI28AccessibilityPropertiesEntryVyAA0C17NullableOptionSetVyAA0C10VisibilityVGGACyxGAA03AnycdE0AAWlTm_1(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<LabelIconToTitleSpacingKey> and conformance EnvironmentPropertyKey<A>, (void (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<LabelIconToTitleSpacingKey>);
  swift_retain();
  PropertyList.subscript.setter();
  if (*(void *)(v0 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  return swift_release();
}

uint64_t Label<>.init(_:image:)@<X0>(uint64_t a1@<X8>)
{
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v2 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v4 = v3;
  char v6 = v5;
  uint64_t v8 = v7;
  uint64_t v9 = Image.init(_:bundle:)();
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)a1 = v2;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v6 & 1;
  *(void *)(a1 + 24) = v8;
  *(void *)(a1 + 32) = v9;
  return result;
}

double Label<>.init<A>(_:image:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  closure #1 in Label<>.init<A>(_:image:)(a1, (uint64_t)&v10);
  uint64_t v6 = Image.init(_:bundle:)();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a2 - 8) + 8))(a1, a2);
  char v7 = v11;
  uint64_t v8 = v12;
  double result = *(double *)&v10;
  *(_OWORD *)a3 = v10;
  *(unsigned char *)(a3 + 16) = v7;
  *(void *)(a3 + 24) = v8;
  *(void *)(a3 + 32) = v6;
  return result;
}

uint64_t Label<>.init(_:systemImage:)@<X0>(uint64_t a1@<X4>, uint64_t a2@<X5>, uint64_t a3@<X8>)
{
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v6 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v8 = v7;
  char v10 = v9;
  uint64_t v12 = v11;
  type metadata accessor for ImageProviderBox<Image.NamedImageProvider>();
  uint64_t v13 = swift_allocObject();
  *(void *)(v13 + 16) = a1;
  *(void *)(v13 + 24) = a2;
  *(_DWORD *)(v13 + 32) = 0;
  *(unsigned char *)(v13 + 36) = 1;
  *(_OWORD *)(v13 + 40) = xmmword_18834C6B0;
  *(void *)(v13 + 56) = a1;
  *(void *)(v13 + 64) = a2;
  *(_OWORD *)(v13 + 72) = xmmword_18834C6D0;
  *(unsigned char *)(v13 + 88) = 0;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v8;
  *(unsigned char *)(a3 + 16) = v10 & 1;
  *(void *)(a3 + 24) = v12;
  *(void *)(a3 + 32) = v13;
  return result;
}

double Label<>.init<A>(_:systemImage:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  closure #1 in Label<>.init<A>(_:image:)(a1, (uint64_t)&v15);
  type metadata accessor for ImageProviderBox<Image.NamedImageProvider>();
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = a2;
  *(void *)(v10 + 24) = a3;
  *(_DWORD *)(v10 + 32) = 0;
  *(unsigned char *)(v10 + 36) = 1;
  *(_OWORD *)(v10 + 40) = xmmword_18834C6B0;
  *(void *)(v10 + 56) = a2;
  *(void *)(v10 + 64) = a3;
  *(_OWORD *)(v10 + 72) = xmmword_18834C6D0;
  *(unsigned char *)(v10 + 88) = 0;
  uint64_t v11 = *(void (**)(uint64_t, uint64_t))(*(void *)(a4 - 8) + 8);
  swift_bridgeObjectRetain();
  v11(a1, a4);
  char v12 = v16;
  uint64_t v13 = v17;
  double result = *(double *)&v15;
  *(_OWORD *)a5 = v15;
  *(unsigned char *)(a5 + 16) = v12;
  *(void *)(a5 + 24) = v13;
  *(void *)(a5 + 32) = v10;
  return result;
}

uint64_t Label<>.init(_:image:)@<X0>(uint64_t a1@<X4>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for ImageResource();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v8 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v10 = v9;
  uint64_t v12 = v11;
  char v18 = v13 & 1;
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a1, v4);
  uint64_t v14 = Image.init(_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8))(a1, v4);
  char v16 = v18;
  *(void *)a2 = v8;
  *(void *)(a2 + 8) = v10;
  *(unsigned char *)(a2 + 16) = v16;
  *(void *)(a2 + 24) = v12;
  *(void *)(a2 + 32) = v14;
  return result;
}

__n128 Label<>.init<A>(_:image:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = type metadata accessor for ImageResource();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  uint64_t v11 = (char *)&v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  closure #1 in Label<>.init<A>(_:image:)(a1, (uint64_t)&v14);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
  v16.n128_u64[1] = Image.init(_:)();
  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(a2, v8);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a3 - 8) + 8))(a1, a3);
  char v12 = v15;
  __n128 result = v16;
  *(_OWORD *)a4 = v14;
  *(unsigned char *)(a4 + 16) = v12;
  *(__n128 *)(a4 + 24) = result;
  return result;
}

uint64_t closure #1 in Label<>.init<A>(_:image:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  double v3 = MEMORY[0x1F4188790](a1);
  (*(void (**)(char *, double))(v5 + 16))((char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v3);
  uint64_t result = Text.init<A>(_:)();
  *(void *)a2 = result;
  *(void *)(a2 + 8) = v7;
  *(unsigned char *)(a2 + 16) = v8 & 1;
  *(void *)(a2 + 24) = v9;
  return result;
}

uint64_t sub_18829B7E8()
{
  return swift_getWitnessTable();
}

ValueMetadata *type metadata accessor for AccessibilityShowsLabelIcon()
{
  return &type metadata for AccessibilityShowsLabelIcon;
}

uint64_t protocol witness for static ViewInputPredicate.evaluate(inputs:) in conformance AccessibilityShowsLabelIcon()
{
  lazy protocol witness table accessor for type AccessibilityShowsLabelIcon and conformance AccessibilityShowsLabelIcon();
  PropertyList.subscript.getter();
  return v1;
}

uint64_t protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance AccessibilityShowsLabelIcon()
{
  return PropertyList.subscript.setter();
}

_UNKNOWN **base witness table accessor for _GraphInputsModifier in AccessibilityShowsLabelIcon()
{
  return &protocol witness table for AccessibilityShowsLabelIcon;
}

ValueMetadata *type metadata accessor for LabelIconToTitleSpacingKey()
{
  return &type metadata for LabelIconToTitleSpacingKey;
}

void __swiftcall FloatingPanelWindowStyle.init()()
{
}

void FloatingPanelWindowStyle.configureWindow(_:)()
{
}

ValueMetadata *type metadata accessor for FloatingPanelWindowStyle()
{
  return &type metadata for FloatingPanelWindowStyle;
}

uint64_t EnvironmentValues.appIntentExecutor.getter()
{
  if (*(void *)(v0 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<AppIntentExecutor.Key>();
    lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<AppIntentExecutor?> and conformance _EnvironmentKeyWritingModifier<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<AppIntentExecutor.Key> and conformance EnvironmentPropertyKey<A>, (void (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<AppIntentExecutor.Key>);
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<AppIntentExecutor.Key>();
    lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<AppIntentExecutor?> and conformance _EnvironmentKeyWritingModifier<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<AppIntentExecutor.Key> and conformance EnvironmentPropertyKey<A>, (void (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<AppIntentExecutor.Key>);
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  return v2;
}

uint64_t View.appIntentExecutor(_:)()
{
  return swift_release();
}

uint64_t sub_18829BD64()
{
  return swift_getWitnessTable();
}

void type metadata accessor for _EnvironmentKeyWritingModifier<AppIntentExecutor?>()
{
  if (!lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<AppIntentExecutor?>)
  {
    type metadata accessor for AppIntentExecutor?();
    unint64_t v0 = type metadata accessor for _EnvironmentKeyWritingModifier();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<AppIntentExecutor?>);
    }
  }
}

void type metadata accessor for AppIntentExecutor?()
{
  if (!lazy cache variable for type metadata for AppIntentExecutor?)
  {
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for AppIntentExecutor?);
    }
  }
}

uint64_t initializeWithCopy for AppIntentAction(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  uint64_t v5 = *(void *)(a2 + 8);
  char v6 = *(unsigned char *)(a2 + 16);
  outlined copy of Environment<AppIntentExecutor?>.Content(*(void *)a2, v5, v6);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  *(unsigned char *)(a1 + 16) = v6;
  uint64_t v7 = *(void *)(a2 + 40);
  long long v8 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v8;
  *(void *)(a1 + 40) = v7;
  id v9 = (id)v8;
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for AppIntentAction(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  uint64_t v5 = *(void *)(a2 + 8);
  char v6 = *(unsigned char *)(a2 + 16);
  outlined copy of Environment<AppIntentExecutor?>.Content(*(void *)a2, v5, v6);
  uint64_t v7 = *(void *)a1;
  uint64_t v8 = *(void *)(a1 + 8);
  char v9 = *(unsigned char *)(a1 + 16);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  *(unsigned char *)(a1 + 16) = v6;
  outlined consume of Environment<AppIntentExecutor?>.Content(v7, v8, v9);
  uint64_t v10 = *(void **)(a2 + 24);
  uint64_t v11 = *(void **)(a1 + 24);
  *(void *)(a1 + 24) = v10;
  id v12 = v10;

  uint64_t v13 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v13;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for AppIntentAction(uint64_t a1, uint64_t a2)
{
  char v4 = *(unsigned char *)(a2 + 16);
  uint64_t v5 = *(void *)a1;
  uint64_t v6 = *(void *)(a1 + 8);
  char v7 = *(unsigned char *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(unsigned char *)(a1 + 16) = v4;
  outlined consume of Environment<AppIntentExecutor?>.Content(v5, v6, v7);

  uint64_t v8 = *(void *)(a2 + 40);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 40) = v8;
  swift_release();
  return a1;
}

uint64_t one-time initialization function for logger()
{
  uint64_t v0 = type metadata accessor for Logger();
  __swift_allocate_value_buffer(v0, static AppIntentAction.logger);
  __swift_project_value_buffer(v0, (uint64_t)static AppIntentAction.logger);
  return Logger.init(subsystem:category:)();
}

uint64_t closure #1 in AppIntentAction.perform()(uint64_t a1)
{
  uint64_t v2 = *(void *)a1;
  uint64_t v3 = *(void *)(a1 + 8);
  char v4 = *(unsigned char *)(a1 + 16);
  outlined copy of Environment<AppIntentExecutor?>.Content(*(void *)a1, v3, v4);
  uint64_t v5 = (void (*)(void))specialized Environment.wrappedValue.getter(v2, v3, v4);
  uint64_t v6 = outlined consume of Environment<AppIntentExecutor?>.Content(v2, v3, v4);
  if (!v5) {
    return (*(uint64_t (**)(uint64_t))(a1 + 32))(v6);
  }
  v5(*(void *)(a1 + 24));
  return outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?((uint64_t)v5);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AppIntentAction.CodingKeys()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AppIntentAction.CodingKeys()
{
  return String.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AppIntentAction.CodingKeys()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance AppIntentAction.CodingKeys@<X0>(Swift::String *a1@<X0>, BOOL *a2@<X8>)
{
  Swift::Int v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of protocol witness for RawRepresentable.init(rawValue:) in conformance AppIntentAction.CodingKeys, *a1);
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v3 != 0;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance AppIntentAction.CodingKeys(void *a1@<X8>)
{
  *a1 = 0x6E6F697463416E6CLL;
  a1[1] = 0xE800000000000000;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance AppIntentAction.CodingKeys()
{
  return 0x6E6F697463416E6CLL;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance AppIntentAction.CodingKeys@<X0>(Swift::String string@<0:X0, 8:X1>, BOOL *a2@<X8>)
{
  object = string._object;
  v3._countAndFlagsBits = string._countAndFlagsBits;
  v3._object = object;
  Swift::Int v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of protocol witness for CodingKey.init(stringValue:) in conformance AppIntentAction.CodingKeys, v3);
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v5 != 0;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AppIntentAction.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type AppIntentAction.CodingKeys and conformance AppIntentAction.CodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AppIntentAction.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type AppIntentAction.CodingKeys and conformance AppIntentAction.CodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t closure #1 in AppIntentAction.init(from:)()
{
  uint64_t v0 = type metadata accessor for Logger();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x1F4188790](v0);
  Swift::String v3 = (char *)&v9 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for logger != -1) {
    swift_once();
  }
  uint64_t v4 = __swift_project_value_buffer(v0, (uint64_t)static AppIntentAction.logger);
  (*(void (**)(char *, uint64_t, uint64_t))(v1 + 16))(v3, v4, v0);
  Swift::Int v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v5, v6))
  {
    char v7 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)char v7 = 0;
    _os_log_impl(&dword_1872C6000, v5, v6, "Executing an AppIntent using the default executor is not supported with archiving.", v7, 2u);
    MEMORY[0x18C119C60](v7, -1, -1);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v3, v0);
}

double protocol witness for Decodable.init(from:) in conformance AppIntentAction@<D0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  specialized AppIntentAction.init(from:)(a1, (uint64_t *)v6);
  if (!v2)
  {
    long long v5 = v6[1];
    *a2 = v6[0];
    a2[1] = v5;
    double result = *(double *)&v7;
    a2[2] = v7;
  }
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance AppIntentAction(void *a1)
{
  return specialized AppIntentAction.encode(to:)(a1, *(void *)(v1 + 24));
}

uint64_t specialized AppIntentAction.encode(to:)(void *a1, uint64_t a2)
{
  v18[2] = *(id *)MEMORY[0x1E4F143B8];
  type metadata accessor for KeyedDecodingContainer<AppIntentAction.CodingKeys>(0, &lazy cache variable for type metadata for KeyedEncodingContainer<AppIntentAction.CodingKeys>, MEMORY[0x1E4FBBDE0]);
  uint64_t v5 = v4;
  uint64_t v6 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v8 = (char *)&v18[-1] - v7;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type AppIntentAction.CodingKeys and conformance AppIntentAction.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  uint64_t v9 = self;
  v18[0] = 0;
  id v10 = objc_msgSend(v9, sel_archivedDataWithRootObject_requiringSecureCoding_error_, a2, 1, v18);
  id v11 = v18[0];
  if (v10)
  {
    id v12 = (void *)static Data._unconditionallyBridgeFromObjectiveC(_:)();
    long long v14 = v13;

    v18[0] = v12;
    v18[1] = v14;
    lazy protocol witness table accessor for type Data and conformance Data();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    return outlined consume of Data._Representation((uint64_t)v12, (unint64_t)v14);
  }
  else
  {
    __n128 v16 = v11;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  }
}

uint64_t specialized AppIntentAction.init(from:)@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  double v22 = a2;
  void v23[2] = *(id *)MEMORY[0x1E4F143B8];
  type metadata accessor for KeyedDecodingContainer<AppIntentAction.CodingKeys>(0, &lazy cache variable for type metadata for KeyedDecodingContainer<AppIntentAction.CodingKeys>, MEMORY[0x1E4FBBDC0]);
  uint64_t v5 = v4;
  uint64_t v6 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v8 = (char *)&v20 - v7;
  uint64_t KeyPath = swift_getKeyPath();
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type AppIntentAction.CodingKeys and conformance AppIntentAction.CodingKeys();
  swift_retain();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2)
  {
    swift_release_n();
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  uint64_t v10 = KeyPath;
  lazy protocol witness table accessor for type Data and conformance Data();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v21 = v5;
  id v11 = v23[0];
  id v12 = v23[1];
  uint64_t v13 = self;
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  v23[0] = 0;
  id v15 = objc_msgSend(v13, sel_swiftui_unarchiveTopLevelLNActionWithData_error_, isa, v23);

  if (v23[0])
  {
    v23[0];
    swift_release();

LABEL_5:
    swift_willThrow();
    outlined consume of Data._Representation((uint64_t)v11, (unint64_t)v12);
    swift_release();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v21);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  if (!v15)
  {
    swift_release();
    lazy protocol witness table accessor for type AppIntentAction.Error and conformance AppIntentAction.Error();
    swift_allocError();
    goto LABEL_5;
  }
  uint64_t v20 = *(void (**)(char *, uint64_t))(v6 + 8);
  id v17 = v15;
  v20(v8, v21);
  outlined consume of Data._Representation((uint64_t)v11, (unint64_t)v12);

  id v18 = v17;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);

  uint64_t result = swift_release();
  uint64_t v19 = v22;
  *double v22 = v10;
  v19[1] = 0;
  *((unsigned char *)v19 + 16) = 0;
  v19[3] = (uint64_t)v18;
  v19[4] = (uint64_t)closure #1 in AppIntentAction.init(from:);
  v19[5] = 0;
  return result;
}

unint64_t lazy protocol witness table accessor for type AppIntentAction.CodingKeys and conformance AppIntentAction.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type AppIntentAction.CodingKeys and conformance AppIntentAction.CodingKeys;
  if (!lazy protocol witness table cache variable for type AppIntentAction.CodingKeys and conformance AppIntentAction.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AppIntentAction.CodingKeys and conformance AppIntentAction.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AppIntentAction.CodingKeys and conformance AppIntentAction.CodingKeys;
  if (!lazy protocol witness table cache variable for type AppIntentAction.CodingKeys and conformance AppIntentAction.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AppIntentAction.CodingKeys and conformance AppIntentAction.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AppIntentAction.CodingKeys and conformance AppIntentAction.CodingKeys;
  if (!lazy protocol witness table cache variable for type AppIntentAction.CodingKeys and conformance AppIntentAction.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AppIntentAction.CodingKeys and conformance AppIntentAction.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AppIntentAction.CodingKeys and conformance AppIntentAction.CodingKeys;
  if (!lazy protocol witness table cache variable for type AppIntentAction.CodingKeys and conformance AppIntentAction.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AppIntentAction.CodingKeys and conformance AppIntentAction.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AppIntentAction.Error and conformance AppIntentAction.Error()
{
  unint64_t result = lazy protocol witness table cache variable for type AppIntentAction.Error and conformance AppIntentAction.Error;
  if (!lazy protocol witness table cache variable for type AppIntentAction.Error and conformance AppIntentAction.Error)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AppIntentAction.Error and conformance AppIntentAction.Error);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AppIntentAction.Error and conformance AppIntentAction.Error;
  if (!lazy protocol witness table cache variable for type AppIntentAction.Error and conformance AppIntentAction.Error)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AppIntentAction.Error and conformance AppIntentAction.Error);
  }
  return result;
}

void type metadata accessor for KeyedDecodingContainer<AppIntentAction.CodingKeys>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, unint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = lazy protocol witness table accessor for type AppIntentAction.CodingKeys and conformance AppIntentAction.CodingKeys();
    unint64_t v7 = a3(a1, &type metadata for AppIntentAction.CodingKeys, v6);
    if (!v8) {
      atomic_store(v7, a2);
    }
  }
}

void type metadata accessor for EnvironmentPropertyKey<AppIntentExecutor.Key>()
{
  if (!lazy cache variable for type metadata for EnvironmentPropertyKey<AppIntentExecutor.Key>)
  {
    unint64_t v0 = type metadata accessor for EnvironmentPropertyKey();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<AppIntentExecutor.Key>);
    }
  }
}

uint64_t lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<AppIntentExecutor?> and conformance _EnvironmentKeyWritingModifier<A>(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

ValueMetadata *type metadata accessor for AppIntentExecutor.Key()
{
  return &type metadata for AppIntentExecutor.Key;
}

ValueMetadata *type metadata accessor for AppIntentAction.Error()
{
  return &type metadata for AppIntentAction.Error;
}

unsigned char *storeEnumTagSinglePayload for AppIntentAction.Error(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *uint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)uint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)uint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *uint64_t result = 0;
      break;
    case 2:
      *(_WORD *)uint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x18829CD00);
    case 4:
      *(_DWORD *)uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for AppIntentAction.CodingKeys()
{
  return &type metadata for AppIntentAction.CodingKeys;
}

uint64_t FocusBridge.requestedFocusEnvironments.getter()
{
  uint64_t v1 = *(void **)(v0 + 160);
  if (!v1) {
    return MEMORY[0x1E4FBC860];
  }
  *(void *)(v0 + 160) = 0;
  self;
  uint64_t v2 = swift_dynamicCastObjCClass();
  if (!v2
    || (id v3 = objc_msgSend(self, sel_viewControllerForView_, v2)) == 0)
  {
    swift_unknownObjectRetain();
    id v3 = v1;
  }
  swift_getObjectType();
  uint64_t v4 = swift_conformsToProtocol2();
  if (v4) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (v4) {
    id v6 = v3;
  }
  else {
    id v6 = 0;
  }
  if (v6)
  {
    uint64_t ObjectType = swift_getObjectType();
    uint64_t v8 = *(void (**)(uint64_t, uint64_t))(v5 + 56);
    swift_unknownObjectRetain();
    v8(ObjectType, v5);
    swift_unknownObjectRelease();
  }
  type metadata accessor for _ContiguousArrayStorage<String>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>, MEMORY[0x1E4FBC838] + 8, MEMORY[0x1E4FBBE00]);
  uint64_t v9 = swift_allocObject();
  *(_OWORD *)(v9 + 16) = xmmword_188351940;
  *(void *)(v9 + 32) = v3;
  uint64_t v12 = v9;
  specialized Array._endMutation()();
  uint64_t v10 = v12;
  swift_unknownObjectRelease();
  return v10;
}

uint64_t UIKitContainerFocusItem.defaultFocusItemsContainer()(uint64_t a1, uint64_t a2)
{
  uint64_t result = (*(uint64_t (**)(void))(a2 + 16))();
  if (result)
  {
    uint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 8))(a1, a2);
    if (v5)
    {
      id v6 = (void *)v5;
      MEMORY[0x1F4188790](v5);
      MEMORY[0x1F4188790](v7);
      dispatch thunk of ResponderNode.visit(applying:)();
      swift_release();
    }
    else
    {
      swift_release();
    }
    return 0;
  }
  return result;
}

uint64_t FocusBridge.preferredFocusEnvironments.getter()
{
  uint64_t v1 = v0;
  type metadata accessor for UIKitHostContainer?(0, (unint64_t *)&lazy cache variable for type metadata for Logger?, MEMORY[0x1E4FBD360], MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)&v38 - v3;
  uint64_t v5 = FocusBridge.host.getter();
  if (!v5) {
    return MEMORY[0x1E4FBC860];
  }
  uint64_t v7 = (void *)v5;
  uint64_t v8 = v6;
  swift_getObjectType();
  if (!(*(uint64_t (**)(void))(*(void *)(v8 + 8) + 48))())
  {
LABEL_21:

    return MEMORY[0x1E4FBC860];
  }
  type metadata accessor for ViewResponder();
  uint64_t v9 = swift_dynamicCastClass();
  if (!v9)
  {
    swift_release();
    goto LABEL_21;
  }
  uint64_t v10 = (void *)v9;
  type metadata accessor for FocusNamespaceViewResponder(0);
  uint64_t v11 = swift_dynamicCastClass();
  if (v11 && (*(unsigned char *)(v11 + 224) & 1) == 0)
  {
    *(void *)(v1 + 168) = *(void *)(v11 + 216);
    *(unsigned char *)(v1 + 176) = 0;
  }
  unint64_t v12 = FocusBridge.preferredFocusItems(for:in:)(v10, *(void *)(v1 + 168), *(unsigned char *)(v1 + 176));
  unint64_t v14 = v13;
  uint64_t v43 = v12;
  swift_bridgeObjectRetain();
  if ((static SemanticFeature.isEnabled.getter() & 1) == 0)
  {
    unint64_t v22 = swift_bridgeObjectRetain();
    specialized Array.append<A>(contentsOf:)(v22);
    goto LABEL_24;
  }
  if (!(v12 >> 62))
  {
    if (!*(void *)((v12 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
      goto LABEL_10;
    }
LABEL_24:
    swift_bridgeObjectRelease();
    goto LABEL_25;
  }
  swift_bridgeObjectRetain();
  uint64_t v36 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (v36) {
    goto LABEL_24;
  }
LABEL_10:
  if (v14 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v37 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v37 == 1)
    {
      swift_bridgeObjectRetain();
      __n128 v16 = (void *)_CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v16)
      {
LABEL_13:
        if ((v14 & 0xC000000000000001) != 0)
        {
          __n128 v16 = (void *)MEMORY[0x18C117680](0, v14);
        }
        else
        {
          if (!*(void *)((v14 & 0xFFFFFFFFFFFFFF8) + 0x10))
          {
            __break(1u);
            goto LABEL_44;
          }
          __n128 v16 = *(void **)(v14 + 32);
          swift_unknownObjectRetain();
        }
        swift_bridgeObjectRelease();
        id v17 = objc_msgSend(v16, sel_preferredFocusEnvironments);
        type metadata accessor for _UISceneBSActionHandler(0, (unint64_t *)&lazy cache variable for type metadata for UIFocusEnvironment);
        unint64_t v18 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

        if (!(v18 >> 62))
        {
          uint64_t v19 = *(void *)((v18 & 0xFFFFFFFFFFFFFF8) + 0x10);
          goto LABEL_18;
        }
LABEL_44:
        swift_bridgeObjectRetain();
        uint64_t v19 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
LABEL_18:
        swift_bridgeObjectRelease();
        if (v19)
        {
          swift_bridgeObjectRelease();
          type metadata accessor for _ContiguousArrayStorage<String>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>, MEMORY[0x1E4FBC838] + 8, MEMORY[0x1E4FBBE00]);
          uint64_t v20 = swift_allocObject();
          *(_OWORD *)(v20 + 16) = xmmword_188351940;
          *(void *)(v20 + 32) = v16;
          v42[0] = v20;
          specialized Array._endMutation()();
          uint64_t v43 = v42[0];
        }
        else
        {
          swift_unknownObjectRelease();
        }
        goto LABEL_26;
      }
    }
  }
  else
  {
    uint64_t v15 = *(void *)((v14 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRelease();
    if (v15 == 1)
    {
      __n128 v16 = *(void **)((v14 & 0xFFFFFFFFFFFFFF8) + 0x10);
      if (v16) {
        goto LABEL_13;
      }
    }
  }
LABEL_25:
  swift_bridgeObjectRelease();
LABEL_26:
  static Log.focus.getter();
  uint64_t v23 = type metadata accessor for Logger();
  uint64_t v24 = *(void *)(v23 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48))(v4, 1, v23) == 1)
  {

    swift_release();
    _s7SwiftUI9FocusItemVSgWOhTm_2((uint64_t)v4, (uint64_t)&lazy cache variable for type metadata for Logger?, MEMORY[0x1E4FBD360], MEMORY[0x1E4FBB718], (uint64_t (*)(void))type metadata accessor for UIKitHostContainer?);
  }
  else
  {
    unint64_t v25 = v43;
    swift_bridgeObjectRetain_n();
    id v26 = v7;
    double v27 = Logger.logObject.getter();
    int v28 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v27, (os_log_type_t)v28))
    {
      int v39 = v28;
      uint64_t v29 = swift_slowAlloc();
      uint64_t v38 = swift_slowAlloc();
      v42[0] = v38;
      *(_DWORD *)uint64_t v29 = 134218242;
      uint64_t v40 = v24;
      if (v25 >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v30 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v30 = *(void *)((v25 & 0xFFFFFFFFFFFFFF8) + 0x10);
      }
      swift_bridgeObjectRelease();
      uint64_t v41 = v30;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v29 + 12) = 2080;
      id v31 = v26;
      uint64_t v32 = specialized UIKitFocusItemDescription.init(_:)((uint64_t)v31);
      unint64_t v34 = v33;

      uint64_t v41 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v32, v34, v42);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1872C6000, v27, (os_log_type_t)v39, "preferred focus items queried: %ld for: %s", (uint8_t *)v29, 0x16u);
      uint64_t v35 = v38;
      swift_arrayDestroy();
      MEMORY[0x18C119C60](v35, -1, -1);
      MEMORY[0x18C119C60](v29, -1, -1);

      swift_release();
      uint64_t v24 = v40;
    }
    else
    {

      swift_release();
      swift_bridgeObjectRelease_n();
    }
    (*(void (**)(char *, uint64_t))(v24 + 8))(v4, v23);
  }
  swift_beginAccess();
  return v43;
}

uint64_t UIKitFocusItemDescription.init(_:)(uint64_t a1)
{
  uint64_t v1 = (void *)UIKitFocusItemDescription.Category.init(_:)(a1);
  unint64_t v3 = v2;
  swift_unknownObjectRetain();
  v4._countAndFlagsBits = 60;
  v4._object = (void *)0xE100000000000000;
  String.append(_:)(v4);
  v5._countAndFlagsBits = UIKitFocusItemDescription.Category.name.getter(v1, v3);
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  v6._countAndFlagsBits = 8250;
  v6._object = (void *)0xE200000000000000;
  String.append(_:)(v6);
  _print_unlocked<A, B>(_:_:)();
  uint64_t v7 = UIKitFocusItemDescription.Category.attributes.getter(v1, v3);
  uint64_t v8 = *(void *)(v7 + 16);
  if (v8)
  {
    uint64_t v9 = (void **)(v7 + 40);
    do
    {
      uint64_t v10 = (uint64_t)*(v9 - 1);
      uint64_t v11 = *v9;
      swift_bridgeObjectRetain();
      v12._countAndFlagsBits = v10;
      v12._object = v11;
      String.append(_:)(v12);
      swift_bridgeObjectRelease();
      v13._countAndFlagsBits = 8251;
      v13._object = (void *)0xE200000000000000;
      String.append(_:)(v13);
      swift_bridgeObjectRelease();
      v9 += 2;
      --v8;
    }
    while (v8);
  }
  swift_bridgeObjectRelease();
  v14._countAndFlagsBits = 62;
  v14._object = (void *)0xE100000000000000;
  String.append(_:)(v14);
  swift_unknownObjectRelease();
  outlined consume of UIKitFocusItemDescription<UIView>.Category(v1, v3);
  return 0;
}

unint64_t UIKitContainerFocusItem.childFocusItems(in:)(uint64_t a1, uint64_t a2, double a3, double a4, double a5, double a6)
{
  uint64_t v12 = (*(uint64_t (**)(void))(a2 + 16))();
  if (v12)
  {
    uint64_t v14 = v12;
    char v15 = v13;
    __n128 v16 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(a2 + 8))(a1, a2);
    if (v16)
    {
      id v17 = v16;
      unint64_t v18 = specialized static FocusBridge.focusItems(responderNode:rect:host:skipRoot:)(v14, v16, v15 & 1, a3, a4, a5, a6);
      swift_release();

      return v18;
    }
    swift_release();
  }
  return MEMORY[0x1E4FBC860];
}

void *protocol witness for UIKitContainerFocusItem.host.getter in conformance HostingScrollView.PlatformGroupContainer()
{
  id v1 = v0;
  return v0;
}

id specialized UIKitContainerFocusItem<>.rootResponder()()
{
  id v1 = v0;
  unint64_t v2 = v1;
  while (1)
  {
    swift_getObjectType();
    uint64_t v3 = swift_conformsToProtocol2();
    uint64_t v4 = v3 ? v3 : 0;
    id v5 = v3 ? v2 : 0;
    if (v5) {
      break;
    }
    id v6 = objc_msgSend(v2, sel_parentFocusEnvironment);
    swift_unknownObjectRelease();
    unint64_t v2 = v6;
    if (!v6) {
      return v6;
    }
  }
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t))(v4 + 48);
  if (v5 == v1)
  {
    id v6 = (id)v8(ObjectType, v4);
LABEL_41:
    swift_unknownObjectRelease();
    return v6;
  }
  v8(ObjectType, v4);
  swift_release();
  swift_getObjectType();
  uint64_t v9 = swift_conformsToProtocol2();
  if (v9) {
    uint64_t v10 = v9;
  }
  else {
    uint64_t v10 = 0;
  }
  if (v9) {
    id v11 = v1;
  }
  else {
    id v11 = 0;
  }
  if (!v11) {
    goto LABEL_22;
  }
  uint64_t v12 = swift_getObjectType();
  id v13 = v1;
  uint64_t v14 = UIFocusEnvironment.nearestRenderer()();
  if (v14)
  {
    id v15 = v14;
    swift_unknownObjectRelease();
    if (v5 == v15)
    {
      id v6 = (id)(*(uint64_t (**)(uint64_t, uint64_t))(v10 + 48))(v12, v10);

      goto LABEL_41;
    }
  }

LABEL_22:
  id v27 = v1;
  id v16 = v1;
  while (1)
  {
    swift_getObjectType();
    uint64_t v17 = swift_conformsToProtocol2();
    if (v17) {
      uint64_t v18 = v17;
    }
    else {
      uint64_t v18 = 0;
    }
    if (v17) {
      id v19 = v16;
    }
    else {
      id v19 = 0;
    }
    if (!v19) {
      goto LABEL_24;
    }
    uint64_t v20 = swift_getObjectType();
    uint64_t v21 = *(uint64_t (**)(uint64_t, uint64_t))(v18 + 8);
    swift_unknownObjectRetain();
    uint64_t v22 = v21(v20, v18);
    if (v22) {
      break;
    }
    swift_unknownObjectRelease();
LABEL_24:
    id v6 = objc_msgSend(v16, sel_parentFocusEnvironment, v27);
    swift_unknownObjectRelease();
    id v16 = v6;
    if (!v6) {
      goto LABEL_41;
    }
  }
  id v6 = (id)v22;
  uint64_t v23 = v22 + 16;
  swift_beginAccess();
  uint64_t v24 = MEMORY[0x18C119DF0](v23);
  if (!v24)
  {
    swift_unknownObjectRelease();
    goto LABEL_37;
  }
  uint64_t v25 = v24;
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  if ((id)v25 != v5)
  {
LABEL_37:
    swift_release();
    goto LABEL_24;
  }
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  return v6;
}

id UIKitContainerFocusItem<>.rootResponder()()
{
  id v1 = UIFocusEnvironment.nearestRenderer()();
  if (!v1) {
    return 0;
  }
  uint64_t v3 = v2;
  if (v1 == v0)
  {
    uint64_t ObjectType = swift_getObjectType();
    id v4 = (id)(*(uint64_t (**)(uint64_t, uint64_t))(v3 + 48))(ObjectType, v3);
  }
  else
  {
    id v4 = UIFocusEnvironment.nearestResponder(in:)(v1, v2);
  }
  swift_unknownObjectRelease();
  return v4;
}

uint64_t UIKitContainerFocusResponderItem.base.getter()
{
  return swift_weakLoadStrong();
}

void UIKitContainerFocusResponderItem.host.getter()
{
}

double UIKitContainerFocusResponderItem.frame.getter()
{
  return *(double *)(v0 + direct field offset for UIKitContainerFocusResponderItem.frame);
}

void UIKitContainerFocusResponderItem.frame.setter(double a1, double a2, double a3, double a4)
{
  id v5 = (double *)(v4 + direct field offset for UIKitContainerFocusResponderItem.frame);
  *id v5 = a1;
  v5[1] = a2;
  _OWORD v5[2] = a3;
  void v5[3] = a4;
}

uint64_t UIKitContainerFocusResponderItem.responder.getter()
{
  return swift_weakLoadStrong();
}

Swift::Void __swiftcall UIKitContainerFocusResponderItem.setNeedsFocusUpdate()()
{
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIFocusSystem);
  id v1 = (void *)static UIFocusSystem.focusSystem(for:)();
  if (v1)
  {
    id v2 = v1;
    objc_msgSend(v1, sel_requestFocusUpdateToEnvironment_, v0);
  }
}

Swift::Void __swiftcall UIKitContainerFocusResponderItem.updateFocusIfNeeded()()
{
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIFocusSystem);
  id v0 = (id)static UIFocusSystem.focusSystem(for:)();
  objc_msgSend(v0, sel_updateFocusIfNeeded);
}

uint64_t UIKitContainerFocusResponderItem.cachedCoordinateSpace.setter(uint64_t a1)
{
  *(void *)(v1 + direct field offset for UIKitContainerFocusResponderItem.cachedCoordinateSpace) = a1;
  return swift_unknownObjectRelease();
}

unint64_t UIKitContainerFocusResponderItem.focusItems(in:)(double a1, double a2, double a3, double a4)
{
  uint64_t v8 = type metadata accessor for UIKitContainerFocusResponderItem();

  return UIKitContainerFocusItem.childFocusItems(in:)(v8, (uint64_t)&protocol witness table for UIKitContainerFocusResponderItem<A>, a1, a2, a3, a4);
}

void *protocol witness for UIKitContainerFocusItem.host.getter in conformance _UIHostingView<A1>()
{
  id v0 = (void *)FocusStoreLocation.id.getter();
  id v1 = v0;
  return v0;
}

Swift::Void __swiftcall AnyUIKitHostedFocusItem.ensureHost()()
{
  uint64_t v2 = v1;
  uint64_t v3 = v0;
  uint64_t v4 = (void *)(*(uint64_t (**)(void))(v1 + 8))();
  if (v4)
  {

    return;
  }
  id v5 = *(uint64_t (**)(uint64_t, uint64_t))(v2 + 48);
  if (v5(v3, v2))
  {
    type metadata accessor for UIViewResponder();
    while (1)
    {
      uint64_t v6 = swift_dynamicCastClass();
      if (v6) {
        break;
      }
      swift_retain();
      uint64_t v7 = dispatch thunk of ResponderNode.nextResponder.getter();
      swift_release_n();
      if (!v7) {
        goto LABEL_11;
      }
    }
    id v8 = (id)MEMORY[0x18C119DF0](v6 + 40);
    if (v8)
    {
LABEL_14:
      id v16 = (char **)v8;
      type metadata accessor for _ContiguousArrayStorage<String>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>, MEMORY[0x1E4FBC838] + 8, MEMORY[0x1E4FBBE00]);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_188351940;
      *(void *)(inited + 32) = v16;
      id v33 = (id)inited;
      specialized Array._endMutation()();
      id v18 = v33;
      if ((unint64_t)v33 >> 62)
      {
LABEL_46:
        uint64_t v29 = v16;
        swift_bridgeObjectRetain();
        uint64_t v30 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        uint64_t v32 = v16;
        if (v30) {
          goto LABEL_16;
        }
      }
      else
      {
        uint64_t v19 = *(void *)(((unint64_t)v33 & 0xFFFFFFFFFFFFFF8) + 0x10);
        uint64_t v20 = v16;
        uint64_t v32 = v16;
        if (v19)
        {
LABEL_16:
          id v16 = &selRef_showsMenuAsPrimaryAction;
          while (1)
          {
            unint64_t v21 = (unint64_t)v18 >> 62;
            if ((unint64_t)v18 >> 62)
            {
              swift_bridgeObjectRetain();
              uint64_t v31 = _CocoaArrayWrapper.endIndex.getter();
              swift_bridgeObjectRelease();
              if (!v31)
              {
                __break(1u);
                return;
              }
              swift_bridgeObjectRetain();
              uint64_t v24 = _CocoaArrayWrapper.endIndex.getter();
              swift_bridgeObjectRelease();
              if (!v24) {
                goto LABEL_43;
              }
            }
            else if (!*(void *)(((unint64_t)v18 & 0xFFFFFFFFFFFFFF8) + 0x10))
            {
              __break(1u);
LABEL_43:
              __break(1u);
LABEL_44:
              __break(1u);
LABEL_45:
              __break(1u);
              goto LABEL_46;
            }
            if (((unint64_t)v18 & 0xC000000000000001) != 0)
            {
              id v22 = (id)MEMORY[0x18C117680](0, v18);
              if (!v21) {
                goto LABEL_22;
              }
            }
            else
            {
              if (!*(void *)(((unint64_t)v18 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
                goto LABEL_44;
              }
              id v22 = *((id *)v18 + 4);
              if (!v21)
              {
LABEL_22:
                uint64_t v23 = *(void *)(((unint64_t)v18 & 0xFFFFFFFFFFFFFF8) + 0x10);
                goto LABEL_28;
              }
            }
            swift_bridgeObjectRetain();
            uint64_t v23 = _CocoaArrayWrapper.endIndex.getter();
            swift_bridgeObjectRelease();
LABEL_28:
            if (!v23) {
              goto LABEL_45;
            }
            specialized Array.replaceSubrange<A>(_:with:)(0, 1);
            swift_getObjectType();
            if (swift_conformsToProtocol2()) {
              id v25 = v22;
            }
            else {
              id v25 = 0;
            }
            if (v25)
            {
              swift_bridgeObjectRelease();
              AnyUIKitHostedFocusItem.addToHostIfNeeded(_:)(v22, v3, v2);

              goto LABEL_48;
            }
            id v26 = objc_msgSend(v22, sel_subviews);
            type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIView);
            unint64_t v27 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

            specialized Array.append<A>(contentsOf:)(v27);
            id v18 = v33;
            if ((unint64_t)v33 >> 62)
            {
              swift_bridgeObjectRetain();
              uint64_t v28 = _CocoaArrayWrapper.endIndex.getter();
              swift_bridgeObjectRelease();
              if (!v28) {
                break;
              }
            }
            else if (!*(void *)(((unint64_t)v33 & 0xFFFFFFFFFFFFFF8) + 0x10))
            {
              break;
            }
          }
        }
      }

      swift_bridgeObjectRelease();
LABEL_48:
      swift_release();
      return;
    }
  }
LABEL_11:
  uint64_t v9 = v5(v3, v2);
  if (v9)
  {
    uint64_t v10 = v9;
    uint64_t v11 = v9 + 16;
    swift_beginAccess();
    uint64_t v12 = MEMORY[0x18C119DF0](v11);
    uint64_t v13 = *(void *)(v10 + 24);
    swift_release();
    if (!v12) {
      goto LABEL_48;
    }
    uint64_t ObjectType = swift_getObjectType();
    uint64_t v15 = type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIView);
    (*(void (**)(id *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t))(v13 + 16))(&v33, v15, v15, ObjectType, v13);
    swift_unknownObjectRelease();
    id v8 = v33;
    if (!v33) {
      goto LABEL_48;
    }
    goto LABEL_14;
  }

  swift_release();
}

uint64_t FocusBridge.preferredFocusItems(for:in:)(void *a1, uint64_t a2, char a3)
{
  if (static SemanticFeature.isEnabled.getter())
  {
    uint64_t v6 = swift_conformsToProtocol2();
    uint64_t v7 = v6 ? v6 : 0;
    id v8 = v6 ? a1 : 0;
    if (v8)
    {
      uint64_t v9 = *v8;
      uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t))(v7 + 40);
      swift_retain();
      char v11 = v10(v9, v7);
      swift_release();
      if ((v11 & 1) == 0) {
        return MEMORY[0x1E4FBC860];
      }
    }
  }
  uint64_t v12 = a3 & 1;
  uint64_t v13 = swift_conformsToProtocol2();
  if (v13) {
    uint64_t v14 = v13;
  }
  else {
    uint64_t v14 = 0;
  }
  if (v13) {
    uint64_t v15 = a1;
  }
  else {
    uint64_t v15 = 0;
  }
  if (!v15)
  {
LABEL_37:
    v70[0] = MEMORY[0x1E4FBC860];
    *(void *)&v67[0] = MEMORY[0x1E4FBC860];
    unint64_t v25 = dispatch thunk of ViewResponder.children.getter();
    unint64_t v26 = v25;
    if (v25 >> 62)
    {
      uint64_t v17 = _CocoaArrayWrapper.endIndex.getter();
      if (v17) {
        goto LABEL_39;
      }
    }
    else
    {
      uint64_t v17 = *(void *)((v25 & 0xFFFFFFFFFFFFFF8) + 0x10);
      if (v17)
      {
LABEL_39:
        if (v17 >= 1)
        {
          uint64_t v27 = 0;
          while (1)
          {
            if ((v26 & 0xC000000000000001) != 0)
            {
              uint64_t v31 = MEMORY[0x18C117680](v27, v26);
            }
            else
            {
              uint64_t v31 = *(void *)(v26 + 8 * v27 + 32);
              swift_retain();
            }
            uint64_t v32 = swift_conformsToProtocol2();
            if (v32) {
              uint64_t v33 = v32;
            }
            else {
              uint64_t v33 = 0;
            }
            if (v32) {
              unint64_t v34 = (uint64_t *)v31;
            }
            else {
              unint64_t v34 = 0;
            }
            if (v34)
            {
              uint64_t v35 = *v34;
              uint64_t v36 = *(uint64_t (**)(uint64_t, uint64_t))(v33 + 48);
              swift_retain();
              if (v36(v35, v33))
              {
                uint64_t v37 = (*(uint64_t (**)(uint64_t, uint64_t))(v33 + 56))(v35, v33);
                if (v38)
                {
                  if (v12) {
                    goto LABEL_57;
                  }
                }
                else if (!v12 && v37 == a2)
                {
LABEL_57:
                  unint64_t v39 = FocusBridge.preferredFocusItems(for:in:)(v31, a2, v12);
                  unint64_t v41 = v40;
                  specialized Array.append<A>(contentsOf:)(v39);
LABEL_67:
                  specialized Array.append<A>(contentsOf:)(v41);
                  swift_release();
                  goto LABEL_42;
                }
              }
              swift_release();
            }
            type metadata accessor for FocusNamespaceViewResponder(0);
            uint64_t v42 = swift_dynamicCastClass();
            if (v42 && (*(unsigned char *)(v42 + 224) & 1) == 0)
            {
              uint64_t v43 = *(void *)(v42 + 216);
              if (v12)
              {
                swift_retain();
                goto LABEL_66;
              }
              if (v43 != a2)
              {
                uint64_t v44 = swift_retain();
                unint64_t v45 = FocusBridge.preferredFocusItems(for:in:)(v44, a2, 0);
                swift_bridgeObjectRelease();
                specialized Array.append<A>(contentsOf:)(v45);
LABEL_66:
                unint64_t v46 = FocusBridge.preferredFocusItems(for:in:)(v31, v43, 0);
                unint64_t v41 = v47;
                specialized Array.append<A>(contentsOf:)(v46);
                goto LABEL_67;
              }
            }
            unint64_t v28 = FocusBridge.preferredFocusItems(for:in:)(v31, a2, v12);
            unint64_t v30 = v29;
            specialized Array.append<A>(contentsOf:)(v28);
            specialized Array.append<A>(contentsOf:)(v30);
LABEL_42:
            ++v27;
            swift_release();
            if (v17 == v27)
            {
              swift_bridgeObjectRelease();
              return v70[0];
            }
          }
        }
        __break(1u);
        goto LABEL_100;
      }
    }
    swift_bridgeObjectRelease();
    return MEMORY[0x1E4FBC860];
  }
  swift_retain();
  uint64_t v16 = FocusBridge.host.getter();
  if (!v16)
  {
LABEL_36:
    swift_release();
    goto LABEL_37;
  }
  uint64_t v17 = v16;
  (*(void (**)(void *__return_ptr, void, uint64_t))(v14 + 16))(v70, *v15, v14);
  if (!v73 && v74 == 1)
  {

    swift_release();
    _s7SwiftUI9FocusItemVSgWOhTm_2((uint64_t)v70, (uint64_t)&lazy cache variable for type metadata for FocusItem?, (uint64_t)&type metadata for FocusItem, MEMORY[0x1E4FBB718], (uint64_t (*)(void))type metadata accessor for _ContiguousArrayStorage<String>);
    goto LABEL_37;
  }
  outlined init with copy of FocusItem.Base((uint64_t)v70, (uint64_t)v67);
  if (v68 != 1)
  {
    outlined destroy of FocusItem.Base((uint64_t)v67);
    outlined destroy of FocusItem((uint64_t)v70);
    goto LABEL_35;
  }
  outlined init with take of WeakBox<UIFocusItem>((uint64_t)v67, (uint64_t)&v69);
  id v18 = (void *)MEMORY[0x18C119DF0](&v69);
  _s7SwiftUI7WeakBoxVySo11UIFocusItem_pGWOhTm_0((uint64_t)&v69, &lazy cache variable for type metadata for WeakBox<UIFocusItem>, (uint64_t)&lazy cache variable for type metadata for UIFocusItem, (uint64_t)&protocolRef_UIFocusItem, (void (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _UISceneBSActionHandler);
  outlined destroy of FocusItem((uint64_t)v70);
  if (!v18)
  {
LABEL_35:

    goto LABEL_36;
  }
  self;
  if (!swift_dynamicCastObjCClass() && !objc_msgSend(v18, sel_canBecomeFocused))
  {
    swift_release();

    swift_unknownObjectRelease();
    goto LABEL_37;
  }
  long long v69 = v18;
  type metadata accessor for _UISceneBSActionHandler(0, (unint64_t *)&lazy cache variable for type metadata for UIFocusItem);
  type metadata accessor for UIKitHostContainer();
  swift_unknownObjectRetain();
  if (!swift_dynamicCast())
  {
    uint64_t v68 = 0;
    memset(v67, 0, sizeof(v67));
    _s7SwiftUI9FocusItemVSgWOhTm_2((uint64_t)v67, (uint64_t)&lazy cache variable for type metadata for UIKitHostContainer?, (uint64_t)type metadata accessor for UIKitHostContainer, MEMORY[0x1E4FBB718], (uint64_t (*)(void))type metadata accessor for UIKitHostContainer?);
    swift_getObjectType();
    uint64_t v48 = swift_conformsToProtocol2();
    if (v48) {
      uint64_t v49 = v48;
    }
    else {
      uint64_t v49 = 0;
    }
    if (v48) {
      uint64_t v50 = v18;
    }
    else {
      uint64_t v50 = 0;
    }
    if (v50)
    {
      uint64_t ObjectType = swift_getObjectType();
      swift_unknownObjectRetain();
      id v52 = (id)v17;
      AnyUIKitHostedFocusItem.addToHostIfNeeded(_:)(v52, ObjectType, v49);
      swift_unknownObjectRelease();
    }
    else
    {
      self;
      uint64_t v54 = swift_dynamicCastObjCClass();
      if (v54)
      {
        uint64_t v55 = v54;
        uint64_t v56 = self;
        swift_unknownObjectRetain();
        id v57 = objc_msgSend(v56, sel_viewControllerForView_, v55);
        if (v57)
        {
          id v58 = v57;
          type metadata accessor for _ContiguousArrayStorage<String>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>, MEMORY[0x1E4FBC838] + 8, MEMORY[0x1E4FBBE00]);
          uint64_t v59 = swift_allocObject();
          *(_OWORD *)(v59 + 16) = xmmword_188351940;
          *(void *)(v59 + 32) = v58;
          v70[0] = v59;
          specialized Array._endMutation()();
          swift_release();

          swift_unknownObjectRelease_n();
          return MEMORY[0x1E4FBC860];
        }
        swift_unknownObjectRelease();
      }
    }
    type metadata accessor for _ContiguousArrayStorage<String>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>, MEMORY[0x1E4FBC838] + 8, MEMORY[0x1E4FBBE00]);
    uint64_t v53 = swift_allocObject();
    *(_OWORD *)(v53 + 16) = xmmword_188351940;
    *(void *)(v53 + 32) = v18;
    v70[0] = v53;
    specialized Array._endMutation()();
    swift_release();

    return MEMORY[0x1E4FBC860];
  }
  outlined init with take of OptionalBinaryInteger(v67, (uint64_t)v70);
  uint64_t v19 = v71;
  uint64_t v20 = v72;
  __swift_project_boxed_opaque_existential_1(v70, v71);
  unint64_t v21 = UIKitHostContainer.focusItems(in:)(a2, v12, v19, v20);
  uint64_t v22 = v21;
  unint64_t v3 = v23;
  if (!(v21 >> 62))
  {
    uint64_t v24 = v21 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain();
    dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter();
    type metadata accessor for _UISceneBSActionHandler(0, (unint64_t *)&lazy cache variable for type metadata for UIFocusEnvironment);
    if (swift_dynamicCastMetatype() || (uint64_t v60 = *(void *)((v22 & 0xFFFFFFFFFFFFFF8) + 0x10)) == 0)
    {
LABEL_28:
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v61 = v24 + 32;
      while (swift_dynamicCastObjCProtocolConditional())
      {
        v61 += 8;
        if (!--v60) {
          goto LABEL_28;
        }
      }
      swift_bridgeObjectRelease();
      uint64_t v22 = v24 | 1;
    }
    goto LABEL_29;
  }
LABEL_100:
  type metadata accessor for _UISceneBSActionHandler(0, (unint64_t *)&lazy cache variable for type metadata for UIFocusEnvironment);
  swift_bridgeObjectRetain();
  uint64_t v65 = _bridgeCocoaArray<A>(_:)();
  swift_bridgeObjectRelease_n();
  uint64_t v22 = v65;
LABEL_29:
  if (v3 >> 62)
  {
    type metadata accessor for _UISceneBSActionHandler(0, (unint64_t *)&lazy cache variable for type metadata for UIFocusEnvironment);
    swift_bridgeObjectRetain();
    _bridgeCocoaArray<A>(_:)();
    swift_unknownObjectRelease();

    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRetain();
    dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter();
    type metadata accessor for _UISceneBSActionHandler(0, (unint64_t *)&lazy cache variable for type metadata for UIFocusEnvironment);
    if (!swift_dynamicCastMetatype())
    {
      uint64_t v62 = *(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
      if (v62)
      {
        uint64_t v63 = (v3 & 0xFFFFFFFFFFFFFF8) + 32;
        do
        {
          if (!swift_dynamicCastObjCProtocolConditional()) {
            break;
          }
          v63 += 8;
          --v62;
        }
        while (v62);
      }
    }
    swift_unknownObjectRelease();
  }
  swift_bridgeObjectRelease();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v70);
  return v22;
}

uint64_t UIKitHostContainer.focusItems(in:)(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  char v8 = (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 16))(a3, a4);
  uint64_t v9 = MEMORY[0x1E4FBC860];
  if ((v8 & 1) == 0)
  {
    uint64_t v18 = MEMORY[0x1E4FBC860];
    uint64_t v19 = MEMORY[0x1E4FBC860];
    uint64_t v10 = (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 8))(a3, a4);
    uint64_t v11 = *(void *)(v10 + 16);
    if (v11)
    {
      char v12 = a2 & 1;
      uint64_t v13 = (uint64_t *)(v10 + 40);
      do
      {
        uint64_t v14 = *v13;
        uint64_t ObjectType = swift_getObjectType();
        uint64_t v16 = swift_unknownObjectRetain();
        specialized project #1 <A><A1>(_:) in UIKitHostContainer.focusItems(in:)(v16, a1, v12, &v19, &v18, a3, ObjectType, a4, v14);
        swift_unknownObjectRelease();
        v13 += 2;
        --v11;
      }
      while (v11);
    }
    swift_bridgeObjectRelease();
    swift_beginAccess();
    uint64_t v9 = v19;
    swift_beginAccess();
  }
  return v9;
}

void AnyUIKitHostedFocusItem.addToHostIfNeeded(_:)(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  type metadata accessor for UIKitHostContainer?(0, (unint64_t *)&lazy cache variable for type metadata for Logger?, MEMORY[0x1E4FBD360], MEMORY[0x1E4FBB718]);
  double v9 = MEMORY[0x1F4188790](v8 - 8);
  uint64_t v11 = (char *)&v32 - v10;
  char v12 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, double))(a3 + 8))(a2, a3, v9);
  if (v12)
  {
  }
  else
  {
    static Log.focus.getter();
    uint64_t v13 = type metadata accessor for Logger();
    uint64_t v14 = *(void *)(v13 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v11, 1, v13) == 1)
    {
      _s7SwiftUI9FocusItemVSgWOhTm_2((uint64_t)v11, (uint64_t)&lazy cache variable for type metadata for Logger?, MEMORY[0x1E4FBD360], MEMORY[0x1E4FBB718], (uint64_t (*)(void))type metadata accessor for UIKitHostContainer?);
    }
    else
    {
      swift_unknownObjectRetain_n();
      id v15 = a1;
      uint64_t v16 = Logger.logObject.getter();
      os_log_type_t v17 = static os_log_type_t.default.getter();
      int v18 = v17;
      if (os_log_type_enabled(v16, v17))
      {
        uint64_t v19 = swift_slowAlloc();
        uint64_t v37 = v14;
        uint64_t v20 = v19;
        uint64_t v36 = swift_slowAlloc();
        uint64_t v39 = v36;
        *(_DWORD *)uint64_t v20 = 136315394;
        uint64_t v33 = v20 + 4;
        uint64_t v21 = UIKitFocusItemDescription.init(_:)(v4);
        os_log_t v35 = v16;
        uint64_t v38 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v21, v22, &v39);
        unint64_t v34 = &v39;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_unknownObjectRelease();
        swift_bridgeObjectRelease();
        *(_WORD *)(v20 + 12) = 2080;
        uint64_t v32 = v20 + 14;
        id v23 = v15;
        uint64_t v24 = specialized UIKitFocusItemDescription.init(_:)(v23);
        LODWORD(v33) = v18;
        unint64_t v26 = v25;

        uint64_t v38 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v24, v26, &v39);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        os_log_t v27 = v35;
        _os_log_impl(&dword_1872C6000, v35, (os_log_type_t)v33, "adding unmanaged: %s to: %s", (uint8_t *)v20, 0x16u);
        uint64_t v28 = v36;
        swift_arrayDestroy();
        MEMORY[0x18C119C60](v28, -1, -1);
        uint64_t v29 = v20;
        uint64_t v14 = v37;
        MEMORY[0x18C119C60](v29, -1, -1);
      }
      else
      {

        swift_unknownObjectRelease_n();
      }
      (*(void (**)(char *, uint64_t))(v14 + 8))(v11, v13);
    }
    unint64_t v30 = *(void (**)(void *, uint64_t, uint64_t))(a3 + 16);
    id v31 = a1;
    v30(a1, a2, a3);
  }
}

uint64_t static FocusBridge.focusItem(_:in:)@<X0>(uint64_t result@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  if (!result) {
    goto LABEL_17;
  }
  swift_getObjectType();
  swift_unknownObjectRetain();
  uint64_t v7 = UIFocusEnvironment.nearestRenderer()();
  if (!v7)
  {
LABEL_16:
    uint64_t result = swift_unknownObjectRelease();
LABEL_17:
    *(_OWORD *)(a4 + 16) = 0u;
    *(_OWORD *)(a4 + 32) = 0u;
    *(_OWORD *)a4 = 0u;
    *(void *)(a4 + 48) = 1;
    *(_DWORD *)(a4 + 56) = 0;
    return result;
  }
  uint64_t v8 = (uint64_t)v7;
  swift_getObjectType();
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIView);
  double v9 = (void *)dynamic_cast_existential_1_superclass_conditional(v8);
  if (!v9)
  {
    swift_unknownObjectRelease();
    goto LABEL_16;
  }
  memset(v23, 0, sizeof(v23));
  uint64_t v24 = 1;
  int v25 = 0;
  if (v9 != a2 && !objc_msgSend(v9, sel_isDescendantOfView_, a2))
  {
    if ((UIFocusEnvironment.contains(_:)() & 1) != 0
      && (type metadata accessor for ListTableViewCell(), (uint64_t v15 = swift_dynamicCastClass()) != 0)
      && (uint64_t v16 = v15, (v17 = *(void **)(v15 + OBJC_IVAR____TtC7SwiftUI17ListTableViewCell_host)) != 0))
    {
      swift_unknownObjectRelease();
      if (v17 == a2)
      {
        _s7SwiftUI9FocusItemVSgWOhTm_2((uint64_t)v23, (uint64_t)&lazy cache variable for type metadata for FocusItem?, (uint64_t)&type metadata for FocusItem, MEMORY[0x1E4FBB718], (uint64_t (*)(void))type metadata accessor for _ContiguousArrayStorage<String>);
        uint64_t v18 = v16 + OBJC_IVAR____TtC7SwiftUI17ListTableViewCell_focusItem;
        swift_beginAccess();
        outlined init with copy of FocusItem?(v18, (uint64_t)v23);
      }
    }
    else
    {
      swift_unknownObjectRelease();
    }
    swift_unknownObjectRelease();
    return outlined init with take of FocusItem?((uint64_t)v23, a4);
  }
  id v10 = UIFocusEnvironment.nearestResponder(in:)(a2, a3);
  if (v10)
  {
    id v11 = v10;
    uint64_t v12 = swift_conformsToProtocol2();
    if (v12) {
      uint64_t v13 = v12;
    }
    else {
      uint64_t v13 = 0;
    }
    if (v12) {
      id v14 = v11;
    }
    else {
      id v14 = 0;
    }
    if (v14) {
      goto LABEL_24;
    }
    swift_release();
  }
  uint64_t v13 = 0;
LABEL_24:
  uint64_t v20 = 0;
  swift_weakInit();
  int v21 = 0;
  swift_unknownObjectWeakInit();
  swift_unknownObjectWeakAssign();
  outlined init with take of WeakBox<UIFocusItem>((uint64_t)v22, (uint64_t)v19);
  swift_unknownObjectRelease();
  unsigned char v19[32] = 1;
  uint64_t v20 = v13;
  swift_weakAssign();
  swift_release();
  v19[33] = 0;
  outlined init with take of FocusItem((uint64_t)v19, (uint64_t)v22);
  swift_unknownObjectRelease();
  _s7SwiftUI9FocusItemVSgWOhTm_2((uint64_t)v23, (uint64_t)&lazy cache variable for type metadata for FocusItem?, (uint64_t)&type metadata for FocusItem, MEMORY[0x1E4FBB718], (uint64_t (*)(void))type metadata accessor for _ContiguousArrayStorage<String>);
  outlined init with take of FocusItem?((uint64_t)v22, (uint64_t)v23);
  return outlined init with take of FocusItem?((uint64_t)v23, a4);
}

void AnyUIKitHostedFocusItem.move(toParent:)(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  type metadata accessor for UIKitHostContainer?(0, (unint64_t *)&lazy cache variable for type metadata for Logger?, MEMORY[0x1E4FBD360], MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v8 - 8);
  id v10 = (char *)&v60 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v12 = MEMORY[0x1F4188790](v11);
  id v14 = (char *)&v60 - v13;
  uint64_t v15 = *(uint64_t (**)(uint64_t, uint64_t, double))(a3 + 8);
  uint64_t v16 = (void *)v15(a2, a3, v12);
  if (v16)
  {
    os_log_type_t v17 = v16;

    if (a1 && v17 == a1) {
      return;
    }
  }
  else if (!a1)
  {
    return;
  }
  uint64_t v18 = ((uint64_t (*)(uint64_t, uint64_t))v15)(a2, a3);
  if (v18)
  {
    uint64_t v19 = (char *)v18;
    static Log.focus.getter();
    uint64_t v20 = type metadata accessor for Logger();
    uint64_t v70 = *(void *)(v20 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v70 + 48))(v14, 1, v20) == 1)
    {
      _s7SwiftUI9FocusItemVSgWOhTm_2((uint64_t)v14, (uint64_t)&lazy cache variable for type metadata for Logger?, MEMORY[0x1E4FBD360], MEMORY[0x1E4FBB718], (uint64_t (*)(void))type metadata accessor for UIKitHostContainer?);
    }
    else
    {
      uint64_t v69 = v20;
      swift_unknownObjectRetain_n();
      uint64_t v68 = v19;
      int v21 = Logger.logObject.getter();
      os_log_type_t v22 = static os_log_type_t.default.getter();
      int v67 = v22;
      if (os_log_type_enabled(v21, v22))
      {
        uint64_t v23 = swift_slowAlloc();
        uint64_t v71 = v10;
        uint64_t v24 = v23;
        uint64_t v65 = swift_slowAlloc();
        uint64_t v73 = v65;
        *(_DWORD *)uint64_t v24 = 136315394;
        uint64_t v63 = v24 + 4;
        uint64_t v25 = UIKitFocusItemDescription.init(_:)(v4);
        long long v66 = v21;
        uint64_t v72 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v25, v26, &v73);
        uint64_t v64 = &v73;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_unknownObjectRelease();
        swift_bridgeObjectRelease();
        *(_WORD *)(v24 + 12) = 2080;
        uint64_t v62 = (uint8_t *)v24;
        uint64_t v63 = v24 + 14;
        os_log_t v27 = v68;
        uint64_t v61 = specialized UIKitFocusItemDescription.init(_:)(v27);
        unint64_t v29 = (unint64_t)v28;
        uint64_t v68 = v28;

        uint64_t v30 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v61, v29, &v73);
        id v31 = v62;
        uint64_t v72 = v30;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1872C6000, v66, (os_log_type_t)v67, "unparenting: %s from %s", v31, 0x16u);
        uint64_t v32 = v65;
        swift_arrayDestroy();
        MEMORY[0x18C119C60](v32, -1, -1);
        uint64_t v33 = v31;
        id v10 = v71;
        MEMORY[0x18C119C60](v33, -1, -1);
      }
      else
      {
        uint64_t v71 = v19;
        unint64_t v34 = v68;

        uint64_t v19 = v71;
        swift_unknownObjectRelease_n();
      }
      (*(void (**)(char *, uint64_t))(v70 + 8))(v14, v69);
    }
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIFocusSystem);
    os_log_t v35 = v19;
    uint64_t v36 = (void *)static UIFocusSystem.focusSystem(for:)();

    if (v36)
    {
      objc_msgSend(v36, sel__focusEnvironmentWillDisappear_, v4);
    }
  }
  uint64_t v37 = *(void (**)(void *, uint64_t, uint64_t))(a3 + 16);
  id v38 = a1;
  v37(a1, a2, a3);
  uint64_t v39 = ((uint64_t (*)(uint64_t, uint64_t))v15)(a2, a3);
  if (v39)
  {
    unint64_t v40 = (void *)v39;
    static Log.focus.getter();
    uint64_t v41 = type metadata accessor for Logger();
    uint64_t v42 = *(void *)(v41 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v42 + 48))(v10, 1, v41) == 1)
    {
      _s7SwiftUI9FocusItemVSgWOhTm_2((uint64_t)v10, (uint64_t)&lazy cache variable for type metadata for Logger?, MEMORY[0x1E4FBD360], MEMORY[0x1E4FBB718], (uint64_t (*)(void))type metadata accessor for UIKitHostContainer?);
    }
    else
    {
      swift_unknownObjectRetain_n();
      uint64_t v43 = v10;
      id v44 = v40;
      uint64_t v71 = v43;
      unint64_t v45 = Logger.logObject.getter();
      os_log_type_t v46 = static os_log_type_t.default.getter();
      int v47 = v46;
      if (os_log_type_enabled(v45, v46))
      {
        uint64_t v48 = swift_slowAlloc();
        LODWORD(v69) = v47;
        uint64_t v49 = v48;
        uint64_t v70 = swift_slowAlloc();
        uint64_t v73 = v70;
        *(_DWORD *)uint64_t v49 = 136315394;
        uint64_t v50 = UIKitFocusItemDescription.init(_:)(v4);
        uint64_t v72 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v50, v51, &v73);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_unknownObjectRelease();
        swift_bridgeObjectRelease();
        *(_WORD *)(v49 + 12) = 2080;
        id v52 = v44;
        uint64_t v53 = specialized UIKitFocusItemDescription.init(_:)(v52);
        uint64_t v68 = v45;
        unint64_t v55 = v54;

        uint64_t v72 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v53, v55, &v73);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        uint64_t v56 = v68;
        _os_log_impl(&dword_1872C6000, v68, (os_log_type_t)v69, "parenting: %s to: %s", (uint8_t *)v49, 0x16u);
        uint64_t v57 = v70;
        swift_arrayDestroy();
        MEMORY[0x18C119C60](v57, -1, -1);
        MEMORY[0x18C119C60](v49, -1, -1);
      }
      else
      {

        swift_unknownObjectRelease_n();
      }
      (*(void (**)(char *, uint64_t))(v42 + 8))(v71, v41);
    }
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIFocusSystem);
    id v58 = v40;
    uint64_t v59 = (void *)static UIFocusSystem.focusSystem(for:)();

    if (v59)
    {
      objc_msgSend(v59, sel__focusEnvironmentDidAppear_, v4);
    }
  }
}

void AnyUIKitHostedFocusItem.invalidateFocusIfNeeded()(uint64_t a1, uint64_t a2)
{
  type metadata accessor for UIKitHostContainer?(0, (unint64_t *)&lazy cache variable for type metadata for Logger?, MEMORY[0x1E4FBD360], MEMORY[0x1E4FBB718]);
  double v6 = MEMORY[0x1F4188790](v5 - 8);
  uint64_t v8 = (char *)v22 - v7;
  uint64_t v9 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, double))(a2 + 8))(a1, a2, v6);
  if (v9)
  {
    id v24 = v9;
    if ((UIFocusItem.isFocused.getter() & 1) != 0 && (objc_msgSend(v2, sel_canBecomeFocused) & 1) == 0)
    {
      static Log.focus.getter();
      uint64_t v11 = type metadata accessor for Logger();
      uint64_t v12 = *(void *)(v11 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v8, 1, v11) == 1)
      {
        _s7SwiftUI9FocusItemVSgWOhTm_2((uint64_t)v8, (uint64_t)&lazy cache variable for type metadata for Logger?, MEMORY[0x1E4FBD360], MEMORY[0x1E4FBB718], (uint64_t (*)(void))type metadata accessor for UIKitHostContainer?);
      }
      else
      {
        id v13 = v24;
        id v14 = Logger.logObject.getter();
        os_log_type_t v15 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v14, v15))
        {
          uint64_t v16 = (uint8_t *)swift_slowAlloc();
          uint64_t v23 = swift_slowAlloc();
          uint64_t v26 = v23;
          *(_DWORD *)uint64_t v16 = 136315138;
          v22[1] = v16 + 4;
          id v17 = v13;
          uint64_t v18 = specialized UIKitFocusItemDescription.init(_:)(v17);
          unint64_t v20 = v19;

          uint64_t v25 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v18, v20, &v26);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();

          swift_bridgeObjectRelease();
          _os_log_impl(&dword_1872C6000, v14, v15, "invalidating focus in %s", v16, 0xCu);
          uint64_t v21 = v23;
          swift_arrayDestroy();
          MEMORY[0x18C119C60](v21, -1, -1);
          MEMORY[0x18C119C60](v16, -1, -1);
        }
        else
        {
        }
        (*(void (**)(char *, uint64_t))(v12 + 8))(v8, v11);
      }
      objc_msgSend(v24, sel_setNeedsFocusUpdate);
    }
    else
    {
      id v10 = v24;
    }
  }
}

uint64_t UIKitHostedContainerFocusItem.defaultFocusItems()(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (*(uint64_t (**)(void))(*(void *)(a2 + 16) + 16))();
  uint64_t v5 = MEMORY[0x1E4FBC860];
  if (v4)
  {
    uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)(a2 + 8) + 8))(a1);
    if (v6)
    {
      uint64_t v7 = (void *)v6;
      MEMORY[0x1F4188790](v6);
      MEMORY[0x1F4188790](v8);
      dispatch thunk of ResponderNode.visit(applying:)();
      swift_release();
    }
    else
    {
      swift_release();
    }
  }
  return v5;
}

void *UIFocusEnvironment.nearestRenderer()()
{
  swift_unknownObjectRetain();
  while (1)
  {
    swift_getObjectType();
    uint64_t result = swift_conformsToProtocol2() ? v0 : 0;
    if (result) {
      break;
    }
    id v2 = objc_msgSend(v0, sel_parentFocusEnvironment);
    swift_unknownObjectRelease();
    uint64_t v0 = v2;
    if (!v2) {
      return 0;
    }
  }
  return result;
}

id UIFocusEnvironment.nearestResponder(in:)(void *a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t ObjectType = swift_getObjectType();
  (*(void (**)(uint64_t, uint64_t))(a2 + 48))(ObjectType, a2);
  swift_release();
  swift_getObjectType();
  uint64_t v7 = swift_conformsToProtocol2();
  if (v7) {
    uint64_t v8 = v7;
  }
  else {
    uint64_t v8 = 0;
  }
  if (!v7) {
    id v2 = 0;
  }
  if (!v2) {
    goto LABEL_10;
  }
  uint64_t v9 = swift_getObjectType();
  swift_unknownObjectRetain();
  id v10 = UIFocusEnvironment.nearestRenderer()();
  if (!v10 || (uint64_t v11 = v10, swift_unknownObjectRelease(), v11 != a1))
  {
    swift_unknownObjectRelease();
LABEL_10:
    swift_unknownObjectRetain();
    while (1)
    {
      swift_getObjectType();
      uint64_t v13 = swift_conformsToProtocol2();
      if (v13) {
        uint64_t v14 = v13;
      }
      else {
        uint64_t v14 = 0;
      }
      if (v13) {
        os_log_type_t v15 = v3;
      }
      else {
        os_log_type_t v15 = 0;
      }
      if (v15)
      {
        uint64_t v16 = swift_getObjectType();
        id v17 = *(uint64_t (**)(uint64_t, uint64_t))(v14 + 8);
        swift_unknownObjectRetain();
        uint64_t v18 = v17(v16, v14);
        if (v18)
        {
          id v12 = (id)v18;
          uint64_t v19 = v18 + 16;
          swift_beginAccess();
          uint64_t v20 = MEMORY[0x18C119DF0](v19);
          if (v20)
          {
            uint64_t v21 = v20;
            swift_unknownObjectRelease();
            swift_unknownObjectRelease();
            if ((void *)v21 == a1) {
              goto LABEL_27;
            }
          }
          else
          {
            swift_unknownObjectRelease();
          }
          swift_release();
        }
        else
        {
          swift_unknownObjectRelease();
        }
      }
      id v12 = objc_msgSend(v3, sel_parentFocusEnvironment);
      swift_unknownObjectRelease();
      uint64_t v3 = v12;
      if (!v12) {
        return v12;
      }
    }
  }
  id v12 = (id)(*(uint64_t (**)(uint64_t, uint64_t))(v8 + 48))(v9, v8);
LABEL_27:
  swift_unknownObjectRelease();
  return v12;
}

uint64_t UIKitContainerFocusItem<>.rootResponder()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 48))();
}

void specialized project #1 <A><A1>(_:) in UIKitHostContainer.focusItems(in:)(uint64_t a1, uint64_t a2, char a3, void *a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v11 = (*(uint64_t (**)(uint64_t, void))(*(void *)(a9 + 8) + 56))(a7, *(void *)(a9 + 8));
  if (v11)
  {
    id v12 = (void *)v11;
    swift_getAssociatedTypeWitness();
    swift_getAssociatedTypeWitness();
    type metadata accessor for ModifiedContent();
    swift_getAssociatedConformanceWitness();
    swift_getAssociatedConformanceWitness();
    swift_getWitnessTable();
    type metadata accessor for _UIHostingView();
    swift_getWitnessTable();
    uint64_t v13 = ViewRendererHost.responderNode.getter();

    if (v13)
    {
      type metadata accessor for ViewResponder();
      if (!swift_dynamicCastClass())
      {
LABEL_29:
        swift_release();
        return;
      }
      unint64_t v14 = dispatch thunk of ViewResponder.children.getter();
      unint64_t v15 = v14;
      if (v14 >> 62)
      {
        if (_CocoaArrayWrapper.endIndex.getter())
        {
LABEL_6:
          if ((v15 & 0xC000000000000001) != 0)
          {
            uint64_t v16 = MEMORY[0x18C117680](0, v15);
          }
          else
          {
            if (!*(void *)((v15 & 0xFFFFFFFFFFFFFF8) + 0x10))
            {
              __break(1u);
LABEL_33:
              specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
LABEL_23:
              specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
              specialized Array._endMutation()();
              swift_endAccess();
              swift_release();
              goto LABEL_29;
            }
            uint64_t v16 = *(void *)(v15 + 32);
            swift_retain();
          }
          swift_bridgeObjectRelease();
          uint64_t v17 = swift_conformsToProtocol2();
          if (v17) {
            uint64_t v18 = v17;
          }
          else {
            uint64_t v18 = 0;
          }
          if (v17) {
            uint64_t v19 = (void *)v16;
          }
          else {
            uint64_t v19 = 0;
          }
          if (!v19) {
            goto LABEL_20;
          }
          uint64_t v20 = *v19;
          if (((*(uint64_t (**)(void, uint64_t))(v18 + 48))(*v19, v18) & 1) == 0) {
            goto LABEL_20;
          }
          uint64_t v21 = (*(uint64_t (**)(uint64_t, uint64_t))(v18 + 56))(v20, v18);
          if (v22)
          {
            if ((a3 & 1) == 0)
            {
LABEL_20:
              swift_release();
LABEL_26:
              swift_beginAccess();
              uint64_t v24 = swift_unknownObjectRetain();
              MEMORY[0x18C115B40](v24);
              if (*(void *)((*a5 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*a5 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
                specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
              }
              specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
              specialized Array._endMutation()();
              swift_endAccess();
              goto LABEL_29;
            }
          }
          else if ((a3 & 1) != 0 || v21 != a2)
          {
            goto LABEL_20;
          }
          swift_beginAccess();
          uint64_t v23 = swift_unknownObjectRetain();
          MEMORY[0x18C115B40](v23);
          if (*(void *)((*a4 & 0xFFFFFFFFFFFFFF8) + 0x10) < *(void *)((*a4 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
            goto LABEL_23;
          }
          goto LABEL_33;
        }
      }
      else if (*(void *)((v14 & 0xFFFFFFFFFFFFFF8) + 0x10))
      {
        goto LABEL_6;
      }
      swift_bridgeObjectRelease();
      goto LABEL_26;
    }
  }
}

uint64_t specialized _arrayConditionalCast<A, B>(_:)(unint64_t a1)
{
  unint64_t v1 = a1;
  unint64_t v2 = a1 >> 62;
  if (a1 >> 62) {
    goto LABEL_42;
  }
  uint64_t v3 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    uint64_t v29 = MEMORY[0x1E4FBC860];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3 & ~(v3 >> 63), 0);
    uint64_t v4 = v29;
    if (v2) {
      break;
    }
    unint64_t v2 = *(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v2) {
      return v4;
    }
LABEL_7:
    if ((v1 & 0xC000000000000001) != 0)
    {
      for (uint64_t i = 0; ; ++i)
      {
        MEMORY[0x18C117680](i, v1);
        uint64_t v6 = i + 1;
        if (__OFADD__(i, 1)) {
          break;
        }
        uint64_t v7 = swift_dynamicCastObjCProtocolConditional();
        if (!v7
          || ((uint64_t v8 = v7, swift_getObjectType(), (v9 = swift_conformsToProtocol2()) != 0) ? (v10 = v9) : (v10 = 0),
              v9 ? (uint64_t v11 = v8) : (uint64_t v11 = 0),
              !v11))
        {
          swift_release();
          swift_unknownObjectRelease();
          return 0;
        }
        unint64_t v13 = *(void *)(v29 + 16);
        unint64_t v12 = *(void *)(v29 + 24);
        if (v13 >= v12 >> 1) {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v12 > 1), v13 + 1, 1);
        }
        *(void *)(v29 + 16) = v13 + 1;
        uint64_t v14 = v29 + 16 * v13;
        *(void *)(v14 + 32) = v11;
        *(void *)(v14 + 40) = v10;
        if (v6 == v2) {
          return v4;
        }
      }
      __break(1u);
    }
    else
    {
      uint64_t v15 = 0;
      unint64_t v28 = v1 + 32;
      while (1)
      {
        uint64_t v16 = v15 + 1;
        if (__OFADD__(v15, 1)) {
          break;
        }
        uint64_t v17 = *(void **)(v28 + 8 * v15);
        uint64_t v18 = swift_dynamicCastObjCProtocolConditional();
        if (!v18
          || ((uint64_t v19 = v18, swift_getObjectType(), (v20 = swift_conformsToProtocol2()) != 0) ? (v21 = v20) : (v21 = 0),
              v20 ? (uint64_t v22 = v19) : (uint64_t v22 = 0),
              !v22))
        {
          swift_release();
          return 0;
        }
        unint64_t v24 = *(void *)(v29 + 16);
        unint64_t v23 = *(void *)(v29 + 24);
        unint64_t v1 = v24 + 1;
        id v25 = v17;
        if (v24 >= v23 >> 1) {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v23 > 1), v24 + 1, 1);
        }
        *(void *)(v29 + 16) = v1;
        uint64_t v26 = v29 + 16 * v24;
        *(void *)(v26 + 32) = v22;
        *(void *)(v26 + 40) = v21;
        ++v15;
        if (v16 == v2) {
          return v4;
        }
      }
    }
    __break(1u);
LABEL_42:
    swift_bridgeObjectRetain();
    uint64_t v3 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  unint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (v2) {
    goto LABEL_7;
  }
  return v4;
}

uint64_t UpdateCoalescingTableView.hasSelection.getter()
{
  unint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for IndexPath();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v5 = (char *)&v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for UIKitHostContainer?(0, &lazy cache variable for type metadata for IndexPath?, MEMORY[0x1E4F27DE8], MEMORY[0x1E4FBB718]);
  double v7 = MEMORY[0x1F4188790](v6 - 8);
  uint64_t v9 = (char *)&v18 - v8;
  id v10 = objc_msgSend(v1, sel_indexPathsForSelectedRows, v7);
  if (!v10
    || (uint64_t v11 = v10,
        uint64_t v12 = static Array._unconditionallyBridgeFromObjectiveC(_:)(),
        v11,
        uint64_t v13 = *(void *)(v12 + 16),
        swift_bridgeObjectRelease(),
        !v13))
  {
    id v15 = objc_msgSend(v1, sel_indexPathForSelectedRow);
    if (v15)
    {
      uint64_t v16 = v15;
      static IndexPath._unconditionallyBridgeFromObjectiveC(_:)();

      (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v9, v5, v2);
      uint64_t v14 = 1;
      (*(void (**)(char *, void, uint64_t, uint64_t))(v3 + 56))(v9, 0, 1, v2);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v3 + 48))(v9, 1, v2) != 1) {
        goto LABEL_9;
      }
    }
    else
    {
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 56))(v9, 1, 1, v2);
    }
    uint64_t v14 = 0;
LABEL_9:
    _s7SwiftUI9FocusItemVSgWOhTm_2((uint64_t)v9, (uint64_t)&lazy cache variable for type metadata for IndexPath?, MEMORY[0x1E4F27DE8], MEMORY[0x1E4FBB718], (uint64_t (*)(void))type metadata accessor for UIKitHostContainer?);
    return v14;
  }
  return 1;
}

void *protocol witness for UIKitHostContainer.visibleHostCells.getter in conformance UpdateCoalescingTableView()
{
  return UpdateCoalescingTableView.visibleHostCells.getter(&lazy cache variable for type metadata for UITableViewCell);
}

uint64_t protocol witness for UIKitHostContainer.hasSelection.getter in conformance UpdateCoalescingTableView()
{
  return UpdateCoalescingTableView.hasSelection.getter() & 1;
}

void *UpdateCoalescingTableView.visibleHostCells.getter(unint64_t *a1)
{
  id v3 = objc_msgSend(v1, sel_visibleCells);
  type metadata accessor for NSObject(0, a1);
  unint64_t v4 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v5 = (void *)specialized _arrayConditionalCast<A, B>(_:)(v4);
  swift_bridgeObjectRelease();
  if (!v5) {
    return (void *)MEMORY[0x1E4FBC860];
  }
  double v7 = v5;
  swift_bridgeObjectRetain();
  specialized MutableCollection<>.sort(by:)(&v7);
  swift_bridgeObjectRelease();
  return v7;
}

void *protocol witness for UIKitHostContainer.visibleHostCells.getter in conformance UpdateCoalescingCollectionView()
{
  return UpdateCoalescingTableView.visibleHostCells.getter(&lazy cache variable for type metadata for UICollectionViewCell);
}

id protocol witness for UIKitHostContainer.hasSelection.getter in conformance UpdateCoalescingCollectionView()
{
  id result = objc_msgSend(*v0, sel_indexPathsForSelectedItems);
  if (result)
  {
    uint64_t v2 = result;
    type metadata accessor for IndexPath();
    uint64_t v3 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v4 = *(void *)(v3 + 16);
    swift_bridgeObjectRelease();
    return (id)(v4 != 0);
  }
  return result;
}

double @objc UIKitContainerFocusResponderItem.frame.getter()
{
  return UIKitContainerFocusResponderItem.frame.getter();
}

void @objc UIKitContainerFocusResponderItem.frame.setter(double a1, double a2, double a3, double a4)
{
}

uint64_t @objc UIKitContainerFocusResponderItem.canBecomeFocused.getter()
{
  return 0;
}

Class @objc UIKitContainerFocusResponderItem.preferredFocusEnvironments.getter()
{
  type metadata accessor for _UISceneBSActionHandler(0, (unint64_t *)&lazy cache variable for type metadata for UIFocusEnvironment);
  v0.super.Class isa = Array._bridgeToObjectiveC()().super.isa;

  return v0.super.isa;
}

void @objc UIKitContainerFocusResponderItem.parentFocusEnvironment.getter()
{
}

id sub_1882A12A8(id a1)
{
  return a1;
}

id @objc UIKitContainerFocusResponderItem.focusItemContainer.getter()
{
  FocusStoreLocation.id.getter();
  NSArray v0 = (void *)swift_unknownObjectRetain();

  return v0;
}

void @objc UIKitContainerFocusResponderItem.setNeedsFocusUpdate()(void *a1)
{
  id v1 = a1;
  UIKitContainerFocusResponderItem.setNeedsFocusUpdate()();
}

void @objc UIKitContainerFocusResponderItem.updateFocusIfNeeded()(void *a1)
{
  id v1 = a1;
  UIKitContainerFocusResponderItem.updateFocusIfNeeded()();
}

uint64_t @objc UIKitContainerFocusResponderItem.shouldUpdateFocus(in:)()
{
  return 1;
}

id @objc UIKitContainerFocusResponderItem.coordinateSpace.getter(void *a1)
{
  id v1 = a1;
  uint64_t v2 = (void *)specialized UIKitContainerFocusResponderItem.coordinateSpace.getter();
  swift_unknownObjectRetain();

  return v2;
}

Class @objc UIKitContainerFocusResponderItem.focusItems(in:)(void *a1, double a2, double a3, double a4, double a5)
{
  id v9 = a1;
  UIKitContainerFocusResponderItem.focusItems(in:)(a2, a3, a4, a5);

  type metadata accessor for _UISceneBSActionHandler(0, (unint64_t *)&lazy cache variable for type metadata for UIFocusItem);
  v10.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();

  return v10.super.isa;
}

uint64_t @objc static UIKitContainerFocusResponderItem._supportsInvalidatingFocusCache()()
{
  return 1;
}

uint64_t @objc UIKitContainerFocusResponderItem._focusGuideBehavior(forFocusMovement:)()
{
  return 0;
}

void UIKitContainerFocusResponderItem.WrapperCoordinateSpace.host.getter()
{
}

double UIKitContainerFocusResponderItem.WrapperCoordinateSpace.convert(_:from:)(uint64_t a1, double a2, double a3)
{
  return UIKitContainerFocusResponderItem.WrapperCoordinateSpace.convert(_:from:)(a1, (SEL *)&selRef_convertPoint_toCoordinateSpace_, a2, a3);
}

double @objc UIKitContainerFocusResponderItem.WrapperCoordinateSpace.convert(_:from:)(void *a1, uint64_t a2, uint64_t a3, double a4, double a5)
{
  return @objc UIKitContainerFocusResponderItem.WrapperCoordinateSpace.convert(_:from:)(a1, a4, a5, a2, a3, UIKitContainerFocusResponderItem.WrapperCoordinateSpace.convert(_:from:));
}

double UIKitContainerFocusResponderItem.WrapperCoordinateSpace.convert(_:to:)(uint64_t a1, double a2, double a3)
{
  return UIKitContainerFocusResponderItem.WrapperCoordinateSpace.convert(_:from:)(a1, (SEL *)&selRef_convertPoint_fromCoordinateSpace_, a2, a3);
}

double UIKitContainerFocusResponderItem.WrapperCoordinateSpace.convert(_:from:)(uint64_t a1, SEL *a2, double a3, double a4)
{
  id v9 = (void *)MEMORY[0x18C119DF0](v4 + direct field offset for UIKitContainerFocusResponderItem.WrapperCoordinateSpace.host);
  if (!v9) {
    return 0.0;
  }
  NSArray v10 = v9;
  id v11 = objc_msgSend(v9, sel_coordinateSpace);

  objc_msgSend(v11, *a2, a1, a3, a4);
  double v13 = v12;
  swift_unknownObjectRelease();
  return v13;
}

double @objc UIKitContainerFocusResponderItem.WrapperCoordinateSpace.convert(_:to:)(void *a1, uint64_t a2, uint64_t a3, double a4, double a5)
{
  return @objc UIKitContainerFocusResponderItem.WrapperCoordinateSpace.convert(_:from:)(a1, a4, a5, a2, a3, UIKitContainerFocusResponderItem.WrapperCoordinateSpace.convert(_:to:));
}

double @objc UIKitContainerFocusResponderItem.WrapperCoordinateSpace.convert(_:from:)(void *a1, double a2, double a3, uint64_t a4, uint64_t a5, double (*a6)(uint64_t, double, double))
{
  swift_unknownObjectRetain();
  id v11 = a1;
  double v12 = a6(a5, a2, a3);
  swift_unknownObjectRelease();

  return v12;
}

double UIKitContainerFocusResponderItem.WrapperCoordinateSpace.convert(_:to:)(uint64_t a1, double a2, double a3, double a4, double a5)
{
  return UIKitContainerFocusResponderItem.WrapperCoordinateSpace.convert(_:to:)(a1, (SEL *)&selRef_convertRect_toCoordinateSpace_, a2, a3, a4, a5);
}

double @objc UIKitContainerFocusResponderItem.WrapperCoordinateSpace.convert(_:to:)(void *a1, uint64_t a2, uint64_t a3, double a4, double a5, double a6, double a7)
{
  return @objc UIKitContainerFocusResponderItem.WrapperCoordinateSpace.convert(_:to:)(a1, a4, a5, a6, a7, a2, a3, UIKitContainerFocusResponderItem.WrapperCoordinateSpace.convert(_:to:));
}

double UIKitContainerFocusResponderItem.WrapperCoordinateSpace.convert(_:from:)(uint64_t a1, double a2, double a3, double a4, double a5)
{
  return UIKitContainerFocusResponderItem.WrapperCoordinateSpace.convert(_:to:)(a1, (SEL *)&selRef_convertRect_fromCoordinateSpace_, a2, a3, a4, a5);
}

double UIKitContainerFocusResponderItem.WrapperCoordinateSpace.convert(_:to:)(uint64_t a1, SEL *a2, double a3, double a4, double a5, double a6)
{
  double v13 = (void *)MEMORY[0x18C119DF0](v6 + direct field offset for UIKitContainerFocusResponderItem.WrapperCoordinateSpace.host);
  if (!v13) {
    return 0.0;
  }
  uint64_t v14 = v13;
  id v15 = objc_msgSend(v13, sel_coordinateSpace);

  objc_msgSend(v15, *a2, a1, a3, a4, a5, a6);
  double v17 = v16;
  swift_unknownObjectRelease();
  return v17;
}

double @objc UIKitContainerFocusResponderItem.WrapperCoordinateSpace.convert(_:from:)(void *a1, uint64_t a2, uint64_t a3, double a4, double a5, double a6, double a7)
{
  return @objc UIKitContainerFocusResponderItem.WrapperCoordinateSpace.convert(_:to:)(a1, a4, a5, a6, a7, a2, a3, UIKitContainerFocusResponderItem.WrapperCoordinateSpace.convert(_:from:));
}

double @objc UIKitContainerFocusResponderItem.WrapperCoordinateSpace.convert(_:to:)(void *a1, double a2, double a3, double a4, double a5, uint64_t a6, uint64_t a7, double (*a8)(uint64_t, double, double, double, double))
{
  swift_unknownObjectRetain();
  id v15 = a1;
  double v16 = a8(a7, a2, a3, a4, a5);
  swift_unknownObjectRelease();

  return v16;
}

double @objc UIKitContainerFocusResponderItem.WrapperCoordinateSpace.bounds.getter()
{
  return UIKitContainerFocusResponderItem.WrapperCoordinateSpace.bounds.getter();
}

double UIKitContainerFocusResponderItem.WrapperCoordinateSpace.bounds.getter()
{
  return *(double *)(v0 + direct field offset for UIKitContainerFocusResponderItem.WrapperCoordinateSpace.frame);
}

uint64_t @objc UIKitContainerFocusResponderItem.WrapperCoordinateSpace.init()(void *a1, uint64_t a2)
{
  return @objc UIKitContainerFocusResponderItem.WrapperCoordinateSpace.init()(a1, a2, (uint64_t (*)(void, void))specialized UIKitContainerFocusResponderItem.WrapperCoordinateSpace.init());
}

id UIKitContainerFocusResponderItem.WrapperCoordinateSpace.__deallocating_deinit()
{
  return UIKitContainerFocusResponderItem.WrapperCoordinateSpace.__deallocating_deinit((uint64_t (*)(void, void, void))type metadata accessor for UIKitContainerFocusResponderItem.WrapperCoordinateSpace);
}

uint64_t @objc UIKitContainerFocusResponderItem.WrapperCoordinateSpace.__ivar_destroyer()
{
  return swift_unknownObjectWeakDestroy();
}

uint64_t @objc UIKitContainerFocusResponderItem.init()(void *a1, uint64_t a2)
{
  return @objc UIKitContainerFocusResponderItem.WrapperCoordinateSpace.init()(a1, a2, (uint64_t (*)(void, void))specialized UIKitContainerFocusResponderItem.init());
}

uint64_t @objc UIKitContainerFocusResponderItem.WrapperCoordinateSpace.init()(void *a1, uint64_t a2, uint64_t (*a3)(void, void))
{
  return a3(*(void *)((*MEMORY[0x1E4FBC8C8] & *a1) + 0x50), *(void *)((*MEMORY[0x1E4FBC8C8] & *a1) + 0x58));
}

id UIKitContainerFocusResponderItem.__deallocating_deinit()
{
  return UIKitContainerFocusResponderItem.WrapperCoordinateSpace.__deallocating_deinit((uint64_t (*)(void, void, void))type metadata accessor for UIKitContainerFocusResponderItem);
}

id UIKitContainerFocusResponderItem.WrapperCoordinateSpace.__deallocating_deinit(uint64_t (*a1)(void, void, void))
{
  uint64_t v2 = (objc_class *)a1(0, *(void *)((*MEMORY[0x1E4FBC8C8] & *v1) + 0x50), *(void *)((*MEMORY[0x1E4FBC8C8] & *v1) + 0x58));
  v4.receiver = v1;
  v4.super_class = v2;
  return objc_msgSendSuper2(&v4, sel_dealloc);
}

uint64_t @objc UIKitContainerFocusResponderItem.__ivar_destroyer()
{
  swift_weakDestroy();
  swift_unknownObjectWeakDestroy();

  return swift_unknownObjectRelease();
}

uint64_t type metadata completion function for UIKitContainerFocusResponderItem.WrapperCoordinateSpace()
{
  return swift_initClassMetadata2();
}

uint64_t type metadata accessor for UIKitContainerFocusResponderItem.WrapperCoordinateSpace()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t protocol witness for UIKitContainerFocusItem.rootResponder() in conformance UIKitContainerFocusResponderItem<A1>(uint64_t a1)
{
  return UIKitContainerFocusItem<>.rootResponder()(a1, (uint64_t)&protocol witness table for UIKitContainerFocusResponderItem<A>);
}

void protocol witness for AnyUIKitHostedFocusItem.host.setter in conformance UIKitContainerFocusResponderItem<A>(void *a1)
{
  specialized UIKitContainerFocusResponderItem.host.setter();
}

uint64_t protocol witness for static PropertyKey.defaultValue.getter in conformance UIKitHostContainerFocusItemInput@<X0>(_DWORD *a1@<X8>)
{
  if (one-time initialization token for defaultValue != -1) {
    uint64_t result = swift_once();
  }
  *a1 = static UIKitHostContainerFocusItemInput.defaultValue;
  return result;
}

void UIKitHostedFocusItemLifecycle.remove()()
{
  uint64_t v1 = v0[11];
  if (v1)
  {
    uint64_t v2 = v0[12];
    uint64_t v3 = swift_allocObject();
    *(void *)(v3 + 16) = v1;
    *(void *)(v3 + 24) = v2;
    uint64_t v4 = v0[15];
    if (*(void *)(v4 + 16) && *(unsigned char *)(v4 + 32) == 1)
    {
      swift_unknownObjectRetain();
      swift_release();
      uint64_t v5 = MEMORY[0x1E4FBC860];
    }
    else
    {
      type metadata accessor for _ContiguousArrayStorage<String>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<UIKitHostedFocusItemLifecycle.Event>, (uint64_t)&type metadata for UIKitHostedFocusItemLifecycle.Event, MEMORY[0x1E4FBBE00]);
      uint64_t v5 = swift_allocObject();
      *(_OWORD *)(v5 + 16) = xmmword_18834BB80;
      *(unsigned char *)(v5 + 32) = 2;
      *(void *)(v5 + 40) = partial apply for closure #1 in UIKitHostedFocusItemLifecycle.remove();
      *(void *)(v5 + 48) = v3;
      swift_unknownObjectRetain();
    }
    swift_bridgeObjectRelease();
    v0[15] = v5;
  }
}

uint64_t UIKitHostedFocusItemLifecycle.insert()()
{
  uint64_t v1 = (void *)MEMORY[0x18C119DF0](v0 + 32);
  if (!v1) {
    return 0;
  }
  uint64_t v2 = v1;
  uint64_t v3 = *(void *)(v0 + 88);
  if (!v3 || (*(unsigned char *)(v0 + 80) & 1) != 0)
  {

    return 0;
  }
  uint64_t v7 = *(void *)(v0 + 64);
  uint64_t v6 = *(void *)(v0 + 72);
  long long v19 = *(_OWORD *)(v0 + 48);
  uint64_t v8 = *(void *)(v0 + 96);
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = v3;
  *(void *)(v9 + 24) = v8;
  *(_OWORD *)(v9 + 32) = v19;
  *(void *)(v9 + 48) = v7;
  *(void *)(v9 + 56) = v6;
  *(void *)(v9 + 64) = v2;
  NSArray v10 = *(char **)(v0 + 120);
  swift_unknownObjectRetain_n();
  id v11 = v2;
  swift_retain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    NSArray v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v10 + 2) + 1, 1, v10);
  }
  unint64_t v12 = *((void *)v10 + 2);
  unint64_t v13 = *((void *)v10 + 3);
  unint64_t v14 = v12 + 1;
  if (v12 >= v13 >> 1)
  {
    double v16 = v10;
    unint64_t v17 = *((void *)v10 + 2);
    uint64_t v18 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v13 > 1), v12 + 1, 1, v16);
    unint64_t v12 = v17;
    NSArray v10 = v18;
  }
  *((void *)v10 + 2) = v14;
  id v15 = &v10[24 * v12];
  uint64_t v4 = 1;
  v15[32] = 1;
  *((void *)v15 + 5) = partial apply for closure #1 in UIKitHostedFocusItemLifecycle.insert();
  *((void *)v15 + 6) = v9;
  swift_release();
  swift_unknownObjectRelease();

  *(void *)(v0 + 120) = v10;
  return v4;
}

uint64_t closure #1 in UIKitHostedFocusItemLifecycle.flushQueue()(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 16);
  if (v1)
  {
    uint64_t v2 = swift_bridgeObjectRetain() + 48;
    do
    {
      uint64_t v3 = *(void (**)(uint64_t))(v2 - 8);
      uint64_t v4 = swift_retain();
      v3(v4);
      swift_release();
      v2 += 24;
      --v1;
    }
    while (v1);
    return swift_bridgeObjectRelease();
  }
  return result;
}

Swift::Void __swiftcall UIKitHostedFocusItemLifecycle.destroy()()
{
  uint64_t v1 = v0[11];
  uint64_t v2 = MEMORY[0x1E4FBC860];
  if (v1)
  {
    uint64_t v3 = v0[12];
    uint64_t v4 = swift_allocObject();
    *(void *)(v4 + 16) = v1;
    *(void *)(v4 + 24) = v3;
    uint64_t v5 = v0[15];
    if (*(void *)(v5 + 16) && *(unsigned char *)(v5 + 32) == 1)
    {
      swift_unknownObjectRetain();
      swift_release();
      swift_bridgeObjectRelease();
      uint64_t v6 = MEMORY[0x1E4FBC860];
    }
    else
    {
      type metadata accessor for _ContiguousArrayStorage<String>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<UIKitHostedFocusItemLifecycle.Event>, (uint64_t)&type metadata for UIKitHostedFocusItemLifecycle.Event, MEMORY[0x1E4FBBE00]);
      uint64_t v6 = swift_allocObject();
      *(_OWORD *)(v6 + 16) = xmmword_18834BB80;
      *(unsigned char *)(v6 + 32) = 2;
      *(void *)(v6 + 40) = partial apply for closure #1 in UIKitHostedFocusItemLifecycle.remove();
      *(void *)(v6 + 48) = v4;
      swift_unknownObjectRetain();
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    uint64_t v6 = v0[15];
  }
  v0[15] = v2;
  *(void *)(swift_allocObject() + 16) = v6;
  static Update.enqueueAction(_:)();

  swift_release();
}

void closure #1 in UIKitHostedFocusItemLifecycle.invalidateFrame()(uint64_t a1, uint64_t a2, double a3, double a4, double a5, double a6)
{
  uint64_t ObjectType = swift_getObjectType();
  (*(void (**)(uint64_t, uint64_t, double, double, double, double))(a2 + 32))(ObjectType, a2, a3, a4, a5, a6);
  if (UIFocusItem.isFocused.getter())
  {
    unint64_t v13 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(a2 + 8))(ObjectType, a2);
    if (v13)
    {
      unint64_t v14 = v13;
      id v15 = objc_msgSend(v13, sel_window);

      if (v15)
      {
        id v16 = objc_msgSend(v15, sel_windowScene);

        if (v16)
        {
          id v17 = objc_msgSend(v16, sel__focusSystemSceneComponent);

          if (v17)
          {
            if (objc_msgSend(v17, sel_respondsToSelector_, sel__requestFocusEffectUpdateToEnvironment_)) {
              objc_msgSend(v17, sel__requestFocusEffectUpdateToEnvironment_, a1);
            }
          }
        }
      }
    }
  }
}

uint64_t protocol witness for static _AttributeBody._destroySelf(_:) in conformance UIKitHostedFocusItemLifecycle(void *a1)
{
  uint64_t v2 = a1[11];
  uint64_t v3 = MEMORY[0x1E4FBC860];
  if (v2)
  {
    uint64_t v4 = a1[12];
    uint64_t v5 = swift_allocObject();
    *(void *)(v5 + 16) = v2;
    *(void *)(v5 + 24) = v4;
    uint64_t v6 = a1[15];
    if (*(void *)(v6 + 16) && *(unsigned char *)(v6 + 32) == 1)
    {
      swift_unknownObjectRetain();
      swift_release();
      swift_bridgeObjectRelease();
      uint64_t v7 = MEMORY[0x1E4FBC860];
    }
    else
    {
      type metadata accessor for _ContiguousArrayStorage<String>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<UIKitHostedFocusItemLifecycle.Event>, (uint64_t)&type metadata for UIKitHostedFocusItemLifecycle.Event, MEMORY[0x1E4FBBE00]);
      uint64_t v7 = swift_allocObject();
      *(_OWORD *)(v7 + 16) = xmmword_18834BB80;
      *(unsigned char *)(v7 + 32) = 2;
      *(void *)(v7 + 40) = partial apply for closure #1 in UIKitHostedFocusItemLifecycle.remove();
      *(void *)(v7 + 48) = v5;
      swift_unknownObjectRetain();
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    uint64_t v7 = a1[15];
  }
  a1[15] = v3;
  *(void *)(swift_allocObject() + 16) = v7;
  static Update.enqueueAction(_:)();

  return swift_release();
}

void closure #1 in static FocusBridge.focusItems(responderNode:rect:host:skipRoot:)(void *a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, void *a4@<X3>, void *a5@<X4>, void *a6@<X5>, char *a7@<X8>, CGFloat a8@<D0>, CGFloat a9@<D1>, CGFloat a10@<D2>, CGFloat a11@<D3>)
{
  type metadata accessor for UIKitHostContainer?(0, (unint64_t *)&lazy cache variable for type metadata for Logger?, MEMORY[0x1E4FBD360], MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v22 - 8);
  unint64_t v24 = (char *)&v79 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v25);
  os_log_t v27 = (char *)&v79 - v26;
  if ((a3 & 1) == 0 || a1 != a4)
  {
    if ((static SemanticFeature.isEnabled.getter() & 1) != 0
      && ((*(uint64_t (**)(void, uint64_t))(a2 + 40))(*a1, a2) & 1) == 0)
    {
LABEL_30:
      char v36 = 1;
      goto LABEL_31;
    }
    uint64_t v28 = (*(uint64_t (**)(void, uint64_t))(a2 + 8))(*a1, a2);
    if (v28)
    {
      uint64_t v29 = (void *)v28;
      long long v88 = 0u;
      long long v89 = 0u;
      char v90 = 1;
      self;
      uint64_t v30 = swift_dynamicCastObjCClass();
      if (v30)
      {
        id v31 = (void *)v30;
        swift_unknownObjectRetain();
        objc_msgSend(v31, sel_bounds);
        objc_msgSend(v31, sel_convertRect_toCoordinateSpace_, a5);
      }
      else
      {
        swift_getObjectType();
        uint64_t v37 = swift_conformsToProtocol2();
        if (v37) {
          uint64_t v38 = v37;
        }
        else {
          uint64_t v38 = 0;
        }
        if (v37) {
          uint64_t v39 = v29;
        }
        else {
          uint64_t v39 = 0;
        }
        if (!v39)
        {
          static Log.focus.getter();
          uint64_t v66 = type metadata accessor for Logger();
          os_log_t v67 = *(os_log_t *)(v66 - 8);
          if (((unsigned int (*)(char *, uint64_t, uint64_t))v67[6].isa)(v27, 1, v66) == 1)
          {
            _s7SwiftUI9FocusItemVSgWOhTm_2((uint64_t)v27, (uint64_t)&lazy cache variable for type metadata for Logger?, MEMORY[0x1E4FBD360], MEMORY[0x1E4FBB718], (uint64_t (*)(void))type metadata accessor for UIKitHostContainer?);
          }
          else
          {
            swift_unknownObjectRetain_n();
            uint64_t v68 = Logger.logObject.getter();
            os_log_type_t v69 = static os_log_type_t.error.getter();
            int v70 = v69;
            long long v84 = v68;
            if (os_log_type_enabled(v68, v69))
            {
              uint64_t v71 = swift_slowAlloc();
              LODWORD(v81) = v70;
              uint64_t v72 = (uint8_t *)v71;
              uint64_t v82 = swift_slowAlloc();
              v86[0] = v82;
              os_log_t v83 = v67;
              long long v80 = v72;
              *(_DWORD *)uint64_t v72 = 136315138;
              long long v79 = v72 + 4;
              swift_getObjectType();
              uint64_t v73 = swift_unknownObjectRetain();
              uint64_t v74 = specialized UIKitFocusItemDescription.init(_:)(v73);
              unint64_t v76 = v75;
              swift_unknownObjectRelease();
              uint64_t v85 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v74, v76, v86);
              os_log_t v67 = v83;
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              swift_unknownObjectRelease_n();
              swift_bridgeObjectRelease();
              long long v77 = v80;
              _os_log_impl(&dword_1872C6000, v84, (os_log_type_t)v81, "unknown focus item: %s", v80, 0xCu);
              uint64_t v78 = v82;
              swift_arrayDestroy();
              MEMORY[0x18C119C60](v78, -1, -1);
              MEMORY[0x18C119C60](v77, -1, -1);
            }
            else
            {
              swift_unknownObjectRelease_n();
            }

            ((void (*)(char *, uint64_t))v67[1].isa)(v27, v66);
            if ((v90 & 1) == 0)
            {
              CGFloat v44 = *((double *)&v89 + 1);
              CGFloat v43 = *(double *)&v89;
              CGFloat v42 = *((double *)&v88 + 1);
              CGFloat v41 = *(double *)&v88;
LABEL_18:
              v91.origin.CGFloat x = v41;
              v91.origin.CGFloat y = v42;
              v91.size.double width = v43;
              v91.size.double height = v44;
              v93.origin.CGFloat x = a8;
              v93.origin.CGFloat y = a9;
              v93.size.double width = a10;
              v93.size.double height = a11;
              CGRect v92 = CGRectIntersection(v91, v93);
              if (!CGRectIsEmpty(v92))
              {
                uint64_t v47 = swift_unknownObjectRetain();
                MEMORY[0x18C115B40](v47);
                if (*(void *)((*a6 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*a6 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
                  specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
                }
                specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
                specialized Array._endMutation()();
                swift_unknownObjectRelease();
                goto LABEL_30;
              }
            }
          }
          static Log.focus.getter();
          uint64_t v45 = type metadata accessor for Logger();
          os_log_type_t v46 = *(NSObject **)(v45 - 8);
          if (((unsigned int (*)(char *, uint64_t, uint64_t))v46[6].isa)(v24, 1, v45) == 1)
          {
            swift_unknownObjectRelease();
            _s7SwiftUI9FocusItemVSgWOhTm_2((uint64_t)v24, (uint64_t)&lazy cache variable for type metadata for Logger?, MEMORY[0x1E4FBD360], MEMORY[0x1E4FBB718], (uint64_t (*)(void))type metadata accessor for UIKitHostContainer?);
          }
          else
          {
            swift_unknownObjectRetain_n();
            id v48 = a5;
            uint64_t v49 = Logger.logObject.getter();
            int v50 = static os_log_type_t.default.getter();
            if (os_log_type_enabled(v49, (os_log_type_t)v50))
            {
              LODWORD(v82) = v50;
              os_log_t v83 = v49;
              long long v84 = v46;
              uint64_t v51 = swift_slowAlloc();
              uint64_t v81 = swift_slowAlloc();
              uint64_t v87 = v81;
              *(_DWORD *)uint64_t v51 = 136315906;
              swift_getObjectType();
              uint64_t v52 = swift_unknownObjectRetain();
              uint64_t v53 = specialized UIKitFocusItemDescription.init(_:)(v52);
              unint64_t v55 = v54;
              swift_unknownObjectRelease();
              v86[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v53, v55, &v87);
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              swift_unknownObjectRelease_n();
              swift_bridgeObjectRelease();
              *(_WORD *)(v51 + 12) = 2080;
              swift_beginAccess();
              CGRect.loggable.getter();
              uint64_t v56 = LoggableRect.description.getter();
              v86[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v56, v57, &v87);
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              swift_bridgeObjectRelease();
              *(_WORD *)(v51 + 22) = 2080;
              CGRect.loggable.getter();
              uint64_t v58 = LoggableRect.description.getter();
              v86[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v58, v59, &v87);
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              swift_bridgeObjectRelease();
              *(_WORD *)(v51 + 32) = 2080;
              id v60 = v48;
              uint64_t v61 = specialized UIKitFocusItemDescription.init(_:)(v60);
              unint64_t v63 = v62;

              v86[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v61, v63, &v87);
              UnsafeMutableRawBufferPointer.copyMemory(from:)();

              swift_bridgeObjectRelease();
              os_log_t v64 = v83;
              _os_log_impl(&dword_1872C6000, v83, (os_log_type_t)v82, "skipped: %s with: %s in: %s for: %s", (uint8_t *)v51, 0x2Au);
              uint64_t v65 = v81;
              swift_arrayDestroy();
              MEMORY[0x18C119C60](v65, -1, -1);
              MEMORY[0x18C119C60](v51, -1, -1);

              swift_unknownObjectRelease();
              os_log_type_t v46 = v84;
            }
            else
            {

              swift_unknownObjectRelease_n();
            }
            ((void (*)(char *, uint64_t))v46[1].isa)(v24, v45);
          }
          goto LABEL_30;
        }
        uint64_t ObjectType = swift_getObjectType();
        swift_unknownObjectRetain();
        AnyUIKitHostedFocusItem.addToHostIfNeeded(_:)(a5, ObjectType, v38);
        objc_msgSend(v39, sel_frame);
      }
      CGFloat v41 = v32;
      CGFloat v42 = v33;
      CGFloat v43 = v34;
      CGFloat v44 = v35;
      swift_unknownObjectRelease();
      *(CGFloat *)&long long v88 = v41;
      *((CGFloat *)&v88 + 1) = v42;
      *(CGFloat *)&long long v89 = v43;
      *((CGFloat *)&v89 + 1) = v44;
      char v90 = 0;
      goto LABEL_18;
    }
  }
  char v36 = 0;
LABEL_31:
  *a7 = v36;
}

uint64_t closure #1 in static FocusBridge.defaultFocusItems(responderNode:host:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, void *a4@<X3>, char *a5@<X8>)
{
  if ((static SemanticFeature.isEnabled.getter() & 1) != 0
    && (uint64_t result = (*(uint64_t (**)(void, uint64_t))(a2 + 40))(*a1, a2), (result & 1) == 0))
  {
    char v23 = 1;
  }
  else
  {
    uint64_t result = (*(uint64_t (**)(void, uint64_t))(a2 + 8))(*a1, a2);
    if (result)
    {
      uint64_t v11 = result;
      swift_getObjectType();
      uint64_t v12 = swift_conformsToProtocol2();
      if (v12) {
        uint64_t v13 = v12;
      }
      else {
        uint64_t v13 = 0;
      }
      if (v12) {
        uint64_t v14 = v11;
      }
      else {
        uint64_t v14 = 0;
      }
      if (v14
        && (uint64_t v15 = swift_getObjectType(),
            id v16 = *(uint64_t (**)(uint64_t, uint64_t))(v13 + 24),
            swift_unknownObjectRetain(),
            char v17 = v16(v15, v13),
            swift_unknownObjectRelease(),
            (v17 & 1) == 0))
      {
        char v23 = 0;
      }
      else
      {
        swift_getObjectType();
        uint64_t v18 = swift_conformsToProtocol2();
        if (v18) {
          uint64_t v19 = v18;
        }
        else {
          uint64_t v19 = 0;
        }
        if (v18) {
          uint64_t v20 = v11;
        }
        else {
          uint64_t v20 = 0;
        }
        if (v20)
        {
          uint64_t ObjectType = swift_getObjectType();
          swift_unknownObjectRetain();
          AnyUIKitHostedFocusItem.addToHostIfNeeded(_:)(a3, ObjectType, v19);
          swift_unknownObjectRelease();
        }
        uint64_t v22 = swift_unknownObjectRetain();
        MEMORY[0x18C115B40](v22);
        if (*(void *)((*a4 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*a4 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
        char v23 = 1;
      }
      uint64_t result = swift_unknownObjectRelease();
    }
    else
    {
      char v23 = 0;
    }
  }
  *a5 = v23;
  return result;
}

uint64_t closure #1 in static FocusBridge.defaultFocusItemsContainer(responderNode:host:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, void *a4@<X3>, char *a5@<X8>)
{
  if (static SemanticFeature.isEnabled.getter())
  {
    uint64_t result = (*(uint64_t (**)(void, uint64_t))(a2 + 40))(*a1, a2);
    if ((result & 1) == 0) {
      goto LABEL_17;
    }
  }
  uint64_t v11 = (*(uint64_t (**)(void, uint64_t))(a2 + 8))(*a1, a2);
  if (v11)
  {
    uint64_t v12 = v11;
    swift_getObjectType();
    uint64_t v13 = swift_conformsToProtocol2();
    if (v13) {
      uint64_t v14 = v13;
    }
    else {
      uint64_t v14 = 0;
    }
    if (v13) {
      uint64_t v15 = v12;
    }
    else {
      uint64_t v15 = 0;
    }
    if (!v15) {
      goto LABEL_13;
    }
    uint64_t ObjectType = swift_getObjectType();
    if (((*(uint64_t (**)(uint64_t, uint64_t))(v14 + 24))(ObjectType, v14) & 1) == 0)
    {
      uint64_t result = swift_unknownObjectRelease();
      char v17 = 0;
      goto LABEL_18;
    }
    if (*a3)
    {
LABEL_13:
      swift_unknownObjectRelease();
      goto LABEL_14;
    }
    AnyUIKitHostedFocusItem.addToHostIfNeeded(_:)(a4, ObjectType, *(void *)(v14 + 8));
    *a3 = v15;
    a3[1] = v14;
    uint64_t result = swift_unknownObjectRelease();
LABEL_17:
    char v17 = 1;
    goto LABEL_18;
  }
LABEL_14:
  *a3 = 0;
  a3[1] = 0;
  uint64_t result = swift_unknownObjectRelease();
  char v17 = 2;
LABEL_18:
  *a5 = v17;
  return result;
}

uint64_t UIKitFocusItemDescription.Category.init(_:)(uint64_t a1)
{
  swift_getObjectType();
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIView);
  uint64_t result = dynamic_cast_existential_1_superclass_conditional(a1);
  if (!result)
  {
    swift_getObjectType();
    uint64_t result = swift_conformsToProtocol2() ? a1 : 0;
    if (!result)
    {
      if (swift_conformsToProtocol2()) {
        uint64_t v3 = a1;
      }
      else {
        uint64_t v3 = 0;
      }
      if (v3) {
        return v3;
      }
      else {
        return a1;
      }
    }
  }
  return result;
}

uint64_t UIKitFocusItemDescription.Category.name.getter(void *a1, unint64_t a2)
{
  uint64_t result = 1953722184;
  switch(a2 >> 62)
  {
    case 1uLL:
      uint64_t result = 0x656E6961746E6F43;
      break;
    case 2uLL:
      uint64_t result = 1835365449;
      break;
    case 3uLL:
      swift_getObjectType();
      outlined copy of UIKitFocusItemDescription<A>.Category<A>(a1, a2);
      v5._countAndFlagsBits = _typeName(_:qualified:)();
      String.append(_:)(v5);
      swift_bridgeObjectRelease();
      v6._countAndFlagsBits = 62;
      v6._object = (void *)0xE100000000000000;
      String.append(_:)(v6);
      outlined consume of UIKitFocusItemDescription<UIView>.Category(a1, a2);
      uint64_t result = 0x3C6E776F6E6B6E55;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t UIKitFocusItemDescription.Category.attributes.getter(void *a1, unint64_t a2)
{
  uint64_t v2 = MEMORY[0x1E4FBC860];
  switch(a2 >> 62)
  {
    case 1uLL:
      type metadata accessor for _ContiguousArrayStorage<String>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<String>, MEMORY[0x1E4FBB1A0], MEMORY[0x1E4FBBE00]);
      uint64_t v2 = swift_allocObject();
      *(_OWORD *)(v2 + 16) = xmmword_18834BB80;
      uint64_t v5 = specialized UIKitFocusItemDescription.Category.addressOfResponder.getter(a1, a2);
      if (v6)
      {
        unint64_t v7 = v6;
      }
      else
      {
        uint64_t v5 = 16191;
        unint64_t v7 = 0xE200000000000000;
      }
      unint64_t v8 = v7;
      String.append(_:)(*(Swift::String *)&v5);
      swift_bridgeObjectRelease();
      *(void *)(v2 + 32) = 0x65646E6F70736572;
      *(void *)(v2 + 40) = 0xEB00000000203A72;
      break;
    case 2uLL:
      type metadata accessor for _ContiguousArrayStorage<String>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<String>, MEMORY[0x1E4FBB1A0], MEMORY[0x1E4FBBE00]);
      uint64_t v2 = swift_allocObject();
      *(_OWORD *)(v2 + 16) = xmmword_18834BB70;
      uint64_t v9 = (void *)swift_unknownObjectRetain();
      uint64_t v10 = specialized UIKitFocusItemDescription.Category.addressOfResponder.getter(v9, a2);
      if (v11)
      {
        unint64_t v12 = v11;
      }
      else
      {
        uint64_t v10 = 16191;
        unint64_t v12 = 0xE200000000000000;
      }
      unint64_t v13 = v12;
      String.append(_:)(*(Swift::String *)&v10);
      swift_bridgeObjectRelease();
      *(void *)(v2 + 32) = 0x65646E6F70736572;
      *(void *)(v2 + 40) = 0xEB00000000203A72;
      swift_getObjectType();
      char v14 = UIFocusItem.isFocused.getter();
      BOOL v15 = (v14 & 1) == 0;
      if (v14) {
        uint64_t v16 = 1702195828;
      }
      else {
        uint64_t v16 = 0x65736C6166;
      }
      if (v15) {
        unint64_t v17 = 0xE500000000000000;
      }
      else {
        unint64_t v17 = 0xE400000000000000;
      }
      unint64_t v18 = v17;
      String.append(_:)(*(Swift::String *)&v16);
      swift_bridgeObjectRelease();
      *(void *)(v2 + 48) = 0x3A64657375636F66;
      *(void *)(v2 + 56) = 0xE900000000000020;
      goto LABEL_23;
    case 3uLL:
      type metadata accessor for _ContiguousArrayStorage<String>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<String>, MEMORY[0x1E4FBB1A0], MEMORY[0x1E4FBBE00]);
      uint64_t v2 = swift_allocObject();
      *(_OWORD *)(v2 + 16) = xmmword_18834BB80;
      swift_getObjectType();
      outlined copy of UIKitFocusItemDescription<A>.Category<A>(a1, a2);
      char v19 = UIFocusItem.isFocused.getter();
      BOOL v20 = (v19 & 1) == 0;
      if (v19) {
        uint64_t v21 = 1702195828;
      }
      else {
        uint64_t v21 = 0x65736C6166;
      }
      if (v20) {
        unint64_t v22 = 0xE500000000000000;
      }
      else {
        unint64_t v22 = 0xE400000000000000;
      }
      unint64_t v23 = v22;
      String.append(_:)(*(Swift::String *)&v21);
      swift_bridgeObjectRelease();
      *(void *)(v2 + 32) = 0x3A64657375636F66;
      *(void *)(v2 + 40) = 0xE900000000000020;
LABEL_23:
      outlined consume of UIKitFocusItemDescription<UIView>.Category(a1, a2);
      break;
    default:
      return v2;
  }
  return v2;
}

uint64_t specialized UIKitFocusItemDescription.Category.addressOfResponder.getter(void *a1, unint64_t a2)
{
  if (a2 >> 62 == 2)
  {
    uint64_t v4 = a2 & 0x3FFFFFFFFFFFFFFFLL;
  }
  else
  {
    if (a2 >> 62 != 1) {
      goto LABEL_7;
    }
    uint64_t v4 = *(void *)((a2 & 0x3FFFFFFFFFFFFFFFLL) + 8);
  }
  uint64_t ObjectType = swift_getObjectType();
  unint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(v4 + 48);
  outlined copy of UIKitFocusItemDescription<A>.Category<A>(a1, a2);
  if (v6(ObjectType, v4))
  {
    _print_unlocked<A, B>(_:_:)();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    return 0;
  }
LABEL_7:
  swift_unknownObjectRelease();
  return 0;
}

uint64_t specialized _merge<A>(low:mid:high:buffer:by:)(void **__src, void **a2, unint64_t a3, void **a4)
{
  uint64_t v5 = a2;
  unint64_t v6 = __src;
  int64_t v7 = (char *)a2 - (char *)__src;
  int64_t v8 = (char *)a2 - (char *)__src + 15;
  if ((char *)a2 - (char *)__src >= 0) {
    int64_t v8 = (char *)a2 - (char *)__src;
  }
  uint64_t v9 = v8 >> 4;
  uint64_t v10 = a3 - (void)a2;
  uint64_t v11 = a3 - (void)a2 + 15;
  if ((uint64_t)(a3 - (void)a2) >= 0) {
    uint64_t v11 = a3 - (void)a2;
  }
  uint64_t v12 = v11 >> 4;
  uint64_t v37 = __src;
  char v36 = a4;
  if (v9 >= v11 >> 4)
  {
    if (v10 < -15) {
      goto LABEL_46;
    }
    if (a4 != a2 || &a2[2 * v12] <= a4) {
      memmove(a4, a2, 16 * v12);
    }
    unint64_t v22 = &a4[2 * v12];
    double v35 = (char *)v22;
    uint64_t v37 = v5;
    if (v6 >= v5 || v10 < 16) {
      goto LABEL_45;
    }
    unint64_t v23 = (void **)(a3 - 16);
    unint64_t v24 = v5;
    while (1)
    {
      uint64_t v25 = v23 + 2;
      os_log_t v27 = (char *)(v22 - 2);
      uint64_t v26 = *(v22 - 2);
      uint64_t v28 = *(v24 - 2);
      v24 -= 2;
      swift_unknownObjectRetain();
      swift_unknownObjectRetain();
      objc_msgSend(v26, sel_frame);
      double v30 = v29;
      objc_msgSend(v28, sel_frame);
      double v32 = v31;
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      if (v30 < v32) {
        break;
      }
      double v35 = (char *)(v22 - 2);
      if (v25 < v22 || v23 >= v22)
      {
        *(_OWORD *)unint64_t v23 = *(_OWORD *)v27;
        unint64_t v24 = v5;
        v22 -= 2;
        goto LABEL_43;
      }
      if (v25 != v22) {
        *(_OWORD *)unint64_t v23 = *(_OWORD *)v27;
      }
      unint64_t v24 = v5;
      v22 -= 2;
      if (v5 <= v6) {
        goto LABEL_45;
      }
LABEL_44:
      v23 -= 2;
      uint64_t v5 = v24;
      if (v22 <= a4) {
        goto LABEL_45;
      }
    }
    if (v25 != v5 || v23 >= v5) {
      *(_OWORD *)unint64_t v23 = *(_OWORD *)v24;
    }
    uint64_t v37 = v24;
LABEL_43:
    if (v24 <= v6) {
      goto LABEL_45;
    }
    goto LABEL_44;
  }
  if (v7 >= -15)
  {
    if (a4 != __src || &__src[2 * v9] <= a4) {
      memmove(a4, __src, 16 * v9);
    }
    unint64_t v13 = &a4[2 * v9];
    double v35 = (char *)v13;
    if ((unint64_t)v5 < a3 && v7 >= 16)
    {
      char v14 = a4;
      do
      {
        BOOL v15 = *v5;
        uint64_t v16 = *v14;
        swift_unknownObjectRetain();
        swift_unknownObjectRetain();
        objc_msgSend(v15, sel_frame);
        double v18 = v17;
        objc_msgSend(v16, sel_frame);
        double v20 = v19;
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
        if (v18 >= v20)
        {
          if (v6 != v14) {
            *(_OWORD *)unint64_t v6 = *(_OWORD *)v14;
          }
          v14 += 2;
          char v36 = v14;
          uint64_t v21 = v5;
        }
        else
        {
          uint64_t v21 = v5 + 2;
          if (v6 < v5 || v6 >= v21 || v6 != v5) {
            *(_OWORD *)unint64_t v6 = *(_OWORD *)v5;
          }
        }
        v6 += 2;
        if (v14 >= v13) {
          break;
        }
        uint64_t v5 = v21;
      }
      while ((unint64_t)v21 < a3);
      uint64_t v37 = v6;
    }
LABEL_45:
    specialized $defer #1 <A>() in _merge<A>(low:mid:high:buffer:by:)(&v37, &v36, &v35);
    return 1;
  }
LABEL_46:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

char *specialized static FocusBridge.representedFocusItem(_:in:)(uint64_t a1, void *a2)
{
  outlined init with copy of FocusItem.Base(a1, (uint64_t)v13);
  if (v14)
  {
    outlined destroy of FocusItem.Base((uint64_t)v13);
    outlined init with copy of FocusItem.Base(a1, (uint64_t)v13);
    if (v14 == 1)
    {
      outlined init with take of WeakBox<UIFocusItem>((uint64_t)v13, (uint64_t)v12);
      uint64_t v4 = (char *)MEMORY[0x18C119DF0](v12);
      _s7SwiftUI7WeakBoxVySo11UIFocusItem_pGWOhTm_0((uint64_t)v12, &lazy cache variable for type metadata for WeakBox<UIFocusItem>, (uint64_t)&lazy cache variable for type metadata for UIFocusItem, (uint64_t)&protocolRef_UIFocusItem, (void (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _UISceneBSActionHandler);
      return v4;
    }
    outlined destroy of FocusItem.Base((uint64_t)v13);
    return 0;
  }
  swift_release();
  type metadata accessor for ListTableViewCell();
  id v5 = a2;
  uint64_t v6 = swift_dynamicCastClass();
  if (v6)
  {
    uint64_t v4 = (char *)v6;
LABEL_6:
    id v7 = *(id *)&v4[OBJC_IVAR____TtC7SwiftUI17ListTableViewCell_host];
    if (!v7 || v7 != v5)
    {
LABEL_8:
      swift_unknownObjectRelease();
      return 0;
    }
  }
  else
  {
    uint64_t v9 = v5;
    while (1)
    {
      uint64_t v4 = (char *)objc_msgSend(v9, sel_parentFocusEnvironment);
      if (!v4) {
        break;
      }
      uint64_t v10 = swift_dynamicCastObjCProtocolConditional();
      swift_unknownObjectRelease();
      if (!v10) {
        goto LABEL_8;
      }
      uint64_t v11 = swift_dynamicCastClass();
      uint64_t v9 = (void *)v10;
      if (v11)
      {
        uint64_t v4 = (char *)v11;
        goto LABEL_6;
      }
    }
    swift_unknownObjectRelease();
  }
  return v4;
}

uint64_t outlined init with copy of WeakBox<UIView>(uint64_t a1, uint64_t a2)
{
  _s7SwiftUI7WeakBoxVySo11UIFocusItem_pGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for WeakBox<UIView>, (uint64_t)&lazy cache variable for type metadata for UIView, 0x1E4FB1EB0, (void (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for NSObject);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of WeakBox<UIView>?(uint64_t a1)
{
  type metadata accessor for WeakBox<UIView>?();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void type metadata accessor for WeakBox<UIView>?()
{
  if (!lazy cache variable for type metadata for WeakBox<UIView>?)
  {
    _s7SwiftUI7WeakBoxVySo11UIFocusItem_pGMaTm_0(255, (unint64_t *)&lazy cache variable for type metadata for WeakBox<UIView>, (uint64_t)&lazy cache variable for type metadata for UIView, 0x1E4FB1EB0, (void (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for NSObject);
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for WeakBox<UIView>?);
    }
  }
}

uint64_t sub_1882A4800()
{
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in UIKitHostedFocusItemLifecycle.flushQueue()()
{
  return closure #1 in UIKitHostedFocusItemLifecycle.flushQueue()(*(void *)(v0 + 16));
}

uint64_t sub_1882A4840()
{
  swift_unknownObjectRelease();

  return swift_deallocObject();
}

void partial apply for closure #1 in UIKitHostedFocusItemLifecycle.invalidateFrame()()
{
  closure #1 in UIKitHostedFocusItemLifecycle.invalidateFrame()(*(void *)(v0 + 16), *(void *)(v0 + 24), *(double *)(v0 + 32), *(double *)(v0 + 40), *(double *)(v0 + 48), *(double *)(v0 + 56));
}

uint64_t sub_1882A4888()
{
  swift_unknownObjectRelease();

  return swift_deallocObject();
}

void partial apply for closure #1 in UIKitHostedFocusItemLifecycle.invalidateFocusIfNeeded()()
{
  uint64_t v1 = *(void *)(v0 + 24);
  uint64_t ObjectType = swift_getObjectType();
  AnyUIKitHostedFocusItem.invalidateFocusIfNeeded()(ObjectType, v1);
}

id outlined copy of UIKitFocusItemDescription<A>.Category<A>(void *a1, unint64_t a2)
{
  switch(a2 >> 62)
  {
    case 1uLL:
    case 2uLL:
    case 3uLL:
      id result = (id)swift_unknownObjectRetain();
      break;
    default:
      id result = a1;
      break;
  }
  return result;
}

void outlined consume of UIKitFocusItemDescription<UIView>.Category(void *a1, unint64_t a2)
{
  switch(a2 >> 62)
  {
    case 1uLL:
    case 2uLL:
    case 3uLL:
      swift_unknownObjectRelease();
      break;
    default:

      break;
  }
}

uint64_t partial apply for closure #1 in static FocusBridge.defaultFocusItems(responderNode:host:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, char *a3@<X8>)
{
  return closure #1 in static FocusBridge.defaultFocusItems(responderNode:host:)(a1, a2, *(void **)(v3 + 16), *(void **)(v3 + 24), a3);
}

uint64_t specialized UIKitContainerFocusResponderItem.host.setter()
{
  return swift_unknownObjectWeakAssign();
}

void type metadata accessor for UIKitHostContainer?(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

uint64_t specialized UIKitFocusItemDescription.init(_:)(uint64_t a1)
{
  swift_getObjectType();
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIView);
  uint64_t v2 = dynamic_cast_existential_1_superclass_conditional(a1);
  if (v2)
  {
    uint64_t v4 = (void *)v2;
    unint64_t v5 = v3;
  }
  else
  {
    swift_getObjectType();
    uint64_t v6 = swift_conformsToProtocol2();
    if (v6) {
      uint64_t v7 = v6;
    }
    else {
      uint64_t v7 = 0;
    }
    if (v6) {
      uint64_t v4 = (void *)a1;
    }
    else {
      uint64_t v4 = 0;
    }
    if (v4)
    {
      unint64_t v5 = v7 | 0x4000000000000000;
    }
    else
    {
      uint64_t v8 = swift_conformsToProtocol2();
      if (v8) {
        uint64_t v9 = v8;
      }
      else {
        uint64_t v9 = 0;
      }
      if (v8) {
        uint64_t v4 = (void *)a1;
      }
      else {
        uint64_t v4 = 0;
      }
      if (!v4)
      {
        swift_unknownObjectRetain();
        v13._countAndFlagsBits = 60;
        v13._object = (void *)0xE100000000000000;
        String.append(_:)(v13);
        unint64_t v5 = 0xC000000000000000;
        uint64_t v4 = (void *)a1;
LABEL_23:
        swift_getObjectType();
        swift_unknownObjectRetain();
        v14._countAndFlagsBits = _typeName(_:qualified:)();
        String.append(_:)(v14);
        swift_bridgeObjectRelease();
        v15._countAndFlagsBits = 62;
        v15._object = (void *)0xE100000000000000;
        String.append(_:)(v15);
        swift_unknownObjectRelease();
        uint64_t v12 = 0x3C6E776F6E6B6E55;
        unint64_t v11 = 0xE800000000000000;
        goto LABEL_24;
      }
      unint64_t v5 = v9 | 0x8000000000000000;
    }
  }
  swift_unknownObjectRetain();
  v10._countAndFlagsBits = 60;
  v10._object = (void *)0xE100000000000000;
  String.append(_:)(v10);
  unint64_t v11 = 0xE400000000000000;
  uint64_t v12 = 1953722184;
  switch(v5 >> 62)
  {
    case 1uLL:
      unint64_t v11 = 0xE900000000000072;
      uint64_t v12 = 0x656E6961746E6F43;
      break;
    case 2uLL:
      uint64_t v12 = 1835365449;
      break;
    case 3uLL:
      goto LABEL_23;
    default:
      break;
  }
LABEL_24:
  unint64_t v16 = v11;
  String.append(_:)(*(Swift::String *)&v12);
  swift_bridgeObjectRelease();
  v17._countAndFlagsBits = 8250;
  v17._object = (void *)0xE200000000000000;
  String.append(_:)(v17);
  _print_unlocked<A, B>(_:_:)();
  uint64_t v18 = specialized UIKitFocusItemDescription.Category.attributes.getter(v4, v5);
  uint64_t v19 = *(void *)(v18 + 16);
  if (v19)
  {
    double v20 = (void **)(v18 + 40);
    do
    {
      uint64_t v21 = (uint64_t)*(v20 - 1);
      unint64_t v22 = *v20;
      swift_bridgeObjectRetain();
      v23._countAndFlagsBits = v21;
      v23._object = v22;
      String.append(_:)(v23);
      swift_bridgeObjectRelease();
      v24._countAndFlagsBits = 8251;
      v24._object = (void *)0xE200000000000000;
      String.append(_:)(v24);
      swift_bridgeObjectRelease();
      v20 += 2;
      --v19;
    }
    while (v19);
  }
  swift_bridgeObjectRelease();
  v25._countAndFlagsBits = 62;
  v25._object = (void *)0xE100000000000000;
  String.append(_:)(v25);
  swift_unknownObjectRelease();
  return 0;
}

unint64_t specialized static FocusBridge.focusItems(responderNode:rect:host:skipRoot:)(uint64_t a1, void *a2, char a3, double a4, double a5, double a6, double a7)
{
  type metadata accessor for UIKitHostContainer?(0, (unint64_t *)&lazy cache variable for type metadata for Logger?, MEMORY[0x1E4FBD360], MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v14 - 8);
  unint64_t v16 = (char *)&v32 - v15;
  unint64_t v46 = MEMORY[0x1E4FBC860];
  v36[16] = a3;
  uint64_t v37 = a1;
  uint64_t v38 = a2;
  double v39 = a4;
  double v40 = a5;
  double v41 = a6;
  double v42 = a7;
  CGFloat v43 = &v46;
  double v34 = partial apply for closure #1 in static FocusBridge.focusItems(responderNode:rect:host:skipRoot:);
  double v35 = v36;
  dispatch thunk of ResponderNode.visit(applying:)();
  static Log.focus.getter();
  uint64_t v17 = type metadata accessor for Logger();
  uint64_t v18 = *(void *)(v17 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17) == 1)
  {
    _s7SwiftUI9FocusItemVSgWOhTm_2((uint64_t)v16, (uint64_t)&lazy cache variable for type metadata for Logger?, MEMORY[0x1E4FBD360], MEMORY[0x1E4FBB718], (uint64_t (*)(void))type metadata accessor for UIKitHostContainer?);
  }
  else
  {
    id v19 = a2;
    double v20 = Logger.logObject.getter();
    int v21 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v20, (os_log_type_t)v21))
    {
      int v33 = v21;
      uint64_t v22 = swift_slowAlloc();
      uint64_t v32 = swift_slowAlloc();
      uint64_t v45 = v32;
      *(_DWORD *)uint64_t v22 = 134218498;
      swift_beginAccess();
      if (v46 >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v23 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v23 = *(void *)((v46 & 0xFFFFFFFFFFFFFF8) + 0x10);
      }
      uint64_t v44 = v23;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v22 + 12) = 2080;
      CGRect.loggable.getter();
      uint64_t v24 = LoggableRect.description.getter();
      uint64_t v44 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v24, v25, &v45);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v22 + 22) = 2080;
      id v26 = v19;
      uint64_t v27 = specialized UIKitFocusItemDescription.init(_:)(v26);
      unint64_t v29 = v28;

      uint64_t v44 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v27, v29, &v45);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1872C6000, v20, (os_log_type_t)v33, "focus items queried: %ld in: %s for: %s", (uint8_t *)v22, 0x20u);
      uint64_t v30 = v32;
      swift_arrayDestroy();
      MEMORY[0x18C119C60](v30, -1, -1);
      MEMORY[0x18C119C60](v22, -1, -1);
    }
    else
    {
    }
    (*(void (**)(char *, uint64_t))(v18 + 8))(v16, v17);
  }
  swift_beginAccess();
  return v46;
}

id specialized UIKitContainerFocusResponderItem.WrapperCoordinateSpace.init(host:frame:)(double a1, double a2, double a3, double a4)
{
  swift_unknownObjectWeakInit();
  swift_unknownObjectWeakAssign();
  uint64_t v9 = (double *)&v4[direct field offset for UIKitContainerFocusResponderItem.WrapperCoordinateSpace.frame];
  *uint64_t v9 = a1;
  v9[1] = a2;
  void v9[2] = a3;
  void v9[3] = a4;
  v11.receiver = v4;
  v11.super_class = (Class)type metadata accessor for UIKitContainerFocusResponderItem.WrapperCoordinateSpace();
  return objc_msgSendSuper2(&v11, sel_init);
}

id specialized UIKitContainerFocusResponderItem.WrapperCoordinateSpace.__allocating_init(host:frame:)(double a1, double a2, double a3, double a4)
{
  id v8 = objc_allocWithZone((Class)type metadata accessor for UIKitContainerFocusResponderItem.WrapperCoordinateSpace());
  return specialized UIKitContainerFocusResponderItem.WrapperCoordinateSpace.init(host:frame:)(a1, a2, a3, a4);
}

uint64_t specialized UIKitContainerFocusResponderItem.coordinateSpace.getter()
{
  uint64_t result = *(void *)(v0 + direct field offset for UIKitContainerFocusResponderItem.cachedCoordinateSpace);
  if (!result)
  {
    uint64_t v2 = v0;
    type metadata accessor for UIKitContainerFocusResponderItem.WrapperCoordinateSpace();
    unint64_t v3 = (void *)MEMORY[0x18C119DF0](v0 + direct field offset for UIKitContainerFocusResponderItem.host);
    id v4 = specialized UIKitContainerFocusResponderItem.WrapperCoordinateSpace.__allocating_init(host:frame:)(*(double *)(v2 + direct field offset for UIKitContainerFocusResponderItem.frame), *(double *)(v2 + direct field offset for UIKitContainerFocusResponderItem.frame + 8), *(double *)(v2 + direct field offset for UIKitContainerFocusResponderItem.frame + 16), *(double *)(v2 + direct field offset for UIKitContainerFocusResponderItem.frame + 24));

    *(void *)(v2 + direct field offset for UIKitContainerFocusResponderItem.cachedCoordinateSpace) = v4;
    swift_unknownObjectRelease();
    uint64_t result = *(void *)(v2 + direct field offset for UIKitContainerFocusResponderItem.cachedCoordinateSpace);
    if (!result) {
      __break(1u);
    }
  }
  return result;
}

uint64_t specialized FocusBridge.didUpdateFocus(in:with:)(void *a1)
{
  uint64_t result = FocusBridge.host.getter();
  if (result)
  {
    id v4 = (void *)result;
    uint64_t v5 = v3;
    id v6 = objc_msgSend(a1, sel_nextFocusedItem);
    swift_getObjectType();
    uint64_t v7 = *(void *)(v5 + 8);
    id v8 = v4;
    static FocusBridge.focusItem(_:in:)((uint64_t)v6, v8, v7, (uint64_t)v27);
    swift_unknownObjectRelease();

    FocusBridge.focusedItem.getter((uint64_t)v18);
    if (v21 || v22 != 1)
    {
      outlined init with take of FocusItem((uint64_t)v18, (uint64_t)v23);
      if ((v24 & 1) != 0 || v28 || v29 != 1 || (Swift::String v10 = (void *)FocusItem.platformResponder.getter()) == 0)
      {
        outlined destroy of FocusItem((uint64_t)v23);
      }
      else
      {
        objc_super v11 = v10;
        unsigned __int8 v12 = objc_msgSend(v10, sel_isFirstResponder);

        outlined destroy of FocusItem((uint64_t)v23);
        if (v12)
        {
LABEL_29:

          return _s7SwiftUI9FocusItemVSgWOhTm_2((uint64_t)v27, (uint64_t)&lazy cache variable for type metadata for FocusItem?, (uint64_t)&type metadata for FocusItem, MEMORY[0x1E4FBB718], (uint64_t (*)(void))type metadata accessor for _ContiguousArrayStorage<String>);
        }
      }
    }
    else
    {
      _s7SwiftUI9FocusItemVSgWOhTm_2((uint64_t)v18, (uint64_t)&lazy cache variable for type metadata for FocusItem?, (uint64_t)&type metadata for FocusItem, MEMORY[0x1E4FBB718], (uint64_t (*)(void))type metadata accessor for _ContiguousArrayStorage<String>);
    }
    FocusBridge.focusedItem.getter((uint64_t)v23);
    char v9 = specialized static FocusItem.isFocusChange(from:to:)((uint64_t)v23, (uint64_t)v27);
    _s7SwiftUI9FocusItemVSgWOhTm_2((uint64_t)v23, (uint64_t)&lazy cache variable for type metadata for FocusItem?, (uint64_t)&type metadata for FocusItem, MEMORY[0x1E4FBB718], (uint64_t (*)(void))type metadata accessor for _ContiguousArrayStorage<String>);
    if (v9)
    {
      FocusBridge.focusedItem.getter((uint64_t)v23);
      if (v25 || v26 != 1)
      {
        outlined init with copy of FocusItem((uint64_t)v23, (uint64_t)v18);
        _s7SwiftUI9FocusItemVSgWOhTm_2((uint64_t)v23, (uint64_t)&lazy cache variable for type metadata for FocusItem?, (uint64_t)&type metadata for FocusItem, MEMORY[0x1E4FBB718], (uint64_t (*)(void))type metadata accessor for _ContiguousArrayStorage<String>);
        outlined init with copy of FocusItem.Base((uint64_t)v18, (uint64_t)v15);
        if (v17)
        {
          outlined destroy of FocusItem.Base((uint64_t)v15);
        }
        else
        {
          Swift::String v13 = v16;
          swift_retain();
          v13(0);
          swift_release_n();
        }
        outlined destroy of FocusItem((uint64_t)v18);
      }
      else
      {
        _s7SwiftUI9FocusItemVSgWOhTm_2((uint64_t)v23, (uint64_t)&lazy cache variable for type metadata for FocusItem?, (uint64_t)&type metadata for FocusItem, MEMORY[0x1E4FBB718], (uint64_t (*)(void))type metadata accessor for _ContiguousArrayStorage<String>);
      }
      outlined init with copy of FocusItem?((uint64_t)v27, (uint64_t)v23);
      if (v25 || v26 != 1)
      {
        outlined init with copy of FocusItem.Base((uint64_t)v23, (uint64_t)v18);
        if (v20)
        {
          outlined destroy of FocusItem.Base((uint64_t)v18);
        }
        else
        {
          uint64_t v14 = v19;
          swift_retain();
          v14(1);
          swift_release_n();
        }
        outlined destroy of FocusItem((uint64_t)v23);
      }
      else
      {
        _s7SwiftUI9FocusItemVSgWOhTm_2((uint64_t)v23, (uint64_t)&lazy cache variable for type metadata for FocusItem?, (uint64_t)&type metadata for FocusItem, MEMORY[0x1E4FBB718], (uint64_t (*)(void))type metadata accessor for _ContiguousArrayStorage<String>);
      }
      v23[0] = 128;
      ViewRendererHost.invalidateProperties(_:mayDeferUpdate:)();
    }
    outlined init with copy of FocusItem?((uint64_t)v27, (uint64_t)v23);
    FocusBridge.focusedItem.setter((uint64_t)v23);
    goto LABEL_29;
  }
  return result;
}

void specialized UIKitContainerFocusResponderItem.WrapperCoordinateSpace.init()()
{
}

void specialized UIKitContainerFocusResponderItem.init()()
{
}

void partial apply for closure #1 in static FocusBridge.focusItems(responderNode:rect:host:skipRoot:)(void *a1@<X0>, uint64_t a2@<X1>, char *a3@<X8>)
{
  closure #1 in static FocusBridge.focusItems(responderNode:rect:host:skipRoot:)(a1, a2, *(unsigned char *)(v3 + 16), *(void **)(v3 + 24), *(void **)(v3 + 32), *(void **)(v3 + 72), a3, *(CGFloat *)(v3 + 40), *(CGFloat *)(v3 + 48), *(CGFloat *)(v3 + 56), *(CGFloat *)(v3 + 64));
}

void type metadata accessor for _ContiguousArrayStorage<String>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

unint64_t type metadata accessor for UIKitHostContainer()
{
  unint64_t result = lazy cache variable for type metadata for UIKitHostContainer;
  if (!lazy cache variable for type metadata for UIKitHostContainer)
  {
    unint64_t result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for UIKitHostContainer);
  }
  return result;
}

uint64_t partial apply for closure #1 in static FocusBridge.defaultFocusItemsContainer(responderNode:host:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, char *a3@<X8>)
{
  return closure #1 in static FocusBridge.defaultFocusItemsContainer(responderNode:host:)(a1, a2, *(uint64_t **)(v3 + 16), *(void **)(v3 + 24), a3);
}

ValueMetadata *type metadata accessor for UIKitHostContainerFocusItemInput()
{
  return &type metadata for UIKitHostContainerFocusItemInput;
}

ValueMetadata *type metadata accessor for UIKitHostedFocusItemLifecycle.Event()
{
  return &type metadata for UIKitHostedFocusItemLifecycle.Event;
}

uint64_t assignWithCopy for UIKitHostedFocusItemLifecycle(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  swift_unknownObjectWeakCopyAssign();
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(unsigned char *)(a1 + 44) = *(unsigned char *)(a2 + 44);
  long long v4 = *(_OWORD *)(a2 + 48);
  long long v5 = *(_OWORD *)(a2 + 64);
  *(unsigned char *)(a1 + 80) = *(unsigned char *)(a2 + 80);
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  uint64_t v6 = *(void *)(a2 + 96);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *(void *)(a1 + 96) = v6;
  uint64_t v7 = *(void *)(a2 + 112);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  swift_retain();
  swift_release();
  *(void *)(a1 + 112) = v7;
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t initializeWithTake for UIKitHostedFocusItemLifecycle(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  swift_unknownObjectWeakTakeInit();
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(unsigned char *)(a1 + 44) = *(unsigned char *)(a2 + 44);
  long long v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(unsigned char *)(a1 + 80) = *(unsigned char *)(a2 + 80);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  return a1;
}

uint64_t assignWithTake for UIKitHostedFocusItemLifecycle(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  swift_unknownObjectWeakTakeAssign();
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(unsigned char *)(a1 + 44) = *(unsigned char *)(a2 + 44);
  long long v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(unsigned char *)(a1 + 80) = *(unsigned char *)(a2 + 80);
  uint64_t v5 = *(void *)(a2 + 96);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  swift_unknownObjectRelease();
  uint64_t v6 = *(void *)(a2 + 104);
  uint64_t v7 = *(void *)(a2 + 112);
  *(void *)(a1 + 96) = v5;
  *(void *)(a1 + 104) = v6;
  swift_release();
  uint64_t v8 = *(void *)(a2 + 120);
  *(void *)(a1 + 112) = v7;
  *(void *)(a1 + 120) = v8;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for UIKitHostedFocusItemLifecycle(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 128)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 120);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for UIKitHostedFocusItemLifecycle(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 120) = 0;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 128) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 120) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 128) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for UIKitHostedFocusItemLifecycle()
{
  return &type metadata for UIKitHostedFocusItemLifecycle;
}

uint64_t specialized static UIKitHostedFocusItemLifecycle.willRemove(attribute:)()
{
  uint64_t result = AGGraphGetAttributeInfo();
  uint64_t v2 = *(void *)(v1 + 88);
  if (v2)
  {
    uint64_t v3 = v1;
    uint64_t v4 = *(void *)(v1 + 96);
    uint64_t v5 = swift_allocObject();
    *(void *)(v5 + 16) = v2;
    *(void *)(v5 + 24) = v4;
    uint64_t v6 = *(void *)(v3 + 120);
    if (*(void *)(v6 + 16) && *(unsigned char *)(v6 + 32) == 1)
    {
      swift_unknownObjectRetain();
      swift_release();
      uint64_t v7 = MEMORY[0x1E4FBC860];
    }
    else
    {
      type metadata accessor for _ContiguousArrayStorage<String>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<UIKitHostedFocusItemLifecycle.Event>, (uint64_t)&type metadata for UIKitHostedFocusItemLifecycle.Event, MEMORY[0x1E4FBBE00]);
      uint64_t v7 = swift_allocObject();
      *(_OWORD *)(v7 + 16) = xmmword_18834BB80;
      *(unsigned char *)(v7 + 32) = 2;
      *(void *)(v7 + 40) = partial apply for closure #1 in UIKitHostedFocusItemLifecycle.remove();
      *(void *)(v7 + 48) = v5;
      swift_unknownObjectRetain();
    }
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)(v3 + 120) = v7;
  }
  return result;
}

void specialized static UIKitHostedFocusItemLifecycle.didReinsert(attribute:)()
{
  AGGraphGetAttributeInfo();
  uint64_t v1 = v0;
  uint64_t v2 = (void *)MEMORY[0x18C119DF0](v0 + 32);
  if (v2)
  {
    uint64_t v3 = *(void *)(v1 + 88);
    if (v3 && (*(unsigned char *)(v1 + 80) & 1) == 0)
    {
      uint64_t v5 = *(void *)(v1 + 64);
      uint64_t v4 = *(void *)(v1 + 72);
      long long v18 = *(_OWORD *)(v1 + 48);
      uint64_t v6 = *(void *)(v1 + 96);
      id v19 = v2;
      uint64_t v7 = swift_allocObject();
      *(void *)(v7 + 16) = v3;
      *(void *)(v7 + 24) = v6;
      *(_OWORD *)(v7 + 32) = v18;
      *(void *)(v7 + 48) = v5;
      *(void *)(v7 + 56) = v4;
      *(void *)(v7 + 64) = v19;
      uint64_t v8 = *(char **)(v1 + 120);
      swift_unknownObjectRetain_n();
      id v9 = v19;
      swift_retain();
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *(void *)(v1 + 120) = v8;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        uint64_t v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v8 + 2) + 1, 1, v8);
        *(void *)(v1 + 120) = v8;
      }
      unint64_t v11 = *((void *)v8 + 2);
      unint64_t v12 = *((void *)v8 + 3);
      id v13 = (id)(v11 + 1);
      if (v11 >= v12 >> 1)
      {
        id v20 = (id)(v11 + 1);
        uint64_t v15 = v8;
        unint64_t v16 = *((void *)v8 + 2);
        char v17 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v12 > 1), v11 + 1, 1, v15);
        unint64_t v11 = v16;
        id v13 = v20;
        uint64_t v8 = v17;
      }
      *((void *)v8 + 2) = v13;
      uint64_t v14 = &v8[24 * v11];
      v14[32] = 1;
      *((void *)v14 + 5) = partial apply for closure #1 in UIKitHostedFocusItemLifecycle.insert();
      *((void *)v14 + 6) = v7;
      *(void *)(v1 + 120) = v8;
      swift_release();
      swift_unknownObjectRelease();

      AGGraphInvalidateValue();
    }
    else
    {
    }
  }
}

uint64_t objectdestroy_18Tm_1()
{
  swift_unknownObjectRelease();

  return swift_deallocObject();
}

void partial apply for closure #1 in UIKitHostedFocusItemLifecycle.insert()()
{
  uint64_t v1 = *((void *)v0 + 3);
  double v2 = v0[4];
  double v3 = v0[5];
  double v4 = v0[6];
  double v5 = v0[7];
  uint64_t v6 = (void *)*((void *)v0 + 8);
  uint64_t ObjectType = swift_getObjectType();
  (*(void (**)(uint64_t, uint64_t, double, double, double, double))(v1 + 32))(ObjectType, v1, v2, v3, v4, v5);
  AnyUIKitHostedFocusItem.move(toParent:)(v6, ObjectType, v1);
}

void partial apply for closure #1 in UIKitHostedFocusItemLifecycle.remove()()
{
  uint64_t v1 = *(void *)(v0 + 24);
  uint64_t ObjectType = swift_getObjectType();
  AnyUIKitHostedFocusItem.move(toParent:)(0, ObjectType, v1);
}

unsigned char *storeEnumTagSinglePayload for UIKitHostedFocusItemLifecycle.EventType(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1882A6908);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

void *type metadata accessor for UIKitHostedFocusItemLifecycle.EventType()
{
  return &unk_1ED457690;
}

unint64_t lazy protocol witness table accessor for type UIKitHostedFocusItemLifecycle.EventType and conformance UIKitHostedFocusItemLifecycle.EventType()
{
  unint64_t result = lazy protocol witness table cache variable for type UIKitHostedFocusItemLifecycle.EventType and conformance UIKitHostedFocusItemLifecycle.EventType;
  if (!lazy protocol witness table cache variable for type UIKitHostedFocusItemLifecycle.EventType and conformance UIKitHostedFocusItemLifecycle.EventType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UIKitHostedFocusItemLifecycle.EventType and conformance UIKitHostedFocusItemLifecycle.EventType);
  }
  return result;
}

uint64_t DisclosureTableRow.init(isExpanded:label:content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, void (*a5)(uint64_t)@<X4>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>)
{
  uint64_t v29 = a5;
  uint64_t v30 = a2;
  HIDWORD(v27) = a3;
  uint64_t v28 = a1;
  uint64_t v12 = *(void *)(a7 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v14 = (char *)&v27 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v31 = v15;
  uint64_t v32 = v16;
  uint64_t v33 = v18;
  uint64_t v34 = v17;
  uint64_t v19 = type metadata accessor for DisclosureTableRow();
  uint64_t v20 = a8 + *(int *)(v19 + 56);
  *(void *)uint64_t v20 = 0;
  *(void *)(v20 + 8) = 0;
  *(_WORD *)(v20 + 16) = 0;
  uint64_t v21 = *(void *)(a6 - 8);
  uint64_t v22 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v21 + 16))(a8, a4, a6);
  v29(v22);
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v21 + 8))(a4, a6);
  uint64_t v23 = *(int *)(v19 + 52);
  uint64_t v24 = v30;
  uint64_t result = (*(uint64_t (**)(uint64_t, char *, uint64_t))(v12 + 32))(a8 + v23, v14, a7);
  if (v24)
  {
    char v26 = BYTE4(v27) & 1;
    uint64_t result = outlined consume of StateOrBinding<Bool>(*(void *)v20, *(void *)(v20 + 8), *(unsigned __int8 *)(v20 + 16), *(unsigned char *)(v20 + 17));
    *(void *)uint64_t v20 = v28;
    *(void *)(v20 + 8) = v24;
    *(unsigned char *)(v20 + 16) = v26;
    *(unsigned char *)(v20 + 17) = 1;
  }
  return result;
}

uint64_t DisclosureTableRow.$isExpanded.getter(uint64_t a1)
{
  double v2 = (uint64_t *)(v1 + *(int *)(a1 + 56));
  uint64_t v3 = *v2;
  if (*((unsigned char *)v2 + 17))
  {
    swift_retain();
    swift_retain();
  }
  else
  {
    _s7SwiftUI7BindingVySbGMaTm_10(0, (unint64_t *)&lazy cache variable for type metadata for State<Bool>, MEMORY[0x1E4FBB390], MEMORY[0x1E4F41580]);
    State.projectedValue.getter();
    return v5;
  }
  return v3;
}

uint64_t DisclosureTableRow.init(isExpanded:content:label:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, void (*a4)(uint64_t)@<X3>, void (*a5)(uint64_t)@<X4>, uint64_t a6@<X7>, uint64_t a7@<X8>, uint64_t a8)
{
  v18[0] = a4;
  v18[1] = a5;
  double v13 = MEMORY[0x1F4188790](a1);
  uint64_t v15 = (char *)v18 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16(v13);
  DisclosureTableRow.init(isExpanded:label:content:)(a1, a2, a3, (uint64_t)v15, v18[0], a6, a8, a7);
  return swift_release();
}

uint64_t DisclosureTableRow.init<A>(_:isExpanded:content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, void (*a5)(uint64_t)@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v25 = a5;
  uint64_t v26 = a6;
  int v24 = a4;
  uint64_t v22 = a2;
  uint64_t v23 = a3;
  uint64_t v13 = *(void *)(a8 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v15 = (char *)&v21 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_getAssociatedConformanceWitness();
  uint64_t v16 = type metadata accessor for TableRow();
  double v17 = MEMORY[0x1F4188790](v16);
  uint64_t v19 = (char *)&v21 - v18;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v13 + 16))(v15, a1, a8, v17);
  TableRow.init(_:)((uint64_t)v15, a8, (uint64_t)v19);
  swift_getWitnessTable();
  DisclosureTableRow.init(isExpanded:label:content:)(v22, v23, v24, (uint64_t)v19, v25, v16, a7, a9);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v13 + 8))(a1, a8);
}

uint64_t DisclosureTableRow.tableRowBody.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = *(void *)(a1 + 24);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *(void *)(v9 + 16);
  double v11 = MEMORY[0x1F4188790](v9);
  uint64_t v13 = (char *)&v19 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v14 + 16))(v13, v2, v10, v11);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, v2 + *(int *)(a1 + 52), v5);
  uint64_t v15 = DisclosureTableRow.$isExpanded.getter(a1);
  return DisclosureTableRow.PrimitiveDisclosureTableRow.init(label:content:isExpanded:)((uint64_t)v13, (uint64_t)v8, v15, v17, v16 & 1, v10, v5, a2);
}

uint64_t DisclosureTableRow.PrimitiveDisclosureTableRow.init(label:content:isExpanded:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char a5@<W4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a6 - 8) + 32))(a8, a1, a6);
  uint64_t v14 = type metadata accessor for DisclosureTableRow.PrimitiveDisclosureTableRow();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a7 - 8) + 32))(a8 + *(int *)(v14 + 52), a2, a7);
  uint64_t v16 = a8 + *(int *)(v14 + 56);
  *(void *)uint64_t v16 = a3;
  *(void *)(v16 + 8) = a4;
  *(unsigned char *)(v16 + 16) = a5;
  return result;
}

uint64_t static DisclosureTableRow._containsOutlineSymbol(inputs:)()
{
  return 1;
}

uint64_t associated type witness table accessor for TableRowContent.TableRowBody : TableRowContent in DisclosureTableRow<A, B>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for TableRowContent.TableRowValue : Identifiable in DisclosureTableRow<A, B>()
{
  return swift_getAssociatedConformanceWitness();
}

uint64_t DisclosureTableRow.PrimitiveDisclosureTableRow.$isExpanded.getter(uint64_t a1)
{
  uint64_t v2 = *(void *)(v1 + *(int *)(a1 + 56));
  swift_retain();
  swift_retain();
  return v2;
}

uint64_t static DisclosureTableRow.PrimitiveDisclosureTableRow._makeRows(content:inputs:)@<X0>(unsigned int *a1@<X0>, long long *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  void (*v20)(unint64_t *__return_ptr, int *, long long *, uint64_t, uint64_t);
  unint64_t v21;
  int v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t WitnessTable;
  uint64_t v36;
  uint64_t v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  unsigned int v42;
  int v43;
  unint64_t v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void v50[14];
  long long v51;
  long long v52;
  long long v53;
  long long v54;
  long long v55;
  long long v56;
  long long v57;
  long long v58;
  long long v59;
  unsigned int v60;
  long long v61;
  long long v62;
  long long v63;
  long long v64;
  long long v65;
  long long v66;
  long long v67;
  long long v68;
  long long v69;
  unint64_t v70;
  long long v71;
  long long v72;
  long long v73;
  long long v74;
  long long v75;
  long long v76;
  long long v77;
  long long v78;
  long long v79;
  unint64_t v80;
  uint64_t v81;

  double v39 = a7;
  uint64_t v81 = *MEMORY[0x1E4F143B8];
  unsigned int v11 = *a1;
  long long v12 = a2[7];
  long long v77 = a2[6];
  uint64_t v78 = v12;
  long long v79 = a2[8];
  long long v80 = *((void *)a2 + 18);
  long long v13 = a2[3];
  uint64_t v73 = a2[2];
  uint64_t v74 = v13;
  long long v14 = a2[5];
  unint64_t v75 = a2[4];
  unint64_t v76 = v14;
  long long v15 = a2[1];
  uint64_t v71 = *a2;
  uint64_t v72 = v15;
  v50[10] = a3;
  v50[11] = a4;
  v50[12] = a5;
  v50[13] = a6;
  swift_getKeyPath();
  LODWORD(v51) = v11;
  double v42 = v11;
  type metadata accessor for DisclosureTableRow.PrimitiveDisclosureTableRow();
  type metadata accessor for _GraphValue();
  _GraphValue.subscript.getter();
  swift_release();
  type metadata accessor for _GraphValue<Binding<Bool>>();
  uint64_t v38 = _GraphValue.value.getter();
  v50[6] = a3;
  v50[7] = a4;
  v50[8] = a5;
  v50[9] = a6;
  outlined retain of _TableRowInputs((uint64_t)&v71);
  _GraphValue.subscript.getter();
  os_log_t v67 = v77;
  uint64_t v68 = v78;
  os_log_type_t v69 = v79;
  int v70 = v80;
  unint64_t v63 = v73;
  os_log_t v64 = v74;
  uint64_t v65 = v75;
  uint64_t v66 = v76;
  uint64_t v61 = v71;
  unint64_t v62 = v72;
  (*(void (**)(long long *__return_ptr, unint64_t *, long long *, uint64_t, uint64_t))(a5 + 48))(&v51, &v44, &v61, a3, a5);
  id v60 = v80;
  double v40 = v51;
  LODWORD(v44) = HIDWORD(v80);
  double v41 = DWORD2(v51);
  unint64_t v57 = v77;
  uint64_t v58 = v78;
  unint64_t v59 = v79;
  uint64_t v53 = v73;
  unint64_t v54 = v74;
  unint64_t v55 = v75;
  uint64_t v56 = v76;
  uint64_t v51 = v71;
  uint64_t v52 = v72;
  *(void *)&uint64_t v61 = a3;
  *((void *)&v61 + 1) = a4;
  *(void *)&unint64_t v62 = a5;
  *((void *)&v62 + 1) = a6;
  uint64_t v16 = type metadata accessor for DisclosureTableRow.IncreaseDepthTrait();
  v50[2] = v16;
  void v50[3] = swift_getWitnessTable();
  outlined retain of _TableRowInputs((uint64_t)&v71);
  _s7SwiftUI7BindingVySbGMaTm_10(0, (unint64_t *)&lazy cache variable for type metadata for Attribute<ViewTraitCollection>, MEMORY[0x1E4F40530], MEMORY[0x1E4F4E740]);
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v44, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TA_22, (uint64_t)v50, v16, MEMORY[0x1E4FBC248], v17, MEMORY[0x1E4FBC278], v18);
  uint64_t v37 = 0;
  unsigned int v19 = v61;
  unint64_t v46 = a3;
  uint64_t v47 = a4;
  id v48 = a5;
  uint64_t v49 = a6;
  LODWORD(v61) = v42;
  _GraphValue.subscript.getter();
  os_log_t v67 = v57;
  uint64_t v68 = v58;
  os_log_type_t v69 = v59;
  unint64_t v63 = v53;
  os_log_t v64 = v54;
  uint64_t v65 = v55;
  uint64_t v66 = v56;
  uint64_t v61 = v51;
  unint64_t v62 = v52;
  int v70 = __PAIR64__(v19, v60);
  double v42 = v19;
  uint64_t v20 = *(void (**)(unint64_t *__return_ptr, int *, long long *, uint64_t, uint64_t))(a6 + 48);
  char v36 = a6;
  v20(&v44, &v43, &v61, a4, a6);
  uint64_t v21 = v44;
  uint64_t v22 = v45;
  *(void *)&uint64_t v61 = v40;
  DWORD2(v61) = v41;
  uint64_t v23 = PreferencesOutputs.subscript.getter();
  if ((v23 & 0x100000000) != 0)
  {
    __break(1u);
LABEL_5:
    __break(1u);
  }
  int v24 = v23;
  swift_bridgeObjectRelease();
  *(void *)&uint64_t v61 = v21;
  DWORD2(v61) = v22;
  uint64_t v25 = PreferencesOutputs.subscript.getter();
  if ((v25 & 0x100000000) != 0) {
    goto LABEL_5;
  }
  uint64_t v26 = v25;
  uint64_t v27 = swift_bridgeObjectRelease();
  uint64_t v44 = __PAIR64__(v24, v38);
  uint64_t v45 = v26;
  MEMORY[0x1F4188790](v27);
  *(void *)&uint64_t v61 = a3;
  *((void *)&v61 + 1) = a4;
  *(void *)&unint64_t v62 = a5;
  *((void *)&v62 + 1) = v36;
  uint64_t v34 = type metadata accessor for DisclosureTableRow.DisclosureRowList();
  uint64_t WitnessTable = swift_getWitnessTable();
  _s7SwiftUI7BindingVySbGMaTm_10(0, (unint64_t *)&lazy cache variable for type metadata for Attribute<TableRowList>, (uint64_t)&type metadata for TableRowList, MEMORY[0x1E4F4E740]);
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v44, (uint64_t)partial apply for closure #1 in Attribute.init<A>(_:), (uint64_t)&v33, v34, MEMORY[0x1E4FBC248], v28, MEMORY[0x1E4FBC278], v29);
  uint64_t v30 = v61;
  uint64_t v31 = PreferencesOutputs.init()();
  *(void *)&uint64_t v61 = *((void *)&v79 + 1);
  DWORD2(v61) = v80;
  MEMORY[0x1F4188790](v31);
  LODWORD(v34) = v30;
  swift_bridgeObjectRetain();
  PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
  outlined release of _TableRowInputs((uint64_t)&v71);
  swift_bridgeObjectRelease();
  os_log_t v67 = v57;
  uint64_t v68 = v58;
  os_log_type_t v69 = v59;
  unint64_t v63 = v53;
  os_log_t v64 = v54;
  uint64_t v65 = v55;
  uint64_t v66 = v56;
  uint64_t v61 = v51;
  unint64_t v62 = v52;
  int v70 = __PAIR64__(v42, v60);
  return outlined release of _TableRowInputs((uint64_t)&v61);
}

uint64_t key path getter for DisclosureTableRow.PrimitiveDisclosureTableRow.$isExpanded : <A, B>DisclosureTableRow<A, B>.PrimitiveDisclosureTableRow@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for DisclosureTableRow.PrimitiveDisclosureTableRow();
  uint64_t result = DisclosureTableRow.PrimitiveDisclosureTableRow.$isExpanded.getter(v2);
  *(void *)a1 = result;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v5 & 1;
  return result;
}

uint64_t closure #1 in static DisclosureTableRow.PrimitiveDisclosureTableRow._makeRows(content:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v11 = a2;
  uint64_t v12 = a3;
  uint64_t v13 = a4;
  uint64_t v14 = a5;
  v10[2] = type metadata accessor for DisclosureTableRow.PrimitiveDisclosureTableRow();
  void v10[3] = a2;
  uint64_t v7 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(a1, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply, (uint64_t)v10, a2, MEMORY[0x1E4FBC248], v7, MEMORY[0x1E4FBC278], v8);
  return v11;
}

uint64_t closure #2 in static DisclosureTableRow.PrimitiveDisclosureTableRow._makeRows(content:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v13 = a2;
  uint64_t v14 = a3;
  uint64_t v15 = a4;
  uint64_t v16 = a5;
  uint64_t v7 = type metadata accessor for DisclosureTableRow.PrimitiveDisclosureTableRow();
  uint64_t v8 = a1 + *(int *)(v7 + 52);
  unint64_t v12[2] = v7;
  void v12[3] = a3;
  uint64_t v9 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v8, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply, (uint64_t)v12, a3, MEMORY[0x1E4FBC248], v9, MEMORY[0x1E4FBC278], v10);
  return v13;
}

uint64_t protocol witness for static TableRowContent._makeRows(content:inputs:) in conformance DisclosureTableRow<A, B>.PrimitiveDisclosureTableRow@<X0>(unsigned int *a1@<X0>, long long *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  return static DisclosureTableRow.PrimitiveDisclosureTableRow._makeRows(content:inputs:)(a1, a2, a3[2], a3[3], a3[4], a3[5], a4);
}

void (*DisclosureTableRow.IncreaseDepthTrait.value.getter@<X0>(int a1@<W0>, uint64_t *a2@<X8>))(double *, void)
{
  if (*MEMORY[0x1E4F4E7A0] == a1 || (AGGraphGetValue(), (uint64_t v3 = swift_bridgeObjectRetain()) == 0)) {
    ViewTraitCollection.init()();
  }
  else {
    uint64_t v8 = v3;
  }
  uint64_t result = (void (*)(double *, void))ViewTraitCollection.groupDepth.modify();
  if (__OFADD__(*v5, 1))
  {
    __break(1u);
  }
  else
  {
    ++*v5;
    result(v7, 0);
    ViewTraitCollection.value<A>(for:defaultValue:)();
    if (v7[0] == 0.0) {
      double v6 = 20.0;
    }
    else {
      double v6 = v7[0] + 20.0;
    }
    v7[0] = v6;
    uint64_t result = (void (*)(double *, void))ViewTraitCollection.subscript.setter();
    *a2 = v8;
  }
  return result;
}

uint64_t DisclosureTableRow.DisclosureRowList.isExpanded.getter()
{
  _s7SwiftUI7BindingVySbGMaTm_10(0, (unint64_t *)&lazy cache variable for type metadata for Binding<Bool>, MEMORY[0x1E4FBB390], MEMORY[0x1E4F41638]);
  uint64_t v0 = *(void *)AGGraphGetValue();
  swift_retain();
  swift_retain();
  return v0;
}

void (*protocol witness for Rule.value.getter in conformance DisclosureTableRow<A, B>.IncreaseDepthTrait@<X0>(uint64_t *a1@<X8>))(double *, void)
{
  return DisclosureTableRow.IncreaseDepthTrait.value.getter(*v1, a1);
}

double DisclosureTableRow.DisclosureRowList.value.getter@<D0>(uint64_t *a1@<X8>)
{
  uint64_t Value = AGGraphGetValue();
  outlined init with copy of TableRowList(Value, (uint64_t)v15);
  uint64_t v3 = AGGraphGetValue();
  outlined init with copy of TableRowList(v3, (uint64_t)v13);
  uint64_t v4 = DisclosureTableRow.DisclosureRowList.isExpanded.getter();
  uint64_t v6 = v5;
  char v8 = v7;
  a1[3] = type metadata accessor for DisclosureTableRow.DisclosureTableRowGenerator();
  a1[4] = (uint64_t)&protocol witness table for DisclosureTableRow<A, B>.DisclosureTableRowGenerator;
  uint64_t v9 = swift_allocObject();
  long long v10 = v15[1];
  *(_OWORD *)(v9 + 16) = v15[0];
  *(_OWORD *)(v9 + 32) = v10;
  double result = *(double *)v13;
  long long v12 = v13[1];
  *(_OWORD *)(v9 + 56) = v13[0];
  *a1 = v9;
  *(void *)(v9 + 48) = v16;
  *(_OWORD *)(v9 + 72) = v12;
  *(void *)(v9 + 88) = v14;
  *(void *)(v9 + 96) = v4;
  *(void *)(v9 + 104) = v6;
  *(unsigned char *)(v9 + 112) = v8 & 1;
  return result;
}

double protocol witness for Rule.value.getter in conformance DisclosureTableRow<A, B>.DisclosureRowList@<D0>(uint64_t *a1@<X8>)
{
  return DisclosureTableRow.DisclosureRowList.value.getter(a1);
}

uint64_t DisclosureTableRow.HeaderExtractionVisitor.visit<A, B>(rowValue:view:children:traits:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5)
{
  uint64_t v25 = a2;
  uint64_t v26 = a1;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v9 = type metadata accessor for Optional();
  uint64_t v27 = *(void *)(v9 - 8);
  uint64_t v28 = v9;
  MEMORY[0x1F4188790](v9);
  uint64_t v11 = (char *)&v25 - v10;
  uint64_t v12 = type metadata accessor for Optional();
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x1F4188790](v12);
  uint64_t v15 = (char *)&v25 - v14;
  uint64_t v16 = type metadata accessor for Optional();
  double v17 = MEMORY[0x1F4188790](v16);
  uint64_t v19 = *a4;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v20 + 16))((char *)&v25 - v18, v25, v16, v17);
  swift_getWitnessTable();
  uint64_t v21 = AnyView.init<A>(_:)();
  swift_release();
  *uint64_t v5 = v21;
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v15, v26, v12);
  int v22 = swift_dynamicCast();
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 56))(v11, v22 ^ 1u, 1, AssociatedTypeWitness);
  (*(void (**)(char *, char *, uint64_t))(v27 + 40))((char *)v5 + *(int *)(a5 + 52), v11, v28);
  uint64_t v23 = *(int *)(a5 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(uint64_t *)((char *)v5 + v23) = v19;
  return 0;
}

uint64_t DisclosureTableRow.HeaderExtractionVisitor.init()@<X0>(void *a1@<X8>)
{
  *a1 = 0;
  uint64_t v2 = type metadata accessor for DisclosureTableRow.HeaderExtractionVisitor();
  uint64_t v3 = (char *)a1 + *(int *)(v2 + 52);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 56))(v3, 1, 1, AssociatedTypeWitness);
  *(void *)((char *)a1 + *(int *)(v2 + 56)) = 0;
  return result;
}

uint64_t protocol witness for TableRowVisitor.visit<A, B>(rowValue:view:children:traits:) in conformance DisclosureTableRow<A, B>.HeaderExtractionVisitor(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return DisclosureTableRow.HeaderExtractionVisitor.visit<A, B>(rowValue:view:children:traits:)(a1, a2, a3, a4, a9);
}

uint64_t DisclosureTableRow.DisclosureTableRowGenerator.count.getter()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(void *)(v0 + 88);
  char v3 = *(unsigned char *)(v0 + 96);
  v8[0] = *(void *)(v0 + 80);
  v8[1] = v2;
  char v9 = v3;
  _s7SwiftUI7BindingVySbGMaTm_10(0, (unint64_t *)&lazy cache variable for type metadata for Binding<Bool>, MEMORY[0x1E4FBB390], MEMORY[0x1E4F41638]);
  MEMORY[0x18C113DA0](&v12);
  uint64_t v4 = 0;
  if (v12 == 1)
  {
    outlined init with copy of TableRowList(v1 + 40, (uint64_t)v8);
    uint64_t v5 = v10;
    uint64_t v6 = v11;
    __swift_project_boxed_opaque_existential_1(v8, v10);
    uint64_t v4 = (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 16))(v5, v6);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v8);
  }
  uint64_t result = v4 + 1;
  if (__OFADD__(v4, 1)) {
    __break(1u);
  }
  return result;
}

uint64_t DisclosureTableRow.DisclosureTableRowGenerator.rowIDs.getter()
{
  uint64_t v1 = v0;
  uint64_t v2 = v0[3];
  uint64_t v3 = v0[4];
  __swift_project_boxed_opaque_existential_1(v0, v2);
  uint64_t v4 = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 24))(v2, v3);
  if (!v4) {
    return 0;
  }
  uint64_t v5 = v4;
  uint64_t v6 = (*(uint64_t (**)(void))(*(void *)v4 + 88))();
  if (v6 == (*(uint64_t (**)(void))(*(void *)v5 + 96))())
  {
    swift_release();
    return 0;
  }
  (*(void (**)(void *__return_ptr, uint64_t))(*(void *)v5 + 104))(v17, v6);
  outlined init with take of TableRowID((uint64_t)v17, (uint64_t)v19);
  _s7SwiftUI7BindingVySbGMaTm_10(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<TableRowID>, (uint64_t)&type metadata for TableRowID, MEMORY[0x1E4FBBE00]);
  uint64_t v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16) = xmmword_18834BB80;
  outlined init with copy of TableRowID((uint64_t)v19, v8 + 32);
  type metadata accessor for WrappedTableRowIDs<[TableRowID]>();
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = v8;
  uint64_t v9 = v1[11];
  char v10 = *((unsigned char *)v1 + 96);
  v17[0] = v1[10];
  v17[1] = v9;
  char v18 = v10;
  _s7SwiftUI7BindingVySbGMaTm_10(0, (unint64_t *)&lazy cache variable for type metadata for Binding<Bool>, MEMORY[0x1E4FBB390], MEMORY[0x1E4F41638]);
  MEMORY[0x18C113DA0](&v16);
  if (v16 == 1
    && (uint64_t v11 = v1 + 5,
        uint64_t v13 = v1[8],
        uint64_t v12 = v1[9],
        __swift_project_boxed_opaque_existential_1(v11, v13),
        (*(uint64_t (**)(uint64_t, uint64_t))(v12 + 24))(v13, v12)))
  {
    swift_beginAccess();
    uint64_t v14 = swift_retain();
    specialized Array.append<A>(contentsOf:)(v14);
    swift_endAccess();
    swift_release();
    swift_release();
    outlined destroy of TableRowID((uint64_t)v19);
  }
  else
  {
    outlined destroy of TableRowID((uint64_t)v19);
    swift_release();
  }
  return v7;
}

uint64_t DisclosureTableRow.DisclosureTableRowGenerator.visitRows<A>(applying:from:)(uint64_t a1, uint64_t *a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = v5;
  uint64_t v67 = a4;
  uint64_t v8 = a3;
  uint64_t v66 = a1;
  uint64_t v10 = a3[3];
  uint64_t v11 = a3[4];
  uint64_t v12 = a3[5];
  v76[0] = a3[2];
  v76[1] = v10;
  uint64_t v56 = v10;
  uint64_t v62 = v11;
  v76[2] = v11;
  v76[3] = v12;
  uint64_t v55 = v12;
  uint64_t v68 = type metadata accessor for DisclosureTableRow.HeaderExtractionVisitor();
  uint64_t v13 = *(void *)(v68 - 8);
  v14.n128_f64[0] = MEMORY[0x1F4188790](v68);
  uint64_t v61 = (uint64_t *)((char *)&v50 - v15);
  uint64_t v16 = *(v8 - 1);
  double v17 = *(void (**)(void *, uint64_t, void *))(v16 + 16);
  uint64_t v65 = v16 + 16;
  os_log_t v64 = v17;
  ((void (*)(void *, uint64_t, void *, __n128))v17)(v76, v5, v8, v14);
  uint64_t v18 = *a2;
  uint64_t v19 = DisclosureTableRow.DisclosureTableRowGenerator.count.getter();
  uint64_t v21 = *(void (**)(void *, void *))(v16 + 8);
  uint64_t v20 = v16 + 8;
  unint64_t v63 = v21;
  v21(v76, v8);
  if (v18 >= v19) {
    return 1;
  }
  uint64_t v58 = v6 + 40;
  uint64_t v54 = a5 + 8;
  uint64_t v53 = (uint64_t (**)(void *, uint64_t))(v13 + 8);
  uint64_t v52 = a2;
  uint64_t v51 = v8;
  uint64_t v60 = v6;
  uint64_t v50 = v20;
  uint64_t v57 = a5;
  while (1)
  {
    uint64_t v24 = *a2;
    if (!*a2)
    {
      double v40 = v61;
      DisclosureTableRow.HeaderExtractionVisitor.init()(v61);
      uint64_t v75 = 0;
      outlined init with copy of TableRowList(v6, (uint64_t)&v72);
      uint64_t v41 = *((void *)&v73 + 1);
      uint64_t v42 = v74;
      __swift_project_boxed_opaque_existential_1(&v72, *((uint64_t *)&v73 + 1));
      uint64_t v43 = v68;
      (*(void (**)(void *, uint64_t *, uint64_t, _UNKNOWN **, uint64_t, uint64_t))(v42 + 8))(v40, &v75, v68, &protocol witness table for DisclosureTableRow<A, B>.HeaderExtractionVisitor, v41, v42);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v72);
      if (*(void *)((char *)v40 + *(int *)(v43 + 56))) {
        uint64_t v71 = *(void *)((char *)v40 + *(int *)(v43 + 56));
      }
      else {
        ViewTraitCollection.init()();
      }
      uint64_t v44 = *(void *)(v60 + 88);
      char v45 = *(unsigned char *)(v60 + 96);
      *(void *)&long long v72 = *(void *)(v60 + 80);
      *((void *)&v72 + 1) = v44;
      LOBYTE(v73) = v45;
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
      ViewTraitCollection.subscript.setter();
      uint64_t v74 = 0;
      long long v72 = 0u;
      long long v73 = 0u;
      unint64_t v46 = v61;
      uint64_t v47 = (char *)v61 + *(int *)(v68 + 52);
      uint64_t v70 = *v61;
      uint64_t v69 = v71;
      unint64_t v59 = *(uint64_t (**)(char *, uint64_t *, long long *, uint64_t *, uint64_t, void, uint64_t, void, uint64_t, uint64_t))(a5 + 8);
      uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
      uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
      swift_retain();
      LOBYTE(v47) = v59(v47, &v70, &v72, &v69, AssociatedTypeWitness, MEMORY[0x1E4F41618], AssociatedConformanceWitness, MEMORY[0x1E4F41610], v67, a5);
      swift_release();
      swift_bridgeObjectRelease();
      outlined destroy of TableRowList?((uint64_t)&v72);
      uint64_t result = (*v53)(v46, v68);
      if ((v47 & 1) == 0) {
        return 0;
      }
      a2 = v52;
      if (__OFADD__(*v52, 1)) {
        goto LABEL_21;
      }
      ++*v52;
      uint64_t v8 = v51;
      uint64_t v6 = v60;
      uint64_t v20 = v50;
      goto LABEL_3;
    }
    uint64_t v25 = *(void *)(v6 + 88);
    char v26 = *(unsigned char *)(v6 + 96);
    *(void *)&long long v72 = *(void *)(v6 + 80);
    *((void *)&v72 + 1) = v25;
    LOBYTE(v73) = v26;
    _s7SwiftUI7BindingVySbGMaTm_10(0, (unint64_t *)&lazy cache variable for type metadata for Binding<Bool>, MEMORY[0x1E4FBB390], MEMORY[0x1E4F41638]);
    uint64_t result = (uint64_t)MEMORY[0x18C113DA0](&v75);
    if (v75 != 1) {
      return 0;
    }
    if (__OFSUB__(v24, 1)) {
      break;
    }
    uint64_t v28 = a2;
    uint64_t v29 = v6;
    uint64_t v30 = v20;
    uint64_t v75 = v24 - 1;
    uint64_t v31 = v58;
    outlined init with copy of TableRowList(v58, (uint64_t)&v72);
    uint64_t v32 = *((void *)&v73 + 1);
    uint64_t v33 = v74;
    __swift_project_boxed_opaque_existential_1(&v72, *((uint64_t *)&v73 + 1));
    uint64_t v34 = (*(uint64_t (**)(uint64_t, uint64_t))(v33 + 16))(v32, v33);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v72);
    uint64_t v35 = v31;
    a5 = v57;
    outlined init with copy of TableRowList(v35, (uint64_t)&v72);
    uint64_t v36 = *((void *)&v73 + 1);
    uint64_t v37 = v74;
    __swift_project_boxed_opaque_existential_1(&v72, *((uint64_t *)&v73 + 1));
    char v38 = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t))(v37 + 8))(v66, &v75, v67, a5, v36, v37);
    uint64_t result = __swift_destroy_boxed_opaque_existential_1((uint64_t)&v72);
    if ((v38 & 1) == 0) {
      return 0;
    }
    uint64_t v39 = v34 + 1;
    if (__OFADD__(v34, 1)) {
      goto LABEL_20;
    }
    a2 = v28;
    *uint64_t v28 = v39;
    uint64_t v20 = v30;
    uint64_t v6 = v29;
LABEL_3:
    v64(v76, v6, v8);
    uint64_t v22 = *a2;
    uint64_t v23 = DisclosureTableRow.DisclosureTableRowGenerator.count.getter();
    v63(v76, v8);
    if (v22 >= v23) {
      return 1;
    }
  }
  __break(1u);
LABEL_20:
  __break(1u);
LABEL_21:
  __break(1u);
  return result;
}

uint64_t protocol witness for TableRowGenerator.visitRows<A>(applying:from:) in conformance DisclosureTableRow<A, B>.DisclosureTableRowGenerator(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, void *a5)
{
  return DisclosureTableRow.DisclosureTableRowGenerator.visitRows<A>(applying:from:)(a1, a2, a5, a3, a4);
}

uint64_t type metadata completion function for DisclosureTableRow()
{
  return type metadata completion function for DisclosureTableRow();
}

{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t getEnumTagSinglePayload for DisclosureTableRow(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(unsigned int *)(v5 + 84);
  uint64_t v7 = *(void *)(*(void *)(a3 + 24) - 8);
  unsigned int v8 = *(_DWORD *)(v7 + 84);
  uint64_t v9 = *(unsigned __int8 *)(v7 + 80);
  if (v8 <= v6) {
    unsigned int v10 = *(_DWORD *)(v5 + 84);
  }
  else {
    unsigned int v10 = *(_DWORD *)(v7 + 84);
  }
  if (v10 <= 0xFE) {
    unsigned int v10 = 254;
  }
  if (!a2) {
    return 0;
  }
  uint64_t v11 = *(void *)(*(void *)(v4 - 8) + 64) + v9;
  uint64_t v12 = *(void *)(v7 + 64) + 7;
  if (v10 < a2)
  {
    unint64_t v13 = ((v12 + (v11 & ~v9)) & 0xFFFFFFFFFFFFFFF8) + 18;
    unsigned int v14 = (a2 - v10 + 0xFFFF) >> (8 * v13);
    if (v13 <= 3) {
      unsigned int v15 = v14 + 1;
    }
    else {
      unsigned int v15 = 2;
    }
    if (v15 >= 0x10000) {
      LODWORD(v16) = 4;
    }
    else {
      LODWORD(v16) = 2;
    }
    if (v15 < 0x100) {
      LODWORD(v16) = 1;
    }
    if (v15 >= 2) {
      uint64_t v16 = v16;
    }
    else {
      uint64_t v16 = 0;
    }
    switch(v16)
    {
      case 1:
        int v17 = *((unsigned __int8 *)a1 + v13);
        if (!*((unsigned char *)a1 + v13)) {
          break;
        }
        goto LABEL_24;
      case 2:
        int v17 = *(unsigned __int16 *)((char *)a1 + v13);
        if (*(unsigned __int16 *)((char *)a1 + v13)) {
          goto LABEL_24;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x1882A8C20);
      case 4:
        int v17 = *(_DWORD *)((char *)a1 + v13);
        if (!v17) {
          break;
        }
LABEL_24:
        int v19 = (v17 - 1) << (8 * v13);
        if (v13 <= 3)
        {
          int v20 = *a1;
        }
        else
        {
          int v19 = 0;
          int v20 = *(_DWORD *)a1;
        }
        return v10 + (v20 | v19) + 1;
      default:
        break;
    }
  }
  if (v6 == v10) {
    return (*(uint64_t (**)(unsigned __int16 *, uint64_t, uint64_t))(v5 + 48))(a1, v6, v4);
  }
  unint64_t v21 = ((unint64_t)a1 + v11) & ~v9;
  if (v8 == v10) {
    return (*(uint64_t (**)(unint64_t))(v7 + 48))(v21);
  }
  unsigned int v22 = *(unsigned __int8 *)(((v12 + v21) & 0xFFFFFFFFFFFFFFF8) + 17);
  if (v22 >= 2) {
    return (v22 ^ 0xFF) + 1;
  }
  else {
    return 0;
  }
}

void storeEnumTagSinglePayload for DisclosureTableRow(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  uint64_t v8 = *(void *)(*(void *)(a4 + 24) - 8);
  unsigned int v9 = *(_DWORD *)(v8 + 84);
  uint64_t v10 = *(void *)(v6 + 64);
  uint64_t v11 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v12 = *(void *)(v8 + 64);
  if (v9 <= v7) {
    unsigned int v13 = *(_DWORD *)(v6 + 84);
  }
  else {
    unsigned int v13 = *(_DWORD *)(v8 + 84);
  }
  if (v13 <= 0xFE) {
    unsigned int v13 = 254;
  }
  uint64_t v14 = v10 + v11;
  uint64_t v15 = (v10 + v11) & ~v11;
  uint64_t v16 = v12 + 7;
  size_t v17 = ((v12 + 7 + v15) & 0xFFFFFFFFFFFFFFF8) + 18;
  char v18 = 8 * v17;
  if (v13 >= a3)
  {
    int v22 = 0;
    if (v13 >= a2)
    {
LABEL_19:
      switch(v22)
      {
        case 1:
          a1[v17] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_33;
        case 2:
          *(_WORD *)&a1[v17] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_33;
        case 3:
          goto LABEL_49;
        case 4:
          *(_DWORD *)&a1[v17] = 0;
          goto LABEL_32;
        default:
LABEL_32:
          if (a2)
          {
LABEL_33:
            if (v7 == v13)
            {
              char v26 = *(void (**)(void))(v6 + 56);
              v26();
            }
            else
            {
              unint64_t v27 = (unint64_t)&a1[v14] & ~v11;
              if (v9 == v13)
              {
                uint64_t v28 = *(void (**)(unint64_t))(v8 + 56);
                v28(v27);
              }
              else
              {
                unint64_t v29 = (v16 + v27) & 0xFFFFFFFFFFFFFFF8;
                if (a2 > 0xFE)
                {
                  *(void *)unint64_t v29 = 0;
                  *(void *)(v29 + 8) = 0;
                  *(_WORD *)(v29 + 16) = 0;
                  *(_DWORD *)unint64_t v29 = a2 - 255;
                }
                else
                {
                  *(unsigned char *)(v29 + 17) = -(char)a2;
                }
              }
            }
          }
          break;
      }
      return;
    }
  }
  else
  {
    unsigned int v19 = (a3 - v13 + 0xFFFF) >> v18;
    if (v17 <= 3) {
      unsigned int v20 = v19 + 1;
    }
    else {
      unsigned int v20 = 2;
    }
    if (v20 >= 0x10000) {
      int v21 = 4;
    }
    else {
      int v21 = 2;
    }
    if (v20 < 0x100) {
      int v21 = 1;
    }
    if (v20 >= 2) {
      int v22 = v21;
    }
    else {
      int v22 = 0;
    }
    if (v13 >= a2) {
      goto LABEL_19;
    }
  }
  unsigned int v23 = ~v13 + a2;
  unsigned int v24 = v23 >> v18;
  bzero(a1, v17);
  if (v17 <= 3) {
    int v25 = v24 + 1;
  }
  else {
    int v25 = 1;
  }
  if (v17 > 3) {
    *(_DWORD *)a1 = v23;
  }
  else {
    *(_WORD *)a1 = v23;
  }
  switch(v22)
  {
    case 1:
      a1[v17] = v25;
      break;
    case 2:
      *(_WORD *)&a1[v17] = v25;
      break;
    case 3:
LABEL_49:
      __break(1u);
      JUMPOUT(0x1882A8EF8);
    case 4:
      *(_DWORD *)&a1[v17] = v25;
      break;
    default:
      return;
  }
}

uint64_t type metadata accessor for DisclosureTableRow()
{
  return swift_getGenericMetadata();
}

_UNKNOWN **sub_1882A8F38()
{
  return &protocol witness table for DisclosureTableRow<A, B>.PrimitiveDisclosureTableRow;
}

uint64_t type metadata completion function for DisclosureTableRow.PrimitiveDisclosureTableRow()
{
  return type metadata completion function for DisclosureTableRow();
}

uint64_t *initializeBufferWithCopyOfBuffer for DisclosureTableRow.PrimitiveDisclosureTableRow(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  uint64_t v7 = *(void *)(a3 + 24);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(_DWORD *)(v8 + 80);
  uint64_t v10 = v6 + v9;
  uint64_t v11 = *(void *)(v8 + 64) + 7;
  unint64_t v12 = ((v11 + ((v6 + v9) & ~v9)) & 0xFFFFFFFFFFFFFFF8) + 17;
  unsigned int v13 = v9 | *(_DWORD *)(v5 + 80) & 0xF8;
  if (v13 > 7 || ((*(_DWORD *)(v5 + 80) | *(_DWORD *)(v8 + 80)) & 0x100000) != 0 || v12 > 0x18)
  {
    uint64_t v16 = *a2;
    *a1 = *a2;
    uint64_t v4 = (uint64_t *)(v16 + (((v13 | 7) + 16) & ~(unint64_t)(v13 | 7)));
  }
  else
  {
    uint64_t v17 = ~v9;
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    unint64_t v18 = ((unint64_t)a2 + v10) & v17;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v8 + 16))(((unint64_t)v4 + v10) & v17, v18, v7);
    unint64_t v19 = (v11 + (((unint64_t)v4 + v10) & v17)) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v20 = (v11 + v18) & 0xFFFFFFFFFFFFFFF8;
    *(void *)unint64_t v19 = *(void *)v20;
    *(void *)(v19 + 8) = *(void *)(v20 + 8);
    *(unsigned char *)(v19 + 16) = *(unsigned char *)(v20 + 16);
    swift_retain();
  }
  swift_retain();
  return v4;
}

uint64_t destroy for DisclosureTableRow.PrimitiveDisclosureTableRow(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(*(void *)(a2 + 16) - 8) + 8;
  (*(void (**)(void))v4)();
  (*(void (**)(unint64_t))(*(void *)(*(void *)(a2 + 24) - 8) + 8))((*(void *)(v4 + 56)
                                                                                            + a1
                                                                                            + *(unsigned __int8 *)(*(void *)(*(void *)(a2 + 24) - 8) + 80)) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(*(void *)(a2 + 24) - 8) + 80));
  swift_release();

  return swift_release();
}

uint64_t initializeWithCopy for DisclosureTableRow.PrimitiveDisclosureTableRow(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8) + 16;
  (*(void (**)(void))v6)();
  uint64_t v7 = *(void *)(v6 + 48);
  uint64_t v8 = *(void *)(*(void *)(a3 + 24) - 8);
  uint64_t v9 = v8 + 16;
  uint64_t v10 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v11 = v7 + v10;
  uint64_t v12 = (v11 + a1) & ~v10;
  uint64_t v13 = (v11 + a2) & ~v10;
  (*(void (**)(uint64_t, uint64_t))(v8 + 16))(v12, v13);
  uint64_t v14 = *(void *)(v9 + 48) + 7;
  unint64_t v15 = (v14 + v12) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v16 = (v14 + v13) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v15 = *(void *)v16;
  *(void *)(v15 + 8) = *(void *)(v16 + 8);
  *(unsigned char *)(v15 + 16) = *(unsigned char *)(v16 + 16);
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for DisclosureTableRow.PrimitiveDisclosureTableRow(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8) + 24;
  (*(void (**)(void))v6)();
  uint64_t v7 = *(void *)(v6 + 40);
  uint64_t v8 = *(void *)(*(void *)(a3 + 24) - 8);
  uint64_t v9 = v8 + 24;
  uint64_t v10 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v11 = v7 + v10;
  uint64_t v12 = (v11 + a1) & ~v10;
  uint64_t v13 = (v11 + a2) & ~v10;
  (*(void (**)(uint64_t, uint64_t))(v8 + 24))(v12, v13);
  uint64_t v14 = *(void *)(v9 + 40) + 7;
  unint64_t v15 = (v14 + v12) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v16 = (v14 + v13) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v15 = *(void *)v16;
  swift_retain();
  swift_release();
  *(void *)(v15 + 8) = *(void *)(v16 + 8);
  swift_retain();
  swift_release();
  *(unsigned char *)(v15 + 16) = *(unsigned char *)(v16 + 16);
  return a1;
}

uint64_t initializeWithTake for DisclosureTableRow.PrimitiveDisclosureTableRow(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8) + 32;
  (*(void (**)(void))v6)();
  uint64_t v7 = *(void *)(v6 + 32);
  uint64_t v8 = *(void *)(*(void *)(a3 + 24) - 8);
  uint64_t v9 = v8 + 32;
  uint64_t v10 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v11 = v7 + v10;
  uint64_t v12 = (v11 + a1) & ~v10;
  uint64_t v13 = (v11 + a2) & ~v10;
  (*(void (**)(uint64_t, uint64_t))(v8 + 32))(v12, v13);
  uint64_t v14 = *(void *)(v9 + 32) + 7;
  unint64_t v15 = (v14 + v12) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v16 = (v14 + v13) & 0xFFFFFFFFFFFFFFF8;
  char v17 = *(unsigned char *)(v16 + 16);
  *(_OWORD *)unint64_t v15 = *(_OWORD *)v16;
  *(unsigned char *)(v15 + 16) = v17;
  return a1;
}

uint64_t assignWithTake for DisclosureTableRow.PrimitiveDisclosureTableRow(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8) + 40;
  (*(void (**)(void))v6)();
  uint64_t v7 = *(void *)(v6 + 24);
  uint64_t v8 = *(void *)(*(void *)(a3 + 24) - 8);
  uint64_t v9 = v8 + 40;
  uint64_t v10 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v11 = v7 + v10;
  uint64_t v12 = (v11 + a1) & ~v10;
  uint64_t v13 = (v11 + a2) & ~v10;
  (*(void (**)(uint64_t, uint64_t))(v8 + 40))(v12, v13);
  uint64_t v14 = *(void *)(v9 + 24) + 7;
  unint64_t v15 = (v14 + v12) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v16 = (v14 + v13) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v15 = *(void *)v16;
  swift_release();
  *(void *)(v15 + 8) = *(void *)(v16 + 8);
  swift_release();
  *(unsigned char *)(v15 + 16) = *(unsigned char *)(v16 + 16);
  return a1;
}

uint64_t getEnumTagSinglePayload for DisclosureTableRow.PrimitiveDisclosureTableRow(unsigned __int8 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(unsigned int *)(v5 + 84);
  uint64_t v7 = *(void *)(*(void *)(a3 + 24) - 8);
  unsigned int v8 = *(_DWORD *)(v7 + 84);
  uint64_t v9 = *(unsigned __int8 *)(v7 + 80);
  if (v8 <= v6) {
    unsigned int v10 = *(_DWORD *)(v5 + 84);
  }
  else {
    unsigned int v10 = *(_DWORD *)(v7 + 84);
  }
  if (v10 <= 0x7FFFFFFF) {
    unsigned int v10 = 0x7FFFFFFF;
  }
  if (!a2) {
    return 0;
  }
  uint64_t v11 = *(void *)(*(void *)(v4 - 8) + 64) + v9;
  uint64_t v12 = *(void *)(v7 + 64) + 7;
  if (v10 < a2)
  {
    unint64_t v13 = ((v12 + (v11 & ~v9)) & 0xFFFFFFFFFFFFFFF8) + 17;
    unsigned int v14 = (a2 - v10 + 255) >> (8 * v13);
    if (v13 < 4) {
      unsigned int v15 = v14 + 1;
    }
    else {
      unsigned int v15 = 2;
    }
    if (v15 >= 0x10000) {
      LODWORD(v16) = 4;
    }
    else {
      LODWORD(v16) = 2;
    }
    if (v15 < 0x100) {
      LODWORD(v16) = 1;
    }
    if (v15 >= 2) {
      uint64_t v16 = v16;
    }
    else {
      uint64_t v16 = 0;
    }
    switch(v16)
    {
      case 1:
        int v17 = a1[v13];
        if (!a1[v13]) {
          break;
        }
        goto LABEL_24;
      case 2:
        int v17 = *(unsigned __int16 *)&a1[v13];
        if (*(_WORD *)&a1[v13]) {
          goto LABEL_24;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x1882A983CLL);
      case 4:
        int v17 = *(_DWORD *)&a1[v13];
        if (!v17) {
          break;
        }
LABEL_24:
        int v19 = (v17 - 1) << (8 * v13);
        if (v13 >= 4) {
          int v19 = 0;
        }
        if (((v12 + (v11 & ~v9)) & 0xFFFFFFF8) == 0xFFFFFFF0) {
          int v20 = *a1;
        }
        else {
          int v20 = *(_DWORD *)a1;
        }
        return v10 + (v20 | v19) + 1;
      default:
        break;
    }
  }
  if (v6 == v10) {
    return (*(uint64_t (**)(unsigned __int8 *, uint64_t, uint64_t))(v5 + 48))(a1, v6, v4);
  }
  unint64_t v21 = (unint64_t)&a1[v11] & ~v9;
  if (v8 == v10) {
    return (*(uint64_t (**)(unint64_t))(v7 + 48))(v21);
  }
  unint64_t v22 = *(void *)(((v12 + v21) & 0xFFFFFFFFFFFFFFF8) + 8);
  if (v22 >= 0xFFFFFFFF) {
    LODWORD(v22) = -1;
  }
  return (v22 + 1);
}

void storeEnumTagSinglePayload for DisclosureTableRow.PrimitiveDisclosureTableRow(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  uint64_t v8 = *(void *)(*(void *)(a4 + 24) - 8);
  unsigned int v9 = *(_DWORD *)(v8 + 84);
  uint64_t v10 = *(void *)(v6 + 64);
  uint64_t v11 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v12 = *(void *)(v8 + 64);
  if (v9 <= v7) {
    unsigned int v13 = *(_DWORD *)(v6 + 84);
  }
  else {
    unsigned int v13 = *(_DWORD *)(v8 + 84);
  }
  if (v13 <= 0x7FFFFFFF) {
    unsigned int v13 = 0x7FFFFFFF;
  }
  uint64_t v14 = v10 + v11;
  uint64_t v15 = (v10 + v11) & ~v11;
  uint64_t v16 = v12 + 7;
  size_t v17 = ((v12 + 7 + v15) & 0xFFFFFFFFFFFFFFF8) + 17;
  char v18 = 8 * v17;
  if (v13 >= a3)
  {
    int v22 = 0;
    if (v13 >= a2)
    {
LABEL_19:
      switch(v22)
      {
        case 1:
          a1[v17] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_36;
        case 2:
          *(_WORD *)&a1[v17] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_36;
        case 3:
          goto LABEL_52;
        case 4:
          *(_DWORD *)&a1[v17] = 0;
          goto LABEL_35;
        default:
LABEL_35:
          if (a2)
          {
LABEL_36:
            if (v7 == v13)
            {
              int v25 = *(void (**)(void))(v6 + 56);
              v25();
            }
            else
            {
              unint64_t v26 = (unint64_t)&a1[v14] & ~v11;
              if (v9 == v13)
              {
                unint64_t v27 = *(void (**)(unint64_t))(v8 + 56);
                v27(v26);
              }
              else
              {
                unint64_t v28 = (v16 + v26) & 0xFFFFFFFFFFFFFFF8;
                if ((a2 & 0x80000000) != 0)
                {
                  *(unsigned char *)(v28 + 16) = 0;
                  *(void *)unint64_t v28 = a2 ^ 0x80000000;
                  *(void *)(v28 + 8) = 0;
                }
                else
                {
                  *(void *)(v28 + 8) = a2 - 1;
                }
              }
            }
          }
          break;
      }
      return;
    }
  }
  else
  {
    unsigned int v19 = (a3 - v13 + 255) >> v18;
    if (v17 <= 3) {
      unsigned int v20 = v19 + 1;
    }
    else {
      unsigned int v20 = 2;
    }
    if (v20 >= 0x10000) {
      int v21 = 4;
    }
    else {
      int v21 = 2;
    }
    if (v20 < 0x100) {
      int v21 = 1;
    }
    if (v20 >= 2) {
      int v22 = v21;
    }
    else {
      int v22 = 0;
    }
    if (v13 >= a2) {
      goto LABEL_19;
    }
  }
  if (v17 < 4) {
    unsigned int v23 = ((~v13 + a2) >> v18) + 1;
  }
  else {
    unsigned int v23 = 1;
  }
  if (v17 >= 4) {
    unsigned int v24 = ~v13 + a2;
  }
  else {
    unsigned int v24 = (~(_BYTE)v13 + a2);
  }
  bzero(a1, v17);
  if (v17 == 1) {
    *a1 = v24;
  }
  else {
    *(_DWORD *)a1 = v24;
  }
  switch(v22)
  {
    case 1:
      a1[v17] = v23;
      break;
    case 2:
      *(_WORD *)&a1[v17] = v23;
      break;
    case 3:
LABEL_52:
      __break(1u);
      JUMPOUT(0x1882A9B14);
    case 4:
      *(_DWORD *)&a1[v17] = v23;
      break;
    default:
      return;
  }
}

uint64_t type metadata accessor for DisclosureTableRow.PrimitiveDisclosureTableRow()
{
  return swift_getGenericMetadata();
}

uint64_t sub_1882A9B58()
{
  return 32;
}

__n128 sub_1882A9B64(uint64_t a1, _OWORD *a2)
{
  __n128 result = *(__n128 *)a1;
  long long v3 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  return result;
}

void type metadata accessor for _GraphValue<Binding<Bool>>()
{
  if (!lazy cache variable for type metadata for _GraphValue<Binding<Bool>>)
  {
    _s7SwiftUI7BindingVySbGMaTm_10(255, (unint64_t *)&lazy cache variable for type metadata for Binding<Bool>, MEMORY[0x1E4FBB390], MEMORY[0x1E4F41638]);
    unint64_t v0 = type metadata accessor for _GraphValue();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _GraphValue<Binding<Bool>>);
    }
  }
}

uint64_t partial apply for closure #1 in static DisclosureTableRow.PrimitiveDisclosureTableRow._makeRows(content:inputs:)(uint64_t a1)
{
  return closure #1 in static DisclosureTableRow.PrimitiveDisclosureTableRow._makeRows(content:inputs:)(a1, v1[2], v1[3], v1[4], v1[5]);
}

uint64_t type metadata accessor for DisclosureTableRow.IncreaseDepthTrait()
{
  return swift_getGenericMetadata();
}

uint64_t partial apply for closure #2 in static DisclosureTableRow.PrimitiveDisclosureTableRow._makeRows(content:inputs:)(uint64_t a1)
{
  return closure #2 in static DisclosureTableRow.PrimitiveDisclosureTableRow._makeRows(content:inputs:)(a1, v1[2], v1[3], v1[4], v1[5]);
}

uint64_t type metadata accessor for DisclosureTableRow.DisclosureRowList()
{
  return swift_getGenericMetadata();
}

ValueMetadata *type metadata accessor for TableDisclosureGroupIndentationTraitKey()
{
  return &type metadata for TableDisclosureGroupIndentationTraitKey;
}

uint64_t base witness table accessor for _AttributeBody in DisclosureTableRow<A, B>.DisclosureRowList()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for _AttributeBody in DisclosureTableRow<A, B>.IncreaseDepthTrait()
{
  return swift_getWitnessTable();
}

uint64_t type metadata accessor for DisclosureTableRow.DisclosureTableRowGenerator()
{
  return swift_getGenericMetadata();
}

uint64_t sub_1882A9C94()
{
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  __swift_destroy_boxed_opaque_existential_1(v0 + 56);
  swift_release();
  swift_release();

  return swift_deallocObject();
}

uint64_t destroy for DisclosureTableRow.DisclosureTableRowGenerator(uint64_t a1)
{
  __swift_destroy_boxed_opaque_existential_1(a1);
  __swift_destroy_boxed_opaque_existential_1(a1 + 40);
  swift_release();

  return swift_release();
}

uint64_t initializeWithCopy for DisclosureTableRow.DisclosureTableRowGenerator(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v4;
  (**(void (***)(void))(v4 - 8))();
  long long v5 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 64) = v5;
  (**(void (***)(uint64_t, uint64_t))(v5 - 8))(a1 + 40, a2 + 40);
  uint64_t v6 = *(void *)(a2 + 88);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = v6;
  *(unsigned char *)(a1 + 96) = *(unsigned char *)(a2 + 96);
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for DisclosureTableRow.DisclosureTableRowGenerator(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  swift_retain();
  swift_release();
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  swift_retain();
  swift_release();
  *(unsigned char *)(a1 + 96) = *(unsigned char *)(a2 + 96);
  return a1;
}

uint64_t assignWithTake for DisclosureTableRow.DisclosureTableRowGenerator(uint64_t a1, uint64_t a2)
{
  __swift_destroy_boxed_opaque_existential_1(a1);
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  __swift_destroy_boxed_opaque_existential_1(a1 + 40);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  uint64_t v5 = *(void *)(a2 + 80);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = v5;
  swift_release();
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  swift_release();
  *(unsigned char *)(a1 + 96) = *(unsigned char *)(a2 + 96);
  return a1;
}

uint64_t type metadata accessor for DisclosureTableRow.HeaderExtractionVisitor()
{
  return swift_getGenericMetadata();
}

uint64_t type metadata completion function for DisclosureTableRow.HeaderExtractionVisitor()
{
  swift_getAssociatedTypeWitness();
  uint64_t result = type metadata accessor for Optional();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for DisclosureTableRow.HeaderExtractionVisitor(uint64_t *a1, uint64_t *a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  int v6 = *(_DWORD *)(v5 + 80);
  uint64_t v7 = v6;
  if (*(_DWORD *)(v5 + 84)) {
    size_t v8 = *(void *)(v5 + 64);
  }
  else {
    size_t v8 = *(void *)(v5 + 64) + 1;
  }
  int v9 = v6 & 0x100000;
  uint64_t v10 = *a2;
  *a1 = *a2;
  if (v7 > 7 || v9 != 0 || ((v8 + 7 + ((v7 + 8) & ~v7)) & 0xFFFFFFFFFFFFFFF8) + 8 > 0x18)
  {
    a1 = (uint64_t *)(v10 + ((v7 & 0xF8 ^ 0x1F8) & (v7 + 16)));
    swift_retain();
  }
  else
  {
    uint64_t v13 = ~v7;
    uint64_t v14 = (char *)a1 + v7;
    uint64_t v15 = (char *)a2 + v7;
    uint64_t v16 = (void *)((unint64_t)(v14 + 8) & v13);
    size_t v17 = (const void *)((unint64_t)(v15 + 8) & v13);
    char v18 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v5 + 48);
    swift_retain();
    if (v18(v17, 1, AssociatedTypeWitness))
    {
      memcpy(v16, v17, v8);
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v5 + 16))(v16, v17, AssociatedTypeWitness);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v5 + 56))(v16, 0, 1, AssociatedTypeWitness);
    }
    *(void *)(((unint64_t)v16 + v8 + 7) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v17 + v8 + 7) & 0xFFFFFFFFFFFFFFF8);
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t destroy for DisclosureTableRow.HeaderExtractionVisitor(uint64_t a1)
{
  swift_release();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v3 = *(void *)(AssociatedTypeWitness - 8);
  unint64_t v4 = (a1 + *(unsigned __int8 *)(v3 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v3 + 48))(v4, 1, AssociatedTypeWitness)) {
    (*(void (**)(unint64_t, uint64_t))(v3 + 8))(v4, AssociatedTypeWitness);
  }

  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for DisclosureTableRow.HeaderExtractionVisitor(void *a1, void *a2)
{
  *a1 = *a2;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v7 = (void *)(((unint64_t)a1 + v6 + 8) & ~v6);
  size_t v8 = (const void *)(((unint64_t)a2 + v6 + 8) & ~v6);
  int v9 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v5 + 48);
  swift_retain();
  if (v9(v8, 1, AssociatedTypeWitness))
  {
    int v10 = *(_DWORD *)(v5 + 84);
    uint64_t v11 = *(void *)(v5 + 64);
    if (v10) {
      size_t v12 = *(void *)(v5 + 64);
    }
    else {
      size_t v12 = v11 + 1;
    }
    memcpy(v7, v8, v12);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v5 + 16))(v7, v8, AssociatedTypeWitness);
    uint64_t v14 = *(void (**)(void *, void, uint64_t, uint64_t))(v5 + 56);
    uint64_t v13 = v5 + 56;
    v14(v7, 0, 1, AssociatedTypeWitness);
    int v10 = *(_DWORD *)(v13 + 28);
    uint64_t v11 = *(void *)(v13 + 8);
  }
  if (v10) {
    uint64_t v15 = v11;
  }
  else {
    uint64_t v15 = v11 + 1;
  }
  *(void *)(((unint64_t)v7 + v15 + 7) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v8 + v15 + 7) & 0xFFFFFFFFFFFFFFF8);
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for DisclosureTableRow.HeaderExtractionVisitor(void *a1, void *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v7 = (void *)(((unint64_t)a1 + v6 + 8) & ~v6);
  size_t v8 = (void *)(((unint64_t)a2 + v6 + 8) & ~v6);
  int v9 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v5 + 48);
  int v10 = v9(v7, 1, AssociatedTypeWitness);
  int v11 = v9(v8, 1, AssociatedTypeWitness);
  if (v10)
  {
    if (!v11)
    {
      (*(void (**)(void *, void *, uint64_t))(v5 + 16))(v7, v8, AssociatedTypeWitness);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v5 + 56))(v7, 0, 1, AssociatedTypeWitness);
      goto LABEL_12;
    }
    int v12 = *(_DWORD *)(v5 + 84);
    size_t v13 = *(void *)(v5 + 64);
  }
  else
  {
    if (!v11)
    {
      (*(void (**)(void *, void *, uint64_t))(v5 + 24))(v7, v8, AssociatedTypeWitness);
      goto LABEL_12;
    }
    (*(void (**)(void *, uint64_t))(v5 + 8))(v7, AssociatedTypeWitness);
    int v12 = *(_DWORD *)(v5 + 84);
    size_t v13 = *(void *)(v5 + 64);
  }
  if (v12) {
    size_t v14 = v13;
  }
  else {
    size_t v14 = v13 + 1;
  }
  memcpy(v7, v8, v14);
LABEL_12:
  if (*(_DWORD *)(v5 + 84)) {
    uint64_t v15 = *(void *)(v5 + 64);
  }
  else {
    uint64_t v15 = *(void *)(v5 + 64) + 1;
  }
  *(void *)(((unint64_t)v7 + v15 + 7) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v8 + v15 + 7) & 0xFFFFFFFFFFFFFFF8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

void *initializeWithTake for DisclosureTableRow.HeaderExtractionVisitor(void *a1, void *a2)
{
  *a1 = *a2;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v7 = (void *)(((unint64_t)a1 + v6 + 8) & ~v6);
  size_t v8 = (const void *)(((unint64_t)a2 + v6 + 8) & ~v6);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v5 + 48))(v8, 1, AssociatedTypeWitness))
  {
    int v9 = *(_DWORD *)(v5 + 84);
    size_t v10 = *(void *)(v5 + 64);
    if (v9) {
      size_t v11 = v10;
    }
    else {
      size_t v11 = v10 + 1;
    }
    memcpy(v7, v8, v11);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v5 + 32))(v7, v8, AssociatedTypeWitness);
    size_t v13 = *(void (**)(void *, void, uint64_t, uint64_t))(v5 + 56);
    uint64_t v12 = v5 + 56;
    v13(v7, 0, 1, AssociatedTypeWitness);
    int v9 = *(_DWORD *)(v12 + 28);
    size_t v10 = *(void *)(v12 + 8);
  }
  if (v9) {
    size_t v14 = v10;
  }
  else {
    size_t v14 = v10 + 1;
  }
  *(void *)(((unint64_t)v7 + v14 + 7) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v8 + v14 + 7) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

void *assignWithTake for DisclosureTableRow.HeaderExtractionVisitor(void *a1, void *a2)
{
  *a1 = *a2;
  swift_release();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v7 = (void *)(((unint64_t)a1 + v6 + 8) & ~v6);
  size_t v8 = (void *)(((unint64_t)a2 + v6 + 8) & ~v6);
  int v9 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v5 + 48);
  int v10 = v9(v7, 1, AssociatedTypeWitness);
  int v11 = v9(v8, 1, AssociatedTypeWitness);
  if (v10)
  {
    if (!v11)
    {
      (*(void (**)(void *, void *, uint64_t))(v5 + 32))(v7, v8, AssociatedTypeWitness);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v5 + 56))(v7, 0, 1, AssociatedTypeWitness);
      goto LABEL_12;
    }
    int v12 = *(_DWORD *)(v5 + 84);
    size_t v13 = *(void *)(v5 + 64);
  }
  else
  {
    if (!v11)
    {
      (*(void (**)(void *, void *, uint64_t))(v5 + 40))(v7, v8, AssociatedTypeWitness);
      goto LABEL_12;
    }
    (*(void (**)(void *, uint64_t))(v5 + 8))(v7, AssociatedTypeWitness);
    int v12 = *(_DWORD *)(v5 + 84);
    size_t v13 = *(void *)(v5 + 64);
  }
  if (v12) {
    size_t v14 = v13;
  }
  else {
    size_t v14 = v13 + 1;
  }
  memcpy(v7, v8, v14);
LABEL_12:
  if (*(_DWORD *)(v5 + 84)) {
    uint64_t v15 = *(void *)(v5 + 64);
  }
  else {
    uint64_t v15 = *(void *)(v5 + 64) + 1;
  }
  *(void *)(((unint64_t)v7 + v15 + 7) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v8 + v15 + 7) & 0xFFFFFFFFFFFFFFF8);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for DisclosureTableRow.HeaderExtractionVisitor(_DWORD *a1, unsigned int a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = v5;
  int v7 = *(_DWORD *)(v5 + 84);
  if (v7) {
    unsigned int v8 = v7 - 1;
  }
  else {
    unsigned int v8 = 0;
  }
  if (v8 <= 0x7FFFFFFE) {
    unsigned int v9 = 2147483646;
  }
  else {
    unsigned int v9 = v8;
  }
  uint64_t v10 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v11 = 7;
  if (!v7) {
    uint64_t v11 = 8;
  }
  if (!a2) {
    return 0;
  }
  if (v9 < a2)
  {
    unint64_t v12 = ((v11 + *(void *)(*(void *)(AssociatedTypeWitness - 8) + 64) + ((v10 + 8) & ~v10)) & 0xFFFFFFFFFFFFFFF8)
        + 8;
    uint64_t v13 = v12 & 0xFFFFFFF8;
    if ((v12 & 0xFFFFFFF8) != 0) {
      unsigned int v14 = 2;
    }
    else {
      unsigned int v14 = a2 - v9 + 1;
    }
    if (v14 >= 0x10000) {
      unsigned int v15 = 4;
    }
    else {
      unsigned int v15 = 2;
    }
    if (v14 < 0x100) {
      unsigned int v15 = 1;
    }
    if (v14 >= 2) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = 0;
    }
    switch(v16)
    {
      case 1:
        int v17 = *((unsigned __int8 *)a1 + v12);
        if (!v17) {
          break;
        }
        goto LABEL_27;
      case 2:
        int v17 = *(unsigned __int16 *)((char *)a1 + v12);
        if (v17) {
          goto LABEL_27;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x1882AAB08);
      case 4:
        int v17 = *(_DWORD *)((char *)a1 + v12);
        if (!v17) {
          break;
        }
LABEL_27:
        int v19 = v17 - 1;
        if (v13)
        {
          int v19 = 0;
          LODWORD(v13) = *a1;
        }
        return v9 + (v13 | v19) + 1;
      default:
        break;
    }
  }
  if (v8 > 0x7FFFFFFE)
  {
    unsigned int v21 = (*(uint64_t (**)(unint64_t))(v6 + 48))(((unint64_t)a1 + v10 + 8) & ~v10);
    if (v21 >= 2) {
      return v21 - 1;
    }
    else {
      return 0;
    }
  }
  else
  {
    uint64_t v20 = *(void *)a1;
    if (*(void *)a1 >= 0xFFFFFFFFuLL) {
      LODWORD(v20) = -1;
    }
    if ((v20 + 1) >= 2) {
      return v20;
    }
    else {
      return 0;
    }
  }
}

void storeEnumTagSinglePayload for DisclosureTableRow.HeaderExtractionVisitor(unsigned int *a1, unsigned int a2, unsigned int a3)
{
  int v6 = 0;
  uint64_t v7 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  int v8 = *(_DWORD *)(v7 + 84);
  unsigned int v9 = v8 - 1;
  uint64_t v10 = *(unsigned __int8 *)(v7 + 80);
  if (!v8) {
    unsigned int v9 = 0;
  }
  if (v9 <= 0x7FFFFFFE) {
    unsigned int v11 = 2147483646;
  }
  else {
    unsigned int v11 = v9;
  }
  if (v8) {
    size_t v12 = *(void *)(v7 + 64);
  }
  else {
    size_t v12 = *(void *)(v7 + 64) + 1;
  }
  unint64_t v13 = ((v12 + ((v10 + 8) & ~v10) + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  if (v11 < a3)
  {
    if (((v12 + ((v10 + 8) & ~v10) + 7) & 0xFFFFFFF8) == 0xFFFFFFF8) {
      unsigned int v14 = a3 - v11 + 1;
    }
    else {
      unsigned int v14 = 2;
    }
    if (v14 >= 0x10000) {
      int v15 = 4;
    }
    else {
      int v15 = 2;
    }
    if (v14 < 0x100) {
      int v15 = 1;
    }
    if (v14 >= 2) {
      int v6 = v15;
    }
    else {
      int v6 = 0;
    }
  }
  if (a2 > v11)
  {
    if (((v12 + ((v10 + 8) & ~v10) + 7) & 0xFFFFFFF8) == 0xFFFFFFF8) {
      int v16 = a2 - v11;
    }
    else {
      int v16 = 1;
    }
    if (((v12 + ((v10 + 8) & ~v10) + 7) & 0xFFFFFFF8) != 0xFFFFFFF8)
    {
      unsigned int v17 = ~v11 + a2;
      bzero(a1, ((v12 + ((v10 + 8) & ~v10) + 7) & 0xFFFFFFFFFFFFFFF8) + 8);
      *a1 = v17;
    }
    switch(v6)
    {
      case 1:
        *((unsigned char *)a1 + v13) = v16;
        return;
      case 2:
        *(_WORD *)((char *)a1 + v13) = v16;
        return;
      case 3:
        goto LABEL_59;
      case 4:
        *(unsigned int *)((char *)a1 + v13) = v16;
        return;
      default:
        return;
    }
  }
  switch(v6)
  {
    case 1:
      *((unsigned char *)a1 + v13) = 0;
      if (!a2) {
        return;
      }
      goto LABEL_36;
    case 2:
      *(_WORD *)((char *)a1 + v13) = 0;
      if (!a2) {
        return;
      }
      goto LABEL_36;
    case 3:
LABEL_59:
      __break(1u);
      JUMPOUT(0x1882AADE4);
    case 4:
      *(unsigned int *)((char *)a1 + v13) = 0;
      goto LABEL_35;
    default:
LABEL_35:
      if (a2)
      {
LABEL_36:
        if (v9 > 0x7FFFFFFE)
        {
          char v18 = (unsigned char *)(((unint64_t)a1 + v10 + 8) & ~v10);
          if (v9 >= a2)
          {
            int v22 = *(void (**)(unsigned char *, void))(v7 + 56);
            v22(v18, a2 + 1);
          }
          else
          {
            if (v12 <= 3) {
              int v19 = ~(-1 << (8 * v12));
            }
            else {
              int v19 = -1;
            }
            if (v12)
            {
              int v20 = v19 & (~v9 + a2);
              if (v12 <= 3) {
                int v21 = v12;
              }
              else {
                int v21 = 4;
              }
              bzero(v18, v12);
              switch(v21)
              {
                case 2:
                  *(_WORD *)char v18 = v20;
                  break;
                case 3:
                  *(_WORD *)char v18 = v20;
                  v18[2] = BYTE2(v20);
                  break;
                case 4:
                  *(_DWORD *)char v18 = v20;
                  break;
                default:
                  *char v18 = v20;
                  break;
              }
            }
          }
        }
        else if (a2 > 0x7FFFFFFE)
        {
          *(void *)a1 = 0;
          *a1 = a2 - 0x7FFFFFFF;
        }
        else
        {
          *(void *)a1 = a2;
        }
      }
      return;
  }
}

BOOL static BadgeProminence.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t EnvironmentValues.badgeProminence.getter()
{
  if (*(void *)(v0 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<BadgeProminence.Key>();
    lazy protocol witness table accessor for type EnvironmentPropertyKey<BadgeProminence.Key> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<BadgeProminence.Key> and conformance EnvironmentPropertyKey<A>, (void (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<BadgeProminence.Key>);
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<BadgeProminence.Key>();
    lazy protocol witness table accessor for type EnvironmentPropertyKey<BadgeProminence.Key> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<BadgeProminence.Key> and conformance EnvironmentPropertyKey<A>, (void (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<BadgeProminence.Key>);
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  return swift_release_n();
}

void type metadata accessor for EnvironmentPropertyKey<BadgeProminence.Key>()
{
  if (!lazy cache variable for type metadata for EnvironmentPropertyKey<BadgeProminence.Key>)
  {
    unint64_t v0 = type metadata accessor for EnvironmentPropertyKey();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<BadgeProminence.Key>);
    }
  }
}

uint64_t key path getter for EnvironmentValues.badgeProminence : EnvironmentValues@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  if (*(void *)(a1 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<BadgeProminence.Key>();
    lazy protocol witness table accessor for type EnvironmentPropertyKey<BadgeProminence.Key> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<BadgeProminence.Key> and conformance EnvironmentPropertyKey<A>, (void (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<BadgeProminence.Key>);
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<BadgeProminence.Key>();
    lazy protocol witness table accessor for type EnvironmentPropertyKey<BadgeProminence.Key> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<BadgeProminence.Key> and conformance EnvironmentPropertyKey<A>, (void (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<BadgeProminence.Key>);
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  uint64_t result = swift_release_n();
  *a2 = v4;
  return result;
}

uint64_t key path setter for EnvironmentValues.badgeProminence : EnvironmentValues()
{
  return EnvironmentValues.badgeProminence.setter();
}

uint64_t EnvironmentValues.badgeProminence.setter()
{
  type metadata accessor for EnvironmentPropertyKey<BadgeProminence.Key>();
  lazy protocol witness table accessor for type EnvironmentPropertyKey<BadgeProminence.Key> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<BadgeProminence.Key> and conformance EnvironmentPropertyKey<A>, (void (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<BadgeProminence.Key>);
  swift_retain();
  PropertyList.subscript.setter();
  if (*(void *)(v0 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  return swift_release();
}

void static BadgeProminence.decreased.getter(unsigned char *a1@<X8>)
{
  *a1 = 0;
}

void static BadgeProminence.standard.getter(unsigned char *a1@<X8>)
{
  *a1 = 1;
}

void static BadgeProminence.increased.getter(unsigned char *a1@<X8>)
{
  *a1 = 2;
}

void BadgeProminence.hash(into:)()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int BadgeProminence.hashValue.getter()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t View.badgeProminence(_:)()
{
  swift_getKeyPath();
  View.environment<A>(_:_:)();

  return swift_release();
}

uint64_t key path getter for EnvironmentValues.badgeProminence : EnvironmentValues, serialized(uint64_t a1)
{
  if (*(void *)(a1 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<BadgeProminence.Key>();
    lazy protocol witness table accessor for type EnvironmentPropertyKey<BadgeProminence.Key> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<BadgeProminence.Key> and conformance EnvironmentPropertyKey<A>, (void (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<BadgeProminence.Key>);
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<BadgeProminence.Key>();
    lazy protocol witness table accessor for type EnvironmentPropertyKey<BadgeProminence.Key> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<BadgeProminence.Key> and conformance EnvironmentPropertyKey<A>, (void (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<BadgeProminence.Key>);
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  return swift_release_n();
}

uint64_t sub_1882AB46C()
{
  return EnvironmentValues.badgeProminence.setter();
}

uint64_t (*EnvironmentValues.badgeProminence.modify(void *a1))(uint64_t *a1)
{
  *a1 = v1;
  if (*(void *)(v1 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<BadgeProminence.Key>();
    lazy protocol witness table accessor for type EnvironmentPropertyKey<BadgeProminence.Key> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<BadgeProminence.Key> and conformance EnvironmentPropertyKey<A>, (void (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<BadgeProminence.Key>);
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<BadgeProminence.Key>();
    lazy protocol witness table accessor for type EnvironmentPropertyKey<BadgeProminence.Key> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<BadgeProminence.Key> and conformance EnvironmentPropertyKey<A>, (void (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<BadgeProminence.Key>);
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  return EnvironmentValues.badgeProminence.modify;
}

uint64_t EnvironmentValues.badgeProminence.modify(uint64_t *a1)
{
  uint64_t v1 = *a1;
  *((unsigned char *)a1 + 9) = *((unsigned char *)a1 + 8);
  type metadata accessor for EnvironmentPropertyKey<BadgeProminence.Key>();
  lazy protocol witness table accessor for type EnvironmentPropertyKey<BadgeProminence.Key> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<BadgeProminence.Key> and conformance EnvironmentPropertyKey<A>, (void (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<BadgeProminence.Key>);
  swift_retain();
  PropertyList.subscript.setter();
  if (*(void *)(v1 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }

  return swift_release();
}

unint64_t lazy protocol witness table accessor for type BadgeProminence and conformance BadgeProminence()
{
  unint64_t result = lazy protocol witness table cache variable for type BadgeProminence and conformance BadgeProminence;
  if (!lazy protocol witness table cache variable for type BadgeProminence and conformance BadgeProminence)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BadgeProminence and conformance BadgeProminence);
  }
  return result;
}

uint64_t sub_1882AB764()
{
  return EnvironmentValues.badgeProminence.setter();
}

ValueMetadata *type metadata accessor for BadgeProminence()
{
  return &type metadata for BadgeProminence;
}

uint64_t sub_1882AB7B0()
{
  return swift_getWitnessTable();
}

void type metadata accessor for _EnvironmentKeyWritingModifier<BadgeProminence>()
{
  if (!lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<BadgeProminence>)
  {
    unint64_t v0 = type metadata accessor for _EnvironmentKeyWritingModifier();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<BadgeProminence>);
    }
  }
}

uint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<BadgeProminence.Key> and conformance EnvironmentPropertyKey<A>(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for BadgeProminence(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1882AB9B8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for BadgeProminence.Guts()
{
  return &type metadata for BadgeProminence.Guts;
}

ValueMetadata *type metadata accessor for BadgeProminence.Key()
{
  return &type metadata for BadgeProminence.Key;
}

unint64_t lazy protocol witness table accessor for type BadgeProminence.Guts and conformance BadgeProminence.Guts()
{
  unint64_t result = lazy protocol witness table cache variable for type BadgeProminence.Guts and conformance BadgeProminence.Guts;
  if (!lazy protocol witness table cache variable for type BadgeProminence.Guts and conformance BadgeProminence.Guts)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BadgeProminence.Guts and conformance BadgeProminence.Guts);
  }
  return result;
}

uint64_t key path getter for EnvironmentValues.horizontalSizeClass : EnvironmentValues@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = EnvironmentValues.horizontalSizeClass.getter();
  *a1 = v3;
  return result;
}

uint64_t key path setter for EnvironmentValues.horizontalSizeClass : EnvironmentValues()
{
  return EnvironmentValues.horizontalSizeClass.setter();
}

uint64_t implicit closure #6 in static SystemScrollView._makeView(view:inputs:)()
{
  return _ViewInputs.intern<A>(_:id:)();
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance SystemScrollView<A>()
{
  swift_getWitnessTable();

  return static UnaryView._makeViewList(view:inputs:)();
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance SystemScrollView<A>()
{
  return static UnaryView._viewListCount(inputs:)();
}

void protocol witness for View.body.getter in conformance SystemScrollView<A>()
{
}

double protocol witness for static Rule.initialValue.getter in conformance ScrollViewAdjustedProperties@<D0>(uint64_t a1@<X8>)
{
  double result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(void *)(a1 + 32) = 1;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(void *)(a1 + 200) = 0;
  return result;
}

uint64_t protocol witness for Rule.value.getter in conformance ScrollViewAdjustedProperties@<X0>(unsigned char *a1@<X8>)
{
  return ScrollViewAdjustedProperties.value.getter(a1);
}

uint64_t key path setter for EnvironmentValues.safeAreaTransitionState : EnvironmentValues(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  uint64_t v2 = swift_unknownObjectRetain();
  specialized EnvironmentValues.safeAreaTransitionState.setter(v2, v1);

  return swift_unknownObjectRelease();
}

double protocol witness for static Rule.initialValue.getter in conformance ScrollViewAdjustedConfiguration@<D0>(uint64_t a1@<X8>)
{
  double result = 0.0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 1;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(void *)(a1 + 112) = 0;
  return result;
}

uint64_t protocol witness for Rule.value.getter in conformance ScrollViewAdjustedConfiguration@<X0>(void *a1@<X8>)
{
  return ScrollViewAdjustedConfiguration.value.getter(a1);
}

double protocol witness for Rule.value.getter in conformance ScrollViewAdjustedBehavior@<D0>(uint64_t a1@<X8>)
{
  if (*(unsigned char *)AGGraphGetValue())
  {
    type metadata accessor for External<SystemScrollLayoutState>(0, &lazy cache variable for type metadata for ResolvedScrollBehavior?, (uint64_t)&type metadata for ResolvedScrollBehavior, MEMORY[0x1E4FBB718]);
    uint64_t Value = AGGraphGetValue();
    outlined init with copy of ResolvedScrollBehavior?(Value, a1);
  }
  else
  {
    *(void *)(a1 + 64) = 0;
    double result = 0.0;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
  }
  return result;
}

double protocol witness for Rule.value.getter in conformance ScrollViewContentFrame@<D0>(_OWORD *a1@<X8>)
{
  return ScrollViewContentFrame.value.getter(*(_DWORD *)(v1 + 16), a1);
}

double protocol witness for Rule.value.getter in conformance ScrollViewAdjustedPosition@<D0>(_OWORD *a1@<X8>)
{
  long long v14 = *(_OWORD *)AGGraphGetValue();
  AGGraphGetValue();
  EdgeInsets.originOffset.getter();
  double v3 = v2;
  double v5 = v4;
  unsigned int v6 = (void (*)(unsigned char *, void))ViewOrigin.value.modify();
  double v8 = v5 + v7[1];
  *uint64_t v7 = v3 + *v7;
  v7[1] = v8;
  v6(v13, 0);
  type metadata accessor for CGSize(0);
  float64x2_t v12 = *(float64x2_t *)AGGraphGetValue();
  unsigned int v9 = (void (*)(unsigned char *, void))ViewOrigin.value.modify();
  *uint64_t v10 = vaddq_f64(v12, *v10);
  v9(v13, 0);
  double result = *(double *)&v14;
  *a1 = v14;
  return result;
}

double protocol witness for Rule.value.getter in conformance ScrollViewContentFrameSize@<D0>(_OWORD *a1@<X8>)
{
  return ScrollViewContentFrameSize.value.getter(a1);
}

double protocol witness for Rule.value.getter in conformance ScrollViewAdjustedSize@<D0>(_OWORD *a1@<X8>)
{
  uint64_t Value = (long long *)AGGraphGetValue();
  long long v3 = Value[1];
  long long v10 = *Value;
  long long v11 = v3;
  type metadata accessor for CGSize(0);
  float64x2_t v8 = *(float64x2_t *)AGGraphGetValue();
  double v4 = (void (*)(unsigned char *, void))ViewSize.value.modify();
  *double v5 = vsubq_f64(*v5, v8);
  v4(v9, 0);
  double result = *(double *)&v10;
  long long v7 = v11;
  *a1 = v10;
  a1[1] = v7;
  return result;
}

void protocol witness for Rule.value.getter in conformance ScrollViewAdjustedSafeArea(uint64_t a1@<X8>)
{
  *(double *)a1 = ScrollViewAdjustedSafeArea.value.getter();
  *(void *)(a1 + 8) = v2;
  *(void *)(a1 + 16) = v3;
  *(void *)(a1 + 24) = v4;
}

void protocol witness for Rule.value.getter in conformance ScrollViewAlignmentAdjustment(uint64_t a1@<X8>)
{
  *(double *)a1 = ScrollViewAlignmentAdjustment.value.getter();
  *(void *)(a1 + 8) = v2;
}

void protocol witness for Rule.value.getter in conformance ScrollViewRTLAlignmentAdjustment(uint64_t a1@<X8>)
{
  *(double *)a1 = ScrollViewRTLAlignmentAdjustment.value.getter();
  *(void *)(a1 + 8) = v2;
}

uint64_t protocol witness for Rule.value.getter in conformance ScrollViewChildSafeArea@<X0>(void *a1@<X8>)
{
  AGGraphGetValue();
  uint64_t Value = AGGraphGetValue();
  outlined init with copy of ScrollViewConfiguration(Value, (uint64_t)v9);
  if (static SemanticFeature.isEnabled.getter())
  {
    static Edge.Set.all.getter();
    char v3 = v9[0];
    if (v9[0])
    {
      static Edge.Set.horizontal.getter();
      if ((v3 & 2) == 0)
      {
LABEL_8:
        outlined destroy of ScrollViewConfiguration((uint64_t)v9);
        goto LABEL_9;
      }
    }
    else if ((v9[0] & 2) == 0)
    {
      goto LABEL_8;
    }
    static Edge.Set.vertical.getter();
    goto LABEL_8;
  }
  specialized SetAlgebra<>.init(arrayLiteral:)(MEMORY[0x1E4FBC860]);
  outlined destroy of ScrollViewConfiguration((uint64_t)v9);
LABEL_9:
  uint64_t result = EdgeInsets.in(_:)();
  *a1 = v5;
  a1[1] = v6;
  a1[2] = v7;
  a1[3] = v8;
  return result;
}

uint64_t ScrollViewChildSafeAreaInsets.value.getter@<X0>(void *a1@<X8>)
{
  uint64_t v3 = *(void *)(v1 + 8);
  uint64_t Value = (long long *)AGGraphGetValue();
  long long v6 = *Value;
  long long v7 = Value[1];
  EdgeInsets.xFlipIfRightToLeft(layoutDirection:)();
  if (static SemanticFeature.isEnabled.getter())
  {
    type metadata accessor for External<SystemScrollLayoutState>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<SafeAreaInsets.Element>, MEMORY[0x1E4F3F9C8], MEMORY[0x1E4FBBE00]);
    uint64_t result = swift_allocObject();
    *(_OWORD *)(result + 16) = xmmword_18834BB80;
    *(void *)(result + 32) = 1;
    *(_OWORD *)(result + 40) = v6;
    *(_OWORD *)(result + 56) = v7;
  }
  else
  {
    uint64_t result = MEMORY[0x1E4FBC860];
  }
  *a1 = v3;
  a1[1] = result;
  a1[2] = 0;
  return result;
}

unsigned char *closure #1 in ScrollViewChildSafeAreaInsets.value.getter@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = (unsigned char *)AGGraphGetValue();
  *a1 = *result;
  return result;
}

double protocol witness for Rule.value.getter in conformance ScrollViewChildPosition@<D0>(_OWORD *a1@<X8>)
{
  if (static SemanticFeature.isEnabled.getter())
  {
    AGGraphGetValue();
    EdgeInsets.originOffset.getter();
    ViewOrigin.init(_:)();
  }
  else
  {
    ViewOrigin.init()();
  }
  double result = *(double *)&v3;
  *a1 = v3;
  return result;
}

uint64_t protocol witness for LayoutEngine.childGeometries(at:origin:) in conformance ScrollViewLayoutComputer.Engine()
{
  return MEMORY[0x1F40FD928]();
}

void *protocol witness for Rule.value.getter in conformance UpdatedScrollViewContainer@<X0>(void *a1@<X8>)
{
  double result = UpdatedScrollViewContainer.value.getter(*(unsigned int *)v1, v1[1]);
  *a1 = result;
  return result;
}

void protocol witness for Rule.value.getter in conformance ScrollViewDisplayListFrame(uint64_t a1@<X8>)
{
  *(double *)a1 = ScrollViewDisplayListFrame.value.getter(*(void *)v1, *(void *)(v1 + 8), *(void *)(v1 + 16));
  *(void *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = v4;
  *(void *)(a1 + 24) = v5;
}

double protocol witness for Rule.value.getter in conformance ScrollViewResponderPosition@<D0>(_OWORD *a1@<X8>)
{
  return ScrollViewResponderPosition.value.getter(a1);
}

double protocol witness for Rule.value.getter in conformance ScrollViewResponderSize@<D0>(_OWORD *a1@<X8>)
{
  return ScrollViewResponderSize.value.getter(a1);
}

uint64_t protocol witness for Rule.value.getter in conformance ScrollablePreferenceProvider@<X0>(uint64_t *a1@<X8>)
{
  _sSay7SwiftUI10Scrollable_pGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Scrollable>, (unint64_t *)&lazy cache variable for type metadata for Scrollable, MEMORY[0x1E4F3F3B0], MEMORY[0x1E4FBBE00]);
  uint64_t v2 = swift_allocObject();
  *(_OWORD *)(v2 + 16) = xmmword_18834BB80;
  type metadata accessor for ContainerBackgroundHost(0, (unint64_t *)&lazy cache variable for type metadata for Scrollable);
  uint64_t Value = AGGraphGetValue();
  uint64_t result = outlined init with copy of TableColumnList(Value, v2 + 32);
  *a1 = v2;
  return result;
}

uint64_t protocol witness for Rule.value.getter in conformance ScrollableProvider@<X0>(uint64_t *a1@<X8>)
{
  return ScrollableProvider.value.getter(*(void *)(v1 + 8), *(_DWORD *)(v1 + 16), a1);
}

void protocol witness for Rule.value.getter in conformance ContentScrollViewProvider(uint64_t *a1@<X8>)
{
  type metadata accessor for External<SystemScrollLayoutState>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<ContentScrollViewBox>, (uint64_t)&type metadata for ContentScrollViewBox, MEMORY[0x1E4FBBE00]);
  uint64_t v2 = swift_allocObject();
  *(_OWORD *)(v2 + 16) = xmmword_18834BB80;
  type metadata accessor for HostingScrollView();
  uint64_t v3 = *(void **)AGGraphGetValue();
  swift_unknownObjectWeakInit();
  swift_unknownObjectWeakInit();
  *(unsigned char *)(v2 + 72) = 0;
  swift_unknownObjectWeakAssign();
  id v4 = v3;
  *(void *)(v2 + 48) = AGCreateWeakAttribute();
  *(void *)(v2 + 56) = AGCreateWeakAttribute();
  uint64_t v5 = AGCreateWeakAttribute();

  *(void *)(v2 + 64) = v5;
  *a1 = v2;
}

double protocol witness for Rule.value.getter in conformance ScrollGeometryProvider@<D0>(_OWORD *a1@<X8>)
{
  return ScrollGeometryProvider.value.getter(a1);
}

void protocol witness for Rule.value.getter in conformance ScrollViewHostProvider()
{
  if (*v0 == *MEMORY[0x1E4F4E7A0])
  {
    id v1 = 0;
  }
  else
  {
    type metadata accessor for HostingScrollView();
    id v1 = *(id *)(*(void *)AGGraphGetValue() + OBJC_IVAR____TtC7SwiftUI17HostingScrollView_host);
  }
  swift_unknownObjectWeakInit();
  swift_unknownObjectWeakAssign();
}

uint64_t ScrollViewFocusableBorder.updateValue()()
{
  uint64_t v79 = *MEMORY[0x1E4F143B8];
  CGFloat v1 = *(double *)(v0 + 8);
  CGFloat v2 = *(double *)(v0 + 16);
  CGFloat v3 = *(double *)(v0 + 24);
  CGFloat v4 = *(double *)(v0 + 32);
  uint64_t v5 = *(void *)(v0 + 40);
  uint64_t v6 = *(void *)(v0 + 48);
  uint64_t v7 = *(void *)(v0 + 56);
  uint64_t v8 = *(void *)(v0 + 64);
  char v9 = *(unsigned char *)(v0 + 72);
  int v10 = *MEMORY[0x1E4F4E7A0];
  if (*(_DWORD *)v0 == *MEMORY[0x1E4F4E7A0])
  {
    uint64_t v11 = 0;
    int v12 = 0;
  }
  else
  {
    type metadata accessor for External<SystemScrollLayoutState>(0, &lazy cache variable for type metadata for [FocusableBounds], (uint64_t)&type metadata for FocusableBounds, MEMORY[0x1E4FBB320]);
    AGGraphGetValue();
    int v12 = v13 & 1;
    uint64_t v11 = swift_bridgeObjectRetain();
  }
  if (v11) {
    int v14 = v12;
  }
  else {
    int v14 = 0;
  }
  if (v11) {
    int v15 = (char *)v11;
  }
  else {
    int v15 = (char *)MEMORY[0x1E4FBC860];
  }
  CGFloat v58 = v2;
  CGFloat v59 = v1;
  CGFloat v56 = v4;
  CGFloat v57 = v3;
  if (*(_DWORD *)(v0 + 4) == v10
    || (type metadata accessor for External<SystemScrollLayoutState>(0, (unint64_t *)&lazy cache variable for type metadata for [FocusableFillerBounds], (uint64_t)&type metadata for FocusableFillerBounds, MEMORY[0x1E4FBB320]), Value = (uint64_t *)AGGraphGetValue(), int v18 = v17, v19 = *Value, swift_bridgeObjectRetain(), !v19))
  {
    if (v14)
    {
      char v54 = v9;
      uint64_t v55 = v0;
      uint64_t v19 = MEMORY[0x1E4FBC860];
      goto LABEL_16;
    }
  }
  else
  {
    if ((v14 | v18))
    {
      char v54 = v9;
      uint64_t v55 = v0;
LABEL_16:
      uint64_t v60 = *(void *)(v19 + 16);
      if (v60)
      {
        for (unint64_t i = 0; i != v60; ++i)
        {
          if (i >= *(void *)(v19 + 16))
          {
            __break(1u);
LABEL_59:
            __break(1u);
LABEL_60:
            __break(1u);
LABEL_61:
            __break(1u);
LABEL_62:
            __break(1u);
          }
          int v21 = (long long *)(v19 + 32 + 112 * i);
          long long v22 = v21[1];
          long long v73 = *v21;
          long long v74 = v22;
          long long v23 = v21[5];
          long long v77 = v21[4];
          v78[0] = v23;
          *(_OWORD *)((char *)v78 + 9) = *(long long *)((char *)v21 + 89);
          long long v24 = v21[3];
          long long v75 = v21[2];
          long long v76 = v24;
          FocusableFillerBounds.fillerFrames(in:)(*(CGFloat *)&v73, *((CGFloat *)&v73 + 1), *(CGFloat *)&v74, *((CGFloat *)&v74 + 1));
          uint64_t v26 = v25;
          int64_t v27 = *(void *)(v25 + 16);
          if (v27)
          {
            *(void *)&long long v68 = MEMORY[0x1E4FBC860];
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v27, 0);
            unint64_t v28 = (void *)v68;
            unint64_t v29 = *(void *)(v68 + 16);
            uint64_t v30 = 5 * v29;
            uint64_t v31 = (long long *)(v26 + 48);
            do
            {
              long long v32 = *(v31 - 1);
              long long v33 = *v31;
              *(void *)&long long v68 = v28;
              unint64_t v34 = v28[3];
              unint64_t v35 = v29 + 1;
              if (v29 >= v34 >> 1)
              {
                long long v52 = v33;
                long long v53 = v32;
                specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v34 > 1), v29 + 1, 1);
                long long v33 = v52;
                long long v32 = v53;
                unint64_t v28 = (void *)v68;
              }
              void v28[2] = v35;
              uint64_t v36 = &v28[v30];
              *((_OWORD *)v36 + 2) = v32;
              *((_OWORD *)v36 + 3) = v33;
              *((unsigned char *)v36 + 64) = 0;
              v30 += 5;
              v31 += 2;
              unint64_t v29 = v35;
              --v27;
            }
            while (v27);
            swift_bridgeObjectRelease();
          }
          else
          {
            swift_bridgeObjectRelease();
            unint64_t v28 = (void *)MEMORY[0x1E4FBC860];
          }
          uint64_t v37 = v28[2];
          int64_t v38 = *((void *)v15 + 2);
          int64_t v39 = v38 + v37;
          if (__OFADD__(v38, v37)) {
            goto LABEL_59;
          }
          char isUniquelyReferenced_nonNull_native = (char *)swift_isUniquelyReferenced_nonNull_native();
          if (isUniquelyReferenced_nonNull_native && v39 <= *((void *)v15 + 3) >> 1)
          {
            if (!v28[2]) {
              goto LABEL_18;
            }
          }
          else
          {
            if (v38 <= v39) {
              int64_t v41 = v38 + v37;
            }
            else {
              int64_t v41 = v38;
            }
            int v15 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v41, 1, v15);
            if (!v28[2])
            {
LABEL_18:
              if (v37) {
                goto LABEL_60;
              }
              goto LABEL_19;
            }
          }
          uint64_t v42 = *((void *)v15 + 2);
          if ((*((void *)v15 + 3) >> 1) - v42 < v37) {
            goto LABEL_61;
          }
          memcpy(&v15[40 * v42 + 32], v28 + 4, 40 * v37);
          if (v37)
          {
            uint64_t v43 = *((void *)v15 + 2);
            BOOL v44 = __OFADD__(v43, v37);
            uint64_t v45 = v43 + v37;
            if (v44) {
              goto LABEL_62;
            }
            *((void *)v15 + 2) = v45;
          }
LABEL_19:
          swift_bridgeObjectRelease();
        }
      }
      swift_bridgeObjectRelease();
      long long v70 = 0u;
      long long v71 = 0u;
      long long v69 = 0u;
      long long v68 = 0u;
      char v46 = 1;
      char v72 = 1;
      uint64_t v47 = *((void *)v15 + 2);
      if (v47)
      {
        swift_bridgeObjectRetain();
        id v48 = v15 + 64;
        uint64_t v0 = v55;
        char v9 = v54;
        do
        {
          char v49 = *v48;
          CGSize v50 = (CGSize)*((_OWORD *)v48 - 1);
          v61.origin = (CGPoint)*((_OWORD *)v48 - 2);
          v61.size = v50;
          char v62 = v49;
          closure #2 in ScrollViewFocusableBorder.updateValue()((uint64_t)&v68, &v61, (uint64_t)&v63);
          char v46 = v67;
          long long v68 = v63;
          long long v69 = v64;
          long long v70 = v65;
          long long v71 = v66;
          v48 += 40;
          char v72 = v67;
          --v47;
        }
        while (v47);
        CGFloat v2 = *((double *)&v63 + 1);
        CGFloat v1 = *(double *)&v63;
        CGFloat v4 = *((double *)&v64 + 1);
        CGFloat v3 = *(double *)&v64;
        uint64_t v6 = *((void *)&v65 + 1);
        uint64_t v5 = v65;
        uint64_t v8 = *((void *)&v66 + 1);
        uint64_t v7 = v66;
        swift_bridgeObjectRelease();
      }
      else
      {
        CGFloat v1 = 0.0;
        CGFloat v2 = 0.0;
        CGFloat v3 = 0.0;
        CGFloat v4 = 0.0;
        uint64_t v5 = 0;
        uint64_t v6 = 0;
        uint64_t v7 = 0;
        uint64_t v8 = 0;
        uint64_t v0 = v55;
        char v9 = v54;
      }
      swift_bridgeObjectRelease();
      goto LABEL_49;
    }
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  char v46 = v9;
LABEL_49:
  type metadata accessor for External<SystemScrollLayoutState>(0, &lazy cache variable for type metadata for FocusableBorder?, (uint64_t)&type metadata for FocusableBorder, MEMORY[0x1E4FBB718]);
  uint64_t result = AGGraphGetOutputValue();
  if (!result) {
    goto LABEL_56;
  }
  if (v9)
  {
    if (v46) {
      return result;
    }
    goto LABEL_56;
  }
  if (v46) {
    goto LABEL_56;
  }
  v80.origin.CGFloat y = v58;
  v80.origin.CGFloat x = v59;
  v80.size.double height = v56;
  v80.size.double width = v57;
  v81.origin.CGFloat x = v1;
  v81.origin.CGFloat y = v2;
  v81.size.double width = v3;
  v81.size.double height = v4;
  if (!CGRectEqualToRect(v80, v81) || (uint64_t result = static EdgeInsets.== infix(_:_:)(), (result & 1) == 0))
  {
LABEL_56:
    *(CGFloat *)(v0 + 8) = v1;
    *(CGFloat *)(v0 + 16) = v2;
    *(CGFloat *)(v0 + 24) = v3;
    *(CGFloat *)(v0 + 32) = v4;
    *(void *)(v0 + 40) = v5;
    *(void *)(v0 + 48) = v6;
    *(void *)(v0 + 56) = v7;
    *(void *)(v0 + 64) = v8;
    *(unsigned char *)(v0 + 72) = v46;
    *(CGFloat *)&long long v68 = v1;
    *((CGFloat *)&v68 + 1) = v2;
    *(CGFloat *)&long long v69 = v3;
    *((CGFloat *)&v69 + 1) = v4;
    *(void *)&long long v70 = v5;
    *((void *)&v70 + 1) = v6;
    *(void *)&long long v71 = v7;
    *((void *)&v71 + 1) = v8;
    char v72 = v46;
    return AGGraphSetOutputValue();
  }
  return result;
}

void closure #2 in ScrollViewFocusableBorder.updateValue()(uint64_t a1@<X0>, CGRect *a2@<X1>, uint64_t a3@<X8>)
{
  CGFloat x = a2->origin.x;
  CGFloat y = a2->origin.y;
  CGFloat width = a2->size.width;
  CGFloat height = a2->size.height;
  if ((*(unsigned char *)(a1 + 64) & 1) == 0)
  {
    double v33 = *(double *)(a1 + 48);
    double v34 = *(double *)(a1 + 56);
    double v35 = *(double *)(a1 + 40);
    double v36 = *(double *)(a1 + 32);
    CGRect v43 = CGRectUnion(*(CGRect *)a1, *a2);
    CGFloat v12 = v43.origin.x;
    CGFloat v13 = v43.origin.y;
    CGFloat v14 = v43.size.width;
    CGFloat v39 = v43.size.height;
    double MinX = CGRectGetMinX(v43);
    v44.origin.CGFloat x = x;
    v44.origin.CGFloat y = y;
    v44.size.CGFloat width = width;
    v44.size.CGFloat height = height;
    CGFloat v37 = v13;
    CGFloat v38 = v12;
    if (MinX == CGRectGetMinX(v44))
    {
      CGFloat v16 = v14;
      v45.origin.CGFloat x = x;
      v45.origin.CGFloat y = y;
      v45.size.CGFloat width = width;
      v45.size.CGFloat height = height;
      double v17 = CGRectGetWidth(v45);
      double v18 = v35;
      if (v35 <= v17) {
        double v18 = v17;
      }
      double v35 = v18;
      CGFloat v19 = v39;
    }
    else
    {
      v46.origin.CGFloat x = v12;
      v46.origin.CGFloat y = v13;
      CGFloat v16 = v14;
      v46.size.CGFloat width = v14;
      CGFloat v19 = v39;
      v46.size.CGFloat height = v39;
      double v20 = CGRectGetMinX(v46);
      v47.origin.CGFloat x = x;
      v47.origin.CGFloat y = y;
      v47.size.CGFloat width = width;
      v47.size.CGFloat height = height;
      if (CGRectGetMinX(v47) < v20)
      {
        v48.origin.CGFloat x = x;
        v48.origin.CGFloat y = y;
        v48.size.CGFloat width = width;
        v48.size.CGFloat height = height;
        double v35 = CGRectGetWidth(v48);
      }
    }
    v49.origin.CGFloat x = v38;
    v49.origin.CGFloat y = v37;
    v49.size.CGFloat width = v16;
    v49.size.CGFloat height = v19;
    double MinY = CGRectGetMinY(v49);
    v50.origin.CGFloat x = x;
    v50.origin.CGFloat y = y;
    v50.size.CGFloat width = width;
    v50.size.CGFloat height = height;
    if (MinY == CGRectGetMinY(v50))
    {
      v51.origin.CGFloat y = y;
      v51.origin.CGFloat x = x;
      v51.size.CGFloat width = width;
      v51.size.CGFloat height = height;
      double v22 = CGRectGetHeight(v51);
      double v23 = v36;
      if (v36 <= v22) {
        double v23 = v22;
      }
      double v36 = v23;
    }
    else
    {
      v52.origin.CGFloat x = v38;
      v52.origin.CGFloat y = v37;
      v52.size.CGFloat width = v16;
      v52.size.CGFloat height = v19;
      double v24 = CGRectGetMinY(v52);
      v53.origin.CGFloat x = x;
      v53.origin.CGFloat y = y;
      v53.size.CGFloat width = width;
      v53.size.CGFloat height = height;
      if (CGRectGetMinY(v53) < v24)
      {
        v54.origin.CGFloat x = x;
        v54.origin.CGFloat y = y;
        v54.size.CGFloat width = width;
        v54.size.CGFloat height = height;
        double v36 = CGRectGetHeight(v54);
      }
    }
    v55.origin.CGFloat x = v38;
    v55.origin.CGFloat y = v37;
    v55.size.CGFloat width = v16;
    v55.size.CGFloat height = v39;
    double MaxX = CGRectGetMaxX(v55);
    v56.origin.CGFloat x = x;
    v56.origin.CGFloat y = y;
    v56.size.CGFloat width = width;
    v56.size.CGFloat height = height;
    if (MaxX == CGRectGetMaxX(v56))
    {
      v57.origin.CGFloat x = x;
      v57.origin.CGFloat y = y;
      v57.size.CGFloat width = width;
      v57.size.CGFloat height = height;
      double v26 = CGRectGetWidth(v57);
      double v27 = v34;
      if (v34 <= v26) {
        double v27 = v26;
      }
      double v34 = v27;
    }
    else
    {
      v58.origin.CGFloat x = v38;
      v58.origin.CGFloat y = v37;
      v58.size.CGFloat width = v16;
      v58.size.CGFloat height = v39;
      double v28 = CGRectGetMaxX(v58);
      v59.origin.CGFloat x = x;
      v59.origin.CGFloat y = y;
      v59.size.CGFloat width = width;
      v59.size.CGFloat height = height;
      if (v28 < CGRectGetMaxX(v59))
      {
        v60.origin.CGFloat x = x;
        v60.origin.CGFloat y = y;
        v60.size.CGFloat width = width;
        v60.size.CGFloat height = height;
        double v34 = CGRectGetWidth(v60);
      }
    }
    v61.origin.CGFloat x = v38;
    v61.origin.CGFloat y = v37;
    v61.size.CGFloat width = v16;
    v61.size.CGFloat height = v39;
    double MaxY = CGRectGetMaxY(v61);
    v62.origin.CGFloat x = x;
    v62.origin.CGFloat y = y;
    v62.size.CGFloat width = width;
    v62.size.CGFloat height = height;
    if (MaxY == CGRectGetMaxY(v62))
    {
      v63.origin.CGFloat x = x;
      v63.origin.CGFloat y = y;
      v63.size.CGFloat width = width;
      v63.size.CGFloat height = height;
      double v30 = CGRectGetHeight(v63);
      double v31 = v33;
      if (v33 <= v30) {
        double v31 = v30;
      }
      CGFloat x = v38;
      CGFloat y = v37;
      CGFloat width = v16;
      CGFloat v10 = v31;
    }
    else
    {
      v64.origin.CGFloat x = v38;
      v64.origin.CGFloat y = v37;
      v64.size.CGFloat width = v16;
      v64.size.CGFloat height = v39;
      double v32 = CGRectGetMaxY(v64);
      v65.origin.CGFloat x = x;
      v65.origin.CGFloat y = y;
      v65.size.CGFloat width = width;
      v65.size.CGFloat height = height;
      if (v32 >= CGRectGetMaxY(v65))
      {
        CGFloat x = v38;
        CGFloat y = v37;
        CGFloat width = v16;
        CGFloat height = v39;
        CGFloat v9 = v35;
        CGFloat v8 = v36;
        CGFloat v10 = v33;
        goto LABEL_29;
      }
      v66.origin.CGFloat x = x;
      v66.origin.CGFloat y = y;
      v66.size.CGFloat width = width;
      v66.size.CGFloat height = height;
      CGFloat x = v38;
      CGFloat y = v37;
      CGFloat width = v16;
      CGFloat v10 = CGRectGetHeight(v66);
    }
    CGFloat height = v39;
    CGFloat v9 = v35;
    CGFloat v8 = v36;
LABEL_29:
    double v11 = v34;
    goto LABEL_30;
  }
  CGFloat v8 = CGRectGetHeight(*a2);
  v40.origin.CGFloat x = x;
  v40.origin.CGFloat y = y;
  v40.size.CGFloat width = width;
  v40.size.CGFloat height = height;
  CGFloat v9 = CGRectGetWidth(v40);
  v41.origin.CGFloat x = x;
  v41.origin.CGFloat y = y;
  v41.size.CGFloat width = width;
  v41.size.CGFloat height = height;
  CGFloat v10 = CGRectGetHeight(v41);
  v42.origin.CGFloat x = x;
  v42.origin.CGFloat y = y;
  v42.size.CGFloat width = width;
  v42.size.CGFloat height = height;
  double v11 = CGRectGetWidth(v42);
LABEL_30:
  *(CGFloat *)a3 = x;
  *(CGFloat *)(a3 + 8) = y;
  *(CGFloat *)(a3 + 16) = width;
  *(CGFloat *)(a3 + 24) = height;
  *(CGFloat *)(a3 + 32) = v8;
  *(CGFloat *)(a3 + 40) = v9;
  *(CGFloat *)(a3 + 48) = v10;
  *(double *)(a3 + 56) = v11;
  *(unsigned char *)(a3 + 64) = 0;
}

double protocol witness for static StatefulRule.initialValue.getter in conformance ScrollViewFocusableBorder@<D0>(uint64_t a1@<X8>)
{
  double result = 0.0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_WORD *)(a1 + 64) = 256;
  return result;
}

uint64_t closure #1 in FocusableFillerBoundsTransform.value.getter(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = a2 + 16;
  uint64_t v4 = swift_bridgeObjectRetain();
  uint64_t v5 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay7SwiftUI21FocusableFillerBoundsVG_AHs5NeverOTg503_s7d4UI30fgH87Transform33_2827C9FDBC03BB2C61476E3A694FFF5DLLV5valueyySayAA0cdE0VGzcvgyAHzcfU_A2GXEfU_AF13ViewTransformVAF0fgH9Transform05_2827mnopqrS1DLLVTf1cn_nTf4nnx_n(v4, v3);
  uint64_t result = swift_bridgeObjectRelease_n();
  *a1 = v5;
  return result;
}

double MainThreadRequiringScrollPhase.time.getter@<D0>(void *a1@<X8>)
{
  uint64_t Value = (double *)AGGraphGetValue();
  double result = *Value;
  *a1 = *(void *)Value;
  return result;
}

uint64_t protocol witness for Rule.value.getter in conformance FocusableFillerBoundsTransform@<X0>(uint64_t (**a1)(uint64_t a1)@<X8>)
{
  int v3 = *v1;
  uint64_t v4 = swift_allocObject();
  uint64_t Value = AGGraphGetValue();
  long long v6 = *(_OWORD *)(Value + 8);
  long long v7 = *(_OWORD *)(Value + 24);
  *(void *)(v4 + 16) = *(void *)Value;
  *(_OWORD *)(v4 + 24) = v6;
  *(_OWORD *)(v4 + 40) = v7;
  uint64_t v13 = *(void *)(v1 + 1);
  AGGraphGetValue();
  uint64_t v8 = swift_retain();
  *(double *)&unint64_t v9 = MEMORY[0x18C10C240](v8);
  ViewTransform.appendPosition(_:)((CGPoint)__PAIR128__(v10, v9));
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = v4;
  *(_DWORD *)(v11 + 24) = v3;
  *(void *)(v11 + 28) = v13;
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = partial apply for closure #1 in FocusableFillerBoundsTransform.value.getter;
  *(void *)(result + 24) = v11;
  *a1 = partial apply for thunk for @escaping @callee_guaranteed (@inout AccessibilityLargeContentViewTree) -> ();
  a1[1] = (uint64_t (*)(uint64_t))result;
  return result;
}

double protocol witness for Rule.value.getter in conformance MainThreadRequiringScrollPhase()
{
  return MainThreadRequiringScrollPhase.value.getter(*v0);
}

uint64_t ScrollViewScrollable.scroll<A>(to:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _sSay7SwiftUI10Scrollable_pGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for [Scrollable], (unint64_t *)&lazy cache variable for type metadata for Scrollable, MEMORY[0x1E4F3F3B0], MEMORY[0x1E4FBB320]);
  Weakuint64_t Value = (uint64_t *)AGGraphGetWeakValue();
  if (WeakValue)
  {
    uint64_t v7 = *WeakValue;
    swift_bridgeObjectRetain();
    uint64_t v8 = *(void *)(v7 + 16);
    if (!v8) {
      goto LABEL_8;
    }
  }
  else
  {
    uint64_t v7 = MEMORY[0x1E4FBC860];
    uint64_t v8 = *(void *)(MEMORY[0x1E4FBC860] + 16);
    if (!v8)
    {
LABEL_8:
      swift_bridgeObjectRelease();
      return 0;
    }
  }
  uint64_t v9 = v7 + 32;
  while (1)
  {
    outlined init with copy of TableColumnList(v9, (uint64_t)v13);
    uint64_t v10 = v14;
    uint64_t v11 = v15;
    __swift_project_boxed_opaque_existential_1(v13, v14);
    if ((*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v11 + 8))(a1, a2, a3, v10, v11)) {
      break;
    }
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v13);
    v9 += 40;
    if (!--v8) {
      goto LABEL_8;
    }
  }
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v13);
  return 1;
}

uint64_t ScrollViewScrollable.mapFirstChild<A, B>(ofType:body:)@<X0>(uint64_t a1@<X0>, void (*a2)(char *)@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, char *a6@<X8>)
{
  uint64_t v48 = a3;
  CGRect v49 = a2;
  uint64_t v47 = a1;
  CGRect v45 = a6;
  uint64_t v46 = type metadata accessor for Optional();
  uint64_t v44 = *(void *)(v46 - 8);
  MEMORY[0x1F4188790](v46);
  uint64_t v10 = (char *)v41 - v9;
  uint64_t v11 = *(void *)(a5 - 8);
  MEMORY[0x1F4188790](v12);
  CGRect v42 = (char *)v41 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for Optional();
  uint64_t v15 = *(void *)(v14 - 8);
  MEMORY[0x1F4188790](v14);
  double v17 = (char *)v41 - v16;
  uint64_t v18 = *(void *)(a4 - 8);
  MEMORY[0x1F4188790](v19);
  int v21 = (char *)v41 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  long long v22 = v6[1];
  long long v50 = *v6;
  long long v51 = v22;
  long long v52 = v6[2];
  outlined retain of ScrollViewScrollable((uint64_t)v6);
  int v23 = swift_dynamicCast();
  double v24 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v18 + 56);
  if (v23)
  {
    v24(v17, 0, 1, a4);
    (*(void (**)(char *, char *, uint64_t))(v18 + 32))(v21, v17, a4);
    uint64_t v25 = v45;
    v49(v21);
    (*(void (**)(char *, uint64_t))(v18 + 8))(v21, a4);
    return (*(uint64_t (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v25, 0, 1, a5);
  }
  else
  {
    double v27 = v45;
    uint64_t v43 = v11;
    v24(v17, 1, 1, a4);
    (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v14);
    _sSay7SwiftUI10Scrollable_pGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for [Scrollable], (unint64_t *)&lazy cache variable for type metadata for Scrollable, MEMORY[0x1E4F3F3B0], MEMORY[0x1E4FBB320]);
    if (AGGraphGetWeakValue()) {
      uint64_t v28 = swift_bridgeObjectRetain();
    }
    else {
      uint64_t v28 = MEMORY[0x1E4FBC860];
    }
    uint64_t v29 = v43;
    double v30 = v27;
    uint64_t v31 = *(void *)(v28 + 16);
    if (v31)
    {
      v41[1] = v28;
      uint64_t v32 = v28 + 32;
      double v33 = (unsigned int (**)(char *, uint64_t, uint64_t))(v43 + 48);
      double v34 = (void (**)(char *, uint64_t))(v44 + 8);
      while (1)
      {
        outlined init with copy of TableColumnList(v32, (uint64_t)&v50);
        uint64_t v36 = *((void *)&v51 + 1);
        uint64_t v35 = v52;
        __swift_project_boxed_opaque_existential_1(&v50, *((uint64_t *)&v51 + 1));
        (*(void (**)(uint64_t, void (*)(char *), uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v35 + 40))(v47, v49, v48, a4, a5, v36, v35);
        if ((*v33)(v10, 1, a5) != 1) {
          break;
        }
        (*v34)(v10, v46);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v50);
        v32 += 40;
        if (!--v31)
        {
          swift_bridgeObjectRelease();
          double v30 = v45;
          uint64_t v29 = v43;
          return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v29 + 56))(v30, 1, 1, a5);
        }
      }
      swift_bridgeObjectRelease();
      CGFloat v38 = v42;
      uint64_t v37 = v43;
      CGFloat v39 = *(void (**)(char *, char *, uint64_t))(v43 + 32);
      v39(v42, v10, a5);
      CGRect v40 = v45;
      v39(v45, v38, a5);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v37 + 56))(v40, 0, 1, a5);
      return __swift_destroy_boxed_opaque_existential_1((uint64_t)&v50);
    }
    else
    {
      swift_bridgeObjectRelease();
      return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v29 + 56))(v30, 1, 1, a5);
    }
  }
}

BOOL ScrollViewScrollable.setContentTarget(_:)(void *a1, uint64_t a2)
{
  Weakuint64_t Value = AGGraphGetWeakValue();
  uint64_t v6 = WeakValue;
  if (WeakValue)
  {
    uint64_t v36 = *(void *)(WeakValue + 8);
    uint64_t v37 = *(void *)WeakValue;
    uint64_t v34 = *(void *)(WeakValue + 24);
    uint64_t v35 = *(void *)(WeakValue + 16);
    uint64_t v32 = *(void *)(WeakValue + 40);
    uint64_t v33 = *(void *)(WeakValue + 32);
    uint64_t v30 = *(void *)(WeakValue + 56);
    uint64_t v31 = *(void *)(WeakValue + 48);
    uint64_t v28 = *(void *)(WeakValue + 72);
    uint64_t v29 = *(void *)(WeakValue + 64);
    double v7 = *(double *)(WeakValue + 80);
    double v8 = *(double *)(WeakValue + 88);
    unint64_t v9 = *(void *)(WeakValue + 96);
    unsigned int v27 = *(_DWORD *)(WeakValue + 104);
    type metadata accessor for External<SystemScrollLayoutState>(0, &lazy cache variable for type metadata for ResolvedScrollBehavior?, (uint64_t)&type metadata for ResolvedScrollBehavior, MEMORY[0x1E4FBB718]);
    uint64_t v10 = AGGraphGetWeakValue();
    if (v10)
    {
      outlined init with copy of ResolvedScrollBehavior?(v10, (uint64_t)v48);
      outlined init with take of ResolvedScrollBehavior?((uint64_t)v48, (uint64_t)&v43, (uint64_t)&lazy cache variable for type metadata for ResolvedScrollBehavior?, (uint64_t)&type metadata for ResolvedScrollBehavior, MEMORY[0x1E4FBB718], (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))type metadata accessor for External<SystemScrollLayoutState>);
      if (*((void *)&v44 + 1))
      {
        long long v40 = v45;
        long long v41 = v46;
        uint64_t v42 = v47;
        long long v38 = v43;
        long long v39 = v44;
        uint64_t v11 = swift_allocObject();
        *(void *)(v11 + 16) = a1;
        *(void *)(v11 + 24) = a2;
        *(_OWORD *)(v11 + 64) = v40;
        *(_OWORD *)(v11 + 80) = v41;
        *(void *)(v11 + 96) = v42;
        *(_OWORD *)(v11 + 32) = v38;
        *(_OWORD *)(v11 + 48) = v39;
        outlined copy of SystemScrollLayoutState.ContentOffsetMode(v9);
        a1 = partial apply for closure #1 in ScrollViewScrollable.setContentTarget(_:);
LABEL_8:
        unint64_t v26 = v9;
        if (v7 != 0.0 || v8 != 0.0)
        {
          uint64_t v12 = swift_allocObject();
          *(void *)(v12 + 16) = a1;
          *(void *)(v12 + 24) = v11;
          *(double *)(v12 + 32) = v7;
          *(double *)(v12 + 40) = v8;
          uint64_t v11 = v12;
          a1 = partial apply for closure #2 in ScrollViewScrollable.setContentTarget(_:);
        }
        swift_retain();
        uint64_t v13 = static Transaction.current.getter();
        swift_retain();
        ScrollTargetConfiguration.init(transaction:)();
        char v14 = v48[0];
        char v15 = BYTE1(v48[0]);
        char v16 = BYTE2(v48[0]);
        uint64_t v17 = *((void *)v2 + 5);
        swift_beginAccess();
        uint64_t v18 = (*(_DWORD *)(v17 + 16) + 1);
        *(_DWORD *)(v17 + 16) = v18;
        uint64_t v19 = swift_allocObject();
        *(void *)(v19 + 16) = a1;
        *(void *)(v19 + 24) = v11;
        *(unsigned char *)(v19 + 32) = v14;
        *(unsigned char *)(v19 + 33) = v15;
        unint64_t v20 = v19 | 0x4000000000000000;
        *(unsigned char *)(v19 + 34) = v16;
        swift_retain();
        swift_retain();
        outlined consume of SystemScrollLayoutState.ContentOffsetMode(v26);
        if (v27 != -1)
        {
          if (v27) {
            uint64_t v18 = merge32(_:_:)(v27, v18);
          }
          if (!v18)
          {
            swift_release();
            uint64_t v21 = 5;
            goto LABEL_19;
          }
          if (v18 != -1)
          {
            unsigned int v22 = merge32(_:_:)(v18, 5u);
            swift_release();
            uint64_t v21 = v22;
            goto LABEL_19;
          }
        }
        swift_release();
        uint64_t v21 = 0xFFFFFFFFLL;
LABEL_19:
        unsigned int v23 = v2[1];
        unint64_t v24 = v21 | ((unint64_t)*v2 << 32);
        v48[0] = v37;
        v48[1] = v36;
        void v48[2] = v35;
        uint64_t v48[3] = v34;
        v48[4] = v33;
        v48[5] = v32;
        v48[6] = v31;
        v48[7] = v30;
        v48[8] = v29;
        v48[9] = v28;
        *(double *)&v48[10] = v7;
        *(double *)&v48[11] = v8;
        v48[12] = v20;
        v48[13] = v24;
        unsigned int v49 = v23;
        long long v43 = 5uLL;
        long long v44 = 0uLL;
        swift_retain();
        outlined copy of SystemScrollLayoutState.ContentOffsetMode(v20);
        specialized static ScrollViewCommitMutation.commit(layoutState:phaseState:containerSize:isPreferred:transaction:)(v48, (uint64_t *)&v43, 0, 0, 0, 1, 1, v13);
        swift_release();
        swift_release_n();
        outlined consume of SystemScrollLayoutState.ContentOffsetMode(v20);
        outlined consume of SystemScrollLayoutState.ContentOffsetMode(v20);
        return v6 != 0;
      }
      outlined copy of SystemScrollLayoutState.ContentOffsetMode(v9);
      outlined destroy of ResolvedScrollBehavior?((uint64_t)&v43);
    }
    else
    {
      outlined copy of SystemScrollLayoutState.ContentOffsetMode(v9);
    }
    uint64_t v11 = a2;
    goto LABEL_8;
  }
  return v6 != 0;
}

void *closure #1 in ScrollViewScrollable.setContentTarget(_:)@<X0>(uint64_t *a1@<X0>, unsigned __int8 *a2@<X1>, void *(*a3)(long long *__return_ptr, long long *, char *)@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5 = *a1;
  uint64_t v6 = a1[1];
  uint64_t v7 = a1[2];
  uint64_t v8 = a1[3];
  uint64_t v9 = a1[4];
  uint64_t v10 = a1[5];
  unint64_t v11 = a1[6];
  uint64_t v12 = a1[7];
  uint64_t v14 = a1[8];
  uint64_t v13 = a1[9];
  uint64_t v15 = a1[10];
  uint64_t v16 = a1[11];
  uint64_t v17 = a1[12];
  uint64_t v18 = a1[13];
  int v19 = *a2;
  *(void *)&long long v60 = *a1;
  *((void *)&v60 + 1) = v6;
  *(void *)&long long v61 = v7;
  *((void *)&v61 + 1) = v8;
  *(void *)&long long v62 = v9;
  *((void *)&v62 + 1) = v10;
  uint64_t v44 = v13;
  unint64_t v45 = v11;
  unint64_t v63 = v11;
  uint64_t v64 = v12;
  *(void *)&long long v65 = v14;
  *((void *)&v65 + 1) = v13;
  uint64_t v42 = v16;
  uint64_t v43 = v15;
  *(void *)&long long v66 = v15;
  *((void *)&v66 + 1) = v16;
  uint64_t v40 = v18;
  uint64_t v41 = v17;
  *(void *)&long long v67 = v17;
  *((void *)&v67 + 1) = v18;
  char v75 = v19;
  uint64_t result = a3(&v46, &v60, &v75);
  long long v21 = v47;
  long long v22 = v48;
  char v23 = v49;
  if (BYTE1(v49))
  {
    *(_OWORD *)a4 = v46;
    *(_OWORD *)(a4 + 16) = v21;
    *(_OWORD *)(a4 + 32) = v22;
    *(unsigned char *)(a4 + 48) = v23;
    *(unsigned char *)(a4 + 49) = 1;
  }
  else
  {
    long long v76 = v46;
    long long v77 = v47;
    long long v78 = v48;
    unsigned __int8 v79 = v49 & 1;
    uint64_t v39 = v5;
    *(void *)&long long v60 = v5;
    *((void *)&v60 + 1) = v6;
    *(void *)&long long v61 = v7;
    *((void *)&v61 + 1) = v8;
    *(void *)&long long v62 = v9;
    *((void *)&v62 + 1) = v10;
    unint64_t v63 = v45;
    uint64_t v64 = v12;
    *(void *)&long long v65 = v14;
    *((void *)&v65 + 1) = v44;
    *(void *)&long long v66 = v43;
    *((void *)&v66 + 1) = v42;
    *(void *)&long long v67 = v41;
    *((void *)&v67 + 1) = v40;
    ScrollGeometry.contentSize.getter();
    double v25 = v24;
    unsigned int v27 = (void (*)(long long *, void))ScrollTarget.rect.modify();
    if (v19) {
      v26->origin.CGFloat x = v25 - CGRectGetMaxX(*v26);
    }
    v27(&v60, 0);
    long long v38 = v76;
    long long v28 = v77;
    long long v29 = v78;
    unsigned __int8 v30 = v79;
    EnvironmentValues.init()();
    EnvironmentValues.init()();
    long long v31 = v60;
    swift_release();
    swift_release();
    long long v60 = v38;
    long long v61 = v28;
    long long v62 = v29;
    LOBYTE(v63) = v30;
    uint64_t v64 = 0;
    *(void *)&long long v65 = 0;
    *((void *)&v65 + 1) = v39;
    *(void *)&long long v66 = v6;
    *((void *)&v66 + 1) = v7;
    *(void *)&long long v67 = v8;
    *((void *)&v67 + 1) = v9;
    *(void *)&long long v68 = v10;
    *((void *)&v68 + 1) = v45;
    *(void *)&long long v69 = v12;
    *((void *)&v69 + 1) = v14;
    *(void *)&long long v70 = v44;
    *((void *)&v70 + 1) = v43;
    *(void *)&long long v71 = v42;
    *((void *)&v71 + 1) = v41;
    *(void *)&long long v72 = v40;
    WORD4(v72) = 1024;
    *(void *)&long long v73 = MEMORY[0x1E4FBC860];
    *((void *)&v73 + 1) = MEMORY[0x1E4FBC860];
    long long v74 = v31;
    long long v56 = v71;
    long long v57 = v72;
    long long v58 = v73;
    long long v59 = v31;
    long long v52 = v67;
    long long v53 = v68;
    long long v54 = v69;
    long long v55 = v70;
    long long v48 = v29;
    long long v49 = v63;
    long long v50 = v65;
    long long v51 = v66;
    long long v46 = v38;
    long long v47 = v28;
    ResolvedScrollBehavior.updateTarget(_:context:)((uint64_t)&v76, &v46);
    outlined release of ScrollTargetBehaviorContext((uint64_t)&v60);
    *(void *)&long long v46 = v39;
    *((void *)&v46 + 1) = v6;
    *(void *)&long long v47 = v7;
    *((void *)&v47 + 1) = v8;
    *(void *)&long long v48 = v9;
    *((void *)&v48 + 1) = v10;
    *(void *)&long long v49 = v45;
    *((void *)&v49 + 1) = v12;
    *(void *)&long long v50 = v14;
    *((void *)&v50 + 1) = v44;
    *(void *)&long long v51 = v43;
    *((void *)&v51 + 1) = v42;
    *(void *)&long long v52 = v41;
    *((void *)&v52 + 1) = v40;
    ScrollGeometry.contentSize.getter();
    double v33 = v32;
    uint64_t v35 = (uint64_t (*)(long long *, void))ScrollTarget.rect.modify();
    if (v19) {
      v34->origin.CGFloat x = v33 - CGRectGetMaxX(*v34);
    }
    uint64_t result = (void *)v35(&v46, 0);
    unsigned __int8 v36 = v79;
    long long v37 = v77;
    *(_OWORD *)a4 = v76;
    *(_OWORD *)(a4 + 16) = v37;
    *(_OWORD *)(a4 + 32) = v78;
    *(_WORD *)(a4 + 48) = v36;
  }
  return result;
}

void *closure #2 in ScrollViewScrollable.setContentTarget(_:)@<X0>(_OWORD *a1@<X0>, char *a2@<X1>, void *(*a3)(long long *__return_ptr, _OWORD *, char *)@<X2>, uint64_t a4@<X8>, double a5@<D0>, double a6@<D1>)
{
  char v9 = *a2;
  long long v10 = a1[1];
  v25[0] = *a1;
  v25[1] = v10;
  long long v11 = a1[3];
  v25[2] = a1[2];
  v25[3] = v11;
  long long v12 = a1[5];
  uint64_t v25[4] = a1[4];
  v25[5] = v12;
  v25[6] = a1[6];
  char v24 = v9;
  uint64_t result = a3(&v26, v25, &v24);
  uint64_t v14 = *((void *)&v26 + 1);
  long long v16 = v27;
  uint64_t v15 = v28;
  uint64_t v17 = v29;
  char v18 = v30;
  char v19 = v31;
  if (v31)
  {
    *(void *)a4 = v26;
    *(void *)(a4 + 8) = v14;
    *(_OWORD *)(a4 + 16) = v16;
  }
  else
  {
    long long v32 = v26;
    long long v33 = v27;
    uint64_t v34 = v28;
    uint64_t v35 = v29;
    char v36 = v30 & 1;
    unint64_t v20 = (uint64_t (*)(_OWORD *, void))ScrollTarget.rect.modify();
    double v22 = v21[1] - a6;
    *long long v21 = *v21 - a5;
    v21[1] = v22;
    uint64_t result = (void *)v20(v25, 0);
    uint64_t v15 = v34;
    uint64_t v17 = v35;
    char v18 = v36;
    long long v23 = v33;
    *(_OWORD *)a4 = v32;
    *(_OWORD *)(a4 + 16) = v23;
  }
  *(void *)(a4 + 32) = v15;
  *(void *)(a4 + 40) = v17;
  *(unsigned char *)(a4 + 48) = v18;
  *(unsigned char *)(a4 + 49) = v19;
  return result;
}

uint64_t ScrollViewScrollable.adjustContentOffset(by:reason:)(unsigned __int8 *a1, double a2, double a3)
{
  unsigned __int8 v6 = *a1;
  AGGraphClearUpdate();
  Weakuint64_t Value = AGGraphGetWeakValue();
  if (WeakValue)
  {
    unsigned __int8 v26 = v6;
    uint64_t v8 = *(void *)WeakValue;
    uint64_t v29 = *(void *)(WeakValue + 16);
    uint64_t v30 = *(void *)(WeakValue + 24);
    uint64_t v9 = *(void *)(WeakValue + 48);
    uint64_t v31 = *(void *)(WeakValue + 32);
    uint64_t v32 = *(void *)(WeakValue + 40);
    uint64_t v10 = *(void *)(WeakValue + 64);
    uint64_t v27 = *(void *)(WeakValue + 8);
    uint64_t v28 = *(void *)(WeakValue + 56);
    uint64_t v11 = *(void *)(WeakValue + 72);
    uint64_t v12 = *(void *)(WeakValue + 80);
    uint64_t v13 = *(void *)(WeakValue + 88);
    unint64_t v14 = *(void *)(WeakValue + 96);
    int v15 = *(_DWORD *)(WeakValue + 104);
    outlined copy of SystemScrollLayoutState.ContentOffsetMode(v14);
    AGGraphSetUpdate();
    if ((~v14 & 0xF000000000000004) != 0)
    {
      uint64_t v17 = v9;
      uint64_t Attribute = AGWeakAttributeGetAttribute();
      if (Attribute == *MEMORY[0x1E4F4E7A0])
      {
        outlined consume of SystemScrollLayoutState?(v8, v27, v29, v30, v31, v32, v9, v28, v10, v11, v12, v13, v14);
        return 0;
      }
      else
      {
        uint64_t v19 = Attribute;
        uint64_t v24 = v8;
        uint64_t v25 = v17;
        uint64_t v34 = v8;
        uint64_t v35 = v27;
        uint64_t v36 = v29;
        uint64_t v37 = v30;
        uint64_t v38 = v31;
        uint64_t v39 = v32;
        uint64_t v40 = v17;
        uint64_t v41 = v28;
        uint64_t v42 = v10;
        uint64_t v43 = v11;
        uint64_t v44 = v12;
        uint64_t v45 = v13;
        uint64_t v20 = v13;
        unint64_t v46 = v14;
        uint64_t v21 = *(void *)(v3 + 40);
        int v47 = v15;
        uint64_t v16 = 1;
        swift_beginAccess();
        uint64_t v22 = *(unsigned int *)(v21 + 16);
        unsigned __int8 v33 = v26;
        SystemScrollLayoutState.adjustContentOffset(by:state:updateSeed:reason:)(a2, a3, v19, v22, &v33);
        ++*(_DWORD *)(v21 + 16);
        outlined consume of SystemScrollLayoutState?(v24, v27, v29, v30, v31, v32, v25, v28, v10, v11, v12, v20, v14);
      }
    }
    else
    {
      return 0;
    }
  }
  else
  {
    AGGraphSetUpdate();
    return 0;
  }
  return v16;
}

uint64_t ScrollViewScrollable.runScrollTest(_:scrollMode:)(uint64_t a1, long long *a2)
{
  type metadata accessor for HostingScrollView();
  Weakuint64_t Value = (void **)AGGraphGetWeakValue();
  if (WeakValue)
  {
    uint64_t v4 = *WeakValue;
    long long v8 = *a2;
    id v5 = v4;
    char v6 = PPTTestCase.runScrollTest(_:scrollMode:onComplete:)(v5, (unint64_t *)&v8, 0, 0);
  }
  else
  {
    char v6 = 0;
  }
  return v6 & 1;
}

uint64_t ScrollViewScrollable.runScrollTest(_:scrollMode:onComplete:)(uint64_t a1, long long *a2, uint64_t a3, uint64_t a4)
{
  type metadata accessor for HostingScrollView();
  Weakuint64_t Value = (void **)AGGraphGetWeakValue();
  if (WeakValue)
  {
    long long v8 = *WeakValue;
    long long v12 = *a2;
    id v9 = v8;
    char v10 = PPTTestCase.runScrollTest(_:scrollMode:onComplete:)(v9, (unint64_t *)&v12, a3, a4);
  }
  else
  {
    char v10 = 0;
  }
  return v10 & 1;
}

uint64_t ScrollViewScrollable.runScrollSubTest(_:subTestName:scrollMode:onComplete:)(uint64_t a1, void *a2, long long *a3, uint64_t a4, uint64_t a5)
{
  type metadata accessor for HostingScrollView();
  Weakuint64_t Value = (void **)AGGraphGetWeakValue();
  if (WeakValue)
  {
    uint64_t v13 = a2;
    uint64_t v12 = *a2;
    uint64_t v11 = v13[1];
    unint64_t v14 = *WeakValue;
    long long v20 = *a3;
    outlined init with copy of PPTTestCase(a1, (uint64_t)v19);
    int v15 = (void *)swift_allocObject();
    outlined init with take of PPTTestCase((uint64_t)v19, (uint64_t)(v15 + 2));
    v15[8] = v12;
    v15[9] = v11;
    v15[10] = a4;
    v15[11] = a5;
    id v16 = v14;
    swift_bridgeObjectRetain();
    outlined copy of AppIntentExecutor?(a4);
    char v17 = PPTTestCase.runScrollTest(_:scrollMode:onComplete:)(v16, (unint64_t *)&v20, (uint64_t)partial apply for closure #1 in PPTTestCase.runScrollSubTest(_:subTestName:scrollMode:onComplete:), (uint64_t)v15);

    swift_release();
  }
  else
  {
    char v17 = 0;
  }
  return v17 & 1;
}

uint64_t protocol witness for Scrollable.scroll<A>(to:) in conformance ScrollViewScrollable(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return ScrollViewScrollable.scroll<A>(to:)(a1, a2, a3) & 1;
}

BOOL protocol witness for Scrollable.setContentTarget(_:) in conformance ScrollViewScrollable(void *a1, uint64_t a2)
{
  return ScrollViewScrollable.setContentTarget(_:)(a1, a2);
}

uint64_t protocol witness for Scrollable.adjustContentOffset(by:reason:) in conformance ScrollViewScrollable(unsigned __int8 *a1, double a2, double a3)
{
  return ScrollViewScrollable.adjustContentOffset(by:reason:)(a1, a2, a3) & 1;
}

uint64_t protocol witness for Scrollable.mapFirstChild<A, B>(ofType:body:) in conformance ScrollViewScrollable@<X0>(uint64_t a1@<X0>, void (*a2)(char *)@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, char *a6@<X8>)
{
  return ScrollViewScrollable.mapFirstChild<A, B>(ofType:body:)(a1, a2, a3, a4, a5, a6);
}

uint64_t protocol witness for PPTScrollable.runScrollTest(_:scrollMode:) in conformance ScrollViewScrollable(uint64_t a1, long long *a2)
{
  return ScrollViewScrollable.runScrollTest(_:scrollMode:)(a1, a2) & 1;
}

uint64_t protocol witness for PPTScrollable.runScrollTest(_:scrollMode:onComplete:) in conformance ScrollViewScrollable(uint64_t a1, long long *a2, uint64_t a3, uint64_t a4)
{
  return ScrollViewScrollable.runScrollTest(_:scrollMode:onComplete:)(a1, a2, a3, a4) & 1;
}

uint64_t protocol witness for PPTScrollable.runScrollSubTest(_:subTestName:scrollMode:onComplete:) in conformance ScrollViewScrollable(uint64_t a1, void *a2, long long *a3, uint64_t a4, uint64_t a5)
{
  return ScrollViewScrollable.runScrollSubTest(_:subTestName:scrollMode:onComplete:)(a1, a2, a3, a4, a5) & 1;
}

unint64_t destroy for HostingScrollViewUpdateContext(uint64_t a1)
{
  return outlined consume of SystemScrollLayoutState.ContentOffsetMode(*(void *)(a1 + 64));
}

uint64_t initializeWithCopy for HostingScrollViewUpdateContext(uint64_t a1, uint64_t a2)
{
  long long v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v3;
  long long v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  unint64_t v5 = *(void *)(a2 + 64);
  outlined copy of SystemScrollLayoutState.ContentOffsetMode(v5);
  *(void *)(a1 + 64) = v5;
  return a1;
}

void *assignWithCopy for HostingScrollViewUpdateContext(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  a1[3] = a2[3];
  a1[4] = a2[4];
  a1[5] = a2[5];
  a1[6] = a2[6];
  a1[7] = a2[7];
  unint64_t v3 = a2[8];
  outlined copy of SystemScrollLayoutState.ContentOffsetMode(v3);
  unint64_t v4 = a1[8];
  a1[8] = v3;
  outlined consume of SystemScrollLayoutState.ContentOffsetMode(v4);
  return a1;
}

uint64_t assignWithTake for HostingScrollViewUpdateContext(uint64_t a1, uint64_t a2)
{
  long long v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v3;
  long long v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  unint64_t v5 = *(void *)(a1 + 64);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  outlined consume of SystemScrollLayoutState.ContentOffsetMode(v5);
  return a1;
}

uint64_t getEnumTagSinglePayload for HostingScrollViewUpdateContext(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x1E && *(unsigned char *)(a1 + 72)) {
    return (*(_DWORD *)a1 + 30);
  }
  unsigned int v3 = (*(void *)(a1 + 64) & 4 | ((*(void *)(a1 + 64) >> 59) >> 3) & 0xFFFFFFE7 | (8 * (((*(void *)(a1 + 64) >> 59) >> 1) & 3))) ^ 0x1F;
  if (v3 >= 0x1D) {
    unsigned int v3 = -1;
  }
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for HostingScrollViewUpdateContext(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x1D)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(void *)uint64_t result = a2 - 30;
    if (a3 >= 0x1E) {
      *(unsigned char *)(result + 72) = 1;
    }
  }
  else
  {
    if (a3 >= 0x1E) {
      *(unsigned char *)(result + 72) = 0;
    }
    if (a2)
    {
      uint64_t v3 = (-a2 >> 2) & 7 | (8 * (-a2 & 0x1F));
      *(void *)(result + 64) = ((v3 << 59) | (4 * v3)) & 0xF000000000000007;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for HostingScrollViewUpdateContext()
{
  return &type metadata for HostingScrollViewUpdateContext;
}

uint64_t getEnumTagSinglePayload for SystemScrollView(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  if (v5 <= 0x7FFFFFFF) {
    unsigned int v7 = 0x7FFFFFFF;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  int v8 = a2 - v7;
  if (a2 <= v7) {
    goto LABEL_23;
  }
  uint64_t v9 = ((v6 + 120) & ~v6) + *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  char v10 = 8 * v9;
  if (v9 <= 3)
  {
    unsigned int v13 = ((v8 + ~(-1 << v10)) >> v10) + 1;
    if (HIWORD(v13))
    {
      int v11 = *(_DWORD *)((char *)a1 + v9);
      if (!v11) {
        goto LABEL_23;
      }
      goto LABEL_15;
    }
    if (v13 > 0xFF)
    {
      int v11 = *(unsigned __int16 *)((char *)a1 + v9);
      if (!*(unsigned __int16 *)((char *)a1 + v9)) {
        goto LABEL_23;
      }
      goto LABEL_15;
    }
    if (v13 < 2)
    {
LABEL_23:
      if ((v5 & 0x80000000) != 0) {
        return (*(uint64_t (**)(unint64_t))(v4 + 48))(((unint64_t)a1 + v6 + 120) & ~v6);
      }
      if ((*((void *)a1 + 9) & 0xF000000000000007) != 0) {
        return (*((_DWORD *)a1 + 16) & 0x7FFFFFFFu) + 1;
      }
      return 0;
    }
  }
  int v11 = *((unsigned __int8 *)a1 + v9);
  if (!*((unsigned char *)a1 + v9)) {
    goto LABEL_23;
  }
LABEL_15:
  int v14 = (v11 - 1) << v10;
  if (v9 > 3) {
    int v14 = 0;
  }
  if (v9)
  {
    if (v9 > 3) {
      LODWORD(v9) = 4;
    }
    switch((int)v9)
    {
      case 2:
        LODWORD(v9) = *a1;
        break;
      case 3:
        LODWORD(v9) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v9) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v9) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v7 + (v9 | v14) + 1;
}

void storeEnumTagSinglePayload for SystemScrollView(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(unsigned __int8 *)(v6 + 80);
  size_t v10 = ((v9 + 120) & ~v9) + *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  BOOL v11 = a3 >= v8;
  unsigned int v12 = a3 - v8;
  if (v12 != 0 && v11)
  {
    if (v10 <= 3)
    {
      unsigned int v16 = ((v12 + ~(-1 << (8 * v10))) >> (8 * v10)) + 1;
      if (HIWORD(v16))
      {
        int v13 = 4;
      }
      else if (v16 >= 0x100)
      {
        int v13 = 2;
      }
      else
      {
        int v13 = v16 > 1;
      }
    }
    else
    {
      int v13 = 1;
    }
  }
  else
  {
    int v13 = 0;
  }
  if (v8 < a2)
  {
    unsigned int v14 = ~v8 + a2;
    if (v10 < 4)
    {
      int v15 = (v14 >> (8 * v10)) + 1;
      if (v10)
      {
        int v17 = v14 & ~(-1 << (8 * v10));
        bzero(a1, v10);
        if (v10 == 3)
        {
          *(_WORD *)a1 = v17;
          a1[2] = BYTE2(v17);
        }
        else if (v10 == 2)
        {
          *(_WORD *)a1 = v17;
        }
        else
        {
          *a1 = v17;
        }
      }
    }
    else
    {
      bzero(a1, v10);
      *(_DWORD *)a1 = v14;
      int v15 = 1;
    }
    switch(v13)
    {
      case 1:
        a1[v10] = v15;
        return;
      case 2:
        *(_WORD *)&a1[v10] = v15;
        return;
      case 3:
        goto LABEL_41;
      case 4:
        *(_DWORD *)&a1[v10] = v15;
        return;
      default:
        return;
    }
  }
  switch(v13)
  {
    case 1:
      a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 2:
      *(_WORD *)&a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 3:
LABEL_41:
      __break(1u);
      JUMPOUT(0x1882AECACLL);
    case 4:
      *(_DWORD *)&a1[v10] = 0;
      goto LABEL_23;
    default:
LABEL_23:
      if (a2)
      {
LABEL_24:
        if ((v7 & 0x80000000) != 0)
        {
          unint64_t v18 = (unint64_t)&a1[v9 + 120] & ~v9;
          uint64_t v19 = *(void (**)(unint64_t))(v6 + 56);
          v19(v18);
        }
        else if ((a2 & 0x80000000) != 0)
        {
          *(_OWORD *)(a1 + 104) = 0u;
          *(_OWORD *)(a1 + 88) = 0u;
          *(_OWORD *)(a1 + 72) = 0u;
          *(_OWORD *)(a1 + 56) = 0u;
          *(_OWORD *)(a1 + 40) = 0u;
          *(_OWORD *)(a1 + 24) = 0u;
          *(_OWORD *)(a1 + 8) = 0u;
          *(void *)a1 = a2 ^ 0x80000000;
        }
        else
        {
          *((void *)a1 + 8) = a2 - 1;
          *((void *)a1 + 9) = 1;
        }
      }
      return;
  }
}

_UNKNOWN **base witness table accessor for View in SystemScrollView<A>()
{
  return &protocol witness table for SystemScrollView<A>;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay7SwiftUI21FocusableFillerBoundsVG_AHs5NeverOTg503_s7d4UI30fgH87Transform33_2827C9FDBC03BB2C61476E3A694FFF5DLLV5valueyySayAA0cdE0VGzcvgyAHzcfU_A2GXEfU_AF13ViewTransformVAF0fgH9Transform05_2827mnopqrS1DLLVTf1cn_nTf4nnx_n(uint64_t a1, uint64_t a2)
{
  int64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = MEMORY[0x1E4FBC860];
  if (v2)
  {
    uint64_t v33 = MEMORY[0x1E4FBC860];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2, 0);
    uint64_t v3 = v33;
    swift_beginAccess();
    uint64_t v6 = (uint64_t *)(a1 + 72);
    do
    {
      uint64_t v7 = *(v6 - 1);
      uint64_t v8 = v6[2];
      uint64_t v26 = v6[1];
      uint64_t v27 = *v6;
      char v25 = *((unsigned char *)v6 + 24);
      uint64_t v23 = v6[5];
      uint64_t v24 = v6[4];
      uint64_t v21 = v6[7];
      uint64_t v22 = v6[6];
      char v28 = *((unsigned char *)v6 + 64);
      long long v9 = *(_OWORD *)(v6 - 3);
      long long v31 = *(_OWORD *)(v6 - 5);
      long long v32 = v9;
      static CoordinateSpace.scrollViewContent.getter();
      uint64_t v10 = a2;
      CGRect.convert(to:transform:)();
      outlined destroy of CoordinateSpace((uint64_t)&v29);
      long long v19 = v31;
      long long v11 = v32;
      AGGraphGetValue();
      long long v29 = v19;
      long long v30 = v11;
      CGRect.roundCoordinatesToNearestOrUp(toMultipleOf:)();
      long long v12 = v29;
      long long v13 = v30;
      uint64_t v33 = v3;
      unint64_t v15 = *(void *)(v3 + 16);
      unint64_t v14 = *(void *)(v3 + 24);
      if (v15 >= v14 >> 1)
      {
        long long v20 = v29;
        long long v18 = v30;
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v14 > 1), v15 + 1, 1);
        long long v13 = v18;
        long long v12 = v20;
        uint64_t v3 = v33;
      }
      *(void *)(v3 + 16) = v15 + 1;
      uint64_t v16 = v3 + 112 * v15;
      *(_OWORD *)(v16 + 32) = v12;
      *(_OWORD *)(v16 + 48) = v13;
      *(void *)(v16 + 64) = v7;
      *(void *)(v16 + 72) = v27;
      *(void *)(v16 + 80) = v26;
      *(void *)(v16 + 88) = v8;
      *(unsigned char *)(v16 + 96) = v25;
      *(void *)(v16 + 104) = v24;
      *(void *)(v16 + 112) = v23;
      *(void *)(v16 + 120) = v22;
      *(void *)(v16 + 128) = v21;
      v6 += 14;
      *(unsigned char *)(v16 + 136) = v28;
      --v2;
      a2 = v10;
    }
    while (v2);
  }
  return v3;
}

uint64_t sub_1882AEEF0@<X0>(uint64_t a1@<X8>)
{
  return EnvironmentValues.scrollBehavior.getter(a1);
}

uint64_t partial apply for implicit closure #6 in static SystemScrollView._makeView(view:inputs:)()
{
  return implicit closure #6 in static SystemScrollView._makeView(view:inputs:)();
}

uint64_t sub_1882AEF2C()
{
  swift_weakDestroy();

  return swift_deallocObject();
}

uint64_t sub_1882AEF64@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = EnvironmentValues.isScrollViewTransformClippingEnabled.getter();
  *a1 = result & 1;
  return result;
}

unsigned char *_s7SwiftUI29ScrollViewChildSafeAreaInsets33_2827C9FDBC03BB2C61476E3A694FFF5DLLV5valueAA0fgH0VvgAA15LayoutDirectionOyXEfU_TA_0@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = (unsigned char *)AGGraphGetValue();
  *a1 = *result;
  return result;
}

uint64_t sub_1882AEFE0()
{
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);

  return swift_deallocObject();
}

uint64_t sub_1882AF018()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_1882AF050()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_1882AF088()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_1882AF0C0()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_1882AF110@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = EnvironmentValues.horizontalSizeClass.getter();
  *a1 = v3;
  return result;
}

uint64_t sub_1882AF154()
{
  return EnvironmentValues.horizontalSizeClass.setter();
}

double sub_1882AF194@<D0>(_OWORD *a1@<X8>)
{
  EnvironmentValues.contentMarginProxy.getter((uint64_t)v10);
  long long v2 = v22;
  a1[12] = v21;
  a1[13] = v2;
  a1[14] = v23[0];
  *(_OWORD *)((char *)a1 + 233) = *(_OWORD *)((char *)v23 + 9);
  long long v3 = v18;
  a1[8] = v17;
  a1[9] = v3;
  long long v4 = v20;
  a1[10] = v19;
  a1[11] = v4;
  long long v5 = v14;
  a1[4] = v13;
  a1[5] = v5;
  long long v6 = v16;
  a1[6] = v15;
  a1[7] = v6;
  long long v7 = v10[1];
  *a1 = v10[0];
  a1[1] = v7;
  double result = *(double *)&v11;
  long long v9 = v12;
  a1[2] = v11;
  a1[3] = v9;
  return result;
}

uint64_t sub_1882AF230@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = EnvironmentValues.safeAreaTransitionState.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t assignWithCopy for ScrollViewScrollable(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for ScrollViewScrollable(uint64_t a1, uint64_t a2)
{
  long long v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v3;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_release();
  return a1;
}

void *type metadata accessor for ScrollViewScrollable()
{
  return &unk_1ED432570;
}

void *type metadata accessor for FocusableFillerBoundsTransform()
{
  return &unk_1ED458FF0;
}

void *type metadata accessor for ContentScrollViewProvider()
{
  return &unk_1ED445FB8;
}

uint64_t assignWithTake for ScrollViewLayoutComputer.Engine(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_release();
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(unsigned char *)(a1 + 104) = *(unsigned char *)(a2 + 104);
  long long v4 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = v4;
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
  *(unsigned char *)(a1 + 160) = *(unsigned char *)(a2 + 160);
  long long v5 = *(_OWORD *)(a2 + 168);
  long long v6 = *(_OWORD *)(a2 + 184);
  long long v7 = *(_OWORD *)(a2 + 200);
  *(unsigned char *)(a1 + 216) = *(unsigned char *)(a2 + 216);
  *(_OWORD *)(a1 + 200) = v7;
  *(_OWORD *)(a1 + 184) = v6;
  *(_OWORD *)(a1 + 168) = v5;
  return a1;
}

uint64_t getEnumTagSinglePayload for ScrollViewLayoutComputer.Engine(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 217)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 40);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ScrollViewLayoutComputer.Engine(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 216) = 0;
    *(void *)uint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 217) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 217) = 0;
    }
    if (a2) {
      *(void *)(result + 40) = a2;
    }
  }
  return result;
}

void *type metadata accessor for ScrollViewLayoutComputer.Engine()
{
  return &unk_1ED474138;
}

void *type metadata accessor for ScrollViewChildSafeAreaInsets()
{
  return &unk_1ED474360;
}

void *type metadata accessor for ScrollViewChildTransform()
{
  return &unk_1ED474090;
}

void *type metadata accessor for ScrollViewChildPosition()
{
  return &unk_1ED440248;
}

void *type metadata accessor for ScrollViewChildSafeArea()
{
  return &unk_1ED440270;
}

void *type metadata accessor for ScrollablePreferenceProvider()
{
  return &unk_1ED454458;
}

void *type metadata accessor for ScrollViewLayoutComputer()
{
  return &unk_1ED443A60;
}

void *type metadata accessor for ScrollViewResponderSize()
{
  return &unk_1ED440330;
}

void *type metadata accessor for ScrollViewResponderPosition()
{
  return &unk_1ED450788;
}

uint64_t assignWithCopy for ScrollViewResponder(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_retain();
  swift_release();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for ScrollViewResponder(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  swift_release();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_release();
  return a1;
}

void *type metadata accessor for ScrollViewResponder()
{
  return &unk_1ED42DE20;
}

void *type metadata accessor for ScrollViewDisplayList()
{
  return &unk_1ED473EF8;
}

void *type metadata accessor for ScrollGeometryProvider()
{
  return &unk_1ED43B378;
}

uint64_t assignWithCopy for UpdatedScrollViewContainer(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  unint64_t v3 = *(void **)(a2 + 8);
  int v4 = *(void **)(a1 + 8);
  *(void *)(a1 + 8) = v3;
  id v5 = v3;

  return a1;
}

uint64_t assignWithTake for UpdatedScrollViewContainer(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  unint64_t v3 = *(void **)(a1 + 8);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);

  return a1;
}

void *type metadata accessor for UpdatedScrollViewContainer()
{
  return &unk_1ED44D278;
}

uint64_t assignWithCopy for UpdatedHostingScrollView(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  int v4 = *(void **)(a2 + 8);
  id v5 = *(void **)(a1 + 8);
  *(void *)(a1 + 8) = v4;
  id v6 = v4;

  long long v7 = *(void **)(a2 + 16);
  uint64_t v8 = *(void **)(a1 + 16);
  *(void *)(a1 + 16) = v7;
  id v9 = v7;

  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_retain();
  swift_release();
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  *(unsigned char *)(a1 + 73) = *(unsigned char *)(a2 + 73);
  *(unsigned char *)(a1 + 74) = *(unsigned char *)(a2 + 74);
  *(unsigned char *)(a1 + 75) = *(unsigned char *)(a2 + 75);
  uint64_t v10 = (_OWORD *)(a1 + 80);
  long long v11 = (_OWORD *)(a2 + 80);
  uint64_t v12 = *(void *)(a2 + 104);
  if (*(void *)(a1 + 104))
  {
    if (v12)
    {
      __swift_assign_boxed_opaque_existential_1((uint64_t *)(a1 + 80), (uint64_t *)(a2 + 80));
      *(_DWORD *)(a1 + 120) = *(_DWORD *)(a2 + 120);
      *(_WORD *)(a1 + 124) = *(_WORD *)(a2 + 124);
      *(_DWORD *)(a1 + 128) = *(_DWORD *)(a2 + 128);
      *(_DWORD *)(a1 + 132) = *(_DWORD *)(a2 + 132);
      *(_DWORD *)(a1 + 136) = *(_DWORD *)(a2 + 136);
      *(_DWORD *)(a1 + 140) = *(_DWORD *)(a2 + 140);
      *(_DWORD *)(a1 + 144) = *(_DWORD *)(a2 + 144);
      *(_DWORD *)(a1 + 148) = *(_DWORD *)(a2 + 148);
    }
    else
    {
      outlined destroy of AccessibilityRelationshipScope.Key(a1 + 80);
      *uint64_t v10 = *v11;
      long long v14 = *(_OWORD *)(a2 + 112);
      long long v13 = *(_OWORD *)(a2 + 128);
      long long v15 = *(_OWORD *)(a2 + 96);
      *(void *)(a1 + 144) = *(void *)(a2 + 144);
      *(_OWORD *)(a1 + 112) = v14;
      *(_OWORD *)(a1 + 128) = v13;
      *(_OWORD *)(a1 + 96) = v15;
    }
  }
  else if (v12)
  {
    *(void *)(a1 + 104) = v12;
    *(void *)(a1 + 112) = *(void *)(a2 + 112);
    (**(void (***)(uint64_t, uint64_t))(v12 - 8))(a1 + 80, a2 + 80);
    *(_DWORD *)(a1 + 120) = *(_DWORD *)(a2 + 120);
    *(_WORD *)(a1 + 124) = *(_WORD *)(a2 + 124);
    *(void *)(a1 + 128) = *(void *)(a2 + 128);
    *(void *)(a1 + 136) = *(void *)(a2 + 136);
    *(void *)(a1 + 144) = *(void *)(a2 + 144);
  }
  else
  {
    *uint64_t v10 = *v11;
    long long v16 = *(_OWORD *)(a2 + 96);
    long long v17 = *(_OWORD *)(a2 + 112);
    long long v18 = *(_OWORD *)(a2 + 128);
    *(void *)(a1 + 144) = *(void *)(a2 + 144);
    *(_OWORD *)(a1 + 112) = v17;
    *(_OWORD *)(a1 + 128) = v18;
    *(_OWORD *)(a1 + 96) = v16;
  }
  *(unsigned char *)(a1 + 152) = *(unsigned char *)(a2 + 152);
  *(unsigned char *)(a1 + 153) = *(unsigned char *)(a2 + 153);
  *(unsigned char *)(a1 + 154) = *(unsigned char *)(a2 + 154);
  *(_DWORD *)(a1 + 156) = *(_DWORD *)(a2 + 156);
  *(unsigned char *)(a1 + 160) = *(unsigned char *)(a2 + 160);
  *(unsigned char *)(a1 + 161) = *(unsigned char *)(a2 + 161);
  *(unsigned char *)(a1 + 168) = *(unsigned char *)(a2 + 168);
  *(void *)(a1 + 176) = *(void *)(a2 + 176);
  *(unsigned char *)(a1 + 184) = *(unsigned char *)(a2 + 184);
  *(unsigned char *)(a1 + 185) = *(unsigned char *)(a2 + 185);
  *(unsigned char *)(a1 + 192) = *(unsigned char *)(a2 + 192);
  *(void *)(a1 + 200) = *(void *)(a2 + 200);
  *(unsigned char *)(a1 + 208) = *(unsigned char *)(a2 + 208);
  *(unsigned char *)(a1 + 209) = *(unsigned char *)(a2 + 209);
  *(void *)(a1 + 216) = *(void *)(a2 + 216);
  *(void *)(a1 + 224) = *(void *)(a2 + 224);
  *(void *)(a1 + 232) = *(void *)(a2 + 232);
  *(void *)(a1 + 240) = *(void *)(a2 + 240);
  *(void *)(a1 + 248) = *(void *)(a2 + 248);
  *(void *)(a1 + 256) = *(void *)(a2 + 256);
  *(void *)(a1 + 264) = *(void *)(a2 + 264);
  *(void *)(a1 + 272) = *(void *)(a2 + 272);
  uint64_t v19 = *(void *)(a2 + 280);
  *(unsigned char *)(a1 + 288) = *(unsigned char *)(a2 + 288);
  *(void *)(a1 + 280) = v19;
  uint64_t v20 = *(void *)(a2 + 296);
  *(unsigned char *)(a1 + 304) = *(unsigned char *)(a2 + 304);
  *(void *)(a1 + 296) = v20;
  uint64_t v21 = *(void *)(a2 + 312);
  *(unsigned char *)(a1 + 320) = *(unsigned char *)(a2 + 320);
  *(void *)(a1 + 312) = v21;
  uint64_t v22 = *(void *)(a2 + 328);
  *(unsigned char *)(a1 + 336) = *(unsigned char *)(a2 + 336);
  *(void *)(a1 + 328) = v22;
  uint64_t v23 = *(void *)(a2 + 344);
  *(unsigned char *)(a1 + 352) = *(unsigned char *)(a2 + 352);
  *(void *)(a1 + 344) = v23;
  uint64_t v24 = *(void *)(a2 + 360);
  *(unsigned char *)(a1 + 368) = *(unsigned char *)(a2 + 368);
  *(void *)(a1 + 360) = v24;
  uint64_t v25 = *(void *)(a2 + 376);
  *(unsigned char *)(a1 + 384) = *(unsigned char *)(a2 + 384);
  *(void *)(a1 + 376) = v25;
  uint64_t v26 = *(void *)(a2 + 392);
  *(unsigned char *)(a1 + 400) = *(unsigned char *)(a2 + 400);
  *(void *)(a1 + 392) = v26;
  uint64_t v27 = *(void *)(a2 + 408);
  *(unsigned char *)(a1 + 416) = *(unsigned char *)(a2 + 416);
  *(void *)(a1 + 408) = v27;
  uint64_t v28 = *(void *)(a2 + 424);
  *(unsigned char *)(a1 + 432) = *(unsigned char *)(a2 + 432);
  *(void *)(a1 + 424) = v28;
  uint64_t v29 = *(void *)(a2 + 440);
  *(unsigned char *)(a1 + 448) = *(unsigned char *)(a2 + 448);
  *(void *)(a1 + 440) = v29;
  uint64_t v30 = *(void *)(a2 + 456);
  *(unsigned char *)(a1 + 464) = *(unsigned char *)(a2 + 464);
  *(void *)(a1 + 456) = v30;
  uint64_t v31 = *(void *)(a2 + 472);
  *(unsigned char *)(a1 + 480) = *(unsigned char *)(a2 + 480);
  *(void *)(a1 + 472) = v31;
  uint64_t v32 = *(void *)(a2 + 488);
  *(unsigned char *)(a1 + 496) = *(unsigned char *)(a2 + 496);
  *(void *)(a1 + 488) = v32;
  uint64_t v33 = *(void *)(a2 + 504);
  *(unsigned char *)(a1 + 512) = *(unsigned char *)(a2 + 512);
  *(void *)(a1 + 504) = v33;
  uint64_t v34 = *(void *)(a2 + 520);
  *(unsigned char *)(a1 + 528) = *(unsigned char *)(a2 + 528);
  *(void *)(a1 + 520) = v34;
  return a1;
}

void *__swift_memcpy529_8(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x211uLL);
}

uint64_t assignWithTake for UpdatedHostingScrollView(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  int v4 = *(void **)(a1 + 8);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);

  id v5 = *(void **)(a1 + 16);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);

  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_release();
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  *(unsigned char *)(a1 + 73) = *(unsigned char *)(a2 + 73);
  *(unsigned char *)(a1 + 74) = *(unsigned char *)(a2 + 74);
  *(unsigned char *)(a1 + 75) = *(unsigned char *)(a2 + 75);
  id v6 = (_OWORD *)(a1 + 80);
  long long v7 = (_OWORD *)(a2 + 80);
  if (!*(void *)(a1 + 104)) {
    goto LABEL_5;
  }
  if (!*(void *)(a2 + 104))
  {
    outlined destroy of AccessibilityRelationshipScope.Key(a1 + 80);
LABEL_5:
    long long v9 = *(_OWORD *)(a2 + 128);
    *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
    *(_OWORD *)(a1 + 128) = v9;
    *(void *)(a1 + 144) = *(void *)(a2 + 144);
    long long v10 = *(_OWORD *)(a2 + 96);
    *id v6 = *v7;
    *(_OWORD *)(a1 + 96) = v10;
    goto LABEL_6;
  }
  __swift_destroy_boxed_opaque_existential_1(a1 + 80);
  long long v8 = *(_OWORD *)(a2 + 96);
  *id v6 = *v7;
  *(_OWORD *)(a1 + 96) = v8;
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(_DWORD *)(a1 + 120) = *(_DWORD *)(a2 + 120);
  *(_WORD *)(a1 + 124) = *(_WORD *)(a2 + 124);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
LABEL_6:
  *(unsigned char *)(a1 + 152) = *(unsigned char *)(a2 + 152);
  *(unsigned char *)(a1 + 153) = *(unsigned char *)(a2 + 153);
  *(unsigned char *)(a1 + 154) = *(unsigned char *)(a2 + 154);
  *(_DWORD *)(a1 + 156) = *(_DWORD *)(a2 + 156);
  *(_WORD *)(a1 + 160) = *(_WORD *)(a2 + 160);
  *(unsigned char *)(a1 + 168) = *(unsigned char *)(a2 + 168);
  *(void *)(a1 + 176) = *(void *)(a2 + 176);
  *(_WORD *)(a1 + 184) = *(_WORD *)(a2 + 184);
  *(unsigned char *)(a1 + 192) = *(unsigned char *)(a2 + 192);
  *(void *)(a1 + 200) = *(void *)(a2 + 200);
  *(_WORD *)(a1 + 208) = *(_WORD *)(a2 + 208);
  *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 216);
  *(_OWORD *)(a1 + 232) = *(_OWORD *)(a2 + 232);
  *(_OWORD *)(a1 + 248) = *(_OWORD *)(a2 + 248);
  uint64_t v11 = *(void *)(a2 + 272);
  *(void *)(a1 + 264) = *(void *)(a2 + 264);
  *(void *)(a1 + 272) = v11;
  *(void *)(a1 + 280) = *(void *)(a2 + 280);
  *(unsigned char *)(a1 + 288) = *(unsigned char *)(a2 + 288);
  *(unsigned char *)(a1 + 304) = *(unsigned char *)(a2 + 304);
  *(void *)(a1 + 296) = *(void *)(a2 + 296);
  *(unsigned char *)(a1 + 320) = *(unsigned char *)(a2 + 320);
  *(void *)(a1 + 312) = *(void *)(a2 + 312);
  *(unsigned char *)(a1 + 336) = *(unsigned char *)(a2 + 336);
  *(void *)(a1 + 328) = *(void *)(a2 + 328);
  *(unsigned char *)(a1 + 352) = *(unsigned char *)(a2 + 352);
  *(void *)(a1 + 344) = *(void *)(a2 + 344);
  uint64_t v12 = *(void *)(a2 + 360);
  *(unsigned char *)(a1 + 368) = *(unsigned char *)(a2 + 368);
  *(void *)(a1 + 360) = v12;
  uint64_t v13 = *(void *)(a2 + 376);
  *(unsigned char *)(a1 + 384) = *(unsigned char *)(a2 + 384);
  *(void *)(a1 + 376) = v13;
  uint64_t v14 = *(void *)(a2 + 392);
  *(unsigned char *)(a1 + 400) = *(unsigned char *)(a2 + 400);
  *(void *)(a1 + 392) = v14;
  uint64_t v15 = *(void *)(a2 + 408);
  *(unsigned char *)(a1 + 416) = *(unsigned char *)(a2 + 416);
  *(void *)(a1 + 408) = v15;
  uint64_t v16 = *(void *)(a2 + 424);
  *(unsigned char *)(a1 + 432) = *(unsigned char *)(a2 + 432);
  *(void *)(a1 + 424) = v16;
  uint64_t v17 = *(void *)(a2 + 440);
  *(unsigned char *)(a1 + 448) = *(unsigned char *)(a2 + 448);
  *(void *)(a1 + 440) = v17;
  uint64_t v18 = *(void *)(a2 + 456);
  *(unsigned char *)(a1 + 464) = *(unsigned char *)(a2 + 464);
  *(void *)(a1 + 456) = v18;
  uint64_t v19 = *(void *)(a2 + 472);
  *(unsigned char *)(a1 + 480) = *(unsigned char *)(a2 + 480);
  *(void *)(a1 + 472) = v19;
  uint64_t v20 = *(void *)(a2 + 488);
  *(unsigned char *)(a1 + 496) = *(unsigned char *)(a2 + 496);
  *(void *)(a1 + 488) = v20;
  uint64_t v21 = *(void *)(a2 + 504);
  *(unsigned char *)(a1 + 512) = *(unsigned char *)(a2 + 512);
  *(void *)(a1 + 504) = v21;
  uint64_t v22 = *(void *)(a2 + 520);
  *(unsigned char *)(a1 + 528) = *(unsigned char *)(a2 + 528);
  *(void *)(a1 + 520) = v22;
  return a1;
}

uint64_t getEnumTagSinglePayload for UpdatedHostingScrollView(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 529)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for UpdatedHostingScrollView(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 520) = 0;
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 528) = 0;
    *(_OWORD *)(result + 504) = 0u;
    *(_OWORD *)(result + 488) = 0u;
    *(_OWORD *)(result + 472) = 0u;
    *(_OWORD *)(result + 456) = 0u;
    *(_OWORD *)(result + 440) = 0u;
    *(_OWORD *)(result + 424) = 0u;
    *(_OWORD *)(result + 408) = 0u;
    *(_OWORD *)(result + 392) = 0u;
    *(_OWORD *)(result + 376) = 0u;
    *(_OWORD *)(result + 360) = 0u;
    *(_OWORD *)(result + 344) = 0u;
    *(_OWORD *)(result + 328) = 0u;
    *(_OWORD *)(result + 312) = 0u;
    *(_OWORD *)(result + 296) = 0u;
    *(_OWORD *)(result + 280) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 529) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 529) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

void *type metadata accessor for UpdatedHostingScrollView()
{
  return &unk_1ED4741C0;
}

void *type metadata accessor for ScrollViewDisplayListFrame()
{
  return &unk_1ED44C500;
}

uint64_t getEnumTagSinglePayload for ScrollViewFocusableBorder(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 73)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for ScrollViewFocusableBorder(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 72) = 0;
    *(void *)uint64_t result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 73) = v3;
  return result;
}

void *type metadata accessor for ScrollViewFocusableBorder()
{
  return &unk_1ED448558;
}

void *type metadata accessor for ScrollViewHostProvider()
{
  return &unk_1ED43B560;
}

void *type metadata accessor for ScrollableProvider()
{
  return &unk_1ED4294E0;
}

void *type metadata accessor for ScrollViewAdjustedBehavior()
{
  return &unk_1ED44C2F0;
}

uint64_t assignWithCopy for ScrollViewAdjustedState(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(unsigned char *)(a1 + 104) = *(unsigned char *)(a2 + 104);
  *(_DWORD *)(a1 + 108) = *(_DWORD *)(a2 + 108);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for ScrollViewAdjustedState(uint64_t a1, uint64_t a2)
{
  long long v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v3;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(unsigned char *)(a1 + 104) = *(unsigned char *)(a2 + 104);
  *(_DWORD *)(a1 + 108) = *(_DWORD *)(a2 + 108);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for ScrollViewAdjustedState(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 120)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 112);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ScrollViewAdjustedState(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 120) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 112) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 120) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

void *type metadata accessor for ScrollViewAdjustedState()
{
  return &unk_1ED440110;
}

void *type metadata accessor for ScrollViewAdjustedSafeArea()
{
  return &unk_1ED44C3F8;
}

void *type metadata accessor for ScrollViewAdjustedSize()
{
  return &unk_1ED43B450;
}

void *type metadata accessor for ScrollViewAdjustedPosition()
{
  return &unk_1ED44C370;
}

void *type metadata accessor for ScrollViewRTLAlignmentAdjustment()
{
  return &unk_1ED45D5F8;
}

void *type metadata accessor for ScrollViewAlignmentAdjustment()
{
  return &unk_1ED456DC8;
}

void *type metadata accessor for ScrollViewChildContainerSize()
{
  return &unk_1ED4742D0;
}

void *type metadata accessor for ScrollViewContentFrame()
{
  return &unk_1ED43B4D0;
}

void *type metadata accessor for ScrollViewContentFrameSize()
{
  return &unk_1ED44C480;
}

uint64_t assignWithCopy for ScrollViewDefaultAnchors(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  long long v4 = *(_OWORD *)(a2 + 16);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = v4;
  *(unsigned char *)(a1 + 33) = *(unsigned char *)(a2 + 33);
  return a1;
}

uint64_t assignWithTake for ScrollViewDefaultAnchors(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_WORD *)(a1 + 32) = *(_WORD *)(a2 + 32);
  return a1;
}

uint64_t getEnumTagSinglePayload for ScrollViewDefaultAnchors(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 34)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ScrollViewDefaultAnchors(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(_WORD *)(result + 32) = 0;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 34) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 34) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

void *type metadata accessor for ScrollViewDefaultAnchors()
{
  return &unk_1ED4439D8;
}

void *type metadata accessor for ScrollViewAdjustedProperties()
{
  return &unk_1ED454290;
}

void *type metadata accessor for ScrollViewAdjustedConfiguration()
{
  return &unk_1ED45B9E8;
}

void *type metadata accessor for MainThreadRequiringScrollPhase()
{
  return &unk_1ED459228;
}

uint64_t outlined retain of ScrollViewScrollable(uint64_t a1)
{
  return a1;
}

uint64_t sub_1882B03B0()
{
  swift_release();

  return swift_deallocObject();
}

void *partial apply for closure #2 in ScrollViewScrollable.setContentTarget(_:)@<X0>(_OWORD *a1@<X0>, char *a2@<X1>, uint64_t a3@<X8>)
{
  return closure #2 in ScrollViewScrollable.setContentTarget(_:)(a1, a2, *(void *(**)(long long *__return_ptr, _OWORD *, char *))(v3 + 16), a3, *(double *)(v3 + 32), *(double *)(v3 + 40));
}

uint64_t sub_1882B03F4()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_1882B042C()
{
  swift_release();
  __swift_destroy_boxed_opaque_existential_1(v0 + 32);

  return swift_deallocObject();
}

void *partial apply for closure #1 in ScrollViewScrollable.setContentTarget(_:)@<X0>(uint64_t *a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X8>)
{
  return closure #1 in ScrollViewScrollable.setContentTarget(_:)(a1, a2, *(void *(**)(long long *__return_ptr, long long *, char *))(v3 + 16), a3);
}

uint64_t sub_1882B0478()
{
  swift_unknownObjectWeakDestroy();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (*(void *)(v0 + 80)) {
    swift_release();
  }

  return swift_deallocObject();
}

uint64_t EnvironmentValues.testCase.getter()
{
  if (*(void *)(v0 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<PPTTestCaseEnvironmentKey>();
    lazy protocol witness table accessor for type EnvironmentPropertyKey<PPTTestCaseEnvironmentKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<PPTTestCaseEnvironmentKey> and conformance EnvironmentPropertyKey<A>, (void (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<PPTTestCaseEnvironmentKey>);
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<PPTTestCaseEnvironmentKey>();
    lazy protocol witness table accessor for type EnvironmentPropertyKey<PPTTestCaseEnvironmentKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<PPTTestCaseEnvironmentKey> and conformance EnvironmentPropertyKey<A>, (void (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<PPTTestCaseEnvironmentKey>);
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  return swift_release_n();
}

uint64_t EnvironmentValues.testCase.setter(uint64_t a1)
{
  outlined init with copy of PPTTestCase?(a1, (uint64_t)&v4);
  type metadata accessor for EnvironmentPropertyKey<PPTTestCaseEnvironmentKey>();
  lazy protocol witness table accessor for type EnvironmentPropertyKey<PPTTestCaseEnvironmentKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<PPTTestCaseEnvironmentKey> and conformance EnvironmentPropertyKey<A>, (void (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<PPTTestCaseEnvironmentKey>);
  swift_retain();
  PropertyList.subscript.setter();
  if (*(void *)(v1 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  swift_release();
  return _s7SwiftUI11PPTTestCaseVSgWOhTm_0(a1, (unint64_t *)&lazy cache variable for type metadata for PPTTestCase?, (uint64_t)&type metadata for PPTTestCase);
}

uint64_t PPTTestCase.runScrollTest(_:scrollMode:onComplete:)(void *a1, unint64_t *a2, uint64_t a3, uint64_t a4)
{
  unint64_t v8 = *a2;
  unint64_t v7 = a2[1];
  unint64_t v9 = 1;
  switch(*a2)
  {
    case 1uLL:
    case 2uLL:
      unint64_t v9 = *a2;
      goto LABEL_3;
    case 3uLL:
      outlined copy of PPTTestCase.ScrollMode(3uLL);
      outlined copy of PPTTestCase.ScrollMode(3uLL);
      outlined consume of PPTTestCase.ScrollMode(3uLL);
      outlined consume of PPTTestCase.ScrollMode(3uLL);
      outlined consume of PPTTestCase.ScrollMode(3uLL);
      PPTTestCase.runArtificalScrollTest(_:onComplete:)(a1, a3, a4);
      char v19 = 1;
      break;
    default:
LABEL_3:
      outlined copy of PPTTestCase.ScrollMode(*a2);
      outlined copy of PPTTestCase.ScrollMode(v8);
      outlined copy of PPTTestCase.ScrollMode(3uLL);
      outlined consume of PPTTestCase.ScrollMode(v9);
      outlined consume of PPTTestCase.ScrollMode(3uLL);
      outlined consume of PPTTestCase.ScrollMode(v9);
      double v10 = UIView.screenFrame.getter();
      double v12 = v11;
      double v14 = v13;
      double v16 = v15;
      objc_msgSend(a1, sel_contentSize);
      v21[0] = v8;
      v21[1] = v7;
      char v19 = PPTTestCase.runScrollTest(scrollView:coordinates:contentSize:axis:mode:onComplete:)(a1, 0, v21, a3, a4, v10, v12, v14, v16, v17, v18);
      break;
  }
  return v19 & 1;
}

Swift::Void __swiftcall UIHostingController.runTest(_:options:)(Swift::String _, Swift::OpaquePointer options)
{
  object = _._object;
  uint64_t countAndFlagsBits = _._countAndFlagsBits;
  if (specialized UIHostingController.testBridge.getter())
  {
    int v5 = ++static PPTTestCase.lastTestSeed;
    v6[1] = &protocol witness table for PPTTestBridge;
    swift_unknownObjectWeakInit();
    _OWORD v6[2] = countAndFlagsBits;
    v6[3] = object;
    _OWORD v6[4] = options._rawValue;
    int v7 = v5;
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    PPTTestBridge.testCase.setter((uint64_t)v6);
    swift_release();
  }
}

void protocol witness for PPTTestHost.runTest(_:options:) in conformance UIHostingController<A>(uint64_t a1, uint64_t a2, Swift::OpaquePointer a3)
{
}

uint64_t one-time initialization function for dummyTest()
{
  unint64_t v0 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
  qword_1E903DA78 = 0;
  uint64_t result = swift_unknownObjectWeakInit();
  *(void *)(result + 16) = 0x796D6D7544;
  *(void *)(result + 24) = 0xE500000000000000;
  *(void *)(result + 32) = v0;
  *(_DWORD *)(result + 40) = 0;
  return result;
}

uint64_t static PPTTestCase.dummyTest.getter@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for dummyTest != -1) {
    swift_once();
  }
  swift_beginAccess();
  return outlined init with copy of PPTTestCase((uint64_t)&static PPTTestCase.dummyTest, a1);
}

uint64_t static PPTTestCase.dummyTest.setter(uint64_t a1)
{
  if (one-time initialization token for dummyTest != -1) {
    swift_once();
  }
  swift_beginAccess();
  outlined assign with copy of PPTTestCase(a1, (uint64_t)&static PPTTestCase.dummyTest);
  swift_endAccess();
  return outlined destroy of PPTTestCase(a1);
}

uint64_t (*static PPTTestCase.dummyTest.modify())()
{
  if (one-time initialization token for dummyTest != -1) {
    swift_once();
  }
  swift_beginAccess();
  return _defaultSwiftUIActivityEnvironmentLoggingEnabled.modify;
}

uint64_t (*PPTTestCase.Name.rawValue.modify())(void, void, void, void)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t PPTTestCase.SubTestName.rawValue.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *unint64_t v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*PPTTestCase.SubTestName.rawValue.modify())(void, void, void, void)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t PPTTestCase.name.getter@<X0>(void *a1@<X8>)
{
  uint64_t v2 = *(void *)(v1 + 24);
  *a1 = *(void *)(v1 + 16);
  a1[1] = v2;
  return swift_bridgeObjectRetain();
}

uint64_t PPTTestCase.name.setter(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 16) = v2;
  *(void *)(v1 + 24) = v3;
  return result;
}

uint64_t (*PPTTestCase.name.modify())(void, void, void, void)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t PPTTestCase.parameters.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t PPTTestCase.parameters.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 32) = a1;
  return result;
}

uint64_t (*PPTTestCase.parameters.modify())(void, void, void, void)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

Swift::Void __swiftcall PPTTestCase.startTest()()
{
  if (MEMORY[0x18C119DF0]())
  {
    uint64_t v1 = *(void *)(v0 + 16);
    uint64_t v2 = *(void *)(v0 + 24);
    v3[0] = v1;
    v3[1] = v2;
    swift_bridgeObjectRetain();
    specialized PPTTestBridge.startPPTTest(_:)(v3);
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
  }
}

Swift::Void __swiftcall PPTTestCase.finishTest()()
{
  if (MEMORY[0x18C119DF0]())
  {
    uint64_t v1 = *(void *)(v0 + 24);
    v3[0] = *(void *)(v0 + 16);
    v3[1] = v1;
    swift_bridgeObjectRetain();
    v2.rawValue._uint64_t countAndFlagsBits = (uint64_t)v3;
    PPTTestBridge.finishPPTTest(_:)(v2);
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
  }
}

Swift::Void __swiftcall PPTTestCase.failTest(reason:)(Swift::String_optional reason)
{
  object = reason.value._object;
  uint64_t countAndFlagsBits = (void *)reason.value._countAndFlagsBits;
  if (MEMORY[0x18C119DF0]())
  {
    uint64_t v4 = *(void *)(v1 + 24);
    v7[0] = *(void *)(v1 + 16);
    v7[1] = v4;
    swift_bridgeObjectRetain();
    v5.rawValue._uint64_t countAndFlagsBits = (uint64_t)v7;
    v5.rawValue._object = countAndFlagsBits;
    v6.value._uint64_t countAndFlagsBits = (uint64_t)object;
    PPTTestBridge.failPPTTest(_:reason:)(v5, v6);
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
  }
}

Swift::Void __swiftcall PPTTestCase.startSubTest(named:)(SwiftUI::PPTTestCase::SubTestName named)
{
}

Swift::Void __swiftcall PPTTestCase.finishSubTest(named:)(SwiftUI::PPTTestCase::SubTestName named)
{
}

void PPTTestCase.startSubTest(named:)(uint64_t *a1, SEL *a2)
{
  uint64_t v4 = v2;
  uint64_t v5 = *a1;
  uint64_t v6 = a1[1];
  if (MEMORY[0x18C119DF0](v4))
  {
    uint64_t v8 = *(void *)(v4 + 16);
    uint64_t v7 = *(void *)(v4 + 24);
    unint64_t v9 = self;
    swift_bridgeObjectRetain();
    id v10 = objc_msgSend(v9, sel_sharedApplication);
    double v11 = (void *)MEMORY[0x18C115780](v5, v6);
    id v12 = (id)MEMORY[0x18C115780](v8, v7);
    objc_msgSend(v10, *a2, v11, v12);
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
  }
}

uint64_t PPTTestCase.performScrollTest(_:)()
{
  objc_msgSend(self, sel_flush);
  type metadata accessor for ViewGraph();
  uint64_t v0 = static GraphHost.isUpdating.getter();
  if (v0)
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    MEMORY[0x1F4188790](v0);
    return static Update.ensure<A>(_:)();
  }
  return result;
}

uint64_t PPTTestCase.performScrollTest(_:scrollMode:)()
{
  objc_msgSend(self, sel_flush);
  type metadata accessor for ViewGraph();
  uint64_t v0 = static GraphHost.isUpdating.getter();
  if (v0)
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    MEMORY[0x1F4188790](v0);
    return static Update.ensure<A>(_:)();
  }
  return result;
}

uint64_t PPTTestCase.performScrollTest(_:onComplete:)()
{
  objc_msgSend(self, sel_flush);
  type metadata accessor for ViewGraph();
  uint64_t v0 = static GraphHost.isUpdating.getter();
  if (v0)
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    MEMORY[0x1F4188790](v0);
    return static Update.ensure<A>(_:)();
  }
  return result;
}

uint64_t PPTTestCase.performScrollTest(_:scrollMode:onComplete:)()
{
  objc_msgSend(self, sel_flush);
  type metadata accessor for ViewGraph();
  uint64_t v0 = static GraphHost.isUpdating.getter();
  if (v0)
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    MEMORY[0x1F4188790](v0);
    return static Update.ensure<A>(_:)();
  }
  return result;
}

uint64_t PPTTestCase.performScrollSubTest(_:subTestName:onComplete:)(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = *a2;
  uint64_t v5 = a2[1];
  uint64_t v9 = *a1;
  v8[0] = v4;
  v8[1] = v5;
  v7[0] = 0;
  v7[1] = 0;
  return PPTTestCase.performScrollSubTest(_:subTestName:scrollMode:onComplete:)((uint64_t)&v9, v8, (uint64_t)v7, a3, a4);
}

uint64_t PPTTestCase.performScrollSubTest(_:subTestName:scrollMode:onComplete:)(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = v5;
  uint64_t v10 = *a2;
  uint64_t v9 = a2[1];
  objc_msgSend(self, sel_flush);
  outlined init with copy of PPTTestCase(v6, (uint64_t)v14);
  double v11 = (void *)swift_allocObject();
  void v11[2] = a4;
  void v11[3] = a5;
  v11[4] = v10;
  _OWORD v11[5] = v9;
  outlined init with take of PPTTestCase((uint64_t)v14, (uint64_t)(v11 + 6));
  type metadata accessor for ViewGraph();
  outlined copy of AppIntentExecutor?(a4);
  swift_bridgeObjectRetain();
  uint64_t v12 = static GraphHost.isUpdating.getter();
  if (v12)
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    MEMORY[0x1F4188790](v12);
    static Update.ensure<A>(_:)();
    return swift_release();
  }
  return result;
}

void closure #1 in PPTTestCase.performScrollSubTest(_:subTestName:scrollMode:onComplete:)(uint64_t a1, void (*a2)(uint64_t, void *), uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (a2)
  {
    v17[0] = a4;
    v17[1] = a5;
    swift_retain();
    a2(a1, v17);
    outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?((uint64_t)a2);
  }
  else if (MEMORY[0x18C119DF0](a6))
  {
    uint64_t v11 = *(void *)(a6 + 16);
    uint64_t v12 = *(void *)(a6 + 24);
    double v13 = self;
    swift_bridgeObjectRetain();
    id v14 = objc_msgSend(v13, sel_sharedApplication);
    double v15 = (void *)MEMORY[0x18C115780](a4, a5);
    id v16 = (id)MEMORY[0x18C115780](v11, v12);
    objc_msgSend(v14, sel_finishedSubTest_forTest_, v15, v16);
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
  }
}

void PPTTestCase.performResizeTest(onComplete:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = MEMORY[0x18C119DF0](v3);
  if (v6)
  {
    uint64_t v7 = (void *)MEMORY[0x18C119DF0](v6 + 16);
    if (v7)
    {
      uint64_t v8 = v7;
      id v9 = objc_msgSend(v7, sel_window);
      swift_unknownObjectRelease();

      if (v9)
      {
        uint64_t v10 = self;
        id v11 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F94838]), sel_initWithTestName_window_completionHandler_, 0, v9, 0);
        outlined init with copy of PPTTestCase(v3, (uint64_t)v18);
        uint64_t v12 = swift_allocObject();
        outlined init with take of PPTTestCase((uint64_t)v18, v12 + 16);
        *(void *)(v12 + 64) = a1;
        *(void *)(v12 + 72) = a2;
        double v13 = (objc_class *)type metadata accessor for TestRunnerDelegate();
        id v14 = (char *)objc_allocWithZone(v13);
        double v15 = &v14[OBJC_IVAR____TtC7SwiftUI18TestRunnerDelegate_pptHandler];
        *(void *)double v15 = partial apply for closure #1 in PPTTestCase.performResizeTest(onComplete:);
        *((void *)v15 + 1) = v12;
        outlined copy of AppIntentExecutor?(a1);
        v17.receiver = v14;
        v17.super_class = v13;
        id v16 = objc_msgSendSuper2(&v17, sel_init);
        objc_msgSend(v10, sel_runTestWithParameters_delegate_, v11, v16);

        return;
      }
    }
    else
    {
      swift_unknownObjectRelease();
    }
  }
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

Swift::Void __swiftcall PPTTestCase.navigationComplete(depth:)(Swift::Int depth)
{
  uint64_t v2 = v1;
  uint64_t v4 = *(void *)(v1 + 32);
  AnyHashable.init<A>(_:)();
  if (*(void *)(v4 + 16) && (unint64_t v5 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&v14), (v6 & 1) != 0))
  {
    outlined init with copy of Any(*(void *)(v4 + 56) + 32 * v5, (uint64_t)&v16);
  }
  else
  {
    long long v16 = 0u;
    long long v17 = 0u;
  }
  outlined destroy of AnyHashable((uint64_t)&v14);
  if (!*((void *)&v17 + 1))
  {
    _s7SwiftUI11PPTTestCaseVSgWOhTm_0((uint64_t)&v16, (unint64_t *)&lazy cache variable for type metadata for Any?, MEMORY[0x1E4FBC840] + 8);
    return;
  }
  if (swift_dynamicCast())
  {
    if ((0x80000001883453C0 & 0x2000000000000000) != 0) {
      unint64_t v7 = (0x80000001883453C0 >> 56) & 0xF;
    }
    else {
      unint64_t v7 = 22;
    }
    if (!v7)
    {
      swift_bridgeObjectRelease();
      return;
    }
    if ((0x80000001883453C0 & 0x1000000000000000) != 0)
    {
      swift_bridgeObjectRetain();
      uint64_t v9 = specialized _parseInteger<A, B>(ascii:radix:)(0xD000000000000016, 0x80000001883453C0, 10);
      swift_bridgeObjectRelease_n();
      if ((v9 & 0x100000000) != 0) {
        return;
      }
      goto LABEL_17;
    }
    if ((0x80000001883453C0 & 0x2000000000000000) != 0)
    {
      unint64_t v14 = 0xD000000000000016;
      unint64_t v15 = 0x80000001883453C0 & 0xFFFFFFFFFFFFFFLL;
      LODWORD(v9) = 0;
      char v10 = 1;
    }
    else
    {
      uint64_t v8 = specialized closure #1 in FixedWidthInteger.init<A>(_:radix:)((unsigned __int8 *)((0x80000001883453C0 & 0xFFFFFFFFFFFFFFFLL) + 32), 22, 10);
      LODWORD(v9) = v8;
      LOBYTE(v16) = BYTE4(v8) & 1;
      char v10 = BYTE4(v8) & 1;
    }
    swift_bridgeObjectRelease();
    if ((v10 & 1) == 0)
    {
LABEL_17:
      if ((int)v9 == depth)
      {
        if (MEMORY[0x18C119DF0](v2))
        {
          unint64_t v11 = *(void *)(v2 + 16);
          unint64_t v12 = *(void *)(v2 + 24);
          unint64_t v14 = v11;
          unint64_t v15 = v12;
          swift_bridgeObjectRetain();
          v13.rawValue._uint64_t countAndFlagsBits = (uint64_t)&v14;
          PPTTestBridge.finishPPTTest(_:)(v13);
          swift_bridgeObjectRelease();
          swift_unknownObjectRelease();
        }
      }
    }
  }
}

uint64_t specialized FixedWidthInteger.init(_:)(uint64_t result, unint64_t a2)
{
  uint64_t v3 = HIBYTE(a2) & 0xF;
  uint64_t v4 = result & 0xFFFFFFFFFFFFLL;
  if ((a2 & 0x2000000000000000) != 0) {
    uint64_t v5 = v3;
  }
  else {
    uint64_t v5 = result & 0xFFFFFFFFFFFFLL;
  }
  if (!v5)
  {
    swift_bridgeObjectRelease();
    uint64_t v19 = 0;
    LOBYTE(v18) = 1;
    return v19 | ((unint64_t)v18 << 32);
  }
  if ((a2 & 0x1000000000000000) != 0)
  {
    unint64_t v8 = specialized _parseInteger<A, B>(ascii:radix:)(result, a2, 10);
    swift_bridgeObjectRelease();
    uint64_t v18 = HIDWORD(v8) & 1;
LABEL_36:
    uint64_t v19 = v8;
    if (v18) {
      uint64_t v19 = 0;
    }
    return v19 | ((unint64_t)v18 << 32);
  }
  if ((a2 & 0x2000000000000000) == 0)
  {
    if ((result & 0x1000000000000000) != 0) {
      char v6 = (unsigned __int8 *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 32);
    }
    else {
      char v6 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
    }
    unint64_t v7 = specialized closure #1 in FixedWidthInteger.init<A>(_:radix:)(v6, v4, 10);
    LODWORD(v8) = v7;
    char v25 = BYTE4(v7) & 1;
    char v9 = BYTE4(v7) & 1;
    goto LABEL_35;
  }
  v24[0] = result;
  v24[1] = a2 & 0xFFFFFFFFFFFFFFLL;
  if (result == 43)
  {
    if (!v3) {
      goto LABEL_51;
    }
    if (v3 == 1) {
      goto LABEL_34;
    }
    LODWORD(v8) = (BYTE1(result) - 48);
    if (v8 > 9) {
      goto LABEL_34;
    }
    uint64_t v14 = v3 - 2;
    if (v14)
    {
      unint64_t v15 = (unsigned __int8 *)v24 + 2;
      while (1)
      {
        unsigned int v16 = *v15 - 48;
        if (v16 > 9) {
          goto LABEL_34;
        }
        uint64_t v17 = 10 * (int)v8;
        if (v17 != (int)v17) {
          goto LABEL_34;
        }
        LODWORD(v8) = v17 + v16;
        if (__OFADD__(v17, v16)) {
          goto LABEL_34;
        }
        char v9 = 0;
        ++v15;
        if (!--v14) {
          goto LABEL_35;
        }
      }
    }
LABEL_40:
    char v9 = 0;
    goto LABEL_35;
  }
  if (result != 45)
  {
    if (!v3) {
      goto LABEL_34;
    }
    LODWORD(v8) = (result - 48);
    if (v8 > 9) {
      goto LABEL_34;
    }
    uint64_t v20 = v3 - 1;
    if (v20)
    {
      uint64_t v21 = (unsigned __int8 *)v24 + 1;
      while (1)
      {
        unsigned int v22 = *v21 - 48;
        if (v22 > 9) {
          goto LABEL_34;
        }
        uint64_t v23 = 10 * (int)v8;
        if (v23 != (int)v23) {
          goto LABEL_34;
        }
        LODWORD(v8) = v23 + v22;
        if (__OFADD__(v23, v22)) {
          goto LABEL_34;
        }
        char v9 = 0;
        ++v21;
        if (!--v20) {
          goto LABEL_35;
        }
      }
    }
    goto LABEL_40;
  }
  if (v3)
  {
    if (v3 != 1 && (BYTE1(result) - 48) <= 9u)
    {
      char v9 = 0;
      LODWORD(v8) = -(BYTE1(result) - 48);
      uint64_t v10 = v3 - 2;
      if (!v10)
      {
LABEL_35:
        swift_bridgeObjectRelease();
        LODWORD(v18) = v9 & 1;
        goto LABEL_36;
      }
      unint64_t v11 = (unsigned __int8 *)v24 + 2;
      while (1)
      {
        unsigned int v12 = *v11 - 48;
        if (v12 > 9) {
          break;
        }
        uint64_t v13 = 10 * (int)v8;
        if (v13 != (int)v13) {
          break;
        }
        LODWORD(v8) = v13 - v12;
        if (__OFSUB__(v13, v12)) {
          break;
        }
        char v9 = 0;
        ++v11;
        if (!--v10) {
          goto LABEL_35;
        }
      }
    }
LABEL_34:
    LODWORD(v8) = 0;
    char v9 = 1;
    goto LABEL_35;
  }
  __break(1u);
LABEL_51:
  __break(1u);
  return result;
}

id TestRunnerDelegate.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for TestRunnerDelegate();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t static PPTTestCase.ScrollMode.== infix(_:_:)(unint64_t *a1, unint64_t *a2)
{
  unint64_t v2 = *a1;
  unint64_t v3 = *a2;
  switch(*a1)
  {
    case 0uLL:
      if (v3) {
        goto LABEL_11;
      }
      goto LABEL_13;
    case 1uLL:
      if (v3 == 1) {
        goto LABEL_13;
      }
      goto LABEL_11;
    case 2uLL:
      if (v3 == 2) {
        goto LABEL_13;
      }
      goto LABEL_11;
    case 3uLL:
      if (v3 == 3) {
        goto LABEL_13;
      }
      goto LABEL_11;
    default:
      if (v3 >= 4)
      {
        swift_retain();
LABEL_13:
        uint64_t v4 = 1;
      }
      else
      {
LABEL_11:
        outlined copy of PPTTestCase.ScrollMode(*a1);
        uint64_t v4 = 0;
      }
      outlined copy of PPTTestCase.ScrollMode(v3);
      outlined consume of PPTTestCase.ScrollMode(v2);
      outlined consume of PPTTestCase.ScrollMode(v3);
      return v4;
  }
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PPTTestCase.ScrollMode(unint64_t *a1, unint64_t *a2)
{
  unint64_t v2 = *a1;
  unint64_t v3 = *a2;
  switch(*a1)
  {
    case 0uLL:
      if (v3) {
        goto LABEL_11;
      }
      goto LABEL_13;
    case 1uLL:
      if (v3 == 1) {
        goto LABEL_13;
      }
      goto LABEL_11;
    case 2uLL:
      if (v3 == 2) {
        goto LABEL_13;
      }
      goto LABEL_11;
    case 3uLL:
      if (v3 == 3) {
        goto LABEL_13;
      }
      goto LABEL_11;
    default:
      if (v3 >= 4)
      {
        swift_retain();
LABEL_13:
        uint64_t v4 = 1;
      }
      else
      {
LABEL_11:
        outlined copy of PPTTestCase.ScrollMode(*a1);
        uint64_t v4 = 0;
      }
      outlined copy of PPTTestCase.ScrollMode(v3);
      outlined consume of PPTTestCase.ScrollMode(v2);
      outlined consume of PPTTestCase.ScrollMode(v3);
      return v4;
  }
}

void closure #1 in PPTTestCase.runScrollSubTest(_:subTestName:scrollMode:onComplete:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t, void *))
{
  if (MEMORY[0x18C119DF0](a2))
  {
    uint64_t v9 = *(void *)(a2 + 16);
    uint64_t v10 = *(void *)(a2 + 24);
    unint64_t v11 = self;
    swift_bridgeObjectRetain();
    id v12 = objc_msgSend(v11, sel_sharedApplication);
    uint64_t v13 = (void *)MEMORY[0x18C115780](a3, a4);
    uint64_t v14 = (void *)MEMORY[0x18C115780](v9, v10);
    objc_msgSend(v12, sel_finishedSubTest_forTest_, v13, v14);
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
  }
  if (a5)
  {
    v15[0] = a3;
    v15[1] = a4;
    a5(a2, v15);
  }
}

uint64_t PPTTestCase.runArtificalScrollTest(_:onComplete:)(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = *(void *)(v3 + 32);
  uint64_t v66 = 0x6F69746172657469;
  unint64_t v67 = 0xEA0000000000736ELL;
  AnyHashable.init<A>(_:)();
  if (*(void *)(v8 + 16) && (unint64_t v9 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&aBlock), (v10 & 1) != 0))
  {
    outlined init with copy of Any(*(void *)(v8 + 56) + 32 * v9, (uint64_t)&v64);
  }
  else
  {
    long long v64 = 0u;
    long long v65 = 0u;
  }
  outlined destroy of AnyHashable((uint64_t)&aBlock);
  uint64_t v11 = MEMORY[0x1E4FBC840];
  if (!*((void *)&v65 + 1))
  {
    _s7SwiftUI11PPTTestCaseVSgWOhTm_0((uint64_t)&v64, (unint64_t *)&lazy cache variable for type metadata for Any?, MEMORY[0x1E4FBC840] + 8);
    goto LABEL_52;
  }
  uint64_t result = swift_dynamicCast();
  if ((result & 1) == 0)
  {
LABEL_52:
    uint64_t v21 = 2;
    goto LABEL_53;
  }
  uint64_t v14 = v66;
  uint64_t v13 = v67;
  unint64_t v15 = HIBYTE(v67) & 0xF;
  uint64_t v16 = v66 & 0xFFFFFFFFFFFFLL;
  if ((v67 & 0x2000000000000000) != 0) {
    unint64_t v17 = HIBYTE(v67) & 0xF;
  }
  else {
    unint64_t v17 = v66 & 0xFFFFFFFFFFFFLL;
  }
  if (!v17)
  {
    swift_bridgeObjectRelease();
    goto LABEL_52;
  }
  if ((v67 & 0x1000000000000000) != 0)
  {
    swift_bridgeObjectRetain();
    uint64_t v56 = specialized _parseInteger<A, B>(ascii:radix:)(v14, v13, 10);
    swift_bridgeObjectRelease_n();
    uint64_t v21 = v56;
    if ((v56 & 0x100000000) == 0) {
      goto LABEL_53;
    }
    goto LABEL_52;
  }
  if ((v67 & 0x2000000000000000) == 0)
  {
    if ((v66 & 0x1000000000000000) != 0) {
      uint64_t v18 = (unsigned __int8 *)((v67 & 0xFFFFFFFFFFFFFFFLL) + 32);
    }
    else {
      uint64_t v18 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
    }
    uint64_t v19 = specialized closure #1 in FixedWidthInteger.init<A>(_:radix:)(v18, v16, 10);
    LOBYTE(v64) = BYTE4(v19) & 1;
    char v20 = BYTE4(v19) & 1;
    uint64_t v21 = (uint64_t)v19;
LABEL_51:
    swift_bridgeObjectRelease();
    if ((v20 & 1) == 0)
    {
LABEL_53:
      uint64_t v66 = 0x74657366666FLL;
      unint64_t v67 = 0xE600000000000000;
      AnyHashable.init<A>(_:)();
      if (*(void *)(v8 + 16)
        && (unint64_t v32 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&aBlock), (v33 & 1) != 0))
      {
        outlined init with copy of Any(*(void *)(v8 + 56) + 32 * v32, (uint64_t)&v64);
      }
      else
      {
        long long v64 = 0u;
        long long v65 = 0u;
      }
      outlined destroy of AnyHashable((uint64_t)&aBlock);
      if (*((void *)&v65 + 1))
      {
        if (swift_dynamicCast())
        {
          uint64_t v34 = specialized FixedWidthInteger.init(_:)(v66, v67);
          if ((v34 & 0x100000000) == 0)
          {
LABEL_63:
            uint64_t v66 = 0x6874676E656CLL;
            unint64_t v67 = 0xE600000000000000;
            AnyHashable.init<A>(_:)();
            if (*(void *)(v8 + 16)
              && (unint64_t v35 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&aBlock), (v36 & 1) != 0))
            {
              outlined init with copy of Any(*(void *)(v8 + 56) + 32 * v35, (uint64_t)&v64);
            }
            else
            {
              long long v64 = 0u;
              long long v65 = 0u;
            }
            outlined destroy of AnyHashable((uint64_t)&aBlock);
            if (*((void *)&v65 + 1))
            {
              if (swift_dynamicCast())
              {
                uint64_t v37 = specialized FixedWidthInteger.init(_:)(v66, v67);
                if ((v37 & 0x100000000) == 0)
                {
                  uint64_t v38 = v37;
                  if (MEMORY[0x18C119DF0](v4))
                  {
                    long long v57 = a1;
                    uint64_t v39 = *(void *)(v4 + 16);
                    uint64_t v40 = *(void *)(v4 + 24);
                    swift_bridgeObjectRetain();
                    if (static ProcessEnvironment.BOOL(forKey:defaultValue:)())
                    {
                      type metadata accessor for AGGraphRef(0);
                      LOBYTE(aBlock) = 1;
                      static AGGraphRef.startTracing(options:)();
                    }
                    else if (static ProcessEnvironment.BOOL(forKey:defaultValue:)())
                    {
                      AGGraphStartProfiling();
                    }
                    id v49 = objc_msgSend(self, sel_sharedApplication);
                    long long v50 = (void *)MEMORY[0x18C115780](v39, v40);
                    objc_msgSend(v49, sel_startedTest_, v50);
                    swift_bridgeObjectRelease();
                    swift_unknownObjectRelease();

                    a1 = v57;
                  }
                  outlined init with copy of PPTTestCase(v4, (uint64_t)&v64);
                  uint64_t v51 = swift_allocObject();
                  outlined init with take of PPTTestCase((uint64_t)&v64, v51 + 16);
                  *(void *)(v51 + 64) = a2;
                  *(void *)(v51 + 72) = a3;
                  long long v62 = partial apply for closure #4 in PPTTestCase.runArtificalScrollTest(_:onComplete:);
                  uint64_t v63 = v51;
                  uint64_t aBlock = MEMORY[0x1E4F143A8];
                  unint64_t v59 = 1107296256;
                  long long v60 = thunk for @escaping @callee_guaranteed (@guaranteed [AnyHashable : Any]?) -> ();
                  long long v61 = &block_descriptor_24_0;
                  long long v52 = _Block_copy(&aBlock);
                  outlined copy of AppIntentExecutor?(a2);
                  swift_release();
                  objc_msgSend(a1, sel__performScrollTest_iterations_delta_length_scrollAxis_extraResultsBlock_completionBlock_, 0, v21, v34, v38, 2, 0, v52);
                  _Block_release(v52);
                  return 1;
                }
              }
            }
            else
            {
              _s7SwiftUI11PPTTestCaseVSgWOhTm_0((uint64_t)&v64, (unint64_t *)&lazy cache variable for type metadata for Any?, v11 + 8);
            }
            id v41 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1BD0]), sel_init);
            objc_msgSend(v41, sel_setAxis_, 2);
            objc_msgSend(v41, sel_setDelta_, (double)(int)v34);
            objc_msgSend(v41, sel_setIterations_, (int)v21);
            if (MEMORY[0x18C119DF0](v4))
            {
              uint64_t v42 = *(void *)(v4 + 16);
              uint64_t v43 = *(void *)(v4 + 24);
              swift_bridgeObjectRetain();
              if (static ProcessEnvironment.BOOL(forKey:defaultValue:)())
              {
                type metadata accessor for AGGraphRef(0);
                LOBYTE(aBlock) = 1;
                static AGGraphRef.startTracing(options:)();
              }
              else if (static ProcessEnvironment.BOOL(forKey:defaultValue:)())
              {
                AGGraphStartProfiling();
              }
              id v44 = objc_msgSend(self, sel_sharedApplication);
              uint64_t v45 = (void *)MEMORY[0x18C115780](v42, v43);
              objc_msgSend(v44, sel_startedTest_, v45);
              swift_bridgeObjectRelease();
              swift_unknownObjectRelease();
            }
            outlined init with copy of PPTTestCase(v4, (uint64_t)&v64);
            uint64_t v46 = swift_allocObject();
            outlined init with take of PPTTestCase((uint64_t)&v64, v46 + 16);
            *(void *)(v46 + 64) = a2;
            *(void *)(v46 + 72) = a3;
            long long v62 = (uint64_t (*)(uint64_t))partial apply for closure #5 in PPTTestCase.runArtificalScrollTest(_:onComplete:);
            uint64_t v63 = v46;
            uint64_t aBlock = MEMORY[0x1E4F143A8];
            unint64_t v59 = 1107296256;
            long long v60 = thunk for @escaping @callee_guaranteed (@guaranteed [AnyHashable : Any]?) -> ();
            long long v61 = &block_descriptor_85;
            int v47 = _Block_copy(&aBlock);
            outlined copy of AppIntentExecutor?(a2);
            id v48 = v41;
            swift_release();
            objc_msgSend(a1, sel__performScrollTestWithParameters_completionBlock_, v48, v47);
            _Block_release(v47);

            return 1;
          }
        }
      }
      else
      {
        _s7SwiftUI11PPTTestCaseVSgWOhTm_0((uint64_t)&v64, (unint64_t *)&lazy cache variable for type metadata for Any?, v11 + 8);
      }
      uint64_t v34 = 10;
      goto LABEL_63;
    }
    goto LABEL_52;
  }
  uint64_t aBlock = v66;
  unint64_t v59 = v67 & 0xFFFFFFFFFFFFFFLL;
  if (v66 == 43)
  {
    if (!v15) {
      goto LABEL_97;
    }
    if (v15 == 1) {
      goto LABEL_38;
    }
    uint64_t v21 = (BYTE1(v66) - 48);
    if (v21 > 9) {
      goto LABEL_38;
    }
    if (v15 != 2)
    {
      if ((BYTE2(v66) - 48) > 9u) {
        goto LABEL_38;
      }
      uint64_t v21 = 10 * v21 + (BYTE2(v66) - 48);
      unint64_t v23 = v15 - 3;
      if (v23)
      {
        uint64_t v24 = (unsigned __int8 *)&aBlock + 3;
        while (1)
        {
          unsigned int v25 = *v24 - 48;
          if (v25 > 9) {
            goto LABEL_38;
          }
          uint64_t v26 = 10 * (int)v21;
          if (v26 != (int)v26) {
            goto LABEL_38;
          }
          uint64_t v21 = v26 + v25;
          if (__OFADD__(v26, v25)) {
            goto LABEL_38;
          }
          char v20 = 0;
          ++v24;
          if (!--v23) {
            goto LABEL_51;
          }
        }
      }
    }
LABEL_50:
    char v20 = 0;
    goto LABEL_51;
  }
  if (v66 != 45)
  {
    if (!v15) {
      goto LABEL_38;
    }
    uint64_t v21 = (v66 - 48);
    if (v21 > 9) {
      goto LABEL_38;
    }
    if (v15 != 1)
    {
      if ((BYTE1(v66) - 48) > 9u) {
        goto LABEL_38;
      }
      uint64_t v21 = 10 * v21 + (BYTE1(v66) - 48);
      unint64_t v27 = v15 - 2;
      if (v27)
      {
        uint64_t v28 = (unsigned __int8 *)&aBlock + 2;
        while (1)
        {
          unsigned int v29 = *v28 - 48;
          if (v29 > 9) {
            goto LABEL_38;
          }
          uint64_t v30 = 10 * (int)v21;
          if (v30 != (int)v30) {
            goto LABEL_38;
          }
          uint64_t v21 = v30 + v29;
          if (__OFADD__(v30, v29)) {
            goto LABEL_38;
          }
          char v20 = 0;
          ++v28;
          if (!--v27) {
            goto LABEL_51;
          }
        }
      }
    }
    goto LABEL_50;
  }
  if (v15)
  {
    if (v15 != 1)
    {
      unsigned int v22 = (BYTE1(v66) - 48);
      if (v22 <= 9)
      {
        if (v15 == 2)
        {
          char v20 = 0;
          uint64_t v21 = -v22;
          goto LABEL_51;
        }
        if ((BYTE2(v66) - 48) <= 9u)
        {
          uint64_t v21 = -10 * v22 - (BYTE2(v66) - 48);
          unint64_t v31 = v15 - 3;
          if (!v31) {
            goto LABEL_50;
          }
          long long v53 = (unsigned __int8 *)&aBlock + 3;
          while (1)
          {
            unsigned int v54 = *v53 - 48;
            if (v54 > 9) {
              break;
            }
            uint64_t v55 = 10 * (int)v21;
            if (v55 != (int)v55) {
              break;
            }
            uint64_t v21 = v55 - v54;
            if (__OFSUB__(v55, v54)) {
              break;
            }
            char v20 = 0;
            ++v53;
            if (!--v31) {
              goto LABEL_51;
            }
          }
        }
      }
    }
LABEL_38:
    uint64_t v21 = 0;
    char v20 = 1;
    goto LABEL_51;
  }
  __break(1u);
LABEL_97:
  __break(1u);
  return result;
}

double UIView.screenFrame.getter()
{
  id v1 = objc_msgSend(v0, sel_window);
  if (v1)
  {
    unint64_t v2 = v1;
    id v3 = objc_msgSend(v1, sel_windowScene);
    if (!v3 || (uint64_t v4 = v3, v5 = objc_msgSend(v3, sel_screen), v4, !v5)) {
      id v5 = objc_msgSend(v2, sel_screen);
    }
    objc_msgSend(v0, sel_frame);
    objc_msgSend(v0, sel_convertRect_toCoordinateSpace_, objc_msgSend(v5, sel_coordinateSpace), v6, v7, v8, v9);
    double v11 = v10;

    swift_unknownObjectRelease();
  }
  else
  {
    static os_log_type_t.fault.getter();
    id v12 = (void *)static Log.runtimeIssuesLog.getter();
    type metadata accessor for _ContiguousArrayStorage<CVarArg>();
    uint64_t v13 = swift_allocObject();
    *(_OWORD *)(v13 + 16) = xmmword_18834BB80;
    *(void *)(v13 + 56) = type metadata accessor for UIView();
    *(void *)(v13 + 64) = lazy protocol witness table accessor for type EnvironmentPropertyKey<PPTTestCaseEnvironmentKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type UIView and conformance NSObject, (void (*)(uint64_t))type metadata accessor for UIView);
    *(void *)(v13 + 32) = v0;
    id v14 = v0;
    os_log(_:dso:log:_:_:)();

    swift_bridgeObjectRelease();
    return 0.0;
  }
  return v11;
}

uint64_t PPTTestCase.runScrollTest(scrollView:coordinates:contentSize:axis:mode:onComplete:)(void *a1, uint64_t a2, unint64_t *a3, uint64_t a4, uint64_t a5, double a6, double a7, double a8, double a9, double a10, double a11)
{
  uint64_t v12 = v11;
  char v20 = (uint64_t (*)(void))*a3;
  if (*a3 < 2)
  {
    if (a1)
    {
      id v21 = objc_allocWithZone(MEMORY[0x1E4F94840]);
      outlined copy of PPTTestCase.ScrollMode((unint64_t)v20);
      id v22 = objc_msgSend(v21, sel_initWithTestName_scrollView_completionHandler_, 0, a1, 0);
    }
    else
    {
      if (a2) {
        double v25 = a10;
      }
      else {
        double v25 = a11;
      }
      id v26 = objc_allocWithZone(MEMORY[0x1E4F94840]);
      outlined copy of PPTTestCase.ScrollMode((unint64_t)v20);
      id v22 = objc_msgSend(v26, sel_initWithTestName_scrollBounds_amplitude_direction_completionHandler_, 0, 1, 0, a6, a7, a8, a9, v25);
    }
    id v23 = v22;
    goto LABEL_14;
  }
  if (*a3 == 2)
  {
    id v23 = PPTTestCase.linearScrollParameters(scrollView:coordinates:contentSize:axis:)((uint64_t)a1, a6, a7, a8, a9, a10, a11);
LABEL_15:
    unint64_t v27 = self;
    outlined init with copy of PPTTestCase(v12, (uint64_t)v35);
    uint64_t v28 = swift_allocObject();
    outlined init with take of PPTTestCase((uint64_t)v35, v28 + 16);
    *(void *)(v28 + 64) = a4;
    *(void *)(v28 + 72) = a5;
    unsigned int v29 = (objc_class *)type metadata accessor for TestRunnerDelegate();
    uint64_t v30 = (char *)objc_allocWithZone(v29);
    unint64_t v31 = (void (**)(uint64_t))&v30[OBJC_IVAR____TtC7SwiftUI18TestRunnerDelegate_pptHandler];
    *unint64_t v31 = partial apply for closure #1 in PPTTestCase.runScrollTest(scrollView:coordinates:contentSize:axis:mode:onComplete:);
    v31[1] = (void (*)(uint64_t))v28;
    outlined copy of AppIntentExecutor?(a4);
    v34.receiver = v30;
    v34.super_class = v29;
    id v32 = objc_msgSendSuper2(&v34, sel_init);
    objc_msgSend(v27, sel_runTestWithParameters_delegate_, v23, v32);
    swift_unknownObjectRelease();

    return 1;
  }
  if (v20 != (uint64_t (*)(void))3 && a1)
  {
    outlined copy of PPTTestCase.ScrollMode(*a3);
    id v24 = a1;
    id v23 = (id)v20();

LABEL_14:
    outlined consume of PPTTestCase.ScrollMode((unint64_t)v20);
    goto LABEL_15;
  }
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t closure #4 in PPTTestCase.runArtificalScrollTest(_:onComplete:)(uint64_t a1, uint64_t a2, void (*a3)(uint64_t))
{
  if (a3)
  {
    swift_retain();
    a3(a2);
    return outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?((uint64_t)a3);
  }
  else
  {
    uint64_t result = MEMORY[0x18C119DF0](a2);
    if (result)
    {
      uint64_t v6 = *(void *)(a2 + 16);
      uint64_t v7 = *(void *)(a2 + 24);
      v9[0] = v6;
      v9[1] = v7;
      swift_bridgeObjectRetain();
      v8.rawValue._uint64_t countAndFlagsBits = (uint64_t)v9;
      PPTTestBridge.finishPPTTest(_:)(v8);
      swift_bridgeObjectRelease();
      return swift_unknownObjectRelease();
    }
  }
  return result;
}

id PPTTestCase.linearScrollParameters(scrollView:coordinates:contentSize:axis:)(uint64_t a1, double a2, double a3, double a4, double a5, double a6, double a7)
{
  if (!a1)
  {
    RPTSizeAlongAxis();
    double v18 = a7 / v17;
    double v19 = floor(v18);
    double v20 = ceil(v18);
    if (v18 >= 0.0) {
      double v21 = v20;
    }
    else {
      double v21 = v19;
    }
    if ((~*(void *)&v21 & 0x7FF0000000000000) != 0)
    {
      if (v21 > -9.22337204e18)
      {
        if (v21 < 9.22337204e18)
        {
          uint64_t v22 = (uint64_t)v21;
          id v7 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F94828]), sel_initWithTestName_scrollingBounds_swipeCount_direction_completionHandler_, 0, (uint64_t)v21, 3, 0, a2, a3, a4, a5);
          id v8 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F94828]), sel_initWithTestName_scrollingBounds_swipeCount_direction_completionHandler_, 0, v22, 4, 0, a2, a3, a4, a5);
          _s7SwiftUI11PPTTestCaseVSgMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>, MEMORY[0x1E4FBC838] + 8, MEMORY[0x1E4FBBE00]);
          uint64_t v23 = swift_allocObject();
          *(_OWORD *)(v23 + 16) = xmmword_1883863C0;
          *(void *)(v23 + 32) = v7;
          *(void *)(v23 + 40) = v8;
          unint64_t v31 = v23;
          specialized Array._endMutation()();
          if (!(v31 >> 62))
          {
            id v24 = v7;
            id v25 = v8;
            swift_bridgeObjectRetain();
            dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter();
            type metadata accessor for RPTTestParameters();
LABEL_13:
            swift_bridgeObjectRelease();
            id v26 = self;
            type metadata accessor for RPTTestParameters();
            Class isa = Array._bridgeToObjectiveC()().super.isa;
            swift_bridgeObjectRelease();
            id v28 = objc_msgSend(v26, sel_newWithTestName_parameters_completionHandler_, 0, isa, 0);

            return v28;
          }
LABEL_17:
          type metadata accessor for RPTTestParameters();
          id v29 = v7;
          id v30 = v8;
          swift_bridgeObjectRetain();
          _bridgeCocoaArray<A>(_:)();
          swift_bridgeObjectRelease();
          goto LABEL_13;
        }
LABEL_16:
        __break(1u);
        goto LABEL_17;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_16;
  }
  id v10 = objc_allocWithZone(MEMORY[0x1E4F94828]);

  return objc_msgSend(v10, sel_initWithTestName_testType_scrollView_completionHandler_, 0, 2, a1, 0);
}

void closure #1 in PPTTestCase.performResizeTest(onComplete:)(uint64_t a1, uint64_t a2, void (*a3)(uint64_t))
{
  if (a1 != 1)
  {
    if (!a1)
    {
      if (MEMORY[0x18C119DF0](a2))
      {
        uint64_t v5 = *(void *)(a2 + 16);
        uint64_t v4 = *(void *)(a2 + 24);
        swift_bridgeObjectRetain();
        if (static ProcessEnvironment.BOOL(forKey:defaultValue:)())
        {
          type metadata accessor for AGGraphRef(0);
          LOBYTE(v13) = 1;
          static AGGraphRef.startTracing(options:)();
        }
        else if (static ProcessEnvironment.BOOL(forKey:defaultValue:)())
        {
          AGGraphStartProfiling();
        }
        id v11 = objc_msgSend(self, sel_sharedApplication);
        id v12 = (id)MEMORY[0x18C115780](v5, v4);
        objc_msgSend(v11, sel_startedTest_, v12);
        swift_bridgeObjectRelease();
        swift_unknownObjectRelease();
      }
      return;
    }
    if (!MEMORY[0x18C119DF0](a2)) {
      return;
    }
    uint64_t v7 = *(void *)(a2 + 24);
    uint64_t v13 = *(void *)(a2 + 16);
    uint64_t v14 = v7;
    swift_bridgeObjectRetain();
    v8.value._uint64_t countAndFlagsBits = 0;
    PPTTestBridge.failPPTTest(_:reason:)((SwiftUI::PPTTestCase::Name)(unint64_t)&v13, v8);
LABEL_14:
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    return;
  }
  if (!a3)
  {
    if (!MEMORY[0x18C119DF0](a2)) {
      return;
    }
    uint64_t v9 = *(void *)(a2 + 24);
    uint64_t v13 = *(void *)(a2 + 16);
    uint64_t v14 = v9;
    swift_bridgeObjectRetain();
    v10.rawValue._uint64_t countAndFlagsBits = (uint64_t)&v13;
    PPTTestBridge.finishPPTTest(_:)(v10);
    goto LABEL_14;
  }
  swift_retain();
  a3(a2);

  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?((uint64_t)a3);
}

uint64_t static String._copying(_:)()
{
  unint64_t v0 = String.subscript.getter();
  uint64_t v4 = static String._copying(_:)(v0, v1, v2, v3);
  swift_bridgeObjectRelease();
  return v4;
}

uint64_t static String._copying(_:)(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  if ((a4 & 0x1000000000000000) != 0)
  {
    unint64_t v9 = specialized Collection.count.getter(a1, a2, a3, a4);
    if (v9)
    {
      uint64_t v10 = v9;
      id v11 = specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(v9, 0);
      unint64_t v12 = specialized Sequence._copySequenceContents(initializing:)((unint64_t)v14, (uint64_t)(v11 + 4), v10, a1, a2, a3, a4);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      if (v12 != v10)
      {
        __break(1u);
LABEL_11:
        _StringObject.sharedUTF8.getter();
LABEL_4:
        JUMPOUT(0x18C115890);
      }
    }
    else
    {
      id v11 = (void *)MEMORY[0x1E4FBC860];
    }
    uint64_t v13 = MEMORY[0x18C115890](v11 + 4, v11[2]);
    swift_release();
    return v13;
  }
  else
  {
    if ((a4 & 0x2000000000000000) == 0)
    {
      if ((a3 & 0x1000000000000000) != 0) {
        goto LABEL_4;
      }
      goto LABEL_11;
    }
    v14[0] = a3;
    v14[1] = a4 & 0xFFFFFFFFFFFFFFLL;
    return MEMORY[0x18C115890]((char *)v14 + (a1 >> 16), (a2 >> 16) - (a1 >> 16));
  }
}

unint64_t specialized Collection.count.getter(unint64_t result, unint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v7 = result;
  uint64_t v8 = (a3 >> 59) & 1;
  if ((a4 & 0x1000000000000000) == 0) {
    LOBYTE(v8) = 1;
  }
  uint64_t v9 = 4 << v8;
  if ((result & 0xC) == 4 << v8)
  {
    uint64_t result = _StringGuts._slowEnsureMatchingEncoding(_:)(result, a3, a4);
    unint64_t v7 = result;
  }
  if ((a2 & 0xC) == v9)
  {
    uint64_t result = _StringGuts._slowEnsureMatchingEncoding(_:)(a2, a3, a4);
    a2 = result;
    if ((a4 & 0x1000000000000000) == 0) {
      return (a2 >> 16) - (v7 >> 16);
    }
  }
  else if ((a4 & 0x1000000000000000) == 0)
  {
    return (a2 >> 16) - (v7 >> 16);
  }
  unint64_t v10 = HIBYTE(a4) & 0xF;
  if ((a4 & 0x2000000000000000) == 0) {
    unint64_t v10 = a3 & 0xFFFFFFFFFFFFLL;
  }
  if (v10 < v7 >> 16)
  {
    __break(1u);
    goto LABEL_17;
  }
  if (v10 < a2 >> 16)
  {
LABEL_17:
    __break(1u);
    return result;
  }

  return String.UTF8View._foreignDistance(from:to:)();
}

unint64_t specialized Sequence._copySequenceContents(initializing:)(unint64_t result, uint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5, unint64_t a6, unint64_t a7)
{
  uint64_t v9 = (void *)result;
  if (!a2) {
    goto LABEL_5;
  }
  if (!a3)
  {
    unint64_t v12 = a4;
    uint64_t v11 = 0;
    goto LABEL_33;
  }
  if (a3 < 0) {
    goto LABEL_36;
  }
  unint64_t v10 = a5 >> 14;
  unint64_t v27 = a4 >> 14;
  if (a4 >> 14 == a5 >> 14)
  {
LABEL_5:
    uint64_t v11 = 0;
    unint64_t v12 = a4;
LABEL_33:
    *uint64_t v9 = a4;
    v9[1] = a5;
    void v9[2] = a6;
    void v9[3] = a7;
    v9[4] = v12;
    return v11;
  }
  uint64_t v11 = 0;
  uint64_t v14 = (a6 >> 59) & 1;
  if ((a7 & 0x1000000000000000) == 0) {
    LOBYTE(v14) = 1;
  }
  uint64_t v15 = 4 << v14;
  uint64_t v21 = (a7 & 0xFFFFFFFFFFFFFFFLL) + 32;
  uint64_t v22 = a7 & 0xFFFFFFFFFFFFFFLL;
  uint64_t v16 = HIBYTE(a7) & 0xF;
  if ((a7 & 0x2000000000000000) == 0) {
    uint64_t v16 = a6 & 0xFFFFFFFFFFFFLL;
  }
  unint64_t v23 = v16;
  uint64_t v26 = a3 - 1;
  unint64_t v12 = a4;
  while (1)
  {
    unint64_t v17 = v12 & 0xC;
    uint64_t result = v12;
    if (v17 == v15) {
      uint64_t result = _StringGuts._slowEnsureMatchingEncoding(_:)(v12, a6, a7);
    }
    if (result >> 14 < v27 || result >> 14 >= v10) {
      break;
    }
    if ((a7 & 0x1000000000000000) != 0)
    {
      uint64_t result = String.UTF8View._foreignSubscript(position:)();
      char v19 = result;
      if (v17 != v15) {
        goto LABEL_23;
      }
    }
    else
    {
      unint64_t v18 = result >> 16;
      if ((a7 & 0x2000000000000000) != 0)
      {
        v28[0] = a6;
        v28[1] = v22;
        char v19 = *((unsigned char *)v28 + v18);
        if (v17 != v15) {
          goto LABEL_23;
        }
      }
      else
      {
        uint64_t result = v21;
        if ((a6 & 0x1000000000000000) == 0) {
          uint64_t result = _StringObject.sharedUTF8.getter();
        }
        char v19 = *(unsigned char *)(result + v18);
        if (v17 != v15)
        {
LABEL_23:
          if ((a7 & 0x1000000000000000) == 0) {
            goto LABEL_24;
          }
          goto LABEL_27;
        }
      }
    }
    uint64_t result = _StringGuts._slowEnsureMatchingEncoding(_:)(v12, a6, a7);
    unint64_t v12 = result;
    if ((a7 & 0x1000000000000000) == 0)
    {
LABEL_24:
      unint64_t v12 = (v12 & 0xFFFFFFFFFFFF0000) + 65540;
      goto LABEL_29;
    }
LABEL_27:
    if (v23 <= v12 >> 16) {
      goto LABEL_35;
    }
    unint64_t v12 = String.UTF8View._foreignIndex(after:)();
LABEL_29:
    *(unsigned char *)(a2 + v11) = v19;
    if (v26 == v11)
    {
      uint64_t v11 = a3;
      goto LABEL_33;
    }
    ++v11;
    if (v10 == v12 >> 14) {
      goto LABEL_33;
    }
  }
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
  return result;
}

uint64_t specialized _parseInteger<A, B>(ascii:radix:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v13 = a1;
  uint64_t v14 = a2;
  swift_bridgeObjectRetain();
  uint64_t v5 = String.init<A>(_:)();
  unint64_t v6 = v4;
  if ((v4 & 0x1000000000000000) == 0)
  {
    if ((v4 & 0x2000000000000000) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    uint64_t v8 = HIBYTE(v6) & 0xF;
    uint64_t v13 = v5;
    uint64_t v14 = v6 & 0xFFFFFFFFFFFFFFLL;
    unint64_t v7 = (unsigned __int8 *)&v13;
    goto LABEL_7;
  }
  uint64_t v5 = static String._copying(_:)();
  unint64_t v10 = v9;
  swift_bridgeObjectRelease();
  unint64_t v6 = v10;
  if ((v10 & 0x2000000000000000) != 0) {
    goto LABEL_6;
  }
LABEL_3:
  if ((v5 & 0x1000000000000000) != 0)
  {
    unint64_t v7 = (unsigned __int8 *)((v6 & 0xFFFFFFFFFFFFFFFLL) + 32);
    uint64_t v8 = v5 & 0xFFFFFFFFFFFFLL;
  }
  else
  {
    unint64_t v7 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
  }
LABEL_7:
  uint64_t v11 = specialized closure #1 in FixedWidthInteger.init<A>(_:radix:)(v7, v8, a3);
  swift_bridgeObjectRelease();
  return v11 | ((((unint64_t)v11 >> 32) & 1) << 32);
}

unsigned __int8 *specialized closure #1 in FixedWidthInteger.init<A>(_:radix:)(unsigned __int8 *result, uint64_t a2, uint64_t a3)
{
  int v3 = *result;
  if (v3 == 43)
  {
    if (a2 >= 1)
    {
      uint64_t v16 = a2 - 1;
      if (a2 != 1)
      {
        unsigned __int8 v17 = a3 + 87;
        if (a3 > 10)
        {
          unsigned __int8 v18 = a3 + 55;
        }
        else
        {
          unsigned __int8 v17 = 97;
          unsigned __int8 v18 = 65;
        }
        if (a3 <= 10) {
          unsigned __int8 v19 = a3 + 48;
        }
        else {
          unsigned __int8 v19 = 58;
        }
        if (result)
        {
          unsigned int v8 = 0;
          double v20 = result + 1;
          do
          {
            unsigned int v21 = *v20;
            if (v21 < 0x30 || v21 >= v19)
            {
              if (v21 < 0x41 || v21 >= v18)
              {
                unsigned int v12 = 0;
                unsigned __int8 v13 = 1;
                if (v21 < 0x61 || v21 >= v17) {
                  return (unsigned __int8 *)(v12 | ((unint64_t)v13 << 32));
                }
                char v22 = -87;
              }
              else
              {
                char v22 = -55;
              }
            }
            else
            {
              char v22 = -48;
            }
            uint64_t v23 = (int)v8 * (uint64_t)(int)a3;
            if (v23 != (int)v23) {
              goto LABEL_72;
            }
            unsigned __int8 v24 = v21 + v22;
            unsigned int v8 = v23 + v24;
            if (__OFADD__(v23, v24)) {
              goto LABEL_72;
            }
            ++v20;
            --v16;
          }
          while (v16);
LABEL_48:
          unsigned __int8 v13 = 0;
          unsigned int v12 = v8;
          return (unsigned __int8 *)(v12 | ((unint64_t)v13 << 32));
        }
        goto LABEL_71;
      }
LABEL_72:
      unsigned int v12 = 0;
      unsigned __int8 v13 = 1;
      return (unsigned __int8 *)(v12 | ((unint64_t)v13 << 32));
    }
  }
  else
  {
    if (v3 != 45)
    {
      if (a2)
      {
        unsigned __int8 v25 = a3 + 87;
        if (a3 > 10)
        {
          unsigned __int8 v26 = a3 + 55;
        }
        else
        {
          unsigned __int8 v25 = 97;
          unsigned __int8 v26 = 65;
        }
        if (a3 <= 10) {
          unsigned __int8 v27 = a3 + 48;
        }
        else {
          unsigned __int8 v27 = 58;
        }
        if (result)
        {
          unsigned int v28 = 0;
          do
          {
            unsigned int v29 = *result;
            if (v29 < 0x30 || v29 >= v27)
            {
              if (v29 < 0x41 || v29 >= v26)
              {
                unsigned int v12 = 0;
                unsigned __int8 v13 = 1;
                if (v29 < 0x61 || v29 >= v25) {
                  return (unsigned __int8 *)(v12 | ((unint64_t)v13 << 32));
                }
                char v30 = -87;
              }
              else
              {
                char v30 = -55;
              }
            }
            else
            {
              char v30 = -48;
            }
            uint64_t v31 = (int)v28 * (uint64_t)(int)a3;
            if (v31 != (int)v31) {
              goto LABEL_72;
            }
            unsigned __int8 v32 = v29 + v30;
            unsigned int v28 = v31 + v32;
            if (__OFADD__(v31, v32)) {
              goto LABEL_72;
            }
            ++result;
            --a2;
          }
          while (a2);
          unsigned __int8 v13 = 0;
          unsigned int v12 = v28;
          return (unsigned __int8 *)(v12 | ((unint64_t)v13 << 32));
        }
        goto LABEL_71;
      }
      goto LABEL_72;
    }
    if (a2 >= 1)
    {
      uint64_t v4 = a2 - 1;
      if (a2 != 1)
      {
        unsigned __int8 v5 = a3 + 87;
        if (a3 > 10)
        {
          unsigned __int8 v6 = a3 + 55;
        }
        else
        {
          unsigned __int8 v5 = 97;
          unsigned __int8 v6 = 65;
        }
        if (a3 <= 10) {
          unsigned __int8 v7 = a3 + 48;
        }
        else {
          unsigned __int8 v7 = 58;
        }
        if (result)
        {
          unsigned int v8 = 0;
          unint64_t v9 = result + 1;
          while (1)
          {
            unsigned int v10 = *v9;
            if (v10 < 0x30 || v10 >= v7)
            {
              if (v10 < 0x41 || v10 >= v6)
              {
                unsigned int v12 = 0;
                unsigned __int8 v13 = 1;
                if (v10 < 0x61 || v10 >= v5) {
                  return (unsigned __int8 *)(v12 | ((unint64_t)v13 << 32));
                }
                char v11 = -87;
              }
              else
              {
                char v11 = -55;
              }
            }
            else
            {
              char v11 = -48;
            }
            uint64_t v14 = (int)v8 * (uint64_t)(int)a3;
            if (v14 != (int)v14) {
              goto LABEL_72;
            }
            unsigned __int8 v15 = v10 + v11;
            unsigned int v8 = v14 - v15;
            if (__OFSUB__(v14, v15)) {
              goto LABEL_72;
            }
            ++v9;
            if (!--v4) {
              goto LABEL_48;
            }
          }
        }
LABEL_71:
        unsigned int v12 = 0;
        unsigned __int8 v13 = 0;
        return (unsigned __int8 *)(v12 | ((unint64_t)v13 << 32));
      }
      goto LABEL_72;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t outlined assign with copy of PPTTestCase(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t _s7SwiftUI15ScrollViewProxyV5apply33_6771D9CA74994071CD3B6B79860A981DLL2toySbAA10Scrollable_pXE_tFyyXEfU_TA_0()
{
  return closure #1 in ScrollViewProxy.apply(to:)(*(void *)(v0 + 16), *(uint64_t (**)(unsigned char *))(v0 + 24));
}

uint64_t sub_1882B3FCC()
{
  if (*(void *)(v0 + 16)) {
    swift_release();
  }
  swift_bridgeObjectRelease();
  swift_unknownObjectWeakDestroy();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

void partial apply for closure #1 in PPTTestCase.performScrollSubTest(_:subTestName:scrollMode:onComplete:)(uint64_t a1)
{
  closure #1 in PPTTestCase.performScrollSubTest(_:subTestName:scrollMode:onComplete:)(a1, *(void (**)(uint64_t, void *))(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40), v1 + 48);
}

uint64_t type metadata accessor for TestRunnerDelegate()
{
  return self;
}

unint64_t outlined copy of PPTTestCase.ScrollMode(unint64_t result)
{
  if (result >= 4) {
    return swift_retain();
  }
  return result;
}

unint64_t outlined consume of PPTTestCase.ScrollMode(unint64_t result)
{
  if (result >= 4) {
    return swift_release();
  }
  return result;
}

uint64_t dispatch thunk of PPTTestHost.runTest(_:options:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 8))();
}

uint64_t destroy for PPTTestCase()
{
  swift_unknownObjectWeakDestroy();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for PPTTestCase(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = swift_unknownObjectWeakCopyInit();
  uint64_t v5 = *(void *)(a2 + 16);
  *(void *)(v4 + 8) = *(void *)(a2 + 8);
  *(void *)(v4 + 16) = v5;
  uint64_t v6 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v6;
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for PPTTestCase(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = swift_unknownObjectWeakCopyAssign();
  *(void *)(v4 + 8) = *(void *)(a2 + 8);
  *(void *)(v4 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  return a1;
}

__n128 initializeWithTake for PPTTestCase(uint64_t a1, __n128 *a2)
{
  int v3 = (__n128 *)swift_unknownObjectWeakTakeInit();
  v3->n128_u64[1] = a2->n128_u64[1];
  __n128 result = a2[1];
  v3[1] = result;
  v3[2].n128_u64[0] = a2[2].n128_u64[0];
  v3[2].n128_u32[2] = a2[2].n128_u32[2];
  return result;
}

uint64_t assignWithTake for PPTTestCase(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)(swift_unknownObjectWeakTakeAssign() + 8) = *(_OWORD *)(a2 + 8);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  return a1;
}

ValueMetadata *type metadata accessor for PPTTestCase.SubTestName()
{
  return &type metadata for PPTTestCase.SubTestName;
}

uint64_t getEnumTagSinglePayload for PPTTestCase.ScrollMode(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFC && *((unsigned char *)a1 + 16)) {
    return (*(_DWORD *)a1 + 2147483644);
  }
  uint64_t v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  unsigned int v4 = v3 + 1;
  unsigned int v5 = v3 - 3;
  if (v4 >= 5) {
    return v5;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for PPTTestCase.ScrollMode(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFB)
  {
    *(void *)__n128 result = 0;
    *(void *)(result + 8) = 0;
    *(_DWORD *)__n128 result = a2 - 2147483644;
    if (a3 >= 0x7FFFFFFC) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFC) {
      *(unsigned char *)(result + 16) = 0;
    }
    if (a2) {
      *(void *)__n128 result = a2 + 3;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PPTTestCase.ScrollMode()
{
  return &type metadata for PPTTestCase.ScrollMode;
}

ValueMetadata *type metadata accessor for PPTTestCaseEnvironmentKey()
{
  return &type metadata for PPTTestCaseEnvironmentKey;
}

uint64_t partial apply for closure #4 in PPTTestCase.runArtificalScrollTest(_:onComplete:)(uint64_t a1)
{
  return closure #4 in PPTTestCase.runArtificalScrollTest(_:onComplete:)(a1, v1 + 16, *(void (**)(uint64_t))(v1 + 64));
}

void partial apply for closure #1 in PPTTestCase.runScrollTest(scrollView:coordinates:contentSize:axis:mode:onComplete:)(uint64_t a1)
{
  closure #1 in PPTTestCase.performResizeTest(onComplete:)(a1, v1 + 16, *(void (**)(uint64_t))(v1 + 64));
}

unint64_t type metadata accessor for RPTTestParameters()
{
  unint64_t result = lazy cache variable for type metadata for RPTTestParameters;
  if (!lazy cache variable for type metadata for RPTTestParameters)
  {
    unint64_t result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for RPTTestParameters);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<PPTTestCaseEnvironmentKey> and conformance EnvironmentPropertyKey<A>(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t closure #1 in ScrollViewProxy.apply(to:)partial apply()
{
  return _s7SwiftUI15ScrollViewProxyV5apply33_6771D9CA74994071CD3B6B79860A981DLL2toySbAA10Scrollable_pXE_tFyyXEfU_TA_0();
}

uint64_t TraitValues.tag<A>(for:)()
{
  return ViewTraitCollection.tag<A>(for:)();
}

uint64_t TraitValues.subscript.getter()
{
  return ViewTraitCollection.subscript.getter();
}

uint64_t Group.init<A, B>(elementsOf:transform:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a4 - 8) + 8))(a1, a4);
}

uint64_t closure #1 in Group.init<A, B>(elementsOf:transform:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v31 = a2;
  uint64_t v32 = a3;
  uint64_t v30 = a1;
  uint64_t v33 = a8;
  uint64_t v12 = *(void *)(a4 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v14 = (char *)&v30 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v34 = v15;
  uint64_t v35 = v16;
  uint64_t v36 = v17;
  uint64_t v37 = v18;
  uint64_t v19 = type metadata accessor for GroupElementsOfContent();
  uint64_t v20 = *(void *)(v19 - 8);
  MEMORY[0x1F4188790](v19);
  char v22 = (char *)&v30 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v24 = MEMORY[0x1F4188790](v23);
  unsigned __int8 v26 = (char *)&v30 - v25;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v12 + 16))(v14, v30, a4, v24);
  unsigned __int8 v27 = (void *)swift_allocObject();
  _OWORD v27[2] = a4;
  v27[3] = a5;
  v27[4] = a6;
  void v27[5] = a7;
  v27[6] = v31;
  v27[7] = v32;
  swift_retain();
  GroupElementsOfContent.init(subviews:content:)();
  swift_getWitnessTable();
  static ViewBuilder.buildExpression<A>(_:)(v22);
  unsigned int v28 = *(void (**)(char *, uint64_t))(v20 + 8);
  v28(v22, v19);
  static ViewBuilder.buildExpression<A>(_:)(v26);
  return ((uint64_t (*)(char *, uint64_t))v28)(v26, v19);
}

uint64_t partial apply for closure #1 in Group.init<A, B>(elementsOf:transform:)@<X0>(uint64_t a1@<X8>)
{
  return closure #1 in Group.init<A, B>(elementsOf:transform:)(v1[6], v1[7], v1[8], v1[2], v1[3], v1[4], v1[5], a1);
}

uint64_t SubviewCollection.subscript.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t result = outlined init with copy of SubviewCollection(v3, (uint64_t)(a3 + 2));
  *a3 = a1;
  a3[1] = a2;
  return result;
}

uint64_t SubviewCollection.startIndex.getter()
{
  return 0;
}

uint64_t SubviewCollection.selectedSubview<A>(selection:)@<X0>(_OWORD *a1@<X8>)
{
  char v5 = 1;
  memset(&v4[5], 0, 24);
  outlined init with copy of TableColumnList(v1, (uint64_t)v4);
  __swift_project_boxed_opaque_existential_1(v4, v4[3]);
  ViewList.applySublists(from:list:to:)();
  uint64_t result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v4);
  if ((v5 & 1) == 0) {
    return _VariadicView_Children.subscript.getter();
  }
  a1[4] = 0u;
  a1[5] = 0u;
  a1[2] = 0u;
  a1[3] = 0u;
  *a1 = 0u;
  a1[1] = 0u;
  return result;
}

uint64_t closure #1 in SubviewCollection.selectedSubview<A>(selection:)(uint64_t a1, char *a2, void *a3, void *a4, uint64_t a5, uint64_t a6)
{
  unsigned int v54 = a4;
  uint64_t v46 = a3;
  long long v57 = a2;
  uint64_t v9 = *(void *)(a5 - 8);
  MEMORY[0x1F4188790](a1);
  int v47 = (char *)&v45 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for Optional();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v50 = *(void *)(TupleTypeMetadata2 - 8);
  MEMORY[0x1F4188790](TupleTypeMetadata2);
  uint64_t v14 = (char *)&v45 - v13;
  uint64_t v15 = *(void *)(v11 - 8);
  MEMORY[0x1F4188790](v16);
  long long v52 = (char *)&v45 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v18);
  uint64_t v20 = (char *)&v45 - v19;
  MEMORY[0x1F4188790](v21);
  uint64_t v23 = (char *)&v45 - v22;
  uint64_t v53 = a1;
  uint64_t v58 = *(void *)(a1 + 72);
  uint64_t v48 = a6;
  ViewTraitCollection.tag<A>(for:)();
  (*(void (**)(char *, char *, uint64_t))(v9 + 16))(v20, v57, a5);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v9 + 56))(v20, 0, 1, a5);
  uint64_t v51 = TupleTypeMetadata2;
  double v24 = &v14[*(int *)(TupleTypeMetadata2 + 48)];
  uint64_t v56 = v15;
  uint64_t v25 = *(void (**)(char *, char *, uint64_t))(v15 + 16);
  v25(v14, v23, v11);
  uint64_t v55 = v24;
  unsigned __int8 v26 = v24;
  uint64_t v27 = v11;
  v25(v26, v20, v11);
  uint64_t v49 = v9;
  unsigned int v28 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48);
  long long v57 = v14;
  if (v28(v14, 1, a5) == 1)
  {
    unsigned int v29 = v57;
    uint64_t v30 = *(void (**)(char *, uint64_t))(v56 + 8);
    v30(v20, v11);
    v30(v23, v11);
    if (v28(v55, 1, a5) == 1)
    {
      v30(v29, v11);
      uint64_t v32 = v53;
      uint64_t v31 = v54;
      goto LABEL_8;
    }
    goto LABEL_6;
  }
  uint64_t v33 = v56;
  uint64_t v34 = v27;
  v25(v52, v57, v27);
  uint64_t v35 = v55;
  if (v28(v55, 1, a5) == 1)
  {
    unsigned int v29 = v57;
    uint64_t v36 = *(void (**)(char *, uint64_t))(v33 + 8);
    v36(v20, v34);
    v36(v23, v34);
    (*(void (**)(char *, uint64_t))(v49 + 8))(v52, a5);
LABEL_6:
    (*(void (**)(char *, uint64_t))(v50 + 8))(v29, v51);
    uint64_t v32 = v53;
    uint64_t v31 = v54;
LABEL_9:
    *v31 += *(void *)(v32 + 8);
    return 1;
  }
  uint64_t v37 = v49;
  uint64_t v38 = v47;
  (*(void (**)(char *, char *, uint64_t))(v49 + 32))(v47, v35, a5);
  uint64_t v39 = v52;
  char v40 = dispatch thunk of static Equatable.== infix(_:_:)();
  id v41 = *(void (**)(char *, uint64_t))(v37 + 8);
  v41(v38, a5);
  uint64_t v42 = *(void (**)(char *, uint64_t))(v33 + 8);
  v42(v20, v34);
  v42(v23, v34);
  v41(v39, a5);
  v42(v57, v34);
  uint64_t v32 = v53;
  uint64_t v31 = v54;
  if ((v40 & 1) == 0) {
    goto LABEL_9;
  }
LABEL_8:
  uint64_t v58 = *(void *)(v32 + 72);
  if (ViewTraitCollection.isAuxiliaryContent.getter()) {
    goto LABEL_9;
  }
  uint64_t result = 0;
  id v44 = v46;
  *uint64_t v46 = *v31;
  *((unsigned char *)v44 + 8) = 0;
  return result;
}

uint64_t partial apply for closure #1 in SubviewCollection.selectedSubview<A>(selection:)(uint64_t a1)
{
  return closure #1 in SubviewCollection.selectedSubview<A>(selection:)(a1, *(char **)(v1 + 32), *(void **)(v1 + 40), *(void **)(v1 + 48), *(void *)(v1 + 16), *(void *)(v1 + 24));
}

void *protocol witness for BidirectionalCollection.index(before:) in conformance SubviewCollection@<X0>(void *result@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = *result - 1;
  if (__OFSUB__(*result, 1))
  {
    __break(1u);
  }
  else
  {
    uint64_t result = (void *)_VariadicView_Children.endIndex.getter();
    if ((v3 & 0x8000000000000000) == 0 && v3 < (uint64_t)result)
    {
      *a2 = v3;
      return result;
    }
  }
  __break(1u);
  return result;
}

uint64_t *protocol witness for BidirectionalCollection.formIndex(before:) in conformance SubviewCollection(uint64_t *result)
{
  uint64_t v1 = *result - 1;
  if (__OFSUB__(*result, 1))
  {
    __break(1u);
  }
  else
  {
    unint64_t v2 = result;
    uint64_t result = (uint64_t *)_VariadicView_Children.endIndex.getter();
    if ((v1 & 0x8000000000000000) == 0 && v1 < (uint64_t)result)
    {
      *unint64_t v2 = v1;
      return result;
    }
  }
  __break(1u);
  return result;
}

uint64_t protocol witness for Collection.endIndex.getter in conformance SubviewCollection@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = _VariadicView_Children.endIndex.getter();
  *a1 = result;
  return result;
}

void (*protocol witness for Collection.subscript.read in conformance SubviewCollection(void **a1))(uint64_t *a1)
{
  *a1 = malloc(0x60uLL);
  _VariadicView_Children.subscript.getter();
  return protocol witness for Collection.subscript.read in conformance SubviewCollection;
}

void protocol witness for Collection.subscript.read in conformance SubviewCollection(uint64_t *a1)
{
  uint64_t v1 = (void *)*a1;
  outlined destroy of Subview(*a1);

  free(v1);
}

uint64_t protocol witness for Collection.subscript.getter in conformance SubviewCollection@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = *a1;
  uint64_t v5 = a1[1];
  uint64_t result = outlined init with copy of SubviewCollection(v2, (uint64_t)(a2 + 2));
  *a2 = v4;
  a2[1] = v5;
  return result;
}

uint64_t protocol witness for Collection.indices.getter in conformance SubviewCollection@<X0>(void *a1@<X8>)
{
  uint64_t result = _VariadicView_Children.endIndex.getter();
  if (result < 0)
  {
    __break(1u);
  }
  else
  {
    *a1 = 0;
    a1[1] = result;
  }
  return result;
}

BOOL protocol witness for Collection.isEmpty.getter in conformance SubviewCollection()
{
  return _VariadicView_Children.endIndex.getter() == 0;
}

void *protocol witness for RandomAccessCollection.index(_:offsetBy:) in conformance SubviewCollection@<X0>(void *result@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v4 = *result + a2;
  if (__OFADD__(*result, a2))
  {
    __break(1u);
  }
  else
  {
    uint64_t result = (void *)_VariadicView_Children.endIndex.getter();
    if ((v4 & 0x8000000000000000) == 0 && (uint64_t)result >= v4)
    {
      *a3 = v4;
      return result;
    }
  }
  __break(1u);
  return result;
}

uint64_t protocol witness for RandomAccessCollection.index(_:offsetBy:limitedBy:) in conformance SubviewCollection@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t result = specialized RandomAccessCollection.index(_:offsetBy:limitedBy:)(*a1, a2, *a3);
  *(void *)a4 = result;
  *(unsigned char *)(a4 + 8) = v6 & 1;
  return result;
}

uint64_t protocol witness for RandomAccessCollection.distance(from:to:) in conformance SubviewCollection(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *a2;
  uint64_t result = _VariadicView_Children.endIndex.getter();
  if (v2 < 0 || result < v2)
  {
    __break(1u);
  }
  else
  {
    uint64_t result = _VariadicView_Children.endIndex.getter();
    if ((v3 & 0x8000000000000000) == 0 && result >= v3) {
      return v3 - v2;
    }
  }
  __break(1u);
  return result;
}

uint64_t protocol witness for Collection.index(after:) in conformance SubviewCollection@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  uint64_t result = _VariadicView_Children.endIndex.getter();
  if (v3 < 0 || v3 >= result) {
    __break(1u);
  }
  else {
    *a2 = v3 + 1;
  }
  return result;
}

uint64_t protocol witness for Collection.formIndex(after:) in conformance SubviewCollection(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t result = _VariadicView_Children.endIndex.getter();
  if (v2 < 0 || v2 >= result) {
    __break(1u);
  }
  else {
    *a1 = v2 + 1;
  }
  return result;
}

__n128 protocol witness for Sequence.makeIterator() in conformance SubviewCollection@<Q0>(uint64_t a1@<X8>)
{
  long long v2 = *(_OWORD *)(v1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)v1;
  *(_OWORD *)(a1 + 16) = v2;
  __n128 result = *(__n128 *)(v1 + 32);
  *(__n128 *)(a1 + 32) = result;
  *(void *)(a1 + 48) = *(void *)(v1 + 48);
  *(void *)(a1 + 56) = 0;
  return result;
}

uint64_t protocol witness for Collection.count.getter in conformance SubviewCollection()
{
  uint64_t v0 = _VariadicView_Children.endIndex.getter();
  uint64_t result = _VariadicView_Children.endIndex.getter();
  if (result < 0)
  {
    __break(1u);
  }
  else
  {
    uint64_t result = _VariadicView_Children.endIndex.getter();
    if ((v0 & 0x8000000000000000) == 0 && result >= v0) {
      return v0;
    }
  }
  __break(1u);
  return result;
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance SubviewCollection()
{
  uint64_t v1 = specialized _copyCollectionToContiguousArray<A>(_:)(v0);
  outlined destroy of SubviewCollection(v0);
  return v1;
}

uint64_t SubviewCollection.body.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of _VariadicView_Children(v1, a1);
}

uint64_t static SubviewCollection._makeViewList(view:inputs:)()
{
  return static _VariadicView_Children._makeViewList(view:inputs:)();
}

uint64_t static SubviewCollection._viewListCount(inputs:)()
{
  return 0;
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance SubviewCollection()
{
  return static _VariadicView_Children._makeViewList(view:inputs:)();
}

uint64_t protocol witness for View.body.getter in conformance SubviewCollection@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of _VariadicView_Children(v1, a1);
}

uint64_t TraitValues.subscript.setter(uint64_t a1)
{
  specialized TraitValues.subscript.setter(a1);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 8);

  return v3(a1, AssociatedTypeWitness);
}

void (*TraitValues.subscript.modify(void *a1, uint64_t a2, uint64_t a3, uint64_t a4))(uint64_t a1, char a2)
{
  uint64_t v9 = malloc(0x40uLL);
  *a1 = v9;
  void v9[2] = a4;
  void v9[3] = v4;
  *uint64_t v9 = a2;
  v9[1] = a3;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v9[4] = AssociatedTypeWitness;
  uint64_t v11 = *(void *)(AssociatedTypeWitness - 8);
  v9[5] = v11;
  size_t v12 = *(void *)(v11 + 64);
  void v9[6] = malloc(v12);
  void v9[7] = malloc(v12);
  ViewTraitCollection.subscript.getter();
  return TraitValues.subscript.modify;
}

void TraitValues.subscript.modify(uint64_t a1, char a2)
{
  long long v2 = *(void **)a1;
  uint64_t v3 = *(void **)(*(void *)a1 + 48);
  uint64_t v4 = *(void **)(*(void *)a1 + 56);
  uint64_t v5 = *(void *)(*(void *)a1 + 32);
  uint64_t v6 = *(void *)(*(void *)a1 + 40);
  if (a2)
  {
    (*(void (**)(void, void *, uint64_t))(v6 + 16))(*(void *)(*(void *)a1 + 48), v4, v5);
    specialized TraitValues.subscript.setter((uint64_t)v3);
    unsigned __int8 v7 = *(void (**)(void *, uint64_t))(v6 + 8);
    v7(v3, v5);
    v7(v4, v5);
  }
  else
  {
    specialized TraitValues.subscript.setter(*(void *)(*(void *)a1 + 56));
    (*(void (**)(void *, uint64_t))(v6 + 8))(v4, v5);
  }
  free(v4);
  free(v3);

  free(v2);
}

uint64_t _TraitKeyWritingModifier.keyPath.getter()
{
  return swift_retain();
}

uint64_t _TraitKeyWritingModifier.keyPath.setter(uint64_t a1)
{
  uint64_t result = swift_release();
  *uint64_t v1 = a1;
  return result;
}

uint64_t (*_TraitKeyWritingModifier.keyPath.modify())(void, void, void, void)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t _TraitKeyWritingModifier.value.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 16) - 8) + 16))(a2, v2 + *(int *)(a1 + 28));
}

uint64_t _TraitKeyWritingModifier.value.setter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a2 + 16) - 8) + 40))(v2 + *(int *)(a2 + 28), a1);
}

uint64_t (*_TraitKeyWritingModifier.value.modify())(void, void, void, void)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t static _TraitKeyWritingModifier._makeView(modifier:inputs:body:)(uint64_t a1, uint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t *))
{
  int v3 = *((_DWORD *)a2 + 2);
  uint64_t v4 = a2[2];
  int v5 = *((_DWORD *)a2 + 20);
  uint64_t v8 = *a2;
  int v9 = v3;
  uint64_t v10 = v4;
  long long v6 = *(_OWORD *)(a2 + 5);
  long long v11 = *(_OWORD *)(a2 + 3);
  long long v12 = v6;
  long long v13 = *(_OWORD *)(a2 + 7);
  uint64_t v14 = a2[9];
  int v15 = v5;
  return a3(a1, &v8);
}

uint64_t static _TraitKeyWritingModifier._makeViewList(modifier:inputs:body:)(uint64_t a1, uint64_t a2, void (*a3)(uint64_t, unint64_t *))
{
  uint64_t v45 = *MEMORY[0x1E4F143B8];
  int v3 = *(_DWORD *)(a2 + 8);
  uint64_t v4 = *(void *)(a2 + 16);
  unsigned int v5 = *(_DWORD *)(a2 + 24);
  unsigned int v6 = *(_DWORD *)(a2 + 28);
  unsigned int v7 = *(_DWORD *)(a2 + 32);
  unsigned int v22 = *(_DWORD *)(a2 + 36);
  uint64_t v8 = *(void *)(a2 + 40);
  uint64_t v20 = *(void *)(a2 + 56);
  uint64_t v21 = *(void *)(a2 + 48);
  uint64_t v9 = *(void *)(a2 + 72);
  char v10 = *(unsigned char *)(a2 + 80);
  char v18 = v10;
  int v19 = *(_DWORD *)(a2 + 64);
  unint64_t v36 = *(void *)a2;
  int v37 = v3;
  uint64_t v38 = v4;
  *(void *)&long long v39 = __PAIR64__(v6, v5);
  *((void *)&v39 + 1) = __PAIR64__(v22, v7);
  uint64_t v40 = v8;
  *(void *)&long long v41 = v21;
  *((void *)&v41 + 1) = v20;
  int v42 = v19;
  uint64_t v43 = v9;
  char v44 = v10;
  type metadata accessor for _TraitKeyWritingModifier();
  type metadata accessor for _GraphValue();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  unsigned int v11 = _GraphValue.value.getter();
  unint64_t v27 = v36;
  int v28 = v3;
  uint64_t v29 = v4;
  *(void *)&long long v30 = __PAIR64__(v6, v5);
  *((void *)&v30 + 1) = __PAIR64__(v22, v7);
  uint64_t v31 = v8;
  *(void *)&long long v32 = v21;
  *((void *)&v32 + 1) = v20;
  int v33 = v19;
  uint64_t v34 = v9;
  char v35 = v18;
  uint64_t v12 = _ViewListInputs.traits.getter();
  unsigned int v13 = *MEMORY[0x1E4F4E7A0];
  if ((v12 & 0x100000000) == 0) {
    unsigned int v13 = v12;
  }
  unint64_t v27 = __PAIR64__(v13, v11);
  uint64_t v25 = type metadata accessor for _TraitKeyWritingModifier.AddTrait();
  uint64_t WitnessTable = swift_getWitnessTable();
  type metadata accessor for _GraphValue<SubviewCollection>(0, (unint64_t *)&lazy cache variable for type metadata for Attribute<ViewTraitCollection>, MEMORY[0x1E4F40530], MEMORY[0x1E4F4E740]);
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v27, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TA_22, (uint64_t)v24, v25, MEMORY[0x1E4FBC248], v14, MEMORY[0x1E4FBC278], v15);
  LOBYTE(v27) = 0;
  _ViewListInputs.traits.setter();
  swift_bridgeObjectRelease();
  unint64_t v27 = v36;
  int v28 = v37;
  uint64_t v29 = v38;
  long long v30 = v39;
  uint64_t v31 = v40;
  long long v32 = v41;
  int v33 = v42;
  uint64_t v34 = 0;
  char v35 = 0;
  swift_retain();
  swift_retain();
  uint64_t v16 = swift_bridgeObjectRetain();
  a3(v16, &v27);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  return swift_release_n();
}

uint64_t static _TraitKeyWritingModifier._viewListCount(inputs:body:)(long long *a1, uint64_t (*a2)(long long *))
{
  int v2 = *((_DWORD *)a1 + 4);
  uint64_t v3 = *((void *)a1 + 3);
  long long v5 = *a1;
  int v6 = v2;
  uint64_t v7 = v3;
  return a2(&v5);
}

uint64_t _TraitKeyWritingModifier.AddTrait.modifier.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for _TraitKeyWritingModifier();
  uint64_t Value = AGGraphGetValue();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16);

  return v4(a1, Value, v2);
}

uint64_t _TraitKeyWritingModifier.AddTrait.value.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  int v19 = a3;
  uint64_t v5 = *(void *)(a2 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v7 = (char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for _TraitKeyWritingModifier();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  unsigned int v11 = (char *)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v12);
  uint64_t v14 = (char *)&v18 - v13;
  TableRow.MakeList.traits.getter(a1, &v20);
  uint64_t v15 = v20;
  if (!v20)
  {
    ViewTraitCollection.init()();
    uint64_t v15 = v21;
  }
  uint64_t v21 = v15;
  _TraitKeyWritingModifier.AddTrait.modifier.getter((uint64_t)v14);
  uint64_t v16 = *(void (**)(char *, uint64_t))(v9 + 8);
  swift_retain();
  v16(v14, v8);
  _TraitKeyWritingModifier.AddTrait.modifier.getter((uint64_t)v11);
  (*(void (**)(char *, char *, uint64_t))(v5 + 16))(v7, &v11[*(int *)(v8 + 28)], a2);
  v16(v11, v8);
  swift_setAtWritableKeyPath();
  uint64_t result = swift_release();
  *int v19 = v21;
  return result;
}

uint64_t protocol witness for Rule.value.getter in conformance _TraitKeyWritingModifier<A>.AddTrait@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return _TraitKeyWritingModifier.AddTrait.value.getter(*v2, *(void *)(a1 + 16), a2);
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance _TraitKeyWritingModifier<A>.AddTrait(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F40FE388](a1, WitnessTable);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance _TraitKeyWritingModifier<A>(uint64_t a1, uint64_t a2, void (*a3)(uint64_t, unint64_t *))
{
  return static _TraitKeyWritingModifier._makeViewList(modifier:inputs:body:)(a1, a2, a3);
}

uint64_t protocol witness for static ViewModifier._viewListCount(inputs:body:) in conformance _TraitKeyWritingModifier<A>(long long *a1, uint64_t (*a2)(long long *))
{
  return static _TraitKeyWritingModifier._viewListCount(inputs:body:)(a1, a2);
}

uint64_t specialized TraitValues.subscript.setter(uint64_t a1)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  double v3 = MEMORY[0x1F4188790](AssociatedTypeWitness);
  (*(void (**)(char *, uint64_t, double))(v5 + 16))((char *)&v7 - v4, a1, v3);
  return ViewTraitCollection.subscript.setter();
}

uint64_t type metadata accessor for _TraitKeyWritingModifier()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for _TraitKeyWritingModifier.AddTrait()
{
  return __swift_instantiateGenericMetadata();
}

void type metadata accessor for _GraphValue<SubviewCollection>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

uint64_t associated type witness table accessor for Collection.SubSequence : RandomAccessCollection in SubviewCollection()
{
  return lazy protocol witness table accessor for type Slice<SubviewCollection> and conformance <> Slice<A>(&lazy protocol witness table cache variable for type Slice<SubviewCollection> and conformance <> Slice<A>, (void (*)(void))lazy protocol witness table accessor for type SubviewCollection and conformance SubviewCollection);
}

uint64_t associated type witness table accessor for Collection.SubSequence : BidirectionalCollection in SubviewCollection()
{
  return lazy protocol witness table accessor for type Slice<SubviewCollection> and conformance <> Slice<A>(&lazy protocol witness table cache variable for type Slice<SubviewCollection> and conformance <> Slice<A>, (void (*)(void))lazy protocol witness table accessor for type SubviewCollection and conformance SubviewCollection);
}

uint64_t lazy protocol witness table accessor for type Slice<SubviewCollection> and conformance <> Slice<A>(unint64_t *a1, void (*a2)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for Slice<SubviewCollection>(255, &lazy cache variable for type metadata for Slice<SubviewCollection>, MEMORY[0x1E4FBC320]);
    a2();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t associated type witness table accessor for Collection.SubSequence : Collection in SubviewCollection()
{
  return lazy protocol witness table accessor for type Slice<SubviewCollection> and conformance Slice<A>(&lazy protocol witness table cache variable for type Slice<SubviewCollection> and conformance Slice<A>, &lazy cache variable for type metadata for Slice<SubviewCollection>, MEMORY[0x1E4FBC320]);
}

uint64_t associated type witness table accessor for Sequence.Iterator : IteratorProtocol in SubviewCollection()
{
  return lazy protocol witness table accessor for type Slice<SubviewCollection> and conformance Slice<A>(&lazy protocol witness table cache variable for type IndexingIterator<SubviewCollection> and conformance IndexingIterator<A>, &lazy cache variable for type metadata for IndexingIterator<SubviewCollection>, MEMORY[0x1E4FBBC18]);
}

uint64_t lazy protocol witness table accessor for type Slice<SubviewCollection> and conformance Slice<A>(unint64_t *a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, unint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for Slice<SubviewCollection>(255, a2, a3);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void type metadata accessor for Slice<SubviewCollection>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, unint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = lazy protocol witness table accessor for type SubviewCollection and conformance SubviewCollection();
    unint64_t v7 = a3(a1, &type metadata for SubviewCollection, v6);
    if (!v8) {
      atomic_store(v7, a2);
    }
  }
}

uint64_t associated type witness table accessor for View.Body : View in SubviewCollection()
{
  return swift_getOpaqueTypeConformance2();
}

_UNKNOWN **base witness table accessor for ViewModifier in _TraitKeyWritingModifier<A>()
{
  return &protocol witness table for _TraitKeyWritingModifier<A>;
}

ValueMetadata *type metadata accessor for SubviewCollection()
{
  return &type metadata for SubviewCollection;
}

ValueMetadata *type metadata accessor for TraitValues()
{
  return &type metadata for TraitValues;
}

uint64_t type metadata completion function for _TraitKeyWritingModifier()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for _TraitKeyWritingModifier(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  if (v5 <= 0x7FFFFFFF) {
    unsigned int v7 = 0x7FFFFFFF;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  int v8 = a2 - v7;
  if (a2 <= v7) {
    goto LABEL_23;
  }
  uint64_t v9 = ((v6 + 8) & ~v6) + *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  char v10 = 8 * v9;
  if (v9 <= 3)
  {
    unsigned int v13 = ((v8 + ~(-1 << v10)) >> v10) + 1;
    if (HIWORD(v13))
    {
      int v11 = *(_DWORD *)((char *)a1 + v9);
      if (!v11) {
        goto LABEL_23;
      }
      goto LABEL_15;
    }
    if (v13 > 0xFF)
    {
      int v11 = *(unsigned __int16 *)((char *)a1 + v9);
      if (!*(unsigned __int16 *)((char *)a1 + v9)) {
        goto LABEL_23;
      }
      goto LABEL_15;
    }
    if (v13 < 2)
    {
LABEL_23:
      if ((v5 & 0x80000000) != 0) {
        return (*(uint64_t (**)(unint64_t))(v4 + 48))(((unint64_t)a1 + v6 + 8) & ~v6);
      }
      uint64_t v15 = *(void *)a1;
      if (*(void *)a1 >= 0xFFFFFFFFuLL) {
        LODWORD(v15) = -1;
      }
      return (v15 + 1);
    }
  }
  int v11 = *((unsigned __int8 *)a1 + v9);
  if (!*((unsigned char *)a1 + v9)) {
    goto LABEL_23;
  }
LABEL_15:
  int v14 = (v11 - 1) << v10;
  if (v9 > 3) {
    int v14 = 0;
  }
  if (v9)
  {
    if (v9 > 3) {
      LODWORD(v9) = 4;
    }
    switch((int)v9)
    {
      case 2:
        LODWORD(v9) = *a1;
        break;
      case 3:
        LODWORD(v9) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v9) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v9) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v7 + (v9 | v14) + 1;
}

void storeEnumTagSinglePayload for _TraitKeyWritingModifier(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(unsigned __int8 *)(v6 + 80);
  size_t v10 = ((v9 + 8) & ~v9) + *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  BOOL v11 = a3 >= v8;
  unsigned int v12 = a3 - v8;
  if (v12 != 0 && v11)
  {
    if (v10 <= 3)
    {
      unsigned int v16 = ((v12 + ~(-1 << (8 * v10))) >> (8 * v10)) + 1;
      if (HIWORD(v16))
      {
        int v13 = 4;
      }
      else if (v16 >= 0x100)
      {
        int v13 = 2;
      }
      else
      {
        int v13 = v16 > 1;
      }
    }
    else
    {
      int v13 = 1;
    }
  }
  else
  {
    int v13 = 0;
  }
  if (v8 < a2)
  {
    unsigned int v14 = ~v8 + a2;
    if (v10 < 4)
    {
      int v15 = (v14 >> (8 * v10)) + 1;
      if (v10)
      {
        int v17 = v14 & ~(-1 << (8 * v10));
        bzero(a1, v10);
        if (v10 == 3)
        {
          *(_WORD *)a1 = v17;
          a1[2] = BYTE2(v17);
        }
        else if (v10 == 2)
        {
          *(_WORD *)a1 = v17;
        }
        else
        {
          *a1 = v17;
        }
      }
    }
    else
    {
      bzero(a1, v10);
      *(_DWORD *)a1 = v14;
      int v15 = 1;
    }
    switch(v13)
    {
      case 1:
        a1[v10] = v15;
        return;
      case 2:
        *(_WORD *)&a1[v10] = v15;
        return;
      case 3:
        goto LABEL_42;
      case 4:
        *(_DWORD *)&a1[v10] = v15;
        return;
      default:
        return;
    }
  }
  switch(v13)
  {
    case 1:
      a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 2:
      *(_WORD *)&a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 3:
LABEL_42:
      __break(1u);
      JUMPOUT(0x1882B6978);
    case 4:
      *(_DWORD *)&a1[v10] = 0;
      goto LABEL_23;
    default:
LABEL_23:
      if (a2)
      {
LABEL_24:
        if ((v7 & 0x80000000) != 0)
        {
          unint64_t v19 = (unint64_t)&a1[v9 + 8] & ~v9;
          uint64_t v20 = *(void (**)(unint64_t))(v6 + 56);
          v20(v19);
        }
        else
        {
          if ((a2 & 0x80000000) != 0) {
            uint64_t v18 = a2 ^ 0x80000000;
          }
          else {
            uint64_t v18 = a2 - 1;
          }
          *(void *)a1 = v18;
        }
      }
      return;
  }
}

uint64_t sub_1882B69A0()
{
  return MEMORY[0x1E4F40A30];
}

uint64_t base witness table accessor for _AttributeBody in _TraitKeyWritingModifier<A>.AddTrait()
{
  return swift_getWitnessTable();
}

uint64_t sub_1882B69C8()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in Group.init<A, B>(elementsOf:transform:)(uint64_t a1)
{
  uint64_t v2 = *(void (**)(unsigned char *))(v1 + 48);
  outlined init with copy of _VariadicView_Children(a1, (uint64_t)v4);
  v2(v4);
  return outlined destroy of SubviewCollection((uint64_t)v4);
}

uint64_t protocol witness for TableRowVisitor.visit<A, B>(rowValue:view:children:traits:) in conformance ResolvedTableRowIDs.RowIDVisitor(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5)
{
  return specialized ResolvedTableRowIDs.RowIDVisitor.visit<A, B>(rowValue:view:children:traits:)(a1, a3, a4, a5);
}

void protocol witness for Collection.endIndex.getter in conformance ResolvedTableRowIDs(void *a1@<X8>)
{
  uint64_t v2 = *(void *)(v1 + 16);
  uint64_t v3 = *(void *)(v1 + 24);
  BOOL v4 = __OFADD__(v2, v3);
  uint64_t v5 = v2 + v3;
  if (v4) {
    __break(1u);
  }
  else {
    *a1 = v5;
  }
}

void (*protocol witness for Collection.subscript.read in conformance ResolvedTableRowIDs(void (**a1)(uint64_t *a1), void *a2))(uint64_t *a1)
{
  uint64_t result = (void (*)(uint64_t *))malloc(0x29uLL);
  *a1 = result;
  uint64_t v6 = *(void *)(v2 + 16);
  BOOL v7 = __OFSUB__(*a2, v6);
  unint64_t v8 = *a2 - v6;
  if (v7)
  {
    __break(1u);
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  uint64_t v9 = *(void **)v2;
  if (!*(unsigned char *)(v2 + 8))
  {
    size_t v10 = *(void (**)(unint64_t))(*v9 + 104);
    swift_retain();
    v10(v8);
    outlined consume of Environment<[SceneID : KeyboardShortcut]>.Content((uint64_t)v9, 0);
    return protocol witness for Collection.subscript.read in conformance AnyTableRowIDs;
  }
  if ((v8 & 0x8000000000000000) != 0) {
    goto LABEL_9;
  }
  if (v8 < v9[2])
  {
    outlined init with copy of TableRowID((uint64_t)&v9[6 * v8 + 4], (uint64_t)result);
    return protocol witness for Collection.subscript.read in conformance AnyTableRowIDs;
  }
LABEL_10:
  __break(1u);
  return result;
}

uint64_t *protocol witness for Collection.subscript.getter in conformance ResolvedTableRowIDs@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *(void *)(v2 + 16);
  uint64_t v4 = *(void *)(v2 + 24);
  uint64_t v5 = v3 + v4;
  if (__OFADD__(v3, v4))
  {
    __break(1u);
    goto LABEL_7;
  }
  if (v5 < v3)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  uint64_t v6 = *result;
  if (*result < v3)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  uint64_t v7 = result[1];
  if (v5 >= v7)
  {
    uint64_t v8 = *(void *)v2;
    char v9 = *(unsigned char *)(v2 + 8);
    *(void *)a2 = v6;
    *(void *)(a2 + 8) = v7;
    *(void *)(a2 + 16) = v8;
    *(unsigned char *)(a2 + 24) = v9;
    *(void *)(a2 + 32) = v3;
    *(void *)(a2 + 40) = v4;
    return (uint64_t *)outlined copy of ResolvedTableRowIDs.Storage(v8, v9);
  }
LABEL_9:
  __break(1u);
  return result;
}

void protocol witness for Collection.indices.getter in conformance ResolvedTableRowIDs(void *a1@<X8>)
{
  uint64_t v2 = *(void *)(v1 + 16);
  uint64_t v3 = *(void *)(v1 + 24);
  BOOL v4 = __OFADD__(v2, v3);
  uint64_t v5 = v2 + v3;
  if (v4)
  {
    __break(1u);
  }
  else if (v5 >= v2)
  {
    *a1 = v2;
    a1[1] = v5;
    return;
  }
  __break(1u);
}

BOOL protocol witness for Collection.isEmpty.getter in conformance ResolvedTableRowIDs()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = *(void *)(v0 + 24);
  BOOL v3 = __OFADD__(v1, v2);
  uint64_t v4 = v1 + v2;
  if (!v3) {
    return v1 == v4;
  }
  __break(1u);
  return result;
}

void *protocol witness for RandomAccessCollection.index(_:offsetBy:) in conformance ResolvedTableRowIDs@<X0>(void *result@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v4 = *result + a2;
  if (__OFADD__(*result, a2))
  {
    __break(1u);
    goto LABEL_9;
  }
  uint64_t v5 = *(void *)(v3 + 16);
  uint64_t v6 = *(void *)(v3 + 24);
  BOOL v7 = __OFADD__(v5, v6);
  uint64_t v8 = v5 + v6;
  if (v7)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  if (v4 >= v5 && v8 >= v4)
  {
    *a3 = v4;
    return result;
  }
LABEL_10:
  __break(1u);
  return result;
}

uint64_t protocol witness for RandomAccessCollection.index(_:offsetBy:limitedBy:) in conformance ResolvedTableRowIDs@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t result = specialized RandomAccessCollection.index(_:offsetBy:limitedBy:)(*a1, a2, *a3, *(void *)(v4 + 16), *(void *)(v4 + 24));
  *(void *)a4 = result;
  *(unsigned char *)(a4 + 8) = v7 & 1;
  return result;
}

uint64_t *protocol witness for RandomAccessCollection.distance(from:to:) in conformance ResolvedTableRowIDs(uint64_t *result, uint64_t *a2)
{
  uint64_t v3 = *(void *)(v2 + 16);
  uint64_t v4 = *(void *)(v2 + 24);
  BOOL v5 = __OFADD__(v3, v4);
  uint64_t v6 = v3 + v4;
  if (v5)
  {
    __break(1u);
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  uint64_t v7 = *result;
  uint64_t v8 = *a2;
  if (v6 < *a2 || v8 < v3 || v7 < v3 || v6 < v7) {
    goto LABEL_15;
  }
  uint64_t result = (uint64_t *)(v8 - v7);
  if (__OFSUB__(v8, v7)) {
LABEL_16:
  }
    __break(1u);
  return result;
}

__n128 protocol witness for Sequence.makeIterator() in conformance ResolvedTableRowIDs@<Q0>(__n128 *a1@<X8>)
{
  unsigned __int8 v2 = v1->n128_u8[8];
  a1->n128_u64[0] = v1->n128_u64[0];
  a1->n128_u8[8] = v2;
  __n128 result = v1[1];
  a1[1] = result;
  a1[2].n128_u64[0] = result.n128_u64[0];
  return result;
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance ResolvedTableRowIDs()
{
  uint64_t v1 = (uint64_t)*v0;
  char v2 = *((unsigned char *)v0 + 8);
  uint64_t v3 = specialized _copyCollectionToContiguousArray<A>(_:)(*v0, v2, (uint64_t)v0[2], (uint64_t)v0[3]);
  outlined consume of Environment<[SceneID : KeyboardShortcut]>.Content(v1, v2);
  return v3;
}

uint64_t protocol witness for Sequence._copyContents(initializing:) in conformance ResolvedTableRowIDs(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return specialized Sequence._copySequenceContents(initializing:)(a1, a2, a3, *(void **)v3, *(unsigned char *)(v3 + 8), *(void *)(v3 + 16), *(void *)(v3 + 24));
}

uint64_t specialized ResolvedTableRowIDs.init(rowList:start:limit:)(void *a1, uint64_t a2, uint64_t a3)
{
  if (a3 != 0x7FFFFFFFFFFFFFFFLL) {
    goto LABEL_5;
  }
  MEMORY[0x1F4188790](a1);
  static Update.ensure<A>(_:)();
  uint64_t v5 = *(void *)&v16[0] - a2;
  if (__OFSUB__(*(void *)&v16[0], a2))
  {
    __break(1u);
LABEL_5:
    uint64_t v5 = a3;
  }
  uint64_t v6 = a1[3];
  uint64_t v7 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v6);
  uint64_t v8 = (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 24))(v6, v7);
  if (v8)
  {
    outlined destroy of TableRowList((uint64_t)a1);
    return v8;
  }
  uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5 & ~(v5 >> 63), 0, MEMORY[0x1E4FBC860]);
  uint64_t v11 = a2 + v5;
  if (!__OFADD__(a2, v5))
  {
    if (v11 < a2) {
      goto LABEL_22;
    }
    char v9 = (char *)result;
    if (v11 == a2)
    {
LABEL_12:
      outlined destroy of TableRowList((uint64_t)a1);
      return (uint64_t)v9;
    }
    uint64_t v12 = v5;
    while (a2 < v11)
    {
      uint64_t v17 = 0;
      memset(v16, 0, sizeof(v16));
      char v18 = -1;
      MEMORY[0x1F4188790](result);
      static Update.ensure<A>(_:)();
      uint64_t result = outlined init with copy of TableRowID?((uint64_t)v16, (uint64_t)v15);
      if (v15[40] == 255) {
        goto LABEL_23;
      }
      unint64_t v14 = *((void *)v9 + 2);
      unint64_t v13 = *((void *)v9 + 3);
      if (v14 >= v13 >> 1) {
        char v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v13 > 1), v14 + 1, 1, v9);
      }
      *((void *)v9 + 2) = v14 + 1;
      outlined init with take of TableRowID((uint64_t)v15, (uint64_t)&v9[48 * v14 + 32]);
      uint64_t result = outlined destroy of ResolvedTableRowIDs.RowIDVisitor((uint64_t)v16);
      ++a2;
      if (!--v12) {
        goto LABEL_12;
      }
    }
    __break(1u);
  }
  __break(1u);
LABEL_22:
  __break(1u);
LABEL_23:
  __break(1u);
  return result;
}

uint64_t partial apply for closure #1 in ResolvedTableRowIDs.init(rowList:start:limit:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v3 = *(void **)(v1 + 16);
  uint64_t v4 = v3[3];
  uint64_t v5 = v3[4];
  __swift_project_boxed_opaque_existential_1(v3, v4);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 16))(v4, v5);
  *a1 = result;
  return result;
}

uint64_t outlined init with copy of TableRowID?(uint64_t a1, uint64_t a2)
{
  type metadata accessor for AccessibilityValueStorage?(0, &lazy cache variable for type metadata for TableRowID?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of ResolvedTableRowIDs.RowIDVisitor(uint64_t a1)
{
  int v2 = *(unsigned __int8 *)(a1 + 40);
  if (v2 != 255 && (v2 & 1) != 0) {
    __swift_destroy_boxed_opaque_existential_1(a1);
  }
  return a1;
}

uint64_t destroy for ResolvedTableRowIDs.RowIDVisitor(uint64_t a1)
{
  int v1 = *(unsigned __int8 *)(a1 + 40);
  if (v1 != 255 && (v1 & 1) != 0) {
    return __swift_destroy_boxed_opaque_existential_1(a1);
  }
  return a1;
}

uint64_t initializeWithCopy for ResolvedTableRowIDs.RowIDVisitor(uint64_t a1, uint64_t a2)
{
  int v3 = *(unsigned __int8 *)(a2 + 40);
  if (v3 != 255 && (v3 & 1) != 0)
  {
    long long v5 = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 24) = v5;
    (**(void (***)(uint64_t))(v5 - 8))(a1);
    *(unsigned char *)(a1 + 40) = 1;
  }
  else
  {
    long long v4 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v4;
    *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
  }
  return a1;
}

uint64_t assignWithCopy for ResolvedTableRowIDs.RowIDVisitor(uint64_t a1, long long *a2)
{
  int v4 = *((unsigned __int8 *)a2 + 40);
  if (*(unsigned __int8 *)(a1 + 40) == 255)
  {
    if (v4 == 255 || (v4 & 1) == 0) {
      goto LABEL_9;
    }
    goto LABEL_6;
  }
  if (v4 != 255)
  {
    if ((long long *)a1 == a2) {
      return a1;
    }
    outlined destroy of TableRowID(a1);
    if (*((unsigned char *)a2 + 40) != 1)
    {
LABEL_9:
      long long v8 = *a2;
      long long v9 = a2[1];
      *(_OWORD *)(a1 + 25) = *(long long *)((char *)a2 + 25);
      *(_OWORD *)a1 = v8;
      *(_OWORD *)(a1 + 16) = v9;
      return a1;
    }
LABEL_6:
    uint64_t v7 = *((void *)a2 + 3);
    *(void *)(a1 + 24) = v7;
    *(void *)(a1 + 32) = *((void *)a2 + 4);
    (**(void (***)(uint64_t, long long *))(v7 - 8))(a1, a2);
    *(unsigned char *)(a1 + 40) = 1;
    return a1;
  }
  outlined destroy of TableRowID(a1);
  long long v5 = *(long long *)((char *)a2 + 25);
  long long v6 = a2[1];
  *(_OWORD *)a1 = *a2;
  *(_OWORD *)(a1 + 16) = v6;
  *(_OWORD *)(a1 + 25) = v5;
  return a1;
}

uint64_t assignWithTake for ResolvedTableRowIDs.RowIDVisitor(uint64_t a1, uint64_t a2)
{
  if (*(unsigned __int8 *)(a1 + 40) == 255) {
    goto LABEL_7;
  }
  if (*(unsigned __int8 *)(a2 + 40) == 255 || a1 != a2)
  {
    outlined destroy of TableRowID(a1);
LABEL_7:
    long long v5 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v5;
    *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for ResolvedTableRowIDs.RowIDVisitor(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFE && *(unsigned char *)(a1 + 41)) {
    return (*(_DWORD *)a1 + 254);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 40);
  if (v3 <= 1) {
    int v4 = -1;
  }
  else {
    int v4 = (v3 ^ 0xFF) - 1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ResolvedTableRowIDs.RowIDVisitor(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 40) = 0;
    *(void *)uint64_t result = a2 - 254;
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 41) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 41) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 40) = ~(_BYTE)a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ResolvedTableRowIDs.RowIDVisitor()
{
  return &type metadata for ResolvedTableRowIDs.RowIDVisitor;
}

uint64_t associated type witness table accessor for Collection.SubSequence : BidirectionalCollection in ResolvedTableRowIDs()
{
  return lazy protocol witness table accessor for type Slice<ResolvedTableRowIDs> and conformance <> Slice<A>(&lazy protocol witness table cache variable for type Slice<ResolvedTableRowIDs> and conformance <> Slice<A>, (void (*)(void))lazy protocol witness table accessor for type ResolvedTableRowIDs and conformance ResolvedTableRowIDs);
}

uint64_t associated type witness table accessor for Collection.SubSequence : Collection in ResolvedTableRowIDs()
{
  return lazy protocol witness table accessor for type Slice<ResolvedTableRowIDs> and conformance Slice<A>(&lazy protocol witness table cache variable for type Slice<ResolvedTableRowIDs> and conformance Slice<A>, &lazy cache variable for type metadata for Slice<ResolvedTableRowIDs>, MEMORY[0x1E4FBC320]);
}

uint64_t associated type witness table accessor for Sequence.Iterator : IteratorProtocol in ResolvedTableRowIDs()
{
  return lazy protocol witness table accessor for type Slice<ResolvedTableRowIDs> and conformance Slice<A>(&lazy protocol witness table cache variable for type IndexingIterator<ResolvedTableRowIDs> and conformance IndexingIterator<A>, &lazy cache variable for type metadata for IndexingIterator<ResolvedTableRowIDs>, MEMORY[0x1E4FBBC18]);
}

uint64_t lazy protocol witness table accessor for type Slice<ResolvedTableRowIDs> and conformance Slice<A>(unint64_t *a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, unint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for Slice<ResolvedTableRowIDs>(255, a2, a3);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void type metadata accessor for Slice<ResolvedTableRowIDs>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, unint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = lazy protocol witness table accessor for type ResolvedTableRowIDs and conformance ResolvedTableRowIDs();
    unint64_t v7 = a3(a1, &type metadata for ResolvedTableRowIDs, v6);
    if (!v8) {
      atomic_store(v7, a2);
    }
  }
}

uint64_t specialized ResolvedTableRowIDs.RowIDVisitor.visit<A, B>(rowValue:view:children:traits:)(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v21 = a1;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v20 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v8 = (char *)&v20 - v7;
  uint64_t v9 = type metadata accessor for Optional();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9);
  uint64_t v12 = (char *)&v20 - v11;
  uint64_t v13 = *(void *)(a4 - 8);
  double v15 = MEMORY[0x1F4188790](v14);
  uint64_t v17 = (char *)&v20 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = *a3;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v10 + 16))(v12, v21, v9, v15);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v12, 1, a4) == 1)
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
    uint64_t v25 = v18;
    uint64_t v23 = 0;
    char v24 = 1;
    ViewTraitCollection.value<A>(for:defaultValue:)();
    uint64_t v23 = v26;
    char v24 = v27;
    type metadata accessor for AccessibilityValueStorage?(0, &lazy cache variable for type metadata for ViewOnlyTableRowID?);
    lazy protocol witness table accessor for type ViewOnlyTableRowID? and conformance <A> A?();
    AnyHashable.init<A>(_:)();
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v17, v12, a4);
    dispatch thunk of Identifiable.id.getter();
    swift_getAssociatedConformanceWitness();
    _convertToAnyHashable<A>(_:)();
    (*(void (**)(char *, uint64_t))(v20 + 8))(v8, AssociatedTypeWitness);
    (*(void (**)(char *, uint64_t))(v13 + 8))(v17, a4);
  }
  char v28 = 1;
  outlined assign with take of TableRowID?((uint64_t)&v26, v22);
  return 0;
}

unint64_t lazy protocol witness table accessor for type ViewOnlyTableRowID? and conformance <A> A?()
{
  unint64_t result = lazy protocol witness table cache variable for type ViewOnlyTableRowID? and conformance <A> A?;
  if (!lazy protocol witness table cache variable for type ViewOnlyTableRowID? and conformance <A> A?)
  {
    type metadata accessor for AccessibilityValueStorage?(255, &lazy cache variable for type metadata for ViewOnlyTableRowID?);
    lazy protocol witness table accessor for type ViewOnlyTableRowID and conformance ViewOnlyTableRowID();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ViewOnlyTableRowID? and conformance <A> A?);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ViewOnlyTableRowID and conformance ViewOnlyTableRowID()
{
  unint64_t result = lazy protocol witness table cache variable for type ViewOnlyTableRowID and conformance ViewOnlyTableRowID;
  if (!lazy protocol witness table cache variable for type ViewOnlyTableRowID and conformance ViewOnlyTableRowID)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ViewOnlyTableRowID and conformance ViewOnlyTableRowID);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ViewOnlyTableRowID and conformance ViewOnlyTableRowID;
  if (!lazy protocol witness table cache variable for type ViewOnlyTableRowID and conformance ViewOnlyTableRowID)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ViewOnlyTableRowID and conformance ViewOnlyTableRowID);
  }
  return result;
}

uint64_t outlined assign with take of TableRowID?(uint64_t a1, uint64_t a2)
{
  type metadata accessor for AccessibilityValueStorage?(0, &lazy cache variable for type metadata for TableRowID?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t initializeWithCopy for ResolvedTableRowIDs(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  char v5 = *(unsigned char *)(a2 + 8);
  outlined copy of ResolvedTableRowIDs.Storage(*(void *)a2, v5);
  *(void *)a1 = v4;
  *(unsigned char *)(a1 + 8) = v5;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  return a1;
}

uint64_t assignWithCopy for ResolvedTableRowIDs(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  char v5 = *(unsigned char *)(a2 + 8);
  outlined copy of ResolvedTableRowIDs.Storage(*(void *)a2, v5);
  uint64_t v6 = *(void *)a1;
  char v7 = *(unsigned char *)(a1 + 8);
  *(void *)a1 = v4;
  *(unsigned char *)(a1 + 8) = v5;
  outlined consume of Environment<[SceneID : KeyboardShortcut]>.Content(v6, v7);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  return a1;
}

uint64_t assignWithTake for ResolvedTableRowIDs(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  char v5 = *((unsigned char *)a2 + 8);
  uint64_t v6 = *(void *)a1;
  char v7 = *(unsigned char *)(a1 + 8);
  *(void *)a1 = v4;
  *(unsigned char *)(a1 + 8) = v5;
  outlined consume of Environment<[SceneID : KeyboardShortcut]>.Content(v6, v7);
  *(_OWORD *)(a1 + 16) = *((_OWORD *)a2 + 1);
  return a1;
}

uint64_t getEnumTagSinglePayload for ResolvedTableRowIDs(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 32)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 8);
  if (v3 <= 1) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ResolvedTableRowIDs(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)unint64_t result = a2 - 255;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 32) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 32) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 8) = -(char)a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ResolvedTableRowIDs()
{
  return &type metadata for ResolvedTableRowIDs;
}

uint64_t initializeBufferWithCopyOfBuffer for ResolvedTableRowIDs.Storage(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  char v4 = *(unsigned char *)(a2 + 8);
  outlined copy of ResolvedTableRowIDs.Storage(*(void *)a2, v4);
  *(void *)a1 = v3;
  *(unsigned char *)(a1 + 8) = v4;
  return a1;
}

uint64_t destroy for ResolvedTableRowIDs.Storage(uint64_t a1)
{
  return outlined consume of Environment<[SceneID : KeyboardShortcut]>.Content(*(void *)a1, *(unsigned char *)(a1 + 8));
}

uint64_t assignWithCopy for ResolvedTableRowIDs.Storage(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  char v4 = *(unsigned char *)(a2 + 8);
  outlined copy of ResolvedTableRowIDs.Storage(*(void *)a2, v4);
  uint64_t v5 = *(void *)a1;
  char v6 = *(unsigned char *)(a1 + 8);
  *(void *)a1 = v3;
  *(unsigned char *)(a1 + 8) = v4;
  outlined consume of Environment<[SceneID : KeyboardShortcut]>.Content(v5, v6);
  return a1;
}

uint64_t assignWithTake for ResolvedTableRowIDs.Storage(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  char v4 = *((unsigned char *)a2 + 8);
  uint64_t v5 = *(void *)a1;
  char v6 = *(unsigned char *)(a1 + 8);
  *(void *)a1 = v3;
  *(unsigned char *)(a1 + 8) = v4;
  outlined consume of Environment<[SceneID : KeyboardShortcut]>.Content(v5, v6);
  return a1;
}

ValueMetadata *type metadata accessor for ResolvedTableRowIDs.Storage()
{
  return &type metadata for ResolvedTableRowIDs.Storage;
}

uint64_t associated type witness table accessor for Collection.SubSequence : RandomAccessCollection in ResolvedTableRowIDs()
{
  return lazy protocol witness table accessor for type Slice<ResolvedTableRowIDs> and conformance <> Slice<A>(&lazy protocol witness table cache variable for type Slice<ResolvedTableRowIDs> and conformance <> Slice<A>, (void (*)(void))lazy protocol witness table accessor for type ResolvedTableRowIDs and conformance ResolvedTableRowIDs);
}

uint64_t lazy protocol witness table accessor for type Slice<ResolvedTableRowIDs> and conformance <> Slice<A>(unint64_t *a1, void (*a2)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for Slice<ResolvedTableRowIDs>(255, &lazy cache variable for type metadata for Slice<ResolvedTableRowIDs>, MEMORY[0x1E4FBC320]);
    a2();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t type metadata completion function for ViewDestinationNavigationDestinationModifier()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for ViewDestinationNavigationDestinationModifier(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(_DWORD *)(v5 + 80);
  uint64_t v7 = *(void *)(v5 + 64) + 7;
  int v8 = *(_DWORD *)(v5 + 80) & 0x100000;
  uint64_t v9 = *a2;
  *(void *)a1 = *a2;
  if (v6 > 7 || v8 != 0 || ((v7 + ((v6 + 17) & ~v6)) & 0xFFFFFFFFFFFFFFF8) + 8 > 0x18)
  {
    a1 = v9 + ((v6 & 0xF8 ^ 0x1F8) & (v6 + 16));
    swift_retain();
  }
  else
  {
    *(void *)(a1 + 8) = a2[1];
    *(unsigned char *)(a1 + 16) = *((unsigned char *)a2 + 16);
    uint64_t v12 = (a1 + v6 + 17) & ~v6;
    uint64_t v13 = ((unint64_t)a2 + v6 + 17) & ~v6;
    uint64_t v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
    swift_retain();
    swift_retain();
    v14(v12, v13, v4);
    *(void *)((v7 + v12) & 0xFFFFFFFFFFFFFFF8) = *(void *)((v7 + v13) & 0xFFFFFFFFFFFFFFF8);
  }
  return a1;
}

uint64_t initializeWithCopy for ViewDestinationNavigationDestinationModifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);
  uint64_t v7 = *(void *)(v5 - 8) + 16;
  uint64_t v8 = *(unsigned __int8 *)(*(void *)(v5 - 8) + 80);
  uint64_t v9 = (v8 + 17 + a1) & ~v8;
  uint64_t v10 = (v8 + 17 + a2) & ~v8;
  swift_retain();
  swift_retain();
  v6(v9, v10, v5);
  *(void *)((*(void *)(v7 + 48) + 7 + v9) & 0xFFFFFFFFFFFFFFF8) = *(void *)((*(void *)(v7 + 48) + 7 + v10) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

uint64_t assignWithCopy for ViewDestinationNavigationDestinationModifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  swift_retain();
  swift_release();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_retain();
  swift_release();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v7 = v6 + 24;
  uint64_t v8 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v9 = (v8 + 17 + a1) & ~v8;
  uint64_t v10 = (v8 + 17 + a2) & ~v8;
  (*(void (**)(uint64_t, uint64_t))(v6 + 24))(v9, v10);
  *(void *)((*(void *)(v7 + 40) + 7 + v9) & 0xFFFFFFFFFFFFFFF8) = *(void *)((*(void *)(v7 + 40) + 7 + v10) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

uint64_t assignWithTake for ViewDestinationNavigationDestinationModifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  swift_release();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_release();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v7 = v6 + 40;
  uint64_t v8 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v9 = (v8 + 17 + a1) & ~v8;
  uint64_t v10 = (v8 + 17 + a2) & ~v8;
  (*(void (**)(uint64_t, uint64_t))(v6 + 40))(v9, v10);
  *(void *)((*(void *)(v7 + 24) + 7 + v9) & 0xFFFFFFFFFFFFFFF8) = *(void *)((*(void *)(v7 + 24) + 7 + v10) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

uint64_t getEnumTagSinglePayload for ViewDestinationNavigationDestinationModifier(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  if (v5 <= 0x7FFFFFFF) {
    unsigned int v7 = 0x7FFFFFFF;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  if (v7 < a2)
  {
    unint64_t v8 = ((*(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) + ((v6 + 17) & ~v6) + 7) & 0xFFFFFFFFFFFFFFF8)
       + 8;
    unsigned int v9 = a2 - v7;
    uint64_t v10 = v8 & 0xFFFFFFF8;
    if ((v8 & 0xFFFFFFF8) != 0) {
      unsigned int v11 = 2;
    }
    else {
      unsigned int v11 = v9 + 1;
    }
    if (v11 >= 0x10000) {
      unsigned int v12 = 4;
    }
    else {
      unsigned int v12 = 2;
    }
    if (v11 < 0x100) {
      unsigned int v12 = 1;
    }
    if (v11 >= 2) {
      uint64_t v13 = v12;
    }
    else {
      uint64_t v13 = 0;
    }
    switch(v13)
    {
      case 1:
        int v14 = *(unsigned __int8 *)(a1 + v8);
        if (!v14) {
          break;
        }
        goto LABEL_22;
      case 2:
        int v14 = *(unsigned __int16 *)(a1 + v8);
        if (v14) {
          goto LABEL_22;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x1882B83FCLL);
      case 4:
        int v14 = *(_DWORD *)(a1 + v8);
        if (!v14) {
          break;
        }
LABEL_22:
        int v16 = v14 - 1;
        if (v10)
        {
          int v16 = 0;
          LODWORD(v10) = *(_DWORD *)a1;
        }
        return v7 + (v10 | v16) + 1;
      default:
        break;
    }
  }
  if ((v5 & 0x80000000) != 0) {
    return (*(uint64_t (**)(uint64_t))(v4 + 48))((a1 + v6 + 17) & ~v6);
  }
  unint64_t v17 = *(void *)(a1 + 8);
  if (v17 >= 0xFFFFFFFF) {
    LODWORD(v17) = -1;
  }
  return (v17 + 1);
}

void storeEnumTagSinglePayload for ViewDestinationNavigationDestinationModifier(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(unsigned __int8 *)(v6 + 80);
  size_t v10 = ((*(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64) + ((v9 + 17) & ~v9) + 7) & 0xFFFFFFFFFFFFFFF8)
      + 8;
  if (v8 >= a3)
  {
    int v14 = 0;
    int v15 = a2 - v8;
    if (a2 <= v8)
    {
LABEL_17:
      switch(v14)
      {
        case 1:
          a1[v10] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_30;
        case 2:
          *(_WORD *)&a1[v10] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_30;
        case 3:
          goto LABEL_42;
        case 4:
          *(_DWORD *)&a1[v10] = 0;
          goto LABEL_29;
        default:
LABEL_29:
          if (a2)
          {
LABEL_30:
            if ((v7 & 0x80000000) != 0)
            {
              unint64_t v18 = (unint64_t)&a1[v9 + 17] & ~v9;
              unint64_t v19 = *(void (**)(unint64_t))(v6 + 56);
              v19(v18);
            }
            else if ((a2 & 0x80000000) != 0)
            {
              a1[16] = 0;
              *(void *)a1 = a2 ^ 0x80000000;
              *((void *)a1 + 1) = 0;
            }
            else
            {
              *((void *)a1 + 1) = a2 - 1;
            }
          }
          break;
      }
      return;
    }
  }
  else
  {
    unsigned int v11 = a3 - v8;
    if (((*(_DWORD *)(*(void *)(*(void *)(a4 + 16) - 8) + 64) + ((v9 + 17) & ~v9) + 7) & 0xFFFFFFF8) == 0xFFFFFFF8) {
      unsigned int v12 = v11 + 1;
    }
    else {
      unsigned int v12 = 2;
    }
    if (v12 >= 0x10000) {
      int v13 = 4;
    }
    else {
      int v13 = 2;
    }
    if (v12 < 0x100) {
      int v13 = 1;
    }
    if (v12 >= 2) {
      int v14 = v13;
    }
    else {
      int v14 = 0;
    }
    int v15 = a2 - v8;
    if (a2 <= v8) {
      goto LABEL_17;
    }
  }
  if (((*(_DWORD *)(*(void *)(*(void *)(a4 + 16) - 8) + 64) + ((v9 + 17) & ~v9) + 7) & 0xFFFFFFF8) == 0xFFFFFFF8) {
    int v16 = v15;
  }
  else {
    int v16 = 1;
  }
  if (((*(_DWORD *)(*(void *)(*(void *)(a4 + 16) - 8) + 64) + ((v9 + 17) & ~v9) + 7) & 0xFFFFFFF8) != 0xFFFFFFF8)
  {
    int v17 = ~v8 + a2;
    bzero(a1, v10);
    *(_DWORD *)a1 = v17;
  }
  switch(v14)
  {
    case 1:
      a1[v10] = v16;
      break;
    case 2:
      *(_WORD *)&a1[v10] = v16;
      break;
    case 3:
LABEL_42:
      __break(1u);
      JUMPOUT(0x1882B8608);
    case 4:
      *(_DWORD *)&a1[v10] = v16;
      break;
    default:
      return;
  }
}

uint64_t type metadata accessor for ViewDestinationNavigationDestinationModifier()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t associated type witness table accessor for ViewModifier.Body : View in ViewDestinationNavigationDestinationModifier<A>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t ViewDestinationNavigationDestinationModifier.init(isPresented:destination:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  *(void *)a6 = a1;
  *(void *)(a6 + 8) = a2;
  *(unsigned char *)(a6 + 16) = a3;
  uint64_t v9 = type metadata accessor for ViewDestinationNavigationDestinationModifier();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a5 - 8) + 32))(a6 + *(int *)(v9 + 36), a4, a5);
  *(void *)(a6 + *(int *)(v9 + 40)) = 0;
  return result;
}

uint64_t ViewDestinationNavigationDestinationModifier.body(content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v34 = a3;
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](a1);
  unsigned int v8 = (char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v28 = v8;
  uint64_t v9 = type metadata accessor for BaseModifier();
  uint64_t v33 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9);
  unsigned int v11 = (char *)&v27 - v10;
  swift_getWitnessTable();
  uint64_t v30 = type metadata accessor for _ViewModifier_Content();
  uint64_t v12 = type metadata accessor for ModifiedContent();
  uint64_t v32 = *(void *)(v12 - 8);
  MEMORY[0x1F4188790](v12);
  int v14 = (char *)&v27 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v16 = MEMORY[0x1F4188790](v15);
  uint64_t v31 = (char *)&v27 - v17;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v6 + 16))(v8, (uint64_t)v3 + *(int *)(a2 + 36), v5, v16);
  uint64_t v19 = *v3;
  uint64_t v18 = v3[1];
  int v29 = *((unsigned __int8 *)v3 + 16);
  swift_retain();
  swift_retain();
  uint64_t v20 = Namespace.wrappedValue.getter();
  (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v11, v28, v5);
  uint64_t v21 = &v11[*(int *)(v9 + 36)];
  *(void *)uint64_t v21 = v19;
  *((void *)v21 + 1) = v18;
  v21[16] = v29;
  *(void *)&v11[*(int *)(v9 + 40)] = v20;
  uint64_t v22 = v30;
  uint64_t WitnessTable = swift_getWitnessTable();
  MEMORY[0x18C113660](v11, v22, v9, WitnessTable);
  (*(void (**)(char *, uint64_t))(v33 + 8))(v11, v9);
  uint64_t v35 = WitnessTable;
  unint64_t v36 = &protocol witness table for BaseModifier<A>;
  swift_getWitnessTable();
  char v24 = v31;
  static ViewBuilder.buildExpression<A>(_:)(v14);
  uint64_t v25 = *(void (**)(char *, uint64_t))(v32 + 8);
  v25(v14, v12);
  static ViewBuilder.buildExpression<A>(_:)(v24);
  return ((uint64_t (*)(char *, uint64_t))v25)(v24, v12);
}

uint64_t getEnumTagSinglePayload for BaseModifier(_DWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (v5 <= 0x7FFFFFFF) {
    unsigned int v7 = 0x7FFFFFFF;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  if (v7 < a2)
  {
    unint64_t v8 = ((v6 + 31) & 0xFFFFFFFFFFFFFFF8) + 8;
    unsigned int v9 = a2 - v7;
    uint64_t v10 = v8 & 0xFFFFFFF8;
    if ((v8 & 0xFFFFFFF8) != 0) {
      unsigned int v11 = 2;
    }
    else {
      unsigned int v11 = v9 + 1;
    }
    if (v11 >= 0x10000) {
      unsigned int v12 = 4;
    }
    else {
      unsigned int v12 = 2;
    }
    if (v11 < 0x100) {
      unsigned int v12 = 1;
    }
    if (v11 >= 2) {
      uint64_t v13 = v12;
    }
    else {
      uint64_t v13 = 0;
    }
    switch(v13)
    {
      case 1:
        int v14 = *((unsigned __int8 *)a1 + v8);
        if (!v14) {
          break;
        }
        goto LABEL_22;
      case 2:
        int v14 = *(unsigned __int16 *)((char *)a1 + v8);
        if (v14) {
          goto LABEL_22;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x1882B8E38);
      case 4:
        int v14 = *(_DWORD *)((char *)a1 + v8);
        if (!v14) {
          break;
        }
LABEL_22:
        int v16 = v14 - 1;
        if (v10)
        {
          int v16 = 0;
          LODWORD(v10) = *a1;
        }
        return v7 + (v10 | v16) + 1;
      default:
        break;
    }
  }
  if (v5 >= 0x7FFFFFFF) {
    return (*(uint64_t (**)(void))(v4 + 48))();
  }
  unint64_t v17 = *(void *)((((unint64_t)a1 + v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 8);
  if (v17 >= 0xFFFFFFFF) {
    LODWORD(v17) = -1;
  }
  return (v17 + 1);
}

void storeEnumTagSinglePayload for BaseModifier(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  unint64_t v10 = ((v9 + 31) & 0xFFFFFFFFFFFFFFF8) + 8;
  if (((v9 + 31) & 0xFFFFFFF8) == 0xFFFFFFF8) {
    unsigned int v11 = a3 - v8 + 1;
  }
  else {
    unsigned int v11 = 2;
  }
  if (v11 >= 0x10000) {
    int v12 = 4;
  }
  else {
    int v12 = 2;
  }
  if (v11 < 0x100) {
    int v12 = 1;
  }
  if (v11 >= 2) {
    unsigned int v13 = v12;
  }
  else {
    unsigned int v13 = 0;
  }
  if (v8 < a3) {
    uint64_t v14 = v13;
  }
  else {
    uint64_t v14 = 0;
  }
  if (a2 > v8)
  {
    if (((v9 + 31) & 0xFFFFFFF8) == 0xFFFFFFF8) {
      int v15 = a2 - v8;
    }
    else {
      int v15 = 1;
    }
    if (((v9 + 31) & 0xFFFFFFF8) != 0xFFFFFFF8)
    {
      int v16 = ~v8 + a2;
      bzero(a1, ((v9 + 31) & 0xFFFFFFFFFFFFFFF8) + 8);
      *(_DWORD *)a1 = v16;
    }
    switch(v14)
    {
      case 1:
        a1[v10] = v15;
        return;
      case 2:
        *(_WORD *)&a1[v10] = v15;
        return;
      case 3:
        goto LABEL_43;
      case 4:
        *(_DWORD *)&a1[v10] = v15;
        return;
      default:
        return;
    }
  }
  switch(v14)
  {
    case 1:
      a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_33;
    case 2:
      *(_WORD *)&a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_33;
    case 3:
LABEL_43:
      __break(1u);
      JUMPOUT(0x1882B9030);
    case 4:
      *(_DWORD *)&a1[v10] = 0;
      goto LABEL_32;
    default:
LABEL_32:
      if (a2)
      {
LABEL_33:
        if (v7 < 0x7FFFFFFF)
        {
          unint64_t v18 = (unint64_t)&a1[v9 + 7] & 0xFFFFFFFFFFFFFFF8;
          if ((a2 & 0x80000000) != 0)
          {
            *(unsigned char *)(v18 + 16) = 0;
            *(void *)unint64_t v18 = a2 ^ 0x80000000;
            *(void *)(v18 + 8) = 0;
          }
          else
          {
            *(void *)(v18 + 8) = a2 - 1;
          }
        }
        else
        {
          unint64_t v17 = *(void (**)(void))(v6 + 56);
          v17();
        }
      }
      return;
  }
}

uint64_t sub_1882B9058()
{
  return swift_getWitnessTable();
}

uint64_t static BaseModifier._makeView(modifier:inputs:body:)(uint64_t a1, uint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t *))
{
  uint64_t v47 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *a2;
  uint64_t v4 = a2[2];
  int v24 = *((_DWORD *)a2 + 2);
  uint64_t v25 = a2[3];
  uint64_t v26 = a2[4];
  uint64_t v5 = a2[5];
  uint64_t v6 = a2[6];
  int v7 = *((_DWORD *)a2 + 14);
  int v27 = *((_DWORD *)a2 + 15);
  int v8 = *((_DWORD *)a2 + 16);
  int v9 = *((_DWORD *)a2 + 18);
  int v28 = *((_DWORD *)a2 + 17);
  int v29 = *((_DWORD *)a2 + 19);
  int v30 = *((_DWORD *)a2 + 20);
  lazy protocol witness table accessor for type IsInNavigationV4Context and conformance IsInNavigationV4Context();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  PropertyList.subscript.getter();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  if (v32 == 1)
  {
    int v23 = v9;
    lazy protocol witness table accessor for type IsInLazyContainer and conformance IsInLazyContainer();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    PropertyList.subscript.getter();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    _StringGuts.grow(_:)(438);
    v10._object = (void *)0x8000000188345530;
    v10._uint64_t countAndFlagsBits = 0x100000000000018ALL;
    String.append(_:)(v10);
    swift_getMetatypeMetadata();
    v11._uint64_t countAndFlagsBits = String.init<A>(describing:)();
    String.append(_:)(v11);
    swift_bridgeObjectRelease();
    v12._uint64_t countAndFlagsBits = 0xD00000000000002ALL;
    v12._object = (void *)0x8000000188334190;
    String.append(_:)(v12);
    MEMORY[0x18C112B90](0, 0xE000000000000000);
    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type NavigationAuthority.StackKeyViewInputKey and conformance NavigationAuthority.StackKeyViewInputKey();
    swift_retain_n();
    swift_retain_n();
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    PropertyList.subscript.getter();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    swift_release_n();
    swift_release_n();
    lazy protocol witness table accessor for type NavigationAuthority.ListKeyViewInputKey and conformance NavigationAuthority.ListKeyViewInputKey();
    swift_retain_n();
    swift_retain_n();
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    PropertyList.subscript.getter();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    swift_release_n();
    swift_release_n();
    lazy protocol witness table accessor for type NavigationAuthority.DepthKey and conformance NavigationAuthority.DepthKey();
    swift_retain_n();
    swift_retain_n();
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    PropertyList.subscript.getter();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    swift_release_n();
    uint64_t v13 = swift_release_n();
    MEMORY[0x1F4188790](v13);
    type metadata accessor for BaseModifier();
    type metadata accessor for _GraphValue();
    _GraphValue.subscript.getter();
    type metadata accessor for _GraphValue();
    uint64_t v14 = _GraphValue.value.getter();
    MEMORY[0x1F4188790](v14);
    _s7SwiftUI7BindingVySbGMaTm_11(0, (unint64_t *)&lazy cache variable for type metadata for Binding<Bool>, MEMORY[0x1E4FBB390], MEMORY[0x1E4F41638]);
    _GraphValue.subscript.getter();
    type metadata accessor for _GraphValue<Binding<Bool>>();
    uint64_t v15 = _GraphValue.value.getter();
    MEMORY[0x1F4188790](v15);
    uint64_t v16 = MEMORY[0x1E4F41808];
    _GraphValue.subscript.getter();
    _s7SwiftUI7BindingVySbGMaTm_11(0, &lazy cache variable for type metadata for _GraphValue<Namespace.ID>, v16, MEMORY[0x1E4F3F590]);
    int v17 = _GraphValue.value.getter();
    lazy protocol witness table accessor for type NavigationAuthority.ViewInputKey and conformance NavigationAuthority.ViewInputKey();
    swift_retain_n();
    swift_retain_n();
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    PropertyList.subscript.getter();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    lazy protocol witness table accessor for type NavigationAuthority.SeedInputs and conformance NavigationAuthority.SeedInputs();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    PropertyList.subscript.getter();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    lazy protocol witness table accessor for type IsExtractingNavigationDestinations and conformance IsExtractingNavigationDestinations();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    PropertyList.subscript.getter();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_release_n();
    swift_release_n();
    _s7SwiftUI7BindingVySbGMaTm_11(0, (unint64_t *)&lazy cache variable for type metadata for External<Bool>, MEMORY[0x1E4FBB390], MEMORY[0x1E4F4E778]);
    lazy protocol witness table accessor for type External<Bool> and conformance External<A>();
    Attribute.init<A>(body:value:flags:update:)();
    type metadata accessor for BaseModifier.Transform();
    int v34 = v17;
    type metadata accessor for BaseModifier.Child();
    swift_getWitnessTable();
    _GraphValue.init<A>(_:)();
    uint64_t v32 = v3;
    int v33 = v24;
    uint64_t v35 = v4;
    uint64_t v36 = v25;
    uint64_t v37 = v26;
    uint64_t v38 = v5;
    uint64_t v39 = v6;
    int v40 = v7;
    int v41 = v27;
    int v42 = v8;
    int v43 = v28;
    int v44 = v23;
    int v45 = v29;
    int v46 = v30;
    swift_getWitnessTable();
    return static ViewModifier.makeDebuggableView(modifier:inputs:body:)();
  }
  else
  {
    int v34 = -536870912;
    _StringGuts.grow(_:)(216);
    v19._uint64_t countAndFlagsBits = 0xD0000000000000C0;
    v19._object = (void *)0x8000000188345460;
    String.append(_:)(v19);
    swift_getMetatypeMetadata();
    v20._uint64_t countAndFlagsBits = String.init<A>(describing:)();
    String.append(_:)(v20);
    swift_bridgeObjectRelease();
    v21._object = (void *)0x8000000188328660;
    v21._uint64_t countAndFlagsBits = 0xD000000000000016;
    String.append(_:)(v21);
    MEMORY[0x18C112B90](0, 0xE000000000000000);
    uint64_t v22 = swift_bridgeObjectRelease();
    uint64_t v32 = v3;
    int v33 = v24;
    uint64_t v35 = v4;
    uint64_t v36 = v25;
    uint64_t v37 = v26;
    uint64_t v38 = v5;
    uint64_t v39 = v6;
    int v40 = v7;
    int v41 = v27;
    int v42 = v8;
    int v43 = v28;
    int v44 = v9;
    int v45 = v29;
    int v46 = v30;
    return a3(v22, &v32);
  }
}

uint64_t closure #1 in static BaseModifier._makeView(modifier:inputs:body:)(uint64_t a1, uint64_t a2)
{
  void v7[2] = type metadata accessor for BaseModifier();
  v7[3] = a2;
  uint64_t v4 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(a1, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply, (uint64_t)v7, a2, MEMORY[0x1E4FBC248], v4, MEMORY[0x1E4FBC278], v5);
  return v7[5];
}

uint64_t closure #3 in static BaseModifier._makeView(modifier:inputs:body:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for BaseModifier();
  uint64_t v3 = a1 + *(int *)(v2 + 40);
  uint64_t v8[2] = v2;
  uint64_t v4 = MEMORY[0x1E4F41808];
  uint64_t v5 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v3, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply, (uint64_t)v8, v4, MEMORY[0x1E4FBC248], v5, MEMORY[0x1E4FBC278], v6);
  return v8[5];
}

uint64_t BaseModifier.Child.isPresented.getter()
{
  _s7SwiftUI7BindingVySbGMaTm_11(0, (unint64_t *)&lazy cache variable for type metadata for Binding<Bool>, MEMORY[0x1E4FBB390], MEMORY[0x1E4F41638]);
  uint64_t v0 = *(void *)AGGraphGetValue();
  swift_retain();
  swift_retain();
  return v0;
}

uint64_t BaseModifier.Child.value.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v24 = a2;
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v5 = (char *)&v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t Value = AGGraphGetValue();
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, Value, v2);
  uint64_t v7 = BaseModifier.Child.isPresented.getter();
  uint64_t v22 = v8;
  uint64_t v23 = v7;
  HIDWORD(v21) = v9;
  uint64_t v10 = *(void *)AGGraphGetValue();
  uint64_t v11 = *(void *)AGGraphGetValue();
  uint64_t v12 = BaseModifier.Child.stackKey.getter();
  uint64_t v14 = v13;
  uint64_t v16 = v15;
  BaseModifier.Child.listKey.getter(v30);
  BaseModifier.Child.authority.getter((uint64_t)v27);
  _s7SwiftUI19NavigationAuthorityVSgWOcTm_4((uint64_t)v27, (uint64_t)v25, (uint64_t)&lazy cache variable for type metadata for NavigationAuthority??, (uint64_t)&lazy cache variable for type metadata for NavigationAuthority?, (uint64_t)&type metadata for NavigationAuthority, (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))_s7SwiftUI19NavigationAuthorityVSgSgMaTm_1);
  if (v26 == 2)
  {
    long long v28 = xmmword_18834BB90;
    uint64_t v29 = 0;
  }
  else
  {
    _s7SwiftUI19NavigationAuthorityVSgWObTm_3((uint64_t)v25, (uint64_t)&v28, (uint64_t)&lazy cache variable for type metadata for NavigationAuthority?, (uint64_t)&type metadata for NavigationAuthority, MEMORY[0x1E4FBB718], (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))_s7SwiftUI7BindingVySbGMaTm_11);
  }
  outlined destroy of NavigationAuthority??((uint64_t)v27);
  Weakuint64_t Value = (uint64_t *)AGGraphGetWeakValue();
  if (WeakValue) {
    uint64_t v18 = *WeakValue;
  }
  else {
    uint64_t v18 = -1;
  }
  Swift::String v19 = (char *)AGGraphGetValue();
  return BaseModifier.Transform.init(destination:isPresented:depth:id:stackKey:listKey:navigationAuthority:navigationStateSeeds:isExtracting:)((uint64_t)v5, v23, v22, BYTE4(v21) & 1, v10, v11, v12, v14, v24, v16, (uint64_t)v30, (uint64_t)&v28, v18, *v19, v2);
}

uint64_t BaseModifier.Transform.init(destination:isPresented:depth:id:stackKey:listKey:navigationAuthority:navigationStateSeeds:isExtracting:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15)
{
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a15 - 8) + 32))(a9, a1, a15);
  uint64_t v21 = (int *)type metadata accessor for BaseModifier.Transform();
  uint64_t v22 = a9 + v21[9];
  *(void *)uint64_t v22 = a2;
  *(void *)(v22 + 8) = a3;
  *(unsigned char *)(v22 + 16) = a4;
  *(void *)(a9 + v21[10]) = a5;
  *(void *)(a9 + v21[11]) = a6;
  uint64_t v23 = (void *)(a9 + v21[12]);
  *uint64_t v23 = a7;
  v23[1] = a8;
  _OWORD v23[2] = a10;
  _s7SwiftUI19NavigationAuthorityVSgWObTm_3(a11, a9 + v21[13], (uint64_t)&lazy cache variable for type metadata for NavigationState.ListKey??, (uint64_t)&lazy cache variable for type metadata for NavigationState.ListKey?, (uint64_t)&type metadata for NavigationState.ListKey, (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))_s7SwiftUI19NavigationAuthorityVSgSgMaTm_1);
  uint64_t result = _s7SwiftUI19NavigationAuthorityVSgWObTm_3(a12, a9 + v21[14], (uint64_t)&lazy cache variable for type metadata for NavigationAuthority?, (uint64_t)&type metadata for NavigationAuthority, MEMORY[0x1E4FBB718], (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))_s7SwiftUI7BindingVySbGMaTm_11);
  *(void *)(a9 + v21[15]) = a13;
  *(unsigned char *)(a9 + v21[16]) = a14;
  return result;
}

uint64_t protocol witness for static Rule.initialValue.getter in conformance BaseModifier<A>.Child@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for BaseModifier.Transform();
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56);

  return v3(a1, 1, 1, v2);
}

uint64_t protocol witness for Rule.value.getter in conformance BaseModifier<A>.Child@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return BaseModifier.Child.value.getter(a1, a2);
}

uint64_t BaseModifier.Transform.requestKey.getter@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = (uint64_t *)(v2 + *(int *)(result + 52));
  uint64_t v4 = v3[5];
  if ((unint64_t)(v4 - 1) >= 2)
  {
    uint64_t v10 = v3[4];
    long long v8 = *((_OWORD *)v3 + 1);
    uint64_t v6 = *v3;
    uint64_t v7 = *(void *)(v2 + *(int *)(result + 52) + 8);
    uint64_t v9 = v10 & 1 | 0x4000000000000000;
  }
  else
  {
    uint64_t v5 = (uint64_t *)(v2 + *(int *)(result + 48));
    if ((v5[1] & 0xFE) == 6)
    {
      uint64_t v6 = 0;
      uint64_t v7 = 0;
      uint64_t v4 = 0;
      long long v8 = 0uLL;
      uint64_t v9 = 0x1FFFFFFFELL;
    }
    else
    {
      uint64_t v9 = 0;
      uint64_t v4 = 0;
      uint64_t v6 = *v5;
      unint64_t v11 = v5[2];
      uint64_t v7 = v5[1];
      long long v8 = v11;
    }
  }
  *(void *)a2 = v6;
  *(void *)(a2 + 8) = v7;
  *(_OWORD *)(a2 + 16) = v8;
  *(void *)(a2 + 32) = v9;
  *(void *)(a2 + 40) = v4;
  return result;
}

uint64_t BaseModifier.Transform.body(content:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v29 = a2;
  swift_getWitnessTable();
  uint64_t v4 = type metadata accessor for _ViewModifier_Content();
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v27 = *(void *)(a1 + 24);
  type metadata accessor for UpdateViewDestinationViewModifier();
  type metadata accessor for UpdateViewDestinationRequestProcessor();
  uint64_t v28 = type metadata accessor for ModifiedContent();
  uint64_t v6 = type metadata accessor for ModifiedContent();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v9 = (char *)&v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v10);
  uint64_t v12 = (char *)&v22 - v11;
  uint64_t v13 = v2 + *(int *)(a1 + 36);
  uint64_t v14 = *(void *)v13;
  uint64_t v25 = *(void *)(v13 + 8);
  uint64_t v26 = v14;
  int v24 = *(unsigned __int8 *)(v13 + 16);
  BaseModifier.Transform.requestKey.getter(a1, (uint64_t)v34);
  uint64_t v15 = *(void *)(v2 + *(int *)(a1 + 44));
  uint64_t v22 = *(void *)(v2 + *(int *)(a1 + 40));
  uint64_t v23 = v15;
  uint64_t v16 = v2 + *(int *)(a1 + 56);
  unsigned __int8 v17 = *(unsigned char *)(v2 + *(int *)(a1 + 64));
  uint64_t WitnessTable = swift_getWitnessTable();
  View.updateViewDestinations<A>(isPresented:destination:key:kind:id:shouldTargetSourceColumn:navigationAuthority:isExtractingDestinations:transaction:)(v26, v25, v24, v2, (uint64_t)v34, v22, 0, v23, (uint64_t)v9, 1u, v16, v17, 1, v4, v5, WitnessTable);
  uint64_t v32 = &protocol witness table for UpdateViewDestinationViewModifier<A>;
  int v33 = &protocol witness table for UpdateViewDestinationRequestProcessor<A, B>;
  uint64_t v19 = swift_getWitnessTable();
  uint64_t v30 = WitnessTable;
  uint64_t v31 = v19;
  swift_getWitnessTable();
  static ViewBuilder.buildExpression<A>(_:)(v9);
  Swift::String v20 = *(void (**)(char *, uint64_t))(v7 + 8);
  v20(v9, v6);
  static ViewBuilder.buildExpression<A>(_:)(v12);
  return ((uint64_t (*)(char *, uint64_t))v20)(v12, v6);
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance BaseModifier<A>(uint64_t a1, uint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t *))
{
  return static BaseModifier._makeView(modifier:inputs:body:)(a1, a2, a3);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance BaseModifier<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F40FF3A0](a1, a2, a3, a4, a5, WitnessTable);
}

__n128 __swift_memcpy52_4(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  long long v4 = *(_OWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t sub_1882BB650()
{
  return swift_getWitnessTable();
}

BOOL static AccessibilityZoomGestureAction.Direction.== infix(_:_:)(int a1, int a2)
{
  return ((a2 ^ a1) & 1) == 0;
}

void AccessibilityZoomGestureAction.Direction.hash(into:)(uint64_t a1, char a2)
{
}

Swift::Int AccessibilityZoomGestureAction.Direction.hashValue.getter(char a1)
{
  return Hasher._finalize()();
}

uint64_t AccessibilityZoomGestureAction.direction.getter()
{
  return *v0;
}

double AccessibilityZoomGestureAction.location.getter()
{
  return *(double *)(v0 + 8);
}

double AccessibilityZoomGestureAction.point.getter()
{
  return *(double *)(v0 + 24);
}

uint64_t protocol witness for AccessibilityAction.impliedRole(for:) in conformance AccessibilityZoomAction()
{
  return 0x400000000000;
}

uint64_t View.accessibilityZoomAction(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  unint64_t v10 = lazy protocol witness table accessor for type AccessibilityZoomAction and conformance AccessibilityZoomAction();
  return View.accessibilityAction<A>(_:label:image:_:)(v10, 0, 0, 0, 0, 0, a1, a2, a5, a3, (uint64_t)&type metadata for AccessibilityZoomAction, a4, v10);
}

uint64_t ModifiedContent<>.accessibilityZoomAction(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  unint64_t v8 = lazy protocol witness table accessor for type AccessibilityZoomAction and conformance AccessibilityZoomAction();
  return ModifiedContent<>.accessibilityAction<A>(_:label:image:_:)(v8, 0, 0, 0, 0, 0, a1, a2, a4, a3, (uint64_t)&type metadata for AccessibilityZoomAction, v8);
}

unint64_t lazy protocol witness table accessor for type AccessibilityZoomGestureAction.Direction and conformance AccessibilityZoomGestureAction.Direction()
{
  unint64_t result = lazy protocol witness table cache variable for type AccessibilityZoomGestureAction.Direction and conformance AccessibilityZoomGestureAction.Direction;
  if (!lazy protocol witness table cache variable for type AccessibilityZoomGestureAction.Direction and conformance AccessibilityZoomGestureAction.Direction)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityZoomGestureAction.Direction and conformance AccessibilityZoomGestureAction.Direction);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for AccessibilityZoomGestureAction(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && a1[40]) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *a1;
  BOOL v4 = v3 >= 2;
  int v5 = v3 - 2;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for AccessibilityZoomGestureAction(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(void *)unint64_t result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 40) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 40) = 0;
    }
    if (a2) {
      *(unsigned char *)unint64_t result = a2 + 1;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AccessibilityZoomGestureAction()
{
  return &type metadata for AccessibilityZoomGestureAction;
}

unsigned char *storeEnumTagSinglePayload for AccessibilityZoomGestureAction.Direction(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1882BBB0CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AccessibilityZoomGestureAction.Direction()
{
  return &type metadata for AccessibilityZoomGestureAction.Direction;
}

ValueMetadata *type metadata accessor for AccessibilityZoomAction()
{
  return &type metadata for AccessibilityZoomAction;
}

unint64_t instantiation function for generic protocol witness table for AccessibilityZoomAction(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type AccessibilityZoomAction and conformance AccessibilityZoomAction();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t SwitchToggleStyle.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v3 = swift_getKeyPath();
  uint64_t v4 = swift_getKeyPath();
  uint64_t result = swift_getKeyPath();
  *(void *)a1 = KeyPath;
  *(unsigned char *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = v3;
  *(unsigned char *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = v4;
  *(unsigned char *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = result;
  *(unsigned char *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  return result;
}

uint64_t SwitchToggleStyle.init(tint:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v5 = swift_getKeyPath();
  uint64_t v6 = swift_getKeyPath();
  uint64_t result = swift_getKeyPath();
  *(void *)a2 = KeyPath;
  *(unsigned char *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = v5;
  *(unsigned char *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = v6;
  *(unsigned char *)(a2 + 40) = 0;
  *(void *)(a2 + 48) = result;
  *(unsigned char *)(a2 + 56) = 0;
  *(void *)(a2 + 64) = a1;
  return result;
}

void *closure #3 in SwitchToggleStyle.makeBody(configuration:)(uint64_t a1, void *a2)
{
  outlined retain of ToggleStyleConfiguration(a2);
  type metadata accessor for Binding<AnyListSelection>(0, (unint64_t *)&lazy cache variable for type metadata for Binding<Bool>, MEMORY[0x1E4FBB390], MEMORY[0x1E4F41638]);
  uint64_t v4 = v3;
  swift_retain();
  swift_retain();
  MEMORY[0x18C113DA0](&v6, v4);
  dispatch thunk of AnyLocation.set(_:transaction:)();
  swift_release();
  swift_release();
  return outlined release of ToggleStyleConfiguration(a2);
}

id protocol witness for UIViewRepresentable.makeUIView(context:) in conformance Switch(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  id v2 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1CD0]), sel_init);
  objc_msgSend(v2, sel_addTarget_action_forControlEvents_, v1, sel_isOnChanged_, 4096);
  return v2;
}

void protocol witness for UIViewRepresentable.updateUIView(_:context:) in conformance Switch(void *a1, uint64_t *a2)
{
}

id protocol witness for UIViewRepresentable.makeCoordinator() in conformance Switch@<X0>(void *a1@<X8>)
{
  uint64_t v3 = *v1;
  uint64_t v4 = v1[1];
  char v5 = *((unsigned char *)v1 + 16);
  uint64_t v6 = (objc_class *)type metadata accessor for PlatformSwitchCoordinator();
  uint64_t v7 = (char *)objc_allocWithZone(v6);
  unint64_t v8 = &v7[OBJC_IVAR____TtC7SwiftUIP33_1246D37251EA3A918B392E2B95F8B7EF25PlatformSwitchCoordinator__isOn];
  *(void *)unint64_t v8 = v3;
  *((void *)v8 + 1) = v4;
  v8[16] = v5;
  v10.receiver = v7;
  v10.super_class = v6;
  swift_retain();
  swift_retain();
  id result = objc_msgSendSuper2(&v10, sel_init);
  *a1 = result;
  return result;
}

id PlatformSwitchCoordinator.isOnChanged(_:)(void *a1)
{
  static Update.dispatchImmediately<A>(_:)();
  type metadata accessor for Binding<AnyListSelection>(0, (unint64_t *)&lazy cache variable for type metadata for Binding<Bool>, MEMORY[0x1E4FBB390], MEMORY[0x1E4F41638]);
  MEMORY[0x18C113DA0](&v5);
  uint64_t v2 = v5;
  swift_retain();
  swift_retain();
  char v3 = Transaction.disablesAnimations.getter();
  swift_release();
  swift_release();
  return objc_msgSend(a1, sel_setOn_animated_, v2, (v3 & 1) == 0);
}

uint64_t closure #1 in PlatformSwitchCoordinator.isOnChanged(_:)(uint64_t a1, void *a2)
{
  return swift_release();
}

uint64_t PlatformSwitchCoordinator.__ivar_destroyer()
{
  swift_release();

  return swift_release();
}

id PlatformSwitchCoordinator.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for PlatformSwitchCoordinator();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t key path getter for EnvironmentValues.placementTint : EnvironmentValues@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = EnvironmentValues.placementTint.getter();
  *a1 = result;
  return result;
}

uint64_t sub_1882BC230@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = EnvironmentValues.placementTint.getter();
  *a1 = result;
  return result;
}

uint64_t key path setter for EnvironmentValues.placementTint : EnvironmentValues()
{
  return EnvironmentValues.placementTint.setter();
}

uint64_t sub_1882BC298()
{
  return EnvironmentValues.placementTint.setter();
}

uint64_t sub_1882BC2C4@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = EnvironmentValues.effectiveFont.getter();
  *a1 = result;
  return result;
}

uint64_t sub_1882BC300()
{
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  if (*(void *)(v0 + 88))
  {
    outlined consume of Environment<AppIntentExecutor?>.Content(*(void *)(v0 + 64), *(void *)(v0 + 72), *(unsigned char *)(v0 + 80));

    swift_release();
  }

  return swift_deallocObject();
}

void *partial apply for closure #3 in SwitchToggleStyle.makeBody(configuration:)(uint64_t a1)
{
  return closure #3 in SwitchToggleStyle.makeBody(configuration:)(a1, (void *)(v1 + 16));
}

uint64_t *assignWithCopy for SwitchToggleStyle(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  unsigned __int8 v5 = *((unsigned char *)a2 + 8);
  outlined copy of Environment<MenuActionDismissBehavior>.Content(*a2, v5);
  uint64_t v6 = *a1;
  uint64_t v7 = *((unsigned __int8 *)a1 + 8);
  *a1 = v4;
  *((unsigned char *)a1 + 8) = v5;
  outlined consume of Environment<Bool?>.Content(v6, v7);
  uint64_t v8 = a2[2];
  unsigned __int8 v9 = *((unsigned char *)a2 + 24);
  outlined copy of Environment<Color?>.Content(v8, v9);
  uint64_t v10 = a1[2];
  uint64_t v11 = *((unsigned __int8 *)a1 + 24);
  a1[2] = v8;
  *((unsigned char *)a1 + 24) = v9;
  outlined consume of Environment<Color?>.Content(v10, v11);
  uint64_t v12 = a2[4];
  char v13 = *((unsigned char *)a2 + 40);
  outlined copy of ResolvedTableRowIDs.Storage(v12, v13);
  uint64_t v14 = a1[4];
  char v15 = *((unsigned char *)a1 + 40);
  a1[4] = v12;
  *((unsigned char *)a1 + 40) = v13;
  outlined consume of Environment<[SceneID : KeyboardShortcut]>.Content(v14, v15);
  char v16 = *((unsigned char *)a2 + 56);
  a1[6] = a2[6];
  *((unsigned char *)a1 + 56) = v16;
  swift_retain();
  swift_release();
  a1[8] = a2[8];
  swift_retain();
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for SwitchToggleStyle(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 72)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 64);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for SwitchToggleStyle(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(void *)uint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 72) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 72) = 0;
    }
    if (a2) {
      *(void *)(result + 64) = a2;
    }
  }
  return result;
}

uint64_t assignWithCopy for Switch(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_retain();
  swift_release();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_retain();
  swift_release();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_retain();
  swift_release();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_retain();
  swift_release();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for Switch(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  swift_release();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_release();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_release();
  return a1;
}

uint64_t partial apply for closure #1 in PlatformSwitchCoordinator.isOnChanged(_:)()
{
  return closure #1 in PlatformSwitchCoordinator.isOnChanged(_:)(*(void *)(v0 + 16), *(void **)(v0 + 24));
}

uint64_t *initializeBufferWithCopyOfBuffer for MainMenuItem(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v4 = a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v15 = *a2;
    *int v4 = *a2;
    int v4 = (uint64_t *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    uint64_t v8 = *(int *)(a3 + 20);
    unsigned __int8 v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = type metadata accessor for UUID();
    uint64_t v12 = *(void *)(v11 - 8);
    char v13 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48);
    swift_bridgeObjectRetain();
    if (v13(v10, 10, v11))
    {
      uint64_t v14 = type metadata accessor for MainMenuItem.Identifier(0);
      memcpy(v9, v10, *(void *)(*(void *)(v14 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v9, v10, v11);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v9, 0, 10, v11);
    }
    *(uint64_t *)((char *)v4 + *(int *)(a3 + 24)) = *(uint64_t *)((char *)a2 + *(int *)(a3 + 24));
    swift_bridgeObjectRetain();
  }
  return v4;
}

uint64_t type metadata accessor for MainMenuItem.Identifier(uint64_t a1)
{
  return type metadata accessor for SortableTableHeaderButton(a1, (uint64_t *)&type metadata singleton initialization cache for MainMenuItem.Identifier);
}

uint64_t destroy for MainMenuItem(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 20);
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v4, 10, v5)) {
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  }

  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for MainMenuItem(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (char *)a1 + v7;
  unsigned __int8 v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for UUID();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48);
  swift_bridgeObjectRetain();
  if (v12(v9, 10, v10))
  {
    uint64_t v13 = type metadata accessor for MainMenuItem.Identifier(0);
    memcpy(v8, v9, *(void *)(*(void *)(v13 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v8, v9, v10);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 10, v10);
  }
  *(void *)((char *)a1 + *(int *)(a3 + 24)) = *(void *)((char *)a2 + *(int *)(a3 + 24));
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for MainMenuItem(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UUID();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48);
  int v12 = v11(v7, 10, v9);
  int v13 = v11(v8, 10, v9);
  if (!v12)
  {
    if (!v13)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 24))(v7, v8, v9);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v10 + 8))(v7, v9);
    goto LABEL_6;
  }
  if (v13)
  {
LABEL_6:
    uint64_t v14 = type metadata accessor for MainMenuItem.Identifier(0);
    memcpy(v7, v8, *(void *)(*(void *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v7, v8, v9);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 10, v9);
LABEL_7:
  *(void *)((char *)a1 + *(int *)(a3 + 24)) = *(void *)((char *)a2 + *(int *)(a3 + 24));
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_OWORD *initializeWithTake for MainMenuItem(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UUID();
  uint64_t v10 = *(void *)(v9 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 10, v9))
  {
    uint64_t v11 = type metadata accessor for MainMenuItem.Identifier(0);
    memcpy(v7, v8, *(void *)(*(void *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v7, v8, v9);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 10, v9);
  }
  *(void *)((char *)a1 + *(int *)(a3 + 24)) = *(void *)((char *)a2 + *(int *)(a3 + 24));
  return a1;
}

void *assignWithTake for MainMenuItem(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for UUID();
  uint64_t v11 = *(void *)(v10 - 8);
  int v12 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v11 + 48);
  int v13 = v12(v8, 10, v10);
  int v14 = v12(v9, 10, v10);
  if (!v13)
  {
    if (!v14)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v8, v9, v10);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v11 + 8))(v8, v10);
    goto LABEL_6;
  }
  if (v14)
  {
LABEL_6:
    uint64_t v15 = type metadata accessor for MainMenuItem.Identifier(0);
    memcpy(v8, v9, *(void *)(*(void *)(v15 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v8, v9, v10);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 10, v10);
LABEL_7:
  *(void *)((char *)a1 + *(int *)(a3 + 24)) = *(void *)((char *)a2 + *(int *)(a3 + 24));
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for MainMenuItem(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, j____swift_get_extra_inhabitant_indexTm_7);
}

uint64_t storeEnumTagSinglePayload for MainMenuItem(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, j____swift_store_extra_inhabitant_indexTm_7);
}

uint64_t type metadata accessor for MainMenuItem(uint64_t a1)
{
  return type metadata accessor for SortableTableHeaderButton(a1, (uint64_t *)&type metadata singleton initialization cache for MainMenuItem);
}

uint64_t type metadata completion function for MainMenuItem()
{
  uint64_t result = type metadata accessor for MainMenuItem.Identifier(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for MainMenuItem.Identifier(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = *(void *)(a3 - 8);
    uint64_t v7 = type metadata accessor for UUID();
    uint64_t v8 = *(void *)(v7 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(a2, 10, v7))
    {
      memcpy(a1, a2, *(void *)(v6 + 64));
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(a1, a2, v7);
      (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v8 + 56))(a1, 0, 10, v7);
    }
  }
  return a1;
}

uint64_t destroy for MainMenuItem.Identifier(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v2 - 8);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(a1, 10, v2);
  if (!result)
  {
    uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 8);
    return v4(a1, v2);
  }
  return result;
}

void *initializeWithCopy for MainMenuItem.Identifier(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v7 + 48))(a2, 10, v6))
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v7 + 16))(a1, a2, v6);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 10, v6);
  }
  return a1;
}

void *assignWithCopy for MainMenuItem.Identifier(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v7 + 48);
  int v9 = v8(a1, 10, v6);
  int v10 = v8(a2, 10, v6);
  if (!v9)
  {
    if (!v10)
    {
      (*(void (**)(void *, void *, uint64_t))(v7 + 24))(a1, a2, v6);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v7 + 8))(a1, v6);
    goto LABEL_6;
  }
  if (v10)
  {
LABEL_6:
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v7 + 16))(a1, a2, v6);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 10, v6);
  return a1;
}

void *initializeWithTake for MainMenuItem.Identifier(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v7 + 48))(a2, 10, v6))
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v7 + 32))(a1, a2, v6);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 10, v6);
  }
  return a1;
}

void *assignWithTake for MainMenuItem.Identifier(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v7 + 48);
  int v9 = v8(a1, 10, v6);
  int v10 = v8(a2, 10, v6);
  if (!v9)
  {
    if (!v10)
    {
      (*(void (**)(void *, void *, uint64_t))(v7 + 40))(a1, a2, v6);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v7 + 8))(a1, v6);
    goto LABEL_6;
  }
  if (v10)
  {
LABEL_6:
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v7 + 32))(a1, a2, v6);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 10, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for MainMenuItem.Identifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1882BD6B8);
}

uint64_t sub_1882BD6B8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  unsigned int v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48))(a1, a2, v4);
  if (v5 >= 0xB) {
    return v5 - 10;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for MainMenuItem.Identifier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1882BD738);
}

uint64_t sub_1882BD738(uint64_t a1, int a2, uint64_t a3)
{
  if (a2) {
    uint64_t v5 = (a2 + 10);
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56);

  return v7(a1, v5, a3, v6);
}

uint64_t getEnumTag for MainMenuItem.Identifier(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for UUID();
  unint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 48);

  return v3(a1, 10, v2);
}

uint64_t destructiveInjectEnumTag for MainMenuItem.Identifier(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);

  return v5(a1, a2, 10, v4);
}

uint64_t type metadata completion function for MainMenuItem.Identifier()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataSinglePayload();
    return 0;
  }
  return result;
}

uint64_t _ResolvedCommands.mainMenuItems(env:)(uint64_t *a1)
{
  uint64_t v150 = type metadata accessor for CommandGroupPlacement(0);
  uint64_t v153 = *(void *)(v150 - 8);
  MEMORY[0x1F4188790](v150);
  uint64_t v143 = (uint64_t)&v131 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v4);
  uint64_t v144 = (uint64_t)&v131 - v5;
  uint64_t v6 = (int *)type metadata accessor for MainMenuItem.Template(0);
  uint64_t v7 = *((void *)v6 - 1);
  MEMORY[0x1F4188790](v6);
  int v9 = (uint64_t *)((char *)&v131 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1F4188790](v10);
  int v12 = (Swift::String *)((char *)&v131 - v11);
  uint64_t v13 = type metadata accessor for MainMenuItem.Identifier(0);
  MEMORY[0x1F4188790](v13 - 8);
  uint64_t v15 = (char *)&v131 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v154 = *a1;
  uint64_t v158 = a1[1];
  uint64_t v145 = *v1;
  uint64_t v133 = v1[1];
  uint64_t v132 = v1[2];
  long long v165 = xmmword_188357320;
  type metadata accessor for _ContiguousArrayStorage<MainMenuItem.Template>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<MainMenuItem.Template>, type metadata accessor for MainMenuItem.Template, MEMORY[0x1E4FBBE00]);
  uint64_t v16 = *(void *)(v7 + 72);
  uint64_t v17 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v18 = (v17 + 32) & ~v17;
  uint64_t v139 = v19;
  uint64_t v138 = v17 | 7;
  uint64_t v20 = swift_allocObject();
  *(_OWORD *)(v20 + 16) = xmmword_1883CCC30;
  uint64_t v148 = v18;
  uint64_t v136 = v20;
  uint64_t v21 = v20 + v18;
  uint64_t v22 = v12;
  Swift::String v23 = currentAppName()();
  uint64_t v24 = type metadata accessor for UUID();
  uint64_t v131 = *(void *)(v24 - 8);
  uint64_t v26 = v131 + 56;
  uint64_t v25 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v131 + 56);
  uint64_t v157 = v24;
  long long v156 = v25;
  ((void (*)(char *, uint64_t, uint64_t))v25)(v15, 1, 10);
  *int v12 = v23;
  outlined init with copy of MainMenuItem.Identifier((uint64_t)v15, (uint64_t)v12 + v6[5], type metadata accessor for MainMenuItem.Identifier);
  *(uint64_t *)((char *)&v12->_countAndFlagsBits + v6[6]) = 0;
  uint64_t v27 = closure #1 in _ResolvedCommands.mainMenuItems(env:)();
  outlined destroy of (MainMenuItem.Identifier, MainMenuItem.Identifier)((uint64_t)v15, type metadata accessor for MainMenuItem.Identifier);
  *(uint64_t *)((char *)&v12->_countAndFlagsBits + v6[7]) = v27;
  outlined init with take of MainMenuItem.Template((uint64_t)v12, v21, type metadata accessor for MainMenuItem.Template);
  uint64_t v149 = v21;
  uint64_t v155 = v16;
  uint64_t v28 = v21 + v16;
  if (one-time initialization token for fileItem != -1) {
    swift_once();
  }
  uint64_t v29 = v154;
  uint64_t v163 = v154;
  uint64_t v164 = v158;
  uint64_t v161 = 0;
  uint64_t v162 = 0;
  uint64_t v160 = 0;
  uint64_t v30 = Text.resolveString(in:with:idiom:)();
  uint64_t v32 = v31;
  v156(v15, 2, 10, v157);
  v22->_uint64_t countAndFlagsBits = v30;
  v22->_object = v32;
  outlined init with copy of MainMenuItem.Identifier((uint64_t)v15, (uint64_t)v22 + v6[5], type metadata accessor for MainMenuItem.Identifier);
  *(uint64_t *)((char *)&v22->_countAndFlagsBits + v6[6]) = 0;
  uint64_t v33 = closure #2 in _ResolvedCommands.mainMenuItems(env:)();
  outlined destroy of (MainMenuItem.Identifier, MainMenuItem.Identifier)((uint64_t)v15, type metadata accessor for MainMenuItem.Identifier);
  *(uint64_t *)((char *)&v22->_countAndFlagsBits + v6[7]) = v33;
  outlined init with take of MainMenuItem.Template((uint64_t)v22, v28, type metadata accessor for MainMenuItem.Template);
  uint64_t v34 = v155;
  uint64_t v137 = 2 * v155;
  uint64_t v152 = v149 + 2 * v155;
  uint64_t v35 = v29;
  if (one-time initialization token for editItem != -1) {
    swift_once();
  }
  uint64_t v36 = v158;
  uint64_t v163 = v35;
  uint64_t v164 = v158;
  uint64_t v161 = 0;
  uint64_t v162 = 0;
  uint64_t v160 = 0;
  uint64_t v37 = Text.resolveString(in:with:idiom:)();
  uint64_t v39 = v38;
  v156(v15, 3, 10, v157);
  v22->_uint64_t countAndFlagsBits = v37;
  v22->_object = v39;
  outlined init with copy of MainMenuItem.Identifier((uint64_t)v15, (uint64_t)v22 + v6[5], type metadata accessor for MainMenuItem.Identifier);
  *(uint64_t *)((char *)&v22->_countAndFlagsBits + v6[6]) = 0;
  uint64_t v40 = closure #3 in _ResolvedCommands.mainMenuItems(env:)();
  outlined destroy of (MainMenuItem.Identifier, MainMenuItem.Identifier)((uint64_t)v15, type metadata accessor for MainMenuItem.Identifier);
  *(uint64_t *)((char *)&v22->_countAndFlagsBits + v6[7]) = v40;
  outlined init with take of MainMenuItem.Template((uint64_t)v22, v152, type metadata accessor for MainMenuItem.Template);
  *(void *)&long long v141 = v149 + 3 * v34;
  uint64_t v41 = v36;
  uint64_t v42 = v26;
  if (one-time initialization token for formatItem != -1) {
    swift_once();
  }
  uint64_t v163 = v35;
  uint64_t v164 = v41;
  uint64_t v161 = 0;
  uint64_t v162 = 0;
  uint64_t v160 = 0;
  uint64_t v43 = Text.resolveString(in:with:idiom:)();
  int v45 = v44;
  int v46 = v156;
  v156(v15, 4, 10, v157);
  v22->_uint64_t countAndFlagsBits = v43;
  v22->_object = v45;
  outlined init with copy of MainMenuItem.Identifier((uint64_t)v15, (uint64_t)v22 + v6[5], type metadata accessor for MainMenuItem.Identifier);
  *(uint64_t *)((char *)&v22->_countAndFlagsBits + v6[6]) = 0;
  if (one-time initialization token for textFormatting != -1) {
    swift_once();
  }
  uint64_t v47 = __swift_project_value_buffer(v150, (uint64_t)static CommandGroupPlacement.textFormatting);
  type metadata accessor for _ContiguousArrayStorage<MainMenuItem.Template>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<CommandGroupPlacement>, type metadata accessor for CommandGroupPlacement, MEMORY[0x1E4FBBE00]);
  uint64_t v48 = *(unsigned __int8 *)(v153 + 80);
  uint64_t v49 = (v48 + 32) & ~v48;
  uint64_t v142 = *(void *)(v153 + 72);
  uint64_t v152 = v50;
  uint64_t v147 = v49 + v142;
  uint64_t v151 = v48 | 7;
  uint64_t v51 = swift_allocObject();
  long long v146 = xmmword_18834BB80;
  *(_OWORD *)(v51 + 16) = xmmword_18834BB80;
  uint64_t v153 = v49;
  outlined init with copy of MainMenuItem.Identifier(v47, v51 + v49, type metadata accessor for CommandGroupPlacement);
  outlined destroy of (MainMenuItem.Identifier, MainMenuItem.Identifier)((uint64_t)v15, type metadata accessor for MainMenuItem.Identifier);
  *(uint64_t *)((char *)&v22->_countAndFlagsBits + v6[7]) = v51;
  outlined init with take of MainMenuItem.Template((uint64_t)v22, v141, type metadata accessor for MainMenuItem.Template);
  if (one-time initialization token for viewItem != -1) {
    swift_once();
  }
  uint64_t v134 = v149 + 4 * v155;
  uint64_t v163 = v154;
  uint64_t v164 = v158;
  uint64_t v161 = 0;
  uint64_t v162 = 0;
  uint64_t v160 = 0;
  uint64_t v52 = Text.resolveString(in:with:idiom:)();
  unsigned int v54 = v53;
  v46(v15, 5, 10, v157);
  v22->_uint64_t countAndFlagsBits = v52;
  v22->_object = v54;
  outlined init with copy of MainMenuItem.Identifier((uint64_t)v15, (uint64_t)v22 + v6[5], type metadata accessor for MainMenuItem.Identifier);
  uint64_t v55 = v6[6];
  p_uint64_t countAndFlagsBits = &v22->_countAndFlagsBits;
  *(uint64_t *)((char *)&v22->_countAndFlagsBits + v55) = 1;
  if (one-time initialization token for toolbar != -1) {
    swift_once();
  }
  uint64_t v149 = v42;
  uint64_t v56 = v150;
  uint64_t v57 = __swift_project_value_buffer(v150, (uint64_t)static CommandGroupPlacement.toolbar);
  uint64_t v58 = v144;
  outlined init with copy of MainMenuItem.Identifier(v57, v144, type metadata accessor for CommandGroupPlacement);
  if (one-time initialization token for sidebar != -1) {
    swift_once();
  }
  uint64_t v59 = __swift_project_value_buffer(v56, (uint64_t)static CommandGroupPlacement.sidebar);
  uint64_t v60 = v143;
  outlined init with copy of MainMenuItem.Identifier(v59, v143, type metadata accessor for CommandGroupPlacement);
  uint64_t v61 = v153;
  uint64_t v62 = v142;
  uint64_t v135 = v153 + 2 * v142;
  uint64_t v63 = swift_allocObject();
  long long v141 = xmmword_18834BB70;
  *(_OWORD *)(v63 + 16) = xmmword_18834BB70;
  outlined init with copy of MainMenuItem.Identifier(v58, v63 + v61, type metadata accessor for CommandGroupPlacement);
  outlined init with take of MainMenuItem.Template(v60, v63 + v61 + v62, type metadata accessor for CommandGroupPlacement);
  outlined destroy of (MainMenuItem.Identifier, MainMenuItem.Identifier)(v58, type metadata accessor for CommandGroupPlacement);
  outlined destroy of (MainMenuItem.Identifier, MainMenuItem.Identifier)((uint64_t)v15, type metadata accessor for MainMenuItem.Identifier);
  uint64_t v64 = (uint64_t)p_countAndFlagsBits;
  *(uint64_t *)((char *)p_countAndFlagsBits + v6[7]) = v63;
  outlined init with take of MainMenuItem.Template(v64, v134, type metadata accessor for MainMenuItem.Template);
  uint64_t v166 = v136;
  uint64_t v65 = v145;
  int64_t v66 = *(void *)(v145 + 16);
  uint64_t v67 = MEMORY[0x1E4FBC860];
  if (v66)
  {
    uint64_t v160 = MEMORY[0x1E4FBC860];
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v66, 0);
    uint64_t v68 = *(void *)(type metadata accessor for CommandGroupPlacementBox(0) - 8);
    uint64_t v69 = v65 + ((*(unsigned __int8 *)(v68 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v68 + 80));
    uint64_t v70 = *(void *)(v68 + 72);
    long long v71 = (void (**)(char *, uint64_t, uint64_t))(v131 + 16);
    do
    {
      uint64_t v163 = v154;
      uint64_t v164 = v158;
      uint64_t v161 = 0;
      uint64_t v162 = 0;
      uint64_t v159 = 0;
      uint64_t v72 = Text.resolveString(in:with:idiom:)();
      uint64_t v74 = v73;
      uint64_t v75 = v157;
      (*v71)(v15, v69 + *(int *)(v150 + 20), v157);
      v156(v15, 0, 10, v75);
      *int v9 = v72;
      v9[1] = v74;
      outlined init with copy of MainMenuItem.Identifier((uint64_t)v15, (uint64_t)v9 + v6[5], type metadata accessor for MainMenuItem.Identifier);
      *(uint64_t *)((char *)v9 + v6[6]) = 0;
      uint64_t v76 = swift_allocObject();
      *(_OWORD *)(v76 + 16) = v146;
      outlined init with copy of MainMenuItem.Identifier(v69, v76 + v153, type metadata accessor for CommandGroupPlacement);
      outlined destroy of (MainMenuItem.Identifier, MainMenuItem.Identifier)((uint64_t)v15, type metadata accessor for MainMenuItem.Identifier);
      *(uint64_t *)((char *)v9 + v6[7]) = v76;
      uint64_t v67 = v160;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v67 + 16) + 1, 1);
        uint64_t v67 = v160;
      }
      unint64_t v78 = *(void *)(v67 + 16);
      unint64_t v77 = *(void *)(v67 + 24);
      if (v78 >= v77 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v77 > 1, v78 + 1, 1);
        uint64_t v67 = v160;
      }
      *(void *)(v67 + 16) = v78 + 1;
      uint64_t v79 = v148;
      outlined init with take of MainMenuItem.Template((uint64_t)v9, v67 + v148 + v78 * v155, type metadata accessor for MainMenuItem.Template);
      v69 += v70;
      --v66;
    }
    while (v66);
    swift_bridgeObjectRelease();
    swift_release();
    uint64_t v80 = v154;
    swift_release();
    uint64_t v81 = v150;
    uint64_t v82 = p_countAndFlagsBits;
  }
  else
  {
    uint64_t v79 = v148;
    uint64_t v82 = p_countAndFlagsBits;
    uint64_t v80 = v154;
    uint64_t v81 = v150;
  }
  uint64_t v167 = v67;
  uint64_t v83 = swift_allocObject();
  *(_OWORD *)(v83 + 16) = v141;
  uint64_t v84 = v157;
  if (one-time initialization token for windowItem != -1) {
    swift_once();
  }
  p_uint64_t countAndFlagsBits = (uint64_t *)v83;
  uint64_t v85 = v83 + v79;
  uint64_t v163 = v80;
  uint64_t v164 = v158;
  uint64_t v161 = 0;
  uint64_t v162 = 0;
  uint64_t v160 = 0;
  uint64_t v86 = Text.resolveString(in:with:idiom:)();
  uint64_t v88 = v87;
  v156(v15, 6, 10, v84);
  *uint64_t v82 = v86;
  v82[1] = v88;
  outlined init with copy of MainMenuItem.Identifier((uint64_t)v15, (uint64_t)v82 + v6[5], type metadata accessor for MainMenuItem.Identifier);
  *(uint64_t *)((char *)v82 + v6[6]) = 0;
  if (one-time initialization token for windowSize != -1) {
    swift_once();
  }
  uint64_t v89 = __swift_project_value_buffer(v81, (uint64_t)static CommandGroupPlacement.windowSize);
  uint64_t v90 = v144;
  outlined init with copy of MainMenuItem.Identifier(v89, v144, type metadata accessor for CommandGroupPlacement);
  if (one-time initialization token for windowArrangement != -1) {
    swift_once();
  }
  uint64_t v91 = __swift_project_value_buffer(v81, (uint64_t)static CommandGroupPlacement.windowArrangement);
  uint64_t v92 = v143;
  outlined init with copy of MainMenuItem.Identifier(v91, v143, type metadata accessor for CommandGroupPlacement);
  uint64_t v93 = swift_allocObject();
  *(_OWORD *)(v93 + 16) = v141;
  uint64_t v94 = v93 + v153;
  outlined init with copy of MainMenuItem.Identifier(v90, v93 + v153, type metadata accessor for CommandGroupPlacement);
  outlined init with take of MainMenuItem.Template(v92, v94 + v142, type metadata accessor for CommandGroupPlacement);
  outlined destroy of (MainMenuItem.Identifier, MainMenuItem.Identifier)(v90, type metadata accessor for CommandGroupPlacement);
  outlined destroy of (MainMenuItem.Identifier, MainMenuItem.Identifier)((uint64_t)v15, type metadata accessor for MainMenuItem.Identifier);
  *(uint64_t *)((char *)v82 + v6[7]) = v93;
  outlined init with take of MainMenuItem.Template((uint64_t)v82, v85, type metadata accessor for MainMenuItem.Template);
  uint64_t v95 = v85 + v155;
  if (one-time initialization token for helpItem != -1) {
    swift_once();
  }
  uint64_t v163 = v154;
  uint64_t v164 = v158;
  uint64_t v161 = 0;
  uint64_t v162 = 0;
  uint64_t v160 = 0;
  uint64_t v96 = Text.resolveString(in:with:idiom:)();
  uint64_t v98 = v97;
  v156(v15, 7, 10, v157);
  *uint64_t v82 = v96;
  v82[1] = v98;
  outlined init with copy of MainMenuItem.Identifier((uint64_t)v15, (uint64_t)v82 + v6[5], type metadata accessor for MainMenuItem.Identifier);
  *(uint64_t *)((char *)v82 + v6[6]) = 0;
  uint64_t v99 = (uint64_t)v82;
  if (one-time initialization token for help != -1) {
    swift_once();
  }
  uint64_t v100 = __swift_project_value_buffer(v81, (uint64_t)static CommandGroupPlacement.help);
  uint64_t v101 = swift_allocObject();
  *(_OWORD *)(v101 + 16) = v146;
  outlined init with copy of MainMenuItem.Identifier(v100, v101 + v153, type metadata accessor for CommandGroupPlacement);
  outlined destroy of (MainMenuItem.Identifier, MainMenuItem.Identifier)((uint64_t)v15, type metadata accessor for MainMenuItem.Identifier);
  *(void *)(v99 + v6[7]) = v101;
  outlined init with take of MainMenuItem.Template(v99, v95, type metadata accessor for MainMenuItem.Template);
  uint64_t v168 = p_countAndFlagsBits;
  uint64_t v102 = v166;
  int64_t v103 = *(void *)(v166 + 16);
  swift_bridgeObjectRetain();
  uint64_t result = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v103, 1, MEMORY[0x1E4FBC860]);
  uint64_t v105 = (void *)result;
  if (*(void *)(v102 + 16))
  {
    if ((*(void *)(result + 24) >> 1) - *(void *)(result + 16) < v103)
    {
LABEL_72:
      __break(1u);
      goto LABEL_73;
    }
    uint64_t result = swift_arrayInitWithCopy();
    if (v103)
    {
      uint64_t v106 = v105[2];
      BOOL v107 = __OFADD__(v106, v103);
      uint64_t v108 = v106 + v103;
      if (v107)
      {
LABEL_75:
        __break(1u);
        goto LABEL_76;
      }
      v105[2] = v108;
    }
  }
  else if (v103)
  {
    __break(1u);
    goto LABEL_70;
  }
  swift_bridgeObjectRelease();
  uint64_t v109 = v167;
  int64_t v110 = *(void *)(v167 + 16);
  int64_t v111 = v105[2];
  int64_t v112 = v111 + v110;
  if (__OFADD__(v111, v110))
  {
    __break(1u);
  }
  else
  {
    unint64_t v113 = v105[3];
    uint64_t result = swift_bridgeObjectRetain();
    if (v112 <= (uint64_t)(v113 >> 1))
    {
      int64_t v114 = v110;
      goto LABEL_43;
    }
  }
  if (v111 <= v112) {
    int64_t v129 = v111 + v110;
  }
  else {
    int64_t v129 = v111;
  }
  uint64_t result = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(1, v129, 1, v105);
  uint64_t v105 = (void *)result;
  int64_t v111 = *(void *)(result + 16);
  int64_t v114 = *(void *)(v109 + 16);
LABEL_43:
  if (!v114)
  {
    if (!v110) {
      goto LABEL_49;
    }
LABEL_70:
    __break(1u);
LABEL_71:
    __break(1u);
    goto LABEL_72;
  }
  if ((v105[3] >> 1) - v111 < v110)
  {
LABEL_73:
    __break(1u);
    goto LABEL_74;
  }
  uint64_t result = swift_arrayInitWithCopy();
  if (v110)
  {
    uint64_t v115 = v105[2];
    BOOL v107 = __OFADD__(v115, v110);
    uint64_t v116 = v115 + v110;
    if (v107)
    {
LABEL_76:
      __break(1u);
      goto LABEL_77;
    }
    v105[2] = v116;
  }
LABEL_49:
  swift_bridgeObjectRelease();
  uint64_t v117 = v168;
  int64_t v118 = v168[2];
  int64_t v119 = v105[2];
  int64_t v120 = v119 + v118;
  if (__OFADD__(v119, v118))
  {
    __break(1u);
  }
  else
  {
    unint64_t v121 = v105[3];
    uint64_t result = swift_bridgeObjectRetain();
    if (v120 <= (uint64_t)(v121 >> 1))
    {
      int64_t v122 = v118;
      goto LABEL_52;
    }
  }
  if (v119 <= v120) {
    int64_t v130 = v119 + v118;
  }
  else {
    int64_t v130 = v119;
  }
  uint64_t result = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(1, v130, 1, v105);
  uint64_t v105 = (void *)result;
  int64_t v119 = *(void *)(result + 16);
  int64_t v122 = v117[2];
LABEL_52:
  uint64_t v123 = v145;
  if (!v122)
  {
    if (!v118) {
      goto LABEL_58;
    }
    goto LABEL_71;
  }
  if ((v105[3] >> 1) - v119 < v118)
  {
LABEL_74:
    __break(1u);
    goto LABEL_75;
  }
  uint64_t result = swift_arrayInitWithCopy();
  if (!v118)
  {
LABEL_58:
    swift_bridgeObjectRelease();
    type metadata accessor for _ContiguousArrayStorage<MainMenuItem.Template>(0, &lazy cache variable for type metadata for [MainMenuItem.Template], type metadata accessor for MainMenuItem.Template, MEMORY[0x1E4FBB320]);
    swift_arrayDestroy();
    swift_bridgeObjectRetain();
    uint64_t v126 = v133;
    swift_bridgeObjectRetain();
    uint64_t v127 = v132;
    swift_bridgeObjectRetain();
    unint64_t v128 = specialized Sequence.compactMap<A>(_:)((uint64_t)v105, v123, v126, v127);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return (uint64_t)v128;
  }
  uint64_t v124 = v105[2];
  BOOL v107 = __OFADD__(v124, v118);
  uint64_t v125 = v124 + v118;
  if (!v107)
  {
    v105[2] = v125;
    goto LABEL_58;
  }
LABEL_77:
  __break(1u);
  return result;
}

void MainMenuItem.Identifier.hash(into:)()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x1F4188790](v1);
  uint64_t v4 = (char *)&v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for MainMenuItem.Identifier(0);
  MEMORY[0x1F4188790](v5 - 8);
  uint64_t v7 = (char *)&v9 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of MainMenuItem.Identifier(v0, (uint64_t)v7, type metadata accessor for MainMenuItem.Identifier);
  switch((*(unsigned int (**)(char *, uint64_t, uint64_t))(v2 + 48))(v7, 10, v1))
  {
    case 1u:
      Swift::UInt v8 = 0;
      goto LABEL_13;
    case 2u:
      Swift::UInt v8 = 1;
      goto LABEL_13;
    case 3u:
      Swift::UInt v8 = 2;
      goto LABEL_13;
    case 4u:
      Swift::UInt v8 = 3;
      goto LABEL_13;
    case 5u:
      Swift::UInt v8 = 4;
      goto LABEL_13;
    case 6u:
      Swift::UInt v8 = 5;
      goto LABEL_13;
    case 7u:
      Swift::UInt v8 = 6;
      goto LABEL_13;
    case 8u:
      Swift::UInt v8 = 7;
      goto LABEL_13;
    case 9u:
      Swift::UInt v8 = 9;
      goto LABEL_13;
    case 0xAu:
      Swift::UInt v8 = 10;
LABEL_13:
      Hasher._combine(_:)(v8);
      break;
    default:
      (*(void (**)(char *, char *, uint64_t))(v2 + 32))(v4, v7, v1);
      Hasher._combine(_:)(8uLL);
      lazy protocol witness table accessor for type MainMenuItem.Identifier and conformance MainMenuItem.Identifier((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E4F27990]);
      dispatch thunk of Hashable.hash(into:)();
      (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
      break;
  }
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance MainMenuItem.Identifier()
{
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance MainMenuItem.Identifier()
{
  return Hasher._finalize()();
}

uint64_t base witness table accessor for Equatable in MainMenuItem.Identifier()
{
  return lazy protocol witness table accessor for type MainMenuItem.Identifier and conformance MainMenuItem.Identifier(&lazy protocol witness table cache variable for type MainMenuItem.Identifier and conformance MainMenuItem.Identifier, (void (*)(uint64_t))type metadata accessor for MainMenuItem.Identifier);
}

uint64_t lazy protocol witness table accessor for type MainMenuItem.Identifier and conformance MainMenuItem.Identifier(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t closure #1 in _ResolvedCommands.mainMenuItems(env:)()
{
  uint64_t v0 = type metadata accessor for CommandGroupPlacement(0);
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x1F4188790](v0);
  uint64_t v3 = (char *)&v32 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v4);
  uint64_t v6 = (char *)&v32 - v5;
  MEMORY[0x1F4188790](v7);
  uint64_t v9 = (char *)&v32 - v8;
  MEMORY[0x1F4188790](v10);
  int v12 = (char *)&v32 - v11;
  MEMORY[0x1F4188790](v13);
  uint64_t v15 = (char *)&v32 - v14;
  if (one-time initialization token for appInfo != -1) {
    swift_once();
  }
  uint64_t v16 = __swift_project_value_buffer(v0, (uint64_t)static CommandGroupPlacement.appInfo);
  uint64_t v33 = v15;
  outlined init with copy of MainMenuItem.Identifier(v16, (uint64_t)v15, type metadata accessor for CommandGroupPlacement);
  if (one-time initialization token for appSettings != -1) {
    swift_once();
  }
  uint64_t v17 = __swift_project_value_buffer(v0, (uint64_t)static CommandGroupPlacement.appSettings);
  uint64_t v18 = (uint64_t)v12;
  outlined init with copy of MainMenuItem.Identifier(v17, (uint64_t)v12, type metadata accessor for CommandGroupPlacement);
  if (one-time initialization token for systemServices != -1) {
    swift_once();
  }
  uint64_t v19 = __swift_project_value_buffer(v0, (uint64_t)static CommandGroupPlacement.systemServices);
  uint64_t v20 = (uint64_t)v9;
  outlined init with copy of MainMenuItem.Identifier(v19, (uint64_t)v9, type metadata accessor for CommandGroupPlacement);
  if (one-time initialization token for appVisibility != -1) {
    swift_once();
  }
  uint64_t v21 = __swift_project_value_buffer(v0, (uint64_t)static CommandGroupPlacement.appVisibility);
  outlined init with copy of MainMenuItem.Identifier(v21, (uint64_t)v6, type metadata accessor for CommandGroupPlacement);
  uint64_t v32 = v6;
  if (one-time initialization token for appTermination != -1) {
    swift_once();
  }
  uint64_t v22 = __swift_project_value_buffer(v0, (uint64_t)static CommandGroupPlacement.appTermination);
  outlined init with copy of MainMenuItem.Identifier(v22, (uint64_t)v3, type metadata accessor for CommandGroupPlacement);
  type metadata accessor for _ContiguousArrayStorage<MainMenuItem.Template>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<CommandGroupPlacement>, type metadata accessor for CommandGroupPlacement, MEMORY[0x1E4FBBE00]);
  uint64_t v23 = *(void *)(v1 + 72);
  unint64_t v24 = (*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  uint64_t v25 = 4 * v23;
  uint64_t v26 = swift_allocObject();
  *(_OWORD *)(v26 + 16) = xmmword_1883CCC30;
  uint64_t v27 = v26 + v24;
  uint64_t v28 = (uint64_t)v33;
  outlined init with copy of MainMenuItem.Identifier((uint64_t)v33, v27, type metadata accessor for CommandGroupPlacement);
  outlined init with copy of MainMenuItem.Identifier(v18, v27 + v23, type metadata accessor for CommandGroupPlacement);
  outlined init with copy of MainMenuItem.Identifier(v20, v27 + 2 * v23, type metadata accessor for CommandGroupPlacement);
  uint64_t v29 = v27 + 3 * v23;
  uint64_t v30 = (uint64_t)v32;
  outlined init with copy of MainMenuItem.Identifier((uint64_t)v32, v29, type metadata accessor for CommandGroupPlacement);
  outlined init with take of MainMenuItem.Template((uint64_t)v3, v27 + v25, type metadata accessor for CommandGroupPlacement);
  outlined destroy of (MainMenuItem.Identifier, MainMenuItem.Identifier)(v30, type metadata accessor for CommandGroupPlacement);
  outlined destroy of (MainMenuItem.Identifier, MainMenuItem.Identifier)(v20, type metadata accessor for CommandGroupPlacement);
  outlined destroy of (MainMenuItem.Identifier, MainMenuItem.Identifier)(v18, type metadata accessor for CommandGroupPlacement);
  outlined destroy of (MainMenuItem.Identifier, MainMenuItem.Identifier)(v28, type metadata accessor for CommandGroupPlacement);
  return v26;
}

uint64_t closure #2 in _ResolvedCommands.mainMenuItems(env:)()
{
  uint64_t v0 = type metadata accessor for CommandGroupPlacement(0);
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x1F4188790](v0);
  uint64_t v3 = (char *)&v22 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v4);
  uint64_t v6 = (char *)&v22 - v5;
  MEMORY[0x1F4188790](v7);
  uint64_t v9 = (char *)&v22 - v8;
  MEMORY[0x1F4188790](v10);
  int v12 = (char *)&v22 - v11;
  if (one-time initialization token for newItem != -1) {
    swift_once();
  }
  uint64_t v13 = __swift_project_value_buffer(v0, (uint64_t)static CommandGroupPlacement.newItem);
  outlined init with copy of MainMenuItem.Identifier(v13, (uint64_t)v12, type metadata accessor for CommandGroupPlacement);
  if (one-time initialization token for saveItem != -1) {
    swift_once();
  }
  uint64_t v14 = __swift_project_value_buffer(v0, (uint64_t)static CommandGroupPlacement.saveItem);
  outlined init with copy of MainMenuItem.Identifier(v14, (uint64_t)v9, type metadata accessor for CommandGroupPlacement);
  if (one-time initialization token for importExport != -1) {
    swift_once();
  }
  uint64_t v15 = __swift_project_value_buffer(v0, (uint64_t)static CommandGroupPlacement.importExport);
  outlined init with copy of MainMenuItem.Identifier(v15, (uint64_t)v6, type metadata accessor for CommandGroupPlacement);
  if (one-time initialization token for printItem != -1) {
    swift_once();
  }
  uint64_t v16 = __swift_project_value_buffer(v0, (uint64_t)static CommandGroupPlacement.printItem);
  outlined init with copy of MainMenuItem.Identifier(v16, (uint64_t)v3, type metadata accessor for CommandGroupPlacement);
  type metadata accessor for _ContiguousArrayStorage<MainMenuItem.Template>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<CommandGroupPlacement>, type metadata accessor for CommandGroupPlacement, MEMORY[0x1E4FBBE00]);
  uint64_t v17 = *(void *)(v1 + 72);
  unint64_t v18 = (*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  uint64_t v19 = swift_allocObject();
  *(_OWORD *)(v19 + 16) = xmmword_188382660;
  uint64_t v20 = v19 + v18;
  outlined init with copy of MainMenuItem.Identifier((uint64_t)v12, v20, type metadata accessor for CommandGroupPlacement);
  outlined init with copy of MainMenuItem.Identifier((uint64_t)v9, v20 + v17, type metadata accessor for CommandGroupPlacement);
  outlined init with copy of MainMenuItem.Identifier((uint64_t)v6, v20 + 2 * v17, type metadata accessor for CommandGroupPlacement);
  outlined init with take of MainMenuItem.Template((uint64_t)v3, v20 + 3 * v17, type metadata accessor for CommandGroupPlacement);
  outlined destroy of (MainMenuItem.Identifier, MainMenuItem.Identifier)((uint64_t)v6, type metadata accessor for CommandGroupPlacement);
  outlined destroy of (MainMenuItem.Identifier, MainMenuItem.Identifier)((uint64_t)v9, type metadata accessor for CommandGroupPlacement);
  outlined destroy of (MainMenuItem.Identifier, MainMenuItem.Identifier)((uint64_t)v12, type metadata accessor for CommandGroupPlacement);
  return v19;
}

uint64_t closure #3 in _ResolvedCommands.mainMenuItems(env:)()
{
  uint64_t v0 = type metadata accessor for CommandGroupPlacement(0);
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x1F4188790](v0);
  uint64_t v3 = (char *)&v18 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v4);
  uint64_t v6 = (char *)&v18 - v5;
  MEMORY[0x1F4188790](v7);
  uint64_t v9 = (char *)&v18 - v8;
  if (one-time initialization token for undoRedo != -1) {
    swift_once();
  }
  uint64_t v10 = __swift_project_value_buffer(v0, (uint64_t)static CommandGroupPlacement.undoRedo);
  outlined init with copy of MainMenuItem.Identifier(v10, (uint64_t)v9, type metadata accessor for CommandGroupPlacement);
  if (one-time initialization token for pasteboard != -1) {
    swift_once();
  }
  uint64_t v11 = __swift_project_value_buffer(v0, (uint64_t)static CommandGroupPlacement.pasteboard);
  outlined init with copy of MainMenuItem.Identifier(v11, (uint64_t)v6, type metadata accessor for CommandGroupPlacement);
  if (one-time initialization token for textEditing != -1) {
    swift_once();
  }
  uint64_t v12 = __swift_project_value_buffer(v0, (uint64_t)static CommandGroupPlacement.textEditing);
  outlined init with copy of MainMenuItem.Identifier(v12, (uint64_t)v3, type metadata accessor for CommandGroupPlacement);
  type metadata accessor for _ContiguousArrayStorage<MainMenuItem.Template>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<CommandGroupPlacement>, type metadata accessor for CommandGroupPlacement, MEMORY[0x1E4FBBE00]);
  uint64_t v13 = *(void *)(v1 + 72);
  unint64_t v14 = (*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  uint64_t v15 = swift_allocObject();
  *(_OWORD *)(v15 + 16) = xmmword_188357320;
  uint64_t v16 = v15 + v14;
  outlined init with copy of MainMenuItem.Identifier((uint64_t)v9, v16, type metadata accessor for CommandGroupPlacement);
  outlined init with copy of MainMenuItem.Identifier((uint64_t)v6, v16 + v13, type metadata accessor for CommandGroupPlacement);
  outlined init with take of MainMenuItem.Template((uint64_t)v3, v16 + 2 * v13, type metadata accessor for CommandGroupPlacement);
  outlined destroy of (MainMenuItem.Identifier, MainMenuItem.Identifier)((uint64_t)v6, type metadata accessor for CommandGroupPlacement);
  outlined destroy of (MainMenuItem.Identifier, MainMenuItem.Identifier)((uint64_t)v9, type metadata accessor for CommandGroupPlacement);
  return v15;
}

uint64_t one-time initialization function for fileItem()
{
  LocalizedStringKey.init(stringLiteral:)();
  type metadata accessor for SwiftUIClass();
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  id v1 = objc_msgSend(self, sel_bundleForClass_, ObjCClassFromMetadata);
  uint64_t result = Text.init(_:tableName:bundle:comment:)();
  static _ResolvedCommands.fileItem = result;
  unk_1E90FBE90 = v3;
  byte_1E90FBE98 = v4 & 1;
  qword_1E90FBEA0 = v5;
  return result;
}

uint64_t one-time initialization function for editItem()
{
  LocalizedStringKey.init(stringLiteral:)();
  type metadata accessor for SwiftUIClass();
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  id v1 = objc_msgSend(self, sel_bundleForClass_, ObjCClassFromMetadata);
  uint64_t result = Text.init(_:tableName:bundle:comment:)();
  static _ResolvedCommands.editItem = result;
  unk_1E90FBF40 = v3;
  byte_1E90FBF48 = v4 & 1;
  qword_1E90FBF50 = v5;
  return result;
}

uint64_t one-time initialization function for formatItem()
{
  LocalizedStringKey.init(stringLiteral:)();
  type metadata accessor for SwiftUIClass();
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  id v1 = objc_msgSend(self, sel_bundleForClass_, ObjCClassFromMetadata);
  uint64_t result = Text.init(_:tableName:bundle:comment:)();
  static _ResolvedCommands.formatItem = result;
  unk_1E90FBF00 = v3;
  byte_1E90FBF08 = v4 & 1;
  qword_1E90FBF10 = v5;
  return result;
}

uint64_t one-time initialization function for viewItem()
{
  LocalizedStringKey.init(stringLiteral:)();
  type metadata accessor for SwiftUIClass();
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  id v1 = objc_msgSend(self, sel_bundleForClass_, ObjCClassFromMetadata);
  uint64_t result = Text.init(_:tableName:bundle:comment:)();
  static _ResolvedCommands.viewItem = result;
  unk_1E90FBF80 = v3;
  byte_1E90FBF88 = v4 & 1;
  qword_1E90FBF90 = v5;
  return result;
}

uint64_t one-time initialization function for windowItem()
{
  LocalizedStringKey.init(stringLiteral:)();
  type metadata accessor for SwiftUIClass();
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  id v1 = objc_msgSend(self, sel_bundleForClass_, ObjCClassFromMetadata);
  uint64_t result = Text.init(_:tableName:bundle:comment:)();
  static _ResolvedCommands.windowItem = result;
  unk_1E90FBF20 = v3;
  byte_1E90FBF28 = v4 & 1;
  qword_1E90FBF30 = v5;
  return result;
}

uint64_t one-time initialization function for helpItem()
{
  LocalizedStringKey.init(stringLiteral:)();
  type metadata accessor for SwiftUIClass();
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  id v1 = objc_msgSend(self, sel_bundleForClass_, ObjCClassFromMetadata);
  uint64_t result = Text.init(_:tableName:bundle:comment:)();
  static _ResolvedCommands.helpItem = result;
  unk_1E90FBF60 = v3;
  byte_1E90FBF68 = v4 & 1;
  qword_1E90FBF70 = v5;
  return result;
}

uint64_t specialized static MainMenuItem.Identifier.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)&v31 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for MainMenuItem.Identifier(0);
  MEMORY[0x1F4188790](v8 - 8);
  uint64_t v10 = (char *)&v31 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for (MainMenuItem.Identifier, MainMenuItem.Identifier)();
  MEMORY[0x1F4188790](v11 - 8);
  uint64_t v13 = (char *)&v31 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = (uint64_t)&v13[*(int *)(v14 + 56)];
  outlined init with copy of MainMenuItem.Identifier(a1, (uint64_t)v13, type metadata accessor for MainMenuItem.Identifier);
  outlined init with copy of MainMenuItem.Identifier(a2, v15, type metadata accessor for MainMenuItem.Identifier);
  uint64_t v16 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
  switch(v16((uint64_t)v13, 10, v4))
  {
    case 1u:
      int v17 = v16(v15, 10, v4);
      uint64_t v18 = type metadata accessor for MainMenuItem.Identifier;
      if (v17 != 1) {
        goto LABEL_23;
      }
      goto LABEL_5;
    case 2u:
      int v20 = v16(v15, 10, v4);
      uint64_t v18 = type metadata accessor for MainMenuItem.Identifier;
      if (v20 != 2) {
        goto LABEL_23;
      }
      goto LABEL_5;
    case 3u:
      int v21 = v16(v15, 10, v4);
      uint64_t v18 = type metadata accessor for MainMenuItem.Identifier;
      if (v21 != 3) {
        goto LABEL_23;
      }
      goto LABEL_5;
    case 4u:
      int v22 = v16(v15, 10, v4);
      uint64_t v18 = type metadata accessor for MainMenuItem.Identifier;
      if (v22 != 4) {
        goto LABEL_23;
      }
      goto LABEL_5;
    case 5u:
      int v23 = v16(v15, 10, v4);
      uint64_t v18 = type metadata accessor for MainMenuItem.Identifier;
      if (v23 != 5) {
        goto LABEL_23;
      }
      goto LABEL_5;
    case 6u:
      int v24 = v16(v15, 10, v4);
      uint64_t v18 = type metadata accessor for MainMenuItem.Identifier;
      if (v24 != 6) {
        goto LABEL_23;
      }
      goto LABEL_5;
    case 7u:
      int v25 = v16(v15, 10, v4);
      uint64_t v18 = type metadata accessor for MainMenuItem.Identifier;
      if (v25 != 7) {
        goto LABEL_23;
      }
      goto LABEL_5;
    case 8u:
      int v26 = v16(v15, 10, v4);
      uint64_t v18 = type metadata accessor for MainMenuItem.Identifier;
      if (v26 != 8) {
        goto LABEL_23;
      }
      goto LABEL_5;
    case 9u:
      int v27 = v16(v15, 10, v4);
      uint64_t v18 = type metadata accessor for MainMenuItem.Identifier;
      if (v27 != 9) {
        goto LABEL_23;
      }
      goto LABEL_5;
    case 0xAu:
      int v28 = v16(v15, 10, v4);
      uint64_t v18 = type metadata accessor for MainMenuItem.Identifier;
      if (v28 != 10) {
        goto LABEL_23;
      }
LABEL_5:
      char v19 = 1;
      break;
    default:
      outlined init with copy of MainMenuItem.Identifier((uint64_t)v13, (uint64_t)v10, type metadata accessor for MainMenuItem.Identifier);
      if (v16(v15, 10, v4))
      {
        (*(void (**)(char *, uint64_t))(v5 + 8))(v10, v4);
LABEL_23:
        char v19 = 0;
        uint64_t v18 = (uint64_t (*)(void))type metadata accessor for (MainMenuItem.Identifier, MainMenuItem.Identifier);
      }
      else
      {
        (*(void (**)(char *, uint64_t, uint64_t))(v5 + 32))(v7, v15, v4);
        char v19 = static UUID.== infix(_:_:)();
        uint64_t v30 = *(void (**)(char *, uint64_t))(v5 + 8);
        v30(v7, v4);
        v30(v10, v4);
        uint64_t v18 = type metadata accessor for MainMenuItem.Identifier;
      }
      break;
  }
  outlined destroy of (MainMenuItem.Identifier, MainMenuItem.Identifier)((uint64_t)v13, v18);
  return v19 & 1;
}

void type metadata accessor for (MainMenuItem.Identifier, MainMenuItem.Identifier)()
{
  if (!lazy cache variable for type metadata for (MainMenuItem.Identifier, MainMenuItem.Identifier))
  {
    type metadata accessor for MainMenuItem.Identifier(255);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (MainMenuItem.Identifier, MainMenuItem.Identifier));
    }
  }
}

uint64_t type metadata accessor for MainMenuItem.Template(uint64_t a1)
{
  return type metadata accessor for SortableTableHeaderButton(a1, (uint64_t *)&type metadata singleton initialization cache for MainMenuItem.Template);
}

void type metadata accessor for _ContiguousArrayStorage<MainMenuItem.Template>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

uint64_t outlined init with copy of MainMenuItem.Identifier(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t outlined init with take of MainMenuItem.Template(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

void *specialized Sequence.compactMap<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for CommandGroupPlacementBox(0);
  MEMORY[0x1F4188790](v8 - 8);
  uint64_t v10 = (char *)v52 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for MainMenuItem.Identifier(0);
  MEMORY[0x1F4188790](v11 - 8);
  uint64_t v64 = (uint64_t)v52 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for _ContiguousArrayStorage<MainMenuItem.Template>(0, &lazy cache variable for type metadata for MainMenuItem?, type metadata accessor for MainMenuItem, MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v13 - 8);
  uint64_t v15 = (char *)v52 - v14;
  uint64_t v60 = type metadata accessor for MainMenuItem(0);
  MEMORY[0x1F4188790](v60);
  uint64_t v65 = (uint64_t)v52 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v17);
  uint64_t v55 = (uint64_t)v52 - v19;
  int v20 = (char *)MEMORY[0x1E4FBC860];
  uint64_t v61 = *(void *)(a1 + 16);
  if (!v61) {
    return (void *)MEMORY[0x1E4FBC860];
  }
  v52[2] = v4;
  uint64_t v21 = a1;
  uint64_t v22 = v18;
  uint64_t v68 = (int *)type metadata accessor for MainMenuItem.Template(0);
  uint64_t v23 = *((void *)v68 - 1);
  uint64_t v59 = v21 + ((*(unsigned __int8 *)(v23 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v23 + 80));
  uint64_t v58 = *(void *)(v23 + 72);
  uint64_t v56 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v22 + 56);
  uint64_t v53 = (uint64_t (**)(uint64_t, uint64_t, uint64_t))(v22 + 48);
  uint64_t v54 = v22;
  v52[1] = v21;
  swift_bridgeObjectRetain();
  uint64_t v24 = 0;
  int v25 = v20;
  uint64_t v69 = a4;
  uint64_t v57 = v15;
  do
  {
    uint64_t v66 = v24;
    uint64_t v67 = v25;
    int v26 = (void *)(v59 + v58 * v24);
    uint64_t v27 = *(void *)((char *)v26 + v68[7]);
    uint64_t v28 = *(void *)(v27 + 16);
    if (v28)
    {
      uint64_t v63 = (void *)(v59 + v58 * v24);
      uint64_t v29 = *(void *)(type metadata accessor for CommandGroupPlacement(0) - 8);
      uint64_t v30 = v27 + ((*(unsigned __int8 *)(v29 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v29 + 80));
      uint64_t v31 = *(void *)(v29 + 72);
      uint64_t v62 = v27;
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      do
      {
        outlined init with copy of MainMenuItem.Identifier(v30, (uint64_t)v10, type metadata accessor for CommandGroupPlacement);
        if (*(void *)(a3 + 16))
        {
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          unint64_t v32 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v10);
          if (v33)
          {
            long long v70 = *(_OWORD *)(*(void *)(a3 + 56) + 16 * v32);
            swift_retain();
            swift_bridgeObjectRetain();
            outlined destroy of (MainMenuItem.Identifier, MainMenuItem.Identifier)((uint64_t)v10, type metadata accessor for CommandGroupPlacementBox);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              int v20 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v20 + 2) + 1, 1, v20);
            }
            unint64_t v35 = *((void *)v20 + 2);
            unint64_t v34 = *((void *)v20 + 3);
            if (v35 >= v34 >> 1) {
              int v20 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v34 > 1), v35 + 1, 1, v20);
            }
            *((void *)v20 + 2) = v35 + 1;
            *(_OWORD *)&v20[16 * v35 + 32] = v70;
          }
          else
          {
            outlined destroy of (MainMenuItem.Identifier, MainMenuItem.Identifier)((uint64_t)v10, type metadata accessor for CommandGroupPlacementBox);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
          }
        }
        else
        {
          outlined destroy of (MainMenuItem.Identifier, MainMenuItem.Identifier)((uint64_t)v10, type metadata accessor for CommandGroupPlacementBox);
        }
        v30 += v31;
        --v28;
      }
      while (v28);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      int v25 = v67;
      int v26 = v63;
    }
    uint64_t v36 = *((void *)v20 + 2);
    if (v36 || (*((unsigned char *)v26 + v68[6]) & 1) != 0)
    {
      uint64_t v41 = *v26;
      uint64_t v40 = (void *)v26[1];
      outlined init with copy of MainMenuItem.Identifier((uint64_t)v26 + v68[5], v64, type metadata accessor for MainMenuItem.Identifier);
      if (v36)
      {
        *(void *)&long long v70 = v41;
        uint64_t v71 = MEMORY[0x1E4FBC860];
        uint64_t v63 = v40;
        swift_bridgeObjectRetain();
        specialized ContiguousArray.reserveCapacity(_:)();
        uint64_t v42 = 32;
        do
        {
          swift_retain();
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
          specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized ContiguousArray._endMutation()();
          v42 += 16;
          --v36;
        }
        while (v36);
        uint64_t v43 = v71;
        swift_bridgeObjectRelease();
        uint64_t v41 = v70;
        int v20 = (char *)MEMORY[0x1E4FBC860];
        int v25 = v67;
        int v44 = v63;
      }
      else
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        int v20 = (char *)MEMORY[0x1E4FBC860];
        int v44 = v40;
        uint64_t v43 = MEMORY[0x1E4FBC860];
      }
      uint64_t v37 = (uint64_t)v57;
      *uint64_t v57 = v41;
      *(void *)(v37 + 8) = v44;
      uint64_t v45 = v60;
      outlined init with take of MainMenuItem.Template(v64, v37 + *(int *)(v60 + 20), type metadata accessor for MainMenuItem.Identifier);
      *(void *)(v37 + *(int *)(v45 + 24)) = v43;
      (*v56)(v37, 0, 1, v45);
    }
    else
    {
      uint64_t v37 = (uint64_t)v57;
      uint64_t v38 = v60;
      (*v56)((uint64_t)v57, 1, 1, v60);
      swift_bridgeObjectRelease();
      int v39 = (*v53)(v37, 1, v38);
      int v20 = (char *)MEMORY[0x1E4FBC860];
      if (v39 == 1)
      {
        outlined destroy of MainMenuItem?(v37);
        goto LABEL_31;
      }
    }
    uint64_t v46 = v55;
    outlined init with take of MainMenuItem.Template(v37, v55, type metadata accessor for MainMenuItem);
    outlined init with take of MainMenuItem.Template(v46, v65, type metadata accessor for MainMenuItem);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      int v25 = (void *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v25[2] + 1, 1, v25);
    }
    unint64_t v48 = v25[2];
    unint64_t v47 = v25[3];
    uint64_t v49 = v54;
    if (v48 >= v47 >> 1)
    {
      uint64_t v50 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v47 > 1, v48 + 1, 1, v25);
      uint64_t v49 = v54;
      int v25 = (void *)v50;
    }
    v25[2] = v48 + 1;
    outlined init with take of MainMenuItem.Template(v65, (uint64_t)v25+ ((*(unsigned __int8 *)(v49 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v49 + 80))+ *(void *)(v49 + 72) * v48, type metadata accessor for MainMenuItem);
LABEL_31:
    uint64_t v24 = v66 + 1;
  }
  while (v66 + 1 != v61);
  swift_bridgeObjectRelease();
  return v25;
}

uint64_t outlined destroy of (MainMenuItem.Identifier, MainMenuItem.Identifier)(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t outlined destroy of MainMenuItem?(uint64_t a1)
{
  type metadata accessor for _ContiguousArrayStorage<MainMenuItem.Template>(0, &lazy cache variable for type metadata for MainMenuItem?, type metadata accessor for MainMenuItem, MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t *initializeBufferWithCopyOfBuffer for MainMenuItem.Template(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v15 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (uint64_t *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    uint64_t v8 = a3[5];
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = type metadata accessor for UUID();
    uint64_t v12 = *(void *)(v11 - 8);
    uint64_t v13 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48);
    swift_bridgeObjectRetain();
    if (v13(v10, 10, v11))
    {
      uint64_t v14 = type metadata accessor for MainMenuItem.Identifier(0);
      memcpy(v9, v10, *(void *)(*(void *)(v14 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v9, v10, v11);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v9, 0, 10, v11);
    }
    uint64_t v16 = a3[7];
    *(uint64_t *)((char *)v4 + a3[6]) = *(uint64_t *)((char *)a2 + a3[6]);
    *(uint64_t *)((char *)v4 + v16) = *(uint64_t *)((char *)a2 + v16);
    swift_bridgeObjectRetain();
  }
  return v4;
}

uint64_t destroy for MainMenuItem.Template(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 20);
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v4, 10, v5)) {
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  }

  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for MainMenuItem.Template(void *a1, void *a2, int *a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  uint64_t v7 = a3[5];
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for UUID();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48);
  swift_bridgeObjectRetain();
  if (v12(v9, 10, v10))
  {
    uint64_t v13 = type metadata accessor for MainMenuItem.Identifier(0);
    memcpy(v8, v9, *(void *)(*(void *)(v13 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v8, v9, v10);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 10, v10);
  }
  uint64_t v14 = a3[7];
  *(void *)((char *)a1 + a3[6]) = *(void *)((char *)a2 + a3[6]);
  *(void *)((char *)a1 + v14) = *(void *)((char *)a2 + v14);
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for MainMenuItem.Template(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UUID();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48);
  int v12 = v11(v7, 10, v9);
  int v13 = v11(v8, 10, v9);
  if (!v12)
  {
    if (!v13)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 24))(v7, v8, v9);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v10 + 8))(v7, v9);
    goto LABEL_6;
  }
  if (v13)
  {
LABEL_6:
    uint64_t v14 = type metadata accessor for MainMenuItem.Identifier(0);
    memcpy(v7, v8, *(void *)(*(void *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v7, v8, v9);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 10, v9);
LABEL_7:
  *(void *)((char *)a1 + a3[6]) = *(void *)((char *)a2 + a3[6]);
  *(void *)((char *)a1 + a3[7]) = *(void *)((char *)a2 + a3[7]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_OWORD *initializeWithTake for MainMenuItem.Template(_OWORD *a1, _OWORD *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UUID();
  uint64_t v10 = *(void *)(v9 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 10, v9))
  {
    uint64_t v11 = type metadata accessor for MainMenuItem.Identifier(0);
    memcpy(v7, v8, *(void *)(*(void *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v7, v8, v9);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 10, v9);
  }
  uint64_t v12 = a3[7];
  *(void *)((char *)a1 + a3[6]) = *(void *)((char *)a2 + a3[6]);
  *(void *)((char *)a1 + v12) = *(void *)((char *)a2 + v12);
  return a1;
}

void *assignWithTake for MainMenuItem.Template(void *a1, void *a2, int *a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = a3[5];
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for UUID();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v11 + 48);
  int v13 = v12(v8, 10, v10);
  int v14 = v12(v9, 10, v10);
  if (!v13)
  {
    if (!v14)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v8, v9, v10);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v11 + 8))(v8, v10);
    goto LABEL_6;
  }
  if (v14)
  {
LABEL_6:
    uint64_t v15 = type metadata accessor for MainMenuItem.Identifier(0);
    memcpy(v8, v9, *(void *)(*(void *)(v15 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v8, v9, v10);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 10, v10);
LABEL_7:
  uint64_t v16 = a3[7];
  *(void *)((char *)a1 + a3[6]) = *(void *)((char *)a2 + a3[6]);
  *(void *)((char *)a1 + v16) = *(void *)((char *)a2 + v16);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for MainMenuItem.Template(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1882C19B0);
}

uint64_t __swift_get_extra_inhabitant_indexTm_7(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for MainMenuItem.Identifier(0);
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 20);
    return v9(v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for MainMenuItem.Template(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1882C1A78);
}

uint64_t __swift_store_extra_inhabitant_indexTm_7(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }
  else
  {
    uint64_t v7 = type metadata accessor for MainMenuItem.Identifier(0);
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 20);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t type metadata completion function for MainMenuItem.Template()
{
  uint64_t result = type metadata accessor for MainMenuItem.Identifier(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

void *type metadata accessor for MainMenuItem.Template.Options()
{
  return &unk_1ED411A50;
}

unint64_t lazy protocol witness table accessor for type MainMenuItem.Template.Options and conformance MainMenuItem.Template.Options()
{
  unint64_t result = lazy protocol witness table cache variable for type MainMenuItem.Template.Options and conformance MainMenuItem.Template.Options;
  if (!lazy protocol witness table cache variable for type MainMenuItem.Template.Options and conformance MainMenuItem.Template.Options)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MainMenuItem.Template.Options and conformance MainMenuItem.Template.Options);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type MainMenuItem.Template.Options and conformance MainMenuItem.Template.Options;
  if (!lazy protocol witness table cache variable for type MainMenuItem.Template.Options and conformance MainMenuItem.Template.Options)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MainMenuItem.Template.Options and conformance MainMenuItem.Template.Options);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type MainMenuItem.Template.Options and conformance MainMenuItem.Template.Options;
  if (!lazy protocol witness table cache variable for type MainMenuItem.Template.Options and conformance MainMenuItem.Template.Options)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MainMenuItem.Template.Options and conformance MainMenuItem.Template.Options);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type MainMenuItem.Template.Options and conformance MainMenuItem.Template.Options;
  if (!lazy protocol witness table cache variable for type MainMenuItem.Template.Options and conformance MainMenuItem.Template.Options)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MainMenuItem.Template.Options and conformance MainMenuItem.Template.Options);
  }
  return result;
}

uint64_t View.accessibilityActivationPoint(_:)(uint64_t a1, uint64_t a2)
{
  return View.accessibilityActivationPoint(_:)(a1, a2);
}

{
  return View.accessibilityActivationPoint(_:)(a1, a2);
}

{
  uint64_t v3[2];
  long long v4;

  v3[0] = 0;
  v3[1] = 0;
  unint64_t v4 = xmmword_18834C6D0;
  return View.accessibilityActivationPoint(_:for:)(v3, a1, a2);
}

uint64_t ModifiedContent<>.accessibilityActivationPoint(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>, double a4@<D1>)
{
  return ModifiedContent<>.accessibilityActivationPoint(_:)(a1, 0, a2, a3, a4);
}

{
  return ModifiedContent<>.accessibilityActivationPoint(_:)(a1, 1, a2, a3, a4);
}

uint64_t ModifiedContent<>.accessibilityActivationPoint(_:)@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X8>, double a4@<D0>, double a5@<D1>)
{
  v6[0] = 0;
  v6[1] = 0;
  long long v7 = xmmword_18834C6D0;
  return ModifiedContent<>.accessibilityActivationPoint(_:for:)(v6, a1, a2, a3, a4, a5);
}

uint64_t View.accessibilityActivationPoint(_:isEnabled:)(char a1, uint64_t a2, uint64_t a3, double a4, double a5)
{
  return View.accessibilityActivationPoint(_:isEnabled:)(a1, a2, a3, 0, a4, a5);
}

{
  return View.accessibilityActivationPoint(_:isEnabled:)(a1, a2, a3, 1, a4, a5);
}

uint64_t View.accessibilityActivationPoint(_:isEnabled:)(char a1, uint64_t a2, uint64_t a3, char a4, double a5, double a6)
{
  double v14 = a5;
  double v15 = a6;
  char v16 = a4;
  AccessibilityActivationPointStorage.init(kind:point:)();
  long long v10 = v17;
  uint64_t v11 = v18;
  uint64_t v12 = v19;
  uint64_t v13 = v20;
  View.accessibility<A>(_:_:isEnabled:)(MEMORY[0x1E4F40AF0], (uint64_t)&v10, a1, a2, MEMORY[0x1E4F40AF0], a3);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t ModifiedContent<>.accessibilityActivationPoint(_:isEnabled:)@<X0>(char a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X8>, double a4@<D0>, double a5@<D1>)
{
  return ModifiedContent<>.accessibilityActivationPoint(_:isEnabled:)(a1, a2, 0, a3, a4, a5);
}

{
  return ModifiedContent<>.accessibilityActivationPoint(_:isEnabled:)(a1, a2, 1, a3, a4, a5);
}

uint64_t ModifiedContent<>.accessibilityActivationPoint(_:isEnabled:)@<X0>(char a1@<W0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X8>, double a5@<D0>, double a6@<D1>)
{
  double v15 = a5;
  double v16 = a6;
  char v17 = a3;
  AccessibilityActivationPointStorage.init(kind:point:)();
  long long v11 = v18;
  uint64_t v12 = v19;
  uint64_t v13 = v20;
  uint64_t v14 = v21;
  unint64_t v9 = lazy protocol witness table accessor for type AccessibilityActivationPointStorage? and conformance <A> A?();
  ModifiedContent<>.update<A>(_:combining:isEnabled:)(MEMORY[0x1E4F40AF0], (uint64_t)&v11, a1, a2, MEMORY[0x1E4F40AF0], MEMORY[0x1E4F40AE8], v9, a4);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t View.accessibilityDragPoint(_:description:isEnabled:)(uint64_t a1, uint64_t a2, char a3, double a4, double a5, uint64_t a6, char a7, uint64_t a8, uint64_t a9)
{
  double v17 = a4;
  double v18 = a5;
  char v19 = 1;
  outlined copy of Text.Storage(a1, a2, a3 & 1);
  swift_bridgeObjectRetain();
  AccessibilityActivationPointStorage.init(kind:point:)();
  long long v13 = v20;
  uint64_t v14 = v21;
  uint64_t v15 = v22;
  uint64_t v16 = v23;
  View.accessibility<A>(_:_:isEnabled:)(MEMORY[0x1E4F40AF0], (uint64_t)&v13, a7, a8, MEMORY[0x1E4F40AF0], a9);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t View.accessibilityDragPoint(_:description:isEnabled:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, double a8, double a9)
{
  return View.accessibilityDragPoint(_:description:isEnabled:)(a8, a9, a1, a2, a3, a4, a5, a6, a7, (void (*)(double, double))View.accessibilityDragPoint(_:description:isEnabled:));
}

uint64_t View.accessibilityDragPoint<A>(_:description:isEnabled:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, double a7, double a8)
{
  return View.accessibilityDragPoint<A>(_:description:isEnabled:)(a1, a7, a8, a2, a3, a4, a5, a6, (void (*)(double, double))View.accessibilityDragPoint(_:description:isEnabled:));
}

uint64_t View.accessibilityDropPoint(_:description:isEnabled:)(uint64_t a1, uint64_t a2, char a3, double a4, double a5, uint64_t a6, char a7, uint64_t a8, uint64_t a9)
{
  double v17 = a4;
  double v18 = a5;
  char v19 = 1;
  outlined copy of Text.Storage(a1, a2, a3 & 1);
  swift_bridgeObjectRetain();
  AccessibilityActivationPointStorage.init(kind:point:)();
  long long v13 = v20;
  uint64_t v14 = v21;
  uint64_t v15 = v22;
  uint64_t v16 = v23;
  View.accessibility<A>(_:_:isEnabled:)(MEMORY[0x1E4F40AF0], (uint64_t)&v13, a7, a8, MEMORY[0x1E4F40AF0], a9);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t View.accessibilityDropPoint(_:description:isEnabled:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, double a8, double a9)
{
  return View.accessibilityDragPoint(_:description:isEnabled:)(a8, a9, a1, a2, a3, a4, a5, a6, a7, (void (*)(double, double))View.accessibilityDropPoint(_:description:isEnabled:));
}

uint64_t View.accessibilityDragPoint(_:description:isEnabled:)(double a1, double a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void (*a10)(double, double))
{
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v13 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v15 = v14;
  char v17 = v16 & 1;
  a10(a1, a2);
  outlined consume of Text.Storage(v13, v15, v17);

  return swift_bridgeObjectRelease();
}

uint64_t View.accessibilityDropPoint<A>(_:description:isEnabled:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, double a7, double a8)
{
  return View.accessibilityDragPoint<A>(_:description:isEnabled:)(a1, a7, a8, a2, a3, a4, a5, a6, (void (*)(double, double))View.accessibilityDropPoint(_:description:isEnabled:));
}

uint64_t View.accessibilityDragPoint<A>(_:description:isEnabled:)(uint64_t a1, double a2, double a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void (*a9)(double, double))
{
  double v12 = MEMORY[0x1F4188790](a1);
  (*(void (**)(char *, double))(v14 + 16))((char *)&v21 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0), v12);
  uint64_t v15 = Text.init<A>(_:)();
  uint64_t v17 = v16;
  char v19 = v18 & 1;
  a9(a2, a3);
  outlined consume of Text.Storage(v15, v17, v19);
  return swift_bridgeObjectRelease();
}

uint64_t ModifiedContent<>.accessibilityDragPoint(_:description:isEnabled:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, char a4@<W4>, uint64_t a5@<X5>, uint64_t a6@<X8>, double a7@<D0>, double a8@<D1>)
{
  double v17 = a7;
  double v18 = a8;
  char v19 = 1;
  outlined copy of Text.Storage(a1, a2, a3 & 1);
  swift_bridgeObjectRetain();
  AccessibilityActivationPointStorage.init(kind:point:)();
  long long v13 = v20;
  uint64_t v14 = v21;
  uint64_t v15 = v22;
  uint64_t v16 = v23;
  unint64_t v11 = lazy protocol witness table accessor for type AccessibilityActivationPointStorage? and conformance <A> A?();
  ModifiedContent<>.update<A>(_:combining:isEnabled:)(MEMORY[0x1E4F40AF0], (uint64_t)&v13, a4, a5, MEMORY[0x1E4F40AF0], MEMORY[0x1E4F40AE8], v11, a6);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t ModifiedContent<>.accessibilityDragPoint(_:description:isEnabled:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, double a7, double a8)
{
  return ModifiedContent<>.accessibilityDragPoint(_:description:isEnabled:)(a7, a8, a1, a2, a3, a4, a5, a6, (void (*)(double, double))ModifiedContent<>.accessibilityDragPoint(_:description:isEnabled:));
}

uint64_t ModifiedContent<>.accessibilityDragPoint<A>(_:description:isEnabled:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, double a6, double a7)
{
  return ModifiedContent<>.accessibilityDragPoint<A>(_:description:isEnabled:)(a1, a6, a7, a2, a3, a4, a5, (void (*)(double, double))ModifiedContent<>.accessibilityDragPoint(_:description:isEnabled:));
}

uint64_t ModifiedContent<>.accessibilityDropPoint(_:description:isEnabled:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, char a4@<W4>, uint64_t a5@<X5>, uint64_t a6@<X8>, double a7@<D0>, double a8@<D1>)
{
  double v17 = a7;
  double v18 = a8;
  char v19 = 1;
  outlined copy of Text.Storage(a1, a2, a3 & 1);
  swift_bridgeObjectRetain();
  AccessibilityActivationPointStorage.init(kind:point:)();
  long long v13 = v20;
  uint64_t v14 = v21;
  uint64_t v15 = v22;
  uint64_t v16 = v23;
  unint64_t v11 = lazy protocol witness table accessor for type AccessibilityActivationPointStorage? and conformance <A> A?();
  ModifiedContent<>.update<A>(_:combining:isEnabled:)(MEMORY[0x1E4F40AF0], (uint64_t)&v13, a4, a5, MEMORY[0x1E4F40AF0], MEMORY[0x1E4F40AE8], v11, a6);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t ModifiedContent<>.accessibilityDropPoint(_:description:isEnabled:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, double a7, double a8)
{
  return ModifiedContent<>.accessibilityDragPoint(_:description:isEnabled:)(a7, a8, a1, a2, a3, a4, a5, a6, (void (*)(double, double))ModifiedContent<>.accessibilityDropPoint(_:description:isEnabled:));
}

uint64_t ModifiedContent<>.accessibilityDragPoint(_:description:isEnabled:)(double a1, double a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void (*a9)(double, double))
{
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v12 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v14 = v13;
  char v16 = v15 & 1;
  a9(a1, a2);
  outlined consume of Text.Storage(v12, v14, v16);

  return swift_bridgeObjectRelease();
}

uint64_t ModifiedContent<>.accessibilityDropPoint<A>(_:description:isEnabled:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, double a6, double a7)
{
  return ModifiedContent<>.accessibilityDragPoint<A>(_:description:isEnabled:)(a1, a6, a7, a2, a3, a4, a5, (void (*)(double, double))ModifiedContent<>.accessibilityDropPoint(_:description:isEnabled:));
}

uint64_t ModifiedContent<>.accessibilityDragPoint<A>(_:description:isEnabled:)(uint64_t a1, double a2, double a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void (*a8)(double, double))
{
  double v11 = MEMORY[0x1F4188790](a1);
  (*(void (**)(char *, double))(v13 + 16))((char *)&v20 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), v11);
  uint64_t v14 = Text.init<A>(_:)();
  uint64_t v16 = v15;
  char v18 = v17 & 1;
  a8(a2, a3);
  outlined consume of Text.Storage(v14, v16, v18);
  return swift_bridgeObjectRelease();
}

uint64_t View.accessibilityActivationPoint(_:for:)(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  outlined copy of Text.Suffix.Storage(*a1, a1[1], a1[2]);
  AccessibilityActivationPointStorage.init(kind:point:)();
  long long v10 = v6;
  uint64_t v11 = v7;
  uint64_t v12 = v8;
  uint64_t v13 = v9;
  View.accessibility<A>(_:_:isEnabled:)(MEMORY[0x1E4F40AF0], (uint64_t)&v10, 1, a2, MEMORY[0x1E4F40AF0], a3);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t ModifiedContent<>.accessibilityActivationPoint(_:for:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X8>, double a5@<D0>, double a6@<D1>)
{
  uint64_t v8 = a1[1];
  uint64_t v9 = a1[2];
  *(void *)&long long v11 = *a1;
  uint64_t v12 = v9;
  double v15 = a5;
  double v16 = a6;
  char v17 = a3;
  outlined copy of Text.Suffix.Storage(v11, v8, v9);
  AccessibilityActivationPointStorage.init(kind:point:)();
  long long v11 = v18;
  LOBYTE(v12) = v19;
  uint64_t v13 = v20;
  uint64_t v14 = v21;
  ModifiedContent<>.accessibilityActivationPoint(_:)(&v11, a2, a4);
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

unint64_t lazy protocol witness table accessor for type AccessibilityActivationPointStorage? and conformance <A> A?()
{
  unint64_t result = lazy protocol witness table cache variable for type AccessibilityActivationPointStorage? and conformance <A> A?;
  if (!lazy protocol witness table cache variable for type AccessibilityActivationPointStorage? and conformance <A> A?)
  {
    type metadata accessor for AccessibilityActivationPointStorage?();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityActivationPointStorage? and conformance <A> A?);
  }
  return result;
}

void type metadata accessor for AccessibilityActivationPointStorage?()
{
  if (!lazy cache variable for type metadata for AccessibilityActivationPointStorage?)
  {
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for AccessibilityActivationPointStorage?);
    }
  }
}

uint64_t View.accessibilityDragPoint(_:description:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v7[0] = a1;
  v7[1] = a2;
  void v7[2] = a3 & 1;
  v7[3] = a4;
  return View.accessibilityActivationPoint(_:for:)(v7, a5, a6);
}

uint64_t View.accessibilityDragPoint(_:description:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v8 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v10 = v9;
  char v12 = v11 & 1;
  v15[0] = v8;
  v15[1] = v9;
  void v15[2] = v11 & 1;
  long long v15[3] = v13;
  View.accessibilityActivationPoint(_:for:)(v15, a5, a6);
  outlined consume of Text.Storage(v8, v10, v12);

  return swift_bridgeObjectRelease();
}

uint64_t View.accessibilityDragPoint<A>(_:description:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  double v6 = MEMORY[0x1F4188790](a1);
  (*(void (**)(char *, double))(v8 + 16))((char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), v6);
  uint64_t v9 = Text.init<A>(_:)();
  uint64_t v11 = v10;
  char v13 = v12 & 1;
  v16[0] = v9;
  v16[1] = v10;
  _OWORD v16[2] = v12 & 1;
  long long v16[3] = v14;
  View.accessibilityActivationPoint(_:for:)(v16, a2, a4);
  outlined consume of Text.Storage(v9, v11, v13);
  return swift_bridgeObjectRelease();
}

uint64_t View.accessibilityDropPoint(_:description:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v7[0] = a1;
  v7[1] = a2;
  void v7[2] = a3 & 1 | 0x4000000000000000;
  v7[3] = a4;
  return View.accessibilityActivationPoint(_:for:)(v7, a5, a6);
}

uint64_t View.accessibilityDropPoint(_:description:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v8 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v10 = v9;
  char v12 = v11 & 1;
  v15[0] = v8;
  v15[1] = v9;
  void v15[2] = v11 & 1 | 0x4000000000000000;
  long long v15[3] = v13;
  View.accessibilityActivationPoint(_:for:)(v15, a5, a6);
  outlined consume of Text.Storage(v8, v10, v12);

  return swift_bridgeObjectRelease();
}

uint64_t View.accessibilityDropPoint<A>(_:description:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  double v6 = MEMORY[0x1F4188790](a1);
  (*(void (**)(char *, double))(v8 + 16))((char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), v6);
  uint64_t v9 = Text.init<A>(_:)();
  uint64_t v11 = v10;
  char v13 = v12 & 1;
  v16[0] = v9;
  v16[1] = v10;
  _OWORD v16[2] = v12 & 1 | 0x4000000000000000;
  long long v16[3] = v14;
  View.accessibilityActivationPoint(_:for:)(v16, a2, a4);
  outlined consume of Text.Storage(v9, v11, v13);
  return swift_bridgeObjectRelease();
}

uint64_t ModifiedContent<>.accessibilityDragPoint(_:description:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>, double a7@<D0>, double a8@<D1>)
{
  v9[0] = a1;
  v9[1] = a2;
  void v9[2] = a3 & 1;
  void v9[3] = a4;
  return ModifiedContent<>.accessibilityActivationPoint(_:for:)(v9, a5, 1, a6, a7, a8);
}

uint64_t ModifiedContent<>.accessibilityDragPoint(_:description:)@<X0>(uint64_t a1@<X4>, uint64_t a2@<X8>, double a3@<D0>, double a4@<D1>)
{
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v8 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v10 = v9;
  char v12 = v11 & 1;
  v15[0] = v8;
  v15[1] = v9;
  void v15[2] = v11 & 1;
  long long v15[3] = v13;
  ModifiedContent<>.accessibilityActivationPoint(_:for:)(v15, a1, 1, a2, a3, a4);
  outlined consume of Text.Storage(v8, v10, v12);

  return swift_bridgeObjectRelease();
}

uint64_t ModifiedContent<>.accessibilityDragPoint<A>(_:description:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, double a4@<D0>, double a5@<D1>)
{
  double v9 = MEMORY[0x1F4188790](a1);
  (*(void (**)(char *, double))(v11 + 16))((char *)v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), v9);
  uint64_t v12 = Text.init<A>(_:)();
  uint64_t v14 = v13;
  char v16 = v15 & 1;
  v19[0] = v12;
  v19[1] = v13;
  _OWORD v19[2] = v15 & 1;
  v19[3] = v17;
  ModifiedContent<>.accessibilityActivationPoint(_:for:)(v19, a2, 1, a3, a4, a5);
  outlined consume of Text.Storage(v12, v14, v16);
  return swift_bridgeObjectRelease();
}

uint64_t ModifiedContent<>.accessibilityDropPoint(_:description:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>, double a7@<D0>, double a8@<D1>)
{
  v9[0] = a1;
  v9[1] = a2;
  void v9[2] = a3 & 1 | 0x4000000000000000;
  void v9[3] = a4;
  return ModifiedContent<>.accessibilityActivationPoint(_:for:)(v9, a5, 1, a6, a7, a8);
}

uint64_t ModifiedContent<>.accessibilityDropPoint(_:description:)@<X0>(uint64_t a1@<X4>, uint64_t a2@<X8>, double a3@<D0>, double a4@<D1>)
{
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v8 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v10 = v9;
  char v12 = v11 & 1;
  v15[0] = v8;
  v15[1] = v9;
  void v15[2] = v11 & 1 | 0x4000000000000000;
  long long v15[3] = v13;
  ModifiedContent<>.accessibilityActivationPoint(_:for:)(v15, a1, 1, a2, a3, a4);
  outlined consume of Text.Storage(v8, v10, v12);

  return swift_bridgeObjectRelease();
}

uint64_t ModifiedContent<>.accessibilityDropPoint<A>(_:description:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, double a4@<D0>, double a5@<D1>)
{
  double v9 = MEMORY[0x1F4188790](a1);
  (*(void (**)(char *, double))(v11 + 16))((char *)v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), v9);
  uint64_t v12 = Text.init<A>(_:)();
  uint64_t v14 = v13;
  char v16 = v15 & 1;
  v19[0] = v12;
  v19[1] = v13;
  _OWORD v19[2] = v15 & 1 | 0x4000000000000000;
  v19[3] = v17;
  ModifiedContent<>.accessibilityActivationPoint(_:for:)(v19, a2, 1, a3, a4, a5);
  outlined consume of Text.Storage(v12, v14, v16);
  return swift_bridgeObjectRelease();
}

uint64_t ModifiedContent<>.accessibilityActivationPoint(_:)@<X0>(long long *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = *((unsigned __int8 *)a1 + 16);
  long long v8 = *a1;
  uint64_t v9 = v5;
  long long v10 = *(long long *)((char *)a1 + 24);
  unint64_t v6 = lazy protocol witness table accessor for type AccessibilityActivationPointStorage? and conformance <A> A?();
  return ModifiedContent<>.update<A>(_:combining:isEnabled:)(MEMORY[0x1E4F40AF0], (uint64_t)&v8, 1, a2, MEMORY[0x1E4F40AF0], MEMORY[0x1E4F40AE8], v6, a3);
}

BOOL static AdaptableTabBarPlacement.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

void static AdaptableTabBarPlacement.automatic.getter(unsigned char *a1@<X8>)
{
  *a1 = 2;
}

uint64_t View.defaultAdaptableTabBarPlacement(_:)()
{
  return swift_release();
}

uint64_t EnvironmentValues.defaultAdaptableTabBarPlacement.getter()
{
  if (*(void *)(v0 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<DefaultAdaptableTabBarPlacementKey>();
    lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<AdaptableTabBarPlacement> and conformance _EnvironmentKeyWritingModifier<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<DefaultAdaptableTabBarPlacementKey> and conformance EnvironmentPropertyKey<A>, (void (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<DefaultAdaptableTabBarPlacementKey>);
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<DefaultAdaptableTabBarPlacementKey>();
    lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<AdaptableTabBarPlacement> and conformance _EnvironmentKeyWritingModifier<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<DefaultAdaptableTabBarPlacementKey> and conformance EnvironmentPropertyKey<A>, (void (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<DefaultAdaptableTabBarPlacementKey>);
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  return swift_release_n();
}

uint64_t key path getter for EnvironmentValues.defaultAdaptableTabBarPlacement : EnvironmentValues@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  if (*(void *)(a1 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<DefaultAdaptableTabBarPlacementKey>();
    lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<AdaptableTabBarPlacement> and conformance _EnvironmentKeyWritingModifier<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<DefaultAdaptableTabBarPlacementKey> and conformance EnvironmentPropertyKey<A>, (void (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<DefaultAdaptableTabBarPlacementKey>);
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<DefaultAdaptableTabBarPlacementKey>();
    lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<AdaptableTabBarPlacement> and conformance _EnvironmentKeyWritingModifier<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<DefaultAdaptableTabBarPlacementKey> and conformance EnvironmentPropertyKey<A>, (void (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<DefaultAdaptableTabBarPlacementKey>);
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  uint64_t result = swift_release_n();
  *a2 = v4;
  return result;
}

uint64_t key path setter for EnvironmentValues.defaultAdaptableTabBarPlacement : EnvironmentValues()
{
  return EnvironmentValues.defaultAdaptableTabBarPlacement.setter();
}

uint64_t sub_1882C38C8()
{
  return EnvironmentValues.defaultAdaptableTabBarPlacement.setter();
}

uint64_t EnvironmentValues.defaultAdaptableTabBarPlacement.setter()
{
  type metadata accessor for EnvironmentPropertyKey<DefaultAdaptableTabBarPlacementKey>();
  lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<AdaptableTabBarPlacement> and conformance _EnvironmentKeyWritingModifier<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<DefaultAdaptableTabBarPlacementKey> and conformance EnvironmentPropertyKey<A>, (void (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<DefaultAdaptableTabBarPlacementKey>);
  swift_retain();
  PropertyList.subscript.setter();
  if (*(void *)(v0 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  return swift_release();
}

void static AdaptableTabBarPlacement.tabBar.getter(unsigned char *a1@<X8>)
{
  *a1 = 0;
}

void static AdaptableTabBarPlacement.sidebar.getter(unsigned char *a1@<X8>)
{
  *a1 = 1;
}

void AdaptableTabBarPlacement.hash(into:)()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int AdaptableTabBarPlacement.hashValue.getter()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

ValueMetadata *type metadata accessor for AdaptableTabBarPlacement()
{
  return &type metadata for AdaptableTabBarPlacement;
}

uint64_t sub_1882C3AE4()
{
  return swift_getWitnessTable();
}

void type metadata accessor for _EnvironmentKeyWritingModifier<AdaptableTabBarPlacement>()
{
  if (!lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<AdaptableTabBarPlacement>)
  {
    unint64_t v0 = type metadata accessor for _EnvironmentKeyWritingModifier();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<AdaptableTabBarPlacement>);
    }
  }
}

unsigned char *storeEnumTagSinglePayload for AdaptableTabBarPlacement(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1882C3CA4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AdaptableTabBarPlacement.Placement()
{
  return &type metadata for AdaptableTabBarPlacement.Placement;
}

unint64_t lazy protocol witness table accessor for type AdaptableTabBarPlacement.Placement and conformance AdaptableTabBarPlacement.Placement()
{
  unint64_t result = lazy protocol witness table cache variable for type AdaptableTabBarPlacement.Placement and conformance AdaptableTabBarPlacement.Placement;
  if (!lazy protocol witness table cache variable for type AdaptableTabBarPlacement.Placement and conformance AdaptableTabBarPlacement.Placement)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AdaptableTabBarPlacement.Placement and conformance AdaptableTabBarPlacement.Placement);
  }
  return result;
}

void type metadata accessor for EnvironmentPropertyKey<DefaultAdaptableTabBarPlacementKey>()
{
  if (!lazy cache variable for type metadata for EnvironmentPropertyKey<DefaultAdaptableTabBarPlacementKey>)
  {
    unint64_t v0 = type metadata accessor for EnvironmentPropertyKey();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<DefaultAdaptableTabBarPlacementKey>);
    }
  }
}

uint64_t lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<AdaptableTabBarPlacement> and conformance _EnvironmentKeyWritingModifier<A>(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

ValueMetadata *type metadata accessor for DefaultAdaptableTabBarPlacementKey()
{
  return &type metadata for DefaultAdaptableTabBarPlacementKey;
}

id UIHostingController.findMatchedTransitionDestinationView<A>(id:namespace:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = *MEMORY[0x1E4FBC8C8] & *v4;
  id result = objc_msgSend(v4, sel_view);
  if (result)
  {
    uint64_t v11 = result;
    MEMORY[0x1F4188790](result);
    uint64_t v12 = *(void *)(v9 + 88);
    _OWORD v16[2] = *(void *)(v9 + 80);
    long long v16[3] = a3;
    uint64_t v16[4] = v12;
    v16[5] = a4;
    _OWORD v16[6] = a2;
    v16[7] = a1;
    id v14 = _sSo6UIViewC7SwiftUIE20firstDescendantWhereyABSgSbABXEF05_sSo6a2C7B108UIE15firstDescendant6ofType9predicatexSgxm_SbxXEtlFSbABXEfU_AC39MatchedTransitionDestinationMarkingViewC_Tg5xSbRi_zRi0_zlyAC0stuvW0CIsgnd_Tf1cn_nTf4ng_n(v13, (uint64_t (*)(uint64_t *))partial apply for closure #1 in UIHostingController.findMatchedTransitionDestinationView<A>(id:namespace:), (uint64_t)v16);
    type metadata accessor for MatchedTransitionDestinationMarkingView();
    uint64_t v15 = swift_dynamicCastClass();

    if (!v15) {
    return (id)v15;
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t View._matchedTransitionDestination<A>(id:in:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _convertToAnyHashable<A>(_:)();
  v9[0] = a2;
  MEMORY[0x18C113660](v9, a3, &unk_1ED492B20, a5);
  return outlined destroy of MatchedTransitionSourceSourceMarkingEffect((uint64_t)v9);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance MatchedTransitionDestinationMarkingEffect(void *a1, void *a2)
{
  if (*a1 == *a2) {
    JUMPOUT(0x18C1174E0);
  }
  return 0;
}

uint64_t protocol witness for _RendererEffect.effectValue(size:) in conformance MatchedTransitionDestinationMarkingEffect@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = (void *)swift_allocObject();
  void v5[5] = a1;
  v5[6] = lazy protocol witness table accessor for type MatchedTransitionDestinationMarkingEffect and conformance MatchedTransitionDestinationMarkingEffect();
  uint64_t v6 = swift_allocObject();
  _OWORD v5[2] = v6;
  uint64_t result = outlined init with copy of MatchedTransitionDestinationMarkingEffect(v2, v6 + 16);
  *(void *)a2 = v5;
  *(_DWORD *)(a2 + 8) = 0;
  *(unsigned char *)(a2 + 12) = 3;
  return result;
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance MatchedTransitionDestinationMarkingEffect()
{
  return static RendererEffect.makeRendererEffect(effect:inputs:body:)();
}

void protocol witness for ViewModifier.body(content:) in conformance MatchedTransitionDestinationMarkingEffect()
{
}

BOOL MatchedTransitionDestinationMarkingEffect.needsUpdateFor(newValue:)(uint64_t a1)
{
  outlined init with copy of TableColumnList(a1, (uint64_t)v14);
  type metadata accessor for PlatformGroupFactory();
  if ((swift_dynamicCast() & 1) == 0) {
    memset(v13, 0, sizeof(v13));
  }
  outlined init with copy of MatchedTransitionDestinationMarkingEffect(v1, (uint64_t)v12);
  outlined init with copy of MatchedTransitionDestinationMarkingEffect?((uint64_t)v13, (uint64_t)v8);
  outlined init with copy of MatchedTransitionDestinationMarkingEffect?((uint64_t)v12, (uint64_t)v10);
  if (v9)
  {
    outlined init with copy of MatchedTransitionDestinationMarkingEffect?((uint64_t)v8, (uint64_t)&v6);
    if ((void)v11)
    {
      v5[0] = v10[0];
      v5[1] = v10[1];
      _OWORD v5[2] = v11;
      if (v6 == *(void *)&v10[0]) {
        char v2 = MEMORY[0x18C1174E0](&v7, (char *)v5 + 8);
      }
      else {
        char v2 = 0;
      }
      outlined destroy of MatchedTransitionSourceSourceMarkingEffect((uint64_t)v5);
      int v3 = type metadata accessor for MatchedTransitionDestinationMarkingEffect?;
      outlined destroy of MatchedTransitionDestinationMarkingEffect?((uint64_t)v12, (uint64_t (*)(void))type metadata accessor for MatchedTransitionDestinationMarkingEffect?);
      outlined destroy of MatchedTransitionSourceSourceMarkingEffect((uint64_t)&v6);
    }
    else
    {
      outlined destroy of MatchedTransitionDestinationMarkingEffect?((uint64_t)v12, (uint64_t (*)(void))type metadata accessor for MatchedTransitionDestinationMarkingEffect?);
      outlined destroy of MatchedTransitionSourceSourceMarkingEffect((uint64_t)&v6);
      char v2 = 0;
      int v3 = type metadata accessor for (MatchedTransitionDestinationMarkingEffect?, MatchedTransitionDestinationMarkingEffect?);
    }
  }
  else
  {
    outlined destroy of MatchedTransitionDestinationMarkingEffect?((uint64_t)v12, (uint64_t (*)(void))type metadata accessor for MatchedTransitionDestinationMarkingEffect?);
    if ((void)v11) {
      int v3 = type metadata accessor for (MatchedTransitionDestinationMarkingEffect?, MatchedTransitionDestinationMarkingEffect?);
    }
    else {
      int v3 = type metadata accessor for MatchedTransitionDestinationMarkingEffect?;
    }
    if ((void)v11) {
      char v2 = 0;
    }
    else {
      char v2 = -1;
    }
  }
  outlined destroy of MatchedTransitionDestinationMarkingEffect?((uint64_t)v8, (uint64_t (*)(void))v3);
  outlined destroy of MatchedTransitionDestinationMarkingEffect?((uint64_t)v13, (uint64_t (*)(void))type metadata accessor for MatchedTransitionDestinationMarkingEffect?);
  return (v2 & 1) == 0;
}

id protocol witness for PlatformGroupFactory.makePlatformGroup() in conformance MatchedTransitionDestinationMarkingEffect()
{
  outlined init with copy of AnyHashable((uint64_t)(v0 + 1), (uint64_t)v7);
  uint64_t v1 = *v0;
  char v2 = (objc_class *)type metadata accessor for MatchedTransitionDestinationMarkingView();
  int v3 = (char *)objc_allocWithZone(v2);
  outlined init with copy of AnyHashable((uint64_t)v7, (uint64_t)&v3[OBJC_IVAR____TtC7SwiftUI39MatchedTransitionDestinationMarkingView_id]);
  *(void *)&v3[OBJC_IVAR____TtC7SwiftUI39MatchedTransitionDestinationMarkingView_namespace] = v1;
  v6.receiver = v3;
  v6.super_class = v2;
  id v4 = objc_msgSendSuper2(&v6, sel_initWithFrame_, 0.0, 0.0, 0.0, 0.0);
  outlined destroy of AnyHashable((uint64_t)v7);
  return v4;
}

uint64_t protocol witness for PlatformGroupFactory.updatePlatformGroup(_:) in conformance MatchedTransitionDestinationMarkingEffect()
{
  type metadata accessor for MatchedTransitionDestinationMarkingView();
  swift_unknownObjectRetain();
  uint64_t v1 = swift_dynamicCastClass();
  if (v1)
  {
    uint64_t v2 = v1;
    uint64_t v3 = v1 + OBJC_IVAR____TtC7SwiftUI39MatchedTransitionDestinationMarkingView_id;
    swift_beginAccess();
    outlined assign with copy of AnyHashable((uint64_t)(v0 + 1), v3);
    swift_endAccess();
    *(void *)(v2 + OBJC_IVAR____TtC7SwiftUI39MatchedTransitionDestinationMarkingView_namespace) = *v0;
    return swift_unknownObjectRelease();
  }
  else
  {
    return swift_unknownObjectRelease();
  }
}

uint64_t MatchedTransitionDestinationMarkingView.__ivar_destroyer()
{
  return outlined destroy of AnyHashable(v0 + OBJC_IVAR____TtC7SwiftUI39MatchedTransitionDestinationMarkingView_id);
}

uint64_t type metadata accessor for MatchedTransitionDestinationMarkingView()
{
  return self;
}

uint64_t sub_1882C4568()
{
  return swift_getWitnessTable();
}

void *type metadata accessor for MatchedTransitionDestinationMarkingEffect()
{
  return &unk_1ED492B20;
}

_UNKNOWN **base witness table accessor for ViewModifier in MatchedTransitionDestinationMarkingEffect()
{
  return &protocol witness table for MatchedTransitionDestinationMarkingEffect;
}

unint64_t lazy protocol witness table accessor for type MatchedTransitionDestinationMarkingEffect and conformance MatchedTransitionDestinationMarkingEffect()
{
  unint64_t result = lazy protocol witness table cache variable for type MatchedTransitionDestinationMarkingEffect and conformance MatchedTransitionDestinationMarkingEffect;
  if (!lazy protocol witness table cache variable for type MatchedTransitionDestinationMarkingEffect and conformance MatchedTransitionDestinationMarkingEffect)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MatchedTransitionDestinationMarkingEffect and conformance MatchedTransitionDestinationMarkingEffect);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type MatchedTransitionDestinationMarkingEffect and conformance MatchedTransitionDestinationMarkingEffect;
  if (!lazy protocol witness table cache variable for type MatchedTransitionDestinationMarkingEffect and conformance MatchedTransitionDestinationMarkingEffect)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MatchedTransitionDestinationMarkingEffect and conformance MatchedTransitionDestinationMarkingEffect);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type MatchedTransitionDestinationMarkingEffect and conformance MatchedTransitionDestinationMarkingEffect;
  if (!lazy protocol witness table cache variable for type MatchedTransitionDestinationMarkingEffect and conformance MatchedTransitionDestinationMarkingEffect)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MatchedTransitionDestinationMarkingEffect and conformance MatchedTransitionDestinationMarkingEffect);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type MatchedTransitionDestinationMarkingEffect and conformance MatchedTransitionDestinationMarkingEffect;
  if (!lazy protocol witness table cache variable for type MatchedTransitionDestinationMarkingEffect and conformance MatchedTransitionDestinationMarkingEffect)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MatchedTransitionDestinationMarkingEffect and conformance MatchedTransitionDestinationMarkingEffect);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type MatchedTransitionDestinationMarkingEffect and conformance MatchedTransitionDestinationMarkingEffect;
  if (!lazy protocol witness table cache variable for type MatchedTransitionDestinationMarkingEffect and conformance MatchedTransitionDestinationMarkingEffect)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MatchedTransitionDestinationMarkingEffect and conformance MatchedTransitionDestinationMarkingEffect);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type MatchedTransitionDestinationMarkingEffect and conformance MatchedTransitionDestinationMarkingEffect;
  if (!lazy protocol witness table cache variable for type MatchedTransitionDestinationMarkingEffect and conformance MatchedTransitionDestinationMarkingEffect)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MatchedTransitionDestinationMarkingEffect and conformance MatchedTransitionDestinationMarkingEffect);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type MatchedTransitionDestinationMarkingEffect and conformance MatchedTransitionDestinationMarkingEffect;
  if (!lazy protocol witness table cache variable for type MatchedTransitionDestinationMarkingEffect and conformance MatchedTransitionDestinationMarkingEffect)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MatchedTransitionDestinationMarkingEffect and conformance MatchedTransitionDestinationMarkingEffect);
  }
  return result;
}

uint64_t outlined assign with copy of AnyHashable(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t outlined init with copy of MatchedTransitionDestinationMarkingEffect(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = *(void *)a1;
  long long v3 = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(a2 + 32) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2 + 8, a1 + 8);
  return a2;
}

uint64_t outlined init with copy of MatchedTransitionDestinationMarkingEffect?(uint64_t a1, uint64_t a2)
{
  type metadata accessor for MatchedTransitionDestinationMarkingEffect?();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void type metadata accessor for MatchedTransitionDestinationMarkingEffect?()
{
  if (!lazy cache variable for type metadata for MatchedTransitionDestinationMarkingEffect?)
  {
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for MatchedTransitionDestinationMarkingEffect?);
    }
  }
}

uint64_t outlined destroy of MatchedTransitionDestinationMarkingEffect?(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

void type metadata accessor for (MatchedTransitionDestinationMarkingEffect?, MatchedTransitionDestinationMarkingEffect?)()
{
  if (!lazy cache variable for type metadata for (MatchedTransitionDestinationMarkingEffect?, MatchedTransitionDestinationMarkingEffect?))
  {
    type metadata accessor for MatchedTransitionDestinationMarkingEffect?();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (MatchedTransitionDestinationMarkingEffect?, MatchedTransitionDestinationMarkingEffect?));
    }
  }
}

uint64_t sub_1882C4A40()
{
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);

  return swift_deallocObject();
}

uint64_t sub_1882C4ACC()
{
  __swift_destroy_boxed_opaque_existential_1(v0 + 24);

  return swift_deallocObject();
}

uint64_t closure #1 in UIHostingController.findMatchedTransitionDestinationView<A>(id:namespace:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7 = *(void *)(a5 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v9 = &v24[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  double v11 = MEMORY[0x1F4188790](v10);
  uint64_t v13 = &v24[-v12 - 8];
  uint64_t v15 = *v14;
  uint64_t v16 = *(void *)(*v14 + OBJC_IVAR____TtC7SwiftUI39MatchedTransitionDestinationMarkingView_namespace);
  uint64_t v17 = *(void (**)(unsigned char *, uint64_t, uint64_t, double))(v7 + 16);
  v17(&v24[-v12 - 8], v18, v19, v11);
  if (v16 == a2)
  {
    uint64_t v20 = v15 + OBJC_IVAR____TtC7SwiftUI39MatchedTransitionDestinationMarkingView_id;
    swift_beginAccess();
    outlined init with copy of AnyHashable(v20, (uint64_t)v25);
    ((void (*)(unsigned char *, unsigned char *, uint64_t))v17)(v9, v13, a5);
    AnyHashable.init<A>(_:)();
    char v21 = MEMORY[0x18C1174E0](v25, v24);
    outlined destroy of AnyHashable((uint64_t)v24);
    outlined destroy of AnyHashable((uint64_t)v25);
    (*(void (**)(unsigned char *, uint64_t))(v7 + 8))(v13, a5);
  }
  else
  {
    (*(void (**)(unsigned char *, uint64_t))(v7 + 8))(v13, a5);
    char v21 = 0;
  }
  return v21 & 1;
}

uint64_t partial apply for closure #1 in UIHostingController.findMatchedTransitionDestinationView<A>(id:namespace:)(uint64_t a1)
{
  return closure #1 in UIHostingController.findMatchedTransitionDestinationView<A>(id:namespace:)(a1, v1[6], v1[7], v1[2], v1[3]);
}

uint64_t ColorPicker.$color.getter()
{
  uint64_t v1 = *v0;
  uint64_t v2 = (void *)v0[2];
  swift_retain();
  swift_retain();
  id v3 = v2;
  return v1;
}

uint64_t ColorPicker.init(selection:supportsOpacity:label:)@<X0>(uint64_t a1@<X0>, char a2@<W3>, void (*a3)(void)@<X4>, uint64_t a4@<X8>)
{
  swift_getKeyPath();
  type metadata accessor for UIColor();
  swift_retain();
  swift_retain();
  uint64_t v7 = swift_retain_n();
  id v8 = UIColor.init(_:)(v7);
  type metadata accessor for WritableKeyPath<Color, UIColor>();
  lazy protocol witness table accessor for type WritableKeyPath<Color, UIColor> and conformance WritableKeyPath<A, B>(&lazy protocol witness table cache variable for type WritableKeyPath<Color, UIColor> and conformance WritableKeyPath<A, B>, (void (*)(uint64_t))type metadata accessor for WritableKeyPath<Color, UIColor>);
  uint64_t v9 = dispatch thunk of AnyLocation.projecting<A>(_:)();
  swift_release();
  swift_release();
  swift_release();
  *(void *)a4 = a1;
  *(void *)(a4 + 8) = v9;
  *(void *)(a4 + 16) = v8;
  *(unsigned char *)(a4 + 24) = a2;
  type metadata accessor for ColorPicker();
  a3();
  swift_release();
  swift_release();
  return swift_release();
}

id Color.platformColor.getter()
{
  type metadata accessor for UIColor();
  uint64_t v0 = swift_retain();
  return UIColor.init(_:)(v0);
}

id sub_1882C4EC0@<X0>(void *a1@<X8>)
{
  type metadata accessor for UIColor();
  uint64_t v2 = swift_retain();
  id result = UIColor.init(_:)(v2);
  *a1 = result;
  return result;
}

uint64_t key path setter for Color.platformColor : Color(id *a1, uint64_t *a2)
{
  *a1;
  swift_release();
  type metadata accessor for UIColor();
  lazy protocol witness table accessor for type WritableKeyPath<Color, UIColor> and conformance WritableKeyPath<A, B>((unint64_t *)&lazy protocol witness table cache variable for type UIColor and conformance UIColor, (void (*)(uint64_t))type metadata accessor for UIColor);
  uint64_t result = Color.init<A>(provider:)();
  *a2 = result;
  return result;
}

void type metadata accessor for WritableKeyPath<Color, UIColor>()
{
  if (!lazy cache variable for type metadata for WritableKeyPath<Color, UIColor>)
  {
    type metadata accessor for UIColor();
    unint64_t v0 = type metadata accessor for WritableKeyPath();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for WritableKeyPath<Color, UIColor>);
    }
  }
}

uint64_t type metadata accessor for ColorPicker()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t ColorPicker.init(selection:supportsOpacity:label:)@<X0>(uint64_t a1@<X0>, void *a2@<X2>, char a3@<W3>, void (*a4)(uint64_t)@<X4>, uint64_t a5@<X8>)
{
  id v9 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1618]), sel_initWithCGColor_, a2);
  lazy protocol witness table accessor for type CGColorPlatformColor and conformance CGColorPlatformColor();
  uint64_t v10 = dispatch thunk of AnyLocation.projecting<A>(_:)();
  *(void *)a5 = a1;
  *(void *)(a5 + 8) = v10;
  *(void *)(a5 + 16) = v9;
  *(unsigned char *)(a5 + 24) = a3;
  type metadata accessor for ColorPicker();
  uint64_t v11 = swift_retain();
  a4(v11);

  swift_release();

  return swift_release();
}

uint64_t ColorPicker.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  v20[1] = a2;
  uint64_t v4 = *(void *)(a1 + 16);
  unint64_t v5 = lazy protocol witness table accessor for type ColorPickerStyleConfiguration.Label and conformance ColorPickerStyleConfiguration.Label();
  objc_super v6 = *(void **)(a1 + 24);
  uint64_t v27 = &type metadata for ColorPickerStyleConfiguration.Label;
  uint64_t v28 = v4;
  unint64_t v29 = v5;
  id v30 = v6;
  type metadata accessor for StaticSourceWriter();
  uint64_t v7 = type metadata accessor for ModifiedContent();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  uint64_t v10 = (char *)v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v11);
  uint64_t v13 = (char *)v20 - v12;
  uint64_t v14 = ColorPicker.$color.getter();
  LOBYTE(v27) = *(unsigned char *)(v2 + 24);
  uint64_t v28 = v14;
  unint64_t v29 = v15;
  id v30 = v16;
  uint64_t v22 = v4;
  uint64_t v23 = v6;
  uint64_t v24 = v2;
  unint64_t v17 = lazy protocol witness table accessor for type ResolvedColorPickerStyle and conformance ResolvedColorPickerStyle();
  View.viewAlias<A, B>(_:_:)((uint64_t)&type metadata for ColorPickerStyleConfiguration.Label, (void (*)(double))partial apply for closure #1 in ColorPicker.body.getter, (uint64_t)v21, (uint64_t)&type metadata for ResolvedColorPickerStyle, (uint64_t)&type metadata for ColorPickerStyleConfiguration.Label, v4, v17);

  swift_release();
  swift_release();
  unint64_t v25 = v17;
  int v26 = &protocol witness table for StaticSourceWriter<A, B>;
  swift_getWitnessTable();
  static ViewBuilder.buildExpression<A>(_:)(v10);
  uint64_t v18 = *(void (**)(char *, uint64_t))(v8 + 8);
  v18(v10, v7);
  static ViewBuilder.buildExpression<A>(_:)(v13);
  return ((uint64_t (*)(char *, uint64_t))v18)(v13, v7);
}

uint64_t closure #1 in ColorPicker.body.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 - 8);
  MEMORY[0x1F4188790](a1);
  objc_super v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for ColorPicker();
  static ViewBuilder.buildExpression<A>(_:)(a1 + *(int *)(v7 + 40));
  static ViewBuilder.buildExpression<A>(_:)(v6);
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, a2);
}

id protocol witness for Projection.get(base:) in conformance CGColorPlatformColor@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  id result = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1618]), sel_initWithCGColor_, *a1);
  *a2 = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type CGColorPlatformColor and conformance CGColorPlatformColor()
{
  unint64_t result = lazy protocol witness table cache variable for type CGColorPlatformColor and conformance CGColorPlatformColor;
  if (!lazy protocol witness table cache variable for type CGColorPlatformColor and conformance CGColorPlatformColor)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CGColorPlatformColor and conformance CGColorPlatformColor);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CGColorPlatformColor and conformance CGColorPlatformColor;
  if (!lazy protocol witness table cache variable for type CGColorPlatformColor and conformance CGColorPlatformColor)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CGColorPlatformColor and conformance CGColorPlatformColor);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CGColorPlatformColor and conformance CGColorPlatformColor;
  if (!lazy protocol witness table cache variable for type CGColorPlatformColor and conformance CGColorPlatformColor)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CGColorPlatformColor and conformance CGColorPlatformColor);
  }
  return result;
}

uint64_t partial apply for closure #1 in ColorPicker.body.getter()
{
  return closure #1 in ColorPicker.body.getter(*(void *)(v0 + 32), *(void *)(v0 + 16));
}

id protocol witness for Projection.set(base:newValue:) in conformance CGColorPlatformColor(id *a1, void **a2)
{
  id v3 = *a2;

  id result = objc_msgSend(v3, sel_CGColor);
  *a1 = result;
  return result;
}

uint64_t ColorPicker<>.init(_:selection:supportsOpacity:)@<X0>(uint64_t a1@<X4>, char a2@<W7>, uint64_t a3@<X8>)
{
  swift_getKeyPath();
  type metadata accessor for UIColor();
  swift_retain();
  swift_retain();
  uint64_t v5 = swift_retain_n();
  id v15 = UIColor.init(_:)(v5);
  type metadata accessor for WritableKeyPath<Color, UIColor>();
  lazy protocol witness table accessor for type WritableKeyPath<Color, UIColor> and conformance WritableKeyPath<A, B>(&lazy protocol witness table cache variable for type WritableKeyPath<Color, UIColor> and conformance WritableKeyPath<A, B>, (void (*)(uint64_t))type metadata accessor for WritableKeyPath<Color, UIColor>);
  uint64_t v14 = dispatch thunk of AnyLocation.projecting<A>(_:)();
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v6 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v8 = v7;
  char v10 = v9;
  uint64_t v12 = v11;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  uint64_t result = swift_release();
  *(void *)a3 = a1;
  *(void *)(a3 + 8) = v14;
  *(void *)(a3 + 16) = v15;
  *(unsigned char *)(a3 + 24) = a2;
  *(void *)(a3 + 32) = v6;
  *(void *)(a3 + 40) = v8;
  *(unsigned char *)(a3 + 48) = v10 & 1;
  *(void *)(a3 + 56) = v12;
  return result;
}

__n128 ColorPicker<>.init<A>(_:selection:supportsOpacity:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W4>, uint64_t a4@<X5>, uint64_t a5@<X8>)
{
  swift_getKeyPath();
  type metadata accessor for UIColor();
  swift_retain();
  swift_retain();
  uint64_t v9 = swift_retain_n();
  id v10 = UIColor.init(_:)(v9);
  type metadata accessor for WritableKeyPath<Color, UIColor>();
  lazy protocol witness table accessor for type WritableKeyPath<Color, UIColor> and conformance WritableKeyPath<A, B>(&lazy protocol witness table cache variable for type WritableKeyPath<Color, UIColor> and conformance WritableKeyPath<A, B>, (void (*)(uint64_t))type metadata accessor for WritableKeyPath<Color, UIColor>);
  uint64_t v11 = dispatch thunk of AnyLocation.projecting<A>(_:)();
  swift_release();
  swift_release();
  swift_release();
  v17.n128_u64[0] = v11;
  v17.n128_u64[1] = (unint64_t)v10;
  closure #1 in ColorPicker<>.init<A>(_:selection:supportsOpacity:)(a1, (uint64_t)&v18);
  swift_release();
  swift_release();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a4 - 8) + 8))(a1, a4);
  char v12 = v19;
  uint64_t v13 = v20;
  __n128 result = v17;
  long long v15 = v18;
  *(void *)a5 = a2;
  *(__n128 *)(a5 + 8) = v17;
  *(unsigned char *)(a5 + 24) = a3;
  *(_OWORD *)(a5 + 32) = v15;
  *(unsigned char *)(a5 + 48) = v12;
  *(void *)(a5 + 56) = v13;
  return result;
}

uint64_t ColorPicker<>.init(_:selection:supportsOpacity:)@<X0>(uint64_t a1@<X4>, void *a2@<X6>, char a3@<W7>, uint64_t a4@<X8>)
{
  id v15 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1618]), sel_initWithCGColor_, a2);
  lazy protocol witness table accessor for type CGColorPlatformColor and conformance CGColorPlatformColor();
  uint64_t v6 = dispatch thunk of AnyLocation.projecting<A>(_:)();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v7 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v9 = v8;
  char v11 = v10;
  uint64_t v13 = v12;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  uint64_t result = swift_release();
  *(void *)a4 = a1;
  *(void *)(a4 + 8) = v6;
  *(void *)(a4 + 16) = v15;
  *(unsigned char *)(a4 + 24) = a3;
  *(void *)(a4 + 32) = v7;
  *(void *)(a4 + 40) = v9;
  *(unsigned char *)(a4 + 48) = v11 & 1;
  *(void *)(a4 + 56) = v13;
  return result;
}

__n128 ColorPicker<>.init<A>(_:selection:supportsOpacity:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X3>, char a4@<W4>, uint64_t a5@<X5>, uint64_t a6@<X8>)
{
  id v12 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1618]), sel_initWithCGColor_, a3);
  lazy protocol witness table accessor for type CGColorPlatformColor and conformance CGColorPlatformColor();
  v17.n128_u64[0] = dispatch thunk of AnyLocation.projecting<A>(_:)();
  v17.n128_u64[1] = (unint64_t)v12;
  closure #1 in ColorPicker<>.init<A>(_:selection:supportsOpacity:)(a1, (uint64_t)&v18);

  swift_release();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a5 - 8) + 8))(a1, a5);
  char v13 = v19;
  uint64_t v14 = v20;
  __n128 result = v17;
  long long v16 = v18;
  *(void *)a6 = a2;
  *(__n128 *)(a6 + 8) = v17;
  *(unsigned char *)(a6 + 24) = a4;
  *(_OWORD *)(a6 + 32) = v16;
  *(unsigned char *)(a6 + 48) = v13;
  *(void *)(a6 + 56) = v14;
  return result;
}

uint64_t closure #1 in ColorPicker<>.init<A>(_:selection:supportsOpacity:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  double v3 = MEMORY[0x1F4188790](a1);
  (*(void (**)(char *, double))(v5 + 16))((char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v3);
  uint64_t result = Text.init<A>(_:)();
  *(void *)a2 = result;
  *(void *)(a2 + 8) = v7;
  *(unsigned char *)(a2 + 16) = v8 & 1;
  *(void *)(a2 + 24) = v9;
  return result;
}

uint64_t associated type witness table accessor for View.Body : View in ColorPicker<A>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t type metadata completion function for ColorPicker()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for ColorPicker(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(_DWORD *)(v5 + 80);
  unint64_t v7 = ((v6 + 25) & ~v6) + *(void *)(v5 + 64);
  int v8 = *(_DWORD *)(v5 + 80) & 0x100000;
  uint64_t v9 = *a2;
  *(void *)a1 = *a2;
  if (v6 > 7 || v8 != 0 || v7 > 0x18)
  {
    a1 = v9 + ((v6 & 0xF8 ^ 0x1F8) & (v6 + 16));
    swift_retain();
  }
  else
  {
    id v12 = (void *)a2[2];
    *(void *)(a1 + 8) = a2[1];
    *(void *)(a1 + 16) = v12;
    *(unsigned char *)(a1 + 24) = *((unsigned char *)a2 + 24);
    uint64_t v13 = (a1 + v6 + 25) & ~v6;
    uint64_t v14 = ((unint64_t)a2 + v6 + 25) & ~v6;
    id v15 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
    swift_retain();
    swift_retain();
    id v16 = v12;
    v15(v13, v14, v4);
  }
  return a1;
}

uint64_t destroy for ColorPicker(uint64_t a1, uint64_t a2)
{
  swift_release();
  swift_release();

  uint64_t v4 = *(void *)(*(void *)(a2 + 16) - 8);
  uint64_t v5 = *(uint64_t (**)(unint64_t))(v4 + 8);
  unint64_t v6 = (a1 + *(unsigned __int8 *)(v4 + 80) + 25) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);

  return v5(v6);
}

uint64_t initializeWithCopy for ColorPicker(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  uint64_t v5 = *(void **)(a2 + 16);
  *(void *)(a1 + 16) = v5;
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  uint64_t v6 = *(void *)(a3 + 16);
  unint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16);
  uint64_t v8 = *(unsigned __int8 *)(*(void *)(v6 - 8) + 80);
  uint64_t v9 = (v8 + 25 + a1) & ~v8;
  uint64_t v10 = (v8 + 25 + a2) & ~v8;
  swift_retain();
  swift_retain();
  id v11 = v5;
  v7(v9, v10, v6);
  return a1;
}

uint64_t assignWithCopy for ColorPicker(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  swift_retain();
  swift_release();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_retain();
  swift_release();
  uint64_t v6 = *(void **)(a2 + 16);
  unint64_t v7 = *(void **)(a1 + 16);
  *(void *)(a1 + 16) = v6;
  id v8 = v6;

  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  uint64_t v9 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v9 + 24))((*(unsigned __int8 *)(v9 + 80) + 25 + a1) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80), (*(unsigned __int8 *)(v9 + 80) + 25 + a2) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
  return a1;
}

uint64_t initializeWithTake for ColorPicker(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v4 + 32))((*(unsigned __int8 *)(v4 + 80) + 25 + a1) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80), (*(unsigned __int8 *)(v4 + 80) + 25 + a2) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  return a1;
}

uint64_t assignWithTake for ColorPicker(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  swift_release();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_release();
  uint64_t v6 = *(void **)(a1 + 16);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);

  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  uint64_t v7 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v7 + 40))((*(unsigned __int8 *)(v7 + 80) + 25 + a1) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80), (*(unsigned __int8 *)(v7 + 80) + 25 + a2) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
  return a1;
}

uint64_t getEnumTagSinglePayload for ColorPicker(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  if (v5 <= 0x7FFFFFFF) {
    unsigned int v7 = 0x7FFFFFFF;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  int v8 = a2 - v7;
  if (a2 <= v7) {
    goto LABEL_23;
  }
  uint64_t v9 = ((v6 + 25) & ~v6) + *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  char v10 = 8 * v9;
  if (v9 <= 3)
  {
    unsigned int v13 = ((v8 + ~(-1 << v10)) >> v10) + 1;
    if (HIWORD(v13))
    {
      int v11 = *(_DWORD *)((char *)a1 + v9);
      if (!v11) {
        goto LABEL_23;
      }
      goto LABEL_15;
    }
    if (v13 > 0xFF)
    {
      int v11 = *(unsigned __int16 *)((char *)a1 + v9);
      if (!*(unsigned __int16 *)((char *)a1 + v9)) {
        goto LABEL_23;
      }
      goto LABEL_15;
    }
    if (v13 < 2)
    {
LABEL_23:
      if ((v5 & 0x80000000) != 0) {
        return (*(uint64_t (**)(unint64_t))(v4 + 48))(((unint64_t)a1 + v6 + 25) & ~v6);
      }
      unint64_t v15 = *((void *)a1 + 1);
      if (v15 >= 0xFFFFFFFF) {
        LODWORD(v15) = -1;
      }
      return (v15 + 1);
    }
  }
  int v11 = *((unsigned __int8 *)a1 + v9);
  if (!*((unsigned char *)a1 + v9)) {
    goto LABEL_23;
  }
LABEL_15:
  int v14 = (v11 - 1) << v10;
  if (v9 > 3) {
    int v14 = 0;
  }
  if (v9)
  {
    if (v9 > 3) {
      LODWORD(v9) = 4;
    }
    switch((int)v9)
    {
      case 2:
        LODWORD(v9) = *a1;
        break;
      case 3:
        LODWORD(v9) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v9) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v9) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v7 + (v9 | v14) + 1;
}

void storeEnumTagSinglePayload for ColorPicker(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(unsigned __int8 *)(v6 + 80);
  size_t v10 = ((v9 + 25) & ~v9) + *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  BOOL v11 = a3 >= v8;
  unsigned int v12 = a3 - v8;
  if (v12 != 0 && v11)
  {
    if (v10 <= 3)
    {
      unsigned int v16 = ((v12 + ~(-1 << (8 * v10))) >> (8 * v10)) + 1;
      if (HIWORD(v16))
      {
        int v13 = 4;
      }
      else if (v16 >= 0x100)
      {
        int v13 = 2;
      }
      else
      {
        int v13 = v16 > 1;
      }
    }
    else
    {
      int v13 = 1;
    }
  }
  else
  {
    int v13 = 0;
  }
  if (v8 < a2)
  {
    unsigned int v14 = ~v8 + a2;
    if (v10 < 4)
    {
      int v15 = (v14 >> (8 * v10)) + 1;
      if (v10)
      {
        int v17 = v14 & ~(-1 << (8 * v10));
        bzero(a1, v10);
        if (v10 == 3)
        {
          *(_WORD *)a1 = v17;
          a1[2] = BYTE2(v17);
        }
        else if (v10 == 2)
        {
          *(_WORD *)a1 = v17;
        }
        else
        {
          *a1 = v17;
        }
      }
    }
    else
    {
      bzero(a1, v10);
      *(_DWORD *)a1 = v14;
      int v15 = 1;
    }
    switch(v13)
    {
      case 1:
        a1[v10] = v15;
        return;
      case 2:
        *(_WORD *)&a1[v10] = v15;
        return;
      case 3:
        goto LABEL_41;
      case 4:
        *(_DWORD *)&a1[v10] = v15;
        return;
      default:
        return;
    }
  }
  switch(v13)
  {
    case 1:
      a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 2:
      *(_WORD *)&a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 3:
LABEL_41:
      __break(1u);
      JUMPOUT(0x1882C6524);
    case 4:
      *(_DWORD *)&a1[v10] = 0;
      goto LABEL_23;
    default:
LABEL_23:
      if (a2)
      {
LABEL_24:
        if ((v7 & 0x80000000) != 0)
        {
          unint64_t v18 = (unint64_t)&a1[v9 + 25] & ~v9;
          char v19 = *(void (**)(unint64_t))(v6 + 56);
          v19(v18);
        }
        else if ((a2 & 0x80000000) != 0)
        {
          *((void *)a1 + 1) = 0;
          *((void *)a1 + 2) = 0;
          *(void *)a1 = a2 ^ 0x80000000;
        }
        else
        {
          *((void *)a1 + 1) = a2 - 1;
        }
      }
      return;
  }
}

uint64_t BridgedColorPicker.updateUIView(_:context:)(void *a1, uint64_t a2)
{
  double v3 = v2;
  uint64_t v5 = *(void *)(a2 + 40);
  outlined init with take of PlatformItem.PrimaryContent?((uint64_t)(v2 + 4), (uint64_t)v17, (unint64_t *)&lazy cache variable for type metadata for String?);
  outlined init with take of PlatformItem.PrimaryContent?((uint64_t)v17, (uint64_t)v18, (unint64_t *)&lazy cache variable for type metadata for String?);
  if (v18[1]) {
    uint64_t v6 = (void *)MEMORY[0x18C115780](v18[0]);
  }
  else {
    uint64_t v6 = 0;
  }
  objc_msgSend(a1, sel_setTitle_, v6);

  objc_msgSend(a1, sel_setSupportsAlpha_, *((unsigned __int8 *)v3 + 24));
  unsigned int v7 = (void *)v3[2];
  uint64_t v16 = *v3;
  type metadata accessor for Binding<UIColor>();
  MEMORY[0x18C113DA0](&v15);
  unsigned int v8 = v15;
  objc_msgSend(a1, sel_setSelectedColor_, v15);

  uint64_t v9 = (_OWORD *)(v5
                + OBJC_IVAR____TtCV7SwiftUIP33_0B012DB3D42FBF9295A4AA29478C936C18BridgedColorPicker11Coordinator_parent);
  size_t v10 = *(void **)(v5
                 + OBJC_IVAR____TtCV7SwiftUIP33_0B012DB3D42FBF9295A4AA29478C936C18BridgedColorPicker11Coordinator_parent
                 + 16);
  long long v12 = *((_OWORD *)v3 + 1);
  long long v11 = *((_OWORD *)v3 + 2);
  *uint64_t v9 = *(_OWORD *)v3;
  v9[1] = v12;
  void v9[2] = v11;
  outlined retain of ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?((uint64_t)&v16);
  swift_retain();
  id v13 = v7;
  outlined retain of String?((uint64_t)v17);

  swift_release();
  swift_release();
  return swift_bridgeObjectRelease();
}

void BridgedColorPicker.Coordinator.colorChanged(_:)(void *a1)
{
  double v3 = *(void **)(v1
                + OBJC_IVAR____TtCV7SwiftUIP33_0B012DB3D42FBF9295A4AA29478C936C18BridgedColorPicker11Coordinator_parent
                + 16);
  swift_bridgeObjectRetain();
  swift_retain();
  id v4 = v3;
  swift_retain();
  id v5 = objc_msgSend(a1, sel_selectedColor);
  if (v5)
  {
    uint64_t v6 = v5;
    swift_retain();
    id v7 = v4;
    swift_retain();
    dispatch thunk of AnyLocation.set(_:transaction:)();
    swift_bridgeObjectRelease();

    swift_release_n();
    swift_release_n();
  }
  else
  {
    __break(1u);
  }
}

id BridgedColorPicker.Coordinator.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for BridgedColorPicker.Coordinator();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for BridgedColorPicker.Coordinator()
{
  return self;
}

uint64_t sub_1882C68FC()
{
  return swift_getWitnessTable();
}

uint64_t destroy for BridgedColorPicker(uint64_t a1)
{
  swift_release();
  swift_release();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for BridgedColorPicker(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  id v4 = *(void **)(a2 + 16);
  *(void *)(a1 + 16) = v4;
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  uint64_t v5 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v5;
  swift_retain();
  swift_retain();
  id v6 = v4;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for BridgedColorPicker(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_retain();
  swift_release();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_retain();
  swift_release();
  id v4 = *(void **)(a2 + 16);
  uint64_t v5 = *(void **)(a1 + 16);
  *(void *)(a1 + 16) = v4;
  id v6 = v4;

  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for BridgedColorPicker(uint64_t a1, uint64_t a2)
{
  swift_release();
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release();
  id v4 = *(void **)(a1 + 16);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);

  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  uint64_t v5 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v5;
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for BridgedColorPicker()
{
  return &type metadata for BridgedColorPicker;
}

void *type metadata accessor for CGColorPlatformColor()
{
  return &unk_1ED430058;
}

id protocol witness for UIViewRepresentable.makeUIView(context:) in conformance BridgedColorPicker(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  id v2 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1630]), sel_init);
  objc_msgSend(v2, sel_addTarget_action_forControlEvents_, v1, sel_colorChanged_, 4096);
  return v2;
}

uint64_t protocol witness for UIViewRepresentable.updateUIView(_:context:) in conformance BridgedColorPicker(void *a1, uint64_t a2)
{
  return BridgedColorPicker.updateUIView(_:context:)(a1, a2);
}

id protocol witness for UIViewRepresentable.makeCoordinator() in conformance BridgedColorPicker@<X0>(void *a1@<X8>)
{
  uint64_t v3 = *v1;
  uint64_t v4 = v1[1];
  uint64_t v5 = (void *)v1[2];
  char v6 = *((unsigned char *)v1 + 24);
  uint64_t v8 = v1[4];
  uint64_t v7 = v1[5];
  uint64_t v9 = (objc_class *)type metadata accessor for BridgedColorPicker.Coordinator();
  size_t v10 = (char *)objc_allocWithZone(v9);
  long long v11 = &v10[OBJC_IVAR____TtCV7SwiftUIP33_0B012DB3D42FBF9295A4AA29478C936C18BridgedColorPicker11Coordinator_parent];
  *(void *)long long v11 = v3;
  *((void *)v11 + 1) = v4;
  *((void *)v11 + 2) = v5;
  v11[24] = v6;
  *((void *)v11 + 4) = v8;
  *((void *)v11 + 5) = v7;
  v14.receiver = v10;
  v14.super_class = v9;
  swift_retain();
  swift_retain();
  id v12 = v5;
  swift_bridgeObjectRetain();
  id result = objc_msgSendSuper2(&v14, sel_init);
  *a1 = result;
  return result;
}

uint64_t lazy protocol witness table accessor for type WritableKeyPath<Color, UIColor> and conformance WritableKeyPath<A, B>(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

ValueMetadata *type metadata accessor for SystemColorPickerStyle()
{
  return &type metadata for SystemColorPickerStyle;
}

uint64_t associated type witness table accessor for ColorPickerStyle.Body : View in SystemColorPickerStyle()
{
  return swift_getOpaqueTypeConformance2();
}

void closure #1 in SystemColorPickerStyle.makeBody(configuration:)(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X4>, uint64_t a6@<X8>)
{
  outlined init with take of PlatformItem.PrimaryContent?(a1 + 24, (uint64_t)v18, (unint64_t *)&lazy cache variable for type metadata for PlatformItem.PrimaryContent?);
  outlined init with take of PlatformItem.PrimaryContent?((uint64_t)v18, (uint64_t)v19, (unint64_t *)&lazy cache variable for type metadata for PlatformItem.PrimaryContent?);
  if (_s7SwiftUI12PlatformItemV14PrimaryContentVSgWOg(v19) == 1 || (long long v11 = (void *)v19[0]) == 0)
  {
    swift_retain();
    swift_retain();
    id v17 = a5;
    uint64_t v14 = 0;
    uint64_t v16 = 0;
  }
  else
  {
    swift_retain();
    swift_retain();
    id v12 = a5;
    id v13 = objc_msgSend(v11, sel_string);
    uint64_t v14 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v16 = v15;
  }
  *(void *)a6 = a3;
  *(void *)(a6 + 8) = a4;
  *(void *)(a6 + 16) = a5;
  *(unsigned char *)(a6 + 24) = a2 & 1;
  *(void *)(a6 + 32) = v14;
  *(void *)(a6 + 40) = v16;
  *(unsigned char *)(a6 + 48) = 2;
}

uint64_t protocol witness for ColorPickerStyle.makeBody(configuration:) in conformance SystemColorPickerStyle@<X0>(char *a1@<X0>, void (**a2)(uint64_t a1@<X0>, uint64_t a2@<X8>)@<X8>)
{
  char v3 = *a1;
  uint64_t v4 = *((void *)a1 + 1);
  uint64_t v5 = *((void *)a1 + 2);
  char v6 = (void *)*((void *)a1 + 3);
  uint64_t v7 = swift_allocObject();
  *(unsigned char *)(v7 + 16) = v3;
  *(void *)(v7 + 24) = v4;
  *(void *)(v7 + 32) = v5;
  *(void *)(v7 + 40) = v6;
  swift_retain();
  swift_retain();
  id v8 = v6;
  uint64_t result = static Alignment.center.getter();
  *a2 = partial apply for closure #1 in SystemColorPickerStyle.makeBody(configuration:);
  a2[1] = (void (*)(uint64_t@<X0>, uint64_t@<X8>))v7;
  a2[2] = (void (*)(uint64_t@<X0>, uint64_t@<X8>))result;
  a2[3] = v10;
  return result;
}

uint64_t sub_1882C6F84()
{
  swift_release();
  swift_release();

  return swift_deallocObject();
}

void partial apply for closure #1 in SystemColorPickerStyle.makeBody(configuration:)(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  closure #1 in SystemColorPickerStyle.makeBody(configuration:)(a1, *(unsigned char *)(v2 + 16), *(void *)(v2 + 24), *(void *)(v2 + 32), *(void **)(v2 + 40), a2);
}

_UNKNOWN **sub_1882C6FDC()
{
  return &protocol witness table for PlatformItemsReader<A, B, C>;
}

uint64_t assignWithCopy for CompositeNavigationSplitViewVisibility(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_retain();
  swift_release();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_retain();
  swift_release();
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  *(_WORD *)(a1 + 18) = *(_WORD *)(a2 + 18);
  return a1;
}

uint64_t assignWithTake for CompositeNavigationSplitViewVisibility(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release();
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  return a1;
}

uint64_t getEnumTagSinglePayload for CompositeNavigationSplitViewVisibility(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 20)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for CompositeNavigationSplitViewVisibility(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_DWORD *)(result + 16) = 0;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 20) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 20) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AnyNavigationSplitVisibility.ToTwoColumns()
{
  return &type metadata for AnyNavigationSplitVisibility.ToTwoColumns;
}

ValueMetadata *type metadata accessor for AnyNavigationSplitVisibility.ToDeprecatedTwoColumns()
{
  return &type metadata for AnyNavigationSplitVisibility.ToDeprecatedTwoColumns;
}

ValueMetadata *type metadata accessor for AnyNavigationSplitVisibility.ToThreeColumns()
{
  return &type metadata for AnyNavigationSplitVisibility.ToThreeColumns;
}

unsigned __int8 *protocol witness for Projection.get(base:) in conformance AnyNavigationSplitVisibility.ToDeprecatedTwoColumns@<X0>(unsigned __int8 *result@<X0>, _WORD *a2@<X8>)
{
  *a2 = *result;
  return result;
}

unsigned char *protocol witness for Projection.set(base:newValue:) in conformance AnyNavigationSplitVisibility.ToDeprecatedTwoColumns(unsigned char *result, unsigned __int16 *a2)
{
  unsigned int v2 = *a2;
  if (v2 >> 14)
  {
    uint64_t result = (unsigned char *)_assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    *uint64_t result = v2;
  }
  return result;
}

unsigned __int8 *protocol witness for Projection.get(base:) in conformance AnyNavigationSplitVisibility.ToThreeColumns@<X0>(unsigned __int8 *result@<X0>, _WORD *a2@<X8>)
{
  if (result[1]) {
    __int16 v2 = 256;
  }
  else {
    __int16 v2 = 0;
  }
  *a2 = v2 | *result | 0x8000;
  return result;
}

unsigned char *protocol witness for Projection.set(base:newValue:) in conformance AnyNavigationSplitVisibility.ToThreeColumns(unsigned char *result, __int16 *a2)
{
  __int16 v2 = *a2;
  if ((*a2 & 0xC000) == 0x8000)
  {
    *uint64_t result = v2;
    result[1] = HIBYTE(v2) & 1;
  }
  else
  {
    uint64_t result = (unsigned char *)_assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

void *protocol witness for static PreferenceKey.reduce(value:nextValue:) in conformance CompositeNavigationSplitViewVisibility.Key(uint64_t *a1, void *(*a2)(uint64_t *__return_ptr))
{
  uint64_t v3 = *a1;
  uint64_t result = a2(&v6);
  uint64_t v5 = v6;
  if (v6 <= v3) {
    uint64_t v5 = v3;
  }
  *a1 = v5;
  return result;
}

uint64_t TableRowSpan.init(content:)(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t static TableRowSpan._containsOutlineSymbol(inputs:)()
{
  return 0;
}

uint64_t static TableRowSpan._makeRows(content:inputs:)@<X0>(int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v27 = a7;
  uint64_t v45 = *MEMORY[0x1E4F143B8];
  int v11 = *a1;
  uint64_t v12 = *(void *)(a2 + 136);
  int v13 = *(_DWORD *)(a2 + 148);
  int v26 = *(_DWORD *)(a2 + 144);
  PreferencesOutputs.init()();
  uint64_t v14 = AGMakeUniqueID();
  uint64_t v25 = (uint64_t)&v25;
  uint64_t v37 = a3;
  uint64_t v38 = a4;
  uint64_t v39 = a5;
  uint64_t v40 = a6;
  v28[0] = v11;
  uint64_t v41 = a3;
  uint64_t v42 = a4;
  uint64_t v43 = a5;
  uint64_t v44 = a6;
  type metadata accessor for TableRowSpan();
  type metadata accessor for _GraphValue();
  _GraphValue.subscript.getter();
  type metadata accessor for _GraphValue();
  int v15 = _GraphValue.value.getter();
  v28[0] = v13;
  uint64_t v29 = v14;
  uint64_t v41 = a3;
  uint64_t v42 = a4;
  uint64_t v43 = a5;
  uint64_t v44 = a6;
  uint64_t v16 = type metadata accessor for TableRowSpan.Traits();
  uint64_t v35 = v16;
  uint64_t WitnessTable = swift_getWitnessTable();
  id v17 = (uint64_t (*)(void, uint64_t))MEMORY[0x1E4F4E740];
  type metadata accessor for Attribute<ViewTraitCollection>(0, (unint64_t *)&lazy cache variable for type metadata for Attribute<ViewTraitCollection>, MEMORY[0x1E4F40530], MEMORY[0x1E4F4E740]);
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v28, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TA_22, (uint64_t)v34, v16, MEMORY[0x1E4FBC248], v18, MEMORY[0x1E4FBC278], v19);
  v28[0] = v15;
  v28[1] = v41;
  uint64_t v29 = v14;
  uint64_t v41 = a3;
  uint64_t v42 = a4;
  uint64_t v43 = a5;
  uint64_t v44 = a6;
  uint64_t List = type metadata accessor for TableRowSpan.MakeList();
  uint64_t v32 = List;
  uint64_t v33 = swift_getWitnessTable();
  type metadata accessor for Attribute<ViewTraitCollection>(0, (unint64_t *)&lazy cache variable for type metadata for Attribute<TableRowList>, (uint64_t)&type metadata for TableRowList, v17);
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v28, (uint64_t)partial apply for closure #1 in Attribute.init<A>(_:), (uint64_t)v31, List, MEMORY[0x1E4FBC248], v21, MEMORY[0x1E4FBC278], v22);
  int v23 = v41;
  uint64_t v41 = v12;
  LODWORD(v42) = v26;
  int v30 = v23;
  swift_bridgeObjectRetain();
  PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
  return swift_bridgeObjectRelease();
}

uint64_t closure #1 in static TableRowSpan._makeRows(content:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v11 = a2;
  uint64_t v12 = a3;
  uint64_t v13 = a4;
  uint64_t v14 = a5;
  _OWORD v10[2] = type metadata accessor for TableRowSpan();
  void v10[3] = a3;
  uint64_t v7 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(a1, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply, (uint64_t)v10, a3, MEMORY[0x1E4FBC248], v7, MEMORY[0x1E4FBC278], v8);
  return v11;
}

uint64_t partial apply for closure #1 in static TableRowSpan._makeRows(content:inputs:)(uint64_t a1)
{
  return closure #1 in static TableRowSpan._makeRows(content:inputs:)(a1, v1[2], v1[3], v1[4], v1[5]);
}

uint64_t type metadata accessor for TableRowSpan()
{
  return swift_getGenericMetadata();
}

uint64_t TableRowSpan.Traits.value.getter@<X0>(int a1@<W0>, uint64_t *a2@<X8>)
{
  if (*MEMORY[0x1E4F4E7A0] == a1 || (AGGraphGetValue(), (uint64_t v3 = swift_bridgeObjectRetain()) == 0)) {
    ViewTraitCollection.init()();
  }
  else {
    uint64_t v5 = v3;
  }
  _typeName(_:qualified:)();
  ViewTraitCollection.subscript.setter();
  uint64_t result = ViewTraitCollection.subscript.setter();
  *a2 = v5;
  return result;
}

uint64_t protocol witness for Rule.value.getter in conformance TableRowSpan<A, B>.Traits@<X0>(uint64_t *a1@<X8>)
{
  return TableRowSpan.Traits.value.getter(*v1, a1);
}

uint64_t TableRowSpan.MakeList.value.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t *a7@<X8>)
{
  int v12 = HIDWORD(a1);
  uint64_t v14 = *(void *)(a4 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v16 = (char *)&v21 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t Value = AGGraphGetValue();
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v16, Value, a4);
  if (*MEMORY[0x1E4F4E7A0] == v12)
  {
    uint64_t v18 = 0;
  }
  else
  {
    uint64_t v18 = *(void *)AGGraphGetValue();
    swift_bridgeObjectRetain();
  }
  uint64_t v21 = a3;
  uint64_t v22 = a4;
  uint64_t v23 = a5;
  uint64_t v24 = a6;
  a7[3] = type metadata accessor for TableRowSpan.Generator();
  a7[4] = (uint64_t)&protocol witness table for TableRowSpan<A, B>.Generator;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(a7);
  (*(void (**)(uint64_t *, char *, uint64_t))(v14 + 32))(boxed_opaque_existential_1, v16, a4);
  uint64_t v21 = a3;
  uint64_t v22 = a4;
  uint64_t v23 = a5;
  uint64_t v24 = a6;
  uint64_t result = type metadata accessor for TableRowSpan.Generator();
  *(uint64_t *)((char *)boxed_opaque_existential_1 + *(int *)(result + 52)) = v18;
  *(uint64_t *)((char *)boxed_opaque_existential_1 + *(int *)(result + 56)) = a2;
  return result;
}

uint64_t protocol witness for Rule.value.getter in conformance TableRowSpan<A, B>.MakeList@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  return TableRowSpan.MakeList.value.getter(*v2, v2[1], a1[2], a1[3], a1[4], a1[5], a2);
}

uint64_t TableRowSpan.Generator.visitRows<A>(applying:from:)(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = v5;
  uint64_t v29 = a4;
  uint64_t v30 = a1;
  uint64_t v33 = a2;
  uint64_t v9 = *(void *)(a3 + 24);
  uint64_t v10 = type metadata accessor for Optional();
  uint64_t v31 = *(void *)(v10 - 8);
  uint64_t v32 = v10;
  MEMORY[0x1F4188790](v10);
  int v12 = (char *)&v26 - v11;
  uint64_t v13 = *(void *)(a3 + 16);
  uint64_t v14 = type metadata accessor for Optional();
  uint64_t v27 = *(void *)(v14 - 8);
  uint64_t v28 = v14;
  double v15 = MEMORY[0x1F4188790](v14);
  id v17 = (char *)&v26 - v16;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t, double))(*(void *)(v13 - 8) + 56))((char *)&v26 - v16, 1, 1, v13, v15);
  uint64_t v18 = *(void *)(v9 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v18 + 16))(v12, v6, v9);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v18 + 56))(v12, 0, 1, v9);
  uint64_t v37 = 0;
  memset(v36, 0, sizeof(v36));
  uint64_t v19 = *(void *)(v6 + *(int *)(a3 + 52));
  if (v19)
  {
    uint64_t v35 = *(void *)(v6 + *(int *)(a3 + 52));
    uint64_t v20 = v19;
  }
  else
  {
    ViewTraitCollection.init()();
    uint64_t v20 = v35;
  }
  uint64_t v34 = v20;
  uint64_t v21 = *(uint64_t (**)(char *, char *, _OWORD *, uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a5 + 8);
  uint64_t v22 = *(void *)(a3 + 32);
  uint64_t v23 = *(void *)(a3 + 40);
  swift_bridgeObjectRetain();
  char v24 = v21(v17, v12, v36, &v34, v13, v9, v22, v23, v29, a5);
  swift_bridgeObjectRelease();
  outlined destroy of TableRowList?((uint64_t)v36);
  (*(void (**)(char *, uint64_t))(v31 + 8))(v12, v32);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v27 + 8))(v17, v28);
  if (__OFADD__(*v33, 1))
  {
    __break(1u);
  }
  else
  {
    ++*v33;
    return v24 & 1;
  }
  return result;
}

uint64_t TableRowSpan.Generator.rowIDs.getter()
{
  lazy protocol witness table accessor for type ViewOnlyTableRowID and conformance ViewOnlyTableRowID();
  AnyHashable.init<A>(_:)();
  unsigned char v2[40] = 1;
  type metadata accessor for Attribute<ViewTraitCollection>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<TableRowID>, (uint64_t)&type metadata for TableRowID, MEMORY[0x1E4FBBE00]);
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_18834BB80;
  outlined init with take of TableRowID((uint64_t)v2, v0 + 32);
  type metadata accessor for WrappedTableRowIDs<[TableRowID]>();
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = v0;
  return result;
}

uint64_t protocol witness for TableRowGenerator.visitRows<A>(applying:from:) in conformance TableRowSpan<A, B>.Generator(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return TableRowSpan.Generator.visitRows<A>(applying:from:)(a1, a2, a5, a3, a4);
}

uint64_t static TableRowSpan._tableRowCount(inputs:)()
{
  return 1;
}

uint64_t protocol witness for static TableRowContent._makeRows(content:inputs:) in conformance TableRowSpan<A, B>@<X0>(int *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  return static TableRowSpan._makeRows(content:inputs:)(a1, a2, a3[2], a3[3], a3[4], a3[5], a4);
}

uint64_t type metadata accessor for TableRowSpan.Traits()
{
  return swift_getGenericMetadata();
}

uint64_t type metadata accessor for TableRowSpan.MakeList()
{
  return swift_getGenericMetadata();
}

uint64_t instantiation function for generic protocol witness table for TableRowSpan<A, B>(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t getEnumTagSinglePayload for TableRowSpan(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 24) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (!a2) {
    return 0;
  }
  unsigned int v7 = a2 - v5;
  if (a2 <= v5) {
    goto LABEL_19;
  }
  char v8 = 8 * v6;
  if (v6 <= 3)
  {
    unsigned int v10 = ((v7 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      int v9 = *(_DWORD *)((char *)a1 + v6);
      if (!v9) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      int v9 = *(unsigned __int16 *)((char *)a1 + v6);
      if (!*(unsigned __int16 *)((char *)a1 + v6)) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_19:
      if (v5) {
        return (*(uint64_t (**)(void))(v4 + 48))();
      }
      return 0;
    }
  }
  int v9 = *((unsigned __int8 *)a1 + v6);
  if (!*((unsigned char *)a1 + v6)) {
    goto LABEL_19;
  }
LABEL_11:
  int v11 = (v9 - 1) << v8;
  if (v6 > 3) {
    int v11 = 0;
  }
  if (v6)
  {
    if (v6 > 3) {
      LODWORD(v6) = 4;
    }
    switch((int)v6)
    {
      case 2:
        LODWORD(v6) = *a1;
        break;
      case 3:
        LODWORD(v6) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v6) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v6) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v5 + (v6 | v11) + 1;
}

void storeEnumTagSinglePayload for TableRowSpan(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 24) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = *(void *)(v6 + 64);
  BOOL v9 = a3 >= v7;
  unsigned int v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      unsigned int v14 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v14))
      {
        int v11 = 4;
      }
      else if (v14 >= 0x100)
      {
        int v11 = 2;
      }
      else
      {
        int v11 = v14 > 1;
      }
    }
    else
    {
      int v11 = 1;
    }
  }
  else
  {
    int v11 = 0;
  }
  if (v7 < a2)
  {
    unsigned int v12 = ~v7 + a2;
    if (v8 < 4)
    {
      int v13 = (v12 >> (8 * v8)) + 1;
      if (v8)
      {
        int v15 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if (v8 == 3)
        {
          *(_WORD *)a1 = v15;
          a1[2] = BYTE2(v15);
        }
        else if (v8 == 2)
        {
          *(_WORD *)a1 = v15;
        }
        else
        {
          *a1 = v15;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v12;
      int v13 = 1;
    }
    switch(v11)
    {
      case 1:
        a1[v8] = v13;
        return;
      case 2:
        *(_WORD *)&a1[v8] = v13;
        return;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v8] = v13;
        return;
      default:
        return;
    }
  }
  switch(v11)
  {
    case 1:
      a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 2:
      *(_WORD *)&a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 3:
LABEL_34:
      __break(1u);
      JUMPOUT(0x1882C8268);
    case 4:
      *(_DWORD *)&a1[v8] = 0;
      goto LABEL_20;
    default:
LABEL_20:
      if (a2)
      {
LABEL_21:
        uint64_t v16 = *(void (**)(void))(v6 + 56);
        v16();
      }
      return;
  }
}

uint64_t base witness table accessor for _AttributeBody in TableRowSpan<A, B>.MakeList()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for _AttributeBody in TableRowSpan<A, B>.Traits()
{
  return swift_getWitnessTable();
}

uint64_t type metadata accessor for TableRowSpan.Generator()
{
  return swift_getGenericMetadata();
}

uint64_t type metadata completion function for TableRowSpan.Generator()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for TableRowSpan.Generator(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  uint64_t v5 = *(void *)(*(void *)(a3 + 24) - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  int v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0 || ((((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8 > 0x18)
  {
    uint64_t v9 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
    swift_retain();
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    unsigned int v10 = (void *)(((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
    int v11 = (void *)(((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
    *unsigned int v10 = *v11;
    *(void *)(((unint64_t)v10 + 15) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFFFF8);
    swift_bridgeObjectRetain();
  }
  return v4;
}

uint64_t destroy for TableRowSpan.Generator(uint64_t a1, uint64_t a2)
{
  (*(void (**)(void))(*(void *)(*(void *)(a2 + 24) - 8) + 8))();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for TableRowSpan.Generator(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 24) - 8) + 16;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 48) + 7;
  int v7 = (void *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  size_t v8 = (void *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *int v7 = *v8;
  *(void *)(((unint64_t)v7 + 15) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v8 + 15) & 0xFFFFFFFFFFFFFFF8);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for TableRowSpan.Generator(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 24) - 8) + 24;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 40) + 7;
  int v7 = (void *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v8 = v6 + a2;
  unint64_t v9 = (v8 & 0xFFFFFFFFFFFFFFF8) + 15;
  *int v7 = *(void *)(v8 & 0xFFFFFFFFFFFFFFF8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(((unint64_t)v7 + 15) & 0xFFFFFFFFFFFFFFF8) = *(void *)(v9 & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

uint64_t assignWithTake for TableRowSpan.Generator(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 24) - 8) + 40;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 24) + 7;
  int v7 = (void *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v8 = (void *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *int v7 = *v8;
  swift_bridgeObjectRelease();
  *(void *)(((unint64_t)v7 + 15) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v8 + 15) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

uint64_t getEnumTagSinglePayload for TableRowSpan.Generator(_DWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 24) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (v5 <= 0x7FFFFFFE) {
    unsigned int v7 = 2147483646;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  if (v7 < a2)
  {
    unint64_t v8 = ((((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8;
    unsigned int v9 = a2 - v7;
    uint64_t v10 = v8 & 0xFFFFFFF8;
    if ((v8 & 0xFFFFFFF8) != 0) {
      unsigned int v11 = 2;
    }
    else {
      unsigned int v11 = v9 + 1;
    }
    if (v11 >= 0x10000) {
      unsigned int v12 = 4;
    }
    else {
      unsigned int v12 = 2;
    }
    if (v11 < 0x100) {
      unsigned int v12 = 1;
    }
    if (v11 >= 2) {
      uint64_t v13 = v12;
    }
    else {
      uint64_t v13 = 0;
    }
    switch(v13)
    {
      case 1:
        int v14 = *((unsigned __int8 *)a1 + v8);
        if (!v14) {
          break;
        }
        goto LABEL_22;
      case 2:
        int v14 = *(unsigned __int16 *)((char *)a1 + v8);
        if (v14) {
          goto LABEL_22;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x1882C8828);
      case 4:
        int v14 = *(_DWORD *)((char *)a1 + v8);
        if (!v14) {
          break;
        }
LABEL_22:
        int v16 = v14 - 1;
        if (v10)
        {
          int v16 = 0;
          LODWORD(v10) = *a1;
        }
        return v7 + (v10 | v16) + 1;
      default:
        break;
    }
  }
  if (v5 >= 0x7FFFFFFE) {
    return (*(uint64_t (**)(void))(v4 + 48))();
  }
  unint64_t v17 = *(void *)(((unint64_t)a1 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
  if (v17 >= 0xFFFFFFFF) {
    LODWORD(v17) = -1;
  }
  if ((v17 + 1) >= 2) {
    return v17;
  }
  else {
    return 0;
  }
}

void storeEnumTagSinglePayload for TableRowSpan.Generator(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 24) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFE) {
    unsigned int v8 = 2147483646;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(void *)(*(void *)(*(void *)(a4 + 24) - 8) + 64);
  unint64_t v10 = ((((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8;
  if (v8 >= a3)
  {
    int v14 = 0;
    int v15 = a2 - v8;
    if (a2 <= v8)
    {
LABEL_17:
      switch(v14)
      {
        case 1:
          a1[v10] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_30;
        case 2:
          *(_WORD *)&a1[v10] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_30;
        case 3:
          goto LABEL_42;
        case 4:
          *(_DWORD *)&a1[v10] = 0;
          goto LABEL_29;
        default:
LABEL_29:
          if (a2)
          {
LABEL_30:
            if (v7 < 0x7FFFFFFE)
            {
              uint64_t v19 = (void *)((unint64_t)&a1[v9 + 7] & 0xFFFFFFFFFFFFFFF8);
              if (a2 > 0x7FFFFFFE)
              {
                *uint64_t v19 = 0;
                *(_DWORD *)uint64_t v19 = a2 - 0x7FFFFFFF;
              }
              else
              {
                *uint64_t v19 = a2;
              }
            }
            else
            {
              uint64_t v18 = *(void (**)(void))(v6 + 56);
              v18();
            }
          }
          break;
      }
      return;
    }
  }
  else
  {
    unsigned int v11 = a3 - v8;
    if (((((v9 + 7) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) == 0xFFFFFFF8) {
      unsigned int v12 = v11 + 1;
    }
    else {
      unsigned int v12 = 2;
    }
    if (v12 >= 0x10000) {
      int v13 = 4;
    }
    else {
      int v13 = 2;
    }
    if (v12 < 0x100) {
      int v13 = 1;
    }
    if (v12 >= 2) {
      int v14 = v13;
    }
    else {
      int v14 = 0;
    }
    int v15 = a2 - v8;
    if (a2 <= v8) {
      goto LABEL_17;
    }
  }
  if (((((v9 + 7) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) == 0xFFFFFFF8) {
    int v16 = v15;
  }
  else {
    int v16 = 1;
  }
  if (((((v9 + 7) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) != 0xFFFFFFF8)
  {
    unsigned int v17 = ~v8 + a2;
    bzero(a1, ((((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8);
    *(_DWORD *)a1 = v17;
  }
  switch(v14)
  {
    case 1:
      a1[v10] = v16;
      break;
    case 2:
      *(_WORD *)&a1[v10] = v16;
      break;
    case 3:
LABEL_42:
      __break(1u);
      JUMPOUT(0x1882C8A3CLL);
    case 4:
      *(_DWORD *)&a1[v10] = v16;
      break;
    default:
      return;
  }
}

ValueMetadata *type metadata accessor for ViewOnlyTableRowIDTraitKey()
{
  return &type metadata for ViewOnlyTableRowIDTraitKey;
}

ValueMetadata *type metadata accessor for ViewOnlyTableRowID()
{
  return &type metadata for ViewOnlyTableRowID;
}

void type metadata accessor for Attribute<ViewTraitCollection>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

ValueMetadata *type metadata accessor for ConditionallyBorderedMenuButtonStyle()
{
  return &type metadata for ConditionallyBorderedMenuButtonStyle;
}

uint64_t associated type witness table accessor for MenuStyle.Body : View in ConditionallyBorderedMenuButtonStyle()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t ConditionallyBorderedMenuButtonStyle.makeBody(configuration:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v6 = *a1;
  uint64_t v7 = a1[1];
  uint64_t v8 = a1[2];
  uint64_t v9 = a1[3];
  char v10 = a3 & 1;
  outlined copy of Environment<Bool>.Content(a2, a3 & 1);
  char v11 = specialized Environment.wrappedValue.getter(a2, v10);
  outlined consume of Environment<Bool>.Content(a2, v10);
  if (v11)
  {
    uint64_t v12 = 0;
    uint64_t KeyPath = 0;
    uint64_t v14 = 0;
  }
  else
  {
    uint64_t KeyPath = swift_getKeyPath();
    uint64_t v14 = swift_getKeyPath();
    uint64_t v12 = 2;
  }
  *(void *)a4 = v6;
  *(void *)(a4 + 8) = v7;
  *(void *)(a4 + 16) = v8;
  *(void *)(a4 + 24) = v9;
  *(void *)(a4 + 32) = v12;
  *(void *)(a4 + 40) = KeyPath;
  *(void *)(a4 + 48) = 0;
  *(void *)(a4 + 56) = v14;
  *(unsigned char *)(a4 + 64) = 0;
  *(unsigned char *)(a4 + 65) = (v11 & 1) == 0;
  outlined copy of AppIntentExecutor?(v6);

  return outlined copy of AppIntentExecutor?(v8);
}

uint64_t protocol witness for MenuStyle.makeBody(configuration:) in conformance ConditionallyBorderedMenuButtonStyle@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return ConditionallyBorderedMenuButtonStyle.makeBody(configuration:)(a1, *(void *)v2, *(unsigned char *)(v2 + 8), a2);
}

unint64_t lazy protocol witness table accessor for type _ConditionalContent<ModifiedContent<Menu<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content>, MenuStyleModifier<_BorderedButtonMenuStyle>>, ModifiedContent<Menu<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content>, MenuStyleModifier<BorderlessButtonMenuStyle>>> and conformance <> _ConditionalContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type _ConditionalContent<ModifiedContent<Menu<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content>, MenuStyleModifier<_BorderedButtonMenuStyle>>, ModifiedContent<Menu<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content>, MenuStyleModifier<BorderlessButtonMenuStyle>>> and conformance <> _ConditionalContent<A, B>;
  if (!lazy protocol witness table cache variable for type _ConditionalContent<ModifiedContent<Menu<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content>, MenuStyleModifier<_BorderedButtonMenuStyle>>, ModifiedContent<Menu<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content>, MenuStyleModifier<BorderlessButtonMenuStyle>>> and conformance <> _ConditionalContent<A, B>)
  {
    type metadata accessor for _ConditionalContent<ModifiedContent<Menu<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content>, MenuStyleModifier<_BorderedButtonMenuStyle>>, ModifiedContent<Menu<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content>, MenuStyleModifier<BorderlessButtonMenuStyle>>>();
    lazy protocol witness table accessor for type ModifiedContent<Menu<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content>, MenuStyleModifier<_BorderedButtonMenuStyle>> and conformance <> ModifiedContent<A, B>();
    lazy protocol witness table accessor for type ModifiedContent<Menu<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content>, MenuStyleModifier<BorderlessButtonMenuStyle>> and conformance <> ModifiedContent<A, B>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ConditionalContent<ModifiedContent<Menu<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content>, MenuStyleModifier<_BorderedButtonMenuStyle>>, ModifiedContent<Menu<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content>, MenuStyleModifier<BorderlessButtonMenuStyle>>> and conformance <> _ConditionalContent<A, B>);
  }
  return result;
}

void type metadata accessor for _ConditionalContent<ModifiedContent<Menu<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content>, MenuStyleModifier<_BorderedButtonMenuStyle>>, ModifiedContent<Menu<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content>, MenuStyleModifier<BorderlessButtonMenuStyle>>>()
{
  if (!lazy cache variable for type metadata for _ConditionalContent<ModifiedContent<Menu<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content>, MenuStyleModifier<_BorderedButtonMenuStyle>>, ModifiedContent<Menu<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content>, MenuStyleModifier<BorderlessButtonMenuStyle>>>)
  {
    type metadata accessor for ModifiedContent<Menu<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content>, MenuStyleModifier<BorderlessButtonMenuStyle>>(255, &lazy cache variable for type metadata for ModifiedContent<Menu<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content>, MenuStyleModifier<_BorderedButtonMenuStyle>>, &lazy cache variable for type metadata for MenuStyleModifier<_BorderedButtonMenuStyle>, (void (*)(void))lazy protocol witness table accessor for type _BorderedButtonMenuStyle and conformance _BorderedButtonMenuStyle);
    type metadata accessor for ModifiedContent<Menu<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content>, MenuStyleModifier<BorderlessButtonMenuStyle>>(255, &lazy cache variable for type metadata for ModifiedContent<Menu<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content>, MenuStyleModifier<BorderlessButtonMenuStyle>>, &lazy cache variable for type metadata for MenuStyleModifier<BorderlessButtonMenuStyle>, (void (*)(void))lazy protocol witness table accessor for type BorderlessButtonMenuStyle and conformance BorderlessButtonMenuStyle);
    unint64_t v0 = type metadata accessor for _ConditionalContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ConditionalContent<ModifiedContent<Menu<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content>, MenuStyleModifier<_BorderedButtonMenuStyle>>, ModifiedContent<Menu<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content>, MenuStyleModifier<BorderlessButtonMenuStyle>>>);
    }
  }
}

void type metadata accessor for ModifiedContent<Menu<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content>, MenuStyleModifier<BorderlessButtonMenuStyle>>(uint64_t a1, unint64_t *a2, unint64_t *a3, void (*a4)(void))
{
  if (!*a2)
  {
    type metadata accessor for Menu<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content>();
    type metadata accessor for MenuStyleModifier<_BorderedButtonMenuStyle>(255, a3, a4);
    unint64_t v7 = type metadata accessor for ModifiedContent();
    if (!v8) {
      atomic_store(v7, a2);
    }
  }
}

void type metadata accessor for MenuStyleModifier<_BorderedButtonMenuStyle>(uint64_t a1, unint64_t *a2, void (*a3)(void))
{
  if (!*a2)
  {
    a3();
    unint64_t v4 = type metadata accessor for MenuStyleModifier();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<Menu<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content>, MenuStyleModifier<_BorderedButtonMenuStyle>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<Menu<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content>, MenuStyleModifier<_BorderedButtonMenuStyle>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<Menu<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content>, MenuStyleModifier<_BorderedButtonMenuStyle>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<Menu<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content>, MenuStyleModifier<BorderlessButtonMenuStyle>>(255, &lazy cache variable for type metadata for ModifiedContent<Menu<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content>, MenuStyleModifier<_BorderedButtonMenuStyle>>, &lazy cache variable for type metadata for MenuStyleModifier<_BorderedButtonMenuStyle>, (void (*)(void))lazy protocol witness table accessor for type _BorderedButtonMenuStyle and conformance _BorderedButtonMenuStyle);
    lazy protocol witness table accessor for type Menu<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content> and conformance Menu<A, B>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<Menu<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content>, MenuStyleModifier<_BorderedButtonMenuStyle>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<Menu<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content>, MenuStyleModifier<BorderlessButtonMenuStyle>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<Menu<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content>, MenuStyleModifier<BorderlessButtonMenuStyle>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<Menu<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content>, MenuStyleModifier<BorderlessButtonMenuStyle>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<Menu<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content>, MenuStyleModifier<BorderlessButtonMenuStyle>>(255, &lazy cache variable for type metadata for ModifiedContent<Menu<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content>, MenuStyleModifier<BorderlessButtonMenuStyle>>, &lazy cache variable for type metadata for MenuStyleModifier<BorderlessButtonMenuStyle>, (void (*)(void))lazy protocol witness table accessor for type BorderlessButtonMenuStyle and conformance BorderlessButtonMenuStyle);
    lazy protocol witness table accessor for type Menu<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content> and conformance Menu<A, B>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<Menu<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content>, MenuStyleModifier<BorderlessButtonMenuStyle>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t specialized View.accessibilityValue<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  v11[0] = a1;
  v11[1] = a2;
  lazy protocol witness table accessor for type String and conformance String();
  swift_bridgeObjectRetain();
  uint64_t v4 = Text.init<A>(_:)();
  uint64_t v6 = v5;
  char v8 = v7 & 1;
  outlined copy of Text.Storage(v4, v5, v7 & 1);
  swift_bridgeObjectRetain();
  AccessibilityValueStorage.init(description:)();
  outlined init with copy of AccessibilityValueStorage((uint64_t)v11, (uint64_t)v10);
  specialized View.accessibility<A>(_:_:isEnabled:)((uint64_t)v10, 1, a3);
  outlined destroy of AccessibilityValueStorage?((uint64_t)v10);
  outlined destroy of AccessibilityValueStorage((uint64_t)v11);
  outlined consume of Text.Storage(v4, v6, v8);
  return swift_bridgeObjectRelease();
}

double specialized Stepper.init<A>(value:in:step:label:currentValueField:onEditingChanged:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, double a3@<X2>, double a4@<X3>, char a5@<W4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, double a10@<D0>, double a11@<D1>)
{
  uint64_t v38 = a1;
  uint64_t v39 = a2;
  double v40 = a10;
  if (a5)
  {
    uint64_t v18 = swift_allocObject();
    *(void *)(v18 + 16) = a1;
    *(void *)(v18 + 24) = a2;
    *(double *)(v18 + 32) = a10;
    *(double *)(v18 + 40) = a11;
    uint64_t v19 = swift_allocObject();
    *(void *)(v19 + 16) = a1;
    *(void *)(v19 + 24) = a2;
    *(double *)(v19 + 32) = a10;
    *(double *)(v19 + 40) = a11;
    swift_retain_n();
    swift_retain_n();
    uint64_t v20 = partial apply for specialized closure #5 in Stepper.init<A>(value:in:step:label:currentValueField:onEditingChanged:);
    uint64_t v21 = partial apply for specialized closure #6 in Stepper.init<A>(value:in:step:label:currentValueField:onEditingChanged:);
    goto LABEL_20;
  }
  _s7SwiftUI25AccessibilityValueStorageVSgMaTm_1(0, (unint64_t *)&lazy cache variable for type metadata for Binding<Double>, MEMORY[0x1E4FBB3D0], MEMORY[0x1E4F41638]);
  MEMORY[0x18C113DA0](v37);
  uint64_t v20 = 0;
  uint64_t v18 = 0;
  double v22 = a4 - a3;
  double v23 = *(double *)v37;
  if (*(double *)v37 == a4)
  {
    if (*(double *)v37 == a3)
    {
LABEL_5:
      uint64_t v21 = 0;
      uint64_t v19 = 0;
      goto LABEL_20;
    }
  }
  else
  {
    BOOL v24 = v22 <= a11 || *(double *)v37 > a4 - a11;
    uint64_t v18 = swift_allocObject();
    *(void *)(v18 + 16) = a1;
    *(void *)(v18 + 24) = a2;
    *(double *)(v18 + 32) = a10;
    *(double *)(v18 + 40) = a3;
    *(double *)(v18 + 48) = a4;
    if (v24)
    {
      uint64_t v25 = partial apply for specialized closure #2 in Stepper.init<A>(value:in:step:label:currentValueField:onEditingChanged:);
    }
    else
    {
      *(double *)(v18 + 56) = a11;
      uint64_t v25 = partial apply for specialized closure #1 in Stepper.init<A>(value:in:step:label:currentValueField:onEditingChanged:);
    }
    uint64_t v20 = v25;
    swift_retain();
    swift_retain();
    if (v23 == a3) {
      goto LABEL_5;
    }
  }
  uint64_t v27 = v38;
  uint64_t v26 = v39;
  double v28 = v40;
  BOOL v29 = v22 <= a11 || a3 + a11 > v23;
  uint64_t v19 = swift_allocObject();
  *(void *)(v19 + 16) = v27;
  *(void *)(v19 + 24) = v26;
  *(double *)(v19 + 32) = v28;
  *(double *)(v19 + 40) = a3;
  *(double *)(v19 + 48) = a4;
  if (v29)
  {
    uint64_t v30 = partial apply for specialized closure #4 in Stepper.init<A>(value:in:step:label:currentValueField:onEditingChanged:);
  }
  else
  {
    *(double *)(v19 + 56) = a11;
    uint64_t v30 = partial apply for specialized closure #3 in Stepper.init<A>(value:in:step:label:currentValueField:onEditingChanged:);
  }
  uint64_t v21 = v30;
  swift_retain();
  swift_retain();
LABEL_20:
  _s7SwiftUI25AccessibilityValueStorageVSgMaTm_1(0, (unint64_t *)&lazy cache variable for type metadata for Binding<Double>, MEMORY[0x1E4FBB3D0], MEMORY[0x1E4F41638]);
  MEMORY[0x18C113DA0](&v36);
  AccessibilityBoundedNumber.init<A>(for:in:by:)();
  swift_release();
  swift_release();
  *(void *)a9 = a6;
  *(void *)(a9 + 8) = v20;
  *(void *)(a9 + 16) = v18;
  *(void *)(a9 + 24) = v21;
  *(void *)(a9 + 32) = v19;
  *(void *)(a9 + 40) = a7;
  *(void *)(a9 + 48) = a8;
  double result = *(double *)v37;
  long long v32 = v37[1];
  *(_OWORD *)(a9 + 56) = v37[0];
  *(_OWORD *)(a9 + 72) = v32;
  return result;
}

uint64_t MeasurementView.value.getter(uint64_t a1, uint64_t (*a2)(uint64_t))
{
  type metadata accessor for Measurement();
  uint64_t v2 = type metadata accessor for Binding();

  return a2(v2);
}

uint64_t MeasurementView.init(value:bounds:format:label:onEditingChanged:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void (*a4)(uint64_t)@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v65 = a6;
  uint64_t v66 = a7;
  uint64_t v59 = a5;
  uint64_t v60 = a4;
  uint64_t v69 = a3;
  uint64_t v70 = a2;
  uint64_t v71 = a1;
  uint64_t v62 = *(void *)(a8 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v61 = (char *)&v47 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for MeasurementFormatUnitUsage();
  uint64_t v54 = *(void *)(v12 - 8);
  uint64_t v55 = v12;
  MEMORY[0x1F4188790](v12);
  uint64_t v53 = (char *)&v47 - v13;
  type metadata accessor for FloatingPointFormatStyle<Double>?();
  MEMORY[0x1F4188790](v14 - 8);
  uint64_t v52 = (char *)&v47 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v51 = type metadata accessor for Measurement<>.FormatStyle.UnitWidth();
  uint64_t v50 = *(void *)(v51 - 8);
  MEMORY[0x1F4188790](v51);
  uint64_t v49 = (char *)&v47 - v16;
  uint64_t v17 = type metadata accessor for Measurement<>.FormatStyle();
  uint64_t v18 = type metadata accessor for Optional();
  uint64_t v56 = *(void *)(v18 - 8);
  MEMORY[0x1F4188790](v18);
  uint64_t v20 = (char *)&v47 - v19;
  uint64_t v21 = *(void *)(v17 - 8);
  MEMORY[0x1F4188790](v22);
  uint64_t v68 = (char *)&v47 - v23;
  uint64_t v64 = a8;
  uint64_t v58 = type metadata accessor for MeasurementView();
  uint64_t v24 = a9 + *(int *)(v58 + 52);
  type metadata accessor for Measurement();
  swift_getWitnessTable();
  uint64_t v25 = type metadata accessor for ClosedRange();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v25 - 8) + 56))(v24, 1, 1, v25);
  uint64_t v26 = type metadata accessor for Binding();
  uint64_t v27 = *(void *)(v26 - 8);
  double v28 = *(void (**)(uint64_t, uint64_t))(v27 + 16);
  uint64_t v63 = a9;
  uint64_t v57 = v26;
  v28(a9, v71);
  uint64_t v29 = type metadata accessor for Optional();
  uint64_t v30 = *(void *)(v29 - 8);
  uint64_t v31 = v24;
  uint64_t v32 = v56;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v30 + 24))(v31, v70, v29);
  (*(void (**)(char *, uint64_t, uint64_t))(v32 + 16))(v20, v69, v18);
  uint64_t v33 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48);
  uint64_t v67 = v17;
  if (v33(v20, 1, v17) == 1)
  {
    uint64_t v48 = v29;
    uint64_t v34 = v49;
    static Measurement<>.FormatStyle.UnitWidth.wide.getter();
    type metadata accessor for FloatingPointFormatStyle<Double>(0, &lazy cache variable for type metadata for FloatingPointFormatStyle<Double>, (uint64_t (*)(void))lazy protocol witness table accessor for type Double and conformance Double, MEMORY[0x1E4FBB3D0], MEMORY[0x1E4F27640]);
    uint64_t v36 = (uint64_t)v52;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v35 - 8) + 56))(v52, 1, 1, v35);
    uint64_t v37 = v53;
    static MeasurementFormatUnitUsage.general.getter();
    static FormatStyle.measurement<A>(width:usage:numberFormatStyle:)();
    (*(void (**)(char *, uint64_t))(v54 + 8))(v37, v55);
    outlined destroy of FloatingPointFormatStyle<Double>?(v36);
    uint64_t v38 = v34;
    uint64_t v29 = v48;
    (*(void (**)(char *, uint64_t))(v50 + 8))(v38, v51);
    (*(void (**)(char *, uint64_t))(v32 + 8))(v20, v18);
    uint64_t v39 = *(void (**)(char *, char *, uint64_t))(v21 + 32);
  }
  else
  {
    uint64_t v39 = *(void (**)(char *, char *, uint64_t))(v21 + 32);
    v39(v68, v20, v67);
  }
  uint64_t v40 = v58;
  uint64_t v41 = v63;
  uint64_t v42 = ((uint64_t (*)(uint64_t, char *, uint64_t))v39)(v63 + *(int *)(v58 + 44), v68, v67);
  uint64_t v43 = v61;
  v60(v42);
  (*(void (**)(uint64_t, uint64_t))(v32 + 8))(v69, v18);
  (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v70, v29);
  (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v71, v57);
  uint64_t result = (*(uint64_t (**)(uint64_t, char *, uint64_t))(v62 + 32))(v41 + *(int *)(v40 + 48), v43, v64);
  uint64_t v45 = (void *)(v41 + *(int *)(v40 + 56));
  uint64_t v46 = v66;
  void *v45 = v65;
  v45[1] = v46;
  return result;
}

void type metadata accessor for FloatingPointFormatStyle<Double>?()
{
  if (!lazy cache variable for type metadata for FloatingPointFormatStyle<Double>?)
  {
    type metadata accessor for FloatingPointFormatStyle<Double>(255, &lazy cache variable for type metadata for FloatingPointFormatStyle<Double>, (uint64_t (*)(void))lazy protocol witness table accessor for type Double and conformance Double, MEMORY[0x1E4FBB3D0], MEMORY[0x1E4F27640]);
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for FloatingPointFormatStyle<Double>?);
    }
  }
}

uint64_t type metadata accessor for MeasurementView()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t outlined destroy of FloatingPointFormatStyle<Double>?(uint64_t a1)
{
  type metadata accessor for FloatingPointFormatStyle<Double>?();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t MeasurementView.init<A>(value:in:unit:format:label:onEditingChanged:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X3>, void (*a5)(uint64_t)@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v70 = a7;
  uint64_t v71 = a8;
  uint64_t v69 = a6;
  uint64_t v68 = a5;
  uint64_t v76 = a4;
  uint64_t v77 = a2;
  uint64_t v75 = a1;
  uint64_t v66 = a9;
  type metadata accessor for FloatingPointFormatStyle<Double>?();
  MEMORY[0x1F4188790](v15 - 8);
  uint64_t v56 = (char *)&v49 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v55 = type metadata accessor for MeasurementFormatUnitUsage();
  uint64_t v54 = *(void *)(v55 - 8);
  MEMORY[0x1F4188790](v55);
  uint64_t v53 = (char *)&v49 - v17;
  uint64_t v52 = type metadata accessor for Measurement<>.FormatStyle.UnitWidth();
  uint64_t v51 = *(void *)(v52 - 8);
  MEMORY[0x1F4188790](v52);
  uint64_t v50 = (char *)&v49 - v18;
  uint64_t v61 = type metadata accessor for Measurement<>.FormatStyle();
  uint64_t v74 = type metadata accessor for Optional();
  uint64_t v78 = *(void *)(v74 - 8);
  MEMORY[0x1F4188790](v74);
  uint64_t v58 = (char *)&v49 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v20);
  uint64_t v73 = (char *)&v49 - v21;
  type metadata accessor for Measurement();
  uint64_t v22 = type metadata accessor for Binding();
  MEMORY[0x1F4188790](v22 - 8);
  uint64_t v72 = (uint64_t)&v49 - v23;
  swift_getWitnessTable();
  uint64_t v24 = type metadata accessor for ClosedRange();
  uint64_t v25 = type metadata accessor for Optional();
  uint64_t v57 = *(void *)(v25 - 8);
  MEMORY[0x1F4188790](v25);
  uint64_t v27 = (char *)&v49 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v28);
  uint64_t v30 = (char *)&v49 - v29;
  uint64_t v67 = a10;
  uint64_t v80 = a10;
  uint64_t v81 = a11;
  uint64_t v82 = a12;
  uint64_t v83 = a13;
  uint64_t v65 = a13;
  uint64_t v84 = a14;
  uint64_t v85 = a3;
  type metadata accessor for ClosedRange();
  uint64_t v62 = type metadata accessor for Optional();
  _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((void (*)(char *, char *))partial apply for closure #1 in MeasurementView.init<A>(value:in:unit:format:label:onEditingChanged:), (uint64_t)v79, MEMORY[0x1E4FBC248], v24, v31, (uint64_t)v30);
  uint64_t v86 = a3;
  uint64_t v32 = type metadata accessor for Binding();
  type metadata accessor for ToMeasurement();
  id v33 = a3;
  uint64_t v34 = v57;
  uint64_t v35 = v58;
  uint64_t v36 = v30;
  id v37 = v33;
  swift_getWitnessTable();
  uint64_t v38 = v61;
  uint64_t v59 = v32;
  Binding.projecting<A>(_:)();
  id v60 = v37;

  uint64_t v39 = *(void (**)(char *, char *, uint64_t))(v34 + 16);
  uint64_t v63 = v27;
  uint64_t v64 = v25;
  v39(v27, v36, v25);
  (*(void (**)(char *, uint64_t, uint64_t))(v78 + 16))(v35, v76, v74);
  uint64_t v40 = *(void *)(v38 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v40 + 48))(v35, 1, v38) == 1)
  {
    uint64_t v41 = v50;
    static Measurement<>.FormatStyle.UnitWidth.wide.getter();
    uint64_t v42 = v53;
    static MeasurementFormatUnitUsage.asProvided.getter();
    type metadata accessor for FloatingPointFormatStyle<Double>(0, &lazy cache variable for type metadata for FloatingPointFormatStyle<Double>, (uint64_t (*)(void))lazy protocol witness table accessor for type Double and conformance Double, MEMORY[0x1E4FBB3D0], MEMORY[0x1E4F27640]);
    uint64_t v44 = (uint64_t)v56;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v43 - 8) + 56))(v56, 1, 1, v43);
    static FormatStyle.measurement<A>(width:usage:numberFormatStyle:)();
    outlined destroy of FloatingPointFormatStyle<Double>?(v44);
    (*(void (**)(char *, uint64_t))(v54 + 8))(v42, v55);
    (*(void (**)(char *, uint64_t))(v51 + 8))(v41, v52);
    uint64_t v45 = v35;
    uint64_t v46 = v74;
    (*(void (**)(char *, uint64_t))(v78 + 8))(v45, v74);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v40 + 32))(v73, v35, v38);
    uint64_t v46 = v74;
  }
  uint64_t v47 = (uint64_t)v73;
  (*(void (**)(char *, void, uint64_t, uint64_t))(v40 + 56))(v73, 0, 1, v38);
  MeasurementView.init(value:bounds:format:label:onEditingChanged:)(v72, (uint64_t)v63, v47, v68, v69, v70, v71, v67, v66);

  (*(void (**)(uint64_t, uint64_t))(v78 + 8))(v76, v46);
  (*(void (**)(uint64_t))(*(void *)(v62 - 8) + 8))(v77);
  (*(void (**)(uint64_t))(*(void *)(v59 - 8) + 8))(v75);
  return (*(uint64_t (**)(char *, uint64_t))(v34 + 8))(v36, v64);
}

uint64_t closure #1 in MeasurementView.init<A>(value:in:unit:format:label:onEditingChanged:)@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v40 = a5;
  uint64_t v45 = a3;
  uint64_t v42 = a1;
  uint64_t v8 = type metadata accessor for Measurement();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  MEMORY[0x1F4188790](TupleTypeMetadata2);
  uint64_t v39 = (char *)&v38 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v10);
  uint64_t v47 = (char *)&v38 - v11;
  uint64_t v12 = *(void *)(a4 - 8);
  MEMORY[0x1F4188790](v13);
  uint64_t v15 = (char *)&v38 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v38 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v16);
  uint64_t v44 = (char *)&v38 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v19 = MEMORY[0x1F4188790](v18);
  uint64_t v43 = *(char **)(v12 + 16);
  ((void (*)(char *, uint64_t, uint64_t, double))v43)(v15, a1, a4, v19);
  unint64_t v41 = lazy protocol witness table accessor for type Double and conformance Double();
  BinaryFloatingPoint.init<A>(_:)();
  id v20 = a2;
  Measurement.init(value:unit:)();
  uint64_t v21 = type metadata accessor for ClosedRange();
  ((void (*)(char *, uint64_t, uint64_t))v43)(v15, v42 + *(int *)(v21 + 36), a4);
  BinaryFloatingPoint.init<A>(_:)();
  id v22 = v20;
  uint64_t v23 = v44;
  Measurement.init(value:unit:)();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t result = dispatch thunk of static Comparable.<= infix(_:_:)();
  if (result)
  {
    uint64_t v26 = *(int *)(TupleTypeMetadata2 + 48);
    uint64_t v27 = TupleTypeMetadata2;
    uint64_t v45 = WitnessTable;
    uint64_t v28 = &v47[v26];
    uint64_t v29 = v38;
    uint64_t v30 = *(void (**)(void))(v38 + 32);
    v30();
    uint64_t v43 = v28;
    ((void (*)(char *, char *, uint64_t))v30)(v28, v23, v8);
    uint64_t v31 = v39;
    uint64_t v32 = &v39[*(int *)(v27 + 48)];
    id v33 = *(void (**)(char *, char *, uint64_t))(v29 + 16);
    v33(v39, v47, v8);
    v33(v32, v28, v8);
    uint64_t v34 = v40;
    ((void (*)(uint64_t, char *, uint64_t))v30)(v40, v31, v8);
    uint64_t v35 = *(void (**)(char *, uint64_t))(v29 + 8);
    v35(v32, v8);
    uint64_t v36 = &v31[*(int *)(TupleTypeMetadata2 + 48)];
    ((void (*)(char *, char *, uint64_t))v30)(v31, v47, v8);
    ((void (*)(char *, char *, uint64_t))v30)(v36, v43, v8);
    uint64_t v37 = type metadata accessor for ClosedRange();
    ((void (*)(uint64_t, char *, uint64_t))v30)(v34 + *(int *)(v37 + 36), v36, v8);
    return ((uint64_t (*)(char *, uint64_t))v35)(v31, v8);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t partial apply for closure #1 in MeasurementView.init<A>(value:in:unit:format:label:onEditingChanged:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return closure #1 in MeasurementView.init<A>(value:in:unit:format:label:onEditingChanged:)(a1, *(void **)(v2 + 56), *(void *)(v2 + 24), *(void *)(v2 + 32), a2);
}

uint64_t type metadata accessor for ToMeasurement()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t MeasurementView.body.getter@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  v24[1] = a2;
  uint64_t v4 = a1[2];
  type metadata accessor for HStack<TupleView<(ModifiedContent<Text, AccessibilityAttachmentModifier>, ModifiedContent<ModifiedContent<Stepper<EmptyView>, LabelsHiddenModifier>, AccessibilityAttachmentModifier>)>>();
  v24[0] = v5;
  uint64_t v6 = type metadata accessor for LabeledContent();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v9 = (char *)v24 - v8;
  type metadata accessor for FloatingPointFormatStyle<Double>(255, &lazy cache variable for type metadata for ViewInputFlagModifier<AccessibilityCombinedLabeledContent>, (uint64_t (*)(void))lazy protocol witness table accessor for type AccessibilityCombinedLabeledContent and conformance AccessibilityCombinedLabeledContent, (uint64_t)&type metadata for AccessibilityCombinedLabeledContent, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ViewInputFlagModifier);
  uint64_t v10 = type metadata accessor for ModifiedContent();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v10);
  uint64_t v13 = (char *)v24 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  uint64_t v16 = (char *)v24 - v15;
  uint64_t v17 = a1[3];
  uint64_t v18 = a1[4];
  uint64_t v26 = v4;
  uint64_t v27 = v17;
  uint64_t v28 = v18;
  uint64_t v29 = v2;
  v24[4] = v4;
  v24[5] = v17;
  _OWORD v24[6] = v18;
  uint64_t v25 = v2;
  uint64_t v19 = lazy protocol witness table accessor for type TupleView<(ModifiedContent<Text, AccessibilityAttachmentModifier>, ModifiedContent<ModifiedContent<Stepper<EmptyView>, LabelsHiddenModifier>, AccessibilityAttachmentModifier>)> and conformance TupleView<A>(&lazy protocol witness table cache variable for type HStack<TupleView<(ModifiedContent<Text, AccessibilityAttachmentModifier>, ModifiedContent<ModifiedContent<Stepper<EmptyView>, LabelsHiddenModifier>, AccessibilityAttachmentModifier>)>> and conformance HStack<A>, (void (*)(uint64_t))type metadata accessor for HStack<TupleView<(ModifiedContent<Text, AccessibilityAttachmentModifier>, ModifiedContent<ModifiedContent<Stepper<EmptyView>, LabelsHiddenModifier>, AccessibilityAttachmentModifier>)>>);
  LabeledContent<>.init(content:label:)((uint64_t (*)(void))partial apply for closure #1 in MeasurementView.body.getter, (uint64_t (*)(uint64_t))partial apply for closure #2 in MeasurementView.body.getter, (uint64_t)v9);
  uint64_t v32 = v18;
  uint64_t v33 = v19;
  uint64_t WitnessTable = swift_getWitnessTable();
  unint64_t v21 = lazy protocol witness table accessor for type AccessibilityCombinedLabeledContent and conformance AccessibilityCombinedLabeledContent();
  View.input<A>(_:)((uint64_t)&type metadata for AccessibilityCombinedLabeledContent, v6, (uint64_t)&type metadata for AccessibilityCombinedLabeledContent, WitnessTable, v21);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  uint64_t v30 = WitnessTable;
  uint64_t v31 = &protocol witness table for ViewInputFlagModifier<A>;
  swift_getWitnessTable();
  static ViewBuilder.buildExpression<A>(_:)(v13);
  id v22 = *(void (**)(char *, uint64_t))(v11 + 8);
  v22(v13, v10);
  static ViewBuilder.buildExpression<A>(_:)(v16);
  return ((uint64_t (*)(char *, uint64_t))v22)(v16, v10);
}

void type metadata accessor for HStack<TupleView<(ModifiedContent<Text, AccessibilityAttachmentModifier>, ModifiedContent<ModifiedContent<Stepper<EmptyView>, LabelsHiddenModifier>, AccessibilityAttachmentModifier>)>>()
{
  if (!lazy cache variable for type metadata for HStack<TupleView<(ModifiedContent<Text, AccessibilityAttachmentModifier>, ModifiedContent<ModifiedContent<Stepper<EmptyView>, LabelsHiddenModifier>, AccessibilityAttachmentModifier>)>>)
  {
    type metadata accessor for TupleView<(ModifiedContent<Text, AccessibilityAttachmentModifier>, ModifiedContent<ModifiedContent<Stepper<EmptyView>, LabelsHiddenModifier>, AccessibilityAttachmentModifier>)>();
    lazy protocol witness table accessor for type TupleView<(ModifiedContent<Text, AccessibilityAttachmentModifier>, ModifiedContent<ModifiedContent<Stepper<EmptyView>, LabelsHiddenModifier>, AccessibilityAttachmentModifier>)> and conformance TupleView<A>(&lazy protocol witness table cache variable for type TupleView<(ModifiedContent<Text, AccessibilityAttachmentModifier>, ModifiedContent<ModifiedContent<Stepper<EmptyView>, LabelsHiddenModifier>, AccessibilityAttachmentModifier>)> and conformance TupleView<A>, (void (*)(uint64_t))type metadata accessor for TupleView<(ModifiedContent<Text, AccessibilityAttachmentModifier>, ModifiedContent<ModifiedContent<Stepper<EmptyView>, LabelsHiddenModifier>, AccessibilityAttachmentModifier>)>);
    unint64_t v0 = type metadata accessor for HStack();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for HStack<TupleView<(ModifiedContent<Text, AccessibilityAttachmentModifier>, ModifiedContent<ModifiedContent<Stepper<EmptyView>, LabelsHiddenModifier>, AccessibilityAttachmentModifier>)>>);
    }
  }
}

void type metadata accessor for TupleView<(ModifiedContent<Text, AccessibilityAttachmentModifier>, ModifiedContent<ModifiedContent<Stepper<EmptyView>, LabelsHiddenModifier>, AccessibilityAttachmentModifier>)>()
{
  if (!lazy cache variable for type metadata for TupleView<(ModifiedContent<Text, AccessibilityAttachmentModifier>, ModifiedContent<ModifiedContent<Stepper<EmptyView>, LabelsHiddenModifier>, AccessibilityAttachmentModifier>)>)
  {
    type metadata accessor for (ModifiedContent<Text, AccessibilityAttachmentModifier>, ModifiedContent<ModifiedContent<Stepper<EmptyView>, LabelsHiddenModifier>, AccessibilityAttachmentModifier>)();
    unint64_t v0 = type metadata accessor for TupleView();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TupleView<(ModifiedContent<Text, AccessibilityAttachmentModifier>, ModifiedContent<ModifiedContent<Stepper<EmptyView>, LabelsHiddenModifier>, AccessibilityAttachmentModifier>)>);
    }
  }
}

void type metadata accessor for (ModifiedContent<Text, AccessibilityAttachmentModifier>, ModifiedContent<ModifiedContent<Stepper<EmptyView>, LabelsHiddenModifier>, AccessibilityAttachmentModifier>)()
{
  if (!lazy cache variable for type metadata for (ModifiedContent<Text, AccessibilityAttachmentModifier>, ModifiedContent<ModifiedContent<Stepper<EmptyView>, LabelsHiddenModifier>, AccessibilityAttachmentModifier>))
  {
    type metadata accessor for ModifiedContent<Text, AccessibilityAttachmentModifier>(255, &lazy cache variable for type metadata for ModifiedContent<Text, AccessibilityAttachmentModifier>, MEMORY[0x1E4F41420], (uint64_t)&type metadata for AccessibilityAttachmentModifier, MEMORY[0x1E4F3FBA0]);
    type metadata accessor for ModifiedContent<ModifiedContent<Stepper<EmptyView>, LabelsHiddenModifier>, AccessibilityAttachmentModifier>();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (ModifiedContent<Text, AccessibilityAttachmentModifier>, ModifiedContent<ModifiedContent<Stepper<EmptyView>, LabelsHiddenModifier>, AccessibilityAttachmentModifier>));
    }
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<Stepper<EmptyView>, LabelsHiddenModifier>, AccessibilityAttachmentModifier>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<Stepper<EmptyView>, LabelsHiddenModifier>, AccessibilityAttachmentModifier>)
  {
    type metadata accessor for ModifiedContent<Stepper<EmptyView>, LabelsHiddenModifier>();
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<Stepper<EmptyView>, LabelsHiddenModifier>, AccessibilityAttachmentModifier>);
    }
  }
}

void type metadata accessor for ModifiedContent<Stepper<EmptyView>, LabelsHiddenModifier>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<Stepper<EmptyView>, LabelsHiddenModifier>)
  {
    type metadata accessor for ModifiedContent<Text, AccessibilityAttachmentModifier>(255, &lazy cache variable for type metadata for Stepper<EmptyView>, MEMORY[0x1E4F417F8], MEMORY[0x1E4F417F0], (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for Stepper);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<Stepper<EmptyView>, LabelsHiddenModifier>);
    }
  }
}

void type metadata accessor for FloatingPointFormatStyle<Double>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void), uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v9 = a3();
    unint64_t v10 = a5(a1, a4, v9);
    if (!v11) {
      atomic_store(v10, a2);
    }
  }
}

double closure #1 in MeasurementView.body.getter@<D0>(char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10 = static VerticalAlignment.center.getter();
  closure #1 in closure #1 in MeasurementView.body.getter(a1, a2, a3, a4, (uint64_t)v16);
  *(_OWORD *)((char *)&v18[7] + 7) = v16[7];
  *(_OWORD *)((char *)&v18[6] + 7) = v16[6];
  *(_OWORD *)((char *)&v18[3] + 7) = v16[3];
  *(_OWORD *)((char *)&v18[2] + 7) = v16[2];
  *(_OWORD *)((char *)&v18[8] + 7) = v16[8];
  *(void *)((char *)&v18[9] + 7) = v17;
  *(_OWORD *)((char *)&v18[4] + 7) = v16[4];
  *(_OWORD *)((char *)&v18[5] + 7) = v16[5];
  *(_OWORD *)((char *)v18 + 7) = v16[0];
  *(_OWORD *)((char *)&v18[1] + 7) = v16[1];
  long long v11 = v18[7];
  *(_OWORD *)(a5 + 113) = v18[6];
  *(_OWORD *)(a5 + 129) = v11;
  *(_OWORD *)(a5 + 145) = v18[8];
  *(_OWORD *)(a5 + 160) = *(_OWORD *)((char *)&v18[8] + 15);
  long long v12 = v18[3];
  *(_OWORD *)(a5 + 49) = v18[2];
  *(_OWORD *)(a5 + 65) = v12;
  long long v13 = v18[5];
  *(_OWORD *)(a5 + 81) = v18[4];
  *(_OWORD *)(a5 + 97) = v13;
  double result = *(double *)v18;
  long long v15 = v18[1];
  *(_OWORD *)(a5 + 17) = v18[0];
  *(void *)a5 = v10;
  *(void *)(a5 + 8) = 0x4020000000000000;
  *(unsigned char *)(a5 + 16) = 0;
  *(_OWORD *)(a5 + 33) = v15;
  return result;
}

double partial apply for closure #1 in MeasurementView.body.getter@<D0>(uint64_t a1@<X8>)
{
  return closure #1 in MeasurementView.body.getter(*(char **)(v1 + 40), *(void *)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), a1);
}

uint64_t closure #1 in closure #1 in MeasurementView.body.getter@<X0>(char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v110 = a5;
  uint64_t v96 = a2;
  uint64_t v97 = a4;
  uint64_t v9 = type metadata accessor for MeasurementView();
  uint64_t v109 = *(void **)(v9 - 8);
  int64_t v111 = (void *)v109[8];
  MEMORY[0x1F4188790](v9);
  uint64_t v108 = (char *)&v93 - v10;
  uint64_t v11 = a3;
  uint64_t v12 = type metadata accessor for Measurement();
  uint64_t v13 = type metadata accessor for Binding();
  uint64_t v14 = *(void (***)(void, void))(v13 - 8);
  uint64_t v106 = v13;
  BOOL v107 = v14;
  MEMORY[0x1F4188790](v13);
  uint64_t v105 = (uint64_t)&v93 - v15;
  uint64_t v120 = *(void *)(v12 - 8);
  MEMORY[0x1F4188790](v16);
  int64_t v119 = (char *)&v93 - v17;
  swift_getWitnessTable();
  uint64_t v100 = v12;
  type metadata accessor for ClosedRange();
  uint64_t v18 = type metadata accessor for Optional();
  uint64_t v19 = *(void *)(v18 - 8);
  double v20 = MEMORY[0x1F4188790](v18);
  id v22 = (char *)&v93 - v21;
  (*(void (**)(char *, char *, uint64_t, double))(v19 + 16))((char *)&v93 - v21, &a1[*(int *)(v9 + 52)], v18, v20);
  v124[2] = a2;
  v124[3] = v11;
  v124[4] = a4;
  v124[5] = a1;
  type metadata accessor for ModifiedContent<Text, AccessibilityAttachmentModifier>(0, &lazy cache variable for type metadata for ClosedRange<Double>, MEMORY[0x1E4FBB3D0], MEMORY[0x1E4FBB3F8], MEMORY[0x1E4FBB010]);
  _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((void (*)(char *, char *))partial apply for closure #1 in closure #1 in closure #1 in MeasurementView.body.getter, (uint64_t)v124, MEMORY[0x1E4FBC248], v23, v24, (uint64_t)&v125);
  (*(void (**)(char *, uint64_t))(v19 + 8))(v22, v18);
  if ((_BYTE)v127) {
    double v25 = 1.79769313e308;
  }
  else {
    double v25 = v126;
  }
  double v26 = -1.79769313e308;
  if (!(_BYTE)v127) {
    double v26 = v125;
  }
  double v98 = v26;
  double v99 = v25;
  uint64_t v95 = v9;
  uint64_t v27 = *(int *)(v9 + 44);
  int64_t v112 = a1;
  int64_t v103 = &a1[v27];
  uint64_t v104 = (uint64_t (*)(uint64_t))MEMORY[0x1E4F41620];
  uint64_t v28 = v119;
  MeasurementView.value.getter(v9, MEMORY[0x1E4F41620]);
  uint64_t v29 = v11;
  uint64_t v94 = v11;
  uint64_t v102 = type metadata accessor for Measurement<>.FormatStyle();
  *(double *)&uint64_t v30 = COERCE_DOUBLE(Measurement<>.FormatStyle.format(_:)());
  double v32 = v31;
  uint64_t v33 = *(void (**)(char *, uint64_t))(v120 + 8);
  v120 += 8;
  uint64_t v101 = v33;
  v33(v28, v12);
  double v125 = *(double *)&v30;
  double v126 = v32;
  lazy protocol witness table accessor for type String and conformance String();
  uint64_t v34 = Text.init<A>(_:)();
  uint64_t v36 = v35;
  char v38 = v37 & 1;
  LODWORD(v125) = 1;
  uint64_t v39 = Text.foregroundStyle<A>(_:)();
  uint64_t v41 = v40;
  uint64_t v43 = v42;
  char v45 = v44 & 1;
  outlined consume of Text.Storage(v34, v36, v38);
  swift_bridgeObjectRelease();
  specialized View.accessibility<A>(_:_:isEnabled:)(dword_1ED41A5B0 | ((unint64_t)dword_1ED41A5B0 << 32), 1, v39, v41, v45, v43, (uint64_t)v139);
  outlined consume of Text.Storage(v39, v41, v45);
  swift_bridgeObjectRelease();
  uint64_t v116 = v139[1];
  uint64_t v117 = v139[0];
  int v115 = v140;
  uint64_t v46 = v142;
  uint64_t v118 = v141;
  uint64_t v47 = v143;
  uint64_t v48 = qword_1ED41A588;
  swift_beginAccess();
  uint64_t v114 = v47;
  swift_retain();
  uint64_t v113 = v46;
  swift_retain();
  specialized closure #1 in ModifiedContent<>.update<A>(_:combining:isEnabled:)(v46 + 16, v48, v48);
  swift_endAccess();
  swift_release();
  swift_release();
  uint64_t v49 = v105;
  uint64_t v50 = v95;
  uint64_t v51 = v112;
  MeasurementView.value.getter(v95, MEMORY[0x1E4F41628]);
  uint64_t v53 = v96;
  uint64_t v52 = v97;
  uint64_t v121 = v96;
  uint64_t v122 = v29;
  uint64_t v123 = v97;
  swift_getKeyPath();
  uint64_t v54 = v106;
  Binding.subscript.getter();
  swift_release();
  v107[1](v49, v54);
  uint64_t v55 = v144;
  uint64_t v56 = v145;
  double v57 = v146;
  uint64_t v59 = v108;
  uint64_t v58 = v109;
  uint64_t v60 = v50;
  ((void (*)(char *, char *, uint64_t))v109[2])(v108, v51, v50);
  uint64_t v61 = v58;
  unint64_t v62 = (*((unsigned __int8 *)v58 + 80) + 40) & ~(unint64_t)*((unsigned __int8 *)v58 + 80);
  uint64_t v63 = (char *)swift_allocObject();
  uint64_t v64 = v94;
  *((void *)v63 + 2) = v53;
  *((void *)v63 + 3) = v64;
  *((void *)v63 + 4) = v52;
  ((void (*)(char *, char *, uint64_t))v61[4])(&v63[v62], v59, v60);
  specialized Stepper.init<A>(value:in:step:label:currentValueField:onEditingChanged:)(v55, v56, v98, v99, 0, 0, (uint64_t)partial apply for closure #3 in closure #1 in closure #1 in MeasurementView.body.getter, (uint64_t)v63, (uint64_t)&v125, v57, 1.0);
  uint64_t v65 = *(void *)&v126;
  uint64_t v66 = v128;
  uint64_t v105 = v129;
  uint64_t v106 = v131;
  int64_t v111 = v132;
  uint64_t v108 = v134;
  uint64_t v109 = v133;
  BOOL v107 = v135;
  uint64_t v144 = *(void *)&v125;
  uint64_t v145 = *(void *)&v126;
  double v146 = *(double *)&v127;
  uint64_t v147 = v128;
  uint64_t v148 = v129;
  uint64_t v149 = v130;
  uint64_t v150 = v131;
  uint64_t v151 = v132;
  uint64_t v152 = v133;
  uint64_t v153 = v134;
  uint64_t v154 = v135;
  uint64_t v67 = v119;
  MeasurementView.value.getter(v60, v104);
  uint64_t v68 = Measurement<>.FormatStyle.format(_:)();
  uint64_t v70 = v69;
  v101(v67, v100);
  specialized View.accessibilityValue<A>(_:)(v68, v70, (uint64_t)&v125);
  swift_bridgeObjectRelease();
  swift_release();
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v65);
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v66);
  swift_release();
  outlined consume of AccessibilitySliderValue?(v111, v109, v108, v107);
  double v72 = v125;
  uint64_t v71 = *(void *)&v126;
  uint64_t v73 = v127;
  uint64_t v74 = v128;
  uint64_t v76 = v129;
  uint64_t v75 = v130;
  uint64_t v78 = (void (**)(void, void))v131;
  uint64_t v77 = v132;
  uint64_t v80 = v133;
  uint64_t v79 = v134;
  int64_t v111 = v132;
  int64_t v112 = v134;
  uint64_t v82 = v135;
  uint64_t v81 = v136;
  uint64_t v108 = v127;
  uint64_t v109 = v135;
  uint64_t v83 = v137;
  int64_t v119 = v137;
  uint64_t v120 = v136;
  LOBYTE(v60) = v115;
  char v138 = v115;
  uint64_t v84 = v110;
  *(_DWORD *)(v110 + 17) = LODWORD(v125);
  *(_DWORD *)(v84 + 20) = *(_DWORD *)((char *)&v125 + 3);
  uint64_t v86 = v116;
  uint64_t v85 = v117;
  *(void *)uint64_t v84 = v117;
  *(void *)(v84 + 8) = v86;
  *(unsigned char *)(v84 + 16) = v60;
  uint64_t v88 = v113;
  uint64_t v87 = v114;
  *(void *)(v84 + 24) = v118;
  *(void *)(v84 + 32) = v88;
  *(void *)(v84 + 40) = v87;
  *(double *)(v84 + 48) = v72;
  *(void *)(v84 + 56) = v71;
  *(void *)(v84 + 64) = v73;
  uint64_t v105 = v71;
  uint64_t v106 = v74;
  *(void *)(v84 + 72) = v74;
  *(void *)(v84 + 80) = v76;
  *(void *)(v84 + 88) = v75;
  *(void *)(v84 + 96) = v78;
  BOOL v107 = v78;
  *(void *)(v84 + 104) = v77;
  *(void *)(v84 + 112) = v80;
  *(void *)(v84 + 120) = v79;
  *(void *)(v84 + 128) = v82;
  *(void *)(v84 + 136) = v81;
  *(void *)(v84 + 144) = v83;
  outlined copy of Text.Storage(v85, v86, v60);
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  outlined copy of AppIntentExecutor?(v71);
  outlined copy of AppIntentExecutor?(v74);
  swift_retain();
  uint64_t v90 = v111;
  uint64_t v89 = v112;
  uint64_t v91 = v109;
  outlined copy of AccessibilitySliderValue?(v111, v80, v112, v109);
  swift_retain();
  swift_retain();
  swift_release();
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v105);
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v106);
  swift_release();
  outlined consume of AccessibilitySliderValue?(v90, v80, v89, v91);
  swift_release();
  swift_release();
  outlined consume of Text.Storage(v117, v116, v115);
  swift_release();
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t closure #1 in closure #1 in closure #1 in MeasurementView.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, double *a4@<X8>)
{
  double v31 = a4;
  uint64_t v33 = a3;
  uint64_t v34 = a1;
  uint64_t v37 = a2;
  uint64_t v5 = type metadata accessor for Measurement();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v36 = (char *)&v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v8);
  uint64_t v10 = (char *)&v30 - v9;
  MEMORY[0x1F4188790](v11);
  uint64_t v13 = (char *)&v30 - v12;
  double v15 = MEMORY[0x1F4188790](v14);
  uint64_t v17 = (char *)&v30 - v16;
  uint64_t v35 = *(void (**)(char *, uint64_t, uint64_t, double))(v6 + 16);
  v35(v13, a1, v5, v15);
  uint64_t v18 = type metadata accessor for MeasurementView();
  double v32 = (uint64_t (*)(uint64_t))MEMORY[0x1E4F41620];
  uint64_t v33 = v18;
  MeasurementView.value.getter(v18, MEMORY[0x1E4F41620]);
  uint64_t v19 = (void *)Measurement.unit.getter();
  double v20 = *(void (**)(char *, uint64_t))(v6 + 8);
  v20(v10, v5);
  Measurement<>.converted(to:)();

  v20(v13, v5);
  Measurement.value.getter();
  double v22 = v21;
  v20(v17, v5);
  swift_getWitnessTable();
  uint64_t v23 = type metadata accessor for ClosedRange();
  ((void (*)(char *, uint64_t, uint64_t))v35)(v10, v34 + *(int *)(v23 + 36), v5);
  uint64_t v24 = v36;
  MeasurementView.value.getter(v33, v32);
  double v25 = (void *)Measurement.unit.getter();
  v20(v24, v5);
  Measurement<>.converted(to:)();

  v20(v10, v5);
  Measurement.value.getter();
  double v27 = v26;
  uint64_t result = ((uint64_t (*)(char *, uint64_t))v20)(v13, v5);
  if (v22 > v27)
  {
    __break(1u);
  }
  else
  {
    uint64_t v29 = v31;
    *double v31 = v22;
    v29[1] = v27;
  }
  return result;
}

uint64_t closure #2 in MeasurementView.body.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for MeasurementView();
  static ViewBuilder.buildExpression<A>(_:)(a1 + *(int *)(v7 + 48));
  static ViewBuilder.buildExpression<A>(_:)(v6);
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, a2);
}

uint64_t partial apply for closure #2 in MeasurementView.body.getter()
{
  return closure #2 in MeasurementView.body.getter(*(void *)(v0 + 40), *(void *)(v0 + 16));
}

uint64_t lazy protocol witness table accessor for type TupleView<(ModifiedContent<Text, AccessibilityAttachmentModifier>, ModifiedContent<ModifiedContent<Stepper<EmptyView>, LabelsHiddenModifier>, AccessibilityAttachmentModifier>)> and conformance TupleView<A>(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t MeasurementView<>.init<A>(_:value:in:unit:format:onEditingChanged:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, void *a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v43 = a8;
  uint64_t v50 = a7;
  uint64_t v51 = a6;
  uint64_t v40 = a5;
  uint64_t v45 = a4;
  int v44 = a3;
  uint64_t v36 = a2;
  uint64_t v49 = a9;
  uint64_t v46 = a10;
  uint64_t v47 = a11;
  uint64_t v41 = a14;
  uint64_t v42 = a1;
  uint64_t v48 = a12;
  type metadata accessor for Measurement<>.FormatStyle();
  uint64_t v16 = type metadata accessor for Optional();
  uint64_t v34 = v16;
  uint64_t v35 = *(void *)(v16 - 8);
  uint64_t v17 = v35;
  MEMORY[0x1F4188790](v16);
  char v38 = (char *)&v34 - v18;
  uint64_t v37 = a13;
  uint64_t v19 = type metadata accessor for ClosedRange();
  uint64_t v20 = type metadata accessor for Optional();
  MEMORY[0x1F4188790](v20 - 8);
  double v22 = (char *)&v34 - v21;
  uint64_t v39 = type metadata accessor for Binding();
  uint64_t v23 = *(void *)(v39 - 8);
  double v24 = MEMORY[0x1F4188790](v39);
  double v26 = (char *)&v34 - v25;
  (*(void (**)(char *, uint64_t, double))(v23 + 16))((char *)&v34 - v25, a5, v24);
  uint64_t v27 = *(void *)(v19 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v27 + 16))(v22, v51, v19);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v27 + 56))(v22, 0, 1, v19);
  uint64_t v28 = *(void (**)(char *, uint64_t, uint64_t))(v17 + 16);
  uint64_t v29 = (uint64_t)v38;
  uint64_t v30 = v43;
  v28(v38, v43, v16);
  uint64_t v53 = v42;
  uint64_t v54 = a2;
  char v55 = v44;
  uint64_t v56 = v45;
  uint64_t v31 = swift_allocObject();
  uint64_t v32 = v47;
  *(void *)(v31 + 16) = v46;
  *(void *)(v31 + 24) = v32;
  swift_retain();
  MeasurementView.init<A>(value:in:unit:format:label:onEditingChanged:)((uint64_t)v26, (uint64_t)v22, v50, v29, (void (*)(uint64_t))partial apply for closure #1 in Section<>.init<A>(_:isExpanded:content:), (uint64_t)v52, (uint64_t)partial apply for closure #2 in Stepper<>.init<A>(_:value:in:step:format:onEditingChanged:), v31, v49, MEMORY[0x1E4F41420], v48, v37, MEMORY[0x1E4F41418], v41);
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v35 + 8))(v30, v34);
  (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v51, v19);
  (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v40, v39);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1882CC0DC()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t MeasurementView<>.init<A, B>(_:value:in:unit:format:onEditingChanged:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v45 = a6;
  uint64_t v46 = a7;
  uint64_t v44 = a5;
  uint64_t v48 = a4;
  uint64_t v38 = a3;
  uint64_t v47 = a9;
  uint64_t v49 = a10;
  uint64_t v50 = a1;
  uint64_t v42 = a2;
  uint64_t v43 = a12;
  uint64_t v40 = a13;
  type metadata accessor for Measurement<>.FormatStyle();
  uint64_t v16 = type metadata accessor for Optional();
  uint64_t v36 = v16;
  uint64_t v37 = *(void *)(v16 - 8);
  uint64_t v17 = v37;
  MEMORY[0x1F4188790](v16);
  uint64_t v19 = (char *)&v35 - v18;
  uint64_t v35 = (uint64_t)&v35 - v18;
  uint64_t v20 = type metadata accessor for ClosedRange();
  uint64_t v21 = type metadata accessor for Optional();
  MEMORY[0x1F4188790](v21 - 8);
  uint64_t v23 = (char *)&v35 - v22;
  uint64_t v41 = type metadata accessor for Binding();
  uint64_t v39 = *(void *)(v41 - 8);
  double v24 = MEMORY[0x1F4188790](v41);
  double v26 = (char *)&v35 - v25;
  (*(void (**)(char *, uint64_t, double))(v27 + 16))((char *)&v35 - v25, a2, v24);
  uint64_t v28 = *(void *)(v20 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v28 + 16))(v23, a3, v20);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v28 + 56))(v23, 0, 1, v20);
  uint64_t v29 = *(void (**)(char *, uint64_t, uint64_t))(v17 + 16);
  uint64_t v30 = v44;
  v29(v19, v44, v16);
  uint64_t v52 = a8;
  uint64_t v53 = v49;
  uint64_t v54 = a11;
  uint64_t v55 = v43;
  uint64_t v31 = v40;
  uint64_t v56 = v40;
  uint64_t v57 = v50;
  uint64_t v32 = swift_allocObject();
  uint64_t v33 = v46;
  *(void *)(v32 + 16) = v45;
  *(void *)(v32 + 24) = v33;
  swift_retain();
  MeasurementView.init<A>(value:in:unit:format:label:onEditingChanged:)((uint64_t)v26, (uint64_t)v23, v48, v35, (void (*)(uint64_t))partial apply for closure #1 in MeasurementView<>.init<A, B>(_:value:in:unit:format:onEditingChanged:), (uint64_t)v51, (uint64_t)partial apply for closure #2 in Stepper<>.init<A, B>(_:value:step:format:onEditingChanged:), v32, v47, MEMORY[0x1E4F41420], a8, a11, MEMORY[0x1E4F41418], v31);
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v37 + 8))(v30, v36);
  (*(void (**)(uint64_t, uint64_t))(v28 + 8))(v38, v20);
  (*(void (**)(uint64_t, uint64_t))(v39 + 8))(v42, v41);
  return (*(uint64_t (**)(uint64_t))(*(void *)(v49 - 8) + 8))(v50);
}

uint64_t closure #1 in MeasurementView<>.init<A, B>(_:value:in:unit:format:onEditingChanged:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  double v3 = MEMORY[0x1F4188790](a1);
  (*(void (**)(char *, double))(v5 + 16))((char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v3);
  uint64_t result = Text.init<A>(_:)();
  *(void *)a2 = result;
  *(void *)(a2 + 8) = v7;
  *(unsigned char *)(a2 + 16) = v8 & 1;
  *(void *)(a2 + 24) = v9;
  return result;
}

uint64_t partial apply for closure #1 in MeasurementView<>.init<A, B>(_:value:in:unit:format:onEditingChanged:)@<X0>(uint64_t a1@<X8>)
{
  return closure #1 in MeasurementView<>.init<A, B>(_:value:in:unit:format:onEditingChanged:)(*(void *)(v1 + 56), a1);
}

uint64_t associated type witness table accessor for View.Body : View in MeasurementView<A, B>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t type metadata completion function for MeasurementView()
{
  type metadata accessor for Measurement();
  uint64_t result = type metadata accessor for Binding();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for Measurement<>.FormatStyle();
    if (v2 <= 0x3F)
    {
      uint64_t result = swift_checkMetadataState();
      if (v3 <= 0x3F)
      {
        swift_getWitnessTable();
        type metadata accessor for ClosedRange();
        uint64_t result = type metadata accessor for Optional();
        if (v4 <= 0x3F)
        {
          swift_initStructMetadata();
          return 0;
        }
      }
    }
  }
  return result;
}

char *initializeBufferWithCopyOfBuffer for MeasurementView(char *a1, char *a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  uint64_t v4 = *(void *)a2;
  *(void *)a1 = *(void *)a2;
  if ((v3 & 0x20000) != 0)
  {
    uint64_t v7 = (char *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
  }
  else
  {
    uint64_t v7 = a1;
    *((void *)a1 + 1) = *((void *)a2 + 1);
    uint64_t v8 = type metadata accessor for Measurement();
    uint64_t v9 = *(int *)(type metadata accessor for Binding() + 32);
    uint64_t v10 = &v7[v9];
    uint64_t v11 = &a2[v9];
    uint64_t v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 16);
    swift_retain();
    swift_retain();
    v12(v10, v11, v8);
    uint64_t v13 = *(int *)(a3 + 44);
    uint64_t v14 = &v7[v13];
    double v15 = &a2[v13];
    uint64_t v16 = type metadata accessor for Measurement<>.FormatStyle();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v16 - 8) + 16))(v14, v15, v16);
    (*(void (**)(char *, char *))(*(void *)(*(void *)(a3 + 16) - 8) + 16))(&v7[*(int *)(a3 + 48)], &a2[*(int *)(a3 + 48)]);
    uint64_t v17 = *(int *)(a3 + 52);
    uint64_t v18 = &v7[v17];
    uint64_t v19 = &a2[v17];
    swift_getWitnessTable();
    uint64_t v20 = type metadata accessor for ClosedRange();
    uint64_t v21 = *(void *)(v20 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20))
    {
      uint64_t v22 = type metadata accessor for Optional();
      memcpy(v18, v19, *(void *)(*(void *)(v22 - 8) + 64));
    }
    else
    {
      v12(v18, v19, v8);
      v12(&v18[*(int *)(v20 + 36)], &v19[*(int *)(v20 + 36)], v8);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v21 + 56))(v18, 0, 1, v20);
    }
    uint64_t v23 = *(int *)(a3 + 56);
    double v24 = &v7[v23];
    uint64_t v25 = &a2[v23];
    uint64_t v26 = *((void *)v25 + 1);
    *(void *)double v24 = *(void *)v25;
    *((void *)v24 + 1) = v26;
  }
  swift_retain();
  return v7;
}

uint64_t destroy for MeasurementView(uint64_t a1, uint64_t a2)
{
  swift_release();
  swift_release();
  uint64_t v4 = type metadata accessor for Measurement();
  uint64_t v5 = type metadata accessor for Binding();
  uint64_t v6 = *(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8);
  v6(a1 + *(int *)(v5 + 32), v4);
  uint64_t v7 = a1 + *(int *)(a2 + 44);
  uint64_t v8 = type metadata accessor for Measurement<>.FormatStyle();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8))(v7, v8);
  (*(void (**)(uint64_t))(*(void *)(*(void *)(a2 + 16) - 8) + 8))(a1 + *(int *)(a2 + 48));
  uint64_t v9 = a1 + *(int *)(a2 + 52);
  swift_getWitnessTable();
  uint64_t v10 = type metadata accessor for ClosedRange();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 48))(v9, 1, v10))
  {
    v6(v9, v4);
    v6(v9 + *(int *)(v10 + 36), v4);
  }

  return swift_release();
}

char *initializeWithCopy for MeasurementView(char *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  *(void *)a1 = *a2;
  *((void *)a1 + 1) = v6;
  uint64_t v7 = type metadata accessor for Measurement();
  uint64_t v8 = *(int *)(type metadata accessor for Binding() + 32);
  uint64_t v9 = &a1[v8];
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = *(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 16);
  swift_retain();
  swift_retain();
  uint64_t v12 = v10;
  uint64_t v13 = a2;
  v11(v9, v12, v7);
  uint64_t v14 = *(int *)(a3 + 44);
  double v15 = &a1[v14];
  uint64_t v16 = (char *)a2 + v14;
  uint64_t v17 = type metadata accessor for Measurement<>.FormatStyle();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v17 - 8) + 16))(v15, v16, v17);
  (*(void (**)(char *, char *))(*(void *)(*(void *)(a3 + 16) - 8) + 16))(&a1[*(int *)(a3 + 48)], (char *)a2 + *(int *)(a3 + 48));
  uint64_t v18 = *(int *)(a3 + 52);
  uint64_t v19 = &a1[v18];
  uint64_t v20 = (char *)a2 + v18;
  swift_getWitnessTable();
  uint64_t v21 = type metadata accessor for ClosedRange();
  uint64_t v22 = *(void *)(v21 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48))(v20, 1, v21))
  {
    uint64_t v23 = type metadata accessor for Optional();
    memcpy(v19, v20, *(void *)(*(void *)(v23 - 8) + 64));
  }
  else
  {
    v11(v19, v20, v7);
    v11(&v19[*(int *)(v21 + 36)], &v20[*(int *)(v21 + 36)], v7);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v22 + 56))(v19, 0, 1, v21);
  }
  uint64_t v24 = *(int *)(a3 + 56);
  uint64_t v25 = &a1[v24];
  uint64_t v26 = (void *)((char *)v13 + v24);
  uint64_t v27 = v26[1];
  *(void *)uint64_t v25 = *v26;
  *((void *)v25 + 1) = v27;
  swift_retain();
  return a1;
}

char *assignWithCopy for MeasurementView(char *a1, char *a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  swift_retain();
  swift_release();
  *((void *)a1 + 1) = *((void *)a2 + 1);
  swift_retain();
  swift_release();
  uint64_t v6 = type metadata accessor for Measurement();
  uint64_t v7 = *(int *)(type metadata accessor for Binding() + 32);
  uint64_t v27 = *(void *)(v6 - 8);
  uint64_t v28 = *(void (**)(char *, char *, uint64_t))(v27 + 24);
  v28(&a1[v7], &a2[v7], v6);
  uint64_t v8 = *(int *)(a3 + 44);
  uint64_t v9 = &a1[v8];
  uint64_t v10 = &a2[v8];
  uint64_t v11 = type metadata accessor for Measurement<>.FormatStyle();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 24))(v9, v10, v11);
  (*(void (**)(char *, char *))(*(void *)(*(void *)(a3 + 16) - 8) + 24))(&a1[*(int *)(a3 + 48)], &a2[*(int *)(a3 + 48)]);
  uint64_t v30 = a3;
  uint64_t v12 = *(int *)(a3 + 52);
  uint64_t v13 = &a1[v12];
  uint64_t v14 = &a2[v12];
  swift_getWitnessTable();
  uint64_t v15 = type metadata accessor for ClosedRange();
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v16 + 48);
  uint64_t v29 = v13;
  LODWORD(v13) = v17(v13, 1, v15);
  int v18 = v17(v14, 1, v15);
  if (v13)
  {
    if (!v18)
    {
      uint64_t v21 = *(void (**)(char *, char *, uint64_t))(v27 + 16);
      v21(v29, v14, v6);
      v21(&v29[*(int *)(v15 + 36)], &v14[*(int *)(v15 + 36)], v6);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v29, 0, 1, v15);
      goto LABEL_9;
    }
    size_t v19 = *(void *)(*(void *)(type metadata accessor for Optional() - 8) + 64);
    uint64_t v20 = v29;
  }
  else
  {
    if (!v18)
    {
      v28(v29, v14, v6);
      v28(&v29[*(int *)(v15 + 36)], &v14[*(int *)(v15 + 36)], v6);
      goto LABEL_9;
    }
    (*(void (**)(char *, uint64_t))(v16 + 8))(v29, v15);
    size_t v19 = *(void *)(*(void *)(type metadata accessor for Optional() - 8) + 64);
    uint64_t v20 = v29;
  }
  memcpy(v20, v14, v19);
LABEL_9:
  uint64_t v22 = *(int *)(v30 + 56);
  uint64_t v23 = &a1[v22];
  uint64_t v24 = &a2[v22];
  uint64_t v25 = *((void *)v24 + 1);
  *(void *)uint64_t v23 = *(void *)v24;
  *((void *)v23 + 1) = v25;
  swift_retain();
  swift_release();
  return a1;
}

char *initializeWithTake for MeasurementView(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6 = *((void *)a2 + 1);
  *(void *)a1 = *(void *)a2;
  *((void *)a1 + 1) = v6;
  uint64_t v7 = type metadata accessor for Measurement();
  uint64_t v8 = type metadata accessor for Binding();
  uint64_t v9 = *(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32);
  v9(&a1[*(int *)(v8 + 32)], &a2[*(int *)(v8 + 32)], v7);
  uint64_t v10 = *(int *)(a3 + 44);
  uint64_t v11 = &a1[v10];
  uint64_t v12 = &a2[v10];
  uint64_t v13 = type metadata accessor for Measurement<>.FormatStyle();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 32))(v11, v12, v13);
  (*(void (**)(char *, char *))(*(void *)(*(void *)(a3 + 16) - 8) + 32))(&a1[*(int *)(a3 + 48)], &a2[*(int *)(a3 + 48)]);
  uint64_t v14 = *(int *)(a3 + 52);
  uint64_t v15 = &a1[v14];
  uint64_t v16 = &a2[v14];
  swift_getWitnessTable();
  uint64_t v17 = type metadata accessor for ClosedRange();
  uint64_t v18 = *(void *)(v17 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17))
  {
    uint64_t v19 = type metadata accessor for Optional();
    memcpy(v15, v16, *(void *)(*(void *)(v19 - 8) + 64));
  }
  else
  {
    v9(v15, v16, v7);
    v9(&v15[*(int *)(v17 + 36)], &v16[*(int *)(v17 + 36)], v7);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
  }
  *(_OWORD *)&a1[*(int *)(a3 + 56)] = *(_OWORD *)&a2[*(int *)(a3 + 56)];
  return a1;
}

char *assignWithTake for MeasurementView(char *a1, char *a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  swift_release();
  *((void *)a1 + 1) = *((void *)a2 + 1);
  swift_release();
  uint64_t v6 = type metadata accessor for Measurement();
  uint64_t v7 = *(int *)(type metadata accessor for Binding() + 32);
  uint64_t v23 = *(void *)(v6 - 8);
  uint64_t v24 = *(void (**)(char *, char *, uint64_t))(v23 + 40);
  v24(&a1[v7], &a2[v7], v6);
  uint64_t v8 = *(int *)(a3 + 44);
  uint64_t v9 = &a1[v8];
  uint64_t v10 = &a2[v8];
  uint64_t v11 = type metadata accessor for Measurement<>.FormatStyle();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 40))(v9, v10, v11);
  (*(void (**)(char *, char *))(*(void *)(*(void *)(a3 + 16) - 8) + 40))(&a1[*(int *)(a3 + 48)], &a2[*(int *)(a3 + 48)]);
  uint64_t v26 = a3;
  uint64_t v12 = *(int *)(a3 + 52);
  uint64_t v13 = &a1[v12];
  uint64_t v14 = &a2[v12];
  swift_getWitnessTable();
  uint64_t v15 = type metadata accessor for ClosedRange();
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v16 + 48);
  uint64_t v25 = v13;
  LODWORD(v13) = v17(v13, 1, v15);
  int v18 = v17(v14, 1, v15);
  if (v13)
  {
    if (!v18)
    {
      uint64_t v21 = *(void (**)(char *, char *, uint64_t))(v23 + 32);
      v21(v25, v14, v6);
      v21(&v25[*(int *)(v15 + 36)], &v14[*(int *)(v15 + 36)], v6);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v25, 0, 1, v15);
      goto LABEL_9;
    }
    size_t v19 = *(void *)(*(void *)(type metadata accessor for Optional() - 8) + 64);
    uint64_t v20 = v25;
  }
  else
  {
    if (!v18)
    {
      v24(v25, v14, v6);
      v24(&v25[*(int *)(v15 + 36)], &v14[*(int *)(v15 + 36)], v6);
      goto LABEL_9;
    }
    (*(void (**)(char *, uint64_t))(v16 + 8))(v25, v15);
    size_t v19 = *(void *)(*(void *)(type metadata accessor for Optional() - 8) + 64);
    uint64_t v20 = v25;
  }
  memcpy(v20, v14, v19);
LABEL_9:
  *(_OWORD *)&a1[*(int *)(v26 + 56)] = *(_OWORD *)&a2[*(int *)(v26 + 56)];
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for MeasurementView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1882CD818);
}

uint64_t sub_1882CD818(uint64_t a1, uint64_t a2, uint64_t a3)
{
  type metadata accessor for Measurement();
  uint64_t v6 = type metadata accessor for Binding();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    uint64_t v10 = a1;
LABEL_10:
    return v9(v10, a2, v8);
  }
  uint64_t v11 = type metadata accessor for Measurement<>.FormatStyle();
  if (*(_DWORD *)(*(void *)(v11 - 8) + 84) == a2)
  {
    uint64_t v8 = v11;
    uint64_t v12 = *(void *)(v11 - 8);
    uint64_t v13 = *(int *)(a3 + 44);
LABEL_9:
    uint64_t v10 = a1 + v13;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    goto LABEL_10;
  }
  uint64_t v8 = *(void *)(a3 + 16);
  if (*(_DWORD *)(*(void *)(v8 - 8) + 84) == a2)
  {
    uint64_t v12 = *(void *)(*(void *)(a3 + 16) - 8);
    uint64_t v13 = *(int *)(a3 + 48);
    goto LABEL_9;
  }
  swift_getWitnessTable();
  type metadata accessor for ClosedRange();
  uint64_t v14 = type metadata accessor for Optional();
  if (*(_DWORD *)(*(void *)(v14 - 8) + 84) == a2)
  {
    uint64_t v8 = v14;
    uint64_t v12 = *(void *)(v14 - 8);
    uint64_t v13 = *(int *)(a3 + 52);
    goto LABEL_9;
  }
  unint64_t v16 = *(void *)(a1 + *(int *)(a3 + 56));
  if (v16 >= 0xFFFFFFFF) {
    LODWORD(v16) = -1;
  }
  return (v16 + 1);
}

uint64_t storeEnumTagSinglePayload for MeasurementView(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1882CDA28);
}

uint64_t sub_1882CDA28(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  type metadata accessor for Measurement();
  uint64_t v8 = type metadata accessor for Binding();
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    uint64_t v12 = a1;
  }
  else
  {
    uint64_t v13 = type metadata accessor for Measurement<>.FormatStyle();
    if (*(_DWORD *)(*(void *)(v13 - 8) + 84) == a3)
    {
      uint64_t v10 = v13;
      uint64_t v14 = *(void *)(v13 - 8);
      uint64_t v15 = *(int *)(a4 + 44);
    }
    else
    {
      uint64_t v10 = *(void *)(a4 + 16);
      if (*(_DWORD *)(*(void *)(v10 - 8) + 84) == a3)
      {
        uint64_t v14 = *(void *)(*(void *)(a4 + 16) - 8);
        uint64_t v15 = *(int *)(a4 + 48);
      }
      else
      {
        swift_getWitnessTable();
        type metadata accessor for ClosedRange();
        uint64_t result = type metadata accessor for Optional();
        if (*(_DWORD *)(*(void *)(result - 8) + 84) != a3)
        {
          *(void *)(a1 + *(int *)(a4 + 56)) = (a2 - 1);
          return result;
        }
        uint64_t v10 = result;
        uint64_t v14 = *(void *)(result - 8);
        uint64_t v15 = *(int *)(a4 + 52);
      }
    }
    uint64_t v12 = a1 + v15;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }

  return v11(v12, a2, a2, v10);
}

uint64_t sub_1882CDC20()
{
  return swift_getWitnessTable();
}

uint64_t ToMeasurement.get(base:)(uint64_t a1, void *a2)
{
  double v3 = MEMORY[0x1F4188790](a1);
  (*(void (**)(char *, double))(v5 + 16))((char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v3);
  lazy protocol witness table accessor for type Double and conformance Double();
  BinaryFloatingPoint.init<A>(_:)();
  id v6 = a2;
  return Measurement.init(value:unit:)();
}

uint64_t ToMeasurement.set(base:newValue:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = type metadata accessor for Measurement();
  uint64_t v7 = *(void *)(v6 - 8);
  double v8 = MEMORY[0x1F4188790](v6);
  uint64_t v10 = (char *)&v12 - v9;
  (*(void (**)(uint64_t, uint64_t, double))(*(void *)(a4 - 8) + 8))(a1, a4, v8);
  Measurement<>.converted(to:)();
  Measurement.value.getter();
  (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  return dispatch thunk of BinaryFloatingPoint.init(_:)();
}

void ToMeasurement.hash(into:)(uint64_t a1, void *a2)
{
  id v2 = a2;
  NSObject.hash(into:)();
}

uint64_t static ToMeasurement.== infix(_:_:)()
{
  return static NSObject.== infix(_:_:)() & 1;
}

Swift::Int ToMeasurement.hashValue.getter(void *a1)
{
  Hasher.init(_seed:)();
  id v2 = a1;
  NSObject.hash(into:)();

  return Hasher._finalize()();
}

uint64_t protocol witness for Projection.get(base:) in conformance ToMeasurement<A, B>(uint64_t a1)
{
  return ToMeasurement.get(base:)(a1, *v1);
}

uint64_t protocol witness for Projection.set(base:newValue:) in conformance ToMeasurement<A, B>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return ToMeasurement.set(base:newValue:)(a1, a2, *v3, *(void *)(a3 + 16));
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance ToMeasurement<A, B>()
{
  return ToMeasurement.hashValue.getter(*v0);
}

void protocol witness for Hashable.hash(into:) in conformance ToMeasurement<A, B>(uint64_t a1)
{
  ToMeasurement.hash(into:)(a1, *v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ToMeasurement<A, B>()
{
  Hasher.init(_seed:)();
  ToMeasurement.hash(into:)((uint64_t)v2, *v0);
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ToMeasurement<A, B>()
{
  return static ToMeasurement.== infix(_:_:)();
}

uint64_t base witness table accessor for Equatable in ToMeasurement<A, B>()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for Hashable in ToMeasurement<A, B>()
{
  return swift_getWitnessTable();
}

uint64_t partial apply for closure #1 in closure #1 in closure #1 in MeasurementView.body.getter@<X0>(uint64_t a1@<X0>, double *a2@<X8>)
{
  return closure #1 in closure #1 in closure #1 in MeasurementView.body.getter(a1, *(void *)(v2 + 40), *(void *)(v2 + 16), a2);
}

void type metadata accessor for ModifiedContent<Text, AccessibilityAttachmentModifier>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = a5(0, a3, a4);
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

uint64_t sub_1882CE1F4@<X0>(void *a1@<X8>)
{
  type metadata accessor for Measurement();
  uint64_t result = Measurement.value.getter();
  *a1 = v3;
  return result;
}

uint64_t sub_1882CE230()
{
  return Measurement.value.setter();
}

uint64_t sub_1882CE274()
{
  return 24;
}

__n128 sub_1882CE280(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t sub_1882CE294()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = (int *)type metadata accessor for MeasurementView();
  unint64_t v11 = (*(unsigned __int8 *)(*((void *)v2 - 1) + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(*((void *)v2 - 1) + 80);
  swift_release();
  swift_release();
  uint64_t v3 = type metadata accessor for Measurement();
  uint64_t v4 = type metadata accessor for Binding();
  uint64_t v5 = *(void (**)(unint64_t, uint64_t))(*(void *)(v3 - 8) + 8);
  v5(v0 + v11 + *(int *)(v4 + 32), v3);
  unint64_t v6 = v0 + v11 + v2[11];
  uint64_t v7 = type metadata accessor for Measurement<>.FormatStyle();
  (*(void (**)(unint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);
  (*(void (**)(unint64_t, uint64_t))(*(void *)(v1 - 8) + 8))(v0 + v11 + v2[12], v1);
  unint64_t v8 = v0 + v11 + v2[13];
  swift_getWitnessTable();
  uint64_t v9 = type metadata accessor for ClosedRange();
  if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48))(v8, 1, v9))
  {
    v5(v8, v3);
    v5(v8 + *(int *)(v9 + 36), v3);
  }
  swift_release();

  return swift_deallocObject();
}

uint64_t partial apply for closure #3 in closure #1 in closure #1 in MeasurementView.body.getter(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for MeasurementView();
  return (*(uint64_t (**)(uint64_t))(v1
                                            + *(int *)(v3 + 56)
                                            + ((*(unsigned __int8 *)(*(void *)(v3 - 8) + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v3 - 8) + 80))))(a1);
}

uint64_t specialized closure #5 in Stepper.init<A>(value:in:step:label:currentValueField:onEditingChanged:)(double *a1, double *a2)
{
  double v2 = a1[1];
  double v3 = a1[2];
  double v4 = *a2;
  v6[1] = *a1;
  void v6[2] = v2;
  v6[3] = v3;
  _s7SwiftUI25AccessibilityValueStorageVSgMaTm_1(0, (unint64_t *)&lazy cache variable for type metadata for Binding<Double>, MEMORY[0x1E4FBB3D0], MEMORY[0x1E4F41638]);
  MEMORY[0x18C113DA0](v6);
  v6[0] = v4 + v6[0];
  return dispatch thunk of AnyLocation.set(_:transaction:)();
}

uint64_t sub_1882CE610()
{
  return objectdestroy_10Tm_2();
}

uint64_t partial apply for specialized closure #5 in Stepper.init<A>(value:in:step:label:currentValueField:onEditingChanged:)()
{
  return specialized closure #5 in Stepper.init<A>(value:in:step:label:currentValueField:onEditingChanged:)((double *)(v0 + 16), (double *)(v0 + 40));
}

uint64_t specialized closure #6 in Stepper.init<A>(value:in:step:label:currentValueField:onEditingChanged:)(double *a1, double *a2)
{
  double v2 = a1[1];
  double v3 = a1[2];
  double v4 = *a2;
  v6[1] = *a1;
  void v6[2] = v2;
  v6[3] = v3;
  _s7SwiftUI25AccessibilityValueStorageVSgMaTm_1(0, (unint64_t *)&lazy cache variable for type metadata for Binding<Double>, MEMORY[0x1E4FBB3D0], MEMORY[0x1E4F41638]);
  MEMORY[0x18C113DA0](v6);
  v6[0] = v6[0] - v4;
  return dispatch thunk of AnyLocation.set(_:transaction:)();
}

uint64_t sub_1882CE6C0()
{
  return objectdestroy_10Tm_2();
}

uint64_t partial apply for specialized closure #6 in Stepper.init<A>(value:in:step:label:currentValueField:onEditingChanged:)()
{
  return specialized closure #6 in Stepper.init<A>(value:in:step:label:currentValueField:onEditingChanged:)((double *)(v0 + 16), (double *)(v0 + 40));
}

uint64_t specialized closure #3 in Stepper.init<A>(value:in:step:label:currentValueField:onEditingChanged:)(double *a1, double *a2, double *a3)
{
  double v3 = a1[1];
  double v4 = a1[2];
  double v5 = *a2;
  double v6 = a2[1];
  double v7 = *a3;
  v10[1] = *a1;
  _OWORD v10[2] = v3;
  void v10[3] = v4;
  _s7SwiftUI25AccessibilityValueStorageVSgMaTm_1(0, (unint64_t *)&lazy cache variable for type metadata for Binding<Double>, MEMORY[0x1E4FBB3D0], MEMORY[0x1E4F41638]);
  MEMORY[0x18C113DA0](v10);
  double v8 = v10[0];
  if (v5 > v10[0]) {
    double v8 = v5;
  }
  if (v6 < v8) {
    double v8 = v6;
  }
  v10[0] = v8 - v7;
  return dispatch thunk of AnyLocation.set(_:transaction:)();
}

uint64_t specialized closure #1 in Stepper.init<A>(value:in:step:label:currentValueField:onEditingChanged:)(double *a1, double *a2, double *a3)
{
  double v3 = a1[1];
  double v4 = a1[2];
  double v5 = *a2;
  double v6 = a2[1];
  double v7 = *a3;
  v10[1] = *a1;
  _OWORD v10[2] = v3;
  void v10[3] = v4;
  _s7SwiftUI25AccessibilityValueStorageVSgMaTm_1(0, (unint64_t *)&lazy cache variable for type metadata for Binding<Double>, MEMORY[0x1E4FBB3D0], MEMORY[0x1E4F41638]);
  MEMORY[0x18C113DA0](v10);
  double v8 = v10[0];
  if (v5 > v10[0]) {
    double v8 = v5;
  }
  if (v6 < v8) {
    double v8 = v6;
  }
  v10[0] = v7 + v8;
  return dispatch thunk of AnyLocation.set(_:transaction:)();
}

uint64_t sub_1882CE844()
{
  return objectdestroy_10Tm_2();
}

uint64_t partial apply for specialized closure #2 in Stepper.init<A>(value:in:step:label:currentValueField:onEditingChanged:)()
{
  return dispatch thunk of AnyLocation.set(_:transaction:)();
}

uint64_t sub_1882CE888()
{
  return objectdestroy_10Tm_2();
}

uint64_t partial apply for specialized closure #4 in Stepper.init<A>(value:in:step:label:currentValueField:onEditingChanged:)()
{
  return dispatch thunk of AnyLocation.set(_:transaction:)();
}

uint64_t sub_1882CE8CC()
{
  return objectdestroy_10Tm_2();
}

uint64_t partial apply for specialized closure #3 in Stepper.init<A>(value:in:step:label:currentValueField:onEditingChanged:)()
{
  return specialized closure #3 in Stepper.init<A>(value:in:step:label:currentValueField:onEditingChanged:)(v0 + 2, v0 + 5, v0 + 7);
}

uint64_t sub_1882CE8E4()
{
  return objectdestroy_10Tm_2();
}

uint64_t partial apply for specialized closure #1 in Stepper.init<A>(value:in:step:label:currentValueField:onEditingChanged:)()
{
  return specialized closure #1 in Stepper.init<A>(value:in:step:label:currentValueField:onEditingChanged:)(v0 + 2, v0 + 5, v0 + 7);
}

uint64_t FocusedValues.subscript.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for FocusedObjectKey();
  uint64_t WitnessTable = swift_getWitnessTable();
  return FocusedValues.subscript.getter(v2, WitnessTable, a1);
}

uint64_t FocusedObject.Wrapper.subscript.getter(uint64_t a1, uint64_t a2)
{
  swift_unknownObjectRetain();
  swift_retain();

  return MEMORY[0x1F4101040](a2, a1, 0, 0);
}

uint64_t FocusedObject._store.setter(uint64_t a1)
{
  uint64_t result = swift_unknownObjectRelease();
  *uint64_t v1 = a1;
  return result;
}

uint64_t (*FocusedObject._store.modify())(void, void, void, void)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t FocusedObject._seed.getter(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t FocusedObject._seed.setter(uint64_t result)
{
  *(void *)(v1 + 8) = result;
  return result;
}

uint64_t (*FocusedObject._seed.modify())(void, void, void, void)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t FocusedObject.wrappedValue.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(a1, a2, a3, a4);

  return swift_unknownObjectRetain();
}

uint64_t FocusedObject.projectedValue.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void v7[6] = a1;
  void v7[2] = a3;
  v7[3] = a4;
  type metadata accessor for Optional();
  uint64_t v4 = type metadata accessor for FocusedObject.Wrapper();
  swift_unknownObjectRetain();
  _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((void (*)(char *, char *))partial apply for implicit closure #1 in FocusedObject.projectedValue.getter, (uint64_t)v7, MEMORY[0x1E4FBC248], v4, v5, (uint64_t)&v8);
  swift_unknownObjectRelease();
  return v8;
}

uint64_t static FocusedObject._propertyBehaviors.getter()
{
  return 2;
}

uint64_t FocusedObject.init()()
{
  return 0;
}

uint64_t static FocusedObject._makeProperty<A>(in:container:fieldOffset:inputs:)()
{
  return specialized static FocusedObject._makeProperty<A>(in:container:fieldOffset:inputs:)();
}

uint64_t StoreBox.init(host:focusedValues:signal:)@<X0>(int a1@<W1>, unint64_t a2@<X2>, uint64_t a3@<X8>)
{
  int v3 = a2;
  unint64_t v6 = HIDWORD(a2);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for SubscriptionLifetime();
  swift_allocObject();
  uint64_t v7 = SubscriptionLifetime.init()();
  type metadata accessor for AttributeInvalidatingSubscriber();
  uint64_t result = AttributeInvalidatingSubscriber.__allocating_init(host:attribute:)();
  *(_DWORD *)a3 = a1;
  *(_DWORD *)(a3 + 4) = v3;
  *(_DWORD *)(a3 + 8) = v6;
  *(void *)(a3 + 16) = result;
  *(void *)(a3 + 24) = v7;
  *(void *)(a3 + 32) = 0;
  *(void *)(a3 + 40) = 0;
  return result;
}

uint64_t protocol witness for static DynamicProperty._makeProperty<A>(in:container:fieldOffset:inputs:) in conformance FocusedObject<A>()
{
  return specialized static FocusedObject._makeProperty<A>(in:container:fieldOffset:inputs:)();
}

uint64_t View.focusedObject<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return View.focusedObject<A>(_:)(a1, a2, a3, a4, a5, (void (*)(uint64_t, void *))View.focusedValue<A>(_:_:));
}

{
  return View.focusedObject<A>(_:)(a1, a2, a3, a4, a5, (void (*)(uint64_t, void *))View.focusedValue<A>(_:_:));
}

uint64_t static ObservableObject.focusedValueKey.getter()
{
  return swift_getKeyPath();
}

uint64_t View.focusedSceneObject<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return View.focusedObject<A>(_:)(a1, a2, a3, a4, a5, (void (*)(uint64_t, void *))View.focusedSceneValue<A>(_:_:));
}

{
  return View.focusedObject<A>(_:)(a1, a2, a3, a4, a5, (void (*)(uint64_t, void *))View.focusedSceneValue<A>(_:_:));
}

uint64_t View.focusedObject<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void (*a6)(uint64_t, void *))
{
  v10[1] = a5;
  uint64_t KeyPath = swift_getKeyPath();
  v10[0] = a1;
  a6(KeyPath, v10);
  return swift_release();
}

{
  uint64_t KeyPath;
  void v10[2];

  v10[1] = a5;
  uint64_t KeyPath = swift_getKeyPath();
  v10[0] = a1;
  a6(KeyPath, v10);
  return swift_release();
}

uint64_t StoreBox.reset()()
{
  uint64_t result = swift_unknownObjectRelease();
  *(void *)(v0 + 40) = 0;
  return result;
}

uint64_t StoreBox.update(property:phase:)(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v7 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(a3 + 24);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v10 = (char *)v34 - v9;
  LODWORD(v9) = *(_DWORD *)v4;
  uint64_t v12 = *(void *)(v4 + 16);
  uint64_t v11 = *(void *)(v4 + 24);
  uint64_t v13 = *(void *)(v4 + 40);
  int v14 = *MEMORY[0x1E4F4E7A0];
  uint64_t v36 = v15;
  uint64_t v37 = a1;
  v34[1] = v11;
  uint64_t v35 = v16;
  v34[0] = v12;
  if (v9 == v14
    || (uint64_t Value = AGGraphGetValue(),
        char v19 = v18,
        uint64_t v20 = *(void *)Value,
        char v21 = *(unsigned char *)(Value + 8),
        int v22 = *(_DWORD *)(Value + 12),
        swift_retain(),
        uint64_t v38 = v20,
        v20 == 1))
  {
    int v23 = 0;
    int v22 = 0;
    char v21 = 0;
    uint64_t v38 = 0;
    if (!v13) {
      goto LABEL_8;
    }
  }
  else
  {
    int v23 = v19 & 1;
    if (!v13) {
      goto LABEL_8;
    }
  }
  if (!v23)
  {
    uint64_t v24 = v37;
    swift_unknownObjectRetain();
    swift_unknownObjectRelease();
    uint64_t *v24 = v13;
    goto LABEL_14;
  }
LABEL_8:
  v39[0] = v7;
  v39[1] = v6;
  swift_getKeyPath();
  v39[5] = v38;
  char v40 = v21;
  int v41 = v22;
  swift_retain();
  uint64_t v25 = (void (*)(void *, void))swift_readAtKeyPath();
  uint64_t v27 = *v26;
  swift_unknownObjectRetain();
  v25(v39, 0);
  swift_release();
  swift_release();
  uint64_t v24 = v37;
  swift_unknownObjectRelease();
  uint64_t *v24 = v27;
  if (v13)
  {
    if (!v27) {
      goto LABEL_15;
    }
    if (v13 == v27) {
      int v23 = 0;
    }
    goto LABEL_14;
  }
  if (v27)
  {
LABEL_14:
    v39[0] = v34[0];
    swift_unknownObjectRetain();
    swift_retain();
    dispatch thunk of ObservableObject.objectWillChange.getter();
    uint64_t v28 = v36;
    swift_getAssociatedConformanceWitness();
    type metadata accessor for AttributeInvalidatingSubscriber();
    swift_getWitnessTable();
    swift_getWitnessTable();
    SubscriptionLifetime.subscribe<A>(subscriber:to:)();
    swift_unknownObjectRelease();
    (*(void (**)(char *, uint64_t))(v35 + 8))(v10, v28);
    swift_release();
    goto LABEL_15;
  }
  int v23 = 0;
LABEL_15:
  if (!AGGraphGetWeakValue())
  {
    swift_release();
    int v30 = 0;
    int v31 = 0;
    if ((v23 & 1) == 0) {
      goto LABEL_20;
    }
LABEL_19:
    ++*(void *)(v4 + 32);
    int v31 = v30;
    goto LABEL_20;
  }
  int v30 = v29;
  swift_release();
  if ((v30 | v23)) {
    goto LABEL_19;
  }
  int v31 = 0;
LABEL_20:
  v24[1] = *(void *)(v4 + 32);
  uint64_t v32 = *v24;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *(void *)(v4 + 40) = v32;
  return (v31 | v23) & 1;
}

uint64_t specialized FocusedValues.subscript.setter(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Optional();
  double v3 = MEMORY[0x1F4188790](v2);
  uint64_t v5 = (char *)&v10 - v4;
  (*(void (**)(char *, uint64_t, double))(v6 + 16))((char *)&v10 - v4, a1, v3);
  uint64_t v7 = type metadata accessor for FocusedObjectKey();
  uint64_t WitnessTable = swift_getWitnessTable();
  return FocusedValues.subscript.setter((uint64_t)v5, v7, v7, WitnessTable);
}

uint64_t partial apply for implicit closure #1 in FocusedObject.projectedValue.getter@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  *a2 = *a1;
  return swift_unknownObjectRetain();
}

uint64_t type metadata accessor for FocusedObject.Wrapper()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t specialized static FocusedObject._makeProperty<A>(in:container:fieldOffset:inputs:)()
{
  uint64_t v3 = *MEMORY[0x1E4F143B8];
  type metadata accessor for External<()>();
  lazy protocol witness table accessor for type External<()> and conformance External<A>();
  Attribute.init<A>(body:value:flags:update:)();
  type metadata accessor for GraphHost();
  MEMORY[0x18C114840]();
  lazy protocol witness table accessor for type FocusedValuesInputKey and conformance FocusedValuesInputKey();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  PropertyList.subscript.getter();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  unint64_t v0 = AGCreateWeakAttribute();
  StoreBox.init(host:focusedValues:signal:)(v2, v0, (uint64_t)&v2);
  type metadata accessor for StoreBox();
  swift_getWitnessTable();
  _DynamicPropertyBuffer.append<A>(_:fieldOffset:)();
  type metadata accessor for FocusedObject();
  static DynamicProperty.addTreeValue<A, B>(_:as:at:in:flags:)();
  return outlined release of StoreBox<A>((uint64_t)&v2);
}

uint64_t sub_1882CF544@<X0>(void *a1@<X8>)
{
  uint64_t result = FocusedValues.subscript.getter((uint64_t)&v3);
  *a1 = v3;
  return result;
}

uint64_t sub_1882CF5A4(uint64_t *a1)
{
  uint64_t v2 = *a1;
  return specialized FocusedValues.subscript.setter((uint64_t)&v2);
}

uint64_t sub_1882CF5E4()
{
  return 16;
}

uint64_t sub_1882CF5F0()
{
  return 1;
}

Swift::Int sub_1882CF5F8(uint64_t a1, uint64_t a2)
{
  return specialized EnvironmentObjectKey.hashValue.getter(*(void *)(a2 + a1 - 16));
}

__n128 sub_1882CF604(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

void *initializeBufferWithCopyOfBuffer for FocusedObject(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_unknownObjectRetain();
  return a1;
}

void *assignWithCopy for FocusedObject(void *a1, void *a2)
{
  *a1 = *a2;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  a1[1] = a2[1];
  return a1;
}

void *assignWithTake for FocusedObject(void *a1, void *a2)
{
  *a1 = *a2;
  swift_unknownObjectRelease();
  a1[1] = a2[1];
  return a1;
}

uint64_t type metadata accessor for FocusedObject()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_1882CF6E8()
{
  return swift_getWitnessTable();
}

uint64_t type metadata accessor for FocusedObjectKey()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for StoreBox()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t outlined release of StoreBox<A>(uint64_t a1)
{
  return a1;
}

uint64_t destroy for StoreBox()
{
  swift_release();
  swift_release();

  return swift_unknownObjectRelease();
}

uint64_t initializeWithCopy for StoreBox(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(void *)(a1 + 4) = *(void *)(a2 + 4);
  uint64_t v3 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v3;
  uint64_t v4 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v4;
  swift_retain();
  swift_retain();
  swift_unknownObjectRetain();
  return a1;
}

uint64_t assignWithCopy for StoreBox(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_retain();
  swift_release();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_retain();
  swift_release();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  return a1;
}

uint64_t assignWithTake for StoreBox(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  swift_release();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  swift_release();
  uint64_t v4 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v4;
  swift_unknownObjectRelease();
  return a1;
}

_UNKNOWN **associated type witness table accessor for DynamicPropertyBox.Property : DynamicProperty in StoreBox<A>()
{
  return &protocol witness table for FocusedObject<A>;
}

double static ToolbarPlacement.automatic.getter@<D0>(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)&double result = 7;
  *(_OWORD *)(a1 + 24) = xmmword_188382690;
  return result;
}

double static ToolbarPlacement.bottomBar.getter@<D0>(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)&double result = 3;
  *(_OWORD *)(a1 + 24) = xmmword_188382680;
  return result;
}

double static ToolbarPlacement.keyboardBar.getter@<D0>(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)&double result = 4;
  *(_OWORD *)(a1 + 24) = xmmword_18838AA20;
  return result;
}

void static ToolbarPlacement.windowToolbar.getter()
{
}

double static ToolbarPlacement.tabBar.getter@<D0>(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)&double result = 5;
  *(_OWORD *)(a1 + 24) = xmmword_18835ED10;
  return result;
}

void static ToolbarPlacement.accessoryBar<A>(id:)()
{
}

void ToolbarPlacement.init<A>(id:)()
{
}

uint64_t assignWithCopy for ToolbarPlacement(uint64_t a1, long long *a2)
{
  unint64_t v4 = *(void *)(a1 + 24);
  unint64_t v5 = *((void *)a2 + 3);
  if (v4 != 7)
  {
    if (v5 == 7)
    {
      outlined destroy of ToolbarPlacement.Role(a1);
    }
    else
    {
      if (v4 < 7)
      {
        if (v5 < 7) {
          goto LABEL_3;
        }
LABEL_12:
        *(void *)(a1 + 24) = v5;
        *(void *)(a1 + 32) = *((void *)a2 + 4);
        (**(void (***)(uint64_t, long long *))(v5 - 8))(a1, a2);
        return a1;
      }
      if (v5 >= 7)
      {
        __swift_assign_boxed_opaque_existential_1((uint64_t *)a1, (uint64_t *)a2);
        return a1;
      }
      outlined destroy of AnyHashable(a1);
    }
    uint64_t v8 = *((void *)a2 + 4);
    long long v9 = a2[1];
    *(_OWORD *)a1 = *a2;
    *(_OWORD *)(a1 + 16) = v9;
    *(void *)(a1 + 32) = v8;
    return a1;
  }
  if (v5 >= 8) {
    goto LABEL_12;
  }
LABEL_3:
  long long v6 = *a2;
  long long v7 = a2[1];
  *(void *)(a1 + 32) = *((void *)a2 + 4);
  *(_OWORD *)a1 = v6;
  *(_OWORD *)(a1 + 16) = v7;
  return a1;
}

uint64_t assignWithTake for ToolbarPlacement(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(void *)(a1 + 24);
  if (v4 != 7)
  {
    unint64_t v5 = *(void *)(a2 + 24);
    if (v5 == 7)
    {
      outlined destroy of ToolbarPlacement.Role(a1);
    }
    else if (v4 >= 7)
    {
      if (v5 >= 7) {
        __swift_destroy_boxed_opaque_existential_1(a1);
      }
      else {
        outlined destroy of AnyHashable(a1);
      }
    }
  }
  long long v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  return a1;
}

uint64_t getEnumTagSinglePayload for ToolbarPlacement(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 > 0x7FFFFFF7 && *(unsigned char *)(a1 + 40)) {
    return (*(_DWORD *)a1 + 2147483640);
  }
  unint64_t v3 = *(void *)(a1 + 24);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 7;
  if (v4 < 0) {
    int v4 = -1;
  }
  BOOL v5 = __OFSUB__(v4, 1);
  int v6 = v4 - 1;
  if (v6 < 0 != v5) {
    int v6 = -1;
  }
  return (v6 + 1);
}

uint64_t storeEnumTagSinglePayload for ToolbarPlacement(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFF7)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(void *)double result = a2 - 2147483640;
    if (a3 > 0x7FFFFFF7) {
      *(unsigned char *)(result + 40) = 1;
    }
  }
  else
  {
    if (a3 > 0x7FFFFFF7) {
      *(unsigned char *)(result + 40) = 0;
    }
    if (a2) {
      *(void *)(result + 24) = a2 + 7;
    }
  }
  return result;
}

uint64_t assignWithCopy for ToolbarPlacement.Storage(uint64_t a1, long long *a2)
{
  unint64_t v4 = *(void *)(a1 + 24);
  if (v4 >= 0xFFFFFFFF) {
    LODWORD(v4) = -1;
  }
  unsigned int v5 = v4 + 1;
  unint64_t v6 = *((void *)a2 + 3);
  if (v6 >= 0xFFFFFFFF) {
    LODWORD(v7) = -1;
  }
  else {
    uint64_t v7 = *((void *)a2 + 3);
  }
  unsigned int v8 = v7 + 1;
  if (v5 > 7)
  {
    if (v8 <= 7 && v7 == -1) {
      goto LABEL_13;
    }
LABEL_18:
    long long v9 = *a2;
    long long v10 = a2[1];
    *(void *)(a1 + 32) = *((void *)a2 + 4);
    *(_OWORD *)a1 = v9;
    *(_OWORD *)(a1 + 16) = v10;
    return a1;
  }
  if (v8 > 7)
  {
    if (v5) {
      goto LABEL_18;
    }
LABEL_17:
    __swift_destroy_boxed_opaque_existential_1(a1);
    goto LABEL_18;
  }
  if (!v5)
  {
    if (v7 == -1)
    {
      __swift_assign_boxed_opaque_existential_1((uint64_t *)a1, (uint64_t *)a2);
      return a1;
    }
    goto LABEL_17;
  }
  if (v7 != -1) {
    goto LABEL_18;
  }
LABEL_13:
  *(void *)(a1 + 24) = v6;
  *(void *)(a1 + 32) = *((void *)a2 + 4);
  (**(void (***)(uint64_t, long long *))(v6 - 8))(a1, a2);
  return a1;
}

uint64_t getEnumTagSinglePayload for ToolbarPlacement.Storage(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFF8 && *(unsigned char *)(a1 + 40)) {
    return (*(_DWORD *)a1 + 2147483640);
  }
  unint64_t v3 = *(void *)(a1 + 24);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  unsigned int v4 = v3 + 1;
  unsigned int v5 = v3 - 6;
  if (v4 < 8) {
    unsigned int v5 = 0;
  }
  if (v5 >= 2) {
    return v5 - 1;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for ToolbarPlacement.Storage(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFF7)
  {
    *(void *)(result + 32) = 0;
    *(_OWORD *)double result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_DWORD *)double result = a2 - 2147483640;
    if (a3 >= 0x7FFFFFF8) {
      *(unsigned char *)(result + 40) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFF8) {
      *(unsigned char *)(result + 40) = 0;
    }
    if (a2) {
      *(void *)(result + 24) = a2 + 7;
    }
  }
  return result;
}

uint64_t getEnumTag for ToolbarPlacement.Storage(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 24);
  if (v1 >= 0xFFFFFFFF) {
    LODWORD(v1) = -1;
  }
  unsigned int v2 = v1 + 1;
  unsigned int v3 = v1 - 6;
  if (v2 >= 8) {
    return v3;
  }
  else {
    return 0;
  }
}

double destructiveInjectEnumTag for ToolbarPlacement.Storage(uint64_t a1, unsigned int a2)
{
  if (a2 > 0x7FFFFFF8)
  {
    *(void *)(a1 + 32) = 0;
    double result = 0.0;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    *(_DWORD *)a1 = a2 - 2147483641;
  }
  else if (a2)
  {
    *(void *)(a1 + 24) = a2 + 6;
  }
  return result;
}

ValueMetadata *type metadata accessor for ToolbarPlacement.Storage()
{
  return &type metadata for ToolbarPlacement.Storage;
}

Swift::Int ToolbarPlacement.Storage.hashValue.getter()
{
  Hasher.init(_seed:)();
  outlined init with copy of ToolbarPlacement.Storage(v0, (uint64_t)v3);
  if (v4 == 7)
  {
    Hasher._combine(_:)(1uLL);
  }
  else
  {
    outlined init with take of ToolbarPlacement.Role((uint64_t)v3, (uint64_t)v2);
    Hasher._combine(_:)(0);
    ToolbarPlacement.Role.hash(into:)();
    outlined destroy of ToolbarPlacement.Role((uint64_t)v2);
  }
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance ToolbarPlacement.Storage()
{
  outlined init with copy of ToolbarPlacement.Storage(v0, (uint64_t)v2);
  if (v3 == 7)
  {
    Hasher._combine(_:)(1uLL);
  }
  else
  {
    outlined init with take of ToolbarPlacement.Role((uint64_t)v2, (uint64_t)v1);
    Hasher._combine(_:)(0);
    ToolbarPlacement.Role.hash(into:)();
    outlined destroy of ToolbarPlacement.Role((uint64_t)v1);
  }
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ToolbarPlacement.Storage()
{
  Hasher.init(_seed:)();
  outlined init with copy of ToolbarPlacement.Storage(v0, (uint64_t)v3);
  if (v4 == 7)
  {
    Hasher._combine(_:)(1uLL);
  }
  else
  {
    outlined init with take of ToolbarPlacement.Role((uint64_t)v3, (uint64_t)v2);
    Hasher._combine(_:)(0);
    ToolbarPlacement.Role.hash(into:)();
    outlined destroy of ToolbarPlacement.Role((uint64_t)v2);
  }
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance ToolbarPlacement.Role()
{
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ToolbarPlacement.Role()
{
  return Hasher._finalize()();
}

double protocol witness for static CaseIterable.allCases.getter in conformance ToolbarPlacement.Role@<D0>(uint64_t *a1@<X8>)
{
  type metadata accessor for [ToolbarPlacement.Role](0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<ToolbarPlacement.Role>, MEMORY[0x1E4FBBE00]);
  uint64_t v2 = swift_allocObject();
  *(void *)&double result = 7;
  *(_OWORD *)(v2 + 16) = xmmword_188382650;
  *(_OWORD *)(v2 + 32) = 0u;
  *(_OWORD *)(v2 + 48) = 0u;
  *(_OWORD *)(v2 + 64) = 0u;
  *(_OWORD *)(v2 + 80) = 0u;
  *(void *)(v2 + 96) = 2;
  *(_OWORD *)(v2 + 104) = 0u;
  *(_OWORD *)(v2 + 120) = 0u;
  *(void *)(v2 + 136) = 3;
  *(_OWORD *)(v2 + 144) = 0u;
  *(_OWORD *)(v2 + 160) = 0u;
  *(void *)(v2 + 176) = 4;
  *(_OWORD *)(v2 + 184) = 0u;
  *(_OWORD *)(v2 + 200) = 0u;
  *(void *)(v2 + 216) = 5;
  *(_OWORD *)(v2 + 224) = 0u;
  *(_OWORD *)(v2 + 240) = 0u;
  *(void *)(v2 + 256) = 6;
  *(_OWORD *)(v2 + 264) = 0u;
  *(_OWORD *)(v2 + 280) = 0u;
  *(void *)(v2 + 296) = 1;
  *(void *)(v2 + 304) = 0;
  *a1 = v2;
  return result;
}

unint64_t lazy protocol witness table accessor for type [ToolbarPlacement.Role] and conformance [A]()
{
  unint64_t result = lazy protocol witness table cache variable for type [ToolbarPlacement.Role] and conformance [A];
  if (!lazy protocol witness table cache variable for type [ToolbarPlacement.Role] and conformance [A])
  {
    type metadata accessor for [ToolbarPlacement.Role](255, &lazy cache variable for type metadata for [ToolbarPlacement.Role], MEMORY[0x1E4FBB320]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [ToolbarPlacement.Role] and conformance [A]);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ToolbarPlacement.Storage and conformance ToolbarPlacement.Storage()
{
  unint64_t result = lazy protocol witness table cache variable for type ToolbarPlacement.Storage and conformance ToolbarPlacement.Storage;
  if (!lazy protocol witness table cache variable for type ToolbarPlacement.Storage and conformance ToolbarPlacement.Storage)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ToolbarPlacement.Storage and conformance ToolbarPlacement.Storage);
  }
  return result;
}

uint64_t specialized static ToolbarPlacement.Storage.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  outlined init with copy of ToolbarPlacement.Storage(a1, (uint64_t)v7);
  outlined init with copy of ToolbarPlacement.Storage(a2, (uint64_t)v9);
  if (v8 != 7)
  {
    outlined init with copy of ToolbarPlacement.Storage((uint64_t)v7, (uint64_t)v6);
    if (v10 != 7)
    {
      outlined init with take of ToolbarPlacement.Role((uint64_t)v9, (uint64_t)v5);
      char v3 = specialized static ToolbarPlacement.Role.== infix(_:_:)((uint64_t)v6, (uint64_t)v5);
      outlined destroy of ToolbarPlacement.Role((uint64_t)v5);
      outlined destroy of ToolbarPlacement.Role((uint64_t)v6);
      outlined destroy of ToolbarPlacement.Role((uint64_t)v7);
      return v3 & 1;
    }
    outlined destroy of ToolbarPlacement.Role((uint64_t)v6);
    goto LABEL_6;
  }
  if (v10 != 7)
  {
LABEL_6:
    outlined destroy of (Toolbar.BarLocation, Toolbar.BarLocation)((uint64_t)v7, &lazy cache variable for type metadata for (ToolbarPlacement.Storage, ToolbarPlacement.Storage));
    char v3 = 0;
    return v3 & 1;
  }
  outlined destroy of ToolbarPlacement.Role((uint64_t)v7);
  char v3 = 1;
  return v3 & 1;
}

void type metadata accessor for [ToolbarPlacement.Role](uint64_t a1, unint64_t *a2, uint64_t (*a3)(void, ValueMetadata *))
{
  if (!*a2)
  {
    unint64_t v4 = a3(0, &type metadata for ToolbarPlacement.Role);
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

void static ToolbarPlacement._bottomBar.getter()
{
}

void static ToolbarPlacement.bottomOrnament.getter()
{
}

void static ToolbarPlacement.backDeployable_accessoryBar<A>(id:)()
{
}

uint64_t ControlWidgetTemplateHost.__allocating_init<A>(content:)(uint64_t a1, uint64_t a2)
{
  swift_allocObject();
  uint64_t v4 = specialized ControlWidgetTemplateHost.init<A>(content:)();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a2 - 8) + 8))(a1, a2);
  return v4;
}

uint64_t ControlWidgetTemplateHost.init<A>(content:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = specialized ControlWidgetTemplateHost.init<A>(content:)();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a2 - 8) + 8))(a1, a2);
  return v4;
}

uint64_t ControlWidgetTemplateHost.readPreference<A>(_:)()
{
  return static Update.ensure<A>(_:)();
}

uint64_t closure #1 in ControlWidgetTemplateHost.readPreference<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v26 = a1;
  uint64_t v29 = a2;
  swift_getAssociatedTypeWitness();
  uint64_t v27 = type metadata accessor for PreferenceValues.Value();
  uint64_t v28 = *(void *)(v27 - 8);
  MEMORY[0x1F4188790](v27);
  uint64_t v4 = (char *)&v25 - v3;
  uint64_t v5 = *(void *)(a1 + 16);
  swift_beginAccess();
  uint64_t v7 = *(void **)(v5 + 24);
  uint64_t v8 = *(void **)(v5 + 32);
  char v9 = *(unsigned char *)(v5 + 40);
  char v10 = *(unsigned char *)(v5 + 41);
  int v11 = *(_DWORD *)(v5 + 68);
  uint64_t v12 = *(void *)(v5 + 72);
  int v13 = *(_DWORD *)(v5 + 80);
  uint64_t v14 = *(void *)(v5 + 88);
  uint64_t v15 = *(void *)(v5 + 112);
  int v31 = *(void **)(v5 + 16);
  unint64_t v6 = v31;
  uint64_t v32 = v7;
  uint64_t v33 = v8;
  char v34 = v9;
  char v35 = v10;
  long long v36 = *(_OWORD *)(v5 + 44);
  uint64_t v37 = *(void *)(v5 + 60);
  int v38 = v11;
  uint64_t v39 = v12;
  int v40 = v13;
  uint64_t v41 = v14;
  long long v42 = *(_OWORD *)(v5 + 96);
  uint64_t v43 = v15;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  id v16 = v6;
  id v17 = v7;
  id v18 = v8;
  char v19 = (void (*)(void **, void))GraphHost.Data.hostPreferenceKeys.modify();
  PreferenceKeys.add(_:)();
  v19(&v30, 0);
  uint64_t v20 = v31;
  char v21 = v32;
  int v22 = v33;
  swift_bridgeObjectRelease();
  swift_release();

  swift_release();
  GraphHost.preferenceValues()();
  int v30 = v31;
  PreferenceValues.subscript.getter();
  swift_bridgeObjectRelease();
  uint64_t v23 = v27;
  PreferenceValues.Value.value.getter();
  (*(void (**)(char *, uint64_t))(v28 + 8))(v4, v23);
  return $defer #1 <A><A1>() in closure #1 in WidgetHost.readPreference<A>(_:)(v26);
}

uint64_t ControlWidgetTemplateHost.setEnvironment(_:)()
{
  return static Update.ensure<A>(_:)();
}

uint64_t ControlWidgetTemplateHost.deinit()
{
  swift_release();
  return v0;
}

uint64_t ControlWidgetTemplateHost.__deallocating_deinit()
{
  swift_release();

  return swift_deallocClassInstance();
}

uint64_t specialized ControlWidgetTemplateHost.init<A>(content:)()
{
  type metadata accessor for ControlWidgetTemplateGraph();
  static Update.ensure<A>(_:)();
  *(void *)(v0 + 16) = v2;
  return v0;
}

uint64_t partial apply for closure #1 in ControlWidgetTemplateHost.readPreference<A>(_:)@<X0>(uint64_t a1@<X8>)
{
  return closure #1 in ControlWidgetTemplateHost.readPreference<A>(_:)(*(void *)(v1 + 32), a1);
}

uint64_t type metadata accessor for ControlWidgetTemplateHost()
{
  return self;
}

uint64_t method lookup function for ControlWidgetTemplateHost(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for ControlWidgetTemplateHost);
}

uint64_t dispatch thunk of ControlWidgetTemplateHost.__allocating_init<A>(content:)()
{
  return (*(uint64_t (**)(void))(v0 + 88))();
}

uint64_t partial apply for closure #1 in ControlWidgetTemplateHost.init<A>(content:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v3 = v1[2];
  uint64_t v4 = v1[3];
  uint64_t v5 = v1[4];
  type metadata accessor for ControlWidgetTemplateGraph();
  uint64_t result = specialized ControlWidgetTemplateGraph.__allocating_init<A>(_:)(v5, v3, v4);
  *a1 = result;
  return result;
}

uint64_t EnvironmentValues.withCurrentHostingController.setter(uint64_t a1)
{
  outlined init with copy of WithCurrentHostingControllerAction(a1, (uint64_t)v4);
  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.WithCurrentHostingControllerKey>();
  lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.WithCurrentHostingControllerKey> and conformance EnvironmentPropertyKey<A>();
  swift_retain();
  PropertyList.subscript.setter();
  if (*(void *)(v1 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  swift_release();
  return outlined destroy of WithCurrentHostingControllerAction(a1);
}

uint64_t EnvironmentValues.withCurrentHostingController.getter()
{
  if (*(void *)(v0 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.WithCurrentHostingControllerKey>();
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.WithCurrentHostingControllerKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.WithCurrentHostingControllerKey>();
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.WithCurrentHostingControllerKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  return swift_release_n();
}

uint64_t protocol witness for static EnvironmentKey.defaultValue.getter in conformance EnvironmentValues.WithCurrentHostingControllerKey@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for defaultValue != -1) {
    swift_once();
  }

  return outlined init with copy of WithCurrentHostingControllerAction((uint64_t)&static EnvironmentValues.WithCurrentHostingControllerKey.defaultValue, a1);
}

uint64_t sub_1882D0C14(uint64_t a1)
{
  outlined init with copy of WithCurrentHostingControllerAction(a1, (uint64_t)v2);
  return EnvironmentValues.withCurrentHostingController.setter((uint64_t)v2);
}

ValueMetadata *type metadata accessor for EnvironmentValues.WithCurrentHostingControllerKey()
{
  return &type metadata for EnvironmentValues.WithCurrentHostingControllerKey;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance LeafDisplayList<A>()
{
  return 0x707369446661654CLL;
}

uint64_t key path getter for EnvironmentValues.backgroundContext : EnvironmentValues@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = EnvironmentValues.backgroundContext.getter();
  *a1 = v3;
  return result;
}

uint64_t key path setter for EnvironmentValues.backgroundContext : EnvironmentValues()
{
  return EnvironmentValues.backgroundContext.setter();
}

uint64_t DocumentGroupLaunchScene.body.getter@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for Optional();
  double v7 = MEMORY[0x1F4188790](v6);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v9 + 16))((char *)&v24 - v8, v3, v6, v7);
  uint64_t v27 = *(void *)(a1 + 24);
  swift_getWitnessTable();
  uint64_t v25 = AnyView.init<A>(_:)();
  uint64_t v10 = *(int *)(a1 + 36);
  int v11 = (uint64_t *)(v3 + *(int *)(a1 + 40));
  uint64_t v12 = *v11;
  uint64_t v13 = v11[1];
  uint64_t v15 = v11[2];
  uint64_t v14 = v11[3];
  id v16 = (uint64_t *)(v3 + *(int *)(a1 + 44));
  uint64_t v18 = *v16;
  uint64_t v17 = v16[1];
  char v19 = (uint64_t *)(v3 + *(int *)(a1 + 48));
  uint64_t v21 = *v19;
  uint64_t v20 = v19[1];
  uint64_t v22 = *(void *)(v3 + v10);
  if (v22)
  {
    uint64_t v26 = v22;
    outlined copy of Text?(v12, v13, v15, v14);
    outlined copy of AppIntentExecutor?(v18);
    outlined copy of AppIntentExecutor?(v21);
    swift_retain();
    uint64_t result = AnyView.init<A>(_:)();
  }
  else
  {
    outlined copy of Text?(v12, v13, v15, v14);
    outlined copy of AppIntentExecutor?(v18);
    outlined copy of AppIntentExecutor?(v21);
    uint64_t result = 0;
  }
  *a2 = 0xD00000000000001CLL;
  a2[1] = 0x8000000188345A60;
  a2[2] = v25;
  a2[3] = 0;
  a2[4] = 0;
  a2[5] = v12;
  a2[6] = v13;
  a2[7] = v15;
  a2[8] = v14;
  a2[9] = result;
  a2[10] = v18;
  a2[11] = v17;
  a2[12] = v21;
  a2[13] = v20;
  a2[14] = MEMORY[0x1E4FBC860];
  a2[15] = 0;
  return result;
}

uint64_t DocumentGroupLaunchScene.init<A, B, C>(_:_:background:backgroundAccessoryView:overlayAccessoryView:)@<X0>(void (*a1)(uint64_t)@<X4>, uint64_t a2@<X5>, void (*a3)(void)@<X6>, uint64_t a4@<X8>, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, long long a11, long long a12, uint64_t a13, char *a14)
{
  char v35 = a1;
  uint64_t v36 = a2;
  uint64_t v34 = a4;
  long long v30 = a12;
  long long v31 = a11;
  uint64_t v27 = a14;
  uint64_t v28 = a13;
  uint64_t v32 = a7;
  uint64_t v33 = a5;
  uint64_t v29 = a9;
  uint64_t v15 = type metadata accessor for Optional();
  MEMORY[0x1F4188790](v15 - 8);
  uint64_t v17 = (char *)&v26 - v16;
  uint64_t v18 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v20 = v19;
  uint64_t v22 = v21;
  uint64_t v24 = v23 & 1;
  a3();
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(a10 - 8) + 56))(v17, 0, 1, a10);
  swift_retain();
  swift_retain();
  DocumentGroupLaunchScene.init<A, B, C>(_:actions:background:backgroundAccessoryView:overlayAccessoryView:)(v18, v20, v24, v22, v35, v36, (uint64_t)v17, v33, v34, a6, v32, a8, v29, a10, v31, *((uint64_t *)&v31 + 1), v30, *((uint64_t *)&v30 + 1), v28,
    v27);
  swift_release();
  return swift_release();
}

uint64_t DocumentGroupLaunchScene.init<A, B, C>(_:actions:background:backgroundAccessoryView:overlayAccessoryView:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void (*a5)(uint64_t)@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char *a20)
{
  uint64_t v73 = a8;
  uint64_t v78 = a7;
  uint64_t v79 = a4;
  uint64_t v68 = a6;
  uint64_t v69 = a5;
  uint64_t v81 = a2;
  uint64_t v82 = a3;
  uint64_t v80 = a1;
  uint64_t v76 = a18;
  uint64_t v21 = type metadata accessor for Optional();
  uint64_t v71 = *(void *)(v21 - 8);
  uint64_t v72 = v21;
  MEMORY[0x1F4188790](v21);
  uint64_t v67 = (char *)&v62 - v22;
  uint64_t v77 = type metadata accessor for ModifiedContent();
  MEMORY[0x1F4188790](v77);
  uint64_t v75 = (char *)&v62 - v23;
  uint64_t v24 = type metadata accessor for Optional();
  uint64_t v25 = *(void *)(v24 - 8);
  MEMORY[0x1F4188790](v24);
  uint64_t v27 = (char *)&v62 - v26;
  uint64_t v28 = *(void *)(a14 - 8);
  double v30 = MEMORY[0x1F4188790](v29);
  uint64_t v32 = (char *)&v62 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v33 = *(void *)(a13 - 8);
  uint64_t v34 = *(void (**)(char *, void, uint64_t, uint64_t))(v33 + 56);
  uint64_t v64 = v33 + 56;
  uint64_t v65 = v34;
  ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t, double))v34)(a9, 1, 1, a13, v30);
  uint64_t v70 = a13;
  uint64_t v74 = a17;
  char v35 = (int *)type metadata accessor for DocumentGroupLaunchScene();
  uint64_t v36 = v35[9];
  *(void *)(a9 + v36) = 0;
  uint64_t v37 = (void *)(a9 + v35[10]);
  int v38 = (uint64_t *)(a9 + v35[11]);
  *int v38 = 0;
  v38[1] = 0;
  unint64_t v62 = v38;
  uint64_t v39 = (uint64_t *)(a9 + v35[12]);
  *uint64_t v39 = 0;
  v39[1] = 0;
  uint64_t v63 = v39;
  uint64_t v40 = v81;
  *uint64_t v37 = v80;
  v37[1] = v40;
  uint64_t v41 = v78;
  uint64_t v42 = v79;
  _OWORD v37[2] = v82;
  v37[3] = v42;
  (*(void (**)(char *, uint64_t, uint64_t))(v25 + 16))(v27, v41, v24);
  int v43 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v28 + 48))(v27, 1, a14);
  uint64_t v66 = a14;
  if (v43 == 1)
  {
    outlined copy of Text?(v80, v81, v82, v79);
    uint64_t v44 = (*(uint64_t (**)(char *, uint64_t))(v25 + 8))(v27, v24);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v28 + 32))(v32, v27, a14);
    outlined copy of Text?(v80, v81, v82, v79);
    static Edge.Set.all.getter();
    uint64_t v45 = v76;
    View.ignoresSafeArea(_:edges:)();
    uint64_t v83 = v45;
    uint64_t v84 = MEMORY[0x1E4F41200];
    swift_getWitnessTable();
    uint64_t v46 = AnyView.init<A>(_:)();
    (*(void (**)(char *, uint64_t))(v28 + 8))(v32, a14);
    uint64_t v44 = swift_release();
    *(void *)(a9 + v36) = v46;
  }
  uint64_t v75 = a20;
  uint64_t v77 = a19;
  uint64_t v47 = a11;
  uint64_t v48 = v67;
  v69(v44);
  outlined consume of Text?(v80, v81, v82, v79);
  (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v78, v24);
  uint64_t v49 = v70;
  v65(v48, 0, 1, v70);
  uint64_t result = (*(uint64_t (**)(uint64_t, char *, uint64_t))(v71 + 40))(a9, v48, v72);
  uint64_t v51 = v76;
  uint64_t v52 = v74;
  uint64_t v53 = v66;
  if (v73)
  {
    uint64_t v54 = v73;
    uint64_t v55 = (void *)swift_allocObject();
    void v55[2] = v49;
    v55[3] = v53;
    v55[4] = a15;
    v55[5] = a16;
    v55[6] = v52;
    v55[7] = v51;
    uint64_t v56 = v75;
    _OWORD v55[8] = v77;
    v55[9] = v56;
    v55[10] = v54;
    v55[11] = a10;
    uint64_t v47 = a11;
    uint64_t v57 = v62;
    uint64_t result = outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(*v62);
    *uint64_t v57 = (uint64_t)partial apply for closure #1 in DocumentGroupLaunchScene.init<A, B, C>(_:backgroundStyle:actions:backgroundAccessoryView:overlayAccessoryView:);
    v57[1] = (uint64_t)v55;
  }
  uint64_t v58 = v77;
  if (v47)
  {
    uint64_t v59 = (void *)swift_allocObject();
    v59[2] = v49;
    v59[3] = v53;
    v59[4] = a15;
    v59[5] = a16;
    v59[6] = v52;
    v59[7] = v51;
    uint64_t v60 = v75;
    v59[8] = v58;
    v59[9] = v60;
    v59[10] = v47;
    v59[11] = a12;
    uint64_t v61 = v63;
    uint64_t result = outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(*v63);
    *uint64_t v61 = (uint64_t)partial apply for closure #2 in DocumentGroupLaunchScene.init<A, B, C>(_:backgroundStyle:actions:backgroundAccessoryView:overlayAccessoryView:);
    v61[1] = (uint64_t)v59;
  }
  return result;
}

uint64_t DocumentGroupLaunchScene.init<A, B>(_:_:background:backgroundAccessoryView:)@<X0>(void (*a1)(uint64_t)@<X4>, uint64_t a2@<X5>, void (*a3)(void)@<X6>, uint64_t a4@<X8>, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, long long a10, uint64_t a11)
{
  uint64_t v28 = a1;
  uint64_t v29 = a2;
  uint64_t v26 = a4;
  long long v23 = a10;
  uint64_t v27 = a5;
  uint64_t v24 = a7;
  uint64_t v25 = a9;
  uint64_t v12 = type metadata accessor for Optional();
  MEMORY[0x1F4188790](v12 - 8);
  uint64_t v14 = (char *)&v23 - v13;
  uint64_t v15 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v17 = v16;
  uint64_t v19 = v18;
  uint64_t v21 = v20 & 1;
  a3();
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(a8 - 8) + 56))(v14, 0, 1, a8);
  swift_retain();
  DocumentGroupLaunchScene.init<A, B, C>(_:actions:background:backgroundAccessoryView:overlayAccessoryView:)(v15, v17, v21, v19, v28, v29, (uint64_t)v14, v27, v26, a6, 0, 0, v24, a8, v25, MEMORY[0x1E4F417F8], v23, *((uint64_t *)&v23 + 1), a11,
    MEMORY[0x1E4F417F0]);
  return swift_release();
}

uint64_t DocumentGroupLaunchScene.init<A, B>(_:_:background:overlayAccessoryView:)@<X0>(void (*a1)(uint64_t)@<X4>, uint64_t a2@<X5>, void (*a3)(void)@<X6>, uint64_t a4@<X8>, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, long long a9, uint64_t a10, char *a11)
{
  uint64_t v29 = a1;
  uint64_t v30 = a2;
  uint64_t v28 = a4;
  long long v25 = a9;
  uint64_t v24 = a10;
  uint64_t v26 = a7;
  uint64_t v27 = a5;
  uint64_t v12 = type metadata accessor for Optional();
  MEMORY[0x1F4188790](v12 - 8);
  uint64_t v14 = (char *)&v23 - v13;
  uint64_t v15 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v17 = v16;
  uint64_t v19 = v18;
  uint64_t v21 = v20 & 1;
  a3();
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(a8 - 8) + 56))(v14, 0, 1, a8);
  swift_retain();
  DocumentGroupLaunchScene.init<A, B, C>(_:actions:background:backgroundAccessoryView:overlayAccessoryView:)(v15, v17, v21, v19, v29, v30, (uint64_t)v14, 0, v28, 0, v27, a6, v26, a8, MEMORY[0x1E4F417F8], v25, *((uint64_t *)&v25 + 1), v24, MEMORY[0x1E4F417F0],
    a11);
  return swift_release();
}

uint64_t DocumentGroupLaunchScene.init<A>(_:_:background:)@<X0>(void (*a1)(uint64_t)@<X4>, uint64_t a2@<X5>, void (*a3)(void)@<X6>, uint64_t a4@<X8>, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v23 = a1;
  uint64_t v24 = a2;
  uint64_t v22 = a4;
  uint64_t v21 = a5;
  uint64_t v9 = type metadata accessor for Optional();
  MEMORY[0x1F4188790](v9 - 8);
  int v11 = (char *)&v20 - v10;
  uint64_t v12 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v14 = v13;
  uint64_t v16 = v15;
  uint64_t v18 = v17 & 1;
  a3();
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(a6 - 8) + 56))(v11, 0, 1, a6);
  return DocumentGroupLaunchScene.init<A, B, C>(_:actions:background:backgroundAccessoryView:overlayAccessoryView:)(v12, v14, v18, v16, v23, v24, (uint64_t)v11, 0, v22, 0, 0, 0, v21, a6, MEMORY[0x1E4F417F8], MEMORY[0x1E4F417F8], a7, a8, MEMORY[0x1E4F417F0],
           MEMORY[0x1E4F417F0]);
}

uint64_t DocumentGroupLaunchScene.init<A, B, C, D>(_:_:background:backgroundAccessoryView:overlayAccessoryView:)@<X0>(uint64_t a1@<X0>, void (*a2)(uint64_t)@<X1>, uint64_t a3@<X2>, void (*a4)(uint64_t)@<X3>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, long long a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char *a18)
{
  uint64_t v45 = a7;
  uint64_t v46 = a2;
  uint64_t v47 = a3;
  uint64_t v48 = a5;
  char v35 = a4;
  uint64_t v36 = a1;
  uint64_t v44 = a8;
  long long v43 = a13;
  uint64_t v40 = a6;
  uint64_t v41 = a16;
  uint64_t v37 = a18;
  uint64_t v42 = a10;
  uint64_t v38 = a14;
  uint64_t v39 = a17;
  uint64_t v19 = type metadata accessor for Optional();
  MEMORY[0x1F4188790](v19 - 8);
  uint64_t v21 = (char *)&v35 - v20;
  uint64_t v22 = *(void *)(a11 - 8);
  double v24 = MEMORY[0x1F4188790](v23);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v22 + 16))((char *)&v35 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0), a1, a11, v24);
  uint64_t v26 = Text.init<A>(_:)();
  uint64_t v28 = v27;
  uint64_t v30 = v29;
  uint64_t v32 = v31 & 1;
  v35(v26);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(a12 - 8) + 56))(v21, 0, 1, a12);
  uint64_t v33 = v40;
  swift_retain();
  swift_retain();
  DocumentGroupLaunchScene.init<A, B, C>(_:actions:background:backgroundAccessoryView:overlayAccessoryView:)(v26, v28, v32, v30, v46, v47, (uint64_t)v21, v48, v44, v33, v45, a9, v42, a12, v43, *((uint64_t *)&v43 + 1), v38, v41, v39,
    v37);
  swift_release();
  swift_release();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v22 + 8))(v36, a11);
}

uint64_t DocumentGroupLaunchScene.init<A, B, C>(_:_:background:backgroundAccessoryView:)@<X0>(uint64_t a1@<X0>, void (*a2)(uint64_t)@<X1>, uint64_t a3@<X2>, void (*a4)(void)@<X3>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  uint64_t v40 = a7;
  uint64_t v41 = a2;
  uint64_t v42 = a3;
  uint64_t v43 = a5;
  uint64_t v33 = a4;
  uint64_t v34 = a1;
  uint64_t v39 = a8;
  uint64_t v37 = a12;
  uint64_t v38 = a11;
  uint64_t v35 = a15;
  uint64_t v36 = a14;
  uint64_t v17 = type metadata accessor for Optional();
  MEMORY[0x1F4188790](v17 - 8);
  uint64_t v19 = (char *)&v32 - v18;
  uint64_t v20 = *(void *)(a9 - 8);
  double v22 = MEMORY[0x1F4188790](v21);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v20 + 16))((char *)&v32 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0), a1, a9, v22);
  uint64_t v24 = Text.init<A>(_:)();
  uint64_t v26 = v25;
  uint64_t v28 = v27;
  uint64_t v30 = v29 & 1;
  v33();
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(a10 - 8) + 56))(v19, 0, 1, a10);
  swift_retain();
  DocumentGroupLaunchScene.init<A, B, C>(_:actions:background:backgroundAccessoryView:overlayAccessoryView:)(v24, v26, v30, v28, v41, v42, (uint64_t)v19, v43, v39, a6, 0, 0, v40, a10, v38, MEMORY[0x1E4F417F8], v37, v36, v35,
    MEMORY[0x1E4F417F0]);
  swift_release();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v20 + 8))(v34, a9);
}

uint64_t DocumentGroupLaunchScene.init<A, B, C>(_:_:background:overlayAccessoryView:)@<X0>(uint64_t a1@<X0>, void (*a2)(uint64_t)@<X1>, uint64_t a3@<X2>, void (*a4)(uint64_t)@<X3>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>, uint64_t a9, uint64_t a10, long long a11, uint64_t a12, uint64_t a13, char *a14)
{
  uint64_t v37 = a7;
  uint64_t v38 = a5;
  char v31 = a4;
  uint64_t v32 = a1;
  uint64_t v39 = a2;
  uint64_t v40 = a3;
  uint64_t v36 = a8;
  long long v35 = a11;
  uint64_t v33 = a14;
  uint64_t v34 = a13;
  uint64_t v16 = type metadata accessor for Optional();
  MEMORY[0x1F4188790](v16 - 8);
  uint64_t v18 = (char *)&v31 - v17;
  uint64_t v19 = *(void *)(a9 - 8);
  double v21 = MEMORY[0x1F4188790](v20);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v19 + 16))((char *)&v31 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0), a1, a9, v21);
  uint64_t v23 = Text.init<A>(_:)();
  uint64_t v25 = v24;
  uint64_t v27 = v26;
  uint64_t v29 = v28 & 1;
  v31(v23);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(a10 - 8) + 56))(v18, 0, 1, a10);
  swift_retain();
  DocumentGroupLaunchScene.init<A, B, C>(_:actions:background:backgroundAccessoryView:overlayAccessoryView:)(v23, v25, v29, v27, v39, v40, (uint64_t)v18, 0, v36, 0, v38, a6, v37, a10, MEMORY[0x1E4F417F8], v35, *((uint64_t *)&v35 + 1), v34, MEMORY[0x1E4F417F0],
    v33);
  swift_release();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v19 + 8))(v32, a9);
}

uint64_t DocumentGroupLaunchScene.init<A, B>(_:_:background:)@<X0>(uint64_t a1@<X0>, void (*a2)(uint64_t)@<X1>, uint64_t a3@<X2>, void (*a4)(void)@<X3>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v34 = a5;
  long long v35 = a2;
  uint64_t v36 = a3;
  uint64_t v33 = a8;
  uint64_t v30 = a4;
  uint64_t v31 = a11;
  uint64_t v32 = a9;
  uint64_t v14 = type metadata accessor for Optional();
  MEMORY[0x1F4188790](v14 - 8);
  uint64_t v16 = (char *)&v29 - v15;
  uint64_t v17 = *(void *)(a6 - 8);
  double v19 = MEMORY[0x1F4188790](v18);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v17 + 16))((char *)&v29 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0), a1, a6, v19);
  uint64_t v21 = Text.init<A>(_:)();
  uint64_t v23 = v22;
  uint64_t v25 = v24;
  uint64_t v27 = v26 & 1;
  v30();
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(a7 - 8) + 56))(v16, 0, 1, a7);
  DocumentGroupLaunchScene.init<A, B, C>(_:actions:background:backgroundAccessoryView:overlayAccessoryView:)(v21, v23, v27, v25, v35, v36, (uint64_t)v16, 0, v33, 0, 0, 0, v34, a7, MEMORY[0x1E4F417F8], MEMORY[0x1E4F417F8], v32, v31, MEMORY[0x1E4F417F0],
    MEMORY[0x1E4F417F0]);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v17 + 8))(a1, a6);
}

uint64_t DocumentGroupLaunchScene.init<A, B, C>(_:_:background:backgroundAccessoryView:overlayAccessoryView:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void (*a5)(uint64_t)@<X4>, uint64_t a6@<X5>, void (*a7)(double)@<X6>, uint64_t a8@<X8>, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, long long a15, long long a16, uint64_t a17, char *a18)
{
  uint64_t v32 = a5;
  uint64_t v33 = a6;
  uint64_t v30 = a3;
  uint64_t v31 = a4;
  uint64_t v28 = a1;
  uint64_t v29 = a2;
  uint64_t v27 = a8;
  long long v24 = a16;
  long long v25 = a15;
  uint64_t v26 = a9;
  uint64_t v19 = type metadata accessor for Optional();
  double v20 = MEMORY[0x1F4188790](v19 - 8);
  uint64_t v22 = (char *)&v24 - v21;
  a7(v20);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(a14 - 8) + 56))(v22, 0, 1, a14);
  swift_retain();
  swift_retain();
  DocumentGroupLaunchScene.init<A, B, C>(_:actions:background:backgroundAccessoryView:overlayAccessoryView:)(v28, v29, v30, v31, v32, v33, (uint64_t)v22, v26, v27, a10, a11, a12, a13, a14, v25, *((uint64_t *)&v25 + 1), v24, *((uint64_t *)&v24 + 1), a17,
    a18);
  swift_release();
  return swift_release();
}

uint64_t DocumentGroupLaunchScene.init<A, B>(_:_:background:backgroundAccessoryView:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void (*a5)(uint64_t)@<X4>, uint64_t a6@<X5>, void (*a7)(double)@<X6>, uint64_t a8@<X8>, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, long long a14, uint64_t a15)
{
  uint64_t v28 = a5;
  uint64_t v29 = a6;
  uint64_t v26 = a3;
  uint64_t v27 = a4;
  long long v23 = a14;
  uint64_t v24 = a9;
  uint64_t v25 = a2;
  uint64_t v18 = type metadata accessor for Optional();
  double v19 = MEMORY[0x1F4188790](v18 - 8);
  uint64_t v21 = (char *)&v23 - v20;
  a7(v19);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(a12 - 8) + 56))(v21, 0, 1, a12);
  swift_retain();
  DocumentGroupLaunchScene.init<A, B, C>(_:actions:background:backgroundAccessoryView:overlayAccessoryView:)(a1, v25, v26, v27, v28, v29, (uint64_t)v21, v24, a8, a10, 0, 0, a11, a12, a13, MEMORY[0x1E4F417F8], v23, *((uint64_t *)&v23 + 1), a15,
    MEMORY[0x1E4F417F0]);
  return swift_release();
}

uint64_t DocumentGroupLaunchScene.init<A, B>(_:_:background:overlayAccessoryView:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void (*a5)(uint64_t)@<X4>, uint64_t a6@<X5>, void (*a7)(double)@<X6>, uint64_t a8@<X8>, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, long long a13, uint64_t a14, char *a15)
{
  uint64_t v27 = a5;
  uint64_t v28 = a6;
  uint64_t v25 = a3;
  uint64_t v26 = a4;
  uint64_t v23 = a1;
  uint64_t v24 = a2;
  long long v22 = a13;
  uint64_t v17 = type metadata accessor for Optional();
  double v18 = MEMORY[0x1F4188790](v17 - 8);
  uint64_t v20 = (char *)&v22 - v19;
  a7(v18);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(a12 - 8) + 56))(v20, 0, 1, a12);
  swift_retain();
  DocumentGroupLaunchScene.init<A, B, C>(_:actions:background:backgroundAccessoryView:overlayAccessoryView:)(v23, v24, v25, v26, v27, v28, (uint64_t)v20, 0, a8, 0, a9, a10, a11, a12, MEMORY[0x1E4F417F8], v22, *((uint64_t *)&v22 + 1), a14, MEMORY[0x1E4F417F0],
    a15);
  return swift_release();
}

uint64_t DocumentGroupLaunchScene.init<A>(_:_:background:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void (*a5)(uint64_t)@<X4>, uint64_t a6@<X5>, void (*a7)(double)@<X6>, uint64_t a8@<X8>, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v23 = a5;
  uint64_t v24 = a6;
  uint64_t v21 = a3;
  uint64_t v22 = a4;
  uint64_t v16 = type metadata accessor for Optional();
  double v17 = MEMORY[0x1F4188790](v16 - 8);
  uint64_t v19 = (char *)&v21 - v18;
  a7(v17);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(a10 - 8) + 56))(v19, 0, 1, a10);
  return DocumentGroupLaunchScene.init<A, B, C>(_:actions:background:backgroundAccessoryView:overlayAccessoryView:)(a1, a2, v21, v22, v23, v24, (uint64_t)v19, 0, a8, 0, 0, 0, a9, a10, MEMORY[0x1E4F417F8], MEMORY[0x1E4F417F8], a11, a12, MEMORY[0x1E4F417F0],
           MEMORY[0x1E4F417F0]);
}

uint64_t DocumentGroupLaunchScene.init<A, B, C>(_:backgroundStyle:_:backgroundAccessoryView:overlayAccessoryView:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X4>, void (*a3)(uint64_t)@<X5>, uint64_t a4@<X6>, uint64_t a5@<X7>, uint64_t a6@<X8>, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, long long a12, long long a13, uint64_t a14, uint64_t a15)
{
  uint64_t v36 = a4;
  uint64_t v37 = a5;
  uint64_t v34 = a6;
  long long v35 = a3;
  long long v33 = a12;
  long long v31 = a13;
  uint64_t v29 = a15;
  uint64_t v30 = a14;
  uint64_t v32 = a10;
  uint64_t v16 = *(void *)(a11 - 8);
  uint64_t v28 = a8;
  MEMORY[0x1F4188790](a1);
  uint64_t v18 = (char *)&v27 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v21 = v20;
  uint64_t v23 = v22;
  uint64_t v25 = v24 & 1;
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v18, a2, a11);
  swift_retain();
  swift_retain();
  DocumentGroupLaunchScene.init<A, B, C>(_:backgroundStyle:actions:backgroundAccessoryView:overlayAccessoryView:)(v19, v21, v25, v23, (uint64_t)v18, v35, v36, v37, v34, a7, v28, a9, v32, a11, v33, *((uint64_t *)&v33 + 1), v31, *((uint64_t *)&v31 + 1), v30,
    v29);
  swift_release();
  swift_release();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v16 + 8))(a2, a11);
}

uint64_t DocumentGroupLaunchScene.init<A, B, C>(_:backgroundStyle:actions:backgroundAccessoryView:overlayAccessoryView:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, void (*a6)(uint64_t)@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  uint64_t v83 = a8;
  uint64_t v77 = a7;
  uint64_t v78 = a6;
  uint64_t v87 = a4;
  uint64_t v88 = a5;
  uint64_t v24 = type metadata accessor for Optional();
  uint64_t v81 = *(void *)(v24 - 8);
  uint64_t v82 = v24;
  MEMORY[0x1F4188790](v24);
  uint64_t v75 = (char *)v65 - v25;
  uint64_t v86 = a18;
  uint64_t v26 = type metadata accessor for DocumentIntroHelper.ShapeStyleView();
  uint64_t v68 = *(void *)(v26 - 8);
  MEMORY[0x1F4188790](v26);
  uint64_t v66 = (uint64_t)v65 - v27;
  uint64_t v71 = v28;
  uint64_t v67 = type metadata accessor for ModifiedContent();
  MEMORY[0x1F4188790](v67);
  v65[1] = (char *)v65 - v29;
  uint64_t v30 = *(void *)(a14 - 8);
  MEMORY[0x1F4188790](v31);
  v65[0] = (char *)v65 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v34 = MEMORY[0x1F4188790](v33);
  uint64_t v36 = (char *)v65 - v35;
  uint64_t v37 = *(void *)(a13 - 8);
  uint64_t v38 = *(void (**)(char *, void, uint64_t, uint64_t))(v37 + 56);
  uint64_t v73 = v37 + 56;
  uint64_t v74 = v38;
  ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t, double))v38)(a9, 1, 1, a13, v34);
  uint64_t v84 = a13;
  uint64_t v85 = a17;
  uint64_t v39 = (int *)type metadata accessor for DocumentGroupLaunchScene();
  uint64_t v40 = v39[9];
  *(void *)(a9 + v40) = 0;
  uint64_t v41 = (uint64_t *)(a9 + v39[10]);
  uint64_t v42 = (uint64_t *)(a9 + v39[11]);
  *uint64_t v42 = 0;
  v42[1] = 0;
  uint64_t v69 = v42;
  uint64_t v43 = (uint64_t *)(a9 + v39[12]);
  *uint64_t v43 = 0;
  v43[1] = 0;
  uint64_t v70 = v43;
  *uint64_t v41 = a1;
  v41[1] = a2;
  uint64_t v45 = v87;
  uint64_t v44 = v88;
  void v41[2] = a3;
  v41[3] = v45;
  uint64_t v72 = v30;
  uint64_t v46 = *(void (**)(char *, uint64_t, uint64_t))(v30 + 16);
  v46(v36, v44, a14);
  uint64_t v76 = a1;
  uint64_t v79 = a2;
  uint64_t v80 = a3;
  outlined copy of Text?(a1, a2, a3, v45);
  uint64_t v47 = 0;
  if ((swift_dynamicCast() & 1) == 0)
  {
    uint64_t v48 = v65[0];
    v46((char *)v65[0], v88, a14);
    uint64_t v49 = v66;
    OptionalFormatInputToString.init(format:)(v48, a14, v66);
    static Edge.Set.all.getter();
    uint64_t v50 = v71;
    uint64_t WitnessTable = swift_getWitnessTable();
    View.ignoresSafeArea(_:edges:)();
    (*(void (**)(uint64_t, uint64_t))(v68 + 8))(v49, v50);
    uint64_t v89 = WitnessTable;
    uint64_t v90 = MEMORY[0x1E4F41200];
    swift_getWitnessTable();
    uint64_t v47 = AnyView.init<A>(_:)();
  }
  uint64_t v71 = a11;
  uint64_t v52 = swift_release();
  *(void *)(a9 + v40) = v47;
  uint64_t v53 = v75;
  v78(v52);
  outlined consume of Text?(v76, v79, v80, v87);
  (*(void (**)(uint64_t, uint64_t))(v72 + 8))(v88, a14);
  uint64_t v54 = v84;
  v74(v53, 0, 1, v84);
  uint64_t result = (*(uint64_t (**)(uint64_t, char *, uint64_t))(v81 + 40))(a9, v53, v82);
  uint64_t v56 = v85;
  uint64_t v57 = v83;
  if (v83)
  {
    uint64_t v58 = (void *)swift_allocObject();
    v58[2] = v54;
    uint64_t v58[3] = a14;
    v58[4] = a15;
    v58[5] = a16;
    uint64_t v59 = v86;
    v58[6] = v56;
    v58[7] = v59;
    v58[8] = a19;
    v58[9] = a20;
    v58[10] = v57;
    v58[11] = a10;
    uint64_t v60 = v69;
    uint64_t result = outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(*v69);
    *uint64_t v60 = (uint64_t)partial apply for closure #1 in DocumentGroupLaunchScene.init<A, B, C>(_:backgroundStyle:actions:backgroundAccessoryView:overlayAccessoryView:);
    v60[1] = (uint64_t)v58;
  }
  uint64_t v61 = v71;
  if (v71)
  {
    unint64_t v62 = (void *)swift_allocObject();
    v62[2] = v54;
    v62[3] = a14;
    v62[4] = a15;
    v62[5] = a16;
    uint64_t v63 = v86;
    v62[6] = v56;
    v62[7] = v63;
    v62[8] = a19;
    v62[9] = a20;
    v62[10] = v61;
    v62[11] = a12;
    uint64_t v64 = v70;
    uint64_t result = outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(*v70);
    *uint64_t v64 = (uint64_t)partial apply for closure #2 in DocumentGroupLaunchScene.init<A, B, C>(_:backgroundStyle:actions:backgroundAccessoryView:overlayAccessoryView:);
    v64[1] = (uint64_t)v62;
  }
  return result;
}

uint64_t DocumentGroupLaunchScene.init<A, B>(_:backgroundStyle:_:backgroundAccessoryView:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X4>, void (*a3)(uint64_t)@<X5>, uint64_t a4@<X6>, uint64_t a5@<X7>, uint64_t a6@<X8>, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, long long a11, uint64_t a12)
{
  uint64_t v30 = a4;
  uint64_t v31 = a5;
  uint64_t v28 = a6;
  uint64_t v29 = a3;
  long long v26 = a11;
  uint64_t v25 = a12;
  uint64_t v27 = a10;
  uint64_t v13 = *(void *)(a9 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v15 = (char *)&v24 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v18 = v17;
  uint64_t v20 = v19;
  uint64_t v22 = v21 & 1;
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v15, a2, a9);
  swift_retain();
  DocumentGroupLaunchScene.init<A, B, C>(_:backgroundStyle:actions:backgroundAccessoryView:overlayAccessoryView:)(v16, v18, v22, v20, (uint64_t)v15, v29, v30, v31, v28, a7, 0, 0, a8, a9, v27, MEMORY[0x1E4F417F8], v26, *((uint64_t *)&v26 + 1), v25,
    MEMORY[0x1E4F417F0]);
  swift_release();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v13 + 8))(a2, a9);
}

uint64_t DocumentGroupLaunchScene.init<A, B>(_:backgroundStyle:_:overlayAccessoryView:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X4>, void (*a3)(uint64_t)@<X5>, uint64_t a4@<X6>, uint64_t a5@<X7>, uint64_t a6@<X8>, uint64_t a7, uint64_t a8, uint64_t a9, long long a10, uint64_t a11, uint64_t a12)
{
  uint64_t v28 = a5;
  uint64_t v29 = a3;
  uint64_t v30 = a4;
  uint64_t v27 = a6;
  long long v26 = a10;
  uint64_t v24 = a12;
  uint64_t v25 = a11;
  uint64_t v13 = *(void *)(a9 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v15 = (char *)&v24 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v18 = v17;
  uint64_t v20 = v19;
  uint64_t v22 = v21 & 1;
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v15, a2, a9);
  swift_retain();
  DocumentGroupLaunchScene.init<A, B, C>(_:backgroundStyle:actions:backgroundAccessoryView:overlayAccessoryView:)(v16, v18, v22, v20, (uint64_t)v15, v29, v30, 0, v27, 0, v28, a7, a8, a9, MEMORY[0x1E4F417F8], v26, *((uint64_t *)&v26 + 1), v25, MEMORY[0x1E4F417F0],
    v24);
  swift_release();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v13 + 8))(a2, a9);
}

uint64_t DocumentGroupLaunchScene.init<A>(_:backgroundStyle:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X4>, void (*a3)(uint64_t)@<X5>, uint64_t a4@<X6>, uint64_t a5@<X7>, uint64_t a6@<X8>, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v23 = a5;
  uint64_t v24 = a3;
  uint64_t v25 = a4;
  uint64_t v22 = a6;
  uint64_t v10 = *(void *)(a7 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v12 = (char *)&v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v15 = v14;
  uint64_t v17 = v16;
  uint64_t v19 = v18 & 1;
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, a2, a7);
  DocumentGroupLaunchScene.init<A, B, C>(_:backgroundStyle:actions:backgroundAccessoryView:overlayAccessoryView:)(v13, v15, v19, v17, (uint64_t)v12, v24, v25, 0, v22, 0, 0, 0, v23, a7, MEMORY[0x1E4F417F8], MEMORY[0x1E4F417F8], a8, a9, MEMORY[0x1E4F417F0],
    MEMORY[0x1E4F417F0]);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v10 + 8))(a2, a7);
}

uint64_t DocumentGroupLaunchScene.init<A, B, C, D>(_:backgroundStyle:_:backgroundAccessoryView:overlayAccessoryView:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void (*a3)(uint64_t)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, long long a13, long long a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  uint64_t v42 = a8;
  uint64_t v43 = a9;
  uint64_t v44 = a7;
  uint64_t v45 = a3;
  uint64_t v46 = a4;
  uint64_t v47 = a5;
  long long v40 = a14;
  long long v41 = a13;
  uint64_t v36 = a1;
  uint64_t v37 = a17;
  uint64_t v38 = a16;
  uint64_t v39 = a10;
  uint64_t v19 = *(void *)(a11 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v21 = (char *)&v34 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = *(void *)(a12 - 8);
  double v24 = MEMORY[0x1F4188790](v23);
  (*(void (**)(char *, double))(v22 + 16))((char *)&v34 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0), v24);
  uint64_t v26 = Text.init<A>(_:)();
  uint64_t v34 = v27;
  uint64_t v35 = v26;
  uint64_t v29 = v28;
  uint64_t v31 = v30 & 1;
  (*(void (**)(char *, uint64_t, uint64_t))(v19 + 16))(v21, a2, a11);
  swift_retain();
  uint64_t v32 = v42;
  swift_retain();
  DocumentGroupLaunchScene.init<A, B, C>(_:backgroundStyle:actions:backgroundAccessoryView:overlayAccessoryView:)(v35, v29, v31, v34, (uint64_t)v21, v45, v46, v47, v43, a6, v44, v32, v39, a11, v41, *((uint64_t *)&v41 + 1), v40, *((uint64_t *)&v40 + 1), v38,
    v37);
  swift_release();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v19 + 8))(a2, a11);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v22 + 8))(v36, a12);
}

uint64_t DocumentGroupLaunchScene.init<A, B, C>(_:backgroundStyle:_:backgroundAccessoryView:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void (*a3)(uint64_t)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, long long a12, uint64_t a13, uint64_t a14)
{
  uint64_t v39 = a7;
  long long v40 = a3;
  uint64_t v41 = a4;
  uint64_t v42 = a5;
  uint64_t v33 = a1;
  uint64_t v38 = a9;
  long long v37 = a12;
  uint64_t v35 = a6;
  uint64_t v36 = a14;
  uint64_t v16 = *(void *)(a8 - 8);
  uint64_t v34 = a11;
  MEMORY[0x1F4188790](a1);
  char v18 = (char *)&v31 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = *(void *)(a10 - 8);
  double v21 = MEMORY[0x1F4188790](v20);
  (*(void (**)(char *, double))(v19 + 16))((char *)&v31 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0), v21);
  uint64_t v32 = Text.init<A>(_:)();
  uint64_t v24 = v23;
  uint64_t v26 = v25;
  uint64_t v28 = v27 & 1;
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v18, a2, a8);
  uint64_t v29 = v35;
  swift_retain();
  DocumentGroupLaunchScene.init<A, B, C>(_:backgroundStyle:actions:backgroundAccessoryView:overlayAccessoryView:)(v32, v24, v28, v26, (uint64_t)v18, v40, v41, v42, v38, v29, 0, 0, v39, a8, v34, MEMORY[0x1E4F417F8], v37, *((uint64_t *)&v37 + 1), v36,
    MEMORY[0x1E4F417F0]);
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v16 + 8))(a2, a8);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v19 + 8))(v33, a10);
}

uint64_t DocumentGroupLaunchScene.init<A, B, C>(_:backgroundStyle:_:overlayAccessoryView:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void (*a3)(uint64_t)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, long long a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v39 = a7;
  uint64_t v40 = a5;
  uint64_t v41 = a3;
  uint64_t v42 = a4;
  uint64_t v38 = a9;
  long long v37 = a11;
  uint64_t v33 = a1;
  uint64_t v34 = a14;
  uint64_t v35 = a12;
  uint64_t v36 = a6;
  uint64_t v16 = *(void *)(a8 - 8);
  MEMORY[0x1F4188790](a1);
  char v18 = (char *)&v31 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = *(void *)(a10 - 8);
  double v21 = MEMORY[0x1F4188790](v20);
  (*(void (**)(char *, double))(v19 + 16))((char *)&v31 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0), v21);
  uint64_t v32 = Text.init<A>(_:)();
  uint64_t v24 = v23;
  uint64_t v26 = v25;
  uint64_t v28 = v27 & 1;
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v18, a2, a8);
  uint64_t v29 = v36;
  swift_retain();
  DocumentGroupLaunchScene.init<A, B, C>(_:backgroundStyle:actions:backgroundAccessoryView:overlayAccessoryView:)(v32, v24, v28, v26, (uint64_t)v18, v41, v42, 0, v38, 0, v40, v29, v39, a8, MEMORY[0x1E4F417F8], v37, *((uint64_t *)&v37 + 1), v35, MEMORY[0x1E4F417F0],
    v34);
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v16 + 8))(a2, a8);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v19 + 8))(v33, a10);
}

uint64_t DocumentGroupLaunchScene.init<A, B>(_:backgroundStyle:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void (*a3)(uint64_t)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10)
{
  uint64_t v33 = a8;
  uint64_t v34 = a5;
  uint64_t v35 = a3;
  uint64_t v36 = a4;
  uint64_t v30 = a1;
  uint64_t v32 = a9;
  uint64_t v13 = *(void *)(a6 - 8);
  uint64_t v31 = a10;
  MEMORY[0x1F4188790](a1);
  uint64_t v15 = (char *)&v29 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = *(void *)(v16 - 8);
  double v19 = MEMORY[0x1F4188790](v18);
  (*(void (**)(char *, double))(v17 + 16))((char *)&v29 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0), v19);
  uint64_t v21 = Text.init<A>(_:)();
  uint64_t v23 = v22;
  uint64_t v25 = v24;
  uint64_t v27 = v26 & 1;
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v15, a2, a6);
  DocumentGroupLaunchScene.init<A, B, C>(_:backgroundStyle:actions:backgroundAccessoryView:overlayAccessoryView:)(v21, v23, v27, v25, (uint64_t)v15, v35, v36, 0, v32, 0, 0, 0, v34, a6, MEMORY[0x1E4F417F8], MEMORY[0x1E4F417F8], v33, v31, MEMORY[0x1E4F417F0],
    MEMORY[0x1E4F417F0]);
  (*(void (**)(uint64_t, uint64_t))(v13 + 8))(a2, a6);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v17 + 8))(v30, a7);
}

uint64_t DocumentGroupLaunchScene.init<A, B, C>(_:backgroundStyle:_:backgroundAccessoryView:overlayAccessoryView:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, void (*a6)(uint64_t)@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, long long a15, long long a16, uint64_t a17, uint64_t a18)
{
  uint64_t v33 = a7;
  uint64_t v34 = a8;
  uint64_t v31 = a4;
  uint64_t v32 = a6;
  uint64_t v29 = a2;
  uint64_t v30 = a3;
  uint64_t v27 = a9;
  uint64_t v28 = a1;
  long long v25 = a16;
  long long v26 = a15;
  uint64_t v19 = *(void *)(a14 - 8);
  double v20 = MEMORY[0x1F4188790](a1);
  uint64_t v22 = (char *)&v25 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v19 + 16))(v22, v23, a14, v20);
  swift_retain();
  swift_retain();
  DocumentGroupLaunchScene.init<A, B, C>(_:backgroundStyle:actions:backgroundAccessoryView:overlayAccessoryView:)(v28, v29, v30, v31, (uint64_t)v22, v32, v33, v34, v27, a10, a11, a12, a13, a14, v26, *((uint64_t *)&v26 + 1), v25, *((uint64_t *)&v25 + 1), a17,
    a18);
  swift_release();
  swift_release();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v19 + 8))(a5, a14);
}

uint64_t DocumentGroupLaunchScene.init<A, B>(_:backgroundStyle:_:backgroundAccessoryView:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, void (*a6)(uint64_t)@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, long long a14, uint64_t a15)
{
  uint64_t v29 = a7;
  uint64_t v30 = a8;
  uint64_t v27 = a4;
  uint64_t v28 = a6;
  uint64_t v25 = a2;
  uint64_t v26 = a3;
  long long v24 = a14;
  uint64_t v18 = *(void *)(a12 - 8);
  double v19 = MEMORY[0x1F4188790](a1);
  uint64_t v21 = (char *)&v24 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v18 + 16))(v21, v22, a12, v19);
  swift_retain();
  DocumentGroupLaunchScene.init<A, B, C>(_:backgroundStyle:actions:backgroundAccessoryView:overlayAccessoryView:)(a1, v25, v26, v27, (uint64_t)v21, v28, v29, v30, a9, a10, 0, 0, a11, a12, a13, MEMORY[0x1E4F417F8], v24, *((uint64_t *)&v24 + 1), a15,
    MEMORY[0x1E4F417F0]);
  swift_release();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v18 + 8))(a5, a12);
}

uint64_t DocumentGroupLaunchScene.init<A, B>(_:backgroundStyle:_:overlayAccessoryView:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, void (*a6)(uint64_t)@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, long long a13, uint64_t a14, uint64_t a15)
{
  uint64_t v26 = a8;
  uint64_t v27 = a3;
  uint64_t v29 = a6;
  uint64_t v30 = a7;
  uint64_t v28 = a4;
  uint64_t v25 = a2;
  long long v24 = a13;
  uint64_t v18 = *(void *)(a12 - 8);
  double v19 = MEMORY[0x1F4188790](a1);
  uint64_t v21 = (char *)&v24 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v18 + 16))(v21, v22, a12, v19);
  swift_retain();
  DocumentGroupLaunchScene.init<A, B, C>(_:backgroundStyle:actions:backgroundAccessoryView:overlayAccessoryView:)(a1, v25, v27, v28, (uint64_t)v21, v29, v30, 0, a9, 0, v26, a10, a11, a12, MEMORY[0x1E4F417F8], v24, *((uint64_t *)&v24 + 1), a14, MEMORY[0x1E4F417F0],
    a15);
  swift_release();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v18 + 8))(a5, a12);
}

uint64_t DocumentGroupLaunchScene.init<A>(_:backgroundStyle:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, void (*a6)(uint64_t)@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v23 = a8;
  uint64_t v24 = a4;
  uint64_t v25 = a6;
  uint64_t v26 = a7;
  uint64_t v17 = *(void *)(a10 - 8);
  double v18 = MEMORY[0x1F4188790](a1);
  uint64_t v20 = (char *)&v23 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v17 + 16))(v20, v21, a10, v18);
  DocumentGroupLaunchScene.init<A, B, C>(_:backgroundStyle:actions:backgroundAccessoryView:overlayAccessoryView:)(a1, a2, a3, v24, (uint64_t)v20, v25, v26, 0, a9, 0, 0, 0, v23, a10, MEMORY[0x1E4F417F8], MEMORY[0x1E4F417F8], a11, a12, MEMORY[0x1E4F417F0],
    MEMORY[0x1E4F417F0]);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v17 + 8))(a5, a10);
}

uint64_t closure #1 in DocumentGroupLaunchScene.init<A, B, C>(_:actions:background:backgroundAccessoryView:overlayAccessoryView:)(uint64_t a1)
{
  MEMORY[0x1F4188790](a1);
  long long v2 = v1[1];
  v6[0] = *v1;
  v6[1] = v2;
  long long v3 = v1[3];
  void v6[2] = v1[2];
  v6[3] = v3;
  v4(v6);
  return AnyView.init<A>(_:)();
}

uint64_t closure #2 in DocumentGroupLaunchScene.init<A, B, C>(_:actions:background:backgroundAccessoryView:overlayAccessoryView:)(uint64_t a1)
{
  MEMORY[0x1F4188790](a1);
  long long v2 = v1[1];
  v6[0] = *v1;
  v6[1] = v2;
  long long v3 = v1[3];
  void v6[2] = v1[2];
  v6[3] = v3;
  v4(v6);
  return AnyView.init<A>(_:)();
}

uint64_t DocumentGroupsIntroRootView.body.getter@<X0>(uint64_t a1@<X8>)
{
  long long v2 = (void *)v1;
  outlined init with copy of DocumentGroupsIntroRootView(v1, (uint64_t)v21);
  uint64_t v4 = swift_allocObject();
  outlined init with take of DocumentGroupsIntroRootView((uint64_t)v21, v4 + 16);
  swift_retain();
  uint64_t v5 = static Alignment.center.getter();
  uint64_t v19 = v6;
  uint64_t v20 = v5;
  uint64_t v7 = v2[2];
  swift_retain();
  swift_release();
  uint64_t v18 = static Alignment.center.getter();
  uint64_t v9 = v8;
  uint64_t KeyPath = swift_getKeyPath();
  swift_retain();
  char v11 = static Edge.Set.all.getter();
  uint64_t v12 = v2[3];
  uint64_t v13 = v2[4];
  if (v12)
  {
    uint64_t v14 = swift_allocObject();
    *(void *)(v14 + 16) = v12;
    *(void *)(v14 + 24) = v13;
    uint64_t v15 = partial apply for thunk for @escaping @callee_guaranteed (@guaranteed [URL]?) -> (@owned AnyView);
  }
  else
  {
    uint64_t v15 = closure #4 in implicit closure #1 in DocumentGroupsIntroRootView.body.getter;
    uint64_t v14 = 0;
  }
  uint64_t v16 = swift_allocObject();
  *(void *)(v16 + 16) = v15;
  *(void *)(v16 + 24) = v14;
  *(void *)a1 = partial apply for closure #1 in DocumentGroupsIntroRootView.body.getter;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v20;
  *(void *)(a1 + 24) = v19;
  *(void *)(a1 + 32) = v7;
  *(void *)(a1 + 40) = v7;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = v18;
  *(void *)(a1 + 64) = v9;
  *(void *)(a1 + 72) = KeyPath;
  *(unsigned char *)(a1 + 80) = 1;
  *(void *)(a1 + 88) = -1;
  *(unsigned char *)(a1 + 96) = v11;
  *(void *)(a1 + 104) = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed [URL]?) -> (@out AnyView);
  *(void *)(a1 + 112) = v16;
  return outlined copy of AppIntentExecutor?(v12);
}

uint64_t closure #1 in DocumentGroupsIntroRootView.body.getter@<X0>(uint64_t *a1@<X0>, long long *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = *a1;
  int v5 = *((_DWORD *)a1 + 2);
  uint64_t v6 = a1[2];
  long long v7 = a2[5];
  long long v21 = a2[4];
  long long v22 = v7;
  long long v8 = a2[7];
  long long v23 = a2[6];
  long long v24 = v8;
  long long v9 = a2[1];
  long long v17 = *a2;
  long long v18 = v9;
  long long v10 = a2[3];
  long long v19 = a2[2];
  long long v20 = v10;
  uint64_t v11 = *((void *)a2 + 16);
  outlined init with copy of RootModifier((uint64_t)a2 + 136, a3 + 136);
  long long v12 = v22;
  *(_OWORD *)(a3 + 64) = v21;
  *(_OWORD *)(a3 + 80) = v12;
  long long v13 = v24;
  *(_OWORD *)(a3 + 96) = v23;
  *(_OWORD *)(a3 + 112) = v13;
  long long v14 = v18;
  *(_OWORD *)a3 = v17;
  *(_OWORD *)(a3 + 16) = v14;
  long long v15 = v20;
  *(_OWORD *)(a3 + 32) = v19;
  *(_OWORD *)(a3 + 48) = v15;
  *(void *)(a3 + 128) = v11;
  *(void *)(a3 + 240) = v4;
  *(_DWORD *)(a3 + 248) = v5;
  *(void *)(a3 + 256) = v6;
  outlined retain of DocumentIntroductionConfiguration(&v17);
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

uint64_t closure #4 in implicit closure #1 in DocumentGroupsIntroRootView.body.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = AnyView.init<A>(_:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance DocumentGroupsIntroRootView()
{
  return static ModifiedContent<>._viewListCount(inputs:)();
}

uint64_t static ResolvedDocumentGroupsIntroRootView._makeView(view:inputs:)@<X0>(long long *a1@<X1>, void *a2@<X8>)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  long long v3 = a1[3];
  long long v9 = a1[2];
  long long v10 = v3;
  long long v11 = a1[4];
  int v12 = *((_DWORD *)a1 + 20);
  long long v4 = a1[1];
  long long v7 = *a1;
  long long v8 = v4;
  type metadata accessor for _GraphValue<DocumentIntroductionSceneList>(0, &lazy cache variable for type metadata for _GraphValue<ResolvedDocumentGroupsIntroRootView>, (uint64_t)&type metadata for ResolvedDocumentGroupsIntroRootView, MEMORY[0x1E4F3F590]);
  _GraphValue.value.getter();
  int OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
  v13[0] = v7;
  v13[1] = v8;
  _OWORD v13[2] = v9;
  outlined retain of _GraphInputs((uint64_t)v13);
  lazy protocol witness table accessor for type _GraphInputs.DocumentBrowserContextMenuStorageKey and conformance _GraphInputs.DocumentBrowserContextMenuStorageKey();
  PropertyList.subscript.getter();
  outlined release of _GraphInputs((uint64_t)v13);
  type metadata accessor for _GraphValue<DocumentIntroductionSceneList>(0, &lazy cache variable for type metadata for External<DocumentBrowserContextMenuStorage>, (uint64_t)&type metadata for DocumentBrowserContextMenuStorage, MEMORY[0x1E4F4E778]);
  lazy protocol witness table accessor for type External<DocumentBrowserContextMenuStorage> and conformance External<A>();
  Attribute.init<A>(body:value:flags:update:)();
  _GraphValue.value.getter();
  AGGraphCreateOffsetAttribute2();
  _GraphValue.value.getter();
  AGGraphCreateOffsetAttribute2();
  _GraphValue.value.getter();
  AGGraphCreateOffsetAttribute2();
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  lazy protocol witness table accessor for type ResolvedDocumentGroupsIntroRootView.MakeRepresentable and conformance ResolvedDocumentGroupsIntroRootView.MakeRepresentable();
  Attribute.init<A>(body:value:flags:update:)();
  _GraphValue.init(_:)();
  return specialized static UIViewControllerRepresentable._makeView(view:inputs:)(OffsetAttribute2, (uint64_t)&v7, a2);
}

void *ResolvedDocumentGroupsIntroRootView.MakeRepresentable.value.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t Value = (long long *)AGGraphGetValue();
  long long v2 = Value[3];
  long long v4 = *Value;
  long long v3 = Value[1];
  long long v43 = Value[2];
  long long v44 = v2;
  long long v41 = v4;
  long long v42 = v3;
  long long v5 = Value[7];
  long long v7 = Value[4];
  long long v6 = Value[5];
  long long v47 = Value[6];
  long long v48 = v5;
  long long v45 = v7;
  long long v46 = v6;
  uint64_t v30 = v41;
  uint64_t v8 = v42;
  uint64_t v32 = *((void *)&v41 + 1);
  uint64_t v9 = *((void *)&v42 + 1);
  long long v10 = v43;
  long long v11 = v44;
  long long v12 = v7;
  uint64_t v13 = *((void *)&v6 + 1);
  uint64_t v29 = v6;
  long long v14 = v47;
  uint64_t v15 = AGGraphGetValue();
  int v16 = *(_DWORD *)(v15 + 8);
  uint64_t v17 = *(void *)(v15 + 16);
  *(void *)&long long v33 = *(void *)v15;
  DWORD2(v33) = v16;
  *(void *)&long long v34 = v17;
  outlined retain of DocumentIntroductionConfiguration(&v41);
  swift_retain();
  swift_bridgeObjectRetain();
  outlined copy of AppIntentExecutor?(v9);
  outlined copy of Text?(*((uint64_t *)&v10 + 1), v11, SBYTE8(v11), v12);
  swift_retain();
  outlined copy of AppIntentExecutor?(v29);
  outlined copy of AppIntentExecutor?(v14);
  uint64_t v18 = specialized static DocumentLaunchScreenAction.makeActions(from:)((uint64_t)&v33);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  long long v19 = (_DWORD *)AGGraphGetValue();
  LODWORD(v20) = 0;
  LODWORD(v21) = 0;
  if (*v19 != *MEMORY[0x1E4F4E7A0])
  {
    unint64_t v20 = AGCreateWeakAttribute();
    unint64_t v21 = HIDWORD(v20);
  }
  *(void *)&long long v33 = v30;
  *((void *)&v33 + 1) = v32;
  *(void *)&long long v34 = v8;
  *((void *)&v34 + 1) = v9;
  long long v35 = v10;
  long long v36 = v11;
  long long v37 = v12;
  *(void *)&long long v38 = v29;
  *((void *)&v38 + 1) = v13;
  long long v39 = v14;
  *(void *)&long long v40 = v18;
  *((void *)&v40 + 1) = __PAIR64__(v21, v20);
  outlined retain of DocumentIntroductionConfiguration(&v33);
  swift_bridgeObjectRelease();
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v14);
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v29);
  swift_release();
  outlined consume of Text?(*((uint64_t *)&v10 + 1), v11, SBYTE8(v11), v12);
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v9);
  swift_bridgeObjectRelease();
  swift_release();
  type metadata accessor for _GraphValue<DocumentIntroductionSceneList>(0, &lazy cache variable for type metadata for [IdentifiedDocumentGroupConfiguration], (uint64_t)&type metadata for IdentifiedDocumentGroupConfiguration, MEMORY[0x1E4FBB320]);
  uint64_t v22 = *(void *)AGGraphGetValue();
  uint64_t v23 = AGGraphGetValue();
  outlined init with copy of RootModifier(v23, a1 + 136);
  long long v24 = v38;
  *(_OWORD *)(a1 + 64) = v37;
  *(_OWORD *)(a1 + 80) = v24;
  long long v25 = v40;
  *(_OWORD *)(a1 + 96) = v39;
  *(_OWORD *)(a1 + 112) = v25;
  long long v26 = v34;
  *(_OWORD *)a1 = v33;
  *(_OWORD *)(a1 + 16) = v26;
  long long v27 = v36;
  *(_OWORD *)(a1 + 32) = v35;
  *(_OWORD *)(a1 + 48) = v27;
  *(void *)(a1 + 128) = v22;
  swift_bridgeObjectRetain();
  return outlined release of DocumentIntroductionConfiguration(&v33);
}

double protocol witness for static Rule.initialValue.getter in conformance ResolvedDocumentGroupsIntroRootView.MakeRepresentable@<D0>(_OWORD *a1@<X8>)
{
  double result = 0.0;
  a1[13] = 0u;
  a1[14] = 0u;
  a1[11] = 0u;
  a1[12] = 0u;
  a1[9] = 0u;
  a1[10] = 0u;
  a1[7] = 0u;
  a1[8] = 0u;
  a1[5] = 0u;
  a1[6] = 0u;
  a1[3] = 0u;
  a1[4] = 0u;
  a1[1] = 0u;
  a1[2] = 0u;
  *a1 = 0u;
  return result;
}

void *protocol witness for Rule.value.getter in conformance ResolvedDocumentGroupsIntroRootView.MakeRepresentable@<X0>(uint64_t a1@<X8>)
{
  return ResolvedDocumentGroupsIntroRootView.MakeRepresentable.value.getter(a1);
}

void protocol witness for View.body.getter in conformance ResolvedDocumentGroupsIntroRootView()
{
}

uint64_t DocumentIntroductionSceneList.MakeList.updateValue()()
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  uint64_t Value = AGGraphGetValue();
  long long v1 = *(_OWORD *)Value;
  long long v2 = *(_OWORD *)(Value + 16);
  long long v3 = *(_OWORD *)(Value + 48);
  v25[2] = *(_OWORD *)(Value + 32);
  v25[3] = v3;
  v25[0] = v1;
  v25[1] = v2;
  long long v4 = *(_OWORD *)(Value + 64);
  long long v5 = *(_OWORD *)(Value + 80);
  long long v6 = *(_OWORD *)(Value + 112);
  v25[6] = *(_OWORD *)(Value + 96);
  _OWORD v25[7] = v6;
  uint64_t v25[4] = v4;
  v25[5] = v5;
  long long v19 = *(_OWORD *)(Value + 32);
  long long v20 = *(_OWORD *)(Value + 48);
  long long v17 = *(_OWORD *)Value;
  long long v18 = *(_OWORD *)(Value + 16);
  long long v23 = *(_OWORD *)(Value + 96);
  long long v24 = *(_OWORD *)(Value + 112);
  long long v21 = *(_OWORD *)(Value + 64);
  long long v22 = *(_OWORD *)(Value + 80);
  uint64_t v8 = *(void *)Value;
  uint64_t v7 = *(void *)(Value + 8);
  outlined retain of DocumentIntroductionConfiguration(v25);
  swift_bridgeObjectRetain();
  DisplayList.Version.init(forUpdate:)();
  uint64_t v9 = (uint64_t *)AGGraphGetValue();
  uint64_t v10 = *v9;
  uint64_t v11 = v9[1];
  uint64_t v12 = MEMORY[0x1E4FBC860];
  unint64_t v13 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
  type metadata accessor for _GraphValue<DocumentIntroductionSceneList>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<SceneList.Item>, (uint64_t)&type metadata for SceneList.Item, MEMORY[0x1E4FBBE00]);
  uint64_t v14 = swift_allocObject();
  *(_OWORD *)(v14 + 112) = v22;
  *(_OWORD *)(v14 + 128) = v23;
  *(_OWORD *)(v14 + 144) = v24;
  *(_OWORD *)(v14 + 16) = xmmword_18834BB80;
  *(_OWORD *)(v14 + 32) = v17;
  *(_OWORD *)(v14 + 48) = v18;
  *(_OWORD *)(v14 + 64) = v19;
  *(_OWORD *)(v14 + 80) = v20;
  *(_OWORD *)(v14 + 96) = v21;
  *(unsigned char *)(v14 + 160) = 7;
  *(void *)(v14 + 168) = v8;
  *(void *)(v14 + 176) = v7;
  *(unsigned char *)(v14 + 184) = 0;
  *(void *)(v14 + 192) = v16;
  *(void *)(v14 + 200) = v10;
  *(void *)(v14 + 208) = v11;
  *(unsigned char *)(v14 + 216) = 0;
  *(void *)(v14 + 224) = 0;
  *(void *)(v14 + 232) = 0;
  *(unsigned char *)(v14 + 240) = 0;
  *(void *)(v14 + 248) = 0;
  *(void *)(v14 + 256) = 0;
  *(unsigned char *)(v14 + 264) = 1;
  *(void *)(v14 + 272) = 0;
  *(void *)(v14 + 280) = 0;
  *(unsigned char *)(v14 + 288) = 1;
  *(_WORD *)(v14 + 289) = 0;
  *(void *)(v14 + 296) = v12;
  *(void *)(v14 + 304) = v13;
  swift_retain();
  swift_retain();
  AGGraphSetOutputValue();
  return swift_bridgeObjectRelease();
}

uint64_t static DocumentIntroductionSceneList._makeScene(scene:inputs:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  long long v7 = *(_OWORD *)(a1 + 44);
  long long v3 = (uint64_t (*)(void, uint64_t))MEMORY[0x1E4F3F590];
  type metadata accessor for _GraphValue<DocumentIntroductionSceneList>(0, &lazy cache variable for type metadata for _GraphValue<DocumentIntroductionSceneList>, (uint64_t)&type metadata for DocumentIntroductionSceneList, MEMORY[0x1E4F3F590]);
  _GraphValue.subscript.getter();
  type metadata accessor for _GraphValue<DocumentIntroductionSceneList>(0, &lazy cache variable for type metadata for _GraphValue<DocumentIntroductionConfiguration>, (uint64_t)&type metadata for DocumentIntroductionConfiguration, v3);
  _GraphValue.value.getter();
  PreferencesOutputs.init()();
  uint64_t v8 = *(void *)((char *)&v7 + 4);
  int v9 = HIDWORD(v7);
  outlined retain of [Text.Modifier]((uint64_t)&v8);
  PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)a2 = v5;
  *(_DWORD *)(a2 + 8) = v6;
  return result;
}

uint64_t implicit closure #1 in static DocumentIntroductionSceneList._makeScene(scene:inputs:)()
{
  return Attribute.init<A>(body:value:flags:update:)();
}

uint64_t closure #1 in variable initialization expression of _DocumentGroupsIntro.backgroundAccessoryView()
{
  return AnyView.init<A>(_:)();
}

uint64_t _DocumentGroupsIntro.body.getter@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  double v4 = MEMORY[0x1F4188790](a1);
  int v6 = (char *)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = *(void *)v2;
  uint64_t v8 = *((void *)v2 + 2);
  uint64_t v9 = *((void *)v2 + 3);
  uint64_t v11 = *((void *)v2 + 4);
  uint64_t v10 = *((void *)v2 + 5);
  uint64_t v12 = *((void *)v2 + 8);
  uint64_t v22 = *((void *)v2 + 7);
  uint64_t v13 = *((void *)v2 + 9);
  uint64_t v20 = v7;
  uint64_t v21 = v13;
  uint64_t v19 = *((void *)v2 + 10);
  (*(void (**)(char *, char *, uint64_t, double))(v15 + 16))(v6, &v2[*(int *)(v14 + 56)], v16, v4);
  swift_retain();
  outlined copy of Text?(v8, v9, v11, v10);
  swift_retain();
  uint64_t v17 = v19;
  swift_retain();
  uint64_t result = AnyView.init<A>(_:)();
  *a2 = 0xD00000000000001CLL;
  a2[1] = 0x8000000188345A60;
  a2[2] = v20;
  a2[3] = 0;
  a2[4] = 0;
  a2[5] = v8;
  a2[6] = v9;
  a2[7] = v11;
  a2[8] = v10;
  a2[9] = result;
  a2[10] = v22;
  a2[11] = v12;
  a2[12] = v21;
  a2[13] = v17;
  a2[14] = MEMORY[0x1E4FBC860];
  a2[15] = 0;
  return result;
}

uint64_t _DocumentGroupsIntro.init<A, B>(_:_:background:accessories:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void (*a5)(uint64_t)@<X4>, uint64_t a6@<X5>, void (*a7)(void)@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  uint64_t v33 = a8;
  long long v34 = a7;
  v30[4] = a6;
  uint64_t v31 = a5;
  _OWORD v30[3] = a16;
  uint64_t v32 = a12;
  v30[0] = a4;
  v30[1] = a13;
  v30[2] = a15;
  MEMORY[0x1F4188790](a1);
  uint64_t v21 = *(void *)(a14 - 8);
  MEMORY[0x1F4188790](v22);
  long long v24 = (char *)v30 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_OWORD *)(a9 + 16) = 0u;
  *(_OWORD *)(a9 + 32) = 0u;
  *(_OWORD *)a9 = 0u;
  *(void *)(a9 + 48) = 0;
  *(void *)(a9 + 56) = closure #1 in variable initialization expression of _DocumentGroupsIntro.backgroundAccessoryView;
  *(void *)(a9 + 64) = 0;
  *(void *)(a9 + 72) = closure #1 in variable initialization expression of _DocumentGroupsIntro.backgroundAccessoryView;
  *(void *)(a9 + 80) = 0;
  uint64_t v35 = MEMORY[0x1E4FBC860];
  v25();
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(a17 + 48))(&v35, a14, a17);
  (*(void (**)(char *, uint64_t))(v21 + 8))(v24, a14);
  uint64_t v26 = v30[0];
  outlined copy of Text?(a1, a2, a3, v30[0]);
  outlined consume of Text?(0, 0, 0, 0);
  *(void *)(a9 + 16) = a1;
  *(void *)(a9 + 24) = a2;
  *(void *)(a9 + 32) = a3;
  *(void *)(a9 + 40) = v26;
  uint64_t v27 = v35;
  uint64_t v28 = swift_bridgeObjectRelease();
  *(void *)(a9 + 48) = v27;
  v31(v28);
  *(void *)a9 = AnyView.init<A>(_:)();
  type metadata accessor for _DocumentGroupsIntro();
  v34();
  return outlined consume of Text?(a1, a2, a3, v26);
}

uint64_t type metadata accessor for _DocumentGroupsIntro()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t _DocumentGroupsIntro.init<A, B>(_:_:background:accessories:)@<X0>(void (*a1)(uint64_t)@<X4>, uint64_t a2@<X5>, void (*a3)(void)@<X6>, uint64_t a4@<X7>, uint64_t a5@<X8>, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v15 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v19 = v18 & 1;

  return _DocumentGroupsIntro.init<A, B>(_:_:background:accessories:)(v15, v16, v19, v17, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13);
}

uint64_t _DocumentGroupsIntro.init<A, B, C>(_:_:background:accessories:)@<X0>(uint64_t a1@<X0>, void (*a2)(uint64_t)@<X1>, uint64_t a3@<X2>, void (*a4)(void)@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, long long a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  uint64_t v27 = a8;
  uint64_t v28 = a7;
  uint64_t v31 = a4;
  uint64_t v32 = a5;
  uint64_t v29 = a2;
  uint64_t v30 = a3;
  long long v26 = a11;
  uint64_t v18 = *(void *)(a10 - 8);
  double v19 = MEMORY[0x1F4188790](a1);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v18 + 16))((char *)&v26 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0), a1, a10, v19);
  uint64_t v21 = Text.init<A>(_:)();
  _DocumentGroupsIntro.init<A, B>(_:_:background:accessories:)(v21, v23, v22 & 1, v24, v29, v30, v31, v32, a9, a6, v28, v27, v26, *((uint64_t *)&v26 + 1), a12, a14, a15);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v18 + 8))(a1, a10);
}

uint64_t _DocumentGroupsIntro.init<A>(_:_:background:)@<X0>(void (*a1)(uint64_t)@<X4>, uint64_t a2@<X5>, void (*a3)(void)@<X6>, uint64_t a4@<X7>, uint64_t a5@<X8>, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v14 = Text.init(_:tableName:bundle:comment:)();
  return _DocumentGroupsIntro.init<A, B>(_:_:background:accessories:)(v14, v16, v15 & 1, v17, a1, a2, a3, a4, a5, (uint64_t)closure #3 in _IntroDocumentView<>.init(_:for:_:onDocumentOpen:), 0, a6, a7, (uint64_t)&type metadata for EmptyDocumentIntroAccessory, a8, a9, (uint64_t)&protocol witness table for EmptyDocumentIntroAccessory);
}

uint64_t _DocumentGroupsIntro.init<A, B>(_:_:background:)@<X0>(uint64_t a1@<X0>, void (*a2)(uint64_t)@<X1>, uint64_t a3@<X2>, void (*a4)(void)@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v28 = a4;
  uint64_t v29 = a5;
  long long v26 = a2;
  uint64_t v27 = a3;
  uint64_t v17 = *(void *)(a7 - 8);
  double v18 = MEMORY[0x1F4188790](a1);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v17 + 16))((char *)&v26 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v20, v18);
  uint64_t v21 = Text.init<A>(_:)();
  _DocumentGroupsIntro.init<A, B>(_:_:background:accessories:)(v21, v23, v22 & 1, v24, v26, v27, v28, v29, a9, (uint64_t)closure #3 in _IntroDocumentView<>.init(_:for:_:onDocumentOpen:), 0, a6, a8, (uint64_t)&type metadata for EmptyDocumentIntroAccessory, a10, a12, (uint64_t)&protocol witness table for EmptyDocumentIntroAccessory);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v17 + 8))(a1, a7);
}

uint64_t _DocumentGroupsIntro.init<A>(_:_:background:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void (*a5)(uint64_t)@<X4>, uint64_t a6@<X5>, void (*a7)(void)@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  return _DocumentGroupsIntro.init<A, B>(_:_:background:accessories:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, (uint64_t)closure #3 in _IntroDocumentView<>.init(_:for:_:onDocumentOpen:), 0, a10, a11, (uint64_t)&type metadata for EmptyDocumentIntroAccessory, a12, a13, (uint64_t)&protocol witness table for EmptyDocumentIntroAccessory);
}

__n128 _DocumentGroupsIntro<>.init<A, B, C>(_:backgroundStyle:_:accessories:)@<Q0>(uint64_t a1@<X4>, void (*a2)(uint64_t)@<X5>, uint64_t a3@<X6>, uint64_t a4@<X7>, uint64_t a5@<X8>, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v15 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v28 = a7;
  uint64_t v29 = a8;
  uint64_t v30 = a9;
  uint64_t v31 = a10;
  uint64_t v32 = a11;
  uint64_t v33 = a12;
  uint64_t v34 = a1;
  _DocumentGroupsIntro.init<A, B>(_:_:background:accessories:)(v15, v17, v16 & 1, v18, a2, a3, (void (*)(void))partial apply for closure #1 in _DocumentGroupsIntro<>.init<A, B, C>(_:backgroundStyle:_:accessories:), (uint64_t)v27, (uint64_t)v35, a4, a6, MEMORY[0x1E4F41618], a8, a9, MEMORY[0x1E4F41610], a11, a12);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a7 - 8) + 8))(a1, a7);
  uint64_t v19 = v36;
  uint64_t v20 = v39;
  __n128 result = v37;
  long long v22 = v38;
  long long v23 = v35[1];
  long long v24 = v35[2];
  *(_OWORD *)a5 = v35[0];
  *(_OWORD *)(a5 + 16) = v23;
  *(_OWORD *)(a5 + 32) = v24;
  *(void *)(a5 + 48) = v19;
  *(__n128 *)(a5 + 56) = result;
  *(_OWORD *)(a5 + 72) = v22;
  *(void *)(a5 + 88) = v20;
  return result;
}

__n128 _DocumentGroupsIntro<>.init<A, B, C, D>(_:backgroundStyle:_:accessories:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void (*a3)(uint64_t)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  uint64_t v33 = a8;
  uint64_t v36 = a6;
  uint64_t v37 = a5;
  uint64_t v39 = a4;
  long long v38 = a3;
  uint64_t v35 = a2;
  uint64_t v34 = a1;
  uint64_t v17 = *(void *)(a7 - 8);
  double v18 = MEMORY[0x1F4188790](a1);
  (*(void (**)(char *, double))(v17 + 16))((char *)&v32 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0), v18);
  uint64_t v20 = Text.init<A>(_:)();
  uint64_t v41 = a7;
  uint64_t v21 = v33;
  uint64_t v42 = v33;
  uint64_t v43 = a10;
  uint64_t v44 = a11;
  uint64_t v45 = a12;
  uint64_t v46 = a13;
  uint64_t v47 = a14;
  uint64_t v48 = a15;
  uint64_t v23 = v35;
  uint64_t v49 = v35;
  _DocumentGroupsIntro.init<A, B>(_:_:background:accessories:)(v20, v24, v22 & 1, v25, v38, v39, (void (*)(void))partial apply for closure #1 in _DocumentGroupsIntro<>.init<A, B, C, D>(_:backgroundStyle:_:accessories:), (uint64_t)v40, (uint64_t)v50, v37, v36, MEMORY[0x1E4F41618], a10, a11, MEMORY[0x1E4F41610], a14, a15);
  (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v34, a7);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v21 - 8) + 8))(v23, v21);
  uint64_t v26 = v51;
  uint64_t v27 = v54;
  __n128 result = v52;
  long long v29 = v53;
  long long v30 = v50[1];
  long long v31 = v50[2];
  *(_OWORD *)a9 = v50[0];
  *(_OWORD *)(a9 + 16) = v30;
  *(_OWORD *)(a9 + 32) = v31;
  *(void *)(a9 + 48) = v26;
  *(__n128 *)(a9 + 56) = result;
  *(_OWORD *)(a9 + 72) = v29;
  *(void *)(a9 + 88) = v27;
  return result;
}

uint64_t closure #1 in _DocumentGroupsIntro<>.init<A, B, C, D>(_:backgroundStyle:_:accessories:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t *a3@<X8>)
{
  uint64_t v6 = *(void *)(a2 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for DocumentIntroHelper.ShapeStyleView();
  double v10 = MEMORY[0x1F4188790](v9);
  uint64_t v12 = (char *)&v14 - v11;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v6 + 16))(v8, a1, a2, v10);
  OptionalFormatInputToString.init(format:)((uint64_t)v8, a2, (uint64_t)v12);
  swift_getWitnessTable();
  uint64_t result = AnyView.init<A>(_:)();
  *a3 = result;
  return result;
}

uint64_t partial apply for closure #1 in _DocumentGroupsIntro<>.init<A, B, C, D>(_:backgroundStyle:_:accessories:)@<X0>(uint64_t *a1@<X8>)
{
  return closure #1 in _DocumentGroupsIntro<>.init<A, B, C, D>(_:backgroundStyle:_:accessories:)(*(void *)(v1 + 80), *(void *)(v1 + 24), a1);
}

__n128 _DocumentGroupsIntro<>.init<A, B, C>(_:backgroundStyle:_:accessories:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, void (*a6)(uint64_t)@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  uint64_t v25 = a11;
  uint64_t v26 = a12;
  uint64_t v27 = a13;
  uint64_t v28 = a14;
  uint64_t v29 = a15;
  uint64_t v30 = a16;
  uint64_t v31 = a5;
  _DocumentGroupsIntro.init<A, B>(_:_:background:accessories:)(a1, a2, a3, a4, a6, a7, (void (*)(void))partial apply for closure #1 in _DocumentGroupsIntro<>.init<A, B, C>(_:backgroundStyle:_:accessories:), (uint64_t)v24, (uint64_t)v32, a8, a10, MEMORY[0x1E4F41618], a12, a13, MEMORY[0x1E4F41610], a15, a16);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a11 - 8) + 8))(a5, a11);
  uint64_t v18 = v33;
  uint64_t v19 = v36;
  __n128 result = v34;
  long long v21 = v35;
  long long v22 = v32[1];
  long long v23 = v32[2];
  *(_OWORD *)a9 = v32[0];
  *(_OWORD *)(a9 + 16) = v22;
  *(_OWORD *)(a9 + 32) = v23;
  *(void *)(a9 + 48) = v18;
  *(__n128 *)(a9 + 56) = result;
  *(_OWORD *)(a9 + 72) = v21;
  *(void *)(a9 + 88) = v19;
  return result;
}

uint64_t closure #1 in _DocumentGroupsIntro<>.init<A, B, C>(_:backgroundStyle:_:accessories:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6 = *(void *)(a2 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for DocumentIntroHelper.ShapeStyleView();
  double v10 = MEMORY[0x1F4188790](v9);
  uint64_t v12 = (char *)&v14 - v11;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v6 + 16))(v8, a1, a2, v10);
  OptionalFormatInputToString.init(format:)((uint64_t)v8, a2, (uint64_t)v12);
  swift_getWitnessTable();
  uint64_t result = AnyView.init<A>(_:)();
  *a3 = result;
  return result;
}

uint64_t partial apply for closure #1 in _DocumentGroupsIntro<>.init<A, B, C>(_:backgroundStyle:_:accessories:)@<X0>(uint64_t *a1@<X8>)
{
  return closure #1 in _DocumentGroupsIntro<>.init<A, B, C>(_:backgroundStyle:_:accessories:)(*(void *)(v1 + 64), *(void *)(v1 + 16), a1);
}

__n128 _DocumentGroupsIntro<>.init<A, B>(_:backgroundStyle:_:)@<Q0>(uint64_t a1@<X4>, void (*a2)(uint64_t)@<X5>, uint64_t a3@<X6>, uint64_t a4@<X7>, uint64_t a5@<X8>, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v13 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v24 = a4;
  uint64_t v25 = a6;
  uint64_t v26 = a7;
  uint64_t v27 = a8;
  uint64_t v28 = a1;
  _DocumentGroupsIntro.init<A, B>(_:_:background:accessories:)(v13, v15, v14 & 1, v16, a2, a3, (void (*)(void))partial apply for closure #1 in _DocumentGroupsIntro<>.init<A, B>(_:backgroundStyle:_:), (uint64_t)v23, (uint64_t)v29, (uint64_t)destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation, 0, MEMORY[0x1E4F41618], a6, (uint64_t)&type metadata for EmptyDocumentIntroAccessory, MEMORY[0x1E4F41610], a8, (uint64_t)&protocol witness table for EmptyDocumentIntroAccessory);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a4 - 8) + 8))(a1, a4);
  uint64_t v17 = v30;
  uint64_t v18 = v33;
  __n128 result = v31;
  long long v20 = v32;
  long long v21 = v29[1];
  long long v22 = v29[2];
  *(_OWORD *)a5 = v29[0];
  *(_OWORD *)(a5 + 16) = v21;
  *(_OWORD *)(a5 + 32) = v22;
  *(void *)(a5 + 48) = v17;
  *(__n128 *)(a5 + 56) = result;
  *(_OWORD *)(a5 + 72) = v20;
  *(void *)(a5 + 88) = v18;
  return result;
}

__n128 _DocumentGroupsIntro<>.init<A, B, C>(_:backgroundStyle:_:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void (*a3)(uint64_t)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11)
{
  uint64_t v35 = a4;
  __n128 v34 = a3;
  uint64_t v33 = a2;
  uint64_t v17 = *(void *)(a5 - 8);
  double v18 = MEMORY[0x1F4188790](a1);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v17 + 16))((char *)&v32 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v20, v18);
  uint64_t v21 = Text.init<A>(_:)();
  uint64_t v37 = a5;
  uint64_t v38 = a6;
  uint64_t v39 = a7;
  uint64_t v40 = a8;
  uint64_t v41 = a10;
  uint64_t v42 = a11;
  uint64_t v23 = v33;
  uint64_t v43 = v33;
  _DocumentGroupsIntro.init<A, B>(_:_:background:accessories:)(v21, v24, v22 & 1, v25, v34, v35, (void (*)(void))partial apply for closure #1 in _DocumentGroupsIntro<>.init<A, B, C>(_:backgroundStyle:_:), (uint64_t)v36, (uint64_t)v44, (uint64_t)closure #3 in _IntroDocumentView<>.init(_:for:_:onDocumentOpen:), 0, MEMORY[0x1E4F41618], a7, (uint64_t)&type metadata for EmptyDocumentIntroAccessory, MEMORY[0x1E4F41610], a11, (uint64_t)&protocol witness table for EmptyDocumentIntroAccessory);
  (*(void (**)(uint64_t, uint64_t))(v17 + 8))(a1, a5);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a6 - 8) + 8))(v23, a6);
  uint64_t v26 = v45;
  uint64_t v27 = v48;
  __n128 result = v46;
  long long v29 = v47;
  long long v30 = v44[1];
  long long v31 = v44[2];
  *(_OWORD *)a9 = v44[0];
  *(_OWORD *)(a9 + 16) = v30;
  *(_OWORD *)(a9 + 32) = v31;
  *(void *)(a9 + 48) = v26;
  *(__n128 *)(a9 + 56) = result;
  *(_OWORD *)(a9 + 72) = v29;
  *(void *)(a9 + 88) = v27;
  return result;
}

uint64_t closure #1 in _DocumentGroupsIntro<>.init<A, B, C>(_:backgroundStyle:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t *a3@<X8>)
{
  uint64_t v6 = *(void *)(a2 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for DocumentIntroHelper.ShapeStyleView();
  double v10 = MEMORY[0x1F4188790](v9);
  uint64_t v12 = (char *)&v14 - v11;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v6 + 16))(v8, a1, a2, v10);
  OptionalFormatInputToString.init(format:)((uint64_t)v8, a2, (uint64_t)v12);
  swift_getWitnessTable();
  uint64_t result = AnyView.init<A>(_:)();
  *a3 = result;
  return result;
}

uint64_t partial apply for closure #1 in _DocumentGroupsIntro<>.init<A, B, C>(_:backgroundStyle:_:)@<X0>(uint64_t *a1@<X8>)
{
  return closure #1 in _DocumentGroupsIntro<>.init<A, B, C>(_:backgroundStyle:_:)(*(void *)(v1 + 64), *(void *)(v1 + 24), a1);
}

__n128 _DocumentGroupsIntro<>.init<A, B>(_:backgroundStyle:_:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, void (*a6)(uint64_t)@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v22 = a8;
  uint64_t v23 = a10;
  uint64_t v24 = a11;
  uint64_t v25 = a12;
  uint64_t v26 = a5;
  _DocumentGroupsIntro.init<A, B>(_:_:background:accessories:)(a1, a2, a3, a4, a6, a7, (void (*)(void))partial apply for closure #1 in _DocumentGroupsIntro<>.init<A, B>(_:backgroundStyle:_:), (uint64_t)v21, (uint64_t)v27, (uint64_t)closure #3 in _IntroDocumentView<>.init(_:for:_:onDocumentOpen:), 0, MEMORY[0x1E4F41618], a10, (uint64_t)&type metadata for EmptyDocumentIntroAccessory, MEMORY[0x1E4F41610], a12, (uint64_t)&protocol witness table for EmptyDocumentIntroAccessory);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a8 - 8) + 8))(a5, a8);
  uint64_t v15 = v28;
  uint64_t v16 = v31;
  __n128 result = v29;
  long long v18 = v30;
  long long v19 = v27[1];
  long long v20 = v27[2];
  *(_OWORD *)a9 = v27[0];
  *(_OWORD *)(a9 + 16) = v19;
  *(_OWORD *)(a9 + 32) = v20;
  *(void *)(a9 + 48) = v15;
  *(__n128 *)(a9 + 56) = result;
  *(_OWORD *)(a9 + 72) = v18;
  *(void *)(a9 + 88) = v16;
  return result;
}

uint64_t closure #1 in _DocumentGroupsIntro<>.init<A, B>(_:backgroundStyle:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6 = *(void *)(a2 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for DocumentIntroHelper.ShapeStyleView();
  double v10 = MEMORY[0x1F4188790](v9);
  uint64_t v12 = (char *)&v14 - v11;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v6 + 16))(v8, a1, a2, v10);
  OptionalFormatInputToString.init(format:)((uint64_t)v8, a2, (uint64_t)v12);
  swift_getWitnessTable();
  uint64_t result = AnyView.init<A>(_:)();
  *a3 = result;
  return result;
}

uint64_t partial apply for closure #1 in _DocumentGroupsIntro<>.init<A, B>(_:backgroundStyle:_:)@<X0>(uint64_t *a1@<X8>)
{
  return closure #1 in _DocumentGroupsIntro<>.init<A, B>(_:backgroundStyle:_:)(*(void *)(v1 + 48), *(void *)(v1 + 16), a1);
}

uint64_t associated type witness table accessor for Scene.Body : Scene in DocumentGroupLaunchScene<A>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for Scene.Body : Scene in _DocumentGroupsIntro<A>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t type metadata completion function for DocumentGroupLaunchScene()
{
  uint64_t result = type metadata accessor for Optional();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for DocumentGroupLaunchScene(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  if (*(_DWORD *)(v6 + 84)) {
    size_t v7 = *(void *)(v6 + 64);
  }
  else {
    size_t v7 = *(void *)(v6 + 64) + 1;
  }
  int v8 = *(_DWORD *)(v6 + 80);
  if ((v8 & 0x1000F8) != 0
    || ((((((((v7 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)
     + 16 > 0x18)
  {
    uint64_t v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((unsigned __int16)((v8 & 0xF8) + 23) & (unsigned __int16)~(v8 & 0xF8) & 0x1F8));
  }
  else
  {
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v6 + 48))(a2, 1, v5))
    {
      memcpy(a1, a2, v7);
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v6 + 16))(a1, a2, v5);
      (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
    }
    uint64_t v11 = (void *)(((unint64_t)a2 + v7 + 7) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v12 = (void *)(((unint64_t)a1 + v7 + 7) & 0xFFFFFFFFFFFFFFF8);
    *uint64_t v12 = *v11;
    unint64_t v13 = ((unint64_t)v12 + 15) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v14 = ((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v15 = *(void *)(v14 + 24);
    swift_retain();
    if (v15 < 0xFFFFFFFF)
    {
      long long v19 = *(_OWORD *)(v14 + 16);
      *(_OWORD *)unint64_t v13 = *(_OWORD *)v14;
      *(_OWORD *)(v13 + 16) = v19;
    }
    else
    {
      uint64_t v16 = *(void *)v14;
      uint64_t v17 = *(void *)(v14 + 8);
      char v18 = *(unsigned char *)(v14 + 16);
      outlined copy of Text.Storage(*(void *)v14, v17, v18);
      *(void *)unint64_t v13 = v16;
      *(void *)(v13 + 8) = v17;
      *(unsigned char *)(v13 + 16) = v18;
      *(void *)(v13 + 24) = *(void *)(v14 + 24);
      swift_bridgeObjectRetain();
    }
    unint64_t v20 = (v13 + 39) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v21 = (v14 + 39) & 0xFFFFFFFFFFFFFFF8;
    if (*(void *)v21 < 0xFFFFFFFFuLL)
    {
      *(_OWORD *)unint64_t v20 = *(_OWORD *)v21;
    }
    else
    {
      uint64_t v22 = *(void *)(v21 + 8);
      *(void *)unint64_t v20 = *(void *)v21;
      *(void *)(v20 + 8) = v22;
      swift_retain();
    }
    unint64_t v23 = (v20 + 23) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v24 = (v21 + 23) & 0xFFFFFFFFFFFFFFF8;
    if (*(void *)v24 < 0xFFFFFFFFuLL)
    {
      *(_OWORD *)unint64_t v23 = *(_OWORD *)v24;
      return a1;
    }
    uint64_t v25 = *(void *)(v24 + 8);
    *(void *)unint64_t v23 = *(void *)v24;
    *(void *)(v23 + 8) = v25;
  }
  swift_retain();
  return a1;
}

uint64_t destroy for DocumentGroupLaunchScene(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  uint64_t v4 = *(void *)(v3 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(a1, 1, v3)) {
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(a1, v3);
  }
  uint64_t v5 = a1 + *(void *)(v4 + 64);
  if (!*(_DWORD *)(v4 + 84)) {
    ++v5;
  }
  unint64_t v6 = ((v5 + 7) & 0xFFFFFFFFFFFFFFF8) + 15;
  uint64_t result = swift_release();
  unint64_t v8 = v6 & 0xFFFFFFFFFFFFFFF8;
  if (*(void *)(v8 + 24) >= 0xFFFFFFFFuLL)
  {
    outlined consume of Text.Storage(*(void *)v8, *(void *)(v8 + 8), *(unsigned char *)(v8 + 16));
    uint64_t result = swift_bridgeObjectRelease();
  }
  uint64_t v9 = (void *)((v8 + 39) & 0xFFFFFFFFFFFFFFF8);
  if (*v9 >= 0xFFFFFFFFuLL) {
    uint64_t result = swift_release();
  }
  if (*(void *)(((unint64_t)v9 + 23) & 0xFFFFFFFFFFFFFFF8) >= 0xFFFFFFFFuLL)
  {
    return swift_release();
  }
  return result;
}

char *initializeWithCopy for DocumentGroupLaunchScene(char *a1, const void *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v6 + 48))(a2, 1, v5))
  {
    int v7 = *(_DWORD *)(v6 + 84);
    size_t v8 = *(void *)(v6 + 64);
    if (v7) {
      size_t v9 = v8;
    }
    else {
      size_t v9 = v8 + 1;
    }
    memcpy(a1, a2, v9);
  }
  else
  {
    (*(void (**)(char *, const void *, uint64_t))(v6 + 16))(a1, a2, v5);
    uint64_t v11 = *(void (**)(char *, void, uint64_t, uint64_t))(v6 + 56);
    uint64_t v10 = v6 + 56;
    v11(a1, 0, 1, v5);
    int v7 = *(_DWORD *)(v10 + 28);
    size_t v8 = *(void *)(v10 + 8);
  }
  if (v7) {
    size_t v12 = v8;
  }
  else {
    size_t v12 = v8 + 1;
  }
  size_t v13 = v12 + 7;
  unint64_t v14 = (unint64_t)&a1[v13];
  unint64_t v15 = (void *)(((unint64_t)a2 + v13) & 0xFFFFFFFFFFFFFFF8);
  v14 &= 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v14 = *v15;
  unint64_t v16 = (v14 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v17 = ((unint64_t)v15 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v18 = *(void *)(v17 + 24);
  swift_retain();
  if (v18 < 0xFFFFFFFF)
  {
    long long v22 = *(_OWORD *)(v17 + 16);
    *(_OWORD *)unint64_t v16 = *(_OWORD *)v17;
    *(_OWORD *)(v16 + 16) = v22;
  }
  else
  {
    uint64_t v19 = *(void *)v17;
    uint64_t v20 = *(void *)(v17 + 8);
    char v21 = *(unsigned char *)(v17 + 16);
    outlined copy of Text.Storage(*(void *)v17, v20, v21);
    *(void *)unint64_t v16 = v19;
    *(void *)(v16 + 8) = v20;
    *(unsigned char *)(v16 + 16) = v21;
    *(void *)(v16 + 24) = *(void *)(v17 + 24);
    swift_bridgeObjectRetain();
  }
  unint64_t v23 = (v16 + 39) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v24 = (v17 + 39) & 0xFFFFFFFFFFFFFFF8;
  if (*(void *)v24 < 0xFFFFFFFFuLL)
  {
    *(_OWORD *)unint64_t v23 = *(_OWORD *)v24;
  }
  else
  {
    uint64_t v25 = *(void *)(v24 + 8);
    *(void *)unint64_t v23 = *(void *)v24;
    *(void *)(v23 + 8) = v25;
    swift_retain();
  }
  unint64_t v26 = (v23 + 23) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v27 = (v24 + 23) & 0xFFFFFFFFFFFFFFF8;
  if (*(void *)v27 < 0xFFFFFFFFuLL)
  {
    *(_OWORD *)unint64_t v26 = *(_OWORD *)v27;
  }
  else
  {
    uint64_t v28 = *(void *)(v27 + 8);
    *(void *)unint64_t v26 = *(void *)v27;
    *(void *)(v26 + 8) = v28;
    swift_retain();
  }
  return a1;
}

void *assignWithCopy for DocumentGroupLaunchScene(void *a1, char *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  int v7 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v6 + 48);
  int v8 = v7(a1, 1, v5);
  int v9 = v7(a2, 1, v5);
  if (v8)
  {
    if (!v9)
    {
      (*(void (**)(void *, char *, uint64_t))(v6 + 16))(a1, a2, v5);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
      goto LABEL_12;
    }
    int v10 = *(_DWORD *)(v6 + 84);
    size_t v11 = *(void *)(v6 + 64);
  }
  else
  {
    if (!v9)
    {
      (*(void (**)(void *, char *, uint64_t))(v6 + 24))(a1, a2, v5);
      goto LABEL_12;
    }
    (*(void (**)(void *, uint64_t))(v6 + 8))(a1, v5);
    int v10 = *(_DWORD *)(v6 + 84);
    size_t v11 = *(void *)(v6 + 64);
  }
  if (v10) {
    size_t v12 = v11;
  }
  else {
    size_t v12 = v11 + 1;
  }
  memcpy(a1, a2, v12);
LABEL_12:
  if (*(_DWORD *)(v6 + 84)) {
    uint64_t v13 = *(void *)(v6 + 64);
  }
  else {
    uint64_t v13 = *(void *)(v6 + 64) + 1;
  }
  uint64_t v14 = v13 + 7;
  unint64_t v15 = (void *)(((unint64_t)a1 + v14) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v16 = (unint64_t)&a2[v14];
  unint64_t v17 = (v16 & 0xFFFFFFFFFFFFFFF8) + 15;
  *unint64_t v15 = *(void *)(v16 & 0xFFFFFFFFFFFFFFF8);
  swift_retain();
  swift_release();
  unint64_t v18 = ((unint64_t)v15 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v19 = v17 & 0xFFFFFFFFFFFFFFF8;
  unint64_t v20 = *(void *)((v17 & 0xFFFFFFFFFFFFFFF8) + 24);
  if (*(void *)(v18 + 24) < 0xFFFFFFFFuLL)
  {
    if (v20 >= 0xFFFFFFFF)
    {
      uint64_t v27 = *(void *)v19;
      uint64_t v28 = *(void *)(v19 + 8);
      char v29 = *(unsigned char *)(v19 + 16);
      outlined copy of Text.Storage(*(void *)v19, v28, v29);
      *(void *)unint64_t v18 = v27;
      *(void *)(v18 + 8) = v28;
      *(unsigned char *)(v18 + 16) = v29;
      *(void *)(v18 + 24) = *(void *)(v19 + 24);
      swift_bridgeObjectRetain();
      goto LABEL_22;
    }
  }
  else
  {
    if (v20 >= 0xFFFFFFFF)
    {
      uint64_t v21 = *(void *)v19;
      uint64_t v22 = *(void *)(v19 + 8);
      char v23 = *(unsigned char *)(v19 + 16);
      outlined copy of Text.Storage(*(void *)v19, v22, v23);
      uint64_t v24 = *(void *)v18;
      uint64_t v25 = *(void *)(v18 + 8);
      char v26 = *(unsigned char *)(v18 + 16);
      *(void *)unint64_t v18 = v21;
      *(void *)(v18 + 8) = v22;
      *(unsigned char *)(v18 + 16) = v23;
      outlined consume of Text.Storage(v24, v25, v26);
      *(void *)(v18 + 24) = *(void *)(v19 + 24);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      goto LABEL_22;
    }
    outlined consume of Text.Storage(*(void *)v18, *(void *)(v18 + 8), *(unsigned char *)(v18 + 16));
    swift_bridgeObjectRelease();
  }
  long long v30 = *(_OWORD *)(v19 + 16);
  *(_OWORD *)unint64_t v18 = *(_OWORD *)v19;
  *(_OWORD *)(v18 + 16) = v30;
LABEL_22:
  uint64_t v31 = (void *)((v18 + 39) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v32 = (unint64_t *)((v19 + 39) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v33 = *v32;
  if (*v31 < 0xFFFFFFFFuLL)
  {
    if (v33 >= 0xFFFFFFFF)
    {
      unint64_t v35 = v32[1];
      *uint64_t v31 = v33;
      v31[1] = v35;
      swift_retain();
      goto LABEL_29;
    }
  }
  else
  {
    if (v33 >= 0xFFFFFFFF)
    {
      unint64_t v34 = v32[1];
      *uint64_t v31 = v33;
      v31[1] = v34;
      swift_retain();
      swift_release();
      goto LABEL_29;
    }
    swift_release();
  }
  *(_OWORD *)uint64_t v31 = *(_OWORD *)v32;
LABEL_29:
  uint64_t v36 = (void *)(((unint64_t)v31 + 23) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v37 = (unint64_t *)(((unint64_t)v32 + 23) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v38 = *v37;
  if (*v36 < 0xFFFFFFFFuLL)
  {
    if (v38 >= 0xFFFFFFFF)
    {
      unint64_t v40 = v37[1];
      void *v36 = v38;
      v36[1] = v40;
      swift_retain();
      return a1;
    }
LABEL_35:
    *(_OWORD *)uint64_t v36 = *(_OWORD *)v37;
    return a1;
  }
  if (v38 < 0xFFFFFFFF)
  {
    swift_release();
    goto LABEL_35;
  }
  unint64_t v39 = v37[1];
  void *v36 = v38;
  v36[1] = v39;
  swift_retain();
  swift_release();
  return a1;
}

void *initializeWithTake for DocumentGroupLaunchScene(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v6 + 48))(a2, 1, v5))
  {
    int v7 = *(_DWORD *)(v6 + 84);
    size_t v8 = *(void *)(v6 + 64);
    if (v7) {
      size_t v9 = v8;
    }
    else {
      size_t v9 = v8 + 1;
    }
    memcpy(a1, a2, v9);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v6 + 32))(a1, a2, v5);
    size_t v11 = *(void (**)(void *, void, uint64_t, uint64_t))(v6 + 56);
    uint64_t v10 = v6 + 56;
    v11(a1, 0, 1, v5);
    int v7 = *(_DWORD *)(v10 + 28);
    size_t v8 = *(void *)(v10 + 8);
  }
  if (v7) {
    size_t v12 = v8;
  }
  else {
    size_t v12 = v8 + 1;
  }
  size_t v13 = v12 + 7;
  uint64_t v14 = (void *)(((unint64_t)a1 + v13) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v15 = (void *)(((unint64_t)a2 + v13) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v14 = *v15;
  unint64_t v16 = (_OWORD *)(((unint64_t)v14 + 15) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v17 = (_OWORD *)(((unint64_t)v15 + 15) & 0xFFFFFFFFFFFFFFF8);
  long long v18 = v17[1];
  *unint64_t v16 = *v17;
  v16[1] = v18;
  unint64_t v19 = ((unint64_t)v16 + 39) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v20 = ((unint64_t)v17 + 39) & 0xFFFFFFFFFFFFFFF8;
  if (*(void *)v20 < 0xFFFFFFFFuLL)
  {
    *(_OWORD *)unint64_t v19 = *(_OWORD *)v20;
  }
  else
  {
    uint64_t v21 = *(void *)(v20 + 8);
    *(void *)unint64_t v19 = *(void *)v20;
    *(void *)(v19 + 8) = v21;
  }
  unint64_t v22 = (v19 + 23) & 0xFFFFFFFFFFFFFFF8;
  char v23 = (uint64_t *)((v20 + 23) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v24 = *v23;
  if ((unint64_t)*v23 < 0xFFFFFFFF)
  {
    *(_OWORD *)unint64_t v22 = *(_OWORD *)v23;
  }
  else
  {
    uint64_t v25 = v23[1];
    *(void *)unint64_t v22 = v24;
    *(void *)(v22 + 8) = v25;
  }
  return a1;
}

void *assignWithTake for DocumentGroupLaunchScene(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  int v7 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v6 + 48);
  int v8 = v7(a1, 1, v5);
  int v9 = v7(a2, 1, v5);
  if (v8)
  {
    if (!v9)
    {
      (*(void (**)(void *, void *, uint64_t))(v6 + 32))(a1, a2, v5);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
      goto LABEL_12;
    }
    int v10 = *(_DWORD *)(v6 + 84);
    size_t v11 = *(void *)(v6 + 64);
  }
  else
  {
    if (!v9)
    {
      (*(void (**)(void *, void *, uint64_t))(v6 + 40))(a1, a2, v5);
      goto LABEL_12;
    }
    (*(void (**)(void *, uint64_t))(v6 + 8))(a1, v5);
    int v10 = *(_DWORD *)(v6 + 84);
    size_t v11 = *(void *)(v6 + 64);
  }
  if (v10) {
    size_t v12 = v11;
  }
  else {
    size_t v12 = v11 + 1;
  }
  memcpy(a1, a2, v12);
LABEL_12:
  if (*(_DWORD *)(v6 + 84)) {
    uint64_t v13 = *(void *)(v6 + 64);
  }
  else {
    uint64_t v13 = *(void *)(v6 + 64) + 1;
  }
  uint64_t v14 = v13 + 7;
  unint64_t v15 = (void *)(((unint64_t)a1 + v14) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v16 = (void *)(((unint64_t)a2 + v14) & 0xFFFFFFFFFFFFFFF8);
  *unint64_t v15 = *v16;
  swift_release();
  unint64_t v17 = ((unint64_t)v15 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v18 = ((unint64_t)v16 + 15) & 0xFFFFFFFFFFFFFFF8;
  if (*(void *)(v17 + 24) >= 0xFFFFFFFFuLL)
  {
    if (*(void *)(v18 + 24) >= 0xFFFFFFFFuLL)
    {
      char v19 = *(unsigned char *)(v18 + 16);
      uint64_t v20 = *(void *)v17;
      uint64_t v21 = *(void *)(v17 + 8);
      char v22 = *(unsigned char *)(v17 + 16);
      *(_OWORD *)unint64_t v17 = *(_OWORD *)v18;
      *(unsigned char *)(v17 + 16) = v19;
      outlined consume of Text.Storage(v20, v21, v22);
      *(void *)(v17 + 24) = *(void *)(v18 + 24);
      swift_bridgeObjectRelease();
      goto LABEL_20;
    }
    outlined consume of Text.Storage(*(void *)v17, *(void *)(v17 + 8), *(unsigned char *)(v17 + 16));
    swift_bridgeObjectRelease();
  }
  long long v23 = *(_OWORD *)(v18 + 16);
  *(_OWORD *)unint64_t v17 = *(_OWORD *)v18;
  *(_OWORD *)(v17 + 16) = v23;
LABEL_20:
  uint64_t v24 = (void *)((v17 + 39) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v25 = (unint64_t *)((v18 + 39) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v26 = *v25;
  if (*v24 < 0xFFFFFFFFuLL)
  {
    if (v26 >= 0xFFFFFFFF)
    {
      unint64_t v28 = v25[1];
      void *v24 = v26;
      v24[1] = v28;
      goto LABEL_27;
    }
  }
  else
  {
    if (v26 >= 0xFFFFFFFF)
    {
      unint64_t v27 = v25[1];
      void *v24 = v26;
      v24[1] = v27;
      swift_release();
      goto LABEL_27;
    }
    swift_release();
  }
  *(_OWORD *)uint64_t v24 = *(_OWORD *)v25;
LABEL_27:
  char v29 = (void *)(((unint64_t)v24 + 23) & 0xFFFFFFFFFFFFFFF8);
  long long v30 = (unint64_t *)(((unint64_t)v25 + 23) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v31 = *v30;
  if (*v29 < 0xFFFFFFFFuLL)
  {
    if (v31 >= 0xFFFFFFFF)
    {
      unint64_t v33 = v30[1];
      *char v29 = v31;
      v29[1] = v33;
      return a1;
    }
LABEL_33:
    *(_OWORD *)char v29 = *(_OWORD *)v30;
    return a1;
  }
  if (v31 < 0xFFFFFFFF)
  {
    swift_release();
    goto LABEL_33;
  }
  unint64_t v32 = v30[1];
  *char v29 = v31;
  v29[1] = v32;
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for DocumentGroupLaunchScene(_DWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  int v5 = *(_DWORD *)(v4 + 84);
  if (v5) {
    unsigned int v6 = v5 - 1;
  }
  else {
    unsigned int v6 = 0;
  }
  if (v6 <= 0x7FFFFFFE) {
    unsigned int v7 = 2147483646;
  }
  else {
    unsigned int v7 = v6;
  }
  uint64_t v8 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  if (!v5) {
    ++v8;
  }
  if (!a2) {
    return 0;
  }
  if (v7 < a2)
  {
    unint64_t v9 = ((((((((v8 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)
       + 16;
    unsigned int v10 = a2 - v7;
    uint64_t v11 = v9 & 0xFFFFFFF8;
    if ((v9 & 0xFFFFFFF8) != 0) {
      unsigned int v12 = 2;
    }
    else {
      unsigned int v12 = v10 + 1;
    }
    if (v12 >= 0x10000) {
      unsigned int v13 = 4;
    }
    else {
      unsigned int v13 = 2;
    }
    if (v12 < 0x100) {
      unsigned int v13 = 1;
    }
    if (v12 >= 2) {
      uint64_t v14 = v13;
    }
    else {
      uint64_t v14 = 0;
    }
    switch(v14)
    {
      case 1:
        int v15 = *((unsigned __int8 *)a1 + v9);
        if (!v15) {
          break;
        }
        goto LABEL_27;
      case 2:
        int v15 = *(unsigned __int16 *)((char *)a1 + v9);
        if (v15) {
          goto LABEL_27;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x1882D9818);
      case 4:
        int v15 = *(_DWORD *)((char *)a1 + v9);
        if (!v15) {
          break;
        }
LABEL_27:
        int v17 = v15 - 1;
        if (v11)
        {
          int v17 = 0;
          LODWORD(v11) = *a1;
        }
        return v7 + (v11 | v17) + 1;
      default:
        break;
    }
  }
  if (v6 < 0x7FFFFFFE)
  {
    unint64_t v19 = *(void *)(((unint64_t)a1 + v8 + 7) & 0xFFFFFFFFFFFFFFF8);
    if (v19 >= 0xFFFFFFFF) {
      LODWORD(v19) = -1;
    }
    if ((v19 + 1) >= 2) {
      return v19;
    }
    else {
      return 0;
    }
  }
  else
  {
    unsigned int v18 = (*(uint64_t (**)(void))(v4 + 48))();
    if (v18 >= 2) {
      return v18 - 1;
    }
    else {
      return 0;
    }
  }
}

void storeEnumTagSinglePayload for DocumentGroupLaunchScene(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  int v6 = 0;
  uint64_t v7 = *(void *)(*(void *)(a4 + 16) - 8);
  int v8 = *(_DWORD *)(v7 + 84);
  unsigned int v9 = v8 - 1;
  if (!v8) {
    unsigned int v9 = 0;
  }
  if (v9 <= 0x7FFFFFFE) {
    unsigned int v10 = 2147483646;
  }
  else {
    unsigned int v10 = v9;
  }
  size_t v11 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  if (!v8) {
    ++v11;
  }
  size_t v12 = ((((((((v11 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)
      + 16;
  if (v10 < a3)
  {
    unsigned int v13 = a3 - v10;
    if (((((((((v11 + 7) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) + 39) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8) == 0xFFFFFFF0) {
      unsigned int v14 = v13 + 1;
    }
    else {
      unsigned int v14 = 2;
    }
    if (v14 >= 0x10000) {
      int v15 = 4;
    }
    else {
      int v15 = 2;
    }
    if (v14 < 0x100) {
      int v15 = 1;
    }
    if (v14 >= 2) {
      int v6 = v15;
    }
    else {
      int v6 = 0;
    }
  }
  if (a2 > v10)
  {
    if (((((((((v11 + 7) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) + 39) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8) == 0xFFFFFFF0) {
      int v16 = a2 - v10;
    }
    else {
      int v16 = 1;
    }
    if (((((((((v11 + 7) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) + 39) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8) != 0xFFFFFFF0)
    {
      unsigned int v17 = ~v10 + a2;
      bzero(a1, v12);
      *(_DWORD *)a1 = v17;
    }
    switch(v6)
    {
      case 1:
        a1[v12] = v16;
        return;
      case 2:
        *(_WORD *)&a1[v12] = v16;
        return;
      case 3:
        goto LABEL_58;
      case 4:
        *(_DWORD *)&a1[v12] = v16;
        return;
      default:
        return;
    }
  }
  switch(v6)
  {
    case 1:
      a1[v12] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_35;
    case 2:
      *(_WORD *)&a1[v12] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_35;
    case 3:
LABEL_58:
      __break(1u);
      JUMPOUT(0x1882D9AD8);
    case 4:
      *(_DWORD *)&a1[v12] = 0;
      goto LABEL_34;
    default:
LABEL_34:
      if (a2)
      {
LABEL_35:
        if (v9 < 0x7FFFFFFE)
        {
          uint64_t v21 = (void *)((unint64_t)&a1[v11 + 7] & 0xFFFFFFFFFFFFFFF8);
          if (a2 > 0x7FFFFFFE)
          {
            *uint64_t v21 = 0;
            *(_DWORD *)uint64_t v21 = a2 - 0x7FFFFFFF;
          }
          else
          {
            *uint64_t v21 = a2;
          }
        }
        else if (v9 >= a2)
        {
          char v22 = *(void (**)(void))(v7 + 56);
          v22();
        }
        else
        {
          if (v11 <= 3) {
            int v18 = ~(-1 << (8 * v11));
          }
          else {
            int v18 = -1;
          }
          if (v11)
          {
            int v19 = v18 & (~v9 + a2);
            if (v11 <= 3) {
              int v20 = v11;
            }
            else {
              int v20 = 4;
            }
            bzero(a1, v11);
            switch(v20)
            {
              case 2:
                *(_WORD *)a1 = v19;
                break;
              case 3:
                *(_WORD *)a1 = v19;
                a1[2] = BYTE2(v19);
                break;
              case 4:
                *(_DWORD *)a1 = v19;
                break;
              default:
                *a1 = v19;
                break;
            }
          }
        }
      }
      return;
  }
}

uint64_t type metadata accessor for DocumentGroupLaunchScene()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata completion function for _DocumentGroupsIntro()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for _DocumentGroupsIntro(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(_DWORD *)(v5 + 80);
  unint64_t v7 = ((v6 + 88) & ~v6) + *(void *)(v5 + 64);
  int v8 = *(_DWORD *)(v5 + 80) & 0x100000;
  uint64_t v9 = *a2;
  *a1 = *a2;
  if (v6 > 7 || v8 != 0 || v7 > 0x18)
  {
    a1 = (uint64_t *)(v9 + ((v6 & 0xF8 ^ 0x1F8) & (v6 + 16)));
    swift_retain();
  }
  else
  {
    uint64_t v12 = ~v6;
    unsigned int v13 = (void *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
    unsigned int v14 = (void *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
    *unsigned int v14 = *v13;
    unint64_t v15 = ((unint64_t)v14 + 15) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v16 = ((unint64_t)v13 + 15) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v17 = *(void *)(v16 + 24);
    swift_retain();
    swift_retain();
    if (v17 < 0xFFFFFFFF)
    {
      long long v21 = *(_OWORD *)(v16 + 16);
      *(_OWORD *)unint64_t v15 = *(_OWORD *)v16;
      *(_OWORD *)(v15 + 16) = v21;
    }
    else
    {
      uint64_t v18 = *(void *)v16;
      uint64_t v19 = *(void *)(v16 + 8);
      char v20 = *(unsigned char *)(v16 + 16);
      outlined copy of Text.Storage(*(void *)v16, v19, v20);
      *(void *)unint64_t v15 = v18;
      *(void *)(v15 + 8) = v19;
      *(unsigned char *)(v15 + 16) = v20;
      *(void *)(v15 + 24) = *(void *)(v16 + 24);
      swift_bridgeObjectRetain();
    }
    char v22 = (void *)((v15 + 39) & 0xFFFFFFFFFFFFFFF8);
    long long v23 = (void *)((v16 + 39) & 0xFFFFFFFFFFFFFFF8);
    *char v22 = *v23;
    uint64_t v24 = (void *)(((unint64_t)v22 + 15) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v25 = (void *)(((unint64_t)v23 + 15) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v26 = v25[1];
    void *v24 = *v25;
    v24[1] = v26;
    unint64_t v27 = (void *)(((unint64_t)v24 + 23) & 0xFFFFFFFFFFFFFFF8);
    unint64_t v28 = (void *)(((unint64_t)v25 + 23) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v29 = v28[1];
    *unint64_t v27 = *v28;
    v27[1] = v29;
    uint64_t v30 = ((unint64_t)v27 + v6 + 16) & v12;
    uint64_t v31 = ((unint64_t)v28 + v6 + 16) & v12;
    unint64_t v32 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    v32(v30, v31, v4);
  }
  return a1;
}

uint64_t destroy for _DocumentGroupsIntro(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a1 + 15;
  swift_release();
  swift_release();
  unint64_t v4 = ((v3 & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  if (*(void *)(v4 + 24) >= 0xFFFFFFFFuLL)
  {
    outlined consume of Text.Storage(*(void *)v4, *(void *)(v4 + 8), *(unsigned char *)(v4 + 16));
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  uint64_t v5 = *(void *)(*(void *)(a2 + 16) - 8);
  uint64_t v6 = *(uint64_t (**)(unint64_t))(v5 + 8);
  unint64_t v7 = (((((((v4 + 39) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)
      + *(unsigned __int8 *)(v5 + 80)
      + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);

  return v6(v7);
}

void *initializeWithCopy for _DocumentGroupsIntro(void *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  unint64_t v5 = (unint64_t)a2 + 15;
  *a1 = v6;
  unint64_t v7 = (void *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  *unint64_t v7 = *(void *)(v5 & 0xFFFFFFFFFFFFFFF8);
  unint64_t v8 = ((unint64_t)v7 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v9 = ((v5 & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v10 = *(void *)(v9 + 24);
  swift_retain();
  swift_retain();
  if (v10 < 0xFFFFFFFF)
  {
    long long v14 = *(_OWORD *)(v9 + 16);
    *(_OWORD *)unint64_t v8 = *(_OWORD *)v9;
    *(_OWORD *)(v8 + 16) = v14;
  }
  else
  {
    uint64_t v11 = *(void *)v9;
    uint64_t v12 = *(void *)(v9 + 8);
    char v13 = *(unsigned char *)(v9 + 16);
    outlined copy of Text.Storage(*(void *)v9, v12, v13);
    *(void *)unint64_t v8 = v11;
    *(void *)(v8 + 8) = v12;
    *(unsigned char *)(v8 + 16) = v13;
    *(void *)(v8 + 24) = *(void *)(v9 + 24);
    swift_bridgeObjectRetain();
  }
  unint64_t v15 = (void *)((v9 + 39) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v16 = (void *)((v8 + 39) & 0xFFFFFFFFFFFFFFF8);
  *unint64_t v16 = *v15;
  unint64_t v17 = (void *)(((unint64_t)v16 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v18 = (void *)(((unint64_t)v15 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v19 = v18[1];
  *unint64_t v17 = *v18;
  v17[1] = v19;
  char v20 = (void *)(((unint64_t)v17 + 23) & 0xFFFFFFFFFFFFFFF8);
  long long v21 = (void *)(((unint64_t)v18 + 23) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v22 = v21[1];
  *char v20 = *v21;
  v20[1] = v22;
  uint64_t v23 = *(void *)(a3 + 16);
  uint64_t v24 = *(void *)(v23 - 8);
  uint64_t v25 = *(void (**)(uint64_t, uint64_t, uint64_t))(v24 + 16);
  uint64_t v26 = *(unsigned __int8 *)(v24 + 80);
  uint64_t v27 = ((unint64_t)v20 + v26 + 16) & ~v26;
  uint64_t v28 = ((unint64_t)v21 + v26 + 16) & ~v26;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  v25(v27, v28, v23);
  return a1;
}

void *assignWithCopy for _DocumentGroupsIntro(void *a1, void *a2, uint64_t a3)
{
  unint64_t v5 = (unint64_t)a2 + 15;
  *a1 = *a2;
  swift_retain();
  swift_release();
  uint64_t v6 = (void *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v6 = *(void *)(v5 & 0xFFFFFFFFFFFFFFF8);
  swift_retain();
  swift_release();
  unint64_t v7 = ((unint64_t)v6 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v8 = ((v5 & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v9 = *(void *)(v8 + 24);
  if (*(void *)(v7 + 24) < 0xFFFFFFFFuLL)
  {
    if (v9 >= 0xFFFFFFFF)
    {
      uint64_t v16 = *(void *)v8;
      uint64_t v17 = *(void *)(v8 + 8);
      char v18 = *(unsigned char *)(v8 + 16);
      outlined copy of Text.Storage(*(void *)v8, v17, v18);
      *(void *)unint64_t v7 = v16;
      *(void *)(v7 + 8) = v17;
      *(unsigned char *)(v7 + 16) = v18;
      *(void *)(v7 + 24) = *(void *)(v8 + 24);
      swift_bridgeObjectRetain();
      goto LABEL_8;
    }
LABEL_7:
    long long v19 = *(_OWORD *)(v8 + 16);
    *(_OWORD *)unint64_t v7 = *(_OWORD *)v8;
    *(_OWORD *)(v7 + 16) = v19;
    goto LABEL_8;
  }
  if (v9 < 0xFFFFFFFF)
  {
    outlined consume of Text.Storage(*(void *)v7, *(void *)(v7 + 8), *(unsigned char *)(v7 + 16));
    swift_bridgeObjectRelease();
    goto LABEL_7;
  }
  uint64_t v10 = *(void *)v8;
  uint64_t v11 = *(void *)(v8 + 8);
  char v12 = *(unsigned char *)(v8 + 16);
  outlined copy of Text.Storage(*(void *)v8, v11, v12);
  uint64_t v13 = *(void *)v7;
  uint64_t v14 = *(void *)(v7 + 8);
  char v15 = *(unsigned char *)(v7 + 16);
  *(void *)unint64_t v7 = v10;
  *(void *)(v7 + 8) = v11;
  *(unsigned char *)(v7 + 16) = v12;
  outlined consume of Text.Storage(v13, v14, v15);
  *(void *)(v7 + 24) = *(void *)(v8 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
LABEL_8:
  char v20 = (void *)((v7 + 39) & 0xFFFFFFFFFFFFFFF8);
  long long v21 = (void *)((v8 + 39) & 0xFFFFFFFFFFFFFFF8);
  *char v20 = *v21;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v22 = (void *)(((unint64_t)v20 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v23 = (void *)(((unint64_t)v21 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v24 = v23[1];
  *uint64_t v22 = *v23;
  v22[1] = v24;
  swift_retain();
  swift_release();
  uint64_t v25 = (void *)(((unint64_t)v22 + 23) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v26 = (void *)(((unint64_t)v23 + 23) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v27 = v26[1];
  *uint64_t v25 = *v26;
  v25[1] = v27;
  swift_retain();
  swift_release();
  uint64_t v28 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v28 + 24))(((unint64_t)v25 + *(unsigned __int8 *)(v28 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v28 + 80), ((unint64_t)v26 + *(unsigned __int8 *)(v28 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v28 + 80));
  return a1;
}

void *initializeWithTake for _DocumentGroupsIntro(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  unint64_t v4 = (void *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v5 = (void *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
  *unint64_t v4 = *v5;
  uint64_t v6 = (_OWORD *)(((unint64_t)v4 + 15) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v7 = (_OWORD *)(((unint64_t)v5 + 15) & 0xFFFFFFFFFFFFFFF8);
  long long v8 = v7[1];
  *uint64_t v6 = *v7;
  v6[1] = v8;
  unint64_t v9 = (void *)(((unint64_t)v6 + 39) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v10 = (void *)(((unint64_t)v7 + 39) & 0xFFFFFFFFFFFFFFF8);
  *unint64_t v9 = *v10;
  uint64_t v11 = (_OWORD *)(((unint64_t)v9 + 15) & 0xFFFFFFFFFFFFFFF8);
  char v12 = (_OWORD *)(((unint64_t)v10 + 15) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v11 = *v12;
  uint64_t v13 = (_OWORD *)(((unint64_t)v11 + 23) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v14 = (_OWORD *)(((unint64_t)v12 + 23) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v13 = *v14;
  uint64_t v15 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v15 + 32))(((unint64_t)v13 + *(unsigned __int8 *)(v15 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80), ((unint64_t)v14 + *(unsigned __int8 *)(v15 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80));
  return a1;
}

void *assignWithTake for _DocumentGroupsIntro(void *a1, void *a2, uint64_t a3)
{
  unint64_t v5 = (unint64_t)a2 + 15;
  *a1 = *a2;
  swift_release();
  uint64_t v6 = (void *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v7 = (v5 & 0xFFFFFFFFFFFFFFF8) + 15;
  *uint64_t v6 = *(void *)(v5 & 0xFFFFFFFFFFFFFFF8);
  swift_release();
  unint64_t v8 = ((unint64_t)v6 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v9 = v7 & 0xFFFFFFFFFFFFFFF8;
  if (*(void *)(v8 + 24) < 0xFFFFFFFFuLL) {
    goto LABEL_5;
  }
  if (*(void *)(v9 + 24) < 0xFFFFFFFFuLL)
  {
    outlined consume of Text.Storage(*(void *)v8, *(void *)(v8 + 8), *(unsigned char *)(v8 + 16));
    swift_bridgeObjectRelease();
LABEL_5:
    long long v14 = *(_OWORD *)(v9 + 16);
    *(_OWORD *)unint64_t v8 = *(_OWORD *)v9;
    *(_OWORD *)(v8 + 16) = v14;
    goto LABEL_6;
  }
  char v10 = *(unsigned char *)(v9 + 16);
  uint64_t v11 = *(void *)v8;
  uint64_t v12 = *(void *)(v8 + 8);
  char v13 = *(unsigned char *)(v8 + 16);
  *(_OWORD *)unint64_t v8 = *(_OWORD *)v9;
  *(unsigned char *)(v8 + 16) = v10;
  outlined consume of Text.Storage(v11, v12, v13);
  *(void *)(v8 + 24) = *(void *)(v9 + 24);
  swift_bridgeObjectRelease();
LABEL_6:
  uint64_t v15 = (void *)((v8 + 39) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v16 = (void *)((v9 + 39) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v15 = *v16;
  swift_bridgeObjectRelease();
  uint64_t v17 = (_OWORD *)(((unint64_t)v15 + 15) & 0xFFFFFFFFFFFFFFF8);
  char v18 = (_OWORD *)(((unint64_t)v16 + 15) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v17 = *v18;
  swift_release();
  long long v19 = (_OWORD *)(((unint64_t)v17 + 23) & 0xFFFFFFFFFFFFFFF8);
  char v20 = (_OWORD *)(((unint64_t)v18 + 23) & 0xFFFFFFFFFFFFFFF8);
  *long long v19 = *v20;
  swift_release();
  uint64_t v21 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v21 + 40))(((unint64_t)v19 + *(unsigned __int8 *)(v21 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80), ((unint64_t)v20 + *(unsigned __int8 *)(v21 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80));
  return a1;
}

uint64_t getEnumTagSinglePayload for _DocumentGroupsIntro(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  if (v5 <= 0x7FFFFFFF) {
    unsigned int v7 = 0x7FFFFFFF;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  int v8 = a2 - v7;
  if (a2 <= v7) {
    goto LABEL_23;
  }
  uint64_t v9 = ((v6 + 88) & ~v6) + *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  char v10 = 8 * v9;
  if (v9 <= 3)
  {
    unsigned int v13 = ((v8 + ~(-1 << v10)) >> v10) + 1;
    if (HIWORD(v13))
    {
      int v11 = *(_DWORD *)((char *)a1 + v9);
      if (!v11) {
        goto LABEL_23;
      }
      goto LABEL_15;
    }
    if (v13 > 0xFF)
    {
      int v11 = *(unsigned __int16 *)((char *)a1 + v9);
      if (!*(unsigned __int16 *)((char *)a1 + v9)) {
        goto LABEL_23;
      }
      goto LABEL_15;
    }
    if (v13 < 2)
    {
LABEL_23:
      uint64_t v15 = (unint64_t *)(((((((((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
                                  + 39) & 0xFFFFFFFFFFFFFFF8)
                                + 15) & 0xFFFFFFFFFFFFFFF8);
      if ((v5 & 0x80000000) != 0) {
        return (*(uint64_t (**)(unint64_t))(v4 + 48))(((((unint64_t)v15 + 23) & 0xFFFFFFFFFFFFFFF8)
      }
                                                                      + v6
                                                                      + 16) & ~v6);
      unint64_t v16 = *v15;
      if (v16 >= 0xFFFFFFFF) {
        LODWORD(v16) = -1;
      }
      return (v16 + 1);
    }
  }
  int v11 = *((unsigned __int8 *)a1 + v9);
  if (!*((unsigned char *)a1 + v9)) {
    goto LABEL_23;
  }
LABEL_15:
  int v14 = (v11 - 1) << v10;
  if (v9 > 3) {
    int v14 = 0;
  }
  if (v9)
  {
    if (v9 > 3) {
      LODWORD(v9) = 4;
    }
    switch((int)v9)
    {
      case 2:
        LODWORD(v9) = *a1;
        break;
      case 3:
        LODWORD(v9) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v9) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v9) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v7 + (v9 | v14) + 1;
}

void storeEnumTagSinglePayload for _DocumentGroupsIntro(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(unsigned __int8 *)(v6 + 80);
  size_t v10 = ((v9 + 88) & ~v9) + *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  BOOL v11 = a3 >= v8;
  unsigned int v12 = a3 - v8;
  if (v12 != 0 && v11)
  {
    if (v10 <= 3)
    {
      unsigned int v16 = ((v12 + ~(-1 << (8 * v10))) >> (8 * v10)) + 1;
      if (HIWORD(v16))
      {
        int v13 = 4;
      }
      else if (v16 >= 0x100)
      {
        int v13 = 2;
      }
      else
      {
        int v13 = v16 > 1;
      }
    }
    else
    {
      int v13 = 1;
    }
  }
  else
  {
    int v13 = 0;
  }
  if (v8 < a2)
  {
    unsigned int v14 = ~v8 + a2;
    if (v10 < 4)
    {
      int v15 = (v14 >> (8 * v10)) + 1;
      if (v10)
      {
        int v17 = v14 & ~(-1 << (8 * v10));
        bzero(a1, v10);
        if (v10 == 3)
        {
          *(_WORD *)a1 = v17;
          a1[2] = BYTE2(v17);
        }
        else if (v10 == 2)
        {
          *(_WORD *)a1 = v17;
        }
        else
        {
          *a1 = v17;
        }
      }
    }
    else
    {
      bzero(a1, v10);
      *(_DWORD *)a1 = v14;
      int v15 = 1;
    }
    switch(v13)
    {
      case 1:
        a1[v10] = v15;
        return;
      case 2:
        *(_WORD *)&a1[v10] = v15;
        return;
      case 3:
        goto LABEL_42;
      case 4:
        *(_DWORD *)&a1[v10] = v15;
        return;
      default:
        return;
    }
  }
  switch(v13)
  {
    case 1:
      a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 2:
      *(_WORD *)&a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 3:
LABEL_42:
      __break(1u);
      JUMPOUT(0x1882DA874);
    case 4:
      *(_DWORD *)&a1[v10] = 0;
      goto LABEL_23;
    default:
LABEL_23:
      if (a2)
      {
LABEL_24:
        char v18 = (void *)((((((((unint64_t)(a1 + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFFFF8)
                        + 15) & 0xFFFFFFFFFFFFFFF8);
        if ((v7 & 0x80000000) != 0)
        {
          char v20 = *(void (**)(unint64_t))(v6 + 56);
          v20(((((unint64_t)v18 + 23) & 0xFFFFFFFFFFFFFFF8) + v9 + 16) & ~v9);
        }
        else
        {
          if ((a2 & 0x80000000) != 0)
          {
            uint64_t v19 = a2 ^ 0x80000000;
            v18[1] = 0;
          }
          else
          {
            uint64_t v19 = a2 - 1;
          }
          *char v18 = v19;
        }
      }
      return;
  }
}

_UNKNOWN **sub_1882DA89C()
{
  return &protocol witness table for DocumentIntroductionSceneList;
}

ValueMetadata *type metadata accessor for DocumentGroupsIntroRootView()
{
  return &type metadata for DocumentGroupsIntroRootView;
}

ValueMetadata *type metadata accessor for DocumentIntroductionSceneList()
{
  return &type metadata for DocumentIntroductionSceneList;
}

uint64_t associated type witness table accessor for View.Body : View in DocumentGroupsIntroRootView()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t partial apply for implicit closure #1 in static DocumentIntroductionSceneList._makeScene(scene:inputs:)()
{
  return implicit closure #1 in static DocumentIntroductionSceneList._makeScene(scene:inputs:)();
}

unint64_t lazy protocol witness table accessor for type DocumentIntroductionSceneList.MakeList and conformance DocumentIntroductionSceneList.MakeList()
{
  unint64_t result = lazy protocol witness table cache variable for type DocumentIntroductionSceneList.MakeList and conformance DocumentIntroductionSceneList.MakeList;
  if (!lazy protocol witness table cache variable for type DocumentIntroductionSceneList.MakeList and conformance DocumentIntroductionSceneList.MakeList)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DocumentIntroductionSceneList.MakeList and conformance DocumentIntroductionSceneList.MakeList);
  }
  return result;
}

uint64_t sub_1882DA944()
{
  swift_bridgeObjectRelease();
  swift_release();
  if (*(void *)(v0 + 40)) {
    swift_release();
  }
  if (*(void *)(v0 + 80))
  {
    outlined consume of Text.Storage(*(void *)(v0 + 56), *(void *)(v0 + 64), *(unsigned char *)(v0 + 72));
    swift_bridgeObjectRelease();
  }
  swift_release();
  if (*(void *)(v0 + 96)) {
    swift_release();
  }
  if (*(void *)(v0 + 112)) {
    swift_release();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_weakDestroy();
  swift_weakDestroy();
  swift_weakDestroy();
  if (*(void *)(v0 + 200)) {
    __swift_destroy_boxed_opaque_existential_1(v0 + 176);
  }
  int v1 = *(unsigned __int8 *)(v0 + 240);
  if (v1 != 255) {
    outlined consume of SceneID(*(void *)(v0 + 224), *(void *)(v0 + 232), v1 & 1);
  }

  return swift_deallocObject();
}

uint64_t outlined init with take of DocumentGroupsIntroRootView(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t partial apply for closure #1 in DocumentGroupsIntroRootView.body.getter@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return closure #1 in DocumentGroupsIntroRootView.body.getter(a1, (long long *)(v2 + 16), a2);
}

uint64_t sub_1882DAA68@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = EnvironmentValues.backgroundContext.getter();
  *a1 = v3;
  return result;
}

uint64_t sub_1882DAAAC()
{
  return EnvironmentValues.backgroundContext.setter();
}

uint64_t sub_1882DAAE4()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed [URL]?) -> (@out AnyView)(uint64_t a1)
{
  uint64_t v2 = *(uint64_t (**)(uint64_t *))(v1 + 16);
  uint64_t v4 = a1;
  return v2(&v4);
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@guaranteed [URL]?) -> (@owned AnyView)@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(v2 + 16))(*a1);
  *a2 = result;
  return result;
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<PlatformItemsReader<MultiButtonPlatformItemsStrategy, ResolvedDocumentGroupsIntroRootView, AnyView?>, _BackgroundModifier<ModifiedContent<AnyView, _OpacityEffect>?>>, _EnvironmentKeyWritingModifier<BackgroundContext>>, UpdateEnvironmentToAllowedBehaviors>, _SafeAreaRegionsIgnoringLayout>(uint64_t a1)
{
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<PlatformItemsReader<MultiButtonPlatformItemsStrategy, ResolvedDocumentGroupsIntroRootView, AnyView?>, _BackgroundModifier<ModifiedContent<AnyView, _OpacityEffect>?>>, _EnvironmentKeyWritingModifier<BackgroundContext>>, UpdateEnvironmentToAllowedBehaviors>(uint64_t a1)
{
}

void type metadata accessor for ModifiedContent<ModifiedContent<PlatformItemsReader<MultiButtonPlatformItemsStrategy, ResolvedDocumentGroupsIntroRootView, AnyView?>, _BackgroundModifier<ModifiedContent<AnyView, _OpacityEffect>?>>, _EnvironmentKeyWritingModifier<BackgroundContext>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<PlatformItemsReader<MultiButtonPlatformItemsStrategy, ResolvedDocumentGroupsIntroRootView, AnyView?>, _BackgroundModifier<ModifiedContent<AnyView, _OpacityEffect>?>>, _EnvironmentKeyWritingModifier<BackgroundContext>>)
  {
    type metadata accessor for ModifiedContent<PlatformItemsReader<MultiButtonPlatformItemsStrategy, ResolvedDocumentGroupsIntroRootView, AnyView?>, _BackgroundModifier<ModifiedContent<AnyView, _OpacityEffect>?>>();
    type metadata accessor for _GraphValue<DocumentIntroductionSceneList>(255, &lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<BackgroundContext>, MEMORY[0x1E4F3FEC0], MEMORY[0x1E4F411E8]);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<PlatformItemsReader<MultiButtonPlatformItemsStrategy, ResolvedDocumentGroupsIntroRootView, AnyView?>, _BackgroundModifier<ModifiedContent<AnyView, _OpacityEffect>?>>, _EnvironmentKeyWritingModifier<BackgroundContext>>);
    }
  }
}

void type metadata accessor for ModifiedContent<PlatformItemsReader<MultiButtonPlatformItemsStrategy, ResolvedDocumentGroupsIntroRootView, AnyView?>, _BackgroundModifier<ModifiedContent<AnyView, _OpacityEffect>?>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<PlatformItemsReader<MultiButtonPlatformItemsStrategy, ResolvedDocumentGroupsIntroRootView, AnyView?>, _BackgroundModifier<ModifiedContent<AnyView, _OpacityEffect>?>>)
  {
    type metadata accessor for PlatformItemsReader<MultiButtonPlatformItemsStrategy, ResolvedDocumentGroupsIntroRootView, AnyView?>();
    type metadata accessor for _BackgroundModifier<ModifiedContent<AnyView, _OpacityEffect>?>();
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<PlatformItemsReader<MultiButtonPlatformItemsStrategy, ResolvedDocumentGroupsIntroRootView, AnyView?>, _BackgroundModifier<ModifiedContent<AnyView, _OpacityEffect>?>>);
    }
  }
}

void type metadata accessor for PlatformItemsReader<MultiButtonPlatformItemsStrategy, ResolvedDocumentGroupsIntroRootView, AnyView?>()
{
  if (!lazy cache variable for type metadata for PlatformItemsReader<MultiButtonPlatformItemsStrategy, ResolvedDocumentGroupsIntroRootView, AnyView?>)
  {
    type metadata accessor for _GraphValue<DocumentIntroductionSceneList>(255, &lazy cache variable for type metadata for AnyView?, MEMORY[0x1E4F41618], MEMORY[0x1E4FBB718]);
    lazy protocol witness table accessor for type AnyView? and conformance <A> A?();
    unint64_t v0 = type metadata accessor for PlatformItemsReader();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for PlatformItemsReader<MultiButtonPlatformItemsStrategy, ResolvedDocumentGroupsIntroRootView, AnyView?>);
    }
  }
}

void type metadata accessor for _BackgroundModifier<ModifiedContent<AnyView, _OpacityEffect>?>()
{
  if (!lazy cache variable for type metadata for _BackgroundModifier<ModifiedContent<AnyView, _OpacityEffect>?>)
  {
    type metadata accessor for ModifiedContent<AnyView, _OpacityEffect>?();
    lazy protocol witness table accessor for type ModifiedContent<AnyView, _OpacityEffect>? and conformance <A> A?();
    unint64_t v0 = type metadata accessor for _BackgroundModifier();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _BackgroundModifier<ModifiedContent<AnyView, _OpacityEffect>?>);
    }
  }
}

void type metadata accessor for ModifiedContent<AnyView, _OpacityEffect>?()
{
  if (!lazy cache variable for type metadata for ModifiedContent<AnyView, _OpacityEffect>?)
  {
    type metadata accessor for ModifiedContent<AnyView, _OpacityEffect>(255, &lazy cache variable for type metadata for ModifiedContent<AnyView, _OpacityEffect>, MEMORY[0x1E4F41618], MEMORY[0x1E4F3FA70], MEMORY[0x1E4F3FBA0]);
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<AnyView, _OpacityEffect>?);
    }
  }
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<AnyView, _OpacityEffect>? and conformance <A> A?()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<AnyView, _OpacityEffect>? and conformance <A> A?;
  if (!lazy protocol witness table cache variable for type ModifiedContent<AnyView, _OpacityEffect>? and conformance <A> A?)
  {
    type metadata accessor for ModifiedContent<AnyView, _OpacityEffect>?();
    lazy protocol witness table accessor for type ModifiedContent<AnyView, _OpacityEffect> and conformance <> ModifiedContent<A, B>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<AnyView, _OpacityEffect>? and conformance <A> A?);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<AnyView, _OpacityEffect> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<AnyView, _OpacityEffect> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<AnyView, _OpacityEffect> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<AnyView, _OpacityEffect>(255, &lazy cache variable for type metadata for ModifiedContent<AnyView, _OpacityEffect>, MEMORY[0x1E4F41618], MEMORY[0x1E4F3FA70], MEMORY[0x1E4F3FBA0]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<AnyView, _OpacityEffect> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<PlatformItemsReader<MultiButtonPlatformItemsStrategy, ResolvedDocumentGroupsIntroRootView, AnyView?>, _BackgroundModifier<ModifiedContent<AnyView, _OpacityEffect>?>>, _EnvironmentKeyWritingModifier<BackgroundContext>>, UpdateEnvironmentToAllowedBehaviors>, _SafeAreaRegionsIgnoringLayout> and conformance <> ModifiedContent<A, B>()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<PlatformItemsReader<MultiButtonPlatformItemsStrategy, ResolvedDocumentGroupsIntroRootView, AnyView?>, _BackgroundModifier<ModifiedContent<AnyView, _OpacityEffect>?>>, _EnvironmentKeyWritingModifier<BackgroundContext>>, UpdateEnvironmentToAllowedBehaviors>, _SafeAreaRegionsIgnoringLayout> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<PlatformItemsReader<MultiButtonPlatformItemsStrategy, ResolvedDocumentGroupsIntroRootView, AnyView?>, _BackgroundModifier<ModifiedContent<AnyView, _OpacityEffect>?>>, _EnvironmentKeyWritingModifier<BackgroundContext>>, UpdateEnvironmentToAllowedBehaviors>, _SafeAreaRegionsIgnoringLayout> and conformance <> ModifiedContent<A, B>, type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<PlatformItemsReader<MultiButtonPlatformItemsStrategy, ResolvedDocumentGroupsIntroRootView, AnyView?>, _BackgroundModifier<ModifiedContent<AnyView, _OpacityEffect>?>>, _EnvironmentKeyWritingModifier<BackgroundContext>>, UpdateEnvironmentToAllowedBehaviors>, _SafeAreaRegionsIgnoringLayout>, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<PlatformItemsReader<MultiButtonPlatformItemsStrategy, ResolvedDocumentGroupsIntroRootView, AnyView?>, _BackgroundModifier<ModifiedContent<AnyView, _OpacityEffect>?>>, _EnvironmentKeyWritingModifier<BackgroundContext>>, UpdateEnvironmentToAllowedBehaviors> and conformance <> ModifiedContent<A, B>);
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<PlatformItemsReader<MultiButtonPlatformItemsStrategy, ResolvedDocumentGroupsIntroRootView, AnyView?>, _BackgroundModifier<ModifiedContent<AnyView, _OpacityEffect>?>>, _EnvironmentKeyWritingModifier<BackgroundContext>>, UpdateEnvironmentToAllowedBehaviors> and conformance <> ModifiedContent<A, B>()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<PlatformItemsReader<MultiButtonPlatformItemsStrategy, ResolvedDocumentGroupsIntroRootView, AnyView?>, _BackgroundModifier<ModifiedContent<AnyView, _OpacityEffect>?>>, _EnvironmentKeyWritingModifier<BackgroundContext>>, UpdateEnvironmentToAllowedBehaviors>, _SafeAreaRegionsIgnoringLayout> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<PlatformItemsReader<MultiButtonPlatformItemsStrategy, ResolvedDocumentGroupsIntroRootView, AnyView?>, _BackgroundModifier<ModifiedContent<AnyView, _OpacityEffect>?>>, _EnvironmentKeyWritingModifier<BackgroundContext>>, UpdateEnvironmentToAllowedBehaviors> and conformance <> ModifiedContent<A, B>, type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<PlatformItemsReader<MultiButtonPlatformItemsStrategy, ResolvedDocumentGroupsIntroRootView, AnyView?>, _BackgroundModifier<ModifiedContent<AnyView, _OpacityEffect>?>>, _EnvironmentKeyWritingModifier<BackgroundContext>>, UpdateEnvironmentToAllowedBehaviors>, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<PlatformItemsReader<MultiButtonPlatformItemsStrategy, ResolvedDocumentGroupsIntroRootView, AnyView?>, _BackgroundModifier<ModifiedContent<AnyView, _OpacityEffect>?>>, _EnvironmentKeyWritingModifier<BackgroundContext>> and conformance <> ModifiedContent<A, B>);
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<PlatformItemsReader<MultiButtonPlatformItemsStrategy, ResolvedDocumentGroupsIntroRootView, AnyView?>, _BackgroundModifier<ModifiedContent<AnyView, _OpacityEffect>?>>, _EnvironmentKeyWritingModifier<BackgroundContext>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<PlatformItemsReader<MultiButtonPlatformItemsStrategy, ResolvedDocumentGroupsIntroRootView, AnyView?>, _BackgroundModifier<ModifiedContent<AnyView, _OpacityEffect>?>>, _EnvironmentKeyWritingModifier<BackgroundContext>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<PlatformItemsReader<MultiButtonPlatformItemsStrategy, ResolvedDocumentGroupsIntroRootView, AnyView?>, _BackgroundModifier<ModifiedContent<AnyView, _OpacityEffect>?>>, _EnvironmentKeyWritingModifier<BackgroundContext>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<PlatformItemsReader<MultiButtonPlatformItemsStrategy, ResolvedDocumentGroupsIntroRootView, AnyView?>, _BackgroundModifier<ModifiedContent<AnyView, _OpacityEffect>?>>, _EnvironmentKeyWritingModifier<BackgroundContext>>();
    lazy protocol witness table accessor for type ModifiedContent<PlatformItemsReader<MultiButtonPlatformItemsStrategy, ResolvedDocumentGroupsIntroRootView, AnyView?>, _BackgroundModifier<ModifiedContent<AnyView, _OpacityEffect>?>> and conformance <> ModifiedContent<A, B>();
    lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<BackgroundContext> and conformance _EnvironmentKeyWritingModifier<A>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<PlatformItemsReader<MultiButtonPlatformItemsStrategy, ResolvedDocumentGroupsIntroRootView, AnyView?>, _BackgroundModifier<ModifiedContent<AnyView, _OpacityEffect>?>>, _EnvironmentKeyWritingModifier<BackgroundContext>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<PlatformItemsReader<MultiButtonPlatformItemsStrategy, ResolvedDocumentGroupsIntroRootView, AnyView?>, _BackgroundModifier<ModifiedContent<AnyView, _OpacityEffect>?>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<PlatformItemsReader<MultiButtonPlatformItemsStrategy, ResolvedDocumentGroupsIntroRootView, AnyView?>, _BackgroundModifier<ModifiedContent<AnyView, _OpacityEffect>?>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<PlatformItemsReader<MultiButtonPlatformItemsStrategy, ResolvedDocumentGroupsIntroRootView, AnyView?>, _BackgroundModifier<ModifiedContent<AnyView, _OpacityEffect>?>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<PlatformItemsReader<MultiButtonPlatformItemsStrategy, ResolvedDocumentGroupsIntroRootView, AnyView?>, _BackgroundModifier<ModifiedContent<AnyView, _OpacityEffect>?>>();
    lazy protocol witness table accessor for type _BackgroundModifier<ModifiedContent<AnyView, _OpacityEffect>?> and conformance _BackgroundModifier<A>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<PlatformItemsReader<MultiButtonPlatformItemsStrategy, ResolvedDocumentGroupsIntroRootView, AnyView?>, _BackgroundModifier<ModifiedContent<AnyView, _OpacityEffect>?>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _BackgroundModifier<ModifiedContent<AnyView, _OpacityEffect>?> and conformance _BackgroundModifier<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type _BackgroundModifier<ModifiedContent<AnyView, _OpacityEffect>?> and conformance _BackgroundModifier<A>;
  if (!lazy protocol witness table cache variable for type _BackgroundModifier<ModifiedContent<AnyView, _OpacityEffect>?> and conformance _BackgroundModifier<A>)
  {
    type metadata accessor for _BackgroundModifier<ModifiedContent<AnyView, _OpacityEffect>?>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _BackgroundModifier<ModifiedContent<AnyView, _OpacityEffect>?> and conformance _BackgroundModifier<A>);
  }
  return result;
}

uint64_t sub_1882DB160()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in DocumentGroupLaunchScene.init<A, B, C>(_:backgroundStyle:actions:backgroundAccessoryView:overlayAccessoryView:)(uint64_t a1)
{
  return partial apply for closure #2 in DocumentGroupLaunchScene.init<A, B, C>(_:backgroundStyle:actions:backgroundAccessoryView:overlayAccessoryView:)(a1, (uint64_t (*)(uint64_t, void, void, void, void, void, void, void, void, void, void))closure #2 in DocumentGroupLaunchScene.init<A, B, C>(_:actions:background:backgroundAccessoryView:overlayAccessoryView:));
}

uint64_t partial apply for closure #1 in DocumentGroupLaunchScene.init<A, B, C>(_:backgroundStyle:actions:backgroundAccessoryView:overlayAccessoryView:)(uint64_t a1)
{
  return partial apply for closure #2 in DocumentGroupLaunchScene.init<A, B, C>(_:backgroundStyle:actions:backgroundAccessoryView:overlayAccessoryView:)(a1, (uint64_t (*)(uint64_t, void, void, void, void, void, void, void, void, void, void))closure #1 in DocumentGroupLaunchScene.init<A, B, C>(_:actions:background:backgroundAccessoryView:overlayAccessoryView:));
}

uint64_t partial apply for closure #2 in DocumentGroupLaunchScene.init<A, B, C>(_:backgroundStyle:actions:backgroundAccessoryView:overlayAccessoryView:)(uint64_t a1, uint64_t (*a2)(uint64_t, void, void, void, void, void, void, void, void, void, void))
{
  return a2(a1, v2[10], v2[11], v2[2], v2[3], v2[4], v2[5], v2[6], v2[7], v2[8], v2[9]);
}

void *type metadata accessor for DocumentIntroductionSceneList.MakeList()
{
  return &unk_1ED492EB8;
}

uint64_t destroy for ResolvedDocumentGroupsIntroRootView(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_release();
  if (*(void *)(a1 + 24)) {
    swift_release();
  }
  if (*(void *)(a1 + 64))
  {
    outlined consume of Text.Storage(*(void *)(a1 + 40), *(void *)(a1 + 48), *(unsigned char *)(a1 + 56));
    swift_bridgeObjectRelease();
  }
  swift_release();
  if (*(void *)(a1 + 80)) {
    swift_release();
  }
  if (*(void *)(a1 + 96)) {
    swift_release();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_weakDestroy();
  swift_weakDestroy();
  swift_weakDestroy();
  if (*(void *)(a1 + 184)) {
    __swift_destroy_boxed_opaque_existential_1(a1 + 160);
  }
  int v2 = *(unsigned __int8 *)(a1 + 224);
  if (v2 != 255) {
    outlined consume of SceneID(*(void *)(a1 + 208), *(void *)(a1 + 216), v2 & 1);
  }

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for ResolvedDocumentGroupsIntroRootView(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  uint64_t v6 = (_OWORD *)(a2 + 24);
  uint64_t v5 = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_retain();
  if (v5)
  {
    uint64_t v7 = *(void *)(a2 + 32);
    *(void *)(a1 + 24) = v5;
    *(void *)(a1 + 32) = v7;
    swift_retain();
    uint64_t v8 = *(void *)(a2 + 64);
    if (v8)
    {
LABEL_3:
      uint64_t v9 = *(void *)(a2 + 40);
      uint64_t v10 = *(void *)(a2 + 48);
      char v11 = *(unsigned char *)(a2 + 56);
      outlined copy of Text.Storage(v9, v10, v11);
      *(void *)(a1 + 40) = v9;
      *(void *)(a1 + 48) = v10;
      *(unsigned char *)(a1 + 56) = v11;
      *(void *)(a1 + 64) = v8;
      swift_bridgeObjectRetain();
      goto LABEL_6;
    }
  }
  else
  {
    *(_OWORD *)(a1 + 24) = *v6;
    uint64_t v8 = *(void *)(a2 + 64);
    if (v8) {
      goto LABEL_3;
    }
  }
  long long v12 = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = v12;
LABEL_6:
  uint64_t v13 = *(void *)(a2 + 80);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_retain();
  if (v13)
  {
    uint64_t v14 = *(void *)(a2 + 88);
    *(void *)(a1 + 80) = v13;
    *(void *)(a1 + 88) = v14;
    swift_retain();
  }
  else
  {
    *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  }
  uint64_t v15 = *(void *)(a2 + 96);
  if (v15)
  {
    uint64_t v16 = *(void *)(a2 + 104);
    *(void *)(a1 + 96) = v15;
    *(void *)(a1 + 104) = v16;
    swift_retain();
  }
  else
  {
    *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  }
  uint64_t v17 = *(void *)(a2 + 120);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a1 + 120) = v17;
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_weakCopyInit();
  swift_weakCopyInit();
  swift_weakCopyInit();
  char v18 = (_OWORD *)(a1 + 160);
  uint64_t v19 = (_OWORD *)(a2 + 160);
  uint64_t v20 = *(void *)(a2 + 184);
  if (v20)
  {
    uint64_t v21 = *(void *)(a2 + 192);
    *(void *)(a1 + 184) = v20;
    *(void *)(a1 + 192) = v21;
    (**(void (***)(_OWORD *, _OWORD *))(v20 - 8))(v18, v19);
  }
  else
  {
    long long v22 = *(_OWORD *)(a2 + 176);
    *char v18 = *v19;
    *(_OWORD *)(a1 + 176) = v22;
    *(void *)(a1 + 192) = *(void *)(a2 + 192);
  }
  *(unsigned char *)(a1 + 200) = *(unsigned char *)(a2 + 200);
  int v23 = *(unsigned __int8 *)(a2 + 224);
  if (v23 == 255)
  {
    *(_OWORD *)(a1 + 208) = *(_OWORD *)(a2 + 208);
    *(unsigned char *)(a1 + 224) = *(unsigned char *)(a2 + 224);
  }
  else
  {
    char v24 = v23 & 1;
    uint64_t v25 = *(void *)(a2 + 208);
    uint64_t v26 = *(void *)(a2 + 216);
    outlined copy of SceneID(v25, v26, v23 & 1);
    *(void *)(a1 + 208) = v25;
    *(void *)(a1 + 216) = v26;
    *(unsigned char *)(a1 + 224) = v24;
  }
  *(_OWORD *)(a1 + 232) = *(_OWORD *)(a2 + 232);
  *(_DWORD *)(a1 + 248) = *(_DWORD *)(a2 + 248);
  *(void *)(a1 + 256) = *(void *)(a2 + 256);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for ResolvedDocumentGroupsIntroRootView(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_retain();
  swift_release();
  uint64_t v4 = *(void *)(a2 + 24);
  if (*(void *)(a1 + 24))
  {
    if (v4)
    {
      uint64_t v5 = *(void *)(a2 + 32);
      *(void *)(a1 + 24) = v4;
      *(void *)(a1 + 32) = v5;
      swift_retain();
      swift_release();
      goto LABEL_8;
    }
    swift_release();
  }
  else if (v4)
  {
    uint64_t v6 = *(void *)(a2 + 32);
    *(void *)(a1 + 24) = v4;
    *(void *)(a1 + 32) = v6;
    swift_retain();
    goto LABEL_8;
  }
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
LABEL_8:
  uint64_t v7 = (_OWORD *)(a1 + 40);
  uint64_t v8 = (_OWORD *)(a2 + 40);
  uint64_t v9 = *(void *)(a2 + 64);
  if (*(void *)(a1 + 64))
  {
    if (v9)
    {
      uint64_t v10 = *(void *)(a2 + 40);
      uint64_t v11 = *(void *)(a2 + 48);
      char v12 = *(unsigned char *)(a2 + 56);
      outlined copy of Text.Storage(v10, v11, v12);
      uint64_t v13 = *(void *)(a1 + 40);
      uint64_t v14 = *(void *)(a1 + 48);
      char v15 = *(unsigned char *)(a1 + 56);
      *(void *)(a1 + 40) = v10;
      *(void *)(a1 + 48) = v11;
      *(unsigned char *)(a1 + 56) = v12;
      outlined consume of Text.Storage(v13, v14, v15);
      *(void *)(a1 + 64) = *(void *)(a2 + 64);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      outlined destroy of Text(a1 + 40);
      long long v19 = *(_OWORD *)(a2 + 56);
      *uint64_t v7 = *v8;
      *(_OWORD *)(a1 + 56) = v19;
    }
  }
  else if (v9)
  {
    uint64_t v16 = *(void *)(a2 + 40);
    uint64_t v17 = *(void *)(a2 + 48);
    char v18 = *(unsigned char *)(a2 + 56);
    outlined copy of Text.Storage(v16, v17, v18);
    *(void *)(a1 + 40) = v16;
    *(void *)(a1 + 48) = v17;
    *(unsigned char *)(a1 + 56) = v18;
    *(void *)(a1 + 64) = *(void *)(a2 + 64);
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v20 = *(_OWORD *)(a2 + 56);
    *uint64_t v7 = *v8;
    *(_OWORD *)(a1 + 56) = v20;
  }
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_retain();
  swift_release();
  uint64_t v21 = *(void *)(a2 + 80);
  if (*(void *)(a1 + 80))
  {
    if (v21)
    {
      uint64_t v22 = *(void *)(a2 + 88);
      *(void *)(a1 + 80) = v21;
      *(void *)(a1 + 88) = v22;
      swift_retain();
      swift_release();
      goto LABEL_22;
    }
    swift_release();
  }
  else if (v21)
  {
    uint64_t v23 = *(void *)(a2 + 88);
    *(void *)(a1 + 80) = v21;
    *(void *)(a1 + 88) = v23;
    swift_retain();
    goto LABEL_22;
  }
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
LABEL_22:
  uint64_t v24 = *(void *)(a2 + 96);
  if (*(void *)(a1 + 96))
  {
    if (v24)
    {
      uint64_t v25 = *(void *)(a2 + 104);
      *(void *)(a1 + 96) = v24;
      *(void *)(a1 + 104) = v25;
      swift_retain();
      swift_release();
      goto LABEL_29;
    }
    swift_release();
  }
  else if (v24)
  {
    uint64_t v26 = *(void *)(a2 + 104);
    *(void *)(a1 + 96) = v24;
    *(void *)(a1 + 104) = v26;
    swift_retain();
    goto LABEL_29;
  }
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
LABEL_29:
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 120) = *(_DWORD *)(a2 + 120);
  *(_DWORD *)(a1 + 124) = *(_DWORD *)(a2 + 124);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_weakCopyAssign();
  swift_weakCopyAssign();
  swift_weakCopyAssign();
  uint64_t v27 = (_OWORD *)(a1 + 160);
  uint64_t v28 = (_OWORD *)(a2 + 160);
  uint64_t v29 = *(void *)(a2 + 184);
  if (*(void *)(a1 + 184))
  {
    if (v29)
    {
      __swift_assign_boxed_opaque_existential_1((uint64_t *)(a1 + 160), (uint64_t *)(a2 + 160));
    }
    else
    {
      outlined destroy of AnyHashable(a1 + 160);
      uint64_t v30 = *(void *)(a2 + 192);
      long long v31 = *(_OWORD *)(a2 + 176);
      *uint64_t v27 = *v28;
      *(_OWORD *)(a1 + 176) = v31;
      *(void *)(a1 + 192) = v30;
    }
  }
  else if (v29)
  {
    *(void *)(a1 + 184) = v29;
    *(void *)(a1 + 192) = *(void *)(a2 + 192);
    (**(void (***)(uint64_t, uint64_t))(v29 - 8))(a1 + 160, a2 + 160);
  }
  else
  {
    long long v32 = *v28;
    long long v33 = *(_OWORD *)(a2 + 176);
    *(void *)(a1 + 192) = *(void *)(a2 + 192);
    *uint64_t v27 = v32;
    *(_OWORD *)(a1 + 176) = v33;
  }
  *(unsigned char *)(a1 + 200) = *(unsigned char *)(a2 + 200);
  unint64_t v34 = (long long *)(a1 + 208);
  unint64_t v35 = (long long *)(a2 + 208);
  int v36 = *(unsigned __int8 *)(a2 + 224);
  if (*(unsigned __int8 *)(a1 + 224) == 255)
  {
    if (v36 == 255)
    {
      long long v38 = *v35;
      *(unsigned char *)(a1 + 224) = *(unsigned char *)(a2 + 224);
      long long *v34 = v38;
    }
    else
    {
      char v45 = v36 & 1;
      uint64_t v46 = *(void *)(a2 + 208);
      uint64_t v47 = *(void *)(a2 + 216);
      outlined copy of SceneID(v46, v47, v36 & 1);
      *(void *)(a1 + 208) = v46;
      *(void *)(a1 + 216) = v47;
      *(unsigned char *)(a1 + 224) = v45;
    }
  }
  else if (v36 == 255)
  {
    outlined destroy of SceneID(a1 + 208);
    char v37 = *(unsigned char *)(a2 + 224);
    long long *v34 = *v35;
    *(unsigned char *)(a1 + 224) = v37;
  }
  else
  {
    char v39 = v36 & 1;
    uint64_t v40 = *(void *)(a2 + 208);
    uint64_t v41 = *(void *)(a2 + 216);
    outlined copy of SceneID(v40, v41, v36 & 1);
    uint64_t v42 = *(void *)(a1 + 208);
    uint64_t v43 = *(void *)(a1 + 216);
    char v44 = *(unsigned char *)(a1 + 224);
    *(void *)(a1 + 208) = v40;
    *(void *)(a1 + 216) = v41;
    *(unsigned char *)(a1 + 224) = v39;
    outlined consume of SceneID(v42, v43, v44);
  }
  *(void *)(a1 + 232) = *(void *)(a2 + 232);
  *(void *)(a1 + 240) = *(void *)(a2 + 240);
  *(_DWORD *)(a1 + 248) = *(_DWORD *)(a2 + 248);
  *(void *)(a1 + 256) = *(void *)(a2 + 256);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t initializeWithTake for ResolvedDocumentGroupsIntroRootView(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v4;
  long long v5 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = v5;
  long long v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  long long v7 = *(_OWORD *)(a2 + 32);
  long long v8 = *(_OWORD *)(a2 + 48);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(_OWORD *)(a1 + 32) = v7;
  *(_OWORD *)(a1 + 48) = v8;
  swift_weakTakeInit();
  swift_weakTakeInit();
  swift_weakTakeInit();
  long long v9 = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 176) = v9;
  *(void *)(a1 + 192) = *(void *)(a2 + 192);
  *(unsigned char *)(a1 + 200) = *(unsigned char *)(a2 + 200);
  *(_OWORD *)(a1 + 208) = *(_OWORD *)(a2 + 208);
  *(unsigned char *)(a1 + 224) = *(unsigned char *)(a2 + 224);
  *(void *)(a1 + 232) = *(void *)(a2 + 232);
  *(void *)(a1 + 256) = *(void *)(a2 + 256);
  *(_OWORD *)(a1 + 240) = *(_OWORD *)(a2 + 240);
  return a1;
}

uint64_t assignWithTake for ResolvedDocumentGroupsIntroRootView(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_release();
  uint64_t v5 = *(void *)(a2 + 24);
  if (*(void *)(a1 + 24))
  {
    if (v5)
    {
      uint64_t v6 = *(void *)(a2 + 32);
      *(void *)(a1 + 24) = v5;
      *(void *)(a1 + 32) = v6;
      swift_release();
      goto LABEL_8;
    }
    swift_release();
  }
  else if (v5)
  {
    uint64_t v7 = *(void *)(a2 + 32);
    *(void *)(a1 + 24) = v5;
    *(void *)(a1 + 32) = v7;
    goto LABEL_8;
  }
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
LABEL_8:
  if (*(void *)(a1 + 64))
  {
    uint64_t v8 = *(void *)(a2 + 64);
    if (v8)
    {
      char v9 = *(unsigned char *)(a2 + 56);
      uint64_t v10 = *(void *)(a1 + 40);
      uint64_t v11 = *(void *)(a1 + 48);
      char v12 = *(unsigned char *)(a1 + 56);
      *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
      *(unsigned char *)(a1 + 56) = v9;
      outlined consume of Text.Storage(v10, v11, v12);
      *(void *)(a1 + 64) = v8;
      swift_bridgeObjectRelease();
      goto LABEL_13;
    }
    outlined destroy of Text(a1 + 40);
  }
  long long v13 = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = v13;
LABEL_13:
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_release();
  uint64_t v14 = *(void *)(a2 + 80);
  if (*(void *)(a1 + 80))
  {
    if (v14)
    {
      uint64_t v15 = *(void *)(a2 + 88);
      *(void *)(a1 + 80) = v14;
      *(void *)(a1 + 88) = v15;
      swift_release();
      goto LABEL_20;
    }
    swift_release();
  }
  else if (v14)
  {
    uint64_t v16 = *(void *)(a2 + 88);
    *(void *)(a1 + 80) = v14;
    *(void *)(a1 + 88) = v16;
    goto LABEL_20;
  }
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
LABEL_20:
  uint64_t v17 = *(void *)(a2 + 96);
  if (*(void *)(a1 + 96))
  {
    if (v17)
    {
      uint64_t v18 = *(void *)(a2 + 104);
      *(void *)(a1 + 96) = v17;
      *(void *)(a1 + 104) = v18;
      swift_release();
      goto LABEL_27;
    }
    swift_release();
  }
  else if (v17)
  {
    uint64_t v19 = *(void *)(a2 + 104);
    *(void *)(a1 + 96) = v17;
    *(void *)(a1 + 104) = v19;
    goto LABEL_27;
  }
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
LABEL_27:
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  swift_bridgeObjectRelease();
  swift_weakTakeAssign();
  swift_weakTakeAssign();
  swift_weakTakeAssign();
  if (*(void *)(a1 + 184))
  {
    if (*(void *)(a2 + 184)) {
      __swift_destroy_boxed_opaque_existential_1(a1 + 160);
    }
    else {
      outlined destroy of AnyHashable(a1 + 160);
    }
  }
  long long v20 = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 176) = v20;
  *(void *)(a1 + 192) = *(void *)(a2 + 192);
  *(unsigned char *)(a1 + 200) = *(unsigned char *)(a2 + 200);
  uint64_t v21 = (_OWORD *)(a2 + 208);
  int v22 = *(unsigned __int8 *)(a1 + 224);
  if (v22 != 255)
  {
    int v23 = *(unsigned __int8 *)(a2 + 224);
    if (v23 != 255)
    {
      uint64_t v24 = *(void *)(a1 + 208);
      uint64_t v25 = *(void *)(a1 + 216);
      *(_OWORD *)(a1 + 208) = *v21;
      *(unsigned char *)(a1 + 224) = v23 & 1;
      outlined consume of SceneID(v24, v25, v22 & 1);
      goto LABEL_36;
    }
    outlined destroy of SceneID(a1 + 208);
  }
  *(_OWORD *)(a1 + 208) = *v21;
  *(unsigned char *)(a1 + 224) = *(unsigned char *)(a2 + 224);
LABEL_36:
  *(_OWORD *)(a1 + 232) = *(_OWORD *)(a2 + 232);
  *(_DWORD *)(a1 + 248) = *(_DWORD *)(a2 + 248);
  *(void *)(a1 + 256) = *(void *)(a2 + 256);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for ResolvedDocumentGroupsIntroRootView(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 264)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ResolvedDocumentGroupsIntroRootView(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 248) = 0u;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 264) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 264) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ResolvedDocumentGroupsIntroRootView()
{
  return &type metadata for ResolvedDocumentGroupsIntroRootView;
}

uint64_t sub_1882DBD84()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<PlatformItemsReader<MultiButtonPlatformItemsStrategy, ResolvedDocumentGroupsIntroRootView, AnyView?>, _BackgroundModifier<ModifiedContent<AnyView, _OpacityEffect>?>>, _EnvironmentKeyWritingModifier<BackgroundContext>>, UpdateEnvironmentToAllowedBehaviors>, _SafeAreaRegionsIgnoringLayout> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<PlatformItemsReader<MultiButtonPlatformItemsStrategy, ResolvedDocumentGroupsIntroRootView, AnyView?>, _BackgroundModifier<ModifiedContent<AnyView, _OpacityEffect>?>>, _EnvironmentKeyWritingModifier<BackgroundContext>>, UpdateEnvironmentToAllowedBehaviors>, _SafeAreaRegionsIgnoringLayout>, DocumentBrowserContextMenuModifier<AnyView>> and conformance <> ModifiedContent<A, B>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<PlatformItemsReader<MultiButtonPlatformItemsStrategy, ResolvedDocumentGroupsIntroRootView, AnyView?>, _BackgroundModifier<ModifiedContent<AnyView, _OpacityEffect>?>>, _EnvironmentKeyWritingModifier<BackgroundContext>>, UpdateEnvironmentToAllowedBehaviors>, _SafeAreaRegionsIgnoringLayout>, DocumentBrowserContextMenuModifier<AnyView>>, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<PlatformItemsReader<MultiButtonPlatformItemsStrategy, ResolvedDocumentGroupsIntroRootView, AnyView?>, _BackgroundModifier<ModifiedContent<AnyView, _OpacityEffect>?>>, _EnvironmentKeyWritingModifier<BackgroundContext>>, UpdateEnvironmentToAllowedBehaviors>, _SafeAreaRegionsIgnoringLayout> and conformance <> ModifiedContent<A, B>);
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<PlatformItemsReader<MultiButtonPlatformItemsStrategy, ResolvedDocumentGroupsIntroRootView, AnyView?>, _BackgroundModifier<ModifiedContent<AnyView, _OpacityEffect>?>>, _EnvironmentKeyWritingModifier<BackgroundContext>>, UpdateEnvironmentToAllowedBehaviors>, _SafeAreaRegionsIgnoringLayout> and conformance <> ModifiedContent<A, B>(unint64_t *a1, void (*a2)(uint64_t), void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    a3();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<PlatformItemsReader<MultiButtonPlatformItemsStrategy, ResolvedDocumentGroupsIntroRootView, AnyView?>, _BackgroundModifier<ModifiedContent<AnyView, _OpacityEffect>?>>, _EnvironmentKeyWritingModifier<BackgroundContext>>, UpdateEnvironmentToAllowedBehaviors>, _SafeAreaRegionsIgnoringLayout>, DocumentBrowserContextMenuModifier<AnyView>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<PlatformItemsReader<MultiButtonPlatformItemsStrategy, ResolvedDocumentGroupsIntroRootView, AnyView?>, _BackgroundModifier<ModifiedContent<AnyView, _OpacityEffect>?>>, _EnvironmentKeyWritingModifier<BackgroundContext>>, UpdateEnvironmentToAllowedBehaviors>, _SafeAreaRegionsIgnoringLayout>, DocumentBrowserContextMenuModifier<AnyView>>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<PlatformItemsReader<MultiButtonPlatformItemsStrategy, ResolvedDocumentGroupsIntroRootView, AnyView?>, _BackgroundModifier<ModifiedContent<AnyView, _OpacityEffect>?>>, _EnvironmentKeyWritingModifier<BackgroundContext>>, UpdateEnvironmentToAllowedBehaviors>, _SafeAreaRegionsIgnoringLayout>(255);
    type metadata accessor for ModifiedContent<AnyView, _OpacityEffect>(255, &lazy cache variable for type metadata for DocumentBrowserContextMenuModifier<AnyView>, MEMORY[0x1E4F41618], MEMORY[0x1E4F41610], (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for DocumentBrowserContextMenuModifier);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<PlatformItemsReader<MultiButtonPlatformItemsStrategy, ResolvedDocumentGroupsIntroRootView, AnyView?>, _BackgroundModifier<ModifiedContent<AnyView, _OpacityEffect>?>>, _EnvironmentKeyWritingModifier<BackgroundContext>>, UpdateEnvironmentToAllowedBehaviors>, _SafeAreaRegionsIgnoringLayout>, DocumentBrowserContextMenuModifier<AnyView>>);
    }
  }
}

_UNKNOWN **base witness table accessor for View in ResolvedDocumentGroupsIntroRootView()
{
  return &protocol witness table for ResolvedDocumentGroupsIntroRootView;
}

unint64_t lazy protocol witness table accessor for type ResolvedDocumentGroupsIntroRootView.MakeRepresentable and conformance ResolvedDocumentGroupsIntroRootView.MakeRepresentable()
{
  unint64_t result = lazy protocol witness table cache variable for type ResolvedDocumentGroupsIntroRootView.MakeRepresentable and conformance ResolvedDocumentGroupsIntroRootView.MakeRepresentable;
  if (!lazy protocol witness table cache variable for type ResolvedDocumentGroupsIntroRootView.MakeRepresentable and conformance ResolvedDocumentGroupsIntroRootView.MakeRepresentable)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ResolvedDocumentGroupsIntroRootView.MakeRepresentable and conformance ResolvedDocumentGroupsIntroRootView.MakeRepresentable);
  }
  return result;
}

void *type metadata accessor for ResolvedDocumentGroupsIntroRootView.MakeRepresentable()
{
  return &unk_1ED492FC0;
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<PlatformItemsReader<MultiButtonPlatformItemsStrategy, ResolvedDocumentGroupsIntroRootView, AnyView?>, _BackgroundModifier<ModifiedContent<AnyView, _OpacityEffect>?>>, _EnvironmentKeyWritingModifier<BackgroundContext>>, UpdateEnvironmentToAllowedBehaviors>, _SafeAreaRegionsIgnoringLayout>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v9 = a3(255);
    unint64_t v10 = a5(a1, v9, a4);
    if (!v11) {
      atomic_store(v10, a2);
    }
  }
}

void type metadata accessor for _GraphValue<UIKitAdaptableTabView>()
{
  if (!lazy cache variable for type metadata for _GraphValue<UIKitAdaptableTabView>)
  {
    type metadata accessor for UIKitAdaptableTabView(255);
    unint64_t v0 = type metadata accessor for _GraphValue();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _GraphValue<UIKitAdaptableTabView>);
    }
  }
}

void type metadata accessor for ModifiedContent<AnyView, _OpacityEffect>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = a5(0, a3, a4);
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

void type metadata accessor for _GraphValue<DocumentIntroductionSceneList>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

uint64_t EnvironmentValues.dragItemGroupID.getter()
{
  if (*(void *)(v0 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<DragItemGroupIDKey>();
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DragItemGroupIDKey> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<DragItemGroupIDKey> and conformance EnvironmentPropertyKey<A>, (void (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<DragItemGroupIDKey>);
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<DragItemGroupIDKey>();
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DragItemGroupIDKey> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<DragItemGroupIDKey> and conformance EnvironmentPropertyKey<A>, (void (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<DragItemGroupIDKey>);
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  return v2;
}

uint64_t EnvironmentValues.dragItemGroupID.setter()
{
  type metadata accessor for EnvironmentPropertyKey<DragItemGroupIDKey>();
  lazy protocol witness table accessor for type EnvironmentPropertyKey<DragItemGroupIDKey> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<DragItemGroupIDKey> and conformance EnvironmentPropertyKey<A>, (void (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<DragItemGroupIDKey>);
  swift_retain();
  PropertyList.subscript.setter();
  if (*(void *)(v0 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  return swift_release();
}

uint64_t View.dragItemGroup()(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = 0;
  return MEMORY[0x18C113660](&v3, a1, &unk_1ED4349E8, a2);
}

uint64_t sub_1882DC334()
{
  return swift_getWitnessTable();
}

unint64_t lazy protocol witness table accessor for type DragItemGroupModifier and conformance DragItemGroupModifier()
{
  unint64_t result = lazy protocol witness table cache variable for type DragItemGroupModifier and conformance DragItemGroupModifier;
  if (!lazy protocol witness table cache variable for type DragItemGroupModifier and conformance DragItemGroupModifier)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DragItemGroupModifier and conformance DragItemGroupModifier);
  }
  return result;
}

void *type metadata accessor for DragItemGroupModifier()
{
  return &unk_1ED4349E8;
}

uint64_t associated type witness table accessor for ViewModifier.Body : View in DragItemGroupModifier()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t protocol witness for ViewModifier.body(content:) in conformance DragItemGroupModifier@<X0>(uint64_t a1@<X8>)
{
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t result = Namespace.wrappedValue.getter();
  *(void *)a1 = KeyPath;
  *(void *)(a1 + 8) = result;
  *(unsigned char *)(a1 + 16) = 0;
  return result;
}

void type metadata accessor for EnvironmentPropertyKey<DragItemGroupIDKey>()
{
  if (!lazy cache variable for type metadata for EnvironmentPropertyKey<DragItemGroupIDKey>)
  {
    unint64_t v0 = type metadata accessor for EnvironmentPropertyKey();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<DragItemGroupIDKey>);
    }
  }
}

void *type metadata accessor for DragItemGroupIDKey()
{
  return &unk_1ED427B80;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<_ViewModifier_Content<DragItemGroupModifier>, _EnvironmentKeyWritingModifier<Namespace.ID?>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<DragItemGroupModifier>, _EnvironmentKeyWritingModifier<Namespace.ID?>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<DragItemGroupModifier>, _EnvironmentKeyWritingModifier<Namespace.ID?>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<_ViewModifier_Content<DragItemGroupModifier>, _EnvironmentKeyWritingModifier<Namespace.ID?>>();
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DragItemGroupIDKey> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type _ViewModifier_Content<DragItemGroupModifier> and conformance _ViewModifier_Content<A>, (void (*)(uint64_t))type metadata accessor for _ViewModifier_Content<DragItemGroupModifier>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DragItemGroupIDKey> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<Namespace.ID?> and conformance _EnvironmentKeyWritingModifier<A>, (void (*)(uint64_t))type metadata accessor for _EnvironmentKeyWritingModifier<Namespace.ID?>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<DragItemGroupModifier>, _EnvironmentKeyWritingModifier<Namespace.ID?>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<_ViewModifier_Content<DragItemGroupModifier>, _EnvironmentKeyWritingModifier<Namespace.ID?>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<_ViewModifier_Content<DragItemGroupModifier>, _EnvironmentKeyWritingModifier<Namespace.ID?>>)
  {
    type metadata accessor for _ViewModifier_Content<DragItemGroupModifier>();
    type metadata accessor for _EnvironmentKeyWritingModifier<Namespace.ID?>();
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<_ViewModifier_Content<DragItemGroupModifier>, _EnvironmentKeyWritingModifier<Namespace.ID?>>);
    }
  }
}

void type metadata accessor for _ViewModifier_Content<DragItemGroupModifier>()
{
  if (!lazy cache variable for type metadata for _ViewModifier_Content<DragItemGroupModifier>)
  {
    lazy protocol witness table accessor for type DragItemGroupModifier and conformance DragItemGroupModifier();
    unint64_t v0 = type metadata accessor for _ViewModifier_Content();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ViewModifier_Content<DragItemGroupModifier>);
    }
  }
}

void type metadata accessor for _EnvironmentKeyWritingModifier<Namespace.ID?>()
{
  if (!lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Namespace.ID?>)
  {
    type metadata accessor for Namespace.ID?();
    unint64_t v0 = type metadata accessor for _EnvironmentKeyWritingModifier();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Namespace.ID?>);
    }
  }
}

void type metadata accessor for Namespace.ID?()
{
  if (!lazy cache variable for type metadata for Namespace.ID?)
  {
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Namespace.ID?);
    }
  }
}

uint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<DragItemGroupIDKey> and conformance EnvironmentPropertyKey<A>(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t CollectionViewTableHeaderVisitor.visitCommon(view:traits:)(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *a2;
  _ViewList_ID.init(implicitID:)();
  long long v31 = v22;
  _ViewList_ID.canonicalID.getter();
  swift_bridgeObjectRelease();
  long long v6 = v17;
  uint64_t v7 = *(void *)(v2 + 64);
  uint64_t v8 = *(void *)(v3 + 72);
  uint64_t v9 = *(void *)(v3 + 80);
  *(void *)&long long v22 = a1;
  *((void *)&v22 + 1) = v7;
  *(void *)&long long v23 = v8;
  *((void *)&v23 + 1) = v9;
  outlined init with copy of TableColumnCollection(v3 + 16, (uint64_t)v24);
  *(_WORD *)((char *)&v25 + 9) = *(_WORD *)(v3 + 88);
  BYTE11(v25) = 2;
  *(void *)&long long v17 = swift_getKeyPath();
  BYTE8(v17) = 0;
  *(void *)&long long v18 = swift_getKeyPath();
  BYTE8(v18) = 0;
  *(void *)&long long v19 = swift_getKeyPath();
  BYTE8(v19) = 0;
  outlined init with take of TableRowView.Storage((uint64_t)&v22, (uint64_t)v20);
  uint64_t v21 = v5;
  unsigned __int8 v16 = 1;
  swift_retain();
  swift_bridgeObjectRetain_n();
  outlined copy of Binding<[SwiftUIAnySortComparator]>?(v7, v8);
  if (one-time initialization token for tableHeaderMinHeight != -1) {
    swift_once();
  }
  double v10 = *(double *)&static ListMetrics.tableHeaderMinHeight;
  long long v31 = v6;
  swift_retain();
  CollectionViewCellModifier.init(position:traits:minHeight:id:alignment:shouldHugContent:)(&v16, (uint64_t *)&v31, 0, 0, (uint64_t)&v30, v10);
  long long v27 = v20[3];
  long long v28 = v20[4];
  uint64_t v29 = v21;
  v24[0] = v19;
  v24[1] = v20[0];
  long long v25 = v20[1];
  long long v26 = v20[2];
  long long v22 = v17;
  long long v23 = v18;
  uint64_t v11 = *(unsigned char **)v3;
  specialized ListCollectionViewCellBase.configureContent(_:transaction:)((uint64_t)&v22, *(void *)(v3 + 8));
  char v12 = &v11[direct field offset for ListCollectionViewCellBase.viewListID];
  *char v12 = 0;
  v12[1] = 0;
  swift_bridgeObjectRelease();
  uint64_t v13 = direct field offset for TableCollectionViewCell.isHeader;
  char v14 = v11[direct field offset for TableCollectionViewCell.isHeader];
  v11[direct field offset for TableCollectionViewCell.isHeader] = 1;
  if ((v14 & 1) == 0)
  {
    objc_msgSend(v11, sel_setNeedsUpdateConfiguration);
    objc_msgSend(v11, sel_setAutomaticallyUpdatesBackgroundConfiguration_, v11[v13]);
  }
  swift_release();
  return outlined destroy of ModifiedContent<TableRowView, CollectionViewCellModifier>((uint64_t)&v22, (uint64_t (*)(void))type metadata accessor for ModifiedContent<TableRowView, CollectionViewCellModifier>);
}

uint64_t key path getter for EnvironmentValues.tableShowsFirstColumnOnly : EnvironmentValues@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = EnvironmentValues.tableShowsFirstColumnOnly.getter();
  *a1 = result & 1;
  return result;
}

uint64_t sub_1882DCA2C@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = EnvironmentValues.tableShowsFirstColumnOnly.getter();
  *a1 = result & 1;
  return result;
}

uint64_t key path setter for EnvironmentValues.tableShowsFirstColumnOnly : EnvironmentValues()
{
  return EnvironmentValues.tableShowsFirstColumnOnly.setter();
}

uint64_t sub_1882DCA94()
{
  return EnvironmentValues.tableShowsFirstColumnOnly.setter();
}

uint64_t outlined init with take of TableRowView.Storage(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t destroy for CollectionViewTableHeaderVisitor(uint64_t a1)
{
  if (*(void *)(a1 + 8) != 1) {
    swift_release();
  }
  if (*(unsigned char *)(a1 + 56))
  {
    uint64_t result = swift_bridgeObjectRelease();
    if (!*(void *)(a1 + 72)) {
      return result;
    }
  }
  else
  {
    uint64_t result = __swift_destroy_boxed_opaque_existential_1(a1 + 16);
    if (!*(void *)(a1 + 72)) {
      return result;
    }
  }
  swift_release();
  swift_release();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for CollectionViewTableHeaderVisitor(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a2;
  uint64_t v5 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  id v6 = v4;
  if (v5 != 1) {
    swift_retain();
  }
  *(void *)(a1 + 8) = v5;
  uint64_t v7 = (void *)(a1 + 16);
  uint64_t v8 = (void *)(a2 + 16);
  char v9 = *(unsigned char *)(a2 + 56);
  if (v9)
  {
    *uint64_t v7 = *v8;
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v10 = *(_OWORD *)(a2 + 40);
    *(_OWORD *)(a1 + 40) = v10;
    (**(void (***)(void *, void *))(v10 - 8))(v7, v8);
  }
  *(unsigned char *)(a1 + 56) = v9;
  uint64_t v11 = *(void *)(a2 + 72);
  if (v11)
  {
    *(void *)(a1 + 64) = *(void *)(a2 + 64);
    *(void *)(a1 + 72) = v11;
    *(void *)(a1 + 80) = *(void *)(a2 + 80);
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
  }
  else
  {
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    *(void *)(a1 + 80) = *(void *)(a2 + 80);
  }
  *(_WORD *)(a1 + 88) = *(_WORD *)(a2 + 88);
  return a1;
}

uint64_t assignWithCopy for CollectionViewTableHeaderVisitor(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a2;
  uint64_t v5 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  id v6 = v4;

  uint64_t v7 = (uint64_t *)(a1 + 8);
  uint64_t v8 = *(void *)(a2 + 8);
  if (*(void *)(a1 + 8) != 1)
  {
    if (v8 != 1)
    {
      *uint64_t v7 = v8;
      swift_retain();
      swift_release();
      if (a1 == a2) {
        goto LABEL_14;
      }
      goto LABEL_11;
    }
    outlined destroy of Transaction(a1 + 8);
    uint64_t v9 = *(void *)(a2 + 8);
LABEL_6:
    *uint64_t v7 = v9;
    if (a1 == a2) {
      goto LABEL_14;
    }
LABEL_11:
    outlined destroy of TableColumnCollection.Backing(a1 + 16);
    if (*(unsigned char *)(a2 + 56))
    {
      *(void *)(a1 + 16) = *(void *)(a2 + 16);
      *(unsigned char *)(a1 + 56) = 1;
      swift_bridgeObjectRetain();
    }
    else
    {
      uint64_t v10 = *(void *)(a2 + 40);
      *(void *)(a1 + 40) = v10;
      *(void *)(a1 + 48) = *(void *)(a2 + 48);
      (**(void (***)(uint64_t, uint64_t))(v10 - 8))(a1 + 16, a2 + 16);
      *(unsigned char *)(a1 + 56) = 0;
    }
    goto LABEL_14;
  }
  if (v8 == 1)
  {
    uint64_t v9 = 1;
    goto LABEL_6;
  }
  *uint64_t v7 = v8;
  swift_retain();
  if (a1 != a2) {
    goto LABEL_11;
  }
LABEL_14:
  uint64_t v11 = (_OWORD *)(a1 + 64);
  char v12 = (_OWORD *)(a2 + 64);
  uint64_t v13 = *(void *)(a2 + 72);
  if (*(void *)(a1 + 72))
  {
    if (v13)
    {
      *(void *)(a1 + 64) = *(void *)(a2 + 64);
      swift_retain();
      swift_release();
      *(void *)(a1 + 72) = *(void *)(a2 + 72);
      swift_retain();
      swift_release();
      *(void *)(a1 + 80) = *(void *)(a2 + 80);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      outlined destroy of ModifiedContent<TableRowView, CollectionViewCellModifier>(a1 + 64, (uint64_t (*)(void))type metadata accessor for Binding<[SwiftUIAnySortComparator]>);
      uint64_t v14 = *(void *)(a2 + 80);
      *uint64_t v11 = *v12;
      *(void *)(a1 + 80) = v14;
    }
  }
  else if (v13)
  {
    *(void *)(a1 + 64) = *(void *)(a2 + 64);
    *(void *)(a1 + 72) = *(void *)(a2 + 72);
    *(void *)(a1 + 80) = *(void *)(a2 + 80);
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v15 = *v12;
    *(void *)(a1 + 80) = *(void *)(a2 + 80);
    *uint64_t v11 = v15;
  }
  *(unsigned char *)(a1 + 88) = *(unsigned char *)(a2 + 88);
  *(unsigned char *)(a1 + 89) = *(unsigned char *)(a2 + 89);
  return a1;
}

uint64_t assignWithTake for CollectionViewTableHeaderVisitor(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a1;
  *(void *)a1 = *(void *)a2;

  uint64_t v5 = (uint64_t *)(a1 + 8);
  uint64_t v6 = *(void *)(a2 + 8);
  if (*(void *)(a1 + 8) == 1)
  {
LABEL_4:
    *uint64_t v5 = v6;
    if (a1 == a2) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  if (v6 == 1)
  {
    outlined destroy of Transaction(a1 + 8);
    uint64_t v6 = 1;
    goto LABEL_4;
  }
  *uint64_t v5 = v6;
  swift_release();
  if (a1 != a2)
  {
LABEL_5:
    outlined destroy of TableColumnCollection.Backing(a1 + 16);
    long long v7 = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
    *(_OWORD *)(a1 + 32) = v7;
    *(_OWORD *)(a1 + 41) = *(_OWORD *)(a2 + 41);
  }
LABEL_6:
  if (!*(void *)(a1 + 72))
  {
LABEL_12:
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    *(void *)(a1 + 80) = *(void *)(a2 + 80);
    goto LABEL_13;
  }
  if (!*(void *)(a2 + 72))
  {
    outlined destroy of ModifiedContent<TableRowView, CollectionViewCellModifier>(a1 + 64, (uint64_t (*)(void))type metadata accessor for Binding<[SwiftUIAnySortComparator]>);
    goto LABEL_12;
  }
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_release();
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_release();
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  swift_bridgeObjectRelease();
LABEL_13:
  *(unsigned char *)(a1 + 88) = *(unsigned char *)(a2 + 88);
  *(unsigned char *)(a1 + 89) = *(unsigned char *)(a2 + 89);
  return a1;
}

uint64_t getEnumTagSinglePayload for CollectionViewTableHeaderVisitor(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 90)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for CollectionViewTableHeaderVisitor(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_WORD *)(result + 88) = 0;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 90) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)uint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 90) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CollectionViewTableHeaderVisitor()
{
  return &type metadata for CollectionViewTableHeaderVisitor;
}

uint64_t type metadata completion function for TableContentVisitor()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t result = swift_getAssociatedTypeWitness();
  if (v1 <= 0x3F)
  {
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    uint64_t result = swift_getAssociatedTypeWitness();
    if (v2 <= 0x3F)
    {
      swift_getTupleTypeLayout2();
      v4[4] = v4;
      void v4[5] = "\t";
      type metadata accessor for _RowVisitationContext();
      uint64_t result = type metadata accessor for Optional();
      if (v3 <= 0x3F)
      {
        v4[6] = *(void *)(result - 8) + 64;
        v4[7] = MEMORY[0x1E4FBAD80] + 64;
        swift_initStructMetadata();
        return 0;
      }
    }
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for TableContentVisitor(uint64_t *a1, uint64_t *a2)
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v2 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v3 = *(void *)(v2 + 64);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v4 = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(_DWORD *)(v5 + 80);
  uint64_t v94 = v4;
  uint64_t v95 = v3 + v6;
  uint64_t v93 = ((v3 + v6) & ~v6) + *(void *)(v5 + 64);
  unint64_t v7 = (v93 + 7) & 0xFFFFFFFFFFFFFFF8;
  int v8 = *(_DWORD *)(v2 + 80) | *(_DWORD *)(v5 + 80);
  uint64_t v9 = swift_getAssociatedTypeWitness();
  uint64_t v10 = v2;
  uint64_t v11 = *(void *)(v9 - 8);
  int v12 = *(_DWORD *)(v11 + 84);
  uint64_t v13 = *(_DWORD *)(v11 + 80);
  unsigned int v14 = v8 & 0xF8 | v13;
  uint64_t v15 = v14 | 7;
  uint64_t v16 = *(unsigned int *)(v2 + 84);
  uint64_t v17 = *(unsigned int *)(v5 + 84);
  if (v17 <= v16) {
    unsigned int v18 = *(_DWORD *)(v2 + 84);
  }
  else {
    unsigned int v18 = *(_DWORD *)(v5 + 84);
  }
  unsigned int v19 = v12 - 1;
  if (!v12) {
    unsigned int v19 = 0;
  }
  if (v18 <= v19) {
    unsigned int v20 = v19;
  }
  else {
    unsigned int v20 = v18;
  }
  if (v20 <= 0x7FFFFFFF) {
    int v21 = 0x7FFFFFFF;
  }
  else {
    int v21 = v20;
  }
  if (v12) {
    uint64_t v22 = *(void *)(*(void *)(v9 - 8) + 64);
  }
  else {
    uint64_t v22 = *(void *)(*(void *)(v9 - 8) + 64) + 1;
  }
  BOOL v23 = v14 <= 7 && ((*(_DWORD *)(v11 + 80) | v8) & 0x100000) == 0;
  if (v23
    && ((((v13 + 8 + ((v7 + 143) & 0xFFFFFFFFFFFFFFF8)) & ~v13) + v22 + 3 + ((v15 + v7 + 9) & ~v15) + 7) & 0xFFFFFFFFFFFFFFF8)
     + 8 <= 0x18)
  {
    unsigned int v80 = *(_DWORD *)(v11 + 84);
    uint64_t v86 = v13 + 8;
    uint64_t v87 = v9;
    uint64_t v81 = v10;
    size_t v82 = v22;
    uint64_t v88 = *(void *)(v9 - 8);
    unint64_t __n = ((v13 + 8 + ((v7 + 143) & 0xFFFFFFFFFFFFFFF8)) & ~v13) + v22 + 3;
    uint64_t v85 = ~v13;
    uint64_t v84 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v10 + 16);
    uint64_t v91 = ~v15;
    int v92 = v21;
    v84(a1, a2, AssociatedTypeWitness);
    uint64_t v89 = ~v6;
    uint64_t v83 = *(void (**)(unint64_t, unint64_t))(v5 + 16);
    v83(((unint64_t)a1 + v95) & v89, ((unint64_t)a2 + v95) & v89);
    unint64_t v27 = ((unint64_t)a1 + v93 + 7) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v28 = ((unint64_t)a2 + v93 + 7) & 0xFFFFFFFFFFFFFFF8;
    char v29 = *(unsigned char *)(v28 + 8);
    *(void *)unint64_t v27 = *(void *)v28;
    *(unsigned char *)(v27 + 8) = v29;
    uint64_t v30 = v28 + v15;
    uint64_t v31 = (v27 + v15 + 9) & v91;
    uint64_t v32 = (v30 + 9) & v91;
    BOOL v23 = v18 == v92;
    long long v26 = a1;
    if (v23)
    {
      if (v16 >= v17)
      {
        uint64_t v39 = v16;
        uint64_t v33 = v32;
        int v35 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v81 + 48))(v32, v39, AssociatedTypeWitness);
        uint64_t v34 = v94;
      }
      else
      {
        uint64_t v33 = v32;
        uint64_t v34 = v94;
        int v35 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))((v95 + v32) & v89, v17, v94);
      }
      uint64_t v36 = v93 + 7;
      if (!v35)
      {
LABEL_36:
        unint64_t v37 = (v36 + v33) & 0xFFFFFFFFFFFFFFF8;
        uint64_t v43 = AssociatedTypeWitness;
        uint64_t v44 = v36;
LABEL_40:
        uint64_t v46 = a1;
        v84((uint64_t *)v31, (uint64_t *)v33, v43);
        uint64_t v47 = v33;
        ((void (*)(uint64_t, uint64_t, uint64_t))v83)((v95 + v31) & v89, (v95 + v33) & v89, v34);
        uint64_t v98 = v31;
        unint64_t v48 = (v44 + v31) & 0xFFFFFFFFFFFFFFF8;
        uint64_t v49 = *(void *)v37;
        char v50 = *(unsigned char *)(v37 + 8);
        outlined copy of Environment<Bool>.Content(*(void *)v37, v50);
        *(void *)unint64_t v48 = v49;
        *(unsigned char *)(v48 + 8) = v50;
        uint64_t v51 = *(void *)(v37 + 16);
        char v52 = *(unsigned char *)(v37 + 24);
        outlined copy of Environment<Bool>.Content(v51, v52);
        *(void *)(v48 + 16) = v51;
        *(unsigned char *)(v48 + 24) = v52;
        uint64_t v53 = *(void *)(v37 + 32);
        char v54 = *(unsigned char *)(v37 + 40);
        outlined copy of Environment<Bool>.Content(v53, v54);
        *(void *)(v48 + 32) = v53;
        *(unsigned char *)(v48 + 40) = v54;
        int v55 = *(unsigned __int8 *)(v37 + 123);
        if (v55 == 2)
        {
          *(void *)(v48 + 48) = *(void *)(v37 + 48);
          uint64_t v59 = *(void *)(v37 + 64);
          swift_retain();
          if (v59)
          {
            *(void *)(v48 + 56) = *(void *)(v37 + 56);
            *(void *)(v48 + 64) = *(void *)(v37 + 64);
            *(void *)(v48 + 72) = *(void *)(v37 + 72);
            swift_retain();
            swift_retain();
            swift_bridgeObjectRetain();
          }
          else
          {
            long long v65 = *(_OWORD *)(v37 + 56);
            *(void *)(v48 + 72) = *(void *)(v37 + 72);
            *(_OWORD *)(v48 + 56) = v65;
          }
          uint64_t v66 = (void *)(v48 + 80);
          uint64_t v67 = (void *)(v37 + 80);
          char v68 = *(unsigned char *)(v37 + 120);
          if (v68)
          {
            *uint64_t v66 = *v67;
            swift_bridgeObjectRetain();
          }
          else
          {
            uint64_t v69 = *(void *)(v37 + 104);
            *(void *)(v48 + 104) = v69;
            *(void *)(v48 + 112) = *(void *)(v37 + 112);
            (**(void (***)(void *, void *))(v69 - 8))(v66, v67);
          }
          uint64_t v58 = v88;
          *(unsigned char *)(v48 + 120) = v68;
          *(unsigned char *)(v48 + 121) = *(unsigned char *)(v37 + 121);
          *(unsigned char *)(v48 + 122) = *(unsigned char *)(v37 + 122);
        }
        else if (v55 == 1)
        {
          *(void *)(v48 + 48) = *(void *)(v37 + 48);
          int v56 = *(unsigned __int8 *)(v37 + 96);
          swift_retain();
          if (v56)
          {
            long long v63 = *(_OWORD *)(v37 + 56);
            long long v64 = *(_OWORD *)(v37 + 72);
            *(_OWORD *)(v48 + 81) = *(_OWORD *)(v37 + 81);
            *(_OWORD *)(v48 + 56) = v63;
            *(_OWORD *)(v48 + 72) = v64;
          }
          else
          {
            uint64_t v57 = *(void *)(v37 + 80);
            *(void *)(v48 + 80) = v57;
            *(void *)(v48 + 88) = *(void *)(v37 + 88);
            (**(void (***)(uint64_t, uint64_t))(v57 - 8))(v48 + 56, v37 + 56);
            *(unsigned char *)(v48 + 96) = 0;
          }
          uint64_t v58 = v88;
        }
        else
        {
          *(void *)(v48 + 48) = *(void *)(v37 + 48);
          uint64_t v60 = *(void *)(v37 + 56);
          *(unsigned char *)(v48 + 64) = *(unsigned char *)(v37 + 64);
          *(void *)(v48 + 56) = v60;
          uint64_t v61 = *(void *)(v37 + 96);
          *(void *)(v48 + 96) = v61;
          unint64_t v62 = **(void (***)(unint64_t, unint64_t, uint64_t))(v61 - 8);
          swift_bridgeObjectRetain();
          v62(v48 + 72, v37 + 72, v61);
          uint64_t v46 = a1;
          uint64_t v58 = v88;
        }
        *(unsigned char *)(v48 + 123) = v55;
        *(void *)(v48 + 128) = *(void *)(v37 + 128);
        uint64_t v70 = (void *)((v48 + 143) & 0xFFFFFFFFFFFFFFF8);
        uint64_t v71 = (void *)((v37 + 143) & 0xFFFFFFFFFFFFFFF8);
        void *v70 = *v71;
        uint64_t v72 = (char *)(((unint64_t)v70 + v86) & v85);
        uint64_t v73 = (char *)(((unint64_t)v71 + v86) & v85);
        uint64_t v74 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v58 + 48);
        uint64_t v75 = v58;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v74(v73, 1, v87))
        {
          memcpy(v72, v73, v82);
          size_t v76 = v82;
          unint64_t v42 = __n;
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v75 + 16))(v72, v73, v87);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v75 + 56))(v72, 0, 1, v87);
          unint64_t v42 = __n;
          size_t v76 = v82;
        }
        uint64_t v77 = &v72[v76];
        uint64_t v78 = &v73[v76];
        *uint64_t v77 = *v78;
        v77[1] = v78[1];
        v77[2] = v78[2];
        uint64_t v41 = v98;
        long long v26 = v46;
        uint64_t v33 = v47;
        goto LABEL_58;
      }
    }
    else
    {
      uint64_t v36 = v93 + 7;
      unint64_t v37 = (v93 + 7 + v32) & 0xFFFFFFFFFFFFFFF8;
      uint64_t v33 = v32;
      if ((v20 & 0x80000000) != 0)
      {
        uint64_t v34 = v94;
        if (v80 < 2)
        {
          uint64_t v43 = AssociatedTypeWitness;
          uint64_t v44 = v93 + 7;
          goto LABEL_40;
        }
        unsigned int v45 = (*(uint64_t (**)(unint64_t))(v88 + 48))((v86 + ((v37 + 143) & 0xFFFFFFFFFFFFFFF8)) & v85);
        uint64_t v43 = AssociatedTypeWitness;
        uint64_t v44 = v93 + 7;
        if (v45 < 2) {
          goto LABEL_40;
        }
      }
      else
      {
        unint64_t v38 = *(void *)(v37 + 128);
        if (v38 >= 0xFFFFFFFF) {
          LODWORD(v38) = -1;
        }
        uint64_t v34 = v94;
        if (v38 == -1) {
          goto LABEL_36;
        }
      }
    }
    uint64_t v40 = (void *)v31;
    uint64_t v41 = v31;
    unint64_t v42 = __n;
    memcpy(v40, (const void *)v33, __n);
LABEL_58:
    *(void *)(((v41 | 7) + v42) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((v33 | 7) + v42) & 0xFFFFFFFFFFFFFFF8);
    swift_bridgeObjectRetain();
    return v26;
  }
  uint64_t v25 = *a2;
  *a1 = *a2;
  long long v26 = (uint64_t *)(v25 + ((v15 + 16) & ~v15));
  swift_retain();
  return v26;
}

uint64_t destroy for TableContentVisitor(uint64_t a1)
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v3 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v4 = v3;
  uint64_t v36 = AssociatedTypeWitness;
  uint64_t v33 = *(void (**)(unint64_t, uint64_t))(v3 + 8);
  ((void (*)(uint64_t))v33)(a1);
  uint64_t v5 = *(void *)(v3 + 64);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v6 = swift_getAssociatedTypeWitness();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = v7;
  int v9 = *(_DWORD *)(v7 + 80);
  uint64_t v10 = v5 + v9;
  unint64_t v34 = ~(unint64_t)v9;
  uint64_t v35 = v6;
  uint64_t v32 = *(void (**)(unint64_t))(v7 + 8);
  v32((v10 + a1) & v34);
  uint64_t v11 = (v10 & v34) + *(void *)(v7 + 64) + 7;
  int v12 = (*(_DWORD *)(v4 + 80) | v9) & 0xF8;
  uint64_t v13 = swift_getAssociatedTypeWitness();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = *(unsigned __int8 *)(v14 + 80);
  unint64_t v16 = (((v11 + a1) & 0xFFFFFFFFFFFFFFF8) + (v12 | v15 | 7) + 9) & ~(unint64_t)(v12 | v15 | 7);
  uint64_t v17 = *(unsigned int *)(v4 + 84);
  unsigned int v18 = *(_DWORD *)(v8 + 84);
  if (v18 <= v17) {
    unsigned int v19 = *(_DWORD *)(v4 + 84);
  }
  else {
    unsigned int v19 = *(_DWORD *)(v8 + 84);
  }
  uint64_t v37 = *(void *)(v13 - 8);
  uint64_t v38 = v13;
  uint64_t v20 = *(unsigned int *)(v14 + 84);
  unsigned int v21 = v20 - 1;
  if (!v20) {
    unsigned int v21 = 0;
  }
  if (v19 > v21) {
    unsigned int v21 = v19;
  }
  if (v21 <= 0x7FFFFFFF) {
    int v22 = 0x7FFFFFFF;
  }
  else {
    int v22 = v21;
  }
  uint64_t v23 = ~v15;
  if (v19 == v22)
  {
    if (v17 >= v18) {
      int v24 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v4 + 48))(v16, v17, v36);
    }
    else {
      int v24 = (*(uint64_t (**)(unint64_t))(v8 + 48))((v10 + v16) & v34);
    }
    uint64_t v26 = v11;
    if (v24) {
      goto LABEL_37;
    }
    goto LABEL_21;
  }
  unint64_t v25 = (v11 + v16) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v26 = v11;
  if ((v21 & 0x80000000) != 0)
  {
    if (v20 >= 2
      && (*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v14 + 48))((v15 + ((v25 + 143) & 0xFFFFFFFFFFFFFFF8) + 8) & v23, v20, v13) >= 2)
    {
      goto LABEL_37;
    }
LABEL_24:
    v33(v16, v36);
    ((void (*)(unint64_t, uint64_t))v32)((v10 + v16) & v34, v35);
    outlined consume of Environment<Bool?>.Content(*(void *)v25, *(unsigned __int8 *)(v25 + 8));
    outlined consume of Environment<Bool?>.Content(*(void *)(v25 + 16), *(unsigned __int8 *)(v25 + 24));
    outlined consume of Environment<Bool?>.Content(*(void *)(v25 + 32), *(unsigned __int8 *)(v25 + 40));
    int v28 = *(unsigned __int8 *)(v25 + 123);
    if (v28 == 2)
    {
      swift_release();
      if (*(void *)(v25 + 64))
      {
        swift_release();
        swift_release();
        swift_bridgeObjectRelease();
      }
      uint64_t v29 = v25 + 80;
      if (*(unsigned char *)(v25 + 120))
      {
        swift_bridgeObjectRelease();
        goto LABEL_35;
      }
    }
    else if (v28 == 1)
    {
      swift_release();
      if (*(unsigned char *)(v25 + 96)) {
        goto LABEL_35;
      }
      uint64_t v29 = v25 + 56;
    }
    else
    {
      if (*(unsigned char *)(v25 + 123)) {
        goto LABEL_35;
      }
      swift_bridgeObjectRelease();
      uint64_t v29 = v25 + 72;
    }
    __swift_destroy_boxed_opaque_existential_1(v29);
LABEL_35:
    swift_bridgeObjectRelease();
    unint64_t v30 = (v25 + 143) & 0xFFFFFFFFFFFFFFF8;
    swift_bridgeObjectRelease();
    if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v37 + 48))((v15 + v30 + 8) & v23, 1, v38))(*(void (**)(unint64_t, uint64_t))(v37 + 8))((v15 + v30 + 8) & v23, v38); {
    goto LABEL_37;
    }
  }
  unint64_t v27 = *(void *)(v25 + 128);
  if (v27 >= 0xFFFFFFFF) {
    LODWORD(v27) = -1;
  }
  if (v27 == -1)
  {
LABEL_21:
    unint64_t v25 = (v26 + v16) & 0xFFFFFFFFFFFFFFF8;
    goto LABEL_24;
  }
LABEL_37:

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for TableContentVisitor(uint64_t a1, uint64_t a2)
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = v5;
  uint64_t v83 = AssociatedTypeWitness;
  unsigned int v80 = *(void (**)(uint64_t, uint64_t))(v5 + 16);
  v80(a1, a2);
  uint64_t v7 = *(void *)(v5 + 64);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v8 = swift_getAssociatedTypeWitness();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = v9;
  int v11 = *(_DWORD *)(v9 + 80);
  uint64_t v12 = v7 + v11;
  unint64_t v81 = ~(unint64_t)v11;
  uint64_t v82 = v8;
  uint64_t v79 = *(void (**)(unint64_t, unint64_t))(v9 + 16);
  v79((v12 + a1) & v81, (v12 + a2) & v81);
  uint64_t v13 = (v12 & v81) + *(void *)(v9 + 64) + 7;
  uint64_t v84 = a1;
  unint64_t v14 = (v13 + a1) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v15 = (v13 + a2) & 0xFFFFFFFFFFFFFFF8;
  char v16 = *(unsigned char *)(v15 + 8);
  *(void *)unint64_t v14 = *(void *)v15;
  *(unsigned char *)(v14 + 8) = v16;
  int v17 = (*(_DWORD *)(v6 + 80) | v11) & 0xF8;
  uint64_t v85 = swift_getAssociatedTypeWitness();
  uint64_t v18 = *(void *)(v85 - 8);
  uint64_t v19 = v18;
  uint64_t v20 = *(unsigned __int8 *)(v18 + 80);
  uint64_t v21 = v17 | v20 | 7;
  uint64_t v22 = (v21 + 9 + v14) & ~v21;
  uint64_t v23 = (v21 + 9 + v15) & ~v21;
  uint64_t v24 = *(unsigned int *)(v6 + 84);
  unsigned int v25 = *(_DWORD *)(v10 + 84);
  if (v25 <= v24) {
    unsigned int v26 = *(_DWORD *)(v6 + 84);
  }
  else {
    unsigned int v26 = *(_DWORD *)(v10 + 84);
  }
  uint64_t v27 = *(unsigned int *)(v18 + 84);
  unsigned int v28 = v27 - 1;
  if (!v27) {
    unsigned int v28 = 0;
  }
  if (v26 > v28) {
    unsigned int v28 = v26;
  }
  if (v28 <= 0x7FFFFFFF) {
    int v29 = 0x7FFFFFFF;
  }
  else {
    int v29 = v28;
  }
  unint64_t v30 = (v20 + 8 + (((v13 & 0xFFFFFFFFFFFFFFF8) + 143) & 0xFFFFFFFFFFFFFFF8)) & ~v20;
  size_t v31 = *(void *)(*(void *)(v85 - 8) + 64);
  uint64_t v77 = v20 + 8;
  uint64_t v78 = ~v20;
  if (v26 != v29)
  {
    unint64_t v34 = (v13 + v23) & 0xFFFFFFFFFFFFFFF8;
    if ((v28 & 0x80000000) != 0)
    {
      int v76 = *(_DWORD *)(v18 + 84);
      if (v27 < 2
        || (*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v18 + 48))((v20 + 8 + ((v34 + 143) & 0xFFFFFFFFFFFFFFF8)) & ~v20, v27, v85) < 2)
      {
        goto LABEL_28;
      }
      size_t v37 = v30 + v31 + 3;
      memcpy((void *)v22, (const void *)v23, v37);
      BOOL v36 = 0;
LABEL_23:
      uint64_t v39 = v84;
      goto LABEL_51;
    }
    unint64_t v35 = *(void *)(v34 + 128);
    if (v35 >= 0xFFFFFFFF) {
      LODWORD(v35) = -1;
    }
    if (v35 == -1) {
      goto LABEL_25;
    }
    goto LABEL_19;
  }
  if (v24 < v25)
  {
    int v32 = *(_DWORD *)(v18 + 84);
    int v33 = (*(uint64_t (**)(unint64_t))(v10 + 48))((v12 + v23) & v81);
    LODWORD(v27) = v32;
    if (!v33) {
      goto LABEL_25;
    }
    goto LABEL_19;
  }
  int v40 = *(_DWORD *)(v18 + 84);
  int v41 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v23, v24, v83);
  LODWORD(v27) = v40;
  if (v41)
  {
LABEL_19:
    BOOL v36 = v27 == 0;
    size_t v37 = v30 + v31 + 3;
    if (v27) {
      size_t v38 = v30 + v31 + 3;
    }
    else {
      size_t v38 = v30 + v31 + 4;
    }
    memcpy((void *)v22, (const void *)v23, v38);
    goto LABEL_23;
  }
LABEL_25:
  int v76 = v27;
  unint64_t v34 = (v13 + v23) & 0xFFFFFFFFFFFFFFF8;
LABEL_28:
  size_t v74 = v31;
  ((void (*)(uint64_t, uint64_t, uint64_t))v80)(v22, v23, v83);
  ((void (*)(unint64_t, unint64_t, uint64_t))v79)((v12 + v22) & v81, (v12 + v23) & v81, v82);
  unint64_t v42 = (v13 + v22) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v43 = *(void *)v34;
  char v44 = *(unsigned char *)(v34 + 8);
  outlined copy of Environment<Bool>.Content(*(void *)v34, v44);
  *(void *)unint64_t v42 = v43;
  *(unsigned char *)(v42 + 8) = v44;
  uint64_t v45 = *(void *)(v34 + 16);
  char v46 = *(unsigned char *)(v34 + 24);
  outlined copy of Environment<Bool>.Content(v45, v46);
  *(void *)(v42 + 16) = v45;
  *(unsigned char *)(v42 + 24) = v46;
  uint64_t v47 = *(void *)(v34 + 32);
  char v48 = *(unsigned char *)(v34 + 40);
  outlined copy of Environment<Bool>.Content(v47, v48);
  *(void *)(v42 + 32) = v47;
  *(unsigned char *)(v42 + 40) = v48;
  int v49 = *(unsigned __int8 *)(v34 + 123);
  unint64_t v75 = v30;
  if (v49 == 2)
  {
    *(void *)(v42 + 48) = *(void *)(v34 + 48);
    uint64_t v52 = *(void *)(v34 + 64);
    swift_retain();
    if (v52)
    {
      *(void *)(v42 + 56) = *(void *)(v34 + 56);
      *(void *)(v42 + 64) = *(void *)(v34 + 64);
      *(void *)(v42 + 72) = *(void *)(v34 + 72);
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
    }
    else
    {
      long long v60 = *(_OWORD *)(v34 + 56);
      *(void *)(v42 + 72) = *(void *)(v34 + 72);
      *(_OWORD *)(v42 + 56) = v60;
    }
    uint64_t v61 = (void *)(v42 + 80);
    unint64_t v62 = (void *)(v34 + 80);
    char v63 = *(unsigned char *)(v34 + 120);
    if (v63)
    {
      *uint64_t v61 = *v62;
      swift_bridgeObjectRetain();
    }
    else
    {
      uint64_t v64 = *(void *)(v34 + 104);
      *(void *)(v42 + 104) = v64;
      *(void *)(v42 + 112) = *(void *)(v34 + 112);
      (**(void (***)(void *, void *))(v64 - 8))(v61, v62);
    }
    uint64_t v59 = v77;
    uint64_t v58 = v78;
    *(unsigned char *)(v42 + 120) = v63;
    *(unsigned char *)(v42 + 121) = *(unsigned char *)(v34 + 121);
    *(unsigned char *)(v42 + 122) = *(unsigned char *)(v34 + 122);
  }
  else
  {
    if (v49 == 1)
    {
      *(void *)(v42 + 48) = *(void *)(v34 + 48);
      int v50 = *(unsigned __int8 *)(v34 + 96);
      swift_retain();
      if (v50)
      {
        long long v56 = *(_OWORD *)(v34 + 56);
        long long v57 = *(_OWORD *)(v34 + 72);
        *(_OWORD *)(v42 + 81) = *(_OWORD *)(v34 + 81);
        *(_OWORD *)(v42 + 56) = v56;
        *(_OWORD *)(v42 + 72) = v57;
      }
      else
      {
        uint64_t v51 = *(void *)(v34 + 80);
        *(void *)(v42 + 80) = v51;
        *(void *)(v42 + 88) = *(void *)(v34 + 88);
        (**(void (***)(uint64_t, uint64_t))(v51 - 8))(v42 + 56, v34 + 56);
        *(unsigned char *)(v42 + 96) = 0;
      }
    }
    else
    {
      *(void *)(v42 + 48) = *(void *)(v34 + 48);
      uint64_t v53 = *(void *)(v34 + 56);
      *(unsigned char *)(v42 + 64) = *(unsigned char *)(v34 + 64);
      *(void *)(v42 + 56) = v53;
      uint64_t v54 = *(void *)(v34 + 96);
      *(void *)(v42 + 96) = v54;
      int v55 = **(void (***)(unint64_t, unint64_t, uint64_t))(v54 - 8);
      swift_bridgeObjectRetain();
      v55(v42 + 72, v34 + 72, v54);
    }
    uint64_t v59 = v77;
    uint64_t v58 = v78;
  }
  *(unsigned char *)(v42 + 123) = v49;
  *(void *)(v42 + 128) = *(void *)(v34 + 128);
  long long v65 = (void *)((v42 + 143) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v66 = (void *)((v34 + 143) & 0xFFFFFFFFFFFFFFF8);
  *long long v65 = *v66;
  uint64_t v67 = (char *)(((unint64_t)v65 + v59) & v58);
  char v68 = (const void *)(((unint64_t)v66 + v59) & v58);
  uint64_t v69 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v19 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v69(v68, 1, v85))
  {
    BOOL v36 = v76 == 0;
    size_t v70 = v74;
    if (v76) {
      size_t v71 = v74;
    }
    else {
      size_t v71 = v74 + 1;
    }
    memcpy(v67, v68, v71);
  }
  else
  {
    (*(void (**)(char *, const void *, uint64_t))(v19 + 16))(v67, v68, v85);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v19 + 56))(v67, 0, 1, v85);
    BOOL v36 = v76 == 0;
    size_t v70 = v74;
    if (v76) {
      size_t v71 = v74;
    }
    else {
      size_t v71 = v74 + 1;
    }
  }
  uint64_t v39 = v84;
  uint64_t v72 = &v67[v71];
  char *v72 = *((unsigned char *)v68 + v71);
  v72[1] = *((unsigned char *)v68 + v71 + 1);
  v72[2] = *((unsigned char *)v68 + v71 + 2);
  size_t v37 = v75 + v70 + 3;
LABEL_51:
  *(void *)(((v22 | 7) + v37 + v36) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((v23 | 7) + v37 + v36) & 0xFFFFFFFFFFFFFFF8);
  swift_bridgeObjectRetain();
  return v39;
}

uint64_t assignWithCopy for TableContentVisitor(uint64_t a1, uint64_t a2)
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = v5;
  uint64_t v132 = AssociatedTypeWitness;
  uint64_t v122 = *(void (**)(uint64_t, uint64_t))(v5 + 24);
  v122(a1, a2);
  uint64_t v7 = *(void *)(v5 + 64);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v8 = swift_getAssociatedTypeWitness();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = v9;
  int v11 = *(_DWORD *)(v9 + 80);
  uint64_t v12 = v7 + v11;
  unint64_t v130 = ~(unint64_t)v11;
  uint64_t v131 = v8;
  uint64_t v121 = *(void (**)(unint64_t, unint64_t))(v9 + 24);
  v121((v12 + a1) & v130, (v12 + a2) & v130);
  uint64_t v13 = (v12 & v130) + *(void *)(v9 + 64) + 7;
  uint64_t v128 = a1;
  unint64_t v14 = (v13 + a1) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v15 = (v13 + a2) & 0xFFFFFFFFFFFFFFF8;
  char v16 = *(unsigned char *)(v15 + 8);
  *(void *)unint64_t v14 = *(void *)v15;
  *(unsigned char *)(v14 + 8) = v16;
  int v17 = (*(_DWORD *)(v6 + 80) | v11) & 0xF8;
  uint64_t v125 = swift_getAssociatedTypeWitness();
  uint64_t v18 = *(void *)(v125 - 8);
  uint64_t v19 = v18;
  uint64_t v20 = *(unsigned __int8 *)(v18 + 80);
  uint64_t v21 = v17 | v20 | 7;
  uint64_t v133 = (v21 + 9 + v15) & ~v21;
  uint64_t v134 = (v21 + 9 + v14) & ~v21;
  uint64_t v22 = *(unsigned int *)(v6 + 84);
  uint64_t v23 = *(unsigned int *)(v10 + 84);
  if (v23 <= v22) {
    unsigned int v24 = *(_DWORD *)(v6 + 84);
  }
  else {
    unsigned int v24 = *(_DWORD *)(v10 + 84);
  }
  unsigned int v25 = *(_DWORD *)(v18 + 84);
  unsigned int v26 = v25 - 1;
  if (!v25) {
    unsigned int v26 = 0;
  }
  if (v24 > v26) {
    unsigned int v26 = v24;
  }
  if (v26 <= 0x7FFFFFFF) {
    int v27 = 0x7FFFFFFF;
  }
  else {
    int v27 = v26;
  }
  uint64_t v127 = ~v20;
  uint64_t v126 = v20 + 8;
  unint64_t v28 = (v20 + 8 + (((v13 & 0xFFFFFFFFFFFFFFF8) + 143) & 0xFFFFFFFFFFFFFFF8)) & ~v20;
  size_t v129 = *(void *)(*(void *)(v125 - 8) + 64);
  if (v24 == v27)
  {
    if (v22 >= v23) {
      int v29 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v134, v22, v132);
    }
    else {
      int v29 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v10 + 48))((v12 + v134) & v130, v23, v131);
    }
    if (v29)
    {
      if (v22 < v23)
      {
        int v33 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v10 + 48))((v12 + v133) & v130, v23, v131);
        goto LABEL_24;
      }
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v133, v22, v132)) {
        goto LABEL_25;
      }
LABEL_39:
      unsigned int v124 = v25;
      unint64_t v120 = v28;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v134, v133, v132);
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v10 + 16))((v12 + v134) & v130, (v12 + v133) & v130, v131);
      unint64_t v59 = (v13 + v134) & 0xFFFFFFFFFFFFFFF8;
      unint64_t v60 = (v13 + v133) & 0xFFFFFFFFFFFFFFF8;
      uint64_t v61 = *(void *)v60;
      char v62 = *(unsigned char *)(v60 + 8);
      outlined copy of Environment<Bool>.Content(*(void *)v60, v62);
      *(void *)unint64_t v59 = v61;
      *(unsigned char *)(v59 + 8) = v62;
      uint64_t v63 = *(void *)(v60 + 16);
      char v64 = *(unsigned char *)(v60 + 24);
      outlined copy of Environment<Bool>.Content(v63, v64);
      *(void *)(v59 + 16) = v63;
      *(unsigned char *)(v59 + 24) = v64;
      uint64_t v65 = *(void *)(v60 + 32);
      char v66 = *(unsigned char *)(v60 + 40);
      outlined copy of Environment<Bool>.Content(v65, v66);
      *(void *)(v59 + 32) = v65;
      *(unsigned char *)(v59 + 40) = v66;
      int v67 = *(unsigned __int8 *)(v60 + 123);
      if (v67 == 2)
      {
        *(void *)(v59 + 48) = *(void *)(v60 + 48);
        uint64_t v74 = *(void *)(v60 + 64);
        swift_retain();
        if (v74)
        {
          *(void *)(v59 + 56) = *(void *)(v60 + 56);
          *(void *)(v59 + 64) = *(void *)(v60 + 64);
          *(void *)(v59 + 72) = *(void *)(v60 + 72);
          swift_retain();
          swift_retain();
          swift_bridgeObjectRetain();
        }
        else
        {
          long long v88 = *(_OWORD *)(v60 + 56);
          *(void *)(v59 + 72) = *(void *)(v60 + 72);
          *(_OWORD *)(v59 + 56) = v88;
        }
        size_t v36 = v129;
        uint64_t v89 = (void *)(v59 + 80);
        uint64_t v90 = (void *)(v60 + 80);
        char v91 = *(unsigned char *)(v60 + 120);
        if (v91)
        {
          *uint64_t v89 = *v90;
          swift_bridgeObjectRetain();
        }
        else
        {
          uint64_t v92 = *(void *)(v60 + 104);
          *(void *)(v59 + 104) = v92;
          *(void *)(v59 + 112) = *(void *)(v60 + 112);
          (**(void (***)(void *, void *))(v92 - 8))(v89, v90);
        }
        *(unsigned char *)(v59 + 120) = v91;
        *(unsigned char *)(v59 + 121) = *(unsigned char *)(v60 + 121);
        *(unsigned char *)(v59 + 122) = *(unsigned char *)(v60 + 122);
      }
      else if (v67 == 1)
      {
        *(void *)(v59 + 48) = *(void *)(v60 + 48);
        int v68 = *(unsigned __int8 *)(v60 + 96);
        swift_retain();
        if (v68)
        {
          long long v84 = *(_OWORD *)(v60 + 56);
          long long v85 = *(_OWORD *)(v60 + 72);
          *(_OWORD *)(v59 + 81) = *(_OWORD *)(v60 + 81);
          *(_OWORD *)(v59 + 56) = v84;
          *(_OWORD *)(v59 + 72) = v85;
        }
        else
        {
          uint64_t v69 = *(void *)(v60 + 80);
          *(void *)(v59 + 80) = v69;
          *(void *)(v59 + 88) = *(void *)(v60 + 88);
          (**(void (***)(uint64_t, uint64_t))(v69 - 8))(v59 + 56, v60 + 56);
          *(unsigned char *)(v59 + 96) = 0;
        }
        size_t v36 = v129;
      }
      else
      {
        *(void *)(v59 + 48) = *(void *)(v60 + 48);
        uint64_t v75 = *(void *)(v60 + 56);
        *(unsigned char *)(v59 + 64) = *(unsigned char *)(v60 + 64);
        *(void *)(v59 + 56) = v75;
        uint64_t v76 = *(void *)(v60 + 96);
        *(void *)(v59 + 96) = v76;
        uint64_t v77 = **(void (***)(unint64_t, unint64_t, uint64_t))(v76 - 8);
        swift_bridgeObjectRetain();
        v77(v59 + 72, v60 + 72, v76);
        size_t v36 = v129;
      }
      *(unsigned char *)(v59 + 123) = v67;
      *(void *)(v59 + 128) = *(void *)(v60 + 128);
      uint64_t v93 = (void *)((v59 + 143) & 0xFFFFFFFFFFFFFFF8);
      uint64_t v94 = (void *)((v60 + 143) & 0xFFFFFFFFFFFFFFF8);
      *uint64_t v93 = *v94;
      uint64_t v95 = (char *)(((unint64_t)v93 + v126) & v127);
      uint64_t v96 = (const void *)(((unint64_t)v94 + v126) & v127);
      uint64_t v97 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v19 + 48);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v97(v96, 1, v125))
      {
        BOOL v35 = v124 == 0;
        if (v124) {
          size_t v98 = v36;
        }
        else {
          size_t v98 = v36 + 1;
        }
        memcpy(v95, v96, v98);
      }
      else
      {
        (*(void (**)(char *, const void *, uint64_t))(v19 + 16))(v95, v96, v125);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v19 + 56))(v95, 0, 1, v125);
        BOOL v35 = v124 == 0;
        if (v124) {
          size_t v98 = v36;
        }
        else {
          size_t v98 = v36 + 1;
        }
      }
      uint64_t v38 = v128;
      double v99 = &v95[v98];
      *double v99 = *((unsigned char *)v96 + v98);
      v99[1] = *((unsigned char *)v96 + v98 + 1);
      v99[2] = *((unsigned char *)v96 + v98 + 2);
      goto LABEL_105;
    }
    if (v22 >= v23) {
      int v58 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v133, v22, v132);
    }
    else {
      int v58 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v10 + 48))((v12 + v133) & v130, v23, v131);
    }
    unsigned int v123 = v25;
    if (v58) {
      goto LABEL_46;
    }
LABEL_31:
    unint64_t v120 = v28;
    ((void (*)(uint64_t, uint64_t, uint64_t))v122)(v134, v133, v132);
    ((void (*)(unint64_t, unint64_t, uint64_t))v121)((v12 + v134) & v130, (v12 + v133) & v130, v131);
    unint64_t v41 = (v13 + v134) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v42 = (v13 + v133) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v43 = *(void *)v42;
    char v44 = *(unsigned char *)(v42 + 8);
    outlined copy of Environment<Bool>.Content(*(void *)v42, v44);
    uint64_t v45 = *(void *)v41;
    uint64_t v46 = *(unsigned __int8 *)(v41 + 8);
    *(void *)unint64_t v41 = v43;
    *(unsigned char *)(v41 + 8) = v44;
    outlined consume of Environment<Bool?>.Content(v45, v46);
    uint64_t v47 = *(void *)(v42 + 16);
    char v48 = *(unsigned char *)(v42 + 24);
    outlined copy of Environment<Bool>.Content(v47, v48);
    uint64_t v49 = *(void *)(v41 + 16);
    uint64_t v50 = *(unsigned __int8 *)(v41 + 24);
    *(void *)(v41 + 16) = v47;
    *(unsigned char *)(v41 + 24) = v48;
    outlined consume of Environment<Bool?>.Content(v49, v50);
    uint64_t v51 = *(void *)(v42 + 32);
    char v52 = *(unsigned char *)(v42 + 40);
    outlined copy of Environment<Bool>.Content(v51, v52);
    uint64_t v53 = *(void *)(v41 + 32);
    uint64_t v54 = *(unsigned __int8 *)(v41 + 40);
    *(void *)(v41 + 32) = v51;
    *(unsigned char *)(v41 + 40) = v52;
    outlined consume of Environment<Bool?>.Content(v53, v54);
    size_t v36 = v129;
    if (v41 != v42)
    {
      outlined destroy of TableRowView.Storage(v41 + 48);
      int v55 = *(unsigned __int8 *)(v42 + 123);
      if (v55 == 2)
      {
        *(void *)(v41 + 48) = *(void *)(v42 + 48);
        uint64_t v80 = *(void *)(v42 + 64);
        swift_retain();
        if (v80)
        {
          *(void *)(v41 + 56) = *(void *)(v42 + 56);
          *(void *)(v41 + 64) = *(void *)(v42 + 64);
          *(void *)(v41 + 72) = *(void *)(v42 + 72);
          swift_retain();
          swift_retain();
          swift_bridgeObjectRetain();
        }
        else
        {
          long long v100 = *(_OWORD *)(v42 + 56);
          *(void *)(v41 + 72) = *(void *)(v42 + 72);
          *(_OWORD *)(v41 + 56) = v100;
        }
        uint64_t v101 = (void *)(v41 + 80);
        uint64_t v102 = (void *)(v42 + 80);
        char v103 = *(unsigned char *)(v42 + 120);
        if (v103)
        {
          *uint64_t v101 = *v102;
          swift_bridgeObjectRetain();
        }
        else
        {
          uint64_t v104 = *(void *)(v42 + 104);
          *(void *)(v41 + 104) = v104;
          *(void *)(v41 + 112) = *(void *)(v42 + 112);
          (**(void (***)(void *, void *))(v104 - 8))(v101, v102);
        }
        *(unsigned char *)(v41 + 120) = v103;
        *(unsigned char *)(v41 + 121) = *(unsigned char *)(v42 + 121);
        *(unsigned char *)(v41 + 122) = *(unsigned char *)(v42 + 122);
      }
      else if (v55 == 1)
      {
        *(void *)(v41 + 48) = *(void *)(v42 + 48);
        int v56 = *(unsigned __int8 *)(v42 + 96);
        swift_retain();
        if (v56)
        {
          long long v86 = *(_OWORD *)(v42 + 56);
          long long v87 = *(_OWORD *)(v42 + 72);
          *(_OWORD *)(v41 + 81) = *(_OWORD *)(v42 + 81);
          *(_OWORD *)(v41 + 56) = v86;
          *(_OWORD *)(v41 + 72) = v87;
        }
        else
        {
          uint64_t v57 = *(void *)(v42 + 80);
          *(void *)(v41 + 80) = v57;
          *(void *)(v41 + 88) = *(void *)(v42 + 88);
          (**(void (***)(uint64_t, uint64_t))(v57 - 8))(v41 + 56, v42 + 56);
          *(unsigned char *)(v41 + 96) = 0;
        }
      }
      else
      {
        *(void *)(v41 + 48) = *(void *)(v42 + 48);
        uint64_t v81 = *(void *)(v42 + 56);
        *(unsigned char *)(v41 + 64) = *(unsigned char *)(v42 + 64);
        *(void *)(v41 + 56) = v81;
        uint64_t v82 = *(void *)(v42 + 96);
        *(void *)(v41 + 96) = v82;
        uint64_t v83 = **(void (***)(unint64_t, unint64_t, uint64_t))(v82 - 8);
        swift_bridgeObjectRetain();
        v83(v41 + 72, v42 + 72, v82);
        size_t v36 = v129;
      }
      *(unsigned char *)(v41 + 123) = v55;
    }
    *(void *)(v41 + 128) = *(void *)(v42 + 128);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    uint64_t v105 = (void *)((v41 + 143) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v106 = (void *)((v42 + 143) & 0xFFFFFFFFFFFFFFF8);
    *uint64_t v105 = *v106;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    BOOL v107 = (char *)(((unint64_t)v105 + v126) & v127);
    uint64_t v108 = (char *)(((unint64_t)v106 + v126) & v127);
    uint64_t v109 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v19 + 48);
    int v110 = v109(v107, 1, v125);
    int v111 = v109(v108, 1, v125);
    if (v110)
    {
      uint64_t v38 = v128;
      unsigned int v112 = v123;
      if (!v111)
      {
        (*(void (**)(char *, char *, uint64_t))(v19 + 16))(v107, v108, v125);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v19 + 56))(v107, 0, 1, v125);
LABEL_101:
        BOOL v34 = v112 == 0;
        BOOL v35 = v112 == 0;
        if (v34) {
          size_t v114 = v36 + 1;
        }
        else {
          size_t v114 = v36;
        }
        int v115 = &v107[v114];
        uint64_t v116 = &v108[v114];
        *int v115 = *v116;
        v115[1] = v116[1];
        v115[2] = v116[2];
LABEL_105:
        unint64_t v28 = v120;
        goto LABEL_106;
      }
    }
    else
    {
      uint64_t v38 = v128;
      unsigned int v112 = v123;
      if (!v111)
      {
        (*(void (**)(char *, char *, uint64_t))(v19 + 24))(v107, v108, v125);
        goto LABEL_101;
      }
      (*(void (**)(char *, uint64_t))(v19 + 8))(v107, v125);
    }
    if (v112) {
      size_t v113 = v36;
    }
    else {
      size_t v113 = v36 + 1;
    }
    memcpy(v107, v108, v113);
    goto LABEL_101;
  }
  unint64_t v30 = (v13 + v134) & 0xFFFFFFFFFFFFFFF8;
  if ((v26 & 0x80000000) == 0)
  {
    unint64_t v31 = *(void *)(v30 + 128);
    unint64_t v32 = *(void *)(((v13 + v133) & 0xFFFFFFFFFFFFFFF8) + 128);
    if (v32 >= 0xFFFFFFFF) {
      LODWORD(v32) = -1;
    }
    int v33 = v32 + 1;
    if (v31 <= 0xFFFFFFFE)
    {
LABEL_24:
      if (v33)
      {
LABEL_25:
        BOOL v34 = v25 == 0;
        BOOL v35 = v25 == 0;
        size_t v36 = v129;
        unint64_t v37 = v28 + v129;
        if (v34) {
          ++v37;
        }
        memcpy((void *)v134, (const void *)v133, v37 + 3);
        uint64_t v38 = v128;
        goto LABEL_106;
      }
      goto LABEL_39;
    }
    unsigned int v123 = *(_DWORD *)(v18 + 84);
    if (v32 != -1) {
      goto LABEL_46;
    }
    goto LABEL_31;
  }
  unsigned int v123 = *(_DWORD *)(v18 + 84);
  if (v25 < 2) {
    goto LABEL_31;
  }
  unint64_t v119 = (v20 + 8 + (((v13 & 0xFFFFFFFFFFFFFFF8) + 143) & 0xFFFFFFFFFFFFFFF8)) & ~v20;
  uint64_t v39 = *(uint64_t (**)(unint64_t, void, uint64_t))(v18 + 48);
  unsigned int v118 = v39((v126 + ((v30 + 143) & 0xFFFFFFFFFFFFFFF8)) & v127, v25, v125);
  unsigned int v40 = v39((v126 + ((((v13 + v133) & 0xFFFFFFFFFFFFFFF8) + 143) & 0xFFFFFFFFFFFFFFF8)) & v127, v25, v125);
  if (v118 >= 2)
  {
    unint64_t v28 = v119;
    if (v40 >= 2) {
      goto LABEL_25;
    }
    goto LABEL_39;
  }
  unint64_t v28 = v119;
  if (v40 < 2) {
    goto LABEL_31;
  }
LABEL_46:
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v134, v132);
  (*(void (**)(unint64_t, uint64_t))(v10 + 8))((v12 + v134) & v130, v131);
  unint64_t v70 = (v13 + v134) & 0xFFFFFFFFFFFFFFF8;
  outlined consume of Environment<Bool?>.Content(*(void *)v70, *(unsigned __int8 *)(v70 + 8));
  outlined consume of Environment<Bool?>.Content(*(void *)(v70 + 16), *(unsigned __int8 *)(v70 + 24));
  outlined consume of Environment<Bool?>.Content(*(void *)(v70 + 32), *(unsigned __int8 *)(v70 + 40));
  int v71 = *(unsigned __int8 *)(v70 + 123);
  if (v71 == 2)
  {
    swift_release();
    if (*(void *)(v70 + 64))
    {
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
    }
    uint64_t v73 = v70 + 80;
    uint64_t v38 = v128;
    size_t v36 = v129;
    uint64_t v72 = v125;
    if ((*(unsigned char *)(v70 + 120) & 1) == 0) {
      goto LABEL_59;
    }
    swift_bridgeObjectRelease();
  }
  else if (v71 == 1)
  {
    swift_release();
    uint64_t v38 = v128;
    size_t v36 = v129;
    uint64_t v72 = v125;
    if (!*(unsigned char *)(v70 + 96))
    {
      uint64_t v73 = v70 + 56;
      goto LABEL_59;
    }
  }
  else
  {
    uint64_t v38 = v128;
    size_t v36 = v129;
    uint64_t v72 = v125;
    if (!*(unsigned char *)(v70 + 123))
    {
      swift_bridgeObjectRelease();
      uint64_t v73 = v70 + 72;
LABEL_59:
      __swift_destroy_boxed_opaque_existential_1(v73);
    }
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  unint64_t v78 = (v126 + ((v70 + 143) & 0xFFFFFFFFFFFFFFF8)) & v127;
  if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v19 + 48))(v78, 1, v72)) {
    (*(void (**)(unint64_t, uint64_t))(v19 + 8))(v78, v72);
  }
  BOOL v35 = v123 == 0;
  unint64_t v79 = v28 + v36;
  if (!v123) {
    ++v79;
  }
  memcpy((void *)v134, (const void *)v133, v79 + 3);
LABEL_106:
  *(void *)(((v134 | 7) + v28 + v36 + v35 + 3) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((v133 | 7) + v28 + v36 + v35 + 3) & 0xFFFFFFFFFFFFFFF8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return v38;
}

uint64_t initializeWithTake for TableContentVisitor(uint64_t a1, uint64_t a2)
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = v5;
  uint64_t v65 = AssociatedTypeWitness;
  uint64_t v61 = *(void (**)(uint64_t, uint64_t))(v5 + 32);
  v61(a1, a2);
  uint64_t v7 = *(void *)(v5 + 64);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v8 = swift_getAssociatedTypeWitness();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = v9;
  int v11 = *(_DWORD *)(v9 + 80);
  uint64_t v12 = v7 + v11;
  unint64_t v62 = ~(unint64_t)v11;
  uint64_t v64 = v8;
  unint64_t v60 = *(void (**)(unint64_t, unint64_t))(v9 + 32);
  v60((v12 + a1) & v62, (v12 + a2) & v62);
  uint64_t v63 = v12;
  uint64_t v13 = (v12 & v62) + *(void *)(v9 + 64) + 7;
  uint64_t v66 = a1;
  unint64_t v14 = (v13 + a1) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v15 = (v13 + a2) & 0xFFFFFFFFFFFFFFF8;
  char v16 = *(unsigned char *)(v15 + 8);
  *(void *)unint64_t v14 = *(void *)v15;
  *(unsigned char *)(v14 + 8) = v16;
  int v17 = (*(_DWORD *)(v5 + 80) | v11) & 0xF8;
  uint64_t v67 = swift_getAssociatedTypeWitness();
  uint64_t v18 = *(void *)(v67 - 8);
  uint64_t v19 = v18;
  uint64_t v20 = *(unsigned __int8 *)(v18 + 80);
  uint64_t v21 = v17 | v20 | 7;
  uint64_t v22 = (v21 + 9 + v14) & ~v21;
  uint64_t v23 = (v21 + 9 + v15) & ~v21;
  uint64_t v24 = *(unsigned int *)(v6 + 84);
  unsigned int v25 = *(_DWORD *)(v9 + 84);
  if (v25 <= v24) {
    unsigned int v26 = *(_DWORD *)(v6 + 84);
  }
  else {
    unsigned int v26 = *(_DWORD *)(v9 + 84);
  }
  uint64_t v27 = *(unsigned int *)(v18 + 84);
  unsigned int v28 = v27 - 1;
  if (!v27) {
    unsigned int v28 = 0;
  }
  if (v26 > v28) {
    unsigned int v28 = v26;
  }
  if (v28 <= 0x7FFFFFFF) {
    int v29 = 0x7FFFFFFF;
  }
  else {
    int v29 = v28;
  }
  uint64_t v30 = ~v20;
  uint64_t v31 = v20 + 8;
  unint64_t v32 = (v20 + 8 + (((v13 & 0xFFFFFFFFFFFFFFF8) + 143) & 0xFFFFFFFFFFFFFFF8)) & ~v20;
  size_t v33 = *(void *)(*(void *)(v67 - 8) + 64);
  if (v26 != v29)
  {
    unint64_t v37 = (v13 + v23) & 0xFFFFFFFFFFFFFFF8;
    if ((v28 & 0x80000000) != 0)
    {
      unint64_t v59 = v32;
      if (v27 < 2)
      {
        uint64_t v34 = v30;
        goto LABEL_29;
      }
      uint64_t v34 = v30;
      if ((*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v18 + 48))((v31 + ((v37 + 143) & 0xFFFFFFFFFFFFFFF8)) & v30, v27, v67) < 2)goto LABEL_29; {
      size_t v40 = v59 + v33 + 3;
      }
      memcpy((void *)v22, (const void *)v23, v40);
      BOOL v39 = 0;
LABEL_23:
      uint64_t result = v66;
      goto LABEL_38;
    }
    uint64_t v34 = v30;
    unint64_t v38 = *(void *)(v37 + 128);
    if (v38 >= 0xFFFFFFFF) {
      LODWORD(v38) = -1;
    }
    if (v38 == -1) {
      goto LABEL_25;
    }
    goto LABEL_19;
  }
  uint64_t v34 = v30;
  if (v24 < v25)
  {
    unint64_t v35 = v32;
    int v36 = (*(uint64_t (**)(unint64_t))(v10 + 48))((v63 + v23) & v62);
    unint64_t v32 = v35;
    if (!v36) {
      goto LABEL_25;
    }
    goto LABEL_19;
  }
  unint64_t v43 = v32;
  int v44 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v23, v24, v65);
  unint64_t v32 = v43;
  if (v44)
  {
LABEL_19:
    BOOL v39 = v27 == 0;
    size_t v40 = v32 + v33 + 3;
    if (v27) {
      size_t v41 = v32 + v33 + 3;
    }
    else {
      size_t v41 = v32 + v33 + 4;
    }
    memcpy((void *)v22, (const void *)v23, v41);
    goto LABEL_23;
  }
LABEL_25:
  unint64_t v59 = v32;
  unint64_t v37 = (v13 + v23) & 0xFFFFFFFFFFFFFFF8;
LABEL_29:
  size_t v45 = v33;
  ((void (*)(uint64_t, uint64_t, uint64_t))v61)(v22, v23, v65);
  ((void (*)(unint64_t, unint64_t, uint64_t))v60)((v63 + v22) & v62, (v63 + v23) & v62, v64);
  unint64_t v46 = (v13 + v22) & 0xFFFFFFFFFFFFFFF8;
  *(_OWORD *)unint64_t v46 = *(_OWORD *)v37;
  long long v47 = *(_OWORD *)(v37 + 64);
  long long v49 = *(_OWORD *)(v37 + 16);
  long long v48 = *(_OWORD *)(v37 + 32);
  *(_OWORD *)(v46 + 48) = *(_OWORD *)(v37 + 48);
  *(_OWORD *)(v46 + 64) = v47;
  *(_OWORD *)(v46 + 16) = v49;
  *(_OWORD *)(v46 + 32) = v48;
  long long v51 = *(_OWORD *)(v37 + 96);
  long long v50 = *(_OWORD *)(v37 + 112);
  long long v52 = *(_OWORD *)(v37 + 80);
  *(void *)(v46 + 128) = *(void *)(v37 + 128);
  *(_OWORD *)(v46 + 96) = v51;
  *(_OWORD *)(v46 + 112) = v50;
  *(_OWORD *)(v46 + 80) = v52;
  uint64_t v53 = (void *)((v46 + 143) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v54 = (void *)((v37 + 143) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v53 = *v54;
  int v55 = (char *)(((unint64_t)v53 + v31) & v34);
  int v56 = (const void *)(((unint64_t)v54 + v31) & v34);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v19 + 48))(v56, 1, v67))
  {
    BOOL v39 = v27 == 0;
    if (v27) {
      size_t v57 = v45;
    }
    else {
      size_t v57 = v45 + 1;
    }
    memcpy(v55, v56, v57);
  }
  else
  {
    (*(void (**)(char *, const void *, uint64_t))(v19 + 32))(v55, v56, v67);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v19 + 56))(v55, 0, 1, v67);
    BOOL v39 = v27 == 0;
    if (v27) {
      size_t v57 = v45;
    }
    else {
      size_t v57 = v45 + 1;
    }
  }
  uint64_t result = v66;
  int v58 = &v55[v57];
  *int v58 = *((unsigned char *)v56 + v57);
  v58[1] = *((unsigned char *)v56 + v57 + 1);
  v58[2] = *((unsigned char *)v56 + v57 + 2);
  size_t v40 = v59 + v45 + 3;
LABEL_38:
  *(void *)(((v22 | 7) + v40 + v39) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((v23 | 7) + v40 + v39) & 0xFFFFFFFFFFFFFFF8);
  return result;
}

uint64_t assignWithTake for TableContentVisitor(uint64_t a1, uint64_t a2)
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = v5;
  uint64_t v109 = AssociatedTypeWitness;
  long long v100 = *(void (**)(uint64_t, uint64_t))(v5 + 40);
  v100(a1, a2);
  uint64_t v7 = *(void *)(v5 + 64);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v8 = swift_getAssociatedTypeWitness();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = v9;
  int v11 = *(_DWORD *)(v9 + 80);
  uint64_t v12 = v7 + v11;
  unint64_t v107 = ~(unint64_t)v11;
  uint64_t v108 = v8;
  double v99 = *(void (**)(unint64_t, unint64_t))(v9 + 40);
  v99((v12 + a1) & v107, (v12 + a2) & v107);
  uint64_t v13 = (v12 & v107) + *(void *)(v9 + 64) + 7;
  uint64_t v104 = a1;
  unint64_t v14 = (v13 + a1) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v15 = (v13 + a2) & 0xFFFFFFFFFFFFFFF8;
  char v16 = *(unsigned char *)(v15 + 8);
  *(void *)unint64_t v14 = *(void *)v15;
  *(unsigned char *)(v14 + 8) = v16;
  int v17 = (*(_DWORD *)(v6 + 80) | v11) & 0xF8;
  uint64_t v103 = swift_getAssociatedTypeWitness();
  uint64_t v18 = *(void *)(v103 - 8);
  uint64_t v19 = *(unsigned __int8 *)(v18 + 80);
  uint64_t v20 = v17 | v19 | 7;
  uint64_t v21 = (v20 + 9 + v14) & ~v20;
  uint64_t v22 = (v20 + 9 + v15) & ~v20;
  uint64_t v23 = v6;
  uint64_t v24 = *(unsigned int *)(v6 + 84);
  uint64_t v25 = *(unsigned int *)(v10 + 84);
  if (v25 <= v24) {
    unsigned int v26 = *(_DWORD *)(v6 + 84);
  }
  else {
    unsigned int v26 = *(_DWORD *)(v10 + 84);
  }
  unsigned int v27 = *(_DWORD *)(v18 + 84);
  unsigned int v28 = v27 - 1;
  if (!v27) {
    unsigned int v28 = 0;
  }
  if (v26 > v28) {
    unsigned int v28 = v26;
  }
  if (v28 <= 0x7FFFFFFF) {
    int v29 = 0x7FFFFFFF;
  }
  else {
    int v29 = v28;
  }
  uint64_t v101 = *(void *)(v103 - 8);
  uint64_t v102 = ~v19;
  uint64_t v30 = v19 + 8;
  unint64_t v106 = (v19 + 8 + (((v13 & 0xFFFFFFFFFFFFFFF8) + 143) & 0xFFFFFFFFFFFFFFF8)) & ~v19;
  size_t v105 = *(void *)(v101 + 64);
  if (v26 != v29)
  {
    unint64_t v33 = (v13 + v21) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v31 = v21;
    if ((v28 & 0x80000000) != 0)
    {
      unsigned int v98 = *(_DWORD *)(v18 + 84);
      if (v27 < 2) {
        goto LABEL_29;
      }
      uint64_t v96 = v19 + 8;
      unint64_t v42 = (v30 + ((v33 + 143) & 0xFFFFFFFFFFFFFFF8)) & v102;
      unint64_t v43 = *(uint64_t (**)(unint64_t, void, uint64_t))(v18 + 48);
      unsigned int v97 = v43(v42, v27, v103);
      unsigned int v44 = v43((v96 + ((((v13 + v22) & 0xFFFFFFFFFFFFFFF8) + 143) & 0xFFFFFFFFFFFFFFF8)) & v102, v27, v103);
      if (v97 >= 2)
      {
        uint64_t v30 = v96;
        if (v44 >= 2) {
          goto LABEL_25;
        }
        goto LABEL_37;
      }
      uint64_t v30 = v96;
      if (v44 < 2) {
        goto LABEL_29;
      }
    }
    else
    {
      unint64_t v34 = *(void *)(v33 + 128);
      unint64_t v35 = *(void *)(((v13 + v22) & 0xFFFFFFFFFFFFFFF8) + 128);
      if (v35 >= 0xFFFFFFFF) {
        LODWORD(v35) = -1;
      }
      int v36 = v35 + 1;
      if (v34 <= 0xFFFFFFFE) {
        goto LABEL_24;
      }
      unsigned int v98 = *(_DWORD *)(v18 + 84);
      if (v35 == -1) {
        goto LABEL_29;
      }
    }
LABEL_54:
    (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v31, v109);
    (*(void (**)(unint64_t, uint64_t))(v10 + 8))((v12 + v31) & v107, v108);
    unint64_t v88 = (v13 + v31) & 0xFFFFFFFFFFFFFFF8;
    outlined consume of Environment<Bool?>.Content(*(void *)v88, *(unsigned __int8 *)(v88 + 8));
    outlined consume of Environment<Bool?>.Content(*(void *)(v88 + 16), *(unsigned __int8 *)(v88 + 24));
    outlined consume of Environment<Bool?>.Content(*(void *)(v88 + 32), *(unsigned __int8 *)(v88 + 40));
    int v89 = *(unsigned __int8 *)(v88 + 123);
    if (v89 == 2)
    {
      swift_release();
      if (*(void *)(v88 + 64))
      {
        swift_release();
        swift_release();
        swift_bridgeObjectRelease();
      }
      uint64_t v91 = v88 + 80;
      size_t v41 = v105;
      unint64_t v40 = v106;
      uint64_t v90 = v101;
      if ((*(unsigned char *)(v88 + 120) & 1) == 0) {
        goto LABEL_68;
      }
      swift_bridgeObjectRelease();
    }
    else if (v89 == 1)
    {
      swift_release();
      size_t v41 = v105;
      unint64_t v40 = v106;
      uint64_t v90 = v101;
      if (!*(unsigned char *)(v88 + 96))
      {
        uint64_t v91 = v88 + 56;
        goto LABEL_68;
      }
    }
    else
    {
      size_t v41 = v105;
      unint64_t v40 = v106;
      uint64_t v90 = v101;
      if (!*(unsigned char *)(v88 + 123))
      {
        swift_bridgeObjectRelease();
        uint64_t v91 = v88 + 72;
LABEL_68:
        __swift_destroy_boxed_opaque_existential_1(v91);
      }
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    unint64_t v93 = (v30 + ((v88 + 143) & 0xFFFFFFFFFFFFFFF8)) & v102;
    if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v90 + 48))(v93, 1, v103)) {
      (*(void (**)(unint64_t, uint64_t))(v90 + 8))(v93, v103);
    }
    BOOL v38 = v98 == 0;
    BOOL v39 = v98 == 0;
    goto LABEL_72;
  }
  if (v24 >= v25)
  {
    unint64_t v37 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 48);
    uint64_t v31 = v21;
    int v32 = v37(v21, v24, v109);
  }
  else
  {
    uint64_t v31 = v21;
    int v32 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v10 + 48))((v12 + v21) & v107, v25, v108);
  }
  if (!v32)
  {
    if (v24 >= v25) {
      int v68 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v23 + 48))(v22, v24, v109);
    }
    else {
      int v68 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v10 + 48))((v12 + v22) & v107, v25, v108);
    }
    unsigned int v98 = v27;
    if (v68) {
      goto LABEL_54;
    }
LABEL_29:
    ((void (*)(uint64_t, uint64_t, uint64_t))v100)(v31, v22, v109);
    ((void (*)(unint64_t, unint64_t, uint64_t))v99)((v12 + v31) & v107, (v12 + v22) & v107, v108);
    unint64_t v45 = (v13 + v31) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v46 = v22;
    unint64_t v47 = (v13 + v22) & 0xFFFFFFFFFFFFFFF8;
    char v48 = *(unsigned char *)(v47 + 8);
    uint64_t v49 = *(void *)v45;
    uint64_t v50 = *(unsigned __int8 *)(v45 + 8);
    *(void *)unint64_t v45 = *(void *)v47;
    *(unsigned char *)(v45 + 8) = v48;
    outlined consume of Environment<Bool?>.Content(v49, v50);
    char v51 = *(unsigned char *)(v47 + 24);
    uint64_t v52 = *(void *)(v45 + 16);
    uint64_t v53 = *(unsigned __int8 *)(v45 + 24);
    *(void *)(v45 + 16) = *(void *)(v47 + 16);
    *(unsigned char *)(v45 + 24) = v51;
    outlined consume of Environment<Bool?>.Content(v52, v53);
    char v54 = *(unsigned char *)(v47 + 40);
    uint64_t v55 = *(void *)(v45 + 32);
    uint64_t v56 = *(unsigned __int8 *)(v45 + 40);
    *(void *)(v45 + 32) = *(void *)(v47 + 32);
    *(unsigned char *)(v45 + 40) = v54;
    outlined consume of Environment<Bool?>.Content(v55, v56);
    if (v45 != v47)
    {
      outlined destroy of TableRowView.Storage(v45 + 48);
      *(_OWORD *)(v45 + 48) = *(_OWORD *)(v47 + 48);
      long long v58 = *(_OWORD *)(v47 + 80);
      long long v57 = *(_OWORD *)(v47 + 96);
      long long v59 = *(_OWORD *)(v47 + 64);
      *(_OWORD *)(v45 + 108) = *(_OWORD *)(v47 + 108);
      *(_OWORD *)(v45 + 80) = v58;
      *(_OWORD *)(v45 + 96) = v57;
      *(_OWORD *)(v45 + 64) = v59;
    }
    *(void *)(v45 + 128) = *(void *)(v47 + 128);
    swift_bridgeObjectRelease();
    unint64_t v60 = (void *)((v45 + 143) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v61 = (void *)((v47 + 143) & 0xFFFFFFFFFFFFFFF8);
    *unint64_t v60 = *v61;
    swift_bridgeObjectRelease();
    unint64_t v62 = (char *)(((unint64_t)v60 + v30) & v102);
    uint64_t v63 = (char *)(((unint64_t)v61 + v30) & v102);
    uint64_t v64 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v101 + 48);
    int v65 = v64(v62, 1, v103);
    int v66 = v64(v63, 1, v103);
    size_t v41 = v105;
    if (v65)
    {
      unint64_t v40 = v106;
      unsigned int v67 = v98;
      if (!v66)
      {
        (*(void (**)(char *, char *, uint64_t))(v101 + 32))(v62, v63, v103);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v101 + 56))(v62, 0, 1, v103);
LABEL_48:
        uint64_t v84 = v104;
        BOOL v38 = v67 == 0;
        BOOL v39 = v67 == 0;
        if (v38) {
          size_t v85 = v105 + 1;
        }
        else {
          size_t v85 = v105;
        }
        long long v86 = &v62[v85];
        long long v87 = &v63[v85];
        char *v86 = *v87;
        v86[1] = v87[1];
        v86[2] = v87[2];
        uint64_t v22 = v46;
        goto LABEL_75;
      }
    }
    else
    {
      unint64_t v40 = v106;
      unsigned int v67 = v98;
      if (!v66)
      {
        (*(void (**)(char *, char *, uint64_t))(v101 + 40))(v62, v63, v103);
        goto LABEL_48;
      }
      (*(void (**)(char *, uint64_t))(v101 + 8))(v62, v103);
    }
    if (v67) {
      size_t v83 = v105;
    }
    else {
      size_t v83 = v105 + 1;
    }
    memcpy(v62, v63, v83);
    goto LABEL_48;
  }
  if (v24 >= v25)
  {
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v23 + 48))(v22, v24, v109)) {
      goto LABEL_25;
    }
    goto LABEL_37;
  }
  int v36 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v10 + 48))((v12 + v22) & v107, v25, v108);
LABEL_24:
  if (v36)
  {
LABEL_25:
    BOOL v38 = v27 == 0;
    BOOL v39 = v27 == 0;
    size_t v41 = v105;
    unint64_t v40 = v106;
LABEL_72:
    unint64_t v94 = v40 + v41;
    if (v38) {
      ++v94;
    }
    memcpy((void *)v31, (const void *)v22, v94 + 3);
    uint64_t v84 = v104;
    goto LABEL_75;
  }
LABEL_37:
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v23 + 32))(v31, v22, v109);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v10 + 32))((v12 + v31) & v107, (v12 + v22) & v107, v108);
  unint64_t v69 = (v13 + v31) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v70 = v22;
  unint64_t v71 = (v13 + v22) & 0xFFFFFFFFFFFFFFF8;
  *(_OWORD *)unint64_t v69 = *(_OWORD *)v71;
  long long v72 = *(_OWORD *)(v71 + 64);
  long long v74 = *(_OWORD *)(v71 + 16);
  long long v73 = *(_OWORD *)(v71 + 32);
  *(_OWORD *)(v69 + 48) = *(_OWORD *)(v71 + 48);
  *(_OWORD *)(v69 + 64) = v72;
  *(_OWORD *)(v69 + 16) = v74;
  *(_OWORD *)(v69 + 32) = v73;
  long long v76 = *(_OWORD *)(v71 + 96);
  long long v75 = *(_OWORD *)(v71 + 112);
  long long v77 = *(_OWORD *)(v71 + 80);
  *(void *)(v69 + 128) = *(void *)(v71 + 128);
  *(_OWORD *)(v69 + 96) = v76;
  *(_OWORD *)(v69 + 112) = v75;
  *(_OWORD *)(v69 + 80) = v77;
  unint64_t v78 = (void *)((v69 + 143) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v79 = (void *)((v71 + 143) & 0xFFFFFFFFFFFFFFF8);
  *unint64_t v78 = *v79;
  uint64_t v80 = (char *)(((unint64_t)v78 + v30) & v102);
  uint64_t v81 = (const void *)(((unint64_t)v79 + v30) & v102);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v101 + 48))(v81, 1, v103))
  {
    BOOL v38 = v27 == 0;
    BOOL v39 = v27 == 0;
    size_t v41 = v105;
    if (v38) {
      size_t v82 = v105 + 1;
    }
    else {
      size_t v82 = v105;
    }
    memcpy(v80, v81, v82);
  }
  else
  {
    (*(void (**)(char *, const void *, uint64_t))(v101 + 32))(v80, v81, v103);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v101 + 56))(v80, 0, 1, v103);
    BOOL v38 = v27 == 0;
    BOOL v39 = v27 == 0;
    size_t v41 = v105;
    if (v38) {
      size_t v82 = v105 + 1;
    }
    else {
      size_t v82 = v105;
    }
  }
  uint64_t v84 = v104;
  unint64_t v40 = v106;
  uint64_t v92 = &v80[v82];
  *uint64_t v92 = *((unsigned char *)v81 + v82);
  v92[1] = *((unsigned char *)v81 + v82 + 1);
  v92[2] = *((unsigned char *)v81 + v82 + 2);
  uint64_t v22 = v70;
LABEL_75:
  *(void *)(((v31 | 7) + v40 + v41 + v39 + 3) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((v22 | 7) + v40 + v41 + v39 + 3) & 0xFFFFFFFFFFFFFFF8);
  swift_bridgeObjectRelease();
  return v84;
}

uint64_t getEnumTagSinglePayload for TableContentVisitor(_DWORD *a1, unsigned int a2)
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v2 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v3 = *(unsigned int *)(v2 + 84);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v4 = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v44 = v5;
  uint64_t v6 = *(unsigned int *)(v5 + 84);
  if (v6 <= v3) {
    unsigned int v7 = v3;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v5 + 84);
  }
  uint64_t v8 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  unsigned int v9 = *(_DWORD *)(v8 + 84);
  unsigned int v10 = v9 - 1;
  if (!v9) {
    unsigned int v10 = 0;
  }
  if (v7 > v10) {
    unsigned int v10 = v7;
  }
  if (v10 <= 0x7FFFFFFF) {
    int v11 = 0x7FFFFFFF;
  }
  else {
    int v11 = v10;
  }
  if (v11 - 1 <= v7) {
    unsigned int v12 = v7;
  }
  else {
    unsigned int v12 = v11 - 1;
  }
  if (v12 <= 0x7FFFFFFF) {
    unsigned int v13 = 0x7FFFFFFF;
  }
  else {
    unsigned int v13 = v12;
  }
  uint64_t v14 = *(unsigned __int8 *)(v8 + 80);
  if (v9) {
    uint64_t v15 = 3;
  }
  else {
    uint64_t v15 = 4;
  }
  if (!a2) {
    return 0;
  }
  uint64_t v16 = *(_DWORD *)(v5 + 80);
  uint64_t v17 = *(void *)(v2 + 64) + v16;
  uint64_t v18 = (v17 & ~v16) + *(void *)(v5 + 64);
  unint64_t v19 = (v18 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v20 = (*(_DWORD *)(v2 + 80) | *(_DWORD *)(v5 + 80)) & 0xF8 | v14 | 7;
  unint64_t v21 = v15 + *(void *)(v8 + 64) + ((v14 + 8 + ((v19 + 143) & 0xFFFFFFFFFFFFFFF8)) & ~v14);
  uint64_t v22 = a1;
  if (v13 < a2)
  {
    unint64_t v23 = ((v21 + ((v20 + v19 + 9) & ~v20) + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v23 & 0xFFFFFFF8) != 0) {
      unsigned int v24 = 2;
    }
    else {
      unsigned int v24 = a2 - v13 + 1;
    }
    if (v24 >= 0x10000) {
      unsigned int v25 = 4;
    }
    else {
      unsigned int v25 = 2;
    }
    if (v24 < 0x100) {
      unsigned int v25 = 1;
    }
    if (v24 >= 2) {
      uint64_t v26 = v25;
    }
    else {
      uint64_t v26 = 0;
    }
    switch(v26)
    {
      case 1:
        int v27 = *((unsigned __int8 *)a1 + v23);
        if (!*((unsigned char *)a1 + v23)) {
          break;
        }
        goto LABEL_37;
      case 2:
        int v27 = *(unsigned __int16 *)((char *)a1 + v23);
        if (*(_WORD *)((char *)a1 + v23)) {
          goto LABEL_37;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x1882E0CF8);
      case 4:
        int v27 = *(_DWORD *)((char *)a1 + v23);
        if (!v27) {
          break;
        }
LABEL_37:
        int v28 = v27 - 1;
        if ((v23 & 0xFFFFFFF8) != 0)
        {
          int v28 = 0;
          int v29 = *a1;
        }
        else
        {
          int v29 = 0;
        }
        return v13 + (v29 | v28) + 1;
      default:
        break;
    }
  }
  if (v7 == v13)
  {
    if (v3 >= v6)
    {
      uint64_t v30 = *(uint64_t (**)(_DWORD *, uint64_t, uint64_t))(v2 + 48);
      uint64_t v31 = v3;
      uint64_t v32 = AssociatedTypeWitness;
    }
    else
    {
      uint64_t v22 = (_DWORD *)(((unint64_t)a1 + v17) & ~v16);
      uint64_t v30 = *(uint64_t (**)(_DWORD *, uint64_t, uint64_t))(v44 + 48);
      uint64_t v31 = v6;
      uint64_t v32 = v4;
    }
    return v30(v22, v31, v32);
  }
  unint64_t v33 = ((((unint64_t)a1 + v18 + 7) & 0xFFFFFFFFFFFFFFF8) + v20 + 9) & ~v20;
  if (v11 - 1 == v13)
  {
    if (v7 != v11)
    {
      unint64_t v34 = (v18 + 7 + v33) & 0xFFFFFFFFFFFFFFF8;
      if ((v10 & 0x80000000) != 0)
      {
        if (v9 >= 2)
        {
          unsigned int v39 = (*(uint64_t (**)(unint64_t))(v8 + 48))((v14 + 8 + ((v34 + 143) & 0xFFFFFFFFFFFFFFF8)) & ~v14);
          if (v39 >= 2)
          {
            BOOL v40 = v39 != 1;
            uint64_t result = v39 - 2;
            if (result != 0 && v40) {
              return result;
            }
          }
        }
      }
      else
      {
        unint64_t v35 = *(void *)(v34 + 128);
        if (v35 >= 0xFFFFFFFF) {
          LODWORD(v35) = -1;
        }
        unsigned int v36 = v35 + 1;
        uint64_t result = v36 - 1;
        if (v36 > 1) {
          return result;
        }
      }
    }
    return 0;
  }
  unint64_t v38 = *(void *)(((v33 | 7) + v21) & 0xFFFFFFFFFFFFFFF8);
  if (v38 >= 0xFFFFFFFF) {
    LODWORD(v38) = -1;
  }
  return (v38 + 1);
}

void storeEnumTagSinglePayload for TableContentVisitor(unsigned int *a1, unsigned int a2, unsigned int a3)
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v3 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v4 = *(unsigned int *)(v3 + 84);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v51 = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(v51 - 8);
  uint64_t v6 = *(unsigned int *)(v5 + 84);
  if (v6 <= v4) {
    unsigned int v7 = v4;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v5 + 84);
  }
  int v8 = 0;
  uint64_t v9 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  uint64_t v10 = v9;
  unsigned int v11 = *(_DWORD *)(v9 + 84);
  unsigned int v12 = v11 - 1;
  if (!v11) {
    unsigned int v12 = 0;
  }
  uint64_t v13 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v14 = *(void *)(v9 + 64);
  if (v7 <= v12) {
    unsigned int v15 = v12;
  }
  else {
    unsigned int v15 = v7;
  }
  if (v15 <= 0x7FFFFFFF) {
    unsigned int v16 = 0x7FFFFFFF;
  }
  else {
    unsigned int v16 = v15;
  }
  if (v16 - 1 <= v7) {
    unsigned int v17 = v7;
  }
  else {
    unsigned int v17 = v16 - 1;
  }
  if (v17 <= 0x7FFFFFFF) {
    unsigned int v17 = 0x7FFFFFFF;
  }
  uint64_t v18 = *(_DWORD *)(v5 + 80);
  uint64_t v19 = *(void *)(v3 + 64) + v18;
  size_t v20 = (v19 & ~v18) + *(void *)(v5 + 64);
  unint64_t v21 = (v20 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v22 = (*(_DWORD *)(v3 + 80) | *(_DWORD *)(v5 + 80)) & 0xF8 | v13 | 7;
  uint64_t v23 = (v22 + v21 + 9) & ~v22;
  unint64_t v24 = (v21 + 143) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v25 = v13 + 8;
  uint64_t v26 = (v13 + 8 + v24) & ~v13;
  if (v11) {
    uint64_t v27 = v14;
  }
  else {
    uint64_t v27 = v14 + 1;
  }
  uint64_t v28 = v27 + v26;
  size_t v29 = ((v28 + v23 + 10) & 0xFFFFFFFFFFFFFFF8) + 8;
  if (v17 < a3)
  {
    if (((v28 + v23 + 10) & 0xFFFFFFF8) == 0xFFFFFFF8) {
      unsigned int v30 = a3 - v17 + 1;
    }
    else {
      unsigned int v30 = 2;
    }
    if (v30 >= 0x10000) {
      int v31 = 4;
    }
    else {
      int v31 = 2;
    }
    if (v30 < 0x100) {
      int v31 = 1;
    }
    if (v30 >= 2) {
      int v8 = v31;
    }
    else {
      int v8 = 0;
    }
  }
  if (a2 > v17)
  {
    if (v29) {
      int v32 = 1;
    }
    else {
      int v32 = a2 - v17;
    }
    if (v29)
    {
      unsigned int v33 = ~v17 + a2;
      bzero(a1, v29);
      *a1 = v33;
    }
    switch(v8)
    {
      case 1:
        *((unsigned char *)a1 + v29) = v32;
        return;
      case 2:
        *(_WORD *)((char *)a1 + v29) = v32;
        return;
      case 3:
        goto LABEL_90;
      case 4:
        *(unsigned int *)((char *)a1 + v29) = v32;
        return;
      default:
        return;
    }
  }
  uint64_t v34 = ~v13;
  unint64_t v35 = a1;
  switch(v8)
  {
    case 1:
      *((unsigned char *)a1 + v29) = 0;
      if (!a2) {
        return;
      }
      goto LABEL_47;
    case 2:
      *(_WORD *)((char *)a1 + v29) = 0;
      if (!a2) {
        return;
      }
      goto LABEL_47;
    case 3:
LABEL_90:
      __break(1u);
      JUMPOUT(0x1882E1308);
    case 4:
      *(unsigned int *)((char *)a1 + v29) = 0;
      goto LABEL_46;
    default:
LABEL_46:
      if (!a2) {
        return;
      }
LABEL_47:
      if (v7 == v17)
      {
        if (v4 >= v6)
        {
          unsigned int v36 = *(void (**)(_DWORD *, uint64_t, uint64_t, uint64_t))(v3 + 56);
          uint64_t v37 = a2;
          uint64_t v38 = v4;
          uint64_t v39 = AssociatedTypeWitness;
        }
        else
        {
          unint64_t v35 = (_DWORD *)(((unint64_t)a1 + v19) & ~v18);
          unsigned int v36 = *(void (**)(_DWORD *, uint64_t, uint64_t, uint64_t))(v5 + 56);
          uint64_t v37 = a2;
          uint64_t v38 = v6;
          uint64_t v39 = v51;
        }
        v36(v35, v37, v38, v39);
        return;
      }
      unint64_t v40 = ((((unint64_t)a1 + v20 + 7) & 0xFFFFFFFFFFFFFFF8) + v22 + 9) & ~v22;
      if (v16 - 1 != v17)
      {
        unint64_t v45 = ((v40 | 7) + v28 + 3) & 0xFFFFFFFFFFFFFFF8;
        if ((a2 & 0x80000000) != 0) {
          uint64_t v46 = a2 ^ 0x80000000;
        }
        else {
          uint64_t v46 = a2 - 1;
        }
        goto LABEL_77;
      }
      if (a2 + 1 > v16)
      {
        size_t v41 = (v28 + 3);
        if (v41 != 3 && v28 < 0xFFFFFFFD) {
          int v42 = -1;
        }
        else {
          int v42 = ~(-1 << (8 * (v28 + 3)));
        }
        if (v28 != -3)
        {
          int v43 = v42 & (a2 - v16);
          if (v41 <= 3) {
            int v44 = v28 + 3;
          }
          else {
            int v44 = 4;
          }
          bzero((void *)v40, v41);
          switch(v44)
          {
            case 2:
              *(_WORD *)unint64_t v40 = v43;
              break;
            case 3:
              *(_WORD *)unint64_t v40 = v43;
              *(unsigned char *)(v40 + 2) = BYTE2(v43);
              break;
            case 4:
              *(_DWORD *)unint64_t v40 = v43;
              break;
            default:
              *(unsigned char *)unint64_t v40 = v43;
              break;
          }
        }
        return;
      }
      if (a2 == -1) {
        return;
      }
      if (v7 == v16)
      {
        if (v20)
        {
          if (v20 <= 3) {
            int v47 = ~(-1 << (8 * v20));
          }
          else {
            int v47 = -1;
          }
          int v48 = v47 & (a2 - v7);
          bzero((void *)(((((unint64_t)a1 + v20 + 7) & 0xFFFFFFFFFFFFFFF8) + v22 + 9) & ~v22), v20);
          *(_DWORD *)unint64_t v40 = v48;
        }
        return;
      }
      unint64_t v45 = (v20 + 7 + v40) & 0xFFFFFFFFFFFFFFF8;
      if ((v15 & 0x80000000) == 0)
      {
        if (((a2 + 1) & 0x80000000) == 0)
        {
          *(void *)(v45 + 128) = a2;
          return;
        }
        *(_OWORD *)(v45 + 104) = 0u;
        uint64_t v46 = a2 - 0x7FFFFFFF;
        *(_OWORD *)(v45 + 88) = 0u;
        *(_OWORD *)(v45 + 72) = 0u;
        *(_OWORD *)(v45 + 56) = 0u;
        *(_OWORD *)(v45 + 40) = 0u;
        *(_OWORD *)(v45 + 24) = 0u;
        *(_OWORD *)(v45 + 8) = 0u;
        *(_OWORD *)(v45 + 120) = 0u;
LABEL_77:
        *(void *)unint64_t v45 = v46;
        return;
      }
      if (v11 >= 2)
      {
        unint64_t v49 = (v25 + ((v45 + 143) & 0xFFFFFFFFFFFFFFF8)) & v34;
        uint64_t v50 = *(void (**)(unint64_t, void))(v10 + 56);
        v50(v49, a2 + 2);
      }
      return;
  }
}

uint64_t type metadata accessor for TableContentVisitor()
{
  return __swift_instantiateGenericMetadata();
}

ValueMetadata *type metadata accessor for MakeCellFormulas()
{
  return &type metadata for MakeCellFormulas;
}

void *initializeBufferWithCopyOfBuffer for TableCellFormula(void *a1, void *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v29 = *a2;
    *a1 = *a2;
    a1 = (void *)(v29 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    uint64_t v7 = type metadata accessor for UUID();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = a3[5];
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = *(void *)v10;
    uint64_t v12 = *((void *)v10 + 1);
    uint64_t v13 = *((void *)v10 + 2);
    uint64_t v14 = *((void *)v10 + 3);
    char v15 = v10[32];
    outlined copy of TableColumnCustomizationID.Base(*(void *)v10, v12, v13, v14, v15);
    *(void *)uint64_t v9 = v11;
    *((void *)v9 + 1) = v12;
    *((void *)v9 + 2) = v13;
    *((void *)v9 + 3) = v14;
    uint64_t v16 = a3[6];
    uint64_t v17 = a3[7];
    char v18 = *((unsigned char *)a2 + v16);
    unsigned char v9[32] = v15;
    *((unsigned char *)a1 + v16) = v18;
    uint64_t v19 = (char *)a1 + v17;
    size_t v20 = (char *)a2 + v17;
    long long v21 = *((_OWORD *)v20 + 1);
    *(_OWORD *)uint64_t v19 = *(_OWORD *)v20;
    *((_OWORD *)v19 + 1) = v21;
    unsigned char v19[32] = v20[32];
    uint64_t v22 = a3[9];
    *((unsigned char *)a1 + a3[8]) = *((unsigned char *)a2 + a3[8]);
    uint64_t v23 = (void *)((char *)a1 + v22);
    unint64_t v24 = (void *)((char *)a2 + v22);
    uint64_t v25 = v24[1];
    *uint64_t v23 = *v24;
    v23[1] = v25;
    uint64_t v26 = a3[10];
    uint64_t v27 = (char *)a1 + v26;
    uint64_t v28 = (char *)a2 + v26;
    *(void *)uint64_t v27 = *(void *)v28;
    char v27[8] = v28[8];
  }
  swift_retain();
  return a1;
}

uint64_t destroy for TableCellFormula(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  uint64_t v5 = a1 + *(int *)(a2 + 20);
  outlined consume of TableColumnCustomizationID.Base(*(void *)v5, *(void *)(v5 + 8), *(void *)(v5 + 16), *(void *)(v5 + 24), *(unsigned char *)(v5 + 32));

  return swift_release();
}

uint64_t initializeWithCopy for TableCellFormula(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = *(void *)v9;
  uint64_t v11 = *(void *)(v9 + 8);
  uint64_t v12 = *(void *)(v9 + 16);
  uint64_t v13 = *(void *)(v9 + 24);
  char v14 = *(unsigned char *)(v9 + 32);
  outlined copy of TableColumnCustomizationID.Base(*(void *)v9, v11, v12, v13, v14);
  *(void *)uint64_t v8 = v10;
  *(void *)(v8 + 8) = v11;
  *(void *)(v8 + 16) = v12;
  *(void *)(v8 + 24) = v13;
  uint64_t v15 = a3[6];
  uint64_t v16 = a3[7];
  char v17 = *(unsigned char *)(a2 + v15);
  *(unsigned char *)(v8 + 32) = v14;
  *(unsigned char *)(a1 + v15) = v17;
  uint64_t v18 = a1 + v16;
  uint64_t v19 = a2 + v16;
  long long v20 = *(_OWORD *)(v19 + 16);
  *(_OWORD *)uint64_t v18 = *(_OWORD *)v19;
  *(_OWORD *)(v18 + 16) = v20;
  *(unsigned char *)(v18 + 32) = *(unsigned char *)(v19 + 32);
  uint64_t v21 = a3[9];
  *(unsigned char *)(a1 + a3[8]) = *(unsigned char *)(a2 + a3[8]);
  uint64_t v22 = (void *)(a1 + v21);
  uint64_t v23 = (void *)(a2 + v21);
  uint64_t v24 = v23[1];
  *uint64_t v22 = *v23;
  v22[1] = v24;
  uint64_t v25 = a3[10];
  uint64_t v26 = a1 + v25;
  uint64_t v27 = a2 + v25;
  *(void *)uint64_t v26 = *(void *)v27;
  *(unsigned char *)(v26 + 8) = *(unsigned char *)(v27 + 8);
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for TableCellFormula(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = *(void *)v9;
  uint64_t v11 = *(void *)(v9 + 8);
  uint64_t v12 = *(void *)(v9 + 16);
  uint64_t v13 = *(void *)(v9 + 24);
  char v14 = *(unsigned char *)(v9 + 32);
  outlined copy of TableColumnCustomizationID.Base(*(void *)v9, v11, v12, v13, v14);
  uint64_t v15 = *(void *)v8;
  uint64_t v16 = *(void *)(v8 + 8);
  uint64_t v17 = *(void *)(v8 + 16);
  uint64_t v18 = *(void *)(v8 + 24);
  char v19 = *(unsigned char *)(v8 + 32);
  *(void *)uint64_t v8 = v10;
  *(void *)(v8 + 8) = v11;
  *(void *)(v8 + 16) = v12;
  *(void *)(v8 + 24) = v13;
  *(unsigned char *)(v8 + 32) = v14;
  outlined consume of TableColumnCustomizationID.Base(v15, v16, v17, v18, v19);
  *(unsigned char *)(a1 + a3[6]) = *(unsigned char *)(a2 + a3[6]);
  uint64_t v20 = a3[7];
  uint64_t v21 = a1 + v20;
  uint64_t v22 = a2 + v20;
  char v23 = *(unsigned char *)(v22 + 32);
  long long v24 = *(_OWORD *)(v22 + 16);
  *(_OWORD *)uint64_t v21 = *(_OWORD *)v22;
  *(_OWORD *)(v21 + 16) = v24;
  *(unsigned char *)(v21 + 32) = v23;
  *(unsigned char *)(a1 + a3[8]) = *(unsigned char *)(a2 + a3[8]);
  uint64_t v25 = a3[9];
  uint64_t v26 = (void *)(a1 + v25);
  uint64_t v27 = (void *)(a2 + v25);
  uint64_t v28 = v27[1];
  *uint64_t v26 = *v27;
  v26[1] = v28;
  swift_retain();
  swift_release();
  uint64_t v29 = a3[10];
  uint64_t v30 = a1 + v29;
  int v31 = (uint64_t *)(a2 + v29);
  uint64_t v32 = *v31;
  *(unsigned char *)(v30 + 8) = *((unsigned char *)v31 + 8);
  *(void *)uint64_t v30 = v32;
  return a1;
}

uint64_t initializeWithTake for TableCellFormula(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a3[6];
  uint64_t v9 = a1 + v7;
  uint64_t v10 = (long long *)(a2 + v7);
  long long v11 = *v10;
  long long v12 = v10[1];
  *(unsigned char *)(v9 + 32) = *((unsigned char *)v10 + 32);
  LOBYTE(v10) = *(unsigned char *)(a2 + v8);
  *(_OWORD *)uint64_t v9 = v11;
  *(_OWORD *)(v9 + 16) = v12;
  *(unsigned char *)(a1 + v8) = (_BYTE)v10;
  uint64_t v13 = a3[7];
  uint64_t v14 = a3[8];
  uint64_t v15 = a1 + v13;
  uint64_t v16 = (long long *)(a2 + v13);
  long long v17 = *v16;
  long long v18 = v16[1];
  *(unsigned char *)(v15 + 32) = *((unsigned char *)v16 + 32);
  *(_OWORD *)uint64_t v15 = v17;
  *(_OWORD *)(v15 + 16) = v18;
  *(unsigned char *)(a1 + v14) = *(unsigned char *)(a2 + v14);
  uint64_t v19 = a3[10];
  *(_OWORD *)(a1 + a3[9]) = *(_OWORD *)(a2 + a3[9]);
  uint64_t v20 = a1 + v19;
  uint64_t v21 = a2 + v19;
  *(unsigned char *)(v20 + 8) = *(unsigned char *)(v21 + 8);
  *(void *)uint64_t v20 = *(void *)v21;
  return a1;
}

uint64_t assignWithTake for TableCellFormula(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  char v10 = *(unsigned char *)(v9 + 32);
  uint64_t v11 = *(void *)v8;
  uint64_t v12 = *(void *)(v8 + 8);
  uint64_t v13 = *(void *)(v8 + 16);
  uint64_t v14 = *(void *)(v8 + 24);
  char v15 = *(unsigned char *)(v8 + 32);
  long long v16 = *(_OWORD *)(v9 + 16);
  *(_OWORD *)uint64_t v8 = *(_OWORD *)v9;
  *(_OWORD *)(v8 + 16) = v16;
  *(unsigned char *)(v8 + 32) = v10;
  outlined consume of TableColumnCustomizationID.Base(v11, v12, v13, v14, v15);
  uint64_t v17 = a3[7];
  *(unsigned char *)(a1 + a3[6]) = *(unsigned char *)(a2 + a3[6]);
  uint64_t v18 = a1 + v17;
  uint64_t v19 = a2 + v17;
  long long v20 = *(_OWORD *)(v19 + 16);
  *(_OWORD *)uint64_t v18 = *(_OWORD *)v19;
  *(_OWORD *)(v18 + 16) = v20;
  *(unsigned char *)(v18 + 32) = *(unsigned char *)(v19 + 32);
  uint64_t v21 = a3[9];
  *(unsigned char *)(a1 + a3[8]) = *(unsigned char *)(a2 + a3[8]);
  *(_OWORD *)(a1 + v21) = *(_OWORD *)(a2 + v21);
  swift_release();
  uint64_t v22 = a3[10];
  uint64_t v23 = a1 + v22;
  uint64_t v24 = a2 + v22;
  *(void *)uint64_t v23 = *(void *)v24;
  *(unsigned char *)(v23 + 8) = *(unsigned char *)(v24 + 8);
  return a1;
}

uint64_t getEnumTagSinglePayload for TableCellFormula(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1882E19C0);
}

uint64_t sub_1882E19C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 36));
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    return (v10 + 1);
  }
}

uint64_t storeEnumTagSinglePayload for TableCellFormula(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1882E1A94);
}

uint64_t sub_1882E1A94(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 36)) = (a2 - 1);
  }
  return result;
}

uint64_t type metadata accessor for TableCellFormula()
{
  uint64_t result = type metadata singleton initialization cache for TableCellFormula;
  if (!type metadata singleton initialization cache for TableCellFormula) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t type metadata completion function for TableCellFormula()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t TableContentVisitor.visit<A, B>(rowValue:view:children:traits:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v109 = a1;
  uint64_t v110 = a7;
  uint64_t v92 = a4;
  uint64_t v80 = a2;
  uint64_t v86 = a8;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v85 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  size_t v83 = (char *)&v76 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v11);
  uint64_t v84 = (char *)&v76 - v12;
  uint64_t v14 = *(void *)(a5 + 16);
  uint64_t v13 = *(void *)(a5 + 24);
  uint64_t v108 = (int *)a5;
  uint64_t v103 = swift_getAssociatedTypeWitness();
  uint64_t v15 = type metadata accessor for Optional();
  MEMORY[0x1F4188790](v15 - 8);
  size_t v105 = (char *)&v76 - v16;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v17 = swift_getAssociatedTypeWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v96 = swift_getAssociatedTypeWitness();
  uint64_t v97 = v17;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  MEMORY[0x1F4188790](TupleTypeMetadata2);
  double v99 = (char *)&v76 - v18;
  uint64_t v104 = v14;
  uint64_t v106 = v13;
  uint64_t v100 = type metadata accessor for _RowVisitationContext();
  uint64_t v19 = type metadata accessor for Optional();
  uint64_t v101 = *(void *)(v19 - 8);
  uint64_t v102 = v19;
  MEMORY[0x1F4188790](v19);
  uint64_t v98 = (uint64_t)&v76 - v20;
  uint64_t v21 = v110;
  uint64_t v22 = type metadata accessor for Optional();
  uint64_t v77 = *(void *)(v22 - 8);
  uint64_t v78 = v22;
  MEMORY[0x1F4188790](v22);
  uint64_t v24 = (char *)&v76 - v23;
  uint64_t v25 = *(void *)(v21 - 8);
  MEMORY[0x1F4188790](v26);
  unint64_t v79 = (char *)&v76 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v28);
  uint64_t v30 = (char *)&v76 - v29;
  uint64_t v31 = type metadata accessor for Optional();
  uint64_t v32 = *(void *)(v31 - 8);
  MEMORY[0x1F4188790](v31);
  uint64_t v95 = (char *)&v76 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v34);
  unsigned int v36 = (char *)&v76 - v35;
  uint64_t v37 = *(void *)(a6 - 8);
  double v39 = MEMORY[0x1F4188790](v38);
  size_t v41 = (char *)&v76 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
  int v42 = (void *)*v92;
  int v43 = *(void (**)(char *, uint64_t, uint64_t))(v32 + 16);
  uint64_t v91 = v32 + 16;
  uint64_t v92 = v42;
  uint64_t v90 = v43;
  ((void (*)(char *, uint64_t, uint64_t, double))v43)(v36, v109, v31, v39);
  unint64_t v88 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v37 + 48);
  uint64_t v89 = v37 + 48;
  int v44 = v88(v36, 1, a6);
  uint64_t v94 = v31;
  uint64_t v81 = v37;
  uint64_t v82 = v32;
  if (v44 == 1)
  {
    unint64_t v45 = v108;
    (*(void (**)(char *, uint64_t))(v32 + 8))(v36, v31);
    uint64_t v47 = v77;
    uint64_t v46 = v78;
    (*(void (**)(char *, uint64_t, uint64_t))(v77 + 16))(v24, v80, v78);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48))(v24, 1, v110) == 1)
    {
      (*(void (**)(char *, uint64_t))(v47 + 8))(v24, v46);
      uint64_t result = _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      return result;
    }
    (*(void (**)(char *, char *, uint64_t))(v25 + 32))(v30, v24, v110);
    uint64_t v48 = v107;
    unint64_t v49 = (uint64_t *)(v107 + v45[9]);
    if (v49[1])
    {
      uint64_t v50 = v110;
      (*(void (**)(char *, char *, uint64_t))(v25 + 16))(v79, v30, v110);
      uint64_t v51 = AnyView.init<A>(_:)();
      (*(void (**)(char *, uint64_t))(v25 + 8))(v30, v50);
      uint64_t KeyPath = v51;
      long long v115 = 0u;
      long long v116 = 0u;
      uint64_t v117 = 0;
      char v52 = -1;
    }
    else
    {
      long long v57 = v45;
      uint64_t v58 = *v49;
      uint64_t v59 = v110;
      (*(void (**)(char *, char *, uint64_t))(v25 + 16))(v79, v30, v110);
      uint64_t KeyPath = AnyView.init<A>(_:)();
      uint64_t v60 = *(void *)(*(void *)(v48 + v57[11]) + 16);
      (*(void (**)(char *, uint64_t))(v25 + 8))(v30, v59);
      *(void *)&long long v115 = v58;
      *((void *)&v115 + 1) = v60;
      char v52 = 2;
    }
    v118[0] = v52;
    v118[27] = 1;
    outlined init with take of TableRowView.Storage((uint64_t)&KeyPath, (uint64_t)v120);
  }
  else
  {
    uint64_t v53 = *(void (**)(char *, char *, uint64_t))(v37 + 32);
    v53(v41, v36, a6);
    uint64_t v48 = v107;
    char v54 = (uint64_t *)(v107 + v108[9]);
    uint64_t v55 = *v54;
    LOBYTE(v54) = *((unsigned char *)v54 + 8);
    v120[0] = *(void *)(v107 + v108[11]);
    v120[1] = v55;
    char v121 = (char)v54;
    v122[3] = a6;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v122);
    v53((char *)boxed_opaque_existential_1, v41, a6);
    char v123 = 0;
    swift_bridgeObjectRetain();
  }
  uint64_t v61 = *(int *)(TupleTypeMetadata2 + 48);
  uint64_t v62 = v48 + v61;
  uint64_t v63 = (uint64_t)v99;
  uint64_t v64 = (uint64_t)&v99[v61];
  uint64_t v65 = v48;
  (*(void (**)(char *, uint64_t))(*(void *)(v97 - 8) + 16))(v99, v48);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v96 - 8) + 16))(v64, v62);
  outlined init with copy of TableRowView.Storage((uint64_t)v120, (uint64_t)v113);
  uint64_t KeyPath = swift_getKeyPath();
  LOBYTE(v115) = 0;
  *((void *)&v115 + 1) = swift_getKeyPath();
  LOBYTE(v116) = 0;
  *((void *)&v116 + 1) = swift_getKeyPath();
  LOBYTE(v117) = 0;
  outlined init with take of TableRowView.Storage((uint64_t)v113, (uint64_t)v118);
  unint64_t v119 = v92;
  v113[0] = (uint64_t)v92;
  uint64_t v67 = v94;
  int v66 = v95;
  v90(v95, v109, v94);
  LODWORD(v62) = v88(v66, 1, a6);
  swift_bridgeObjectRetain_n();
  if (v62 == 1)
  {
    outlined destroy of TableRowView.Storage((uint64_t)v120);
    (*(void (**)(char *, uint64_t))(v82 + 8))(v66, v67);
    uint64_t v68 = 1;
    uint64_t v69 = (uint64_t)v105;
    uint64_t v70 = v103;
  }
  else
  {
    unint64_t v71 = v83;
    dispatch thunk of Identifiable.id.getter();
    outlined destroy of TableRowView.Storage((uint64_t)v120);
    (*(void (**)(char *, uint64_t))(v81 + 8))(v66, a6);
    (*(void (**)(char *, char *, uint64_t))(v85 + 32))(v84, v71, AssociatedTypeWitness);
    uint64_t v69 = (uint64_t)v105;
    uint64_t v70 = v103;
    swift_dynamicCast();
    uint64_t v68 = 0;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v70 - 8) + 56))(v69, v68, 1, v70);
  uint64_t v72 = v104;
  uint64_t v73 = v106;
  protocol witness for static EnvironmentKey.defaultValue.getter in conformance AccessibilityLargeContentViewerKey(&v112);
  default argument 6 of _RowVisitationContext.init(index:view:traits:explicitSelectionValue:hasMultipleSelection:deleteControlVisibility:reorderControlVisibility:)(&v111, v72, v73);
  uint64_t v74 = v98;
  _RowVisitationContext.init(index:view:traits:explicitSelectionValue:hasMultipleSelection:deleteControlVisibility:reorderControlVisibility:)(v63, v64, (uint64_t)&KeyPath, v113, v69, 0, &v112, &v111, v98);
  (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v100 - 8) + 56))(v74, 0, 1);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v101 + 40))(v65 + v108[10], v74, v102);
  return 0;
}

uint64_t protocol witness for TableRowVisitor.visit<A, B>(rowValue:view:children:traits:) in conformance TableContentVisitor<A>(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return 0;
}

uint64_t MakeCellFormulas.visit<A, B, C, D>(_:id:label:configuration:)(uint64_t a1, uint64_t a2, void *a3, unsigned __int8 *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  id v63 = a3;
  *(void *)&long long v86 = a2;
  uint64_t v69 = a1;
  uint64_t v74 = a5;
  uint64_t v87 = a5;
  uint64_t v88 = a6;
  uint64_t v76 = a6;
  uint64_t v77 = a7;
  uint64_t v78 = a8;
  uint64_t v89 = a8;
  uint64_t v90 = a7;
  uint64_t v71 = a9;
  uint64_t v91 = a9;
  uint64_t v92 = a10;
  uint64_t v72 = a10;
  uint64_t v75 = a12;
  uint64_t v93 = a12;
  uint64_t v94 = a11;
  uint64_t v73 = a11;
  uint64_t v70 = type metadata accessor for TableColumn();
  uint64_t v65 = *(void *)(v70 - 8);
  uint64_t v67 = *(void *)(v65 + 64);
  MEMORY[0x1F4188790](v70);
  uint64_t v68 = &v59[-v13];
  uint64_t v14 = (int *)type metadata accessor for TableCellFormula();
  uint64_t v80 = *((void *)v14 - 1);
  MEMORY[0x1F4188790](v14);
  unint64_t v79 = &v59[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1F4188790](v16);
  uint64_t v18 = &v59[-v17];
  uint64_t v19 = type metadata accessor for UUID();
  uint64_t v20 = *(void *)(v19 - 8);
  MEMORY[0x1F4188790](v19);
  uint64_t v22 = &v59[-((v21 + 15) & 0xFFFFFFFFFFFFFFF0)];
  double v24 = MEMORY[0x1F4188790](v23);
  uint64_t v26 = &v59[-v25];
  int v64 = *a4;
  uint64_t v27 = *((void *)a4 + 1);
  uint64_t v82 = *((void *)a4 + 2);
  uint64_t v83 = v27;
  uint64_t v28 = *((void *)a4 + 3);
  uint64_t v84 = *((void *)a4 + 4);
  uint64_t v85 = v28;
  int v29 = a4[40];
  int v66 = a4[57];
  uint64_t v30 = *(void (**)(unsigned char *, void, uint64_t, double))(v20 + 16);
  v30(&v59[-v25], v86, v19, v24);
  if (v29 == 255)
  {
    uint64_t v31 = UUID.uuidString.getter();
    uint64_t v84 = v32;
    uint64_t v85 = v31;
    id v33 = objc_msgSend(v63, sel_string);
    uint64_t v34 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v82 = v35;
    uint64_t v83 = v34;

    (*(void (**)(unsigned char *, uint64_t))(v20 + 8))(v26, v19);
    LODWORD(v63) = 1;
  }
  else
  {
    LODWORD(v63) = v29 & 1;
    outlined copy of TableColumnCustomizationID.Base(v83, v82, v85, v84, v29 & 1);
    (*(void (**)(unsigned char *, uint64_t))(v20 + 8))(v26, v19);
  }
  ((void (*)(unsigned char *, void, uint64_t))v30)(v22, v86, v19);
  uint64_t v36 = v70;
  uint64_t v37 = (long long *)(v69 + *(int *)(v70 + 88));
  long long v86 = *v37;
  uint64_t v62 = *((void *)v37 + 2);
  uint64_t v61 = *((void *)v37 + 3);
  int v60 = *((unsigned __int8 *)v37 + 32);
  uint64_t v38 = v65;
  double v39 = v68;
  (*(void (**)(unsigned char *))(v65 + 16))(v68);
  unint64_t v40 = (*(unsigned __int8 *)(v38 + 80) + 80) & ~(unint64_t)*(unsigned __int8 *)(v38 + 80);
  size_t v41 = (char *)swift_allocObject();
  uint64_t v42 = v76;
  *((void *)v41 + 2) = v74;
  *((void *)v41 + 3) = v42;
  uint64_t v43 = v78;
  *((void *)v41 + 4) = v77;
  *((void *)v41 + 5) = v43;
  uint64_t v44 = v72;
  *((void *)v41 + 6) = v71;
  *((void *)v41 + 7) = v44;
  uint64_t v45 = v75;
  *((void *)v41 + 8) = v73;
  *((void *)v41 + 9) = v45;
  (*(void (**)(char *, unsigned char *, uint64_t))(v38 + 32))(&v41[v40], v39, v36);
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v20 + 32))(v18, v22, v19);
  uint64_t v46 = &v18[v14[5]];
  uint64_t v47 = v82;
  *(void *)uint64_t v46 = v83;
  *((void *)v46 + 1) = v47;
  uint64_t v48 = v84;
  *((void *)v46 + 2) = v85;
  *((void *)v46 + 3) = v48;
  v46[32] = (_BYTE)v63;
  v18[v14[6]] = v64;
  unint64_t v49 = &v18[v14[7]];
  *(_OWORD *)unint64_t v49 = v86;
  uint64_t v50 = v61;
  *((void *)v49 + 2) = v62;
  *((void *)v49 + 3) = v50;
  v49[32] = v60;
  v18[v14[8]] = v66;
  uint64_t v51 = (uint64_t (**)(uint64_t))&v18[v14[9]];
  *uint64_t v51 = partial apply for closure #1 in MakeCellFormulas.visit<A, B, C, D>(_:id:label:configuration:);
  v51[1] = (uint64_t (*)(uint64_t))v41;
  char v52 = &v18[v14[10]];
  *(void *)char v52 = 0;
  v52[8] = 1;
  uint64_t v53 = v79;
  outlined init with copy of TableCellFormula((uint64_t)v18, (uint64_t)v79);
  char v54 = v81;
  uint64_t v55 = *v81;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v55 = (void *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v55[2] + 1, 1, v55);
  }
  unint64_t v57 = v55[2];
  unint64_t v56 = v55[3];
  if (v57 >= v56 >> 1) {
    uint64_t v55 = (void *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v56 > 1, v57 + 1, 1, v55);
  }
  void v55[2] = v57 + 1;
  outlined init with take of TableCellFormula((uint64_t)v53, (uint64_t)v55+ ((*(unsigned __int8 *)(v80 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v80 + 80))+ *(void *)(v80 + 72) * v57);
  *char v54 = v55;
  outlined destroy of ModifiedContent<TableRowView, CollectionViewCellModifier>((uint64_t)v18, (uint64_t (*)(void))type metadata accessor for TableCellFormula);
  return 1;
}

uint64_t closure #1 in MakeCellFormulas.visit<A, B, C, D>(_:id:label:configuration:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v13 = *(void *)(a3 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v15 = (char *)v26 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v16);
  v26[0] = v17;
  v26[1] = v18;
  _OWORD v26[2] = v20;
  void v26[3] = v19;
  v26[4] = v21;
  v26[5] = v22;
  _OWORD v26[6] = a10;
  v26[7] = v23;
  double v24 = *(void (**)(char *))(a2 + *(int *)(type metadata accessor for TableColumn() + 84));
  outlined init with copy of Any(a1, (uint64_t)v26);
  swift_dynamicCast();
  v24(v15);
  (*(void (**)(char *, uint64_t))(v13 + 8))(v15, a3);
  return AnyView.init<A>(_:)();
}

uint64_t protocol witness for TableColumnVisitor.visit<A, B, C, D>(_:id:label:configuration:) in conformance MakeCellFormulas(uint64_t a1, uint64_t a2, void *a3, unsigned __int8 *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  return 1;
}

uint64_t protocol witness for TableRowVisitor.visit<A, B>(rowValue:view:children:traits:) in conformance CollectionViewTableHeaderVisitor(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6)
{
  return specialized CollectionViewTableHeaderVisitor.visit<A, B>(rowValue:view:children:traits:)(a2, a3, a4, a5, a6);
}

uint64_t sub_1882E2FA4()
{
  long long v5 = *(_OWORD *)(v0 + 32);
  unint64_t v1 = (int *)(type metadata accessor for TableColumn() - 8);
  uint64_t v2 = v0
     + ((*(unsigned __int8 *)(*(void *)v1 + 80) + 80) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80));
  (*(void (**)(uint64_t))(*(void *)(v5 - 8) + 8))(v2);
  swift_release();
  uint64_t v3 = v2 + v1[25];
  if (*(void *)(v3 + 24))
  {
    __swift_destroy_boxed_opaque_existential_1(v3);
    __swift_destroy_boxed_opaque_existential_1(v3 + 32);
    swift_release();
    swift_release();
    swift_release();
  }
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in MakeCellFormulas.visit<A, B, C, D>(_:id:label:configuration:)(uint64_t a1)
{
  uint64_t v3 = v1[2];
  uint64_t v4 = v1[3];
  uint64_t v5 = v1[4];
  uint64_t v6 = v1[5];
  uint64_t v7 = v1[6];
  uint64_t v8 = v1[7];
  uint64_t v9 = v1[8];
  uint64_t v10 = v1[9];
  uint64_t v11 = *(void *)(type metadata accessor for TableColumn() - 8);
  return closure #1 in MakeCellFormulas.visit<A, B, C, D>(_:id:label:configuration:)(a1, (uint64_t)v1 + ((*(unsigned __int8 *)(v11 + 80) + 80) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80)), v3, v4, v5, v6, v7, v8, v9, v10);
}

uint64_t outlined init with take of TableCellFormula(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for TableCellFormula();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of ModifiedContent<TableRowView, CollectionViewCellModifier>(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t specialized CollectionViewTableHeaderVisitor.visit<A, B>(rowValue:view:children:traits:)(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8 = type metadata accessor for Optional();
  double v9 = MEMORY[0x1F4188790](v8);
  uint64_t v11 = (char *)&v16 - v10;
  uint64_t v12 = *a3;
  (*(void (**)(char *, uint64_t, double))(v13 + 16))((char *)&v16 - v10, a1, v9);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(a5 - 8) + 48))(v11, 1, a5);
  if (result == 1)
  {
    __break(1u);
  }
  else
  {
    uint64_t v15 = AnyView.init<A>(_:)();
    uint64_t v17 = v12;
    CollectionViewTableHeaderVisitor.visitCommon(view:traits:)(v15, &v17);
    swift_release();
    return 0;
  }
  return result;
}

uint64_t View.searchPopover<A>(isPresented:attachmentAnchor:arrowEdge:content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, int a5@<W4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11)
{
  uint64_t v42 = a7;
  uint64_t v33 = a6;
  int v32 = a3;
  uint64_t v41 = a9;
  uint64_t v40 = a11;
  int v30 = a5;
  int v31 = a5;
  uint64_t v15 = type metadata accessor for PopoverConditionalStateProvider();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v16 = type metadata accessor for PopoverPresentationModifier();
  uint64_t v38 = a8;
  uint64_t v36 = type metadata accessor for ModifiedContent();
  uint64_t v39 = *(void *)(v36 - 8);
  MEMORY[0x1F4188790](v36);
  uint64_t v18 = (char *)&v29 - v17;
  uint64_t v19 = *(void *)a4;
  uint64_t v20 = *(void *)(a4 + 8);
  char v21 = *(unsigned char *)(a4 + 16);
  uint64_t v35 = a1;
  uint64_t v22 = a1;
  int v23 = v31;
  uint64_t v37 = a2;
  PopoverConditionalStateProvider.init(isPresented:content:)(v22, a2, v32, v33, v42, (uint64_t)&v47);
  v45[0] = v19;
  v45[1] = v20;
  char v46 = v21;
  if (v23 == 4) {
    unsigned __int8 v24 = 0;
  }
  else {
    unsigned __int8 v24 = specialized Edge.Set.init(_:)(v30);
  }
  PopoverPresentationModifier.init(provider:attachmentAnchor:arrowEdges:isDetachable:keyType:attachmentBehavior:)((uint64_t)&v47, v45, v24 | ((v23 == 4) << 8), 0, 1, 1, v15, (uint64_t)v49);
  swift_retain();
  swift_retain();
  swift_retain();
  outlined copy of Environment<CGFloat?>.Content(v19, v20, v21);
  uint64_t v25 = v40;
  MEMORY[0x18C113660](v49, v38, v16, v40);
  (*(void (**)(unsigned char *, uint64_t))(*(void *)(v16 - 8) + 8))(v49, v16);
  uint64_t v47 = 0;
  char v48 = 1;
  outlined init with copy of PlatformSearchPopoverAnchor?((uint64_t)&v47, (uint64_t)v49, (uint64_t (*)(void))type metadata accessor for PlatformSearchPopoverAnchor?);
  uint64_t v50 = 0;
  outlined destroy of PlatformSearchPopoverAnchor?((uint64_t)&v47, (uint64_t (*)(void))type metadata accessor for PlatformSearchPopoverAnchor?);
  uint64_t v43 = v25;
  uint64_t v44 = &protocol witness table for PopoverPresentationModifier<A>;
  uint64_t v26 = v36;
  uint64_t v27 = swift_getWitnessTable();
  MEMORY[0x18C113660](v49, v26, &unk_1ED493078, v27);
  outlined destroy of SearchPopoverAnchorModifier((uint64_t)v49);
  return (*(uint64_t (**)(char *, uint64_t))(v39 + 8))(v18, v26);
}

uint64_t outlined destroy of SearchPopoverAnchorModifier(uint64_t a1)
{
  if ((*(unsigned char *)(a1 + 8) & 1) == 0) {
    swift_unknownObjectWeakDestroy();
  }
  swift_release();
  return a1;
}

uint64_t View.searchPopover<A, B>(item:attachmentAnchor:arrowEdge:content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v44 = a8;
  uint64_t v50 = a5;
  uint64_t v51 = a4;
  uint64_t v48 = a1;
  uint64_t v56 = a9;
  uint64_t v43 = a12;
  uint64_t v55 = a10;
  uint64_t v42 = a11;
  int v40 = a3;
  int v49 = a3;
  uint64_t v41 = a7;
  type metadata accessor for Optional();
  uint64_t v45 = type metadata accessor for Binding();
  uint64_t v16 = *(void *)(v45 - 8);
  MEMORY[0x1F4188790](v45);
  uint64_t v18 = &v39[-v17];
  uint64_t v61 = a7;
  uint64_t v62 = a8;
  uint64_t v63 = a11;
  uint64_t v64 = a12;
  uint64_t v19 = type metadata accessor for PopoverItemStateProvider();
  MEMORY[0x1F4188790](v19);
  char v21 = &v39[-v20];
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v22 = type metadata accessor for PopoverPresentationModifier();
  uint64_t v47 = *(void *)(v22 - 8);
  MEMORY[0x1F4188790](v22);
  unsigned __int8 v24 = &v39[-v23];
  uint64_t v54 = a6;
  uint64_t v25 = type metadata accessor for ModifiedContent();
  uint64_t v52 = *(void *)(v25 - 8);
  uint64_t v53 = v25;
  double v26 = MEMORY[0x1F4188790](v25);
  uint64_t v28 = &v39[-v27];
  uint64_t v29 = *(void *)a2;
  uint64_t v30 = *(void *)(a2 + 8);
  char v31 = *(unsigned char *)(a2 + 16);
  (*(void (**)(unsigned char *, uint64_t, uint64_t, double))(v16 + 16))(v18, v48, v45, v26);
  uint64_t v32 = (uint64_t)v18;
  int v33 = v49;
  PopoverItemStateProvider.init(item:content:)(v32, v51, v50, (uint64_t)v21);
  uint64_t v61 = v29;
  uint64_t v62 = v30;
  LOBYTE(v63) = v31;
  if (v33 == 4) {
    unsigned __int8 v34 = 0;
  }
  else {
    unsigned __int8 v34 = specialized Edge.Set.init(_:)(v40);
  }
  PopoverPresentationModifier.init(provider:attachmentAnchor:arrowEdges:isDetachable:keyType:attachmentBehavior:)((uint64_t)v21, &v61, v34 | ((v33 == 4) << 8), 0, 1, 1, v19, (uint64_t)v24);
  swift_retain();
  outlined copy of Environment<CGFloat?>.Content(v29, v30, v31);
  uint64_t v35 = v55;
  MEMORY[0x18C113660](v24, v54, v22, v55);
  (*(void (**)(unsigned char *, uint64_t))(v47 + 8))(v24, v22);
  uint64_t v59 = 0;
  char v60 = 1;
  outlined init with copy of PlatformSearchPopoverAnchor?((uint64_t)&v59, (uint64_t)&v61, (uint64_t (*)(void))type metadata accessor for PlatformSearchPopoverAnchor?);
  uint64_t v63 = 0;
  outlined destroy of PlatformSearchPopoverAnchor?((uint64_t)&v59, (uint64_t (*)(void))type metadata accessor for PlatformSearchPopoverAnchor?);
  uint64_t v57 = v35;
  uint64_t v58 = &protocol witness table for PopoverPresentationModifier<A>;
  uint64_t v36 = v53;
  uint64_t v37 = swift_getWitnessTable();
  MEMORY[0x18C113660](&v61, v36, &unk_1ED493078, v37);
  outlined destroy of SearchPopoverAnchorModifier((uint64_t)&v61);
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v52 + 8))(v28, v36);
}

uint64_t protocol witness for SearchEnvironmentTransform.update(properties:) in conformance SearchPopoverAnchorModifier.Transform(uint64_t a1)
{
  uint64_t v2 = a1 + *(int *)(type metadata accessor for SearchEnvironmentProperties(0) + 28);
  outlined destroy of PlatformSearchPopoverAnchor?(v2, (uint64_t (*)(void))type metadata accessor for Binding<PlatformSearchPopoverAnchor?>?);
  return outlined init with copy of PlatformSearchPopoverAnchor?(v1, v2, (uint64_t (*)(void))type metadata accessor for Binding<PlatformSearchPopoverAnchor?>);
}

uint64_t protocol witness for ViewModifier.body(content:) in conformance SearchPopoverAnchorModifier@<X0>(uint64_t a1@<X8>)
{
  type metadata accessor for State<PlatformSearchPopoverAnchor?>(0, &lazy cache variable for type metadata for State<PlatformSearchPopoverAnchor?>, (uint64_t (*)(uint64_t))type metadata accessor for PlatformSearchPopoverAnchor?, MEMORY[0x1E4F41580]);
  State.projectedValue.getter();
  outlined init with copy of SearchPopoverAnchorModifier.Transform((uint64_t)v4, (uint64_t)v3);
  outlined init with copy of PlatformSearchPopoverAnchor?((uint64_t)v3, a1, (uint64_t (*)(void))type metadata accessor for SearchEnvironmentTransformModifier<SearchPopoverAnchorModifier.Transform>);
  outlined destroy of PlatformSearchPopoverAnchor?((uint64_t)v3, (uint64_t (*)(void))type metadata accessor for SearchEnvironmentTransformModifier<SearchPopoverAnchorModifier.Transform>);
  return outlined destroy of SearchPopoverAnchorModifier.Transform((uint64_t)v4);
}

BOOL specialized static PlatformSearchPopoverAnchor.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)MEMORY[0x18C119DF0]();
  uint64_t v4 = MEMORY[0x18C119DF0](a2);
  uint64_t v5 = (void *)v4;
  if (v3)
  {
    if (v4)
    {
      type metadata accessor for UISearchTextField();
      id v6 = v3;
      char v7 = static NSObject.== infix(_:_:)();

      return (v7 & 1) != 0;
    }
    uint64_t v5 = v3;
  }
  else if (!v4)
  {
    return 1;
  }

  return 0;
}

uint64_t sub_1882E3DA8()
{
  return swift_getWitnessTable();
}

unint64_t lazy protocol witness table accessor for type SearchPopoverAnchorModifier and conformance SearchPopoverAnchorModifier()
{
  unint64_t result = lazy protocol witness table cache variable for type SearchPopoverAnchorModifier and conformance SearchPopoverAnchorModifier;
  if (!lazy protocol witness table cache variable for type SearchPopoverAnchorModifier and conformance SearchPopoverAnchorModifier)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SearchPopoverAnchorModifier and conformance SearchPopoverAnchorModifier);
  }
  return result;
}

uint64_t sub_1882E3EE0()
{
  return swift_getWitnessTable();
}

uint64_t destroy for SearchPopoverAnchorModifier(uint64_t a1)
{
  if ((*(unsigned char *)(a1 + 8) & 1) == 0) {
    swift_unknownObjectWeakDestroy();
  }

  return swift_release();
}

uint64_t initializeWithCopy for SearchPopoverAnchorModifier(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 8))
  {
    *(void *)a1 = *(void *)a2;
    *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  }
  else
  {
    swift_unknownObjectWeakCopyInit();
    *(unsigned char *)(a1 + 8) = 0;
  }
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for SearchPopoverAnchorModifier(uint64_t a1, uint64_t *a2)
{
  if (*(unsigned char *)(a1 + 8))
  {
    if (a2[1])
    {
      uint64_t v4 = *a2;
      *(unsigned char *)(a1 + 8) = *((unsigned char *)a2 + 8);
      *(void *)a1 = v4;
    }
    else
    {
      swift_unknownObjectWeakCopyInit();
      *(unsigned char *)(a1 + 8) = 0;
    }
  }
  else if (a2[1])
  {
    outlined destroy of PlatformSearchPopoverAnchor(a1);
    char v5 = *((unsigned char *)a2 + 8);
    *(void *)a1 = *a2;
    *(unsigned char *)(a1 + 8) = v5;
  }
  else
  {
    swift_unknownObjectWeakCopyAssign();
  }
  *(void *)(a1 + 16) = a2[2];
  swift_retain();
  swift_release();
  return a1;
}

uint64_t initializeWithTake for SearchPopoverAnchorModifier(uint64_t result, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 8))
  {
    *(void *)unint64_t result = *(void *)a2;
    *(unsigned char *)(result + 8) = *(unsigned char *)(a2 + 8);
  }
  else
  {
    unint64_t result = swift_unknownObjectWeakTakeInit();
    *(unsigned char *)(result + 8) = 0;
  }
  *(void *)(result + 16) = *(void *)(a2 + 16);
  return result;
}

uint64_t assignWithTake for SearchPopoverAnchorModifier(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(a1 + 8) & 1) == 0)
  {
    if ((*(unsigned char *)(a2 + 8) & 1) == 0)
    {
      swift_unknownObjectWeakTakeAssign();
      goto LABEL_8;
    }
    outlined destroy of PlatformSearchPopoverAnchor(a1);
    goto LABEL_6;
  }
  if (*(unsigned char *)(a2 + 8))
  {
LABEL_6:
    *(void *)a1 = *(void *)a2;
    *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
    goto LABEL_8;
  }
  swift_unknownObjectWeakTakeInit();
  *(unsigned char *)(a1 + 8) = 0;
LABEL_8:
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_release();
  return a1;
}

void *type metadata accessor for SearchPopoverAnchorModifier()
{
  return &unk_1ED493078;
}

ValueMetadata *type metadata accessor for PlatformSearchPopoverAnchor()
{
  return &type metadata for PlatformSearchPopoverAnchor;
}

uint64_t associated type witness table accessor for ViewModifier.Body : View in SearchPopoverAnchorModifier()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t outlined init with copy of SearchPopoverAnchorModifier.Transform(uint64_t a1, uint64_t a2)
{
  return a2;
}

void type metadata accessor for SearchEnvironmentTransformModifier<SearchPopoverAnchorModifier.Transform>()
{
  if (!lazy cache variable for type metadata for SearchEnvironmentTransformModifier<SearchPopoverAnchorModifier.Transform>)
  {
    unint64_t v0 = type metadata accessor for SearchEnvironmentTransformModifier();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for SearchEnvironmentTransformModifier<SearchPopoverAnchorModifier.Transform>);
    }
  }
}

uint64_t outlined destroy of SearchPopoverAnchorModifier.Transform(uint64_t a1)
{
  return a1;
}

unint64_t type metadata accessor for UISearchTextField()
{
  unint64_t result = lazy cache variable for type metadata for UISearchTextField;
  if (!lazy cache variable for type metadata for UISearchTextField)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for UISearchTextField);
  }
  return result;
}

uint64_t destroy for SearchPopoverAnchorModifier.Transform(uint64_t a1)
{
  swift_release();
  uint64_t result = swift_release();
  if ((*(unsigned char *)(a1 + 24) & 1) == 0)
  {
    return swift_unknownObjectWeakDestroy();
  }
  return result;
}

uint64_t initializeWithCopy for SearchPopoverAnchorModifier.Transform(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  uint64_t v4 = (void *)(a1 + 16);
  uint64_t v5 = a2 + 16;
  char v6 = *(unsigned char *)(a2 + 24);
  swift_retain();
  swift_retain();
  if (v6)
  {
    *uint64_t v4 = *(void *)v5;
    *(unsigned char *)(a1 + 24) = *(unsigned char *)(v5 + 8);
  }
  else
  {
    swift_unknownObjectWeakCopyInit();
    *(unsigned char *)(a1 + 24) = 0;
  }
  return a1;
}

uint64_t assignWithCopy for SearchPopoverAnchorModifier.Transform(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_retain();
  swift_release();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_retain();
  swift_release();
  uint64_t v4 = (uint64_t *)(a1 + 16);
  uint64_t v5 = (uint64_t *)(a2 + 16);
  if (*(unsigned char *)(a1 + 24))
  {
    if (*(unsigned char *)(a2 + 24))
    {
      uint64_t v6 = *v5;
      *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
      *uint64_t v4 = v6;
    }
    else
    {
      swift_unknownObjectWeakCopyInit();
      *(unsigned char *)(a1 + 24) = 0;
    }
  }
  else if (*(unsigned char *)(a2 + 24))
  {
    outlined destroy of PlatformSearchPopoverAnchor(a1 + 16);
    char v7 = *(unsigned char *)(a2 + 24);
    *uint64_t v4 = *v5;
    *(unsigned char *)(a1 + 24) = v7;
  }
  else
  {
    swift_unknownObjectWeakCopyAssign();
  }
  return a1;
}

uint64_t initializeWithTake for SearchPopoverAnchorModifier.Transform(uint64_t a1, uint64_t *a2)
{
  uint64_t v5 = *a2;
  uint64_t v6 = a2[1];
  uint64_t v4 = a2 + 2;
  *(void *)a1 = v5;
  *(void *)(a1 + 8) = v6;
  uint64_t v7 = a1 + 16;
  if (a2[3])
  {
    *(void *)uint64_t v7 = *v4;
    *(unsigned char *)(v7 + 8) = *((unsigned char *)v4 + 8);
  }
  else
  {
    swift_unknownObjectWeakTakeInit();
    *(unsigned char *)(a1 + 24) = 0;
  }
  return a1;
}

uint64_t assignWithTake for SearchPopoverAnchorModifier.Transform(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_release();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_release();
  if ((*(unsigned char *)(a1 + 24) & 1) == 0)
  {
    if ((*(unsigned char *)(a2 + 24) & 1) == 0)
    {
      swift_unknownObjectWeakTakeAssign();
      return a1;
    }
    outlined destroy of PlatformSearchPopoverAnchor(a1 + 16);
    goto LABEL_6;
  }
  if (*(unsigned char *)(a2 + 24))
  {
LABEL_6:
    *(void *)(a1 + 16) = *(void *)(a2 + 16);
    *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
    return a1;
  }
  swift_unknownObjectWeakTakeInit();
  *(unsigned char *)(a1 + 24) = 0;
  return a1;
}

void *type metadata accessor for SearchPopoverAnchorModifier.Transform()
{
  return &unk_1ED493178;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<_ViewModifier_Content<SearchPopoverAnchorModifier>, SearchEnvironmentTransformModifier<SearchPopoverAnchorModifier.Transform>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<SearchPopoverAnchorModifier>, SearchEnvironmentTransformModifier<SearchPopoverAnchorModifier.Transform>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<SearchPopoverAnchorModifier>, SearchEnvironmentTransformModifier<SearchPopoverAnchorModifier.Transform>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<_ViewModifier_Content<SearchPopoverAnchorModifier>, SearchEnvironmentTransformModifier<SearchPopoverAnchorModifier.Transform>>();
    lazy protocol witness table accessor for type _ViewModifier_Content<SearchPopoverAnchorModifier> and conformance _ViewModifier_Content<A>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<SearchPopoverAnchorModifier>, SearchEnvironmentTransformModifier<SearchPopoverAnchorModifier.Transform>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<_ViewModifier_Content<SearchPopoverAnchorModifier>, SearchEnvironmentTransformModifier<SearchPopoverAnchorModifier.Transform>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<_ViewModifier_Content<SearchPopoverAnchorModifier>, SearchEnvironmentTransformModifier<SearchPopoverAnchorModifier.Transform>>)
  {
    type metadata accessor for _ViewModifier_Content<SearchPopoverAnchorModifier>();
    type metadata accessor for SearchEnvironmentTransformModifier<SearchPopoverAnchorModifier.Transform>();
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<_ViewModifier_Content<SearchPopoverAnchorModifier>, SearchEnvironmentTransformModifier<SearchPopoverAnchorModifier.Transform>>);
    }
  }
}

void type metadata accessor for _ViewModifier_Content<SearchPopoverAnchorModifier>()
{
  if (!lazy cache variable for type metadata for _ViewModifier_Content<SearchPopoverAnchorModifier>)
  {
    lazy protocol witness table accessor for type SearchPopoverAnchorModifier and conformance SearchPopoverAnchorModifier();
    unint64_t v0 = type metadata accessor for _ViewModifier_Content();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ViewModifier_Content<SearchPopoverAnchorModifier>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type _ViewModifier_Content<SearchPopoverAnchorModifier> and conformance _ViewModifier_Content<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type _ViewModifier_Content<SearchPopoverAnchorModifier> and conformance _ViewModifier_Content<A>;
  if (!lazy protocol witness table cache variable for type _ViewModifier_Content<SearchPopoverAnchorModifier> and conformance _ViewModifier_Content<A>)
  {
    type metadata accessor for _ViewModifier_Content<SearchPopoverAnchorModifier>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ViewModifier_Content<SearchPopoverAnchorModifier> and conformance _ViewModifier_Content<A>);
  }
  return result;
}

uint64_t outlined destroy of PlatformSearchPopoverAnchor?(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

void type metadata accessor for State<PlatformSearchPopoverAnchor?>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

uint64_t outlined init with copy of PlatformSearchPopoverAnchor?(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t ModifiedContent<>.accessibilityAction<A>(_:label:image:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v18 = (void *)swift_allocObject();
  void v18[2] = *(void *)(a10 + 16);
  id v18[3] = a11;
  v18[4] = a12;
  v18[5] = a7;
  _OWORD v18[6] = a8;
  swift_retain();
  ModifiedContent<>.accessibilityAction<A>(_:label:image:_:)(a1, a2, a3, a4, a5, a6, (uint64_t)partial apply for closure #1 in ModifiedContent<>.accessibilityAction<A>(_:label:image:_:), (uint64_t)v18, a9, a10, a11, a12);

  return swift_release();
}

{
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  uint64_t v29 = a7;
  double v26 = a8;
  uint64_t v27 = a9;
  unsigned __int8 v24 = a1;
  uint64_t v28 = a10;
  uint64_t v17 = *(void *)(a11 - 8);
  uint64_t v25 = a12;
  MEMORY[0x1F4188790](a1);
  uint64_t v19 = (char *)&v23 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for AnyAccessibilityAction?(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<AnyAccessibilityAction>, MEMORY[0x1E4FBBE00]);
  uint64_t v20 = swift_allocObject();
  *(_OWORD *)(v20 + 16) = xmmword_18834BB80;
  (*(void (**)(char *, uint64_t, uint64_t))(v17 + 16))(v19, v24, a11);
  outlined copy of Text?(a2, a3, a4, a5);
  swift_retain();
  char v21 = v26;
  swift_retain();
  AnyAccessibilityAction.init<A>(action:label:image:handler:bridged:)((uint64_t)v19, a2, a3, a4, a5, a6, v29, v21, v20 + 32, 0, a11);
  ModifiedContent<>.accessibilityActions(_:)(v20, v28, v27);
  return swift_bridgeObjectRelease();
}

uint64_t thunk for @escaping @callee_guaranteed () -> (@out AccessibilityActionResult)(uint64_t a1, uint64_t (*a2)(void))
{
  return a2();
}

uint64_t ModifiedContent<>.accessibilityAction(_:_:)(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return ModifiedContent<>.accessibilityAction(_:_:)(a1, a2, a3, a4, (uint64_t)&unk_1ED4931B0, (uint64_t)partial apply for closure #1 in UIKitSearchScopeCoordinating<>.onChange(selectedScope:), (void (*)(uint64_t *, void, void, void, void, void, uint64_t, uint64_t, uint64_t, ValueMetadata *, unint64_t))ModifiedContent<>.accessibilityAction<A>(_:label:image:_:));
}

uint64_t ModifiedContent<>.accessibilityAction(kind:_:)(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return ModifiedContent<>.accessibilityAction(_:_:)(a1, a2, a3, a4, (uint64_t)&unk_1ED4931D8, (uint64_t)partial apply for implicit closure #1 in noteFailedReuse #1 (_:) in LazyLayoutViewCache.item(data:), (void (*)(uint64_t *, void, void, void, void, void, uint64_t, uint64_t, uint64_t, ValueMetadata *, unint64_t))ModifiedContent<>.accessibilityAction<A>(_:label:image:_:));
}

uint64_t ModifiedContent<>.accessibilityAction(_:_:)(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void (*a7)(uint64_t *, void, void, void, void, void, uint64_t, uint64_t, uint64_t, ValueMetadata *, unint64_t))
{
  uint64_t v11 = a1[1];
  uint64_t v13 = a1[2];
  unint64_t v12 = a1[3];
  uint64_t v19 = *a1;
  uint64_t v10 = v19;
  uint64_t v20 = v11;
  uint64_t v21 = v13;
  unint64_t v22 = v12;
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = a2;
  *(void *)(v14 + 24) = a3;
  outlined copy of AccessibilityActionKind.ActionKind(v10, v11, v13, v12);
  unint64_t v15 = lazy protocol witness table accessor for type AccessibilityVoidAction and conformance AccessibilityVoidAction();
  swift_retain();
  a7(&v19, 0, 0, 0, 0, 0, a6, v14, a4, &type metadata for AccessibilityVoidAction, v15);
  swift_release();
  return outlined consume of AccessibilityActionKind.ActionKind(v19, v20, v21, v22);
}

uint64_t sub_1882E4B18()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t AccessibilityActionKind.init(named:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  *a5 = result;
  a5[1] = a2;
  a5[2] = a3 & 1;
  a5[3] = a4;
  return result;
}

BOOL static AccessibilityActionKind.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  unint64_t v2 = a1[3];
  unint64_t v3 = a2[3];
  switch(v2)
  {
    case 0uLL:
      return !v3;
    case 1uLL:
      return v3 == 1;
    case 2uLL:
      return v3 == 2;
    case 3uLL:
      return v3 == 3;
    case 4uLL:
      return v3 == 4;
    default:
      if (v3 < 5) {
        return 0;
      }
      uint64_t v4 = *a1;
      uint64_t v5 = a1[1];
      uint64_t v6 = a1[2];
      uint64_t v7 = *a2;
      uint64_t v8 = a2[1];
      uint64_t v9 = a2[2];
      outlined copy of AccessibilityActionKind.ActionKind(*a1, v5, v6, v2);
      outlined copy of AccessibilityActionKind.ActionKind(v7, v8, v9, v3);
      char v10 = static Text.== infix(_:_:)();
      outlined consume of AccessibilityActionKind.ActionKind(v7, v8, v9, v3);
      outlined consume of AccessibilityActionKind.ActionKind(v4, v5, v6, v2);
      return (v10 & 1) != 0;
  }
}

void static AccessibilityActionKind.escape.getter(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  a1[3] = 1;
}

void static AccessibilityActionKind.magicTap.getter(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  a1[3] = 2;
}

void static AccessibilityActionKind.delete.getter()
{
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance AccessibilityActionKind.ActionKind(uint64_t *a1, uint64_t *a2)
{
  return specialized static AccessibilityActionKind.ActionKind.== infix(_:_:)(*a1, a1[1], a1[2], a1[3], *a2, a2[1], a2[2], a2[3]);
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance AccessibilityActionKind(uint64_t *a1, uint64_t *a2)
{
  unint64_t v2 = a1[3];
  unint64_t v3 = a2[3];
  switch(v2)
  {
    case 0uLL:
      return !v3;
    case 1uLL:
      return v3 == 1;
    case 2uLL:
      return v3 == 2;
    case 3uLL:
      return v3 == 3;
    case 4uLL:
      return v3 == 4;
    default:
      if (v3 < 5) {
        return 0;
      }
      uint64_t v4 = *a1;
      uint64_t v5 = a1[1];
      uint64_t v6 = a1[2];
      uint64_t v7 = *a2;
      uint64_t v8 = a2[1];
      uint64_t v9 = a2[2];
      outlined copy of AccessibilityActionKind.ActionKind(*a1, v5, v6, v2);
      outlined copy of AccessibilityActionKind.ActionKind(v7, v8, v9, v3);
      char v10 = static Text.== infix(_:_:)();
      outlined consume of AccessibilityActionKind.ActionKind(v7, v8, v9, v3);
      outlined consume of AccessibilityActionKind.ActionKind(v4, v5, v6, v2);
      return (v10 & 1) != 0;
  }
}

uint64_t ModifiedContent<>.accessibilityAction(named:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, unint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v18 = a1;
  uint64_t v19 = a2;
  uint64_t v20 = a3 & 1;
  unint64_t v21 = a4;
  uint64_t v15 = swift_allocObject();
  *(void *)(v15 + 16) = a5;
  *(void *)(v15 + 24) = a6;
  outlined copy of Text.Storage(a1, a2, a3 & 1);
  unint64_t v16 = lazy protocol witness table accessor for type AccessibilityVoidAction and conformance AccessibilityVoidAction();
  swift_bridgeObjectRetain();
  swift_retain();
  ModifiedContent<>.accessibilityAction<A>(_:label:image:_:)((uint64_t)&v18, 0, 0, 0, 0, 0, (uint64_t)partial apply for closure #3 in Menu.init<A>(_:content:primaryAction:), v15, a8, a7, (uint64_t)&type metadata for AccessibilityVoidAction, v16);
  swift_release();
  return outlined consume of AccessibilityActionKind.ActionKind(v18, v19, v20, v21);
}

uint64_t View.accessibilityAction<A>(action:label:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X4>, uint64_t a4@<X5>, uint64_t a5@<X6>, uint64_t a6@<X7>, uint64_t a7@<X8>)
{
  memset(v8, 0, 24);
  v8[3] = 5;
  return View.accessibilityAction<A>(_:action:label:)((uint64_t)v8, a1, a2, a3, a4, a5, a7, a6);
}

uint64_t View.accessibilityAction<A>(_:action:label:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X5>, uint64_t a5@<X6>, uint64_t a6@<X7>, uint64_t a7@<X8>, uint64_t a8)
{
  uint64_t v26 = a6;
  uint64_t v24 = a7;
  uint64_t v25 = a4;
  uint64_t v22 = a2;
  uint64_t v10 = *(void *)(a5 - 8);
  uint64_t v23 = a8;
  double v11 = MEMORY[0x1F4188790](a1);
  uint64_t v13 = (char *)&v22 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = *v14;
  uint64_t v16 = v14[1];
  uint64_t v17 = v14[2];
  unint64_t v18 = v14[3];
  v19(v11);
  uint64_t v20 = (void *)swift_allocObject();
  void v20[2] = v15;
  v20[3] = v16;
  v20[4] = v17;
  _OWORD v20[5] = v18;
  v20[6] = v22;
  v20[7] = a3;
  outlined copy of AccessibilityActionKind?(v15, v16, v17, v18);
  swift_retain();
  View.accessibilityAttachment<A>(content:_:)((uint64_t)v13, (uint64_t)partial apply for closure #1 in View.accessibilityAction<A>(_:action:label:), (uint64_t)v20, v25, a5, v26, v23, v24);
  swift_release();
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v13, a5);
}

uint64_t View.accessibilityActions<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X8>)
{
  uint64_t v11 = *(void *)(a3 - 8);
  double v12 = MEMORY[0x1F4188790](a1);
  uint64_t v14 = (char *)&v17 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15(v12);
  View.accessibilityAttachment<A>(content:_:)((uint64_t)v14, (uint64_t)closure #1 in View.accessibilityActions<A>(_:), 0, a2, a3, a4, a5, a6);
  return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v14, a3);
}

uint64_t closure #1 in View.accessibilityActions<A>(_:)(uint64_t a1)
{
  uint64_t result = AccessibilityAttachment.init()();
  uint64_t v4 = *(void *)a1;
  unint64_t v3 = *(void **)(a1 + 8);
  if (*(unsigned char *)(a1 + 16))
  {
    if (*(unsigned char *)(a1 + 16) != 1) {
      goto LABEL_16;
    }
    uint64_t v5 = swift_bridgeObjectRetain();
    uint64_t v6 = specialized Sequence.compactMap<A>(_:)(v5);
    static AccessibilityAttachment.combine(_:)(v6, (uint64_t *)&v28);
    swift_bridgeObjectRelease();
    outlined consume of AccessibilityAttachment.Tree(v4, v3, 1);
    id v7 = (id)*((void *)&v28 + 1);
    unsigned long long v8 = v28;
    unint64_t v3 = (void *)(v8 >> 64);
    uint64_t v4 = v8;
  }
  else
  {
    id v7 = v3;
    swift_bridgeObjectRetain();
  }
  *(void *)&unsigned long long v28 = v4;
  *((void *)&v28 + 1) = v3;
  AccessibilityAttachment.mergedProperties.getter(v25);

  swift_bridgeObjectRelease();
  uint64_t v9 = swift_bridgeObjectRetain();
  uint64_t v10 = specialized AccessibilityProperties.subscript.getter(v9);
  swift_bridgeObjectRelease_n();
  int64_t v11 = *(void *)(v10 + 16);
  uint64_t v12 = MEMORY[0x1E4FBC860];
  if (v11)
  {
    uint64_t v30 = MEMORY[0x1E4FBC860];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v11, 0);
    uint64_t v13 = v10 + 32;
    do
    {
      outlined init with copy of AnyAccessibilityAction(v13, (uint64_t)v25);
      uint64_t v14 = v26;
      uint64_t v15 = v27;
      __swift_project_boxed_opaque_existential_1(v25, v26);
      unsigned long long v28 = 0uLL;
      *(void *)&v29[0] = 0;
      *((void *)&v29[0] + 1) = 2;
      (*(void (**)(unsigned long long *__return_ptr, unsigned long long *, uint64_t, uint64_t))(v15 + 64))(&v23, &v28, v14, v15);
      outlined init with copy of AnyAccessibilityAction((uint64_t)v25, (uint64_t)v22);
      if (*(void *)&v24[8])
      {
        unsigned long long v28 = v23;
        v29[0] = *(_OWORD *)v24;
        *(_OWORD *)((char *)v29 + 9) = *(_OWORD *)&v24[9];
      }
      else
      {
        outlined init with copy of AnyAccessibilityAction((uint64_t)v22, (uint64_t)&v28);
        outlined destroy of AnyAccessibilityAction?((uint64_t)&v23);
      }
      outlined destroy of AnyAccessibilityAction((uint64_t)v22);
      outlined destroy of AnyAccessibilityAction((uint64_t)v25);
      uint64_t v12 = v30;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v12 + 16) + 1, 1);
        uint64_t v12 = v30;
      }
      unint64_t v17 = *(void *)(v12 + 16);
      unint64_t v16 = *(void *)(v12 + 24);
      if (v17 >= v16 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v16 > 1), v17 + 1, 1);
        uint64_t v12 = v30;
      }
      *(void *)(v12 + 16) = v17 + 1;
      unint64_t v18 = (_OWORD *)(v12 + 48 * v17);
      unsigned long long v19 = v28;
      long long v20 = v29[0];
      *(_OWORD *)((char *)v18 + 57) = *(_OWORD *)((char *)v29 + 9);
      void v18[2] = v19;
      id v18[3] = v20;
      v13 += 48;
      --v11;
    }
    while (v11);
  }
  outlined consume of AccessibilityAttachment.Tree(*(void *)a1, *(void **)(a1 + 8), *(unsigned char *)(a1 + 16));
  swift_bridgeObjectRelease();
  uint64_t result = specialized AccessibilityProperties.subscript.setter(v12);
LABEL_16:
  uint64_t v21 = v32;
  *(void *)a1 = v31;
  *(void *)(a1 + 8) = v21;
  *(unsigned char *)(a1 + 16) = 0;
  return result;
}

uint64_t View.accessibilityAction(named:_:)@<X0>(uint64_t a1@<X4>, uint64_t a2@<X5>, uint64_t a3@<X6>, uint64_t a4@<X7>, uint64_t a5@<X8>)
{
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v10 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v12 = v11;
  char v14 = v13 & 1;
  View.accessibilityAction(named:_:)(v10, v11, v13 & 1, v15, a1, a2, a3, a4, a5);
  outlined consume of Text.Storage(v10, v12, v14);

  return swift_bridgeObjectRelease();
}

uint64_t View.accessibilityAction<A>(named:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X5>, uint64_t a6@<X8>)
{
  double v11 = MEMORY[0x1F4188790](a1);
  (*(void (**)(char *, double))(v13 + 16))((char *)&v21 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), v11);
  uint64_t v14 = Text.init<A>(_:)();
  uint64_t v16 = v15;
  char v18 = v17 & 1;
  View.accessibilityAction(named:_:)(v14, v15, v17 & 1, v19, a2, a3, a4, a5, a6);
  outlined consume of Text.Storage(v14, v16, v18);
  return swift_bridgeObjectRelease();
}

uint64_t ModifiedContent<>.accessibilityAction(named:_:)@<X0>(uint64_t a1@<X4>, uint64_t a2@<X5>, uint64_t a3@<X6>, uint64_t a4@<X8>)
{
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v8 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v10 = v9;
  char v12 = v11 & 1;
  ModifiedContent<>.accessibilityAction(named:_:)(v8, v9, v11 & 1, v13, a1, a2, a3, a4);
  outlined consume of Text.Storage(v8, v10, v12);

  return swift_bridgeObjectRelease();
}

uint64_t ModifiedContent<>.accessibilityAction<A>(named:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  double v9 = MEMORY[0x1F4188790](a1);
  (*(void (**)(char *, double))(v11 + 16))((char *)&v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), v9);
  uint64_t v12 = Text.init<A>(_:)();
  uint64_t v14 = v13;
  char v16 = v15 & 1;
  ModifiedContent<>.accessibilityAction(named:_:)(v12, v13, v15 & 1, v17, a2, a3, a4, a5);
  outlined consume of Text.Storage(v12, v14, v16);
  return swift_bridgeObjectRelease();
}

uint64_t View.accessibilityAction(kind:_:)(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return View.accessibilityAction(_:_:)(a1, a2, a3, a4, a5, (uint64_t)&unk_1ED493278, (uint64_t)implicit closure #1 in noteFailedReuse #1 (_:) in LazyLayoutViewCache.item(data:)partial apply, (void (*)(uint64_t *, void, void, void, void, void, uint64_t, uint64_t, uint64_t, ValueMetadata *, uint64_t, unint64_t))View.accessibilityAction<A>(_:label:image:_:));
}

uint64_t View.accessibilityActions<A>(_:content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X6>, uint64_t a6@<X7>, uint64_t a7@<X8>, uint64_t a8, uint64_t a9)
{
  uint64_t v23 = a5;
  uint64_t v22 = a7;
  uint64_t v14 = *(void *)(a6 - 8);
  uint64_t v21 = a9;
  double v15 = MEMORY[0x1F4188790](a1);
  unint64_t v17 = (char *)&v21 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18(v15);
  uint64_t v19 = swift_allocObject();
  *(void *)(v19 + 16) = a1;
  *(void *)(v19 + 24) = a2;
  *(unsigned char *)(v19 + 32) = a3 & 1;
  *(void *)(v19 + 40) = a4;
  outlined copy of Text.Storage(a1, a2, a3 & 1);
  swift_bridgeObjectRetain();
  View.accessibilityAttachment<A>(content:_:)((uint64_t)v17, (uint64_t)partial apply for closure #1 in View.accessibilityActions<A>(_:content:), v19, v23, a6, a8, v21, v22);
  swift_release();
  return (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v17, a6);
}

uint64_t closure #1 in View.accessibilityActions<A>(_:content:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  uint64_t result = AccessibilityAttachment.init()();
  uint64_t v12 = *(void *)a1;
  uint64_t v11 = *(void **)(a1 + 8);
  if (!*(unsigned char *)(a1 + 16))
  {
    id v15 = v11;
    swift_bridgeObjectRetain();
    goto LABEL_5;
  }
  if (*(unsigned char *)(a1 + 16) == 1)
  {
    uint64_t v13 = swift_bridgeObjectRetain();
    uint64_t v14 = specialized Sequence.compactMap<A>(_:)(v13);
    static AccessibilityAttachment.combine(_:)(v14, &v21);
    swift_bridgeObjectRelease();
    outlined consume of AccessibilityAttachment.Tree(v12, v11, 1);
    uint64_t v12 = v21;
    id v15 = v22;
    uint64_t v11 = v22;
LABEL_5:
    uint64_t v21 = v12;
    uint64_t v22 = v11;
    AccessibilityAttachment.mergedProperties.getter(&v20);

    swift_bridgeObjectRelease();
    uint64_t v16 = swift_bridgeObjectRetain();
    uint64_t v17 = specialized AccessibilityProperties.subscript.getter(v16);
    swift_bridgeObjectRelease_n();
    outlined copy of Text.Storage(a2, a3, a4 & 1);
    swift_bridgeObjectRetain();
    uint64_t v18 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay7SwiftUI22AnyAccessibilityActionVG_AHs5NeverOTg503_s7d75UI4ViewPAAE20accessibilityActions_7contentQrAA4TextV_qd__yXEtAaBRd__lFyAA23g29AttachmentVAAE4TreeOzcfU_AA03f2H6H8VAMXEfU_AF0R0VTf1cn_nTf4ng_n(v17, a2, a3, a4 & 1, a5);
    outlined consume of Text.Storage(a2, a3, a4 & 1);
    swift_bridgeObjectRelease();
    outlined consume of AccessibilityAttachment.Tree(*(void *)a1, *(void **)(a1 + 8), *(unsigned char *)(a1 + 16));
    swift_bridgeObjectRelease();
    uint64_t result = specialized AccessibilityProperties.subscript.setter(v18);
  }
  uint64_t v19 = v24;
  *(void *)a1 = v23;
  *(void *)(a1 + 8) = v19;
  *(unsigned char *)(a1 + 16) = 0;
  return result;
}

uint64_t sub_1882E5E50()
{
  outlined consume of Text.Storage(*(void *)(v0 + 16), *(void *)(v0 + 24), *(unsigned char *)(v0 + 32));
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in View.accessibilityActions<A>(_:content:)(uint64_t a1)
{
  return closure #1 in View.accessibilityActions<A>(_:content:)(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(unsigned char *)(v1 + 32), *(void *)(v1 + 40));
}

uint64_t View.accessibilityActions<A>(_:content:)@<X0>(uint64_t a1@<X6>, uint64_t a2@<X7>, uint64_t a3@<X8>, uint64_t a4, uint64_t a5)
{
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v7 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v9 = v8;
  char v11 = v10 & 1;
  View.accessibilityActions<A>(_:content:)(v7, v8, v10 & 1, v12, a1, a2, a3, a4, a5);
  outlined consume of Text.Storage(v7, v9, v11);

  return swift_bridgeObjectRelease();
}

uint64_t View.accessibilityActions<A, B>(_:content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X4>, uint64_t a4@<X6>, uint64_t a5@<X7>, uint64_t a6@<X8>)
{
  uint64_t v21 = a3;
  double v10 = MEMORY[0x1F4188790](a1);
  (*(void (**)(char *, double))(v12 + 16))((char *)&v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), v10);
  uint64_t v13 = Text.init<A>(_:)();
  uint64_t v15 = v14;
  char v17 = v16 & 1;
  View.accessibilityActions<A>(_:content:)(v13, v14, v16 & 1, v18, a2, v21, a6, a4, a5);
  outlined consume of Text.Storage(v13, v15, v17);
  return swift_bridgeObjectRelease();
}

uint64_t sub_1882E6108()
{
  return swift_getWitnessTable();
}

uint64_t sub_1882E63C0()
{
  return swift_getWitnessTable();
}

uint64_t getEnumTagSinglePayload for AccessibilityActionKind.ActionKind(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 > 0x7FFFFFFA && *(unsigned char *)(a1 + 32)) {
    return (*(_DWORD *)a1 + 2147483643);
  }
  unint64_t v3 = *(void *)(a1 + 24);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  unsigned int v4 = v3 + 1;
  unsigned int v5 = v3 - 4;
  if (v4 >= 6) {
    return v5;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for AccessibilityActionKind.ActionKind(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 >= 0x7FFFFFFB)
  {
    *(_OWORD *)uint64_t result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_DWORD *)uint64_t result = a2 - 2147483643;
    if (a3 >= 0x7FFFFFFB) {
      *(unsigned char *)(result + 32) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFB) {
      *(unsigned char *)(result + 32) = 0;
    }
    if (a2) {
      *(void *)(result + 24) = a2 + 4;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AccessibilityActionKind.ActionKind()
{
  return &type metadata for AccessibilityActionKind.ActionKind;
}

uint64_t assignWithCopy for AccessibilityActionKind(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(void *)(a2 + 24);
  if (*(void *)(a1 + 24) >= 5uLL)
  {
    if (v4 >= 5)
    {
      uint64_t v10 = *(void *)a2;
      uint64_t v11 = *(void *)(a2 + 8);
      char v12 = *(unsigned char *)(a2 + 16);
      outlined copy of Text.Storage(*(void *)a2, v11, v12);
      uint64_t v13 = *(void *)a1;
      uint64_t v14 = *(void *)(a1 + 8);
      char v15 = *(unsigned char *)(a1 + 16);
      *(void *)a1 = v10;
      *(void *)(a1 + 8) = v11;
      *(unsigned char *)(a1 + 16) = v12;
      outlined consume of Text.Storage(v13, v14, v15);
      *(void *)(a1 + 24) = *(void *)(a2 + 24);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      outlined destroy of Text(a1);
      long long v6 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v6;
    }
  }
  else if (v4 >= 5)
  {
    uint64_t v7 = *(void *)a2;
    uint64_t v8 = *(void *)(a2 + 8);
    char v9 = *(unsigned char *)(a2 + 16);
    outlined copy of Text.Storage(*(void *)a2, v8, v9);
    *(void *)a1 = v7;
    *(void *)(a1 + 8) = v8;
    *(unsigned char *)(a1 + 16) = v9;
    *(void *)(a1 + 24) = *(void *)(a2 + 24);
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v5 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v5;
  }
  return a1;
}

uint64_t assignWithTake for AccessibilityActionKind(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 24) >= 5uLL)
  {
    unint64_t v4 = *(void *)(a2 + 24);
    if (v4 >= 5)
    {
      char v6 = *(unsigned char *)(a2 + 16);
      uint64_t v7 = *(void *)a1;
      uint64_t v8 = *(void *)(a1 + 8);
      char v9 = *(unsigned char *)(a1 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(unsigned char *)(a1 + 16) = v6;
      outlined consume of Text.Storage(v7, v8, v9);
      *(void *)(a1 + 24) = v4;
      swift_bridgeObjectRelease();
      return a1;
    }
    outlined destroy of Text(a1);
  }
  long long v5 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v5;
  return a1;
}

uint64_t getEnumTagSinglePayload for AccessibilityActionKind(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 > 0x7FFFFFFA && *(unsigned char *)(a1 + 32)) {
    return (*(_DWORD *)a1 + 2147483643);
  }
  unint64_t v3 = *(void *)(a1 + 24);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 5;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for AccessibilityActionKind(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 >= 0x7FFFFFFB)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)uint64_t result = a2 - 2147483643;
    *(void *)(result + 8) = 0;
    if (a3 > 0x7FFFFFFA) {
      *(unsigned char *)(result + 32) = 1;
    }
  }
  else
  {
    if (a3 > 0x7FFFFFFA) {
      *(unsigned char *)(result + 32) = 0;
    }
    if (a2) {
      *(void *)(result + 24) = a2 + 4;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AccessibilityVoidAction()
{
  return &type metadata for AccessibilityVoidAction;
}

uint64_t closure #1 in View.accessibilityAction<A>(_:action:label:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v13 = *(void *)a1;
  char v12 = *(void **)(a1 + 8);
  if (*(unsigned char *)(a1 + 16))
  {
    uint64_t v14 = 0;
    if (*(unsigned char *)(a1 + 16) != 1) {
      goto LABEL_5;
    }
    char v15 = specialized Sequence.compactMap<A>(_:)(*(void *)a1);
    static AccessibilityAttachment.combine(_:)(v15, (uint64_t *)v56);
    swift_bridgeObjectRelease();
    outlined consume of AccessibilityAttachment.Tree(v13, v12, 1);
    char v12 = (void *)*((void *)&v56[0] + 1);
    uint64_t v13 = *(void *)&v56[0];
  }
  *(void *)&v56[0] = v13;
  *((void *)&v56[0] + 1) = v12;
  AccessibilityAttachment.mergedProperties.getter((uint64_t *)&v52);
  swift_bridgeObjectRelease();

  uint64_t v14 = v52;
LABEL_5:
  memset(v56, 0, 41);
  if (a5 != 5)
  {
    if (!v14)
    {
      outlined copy of AccessibilityActionKind?(a2, a3, a4, a5);
      outlined copy of AccessibilityActionKind.ActionKind(a2, a3, a4, a5);
      uint64_t v46 = 0;
      uint64_t v47 = 0;
      uint64_t v44 = 0;
      uint64_t v45 = 0;
LABEL_24:
      uint64_t v29 = swift_allocObject();
      *(void *)(v29 + 16) = a6;
      *(void *)(v29 + 24) = a7;
      uint64_t v30 = swift_allocObject();
      *(void *)(v30 + 16) = partial apply for closure #1 in closure #1 in View.accessibilityAction<A>(_:action:label:);
      *(void *)(v30 + 24) = v29;
      Swift::UInt32 v31 = AccessibilityActionHandlerSeed++;
      type metadata accessor for AnyAccessibilityAction.ConcreteBase<AccessibilityActionStorage<AccessibilityVoidAction>>();
      *(void *)&v53[8] = v32;
      *(void *)&v53[16] = &protocol witness table for AnyAccessibilityAction.ConcreteBase<A>;
      uint64_t v33 = swift_allocObject();
      *(void *)&long long v52 = v33;
      swift_retain();
      outlined consume of AccessibilityActionKind?(a2, a3, a4, a5);
      *(void *)(v33 + 16) = a2;
      *(void *)(v33 + 24) = a3;
      *(void *)(v33 + 32) = a4;
      *(void *)(v33 + 40) = a5;
      *(void *)(v33 + 48) = 0;
      *(void *)(v33 + 56) = 0;
      *(void *)(v33 + 64) = 0;
      *(void *)(v33 + 72) = 2;
      *(void *)(v33 + 80) = v46;
      *(void *)(v33 + 88) = v45;
      *(void *)(v33 + 96) = v44;
      *(void *)(v33 + 104) = v14;
      *(void *)(v33 + 112) = v47;
      *(void *)(v33 + 120) = implicit closure #1 in noteFailedReuse #1 (_:) in LazyLayoutViewCache.item(data:)partial apply;
      *(void *)(v33 + 128) = v30;
      *(_DWORD *)(v33 + 136) = v31;
      goto LABEL_25;
    }
    outlined copy of AccessibilityActionKind.ActionKind(a2, a3, a4, a5);
    outlined copy of AccessibilityActionKind?(a2, a3, a4, a5);
    uint64_t v23 = swift_bridgeObjectRetain();
    specialized AccessibilityProperties.subscript.getter(v23, (uint64_t)&v52);
    swift_bridgeObjectRelease();
    if ((void)v52)
    {
      if (*(void *)(v52 + 16))
      {
        uint64_t v24 = *(void *)(v52 + 32);
        uint64_t v25 = *(void *)(v52 + 40);
        uint64_t v26 = *(void *)(v52 + 56);
        uint64_t v44 = *(unsigned __int8 *)(v52 + 48);
        outlined copy of Text.Storage(v24, v25, *(unsigned char *)(v52 + 48));
        uint64_t v43 = v26;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
LABEL_20:
        uint64_t v27 = swift_bridgeObjectRetain();
        uint64_t v28 = specialized AccessibilityProperties.subscript.getter(v27);
        swift_bridgeObjectRelease_n();
        uint64_t v45 = v25;
        uint64_t v46 = v24;
        if (*(void *)(v28 + 16))
        {
          uint64_t v47 = *(void *)(v28 + 32);
          swift_retain();
          swift_bridgeObjectRelease();
        }
        else
        {
          swift_bridgeObjectRelease();
          uint64_t v47 = 0;
        }
        uint64_t v14 = v43;
        goto LABEL_24;
      }
      swift_bridgeObjectRelease();
    }
    uint64_t v24 = 0;
    uint64_t v25 = 0;
    uint64_t v43 = 0;
    uint64_t v44 = 0;
    goto LABEL_20;
  }
  if (!v14) {
    goto LABEL_26;
  }
  uint64_t v16 = swift_bridgeObjectRetain();
  specialized AccessibilityProperties.subscript.getter(v16, (uint64_t)&v52);
  swift_bridgeObjectRelease();
  if (!(void)v52)
  {
    swift_bridgeObjectRelease();
    goto LABEL_26;
  }
  if (!*(void *)(v52 + 16))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_26;
  }
  uint64_t v17 = *(void *)(v52 + 32);
  uint64_t v18 = *(void *)(v52 + 40);
  uint64_t v19 = *(unsigned __int8 *)(v52 + 48);
  uint64_t v20 = *(void *)(v52 + 56);
  outlined copy of Text.Storage(v17, v18, *(unsigned char *)(v52 + 48));
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  outlined copy of Text.Storage(v17, v18, v19);
  swift_bridgeObjectRetain();
  uint64_t v21 = specialized AccessibilityProperties.subscript.getter(v14);
  swift_bridgeObjectRelease_n();
  if (*(void *)(v21 + 16))
  {
    uint64_t v22 = *(void *)(v21 + 32);
    swift_retain();
  }
  else
  {
    uint64_t v22 = 0;
  }
  swift_bridgeObjectRelease();
  uint64_t v38 = swift_allocObject();
  *(void *)(v38 + 16) = a6;
  *(void *)(v38 + 24) = a7;
  uint64_t v39 = swift_allocObject();
  *(void *)(v39 + 16) = partial apply for specialized closure #1 in AccessibilityButtonModifier.Attachment.accessibilityActions.getter;
  *(void *)(v39 + 24) = v38;
  Swift::UInt32 v40 = AccessibilityActionHandlerSeed++;
  type metadata accessor for AnyAccessibilityAction.ConcreteBase<AccessibilityActionStorage<AccessibilityVoidAction>>();
  *(void *)&v53[8] = v41;
  *(void *)&v53[16] = &protocol witness table for AnyAccessibilityAction.ConcreteBase<A>;
  uint64_t v42 = swift_allocObject();
  *(void *)&long long v52 = v42;
  swift_retain();
  outlined consume of Text.Storage(v17, v18, v19);
  swift_bridgeObjectRelease();
  *(void *)(v42 + 16) = v17;
  *(void *)(v42 + 24) = v18;
  *(void *)(v42 + 32) = v19;
  *(void *)(v42 + 40) = v20;
  *(void *)(v42 + 48) = 0;
  *(void *)(v42 + 56) = 0;
  *(void *)(v42 + 64) = 0;
  *(void *)(v42 + 72) = 2;
  *(_OWORD *)(v42 + 80) = 0u;
  *(_OWORD *)(v42 + 96) = 0u;
  *(void *)(v42 + 112) = v22;
  *(void *)(v42 + 120) = implicit closure #1 in noteFailedReuse #1 (_:) in LazyLayoutViewCache.item(data:)partial apply;
  *(void *)(v42 + 128) = v39;
  *(_DWORD *)(v42 + 136) = v40;
LABEL_25:
  v53[24] = 0;
  outlined destroy of AnyAccessibilityAction?((uint64_t)v56);
  outlined init with take of AnyAccessibilityAction?((uint64_t)&v52, (uint64_t)v56);
LABEL_26:
  AccessibilityAttachment.init()();
  outlined init with copy of AnyAccessibilityAction?((uint64_t)v56, (uint64_t)&v50);
  if (*(void *)&v51[8])
  {
    long long v52 = v50;
    *(_OWORD *)uint64_t v53 = *(_OWORD *)v51;
    *(_OWORD *)&v53[9] = *(_OWORD *)&v51[9];
    type metadata accessor for AnyAccessibilityAction?(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<AnyAccessibilityAction>, MEMORY[0x1E4FBBE00]);
    uint64_t v34 = swift_allocObject();
    *(_OWORD *)(v34 + 16) = xmmword_18834BB80;
    outlined init with copy of AnyAccessibilityAction((uint64_t)&v52, v34 + 32);
    specialized AccessibilityProperties.subscript.setter(v34);
    outlined destroy of AnyAccessibilityAction((uint64_t)&v52);
    uint64_t v35 = v56;
  }
  else
  {
    outlined destroy of AnyAccessibilityAction?((uint64_t)v56);
    uint64_t v35 = &v50;
  }
  uint64_t result = outlined destroy of AnyAccessibilityAction?((uint64_t)v35);
  uint64_t v37 = v55;
  *(void *)a1 = v54;
  *(void *)(a1 + 8) = v37;
  *(unsigned char *)(a1 + 16) = 0;
  return result;
}

uint64_t ModifiedContent<>.accessibilityActions(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v8 = a1;
  unint64_t v5 = lazy protocol witness table accessor for type AccessibilityProperties.ActionsKey and conformance AccessibilityProperties.ActionsKey();
  unint64_t v6 = lazy protocol witness table accessor for type [AnyAccessibilityAction] and conformance [A]();
  return ModifiedContent<>.update<A>(_:combining:isEnabled:)((uint64_t)&type metadata for AccessibilityProperties.ActionsKey, (uint64_t)&v8, 1, a2, (uint64_t)&type metadata for AccessibilityProperties.ActionsKey, v5, v6, a3);
}

uint64_t specialized static AccessibilityActionKind.ActionKind.== infix(_:_:)(uint64_t a1, uint64_t a2, char a3, unint64_t a4, uint64_t a5, uint64_t a6, char a7, unint64_t a8)
{
  switch(a4)
  {
    case 0uLL:
      if (a8) {
        goto LABEL_13;
      }
      goto LABEL_7;
    case 1uLL:
      if (a8 == 1) {
        goto LABEL_7;
      }
      goto LABEL_13;
    case 2uLL:
      if (a8 != 2) {
        goto LABEL_13;
      }
      goto LABEL_7;
    case 3uLL:
      if (a8 != 3) {
        goto LABEL_13;
      }
      goto LABEL_7;
    case 4uLL:
      if (a8 != 4) {
        goto LABEL_13;
      }
LABEL_7:
      uint64_t result = 1;
      break;
    default:
      if (a8 < 5)
      {
LABEL_13:
        uint64_t result = 0;
      }
      else
      {
        outlined copy of AccessibilityActionKind.ActionKind(a1, a2, a3, a4);
        outlined copy of AccessibilityActionKind.ActionKind(a5, a6, a7, a8);
        char v16 = static Text.== infix(_:_:)();
        outlined consume of AccessibilityActionKind.ActionKind(a5, a6, a7, a8);
        outlined consume of AccessibilityActionKind.ActionKind(a1, a2, a3, a4);
        uint64_t result = v16 & 1;
      }
      break;
  }
  return result;
}

BOOL specialized static AccessibilityVoidAction.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  uint64_t v2 = a1[1];
  uint64_t v4 = a1[2];
  unint64_t v5 = a1[3];
  unint64_t v6 = a2[3];
  switch(v5)
  {
    case 0uLL:
      outlined consume of AccessibilityActionKind.ActionKind(*a1, v2, v4, 0);
      return !v6;
    case 1uLL:
      uint64_t v7 = 1;
      outlined consume of AccessibilityActionKind.ActionKind(*a1, v2, v4, 1uLL);
      if (v6 != 1) {
        return 0;
      }
      return v7;
    case 2uLL:
      outlined consume of AccessibilityActionKind.ActionKind(*a1, v2, v4, 2uLL);
      return v6 == 2;
    case 3uLL:
      outlined consume of AccessibilityActionKind.ActionKind(*a1, v2, v4, 3uLL);
      return v6 == 3;
    case 4uLL:
      outlined consume of AccessibilityActionKind.ActionKind(*a1, v2, v4, 4uLL);
      return v6 == 4;
    default:
      if (v6 < 5) {
        return 0;
      }
      uint64_t v8 = *a2;
      uint64_t v9 = a2[1];
      uint64_t v10 = a2[2];
      outlined copy of AccessibilityActionKind.ActionKind(*a2, v9, v10, v6);
      outlined copy of AccessibilityActionKind.ActionKind(v3, v2, v4, v5);
      char v11 = static Text.== infix(_:_:)();
      outlined consume of AccessibilityActionKind.ActionKind(v8, v9, v10, v6);
      outlined consume of AccessibilityActionKind.ActionKind(v3, v2, v4, v5);
      return (v11 & 1) != 0;
  }
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay7SwiftUI22AnyAccessibilityActionVG_AHs5NeverOTg503_s7d75UI4ViewPAAE20accessibilityActions_7contentQrAA4TextV_qd__yXEtAaBRd__lFyAA23g29AttachmentVAAE4TreeOzcfU_AA03f2H6H8VAMXEfU_AF0R0VTf1cn_nTf4ng_n(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  int64_t v5 = *(void *)(a1 + 16);
  uint64_t v6 = MEMORY[0x1E4FBC860];
  if (v5)
  {
    uint64_t v28 = MEMORY[0x1E4FBC860];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5, 0);
    char v12 = (void *)(a1 + 32);
    uint64_t v13 = a4 & 1;
    do
    {
      uint64_t v14 = v12[3];
      uint64_t v15 = v12[4];
      __swift_project_boxed_opaque_existential_1(v12, v14);
      *(void *)&long long v26 = a2;
      *((void *)&v26 + 1) = a3;
      *(void *)&v27[0] = v13;
      *((void *)&v27[0] + 1) = a5;
      (*(void (**)(long long *__return_ptr, long long *, uint64_t, uint64_t))(v15 + 64))(&v24, &v26, v14, v15);
      outlined init with copy of AnyAccessibilityAction((uint64_t)v12, (uint64_t)&v22);
      if (*(void *)&v25[8])
      {
        outlined destroy of AnyAccessibilityAction((uint64_t)&v22);
        long long v26 = v24;
        v27[0] = *(_OWORD *)v25;
        *(_OWORD *)((char *)v27 + 9) = *(_OWORD *)&v25[9];
      }
      else
      {
        long long v26 = v22;
        v27[0] = v23[0];
        *(_OWORD *)((char *)v27 + 9) = *(_OWORD *)((char *)v23 + 9);
        outlined destroy of AnyAccessibilityAction?((uint64_t)&v24);
      }
      uint64_t v6 = v28;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v6 + 16) + 1, 1);
        uint64_t v6 = v28;
      }
      unint64_t v17 = *(void *)(v6 + 16);
      unint64_t v16 = *(void *)(v6 + 24);
      if (v17 >= v16 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v16 > 1), v17 + 1, 1);
        uint64_t v6 = v28;
      }
      *(void *)(v6 + 16) = v17 + 1;
      uint64_t v18 = (_OWORD *)(v6 + 48 * v17);
      long long v19 = v26;
      long long v20 = v27[0];
      *(_OWORD *)((char *)v18 + 57) = *(_OWORD *)((char *)v27 + 9);
      void v18[2] = v19;
      id v18[3] = v20;
      v12 += 6;
      --v5;
    }
    while (v5);
  }
  return v6;
}

uint64_t sub_1882E741C()
{
  if (*(void *)(v0 + 40) >= 6uLL)
  {
    outlined consume of Text.Storage(*(void *)(v0 + 16), *(void *)(v0 + 24), *(unsigned char *)(v0 + 32));
    swift_bridgeObjectRelease();
  }
  swift_release();

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in View.accessibilityAction<A>(_:action:label:)(uint64_t a1)
{
  return closure #1 in View.accessibilityAction<A>(_:action:label:)(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40), *(void *)(v1 + 48), *(void *)(v1 + 56));
}

uint64_t outlined copy of AccessibilityActionKind?(uint64_t result, uint64_t a2, char a3, unint64_t a4)
{
  if (a4 != 5) {
    return outlined copy of AccessibilityActionKind.ActionKind(result, a2, a3, a4);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type _PreferenceTransformModifier<AccessibilityAttachment.Key> and conformance _PreferenceTransformModifier<A>(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1882E74DC()
{
  if (*(void *)(v0 + 40) >= 5uLL)
  {
    outlined consume of Text.Storage(*(void *)(v0 + 16), *(void *)(v0 + 24), *(unsigned char *)(v0 + 32));
    swift_bridgeObjectRelease();
  }
  if (*(void *)(v0 + 72) >= 3uLL)
  {
    outlined consume of Text.Storage(*(void *)(v0 + 48), *(void *)(v0 + 56), *(unsigned char *)(v0 + 64));
    swift_bridgeObjectRelease();
  }
  if (*(void *)(v0 + 104))
  {
    outlined consume of Text.Storage(*(void *)(v0 + 80), *(void *)(v0 + 88), *(unsigned char *)(v0 + 96));
    swift_bridgeObjectRelease();
  }
  swift_release();
  swift_release();

  return swift_deallocObject();
}

uint64_t outlined init with take of AnyAccessibilityAction?(uint64_t a1, uint64_t a2)
{
  type metadata accessor for AnyAccessibilityAction?(0, (unint64_t *)&lazy cache variable for type metadata for AnyAccessibilityAction?, MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined consume of AccessibilityActionKind?(uint64_t result, uint64_t a2, char a3, unint64_t a4)
{
  if (a4 != 5) {
    return outlined consume of AccessibilityActionKind.ActionKind(result, a2, a3, a4);
  }
  return result;
}

uint64_t sub_1882E7608()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in ModifiedContent<>.accessibilityAction<A>(_:label:image:_:)@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(v1 + 40))();
  *a1 = 2;
  return result;
}

uint64_t sub_1882E7674()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in View.accessibilityAction<A>(_:label:image:_:)@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(v1 + 48))();
  *a1 = 2;
  return result;
}

void static AccessibilityActionKind.showMenu.getter()
{
}

uint64_t SectionConfiguration.actions.getter@<X0>(void *a1@<X8>)
{
  SectionConfiguration.containerValues.getter();
  ViewTraitCollection.value<A>(for:defaultValue:)();
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v3;
  return result;
}

uint64_t SectionConfiguration.Actions.body.getter@<X0>(void *a1@<X8>)
{
  *a1 = *v1;
  return swift_retain();
}

uint64_t associated type witness table accessor for View.Body : View in SectionConfiguration.Actions()
{
  return swift_getOpaqueTypeConformance2();
}

void *assignWithCopy for SectionConfiguration.Actions(void *a1, void *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  return a1;
}

void *assignWithTake for SectionConfiguration.Actions(void *a1, void *a2)
{
  *a1 = *a2;
  swift_release();
  return a1;
}

ValueMetadata *type metadata accessor for SectionConfiguration.Actions()
{
  return &type metadata for SectionConfiguration.Actions;
}

uint64_t *specialized View.accessibility<A>(_:_:isEnabled:)@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v4 = v3;
  if (a2)
  {
    type metadata accessor for AnyAccessibilityPropertiesEntry();
    uint64_t v21 = Dictionary.init(minimumCapacity:)();
    uint64_t v7 = MEMORY[0x1E4F40E80];
    _s7SwiftUI28AccessibilityPropertiesEntryVyAA0C12LabelStorageVSgGMaTm_3(0, (unint64_t *)&lazy cache variable for type metadata for AccessibilityPropertiesEntry<AccessibilityValueStorage?>, &lazy cache variable for type metadata for AccessibilityValueStorage?, MEMORY[0x1E4F40E80], MEMORY[0x1E4F41090]);
    v20[3] = v8;
    v20[4] = _s7SwiftUI28AccessibilityPropertiesEntryVyAA0C12LabelStorageVSgGACyxGAA03AnycdE0AAWlTm_2(&lazy protocol witness table cache variable for type AccessibilityPropertiesEntry<AccessibilityValueStorage?> and conformance AccessibilityPropertiesEntry<A>, (unint64_t *)&lazy cache variable for type metadata for AccessibilityPropertiesEntry<AccessibilityValueStorage?>, &lazy cache variable for type metadata for AccessibilityValueStorage?, v7);
    v20[0] = swift_allocObject();
    outlined init with copy of AccessibilityValueStorage?(a1, v20[0] + 16);
    specialized Dictionary.subscript.setter((uint64_t)v20, MEMORY[0x1E4F40B98]);
    uint64_t v9 = v21;
  }
  else
  {
    type metadata accessor for AnyAccessibilityPropertiesEntry();
    uint64_t v9 = Dictionary.init(minimumCapacity:)();
  }
  uint64_t v21 = v9;
  AccessibilityAttachment.init(properties:)();
  uint64_t v10 = v20[0];
  uint64_t v11 = v20[1];
  _ss23_ContiguousArrayStorageCy7SwiftUI4TextVGMaTm_1(0, (unint64_t *)&lazy cache variable for type metadata for MutableBox<AccessibilityAttachment>, MEMORY[0x1E4F40A58], MEMORY[0x1E4F3F398]);
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16) = v10;
  *(void *)(v12 + 24) = v11;
  long long v13 = *(_OWORD *)(v4 + 176);
  *(_OWORD *)(a3 + 160) = *(_OWORD *)(v4 + 160);
  *(_OWORD *)(a3 + 176) = v13;
  *(_OWORD *)(a3 + 192) = *(_OWORD *)(v4 + 192);
  long long v14 = *(_OWORD *)(v4 + 112);
  *(_OWORD *)(a3 + 96) = *(_OWORD *)(v4 + 96);
  *(_OWORD *)(a3 + 112) = v14;
  long long v15 = *(_OWORD *)(v4 + 144);
  *(_OWORD *)(a3 + 128) = *(_OWORD *)(v4 + 128);
  *(_OWORD *)(a3 + 144) = v15;
  long long v16 = *(_OWORD *)(v4 + 48);
  *(_OWORD *)(a3 + 32) = *(_OWORD *)(v4 + 32);
  *(_OWORD *)(a3 + 48) = v16;
  long long v17 = *(_OWORD *)(v4 + 80);
  *(_OWORD *)(a3 + 64) = *(_OWORD *)(v4 + 64);
  *(_OWORD *)(a3 + 80) = v17;
  long long v18 = *(_OWORD *)(v4 + 16);
  *(_OWORD *)a3 = *(_OWORD *)v4;
  *(_OWORD *)(a3 + 16) = v18;
  *(void *)(a3 + 208) = v12;
  *(void *)(a3 + 216) = 0;

  return outlined retain of ModifiedContent<ModifiedContent<ModifiedContent<BadgeViewStyleConfiguration.Content, _OverlayModifier<ModifiedContent<HStack<TupleView<(Spacer, VStack<TupleView<(Badge, Spacer)>>)>>, AccessibilityAttachmentModifier>?>>, NeedsTopPaddingForGridBadgesModifier>, StaticIf<StyleContextAcceptsPredicate<MultimodalListContext>, TopPaddingForBadgeModifier, EmptyModifier>>((uint64_t *)v4);
}

void *specialized View.accessibility<A>(_:_:isEnabled:)@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v4 = v3;
  if (a2)
  {
    type metadata accessor for AnyAccessibilityPropertiesEntry();
    swift_bridgeObjectRetain();
    uint64_t v18 = Dictionary.init(minimumCapacity:)();
    type metadata accessor for AccessibilityPropertiesEntry<[AnyAccessibilityAction]>(0, (unint64_t *)&lazy cache variable for type metadata for AccessibilityPropertiesEntry<[AnyAccessibilityAction]>, (unint64_t *)&lazy cache variable for type metadata for [AnyAccessibilityAction], (uint64_t)&type metadata for AnyAccessibilityAction);
    _OWORD v17[3] = v7;
    void v17[4] = lazy protocol witness table accessor for type AccessibilityPropertiesEntry<[AnyAccessibilityAction]> and conformance AccessibilityPropertiesEntry<A>();
    v17[0] = a1;
    specialized Dictionary.subscript.setter((uint64_t)v17, (uint64_t)&type metadata for AccessibilityProperties.ActionsKey);
    uint64_t v8 = v18;
  }
  else
  {
    type metadata accessor for AnyAccessibilityPropertiesEntry();
    uint64_t v8 = Dictionary.init(minimumCapacity:)();
  }
  uint64_t v18 = v8;
  AccessibilityAttachment.init(properties:)();
  uint64_t v9 = v17[0];
  uint64_t v10 = v17[1];
  _ss23_ContiguousArrayStorageCy7SwiftUI4TextVGMaTm_1(0, (unint64_t *)&lazy cache variable for type metadata for MutableBox<AccessibilityAttachment>, MEMORY[0x1E4F40A58], MEMORY[0x1E4F3F398]);
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = v9;
  *(void *)(v11 + 24) = v10;
  long long v12 = *(_OWORD *)(v4 + 80);
  *(_OWORD *)(a3 + 64) = *(_OWORD *)(v4 + 64);
  *(_OWORD *)(a3 + 80) = v12;
  uint64_t v13 = *(void *)(v4 + 96);
  long long v14 = *(_OWORD *)(v4 + 16);
  *(_OWORD *)a3 = *(_OWORD *)v4;
  *(_OWORD *)(a3 + 16) = v14;
  long long v15 = *(_OWORD *)(v4 + 48);
  *(_OWORD *)(a3 + 32) = *(_OWORD *)(v4 + 32);
  *(_OWORD *)(a3 + 48) = v15;
  *(void *)(a3 + 96) = v13;
  *(void *)(a3 + 104) = v11;
  *(void *)(a3 + 112) = 0;

  return outlined retain of SliderStyleConfiguration((void *)v4);
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  long long v13;
  uint64_t v14;
  long long v15;
  void v17[5];
  uint64_t v18;
  uint64_t vars8;

  uint64_t v4 = v3;
  if (a2)
  {
    type metadata accessor for AnyAccessibilityPropertiesEntry();
    uint64_t v18 = Dictionary.init(minimumCapacity:)();
    uint64_t v7 = MEMORY[0x1E4F40E80];
    _s7SwiftUI28AccessibilityPropertiesEntryVyAA0C12LabelStorageVSgGMaTm_3(0, (unint64_t *)&lazy cache variable for type metadata for AccessibilityPropertiesEntry<AccessibilityValueStorage?>, &lazy cache variable for type metadata for AccessibilityValueStorage?, MEMORY[0x1E4F40E80], MEMORY[0x1E4F41090]);
    _OWORD v17[3] = v8;
    void v17[4] = _s7SwiftUI28AccessibilityPropertiesEntryVyAA0C12LabelStorageVSgGACyxGAA03AnycdE0AAWlTm_2(&lazy protocol witness table cache variable for type AccessibilityPropertiesEntry<AccessibilityValueStorage?> and conformance AccessibilityPropertiesEntry<A>, (unint64_t *)&lazy cache variable for type metadata for AccessibilityPropertiesEntry<AccessibilityValueStorage?>, &lazy cache variable for type metadata for AccessibilityValueStorage?, v7);
    v17[0] = swift_allocObject();
    outlined init with copy of AccessibilityValueStorage?(a1, v17[0] + 16);
    specialized Dictionary.subscript.setter((uint64_t)v17, MEMORY[0x1E4F40B98]);
    uint64_t v9 = v18;
  }
  else
  {
    type metadata accessor for AnyAccessibilityPropertiesEntry();
    uint64_t v9 = Dictionary.init(minimumCapacity:)();
  }
  uint64_t v18 = v9;
  AccessibilityAttachment.init(properties:)();
  uint64_t v10 = v17[0];
  uint64_t v11 = v17[1];
  _ss23_ContiguousArrayStorageCy7SwiftUI4TextVGMaTm_1(0, (unint64_t *)&lazy cache variable for type metadata for MutableBox<AccessibilityAttachment>, MEMORY[0x1E4F40A58], MEMORY[0x1E4F3F398]);
  long long v12 = swift_allocObject();
  *(void *)(v12 + 16) = v10;
  *(void *)(v12 + 24) = v11;
  uint64_t v13 = *(_OWORD *)(v4 + 48);
  *(_OWORD *)(a3 + 32) = *(_OWORD *)(v4 + 32);
  *(_OWORD *)(a3 + 48) = v13;
  *(_OWORD *)(a3 + 64) = *(_OWORD *)(v4 + 64);
  long long v14 = *(void *)(v4 + 80);
  long long v15 = *(_OWORD *)(v4 + 16);
  *(_OWORD *)a3 = *(_OWORD *)v4;
  *(_OWORD *)(a3 + 16) = v15;
  *(void *)(a3 + 80) = v14;
  *(void *)(a3 + 88) = v12;
  *(void *)(a3 + 96) = 0;

  return outlined retain of ModifiedContent<Stepper<EmptyView>, LabelsHiddenModifier>((void *)v4);
}

uint64_t specialized View.accessibility<A>(_:_:isEnabled:)@<X0>(uint64_t a1@<X0>, char a2@<W1>, char a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v5 = v4;
  if (a3)
  {
    type metadata accessor for AnyAccessibilityPropertiesEntry();
    uint64_t v19 = Dictionary.init(minimumCapacity:)();
    _s7SwiftUI28AccessibilityPropertiesEntryVyAA0C12LabelStorageVSgGMaTm_3(0, (unint64_t *)&lazy cache variable for type metadata for AccessibilityPropertiesEntry<Double?>, &lazy cache variable for type metadata for Double?, MEMORY[0x1E4FBB3D0], MEMORY[0x1E4F41090]);
    uint64_t v17 = v9;
    uint64_t v18 = lazy protocol witness table accessor for type AccessibilityPropertiesEntry<Double?> and conformance AccessibilityPropertiesEntry<A>();
    uint64_t v15 = a1;
    LOBYTE(v16) = a2 & 1;
    specialized Dictionary.subscript.setter((uint64_t)&v15, MEMORY[0x1E4F40AC8]);
    uint64_t v10 = v19;
  }
  else
  {
    type metadata accessor for AnyAccessibilityPropertiesEntry();
    uint64_t v10 = Dictionary.init(minimumCapacity:)();
  }
  uint64_t v19 = v10;
  AccessibilityAttachment.init(properties:)();
  uint64_t v11 = v15;
  uint64_t v12 = v16;
  _ss23_ContiguousArrayStorageCy7SwiftUI4TextVGMaTm_1(0, (unint64_t *)&lazy cache variable for type metadata for MutableBox<AccessibilityAttachment>, MEMORY[0x1E4F40A58], MEMORY[0x1E4F3F398]);
  uint64_t v13 = swift_allocObject();
  *(void *)(v13 + 16) = v11;
  *(void *)(v13 + 24) = v12;
  uint64_t result = outlined init with copy of Button<ModifiedContent<StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, HStack<TupleView<(RotatingDisclosureIndicator, DisclosureGroupStyleConfiguration.Label, Spacer)>>, HStack<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, RotatingDisclosureIndicator)>>>, _PaddingLayout>>(v5, a4, (uint64_t (*)(void))type metadata accessor for ModifiedContent<ModifiedContent<IndexView, _EnvironmentKeyWritingModifier<PageIndexDisplayMode>>, _SafeAreaRegionsIgnoringLayout>);
  *(void *)(a4 + 112) = v13;
  *(void *)(a4 + 120) = 0;
  return result;
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  uint64_t v5 = v4;
  if (a3)
  {
    type metadata accessor for AnyAccessibilityPropertiesEntry();
    uint64_t v19 = Dictionary.init(minimumCapacity:)();
    _s7SwiftUI28AccessibilityPropertiesEntryVyAA0C12LabelStorageVSgGMaTm_3(0, (unint64_t *)&lazy cache variable for type metadata for AccessibilityPropertiesEntry<Double?>, &lazy cache variable for type metadata for Double?, MEMORY[0x1E4FBB3D0], MEMORY[0x1E4F41090]);
    uint64_t v17 = v9;
    uint64_t v18 = lazy protocol witness table accessor for type AccessibilityPropertiesEntry<Double?> and conformance AccessibilityPropertiesEntry<A>();
    uint64_t v15 = a1;
    LOBYTE(v16) = a2 & 1;
    specialized Dictionary.subscript.setter((uint64_t)&v15, MEMORY[0x1E4F40AC8]);
    uint64_t v10 = v19;
  }
  else
  {
    type metadata accessor for AnyAccessibilityPropertiesEntry();
    uint64_t v10 = Dictionary.init(minimumCapacity:)();
  }
  uint64_t v19 = v10;
  AccessibilityAttachment.init(properties:)();
  uint64_t v11 = v15;
  uint64_t v12 = v16;
  _ss23_ContiguousArrayStorageCy7SwiftUI4TextVGMaTm_1(0, (unint64_t *)&lazy cache variable for type metadata for MutableBox<AccessibilityAttachment>, MEMORY[0x1E4F40A58], MEMORY[0x1E4F3F398]);
  uint64_t v13 = swift_allocObject();
  *(void *)(v13 + 16) = v11;
  *(void *)(v13 + 24) = v12;
  uint64_t result = outlined init with copy of Subview(v5, a4);
  *(void *)(a4 + 96) = v13;
  *(void *)(a4 + 104) = 0;
  return result;
}

void specialized View.accessibility<A>(_:_:isEnabled:)(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v4 = v3;
  if (a2)
  {
    type metadata accessor for AnyAccessibilityPropertiesEntry();
    uint64_t v16 = Dictionary.init(minimumCapacity:)();
    uint64_t v7 = MEMORY[0x1E4F40E80];
    _s7SwiftUI28AccessibilityPropertiesEntryVyAA0C12LabelStorageVSgGMaTm_3(0, (unint64_t *)&lazy cache variable for type metadata for AccessibilityPropertiesEntry<AccessibilityValueStorage?>, &lazy cache variable for type metadata for AccessibilityValueStorage?, MEMORY[0x1E4F40E80], MEMORY[0x1E4F41090]);
    long long v15[3] = v8;
    void v15[4] = _s7SwiftUI28AccessibilityPropertiesEntryVyAA0C12LabelStorageVSgGACyxGAA03AnycdE0AAWlTm_2(&lazy protocol witness table cache variable for type AccessibilityPropertiesEntry<AccessibilityValueStorage?> and conformance AccessibilityPropertiesEntry<A>, (unint64_t *)&lazy cache variable for type metadata for AccessibilityPropertiesEntry<AccessibilityValueStorage?>, &lazy cache variable for type metadata for AccessibilityValueStorage?, v7);
    v15[0] = swift_allocObject();
    outlined init with copy of AccessibilityValueStorage?(a1, v15[0] + 16);
    specialized Dictionary.subscript.setter((uint64_t)v15, MEMORY[0x1E4F40B98]);
    uint64_t v9 = v16;
  }
  else
  {
    type metadata accessor for AnyAccessibilityPropertiesEntry();
    uint64_t v9 = Dictionary.init(minimumCapacity:)();
  }
  uint64_t v16 = v9;
  AccessibilityAttachment.init(properties:)();
  uint64_t v10 = v15[0];
  uint64_t v11 = v15[1];
  _ss23_ContiguousArrayStorageCy7SwiftUI4TextVGMaTm_1(0, (unint64_t *)&lazy cache variable for type metadata for MutableBox<AccessibilityAttachment>, MEMORY[0x1E4F40A58], MEMORY[0x1E4F3F398]);
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16) = v10;
  *(void *)(v12 + 24) = v11;
  outlined init with copy of Button<ModifiedContent<StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, HStack<TupleView<(RotatingDisclosureIndicator, DisclosureGroupStyleConfiguration.Label, Spacer)>>, HStack<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, RotatingDisclosureIndicator)>>>, _PaddingLayout>>(v4, a3, (uint64_t (*)(void))type metadata accessor for Button<ModifiedContent<StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, HStack<TupleView<(RotatingDisclosureIndicator, DisclosureGroupStyleConfiguration.Label, Spacer)>>, HStack<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, RotatingDisclosureIndicator)>>>, _PaddingLayout>>);
  type metadata accessor for ModifiedContent<StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, HStack<TupleView<(RotatingDisclosureIndicator, DisclosureGroupStyleConfiguration.Label, Spacer)>>, HStack<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, RotatingDisclosureIndicator)>>>, _PaddingLayout>(0, &lazy cache variable for type metadata for ModifiedContent<Button<ModifiedContent<StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, HStack<TupleView<(RotatingDisclosureIndicator, DisclosureGroupStyleConfiguration.Label, Spacer)>>, HStack<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, RotatingDisclosureIndicator)>>>, _PaddingLayout>>, AccessibilityAttachmentModifier>, (void (*)(uint64_t))type metadata accessor for Button<ModifiedContent<StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, HStack<TupleView<(RotatingDisclosureIndicator, DisclosureGroupStyleConfiguration.Label, Spacer)>>, HStack<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, RotatingDisclosureIndicator)>>>, _PaddingLayout>>);
  long long v14 = (uint64_t *)(a3 + *(int *)(v13 + 36));
  *long long v14 = v12;
  v14[1] = 0;
}

void specialized View.accessibility<A>(_:_:isEnabled:)(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v5 = v4;
  if (a3)
  {
    type metadata accessor for AnyAccessibilityPropertiesEntry();
    uint64_t v20 = Dictionary.init(minimumCapacity:)();
    _s7SwiftUI31AnyAccessibilityPropertiesEntry_pSgMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for AccessibilityPropertiesEntry<AccessibilityNullableOptionSet<AccessibilityTraitSet>>, (uint64_t (*)(uint64_t))type metadata accessor for AccessibilityNullableOptionSet<AccessibilityTraitSet>, MEMORY[0x1E4F41090]);
    uint64_t v18 = v9;
    uint64_t v19 = _s7SwiftUI28AccessibilityPropertiesEntryVyAA0C17NullableOptionSetVyAA0C10VisibilityVGGACyxGAA03AnycdE0AAWlTm_2((unint64_t *)&lazy protocol witness table cache variable for type AccessibilityPropertiesEntry<AccessibilityNullableOptionSet<AccessibilityTraitSet>> and conformance AccessibilityPropertiesEntry<A>, (unint64_t *)&lazy cache variable for type metadata for AccessibilityPropertiesEntry<AccessibilityNullableOptionSet<AccessibilityTraitSet>>, (uint64_t (*)(uint64_t))type metadata accessor for AccessibilityNullableOptionSet<AccessibilityTraitSet>);
    uint64_t v16 = a1;
    uint64_t v17 = a2;
    specialized Dictionary.subscript.setter((uint64_t)&v16, MEMORY[0x1E4F40BA8]);
    uint64_t v10 = v20;
  }
  else
  {
    type metadata accessor for AnyAccessibilityPropertiesEntry();
    uint64_t v10 = Dictionary.init(minimumCapacity:)();
  }
  uint64_t v20 = v10;
  AccessibilityAttachment.init(properties:)();
  uint64_t v11 = v16;
  uint64_t v12 = v17;
  _ss23_ContiguousArrayStorageCy7SwiftUI4TextVGMaTm_1(0, (unint64_t *)&lazy cache variable for type metadata for MutableBox<AccessibilityAttachment>, MEMORY[0x1E4F40A58], MEMORY[0x1E4F3F398]);
  uint64_t v13 = swift_allocObject();
  *(void *)(v13 + 16) = v11;
  *(void *)(v13 + 24) = v12;
  outlined init with copy of Button<ModifiedContent<StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, HStack<TupleView<(RotatingDisclosureIndicator, DisclosureGroupStyleConfiguration.Label, Spacer)>>, HStack<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, RotatingDisclosureIndicator)>>>, _PaddingLayout>>(v5, a4, (uint64_t (*)(void))type metadata accessor for ModifiedContent<Button<MappedViewElement.Placeholder>, IgnoreViewRespondersModifier>);
  type metadata accessor for ModifiedContent<StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, HStack<TupleView<(RotatingDisclosureIndicator, DisclosureGroupStyleConfiguration.Label, Spacer)>>, HStack<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, RotatingDisclosureIndicator)>>>, _PaddingLayout>(0, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<Button<MappedViewElement.Placeholder>, IgnoreViewRespondersModifier>, AccessibilityAttachmentModifier>, type metadata accessor for ModifiedContent<Button<MappedViewElement.Placeholder>, IgnoreViewRespondersModifier>);
  uint64_t v15 = (uint64_t *)(a4 + *(int *)(v14 + 36));
  *uint64_t v15 = v13;
  v15[1] = 0;
}

uint64_t specialized View.accessibility<A>(_:_:isEnabled:)@<X0>(unint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X8>)
{
  if (a2)
  {
    unsigned int v8 = a1;
    unint64_t v9 = HIDWORD(a1);
    type metadata accessor for AnyAccessibilityPropertiesEntry();
    uint64_t v17 = Dictionary.init(minimumCapacity:)();
    _s7SwiftUI31AnyAccessibilityPropertiesEntry_pSgMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for AccessibilityPropertiesEntry<AccessibilityNullableOptionSet<AccessibilityVisibility>>, (uint64_t (*)(uint64_t))type metadata accessor for AccessibilityNullableOptionSet<AccessibilityVisibility>, MEMORY[0x1E4F41090]);
    long long v16[3] = v10;
    uint64_t v16[4] = _s7SwiftUI28AccessibilityPropertiesEntryVyAA0C17NullableOptionSetVyAA0C10VisibilityVGGACyxGAA03AnycdE0AAWlTm_2((unint64_t *)&lazy protocol witness table cache variable for type AccessibilityPropertiesEntry<AccessibilityNullableOptionSet<AccessibilityVisibility>> and conformance AccessibilityPropertiesEntry<A>, (unint64_t *)&lazy cache variable for type metadata for AccessibilityPropertiesEntry<AccessibilityNullableOptionSet<AccessibilityVisibility>>, (uint64_t (*)(uint64_t))type metadata accessor for AccessibilityNullableOptionSet<AccessibilityVisibility>);
    v16[0] = __PAIR64__(v9, v8);
    specialized Dictionary.subscript.setter((uint64_t)v16, MEMORY[0x1E4F40AA8]);
    uint64_t v11 = v17;
  }
  else
  {
    type metadata accessor for AnyAccessibilityPropertiesEntry();
    uint64_t v11 = Dictionary.init(minimumCapacity:)();
  }
  uint64_t v17 = v11;
  AccessibilityAttachment.init(properties:)();
  uint64_t v12 = v16[0];
  uint64_t v13 = v16[1];
  _ss23_ContiguousArrayStorageCy7SwiftUI4TextVGMaTm_1(0, (unint64_t *)&lazy cache variable for type metadata for MutableBox<AccessibilityAttachment>, MEMORY[0x1E4F40A58], MEMORY[0x1E4F3F398]);
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = v12;
  *(void *)(v14 + 24) = v13;
  *(void *)a5 = a3;
  *(unsigned char *)(a5 + 8) = a4 & 1;
  *(void *)(a5 + 16) = v14;
  *(void *)(a5 + 24) = 0;

  return swift_bridgeObjectRetain();
}

uint64_t specialized View.accessibility<A>(_:_:isEnabled:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, char a4@<W3>, char a5@<W4>, uint64_t a6@<X8>)
{
  if (a4)
  {
    type metadata accessor for AnyAccessibilityPropertiesEntry();
    swift_bridgeObjectRetain();
    uint64_t v21 = Dictionary.init(minimumCapacity:)();
    _s7SwiftUI28AccessibilityPropertiesEntryVyAA0C12LabelStorageVSgGMaTm_3(0, (unint64_t *)&lazy cache variable for type metadata for AccessibilityPropertiesEntry<AccessibilityIdentifierStorage?>, (unint64_t *)&lazy cache variable for type metadata for AccessibilityIdentifierStorage?, MEMORY[0x1E4F41168], MEMORY[0x1E4F41090]);
    uint64_t v19 = v11;
    unint64_t v20 = lazy protocol witness table accessor for type AccessibilityPropertiesEntry<AccessibilityIdentifierStorage?> and conformance AccessibilityPropertiesEntry<A>();
    uint64_t v16 = a1;
    uint64_t v17 = a2;
    char v18 = a3;
    specialized Dictionary.subscript.setter((uint64_t)&v16, MEMORY[0x1E4F40A98]);
    uint64_t v12 = v21;
  }
  else
  {
    type metadata accessor for AnyAccessibilityPropertiesEntry();
    uint64_t v12 = Dictionary.init(minimumCapacity:)();
  }
  uint64_t v21 = v12;
  AccessibilityAttachment.init(properties:)();
  uint64_t v13 = v16;
  uint64_t v14 = v17;
  _ss23_ContiguousArrayStorageCy7SwiftUI4TextVGMaTm_1(0, (unint64_t *)&lazy cache variable for type metadata for MutableBox<AccessibilityAttachment>, MEMORY[0x1E4F40A58], MEMORY[0x1E4F3F398]);
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = v13;
  *(void *)(result + 24) = v14;
  *(unsigned char *)a6 = a5 & 1;
  *(void *)(a6 + 8) = result;
  *(void *)(a6 + 16) = 0;
  return result;
}

void specialized View.accessibility<A>(_:_:isEnabled:)(unint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v4 = v3;
  if (a2)
  {
    unsigned int v6 = a1;
    unint64_t v7 = HIDWORD(a1);
    type metadata accessor for AnyAccessibilityPropertiesEntry();
    uint64_t v16 = Dictionary.init(minimumCapacity:)();
    _s7SwiftUI31AnyAccessibilityPropertiesEntry_pSgMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for AccessibilityPropertiesEntry<AccessibilityNullableOptionSet<AccessibilityVisibility>>, (uint64_t (*)(uint64_t))type metadata accessor for AccessibilityNullableOptionSet<AccessibilityVisibility>, MEMORY[0x1E4F41090]);
    long long v15[3] = v8;
    void v15[4] = _s7SwiftUI28AccessibilityPropertiesEntryVyAA0C17NullableOptionSetVyAA0C10VisibilityVGGACyxGAA03AnycdE0AAWlTm_2((unint64_t *)&lazy protocol witness table cache variable for type AccessibilityPropertiesEntry<AccessibilityNullableOptionSet<AccessibilityVisibility>> and conformance AccessibilityPropertiesEntry<A>, (unint64_t *)&lazy cache variable for type metadata for AccessibilityPropertiesEntry<AccessibilityNullableOptionSet<AccessibilityVisibility>>, (uint64_t (*)(uint64_t))type metadata accessor for AccessibilityNullableOptionSet<AccessibilityVisibility>);
    v15[0] = __PAIR64__(v7, v6);
    specialized Dictionary.subscript.setter((uint64_t)v15, MEMORY[0x1E4F40AA8]);
    uint64_t v9 = v16;
  }
  else
  {
    type metadata accessor for AnyAccessibilityPropertiesEntry();
    uint64_t v9 = Dictionary.init(minimumCapacity:)();
  }
  uint64_t v16 = v9;
  AccessibilityAttachment.init(properties:)();
  uint64_t v10 = v15[0];
  uint64_t v11 = v15[1];
  _ss23_ContiguousArrayStorageCy7SwiftUI4TextVGMaTm_1(0, (unint64_t *)&lazy cache variable for type metadata for MutableBox<AccessibilityAttachment>, MEMORY[0x1E4F40A58], MEMORY[0x1E4F3F398]);
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16) = v10;
  *(void *)(v12 + 24) = v11;
  outlined init with copy of Button<ModifiedContent<StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, HStack<TupleView<(RotatingDisclosureIndicator, DisclosureGroupStyleConfiguration.Label, Spacer)>>, HStack<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, RotatingDisclosureIndicator)>>>, _PaddingLayout>>(v4, a3, (uint64_t (*)(void))type metadata accessor for ModifiedContent<ModifiedContent<Button<ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>);
  type metadata accessor for ModifiedContent<StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, HStack<TupleView<(RotatingDisclosureIndicator, DisclosureGroupStyleConfiguration.Label, Spacer)>>, HStack<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, RotatingDisclosureIndicator)>>>, _PaddingLayout>(0, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, AccessibilityAttachmentModifier>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<Button<ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>);
  uint64_t v14 = (uint64_t *)(a3 + *(int *)(v13 + 36));
  *uint64_t v14 = v12;
  v14[1] = 0;
}

void specialized View.accessibility<A>(_:_:isEnabled:)(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, char a4@<W3>, uint64_t a5@<X8>)
{
  uint64_t v6 = v5;
  if (a4)
  {
    type metadata accessor for AnyAccessibilityPropertiesEntry();
    swift_bridgeObjectRetain();
    uint64_t v23 = Dictionary.init(minimumCapacity:)();
    _s7SwiftUI28AccessibilityPropertiesEntryVyAA0C12LabelStorageVSgGMaTm_3(0, (unint64_t *)&lazy cache variable for type metadata for AccessibilityPropertiesEntry<AccessibilityIdentifierStorage?>, (unint64_t *)&lazy cache variable for type metadata for AccessibilityIdentifierStorage?, MEMORY[0x1E4F41168], MEMORY[0x1E4F41090]);
    uint64_t v21 = v11;
    unint64_t v22 = lazy protocol witness table accessor for type AccessibilityPropertiesEntry<AccessibilityIdentifierStorage?> and conformance AccessibilityPropertiesEntry<A>();
    uint64_t v18 = a1;
    uint64_t v19 = a2;
    char v20 = a3;
    specialized Dictionary.subscript.setter((uint64_t)&v18, MEMORY[0x1E4F40A98]);
    uint64_t v12 = v23;
  }
  else
  {
    type metadata accessor for AnyAccessibilityPropertiesEntry();
    uint64_t v12 = Dictionary.init(minimumCapacity:)();
  }
  uint64_t v23 = v12;
  AccessibilityAttachment.init(properties:)();
  uint64_t v13 = v18;
  uint64_t v14 = v19;
  _ss23_ContiguousArrayStorageCy7SwiftUI4TextVGMaTm_1(0, (unint64_t *)&lazy cache variable for type metadata for MutableBox<AccessibilityAttachment>, MEMORY[0x1E4F40A58], MEMORY[0x1E4F3F398]);
  uint64_t v15 = swift_allocObject();
  *(void *)(v15 + 16) = v13;
  *(void *)(v15 + 24) = v14;
  outlined init with copy of Button<ModifiedContent<StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, HStack<TupleView<(RotatingDisclosureIndicator, DisclosureGroupStyleConfiguration.Label, Spacer)>>, HStack<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, RotatingDisclosureIndicator)>>>, _PaddingLayout>>(v6, a5, (uint64_t (*)(void))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, _EnvironmentKeyWritingModifier<Image.Scale>>, LabelStyleWritingModifier<IconOnlyLabelStyle>>>, _EnvironmentKeyWritingModifier<ControlSize>>, _EnvironmentKeyWritingModifier<Bool>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>);
  type metadata accessor for ModifiedContent<StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, HStack<TupleView<(RotatingDisclosureIndicator, DisclosureGroupStyleConfiguration.Label, Spacer)>>, HStack<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, RotatingDisclosureIndicator)>>>, _PaddingLayout>(0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, _EnvironmentKeyWritingModifier<Image.Scale>>, LabelStyleWritingModifier<IconOnlyLabelStyle>>>, _EnvironmentKeyWritingModifier<ControlSize>>, _EnvironmentKeyWritingModifier<Bool>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, AccessibilityAttachmentModifier>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, _EnvironmentKeyWritingModifier<Image.Scale>>, LabelStyleWritingModifier<IconOnlyLabelStyle>>>, _EnvironmentKeyWritingModifier<ControlSize>>, _EnvironmentKeyWritingModifier<Bool>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>);
  uint64_t v17 = (uint64_t *)(a5 + *(int *)(v16 + 36));
  *uint64_t v17 = v15;
  v17[1] = 0;
}

uint64_t specialized View.accessibility<A>(_:_:isEnabled:)@<X0>(unint64_t a1@<X0>, char a2@<W1>, void *a3@<X8>)
{
  uint64_t v4 = v3;
  if (a2)
  {
    unsigned int v6 = a1;
    unint64_t v7 = HIDWORD(a1);
    type metadata accessor for AnyAccessibilityPropertiesEntry();
    uint64_t v15 = Dictionary.init(minimumCapacity:)();
    _s7SwiftUI31AnyAccessibilityPropertiesEntry_pSgMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for AccessibilityPropertiesEntry<AccessibilityNullableOptionSet<AccessibilityVisibility>>, (uint64_t (*)(uint64_t))type metadata accessor for AccessibilityNullableOptionSet<AccessibilityVisibility>, MEMORY[0x1E4F41090]);
    void v14[3] = v8;
    void v14[4] = _s7SwiftUI28AccessibilityPropertiesEntryVyAA0C17NullableOptionSetVyAA0C10VisibilityVGGACyxGAA03AnycdE0AAWlTm_2((unint64_t *)&lazy protocol witness table cache variable for type AccessibilityPropertiesEntry<AccessibilityNullableOptionSet<AccessibilityVisibility>> and conformance AccessibilityPropertiesEntry<A>, (unint64_t *)&lazy cache variable for type metadata for AccessibilityPropertiesEntry<AccessibilityNullableOptionSet<AccessibilityVisibility>>, (uint64_t (*)(uint64_t))type metadata accessor for AccessibilityNullableOptionSet<AccessibilityVisibility>);
    v14[0] = __PAIR64__(v7, v6);
    specialized Dictionary.subscript.setter((uint64_t)v14, MEMORY[0x1E4F40AA8]);
    uint64_t v9 = v15;
  }
  else
  {
    type metadata accessor for AnyAccessibilityPropertiesEntry();
    uint64_t v9 = Dictionary.init(minimumCapacity:)();
  }
  uint64_t v15 = v9;
  AccessibilityAttachment.init(properties:)();
  uint64_t v10 = v14[0];
  uint64_t v11 = v14[1];
  _ss23_ContiguousArrayStorageCy7SwiftUI4TextVGMaTm_1(0, (unint64_t *)&lazy cache variable for type metadata for MutableBox<AccessibilityAttachment>, MEMORY[0x1E4F40A58], MEMORY[0x1E4F3F398]);
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16) = v10;
  *(void *)(v12 + 24) = v11;
  memcpy(a3, v4, 0x191uLL);
  a3[51] = v12;
  a3[52] = 0;

  return outlined retain of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_VariadicView.Tree<_LayoutRoot<StackItemLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GeometryReader<ModifiedContent<MultimodalNavigationStackViewHost<_ViewModifier_Content<StackItemModifier>>, _SafeAreaRegionsIgnoringLayout>>, NavigationTitleActionModifier>, _BackgroundModifier<ModifiedContent<GradientBackground, _ShadowEffect>>>, OnScrollStateChange>, _InsetViewModifier<MultimodalNavigationTitleBar>>, _AnimationModifier<EquatableNavigationTitle?>>>, _OverlayStyleModifier<Color>>, _TraitWritingModifier<TransitionTraitKey>>, _TraitWritingModifier<ZIndexTraitKey>>, _AllowsHitTestingModifier>((uint64_t)v4);
}

uint64_t specialized View.accessibility<A>(_:_:isEnabled:)@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char a5@<W4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  if (a2)
  {
    type metadata accessor for AnyAccessibilityPropertiesEntry();
    swift_bridgeObjectRetain();
    uint64_t v20 = Dictionary.init(minimumCapacity:)();
    type metadata accessor for AccessibilityPropertiesEntry<[AnyAccessibilityAction]>(0, &lazy cache variable for type metadata for AccessibilityPropertiesEntry<[Text]>, (unint64_t *)&lazy cache variable for type metadata for [Text], MEMORY[0x1E4F41420]);
    v19[3] = v13;
    void v19[4] = lazy protocol witness table accessor for type AccessibilityPropertiesEntry<[Text]> and conformance AccessibilityPropertiesEntry<A>();
    v19[0] = a1;
    specialized Dictionary.subscript.setter((uint64_t)v19, MEMORY[0x1E4F40B78]);
    uint64_t v14 = v20;
  }
  else
  {
    type metadata accessor for AnyAccessibilityPropertiesEntry();
    uint64_t v14 = Dictionary.init(minimumCapacity:)();
  }
  uint64_t v20 = v14;
  AccessibilityAttachment.init(properties:)();
  uint64_t v15 = v19[0];
  uint64_t v16 = v19[1];
  _ss23_ContiguousArrayStorageCy7SwiftUI4TextVGMaTm_1(0, (unint64_t *)&lazy cache variable for type metadata for MutableBox<AccessibilityAttachment>, MEMORY[0x1E4F40A58], MEMORY[0x1E4F3F398]);
  uint64_t v17 = swift_allocObject();
  *(void *)(v17 + 16) = v15;
  *(void *)(v17 + 24) = v16;
  *(void *)a7 = a3;
  *(void *)(a7 + 8) = a4;
  *(unsigned char *)(a7 + 16) = a5 & 1;
  *(void *)(a7 + 24) = a6;
  *(void *)(a7 + 32) = v17;
  *(void *)(a7 + 40) = 0;
  outlined copy of Text.Storage(a3, a4, a5 & 1);

  return swift_bridgeObjectRetain();
}

uint64_t specialized View.accessibility<A>(_:_:isEnabled:)@<X0>(unint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char a5@<W4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  if (a2)
  {
    unsigned int v12 = a1;
    unint64_t v13 = HIDWORD(a1);
    type metadata accessor for AnyAccessibilityPropertiesEntry();
    uint64_t v21 = Dictionary.init(minimumCapacity:)();
    _s7SwiftUI31AnyAccessibilityPropertiesEntry_pSgMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for AccessibilityPropertiesEntry<AccessibilityNullableOptionSet<AccessibilityVisibility>>, (uint64_t (*)(uint64_t))type metadata accessor for AccessibilityNullableOptionSet<AccessibilityVisibility>, MEMORY[0x1E4F41090]);
    v20[3] = v14;
    v20[4] = _s7SwiftUI28AccessibilityPropertiesEntryVyAA0C17NullableOptionSetVyAA0C10VisibilityVGGACyxGAA03AnycdE0AAWlTm_2((unint64_t *)&lazy protocol witness table cache variable for type AccessibilityPropertiesEntry<AccessibilityNullableOptionSet<AccessibilityVisibility>> and conformance AccessibilityPropertiesEntry<A>, (unint64_t *)&lazy cache variable for type metadata for AccessibilityPropertiesEntry<AccessibilityNullableOptionSet<AccessibilityVisibility>>, (uint64_t (*)(uint64_t))type metadata accessor for AccessibilityNullableOptionSet<AccessibilityVisibility>);
    v20[0] = __PAIR64__(v13, v12);
    specialized Dictionary.subscript.setter((uint64_t)v20, MEMORY[0x1E4F40AA8]);
    uint64_t v15 = v21;
  }
  else
  {
    type metadata accessor for AnyAccessibilityPropertiesEntry();
    uint64_t v15 = Dictionary.init(minimumCapacity:)();
  }
  uint64_t v21 = v15;
  AccessibilityAttachment.init(properties:)();
  uint64_t v16 = v20[0];
  uint64_t v17 = v20[1];
  _ss23_ContiguousArrayStorageCy7SwiftUI4TextVGMaTm_1(0, (unint64_t *)&lazy cache variable for type metadata for MutableBox<AccessibilityAttachment>, MEMORY[0x1E4F40A58], MEMORY[0x1E4F3F398]);
  uint64_t v18 = swift_allocObject();
  *(void *)(v18 + 16) = v16;
  *(void *)(v18 + 24) = v17;
  *(void *)a7 = a3;
  *(void *)(a7 + 8) = a4;
  *(unsigned char *)(a7 + 16) = a5 & 1;
  *(void *)(a7 + 24) = a6;
  *(void *)(a7 + 32) = v18;
  *(void *)(a7 + 40) = 0;
  outlined copy of Text.Storage(a3, a4, a5 & 1);

  return swift_bridgeObjectRetain();
}

SwiftUI::_DisclosureIndicator __swiftcall _DisclosureIndicator.init()()
{
  *uint64_t v0 = 0;
  return result;
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance _DisclosureIndicator()
{
  return static ModifiedContent<>._viewListCount(inputs:)();
}

uint64_t protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance DisclosureIndicatorDifferentiatesWithoutColor()
{
  return PropertyList.subscript.setter();
}

uint64_t sub_1882E9598@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = EnvironmentValues.accessibilityDifferentiateWithoutColor.getter();
  *a1 = result & 1;
  return result;
}

uint64_t sub_1882E95D8()
{
  return EnvironmentValues.accessibilityDifferentiateWithoutColor.setter();
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance DisclosureIndicator_PhoneTV()
{
  return static ModifiedContent<>._viewListCount(inputs:)();
}

uint64_t assignWithCopy for DisclosureIndicator_PhoneTV(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  char v5 = *(unsigned char *)(a2 + 8);
  outlined copy of Environment<Bool>.Content(*(void *)a2, v5);
  uint64_t v6 = *(void *)a1;
  char v7 = *(unsigned char *)(a1 + 8);
  *(void *)a1 = v4;
  *(unsigned char *)(a1 + 8) = v5;
  outlined consume of Environment<Bool>.Content(v6, v7);
  uint64_t v8 = *(void *)(a2 + 16);
  char v9 = *(unsigned char *)(a2 + 24);
  outlined copy of Environment<Bool>.Content(v8, v9);
  uint64_t v10 = *(void *)(a1 + 16);
  char v11 = *(unsigned char *)(a1 + 24);
  *(void *)(a1 + 16) = v8;
  *(unsigned char *)(a1 + 24) = v9;
  outlined consume of Environment<Bool>.Content(v10, v11);
  *(unsigned char *)(a1 + 25) = *(unsigned char *)(a2 + 25);
  return a1;
}

uint64_t assignWithTake for DisclosureIndicator_PhoneTV(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  char v5 = *((unsigned char *)a2 + 8);
  uint64_t v6 = *(void *)a1;
  char v7 = *(unsigned char *)(a1 + 8);
  *(void *)a1 = v4;
  *(unsigned char *)(a1 + 8) = v5;
  outlined consume of Environment<Bool>.Content(v6, v7);
  char v8 = *((unsigned char *)a2 + 24);
  uint64_t v9 = *(void *)(a1 + 16);
  char v10 = *(unsigned char *)(a1 + 24);
  *(void *)(a1 + 16) = a2[2];
  *(unsigned char *)(a1 + 24) = v8;
  outlined consume of Environment<Bool>.Content(v9, v10);
  *(unsigned char *)(a1 + 25) = *((unsigned char *)a2 + 25);
  return a1;
}

uint64_t sub_1882E976C()
{
  if (*(void *)(v0 + 56))
  {
    if (*(void *)(v0 + 40)) {
      __swift_destroy_boxed_opaque_existential_1(v0 + 16);
    }
    swift_bridgeObjectRelease();
  }

  return swift_deallocObject();
}

void *outlined retain of ModifiedContent<Stepper<EmptyView>, LabelsHiddenModifier>(void *a1)
{
  uint64_t v2 = a1[1];
  uint64_t v3 = a1[3];
  uint64_t v4 = (void *)a1[7];
  char v5 = (void *)a1[8];
  uint64_t v6 = (void *)a1[9];
  char v7 = (void *)a1[10];
  swift_retain();
  outlined copy of AppIntentExecutor?(v2);
  outlined copy of AppIntentExecutor?(v3);
  swift_retain();
  outlined copy of AccessibilitySliderValue?(v4, v5, v6, v7);
  return a1;
}

unsigned char *storeEnumTagSinglePayload for _DisclosureIndicator(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1882E992CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

uint64_t sub_1882E9954()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<StaticIf<DisclosureIndicatorDifferentiatesWithoutColor, ModifiedContent<StaticIf<InterfaceIdiomPredicate<VisionInterfaceIdiom>, Image, ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<Font?>>>, _EnvironmentKeyTransformModifier<SymbolVariants>>, StaticIf<InterfaceIdiomPredicate<VisionInterfaceIdiom>, Image, ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<Font?>>>>, _ForegroundStyleModifier<DisclosureIndicatorShapeStyle>>, _PaddingLayout> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<StaticIf<DisclosureIndicatorDifferentiatesWithoutColor, ModifiedContent<StaticIf<InterfaceIdiomPredicate<VisionInterfaceIdiom>, Image, ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<Font?>>>, _EnvironmentKeyTransformModifier<SymbolVariants>>, StaticIf<InterfaceIdiomPredicate<VisionInterfaceIdiom>, Image, ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<Font?>>>>, _ForegroundStyleModifier<DisclosureIndicatorShapeStyle>>, _PaddingLayout> and conformance <> ModifiedContent<A, B>, type metadata accessor for ModifiedContent<ModifiedContent<StaticIf<DisclosureIndicatorDifferentiatesWithoutColor, ModifiedContent<StaticIf<InterfaceIdiomPredicate<VisionInterfaceIdiom>, Image, ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<Font?>>>, _EnvironmentKeyTransformModifier<SymbolVariants>>, StaticIf<InterfaceIdiomPredicate<VisionInterfaceIdiom>, Image, ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<Font?>>>>, _ForegroundStyleModifier<DisclosureIndicatorShapeStyle>>, _PaddingLayout>, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<StaticIf<DisclosureIndicatorDifferentiatesWithoutColor, ModifiedContent<StaticIf<InterfaceIdiomPredicate<VisionInterfaceIdiom>, Image, ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<Font?>>>, _EnvironmentKeyTransformModifier<SymbolVariants>>, StaticIf<InterfaceIdiomPredicate<VisionInterfaceIdiom>, Image, ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<Font?>>>>, _ForegroundStyleModifier<DisclosureIndicatorShapeStyle>> and conformance <> ModifiedContent<A, B>);
}

_UNKNOWN **base witness table accessor for _GraphInputsModifier in DisclosureIndicatorDifferentiatesWithoutColor()
{
  return &protocol witness table for DisclosureIndicatorDifferentiatesWithoutColor;
}

void type metadata accessor for AccessibilityPropertiesEntry<[AnyAccessibilityAction]>(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t a4)
{
  if (!*a2)
  {
    _ss23_ContiguousArrayStorageCy7SwiftUI4TextVGMaTm_1(255, a3, a4, MEMORY[0x1E4FBB320]);
    unint64_t v5 = type metadata accessor for AccessibilityPropertiesEntry();
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

unint64_t lazy protocol witness table accessor for type AccessibilityPropertiesEntry<[Text]> and conformance AccessibilityPropertiesEntry<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type AccessibilityPropertiesEntry<[Text]> and conformance AccessibilityPropertiesEntry<A>;
  if (!lazy protocol witness table cache variable for type AccessibilityPropertiesEntry<[Text]> and conformance AccessibilityPropertiesEntry<A>)
  {
    type metadata accessor for AccessibilityPropertiesEntry<[AnyAccessibilityAction]>(255, &lazy cache variable for type metadata for AccessibilityPropertiesEntry<[Text]>, (unint64_t *)&lazy cache variable for type metadata for [Text], MEMORY[0x1E4F41420]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityPropertiesEntry<[Text]> and conformance AccessibilityPropertiesEntry<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AccessibilityPropertiesEntry<AccessibilityIdentifierStorage?> and conformance AccessibilityPropertiesEntry<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type AccessibilityPropertiesEntry<AccessibilityIdentifierStorage?> and conformance AccessibilityPropertiesEntry<A>;
  if (!lazy protocol witness table cache variable for type AccessibilityPropertiesEntry<AccessibilityIdentifierStorage?> and conformance AccessibilityPropertiesEntry<A>)
  {
    _s7SwiftUI28AccessibilityPropertiesEntryVyAA0C12LabelStorageVSgGMaTm_3(255, (unint64_t *)&lazy cache variable for type metadata for AccessibilityPropertiesEntry<AccessibilityIdentifierStorage?>, (unint64_t *)&lazy cache variable for type metadata for AccessibilityIdentifierStorage?, MEMORY[0x1E4F41168], MEMORY[0x1E4F41090]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityPropertiesEntry<AccessibilityIdentifierStorage?> and conformance AccessibilityPropertiesEntry<A>);
  }
  return result;
}

uint64_t outlined retain of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_VariadicView.Tree<_LayoutRoot<StackItemLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GeometryReader<ModifiedContent<MultimodalNavigationStackViewHost<_ViewModifier_Content<StackItemModifier>>, _SafeAreaRegionsIgnoringLayout>>, NavigationTitleActionModifier>, _BackgroundModifier<ModifiedContent<GradientBackground, _ShadowEffect>>>, OnScrollStateChange>, _InsetViewModifier<MultimodalNavigationTitleBar>>, _AnimationModifier<EquatableNavigationTitle?>>>, _OverlayStyleModifier<Color>>, _TraitWritingModifier<TransitionTraitKey>>, _TraitWritingModifier<ZIndexTraitKey>>, _AllowsHitTestingModifier>(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  uint64_t v3 = *(unsigned __int8 *)(a1 + 48);
  uint64_t v4 = *(void *)(a1 + 152);
  uint64_t v5 = *(void *)(a1 + 160);
  uint64_t v8 = *(void *)(a1 + 176);
  uint64_t v9 = *(void *)(a1 + 168);
  uint64_t v7 = *(void *)(a1 + 184);
  uint64_t v13 = *(void *)(a1 + 312);
  uint64_t v14 = *(void *)(a1 + 304);
  uint64_t v11 = *(void *)(a1 + 328);
  uint64_t v12 = *(void *)(a1 + 320);
  uint64_t v10 = *(void *)(a1 + 336);
  swift_retain();
  swift_retain();
  outlined copy of Environment<Color?>.Content(v2, v3);
  swift_retain();
  swift_retain();
  swift_retain();
  outlined copy of NavigationTitleStorage?(v4, v5, v9, v8, v7);
  swift_retain();
  outlined copy of NavigationTitleStorage?(v14, v13, v12, v11, v10);
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t *outlined retain of ModifiedContent<ModifiedContent<ModifiedContent<BadgeViewStyleConfiguration.Content, _OverlayModifier<ModifiedContent<HStack<TupleView<(Spacer, VStack<TupleView<(Badge, Spacer)>>)>>, AccessibilityAttachmentModifier>?>>, NeedsTopPaddingForGridBadgesModifier>, StaticIf<StyleContextAcceptsPredicate<MultimodalListContext>, TopPaddingForBadgeModifier, EmptyModifier>>(uint64_t *a1)
{
  return a1;
}

uint64_t outlined copy of ModifiedContent<HStack<TupleView<(Spacer, VStack<TupleView<(Badge, Spacer)>>)>>, AccessibilityAttachmentModifier>?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  if (a18)
  {
    outlined copy of Environment<Bool>.Content(a9, a10 & 1);
    swift_retain();
    return swift_retain();
  }
  return result;
}

uint64_t outlined retain of HStack<TupleView<(Spacer, VStack<TupleView<(Badge, Spacer)>>)>>(uint64_t a1)
{
  return a1;
}

__n128 protocol witness for Rule.value.getter in conformance SharingActivityPickerModifier.Child@<Q0>(uint64_t *a1@<X8>, __n128 a2@<Q0>)
{
  a2.n128_u64[0] = *v2;
  __n128 v9 = a2;
  uint64_t Value = AGGraphGetValue();
  outlined init with take of SharingPickerSource(Value, (uint64_t)v10);
  outlined retain of SharingPickerSource(v10, outlined copy of SharingPickerSource);
  char v5 = SharingPickerSource.isPresented.getter();
  if (v5)
  {
    AGGraphGetValue();
    swift_retain();
  }
  type metadata accessor for CGRect(0);
  uint64_t v6 = Anchor.Source.init<A>(_:)();
  uint64_t v7 = swift_allocObject();
  *(unsigned char *)(v7 + 16) = v5 & 1;
  outlined init with take of SharingPickerSource((uint64_t)v10, v7 + 24);
  __n128 result = v9;
  *(void *)(v7 + 160) = v9.n128_u64[0];
  *a1 = v6;
  a1[1] = (uint64_t)partial apply for closure #1 in SharingActivityPickerModifier.Child.value.getter;
  a1[2] = v7;
  return result;
}

void protocol witness for ViewModifier.body(content:) in conformance SharingActivityPickerModifier()
{
}

double SharingActivityPickerPresentation.withStorage(_:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  outlined init with take of AnyShareConfiguration.Storage(a1, (uint64_t)v91);
  uint64_t v5 = v91[0];
  uint64_t v6 = v91[1];
  uint64_t v7 = v91[2];
  uint64_t v8 = v91[3];
  char v9 = v92;
  outlined init with take of SharingPickerSource(v3, (uint64_t)v101);
  outlined init with take of SharingPickerSource((uint64_t)v101, (uint64_t)v102);
  if (_s7SwiftUI19SharingPickerSourceOWOg((uint64_t)v102) == 1)
  {
    uint64_t v10 = _s7SwiftUI19SharingPickerSourceOWOj0_((uint64_t)v102);
    uint64_t v58 = *(void *)(v10 + 8);
    uint64_t v59 = *(void *)v10;
    char v57 = *(unsigned char *)(v10 + 16);
    uint64_t v55 = v5;
    uint64_t v56 = *(void *)(v10 + 24);
    uint64_t v53 = *(void *)(v10 + 40);
    uint64_t v54 = *(void *)(v10 + 32);
    uint64_t v51 = *(void *)(v10 + 56);
    uint64_t v52 = *(void *)(v10 + 48);
    uint64_t v11 = *(void *)(v10 + 72);
    uint64_t v12 = *(void *)(v10 + 80);
    uint64_t v68 = v7;
    uint64_t v70 = v6;
    uint64_t v14 = *(void *)(v10 + 88);
    uint64_t v13 = *(void *)(v10 + 96);
    uint64_t v15 = *(void *)(v10 + 104);
    *(void *)&long long v61 = *(void *)(v10 + 112);
    uint64_t v66 = v8;
    uint64_t v16 = *(void *)(v10 + 120);
    uint64_t v17 = *(void *)(v10 + 128);
    *((void *)&v61 + 1) = v16;
    char v50 = *(unsigned char *)(v10 + 64);
    outlined retain of SharingPickerSource(v101, outlined copy of SharingPickerSource);
    outlined retain of AnyShareConfiguration.Storage(a1);
    outlined copy of Text?(v11, v12, v14, v13);
    outlined copy of Text?(v15, v61, v16, v17);
    outlined consume of AnyShareConfiguration.Storage(v54, v53, v52, v51, v50);
    outlined copy of AnyShareConfiguration.Storage(v55, v70, v68, v66, v9);
    outlined copy of Text?(v11, v12, v14, v13);
    outlined copy of Text?(v15, v61, v16, v17);
    outlined consume of Text?(v15, v61, v16, v17);
    outlined consume of Text?(v11, v12, v14, v13);
    outlined consume of AnyShareConfiguration.Storage(v55, v70, v68, v66, v9);
    outlined consume of Text?(v11, v12, v14, v13);
    outlined consume of Text?(v15, v61, v16, v17);
    *(void *)&long long v82 = v59;
    *((void *)&v82 + 1) = v58;
    LOBYTE(v83) = v57;
    *((void *)&v83 + 1) = v56;
    *(void *)&long long v84 = v55;
    *((void *)&v84 + 1) = v70;
    *(void *)&long long v85 = v68;
    *((void *)&v85 + 1) = v66;
    LOBYTE(v86) = v9;
    *((void *)&v86 + 1) = v11;
    *(void *)&long long v87 = v12;
    *((void *)&v87 + 1) = v14;
    *(void *)&long long v88 = v13;
    *((void *)&v88 + 1) = v15;
    long long v89 = v61;
    *(void *)&long long v90 = v17;
    _s7SwiftUI19SharingPickerSourceOWOi0_((uint64_t)&v82);
  }
  else
  {
    uint64_t v18 = (long long *)_s7SwiftUI19SharingPickerSourceOWOj0_((uint64_t)v102);
    long long v19 = *v18;
    long long v20 = v18[1];
    long long v21 = v18[3];
    long long v84 = v18[2];
    long long v85 = v21;
    long long v82 = v19;
    long long v83 = v20;
    long long v22 = v18[4];
    long long v23 = v18[5];
    long long v24 = v18[7];
    long long v88 = v18[6];
    long long v89 = v24;
    long long v86 = v22;
    long long v87 = v23;
    outlined retain of Binding<AnyIdentifiableShareConfiguration?>((uint64_t)v18);
    type metadata accessor for Binding<AnyIdentifiableShareConfiguration?>();
    MEMORY[0x18C113DA0](&v74);
    if (v79 == 1)
    {
      long long v93 = v74;
      long long v94 = v75;
      long long v95 = v76;
      long long v96 = v77;
      uint64_t v97 = v78;
      uint64_t v98 = 1;
      long long v99 = v80;
      long long v100 = v81;
      outlined init with take of SharingPickerSource((uint64_t)v101, (uint64_t)&v82);
      uint64_t v25 = _s7SwiftUI19SharingPickerSourceOWOj0_((uint64_t)&v82);
      outlined retain of Binding<AnyIdentifiableShareConfiguration?>(v25);
      dispatch thunk of AnyLocation.set(_:transaction:)();
    }
    else
    {
      uint64_t v72 = v3;
      uint64_t v26 = *((void *)&v74 + 1);
      uint64_t v28 = *((void *)&v75 + 1);
      uint64_t v27 = v75;
      uint64_t v29 = v76;
      char v30 = BYTE8(v76);
      outlined retain of AnyShareConfiguration.Storage(a1);
      outlined consume of AnyShareConfiguration.Storage(v26, v27, v28, v29, v30);
      outlined init with take of AnyShareConfiguration.Storage(a1, (uint64_t)&v74 + 8);
      uint64_t v69 = *((void *)&v74 + 1);
      uint64_t v71 = v74;
      uint64_t v65 = *((void *)&v75 + 1);
      uint64_t v67 = v75;
      uint64_t v63 = *((void *)&v76 + 1);
      uint64_t v64 = v76;
      uint64_t v60 = *((void *)&v77 + 1);
      uint64_t v62 = v77;
      uint64_t v31 = v78;
      uint64_t v32 = v79;
      long long v33 = v80;
      long long v34 = v81;
      long long v93 = v74;
      long long v94 = v75;
      long long v95 = v76;
      long long v96 = v77;
      uint64_t v97 = v78;
      uint64_t v98 = v79;
      long long v99 = v80;
      long long v100 = v81;
      outlined init with take of SharingPickerSource((uint64_t)v101, (uint64_t)&v82);
      uint64_t v35 = _s7SwiftUI19SharingPickerSourceOWOj0_((uint64_t)&v82);
      outlined retain of Binding<AnyIdentifiableShareConfiguration?>(v35);
      dispatch thunk of AnyLocation.set(_:transaction:)();
      uint64_t v49 = v31;
      uint64_t v3 = v72;
      outlined copy of AnyIdentifiableShareConfiguration?(v71, v69, v67, v65, v64, v63, v62, v60, v49, v32, v33, *((uint64_t *)&v33 + 1), v34, *((uint64_t *)&v34 + 1), (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))outlined consume of AnyShareConfiguration.Storage, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))outlined consume of Text?);
    }
    outlined retain of SharingPickerSource(v101, outlined consume of SharingPickerSource);
    long long v36 = *v18;
    long long v37 = v18[1];
    long long v38 = v18[3];
    long long v84 = v18[2];
    long long v85 = v38;
    long long v82 = v36;
    long long v83 = v37;
    long long v39 = v18[4];
    long long v40 = v18[5];
    long long v41 = v18[7];
    long long v88 = v18[6];
    long long v89 = v41;
    long long v86 = v39;
    long long v87 = v40;
    _s7SwiftUI19SharingPickerSourceOWOi_((uint64_t)&v82);
  }
  outlined init with take of SharingPickerSource((uint64_t)&v82, (uint64_t)&v93);
  uint64_t v42 = *(void *)(v3 + 136);
  int v43 = *(_DWORD *)(v3 + 144);
  outlined retain of SharingActivityPickerPresentation((uint64_t *)v3);
  outlined retain of SharingPickerSource(v101, outlined consume of SharingPickerSource);
  outlined init with take of SharingPickerSource((uint64_t)&v93, (uint64_t)&v82);
  *((void *)&v90 + 1) = v42;
  *(_DWORD *)(a2 + 144) = v43;
  long long v44 = v89;
  *(_OWORD *)(a2 + 96) = v88;
  *(_OWORD *)(a2 + 112) = v44;
  long long v45 = v85;
  *(_OWORD *)(a2 + 32) = v84;
  *(_OWORD *)(a2 + 48) = v45;
  long long v46 = v87;
  *(_OWORD *)(a2 + 64) = v86;
  *(_OWORD *)(a2 + 80) = v46;
  long long v47 = v83;
  *(_OWORD *)a2 = v82;
  *(_OWORD *)(a2 + 16) = v47;
  double result = *(double *)&v90;
  *(_OWORD *)(a2 + 128) = v90;
  return result;
}

id SharingActivityPickerBridge.popoverPresentationDelegate.getter()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(void **)(v0 + 224);
  if (v2)
  {
    id v3 = *(id *)(v0 + 224);
  }
  else
  {
    type metadata accessor for PopoverPresentationDelegate();
    uint64_t v4 = type metadata accessor for SharingActivityPickerBridge();
    uint64_t v5 = swift_retain();
    id v6 = specialized PopoverPresentationDelegate.__allocating_init<A>(delegate:)(v5, v4, (uint64_t)&protocol witness table for SharingActivityPickerBridge<A>);
    swift_release();
    uint64_t v7 = *(void **)(v1 + 224);
    *(void *)(v1 + 224) = v6;
    id v3 = v6;

    uint64_t v2 = 0;
  }
  id v8 = v2;
  return v3;
}

void SharingActivityPickerBridge.reset()()
{
  outlined init with take of SharingActivityPickerPresentation?(v0 + 56, (uint64_t)v10);
  outlined init with take of SharingActivityPickerPresentation?((uint64_t)v10, (uint64_t)v8);
  outlined init with take of SharingActivityPickerPresentation?((uint64_t)v10, (uint64_t)v11);
  if (_s7SwiftUI33SharingActivityPickerPresentation33_ED8966F32E79CAE8636A59B86DBA4A31LLVSgWOg((uint64_t)v11) != 1)
  {
    outlined init with take of SharingPickerSource((uint64_t)v8, (uint64_t)v9);
    outlined init with take of SharingActivityPickerPresentation?((uint64_t)v8, (uint64_t)v7);
    outlined release of SharingActivityPickerPresentation?((uint64_t)v10, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of SharingActivityPickerPresentation?);
    outlined retain of SharingPickerSource(v9, outlined copy of SharingPickerSource);
    outlined release of SharingActivityPickerPresentation?((uint64_t)v7, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of SharingActivityPickerPresentation?);
    uint64_t v1 = swift_allocObject();
    outlined init with take of SharingPickerSource((uint64_t)v9, v1 + 16);
    uint64_t v2 = swift_allocObject();
    *(void *)(v2 + 16) = partial apply for implicit closure #2 in implicit closure #1 in SharingActivityPickerBridge.reset();
    *(void *)(v2 + 24) = v1;
    swift_retain();
    static Update.enqueueAction(_:)();
    swift_release();
    swift_release();
  }
  _s7SwiftUI33SharingActivityPickerPresentation33_ED8966F32E79CAE8636A59B86DBA4A31LLVSgWOi0_((uint64_t)v7);
  outlined init with take of SharingActivityPickerPresentation?(v0 + 56, (uint64_t)v8);
  outlined init with take of SharingActivityPickerPresentation?((uint64_t)v7, v0 + 56);
  outlined release of SharingActivityPickerPresentation?((uint64_t)v8, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of SharingActivityPickerPresentation?);
  id v3 = *(void **)(v0 + 208);
  if (v3)
  {
    id v4 = objc_msgSend(v3, sel_presentingViewController);
    if (v4)
    {
LABEL_7:
      objc_msgSend(v4, sel_dismissViewControllerAnimated_completion_, 1, 0);

      goto LABEL_8;
    }
    uint64_t v5 = *(void **)(v0 + 208);
    if (v5)
    {
      id v4 = v5;
      goto LABEL_7;
    }
  }
LABEL_8:
  id v6 = *(void **)(v0 + 208);
  *(void *)(v0 + 208) = 0;
}

void *implicit closure #2 in implicit closure #1 in SharingActivityPickerBridge.reset()(void *a1)
{
  outlined init with take of SharingPickerSource((uint64_t)a1, (uint64_t)v5);
  outlined init with take of SharingPickerSource((uint64_t)v5, (uint64_t)v7);
  outlined init with take of SharingPickerSource((uint64_t)a1, (uint64_t)v6);
  if (_s7SwiftUI19SharingPickerSourceOWOg((uint64_t)v6) == 1)
  {
    _s7SwiftUI19SharingPickerSourceOWOj0_((uint64_t)v6);
    v4[0] = 0;
    swift_retain();
    swift_retain();
    dispatch thunk of AnyLocation.set(_:transaction:)();
    swift_release();
    return (void *)swift_release();
  }
  else
  {
    _s7SwiftUI19SharingPickerSourceOWOj0_((uint64_t)v6);
    outlined init with take of SharingPickerSource((uint64_t)v7, (uint64_t)v4);
    uint64_t v3 = _s7SwiftUI19SharingPickerSourceOWOj0_((uint64_t)v4);
    outlined retain of Binding<AnyIdentifiableShareConfiguration?>(v3);
    dispatch thunk of AnyLocation.set(_:transaction:)();
    return outlined retain of SharingPickerSource(a1, outlined consume of SharingPickerSource);
  }
}

void closure #1 in SharingActivityPickerBridge.present(_:presenter:)(uint64_t a1, uint64_t a2, void *a3)
{
  long long v5 = *(_OWORD *)(a2 + 112);
  long long v143 = *(_OWORD *)(a2 + 96);
  long long v144 = v5;
  long long v145 = *(_OWORD *)(a2 + 128);
  int v146 = *(_DWORD *)(a2 + 144);
  long long v6 = *(_OWORD *)(a2 + 48);
  long long v139 = *(_OWORD *)(a2 + 32);
  long long v140 = v6;
  long long v7 = *(_OWORD *)(a2 + 80);
  long long v141 = *(_OWORD *)(a2 + 64);
  long long v142 = v7;
  long long v8 = *(_OWORD *)(a2 + 16);
  long long v137 = *(_OWORD *)a2;
  long long v138 = v8;
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  if (!Strong) {
    return;
  }
  uint64_t v13 = Strong;
  v98[6] = v143;
  v98[7] = v144;
  v98[8] = v145;
  int v99 = v146;
  v98[2] = v139;
  v98[3] = v140;
  v98[4] = v141;
  v98[5] = v142;
  v98[0] = v137;
  v98[1] = v138;
  destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(v98, v10, v11, v12);
  v13 += 56;
  outlined init with take of SharingActivityPickerPresentation?(v13, (uint64_t)v100);
  outlined init with take of SharingActivityPickerPresentation?((uint64_t)v98, v13);
  outlined retain of SharingActivityPickerPresentation((uint64_t *)a2);
  outlined release of SharingActivityPickerPresentation?((uint64_t)v100, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of SharingActivityPickerPresentation?);
  outlined init with take of SharingPickerSource(a2, (uint64_t)v109);
  outlined init with take of SharingPickerSource((uint64_t)v109, (uint64_t)v128);
  LODWORD(v13) = _s7SwiftUI19SharingPickerSourceOWOg((uint64_t)v128);
  uint64_t v14 = _s7SwiftUI19SharingPickerSourceOWOj0_((uint64_t)v128);
  long long v81 = a3;
  if (v13 == 1)
  {
    uint64_t v15 = *(void *)(v14 + 32);
    uint64_t v16 = *(void *)(v14 + 40);
    char v17 = *(unsigned char *)(v14 + 64);
    uint64_t v19 = *(void *)(v14 + 72);
    uint64_t v18 = *(void *)(v14 + 80);
    uint64_t v20 = *(void *)(v14 + 88);
    uint64_t v67 = *(void *)(v14 + 56);
    uint64_t v69 = *(void *)(v14 + 96);
    uint64_t v21 = *(void *)(v14 + 112);
    uint64_t v71 = *(void *)(v14 + 104);
    uint64_t v22 = *(void *)(v14 + 120);
    uint64_t v23 = *(void *)(v14 + 128);
    uint64_t v82 = *(void *)(v14 + 48);
    outlined copy of AnyShareConfiguration.Storage(v15, v16, v82, v67, v17);
    uint64_t v73 = v19;
    uint64_t v75 = v18;
    uint64_t v24 = v19;
    uint64_t v25 = v18;
    uint64_t v26 = v15;
    char v77 = v20;
    uint64_t v27 = v69;
    outlined copy of Text?(v24, v25, v20, v69);
    uint64_t v28 = v21;
    char v29 = v22;
    uint64_t v79 = v23;
    uint64_t v30 = v23;
    char v31 = v22;
    uint64_t v32 = v21;
    uint64_t v33 = v71;
    uint64_t v34 = v67;
    outlined copy of Text?(v71, v28, v29, v30);
  }
  else
  {
    long long v35 = *(_OWORD *)(v14 + 80);
    long long v133 = *(_OWORD *)(v14 + 64);
    long long v134 = v35;
    long long v36 = *(_OWORD *)(v14 + 112);
    long long v135 = *(_OWORD *)(v14 + 96);
    long long v136 = v36;
    long long v37 = *(_OWORD *)(v14 + 16);
    long long v129 = *(_OWORD *)v14;
    long long v130 = v37;
    long long v38 = *(_OWORD *)(v14 + 48);
    long long v131 = *(_OWORD *)(v14 + 32);
    long long v132 = v38;
    long long v105 = v133;
    long long v106 = v35;
    long long v107 = v135;
    long long v108 = v36;
    long long v101 = v129;
    long long v102 = v37;
    long long v103 = v131;
    long long v104 = v38;
    type metadata accessor for Binding<AnyIdentifiableShareConfiguration?>();
    MEMORY[0x18C113DA0](v110);
    uint64_t v27 = v115;
    if (v115 == 1)
    {
      __break(1u);
      goto LABEL_22;
    }
    char v31 = v118;
    uint64_t v32 = v117;
    uint64_t v33 = v116;
    char v77 = v114;
    uint64_t v79 = v119;
    uint64_t v73 = v112;
    uint64_t v75 = v113;
    uint64_t v34 = v110[4];
    uint64_t v82 = v110[3];
    uint64_t v16 = v110[2];
    uint64_t v26 = v110[1];
    char v17 = v111;
  }
  outlined copy of AnyShareConfiguration.Storage(v26, v16, v82, v34, v17);
  outlined consume of AnyShareConfiguration.Storage(v26, v16, v82, v34, v17);
  outlined consume of Text?(v73, v75, v77, v27);
  outlined consume of Text?(v33, v32, v31, v79);
  if (!v17)
  {
    outlined consume of AnyShareConfiguration.Storage(v26, v16, v82, v34, 0);
LABEL_12:
    SharingActivityPickerBridge.show(presenter:presentation:)(v81, a2);
    swift_release();
    return;
  }
  if (v17 != 1)
  {
    swift_bridgeObjectRelease();
    outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v16);
    goto LABEL_12;
  }
  swift_release();
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v82);
  outlined init with take of SharingPickerSource((uint64_t)v109, (uint64_t)v110);
  int v39 = _s7SwiftUI19SharingPickerSourceOWOg((uint64_t)v110);
  uint64_t v40 = _s7SwiftUI19SharingPickerSourceOWOj0_((uint64_t)v110);
  if (v39 != 1)
  {
    long long v61 = *(_OWORD *)(v40 + 64);
    long long v125 = *(_OWORD *)(v40 + 80);
    long long v62 = *(_OWORD *)(v40 + 112);
    long long v126 = *(_OWORD *)(v40 + 96);
    long long v127 = v62;
    long long v63 = *(_OWORD *)(v40 + 16);
    long long v120 = *(_OWORD *)v40;
    long long v121 = v63;
    long long v64 = *(_OWORD *)(v40 + 48);
    long long v122 = *(_OWORD *)(v40 + 32);
    long long v123 = v64;
    long long v124 = v61;
    long long v105 = v61;
    long long v106 = v125;
    long long v107 = v126;
    long long v108 = v62;
    long long v101 = v120;
    long long v102 = v63;
    long long v103 = v122;
    long long v104 = v64;
    type metadata accessor for Binding<AnyIdentifiableShareConfiguration?>();
    MEMORY[0x18C113DA0](&v84);
    uint64_t v55 = v93;
    if (v93 != 1)
    {
      char v59 = v96;
      uint64_t v83 = v97;
      uint64_t v56 = v94;
      uint64_t v60 = v95;
      uint64_t v78 = v91;
      char v80 = v92;
      uint64_t v76 = v90;
      uint64_t v42 = v87;
      uint64_t v54 = v88;
      uint64_t v52 = v85;
      uint64_t v41 = v86;
      char v44 = v89;
      goto LABEL_15;
    }
LABEL_22:
    __break(1u);
    return;
  }
  uint64_t v41 = *(void *)(v40 + 40);
  uint64_t v42 = *(void *)(v40 + 48);
  uint64_t v43 = *(void *)(v40 + 56);
  char v44 = *(unsigned char *)(v40 + 64);
  uint64_t v45 = *(void *)(v40 + 72);
  uint64_t v46 = *(void *)(v40 + 80);
  uint64_t v47 = *(void *)(v40 + 88);
  uint64_t v72 = *(void *)(v40 + 96);
  uint64_t v74 = *(void *)(v40 + 104);
  uint64_t v48 = *(void *)(v40 + 120);
  uint64_t v68 = *(void *)(v40 + 32);
  uint64_t v70 = *(void *)(v40 + 112);
  uint64_t v49 = *(void *)(v40 + 128);
  outlined copy of AnyShareConfiguration.Storage(v68, v41, v42, v43, v44);
  uint64_t v76 = v45;
  uint64_t v78 = v46;
  uint64_t v50 = v45;
  uint64_t v51 = v46;
  uint64_t v52 = (uint64_t (*)(uint64_t))v68;
  char v80 = v47;
  char v53 = v47;
  uint64_t v54 = v43;
  uint64_t v55 = v72;
  outlined copy of Text?(v50, v51, v53, v72);
  uint64_t v56 = v74;
  char v57 = v48;
  uint64_t v83 = v49;
  uint64_t v58 = v49;
  char v59 = v48;
  uint64_t v60 = v70;
  outlined copy of Text?(v74, v70, v57, v58);
LABEL_15:
  outlined copy of AnyShareConfiguration.Storage((uint64_t)v52, v41, v42, v54, v44);
  outlined consume of AnyShareConfiguration.Storage((uint64_t)v52, v41, v42, v54, v44);
  outlined consume of Text?(v76, v78, v80, v55);
  outlined consume of Text?(v56, v60, v59, v83);
  if (v44)
  {
    if (v44 == 1)
    {
      swift_retain();
      uint64_t v65 = outlined copy of AppIntentExecutor?(v42);
      uint64_t v66 = v52(v65);
      swift_release();
      outlined consume of AnyShareConfiguration.Storage((uint64_t)v52, v41, v42, v54, 1);
      char v44 = 2;
      uint64_t v52 = (uint64_t (*)(uint64_t))v66;
      uint64_t v41 = v42;
      uint64_t v42 = v54;
      uint64_t v54 = 0;
    }
    else
    {
      char v44 = 2;
    }
  }
  long long v84 = v52;
  long long v85 = (uint64_t (*)(uint64_t))v41;
  uint64_t v86 = v42;
  uint64_t v87 = v54;
  LOBYTE(v88) = v44;
  SharingActivityPickerPresentation.withStorage(_:)((uint64_t)&v84, (uint64_t)&v101);
  SharingActivityPickerBridge.show(presenter:presentation:)(v81, (uint64_t)&v101);
  swift_release();
  outlined release of ModifiedContent<_ViewModifier_Content<SharingPickerHostModifier>, SharingActivityPickerModifier>((uint64_t *)&v101);
  outlined consume of AnyShareConfiguration.Storage((uint64_t)v52, v41, v42, v54, v44);
}

uint64_t thunk for @escaping @callee_guaranteed (@guaranteed UIActivityType?, @unowned Bool, @guaranteed [Any]?, @guaranteed Error?) -> ()(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, void *a5)
{
  long long v8 = *(void (**)(void *, uint64_t, uint64_t, void *))(a1 + 32);
  if (a4) {
    uint64_t v9 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  }
  else {
    uint64_t v9 = 0;
  }
  swift_retain();
  id v10 = a2;
  id v11 = a5;
  v8(a2, a3, v9, a5);
  swift_release();

  return swift_bridgeObjectRelease();
}

uint64_t implicit closure #1 in SharingActivityPickerBridge.complete(with:completed:returnedItems:error:)()
{
  _StringGuts.grow(_:)(31);
  v0._object = (void *)0x8000000188345DA0;
  v0._uint64_t countAndFlagsBits = 0xD00000000000001DLL;
  String.append(_:)(v0);
  type metadata accessor for Error();
  _print_unlocked<A, B>(_:_:)();
  v1._uint64_t countAndFlagsBits = 0;
  v1._object = (void *)0xE000000000000000;
  String.append(_:)(v1);
  return 0;
}

void SharingActivityPickerBridge.popoverSource(for:)(uint64_t a1@<X8>)
{
  outlined init with take of SharingActivityPickerPresentation?(v1 + 56, (uint64_t)v12);
  outlined init with take of SharingActivityPickerPresentation?((uint64_t)v12, (uint64_t)v13);
  if (_s7SwiftUI33SharingActivityPickerPresentation33_ED8966F32E79CAE8636A59B86DBA4A31LLVSgWOg((uint64_t)v13) == 1)
  {
    *(void *)(a1 + 64) = 0;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    return;
  }
  if (*(unsigned char *)(v1 + 32)) {
    uint64_t v3 = 15;
  }
  else {
    uint64_t v3 = *(void *)(v1 + 24);
  }
  id v4 = (void *)MEMORY[0x18C119DF0](v1 + 48);
  if (!v4)
  {
    swift_retain();
    outlined release of SharingActivityPickerPresentation?((uint64_t)v12, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of SharingActivityPickerPresentation?);
    static Update.ensure<A>(_:)();
    type metadata accessor for CGRect?();
    Anchor.convert(to:)();
    uint64_t v6 = MEMORY[0x18C119DF0](v1 + 16);
    if (v6)
    {
      *(void *)a1 = v6;
      swift_unknownObjectWeakInit();
      swift_unknownObjectWeakInit();
      swift_release();
      swift_release();
      outlined release of SharingActivityPickerPresentation?((uint64_t)v12, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of SharingActivityPickerPresentation?);
      *(void *)(a1 + 24) = v7;
      *(void *)(a1 + 32) = v8;
      *(void *)(a1 + 40) = v9;
      *(void *)(a1 + 48) = v10;
      *(unsigned char *)(a1 + 56) = v11;
      goto LABEL_11;
    }
LABEL_14:
    __break(1u);
    return;
  }
  uint64_t v5 = MEMORY[0x18C119DF0](v1 + 16);
  if (!v5)
  {
    __break(1u);
    goto LABEL_14;
  }
  *(void *)a1 = v5;
  swift_unknownObjectWeakInit();
  swift_unknownObjectWeakInit();

  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(unsigned char *)(a1 + 56) = 1;
LABEL_11:
  *(void *)(a1 + 64) = v3;
}

uint64_t closure #1 in SharingActivityPickerBridge.popoverSource(for:)(uint64_t a1)
{
  uint64_t result = MEMORY[0x18C119DF0](a1 + 16);
  if (result)
  {
    uint64_t v2 = (void *)result;
    specialized _UIHostingView.viewGraph.getter();
    swift_retain();

    ViewGraph.transform.getter();
    return swift_release();
  }
  else
  {
    __break(1u);
  }
  return result;
}

void closure #1 in SharingActivityPickerBridge.updateAnchor(deferred:)(uint64_t a1, uint64_t a2, void *a3)
{
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  if (Strong)
  {
    *(unsigned char *)(Strong + 232) = 0;
    id v5 = SharingActivityPickerBridge.popoverPresentationDelegate.getter();
    specialized PopoverPresentationDelegate.updateAnchor(_:presentationController:)(a3);
    swift_release();
  }
}

uint64_t initializeWithCopy for SharingActivityPickerPresentation(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  uint64_t v5 = *(void *)(a2 + 8);
  uint64_t v6 = *(void *)(a2 + 16);
  uint64_t v7 = *(void *)(a2 + 24);
  uint64_t v8 = *(void *)(a2 + 32);
  uint64_t v9 = *(void *)(a2 + 40);
  uint64_t v10 = *(void *)(a2 + 48);
  uint64_t v11 = *(void *)(a2 + 56);
  uint64_t v14 = *(void *)(a2 + 64);
  uint64_t v15 = *(void *)(a2 + 72);
  uint64_t v16 = *(void *)(a2 + 80);
  uint64_t v17 = *(void *)(a2 + 88);
  uint64_t v18 = *(void *)(a2 + 96);
  uint64_t v19 = *(void *)(a2 + 104);
  uint64_t v20 = *(void *)(a2 + 112);
  uint64_t v21 = *(void *)(a2 + 120);
  uint64_t v22 = *(void *)(a2 + 128);
  outlined copy of SharingPickerSource(*(void *)a2, v5, v6, v7, v8, v9, v10, v11, v14, v15, v16, v17, v18, v19, v20, v21, v22);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  *(void *)(a1 + 16) = v6;
  *(void *)(a1 + 24) = v7;
  *(void *)(a1 + 32) = v8;
  *(void *)(a1 + 40) = v9;
  *(void *)(a1 + 48) = v10;
  *(void *)(a1 + 56) = v11;
  *(void *)(a1 + 64) = v14;
  *(void *)(a1 + 72) = v15;
  *(void *)(a1 + 80) = v16;
  *(void *)(a1 + 88) = v17;
  *(void *)(a1 + 96) = v18;
  *(void *)(a1 + 104) = v19;
  *(void *)(a1 + 112) = v20;
  *(void *)(a1 + 120) = v21;
  uint64_t v12 = *(void *)(a2 + 136);
  *(void *)(a1 + 128) = v22;
  *(void *)(a1 + 136) = v12;
  *(_DWORD *)(a1 + 144) = *(_DWORD *)(a2 + 144);
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for SharingActivityPickerPresentation(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  uint64_t v5 = *(void *)(a2 + 8);
  uint64_t v6 = *(void *)(a2 + 16);
  uint64_t v7 = *(void *)(a2 + 24);
  uint64_t v8 = *(void *)(a2 + 32);
  uint64_t v9 = *(void *)(a2 + 40);
  uint64_t v10 = *(void *)(a2 + 48);
  uint64_t v11 = *(void *)(a2 + 56);
  uint64_t v26 = *(void *)(a2 + 64);
  uint64_t v27 = *(void *)(a2 + 72);
  uint64_t v28 = *(void *)(a2 + 80);
  uint64_t v29 = *(void *)(a2 + 88);
  uint64_t v30 = *(void *)(a2 + 96);
  uint64_t v31 = *(void *)(a2 + 104);
  uint64_t v32 = *(void *)(a2 + 112);
  uint64_t v33 = *(void *)(a2 + 120);
  uint64_t v34 = *(void *)(a2 + 128);
  outlined copy of SharingPickerSource(*(void *)a2, v5, v6, v7, v8, v9, v10, v11, v26, v27, v28, v29, v30, v31, v32, v33, v34);
  uint64_t v12 = *(void *)a1;
  uint64_t v13 = *(void *)(a1 + 8);
  uint64_t v14 = *(void *)(a1 + 16);
  uint64_t v15 = *(void *)(a1 + 24);
  uint64_t v16 = *(void *)(a1 + 32);
  uint64_t v17 = *(void *)(a1 + 40);
  uint64_t v18 = *(void *)(a1 + 48);
  uint64_t v19 = *(void *)(a1 + 56);
  long long v20 = *(_OWORD *)(a1 + 64);
  long long v21 = *(_OWORD *)(a1 + 80);
  long long v22 = *(_OWORD *)(a1 + 96);
  long long v23 = *(_OWORD *)(a1 + 112);
  uint64_t v24 = *(void *)(a1 + 128);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  *(void *)(a1 + 16) = v6;
  *(void *)(a1 + 24) = v7;
  *(void *)(a1 + 32) = v8;
  *(void *)(a1 + 40) = v9;
  *(void *)(a1 + 48) = v10;
  *(void *)(a1 + 56) = v11;
  *(void *)(a1 + 64) = v26;
  *(void *)(a1 + 72) = v27;
  *(void *)(a1 + 80) = v28;
  *(void *)(a1 + 88) = v29;
  *(void *)(a1 + 96) = v30;
  *(void *)(a1 + 104) = v31;
  *(void *)(a1 + 112) = v32;
  *(void *)(a1 + 120) = v33;
  *(void *)(a1 + 128) = v34;
  outlined consume of SharingPickerSource(v12, v13, v14, v15, v16, v17, v18, v19, v20, *((uint64_t *)&v20 + 1), v21, *((uint64_t *)&v21 + 1), v22, *((uint64_t *)&v22 + 1), v23, *((uint64_t *)&v23 + 1), v24);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 144) = *(_DWORD *)(a2 + 144);
  return a1;
}

__n128 __swift_memcpy148_8(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  long long v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  __n128 result = *(__n128 *)(a2 + 96);
  long long v7 = *(_OWORD *)(a2 + 112);
  long long v8 = *(_OWORD *)(a2 + 128);
  *(_DWORD *)(a1 + 144) = *(_DWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 128) = v8;
  *(__n128 *)(a1 + 96) = result;
  return result;
}

uint64_t assignWithTake for SharingActivityPickerPresentation(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 128);
  uint64_t v5 = *(void *)a1;
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v7 = *(void *)(a1 + 16);
  uint64_t v8 = *(void *)(a1 + 24);
  uint64_t v9 = *(void *)(a1 + 32);
  uint64_t v10 = *(void *)(a1 + 40);
  uint64_t v11 = *(void *)(a1 + 48);
  uint64_t v12 = *(void *)(a1 + 56);
  long long v13 = *(_OWORD *)(a1 + 64);
  long long v14 = *(_OWORD *)(a1 + 80);
  long long v15 = *(_OWORD *)(a1 + 96);
  long long v16 = *(_OWORD *)(a1 + 112);
  uint64_t v17 = *(void *)(a1 + 128);
  long long v18 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v18;
  long long v19 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v19;
  long long v20 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v20;
  long long v21 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = v21;
  *(void *)(a1 + 128) = v4;
  outlined consume of SharingPickerSource(v5, v6, v7, v8, v9, v10, v11, v12, v13, *((uint64_t *)&v13 + 1), v14, *((uint64_t *)&v14 + 1), v15, *((uint64_t *)&v15 + 1), v16, *((uint64_t *)&v16 + 1), v17);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  swift_release();
  *(_DWORD *)(a1 + 144) = *(_DWORD *)(a2 + 144);
  return a1;
}

uint64_t getEnumTagSinglePayload for SharingActivityPickerPresentation(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 148)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 136);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SharingActivityPickerPresentation(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 136) = 0;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_DWORD *)(result + 144) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 148) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 136) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 148) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t assignWithCopy for SharingActivityPickerModifier(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v5 = a2[1];
  uint64_t v6 = a2[2];
  uint64_t v7 = a2[3];
  uint64_t v8 = a2[4];
  uint64_t v9 = a2[5];
  uint64_t v10 = a2[6];
  uint64_t v11 = a2[7];
  uint64_t v26 = a2[8];
  uint64_t v27 = a2[9];
  uint64_t v28 = a2[10];
  uint64_t v29 = a2[11];
  uint64_t v30 = a2[12];
  uint64_t v31 = a2[13];
  uint64_t v32 = a2[14];
  uint64_t v33 = a2[15];
  uint64_t v34 = a2[16];
  outlined copy of SharingPickerSource(*a2, v5, v6, v7, v8, v9, v10, v11, v26, v27, v28, v29, v30, v31, v32, v33, v34);
  uint64_t v12 = *(void *)a1;
  uint64_t v13 = *(void *)(a1 + 8);
  uint64_t v14 = *(void *)(a1 + 16);
  uint64_t v15 = *(void *)(a1 + 24);
  uint64_t v16 = *(void *)(a1 + 32);
  uint64_t v17 = *(void *)(a1 + 40);
  uint64_t v18 = *(void *)(a1 + 48);
  uint64_t v19 = *(void *)(a1 + 56);
  long long v20 = *(_OWORD *)(a1 + 64);
  long long v21 = *(_OWORD *)(a1 + 80);
  long long v22 = *(_OWORD *)(a1 + 96);
  long long v23 = *(_OWORD *)(a1 + 112);
  uint64_t v24 = *(void *)(a1 + 128);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  *(void *)(a1 + 16) = v6;
  *(void *)(a1 + 24) = v7;
  *(void *)(a1 + 32) = v8;
  *(void *)(a1 + 40) = v9;
  *(void *)(a1 + 48) = v10;
  *(void *)(a1 + 56) = v11;
  *(void *)(a1 + 64) = v26;
  *(void *)(a1 + 72) = v27;
  *(void *)(a1 + 80) = v28;
  *(void *)(a1 + 88) = v29;
  *(void *)(a1 + 96) = v30;
  *(void *)(a1 + 104) = v31;
  *(void *)(a1 + 112) = v32;
  *(void *)(a1 + 120) = v33;
  *(void *)(a1 + 128) = v34;
  outlined consume of SharingPickerSource(v12, v13, v14, v15, v16, v17, v18, v19, v20, *((uint64_t *)&v20 + 1), v21, *((uint64_t *)&v21 + 1), v22, *((uint64_t *)&v22 + 1), v23, *((uint64_t *)&v23 + 1), v24);
  *(void *)(a1 + 136) = a2[17];
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for SharingActivityPickerModifier(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 128);
  uint64_t v5 = *(void *)a1;
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v7 = *(void *)(a1 + 16);
  uint64_t v8 = *(void *)(a1 + 24);
  uint64_t v9 = *(void *)(a1 + 32);
  uint64_t v10 = *(void *)(a1 + 40);
  uint64_t v11 = *(void *)(a1 + 48);
  uint64_t v12 = *(void *)(a1 + 56);
  long long v13 = *(_OWORD *)(a1 + 64);
  long long v14 = *(_OWORD *)(a1 + 80);
  long long v15 = *(_OWORD *)(a1 + 96);
  long long v16 = *(_OWORD *)(a1 + 112);
  uint64_t v17 = *(void *)(a1 + 128);
  long long v18 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v18;
  long long v19 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v19;
  long long v20 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v20;
  long long v21 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = v21;
  *(void *)(a1 + 128) = v4;
  outlined consume of SharingPickerSource(v5, v6, v7, v8, v9, v10, v11, v12, v13, *((uint64_t *)&v13 + 1), v14, *((uint64_t *)&v14 + 1), v15, *((uint64_t *)&v15 + 1), v16, *((uint64_t *)&v16 + 1), v17);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for SharingActivityPickerModifier(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 144)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 136);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SharingActivityPickerModifier(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 136) = 0;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 144) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 136) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 144) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

_UNKNOWN **base witness table accessor for ViewModifier in SharingActivityPickerModifier()
{
  return &protocol witness table for SharingActivityPickerModifier;
}

uint64_t sub_1882EB8EC()
{
  outlined consume of SharingPickerSource(v0[3], v0[4], v0[5], v0[6], v0[7], v0[8], v0[9], v0[10], v0[11], v0[12], v0[13], v0[14], v0[15], v0[16], v0[17], v0[18], v0[19]);

  return swift_deallocObject();
}

uint64_t *outlined retain of SharingActivityPickerPresentation(uint64_t *a1)
{
  return a1;
}

uint64_t sub_1882EB9BC()
{
  swift_weakDestroy();

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in SharingActivityPickerBridge.updateAnchor(deferred:)()
{
  return partial apply for closure #1 in SharingActivityPickerBridge.updateAnchor(deferred:)((uint64_t (*)(void, void *, void, void, void))closure #1 in SharingActivityPickerBridge.updateAnchor(deferred:));
}

uint64_t outlined copy of SharingActivityPickerPresentation?(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  if (a18)
  {
    outlined copy of SharingPickerSource(result, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17);
    return swift_retain();
  }
  return result;
}

uint64_t partial apply for closure #1 in SharingActivityPickerBridge.popoverSource(for:)()
{
  return closure #1 in SharingActivityPickerBridge.popoverSource(for:)(v0);
}

unint64_t type metadata accessor for UIActivityViewController()
{
  unint64_t result = lazy cache variable for type metadata for UIActivityViewController;
  if (!lazy cache variable for type metadata for UIActivityViewController)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for UIActivityViewController);
  }
  return result;
}

void type metadata accessor for Binding<AnyIdentifiableShareConfiguration?>()
{
  if (!lazy cache variable for type metadata for Binding<AnyIdentifiableShareConfiguration?>)
  {
    type metadata accessor for _GraphValue<SharingActivityPickerModifier>(255, &lazy cache variable for type metadata for AnyIdentifiableShareConfiguration?, (uint64_t)&type metadata for AnyIdentifiableShareConfiguration, MEMORY[0x1E4FBB718]);
    unint64_t v0 = type metadata accessor for Binding();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Binding<AnyIdentifiableShareConfiguration?>);
    }
  }
}

void partial apply for implicit closure #3 in implicit closure #2 in SharingActivityPickerBridge.show(presenter:presentation:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  specialized SharingActivityPickerBridge.complete(with:completed:returnedItems:error:)(a4);
}

void specialized SharingActivityPickerBridge.complete(with:completed:returnedItems:error:)(void *a1)
{
  if (a1)
  {
    MEMORY[0x1F4188790](a1);
    id v3 = v2;
    static Log.internalWarning(_:)();
  }
  SharingActivityPickerBridge.reset()();
}

uint64_t partial apply for implicit closure #1 in SharingActivityPickerBridge.complete(with:completed:returnedItems:error:)()
{
  return implicit closure #1 in SharingActivityPickerBridge.complete(with:completed:returnedItems:error:)();
}

uint64_t partial apply for closure #1 in SharingActivityPickerBridge.present(_:presenter:)()
{
  return partial apply for closure #1 in SharingActivityPickerBridge.updateAnchor(deferred:)((uint64_t (*)(void, void *, void, void, void))closure #1 in SharingActivityPickerBridge.present(_:presenter:));
}

uint64_t partial apply for closure #1 in SharingActivityPickerBridge.updateAnchor(deferred:)(uint64_t (*a1)(void, void *, void, void, void))
{
  return a1(v1[4], v1 + 5, v1[24], v1[2], v1[3]);
}

uint64_t outlined init with take of AnyShareConfiguration.Storage(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t outlined retain of AnyShareConfiguration.Storage(uint64_t a1)
{
  return a1;
}

void *outlined retain of SharingPickerSource(void *a1, void (*a2)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))
{
  return a1;
}

uint64_t sub_1882EBD2C()
{
  outlined consume of SharingPickerSource(v0[2], v0[3], v0[4], v0[5], v0[6], v0[7], v0[8], v0[9], v0[10], v0[11], v0[12], v0[13], v0[14], v0[15], v0[16], v0[17], v0[18]);

  return swift_deallocObject();
}

void *partial apply for implicit closure #2 in implicit closure #1 in SharingActivityPickerBridge.reset()()
{
  return implicit closure #2 in implicit closure #1 in SharingActivityPickerBridge.reset()((void *)(v0 + 16));
}

uint64_t sub_1882EBD98()
{
  swift_release();

  return swift_deallocObject();
}

void *type metadata accessor for SharingActivityPickerModifier.Child()
{
  return &unk_1ED456EC8;
}

ValueMetadata *type metadata accessor for SharingActivityPickerPresentation.Key()
{
  return &type metadata for SharingActivityPickerPresentation.Key;
}

uint64_t SpatialEventGesture.init(coordinateSpace:action:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = a1[3];
  uint64_t v9 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v8);
  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v8, v9);
  *(void *)(a4 + 48) = a2;
  *(void *)(a4 + 56) = a3;

  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t SpatialEventGesture.init(coordinateSpace:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = a1[3];
  uint64_t v5 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v4);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v5);
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = 0;

  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t SpatialEventGesture.coordinateSpace.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of CoordinateSpace(v1, a1);
}

uint64_t SpatialEventGesture.action.getter()
{
  uint64_t v1 = *(void *)(v0 + 48);
  outlined copy of AppIntentExecutor?(v1);
  return v1;
}

uint64_t SpatialEventGesture.internalBody.getter@<X0>(uint64_t a1@<X8>)
{
  type metadata accessor for <<opaque return type of Gesture.dependency(_:)>>.0();
  uint64_t v4 = v3;
  uint64_t v5 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  uint64_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of CoordinateSpace(v1, (uint64_t)v15);
  outlined init with copy of CoordinateSpaceGesture<[EventID : TouchEvent]>((uint64_t)v15, (uint64_t)v14 + 8);
  LOBYTE(v14[0]) = 0;
  outlined destroy of CoordinateSpaceGesture<[EventID : TouchEvent]>((uint64_t)v15, (uint64_t (*)(void))type metadata accessor for CoordinateSpaceGesture<[EventID : TouchEvent]>);
  v15[0] = 2;
  type metadata accessor for ModifierGesture<CoordinateSpaceGesture<[EventID : TouchEvent]>, MultiEventListener<TouchEvent>>();
  lazy protocol witness table accessor for type CoordinateSpaceGesture<[EventID : TouchEvent]> and conformance CoordinateSpaceGesture<A>(&lazy protocol witness table cache variable for type ModifierGesture<CoordinateSpaceGesture<[EventID : TouchEvent]>, MultiEventListener<TouchEvent>> and conformance ModifierGesture<A, B>, (void (*)(uint64_t))type metadata accessor for ModifierGesture<CoordinateSpaceGesture<[EventID : TouchEvent]>, MultiEventListener<TouchEvent>>);
  Gesture.dependency(_:)();
  outlined destroy of CoordinateSpaceGesture<[EventID : TouchEvent]>((uint64_t)v14, (uint64_t (*)(void))type metadata accessor for ModifierGesture<CoordinateSpaceGesture<[EventID : TouchEvent]>, MultiEventListener<TouchEvent>>);
  outlined init with copy of SpatialEventGesture(v1, (uint64_t)v14);
  uint64_t v8 = (uint64_t (*)@<X0>(uint64_t@<X0>, uint64_t@<X8>))swift_allocObject();
  long long v9 = v14[1];
  *((_OWORD *)v8 + 1) = v14[0];
  *((_OWORD *)v8 + 2) = v9;
  long long v10 = v14[3];
  *((_OWORD *)v8 + 3) = v14[2];
  *((_OWORD *)v8 + 4) = v10;
  (*(void (**)(uint64_t, char *, uint64_t))(v5 + 16))(a1, v7, v4);
  type metadata accessor for ModifierGesture<MapGesture<[EventID : TouchEvent], SpatialEventCollection>, <<opaque return type of Gesture.dependency(_:)>>.0>();
  uint64_t v12 = (uint64_t (**)@<X0>(uint64_t@<X0>, uint64_t@<X8>))(a1 + *(int *)(v11 + 52));
  *uint64_t v12 = partial apply for closure #1 in SpatialEventGesture.internalBody.getter;
  v12[1] = v8;
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

void type metadata accessor for MultiEventListener<TouchEvent>()
{
  if (!lazy cache variable for type metadata for MultiEventListener<TouchEvent>)
  {
    lazy protocol witness table accessor for type TouchEvent and conformance TouchEvent();
    unint64_t v0 = type metadata accessor for MultiEventListener();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for MultiEventListener<TouchEvent>);
    }
  }
}

uint64_t closure #1 in SpatialEventGesture.internalBody.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3 = *(void *)a1;
  int v4 = *(unsigned __int8 *)(a1 + 8);
  uint64_t v5 = (void *)MEMORY[0x1E4FBC868];
  uint64_t v55 = (void *)MEMORY[0x1E4FBC868];
  if ((v4 - 1) < 2)
  {
    uint64_t v48 = *(unsigned __int8 *)(a1 + 8);
    uint64_t v50 = v3 + 64;
    uint64_t v6 = 1 << *(unsigned char *)(v3 + 32);
    uint64_t v7 = -1;
    if (v6 < 64) {
      uint64_t v7 = ~(-1 << v6);
    }
    unint64_t v8 = v7 & *(void *)(v3 + 64);
    outlined copy of GesturePhase<[EventID : PanEvent]>(v3, v4);
    int64_t v9 = 0;
    int64_t v51 = (unint64_t)(v6 + 63) >> 6;
    uint64_t v52 = v3;
    while (1)
    {
      if (v8)
      {
        uint64_t v53 = (v8 - 1) & v8;
        int64_t v54 = v9;
        unint64_t v11 = __clz(__rbit64(v8)) | (v9 << 6);
      }
      else
      {
        int64_t v12 = v9 + 1;
        if (__OFADD__(v9, 1)) {
          goto LABEL_45;
        }
        if (v12 >= v51)
        {
LABEL_35:
          swift_release();
          uint64_t v41 = *(void *)(a2 + 48);
          if (v41)
          {
            uint64_t v42 = *(void *)(a2 + 56);
            uint64_t v43 = (void *)swift_allocObject();
            v43[2] = v41;
            v43[3] = v42;
            v43[4] = v5;
            outlined copy of AppIntentExecutor?(v41);
            outlined copy of AppIntentExecutor?(v41);
            swift_bridgeObjectRetain();
            static Update.enqueueAction(_:)();
            swift_release();
            outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v41);
          }
          switch(v48)
          {
            case 1:
              uint64_t result = swift_beginAccess();
              uint64_t v45 = v55;
              char v46 = 1;
              break;
            case 2:
              uint64_t result = swift_beginAccess();
              uint64_t v45 = v55;
              char v46 = 2;
              break;
            case 3:
              goto LABEL_39;
            default:
              goto LABEL_38;
          }
          goto LABEL_42;
        }
        unint64_t v13 = *(void *)(v50 + 8 * v12);
        int64_t v14 = v9 + 1;
        if (!v13)
        {
          int64_t v14 = v9 + 2;
          if (v9 + 2 >= v51) {
            goto LABEL_35;
          }
          unint64_t v13 = *(void *)(v50 + 8 * v14);
          if (!v13)
          {
            int64_t v14 = v9 + 3;
            if (v9 + 3 >= v51) {
              goto LABEL_35;
            }
            unint64_t v13 = *(void *)(v50 + 8 * v14);
            if (!v13)
            {
              uint64_t v15 = v9 + 4;
              if (v9 + 4 >= v51) {
                goto LABEL_35;
              }
              unint64_t v13 = *(void *)(v50 + 8 * v15);
              if (!v13)
              {
                while (1)
                {
                  int64_t v14 = v15 + 1;
                  if (__OFADD__(v15, 1)) {
                    goto LABEL_46;
                  }
                  if (v14 >= v51) {
                    goto LABEL_35;
                  }
                  unint64_t v13 = *(void *)(v50 + 8 * v14);
                  ++v15;
                  if (v13) {
                    goto LABEL_22;
                  }
                }
              }
              int64_t v14 = v9 + 4;
            }
          }
        }
LABEL_22:
        uint64_t v53 = (v13 - 1) & v13;
        int64_t v54 = v14;
        unint64_t v11 = __clz(__rbit64(v13)) + (v14 << 6);
      }
      Swift::UInt v16 = *(void *)(*(void *)(v3 + 48) + 16 * v11 + 8);
      uint64_t v17 = *(void *)(v3 + 56) + 112 * v11;
      uint64_t v18 = *(void *)v17;
      char v19 = *(unsigned char *)(v17 + 8);
      uint64_t v21 = *(void *)(v17 + 24);
      uint64_t v20 = *(void *)(v17 + 32);
      uint64_t v23 = *(void *)(v17 + 80);
      uint64_t v22 = *(void *)(v17 + 88);
      uint64_t v24 = *(void *)(v17 + 96);
      char v25 = *(unsigned char *)(v17 + 104);
      swift_retain();
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      unint64_t v28 = specialized __RawDictionaryStorage.find<A>(_:)(v16);
      uint64_t v29 = v5[2];
      BOOL v30 = (v27 & 1) == 0;
      uint64_t v31 = v29 + v30;
      if (__OFADD__(v29, v30))
      {
        __break(1u);
LABEL_44:
        __break(1u);
LABEL_45:
        __break(1u);
LABEL_46:
        __break(1u);
LABEL_47:
        KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
        __break(1u);
        JUMPOUT(0x1882EC940);
      }
      char v32 = v27;
      if (v5[3] >= v31)
      {
        if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
          specialized _NativeDictionary.copy()();
        }
      }
      else
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v31, isUniquelyReferenced_nonNull_native);
        unint64_t v33 = specialized __RawDictionaryStorage.find<A>(_:)(v16);
        if ((v32 & 1) != (v34 & 1)) {
          goto LABEL_47;
        }
        unint64_t v28 = v33;
      }
      unsigned int v35 = 0x2010000u >> (8 * v19);
      unsigned int v36 = 0x4030000u >> (8 * v25);
      if (v32)
      {
        uint64_t v10 = v5[7] + 80 * v28;
        *(void *)uint64_t v10 = v16;
        *(void *)(v10 + 8) = v18;
        *(unsigned char *)(v10 + 16) = v36;
        *(void *)(v10 + 24) = v21;
        *(void *)(v10 + 32) = v20;
        *(unsigned char *)(v10 + 40) = v35;
        *(void *)(v10 + 48) = v23;
        *(void *)(v10 + 56) = v22;
        *(void *)(v10 + 64) = v24;
        *(unsigned char *)(v10 + 72) = 0;
      }
      else
      {
        v5[(v28 >> 6) + 8] |= 1 << v28;
        *(void *)(v5[6] + 8 * v28) = v16;
        uint64_t v37 = v5[7] + 80 * v28;
        *(void *)uint64_t v37 = v16;
        *(void *)(v37 + 8) = v18;
        *(unsigned char *)(v37 + 16) = v36;
        *(void *)(v37 + 24) = v21;
        *(void *)(v37 + 32) = v20;
        *(unsigned char *)(v37 + 40) = v35;
        *(void *)(v37 + 48) = v23;
        *(void *)(v37 + 56) = v22;
        *(void *)(v37 + 64) = v24;
        *(unsigned char *)(v37 + 72) = 0;
        uint64_t v38 = v5[2];
        BOOL v39 = __OFADD__(v38, 1);
        uint64_t v40 = v38 + 1;
        if (v39) {
          goto LABEL_44;
        }
        _OWORD v5[2] = v40;
      }
      uint64_t v55 = v5;
      swift_release();
      swift_bridgeObjectRelease();
      uint64_t v3 = v52;
      unint64_t v8 = v53;
      int64_t v9 = v54;
    }
  }
  if (*(unsigned char *)(a1 + 8))
  {
LABEL_39:
    uint64_t result = swift_bridgeObjectRelease();
    uint64_t v45 = 0;
    char v46 = 3;
  }
  else
  {
    if (!v3) {
      outlined consume of GesturePhase<[EventID : PanEvent]>(0, 0);
    }
LABEL_38:
    uint64_t result = swift_bridgeObjectRelease();
    uint64_t v45 = 0;
    char v46 = 0;
  }
LABEL_42:
  *(void *)a3 = v45;
  *(unsigned char *)(a3 + 8) = v46;
  return result;
}

uint64_t outlined init with copy of SpatialEventGesture(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_1882EC988()
{
  if (*(unsigned char *)(v0 + 56))
  {
    if (!*(void *)(v0 + 64)) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  if (*(void *)(v0 + 64)) {
LABEL_3:
  }
    swift_release();
LABEL_4:

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in SpatialEventGesture.internalBody.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return closure #1 in SpatialEventGesture.internalBody.getter(a1, v2 + 16, a2);
}

uint64_t static SpatialEventGesture._makeGesture(gesture:inputs:)()
{
  return static PubliclyPrimitiveGesture.makeGesture(gesture:inputs:)();
}

unint64_t lazy protocol witness table accessor for type SpatialEventGesture and conformance SpatialEventGesture()
{
  unint64_t result = lazy protocol witness table cache variable for type SpatialEventGesture and conformance SpatialEventGesture;
  if (!lazy protocol witness table cache variable for type SpatialEventGesture and conformance SpatialEventGesture)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SpatialEventGesture and conformance SpatialEventGesture);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SpatialEventGesture and conformance SpatialEventGesture;
  if (!lazy protocol witness table cache variable for type SpatialEventGesture and conformance SpatialEventGesture)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SpatialEventGesture and conformance SpatialEventGesture);
  }
  return result;
}

uint64_t associated type witness table accessor for PubliclyPrimitiveGesture.InternalBody : Gesture in SpatialEventGesture()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t protocol witness for static Gesture._makeGesture(gesture:inputs:) in conformance SpatialEventGesture()
{
  return static PubliclyPrimitiveGesture.makeGesture(gesture:inputs:)();
}

void protocol witness for Gesture.body.getter in conformance SpatialEventGesture()
{
}

_UNKNOWN **base witness table accessor for Gesture in SpatialEventGesture()
{
  return &protocol witness table for SpatialEventGesture;
}

uint64_t destroy for SpatialEventGesture(uint64_t result)
{
  uint64_t v1 = result;
  if (*(unsigned char *)(result + 40))
  {
    if (!*(void *)(result + 48)) {
      return result;
    }
  }
  else
  {
    unint64_t result = __swift_destroy_boxed_opaque_existential_1(result);
    if (!*(void *)(v1 + 48)) {
      return result;
    }
  }

  return swift_release();
}

uint64_t initializeWithCopy for SpatialEventGesture(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 40))
  {
    long long v4 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v4;
    *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
  }
  else
  {
    long long v5 = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 24) = v5;
    (**(void (***)(uint64_t, uint64_t))(v5 - 8))(a1, a2);
    *(unsigned char *)(a1 + 40) = 0;
  }
  uint64_t v6 = *(void *)(a2 + 48);
  if (v6)
  {
    uint64_t v7 = *(void *)(a2 + 56);
    *(void *)(a1 + 48) = v6;
    *(void *)(a1 + 56) = v7;
    swift_retain();
  }
  else
  {
    *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  }
  return a1;
}

uint64_t assignWithCopy for SpatialEventGesture(uint64_t a1, long long *a2)
{
  if ((long long *)a1 != a2)
  {
    outlined destroy of CoordinateSpace(a1);
    if (*((unsigned char *)a2 + 40))
    {
      long long v4 = *a2;
      long long v5 = a2[1];
      *(_OWORD *)(a1 + 25) = *(long long *)((char *)a2 + 25);
      *(_OWORD *)a1 = v4;
      *(_OWORD *)(a1 + 16) = v5;
    }
    else
    {
      uint64_t v6 = *((void *)a2 + 3);
      *(void *)(a1 + 24) = v6;
      *(void *)(a1 + 32) = *((void *)a2 + 4);
      (**(void (***)(uint64_t, long long *))(v6 - 8))(a1, a2);
      *(unsigned char *)(a1 + 40) = 0;
    }
  }
  uint64_t v7 = *((void *)a2 + 6);
  if (!*(void *)(a1 + 48))
  {
    if (v7)
    {
      uint64_t v9 = *((void *)a2 + 7);
      *(void *)(a1 + 48) = v7;
      *(void *)(a1 + 56) = v9;
      swift_retain();
      return a1;
    }
LABEL_11:
    *(_OWORD *)(a1 + 48) = a2[3];
    return a1;
  }
  if (!v7)
  {
    swift_release();
    goto LABEL_11;
  }
  uint64_t v8 = *((void *)a2 + 7);
  *(void *)(a1 + 48) = v7;
  *(void *)(a1 + 56) = v8;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for SpatialEventGesture(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    outlined destroy of CoordinateSpace(a1);
    long long v4 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v4;
    *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
  }
  uint64_t v5 = *(void *)(a2 + 48);
  if (!*(void *)(a1 + 48))
  {
    if (v5)
    {
      uint64_t v7 = *(void *)(a2 + 56);
      *(void *)(a1 + 48) = v5;
      *(void *)(a1 + 56) = v7;
      return a1;
    }
LABEL_9:
    *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
    return a1;
  }
  if (!v5)
  {
    swift_release();
    goto LABEL_9;
  }
  uint64_t v6 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = v5;
  *(void *)(a1 + 56) = v6;
  swift_release();
  return a1;
}

ValueMetadata *type metadata accessor for SpatialEventGesture()
{
  return &type metadata for SpatialEventGesture;
}

uint64_t sub_1882ED070()
{
  return lazy protocol witness table accessor for type CoordinateSpaceGesture<[EventID : TouchEvent]> and conformance CoordinateSpaceGesture<A>(&lazy protocol witness table cache variable for type ModifierGesture<MapGesture<[EventID : TouchEvent], SpatialEventCollection>, <<opaque return type of Gesture.dependency(_:)>>.0> and conformance ModifierGesture<A, B>, (void (*)(uint64_t))type metadata accessor for ModifierGesture<MapGesture<[EventID : TouchEvent], SpatialEventCollection>, <<opaque return type of Gesture.dependency(_:)>>.0>);
}

uint64_t sub_1882ED100()
{
  swift_release();
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

uint64_t partial apply for specialized closure #1 in closure #1 in SpatialEventGesture.internalBody.getter()
{
  uint64_t v1 = *(void (**)(uint64_t *))(v0 + 16);
  uint64_t v3 = *(void *)(v0 + 32);
  swift_bridgeObjectRetain();
  v1(&v3);

  return swift_bridgeObjectRelease();
}

uint64_t EnvironmentValues.navigationSelectionSeed.getter()
{
  if (*(void *)(v0 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<NavigationStateSelectionSeed>();
    lazy protocol witness table accessor for type EnvironmentPropertyKey<NavigationStateSelectionSeed> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<NavigationStateSelectionSeed>();
    lazy protocol witness table accessor for type EnvironmentPropertyKey<NavigationStateSelectionSeed> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  return swift_release_n();
}

ValueMetadata *type metadata accessor for NavigationStateSelectionSeed()
{
  return &type metadata for NavigationStateSelectionSeed;
}

uint64_t View.help<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  double v5 = MEMORY[0x1F4188790](a1);
  (*(void (**)(char *, double))(v7 + 16))((char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v5);
  uint64_t v8 = Text.init<A>(_:)();
  uint64_t v10 = v9;
  char v12 = v11 & 1;
  View.help(_:)(v8, v9, v13, a2, a3);
  outlined consume of Text.Storage(v8, v10, v12);
  return swift_bridgeObjectRelease();
}

uint64_t sub_1882ED3A8()
{
  type metadata accessor for HelpView();

  return swift_getWitnessTable();
}

uint64_t sub_1882ED3F0()
{
  type metadata accessor for HelpView();

  return swift_getWitnessTable();
}

uint64_t DragSnapshotResponderFilter.updateValue()()
{
  uint64_t v1 = v0;
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  uint64_t Value = AGGraphGetValue();
  int v4 = v3;
  uint64_t v5 = *(void *)(Value + 16);
  uint64_t v6 = *(void *)(Value + 24);
  uint64_t v7 = (uint64_t *)AGGraphGetValue();
  uint64_t v8 = *v7;
  uint64_t v9 = v7[1];
  if (((v4 | v10) & 1) != 0 || (type metadata accessor for [ViewResponder](), !AGGraphGetOutputValue()))
  {
    uint64_t v11 = *(void *)(v1 + 48);
    uint64_t v32 = v5;
    uint64_t v33 = v6;
    *(double *)(v11 + 224) = MEMORY[0x18C114450]();
    *(void *)(v11 + 232) = v12;
    *(void *)&long long v31 = v8;
    *((void *)&v31 + 1) = v9;
    *(double *)(v11 + 240) = MEMORY[0x18C10C240]();
    *(void *)(v11 + 248) = v13;
  }
  uint64_t v14 = *(void *)(v1 + 48);
  *(void *)(v14 + 256) = AGCreateWeakAttribute();
  *(unsigned char *)(v14 + 264) = *(unsigned char *)AGGraphGetValue();
  uint64_t v15 = *(void *)(v14 + 320);
  uint64_t v16 = AGGraphGetValue();
  outlined init with copy of _DraggingModifier(v16, (uint64_t)&v31);
  swift_beginAccess();
  swift_retain();
  outlined assign with copy of _DraggingModifier?((uint64_t)&v31, v15 + 32);
  swift_endAccess();
  memset(v30, 0, sizeof(v30));
  swift_beginAccess();
  outlined assign with take of _DraggingModifier?((uint64_t)v30, v15 + 152, &lazy cache variable for type metadata for DragContext?, (uint64_t)&type metadata for DragContext);
  swift_endAccess();
  outlined destroy of _DraggingModifier?((uint64_t)&v31, &lazy cache variable for type metadata for _DraggingModifier?, (uint64_t)&type metadata for _DraggingModifier);
  swift_release();
  uint64_t v17 = *(void *)(v1 + 48);
  type metadata accessor for [ViewResponder]();
  AGGraphGetValue();
  if (v18)
  {
    swift_bridgeObjectRetain_n();
    MultiViewResponder.children.setter();
    swift_bridgeObjectRelease();
  }
  uint64_t v19 = MEMORY[0x1E4FBB390];
  *(unsigned char *)(v17 + 296) = *(unsigned char *)AGGraphGetValue();
  uint64_t v20 = (uint64_t (*)(void, uint64_t))MEMORY[0x1E4FBB718];
  type metadata accessor for _DraggingModifier?(0, (unint64_t *)&lazy cache variable for type metadata for Bool?, v19, MEMORY[0x1E4FBB718]);
  *(unsigned char *)(v17 + 316) = *(unsigned char *)AGGraphGetValue();
  *(void *)&long long v31 = v8;
  *((void *)&v31 + 1) = v9;
  double v21 = MEMORY[0x18C10C240]();
  double v23 = v22;
  long long v31 = *(_OWORD *)AGGraphGetValue();
  *(double *)(v17 + 280) = v21 - MEMORY[0x18C10C240]();
  *(double *)(v17 + 288) = v23 - v24;
  *(_DWORD *)(v17 + 312) = *(_DWORD *)AGGraphGetValue();
  uint64_t v25 = *(void *)(v17 + 320);
  type metadata accessor for _DraggingModifier?(0, (unint64_t *)&lazy cache variable for type metadata for Namespace.ID?, MEMORY[0x1E4F41808], v20);
  uint64_t v26 = AGGraphGetValue();
  char v27 = *(unsigned char *)(v26 + 8);
  *(void *)(v25 + 16) = *(void *)v26;
  *(unsigned char *)(v25 + 24) = v27;
  *(void *)(v17 + 304) = *(void *)AGGraphGetValue();
  uint64_t result = AGGraphGetOutputValue();
  if (!result)
  {
    type metadata accessor for _DraggingModifier?(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>, MEMORY[0x1E4FBC838] + 8, MEMORY[0x1E4FBBE00]);
    uint64_t v29 = swift_allocObject();
    *(_OWORD *)(v29 + 16) = xmmword_188351940;
    *(void *)(v29 + 32) = v17;
    *(void *)&long long v31 = v29;
    specialized Array._endMutation()();
    swift_retain();
    AGGraphSetOutputValue();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t DragPreviewResponderFilter.modifier.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for DraggingPreviewModifier();
  uint64_t Value = AGGraphGetValue();
  int v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16);

  return v4(a1, Value, v2);
}

uint64_t DragPreviewResponderFilter.updateValue()(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v62 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v49 = type metadata accessor for DraggingPreviewModifier();
  uint64_t v5 = *(void *)(v49 - 8);
  MEMORY[0x1F4188790](v49);
  uint64_t v7 = (char *)&v46 - v6;
  uint64_t v8 = type metadata accessor for Optional();
  uint64_t v47 = *(void *)(v8 - 8);
  *(void *)&long long v48 = v8;
  MEMORY[0x1F4188790](v8);
  int v10 = (char *)&v46 - v9;
  long long v11 = v1[1];
  long long v54 = *v1;
  long long v55 = v11;
  long long v56 = v1[2];
  uint64_t v57 = *((void *)v1 + 6);
  uint64_t Value = (uint64_t *)AGGraphGetValue();
  int v14 = v13;
  uint64_t v15 = *Value;
  uint64_t v16 = Value[1];
  uint64_t v17 = Value[2];
  uint64_t v18 = Value[3];
  uint64_t v19 = v57;
  uint64_t v20 = (uint64_t *)AGGraphGetValue();
  uint64_t v21 = *v20;
  uint64_t v22 = v20[1];
  if (((v14 | v23) & 1) != 0 || (type metadata accessor for [ViewResponder](), !AGGraphGetOutputValue()))
  {
    *(void *)&long long v59 = v15;
    *((void *)&v59 + 1) = v16;
    uint64_t v60 = v17;
    uint64_t v61 = v18;
    *(double *)(v19 + 224) = MEMORY[0x18C114450]();
    *(void *)(v19 + 232) = v24;
    *(void *)&long long v59 = v21;
    *((void *)&v59 + 1) = v22;
    *(double *)(v19 + 240) = MEMORY[0x18C10C240]();
    *(void *)(v19 + 248) = v25;
  }
  DragPreviewResponderFilter.modifier.getter((uint64_t)v7);
  uint64_t v26 = *(void *)(v4 - 8);
  (*(void (**)(char *, char *, uint64_t))(v26 + 16))(v10, v7, v4);
  uint64_t v46 = a1;
  char v27 = *(void (**)(char *, uint64_t))(v5 + 8);
  uint64_t v28 = v49;
  v27(v7, v49);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v26 + 56))(v10, 0, 1, v4);
  specialized CustomPreviewResponder.preview.setter((uint64_t)v10);
  (*(void (**)(char *, void))(v47 + 8))(v10, v48);
  uint64_t v29 = *((void *)v2 + 6);
  long long v30 = *v2;
  long long v48 = v2[1];
  long long v50 = v30;
  long long v51 = v48;
  long long v52 = v2[2];
  uint64_t v53 = v29;
  *(void *)(v29 + 256) = AGCreateWeakAttribute();
  *(unsigned char *)(v29 + 264) = *(unsigned char *)AGGraphGetValue();
  uint64_t v31 = *(void *)(v29
                  + *(void *)(class metadata base offset for CustomPreviewDragPayloadResponder + *(void *)v29 + 16));
  DragPreviewResponderFilter.modifier.getter((uint64_t)v7);
  outlined init with copy of _DraggingModifier((uint64_t)&v7[*(int *)(v28 + 36)], (uint64_t)&v59);
  swift_retain();
  v27(v7, v28);
  swift_beginAccess();
  outlined assign with copy of _DraggingModifier?((uint64_t)&v59, v31 + 32);
  swift_endAccess();
  memset(v58, 0, sizeof(v58));
  swift_beginAccess();
  outlined assign with take of _DraggingModifier?((uint64_t)v58, v31 + 152, &lazy cache variable for type metadata for DragContext?, (uint64_t)&type metadata for DragContext);
  swift_endAccess();
  outlined destroy of _DraggingModifier?((uint64_t)&v59, &lazy cache variable for type metadata for _DraggingModifier?, (uint64_t)&type metadata for _DraggingModifier);
  swift_release();
  uint64_t v32 = *((void *)v2 + 6);
  LODWORD(v49) = *((_DWORD *)v2 + 11);
  type metadata accessor for [ViewResponder]();
  uint64_t v33 = AGGraphGetValue();
  if (v34)
  {
    swift_bridgeObjectRetain_n();
    MultiViewResponder.children.setter();
    uint64_t v33 = swift_bridgeObjectRelease();
  }
  *(void *)&long long v59 = v21;
  *((void *)&v59 + 1) = v22;
  double v35 = MEMORY[0x18C10C240](v33);
  double v37 = v36;
  long long v59 = *(_OWORD *)AGGraphGetValue();
  *(double *)(v32 + 280) = v35 - MEMORY[0x18C10C240]();
  *(double *)(v32 + 288) = v37 - v38;
  uint64_t v39 = MEMORY[0x1E4FBB390];
  *(unsigned char *)(v32 + 296) = *(unsigned char *)AGGraphGetValue();
  uint64_t v40 = *(void *)(v32
                  + *(void *)(class metadata base offset for CustomPreviewDragPayloadResponder + *(void *)v32 + 16));
  uint64_t v41 = (uint64_t (*)(void, uint64_t))MEMORY[0x1E4FBB718];
  type metadata accessor for _DraggingModifier?(0, (unint64_t *)&lazy cache variable for type metadata for Namespace.ID?, MEMORY[0x1E4F41808], MEMORY[0x1E4FBB718]);
  uint64_t v42 = AGGraphGetValue();
  char v43 = *(unsigned char *)(v42 + 8);
  *(void *)(v40 + 16) = *(void *)v42;
  *(unsigned char *)(v40 + 24) = v43;
  type metadata accessor for _DraggingModifier?(0, (unint64_t *)&lazy cache variable for type metadata for Bool?, v39, v41);
  *(unsigned char *)(v32 + 316) = *(unsigned char *)AGGraphGetValue();
  *(void *)(v32 + 304) = *(void *)AGGraphGetValue();
  *(_DWORD *)(v32 + 312) = *(_DWORD *)AGGraphGetValue();
  uint64_t result = AGGraphGetOutputValue();
  if (!result)
  {
    type metadata accessor for _DraggingModifier?(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>, MEMORY[0x1E4FBC838] + 8, MEMORY[0x1E4FBBE00]);
    uint64_t v45 = swift_allocObject();
    *(_OWORD *)(v45 + 16) = xmmword_188351940;
    *(void *)(v45 + 32) = v32;
    *(void *)&long long v59 = v45;
    specialized Array._endMutation()();
    swift_retain();
    AGGraphSetOutputValue();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t DefaultPreviewDragPayloadResponder.__ivar_destroyer()
{
  return swift_release();
}

uint64_t DefaultPreviewDragPayloadResponder.__deallocating_deinit()
{
  DefaultLayoutViewResponder.deinit();
  swift_release();

  return swift_deallocClassInstance();
}

uint64_t ObjC metadata update function for DefaultPreviewDragPayloadResponder()
{
  return type metadata accessor for DefaultPreviewDragPayloadResponder();
}

uint64_t protocol witness for DragPayloadProvider.payload.getter in conformance DefaultPreviewDragPayloadResponder()
{
  return swift_retain();
}

uint64_t CustomPreviewDragPayloadResponder.isDragEnabled.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 264) = result;
  return result;
}

uint64_t CustomPreviewDragPayloadResponder.__ivar_destroyer()
{
  return swift_release();
}

uint64_t CustomPreviewDragPayloadResponder.__deallocating_deinit()
{
  CustomPreviewResponder.deinit();
  swift_release();

  return swift_deallocClassInstance();
}

uint64_t protocol witness for DragPayloadProvider.payload.getter in conformance CustomPreviewDragPayloadResponder<A>()
{
  return swift_retain();
}

uint64_t DragPayload.__deallocating_deinit()
{
  outlined destroy of _DraggingModifier?(v0 + 32, &lazy cache variable for type metadata for _DraggingModifier?, (uint64_t)&type metadata for _DraggingModifier);
  outlined destroy of _DraggingModifier?(v0 + 152, &lazy cache variable for type metadata for DragContext?, (uint64_t)&type metadata for DragContext);

  return swift_deallocClassInstance();
}

uint64_t outlined destroy of _DraggingModifier?(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  type metadata accessor for _DraggingModifier?(0, a2, a3, MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  return a1;
}

uint64_t outlined init with copy of DragContext?(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t a4)
{
  type metadata accessor for _DraggingModifier?(0, a3, a4, MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a2, a1, v6);
  return a2;
}

uint64_t outlined assign with copy of _DraggingModifier?(uint64_t a1, uint64_t a2)
{
  type metadata accessor for _DraggingModifier?(0, &lazy cache variable for type metadata for _DraggingModifier?, (uint64_t)&type metadata for _DraggingModifier, MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

void *type metadata accessor for DragSnapshotResponderFilter()
{
  return &unk_1ED44F180;
}

uint64_t initializeWithCopy for UIKitDragDropPreviewAdaptor(uint64_t a1, uint64_t a2)
{
  int v3 = *(void **)a2;
  uint64_t v4 = *(void **)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  id v5 = v3;
  id v6 = v4;
  return a1;
}

uint64_t assignWithCopy for UIKitDragDropPreviewAdaptor(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a2;
  id v5 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  id v6 = v4;

  uint64_t v7 = *(void **)(a2 + 8);
  uint64_t v8 = *(void **)(a1 + 8);
  *(void *)(a1 + 8) = v7;
  id v9 = v7;

  long long v10 = *(_OWORD *)(a2 + 16);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = v10;
  return a1;
}

uint64_t assignWithTake for UIKitDragDropPreviewAdaptor(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;

  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  return a1;
}

ValueMetadata *type metadata accessor for UIKitDragDropPreviewAdaptor()
{
  return &type metadata for UIKitDragDropPreviewAdaptor;
}

uint64_t assignWithCopy for DragSnapshotResponderFilter(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for DragSnapshotResponderFilter(uint64_t a1, uint64_t a2)
{
  long long v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_release();
  return a1;
}

ValueMetadata *type metadata accessor for HasDragItemsKey()
{
  return &type metadata for HasDragItemsKey;
}

uint64_t static ListRowBackgroundTraitKey.defaultValue.getter()
{
  return 0;
}

uint64_t View.listRowBackground<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void v7[2] = a2;
  v7[3] = a3;
  uint64_t v7[4] = a4;
  void v7[5] = a5;
  type metadata accessor for Optional();
  _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((void (*)(char *, char *))partial apply for closure #1 in View.listRowBackground<A>(_:), (uint64_t)v7, MEMORY[0x1E4FBC248], MEMORY[0x1E4F41618], v5, (uint64_t)&v8);
  void v7[7] = v8;
  View._trait<A>(_:_:)();
  return swift_release();
}

uint64_t closure #1 in View.listRowBackground<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  double v3 = MEMORY[0x1F4188790](a1);
  (*(void (**)(char *, double))(v5 + 16))((char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v3);
  uint64_t result = AnyView.init<A>(_:)();
  *a2 = result;
  return result;
}

uint64_t partial apply for closure #1 in View.listRowBackground<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return closure #1 in View.listRowBackground<A>(_:)(a1, a2);
}

uint64_t static ClipsListRowBackgroundTraitKey.defaultValue.getter()
{
  return 0;
}

ValueMetadata *type metadata accessor for ClipsListRowBackgroundTraitKey()
{
  return &type metadata for ClipsListRowBackgroundTraitKey;
}

uint64_t sub_1882EE6BC()
{
  return swift_getWitnessTable();
}

void type metadata accessor for _TraitWritingModifier<ListRowBackgroundTraitKey>()
{
  if (!lazy cache variable for type metadata for _TraitWritingModifier<ListRowBackgroundTraitKey>)
  {
    unint64_t v0 = type metadata accessor for _TraitWritingModifier();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _TraitWritingModifier<ListRowBackgroundTraitKey>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type _TraitWritingModifier<ListRowBackgroundTraitKey> and conformance _TraitWritingModifier<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type _TraitWritingModifier<ListRowBackgroundTraitKey> and conformance _TraitWritingModifier<A>;
  if (!lazy protocol witness table cache variable for type _TraitWritingModifier<ListRowBackgroundTraitKey> and conformance _TraitWritingModifier<A>)
  {
    type metadata accessor for _TraitWritingModifier<ListRowBackgroundTraitKey>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _TraitWritingModifier<ListRowBackgroundTraitKey> and conformance _TraitWritingModifier<A>);
  }
  return result;
}

uint64_t static ProgressViewStyle<>.circularPlayback.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = swift_getKeyPath();
  *(void *)a1 = result;
  *(unsigned char *)(a1 + 8) = 0;
  return result;
}

uint64_t CircularPlaybackProgressViewStyle.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = swift_getKeyPath();
  *(void *)a1 = result;
  *(unsigned char *)(a1 + 8) = 0;
  return result;
}

uint64_t CircularPlaybackProgressViewStyle.makeBody(configuration:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = *(void *)v2;
  uint64_t v6 = *(unsigned __int8 *)(v2 + 8);
  _s7SwiftUI30ProgressViewStyleConfigurationVWOcTm_1(a1, a2, type metadata accessor for ProgressViewStyleConfiguration);
  outlined copy of Environment<Color?>.Content(v5, v6);
  uint64_t v7 = specialized Environment.wrappedValue.getter(v5, v6);
  outlined consume of Environment<Color?>.Content(v5, v6);
  if (!v7) {
    uint64_t v7 = static Color.white.getter();
  }
  *(void *)(a2 + *(int *)(type metadata accessor for ArchivableCircularPlaybackProgressView(0) + 20)) = v7;
  type metadata accessor for StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ArchivableCircularPlaybackProgressView, ResolvedCircularPlaybackProgressView>();
  uint64_t v9 = a2 + *(int *)(v8 + 52);
  _s7SwiftUI30ProgressViewStyleConfigurationVWOcTm_1(a1, v9, type metadata accessor for ProgressViewStyleConfiguration);
  outlined copy of Environment<Color?>.Content(v5, v6);
  uint64_t v10 = specialized Environment.wrappedValue.getter(v5, v6);
  outlined consume of Environment<Color?>.Content(v5, v6);
  if (!v10) {
    uint64_t v10 = static Color.white.getter();
  }
  uint64_t result = type metadata accessor for ResolvedCircularPlaybackProgressView();
  *(void *)(v9 + *(int *)(result + 20)) = v10;
  return result;
}

void type metadata accessor for StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ArchivableCircularPlaybackProgressView, ResolvedCircularPlaybackProgressView>()
{
  if (!lazy cache variable for type metadata for StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ArchivableCircularPlaybackProgressView, ResolvedCircularPlaybackProgressView>)
  {
    type metadata accessor for InterfaceIdiomPredicate<WidgetInterfaceIdiom>();
    type metadata accessor for ArchivableCircularPlaybackProgressView(255);
    type metadata accessor for ResolvedCircularPlaybackProgressView();
    _s7SwiftUI23InterfaceIdiomPredicateVyAA06WidgetcD0VGACyxGAA09ViewInputE0AAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type InterfaceIdiomPredicate<WidgetInterfaceIdiom> and conformance InterfaceIdiomPredicate<A>, (void (*)(uint64_t))type metadata accessor for InterfaceIdiomPredicate<WidgetInterfaceIdiom>);
    unint64_t v0 = type metadata accessor for StaticIf();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ArchivableCircularPlaybackProgressView, ResolvedCircularPlaybackProgressView>);
    }
  }
}

uint64_t type metadata accessor for ResolvedCircularPlaybackProgressView()
{
  uint64_t result = type metadata singleton initialization cache for ResolvedCircularPlaybackProgressView;
  if (!type metadata singleton initialization cache for ResolvedCircularPlaybackProgressView) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t associated type witness table accessor for ProgressViewStyle.Body : View in CircularPlaybackProgressViewStyle()
{
  return swift_getOpaqueTypeConformance2();
}

ValueMetadata *type metadata accessor for CircularPlaybackProgressViewStyle()
{
  return &type metadata for CircularPlaybackProgressViewStyle;
}

unint64_t lazy protocol witness table accessor for type StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ArchivableCircularPlaybackProgressView, ResolvedCircularPlaybackProgressView> and conformance <> StaticIf<A, B, C>()
{
  unint64_t result = lazy protocol witness table cache variable for type StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ArchivableCircularPlaybackProgressView, ResolvedCircularPlaybackProgressView> and conformance <> StaticIf<A, B, C>;
  if (!lazy protocol witness table cache variable for type StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ArchivableCircularPlaybackProgressView, ResolvedCircularPlaybackProgressView> and conformance <> StaticIf<A, B, C>)
  {
    type metadata accessor for StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ArchivableCircularPlaybackProgressView, ResolvedCircularPlaybackProgressView>();
    _s7SwiftUI23InterfaceIdiomPredicateVyAA06WidgetcD0VGACyxGAA09ViewInputE0AAWlTm_0(&lazy protocol witness table cache variable for type ArchivableCircularPlaybackProgressView and conformance ArchivableCircularPlaybackProgressView, (void (*)(uint64_t))type metadata accessor for ArchivableCircularPlaybackProgressView);
    _s7SwiftUI23InterfaceIdiomPredicateVyAA06WidgetcD0VGACyxGAA09ViewInputE0AAWlTm_0(&lazy protocol witness table cache variable for type ResolvedCircularPlaybackProgressView and conformance ResolvedCircularPlaybackProgressView, (void (*)(uint64_t))type metadata accessor for ResolvedCircularPlaybackProgressView);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ArchivableCircularPlaybackProgressView, ResolvedCircularPlaybackProgressView> and conformance <> StaticIf<A, B, C>);
  }
  return result;
}

uint64_t _s7SwiftUI23InterfaceIdiomPredicateVyAA06WidgetcD0VGACyxGAA09ViewInputE0AAWlTm_0(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for ResolvedCircularPlaybackProgressView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1882EEBD8);
}

uint64_t sub_1882EEBD8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for ProgressViewStyleConfiguration(0);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 20));
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    return (v10 + 1);
  }
}

uint64_t storeEnumTagSinglePayload for ResolvedCircularPlaybackProgressView(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1882EECAC);
}

uint64_t sub_1882EECAC(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for ProgressViewStyleConfiguration(0);
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
  }
  return result;
}

uint64_t type metadata completion function for ResolvedCircularPlaybackProgressView()
{
  uint64_t result = type metadata accessor for ProgressViewStyleConfiguration(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t associated type witness table accessor for View.Body : View in ResolvedCircularPlaybackProgressView()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t protocol witness for View.body.getter in conformance ResolvedCircularPlaybackProgressView.Base@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *v1;
  uint64_t v4 = v1[1];
  swift_retain();
  StrokeStyle.init(lineWidth:lineCap:lineJoin:miterLimit:dash:dashPhase:)();
  uint64_t v5 = static Alignment.center.getter();
  uint64_t v7 = v6;
  uint64_t result = static UnitPoint.center.getter();
  *(_OWORD *)a1 = xmmword_1883E7BB0;
  *(void *)(a1 + 16) = v3;
  *(void *)(a1 + 24) = v11;
  *(void *)(a1 + 32) = v12;
  *(void *)(a1 + 40) = v13;
  *(void *)(a1 + 48) = v14;
  *(void *)(a1 + 56) = v15;
  *(void *)(a1 + 64) = v4;
  *(_WORD *)(a1 + 72) = 256;
  *(void *)(a1 + 80) = v5;
  *(void *)(a1 + 88) = v7;
  *(void *)(a1 + 96) = 0xBFF921FB54442D18;
  *(void *)(a1 + 104) = v9;
  *(void *)(a1 + 112) = v10;
  return result;
}

uint64_t ResolvedCircularPlaybackProgressView.body.getter@<X0>(uint64_t a1@<X8>)
{
  type metadata accessor for TimelineProgressView<ResolvedCircularPlaybackProgressView.Base>(0, &lazy cache variable for type metadata for TimelineProgressView<ResolvedCircularPlaybackProgressView.Base>, (uint64_t (*)(void))lazy protocol witness table accessor for type ResolvedCircularPlaybackProgressView.Base and conformance ResolvedCircularPlaybackProgressView.Base, (uint64_t)&type metadata for ResolvedCircularPlaybackProgressView.Base, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for TimelineProgressView);
  uint64_t v4 = v3;
  MEMORY[0x1F4188790](v3);
  uint64_t v6 = (char *)&v20 - v5;
  type metadata accessor for ClosedRange<Date>();
  MEMORY[0x1F4188790](v7 - 8);
  uint64_t v9 = (char *)&v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for ProgressViewValue(0);
  MEMORY[0x1F4188790](v10);
  uint64_t v12 = (double *)((char *)&v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v13 = type metadata accessor for ProgressViewStyleConfiguration(0);
  MEMORY[0x1F4188790](v13 - 8);
  uint64_t v15 = (char *)&v20 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  _s7SwiftUI30ProgressViewStyleConfigurationVWOcTm_1(v1, (uint64_t)v15, type metadata accessor for ProgressViewStyleConfiguration);
  outlined init with take of ProgressViewValue((uint64_t)v15, (uint64_t)v12, type metadata accessor for ProgressViewValue);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    outlined init with take of ProgressViewValue((uint64_t)v12, (uint64_t)v9, (uint64_t (*)(void))type metadata accessor for ClosedRange<Date>);
    _s7SwiftUI30ProgressViewStyleConfigurationVWOcTm_1((uint64_t)v9, (uint64_t)v6, (uint64_t (*)(void))type metadata accessor for ClosedRange<Date>);
    uint64_t v16 = *(void *)(v1 + *(int *)(type metadata accessor for ResolvedCircularPlaybackProgressView() + 20));
    v6[v4[9]] = 0;
    v6[v4[10]] = 0;
    *(void *)&v6[v4[11]] = v16;
    v6[v4[12]] = 1;
    outlined init with copy of TimelineProgressView<ResolvedCircularPlaybackProgressView.Base>((uint64_t)v6, a1);
    type metadata accessor for _ConditionalContent<ResolvedCircularPlaybackProgressView.Base, TimelineProgressView<ResolvedCircularPlaybackProgressView.Base>>.Storage(0, &lazy cache variable for type metadata for _ConditionalContent<ResolvedCircularPlaybackProgressView.Base, TimelineProgressView<ResolvedCircularPlaybackProgressView.Base>>.Storage, MEMORY[0x1E4F40568]);
    swift_storeEnumTagMultiPayload();
    swift_retain();
    outlined destroy of TimelineProgressView<ResolvedCircularPlaybackProgressView.Base>((uint64_t)v6);
    return _s7SwiftUI17ProgressViewValueOWOhTm_0((uint64_t)v9, (uint64_t (*)(void))type metadata accessor for ClosedRange<Date>);
  }
  else
  {
    if (*((unsigned char *)v12 + 8)) {
      double v18 = 0.0;
    }
    else {
      double v18 = *v12;
    }
    uint64_t v19 = *(void *)(v1 + *(int *)(type metadata accessor for ResolvedCircularPlaybackProgressView() + 20));
    *(double *)a1 = v18;
    *(void *)(a1 + 8) = v19;
    type metadata accessor for _ConditionalContent<ResolvedCircularPlaybackProgressView.Base, TimelineProgressView<ResolvedCircularPlaybackProgressView.Base>>.Storage(0, &lazy cache variable for type metadata for _ConditionalContent<ResolvedCircularPlaybackProgressView.Base, TimelineProgressView<ResolvedCircularPlaybackProgressView.Base>>.Storage, MEMORY[0x1E4F40568]);
    swift_storeEnumTagMultiPayload();
    return swift_retain();
  }
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance ResolvedCircularPlaybackProgressView(uint64_t a1)
{
  return specialized static View._viewListCount(inputs:)(*(void *)a1, *(void *)(a1 + 8), *(unsigned int *)(a1 + 16), *(void *)(a1 + 24));
}

uint64_t outlined init with copy of TimelineProgressView<ResolvedCircularPlaybackProgressView.Base>(uint64_t a1, uint64_t a2)
{
  type metadata accessor for TimelineProgressView<ResolvedCircularPlaybackProgressView.Base>(0, &lazy cache variable for type metadata for TimelineProgressView<ResolvedCircularPlaybackProgressView.Base>, (uint64_t (*)(void))lazy protocol witness table accessor for type ResolvedCircularPlaybackProgressView.Base and conformance ResolvedCircularPlaybackProgressView.Base, (uint64_t)&type metadata for ResolvedCircularPlaybackProgressView.Base, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for TimelineProgressView);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of TimelineProgressView<ResolvedCircularPlaybackProgressView.Base>(uint64_t a1)
{
  type metadata accessor for TimelineProgressView<ResolvedCircularPlaybackProgressView.Base>(0, &lazy cache variable for type metadata for TimelineProgressView<ResolvedCircularPlaybackProgressView.Base>, (uint64_t (*)(void))lazy protocol witness table accessor for type ResolvedCircularPlaybackProgressView.Base and conformance ResolvedCircularPlaybackProgressView.Base, (uint64_t)&type metadata for ResolvedCircularPlaybackProgressView.Base, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for TimelineProgressView);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void *assignWithCopy for ResolvedCircularPlaybackProgressView.Base(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  return a1;
}

ValueMetadata *type metadata accessor for ResolvedCircularPlaybackProgressView.Base()
{
  return &type metadata for ResolvedCircularPlaybackProgressView.Base;
}

unint64_t lazy protocol witness table accessor for type _ConditionalContent<ResolvedCircularPlaybackProgressView.Base, TimelineProgressView<ResolvedCircularPlaybackProgressView.Base>> and conformance <> _ConditionalContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type _ConditionalContent<ResolvedCircularPlaybackProgressView.Base, TimelineProgressView<ResolvedCircularPlaybackProgressView.Base>> and conformance <> _ConditionalContent<A, B>;
  if (!lazy protocol witness table cache variable for type _ConditionalContent<ResolvedCircularPlaybackProgressView.Base, TimelineProgressView<ResolvedCircularPlaybackProgressView.Base>> and conformance <> _ConditionalContent<A, B>)
  {
    type metadata accessor for _ConditionalContent<ResolvedCircularPlaybackProgressView.Base, TimelineProgressView<ResolvedCircularPlaybackProgressView.Base>>.Storage(255, &lazy cache variable for type metadata for _ConditionalContent<ResolvedCircularPlaybackProgressView.Base, TimelineProgressView<ResolvedCircularPlaybackProgressView.Base>>, MEMORY[0x1E4F40578]);
    lazy protocol witness table accessor for type ResolvedCircularPlaybackProgressView.Base and conformance ResolvedCircularPlaybackProgressView.Base();
    lazy protocol witness table accessor for type TimelineProgressView<ResolvedCircularPlaybackProgressView.Base> and conformance TimelineProgressView<A>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ConditionalContent<ResolvedCircularPlaybackProgressView.Base, TimelineProgressView<ResolvedCircularPlaybackProgressView.Base>> and conformance <> _ConditionalContent<A, B>);
  }
  return result;
}

void type metadata accessor for _ConditionalContent<ResolvedCircularPlaybackProgressView.Base, TimelineProgressView<ResolvedCircularPlaybackProgressView.Base>>.Storage(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, uint64_t))
{
  if (!*a2)
  {
    type metadata accessor for TimelineProgressView<ResolvedCircularPlaybackProgressView.Base>(255, &lazy cache variable for type metadata for TimelineProgressView<ResolvedCircularPlaybackProgressView.Base>, (uint64_t (*)(void))lazy protocol witness table accessor for type ResolvedCircularPlaybackProgressView.Base and conformance ResolvedCircularPlaybackProgressView.Base, (uint64_t)&type metadata for ResolvedCircularPlaybackProgressView.Base, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for TimelineProgressView);
    unint64_t v7 = a3(a1, &type metadata for ResolvedCircularPlaybackProgressView.Base, v6);
    if (!v8) {
      atomic_store(v7, a2);
    }
  }
}

unint64_t lazy protocol witness table accessor for type TimelineProgressView<ResolvedCircularPlaybackProgressView.Base> and conformance TimelineProgressView<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type TimelineProgressView<ResolvedCircularPlaybackProgressView.Base> and conformance TimelineProgressView<A>;
  if (!lazy protocol witness table cache variable for type TimelineProgressView<ResolvedCircularPlaybackProgressView.Base> and conformance TimelineProgressView<A>)
  {
    type metadata accessor for TimelineProgressView<ResolvedCircularPlaybackProgressView.Base>(255, &lazy cache variable for type metadata for TimelineProgressView<ResolvedCircularPlaybackProgressView.Base>, (uint64_t (*)(void))lazy protocol witness table accessor for type ResolvedCircularPlaybackProgressView.Base and conformance ResolvedCircularPlaybackProgressView.Base, (uint64_t)&type metadata for ResolvedCircularPlaybackProgressView.Base, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for TimelineProgressView);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TimelineProgressView<ResolvedCircularPlaybackProgressView.Base> and conformance TimelineProgressView<A>);
  }
  return result;
}

unint64_t instantiation function for generic protocol witness table for ResolvedCircularPlaybackProgressView.Base(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type ResolvedCircularPlaybackProgressView.Base and conformance ResolvedCircularPlaybackProgressView.Base();
  *(void *)(a1 + 8) = result;
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table accessor for type ResolvedCircularPlaybackProgressView.Base and conformance ResolvedCircularPlaybackProgressView.Base();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t associated type witness table accessor for View.Body : View in ResolvedCircularPlaybackProgressView.Base()
{
  return swift_getOpaqueTypeConformance2();
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<StrokeShapeView<_TrimmedShape<Circle._Inset>, Color, EmptyView>, _RotationEffect> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<StrokeShapeView<_TrimmedShape<Circle._Inset>, Color, EmptyView>, _RotationEffect> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<StrokeShapeView<_TrimmedShape<Circle._Inset>, Color, EmptyView>, _RotationEffect> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<StrokeShapeView<_TrimmedShape<Circle._Inset>, Color, EmptyView>, _RotationEffect>(255);
    _s7SwiftUI23InterfaceIdiomPredicateVyAA06WidgetcD0VGACyxGAA09ViewInputE0AAWlTm_0(&lazy protocol witness table cache variable for type StrokeShapeView<_TrimmedShape<Circle._Inset>, Color, EmptyView> and conformance StrokeShapeView<A, B, C>, (void (*)(uint64_t))type metadata accessor for StrokeShapeView<_TrimmedShape<Circle._Inset>, Color, EmptyView>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<StrokeShapeView<_TrimmedShape<Circle._Inset>, Color, EmptyView>, _RotationEffect> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for TimelineProgressView<ResolvedCircularPlaybackProgressView.Base>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void), uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v9 = a3();
    unint64_t v10 = a5(a1, a4, v9);
    if (!v11) {
      atomic_store(v10, a2);
    }
  }
}

uint64_t assignWithTake for NavigationAuthority(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_release();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_release();
  return a1;
}

uint64_t key path getter for NavigationSelectionHost.selectionSeedByStackKey : NavigationSelectionHost@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_getKeyPath();
  _s7SwiftUI23NavigationSelectionHostCAC11Observation10ObservableAAWlTm_0(&lazy protocol witness table cache variable for type NavigationSelectionHost and conformance NavigationSelectionHost, (void (*)(uint64_t))type metadata accessor for NavigationSelectionHost);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  *a2 = *(void *)(v3 + 16);
  return swift_bridgeObjectRetain();
}

uint64_t key path setter for NavigationSelectionHost.selectionSeedByStackKey : NavigationSelectionHost()
{
  return swift_bridgeObjectRelease();
}

double key path getter for NavigationSeedHost.seeds : NavigationSeedHost@<D0>(uint64_t *a1@<X0>, double *a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_getKeyPath();
  _s7SwiftUI23NavigationSelectionHostCAC11Observation10ObservableAAWlTm_0(&lazy protocol witness table cache variable for type NavigationSeedHost and conformance NavigationSeedHost, (void (*)(uint64_t))type metadata accessor for NavigationSeedHost);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  double result = *(double *)(v3 + 16);
  *a2 = result;
  return result;
}

uint64_t key path setter for NavigationSeedHost.seeds : NavigationSeedHost()
{
  return swift_release();
}

unint64_t NavigationAuthority.RequestError.message.getter()
{
  outlined init with take of NavigationSplitViewColumnWidth(v0, (uint64_t)&v25);
  uint64_t v1 = v25;
  switch(v29)
  {
    case 1:
      uint64_t v11 = (void *)v26;
      _StringGuts.grow(_:)(191);
      v12._object = (void *)0x8000000188346280;
      v12._uint64_t countAndFlagsBits = 0x100000000000002DLL;
      String.append(_:)(v12);
      v13._uint64_t countAndFlagsBits = v1;
      v13._object = v11;
      String.append(_:)(v13);
      uint64_t v9 = 0x1000000000000090;
      unint64_t v10 = "” is inside a list or table with a different selection type. There are no other visible navigation destinati"
            "ons. The link cannot be activated.";
      goto LABEL_7;
    case 2:
      uint64_t v14 = (void *)v26;
      _StringGuts.grow(_:)(310);
      v15._uint64_t countAndFlagsBits = 0x1000000000000032;
      v15._object = (void *)0x8000000188335760;
      String.append(_:)(v15);
      v16._uint64_t countAndFlagsBits = v1;
      v16._object = v14;
      String.append(_:)(v16);
      uint64_t v9 = 0x1000000000000102;
      unint64_t v10 = "” but there is no matching navigationDestination declaration visible from the location of the link. The link"
            " cannot be activated.\n"
            "\n"
            "Note: Links search for destinations in any surrounding NavigationStack, then within the same column of a Nav"
            "igationSplitView.";
      goto LABEL_7;
    case 3:
      uint64_t v17 = (void *)v26;
      _StringGuts.grow(_:)(318);
      v18._uint64_t countAndFlagsBits = 0x1000000000000032;
      v18._object = (void *)0x8000000188335760;
      String.append(_:)(v18);
      v19._uint64_t countAndFlagsBits = v1;
      v19._object = v17;
      String.append(_:)(v19);
      uint64_t v9 = 0x100000000000010ALL;
      unint64_t v10 = "”. The matching navigationDestination declaration is in the detail column, so it attempts to target the next"
            " column. There is no next column after the detail column.\n"
            "\n"
            "Did you mean to put the navigationDestination inside a NavigationStack or else in a prior column?";
      goto LABEL_7;
    case 4:
      uint64_t v20 = (void *)v26;
      _StringGuts.grow(_:)(379);
      v21._uint64_t countAndFlagsBits = 0x1000000000000046;
      v21._object = (void *)0x8000000188345E80;
      String.append(_:)(v21);
      v22._uint64_t countAndFlagsBits = v1;
      v22._object = v20;
      String.append(_:)(v22);
      uint64_t v9 = 0x1000000000000133;
      unint64_t v10 = "” is misplaced. It's outside of an explicit NavigationStack, but inside the detail column of a NavigationSpl"
            "itView, so it attempts to target the next column. There is no next column after the detail column.\n"
            "\n"
            "Did you mean to put the navigationDestination inside a NavigationStack or else in a prior column?";
      goto LABEL_7;
    case 5:
      if (v28 | v27 | v26 | v25) {
        return 0xD00000000000017BLL;
      }
      else {
        return 0xD00000000000015FLL;
      }
    default:
      uint64_t v2 = (void *)v26;
      uint64_t v3 = v27;
      uint64_t v4 = (void *)v28;
      _StringGuts.grow(_:)(145);
      v5._object = (void *)0x8000000188346280;
      v5._uint64_t countAndFlagsBits = 0x100000000000002DLL;
      String.append(_:)(v5);
      v6._uint64_t countAndFlagsBits = v1;
      v6._object = v2;
      String.append(_:)(v6);
      v7._uint64_t countAndFlagsBits = 0x100000000000003ELL;
      v7._object = (void *)0x8000000188346350;
      String.append(_:)(v7);
      v8._uint64_t countAndFlagsBits = v3;
      v8._object = v4;
      String.append(_:)(v8);
      uint64_t v9 = 0x1000000000000022;
      unint64_t v10 = "”. The link cannot be activated.";
LABEL_7:
      unint64_t v23 = (unint64_t)(v10 - 32) | 0x8000000000000000;
      String.append(_:)(*(Swift::String *)&v9);
      return 0;
  }
}

uint64_t sub_1882EFDDC()
{
  swift_weakDestroy();
  swift_release();
  swift_release();

  return swift_deallocObject();
}

uint64_t outlined release of NavigationAuthority.RequestError(uint64_t a1)
{
  return a1;
}

uint64_t outlined consume of NavigationAuthority.RequestError(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int8 a5)
{
  if (a5 - 1 >= 4)
  {
    if (a5) {
      return result;
    }
    swift_bridgeObjectRelease();
  }

  return swift_bridgeObjectRelease();
}

uint64_t specialized _merge<A>(low:mid:high:buffer:by:)(char *__dst, char *__src, unint64_t a3, char *a4)
{
  uint64_t v4 = a4;
  Swift::String v6 = __src;
  Swift::String v7 = __dst;
  int64_t v8 = __src - __dst;
  int64_t v9 = (__src - __dst) / 136;
  uint64_t v10 = a3 - (void)__src;
  uint64_t v11 = (uint64_t)(a3 - (void)__src) / 136;
  long long v52 = __dst;
  long long v51 = a4;
  if (v9 < v11)
  {
    if (v8 >= -135)
    {
      if (a4 != __dst || &__dst[136 * v9] <= a4) {
        memmove(a4, __dst, 136 * v9);
      }
      Swift::String v12 = &v4[136 * v9];
      long long v50 = v12;
      if ((unint64_t)v6 < a3 && v8 >= 136)
      {
        while (2)
        {
          uint64_t v13 = *(void *)v4;
          uint64_t v14 = *((void *)v4 + 1);
          uint64_t v16 = *((void *)v4 + 2);
          uint64_t v15 = *((void *)v4 + 3);
          uint64_t v17 = *((void *)v4 + 7);
          unsigned int v18 = v4[64];
          unint64_t v19 = 5;
          switch(v6[64])
          {
            case 0:
              goto LABEL_33;
            case 1:
            case 2:
            case 4:
              unint64_t v19 = 20;
              if (v18 > 0x16) {
                goto LABEL_58;
              }
              goto LABEL_33;
            case 3:
            case 5:
              unint64_t v19 = 15;
              if (v18 > 0x16) {
                goto LABEL_58;
              }
              goto LABEL_33;
            case 6:
            case 7:
              unint64_t v19 = 30;
              if (v18 > 0x16) {
                goto LABEL_58;
              }
              goto LABEL_33;
            case 8:
              unint64_t v19 = 25;
              goto LABEL_33;
            case 9:
              unint64_t v19 = 60;
              if (v18 > 0x16) {
                goto LABEL_58;
              }
              goto LABEL_33;
            case 10:
            case 13:
            case 17:
              unint64_t v19 = 40;
              if (v18 > 0x16) {
                goto LABEL_58;
              }
              goto LABEL_33;
            case 14:
            case 21:
              unint64_t v19 = 80;
              if (v18 > 0x16) {
                goto LABEL_58;
              }
              goto LABEL_33;
            case 18:
            case 19:
              unint64_t v19 = 50;
              if (v18 > 0x16) {
                goto LABEL_58;
              }
              goto LABEL_33;
            case 20:
              unint64_t v19 = 70;
              if (v18 > 0x16) {
                goto LABEL_58;
              }
              goto LABEL_33;
            case 22:
              uint64_t v20 = *((void *)v6 + 5);
              uint64_t v21 = *((void *)v6 + 1);
              uint64_t v22 = *((void *)v6 + 6) | *((void *)v6 + 7);
              uint64_t v23 = *((void *)v6 + 4) | *((void *)v6 + 3) | *((void *)v6 + 2);
              if (v22 | *(void *)v6 | v20 | v23 | v21)
              {
                if (*(void *)v6 != 1 || v22 | v20 | v23 | v21)
                {
LABEL_26:
                  unint64_t v19 = 0x7FFFFFFFFFFFFFFFLL;
                  if (v18 <= 0x16) {
                    goto LABEL_33;
                  }
                }
                else
                {
                  unint64_t v19 = 6;
                  if (v18 <= 0x16) {
                    goto LABEL_33;
                  }
                }
              }
              else
              {
                unint64_t v19 = 0;
                if (v18 <= 0x16)
                {
LABEL_33:
                  unint64_t v24 = 5;
                  switch(v4[64])
                  {
                    case 0:
                      goto LABEL_59;
                    case 1:
                    case 2:
                    case 4:
                      if (v19 >= 0x14) {
                        goto LABEL_64;
                      }
                      goto LABEL_60;
                    case 3:
                    case 5:
                      if (v19 >= 0xF) {
                        goto LABEL_64;
                      }
                      goto LABEL_60;
                    case 6:
                    case 7:
                      if (v19 >= 0x1E) {
                        goto LABEL_64;
                      }
                      goto LABEL_60;
                    case 8:
                      if (v19 >= 0x19) {
                        goto LABEL_64;
                      }
                      goto LABEL_60;
                    case 9:
                      if (v19 >= 0x3C) {
                        goto LABEL_64;
                      }
                      goto LABEL_60;
                    case 10:
                    case 13:
                    case 17:
                      if (v19 >= 0x28) {
                        goto LABEL_64;
                      }
                      goto LABEL_60;
                    case 14:
                    case 21:
                      if (v19 >= 0x50) {
                        goto LABEL_64;
                      }
                      goto LABEL_60;
                    case 18:
                    case 19:
                      if (v19 >= 0x32) {
                        goto LABEL_64;
                      }
                      goto LABEL_60;
                    case 20:
                      if (v19 >= 0x46) {
                        goto LABEL_64;
                      }
                      goto LABEL_60;
                    case 22:
                      uint64_t v25 = v16 | v14;
                      uint64_t v26 = v16 | v14 | v13 | v15;
                      uint64_t v27 = *((void *)v4 + 4) | *((void *)v4 + 5) | *((void *)v4 + 6);
                      if (!(v26 | v27 | v17)) {
                        goto LABEL_64;
                      }
                      if (v13 != 1 || v25 | v15 | v27 | v17) {
                        break;
                      }
                      if (v19 >= 6) {
                        goto LABEL_64;
                      }
                      goto LABEL_60;
                    default:
                      break;
                  }
                }
              }
LABEL_58:
              unint64_t v24 = 0x7FFFFFFFFFFFFFFFLL;
LABEL_59:
              if (v19 >= v24)
              {
LABEL_64:
                if (v7 != v4) {
                  memmove(v7, v4, 0x88uLL);
                }
                v4 += 136;
                long long v51 = v4;
                unint64_t v28 = v6;
              }
              else
              {
LABEL_60:
                unint64_t v28 = v6 + 136;
                if (v7 < v6 || v7 >= v28 || v7 != v6) {
                  memmove(v7, v6, 0x88uLL);
                }
              }
              v7 += 136;
              if (v4 < v12)
              {
                Swift::String v6 = v28;
                if ((unint64_t)v28 < a3) {
                  continue;
                }
              }
              long long v52 = v7;
              break;
            default:
              goto LABEL_26;
          }
          break;
        }
      }
      goto LABEL_131;
    }
LABEL_132:
    _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
    JUMPOUT(0x1882F08ACLL);
  }
  if (v10 < -135) {
    goto LABEL_132;
  }
  if (a4 != __src || &__src[136 * v11] <= a4) {
    memmove(a4, __src, 136 * v11);
  }
  char v29 = &v4[136 * v11];
  long long v50 = v29;
  long long v52 = v6;
  if (v7 < v6 && v10 >= 136)
  {
    long long v30 = (char *)(a3 - 136);
    uint64_t v31 = v6;
    while (1)
    {
      uint64_t v32 = *((void *)v29 - 17);
      uint64_t v33 = *((void *)v31 - 17);
      uint64_t v34 = *((void *)v31 - 16);
      v31 -= 136;
      uint64_t v36 = *((void *)v31 + 2);
      uint64_t v35 = *((void *)v31 + 3);
      uint64_t v37 = *((void *)v31 + 7);
      unsigned int v38 = v31[64];
      unint64_t v39 = 5;
      switch(*(v29 - 72))
      {
        case 0:
          goto LABEL_102;
        case 1:
        case 2:
        case 4:
          unint64_t v39 = 20;
          if (v38 > 0x16) {
            goto LABEL_117;
          }
          goto LABEL_102;
        case 3:
        case 5:
          unint64_t v39 = 15;
          if (v38 > 0x16) {
            goto LABEL_117;
          }
          goto LABEL_102;
        case 6:
        case 7:
          unint64_t v39 = 30;
          if (v38 > 0x16) {
            goto LABEL_117;
          }
          goto LABEL_102;
        case 8:
          unint64_t v39 = 25;
          goto LABEL_102;
        case 9:
          unint64_t v39 = 60;
          if (v38 > 0x16) {
            goto LABEL_117;
          }
          goto LABEL_102;
        case 10:
        case 13:
        case 17:
          unint64_t v39 = 40;
          if (v38 > 0x16) {
            goto LABEL_117;
          }
          goto LABEL_102;
        case 14:
        case 21:
          unint64_t v39 = 80;
          if (v38 > 0x16) {
            goto LABEL_117;
          }
          goto LABEL_102;
        case 18:
        case 19:
          unint64_t v39 = 50;
          if (v38 > 0x16) {
            goto LABEL_117;
          }
          goto LABEL_102;
        case 20:
          unint64_t v39 = 70;
          if (v38 > 0x16) {
            goto LABEL_117;
          }
          goto LABEL_102;
        case 22:
          uint64_t v40 = *((void *)v29 - 12);
          uint64_t v41 = *((void *)v29 - 16);
          uint64_t v42 = *((void *)v29 - 11) | *((void *)v29 - 10);
          uint64_t v43 = *((void *)v29 - 13) | *((void *)v29 - 14) | *((void *)v29 - 15);
          if (v42 | v32 | v40 | v43 | v41)
          {
            if (v32 != 1 || v42 | v40 | v43 | v41)
            {
LABEL_95:
              unint64_t v39 = 0x7FFFFFFFFFFFFFFFLL;
              if (v38 > 0x16) {
                goto LABEL_117;
              }
            }
            else
            {
              unint64_t v39 = 6;
              if (v38 > 0x16) {
                goto LABEL_117;
              }
            }
          }
          else
          {
            unint64_t v39 = 0;
            if (v38 > 0x16) {
              goto LABEL_117;
            }
          }
LABEL_102:
          unint64_t v44 = 5;
          switch(v31[64])
          {
            case 0:
              goto LABEL_119;
            case 1:
            case 2:
            case 4:
              unint64_t v44 = 20;
              goto LABEL_119;
            case 3:
            case 5:
              unint64_t v44 = 15;
              goto LABEL_119;
            case 6:
            case 7:
              unint64_t v44 = 30;
              goto LABEL_119;
            case 8:
              unint64_t v44 = 25;
              goto LABEL_119;
            case 9:
              unint64_t v44 = 60;
              goto LABEL_119;
            case 10:
            case 13:
            case 17:
              unint64_t v44 = 40;
              goto LABEL_119;
            case 14:
            case 21:
              unint64_t v44 = 80;
              goto LABEL_119;
            case 18:
            case 19:
              unint64_t v44 = 50;
              goto LABEL_119;
            case 20:
              unint64_t v44 = 70;
              goto LABEL_119;
            case 22:
              uint64_t v45 = v36 | v34;
              uint64_t v46 = v36 | v34 | v33 | v35;
              uint64_t v47 = *((void *)v31 + 4) | *((void *)v31 + 5) | *((void *)v31 + 6);
              if (!(v46 | v47 | v37))
              {
                unint64_t v44 = 0;
                goto LABEL_119;
              }
              if (v33 == 1 && !(v45 | v35 | v47 | v37))
              {
                unint64_t v44 = 6;
                goto LABEL_119;
              }
              break;
            default:
              break;
          }
LABEL_117:
          unint64_t v44 = 0x7FFFFFFFFFFFFFFFLL;
LABEL_119:
          long long v48 = v30 + 136;
          if (v39 >= v44)
          {
            long long v50 = v29 - 136;
            if (v48 < v29 || v30 >= v29 || v48 != v29) {
              memmove(v30, v29 - 136, 0x88uLL);
            }
            uint64_t v31 = v6;
            v29 -= 136;
            if (v6 <= v7) {
              goto LABEL_131;
            }
          }
          else
          {
            if (v48 != v6 || v30 >= v6) {
              memmove(v30, v31, 0x88uLL);
            }
            long long v52 = v31;
            if (v31 <= v7) {
              goto LABEL_131;
            }
          }
          v30 -= 136;
          Swift::String v6 = v31;
          if (v29 <= v4) {
            goto LABEL_131;
          }
          break;
        default:
          goto LABEL_95;
      }
    }
  }
LABEL_131:
  specialized $defer #1 <A>() in _merge<A>(low:mid:high:buffer:by:)((void **)&v52, (const void **)&v51, &v50);
  return 1;
}

uint64_t outlined copy of NavigationAuthority.RequestError(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int8 a5)
{
  if (a5 - 1 >= 4)
  {
    if (a5) {
      return result;
    }
    swift_bridgeObjectRetain();
  }

  return swift_bridgeObjectRetain();
}

uint64_t destroy for NavigationAuthority.RequestError(uint64_t a1)
{
  return outlined consume of NavigationAuthority.RequestError(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(unsigned char *)(a1 + 32));
}

uint64_t initializeWithCopy for NavigationAuthority.RequestError(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  unsigned __int8 v7 = *(unsigned char *)(a2 + 32);
  outlined copy of NavigationAuthority.RequestError(*(void *)a2, v4, v5, v6, v7);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(unsigned char *)(a1 + 32) = v7;
  return a1;
}

uint64_t assignWithCopy for NavigationAuthority.RequestError(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  unsigned __int8 v7 = *(unsigned char *)(a2 + 32);
  outlined copy of NavigationAuthority.RequestError(*(void *)a2, v4, v5, v6, v7);
  uint64_t v8 = *(void *)a1;
  uint64_t v9 = *(void *)(a1 + 8);
  uint64_t v10 = *(void *)(a1 + 16);
  uint64_t v11 = *(void *)(a1 + 24);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  unsigned __int8 v12 = *(unsigned char *)(a1 + 32);
  *(unsigned char *)(a1 + 32) = v7;
  outlined consume of NavigationAuthority.RequestError(v8, v9, v10, v11, v12);
  return a1;
}

uint64_t assignWithTake for NavigationAuthority.RequestError(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 32);
  uint64_t v4 = *(void *)a1;
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v7 = *(void *)(a1 + 24);
  long long v8 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v8;
  unsigned __int8 v9 = *(unsigned char *)(a1 + 32);
  *(unsigned char *)(a1 + 32) = v3;
  outlined consume of NavigationAuthority.RequestError(v4, v6, v5, v7, v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for NavigationAuthority.RequestError(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFB && *(unsigned char *)(a1 + 33)) {
    return (*(_DWORD *)a1 + 251);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 32);
  if (v3 <= 5) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for NavigationAuthority.RequestError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFA)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(unsigned char *)(result + 32) = 0;
    *(void *)uint64_t result = a2 - 251;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xFB) {
      *(unsigned char *)(result + 33) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFB) {
      *(unsigned char *)(result + 33) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 32) = -(char)a2;
    }
  }
  return result;
}

uint64_t getEnumTag for NavigationAuthority.RequestError(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 32) <= 4u) {
    return *(unsigned __int8 *)(a1 + 32);
  }
  else {
    return (*(_DWORD *)a1 + 5);
  }
}

uint64_t destructiveInjectEnumTag for NavigationAuthority.RequestError(uint64_t result, unsigned int a2)
{
  if (a2 >= 5)
  {
    *(void *)uint64_t result = a2 - 5;
    *(void *)(result + 8) = 0;
    LOBYTE(a2) = 5;
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
  }
  *(unsigned char *)(result + 32) = a2;
  return result;
}

ValueMetadata *type metadata accessor for NavigationAuthority.RequestError()
{
  return &type metadata for NavigationAuthority.RequestError;
}

uint64_t closure #1 in NavigationSeedHost.seeds.setterpartial apply()
{
  return partial apply for closure #1 in NavigationSeedHost.seeds.setter();
}

uint64_t closure #1 in NavigationSelectionHost.selectionSeedByStackKey.setterpartial apply()
{
  return partial apply for closure #1 in NavigationSelectionHost.selectionSeedByStackKey.setter();
}

id TestingAppDelegate.__deallocating_deinit()
{
  return TestingAppDelegate.__deallocating_deinit(type metadata accessor for TestingAppDelegate);
}

uint64_t type metadata accessor for TestingAppDelegate()
{
  return self;
}

id TestingSceneDelegate.__deallocating_deinit()
{
  return TestingAppDelegate.__deallocating_deinit(type metadata accessor for TestingSceneDelegate);
}

id TestingAppDelegate.__deallocating_deinit(uint64_t (*a1)(void))
{
  v3.receiver = v1;
  v3.super_class = (Class)a1();
  return objc_msgSendSuper2(&v3, sel_dealloc);
}

uint64_t type metadata accessor for TestingSceneDelegate()
{
  return self;
}

uint64_t specialized TestingAppDelegate.application(_:runTest:options:)(void *a1, uint64_t a2, uint64_t a3)
{
  if (static TestingAppDelegate.performanceTests)
  {
    uint64_t v4 = *(void *)(static TestingAppDelegate.performanceTests + 16);
    if (v4)
    {
      uint64_t v7 = static TestingAppDelegate.performanceTests + 32;
      swift_bridgeObjectRetain_n();
      while (1)
      {
        outlined init with copy of TableColumnList(v7, (uint64_t)&v26);
        uint64_t v8 = v27;
        uint64_t v9 = v28;
        __swift_project_boxed_opaque_existential_1(&v26, v27);
        if ((*(uint64_t (**)(uint64_t, uint64_t))(v9 + 16))(v8, v9) == a2 && v10 == a3) {
          break;
        }
        char v12 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if (v12) {
          goto LABEL_14;
        }
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v26);
        v7 += 40;
        if (!--v4)
        {
          swift_bridgeObjectRelease();
          goto LABEL_12;
        }
      }
      swift_bridgeObjectRelease();
LABEL_14:
      swift_bridgeObjectRelease();
      outlined init with take of OptionalBinaryInteger(&v26, (uint64_t)&v29);
    }
    else
    {
      swift_bridgeObjectRetain();
LABEL_12:
      uint64_t v31 = 0;
      long long v29 = 0u;
      long long v30 = 0u;
    }
    swift_bridgeObjectRelease();
    if (*((void *)&v30 + 1))
    {
      outlined init with take of OptionalBinaryInteger(&v29, (uint64_t)v32);
      if (static TestingAppDelegate.testHost)
      {
        uint64_t v13 = (void *)static TestingAppDelegate.application;
        static TestingAppDelegate.application = (uint64_t)a1;
        id v14 = (id)static TestingAppDelegate.testHost;

        uint64_t v15 = v33;
        uint64_t v16 = v34;
        __swift_project_boxed_opaque_existential_1(v32, v33);
        uint64_t v17 = *(void *)(v16 + 8);
        unsigned int v18 = *(void (**)(uint64_t, uint64_t))(v17 + 8);
        id v19 = a1;
        v18(v15, v17);
        uint64_t v20 = v34;
        __swift_project_boxed_opaque_existential_1(v32, v33);
        uint64_t v21 = *(void (**)(void))(v20 + 24);
        id v22 = v14;
        v21();

        uint64_t v23 = v33;
        uint64_t v24 = v34;
        __swift_project_boxed_opaque_existential_1(v32, v33);
        (*(void (**)(uint64_t))(*(void *)(v24 + 8) + 16))(v23);

        __swift_destroy_boxed_opaque_existential_1((uint64_t)v32);
        return 1;
      }
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v32);
    }
    else
    {
      outlined destroy of _PerformanceTest?((uint64_t)&v29);
    }
  }
  return 0;
}

void specialized TestingSceneDelegate.scene(_:willConnectTo:options:)(void *a1)
{
  uint64_t v2 = OBJC_IVAR____TtC7SwiftUI20TestingSceneDelegate_window;
  if (!*(void *)(v1 + OBJC_IVAR____TtC7SwiftUI20TestingSceneDelegate_window))
  {
    self;
    uint64_t v4 = swift_dynamicCastObjCClass();
    if (v4)
    {
      uint64_t v5 = v4;
      id v6 = objc_allocWithZone(MEMORY[0x1E4FB1F48]);
      id v14 = a1;
      id v7 = objc_msgSend(v6, sel_initWithWindowScene_, v5);
      uint64_t v8 = *(void **)(v1 + v2);
      *(void *)(v1 + v2) = v7;
      id v9 = v7;

      id v10 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1F48]), sel_initWithWindowScene_, v5);
      uint64_t v11 = *(void **)(v1 + OBJC_IVAR____TtC7SwiftUI20TestingSceneDelegate_comparisonWindow);
      *(void *)(v1 + OBJC_IVAR____TtC7SwiftUI20TestingSceneDelegate_comparisonWindow) = v10;
      id v12 = v10;

      uint64_t v13 = (void (*)(id, id))static TestingSceneDelegate.connectCallback;
      if (static TestingSceneDelegate.connectCallback)
      {
        swift_retain();
        v13(v9, v12);

        outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?((uint64_t)v13);
      }
      else
      {
      }
    }
  }
}

uint64_t outlined destroy of _PerformanceTest?(uint64_t a1)
{
  type metadata accessor for _PerformanceTest?();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void type metadata accessor for _PerformanceTest?()
{
  if (!lazy cache variable for type metadata for _PerformanceTest?)
  {
    type metadata accessor for _PerformanceTest();
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _PerformanceTest?);
    }
  }
}

unint64_t type metadata accessor for _PerformanceTest()
{
  unint64_t result = lazy cache variable for type metadata for _PerformanceTest;
  if (!lazy cache variable for type metadata for _PerformanceTest)
  {
    unint64_t result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for _PerformanceTest);
  }
  return result;
}

uint64_t dispatch thunk of Widget.init()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of Widget.body.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t type metadata accessor for WidgetBodyAccessor()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t WidgetBodyAccessor.updateBody(of:changed:)(uint64_t result, char a2)
{
  if (a2)
  {
    MEMORY[0x1F4188790](result);
    type metadata accessor for WidgetBodyAccessor();
    swift_getWitnessTable();
    return BodyAccessor.setBody(_:)();
  }
  return result;
}

uint64_t protocol witness for BodyAccessor.updateBody(of:changed:) in conformance WidgetBodyAccessor<A>(uint64_t result, char a2)
{
  return WidgetBodyAccessor.updateBody(of:changed:)(result, a2);
}

uint64_t partial apply for closure #1 in WidgetBodyAccessor.updateBody(of:changed:)()
{
  return (*(uint64_t (**)(void))(*(void *)(v0 + 24) + 32))(*(void *)(v0 + 16));
}

unint64_t lazy protocol witness table accessor for type RotateEvent and conformance RotateEvent()
{
  unint64_t result = lazy protocol witness table cache variable for type RotateEvent and conformance RotateEvent;
  if (!lazy protocol witness table cache variable for type RotateEvent and conformance RotateEvent)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RotateEvent and conformance RotateEvent);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type RotateEvent and conformance RotateEvent;
  if (!lazy protocol witness table cache variable for type RotateEvent and conformance RotateEvent)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RotateEvent and conformance RotateEvent);
  }
  return result;
}

uint64_t protocol witness for HitTestableEventType.hitTestLocation.getter in conformance RotateEvent(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = lazy protocol witness table accessor for type RotateEvent and conformance RotateEvent();

  return MEMORY[0x1F40FFB78](a1, a2, v4);
}

uint64_t protocol witness for HitTestableEventType.hitTestRadius.getter in conformance RotateEvent(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = lazy protocol witness table accessor for type RotateEvent and conformance RotateEvent();

  return MEMORY[0x1F40FFB70](a1, a2, v4);
}

ValueMetadata *type metadata accessor for RotateEvent()
{
  return &type metadata for RotateEvent;
}

uint64_t static AppearsActiveKey.write(to:value:)(uint64_t a1)
{
  return UIMutableTraits.activeAppearance.setter();
}

id EnvironmentWrapper.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for EnvironmentWrapper();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

BOOL static AppearsActiveKey.read(from:)(void *a1)
{
  return objc_msgSend(a1, sel_activeAppearance) != 0;
}

id protocol witness for static UITraitBridgedEnvironmentKey.read(from:) in conformance AppearsActiveKey@<X0>(void *a1@<X0>, BOOL *a2@<X8>)
{
  id result = objc_msgSend(a1, sel_activeAppearance);
  *a2 = result != 0;
  return result;
}

uint64_t protocol witness for static UITraitBridgedEnvironmentKey.write(to:value:) in conformance AppearsActiveKey(uint64_t a1)
{
  return UIMutableTraits.activeAppearance.setter();
}

id static EnvironmentValues.MaxAllowedDynamicRangeKey.read(from:)@<X0>(void *a1@<X0>, char *a2@<X8>)
{
  id result = objc_msgSend(a1, sel__headroomUsage);
  if (result) {
    char v4 = 3;
  }
  else {
    char v4 = 0;
  }
  *a2 = v4;
  return result;
}

uint64_t static EnvironmentValues.MaxAllowedDynamicRangeKey.write(to:value:)(uint64_t a1)
{
  return UIMutableTraits._headroomUsage.setter();
}

id protocol witness for static UITraitBridgedEnvironmentKey.read(from:) in conformance EnvironmentValues.MaxAllowedDynamicRangeKey@<X0>(void *a1@<X0>, char *a2@<X8>)
{
  id result = objc_msgSend(a1, sel__headroomUsage);
  if (result) {
    char v4 = 3;
  }
  else {
    char v4 = 0;
  }
  *a2 = v4;
  return result;
}

uint64_t protocol witness for static UITraitBridgedEnvironmentKey.write(to:value:) in conformance EnvironmentValues.MaxAllowedDynamicRangeKey(uint64_t a1)
{
  return UIMutableTraits._headroomUsage.setter();
}

uint64_t dispatch thunk of static UITraitBridgedEnvironmentKey.read(from:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 16))();
}

uint64_t dispatch thunk of static UITraitBridgedEnvironmentKey.write(to:value:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 24))();
}

uint64_t sub_1882F1B70()
{
  return swift_deallocObject();
}

ValueMetadata *type metadata accessor for BridgedEnvironmentKeysKey()
{
  return &type metadata for BridgedEnvironmentKeysKey;
}

uint64_t _ScrollableLayoutProxy.subscript.getter()
{
  return (*(uint64_t (**)(void))(v0 + 72))();
}

double _ScrollableLayout<>.subscript.getter@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v7 = v6;
  uint64_t v30 = a5;
  uint64_t v29 = a4;
  uint64_t v31 = a6;
  uint64_t v11 = *(void *)(a1 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v13 = (char *)&v28 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  uint64_t v16 = (char *)&v28 - v15;
  v32[0] = v17;
  v32[1] = v17;
  v32[2] = v18;
  void v32[3] = v19;
  v32[4] = v20;
  v32[5] = v21;
  uint64_t v22 = type metadata accessor for _ScrollableLayoutView();
  double v23 = MEMORY[0x1F4188790](v22);
  uint64_t v25 = (char *)&v28 - v24;
  long long v26 = *(void (**)(char *, uint64_t, uint64_t, double))(v11 + 16);
  v26(v16, v7, a1, v23);
  ((void (*)(char *, uint64_t, uint64_t))v26)(v13, v7, a1);
  _ScrollableLayoutView.init(data:layout:)((uint64_t)v16, (uint64_t)v13, a1, a1, a2, a3, v29, v30, (uint64_t)v25);
  swift_getWitnessTable();
  default argument 1 of _ScrollView.init(contentProvider:config:)((uint64_t)v32);
  *(void *)&double result = _ScrollView.init(contentProvider:config:)((uint64_t)v25, (uint64_t)v32, v22, v31).n128_u64[0];
  return result;
}

uint64_t _ScrollableLayout.decelerationTarget(contentOffset:originalContentOffset:velocity:size:)()
{
  return 0;
}

double _ScrollableLayoutProxy.size.getter()
{
  return *(double *)(v0 + 16);
}

double _ScrollableLayoutProxy.visibleRect.getter()
{
  return *(double *)(v0 + 32);
}

uint64_t _ScrollableLayoutProxy.count.getter()
{
  return *(void *)(v0 + 64);
}

uint64_t _ScrollableLayoutProxy.visibleItems.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t _ScrollableLayoutProxy.visibleItems.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 104) = a1;
  return result;
}

uint64_t (*_ScrollableLayoutProxy.visibleItems.modify())(void, void, void, void)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

double _ScrollableLayoutProxy.contentSize.getter()
{
  return *(double *)(v0 + 112);
}

void _ScrollableLayoutProxy.contentSize.setter(double a1, double a2)
{
  *(double *)(v2 + 112) = a1;
  *(double *)(v2 + 120) = a2;
}

uint64_t (*_ScrollableLayoutProxy.contentSize.modify())(void, void, void, void)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

double _ScrollableLayoutProxy.validRect.getter()
{
  return *(double *)(v0 + 128);
}

void _ScrollableLayoutProxy.validRect.setter(double a1, double a2, double a3, double a4)
{
  unsigned char v4[16] = a1;
  v4[17] = a2;
  v4[18] = a3;
  v4[19] = a4;
}

uint64_t (*_ScrollableLayoutProxy.validRect.modify())(void, void, void, void)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t _ScrollableLayoutProxy.startIndex.getter()
{
  return 0;
}

double _ScrollableLayoutProxy.size(of:in:validatingContent:)(uint64_t a1, char a2, double a3, double a4)
{
  uint64_t v5 = v4;
  id v9 = v4[1];
  if (!*((void *)v9 + 2) || (unint64_t v11 = specialized __RawDictionaryStorage.find<A>(_:)(a1), (v12 & 1) == 0))
  {
LABEL_17:
    double v17 = v5[11](a1, a3, a4);
    uint64_t v22 = v21;
    outlined init with copy of AnyHashable(a1, (uint64_t)v26);
    int v27 = *(_DWORD *)v5;
    double v28 = a3;
    double v29 = a4;
    double v30 = v17;
    uint64_t v31 = v22;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v25 = v5[1];
    v5[1] = (double (*)(uint64_t, double, double))0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)&v27, (uint64_t)v26, isUniquelyReferenced_nonNull_native);
    v5[1] = v25;
    swift_bridgeObjectRelease();
    outlined destroy of AnyHashable((uint64_t)v26);
    return v17;
  }
  uint64_t v13 = *((void *)v9 + 7);
  uint64_t v14 = (double *)(v13 + 40 * v11);
  double v16 = v14[1];
  double v15 = v14[2];
  double v17 = v14[3];
  if (a2)
  {
    if (*(_DWORD *)(v13 + 40 * v11) != *(_DWORD *)v5 || v16 != a3 || v15 != a4) {
      goto LABEL_17;
    }
  }
  else if (v16 != a3 || v15 != a4)
  {
    goto LABEL_17;
  }
  return v17;
}

CGSize __swiftcall _ScrollableLayoutProxy.size(at:in:validatingContent:)(Swift::Int at, CGSize in, Swift::Bool validatingContent)
{
  void (*v13)(void *__return_ptr, Swift::Int);
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  CGSize result;
  void v20[5];
  _OWORD v21[4];
  long long v22;
  long long v23;
  long long v24;
  long long v25;
  long long v26;
  long long v27;

  double height = in.height;
  double width = in.width;
  long long v8 = v3[7];
  uint64_t v24 = v3[6];
  uint64_t v25 = v8;
  long long v9 = v3[9];
  long long v26 = v3[8];
  int v27 = v9;
  long long v10 = v3[3];
  unint64_t v21[2] = v3[2];
  v21[3] = v10;
  long long v11 = v3[5];
  uint64_t v22 = v3[4];
  double v23 = v11;
  long long v12 = v3[1];
  v21[0] = *v3;
  v21[1] = v12;
  uint64_t v13 = (void (*)(void *__return_ptr, Swift::Int))*((void *)&v22 + 1);
  outlined retain of _ScrollableLayoutProxy((uint64_t)v21);
  v13(v20, at);
  outlined release of _ScrollableLayoutProxy((uint64_t)v21);
  uint64_t v14 = _ScrollableLayoutProxy.size(of:in:validatingContent:)((uint64_t)v20, validatingContent, width, height);
  double v16 = v15;
  outlined destroy of AnyHashable((uint64_t)v20);
  double v17 = v14;
  uint64_t v18 = v16;
  result.double height = v18;
  result.double width = v17;
  return result;
}

uint64_t _ScrollableLayoutProxy.removeSize(of:)(uint64_t a1)
{
  uint64_t v2 = v1;
  swift_bridgeObjectRetain();
  unint64_t v4 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
  LOBYTE(a1) = v5;
  uint64_t result = swift_bridgeObjectRelease();
  if (a1)
  {
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v8 = *(void *)(v2 + 8);
    *(void *)(v2 + 8) = 0x8000000000000000;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
      specialized _NativeDictionary.copy()();
    }
    outlined destroy of AnyHashable(*(void *)(v8 + 48) + 40 * v4);
    specialized _NativeDictionary._delete(at:)(v4, v8);
    *(void *)(v2 + 8) = v8;
    return swift_bridgeObjectRelease();
  }
  return result;
}

Swift::Void __swiftcall _ScrollableLayoutProxy.removeAllSizes()()
{
  swift_bridgeObjectRelease();
  *(void *)(v0 + 8) = MEMORY[0x1E4FBC868];
}

void *protocol witness for BidirectionalCollection.index(before:) in conformance _ScrollableLayoutProxy@<X0>(void *result@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = *result - 1;
  if (__OFSUB__(*result, 1))
  {
    __break(1u);
  }
  else if ((v3 & 0x8000000000000000) == 0 && v3 < *(void *)(v2 + 64))
  {
    *a2 = v3;
    return result;
  }
  __break(1u);
  return result;
}

uint64_t *protocol witness for BidirectionalCollection.formIndex(before:) in conformance _ScrollableLayoutProxy(uint64_t *result)
{
  uint64_t v2 = *result - 1;
  if (__OFSUB__(*result, 1))
  {
    __break(1u);
  }
  else if ((v2 & 0x8000000000000000) == 0 && v2 < *(void *)(v1 + 64))
  {
    *uint64_t result = v2;
    return result;
  }
  __break(1u);
  return result;
}

void protocol witness for Collection.endIndex.getter in conformance _ScrollableLayoutProxy(void *a1@<X8>)
{
  *a1 = *(void *)(v1 + 64);
}

void (*protocol witness for Collection.subscript.read in conformance _ScrollableLayoutProxy(void **a1, void *a2))(uint64_t *a1)
{
  *a1 = malloc(0x28uLL);
  (*(void (**)(void))(v2 + 72))(*a2);
  return protocol witness for Collection.subscript.read in conformance _ScrollableLayoutProxy;
}

void protocol witness for Collection.subscript.read in conformance _ScrollableLayoutProxy(uint64_t *a1)
{
  uint64_t v1 = (void *)*a1;
  outlined destroy of AnyHashable(*a1);

  free(v1);
}

uint64_t *protocol witness for Collection.subscript.getter in conformance _ScrollableLayoutProxy@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *result;
  uint64_t v3 = result[1];
  long long v5 = v2[7];
  long long v18 = v2[6];
  long long v19 = v5;
  long long v6 = v2[9];
  long long v20 = v2[8];
  long long v21 = v6;
  long long v7 = v2[3];
  void v15[2] = v2[2];
  long long v15[3] = v7;
  long long v8 = v2[5];
  long long v16 = v2[4];
  long long v17 = v8;
  long long v9 = v2[1];
  v15[0] = *v2;
  v15[1] = v9;
  if ((v16 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_6;
  }
  if (v4 < 0)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  if ((uint64_t)v16 >= v3)
  {
    long long v10 = v2[7];
    *(_OWORD *)(a2 + 112) = v2[6];
    *(_OWORD *)(a2 + 128) = v10;
    long long v11 = v2[9];
    *(_OWORD *)(a2 + 144) = v2[8];
    *(_OWORD *)(a2 + 160) = v11;
    long long v12 = v2[3];
    *(_OWORD *)(a2 + 48) = v2[2];
    *(_OWORD *)(a2 + 64) = v12;
    long long v13 = v2[5];
    *(_OWORD *)(a2 + 80) = v2[4];
    *(_OWORD *)(a2 + 96) = v13;
    long long v14 = v2[1];
    *(_OWORD *)(a2 + 16) = *v2;
    *(_OWORD *)(a2 + 32) = v14;
    *(void *)a2 = v4;
    *(void *)(a2 + 8) = v3;
    return (uint64_t *)outlined retain of _ScrollableLayoutProxy((uint64_t)v15);
  }
LABEL_7:
  __break(1u);
  return result;
}

void protocol witness for Collection.indices.getter in conformance _ScrollableLayoutProxy(void *a1@<X8>)
{
  uint64_t v2 = *(void *)(v1 + 64);
  if (v2 < 0)
  {
    __break(1u);
  }
  else
  {
    *a1 = 0;
    a1[1] = v2;
  }
}

BOOL protocol witness for Collection.isEmpty.getter in conformance _ScrollableLayoutProxy()
{
  return *(void *)(v0 + 64) == 0;
}

void *protocol witness for RandomAccessCollection.index(_:offsetBy:) in conformance _ScrollableLayoutProxy@<X0>(void *result@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v4 = *result + a2;
  if (__OFADD__(*result, a2))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0 && *(void *)(v3 + 64) >= v4)
  {
    *a3 = v4;
    return result;
  }
  __break(1u);
  return result;
}

uint64_t protocol witness for RandomAccessCollection.index(_:offsetBy:limitedBy:) in conformance _ScrollableLayoutProxy@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t result = specialized RandomAccessCollection.index(_:offsetBy:limitedBy:)(*a1, a2, *a3);
  *(void *)a4 = result;
  *(unsigned char *)(a4 + 8) = v6 & 1;
  return result;
}

uint64_t *protocol witness for RandomAccessCollection.distance(from:to:) in conformance _ScrollableLayoutProxy(uint64_t *result, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = *(void *)(v2 + 64);
  if (v4 >= *a2)
  {
    uint64_t v5 = *result;
    if (((v3 | *result) & 0x8000000000000000) == 0 && v4 >= v5) {
      return (uint64_t *)(v3 - v5);
    }
  }
  __break(1u);
  return result;
}

uint64_t *protocol witness for Collection.index(after:) in conformance _ScrollableLayoutProxy@<X0>(uint64_t *result@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *result;
  if (*result < 0 || v3 >= *(void *)(v2 + 64)) {
    __break(1u);
  }
  else {
    *a2 = v3 + 1;
  }
  return result;
}

uint64_t *protocol witness for Collection.formIndex(after:) in conformance _ScrollableLayoutProxy(uint64_t *result)
{
  uint64_t v2 = *result;
  if (*result < 0 || v2 >= *(void *)(v1 + 64)) {
    __break(1u);
  }
  else {
    *uint64_t result = v2 + 1;
  }
  return result;
}

__n128 protocol witness for Sequence.makeIterator() in conformance _ScrollableLayoutProxy@<Q0>(uint64_t a1@<X8>)
{
  long long v2 = *(_OWORD *)(v1 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(v1 + 96);
  *(_OWORD *)(a1 + 112) = v2;
  long long v3 = *(_OWORD *)(v1 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(v1 + 128);
  *(_OWORD *)(a1 + 144) = v3;
  long long v4 = *(_OWORD *)(v1 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(v1 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  long long v5 = *(_OWORD *)(v1 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(v1 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  __n128 result = *(__n128 *)v1;
  long long v7 = *(_OWORD *)(v1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)v1;
  *(_OWORD *)(a1 + 16) = v7;
  *(void *)(a1 + 160) = 0;
  return result;
}

uint64_t protocol witness for Sequence.underestimatedCount.getter in conformance _ScrollableLayoutProxy()
{
  return *(void *)(v0 + 64);
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance _ScrollableLayoutProxy()
{
  long long v1 = v0[7];
  void v8[6] = v0[6];
  v8[7] = v1;
  long long v2 = v0[9];
  void v8[8] = v0[8];
  v8[9] = v2;
  long long v3 = v0[3];
  uint64_t v8[2] = v0[2];
  v8[3] = v3;
  long long v4 = v0[5];
  void v8[4] = v0[4];
  void v8[5] = v4;
  long long v5 = v0[1];
  v8[0] = *v0;
  v8[1] = v5;
  uint64_t v6 = specialized _copyCollectionToContiguousArray<A>(_:)((uint64_t)v8);
  outlined release of _ScrollableLayoutProxy((uint64_t)v8);
  return v6;
}

void *protocol witness for Sequence._copyContents(initializing:) in conformance _ScrollableLayoutProxy(void *a1, uint64_t a2, uint64_t a3)
{
  return specialized Sequence._copySequenceContents(initializing:)(a1, a2, a3);
}

uint64_t _ScrollableLayoutItem.id.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of AnyHashable(v1, a1);
}

uint64_t _ScrollableLayoutItem.id.setter(uint64_t a1)
{
  return outlined assign with take of AnyHashable(a1, v1);
}

uint64_t (*_ScrollableLayoutItem.id.modify())(void, void, void, void)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

double _ScrollableLayoutItem.proposedSize.getter()
{
  *(void *)&double result = *(_OWORD *)&_ProposedSize.fixingUnspecifiedDimensions()();
  return result;
}

double _ScrollableLayoutItem.anchor.getter()
{
  return *(double *)(v0 + 72);
}

uint64_t _ScrollableLayoutItem.anchorPosition.getter()
{
  return _Placement.anchorPosition.getter();
}

double _ScrollableLayoutItem.init(id:proposedSize:anchoring:at:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  outlined init with copy of AnyHashable(a1, a2);
  _Placement.init(proposedSize:anchoring:at:)();
  outlined destroy of AnyHashable(a1);
  *(void *)(a2 + 40) = v5;
  *(unsigned char *)(a2 + 48) = v6;
  *(void *)(a2 + 56) = v7;
  *(unsigned char *)(a2 + 64) = v8;
  double result = *(double *)&v9;
  *(_OWORD *)(a2 + 72) = v9;
  *(_OWORD *)(a2 + 88) = v10;
  return result;
}

uint64_t static _ScrollableLayoutItem.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  if (MEMORY[0x18C1174E0]())
  {
    char v4 = *(unsigned char *)(a1 + 48);
    uint64_t v5 = *(void *)(a1 + 56);
    char v6 = *(unsigned char *)(a1 + 64);
    uint64_t v20 = *(void *)(a1 + 40);
    char v21 = v4;
    uint64_t v22 = v5;
    char v23 = v6;
    long long v7 = *(_OWORD *)(a1 + 88);
    long long v24 = *(_OWORD *)(a1 + 72);
    long long v25 = v7;
    char v8 = *(unsigned char *)(a2 + 48);
    uint64_t v9 = *(void *)(a2 + 56);
    char v10 = *(unsigned char *)(a2 + 64);
    uint64_t v14 = *(void *)(a2 + 40);
    char v15 = v8;
    uint64_t v16 = v9;
    char v17 = v10;
    long long v11 = *(_OWORD *)(a2 + 88);
    long long v18 = *(_OWORD *)(a2 + 72);
    long long v19 = v11;
    char v12 = MEMORY[0x18C10C320](&v20, &v14);
  }
  else
  {
    char v12 = 0;
  }
  return v12 & 1;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance _ScrollableLayoutItem(uint64_t a1, uint64_t a2)
{
  if (MEMORY[0x18C1174E0]())
  {
    char v4 = *(unsigned char *)(a1 + 48);
    uint64_t v5 = *(void *)(a1 + 56);
    char v6 = *(unsigned char *)(a1 + 64);
    uint64_t v20 = *(void *)(a1 + 40);
    char v21 = v4;
    uint64_t v22 = v5;
    char v23 = v6;
    long long v7 = *(_OWORD *)(a1 + 88);
    long long v24 = *(_OWORD *)(a1 + 72);
    long long v25 = v7;
    char v8 = *(unsigned char *)(a2 + 48);
    uint64_t v9 = *(void *)(a2 + 56);
    char v10 = *(unsigned char *)(a2 + 64);
    uint64_t v14 = *(void *)(a2 + 40);
    char v15 = v8;
    uint64_t v16 = v9;
    char v17 = v10;
    long long v11 = *(_OWORD *)(a2 + 88);
    long long v18 = *(_OWORD *)(a2 + 72);
    long long v19 = v11;
    char v12 = MEMORY[0x18C10C320](&v20, &v14);
  }
  else
  {
    char v12 = 0;
  }
  return v12 & 1;
}

unint64_t lazy protocol witness table accessor for type _ScrollableLayoutProxy and conformance _ScrollableLayoutProxy()
{
  unint64_t result = lazy protocol witness table cache variable for type _ScrollableLayoutProxy and conformance _ScrollableLayoutProxy;
  if (!lazy protocol witness table cache variable for type _ScrollableLayoutProxy and conformance _ScrollableLayoutProxy)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ScrollableLayoutProxy and conformance _ScrollableLayoutProxy);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type _ScrollableLayoutProxy and conformance _ScrollableLayoutProxy;
  if (!lazy protocol witness table cache variable for type _ScrollableLayoutProxy and conformance _ScrollableLayoutProxy)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ScrollableLayoutProxy and conformance _ScrollableLayoutProxy);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type _ScrollableLayoutProxy and conformance _ScrollableLayoutProxy;
  if (!lazy protocol witness table cache variable for type _ScrollableLayoutProxy and conformance _ScrollableLayoutProxy)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ScrollableLayoutProxy and conformance _ScrollableLayoutProxy);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type _ScrollableLayoutProxy and conformance _ScrollableLayoutProxy;
  if (!lazy protocol witness table cache variable for type _ScrollableLayoutProxy and conformance _ScrollableLayoutProxy)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ScrollableLayoutProxy and conformance _ScrollableLayoutProxy);
  }
  return result;
}

uint64_t associated type witness table accessor for Collection.SubSequence : RandomAccessCollection in _ScrollableLayoutProxy()
{
  return lazy protocol witness table accessor for type Slice<_ScrollableLayoutProxy> and conformance <> Slice<A>(&lazy protocol witness table cache variable for type Slice<_ScrollableLayoutProxy> and conformance <> Slice<A>, (void (*)(void))lazy protocol witness table accessor for type _ScrollableLayoutProxy and conformance _ScrollableLayoutProxy);
}

uint64_t associated type witness table accessor for Collection.SubSequence : BidirectionalCollection in _ScrollableLayoutProxy()
{
  return lazy protocol witness table accessor for type Slice<_ScrollableLayoutProxy> and conformance <> Slice<A>(&lazy protocol witness table cache variable for type Slice<_ScrollableLayoutProxy> and conformance <> Slice<A>, (void (*)(void))lazy protocol witness table accessor for type _ScrollableLayoutProxy and conformance _ScrollableLayoutProxy);
}

uint64_t lazy protocol witness table accessor for type Slice<_ScrollableLayoutProxy> and conformance <> Slice<A>(unint64_t *a1, void (*a2)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for Slice<_ScrollableLayoutProxy>(255, &lazy cache variable for type metadata for Slice<_ScrollableLayoutProxy>, MEMORY[0x1E4FBC320]);
    a2();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t associated type witness table accessor for Collection.SubSequence : Collection in _ScrollableLayoutProxy()
{
  return lazy protocol witness table accessor for type Slice<_ScrollableLayoutProxy> and conformance Slice<A>(&lazy protocol witness table cache variable for type Slice<_ScrollableLayoutProxy> and conformance Slice<A>, &lazy cache variable for type metadata for Slice<_ScrollableLayoutProxy>, MEMORY[0x1E4FBC320]);
}

uint64_t associated type witness table accessor for Sequence.Iterator : IteratorProtocol in _ScrollableLayoutProxy()
{
  return lazy protocol witness table accessor for type Slice<_ScrollableLayoutProxy> and conformance Slice<A>(&lazy protocol witness table cache variable for type IndexingIterator<_ScrollableLayoutProxy> and conformance IndexingIterator<A>, &lazy cache variable for type metadata for IndexingIterator<_ScrollableLayoutProxy>, MEMORY[0x1E4FBBC18]);
}

uint64_t lazy protocol witness table accessor for type Slice<_ScrollableLayoutProxy> and conformance Slice<A>(unint64_t *a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, unint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for Slice<_ScrollableLayoutProxy>(255, a2, a3);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void type metadata accessor for Slice<_ScrollableLayoutProxy>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, unint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = lazy protocol witness table accessor for type _ScrollableLayoutProxy and conformance _ScrollableLayoutProxy();
    unint64_t v7 = a3(a1, &type metadata for _ScrollableLayoutProxy, v6);
    if (!v8) {
      atomic_store(v7, a2);
    }
  }
}

uint64_t dispatch thunk of static _ScrollableLayout.initialState()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t dispatch thunk of _ScrollableLayout.update(state:proxy:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 48))();
}

uint64_t dispatch thunk of _ScrollableLayout.modifier(for:layout:state:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 56))();
}

uint64_t dispatch thunk of _ScrollableLayout.decelerationTarget(contentOffset:originalContentOffset:velocity:size:)(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 64))();
}

uint64_t destroy for _ScrollableLayoutProxy()
{
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for _ScrollableLayoutProxy(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  long long v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  uint64_t v4 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v4;
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  uint64_t v5 = *(void *)(a2 + 104);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 104) = v5;
  long long v6 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v6;
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for _ScrollableLayoutProxy(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  uint64_t v4 = *(void *)(a2 + 80);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = v4;
  swift_retain();
  swift_release();
  uint64_t v5 = *(void *)(a2 + 96);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a1 + 96) = v5;
  swift_retain();
  swift_release();
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  return a1;
}

uint64_t assignWithTake for _ScrollableLayoutProxy(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRelease();
  long long v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v4;
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  swift_release();
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  swift_release();
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  swift_bridgeObjectRelease();
  long long v5 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = v5;
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
  return a1;
}

uint64_t getEnumTagSinglePayload for _ScrollableLayoutProxy(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 160)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for _ScrollableLayoutProxy(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 152) = 0;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 160) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 160) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for _ScrollableLayoutProxy()
{
  return &type metadata for _ScrollableLayoutProxy;
}

uint64_t initializeWithCopy for _ScrollableLayoutItem(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v4;
  (**(void (***)(void))(v4 - 8))();
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  return a1;
}

uint64_t assignWithCopy for _ScrollableLayoutItem(uint64_t a1, uint64_t a2)
{
  __swift_assign_boxed_opaque_existential_1((uint64_t *)a1, (uint64_t *)a2);
  uint64_t v4 = *(void *)(a2 + 40);
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  *(void *)(a1 + 40) = v4;
  uint64_t v5 = *(void *)(a2 + 56);
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  *(void *)(a1 + 56) = v5;
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  return a1;
}

uint64_t assignWithTake for _ScrollableLayoutItem(uint64_t a1, uint64_t a2)
{
  __swift_destroy_boxed_opaque_existential_1(a1);
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  uint64_t v5 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v5;
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  return a1;
}

ValueMetadata *type metadata accessor for _ScrollableLayoutItem()
{
  return &type metadata for _ScrollableLayoutItem;
}

uint64_t initializeBufferWithCopyOfBuffer for _ScrollableLayoutProxy.Storage(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for _ScrollableLayoutProxy.Storage(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for _ScrollableLayoutProxy.Storage(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for _ScrollableLayoutProxy.Storage()
{
  return &type metadata for _ScrollableLayoutProxy.Storage;
}

ValueMetadata *type metadata accessor for _ScrollableLayoutProxy.SizeRecord()
{
  return &type metadata for _ScrollableLayoutProxy.SizeRecord;
}

uint64_t ContainerValues.labelItemRole.getter()
{
  ContainerValues.subscript.getter();
  return v1;
}

void protocol witness for View.body.getter in conformance LabelStyleConfiguration.Title()
{
}

void protocol witness for View.body.getter in conformance LabelStyleConfiguration.Icon()
{
}

uint64_t dispatch thunk of LabelStyle.makeBody(configuration:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t sub_1882F32C8()
{
  return swift_getWitnessTable();
}

unsigned char *storeEnumTagSinglePayload for LabelItemRole(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1882F3428);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type LabelItemRole and conformance LabelItemRole()
{
  unint64_t result = lazy protocol witness table cache variable for type LabelItemRole and conformance LabelItemRole;
  if (!lazy protocol witness table cache variable for type LabelItemRole and conformance LabelItemRole)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LabelItemRole and conformance LabelItemRole);
  }
  return result;
}

uint64_t protocol witness for static ViewModifier._viewListCount(inputs:body:) in conformance LabelStyleModifier<A>()
{
  return static StyleModifier._viewListCount(inputs:body:)();
}

ValueMetadata *type metadata accessor for LabelItemRole.ContainerKey()
{
  return &type metadata for LabelItemRole.ContainerKey;
}

uint64_t getEnumTagSinglePayload for LabelStyleWritingModifier(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (!a2) {
    return 0;
  }
  unsigned int v7 = a2 - v5;
  if (a2 <= v5) {
    goto LABEL_19;
  }
  char v8 = 8 * v6;
  if (v6 <= 3)
  {
    unsigned int v10 = ((v7 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      int v9 = *(_DWORD *)((char *)a1 + v6);
      if (!v9) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      int v9 = *(unsigned __int16 *)((char *)a1 + v6);
      if (!*(unsigned __int16 *)((char *)a1 + v6)) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_19:
      if (v5) {
        return (*(uint64_t (**)(void))(v4 + 48))();
      }
      return 0;
    }
  }
  int v9 = *((unsigned __int8 *)a1 + v6);
  if (!*((unsigned char *)a1 + v6)) {
    goto LABEL_19;
  }
LABEL_11:
  int v11 = (v9 - 1) << v8;
  if (v6 > 3) {
    int v11 = 0;
  }
  if (v6)
  {
    if (v6 > 3) {
      LODWORD(v6) = 4;
    }
    switch((int)v6)
    {
      case 2:
        LODWORD(v6) = *a1;
        break;
      case 3:
        LODWORD(v6) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v6) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v6) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v5 + (v6 | v11) + 1;
}

void storeEnumTagSinglePayload for LabelStyleWritingModifier(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = *(void *)(v6 + 64);
  BOOL v9 = a3 >= v7;
  unsigned int v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      unsigned int v14 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v14))
      {
        int v11 = 4;
      }
      else if (v14 >= 0x100)
      {
        int v11 = 2;
      }
      else
      {
        int v11 = v14 > 1;
      }
    }
    else
    {
      int v11 = 1;
    }
  }
  else
  {
    int v11 = 0;
  }
  if (v7 < a2)
  {
    unsigned int v12 = ~v7 + a2;
    if (v8 < 4)
    {
      int v13 = (v12 >> (8 * v8)) + 1;
      if (v8)
      {
        int v15 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if (v8 == 3)
        {
          *(_WORD *)a1 = v15;
          a1[2] = BYTE2(v15);
        }
        else if (v8 == 2)
        {
          *(_WORD *)a1 = v15;
        }
        else
        {
          *a1 = v15;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v12;
      int v13 = 1;
    }
    switch(v11)
    {
      case 1:
        a1[v8] = v13;
        return;
      case 2:
        *(_WORD *)&a1[v8] = v13;
        return;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v8] = v13;
        return;
      default:
        return;
    }
  }
  switch(v11)
  {
    case 1:
      a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 2:
      *(_WORD *)&a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 3:
LABEL_34:
      __break(1u);
      JUMPOUT(0x1882F3968);
    case 4:
      *(_DWORD *)&a1[v8] = 0;
      goto LABEL_20;
    default:
LABEL_20:
      if (a2)
      {
LABEL_21:
        uint64_t v16 = *(void (**)(void))(v6 + 56);
        v16();
      }
      return;
  }
}

uint64_t sub_1882F3990()
{
  return swift_getWitnessTable();
}

uint64_t sub_1882F3AE0()
{
  swift_getAssociatedTypeWitness();

  return swift_getAssociatedConformanceWitness();
}

uint64_t getEnumTagSinglePayload for NavigationContentAbstractPosition(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFD && a1[16]) {
    return (*(_DWORD *)a1 + 253);
  }
  if (*a1 <= 3u) {
    int v3 = 3;
  }
  else {
    int v3 = *a1;
  }
  int v4 = v3 - 4;
  if (*a1 < 3u) {
    int v5 = -1;
  }
  else {
    int v5 = v4;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for NavigationContentAbstractPosition(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFC)
  {
    *(void *)unint64_t result = a2 - 253;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xFD) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFD) {
      *(unsigned char *)(result + 16) = 0;
    }
    if (a2) {
      *(unsigned char *)unint64_t result = a2 + 3;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for NavigationContentAbstractPosition()
{
  return &type metadata for NavigationContentAbstractPosition;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance NavigationContentAbstractPosition()
{
  Swift::UInt v1 = *v0;
  Swift::UInt v2 = *((void *)v0 + 1);
  Hasher.init(_seed:)();
  if (v1 == 3)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v1);
  }
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance NavigationContentAbstractPosition()
{
  Swift::UInt v1 = *v0;
  Swift::UInt v2 = *((void *)v0 + 1);
  if (v1 == 3)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v1);
  }
  Hasher._combine(_:)(v2);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance NavigationContentAbstractPosition()
{
  Swift::UInt v1 = *v0;
  Swift::UInt v2 = *((void *)v0 + 1);
  Hasher.init(_seed:)();
  if (v1 == 3)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v1);
  }
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

uint64_t NavigationContentAbstractPosition.description.getter()
{
  if (*v0 == 3)
  {
    _StringGuts.grow(_:)(22);
    swift_bridgeObjectRelease();
    uint64_t v7 = 0x206874706564;
    v1._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v1);
    swift_bridgeObjectRelease();
    v2._uint64_t countAndFlagsBits = 0x65657266206E6920;
    v2._object = (void *)0xEE006B6361747320;
    String.append(_:)(v2);
  }
  else
  {
    uint64_t v7 = 0;
    v3._uint64_t countAndFlagsBits = 0x206874706564;
    v3._object = (void *)0xE600000000000000;
    String.append(_:)(v3);
    v4._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v4);
    swift_bridgeObjectRelease();
    v5._uint64_t countAndFlagsBits = 544106784;
    v5._object = (void *)0xE400000000000000;
    String.append(_:)(v5);
    _print_unlocked<A, B>(_:_:)();
  }
  return v7;
}

BOOL specialized static NavigationContentAbstractPosition.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  int v2 = *a1;
  int v3 = *a2;
  if (v2 == 3)
  {
    if (v3 != 3) {
      return 0;
    }
  }
  else if (v3 == 3 || v2 != v3)
  {
    return 0;
  }
  return *((void *)a1 + 1) == *((void *)a2 + 1);
}

SwiftUI::UnifiedCompactWindowToolbarStyle __swiftcall UnifiedCompactWindowToolbarStyle.init()()
{
  result.showsTitle = _diagnoseUnavailableCodeReached()();
  __break(1u);
  return result;
}

SwiftUI::UnifiedCompactWindowToolbarStyle __swiftcall UnifiedCompactWindowToolbarStyle.init(showsTitle:)(Swift::Bool showsTitle)
{
  result.showsTitle = _diagnoseUnavailableCodeReached()();
  __break(1u);
  return result;
}

void UnifiedCompactWindowToolbarStyle.configureWindowToolbar(_:)()
{
}

void static UnifiedCompactWindowToolbarStyle._makeInputs(style:inputs:)()
{
}

unsigned char *storeEnumTagSinglePayload for UnifiedCompactWindowToolbarStyle(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *SwiftUI::UnifiedCompactWindowToolbarStyle result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1882F4014);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *SwiftUI::UnifiedCompactWindowToolbarStyle result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for UnifiedCompactWindowToolbarStyle()
{
  return &type metadata for UnifiedCompactWindowToolbarStyle;
}

uint64_t key path getter for EnvironmentValues.prefersFullSizeDragPreviews : EnvironmentValues@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = EnvironmentValues.prefersFullSizeDragPreviews.getter();
  *a1 = result & 1;
  return result;
}

uint64_t key path setter for EnvironmentValues.prefersFullSizeDragPreviews : EnvironmentValues()
{
  return EnvironmentValues.prefersFullSizeDragPreviews.setter();
}

Swift::Void __swiftcall DragItemTimings.apply(to:)(UIDragInteraction to)
{
  double v3 = *(double *)(v1 + 16);
  int v4 = *(unsigned __int8 *)(v1 + 24);
  double v5 = *(double *)(v1 + 32);
  int v6 = *(unsigned __int8 *)(v1 + 40);
  double v7 = *(double *)(v1 + 48);
  int v8 = *(unsigned __int8 *)(v1 + 56);
  double v9 = *(double *)(v1 + 64);
  int v10 = *(unsigned __int8 *)(v1 + 72);
  double v11 = *(double *)(v1 + 80);
  int v12 = *(unsigned __int8 *)(v1 + 88);
  int v13 = *(unsigned __int8 *)(v1 + 89);
  if (*(unsigned char *)(v1 + 8)) {
    _UIDragInteractionDefaultLiftDelay();
  }
  else {
    double v14 = *(double *)v1;
  }
  [(objc_class *)to.super.isa _setLiftDelay:v14];
  if (v4)
  {
    _UIDragInteractionDefaultPointerLiftDelay();
    double v3 = v15;
  }
  [(objc_class *)to.super.isa _setPointerLiftDelay:v3];
  if (v6)
  {
    _UIDragInteractionDefaultCancellationDelay();
    double v5 = v16;
  }
  [(objc_class *)to.super.isa _setCancellationDelay:v5];
  if (v8)
  {
    _UIDragInteractionDefaultCompetingLongPressDelay();
    double v7 = v17;
  }
  [(objc_class *)to.super.isa _setCompetingLongPressDelay:v7];
  if (v10)
  {
    _UIDragInteractionDefaultLiftMoveHysteresis();
    double v9 = v18;
  }
  [(objc_class *)to.super.isa _setLiftMoveHysteresis:v9];
  if (v12)
  {
    _UIDragInteractionDefaultPointerLiftMoveHysteresis();
    double v11 = v19;
  }
  [(objc_class *)to.super.isa _setPointerLiftMoveHysteresis:v11];

  [(objc_class *)to.super.isa _setAllowsPointerDragBeforeLiftDelay:(v13 == 2) | v13 & 1u];
}

uint64_t EnvironmentValues.dragPreviewMode.getter()
{
  if (*(void *)(v0 + 8))
  {
    type metadata accessor for _PreferenceWritingModifier<DragItemTimings.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.DragPreviewModeKey>, (uint64_t)&unk_1ED421B70, (uint64_t)&protocol witness table for EnvironmentValues.DragPreviewModeKey, MEMORY[0x1E4F40930]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.PrefersFullSizeDragPreviewsKey> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.DragPreviewModeKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.DragPreviewModeKey>, (uint64_t)&unk_1ED421B70, (uint64_t)&protocol witness table for EnvironmentValues.DragPreviewModeKey);
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for _PreferenceWritingModifier<DragItemTimings.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.DragPreviewModeKey>, (uint64_t)&unk_1ED421B70, (uint64_t)&protocol witness table for EnvironmentValues.DragPreviewModeKey, MEMORY[0x1E4F40930]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.PrefersFullSizeDragPreviewsKey> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.DragPreviewModeKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.DragPreviewModeKey>, (uint64_t)&unk_1ED421B70, (uint64_t)&protocol witness table for EnvironmentValues.DragPreviewModeKey);
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  return swift_release_n();
}

uint64_t key path getter for EnvironmentValues.dragPreviewMode : EnvironmentValues@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  if (*(void *)(a1 + 8))
  {
    type metadata accessor for _PreferenceWritingModifier<DragItemTimings.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.DragPreviewModeKey>, (uint64_t)&unk_1ED421B70, (uint64_t)&protocol witness table for EnvironmentValues.DragPreviewModeKey, MEMORY[0x1E4F40930]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.PrefersFullSizeDragPreviewsKey> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.DragPreviewModeKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.DragPreviewModeKey>, (uint64_t)&unk_1ED421B70, (uint64_t)&protocol witness table for EnvironmentValues.DragPreviewModeKey);
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for _PreferenceWritingModifier<DragItemTimings.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.DragPreviewModeKey>, (uint64_t)&unk_1ED421B70, (uint64_t)&protocol witness table for EnvironmentValues.DragPreviewModeKey, MEMORY[0x1E4F40930]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.PrefersFullSizeDragPreviewsKey> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.DragPreviewModeKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.DragPreviewModeKey>, (uint64_t)&unk_1ED421B70, (uint64_t)&protocol witness table for EnvironmentValues.DragPreviewModeKey);
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  uint64_t result = swift_release_n();
  *a2 = v4;
  return result;
}

uint64_t key path setter for EnvironmentValues.dragPreviewMode : EnvironmentValues()
{
  return EnvironmentValues.dragPreviewMode.setter();
}

uint64_t EnvironmentValues.dragPreviewMode.setter()
{
  type metadata accessor for _PreferenceWritingModifier<DragItemTimings.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.DragPreviewModeKey>, (uint64_t)&unk_1ED421B70, (uint64_t)&protocol witness table for EnvironmentValues.DragPreviewModeKey, MEMORY[0x1E4F40930]);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.PrefersFullSizeDragPreviewsKey> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.DragPreviewModeKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.DragPreviewModeKey>, (uint64_t)&unk_1ED421B70, (uint64_t)&protocol witness table for EnvironmentValues.DragPreviewModeKey);
  swift_retain();
  PropertyList.subscript.setter();
  if (*(void *)(v0 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  return swift_release();
}

uint64_t key path getter for EnvironmentValues.supportsSystemDrag : EnvironmentValues@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = EnvironmentValues.supportsSystemDrag.getter();
  *a1 = result;
  return result;
}

uint64_t key path setter for EnvironmentValues.supportsSystemDrag : EnvironmentValues()
{
  return EnvironmentValues.supportsSystemDrag.setter();
}

uint64_t View.onDrag(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  memset(v10, 0, sizeof(v10));
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = a1;
  *(void *)(v8 + 24) = a2;
  v11[0] = 1;
  long long v12 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  outlined init with take of Any?((uint64_t)v10, (uint64_t)v16);
  uint64_t v16[4] = partial apply for closure #1 in View.onDrag(_:);
  void v16[5] = v8;
  swift_retain();
  MEMORY[0x18C113660](v11, a3, &type metadata for _DraggingModifier, a4);
  return outlined destroy of _DraggingModifier((uint64_t)v11);
}

uint64_t sub_1882F4794()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t View.onDrag<A>(_:preview:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void (*a3)(double)@<X2>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X8>)
{
  uint64_t v27 = a6;
  uint64_t v26 = a4;
  uint64_t v25 = a7;
  uint64_t v11 = *(void *)(a5 - 8);
  MEMORY[0x1F4188790](a1);
  long long v13 = (char *)&v25 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for DraggingPreviewModifier();
  uint64_t v15 = *(void *)(v14 - 8);
  double v16 = MEMORY[0x1F4188790](v14);
  double v18 = (char *)&v25 - v17;
  a3(v16);
  memset(v28, 0, sizeof(v28));
  uint64_t v19 = swift_allocObject();
  *(void *)(v19 + 16) = a1;
  *(void *)(v19 + 24) = a2;
  v29[0] = 1;
  memset(&v29[8], 0, 64);
  outlined init with take of Any?((uint64_t)v28, (uint64_t)&v29[72]);
  *((void *)&v31 + 1) = partial apply for closure #1 in View.onDrag(_:);
  uint64_t v32 = v19;
  (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v18, v13, a5);
  uint64_t v20 = &v18[*(int *)(v14 + 36)];
  long long v21 = v30;
  *((_OWORD *)v20 + 4) = *(_OWORD *)&v29[64];
  *((_OWORD *)v20 + 5) = v21;
  *((_OWORD *)v20 + 6) = v31;
  *((void *)v20 + 14) = v32;
  long long v22 = *(_OWORD *)&v29[16];
  *(_OWORD *)uint64_t v20 = *(_OWORD *)v29;
  *((_OWORD *)v20 + 1) = v22;
  long long v23 = *(_OWORD *)&v29[48];
  *((_OWORD *)v20 + 2) = *(_OWORD *)&v29[32];
  *((_OWORD *)v20 + 3) = v23;
  swift_retain();
  MEMORY[0x18C113660](v18, v26, v14, v27);
  return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v18, v14);
}

uint64_t closure #1 in View.onDrag(_:)(uint64_t (*a1)(void))
{
  _sypSgMaTm_11(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<DraggingItem>, (uint64_t)&type metadata for DraggingItem, MEMORY[0x1E4FBBE00]);
  uint64_t v2 = swift_allocObject();
  *(_OWORD *)(v2 + 16) = xmmword_18834BB80;
  *(void *)(v2 + 32) = a1();
  specialized Array._endMutation()();
  return v2;
}

uint64_t View.onDrag(_:onSessionBegan:onSessionEnded:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  memset(v18, 0, sizeof(v18));
  uint64_t v16 = swift_allocObject();
  *(void *)(v16 + 16) = a1;
  *(void *)(v16 + 24) = a2;
  v19[0] = 1;
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  uint64_t v22 = a3;
  uint64_t v23 = a4;
  uint64_t v24 = a5;
  uint64_t v25 = a6;
  uint64_t v26 = 0;
  uint64_t v27 = 0;
  outlined init with take of Any?((uint64_t)v18, (uint64_t)v28);
  v28[4] = partial apply for closure #1 in View.onDrag(_:);
  v28[5] = v16;
  outlined copy of AppIntentExecutor?(a3);
  outlined copy of AppIntentExecutor?(a5);
  swift_retain();
  MEMORY[0x18C113660](v19, a7, &type metadata for _DraggingModifier, a8);
  return outlined destroy of _DraggingModifier((uint64_t)v19);
}

BOOL static DragLiftEvent.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

void DragLiftEvent.hash(into:)()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int DragLiftEvent.hashValue.getter()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t View.onDrag(isEnabled:localContext:_:onLiftEvent:onSessionBegan:onSessionEnded:onLocalSessionAnimationsCompleted:)(char a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  outlined init with copy of Any?(a2, (uint64_t)v23);
  uint64_t v20 = swift_allocObject();
  *(void *)(v20 + 16) = a3;
  *(void *)(v20 + 24) = a4;
  v24[0] = a1;
  uint64_t v25 = a5;
  uint64_t v26 = a6;
  uint64_t v27 = a7;
  uint64_t v28 = a8;
  uint64_t v29 = a9;
  uint64_t v30 = a10;
  uint64_t v31 = a11;
  uint64_t v32 = a12;
  outlined init with take of Any?((uint64_t)v23, (uint64_t)v33);
  v33[4] = partial apply for closure #1 in View.onDrag(_:);
  v33[5] = v20;
  outlined copy of AppIntentExecutor?(a5);
  outlined copy of AppIntentExecutor?(a7);
  outlined copy of AppIntentExecutor?(a9);
  outlined copy of AppIntentExecutor?(a11);
  swift_retain();
  MEMORY[0x18C113660](v24, a13, &type metadata for _DraggingModifier, a14);
  return outlined destroy of _DraggingModifier((uint64_t)v24);
}

uint64_t View.onDrag<A>(isEnabled:localContext:_:onSessionBegan:onSessionEnded:onLocalSessionAnimationsCompleted:preview:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, void (*a12)(double), uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  uint64_t v39 = a8;
  *((void *)&v38 + 1) = a7;
  *(void *)&long long v38 = a6;
  v33[0] = a5;
  v33[1] = a4;
  uint64_t v35 = a3;
  int v36 = a1;
  uint64_t v43 = a9;
  uint64_t v37 = a11;
  uint64_t v42 = a14;
  uint64_t v34 = a15;
  uint64_t v19 = *(void *)(a15 - 8);
  uint64_t v41 = a16;
  MEMORY[0x1F4188790](a1);
  uint64_t v21 = (char *)v33 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = type metadata accessor for DraggingPreviewModifier();
  uint64_t v40 = *(void *)(v22 - 8);
  double v23 = MEMORY[0x1F4188790](v22);
  uint64_t v25 = (char *)v33 - v24;
  a12(v23);
  outlined init with copy of Any?(a2, (uint64_t)v44);
  uint64_t v26 = swift_allocObject();
  *(void *)(v26 + 16) = v35;
  *(void *)(v26 + 24) = a4;
  LOBYTE(v45) = v36;
  *((void *)&v45 + 1) = 0;
  *(void *)&long long v46 = 0;
  *((void *)&v46 + 1) = a5;
  uint64_t v27 = *((void *)&v38 + 1);
  long long v47 = v38;
  *(void *)&long long v48 = v39;
  *((void *)&v48 + 1) = a10;
  *(void *)&v49[0] = v37;
  outlined init with take of Any?((uint64_t)v44, (uint64_t)v49 + 8);
  *((void *)&v50 + 1) = partial apply for closure #1 in View.onDrag<A>(isEnabled:localContext:_:onSessionBegan:onSessionEnded:onLocalSessionAnimationsCompleted:preview:);
  uint64_t v51 = v26;
  (*(void (**)(char *, char *, uint64_t))(v19 + 32))(v25, v21, v34);
  uint64_t v28 = &v25[*(int *)(v22 + 36)];
  long long v29 = v49[1];
  *((_OWORD *)v28 + 4) = v49[0];
  *((_OWORD *)v28 + 5) = v29;
  *((_OWORD *)v28 + 6) = v50;
  *((void *)v28 + 14) = v51;
  long long v30 = v46;
  *(_OWORD *)uint64_t v28 = v45;
  *((_OWORD *)v28 + 1) = v30;
  long long v31 = v48;
  *((_OWORD *)v28 + 2) = v47;
  *((_OWORD *)v28 + 3) = v31;
  outlined copy of AppIntentExecutor?(v33[0]);
  outlined copy of AppIntentExecutor?(v27);
  outlined copy of AppIntentExecutor?(a10);
  swift_retain();
  MEMORY[0x18C113660](v25, v42, v22, v41);
  return (*(uint64_t (**)(char *, uint64_t))(v40 + 8))(v25, v22);
}

uint64_t partial apply for closure #1 in View.onDrag<A>(isEnabled:localContext:_:onSessionBegan:onSessionEnded:onLocalSessionAnimationsCompleted:preview:)()
{
  return closure #1 in View.onDrag(_:)(*(uint64_t (**)(void))(v0 + 16));
}

uint64_t View.draggable<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12 = (void *)swift_allocObject();
  unint64_t v12[2] = a3;
  void v12[3] = a4;
  v12[4] = a5;
  v12[5] = a6;
  void v12[6] = a1;
  v12[7] = a2;
  memset(v15, 0, sizeof(v15));
  uint64_t v13 = swift_allocObject();
  *(void *)(v13 + 16) = partial apply for closure #1 in View.draggable<A>(_:);
  *(void *)(v13 + 24) = v12;
  v16[0] = 1;
  long long v17 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  outlined init with take of Any?((uint64_t)v15, (uint64_t)v21);
  v21[4] = partial apply for closure #1 in View.onDrag(_:);
  v21[5] = v13;
  swift_retain();
  MEMORY[0x18C113660](v16, a3, &type metadata for _DraggingModifier, a5);
  return outlined destroy of _DraggingModifier((uint64_t)v16);
}

uint64_t sub_1882F51E8()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in View.draggable<A>(_:)()
{
  return partial apply for closure #1 in View.draggable<A>(_:)();
}

{
  uint64_t *v0;

  return closure #1 in View.draggable<A>(_:)(v0[6], v0[7], v0[2], v0[3], v0[4], v0[5]);
}

uint64_t View.draggable<A, B>(_:preview:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void (*a3)(uint64_t)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11)
{
  uint64_t v36 = a8;
  uint64_t v33 = a7;
  uint64_t v34 = a4;
  uint64_t v35 = a3;
  uint64_t v32 = a1;
  uint64_t v38 = a9;
  uint64_t v15 = *(void *)(a6 - 8);
  uint64_t v31 = a11;
  MEMORY[0x1F4188790](a1);
  long long v17 = (char *)&v30 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = type metadata accessor for DraggingPreviewModifier();
  uint64_t v37 = *(void *)(v18 - 8);
  MEMORY[0x1F4188790](v18);
  long long v20 = (char *)&v30 - v19;
  uint64_t v21 = (void *)swift_allocObject();
  unint64_t v21[2] = a5;
  v21[3] = a6;
  v21[4] = v33;
  v21[5] = a8;
  uint64_t v22 = v31;
  void v21[6] = a10;
  v21[7] = v22;
  v21[8] = v32;
  void v21[9] = a2;
  uint64_t v23 = swift_retain();
  v35(v23);
  memset(v39, 0, sizeof(v39));
  uint64_t v24 = swift_allocObject();
  *(void *)(v24 + 16) = partial apply for closure #1 in View.draggable<A, B>(_:preview:);
  *(void *)(v24 + 24) = v21;
  v40[0] = 1;
  memset(&v40[8], 0, 64);
  outlined init with take of Any?((uint64_t)v39, (uint64_t)&v40[72]);
  *((void *)&v42 + 1) = partial apply for closure #1 in View.onDrag(_:);
  uint64_t v43 = v24;
  (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v20, v17, a6);
  uint64_t v25 = &v20[*(int *)(v18 + 36)];
  long long v26 = v41;
  *((_OWORD *)v25 + 4) = *(_OWORD *)&v40[64];
  *((_OWORD *)v25 + 5) = v26;
  *((_OWORD *)v25 + 6) = v42;
  *((void *)v25 + 14) = v43;
  long long v27 = *(_OWORD *)&v40[16];
  *(_OWORD *)uint64_t v25 = *(_OWORD *)v40;
  *((_OWORD *)v25 + 1) = v27;
  long long v28 = *(_OWORD *)&v40[48];
  *((_OWORD *)v25 + 2) = *(_OWORD *)&v40[32];
  *((_OWORD *)v25 + 3) = v28;
  MEMORY[0x18C113660](v20, a5, v18, v36);
  return (*(uint64_t (**)(char *, uint64_t))(v37 + 8))(v20, v18);
}

uint64_t sub_1882F5520()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in View.draggable<A, B>(_:preview:)()
{
  return partial apply for closure #1 in View.draggable<A, B>(_:preview:)();
}

{
  uint64_t *v0;

  return closure #1 in View.draggable<A, B>(_:preview:)(v0[8], v0[9], v0[2], v0[3], v0[4], v0[5], v0[6], v0[7]);
}

uint64_t View.draggable<A, B>(isEnabled:_:preview:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void (*a4)(uint64_t)@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v32 = a8;
  uint64_t v35 = a6;
  uint64_t v33 = a5;
  uint64_t v34 = a4;
  uint64_t v31 = a2;
  int v36 = a1;
  uint64_t v38 = a9;
  uint64_t v30 = a12;
  uint64_t v15 = *(void *)(a7 - 8);
  MEMORY[0x1F4188790](a1);
  long long v17 = (char *)&v30 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = type metadata accessor for DraggingPreviewModifier();
  uint64_t v37 = *(void *)(v18 - 8);
  MEMORY[0x1F4188790](v18);
  long long v20 = (char *)&v30 - v19;
  uint64_t v21 = (void *)swift_allocObject();
  unint64_t v21[2] = a6;
  v21[3] = a7;
  v21[4] = v32;
  v21[5] = a10;
  uint64_t v22 = v30;
  void v21[6] = a11;
  v21[7] = v22;
  v21[8] = v31;
  void v21[9] = a3;
  uint64_t v23 = swift_retain();
  v34(v23);
  memset(v39, 0, sizeof(v39));
  uint64_t v24 = swift_allocObject();
  *(void *)(v24 + 16) = partial apply for closure #1 in View.draggable<A, B>(isEnabled:_:preview:);
  *(void *)(v24 + 24) = v21;
  v40[0] = v36;
  memset(&v40[8], 0, 64);
  outlined init with take of Any?((uint64_t)v39, (uint64_t)&v40[72]);
  *((void *)&v42 + 1) = partial apply for closure #1 in View.onDrag(_:);
  uint64_t v43 = v24;
  (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v20, v17, a7);
  uint64_t v25 = &v20[*(int *)(v18 + 36)];
  long long v26 = v41;
  *((_OWORD *)v25 + 4) = *(_OWORD *)&v40[64];
  *((_OWORD *)v25 + 5) = v26;
  *((_OWORD *)v25 + 6) = v42;
  *((void *)v25 + 14) = v43;
  long long v27 = *(_OWORD *)&v40[16];
  *(_OWORD *)uint64_t v25 = *(_OWORD *)v40;
  *((_OWORD *)v25 + 1) = v27;
  long long v28 = *(_OWORD *)&v40[48];
  *((_OWORD *)v25 + 2) = *(_OWORD *)&v40[32];
  *((_OWORD *)v25 + 3) = v28;
  MEMORY[0x18C113660](v20, v35, v18, a10);
  return (*(uint64_t (**)(char *, uint64_t))(v37 + 8))(v20, v18);
}

uint64_t partial apply for closure #1 in View.draggable<A, B>(isEnabled:_:preview:)()
{
  return partial apply for closure #1 in View.draggable<A, B>(_:preview:)();
}

uint64_t View.draggable<A>(isEnabled:_:)(char a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v14 = (void *)swift_allocObject();
  void v14[2] = a4;
  void v14[3] = a5;
  _OWORD v14[4] = a6;
  void v14[5] = a7;
  _OWORD v14[6] = a2;
  v14[7] = a3;
  memset(v17, 0, sizeof(v17));
  uint64_t v15 = swift_allocObject();
  *(void *)(v15 + 16) = partial apply for closure #1 in View.draggable<A>(isEnabled:_:);
  *(void *)(v15 + 24) = v14;
  v18[0] = a1;
  long long v19 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  outlined init with take of Any?((uint64_t)v17, (uint64_t)v23);
  v23[4] = partial apply for closure #1 in View.onDrag(_:);
  v23[5] = v15;
  swift_retain();
  MEMORY[0x18C113660](v18, a4, &type metadata for _DraggingModifier, a6);
  return outlined destroy of _DraggingModifier((uint64_t)v18);
}

uint64_t closure #1 in View.draggable<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  type metadata accessor for NSItemProvider();
  uint64_t v12 = (void *)swift_allocObject();
  unint64_t v12[2] = a3;
  void v12[3] = a4;
  v12[4] = a5;
  v12[5] = a6;
  void v12[6] = a1;
  v12[7] = a2;
  swift_retain();
  return NSItemProvider.init<A>(transferable:)();
}

uint64_t partial apply for closure #1 in View.draggable<A>(isEnabled:_:)()
{
  return partial apply for closure #1 in View.draggable<A>(_:)();
}

void View.draggingFormation(_:)()
{
}

uint64_t static _DraggingModifier._makeView(modifier:inputs:body:)@<X0>(int *a1@<X0>, uint64_t *a2@<X1>, uint64_t (*a3)(void)@<X2>, _OWORD *a4@<X8>)
{
  uint64_t v4 = *a2;
  int v5 = *((_DWORD *)a2 + 2);
  uint64_t v6 = a2[2];
  int v7 = *((_DWORD *)a2 + 20);
  int v17 = *a1;
  *(void *)&long long v10 = v4;
  DWORD2(v10) = v5;
  uint64_t v11 = v6;
  long long v8 = *(_OWORD *)(a2 + 5);
  long long v12 = *(_OWORD *)(a2 + 3);
  long long v13 = v8;
  long long v14 = *(_OWORD *)(a2 + 7);
  uint64_t v15 = a2[9];
  int v16 = v7;
  return static _DraggingModifier.makeView(modifier:inputs:body:)(&v10, a3, a4);
}

void protocol witness for ViewModifier.body(content:) in conformance _DraggingModifier()
{
}

uint64_t View.dragItemTimings(_:)()
{
  return View.preference<A>(key:value:)();
}

void static DragItemTimings.default.getter(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(unsigned char *)(a1 + 8) = 1;
  *(void *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 24) = 1;
  *(void *)(a1 + 32) = 0;
  *(unsigned char *)(a1 + 40) = 1;
  *(void *)(a1 + 48) = 0;
  *(unsigned char *)(a1 + 56) = 1;
  *(void *)(a1 + 64) = 0;
  *(unsigned char *)(a1 + 72) = 1;
  *(void *)(a1 + 80) = 0;
  *(_WORD *)(a1 + 88) = 513;
}

uint64_t DragItemTimings.init(liftDelay:pointerLiftDelay:cancellationDelay:competingLongPressDelay:liftMoveHysteresis:pointerLiftMoveHysteresis:)@<X0>(uint64_t result@<X0>, char a2@<W1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X4>, char a6@<W5>, uint64_t a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, uint64_t a10, char a11, uint64_t a12, char a13)
{
  *(void *)a9 = result;
  *(unsigned char *)(a9 + 8) = a2 & 1;
  *(void *)(a9 + 16) = a3;
  *(unsigned char *)(a9 + 24) = a4 & 1;
  *(void *)(a9 + 32) = a5;
  *(unsigned char *)(a9 + 40) = a6 & 1;
  *(void *)(a9 + 48) = a7;
  *(unsigned char *)(a9 + 56) = a8 & 1;
  *(void *)(a9 + 64) = a10;
  *(unsigned char *)(a9 + 72) = a11 & 1;
  *(void *)(a9 + 80) = a12;
  *(unsigned char *)(a9 + 88) = a13 & 1;
  *(unsigned char *)(a9 + 89) = 2;
  return result;
}

uint64_t sub_1882F5D1C@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = EnvironmentValues.prefersFullSizeDragPreviews.getter();
  *a1 = result & 1;
  return result;
}

uint64_t sub_1882F5D5C()
{
  return EnvironmentValues.prefersFullSizeDragPreviews.setter();
}

uint64_t sub_1882F5D84@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = EnvironmentValues.supportsSystemDrag.getter();
  *a1 = result;
  return result;
}

uint64_t sub_1882F5DC0()
{
  return EnvironmentValues.supportsSystemDrag.setter();
}

uint64_t View.dragPreviewMode(_:)()
{
  return swift_release();
}

uint64_t sub_1882F5E60()
{
  return EnvironmentValues.dragPreviewMode.setter();
}

void static DragPreviewMode.default.getter(void *a1@<X8>)
{
  *a1 = 0;
}

void static DragPreviewMode.systemApp.getter(void *a1@<X8>)
{
  *a1 = 4;
}

unint64_t lazy protocol witness table accessor for type DragLiftEvent and conformance DragLiftEvent()
{
  unint64_t result = lazy protocol witness table cache variable for type DragLiftEvent and conformance DragLiftEvent;
  if (!lazy protocol witness table cache variable for type DragLiftEvent and conformance DragLiftEvent)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DragLiftEvent and conformance DragLiftEvent);
  }
  return result;
}

_UNKNOWN **base witness table accessor for ViewModifier in _DraggingModifier()
{
  return &protocol witness table for _DraggingModifier;
}

unsigned char *storeEnumTagSinglePayload for DragLiftEvent(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1882F5FDCLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

uint64_t assignWithCopy for _DraggingModifier(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  unsigned int v4 = (_OWORD *)(a1 + 8);
  unsigned int v6 = (_OWORD *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 8);
  if (*(void *)(a1 + 8))
  {
    if (v5)
    {
      uint64_t v7 = *(void *)(a2 + 16);
      *(void *)(a1 + 8) = v5;
      *(void *)(a1 + 16) = v7;
      swift_retain();
      swift_release();
      goto LABEL_8;
    }
    swift_release();
  }
  else if (v5)
  {
    uint64_t v8 = *(void *)(a2 + 16);
    *(void *)(a1 + 8) = v5;
    *(void *)(a1 + 16) = v8;
    swift_retain();
    goto LABEL_8;
  }
  *unsigned int v4 = *v6;
LABEL_8:
  uint64_t v9 = *(void *)(a2 + 24);
  if (*(void *)(a1 + 24))
  {
    if (v9)
    {
      uint64_t v10 = *(void *)(a2 + 32);
      *(void *)(a1 + 24) = v9;
      *(void *)(a1 + 32) = v10;
      swift_retain();
      swift_release();
      goto LABEL_15;
    }
    swift_release();
  }
  else if (v9)
  {
    uint64_t v11 = *(void *)(a2 + 32);
    *(void *)(a1 + 24) = v9;
    *(void *)(a1 + 32) = v11;
    swift_retain();
    goto LABEL_15;
  }
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
LABEL_15:
  uint64_t v12 = *(void *)(a2 + 40);
  if (*(void *)(a1 + 40))
  {
    if (v12)
    {
      uint64_t v13 = *(void *)(a2 + 48);
      *(void *)(a1 + 40) = v12;
      *(void *)(a1 + 48) = v13;
      swift_retain();
      swift_release();
      goto LABEL_22;
    }
    swift_release();
  }
  else if (v12)
  {
    uint64_t v14 = *(void *)(a2 + 48);
    *(void *)(a1 + 40) = v12;
    *(void *)(a1 + 48) = v14;
    swift_retain();
    goto LABEL_22;
  }
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
LABEL_22:
  uint64_t v15 = *(void *)(a2 + 56);
  if (*(void *)(a1 + 56))
  {
    if (v15)
    {
      uint64_t v16 = *(void *)(a2 + 64);
      *(void *)(a1 + 56) = v15;
      *(void *)(a1 + 64) = v16;
      swift_retain();
      swift_release();
      goto LABEL_29;
    }
    swift_release();
  }
  else if (v15)
  {
    uint64_t v17 = *(void *)(a2 + 64);
    *(void *)(a1 + 56) = v15;
    *(void *)(a1 + 64) = v17;
    swift_retain();
    goto LABEL_29;
  }
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
LABEL_29:
  uint64_t v18 = *(void *)(a2 + 96);
  if (!*(void *)(a1 + 96))
  {
    if (v18)
    {
      *(void *)(a1 + 96) = v18;
      (**(void (***)(uint64_t, uint64_t))(v18 - 8))(a1 + 72, a2 + 72);
      goto LABEL_36;
    }
LABEL_35:
    long long v19 = *(_OWORD *)(a2 + 88);
    *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
    *(_OWORD *)(a1 + 88) = v19;
    goto LABEL_36;
  }
  if (!v18)
  {
    __swift_destroy_boxed_opaque_existential_1(a1 + 72);
    goto LABEL_35;
  }
  __swift_assign_boxed_opaque_existential_0((uint64_t *)(a1 + 72), (uint64_t *)(a2 + 72));
LABEL_36:
  uint64_t v20 = *(void *)(a2 + 112);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(void *)(a1 + 112) = v20;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for _DraggingModifier(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  unsigned int v4 = (_OWORD *)(a1 + 8);
  unsigned int v6 = (_OWORD *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 8);
  if (*(void *)(a1 + 8))
  {
    if (v5)
    {
      uint64_t v7 = *(void *)(a2 + 16);
      *(void *)(a1 + 8) = v5;
      *(void *)(a1 + 16) = v7;
      swift_release();
      goto LABEL_8;
    }
    swift_release();
  }
  else if (v5)
  {
    uint64_t v8 = *(void *)(a2 + 16);
    *(void *)(a1 + 8) = v5;
    *(void *)(a1 + 16) = v8;
    goto LABEL_8;
  }
  *unsigned int v4 = *v6;
LABEL_8:
  uint64_t v9 = *(void *)(a2 + 24);
  if (*(void *)(a1 + 24))
  {
    if (v9)
    {
      uint64_t v10 = *(void *)(a2 + 32);
      *(void *)(a1 + 24) = v9;
      *(void *)(a1 + 32) = v10;
      swift_release();
      goto LABEL_15;
    }
    swift_release();
  }
  else if (v9)
  {
    uint64_t v11 = *(void *)(a2 + 32);
    *(void *)(a1 + 24) = v9;
    *(void *)(a1 + 32) = v11;
    goto LABEL_15;
  }
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
LABEL_15:
  uint64_t v12 = *(void *)(a2 + 40);
  if (*(void *)(a1 + 40))
  {
    if (v12)
    {
      uint64_t v13 = *(void *)(a2 + 48);
      *(void *)(a1 + 40) = v12;
      *(void *)(a1 + 48) = v13;
      swift_release();
      goto LABEL_22;
    }
    swift_release();
  }
  else if (v12)
  {
    uint64_t v14 = *(void *)(a2 + 48);
    *(void *)(a1 + 40) = v12;
    *(void *)(a1 + 48) = v14;
    goto LABEL_22;
  }
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
LABEL_22:
  uint64_t v15 = *(void *)(a2 + 56);
  if (*(void *)(a1 + 56))
  {
    if (v15)
    {
      uint64_t v16 = *(void *)(a2 + 64);
      *(void *)(a1 + 56) = v15;
      *(void *)(a1 + 64) = v16;
      swift_release();
      goto LABEL_29;
    }
    swift_release();
  }
  else if (v15)
  {
    uint64_t v17 = *(void *)(a2 + 64);
    *(void *)(a1 + 56) = v15;
    *(void *)(a1 + 64) = v17;
    goto LABEL_29;
  }
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
LABEL_29:
  if (*(void *)(a1 + 96)) {
    __swift_destroy_boxed_opaque_existential_1(a1 + 72);
  }
  long long v18 = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 88) = v18;
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  swift_release();
  return a1;
}

uint64_t sub_1882F63C0()
{
  return swift_getWitnessTable();
}

uint64_t sub_1882F6424()
{
  return swift_getWitnessTable();
}

uint64_t sub_1882F6494()
{
  return swift_getWitnessTable();
}

uint64_t sub_1882F64FC()
{
  return swift_getWitnessTable();
}

uint64_t sub_1882F656C(uint64_t a1)
{
  return get_witness_table_7SwiftUI4ViewRzlAA15ModifiedContentVyxAA30_EnvironmentKeyWritingModifierVyAA17DraggingFormationOGGAaBHPxAaBHD1__AiA0cI0HPyHCHCTm(a1, &lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<DraggingFormation>, (uint64_t)&type metadata for DraggingFormation, &lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<DraggingFormation> and conformance _EnvironmentKeyWritingModifier<A>);
}

uint64_t sub_1882F6588()
{
  return swift_getWitnessTable();
}

unint64_t lazy protocol witness table accessor for type _PreferenceWritingModifier<DragItemTimings.Key> and conformance _PreferenceWritingModifier<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type _PreferenceWritingModifier<DragItemTimings.Key> and conformance _PreferenceWritingModifier<A>;
  if (!lazy protocol witness table cache variable for type _PreferenceWritingModifier<DragItemTimings.Key> and conformance _PreferenceWritingModifier<A>)
  {
    type metadata accessor for _PreferenceWritingModifier<DragItemTimings.Key>(255, &lazy cache variable for type metadata for _PreferenceWritingModifier<DragItemTimings.Key>, (uint64_t)&type metadata for DragItemTimings.Key, (uint64_t)&protocol witness table for DragItemTimings.Key, MEMORY[0x1E4F40F90]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _PreferenceWritingModifier<DragItemTimings.Key> and conformance _PreferenceWritingModifier<A>);
  }
  return result;
}

uint64_t sub_1882F66A4(uint64_t a1)
{
  return get_witness_table_7SwiftUI4ViewRzlAA15ModifiedContentVyxAA30_EnvironmentKeyWritingModifierVyAA17DraggingFormationOGGAaBHPxAaBHD1__AiA0cI0HPyHCHCTm(a1, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Bool>, MEMORY[0x1E4FBB390], (unint64_t *)&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<Bool> and conformance _EnvironmentKeyWritingModifier<A>);
}

uint64_t lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<DraggingFormation> and conformance _EnvironmentKeyWritingModifier<A>(unint64_t *a1, unint64_t *a2, uint64_t a3)
{
  uint64_t result = *a1;
  if (!result)
  {
    _sypSgMaTm_11(255, a2, a3, MEMORY[0x1E4F411E8]);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1882F6724()
{
  return swift_getWitnessTable();
}

uint64_t sub_1882F6790(uint64_t a1)
{
  return get_witness_table_7SwiftUI4ViewRzlAA15ModifiedContentVyxAA30_EnvironmentKeyWritingModifierVyAA17DraggingFormationOGGAaBHPxAaBHD1__AiA0cI0HPyHCHCTm(a1, &lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<DragPreviewMode>, (uint64_t)&type metadata for DragPreviewMode, &lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<DragPreviewMode> and conformance _EnvironmentKeyWritingModifier<A>);
}

uint64_t get_witness_table_7SwiftUI4ViewRzlAA15ModifiedContentVyxAA30_EnvironmentKeyWritingModifierVyAA17DraggingFormationOGGAaBHPxAaBHD1__AiA0cI0HPyHCHCTm(uint64_t a1, unint64_t *a2, uint64_t a3, unint64_t *a4)
{
  return swift_getWitnessTable();
}

uint64_t destroy for DragContext(void *a1)
{
  if (a1[1]) {
    swift_release();
  }
  if (a1[3]) {
    swift_release();
  }
  if (a1[5]) {
    swift_release();
  }
  if (a1[7]) {
    swift_release();
  }
  if (a1[12]) {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)(a1 + 9));
  }

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for DragContext(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  if (v4)
  {
    uint64_t v5 = *(void *)(a2 + 16);
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v5;
    swift_retain();
  }
  else
  {
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  }
  uint64_t v6 = *(void *)(a2 + 24);
  if (v6)
  {
    uint64_t v7 = *(void *)(a2 + 32);
    *(void *)(a1 + 24) = v6;
    *(void *)(a1 + 32) = v7;
    swift_retain();
  }
  else
  {
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  }
  uint64_t v8 = *(void *)(a2 + 40);
  if (v8)
  {
    uint64_t v9 = *(void *)(a2 + 48);
    *(void *)(a1 + 40) = v8;
    *(void *)(a1 + 48) = v9;
    swift_retain();
  }
  else
  {
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  }
  uint64_t v10 = *(void *)(a2 + 56);
  if (v10)
  {
    uint64_t v11 = *(void *)(a2 + 64);
    *(void *)(a1 + 56) = v10;
    *(void *)(a1 + 64) = v11;
    swift_retain();
  }
  else
  {
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  }
  uint64_t v12 = (_OWORD *)(a1 + 72);
  uint64_t v13 = (_OWORD *)(a2 + 72);
  uint64_t v14 = *(void *)(a2 + 96);
  if (v14)
  {
    *(void *)(a1 + 96) = v14;
    (**(void (***)(_OWORD *, _OWORD *))(v14 - 8))(v12, v13);
  }
  else
  {
    long long v15 = *(_OWORD *)(a2 + 88);
    *uint64_t v12 = *v13;
    *(_OWORD *)(a1 + 88) = v15;
  }
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for DragContext(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v4 = (_OWORD *)(a1 + 8);
  uint64_t v6 = (_OWORD *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 8);
  if (*(void *)(a1 + 8))
  {
    if (v5)
    {
      uint64_t v7 = *(void *)(a2 + 16);
      *(void *)(a1 + 8) = v5;
      *(void *)(a1 + 16) = v7;
      swift_retain();
      swift_release();
      goto LABEL_8;
    }
    swift_release();
  }
  else if (v5)
  {
    uint64_t v8 = *(void *)(a2 + 16);
    *(void *)(a1 + 8) = v5;
    *(void *)(a1 + 16) = v8;
    swift_retain();
    goto LABEL_8;
  }
  *uint64_t v4 = *v6;
LABEL_8:
  uint64_t v9 = *(void *)(a2 + 24);
  if (*(void *)(a1 + 24))
  {
    if (v9)
    {
      uint64_t v10 = *(void *)(a2 + 32);
      *(void *)(a1 + 24) = v9;
      *(void *)(a1 + 32) = v10;
      swift_retain();
      swift_release();
      goto LABEL_15;
    }
    swift_release();
  }
  else if (v9)
  {
    uint64_t v11 = *(void *)(a2 + 32);
    *(void *)(a1 + 24) = v9;
    *(void *)(a1 + 32) = v11;
    swift_retain();
    goto LABEL_15;
  }
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
LABEL_15:
  uint64_t v12 = *(void *)(a2 + 40);
  if (*(void *)(a1 + 40))
  {
    if (v12)
    {
      uint64_t v13 = *(void *)(a2 + 48);
      *(void *)(a1 + 40) = v12;
      *(void *)(a1 + 48) = v13;
      swift_retain();
      swift_release();
      goto LABEL_22;
    }
    swift_release();
  }
  else if (v12)
  {
    uint64_t v14 = *(void *)(a2 + 48);
    *(void *)(a1 + 40) = v12;
    *(void *)(a1 + 48) = v14;
    swift_retain();
    goto LABEL_22;
  }
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
LABEL_22:
  uint64_t v15 = *(void *)(a2 + 56);
  if (*(void *)(a1 + 56))
  {
    if (v15)
    {
      uint64_t v16 = *(void *)(a2 + 64);
      *(void *)(a1 + 56) = v15;
      *(void *)(a1 + 64) = v16;
      swift_retain();
      swift_release();
      goto LABEL_29;
    }
    swift_release();
  }
  else if (v15)
  {
    uint64_t v17 = *(void *)(a2 + 64);
    *(void *)(a1 + 56) = v15;
    *(void *)(a1 + 64) = v17;
    swift_retain();
    goto LABEL_29;
  }
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
LABEL_29:
  uint64_t v18 = *(void *)(a2 + 96);
  if (!*(void *)(a1 + 96))
  {
    if (v18)
    {
      *(void *)(a1 + 96) = v18;
      (**(void (***)(uint64_t, uint64_t))(v18 - 8))(a1 + 72, a2 + 72);
      goto LABEL_36;
    }
LABEL_35:
    long long v19 = *(_OWORD *)(a2 + 88);
    *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
    *(_OWORD *)(a1 + 88) = v19;
    goto LABEL_36;
  }
  if (!v18)
  {
    __swift_destroy_boxed_opaque_existential_1(a1 + 72);
    goto LABEL_35;
  }
  __swift_assign_boxed_opaque_existential_0((uint64_t *)(a1 + 72), (uint64_t *)(a2 + 72));
LABEL_36:
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for DragContext(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v4 = (_OWORD *)(a1 + 8);
  uint64_t v6 = (_OWORD *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 8);
  if (*(void *)(a1 + 8))
  {
    if (v5)
    {
      uint64_t v7 = *(void *)(a2 + 16);
      *(void *)(a1 + 8) = v5;
      *(void *)(a1 + 16) = v7;
      swift_release();
      goto LABEL_8;
    }
    swift_release();
  }
  else if (v5)
  {
    uint64_t v8 = *(void *)(a2 + 16);
    *(void *)(a1 + 8) = v5;
    *(void *)(a1 + 16) = v8;
    goto LABEL_8;
  }
  *uint64_t v4 = *v6;
LABEL_8:
  uint64_t v9 = *(void *)(a2 + 24);
  if (*(void *)(a1 + 24))
  {
    if (v9)
    {
      uint64_t v10 = *(void *)(a2 + 32);
      *(void *)(a1 + 24) = v9;
      *(void *)(a1 + 32) = v10;
      swift_release();
      goto LABEL_15;
    }
    swift_release();
  }
  else if (v9)
  {
    uint64_t v11 = *(void *)(a2 + 32);
    *(void *)(a1 + 24) = v9;
    *(void *)(a1 + 32) = v11;
    goto LABEL_15;
  }
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
LABEL_15:
  uint64_t v12 = *(void *)(a2 + 40);
  if (*(void *)(a1 + 40))
  {
    if (v12)
    {
      uint64_t v13 = *(void *)(a2 + 48);
      *(void *)(a1 + 40) = v12;
      *(void *)(a1 + 48) = v13;
      swift_release();
      goto LABEL_22;
    }
    swift_release();
  }
  else if (v12)
  {
    uint64_t v14 = *(void *)(a2 + 48);
    *(void *)(a1 + 40) = v12;
    *(void *)(a1 + 48) = v14;
    goto LABEL_22;
  }
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
LABEL_22:
  uint64_t v15 = *(void *)(a2 + 56);
  if (*(void *)(a1 + 56))
  {
    if (v15)
    {
      uint64_t v16 = *(void *)(a2 + 64);
      *(void *)(a1 + 56) = v15;
      *(void *)(a1 + 64) = v16;
      swift_release();
      goto LABEL_29;
    }
    swift_release();
  }
  else if (v15)
  {
    uint64_t v17 = *(void *)(a2 + 64);
    *(void *)(a1 + 56) = v15;
    *(void *)(a1 + 64) = v17;
    goto LABEL_29;
  }
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
LABEL_29:
  if (*(void *)(a1 + 96)) {
    __swift_destroy_boxed_opaque_existential_1(a1 + 72);
  }
  long long v18 = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 88) = v18;
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for DragContext()
{
  return &type metadata for DragContext;
}

ValueMetadata *type metadata accessor for DragItemTimings.Key()
{
  return &type metadata for DragItemTimings.Key;
}

uint64_t *initializeBufferWithCopyOfBuffer for DraggingPreviewModifier(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  int v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0 || ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 120 > 0x18)
  {
    uint64_t v9 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    unint64_t v10 = ((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v11 = ((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
    *(unsigned char *)unint64_t v10 = *(unsigned char *)v11;
    uint64_t v12 = *(void *)(v11 + 8);
    if (v12)
    {
      uint64_t v13 = *(void *)(v11 + 16);
      *(void *)(v10 + 8) = v12;
      *(void *)(v10 + 16) = v13;
      swift_retain();
    }
    else
    {
      *(_OWORD *)(v10 + 8) = *(_OWORD *)(v11 + 8);
    }
    uint64_t v14 = *(void *)(v11 + 24);
    if (v14)
    {
      uint64_t v15 = *(void *)(v11 + 32);
      *(void *)(v10 + 24) = v14;
      *(void *)(v10 + 32) = v15;
      swift_retain();
    }
    else
    {
      *(_OWORD *)(v10 + 24) = *(_OWORD *)(v11 + 24);
    }
    uint64_t v16 = *(void *)(v11 + 40);
    if (v16)
    {
      uint64_t v17 = *(void *)(v11 + 48);
      *(void *)(v10 + 40) = v16;
      *(void *)(v10 + 48) = v17;
      swift_retain();
    }
    else
    {
      *(_OWORD *)(v10 + 40) = *(_OWORD *)(v11 + 40);
    }
    uint64_t v18 = *(void *)(v11 + 56);
    if (v18)
    {
      uint64_t v19 = *(void *)(v11 + 64);
      *(void *)(v10 + 56) = v18;
      *(void *)(v10 + 64) = v19;
      swift_retain();
    }
    else
    {
      *(_OWORD *)(v10 + 56) = *(_OWORD *)(v11 + 56);
    }
    uint64_t v20 = (_OWORD *)(v10 + 72);
    long long v21 = (_OWORD *)(v11 + 72);
    uint64_t v22 = *(void *)(v11 + 96);
    if (v22)
    {
      *(void *)(v10 + 96) = v22;
      (**(void (***)(_OWORD *, _OWORD *))(v22 - 8))(v20, v21);
    }
    else
    {
      long long v23 = *(_OWORD *)(v11 + 88);
      *uint64_t v20 = *v21;
      *(_OWORD *)(v10 + 88) = v23;
    }
    uint64_t v24 = *(void *)(v11 + 112);
    *(void *)(v10 + 104) = *(void *)(v11 + 104);
    *(void *)(v10 + 112) = v24;
  }
  swift_retain();
  return v4;
}

uint64_t initializeWithTake for DraggingPreviewModifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 32;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 32) + 7;
  unint64_t v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  long long v9 = *(_OWORD *)(v8 + 48);
  long long v11 = *(_OWORD *)v8;
  long long v10 = *(_OWORD *)(v8 + 16);
  *(_OWORD *)(v7 + 32) = *(_OWORD *)(v8 + 32);
  *(_OWORD *)(v7 + 48) = v9;
  *(_OWORD *)unint64_t v7 = v11;
  *(_OWORD *)(v7 + 16) = v10;
  long long v13 = *(_OWORD *)(v8 + 80);
  long long v12 = *(_OWORD *)(v8 + 96);
  long long v14 = *(_OWORD *)(v8 + 64);
  *(void *)(v7 + 112) = *(void *)(v8 + 112);
  *(_OWORD *)(v7 + 80) = v13;
  *(_OWORD *)(v7 + 96) = v12;
  *(_OWORD *)(v7 + 64) = v14;
  return a1;
}

uint64_t assignWithTake for DraggingPreviewModifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 40;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 24) + 7;
  unint64_t v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  *(unsigned char *)unint64_t v7 = *(unsigned char *)v8;
  uint64_t v9 = *(void *)(v8 + 8);
  if (*(void *)(v7 + 8))
  {
    if (v9)
    {
      uint64_t v10 = *(void *)(v8 + 16);
      *(void *)(v7 + 8) = v9;
      *(void *)(v7 + 16) = v10;
      swift_release();
      goto LABEL_8;
    }
    swift_release();
  }
  else if (v9)
  {
    uint64_t v11 = *(void *)(v8 + 16);
    *(void *)(v7 + 8) = v9;
    *(void *)(v7 + 16) = v11;
    goto LABEL_8;
  }
  *(_OWORD *)(v7 + 8) = *(_OWORD *)(v8 + 8);
LABEL_8:
  uint64_t v12 = *(void *)(v8 + 24);
  if (*(void *)(v7 + 24))
  {
    if (v12)
    {
      uint64_t v13 = *(void *)(v8 + 32);
      *(void *)(v7 + 24) = v12;
      *(void *)(v7 + 32) = v13;
      swift_release();
      goto LABEL_15;
    }
    swift_release();
  }
  else if (v12)
  {
    uint64_t v14 = *(void *)(v8 + 32);
    *(void *)(v7 + 24) = v12;
    *(void *)(v7 + 32) = v14;
    goto LABEL_15;
  }
  *(_OWORD *)(v7 + 24) = *(_OWORD *)(v8 + 24);
LABEL_15:
  uint64_t v15 = *(void *)(v8 + 40);
  if (*(void *)(v7 + 40))
  {
    if (v15)
    {
      uint64_t v16 = *(void *)(v8 + 48);
      *(void *)(v7 + 40) = v15;
      *(void *)(v7 + 48) = v16;
      swift_release();
      goto LABEL_22;
    }
    swift_release();
  }
  else if (v15)
  {
    uint64_t v17 = *(void *)(v8 + 48);
    *(void *)(v7 + 40) = v15;
    *(void *)(v7 + 48) = v17;
    goto LABEL_22;
  }
  *(_OWORD *)(v7 + 40) = *(_OWORD *)(v8 + 40);
LABEL_22:
  uint64_t v18 = *(void *)(v8 + 56);
  if (*(void *)(v7 + 56))
  {
    if (v18)
    {
      uint64_t v19 = *(void *)(v8 + 64);
      *(void *)(v7 + 56) = v18;
      *(void *)(v7 + 64) = v19;
      swift_release();
      goto LABEL_29;
    }
    swift_release();
  }
  else if (v18)
  {
    uint64_t v20 = *(void *)(v8 + 64);
    *(void *)(v7 + 56) = v18;
    *(void *)(v7 + 64) = v20;
    goto LABEL_29;
  }
  *(_OWORD *)(v7 + 56) = *(_OWORD *)(v8 + 56);
LABEL_29:
  if (*(void *)(v7 + 96)) {
    __swift_destroy_boxed_opaque_existential_1(v7 + 72);
  }
  long long v21 = *(_OWORD *)(v8 + 88);
  *(_OWORD *)(v7 + 72) = *(_OWORD *)(v8 + 72);
  *(_OWORD *)(v7 + 88) = v21;
  *(_OWORD *)(v7 + 104) = *(_OWORD *)(v8 + 104);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for DraggingPreviewModifier(_DWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (v5 <= 0x7FFFFFFF) {
    unsigned int v7 = 0x7FFFFFFF;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  if (v7 < a2)
  {
    unint64_t v8 = ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 120;
    unsigned int v9 = a2 - v7;
    uint64_t v10 = v8 & 0xFFFFFFF8;
    if ((v8 & 0xFFFFFFF8) != 0) {
      unsigned int v11 = 2;
    }
    else {
      unsigned int v11 = v9 + 1;
    }
    if (v11 >= 0x10000) {
      unsigned int v12 = 4;
    }
    else {
      unsigned int v12 = 2;
    }
    if (v11 < 0x100) {
      unsigned int v12 = 1;
    }
    if (v11 >= 2) {
      uint64_t v13 = v12;
    }
    else {
      uint64_t v13 = 0;
    }
    switch(v13)
    {
      case 1:
        int v14 = *((unsigned __int8 *)a1 + v8);
        if (!v14) {
          break;
        }
        goto LABEL_22;
      case 2:
        int v14 = *(unsigned __int16 *)((char *)a1 + v8);
        if (v14) {
          goto LABEL_22;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x1882F738CLL);
      case 4:
        int v14 = *(_DWORD *)((char *)a1 + v8);
        if (!v14) {
          break;
        }
LABEL_22:
        int v16 = v14 - 1;
        if (v10)
        {
          int v16 = 0;
          LODWORD(v10) = *a1;
        }
        return v7 + (v10 | v16) + 1;
      default:
        break;
    }
  }
  if (v5 >= 0x7FFFFFFF) {
    return (*(uint64_t (**)(void))(v4 + 48))();
  }
  unint64_t v17 = *(void *)((((unint64_t)a1 + v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 104);
  if (v17 >= 0xFFFFFFFF) {
    LODWORD(v17) = -1;
  }
  return (v17 + 1);
}

uint64_t specialized static DragItemTimings.Key.reduce(value:nextValue:)(uint64_t a1, void (*a2)(uint64_t *__return_ptr))
{
  a2(&v51);
  uint64_t v2 = v51;
  uint64_t v42 = v51;
  char v41 = v52;
  uint64_t v48 = v53;
  char v47 = v54;
  uint64_t v46 = v55;
  char v45 = v56;
  uint64_t v44 = v57;
  char v3 = v58;
  char v43 = v58;
  uint64_t v4 = v59;
  char v5 = v60;
  uint64_t v6 = v61;
  char v7 = v62;
  char v8 = v63;
  swift_getKeyPath();
  unsigned int v9 = (void (*)(uint64_t *, void))swift_readAtKeyPath();
  uint64_t v11 = *v10;
  int v12 = *((unsigned __int8 *)v10 + 8);
  v9(&v51, 0);
  uint64_t v51 = v2;
  char v52 = v41;
  uint64_t v53 = v48;
  char v54 = v47;
  uint64_t v55 = v46;
  char v56 = v45;
  uint64_t v57 = v44;
  char v58 = v3;
  uint64_t v59 = v4;
  char v60 = v5;
  uint64_t v61 = v6;
  char v62 = v7;
  char v63 = v8;
  swift_getAtKeyPath();
  uint64_t v13 = v49;
  if (!v12) {
    uint64_t v13 = v11;
  }
  uint64_t v51 = v13;
  char v52 = v12 & v50;
  swift_setAtWritableKeyPath();
  swift_release();
  swift_getKeyPath();
  int v14 = (void (*)(uint64_t *, void))swift_readAtKeyPath();
  uint64_t v16 = *v15;
  int v17 = *((unsigned __int8 *)v15 + 8);
  v14(&v51, 0);
  uint64_t v51 = v42;
  char v52 = v41;
  uint64_t v53 = v48;
  char v54 = v47;
  uint64_t v55 = v46;
  char v56 = v45;
  uint64_t v57 = v44;
  char v58 = v43;
  uint64_t v40 = v4;
  uint64_t v59 = v4;
  char v60 = v5;
  uint64_t v61 = v6;
  char v62 = v7;
  char v63 = v8;
  swift_getAtKeyPath();
  uint64_t v18 = v49;
  if (!v17) {
    uint64_t v18 = v16;
  }
  uint64_t v51 = v18;
  char v52 = v17 & v50;
  swift_setAtWritableKeyPath();
  swift_release();
  swift_getKeyPath();
  uint64_t v19 = (void (*)(uint64_t *, void))swift_readAtKeyPath();
  uint64_t v21 = *v20;
  int v22 = *((unsigned __int8 *)v20 + 8);
  v19(&v51, 0);
  uint64_t v51 = v42;
  char v52 = v41;
  uint64_t v53 = v48;
  char v54 = v47;
  uint64_t v55 = v46;
  char v56 = v45;
  uint64_t v57 = v44;
  char v58 = v43;
  uint64_t v59 = v4;
  char v60 = v5;
  uint64_t v61 = v6;
  char v62 = v7;
  char v63 = v8;
  swift_getAtKeyPath();
  uint64_t v23 = v49;
  if (!v22) {
    uint64_t v23 = v21;
  }
  uint64_t v51 = v23;
  char v52 = v22 & v50;
  swift_setAtWritableKeyPath();
  swift_release();
  swift_getKeyPath();
  uint64_t v24 = (void (*)(uint64_t *, void))swift_readAtKeyPath();
  uint64_t v26 = *v25;
  int v27 = *((unsigned __int8 *)v25 + 8);
  v24(&v51, 0);
  uint64_t v51 = v42;
  char v52 = v41;
  uint64_t v53 = v48;
  char v54 = v47;
  uint64_t v55 = v46;
  char v56 = v45;
  uint64_t v57 = v44;
  char v58 = v43;
  uint64_t v59 = v40;
  char v60 = v5;
  uint64_t v61 = v6;
  char v62 = v7;
  char v63 = v8;
  swift_getAtKeyPath();
  uint64_t v28 = v49;
  if (!v27) {
    uint64_t v28 = v26;
  }
  uint64_t v51 = v28;
  char v52 = v27 & v50;
  swift_setAtWritableKeyPath();
  swift_release();
  swift_getKeyPath();
  long long v29 = (void (*)(uint64_t *, void))swift_readAtKeyPath();
  uint64_t v31 = *v30;
  int v32 = *((unsigned __int8 *)v30 + 8);
  v29(&v51, 0);
  uint64_t v51 = v42;
  char v52 = v41;
  uint64_t v53 = v48;
  char v54 = v47;
  uint64_t v55 = v46;
  char v56 = v45;
  uint64_t v57 = v44;
  char v58 = v43;
  uint64_t v59 = v40;
  char v60 = v5;
  uint64_t v61 = v6;
  char v62 = v7;
  char v63 = v8;
  swift_getAtKeyPath();
  uint64_t v33 = v49;
  if (!v32) {
    uint64_t v33 = v31;
  }
  uint64_t v51 = v33;
  char v52 = v32 & v50;
  swift_setAtWritableKeyPath();
  swift_release();
  swift_getKeyPath();
  uint64_t v34 = (void (*)(uint64_t *, void))swift_readAtKeyPath();
  uint64_t v36 = *v35;
  int v37 = *((unsigned __int8 *)v35 + 8);
  v34(&v51, 0);
  uint64_t v51 = v42;
  char v52 = v41;
  uint64_t v53 = v48;
  char v54 = v47;
  uint64_t v55 = v46;
  char v56 = v45;
  uint64_t v57 = v44;
  char v58 = v43;
  uint64_t v59 = v40;
  char v60 = v5;
  uint64_t v61 = v6;
  char v62 = v7;
  char v63 = v8;
  swift_getAtKeyPath();
  uint64_t v38 = v49;
  if (!v37) {
    uint64_t v38 = v36;
  }
  uint64_t v51 = v38;
  char v52 = v37 & v50;
  swift_setAtWritableKeyPath();
  return swift_release();
}

uint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.PrefersFullSizeDragPreviewsKey> and conformance EnvironmentPropertyKey<A>(unint64_t *a1, unint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for _PreferenceWritingModifier<DragItemTimings.Key>(255, a2, a3, a4, MEMORY[0x1E4F40930]);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t partial apply for implicit closure #1 in closure #1 in View.draggable<A, B>(isEnabled:_:preview:)()
{
  return (*(uint64_t (**)(void))(v0 + 64))();
}

void *type metadata accessor for EnvironmentValues.PrefersFullSizeDragPreviewsKey()
{
  return &unk_1ED422290;
}

void *type metadata accessor for EnvironmentValues.SupportsSystemDragKey()
{
  return &unk_1ED421DF8;
}

void *type metadata accessor for EnvironmentValues.DragPreviewModeKey()
{
  return &unk_1ED421B70;
}

BOOL UITableView.isPseudoInsetGrouped.getter()
{
  if (objc_msgSend(v0, sel_style) != (id)1) {
    return 0;
  }
  if ((objc_msgSend(v0, sel__sectionContentInsetFollowsLayoutMargins) & 1) == 0)
  {
    objc_msgSend(v0, sel__sectionContentInset);
    BOOL v5 = v4 == *MEMORY[0x1E4FB2848] && v1 == *(double *)(MEMORY[0x1E4FB2848] + 8);
    if (v5 && v2 == *(double *)(MEMORY[0x1E4FB2848] + 16)) {
      return v3 != *(double *)(MEMORY[0x1E4FB2848] + 24);
    }
  }
  return 1;
}

id UpdateCoalescingTableView.init(frame:style:)(uint64_t a1, double a2, double a3, double a4, double a5)
{
  v5[OBJC_IVAR____TtC7SwiftUI25UpdateCoalescingTableView_isSidebarStyle] = 0;
  uint64_t v11 = &v5[OBJC_IVAR____TtC7SwiftUI25UpdateCoalescingTableView_cachedIdealSize];
  *(void *)uint64_t v11 = 0;
  *((void *)v11 + 1) = 0;
  unsigned char v11[16] = 1;
  int v12 = &v5[OBJC_IVAR____TtC7SwiftUI25UpdateCoalescingTableView_rowSpacing];
  *(void *)int v12 = 0;
  char v12[8] = 1;
  uint64_t v13 = (uint64_t *)&v5[OBJC_IVAR____TtC7SwiftUI25UpdateCoalescingTableView_safeAreaTransitionState];
  type metadata accessor for FalseSafeAreaTransitionState();
  uint64_t v14 = swift_allocObject();
  *(unsigned char *)(v14 + 16) = 0;
  *uint64_t v13 = v14;
  v13[1] = (uint64_t)&protocol witness table for FalseSafeAreaTransitionState;
  uint64_t v15 = &v5[OBJC_IVAR____TtC7SwiftUI25UpdateCoalescingTableView_visibleCellsUpdate];
  *uint64_t v15 = 0;
  *((void *)v15 + 1) = 0;
  *(_DWORD *)&v5[OBJC_IVAR____TtC7SwiftUI25UpdateCoalescingTableView_ignoreGraphUpdates] = 0;
  v5[OBJC_IVAR____TtC7SwiftUI25UpdateCoalescingTableView_pendingGraphUpdate] = 1;
  uint64_t v16 = &v5[OBJC_IVAR____TtC7SwiftUI25UpdateCoalescingTableView_pendingScrollTarget];
  uint64_t v17 = type metadata accessor for BridgedListState.ScrollTarget(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56))(v16, 1, 1, v17);
  uint64_t v18 = v5;
  char v19 = static SemanticFeature.isEnabled.getter();
  double v20 = 15.0;
  if (v19) {
    double v20 = 16.0;
  }
  *(double *)&v18[OBJC_IVAR____TtC7SwiftUI25UpdateCoalescingTableView_previousHorizontalMargin] = v20;
  uint64_t v21 = OBJC_IVAR____TtC7SwiftUI25UpdateCoalescingTableView__lastUpdateSeed;
  type metadata accessor for MutableBox<UInt32>();
  uint64_t v22 = swift_allocObject();
  *(_DWORD *)(v22 + 16) = -1;
  *(void *)&v18[v21] = v22;
  *(void *)&v18[OBJC_IVAR____TtC7SwiftUI25UpdateCoalescingTableView_bridgedState] = 0;
  v18[OBJC_IVAR____TtC7SwiftUI25UpdateCoalescingTableView_shouldDetermineInsetStyle] = 0;
  v18[OBJC_IVAR____TtC7SwiftUI25UpdateCoalescingTableView_needsUpdateAlignmentInsets] = 0;
  uint64_t v23 = &v18[OBJC_IVAR____TtC7SwiftUI25UpdateCoalescingTableView_lastConfigurationHash];
  *(void *)uint64_t v23 = 0;
  v23[8] = 1;

  v25.receiver = v18;
  v25.super_class = (Class)type metadata accessor for UpdateCoalescingTableView();
  return objc_msgSendSuper2(&v25, sel_initWithFrame_style_, a1, a2, a3, a4, a5);
}

void UpdateCoalescingTableView.bounds.setter(double a1, double a2, double a3, double a4)
{
  uint64_t updated = (objc_class *)type metadata accessor for UpdateCoalescingTableView();
  v24.receiver = v4;
  v24.super_class = updated;
  objc_msgSendSuper2(&v24, sel_bounds);
  double v11 = v10;
  double v13 = v12;
  v23.receiver = v4;
  v23.super_class = updated;
  objc_msgSendSuper2(&v23, sel_setBounds_, a1, a2, a3, a4);
  uint64_t v14 = OBJC_IVAR____TtC7SwiftUI25UpdateCoalescingTableView_ignoreGraphUpdates;
  int v15 = *(_DWORD *)&v4[OBJC_IVAR____TtC7SwiftUI25UpdateCoalescingTableView_ignoreGraphUpdates];
  BOOL v16 = __OFADD__(v15, 1);
  int v17 = v15 + 1;
  if (v16)
  {
    __break(1u);
LABEL_13:
    __break(1u);
    return;
  }
  *(_DWORD *)&v4[OBJC_IVAR____TtC7SwiftUI25UpdateCoalescingTableView_ignoreGraphUpdates] = v17;
  objc_msgSend(v4, sel_bounds);
  if (v11 != v19 || v13 != v18) {
    UpdateCoalescingTableView.updateGraphState()();
  }
  int v21 = *(_DWORD *)&v4[v14];
  BOOL v16 = __OFSUB__(v21, 1);
  int v22 = v21 - 1;
  if (v16) {
    goto LABEL_13;
  }
  *(_DWORD *)&v4[v14] = v22;
  if (!v22 && v4[OBJC_IVAR____TtC7SwiftUI25UpdateCoalescingTableView_pendingGraphUpdate] == 1) {
    UpdateCoalescingTableView.updateGraphState()();
  }
}

void specialized closure #1 in UpdateCoalescingTableView.idealSize()(void *a1, double *a2)
{
  char v50 = a2;
  uint64_t v3 = type metadata accessor for IndexPath();
  uint64_t v4 = *(void *)(v3 - 8);
  double v5 = MEMORY[0x1F4188790](v3);
  char v7 = (char *)&v48 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v8 = (unint64_t)objc_msgSend(a1, sel_numberOfSections, v5);
  if ((v8 & 0x8000000000000000) != 0)
  {
LABEL_42:
    __break(1u);
    return;
  }
  unint64_t v9 = v8;
  if (v8)
  {
    swift_beginAccess();
    swift_beginAccess();
    swift_beginAccess();
    swift_beginAccess();
    uint64_t v10 = 0;
    double v11 = (void (**)(char *, uint64_t))(v4 + 8);
    double v12 = &selRef_scrollViewWillEndDragging_withVelocity_targetContentOffset_;
    double v13 = &selRef_setMaximumPrimaryColumnWidth_;
    uint64_t v49 = v3;
    unint64_t v48 = v9;
    while (v10 != v9)
    {
      id v14 = [a1 v12[472]];
      if (v14)
      {
        int v15 = v14;
        if (objc_msgSend(v14, sel_respondsToSelector_, v13[78]))
        {
          id v16 = objc_msgSend(v15, v13[78], a1, v10);
          swift_unknownObjectRelease();
          if (v16)
          {
            type metadata accessor for ListTableViewHeaderFooter();
            uint64_t v17 = swift_dynamicCastClass();
            if (v17)
            {
              double v18 = *(void **)(v17 + OBJC_IVAR____TtC7SwiftUI25ListTableViewHeaderFooter_host);
              if (v18)
              {
                type metadata accessor for _UIHostingView<ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>>();
                lazy protocol witness table accessor for type _UIHostingView<ModifiedContent<_ViewList_View, ListTableCellModifier>> and conformance _UIHostingView<A>((unint64_t *)&lazy protocol witness table cache variable for type _UIHostingView<ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>> and conformance _UIHostingView<A>, (void (*)(uint64_t))type metadata accessor for _UIHostingView<ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>>);
                id v19 = v18;
                uint64_t v3 = v49;
                CGSize v20 = ViewRendererHost.idealSize()();

                int v21 = v50;
                double width = *v50;
                if (*v50 <= v20.width) {
                  double width = v20.width;
                }
                CGFloat v23 = v20.height + v50[1];
                *char v50 = width;
                v21[1] = v23;
                double v13 = &selRef_setMaximumPrimaryColumnWidth_;
              }
              else
              {

                double v13 = &selRef_setMaximumPrimaryColumnWidth_;
              }
            }
            else
            {
            }
          }
        }
        else
        {
          swift_unknownObjectRelease();
        }
      }
      id v24 = objc_msgSend(a1, v12[472], v48);
      if (v24)
      {
        objc_super v25 = v24;
        if (objc_msgSend(v24, sel_respondsToSelector_, v13[78]))
        {
          id v26 = objc_msgSend(v25, v13[78], a1, v10);
          swift_unknownObjectRelease();
          if (v26)
          {
            type metadata accessor for ListTableViewHeaderFooter();
            uint64_t v27 = swift_dynamicCastClass();
            if (v27 && (uint64_t v28 = *(void **)(v27 + OBJC_IVAR____TtC7SwiftUI25ListTableViewHeaderFooter_host)) != 0)
            {
              type metadata accessor for _UIHostingView<ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>>();
              lazy protocol witness table accessor for type _UIHostingView<ModifiedContent<_ViewList_View, ListTableCellModifier>> and conformance _UIHostingView<A>((unint64_t *)&lazy protocol witness table cache variable for type _UIHostingView<ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>> and conformance _UIHostingView<A>, (void (*)(uint64_t))type metadata accessor for _UIHostingView<ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>>);
              id v29 = v28;
              uint64_t v3 = v49;
              CGSize v30 = ViewRendererHost.idealSize()();

              uint64_t v31 = v50;
              double v32 = *v50;
              if (*v50 <= v30.width) {
                double v32 = v30.width;
              }
              CGFloat v33 = v30.height + v50[1];
              *char v50 = v32;
              v31[1] = v33;
            }
            else
            {
            }
          }
        }
        else
        {
          swift_unknownObjectRelease();
        }
      }
      id v34 = objc_msgSend(a1, sel_dataSource);
      if (v34)
      {
        unint64_t v35 = (unint64_t)objc_msgSend(v34, sel_tableView_numberOfRowsInSection_, a1, v10);
        swift_unknownObjectRelease();
        if ((v35 & 0x8000000000000000) != 0) {
          goto LABEL_41;
        }
        if (v35)
        {
          swift_beginAccess();
          swift_beginAccess();
          for (unint64_t i = 0; i != (char *)v35; ++i)
          {
            id v37 = objc_msgSend(a1, sel_dataSource);
            if (v37)
            {
              uint64_t v38 = v37;
              MEMORY[0x18C10A880](i, v10);
              Class isa = IndexPath._bridgeToObjectiveC()().super.isa;
              (*v11)(v7, v3);
              id v40 = objc_msgSend(v38, sel_tableView_cellForRowAtIndexPath_, a1, isa);
              swift_unknownObjectRelease();

              type metadata accessor for ListTableViewCell();
              uint64_t v41 = swift_dynamicCastClass();
              if (v41 && (uint64_t v42 = *(void **)(v41 + OBJC_IVAR____TtC7SwiftUI17ListTableViewCell_host)) != 0)
              {
                type metadata accessor for _UIHostingView<ModifiedContent<_ViewList_View, ListTableCellModifier>>();
                lazy protocol witness table accessor for type _UIHostingView<ModifiedContent<_ViewList_View, ListTableCellModifier>> and conformance _UIHostingView<A>((unint64_t *)&lazy protocol witness table cache variable for type _UIHostingView<ModifiedContent<_ViewList_View, ListTableCellModifier>> and conformance _UIHostingView<A>, (void (*)(uint64_t))type metadata accessor for _UIHostingView<ModifiedContent<_ViewList_View, ListTableCellModifier>>);
                id v43 = v42;
                uint64_t v3 = v49;
                CGSize v44 = ViewRendererHost.idealSize()();

                char v45 = v50;
                double v46 = *v50;
                if (*v50 <= v44.width) {
                  double v46 = v44.width;
                }
                CGFloat v47 = v44.height + v50[1];
                *char v50 = v46;
                v45[1] = v47;
              }
              else
              {
              }
            }
          }
        }
      }
      ++v10;
      unint64_t v9 = v48;
      double v12 = &selRef_scrollViewWillEndDragging_withVelocity_targetContentOffset_;
      double v13 = &selRef_setMaximumPrimaryColumnWidth_;
      if (v10 == v48) {
        return;
      }
    }
    __break(1u);
LABEL_41:
    __break(1u);
    goto LABEL_42;
  }
}

void UpdateCoalescingTableView.layoutMarginsDidChange()(SEL *a1)
{
  v9.receiver = v1;
  v9.super_class = (Class)type metadata accessor for UpdateCoalescingTableView();
  objc_msgSendSuper2(&v9, *a1);
  uint64_t v3 = OBJC_IVAR____TtC7SwiftUI25UpdateCoalescingTableView_ignoreGraphUpdates;
  int v4 = *(_DWORD *)&v1[OBJC_IVAR____TtC7SwiftUI25UpdateCoalescingTableView_ignoreGraphUpdates];
  BOOL v5 = __OFADD__(v4, 1);
  int v6 = v4 + 1;
  if (v5)
  {
    __break(1u);
    goto LABEL_8;
  }
  *(_DWORD *)&v1[OBJC_IVAR____TtC7SwiftUI25UpdateCoalescingTableView_ignoreGraphUpdates] = v6;
  UpdateCoalescingTableView.updateGraphState()();
  int v7 = *(_DWORD *)&v1[v3];
  BOOL v5 = __OFSUB__(v7, 1);
  int v8 = v7 - 1;
  if (v5)
  {
LABEL_8:
    __break(1u);
    return;
  }
  *(_DWORD *)&v1[v3] = v8;
  if (!v8 && v1[OBJC_IVAR____TtC7SwiftUI25UpdateCoalescingTableView_pendingGraphUpdate] == 1) {
    UpdateCoalescingTableView.updateGraphState()();
  }
}

void UpdateCoalescingTableView.applyValues<A, B>(from:)(uint64_t a1)
{
  double v2 = (unsigned __int8 *)v1;
  double v3 = *(double *)(a1 + 8);
  double v4 = *(double *)(a1 + 16);
  int v5 = *(unsigned __int8 *)(a1 + 40);
  char v37 = *(unsigned char *)(a1 + 41);
  int v6 = *(unsigned __int8 *)(a1 + 42);
  uint64_t v7 = *(void *)(a1 + 48);
  char v36 = *(unsigned char *)(a1 + 56);
  long long v35 = *(_OWORD *)(a1 + 24);
  type metadata accessor for TableViewListCore.Configuration.TableViewConfiguration();
  Swift::Int v8 = TableViewListCore.Configuration.TableViewConfiguration.hashValue.getter();
  objc_super v9 = &v1[OBJC_IVAR____TtC7SwiftUI25UpdateCoalescingTableView_lastConfigurationHash];
  if ((v1[OBJC_IVAR____TtC7SwiftUI25UpdateCoalescingTableView_lastConfigurationHash + 8] & 1) == 0
    && v8 == *(void *)v9)
  {
    return;
  }
  *(void *)objc_super v9 = v8;
  unsigned char v9[8] = 0;
  if (v37 == 1)
  {
    if (!((unint64_t)v35 | *(void *)&v4 | *(void *)&v3 | *((void *)&v35 + 1)) && !v5)
    {
      objc_msgSend(v1, sel__setSectionContentInsetFollowsLayoutMargins_, 0);
      goto LABEL_18;
    }
    char v15 = v1[OBJC_IVAR____TtC7SwiftUI25UpdateCoalescingTableView_shouldDetermineInsetStyle];
    v1[OBJC_IVAR____TtC7SwiftUI25UpdateCoalescingTableView_shouldDetermineInsetStyle] = 1;
    if (v15) {
      goto LABEL_20;
    }
LABEL_19:
    objc_msgSend(v1, sel_setNeedsLayout);
    goto LABEL_20;
  }
  if (v5)
  {
    objc_msgSend(v1, sel__setSectionContentInsetFollowsLayoutMargins_, 1);
LABEL_18:
    char v16 = v1[OBJC_IVAR____TtC7SwiftUI25UpdateCoalescingTableView_shouldDetermineInsetStyle];
    v1[OBJC_IVAR____TtC7SwiftUI25UpdateCoalescingTableView_shouldDetermineInsetStyle] = 0;
    if ((v16 & 1) == 0) {
      goto LABEL_20;
    }
    goto LABEL_19;
  }
  objc_msgSend(v1, sel__sectionContentInset);
  if (v13 != v3 || v10 != v4 || v11 != *(double *)&v35 || v12 != *((double *)&v35 + 1)) {
    objc_msgSend(v1, sel__setSectionContentInset_, v3, v4, v35);
  }
  objc_msgSend(v1, sel__setSectionContentInsetFollowsLayoutMargins_, 0);
  int v14 = v1[OBJC_IVAR____TtC7SwiftUI25UpdateCoalescingTableView_shouldDetermineInsetStyle];
  v1[OBJC_IVAR____TtC7SwiftUI25UpdateCoalescingTableView_shouldDetermineInsetStyle] = 0;
  if (v14 == 1) {
    goto LABEL_19;
  }
LABEL_20:
  uint64_t v17 = OptionalEdgeInsets.top.getter();
  if ((v18 & 1) == 0)
  {
    double v19 = *(double *)&v17;
    CGSize v20 = v1;
    objc_msgSend(v20, sel__setTopPadding_, v19);
  }
  uint64_t v21 = OptionalEdgeInsets.bottom.getter();
  if ((v22 & 1) == 0)
  {
    double v23 = *(double *)&v21;
    id v24 = v2;
    objc_msgSend(v24, sel__setBottomPadding_, v23);
  }
  objc_msgSend(v2, sel_setSeparatorStyle_, v7);
  uint64_t v25 = TableViewListCore.Configuration.TableViewConfiguration.sectionCornerRadius.getter();
  if ((v26 & 1) == 0)
  {
    double v27 = *(double *)&v25;
    uint64_t v28 = v2;
    objc_msgSend(v28, sel__setSectionCornerRadius_, v27);

    if ((v36 & 1) == 0) {
      goto LABEL_29;
    }
    goto LABEL_28;
  }
  if (v36 == 1) {
LABEL_28:
  }
    objc_msgSend(v2, sel_setBackgroundColor_, 0);
LABEL_29:
  int v29 = (v6 - 1) < 2;
  int v30 = v2[OBJC_IVAR____TtC7SwiftUI25UpdateCoalescingTableView_isSidebarStyle];
  v2[OBJC_IVAR____TtC7SwiftUI25UpdateCoalescingTableView_isSidebarStyle] = v29;
  if (v29 != v30)
  {
    uint64_t v31 = OBJC_IVAR____TtC7SwiftUI25UpdateCoalescingTableView_needsUpdateAlignmentInsets;
    v2[OBJC_IVAR____TtC7SwiftUI25UpdateCoalescingTableView_needsUpdateAlignmentInsets] = 1;
    id v32 = objc_msgSend(v2, sel__viewControllerForAncestor);
    if (v32)
    {
      CGFloat v33 = v32;
      id v34 = objc_msgSend(v32, sel_navigationController);

      if (v34)
      {

        v2[v31] = 0;
        objc_msgSend(v2, sel__notifyAlignedContentMarginChanged);
      }
    }
  }
}

Swift::Void __swiftcall UpdateCoalescingTableView.updateContent()()
{
  double v1 = v0;
  uint64_t v2 = type metadata accessor for BridgedListState.ScrollTarget(0);
  uint64_t v56 = *(void *)(v2 - 8);
  uint64_t v57 = v2;
  MEMORY[0x1F4188790](v2);
  uint64_t v53 = (uint64_t)&v50 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  _s7SwiftUI16BridgedListStateV12ScrollTargetVSgMaTm_2(0, &lazy cache variable for type metadata for BridgedListState.ScrollTarget?, (void (*)(uint64_t))type metadata accessor for BridgedListState.ScrollTarget);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v55 = (uint64_t)&v50 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v54 = (uint64_t)&v50 - v7;
  MEMORY[0x1F4188790](v8);
  double v10 = (char *)&v50 - v9;
  uint64_t v11 = type metadata accessor for BridgedListState(0);
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x1F4188790](v11);
  int v14 = (char *)&v50 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  _s7SwiftUI16BridgedListStateV12ScrollTargetVSgMaTm_2(0, &lazy cache variable for type metadata for BridgedListState?, (void (*)(uint64_t))type metadata accessor for BridgedListState);
  MEMORY[0x1F4188790](v15);
  uint64_t v17 = (char *)&v50 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v18);
  CGSize v20 = (char *)&v50 - v19;
  char v58 = v0;
  static Update.ensure<A>(_:)();
  outlined init with copy of BridgedListState.ScrollTarget?((uint64_t)v20, (uint64_t)v17, &lazy cache variable for type metadata for BridgedListState?, (void (*)(uint64_t))type metadata accessor for BridgedListState);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v17, 1, v11) == 1)
  {
    outlined destroy of BridgedListState.ScrollTarget?((uint64_t)v20, &lazy cache variable for type metadata for BridgedListState?, (void (*)(uint64_t))type metadata accessor for BridgedListState);
    CGSize v20 = v17;
LABEL_20:
    outlined destroy of BridgedListState.ScrollTarget?((uint64_t)v20, &lazy cache variable for type metadata for BridgedListState?, (void (*)(uint64_t))type metadata accessor for BridgedListState);
    return;
  }
  _s7SwiftUI16BridgedListStateVWObTm_0((uint64_t)v17, (uint64_t)v14, type metadata accessor for BridgedListState);
  uint64_t v21 = OBJC_IVAR____TtC7SwiftUI25UpdateCoalescingTableView__lastUpdateSeed;
  uint64_t v22 = *(void *)&v0[OBJC_IVAR____TtC7SwiftUI25UpdateCoalescingTableView__lastUpdateSeed];
  swift_beginAccess();
  int v23 = *(_DWORD *)(v22 + 16);
  uint64_t v24 = *(int *)(v11 + 28);
  int v25 = *(_DWORD *)&v14[v24];
  char v26 = v14;
  double v27 = v1;
  if (v23 == v25)
  {
    char v52 = v14;
    uint64_t v51 = v1;
    uint64_t v28 = (uint64_t)&v1[OBJC_IVAR____TtC7SwiftUI25UpdateCoalescingTableView_pendingScrollTarget];
    swift_beginAccess();
    outlined init with copy of BridgedListState.ScrollTarget?(v28, (uint64_t)v10, &lazy cache variable for type metadata for BridgedListState.ScrollTarget?, (void (*)(uint64_t))type metadata accessor for BridgedListState.ScrollTarget);
    uint64_t v30 = v56;
    uint64_t v29 = v57;
    int v31 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v56 + 48))(v10, 1, v57);
    outlined destroy of BridgedListState.ScrollTarget?((uint64_t)v10, &lazy cache variable for type metadata for BridgedListState.ScrollTarget?, (void (*)(uint64_t))type metadata accessor for BridgedListState.ScrollTarget);
    if (v31 == 1)
    {
      uint64_t v32 = v55;
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v30 + 56))(v55, 1, 1, v29);
      swift_beginAccess();
      outlined assign with take of BridgedListState.ScrollTarget?(v32, v28);
      swift_endAccess();
      uint64_t v33 = (uint64_t)v52;
LABEL_19:
      _s7SwiftUI16BridgedListStateV12ScrollTargetVWOhTm_0(v33, type metadata accessor for BridgedListState);
      goto LABEL_20;
    }
    char v26 = v52;
    int v25 = *(_DWORD *)&v52[v24];
    double v27 = v51;
  }
  uint64_t v34 = *(void *)&v27[v21];
  swift_beginAccess();
  *(_DWORD *)(v34 + 16) = v25;
  uint64_t v35 = OBJC_IVAR____TtC7SwiftUI25UpdateCoalescingTableView_ignoreGraphUpdates;
  int v36 = *(_DWORD *)&v27[OBJC_IVAR____TtC7SwiftUI25UpdateCoalescingTableView_ignoreGraphUpdates];
  BOOL v37 = __OFADD__(v36, 1);
  int v38 = v36 + 1;
  if (v37)
  {
    __break(1u);
  }
  else
  {
    *(_DWORD *)&v27[OBJC_IVAR____TtC7SwiftUI25UpdateCoalescingTableView_ignoreGraphUpdates] = v38;
    uint64_t v39 = v54;
    outlined init with copy of BridgedListState.ScrollTarget?((uint64_t)&v26[*(int *)(v11 + 20)], v54, &lazy cache variable for type metadata for BridgedListState.ScrollTarget?, (void (*)(uint64_t))type metadata accessor for BridgedListState.ScrollTarget);
    uint64_t v41 = v56;
    uint64_t v40 = v57;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v56 + 48))(v39, 1, v57) == 1)
    {
      outlined destroy of BridgedListState.ScrollTarget?(v39, &lazy cache variable for type metadata for BridgedListState.ScrollTarget?, (void (*)(uint64_t))type metadata accessor for BridgedListState.ScrollTarget);
      uint64_t v42 = v55;
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v41 + 56))(v55, 1, 1, v40);
      uint64_t v43 = (uint64_t)&v27[OBJC_IVAR____TtC7SwiftUI25UpdateCoalescingTableView_pendingScrollTarget];
      swift_beginAccess();
      outlined assign with take of BridgedListState.ScrollTarget?(v42, v43);
      swift_endAccess();
    }
    else
    {
      uint64_t v44 = v53;
      _s7SwiftUI16BridgedListStateVWObTm_0(v39, v53, type metadata accessor for BridgedListState.ScrollTarget);
      objc_msgSend(v27, sel_bounds);
      v60.origin.CGFloat x = 0.0;
      v60.origin.CGFloat y = 0.0;
      v60.size.double width = 0.0;
      v60.size.double height = 0.0;
      if (CGRectEqualToRect(v59, v60))
      {
        uint64_t v45 = v55;
        outlined init with copy of BridgedListState(v44, v55, type metadata accessor for BridgedListState.ScrollTarget);
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v41 + 56))(v45, 0, 1, v40);
      }
      else
      {
        Class isa = IndexPath._bridgeToObjectiveC()().super.isa;
        objc_msgSend(v27, sel_scrollToRowAtIndexPath_atScrollPosition_animated_, isa, specialized UITableViewScrollPosition.init(_:)(*(void *)(v44 + *(int *)(v40 + 20)), *(void *)(v44 + *(int *)(v40 + 20) + 8), *(unsigned char *)(v44 + *(int *)(v40 + 20) + 16)), *(unsigned __int8 *)(v44 + *(int *)(v40 + 24)));

        uint64_t v45 = v55;
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v41 + 56))(v55, 1, 1, v40);
      }
      uint64_t v47 = (uint64_t)&v27[OBJC_IVAR____TtC7SwiftUI25UpdateCoalescingTableView_pendingScrollTarget];
      swift_beginAccess();
      outlined assign with take of BridgedListState.ScrollTarget?(v45, v47);
      swift_endAccess();
      _s7SwiftUI16BridgedListStateV12ScrollTargetVWOhTm_0(v44, type metadata accessor for BridgedListState.ScrollTarget);
    }
    int v48 = *(_DWORD *)&v27[v35];
    BOOL v37 = __OFSUB__(v48, 1);
    int v49 = v48 - 1;
    if (!v37)
    {
      *(_DWORD *)&v27[v35] = v49;
      if (!v49 && v27[OBJC_IVAR____TtC7SwiftUI25UpdateCoalescingTableView_pendingGraphUpdate] == 1) {
        UpdateCoalescingTableView.updateGraphState()();
      }
      uint64_t v33 = (uint64_t)v26;
      goto LABEL_19;
    }
  }
  __break(1u);
}

uint64_t closure #1 in UpdateCoalescingTableView.updateContent()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for BridgedListState(0);
  Weakuint64_t Value = AGGraphGetWeakValue();
  if (WeakValue)
  {
    outlined init with copy of BridgedListState(WeakValue, a1, type metadata accessor for BridgedListState);
    uint64_t v4 = 0;
  }
  else
  {
    uint64_t v4 = 1;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56))(a1, v4, 1, v2);
}

void UpdateCoalescingTableView.updateGraphState()()
{
  double v1 = (int *)type metadata accessor for BridgedListState(0);
  double v2 = MEMORY[0x1F4188790](v1);
  uint64_t v4 = &v13[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  if (*(_DWORD *)&v0[OBJC_IVAR____TtC7SwiftUI25UpdateCoalescingTableView_ignoreGraphUpdates])
  {
    v0[OBJC_IVAR____TtC7SwiftUI25UpdateCoalescingTableView_pendingGraphUpdate] = 1;
  }
  else
  {
    v0[OBJC_IVAR____TtC7SwiftUI25UpdateCoalescingTableView_pendingGraphUpdate] = 0;
    objc_msgSend(v0, sel_horizontalMargin, v2);
    uint64_t v6 = v5;
    uint64_t v7 = (uint64_t)v4 + v1[5];
    uint64_t v8 = type metadata accessor for BridgedListState.ScrollTarget(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v7, 1, 1, v8);
    *uint64_t v4 = v6;
    uint64_t v9 = (char *)v4 + v1[6];
    *((_OWORD *)v9 + 5) = 0u;
    *((_OWORD *)v9 + 6) = 0u;
    *((_OWORD *)v9 + 3) = 0u;
    *((_OWORD *)v9 + 4) = 0u;
    *((_OWORD *)v9 + 1) = 0u;
    *((_OWORD *)v9 + 2) = 0u;
    *(_OWORD *)uint64_t v9 = 0u;
    v9[112] = 1;
    uint64_t v10 = v1[7];
    *(_DWORD *)((char *)v4 + v10) = 0;
    outlined destroy of BridgedListState.ScrollTarget?(v7, &lazy cache variable for type metadata for BridgedListState.ScrollTarget?, (void (*)(uint64_t))type metadata accessor for BridgedListState.ScrollTarget);
    uint64_t v11 = (uint64_t)&v0[OBJC_IVAR____TtC7SwiftUI25UpdateCoalescingTableView_pendingScrollTarget];
    swift_beginAccess();
    outlined init with copy of BridgedListState.ScrollTarget?(v11, v7, &lazy cache variable for type metadata for BridgedListState.ScrollTarget?, (void (*)(uint64_t))type metadata accessor for BridgedListState.ScrollTarget);
    uint64_t v12 = *(void *)&v0[OBJC_IVAR____TtC7SwiftUI25UpdateCoalescingTableView__lastUpdateSeed];
    swift_beginAccess();
    *(_DWORD *)((char *)v4 + v10) = *(_DWORD *)(v12 + 16);
    BridgedListState.commit(to:)(*(void *)&v0[OBJC_IVAR____TtC7SwiftUI25UpdateCoalescingTableView_bridgedState]);
    _s7SwiftUI16BridgedListStateV12ScrollTargetVWOhTm_0((uint64_t)v4, type metadata accessor for BridgedListState);
  }
}

Swift::Void __swiftcall UpdateCoalescingTableView.layoutSubviews()()
{
  v5.receiver = v0;
  v5.super_class = (Class)type metadata accessor for UpdateCoalescingTableView();
  objc_msgSendSuper2(&v5, sel_layoutSubviews);
  UpdateCoalescingTableView.updateInsetStyleIfNeeded()();
  uint64_t v1 = OBJC_IVAR____TtC7SwiftUI25UpdateCoalescingTableView_needsUpdateAlignmentInsets;
  if (*((unsigned char *)v0 + OBJC_IVAR____TtC7SwiftUI25UpdateCoalescingTableView_needsUpdateAlignmentInsets) == 1)
  {
    id v2 = objc_msgSend(v0, sel__viewControllerForAncestor);
    if (v2)
    {
      uint64_t v3 = v2;
      id v4 = objc_msgSend(v2, sel_navigationController);

      if (v4)
      {

        *((unsigned char *)v0 + v1) = 0;
        objc_msgSend(v0, sel__notifyAlignedContentMarginChanged);
      }
    }
  }
  UpdateCoalescingTableView.updateVisibleCellsIfNeeded()();
  UpdateCoalescingTableView.updateContent()();
}

Swift::Void __swiftcall UpdateCoalescingTableView.updateVisibleCellsIfNeeded()()
{
  uint64_t v1 = &v0[OBJC_IVAR____TtC7SwiftUI25UpdateCoalescingTableView_visibleCellsUpdate];
  if (v0[OBJC_IVAR____TtC7SwiftUI25UpdateCoalescingTableView_visibleCellsUpdate])
  {
    uint64_t v2 = *((void *)v1 + 1);
    BOOL v3 = __OFADD__(v2, 1);
    uint64_t v4 = v2 + 1;
    if (v3)
    {
      __break(1u);
    }
    else
    {
      *((void *)v1 + 1) = v4;
      objc_super v5 = self;
      uint64_t v6 = swift_allocObject();
      *(void *)(v6 + 16) = v0;
      uint64_t v7 = swift_allocObject();
      *(void *)(v7 + 16) = partial apply for closure #1 in UpdateCoalescingCollectionView.layoutSubviews();
      *(void *)(v7 + 24) = v6;
      v13[4] = partial apply for thunk for @callee_guaranteed () -> ();
      void v13[5] = v7;
      v13[0] = MEMORY[0x1E4F143A8];
      v13[1] = 1107296256;
      _OWORD v13[2] = thunk for @escaping @callee_guaranteed () -> ();
      _OWORD v13[3] = &block_descriptor_87;
      uint64_t v8 = _Block_copy(v13);
      uint64_t v9 = v0;
      swift_retain();
      swift_release();
      objc_msgSend(v5, sel_performWithoutAnimation_, v8);
      _Block_release(v8);
      char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
      swift_release();
      if ((isEscapingClosureAtFileLocation & 1) == 0)
      {
        uint64_t v11 = *((void *)v1 + 1);
        BOOL v3 = __OFSUB__(v11, 1);
        uint64_t v12 = v11 - 1;
        if (!v3)
        {
          *((void *)v1 + 1) = v12;
          swift_release();
          return;
        }
LABEL_9:
        __break(1u);
        return;
      }
    }
    __break(1u);
    goto LABEL_9;
  }
}

Swift::Void __swiftcall UpdateCoalescingTableView.updateInsetStyleIfNeeded()()
{
  if (*((unsigned char *)v0 + OBJC_IVAR____TtC7SwiftUI25UpdateCoalescingTableView_shouldDetermineInsetStyle) == 1)
  {
    uint64_t v1 = v0;
    char v2 = static SemanticFeature.isEnabled.getter();
    id v3 = objc_msgSend(v0, sel_traitCollection);
    uint64_t v4 = v3;
    if (v2)
    {
      id v5 = objc_msgSend(v3, sel_preferredContentSizeCategory);

      int v6 = UIContentSizeCategory.isAccessibilityCategory.getter();
      objc_msgSend(v1, sel_bounds);
      uint64_t v8 = (v7 > 320.0) & ~v6;
    }
    else
    {
      id v9 = objc_msgSend(v3, sel_horizontalSizeClass);

      uint64_t v8 = v9 == (id)2;
    }
    objc_msgSend(v1, sel__setSectionContentInsetFollowsLayoutMargins_, v8);
  }
}

void UpdateCoalescingTableView.performBatchUpdates(_:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[OBJC_IVAR____TtC7SwiftUI25UpdateCoalescingTableView_visibleCellsUpdate] = 2;
  if (a1)
  {
    uint64_t v9 = swift_allocObject();
    *(void *)(v9 + 16) = a1;
    *(void *)(v9 + 24) = a2;
    uint64_t v19 = (uint64_t (*)(uint64_t))closure #1 in PlatformViewCoordinator.dispatchUpdate(_:)partial apply;
    CGSize v20 = (void *)v9;
    uint64_t aBlock = MEMORY[0x1E4F143A8];
    uint64_t v16 = 1107296256;
    uint64_t v17 = thunk for @escaping @callee_guaranteed () -> ();
    uint64_t v18 = &block_descriptor_74_0;
    uint64_t v10 = _Block_copy(&aBlock);
    swift_release();
  }
  else
  {
    uint64_t v10 = 0;
  }
  uint64_t v11 = (void *)swift_allocObject();
  void v11[2] = a3;
  void v11[3] = a4;
  v11[4] = v4;
  uint64_t v19 = partial apply for closure #1 in UpdateCoalescingTableView.performBatchUpdates(_:completion:);
  CGSize v20 = v11;
  uint64_t aBlock = MEMORY[0x1E4F143A8];
  uint64_t v16 = 1107296256;
  uint64_t v17 = thunk for @escaping @callee_guaranteed @Sendable (@unowned Bool) -> ();
  uint64_t v18 = &block_descriptor_67_3;
  uint64_t v12 = _Block_copy(&aBlock);
  outlined copy of (@escaping @callee_guaranteed (@unowned Bool) -> ())?(a3, a4);
  uint64_t v13 = v4;
  swift_release();
  v14.receiver = v13;
  v14.super_class = (Class)type metadata accessor for UpdateCoalescingTableView();
  objc_msgSendSuper2(&v14, sel_performBatchUpdates_completion_, v10, v12);
  _Block_release(v12);
  _Block_release(v10);
}

id UpdateCoalescingTableView.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for UpdateCoalescingTableView();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t ObjC metadata update function for UpdateCoalescingTableView()
{
  return type metadata accessor for UpdateCoalescingTableView();
}

uint64_t type metadata accessor for UpdateCoalescingTableView()
{
  uint64_t result = type metadata singleton initialization cache for UpdateCoalescingTableView;
  if (!type metadata singleton initialization cache for UpdateCoalescingTableView) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void type metadata completion function for UpdateCoalescingTableView()
{
  _s7SwiftUI16BridgedListStateV12ScrollTargetVSgMaTm_2(319, &lazy cache variable for type metadata for BridgedListState.ScrollTarget?, (void (*)(uint64_t))type metadata accessor for BridgedListState.ScrollTarget);
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

void *type metadata accessor for UpdateCoalescingTableView.VisibleCellsUpdate()
{
  return &unk_1ED4497B8;
}

uint64_t sub_1882F9FEC()
{
  return swift_deallocObject();
}

uint64_t sub_1882FA024()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in UpdateCoalescingTableView.updateContent()@<X0>(uint64_t a1@<X8>)
{
  return closure #1 in UpdateCoalescingTableView.updateContent()(a1);
}

uint64_t outlined init with copy of BridgedListState.ScrollTarget?(uint64_t a1, uint64_t a2, unint64_t *a3, void (*a4)(uint64_t))
{
  _s7SwiftUI16BridgedListStateV12ScrollTargetVSgMaTm_2(0, a3, a4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a2, a1, v6);
  return a2;
}

uint64_t outlined destroy of BridgedListState.ScrollTarget?(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  _s7SwiftUI16BridgedListStateV12ScrollTargetVSgMaTm_2(0, a2, a3);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  return a1;
}

uint64_t outlined assign with take of BridgedListState.ScrollTarget?(uint64_t a1, uint64_t a2)
{
  _s7SwiftUI16BridgedListStateV12ScrollTargetVSgMaTm_2(0, &lazy cache variable for type metadata for BridgedListState.ScrollTarget?, (void (*)(uint64_t))type metadata accessor for BridgedListState.ScrollTarget);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with copy of BridgedListState(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_1882FA200()
{
  _Block_release(*(const void **)(v0 + 16));

  return swift_deallocObject();
}

uint64_t sub_1882FA238()
{
  if (*(void *)(v0 + 16)) {
    swift_release();
  }

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in UpdateCoalescingTableView.performBatchUpdates(_:completion:)(uint64_t result)
{
  objc_super v2 = *(uint64_t (**)(uint64_t))(v1 + 16);
  uint64_t v3 = *(void *)(v1 + 32);
  if (v2) {
    uint64_t result = v2(result & 1);
  }
  *(unsigned char *)(v3 + OBJC_IVAR____TtC7SwiftUI25UpdateCoalescingTableView_visibleCellsUpdate) = 0;
  uint64_t v4 = v3 + OBJC_IVAR____TtC7SwiftUI25UpdateCoalescingTableView_cachedIdealSize;
  *(void *)uint64_t v4 = 0;
  *(void *)(v4 + 8) = 0;
  *(unsigned char *)(v4 + 16) = 1;
  return result;
}

uint64_t sub_1882FA2DC()
{
  return swift_deallocObject();
}

void specialized UpdateCoalescingTableView.init(coder:)()
{
  uint64_t v1 = v0;
  v0[OBJC_IVAR____TtC7SwiftUI25UpdateCoalescingTableView_isSidebarStyle] = 0;
  objc_super v2 = &v0[OBJC_IVAR____TtC7SwiftUI25UpdateCoalescingTableView_cachedIdealSize];
  *(void *)objc_super v2 = 0;
  *((void *)v2 + 1) = 0;
  v2[16] = 1;
  uint64_t v3 = &v0[OBJC_IVAR____TtC7SwiftUI25UpdateCoalescingTableView_rowSpacing];
  *(void *)uint64_t v3 = 0;
  v3[8] = 1;
  uint64_t v4 = (uint64_t *)&v0[OBJC_IVAR____TtC7SwiftUI25UpdateCoalescingTableView_safeAreaTransitionState];
  type metadata accessor for FalseSafeAreaTransitionState();
  uint64_t v5 = swift_allocObject();
  *(unsigned char *)(v5 + 16) = 0;
  *uint64_t v4 = v5;
  v4[1] = (uint64_t)&protocol witness table for FalseSafeAreaTransitionState;
  uint64_t v6 = &v1[OBJC_IVAR____TtC7SwiftUI25UpdateCoalescingTableView_visibleCellsUpdate];
  *uint64_t v6 = 0;
  *((void *)v6 + 1) = 0;
  *(_DWORD *)&v1[OBJC_IVAR____TtC7SwiftUI25UpdateCoalescingTableView_ignoreGraphUpdates] = 0;
  v1[OBJC_IVAR____TtC7SwiftUI25UpdateCoalescingTableView_pendingGraphUpdate] = 1;
  double v7 = &v1[OBJC_IVAR____TtC7SwiftUI25UpdateCoalescingTableView_pendingScrollTarget];
  uint64_t v8 = type metadata accessor for BridgedListState.ScrollTarget(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v7, 1, 1, v8);
  char v9 = static SemanticFeature.isEnabled.getter();
  double v10 = 15.0;
  if (v9) {
    double v10 = 16.0;
  }
  *(double *)&v1[OBJC_IVAR____TtC7SwiftUI25UpdateCoalescingTableView_previousHorizontalMargin] = v10;
  uint64_t v11 = OBJC_IVAR____TtC7SwiftUI25UpdateCoalescingTableView__lastUpdateSeed;
  type metadata accessor for MutableBox<UInt32>();
  uint64_t v12 = swift_allocObject();
  *(void *)&v1[v11] = v12;
  *(void *)&v1[OBJC_IVAR____TtC7SwiftUI25UpdateCoalescingTableView_bridgedState] = 0;
  v1[OBJC_IVAR____TtC7SwiftUI25UpdateCoalescingTableView_shouldDetermineInsetStyle] = 0;
  v1[OBJC_IVAR____TtC7SwiftUI25UpdateCoalescingTableView_needsUpdateAlignmentInsets] = 0;
  *(_DWORD *)(v12 + 16) = -1;
  uint64_t v13 = &v1[OBJC_IVAR____TtC7SwiftUI25UpdateCoalescingTableView_lastConfigurationHash];
  *(void *)uint64_t v13 = 0;
  v13[8] = 1;

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t getEnumTagSinglePayload for UpdateCoalescingTableView.VisibleCellsUpdate.StateType(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFE)
  {
    unsigned int v2 = a2 + 2;
    if (a2 + 2 >= 0xFFFF00) {
      unsigned int v3 = 4;
    }
    else {
      unsigned int v3 = 2;
    }
    if (v2 >> 8 < 0xFF) {
      unsigned int v3 = 1;
    }
    if (v2 >= 0x100) {
      uint64_t v4 = v3;
    }
    else {
      uint64_t v4 = 0;
    }
    switch(v4)
    {
      case 1:
        int v5 = a1[1];
        if (!a1[1]) {
          break;
        }
        return (*a1 | (v5 << 8)) - 2;
      case 2:
        int v5 = *(unsigned __int16 *)(a1 + 1);
        if (*(_WORD *)(a1 + 1)) {
          return (*a1 | (v5 << 8)) - 2;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x1882FA57CLL);
      case 4:
        int v5 = *(_DWORD *)(a1 + 1);
        if (!v5) {
          break;
        }
        return (*a1 | (v5 << 8)) - 2;
      default:
        break;
    }
  }
  unsigned int v7 = *a1;
  BOOL v8 = v7 >= 2;
  unsigned int v9 = (v7 + 2147483646) & 0x7FFFFFFF;
  if (!v8) {
    unsigned int v9 = -1;
  }
  if (v9 + 1 >= 2) {
    return v9;
  }
  else {
    return 0;
  }
}

unsigned char *storeEnumTagSinglePayload for UpdateCoalescingTableView.VisibleCellsUpdate.StateType(unsigned char *result, unsigned int a2, unsigned int a3)
{
  unsigned int v3 = a3 + 2;
  if (a3 + 2 >= 0xFFFF00) {
    int v4 = 4;
  }
  else {
    int v4 = 2;
  }
  if (v3 >> 8 < 0xFF) {
    int v4 = 1;
  }
  if (v3 >= 0x100) {
    unsigned int v5 = v4;
  }
  else {
    unsigned int v5 = 0;
  }
  if (a3 >= 0xFE) {
    uint64_t v6 = v5;
  }
  else {
    uint64_t v6 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v7 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v6)
    {
      case 1:
        result[1] = v7;
        break;
      case 2:
        *(_WORD *)(result + 1) = v7;
        break;
      case 3:
LABEL_25:
        __break(1u);
        JUMPOUT(0x1882FA664);
      case 4:
        *(_DWORD *)(result + 1) = v7;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v6)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_20;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_19;
      case 3:
        goto LABEL_25;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_20;
      default:
LABEL_19:
        if (a2) {
LABEL_20:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

void *type metadata accessor for UpdateCoalescingTableView.VisibleCellsUpdate.StateType()
{
  return &unk_1ED449728;
}

uint64_t lazy protocol witness table accessor for type _UIHostingView<ModifiedContent<_ViewList_View, ListTableCellModifier>> and conformance _UIHostingView<A>(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay7SwiftUI12HitTestTrace33_DB5E6F06E13FF0259F656B4E03BE4F79LLVySo6UIViewCGG_SSs5NeverOTg503_s7d4UI12fg8Trace33_ijklmnopqr71LLV20recursiveDescription10annotating5depthSSSayxG_SitFSSADyxGXEfU1_So6S5C_TG5SayAKGSiTf1cn_nTm(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  uint64_t v5 = a5();
  swift_bridgeObjectRelease();
  return v5;
}

id UIView.printHitTest(_:radius:)(double a1, double a2, double a3)
{
  id result = objc_msgSend(v3, sel_hitTest_withEvent_, 0);
  if (result)
  {
    id v8 = result;
    objc_msgSend(v3, sel_convertPoint_toView_, 0, a1, a2);
    id v11 = objc_msgSend(self, sel_contextWithPoint_radius_, v9, v10, a3);
    id v12 = objc_msgSend(v8, sel__hitTestWithContext_, v11);

    if (!v12) {
      goto LABEL_8;
    }
    self;
    uint64_t v13 = swift_dynamicCastObjCClass();
    if (v13)
    {
      objc_super v14 = (void *)v13;
      id v15 = v12;

      id v8 = v14;
    }
    type metadata accessor for UIKitGestureContainer();
    if (swift_dynamicCastClass())
    {
      uint64_t Strong = swift_weakLoadStrong();
      if ((MEMORY[0x18C111F70]() & 1) == 0)
      {
LABEL_7:
        id v17 = v8;
        UIView.traceHitTest(point:radius:result:)(v8, (uint64_t)&v63, a1, a2, a3);

        _ss23_ContiguousArrayStorageCyyXlGMaTm_1(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>, MEMORY[0x1E4FBC838] + 8, MEMORY[0x1E4FBBE00]);
        uint64_t v18 = swift_allocObject();
        *(_OWORD *)(v18 + 16) = xmmword_188351940;
        *(void *)(v18 + 32) = v17;
        uint64_t v52 = v18;
        specialized Array._endMutation()();
        id v19 = v17;
        uint64_t v20 = specialized HitTestTrace.recursiveDescription(annotating:depth:)(v52, 0);
        uint64_t v22 = v21;
        swift_bridgeObjectRelease();
        outlined release of HitTestTrace<UIView>((uint64_t)&v63);
LABEL_16:
        v42._uint64_t countAndFlagsBits = v20;
        v42._object = v22;
        String.append(_:)(v42);
        swift_bridgeObjectRelease();
        v43._uint64_t countAndFlagsBits = 10;
        v43._object = (void *)0xE100000000000000;
        String.append(_:)(v43);
        MEMORY[0x18C112B50](0x5453455420544948, 0xE90000000000000ALL);

        swift_unknownObjectRelease();
        swift_release();
        return (id)swift_bridgeObjectRelease();
      }
    }
    else
    {
LABEL_8:
      uint64_t Strong = 0;
      if ((MEMORY[0x18C111F70]() & 1) == 0) {
        goto LABEL_7;
      }
    }
    uint64_t v50 = v8;
    if (Strong)
    {
      int v23 = 0;
      unsigned int v47 = 1;
      double v46 = (void *)Strong;
    }
    else
    {
      id v24 = v8;
      unsigned int v47 = 0;
      int v23 = v8;
      double v46 = v8;
    }
    char v49 = Strong != 0;
    swift_retain_n();
    id v25 = v3;
    UIView.traceHitTest(point:radius:result:)(v23, (uint64_t)v51, a1, a2, a3);

    id v26 = v51[7];
    id v27 = v51[5];
    id v28 = v51[6];
    id v29 = v51[3];
    id v30 = v51[4];
    id v32 = v51[0];
    id v31 = v51[1];
    id v33 = v51[2];
    id v45 = v51[0];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    id v44 = v26;
    uint64_t v34 = swift_bridgeObjectRetain();
    uint64_t v35 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay7SwiftUI12HitTestTrace33_DB5E6F06E13FF0259F656B4E03BE4F79LLVySo6UIViewCGG_AIyAF014ResponderBasedfG7TracingAHLLOGs5NeverOTg503_s7d4UI12fg8Trace33_ijklmnopqr29LLV3mapyADyqd__Gqd__xXEAA0cD7v24ACLLRd__lFAfDyxGXEfU_So6s7C_AA014T17BasedcdQ0ACLLOTG5xq_Ri_zRi0_zRi__Ri0__r0_lyAkOIsgnr_Tf1cn_nTf4ng_n(v34, (void (*)(uint64_t *__return_ptr, id *))closure #1 in ResponderBasedHitTestTracing.traceHitTest(point:radius:options:result:), 0);

    swift_bridgeObjectRelease();
    outlined release of HitTestTrace<UIView>((uint64_t)v51);
    id v63 = v32;
    char v64 = 0;
    id v65 = v31;
    id v66 = v33;
    id v67 = v29;
    id v68 = v30;
    id v69 = v27;
    id v70 = v28;
    id v71 = v26;
    if (v26) {
      unsigned __int8 v36 = 0;
    }
    else {
      unsigned __int8 v36 = -1;
    }
    unsigned __int8 v72 = v36;
    uint64_t v73 = v35;
    id v37 = v45;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    id v38 = v44;
    int v48 = closure #3 in ResponderBasedHitTestTracing.traceHitTest(point:radius:options:result:)(v35, (uint64_t)&v63, 0, v46, v47, a1, a2, a3);
    outlined consume of ResponderBasedHitTestTracing(v32, 0);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined consume of ResponderBasedHitTestTracing?(v26, v36);
    swift_bridgeObjectRelease();
    outlined consume of ResponderBasedHitTestTracing(v46, v49);
    uint64_t v52 = (uint64_t)v32;
    char v53 = 0;
    id v54 = v31;
    id v55 = v33;
    id v56 = v29;
    id v57 = v30;
    id v58 = v27;
    id v59 = v28;
    id v60 = v26;
    unsigned __int8 v61 = v36;
    char v62 = v48;
    _ss23_ContiguousArrayStorageCyyXlGMaTm_1(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<ResponderBasedHitTestTracing>, (uint64_t)&type metadata for ResponderBasedHitTestTracing, MEMORY[0x1E4FBBE00]);
    uint64_t v39 = swift_allocObject();
    *(_OWORD *)(v39 + 16) = xmmword_18834BB70;
    *(void *)(v39 + 32) = v46;
    *(unsigned char *)(v39 + 40) = v49;
    *(void *)(v39 + 48) = v50;
    *(unsigned char *)(v39 + 56) = 0;
    id v40 = v50;
    outlined copy of ResponderBasedHitTestTracing(v46, v49);
    uint64_t v20 = specialized HitTestTrace.recursiveDescription(annotating:depth:)(v39, 0);
    uint64_t v22 = v41;
    outlined consume of ResponderBasedHitTestTracing(v46, v49);
    swift_bridgeObjectRelease();
    outlined consume of ResponderBasedHitTestTracing(v32, 0);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined consume of ResponderBasedHitTestTracing?(v26, v36);
    swift_bridgeObjectRelease();
    id v8 = v50;
    goto LABEL_16;
  }
  return result;
}

uint64_t specialized HitTestTrace.recursiveDescription(annotating:depth:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *(void *)(a1 + 16);
  if (v5)
  {
    outlined init with take of ResponderBasedHitTestTracing((uint64_t *)v3, (uint64_t)v65);
    unsigned int v7 = (unsigned char *)(a1 + 40);
    do
    {
      uint64_t v9 = *((void *)v7 - 1);
      char v10 = *v7;
      outlined init with take of ResponderBasedHitTestTracing(v65, (uint64_t)&v66);
      if (v67)
      {
        if (v66 == v9) {
          char v8 = v10;
        }
        else {
          char v8 = 0;
        }
        if (v8)
        {
LABEL_13:
          LODWORD(v5) = 1;
          break;
        }
      }
      else
      {
        if (v66 == v9) {
          char v11 = v10;
        }
        else {
          char v11 = 1;
        }
        if ((v11 & 1) == 0) {
          goto LABEL_13;
        }
      }
      v7 += 16;
      --v5;
    }
    while (v5);
  }
  outlined init with take of ResponderBasedHitTestTracing?(v3 + 64, (uint64_t)v64);
  outlined init with take of ResponderBasedHitTestTracing?((uint64_t)v64, (uint64_t)v68);
  uint64_t v12 = 9673954;
  if (v68[8] == 255) {
    uint64_t v12 = 9805026;
  }
  if (v5) {
    uint64_t v13 = 0x8094E29C94E2;
  }
  else {
    uint64_t v13 = 545428706;
  }
  if (v5) {
    unint64_t v14 = 0xA600000000000000;
  }
  else {
    unint64_t v14 = 0xA400000000000000;
  }
  if (v5) {
    uint64_t v15 = 11966178;
  }
  else {
    uint64_t v15 = v12;
  }
  uint64_t v59 = a2;
  uint64_t v62 = MEMORY[0x18C1159A0](v13, v14, a2);
  unint64_t v63 = v16;
  swift_bridgeObjectRetain();
  v17._uint64_t countAndFlagsBits = v15;
  v17._object = (void *)0xA300000000000000;
  String.append(_:)(v17);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v18 = (void *)v63;
  uint64_t v57 = v62;
  id v19 = *(void **)v3;
  char v20 = *(unsigned char *)(v3 + 8);
  if (v20)
  {
    swift_retain();
    uint64_t v21 = ViewResponder.propertiesAffectingHitTest.getter();
  }
  else
  {
    id v22 = v19;
    uint64_t v21 = UIView.propertiesAffectingHitTest.getter();
  }
  uint64_t v23 = v21;
  outlined consume of ResponderBasedHitTestTracing(v19, v20);
  int64_t v24 = *(void *)(v23 + 16);
  if (v24)
  {
    id v56 = (void *)v63;
    *(void *)&long long v61 = MEMORY[0x1E4FBC860];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v24, 0);
    uint64_t v25 = v61;
    id v26 = (void **)(v23 + 56);
    do
    {
      id v28 = *(v26 - 2);
      uint64_t v27 = (uint64_t)*(v26 - 1);
      id v29 = *v26;
      if (v28)
      {
        uint64_t v62 = (uint64_t)*(v26 - 3);
        unint64_t v63 = (unint64_t)v28;
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain();
        v30._uint64_t countAndFlagsBits = 8250;
        v30._object = (void *)0xE200000000000000;
        String.append(_:)(v30);
        v31._uint64_t countAndFlagsBits = v27;
        v31._object = v29;
        String.append(_:)(v31);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v27 = v62;
        id v29 = v28;
      }
      else
      {
        swift_bridgeObjectRetain();
      }
      *(void *)&long long v61 = v25;
      unint64_t v33 = *(void *)(v25 + 16);
      unint64_t v32 = *(void *)(v25 + 24);
      if (v33 >= v32 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v32 > 1), v33 + 1, 1);
        uint64_t v25 = v61;
      }
      v26 += 4;
      *(void *)(v25 + 16) = v33 + 1;
      uint64_t v34 = v25 + 16 * v33;
      *(void *)(v34 + 32) = v27;
      *(void *)(v34 + 40) = v29;
      --v24;
    }
    while (v24);
    swift_bridgeObjectRelease();
    uint64_t v18 = v56;
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v25 = MEMORY[0x1E4FBC860];
  }
  uint64_t v35 = MEMORY[0x1E4FBB1A0];
  _ss23_ContiguousArrayStorageCyyXlGMaTm_1(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<String>, MEMORY[0x1E4FBB1A0], MEMORY[0x1E4FBBE00]);
  uint64_t v36 = swift_allocObject();
  *(_OWORD *)(v36 + 16) = xmmword_18834BB80;
  uint64_t v37 = *(void *)(v3 + 40);
  *(void *)(v36 + 32) = *(void *)(v3 + 32);
  *(void *)(v36 + 40) = v37;
  uint64_t v62 = v36;
  swift_bridgeObjectRetain();
  specialized Array.append<A>(contentsOf:)(v25);
  _ss23_ContiguousArrayStorageCyyXlGMaTm_1(0, (unint64_t *)&lazy cache variable for type metadata for [String], v35, MEMORY[0x1E4FBB320]);
  lazy protocol witness table accessor for type [String] and conformance [A]();
  uint64_t v38 = BidirectionalCollection<>.joined(separator:)();
  id v40 = v39;
  swift_bridgeObjectRelease();
  unint64_t v41 = *(void *)(v3 + 24);
  uint64_t v62 = *(void *)(v3 + 16);
  unint64_t v63 = v41;
  swift_bridgeObjectRetain();
  v42._uint64_t countAndFlagsBits = 40;
  v42._object = (void *)0xE100000000000000;
  String.append(_:)(v42);
  v43._uint64_t countAndFlagsBits = v38;
  v43._object = v40;
  String.append(_:)(v43);
  swift_bridgeObjectRelease();
  v44._uint64_t countAndFlagsBits = 41;
  v44._object = (void *)0xE100000000000000;
  String.append(_:)(v44);
  uint64_t v45 = v62;
  double v46 = (void *)v63;
  uint64_t v62 = 0;
  unint64_t v63 = 0xE000000000000000;
  v47._uint64_t countAndFlagsBits = v57;
  v47._object = v18;
  String.append(_:)(v47);
  swift_bridgeObjectRelease();
  v48._uint64_t countAndFlagsBits = 32;
  v48._object = (void *)0xE100000000000000;
  String.append(_:)(v48);
  long long v61 = *(_OWORD *)(v3 + 48);
  type metadata accessor for CGPoint(0);
  _print_unlocked<A, B>(_:_:)();
  v49._uint64_t countAndFlagsBits = 32;
  v49._object = (void *)0xE100000000000000;
  String.append(_:)(v49);
  v50._uint64_t countAndFlagsBits = v45;
  v50._object = v46;
  String.append(_:)(v50);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  uint64_t v51 = swift_bridgeObjectRetain();
  uint64_t v52 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay7SwiftUI12HitTestTrace33_DB5E6F06E13FF0259F656B4E03BE4F79LLVySo6UIViewCGG_SSs5NeverOTg503_s7d4UI12fg8Trace33_ijklmnopqr71LLV20recursiveDescription10annotating5depthSSSayxG_SitFSSADyxGXEfU1_So6S5C_TG5SayAKGSiTf1cn_nTm(v51, a1, v59, (uint64_t)v60, (uint64_t (*)(void))_sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay7SwiftUI12HitTestTrace33_DB5E6F06E13FF0259F656B4E03BE4F79LLVyAF014ResponderBasedfG7TracingAHLLOGG_SSs5NeverOTg503_s7d4UI12fg8Trace33_ijklmnopqr73LLV20recursiveDescription10annotating5depthSSSayxG_SitFSSADyxGXEfU1_AA014s8BasedcD7U9ACLLO_TG5SayAKGSiTf1cn_nTf4ngn_n);
  swift_bridgeObjectRelease();
  uint64_t v53 = swift_allocObject();
  *(_OWORD *)(v53 + 16) = xmmword_18834BB80;
  *(void *)(v53 + 32) = 0;
  *(void *)(v53 + 40) = 0xE000000000000000;
  uint64_t v62 = v53;
  specialized Array.append<A>(contentsOf:)(v52);
  uint64_t v54 = BidirectionalCollection<>.joined(separator:)();
  swift_bridgeObjectRelease();
  return v54;
}

uint64_t specialized HitTestTrace.recursiveDescription(annotating:depth:)(unint64_t a1, uint64_t a2)
{
  long long v4 = v2[3];
  *(_OWORD *)id v60 = v2[2];
  *(_OWORD *)&char v60[16] = v4;
  uint64_t v61 = *((void *)v2 + 8);
  long long v5 = v2[1];
  long long v58 = *v2;
  long long v59 = v5;
  uint64_t v53 = &v58;
  char v6 = specialized Sequence.contains(where:)((uint64_t (*)(id *))partial apply for specialized closure #1 in HitTestTrace.recursiveDescription(annotating:depth:), (uint64_t)v52, a1);
  if (*(void *)&v60[24]) {
    uint64_t v7 = 9673954;
  }
  else {
    uint64_t v7 = 9805026;
  }
  BOOL v8 = (v6 & 1) == 0;
  if (v6) {
    uint64_t v9 = 0x8094E29C94E2;
  }
  else {
    uint64_t v9 = 545428706;
  }
  if (v8) {
    unint64_t v10 = 0xA400000000000000;
  }
  else {
    unint64_t v10 = 0xA600000000000000;
  }
  if (v8) {
    uint64_t v11 = v7;
  }
  else {
    uint64_t v11 = 11966178;
  }
  uint64_t v56 = MEMORY[0x18C1159A0](v9, v10, a2);
  unint64_t v57 = v12;
  swift_bridgeObjectRetain();
  v13._uint64_t countAndFlagsBits = v11;
  v13._object = (void *)0xA300000000000000;
  String.append(_:)(v13);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  unint64_t v14 = (void *)v57;
  uint64_t v50 = v56;
  uint64_t v15 = UIView.propertiesAffectingHitTest.getter();
  int64_t v16 = *(void *)(v15 + 16);
  if (v16)
  {
    uint64_t v49 = a2;
    *(void *)&long long v55 = MEMORY[0x1E4FBC860];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v16, 0);
    uint64_t v17 = v55;
    uint64_t v18 = (void **)(v15 + 56);
    do
    {
      unint64_t v19 = (unint64_t)*(v18 - 2);
      uint64_t v20 = (uint64_t)*(v18 - 1);
      uint64_t v21 = *v18;
      if (v19)
      {
        uint64_t v56 = (uint64_t)*(v18 - 3);
        unint64_t v57 = v19;
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain();
        v22._uint64_t countAndFlagsBits = 8250;
        v22._object = (void *)0xE200000000000000;
        String.append(_:)(v22);
        v23._uint64_t countAndFlagsBits = v20;
        v23._object = v21;
        String.append(_:)(v23);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v20 = v56;
        uint64_t v21 = (void *)v57;
      }
      else
      {
        swift_bridgeObjectRetain();
      }
      *(void *)&long long v55 = v17;
      unint64_t v25 = *(void *)(v17 + 16);
      unint64_t v24 = *(void *)(v17 + 24);
      if (v25 >= v24 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v24 > 1), v25 + 1, 1);
        uint64_t v17 = v55;
      }
      v18 += 4;
      *(void *)(v17 + 16) = v25 + 1;
      uint64_t v26 = v17 + 16 * v25;
      *(void *)(v26 + 32) = v20;
      *(void *)(v26 + 40) = v21;
      --v16;
    }
    while (v16);
    swift_bridgeObjectRelease();
    a2 = v49;
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v17 = MEMORY[0x1E4FBC860];
  }
  uint64_t v27 = MEMORY[0x1E4FBB1A0];
  _ss23_ContiguousArrayStorageCyyXlGMaTm_1(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<String>, MEMORY[0x1E4FBB1A0], MEMORY[0x1E4FBBE00]);
  uint64_t v28 = swift_allocObject();
  *(_OWORD *)(v28 + 16) = xmmword_18834BB80;
  uint64_t v29 = *(void *)v60;
  *(void *)(v28 + 32) = *((void *)&v59 + 1);
  *(void *)(v28 + 40) = v29;
  uint64_t v56 = v28;
  swift_bridgeObjectRetain();
  specialized Array.append<A>(contentsOf:)(v17);
  _ss23_ContiguousArrayStorageCyyXlGMaTm_1(0, (unint64_t *)&lazy cache variable for type metadata for [String], v27, MEMORY[0x1E4FBB320]);
  lazy protocol witness table accessor for type [String] and conformance [A]();
  uint64_t v30 = BidirectionalCollection<>.joined(separator:)();
  unint64_t v32 = v31;
  swift_bridgeObjectRelease();
  uint64_t v56 = *((void *)&v58 + 1);
  unint64_t v57 = v59;
  swift_bridgeObjectRetain();
  v33._uint64_t countAndFlagsBits = 40;
  v33._object = (void *)0xE100000000000000;
  String.append(_:)(v33);
  v34._uint64_t countAndFlagsBits = v30;
  v34._object = v32;
  String.append(_:)(v34);
  swift_bridgeObjectRelease();
  v35._uint64_t countAndFlagsBits = 41;
  v35._object = (void *)0xE100000000000000;
  String.append(_:)(v35);
  uint64_t v36 = v56;
  uint64_t v37 = (void *)v57;
  uint64_t v56 = 0;
  unint64_t v57 = 0xE000000000000000;
  v38._uint64_t countAndFlagsBits = v50;
  v38._object = v14;
  String.append(_:)(v38);
  swift_bridgeObjectRelease();
  v39._uint64_t countAndFlagsBits = 32;
  v39._object = (void *)0xE100000000000000;
  String.append(_:)(v39);
  long long v55 = *(_OWORD *)&v60[8];
  type metadata accessor for CGPoint(0);
  _print_unlocked<A, B>(_:_:)();
  v40._uint64_t countAndFlagsBits = 32;
  v40._object = (void *)0xE100000000000000;
  String.append(_:)(v40);
  v41._uint64_t countAndFlagsBits = v36;
  v41._object = v37;
  String.append(_:)(v41);
  swift_bridgeObjectRelease();
  uint64_t v42 = v56;
  unint64_t v43 = v57;
  swift_bridgeObjectRetain();
  uint64_t v44 = swift_bridgeObjectRetain();
  uint64_t v45 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay7SwiftUI12HitTestTrace33_DB5E6F06E13FF0259F656B4E03BE4F79LLVySo6UIViewCGG_SSs5NeverOTg503_s7d4UI12fg8Trace33_ijklmnopqr71LLV20recursiveDescription10annotating5depthSSSayxG_SitFSSADyxGXEfU1_So6S5C_TG5SayAKGSiTf1cn_nTm(v44, a1, a2, (uint64_t)v54, (uint64_t (*)(void))_sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay7SwiftUI12HitTestTrace33_DB5E6F06E13FF0259F656B4E03BE4F79LLVySo6UIViewCGG_SSs5NeverOTg503_s7d4UI12fg8Trace33_ijklmnopqr71LLV20recursiveDescription10annotating5depthSSSayxG_SitFSSADyxGXEfU1_So6S5C_TG5SayAKGSiTf1cn_nTf4ngn_n);
  swift_bridgeObjectRelease();
  uint64_t v46 = swift_allocObject();
  *(_OWORD *)(v46 + 16) = xmmword_18834BB80;
  *(void *)(v46 + 32) = v42;
  *(void *)(v46 + 40) = v43;
  uint64_t v56 = v46;
  specialized Array.append<A>(contentsOf:)(v45);
  uint64_t v47 = BidirectionalCollection<>.joined(separator:)();
  swift_bridgeObjectRelease();
  return v47;
}

uint64_t UIView.traceHitTest(point:radius:result:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>, double a3@<D0>, double a4@<D1>, double a5@<D2>)
{
  *(void *)&v41[0] = swift_getObjectType();
  type metadata accessor for UIView.Type(0, &lazy cache variable for type metadata for UIView.Type, (void (*)(uint64_t))type metadata accessor for UIView);
  id v10 = v5;
  uint64_t v11 = String.init<A>(describing:)();
  uint64_t v38 = v12;
  uint64_t v39 = v11;
  type metadata accessor for _ContiguousArrayStorage<(key: String?, value: String)>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<CVarArg>, (void (*)(uint64_t))type metadata accessor for CVarArg);
  uint64_t v13 = swift_allocObject();
  *(_OWORD *)(v13 + 16) = xmmword_18834BB80;
  *(void *)(v13 + 56) = type metadata accessor for UIView();
  *(void *)(v13 + 64) = lazy protocol witness table accessor for type UIView and conformance NSObject();
  *(void *)(v13 + 32) = v10;
  id v14 = v10;
  uint64_t v15 = String.init(format:_:)();
  uint64_t v36 = v16;
  uint64_t v37 = v15;
  id v35 = objc_msgSend(v14, sel_hitTest_withEvent_, 0, a3, a4);
  id v17 = objc_msgSend(v14, sel_subviews);
  unint64_t v18 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (!(v18 >> 62))
  {
    uint64_t v19 = *(void *)((v18 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain();
    if (v19) {
      goto LABEL_3;
    }
LABEL_19:
    Swift::String v22 = (void *)MEMORY[0x1E4FBC860];
LABEL_20:
    uint64_t result = swift_bridgeObjectRelease_n();
    *(void *)a2 = v14;
    *(void *)(a2 + 8) = v39;
    *(void *)(a2 + 16) = v38;
    *(void *)(a2 + 24) = v37;
    *(void *)(a2 + 32) = v36;
    *(double *)(a2 + 40) = a3;
    *(double *)(a2 + 48) = a4;
    *(void *)(a2 + 56) = v35;
    *(void *)(a2 + 64) = v22;
    return result;
  }
  swift_bridgeObjectRetain();
  uint64_t result = _CocoaArrayWrapper.endIndex.getter();
  uint64_t v19 = result;
  if (!result) {
    goto LABEL_19;
  }
LABEL_3:
  if (v19 >= 1)
  {
    uint64_t v21 = 0;
    Swift::String v22 = (void *)MEMORY[0x1E4FBC860];
    do
    {
      if ((v18 & 0xC000000000000001) != 0) {
        id v23 = (id)MEMORY[0x18C117680](v21, v18);
      }
      else {
        id v23 = *(id *)(v18 + 8 * v21 + 32);
      }
      unint64_t v24 = v23;
      objc_msgSend(v23, sel_convertPoint_fromCoordinateSpace_, v14, a3, a4);
      double v26 = v25;
      double v28 = v27;
      objc_msgSend(v24, sel_bounds);
      v43.CGFloat x = v26;
      v43.CGFloat y = v28;
      if (CGRectContainsPoint(v44, v43)
        || a1 && (objc_msgSend(a1, sel_isDescendantOfView_, v24) & 1) != 0)
      {
        UIView.traceHitTest(point:radius:result:)(v41, a1, v26, v28, a5);

        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          Swift::String v22 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v22[2] + 1, 1, v22);
        }
        unint64_t v30 = v22[2];
        unint64_t v29 = v22[3];
        if (v30 >= v29 >> 1) {
          Swift::String v22 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v29 > 1), v30 + 1, 1, v22);
        }
        void v22[2] = v30 + 1;
        Swift::String v31 = &v22[9 * v30];
        *((_OWORD *)v31 + 2) = v41[0];
        long long v32 = v41[1];
        long long v33 = v41[2];
        long long v34 = v41[3];
        v31[12] = v42;
        *((_OWORD *)v31 + 4) = v33;
        *((_OWORD *)v31 + 5) = v34;
        *((_OWORD *)v31 + 3) = v32;
      }
      else
      {
      }
      ++v21;
    }
    while (v19 != v21);
    goto LABEL_20;
  }
  __break(1u);
  return result;
}

uint64_t outlined release of HitTestTrace<UIView>(uint64_t a1)
{
  uint64_t v2 = *(void **)a1;
  uint64_t v3 = *(void **)(a1 + 56);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return a1;
}

uint64_t UIView.propertiesAffectingHitTest.getter()
{
  uint64_t v1 = v0;
  type metadata accessor for _ContiguousArrayStorage<(key: String?, value: String)>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<(key: String?, value: String)>, (void (*)(uint64_t))type metadata accessor for (key: String?, value: String));
  uint64_t v2 = swift_allocObject();
  *(_OWORD *)(v2 + 16) = xmmword_18834BB80;
  *(_OWORD *)(v2 + 32) = xmmword_1883E8E00;
  objc_msgSend(v1, sel_frame);
  type metadata accessor for CGRect(0);
  _print_unlocked<A, B>(_:_:)();
  *(void *)(v2 + 48) = 0;
  *(void *)(v2 + 56) = 0xE000000000000000;
  if (objc_msgSend(v1, sel_isHidden)) {
    specialized Array.append<A>(contentsOf:)((uint64_t)&outlined read-only object #0 of UIView.propertiesAffectingHitTest.getter);
  }
  objc_msgSend(v1, sel_alpha);
  if (v3 < 0.001)
  {
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_18834BB80;
    *(_OWORD *)(inited + 32) = xmmword_1883E8E10;
    objc_msgSend(v1, sel_alpha);
    *(void *)(inited + 48) = Double.description.getter();
    *(void *)(inited + 56) = v5;
    specialized Array.append<A>(contentsOf:)(inited);
  }
  if ((objc_msgSend(v1, sel_isUserInteractionEnabled) & 1) == 0) {
    specialized Array.append<A>(contentsOf:)((uint64_t)&outlined read-only object #1 of UIView.propertiesAffectingHitTest.getter);
  }
  return v2;
}

uint64_t ViewResponder.traceHitTest(point:radius:options:result:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, double a4@<D0>, double a5@<D1>, double a6@<D2>)
{
  uint64_t v7 = v6;
  uint64_t v12 = *a1;
  type metadata accessor for UIView.Type(0, &lazy cache variable for type metadata for ViewResponder.Type, MEMORY[0x1E4F3F7E8]);
  swift_retain();
  uint64_t v13 = String.init<A>(describing:)();
  uint64_t v33 = v14;
  uint64_t v34 = v13;
  *((void *)&v37[0] + 1) = 0xE000000000000000;
  uint64_t v36 = v7;
  _print_unlocked<A, B>(_:_:)();
  *(void *)&v37[0] = v12;
  LOBYTE(v36) = 1;
  uint64_t v32 = ViewResponder.hitTest(globalPoint:radius:cacheKey:options:)();
  unint64_t v15 = dispatch thunk of ViewResponder.children.getter();
  unint64_t v16 = v15;
  if (v15 >> 62)
  {
LABEL_26:
    swift_bridgeObjectRetain();
    uint64_t v17 = _CocoaArrayWrapper.endIndex.getter();
    if (v17) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v17 = *(void *)((v15 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v17)
    {
LABEL_3:
      uint64_t v18 = 0;
      uint64_t v19 = (void *)MEMORY[0x1E4FBC860];
      while (1)
      {
        while (1)
        {
          if ((v16 & 0xC000000000000001) != 0)
          {
            MEMORY[0x18C117680](v18, v16);
            BOOL v20 = __OFADD__(v18++, 1);
            if (v20) {
              goto LABEL_25;
            }
          }
          else
          {
            swift_retain();
            BOOL v20 = __OFADD__(v18++, 1);
            if (v20)
            {
LABEL_25:
              __break(1u);
              goto LABEL_26;
            }
          }
          type metadata accessor for _ContiguousArrayStorage<(key: String?, value: String)>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<CGPoint>, type metadata accessor for CGPoint);
          uint64_t v21 = swift_allocObject();
          *(_OWORD *)(v21 + 16) = xmmword_18834BB80;
          *(double *)(v21 + 32) = a4;
          *(double *)(v21 + 40) = a5;
          LOBYTE(v36) = 1;
          dispatch thunk of ViewResponder.containsGlobalPoints(_:cacheKey:options:)();
          swift_bridgeObjectRelease();
          uint64_t v22 = v36;
          swift_bridgeObjectRelease();
          if (!v22) {
            break;
          }
LABEL_11:
          uint64_t v36 = 0;
          ViewResponder.traceHitTest(point:radius:options:result:)(v37, &v36, a2, a4, a5, a6);
          swift_release();
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v19 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v19[2] + 1, 1, v19);
          }
          unint64_t v24 = v19[2];
          unint64_t v23 = v19[3];
          if (v24 >= v23 >> 1) {
            uint64_t v19 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v23 > 1), v24 + 1, 1, v19);
          }
          _OWORD v19[2] = v24 + 1;
          double v25 = &v19[9 * v24];
          *((_OWORD *)v25 + 2) = v37[0];
          long long v26 = v37[1];
          long long v27 = v37[2];
          long long v28 = v37[3];
          v25[12] = v38;
          *((_OWORD *)v25 + 4) = v27;
          *((_OWORD *)v25 + 5) = v28;
          *((_OWORD *)v25 + 3) = v26;
          if (v18 == v17) {
            goto LABEL_28;
          }
        }
        if (a2)
        {
          swift_retain_n();
          if (a2 == v7) {
            goto LABEL_23;
          }
          swift_retain();
          uint64_t v29 = dispatch thunk of ResponderNode.nextResponder.getter();
          swift_retain();
          swift_release_n();
          if (v29)
          {
            swift_release();
            if (v29 == v7)
            {
LABEL_23:
              swift_release();
              swift_release();
              goto LABEL_11;
            }
            while (1)
            {
              swift_retain();
              uint64_t v30 = dispatch thunk of ResponderNode.nextResponder.getter();
              swift_retain();
              swift_release_n();
              if (!v30) {
                break;
              }
              swift_release();
              if (v30 == v7) {
                goto LABEL_23;
              }
            }
          }
          swift_release();
        }
        swift_release();
        if (v18 == v17) {
          goto LABEL_28;
        }
      }
    }
  }
  uint64_t v19 = (void *)MEMORY[0x1E4FBC860];
LABEL_28:
  uint64_t result = swift_bridgeObjectRelease_n();
  *(void *)a3 = v7;
  *(void *)(a3 + 8) = v34;
  *(void *)(a3 + 16) = v33;
  *(void *)(a3 + 24) = 0;
  *(void *)(a3 + 32) = 0xE000000000000000;
  *(double *)(a3 + 40) = a4;
  *(double *)(a3 + 48) = a5;
  *(void *)(a3 + 56) = v32;
  *(void *)(a3 + 64) = v19;
  return result;
}

uint64_t ViewResponder.propertiesAffectingHitTest.getter()
{
  uint64_t v1 = v0;
  uint64_t v13 = MEMORY[0x1E4FBC860];
  if (!swift_conformsToProtocol2()) {
    uint64_t v0 = 0;
  }
  if (v0)
  {
    swift_retain();
    uint64_t v2 = dispatch thunk of ViewResponder.gestureContainer.getter();
    swift_release();
    if (v2)
    {
      swift_getObjectType();
      type metadata accessor for Swift.AnyObject.Type();
      uint64_t v3 = String.init<A>(describing:)();
      uint64_t v5 = v4;
      _print_unlocked<A, B>(_:_:)();
      type metadata accessor for _ContiguousArrayStorage<(key: String?, value: String)>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<(String?, String)>, (void (*)(uint64_t))type metadata accessor for (String?, String));
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_18834BB80;
      *(void *)(inited + 32) = 0xD00000000000001ALL;
      *(void *)(inited + 40) = 0x80000001883466A0;
      v7._uint64_t countAndFlagsBits = 40;
      v7._object = (void *)0xE100000000000000;
      String.append(_:)(v7);
      v8._uint64_t countAndFlagsBits = 0;
      v8._object = (void *)0xE000000000000000;
      String.append(_:)(v8);
      swift_bridgeObjectRelease();
      v9._uint64_t countAndFlagsBits = 41;
      v9._object = (void *)0xE100000000000000;
      String.append(_:)(v9);
      *(void *)(inited + 48) = v3;
      *(void *)(inited + 56) = v5;
      specialized Array.append<A>(contentsOf:)(inited);
      swift_unknownObjectRelease();
    }
  }
  if (swift_conformsToProtocol2()) {
    uint64_t v10 = v1;
  }
  else {
    uint64_t v10 = 0;
  }
  if (!v10)
  {
    dispatch thunk of ViewResponder.extendPrintTree(string:)();
    swift_bridgeObjectRelease();
  }
  uint64_t v11 = specialized _arrayForceCast<A, B>(_:)(v13);
  swift_bridgeObjectRelease();
  return v11;
}

id closure #1 in ResponderBasedHitTestTracing.traceHitTest(point:radius:options:result:)@<X0>(void **a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *a1;
  *(void *)a2 = v2;
  *(unsigned char *)(a2 + 8) = 0;
  return v2;
}

uint64_t closure #2 in ResponderBasedHitTestTracing.traceHitTest(point:radius:options:result:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = *a1;
  *(unsigned char *)(a2 + 8) = 1;
  return swift_retain();
}

char *closure #3 in ResponderBasedHitTestTracing.traceHitTest(point:radius:options:result:)(uint64_t a1, uint64_t a2, char *a3, void *a4, uint64_t a5, double a6, double a7, double a8)
{
  uint64_t v13 = *(void **)a2;
  char v14 = *(unsigned char *)(a2 + 8);
  if ((v14 & 1) == 0)
  {
    swift_getObjectType();
    uint64_t v41 = swift_conformsToProtocol2();
    if (v41) {
      uint64_t v42 = v41;
    }
    else {
      uint64_t v42 = 0;
    }
    if (v41) {
      CGPoint v43 = v13;
    }
    else {
      CGPoint v43 = 0;
    }
    if (!v43) {
      goto LABEL_30;
    }
    outlined copy of ResponderBasedHitTestTracing(v13, 0);
    id v44 = v13;
    MEMORY[0x18C113CA0]();
    uint64_t ObjectType = swift_getObjectType();
    uint64_t v46 = (*(uint64_t (**)(uint64_t, uint64_t))(v42 + 16))(ObjectType, v42);
    if (v46)
    {
      uint64_t v47 = (void *)v46;
      type metadata accessor for UIViewResponder();
      uint64_t v48 = swift_dynamicCastClass();
      if (v48)
      {
        uint64_t v49 = v48 + 40;
        uint64_t v50 = MEMORY[0x18C119DF0](v48 + 40);
        if (v50)
        {
          uint64_t v51 = (void *)v50;
          uint64_t v52 = (void *)MEMORY[0x18C119DF0](v49);
          if (v52)
          {
            uint64_t v53 = v52;

            if (v53 == v51)
            {
              swift_release();
              goto LABEL_25;
            }
          }
          else
          {
          }
        }
      }
      objc_msgSend(v44, sel_convertPoint_toView_, 0, a6, a7);
      double v72 = v71;
      double v74 = v73;
      type metadata accessor for _ContiguousArrayStorage<(key: String?, value: String)>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<HitTestTrace<ResponderBasedHitTestTracing>>, (void (*)(uint64_t))type metadata accessor for HitTestTrace<ResponderBasedHitTestTracing>);
      unint64_t v24 = (char *)swift_allocObject();
      *((_OWORD *)v24 + 1) = xmmword_18834BB80;
      uint64_t v88 = a3;
      swift_retain();
      ResponderBasedHitTestTracing.traceHitTest(point:radius:options:result:)((uint64_t *)&v88, a4, a5, v47, 1, (uint64_t)&v96, v72, v74, a8);
      swift_release();
      long long v75 = v99;
      *((_OWORD *)v24 + 4) = v98;
      *((_OWORD *)v24 + 5) = v75;
      *((_OWORD *)v24 + 6) = v100;
      *((void *)v24 + 14) = v101;
      long long v76 = v97;
      *((_OWORD *)v24 + 2) = v96;
      *((_OWORD *)v24 + 3) = v76;
      swift_release();
      static Update.end()();
      outlined consume of ResponderBasedHitTestTracing(v13, 0);
      uint64_t v39 = v13;
      char v40 = 0;
LABEL_38:
      outlined consume of ResponderBasedHitTestTracing(v39, v40);
      return v24;
    }
LABEL_25:
    static Update.end()();
    uint64_t v54 = v13;
    char v55 = 0;
    goto LABEL_28;
  }
  type metadata accessor for UIViewResponder();
  uint64_t v15 = swift_dynamicCastClass();
  if (v15)
  {
    uint64_t v16 = v15;
    uint64_t v17 = MEMORY[0x18C119DF0](v15 + 40);
    if (v17)
    {
      uint64_t v18 = (void *)v17;
      outlined copy of ResponderBasedHitTestTracing(v13, 1);
      swift_retain();
      id v19 = objc_msgSend(v18, sel_window);

      if (!v19)
      {
        outlined consume of ResponderBasedHitTestTracing(v13, 1);

LABEL_29:
        outlined consume of ResponderBasedHitTestTracing(v13, v14);
        goto LABEL_30;
      }
      if (closure #2 in closure #3 in ResponderBasedHitTestTracing.traceHitTest(point:radius:options:result:)(a1, a4, a5, v16))
      {
        objc_msgSend(v18, sel_convertPoint_fromView_, 0, a6, a7);
        double v21 = v20;
        double v23 = v22;
        type metadata accessor for _ContiguousArrayStorage<(key: String?, value: String)>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<HitTestTrace<ResponderBasedHitTestTracing>>, (void (*)(uint64_t))type metadata accessor for HitTestTrace<ResponderBasedHitTestTracing>);
        unint64_t v24 = (char *)swift_allocObject();
        double v25 = 0;
        *((_OWORD *)v24 + 1) = xmmword_18834BB80;
        if ((a5 & 1) == 0)
        {
          double v25 = a4;
          id v26 = a4;
        }
        id v83 = v18;
        UIView.traceHitTest(point:radius:result:)(v25, (uint64_t)&v88, v21, v23, a8);

        long long v27 = v95;
        uint64_t v28 = v93;
        uint64_t v29 = v94;
        uint64_t v30 = v92;
        uint64_t v31 = v89;
        uint64_t v81 = v89;
        uint64_t v82 = v91;
        uint64_t v32 = v90;
        id v78 = v88;
        char v80 = v88;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        id v79 = v27;
        uint64_t v33 = swift_bridgeObjectRetain();
        uint64_t v34 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay7SwiftUI12HitTestTrace33_DB5E6F06E13FF0259F656B4E03BE4F79LLVySo6UIViewCGG_AIyAF014ResponderBasedfG7TracingAHLLOGs5NeverOTg503_s7d4UI12fg8Trace33_ijklmnopqr29LLV3mapyADyqd__Gqd__xXEAA0cD7v24ACLLRd__lFAfDyxGXEfU_So6s7C_AA014T17BasedcdQ0ACLLOTG5xq_Ri_zRi0_zRi__Ri0__r0_lyAkOIsgnr_Tf1cn_nTf4ng_n(v33, (void (*)(uint64_t *__return_ptr, id *))closure #1 in ResponderBasedHitTestTracing.traceHitTest(point:radius:options:result:), 0);

        swift_bridgeObjectRelease();
        outlined release of HitTestTrace<UIView>((uint64_t)&v88);
        *(void *)&long long v96 = v78;
        BYTE8(v96) = 0;
        *(void *)&long long v97 = v31;
        *((void *)&v97 + 1) = v32;
        *(void *)&long long v98 = v82;
        *((void *)&v98 + 1) = v30;
        *(void *)&long long v99 = v28;
        *((void *)&v99 + 1) = v29;
        *(void *)&long long v100 = v27;
        if (v27) {
          unsigned __int8 v35 = 0;
        }
        else {
          unsigned __int8 v35 = -1;
        }
        BYTE8(v100) = v35;
        uint64_t v101 = v34;
        uint64_t v36 = v80;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        id v37 = v79;
        uint64_t v38 = closure #3 in ResponderBasedHitTestTracing.traceHitTest(point:radius:options:result:)(v34, &v96, a3, a4, a5, v21, v23, a8);
        outlined consume of ResponderBasedHitTestTracing(v78, 0);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        outlined consume of ResponderBasedHitTestTracing?(v27, v35);

        swift_bridgeObjectRelease();
        *((void *)v24 + 4) = v78;
        unsigned char v24[40] = 0;
        *((void *)v24 + 6) = v81;
        *((void *)v24 + 7) = v32;
        *((void *)v24 + 8) = v82;
        *((void *)v24 + 9) = v30;
        *((void *)v24 + 10) = v28;
        *((void *)v24 + 11) = v29;
        *((void *)v24 + 12) = v27;
        v24[104] = v35;
        *((void *)v24 + 14) = v38;

        outlined consume of ResponderBasedHitTestTracing(v13, 1);
        uint64_t v39 = v13;
        char v40 = 1;
        goto LABEL_38;
      }

      uint64_t v54 = v13;
      char v55 = 1;
LABEL_28:
      outlined consume of ResponderBasedHitTestTracing(v54, v55);
      goto LABEL_29;
    }
  }
LABEL_30:
  int64_t v56 = *(void *)(a1 + 16);
  unint64_t v24 = (char *)MEMORY[0x1E4FBC860];
  if (v56)
  {
    unsigned int v84 = a5;
    uint64_t v88 = (char *)MEMORY[0x1E4FBC860];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v56, 0);
    unint64_t v24 = v88;
    uint64_t v57 = a1 + 112;
    do
    {
      long long v58 = *(void **)(v57 - 80);
      char v59 = *(unsigned char *)(v57 - 72);
      double v60 = *(double *)(v57 - 32);
      double v61 = *(double *)(v57 - 24);
      uint64_t v62 = *(void **)(v57 - 16);
      unsigned __int8 v63 = *(unsigned char *)(v57 - 8);
      uint64_t v87 = a3;
      outlined copy of ResponderBasedHitTestTracing(v58, v59);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      outlined copy of ResponderBasedHitTestTracing?(v62, v63);
      swift_bridgeObjectRetain();
      ResponderBasedHitTestTracing.traceHitTest(point:radius:options:result:)((uint64_t *)&v87, a4, v84, v58, v59, (uint64_t)&v96, v60, v61, a8);
      outlined consume of ResponderBasedHitTestTracing(v58, v59);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined consume of ResponderBasedHitTestTracing?(v62, v63);
      swift_bridgeObjectRelease();
      uint64_t v88 = v24;
      unint64_t v65 = *((void *)v24 + 2);
      unint64_t v64 = *((void *)v24 + 3);
      if (v65 >= v64 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v64 > 1), v65 + 1, 1);
        unint64_t v24 = v88;
      }
      *((void *)v24 + 2) = v65 + 1;
      uint64_t v66 = &v24[88 * v65];
      long long v67 = v97;
      *((_OWORD *)v66 + 2) = v96;
      *((_OWORD *)v66 + 3) = v67;
      long long v68 = v98;
      long long v69 = v99;
      long long v70 = v100;
      *((void *)v66 + 14) = v101;
      *((_OWORD *)v66 + 5) = v69;
      *((_OWORD *)v66 + 6) = v70;
      *((_OWORD *)v66 + 4) = v68;
      v57 += 88;
      --v56;
    }
    while (v56);
  }
  return v24;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay7SwiftUI12HitTestTrace33_DB5E6F06E13FF0259F656B4E03BE4F79LLVyAF13ViewResponderCGG_AIyAF0t5BasedfG7TracingAHLLOGs5NeverOTg503_s7d4UI12fg8Trace33_ijklmnopqr29LLV3mapyADyqd__Gqd__xXEAA0cD7v25ACLLRd__lFAfDyxGXEfU_AA13sT24C_AA0s5BasedcdQ0ACLLOTG5xq_Ri_zRi0_zRi__Ri0__r0_lyAkOIsgnr_Tf1cn_nTf4ng_n(uint64_t a1, void (*a2)(uint64_t *__return_ptr, uint64_t *), uint64_t a3)
{
  uint64_t v4 = v3;
  int64_t v6 = *(void *)(a1 + 16);
  uint64_t result = MEMORY[0x1E4FBC860];
  if (v6)
  {
    uint64_t v41 = MEMORY[0x1E4FBC860];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v6, 0);
    uint64_t v8 = a3;
    uint64_t result = v41;
    Swift::String v9 = (uint64_t *)(a1 + 48);
    do
    {
      uint64_t v32 = result;
      uint64_t v33 = v4;
      uint64_t v10 = *(v9 - 1);
      uint64_t v12 = *v9;
      uint64_t v11 = v9[1];
      uint64_t v13 = v9[2];
      uint64_t v14 = v9[3];
      uint64_t v15 = v9[4];
      uint64_t v17 = v9[5];
      uint64_t v16 = v9[6];
      v40[0] = *(v9 - 2);
      v40[1] = v10;
      uint64_t v30 = v11;
      uint64_t v31 = v10;
      void v40[2] = v12;
      void v40[3] = v11;
      v40[4] = v13;
      v40[5] = v14;
      v40[6] = v15;
      v40[7] = v17;
      v40[8] = v16;
      swift_retain();
      swift_bridgeObjectRetain();
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      a2(&v38, v40);
      if (v17)
      {
        uint64_t v34 = v17;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_retain();
        a2(&v35, &v34);
        swift_release();
        uint64_t v28 = v35;
        char v18 = v36;
      }
      else
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        uint64_t v28 = 0;
        char v18 = -1;
      }
      char v27 = v18;
      uint64_t v19 = swift_bridgeObjectRetain();
      uint64_t v29 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay7SwiftUI12HitTestTrace33_DB5E6F06E13FF0259F656B4E03BE4F79LLVyAF13ViewResponderCGG_AIyAF0t5BasedfG7TracingAHLLOGs5NeverOTg503_s7d4UI12fg8Trace33_ijklmnopqr29LLV3mapyADyqd__Gqd__xXEAA0cD7v25ACLLRd__lFAfDyxGXEfU_AA13sT24C_AA0s5BasedcdQ0ACLLOTG5xq_Ri_zRi0_zRi__Ri0__r0_lyAkOIsgnr_Tf1cn_nTf4ng_n(v19, a2, v8, v37);
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      swift_bridgeObjectRelease_n();
      uint64_t v20 = v38;
      char v21 = v39;
      uint64_t result = v32;
      uint64_t v41 = v32;
      unint64_t v23 = *(void *)(v32 + 16);
      unint64_t v22 = *(void *)(v32 + 24);
      if (v23 >= v22 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v22 > 1), v23 + 1, 1);
        uint64_t v8 = a3;
        uint64_t result = v41;
      }
      *(void *)(result + 16) = v23 + 1;
      uint64_t v24 = result + 88 * v23;
      *(void *)(v24 + 32) = v20;
      *(unsigned char *)(v24 + 40) = v21;
      *(void *)(v24 + 48) = v31;
      *(void *)(v24 + 56) = v12;
      *(void *)(v24 + 64) = v30;
      *(void *)(v24 + 72) = v13;
      *(void *)(v24 + 80) = v14;
      *(void *)(v24 + 88) = v15;
      *(void *)(v24 + 96) = v28;
      *(unsigned char *)(v24 + 104) = v27;
      *(void *)(v24 + 112) = v29;
      v9 += 9;
      --v6;
      uint64_t v4 = v33;
    }
    while (v6);
  }
  return result;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay7SwiftUI12HitTestTrace33_DB5E6F06E13FF0259F656B4E03BE4F79LLVySo6UIViewCGG_AIyAF014ResponderBasedfG7TracingAHLLOGs5NeverOTg503_s7d4UI12fg8Trace33_ijklmnopqr29LLV3mapyADyqd__Gqd__xXEAA0cD7v24ACLLRd__lFAfDyxGXEfU_So6s7C_AA014T17BasedcdQ0ACLLOTG5xq_Ri_zRi0_zRi__Ri0__r0_lyAkOIsgnr_Tf1cn_nTf4ng_n(uint64_t a1, void (*a2)(uint64_t *__return_ptr, id *), uint64_t a3)
{
  int64_t v4 = *(void *)(a1 + 16);
  uint64_t result = MEMORY[0x1E4FBC860];
  if (v4)
  {
    uint64_t v42 = MEMORY[0x1E4FBC860];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v4, 0);
    uint64_t v6 = a3;
    uint64_t result = v42;
    Swift::String v7 = (uint64_t *)(a1 + 48);
    do
    {
      uint64_t v8 = *(v7 - 1);
      uint64_t v11 = *v7;
      uint64_t v10 = v7[1];
      uint64_t v12 = v7[2];
      uint64_t v13 = v7[3];
      uint64_t v14 = v7[4];
      uint64_t v15 = (void *)v7[5];
      uint64_t v16 = v7[6];
      v41[0] = *(v7 - 2);
      Swift::String v9 = (void *)v41[0];
      v41[1] = v8;
      uint64_t v33 = v8;
      uint64_t v34 = result;
      void v41[2] = v11;
      v41[3] = v10;
      uint64_t v32 = v10;
      _OWORD v41[4] = v12;
      v41[5] = v13;
      v41[6] = v14;
      v41[7] = v15;
      v41[8] = v16;
      id v17 = v15;
      swift_bridgeObjectRetain();
      id v31 = v9;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      a2(&v39, (id *)v41);
      if (v15)
      {
        id v35 = v17;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        id v18 = v17;
        a2(&v36, &v35);

        uint64_t v29 = v36;
        char v19 = v37;
      }
      else
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        uint64_t v29 = 0;
        char v19 = -1;
      }
      char v28 = v19;
      uint64_t v20 = swift_bridgeObjectRetain();
      uint64_t v30 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay7SwiftUI12HitTestTrace33_DB5E6F06E13FF0259F656B4E03BE4F79LLVySo6UIViewCGG_AIyAF014ResponderBasedfG7TracingAHLLOGs5NeverOTg503_s7d4UI12fg8Trace33_ijklmnopqr29LLV3mapyADyqd__Gqd__xXEAA0cD7v24ACLLRd__lFAfDyxGXEfU_So6s7C_AA014T17BasedcdQ0ACLLOTG5xq_Ri_zRi0_zRi__Ri0__r0_lyAkOIsgnr_Tf1cn_nTf4ng_n(v20, a2, v6, v38);

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      swift_bridgeObjectRelease_n();
      uint64_t v21 = v39;
      char v22 = v40;
      uint64_t result = v34;
      uint64_t v42 = v34;
      unint64_t v24 = *(void *)(v34 + 16);
      unint64_t v23 = *(void *)(v34 + 24);
      if (v24 >= v23 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v23 > 1), v24 + 1, 1);
        uint64_t v6 = a3;
        uint64_t result = v42;
      }
      *(void *)(result + 16) = v24 + 1;
      uint64_t v25 = result + 88 * v24;
      *(void *)(v25 + 32) = v21;
      *(unsigned char *)(v25 + 40) = v22;
      *(void *)(v25 + 48) = v33;
      *(void *)(v25 + 56) = v11;
      *(void *)(v25 + 64) = v32;
      *(void *)(v25 + 72) = v12;
      *(void *)(v25 + 80) = v13;
      *(void *)(v25 + 88) = v14;
      *(void *)(v25 + 96) = v29;
      *(unsigned char *)(v25 + 104) = v28;
      *(void *)(v25 + 112) = v30;
      v7 += 9;
      --v4;
    }
    while (v4);
  }
  return result;
}

void outlined consume of ResponderBasedHitTestTracing(void *a1, char a2)
{
  if (a2) {
    swift_release();
  }
  else {
}
  }

void outlined consume of ResponderBasedHitTestTracing?(void *a1, unsigned __int8 a2)
{
  if (a2 != 255) {
    outlined consume of ResponderBasedHitTestTracing(a1, a2 & 1);
  }
}

id outlined copy of ResponderBasedHitTestTracing(void *a1, char a2)
{
  if (a2) {
    return (id)swift_retain();
  }
  else {
    return a1;
  }
}

uint64_t outlined init with take of ResponderBasedHitTestTracing(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  *(unsigned char *)(a2 + 8) = *((unsigned char *)a1 + 8);
  *(void *)a2 = v2;
  return a2;
}

uint64_t outlined init with take of ResponderBasedHitTestTracing?(uint64_t a1, uint64_t a2)
{
  _ss23_ContiguousArrayStorageCyyXlGMaTm_1(0, &lazy cache variable for type metadata for ResponderBasedHitTestTracing?, (uint64_t)&type metadata for ResponderBasedHitTestTracing, MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

char *_sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay7SwiftUI12HitTestTrace33_DB5E6F06E13FF0259F656B4E03BE4F79LLVySo6UIViewCGG_SSs5NeverOTg503_s7d4UI12fg8Trace33_ijklmnopqr71LLV20recursiveDescription10annotating5depthSSSayxG_SitFSSADyxGXEfU1_So6S5C_TG5SayAKGSiTf1cn_nTf4ngn_n(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int64_t v3 = *(void *)(a1 + 16);
  uint64_t v4 = MEMORY[0x1E4FBC860];
  if (!v3) {
    return (char *)v4;
  }
  uint64_t v22 = MEMORY[0x1E4FBC860];
  uint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3, 0);
  BOOL v8 = __OFADD__(a3, 1);
  uint64_t v9 = a3 + 1;
  if (!v8)
  {
    uint64_t v10 = a1 + 32;
    uint64_t v4 = v22;
    do
    {
      long long v11 = *(_OWORD *)(v10 + 48);
      void v20[2] = *(_OWORD *)(v10 + 32);
      v20[3] = v11;
      uint64_t v21 = *(void *)(v10 + 64);
      long long v12 = *(_OWORD *)(v10 + 16);
      v20[0] = *(_OWORD *)v10;
      v20[1] = v12;
      outlined retain of HitTestTrace<UIView>((void **)v20);
      uint64_t v13 = specialized HitTestTrace.recursiveDescription(annotating:depth:)(a2, v9);
      uint64_t v15 = v14;
      outlined release of HitTestTrace<UIView>((uint64_t)v20);
      uint64_t v22 = v4;
      unint64_t v17 = *(void *)(v4 + 16);
      unint64_t v16 = *(void *)(v4 + 24);
      if (v17 >= v16 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v16 > 1), v17 + 1, 1);
        uint64_t v4 = v22;
      }
      *(void *)(v4 + 16) = v17 + 1;
      uint64_t v18 = v4 + 16 * v17;
      *(void *)(v18 + 32) = v13;
      *(void *)(v18 + 40) = v15;
      v10 += 72;
      --v3;
    }
    while (v3);
    return (char *)v4;
  }
  __break(1u);
  return result;
}

char *_sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay7SwiftUI12HitTestTrace33_DB5E6F06E13FF0259F656B4E03BE4F79LLVyAF014ResponderBasedfG7TracingAHLLOGG_SSs5NeverOTg503_s7d4UI12fg8Trace33_ijklmnopqr73LLV20recursiveDescription10annotating5depthSSSayxG_SitFSSADyxGXEfU1_AA014s8BasedcD7U9ACLLO_TG5SayAKGSiTf1cn_nTf4ngn_n(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int64_t v3 = *(void *)(a1 + 16);
  uint64_t v4 = MEMORY[0x1E4FBC860];
  if (!v3) {
    return (char *)v4;
  }
  uint64_t v22 = MEMORY[0x1E4FBC860];
  uint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3, 0);
  BOOL v8 = __OFADD__(a3, 1);
  uint64_t v9 = a3 + 1;
  if (!v8)
  {
    uint64_t v10 = a1 + 32;
    uint64_t v4 = v22;
    do
    {
      long long v11 = *(_OWORD *)(v10 + 48);
      void v20[2] = *(_OWORD *)(v10 + 32);
      v20[3] = v11;
      _OWORD v20[4] = *(_OWORD *)(v10 + 64);
      uint64_t v21 = *(void *)(v10 + 80);
      long long v12 = *(_OWORD *)(v10 + 16);
      v20[0] = *(_OWORD *)v10;
      v20[1] = v12;
      outlined retain of HitTestTrace<ResponderBasedHitTestTracing>((uint64_t)v20);
      uint64_t v13 = specialized HitTestTrace.recursiveDescription(annotating:depth:)(a2, v9);
      uint64_t v15 = v14;
      outlined release of HitTestTrace<ResponderBasedHitTestTracing>((uint64_t)v20);
      uint64_t v22 = v4;
      unint64_t v17 = *(void *)(v4 + 16);
      unint64_t v16 = *(void *)(v4 + 24);
      if (v17 >= v16 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v16 > 1), v17 + 1, 1);
        uint64_t v4 = v22;
      }
      *(void *)(v4 + 16) = v17 + 1;
      uint64_t v18 = v4 + 16 * v17;
      *(void *)(v18 + 32) = v13;
      *(void *)(v18 + 40) = v15;
      v10 += 88;
      --v3;
    }
    while (v3);
    return (char *)v4;
  }
  __break(1u);
  return result;
}

uint64_t outlined retain of HitTestTrace<ResponderBasedHitTestTracing>(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 64);
  unsigned __int8 v3 = *(unsigned char *)(a1 + 72);
  outlined copy of ResponderBasedHitTestTracing(*(void **)a1, *(unsigned char *)(a1 + 8));
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  outlined copy of ResponderBasedHitTestTracing?(v2, v3);
  swift_bridgeObjectRetain();
  return a1;
}

id outlined copy of ResponderBasedHitTestTracing?(id result, unsigned __int8 a2)
{
  if (a2 != 255) {
    return outlined copy of ResponderBasedHitTestTracing(result, a2 & 1);
  }
  return result;
}

uint64_t outlined release of HitTestTrace<ResponderBasedHitTestTracing>(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 64);
  unsigned __int8 v3 = *(unsigned char *)(a1 + 72);
  outlined consume of ResponderBasedHitTestTracing(*(void **)a1, *(unsigned char *)(a1 + 8));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined consume of ResponderBasedHitTestTracing?(v2, v3);
  swift_bridgeObjectRelease();
  return a1;
}

unint64_t type metadata accessor for Swift.AnyObject.Type()
{
  unint64_t result = lazy cache variable for type metadata for Swift.AnyObject.Type;
  if (!lazy cache variable for type metadata for Swift.AnyObject.Type)
  {
    unint64_t result = swift_getExistentialMetatypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for Swift.AnyObject.Type);
  }
  return result;
}

void type metadata accessor for HitTestTrace<ResponderBasedHitTestTracing>()
{
  if (!lazy cache variable for type metadata for HitTestTrace<ResponderBasedHitTestTracing>)
  {
    unint64_t v0 = type metadata accessor for HitTestTrace();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for HitTestTrace<ResponderBasedHitTestTracing>);
    }
  }
}

uint64_t type metadata accessor for HitTestTrace()
{
  return __swift_instantiateGenericMetadata();
}

BOOL partial apply for specialized closure #1 in HitTestTrace.recursiveDescription(annotating:depth:)(void *a1)
{
  return **(void **)(v1 + 16) == *a1;
}

void **outlined retain of HitTestTrace<UIView>(void **a1)
{
  uint64_t v2 = *a1;
  id v3 = a1[7];
  swift_bridgeObjectRetain();
  id v4 = v2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

unint64_t lazy protocol witness table accessor for type UIView and conformance NSObject()
{
  unint64_t result = lazy protocol witness table cache variable for type UIView and conformance NSObject;
  if (!lazy protocol witness table cache variable for type UIView and conformance NSObject)
  {
    type metadata accessor for UIView();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UIView and conformance NSObject);
  }
  return result;
}

uint64_t outlined release of HitTestTrace<ViewResponder>(uint64_t a1)
{
  return a1;
}

uint64_t type metadata accessor for UIView.Type(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  uint64_t result = *a2;
  if (!*a2)
  {
    a3(255);
    uint64_t result = swift_getMetatypeMetadata();
    atomic_store(result, a2);
  }
  return result;
}

void type metadata accessor for _ContiguousArrayStorage<(key: String?, value: String)>(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = type metadata accessor for _ContiguousArrayStorage();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t type metadata completion function for HitTestTrace()
{
  uint64_t v0 = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t v0 = type metadata accessor for Optional();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return v0;
}

uint64_t *initializeBufferWithCopyOfBuffer for HitTestTrace(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  unint64_t v4 = a1;
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void *)(v6 + 64);
  int v8 = *(_DWORD *)(v6 + 80);
  uint64_t v9 = v8;
  uint64_t v10 = v8 + 16;
  if (*(_DWORD *)(v6 + 84)) {
    size_t v11 = *(void *)(v6 + 64);
  }
  else {
    size_t v11 = v7 + 1;
  }
  unint64_t v12 = ((v11
        + 7
        + ((v8
          + 16
          + ((((((v7 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)) & ~(unint64_t)v8)) & 0xFFFFFFFFFFFFFFF8)
      + 8;
  int v13 = v8 & 0x100000;
  if (v9 > 7 || v13 != 0 || v12 > 0x18)
  {
    uint64_t v16 = *a2;
    *unint64_t v4 = *a2;
    unint64_t v4 = (uint64_t *)(v16 + ((v9 & 0xF8 ^ 0x1F8) & v10));
    swift_retain();
  }
  else
  {
    uint64_t v17 = ~v9;
    char v28 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v6 + 16);
    v28(a1, a2, v5);
    uint64_t v18 = (void *)(((unint64_t)v4 + v7 + 7) & 0xFFFFFFFFFFFFFFF8);
    char v19 = (void *)(((unint64_t)a2 + v7 + 7) & 0xFFFFFFFFFFFFFFF8);
    *uint64_t v18 = *v19;
    v18[1] = v19[1];
    uint64_t v20 = (void *)(((unint64_t)v18 + 23) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v21 = (void *)(((unint64_t)v19 + 23) & 0xFFFFFFFFFFFFFFF8);
    *uint64_t v20 = *v21;
    v20[1] = v21[1];
    uint64_t v22 = (_OWORD *)(((unint64_t)v20 + 23) & 0xFFFFFFFFFFFFFFF8);
    unint64_t v23 = (_OWORD *)(((unint64_t)v21 + 23) & 0xFFFFFFFFFFFFFFF8);
    *uint64_t v22 = *v23;
    __dst = (void *)(((unint64_t)v22 + v10) & v17);
    unint64_t v24 = (void *)(((unint64_t)v23 + v10) & v17);
    uint64_t v25 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v6 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v25(v24, 1, v5))
    {
      memcpy(__dst, v24, v11);
    }
    else
    {
      v28(__dst, v24, v5);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v6 + 56))(__dst, 0, 1, v5);
    }
    *(void *)(((unint64_t)__dst + v11 + 7) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v24
                                                                                         + v11
                                                                                         + 7) & 0xFFFFFFFFFFFFFFF8);
    swift_bridgeObjectRetain();
  }
  return v4;
}

uint64_t destroy for HitTestTrace(unint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = v4;
  uint64_t v6 = *(void (**)(unint64_t, uint64_t))(v4 + 8);
  v6(a1, v3);
  uint64_t v7 = *(void *)(v4 + 64) + 7;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  unint64_t v8 = (((((((v7 + a1) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)
      + *(unsigned __int8 *)(v5 + 80)
      + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v5 + 48))(v8, 1, v3)) {
    v6(v8, v3);
  }

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for HitTestTrace(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = v6;
  unint64_t v23 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16);
  v23(a1, a2, v5);
  size_t v8 = *(void *)(v6 + 64);
  uint64_t v9 = (void *)((v8 + 7 + a1) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v10 = (void *)((v8 + 7 + a2) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v9 = *v10;
  v9[1] = v10[1];
  size_t v11 = (void *)(((unint64_t)v9 + 23) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v12 = (void *)(((unint64_t)v10 + 23) & 0xFFFFFFFFFFFFFFF8);
  *size_t v11 = *v12;
  v11[1] = v12[1];
  int v13 = (_OWORD *)(((unint64_t)v11 + 23) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v14 = (_OWORD *)(((unint64_t)v12 + 23) & 0xFFFFFFFFFFFFFFF8);
  *int v13 = *v14;
  uint64_t v15 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v16 = (void *)(((unint64_t)v13 + v15 + 16) & ~v15);
  uint64_t v17 = (const void *)(((unint64_t)v14 + v15 + 16) & ~v15);
  uint64_t v18 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v7 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v18(v17, 1, v5))
  {
    int v19 = *(_DWORD *)(v7 + 84);
    if (v19) {
      size_t v20 = v8;
    }
    else {
      size_t v20 = v8 + 1;
    }
    memcpy(v16, v17, v20);
  }
  else
  {
    v23((uint64_t)v16, (uint64_t)v17, v5);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(v16, 0, 1, v5);
    int v19 = *(_DWORD *)(v7 + 84);
  }
  if (v19) {
    size_t v21 = v8;
  }
  else {
    size_t v21 = v8 + 1;
  }
  *(void *)(((unint64_t)v16 + v21 + 7) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v17 + v21 + 7) & 0xFFFFFFFFFFFFFFF8);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for HitTestTrace(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = v6;
  size_t v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 24);
  v8(a1, a2, v5);
  size_t v9 = *(void *)(v6 + 64);
  uint64_t v25 = a1;
  uint64_t v10 = (void *)((v9 + 7 + a1) & 0xFFFFFFFFFFFFFFF8);
  size_t v11 = (void *)((v9 + 7 + a2) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v10 = *v11;
  v10[1] = v11[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  unint64_t v12 = (void *)(((unint64_t)v10 + 23) & 0xFFFFFFFFFFFFFFF8);
  int v13 = (void *)(((unint64_t)v11 + 23) & 0xFFFFFFFFFFFFFFF8);
  *unint64_t v12 = *v13;
  v12[1] = v13[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v14 = (void *)(((unint64_t)v12 + 23) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v15 = (void *)(((unint64_t)v13 + 23) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v14 = *v15;
  v14[1] = v15[1];
  uint64_t v16 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v17 = (void *)(((unint64_t)v14 + v16 + 16) & ~v16);
  uint64_t v18 = (void *)(((unint64_t)v15 + v16 + 16) & ~v16);
  int v19 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v7 + 48);
  LODWORD(v13) = v19(v17, 1, v5);
  int v20 = v19(v18, 1, v5);
  if (v13)
  {
    if (!v20)
    {
      (*(void (**)(void *, void *, uint64_t))(v7 + 16))(v17, v18, v5);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(v17, 0, 1, v5);
      goto LABEL_12;
    }
    int v21 = *(_DWORD *)(v7 + 84);
  }
  else
  {
    if (!v20)
    {
      v8((uint64_t)v17, (uint64_t)v18, v5);
      goto LABEL_12;
    }
    (*(void (**)(void *, uint64_t))(v7 + 8))(v17, v5);
    int v21 = *(_DWORD *)(v7 + 84);
  }
  if (v21) {
    size_t v22 = v9;
  }
  else {
    size_t v22 = v9 + 1;
  }
  memcpy(v17, v18, v22);
LABEL_12:
  if (*(_DWORD *)(v7 + 84)) {
    size_t v23 = v9;
  }
  else {
    size_t v23 = v9 + 1;
  }
  *(void *)(((unint64_t)v17 + v23 + 7) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v18 + v23 + 7) & 0xFFFFFFFFFFFFFFF8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return v25;
}

uint64_t initializeWithTake for HitTestTrace(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = v6;
  size_t v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 32);
  v8(a1, a2, v5);
  size_t v9 = *(void *)(v6 + 64);
  uint64_t v10 = (_OWORD *)((v9 + 7 + a1) & 0xFFFFFFFFFFFFFFF8);
  size_t v11 = (_OWORD *)((v9 + 7 + a2) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v10 = *v11;
  unint64_t v12 = (_OWORD *)(((unint64_t)v10 + 23) & 0xFFFFFFFFFFFFFFF8);
  int v13 = (_OWORD *)(((unint64_t)v11 + 23) & 0xFFFFFFFFFFFFFFF8);
  *unint64_t v12 = *v13;
  uint64_t v14 = (_OWORD *)(((unint64_t)v12 + 23) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v15 = (_OWORD *)(((unint64_t)v13 + 23) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v14 = *v15;
  uint64_t v16 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v17 = (void *)(((unint64_t)v14 + v16 + 16) & ~v16);
  uint64_t v18 = (const void *)(((unint64_t)v15 + v16 + 16) & ~v16);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v7 + 48))(v18, 1, v5))
  {
    int v19 = *(_DWORD *)(v7 + 84);
    if (v19) {
      size_t v20 = v9;
    }
    else {
      size_t v20 = v9 + 1;
    }
    memcpy(v17, v18, v20);
  }
  else
  {
    v8((uint64_t)v17, (uint64_t)v18, v5);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(v17, 0, 1, v5);
    int v19 = *(_DWORD *)(v7 + 84);
  }
  if (v19) {
    size_t v21 = v9;
  }
  else {
    size_t v21 = v9 + 1;
  }
  *(void *)(((unint64_t)v17 + v21 + 7) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v18 + v21 + 7) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

uint64_t assignWithTake for HitTestTrace(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = v6;
  size_t v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 40);
  v8(a1, a2, v5);
  size_t v9 = *(void *)(v6 + 64);
  uint64_t v26 = a1;
  uint64_t v10 = (void *)((v9 + 7 + a1) & 0xFFFFFFFFFFFFFFF8);
  size_t v11 = (void *)((v9 + 7 + a2) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v10 = *v11;
  v10[1] = v11[1];
  swift_bridgeObjectRelease();
  unint64_t v12 = (void *)(((unint64_t)v10 + 23) & 0xFFFFFFFFFFFFFFF8);
  int v13 = (void *)(((unint64_t)v11 + 23) & 0xFFFFFFFFFFFFFFF8);
  *unint64_t v12 = *v13;
  v12[1] = v13[1];
  swift_bridgeObjectRelease();
  uint64_t v14 = (void *)(((unint64_t)v12 + 23) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v15 = (void *)(((unint64_t)v13 + 23) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v14 = *v15;
  v14[1] = v15[1];
  uint64_t v16 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v17 = (void *)(((unint64_t)v14 + v16 + 16) & ~v16);
  uint64_t v18 = (void *)(((unint64_t)v15 + v16 + 16) & ~v16);
  int v19 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v7 + 48);
  int v20 = v19(v17, 1, v5);
  int v21 = v19(v18, 1, v5);
  if (v20)
  {
    if (!v21)
    {
      (*(void (**)(void *, void *, uint64_t))(v7 + 32))(v17, v18, v5);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(v17, 0, 1, v5);
      goto LABEL_12;
    }
    int v22 = *(_DWORD *)(v7 + 84);
  }
  else
  {
    if (!v21)
    {
      v8((uint64_t)v17, (uint64_t)v18, v5);
      goto LABEL_12;
    }
    (*(void (**)(void *, uint64_t))(v7 + 8))(v17, v5);
    int v22 = *(_DWORD *)(v7 + 84);
  }
  if (v22) {
    size_t v23 = v9;
  }
  else {
    size_t v23 = v9 + 1;
  }
  memcpy(v17, v18, v23);
LABEL_12:
  if (*(_DWORD *)(v7 + 84)) {
    size_t v24 = v9;
  }
  else {
    size_t v24 = v9 + 1;
  }
  *(void *)(((unint64_t)v17 + v24 + 7) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v18 + v24 + 7) & 0xFFFFFFFFFFFFFFF8);
  swift_bridgeObjectRelease();
  return v26;
}

uint64_t getEnumTagSinglePayload for HitTestTrace(_DWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF) {
    unsigned int v6 = 0x7FFFFFFF;
  }
  else {
    unsigned int v6 = *(_DWORD *)(v4 + 84);
  }
  uint64_t v7 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  uint64_t v8 = v7 + 8;
  if (v5) {
    uint64_t v8 = v7 + 7;
  }
  if (!a2) {
    return 0;
  }
  if (v6 < a2)
  {
    unint64_t v9 = ((v8
         + ((*(unsigned __int8 *)(v4 + 80)
           + ((((((v7 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)
           + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80))) & 0xFFFFFFFFFFFFFFF8)
       + 8;
    unsigned int v10 = a2 - v6;
    uint64_t v11 = v9 & 0xFFFFFFF8;
    if ((v9 & 0xFFFFFFF8) != 0) {
      unsigned int v12 = 2;
    }
    else {
      unsigned int v12 = v10 + 1;
    }
    if (v12 >= 0x10000) {
      unsigned int v13 = 4;
    }
    else {
      unsigned int v13 = 2;
    }
    if (v12 < 0x100) {
      unsigned int v13 = 1;
    }
    if (v12 >= 2) {
      uint64_t v14 = v13;
    }
    else {
      uint64_t v14 = 0;
    }
    switch(v14)
    {
      case 1:
        int v15 = *((unsigned __int8 *)a1 + v9);
        if (!v15) {
          break;
        }
        goto LABEL_24;
      case 2:
        int v15 = *(unsigned __int16 *)((char *)a1 + v9);
        if (v15) {
          goto LABEL_24;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x1882FE294);
      case 4:
        int v15 = *(_DWORD *)((char *)a1 + v9);
        if (!v15) {
          break;
        }
LABEL_24:
        int v17 = v15 - 1;
        if (v11)
        {
          int v17 = 0;
          LODWORD(v11) = *a1;
        }
        return v6 + (v11 | v17) + 1;
      default:
        break;
    }
  }
  if (v5 >= 0x7FFFFFFF) {
    return (*(uint64_t (**)(void))(v4 + 48))();
  }
  unint64_t v18 = *(void *)((((unint64_t)a1 + v7 + 7) & 0xFFFFFFFFFFFFFFF8) + 8);
  if (v18 >= 0xFFFFFFFF) {
    LODWORD(v18) = -1;
  }
  return (v18 + 1);
}

void storeEnumTagSinglePayload for HitTestTrace(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  uint64_t v10 = v9 + 7;
  if (!v7) {
    uint64_t v10 = v9 + 8;
  }
  size_t v11 = ((v10
        + ((*(unsigned __int8 *)(v6 + 80)
          + ((((((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)
          + 16) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))) & 0xFFFFFFFFFFFFFFF8)
      + 8;
  if (v8 >= a3)
  {
    int v15 = 0;
    int v16 = a2 - v8;
    if (a2 <= v8)
    {
LABEL_19:
      switch(v15)
      {
        case 1:
          a1[v11] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_32;
        case 2:
          *(_WORD *)&a1[v11] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_32;
        case 3:
          goto LABEL_44;
        case 4:
          *(_DWORD *)&a1[v11] = 0;
          goto LABEL_31;
        default:
LABEL_31:
          if (a2)
          {
LABEL_32:
            if (v7 < 0x7FFFFFFF)
            {
              int v20 = (void *)((unint64_t)&a1[v9 + 7] & 0xFFFFFFFFFFFFFFF8);
              if ((a2 & 0x80000000) != 0)
              {
                *int v20 = a2 ^ 0x80000000;
                v20[1] = 0;
              }
              else
              {
                v20[1] = a2 - 1;
              }
            }
            else
            {
              int v19 = *(void (**)(void))(v6 + 56);
              v19();
            }
          }
          break;
      }
      return;
    }
  }
  else
  {
    unsigned int v12 = a3 - v8;
    if (((v10
         + ((*(unsigned __int8 *)(v6 + 80)
           + ((((((v9 + 7) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8)
           + 16) & ~*(unsigned __int8 *)(v6 + 80))) & 0xFFFFFFF8) == 0xFFFFFFF8)
      unsigned int v13 = v12 + 1;
    else {
      unsigned int v13 = 2;
    }
    if (v13 >= 0x10000) {
      int v14 = 4;
    }
    else {
      int v14 = 2;
    }
    if (v13 < 0x100) {
      int v14 = 1;
    }
    if (v13 >= 2) {
      int v15 = v14;
    }
    else {
      int v15 = 0;
    }
    int v16 = a2 - v8;
    if (a2 <= v8) {
      goto LABEL_19;
    }
  }
  if (v11) {
    int v17 = 1;
  }
  else {
    int v17 = v16;
  }
  if (v11)
  {
    int v18 = ~v8 + a2;
    bzero(a1, v11);
    *(_DWORD *)a1 = v18;
  }
  switch(v15)
  {
    case 1:
      a1[v11] = v17;
      break;
    case 2:
      *(_WORD *)&a1[v11] = v17;
      break;
    case 3:
LABEL_44:
      __break(1u);
      JUMPOUT(0x1882FE4C8);
    case 4:
      *(_DWORD *)&a1[v11] = v17;
      break;
    default:
      return;
  }
}

uint64_t initializeBufferWithCopyOfBuffer for ResponderBasedHitTestTracing(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)a2;
  char v4 = *(unsigned char *)(a2 + 8);
  outlined copy of ResponderBasedHitTestTracing(*(void **)a2, v4);
  *(void *)a1 = v3;
  *(unsigned char *)(a1 + 8) = v4;
  return a1;
}

void destroy for ResponderBasedHitTestTracing(uint64_t a1)
{
}

uint64_t assignWithCopy for ResponderBasedHitTestTracing(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)a2;
  char v4 = *(unsigned char *)(a2 + 8);
  outlined copy of ResponderBasedHitTestTracing(*(void **)a2, v4);
  unsigned int v5 = *(void **)a1;
  char v6 = *(unsigned char *)(a1 + 8);
  *(void *)a1 = v3;
  *(unsigned char *)(a1 + 8) = v4;
  outlined consume of ResponderBasedHitTestTracing(v5, v6);
  return a1;
}

uint64_t assignWithTake for ResponderBasedHitTestTracing(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  char v4 = *((unsigned char *)a2 + 8);
  unsigned int v5 = *(void **)a1;
  char v6 = *(unsigned char *)(a1 + 8);
  *(void *)a1 = v3;
  *(unsigned char *)(a1 + 8) = v4;
  outlined consume of ResponderBasedHitTestTracing(v5, v6);
  return a1;
}

ValueMetadata *type metadata accessor for ResponderBasedHitTestTracing()
{
  return &type metadata for ResponderBasedHitTestTracing;
}

uint64_t type metadata accessor for DefaultFocusSectionResponder(uint64_t a1)
{
  return type metadata accessor for SortableTableHeaderButton(a1, type metadata singleton initialization cache for DefaultFocusSectionResponder);
}

uint64_t type metadata completion function for DefaultFocusSectionResponder()
{
  return swift_initClassMetadata2();
}

uint64_t DefaultFocusStateModifier.init(binding:value:priority:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9 = *a3;
  uint64_t v10 = type metadata accessor for FocusState.Binding();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 32))(a5, a1, v10);
  uint64_t v11 = type metadata accessor for DefaultFocusStateModifier();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a4 - 8) + 32))(a5 + *(int *)(v11 + 36), a2, a4);
  *(void *)(a5 + *(int *)(v11 + 40)) = v9;
  return result;
}

double static DefaultFocusStateModifier._makeView(modifier:inputs:body:)@<D0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(unint64_t *__return_ptr, unsigned int *, unint64_t *)@<X2>, uint64_t a4@<X4>, uint64_t a5@<X5>, double *a6@<X8>)
{
  uint64_t v62 = a5;
  uint64_t v61 = a4;
  uint64_t v107 = *MEMORY[0x1E4F143B8];
  unsigned int v55 = *a1;
  unint64_t v7 = *(void *)a2;
  int v8 = *(_DWORD *)(a2 + 8);
  uint64_t v9 = *(void *)(a2 + 16);
  unsigned int v10 = *(_DWORD *)(a2 + 24);
  unsigned int v11 = *(_DWORD *)(a2 + 28);
  int v12 = *(_DWORD *)(a2 + 32);
  int v13 = *(_DWORD *)(a2 + 36);
  uint64_t v15 = *(void *)(a2 + 40);
  unint64_t v14 = *(void *)(a2 + 48);
  int v17 = *(_DWORD *)(a2 + 56);
  int v16 = *(_DWORD *)(a2 + 60);
  int v18 = *(_DWORD *)(a2 + 64);
  int v19 = *(_DWORD *)(a2 + 68);
  int v21 = *(_DWORD *)(a2 + 72);
  int v20 = *(_DWORD *)(a2 + 76);
  int v22 = *(_DWORD *)(a2 + 80);
  unint64_t v92 = *(void *)a2;
  LODWORD(v93) = v8;
  uint64_t v94 = v9;
  unsigned int v73 = v10;
  unint64_t v95 = __PAIR64__(v11, v10);
  unsigned int v72 = v11;
  int v71 = v12;
  int v96 = v12;
  int v97 = v13;
  int v70 = v13;
  uint64_t v98 = v15;
  unint64_t v99 = v14;
  int v100 = v17;
  int v101 = v16;
  int v58 = v16;
  int v69 = v18;
  int v102 = v18;
  int v103 = v19;
  int v104 = v21;
  int v105 = v20;
  int v68 = v20;
  int v67 = v22;
  int v106 = v22;
  a3(&v74, a1, &v92);
  unint64_t v92 = v14;
  int v59 = v17;
  LODWORD(v93) = v17;
  if (PreferencesInputs.contains<A>(_:includeHostPreferences:)())
  {
    uint64_t v54 = a6;
    type metadata accessor for DefaultFocusSectionResponder(0);
    uint64_t v23 = swift_allocObject();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_retain();
    ViewTransform.init()();
    *(void *)(v23 + 256) = 0;
    *(void *)(v23 + 264) = 0;
    *(unsigned char *)(v23 + 272) = 1;
    *(void *)(v23 + 296) = 0;
    *(void *)(v23 + 284) = 0;
    *(void *)(v23 + 276) = 0;
    swift_release();
    uint64_t v64 = v7;
    unint64_t v92 = v7;
    int v63 = v8;
    LODWORD(v93) = v8;
    uint64_t v66 = v9;
    uint64_t v94 = v9;
    unint64_t v95 = __PAIR64__(v72, v73);
    int v96 = v71;
    int v97 = v70;
    uint64_t v65 = v15;
    uint64_t v98 = v15;
    unint64_t v99 = v14;
    unint64_t v60 = v14;
    int v100 = v59;
    int v101 = v58;
    int v102 = v69;
    int v103 = v19;
    int v53 = v19;
    int v57 = v21;
    int v104 = v21;
    int v105 = v68;
    int v106 = v67;
    uint64_t v24 = DefaultLayoutViewResponder.init(inputs:)();
    unsigned int v25 = v55;
    LODWORD(v92) = v55;
    type metadata accessor for DefaultFocusStateModifier();
    type metadata accessor for _GraphValue();
    _GraphValue.value.getter();
    closure #1 in static DefaultFocusStateModifier._makeView(modifier:inputs:body:)(1);
    AGGraphCreateOffsetAttribute2();
    unint64_t v56 = v24;
    swift_beginAccess();
    *(void *)(v24 + 276) = AGCreateWeakAttribute();
    swift_endAccess();
    LODWORD(v92) = v25;
    _GraphValue.value.getter();
    unsigned int v26 = v73;
    unsigned int v27 = v72;
    if (*(void *)(*(void *)(type metadata accessor for FocusState.Binding() - 8) + 64)) {
      closure #2 in static DefaultFocusStateModifier._makeView(modifier:inputs:body:)(1);
    }
    unsigned int OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
    LODWORD(v92) = v55;
    _GraphValue.value.getter();
    if (*(void *)(*(void *)(v61 - 8) + 64)) {
      closure #3 in static DefaultFocusStateModifier._makeView(modifier:inputs:body:)(1, v61);
    }
    uint64_t v29 = AGGraphCreateOffsetAttribute2();
    unint64_t v92 = __PAIR64__(v29, OffsetAttribute2);
    MEMORY[0x1F4188790](v29);
    uint64_t DefaultFocusResponder = type metadata accessor for QueryDefaultFocusResponder();
    uint64_t WitnessTable = swift_getWitnessTable();
    type metadata accessor for BaseFocusResponder?(0, (unint64_t *)&lazy cache variable for type metadata for Attribute<BaseFocusResponder?>, (uint64_t (*)(uint64_t))type metadata accessor for BaseFocusResponder?, MEMORY[0x1E4F4E740]);
    _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v92, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TA_39, (uint64_t)&v49, DefaultFocusResponder, MEMORY[0x1E4FBC248], v30, MEMORY[0x1E4FBC278], v31);
    uint64_t v32 = (uint64_t *)(v56 + 284);
    swift_beginAccess();
    *uint64_t v32 = AGCreateWeakAttribute();
    swift_endAccess();
    unint64_t v33 = v64;
    unint64_t v92 = v64;
    int v34 = v63;
    LODWORD(v93) = v63;
    uint64_t v35 = v66;
    uint64_t v94 = v66;
    unint64_t v95 = __PAIR64__(v27, v26);
    unsigned int v36 = v27;
    int v96 = v71;
    int v97 = v70;
    int v37 = v70;
    uint64_t v98 = v65;
    unint64_t v99 = v60;
    int v38 = v59;
    int v39 = v58;
    int v100 = v59;
    int v101 = v58;
    int v40 = v53;
    int v102 = v69;
    int v103 = v53;
    int v104 = v57;
    int v105 = v68;
    int v106 = v67;
    LODWORD(v62) = _ViewInputs.transform.getter();
    unint64_t v92 = v33;
    LODWORD(v93) = v34;
    uint64_t v94 = v35;
    unint64_t v95 = __PAIR64__(v36, v26);
    int v41 = v71;
    int v96 = v71;
    int v97 = v37;
    uint64_t v42 = v65;
    unint64_t v43 = v60;
    uint64_t v98 = v65;
    unint64_t v99 = v60;
    int v100 = v38;
    int v101 = v39;
    int v44 = v69;
    int v102 = v69;
    int v103 = v40;
    int v45 = v57;
    int v104 = v57;
    int v105 = v68;
    int v106 = v67;
    LODWORD(v61) = _ViewInputs.animatedPosition()();
    unint64_t v92 = v64;
    LODWORD(v93) = v63;
    uint64_t v94 = v66;
    unint64_t v95 = __PAIR64__(v72, v73);
    int v96 = v41;
    int v97 = v37;
    uint64_t v98 = v42;
    unint64_t v99 = v43;
    int v100 = v38;
    int v101 = v39;
    int v102 = v44;
    int v103 = v40;
    LODWORD(v42) = v40;
    int v46 = v68;
    int v104 = v45;
    int v105 = v68;
    int v47 = v67;
    int v106 = v67;
    unsigned int v55 = _ViewInputs.animatedSize()();
    unint64_t v92 = v74;
    unint64_t v93 = *(void *)&v75;
    unsigned int v52 = _ViewOutputs.viewResponders()();
    unint64_t v92 = v64;
    LODWORD(v93) = v63;
    uint64_t v94 = v66;
    unint64_t v95 = __PAIR64__(v72, v73);
    int v96 = v41;
    int v97 = v70;
    uint64_t v98 = v65;
    unint64_t v99 = v43;
    int v100 = v38;
    int v101 = v39;
    int v102 = v44;
    int v103 = v42;
    int v104 = v45;
    int v105 = v46;
    int v106 = v47;
    swift_getKeyPath();
    LODWORD(v32) = _ViewInputs.mapEnvironment<A>(_:)();
    swift_release();
    unint64_t v92 = __PAIR64__(v61, v62);
    unint64_t v93 = __PAIR64__(v52, v55);
    LODWORD(v94) = v32;
    unint64_t v95 = v56;
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    type metadata accessor for BaseFocusResponder?(0, (unint64_t *)&lazy cache variable for type metadata for [ViewResponder], MEMORY[0x1E4F3F7E8], MEMORY[0x1E4FBB320]);
    lazy protocol witness table accessor for type DefaultFocusSectionResponderFilter and conformance DefaultFocusSectionResponderFilter();
    swift_retain();
    LODWORD(v32) = Attribute.init<A>(body:value:flags:update:)();
    swift_release();
    uint64_t v76 = v64;
    int v77 = v63;
    uint64_t v78 = v66;
    unsigned int v79 = v73;
    unsigned int v80 = v72;
    int v81 = v71;
    int v82 = v70;
    uint64_t v83 = v65;
    unint64_t v84 = v60;
    int v85 = v38;
    int v86 = v39;
    int v87 = v69;
    int v88 = v42;
    int v89 = v57;
    int v90 = v46;
    int v91 = v47;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    UIKitHostedFocusItemLifecycle.init(inputs:responder:)(&v76, (int)v32, (uint64_t)&v92);
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    lazy protocol witness table accessor for type UIKitHostedFocusItemLifecycle and conformance UIKitHostedFocusItemLifecycle();
    Attribute.init<A>(body:value:flags:update:)();
    outlined destroy of UIKitHostedFocusItemLifecycle((uint64_t)&v92);
    static AGAttributeFlags.removable.getter();
    static AGAttributeFlags.transactional.getter();
    AGGraphSetFlags();
    LOBYTE(v92) = 0;
    _ViewOutputs.subscript.setter();
    swift_release();
    a6 = v54;
  }
  *(void *)a6 = v74;
  double result = v75;
  a6[1] = v75;
  return result;
}

uint64_t DefaultFocusSectionResponder.__allocating_init(inputs:)()
{
  return DefaultFocusSectionResponder.init(inputs:)();
}

uint64_t closure #1 in static DefaultFocusStateModifier._makeView(modifier:inputs:body:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for DefaultFocusStateModifier();
  uint64_t v3 = a1 + *(int *)(v2 + 40);
  void v7[2] = v2;
  uint64_t v4 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v3, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply, (uint64_t)v7, (uint64_t)&type metadata for DefaultFocusEvaluationPriority, MEMORY[0x1E4FBC248], v4, MEMORY[0x1E4FBC278], v5);
  return v7[5];
}

uint64_t closure #2 in static DefaultFocusStateModifier._makeView(modifier:inputs:body:)(uint64_t a1)
{
  _OWORD v5[2] = type metadata accessor for DefaultFocusStateModifier();
  uint64_t v6 = type metadata accessor for FocusState.Binding();
  uint64_t v2 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(a1, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply, (uint64_t)v5, v6, MEMORY[0x1E4FBC248], v2, MEMORY[0x1E4FBC278], v3);
  return v7;
}

uint64_t closure #3 in static DefaultFocusStateModifier._makeView(modifier:inputs:body:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for DefaultFocusStateModifier();
  uint64_t v5 = a1 + *(int *)(v4 + 36);
  void v9[2] = v4;
  void v9[3] = a2;
  uint64_t v6 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v5, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply, (uint64_t)v9, a2, MEMORY[0x1E4FBC248], v6, MEMORY[0x1E4FBC278], v7);
  return v9[5];
}

double protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance DefaultFocusStateModifier<A>@<D0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(unint64_t *__return_ptr, unsigned int *, unint64_t *)@<X2>, uint64_t a4@<X4>, double *a5@<X8>)
{
  return static DefaultFocusStateModifier._makeView(modifier:inputs:body:)(a1, a2, a3, *(void *)(a4 + 16), *(void *)(a4 + 24), a5);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance DefaultFocusStateModifier<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F40FF3F8](a1, a2, a3, a4, a5, WitnessTable);
}

uint64_t DefaultFocusSectionResponderFilter.updateValue()()
{
  AGGraphGetValue();
  char v2 = v1;
  uint64_t Value = (uint64_t *)AGGraphGetValue();
  char v5 = v4;
  uint64_t v6 = *Value;
  uint64_t v7 = Value[1];
  uint64_t v8 = Value[2];
  uint64_t v9 = Value[3];
  uint64_t v10 = Value[4];
  AGGraphGetValue();
  char v12 = v11;
  int v13 = (char *)AGGraphGetValue();
  char v15 = v14;
  char v16 = *v13;
  uint64_t v17 = *(void *)(v0 + 24);
  type metadata accessor for BaseFocusResponder?(0, (unint64_t *)&lazy cache variable for type metadata for [ViewResponder], MEMORY[0x1E4F3F7E8], MEMORY[0x1E4FBB320]);
  AGGraphGetValue();
  if (v18)
  {
    swift_retain();
    swift_bridgeObjectRetain_n();
    MultiViewResponder.children.setter();
    swift_bridgeObjectRelease();
    if (v2)
    {
LABEL_9:
      *(void *)&long long v28 = v7;
      *((void *)&v28 + 1) = v8;
      *(void *)&long long v29 = v9;
      *((void *)&v29 + 1) = v10;
      uint64_t v19 = swift_retain();
      *(double *)&unint64_t v20 = MEMORY[0x18C10C240](v19);
      ViewTransform.appendPosition(_:)((CGPoint)__PAIR128__(v21, v20));
      *(void *)(v17 + 216) = v6;
      *(_OWORD *)(v17 + 224) = v28;
      *(_OWORD *)(v17 + 240) = v29;
      swift_retain();
      uint64_t v22 = swift_release();
      double v23 = MEMORY[0x18C114450](v22);
      uint64_t v25 = v24;
      swift_release();
      *(double *)(v17 + 256) = v23;
      *(void *)(v17 + 264) = v25;
      *(unsigned char *)(v17 + 272) = v16;
      goto LABEL_10;
    }
  }
  else
  {
    swift_retain();
    if (v2) {
      goto LABEL_9;
    }
  }
  if ((v5 & 1) != 0 || (v12 & 1) != 0 || (v15 & 1) != 0 || !AGGraphGetOutputValue()) {
    goto LABEL_9;
  }
LABEL_10:
  if (AGGraphGetOutputValue())
  {
    return swift_release();
  }
  else
  {
    type metadata accessor for _ContiguousArrayStorage<AccessibilityVisibility>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>, MEMORY[0x1E4FBC838] + 8, MEMORY[0x1E4FBBE00]);
    uint64_t v27 = swift_allocObject();
    *(_OWORD *)(v27 + 16) = xmmword_188351940;
    *(void *)(v27 + 32) = v17;
    specialized Array._endMutation()();
    swift_retain();
    AGGraphSetOutputValue();
    swift_bridgeObjectRelease();
    return swift_release();
  }
}

uint64_t QueryDefaultFocusResponder.binding.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for FocusState.Binding();
  uint64_t Value = AGGraphGetValue();
  char v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16);

  return v4(a1, Value, v2);
}

uint64_t QueryDefaultFocusResponder.value.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a2 - 8);
  MEMORY[0x1F4188790](a1);
  int v38 = (char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for FocusState.Binding();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  char v11 = (char *)&v27 - v10;
  uint64_t v12 = type metadata accessor for FocusStore.Entry();
  uint64_t v13 = type metadata accessor for Optional();
  uint64_t v28 = *(void *)(v13 - 8);
  uint64_t v29 = v13;
  MEMORY[0x1F4188790](v13);
  char v15 = (char *)&v27 - v14;
  uint64_t v36 = a3;
  QueryDefaultFocusResponder.binding.getter((uint64_t)v11);
  specialized FocusState.Binding.location.getter();
  char v16 = *(void (**)(char *, uint64_t))(v9 + 8);
  swift_retain();
  uint64_t v32 = v8;
  unint64_t v33 = v16;
  uint64_t v34 = v9 + 8;
  v16(v11, v8);
  uint64_t v17 = (uint64_t)v38;
  uint64_t v35 = a1;
  uint64_t Value = AGGraphGetValue();
  uint64_t v19 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16);
  v19(v17, Value, a2);
  FocusStoreLocation.findEntry(with:)(v17, (uint64_t)v15);
  swift_release();
  unint64_t v20 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
  uint64_t v37 = v6 + 8;
  v20(v17, a2);
  uint64_t v21 = *(void *)(v12 - 8);
  int v22 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v21 + 48))(v15, 1, v12);
  uint64_t v30 = v20;
  uint64_t v31 = v19;
  if (v22 == 1)
  {
    (*(void (**)(char *, uint64_t))(v28 + 8))(v15, v29);
LABEL_4:
    QueryDefaultFocusResponder.binding.getter((uint64_t)v11);
    uint64_t v24 = v32;
    specialized FocusState.Binding.location.getter();
    swift_retain();
    v33(v11, v24);
    uint64_t v25 = AGGraphGetValue();
    v31(v17, v25, a2);
    FocusStoreLocation.deferUpdate(_:)(v17);
    swift_release();
    v30(v17, a2);
    return 0;
  }
  uint64_t v23 = FocusStore.Entry.responder.getter(v12);
  (*(void (**)(char *, uint64_t))(v21 + 8))(v15, v12);
  if (!v23) {
    goto LABEL_4;
  }
  return v23;
}

uint64_t protocol witness for Rule.value.getter in conformance QueryDefaultFocusResponder<A>@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = QueryDefaultFocusResponder.value.getter(*v2, *(void *)(a1 + 16), *(void *)(a1 + 24));
  *a2 = result;
  a2[1] = v5;
  return result;
}

uint64_t *closure #1 in DefaultFocusSectionResponder.priority.getter@<X0>(uint64_t a1@<X8>)
{
  swift_beginAccess();
  uint64_t result = (uint64_t *)AGGraphGetWeakValue();
  if (result) {
    uint64_t v3 = *result;
  }
  else {
    uint64_t v3 = 0;
  }
  *(void *)a1 = v3;
  *(unsigned char *)(a1 + 8) = result == 0;
  return result;
}

long long *closure #1 in DefaultFocusSectionResponder.responder.getter@<X0>(long long *a1@<X8>)
{
  swift_beginAccess();
  type metadata accessor for BaseFocusResponder?(0);
  uint64_t result = (long long *)AGGraphGetWeakValue();
  if (result)
  {
    long long v4 = *result;
    uint64_t result = (long long *)swift_retain();
    long long v3 = v4;
  }
  else
  {
    long long v3 = xmmword_18834FC50;
  }
  *a1 = v3;
  return result;
}

uint64_t DefaultFocusSectionResponder.init(inputs:)()
{
  swift_retain();
  ViewTransform.init()();
  *(void *)(v0 + 256) = 0;
  *(void *)(v0 + 264) = 0;
  *(unsigned char *)(v0 + 272) = 1;
  *(void *)(v0 + 296) = 0;
  *(void *)(v0 + 284) = 0;
  *(void *)(v0 + 276) = 0;
  swift_release();
  return DefaultLayoutViewResponder.init(inputs:)();
}

uint64_t DefaultFocusSectionResponder.__allocating_init(inputs:viewSubgraph:)()
{
  return DefaultFocusSectionResponder.init(inputs:viewSubgraph:)();
}

uint64_t DefaultFocusSectionResponder.init(inputs:viewSubgraph:)()
{
  swift_retain();
  ViewTransform.init()();
  *(void *)(v0 + 256) = 0;
  *(void *)(v0 + 264) = 0;
  *(unsigned char *)(v0 + 272) = 1;
  *(void *)(v0 + 296) = 0;
  *(void *)(v0 + 284) = 0;
  *(void *)(v0 + 276) = 0;
  swift_release();
  return DefaultLayoutViewResponder.init(inputs:viewSubgraph:)();
}

void DefaultFocusSectionResponder.__ivar_destroyer()
{
  swift_release();
  char v1 = *(void **)(v0 + 296);
}

uint64_t DefaultFocusSectionResponder.__deallocating_deinit()
{
  uint64_t v0 = DefaultLayoutViewResponder.deinit();
  swift_release();

  return swift_deallocClassInstance();
}

uint64_t ObjC metadata update function for DefaultFocusSectionResponder()
{
  return type metadata accessor for DefaultFocusSectionResponder(0);
}

uint64_t protocol witness for BaseFocusResponder.platformItem.getter in conformance DefaultFocusSectionResponder()
{
  specialized DefaultFocusSectionResponder.hostedItem.getter();

  return swift_unknownObjectRetain();
}

uint64_t protocol witness for AnyUIKitHostedFocusItemResponder.hostedItem.getter in conformance DefaultFocusSectionResponder()
{
  return swift_unknownObjectRetain();
}

Class @objc UIKitDefaultFocusSectionResponderItem.preferredFocusEnvironments.getter(void *a1)
{
  id v1 = a1;
  UIKitDefaultFocusSectionResponderItem.preferredFocusEnvironments.getter();

  type metadata accessor for UIFocusEnvironment();
  v2.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();

  return v2.super.isa;
}

uint64_t UIKitDefaultFocusSectionResponderItem.preferredFocusEnvironments.getter()
{
  if (!swift_weakLoadStrong()) {
    return MEMORY[0x1E4FBC860];
  }
  type metadata accessor for BaseFocusResponder?(0, (unint64_t *)&lazy cache variable for type metadata for BaseFocusResponder??, (uint64_t (*)(uint64_t))type metadata accessor for BaseFocusResponder?, MEMORY[0x1E4FBB718]);
  static Update.ensure<A>(_:)();
  uint64_t v0 = v35[0];
  if (v35[0] < 2uLL) {
    goto LABEL_18;
  }
  type metadata accessor for ViewResponder();
  uint64_t v1 = dynamic_cast_existential_1_superclass_conditional(v35[0]);
  if (!v1)
  {
    outlined consume of Transaction?(v35[0]);
LABEL_18:
    swift_release();
    return MEMORY[0x1E4FBC860];
  }
  long long v3 = (void *)v1;
  uint64_t v4 = v2;
  swift_release();
  uint64_t v5 = (*(uint64_t (**)(void, uint64_t))(v4 + 8))(*v3, v4);
  if (!v5)
  {
LABEL_20:
    outlined consume of Transaction?(v35[0]);
    return MEMORY[0x1E4FBC860];
  }
  uint64_t v6 = v5;
  swift_getObjectType();
  uint64_t v7 = swift_conformsToProtocol2();
  if (v7) {
    uint64_t v8 = v7;
  }
  else {
    uint64_t v8 = 0;
  }
  if (v7) {
    uint64_t v9 = v6;
  }
  else {
    uint64_t v9 = 0;
  }
  if (!v9)
  {
    swift_unknownObjectRelease();
    goto LABEL_20;
  }
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v11 = *(void *)(v8 + 8);
  uint64_t v12 = *(void (**)(uint64_t, uint64_t))(v11 + 56);
  swift_unknownObjectRetain();
  v12(ObjectType, v11);
  unint64_t v13 = (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 32))(ObjectType, v8);
  uint64_t v14 = v13;
  unint64_t v15 = v13 >> 62;
  if (!(v13 >> 62))
  {
    if (*(void *)((v13 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
      goto LABEL_30;
    }
LABEL_14:
    memset(v35, 0, 48);
    v35[6] = 1;
    int v36 = 0;
    MEMORY[0x1F4188790](v13);
    MEMORY[0x1F4188790](v16);
    swift_retain();
    dispatch thunk of ResponderNode.visit(applying:)();
    outlined consume of Transaction?(v0);
    outlined init with copy of FocusItem?((uint64_t)v35, (uint64_t)v31);
    if (v32 || v33 != 1)
    {
      outlined init with take of FocusItem((uint64_t)v31, (uint64_t)v34);
      swift_beginAccess();
      uint64_t v18 = MEMORY[0x18C119DF0](v3 + 2);
      if (v18)
      {
        uint64_t v19 = v18;
        swift_getObjectType();
        type metadata accessor for UIView();
        uint64_t v20 = dynamic_cast_existential_1_superclass_conditional(v19);
        if (v20)
        {
          uint64_t v21 = (void *)v20;
          swift_unknownObjectRetain();
          int v22 = specialized static FocusBridge.representedFocusItem(_:in:)((uint64_t)v34, v21);
          if (v22)
          {
            uint64_t v23 = v22;
            swift_bridgeObjectRelease();
            type metadata accessor for _ContiguousArrayStorage<AccessibilityVisibility>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>, MEMORY[0x1E4FBC838] + 8, MEMORY[0x1E4FBBE00]);
            uint64_t v24 = swift_allocObject();
            *(_OWORD *)(v24 + 16) = xmmword_188351940;
            *(void *)(v24 + 32) = v23;
            uint64_t v30 = v24;
            specialized Array._endMutation()();
            uint64_t v14 = v30;
            swift_unknownObjectRelease_n();
            swift_unknownObjectRelease();
            outlined consume of Transaction?(v0);
            swift_unknownObjectRelease();
            outlined destroy of FocusItem((uint64_t)v34);
            outlined destroy of FocusItem?((uint64_t)v35);
            return v14;
          }
          outlined destroy of FocusItem((uint64_t)v34);
          swift_unknownObjectRelease_n();
          goto LABEL_29;
        }
        swift_unknownObjectRelease();
      }
      outlined destroy of FocusItem((uint64_t)v34);
    }
    else
    {
      outlined destroy of FocusItem?((uint64_t)v31);
    }
LABEL_29:
    outlined destroy of FocusItem?((uint64_t)v35);
    goto LABEL_30;
  }
  swift_bridgeObjectRetain();
  uint64_t v29 = _CocoaArrayWrapper.endIndex.getter();
  unint64_t v13 = swift_bridgeObjectRelease();
  if (!v29) {
    goto LABEL_14;
  }
LABEL_30:
  if (v15)
  {
    type metadata accessor for UIFocusEnvironment();
    swift_bridgeObjectRetain();
    uint64_t v26 = _bridgeCocoaArray<A>(_:)();
    swift_unknownObjectRelease_n();
    swift_bridgeObjectRelease_n();
    outlined consume of Transaction?(v0);
    return v26;
  }
  else
  {
    uint64_t v25 = v14 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain();
    dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter();
    type metadata accessor for UIFocusEnvironment();
    if (swift_dynamicCastMetatype() || (uint64_t v27 = *(void *)((v14 & 0xFFFFFFFFFFFFFF8) + 0x10)) == 0)
    {
LABEL_32:
      swift_bridgeObjectRelease();
      swift_unknownObjectRelease_n();
    }
    else
    {
      uint64_t v28 = v25 + 32;
      while (1)
      {
        uint64_t v37 = &unk_1ED4BC0C8;
        if (!swift_dynamicCastObjCProtocolConditional()) {
          break;
        }
        v28 += 8;
        if (!--v27) {
          goto LABEL_32;
        }
      }
      swift_unknownObjectRelease_n();
      swift_bridgeObjectRelease();
      uint64_t v14 = v25 | 1;
    }
    outlined consume of Transaction?(v0);
  }
  return v14;
}

uint64_t closure #1 in UIKitDefaultFocusSectionResponderItem.preferredFocusEnvironments.getter@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char *a4@<X8>)
{
  (*(void (**)(void *__return_ptr, void))(a2 + 16))(v9, *a1);
  if (v9[5]) {
    BOOL v6 = 0;
  }
  else {
    BOOL v6 = v9[6] == 1;
  }
  if (v6)
  {
    uint64_t result = outlined destroy of FocusItem?((uint64_t)v9);
    char v8 = 0;
  }
  else
  {
    outlined init with take of FocusItem((uint64_t)v9, (uint64_t)v10);
    outlined destroy of FocusItem?(a3);
    uint64_t result = outlined init with take of FocusItem((uint64_t)v10, a3);
    char v8 = 2;
  }
  *a4 = v8;
  return result;
}

uint64_t @objc UIKitDefaultFocusSectionResponderItem._focusGuideBehavior(forFocusMovement:)(void *a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  id v5 = a1;
  uint64_t v6 = specialized UIKitDefaultFocusSectionResponderItem._focusGuideBehavior(forFocusMovement:)();

  return v6;
}

uint64_t type metadata accessor for UIKitDefaultFocusSectionResponderItem(uint64_t a1)
{
  return type metadata accessor for SortableTableHeaderButton(a1, (uint64_t *)&type metadata singleton initialization cache for UIKitDefaultFocusSectionResponderItem);
}

uint64_t ObjC metadata update function for UIKitDefaultFocusSectionResponderItem()
{
  return type metadata accessor for UIKitDefaultFocusSectionResponderItem(0);
}

uint64_t type metadata completion function for DefaultFocusStateModifier()
{
  uint64_t result = type metadata accessor for Binding();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for DefaultFocusStateModifier(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(_DWORD *)(v5 + 80);
  uint64_t v7 = *(void *)(v5 + 64);
  uint64_t v8 = ((v6 + 16) & ~v6) + v7 + v6;
  uint64_t v9 = v7 + 7;
  unint64_t v10 = ((v7 + 7 + (v8 & ~v6)) & 0xFFFFFFFFFFFFFFF8) + 8;
  int v11 = *(_DWORD *)(v5 + 80) & 0x100000;
  uint64_t v12 = *a2;
  *a1 = *a2;
  if (v6 > 7 || v11 != 0 || v10 > 0x18)
  {
    a1 = (uint64_t *)(v12 + ((v6 & 0xF8 ^ 0x1F8) & (v6 + 16)));
    swift_retain();
  }
  else
  {
    uint64_t v16 = ~v6;
    uint64_t v17 = (void *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v18 = (void *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
    *uint64_t v17 = *v18;
    uint64_t v23 = ((unint64_t)v17 + v6 + 8) & ~v6;
    uint64_t v19 = ((unint64_t)v18 + v6 + 8) & ~v6;
    uint64_t v20 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
    swift_retain();
    swift_retain();
    v20(v23, v19, v4);
    unint64_t v21 = ((unint64_t)a2 + v8) & v16;
    v20(((unint64_t)a1 + v8) & v16, v21, v4);
    *(void *)((v9 + (((unint64_t)a1 + v8) & v16)) & 0xFFFFFFFFFFFFFFF8) = *(void *)((v9 + v21) & 0xFFFFFFFFFFFFFFF8);
  }
  return a1;
}

void *initializeWithCopy for DefaultFocusStateModifier(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v5 = (void *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v6 = (void *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v5 = *v6;
  uint64_t v7 = *(void *)(a3 + 16);
  uint64_t v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 16);
  uint64_t v9 = *(void *)(v7 - 8) + 16;
  uint64_t v10 = *(unsigned __int8 *)(*(void *)(v7 - 8) + 80);
  uint64_t v11 = ((unint64_t)v5 + v10 + 8) & ~v10;
  uint64_t v12 = ((unint64_t)v6 + v10 + 8) & ~v10;
  swift_retain();
  swift_retain();
  v8(v11, v12, v7);
  uint64_t v13 = *(void *)(v9 + 48);
  uint64_t v14 = ((v10 + 16) & ~v10) + v13 + v10;
  unint64_t v15 = ((unint64_t)a1 + v14) & ~v10;
  unint64_t v16 = ((unint64_t)a2 + v14) & ~v10;
  v8(v15, v16, v7);
  *(void *)((v13 + 7 + v15) & 0xFFFFFFFFFFFFFFF8) = *(void *)((v13 + 7 + v16) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

void *assignWithCopy for DefaultFocusStateModifier(void *a1, void *a2, uint64_t a3)
{
  unint64_t v6 = (unint64_t)a2 + 15;
  *a1 = *a2;
  swift_retain();
  swift_release();
  uint64_t v7 = (void *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  v6 &= 0xFFFFFFFFFFFFFFF8;
  *uint64_t v7 = *(void *)v6;
  swift_retain();
  swift_release();
  uint64_t v8 = *(void *)(a3 + 16);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(void (**)(unint64_t, unint64_t, uint64_t))(v9 + 24);
  uint64_t v11 = v9 + 24;
  uint64_t v12 = *(unsigned __int8 *)(v9 + 80);
  v10(((unint64_t)v7 + v12 + 8) & ~v12, (v12 + 8 + v6) & ~v12, v8);
  uint64_t v13 = *(void *)(v11 + 40);
  uint64_t v14 = ((v12 + 16) & ~v12) + v13 + v12;
  unint64_t v15 = ((unint64_t)a1 + v14) & ~v12;
  unint64_t v16 = ((unint64_t)a2 + v14) & ~v12;
  v10(v15, v16, v8);
  *(void *)((v13 + 7 + v15) & 0xFFFFFFFFFFFFFFF8) = *(void *)((v13 + 7 + v16) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

void *initializeWithTake for DefaultFocusStateModifier(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v5 = (void *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v6 = (void *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v5 = *v6;
  uint64_t v7 = *(void *)(a3 + 16);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(void (**)(unint64_t, unint64_t, uint64_t))(v8 + 32);
  uint64_t v10 = v8 + 32;
  uint64_t v11 = *(unsigned __int8 *)(v8 + 80);
  v9(((unint64_t)v5 + v11 + 8) & ~v11, ((unint64_t)v6 + v11 + 8) & ~v11, v7);
  uint64_t v12 = *(void *)(v10 + 32);
  uint64_t v13 = ((v11 + 16) & ~v11) + v12 + v11;
  unint64_t v14 = ((unint64_t)a1 + v13) & ~v11;
  unint64_t v15 = ((unint64_t)a2 + v13) & ~v11;
  v9(v14, v15, v7);
  *(void *)((v12 + 7 + v14) & 0xFFFFFFFFFFFFFFF8) = *(void *)((v12 + 7 + v15) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

void *assignWithTake for DefaultFocusStateModifier(void *a1, void *a2, uint64_t a3)
{
  unint64_t v6 = (unint64_t)a2 + 15;
  *a1 = *a2;
  swift_release();
  uint64_t v7 = (void *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  v6 &= 0xFFFFFFFFFFFFFFF8;
  *uint64_t v7 = *(void *)v6;
  swift_release();
  uint64_t v8 = *(void *)(a3 + 16);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(void (**)(unint64_t, unint64_t, uint64_t))(v9 + 40);
  uint64_t v11 = v9 + 40;
  uint64_t v12 = *(unsigned __int8 *)(v9 + 80);
  v10(((unint64_t)v7 + v12 + 8) & ~v12, (v12 + 8 + v6) & ~v12, v8);
  uint64_t v13 = *(void *)(v11 + 24);
  uint64_t v14 = ((v12 + 16) & ~v12) + v13 + v12;
  unint64_t v15 = ((unint64_t)a1 + v14) & ~v12;
  unint64_t v16 = ((unint64_t)a2 + v14) & ~v12;
  v10(v15, v16, v8);
  *(void *)((v13 + 7 + v15) & 0xFFFFFFFFFFFFFFF8) = *(void *)((v13 + 7 + v16) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

uint64_t getEnumTagSinglePayload for DefaultFocusStateModifier(_DWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  if (v5 <= 0x7FFFFFFF) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  if (v8 < a2)
  {
    uint64_t v7 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
    unint64_t v9 = ((v7 + ((v7 + v6 + ((v6 + 16) & ~v6)) & ~v6) + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
    unsigned int v10 = a2 - v8;
    uint64_t v11 = v9 & 0xFFFFFFF8;
    if ((v9 & 0xFFFFFFF8) != 0) {
      unsigned int v12 = 2;
    }
    else {
      unsigned int v12 = v10 + 1;
    }
    if (v12 >= 0x10000) {
      unsigned int v13 = 4;
    }
    else {
      unsigned int v13 = 2;
    }
    if (v12 < 0x100) {
      unsigned int v13 = 1;
    }
    if (v12 >= 2) {
      uint64_t v14 = v13;
    }
    else {
      uint64_t v14 = 0;
    }
    switch(v14)
    {
      case 1:
        int v15 = *((unsigned __int8 *)a1 + v9);
        if (!v15) {
          break;
        }
        goto LABEL_22;
      case 2:
        int v15 = *(unsigned __int16 *)((char *)a1 + v9);
        if (v15) {
          goto LABEL_22;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x188300F44);
      case 4:
        int v15 = *(_DWORD *)((char *)a1 + v9);
        if (!v15) {
          break;
        }
LABEL_22:
        int v17 = v15 - 1;
        if (v11)
        {
          int v17 = 0;
          LODWORD(v11) = *a1;
        }
        return v8 + (v11 | v17) + 1;
      default:
        break;
    }
  }
  uint64_t v18 = (unint64_t *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  if ((v5 & 0x80000000) != 0) {
    return (*(uint64_t (**)(unint64_t))(v4 + 48))(((unint64_t)v18 + v6 + 8) & ~v6);
  }
  unint64_t v19 = *v18;
  if (v19 >= 0xFFFFFFFF) {
    LODWORD(v19) = -1;
  }
  return (v19 + 1);
}

void storeEnumTagSinglePayload for DefaultFocusStateModifier(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(unsigned __int8 *)(v6 + 80);
  size_t v10 = ((*(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64)
        + ((*(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64) + v9 + ((v9 + 16) & ~v9)) & ~v9)
        + 7) & 0xFFFFFFFFFFFFFFF8)
      + 8;
  if (v8 >= a3)
  {
    int v14 = 0;
    int v15 = a2 - v8;
    if (a2 <= v8)
    {
LABEL_17:
      switch(v14)
      {
        case 1:
          a1[v10] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_30;
        case 2:
          *(_WORD *)&a1[v10] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_30;
        case 3:
          goto LABEL_43;
        case 4:
          *(_DWORD *)&a1[v10] = 0;
          goto LABEL_29;
        default:
LABEL_29:
          if (a2)
          {
LABEL_30:
            uint64_t v18 = (void *)((unint64_t)(a1 + 15) & 0xFFFFFFFFFFFFFFF8);
            if ((v7 & 0x80000000) != 0)
            {
              uint64_t v20 = *(void (**)(unint64_t))(v6 + 56);
              v20(((unint64_t)v18 + v9 + 8) & ~v9);
            }
            else
            {
              if ((a2 & 0x80000000) != 0) {
                uint64_t v19 = a2 ^ 0x80000000;
              }
              else {
                uint64_t v19 = a2 - 1;
              }
              *uint64_t v18 = v19;
            }
          }
          break;
      }
      return;
    }
  }
  else
  {
    unsigned int v11 = a3 - v8;
    if (((*(_DWORD *)(*(void *)(*(void *)(a4 + 16) - 8) + 64)
         + ((*(_DWORD *)(*(void *)(*(void *)(a4 + 16) - 8) + 64) + v9 + ((v9 + 16) & ~v9)) & ~v9)
         + 7) & 0xFFFFFFF8) == 0xFFFFFFF8)
      unsigned int v12 = v11 + 1;
    else {
      unsigned int v12 = 2;
    }
    if (v12 >= 0x10000) {
      int v13 = 4;
    }
    else {
      int v13 = 2;
    }
    if (v12 < 0x100) {
      int v13 = 1;
    }
    if (v12 >= 2) {
      int v14 = v13;
    }
    else {
      int v14 = 0;
    }
    int v15 = a2 - v8;
    if (a2 <= v8) {
      goto LABEL_17;
    }
  }
  if (((*(_DWORD *)(*(void *)(*(void *)(a4 + 16) - 8) + 64)
       + ((*(_DWORD *)(*(void *)(*(void *)(a4 + 16) - 8) + 64) + v9 + ((v9 + 16) & ~v9)) & ~v9)
       + 7) & 0xFFFFFFF8) == 0xFFFFFFF8)
    int v16 = v15;
  else {
    int v16 = 1;
  }
  if (((*(_DWORD *)(*(void *)(*(void *)(a4 + 16) - 8) + 64)
       + ((*(_DWORD *)(*(void *)(*(void *)(a4 + 16) - 8) + 64) + v9 + ((v9 + 16) & ~v9)) & ~v9)
       + 7) & 0xFFFFFFF8) != 0xFFFFFFF8)
  {
    int v17 = ~v8 + a2;
    bzero(a1, v10);
    *(_DWORD *)a1 = v17;
  }
  switch(v14)
  {
    case 1:
      a1[v10] = v16;
      break;
    case 2:
      *(_WORD *)&a1[v10] = v16;
      break;
    case 3:
LABEL_43:
      __break(1u);
      JUMPOUT(0x18830115CLL);
    case 4:
      *(_DWORD *)&a1[v10] = v16;
      break;
    default:
      return;
  }
}

uint64_t type metadata accessor for DefaultFocusStateModifier()
{
  return __swift_instantiateGenericMetadata();
}

_UNKNOWN **base witness table accessor for ViewModifier in DefaultFocusStateModifier<A>()
{
  return &protocol witness table for DefaultFocusStateModifier<A>;
}

uint64_t type metadata accessor for QueryDefaultFocusResponder()
{
  return __swift_instantiateGenericMetadata();
}

void type metadata accessor for BaseFocusResponder?(uint64_t a1)
{
}

unint64_t type metadata accessor for BaseFocusResponder()
{
  unint64_t result = lazy cache variable for type metadata for BaseFocusResponder;
  if (!lazy cache variable for type metadata for BaseFocusResponder)
  {
    unint64_t result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for BaseFocusResponder);
  }
  return result;
}

void type metadata accessor for BaseFocusResponder?(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

unint64_t lazy protocol witness table accessor for type DefaultFocusSectionResponderFilter and conformance DefaultFocusSectionResponderFilter()
{
  unint64_t result = lazy protocol witness table cache variable for type DefaultFocusSectionResponderFilter and conformance DefaultFocusSectionResponderFilter;
  if (!lazy protocol witness table cache variable for type DefaultFocusSectionResponderFilter and conformance DefaultFocusSectionResponderFilter)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DefaultFocusSectionResponderFilter and conformance DefaultFocusSectionResponderFilter);
  }
  return result;
}

uint64_t specialized DefaultFocusSectionResponder.hostedItem.getter()
{
  uint64_t result = *(void *)(v0 + 296);
  if (!result)
  {
    unint64_t v2 = objc_allocWithZone((Class)type metadata accessor for UIKitDefaultFocusSectionResponderItem(0));
    swift_weakInit();
    swift_unknownObjectWeakInit();
    long long v3 = &v2[direct field offset for UIKitContainerFocusResponderItem.frame];
    *long long v3 = 0u;
    v3[1] = 0u;
    v2[direct field offset for UIKitContainerFocusResponderItem.isEnabled] = 1;
    *(void *)&v2[direct field offset for UIKitContainerFocusResponderItem.cachedCoordinateSpace] = 0;
    swift_weakAssign();
    type metadata accessor for UIKitContainerFocusResponderItem<DefaultFocusSectionResponder>();
    v7.receiver = v2;
    v7.super_class = v4;
    id v5 = objc_msgSendSuper2(&v7, sel_init);
    uint64_t v6 = *(void **)(v0 + 296);
    *(void *)(v0 + 296) = v5;

    return *(void *)(v0 + 296);
  }
  return result;
}

void type metadata accessor for UIKitContainerFocusResponderItem<DefaultFocusSectionResponder>()
{
  if (!lazy cache variable for type metadata for UIKitContainerFocusResponderItem<DefaultFocusSectionResponder>)
  {
    type metadata accessor for DefaultFocusSectionResponder(255);
    unint64_t v0 = type metadata accessor for UIKitContainerFocusResponderItem();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for UIKitContainerFocusResponderItem<DefaultFocusSectionResponder>);
    }
  }
}

long long *partial apply for closure #1 in DefaultFocusSectionResponder.responder.getter@<X0>(long long *a1@<X8>)
{
  return closure #1 in DefaultFocusSectionResponder.responder.getter(a1);
}

unint64_t type metadata accessor for UIFocusEnvironment()
{
  unint64_t result = lazy cache variable for type metadata for UIFocusEnvironment;
  if (!lazy cache variable for type metadata for UIFocusEnvironment)
  {
    unint64_t result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for UIFocusEnvironment);
  }
  return result;
}

uint64_t partial apply for closure #1 in UIKitDefaultFocusSectionResponderItem.preferredFocusEnvironments.getter@<X0>(void *a1@<X0>, uint64_t a2@<X1>, char *a3@<X8>)
{
  return closure #1 in UIKitDefaultFocusSectionResponderItem.preferredFocusEnvironments.getter(a1, a2, *(void *)(v3 + 16), a3);
}

uint64_t specialized UIKitDefaultFocusSectionResponderItem._focusGuideBehavior(forFocusMovement:)()
{
  if (swift_weakLoadStrong()
    && (type metadata accessor for _ContiguousArrayStorage<AccessibilityVisibility>(0, &lazy cache variable for type metadata for DefaultFocusEvaluationPriority?, (uint64_t)&type metadata for DefaultFocusEvaluationPriority, MEMORY[0x1E4FBB718]), static Update.ensure<A>(_:)(), swift_release(), v2 != 1)&& v1 == 1)
  {
    return 2;
  }
  else
  {
    return 0;
  }
}

uint64_t *partial apply for closure #1 in DefaultFocusSectionResponder.priority.getter@<X0>(uint64_t a1@<X8>)
{
  return closure #1 in DefaultFocusSectionResponder.priority.getter(a1);
}

void *type metadata accessor for DefaultFocusSectionResponderFilter()
{
  return &unk_1ED460100;
}

uint64_t base witness table accessor for _AttributeBody in QueryDefaultFocusResponder<A>()
{
  return swift_getWitnessTable();
}

uint64_t thunk for @escaping @callee_guaranteed (@unowned Bool) -> ()(unsigned __int8 *a1, uint64_t (*a2)(void))
{
  return a2(*a1);
}

uint64_t thunk for @escaping @callee_guaranteed (@in_guaranteed Bool) -> (@out ())(char a1, uint64_t (*a2)(char *))
{
  char v3 = a1;
  return a2(&v3);
}

uint64_t _ScrollViewProxy.config.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *v1 + 168;
  swift_beginAccess();
  return outlined init with copy of _ScrollViewConfig(v3, a1);
}

double _ScrollViewProxy.contentSize.getter()
{
  return *(double *)(*(void *)v0 + 336);
}

uint64_t _ScrollViewProxy.pageSize.getter()
{
  return CGSize.inset(by:)();
}

uint64_t _ScrollViewProxy.isScrollingHorizontally.getter()
{
  uint64_t v1 = *v0;
  uint64_t result = swift_beginAccess();
  unsigned __int16 v3 = *(unsigned __int8 *)(v1 + 146);
  if (!(v3 >> 6)) {
    return ((*(unsigned __int16 *)(v1 + 144) | (*(unsigned __int8 *)(v1 + 146) << 16)) >> 8) & 1;
  }
  if (v3 >> 6 != 1) {
    return 0;
  }
  uint64_t v4 = *(void *)(v1 + 136);
  if (*(void *)(v4 + 16) >= 2uLL) {
    return fabs(*(double *)(v4 + 48)) > 2.5;
  }
  __break(1u);
  return result;
}

uint64_t _ScrollViewProxy.isScrollingVertically.getter()
{
  uint64_t v1 = *v0;
  uint64_t result = swift_beginAccess();
  unsigned __int16 v3 = *(unsigned __int8 *)(v1 + 146);
  if (!(v3 >> 6)) {
    return *(_WORD *)(v1 + 144) & 1;
  }
  if (v3 >> 6 != 1) {
    return 0;
  }
  uint64_t v4 = *(void *)(v1 + 136);
  if (*(void *)(v4 + 16) >= 2uLL) {
    return fabs(*(double *)(v4 + 136)) > 2.5;
  }
  __break(1u);
  return result;
}

double _ScrollViewProxy.contentOffset.getter()
{
  uint64_t v1 = *v0;
  swift_beginAccess();
  return *(double *)(v1 + 64);
}

BOOL _ScrollViewProxy.isDragging.getter()
{
  uint64_t v1 = *v0;
  swift_beginAccess();
  return ((*(unsigned __int16 *)(v1 + 144) | (*(unsigned __int8 *)(v1 + 146) << 16)) & 0xC10000) == 0;
}

uint64_t TestHost.scrollViewProxy.getter@<X0>(uint64_t a1@<X8>)
{
  swift_getObjectType();
  uint64_t result = swift_conformsToProtocol2();
  if (result) {
    uint64_t v4 = result;
  }
  else {
    uint64_t v4 = 0;
  }
  if (!result) {
    uint64_t v1 = 0;
  }
  if (v1)
  {
    uint64_t ObjectType = swift_getObjectType();
    (*(void (**)(uint64_t, uint64_t))(v4 + 16))(ObjectType, v4);
    GraphHost.preferenceValue<A>(_:)();
    return swift_release();
  }
  else
  {
    *(void *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
  }
  return result;
}

uint64_t _ScrollViewProxy.setContentOffset(_:animated:completion:)(char a1, uint64_t a2, uint64_t a3, double a4, double a5)
{
  uint64_t v11 = *v5;
  uint64_t result = swift_beginAccess();
  if (((*(unsigned __int8 *)(v11 + 146) << 16) & 0xFFC1FFFF) != 0)
  {
    ScrollViewNode.bindingSafeOffset(_:)(a4, a5);
    if (a1)
    {
      double v20 = a4;
      double v21 = a5;
      double v22 = 0.0;
      double v23 = v13;
      long long v24 = *(unint64_t *)&v14;
      *(void *)&long long v25 = 0;
      *((void *)&v25 + 1) = 0x8000000000000001;
      *(void *)&long long v26 = a2;
      *((void *)&v26 + 1) = a3;
      return ScrollViewNode.commitScrollTransaction(_:value:)(&v20, v13, v14);
    }
    double v20 = a4;
    double v21 = a5;
    double v22 = v13;
    double v23 = v14;
    long long v24 = 0u;
    long long v25 = 0u;
    long long v26 = 0u;
    uint64_t result = ScrollViewNode.commitScrollTransaction(_:value:)(&v20, v13, v14);
  }
  if (a2)
  {
    uint64_t v15 = swift_allocObject();
    *(void *)(v15 + 16) = a2;
    *(void *)(v15 + 24) = a3;
    uint64_t v16 = swift_allocObject();
    *(void *)(v16 + 16) = partial apply for closure #1 in OnSearchFocusChangeModifier.body(content:);
    *(void *)(v16 + 24) = v15;
    uint64_t v17 = swift_allocObject();
    *(void *)(v17 + 16) = _sSbytIegnr_SbIegy_TRTA_0;
    *(void *)(v17 + 24) = v16;
    swift_beginAccess();
    BOOL v18 = *(double *)(v11 + 72) == a5 && *(double *)(v11 + 64) == a4;
    uint64_t v19 = swift_allocObject();
    *(void *)(v19 + 16) = partial apply for closure #1 in OnSearchFocusChangeModifier.body(content:);
    *(void *)(v19 + 24) = v17;
    *(unsigned char *)(v19 + 32) = v18;
    swift_retain_n();
    outlined copy of (@escaping @callee_guaranteed (@unowned Bool) -> ())?(a2, a3);
    swift_retain();
    static Update.enqueueAction(_:)();
    swift_release_n();
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t EnvironmentValues.containingScrollView.getter@<X0>(uint64_t a1@<X8>)
{
  if (*(void *)(v1 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<ScrollViewKey>();
    lazy protocol witness table accessor for type EnvironmentPropertyKey<ScrollViewKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<ScrollViewKey>();
    lazy protocol witness table accessor for type EnvironmentPropertyKey<ScrollViewKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  uint64_t result = swift_release_n();
  if (v5)
  {
    uint64_t result = swift_beginAccess();
    int v4 = *(_DWORD *)(v5 + 408) + *(_DWORD *)(v5 + 148);
    *(void *)a1 = v5;
    *(_DWORD *)(a1 + 8) = v4;
  }
  else
  {
    *(void *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
  }
  return result;
}

uint64_t sub_188301CB0()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t key path setter for _ScrollViewProxy.contentOffset : _ScrollViewProxy(double *a1, uint64_t *a2)
{
  double v2 = *a1;
  double v3 = a1[1];
  uint64_t v4 = *a2;
  uint64_t result = swift_beginAccess();
  if (((*(unsigned __int8 *)(v4 + 146) << 16) & 0xFFC1FFFF) != 0)
  {
    swift_retain();
    ScrollViewNode.bindingSafeOffset(_:)(v2, v3);
    *(double *)unint64_t v8 = v2;
    *(double *)&v8[1] = v3;
    *(double *)&uint64_t v8[2] = v6;
    *(double *)&v8[3] = v7;
    long long v9 = 0u;
    long long v10 = 0u;
    long long v11 = 0u;
    ScrollViewNode.commitScrollTransaction(_:value:)(v8, v6, v7);
    return swift_release();
  }
  return result;
}

uint64_t _ScrollViewProxy.contentOffset.setter(double a1, double a2)
{
  uint64_t v5 = *v2;
  uint64_t result = swift_beginAccess();
  if (((*(unsigned __int8 *)(v5 + 146) << 16) & 0xFFC1FFFF) != 0)
  {
    swift_retain();
    ScrollViewNode.bindingSafeOffset(_:)(a1, a2);
    *(double *)long long v9 = a1;
    *(double *)&v9[1] = a2;
    *(double *)&void v9[2] = v7;
    *(double *)&void v9[3] = v8;
    long long v10 = 0u;
    long long v11 = 0u;
    long long v12 = 0u;
    ScrollViewNode.commitScrollTransaction(_:value:)(v9, v7, v8);
    return swift_release();
  }
  return result;
}

void (*_ScrollViewProxy.contentOffset.modify(void *a1))(char **a1, char a2)
{
  double v3 = (char *)malloc(0x100uLL);
  *a1 = v3;
  *((void *)v3 + 31) = v1;
  uint64_t v4 = *v1;
  swift_beginAccess();
  *(_OWORD *)(v3 + 232) = *(_OWORD *)(v4 + 64);
  return _ScrollViewProxy.contentOffset.modify;
}

void _ScrollViewProxy.contentOffset.modify(char **a1, char a2)
{
  double v2 = *a1;
  double v3 = *((double *)*a1 + 29);
  double v4 = *((double *)*a1 + 30);
  uint64_t v5 = **((void **)*a1 + 31);
  if (a2)
  {
    swift_beginAccess();
    if (((*(unsigned __int8 *)(v5 + 146) << 16) & 0xFFC1FFFF) == 0) {
      goto LABEL_7;
    }
    swift_retain();
    ScrollViewNode.bindingSafeOffset(_:)(v3, v4);
    *(double *)double v2 = v3;
    *((double *)v2 + 1) = v4;
    *((double *)v2 + 2) = v6;
    *((double *)v2 + 3) = v7;
    *((_OWORD *)v2 + 2) = 0u;
    *((_OWORD *)v2 + 3) = 0u;
    *((_OWORD *)v2 + 4) = 0u;
    double v8 = v2;
  }
  else
  {
    swift_beginAccess();
    if (((*(unsigned __int8 *)(v5 + 146) << 16) & 0xFFC1FFFF) == 0) {
      goto LABEL_7;
    }
    swift_retain();
    ScrollViewNode.bindingSafeOffset(_:)(v3, v4);
    *((double *)v2 + 10) = v3;
    *((double *)v2 + 11) = v4;
    *((double *)v2 + 12) = v6;
    *((double *)v2 + 13) = v7;
    *((_OWORD *)v2 + 7) = 0u;
    *((_OWORD *)v2 + 8) = 0u;
    *((_OWORD *)v2 + 9) = 0u;
    double v8 = v2 + 80;
  }
  ScrollViewNode.commitScrollTransaction(_:value:)(v8, v6, v7);
  swift_release();
LABEL_7:

  free(v2);
}

double _ScrollViewProxy.minContentOffset.getter()
{
  return 0.0;
}

uint64_t _ScrollViewProxy.maxContentOffset.getter()
{
  return CGSize.inset(by:)();
}

double _ScrollViewProxy.visibleRect.getter()
{
  uint64_t v1 = *v0;
  swift_beginAccess();
  double v2 = *(double *)(v1 + 64);
  swift_beginAccess();
  return v2 - *(double *)(v1 + 216);
}

BOOL _ScrollViewProxy.isDecelerating.getter()
{
  uint64_t v1 = *v0;
  swift_beginAccess();
  return ((*(unsigned __int8 *)(v1 + 146) << 16) & 0xC00000) == 0x400000;
}

uint64_t _ScrollViewProxy.isScrolling.getter()
{
  uint64_t v1 = *v0;
  uint64_t result = swift_beginAccess();
  unsigned __int16 v3 = *(unsigned __int8 *)(v1 + 146);
  if (!(v3 >> 6))
  {
    int v7 = *(_WORD *)(v1 + 144) & 1;
    unsigned int v6 = ((*(unsigned __int16 *)(v1 + 144) | (*(unsigned __int8 *)(v1 + 146) << 16)) >> 8) & 1;
    return v6 | v7;
  }
  if (v3 >> 6 != 1) {
    return 0;
  }
  uint64_t v4 = *(void *)(v1 + 136);
  if (*(void *)(v4 + 16) >= 2uLL)
  {
    double v5 = *(double *)(v4 + 136);
    unsigned int v6 = fabs(*(double *)(v4 + 48)) > 2.5;
    int v7 = fabs(v5) > 2.5;
    return v6 | v7;
  }
  __break(1u);
  return result;
}

uint64_t _ScrollViewProxy.scrollRectToVisible(_:animated:completion:)(char a1, uint64_t a2, uint64_t a3, CGFloat a4, CGFloat a5, CGFloat a6, CGFloat a7)
{
  uint64_t v15 = *v7;
  swift_beginAccess();
  double v16 = v15[8];
  double v17 = v15[9];
  swift_beginAccess();
  double v18 = v16 - v15[27];
  double v19 = v17 - v15[26];
  CGSize.inset(by:)();
  CGFloat v21 = v20;
  CGFloat v23 = v22;
  v47.origin.CGFloat x = v18;
  v47.origin.CGFloat y = v19;
  v47.size.double width = v21;
  v47.size.double height = v23;
  CGFloat v46 = a4;
  v60.origin.CGFloat x = a4;
  v60.origin.CGFloat y = a5;
  v60.size.double width = a6;
  v60.size.double height = a7;
  uint64_t result = CGRectContainsRect(v47, v60);
  if (result)
  {
    if (a2)
    {
      uint64_t v25 = swift_allocObject();
      *(void *)(v25 + 16) = a2;
      *(void *)(v25 + 24) = a3;
      uint64_t v26 = swift_allocObject();
      *(void *)(v26 + 16) = thunk for @escaping @callee_guaranteed (@unowned Bool) -> ()partial apply;
      *(void *)(v26 + 24) = v25;
      uint64_t v27 = swift_allocObject();
      *(void *)(v27 + 16) = _sSbytIegnr_SbIegy_TRTA_0;
      *(void *)(v27 + 24) = v26;
      uint64_t v28 = swift_allocObject();
      *(void *)(v28 + 16) = thunk for @escaping @callee_guaranteed (@unowned Bool) -> ()partial apply;
      *(void *)(v28 + 24) = v27;
      *(unsigned char *)(v28 + 32) = 1;
      swift_retain_n();
      outlined copy of (@escaping @callee_guaranteed (@unowned Bool) -> ())?(a2, a3);
      swift_retain();
      static Update.enqueueAction(_:)();
      swift_release_n();
      swift_release();
      return swift_release();
    }
  }
  else
  {
    v48.origin.CGFloat x = a4;
    v48.origin.CGFloat y = a5;
    v48.size.double width = a6;
    v48.size.double height = a7;
    double MaxX = CGRectGetMaxX(v48);
    v49.origin.CGFloat x = v18;
    v49.origin.CGFloat y = v19;
    v49.size.double width = v21;
    v49.size.double height = v23;
    BOOL v30 = CGRectGetMaxX(v49) > MaxX;
    CGFloat v31 = v18;
    CGFloat v32 = v46;
    CGFloat v33 = a5;
    CGFloat v34 = a6;
    if (v30)
    {
      CGFloat v35 = a7;
      double MinX = CGRectGetMinX(*(CGRect *)&v32);
      v50.origin.CGFloat x = v31;
      v50.origin.CGFloat y = v19;
      v50.size.double width = v21;
      v50.size.double height = v23;
      BOOL v37 = MinX < CGRectGetMinX(v50);
      double v40 = v31;
      if (v37)
      {
        v51.origin.CGFloat x = v46;
        v51.origin.CGFloat y = a5;
        v51.size.double width = a6;
        v51.size.double height = a7;
        double v40 = CGRectGetMinX(v51);
      }
    }
    else
    {
      CGFloat v38 = a7;
      double v39 = CGRectGetMaxX(*(CGRect *)&v32);
      v52.origin.CGFloat x = v31;
      v52.origin.CGFloat y = v19;
      v52.size.double width = v21;
      v52.size.double height = v23;
      double v40 = v39 - CGRectGetWidth(v52);
    }
    double v45 = v40;
    v53.origin.CGFloat x = v46;
    v53.origin.CGFloat y = a5;
    v53.size.double width = a6;
    v53.size.double height = a7;
    double MaxY = CGRectGetMaxY(v53);
    v54.origin.CGFloat x = v31;
    v54.origin.CGFloat y = v19;
    v54.size.double width = v21;
    v54.size.double height = v23;
    if (CGRectGetMaxY(v54) <= MaxY)
    {
      v58.origin.CGFloat x = v46;
      v58.origin.CGFloat y = a5;
      v58.size.double width = a6;
      v58.size.double height = a7;
      double v44 = CGRectGetMaxY(v58);
      v59.origin.CGFloat x = v31;
      v59.origin.CGFloat y = v19;
      v59.size.double width = v21;
      v59.size.double height = v23;
      double v19 = v44 - CGRectGetHeight(v59);
      double v43 = v45;
    }
    else
    {
      v55.origin.CGFloat x = v46;
      v55.origin.CGFloat y = a5;
      v55.size.double width = a6;
      v55.size.double height = a7;
      double MinY = CGRectGetMinY(v55);
      v56.origin.CGFloat x = v31;
      v56.origin.CGFloat y = v19;
      v56.size.double width = v21;
      v56.size.double height = v23;
      BOOL v37 = MinY < CGRectGetMinY(v56);
      double v43 = v45;
      if (v37)
      {
        v57.origin.CGFloat x = v46;
        v57.origin.CGFloat y = a5;
        v57.size.double width = a6;
        v57.size.double height = a7;
        double v19 = CGRectGetMinY(v57);
      }
    }
    return _ScrollViewProxy.setContentOffset(_:animated:completion:)(a1 & 1, a2, a3, v43, v19);
  }
  return result;
}

void _ScrollViewProxy.contentOffsetOfNextPage(_:)(char *a1)
{
  char v2 = *a1;
  uint64_t v3 = *v1;
  swift_beginAccess();
  if (one-time initialization token for horizontal != -1) {
    swift_once();
  }
  int v4 = (static _EventDirections.horizontal & v2);
  if (v4 == 2 || v4 == 1)
  {
    swift_beginAccess();
    CGSize.inset(by:)();
  }
  if (one-time initialization token for vertical != -1) {
    swift_once();
  }
  int v5 = (static _EventDirections.vertical[0] & v2);
  if (v5 == 8 || v5 == 4)
  {
    swift_beginAccess();
    CGSize.inset(by:)();
  }
  double v6 = *(double *)(v3 + 336);
  double v7 = *(double *)(v3 + 344);
  swift_beginAccess();
  swift_retain();
  CGSize.inset(by:)();
  double v9 = v6 - v8;
  CGSize.inset(by:)();
  double v11 = v10;
  swift_release();
  if (v9 < 0.0) {
    double v12 = 0.0;
  }
  else {
    double v12 = v9;
  }
  if (v7 - v11 < 0.0) {
    double v13 = 0.0;
  }
  else {
    double v13 = v7 - v11;
  }
  CGPoint.clamp(min:max:)((CGPoint)0, (CGPoint)__PAIR128__(*(unint64_t *)&v13, *(unint64_t *)&v12));
}

BOOL static _ScrollViewProxy.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return *(void *)a1 == *(void *)a2 && *(_DWORD *)(a1 + 8) == *(_DWORD *)(a2 + 8);
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance _ScrollViewProxy(uint64_t a1, uint64_t a2)
{
  return *(void *)a1 == *(void *)a2 && *(_DWORD *)(a1 + 8) == *(_DWORD *)(a2 + 8);
}

void *static _ContainedScrollViewKey.reduce(value:nextValue:)(void *result, void *(*a2)(uint64_t *__return_ptr))
{
  char v2 = result;
  int v4 = (int *)(result + 1);
  uint64_t v3 = *result;
  if (!*result)
  {
    uint64_t result = a2(&v6);
    uint64_t v3 = v6;
    int v4 = (int *)&v7;
  }
  int v5 = *v4;
  *char v2 = v3;
  *((_DWORD *)v2 + 2) = v5;
  return result;
}

void *protocol witness for static PreferenceKey.reduce(value:nextValue:) in conformance _ContainedScrollViewKey(void *result, void *(*a2)(uint64_t *__return_ptr))
{
  char v2 = result;
  int v4 = (int *)(result + 1);
  uint64_t v3 = *result;
  if (!*result)
  {
    uint64_t result = a2(&v6);
    uint64_t v3 = v6;
    int v4 = (int *)&v7;
  }
  int v5 = *v4;
  *char v2 = v3;
  *((_DWORD *)v2 + 2) = v5;
  return result;
}

uint64_t specialized closure #1 in ScrollViewNode.dispatchAction<A>(_:_:)(uint64_t (*a1)(char *), uint64_t a2, char *a3)
{
  char v4 = *a3;
  return a1(&v4);
}

uint64_t sub_188302924()
{
  swift_release();

  return swift_deallocObject();
}

__n128 sub_18830299C@<Q0>(__n128 **a1@<X0>, __n128 *a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_beginAccess();
  __n128 result = v3[4];
  *a2 = result;
  return result;
}

ValueMetadata *type metadata accessor for _ScrollViewProxy()
{
  return &type metadata for _ScrollViewProxy;
}

ValueMetadata *type metadata accessor for _ContainedScrollViewKey()
{
  return &type metadata for _ContainedScrollViewKey;
}

void type metadata accessor for EnvironmentPropertyKey<ScrollViewKey>()
{
  if (!lazy cache variable for type metadata for EnvironmentPropertyKey<ScrollViewKey>)
  {
    unint64_t v0 = type metadata accessor for EnvironmentPropertyKey();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ScrollViewKey>);
    }
  }
}

ValueMetadata *type metadata accessor for ScrollViewKey()
{
  return &type metadata for ScrollViewKey;
}

uint64_t closure #1 in PlatformSliderStyle.makeBody(configuration:)@<X0>(void *a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v94 = a1;
  uint64_t v104 = a4;
  unint64_t v6 = HIDWORD(a2);
  uint64_t v114 = a3;
  unint64_t v115 = HIDWORD(a2);
  type metadata accessor for ModifiedContent<PlatformSliderStyle.ValueLabel<SliderStyleConfiguration.MinimumValueLabel>, _DiscreteSymbolEffectModifier<UInt32>>(0, &lazy cache variable for type metadata for ModifiedContent<PlatformSliderStyle.ValueLabel<SliderStyleConfiguration.MaximumValueLabel>, _DiscreteSymbolEffectModifier<UInt32>>, &lazy cache variable for type metadata for PlatformSliderStyle.ValueLabel<SliderStyleConfiguration.MaximumValueLabel>, (uint64_t)&type metadata for SliderStyleConfiguration.MaximumValueLabel, (uint64_t)&protocol witness table for SliderStyleConfiguration.MaximumValueLabel);
  MEMORY[0x1F4188790](v7 - 8);
  uint64_t v117 = (uint64_t)&v88 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v9);
  uint64_t v118 = (uint64_t)&v88 - v10;
  uint64_t v116 = type metadata accessor for SymbolEffectConfiguration();
  long long v121 = *(uint64_t (**)(uint64_t))(v116 - 8);
  MEMORY[0x1F4188790](v116);
  uint64_t v112 = (char *)&v88 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for PlatformSliderStyle.ValueLabel<SliderStyleConfiguration.MinimumValueLabel>(0, &lazy cache variable for type metadata for _DiscreteSymbolEffectModifier<UInt32>, MEMORY[0x1E4FBC4C0], MEMORY[0x1E4FBC4E0], (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for _DiscreteSymbolEffectModifier);
  uint64_t v113 = v12 - 8;
  MEMORY[0x1F4188790](v12 - 8);
  uint64_t v110 = (char *)&v88 - v13;
  uint64_t v14 = type metadata accessor for SymbolEffectOptions();
  uint64_t v108 = v14;
  uint64_t v119 = *(void *)(v14 - 8);
  uint64_t v15 = v119;
  MEMORY[0x1F4188790](v14);
  uint64_t v109 = (char *)&v88 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v17);
  uint64_t v107 = (char *)&v88 - v18;
  uint64_t v19 = type metadata accessor for BounceSymbolEffect();
  uint64_t v20 = *(void *)(v19 - 8);
  MEMORY[0x1F4188790](v19);
  char v111 = (char *)&v88 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v22);
  long long v24 = (char *)&v88 - v23;
  type metadata accessor for ModifiedContent<PlatformSliderStyle.ValueLabel<SliderStyleConfiguration.MinimumValueLabel>, _DiscreteSymbolEffectModifier<UInt32>>(0, &lazy cache variable for type metadata for ModifiedContent<PlatformSliderStyle.ValueLabel<SliderStyleConfiguration.MinimumValueLabel>, _DiscreteSymbolEffectModifier<UInt32>>, &lazy cache variable for type metadata for PlatformSliderStyle.ValueLabel<SliderStyleConfiguration.MinimumValueLabel>, (uint64_t)&type metadata for SliderStyleConfiguration.MinimumValueLabel, (uint64_t)&protocol witness table for SliderStyleConfiguration.MinimumValueLabel);
  MEMORY[0x1F4188790](v25 - 8);
  uint64_t v122 = (uint64_t)&v88 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v28 = MEMORY[0x1F4188790](v27);
  uint64_t v123 = (uint64_t)&v88 - v29;
  long long v120 = v24;
  MEMORY[0x18C114FE0](v28);
  unint64_t v106 = a2;
  *(void *)&long long v163 = __PAIR64__(v6, a2);
  *((void *)&v163 + 1) = a3;
  type metadata accessor for State<PlatformSliderStyle.SymbolEffectState>(0, &lazy cache variable for type metadata for State<PlatformSliderStyle.SymbolEffectState>, (uint64_t)&type metadata for PlatformSliderStyle.SymbolEffectState, MEMORY[0x1E4F41580]);
  uint64_t v105 = v30;
  State.wrappedValue.getter();
  LODWORD(v95) = v152;
  CGFloat v31 = v107;
  static SymbolEffectOptions.default.getter();
  int v102 = *(void (**)(char *, char *, uint64_t))(v20 + 16);
  uint64_t v103 = v20 + 16;
  CGFloat v32 = v111;
  v102(v111, v24, v19);
  CGFloat v33 = *(void (**)(char *, char *, uint64_t))(v15 + 16);
  uint64_t v100 = v15 + 16;
  int v101 = v33;
  CGFloat v34 = v109;
  v33(v109, v31, v14);
  uint64_t v99 = lazy protocol witness table accessor for type TupleView<(ModifiedContent<PlatformSliderStyle.ValueLabel<SliderStyleConfiguration.MinimumValueLabel>, _DiscreteSymbolEffectModifier<UInt32>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<SystemSlider, _FrameLayout>, DisableDeferredAccessibilityAttachmentModifier>, _BackgroundModifier<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<SliderStyleConfiguration.Label, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>, _HiddenModifier>, _PreferenceTransformModifier<AccessibilityAttachment.Key>>>>, AccessibilityAttachmentModifier>, DetachDeferredAccessibilityAttachmentModifier>, EnableDeferredAccessibilityAttachmentModifier>, ModifiedContent<PlatformSliderStyle.ValueLabel<SliderStyleConfiguration.MaximumValueLabel>, _DiscreteSymbolEffectModifier<UInt32>>)> and conformance TupleView<A>(&lazy protocol witness table cache variable for type BounceSymbolEffect and conformance BounceSymbolEffect, MEMORY[0x1E4F41920]);
  CGFloat v35 = v112;
  dispatch thunk of SymbolEffect.configuration.getter();
  int v36 = *(void (**)(char *, uint64_t))(v20 + 8);
  uint64_t v91 = v19;
  v36(v32, v19);
  unint64_t v93 = v36;
  uint64_t v88 = v20 + 8;
  BOOL v37 = (void (*)(char *, char *, uint64_t))*((void *)v121 + 4);
  long long v121 = (uint64_t (*)(uint64_t))((char *)v121 + 32);
  uint64_t v98 = v37;
  CGFloat v38 = v110;
  v37(v110, v35, v116);
  uint64_t v39 = v113;
  double v40 = &v38[*(int *)(v113 + 44)];
  uint64_t v41 = (uint64_t)v38;
  uint64_t v42 = v119;
  double v43 = *(void (**)(uint64_t, char *, uint64_t))(v119 + 32);
  uint64_t v96 = v119 + 32;
  int v97 = v43;
  uint64_t v44 = v108;
  v43((uint64_t)v40, v34, v108);
  *(_DWORD *)(v41 + *(int *)(v39 + 48)) = v95;
  uint64_t v45 = v122;
  outlined init with copy of _DiscreteSymbolEffectModifier<UInt32>(v41, v122);
  outlined destroy of _DiscreteSymbolEffectModifier<UInt32>(v41);
  CGFloat v46 = *(void (**)(char *, uint64_t))(v42 + 8);
  uint64_t v119 = v42 + 8;
  unint64_t v95 = v46;
  v46(v31, v44);
  v36(v120, v19);
  outlined init with take of ModifiedContent<PlatformSliderStyle.ValueLabel<SliderStyleConfiguration.MinimumValueLabel>, _DiscreteSymbolEffectModifier<UInt32>>(v45, v123, &lazy cache variable for type metadata for ModifiedContent<PlatformSliderStyle.ValueLabel<SliderStyleConfiguration.MinimumValueLabel>, _DiscreteSymbolEffectModifier<UInt32>>, &lazy cache variable for type metadata for PlatformSliderStyle.ValueLabel<SliderStyleConfiguration.MinimumValueLabel>, (uint64_t)&type metadata for SliderStyleConfiguration.MinimumValueLabel, (uint64_t)&protocol witness table for SliderStyleConfiguration.MinimumValueLabel);
  uint64_t v48 = *v94;
  uint64_t v47 = v94[1];
  uint64_t v49 = v94[2];
  uint64_t v51 = v94[3];
  uint64_t v50 = v94[4];
  *(void *)&long long v152 = __PAIR64__(v115, v106);
  *((void *)&v152 + 1) = v114;
  swift_retain();
  swift_retain();
  swift_retain();
  State.projectedValue.getter();
  long long v52 = v163;
  uint64_t v53 = v164;
  uint64_t KeyPath = swift_getKeyPath();
  static Alignment.center.getter();
  _FrameLayout.init(width:height:alignment:)();
  *(void *)&long long v129 = v48;
  *((void *)&v129 + 1) = v47;
  *(void *)&long long v130 = v49;
  *((void *)&v130 + 1) = v51;
  *(void *)long long v131 = v50;
  *(_OWORD *)&v131[8] = v52;
  *(void *)&v131[24] = v53;
  *(void *)&long long v132 = KeyPath;
  BYTE8(v132) = 0;
  *(void *)&long long v133 = v124;
  BYTE8(v133) = v125;
  *(void *)&long long v134 = v126;
  BYTE8(v134) = v127;
  long long v135 = v128;
  uint64_t v55 = swift_allocObject();
  *(unsigned char *)(v55 + 16) = 0;
  outlined retain of ModifiedContent<SystemSlider, _FrameLayout>((uint64_t)&v129);
  uint64_t v94 = (void *)static Alignment.center.getter();
  uint64_t v92 = v56;
  long long v140 = v132;
  long long v141 = v133;
  long long v142 = v134;
  long long v143 = v135;
  long long v136 = v129;
  long long v137 = v130;
  long long v138 = *(_OWORD *)v131;
  long long v139 = *(_OWORD *)&v131[16];
  type metadata accessor for AnyAccessibilityPropertiesEntry();
  uint64_t v89 = v55;
  swift_retain();
  *(void *)&long long v152 = Dictionary.init(minimumCapacity:)();
  AccessibilityAttachment.init(properties:)();
  long long v57 = v163;
  type metadata accessor for State<PlatformSliderStyle.SymbolEffectState>(0, (unint64_t *)&lazy cache variable for type metadata for MutableBox<AccessibilityAttachment>, MEMORY[0x1E4F40A58], MEMORY[0x1E4F3F398]);
  uint64_t v90 = swift_allocObject();
  *(_OWORD *)(v90 + 16) = v57;
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  uint64_t v58 = outlined consume of Environment<Color?>.Content(KeyPath, 0);
  long long v148 = v140;
  long long v149 = v141;
  long long v150 = v142;
  long long v151 = v143;
  long long v144 = v136;
  long long v145 = v137;
  long long v146 = v138;
  long long v147 = v139;
  CGRect v59 = v120;
  MEMORY[0x18C114FE0](v58);
  *(void *)&long long v163 = __PAIR64__(v115, v106);
  *((void *)&v163 + 1) = v114;
  State.wrappedValue.getter();
  LODWORD(v115) = DWORD1(v152);
  CGRect v60 = v107;
  static SymbolEffectOptions.default.getter();
  uint64_t v61 = v111;
  uint64_t v62 = v91;
  v102(v111, v59, v91);
  uint64_t v63 = v108;
  uint64_t v64 = v109;
  v101(v109, v60, v108);
  uint64_t v65 = v112;
  dispatch thunk of SymbolEffect.configuration.getter();
  uint64_t v66 = v93;
  v93(v61, v62);
  uint64_t v67 = (uint64_t)v110;
  v98(v110, v65, v116);
  uint64_t v68 = v113;
  v97(v67 + *(int *)(v113 + 44), v64, v63);
  *(_DWORD *)(v67 + *(int *)(v68 + 48)) = v115;
  uint64_t v69 = v117;
  outlined init with copy of _DiscreteSymbolEffectModifier<UInt32>(v67, v117);
  outlined destroy of _DiscreteSymbolEffectModifier<UInt32>(v67);
  v95(v60, v63);
  v66(v120, v62);
  uint64_t v70 = v118;
  outlined init with take of ModifiedContent<PlatformSliderStyle.ValueLabel<SliderStyleConfiguration.MinimumValueLabel>, _DiscreteSymbolEffectModifier<UInt32>>(v69, v118, &lazy cache variable for type metadata for ModifiedContent<PlatformSliderStyle.ValueLabel<SliderStyleConfiguration.MaximumValueLabel>, _DiscreteSymbolEffectModifier<UInt32>>, &lazy cache variable for type metadata for PlatformSliderStyle.ValueLabel<SliderStyleConfiguration.MaximumValueLabel>, (uint64_t)&type metadata for SliderStyleConfiguration.MaximumValueLabel, (uint64_t)&protocol witness table for SliderStyleConfiguration.MaximumValueLabel);
  uint64_t v71 = v122;
  outlined init with copy of ModifiedContent<PlatformSliderStyle.ValueLabel<SliderStyleConfiguration.MinimumValueLabel>, _DiscreteSymbolEffectModifier<UInt32>>(v123, v122, &lazy cache variable for type metadata for ModifiedContent<PlatformSliderStyle.ValueLabel<SliderStyleConfiguration.MinimumValueLabel>, _DiscreteSymbolEffectModifier<UInt32>>, &lazy cache variable for type metadata for PlatformSliderStyle.ValueLabel<SliderStyleConfiguration.MinimumValueLabel>, (uint64_t)&type metadata for SliderStyleConfiguration.MinimumValueLabel, (uint64_t)&protocol witness table for SliderStyleConfiguration.MinimumValueLabel);
  uint64_t v72 = v70;
  uint64_t v73 = v117;
  outlined init with copy of ModifiedContent<PlatformSliderStyle.ValueLabel<SliderStyleConfiguration.MinimumValueLabel>, _DiscreteSymbolEffectModifier<UInt32>>(v72, v117, &lazy cache variable for type metadata for ModifiedContent<PlatformSliderStyle.ValueLabel<SliderStyleConfiguration.MaximumValueLabel>, _DiscreteSymbolEffectModifier<UInt32>>, &lazy cache variable for type metadata for PlatformSliderStyle.ValueLabel<SliderStyleConfiguration.MaximumValueLabel>, (uint64_t)&type metadata for SliderStyleConfiguration.MaximumValueLabel, (uint64_t)&protocol witness table for SliderStyleConfiguration.MaximumValueLabel);
  uint64_t v74 = v71;
  uint64_t v75 = v104;
  outlined init with copy of ModifiedContent<PlatformSliderStyle.ValueLabel<SliderStyleConfiguration.MinimumValueLabel>, _DiscreteSymbolEffectModifier<UInt32>>(v74, v104, &lazy cache variable for type metadata for ModifiedContent<PlatformSliderStyle.ValueLabel<SliderStyleConfiguration.MinimumValueLabel>, _DiscreteSymbolEffectModifier<UInt32>>, &lazy cache variable for type metadata for PlatformSliderStyle.ValueLabel<SliderStyleConfiguration.MinimumValueLabel>, (uint64_t)&type metadata for SliderStyleConfiguration.MinimumValueLabel, (uint64_t)&protocol witness table for SliderStyleConfiguration.MinimumValueLabel);
  type metadata accessor for (ModifiedContent<PlatformSliderStyle.ValueLabel<SliderStyleConfiguration.MinimumValueLabel>, _DiscreteSymbolEffectModifier<UInt32>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<SystemSlider, _FrameLayout>, DisableDeferredAccessibilityAttachmentModifier>, _BackgroundModifier<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<SliderStyleConfiguration.Label, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>, _HiddenModifier>, _PreferenceTransformModifier<AccessibilityAttachment.Key>>>>, AccessibilityAttachmentModifier>, DetachDeferredAccessibilityAttachmentModifier>, EnableDeferredAccessibilityAttachmentModifier>, ModifiedContent<PlatformSliderStyle.ValueLabel<SliderStyleConfiguration.MaximumValueLabel>, _DiscreteSymbolEffectModifier<UInt32>>)();
  int v77 = (_OWORD *)(v75 + *(int *)(v76 + 48));
  long long v156 = v148;
  long long v157 = v149;
  long long v158 = v150;
  long long v159 = v151;
  long long v152 = v144;
  long long v153 = v145;
  long long v154 = v146;
  long long v155 = v147;
  long long v121 = partial apply for closure #1 in View.accessibilityLabel<A>(_:label:);
  *(void *)&long long v160 = partial apply for closure #1 in View.accessibilityLabel<A>(_:label:);
  uint64_t v78 = v89;
  uint64_t v79 = v90;
  *((void *)&v160 + 1) = v89;
  unsigned int v80 = v94;
  *(void *)&long long v161 = v94;
  uint64_t v81 = v92;
  *((void *)&v161 + 1) = v92;
  long long v162 = (unint64_t)v90;
  long long v82 = v149;
  v77[4] = v148;
  v77[5] = v82;
  long long v83 = v159;
  v77[6] = v158;
  v77[7] = v83;
  long long v84 = v153;
  *int v77 = v152;
  v77[1] = v84;
  long long v85 = v155;
  v77[2] = v154;
  v77[3] = v85;
  long long v86 = v161;
  v77[8] = v160;
  v77[9] = v86;
  v77[10] = v162;
  outlined init with copy of ModifiedContent<PlatformSliderStyle.ValueLabel<SliderStyleConfiguration.MinimumValueLabel>, _DiscreteSymbolEffectModifier<UInt32>>(v73, v75 + *(int *)(v76 + 64), &lazy cache variable for type metadata for ModifiedContent<PlatformSliderStyle.ValueLabel<SliderStyleConfiguration.MaximumValueLabel>, _DiscreteSymbolEffectModifier<UInt32>>, &lazy cache variable for type metadata for PlatformSliderStyle.ValueLabel<SliderStyleConfiguration.MaximumValueLabel>, (uint64_t)&type metadata for SliderStyleConfiguration.MaximumValueLabel, (uint64_t)&protocol witness table for SliderStyleConfiguration.MaximumValueLabel);
  outlined retain of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<SystemSlider, _FrameLayout>, DisableDeferredAccessibilityAttachmentModifier>, _BackgroundModifier<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<SliderStyleConfiguration.Label, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>, _HiddenModifier>, _PreferenceTransformModifier<AccessibilityAttachment.Key>>>>, AccessibilityAttachmentModifier>, DetachDeferredAccessibilityAttachmentModifier>, EnableDeferredAccessibilityAttachmentModifier>((uint64_t)&v152);
  outlined destroy of ModifiedContent<PlatformSliderStyle.ValueLabel<SliderStyleConfiguration.MaximumValueLabel>, _DiscreteSymbolEffectModifier<UInt32>>(v118, &lazy cache variable for type metadata for ModifiedContent<PlatformSliderStyle.ValueLabel<SliderStyleConfiguration.MaximumValueLabel>, _DiscreteSymbolEffectModifier<UInt32>>, &lazy cache variable for type metadata for PlatformSliderStyle.ValueLabel<SliderStyleConfiguration.MaximumValueLabel>, (uint64_t)&type metadata for SliderStyleConfiguration.MaximumValueLabel, (uint64_t)&protocol witness table for SliderStyleConfiguration.MaximumValueLabel);
  outlined destroy of ModifiedContent<PlatformSliderStyle.ValueLabel<SliderStyleConfiguration.MaximumValueLabel>, _DiscreteSymbolEffectModifier<UInt32>>(v123, &lazy cache variable for type metadata for ModifiedContent<PlatformSliderStyle.ValueLabel<SliderStyleConfiguration.MinimumValueLabel>, _DiscreteSymbolEffectModifier<UInt32>>, &lazy cache variable for type metadata for PlatformSliderStyle.ValueLabel<SliderStyleConfiguration.MinimumValueLabel>, (uint64_t)&type metadata for SliderStyleConfiguration.MinimumValueLabel, (uint64_t)&protocol witness table for SliderStyleConfiguration.MinimumValueLabel);
  outlined destroy of ModifiedContent<PlatformSliderStyle.ValueLabel<SliderStyleConfiguration.MaximumValueLabel>, _DiscreteSymbolEffectModifier<UInt32>>(v73, &lazy cache variable for type metadata for ModifiedContent<PlatformSliderStyle.ValueLabel<SliderStyleConfiguration.MaximumValueLabel>, _DiscreteSymbolEffectModifier<UInt32>>, &lazy cache variable for type metadata for PlatformSliderStyle.ValueLabel<SliderStyleConfiguration.MaximumValueLabel>, (uint64_t)&type metadata for SliderStyleConfiguration.MaximumValueLabel, (uint64_t)&protocol witness table for SliderStyleConfiguration.MaximumValueLabel);
  long long v167 = v148;
  long long v168 = v149;
  long long v169 = v150;
  long long v170 = v151;
  long long v163 = v144;
  long long v164 = v145;
  long long v165 = v146;
  long long v166 = v147;
  id v171 = v121;
  uint64_t v172 = v78;
  uint64_t v173 = v80;
  uint64_t v174 = v81;
  uint64_t v175 = v79;
  uint64_t v176 = 0;
  outlined release of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<SystemSlider, _FrameLayout>, DisableDeferredAccessibilityAttachmentModifier>, _BackgroundModifier<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<SliderStyleConfiguration.Label, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>, _HiddenModifier>, _PreferenceTransformModifier<AccessibilityAttachment.Key>>>>, AccessibilityAttachmentModifier>, DetachDeferredAccessibilityAttachmentModifier>, EnableDeferredAccessibilityAttachmentModifier>((uint64_t)&v163);
  return outlined destroy of ModifiedContent<PlatformSliderStyle.ValueLabel<SliderStyleConfiguration.MaximumValueLabel>, _DiscreteSymbolEffectModifier<UInt32>>(v122, &lazy cache variable for type metadata for ModifiedContent<PlatformSliderStyle.ValueLabel<SliderStyleConfiguration.MinimumValueLabel>, _DiscreteSymbolEffectModifier<UInt32>>, &lazy cache variable for type metadata for PlatformSliderStyle.ValueLabel<SliderStyleConfiguration.MinimumValueLabel>, (uint64_t)&type metadata for SliderStyleConfiguration.MinimumValueLabel, (uint64_t)&protocol witness table for SliderStyleConfiguration.MinimumValueLabel);
}

uint64_t protocol witness for SliderStyle.makeBody(configuration:) in conformance PlatformSliderStyle@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v5 = *v2;
  uint64_t v4 = v2[1];
  long long v6 = *(_OWORD *)(a1 + 80);
  v11[4] = *(_OWORD *)(a1 + 64);
  _OWORD v11[5] = v6;
  uint64_t v12 = *(void *)(a1 + 96);
  long long v7 = *(_OWORD *)(a1 + 16);
  v11[0] = *(_OWORD *)a1;
  v11[1] = v7;
  long long v8 = *(_OWORD *)(a1 + 48);
  void v11[2] = *(_OWORD *)(a1 + 32);
  void v11[3] = v8;
  *(void *)a2 = static VerticalAlignment.center.getter();
  *(void *)(a2 + 8) = 0;
  *(unsigned char *)(a2 + 16) = 1;
  type metadata accessor for _VariadicView.Tree<_HStackLayout, TupleView<(ModifiedContent<PlatformSliderStyle.ValueLabel<SliderStyleConfiguration.MinimumValueLabel>, _DiscreteSymbolEffectModifier<UInt32>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<SystemSlider, _FrameLayout>, DisableDeferredAccessibilityAttachmentModifier>, _BackgroundModifier<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<SliderStyleConfiguration.Label, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>, _HiddenModifier>, _PreferenceTransformModifier<AccessibilityAttachment.Key>>>>, AccessibilityAttachmentModifier>, DetachDeferredAccessibilityAttachmentModifier>, EnableDeferredAccessibilityAttachmentModifier>, ModifiedContent<PlatformSliderStyle.ValueLabel<SliderStyleConfiguration.MaximumValueLabel>, _DiscreteSymbolEffectModifier<UInt32>>)>>();
  return closure #1 in PlatformSliderStyle.makeBody(configuration:)(v11, v5, v4, a2 + *(int *)(v9 + 44));
}

uint64_t SystemSlider.updateUIView(_:context:)(void *a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  int v7 = *(unsigned __int8 *)(a2 + 32);
  long long v24 = *(char **)(a2 + 40);
  long long v26 = *(_OWORD *)v2;
  uint64_t v27 = *(void *)(v2 + 16);
  type metadata accessor for State<PlatformSliderStyle.SymbolEffectState>(0, (unint64_t *)&lazy cache variable for type metadata for Binding<Double>, MEMORY[0x1E4FBB3D0], MEMORY[0x1E4F41638]);
  MEMORY[0x18C113DA0](v25);
  double v8 = *(double *)v25;
  swift_retain();
  uint64_t v9 = Transaction.animation.getter();
  swift_release();
  if (v9) {
    swift_release();
  }
  *(float *)&double v10 = v8;
  objc_msgSend(a1, sel_setValue_animated_, v9 != 0, v10);
  uint64_t v11 = *(void *)(v3 + 64);
  uint64_t v12 = *(unsigned __int8 *)(v3 + 72);
  outlined copy of Environment<Color?>.Content(v11, v12);
  uint64_t v13 = specialized Environment.wrappedValue.getter(v11, v12);
  uint64_t v14 = outlined consume of Environment<Color?>.Content(v11, v12);
  if (v13)
  {
    if (v7)
    {
      MEMORY[0x1F4188790](v14);
      swift_retain();
      swift_retain();
      outlined copy of RepresentableContextValues.EnvironmentStorage(v5, v6, 1);
      uint64_t v15 = v24;
      swift_retain();
      swift_retain();
      outlined copy of RepresentableContextValues.EnvironmentStorage(v5, v6, 1);
      static Update.ensure<A>(_:)();
      swift_release();
      swift_release();
      outlined consume of RepresentableContextValues.EnvironmentStorage(v5, v6, 1);
      swift_release();
      swift_release();
      outlined consume of RepresentableContextValues.EnvironmentStorage(v5, v6, 1);

      uint64_t v6 = *((void *)&v26 + 1);
      uint64_t v5 = v26;
    }
    else
    {
      *(void *)&long long v26 = v5;
      *((void *)&v26 + 1) = v6;
      swift_retain();
      swift_retain();
    }
    v25[0] = v5;
    v25[1] = v6;
    dispatch thunk of AnyColorBox.resolve(in:)();
    swift_release();
    swift_release();
    uint64_t v16 = (void *)Color.Resolved.kitColor.getter();
    self;
    objc_msgSend(a1, sel_setTintColor_, swift_dynamicCastObjCClassUnconditional());
    swift_release();
  }
  uint64_t v17 = &v24[OBJC_IVAR____TtC7SwiftUIP33_8AA246B2E0E916EFA5AD706DCC8A0FE811Coordinator_configuration];
  uint64_t v18 = *(void *)&v24[OBJC_IVAR____TtC7SwiftUIP33_8AA246B2E0E916EFA5AD706DCC8A0FE811Coordinator_configuration + 64];
  uint64_t v19 = v24[OBJC_IVAR____TtC7SwiftUIP33_8AA246B2E0E916EFA5AD706DCC8A0FE811Coordinator_configuration
                           + 72];
  long long v21 = *(_OWORD *)(v3 + 32);
  long long v20 = *(_OWORD *)(v3 + 48);
  long long v22 = *(_OWORD *)(v3 + 57);
  *((_OWORD *)v17 + 1) = *(_OWORD *)(v3 + 16);
  *(_OWORD *)uint64_t v17 = *(_OWORD *)v3;
  *(_OWORD *)(v17 + 57) = v22;
  *((_OWORD *)v17 + 2) = v21;
  *((_OWORD *)v17 + 3) = v20;
  outlined retain of ModifiedContent<SystemSlider, _FrameLayout>(v3);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return outlined consume of Environment<Color?>.Content(v18, v19);
}

id protocol witness for UIViewRepresentable.makeUIView(context:) in conformance SystemSlider(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  id v2 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1C38]), sel_init);
  objc_msgSend(v2, sel_addTarget_action_forControlEvents_, v1, sel_valueChanged_, 4096);
  objc_msgSend(v2, sel_addTarget_action_forControlEvents_, v1, sel_editingEnded_, 448);
  return v2;
}

uint64_t protocol witness for UIViewRepresentable.updateUIView(_:context:) in conformance SystemSlider(void *a1, uint64_t a2)
{
  return SystemSlider.updateUIView(_:context:)(a1, a2);
}

id protocol witness for UIViewRepresentable.makeCoordinator() in conformance SystemSlider@<X0>(void *a1@<X8>)
{
  uint64_t v2 = *v1;
  uint64_t v3 = v1[1];
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = v1[5];
  uint64_t v8 = v1[6];
  uint64_t v9 = v1[8];
  uint64_t v10 = *((unsigned __int8 *)v1 + 72);
  uint64_t v11 = (objc_class *)type metadata accessor for Coordinator();
  uint64_t v12 = v1[7];
  uint64_t v13 = objc_allocWithZone(v11);
  v13[OBJC_IVAR____TtC7SwiftUIP33_8AA246B2E0E916EFA5AD706DCC8A0FE811Coordinator_isUpdating] = 0;
  uint64_t v14 = &v13[OBJC_IVAR____TtC7SwiftUIP33_8AA246B2E0E916EFA5AD706DCC8A0FE811Coordinator_configuration];
  *(void *)uint64_t v14 = v2;
  *((void *)v14 + 1) = v3;
  *((void *)v14 + 2) = v4;
  *((void *)v14 + 3) = v5;
  *((void *)v14 + 4) = v6;
  *((void *)v14 + 5) = v7;
  *((void *)v14 + 6) = v8;
  *((void *)v14 + 7) = v12;
  *((void *)v14 + 8) = v9;
  v14[72] = v10;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  outlined copy of Environment<Color?>.Content(v9, v10);
  v17.receiver = v13;
  v17.super_class = v11;
  id result = objc_msgSendSuper2(&v17, sel_init);
  *a1 = result;
  return result;
}

void *Coordinator.valueChanged(_:)(void *a1)
{
  objc_msgSend(a1, sel_value);
  double v4 = v3;
  uint64_t v5 = v1 + OBJC_IVAR____TtC7SwiftUIP33_8AA246B2E0E916EFA5AD706DCC8A0FE811Coordinator_configuration;
  type metadata accessor for State<PlatformSliderStyle.SymbolEffectState>(0, (unint64_t *)&lazy cache variable for type metadata for Binding<Double>, MEMORY[0x1E4FBB3D0], MEMORY[0x1E4F41638]);
  uint64_t v7 = v6;
  id result = MEMORY[0x18C113DA0](&v18);
  if (v18 != v4)
  {
    if ((*(unsigned char *)(v1 + OBJC_IVAR____TtC7SwiftUIP33_8AA246B2E0E916EFA5AD706DCC8A0FE811Coordinator_isUpdating) & 1) == 0)
    {
      *(unsigned char *)(v1 + OBJC_IVAR____TtC7SwiftUIP33_8AA246B2E0E916EFA5AD706DCC8A0FE811Coordinator_isUpdating) = 1;
      MEMORY[0x1F4188790](result);
      MEMORY[0x1F4188790](v9);
      static Update.dispatchImmediately<A>(_:)();
    }
    uint64_t v10 = *(void *)(v5 + 64);
    uint64_t v11 = *(unsigned __int8 *)(v5 + 72);
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    outlined copy of Environment<Color?>.Content(v10, v11);
    swift_retain();
    swift_retain();
    dispatch thunk of AnyLocation.set(_:transaction:)();
    swift_release();
    swift_release();
    swift_release();
    swift_release_n();
    swift_release_n();
    outlined consume of Environment<Color?>.Content(v10, v11);
    MEMORY[0x18C113DA0](&v18, v7);
    HIDWORD(v12) = HIDWORD(v18);
    *(float *)&double v12 = v18;
    objc_msgSend(a1, sel_setValue_, v12);
    uint64_t v13 = *(void *)(v5 + 64);
    uint64_t v14 = *(unsigned __int8 *)(v5 + 72);
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    outlined copy of Environment<Color?>.Content(v13, v14);
    MEMORY[0x18C113DA0](&v18, v7);
    double v15 = v18;
    type metadata accessor for State<PlatformSliderStyle.SymbolEffectState>(0, &lazy cache variable for type metadata for Binding<PlatformSliderStyle.SymbolEffectState>, (uint64_t)&type metadata for PlatformSliderStyle.SymbolEffectState, MEMORY[0x1E4F41638]);
    uint64_t v17 = v16;
    swift_retain();
    swift_retain();
    MEMORY[0x18C113DA0](&v18, v17);
    if (v15 == 0.0)
    {
      ++LODWORD(v18);
    }
    else if (v15 == 1.0)
    {
      ++HIDWORD(v18);
    }
    dispatch thunk of AnyLocation.set(_:transaction:)();
    swift_release();
    swift_release();
    swift_release();
    swift_release_n();
    swift_release_n();
    return (void *)outlined consume of Environment<Color?>.Content(v13, v14);
  }
  return result;
}

uint64_t destroy for SystemSlider(uint64_t a1)
{
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  uint64_t v2 = *(void *)(a1 + 64);
  uint64_t v3 = *(unsigned __int8 *)(a1 + 72);

  return outlined consume of Environment<Color?>.Content(v2, v3);
}

uint64_t initializeWithCopy for SystemSlider(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  uint64_t v5 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v5;
  uint64_t v6 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v6;
  uint64_t v7 = *(void *)(a2 + 64);
  uint64_t v8 = *(unsigned __int8 *)(a2 + 72);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  outlined copy of Environment<Color?>.Content(v7, v8);
  *(void *)(a1 + 64) = v7;
  *(unsigned char *)(a1 + 72) = v8;
  return a1;
}

uint64_t assignWithCopy for SystemSlider(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_retain();
  swift_release();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_retain();
  swift_release();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  uint64_t v4 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v4;
  swift_retain();
  swift_release();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_retain();
  swift_release();
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  uint64_t v5 = *(void *)(a2 + 64);
  uint64_t v6 = *(unsigned __int8 *)(a2 + 72);
  outlined copy of Environment<Color?>.Content(v5, v6);
  uint64_t v7 = *(void *)(a1 + 64);
  uint64_t v8 = *(unsigned __int8 *)(a1 + 72);
  *(void *)(a1 + 64) = v5;
  *(unsigned char *)(a1 + 72) = v6;
  outlined consume of Environment<Color?>.Content(v7, v8);
  return a1;
}

uint64_t assignWithTake for SystemSlider(uint64_t a1, uint64_t a2)
{
  swift_release();
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_release();
  swift_release();
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  swift_release();
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  char v4 = *(unsigned char *)(a2 + 72);
  uint64_t v5 = *(void *)(a1 + 64);
  uint64_t v6 = *(unsigned __int8 *)(a1 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(unsigned char *)(a1 + 72) = v4;
  outlined consume of Environment<Color?>.Content(v5, v6);
  return a1;
}

ValueMetadata *type metadata accessor for SystemSlider()
{
  return &type metadata for SystemSlider;
}

ValueMetadata *type metadata accessor for PlatformSliderStyle()
{
  return &type metadata for PlatformSliderStyle;
}

uint64_t associated type witness table accessor for SliderStyle.Body : View in PlatformSliderStyle()
{
  return swift_getOpaqueTypeConformance2();
}

void type metadata accessor for _VariadicView.Tree<_HStackLayout, TupleView<(ModifiedContent<PlatformSliderStyle.ValueLabel<SliderStyleConfiguration.MinimumValueLabel>, _DiscreteSymbolEffectModifier<UInt32>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<SystemSlider, _FrameLayout>, DisableDeferredAccessibilityAttachmentModifier>, _BackgroundModifier<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<SliderStyleConfiguration.Label, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>, _HiddenModifier>, _PreferenceTransformModifier<AccessibilityAttachment.Key>>>>, AccessibilityAttachmentModifier>, DetachDeferredAccessibilityAttachmentModifier>, EnableDeferredAccessibilityAttachmentModifier>, ModifiedContent<PlatformSliderStyle.ValueLabel<SliderStyleConfiguration.MaximumValueLabel>, _DiscreteSymbolEffectModifier<UInt32>>)>>()
{
  if (!lazy cache variable for type metadata for _VariadicView.Tree<_HStackLayout, TupleView<(ModifiedContent<PlatformSliderStyle.ValueLabel<SliderStyleConfiguration.MinimumValueLabel>, _DiscreteSymbolEffectModifier<UInt32>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<SystemSlider, _FrameLayout>, DisableDeferredAccessibilityAttachmentModifier>, _BackgroundModifier<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<SliderStyleConfiguration.Label, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>, _HiddenModifier>, _PreferenceTransformModifier<AccessibilityAttachment.Key>>>>, AccessibilityAttachmentModifier>, DetachDeferredAccessibilityAttachmentModifier>, EnableDeferredAccessibilityAttachmentModifier>, ModifiedContent<PlatformSliderStyle.ValueLabel<SliderStyleConfiguration.MaximumValueLabel>, _DiscreteSymbolEffectModifier<UInt32>>)>>)
  {
    type metadata accessor for TupleView<(ModifiedContent<PlatformSliderStyle.ValueLabel<SliderStyleConfiguration.MinimumValueLabel>, _DiscreteSymbolEffectModifier<UInt32>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<SystemSlider, _FrameLayout>, DisableDeferredAccessibilityAttachmentModifier>, _BackgroundModifier<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<SliderStyleConfiguration.Label, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>, _HiddenModifier>, _PreferenceTransformModifier<AccessibilityAttachment.Key>>>>, AccessibilityAttachmentModifier>, DetachDeferredAccessibilityAttachmentModifier>, EnableDeferredAccessibilityAttachmentModifier>, ModifiedContent<PlatformSliderStyle.ValueLabel<SliderStyleConfiguration.MaximumValueLabel>, _DiscreteSymbolEffectModifier<UInt32>>)>();
    unint64_t v0 = type metadata accessor for _VariadicView.Tree();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _VariadicView.Tree<_HStackLayout, TupleView<(ModifiedContent<PlatformSliderStyle.ValueLabel<SliderStyleConfiguration.MinimumValueLabel>, _DiscreteSymbolEffectModifier<UInt32>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<SystemSlider, _FrameLayout>, DisableDeferredAccessibilityAttachmentModifier>, _BackgroundModifier<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<SliderStyleConfiguration.Label, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>, _HiddenModifier>, _PreferenceTransformModifier<AccessibilityAttachment.Key>>>>, AccessibilityAttachmentModifier>, DetachDeferredAccessibilityAttachmentModifier>, EnableDeferredAccessibilityAttachmentModifier>, ModifiedContent<PlatformSliderStyle.ValueLabel<SliderStyleConfiguration.MaximumValueLabel>, _DiscreteSymbolEffectModifier<UInt32>>)>>);
    }
  }
}

void type metadata accessor for TupleView<(ModifiedContent<PlatformSliderStyle.ValueLabel<SliderStyleConfiguration.MinimumValueLabel>, _DiscreteSymbolEffectModifier<UInt32>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<SystemSlider, _FrameLayout>, DisableDeferredAccessibilityAttachmentModifier>, _BackgroundModifier<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<SliderStyleConfiguration.Label, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>, _HiddenModifier>, _PreferenceTransformModifier<AccessibilityAttachment.Key>>>>, AccessibilityAttachmentModifier>, DetachDeferredAccessibilityAttachmentModifier>, EnableDeferredAccessibilityAttachmentModifier>, ModifiedContent<PlatformSliderStyle.ValueLabel<SliderStyleConfiguration.MaximumValueLabel>, _DiscreteSymbolEffectModifier<UInt32>>)>()
{
  if (!lazy cache variable for type metadata for TupleView<(ModifiedContent<PlatformSliderStyle.ValueLabel<SliderStyleConfiguration.MinimumValueLabel>, _DiscreteSymbolEffectModifier<UInt32>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<SystemSlider, _FrameLayout>, DisableDeferredAccessibilityAttachmentModifier>, _BackgroundModifier<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<SliderStyleConfiguration.Label, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>, _HiddenModifier>, _PreferenceTransformModifier<AccessibilityAttachment.Key>>>>, AccessibilityAttachmentModifier>, DetachDeferredAccessibilityAttachmentModifier>, EnableDeferredAccessibilityAttachmentModifier>, ModifiedContent<PlatformSliderStyle.ValueLabel<SliderStyleConfiguration.MaximumValueLabel>, _DiscreteSymbolEffectModifier<UInt32>>)>)
  {
    type metadata accessor for (ModifiedContent<PlatformSliderStyle.ValueLabel<SliderStyleConfiguration.MinimumValueLabel>, _DiscreteSymbolEffectModifier<UInt32>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<SystemSlider, _FrameLayout>, DisableDeferredAccessibilityAttachmentModifier>, _BackgroundModifier<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<SliderStyleConfiguration.Label, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>, _HiddenModifier>, _PreferenceTransformModifier<AccessibilityAttachment.Key>>>>, AccessibilityAttachmentModifier>, DetachDeferredAccessibilityAttachmentModifier>, EnableDeferredAccessibilityAttachmentModifier>, ModifiedContent<PlatformSliderStyle.ValueLabel<SliderStyleConfiguration.MaximumValueLabel>, _DiscreteSymbolEffectModifier<UInt32>>)();
    unint64_t v0 = type metadata accessor for TupleView();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TupleView<(ModifiedContent<PlatformSliderStyle.ValueLabel<SliderStyleConfiguration.MinimumValueLabel>, _DiscreteSymbolEffectModifier<UInt32>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<SystemSlider, _FrameLayout>, DisableDeferredAccessibilityAttachmentModifier>, _BackgroundModifier<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<SliderStyleConfiguration.Label, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>, _HiddenModifier>, _PreferenceTransformModifier<AccessibilityAttachment.Key>>>>, AccessibilityAttachmentModifier>, DetachDeferredAccessibilityAttachmentModifier>, EnableDeferredAccessibilityAttachmentModifier>, ModifiedContent<PlatformSliderStyle.ValueLabel<SliderStyleConfiguration.MaximumValueLabel>, _DiscreteSymbolEffectModifier<UInt32>>)>);
    }
  }
}

void type metadata accessor for (ModifiedContent<PlatformSliderStyle.ValueLabel<SliderStyleConfiguration.MinimumValueLabel>, _DiscreteSymbolEffectModifier<UInt32>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<SystemSlider, _FrameLayout>, DisableDeferredAccessibilityAttachmentModifier>, _BackgroundModifier<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<SliderStyleConfiguration.Label, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>, _HiddenModifier>, _PreferenceTransformModifier<AccessibilityAttachment.Key>>>>, AccessibilityAttachmentModifier>, DetachDeferredAccessibilityAttachmentModifier>, EnableDeferredAccessibilityAttachmentModifier>, ModifiedContent<PlatformSliderStyle.ValueLabel<SliderStyleConfiguration.MaximumValueLabel>, _DiscreteSymbolEffectModifier<UInt32>>)()
{
  if (!lazy cache variable for type metadata for (ModifiedContent<PlatformSliderStyle.ValueLabel<SliderStyleConfiguration.MinimumValueLabel>, _DiscreteSymbolEffectModifier<UInt32>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<SystemSlider, _FrameLayout>, DisableDeferredAccessibilityAttachmentModifier>, _BackgroundModifier<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<SliderStyleConfiguration.Label, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>, _HiddenModifier>, _PreferenceTransformModifier<AccessibilityAttachment.Key>>>>, AccessibilityAttachmentModifier>, DetachDeferredAccessibilityAttachmentModifier>, EnableDeferredAccessibilityAttachmentModifier>, ModifiedContent<PlatformSliderStyle.ValueLabel<SliderStyleConfiguration.MaximumValueLabel>, _DiscreteSymbolEffectModifier<UInt32>>))
  {
    type metadata accessor for ModifiedContent<PlatformSliderStyle.ValueLabel<SliderStyleConfiguration.MinimumValueLabel>, _DiscreteSymbolEffectModifier<UInt32>>(255, &lazy cache variable for type metadata for ModifiedContent<PlatformSliderStyle.ValueLabel<SliderStyleConfiguration.MinimumValueLabel>, _DiscreteSymbolEffectModifier<UInt32>>, &lazy cache variable for type metadata for PlatformSliderStyle.ValueLabel<SliderStyleConfiguration.MinimumValueLabel>, (uint64_t)&type metadata for SliderStyleConfiguration.MinimumValueLabel, (uint64_t)&protocol witness table for SliderStyleConfiguration.MinimumValueLabel);
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<SystemSlider, _FrameLayout>, DisableDeferredAccessibilityAttachmentModifier>, _BackgroundModifier<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<SliderStyleConfiguration.Label, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>, _HiddenModifier>, _PreferenceTransformModifier<AccessibilityAttachment.Key>>>>, AccessibilityAttachmentModifier>, DetachDeferredAccessibilityAttachmentModifier>, EnableDeferredAccessibilityAttachmentModifier>(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<SystemSlider, _FrameLayout>, DisableDeferredAccessibilityAttachmentModifier>, _BackgroundModifier<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<SliderStyleConfiguration.Label, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>, _HiddenModifier>, _PreferenceTransformModifier<AccessibilityAttachment.Key>>>>, AccessibilityAttachmentModifier>, DetachDeferredAccessibilityAttachmentModifier>, EnableDeferredAccessibilityAttachmentModifier>, type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<SystemSlider, _FrameLayout>, DisableDeferredAccessibilityAttachmentModifier>, _BackgroundModifier<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<SliderStyleConfiguration.Label, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>, _HiddenModifier>, _PreferenceTransformModifier<AccessibilityAttachment.Key>>>>, AccessibilityAttachmentModifier>, DetachDeferredAccessibilityAttachmentModifier>);
    type metadata accessor for ModifiedContent<PlatformSliderStyle.ValueLabel<SliderStyleConfiguration.MinimumValueLabel>, _DiscreteSymbolEffectModifier<UInt32>>(255, &lazy cache variable for type metadata for ModifiedContent<PlatformSliderStyle.ValueLabel<SliderStyleConfiguration.MaximumValueLabel>, _DiscreteSymbolEffectModifier<UInt32>>, &lazy cache variable for type metadata for PlatformSliderStyle.ValueLabel<SliderStyleConfiguration.MaximumValueLabel>, (uint64_t)&type metadata for SliderStyleConfiguration.MaximumValueLabel, (uint64_t)&protocol witness table for SliderStyleConfiguration.MaximumValueLabel);
    TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
    if (!v1) {
      atomic_store(TupleTypeMetadata3, (unint64_t *)&lazy cache variable for type metadata for (ModifiedContent<PlatformSliderStyle.ValueLabel<SliderStyleConfiguration.MinimumValueLabel>, _DiscreteSymbolEffectModifier<UInt32>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<SystemSlider, _FrameLayout>, DisableDeferredAccessibilityAttachmentModifier>, _BackgroundModifier<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<SliderStyleConfiguration.Label, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>, _HiddenModifier>, _PreferenceTransformModifier<AccessibilityAttachment.Key>>>>, AccessibilityAttachmentModifier>, DetachDeferredAccessibilityAttachmentModifier>, EnableDeferredAccessibilityAttachmentModifier>, ModifiedContent<PlatformSliderStyle.ValueLabel<SliderStyleConfiguration.MaximumValueLabel>, _DiscreteSymbolEffectModifier<UInt32>>));
    }
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<SystemSlider, _FrameLayout>, DisableDeferredAccessibilityAttachmentModifier>, _BackgroundModifier<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<SliderStyleConfiguration.Label, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>, _HiddenModifier>, _PreferenceTransformModifier<AccessibilityAttachment.Key>>>>, AccessibilityAttachmentModifier>, DetachDeferredAccessibilityAttachmentModifier>(uint64_t a1)
{
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<SystemSlider, _FrameLayout>, DisableDeferredAccessibilityAttachmentModifier>, _BackgroundModifier<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<SliderStyleConfiguration.Label, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>, _HiddenModifier>, _PreferenceTransformModifier<AccessibilityAttachment.Key>>>>, AccessibilityAttachmentModifier>, DetachDeferredAccessibilityAttachmentModifier>, EnableDeferredAccessibilityAttachmentModifier>(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = type metadata accessor for ModifiedContent();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<SystemSlider, _FrameLayout>, DisableDeferredAccessibilityAttachmentModifier>, _BackgroundModifier<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<SliderStyleConfiguration.Label, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>, _HiddenModifier>, _PreferenceTransformModifier<AccessibilityAttachment.Key>>>>, AccessibilityAttachmentModifier>(uint64_t a1)
{
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<SystemSlider, _FrameLayout>, DisableDeferredAccessibilityAttachmentModifier>, _BackgroundModifier<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<SliderStyleConfiguration.Label, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>, _HiddenModifier>, _PreferenceTransformModifier<AccessibilityAttachment.Key>>>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<SystemSlider, _FrameLayout>, DisableDeferredAccessibilityAttachmentModifier>, _BackgroundModifier<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<SliderStyleConfiguration.Label, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>, _HiddenModifier>, _PreferenceTransformModifier<AccessibilityAttachment.Key>>>>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<SystemSlider, _FrameLayout>, DisableDeferredAccessibilityAttachmentModifier>();
    type metadata accessor for _BackgroundModifier<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<SliderStyleConfiguration.Label, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>, _HiddenModifier>, _PreferenceTransformModifier<AccessibilityAttachment.Key>>>();
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<SystemSlider, _FrameLayout>, DisableDeferredAccessibilityAttachmentModifier>, _BackgroundModifier<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<SliderStyleConfiguration.Label, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>, _HiddenModifier>, _PreferenceTransformModifier<AccessibilityAttachment.Key>>>>);
    }
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<SystemSlider, _FrameLayout>, DisableDeferredAccessibilityAttachmentModifier>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<SystemSlider, _FrameLayout>, DisableDeferredAccessibilityAttachmentModifier>)
  {
    type metadata accessor for PlatformSliderStyle.ValueLabel<SliderStyleConfiguration.MinimumValueLabel>(255, &lazy cache variable for type metadata for ModifiedContent<SystemSlider, _FrameLayout>, (uint64_t)&type metadata for SystemSlider, MEMORY[0x1E4F3F6A0], MEMORY[0x1E4F3FBA0]);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<SystemSlider, _FrameLayout>, DisableDeferredAccessibilityAttachmentModifier>);
    }
  }
}

void type metadata accessor for _BackgroundModifier<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<SliderStyleConfiguration.Label, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>, _HiddenModifier>, _PreferenceTransformModifier<AccessibilityAttachment.Key>>>()
{
  if (!lazy cache variable for type metadata for _BackgroundModifier<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<SliderStyleConfiguration.Label, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>, _HiddenModifier>, _PreferenceTransformModifier<AccessibilityAttachment.Key>>>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<SliderStyleConfiguration.Label, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>, _HiddenModifier>, _PreferenceTransformModifier<AccessibilityAttachment.Key>>();
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<SliderStyleConfiguration.Label, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>, _HiddenModifier>, _PreferenceTransformModifier<AccessibilityAttachment.Key>> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<SliderStyleConfiguration.Label, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>, _HiddenModifier>, _PreferenceTransformModifier<AccessibilityAttachment.Key>> and conformance <> ModifiedContent<A, B>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<SliderStyleConfiguration.Label, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>, _HiddenModifier>, _PreferenceTransformModifier<AccessibilityAttachment.Key>>, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<SliderStyleConfiguration.Label, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>, _HiddenModifier> and conformance <> ModifiedContent<A, B>, (void (*)(void))lazy protocol witness table accessor for type _PreferenceTransformModifier<AccessibilityAttachment.Key> and conformance _PreferenceTransformModifier<A>);
    unint64_t v0 = type metadata accessor for _BackgroundModifier();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _BackgroundModifier<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<SliderStyleConfiguration.Label, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>, _HiddenModifier>, _PreferenceTransformModifier<AccessibilityAttachment.Key>>>);
    }
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<SliderStyleConfiguration.Label, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>, _HiddenModifier>, _PreferenceTransformModifier<AccessibilityAttachment.Key>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<SliderStyleConfiguration.Label, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>, _HiddenModifier>, _PreferenceTransformModifier<AccessibilityAttachment.Key>>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<SystemSlider, _FrameLayout>, DisableDeferredAccessibilityAttachmentModifier>, _BackgroundModifier<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<SliderStyleConfiguration.Label, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>, _HiddenModifier>, _PreferenceTransformModifier<AccessibilityAttachment.Key>>>>, AccessibilityAttachmentModifier>, DetachDeferredAccessibilityAttachmentModifier>, EnableDeferredAccessibilityAttachmentModifier>(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<SliderStyleConfiguration.Label, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>, _HiddenModifier>, type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<SliderStyleConfiguration.Label, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>);
    type metadata accessor for PlatformSliderStyle.ValueLabel<SliderStyleConfiguration.MinimumValueLabel>(255, (unint64_t *)&lazy cache variable for type metadata for _PreferenceTransformModifier<AccessibilityAttachment.Key>, (uint64_t)&type metadata for AccessibilityAttachment.Key, (uint64_t)&protocol witness table for AccessibilityAttachment.Key, MEMORY[0x1E4F41108]);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<SliderStyleConfiguration.Label, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>, _HiddenModifier>, _PreferenceTransformModifier<AccessibilityAttachment.Key>>);
    }
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<SliderStyleConfiguration.Label, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>(uint64_t a1)
{
}

void type metadata accessor for ModifiedContent<ModifiedContent<SliderStyleConfiguration.Label, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<SliderStyleConfiguration.Label, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>)
  {
    type metadata accessor for PlatformSliderStyle.ValueLabel<SliderStyleConfiguration.MinimumValueLabel>(255, &lazy cache variable for type metadata for ModifiedContent<SliderStyleConfiguration.Label, DetachedGeometryModifier>, (uint64_t)&type metadata for SliderStyleConfiguration.Label, (uint64_t)&type metadata for DetachedGeometryModifier, MEMORY[0x1E4F3FBA0]);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<SliderStyleConfiguration.Label, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<SliderStyleConfiguration.Label, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>, _HiddenModifier> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<SliderStyleConfiguration.Label, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>, _HiddenModifier> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<SliderStyleConfiguration.Label, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>, _HiddenModifier> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<SystemSlider, _FrameLayout>, DisableDeferredAccessibilityAttachmentModifier>, _BackgroundModifier<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<SliderStyleConfiguration.Label, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>, _HiddenModifier>, _PreferenceTransformModifier<AccessibilityAttachment.Key>>>>, AccessibilityAttachmentModifier>, DetachDeferredAccessibilityAttachmentModifier>, EnableDeferredAccessibilityAttachmentModifier>(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<SliderStyleConfiguration.Label, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>, _HiddenModifier>, type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<SliderStyleConfiguration.Label, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>);
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<SliderStyleConfiguration.Label, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<SliderStyleConfiguration.Label, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>, _HiddenModifier> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<SliderStyleConfiguration.Label, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<SliderStyleConfiguration.Label, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<SliderStyleConfiguration.Label, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<SliderStyleConfiguration.Label, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>(255);
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<SliderStyleConfiguration.Label, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>, _HiddenModifier>, _PreferenceTransformModifier<AccessibilityAttachment.Key>> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<SliderStyleConfiguration.Label, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier> and conformance <> ModifiedContent<A, B>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<SliderStyleConfiguration.Label, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<SliderStyleConfiguration.Label, DetachedGeometryModifier> and conformance <> ModifiedContent<A, B>, (void (*)(void))lazy protocol witness table accessor for type AccessibilityRepresentableStyleModifier and conformance AccessibilityRepresentableStyleModifier);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<SliderStyleConfiguration.Label, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<SliderStyleConfiguration.Label, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>, _HiddenModifier>, _PreferenceTransformModifier<AccessibilityAttachment.Key>> and conformance <> ModifiedContent<A, B>(unint64_t *a1, void (*a2)(uint64_t), void (*a3)(void), void (*a4)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    a3();
    a4();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<SliderStyleConfiguration.Label, DetachedGeometryModifier> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<SliderStyleConfiguration.Label, DetachedGeometryModifier> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<SliderStyleConfiguration.Label, DetachedGeometryModifier> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for PlatformSliderStyle.ValueLabel<SliderStyleConfiguration.MinimumValueLabel>(255, &lazy cache variable for type metadata for ModifiedContent<SliderStyleConfiguration.Label, DetachedGeometryModifier>, (uint64_t)&type metadata for SliderStyleConfiguration.Label, (uint64_t)&type metadata for DetachedGeometryModifier, MEMORY[0x1E4F3FBA0]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<SliderStyleConfiguration.Label, DetachedGeometryModifier> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<PlatformSliderStyle.ValueLabel<SliderStyleConfiguration.MinimumValueLabel>, _DiscreteSymbolEffectModifier<UInt32>>(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t a4, uint64_t a5)
{
  if (!*a2)
  {
    type metadata accessor for PlatformSliderStyle.ValueLabel<SliderStyleConfiguration.MinimumValueLabel>(255, a3, a4, a5, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PlatformSliderStyle.ValueLabel);
    type metadata accessor for PlatformSliderStyle.ValueLabel<SliderStyleConfiguration.MinimumValueLabel>(255, &lazy cache variable for type metadata for _DiscreteSymbolEffectModifier<UInt32>, MEMORY[0x1E4FBC4C0], MEMORY[0x1E4FBC4E0], (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for _DiscreteSymbolEffectModifier);
    unint64_t v6 = type metadata accessor for ModifiedContent();
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

void type metadata accessor for PlatformSliderStyle.ValueLabel<SliderStyleConfiguration.MinimumValueLabel>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = a5(0, a3, a4);
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

uint64_t lazy protocol witness table accessor for type TupleView<(ModifiedContent<PlatformSliderStyle.ValueLabel<SliderStyleConfiguration.MinimumValueLabel>, _DiscreteSymbolEffectModifier<UInt32>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<SystemSlider, _FrameLayout>, DisableDeferredAccessibilityAttachmentModifier>, _BackgroundModifier<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<SliderStyleConfiguration.Label, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>, _HiddenModifier>, _PreferenceTransformModifier<AccessibilityAttachment.Key>>>>, AccessibilityAttachmentModifier>, DetachDeferredAccessibilityAttachmentModifier>, EnableDeferredAccessibilityAttachmentModifier>, ModifiedContent<PlatformSliderStyle.ValueLabel<SliderStyleConfiguration.MaximumValueLabel>, _DiscreteSymbolEffectModifier<UInt32>>)> and conformance TupleView<A>(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t outlined init with copy of _DiscreteSymbolEffectModifier<UInt32>(uint64_t a1, uint64_t a2)
{
  type metadata accessor for PlatformSliderStyle.ValueLabel<SliderStyleConfiguration.MinimumValueLabel>(0, &lazy cache variable for type metadata for _DiscreteSymbolEffectModifier<UInt32>, MEMORY[0x1E4FBC4C0], MEMORY[0x1E4FBC4E0], (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for _DiscreteSymbolEffectModifier);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of _DiscreteSymbolEffectModifier<UInt32>(uint64_t a1)
{
  type metadata accessor for PlatformSliderStyle.ValueLabel<SliderStyleConfiguration.MinimumValueLabel>(0, &lazy cache variable for type metadata for _DiscreteSymbolEffectModifier<UInt32>, MEMORY[0x1E4FBC4C0], MEMORY[0x1E4FBC4E0], (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for _DiscreteSymbolEffectModifier);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_188304ED8()
{
  return swift_deallocObject();
}

uint64_t outlined init with take of ModifiedContent<PlatformSliderStyle.ValueLabel<SliderStyleConfiguration.MinimumValueLabel>, _DiscreteSymbolEffectModifier<UInt32>>(uint64_t a1, uint64_t a2, unint64_t *a3, unint64_t *a4, uint64_t a5, uint64_t a6)
{
  type metadata accessor for ModifiedContent<PlatformSliderStyle.ValueLabel<SliderStyleConfiguration.MinimumValueLabel>, _DiscreteSymbolEffectModifier<UInt32>>(0, a3, a4, a5, a6);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 32))(a2, a1, v8);
  return a2;
}

uint64_t outlined init with copy of ModifiedContent<PlatformSliderStyle.ValueLabel<SliderStyleConfiguration.MinimumValueLabel>, _DiscreteSymbolEffectModifier<UInt32>>(uint64_t a1, uint64_t a2, unint64_t *a3, unint64_t *a4, uint64_t a5, uint64_t a6)
{
  type metadata accessor for ModifiedContent<PlatformSliderStyle.ValueLabel<SliderStyleConfiguration.MinimumValueLabel>, _DiscreteSymbolEffectModifier<UInt32>>(0, a3, a4, a5, a6);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 16))(a2, a1, v8);
  return a2;
}

uint64_t outlined retain of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<SystemSlider, _FrameLayout>, DisableDeferredAccessibilityAttachmentModifier>, _BackgroundModifier<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<SliderStyleConfiguration.Label, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>, _HiddenModifier>, _PreferenceTransformModifier<AccessibilityAttachment.Key>>>>, AccessibilityAttachmentModifier>, DetachDeferredAccessibilityAttachmentModifier>, EnableDeferredAccessibilityAttachmentModifier>(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 64);
  uint64_t v3 = *(unsigned __int8 *)(a1 + 72);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  outlined copy of Environment<Color?>.Content(v2, v3);
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t outlined destroy of ModifiedContent<PlatformSliderStyle.ValueLabel<SliderStyleConfiguration.MaximumValueLabel>, _DiscreteSymbolEffectModifier<UInt32>>(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t a4, uint64_t a5)
{
  type metadata accessor for ModifiedContent<PlatformSliderStyle.ValueLabel<SliderStyleConfiguration.MinimumValueLabel>, _DiscreteSymbolEffectModifier<UInt32>>(0, a2, a3, a4, a5);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(a1, v6);
  return a1;
}

uint64_t outlined release of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<SystemSlider, _FrameLayout>, DisableDeferredAccessibilityAttachmentModifier>, _BackgroundModifier<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<SliderStyleConfiguration.Label, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>, _HiddenModifier>, _PreferenceTransformModifier<AccessibilityAttachment.Key>>>>, AccessibilityAttachmentModifier>, DetachDeferredAccessibilityAttachmentModifier>, EnableDeferredAccessibilityAttachmentModifier>(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 64);
  uint64_t v3 = *(unsigned __int8 *)(a1 + 72);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  outlined consume of Environment<Color?>.Content(v2, v3);
  swift_release();
  swift_release();
  swift_release();
  return a1;
}

uint64_t outlined retain of ModifiedContent<SystemSlider, _FrameLayout>(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 64);
  uint64_t v3 = *(unsigned __int8 *)(a1 + 72);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  outlined copy of Environment<Color?>.Content(v2, v3);
  return a1;
}

uint64_t partial apply for closure #1 in Coordinator.valueChanged(_:)()
{
  return partial apply for closure #1 in Coordinator.valueChanged(_:)(1);
}

void type metadata accessor for State<PlatformSliderStyle.SymbolEffectState>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

uint64_t partial apply for closure #1 in Coordinator.valueChanged(_:)(uint64_t a1)
{
  uint64_t v3 = *(void (**)(uint64_t))(*(void *)(v1 + 16)
                                      + OBJC_IVAR____TtC7SwiftUIP33_8AA246B2E0E916EFA5AD706DCC8A0FE811Coordinator_configuration
                                      + 24);
  swift_retain();
  v3(a1);

  return swift_release();
}

uint64_t sub_1883052BC()
{
  return lazy protocol witness table accessor for type TupleView<(ModifiedContent<PlatformSliderStyle.ValueLabel<SliderStyleConfiguration.MinimumValueLabel>, _DiscreteSymbolEffectModifier<UInt32>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<SystemSlider, _FrameLayout>, DisableDeferredAccessibilityAttachmentModifier>, _BackgroundModifier<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<SliderStyleConfiguration.Label, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>, _HiddenModifier>, _PreferenceTransformModifier<AccessibilityAttachment.Key>>>>, AccessibilityAttachmentModifier>, DetachDeferredAccessibilityAttachmentModifier>, EnableDeferredAccessibilityAttachmentModifier>, ModifiedContent<PlatformSliderStyle.ValueLabel<SliderStyleConfiguration.MaximumValueLabel>, _DiscreteSymbolEffectModifier<UInt32>>)> and conformance TupleView<A>(&lazy protocol witness table cache variable for type HStack<TupleView<(ModifiedContent<PlatformSliderStyle.ValueLabel<SliderStyleConfiguration.MinimumValueLabel>, _DiscreteSymbolEffectModifier<UInt32>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<SystemSlider, _FrameLayout>, DisableDeferredAccessibilityAttachmentModifier>, _BackgroundModifier<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<SliderStyleConfiguration.Label, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>, _HiddenModifier>, _PreferenceTransformModifier<AccessibilityAttachment.Key>>>>, AccessibilityAttachmentModifier>, DetachDeferredAccessibilityAttachmentModifier>, EnableDeferredAccessibilityAttachmentModifier>, ModifiedContent<PlatformSliderStyle.ValueLabel<SliderStyleConfiguration.MaximumValueLabel>, _DiscreteSymbolEffectModifier<UInt32>>)>> and conformance HStack<A>, (void (*)(uint64_t))type metadata accessor for HStack<TupleView<(ModifiedContent<PlatformSliderStyle.ValueLabel<SliderStyleConfiguration.MinimumValueLabel>, _DiscreteSymbolEffectModifier<UInt32>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<SystemSlider, _FrameLayout>, DisableDeferredAccessibilityAttachmentModifier>, _BackgroundModifier<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<SliderStyleConfiguration.Label, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>, _HiddenModifier>, _PreferenceTransformModifier<AccessibilityAttachment.Key>>>>, AccessibilityAttachmentModifier>, DetachDeferredAccessibilityAttachmentModifier>, EnableDeferredAccessibilityAttachmentModifier>, ModifiedContent<PlatformSliderStyle.ValueLabel<SliderStyleConfiguration.MaximumValueLabel>, _DiscreteSymbolEffectModifier<UInt32>>)>>);
}

void type metadata accessor for HStack<TupleView<(ModifiedContent<PlatformSliderStyle.ValueLabel<SliderStyleConfiguration.MinimumValueLabel>, _DiscreteSymbolEffectModifier<UInt32>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<SystemSlider, _FrameLayout>, DisableDeferredAccessibilityAttachmentModifier>, _BackgroundModifier<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<SliderStyleConfiguration.Label, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>, _HiddenModifier>, _PreferenceTransformModifier<AccessibilityAttachment.Key>>>>, AccessibilityAttachmentModifier>, DetachDeferredAccessibilityAttachmentModifier>, EnableDeferredAccessibilityAttachmentModifier>, ModifiedContent<PlatformSliderStyle.ValueLabel<SliderStyleConfiguration.MaximumValueLabel>, _DiscreteSymbolEffectModifier<UInt32>>)>>()
{
  if (!lazy cache variable for type metadata for HStack<TupleView<(ModifiedContent<PlatformSliderStyle.ValueLabel<SliderStyleConfiguration.MinimumValueLabel>, _DiscreteSymbolEffectModifier<UInt32>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<SystemSlider, _FrameLayout>, DisableDeferredAccessibilityAttachmentModifier>, _BackgroundModifier<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<SliderStyleConfiguration.Label, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>, _HiddenModifier>, _PreferenceTransformModifier<AccessibilityAttachment.Key>>>>, AccessibilityAttachmentModifier>, DetachDeferredAccessibilityAttachmentModifier>, EnableDeferredAccessibilityAttachmentModifier>, ModifiedContent<PlatformSliderStyle.ValueLabel<SliderStyleConfiguration.MaximumValueLabel>, _DiscreteSymbolEffectModifier<UInt32>>)>>)
  {
    type metadata accessor for TupleView<(ModifiedContent<PlatformSliderStyle.ValueLabel<SliderStyleConfiguration.MinimumValueLabel>, _DiscreteSymbolEffectModifier<UInt32>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<SystemSlider, _FrameLayout>, DisableDeferredAccessibilityAttachmentModifier>, _BackgroundModifier<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<SliderStyleConfiguration.Label, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>, _HiddenModifier>, _PreferenceTransformModifier<AccessibilityAttachment.Key>>>>, AccessibilityAttachmentModifier>, DetachDeferredAccessibilityAttachmentModifier>, EnableDeferredAccessibilityAttachmentModifier>, ModifiedContent<PlatformSliderStyle.ValueLabel<SliderStyleConfiguration.MaximumValueLabel>, _DiscreteSymbolEffectModifier<UInt32>>)>();
    lazy protocol witness table accessor for type TupleView<(ModifiedContent<PlatformSliderStyle.ValueLabel<SliderStyleConfiguration.MinimumValueLabel>, _DiscreteSymbolEffectModifier<UInt32>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<SystemSlider, _FrameLayout>, DisableDeferredAccessibilityAttachmentModifier>, _BackgroundModifier<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<SliderStyleConfiguration.Label, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>, _HiddenModifier>, _PreferenceTransformModifier<AccessibilityAttachment.Key>>>>, AccessibilityAttachmentModifier>, DetachDeferredAccessibilityAttachmentModifier>, EnableDeferredAccessibilityAttachmentModifier>, ModifiedContent<PlatformSliderStyle.ValueLabel<SliderStyleConfiguration.MaximumValueLabel>, _DiscreteSymbolEffectModifier<UInt32>>)> and conformance TupleView<A>(&lazy protocol witness table cache variable for type TupleView<(ModifiedContent<PlatformSliderStyle.ValueLabel<SliderStyleConfiguration.MinimumValueLabel>, _DiscreteSymbolEffectModifier<UInt32>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<SystemSlider, _FrameLayout>, DisableDeferredAccessibilityAttachmentModifier>, _BackgroundModifier<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<SliderStyleConfiguration.Label, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>, _HiddenModifier>, _PreferenceTransformModifier<AccessibilityAttachment.Key>>>>, AccessibilityAttachmentModifier>, DetachDeferredAccessibilityAttachmentModifier>, EnableDeferredAccessibilityAttachmentModifier>, ModifiedContent<PlatformSliderStyle.ValueLabel<SliderStyleConfiguration.MaximumValueLabel>, _DiscreteSymbolEffectModifier<UInt32>>)> and conformance TupleView<A>, (void (*)(uint64_t))type metadata accessor for TupleView<(ModifiedContent<PlatformSliderStyle.ValueLabel<SliderStyleConfiguration.MinimumValueLabel>, _DiscreteSymbolEffectModifier<UInt32>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<SystemSlider, _FrameLayout>, DisableDeferredAccessibilityAttachmentModifier>, _BackgroundModifier<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<SliderStyleConfiguration.Label, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>, _HiddenModifier>, _PreferenceTransformModifier<AccessibilityAttachment.Key>>>>, AccessibilityAttachmentModifier>, DetachDeferredAccessibilityAttachmentModifier>, EnableDeferredAccessibilityAttachmentModifier>, ModifiedContent<PlatformSliderStyle.ValueLabel<SliderStyleConfiguration.MaximumValueLabel>, _DiscreteSymbolEffectModifier<UInt32>>)>);
    unint64_t v0 = type metadata accessor for HStack();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for HStack<TupleView<(ModifiedContent<PlatformSliderStyle.ValueLabel<SliderStyleConfiguration.MinimumValueLabel>, _DiscreteSymbolEffectModifier<UInt32>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<SystemSlider, _FrameLayout>, DisableDeferredAccessibilityAttachmentModifier>, _BackgroundModifier<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<SliderStyleConfiguration.Label, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>, _HiddenModifier>, _PreferenceTransformModifier<AccessibilityAttachment.Key>>>>, AccessibilityAttachmentModifier>, DetachDeferredAccessibilityAttachmentModifier>, EnableDeferredAccessibilityAttachmentModifier>, ModifiedContent<PlatformSliderStyle.ValueLabel<SliderStyleConfiguration.MaximumValueLabel>, _DiscreteSymbolEffectModifier<UInt32>>)>>);
    }
  }
}

uint64_t static _PreferenceTransformModifier._makeScene(modifier:inputs:body:)@<X0>(void (*a1)(uint64_t *__return_ptr)@<X2>, uint64_t a2@<X8>)
{
  a1(&v5);
  swift_bridgeObjectRetain();
  PreferencesOutputs.makePreferenceTransformer<A>(inputs:key:transform:)();
  uint64_t result = swift_bridgeObjectRelease();
  int v4 = v6;
  *(void *)a2 = v5;
  *(_DWORD *)(a2 + 8) = v4;
  return result;
}

uint64_t Scene.preference<A>(key:value:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v23 = a5;
  uint64_t v22 = a3;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v10 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  double v12 = (char *)&v21 - v11;
  uint64_t v13 = type metadata accessor for _PreferenceWritingModifier();
  uint64_t v14 = *(void *)(v13 - 8);
  double v15 = MEMORY[0x1F4188790](v13);
  uint64_t v17 = (char *)&v21 - v16;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v10 + 16))(v12, a2, AssociatedTypeWitness, v15);
  destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(a4, a6, v18, v19);
  _PreferenceWritingModifier.init(key:value:)();
  Scene.modifier<A>(_:)(v17, v22, v13, v23);
  return (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v17, v13);
}

uint64_t implicit closure #1 in static _PreferenceTransformModifier._makeScene(modifier:inputs:body:)(int a1, uint64_t a2, uint64_t a3)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  int v16 = a1;
  type metadata accessor for _PreferenceTransformModifier();
  type metadata accessor for _GraphValue();
  int v5 = _GraphValue.value.getter();
  uint64_t v18 = a2;
  uint64_t v19 = a3;
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v7 = dispatch thunk of AnyKeyPath._storedInlineOffset.getter();
  if (v8)
  {
    int v16 = v5;
    uint64_t v17 = KeyPath;
    MEMORY[0x1F4188790](v7);
    uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    _OWORD v13[2] = swift_getFunctionTypeMetadata();
    uint64_t v14 = type metadata accessor for Focus();
    uint64_t WitnessTable = swift_getWitnessTable();
    uint64_t v10 = type metadata accessor for Attribute();
    swift_retain();
    _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v16, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TA_4, (uint64_t)v13, v14, MEMORY[0x1E4FBC248], v10, MEMORY[0x1E4FBC278], v11);
    swift_release();
    swift_release();
    return AssociatedTypeWitness;
  }
  else
  {
    uint64_t OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
    swift_release();
  }
  return OffsetAttribute2;
}

uint64_t partial apply for implicit closure #1 in static _PreferenceTransformModifier._makeScene(modifier:inputs:body:)()
{
  return implicit closure #1 in static _PreferenceTransformModifier._makeScene(modifier:inputs:body:)(*(_DWORD *)(v0 + 32), *(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t protocol witness for static _SceneModifier._makeScene(modifier:inputs:body:) in conformance _PreferenceTransformModifier<A>@<X0>(void (*a1)(uint64_t *__return_ptr)@<X2>, uint64_t a2@<X8>)
{
  return static _PreferenceTransformModifier._makeScene(modifier:inputs:body:)(a1, a2);
}

uint64_t Scene.transformPreference<A>(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(a5, a7, a3, a4);
  swift_retain();
  v12[0] = _PreferenceTransformModifier.init(key:transform:)();
  v12[1] = v9;
  uint64_t v10 = type metadata accessor for _PreferenceTransformModifier();
  Scene.modifier<A>(_:)(v12, a4, v10, a6);
  return swift_release();
}

uint64_t sub_188305940(uint64_t a1)
{
  return get_witness_table_7SwiftUI5SceneRzAA13PreferenceKeyRd__r__lAA15ModifiedContentVyxAA01_D15WritingModifierVyqd__GGAaBHpxAaBHD1__AhA01_cI0HpyHCHCTm(a1, MEMORY[0x1E4F40F90]);
}

uint64_t sub_188305960(uint64_t a1)
{
  return get_witness_table_7SwiftUI5SceneRzAA13PreferenceKeyRd__r__lAA15ModifiedContentVyxAA01_D15WritingModifierVyqd__GGAaBHpxAaBHD1__AhA01_cI0HpyHCHCTm(a1, MEMORY[0x1E4F41108]);
}

uint64_t get_witness_table_7SwiftUI5SceneRzAA13PreferenceKeyRd__r__lAA15ModifiedContentVyxAA01_D15WritingModifierVyqd__GGAaBHpxAaBHD1__AhA01_cI0HpyHCHCTm(uint64_t a1, void (*a2)(uint64_t, void, void))
{
  return swift_getWitnessTable();
}

uint64_t sub_188305A04()
{
  return 16;
}

__n128 sub_188305A10(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t ScaledClarityUIMetric.wrappedValue.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v20 = a2;
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](a1);
  int v6 = (char *)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v7);
  uint64_t v9 = *(int *)(v8 + 44);
  uint64_t v10 = v2 + *(int *)(v8 + 40);
  uint64_t v18 = (char *)&v17 - v11;
  uint64_t v19 = v10;
  LOBYTE(v21) = *(unsigned char *)(v2 + v9);
  char v12 = LOBYTE(v21);
  ScaledClarityUIMetric.dynamicTypeSize.getter(&v22);
  double v13 = MEMORY[0x18C112CD0](&v21, &v22);
  LOBYTE(v21) = v12;
  char v22 = 7;
  double v21 = v13 / MEMORY[0x18C112CD0](&v21, &v22);
  lazy protocol witness table accessor for type CGFloat and conformance CGFloat();
  dispatch thunk of BinaryFloatingPoint.init<A>(_:)();
  dispatch thunk of static Numeric.* infix(_:_:)();
  uint64_t v14 = *(void (**)(void, void))(v4 + 8);
  v14(v6, v3);
  double v21 = ScaledClarityUIMetric.pixelLength.getter();
  dispatch thunk of BinaryFloatingPoint.init<A>(_:)();
  double v15 = v18;
  FloatingPoint.rounded(toMultipleOf:)();
  v14(v6, v3);
  return ((uint64_t (*)(char *, uint64_t))v14)(v15, v3);
}

uint64_t ScaledClarityUIMetric.init(wrappedValue:relativeTo:)@<X0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  char v7 = *a2;
  *(void *)a4 = swift_getKeyPath();
  *(unsigned char *)(a4 + 8) = 0;
  *(void *)(a4 + 16) = swift_getKeyPath();
  *(unsigned char *)(a4 + 24) = 0;
  uint64_t v8 = type metadata accessor for ScaledClarityUIMetric();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a3 - 8) + 32))(a4 + *(int *)(v8 + 40), a1, a3);
  *(unsigned char *)(a4 + *(int *)(v8 + 44)) = v7;
  return result;
}

uint64_t ScaledClarityUIMetric.dynamicTypeSize.getter@<X0>(unsigned char *a1@<X8>)
{
  uint64_t v3 = *(void *)v1;
  char v4 = *(unsigned char *)(v1 + 8);
  outlined copy of Environment<Bool>.Content(v3, v4);
  specialized Environment.wrappedValue.getter(v3, v4, a1);

  return outlined consume of Environment<Bool>.Content(v3, v4);
}

double ScaledClarityUIMetric.pixelLength.getter()
{
  uint64_t v1 = *(void *)(v0 + 16);
  char v2 = *(unsigned char *)(v0 + 24);
  outlined copy of Environment<Bool>.Content(v1, v2);
  double v3 = specialized Environment.wrappedValue.getter(v1, v2);
  outlined consume of Environment<Bool>.Content(v1, v2);
  return v3;
}

uint64_t type metadata accessor for ScaledClarityUIMetric()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata completion function for ScaledClarityUIMetric()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t destroy for ScaledClarityUIMetric(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a1;
  outlined consume of Environment<Bool>.Content(*(void *)a1, *(unsigned char *)(a1 + 8));
  v3 &= 0xFFFFFFFFFFFFFFF8;
  outlined consume of Environment<Bool>.Content(*(void *)(v3 + 16), *(unsigned char *)(v3 + 24));
  uint64_t v4 = *(void *)(*(void *)(a2 + 16) - 8);
  uint64_t v5 = *(uint64_t (**)(unint64_t))(v4 + 8);
  unint64_t v6 = (v3 + *(unsigned __int8 *)(v4 + 80) + 25) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);

  return v5(v6);
}

uint64_t assignWithCopy for ScaledClarityUIMetric(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)a2;
  char v7 = *(unsigned char *)(a2 + 8);
  outlined copy of Environment<Bool>.Content(*(void *)a2, v7);
  uint64_t v8 = *(void *)a1;
  char v9 = *(unsigned char *)(a1 + 8);
  *(void *)a1 = v6;
  *(unsigned char *)(a1 + 8) = v7;
  outlined consume of Environment<Bool>.Content(v8, v9);
  unint64_t v10 = a1 & 0xFFFFFFFFFFFFFFF8;
  unint64_t v11 = a2 & 0xFFFFFFFFFFFFFFF8;
  uint64_t v12 = *(void *)((a2 & 0xFFFFFFFFFFFFFFF8) + 16);
  LOBYTE(v6) = *(unsigned char *)(v11 + 24);
  outlined copy of Environment<Bool>.Content(v12, v6);
  uint64_t v13 = *(void *)((a1 & 0xFFFFFFFFFFFFFFF8) + 16);
  char v14 = *(unsigned char *)((a1 & 0xFFFFFFFFFFFFFFF8) + 24);
  *(void *)(v10 + 16) = v12;
  *(unsigned char *)(v10 + 24) = v6;
  outlined consume of Environment<Bool>.Content(v13, v14);
  uint64_t v15 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v16 = v15 + 24;
  uint64_t v17 = *(unsigned __int8 *)(v15 + 80);
  unint64_t v18 = (v17 + 25 + (a1 & 0xFFFFFFFFFFFFFFF8)) & ~v17;
  uint64_t v19 = (v17 + 25 + v11) & ~v17;
  (*(void (**)(unint64_t, uint64_t))(v15 + 24))(v18, v19);
  *(unsigned char *)(*(void *)(v16 + 40) + v18) = *(unsigned char *)(*(void *)(v16 + 40) + v19);
  return a1;
}

uint64_t initializeWithTake for ScaledClarityUIMetric(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  unint64_t v4 = a1 & 0xFFFFFFFFFFFFFFF8;
  uint64_t v5 = *(void *)((a2 & 0xFFFFFFFFFFFFFFF8) + 16);
  *(unsigned char *)(v4 + 24) = *(unsigned char *)((a2 & 0xFFFFFFFFFFFFFFF8) + 24);
  *(void *)(v4 + 16) = v5;
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v7 = v6 + 32;
  uint64_t v8 = *(unsigned __int8 *)(v6 + 80);
  unint64_t v9 = (v8 + 25 + (a1 & 0xFFFFFFFFFFFFFFF8)) & ~v8;
  unint64_t v10 = (v8 + 25 + (a2 & 0xFFFFFFFFFFFFFFF8)) & ~v8;
  (*(void (**)(unint64_t, unint64_t))(v6 + 32))(v9, v10);
  *(unsigned char *)(*(void *)(v7 + 32) + v9) = *(unsigned char *)(*(void *)(v7 + 32) + v10);
  return a1;
}

uint64_t assignWithTake for ScaledClarityUIMetric(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  unint64_t v4 = a2;
  uint64_t v6 = *a2;
  char v7 = *((unsigned char *)a2 + 8);
  uint64_t v8 = *(void *)a1;
  char v9 = *(unsigned char *)(a1 + 8);
  *(void *)a1 = v6;
  *(unsigned char *)(a1 + 8) = v7;
  outlined consume of Environment<Bool>.Content(v8, v9);
  unint64_t v10 = a1 & 0xFFFFFFFFFFFFFFF8;
  unint64_t v4 = (uint64_t *)((unint64_t)v4 & 0xFFFFFFFFFFFFFFF8);
  char v11 = *((unsigned char *)v4 + 24);
  uint64_t v12 = *(void *)((a1 & 0xFFFFFFFFFFFFFFF8) + 16);
  char v13 = *(unsigned char *)((a1 & 0xFFFFFFFFFFFFFFF8) + 24);
  *(void *)(v10 + 16) = v4[2];
  *(unsigned char *)(v10 + 24) = v11;
  outlined consume of Environment<Bool>.Content(v12, v13);
  uint64_t v14 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v15 = v14 + 40;
  uint64_t v16 = *(unsigned __int8 *)(v14 + 80);
  unint64_t v17 = (v16 + 25 + (a1 & 0xFFFFFFFFFFFFFFF8)) & ~v16;
  uint64_t v18 = ((unint64_t)v4 + v16 + 25) & ~v16;
  (*(void (**)(unint64_t, uint64_t))(v14 + 40))(v17, v18);
  *(unsigned char *)(*(void *)(v15 + 24) + v17) = *(unsigned char *)(*(void *)(v15 + 24) + v18);
  return a1;
}

uint64_t getEnumTagSinglePayload for ScaledClarityUIMetric(unint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  if (v5 <= 0xFE) {
    unsigned int v7 = 254;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  int v8 = a2 - v7;
  if (a2 <= v7) {
    goto LABEL_23;
  }
  uint64_t v9 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) + ((v6 + 25) & ~v6) + 1;
  char v10 = 8 * v9;
  if (v9 <= 3)
  {
    unsigned int v13 = ((v8 + ~(-1 << v10)) >> v10) + 1;
    if (HIWORD(v13))
    {
      int v11 = *(_DWORD *)(a1 + v9);
      if (!v11) {
        goto LABEL_23;
      }
      goto LABEL_15;
    }
    if (v13 > 0xFF)
    {
      int v11 = *(unsigned __int16 *)(a1 + v9);
      if (!*(_WORD *)(a1 + v9)) {
        goto LABEL_23;
      }
      goto LABEL_15;
    }
    if (v13 < 2)
    {
LABEL_23:
      if (v5 > 0xFE) {
        return (*(uint64_t (**)(unint64_t))(v4 + 48))(((a1 & 0xFFFFFFFFFFFFFFF8) + v6 + 25) & ~v6);
      }
      unsigned int v15 = *(unsigned __int8 *)(a1 + 8);
      if (v15 > 1) {
        return (v15 ^ 0xFF) + 1;
      }
      else {
        return 0;
      }
    }
  }
  int v11 = *(unsigned __int8 *)(a1 + v9);
  if (!*(unsigned char *)(a1 + v9)) {
    goto LABEL_23;
  }
LABEL_15:
  int v14 = (v11 - 1) << v10;
  if (v9 > 3) {
    int v14 = 0;
  }
  if (v9)
  {
    if (v9 > 3) {
      LODWORD(v9) = 4;
    }
    switch((int)v9)
    {
      case 2:
        LODWORD(v9) = *(unsigned __int16 *)a1;
        break;
      case 3:
        LODWORD(v9) = *(unsigned __int16 *)a1 | (*(unsigned __int8 *)(a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v9) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v9) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v7 + (v9 | v14) + 1;
}

void storeEnumTagSinglePayload for ScaledClarityUIMetric(unint64_t a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0xFE) {
    unsigned int v8 = 254;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(unsigned __int8 *)(v6 + 80);
  size_t v10 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64) + ((v9 + 25) & ~v9) + 1;
  BOOL v11 = a3 >= v8;
  unsigned int v12 = a3 - v8;
  if (v12 != 0 && v11)
  {
    if (v10 <= 3)
    {
      unsigned int v16 = ((v12 + ~(-1 << (8 * v10))) >> (8 * v10)) + 1;
      if (HIWORD(v16))
      {
        int v13 = 4;
      }
      else if (v16 >= 0x100)
      {
        int v13 = 2;
      }
      else
      {
        int v13 = v16 > 1;
      }
    }
    else
    {
      int v13 = 1;
    }
  }
  else
  {
    int v13 = 0;
  }
  if (v8 < a2)
  {
    unsigned int v14 = ~v8 + a2;
    if (v10 < 4)
    {
      int v15 = (v14 >> (8 * v10)) + 1;
      if (*(_DWORD *)(*(void *)(*(void *)(a4 + 16) - 8) + 64) + ((v9 + 25) & ~v9) != -1)
      {
        int v17 = v14 & ~(-1 << (8 * v10));
        bzero((void *)a1, v10);
        if (v10 == 3)
        {
          *(_WORD *)a1 = v17;
          *(unsigned char *)(a1 + 2) = BYTE2(v17);
        }
        else if (v10 == 2)
        {
          *(_WORD *)a1 = v17;
        }
        else
        {
          *(unsigned char *)a1 = v17;
        }
      }
    }
    else
    {
      bzero((void *)a1, v10);
      *(_DWORD *)a1 = v14;
      int v15 = 1;
    }
    switch(v13)
    {
      case 1:
        *(unsigned char *)(a1 + v10) = v15;
        return;
      case 2:
        *(_WORD *)(a1 + v10) = v15;
        return;
      case 3:
        goto LABEL_41;
      case 4:
        *(_DWORD *)(a1 + v10) = v15;
        return;
      default:
        return;
    }
  }
  switch(v13)
  {
    case 1:
      *(unsigned char *)(a1 + v10) = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 2:
      *(_WORD *)(a1 + v10) = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 3:
LABEL_41:
      __break(1u);
      JUMPOUT(0x18830657CLL);
    case 4:
      *(_DWORD *)(a1 + v10) = 0;
      goto LABEL_23;
    default:
LABEL_23:
      if (a2)
      {
LABEL_24:
        if (v7 > 0xFE)
        {
          unint64_t v18 = ((a1 & 0xFFFFFFFFFFFFFFF8) + v9 + 25) & ~v9;
          uint64_t v19 = *(void (**)(unint64_t))(v6 + 56);
          v19(v18);
        }
        else if (a2 > 0xFE)
        {
          *(unsigned char *)(a1 + 8) = 0;
          *(void *)a1 = a2 - 255;
        }
        else
        {
          *(unsigned char *)(a1 + 8) = -(char)a2;
        }
      }
      return;
  }
}

double AccessoryCircularGaugeStyle.makeBody(configuration:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  double result = *(double *)a1;
  char v3 = *(unsigned char *)(a1 + 8);
  char v4 = *(unsigned char *)(a1 + 9);
  unsigned __int8 v5 = *(unsigned char *)(a1 + 10);
  *(void *)a2 = *(void *)a1;
  *(unsigned char *)(a2 + 8) = v3;
  *(unsigned char *)(a2 + 9) = v4;
  *(_WORD *)(a2 + 10) = v5;
  *(void *)(a2 + 16) = 0;
  return result;
}

uint64_t associated type witness table accessor for GaugeStyle.Body : View in AccessoryCircularGaugeStyle()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for GaugeStyle.Body : View in CircularDashboardGaugeStyle()
{
  return swift_getOpaqueTypeConformance2();
}

ValueMetadata *type metadata accessor for AccessoryCircularGaugeStyle()
{
  return &type metadata for AccessoryCircularGaugeStyle;
}

ValueMetadata *type metadata accessor for CircularDashboardGaugeStyle()
{
  return &type metadata for CircularDashboardGaugeStyle;
}

void Window.body.getter()
{
}

void Window.init(_:id:content:)(uint64_t a1, uint64_t a2, char a3)
{
}

void Window.init(_:id:content:)()
{
}

void Window.init<A>(_:id:content:)()
{
}

uint64_t associated type witness table accessor for Scene.Body : Scene in Window<A>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t type metadata completion function for Window()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for Window(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(_DWORD *)(v5 + 80);
  uint64_t v7 = *(void *)(v5 + 64) + 7;
  if (v6 > 7
    || (*(_DWORD *)(v5 + 80) & 0x100000) != 0
    || ((v7 + ((v6 + 48) & ~v6)) & 0xFFFFFFFFFFFFFFF8) + 17 > 0x18)
  {
    uint64_t v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v6 & 0xF8 ^ 0x1F8) & (v6 + 16)));
    swift_retain();
  }
  else
  {
    uint64_t v11 = ~v6;
    uint64_t v12 = a2[1];
    *a1 = *a2;
    a1[1] = v12;
    unint64_t v13 = ((unint64_t)a1 + 23) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v14 = ((unint64_t)a2 + 23) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v15 = *(void *)(v14 + 24);
    swift_bridgeObjectRetain();
    if (v15 < 0xFFFFFFFF)
    {
      long long v19 = *(_OWORD *)(v14 + 16);
      *(_OWORD *)unint64_t v13 = *(_OWORD *)v14;
      *(_OWORD *)(v13 + 16) = v19;
    }
    else
    {
      uint64_t v16 = *(void *)v14;
      uint64_t v17 = *(void *)(v14 + 8);
      char v18 = *(unsigned char *)(v14 + 16);
      outlined copy of Text.Storage(*(void *)v14, v17, v18);
      *(void *)unint64_t v13 = v16;
      *(void *)(v13 + 8) = v17;
      uint64_t v11 = ~v6;
      *(unsigned char *)(v13 + 16) = v18;
      *(void *)(v13 + 24) = *(void *)(v14 + 24);
      swift_bridgeObjectRetain();
    }
    uint64_t v20 = (v13 + v6 + 32) & v11;
    uint64_t v21 = (v14 + v6 + 32) & v11;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v20, v21, v4);
    unint64_t v22 = (v7 + v20) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v23 = (v7 + v21) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v24 = *(void *)v23;
    uint64_t v25 = *(void *)(v23 + 8);
    LOBYTE(v21) = *(unsigned char *)(v23 + 16);
    outlined copy of Environment<EnvironmentValues>.Content(*(void *)v23, v25, v21);
    *(void *)unint64_t v22 = v24;
    *(void *)(v22 + 8) = v25;
    *(unsigned char *)(v22 + 16) = v21;
  }
  return a1;
}

uint64_t destroy for Window(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  unint64_t v4 = (a1 + 23) & 0xFFFFFFFFFFFFFFF8;
  if (*(void *)(v4 + 24) >= 0xFFFFFFFFuLL)
  {
    outlined consume of Text.Storage(*(void *)v4, *(void *)(v4 + 8), *(unsigned char *)(v4 + 16));
    swift_bridgeObjectRelease();
  }
  uint64_t v5 = *(void *)(*(void *)(a2 + 16) - 8);
  uint64_t v6 = v5 + 8;
  unint64_t v7 = (v4 + *(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  (*(void (**)(unint64_t))(v5 + 8))(v7);
  unint64_t v8 = (*(void *)(v6 + 56) + v7 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v9 = *(void *)v8;
  uint64_t v10 = *(void *)(v8 + 8);
  char v11 = *(unsigned char *)(v8 + 16);

  return outlined consume of Environment<EnvironmentValues>.Content(v9, v10, v11);
}

void *initializeWithCopy for Window(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5 = a2[1];
  *a1 = *a2;
  a1[1] = v5;
  unint64_t v6 = ((unint64_t)a1 + 23) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v7 = ((unint64_t)a2 + 23) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v8 = *(void *)(v7 + 24);
  swift_bridgeObjectRetain();
  if (v8 < 0xFFFFFFFF)
  {
    long long v12 = *(_OWORD *)(v7 + 16);
    *(_OWORD *)unint64_t v6 = *(_OWORD *)v7;
    *(_OWORD *)(v6 + 16) = v12;
  }
  else
  {
    uint64_t v9 = *(void *)v7;
    uint64_t v10 = *(void *)(v7 + 8);
    char v11 = *(unsigned char *)(v7 + 16);
    outlined copy of Text.Storage(*(void *)v7, v10, v11);
    *(void *)unint64_t v6 = v9;
    *(void *)(v6 + 8) = v10;
    *(unsigned char *)(v6 + 16) = v11;
    *(void *)(v6 + 24) = *(void *)(v7 + 24);
    swift_bridgeObjectRetain();
  }
  uint64_t v13 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v14 = v13 + 16;
  uint64_t v15 = *(unsigned __int8 *)(v13 + 80);
  uint64_t v16 = (v6 + v15 + 32) & ~v15;
  uint64_t v17 = (v7 + v15 + 32) & ~v15;
  (*(void (**)(uint64_t, uint64_t))(v13 + 16))(v16, v17);
  uint64_t v18 = *(void *)(v14 + 48) + 7;
  unint64_t v19 = (v18 + v16) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v20 = (v18 + v17) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v21 = *(void *)v20;
  uint64_t v22 = *(void *)(v20 + 8);
  LOBYTE(v14) = *(unsigned char *)(v20 + 16);
  outlined copy of Environment<EnvironmentValues>.Content(*(void *)v20, v22, v14);
  *(void *)unint64_t v19 = v21;
  *(void *)(v19 + 8) = v22;
  *(unsigned char *)(v19 + 16) = v14;
  return a1;
}

void *assignWithCopy for Window(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  unint64_t v6 = ((unint64_t)a1 + 23) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v7 = ((unint64_t)a2 + 23) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v8 = *(void *)(v7 + 24);
  if (*(void *)(v6 + 24) < 0xFFFFFFFFuLL)
  {
    if (v8 >= 0xFFFFFFFF)
    {
      uint64_t v15 = *(void *)v7;
      uint64_t v16 = *(void *)(v7 + 8);
      char v17 = *(unsigned char *)(v7 + 16);
      outlined copy of Text.Storage(*(void *)v7, v16, v17);
      *(void *)unint64_t v6 = v15;
      *(void *)(v6 + 8) = v16;
      *(unsigned char *)(v6 + 16) = v17;
      *(void *)(v6 + 24) = *(void *)(v7 + 24);
      swift_bridgeObjectRetain();
      goto LABEL_8;
    }
LABEL_7:
    long long v18 = *(_OWORD *)(v7 + 16);
    *(_OWORD *)unint64_t v6 = *(_OWORD *)v7;
    *(_OWORD *)(v6 + 16) = v18;
    goto LABEL_8;
  }
  if (v8 < 0xFFFFFFFF)
  {
    outlined consume of Text.Storage(*(void *)v6, *(void *)(v6 + 8), *(unsigned char *)(v6 + 16));
    swift_bridgeObjectRelease();
    goto LABEL_7;
  }
  uint64_t v9 = *(void *)v7;
  uint64_t v10 = *(void *)(v7 + 8);
  char v11 = *(unsigned char *)(v7 + 16);
  outlined copy of Text.Storage(*(void *)v7, v10, v11);
  uint64_t v12 = *(void *)v6;
  uint64_t v13 = *(void *)(v6 + 8);
  char v14 = *(unsigned char *)(v6 + 16);
  *(void *)unint64_t v6 = v9;
  *(void *)(v6 + 8) = v10;
  *(unsigned char *)(v6 + 16) = v11;
  outlined consume of Text.Storage(v12, v13, v14);
  *(void *)(v6 + 24) = *(void *)(v7 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
LABEL_8:
  uint64_t v19 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v20 = v19 + 24;
  uint64_t v21 = *(unsigned __int8 *)(v19 + 80);
  uint64_t v22 = (v6 + v21 + 32) & ~v21;
  uint64_t v23 = (v7 + v21 + 32) & ~v21;
  (*(void (**)(uint64_t, uint64_t))(v19 + 24))(v22, v23);
  uint64_t v24 = *(void *)(v20 + 40) + 7;
  unint64_t v25 = (v24 + v22) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v26 = (v24 + v23) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v27 = *(void *)v26;
  uint64_t v28 = *(void *)(v26 + 8);
  LOBYTE(v20) = *(unsigned char *)(v26 + 16);
  outlined copy of Environment<EnvironmentValues>.Content(*(void *)v26, v28, v20);
  uint64_t v29 = *(void *)v25;
  uint64_t v30 = *(void *)(v25 + 8);
  char v31 = *(unsigned char *)(v25 + 16);
  *(void *)unint64_t v25 = v27;
  *(void *)(v25 + 8) = v28;
  *(unsigned char *)(v25 + 16) = v20;
  outlined consume of Environment<EnvironmentValues>.Content(v29, v30, v31);
  return a1;
}

_OWORD *initializeWithTake for Window(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  unint64_t v4 = (_OWORD *)(((unint64_t)a1 + 23) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v5 = (_OWORD *)(((unint64_t)a2 + 23) & 0xFFFFFFFFFFFFFFF8);
  long long v6 = v5[1];
  *unint64_t v4 = *v5;
  v4[1] = v6;
  uint64_t v7 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v8 = v7 + 32;
  uint64_t v9 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v10 = ((unint64_t)v4 + v9 + 32) & ~v9;
  uint64_t v11 = ((unint64_t)v5 + v9 + 32) & ~v9;
  (*(void (**)(uint64_t, uint64_t))(v7 + 32))(v10, v11);
  uint64_t v12 = *(void *)(v8 + 32) + 7;
  unint64_t v13 = (v12 + v10) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v14 = (v12 + v11) & 0xFFFFFFFFFFFFFFF8;
  char v15 = *(unsigned char *)(v14 + 16);
  *(_OWORD *)unint64_t v13 = *(_OWORD *)v14;
  *(unsigned char *)(v13 + 16) = v15;
  return a1;
}

void *assignWithTake for Window(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  unint64_t v7 = ((unint64_t)a1 + 23) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v8 = ((unint64_t)a2 + 23) & 0xFFFFFFFFFFFFFFF8;
  if (*(void *)(v7 + 24) < 0xFFFFFFFFuLL) {
    goto LABEL_5;
  }
  if (*(void *)(v8 + 24) < 0xFFFFFFFFuLL)
  {
    outlined consume of Text.Storage(*(void *)v7, *(void *)(v7 + 8), *(unsigned char *)(v7 + 16));
    swift_bridgeObjectRelease();
LABEL_5:
    long long v13 = *(_OWORD *)(v8 + 16);
    *(_OWORD *)unint64_t v7 = *(_OWORD *)v8;
    *(_OWORD *)(v7 + 16) = v13;
    goto LABEL_6;
  }
  char v9 = *(unsigned char *)(v8 + 16);
  uint64_t v10 = *(void *)v7;
  uint64_t v11 = *(void *)(v7 + 8);
  char v12 = *(unsigned char *)(v7 + 16);
  *(_OWORD *)unint64_t v7 = *(_OWORD *)v8;
  *(unsigned char *)(v7 + 16) = v9;
  outlined consume of Text.Storage(v10, v11, v12);
  *(void *)(v7 + 24) = *(void *)(v8 + 24);
  swift_bridgeObjectRelease();
LABEL_6:
  uint64_t v14 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v15 = v14 + 40;
  uint64_t v16 = *(unsigned __int8 *)(v14 + 80);
  uint64_t v17 = (v7 + v16 + 32) & ~v16;
  uint64_t v18 = (v8 + v16 + 32) & ~v16;
  (*(void (**)(uint64_t, uint64_t))(v14 + 40))(v17, v18);
  uint64_t v19 = *(void *)(v15 + 24) + 7;
  unint64_t v20 = (v19 + v17) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v21 = (v19 + v18) & 0xFFFFFFFFFFFFFFF8;
  char v22 = *(unsigned char *)(v21 + 16);
  uint64_t v23 = *(void *)v20;
  uint64_t v24 = *(void *)(v20 + 8);
  char v25 = *(unsigned char *)(v20 + 16);
  *(_OWORD *)unint64_t v20 = *(_OWORD *)v21;
  *(unsigned char *)(v20 + 16) = v22;
  outlined consume of Environment<EnvironmentValues>.Content(v23, v24, v25);
  return a1;
}

uint64_t getEnumTagSinglePayload for Window(unsigned __int8 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  if (v5 <= 0x7FFFFFFF) {
    unsigned int v7 = 0x7FFFFFFF;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  if (v7 < a2)
  {
    unint64_t v8 = ((*(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) + ((v6 + 48) & ~v6) + 7) & 0xFFFFFFFFFFFFFFF8)
       + 17;
    unsigned int v9 = (a2 - v7 + 255) >> (8 * v8);
    if (v8 < 4) {
      unsigned int v10 = v9 + 1;
    }
    else {
      unsigned int v10 = 2;
    }
    if (v10 >= 0x10000) {
      unsigned int v11 = 4;
    }
    else {
      unsigned int v11 = 2;
    }
    if (v10 < 0x100) {
      unsigned int v11 = 1;
    }
    if (v10 >= 2) {
      uint64_t v12 = v11;
    }
    else {
      uint64_t v12 = 0;
    }
    switch(v12)
    {
      case 1:
        int v13 = a1[v8];
        if (!a1[v8]) {
          break;
        }
        goto LABEL_22;
      case 2:
        int v13 = *(unsigned __int16 *)&a1[v8];
        if (*(_WORD *)&a1[v8]) {
          goto LABEL_22;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x1883070D4);
      case 4:
        int v13 = *(_DWORD *)&a1[v8];
        if (!v13) {
          break;
        }
LABEL_22:
        int v15 = (v13 - 1) << (8 * v8);
        if (v8 >= 4) {
          int v15 = 0;
        }
        if (((*(_DWORD *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) + ((v6 + 48) & ~v6) + 7) & 0xFFFFFFF8) == 0xFFFFFFF0) {
          int v16 = *a1;
        }
        else {
          int v16 = *(_DWORD *)a1;
        }
        return v7 + (v16 | v15) + 1;
      default:
        break;
    }
  }
  if ((v5 & 0x80000000) != 0) {
    return (*(uint64_t (**)(unint64_t))(v4 + 48))((((unint64_t)(a1 + 23) & 0xFFFFFFFFFFFFFFF8)
  }
                                                                  + v6
                                                                  + 32) & ~v6);
  unint64_t v17 = *((void *)a1 + 1);
  if (v17 >= 0xFFFFFFFF) {
    LODWORD(v17) = -1;
  }
  return (v17 + 1);
}

void storeEnumTagSinglePayload for Window(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(unsigned __int8 *)(v6 + 80);
  size_t v10 = ((*(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64) + ((v9 + 48) & ~v9) + 7) & 0xFFFFFFFFFFFFFFF8)
      + 17;
  char v11 = 8 * v10;
  if (v8 >= a3)
  {
    int v15 = 0;
    if (v8 >= a2)
    {
LABEL_17:
      switch(v15)
      {
        case 1:
          a1[v10] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_34;
        case 2:
          *(_WORD *)&a1[v10] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_34;
        case 3:
          goto LABEL_46;
        case 4:
          *(_DWORD *)&a1[v10] = 0;
          goto LABEL_33;
        default:
LABEL_33:
          if (a2)
          {
LABEL_34:
            if ((v7 & 0x80000000) != 0)
            {
              unint64_t v19 = (((unint64_t)(a1 + 23) & 0xFFFFFFFFFFFFFFF8) + v9 + 32) & ~v9;
              unint64_t v20 = *(void (**)(unint64_t))(v6 + 56);
              v20(v19);
            }
            else if ((a2 & 0x80000000) != 0)
            {
              *(void *)a1 = a2 ^ 0x80000000;
              *((void *)a1 + 1) = 0;
            }
            else
            {
              *((void *)a1 + 1) = a2 - 1;
            }
          }
          break;
      }
      return;
    }
  }
  else
  {
    unsigned int v12 = (a3 - v8 + 255) >> v11;
    if (v10 <= 3) {
      unsigned int v13 = v12 + 1;
    }
    else {
      unsigned int v13 = 2;
    }
    if (v13 >= 0x10000) {
      int v14 = 4;
    }
    else {
      int v14 = 2;
    }
    if (v13 < 0x100) {
      int v14 = 1;
    }
    if (v13 >= 2) {
      int v15 = v14;
    }
    else {
      int v15 = 0;
    }
    if (v8 >= a2) {
      goto LABEL_17;
    }
  }
  unsigned int v16 = (~v8 + a2) >> v11;
  if (v10 < 4) {
    int v17 = v16 + 1;
  }
  else {
    int v17 = 1;
  }
  if (v10 >= 4) {
    unsigned int v18 = ~v8 + a2;
  }
  else {
    unsigned int v18 = (~(_BYTE)v8 + a2);
  }
  bzero(a1, v10);
  if (v10 == 1) {
    *a1 = v18;
  }
  else {
    *(_DWORD *)a1 = v18;
  }
  switch(v15)
  {
    case 1:
      a1[v10] = v17;
      break;
    case 2:
      *(_WORD *)&a1[v10] = v17;
      break;
    case 3:
LABEL_46:
      __break(1u);
      JUMPOUT(0x18830730CLL);
    case 4:
      *(_DWORD *)&a1[v10] = v17;
      break;
    default:
      return;
  }
}

uint64_t type metadata accessor for Window()
{
  return __swift_instantiateGenericMetadata();
}

_UNKNOWN **sub_18830734C()
{
  return &protocol witness table for SingleWindowSceneList;
}

ValueMetadata *type metadata accessor for SingleWindowSceneList()
{
  return &type metadata for SingleWindowSceneList;
}

uint64_t destroy for SingleWindowSceneList(uint64_t a1)
{
  swift_bridgeObjectRelease();
  uint64_t result = swift_release();
  if (*(void *)(a1 + 48))
  {
    outlined consume of Text.Storage(*(void *)(a1 + 24), *(void *)(a1 + 32), *(unsigned char *)(a1 + 40));
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t initializeWithCopy for SingleWindowSceneList(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  uint64_t v5 = *(void *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_retain();
  if (v5)
  {
    uint64_t v6 = *(void *)(a2 + 24);
    uint64_t v7 = *(void *)(a2 + 32);
    char v8 = *(unsigned char *)(a2 + 40);
    outlined copy of Text.Storage(v6, v7, v8);
    *(void *)(a1 + 24) = v6;
    *(void *)(a1 + 32) = v7;
    *(unsigned char *)(a1 + 40) = v8;
    *(void *)(a1 + 48) = v5;
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v9 = *(_OWORD *)(a2 + 40);
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 40) = v9;
  }
  return a1;
}

uint64_t assignWithCopy for SingleWindowSceneList(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_retain();
  swift_release();
  uint64_t v4 = (_OWORD *)(a1 + 24);
  uint64_t v5 = (_OWORD *)(a2 + 24);
  uint64_t v6 = *(void *)(a2 + 48);
  if (*(void *)(a1 + 48))
  {
    if (v6)
    {
      uint64_t v7 = *(void *)(a2 + 24);
      uint64_t v8 = *(void *)(a2 + 32);
      char v9 = *(unsigned char *)(a2 + 40);
      outlined copy of Text.Storage(v7, v8, v9);
      uint64_t v10 = *(void *)(a1 + 24);
      uint64_t v11 = *(void *)(a1 + 32);
      char v12 = *(unsigned char *)(a1 + 40);
      *(void *)(a1 + 24) = v7;
      *(void *)(a1 + 32) = v8;
      *(unsigned char *)(a1 + 40) = v9;
      outlined consume of Text.Storage(v10, v11, v12);
      *(void *)(a1 + 48) = *(void *)(a2 + 48);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      outlined destroy of Text(a1 + 24);
      long long v16 = *(_OWORD *)(a2 + 40);
      *uint64_t v4 = *v5;
      *(_OWORD *)(a1 + 40) = v16;
    }
  }
  else if (v6)
  {
    uint64_t v13 = *(void *)(a2 + 24);
    uint64_t v14 = *(void *)(a2 + 32);
    char v15 = *(unsigned char *)(a2 + 40);
    outlined copy of Text.Storage(v13, v14, v15);
    *(void *)(a1 + 24) = v13;
    *(void *)(a1 + 32) = v14;
    *(unsigned char *)(a1 + 40) = v15;
    *(void *)(a1 + 48) = *(void *)(a2 + 48);
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v17 = *(_OWORD *)(a2 + 40);
    *uint64_t v4 = *v5;
    *(_OWORD *)(a1 + 40) = v17;
  }
  return a1;
}

uint64_t assignWithTake for SingleWindowSceneList(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_release();
  if (!*(void *)(a1 + 48)) {
    goto LABEL_5;
  }
  uint64_t v5 = *(void *)(a2 + 48);
  if (!v5)
  {
    outlined destroy of Text(a1 + 24);
LABEL_5:
    long long v10 = *(_OWORD *)(a2 + 40);
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 40) = v10;
    return a1;
  }
  char v6 = *(unsigned char *)(a2 + 40);
  uint64_t v7 = *(void *)(a1 + 24);
  uint64_t v8 = *(void *)(a1 + 32);
  char v9 = *(unsigned char *)(a1 + 40);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(unsigned char *)(a1 + 40) = v6;
  outlined consume of Text.Storage(v7, v8, v9);
  *(void *)(a1 + 48) = v5;
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for SingleWindowConfiguration()
{
  return &type metadata for SingleWindowConfiguration;
}

uint64_t specialized SetAlgebra<>.init(arrayLiteral:)@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (v3)
  {
    uint64_t v4 = 0;
    uint64_t v5 = (uint64_t *)(a1 + 32);
    do
    {
      uint64_t v7 = *v5++;
      uint64_t v6 = v7;
      if ((v7 & ~v4) == 0) {
        uint64_t v6 = 0;
      }
      v4 |= v6;
      --v3;
    }
    while (v3);
  }
  else
  {
    uint64_t v4 = 0;
  }
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v4;
  return result;
}

uint64_t specialized SetAlgebra<>.init(arrayLiteral:)@<X0>(uint64_t a1@<X0>, _WORD *a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (v3)
  {
    int v4 = 0;
    uint64_t v5 = (unsigned __int16 *)(a1 + 32);
    do
    {
      int v7 = *v5++;
      int v6 = v7;
      if ((v7 & ~v4) == 0) {
        int v6 = 0;
      }
      v4 |= v6;
      --v3;
    }
    while (v3);
  }
  else
  {
    LOWORD(v4) = 0;
  }
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v4;
  return result;
}

uint64_t specialized SetAlgebra<>.init(arrayLiteral:)@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (v3)
  {
    unsigned int v4 = 0;
    uint64_t v5 = (unsigned __int8 *)(a1 + 32);
    while (1)
    {
      int v7 = *v5++;
      int v6 = v7;
      if ((v7 & ~v4) != 0)
      {
        v4 |= v6;
        if (v4 > 0xF) {
          break;
        }
      }
      if (!--v3) {
        goto LABEL_8;
      }
    }
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  LOBYTE(v4) = 0;
LABEL_8:
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v4;
  return result;
}

{
  uint64_t v3;
  int v4;
  unsigned __int8 *v5;
  int v6;
  int v7;
  uint64_t result;

  uint64_t v3 = *(void *)(a1 + 16);
  if (v3)
  {
    unsigned int v4 = 0;
    uint64_t v5 = (unsigned __int8 *)(a1 + 32);
    do
    {
      int v7 = *v5++;
      int v6 = v7;
      if ((v7 & ~v4) == 0) {
        int v6 = 0;
      }
      v4 |= v6;
      --v3;
    }
    while (v3);
  }
  else
  {
    LOBYTE(v4) = 0;
  }
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v4;
  return result;
}

uint64_t specialized OptionSet<>.insert(_:)(unsigned __int8 *a1, unsigned __int8 a2)
{
  unsigned int v3 = *v2;
  if (v3 < 0x10)
  {
    unsigned int v4 = v3 & a2;
    if (v4 == a2)
    {
LABEL_5:
      *a1 = a2;
      return v4 != a2;
    }
    unsigned int v5 = v3 | a2;
    if (v5 < 0x10)
    {
      *char v2 = v5;
      goto LABEL_5;
    }
  }
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t protocol witness for ExpressibleByArrayLiteral.init(arrayLiteral:) in conformance AppGraph.LaunchProfileOptions@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X8>)
{
  int v3 = specialized SetAlgebra<>.init(arrayLiteral:)(a1);
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v3;
  return result;
}

void AppGraph.__allocating_init(data:)()
{
}

uint64_t AppGraph.__ivar_destroyer()
{
  swift_release();

  return swift_bridgeObjectRelease();
}

uint64_t AppGraph.__deallocating_deinit()
{
  GraphHost.deinit();
  swift_release();
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t ObjC metadata update function for AppGraph()
{
  return type metadata accessor for AppGraph();
}

void *type metadata accessor for AppGraph.LaunchProfileOptions()
{
  return &unk_1ED467AE0;
}

unint64_t lazy protocol witness table accessor for type AppGraph.LaunchProfileOptions and conformance AppGraph.LaunchProfileOptions()
{
  unint64_t result = lazy protocol witness table cache variable for type AppGraph.LaunchProfileOptions and conformance AppGraph.LaunchProfileOptions;
  if (!lazy protocol witness table cache variable for type AppGraph.LaunchProfileOptions and conformance AppGraph.LaunchProfileOptions)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AppGraph.LaunchProfileOptions and conformance AppGraph.LaunchProfileOptions);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AppGraph.LaunchProfileOptions and conformance AppGraph.LaunchProfileOptions;
  if (!lazy protocol witness table cache variable for type AppGraph.LaunchProfileOptions and conformance AppGraph.LaunchProfileOptions)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AppGraph.LaunchProfileOptions and conformance AppGraph.LaunchProfileOptions);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AppGraph.LaunchProfileOptions and conformance AppGraph.LaunchProfileOptions;
  if (!lazy protocol witness table cache variable for type AppGraph.LaunchProfileOptions and conformance AppGraph.LaunchProfileOptions)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AppGraph.LaunchProfileOptions and conformance AppGraph.LaunchProfileOptions);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AppGraph.LaunchProfileOptions and conformance AppGraph.LaunchProfileOptions;
  if (!lazy protocol witness table cache variable for type AppGraph.LaunchProfileOptions and conformance AppGraph.LaunchProfileOptions)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AppGraph.LaunchProfileOptions and conformance AppGraph.LaunchProfileOptions);
  }
  return result;
}

uint64_t protocol witness for Rule.value.getter in conformance RootEnvironment@<X0>(void *a1@<X8>)
{
  uint64_t Value = (uint64_t *)AGGraphGetValue();
  uint64_t v4 = *Value;
  uint64_t v3 = Value[1];
  *a1 = v4;
  a1[1] = v3;
  swift_retain();
  swift_retain();
  EnvironmentValues.configureForRoot()();
  AGGraphGetValue();
  EnvironmentValues.scenePhase.setter();
  v8.value.super.Class isa = 0;
  EnvironmentValues.configureForPlatform(traitCollection:)(v8);
  type metadata accessor for [SceneID : KeyboardShortcut]();
  AGGraphGetValue();
  uint64_t v5 = swift_bridgeObjectRetain();
  specialized EnvironmentValues.subscript.setter(v5);

  return swift_bridgeObjectRelease();
}

uint64_t specialized SetAlgebra<>.init(arrayLiteral:)(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 16);
  if (!v1) {
    return 0;
  }
  uint64_t v2 = result;
  LODWORD(result) = 0;
  uint64_t v3 = (unsigned __int16 *)(v2 + 32);
  do
  {
    int v5 = *v3++;
    int v4 = v5;
    if ((v5 & ~result) == 0) {
      int v4 = 0;
    }
    unint64_t result = v4 | result;
    --v1;
  }
  while (v1);
  return result;
}

{
  uint64_t v1;
  uint64_t v2;
  unsigned __int8 *v3;
  int v4;
  int v5;

  uint64_t v1 = *(void *)(result + 16);
  if (!v1) {
    return 0;
  }
  uint64_t v2 = result;
  LODWORD(result) = 0;
  uint64_t v3 = (unsigned __int8 *)(v2 + 32);
  do
  {
    int v5 = *v3++;
    int v4 = v5;
    if ((v5 & ~result) == 0) {
      int v4 = 0;
    }
    unint64_t result = v4 | result;
    --v1;
  }
  while (v1);
  return result;
}

{
  uint64_t v1;
  uint64_t v2;
  int *v3;
  int v4;
  int v5;

  uint64_t v1 = *(void *)(result + 16);
  if (!v1) {
    return 0;
  }
  uint64_t v2 = result;
  LODWORD(result) = 0;
  uint64_t v3 = (int *)(v2 + 32);
  do
  {
    int v5 = *v3++;
    int v4 = v5;
    if ((v5 & ~result) == 0) {
      int v4 = 0;
    }
    unint64_t result = v4 | result;
    --v1;
  }
  while (v1);
  return result;
}

uint64_t specialized SetAlgebra<>.init(arrayLiteral:)(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return 0;
  }
  uint64_t result = 0;
  int v4 = (unsigned __int8 *)(a1 + 32);
  do
  {
    int v5 = *v4++;
    switch(v5)
    {
      case 1:
        if ((result & 2) == 0)
        {
          uint64_t v6 = 2;
          goto LABEL_3;
        }
        break;
      case 2:
        if ((result & 4) == 0)
        {
          uint64_t v6 = 4;
          goto LABEL_3;
        }
        break;
      case 3:
        if ((result & 8) == 0)
        {
          uint64_t v6 = 8;
          goto LABEL_3;
        }
        break;
      case 4:
        if ((result & 0x10) == 0)
        {
          uint64_t v6 = 16;
          goto LABEL_3;
        }
        break;
      case 5:
        if ((result & 0x20) == 0)
        {
          uint64_t v6 = 32;
          goto LABEL_3;
        }
        break;
      case 6:
        if ((result & 0x40) == 0)
        {
          uint64_t v6 = 64;
          goto LABEL_3;
        }
        break;
      case 7:
        if ((result & 0x80) == 0)
        {
          uint64_t v6 = 128;
          goto LABEL_3;
        }
        break;
      case 8:
        if ((result & 0x100) == 0)
        {
          uint64_t v6 = 256;
          goto LABEL_3;
        }
        break;
      case 9:
        if ((result & 0x200) == 0)
        {
          uint64_t v6 = 512;
          goto LABEL_3;
        }
        break;
      default:
        if ((result & 1) == 0)
        {
          uint64_t v6 = 1;
LABEL_3:
          result |= v6;
        }
        break;
    }
    --v1;
  }
  while (v1);
  return result;
}

{
  uint64_t v1;
  uint64_t result;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return 0;
  }
  uint64_t result = 0;
  int v4 = (uint64_t *)(a1 + 32);
  do
  {
    uint64_t v6 = *v4++;
    int v5 = v6;
    if ((v6 & ~result) == 0) {
      int v5 = 0;
    }
    result |= v5;
    --v1;
  }
  while (v1);
  return result;
}

uint64_t sub_188307DC8()
{
  (*(void (**)(unint64_t))(*(void *)(*(void *)(v0 + 16) - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(void *)(*(void *)(v0 + 16) - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(*(void *)(v0 + 16) - 8) + 80)));

  return swift_deallocObject();
}

void *type metadata accessor for RootEnvironment()
{
  return &unk_1ED41B3D8;
}

uint64_t View.datePickerStyle<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = *(void *)(a3 - 8);
  MEMORY[0x1F4188790](a1);
  long long v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for DatePickerStyleModifier();
  uint64_t v12 = *(void *)(v11 - 8);
  double v13 = MEMORY[0x1F4188790](v11);
  char v15 = (char *)&v17 - v14;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v8 + 16))(v10, a1, a3, v13);
  (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v15, v10, a3);
  MEMORY[0x18C113660](v15, a2, v11, a4);
  return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v15, v11);
}

uint64_t type metadata accessor for DatePickerStyleModifier()
{
  return __swift_instantiateGenericMetadata();
}

void DatePickerStyleConfiguration.selection.getter()
{
  _s7SwiftUI7BindingVy10Foundation4DateVGMaTm_0(0, &lazy cache variable for type metadata for Binding<Date>, MEMORY[0x1E4F41638]);

  JUMPOUT(0x18C113DA0);
}

uint64_t DatePickerStyleConfiguration.$selection.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of Binding<Date>(v1, a1, &lazy cache variable for type metadata for Binding<Date>, MEMORY[0x1E4F41638]);
}

uint64_t DatePickerStyleConfiguration.selection.setter(uint64_t a1)
{
  dispatch thunk of AnyLocation.set(_:transaction:)();
  uint64_t v2 = type metadata accessor for Date();
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8);

  return v3(a1, v2);
}

uint64_t key path setter for DatePickerStyleConfiguration.selection : DatePickerStyleConfiguration(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Date();
  uint64_t v3 = *(void *)(v2 - 8);
  double v4 = MEMORY[0x1F4188790](v2);
  uint64_t v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v3 + 16))(v6, a1, v2, v4);
  dispatch thunk of AnyLocation.set(_:transaction:)();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v6, v2);
}

void (*DatePickerStyleConfiguration.selection.modify(void *a1))(uint64_t **a1, char a2)
{
  uint64_t v3 = malloc(0x28uLL);
  *a1 = v3;
  uint64_t v4 = type metadata accessor for Date();
  *uint64_t v3 = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v3[1] = v5;
  size_t v6 = *(void *)(v5 + 64);
  void v3[2] = malloc(v6);
  v3[3] = malloc(v6);
  int v7 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E4F41638];
  _s7SwiftUI7BindingVy10Foundation4DateVGMaTm_0(0, &lazy cache variable for type metadata for Binding<Date>, MEMORY[0x1E4F41638]);
  uint64_t v9 = v8;
  long long v10 = malloc(*(void *)(*(void *)(v8 - 8) + 64));
  v3[4] = v10;
  outlined init with copy of Binding<Date>(v1, (uint64_t)v10, &lazy cache variable for type metadata for Binding<Date>, v7);
  MEMORY[0x18C113DA0](v9);
  return DatePickerStyleConfiguration.selection.modify;
}

void DatePickerStyleConfiguration.selection.modify(uint64_t **a1, char a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = (void *)(*a1)[3];
  uint64_t v4 = (void *)(*a1)[4];
  uint64_t v6 = (*a1)[1];
  uint64_t v5 = (void *)(*a1)[2];
  uint64_t v7 = **a1;
  if (a2)
  {
    (*(void (**)(uint64_t, void *, uint64_t))(v6 + 16))((*a1)[2], v3, v7);
    dispatch thunk of AnyLocation.set(_:transaction:)();
    uint64_t v8 = *(void (**)(void *, uint64_t))(v6 + 8);
    v8(v5, v7);
    outlined destroy of Binding<Date>((uint64_t)v4);
    v8(v3, v7);
  }
  else
  {
    dispatch thunk of AnyLocation.set(_:transaction:)();
    (*(void (**)(void *, uint64_t))(v6 + 8))(v3, v7);
    outlined destroy of Binding<Date>((uint64_t)v4);
  }
  free(v4);
  free(v3);
  free(v5);

  free(v2);
}

uint64_t DatePickerStyleConfiguration.minimumDate.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for DatePickerStyleConfiguration(0);
  return outlined init with copy of Binding<Date>(v1 + *(int *)(v3 + 24), a1, (unint64_t *)&lazy cache variable for type metadata for Date?, MEMORY[0x1E4FBB718]);
}

uint64_t DatePickerStyleConfiguration.minimumDate.setter(uint64_t a1)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for DatePickerStyleConfiguration(0) + 24);

  return outlined assign with take of Date?(a1, v3);
}

double (*DatePickerStyleConfiguration.minimumDate.modify())(void, void, void, void)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t DatePickerStyleConfiguration.maximumDate.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for DatePickerStyleConfiguration(0);
  return outlined init with copy of Binding<Date>(v1 + *(int *)(v3 + 28), a1, (unint64_t *)&lazy cache variable for type metadata for Date?, MEMORY[0x1E4FBB718]);
}

uint64_t DatePickerStyleConfiguration.maximumDate.setter(uint64_t a1)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for DatePickerStyleConfiguration(0) + 28);

  return outlined assign with take of Date?(a1, v3);
}

double (*DatePickerStyleConfiguration.maximumDate.modify())(void, void, void, void)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t DatePickerStyleConfiguration.displayedComponents.getter@<X0>(void *a1@<X8>)
{
  uint64_t result = type metadata accessor for DatePickerStyleConfiguration(0);
  *a1 = *(void *)(v1 + *(int *)(result + 32));
  return result;
}

uint64_t DatePickerStyleConfiguration.displayedComponents.setter(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t result = type metadata accessor for DatePickerStyleConfiguration(0);
  *(void *)(v1 + *(int *)(result + 32)) = v2;
  return result;
}

double (*DatePickerStyleConfiguration.displayedComponents.modify())(void, void, void, void)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t outlined destroy of Binding<Date>(uint64_t a1)
{
  _s7SwiftUI7BindingVy10Foundation4DateVGMaTm_0(0, &lazy cache variable for type metadata for Binding<Date>, MEMORY[0x1E4F41638]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t type metadata accessor for DatePickerStyleConfiguration(uint64_t a1)
{
  return type metadata accessor for SortableTableHeaderButton(a1, (uint64_t *)&type metadata singleton initialization cache for DatePickerStyleConfiguration);
}

uint64_t outlined assign with take of Date?(uint64_t a1, uint64_t a2)
{
  _s7SwiftUI7BindingVy10Foundation4DateVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for Date?, MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

unint64_t instantiation function for generic protocol witness table for DatePickerStyleConfiguration.Label(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type DatePickerStyleConfiguration.Label and conformance DatePickerStyleConfiguration.Label();
  *(void *)(a1 + 8) = result;
  return result;
}

_UNKNOWN **base witness table accessor for View in DatePickerStyleConfiguration.Label()
{
  return &protocol witness table for DatePickerStyleConfiguration.Label;
}

uint64_t protocol witness for StyleableView.configuration.getter in conformance ResolvedDatePickerStyle@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of DatePickerStyleConfiguration(v1, a1);
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance ResolvedDatePickerStyle(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = _s7SwiftUI23ResolvedDatePickerStyleVAcA4ViewAAWlTm_0(&lazy protocol witness table cache variable for type ResolvedDatePickerStyle and conformance ResolvedDatePickerStyle, (void (*)(uint64_t))type metadata accessor for ResolvedDatePickerStyle);

  return MEMORY[0x1F40FDF90](a1, a2, a3, v6);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance ResolvedDatePickerStyle(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = _s7SwiftUI23ResolvedDatePickerStyleVAcA4ViewAAWlTm_0(&lazy protocol witness table cache variable for type ResolvedDatePickerStyle and conformance ResolvedDatePickerStyle, (void (*)(uint64_t))type metadata accessor for ResolvedDatePickerStyle);

  return MEMORY[0x1F40FDF98](a1, a2, a3, v6);
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance ResolvedDatePickerStyle()
{
  return static StyleableView._viewListCount(inputs:)();
}

uint64_t protocol witness for View.body.getter in conformance ResolvedDatePickerStyle@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for DatePickerStyleConfiguration(0);
  uint64_t v5 = (int *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of DatePickerStyleConfiguration(v2, (uint64_t)v7);
  outlined init with copy of Binding<Date>((uint64_t)v7, a1, &lazy cache variable for type metadata for Binding<Date>, MEMORY[0x1E4F41638]);
  uint64_t v8 = (uint64_t)&v7[v5[8]];
  type metadata accessor for DatePicker<DatePickerStyleConfiguration.Label>();
  uint64_t v10 = v9;
  uint64_t v11 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E4FBB718];
  outlined init with copy of Binding<Date>(v8, a1 + *(int *)(v9 + 36), (unint64_t *)&lazy cache variable for type metadata for Date?, MEMORY[0x1E4FBB718]);
  outlined init with copy of Binding<Date>((uint64_t)&v7[v5[9]], a1 + *(int *)(v10 + 40), (unint64_t *)&lazy cache variable for type metadata for Date?, v11);
  *(void *)(a1 + *(int *)(v10 + 44)) = *(void *)&v7[v5[10]];
  return outlined destroy of DatePickerStyleConfiguration((uint64_t)v7);
}

uint64_t DatePickerStyleModifier.styleBody(configuration:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 16);
  uint64_t v3 = *(void *)(a2 + 24);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v6 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v10 = MEMORY[0x1F4188790](v9);
  uint64_t v12 = (char *)&v15 - v11;
  (*(void (**)(uint64_t, uint64_t, uint64_t, double))(v3 + 40))(a1, v4, v3, v10);
  swift_getAssociatedConformanceWitness();
  static ViewBuilder.buildExpression<A>(_:)(v8);
  uint64_t v13 = *(void (**)(char *, uint64_t))(v6 + 8);
  v13(v8, AssociatedTypeWitness);
  static ViewBuilder.buildExpression<A>(_:)(v12);
  return ((uint64_t (*)(char *, uint64_t))v13)(v12, AssociatedTypeWitness);
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance DatePickerStyleModifier<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F40FDF88](a1, a2, a3, a4, a5, WitnessTable);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance DatePickerStyleModifier<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F40FDF78](a1, a2, a3, a4, a5, WitnessTable);
}

uint64_t protocol witness for static ViewModifier._viewListCount(inputs:body:) in conformance DatePickerStyleModifier<A>()
{
  return static StyleModifier._viewListCount(inputs:body:)();
}

unint64_t instantiation function for generic protocol witness table for _DatePickerStyleLabel(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type _DatePickerStyleLabel and conformance _DatePickerStyleLabel();
  *(void *)(a1 + 8) = result;
  return result;
}

void protocol witness for View.body.getter in conformance _DatePickerStyleLabel()
{
}

_UNKNOWN **base witness table accessor for View in _DatePickerStyleLabel()
{
  return &protocol witness table for _DatePickerStyleLabel;
}

uint64_t sub_188308F40()
{
  return MEMORY[0x18C113DA0]();
}

uint64_t dispatch thunk of DatePickerStyle.makeBody(configuration:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 40))();
}

uint64_t dispatch thunk of DatePickerStyle._body(configuration:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 48))();
}

uint64_t *initializeBufferWithCopyOfBuffer for DatePickerStyleConfiguration(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v3 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  uint64_t v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    uint64_t v7 = (uint64_t *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain();
  }
  else
  {
    uint64_t v7 = a1;
    a1[1] = a2[1];
    _s7SwiftUI7BindingVy10Foundation4DateVGMaTm_0(0, &lazy cache variable for type metadata for Binding<Date>, MEMORY[0x1E4F41638]);
    uint64_t v9 = *(int *)(v8 + 32);
    double v10 = (char *)v7 + v9;
    uint64_t v24 = (char *)a2 + v9;
    uint64_t v11 = type metadata accessor for Date();
    uint64_t v12 = *(void *)(v11 - 8);
    uint64_t v13 = *(void (**)(char *, char *, uint64_t))(v12 + 16);
    swift_retain();
    swift_retain();
    v13(v10, v24, v11);
    uint64_t v14 = a3[6];
    uint64_t v15 = (char *)v7 + v14;
    long long v16 = (char *)a2 + v14;
    uint64_t v23 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48);
    if (v23((char *)a2 + v14, 1, v11))
    {
      _s7SwiftUI7BindingVy10Foundation4DateVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for Date?, MEMORY[0x1E4FBB718]);
      memcpy(v15, v16, *(void *)(*(void *)(v17 - 8) + 64));
    }
    else
    {
      v13(v15, v16, v11);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v15, 0, 1, v11);
    }
    uint64_t v18 = a3[7];
    unint64_t v19 = (char *)v7 + v18;
    unint64_t v20 = (char *)a2 + v18;
    if (v23((char *)a2 + v18, 1, v11))
    {
      _s7SwiftUI7BindingVy10Foundation4DateVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for Date?, MEMORY[0x1E4FBB718]);
      memcpy(v19, v20, *(void *)(*(void *)(v21 - 8) + 64));
    }
    else
    {
      v13(v19, v20, v11);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v19, 0, 1, v11);
    }
    *(uint64_t *)((char *)v7 + a3[8]) = *(uint64_t *)((char *)a2 + a3[8]);
  }
  return v7;
}

uint64_t destroy for DatePickerStyleConfiguration(uint64_t a1, uint64_t a2)
{
  swift_release();
  swift_release();
  _s7SwiftUI7BindingVy10Foundation4DateVGMaTm_0(0, &lazy cache variable for type metadata for Binding<Date>, MEMORY[0x1E4F41638]);
  uint64_t v5 = a1 + *(int *)(v4 + 32);
  uint64_t v6 = type metadata accessor for Date();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v12 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
  v12(v5, v6);
  uint64_t v8 = a1 + *(int *)(a2 + 24);
  uint64_t v9 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
  if (!v9(v8, 1, v6)) {
    v12(v8, v6);
  }
  uint64_t v10 = a1 + *(int *)(a2 + 28);
  uint64_t result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v9)(v10, 1, v6);
  if (!result)
  {
    return ((uint64_t (*)(uint64_t, uint64_t))v12)(v10, v6);
  }
  return result;
}

void *initializeWithCopy for DatePickerStyleConfiguration(void *a1, char *a2, int *a3)
{
  uint64_t v6 = *((void *)a2 + 1);
  *a1 = *(void *)a2;
  a1[1] = v6;
  _s7SwiftUI7BindingVy10Foundation4DateVGMaTm_0(0, &lazy cache variable for type metadata for Binding<Date>, MEMORY[0x1E4F41638]);
  uint64_t v8 = *(int *)(v7 + 32);
  uint64_t v24 = (char *)a1 + v8;
  uint64_t v9 = &a2[v8];
  uint64_t v10 = type metadata accessor for Date();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(void (**)(char *, char *, uint64_t))(v11 + 16);
  swift_retain();
  swift_retain();
  v12(v24, v9, v10);
  uint64_t v13 = a3[6];
  uint64_t v14 = (char *)a1 + v13;
  uint64_t v15 = &a2[v13];
  long long v16 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48);
  if (v16(&a2[v13], 1, v10))
  {
    _s7SwiftUI7BindingVy10Foundation4DateVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for Date?, MEMORY[0x1E4FBB718]);
    memcpy(v14, v15, *(void *)(*(void *)(v17 - 8) + 64));
    uint64_t v18 = v12;
  }
  else
  {
    uint64_t v18 = v12;
    v12(v14, v15, v10);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v14, 0, 1, v10);
  }
  uint64_t v19 = a3[7];
  unint64_t v20 = (char *)a1 + v19;
  uint64_t v21 = &a2[v19];
  if (v16(&a2[v19], 1, v10))
  {
    _s7SwiftUI7BindingVy10Foundation4DateVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for Date?, MEMORY[0x1E4FBB718]);
    memcpy(v20, v21, *(void *)(*(void *)(v22 - 8) + 64));
  }
  else
  {
    v18(v20, v21, v10);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v20, 0, 1, v10);
  }
  *(void *)((char *)a1 + a3[8]) = *(void *)&a2[a3[8]];
  return a1;
}

char *assignWithCopy for DatePickerStyleConfiguration(char *a1, void *a2, uint64_t a3)
{
  *(void *)a1 = *a2;
  swift_retain();
  swift_release();
  *((void *)a1 + 1) = a2[1];
  swift_retain();
  swift_release();
  _s7SwiftUI7BindingVy10Foundation4DateVGMaTm_0(0, &lazy cache variable for type metadata for Binding<Date>, MEMORY[0x1E4F41638]);
  uint64_t v7 = *(int *)(v6 + 32);
  uint64_t v8 = &a1[v7];
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for Date();
  uint64_t v11 = *(void *)(v10 - 8);
  unint64_t v26 = *(void (**)(char *, char *, uint64_t))(v11 + 24);
  v26(v8, v9, v10);
  uint64_t v27 = a3;
  uint64_t v12 = *(int *)(a3 + 24);
  uint64_t v13 = &a1[v12];
  uint64_t v14 = (char *)a2 + v12;
  uint64_t v15 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v11 + 48);
  int v16 = v15(&a1[v12], 1, v10);
  int v17 = v15(v14, 1, v10);
  if (v16)
  {
    if (!v17)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v13, v14, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v13, 0, 1, v10);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v17)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
LABEL_6:
    _s7SwiftUI7BindingVy10Foundation4DateVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for Date?, MEMORY[0x1E4FBB718]);
    memcpy(v13, v14, *(void *)(*(void *)(v18 - 8) + 64));
    goto LABEL_7;
  }
  v26(v13, v14, v10);
LABEL_7:
  uint64_t v19 = *(int *)(v27 + 28);
  unint64_t v20 = &a1[v19];
  uint64_t v21 = (char *)a2 + v19;
  int v22 = v15(&a1[v19], 1, v10);
  int v23 = v15(v21, 1, v10);
  if (!v22)
  {
    if (!v23)
    {
      v26(v20, v21, v10);
      goto LABEL_13;
    }
    (*(void (**)(char *, uint64_t))(v11 + 8))(v20, v10);
    goto LABEL_12;
  }
  if (v23)
  {
LABEL_12:
    _s7SwiftUI7BindingVy10Foundation4DateVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for Date?, MEMORY[0x1E4FBB718]);
    memcpy(v20, v21, *(void *)(*(void *)(v24 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v20, v21, v10);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v20, 0, 1, v10);
LABEL_13:
  *(void *)&a1[*(int *)(v27 + 32)] = *(void *)((char *)a2 + *(int *)(v27 + 32));
  return a1;
}

void *initializeWithTake for DatePickerStyleConfiguration(void *a1, char *a2, uint64_t a3)
{
  uint64_t v6 = *((void *)a2 + 1);
  *a1 = *(void *)a2;
  a1[1] = v6;
  _s7SwiftUI7BindingVy10Foundation4DateVGMaTm_0(0, &lazy cache variable for type metadata for Binding<Date>, MEMORY[0x1E4F41638]);
  uint64_t v8 = *(int *)(v7 + 32);
  uint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = &a2[v8];
  uint64_t v11 = type metadata accessor for Date();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = *(void (**)(char *, char *, uint64_t))(v12 + 32);
  v13(v9, v10, v11);
  uint64_t v24 = a3;
  uint64_t v14 = *(int *)(a3 + 24);
  uint64_t v15 = (char *)a1 + v14;
  int v16 = &a2[v14];
  int v17 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48);
  if (v17(&a2[v14], 1, v11))
  {
    _s7SwiftUI7BindingVy10Foundation4DateVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for Date?, MEMORY[0x1E4FBB718]);
    memcpy(v15, v16, *(void *)(*(void *)(v18 - 8) + 64));
  }
  else
  {
    v13(v15, v16, v11);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v15, 0, 1, v11);
  }
  uint64_t v19 = *(int *)(v24 + 28);
  unint64_t v20 = (char *)a1 + v19;
  uint64_t v21 = &a2[v19];
  if (v17(&a2[v19], 1, v11))
  {
    _s7SwiftUI7BindingVy10Foundation4DateVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for Date?, MEMORY[0x1E4FBB718]);
    memcpy(v20, v21, *(void *)(*(void *)(v22 - 8) + 64));
  }
  else
  {
    v13(v20, v21, v11);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v20, 0, 1, v11);
  }
  *(void *)((char *)a1 + *(int *)(v24 + 32)) = *(void *)&a2[*(int *)(v24 + 32)];
  return a1;
}

char *assignWithTake for DatePickerStyleConfiguration(char *a1, void *a2, uint64_t a3)
{
  *(void *)a1 = *a2;
  swift_release();
  *((void *)a1 + 1) = a2[1];
  swift_release();
  _s7SwiftUI7BindingVy10Foundation4DateVGMaTm_0(0, &lazy cache variable for type metadata for Binding<Date>, MEMORY[0x1E4F41638]);
  uint64_t v7 = *(int *)(v6 + 32);
  uint64_t v8 = &a1[v7];
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for Date();
  uint64_t v11 = *(void *)(v10 - 8);
  unint64_t v26 = *(void (**)(char *, char *, uint64_t))(v11 + 40);
  v26(v8, v9, v10);
  uint64_t v27 = a3;
  uint64_t v12 = *(int *)(a3 + 24);
  uint64_t v13 = &a1[v12];
  uint64_t v14 = (char *)a2 + v12;
  uint64_t v15 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v11 + 48);
  int v16 = v15(&a1[v12], 1, v10);
  int v17 = v15(v14, 1, v10);
  if (v16)
  {
    if (!v17)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v13, v14, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v13, 0, 1, v10);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v17)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
LABEL_6:
    _s7SwiftUI7BindingVy10Foundation4DateVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for Date?, MEMORY[0x1E4FBB718]);
    memcpy(v13, v14, *(void *)(*(void *)(v18 - 8) + 64));
    goto LABEL_7;
  }
  v26(v13, v14, v10);
LABEL_7:
  uint64_t v19 = *(int *)(v27 + 28);
  unint64_t v20 = &a1[v19];
  uint64_t v21 = (char *)a2 + v19;
  int v22 = v15(&a1[v19], 1, v10);
  int v23 = v15(v21, 1, v10);
  if (!v22)
  {
    if (!v23)
    {
      v26(v20, v21, v10);
      goto LABEL_13;
    }
    (*(void (**)(char *, uint64_t))(v11 + 8))(v20, v10);
    goto LABEL_12;
  }
  if (v23)
  {
LABEL_12:
    _s7SwiftUI7BindingVy10Foundation4DateVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for Date?, MEMORY[0x1E4FBB718]);
    memcpy(v20, v21, *(void *)(*(void *)(v24 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v20, v21, v10);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v20, 0, 1, v10);
LABEL_13:
  *(void *)&a1[*(int *)(v27 + 32)] = *(void *)((char *)a2 + *(int *)(v27 + 32));
  return a1;
}

uint64_t getEnumTagSinglePayload for DatePickerStyleConfiguration(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_188309F6C);
}

uint64_t sub_188309F6C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _s7SwiftUI7BindingVy10Foundation4DateVGMaTm_0(0, &lazy cache variable for type metadata for Binding<Date>, MEMORY[0x1E4F41638]);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    _s7SwiftUI7BindingVy10Foundation4DateVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for Date?, MEMORY[0x1E4FBB718]);
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 48);
    uint64_t v12 = v10;
    uint64_t v13 = a1 + *(int *)(a3 + 24);
    return v11(v13, a2, v12);
  }
}

uint64_t storeEnumTagSinglePayload for DatePickerStyleConfiguration(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_18830A0B0);
}

uint64_t sub_18830A0B0(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  _s7SwiftUI7BindingVy10Foundation4DateVGMaTm_0(0, &lazy cache variable for type metadata for Binding<Date>, MEMORY[0x1E4F41638]);
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, v8);
  }
  else
  {
    _s7SwiftUI7BindingVy10Foundation4DateVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for Date?, MEMORY[0x1E4FBB718]);
    uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56);
    uint64_t v14 = v12;
    uint64_t v15 = a1 + *(int *)(a4 + 24);
    return v13(v15, a2, a2, v14);
  }
}

void type metadata completion function for DatePickerStyleConfiguration()
{
  _s7SwiftUI7BindingVy10Foundation4DateVGMaTm_0(319, &lazy cache variable for type metadata for Binding<Date>, MEMORY[0x1E4F41638]);
  if (v0 <= 0x3F)
  {
    _s7SwiftUI7BindingVy10Foundation4DateVGMaTm_0(319, (unint64_t *)&lazy cache variable for type metadata for Date?, MEMORY[0x1E4FBB718]);
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

ValueMetadata *type metadata accessor for DatePickerStyleConfiguration.Label()
{
  return &type metadata for DatePickerStyleConfiguration.Label;
}

ValueMetadata *type metadata accessor for _DatePickerStyleLabel()
{
  return &type metadata for _DatePickerStyleLabel;
}

uint64_t sub_18830A32C()
{
  return swift_getWitnessTable();
}

uint64_t *initializeBufferWithCopyOfBuffer for ResolvedDatePickerStyle(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = type metadata accessor for DatePickerStyleConfiguration(0);
  int v5 = *(_DWORD *)(*(void *)(v4 - 8) + 80);
  uint64_t v6 = *a2;
  *a1 = *a2;
  if ((v5 & 0x20000) != 0)
  {
    a1 = (uint64_t *)(v6 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = (int *)v4;
    a1[1] = a2[1];
    _s7SwiftUI7BindingVy10Foundation4DateVGMaTm_0(0, &lazy cache variable for type metadata for Binding<Date>, MEMORY[0x1E4F41638]);
    uint64_t v9 = *(int *)(v8 + 32);
    uint64_t v10 = (char *)a1 + v9;
    uint64_t v24 = (char *)a2 + v9;
    uint64_t v11 = type metadata accessor for Date();
    uint64_t v12 = *(void *)(v11 - 8);
    uint64_t v13 = *(void (**)(char *, char *, uint64_t))(v12 + 16);
    swift_retain();
    swift_retain();
    v13(v10, v24, v11);
    uint64_t v14 = v7[6];
    uint64_t v15 = (char *)a1 + v14;
    int v16 = (char *)a2 + v14;
    int v23 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48);
    if (v23((char *)a2 + v14, 1, v11))
    {
      _s7SwiftUI7BindingVy10Foundation4DateVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for Date?, MEMORY[0x1E4FBB718]);
      memcpy(v15, v16, *(void *)(*(void *)(v17 - 8) + 64));
    }
    else
    {
      v13(v15, v16, v11);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v15, 0, 1, v11);
    }
    uint64_t v18 = v7[7];
    uint64_t v19 = (char *)a1 + v18;
    unint64_t v20 = (char *)a2 + v18;
    if (v23((char *)a2 + v18, 1, v11))
    {
      _s7SwiftUI7BindingVy10Foundation4DateVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for Date?, MEMORY[0x1E4FBB718]);
      memcpy(v19, v20, *(void *)(*(void *)(v21 - 8) + 64));
    }
    else
    {
      v13(v19, v20, v11);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v19, 0, 1, v11);
    }
    *(uint64_t *)((char *)a1 + v7[8]) = *(uint64_t *)((char *)a2 + v7[8]);
  }
  return a1;
}

uint64_t destroy for ResolvedDatePickerStyle(uint64_t a1)
{
  swift_release();
  swift_release();
  _s7SwiftUI7BindingVy10Foundation4DateVGMaTm_0(0, &lazy cache variable for type metadata for Binding<Date>, MEMORY[0x1E4F41638]);
  uint64_t v3 = a1 + *(int *)(v2 + 32);
  uint64_t v4 = type metadata accessor for Date();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v11 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
  v11(v3, v4);
  uint64_t v6 = type metadata accessor for DatePickerStyleConfiguration(0);
  uint64_t v7 = a1 + *(int *)(v6 + 24);
  uint64_t v8 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
  if (!v8(v7, 1, v4)) {
    v11(v7, v4);
  }
  uint64_t v9 = a1 + *(int *)(v6 + 28);
  uint64_t result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v8)(v9, 1, v4);
  if (!result)
  {
    return ((uint64_t (*)(uint64_t, uint64_t))v11)(v9, v4);
  }
  return result;
}

void *initializeWithCopy for ResolvedDatePickerStyle(void *a1, char *a2)
{
  uint64_t v4 = *((void *)a2 + 1);
  *a1 = *(void *)a2;
  a1[1] = v4;
  _s7SwiftUI7BindingVy10Foundation4DateVGMaTm_0(0, &lazy cache variable for type metadata for Binding<Date>, MEMORY[0x1E4F41638]);
  uint64_t v6 = *(int *)(v5 + 32);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = &a2[v6];
  uint64_t v9 = type metadata accessor for Date();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(void (**)(char *, char *, uint64_t))(v10 + 16);
  swift_retain();
  swift_retain();
  v11(v7, v8, v9);
  int v22 = (int *)type metadata accessor for DatePickerStyleConfiguration(0);
  uint64_t v12 = v22[6];
  uint64_t v13 = (char *)a1 + v12;
  uint64_t v14 = &a2[v12];
  uint64_t v15 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48);
  if (v15(&a2[v12], 1, v9))
  {
    _s7SwiftUI7BindingVy10Foundation4DateVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for Date?, MEMORY[0x1E4FBB718]);
    memcpy(v13, v14, *(void *)(*(void *)(v16 - 8) + 64));
  }
  else
  {
    v11(v13, v14, v9);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v13, 0, 1, v9);
  }
  uint64_t v17 = v22[7];
  uint64_t v18 = (char *)a1 + v17;
  uint64_t v19 = &a2[v17];
  if (v15(&a2[v17], 1, v9))
  {
    _s7SwiftUI7BindingVy10Foundation4DateVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for Date?, MEMORY[0x1E4FBB718]);
    memcpy(v18, v19, *(void *)(*(void *)(v20 - 8) + 64));
  }
  else
  {
    v11(v18, v19, v9);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v18, 0, 1, v9);
  }
  *(void *)((char *)a1 + v22[8]) = *(void *)&a2[v22[8]];
  return a1;
}

char *assignWithCopy for ResolvedDatePickerStyle(char *a1, void *a2)
{
  *(void *)a1 = *a2;
  swift_retain();
  swift_release();
  *((void *)a1 + 1) = a2[1];
  swift_retain();
  swift_release();
  _s7SwiftUI7BindingVy10Foundation4DateVGMaTm_0(0, &lazy cache variable for type metadata for Binding<Date>, MEMORY[0x1E4F41638]);
  uint64_t v5 = *(int *)(v4 + 32);
  uint64_t v6 = &a1[v5];
  uint64_t v7 = (char *)a2 + v5;
  uint64_t v8 = type metadata accessor for Date();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v24 = *(void (**)(char *, char *, uint64_t))(v9 + 24);
  v24(v6, v7, v8);
  char v25 = (int *)type metadata accessor for DatePickerStyleConfiguration(0);
  uint64_t v10 = v25[6];
  uint64_t v11 = &a1[v10];
  uint64_t v12 = (char *)a2 + v10;
  uint64_t v13 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 48);
  int v14 = v13(&a1[v10], 1, v8);
  int v15 = v13(v12, 1, v8);
  if (v14)
  {
    if (!v15)
    {
      (*(void (**)(char *, char *, uint64_t))(v9 + 16))(v11, v12, v8);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v9 + 56))(v11, 0, 1, v8);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v15)
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
LABEL_6:
    _s7SwiftUI7BindingVy10Foundation4DateVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for Date?, MEMORY[0x1E4FBB718]);
    memcpy(v11, v12, *(void *)(*(void *)(v16 - 8) + 64));
    goto LABEL_7;
  }
  v24(v11, v12, v8);
LABEL_7:
  uint64_t v17 = v25[7];
  uint64_t v18 = &a1[v17];
  uint64_t v19 = (char *)a2 + v17;
  int v20 = v13(&a1[v17], 1, v8);
  int v21 = v13(v19, 1, v8);
  if (!v20)
  {
    if (!v21)
    {
      v24(v18, v19, v8);
      goto LABEL_13;
    }
    (*(void (**)(char *, uint64_t))(v9 + 8))(v18, v8);
    goto LABEL_12;
  }
  if (v21)
  {
LABEL_12:
    _s7SwiftUI7BindingVy10Foundation4DateVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for Date?, MEMORY[0x1E4FBB718]);
    memcpy(v18, v19, *(void *)(*(void *)(v22 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v9 + 16))(v18, v19, v8);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v9 + 56))(v18, 0, 1, v8);
LABEL_13:
  *(void *)&a1[v25[8]] = *(void *)((char *)a2 + v25[8]);
  return a1;
}

void *initializeWithTake for ResolvedDatePickerStyle(void *a1, char *a2)
{
  uint64_t v4 = *((void *)a2 + 1);
  *a1 = *(void *)a2;
  a1[1] = v4;
  _s7SwiftUI7BindingVy10Foundation4DateVGMaTm_0(0, &lazy cache variable for type metadata for Binding<Date>, MEMORY[0x1E4F41638]);
  uint64_t v6 = *(int *)(v5 + 32);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = &a2[v6];
  uint64_t v9 = type metadata accessor for Date();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(void (**)(char *, char *, uint64_t))(v10 + 32);
  v11(v7, v8, v9);
  uint64_t v22 = (int *)type metadata accessor for DatePickerStyleConfiguration(0);
  uint64_t v12 = v22[6];
  uint64_t v13 = (char *)a1 + v12;
  int v14 = &a2[v12];
  int v15 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48);
  if (v15(&a2[v12], 1, v9))
  {
    _s7SwiftUI7BindingVy10Foundation4DateVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for Date?, MEMORY[0x1E4FBB718]);
    memcpy(v13, v14, *(void *)(*(void *)(v16 - 8) + 64));
  }
  else
  {
    v11(v13, v14, v9);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v13, 0, 1, v9);
  }
  uint64_t v17 = v22[7];
  uint64_t v18 = (char *)a1 + v17;
  uint64_t v19 = &a2[v17];
  if (v15(&a2[v17], 1, v9))
  {
    _s7SwiftUI7BindingVy10Foundation4DateVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for Date?, MEMORY[0x1E4FBB718]);
    memcpy(v18, v19, *(void *)(*(void *)(v20 - 8) + 64));
  }
  else
  {
    v11(v18, v19, v9);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v18, 0, 1, v9);
  }
  *(void *)((char *)a1 + v22[8]) = *(void *)&a2[v22[8]];
  return a1;
}

char *assignWithTake for ResolvedDatePickerStyle(char *a1, void *a2)
{
  *(void *)a1 = *a2;
  swift_release();
  *((void *)a1 + 1) = a2[1];
  swift_release();
  _s7SwiftUI7BindingVy10Foundation4DateVGMaTm_0(0, &lazy cache variable for type metadata for Binding<Date>, MEMORY[0x1E4F41638]);
  uint64_t v5 = *(int *)(v4 + 32);
  uint64_t v6 = &a1[v5];
  uint64_t v7 = (char *)a2 + v5;
  uint64_t v8 = type metadata accessor for Date();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v24 = *(void (**)(char *, char *, uint64_t))(v9 + 40);
  v24(v6, v7, v8);
  char v25 = (int *)type metadata accessor for DatePickerStyleConfiguration(0);
  uint64_t v10 = v25[6];
  uint64_t v11 = &a1[v10];
  uint64_t v12 = (char *)a2 + v10;
  uint64_t v13 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 48);
  int v14 = v13(&a1[v10], 1, v8);
  int v15 = v13(v12, 1, v8);
  if (v14)
  {
    if (!v15)
    {
      (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v11, v12, v8);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v9 + 56))(v11, 0, 1, v8);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v15)
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
LABEL_6:
    _s7SwiftUI7BindingVy10Foundation4DateVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for Date?, MEMORY[0x1E4FBB718]);
    memcpy(v11, v12, *(void *)(*(void *)(v16 - 8) + 64));
    goto LABEL_7;
  }
  v24(v11, v12, v8);
LABEL_7:
  uint64_t v17 = v25[7];
  uint64_t v18 = &a1[v17];
  uint64_t v19 = (char *)a2 + v17;
  int v20 = v13(&a1[v17], 1, v8);
  int v21 = v13(v19, 1, v8);
  if (!v20)
  {
    if (!v21)
    {
      v24(v18, v19, v8);
      goto LABEL_13;
    }
    (*(void (**)(char *, uint64_t))(v9 + 8))(v18, v8);
    goto LABEL_12;
  }
  if (v21)
  {
LABEL_12:
    _s7SwiftUI7BindingVy10Foundation4DateVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for Date?, MEMORY[0x1E4FBB718]);
    memcpy(v18, v19, *(void *)(*(void *)(v22 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v18, v19, v8);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v9 + 56))(v18, 0, 1, v8);
LABEL_13:
  *(void *)&a1[v25[8]] = *(void *)((char *)a2 + v25[8]);
  return a1;
}

uint64_t getEnumTagSinglePayload for ResolvedDatePickerStyle(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_18830B360);
}

uint64_t sub_18830B360(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for DatePickerStyleConfiguration(0);
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48);

  return v5(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for ResolvedDatePickerStyle(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_18830B3E0);
}

uint64_t sub_18830B3E0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for DatePickerStyleConfiguration(0);
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);

  return v5(a1, a2, a2, v4);
}

uint64_t type metadata accessor for ResolvedDatePickerStyle(uint64_t a1)
{
  return type metadata accessor for SortableTableHeaderButton(a1, (uint64_t *)&type metadata singleton initialization cache for ResolvedDatePickerStyle);
}

uint64_t type metadata completion function for ResolvedDatePickerStyle()
{
  uint64_t result = type metadata accessor for DatePickerStyleConfiguration(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for DatePickerStyleModifier(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (!a2) {
    return 0;
  }
  unsigned int v7 = a2 - v5;
  if (a2 <= v5) {
    goto LABEL_19;
  }
  char v8 = 8 * v6;
  if (v6 <= 3)
  {
    unsigned int v10 = ((v7 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      int v9 = *(_DWORD *)((char *)a1 + v6);
      if (!v9) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      int v9 = *(unsigned __int16 *)((char *)a1 + v6);
      if (!*(unsigned __int16 *)((char *)a1 + v6)) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_19:
      if (v5) {
        return (*(uint64_t (**)(void))(v4 + 48))();
      }
      return 0;
    }
  }
  int v9 = *((unsigned __int8 *)a1 + v6);
  if (!*((unsigned char *)a1 + v6)) {
    goto LABEL_19;
  }
LABEL_11:
  int v11 = (v9 - 1) << v8;
  if (v6 > 3) {
    int v11 = 0;
  }
  if (v6)
  {
    if (v6 > 3) {
      LODWORD(v6) = 4;
    }
    switch((int)v6)
    {
      case 2:
        LODWORD(v6) = *a1;
        break;
      case 3:
        LODWORD(v6) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v6) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v6) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v5 + (v6 | v11) + 1;
}

void storeEnumTagSinglePayload for DatePickerStyleModifier(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = *(void *)(v6 + 64);
  BOOL v9 = a3 >= v7;
  unsigned int v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      unsigned int v14 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v14))
      {
        int v11 = 4;
      }
      else if (v14 >= 0x100)
      {
        int v11 = 2;
      }
      else
      {
        int v11 = v14 > 1;
      }
    }
    else
    {
      int v11 = 1;
    }
  }
  else
  {
    int v11 = 0;
  }
  if (v7 < a2)
  {
    unsigned int v12 = ~v7 + a2;
    if (v8 < 4)
    {
      int v13 = (v12 >> (8 * v8)) + 1;
      if (v8)
      {
        int v15 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if (v8 == 3)
        {
          *(_WORD *)a1 = v15;
          a1[2] = BYTE2(v15);
        }
        else if (v8 == 2)
        {
          *(_WORD *)a1 = v15;
        }
        else
        {
          *a1 = v15;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v12;
      int v13 = 1;
    }
    switch(v11)
    {
      case 1:
        a1[v8] = v13;
        return;
      case 2:
        *(_WORD *)&a1[v8] = v13;
        return;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v8] = v13;
        return;
      default:
        return;
    }
  }
  switch(v11)
  {
    case 1:
      a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 2:
      *(_WORD *)&a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 3:
LABEL_34:
      __break(1u);
      JUMPOUT(0x18830B870);
    case 4:
      *(_DWORD *)&a1[v8] = 0;
      goto LABEL_20;
    default:
LABEL_20:
      if (a2)
      {
LABEL_21:
        uint64_t v16 = *(void (**)(void))(v6 + 56);
        v16();
      }
      return;
  }
}

_UNKNOWN **base witness table accessor for ViewModifier in DatePickerStyleModifier<A>()
{
  return &protocol witness table for DatePickerStyleModifier<A>;
}

uint64_t base witness table accessor for MultiViewModifier in DatePickerStyleModifier<A>()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for PrimitiveViewModifier in DatePickerStyleModifier<A>()
{
  return swift_getWitnessTable();
}

uint64_t associated type witness table accessor for StyleModifier.StyleBody : View in DatePickerStyleModifier<A>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t base witness table accessor for View in ResolvedDatePickerStyle()
{
  return _s7SwiftUI23ResolvedDatePickerStyleVAcA4ViewAAWlTm_0(&lazy protocol witness table cache variable for type ResolvedDatePickerStyle and conformance ResolvedDatePickerStyle, (void (*)(uint64_t))type metadata accessor for ResolvedDatePickerStyle);
}

uint64_t associated type witness table accessor for StyleableView.DefaultStyleModifier : StyleModifier in ResolvedDatePickerStyle()
{
  return _s7SwiftUI23ResolvedDatePickerStyleVAcA4ViewAAWlTm_0(&lazy protocol witness table cache variable for type DatePickerStyleModifier<DefaultDatePickerStyle> and conformance DatePickerStyleModifier<A>, (void (*)(uint64_t))type metadata accessor for DatePickerStyleModifier<DefaultDatePickerStyle>);
}

uint64_t _s7SwiftUI23ResolvedDatePickerStyleVAcA4ViewAAWlTm_0(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void type metadata accessor for DatePickerStyleModifier<DefaultDatePickerStyle>()
{
  if (!lazy cache variable for type metadata for DatePickerStyleModifier<DefaultDatePickerStyle>)
  {
    lazy protocol witness table accessor for type DefaultDatePickerStyle and conformance DefaultDatePickerStyle();
    unint64_t v0 = type metadata accessor for DatePickerStyleModifier();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for DatePickerStyleModifier<DefaultDatePickerStyle>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type DefaultDatePickerStyle and conformance DefaultDatePickerStyle()
{
  unint64_t result = lazy protocol witness table cache variable for type DefaultDatePickerStyle and conformance DefaultDatePickerStyle;
  if (!lazy protocol witness table cache variable for type DefaultDatePickerStyle and conformance DefaultDatePickerStyle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DefaultDatePickerStyle and conformance DefaultDatePickerStyle);
  }
  return result;
}

uint64_t associated type witness table accessor for View.Body : View in ResolvedDatePickerStyle()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t outlined destroy of DatePickerStyleConfiguration(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for DatePickerStyleConfiguration(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_18830BB20()
{
  return _s7SwiftUI23ResolvedDatePickerStyleVAcA4ViewAAWlTm_0(&lazy protocol witness table cache variable for type DatePicker<DatePickerStyleConfiguration.Label> and conformance DatePicker<A>, (void (*)(uint64_t))type metadata accessor for DatePicker<DatePickerStyleConfiguration.Label>);
}

uint64_t sub_18830BB68()
{
  swift_getAssociatedTypeWitness();

  return swift_getAssociatedConformanceWitness();
}

uint64_t static ToolbarContentBuilder.buildBlock<A, B>(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  double v11 = MEMORY[0x1F4188790](TupleTypeMetadata2);
  int v13 = (char *)&v17 - v12;
  int v15 = (char *)&v17 + *(int *)(v14 + 48) - v12;
  (*(void (**)(char *, uint64_t, uint64_t, double))(*(void *)(a3 - 8) + 16))((char *)&v17 - v12, a1, a3, v11);
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(a4 - 8) + 16))(v15, a2, a4);
  return TupleToolbarContent.init(_:)((uint64_t)v13, TupleTypeMetadata2, a5);
}

uint64_t TableColumn<>.init(_:value:content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, void *a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11)
{
  return TableColumn<>.init(_:value:content:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, MEMORY[0x1E4F27000], (uint64_t)&unk_1ED493C00, (uint64_t)partial apply for closure #1 in TableColumn<>.init(_:value:content:), (void (*)(uint64_t))partial apply for closure #1 in TextField<>.init<A>(_:value:format:prompt:));
}

{
  return TableColumn<>.init(_:value:content:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, MEMORY[0x1E4F27000], (uint64_t)&unk_1ED493C50, (uint64_t)partial apply for closure #1 in TableColumn<>.init(_:value:content:), (void (*)(uint64_t))partial apply for closure #2 in TableColumn<>.init(_:sortUsing:content:));
}

{
  return TableColumn<>.init(_:value:content:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, MEMORY[0x1E4F27008], (uint64_t)&unk_1ED493C78, (uint64_t)partial apply for closure #1 in TableColumn<>.init(_:value:content:), (void (*)(uint64_t))partial apply for closure #1 in TextField<>.init<A>(_:value:format:prompt:));
}

{
  return TableColumn<>.init(_:value:content:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, MEMORY[0x1E4F27008], (uint64_t)&unk_1ED493CC8, (uint64_t)partial apply for closure #1 in TableColumn<>.init(_:value:content:), (void (*)(uint64_t))partial apply for closure #2 in TableColumn<>.init(_:sortUsing:content:));
}

{
  return TableColumn<>.init(_:value:content:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, MEMORY[0x1E4F27010], (uint64_t)&unk_1ED493CF0, (uint64_t)partial apply for closure #1 in TableColumn<>.init(_:value:content:), (void (*)(uint64_t))partial apply for closure #1 in TextField<>.init<A>(_:value:format:prompt:));
}

{
  return TableColumn<>.init(_:value:content:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, MEMORY[0x1E4F27010], (uint64_t)&unk_1ED493D40, (uint64_t)partial apply for closure #1 in TableColumn<>.init(_:value:content:), (void (*)(uint64_t))partial apply for closure #2 in TableColumn<>.init(_:sortUsing:content:));
}

{
  return TableColumn<>.init(_:value:content:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, MEMORY[0x1E4F27018], (uint64_t)&unk_1ED493D68, (uint64_t)partial apply for closure #1 in TableColumn<>.init(_:value:content:), (void (*)(uint64_t))partial apply for closure #1 in TextField<>.init<A>(_:value:format:prompt:));
}

{
  return TableColumn<>.init(_:value:content:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, MEMORY[0x1E4F27018], (uint64_t)&unk_1ED493DB8, (uint64_t)partial apply for closure #1 in TableColumn<>.init(_:value:content:), (void (*)(uint64_t))partial apply for closure #2 in TableColumn<>.init(_:sortUsing:content:));
}

{
  return TableColumn<>.init(_:value:content:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, MEMORY[0x1E4F27020], (uint64_t)&unk_1ED493DE0, (uint64_t)partial apply for closure #1 in TableColumn<>.init(_:value:content:), (void (*)(uint64_t))partial apply for closure #1 in TextField<>.init<A>(_:value:format:prompt:));
}

{
  return TableColumn<>.init(_:value:content:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, MEMORY[0x1E4F27020], (uint64_t)&unk_1ED493E30, (uint64_t)partial apply for closure #1 in TableColumn<>.init(_:value:content:), (void (*)(uint64_t))partial apply for closure #2 in TableColumn<>.init(_:sortUsing:content:));
}

{
  return TableColumn<>.init(_:value:content:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, MEMORY[0x1E4F27028], (uint64_t)&unk_1ED493E58, (uint64_t)partial apply for closure #1 in TableColumn<>.init(_:value:content:), (void (*)(uint64_t))partial apply for closure #1 in TextField<>.init<A>(_:value:format:prompt:));
}

{
  return TableColumn<>.init(_:value:content:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, MEMORY[0x1E4F27028], (uint64_t)&unk_1ED493EA8, (uint64_t)partial apply for closure #1 in TableColumn<>.init(_:value:content:), (void (*)(uint64_t))partial apply for closure #2 in TableColumn<>.init(_:sortUsing:content:));
}

{
  return TableColumn<>.init(_:value:content:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, MEMORY[0x1E4F27050], (uint64_t)&unk_1ED493ED0, (uint64_t)partial apply for closure #1 in TableColumn<>.init(_:value:content:), (void (*)(uint64_t))partial apply for closure #1 in TextField<>.init<A>(_:value:format:prompt:));
}

{
  return TableColumn<>.init(_:value:content:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, MEMORY[0x1E4F27050], (uint64_t)&unk_1ED493F20, (uint64_t)partial apply for closure #1 in TableColumn<>.init(_:value:content:), (void (*)(uint64_t))partial apply for closure #2 in TableColumn<>.init(_:sortUsing:content:));
}

{
  return TableColumn<>.init(_:value:content:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, MEMORY[0x1E4F27058], (uint64_t)&unk_1ED493F48, (uint64_t)partial apply for closure #1 in TableColumn<>.init(_:value:content:), (void (*)(uint64_t))partial apply for closure #1 in TextField<>.init<A>(_:value:format:prompt:));
}

{
  return TableColumn<>.init(_:value:content:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, MEMORY[0x1E4F27058], (uint64_t)&unk_1ED493F98, (uint64_t)partial apply for closure #1 in TableColumn<>.init(_:value:content:), (void (*)(uint64_t))partial apply for closure #2 in TableColumn<>.init(_:sortUsing:content:));
}

{
  return TableColumn<>.init(_:value:content:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, MEMORY[0x1E4F27060], (uint64_t)&unk_1ED493FC0, (uint64_t)partial apply for closure #1 in TableColumn<>.init(_:value:content:), (void (*)(uint64_t))partial apply for closure #1 in TextField<>.init<A>(_:value:format:prompt:));
}

{
  return TableColumn<>.init(_:value:content:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, MEMORY[0x1E4F27060], (uint64_t)&unk_1ED494010, (uint64_t)partial apply for closure #1 in TableColumn<>.init(_:value:content:), (void (*)(uint64_t))partial apply for closure #2 in TableColumn<>.init(_:sortUsing:content:));
}

{
  return TableColumn<>.init(_:value:content:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, MEMORY[0x1E4F27068], (uint64_t)&unk_1ED494038, (uint64_t)partial apply for closure #1 in TableColumn<>.init(_:value:content:), (void (*)(uint64_t))partial apply for closure #1 in TextField<>.init<A>(_:value:format:prompt:));
}

{
  return TableColumn<>.init(_:value:content:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, MEMORY[0x1E4F27068], (uint64_t)&unk_1ED494088, (uint64_t)partial apply for closure #1 in TableColumn<>.init(_:value:content:), (void (*)(uint64_t))partial apply for closure #2 in TableColumn<>.init(_:sortUsing:content:));
}

{
  return TableColumn<>.init(_:value:content:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, MEMORY[0x1E4F27070], (uint64_t)&unk_1ED4940B0, (uint64_t)partial apply for closure #1 in TableColumn<>.init(_:value:content:), (void (*)(uint64_t))partial apply for closure #1 in TextField<>.init<A>(_:value:format:prompt:));
}

{
  return TableColumn<>.init(_:value:content:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, MEMORY[0x1E4F27070], (uint64_t)&unk_1ED494100, (uint64_t)partial apply for closure #1 in TableColumn<>.init(_:value:content:), (void (*)(uint64_t))partial apply for closure #2 in TableColumn<>.init(_:sortUsing:content:));
}

{
  return TableColumn<>.init(_:value:content:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, MEMORY[0x1E4F27078], (uint64_t)&unk_1ED494128, (uint64_t)partial apply for closure #1 in TableColumn<>.init(_:value:content:), (void (*)(uint64_t))partial apply for closure #1 in TextField<>.init<A>(_:value:format:prompt:));
}

{
  return TableColumn<>.init(_:value:content:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, MEMORY[0x1E4F27078], (uint64_t)&unk_1ED494178, (uint64_t)partial apply for closure #1 in TableColumn<>.init(_:value:content:), (void (*)(uint64_t))partial apply for closure #2 in TableColumn<>.init(_:sortUsing:content:));
}

{
  return TableColumn<>.init(_:value:content:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, MEMORY[0x1E4F27080], (uint64_t)&unk_1ED4941A0, (uint64_t)partial apply for closure #1 in TableColumn<>.init(_:value:content:), (void (*)(uint64_t))partial apply for closure #1 in TextField<>.init<A>(_:value:format:prompt:));
}

{
  return TableColumn<>.init(_:value:content:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, MEMORY[0x1E4F27080], (uint64_t)&unk_1ED4941F0, (uint64_t)partial apply for closure #1 in TableColumn<>.init(_:value:content:), (void (*)(uint64_t))partial apply for closure #2 in TableColumn<>.init(_:sortUsing:content:));
}

{
  return TableColumn<>.init(_:value:content:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, MEMORY[0x1E4F27088], (uint64_t)&unk_1ED494218, (uint64_t)partial apply for closure #1 in TableColumn<>.init(_:value:content:), (void (*)(uint64_t))partial apply for closure #1 in TextField<>.init<A>(_:value:format:prompt:));
}

{
  return TableColumn<>.init(_:value:content:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, MEMORY[0x1E4F27088], (uint64_t)&unk_1ED494268, (uint64_t)partial apply for closure #1 in TableColumn<>.init(_:value:content:), (void (*)(uint64_t))partial apply for closure #2 in TableColumn<>.init(_:sortUsing:content:));
}

{
  return TableColumn<>.init(_:value:content:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, MEMORY[0x1E4F27030], (uint64_t)&unk_1ED494290, (uint64_t)partial apply for closure #1 in TableColumn<>.init(_:value:content:), (void (*)(uint64_t))partial apply for closure #1 in TextField<>.init<A>(_:value:format:prompt:));
}

{
  return TableColumn<>.init(_:value:content:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, MEMORY[0x1E4F27030], (uint64_t)&unk_1ED4942E0, (uint64_t)partial apply for closure #1 in TableColumn<>.init(_:value:content:), (void (*)(uint64_t))partial apply for closure #2 in TableColumn<>.init(_:sortUsing:content:));
}

{
  return TableColumn<>.init(_:value:content:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, MEMORY[0x1E4F27038], (uint64_t)&unk_1ED494308, (uint64_t)partial apply for closure #1 in TableColumn<>.init(_:value:content:), (void (*)(uint64_t))partial apply for closure #1 in TextField<>.init<A>(_:value:format:prompt:));
}

{
  return TableColumn<>.init(_:value:content:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, MEMORY[0x1E4F27038], (uint64_t)&unk_1ED494358, (uint64_t)partial apply for closure #1 in TableColumn<>.init(_:value:content:), (void (*)(uint64_t))partial apply for closure #2 in TableColumn<>.init(_:sortUsing:content:));
}

{
  return TableColumn<>.init(_:value:content:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, MEMORY[0x1E4F27090], (uint64_t)&unk_1ED494380, (uint64_t)partial apply for closure #1 in TableColumn<>.init(_:value:content:), (void (*)(uint64_t))partial apply for closure #1 in TextField<>.init<A>(_:value:format:prompt:));
}

{
  return TableColumn<>.init(_:value:content:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, MEMORY[0x1E4F27090], (uint64_t)&unk_1ED4943D0, (uint64_t)partial apply for closure #1 in TableColumn<>.init(_:value:content:), (void (*)(uint64_t))partial apply for closure #2 in TableColumn<>.init(_:sortUsing:content:));
}

{
  return TableColumn<>.init(_:value:content:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, MEMORY[0x1E4F27098], (uint64_t)&unk_1ED4943F8, (uint64_t)partial apply for closure #1 in TableColumn<>.init(_:value:content:), (void (*)(uint64_t))partial apply for closure #1 in TextField<>.init<A>(_:value:format:prompt:));
}

{
  return TableColumn<>.init(_:value:content:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, MEMORY[0x1E4F27098], (uint64_t)&unk_1ED494448, (uint64_t)partial apply for closure #1 in TableColumn<>.init(_:value:content:), (void (*)(uint64_t))partial apply for closure #2 in TableColumn<>.init(_:sortUsing:content:));
}

{
  return TableColumn<>.init(_:value:content:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, MEMORY[0x1E4F270A0], (uint64_t)&unk_1ED494470, (uint64_t)partial apply for closure #1 in TableColumn<>.init(_:value:content:), (void (*)(uint64_t))partial apply for closure #1 in TextField<>.init<A>(_:value:format:prompt:));
}

{
  return TableColumn<>.init(_:value:content:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, MEMORY[0x1E4F270A0], (uint64_t)&unk_1ED4944C0, (uint64_t)partial apply for closure #1 in TableColumn<>.init(_:value:content:), (void (*)(uint64_t))partial apply for closure #2 in TableColumn<>.init(_:sortUsing:content:));
}

{
  return TableColumn<>.init(_:value:content:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, MEMORY[0x1E4F270A8], (uint64_t)&unk_1ED4944E8, (uint64_t)partial apply for closure #1 in TableColumn<>.init(_:value:content:), (void (*)(uint64_t))partial apply for closure #1 in TextField<>.init<A>(_:value:format:prompt:));
}

{
  return TableColumn<>.init(_:value:content:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, MEMORY[0x1E4F270A8], (uint64_t)&unk_1ED494538, (uint64_t)partial apply for closure #1 in TableColumn<>.init(_:value:content:), (void (*)(uint64_t))partial apply for closure #2 in TableColumn<>.init(_:sortUsing:content:));
}

{
  return TableColumn<>.init(_:value:content:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, MEMORY[0x1E4F270B0], (uint64_t)&unk_1ED494560, (uint64_t)partial apply for closure #1 in TableColumn<>.init(_:value:content:), (void (*)(uint64_t))partial apply for closure #1 in TextField<>.init<A>(_:value:format:prompt:));
}

{
  return TableColumn<>.init(_:value:content:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, MEMORY[0x1E4F270B0], (uint64_t)&unk_1ED4945B0, (uint64_t)partial apply for closure #1 in TableColumn<>.init(_:value:content:), (void (*)(uint64_t))partial apply for closure #2 in TableColumn<>.init(_:sortUsing:content:));
}

{
  return TableColumn<>.init(_:value:content:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, MEMORY[0x1E4F270B8], (uint64_t)&unk_1ED4945D8, (uint64_t)partial apply for closure #1 in TableColumn<>.init(_:value:content:), (void (*)(uint64_t))partial apply for closure #1 in TextField<>.init<A>(_:value:format:prompt:));
}

{
  return TableColumn<>.init(_:value:content:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, MEMORY[0x1E4F270B8], (uint64_t)&unk_1ED494628, (uint64_t)partial apply for closure #1 in TableColumn<>.init(_:value:content:), (void (*)(uint64_t))partial apply for closure #2 in TableColumn<>.init(_:sortUsing:content:));
}

{
  return TableColumn<>.init(_:value:content:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, MEMORY[0x1E4F270C0], (uint64_t)&unk_1ED494650, (uint64_t)partial apply for closure #1 in TableColumn<>.init(_:value:content:), (void (*)(uint64_t))partial apply for closure #1 in TextField<>.init<A>(_:value:format:prompt:));
}

{
  return TableColumn<>.init(_:value:content:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, MEMORY[0x1E4F270C0], (uint64_t)&unk_1ED4946A0, (uint64_t)partial apply for closure #1 in TableColumn<>.init(_:value:content:), (void (*)(uint64_t))partial apply for closure #2 in TableColumn<>.init(_:sortUsing:content:));
}

{
  return TableColumn<>.init(_:value:content:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, MEMORY[0x1E4F270C8], (uint64_t)&unk_1ED4946C8, (uint64_t)partial apply for closure #1 in TableColumn<>.init(_:value:content:), (void (*)(uint64_t))partial apply for closure #1 in TextField<>.init<A>(_:value:format:prompt:));
}

{
  return TableColumn<>.init(_:value:content:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, MEMORY[0x1E4F270C8], (uint64_t)&unk_1ED494718, (uint64_t)partial apply for closure #1 in TableColumn<>.init(_:value:content:), (void (*)(uint64_t))partial apply for closure #2 in TableColumn<>.init(_:sortUsing:content:));
}

{
  return TableColumn<>.init(_:value:content:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, MEMORY[0x1E4F27040], (uint64_t)&unk_1ED494740, (uint64_t)partial apply for closure #1 in TableColumn<>.init(_:value:content:), (void (*)(uint64_t))partial apply for closure #1 in TextField<>.init<A>(_:value:format:prompt:));
}

{
  return TableColumn<>.init(_:value:content:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, MEMORY[0x1E4F27040], (uint64_t)&unk_1ED494790, (uint64_t)partial apply for closure #1 in TableColumn<>.init(_:value:content:), (void (*)(uint64_t))partial apply for closure #2 in TableColumn<>.init(_:sortUsing:content:));
}

{
  return TableColumn<>.init(_:value:content:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, MEMORY[0x1E4F27048], (uint64_t)&unk_1ED4947B8, (uint64_t)partial apply for closure #1 in TableColumn<>.init(_:value:content:), (void (*)(uint64_t))partial apply for closure #1 in TextField<>.init<A>(_:value:format:prompt:));
}

{
  return TableColumn<>.init(_:value:content:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, MEMORY[0x1E4F27048], (uint64_t)&unk_1ED494808, (uint64_t)partial apply for closure #1 in TableColumn<>.init(_:value:content:), (void (*)(uint64_t))partial apply for closure #2 in TableColumn<>.init(_:sortUsing:content:));
}

{
  return TableColumn<>.init(_:value:content:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, MEMORY[0x1E4F26FE0], (uint64_t)&unk_1ED494830, (uint64_t)partial apply for closure #1 in TableColumn<>.init(_:value:content:), (void (*)(uint64_t))partial apply for closure #1 in TextField<>.init<A>(_:value:format:prompt:));
}

{
  return TableColumn<>.init(_:value:content:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, MEMORY[0x1E4F26FE0], (uint64_t)&unk_1ED494880, (uint64_t)partial apply for closure #1 in TableColumn<>.init(_:value:content:), (void (*)(uint64_t))partial apply for closure #2 in TableColumn<>.init(_:sortUsing:content:));
}

{
  return TableColumn<>.init(_:value:content:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, MEMORY[0x1E4F26FE8], (uint64_t)&unk_1ED4948A8, (uint64_t)partial apply for closure #1 in TableColumn<>.init(_:value:content:), (void (*)(uint64_t))partial apply for closure #1 in TextField<>.init<A>(_:value:format:prompt:));
}

{
  return TableColumn<>.init(_:value:content:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, MEMORY[0x1E4F26FE8], (uint64_t)&unk_1ED4948F8, (uint64_t)partial apply for closure #1 in TableColumn<>.init(_:value:content:), (void (*)(uint64_t))partial apply for closure #2 in TableColumn<>.init(_:sortUsing:content:));
}

{
  return TableColumn<>.init(_:value:content:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, MEMORY[0x1E4F26FF0], (uint64_t)&unk_1ED494920, (uint64_t)partial apply for closure #1 in TableColumn<>.init(_:value:content:), (void (*)(uint64_t))partial apply for closure #1 in TextField<>.init<A>(_:value:format:prompt:));
}

{
  return TableColumn<>.init(_:value:content:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, MEMORY[0x1E4F26FF0], (uint64_t)&unk_1ED494970, (uint64_t)partial apply for closure #1 in TableColumn<>.init(_:value:content:), (void (*)(uint64_t))partial apply for closure #2 in TableColumn<>.init(_:sortUsing:content:));
}

{
  return TableColumn<>.init(_:value:content:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, MEMORY[0x1E4F26FF8], (uint64_t)&unk_1ED494998, (uint64_t)partial apply for closure #1 in TableColumn<>.init(_:value:content:), (void (*)(uint64_t))partial apply for closure #1 in TextField<>.init<A>(_:value:format:prompt:));
}

{
  return TableColumn<>.init(_:value:content:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, MEMORY[0x1E4F26FF8], (uint64_t)&unk_1ED4949E8, (uint64_t)partial apply for closure #1 in TableColumn<>.init(_:value:content:), (void (*)(uint64_t))partial apply for closure #2 in TableColumn<>.init(_:sortUsing:content:));
}

uint64_t sub_18830BD6C()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t TableColumn<>.init<A>(_:value:content:)@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10)
{
  return TableColumn<>.init<A>(_:value:content:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, MEMORY[0x1E4F27000], (uint64_t)&unk_1ED493C28, (uint64_t)partial apply for closure #1 in TableColumn<>.init<A>(_:value:content:), (void (*)(uint64_t))partial apply for closure #2 in TableColumn<>.init<A>(_:value:content:));
}

{
  return TableColumn<>.init<A>(_:value:content:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, MEMORY[0x1E4F27008], (uint64_t)&unk_1ED493CA0, (uint64_t)partial apply for closure #1 in TableColumn<>.init<A>(_:value:content:), (void (*)(uint64_t))partial apply for closure #2 in TableColumn<>.init<A>(_:value:content:));
}

{
  return TableColumn<>.init<A>(_:value:content:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, MEMORY[0x1E4F27010], (uint64_t)&unk_1ED493D18, (uint64_t)partial apply for closure #1 in TableColumn<>.init<A>(_:value:content:), (void (*)(uint64_t))partial apply for closure #2 in TableColumn<>.init<A>(_:value:content:));
}

{
  return TableColumn<>.init<A>(_:value:content:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, MEMORY[0x1E4F27018], (uint64_t)&unk_1ED493D90, (uint64_t)partial apply for closure #1 in TableColumn<>.init<A>(_:value:content:), (void (*)(uint64_t))partial apply for closure #2 in TableColumn<>.init<A>(_:value:content:));
}

{
  return TableColumn<>.init<A>(_:value:content:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, MEMORY[0x1E4F27020], (uint64_t)&unk_1ED493E08, (uint64_t)partial apply for closure #1 in TableColumn<>.init<A>(_:value:content:), (void (*)(uint64_t))partial apply for closure #2 in TableColumn<>.init<A>(_:value:content:));
}

{
  return TableColumn<>.init<A>(_:value:content:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, MEMORY[0x1E4F27028], (uint64_t)&unk_1ED493E80, (uint64_t)partial apply for closure #1 in TableColumn<>.init<A>(_:value:content:), (void (*)(uint64_t))partial apply for closure #2 in TableColumn<>.init<A>(_:value:content:));
}

{
  return TableColumn<>.init<A>(_:value:content:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, MEMORY[0x1E4F27050], (uint64_t)&unk_1ED493EF8, (uint64_t)partial apply for closure #1 in TableColumn<>.init<A>(_:value:content:), (void (*)(uint64_t))partial apply for closure #2 in TableColumn<>.init<A>(_:value:content:));
}

{
  return TableColumn<>.init<A>(_:value:content:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, MEMORY[0x1E4F27058], (uint64_t)&unk_1ED493F70, (uint64_t)partial apply for closure #1 in TableColumn<>.init<A>(_:value:content:), (void (*)(uint64_t))partial apply for closure #2 in TableColumn<>.init<A>(_:value:content:));
}

{
  return TableColumn<>.init<A>(_:value:content:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, MEMORY[0x1E4F27060], (uint64_t)&unk_1ED493FE8, (uint64_t)partial apply for closure #1 in TableColumn<>.init<A>(_:value:content:), (void (*)(uint64_t))partial apply for closure #2 in TableColumn<>.init<A>(_:value:content:));
}

{
  return TableColumn<>.init<A>(_:value:content:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, MEMORY[0x1E4F27068], (uint64_t)&unk_1ED494060, (uint64_t)partial apply for closure #1 in TableColumn<>.init<A>(_:value:content:), (void (*)(uint64_t))partial apply for closure #2 in TableColumn<>.init<A>(_:value:content:));
}

{
  return TableColumn<>.init<A>(_:value:content:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, MEMORY[0x1E4F27070], (uint64_t)&unk_1ED4940D8, (uint64_t)partial apply for closure #1 in TableColumn<>.init<A>(_:value:content:), (void (*)(uint64_t))partial apply for closure #2 in TableColumn<>.init<A>(_:value:content:));
}

{
  return TableColumn<>.init<A>(_:value:content:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, MEMORY[0x1E4F27078], (uint64_t)&unk_1ED494150, (uint64_t)partial apply for closure #1 in TableColumn<>.init<A>(_:value:content:), (void (*)(uint64_t))partial apply for closure #2 in TableColumn<>.init<A>(_:value:content:));
}

{
  return TableColumn<>.init<A>(_:value:content:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, MEMORY[0x1E4F27080], (uint64_t)&unk_1ED4941C8, (uint64_t)partial apply for closure #1 in TableColumn<>.init<A>(_:value:content:), (void (*)(uint64_t))partial apply for closure #2 in TableColumn<>.init<A>(_:value:content:));
}

{
  return TableColumn<>.init<A>(_:value:content:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, MEMORY[0x1E4F27088], (uint64_t)&unk_1ED494240, (uint64_t)partial apply for closure #1 in TableColumn<>.init<A>(_:value:content:), (void (*)(uint64_t))partial apply for closure #2 in TableColumn<>.init<A>(_:value:content:));
}

{
  return TableColumn<>.init<A>(_:value:content:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, MEMORY[0x1E4F27030], (uint64_t)&unk_1ED4942B8, (uint64_t)partial apply for closure #1 in TableColumn<>.init<A>(_:value:content:), (void (*)(uint64_t))partial apply for closure #2 in TableColumn<>.init<A>(_:value:content:));
}

{
  return TableColumn<>.init<A>(_:value:content:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, MEMORY[0x1E4F27038], (uint64_t)&unk_1ED494330, (uint64_t)partial apply for closure #1 in TableColumn<>.init<A>(_:value:content:), (void (*)(uint64_t))partial apply for closure #2 in TableColumn<>.init<A>(_:value:content:));
}

{
  return TableColumn<>.init<A>(_:value:content:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, MEMORY[0x1E4F27090], (uint64_t)&unk_1ED4943A8, (uint64_t)partial apply for closure #1 in TableColumn<>.init<A>(_:value:content:), (void (*)(uint64_t))partial apply for closure #2 in TableColumn<>.init<A>(_:value:content:));
}

{
  return TableColumn<>.init<A>(_:value:content:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, MEMORY[0x1E4F27098], (uint64_t)&unk_1ED494420, (uint64_t)partial apply for closure #1 in TableColumn<>.init<A>(_:value:content:), (void (*)(uint64_t))partial apply for closure #2 in TableColumn<>.init<A>(_:value:content:));
}

{
  return TableColumn<>.init<A>(_:value:content:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, MEMORY[0x1E4F270A0], (uint64_t)&unk_1ED494498, (uint64_t)partial apply for closure #1 in TableColumn<>.init<A>(_:value:content:), (void (*)(uint64_t))partial apply for closure #2 in TableColumn<>.init<A>(_:value:content:));
}

{
  return TableColumn<>.init<A>(_:value:content:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, MEMORY[0x1E4F270A8], (uint64_t)&unk_1ED494510, (uint64_t)partial apply for closure #1 in TableColumn<>.init<A>(_:value:content:), (void (*)(uint64_t))partial apply for closure #2 in TableColumn<>.init<A>(_:value:content:));
}

{
  return TableColumn<>.init<A>(_:value:content:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, MEMORY[0x1E4F270B0], (uint64_t)&unk_1ED494588, (uint64_t)partial apply for closure #1 in TableColumn<>.init<A>(_:value:content:), (void (*)(uint64_t))partial apply for closure #2 in TableColumn<>.init<A>(_:value:content:));
}

{
  return TableColumn<>.init<A>(_:value:content:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, MEMORY[0x1E4F270B8], (uint64_t)&unk_1ED494600, (uint64_t)partial apply for closure #1 in TableColumn<>.init<A>(_:value:content:), (void (*)(uint64_t))partial apply for closure #2 in TableColumn<>.init<A>(_:value:content:));
}

{
  return TableColumn<>.init<A>(_:value:content:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, MEMORY[0x1E4F270C0], (uint64_t)&unk_1ED494678, (uint64_t)partial apply for closure #1 in TableColumn<>.init<A>(_:value:content:), (void (*)(uint64_t))partial apply for closure #2 in TableColumn<>.init<A>(_:value:content:));
}

{
  return TableColumn<>.init<A>(_:value:content:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, MEMORY[0x1E4F270C8], (uint64_t)&unk_1ED4946F0, (uint64_t)partial apply for closure #1 in TableColumn<>.init<A>(_:value:content:), (void (*)(uint64_t))partial apply for closure #2 in TableColumn<>.init<A>(_:value:content:));
}

{
  return TableColumn<>.init<A>(_:value:content:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, MEMORY[0x1E4F27040], (uint64_t)&unk_1ED494768, (uint64_t)partial apply for closure #1 in TableColumn<>.init<A>(_:value:content:), (void (*)(uint64_t))partial apply for closure #2 in TableColumn<>.init<A>(_:value:content:));
}

{
  return TableColumn<>.init<A>(_:value:content:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, MEMORY[0x1E4F27048], (uint64_t)&unk_1ED4947E0, (uint64_t)partial apply for closure #1 in TableColumn<>.init<A>(_:value:content:), (void (*)(uint64_t))partial apply for closure #2 in TableColumn<>.init<A>(_:value:content:));
}

{
  return TableColumn<>.init<A>(_:value:content:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, MEMORY[0x1E4F26FE0], (uint64_t)&unk_1ED494858, (uint64_t)partial apply for closure #1 in TableColumn<>.init<A>(_:value:content:), (void (*)(uint64_t))partial apply for closure #2 in TableColumn<>.init<A>(_:value:content:));
}

{
  return TableColumn<>.init<A>(_:value:content:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, MEMORY[0x1E4F26FE8], (uint64_t)&unk_1ED4948D0, (uint64_t)partial apply for closure #1 in TableColumn<>.init<A>(_:value:content:), (void (*)(uint64_t))partial apply for closure #2 in TableColumn<>.init<A>(_:value:content:));
}

{
  return TableColumn<>.init<A>(_:value:content:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, MEMORY[0x1E4F26FF0], (uint64_t)&unk_1ED494948, (uint64_t)partial apply for closure #1 in TableColumn<>.init<A>(_:value:content:), (void (*)(uint64_t))partial apply for closure #2 in TableColumn<>.init<A>(_:value:content:));
}

{
  return TableColumn<>.init<A>(_:value:content:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, MEMORY[0x1E4F26FF8], (uint64_t)&unk_1ED4949C0, (uint64_t)partial apply for closure #1 in TableColumn<>.init<A>(_:value:content:), (void (*)(uint64_t))partial apply for closure #2 in TableColumn<>.init<A>(_:value:content:));
}

uint64_t partial apply for closure #1 in TableColumn<>.init(_:value:content:)(uint64_t a1)
{
  return closure #1 in TableColumn<>.init(_:value:content:)(a1, v1[6], v1[7], v1[2], v1[3]);
}

uint64_t partial apply for closure #2 in TableColumn<>.init<A>(_:value:content:)@<X0>(uint64_t a1@<X8>)
{
  return closure #2 in TableColumn<>.init<A>(_:value:content:)(*(void *)(v1 + 64), a1);
}

uint64_t sub_18830CC58()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t TableColumn<>.init(_:value:content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, void *a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, void (*a12)(uint64_t, void), uint64_t a13, uint64_t a14, void (*a15)(uint64_t))
{
  uint64_t v34 = a9;
  uint64_t v35 = a7;
  uint64_t v28 = a2;
  uint64_t v29 = a6;
  int v30 = a3;
  uint64_t v27 = a1;
  uint64_t v33 = a14;
  uint64_t v31 = a4;
  CGFloat v32 = a15;
  uint64_t v16 = *(void *)(*a5 + *MEMORY[0x1E4FBC5F0]);
  uint64_t v17 = type metadata accessor for SortDescriptor();
  uint64_t v18 = type metadata accessor for Optional();
  MEMORY[0x1F4188790](v18 - 8);
  int v20 = (char *)&v26 - v19;
  uint64_t v21 = swift_retain();
  a12(v21, 0);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56))(v20, 0, 1, v17);
  uint64_t v22 = (void *)swift_allocObject();
  void v22[2] = v16;
  v22[3] = a8;
  _OWORD v22[4] = a10;
  v22[5] = a11;
  uint64_t v23 = v28;
  v22[6] = v29;
  v22[7] = v35;
  uint64_t v37 = v27;
  uint64_t v38 = v23;
  char v39 = v30;
  uint64_t v40 = v31;
  swift_retain();
  uint64_t WitnessTable = swift_getWitnessTable();
  TableColumn.init(comparator:content:label:)((uint64_t)v20, v33, (uint64_t)v22, v32, (uint64_t)v36, v16, v17, a8, v34, MEMORY[0x1E4F41420], a10, WitnessTable, a11, MEMORY[0x1E4F41418]);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

{
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t WitnessTable;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  void (*v39)(uint64_t);
  uint64_t v40;
  uint64_t v41;
  char v42[16];
  uint64_t v43;
  uint64_t v44;
  char v45;
  uint64_t v46;

  uint64_t v31 = a8;
  CGFloat v32 = a1;
  uint64_t v37 = a7;
  uint64_t v38 = a4;
  int v36 = a3;
  uint64_t v33 = a2;
  uint64_t v41 = a9;
  char v39 = a15;
  uint64_t v40 = a14;
  uint64_t v34 = a11;
  uint64_t v35 = a6;
  uint64_t v18 = *(void *)(*a5 + *MEMORY[0x1E4FBC5F0]);
  uint64_t v19 = type metadata accessor for SortDescriptor();
  int v20 = type metadata accessor for Optional();
  MEMORY[0x1F4188790](v20 - 8);
  uint64_t v22 = (char *)&v30 - v21;
  uint64_t v23 = swift_retain();
  a12(v23, 0);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v19 - 8) + 56))(v22, 0, 1, v19);
  uint64_t v24 = (void *)swift_allocObject();
  _OWORD v24[2] = v18;
  uint64_t v24[3] = a8;
  v24[4] = a10;
  uint64_t v26 = v34;
  char v25 = v35;
  v24[5] = v34;
  _OWORD v24[6] = v25;
  void v24[7] = v37;
  double v43 = a1;
  uint64_t v44 = a2;
  uint64_t v27 = v36 & 1;
  uint64_t v45 = v36 & 1;
  CGFloat v46 = v38;
  swift_retain();
  uint64_t WitnessTable = swift_getWitnessTable();
  TableColumn.init(comparator:content:label:)((uint64_t)v22, v40, (uint64_t)v24, v39, (uint64_t)v42, v18, v19, v31, v41, MEMORY[0x1E4F41420], a10, WitnessTable, v26, MEMORY[0x1E4F41418]);
  swift_release();
  swift_release();
  outlined consume of Text.Storage(v32, v33, v27);
  return swift_bridgeObjectRelease();
}

uint64_t TableColumn<>.init<A>(_:value:content:)@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, void (*a11)(uint64_t, void), uint64_t a12, uint64_t a13, void (*a14)(uint64_t))
{
  uint64_t v39 = a9;
  uint64_t v40 = a4;
  uint64_t v35 = a3;
  uint64_t v36 = a1;
  uint64_t v37 = a13;
  uint64_t v38 = a14;
  v34[1] = a12;
  uint64_t v18 = *(void *)(*a2 + *MEMORY[0x1E4FBC5F0]);
  uint64_t v19 = type metadata accessor for SortDescriptor();
  uint64_t v20 = type metadata accessor for Optional();
  MEMORY[0x1F4188790](v20 - 8);
  uint64_t v22 = (char *)v34 - v21;
  uint64_t v23 = swift_retain();
  a11(v23, 0);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v19 - 8) + 56))(v22, 0, 1, v19);
  uint64_t v24 = (void *)swift_allocObject();
  _OWORD v24[2] = v18;
  uint64_t v24[3] = a5;
  v24[4] = a6;
  v24[5] = a7;
  uint64_t v25 = a7;
  uint64_t v26 = a8;
  _OWORD v24[6] = a8;
  void v24[7] = a10;
  unsigned char v24[8] = v35;
  v24[9] = v40;
  uint64_t v42 = v18;
  uint64_t v43 = a5;
  uint64_t v27 = a5;
  uint64_t v44 = a6;
  uint64_t v45 = v25;
  uint64_t v28 = a6;
  uint64_t v29 = v25;
  uint64_t v46 = v26;
  uint64_t v47 = a10;
  uint64_t v30 = v26;
  uint64_t v31 = v36;
  uint64_t v48 = v36;
  swift_retain();
  uint64_t WitnessTable = swift_getWitnessTable();
  TableColumn.init(comparator:content:label:)((uint64_t)v22, v37, (uint64_t)v24, v38, (uint64_t)v41, v18, v19, v27, v39, MEMORY[0x1E4F41420], v29, WitnessTable, v30, MEMORY[0x1E4F41418]);
  swift_release();
  swift_release();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v28 - 8) + 8))(v31, v28);
}

uint64_t TableColumn<>.init(_:value:comparator:content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t *a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12)
{
  return TableColumn<>.init(_:value:comparator:content:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, MEMORY[0x1E4F26FD0], (uint64_t)&unk_1ED494A10, (uint64_t)partial apply for closure #1 in TableColumn<>.init(_:value:content:), (void (*)(uint64_t))partial apply for closure #1 in TextField<>.init<A>(_:value:format:prompt:));
}

{
  return TableColumn<>.init(_:value:comparator:content:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, MEMORY[0x1E4F26FD8], (uint64_t)&unk_1ED494A88, (uint64_t)partial apply for closure #1 in TableColumn<>.init(_:value:content:), (void (*)(uint64_t))partial apply for closure #1 in TextField<>.init<A>(_:value:format:prompt:));
}

uint64_t TableColumn<>.init<A>(_:value:comparator:content:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11)
{
  return TableColumn<>.init<A>(_:value:comparator:content:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, MEMORY[0x1E4F26FD0], (uint64_t)&unk_1ED494A38, (uint64_t)partial apply for closure #1 in TableColumn<>.init<A>(_:value:content:), (void (*)(uint64_t))partial apply for closure #2 in TableColumn<>.init<A>(_:value:content:));
}

{
  return TableColumn<>.init<A>(_:value:comparator:content:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, MEMORY[0x1E4F26FD8], (uint64_t)&unk_1ED494AB0, (uint64_t)partial apply for closure #1 in TableColumn<>.init<A>(_:value:content:), (void (*)(uint64_t))partial apply for closure #2 in TableColumn<>.init<A>(_:value:content:));
}

uint64_t TableColumn<>.init(_:value:comparator:content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, void *a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12)
{
  return TableColumn<>.init(_:value:comparator:content:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, MEMORY[0x1E4F26FD0], (uint64_t)&unk_1ED494A60, (uint64_t)partial apply for closure #1 in TableColumn<>.init(_:value:content:), (void (*)(uint64_t))partial apply for closure #2 in TableColumn<>.init(_:sortUsing:content:));
}

{
  return TableColumn<>.init(_:value:comparator:content:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, MEMORY[0x1E4F26FD8], (uint64_t)&unk_1ED494AD8, (uint64_t)partial apply for closure #1 in TableColumn<>.init(_:value:content:), (void (*)(uint64_t))partial apply for closure #2 in TableColumn<>.init(_:sortUsing:content:));
}

uint64_t TableColumn<>.init(_:value:comparator:content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t *a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, void (*a13)(uint64_t, char *), uint64_t a14, uint64_t a15, void (*a16)(uint64_t))
{
  uint64_t v49 = a9;
  uint64_t v50 = a8;
  uint64_t v43 = a2;
  uint64_t v44 = a7;
  uint64_t v37 = a6;
  int v45 = a3;
  uint64_t v48 = a16;
  uint64_t v41 = a11;
  uint64_t v42 = a1;
  uint64_t v46 = a4;
  uint64_t v47 = a15;
  uint64_t v39 = a14;
  uint64_t v40 = a12;
  uint64_t v17 = *a5;
  uint64_t v18 = type metadata accessor for String.StandardComparator();
  uint64_t v36 = v18;
  uint64_t v38 = *(void *)(v18 - 8);
  uint64_t v19 = v38;
  MEMORY[0x1F4188790](v18);
  uint64_t v21 = (char *)&v35 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = *(void *)(v17 + *MEMORY[0x1E4FBC5F0]);
  uint64_t v23 = type metadata accessor for SortDescriptor();
  uint64_t v24 = type metadata accessor for Optional();
  double v25 = MEMORY[0x1F4188790](v24 - 8);
  uint64_t v27 = (char *)&v35 - v26;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v19 + 16))(v21, a6, v18, v25);
  uint64_t v28 = swift_retain();
  SortDescriptor.init<A>(_:comparator:)(v28, (uint64_t)v21, v22, a13);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v23 - 8) + 56))(v27, 0, 1, v23);
  uint64_t v29 = (void *)swift_allocObject();
  _OWORD v29[2] = v22;
  _OWORD v29[3] = a10;
  uint64_t v30 = v40;
  uint64_t v31 = v41;
  v29[4] = v41;
  v29[5] = v30;
  uint64_t v32 = v43;
  _OWORD v29[6] = v44;
  v29[7] = v50;
  uint64_t v52 = v42;
  uint64_t v53 = v32;
  char v54 = v45;
  uint64_t v55 = v46;
  swift_retain();
  uint64_t WitnessTable = swift_getWitnessTable();
  TableColumn.init(comparator:content:label:)((uint64_t)v27, v47, (uint64_t)v29, v48, (uint64_t)v51, v22, v23, a10, v49, MEMORY[0x1E4F41420], v31, WitnessTable, v30, MEMORY[0x1E4F41418]);
  swift_release();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v38 + 8))(v37, v36);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t SortDescriptor.init<A>(_:comparator:)(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, char *))
{
  uint64_t v7 = type metadata accessor for String.StandardComparator();
  uint64_t v8 = *(void *)(v7 - 8);
  double v9 = MEMORY[0x1F4188790](v7);
  double v11 = (char *)&v13 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v8 + 16))(v11, a2, v7, v9);
  a4(a1, v11);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 8))(a2, v7);
}

uint64_t TableColumn<>.init<A>(_:value:comparator:content:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, void (*a12)(uint64_t, char *), uint64_t a13, uint64_t a14, void (*a15)(uint64_t))
{
  uint64_t v47 = a8;
  uint64_t v48 = a5;
  uint64_t v45 = a7;
  uint64_t v46 = a4;
  uint64_t v42 = a3;
  uint64_t v52 = a9;
  uint64_t v51 = a14;
  uint64_t v49 = a1;
  uint64_t v50 = a15;
  uint64_t v44 = a11;
  uint64_t v40 = a13;
  uint64_t v39 = a12;
  uint64_t v17 = *a2;
  uint64_t v18 = type metadata accessor for String.StandardComparator();
  uint64_t v41 = v18;
  uint64_t v43 = *(void *)(v18 - 8);
  uint64_t v19 = v43;
  MEMORY[0x1F4188790](v18);
  uint64_t v21 = (char *)&v37 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = *(void *)(v17 + *MEMORY[0x1E4FBC5F0]);
  uint64_t v23 = type metadata accessor for SortDescriptor();
  uint64_t v24 = type metadata accessor for Optional();
  double v25 = MEMORY[0x1F4188790](v24 - 8);
  uint64_t v27 = (char *)&v37 - v26;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v19 + 16))(v21, a3, v18, v25);
  uint64_t v28 = swift_retain();
  SortDescriptor.init<A>(_:comparator:)(v28, (uint64_t)v21, v22, v39);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v23 - 8) + 56))(v27, 0, 1, v23);
  uint64_t v29 = (void *)swift_allocObject();
  _OWORD v29[2] = v22;
  _OWORD v29[3] = a6;
  uint64_t v38 = a6;
  uint64_t v30 = v44;
  uint64_t v31 = v45;
  uint64_t v32 = v46;
  uint64_t v33 = v47;
  v29[4] = v45;
  v29[5] = v33;
  _OWORD v29[6] = a10;
  v29[7] = v30;
  _WORD v29[8] = v32;
  uint64_t v34 = v49;
  v29[9] = v48;
  uint64_t v54 = v22;
  uint64_t v55 = a6;
  uint64_t v56 = v31;
  uint64_t v57 = v33;
  uint64_t v58 = a10;
  uint64_t v59 = v30;
  uint64_t v60 = v34;
  swift_retain();
  uint64_t WitnessTable = swift_getWitnessTable();
  TableColumn.init(comparator:content:label:)((uint64_t)v27, v51, (uint64_t)v29, v50, (uint64_t)v53, v22, v23, v38, v52, MEMORY[0x1E4F41420], v33, WitnessTable, a10, MEMORY[0x1E4F41418]);
  swift_release();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v43 + 8))(v42, v41);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v31 - 8) + 8))(v34, v31);
}

uint64_t closure #2 in TableColumn<>.init<A>(_:value:content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  double v3 = MEMORY[0x1F4188790](a1);
  (*(void (**)(char *, double))(v5 + 16))((char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v3);
  uint64_t result = Text.init<A>(_:)();
  *(void *)a2 = result;
  *(void *)(a2 + 8) = v7;
  *(unsigned char *)(a2 + 16) = v8 & 1;
  *(void *)(a2 + 24) = v9;
  return result;
}

uint64_t TableColumn<>.init(_:value:comparator:content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, void *a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, void (*a13)(uint64_t, char *), uint64_t a14, uint64_t a15, void (*a16)(uint64_t))
{
  uint64_t v55 = a8;
  uint64_t v48 = a2;
  uint64_t v49 = a7;
  uint64_t v42 = a6;
  uint64_t v51 = a4;
  int v50 = a3;
  uint64_t v39 = a1;
  uint64_t v54 = a9;
  uint64_t v52 = a15;
  uint64_t v53 = a16;
  uint64_t v44 = a14;
  uint64_t v45 = a10;
  uint64_t v46 = a12;
  uint64_t v47 = a11;
  uint64_t v19 = *a5;
  uint64_t v20 = type metadata accessor for String.StandardComparator();
  uint64_t v41 = v20;
  uint64_t v43 = *(void *)(v20 - 8);
  uint64_t v21 = v43;
  MEMORY[0x1F4188790](v20);
  uint64_t v23 = (char *)&v38 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = *(void *)(v19 + *MEMORY[0x1E4FBC5F0]);
  uint64_t v25 = type metadata accessor for SortDescriptor();
  uint64_t v26 = type metadata accessor for Optional();
  double v27 = MEMORY[0x1F4188790](v26 - 8);
  uint64_t v29 = (char *)&v38 - v28;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v21 + 16))(v23, a6, v20, v27);
  uint64_t v40 = a5;
  uint64_t v30 = swift_retain();
  SortDescriptor.init<A>(_:comparator:)(v30, (uint64_t)v23, v24, a13);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v25 - 8) + 56))(v29, 0, 1, v25);
  uint64_t v31 = (void *)swift_allocObject();
  uint64_t v33 = v45;
  uint64_t v32 = v46;
  v31[2] = v24;
  v31[3] = v33;
  uint64_t v34 = v47;
  _OWORD v31[4] = v47;
  v31[5] = v32;
  v31[6] = v49;
  v31[7] = v55;
  uint64_t v57 = a1;
  uint64_t v35 = v48;
  uint64_t v58 = v48;
  LOBYTE(v21) = v50 & 1;
  char v59 = v50 & 1;
  uint64_t v60 = v51;
  swift_retain();
  uint64_t WitnessTable = swift_getWitnessTable();
  TableColumn.init(comparator:content:label:)((uint64_t)v29, v52, (uint64_t)v31, v53, (uint64_t)v56, v24, v25, v33, v54, MEMORY[0x1E4F41420], v34, WitnessTable, v32, MEMORY[0x1E4F41418]);
  swift_release();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v43 + 8))(v42, v41);
  outlined consume of Text.Storage(v39, v35, v21);
  return swift_bridgeObjectRelease();
}

uint64_t closure #1 in TableColumn<>.init(_:value:content:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = *(void *)(a5 - 8);
  MEMORY[0x1F4188790](a1);
  char v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v10 = MEMORY[0x1F4188790](v9);
  uint64_t v12 = (char *)&v17 - v11;
  v14(*v13, v10);
  static ViewBuilder.buildExpression<A>(_:)(v8);
  int v15 = *(void (**)(char *, uint64_t))(v6 + 8);
  v15(v8, a5);
  static ViewBuilder.buildExpression<A>(_:)(v12);
  return ((uint64_t (*)(char *, uint64_t))v15)(v12, a5);
}

uint64_t sub_18830FD20()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in TableColumn<>.init<>(_:value:comparator:)@<X0>(id *a1@<X0>, uint64_t a2@<X8>)
{
  return closure #1 in TableColumn<>.init<A>(_:value:comparator:)(a1, a2);
}

uint64_t closure #1 in TableColumn<>.init<A>(_:value:comparator:)@<X0>(id *a1@<X0>, uint64_t a2@<X8>)
{
  id v3 = *a1;
  swift_getAtKeyPath();

  lazy protocol witness table accessor for type String and conformance String();
  uint64_t result = Text.init<A>(_:)();
  *(void *)a2 = result;
  *(void *)(a2 + 8) = v5;
  *(unsigned char *)(a2 + 16) = v6 & 1;
  *(void *)(a2 + 24) = v7;
  return result;
}

uint64_t sub_1883100EC()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in TableColumn<>.init<A>(_:value:comparator:)@<X0>(id *a1@<X0>, uint64_t a2@<X8>)
{
  return closure #1 in TableColumn<>.init<A>(_:value:comparator:)(a1, a2);
}

void AXSwiftUIInteractionLocationDescriptorDefaultName_cold_1()
{
  dlerror();
  uint64_t v0 = abort_report_np();
  __getBGTaskSchedulerClass_block_invoke_cold_1(v0);
}

void __getBGTaskSchedulerClass_block_invoke_cold_1()
{
  uint64_t v0 = abort_report_np();
  __getLPLinkMetadataClass_block_invoke_cold_1(v0);
}

void __getLPLinkMetadataClass_block_invoke_cold_1()
{
}

uint64_t type metadata accessor for Quadrature.Integrator()
{
  return MEMORY[0x1F4182DE0]();
}

uint64_t Quadrature.init(integrator:absoluteTolerance:relativeTolerance:)()
{
  return MEMORY[0x1F4182DE8]();
}

uint64_t type metadata accessor for Quadrature.Error()
{
  return MEMORY[0x1F4182DF0]();
}

uint64_t Quadrature.integrate(over:integrand:)()
{
  return MEMORY[0x1F4182DF8]();
}

uint64_t type metadata accessor for Quadrature()
{
  return MEMORY[0x1F4182E00]();
}

uint64_t CocoaError._nsError.getter()
{
  return MEMORY[0x1F40E2D28]();
}

uint64_t static CocoaError.Code.fileReadUnknown.getter()
{
  return MEMORY[0x1F40E2D90]();
}

uint64_t type metadata accessor for CocoaError.Code()
{
  return MEMORY[0x1F40E2DF0]();
}

uint64_t type metadata accessor for CocoaError()
{
  return MEMORY[0x1F40E2E08]();
}

uint64_t NSNotFound.getter()
{
  return MEMORY[0x1F40E2E10]();
}

uint64_t dispatch thunk of FormatStyle.format(_:)()
{
  return MEMORY[0x1F40E2F68]();
}

uint64_t static FormatStyle.measurement<A>(width:usage:numberFormatStyle:)()
{
  return MEMORY[0x1F40E2FA0]();
}

uint64_t static FormatStyle<>.time(pattern:)()
{
  return MEMORY[0x1F40E2FD8]();
}

uint64_t static FormatStyle<>.units(allowed:width:maximumUnitCount:zeroValueUnits:valueLength:fractionalPart:)()
{
  return MEMORY[0x1F40E2FE0]();
}

uint64_t dispatch thunk of JSONDecoder.decode<A>(_:from:)()
{
  return MEMORY[0x1F40E3038]();
}

uint64_t dispatch thunk of JSONDecoder.userInfo.setter()
{
  return MEMORY[0x1F40E3050]();
}

uint64_t JSONDecoder.init()()
{
  return MEMORY[0x1F40E3060]();
}

uint64_t type metadata accessor for JSONDecoder()
{
  return MEMORY[0x1F40E3070]();
}

uint64_t dispatch thunk of JSONEncoder.encode<A>(_:)()
{
  return MEMORY[0x1F40E3128]();
}

uint64_t JSONEncoder.init()()
{
  return MEMORY[0x1F40E3150]();
}

uint64_t type metadata accessor for JSONEncoder()
{
  return MEMORY[0x1F40E3160]();
}

uint64_t Measurement.unit.getter()
{
  return MEMORY[0x1F40E31B8]();
}

uint64_t Measurement.init(value:unit:)()
{
  return MEMORY[0x1F40E31C8]();
}

uint64_t Measurement.value.getter()
{
  return MEMORY[0x1F40E31D0]();
}

uint64_t Measurement.value.setter()
{
  return MEMORY[0x1F40E31E0]();
}

uint64_t Measurement<>.FormatStyle.format(_:)()
{
  return MEMORY[0x1F40E3200]();
}

uint64_t static Measurement<>.FormatStyle.UnitWidth.wide.getter()
{
  return MEMORY[0x1F40E3220]();
}

uint64_t type metadata accessor for Measurement<>.FormatStyle.UnitWidth()
{
  return MEMORY[0x1F40E3230]();
}

uint64_t type metadata accessor for Measurement<>.FormatStyle()
{
  return MEMORY[0x1F40E3238]();
}

uint64_t Measurement<>.converted(to:)()
{
  return MEMORY[0x1F40E3250]();
}

uint64_t type metadata accessor for Measurement()
{
  return MEMORY[0x1F40E3280]();
}

uint64_t CharacterSet.init(charactersIn:)()
{
  return MEMORY[0x1F40E32B0]();
}

uint64_t CharacterSet.intersection(_:)()
{
  return MEMORY[0x1F40E32C0]();
}

uint64_t static CharacterSet.lowercaseLetters.getter()
{
  return MEMORY[0x1F40E3310]();
}

uint64_t static CharacterSet.uppercaseLetters.getter()
{
  return MEMORY[0x1F40E3318]();
}

uint64_t static CharacterSet.whitespacesAndNewlines.getter()
{
  return MEMORY[0x1F40E3368]();
}

uint64_t type metadata accessor for CharacterSet()
{
  return MEMORY[0x1F40E3420]();
}

NSDateInterval __swiftcall DateInterval._bridgeToObjectiveC()()
{
  return (NSDateInterval)MEMORY[0x1F40E34A0]();
}

uint64_t static DateInterval._unconditionallyBridgeFromObjectiveC(_:)()
{
  return MEMORY[0x1F40E34C0]();
}

uint64_t DateInterval.end.setter()
{
  return MEMORY[0x1F40E34D8]();
}

uint64_t DateInterval.start.getter()
{
  return MEMORY[0x1F40E34F8]();
}

uint64_t DateInterval.start.setter()
{
  return MEMORY[0x1F40E3500]();
}

uint64_t DateInterval.duration.getter()
{
  return MEMORY[0x1F40E3518]();
}

uint64_t type metadata accessor for DateInterval()
{
  return MEMORY[0x1F40E3530]();
}

uint64_t static Notification._unconditionallyBridgeFromObjectiveC(_:)()
{
  return MEMORY[0x1F40E3550]();
}

uint64_t Notification.object.getter()
{
  return MEMORY[0x1F40E3578]();
}

uint64_t Notification.userInfo.getter()
{
  return MEMORY[0x1F40E3590]();
}

uint64_t type metadata accessor for Notification()
{
  return MEMORY[0x1F40E35A8]();
}

uint64_t dispatch thunk of ParseStrategy.parse(_:)()
{
  return MEMORY[0x1F40E3630]();
}

uint64_t static DateComponents._unconditionallyBridgeFromObjectiveC(_:)()
{
  return MEMORY[0x1F40E38E8]();
}

uint64_t DateComponents.init(calendar:timeZone:era:year:month:day:hour:minute:second:nanosecond:weekday:weekdayOrdinal:quarter:weekOfMonth:weekOfYear:yearForWeekOfYear:)()
{
  return MEMORY[0x1F40E3A10]();
}

uint64_t type metadata accessor for DateComponents()
{
  return MEMORY[0x1F40E3A58]();
}

uint64_t dispatch thunk of LocalizedError.errorDescription.getter()
{
  return MEMORY[0x1F40E3A78]();
}

uint64_t dispatch thunk of SortComparator.order.getter()
{
  return MEMORY[0x1F40E3AC8]();
}

uint64_t dispatch thunk of SortComparator.order.setter()
{
  return MEMORY[0x1F40E3AD0]();
}

uint64_t dispatch thunk of SortComparator.compare(_:_:)()
{
  return MEMORY[0x1F40E3AD8]();
}

uint64_t type metadata accessor for SortDescriptor()
{
  return MEMORY[0x1F40E3AE0]();
}

uint64_t SortDescriptor.init<A>(_:comparing:)()
{
  return MEMORY[0x1F40E3AF0]();
}

uint64_t AttributeScopes.FoundationAttributes.inlinePresentationIntent.getter()
{
  return MEMORY[0x1F40E3B40]();
}

uint64_t AttributeScopes.intelligence.getter()
{
  return MEMORY[0x1F41650A0]();
}

uint64_t AttributeScopes.UIKitAttributes.attachment.getter()
{
  return MEMORY[0x1F4165668]();
}

uint64_t AttributeScopes.UIKitAttributes.baselineOffset.getter()
{
  return MEMORY[0x1F4165670]();
}

uint64_t AttributeScopes.UIKitAttributes.underlineColor.getter()
{
  return MEMORY[0x1F4165680]();
}

uint64_t AttributeScopes.UIKitAttributes.underlineStyle.getter()
{
  return MEMORY[0x1F4165688]();
}

uint64_t AttributeScopes.UIKitAttributes.backgroundColor.getter()
{
  return MEMORY[0x1F4165690]();
}

uint64_t AttributeScopes.UIKitAttributes.foregroundColor.getter()
{
  return MEMORY[0x1F4165698]();
}

uint64_t AttributeScopes.UIKitAttributes.adaptiveImageGlyph.getter()
{
  return MEMORY[0x1F41656A0]();
}

uint64_t AttributeScopes.UIKitAttributes.strikethroughColor.getter()
{
  return MEMORY[0x1F41656A8]();
}

uint64_t AttributeScopes.UIKitAttributes.strikethroughStyle.getter()
{
  return MEMORY[0x1F41656B0]();
}

uint64_t AttributeScopes.UIKitAttributes.font.getter()
{
  return MEMORY[0x1F41656C0]();
}

uint64_t AttributeScopes.UIKitAttributes.kern.getter()
{
  return MEMORY[0x1F41656C8]();
}

uint64_t AttributeScopes.UIKitAttributes.tracking.getter()
{
  return MEMORY[0x1F41656D0]();
}

uint64_t type metadata accessor for AttributeScopes.UIKitAttributes()
{
  return MEMORY[0x1F41656D8]();
}

uint64_t AttributeScopes.uiKit.getter()
{
  return MEMORY[0x1F41656E0]();
}

uint64_t AttributeScopes.swiftUI.getter()
{
  return MEMORY[0x1F40FCF38]();
}

uint64_t type metadata accessor for AttributeScopes.SwiftUIAttributes()
{
  return MEMORY[0x1F40FCF40]();
}

uint64_t AttributedString.characters.modify()
{
  return MEMORY[0x1F40E3BB0]();
}

uint64_t AttributedString.characters.getter()
{
  return MEMORY[0x1F40E3BC0]();
}

uint64_t AttributedString.startIndex.getter()
{
  return MEMORY[0x1F40E3BC8]();
}

uint64_t AttributedString.CharacterView.replaceSubrange<A>(_:with:)()
{
  return MEMORY[0x1F40E3BD8]();
}

uint64_t AttributedString.CharacterView._count.getter()
{
  return MEMORY[0x1F40E3BE0]();
}

uint64_t type metadata accessor for AttributedString.CharacterView()
{
  return MEMORY[0x1F40E3BF0]();
}

uint64_t AttributedString.CharacterView.subscript.getter()
{
  return MEMORY[0x1F40E3C00]();
}

uint64_t AttributedString.subscript.setter()
{
  return MEMORY[0x1F40E3C10]();
}

uint64_t AttributedString.init(stringLiteral:)()
{
  return MEMORY[0x1F40E3C38]();
}

uint64_t AttributedString.replaceSubrange<A, B>(_:with:)()
{
  return MEMORY[0x1F40E3C60]();
}

uint64_t type metadata accessor for AttributedString.AttributeMergePolicy()
{
  return MEMORY[0x1F40E3CB0]();
}

uint64_t static AttributedString.== infix(_:_:)()
{
  return MEMORY[0x1F40E3D30]();
}

uint64_t static AttributedString.+= infix(_:_:)()
{
  return MEMORY[0x1F40E3D38]();
}

uint64_t AttributedString.Runs.AttributesSlice1.makeIterator()()
{
  return MEMORY[0x1F40E3D40]();
}

uint64_t AttributedString.Runs.AttributesSlice1.Iterator.next()()
{
  return MEMORY[0x1F40E3D58]();
}

uint64_t AttributedString.Runs.Run.attributes.getter()
{
  return MEMORY[0x1F40E3D70]();
}

uint64_t AttributedString.Runs.Run.subscript.getter()
{
  return MEMORY[0x1F40E3D80]();
}

uint64_t AttributedString.Runs.Run.range.getter()
{
  return MEMORY[0x1F40E3D90]();
}

uint64_t type metadata accessor for AttributedString.Runs.Run()
{
  return MEMORY[0x1F40E3DA8]();
}

uint64_t type metadata accessor for AttributedString.Runs.Index()
{
  return MEMORY[0x1F40E3DC0]();
}

uint64_t type metadata accessor for AttributedString.Runs()
{
  return MEMORY[0x1F40E3DC8]();
}

uint64_t AttributedString.Runs.subscript.getter()
{
  return MEMORY[0x1F40E3DE0]();
}

{
  return MEMORY[0x1F40E3DE8]();
}

{
  return MEMORY[0x1F40E3DF0]();
}

uint64_t AttributedString.runs.getter()
{
  return MEMORY[0x1F40E3DF8]();
}

uint64_t type metadata accessor for AttributedString.Index()
{
  return MEMORY[0x1F40E3E08]();
}

uint64_t AttributedString.Index.init<A>(_:within:)()
{
  return MEMORY[0x1F40E3E18]();
}

uint64_t AttributedString.append<A>(_:)()
{
  return MEMORY[0x1F40E3E20]();
}

uint64_t AttributedString.insert<A>(_:at:)()
{
  return MEMORY[0x1F40E3E30]();
}

uint64_t AttributedString.isEmpty.getter()
{
  return MEMORY[0x1F40FCF48]();
}

uint64_t AttributedString.AdaptiveImageGlyph.init(_:)()
{
  return MEMORY[0x1F41656E8]();
}

uint64_t type metadata accessor for AttributedString.AdaptiveImageGlyph()
{
  return MEMORY[0x1F40DF258]();
}

uint64_t AttributedString.endIndex.getter()
{
  return MEMORY[0x1F40E3E38]();
}

uint64_t AttributedString.init()()
{
  return MEMORY[0x1F40E3E98]();
}

uint64_t type metadata accessor for AttributedString()
{
  return MEMORY[0x1F40E3EA0]();
}

uint64_t AttributedString.init(_:attributes:)()
{
  return MEMORY[0x1F40E3EB0]();
}

uint64_t AttributedString.init<A>(_:attributes:)()
{
  return MEMORY[0x1F40E3EC8]();
}

uint64_t AttributedString.init<A>(_:including:)()
{
  return MEMORY[0x1F40E3ED0]();
}

{
  return MEMORY[0x1F40E3ED8]();
}

uint64_t AttributedString.init<A, B>(_:including:)()
{
  return MEMORY[0x1F40E3EE0]();
}

uint64_t AttributedString.subscript.modify()
{
  return MEMORY[0x1F40E3EF8]();
}

uint64_t AttributedString.subscript.getter()
{
  return MEMORY[0x1F40E3F00]();
}

uint64_t AttributedString.init(_:)()
{
  return MEMORY[0x1F40E3F10]();
}

{
  return MEMORY[0x1F40E3F18]();
}

uint64_t type metadata accessor for KeyPathComparator()
{
  return MEMORY[0x1F40E3F30]();
}

uint64_t KeyPathComparator.init<A, B>(_:comparator:)()
{
  return MEMORY[0x1F40E3F38]();
}

uint64_t KeyPathComparator.init<A>(_:order:)()
{
  return MEMORY[0x1F40E3F40]();
}

Swift::String __swiftcall NSLocalizedString(_:tableName:bundle:value:comment:)(Swift::String _, Swift::String_optional tableName, NSBundle bundle, Swift::String value, Swift::String comment)
{
  uint64_t v5 = MEMORY[0x1F40E3F58](_._countAndFlagsBits, _._object, tableName.value._countAndFlagsBits, tableName.value._object, bundle.super.isa, value._countAndFlagsBits, value._object, comment._countAndFlagsBits);
  result._object = v6;
  result._uint64_t countAndFlagsBits = v5;
  return result;
}

uint64_t URLResourceValues.contentType.getter()
{
  return MEMORY[0x1F4187828]();
}

uint64_t URLResourceValues.isPackage.setter()
{
  return MEMORY[0x1F40E3FF8]();
}

uint64_t URLResourceValues.init()()
{
  return MEMORY[0x1F40E4000]();
}

uint64_t type metadata accessor for URLResourceValues()
{
  return MEMORY[0x1F40E4008]();
}

uint64_t AttributeContainer.subscript.getter()
{
  return MEMORY[0x1F40E4018]();
}

{
  return MEMORY[0x1F40E4038]();
}

uint64_t AttributeContainer.subscript.setter()
{
  return MEMORY[0x1F40E4028]();
}

uint64_t AttributeContainer.init()()
{
  return MEMORY[0x1F40E4090]();
}

uint64_t type metadata accessor for AttributeContainer()
{
  return MEMORY[0x1F40E40A0]();
}

uint64_t AttributeContainer.init(_:)()
{
  return MEMORY[0x1F40E40C0]();
}

uint64_t IntegerFormatStyle.init(locale:)()
{
  return MEMORY[0x1F40E40C8]();
}

uint64_t type metadata accessor for IntegerFormatStyle()
{
  return MEMORY[0x1F40E40F0]();
}

uint64_t AttributedSubstring.subscript.setter()
{
  return MEMORY[0x1F40E4178]();
}

{
  return MEMORY[0x1F40E41C0]();
}

uint64_t AttributedSubstring.subscript.modify()
{
  return MEMORY[0x1F40E4188]();
}

uint64_t AttributedSubstring.setAttributes(_:)()
{
  return MEMORY[0x1F40E4198]();
}

uint64_t AttributedSubstring.mergeAttributes(_:mergePolicy:)()
{
  return MEMORY[0x1F40E41A0]();
}

uint64_t AttributedSubstring.runs.getter()
{
  return MEMORY[0x1F40E41B0]();
}

uint64_t type metadata accessor for AttributedSubstring()
{
  return MEMORY[0x1F40E41B8]();
}

uint64_t dispatch thunk of PropertyListDecoder.decode<A>(_:from:)()
{
  return MEMORY[0x1F40E41E0]();
}

uint64_t PropertyListDecoder.init()()
{
  return MEMORY[0x1F40E4210]();
}

uint64_t type metadata accessor for PropertyListDecoder()
{
  return MEMORY[0x1F40E4220]();
}

uint64_t dispatch thunk of PropertyListEncoder.outputFormat.setter()
{
  return MEMORY[0x1F40E4228]();
}

uint64_t dispatch thunk of PropertyListEncoder.encode<A>(_:)()
{
  return MEMORY[0x1F40E4240]();
}

uint64_t PropertyListEncoder.init()()
{
  return MEMORY[0x1F40E4260]();
}

uint64_t type metadata accessor for PropertyListEncoder()
{
  return MEMORY[0x1F40E4270]();
}

uint64_t dispatch thunk of ParseableFormatStyle.parseStrategy.getter()
{
  return MEMORY[0x1F40E42A0]();
}

uint64_t _BridgedStoredNSError.init(_:userInfo:)()
{
  return MEMORY[0x1F40E44F8]();
}

uint64_t AttributeDynamicLookup.subscript.getter()
{
  return MEMORY[0x1F40E4518]();
}

{
  return MEMORY[0x1F40FCF50]();
}

uint64_t _convertErrorToNSError(_:)()
{
  return MEMORY[0x1F40E4540]();
}

uint64_t _convertNSErrorToError(_:)()
{
  return MEMORY[0x1F40E4550]();
}

uint64_t FloatingPointFormatStyle.Percent.init(locale:)()
{
  return MEMORY[0x1F40E4640]();
}

uint64_t FloatingPointFormatStyle.Percent.rounded(rule:increment:)()
{
  return MEMORY[0x1F40E4648]();
}

uint64_t ScopedAttributeContainer.subscript.getter()
{
  return MEMORY[0x1F40E4698]();
}

uint64_t ScopedAttributeContainer.subscript.setter()
{
  return MEMORY[0x1F40E46A0]();
}

uint64_t static MeasurementFormatUnitUsage.asProvided.getter()
{
  return MEMORY[0x1F40E46E8]();
}

uint64_t static MeasurementFormatUnitUsage.general.getter()
{
  return MEMORY[0x1F40E46F8]();
}

uint64_t type metadata accessor for MeasurementFormatUnitUsage()
{
  return MEMORY[0x1F40E4738]();
}

uint64_t _KeyValueCodingAndObservingPublishing<>.publisher<A>(for:options:)()
{
  return MEMORY[0x1F40E4868]();
}

uint64_t URL.isFileURL.getter()
{
  return MEMORY[0x1F40E4898]();
}

uint64_t URL.description.getter()
{
  return MEMORY[0x1F40E48B0]();
}

uint64_t URL.pathExtension.getter()
{
  return MEMORY[0x1F40E48E8]();
}

uint64_t URL.absoluteString.getter()
{
  return MEMORY[0x1F40E48F8]();
}

uint64_t URL.resourceValues(forKeys:)()
{
  return MEMORY[0x1F40E4918]();
}

uint64_t URL.lastPathComponent.getter()
{
  return MEMORY[0x1F40E4970]();
}

uint64_t URL.setResourceValues(_:)()
{
  return MEMORY[0x1F40E4978]();
}

void __swiftcall URL._bridgeToObjectiveC()(NSURL *__return_ptr retstr)
{
}

uint64_t URL.appendingPathComponent(_:conformingTo:)()
{
  return MEMORY[0x1F4187838]();
}

uint64_t URL.appendingPathComponent(_:)()
{
  return MEMORY[0x1F40E49E8]();
}

uint64_t static URL.== infix(_:_:)()
{
  return MEMORY[0x1F40E4A50]();
}

Swift::Void __swiftcall URL.stopAccessingSecurityScopedResource()()
{
}

uint64_t static URL._unconditionallyBridgeFromObjectiveC(_:)()
{
  return MEMORY[0x1F40E4A70]();
}

Swift::Bool __swiftcall URL.startAccessingSecurityScopedResource()()
{
  return MEMORY[0x1F40E4A80]();
}

uint64_t URL.path.getter()
{
  return MEMORY[0x1F40E4AC0]();
}

uint64_t URL.swiftUI_contentType.getter()
{
  return MEMORY[0x1F40FCF58]();
}

uint64_t URL.init(urlValue:)()
{
  return MEMORY[0x1F40FCF60]();
}

uint64_t type metadata accessor for URL()
{
  return MEMORY[0x1F40E4B80]();
}

NSData __swiftcall Data._bridgeToObjectiveC()()
{
  return (NSData)MEMORY[0x1F40E4D48]();
}

uint64_t static Data._unconditionallyBridgeFromObjectiveC(_:)()
{
  return MEMORY[0x1F40E4DA8]();
}

uint64_t Date.init(timeIntervalSinceReferenceDate:)()
{
  return MEMORY[0x1F40E4ED0]();
}

uint64_t Date.timeIntervalSinceReferenceDate.getter()
{
  return MEMORY[0x1F40E4EE0]();
}

uint64_t static Date.distantFuture.getter()
{
  return MEMORY[0x1F40E50A8]();
}

uint64_t Date.timeIntervalSince(_:)()
{
  return MEMORY[0x1F40E50E0]();
}

NSDate __swiftcall Date._bridgeToObjectiveC()()
{
  return (NSDate)MEMORY[0x1F40E5188]();
}

uint64_t static Date.> infix(_:_:)()
{
  return MEMORY[0x1F40E5198]();
}

uint64_t Date.init(timeIntervalSinceNow:)()
{
  return MEMORY[0x1F40E51D8]();
}

uint64_t Date.timeIntervalSinceNow.getter()
{
  return MEMORY[0x1F40E51F0]();
}

uint64_t static Date.== infix(_:_:)()
{
  return MEMORY[0x1F40E52C0]();
}

uint64_t static Date.+= infix(_:_:)()
{
  return MEMORY[0x1F40E52D0]();
}

uint64_t static Date._unconditionallyBridgeFromObjectiveC(_:)()
{
  return MEMORY[0x1F40E52E0]();
}

uint64_t static Date.now.getter()
{
  return MEMORY[0x1F40E52F0]();
}

uint64_t Date.init()()
{
  return MEMORY[0x1F40E5378]();
}

uint64_t type metadata accessor for Date()
{
  return MEMORY[0x1F40E5388]();
}

uint64_t UUID.uuidString.getter()
{
  return MEMORY[0x1F40E53B0]();
}

uint64_t static UUID.== infix(_:_:)()
{
  return MEMORY[0x1F40E53E8]();
}

uint64_t UUID.hash(into:)()
{
  return MEMORY[0x1F40E5410]();
}

uint64_t UUID.init()()
{
  return MEMORY[0x1F40E5438]();
}

uint64_t type metadata accessor for UUID()
{
  return MEMORY[0x1F40E5448]();
}

uint64_t Locale.Components.numberingSystem.setter()
{
  return MEMORY[0x1F40E54A0]();
}

uint64_t Locale.Components.init(locale:)()
{
  return MEMORY[0x1F40E54A8]();
}

uint64_t type metadata accessor for Locale.Components()
{
  return MEMORY[0x1F40E54D8]();
}

uint64_t Locale.init(components:)()
{
  return MEMORY[0x1F40E54E8]();
}

uint64_t static Locale.NumberingSystem.== infix(_:_:)()
{
  return MEMORY[0x1F40E55B8]();
}

uint64_t type metadata accessor for Locale.NumberingSystem()
{
  return MEMORY[0x1F40E55C0]();
}

NSLocale __swiftcall Locale._bridgeToObjectiveC()()
{
  return (NSLocale)MEMORY[0x1F40E5648]();
}

uint64_t static Locale.autoupdatingCurrent.getter()
{
  return MEMORY[0x1F40E5658]();
}

uint64_t static Locale.== infix(_:_:)()
{
  return MEMORY[0x1F40E5688]();
}

uint64_t Locale.bcp47LanguageCode.getter()
{
  return MEMORY[0x1F40FCF68]();
}

uint64_t static Locale.current.getter()
{
  return MEMORY[0x1F40E5728]();
}

uint64_t type metadata accessor for Locale.Language()
{
  return MEMORY[0x1F40E5840]();
}

uint64_t type metadata accessor for Locale()
{
  return MEMORY[0x1F40E5890]();
}

uint64_t type metadata accessor for Calendar.MatchingPolicy()
{
  return MEMORY[0x1F40E5938]();
}

uint64_t type metadata accessor for Calendar.SearchDirection()
{
  return MEMORY[0x1F40E59A0]();
}

uint64_t type metadata accessor for Calendar.RepeatedTimePolicy()
{
  return MEMORY[0x1F40E59D0]();
}

NSCalendar __swiftcall Calendar._bridgeToObjectiveC()()
{
  return (NSCalendar)MEMORY[0x1F40E59E0]();
}

uint64_t static Calendar.== infix(_:_:)()
{
  return MEMORY[0x1F40E5A08]();
}

uint64_t static Calendar.current.getter()
{
  return MEMORY[0x1F40E5AB8]();
}

uint64_t Calendar.nextDate(after:matching:matchingPolicy:repeatedTimePolicy:direction:)()
{
  return MEMORY[0x1F40E5AC0]();
}

uint64_t type metadata accessor for Calendar.Component()
{
  return MEMORY[0x1F40E5AF0]();
}

uint64_t Calendar.component(_:from:)()
{
  return MEMORY[0x1F40E5B00]();
}

uint64_t type metadata accessor for Calendar()
{
  return MEMORY[0x1F40E5B18]();
}

uint64_t type metadata accessor for IndexSet.Index()
{
  return MEMORY[0x1F40E5B48]();
}

uint64_t IndexSet.makeIterator()()
{
  return MEMORY[0x1F40E5B70]();
}

Swift::Int_optional __swiftcall IndexSet.integerLessThan(_:)(Swift::Int a1)
{
  Swift::Int v1 = MEMORY[0x1F40E5B80](a1);
  result.value = v1;
  result.is_nil = v2;
  return result;
}

void __swiftcall IndexSet._bridgeToObjectiveC()(NSIndexSet *__return_ptr retstr)
{
}

uint64_t static IndexSet._unconditionallyBridgeFromObjectiveC(_:)()
{
  return MEMORY[0x1F40E5BC0]();
}

Swift::tuple_inserted_Bool_memberAfterInsert_Int __swiftcall IndexSet.insert(_:)(Swift::Int a1)
{
  char v1 = MEMORY[0x1F40E5C08](a1);
  result.memberAfterInsert = v2;
  result.inserted = v1;
  return result;
}

uint64_t IndexSet.init(integer:)()
{
  return MEMORY[0x1F40E5C38]();
}

uint64_t IndexSet.isEmpty.getter()
{
  return MEMORY[0x1F40E5C40]();
}

Swift::Void __swiftcall IndexSet.removeAll()()
{
}

uint64_t IndexSet.init()()
{
  return MEMORY[0x1F40E5C98]();
}

uint64_t type metadata accessor for IndexSet()
{
  return MEMORY[0x1F40E5CA8]();
}

NSTimeZone __swiftcall TimeZone._bridgeToObjectiveC()()
{
  return (NSTimeZone)MEMORY[0x1F40E5D28]();
}

uint64_t static TimeZone.== infix(_:_:)()
{
  return MEMORY[0x1F40E5D48]();
}

uint64_t type metadata accessor for TimeZone()
{
  return MEMORY[0x1F40E5D70]();
}

NSIndexPath __swiftcall IndexPath._bridgeToObjectiveC()()
{
  return (NSIndexPath)MEMORY[0x1F40E5E68]();
}

uint64_t static IndexPath._unconditionallyBridgeFromObjectiveC(_:)()
{
  return MEMORY[0x1F40E5EA0]();
}

uint64_t IndexPath.init(row:section:)()
{
  return MEMORY[0x1F4165708]();
}

uint64_t IndexPath.row.getter()
{
  return MEMORY[0x1F4165718]();
}

uint64_t IndexPath.init(item:section:)()
{
  return MEMORY[0x1F4165730]();
}

uint64_t IndexPath.item.getter()
{
  return MEMORY[0x1F4165748]();
}

uint64_t IndexPath.section.getter()
{
  return MEMORY[0x1F4165760]();
}

uint64_t IndexPath.count.getter()
{
  return MEMORY[0x1F40E5EA8]();
}

uint64_t IndexPath.init(index:)()
{
  return MEMORY[0x1F40E5EB0]();
}

uint64_t IndexPath.dropLast()()
{
  return MEMORY[0x1F40E5ED0]();
}

uint64_t IndexPath.appending(_:)()
{
  return MEMORY[0x1F40E5EE0]();
}

uint64_t type metadata accessor for IndexPath()
{
  return MEMORY[0x1F40E5EF0]();
}

uint64_t type metadata accessor for Predicate()
{
  return MEMORY[0x1F40E5F28]();
}

uint64_t static Selector.== infix(_:_:)()
{
  return MEMORY[0x1F4187480]();
}

uint64_t Selector.hash(into:)()
{
  return MEMORY[0x1F4187490]();
}

uint64_t Selector.init(_:)()
{
  return MEMORY[0x1F4187498]();
}

uint64_t static ObservationTracking._installTracking(_:willSet:didSet:)()
{
  return MEMORY[0x1F4187500]();
}

Swift::Void __swiftcall ObservationTracking.cancel()()
{
}

uint64_t type metadata accessor for ObservationTracking()
{
  return MEMORY[0x1F4187520]();
}

uint64_t ObservationTracking.init(_:)()
{
  return MEMORY[0x1F4187528]();
}

uint64_t ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)()
{
  return MEMORY[0x1F4187538]();
}

uint64_t ObservationRegistrar.access<A, B>(_:keyPath:)()
{
  return MEMORY[0x1F4187540]();
}

uint64_t ObservationRegistrar.init()()
{
  return MEMORY[0x1F4187578]();
}

uint64_t type metadata accessor for ObservationRegistrar()
{
  return MEMORY[0x1F4187588]();
}

NSNumber __swiftcall CGFloat._bridgeToObjectiveC()()
{
  return (NSNumber)MEMORY[0x1F40E5F50]();
}

uint64_t AccessibilityNotification.Announcement.init(_:)()
{
  return MEMORY[0x1F40D3148]();
}

uint64_t static WeakAttribute.== infix(_:_:)()
{
  return MEMORY[0x1F410B020]();
}

Swift::Bool __swiftcall WeakAttribute.allowsAsyncUpdate()()
{
  return MEMORY[0x1F40FCF70]();
}

uint64_t type metadata accessor for WeakAttribute()
{
  return MEMORY[0x1F410B028]();
}

uint64_t type metadata accessor for OptionalAttribute()
{
  return MEMORY[0x1F410B030]();
}

uint64_t Attribute.description.getter()
{
  return MEMORY[0x1F410B038]();
}

uint64_t Attribute.init<A>(body:value:flags:update:)()
{
  return MEMORY[0x1F410B040]();
}

uint64_t Attribute<A>.animated(inputs:)()
{
  return MEMORY[0x1F40FCF78]();
}

uint64_t Attribute<A>.size()()
{
  return MEMORY[0x1F40FCF80]();
}

uint64_t Attribute<A>.origin()()
{
  return MEMORY[0x1F40FCF88]();
}

uint64_t Attribute<A>.cgSize.getter()
{
  return MEMORY[0x1F40FCF90]();
}

uint64_t Attribute.makeReusable(indirectMap:)()
{
  return MEMORY[0x1F40FCFA0]();
}

uint64_t Attribute.syncMainIfReferences<A>(do:)()
{
  return MEMORY[0x1F40FCFA8]();
}

uint64_t type metadata accessor for Attribute()
{
  return MEMORY[0x1F410B048]();
}

uint64_t dispatch thunk of StatefulRule.updateValue()()
{
  return MEMORY[0x1F410B050]();
}

uint64_t StatefulRule<>.updateIfNotEqual<A>(to:)()
{
  return MEMORY[0x1F40FCFB0]();
}

uint64_t StatefulRule<>.update<A>(to:)()
{
  return MEMORY[0x1F40FCFB8]();
}

uint64_t StatefulRule.withObservation<A>(do:)()
{
  return MEMORY[0x1F40FCFC0]();
}

uint64_t type metadata accessor for PointerOffset()
{
  return MEMORY[0x1F410B058]();
}

uint64_t type metadata accessor for Map()
{
  return MEMORY[0x1F410B060]();
}

uint64_t dispatch thunk of Rule.value.getter()
{
  return MEMORY[0x1F410B068]();
}

uint64_t Rule.withObservation<A>(do:)()
{
  return MEMORY[0x1F40FCFC8]();
}

uint64_t type metadata accessor for Focus()
{
  return MEMORY[0x1F410B070]();
}

uint64_t type metadata accessor for External()
{
  return MEMORY[0x1F410B080]();
}

uint64_t dispatch thunk of static Transferable.transferRepresentation.getter()
{
  return MEMORY[0x1F40DFA00]();
}

uint64_t static Transferable.readableContentTypes.getter()
{
  return MEMORY[0x1F40DFA08]();
}

uint64_t static Transferable.writableContentTypes.getter()
{
  return MEMORY[0x1F40DFA10]();
}

uint64_t type metadata accessor for TransferableError()
{
  return MEMORY[0x1F40DFA28]();
}

uint64_t DataRepresentation.init(contentType:exporting:importing:)()
{
  return MEMORY[0x1F40DFA30]();
}

uint64_t DataRepresentation.init(exportedContentType:exporting:)()
{
  return MEMORY[0x1F40DFA38]();
}

uint64_t type metadata accessor for DataRepresentation()
{
  return MEMORY[0x1F40DFA40]();
}

uint64_t dispatch thunk of static TransferRepresentation._decomposedTransferRepresentation(_:inputs:)()
{
  return MEMORY[0x1F40DFA88]();
}

uint64_t type metadata accessor for TupleTransferRepresentation()
{
  return MEMORY[0x1F40DFAA8]();
}

uint64_t TupleTransferRepresentation.init(_:)()
{
  return MEMORY[0x1F40DFAB0]();
}

uint64_t type metadata accessor for _TransferRepresentationValue()
{
  return MEMORY[0x1F40DFAB8]();
}

uint64_t _TransferRepresentationValue.init(_:)()
{
  return MEMORY[0x1F40DFAC0]();
}

uint64_t _TransferRepresentationInputs.init()()
{
  return MEMORY[0x1F40DFAD0]();
}

uint64_t type metadata accessor for _TransferRepresentationInputs()
{
  return MEMORY[0x1F40DFAD8]();
}

uint64_t ResolvedTransferRepresentation.contentType.getter()
{
  return MEMORY[0x1F40DFAE0]();
}

uint64_t ResolvedTransferRepresentation.suggestedFileName.getter()
{
  return MEMORY[0x1F40DFAE8]();
}

uint64_t type metadata accessor for ResolvedTransferRepresentation()
{
  return MEMORY[0x1F40DFB08]();
}

uint64_t _TransferRepresentationOutputs.storage.getter()
{
  return MEMORY[0x1F40DFB10]();
}

uint64_t type metadata accessor for _TransferRepresentationOutputs()
{
  return MEMORY[0x1F40DFB18]();
}

uint64_t _HashTable.UnsafeHandle._startIterator(bucket:)()
{
  return MEMORY[0x1F41126B0]();
}

uint64_t _HashTable.UnsafeHandle.firstOccupiedBucketInChain(with:)()
{
  return MEMORY[0x1F41126B8]();
}

uint64_t _HashTable.UnsafeHandle.subscript.setter()
{
  return MEMORY[0x1F41126C0]();
}

uint64_t _HashTable.BucketIterator.currentValue.getter()
{
  return MEMORY[0x1F41126E8]();
}

uint64_t _HashTable.BucketIterator.currentValue.setter()
{
  return MEMORY[0x1F41126F0]();
}

Swift::Void __swiftcall _HashTable.BucketIterator.advance()()
{
}

uint64_t static _HashTable.maximumCapacity(forScale:)()
{
  return MEMORY[0x1F4112708]();
}

uint64_t static _HashTable.minimumCapacity(forScale:)()
{
  return MEMORY[0x1F4112710]();
}

uint64_t _HashTable.copy()()
{
  return MEMORY[0x1F4112720]();
}

uint64_t static _HashTable.scale(forCapacity:)()
{
  return MEMORY[0x1F4112728]();
}

uint64_t _HashTable.init(scale:reservedScale:)()
{
  return MEMORY[0x1F4112730]();
}

uint64_t PreviewTrait.init(_:)()
{
  return MEMORY[0x1F40E05C8]();
}

uint64_t type metadata accessor for ImageResource()
{
  return MEMORY[0x1F40E05E8]();
}

uint64_t type metadata accessor for PreviewArguments()
{
  return MEMORY[0x1F40E0620]();
}

uint64_t DefaultPreviewSource.init(contentDomain:contentCategory:supportsOnDevicePreviews:supportsInteractivePreviews:body:)()
{
  return MEMORY[0x1F40E0630]();
}

uint64_t DefaultPreviewSource.init<A>(contentDomain:contentCategory:supportsOnDevicePreviews:supportsInteractivePreviews:arguments:body:)()
{
  return MEMORY[0x1F40E0638]();
}

uint64_t type metadata accessor for DefaultPreviewSource()
{
  return MEMORY[0x1F40E0640]();
}

uint64_t static PreviewArgumentsBuilder.buildBlock(_:)()
{
  return MEMORY[0x1F40E0648]();
}

uint64_t static PreviewArgumentsBuilder.buildExpression<A>(_:)()
{
  return MEMORY[0x1F40E0650]();
}

uint64_t static PreviewArgumentsBuilder.buildFinalResult(_:)()
{
  return MEMORY[0x1F40E0658]();
}

uint64_t type metadata accessor for PreviewArgumentsBuilder.Component()
{
  return MEMORY[0x1F40E0660]();
}

uint64_t type metadata accessor for PreviewSourceContentDomain()
{
  return MEMORY[0x1F40E0668]();
}

uint64_t PreviewSourceContentCategory.init(stringLiteral:)()
{
  return MEMORY[0x1F40E0670]();
}

uint64_t type metadata accessor for PreviewSourceContentCategory()
{
  return MEMORY[0x1F40E0678]();
}

uint64_t type metadata accessor for Preview.ViewTraits()
{
  return MEMORY[0x1F40E0680]();
}

uint64_t Preview.init<A, B>(displayName:source:traits:)()
{
  return MEMORY[0x1F40E0688]();
}

uint64_t UIIntelligenceElementCollector.createRemoteContext(description:)()
{
  return MEMORY[0x1F41650D0]();
}

uint64_t UIIntelligenceElementCollector.collect(_:)()
{
  return MEMORY[0x1F41650D8]();
}

uint64_t UIIntelligenceCollectionRemoteContextWrapper.init(remoteContext:)()
{
  return MEMORY[0x1F4165110]();
}

uint64_t type metadata accessor for UIIntelligenceCollectionRemoteContextWrapper()
{
  return MEMORY[0x1F4165118]();
}

uint64_t type metadata accessor for IntelligenceImage()
{
  return MEMORY[0x1F4165168]();
}

uint64_t IntelligenceElement.init(boundingBox:content:subelements:)()
{
  return MEMORY[0x1F4165238]();
}

uint64_t IntelligenceElement.boundingBox.getter()
{
  return MEMORY[0x1F4165240]();
}

uint64_t IntelligenceElement.boundingBox.setter()
{
  return MEMORY[0x1F4165248]();
}

uint64_t IntelligenceElement.subelements.modify()
{
  return MEMORY[0x1F4165250]();
}

uint64_t IntelligenceElement.subelements.getter()
{
  return MEMORY[0x1F4165258]();
}

uint64_t IntelligenceElement.userActivity.getter()
{
  return MEMORY[0x1F4165270]();
}

uint64_t IntelligenceElement.userActivity.setter()
{
  return MEMORY[0x1F4165278]();
}

uint64_t IntelligenceElement.appIntentsPayload.getter()
{
  return MEMORY[0x1F4165288]();
}

uint64_t IntelligenceElement.appIntentsPayload.setter()
{
  return MEMORY[0x1F4165290]();
}

uint64_t IntelligenceElement.accessibilityLabel.getter()
{
  return MEMORY[0x1F4165298]();
}

uint64_t IntelligenceElement.accessibilityLabel.setter()
{
  return MEMORY[0x1F41652A0]();
}

uint64_t IntelligenceElement.appEntityIdentifier.getter()
{
  return MEMORY[0x1F41652A8]();
}

uint64_t IntelligenceElement.appEntityIdentifier.setter()
{
  return MEMORY[0x1F41652B0]();
}

uint64_t IntelligenceElement.appIntentIdentifier.getter()
{
  return MEMORY[0x1F41652B8]();
}

uint64_t IntelligenceElement.appIntentIdentifier.setter()
{
  return MEMORY[0x1F41652C0]();
}

uint64_t IntelligenceElement.appIntentsPayloadDebugDescription.getter()
{
  return MEMORY[0x1F41652D0]();
}

uint64_t IntelligenceElement.appIntentsPayloadDebugDescription.setter()
{
  return MEMORY[0x1F41652D8]();
}

uint64_t IntelligenceElement.Text.init(attributedText:editable:textOptions:)()
{
  return MEMORY[0x1F41652E0]();
}

uint64_t type metadata accessor for IntelligenceElement.Text.Attributes.FontSizeAttribute()
{
  return MEMORY[0x1F41652E8]();
}

uint64_t IntelligenceElement.Text.Attributes.intelligenceFontSize.getter()
{
  return MEMORY[0x1F41652F0]();
}

uint64_t type metadata accessor for IntelligenceElement.Text.Attributes()
{
  return MEMORY[0x1F4165300]();
}

uint64_t type metadata accessor for IntelligenceElement.Text.Editable()
{
  return MEMORY[0x1F4165310]();
}

uint64_t IntelligenceElement.Image.init(name:textDescription:image:)()
{
  return MEMORY[0x1F4165330]();
}

uint64_t IntelligenceElement.pruned()()
{
  return MEMORY[0x1F4165390]();
}

uint64_t type metadata accessor for IntelligenceElement.Content()
{
  return MEMORY[0x1F4165398]();
}

uint64_t type metadata accessor for IntelligenceElement()
{
  return MEMORY[0x1F41653F0]();
}

uint64_t type metadata accessor for IntelligenceFragment.RemoteContext()
{
  return MEMORY[0x1F41653F8]();
}

uint64_t IntelligenceUserActivity.init(userActivity:)()
{
  return MEMORY[0x1F4165408]();
}

uint64_t type metadata accessor for IntelligenceUserActivity()
{
  return MEMORY[0x1F4165410]();
}

uint64_t dispatch thunk of IntelligenceCollectionContext.createRemoteContext(description:)()
{
  return MEMORY[0x1F41654A0]();
}

uint64_t dispatch thunk of IntelligenceCollectionContext.request.getter()
{
  return MEMORY[0x1F41654A8]();
}

uint64_t type metadata accessor for IntelligenceCollectionRequest.UserActivityCollectionOption()
{
  return MEMORY[0x1F41654B8]();
}

uint64_t type metadata accessor for IntelligenceCollectionRequest.TextOptions()
{
  return MEMORY[0x1F41654D0]();
}

uint64_t IntelligenceCollectionRequest.userActivities.getter()
{
  return MEMORY[0x1F4165520]();
}

uint64_t IntelligenceCollectionRequest.includeElements.getter()
{
  return MEMORY[0x1F4165538]();
}

uint64_t IntelligenceCollectionRequest.includeAppIntents.getter()
{
  return MEMORY[0x1F4165550]();
}

uint64_t IntelligenceCollectionRequest.includeAppEntities.getter()
{
  return MEMORY[0x1F4165558]();
}

uint64_t IntelligenceCollectionRequest.includeAppIntentsPayloads.getter()
{
  return MEMORY[0x1F4165580]();
}

uint64_t IntelligenceCollectionRequest.includeVisibleElementsOnly.getter()
{
  return MEMORY[0x1F4165588]();
}

uint64_t IntelligenceCollectionRequest.includeAccessibilityProperties.getter()
{
  return MEMORY[0x1F4165590]();
}

uint64_t IntelligenceCollectionRequest.includeAppIntentsPayloadDebugDescription.getter()
{
  return MEMORY[0x1F41655A0]();
}

uint64_t type metadata accessor for IntelligenceCollectionRequest()
{
  return MEMORY[0x1F41655B0]();
}

uint64_t IntelligenceFragmentCollector.collect(_:)()
{
  return MEMORY[0x1F41655B8]();
}

uint64_t IntelligenceFragmentCollector.context.getter()
{
  return MEMORY[0x1F41655C8]();
}

uint64_t dispatch thunk of IntelligenceSubelementProviding.intelligenceSubelements(in:bounds:)()
{
  return MEMORY[0x1F41655F0]();
}

uint64_t IntelligenceCollectionCoordinator.finishCollection(_:)()
{
  return MEMORY[0x1F41655F8]();
}

uint64_t IntelligenceCollectionCoordinator.createCollector(remoteContextWrapper:)()
{
  return MEMORY[0x1F4165600]();
}

uint64_t static IntelligenceCollectionCoordinator.shared.getter()
{
  return MEMORY[0x1F4165608]();
}

uint64_t type metadata accessor for IntelligenceCollectionCoordinator()
{
  return MEMORY[0x1F4165610]();
}

uint64_t dispatch thunk of IntelligenceAppIntentsPayloadProviding.intelligenceAppIntentsPayload()()
{
  return MEMORY[0x1F4165650]();
}

uint64_t dispatch thunk of IntelligenceAppIntentsPayloadProviding.intelligenceAppIntentsPayloadDebugDescription()()
{
  return MEMORY[0x1F4165658]();
}

uint64_t UTType.identifier.getter()
{
  return MEMORY[0x1F4187858]();
}

uint64_t UTType.init(_identifier:allowUndeclared:)()
{
  return MEMORY[0x1F4187878]();
}

uint64_t UTType.init(filenameExtension:conformingTo:)()
{
  return MEMORY[0x1F41878B0]();
}

UTType __swiftcall UTType._bridgeToObjectiveC()()
{
  return (UTType)MEMORY[0x1F41878C8]();
}

uint64_t UTType.localizedDescription.getter()
{
  return MEMORY[0x1F41878D0]();
}

uint64_t static UTType.== infix(_:_:)()
{
  return MEMORY[0x1F41878E8]();
}

uint64_t static UTType.png.getter()
{
  return MEMORY[0x1F4187918]();
}

uint64_t static UTType.data.getter()
{
  return MEMORY[0x1F4187938]();
}

uint64_t static UTType.item.getter()
{
  return MEMORY[0x1F4187960]();
}

uint64_t static UTType.jpeg.getter()
{
  return MEMORY[0x1F4187970]();
}

uint64_t static UTType.package.getter()
{
  return MEMORY[0x1F41879D8]();
}

uint64_t UTType.conforms(to:)()
{
  return MEMORY[0x1F41879E0]();
}

uint64_t UTType.isDynamic.getter()
{
  return MEMORY[0x1F41879F8]();
}

uint64_t type metadata accessor for UTType()
{
  return MEMORY[0x1F4187A18]();
}

uint64_t UTType.init(_:)()
{
  return MEMORY[0x1F4187A20]();
}

uint64_t os_log(_:dso:log:_:_:)()
{
  return MEMORY[0x1F4188500]();
}

uint64_t OSSignpostID.init(log:)()
{
  return MEMORY[0x1F4188568]();
}

uint64_t OSSignpostID.rawValue.getter()
{
  return MEMORY[0x1F4188570]();
}

uint64_t static OSSignpostID.exclusive.getter()
{
  return MEMORY[0x1F4188578]();
}

uint64_t type metadata accessor for OSSignpostID()
{
  return MEMORY[0x1F4188580]();
}

uint64_t OSSignposter.logHandle.getter()
{
  return MEMORY[0x1F41885B0]();
}

uint64_t type metadata accessor for OSSignposter()
{
  return MEMORY[0x1F41885D0]();
}

uint64_t type metadata accessor for OSSignpostError()
{
  return MEMORY[0x1F41885E0]();
}

uint64_t static OSLogIntegerFormatting.decimal.getter()
{
  return MEMORY[0x1F4188648]();
}

uint64_t OSSignpostIntervalState.signpostID.getter()
{
  return MEMORY[0x1F4188650]();
}

uint64_t OSSignpostIntervalState.init(id:isOpen:)()
{
  return MEMORY[0x1F4188658]();
}

uint64_t type metadata accessor for OSSignpostIntervalState()
{
  return MEMORY[0x1F4188660]();
}

uint64_t checkForErrorAndConsumeState(state:)()
{
  return MEMORY[0x1F4188668]();
}

uint64_t Logger.logObject.getter()
{
  return MEMORY[0x1F4188670]();
}

uint64_t Logger.init(subsystem:category:)()
{
  return MEMORY[0x1F4188680]();
}

uint64_t type metadata accessor for Logger()
{
  return MEMORY[0x1F41886A0]();
}

uint64_t Logger.init(_:)()
{
  return MEMORY[0x1F41886B0]();
}

uint64_t type metadata accessor for UIPointerShape()
{
  return MEMORY[0x1F41658B0]();
}

uint64_t static UICellAccessory.multiselect(displayed:options:)()
{
  return MEMORY[0x1F41658D0]();
}

uint64_t UICellAccessory.DeleteOptions.init(isHidden:reservedLayoutWidth:tintColor:backgroundColor:)()
{
  return MEMORY[0x1F41658E8]();
}

uint64_t type metadata accessor for UICellAccessory.DeleteOptions()
{
  return MEMORY[0x1F41658F0]();
}

uint64_t type metadata accessor for UICellAccessory.DisplayedState()
{
  return MEMORY[0x1F4165900]();
}

uint64_t UICellAccessory.ReorderOptions.init(isHidden:reservedLayoutWidth:tintColor:showsVerticalSeparator:)()
{
  return MEMORY[0x1F4165908]();
}

uint64_t type metadata accessor for UICellAccessory.ReorderOptions()
{
  return MEMORY[0x1F4165910]();
}

uint64_t type metadata accessor for UICellAccessory.LayoutDimension()
{
  return MEMORY[0x1F4165918]();
}

uint64_t UICellAccessory.MultiselectOptions.init(isHidden:reservedLayoutWidth:tintColor:backgroundColor:)()
{
  return MEMORY[0x1F4165948]();
}

uint64_t type metadata accessor for UICellAccessory.MultiselectOptions()
{
  return MEMORY[0x1F4165950]();
}

uint64_t static UICellAccessory.delete(displayed:options:actionHandler:)()
{
  return MEMORY[0x1F41659A0]();
}

uint64_t static UICellAccessory.reorder(displayed:options:)()
{
  return MEMORY[0x1F41659A8]();
}

uint64_t type metadata accessor for UICellAccessory()
{
  return MEMORY[0x1F41659C8]();
}

uint64_t UIMutableTraits.displayGamut.getter()
{
  return MEMORY[0x1F41659D0]();
}

uint64_t UIMutableTraits.displayGamut.setter()
{
  return MEMORY[0x1F41659D8]();
}

uint64_t UIMutableTraits.displayScale.getter()
{
  return MEMORY[0x1F41659E0]();
}

uint64_t UIMutableTraits.displayScale.setter()
{
  return MEMORY[0x1F41659E8]();
}

uint64_t UIMutableTraits._headroomUsage.setter()
{
  return MEMORY[0x1F41659F0]();
}

uint64_t UIMutableTraits.layoutDirection.getter()
{
  return MEMORY[0x1F41659F8]();
}

uint64_t UIMutableTraits.layoutDirection.setter()
{
  return MEMORY[0x1F4165A00]();
}

uint64_t UIMutableTraits.activeAppearance.setter()
{
  return MEMORY[0x1F4165A08]();
}

uint64_t UIMutableTraits.verticalSizeClass.getter()
{
  return MEMORY[0x1F4165A18]();
}

uint64_t UIMutableTraits.verticalSizeClass.setter()
{
  return MEMORY[0x1F4165A20]();
}

uint64_t UIMutableTraits.userInterfaceLevel.getter()
{
  return MEMORY[0x1F4165A30]();
}

uint64_t UIMutableTraits.userInterfaceLevel.setter()
{
  return MEMORY[0x1F4165A38]();
}

uint64_t UIMutableTraits.userInterfaceStyle.getter()
{
  return MEMORY[0x1F4165A40]();
}

uint64_t UIMutableTraits.userInterfaceStyle.setter()
{
  return MEMORY[0x1F4165A48]();
}

uint64_t UIMutableTraits.horizontalSizeClass.getter()
{
  return MEMORY[0x1F4165A50]();
}

uint64_t UIMutableTraits.horizontalSizeClass.setter()
{
  return MEMORY[0x1F4165A58]();
}

uint64_t UIMutableTraits.typesettingLanguage.setter()
{
  return MEMORY[0x1F4165A60]();
}

uint64_t UIMutableTraits.accessibilityContrast.getter()
{
  return MEMORY[0x1F4165A68]();
}

uint64_t UIMutableTraits.accessibilityContrast.setter()
{
  return MEMORY[0x1F4165A70]();
}

uint64_t UIMutableTraits.preferredContentSizeCategory.getter()
{
  return MEMORY[0x1F4165A78]();
}

uint64_t UIMutableTraits.preferredContentSizeCategory.setter()
{
  return MEMORY[0x1F4165A80]();
}

uint64_t UIMutableTraits._vibrancy.getter()
{
  return MEMORY[0x1F4165A88]();
}

uint64_t UIMutableTraits._vibrancy.setter()
{
  return MEMORY[0x1F4165A90]();
}

uint64_t UIPointerEffect.preview.getter()
{
  return MEMORY[0x1F4165AB8]();
}

uint64_t type metadata accessor for UIPointerEffect()
{
  return MEMORY[0x1F4165AC8]();
}

uint64_t UITraitOverrides.remove(_:)()
{
  return MEMORY[0x1F4165AD0]();
}

uint64_t type metadata accessor for UITraitOverrides()
{
  return MEMORY[0x1F4165AD8]();
}

uint64_t static UIWindowScenePlacement<>.prominent()()
{
  return MEMORY[0x1F4165B80]();
}

uint64_t type metadata accessor for UIBridgedAnimationState()
{
  return MEMORY[0x1F4165B88]();
}

uint64_t UIBridgedAnimationState.subscript.setter()
{
  return MEMORY[0x1F4165B98]();
}

uint64_t UICellConfigurationState.isDisabled.setter()
{
  return MEMORY[0x1F4165BC0]();
}

uint64_t UICellConfigurationState.isSelected.getter()
{
  return MEMORY[0x1F4165BC8]();
}

uint64_t UICellConfigurationState.isSelected.setter()
{
  return MEMORY[0x1F4165BD0]();
}

uint64_t UICellConfigurationState.isHighlighted.getter()
{
  return MEMORY[0x1F4165BD8]();
}

uint64_t UICellConfigurationState.isHighlighted.setter()
{
  return MEMORY[0x1F4165BE0]();
}

uint64_t UICellConfigurationState.traitCollection.getter()
{
  return MEMORY[0x1F4165BF0]();
}

UICellConfigurationState __swiftcall UICellConfigurationState._bridgeToObjectiveC()()
{
  return (UICellConfigurationState)MEMORY[0x1F4165BF8]();
}

uint64_t static UICellConfigurationState._unconditionallyBridgeFromObjectiveC(_:)()
{
  return MEMORY[0x1F4165C00]();
}

uint64_t UICellConfigurationState.isPinned.getter()
{
  return MEMORY[0x1F4165C08]();
}

uint64_t UICellConfigurationState.isSwiped.getter()
{
  return MEMORY[0x1F4165C10]();
}

uint64_t UICellConfigurationState.isEditing.getter()
{
  return MEMORY[0x1F4165C18]();
}

uint64_t UICellConfigurationState.isFocused.getter()
{
  return MEMORY[0x1F4165C20]();
}

uint64_t type metadata accessor for UICellConfigurationState()
{
  return MEMORY[0x1F4165C28]();
}

uint64_t type metadata accessor for UITraitVerticalSizeClass()
{
  return MEMORY[0x1F4165C40]();
}

UIViewConfigurationState __swiftcall UIViewConfigurationState._bridgeToObjectiveC()()
{
  return (UIViewConfigurationState)MEMORY[0x1F4165C48]();
}

uint64_t static UIViewConfigurationState._unconditionallyBridgeFromObjectiveC(_:)()
{
  return MEMORY[0x1F4165C50]();
}

uint64_t type metadata accessor for UIViewConfigurationState()
{
  return MEMORY[0x1F4165C58]();
}

uint64_t UIBackgroundConfiguration.customView.getter()
{
  return MEMORY[0x1F4165C60]();
}

uint64_t UIBackgroundConfiguration.customView.setter()
{
  return MEMORY[0x1F4165C68]();
}

uint64_t static UIBackgroundConfiguration.listFooter()()
{
  return MEMORY[0x1F4165C70]();
}

uint64_t static UIBackgroundConfiguration.listHeader()()
{
  return MEMORY[0x1F4165C78]();
}

uint64_t UIBackgroundConfiguration.backgroundColor.getter()
{
  return MEMORY[0x1F4165CC0]();
}

uint64_t UIBackgroundConfiguration.backgroundColor.setter()
{
  return MEMORY[0x1F4165CC8]();
}

uint64_t static UIBackgroundConfiguration.listAccompaniedSidebarCell()()
{
  return MEMORY[0x1F4165D10]();
}

uint64_t static UIBackgroundConfiguration.clear()()
{
  return MEMORY[0x1F4165D18]();
}

uint64_t UIBackgroundConfiguration.updated(for:)()
{
  return MEMORY[0x1F4165D20]();
}

uint64_t static UIBackgroundConfiguration.listCell()()
{
  return MEMORY[0x1F4165D28]();
}

uint64_t type metadata accessor for UIBackgroundConfiguration()
{
  return MEMORY[0x1F4165D30]();
}

uint64_t type metadata accessor for UITraitUserInterfaceStyle()
{
  return MEMORY[0x1F4165D48]();
}

uint64_t static UIListContentConfiguration.TextProperties.TextTransform.== infix(_:_:)()
{
  return MEMORY[0x1F4165DA0]();
}

uint64_t type metadata accessor for UIListContentConfiguration.TextProperties.TextTransform()
{
  return MEMORY[0x1F4165DA8]();
}

uint64_t UIListContentConfiguration.TextProperties.font.getter()
{
  return MEMORY[0x1F4165DD8]();
}

uint64_t UIListContentConfiguration.TextProperties.font.setter()
{
  return MEMORY[0x1F4165DE0]();
}

uint64_t UIListContentConfiguration.TextProperties.color.getter()
{
  return MEMORY[0x1F4165DE8]();
}

uint64_t UIListContentConfiguration.TextProperties.transform.getter()
{
  return MEMORY[0x1F4165E00]();
}

uint64_t type metadata accessor for UIListContentConfiguration.TextProperties()
{
  return MEMORY[0x1F4165E08]();
}

uint64_t UIListContentConfiguration._minimumHeight(for:)()
{
  return MEMORY[0x1F4165E10]();
}

uint64_t UIListContentConfiguration.textProperties.getter()
{
  return MEMORY[0x1F4165E30]();
}

uint64_t UIListContentConfiguration.textProperties.setter()
{
  return MEMORY[0x1F4165E38]();
}

uint64_t UIListContentConfiguration.ImageProperties.tintColor.getter()
{
  return MEMORY[0x1F4165E70]();
}

uint64_t type metadata accessor for UIListContentConfiguration.ImageProperties()
{
  return MEMORY[0x1F4165E80]();
}

uint64_t UIListContentConfiguration.imageProperties.getter()
{
  return MEMORY[0x1F4165E90]();
}

uint64_t UIListContentConfiguration.imageToTextPadding.getter()
{
  return MEMORY[0x1F4165E98]();
}

uint64_t UIListContentConfiguration.directionalLayoutMargins.getter()
{
  return MEMORY[0x1F4165ED0]();
}

uint64_t UIListContentConfiguration.directionalLayoutMargins.setter()
{
  return MEMORY[0x1F4165ED8]();
}

uint64_t static UIListContentConfiguration.prominentInsetGroupedHeader()()
{
  return MEMORY[0x1F4165EE0]();
}

uint64_t static UIListContentConfiguration.cell()()
{
  return MEMORY[0x1F4165F20]();
}

uint64_t static UIListContentConfiguration.footer()()
{
  return MEMORY[0x1F4165F48]();
}

uint64_t static UIListContentConfiguration.header()()
{
  return MEMORY[0x1F4165F50]();
}

uint64_t UIListContentConfiguration.updated(for:)()
{
  return MEMORY[0x1F4165F58]();
}

uint64_t type metadata accessor for UIListContentConfiguration()
{
  return MEMORY[0x1F4165F68]();
}

uint64_t type metadata accessor for UITraitHorizontalSizeClass()
{
  return MEMORY[0x1F4165F78]();
}

uint64_t UIListSeparatorConfiguration.topSeparatorVisibility.setter()
{
  return MEMORY[0x1F4166078]();
}

uint64_t UIListSeparatorConfiguration.topSeparatorInsets.modify()
{
  return MEMORY[0x1F4166080]();
}

uint64_t UIListSeparatorConfiguration.bottomSeparatorVisibility.setter()
{
  return MEMORY[0x1F4166090]();
}

uint64_t UIListSeparatorConfiguration.bottomSeparatorInsets.modify()
{
  return MEMORY[0x1F4166098]();
}

uint64_t type metadata accessor for UIListSeparatorConfiguration.Visibility()
{
  return MEMORY[0x1F41660A8]();
}

uint64_t UIListSeparatorConfiguration.color.setter()
{
  return MEMORY[0x1F41660B8]();
}

uint64_t type metadata accessor for UIListSeparatorConfiguration()
{
  return MEMORY[0x1F41660C0]();
}

Swift::Bool __swiftcall UINavigationItemRenameDelegate.navigationItem(_:shouldEndRenamingWith:)(UINavigationItem _, Swift::String shouldEndRenamingWith)
{
  return MEMORY[0x1F4166120](_.super.isa, shouldEndRenamingWith._countAndFlagsBits, shouldEndRenamingWith._object);
}

uint64_t UINavigationItemRenameDelegate.navigationItem(_:willBeginRenamingWith:selectedRange:)()
{
  return MEMORY[0x1F4166128]();
}

Swift::Bool __swiftcall UINavigationItemRenameDelegate.navigationItemShouldBeginRenaming(_:)(UINavigationItem a1)
{
  return MEMORY[0x1F4166130](a1.super.isa);
}

uint64_t type metadata accessor for UIWindowSceneProminentPlacement()
{
  return MEMORY[0x1F4166168]();
}

uint64_t type metadata accessor for UITraitPresentationSemanticContext()
{
  return MEMORY[0x1F41662C8]();
}

uint64_t UICollectionLayoutListConfiguration.leadingSwipeActionsConfigurationProvider.setter()
{
  return MEMORY[0x1F4166320]();
}

uint64_t UICollectionLayoutListConfiguration.trailingSwipeActionsConfigurationProvider.setter()
{
  return MEMORY[0x1F4166328]();
}

uint64_t static UICollectionLayoutListConfiguration.Appearance.== infix(_:_:)()
{
  return MEMORY[0x1F4166338]();
}

uint64_t type metadata accessor for UICollectionLayoutListConfiguration.Appearance()
{
  return MEMORY[0x1F4166340]();
}

uint64_t type metadata accessor for UICollectionLayoutListConfiguration.FooterMode()
{
  return MEMORY[0x1F4166350]();
}

uint64_t type metadata accessor for UICollectionLayoutListConfiguration.HeaderMode()
{
  return MEMORY[0x1F4166360]();
}

uint64_t UICollectionLayoutListConfiguration.init(appearance:)()
{
  return MEMORY[0x1F4166368]();
}

uint64_t UICollectionLayoutListConfiguration.footerMode.setter()
{
  return MEMORY[0x1F4166378]();
}

uint64_t UICollectionLayoutListConfiguration.headerMode.setter()
{
  return MEMORY[0x1F4166388]();
}

uint64_t UICollectionLayoutListConfiguration.backgroundColor.setter()
{
  return MEMORY[0x1F4166398]();
}

uint64_t UICollectionLayoutListConfiguration.headerTopPadding.setter()
{
  return MEMORY[0x1F41663A8]();
}

uint64_t UICollectionLayoutListConfiguration.itemSeparatorHandler.setter()
{
  return MEMORY[0x1F41663B0]();
}

uint64_t static UICollectionLayoutListConfiguration.ContentHuggingElements.supplementaryHeader.getter()
{
  return MEMORY[0x1F41663C0]();
}

uint64_t type metadata accessor for UICollectionLayoutListConfiguration.ContentHuggingElements()
{
  return MEMORY[0x1F41663C8]();
}

uint64_t UICollectionLayoutListConfiguration.contentHuggingElements.modify()
{
  return MEMORY[0x1F41663D0]();
}

uint64_t UICollectionLayoutListConfiguration.contentHuggingElements.getter()
{
  return MEMORY[0x1F41663D8]();
}

uint64_t type metadata accessor for UICollectionLayoutListConfiguration()
{
  return MEMORY[0x1F41663E8]();
}

uint64_t type metadata accessor for UISceneConnectionOptionDefinitionError()
{
  return MEMORY[0x1F4166420]();
}

uint64_t CombineIdentifier.init()()
{
  return MEMORY[0x1F40D6600]();
}

uint64_t type metadata accessor for CombineIdentifier()
{
  return MEMORY[0x1F40D6608]();
}

uint64_t type metadata accessor for Publishers.CombineLatest4()
{
  return MEMORY[0x1F40D6630]();
}

uint64_t type metadata accessor for Publishers.Map()
{
  return MEMORY[0x1F40D6728]();
}

uint64_t static Subscribers.Demand.unlimited.getter()
{
  return MEMORY[0x1F40D6908]();
}

uint64_t dispatch thunk of Subscription.request(_:)()
{
  return MEMORY[0x1F40D6928]();
}

uint64_t dispatch thunk of ObservableObject.objectWillChange.getter()
{
  return MEMORY[0x1F40D69D8]();
}

uint64_t static ObservableObject.environmentStore.getter()
{
  return MEMORY[0x1F40FCFD0]();
}

uint64_t ObservableObject<>.objectWillChange.getter()
{
  return MEMORY[0x1F40D69E0]();
}

uint64_t PassthroughSubject.send(_:)()
{
  return MEMORY[0x1F40D6A08]();
}

uint64_t PassthroughSubject.init()()
{
  return MEMORY[0x1F40D6A20]();
}

uint64_t type metadata accessor for PassthroughSubject()
{
  return MEMORY[0x1F40D6A28]();
}

Swift::Void __swiftcall ObservableObjectPublisher.send()()
{
}

uint64_t type metadata accessor for ObservableObjectPublisher()
{
  return MEMORY[0x1F40D6AC0]();
}

uint64_t Published.init(initialValue:)()
{
  return MEMORY[0x1F40D6B80]();
}

uint64_t static Published.subscript.modify()
{
  return MEMORY[0x1F40D6B98]();
}

uint64_t static Published.subscript.getter()
{
  return MEMORY[0x1F40D6BA0]();
}

uint64_t static Published.subscript.setter()
{
  return MEMORY[0x1F40D6BA8]();
}

uint64_t type metadata accessor for Published()
{
  return MEMORY[0x1F40D6BB8]();
}

uint64_t Publisher.combineLatest<A, B, C>(_:_:_:)()
{
  return MEMORY[0x1F40D6C08]();
}

uint64_t Publisher.map<A>(_:)()
{
  return MEMORY[0x1F40D6C50]();
}

uint64_t _ViewList_View.viewID.getter()
{
  return MEMORY[0x1F40FCFE0]();
}

uint64_t _ViewList_View.init(elements:id:index:count:contentSubgraph:)()
{
  return MEMORY[0x1F40FCFE8]();
}

uint64_t _ViewList_View.elementID.getter()
{
  return MEMORY[0x1F40FCFF0]();
}

uint64_t _ShapeStyle_Shape.init(operation:result:environment:foregroundStyle:bounds:role:)()
{
  return MEMORY[0x1F40FCFF8]();
}

uint64_t _ShapeStyle_Shape.stylePack.modify()
{
  return MEMORY[0x1F40FD000]();
}

uint64_t _ShapeStyle_Shape.stylePack.getter()
{
  return MEMORY[0x1F40FD008]();
}

uint64_t Animatable<>.animatableData.modify()
{
  return MEMORY[0x1F40FD030]();
}

uint64_t static Animatable.makeAnimatable(value:inputs:)()
{
  return MEMORY[0x1F40FD040]();
}

uint64_t static Animatable._makeAnimatable(value:inputs:)()
{
  return MEMORY[0x1F40FD048]();
}

uint64_t type metadata accessor for AnyGesture()
{
  return MEMORY[0x1F40FD050]();
}

uint64_t DepthTrait.init(traits:)()
{
  return MEMORY[0x1F40FD058]();
}

uint64_t static EdgeInsets.== infix(_:_:)()
{
  return MEMORY[0x1F40FD060]();
}

uint64_t EdgeInsets.init(_all:)()
{
  return MEMORY[0x1F40FD068]();
}

uint64_t static EdgeInsets.zero.getter()
{
  return MEMORY[0x1F40FD070]();
}

uint64_t EdgeInsets.negatedInsets.getter()
{
  return MEMORY[0x1F40FD078]();
}

uint64_t EdgeInsets.horizontal.getter()
{
  return MEMORY[0x1F40FD080]();
}

uint64_t EdgeInsets.originOffset.getter()
{
  return MEMORY[0x1F40FD088]();
}

uint64_t EdgeInsets.xFlipIfRightToLeft(layoutDirection:)()
{
  return MEMORY[0x1F40FD090]();
}

uint64_t EdgeInsets.in(_:)()
{
  return MEMORY[0x1F40FD098]();
}

uint64_t EdgeInsets.hash(into:)()
{
  return MEMORY[0x1F40FD0A0]();
}

uint64_t EdgeInsets.adding(_:)()
{
  return MEMORY[0x1F40FD0A8]();
}

uint64_t EdgeInsets.isEmpty.getter()
{
  return MEMORY[0x1F40FD0B0]();
}

uint64_t EdgeInsets.rounded(toMultipleOf:)()
{
  return MEMORY[0x1F40FD0B8]();
}

uint64_t EdgeInsets.vertical.getter()
{
  return MEMORY[0x1F40FD0C0]();
}

uint64_t EdgeInsets.init(_:edges:)()
{
  return MEMORY[0x1F40FD0C8]();
}

uint64_t EdgeInsets.subscript.getter()
{
  return MEMORY[0x1F40FD0D0]();
}

uint64_t EdgeInsets.subscript.setter()
{
  return MEMORY[0x1F40FD0D8]();
}

uint64_t type metadata accessor for MapGesture()
{
  return MEMORY[0x1F40FD100]();
}

uint64_t MapGesture.init(_:)()
{
  return MEMORY[0x1F40FD108]();
}

uint64_t MutableBox.wrappedValue.getter()
{
  return MEMORY[0x1F40FD110]();
}

uint64_t MutableBox.wrappedValue.setter()
{
  return MEMORY[0x1F40FD118]();
}

uint64_t MutableBox.value.getter()
{
  return MEMORY[0x1F40FD120]();
}

uint64_t MutableBox.value.setter()
{
  return MEMORY[0x1F40FD128]();
}

uint64_t type metadata accessor for MutableBox()
{
  return MEMORY[0x1F40FD130]();
}

uint64_t MutableBox.__allocating_init(_:)()
{
  return MEMORY[0x1F40FD138]();
}

uint64_t NamedImage.Cache.init(archiveDelegate:)()
{
  return MEMORY[0x1F40FD140]();
}

uint64_t static ReuseTrace.traceMismatchedReuseIDFailure(_:_:)()
{
  return MEMORY[0x1F40FD148]();
}

uint64_t static ReuseTrace.traceReuseIdentifier(_:)()
{
  return MEMORY[0x1F40FD150]();
}

uint64_t static ReuseTrace.traceReuseItemUnplaced(_:)()
{
  return MEMORY[0x1F40FD158]();
}

uint64_t static ReuseTrace.traceReuseCacheItemAdded(_:_:)()
{
  return MEMORY[0x1F40FD160]();
}

uint64_t static ReuseTrace.traceReuseSkippedNotIdle(_:)()
{
  return MEMORY[0x1F40FD168]();
}

uint64_t static ReuseTrace.traceReuseCacheItemPlaced(_:)()
{
  return MEMORY[0x1F40FD170]();
}

uint64_t static ReuseTrace.traceReuseCacheItemFailure(_:)()
{
  return MEMORY[0x1F40FD178]();
}

uint64_t static ReuseTrace.traceReuseTypeComparisonFailure(_:_:)()
{
  return MEMORY[0x1F40FD180]();
}

uint64_t static ReuseTrace.traceReuseViewInputsDifferentFailure()()
{
  return MEMORY[0x1F40FD188]();
}

uint64_t static ReuseTrace.traceCacheItemRecycled(_:)()
{
  return MEMORY[0x1F40FD190]();
}

uint64_t static ReuseTrace.traceNeverMadeReusableFailure(_:)()
{
  return MEMORY[0x1F40FD198]();
}

uint64_t ShapeStyle.copyStyle(name:in:foregroundStyle:)()
{
  return MEMORY[0x1F40FD1A0]();
}

uint64_t ShapeStyle.fallbackColor(in:level:)()
{
  return MEMORY[0x1F40FD1A8]();
}

uint64_t ShapeStyle.resolveGradient(in:level:)()
{
  return MEMORY[0x1F40FD1B0]();
}

uint64_t ShapeStyle.resolveBackgroundMaterial(in:level:)()
{
  return MEMORY[0x1F40FD1B8]();
}

uint64_t StrongHash.description.getter()
{
  return MEMORY[0x1F40FD1C8]();
}

uint64_t StrongHash.init<A>(of:)()
{
  return MEMORY[0x1F40FD1D0]();
}

uint64_t type metadata accessor for TestIDView()
{
  return MEMORY[0x1F40FD1D8]();
}

uint64_t Transition.apply<A>(content:phase:)()
{
  return MEMORY[0x1F40FD1E0]();
}

uint64_t Transition.combined<A>(with:)()
{
  return MEMORY[0x1F40FD1E8]();
}

uint64_t static Transition.makeView(view:inputs:body:)()
{
  return MEMORY[0x1F40FD1F0]();
}

uint64_t Transition.animation(_:)()
{
  return MEMORY[0x1F40FD1F8]();
}

uint64_t ViewOrigin.x.modify()
{
  return MEMORY[0x1F40FD200]();
}

uint64_t ViewOrigin.x.setter()
{
  return MEMORY[0x1F40FD208]();
}

uint64_t ViewOrigin.y.modify()
{
  return MEMORY[0x1F40FD210]();
}

uint64_t ViewOrigin.y.getter()
{
  return MEMORY[0x1F40FD218]();
}

uint64_t ViewOrigin.y.setter()
{
  return MEMORY[0x1F40FD220]();
}

uint64_t ViewOrigin.value.modify()
{
  return MEMORY[0x1F40FD228]();
}

uint64_t ViewOrigin.value.getter()
{
  return MEMORY[0x1F40FD230]();
}

uint64_t ViewOrigin.value.setter()
{
  return MEMORY[0x1F40FD238]();
}

uint64_t ViewOrigin.init()()
{
  return MEMORY[0x1F40FD240]();
}

uint64_t ViewOrigin.subscript.setter()
{
  return MEMORY[0x1F40FD248]();
}

uint64_t ViewOrigin.init(_:)()
{
  return MEMORY[0x1F40FD250]();
}

uint64_t _Placement.init(proposedSize:at:)()
{
  return MEMORY[0x1F40FD258]();
}

uint64_t _Placement.init(proposedSize:aligning:in:)()
{
  return MEMORY[0x1F40FD260]();
}

uint64_t _Placement.init(proposedSize:anchoring:at:)()
{
  return MEMORY[0x1F40FD268]();
}

{
  return MEMORY[0x1F40FD270]();
}

uint64_t _Placement.proposedSize.getter()
{
  return MEMORY[0x1F40FD278]();
}

uint64_t _Placement.proposedSize.setter()
{
  return MEMORY[0x1F40FD280]();
}

uint64_t _Placement.anchorPosition.modify()
{
  return MEMORY[0x1F40FD288]();
}

uint64_t _Placement.anchorPosition.getter()
{
  return MEMORY[0x1F40FD290]();
}

uint64_t _Placement.anchorPosition.setter()
{
  return MEMORY[0x1F40FD298]();
}

uint64_t static _Placement.== infix(_:_:)()
{
  return MEMORY[0x1F40FD2A0]();
}

CGPoint __swiftcall _Placement.frameOrigin(childSize:)(CGSize childSize)
{
  MEMORY[0x1F40FD2A8]((__n128)__PAIR128__(v1, *(unint64_t *)&childSize.width), (__n128)__PAIR128__(v2, *(unint64_t *)&childSize.height));
  result.CGFloat y = v4;
  result.CGFloat x = v3;
  return result;
}

uint64_t _ShapeView.init(shape:style:fillStyle:)()
{
  return MEMORY[0x1F40FD2B8]();
}

uint64_t type metadata accessor for _ShapeView()
{
  return MEMORY[0x1F40FD2C0]();
}

uint64_t static _ViewDebug.serializedData(_:)()
{
  return MEMORY[0x1F40FD2C8]();
}

uint64_t static AlignmentID.combineExplicit<A>(_:)()
{
  return MEMORY[0x1F40FD2D0]();
}

uint64_t dispatch thunk of AnyColorBox.kitColor.getter()
{
  return MEMORY[0x1F40FD2E0]();
}

uint64_t dispatch thunk of AnyColorBox.hash(into:)()
{
  return MEMORY[0x1F40FD2E8]();
}

uint64_t dispatch thunk of AnyColorBox.resolve(in:)()
{
  return MEMORY[0x1F40FD2F0]();
}

uint64_t AnyColorBox.as<A>(_:)()
{
  return MEMORY[0x1F40FD2F8]();
}

uint64_t AnyGradient.color(at:)()
{
  return MEMORY[0x1F40FD300]();
}

uint64_t AnyGradient.init<A>(provider:)()
{
  return MEMORY[0x1F40FD308]();
}

uint64_t dispatch thunk of AnyLocation.projecting<A>(_:)()
{
  return MEMORY[0x1F40FD310]();
}

uint64_t dispatch thunk of AnyLocation.get()()
{
  return MEMORY[0x1F40FD318]();
}

uint64_t dispatch thunk of AnyLocation.set(_:transaction:)()
{
  return MEMORY[0x1F40FD320]();
}

uint64_t dispatch thunk of AnyLocation.update()()
{
  return MEMORY[0x1F40FD328]();
}

uint64_t dispatch thunk of AnyLocation.isEqual(to:)()
{
  return MEMORY[0x1F40FD330]();
}

uint64_t dispatch thunk of AnyLocation.wasRead.getter()
{
  return MEMORY[0x1F40FD338]();
}

uint64_t dispatch thunk of AnyLocation.wasRead.setter()
{
  return MEMORY[0x1F40FD340]();
}

uint64_t type metadata accessor for AnyLocation()
{
  return MEMORY[0x1F40FD350]();
}

uint64_t AnyLocation.deinit()
{
  return MEMORY[0x1F40FD358]();
}

uint64_t static CoreTesting.needsRender.getter()
{
  return MEMORY[0x1F40FD360]();
}

uint64_t static CoreTesting.needsRender.setter()
{
  return MEMORY[0x1F40FD368]();
}

uint64_t static CoreTesting.isRunning.getter()
{
  return MEMORY[0x1F40FD370]();
}

uint64_t static CoreTesting.isRunning.setter()
{
  return MEMORY[0x1F40FD378]();
}

uint64_t DisplayList.forEachRBDisplayList(_:)()
{
  return MEMORY[0x1F40FD380]();
}

uint64_t DisplayList.ArchiveIDs.init(uuid:stableIDs:)()
{
  return MEMORY[0x1F40FD388]();
}

uint64_t DisplayList.ArchiveIDs.uuid.getter()
{
  return MEMORY[0x1F40FD390]();
}

uint64_t type metadata accessor for DisplayList.ArchiveIDs()
{
  return MEMORY[0x1F40FD398]();
}

uint64_t DisplayList.ViewUpdater.Platform.init(definition:)()
{
  return MEMORY[0x1F40FD3A0]();
}

uint64_t DisplayList.description.getter()
{
  return MEMORY[0x1F40FD3A8]();
}

uint64_t DisplayList.GraphicsRenderer.renderDisplayList(_:at:in:)()
{
  return MEMORY[0x1F40FD3B0]();
}

uint64_t DisplayList.GraphicsRenderer.init(platformViewMode:)()
{
  return MEMORY[0x1F40FD3B8]();
}

uint64_t DisplayList.GraphicsRenderer.renderPlatformView(_:in:size:viewType:)()
{
  return MEMORY[0x1F40FD3C0]();
}

uint64_t DisplayList.GraphicsRenderer.render(list:in:)()
{
  return MEMORY[0x1F40FD3C8]();
}

uint64_t type metadata accessor for DisplayList.GraphicsRenderer()
{
  return MEMORY[0x1F40FD3D0]();
}

uint64_t DisplayList.UnaryInterpolatorGroup.apply(to:)()
{
  return MEMORY[0x1F40FD3D8]();
}

uint64_t DisplayList.UnaryInterpolatorGroup.init()()
{
  return MEMORY[0x1F40FD3E0]();
}

uint64_t type metadata accessor for DisplayList.UnaryInterpolatorGroup()
{
  return MEMORY[0x1F40FD3E8]();
}

uint64_t static DisplayList.== infix(_:_:)()
{
  return MEMORY[0x1F40FD3F0]();
}

uint64_t DisplayList.Item.canonicalize(options:)()
{
  return MEMORY[0x1F40FD400]();
}

uint64_t DisplayList.Item.frame.getter()
{
  return MEMORY[0x1F40FD408]();
}

uint64_t DisplayList.Item.init(_:frame:identity:version:)()
{
  return MEMORY[0x1F40FD410]();
}

Swift::Void __swiftcall DisplayList.Index.updateArchive(entering:)(Swift::Bool entering)
{
}

uint64_t DisplayList.Index.enter(identity:)()
{
  return MEMORY[0x1F40FD420]();
}

uint64_t DisplayList.Index.leave(index:)()
{
  return MEMORY[0x1F40FD428]();
}

uint64_t DisplayList.Index.init()()
{
  return MEMORY[0x1F40FD430]();
}

uint64_t DisplayList.append(_:)()
{
  return MEMORY[0x1F40FD438]();
}

uint64_t DisplayList.Version.init(forUpdate:)()
{
  return MEMORY[0x1F40FD440]();
}

uint64_t DisplayList.isEmpty.getter()
{
  return MEMORY[0x1F40FD448]();
}

uint64_t DisplayList.version.getter()
{
  return MEMORY[0x1F40FD450]();
}

uint64_t DisplayList.Transform.affineTransform.getter()
{
  return MEMORY[0x1F40FD458]();
}

uint64_t DisplayList.ViewRenderer.configuration.setter()
{
  return MEMORY[0x1F40FD460]();
}

uint64_t DisplayList.ViewRenderer.exportedObject(rootView:)()
{
  return MEMORY[0x1F40FD468]();
}

uint64_t DisplayList.ViewRenderer.viewCacheIsEmpty.getter()
{
  return MEMORY[0x1F40FD470]();
}

uint64_t DisplayList.ViewRenderer.host.setter()
{
  return MEMORY[0x1F40FD478]();
}

uint64_t DisplayList.ViewRenderer.init(platform:)()
{
  return MEMORY[0x1F40FD480]();
}

uint64_t type metadata accessor for DisplayList.ViewRenderer()
{
  return MEMORY[0x1F40FD488]();
}

uint64_t DisplayList.init()()
{
  return MEMORY[0x1F40FD490]();
}

uint64_t DisplayList.init(_:)()
{
  return MEMORY[0x1F40FD498]();
}

uint64_t type metadata accessor for Environment.Content()
{
  return MEMORY[0x1F40FD4A0]();
}

uint64_t type metadata accessor for EventFilter()
{
  return MEMORY[0x1F40FD4A8]();
}

uint64_t LayoutProxy.finallyPlaced(at:in:layoutDirection:)()
{
  return MEMORY[0x1F40FD4B0]();
}

uint64_t LayoutProxy.layoutPriority.getter()
{
  return MEMORY[0x1F40FD4B8]();
}

uint64_t LayoutProxy.lengthThatFits(_:in:)()
{
  return MEMORY[0x1F40FD4C0]();
}

uint64_t LayoutProxy.requiresSpacingProjection.getter()
{
  return MEMORY[0x1F40FD4C8]();
}

uint64_t LayoutProxy.size(in:)()
{
  return MEMORY[0x1F40FD4D0]();
}

uint64_t LayoutProxy.traits.getter()
{
  return MEMORY[0x1F40FD4D8]();
}

uint64_t LayoutProxy.init(context:layoutComputer:)()
{
  return MEMORY[0x1F40FD4E0]();
}

uint64_t LayoutProxy.spacing()()
{
  return MEMORY[0x1F40FD4E8]();
}

CGSize __swiftcall LayoutProxy.idealSize()()
{
  MEMORY[0x1F40FD4F0]();
  result.double height = v1;
  result.double width = v0;
  return result;
}

uint64_t LayoutProxy.subscript.getter()
{
  return MEMORY[0x1F40FD4F8]();
}

uint64_t LayoutTrace.Recorder.graph.getter()
{
  return MEMORY[0x1F40FD500]();
}

uint64_t type metadata accessor for LocationBox()
{
  return MEMORY[0x1F40FD508]();
}

uint64_t LocationBox.__allocating_init(_:)()
{
  return MEMORY[0x1F40FD510]();
}

uint64_t LocationBox.init(_:)()
{
  return MEMORY[0x1F40FD518]();
}

uint64_t type metadata accessor for OffsetShape()
{
  return MEMORY[0x1F40FD520]();
}

uint64_t type metadata accessor for SizeGesture()
{
  return MEMORY[0x1F40FD538]();
}

uint64_t StateObject.init(wrappedValue:)()
{
  return MEMORY[0x1F40FD540]();
}

uint64_t StateObject.wrappedValue.getter()
{
  return MEMORY[0x1F40FD548]();
}

uint64_t StrokeStyle.init(lineWidth:lineCap:lineJoin:miterLimit:dash:dashPhase:)()
{
  return MEMORY[0x1F40FD550]();
}

uint64_t static ToggleState.allCases.getter()
{
  return MEMORY[0x1F40FD558]();
}

uint64_t static ToggleState.stateFor<A, B>(item:in:)()
{
  return MEMORY[0x1F40FD560]();
}

uint64_t Transaction.isAnimated.getter()
{
  return MEMORY[0x1F40FD568]();
}

uint64_t Transaction.isContinuous.getter()
{
  return MEMORY[0x1F40FD570]();
}

uint64_t Transaction.fromScrollView.getter()
{
  return MEMORY[0x1F40FD578]();
}

uint64_t Transaction.fromScrollView.setter()
{
  return MEMORY[0x1F40FD580]();
}

uint64_t Transaction.tracksVelocity.setter()
{
  return MEMORY[0x1F40FD588]();
}

Swift::Void __swiftcall Transaction.disableAnimations()()
{
}

uint64_t Transaction.disablesAnimations.getter()
{
  return MEMORY[0x1F40FD598]();
}

uint64_t Transaction.disablesAnimations.setter()
{
  return MEMORY[0x1F40FD5A0]();
}

uint64_t Transaction.scrollTargetAnchor.getter()
{
  return MEMORY[0x1F40FD5A8]();
}

uint64_t Transaction.scrollTargetAnchor.setter()
{
  return MEMORY[0x1F40FD5B0]();
}

uint64_t Transaction.isPageScrollAnimated.getter()
{
  return MEMORY[0x1F40FD5B8]();
}

uint64_t Transaction.disablesContentTransitions.setter()
{
  return MEMORY[0x1F40FD5C0]();
}

uint64_t Transaction.animationIgnoringTransitionPhase.getter()
{
  return MEMORY[0x1F40FD5C8]();
}

uint64_t Transaction.scrollContentOffsetAdjustmentBehavior.getter()
{
  return MEMORY[0x1F40FD5D0]();
}

uint64_t Transaction.scrollContentOffsetAdjustmentBehavior.setter()
{
  return MEMORY[0x1F40FD5D8]();
}

uint64_t static Transaction.barrier()()
{
  return MEMORY[0x1F40FD5E0]();
}

uint64_t Transaction.current.getter()
{
  return MEMORY[0x1F40FD5E8]();
}

uint64_t static Transaction.current.getter()
{
  return MEMORY[0x1F40FD5F0]();
}

uint64_t Transaction.animation.getter()
{
  return MEMORY[0x1F40FD5F8]();
}

uint64_t Transaction.animation.setter()
{
  return MEMORY[0x1F40FD600]();
}

uint64_t Transaction.init(animation:)()
{
  return MEMORY[0x1F40FD608]();
}

uint64_t Transaction.addAnimationListener(allFinished:)()
{
  return MEMORY[0x1F40FD610]();
}

uint64_t Transaction.addAnimationListener(_:)()
{
  return MEMORY[0x1F40FD618]();
}

uint64_t Transaction.addAnimationLogicalListener(allFinished:)()
{
  return MEMORY[0x1F40FD620]();
}

uint64_t Transaction.subscript.getter()
{
  return MEMORY[0x1F40FD628]();
}

uint64_t Transaction.subscript.setter()
{
  return MEMORY[0x1F40FD630]();
}

uint64_t ViewSpacing.distance(to:along:)()
{
  return MEMORY[0x1F40FD658]();
}

uint64_t ViewSpacing.init()()
{
  return MEMORY[0x1F40FD660]();
}

uint64_t type metadata accessor for _ClipEffect()
{
  return MEMORY[0x1F40FD668]();
}

uint64_t _GraphValue.unsafeBitCast<A>(to:)()
{
  return MEMORY[0x1F40FD670]();
}

uint64_t _GraphValue.value.getter()
{
  return MEMORY[0x1F40FD678]();
}

uint64_t _GraphValue.subscript.getter()
{
  return MEMORY[0x1F40FD680]();
}

{
  return MEMORY[0x1F40FD690]();
}

uint64_t type metadata accessor for _GraphValue()
{
  return MEMORY[0x1F40FD688]();
}

uint64_t _GraphValue.init(_:)()
{
  return MEMORY[0x1F40FD698]();
}

uint64_t _GraphValue.init<A>(_:)()
{
  return MEMORY[0x1F40FD6A0]();
}

{
  return MEMORY[0x1F40FD6A8]();
}

uint64_t type metadata accessor for _LayoutRoot()
{
  return MEMORY[0x1F40FD6B0]();
}

uint64_t _LayoutRoot.init(_:)()
{
  return MEMORY[0x1F40FD6B8]();
}

uint64_t type metadata accessor for _MapGesture()
{
  return MEMORY[0x1F40FD6C0]();
}

uint64_t type metadata accessor for _SizedShape()
{
  return MEMORY[0x1F40FD6C8]();
}

uint64_t _ViewInputs.environment.getter()
{
  return MEMORY[0x1F40FD6D0]();
}

uint64_t _ViewInputs.environment.setter()
{
  return MEMORY[0x1F40FD6D8]();
}

uint64_t _ViewInputs.transaction.getter()
{
  return MEMORY[0x1F40FD6E0]();
}

uint64_t _ViewInputs.transaction.setter()
{
  return MEMORY[0x1F40FD6E8]();
}

uint64_t _ViewInputs.animatedSize()()
{
  return MEMORY[0x1F40FD6F0]();
}

uint64_t _ViewInputs.containerSize.getter()
{
  return MEMORY[0x1F40FD6F8]();
}

uint64_t _ViewInputs.containerSize.setter()
{
  return MEMORY[0x1F40FD700]();
}

uint64_t _ViewInputs.animatedCGSize()()
{
  return MEMORY[0x1F40FD708]();
}

uint64_t _ViewInputs.mapEnvironment<A>(_:)()
{
  return MEMORY[0x1F40FD710]();
}

uint64_t _ViewInputs.safeAreaInsets.getter()
{
  return MEMORY[0x1F40FD718]();
}

uint64_t _ViewInputs.safeAreaInsets.setter()
{
  return MEMORY[0x1F40FD720]();
}

uint64_t _ViewInputs.animatedPosition()()
{
  return MEMORY[0x1F40FD728]();
}

uint64_t _ViewInputs.containerPosition.getter()
{
  return MEMORY[0x1F40FD730]();
}

uint64_t _ViewInputs.containerPosition.setter()
{
  return MEMORY[0x1F40FD738]();
}

uint64_t _ViewInputs.size.getter()
{
  return MEMORY[0x1F40FD740]();
}

uint64_t _ViewInputs.size.setter()
{
  return MEMORY[0x1F40FD748]();
}

uint64_t _ViewInputs.time.getter()
{
  return MEMORY[0x1F40FD750]();
}

uint64_t _ViewInputs.intern<A>(_:id:)()
{
  return MEMORY[0x1F40FD758]();
}

uint64_t _ViewInputs.position.getter()
{
  return MEMORY[0x1F40FD760]();
}

uint64_t _ViewInputs.position.setter()
{
  return MEMORY[0x1F40FD768]();
}

uint64_t _ViewInputs.transform.getter()
{
  return MEMORY[0x1F40FD770]();
}

uint64_t _ViewInputs.transform.setter()
{
  return MEMORY[0x1F40FD778]();
}

uint64_t _ViewInputs.viewPhase.getter()
{
  return MEMORY[0x1F40FD780]();
}

uint64_t _ViewInputs.viewPhase.setter()
{
  return MEMORY[0x1F40FD788]();
}

uint64_t _ViewInputs.scrollable.setter()
{
  return MEMORY[0x1F40FD790]();
}

uint64_t _ViewInputs.isScrapeable.getter()
{
  return MEMORY[0x1F40FD798]();
}

uint64_t _ViewInputs.pushIdentity(_:)()
{
  return MEMORY[0x1F40FD7A0]();
}

uint64_t _ViewInputs.weakScrollable.getter()
{
  return MEMORY[0x1F40FD7A8]();
}

uint64_t _ViewInputs.init(withoutGeometry:)()
{
  return MEMORY[0x1F40FD7B0]();
}

uint64_t _ViewInputs.implicitRootType.setter()
{
  return MEMORY[0x1F40FD7B8]();
}

uint64_t _ViewInputs.pushModifierBody<A>(_:body:)()
{
  return MEMORY[0x1F40FD7C0]();
}

uint64_t _ViewInputs.hasWidgetMetadata.setter()
{
  return MEMORY[0x1F40FD7C8]();
}

uint64_t _ViewInputs.configureStableIDs(root:)()
{
  return MEMORY[0x1F40FD7D0]();
}

uint64_t _ViewInputs.scrapeableParentID.getter()
{
  return MEMORY[0x1F40FD7D8]();
}

uint64_t _ViewInputs.scrapeableParentID.setter()
{
  return MEMORY[0x1F40FD7E0]();
}

uint64_t _ViewInputs.makeIndirectOutputs()()
{
  return MEMORY[0x1F40FD7E8]();
}

uint64_t _ViewInputs.makeGestureContainer(responder:)()
{
  return MEMORY[0x1F40FD7F0]();
}

uint64_t _ViewInputs.textAlwaysOnProvider.setter()
{
  return MEMORY[0x1F40FD7F8]();
}

uint64_t _ViewInputs.textAccessibilityProvider.getter()
{
  return MEMORY[0x1F40FD800]();
}

uint64_t _ViewInputs.textAccessibilityProvider.setter()
{
  return MEMORY[0x1F40FD808]();
}

uint64_t _ViewInputs.imageAccessibilityProvider.setter()
{
  return MEMORY[0x1F40FD810]();
}

uint64_t _ViewInputs.layoutAccessibilityProvider.setter()
{
  return MEMORY[0x1F40FD818]();
}

uint64_t _ViewInputs.requestedTextRepresentation.setter()
{
  return MEMORY[0x1F40FD820]();
}

uint64_t _ViewInputs.withoutGeometryDependencies.getter()
{
  return MEMORY[0x1F40FD828]();
}

uint64_t _ViewInputs.gestureAccessibilityProvider.setter()
{
  return MEMORY[0x1F40FD830]();
}

uint64_t _ViewInputs.opacityAccessibilityProvider.setter()
{
  return MEMORY[0x1F40FD838]();
}

uint64_t _ViewInputs.requestedImageRepresentation.setter()
{
  return MEMORY[0x1F40FD840]();
}

uint64_t _ViewInputs.requestedSpacerRepresentation.setter()
{
  return MEMORY[0x1F40FD848]();
}

uint64_t _ViewInputs.requestedNamedImageRepresentation.setter()
{
  return MEMORY[0x1F40FD850]();
}

uint64_t _ViewInputs.privacyReductionAccessibilityProvider.setter()
{
  return MEMORY[0x1F40FD858]();
}

uint64_t concatenate<A, B>(_:_:)()
{
  return MEMORY[0x1F40FD860]();
}

uint64_t static AbsoluteEdge.Set.vertical.getter()
{
  return MEMORY[0x1F40FD868]();
}

uint64_t AbsoluteEdge.Set.init(_:layoutDirection:)()
{
  return MEMORY[0x1F40FD870]();
}

uint64_t AlignmentKey.init(id:axis:)()
{
  return MEMORY[0x1F40FD878]();
}

uint64_t AlignmentKey.id.getter()
{
  return MEMORY[0x1F40FD880]();
}

uint64_t AlignmentKey.fraction.getter()
{
  return MEMORY[0x1F40FD888]();
}

uint64_t static AnyEquatable.== infix(_:_:)()
{
  return MEMORY[0x1F40FD890]();
}

uint64_t AnyEquatable.init<A>(_:)()
{
  return MEMORY[0x1F40FD898]();
}

uint64_t AnyHashable2.anyHashable.getter()
{
  return MEMORY[0x1F40FD8A0]();
}

uint64_t AnyHashable2.anyValue.getter()
{
  return MEMORY[0x1F40FD8A8]();
}

uint64_t BodyAccessor.setBody(_:)()
{
  return MEMORY[0x1F40FD8B0]();
}

uint64_t BodyAccessor.makeBody(container:inputs:fields:)()
{
  return MEMORY[0x1F40FD8B8]();
}

uint64_t type metadata accessor for BothFeatures()
{
  return MEMORY[0x1F40FD8C0]();
}

uint64_t static DisplayGamut.deviceDefault.getter()
{
  return MEMORY[0x1F40FD8C8]();
}

uint64_t type metadata accessor for EmptyGesture()
{
  return MEMORY[0x1F40FD8D0]();
}

uint64_t GestureGraph.enqueueAction(_:)()
{
  return MEMORY[0x1F40FD8D8]();
}

uint64_t static GestureGraph.current.getter()
{
  return MEMORY[0x1F40FD8E0]();
}

uint64_t type metadata accessor for GestureGraph()
{
  return MEMORY[0x1F40FD8E8]();
}

uint64_t GesturePhase.and<A, B>(_:value:)()
{
  return MEMORY[0x1F40FD8F0]();
}

uint64_t GesturePhase.map<A>(_:)()
{
  return MEMORY[0x1F40FD8F8]();
}

uint64_t GesturePhase.isActive.getter()
{
  return MEMORY[0x1F40FD900]();
}

uint64_t GesturePhase.unwrapped.getter()
{
  return MEMORY[0x1F40FD908]();
}

uint64_t GesturePhase.withValue<A>(_:)()
{
  return MEMORY[0x1F40FD910]();
}

uint64_t type metadata accessor for GesturePhase()
{
  return MEMORY[0x1F40FD918]();
}

uint64_t LayoutEngine.explicitAlignment(_:at:)()
{
  return MEMORY[0x1F40FD930]();
}

uint64_t LayoutEngine.spacing()()
{
  return MEMORY[0x1F40FD938]();
}

uint64_t LoggableRect.description.getter()
{
  return MEMORY[0x1F40FD940]();
}

uint64_t PropertyList.mayNotBeEqual(to:)()
{
  return MEMORY[0x1F40FD948]();
}

uint64_t PropertyList.valueWithSecondaryLookup<A>(_:)()
{
  return MEMORY[0x1F40FD950]();
}

uint64_t PropertyList.Tracker.invalidateValue<A>(for:from:to:)()
{
  return MEMORY[0x1F40FD958]();
}

uint64_t PropertyList.Tracker.hasDifferentUsedValues(_:)()
{
  return MEMORY[0x1F40FD960]();
}

uint64_t PropertyList.Tracker.valueWithSecondaryLookup<A>(_:secondaryLookupHandler:)()
{
  return MEMORY[0x1F40FD968]();
}

Swift::Void __swiftcall PropertyList.Tracker.reset()()
{
}

uint64_t PropertyList.Tracker.value<A>(_:for:)()
{
  return MEMORY[0x1F40FD978]();
}

uint64_t PropertyList.Tracker.__allocating_init()()
{
  return MEMORY[0x1F40FD980]();
}

uint64_t type metadata accessor for PropertyList.Tracker()
{
  return MEMORY[0x1F40FD988]();
}

uint64_t PropertyList.forEach<A>(keyType:_:)()
{
  return MEMORY[0x1F40FD990]();
}

uint64_t PropertyList.override(with:)()
{
  return MEMORY[0x1F40FD998]();
}

uint64_t PropertyList.subscript.getter()
{
  return MEMORY[0x1F40FD9A0]();
}

uint64_t PropertyList.subscript.setter()
{
  return MEMORY[0x1F40FD9A8]();
}

uint64_t type metadata accessor for RotatedShape()
{
  return MEMORY[0x1F40FD9B0]();
}

uint64_t ScaledMetric.init(wrappedValue:relativeTo:)()
{
  return MEMORY[0x1F40FD9B8]();
}

uint64_t ScaledMetric.init(wrappedValue:)()
{
  return MEMORY[0x1F40FD9C0]();
}

uint64_t ScaledMetric.wrappedValue.getter()
{
  return MEMORY[0x1F40FD9C8]();
}

uint64_t type metadata accessor for ScaledMetric()
{
  return MEMORY[0x1F40FD9D0]();
}

uint64_t ScrapeableID.init()()
{
  return MEMORY[0x1F40FD9D8]();
}

uint64_t ScrollTarget.init(rect:anchor:)()
{
  return MEMORY[0x1F40FD9E0]();
}

uint64_t ScrollTarget.rect.modify()
{
  return MEMORY[0x1F40FD9E8]();
}

uint64_t ScrollTarget.rect.getter()
{
  return MEMORY[0x1F40FD9F0]();
}

uint64_t SpatialEvent.globalLocation.getter()
{
  return MEMORY[0x1F40FD9F8]();
}

uint64_t SpatialEvent.location.getter()
{
  return MEMORY[0x1F40FDA00]();
}

uint64_t static StyleContext.acceptsAny<A>(_:)()
{
  return MEMORY[0x1F40FDA10]();
}

uint64_t VerticalEdge.Set.contains(_:)()
{
  return MEMORY[0x1F40FDA20]();
}

uint64_t static ViewDecoders.registerDecodableFactoryType<A, B>(_:forType:)()
{
  return MEMORY[0x1F40FDA28]();
}

uint64_t static ViewDecoders.registerDecodableFactoryType<A>(_:forID:)()
{
  return MEMORY[0x1F40FDA30]();
}

uint64_t ViewGeometry.init(dimensions:)()
{
  return MEMORY[0x1F40FDA38]();
}

uint64_t static ViewGeometry.invalidValue.getter()
{
  return MEMORY[0x1F40FDA40]();
}

uint64_t ViewGeometry.finalizeLayoutDirection(_:parentSize:)()
{
  return MEMORY[0x1F40FDA48]();
}

uint64_t static ViewGeometry.zero.getter()
{
  return MEMORY[0x1F40FDA50]();
}

uint64_t ViewGeometry.init(origin:dimensions:)()
{
  return MEMORY[0x1F40FDA58]();
}

uint64_t static ViewModifier<>._viewListCount(inputs:body:)()
{
  return MEMORY[0x1F40FDA70]();
}

{
  return MEMORY[0x1F40FDAE0]();
}

uint64_t static ViewModifier.makeDebuggableView(modifier:inputs:body:)()
{
  return MEMORY[0x1F40FDA78]();
}

uint64_t static ViewModifier.makeDebuggableViewList(modifier:inputs:body:)()
{
  return MEMORY[0x1F40FDA80]();
}

uint64_t static ViewModifier.makeView(modifier:inputs:body:)()
{
  return MEMORY[0x1F40FDA88]();
}

uint64_t static ViewModifier.makeViewList(modifier:inputs:body:)()
{
  return MEMORY[0x1F40FDA90]();
}

uint64_t static ViewModifier._makeView(modifier:inputs:body:)()
{
  return MEMORY[0x1F40FDA98]();
}

uint64_t static ViewModifier._makeViewList(modifier:inputs:body:)()
{
  return MEMORY[0x1F40FDAA0]();
}

uint64_t static ViewModifier.makeMultiViewList(modifier:inputs:body:)()
{
  return MEMORY[0x1F40FDAA8]();
}

uint64_t static ViewModifier.makeUnaryViewList(modifier:inputs:body:)()
{
  return MEMORY[0x1F40FDAB0]();
}

uint64_t static ViewModifier.viewListCount(inputs:body:)()
{
  return MEMORY[0x1F40FDAB8]();
}

uint64_t static ViewModifier._viewListCount(inputs:body:)()
{
  return MEMORY[0x1F40FDAC0]();
}

uint64_t ViewModifier.concat<A>(_:)()
{
  return MEMORY[0x1F40FDAC8]();
}

uint64_t ViewModifier.requiring<A>(_:)()
{
  return MEMORY[0x1F40FDAD0]();
}

{
  return MEMORY[0x1F40FDAD8]();
}

uint64_t VisualEffect.geometryEffect<A>(_:)()
{
  return MEMORY[0x1F40FDAE8]();
}

uint64_t VisualEffect.rendererEffect<A>(_:)()
{
  return MEMORY[0x1F40FDAF0]();
}

uint64_t VisualEffect.concat<A>(_:)()
{
  return MEMORY[0x1F40FDAF8]();
}

uint64_t _FrameLayout.init(width:height:alignment:)()
{
  return MEMORY[0x1F40FDB00]();
}

uint64_t _GraphInputs.mergedInputs.modify()
{
  return MEMORY[0x1F40FDB08]();
}

uint64_t _GraphInputs.environment.getter()
{
  return MEMORY[0x1F40FDB10]();
}

uint64_t _GraphInputs.environment.setter()
{
  return MEMORY[0x1F40FDB18]();
}

uint64_t _GraphInputs.transaction.getter()
{
  return MEMORY[0x1F40FDB20]();
}

uint64_t _GraphInputs.mapEnvironment<A>(_:)()
{
  return MEMORY[0x1F40FDB28]();
}

uint64_t _GraphInputs.merge(_:ignoringPhase:)()
{
  return MEMORY[0x1F40FDB30]();
}

uint64_t _GraphInputs.phase.getter()
{
  return MEMORY[0x1F40FDB38]();
}

uint64_t _GraphInputs.append<A, B>(_:to:)()
{
  return MEMORY[0x1F40FDB40]();
}

uint64_t _GraphInputs.popLast<A, B>(_:)()
{
  return MEMORY[0x1F40FDB50]();
}

Swift::Void __swiftcall _GraphInputs.convertScrollStateInputsToContent()()
{
}

uint64_t _GraphInputs.tryToReuse(by:indirectMap:testOnly:)()
{
  return MEMORY[0x1F40FDB60]();
}

uint64_t _GraphInputs.makeReusable(indirectMap:)()
{
  return MEMORY[0x1F40FDB68]();
}

uint64_t _GraphInputs.interfaceIdiom.getter()
{
  return MEMORY[0x1F40FDB70]();
}

uint64_t _GraphInputs.pushStableType(_:)()
{
  return MEMORY[0x1F40FDB78]();
}

Swift::Void __swiftcall _GraphInputs.pushStableIndex(_:)(Swift::Int a1)
{
}

uint64_t _GraphInputs.pushStyleContext<A>(_:)()
{
  return MEMORY[0x1F40FDB88]();
}

uint64_t _GraphInputs.scrollPhaseState.getter()
{
  return MEMORY[0x1F40FDB90]();
}

uint64_t _GraphInputs.scrollPhaseState.setter()
{
  return MEMORY[0x1F40FDB98]();
}

uint64_t _GraphInputs.scrollTargetRole.getter()
{
  return MEMORY[0x1F40FDBA0]();
}

uint64_t _GraphInputs.scrollTargetRole.setter()
{
  return MEMORY[0x1F40FDBA8]();
}

uint64_t _GraphInputs.resetScrollPosition(kind:)()
{
  return MEMORY[0x1F40FDBB0]();
}

uint64_t static _GraphInputs.defaultInterfaceIdiom.getter()
{
  return MEMORY[0x1F40FDBB8]();
}

uint64_t _GraphInputs.scrollPositionBinding(kind:)()
{
  return MEMORY[0x1F40FDBC0]();
}

uint64_t _GraphInputs.hasValueScrollPosition(kind:)()
{
  return MEMORY[0x1F40FDBC8]();
}

uint64_t _GraphInputs.updateScrollStateRequest.setter()
{
  return MEMORY[0x1F40FDBD0]();
}

Swift::Void __swiftcall _GraphInputs.resetCurrentStyleableView()()
{
}

uint64_t _GraphInputs.textSelectionRepresentation.setter()
{
  return MEMORY[0x1F40FDBE0]();
}

uint64_t _GraphInputs.scrollTargetRemovePreference.getter()
{
  return MEMORY[0x1F40FDBE8]();
}

uint64_t _GraphInputs.scrollTargetRemovePreference.setter()
{
  return MEMORY[0x1F40FDBF0]();
}

uint64_t _GraphInputs.intern<A>(_:id:)()
{
  return MEMORY[0x1F40FDBF8]();
}

uint64_t _GraphInputs.subscript.setter()
{
  return MEMORY[0x1F40FDC00]();
}

uint64_t _GraphInputs.subscript.getter()
{
  return MEMORY[0x1F40FDC08]();
}

uint64_t type metadata accessor for _LayoutTrait()
{
  return MEMORY[0x1F40FDC10]();
}

uint64_t _ViewList_ID.elementID(at:)()
{
  return MEMORY[0x1F40FDC18]();
}

uint64_t _ViewList_ID.containsID<A>(_:)()
{
  return MEMORY[0x1F40FDC20]();
}

uint64_t _ViewList_ID.explicitID<A>(for:)()
{
  return MEMORY[0x1F40FDC28]();
}

uint64_t _ViewList_ID.init(implicitID:)()
{
  return MEMORY[0x1F40FDC30]();
}

uint64_t _ViewList_ID.canonicalID.getter()
{
  return MEMORY[0x1F40FDC38]();
}

uint64_t _ViewList_ID.allExplicitIDs.getter()
{
  return MEMORY[0x1F40FDC40]();
}

uint64_t _ViewList_ID.reuseIdentifier.getter()
{
  return MEMORY[0x1F40FDC48]();
}

uint64_t static _ViewList_ID.== infix(_:_:)()
{
  return MEMORY[0x1F40FDC50]();
}

uint64_t _ViewList_ID.bind<A>(explicitID:owner:reuseID:)()
{
  return MEMORY[0x1F40FDC58]();
}

uint64_t _ViewList_ID.hash(into:)()
{
  return MEMORY[0x1F40FDC60]();
}

uint64_t type metadata accessor for _ViewList_ID._Views()
{
  return MEMORY[0x1F40FDC68]();
}

uint64_t static _ViewList_ID.explicit<A>(_:)()
{
  return MEMORY[0x1F40FDC70]();
}

uint64_t _ViewList_ID.Canonical.description.getter()
{
  return MEMORY[0x1F40FDC78]();
}

uint64_t static _ViewList_ID.Canonical.== infix(_:_:)()
{
  return MEMORY[0x1F40FDC80]();
}

uint64_t _ViewList_ID.Canonical.hash(into:)()
{
  return MEMORY[0x1F40FDC88]();
}

uint64_t _ViewList_ID.init()()
{
  return MEMORY[0x1F40FDC90]();
}

uint64_t _ViewOutputs.layoutComputer.getter()
{
  return MEMORY[0x1F40FDC98]();
}

uint64_t _ViewOutputs.layoutComputer.setter()
{
  return MEMORY[0x1F40FDCA0]();
}

uint64_t _ViewOutputs.appendPreference<A>(key:value:)()
{
  return MEMORY[0x1F40FDCA8]();
}

uint64_t _ViewOutputs.attachIndirectOutputs(to:)()
{
  return MEMORY[0x1F40FDCB0]();
}

Swift::Void __swiftcall _ViewOutputs.detachIndirectOutputs()()
{
}

uint64_t _ViewOutputs.viewResponders()()
{
  return MEMORY[0x1F40FDCC0]();
}

uint64_t _ViewOutputs.setIndirectDependency(_:)()
{
  return MEMORY[0x1F40FDCC8]();
}

uint64_t _ViewOutputs.applyInterpolatorGroup<A>(_:content:inputs:animatesSize:defersRender:)()
{
  return MEMORY[0x1F40FDCD0]();
}

uint64_t _ViewOutputs.init()()
{
  return MEMORY[0x1F40FDCD8]();
}

uint64_t _ViewOutputs.subscript.getter()
{
  return MEMORY[0x1F40FDCE0]();
}

uint64_t _ViewOutputs.subscript.setter()
{
  return MEMORY[0x1F40FDCE8]();
}

uint64_t onMainThread(do:)()
{
  return MEMORY[0x1F40FDCF0]();
}

uint64_t AnimatorState.update(_:at:environment:)()
{
  return MEMORY[0x1F40FDCF8]();
}

uint64_t AnimatorState.combine(newAnimation:newInterval:at:in:environment:)()
{
  return MEMORY[0x1F40FDD00]();
}

uint64_t AnimatorState.init(animation:interval:at:in:)()
{
  return MEMORY[0x1F40FDD08]();
}

uint64_t type metadata accessor for AnimatorState()
{
  return MEMORY[0x1F40FDD10]();
}

uint64_t AnyShapeStyle.as<A>(type:)()
{
  return MEMORY[0x1F40FDD18]();
}

uint64_t AnyShapeStyle.init<A>(_:)()
{
  return MEMORY[0x1F40FDD20]();
}

uint64_t static AnyTransition.asymmetric(insertion:removal:)()
{
  return MEMORY[0x1F40FDD28]();
}

uint64_t AnyTransition.transaction(_:)()
{
  return MEMORY[0x1F40FDD30]();
}

uint64_t AnyTransition.adjustedForAccessibility(prefersCrossFade:)()
{
  return MEMORY[0x1F40FDD38]();
}

uint64_t AnyTransition.base<A>(as:)()
{
  return MEMORY[0x1F40FDD40]();
}

uint64_t static AnyTransition.move(edge:)()
{
  return MEMORY[0x1F40FDD48]();
}

uint64_t static AnyTransition.opacity.getter()
{
  return MEMORY[0x1F40FDD50]();
}

uint64_t static AnyTransition.identity.getter()
{
  return MEMORY[0x1F40FDD58]();
}

uint64_t AnyTransition.visitBase<A>(applying:)()
{
  return MEMORY[0x1F40FDD60]();
}

uint64_t AnyTransition.visitType<A>(applying:)()
{
  return MEMORY[0x1F40FDD68]();
}

uint64_t AnyTransition.init<A>(_:)()
{
  return MEMORY[0x1F40FDD70]();
}

uint64_t static ArchiveReader.namedImagesKey.getter()
{
  return MEMORY[0x1F40FDD78]();
}

uint64_t static ArchiveReader.cacheKey.getter()
{
  return MEMORY[0x1F40FDD80]();
}

uint64_t ArchiveReader.endIndex.getter()
{
  return MEMORY[0x1F40FDD88]();
}

uint64_t static ArchiveReader.readerKey.getter()
{
  return MEMORY[0x1F40FDD90]();
}

uint64_t type metadata accessor for ArchiveReader()
{
  return MEMORY[0x1F40FDD98]();
}

uint64_t protocol witness for Collection.subscript.read in conformance ArchiveReader()
{
  return MEMORY[0x1F40FDDA0]();
}

uint64_t ArchiveReader.subscript.getter()
{
  return MEMORY[0x1F40FDDA8]();
}

uint64_t ArchiveWriter.addAttachment(data:)()
{
  return MEMORY[0x1F40FDDB0]();
}

uint64_t dispatch thunk of ArchiveWriter.finalize()()
{
  return MEMORY[0x1F40FDDB8]();
}

uint64_t static ArchiveWriter.writerKey.getter()
{
  return MEMORY[0x1F40FDDC0]();
}

uint64_t type metadata accessor for ArchiveWriter()
{
  return MEMORY[0x1F40FDDC8]();
}

uint64_t ColorProvider.apply(color:to:)()
{
  return MEMORY[0x1F40FDDE0]();
}

uint64_t ColorProvider._apply(color:to:)()
{
  return MEMORY[0x1F40FDDE8]();
}

uint64_t ColorProvider.opacity(at:environment:)()
{
  return MEMORY[0x1F40FDDF0]();
}

uint64_t static CountingIndex.== infix(_:_:)()
{
  return MEMORY[0x1F40FDDF8]();
}

uint64_t type metadata accessor for CountingIndex()
{
  return MEMORY[0x1F40FDE00]();
}

uint64_t type metadata accessor for EventListener()
{
  return MEMORY[0x1F40FDE18]();
}

uint64_t GeometryProxy.environment.getter()
{
  return MEMORY[0x1F40FDE20]();
}

uint64_t GeometryProxy.safeAreaInsets.getter()
{
  return MEMORY[0x1F40FDE28]();
}

uint64_t GeometryProxy.frameClippedToScrollViews(in:)()
{
  return MEMORY[0x1F40FDE30]();
}

uint64_t GeometryProxy.size.getter()
{
  return MEMORY[0x1F40FDE38]();
}

uint64_t GeometryProxy.init(owner:size:environment:transform:position:safeAreaInsets:seed:)()
{
  return MEMORY[0x1F40FDE40]();
}

uint64_t GeometryProxy.bounds(of:)()
{
  return MEMORY[0x1F40FDE48]();
}

uint64_t static GeometryProxy.current.getter()
{
  return MEMORY[0x1F40FDE50]();
}

uint64_t GeometryProxy.asCurrent<A>(do:)()
{
  return MEMORY[0x1F40FDE58]();
}

uint64_t GeometryProxy.convert<A>(globalPoint:to:)()
{
  return MEMORY[0x1F40FDE60]();
}

Swift::Void __swiftcall GraphDelegate.beginTransaction()()
{
}

uint64_t GraphicsImage.bitmapOrientation.getter()
{
  return MEMORY[0x1F40FDE70]();
}

uint64_t GraphicsImage.styleResolverMode.getter()
{
  return MEMORY[0x1F40FDE78]();
}

uint64_t static GraphicsImage.== infix(_:_:)()
{
  return MEMORY[0x1F40FDE80]();
}

uint64_t GraphicsImage.size.getter()
{
  return MEMORY[0x1F40FDE88]();
}

uint64_t GraphicsImage.scale.getter()
{
  return MEMORY[0x1F40FDE90]();
}

uint64_t GraphicsImage.redact(in:)()
{
  return MEMORY[0x1F40FDE98]();
}

CGImageRef_optional __swiftcall GraphicsImage.render(at:prefersMask:)(CGSize at, Swift::Bool prefersMask)
{
  return (CGImageRef_optional)MEMORY[0x1F40FDEA0](prefersMask, (__n128)__PAIR128__(v2, *(unint64_t *)&at.width), (__n128)__PAIR128__(v3, *(unint64_t *)&at.height));
}

uint64_t GraphicsImage.init(contents:scale:unrotatedPixelSize:orientation:isTemplate:resizingInfo:antialiased:interpolation:)()
{
  return MEMORY[0x1F40FDEA8]();
}

Swift::Void __swiftcall ImageRenderer.accessSeed()()
{
}

uint64_t LayoutSubview.dimensions(in:)()
{
  return MEMORY[0x1F40FDEC0]();
}

uint64_t LayoutSubview.sizeThatFits(_:)()
{
  return MEMORY[0x1F40FDEC8]();
}

uint64_t LayoutSubview.lengthThatFits(_:in:)()
{
  return MEMORY[0x1F40FDED0]();
}

uint64_t static LayoutSubview.== infix(_:_:)()
{
  return MEMORY[0x1F40FDED8]();
}

uint64_t LayoutSubview.place(at:anchor:dimensions:)()
{
  return MEMORY[0x1F40FDEE0]();
}

uint64_t default argument 1 of LayoutSubview.place(at:anchor:dimensions:)()
{
  return MEMORY[0x1F40FDEE8]();
}

uint64_t LayoutSubview.place(at:anchor:proposal:)()
{
  return MEMORY[0x1F40FDEF0]();
}

uint64_t LayoutSubview.place(in:layoutDirection:)()
{
  return MEMORY[0x1F40FDEF8]();
}

uint64_t LayoutSubview.spacing.getter()
{
  return MEMORY[0x1F40FDF00]();
}

uint64_t static PreferenceKey.visitKey<A>(_:)()
{
  return MEMORY[0x1F40FDF10]();
}

uint64_t static PreferenceKey.readableName.getter()
{
  return MEMORY[0x1F40FDF18]();
}

uint64_t static PreferenceKey._includesRemovedValues.getter()
{
  return MEMORY[0x1F40FDF20]();
}

uint64_t static PreferenceKey._delay<A>(_:)()
{
  return MEMORY[0x1F40FDF28]();
}

uint64_t type metadata accessor for PreviewLayout()
{
  return MEMORY[0x1F40E0698]();
}

uint64_t dispatch thunk of ResponderNode.nextResponder.getter()
{
  return MEMORY[0x1F40FDF30]();
}

uint64_t dispatch thunk of ResponderNode.makeGesture(inputs:)()
{
  return MEMORY[0x1F40FDF38]();
}

uint64_t dispatch thunk of ResponderNode.resetGesture()()
{
  return MEMORY[0x1F40FDF40]();
}

uint64_t ResponderNode.firstAncestor<A>(ofType:)()
{
  return MEMORY[0x1F40FDF48]();
}

uint64_t dispatch thunk of ResponderNode.visit(applying:)()
{
  return MEMORY[0x1F40FDF50]();
}

uint64_t ResponderNode.sequence.getter()
{
  return MEMORY[0x1F40FDF58]();
}

uint64_t dispatch thunk of ResponderNode.bindEvent(_:)()
{
  return MEMORY[0x1F40FDF60]();
}

uint64_t type metadata accessor for ResponderNode()
{
  return MEMORY[0x1F40FDF68]();
}

uint64_t method lookup function for ResponderNode()
{
  return MEMORY[0x1F40FDF70]();
}

uint64_t static StyleModifier._viewListCount(inputs:body:)()
{
  return MEMORY[0x1F40FDF80]();
}

uint64_t static StyleableView._viewListCount(inputs:)()
{
  return MEMORY[0x1F40FDFA0]();
}

uint64_t TextAlignment.value.getter()
{
  return MEMORY[0x1F40FDFA8]();
}

uint64_t static TintPlacement.switchThumb.getter()
{
  return MEMORY[0x1F40FDFB0]();
}

uint64_t TransactionID.init(graph:)()
{
  return MEMORY[0x1F40FDFB8]();
}

uint64_t TransactionID.init<A>(context:)()
{
  return MEMORY[0x1F40FDFC0]();
}

uint64_t static ViewResponder.hitTestKey.getter()
{
  return MEMORY[0x1F40FDFC8]();
}

uint64_t dispatch thunk of ViewResponder.addContentPath(to:kind:in:observer:)()
{
  return MEMORY[0x1F40FDFD0]();
}

uint64_t dispatch thunk of ViewResponder.extendPrintTree(string:)()
{
  return MEMORY[0x1F40FDFD8]();
}

uint64_t dispatch thunk of ViewResponder.gestureContainer.getter()
{
  return MEMORY[0x1F40FDFE0]();
}

uint64_t ViewResponder.containsGlobalPoints(_:cacheKey:options:)()
{
  return MEMORY[0x1F40FDFE8]();
}

uint64_t dispatch thunk of ViewResponder.containsGlobalPoints(_:cacheKey:options:)()
{
  return MEMORY[0x1F40FDFF0]();
}

uint64_t ViewResponder.hitTest(globalPoint:radius:cacheKey:options:)()
{
  return MEMORY[0x1F40FDFF8]();
}

uint64_t dispatch thunk of ViewResponder.children.getter()
{
  return MEMORY[0x1F40FE000]();
}

uint64_t type metadata accessor for ViewResponder()
{
  return MEMORY[0x1F40FE008]();
}

uint64_t method lookup function for ViewResponder()
{
  return MEMORY[0x1F40FE010]();
}

uint64_t ViewSizeCache.get(_:makeValue:)()
{
  return MEMORY[0x1F40FE018]();
}

uint64_t ViewSizeCache.init(cache:)()
{
  return MEMORY[0x1F40FE020]();
}

uint64_t default argument 0 of ViewSizeCache.init(cache:)()
{
  return MEMORY[0x1F40FE028]();
}

Swift::Void __swiftcall ViewTransform.appendAffineTransform(_:inverse:)(CGAffineTransform *_, Swift::Bool inverse)
{
}

uint64_t ViewTransform.appendProjectionTransform(_:inverse:)()
{
  return MEMORY[0x1F40FE038]();
}

uint64_t ViewTransform.UnsafeBuffer.appendProjectionTransform(_:inverse:)()
{
  return MEMORY[0x1F40FE040]();
}

uint64_t ViewTransform.UnsafeBuffer.appendSizedSpace(id:size:)()
{
  return MEMORY[0x1F40FE048]();
}

Swift::Void __swiftcall ViewTransform.UnsafeBuffer.appendTranslation(_:)(CGSize a1)
{
  MEMORY[0x1F40FE050]((__n128)__PAIR128__(v1, *(unint64_t *)&a1.width), (__n128)__PAIR128__(v2, *(unint64_t *)&a1.height));
}

uint64_t ViewTransform.UnsafeBuffer.appendScrollGeometry(_:isClipped:)()
{
  return MEMORY[0x1F40FE058]();
}

uint64_t ViewTransform.UnsafeBuffer.appendCoordinateSpace(id:)()
{
  return MEMORY[0x1F40FE060]();
}

uint64_t ViewTransform.withPosition(_:)()
{
  return MEMORY[0x1F40FE068]();
}

Swift::Void __swiftcall ViewTransform.resetPosition(_:)(CGPoint a1)
{
  MEMORY[0x1F40FE070]((__n128)__PAIR128__(v1, *(unint64_t *)&a1.x), (__n128)__PAIR128__(v2, *(unint64_t *)&a1.y));
}

uint64_t ViewTransform.appendPosition(_:scale:)()
{
  return MEMORY[0x1F40FE078]();
}

Swift::Void __swiftcall ViewTransform.appendPosition(_:)(CGPoint a1)
{
  MEMORY[0x1F40FE080]((__n128)__PAIR128__(v1, *(unint64_t *)&a1.x), (__n128)__PAIR128__(v2, *(unint64_t *)&a1.y));
}

uint64_t ViewTransform.appendSizedSpace(id:size:)()
{
  return MEMORY[0x1F40FE088]();
}

uint64_t ViewTransform.appendSizedSpace(name:size:)()
{
  return MEMORY[0x1F40FE090]();
}

uint64_t ViewTransform.positionAdjustment.getter()
{
  return MEMORY[0x1F40FE098]();
}

uint64_t ViewTransform.appendCoordinateSpace(name:)()
{
  return MEMORY[0x1F40FE0A0]();
}

uint64_t ViewTransform.nearestScrollGeometry.getter()
{
  return MEMORY[0x1F40FE0A8]();
}

uint64_t ViewTransform.containingScrollGeometry.getter()
{
  return MEMORY[0x1F40FE0B0]();
}

uint64_t ViewTransform.append(movingContentsOf:)()
{
  return MEMORY[0x1F40FE0B8]();
}

uint64_t ViewTransform.convert(_:point:)()
{
  return MEMORY[0x1F40FE0C0]();
}

uint64_t ViewTransform.convert(_:points:)()
{
  return MEMORY[0x1F40FE0C8]();
}

uint64_t ViewTransform.forEach(inverted:_:)()
{
  return MEMORY[0x1F40FE0D0]();
}

uint64_t ViewTransform.init()()
{
  return MEMORY[0x1F40FE0D8]();
}

uint64_t type metadata accessor for _EndedGesture()
{
  return MEMORY[0x1F40FE0E0]();
}

uint64_t static _LayoutTraits.FlexibilityEstimate.< infix(_:_:)()
{
  return MEMORY[0x1F40FE0E8]();
}

uint64_t _LayoutTraits.FlexibilityEstimate.init(minLength:maxLength:)()
{
  return MEMORY[0x1F40FE0F0]();
}

uint64_t _LayoutTraits.init(width:height:)()
{
  return MEMORY[0x1F40FE0F8]();
}

uint64_t _LayoutTraits.Dimension.max.setter()
{
  return MEMORY[0x1F40FE100]();
}

uint64_t _LayoutTraits.Dimension.min.getter()
{
  return MEMORY[0x1F40FE108]();
}

uint64_t _LayoutTraits.Dimension.min.setter()
{
  return MEMORY[0x1F40FE110]();
}

uint64_t _LayoutTraits.Dimension.init(min:ideal:max:)()
{
  return MEMORY[0x1F40FE118]();
}

uint64_t static _LayoutTraits.Dimension.fixed(_:)()
{
  return MEMORY[0x1F40FE120]();
}

uint64_t _LayoutTraits.Dimension.ideal.setter()
{
  return MEMORY[0x1F40FE128]();
}

uint64_t _LayoutTraits.maxSize.setter()
{
  return MEMORY[0x1F40FE130]();
}

uint64_t _LayoutTraits.minSize.setter()
{
  return MEMORY[0x1F40FE138]();
}

uint64_t _LayoutTraits.idealSize.modify()
{
  return MEMORY[0x1F40FE140]();
}

uint64_t _LayoutTraits.idealSize.getter()
{
  return MEMORY[0x1F40FE148]();
}

uint64_t _LayoutTraits.idealSize.setter()
{
  return MEMORY[0x1F40FE150]();
}

uint64_t static _ProposedSize.unspecified.getter()
{
  return MEMORY[0x1F40FE158]();
}

CGSize __swiftcall _ProposedSize.fixingUnspecifiedDimensions(at:)(CGSize at)
{
  MEMORY[0x1F40FE160]((__n128)__PAIR128__(v1, *(unint64_t *)&at.width), (__n128)__PAIR128__(v2, *(unint64_t *)&at.height));
  result.double height = v4;
  result.double width = v3;
  return result;
}

CGSize __swiftcall _ProposedSize.fixingUnspecifiedDimensions()()
{
  MEMORY[0x1F40FE168]();
  result.double height = v1;
  result.double width = v0;
  return result;
}

uint64_t static _ProposedSize.== infix(_:_:)()
{
  return MEMORY[0x1F40FE170]();
}

uint64_t static _ProposedSize.zero.getter()
{
  return MEMORY[0x1F40FE178]();
}

uint64_t _ProposedSize.width.getter()
{
  return MEMORY[0x1F40FE180]();
}

uint64_t _ProposedSize.width.setter()
{
  return MEMORY[0x1F40FE188]();
}

uint64_t _ProposedSize.init(width:height:)()
{
  return MEMORY[0x1F40FE190]();
}

uint64_t _ProposedSize.height.getter()
{
  return MEMORY[0x1F40FE198]();
}

uint64_t _ProposedSize.height.setter()
{
  return MEMORY[0x1F40FE1A0]();
}

uint64_t _ProposedSize.scaled(by:)()
{
  return MEMORY[0x1F40FE1A8]();
}

uint64_t static _ProposedSize.infinity.getter()
{
  return MEMORY[0x1F40FE1B0]();
}

uint64_t _ProposedSize.inset(by:)()
{
  return MEMORY[0x1F40FE1B8]();
}

uint64_t _ProposedSize.init(_:in:by:)()
{
  return MEMORY[0x1F40FE1C0]();
}

uint64_t _ProposedSize.subscript.setter()
{
  return MEMORY[0x1F40FE1C8]();
}

uint64_t _ProposedSize.init(_:)()
{
  return MEMORY[0x1F40FE1D0]();
}

{
  return MEMORY[0x1F40FE1D8]();
}

uint64_t _ScrollLayout.visibleRect.getter()
{
  return MEMORY[0x1F40FE1E0]();
}

uint64_t _ScrollLayout.init(contentOffset:size:visibleRect:)()
{
  return MEMORY[0x1F40FE1E8]();
}

uint64_t _ScrollLayout.contentOffset.getter()
{
  return MEMORY[0x1F40FE1F0]();
}

uint64_t _ScrollLayout.size.getter()
{
  return MEMORY[0x1F40FE1F8]();
}

uint64_t _ShadowEffect.resolve(in:)()
{
  return MEMORY[0x1F40FE200]();
}

uint64_t _StrokedShape.init(shape:style:)()
{
  return MEMORY[0x1F40FE208]();
}

uint64_t type metadata accessor for _StrokedShape()
{
  return MEMORY[0x1F40FE210]();
}

uint64_t static _SymbolEffect.ScaleConfiguration.== infix(_:_:)()
{
  return MEMORY[0x1F40FE218]();
}

uint64_t _SymbolEffect.ScaleConfiguration.level.setter()
{
  return MEMORY[0x1F40FE220]();
}

uint64_t _SymbolEffect.ScaleConfiguration.init()()
{
  return MEMORY[0x1F40FE228]();
}

uint64_t _SymbolEffect.BounceConfiguration.flags.modify()
{
  return MEMORY[0x1F40FE230]();
}

uint64_t _SymbolEffect.BounceConfiguration.flags.setter()
{
  return MEMORY[0x1F40FE238]();
}

uint64_t _SymbolEffect.BounceConfiguration.init()()
{
  return MEMORY[0x1F40FE240]();
}

uint64_t _SymbolEffect.HiddenConfiguration.transitionFlags.getter()
{
  return MEMORY[0x1F40FE248]();
}

uint64_t static _SymbolEffect.HiddenConfiguration.== infix(_:_:)()
{
  return MEMORY[0x1F40FE250]();
}

uint64_t _SymbolEffect.HiddenConfiguration.flags.setter()
{
  return MEMORY[0x1F40FE258]();
}

uint64_t _SymbolEffect.HiddenConfiguration.init()()
{
  return MEMORY[0x1F40FE260]();
}

uint64_t _SymbolEffect.RotateConfiguration.flags.modify()
{
  return MEMORY[0x1F40FE268]();
}

uint64_t _SymbolEffect.RotateConfiguration.flags.setter()
{
  return MEMORY[0x1F40FE270]();
}

uint64_t _SymbolEffect.RotateConfiguration.init()()
{
  return MEMORY[0x1F40FE278]();
}

uint64_t static _SymbolEffect.WiggleConfiguration.== infix(_:_:)()
{
  return MEMORY[0x1F40FE280]();
}

uint64_t _SymbolEffect.WiggleConfiguration.flags.modify()
{
  return MEMORY[0x1F40FE288]();
}

uint64_t _SymbolEffect.WiggleConfiguration.flags.setter()
{
  return MEMORY[0x1F40FE290]();
}

uint64_t _SymbolEffect.WiggleConfiguration.init()()
{
  return MEMORY[0x1F40FE298]();
}

uint64_t _SymbolEffect.BreatheConfiguration.flags.modify()
{
  return MEMORY[0x1F40FE2A0]();
}

uint64_t _SymbolEffect.BreatheConfiguration.init()()
{
  return MEMORY[0x1F40FE2A8]();
}

uint64_t static _SymbolEffect.ReplaceConfiguration.== infix(_:_:)()
{
  return MEMORY[0x1F40FE2B0]();
}

uint64_t _SymbolEffect.ReplaceConfiguration.flags.modify()
{
  return MEMORY[0x1F40FE2B8]();
}

uint64_t _SymbolEffect.ReplaceConfiguration.flags.setter()
{
  return MEMORY[0x1F40FE2C0]();
}

uint64_t _SymbolEffect.ReplaceConfiguration.init()()
{
  return MEMORY[0x1F40FE2C8]();
}

uint64_t static _SymbolEffect.VariableColorConfiguration.== infix(_:_:)()
{
  return MEMORY[0x1F40FE2D0]();
}

uint64_t _SymbolEffect.VariableColorConfiguration.flags.modify()
{
  return MEMORY[0x1F40FE2D8]();
}

uint64_t _SymbolEffect.VariableColorConfiguration.flags.setter()
{
  return MEMORY[0x1F40FE2E0]();
}

uint64_t _SymbolEffect.VariableColorConfiguration.init()()
{
  return MEMORY[0x1F40FE2E8]();
}

uint64_t _SymbolEffect.init(from:)()
{
  return MEMORY[0x1F40FE2F0]();
}

uint64_t _SymbolEffect.encode(to:)()
{
  return MEMORY[0x1F40FE2F8]();
}

uint64_t static _SymbolEffect.Storage.== infix(_:_:)()
{
  return MEMORY[0x1F40FE300]();
}

uint64_t static _SymbolEffect.Trigger.== infix(_:_:)()
{
  return MEMORY[0x1F40FE308]();
}

uint64_t _VariadicView.Tree.init(root:content:)()
{
  return MEMORY[0x1F40FE310]();
}

uint64_t static _VariadicView.Tree<>._makeView(view:inputs:)()
{
  return MEMORY[0x1F40FE318]();
}

uint64_t static _VariadicView.Tree<>._makeViewList(view:inputs:)()
{
  return MEMORY[0x1F40FE320]();
}

uint64_t static _VariadicView.Tree<>._viewListCount(inputs:)()
{
  return MEMORY[0x1F40FE328]();
}

uint64_t type metadata accessor for _VariadicView.Tree()
{
  return MEMORY[0x1F40FE330]();
}

uint64_t _VariadicView.Tree.init(_:content:)()
{
  return MEMORY[0x1F40FE338]();
}

uint64_t withAnimation<A>(_:_:)()
{
  return MEMORY[0x1F40FE340]();
}

uint64_t AlignmentGuide.fraction.getter()
{
  return MEMORY[0x1F40FE348]();
}

uint64_t AnchorGeometry.init(position:size:transform:)()
{
  return MEMORY[0x1F40FE350]();
}

uint64_t AnchorGeometry.transform.getter()
{
  return MEMORY[0x1F40FE358]();
}

uint64_t type metadata accessor for AnimatablePair()
{
  return MEMORY[0x1F40FE360]();
}

uint64_t AnimatablePair.subscript.getter()
{
  return MEMORY[0x1F40FE368]();
}

uint64_t AnimatablePair.init(_:_:)()
{
  return MEMORY[0x1F40FE370]();
}

uint64_t static GeometryEffect.makeGeometryEffect(modifier:inputs:body:)()
{
  return MEMORY[0x1F40FE398]();
}

uint64_t static GeometryEffect._viewListCount(inputs:body:)()
{
  return MEMORY[0x1F40FE3A8]();
}

uint64_t GeometryReader.init(content:)()
{
  return MEMORY[0x1F40FE3B8]();
}

uint64_t type metadata accessor for GeometryReader()
{
  return MEMORY[0x1F40FE3C0]();
}

uint64_t static LayoutComputer.defaultValue.getter()
{
  return MEMORY[0x1F40FE3C8]();
}

uint64_t LayoutComputer.sizeThatFits(_:)()
{
  return MEMORY[0x1F40FE3D0]();
}

Swift::Double __swiftcall LayoutComputer.layoutPriority()()
{
  MEMORY[0x1F40FE3D8]();
  return result;
}

uint64_t LayoutComputer.explicitAlignment(_:at:)()
{
  return MEMORY[0x1F40FE3E0]();
}

uint64_t static LayoutComputer.== infix(_:_:)()
{
  return MEMORY[0x1F40FE3E8]();
}

uint64_t LayoutComputer.spacing()()
{
  return MEMORY[0x1F40FE3F0]();
}

uint64_t LayoutSubviews.endIndex.getter()
{
  return MEMORY[0x1F40FE3F8]();
}

uint64_t LayoutSubviews.subscript.getter()
{
  return MEMORY[0x1F40FE400]();
}

uint64_t static LeafViewLayout.makeLeafLayout(_:view:inputs:)()
{
  return MEMORY[0x1F40FE408]();
}

uint64_t ObservedObject.init(wrappedValue:)()
{
  return MEMORY[0x1F40FE410]();
}

uint64_t ObservedObject.projectedValue.getter()
{
  return MEMORY[0x1F40FE418]();
}

uint64_t ObservedObject.Wrapper.subscript.getter()
{
  return MEMORY[0x1F40FE420]();
}

uint64_t static PreferenceKeys.== infix(_:_:)()
{
  return MEMORY[0x1F40FE428]();
}

uint64_t PreferenceKeys.add(_:)()
{
  return MEMORY[0x1F40FE430]();
}

uint64_t PreferenceKeys.remove(_:)()
{
  return MEMORY[0x1F40FE438]();
}

uint64_t PreferenceKeys.contains(_:)()
{
  return MEMORY[0x1F40FE440]();
}

uint64_t PreferenceKeys.endIndex.getter()
{
  return MEMORY[0x1F40FE448]();
}

uint64_t PreferenceKeys.init()()
{
  return MEMORY[0x1F40FE450]();
}

uint64_t protocol witness for Collection.subscript.read in conformance PreferenceKeys()
{
  return MEMORY[0x1F40FE458]();
}

uint64_t static RendererEffect.makeRendererEffect(effect:inputs:body:)()
{
  return MEMORY[0x1F40FE460]();
}

uint64_t static RendererEffect._viewListCount(inputs:body:)()
{
  return MEMORY[0x1F40FE468]();
}

uint64_t ScrollGeometry.targetRect(edge:)()
{
  return MEMORY[0x1F40FE478]();
}

uint64_t ScrollGeometry.contentSize.getter()
{
  return MEMORY[0x1F40FE480]();
}

uint64_t ScrollGeometry.contentSize.setter()
{
  return MEMORY[0x1F40FE488]();
}

Swift::Void __swiftcall ScrollGeometry.outsetForAX(limit:)(CGSize limit)
{
  MEMORY[0x1F40FE490]((__n128)__PAIR128__(v1, *(unint64_t *)&limit.width), (__n128)__PAIR128__(v2, *(unint64_t *)&limit.height));
}

uint64_t ScrollGeometry.visibleRect.getter()
{
  return MEMORY[0x1F40FE498]();
}

uint64_t ScrollGeometry.containerSize.getter()
{
  return MEMORY[0x1F40FE4A0]();
}

uint64_t ScrollGeometry.containerSize.setter()
{
  return MEMORY[0x1F40FE4A8]();
}

uint64_t ScrollGeometry.init(contentOffset:contentSize:contentInsets:containerSize:visibleRect:)()
{
  return MEMORY[0x1F40FE4B0]();
}

uint64_t ScrollGeometry.init(contentOffset:contentSize:contentInsets:containerSize:)()
{
  return MEMORY[0x1F40FE4B8]();
}

uint64_t ScrollGeometry.contentOffset.getter()
{
  return MEMORY[0x1F40FE4C0]();
}

uint64_t ScrollGeometry.contentOffset.setter()
{
  return MEMORY[0x1F40FE4C8]();
}

uint64_t static ScrollGeometry.viewTransform(contentInsets:contentSize:containerSize:)()
{
  return MEMORY[0x1F40FE4D0]();
}

uint64_t static ScrollGeometry.rootViewTransform(contentOffset:containerSize:)()
{
  return MEMORY[0x1F40FE4D8]();
}

uint64_t ScrollGeometry.applyLayoutDirection(_:contentSize:)()
{
  return MEMORY[0x1F40FE4E0]();
}

uint64_t static ScrollGeometry.size(_:)()
{
  return MEMORY[0x1F40FE4E8]();
}

uint64_t static ScrollGeometry.zero.getter()
{
  return MEMORY[0x1F40FE4F0]();
}

uint64_t ScrollGeometry.bounds.getter()
{
  return MEMORY[0x1F40FE4F8]();
}

Swift::Void __swiftcall ScrollGeometry.translate(by:limit:)(CGSize by, CGSize limit)
{
  MEMORY[0x1F40FE500]((__n128)__PAIR128__(v2, *(unint64_t *)&by.width), (__n128)__PAIR128__(v3, *(unint64_t *)&by.height), (__n128)__PAIR128__(v4, *(unint64_t *)&limit.width), (__n128)__PAIR128__(v5, *(unint64_t *)&limit.height));
}

uint64_t ScrollPosition.init<A>(id:anchor:)()
{
  return MEMORY[0x1F40FE508]();
}

uint64_t ScrollPosition.matches<A>(id:)()
{
  return MEMORY[0x1F40FE510]();
}

uint64_t type metadata accessor for SpeechModifier()
{
  return MEMORY[0x1F40FE518]();
}

uint64_t StateOrBinding.init(wrappedValue:)()
{
  return MEMORY[0x1F40FE520]();
}

uint64_t StateOrBinding.projectedValue.getter()
{
  return MEMORY[0x1F40FE528]();
}

uint64_t type metadata accessor for StateOrBinding()
{
  return MEMORY[0x1F40FE530]();
}

uint64_t StoredLocation.__allocating_init(initialValue:host:signal:)()
{
  return MEMORY[0x1F40FE538]();
}

uint64_t StoredLocation.update()()
{
  return MEMORY[0x1F40FE540]();
}

uint64_t type metadata accessor for StoredLocation()
{
  return MEMORY[0x1F40FE548]();
}

uint64_t static SymbolVariants.== infix(_:_:)()
{
  return MEMORY[0x1F40FE550]();
}

uint64_t SymbolVariants.fill.getter()
{
  return MEMORY[0x1F40FE558]();
}

uint64_t static SymbolVariants.fill.getter()
{
  return MEMORY[0x1F40FE560]();
}

uint64_t static SymbolVariants.none.getter()
{
  return MEMORY[0x1F40FE568]();
}

uint64_t static SymbolVariants.circle.getter()
{
  return MEMORY[0x1F40FE570]();
}

uint64_t SymbolVariants.formUnion(_:)()
{
  return MEMORY[0x1F40FE578]();
}

uint64_t TintShapeStyle._apply(to:)()
{
  return MEMORY[0x1F40FE580]();
}

uint64_t ViewDimensions.init(guideComputer:size:proposal:)()
{
  return MEMORY[0x1F40FE590]();
}

uint64_t ViewDimensions.width.getter()
{
  return MEMORY[0x1F40FE598]();
}

uint64_t ViewDimensions.height.getter()
{
  return MEMORY[0x1F40FE5A0]();
}

uint64_t ViewDimensions.subscript.getter()
{
  return MEMORY[0x1F40FE5A8]();
}

{
  return MEMORY[0x1F40FE5B8]();
}

{
  return MEMORY[0x1F40FE5C0]();
}

{
  return MEMORY[0x1F40FE5C8]();
}

{
  return MEMORY[0x1F40FE5D0]();
}

uint64_t static ViewDimensions.invalidValue.getter()
{
  return MEMORY[0x1F40FE5B0]();
}

uint64_t _BenchmarkHost.measureAction(action:)()
{
  return MEMORY[0x1F40FE5D8]();
}

Swift::Double __swiftcall _BenchmarkHost.measureRender(interval:)(Swift::Double interval)
{
  MEMORY[0x1F40FE5E0](interval);
  return result;
}

uint64_t _BenchmarkHost.measureRenders(seconds:)()
{
  return MEMORY[0x1F40FE5E8]();
}

uint64_t _BenchmarkHost.viewForIdentifier<A, B>(_:_:)()
{
  return MEMORY[0x1F40FE5F0]();
}

uint64_t _BenchmarkHost.stateForIdentifier<A, B, C>(_:type:in:)()
{
  return MEMORY[0x1F40FE5F8]();
}

uint64_t _GestureInputs.mergeViewInputs(_:viewSubgraph:)()
{
  return MEMORY[0x1F40FE600]();
}

uint64_t _GestureInputs.animatedPosition()()
{
  return MEMORY[0x1F40FE608]();
}

uint64_t _GestureInputs.makeDefaultOutputs<A>()()
{
  return MEMORY[0x1F40FE610]();
}

uint64_t _GestureInputs.size.getter()
{
  return MEMORY[0x1F40FE618]();
}

uint64_t _GestureInputs.events.getter()
{
  return MEMORY[0x1F40FE620]();
}

uint64_t _GestureInputs.events.setter()
{
  return MEMORY[0x1F40FE628]();
}

uint64_t _GestureInputs.position.getter()
{
  return MEMORY[0x1F40FE630]();
}

uint64_t _GestureInputs.resetSeed.getter()
{
  return MEMORY[0x1F40FE638]();
}

uint64_t _GestureInputs.transform.getter()
{
  return MEMORY[0x1F40FE640]();
}

uint64_t _ViewList_Node.applyNodes(from:style:transform:to:)()
{
  return MEMORY[0x1F40FE648]();
}

uint64_t _ViewList_Node.firstOffset<A>(forID:style:)()
{
  return MEMORY[0x1F40FE650]();
}

uint64_t _ViewList_Node.estimatedCount(style:)()
{
  return MEMORY[0x1F40FE658]();
}

uint64_t enableProfiler.getter()
{
  return MEMORY[0x1F40FE660]();
}

uint64_t static AnyFontModifier.static<A>(_:)()
{
  return MEMORY[0x1F40FE668]();
}

uint64_t type metadata accessor for AnyFontModifier()
{
  return MEMORY[0x1F40FE670]();
}

uint64_t ContainerValues.tag<A>(for:)()
{
  return MEMORY[0x1F40FE678]();
}

uint64_t default argument 0 of ContainerValues.init(base:)()
{
  return MEMORY[0x1F40FE680]();
}

uint64_t ContainerValues.subscript.getter()
{
  return MEMORY[0x1F40FE688]();
}

uint64_t ContainerValues.subscript.setter()
{
  return MEMORY[0x1F40FE690]();
}

uint64_t CoordinateSpace.ID.init()()
{
  return MEMORY[0x1F40FE698]();
}

uint64_t static CoordinateSpace.scrollViewContent.getter()
{
  return MEMORY[0x1F40FE6A0]();
}

uint64_t static CoordinateSpace.scrollViewSafeArea.getter()
{
  return MEMORY[0x1F40FE6A8]();
}

uint64_t DistanceGesture.init(minimumDistance:maximumDistance:)()
{
  return MEMORY[0x1F40FE6B0]();
}

uint64_t default argument 0 of DistanceGesture.init(minimumDistance:maximumDistance:)()
{
  return MEMORY[0x1F40FE6B8]();
}

uint64_t static DynamicProperty.addTreeValue<A, B>(_:as:at:in:flags:)()
{
  return MEMORY[0x1F40FE6C8]();
}

Swift::Void __swiftcall DynamicProperty.update()()
{
}

uint64_t DynamicTypeSize.ctTextSize.getter()
{
  return MEMORY[0x1F40FE6E0]();
}

uint64_t GraphicsContext.translateBy(x:y:)()
{
  return MEMORY[0x1F40FE6E8]();
}

uint64_t GraphicsContext.clip(to:style:options:)()
{
  return MEMORY[0x1F40FE6F0]();
}

uint64_t static GraphicsContext.renderingTo(cgContext:environment:deviceScale:content:)()
{
  return MEMORY[0x1F40FE6F8]();
}

uint64_t default argument 1 of static GraphicsContext.renderingTo(cgContext:environment:deviceScale:content:)()
{
  return MEMORY[0x1F40FE700]();
}

uint64_t GraphicsContext.draw(_:in:style:shading:)()
{
  return MEMORY[0x1F40FE708]();
}

uint64_t type metadata accessor for HashableWeakBox()
{
  return MEMORY[0x1F40FE710]();
}

uint64_t LinkDestination.Configuration.url.getter()
{
  return MEMORY[0x1F40FE718]();
}

uint64_t LinkDestination.Configuration.init(url:isSensitive:)()
{
  return MEMORY[0x1F40FE720]();
}

uint64_t type metadata accessor for LinkDestination.Configuration()
{
  return MEMORY[0x1F40FE728]();
}

uint64_t LinkDestination.init(configuration:)()
{
  return MEMORY[0x1F40FE730]();
}

Swift::Void __swiftcall LinkDestination.open()()
{
}

uint64_t type metadata accessor for LinkDestination()
{
  return MEMORY[0x1F40FE740]();
}

uint64_t ModifiedContent.init(content:modifier:)()
{
  return MEMORY[0x1F40FE748]();
}

uint64_t static ModifiedContent<>._makeView(view:inputs:)()
{
  return MEMORY[0x1F40FE750]();
}

uint64_t static ModifiedContent<>._makeViewList(view:inputs:)()
{
  return MEMORY[0x1F40FE758]();
}

uint64_t static ModifiedContent<>._viewListCount(inputs:)()
{
  return MEMORY[0x1F40FE760]();
}

uint64_t type metadata accessor for ModifiedContent()
{
  return MEMORY[0x1F40FE768]();
}

uint64_t type metadata accessor for ModifierGesture()
{
  return MEMORY[0x1F40FE770]();
}

uint64_t type metadata accessor for ProtobufCodable()
{
  return MEMORY[0x1F40FE778]();
}

uint64_t ProtobufDecoder.messageField<A>(_:)()
{
  return MEMORY[0x1F40FE780]();
}

uint64_t ProtobufDecoder.skipField(_:)()
{
  return MEMORY[0x1F40FE788]();
}

uint64_t ProtobufDecoder.init(_:)()
{
  return MEMORY[0x1F40FE790]();
}

uint64_t ProtobufEncoder.cgFloatField(_:_:defaultValue:)()
{
  return MEMORY[0x1F40FE798]();
}

uint64_t ProtobufEncoder.messageField<A>(_:_:)()
{
  return MEMORY[0x1F40FE7A0]();
}

uint64_t static ProtobufEncoder.encoding<A>(_:)()
{
  return MEMORY[0x1F40FE7A8]();
}

uint64_t static ProtobufEncoder.encoding(_:)()
{
  return MEMORY[0x1F40FE7B0]();
}

uint64_t ResolvableTimer.interval.getter()
{
  return MEMORY[0x1F40FE7B8]();
}

uint64_t static ResolvableTimer.attribute.getter()
{
  return MEMORY[0x1F40FE7C0]();
}

uint64_t type metadata accessor for ResolvableTimer()
{
  return MEMORY[0x1F40FE7C8]();
}

uint64_t static SemanticFeature.isEnabled.getter()
{
  return MEMORY[0x1F40FE7D0]();
}

uint64_t type metadata accessor for StrokeShapeView()
{
  return MEMORY[0x1F40FE7D8]();
}

uint64_t static TupleDescriptor.tupleDescription(_:)()
{
  return MEMORY[0x1F40FE7E0]();
}

uint64_t type metadata accessor for _BackdropEffect()
{
  return MEMORY[0x1F40FE7E8]();
}

uint64_t type metadata accessor for _ChangedGesture()
{
  return MEMORY[0x1F40FE7F0]();
}

uint64_t _GestureOutputs.overrideDefaultValues(_:)()
{
  return MEMORY[0x1F40FE7F8]();
}

uint64_t _GestureOutputs.phase.getter()
{
  return MEMORY[0x1F40FE800]();
}

uint64_t _GestureOutputs.phase.setter()
{
  return MEMORY[0x1F40FE808]();
}

uint64_t _GestureOutputs.init(phase:)()
{
  return MEMORY[0x1F40FE810]();
}

uint64_t _GestureOutputs.withPhase<A>(_:)()
{
  return MEMORY[0x1F40FE818]();
}

uint64_t _GestureOutputs.wrapDebugOutputs<A, B, C>(_:kind:properties:inputs:combiningOutputs:)()
{
  return MEMORY[0x1F40FE820]();
}

uint64_t type metadata accessor for _GestureOutputs()
{
  return MEMORY[0x1F40FE828]();
}

uint64_t static _RendererEffect._makeRendererEffect(effect:inputs:body:)()
{
  return MEMORY[0x1F40FE830]();
}

uint64_t static _RendererEffect.isolatesChildPosition.getter()
{
  return MEMORY[0x1F40FE848]();
}

uint64_t static _RendererEffect.preservesEmptyContent.getter()
{
  return MEMORY[0x1F40FE850]();
}

uint64_t _ViewListInputs.addTraitKey<A>(_:)()
{
  return MEMORY[0x1F40FE858]();
}

uint64_t _ViewListInputs.traits.getter()
{
  return MEMORY[0x1F40FE860]();
}

uint64_t _ViewListInputs.traits.setter()
{
  return MEMORY[0x1F40FE868]();
}

uint64_t _ViewListInputs.init(_:options:)()
{
  return MEMORY[0x1F40FE870]();
}

uint64_t _ViewListInputs.init(_:)()
{
  return MEMORY[0x1F40FE878]();
}

uint64_t _ViewList_Group.applyNodes(from:style:transform:to:)()
{
  return MEMORY[0x1F40FE880]();
}

uint64_t readEnvironment(_:_:)()
{
  return MEMORY[0x1F40FE888]();
}

uint64_t withTransaction<A>(_:_:)()
{
  return MEMORY[0x1F40FE890]();
}

uint64_t AnimationContext.init(state:environment:)()
{
  return MEMORY[0x1F40FE898]();
}

uint64_t AnimationContext.state.getter()
{
  return MEMORY[0x1F40FE8A0]();
}

uint64_t type metadata accessor for AnimationContext()
{
  return MEMORY[0x1F40FE8A8]();
}

uint64_t dispatch thunk of AnyShapeStyleBox.apply(to:)()
{
  return MEMORY[0x1F40FE8B0]();
}

uint64_t dispatch thunk of AnyShapeStyleBox.isEqual(to:)()
{
  return MEMORY[0x1F40FE8B8]();
}

Swift::Void __swiftcall AppearanceEffect.updateValue()()
{
}

uint64_t AppearanceEffect.init(modifier:phase:)()
{
  return MEMORY[0x1F40FE8C8]();
}

uint64_t static ArchivedViewCore.archivedViewHostKey.getter()
{
  return MEMORY[0x1F40FE8D0]();
}

uint64_t static ArchivedViewCore.rbEncoderSetKey.getter()
{
  return MEMORY[0x1F40FE8D8]();
}

uint64_t static ArchivedViewCore.archiveOptionsKey.getter()
{
  return MEMORY[0x1F40FE8E0]();
}

uint64_t static ArchivedViewCore.preferredBundleLanguageKey.getter()
{
  return MEMORY[0x1F40FE8E8]();
}

uint64_t static ArchivedViewCore.preferredCompositionLanguage.getter()
{
  return MEMORY[0x1F40FE8F0]();
}

uint64_t ArchivedViewCore.Metadata.init(majorVersion:stateAttachments:stableIDAttachment:dataAttachment:archiveID:deploymentVersion:)()
{
  return MEMORY[0x1F40FE8F8]();
}

uint64_t default argument 1 of ArchivedViewCore.Metadata.init(majorVersion:stateAttachments:stableIDAttachment:dataAttachment:archiveID:deploymentVersion:)()
{
  return MEMORY[0x1F40FE900]();
}

uint64_t default argument 4 of ArchivedViewCore.Metadata.init(majorVersion:stateAttachments:stableIDAttachment:dataAttachment:archiveID:deploymentVersion:)()
{
  return MEMORY[0x1F40FE908]();
}

uint64_t ArchivedViewCore.Metadata.preferredCompositionLanguage.getter()
{
  return MEMORY[0x1F40FE910]();
}

uint64_t ArchivedViewCore.Metadata.archiveID.getter()
{
  return MEMORY[0x1F40FE918]();
}

uint64_t type metadata accessor for ArchivedViewCore.Metadata()
{
  return MEMORY[0x1F40FE920]();
}

uint64_t type metadata accessor for CallbacksGesture()
{
  return MEMORY[0x1F40FE928]();
}

uint64_t ContentResponder.contentPath(size:kind:)()
{
  return MEMORY[0x1F40FE930]();
}

uint64_t ContentResponder.contentPath(size:)()
{
  return MEMORY[0x1F40FE938]();
}

uint64_t static DynamicContainer.makeContainer<A>(adaptor:inputs:)()
{
  return MEMORY[0x1F40FE940]();
}

uint64_t DynamicContainer._ItemInfo.item.getter()
{
  return MEMORY[0x1F40FE948]();
}

uint64_t FixedRoundedRect.cornerSize.getter()
{
  return MEMORY[0x1F40FE950]();
}

uint64_t FixedRoundedRect.needsContinuousCorners.getter()
{
  return MEMORY[0x1F40FE958]();
}

uint64_t FixedRoundedRect.rect.getter()
{
  return MEMORY[0x1F40FE960]();
}

uint64_t FixedRoundedRect.isUniform.getter()
{
  return MEMORY[0x1F40FE968]();
}

uint64_t HitTestableEvent.hitTestLocation.getter()
{
  return MEMORY[0x1F40FE970]();
}

uint64_t HitTestableEvent.init(_:)()
{
  return MEMORY[0x1F40FE978]();
}

uint64_t type metadata accessor for ImageProviderBox()
{
  return MEMORY[0x1F40FE980]();
}

uint64_t KeyframeTimeline.update(value:time:)()
{
  return MEMORY[0x1F40FE988]();
}

uint64_t KeyframeTimeline.duration.getter()
{
  return MEMORY[0x1F40FE990]();
}

uint64_t type metadata accessor for KeyframeTimeline()
{
  return MEMORY[0x1F40FE998]();
}

uint64_t PlacementContext.proposedSize.getter()
{
  return MEMORY[0x1F40FE9A0]();
}

uint64_t PlacementContext.size.getter()
{
  return MEMORY[0x1F40FE9A8]();
}

Swift::Void __swiftcall PreferenceBridge.invalidate()()
{
}

uint64_t PreferenceBridge.wrapOutputs(_:inputs:)()
{
  return MEMORY[0x1F40FE9B8]();
}

uint64_t PreferenceBridge.__allocating_init()()
{
  return MEMORY[0x1F40FE9C0]();
}

uint64_t type metadata accessor for PreferenceBridge()
{
  return MEMORY[0x1F40FE9C8]();
}

uint64_t PreferenceValues.modifyValue<A>(for:transform:)()
{
  return MEMORY[0x1F40FE9D0]();
}

uint64_t PreferenceValues.seed.getter()
{
  return MEMORY[0x1F40FE9D8]();
}

uint64_t PreferenceValues.Value.seed.getter()
{
  return MEMORY[0x1F40FE9E0]();
}

uint64_t PreferenceValues.Value.value.getter()
{
  return MEMORY[0x1F40FE9E8]();
}

uint64_t type metadata accessor for PreferenceValues.Value()
{
  return MEMORY[0x1F40FE9F0]();
}

uint64_t PreferenceValues.init()()
{
  return MEMORY[0x1F40FE9F8]();
}

uint64_t PreferenceValues.subscript.getter()
{
  return MEMORY[0x1F40FEA00]();
}

uint64_t PreferenceValues.subscript.setter()
{
  return MEMORY[0x1F40FEA08]();
}

uint64_t static ProposedViewSize.unspecified.getter()
{
  return MEMORY[0x1F40FEA10]();
}

uint64_t static ProposedViewSize.== infix(_:_:)()
{
  return MEMORY[0x1F40FEA18]();
}

uint64_t static ProposedViewSize.zero.getter()
{
  return MEMORY[0x1F40FEA20]();
}

uint64_t static ProposedViewSize.infinity.getter()
{
  return MEMORY[0x1F40FEA28]();
}

uint64_t ProposedViewSize.init(_:in:by:)()
{
  return MEMORY[0x1F40FEA30]();
}

uint64_t ProposedViewSize.subscript.getter()
{
  return MEMORY[0x1F40FEA38]();
}

uint64_t ProposedViewSize.init(_:)()
{
  return MEMORY[0x1F40FEA40]();
}

uint64_t static RendererLeafView.makeLeafView(view:inputs:)()
{
  return MEMORY[0x1F40FEA48]();
}

uint64_t ResolvedGradient.Stop.init(color:location:interpolation:)()
{
  return MEMORY[0x1F40FEA58]();
}

uint64_t ResolvedGradient.Stop.location.getter()
{
  return MEMORY[0x1F40FEA60]();
}

uint64_t default argument 1 of ResolvedGradient.init(stops:colorSpace:)()
{
  return MEMORY[0x1F40FEA68]();
}

uint64_t RoundedRectangle.path(in:)()
{
  return MEMORY[0x1F40FEA70]();
}

uint64_t static ScrollPhaseState.== infix(_:_:)()
{
  return MEMORY[0x1F40FEA78]();
}

uint64_t ScrollPhaseState.init(phase:velocity:)()
{
  return MEMORY[0x1F40FEA80]();
}

uint64_t default argument 1 of ScrollPhaseState.init(phase:velocity:)()
{
  return MEMORY[0x1F40FEA88]();
}

uint64_t ScrollPhaseState.phase.getter()
{
  return MEMORY[0x1F40FEA90]();
}

uint64_t ScrollPhaseState.velocity.getter()
{
  return MEMORY[0x1F40FEA98]();
}

uint64_t static ScrollTargetRole.ContentKey.defaultValue.getter()
{
  return MEMORY[0x1F40FEAA0]();
}

uint64_t ScrollTargetRole.SetLayout.init(role:collection:)()
{
  return MEMORY[0x1F40FEAA8]();
}

uint64_t ScrollTargetRole.SetLayout.value.getter()
{
  return MEMORY[0x1F40FEAB0]();
}

uint64_t type metadata accessor for TagValueTraitKey.Value()
{
  return MEMORY[0x1F40FEAB8]();
}

uint64_t type metadata accessor for TagValueTraitKey()
{
  return MEMORY[0x1F40FEAC0]();
}

uint64_t TimelineSchedule.lazyEntries(within:mode:limit:)()
{
  return MEMORY[0x1F40FEAC8]();
}

uint64_t TimelineSchedule.entries(within:mode:limit:)()
{
  return MEMORY[0x1F40FEAD0]();
}

Swift::Void __swiftcall ViewRendererHost.initializeViewGraph()()
{
}

uint64_t ViewRendererHost.centersRootView.getter()
{
  return MEMORY[0x1F40FEAF0]();
}

uint64_t ViewRendererHost.centersRootView.setter()
{
  return MEMORY[0x1F40FEAF8]();
}

uint64_t ViewRendererHost.isRootHost.getter()
{
  return MEMORY[0x1F40FEB00]();
}

uint64_t ViewRendererHost.updateViewGraph<A>(body:)()
{
  return MEMORY[0x1F40FEB08]();
}

Swift::Void __swiftcall ViewRendererHost.invalidate()()
{
}

Swift::Void __swiftcall ViewRendererHost.archiveJSON(name:)(Swift::String_optional name)
{
}

uint64_t ViewRendererHost.isRendering.getter()
{
  return MEMORY[0x1F40FEB28]();
}

uint64_t ViewRendererHost.renderAsync(interval:targetTimestamp:)()
{
  return MEMORY[0x1F40FEB30]();
}

Swift::Void __swiftcall ViewRendererHost.resetEvents()()
{
}

Swift::Void __swiftcall ViewRendererHost.resetProfile()()
{
}

uint64_t ViewRendererHost.sizeThatFits(_:)()
{
  return MEMORY[0x1F40FEB48]();
}

uint64_t ViewRendererHost.responderNode.getter()
{
  return MEMORY[0x1F40FEB50]();
}

uint64_t ViewRendererHost.scrapeContent()()
{
  return MEMORY[0x1F40FEB58]();
}

Swift::Void __swiftcall ViewRendererHost.graphDidChange()()
{
}

Swift::Void __swiftcall ViewRendererHost.sendTestEvents(_:)(Swift::OpaquePointer a1)
{
}

uint64_t ViewRendererHost.preferenceValue<A>(_:)()
{
  return MEMORY[0x1F40FEB78]();
}

Swift::Void __swiftcall ViewRendererHost.resetTestEvents()()
{
}

Swift::Void __swiftcall ViewRendererHost.updateTransform()()
{
}

uint64_t ViewRendererHost.explicitAlignment(of:at:)()
{
  return MEMORY[0x1F40FEB90]();
}

{
  return MEMORY[0x1F40FEB98]();
}

Swift::Void __swiftcall ViewRendererHost.advanceTimeForTest(interval:)(Swift::Double interval)
{
}

uint64_t ViewRendererHost.invalidateProperties(_:mayDeferUpdate:)()
{
  return MEMORY[0x1F40FEBB0]();
}

uint64_t ViewRendererHost.performExternalUpdate(_:)()
{
  return MEMORY[0x1F40FEBC0]();
}

uint64_t ViewRendererHost.render(interval:updateDisplayList:targetTimestamp:)()
{
  return MEMORY[0x1F40FEBC8]();
}

uint64_t ViewRendererHost.alignment(of:at:)()
{
  return MEMORY[0x1F40FEBD0]();
}

CGSize __swiftcall ViewRendererHost.idealSize()()
{
  MEMORY[0x1F40FEBD8]();
  result.double height = v1;
  result.double width = v0;
  return result;
}

uint64_t _AlignmentLayout.sizeThatFits(in:context:child:)()
{
  return MEMORY[0x1F40FEBE0]();
}

uint64_t _AlignmentLayout.placement(of:in:)()
{
  return MEMORY[0x1F40FEBE8]();
}

uint64_t _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)()
{
  return MEMORY[0x1F40FEBF0]();
}

uint64_t type metadata accessor for _OverlayModifier()
{
  return MEMORY[0x1F40FEBF8]();
}

uint64_t _PreferenceValue.attribute.getter()
{
  return MEMORY[0x1F40FEC00]();
}

uint64_t type metadata accessor for _PreferenceValue()
{
  return MEMORY[0x1F40FEC08]();
}

uint64_t _ShapeStyle_Pack.Style.color.getter()
{
  return MEMORY[0x1F40FEC10]();
}

uint64_t _ShapeStyle_Pack.subscript.getter()
{
  return MEMORY[0x1F40FEC18]();
}

{
  return MEMORY[0x1F40FEC28]();
}

uint64_t _ShapeStyle_Pack.subscript.setter()
{
  return MEMORY[0x1F40FEC20]();
}

uint64_t static _ViewListOutputs.emptyViewList(inputs:)()
{
  return MEMORY[0x1F40FEC30]();
}

uint64_t static _ViewListOutputs.groupViewList<A, B>(parent:footer:inputs:body:)()
{
  return MEMORY[0x1F40FEC38]();
}

uint64_t static _ViewListOutputs.groupViewListCount<A, B, C>(inputs:contentType:headerType:footerType:)()
{
  return MEMORY[0x1F40FEC40]();
}

uint64_t static _ViewListOutputs.unaryViewList<A>(view:inputs:)()
{
  return MEMORY[0x1F40FEC48]();
}

uint64_t _ViewListOutputs.makeAttribute(inputs:)()
{
  return MEMORY[0x1F40FEC50]();
}

uint64_t _ViewListOutputs.multiModifier<A>(_:inputs:)()
{
  return MEMORY[0x1F40FEC58]();
}

uint64_t _withObservation<A>(do:)()
{
  return MEMORY[0x1F40FEC60]();
}

uint64_t static AccessibilityCore.textResolvesToEmpty(_:in:)()
{
  return MEMORY[0x1F40FEC68]();
}

uint64_t static AccessibilityCore.textsResolveToEmpty(_:in:)()
{
  return MEMORY[0x1F40FEC70]();
}

uint64_t static AccessibilityCore.textResolvedToPlainText(_:in:updateResolvableAttributes:resolveSuffix:idiom:)()
{
  return MEMORY[0x1F40FEC78]();
}

uint64_t static AccessibilityCore.textsResolvedToPlainText(_:in:updateResolvableAttributes:resolveSuffix:idiom:separator:)()
{
  return MEMORY[0x1F40FEC80]();
}

uint64_t static AccessibilityCore.textResolvedToAttributedText(_:in:includeResolvableAttributes:includeDefaultAttributes:updateResolvableAttributes:resolveSuffix:idiom:)()
{
  return MEMORY[0x1F40FEC88]();
}

uint64_t static AccessibilityCore.textsResolvedToAttributedText(_:in:includeResolvableAttributes:includeDefaultAttributes:updateResolvableAttributes:resolveSuffix:idiom:separator:)()
{
  return MEMORY[0x1F40FEC90]();
}

uint64_t static AccessibilityCore.resolveAttributedTextAttributes(in:environment:includeResolvableAttributes:)()
{
  return MEMORY[0x1F40FEC98]();
}

uint64_t AccessibilityText.text.getter()
{
  return MEMORY[0x1F40FECA0]();
}

uint64_t AccessibilityText.init(_:environment:idiom:)()
{
  return MEMORY[0x1F40FECA8]();
}

uint64_t AccessibilityText.init(_:)()
{
  return MEMORY[0x1F40FECB0]();
}

uint64_t static AnyInterfaceIdiom.== infix(_:_:)()
{
  return MEMORY[0x1F40FECB8]();
}

uint64_t AnyInterfaceIdiom.accepts<A>(_:)()
{
  return MEMORY[0x1F40FECC0]();
}

uint64_t AnyInterfaceIdiom.init<A>(_:)()
{
  return MEMORY[0x1F40FECC8]();
}

uint64_t static ArchivedViewInput.Value.isArchived.getter()
{
  return MEMORY[0x1F40FECD0]();
}

uint64_t BindingOperations.NilCoalescing.init(defaultValue:)()
{
  return MEMORY[0x1F40FECD8]();
}

uint64_t type metadata accessor for BindingOperations.ForceUnwrapping()
{
  return MEMORY[0x1F40FECE0]();
}

uint64_t CodableByProtobuf.init(from:)()
{
  return MEMORY[0x1F40FECE8]();
}

uint64_t CodableByProtobuf.encode(to:)()
{
  return MEMORY[0x1F40FECF0]();
}

uint64_t ContentShapeKinds.description.getter()
{
  return MEMORY[0x1F40FECF8]();
}

uint64_t ContentTransition.EffectType.init(type:arg0:arg1:)()
{
  return MEMORY[0x1F40FED00]();
}

uint64_t static ContentTransition.interpolate.getter()
{
  return MEMORY[0x1F40FED08]();
}

uint64_t ContentTransition.Effect.init(type:begin:duration:events:flags:)()
{
  return MEMORY[0x1F40FED10]();
}

uint64_t default argument 3 of ContentTransition.Effect.init(type:begin:duration:events:flags:)()
{
  return MEMORY[0x1F40FED18]();
}

uint64_t default argument 4 of ContentTransition.Effect.init(type:begin:duration:events:flags:)()
{
  return MEMORY[0x1F40FED20]();
}

uint64_t static ContentTransition.Storage.== infix(_:_:)()
{
  return MEMORY[0x1F40FED28]();
}

uint64_t static ContentTransition.default.getter()
{
  return MEMORY[0x1F40FED30]();
}

uint64_t static ContentTransition.opacity.getter()
{
  return MEMORY[0x1F40FED38]();
}

uint64_t static ContentTransition.identity.getter()
{
  return MEMORY[0x1F40FED40]();
}

uint64_t CustomHoverEffect.concat<A>(_:)()
{
  return MEMORY[0x1F40FED50]();
}

uint64_t DataArchiveReader.__allocating_init(data:)()
{
  return MEMORY[0x1F40FED58]();
}

uint64_t type metadata accessor for DataArchiveReader()
{
  return MEMORY[0x1F40FED60]();
}

uint64_t DataArchiveWriter.finalizeData()()
{
  return MEMORY[0x1F40FED68]();
}

uint64_t DataArchiveWriter.init()()
{
  return MEMORY[0x1F40FED70]();
}

uint64_t type metadata accessor for DataArchiveWriter()
{
  return MEMORY[0x1F40FED78]();
}

uint64_t type metadata accessor for EnvironmentReader()
{
  return MEMORY[0x1F40FED80]();
}

uint64_t EnvironmentReader.init(_:)()
{
  return MEMORY[0x1F40FED88]();
}

uint64_t EnvironmentValues.imageScale.getter()
{
  return MEMORY[0x1F40FED90]();
}

uint64_t EnvironmentValues.imageScale.setter()
{
  return MEMORY[0x1F40FED98]();
}

uint64_t EnvironmentValues.accentColor.getter()
{
  return MEMORY[0x1F40FEDA0]();
}

uint64_t EnvironmentValues.accentColor.setter()
{
  return MEMORY[0x1F40FEDA8]();
}

uint64_t EnvironmentValues.colorScheme.getter()
{
  return MEMORY[0x1F40FEDB0]();
}

uint64_t EnvironmentValues.colorScheme.setter()
{
  return MEMORY[0x1F40FEDB8]();
}

uint64_t EnvironmentValues.controlSize.getter()
{
  return MEMORY[0x1F40FEDC0]();
}

uint64_t EnvironmentValues.controlSize.setter()
{
  return MEMORY[0x1F40FEDC8]();
}

uint64_t EnvironmentValues.defaultFont.getter()
{
  return MEMORY[0x1F40FEDD0]();
}

uint64_t EnvironmentValues.defaultFont.setter()
{
  return MEMORY[0x1F40FEDD8]();
}

uint64_t EnvironmentValues.pixelLength.getter()
{
  return MEMORY[0x1F40FEDE0]();
}

uint64_t EnvironmentValues.displayGamut.getter()
{
  return MEMORY[0x1F40FEDE8]();
}

uint64_t EnvironmentValues.displayGamut.setter()
{
  return MEMORY[0x1F40FEDF0]();
}

uint64_t EnvironmentValues.displayScale.getter()
{
  return MEMORY[0x1F40FEDF8]();
}

uint64_t EnvironmentValues.displayScale.setter()
{
  return MEMORY[0x1F40FEE00]();
}

uint64_t EnvironmentValues.isInTouchBar.setter()
{
  return MEMORY[0x1F40FEE08]();
}

uint64_t EnvironmentValues.sizeCategory.getter()
{
  return MEMORY[0x1F40FEE10]();
}

uint64_t EnvironmentValues.sizeCategory.setter()
{
  return MEMORY[0x1F40FEE18]();
}

uint64_t EnvironmentValues.appearsActive.getter()
{
  return MEMORY[0x1F40FEE20]();
}

uint64_t EnvironmentValues.appearsActive.setter()
{
  return MEMORY[0x1F40FEE28]();
}

uint64_t EnvironmentValues.effectiveFont.getter()
{
  return MEMORY[0x1F40FEE30]();
}

uint64_t EnvironmentValues.placementTint.getter()
{
  return MEMORY[0x1F40FEE38]();
}

uint64_t EnvironmentValues.placementTint.setter()
{
  return MEMORY[0x1F40FEE40]();
}

uint64_t EnvironmentValues.backgroundInfo.modify()
{
  return MEMORY[0x1F40FEE48]();
}

uint64_t EnvironmentValues.backgroundInfo.getter()
{
  return MEMORY[0x1F40FEE50]();
}

uint64_t EnvironmentValues.backgroundInfo.setter()
{
  return MEMORY[0x1F40FEE58]();
}

uint64_t EnvironmentValues.defaultPadding.getter()
{
  return MEMORY[0x1F40FEE60]();
}

uint64_t EnvironmentValues.defaultPadding.setter()
{
  return MEMORY[0x1F40FEE68]();
}

uint64_t EnvironmentValues.lowerLineLimit.getter()
{
  return MEMORY[0x1F40FEE70]();
}

uint64_t EnvironmentValues.symbolVariants.modify()
{
  return MEMORY[0x1F40FEE78]();
}

uint64_t EnvironmentValues.symbolVariants.getter()
{
  return MEMORY[0x1F40FEE80]();
}

uint64_t EnvironmentValues.symbolVariants.setter()
{
  return MEMORY[0x1F40FEE88]();
}

uint64_t EnvironmentValues.truncationMode.getter()
{
  return MEMORY[0x1F40FEE90]();
}

uint64_t EnvironmentValues.truncationMode.setter()
{
  return MEMORY[0x1F40FEE98]();
}

uint64_t EnvironmentValues.backgroundStyle.getter()
{
  return MEMORY[0x1F40FEEA0]();
}

uint64_t EnvironmentValues.backgroundStyle.setter()
{
  return MEMORY[0x1F40FEEA8]();
}

uint64_t EnvironmentValues.dynamicTypeSize.getter()
{
  return MEMORY[0x1F40FEEB0]();
}

uint64_t EnvironmentValues.dynamicTypeSize.setter()
{
  return MEMORY[0x1F40FEEB8]();
}

uint64_t EnvironmentValues.foregroundColor.getter()
{
  return MEMORY[0x1F40FEEC0]();
}

uint64_t EnvironmentValues.foregroundColor.setter()
{
  return MEMORY[0x1F40FEEC8]();
}

uint64_t EnvironmentValues.layoutDirection.getter()
{
  return MEMORY[0x1F40FEED0]();
}

uint64_t EnvironmentValues.layoutDirection.setter()
{
  return MEMORY[0x1F40FEED8]();
}

uint64_t EnvironmentValues.allowsTightening.getter()
{
  return MEMORY[0x1F40FEEE0]();
}

uint64_t EnvironmentValues.allowsTightening.setter()
{
  return MEMORY[0x1F40FEEE8]();
}

uint64_t EnvironmentValues.dividerThickness.getter()
{
  return MEMORY[0x1F40FEEF0]();
}

uint64_t EnvironmentValues.dividerThickness.setter()
{
  return MEMORY[0x1F40FEEF8]();
}

uint64_t EnvironmentValues.headerProminence.getter()
{
  return MEMORY[0x1F40FEF00]();
}

uint64_t EnvironmentValues.headerProminence.setter()
{
  return MEMORY[0x1F40FEF08]();
}

uint64_t EnvironmentValues.legibilityWeight.setter()
{
  return MEMORY[0x1F40FEF10]();
}

uint64_t EnvironmentValues.redactionReasons.modify()
{
  return MEMORY[0x1F40FEF18]();
}

uint64_t EnvironmentValues.redactionReasons.getter()
{
  return MEMORY[0x1F40FEF20]();
}

uint64_t EnvironmentValues.redactionReasons.setter()
{
  return MEMORY[0x1F40FEF28]();
}

uint64_t EnvironmentValues.backgroundContext.getter()
{
  return MEMORY[0x1F40FEF30]();
}

uint64_t EnvironmentValues.backgroundContext.setter()
{
  return MEMORY[0x1F40FEF38]();
}

uint64_t EnvironmentValues.contentTransition.getter()
{
  return MEMORY[0x1F40FEF40]();
}

uint64_t EnvironmentValues.contentTransition.setter()
{
  return MEMORY[0x1F40FEF48]();
}

uint64_t EnvironmentValues.resolvedTintColor.getter()
{
  return MEMORY[0x1F40FEF50]();
}

uint64_t EnvironmentValues.systemColorScheme.getter()
{
  return MEMORY[0x1F40FEF58]();
}

uint64_t EnvironmentValues.systemColorScheme.setter()
{
  return MEMORY[0x1F40FEF60]();
}

uint64_t EnvironmentValues.verticalSizeClass.getter()
{
  return MEMORY[0x1F40FEF68]();
}

uint64_t EnvironmentValues.verticalSizeClass.setter()
{
  return MEMORY[0x1F40FEF70]();
}

uint64_t EnvironmentValues.backgroundMaterial.getter()
{
  return MEMORY[0x1F40FEF78]();
}

uint64_t EnvironmentValues.backgroundMaterial.setter()
{
  return MEMORY[0x1F40FEF80]();
}

uint64_t EnvironmentValues.defaultPixelLength.setter()
{
  return MEMORY[0x1F40FEF88]();
}

uint64_t EnvironmentValues.isLuminanceReduced.getter()
{
  return MEMORY[0x1F40FEF90]();
}

uint64_t EnvironmentValues.isLuminanceReduced.setter()
{
  return MEMORY[0x1F40FEF98]();
}

uint64_t EnvironmentValues.minimumScaleFactor.getter()
{
  return MEMORY[0x1F40FEFA0]();
}

uint64_t EnvironmentValues.minimumScaleFactor.setter()
{
  return MEMORY[0x1F40FEFA8]();
}

uint64_t EnvironmentValues.colorSchemeContrast.getter()
{
  return MEMORY[0x1F40FEFB0]();
}

uint64_t EnvironmentValues.displayCornerRadius.getter()
{
  return MEMORY[0x1F40FEFB8]();
}

uint64_t EnvironmentValues.displayCornerRadius.setter()
{
  return MEMORY[0x1F40FEFC0]();
}

uint64_t EnvironmentValues.horizontalSizeClass.getter()
{
  return MEMORY[0x1F40FEFC8]();
}

uint64_t EnvironmentValues.horizontalSizeClass.setter()
{
  return MEMORY[0x1F40FEFD0]();
}

uint64_t EnvironmentValues.speechAdjustedPitch.getter()
{
  return MEMORY[0x1F40FEFD8]();
}

uint64_t EnvironmentValues.speechAdjustedPitch.setter()
{
  return MEMORY[0x1F40FEFE0]();
}

uint64_t EnvironmentValues._colorSchemeContrast.getter()
{
  return MEMORY[0x1F40FEFE8]();
}

uint64_t EnvironmentValues._colorSchemeContrast.setter()
{
  return MEMORY[0x1F40FEFF0]();
}

uint64_t EnvironmentValues.accessibilityEnabled.getter()
{
  return MEMORY[0x1F40FEFF8]();
}

uint64_t EnvironmentValues.accessibilityEnabled.setter()
{
  return MEMORY[0x1F40FF000]();
}

uint64_t EnvironmentValues.backgroundProminence.getter()
{
  return MEMORY[0x1F40FF008]();
}

uint64_t EnvironmentValues.backgroundProminence.setter()
{
  return MEMORY[0x1F40FF010]();
}

uint64_t EnvironmentValues.defaultRenderingMode.getter()
{
  return MEMORY[0x1F40FF018]();
}

uint64_t EnvironmentValues.defaultRenderingMode.setter()
{
  return MEMORY[0x1F40FF020]();
}

uint64_t EnvironmentValues.contentTransitionState.setter()
{
  return MEMORY[0x1F40FF028]();
}

uint64_t EnvironmentValues.multilineTextAlignment.getter()
{
  return MEMORY[0x1F40FF030]();
}

uint64_t EnvironmentValues.multilineTextAlignment.setter()
{
  return MEMORY[0x1F40FF038]();
}

uint64_t EnvironmentValues.effectiveForegroundColor.getter()
{
  return MEMORY[0x1F40FF040]();
}

uint64_t EnvironmentValues.valueWithSecondaryLookup<A>(_:)()
{
  return MEMORY[0x1F40FF048]();
}

uint64_t EnvironmentValues.accessibilityInvertColors.getter()
{
  return MEMORY[0x1F40FF050]();
}

uint64_t EnvironmentValues.accessibilityInvertColors.setter()
{
  return MEMORY[0x1F40FF058]();
}

uint64_t EnvironmentValues.accessibilityReduceMotion.setter()
{
  return MEMORY[0x1F40FF060]();
}

uint64_t EnvironmentValues.speechSpellsOutCharacters.getter()
{
  return MEMORY[0x1F40FF068]();
}

uint64_t EnvironmentValues.speechSpellsOutCharacters.setter()
{
  return MEMORY[0x1F40FF070]();
}

uint64_t EnvironmentValues.speechAnnouncementsPriority.getter()
{
  return MEMORY[0x1F40FF078]();
}

uint64_t EnvironmentValues.speechAnnouncementsPriority.setter()
{
  return MEMORY[0x1F40FF080]();
}

uint64_t EnvironmentValues.explicitPreferredColorScheme.getter()
{
  return MEMORY[0x1F40FF088]();
}

uint64_t EnvironmentValues.explicitPreferredColorScheme.setter()
{
  return MEMORY[0x1F40FF090]();
}

uint64_t EnvironmentValues.accessibilityShowButtonShapes.getter()
{
  return MEMORY[0x1F40FF098]();
}

uint64_t EnvironmentValues.accessibilityShowButtonShapes.setter()
{
  return MEMORY[0x1F40FF0A0]();
}

uint64_t EnvironmentValues._accessibilityShowButtonShapes.getter()
{
  return MEMORY[0x1F40FF0A8]();
}

uint64_t EnvironmentValues._accessibilityShowButtonShapes.setter()
{
  return MEMORY[0x1F40FF0B0]();
}

uint64_t EnvironmentValues.accessibilityDimFlashingLights.setter()
{
  return MEMORY[0x1F40FF0B8]();
}

uint64_t EnvironmentValues.accessibilityPlayAnimatedImages.setter()
{
  return MEMORY[0x1F40FF0C0]();
}

uint64_t EnvironmentValues.accessibilityReduceTransparency.getter()
{
  return MEMORY[0x1F40FF0C8]();
}

uint64_t EnvironmentValues.accessibilityReduceTransparency.setter()
{
  return MEMORY[0x1F40FF0D0]();
}

uint64_t EnvironmentValues.speechAlwaysIncludesPunctuation.getter()
{
  return MEMORY[0x1F40FF0D8]();
}

uint64_t EnvironmentValues.speechAlwaysIncludesPunctuation.setter()
{
  return MEMORY[0x1F40FF0E0]();
}

uint64_t EnvironmentValues.contentTransitionAddsDrawingGroup.getter()
{
  return MEMORY[0x1F40FF0E8]();
}

uint64_t EnvironmentValues.contentTransitionAddsDrawingGroup.setter()
{
  return MEMORY[0x1F40FF0F0]();
}

uint64_t EnvironmentValues.accessibilityDifferentiateWithoutColor.getter()
{
  return MEMORY[0x1F40FF0F8]();
}

uint64_t EnvironmentValues.accessibilityDifferentiateWithoutColor.setter()
{
  return MEMORY[0x1F40FF100]();
}

uint64_t EnvironmentValues.accessibilityPrefersCrossFadeTransitions.getter()
{
  return MEMORY[0x1F40FF108]();
}

uint64_t EnvironmentValues.accessibilityPrefersCrossFadeTransitions.setter()
{
  return MEMORY[0x1F40FF110]();
}

uint64_t EnvironmentValues.font.getter()
{
  return MEMORY[0x1F40FF118]();
}

uint64_t EnvironmentValues.font.setter()
{
  return MEMORY[0x1F40FF120]();
}

uint64_t EnvironmentValues.tint.getter()
{
  return MEMORY[0x1F40FF128]();
}

uint64_t EnvironmentValues.tint.setter()
{
  return MEMORY[0x1F40FF130]();
}

uint64_t EnvironmentValues.plist.setter()
{
  return MEMORY[0x1F40FF138]();
}

uint64_t EnvironmentValues.locale.getter()
{
  return MEMORY[0x1F40FF140]();
}

uint64_t EnvironmentValues.locale.setter()
{
  return MEMORY[0x1F40FF148]();
}

uint64_t EnvironmentValues.calendar.getter()
{
  return MEMORY[0x1F40FF150]();
}

uint64_t EnvironmentValues.calendar.setter()
{
  return MEMORY[0x1F40FF158]();
}

uint64_t EnvironmentValues.textCase.getter()
{
  return MEMORY[0x1F40FF160]();
}

uint64_t EnvironmentValues.textCase.setter()
{
  return MEMORY[0x1F40FF168]();
}

uint64_t EnvironmentValues.timeZone.getter()
{
  return MEMORY[0x1F40FF170]();
}

uint64_t EnvironmentValues.timeZone.setter()
{
  return MEMORY[0x1F40FF178]();
}

uint64_t EnvironmentValues.isEnabled.getter()
{
  return MEMORY[0x1F40FF180]();
}

uint64_t EnvironmentValues.isEnabled.setter()
{
  return MEMORY[0x1F40FF188]();
}

uint64_t EnvironmentValues.lineLimit.getter()
{
  return MEMORY[0x1F40FF190]();
}

uint64_t EnvironmentValues.lineLimit.setter()
{
  return MEMORY[0x1F40FF198]();
}

uint64_t EnvironmentValues.tintColor.getter()
{
  return MEMORY[0x1F40FF1A0]();
}

uint64_t EnvironmentValues.tintColor.setter()
{
  return MEMORY[0x1F40FF1A8]();
}

uint64_t EnvironmentValues.bridgedEnvironmentResolver.setter()
{
  return MEMORY[0x1F40FF1B0]();
}

uint64_t EnvironmentValues.textSizing.getter()
{
  return MEMORY[0x1F40FF1C0]();
}

uint64_t EnvironmentValues.textSizing.setter()
{
  return MEMORY[0x1F40FF1C8]();
}

uint64_t EnvironmentValues.writingMode.getter()
{
  return MEMORY[0x1F40FF1D0]();
}

uint64_t EnvironmentValues.cuiAssetIdiom.setter()
{
  return MEMORY[0x1F40FF1D8]();
}

uint64_t EnvironmentValues.fontModifiers.getter()
{
  return MEMORY[0x1F40FF1E0]();
}

uint64_t EnvironmentValues.fontModifiers.setter()
{
  return MEMORY[0x1F40FF1E8]();
}

uint64_t EnvironmentValues.scrollAnchors.getter()
{
  return MEMORY[0x1F40FF1F0]();
}

uint64_t EnvironmentValues.scrollAnchors.setter()
{
  return MEMORY[0x1F40FF1F8]();
}

uint64_t EnvironmentValues.symbolEffects.getter()
{
  return MEMORY[0x1F40FF200]();
}

uint64_t EnvironmentValues.symbolEffects.setter()
{
  return MEMORY[0x1F40FF208]();
}

uint64_t EnvironmentValues.cuiAssetSubtype.setter()
{
  return MEMORY[0x1F40FF210]();
}

uint64_t EnvironmentValues.foregroundStyle.getter()
{
  return MEMORY[0x1F40FF218]();
}

uint64_t EnvironmentValues.foregroundStyle.setter()
{
  return MEMORY[0x1F40FF220]();
}

uint64_t EnvironmentValues.imageIsTemplate(renderingMode:)()
{
  return MEMORY[0x1F40FF228]();
}

uint64_t EnvironmentValues.isVisionEnabled.getter()
{
  return MEMORY[0x1F40FF230]();
}

uint64_t EnvironmentValues.isVisionEnabled.setter()
{
  return MEMORY[0x1F40FF238]();
}

Swift::Void __swiftcall EnvironmentValues.configureForRoot()()
{
}

uint64_t EnvironmentValues.disableLinkColor.setter()
{
  return MEMORY[0x1F40FF248]();
}

uint64_t EnvironmentValues.preferenceBridge.getter()
{
  return MEMORY[0x1F40FF250]();
}

uint64_t EnvironmentValues.preferenceBridge.setter()
{
  return MEMORY[0x1F40FF258]();
}

uint64_t EnvironmentValues.sensitiveContent.getter()
{
  return MEMORY[0x1F40FF260]();
}

uint64_t EnvironmentValues.sensitiveContent.setter()
{
  return MEMORY[0x1F40FF268]();
}

uint64_t EnvironmentValues.allScrollableAxes.modify()
{
  return MEMORY[0x1F40FF270]();
}

uint64_t EnvironmentValues.allScrollableAxes.getter()
{
  return MEMORY[0x1F40FF278]();
}

uint64_t EnvironmentValues.vibrantColorStyle.setter()
{
  return MEMORY[0x1F40FF280]();
}

uint64_t EnvironmentValues.appendSymbolEffect(_:for:)()
{
  return MEMORY[0x1F40FF288]();
}

uint64_t EnvironmentValues.hoverEffectContext.getter()
{
  return MEMORY[0x1F40FF298]();
}

uint64_t EnvironmentValues.hoverEffectContext.setter()
{
  return MEMORY[0x1F40FF2A0]();
}

uint64_t EnvironmentValues.tintAdjustmentMode.getter()
{
  return MEMORY[0x1F40FF2A8]();
}

uint64_t EnvironmentValues.tintAdjustmentMode.setter()
{
  return MEMORY[0x1F40FF2B0]();
}

uint64_t EnvironmentValues.shouldRedactContent.getter()
{
  return MEMORY[0x1F40FF2B8]();
}

uint64_t EnvironmentValues.resolvedTextProvider.setter()
{
  return MEMORY[0x1F40FF2C0]();
}

uint64_t EnvironmentValues.stringResolutionDate.getter()
{
  return MEMORY[0x1F40FF2C8]();
}

uint64_t EnvironmentValues.stringResolutionDate.setter()
{
  return MEMORY[0x1F40FF2D0]();
}

uint64_t EnvironmentValues.cuiNamedColorProvider.setter()
{
  return MEMORY[0x1F40FF2D8]();
}

uint64_t EnvironmentValues.nearestScrollableAxes.getter()
{
  return MEMORY[0x1F40FF2E0]();
}

uint64_t EnvironmentValues.nearestScrollableAxes.setter()
{
  return MEMORY[0x1F40FF2E8]();
}

uint64_t EnvironmentValues.defaultForegroundStyle.getter()
{
  return MEMORY[0x1F40FF2F0]();
}

uint64_t EnvironmentValues.defaultForegroundStyle.setter()
{
  return MEMORY[0x1F40FF2F8]();
}

uint64_t EnvironmentValues.hasSystemOpenURLAction.setter()
{
  return MEMORY[0x1F40FF300]();
}

uint64_t EnvironmentValues.containerBackgroundKind.getter()
{
  return MEMORY[0x1F40FF308]();
}

uint64_t EnvironmentValues.containerBackgroundKind.setter()
{
  return MEMORY[0x1F40FF310]();
}

uint64_t EnvironmentValues.shouldRedactSymbolImages.getter()
{
  return MEMORY[0x1F40FF318]();
}

uint64_t EnvironmentValues.typesettingConfiguration.getter()
{
  return MEMORY[0x1F40FF320]();
}

uint64_t EnvironmentValues.defaultAccentColorProvider.setter()
{
  return MEMORY[0x1F40FF328]();
}

uint64_t EnvironmentValues.accessibilityPrefersOnOffLabels.setter()
{
  return MEMORY[0x1F40FF330]();
}

uint64_t EnvironmentValues.accessibilityTextAttributeResolver.setter()
{
  return MEMORY[0x1F40FF338]();
}

uint64_t EnvironmentValues.init()()
{
  return MEMORY[0x1F40FF340]();
}

uint64_t EnvironmentValues.init(_:tracker:)()
{
  return MEMORY[0x1F40FF348]();
}

uint64_t FileArchiveReader.__allocating_init(url:)()
{
  return MEMORY[0x1F40FF358]();
}

uint64_t FileArchiveReader.__allocating_init(file:)()
{
  return MEMORY[0x1F40FF360]();
}

uint64_t type metadata accessor for FileArchiveReader()
{
  return MEMORY[0x1F40FF368]();
}

uint64_t FileArchiveWriter.__allocating_init(url:)()
{
  return MEMORY[0x1F40FF370]();
}

uint64_t FileArchiveWriter.__allocating_init(file:)()
{
  return MEMORY[0x1F40FF378]();
}

uint64_t type metadata accessor for FileArchiveWriter()
{
  return MEMORY[0x1F40FF380]();
}

uint64_t ImageRendererHost.cgImage.getter()
{
  return MEMORY[0x1F40FF390]();
}

uint64_t ImageRendererHost.cgImageScale.getter()
{
  return MEMORY[0x1F40FF398]();
}

uint64_t PreferencesInputs.makeIndirectOutputs()()
{
  return MEMORY[0x1F40FF3A8]();
}

uint64_t PreferencesInputs.add<A>(_:)()
{
  return MEMORY[0x1F40FF3B0]();
}

uint64_t PreferencesInputs.remove<A>(_:)()
{
  return MEMORY[0x1F40FF3B8]();
}

uint64_t PreferencesInputs.contains<A>(_:includeHostPreferences:)()
{
  return MEMORY[0x1F40FF3C0]();
}

uint64_t PreferencesInputs.hostKeys.getter()
{
  return MEMORY[0x1F40FF3C8]();
}

uint64_t PreferencesInputs.hostKeys.setter()
{
  return MEMORY[0x1F40FF3D0]();
}

uint64_t PreferencesInputs.init(hostKeys:)()
{
  return MEMORY[0x1F40FF3D8]();
}

uint64_t ScrapeableContent.Item.size.getter()
{
  return MEMORY[0x1F40FF3E0]();
}

uint64_t ScrapeableContent.Item.init(_:ids:_:position:size:transform:)()
{
  return MEMORY[0x1F40FF3E8]();
}

uint64_t static TestRenderOptions.simple.getter()
{
  return MEMORY[0x1F40FF3F0]();
}

uint64_t static VerticalAlignment.lastTextBaseline.getter()
{
  return MEMORY[0x1F40FF400]();
}

uint64_t static VerticalAlignment.firstTextBaseline.getter()
{
  return MEMORY[0x1F40FF408]();
}

uint64_t static VerticalAlignment.firstTextLineCenter.getter()
{
  return MEMORY[0x1F40FF410]();
}

uint64_t static VerticalAlignment.center.getter()
{
  return MEMORY[0x1F40FF418]();
}

uint64_t VerticalAlignment.init(_:)()
{
  return MEMORY[0x1F40FF420]();
}

uint64_t ViewGraphDelegate.updateGraph<A>(body:)()
{
  return MEMORY[0x1F40FF428]();
}

uint64_t static ViewRespondersKey.defaultValue.getter()
{
  return MEMORY[0x1F40FF438]();
}

uint64_t _Rotation3DEffect.Data.transform.getter()
{
  return MEMORY[0x1F40FF440]();
}

uint64_t _UnaryViewAdaptor.init(content:)()
{
  return MEMORY[0x1F40FF448]();
}

uint64_t type metadata accessor for _UnaryViewAdaptor()
{
  return MEMORY[0x1F40FF450]();
}

uint64_t _UnaryViewAdaptor.init(_:)()
{
  return MEMORY[0x1F40FF458]();
}

uint64_t _ViewList_Backing.visitViews<A>(applying:from:)()
{
  return MEMORY[0x1F40FF460]();
}

uint64_t _ViewList_Backing.ids.getter()
{
  return MEMORY[0x1F40FF468]();
}

uint64_t _ViewList_Section.applyNodes(from:style:transform:to:)()
{
  return MEMORY[0x1F40FF470]();
}

uint64_t _ViewList_Section.footer.getter()
{
  return MEMORY[0x1F40FF478]();
}

uint64_t _ViewList_Section.header.getter()
{
  return MEMORY[0x1F40FF480]();
}

uint64_t _ViewList_Section.content.getter()
{
  return MEMORY[0x1F40FF488]();
}

uint64_t _ViewList_Sublist.list.getter()
{
  return MEMORY[0x1F40FF490]();
}

uint64_t isLinkedOnOrAfter(_:)()
{
  return MEMORY[0x1F40FF498]();
}

uint64_t onNextMainRunLoop(do:)()
{
  return MEMORY[0x1F40FF4A0]();
}

uint64_t withRenderOptions(_:_:)()
{
  return MEMORY[0x1F40FF4A8]();
}

uint64_t AccessibilityTrait.uiTrait.getter()
{
  return MEMORY[0x1F40FF4B0]();
}

uint64_t static AccessibilityTrait.allCases.getter()
{
  return MEMORY[0x1F40FF4B8]();
}

uint64_t type metadata accessor for AddGestureModifier()
{
  return MEMORY[0x1F40FF4C0]();
}

uint64_t type metadata accessor for ComposedProjection()
{
  return MEMORY[0x1F40FF4C8]();
}

Swift::Void __swiftcall DynamicPropertyBox.reset()()
{
}

Swift::Void __swiftcall DynamicPropertyBox.destroy()()
{
}

uint64_t EventBindingBridge.init(eventBindingManager:)()
{
  return MEMORY[0x1F40FF4E8]();
}

uint64_t dispatch thunk of EventBindingBridge.setInheritedPhase(_:)()
{
  return MEMORY[0x1F40FF4F0]();
}

uint64_t dispatch thunk of EventBindingBridge.send(_:source:)()
{
  return MEMORY[0x1F40FF4F8]();
}

uint64_t dispatch thunk of EventBindingBridge.reset(eventSource:resetForwardedEventDispatchers:)()
{
  return MEMORY[0x1F40FF500]();
}

uint64_t type metadata accessor for EventBindingBridge()
{
  return MEMORY[0x1F40FF508]();
}

uint64_t method lookup function for EventBindingBridge()
{
  return MEMORY[0x1F40FF510]();
}

uint64_t EventBindingBridge.deinit()
{
  return MEMORY[0x1F40FF518]();
}

uint64_t type metadata accessor for FilteredTransition()
{
  return MEMORY[0x1F40FF520]();
}

uint64_t LocalizedStringKey.StringInterpolation.appendInterpolation(_:)()
{
  return MEMORY[0x1F40FF530]();
}

Swift::Void __swiftcall LocalizedStringKey.StringInterpolation.appendInterpolation(_:)(Swift::String a1)
{
}

Swift::Void __swiftcall LocalizedStringKey.StringInterpolation.appendLiteral(_:)(Swift::String a1)
{
}

uint64_t LocalizedStringKey.StringInterpolation.init(literalCapacity:interpolationCount:)()
{
  return MEMORY[0x1F40FF548]();
}

uint64_t LocalizedStringKey.init(stringLiteral:)()
{
  return MEMORY[0x1F40FF550]();
}

uint64_t MultiViewResponder.addContentPath(to:kind:in:observer:)()
{
  return MEMORY[0x1F40FF558]();
}

uint64_t MultiViewResponder.visit(applying:)()
{
  return MEMORY[0x1F40FF560]();
}

uint64_t MultiViewResponder.children.getter()
{
  return MEMORY[0x1F40FF568]();
}

uint64_t MultiViewResponder.children.setter()
{
  return MEMORY[0x1F40FF570]();
}

uint64_t type metadata accessor for MultiViewResponder()
{
  return MEMORY[0x1F40FF580]();
}

uint64_t method lookup function for MultiViewResponder()
{
  return MEMORY[0x1F40FF588]();
}

uint64_t MultiViewResponder.deinit()
{
  return MEMORY[0x1F40FF590]();
}

uint64_t ObservableLocation.addObserver(host:signal:)()
{
  return MEMORY[0x1F40FF598]();
}

uint64_t ObservableLocation.init(initialValue:)()
{
  return MEMORY[0x1F40FF5A0]();
}

uint64_t ObservableLocation.removeObserver(signal:)()
{
  return MEMORY[0x1F40FF5A8]();
}

uint64_t type metadata accessor for ObservableLocation()
{
  return MEMORY[0x1F40FF5B0]();
}

uint64_t static OptionalEdgeInsets.== infix(_:_:)()
{
  return MEMORY[0x1F40FF5B8]();
}

uint64_t OptionalEdgeInsets.in(edges:)()
{
  return MEMORY[0x1F40FF5C0]();
}

uint64_t OptionalEdgeInsets.top.getter()
{
  return MEMORY[0x1F40FF5C8]();
}

uint64_t OptionalEdgeInsets.hash(into:)()
{
  return MEMORY[0x1F40FF5D0]();
}

uint64_t static OptionalEdgeInsets.none.getter()
{
  return MEMORY[0x1F40FF5D8]();
}

uint64_t OptionalEdgeInsets.adding(_:)()
{
  return MEMORY[0x1F40FF5E0]();
}

uint64_t OptionalEdgeInsets.bottom.getter()
{
  return MEMORY[0x1F40FF5E8]();
}

uint64_t OptionalEdgeInsets.leading.getter()
{
  return MEMORY[0x1F40FF5F0]();
}

uint64_t OptionalEdgeInsets.trailing.getter()
{
  return MEMORY[0x1F40FF5F8]();
}

uint64_t OptionalEdgeInsets.init()()
{
  return MEMORY[0x1F40FF600]();
}

uint64_t OptionalEdgeInsets.init(_:edges:)()
{
  return MEMORY[0x1F40FF608]();
}

{
  return MEMORY[0x1F40FF610]();
}

uint64_t OptionalEdgeInsets.subscript.getter()
{
  return MEMORY[0x1F40FF618]();
}

uint64_t OptionalEdgeInsets.subscript.setter()
{
  return MEMORY[0x1F40FF620]();
}

uint64_t PreferencesOutputs.attachIndirectOutputs(to:)()
{
  return MEMORY[0x1F40FF628]();
}

Swift::Void __swiftcall PreferencesOutputs.detachIndirectOutputs()()
{
}

uint64_t PreferencesOutputs.forEachPreference(_:)()
{
  return MEMORY[0x1F40FF638]();
}

uint64_t PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)()
{
  return MEMORY[0x1F40FF640]();
}

uint64_t PreferencesOutputs.setIndirectDependency(_:)()
{
  return MEMORY[0x1F40FF648]();
}

uint64_t PreferencesOutputs.makePreferenceTransformer<A>(inputs:key:transform:)()
{
  return MEMORY[0x1F40FF650]();
}

uint64_t PreferencesOutputs.init()()
{
  return MEMORY[0x1F40FF658]();
}

uint64_t PreferencesOutputs.subscript.getter()
{
  return MEMORY[0x1F40FF660]();
}

uint64_t PreferencesOutputs.subscript.setter()
{
  return MEMORY[0x1F40FF668]();
}

uint64_t static ProcessEnvironment.BOOL(forKey:defaultValue:)()
{
  return MEMORY[0x1F40FF670]();
}

uint64_t static ProtocolDescriptor.conformance(of:)()
{
  return MEMORY[0x1F40FF678]();
}

uint64_t ResolvedStyledText.accessibilityText.getter()
{
  return MEMORY[0x1F40FF680]();
}

uint64_t static ResolvedStyledText.styledText(storage:stylePadding:environment:archiveOptions:isCollapsible:features:suffix:attachments:styles:transitions:writingMode:sizeFitting:)()
{
  return MEMORY[0x1F40FF688]();
}

uint64_t default argument 1 of static ResolvedStyledText.styledText(storage:stylePadding:environment:archiveOptions:isCollapsible:features:suffix:attachments:styles:transitions:writingMode:sizeFitting:)()
{
  return MEMORY[0x1F40FF690]();
}

uint64_t default argument 7 of static ResolvedStyledText.styledText(storage:stylePadding:environment:archiveOptions:isCollapsible:features:suffix:attachments:styles:transitions:writingMode:sizeFitting:)()
{
  return MEMORY[0x1F40FF698]();
}

uint64_t default argument 8 of static ResolvedStyledText.styledText(storage:stylePadding:environment:archiveOptions:isCollapsible:features:suffix:attachments:styles:transitions:writingMode:sizeFitting:)()
{
  return MEMORY[0x1F40FF6A0]();
}

uint64_t default argument 9 of static ResolvedStyledText.styledText(storage:stylePadding:environment:archiveOptions:isCollapsible:features:suffix:attachments:styles:transitions:writingMode:sizeFitting:)()
{
  return MEMORY[0x1F40FF6A8]();
}

uint64_t ResolvedStyledText.nextUpdate(after:equivalentDate:reduceFrequency:)()
{
  return MEMORY[0x1F40FF6B0]();
}

uint64_t dispatch thunk of ResolvedStyledText.drawingScale(size:)()
{
  return MEMORY[0x1F40FF6B8]();
}

uint64_t ResolvedStyledText.linkURLMetrics(in:layoutMargins:)()
{
  return MEMORY[0x1F40FF6C0]();
}

uint64_t ResolvedStyledText.resolvedContent(in:)()
{
  return MEMORY[0x1F40FF6C8]();
}

uint64_t ResolvedStyledText.scaleFactorOverride.getter()
{
  return MEMORY[0x1F40FF6D0]();
}

uint64_t ResolvedStyledText.scaleFactorOverride.setter()
{
  return MEMORY[0x1F40FF6D8]();
}

uint64_t dispatch thunk of ResolvedStyledText.size(in:)()
{
  return MEMORY[0x1F40FF6E0]();
}

uint64_t ResolvedStyledText.isEmpty.getter()
{
  return MEMORY[0x1F40FF6E8]();
}

uint64_t dispatch thunk of ResolvedStyledText.spacing()()
{
  return MEMORY[0x1F40FF6F0]();
}

uint64_t ResolvedStyledText.storage.getter()
{
  return MEMORY[0x1F40FF6F8]();
}

uint64_t ResolvedStyledText.isDynamic.getter()
{
  return MEMORY[0x1F40FF700]();
}

uint64_t type metadata accessor for ResolvedStyledText()
{
  return MEMORY[0x1F40FF708]();
}

uint64_t SectionAccumulator.formResult(from:listAttribute:includeEmptySectionsIf:)()
{
  return MEMORY[0x1F40FF710]();
}

uint64_t SectionAccumulator.init(contentSubgraph:)()
{
  return MEMORY[0x1F40FF718]();
}

uint64_t static SectionAccumulator.processUnsectionedContent(list:contentSubgraph:)()
{
  return MEMORY[0x1F40FF720]();
}

uint64_t SectionAccumulator.Item.count.getter()
{
  return MEMORY[0x1F40FF728]();
}

uint64_t SectionAccumulator.Item.hasRows.getter()
{
  return MEMORY[0x1F40FF730]();
}

uint64_t SectionAccumulator.RowIDs.startIndex.getter()
{
  return MEMORY[0x1F40FF738]();
}

uint64_t SectionAccumulator.RowIDs.endIndex.getter()
{
  return MEMORY[0x1F40FF740]();
}

uint64_t SectionHeaderTrait.init(traits:)()
{
  return MEMORY[0x1F40FF748]();
}

Swift::Void __swiftcall StoredLocationBase.invalidate()()
{
}

uint64_t StoredLocationBase.updateValue.getter()
{
  return MEMORY[0x1F40FF758]();
}

uint64_t StoredLocationBase.get()()
{
  return MEMORY[0x1F40FF760]();
}

uint64_t StoredLocationBase.set(_:transaction:)()
{
  return MEMORY[0x1F40FF768]();
}

uint64_t StoredLocationBase.wasRead.getter()
{
  return MEMORY[0x1F40FF770]();
}

uint64_t StoredLocationBase.wasRead.setter()
{
  return MEMORY[0x1F40FF778]();
}

uint64_t type metadata accessor for StyleContextWriter()
{
  return MEMORY[0x1F40FF780]();
}

Swift::Int __swiftcall SubviewsCollection.index(after:)(Swift::Int after)
{
  return MEMORY[0x1F40FF788](after);
}

uint64_t SubviewsCollection.endIndex.getter()
{
  return MEMORY[0x1F40FF790]();
}

uint64_t static SystemStyleMetrics.list.getter()
{
  return MEMORY[0x1F40FF798]();
}

uint64_t static TimeDataFormatting.attribute.getter()
{
  return MEMORY[0x1F40FF7A0]();
}

Swift::Void __swiftcall ValueCycleDetector.reset()()
{
}

uint64_t ValueCycleDetector.dispatch(value:label:isDebug:)()
{
  return MEMORY[0x1F40FF7B0]();
}

uint64_t type metadata accessor for ValueCycleDetector()
{
  return MEMORY[0x1F40FF7C0]();
}

uint64_t static ViewInputsModifier._viewListCount(inputs:body:)()
{
  return MEMORY[0x1F40FF7E0]();
}

uint64_t type metadata accessor for _AnimationModifier()
{
  return MEMORY[0x1F40FF7E8]();
}

uint64_t type metadata accessor for _InsetViewModifier()
{
  return MEMORY[0x1F40FF7F0]();
}

uint64_t _OpacityShapeStyle.init(style:opacity:)()
{
  return MEMORY[0x1F40FF7F8]();
}

uint64_t _ViewList_Elements.makeOneElement(at:inputs:indirectMap:body:)()
{
  return MEMORY[0x1F40FF808]();
}

uint64_t dispatch thunk of _ViewList_ID_Views.isEqual(to:)()
{
  return MEMORY[0x1F40FF810]();
}

uint64_t dispatch thunk of _ViewList_ID_Views.endIndex.getter()
{
  return MEMORY[0x1F40FF818]();
}

uint64_t type metadata accessor for _ViewList_ID_Views()
{
  return MEMORY[0x1F40FF820]();
}

uint64_t dispatch thunk of _ViewList_ID_Views.subscript.getter()
{
  return MEMORY[0x1F40FF828]();
}

uint64_t _ViewList_Subgraph.__allocating_init(subgraph:)()
{
  return MEMORY[0x1F40FF830]();
}

uint64_t _ViewList_Subgraph.init(subgraph:)()
{
  return MEMORY[0x1F40FF838]();
}

uint64_t _ViewList_Subgraph.subgraph.getter()
{
  return MEMORY[0x1F40FF840]();
}

uint64_t _ViewList_Subgraph.wrapping(_:)()
{
  return MEMORY[0x1F40FF848]();
}

uint64_t type metadata accessor for _ViewList_Subgraph()
{
  return MEMORY[0x1F40FF850]();
}

uint64_t _ViewList_Subgraph.deinit()
{
  return MEMORY[0x1F40FF858]();
}

uint64_t makeParagraphStyle(environment:)()
{
  return MEMORY[0x1F40FF860]();
}

uint64_t makeStableTypeData(_:)()
{
  return MEMORY[0x1F40FF868]();
}

Swift::Void __swiftcall printEventBindings(_:)(Swift::OpaquePointer a1)
{
}

uint64_t AccessibilityNumber.value.getter()
{
  return MEMORY[0x1F40FF878]();
}

uint64_t AnyGestureResponder.canPrevent(_:otherExclusionPolicy:)()
{
  return MEMORY[0x1F40FF880]();
}

uint64_t AnyGestureResponder.isCancellable.getter()
{
  return MEMORY[0x1F40FF888]();
}

uint64_t AnyGestureResponder.requiredTapCount.getter()
{
  return MEMORY[0x1F40FF890]();
}

uint64_t AnyGestureResponder.shouldRequireFailure(of:)()
{
  return MEMORY[0x1F40FF898]();
}

uint64_t static EnvironmentModifier._makeInputs(modifier:inputs:)()
{
  return MEMORY[0x1F40FF8A0]();
}

uint64_t EventBindingManager.addForwardedEventDispatcher(_:)()
{
  return MEMORY[0x1F40FF8A8]();
}

uint64_t EventBindingManager.send<A>(_:id:)()
{
  return MEMORY[0x1F40FF8B0]();
}

uint64_t EventBindingManager.send(_:)()
{
  return MEMORY[0x1F40FF8B8]();
}

uint64_t EventBindingManager.__allocating_init()()
{
  return MEMORY[0x1F40FF8C0]();
}

uint64_t type metadata accessor for EventBindingManager()
{
  return MEMORY[0x1F40FF8C8]();
}

uint64_t static GestureViewModifier.makeView(modifier:inputs:body:)()
{
  return MEMORY[0x1F40FF8D0]();
}

uint64_t static HorizontalAlignment.leadingText.getter()
{
  return MEMORY[0x1F40FF8D8]();
}

uint64_t static HorizontalAlignment.formDetailLeading.getter()
{
  return MEMORY[0x1F40FF8E0]();
}

uint64_t static HorizontalAlignment.listRowSeparatorLeading.getter()
{
  return MEMORY[0x1F40FF8E8]();
}

uint64_t static HorizontalAlignment.listRowSeparatorTrailing.getter()
{
  return MEMORY[0x1F40FF8F0]();
}

uint64_t static HorizontalAlignment.center.getter()
{
  return MEMORY[0x1F40FF8F8]();
}

uint64_t static HorizontalAlignment.leading.getter()
{
  return MEMORY[0x1F40FF900]();
}

uint64_t static HorizontalAlignment.trailing.getter()
{
  return MEMORY[0x1F40FF908]();
}

uint64_t LeafResponderFilter.init(data:size:position:transform:)()
{
  return MEMORY[0x1F40FF910]();
}

uint64_t type metadata accessor for LeafResponderFilter()
{
  return MEMORY[0x1F40FF918]();
}

uint64_t static ProjectionTransform.== infix(_:_:)()
{
  return MEMORY[0x1F40FF930]();
}

uint64_t ResolvedShadowStyle.animatableData.getter()
{
  return MEMORY[0x1F40FF938]();
}

uint64_t ResolvedShadowStyle.animatableData.setter()
{
  return MEMORY[0x1F40FF940]();
}

uint64_t ResolvedVectorGlyph.renderingMode.getter()
{
  return MEMORY[0x1F40FF948]();
}

uint64_t ResolvedVectorGlyph.resolvedRenderingMode.getter()
{
  return MEMORY[0x1F40FF950]();
}

uint64_t ResolvedVectorGlyph.glyph.getter()
{
  return MEMORY[0x1F40FF958]();
}

uint64_t ResolvedVectorGlyph.value.getter()
{
  return MEMORY[0x1F40FF960]();
}

uint64_t ScrollAnchorStorage.adjustedAnchor(role:layoutDirection:)()
{
  return MEMORY[0x1F40FF968]();
}

uint64_t ScrollAnchorStorage.updateRole(_:anchor:)()
{
  return MEMORY[0x1F40FF970]();
}

uint64_t ScrollAnchorStorage.sizeChanges.getter()
{
  return MEMORY[0x1F40FF978]();
}

uint64_t static ScrollAnchorStorage.== infix(_:_:)()
{
  return MEMORY[0x1F40FF980]();
}

uint64_t ScrollAnchorStorage.alignment.getter()
{
  return MEMORY[0x1F40FF988]();
}

uint64_t ScrollAnchorStorage.init()()
{
  return MEMORY[0x1F40FF990]();
}

uint64_t static ScrollGeometryState.== infix(_:_:)()
{
  return MEMORY[0x1F40FF998]();
}

uint64_t static ScrollGeometryState.zero.getter()
{
  return MEMORY[0x1F40FF9A0]();
}

uint64_t ScrollGeometryState.init(geometry:scrollableAxes:transform:)()
{
  return MEMORY[0x1F40FF9A8]();
}

uint64_t ScrollGeometryState.transform.getter()
{
  return MEMORY[0x1F40FF9B0]();
}

uint64_t ScrollPrefetchState.commit(to:)()
{
  return MEMORY[0x1F40FF9B8]();
}

uint64_t ScrollPrefetchState.init(deadline:)()
{
  return MEMORY[0x1F40FF9C0]();
}

uint64_t ScrollableContainer.setParentTarget(_:)()
{
  return MEMORY[0x1F40FF9D0]();
}

uint64_t SeparatorShapeStyle._apply(to:)()
{
  return MEMORY[0x1F40FF9F0]();
}

uint64_t StyledTextResponder.addContentPath(to:kind:in:observer:)()
{
  return MEMORY[0x1F40FF9F8]();
}

uint64_t type metadata accessor for StyledTextResponder()
{
  return MEMORY[0x1F40FFA00]();
}

uint64_t type metadata accessor for TypesettingLanguage.Storage()
{
  return MEMORY[0x1F40FFA08]();
}

uint64_t static TypesettingLanguage.explicit(_:)()
{
  return MEMORY[0x1F40FFA10]();
}

uint64_t static TypesettingLanguage.automatic.getter()
{
  return MEMORY[0x1F40FFA18]();
}

uint64_t type metadata accessor for TypesettingLanguage()
{
  return MEMORY[0x1F40FFA20]();
}

uint64_t UpdateCycleDetector.dispatch(label:isDebug:)()
{
  return MEMORY[0x1F40FFA28]();
}

uint64_t UpdateCycleDetector.init()()
{
  return MEMORY[0x1F40FFA30]();
}

uint64_t ViewTraitCollection.isEmptyView.getter()
{
  return MEMORY[0x1F40FFA38]();
}

uint64_t ViewTraitCollection.groupDepth.modify()
{
  return MEMORY[0x1F40FFA40]();
}

uint64_t ViewTraitCollection.groupDepth.getter()
{
  return MEMORY[0x1F40FFA48]();
}

uint64_t ViewTraitCollection.transition.getter()
{
  return MEMORY[0x1F40FFA50]();
}

uint64_t ViewTraitCollection.isSectioned.getter()
{
  return MEMORY[0x1F40FFA58]();
}

uint64_t ViewTraitCollection.isSectionFooter.getter()
{
  return MEMORY[0x1F40FFA60]();
}

uint64_t ViewTraitCollection.isSectionHeader.getter()
{
  return MEMORY[0x1F40FFA68]();
}

uint64_t ViewTraitCollection.isAuxiliaryContent.getter()
{
  return MEMORY[0x1F40FFA70]();
}

uint64_t ViewTraitCollection.optionalTransition()()
{
  return MEMORY[0x1F40FFA78]();
}

uint64_t ViewTraitCollection.tag<A>(for:)()
{
  return MEMORY[0x1F40FFA80]();
}

uint64_t ViewTraitCollection.value<A>(for:defaultValue:)()
{
  return MEMORY[0x1F40FFA88]();
}

uint64_t ViewTraitCollection.value<A>(for:)()
{
  return MEMORY[0x1F40FFA90]();
}

uint64_t ViewTraitCollection.setTag<A>(for:value:)()
{
  return MEMORY[0x1F40FFA98]();
}

uint64_t ViewTraitCollection.zIndex.getter()
{
  return MEMORY[0x1F40FFAA0]();
}

uint64_t ViewTraitCollection.init()()
{
  return MEMORY[0x1F40FFAA8]();
}

uint64_t ViewTraitCollection.subscript.getter()
{
  return MEMORY[0x1F40FFAB0]();
}

uint64_t ViewTraitCollection.subscript.setter()
{
  return MEMORY[0x1F40FFAB8]();
}

uint64_t _BackgroundModifier.init(background:alignment:)()
{
  return MEMORY[0x1F40FFAC0]();
}

uint64_t type metadata accessor for _BackgroundModifier()
{
  return MEMORY[0x1F40FFAC8]();
}

uint64_t type metadata accessor for _ConditionalContent.Storage()
{
  return MEMORY[0x1F40FFAD0]();
}

uint64_t _ConditionalContent<>.init(storage:)()
{
  return MEMORY[0x1F40FFAD8]();
}

uint64_t type metadata accessor for _ConditionalContent.Info()
{
  return MEMORY[0x1F40FFAE0]();
}

uint64_t _ConditionalContent.Container.init(content:provider:)()
{
  return MEMORY[0x1F40FFAE8]();
}

uint64_t type metadata accessor for _ConditionalContent.Container()
{
  return MEMORY[0x1F40FFAF0]();
}

uint64_t type metadata accessor for _ConditionalContent()
{
  return MEMORY[0x1F40FFAF8]();
}

uint64_t _ShaderFilterEffect.init(shader:maxSampleOffset:enabled:)()
{
  return MEMORY[0x1F40FFB00]();
}

uint64_t static _ShaderFilterEffect._makeView(modifier:inputs:body:)()
{
  return MEMORY[0x1F40FFB08]();
}

uint64_t _eventDebugTriggers.getter()
{
  return MEMORY[0x1F40FFB10]();
}

uint64_t defaultSpacingValue.getter()
{
  return MEMORY[0x1F40FFB18]();
}

uint64_t static BackgroundProminence.== infix(_:_:)()
{
  return MEMORY[0x1F40FFB20]();
}

uint64_t static BackgroundProminence.standard.getter()
{
  return MEMORY[0x1F40FFB28]();
}

uint64_t static BackgroundProminence.increased.getter()
{
  return MEMORY[0x1F40FFB30]();
}

uint64_t CodablePlatformImage.kitImage.getter()
{
  return MEMORY[0x1F40FFB38]();
}

uint64_t CodablePlatformImage.init(from:)()
{
  return MEMORY[0x1F40FFB40]();
}

uint64_t CodablePlatformImage.init(_:)()
{
  return MEMORY[0x1F40FFB48]();
}

uint64_t DynamicContainerItem.list.getter()
{
  return MEMORY[0x1F40FFB50]();
}

uint64_t static DynamicPropertyCache.fields(of:)()
{
  return MEMORY[0x1F40FFB58]();
}

uint64_t type metadata accessor for EnvironmentObjectKey()
{
  return MEMORY[0x1F40FFB60]();
}

uint64_t static GestureStateProtocol.gesture<A, B>(content:_:)()
{
  return MEMORY[0x1F40FFB68]();
}

uint64_t IndirectAttributeMap.map.modify()
{
  return MEMORY[0x1F40FFB80]();
}

uint64_t IndirectAttributeMap.map.getter()
{
  return MEMORY[0x1F40FFB88]();
}

uint64_t IndirectAttributeMap.__allocating_init(subgraph:)()
{
  return MEMORY[0x1F40FFB90]();
}

uint64_t IndirectAttributeMap.subgraph.getter()
{
  return MEMORY[0x1F40FFB98]();
}

uint64_t type metadata accessor for IndirectAttributeMap()
{
  return MEMORY[0x1F40FFBA0]();
}

uint64_t PlatformGroupFactory.features.getter()
{
  return MEMORY[0x1F40FFBB0]();
}

uint64_t PlatformLayerFactory.renderPlatformLayer(in:size:renderer:)()
{
  return MEMORY[0x1F40FFBB8]();
}

uint64_t RasterizationOptions.init(colorMode:rbColorMode:flags:maxDrawableCount:)()
{
  return MEMORY[0x1F40FFBC0]();
}

uint64_t default argument 2 of RasterizationOptions.init(colorMode:rbColorMode:flags:maxDrawableCount:)()
{
  return MEMORY[0x1F40FFBC8]();
}

uint64_t RectangleCornerRadii.init(topLeft:topRight:bottomRight:bottomLeft:)()
{
  return MEMORY[0x1F40FFBD0]();
}

uint64_t SectionConfiguration.containerValues.getter()
{
  return MEMORY[0x1F40FFBD8]();
}

uint64_t SubscriptionLifetime.subscribe<A>(subscriber:to:)()
{
  return MEMORY[0x1F40FFBE0]();
}

uint64_t SubscriptionLifetime.__allocating_init()()
{
  return MEMORY[0x1F40FFBE8]();
}

uint64_t SubscriptionLifetime.init()()
{
  return MEMORY[0x1F40FFBF0]();
}

uint64_t type metadata accessor for SubscriptionLifetime()
{
  return MEMORY[0x1F40FFBF8]();
}

uint64_t TappableSpatialEvent.location.getter()
{
  return MEMORY[0x1F40FFC00]();
}

uint64_t TextLayoutProperties.minScaleFactor.getter()
{
  return MEMORY[0x1F40FFC08]();
}

uint64_t _IdentifiedViewProxy.adjustment.setter()
{
  return MEMORY[0x1F40FFC10]();
}

uint64_t _IdentifiedViewProxy.init(identifier:size:position:transform:accessibilityNode:platform:)()
{
  return MEMORY[0x1F40FFC18]();
}

uint64_t _IntelligenceSupport.AnimatingSummarySymbol.font.getter()
{
  return MEMORY[0x1F40FFC20]();
}

uint64_t _IntelligenceSupport.AnimatingSummarySymbol.init(isOn:font:foregroundColor:)()
{
  return MEMORY[0x1F40FFC28]();
}

uint64_t _IntelligenceSupport.AnimatingSummarySymbol.color.getter()
{
  return MEMORY[0x1F40FFC30]();
}

uint64_t _OpacitiesShapeStyle.init(style:opacities:)()
{
  return MEMORY[0x1F40FFC38]();
}

uint64_t _ValueActionModifier.init(value:action:)()
{
  return MEMORY[0x1F40FFC40]();
}

uint64_t type metadata accessor for _ValueActionModifier()
{
  return MEMORY[0x1F40FFC48]();
}

uint64_t _ViewListCountInputs.append<A, B>(_:to:)()
{
  return MEMORY[0x1F40FFC50]();
}

uint64_t _ViewListCountInputs.popLast<A, B>(_:)()
{
  return MEMORY[0x1F40FFC58]();
}

Swift::Void __swiftcall _ViewListCountInputs.resetCurrentStyleableView()()
{
}

uint64_t _ViewListCountInputs.init(_:)()
{
  return MEMORY[0x1F40FFC68]();
}

uint64_t AccessibilityTraitSet.init(traits:)()
{
  return MEMORY[0x1F40FFC70]();
}

uint64_t AnyAccessibilityValue.displayDescription.getter()
{
  return MEMORY[0x1F40FFC78]();
}

uint64_t AnyAccessibilityValue.as<A>(_:)()
{
  return MEMORY[0x1F40FFC80]();
}

uint64_t AnyAccessibilityValue.type.getter()
{
  return MEMORY[0x1F40FFC88]();
}

uint64_t static CatalogAssetMatchType.defaultValue(idiom:)()
{
  return MEMORY[0x1F40FFC90]();
}

uint64_t EmptyViewRendererHost.init(environment:)()
{
  return MEMORY[0x1F40FFC98]();
}

uint64_t type metadata accessor for EmptyViewRendererHost()
{
  return MEMORY[0x1F40FFCA0]();
}

uint64_t static EnvironmentalModifier._tracksEnvironmentDependencies.getter()
{
  return MEMORY[0x1F40FFCB8]();
}

uint64_t LayoutChildGeometries.init(parentSize:parentPosition:layoutComputer:)()
{
  return MEMORY[0x1F40FFCC8]();
}

uint64_t LayoutProxyAttributes.init(layoutComputer:traitsList:)()
{
  return MEMORY[0x1F40FFCD0]();
}

uint64_t LayoutProxyCollection.init(context:attributes:)()
{
  return MEMORY[0x1F40FFCD8]();
}

uint64_t static MinimumScaleFactorKey.defaultValue.getter()
{
  return MEMORY[0x1F40FFCE0]();
}

Swift::Void __swiftcall ResettableGestureRule.resetPhase()()
{
}

Swift::Bool __swiftcall ResettableGestureRule.resetIfNeeded()()
{
  return MEMORY[0x1F40FFCF8]();
}

uint64_t ResolvableCurrentDate.timeZone.getter()
{
  return MEMORY[0x1F40FFD00]();
}

uint64_t static ResolvableCurrentDate.attribute.getter()
{
  return MEMORY[0x1F40FFD08]();
}

uint64_t type metadata accessor for ResolvableCurrentDate()
{
  return MEMORY[0x1F40FFD10]();
}

uint64_t static ScrollCoordinateSpace.horizontal.getter()
{
  return MEMORY[0x1F40FFD18]();
}

uint64_t static ScrollCoordinateSpace.all.getter()
{
  return MEMORY[0x1F40FFD20]();
}

uint64_t static ScrollCoordinateSpace.content.getter()
{
  return MEMORY[0x1F40FFD28]();
}

uint64_t static ScrollCoordinateSpace.safeArea.getter()
{
  return MEMORY[0x1F40FFD30]();
}

uint64_t static ScrollCoordinateSpace.vertical.getter()
{
  return MEMORY[0x1F40FFD38]();
}

uint64_t SizeAndSpacingContext.subscript.getter()
{
  return MEMORY[0x1F40FFD40]();
}

uint64_t SizeAndSpacingContext.update<A>(_:)()
{
  return MEMORY[0x1F40FFD48]();
}

uint64_t SizeAndSpacingContext.context.getter()
{
  return MEMORY[0x1F40FFD50]();
}

uint64_t SizeAndSpacingContext.init(context:owner:environment:)()
{
  return MEMORY[0x1F40FFD58]();
}

uint64_t type metadata accessor for StateContainerGesture()
{
  return MEMORY[0x1F40FFD60]();
}

uint64_t type metadata accessor for StrokeBorderShapeView()
{
  return MEMORY[0x1F40FFD68]();
}

uint64_t ValueActionDispatcher.init(modifier:phase:)()
{
  return MEMORY[0x1F40FFD70]();
}

uint64_t type metadata accessor for ValueActionDispatcher()
{
  return MEMORY[0x1F40FFD78]();
}

uint64_t type metadata accessor for ValueToScrollPosition()
{
  return MEMORY[0x1F40FFD80]();
}

uint64_t _DisplayList_Identity.init()()
{
  return MEMORY[0x1F40FFD88]();
}

uint64_t static _TraitWritingModifier._makeViewList(modifier:inputs:body:)()
{
  return MEMORY[0x1F40FFD90]();
}

uint64_t type metadata accessor for _TraitWritingModifier()
{
  return MEMORY[0x1F40FFD98]();
}

uint64_t type metadata accessor for _ValueActionModifier2()
{
  return MEMORY[0x1F40FFDA0]();
}

uint64_t type metadata accessor for _ViewModifier_Content()
{
  return MEMORY[0x1F40FFDA8]();
}

uint64_t type metadata accessor for AnyDynamicFontModifier()
{
  return MEMORY[0x1F40FFDB8]();
}

uint64_t ConcatenatedCollection.startIndex.getter()
{
  return MEMORY[0x1F40FFDC0]();
}

uint64_t ConcatenatedCollection.index(after:)()
{
  return MEMORY[0x1F40FFDC8]();
}

uint64_t ConcatenatedCollection.endIndex.getter()
{
  return MEMORY[0x1F40FFDD0]();
}

uint64_t type metadata accessor for ConcatenatedCollection()
{
  return MEMORY[0x1F40FFDD8]();
}

uint64_t ConcatenatedCollection.subscript.getter()
{
  return MEMORY[0x1F40FFDE0]();
}

uint64_t ContentResponderHelper.addContentPath(to:kind:in:observer:)()
{
  return MEMORY[0x1F40FFDE8]();
}

uint64_t ContentResponderHelper.globalPosition.getter()
{
  return MEMORY[0x1F40FFDF0]();
}

uint64_t ContentResponderHelper.containsGlobalPoints(_:cacheKey:options:children:)()
{
  return MEMORY[0x1F40FFDF8]();
}

uint64_t ContentResponderHelper.size.getter()
{
  return MEMORY[0x1F40FFE00]();
}

uint64_t ContentResponderHelper.update(data:size:position:transform:parent:)()
{
  return MEMORY[0x1F40FFE08]();
}

uint64_t ContentResponderHelper.init()()
{
  return MEMORY[0x1F40FFE10]();
}

uint64_t type metadata accessor for ContentResponderHelper()
{
  return MEMORY[0x1F40FFE18]();
}

uint64_t type metadata accessor for CoordinateSpaceGesture()
{
  return MEMORY[0x1F40FFE20]();
}

uint64_t type metadata accessor for EnvironmentPropertyKey()
{
  return MEMORY[0x1F40FFE28]();
}

uint64_t GroupElementsOfContent.init(subviews:content:)()
{
  return MEMORY[0x1F40FFE30]();
}

uint64_t type metadata accessor for GroupElementsOfContent()
{
  return MEMORY[0x1F40FFE38]();
}

uint64_t static HierarchicalShapeStyle.sharedPrimary.getter()
{
  return MEMORY[0x1F40FFE40]();
}

uint64_t ImageResolutionContext.init(environment:textStyle:transaction:)()
{
  return MEMORY[0x1F40FFE50]();
}

uint64_t default argument 2 of ImageResolutionContext.init(environment:textStyle:transaction:)()
{
  return MEMORY[0x1F40FFE58]();
}

uint64_t ImageResolutionContext.effectiveAllowedDynamicRange(for:)()
{
  return MEMORY[0x1F40FFE60]();
}

uint64_t type metadata accessor for ImageResolutionContext()
{
  return MEMORY[0x1F40FFE68]();
}

uint64_t PlaceholderContentView.init()()
{
  return MEMORY[0x1F40FFE70]();
}

uint64_t type metadata accessor for PlaceholderContentView()
{
  return MEMORY[0x1F40FFE78]();
}

uint64_t ResolvableAbsoluteDate.date.getter()
{
  return MEMORY[0x1F40FFE88]();
}

uint64_t static ResolvableAbsoluteDate.attribute.getter()
{
  return MEMORY[0x1F40FFE90]();
}

uint64_t type metadata accessor for ResolvableAbsoluteDate()
{
  return MEMORY[0x1F40FFE98]();
}

uint64_t ResolvableDateInterval.interval.getter()
{
  return MEMORY[0x1F40FFEA0]();
}

uint64_t static ResolvableDateInterval.attribute.getter()
{
  return MEMORY[0x1F40FFEA8]();
}

uint64_t type metadata accessor for ResolvableDateInterval()
{
  return MEMORY[0x1F40FFEB0]();
}

uint64_t ResolvedSafeAreaInsets.value.getter()
{
  return MEMORY[0x1F40FFEB8]();
}

uint64_t ResolvedSafeAreaInsets.init(regions:environment:size:position:transform:safeAreaInsets:)()
{
  return MEMORY[0x1F40FFEC0]();
}

uint64_t ViewGraphRenderContext.contentsScale.setter()
{
  return MEMORY[0x1F40FFED0]();
}

uint64_t type metadata accessor for _BindingActionModifier()
{
  return MEMORY[0x1F40FFED8]();
}

uint64_t type metadata accessor for _DelayedPreferenceView()
{
  return MEMORY[0x1F40FFEE0]();
}

uint64_t _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)()
{
  return MEMORY[0x1F40FFEE8]();
}

Swift::Void __swiftcall _DynamicPropertyBuffer.reset()()
{
}

uint64_t _DynamicPropertyBuffer.append<A>(_:fieldOffset:)()
{
  return MEMORY[0x1F40FFEF8]();
}

uint64_t _DynamicPropertyBuffer.init<A>(fields:container:inputs:)()
{
  return MEMORY[0x1F40FFF00]();
}

uint64_t _DynamicPropertyBuffer.update(container:phase:)()
{
  return MEMORY[0x1F40FFF08]();
}

Swift::Void __swiftcall _DynamicPropertyBuffer.destroy()()
{
}

uint64_t _DynamicPropertyBuffer.addFields<A>(_:container:inputs:baseOffset:)()
{
  return MEMORY[0x1F40FFF18]();
}

uint64_t static _VariadicView_Children._makeViewList(view:inputs:)()
{
  return MEMORY[0x1F40FFF20]();
}

uint64_t _VariadicView_Children.Element.id<A>(as:)()
{
  return MEMORY[0x1F40FFF28]();
}

uint64_t _VariadicView_Children.endIndex.getter()
{
  return MEMORY[0x1F40FFF30]();
}

uint64_t _VariadicView_Children.init(_:contentSubgraph:transform:)()
{
  return MEMORY[0x1F40FFF38]();
}

uint64_t default argument 2 of _VariadicView_Children.init(_:contentSubgraph:transform:)()
{
  return MEMORY[0x1F40FFF40]();
}

uint64_t _VariadicView_Children.subscript.getter()
{
  return MEMORY[0x1F40FFF48]();
}

Swift::Void __swiftcall mainThreadPrecondition()()
{
}

uint64_t AccessibilityAttachment.init(properties:platformElement:)()
{
  return MEMORY[0x1F40FFF58]();
}

uint64_t AccessibilityAttachment.init(properties:)()
{
  return MEMORY[0x1F40FFF60]();
}

uint64_t static AccessibilityAttachment.properties(_:)()
{
  return MEMORY[0x1F40FFF68]();
}

uint64_t AccessibilityAttachment.platformElement.getter()
{
  return MEMORY[0x1F40FFF70]();
}

uint64_t AccessibilityAttachment.platformElement.setter()
{
  return MEMORY[0x1F40FFF78]();
}

uint64_t static AccessibilityAttachment.== infix(_:_:)()
{
  return MEMORY[0x1F40FFF80]();
}

uint64_t AccessibilityAttachment.isEmpty.getter()
{
  return MEMORY[0x1F40FFF88]();
}

uint64_t AccessibilityAttachment.init()()
{
  return MEMORY[0x1F40FFF90]();
}

uint64_t AccessibilityAttachment.init<A>(_:applicator:)()
{
  return MEMORY[0x1F40FFF98]();
}

uint64_t static AccessibilityImageLabel.== infix(_:_:)()
{
  return MEMORY[0x1F40FFFA0]();
}

uint64_t AccessibilityImageLabel.text.getter()
{
  return MEMORY[0x1F40FFFA8]();
}

uint64_t AccessibilityProperties.visibility.modify()
{
  return MEMORY[0x1F40FFFB0]();
}

uint64_t AccessibilityProperties.visibility.getter()
{
  return MEMORY[0x1F40FFFB8]();
}

uint64_t AccessibilityProperties.visibility.setter()
{
  return MEMORY[0x1F40FFFC0]();
}

uint64_t AccessibilityProperties.labelStorage.modify()
{
  return MEMORY[0x1F40FFFC8]();
}

uint64_t static AccessibilityProperties.VisibilityKey.defaultValue.getter()
{
  return MEMORY[0x1F40FFFD0]();
}

uint64_t AccessibilityProperties.customContentList.modify()
{
  return MEMORY[0x1F40FFFD8]();
}

uint64_t AccessibilityProperties.customContentList.getter()
{
  return MEMORY[0x1F40FFFE0]();
}

uint64_t AccessibilityProperties.explicitAutomationType.getter()
{
  return MEMORY[0x1F40FFFE8]();
}

uint64_t AccessibilityProperties.explicitAutomationType.setter()
{
  return MEMORY[0x1F40FFFF0]();
}

uint64_t AccessibilityProperties.hints.getter()
{
  return MEMORY[0x1F40FFFF8]();
}

uint64_t AccessibilityProperties.hints.setter()
{
  return MEMORY[0x1F4100000]();
}

uint64_t AccessibilityProperties.subscript.getter()
{
  return MEMORY[0x1F4100008]();
}

{
  return MEMORY[0x1F4100010]();
}

{
  return MEMORY[0x1F4100048]();
}

uint64_t AccessibilityProperties.subscript.setter()
{
  return MEMORY[0x1F4100018]();
}

{
  return MEMORY[0x1F4100050]();
}

uint64_t AccessibilityProperties.locale.getter()
{
  return MEMORY[0x1F4100020]();
}

uint64_t AccessibilityProperties.locale.setter()
{
  return MEMORY[0x1F4100028]();
}

uint64_t AccessibilityProperties.traits.modify()
{
  return MEMORY[0x1F4100030]();
}

uint64_t AccessibilityProperties.traits.getter()
{
  return MEMORY[0x1F4100038]();
}

uint64_t static AccessibilityProperties.TraitsKey.defaultValue.getter()
{
  return MEMORY[0x1F4100040]();
}

uint64_t AccessibilityProperties.init<A>(_:_:)()
{
  return MEMORY[0x1F4100058]();
}

uint64_t static AccessibilityVisibility.containerElement.getter()
{
  return MEMORY[0x1F4100060]();
}

uint64_t AccessibilityVisibility.init(_:)()
{
  return MEMORY[0x1F4100068]();
}

uint64_t type metadata accessor for AppearanceAnimationView()
{
  return MEMORY[0x1F4100070]();
}

uint64_t type metadata accessor for ApplyTransitionModifier()
{
  return MEMORY[0x1F4100078]();
}

uint64_t CodableAttributedString.base.getter()
{
  return MEMORY[0x1F4100080]();
}

uint64_t CodableAttributedString.init(from:)()
{
  return MEMORY[0x1F4100088]();
}

uint64_t CodableAttributedString.init(_:)()
{
  return MEMORY[0x1F4100090]();
}

uint64_t static ContainerBackgroundKind.Builtin.allCases.getter()
{
  return MEMORY[0x1F4100098]();
}

uint64_t static CoordinateSpaceProtocol<>.scrollView(axis:)()
{
  return MEMORY[0x1F41000A0]();
}

uint64_t static CoordinateSpaceProtocol<>.scrollView.getter()
{
  return MEMORY[0x1F41000A8]();
}

uint64_t type metadata accessor for CountingIndexCollection()
{
  return MEMORY[0x1F41000B0]();
}

uint64_t CountingIndexCollection.subscript.getter()
{
  return MEMORY[0x1F41000B8]();
}

uint64_t ForegroundMaterialStyle._apply(to:)()
{
  return MEMORY[0x1F41000C8]();
}

uint64_t static GestureContainerFeature.isEnabled.getter()
{
  return MEMORY[0x1F41000D0]();
}

uint64_t static InterfaceIdiomPredicate.evaluate(inputs:)()
{
  return MEMORY[0x1F41000D8]();
}

uint64_t type metadata accessor for InterfaceIdiomPredicate()
{
  return MEMORY[0x1F41000E0]();
}

uint64_t LayoutGestureChildProxy.bindChild(index:event:id:)()
{
  return MEMORY[0x1F41000E8]();
}

Swift::Bool __swiftcall LayoutGestureChildProxy.Child.containsGlobalLocation(_:)(CGPoint a1)
{
  return MEMORY[0x1F41000F0]((__n128)__PAIR128__(v1, *(unint64_t *)&a1.x), (__n128)__PAIR128__(v2, *(unint64_t *)&a1.y));
}

uint64_t LayoutGestureChildProxy.Child.binds(_:)()
{
  return MEMORY[0x1F41000F8]();
}

uint64_t LayoutGestureChildProxy.endIndex.getter()
{
  return MEMORY[0x1F4100100]();
}

uint64_t LayoutGestureChildProxy.subscript.getter()
{
  return MEMORY[0x1F4100108]();
}

uint64_t PlatformDrawableContent.draw(in:size:contentsScale:state:)()
{
  return MEMORY[0x1F4100110]();
}

uint64_t PlatformDrawableContent.draw(in:size:state:)()
{
  return MEMORY[0x1F4100118]();
}

uint64_t PlatformDrawableContent.init()()
{
  return MEMORY[0x1F4100120]();
}

uint64_t PlatformDrawableOptions.caLayerContentsFormat.getter()
{
  return MEMORY[0x1F4100128]();
}

uint64_t PlatformDrawableOptions.update(rbLayer:)()
{
  return MEMORY[0x1F4100130]();
}

uint64_t static UserDefaultKeyedFeature.isEnabled.getter()
{
  return MEMORY[0x1F4100140]();
}

uint64_t _SafeAreaInsetsModifier.init(insets:nextInsets:)()
{
  return MEMORY[0x1F4100148]();
}

uint64_t type metadata accessor for ForEachSubviewCollection()
{
  return MEMORY[0x1F4100150]();
}

uint64_t PeriodicTimelineSchedule.init(from:by:)()
{
  return MEMORY[0x1F4100158]();
}

uint64_t type metadata accessor for PeriodicTimelineSchedule.Entries()
{
  return MEMORY[0x1F4100160]();
}

uint64_t PeriodicTimelineSchedule.entries(from:mode:)()
{
  return MEMORY[0x1F4100168]();
}

uint64_t type metadata accessor for PeriodicTimelineSchedule()
{
  return MEMORY[0x1F4100170]();
}

uint64_t PreferenceValueAttribute.value.getter()
{
  return MEMORY[0x1F4100178]();
}

uint64_t PreferenceValueAttribute.init(source:)()
{
  return MEMORY[0x1F4100180]();
}

uint64_t static PreferenceValueAttribute.setSource(_:of:)()
{
  return MEMORY[0x1F4100188]();
}

uint64_t static PubliclyPrimitiveGesture.makeGesture(gesture:inputs:)()
{
  return MEMORY[0x1F4100190]();
}

uint64_t TypesettingConfiguration.init(language:languageAwareLineHeightRatio:)()
{
  return MEMORY[0x1F41001A0]();
}

uint64_t default argument 1 of TypesettingConfiguration.init(language:languageAwareLineHeightRatio:)()
{
  return MEMORY[0x1F41001A8]();
}

uint64_t type metadata accessor for TypesettingConfiguration()
{
  return MEMORY[0x1F41001B0]();
}

uint64_t static UnifiedHitTestingFeature.isEnabled.getter()
{
  return MEMORY[0x1F41001B8]();
}

uint64_t static _AnchorTransformModifier._makeView(modifier:inputs:body:)()
{
  return MEMORY[0x1F41001C0]();
}

uint64_t type metadata accessor for _AnchorTransformModifier()
{
  return MEMORY[0x1F41001C8]();
}

uint64_t type metadata accessor for _BackgroundStyleModifier()
{
  return MEMORY[0x1F41001D0]();
}

Swift::Void __swiftcall _CustomHoverEffectInputs.removeContextFromEnvironment()()
{
}

uint64_t _CustomHoverEffectInputs.init(base:context:)()
{
  return MEMORY[0x1F41001E0]();
}

uint64_t type metadata accessor for _ForegroundStyleModifier()
{
  return MEMORY[0x1F41001F0]();
}

uint64_t static _ShapeStyle_ResolverMode.== infix(_:_:)()
{
  return MEMORY[0x1F41001F8]();
}

uint64_t recursiveDescriptionName(_:)()
{
  return MEMORY[0x1F4100208]();
}

uint64_t static AccessibilityLabelStorage.== infix(_:_:)()
{
  return MEMORY[0x1F4100210]();
}

uint64_t AccessibilityLabelStorage.merge(with:)()
{
  return MEMORY[0x1F4100218]();
}

uint64_t AccessibilityLabelStorage.removing(_:)()
{
  return MEMORY[0x1F4100220]();
}

uint64_t type metadata accessor for AccessibilityTextModifier()
{
  return MEMORY[0x1F4100228]();
}

uint64_t AccessibilityValueStorage.platformMaxValue.getter()
{
  return MEMORY[0x1F4100230]();
}

uint64_t AccessibilityValueStorage.platformMinValue.getter()
{
  return MEMORY[0x1F4100238]();
}

uint64_t AccessibilityValueStorage.platformNumberValue.getter()
{
  return MEMORY[0x1F4100240]();
}

uint64_t AccessibilityValueStorage.init(description:)()
{
  return MEMORY[0x1F4100248]();
}

uint64_t AccessibilityValueStorage.valueDescription.getter()
{
  return MEMORY[0x1F4100250]();
}

uint64_t static AccessibilityValueStorage.== infix(_:_:)()
{
  return MEMORY[0x1F4100258]();
}

uint64_t AccessibilityValueStorage.merge(with:)()
{
  return MEMORY[0x1F4100260]();
}

uint64_t AccessibilityValueStorage.isBounded.getter()
{
  return MEMORY[0x1F4100268]();
}

uint64_t AccessibilityValueStorage.init<A>(_:description:)()
{
  return MEMORY[0x1F4100270]();
}

uint64_t AccessibilityValueStorage.init<A>(_:from:to:description:)()
{
  return MEMORY[0x1F4100278]();
}

uint64_t ScrollTargetConfiguration.init(transaction:)()
{
  return MEMORY[0x1F4100288]();
}

uint64_t static _AppearanceActionModifier._makeView(modifier:inputs:body:)()
{
  return MEMORY[0x1F4100290]();
}

uint64_t type metadata accessor for _PreferenceActionModifier()
{
  return MEMORY[0x1F4100298]();
}

uint64_t AccessibilityBoundedNumber.init<A>(for:in:by:)()
{
  return MEMORY[0x1F41002A0]();
}

uint64_t AccessibilityBoundedNumber.step.getter()
{
  return MEMORY[0x1F41002A8]();
}

uint64_t AccessibilityBoundedNumber.value.getter()
{
  return MEMORY[0x1F41002B0]();
}

uint64_t AccessibilityBoundedNumber.maxValue.getter()
{
  return MEMORY[0x1F41002B8]();
}

uint64_t AccessibilityBoundedNumber.minValue.getter()
{
  return MEMORY[0x1F41002C0]();
}

uint64_t DefaultLayoutViewResponder.viewSubgraph.getter()
{
  return MEMORY[0x1F41002C8]();
}

uint64_t DefaultLayoutViewResponder.init(inputs:viewSubgraph:)()
{
  return MEMORY[0x1F41002D0]();
}

uint64_t DefaultLayoutViewResponder.init(inputs:)()
{
  return MEMORY[0x1F41002D8]();
}

uint64_t type metadata accessor for DefaultLayoutViewResponder()
{
  return MEMORY[0x1F41002E0]();
}

uint64_t DefaultLayoutViewResponder.deinit()
{
  return MEMORY[0x1F41002E8]();
}

uint64_t type metadata accessor for InvertedViewInputPredicate()
{
  return MEMORY[0x1F41002F0]();
}

uint64_t ScrollStateEnqueueRequests.init(phaseState:scrollable:inputs:outputs:)()
{
  return MEMORY[0x1F41002F8]();
}

Swift::Void __swiftcall ScrollStateEnqueueRequests.updateValue()()
{
}

uint64_t ViewGraphGeometryObservers.addObserver(for:exclusive:callback:)()
{
  return MEMORY[0x1F4100318]();
}

uint64_t ViewGraphGeometryObservers.resetObserver(for:)()
{
  return MEMORY[0x1F4100320]();
}

uint64_t ViewGraphGeometryObservers.stopObserving(proposal:)()
{
  return MEMORY[0x1F4100328]();
}

Swift::Void __swiftcall ViewGraphGeometryObservers.removeAll()()
{
}

uint64_t type metadata accessor for ViewGraphGeometryObservers()
{
  return MEMORY[0x1F4100338]();
}

uint64_t static ViewRendererHostProperties.all.getter()
{
  return MEMORY[0x1F4100340]();
}

uint64_t type metadata accessor for _OverlayPreferenceModifier()
{
  return MEMORY[0x1F4100348]();
}

uint64_t _PreferenceWritingModifier.init(key:value:)()
{
  return MEMORY[0x1F4100350]();
}

uint64_t type metadata accessor for _PreferenceWritingModifier()
{
  return MEMORY[0x1F4100358]();
}

Swift::Void __swiftcall _ViewList_SublistTransform.pop()()
{
}

uint64_t _ViewList_SublistTransform.push<A>(_:)()
{
  return MEMORY[0x1F4100370]();
}

uint64_t _ViewList_SublistTransform.apply(sublist:)()
{
  return MEMORY[0x1F4100378]();
}

uint64_t _ViewList_SublistTransform.init()()
{
  return MEMORY[0x1F4100380]();
}

uint64_t hostingViewCoordinateSpace.getter()
{
  return MEMORY[0x1F4100388]();
}

uint64_t static AccessibilityActivationKind.defaultDescriptor.getter()
{
  return MEMORY[0x1F4100398]();
}

uint64_t type metadata accessor for AccessibilityNodeAttachment.Storage()
{
  return MEMORY[0x1F41003A0]();
}

uint64_t type metadata accessor for AccessibilityNodeAttachment()
{
  return MEMORY[0x1F41003A8]();
}

uint64_t AccessibilityNodeAttachment.init(_:platformStorage:in:idiom:createsNode:kind:encode:)()
{
  return MEMORY[0x1F41003B0]();
}

uint64_t static ConcatenatedCollectionIndex.== infix(_:_:)()
{
  return MEMORY[0x1F41003B8]();
}

uint64_t static ConditionallyArchivableView._viewListCount(inputs:)()
{
  return MEMORY[0x1F41003D0]();
}

uint64_t static DefaultDescriptionAttribute.all.getter()
{
  return MEMORY[0x1F41003D8]();
}

uint64_t ScrollGeometryStateProvider.init(geometry:scrollableAxes:transform:)()
{
  return MEMORY[0x1F41003E0]();
}

uint64_t ScrollStateRequestTransform.init(collection:inputs:)()
{
  return MEMORY[0x1F41003E8]();
}

Swift::Void __swiftcall ScrollStateRequestTransform.updateValue()()
{
}

uint64_t ScrollableCollectionSubview.init(id:frame:transform:)()
{
  return MEMORY[0x1F41003F8]();
}

uint64_t ScrollableCollectionSubview.frame.getter()
{
  return MEMORY[0x1F4100400]();
}

uint64_t TimeDataFormattingContainer.init(resolvable:)()
{
  return MEMORY[0x1F4100408]();
}

uint64_t TimeDataFormattingContainer.representation(for:)()
{
  return MEMORY[0x1F4100410]();
}

uint64_t static AccessibilityActivationPoint.Location.== infix(_:_:)()
{
  return MEMORY[0x1F4100418]();
}

uint64_t static AccessibilityAttachmentToken.== infix(_:_:)()
{
  return MEMORY[0x1F4100420]();
}

uint64_t AccessibilityAttachmentToken.hash(into:)()
{
  return MEMORY[0x1F4100428]();
}

uint64_t AccessibilityAttachmentToken.attribute.getter()
{
  return MEMORY[0x1F4100430]();
}

uint64_t AccessibilityAttachmentToken.init<A>(_:)()
{
  return MEMORY[0x1F4100438]();
}

uint64_t type metadata accessor for AccessibilityPropertiesEntry()
{
  return MEMORY[0x1F4100440]();
}

Swift::Void __swiftcall DefaultLayoutResponderFilter.updateValue()()
{
}

uint64_t DefaultLayoutResponderFilter.init(children:responder:)()
{
  return MEMORY[0x1F4100450]();
}

uint64_t static ImprovedButtonGestureFeature.isEnabled.getter()
{
  return MEMORY[0x1F4100458]();
}

uint64_t static StyleContextAcceptsPredicate.evaluate(inputs:)()
{
  return MEMORY[0x1F4100460]();
}

uint64_t type metadata accessor for StyleContextAcceptsPredicate()
{
  return MEMORY[0x1F4100468]();
}

uint64_t _PreferenceTransformModifier.init(key:transform:)()
{
  return MEMORY[0x1F4100470]();
}

uint64_t type metadata accessor for _PreferenceTransformModifier()
{
  return MEMORY[0x1F4100478]();
}

uint64_t defaultConvertEventLocations<A>(_:converter:)()
{
  return MEMORY[0x1F4100480]();
}

uint64_t AccessibilityCustomAttributes.attributeNames.getter()
{
  return MEMORY[0x1F4100488]();
}

uint64_t AccessibilityCustomAttributes.Value.axRepresentation()()
{
  return MEMORY[0x1F4100490]();
}

uint64_t AccessibilityCustomAttributes.Value.displayDescription.getter()
{
  return MEMORY[0x1F4100498]();
}

uint64_t type metadata accessor for AccessibilityCustomAttributes.Value()
{
  return MEMORY[0x1F41004A0]();
}

uint64_t AccessibilityCustomAttributes.merge(with:)()
{
  return MEMORY[0x1F41004A8]();
}

uint64_t AccessibilityCustomAttributes.init(_:value:)()
{
  return MEMORY[0x1F41004B0]();
}

uint64_t AccessibilityCustomContentKey.init(_:)()
{
  return MEMORY[0x1F41004B8]();
}

uint64_t AccessibilitySpeechAttributes.init(in:)()
{
  return MEMORY[0x1F41004C0]();
}

uint64_t AccessibilitySpeechAttributes.applyTo(environment:)()
{
  return MEMORY[0x1F41004C8]();
}

uint64_t type metadata accessor for OrOperationViewInputPredicate()
{
  return MEMORY[0x1F41004D0]();
}

uint64_t type metadata accessor for _BackgroundPreferenceModifier()
{
  return MEMORY[0x1F41004D8]();
}

uint64_t == infix<A, B, C, D>(_:_:)()
{
  return MEMORY[0x1F41004E0]();
}

uint64_t AccessibilityIdentifierStorage.merge(with:)()
{
  return MEMORY[0x1F41004E8]();
}

uint64_t AccessibilityNullableOptionSet<>.shouldApplyPlatformElementOverride.getter()
{
  return MEMORY[0x1F41004F0]();
}

uint64_t AccessibilityNullableOptionSet<>.resolved.getter()
{
  return MEMORY[0x1F41004F8]();
}

uint64_t AccessibilityNullableOptionSet<>.init(adding:)()
{
  return MEMORY[0x1F4100500]();
}

{
  return MEMORY[0x1F4100508]();
}

uint64_t AccessibilityNullableOptionSet<>.init(removing:)()
{
  return MEMORY[0x1F4100510]();
}

{
  return MEMORY[0x1F4100518]();
}

uint64_t AccessibilityNullableOptionSet<>.subscript.getter()
{
  return MEMORY[0x1F4100520]();
}

{
  return MEMORY[0x1F4100528]();
}

uint64_t type metadata accessor for AccessibilityNullableOptionSet()
{
  return MEMORY[0x1F4100530]();
}

uint64_t type metadata accessor for AndOperationViewInputPredicate()
{
  return MEMORY[0x1F4100538]();
}

uint64_t type metadata accessor for AutomaticStyleOverrideModifier()
{
  return MEMORY[0x1F4100540]();
}

uint64_t AutomaticStyleOverrideModifier.init(_:modifier:)()
{
  return MEMORY[0x1F4100548]();
}

uint64_t static ResolvableTextSegmentAttribute.Value.== infix(_:_:)()
{
  return MEMORY[0x1F4100550]();
}

uint64_t type metadata accessor for ResolvableTextSegmentAttribute.Value()
{
  return MEMORY[0x1F4100558]();
}

uint64_t type metadata accessor for _ContainerValueWritingModifier()
{
  return MEMORY[0x1F4100560]();
}

uint64_t _DisplayList_StableIdentityMap.init(from:)()
{
  return MEMORY[0x1F4100568]();
}

uint64_t _DisplayList_StableIdentityMap.addIDs(from:root:)()
{
  return MEMORY[0x1F4100570]();
}

uint64_t _DisplayList_StableIdentityMap.init()()
{
  return MEMORY[0x1F4100578]();
}

uint64_t _EnvironmentKeyWritingModifier.init(keyPath:value:)()
{
  return MEMORY[0x1F4100580]();
}

uint64_t type metadata accessor for _EnvironmentKeyWritingModifier()
{
  return MEMORY[0x1F4100588]();
}

uint64_t _PositionAwarePlacementContext.safeAreaInsets(matching:)()
{
  return MEMORY[0x1F4100590]();
}

uint64_t _PositionAwarePlacementContext.init(context:size:environment:transform:position:safeAreaInsets:)()
{
  return MEMORY[0x1F4100598]();
}

uint64_t AccessibilityCustomContentEntry.init(clearing:)()
{
  return MEMORY[0x1F41005A0]();
}

uint64_t AccessibilityCustomContentEntry.init(_:value:importance:)()
{
  return MEMORY[0x1F41005A8]();
}

uint64_t AttributeInvalidatingSubscriber.__allocating_init(host:attribute:)()
{
  return MEMORY[0x1F41005B0]();
}

uint64_t type metadata accessor for AttributeInvalidatingSubscriber()
{
  return MEMORY[0x1F41005B8]();
}

uint64_t ScrollGeometryTransformProvider.value.getter()
{
  return MEMORY[0x1F41005C0]();
}

uint64_t ScrollGeometryTransformProvider.init(position:transform:)()
{
  return MEMORY[0x1F41005C8]();
}

uint64_t static StyleContextAcceptsAnyPredicate.evaluate(inputs:)()
{
  return MEMORY[0x1F41005D0]();
}

uint64_t type metadata accessor for _DefaultForegroundStyleModifier()
{
  return MEMORY[0x1F41005D8]();
}

uint64_t _DisplayList_StableIdentityRoot.__allocating_init()()
{
  return MEMORY[0x1F41005E0]();
}

uint64_t type metadata accessor for _DisplayList_StableIdentityRoot()
{
  return MEMORY[0x1F41005E8]();
}

uint64_t PlatformTextRepresentableContext.text.getter()
{
  return MEMORY[0x1F41005F0]();
}

uint64_t _EnvironmentKeyTransformModifier.init(keyPath:transform:)()
{
  return MEMORY[0x1F41005F8]();
}

uint64_t type metadata accessor for _EnvironmentKeyTransformModifier()
{
  return MEMORY[0x1F4100600]();
}

uint64_t PairwisePreferenceCombinerVisitor.init(outputs:)()
{
  return MEMORY[0x1F4100608]();
}

uint64_t ResolvableStringResolutionContext.init(environment:maximumWidth:)()
{
  return MEMORY[0x1F4100618]();
}

uint64_t type metadata accessor for ResolvableStringResolutionContext()
{
  return MEMORY[0x1F4100620]();
}

uint64_t UnaryScrollablePreferenceProvider.init(scrollable:)()
{
  return MEMORY[0x1F4100628]();
}

uint64_t UnaryScrollablePreferenceProvider.value.getter()
{
  return MEMORY[0x1F4100630]();
}

uint64_t AccessibilityStyledTextContentView.body.getter()
{
  return MEMORY[0x1F4100638]();
}

uint64_t AccessibilityStyledTextContentView.init(text:unresolvedText:renderer:needsDrawingGroup:)()
{
  return MEMORY[0x1F4100640]();
}

uint64_t type metadata accessor for AccessibilityStyledTextContentView()
{
  return MEMORY[0x1F4100648]();
}

uint64_t type metadata accessor for _InsettableBackgroundShapeModifier()
{
  return MEMORY[0x1F4100650]();
}

uint64_t static AccessibilityActivationPointStorage.defaultDrag.getter()
{
  return MEMORY[0x1F4100658]();
}

uint64_t static AccessibilityActivationPointStorage.defaultDrop.getter()
{
  return MEMORY[0x1F4100660]();
}

uint64_t AccessibilityActivationPointStorage.init(kind:point:)()
{
  return MEMORY[0x1F4100668]();
}

uint64_t AccessibilityActivationPointStorage.merge(with:)()
{
  return MEMORY[0x1F4100670]();
}

uint64_t dispatch thunk of AccessibilityChartDescriptorStorage.resolve()()
{
  return MEMORY[0x1F4100678]();
}

uint64_t RepresentableChartDescriptorStorage.markNeedsUpdate(_:)()
{
  return MEMORY[0x1F4100680]();
}

Swift::Void __swiftcall RepresentableChartDescriptorStorage.reset()()
{
}

uint64_t type metadata accessor for RepresentableChartDescriptorStorage()
{
  return MEMORY[0x1F4100690]();
}

uint64_t RepresentableChartDescriptorStorage.__allocating_init(_:)()
{
  return MEMORY[0x1F4100698]();
}

uint64_t type metadata accessor for CodableAccessibilityAttachmentStorage()
{
  return MEMORY[0x1F41006A0]();
}

uint64_t CodableAccessibilityAttachmentStorage.init(_:platformStorage:in:idiom:)()
{
  return MEMORY[0x1F41006A8]();
}

uint64_t static ResolvableStringAttributeRepresentation.attribute.getter()
{
  return MEMORY[0x1F41006B0]();
}

uint64_t static Log.runtimeIssuesLog.getter()
{
  return MEMORY[0x1F41006B8]();
}

uint64_t static Log.eventDebug(_:)()
{
  return MEMORY[0x1F41006C0]();
}

uint64_t static Log.internalError(_:)()
{
  return MEMORY[0x1F41006C8]();
}

uint64_t static Log.archivedButton.getter()
{
  return MEMORY[0x1F41006D0]();
}

uint64_t static Log.archivedToggle.getter()
{
  return MEMORY[0x1F41006D8]();
}

uint64_t static Log.externalWarning(_:)()
{
  return MEMORY[0x1F41006E0]();
}

uint64_t static Log.internalWarning(_:)()
{
  return MEMORY[0x1F41006E8]();
}

uint64_t static Log.archivedPlaybackButton.getter()
{
  return MEMORY[0x1F41006F0]();
}

uint64_t static Log.navigation.getter()
{
  return MEMORY[0x1F41006F8]();
}

uint64_t static Log.presentation.getter()
{
  return MEMORY[0x1F4100700]();
}

uint64_t static Log.splitViewVisibility.getter()
{
  return MEMORY[0x1F4100708]();
}

uint64_t static Log.focus.getter()
{
  return MEMORY[0x1F4100710]();
}

uint64_t static Log.scroll.getter()
{
  return MEMORY[0x1F4100718]();
}

uint64_t static Log.tabView.getter()
{
  return MEMORY[0x1F4100720]();
}

uint64_t static Log.documents.getter()
{
  return MEMORY[0x1F4100728]();
}

Swift::Void __swiftcall log(_:)(Swift::OpaquePointer a1)
{
}

uint64_t Axis.Set.contains(_:)()
{
  return MEMORY[0x1F4100738]();
}

uint64_t static Axis.allCases.getter()
{
  return MEMORY[0x1F4100740]();
}

uint64_t static Edge.Set.horizontal.getter()
{
  return MEMORY[0x1F4100748]();
}

uint64_t static Edge.Set.all.getter()
{
  return MEMORY[0x1F4100750]();
}

uint64_t Edge.Set.contains(_:)()
{
  return MEMORY[0x1F4100758]();
}

uint64_t static Edge.Set.vertical.getter()
{
  return MEMORY[0x1F4100760]();
}

uint64_t static Edge.allCases.getter()
{
  return MEMORY[0x1F4100768]();
}

uint64_t Font.platformFont(in:modifiers:)()
{
  return MEMORY[0x1F4100770]();
}

uint64_t Font.platformFont(in:)()
{
  return MEMORY[0x1F4100778]();
}

uint64_t static Font.scaleFactor(textStyle:in:)()
{
  return MEMORY[0x1F4100780]();
}

uint64_t static Font.subheadline.getter()
{
  return MEMORY[0x1F4100788]();
}

uint64_t static Font.PrivateTextStyle.emphasizedBody.getter()
{
  return MEMORY[0x1F4100790]();
}

uint64_t static Font.body.getter()
{
  return MEMORY[0x1F4100798]();
}

uint64_t Font.bold()()
{
  return MEMORY[0x1F41007A0]();
}

uint64_t static Font.Weight.bold.getter()
{
  return MEMORY[0x1F41007A8]();
}

uint64_t static Font.Weight.medium.getter()
{
  return MEMORY[0x1F41007B0]();
}

uint64_t static Font.Weight.regular.getter()
{
  return MEMORY[0x1F41007B8]();
}

uint64_t static Font.Weight.semibold.getter()
{
  return MEMORY[0x1F41007C0]();
}

uint64_t static Font.custom(_:size:relativeTo:)()
{
  return MEMORY[0x1F41007C8]();
}

uint64_t static Font.system(size:weight:design:)()
{
  return MEMORY[0x1F41007D0]();
}

uint64_t static Font.system(_:design:weight:)()
{
  return MEMORY[0x1F41007D8]();
}

{
  return MEMORY[0x1F41007E0]();
}

uint64_t static Font.title2.getter()
{
  return MEMORY[0x1F41007E8]();
}

uint64_t static Font.caption.getter()
{
  return MEMORY[0x1F41007F0]();
}

uint64_t Font.leading(_:)()
{
  return MEMORY[0x1F41007F8]();
}

uint64_t static Font.footnote.getter()
{
  return MEMORY[0x1F4100800]();
}

uint64_t static Font.headline.getter()
{
  return MEMORY[0x1F4100808]();
}

uint64_t Font.TextStyle.ctTextStyle.getter()
{
  return MEMORY[0x1F4100810]();
}

uint64_t Font.init(_:)()
{
  return MEMORY[0x1F4100818]();
}

uint64_t type metadata accessor for Pair()
{
  return MEMORY[0x1F4100820]();
}

uint64_t Pair.init(_:_:)()
{
  return MEMORY[0x1F4100828]();
}

uint64_t Path.cgPath.getter()
{
  return MEMORY[0x1F4100830]();
}

uint64_t Path.strokedPath(_:)()
{
  return MEMORY[0x1F4100838]();
}

uint64_t Path.init(roundedRect:cornerRadius:style:)()
{
  return MEMORY[0x1F4100840]();
}

uint64_t Path.roundedRect()()
{
  return MEMORY[0x1F4100848]();
}

uint64_t Path.boundingRect.getter()
{
  return MEMORY[0x1F4100850]();
}

uint64_t Path.formTrivialUnion(_:)()
{
  return MEMORY[0x1F4100858]();
}

uint64_t Path.addArc(center:radius:startAngle:endAngle:clockwise:transform:)()
{
  return MEMORY[0x1F4100860]();
}

uint64_t Path.forEach(_:)()
{
  return MEMORY[0x1F4100868]();
}

uint64_t Path.isEmpty.getter()
{
  return MEMORY[0x1F4100870]();
}

uint64_t Path.contains(points:eoFill:origin:)()
{
  return MEMORY[0x1F4100878]();
}

uint64_t default argument 2 of Path.contains(points:eoFill:origin:)()
{
  return MEMORY[0x1F4100880]();
}

Swift::Bool __swiftcall Path.contains(_:eoFill:)(CGPoint _, Swift::Bool eoFill)
{
  return MEMORY[0x1F4100888](eoFill, (__n128)__PAIR128__(v2, *(unint64_t *)&_.x), (__n128)__PAIR128__(v3, *(unint64_t *)&_.y));
}

uint64_t Path.offsetBy(dx:dy:)()
{
  return MEMORY[0x1F4100890]();
}

uint64_t Path.init(_:)()
{
  return MEMORY[0x1F4100898]();
}

{
  return MEMORY[0x1F41008A0]();
}

Swift::Bool __swiftcall Text.isCollapsible()()
{
  return MEMORY[0x1F41008A8]();
}

uint64_t Text.resolveString(in:with:idiom:)()
{
  return MEMORY[0x1F41008B0]();
}

uint64_t Text.init(timerInterval:pauseTime:countsDown:showsHours:)()
{
  return MEMORY[0x1F41008B8]();
}

uint64_t Text.assertUnstyled(_:options:)()
{
  return MEMORY[0x1F41008C0]();
}

uint64_t Text.foregroundStyle<A>(_:)()
{
  return MEMORY[0x1F41008C8]();
}

uint64_t Text.ResolvedProperties.init()()
{
  return MEMORY[0x1F41008D0]();
}

uint64_t static Text.== infix(_:_:)()
{
  return MEMORY[0x1F41008D8]();
}

uint64_t Text.Scale.init(_:)()
{
  return MEMORY[0x1F41008E0]();
}

uint64_t type metadata accessor for Text.Style()
{
  return MEMORY[0x1F41008E8]();
}

uint64_t static Text.Suffix.Storage.== infix(_:_:)()
{
  return MEMORY[0x1F41008F0]();
}

uint64_t Text.resolve<A>(into:in:with:)()
{
  return MEMORY[0x1F41008F8]();
}

uint64_t Text.Resolved.nsAttributes(content:in:with:properties:)()
{
  return MEMORY[0x1F4100900]();
}

uint64_t Text.Resolved.attributedString.getter()
{
  return MEMORY[0x1F4100908]();
}

uint64_t Text.Resolved.init()()
{
  return MEMORY[0x1F4100910]();
}

uint64_t type metadata accessor for Text.Resolved()
{
  return MEMORY[0x1F4100918]();
}

uint64_t Text.isStyled(options:)()
{
  return MEMORY[0x1F4100920]();
}

uint64_t Text.modified(with:)()
{
  return MEMORY[0x1F4100928]();
}

uint64_t Text.DateStyle.UnitsConfiguration.units.getter()
{
  return MEMORY[0x1F4100930]();
}

uint64_t static Text.DateStyle.timer.getter()
{
  return MEMORY[0x1F4100938]();
}

uint64_t static Text.DateStyle.== infix(_:_:)()
{
  return MEMORY[0x1F4100940]();
}

uint64_t Text.LineStyle.init(_nsUnderlineStyle:)()
{
  return MEMORY[0x1F4100948]();
}

uint64_t static Text.LineStyle.Pattern.solid.getter()
{
  return MEMORY[0x1F4100950]();
}

uint64_t Text.init(progressInterval:countsDown:)()
{
  return MEMORY[0x1F4100958]();
}

uint64_t Text.resolveAttributedString(in:includeDefaultAttributes:options:idiom:)()
{
  return MEMORY[0x1F4100960]();
}

uint64_t default argument 2 of Text.resolveAttributedString(in:includeDefaultAttributes:options:idiom:)()
{
  return MEMORY[0x1F4100968]();
}

uint64_t Text.storedAccessibilityLabel.getter()
{
  return MEMORY[0x1F4100970]();
}

uint64_t static Text.System.kitLocalized(_:tableName:comment:)()
{
  return MEMORY[0x1F4100978]();
}

uint64_t static Text.System.shareEllipses.getter()
{
  return MEMORY[0x1F4100980]();
}

uint64_t static Text.System.ok.getter()
{
  return MEMORY[0x1F4100988]();
}

uint64_t static Text.System.on.getter()
{
  return MEMORY[0x1F4100990]();
}

uint64_t static Text.System.off.getter()
{
  return MEMORY[0x1F4100998]();
}

uint64_t static Text.System.done.getter()
{
  return MEMORY[0x1F41009A0]();
}

uint64_t static Text.System.edit.getter()
{
  return MEMORY[0x1F41009A8]();
}

uint64_t static Text.System.paste.getter()
{
  return MEMORY[0x1F41009B0]();
}

uint64_t static Text.System.cancel.getter()
{
  return MEMORY[0x1F41009B8]();
}

uint64_t static Text.System.rename.getter()
{
  return MEMORY[0x1F41009C0]();
}

uint64_t static Text.System.search.getter()
{
  return MEMORY[0x1F41009C8]();
}

uint64_t static Text.System.uiCopy.getter()
{
  return MEMORY[0x1F41009D0]();
}

uint64_t static Text.System.uiDelete.getter()
{
  return MEMORY[0x1F41009D8]();
}

uint64_t static Text.System.uiLookUp.getter()
{
  return MEMORY[0x1F41009E0]();
}

uint64_t Text.init(_:style:)()
{
  return MEMORY[0x1F41009E8]();
}

uint64_t Text.init<A>(_:format:)()
{
  return MEMORY[0x1F41009F0]();
}

uint64_t Text.init(_:tableName:bundle:comment:)()
{
  return MEMORY[0x1F41009F8]();
}

uint64_t Text.init<A>(_:)()
{
  return MEMORY[0x1F4100A00]();
}

uint64_t static Time.infinity.getter()
{
  return MEMORY[0x1F4100A08]();
}

uint64_t static View.makeDebuggableView(view:inputs:)()
{
  return MEMORY[0x1F4100A10]();
}

uint64_t static View.makeDebuggableViewList(view:inputs:)()
{
  return MEMORY[0x1F4100A18]();
}

uint64_t static View.makeView(view:inputs:)()
{
  return MEMORY[0x1F4100A20]();
}

uint64_t static View.makeViewList(view:inputs:)()
{
  return MEMORY[0x1F4100A28]();
}

uint64_t static View._makeView(view:inputs:)()
{
  return MEMORY[0x1F4100A30]();
}

uint64_t static View._makeViewList(view:inputs:)()
{
  return MEMORY[0x1F4100A38]();
}

uint64_t View.background<A>(alignment:content:)()
{
  return MEMORY[0x1F4100A40]();
}

uint64_t View.background<A>(_:ignoresSafeAreaEdges:)()
{
  return MEMORY[0x1F4100A48]();
}

uint64_t View.background<A, B>(_:in:fillStyle:)()
{
  return MEMORY[0x1F4100A50]();
}

uint64_t View.background<A>(_:alignment:)()
{
  return MEMORY[0x1F4100A58]();
}

uint64_t View.fontWeight(_:)()
{
  return MEMORY[0x1F4100A60]();
}

uint64_t View.preference<A>(key:value:)()
{
  return MEMORY[0x1F4100A68]();
}

uint64_t View.symbolFont(_:)()
{
  return MEMORY[0x1F4100A70]();
}

uint64_t View.controlSize(_:)()
{
  return MEMORY[0x1F4100A78]();
}

uint64_t View.environment<A>(_:_:)()
{
  return MEMORY[0x1F4100A80]();
}

uint64_t View.layoutValue<A>(key:value:)()
{
  return MEMORY[0x1F4100A88]();
}

uint64_t View.onDisappear(perform:)()
{
  return MEMORY[0x1F4100A90]();
}

uint64_t View.scaleEffect(_:anchor:)()
{
  return MEMORY[0x1F4100A98]();
}

{
  return MEMORY[0x1F4100AA0]();
}

uint64_t View.transaction(_:)()
{
  return MEMORY[0x1F4100AA8]();
}

uint64_t View._colorMatrix(_:)()
{
  return MEMORY[0x1F4100AB0]();
}

uint64_t View.onTapGesture(count:perform:)()
{
  return MEMORY[0x1F4100AB8]();
}

uint64_t View.styleContext<A>(_:)()
{
  return MEMORY[0x1F4100AC0]();
}

uint64_t View.visualEffect<A>(_:)()
{
  return MEMORY[0x1F4100AC8]();
}

uint64_t View.symbolVariant(_:)()
{
  return MEMORY[0x1F4100AD0]();
}

uint64_t static View._viewListCount(inputs:)()
{
  return MEMORY[0x1F4100AD8]();
}

uint64_t View.baselineOffset(_:)()
{
  return MEMORY[0x1F4100AE0]();
}

uint64_t View.rotationEffect(_:anchor:)()
{
  return MEMORY[0x1F4100AE8]();
}

uint64_t View.transformTrait<A>(_:transform:)()
{
  return MEMORY[0x1F4100AF0]();
}

uint64_t View.truePreference<A>(_:)()
{
  return MEMORY[0x1F4100AF8]();
}

uint64_t View.bodyHeadOutdent(_:)()
{
  return MEMORY[0x1F4100B08]();
}

uint64_t View.dynamicTypeSize(_:)()
{
  return MEMORY[0x1F4100B10]();
}

uint64_t View.dynamicTypeSize<A>(_:)()
{
  return MEMORY[0x1F4100B18]();
}

uint64_t View.foregroundColor(_:)()
{
  return MEMORY[0x1F4100B20]();
}

uint64_t View.foregroundStyle<A>(_:)()
{
  return MEMORY[0x1F4100B28]();
}

uint64_t View.ignoresSafeArea(_:edges:)()
{
  return MEMORY[0x1F4100B30]();
}

uint64_t View.monospacedDigit()()
{
  return MEMORY[0x1F4100B38]();
}

uint64_t View._onBindingChange<A>(_:perform:)()
{
  return MEMORY[0x1F4100B40]();
}

uint64_t static View.makeImplicitRoot(view:inputs:)()
{
  return MEMORY[0x1F4100B48]();
}

uint64_t View.environmentObject<A>(_:)()
{
  return MEMORY[0x1F4100B50]();
}

uint64_t View.resetScrollInputs()()
{
  return MEMORY[0x1F4100B58]();
}

uint64_t View.appearanceAnimation<A>(animation:modifier:)()
{
  return MEMORY[0x1F4100B60]();
}

uint64_t View.simultaneousGesture<A>(_:including:)()
{
  return MEMORY[0x1F4100B68]();
}

uint64_t View.transformPreference<A>(_:_:)()
{
  return MEMORY[0x1F4100B70]();
}

uint64_t View.scrapeableAttachment(_:)()
{
  return MEMORY[0x1F4100B78]();
}

uint64_t View.transformEnvironment<A>(_:transform:)()
{
  return MEMORY[0x1F4100B80]();
}

uint64_t View.edgesIgnoringSafeArea(_:)()
{
  return MEMORY[0x1F4100B88]();
}

uint64_t View._addingBackgroundGroup()()
{
  return MEMORY[0x1F4100B90]();
}

uint64_t View.defaultForegroundColor(_:)()
{
  return MEMORY[0x1F4100B98]();
}

uint64_t View.multilineTextAlignment(_:)()
{
  return MEMORY[0x1F4100BA0]();
}

uint64_t View.overlayPreferenceValue<A, B>(_:alignment:_:)()
{
  return MEMORY[0x1F4100BA8]();
}

uint64_t View.transformAnchorGeometry<A>(key:transform:)()
{
  return MEMORY[0x1F4100BB0]();
}

uint64_t View.verticalStackOrientation()()
{
  return MEMORY[0x1F4100BB8]();
}

uint64_t View.backgroundPreferenceValue<A, B>(_:alignment:_:)()
{
  return MEMORY[0x1F4100BC0]();
}

uint64_t View.transformAnchorPreference<A, B>(key:value:transform:)()
{
  return MEMORY[0x1F4100BC8]();
}

uint64_t View.configuresScrollPhaseState()()
{
  return MEMORY[0x1F4100BD0]();
}

uint64_t View.id<A>(_:)()
{
  return MEMORY[0x1F4100BD8]();
}

uint64_t View.font(_:)()
{
  return MEMORY[0x1F4100BE0]();
}

uint64_t View.frame(width:height:alignment:)()
{
  return MEMORY[0x1F4100BE8]();
}

uint64_t View.frame(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)()
{
  return MEMORY[0x1F4100BF0]();
}

uint64_t View._trait<A>(_:_:)()
{
  return MEMORY[0x1F4100BF8]();
}

uint64_t View.clipped(antialiased:)()
{
  return MEMORY[0x1F4100C00]();
}

uint64_t View.gesture<A>(_:including:)()
{
  return MEMORY[0x1F4100C08]();
}

uint64_t View.opacity(_:)()
{
  return MEMORY[0x1F4100C10]();
}

uint64_t View.overlay<A>(alignment:content:)()
{
  return MEMORY[0x1F4100C18]();
}

uint64_t View.overlay<A>(_:alignment:)()
{
  return MEMORY[0x1F4100C20]();
}

uint64_t View.padding(_:)()
{
  return MEMORY[0x1F4100C28]();
}

uint64_t View.padding(_:_:)()
{
  return MEMORY[0x1F4100C30]();
}

uint64_t View.spacing(_:)()
{
  return MEMORY[0x1F4100C38]();
}

uint64_t View.disabled(_:)()
{
  return MEMORY[0x1F4100C40]();
}

uint64_t View.modifier<A>(_:)()
{
  return MEMORY[0x1F4100C48]();
}

uint64_t View.onAppear(perform:)()
{
  return MEMORY[0x1F4100C50]();
}

uint64_t View.onChange<A>(of:initial:_:)()
{
  return MEMORY[0x1F4100C58]();
}

{
  return MEMORY[0x1F4100C60]();
}

uint64_t View.staticIf<A, B, C>(context:trueModifier:falseModifier:)()
{
  return MEMORY[0x1F4100C68]();
}

uint64_t View.staticIf<A, B, C>(_:trueModifier:falseModifier:)()
{
  return MEMORY[0x1F4100C70]();
}

uint64_t View.staticIf<A, B>(_:trueModifier:)()
{
  return MEMORY[0x1F4100C78]();
}

uint64_t View._disabled(_:)()
{
  return MEMORY[0x1F4100C80]();
}

uint64_t View._untagged()()
{
  return MEMORY[0x1F4100C88]();
}

uint64_t View.animation<A>(_:body:)()
{
  return MEMORY[0x1F4100C90]();
}

uint64_t View.animation<A>(_:value:)()
{
  return MEMORY[0x1F4100C98]();
}

uint64_t View.clipShape<A>(_:style:)()
{
  return MEMORY[0x1F4100CA0]();
}

uint64_t View.fixedSize(horizontal:vertical:)()
{
  return MEMORY[0x1F4100CA8]();
}

uint64_t View.removeTag<A>(_:)()
{
  return MEMORY[0x1F4100CB0]();
}

uint64_t View.underline(_:pattern:color:)()
{
  return MEMORY[0x1F4100CB8]();
}

uint64_t bind<A>(_:_:)()
{
  return MEMORY[0x1F4100CC0]();
}

uint64_t Color.cgColor.getter()
{
  return MEMORY[0x1F4100CC8]();
}

uint64_t static Color.accentColor.getter()
{
  return MEMORY[0x1F4100CD0]();
}

uint64_t static Color._background.getter()
{
  return MEMORY[0x1F4100CD8]();
}

uint64_t static Color.red.getter()
{
  return MEMORY[0x1F4100CE0]();
}

uint64_t static Color.blue.getter()
{
  return MEMORY[0x1F4100CE8]();
}

uint64_t static Color.gray.getter()
{
  return MEMORY[0x1F4100CF0]();
}

uint64_t static Color.mint.getter()
{
  return MEMORY[0x1F4100CF8]();
}

uint64_t Color.over(_:)()
{
  return MEMORY[0x1F4100D00]();
}

uint64_t static Color.pink.getter()
{
  return MEMORY[0x1F4100D08]();
}

uint64_t static Color.black.getter()
{
  return MEMORY[0x1F4100D10]();
}

uint64_t static Color.clear.getter()
{
  return MEMORY[0x1F4100D18]();
}

uint64_t static Color.white.getter()
{
  return MEMORY[0x1F4100D20]();
}

uint64_t Color._apply(to:)()
{
  return MEMORY[0x1F4100D28]();
}

uint64_t static Color.yellow.getter()
{
  return MEMORY[0x1F4100D30]();
}

uint64_t Color.opacity(_:)()
{
  return MEMORY[0x1F4100D38]();
}

uint64_t static Color.primary.getter()
{
  return MEMORY[0x1F4100D40]();
}

uint64_t Color.Resolved.cgColor.getter()
{
  return MEMORY[0x1F4100D48]();
}

uint64_t Color.Resolved.init(colorSpace:red:green:blue:opacity:)()
{
  return MEMORY[0x1F4100D50]();
}

uint64_t static Color.Resolved.legacyInterpolation.setter()
{
  return MEMORY[0x1F4100D58]();
}

uint64_t Color.Resolved.init(white:opacity:)()
{
  return MEMORY[0x1F4100D60]();
}

uint64_t Color.Resolved.kitColor.getter()
{
  return MEMORY[0x1F4100D70]();
}

uint64_t Color.Resolved.init(platformColor:)()
{
  return MEMORY[0x1F4100D78]();
}

uint64_t Color.Resolved.init(_:)()
{
  return MEMORY[0x1F4100D80]();
}

uint64_t Color.init<A>(provider:)()
{
  return MEMORY[0x1F4100D88]();
}

uint64_t static Color.secondary.getter()
{
  return MEMORY[0x1F4100D90]();
}

uint64_t static Color.quaternary.getter()
{
  return MEMORY[0x1F4100D98]();
}

uint64_t static Color.tertiarySystemFill.getter()
{
  return MEMORY[0x1F4100DA0]();
}

uint64_t static Color.secondarySystemFill.getter()
{
  return MEMORY[0x1F4100DA8]();
}

uint64_t static Color.tertiary.getter()
{
  return MEMORY[0x1F4100DB0]();
}

uint64_t Color.init(_:red:green:blue:opacity:)()
{
  return MEMORY[0x1F4100DB8]();
}

uint64_t Color.init(_:white:opacity:)()
{
  return MEMORY[0x1F4100DC0]();
}

uint64_t Color.init(_:)()
{
  return MEMORY[0x1F4100DC8]();
}

uint64_t Group.init(_content:)()
{
  return MEMORY[0x1F4100DD0]();
}

uint64_t Group.init<A, B>(subviews:transform:)()
{
  return MEMORY[0x1F4100DD8]();
}

uint64_t static Group<A>._makeViewList(view:inputs:)()
{
  return MEMORY[0x1F4100DE0]();
}

uint64_t Group<A>.init(content:)()
{
  return MEMORY[0x1F4100DE8]();
}

uint64_t type metadata accessor for Group()
{
  return MEMORY[0x1F4100DF0]();
}

uint64_t Image.resolveNamedImage(in:)()
{
  return MEMORY[0x1F4100DF8]();
}

uint64_t Image.init(decorative:scale:orientation:)()
{
  return MEMORY[0x1F4100E00]();
}

uint64_t Image.symbolRenderingMode(_:)()
{
  return MEMORY[0x1F4100E08]();
}

uint64_t static Image.== infix(_:_:)()
{
  return MEMORY[0x1F4100E10]();
}

uint64_t Image.resolve(in:)()
{
  return MEMORY[0x1F4100E18]();
}

uint64_t Image.LayoutMetrics.init(baselineOffset:capHeight:contentSize:alignmentOrigin:)()
{
  return MEMORY[0x1F4100E20]();
}

uint64_t static Image.LayoutMetrics.== infix(_:_:)()
{
  return MEMORY[0x1F4100E28]();
}

uint64_t Image.Resolved.init(image:decorative:label:basePlatformItemImage:backgroundShape:backgroundCornerRadius:)()
{
  return MEMORY[0x1F4100E30]();
}

uint64_t static Image.redacted.getter()
{
  return MEMORY[0x1F4100E38]();
}

uint64_t Image.init(_:bundle:)()
{
  return MEMORY[0x1F4100E40]();
}

uint64_t Image.init(_:)()
{
  return MEMORY[0x1F4100E48]();
}

uint64_t Shape.effectivePath(in:)()
{
  return MEMORY[0x1F4100E60]();
}

uint64_t State.init(wrappedValue:)()
{
  return MEMORY[0x1F4100E90]();
}

uint64_t State.wrappedValue.getter()
{
  return MEMORY[0x1F4100E98]();
}

uint64_t State.projectedValue.getter()
{
  return MEMORY[0x1F4100EA0]();
}

uint64_t type metadata accessor for State()
{
  return MEMORY[0x1F4100EA8]();
}

uint64_t Anchor.Source.prepare(geometry:)()
{
  return MEMORY[0x1F4100EB0]();
}

uint64_t static Anchor.Source<A>.bounds.getter()
{
  return MEMORY[0x1F4100EB8]();
}

uint64_t static Anchor.Source<A>.unitPoint(_:)()
{
  return MEMORY[0x1F4100EC0]();
}

uint64_t Anchor.Source.init<A>(_:)()
{
  return MEMORY[0x1F4100EC8]();
}

uint64_t Anchor.convert(to:)()
{
  return MEMORY[0x1F4100ED0]();
}

uint64_t static Anchor<A>.== infix(_:_:)()
{
  return MEMORY[0x1F4100ED8]();
}

uint64_t Circle.path(in:)()
{
  return MEMORY[0x1F4100EE0]();
}

uint64_t static HStack._makeView(view:inputs:)()
{
  return MEMORY[0x1F4100EE8]();
}

uint64_t HStack.init(alignment:spacing:content:)()
{
  return MEMORY[0x1F4100EF0]();
}

uint64_t type metadata accessor for HStack()
{
  return MEMORY[0x1F4100EF8]();
}

uint64_t type metadata accessor for IDView()
{
  return MEMORY[0x1F4100F00]();
}

uint64_t IDView.init(_:id:)()
{
  return MEMORY[0x1F4100F08]();
}

uint64_t static Layout.makeLayoutView(root:inputs:body:)()
{
  return MEMORY[0x1F4100F10]();
}

uint64_t static Layout._makeLayoutView(root:inputs:body:)()
{
  return MEMORY[0x1F4100F18]();
}

uint64_t Layout.updateLayoutComputer<A>(rule:layoutContext:children:)()
{
  return MEMORY[0x1F4100F20]();
}

uint64_t Spring.init(mass:stiffness:damping:allowOverDamping:)()
{
  return MEMORY[0x1F4100F30]();
}

uint64_t static Update.enqueueAction(_:)()
{
  return MEMORY[0x1F4100F38]();
}

uint64_t static Update.threadIsUpdating.getter()
{
  return MEMORY[0x1F4100F40]();
}

uint64_t static Update.dispatchImmediately<A>(_:)()
{
  return MEMORY[0x1F4100F48]();
}

uint64_t static Update.end()()
{
  return MEMORY[0x1F4100F50]();
}

uint64_t static Update.lock()()
{
  return MEMORY[0x1F4100F58]();
}

uint64_t static Update.wait()()
{
  return MEMORY[0x1F4100F60]();
}

uint64_t static Update.begin()()
{
  return MEMORY[0x1F4100F68]();
}

uint64_t static Update.ensure<A>(_:)()
{
  return MEMORY[0x1F4100F70]();
}

uint64_t static Update.locked<A>(_:)()
{
  return MEMORY[0x1F4100F78]();
}

uint64_t static Update.unlock()()
{
  return MEMORY[0x1F4100F80]();
}

uint64_t static Update.syncMain(_:)()
{
  return MEMORY[0x1F4100F88]();
}

uint64_t static Update.broadcast()()
{
  return MEMORY[0x1F4100F90]();
}

uint64_t VStack.init(alignment:spacing:content:)()
{
  return MEMORY[0x1F4100F98]();
}

uint64_t type metadata accessor for VStack()
{
  return MEMORY[0x1F4100FA0]();
}

uint64_t ZStack.init(alignment:content:)()
{
  return MEMORY[0x1F4100FA8]();
}

uint64_t type metadata accessor for ZStack()
{
  return MEMORY[0x1F4100FB0]();
}

uint64_t static AnyView._makeView(view:inputs:)()
{
  return MEMORY[0x1F4100FB8]();
}

uint64_t static AnyView._makeViewList(view:inputs:)()
{
  return MEMORY[0x1F4100FC0]();
}

uint64_t AnyView.visitContent<A>(_:)()
{
  return MEMORY[0x1F4100FC8]();
}

uint64_t AnyView.init<A>(_:)()
{
  return MEMORY[0x1F4100FD0]();
}

uint64_t Binding.projecting<A>(_:)()
{
  return MEMORY[0x1F4100FD8]();
}

uint64_t Binding.transaction(_:)()
{
  return MEMORY[0x1F4100FE0]();
}

uint64_t Binding.wrappedValue.getter()
{
  return MEMORY[0x1F4100FE8]();
}

uint64_t Binding.subscript.getter()
{
  return MEMORY[0x1F4100FF0]();
}

uint64_t Binding.projectedValue.getter()
{
  return MEMORY[0x1F4100FF8]();
}

uint64_t Binding.init(get:set:)()
{
  return MEMORY[0x1F4101000]();
}

{
  return MEMORY[0x1F4101008]();
}

uint64_t Binding.zip<A>(with:)()
{
  return MEMORY[0x1F4101010]();
}

uint64_t Binding.init(value:location:transaction:)()
{
  return MEMORY[0x1F4101018]();
}

uint64_t Binding.init(value:location:)()
{
  return MEMORY[0x1F4101020]();
}

uint64_t static Binding.constant(_:)()
{
  return MEMORY[0x1F4101028]();
}

uint64_t Binding.init<A>(flattening:)()
{
  return MEMORY[0x1F4101030]();
}

uint64_t Binding.selecting<A>(_:)()
{
  return MEMORY[0x1F4101038]();
}

uint64_t Binding<A>.projectingTagIndex(viewList:)()
{
  return MEMORY[0x1F4101048]();
}

uint64_t Binding<A>.id.getter()
{
  return MEMORY[0x1F4101050]();
}

uint64_t type metadata accessor for Binding()
{
  return MEMORY[0x1F4101058]();
}

uint64_t Binding.init<A>(_:)()
{
  return MEMORY[0x1F4101060]();
}

uint64_t Capsule.path(in:)()
{
  return MEMORY[0x1F4101068]();
}

uint64_t ForEach.IDGenerator.isConstant.getter()
{
  return MEMORY[0x1F4101070]();
}

uint64_t ForEach.IDGenerator.makeID(data:index:offset:)()
{
  return MEMORY[0x1F4101078]();
}

uint64_t type metadata accessor for ForEach.IDGenerator()
{
  return MEMORY[0x1F4101080]();
}

uint64_t ForEach.idGenerator.getter()
{
  return MEMORY[0x1F4101088]();
}

uint64_t ForEach.data.getter()
{
  return MEMORY[0x1F4101090]();
}

uint64_t ForEach.data.setter()
{
  return MEMORY[0x1F4101098]();
}

uint64_t ForEach.init<A>(subviews:content:)()
{
  return MEMORY[0x1F41010A0]();
}

uint64_t ForEach<>.init(_:id:content:)()
{
  return MEMORY[0x1F41010A8]();
}

uint64_t ForEach<>.init(_:content:)()
{
  return MEMORY[0x1F41010B0]();
}

{
  return MEMORY[0x1F41010B8]();
}

uint64_t type metadata accessor for ForEach()
{
  return MEMORY[0x1F41010C0]();
}

uint64_t ForEach.init(_:idGenerator:content:)()
{
  return MEMORY[0x1F41010C8]();
}

uint64_t ForEach.init<A>(_:transform:)()
{
  return MEMORY[0x1F41010D0]();
}

uint64_t static Gesture.makeDebuggableGesture(gesture:inputs:)()
{
  return MEMORY[0x1F41010E0]();
}

uint64_t Gesture.debugLabel(_:)()
{
  return MEMORY[0x1F41010E8]();
}

uint64_t Gesture.dependency(_:)()
{
  return MEMORY[0x1F41010F0]();
}

uint64_t Gesture.cancellable()()
{
  return MEMORY[0x1F41010F8]();
}

uint64_t Gesture.eventFilter<A>(forType:_:)()
{
  return MEMORY[0x1F4101100]();
}

uint64_t Gesture.requiredTapCount(_:)()
{
  return MEMORY[0x1F4101108]();
}

uint64_t Gesture.ended<A>(by:)()
{
  return MEMORY[0x1F4101110]();
}

uint64_t Gesture.gated<A>(by:)()
{
  return MEMORY[0x1F4101118]();
}

uint64_t Gesture.enabled<A>(by:)()
{
  return MEMORY[0x1F4101120]();
}

uint64_t Gesture.onEnded(_:)()
{
  return MEMORY[0x1F4101128]();
}

uint64_t Gesture.combined<A, B>(with:body:)()
{
  return MEMORY[0x1F4101130]();
}

uint64_t Gesture.callbacks<A>(_:)()
{
  return MEMORY[0x1F4101140]();
}

uint64_t Gesture<>.onChanged(_:)()
{
  return MEMORY[0x1F4101148]();
}

uint64_t Spacing.incorporate(_:of:)()
{
  return MEMORY[0x1F4101178]();
}

uint64_t Spacing.distanceToSuccessorView(along:layoutDirection:preferring:)()
{
  return MEMORY[0x1F4101180]();
}

uint64_t static Spacing.zero.getter()
{
  return MEMORY[0x1F4101188]();
}

uint64_t Spacing.reset(_:)()
{
  return MEMORY[0x1F4101190]();
}

uint64_t Spacing.init()()
{
  return MEMORY[0x1F4101198]();
}

uint64_t type metadata accessor for WeakBox()
{
  return MEMORY[0x1F41011A0]();
}

uint64_t CoreGlue.StartChildGeometriesParameters.origin.getter()
{
  return MEMORY[0x1F41011A8]();
}

uint64_t Gradient.Stop.init(color:location:)()
{
  return MEMORY[0x1F41011B8]();
}

uint64_t Gradient.color(at:)()
{
  return MEMORY[0x1F41011C0]();
}

uint64_t Gradient.init(stops:)()
{
  return MEMORY[0x1F41011C8]();
}

uint64_t Gradient.init(colors:)()
{
  return MEMORY[0x1F41011D0]();
}

uint64_t Gradient.resolve(in:)()
{
  return MEMORY[0x1F41011D8]();
}

uint64_t Gradient.reversed.getter()
{
  return MEMORY[0x1F41011E0]();
}

uint64_t static Material.coreMaterial(bundle:provider:)()
{
  return MEMORY[0x1F41011F0]();
}

uint64_t static Material.bar.getter()
{
  return MEMORY[0x1F41011F8]();
}

uint64_t static Material.thin.getter()
{
  return MEMORY[0x1F4101200]();
}

uint64_t static Material.thick.getter()
{
  return MEMORY[0x1F4101208]();
}

uint64_t static Material.ultraThin.getter()
{
  return MEMORY[0x1F4101210]();
}

uint64_t PanEvent.translation.getter()
{
  return MEMORY[0x1F4101218]();
}

uint64_t PanEvent.translation.setter()
{
  return MEMORY[0x1F4101220]();
}

uint64_t PanEvent.init(globalLocation:phase:timestamp:globalTranslation:touchType:)()
{
  return MEMORY[0x1F4101228]();
}

uint64_t PanEvent.globalTranslation.getter()
{
  return MEMORY[0x1F4101230]();
}

uint64_t PanEvent.init(_:)()
{
  return MEMORY[0x1F4101238]();
}

uint64_t Signpost.traceInterval<A>(object:_:_:closure:)()
{
  return MEMORY[0x1F4101240]();
}

uint64_t static Signpost.platformUpdate.getter()
{
  return MEMORY[0x1F4101248]();
}

uint64_t static Signpost.prefetchOutputs<A>(_:)()
{
  return MEMORY[0x1F4101250]();
}

uint64_t static Signpost.prefetchMakeView<A>(_:)()
{
  return MEMORY[0x1F4101258]();
}

uint64_t static Signpost.metadataExtraction.getter()
{
  return MEMORY[0x1F4101260]();
}

uint64_t static Signpost.prefetchNotifyMaxItems()()
{
  return MEMORY[0x1F4101268]();
}

uint64_t static Signpost.prefetchNotifyStartIndex(_:)()
{
  return MEMORY[0x1F4101270]();
}

uint64_t static Signpost.archiving.getter()
{
  return MEMORY[0x1F4101278]();
}

uint64_t StaticIf<>.init<A>(idiom:then:else:)()
{
  return MEMORY[0x1F4101280]();
}

{
  return MEMORY[0x1F41012B8]();
}

uint64_t StaticIf<>.init(_:then:else:)()
{
  return MEMORY[0x1F4101288]();
}

{
  return MEMORY[0x1F41012C0]();
}

{
  return MEMORY[0x1F41012C8]();
}

uint64_t StaticIf<>.init<>(_:then:)()
{
  return MEMORY[0x1F4101290]();
}

uint64_t static StaticIf<>._makeView(view:inputs:)()
{
  return MEMORY[0x1F4101298]();
}

uint64_t static StaticIf<>._makeViewList(view:inputs:)()
{
  return MEMORY[0x1F41012A0]();
}

uint64_t static StaticIf<>._viewListCount(inputs:)()
{
  return MEMORY[0x1F41012A8]();
}

uint64_t StaticIf<>.init<A>(in:then:else:)()
{
  return MEMORY[0x1F41012B0]();
}

uint64_t type metadata accessor for StaticIf()
{
  return MEMORY[0x1F41012D0]();
}

uint64_t UniqueID.init()()
{
  return MEMORY[0x1F41012D8]();
}

uint64_t ViewList.allViewIDs.getter()
{
  return MEMORY[0x1F41012E0]();
}

uint64_t ViewList.firstOffset(of:style:)()
{
  return MEMORY[0x1F41012E8]();
}

uint64_t ViewList.firstOffset(of:)()
{
  return MEMORY[0x1F41012F0]();
}

uint64_t ViewList.applySublists(from:list:to:)()
{
  return MEMORY[0x1F41012F8]();
}

uint64_t ViewList.applySublists(from:list:transform:to:)()
{
  return MEMORY[0x1F4101300]();
}

uint64_t ViewList.count.getter()
{
  return MEMORY[0x1F4101308]();
}

uint64_t ViewList.applyIDs(from:listAttribute:to:)()
{
  return MEMORY[0x1F4101310]();
}

uint64_t static ViewSize.invalidValue.getter()
{
  return MEMORY[0x1F4101318]();
}

uint64_t static ViewSize.== infix(_:_:)()
{
  return MEMORY[0x1F4101320]();
}

uint64_t static ViewSize.zero.getter()
{
  return MEMORY[0x1F4101328]();
}

uint64_t static ViewSize.fixed(_:)()
{
  return MEMORY[0x1F4101330]();
}

uint64_t ViewSize.value.modify()
{
  return MEMORY[0x1F4101338]();
}

uint64_t ViewSize.value.getter()
{
  return MEMORY[0x1F4101340]();
}

uint64_t ViewSize.value.setter()
{
  return MEMORY[0x1F4101348]();
}

uint64_t ViewSize.width.modify()
{
  return MEMORY[0x1F4101350]();
}

uint64_t ViewSize.width.getter()
{
  return MEMORY[0x1F4101358]();
}

uint64_t ViewSize.height.modify()
{
  return MEMORY[0x1F4101360]();
}

uint64_t ViewSize.height.getter()
{
  return MEMORY[0x1F4101368]();
}

uint64_t ViewSize.proposal.getter()
{
  return MEMORY[0x1F4101370]();
}

uint64_t ViewSize.proposal.setter()
{
  return MEMORY[0x1F4101378]();
}

uint64_t ViewSize.init(_:proposal:)()
{
  return MEMORY[0x1F4101380]();
}

uint64_t ViewSize.subscript.getter()
{
  return MEMORY[0x1F4101388]();
}

uint64_t static _TestApp.setTestEnvironment(_:)()
{
  return MEMORY[0x1F4101390]();
}

Swift::Void __swiftcall _TestApp.setSemantics(_:)(Swift::String a1)
{
}

uint64_t static _TestApp.renderOptions.getter()
{
  return MEMORY[0x1F41013A8]();
}

uint64_t static _TestApp.comparisonHost.getter()
{
  return MEMORY[0x1F41013B0]();
}

uint64_t static _TestApp.comparisonHost.setter()
{
  return MEMORY[0x1F41013B8]();
}

uint64_t static _TestApp.defaultEnvironment.getter()
{
  return MEMORY[0x1F41013C0]();
}

uint64_t static _TestApp.rootViewIdentifier.getter()
{
  return MEMORY[0x1F41013C8]();
}

uint64_t static _TestApp.environmentOverride.setter()
{
  return MEMORY[0x1F41013D0]();
}

uint64_t static _TestApp.comparisonViewIdentifier.getter()
{
  return MEMORY[0x1F41013D8]();
}

uint64_t static _TestApp.host.getter()
{
  return MEMORY[0x1F41013E0]();
}

uint64_t static _TestApp.host.setter()
{
  return MEMORY[0x1F41013E8]();
}

uint64_t _TestApp.RootView.StateType.setTestView<A>(_:)()
{
  return MEMORY[0x1F41013F0]();
}

uint64_t _TestApp.RootView.init()()
{
  return MEMORY[0x1F41013F8]();
}

uint64_t static _TestApp.date(for:)()
{
  return MEMORY[0x1F4101400]();
}

uint64_t distance(_:_:)()
{
  return MEMORY[0x1F4101408]();
}

uint64_t static Alignment.topLeading.getter()
{
  return MEMORY[0x1F4101410]();
}

uint64_t static Alignment.top.getter()
{
  return MEMORY[0x1F4101418]();
}

uint64_t static Alignment.bottom.getter()
{
  return MEMORY[0x1F4101420]();
}

uint64_t static Alignment.center.getter()
{
  return MEMORY[0x1F4101428]();
}

uint64_t static Alignment.leading.getter()
{
  return MEMORY[0x1F4101430]();
}

uint64_t static Alignment.trailing.getter()
{
  return MEMORY[0x1F4101438]();
}

uint64_t Alignment.fraction.getter()
{
  return MEMORY[0x1F4101440]();
}

uint64_t static Animation.coreAnimationDefault(duration:)()
{
  return MEMORY[0x1F4101448]();
}

uint64_t Animation.description.getter()
{
  return MEMORY[0x1F4101450]();
}

uint64_t Animation.repeatCount(_:autoreverses:)()
{
  return MEMORY[0x1F4101458]();
}

uint64_t Animation.shouldMerge<A>(previous:value:time:context:)()
{
  return MEMORY[0x1F4101460]();
}

uint64_t static Animation.timingCurve(_:_:_:_:duration:)()
{
  return MEMORY[0x1F4101468]();
}

uint64_t Animation.repeatForever(autoreverses:)()
{
  return MEMORY[0x1F4101470]();
}

uint64_t static Animation.interpolatingSpring(mass:stiffness:damping:initialVelocity:)()
{
  return MEMORY[0x1F4101478]();
}

uint64_t static Animation.== infix(_:_:)()
{
  return MEMORY[0x1F4101480]();
}

uint64_t Animation.hash(into:)()
{
  return MEMORY[0x1F4101488]();
}

uint64_t Animation.delay(_:)()
{
  return MEMORY[0x1F4101490]();
}

uint64_t Animation.speed(_:)()
{
  return MEMORY[0x1F4101498]();
}

uint64_t static Animation.easeIn(duration:)()
{
  return MEMORY[0x1F41014A0]();
}

uint64_t static Animation.linear(duration:)()
{
  return MEMORY[0x1F41014A8]();
}

uint64_t static Animation.spring(response:dampingFraction:blendDuration:)()
{
  return MEMORY[0x1F41014B0]();
}

uint64_t static Animation.spring(_:blendDuration:)()
{
  return MEMORY[0x1F41014B8]();
}

uint64_t Animation.animate<A>(value:time:context:)()
{
  return MEMORY[0x1F41014C0]();
}

uint64_t static Animation.default.getter()
{
  return MEMORY[0x1F41014C8]();
}

uint64_t static Animation.easeOut(duration:)()
{
  return MEMORY[0x1F41014D0]();
}

uint64_t Animation.velocity<A>(value:time:context:)()
{
  return MEMORY[0x1F41014D8]();
}

uint64_t static Animation.easeInOut(duration:)()
{
  return MEMORY[0x1F41014E0]();
}

uint64_t Animation.init<A>(_:)()
{
  return MEMORY[0x1F41014E8]();
}

uint64_t AnyLayout.init<A>(_:)()
{
  return MEMORY[0x1F41014F0]();
}

uint64_t AtomicBox.init(wrappedValue:)()
{
  return MEMORY[0x1F41014F8]();
}

uint64_t AtomicBox.wrappedValue.modify()
{
  return MEMORY[0x1F4101500]();
}

uint64_t AtomicBox.wrappedValue.getter()
{
  return MEMORY[0x1F4101508]();
}

uint64_t AtomicBox.access<A>(_:)()
{
  return MEMORY[0x1F4101510]();
}

uint64_t type metadata accessor for AtomicBox()
{
  return MEMORY[0x1F4101518]();
}

uint64_t CoreGlue2.LinkURLParameters.size.getter()
{
  return MEMORY[0x1F4101520]();
}

uint64_t CoreGlue2.LinkURLParameters.point.getter()
{
  return MEMORY[0x1F4101528]();
}

uint64_t EventType.isFocusEvent.getter()
{
  return MEMORY[0x1F4101530]();
}

uint64_t static GraphHost.currentHost.getter()
{
  return MEMORY[0x1F4101538]();
}

Swift::Void __swiftcall GraphHost.invalidate()()
{
}

uint64_t static GraphHost.isUpdating.getter()
{
  return MEMORY[0x1F4101548]();
}

uint64_t GraphHost.environment.getter()
{
  return MEMORY[0x1F4101550]();
}

Swift::Void __swiftcall GraphHost.instantiate()()
{
}

uint64_t GraphHost.rootSubgraph.getter()
{
  return MEMORY[0x1F4101560]();
}

uint64_t GraphHost.addPreference<A>(_:)()
{
  return MEMORY[0x1F4101568]();
}

Swift::Void __swiftcall GraphHost.uninstantiate(immediately:)(Swift::Bool immediately)
{
}

uint64_t GraphHost.globalSubgraph.getter()
{
  return MEMORY[0x1F4101578]();
}

Swift::Void __swiftcall GraphHost.incrementPhase()()
{
}

Swift::Void __swiftcall GraphHost.runTransaction()()
{
}

uint64_t GraphHost.setEnvironment(_:)()
{
  return MEMORY[0x1F4101590]();
}

Swift::Void __swiftcall GraphHost.setNeedsUpdate(mayDeferUpdate:)(Swift::Bool mayDeferUpdate)
{
}

uint64_t GraphHost.preferenceValue<A>(_:)()
{
  return MEMORY[0x1F41015A0]();
}

uint64_t GraphHost.asyncTransaction<A>(_:id:invalidating:style:mayDeferUpdate:)()
{
  return MEMORY[0x1F41015A8]();
}

uint64_t default argument 1 of GraphHost.asyncTransaction<A>(_:id:invalidating:style:mayDeferUpdate:)()
{
  return MEMORY[0x1F41015B0]();
}

uint64_t GraphHost.asyncTransaction<A>(_:id:mutation:style:mayDeferUpdate:)()
{
  return MEMORY[0x1F41015B8]();
}

uint64_t default argument 1 of GraphHost.asyncTransaction<A>(_:id:mutation:style:mayDeferUpdate:)()
{
  return MEMORY[0x1F41015C0]();
}

uint64_t GraphHost.asyncTransaction(_:id:_:)()
{
  return MEMORY[0x1F41015C8]();
}

uint64_t default argument 1 of GraphHost.asyncTransaction(_:id:_:)()
{
  return MEMORY[0x1F41015D0]();
}

uint64_t GraphHost.emptyTransaction(_:)()
{
  return MEMORY[0x1F41015D8]();
}

uint64_t GraphHost.preferenceValues()()
{
  return MEMORY[0x1F41015E0]();
}

uint64_t GraphHost.removePreference<A>(_:)()
{
  return MEMORY[0x1F41015E8]();
}

Swift::Void __swiftcall GraphHost.flushTransactions()()
{
}

Swift::Bool __swiftcall GraphHost.updatePreferences()()
{
  return MEMORY[0x1F41015F8]();
}

Swift::Void __swiftcall GraphHost.updateRemovedState()()
{
}

uint64_t GraphHost.continueTransaction(_:)()
{
  return MEMORY[0x1F4101608]();
}

Swift::Void __swiftcall GraphHost.instantiateIfNeeded()()
{
}

uint64_t GraphHost.hostPreferenceValues.modify()
{
  return MEMORY[0x1F4101618]();
}

uint64_t GraphHost.Data.updateSeed.modify()
{
  return MEMORY[0x1F4101620]();
}

uint64_t GraphHost.Data.updateSeed.getter()
{
  return MEMORY[0x1F4101628]();
}

uint64_t GraphHost.Data.$updateSeed.getter()
{
  return MEMORY[0x1F4101630]();
}

uint64_t GraphHost.Data.globalSubgraph.getter()
{
  return MEMORY[0x1F4101638]();
}

uint64_t GraphHost.Data.hostPreferenceKeys.modify()
{
  return MEMORY[0x1F4101640]();
}

uint64_t GraphHost.Data.$hostPreferenceKeys.getter()
{
  return MEMORY[0x1F4101648]();
}

uint64_t GraphHost.Data.phase.modify()
{
  return MEMORY[0x1F4101650]();
}

uint64_t GraphHost.Data.init()()
{
  return MEMORY[0x1F4101658]();
}

uint64_t GraphHost.init(data:)()
{
  return MEMORY[0x1F4101660]();
}

uint64_t GraphHost.graph.getter()
{
  return MEMORY[0x1F4101668]();
}

uint64_t GraphHost.intern<A>(_:for:id:)()
{
  return MEMORY[0x1F4101670]();
}

uint64_t GraphHost.setPhase(_:)()
{
  return MEMORY[0x1F4101678]();
}

uint64_t type metadata accessor for GraphHost()
{
  return MEMORY[0x1F4101680]();
}

uint64_t GraphHost.deinit()
{
  return MEMORY[0x1F4101688]();
}

uint64_t static MultiView._makeView(view:inputs:)()
{
  return MEMORY[0x1F4101690]();
}

uint64_t static MultiView._viewListCount(inputs:)()
{
  return MEMORY[0x1F4101698]();
}

uint64_t Namespace.wrappedValue.getter()
{
  return MEMORY[0x1F41016A0]();
}

uint64_t type metadata accessor for ObjcColor()
{
  return MEMORY[0x1F41016A8]();
}

uint64_t ObjcColor.__allocating_init(_:)()
{
  return MEMORY[0x1F41016B0]();
}

uint64_t Rectangle.path(in:)()
{
  return MEMORY[0x1F41016B8]();
}

uint64_t static Semantics.v2.getter()
{
  return MEMORY[0x1F41016C0]();
}

uint64_t static Semantics.v3.getter()
{
  return MEMORY[0x1F41016C8]();
}

uint64_t static Semantics.v4.getter()
{
  return MEMORY[0x1F41016D0]();
}

uint64_t static Semantics.v5.getter()
{
  return MEMORY[0x1F41016D8]();
}

uint64_t static Semantics.v6.getter()
{
  return MEMORY[0x1F41016E0]();
}

uint64_t static Semantics.v7.getter()
{
  return MEMORY[0x1F41016E8]();
}

uint64_t static Semantics.v3_2.getter()
{
  return MEMORY[0x1F41016F0]();
}

uint64_t static Semantics.v4_4.getter()
{
  return MEMORY[0x1F41016F8]();
}

uint64_t static Semantics.v6_1.getter()
{
  return MEMORY[0x1F4101700]();
}

uint64_t static Semantics.v6_2.getter()
{
  return MEMORY[0x1F4101708]();
}

uint64_t static TupleView._viewListCount(inputs:)()
{
  return MEMORY[0x1F4101710]();
}

uint64_t type metadata accessor for TupleView()
{
  return MEMORY[0x1F4101718]();
}

uint64_t TupleView.init(_:)()
{
  return MEMORY[0x1F4101720]();
}

uint64_t static UnaryView._makeViewList(view:inputs:)()
{
  return MEMORY[0x1F4101728]();
}

uint64_t static UnaryView._viewListCount(inputs:)()
{
  return MEMORY[0x1F4101730]();
}

uint64_t static UnitCurve.== infix(_:_:)()
{
  return MEMORY[0x1F4101738]();
}

Swift::Double __swiftcall UnitCurve.value(at:)(Swift::Double at)
{
  MEMORY[0x1F4101740](at);
  return result;
}

uint64_t static UnitCurve.easeInOut.getter()
{
  return MEMORY[0x1F4101748]();
}

uint64_t UnitCurve.CubicSolver.init(startControlPoint:endControlPoint:)()
{
  return MEMORY[0x1F4101750]();
}

uint64_t static UnitPoint.topLeading.getter()
{
  return MEMORY[0x1F4101758]();
}

uint64_t static UnitPoint.topTrailing.getter()
{
  return MEMORY[0x1F4101760]();
}

uint64_t static UnitPoint.bottomLeading.getter()
{
  return MEMORY[0x1F4101768]();
}

uint64_t static UnitPoint.bottomTrailing.getter()
{
  return MEMORY[0x1F4101770]();
}

uint64_t static UnitPoint.== infix(_:_:)()
{
  return MEMORY[0x1F4101778]();
}

CGPoint __swiftcall UnitPoint.in(_:)(__C::CGRect a1)
{
  MEMORY[0x1F4101780]((__n128)a1.origin, *(__n128 *)&a1.origin.y, (__n128)a1.size, *(__n128 *)&a1.size.height);
  result.CGFloat y = v2;
  result.CGFloat x = v1;
  return result;
}

CGPoint __swiftcall UnitPoint.in(_:)(CGSize a1)
{
  MEMORY[0x1F4101788]((__n128)__PAIR128__(v1, *(unint64_t *)&a1.width), (__n128)__PAIR128__(v2, *(unint64_t *)&a1.height));
  result.CGFloat y = v4;
  result.CGFloat x = v3;
  return result;
}

uint64_t static UnitPoint.top.getter()
{
  return MEMORY[0x1F4101790]();
}

uint64_t UnitPoint.hash(into:)()
{
  return MEMORY[0x1F4101798]();
}

uint64_t static UnitPoint.bottom.getter()
{
  return MEMORY[0x1F41017A0]();
}

uint64_t static UnitPoint.center.getter()
{
  return MEMORY[0x1F41017A8]();
}

uint64_t static UnitPoint.leading.getter()
{
  return MEMORY[0x1F41017B0]();
}

uint64_t static UnitPoint.infinity.getter()
{
  return MEMORY[0x1F41017B8]();
}

uint64_t static UnitPoint.trailing.getter()
{
  return MEMORY[0x1F41017C0]();
}

uint64_t UnitPoint.init(_:in:by:)()
{
  return MEMORY[0x1F41017C8]();
}

uint64_t UnitPoint.subscript.getter()
{
  return MEMORY[0x1F41017D0]();
}

uint64_t UnitPoint.init(_:in:)()
{
  return MEMORY[0x1F41017D8]();
}

uint64_t ViewFrame.round(toMultipleOf:)()
{
  return MEMORY[0x1F41017E0]();
}

uint64_t ViewGraph.__allocating_init<A>(rootViewType:requestedOutputs:)()
{
  return MEMORY[0x1F41017E8]();
}

uint64_t ViewGraph.init<A>(rootViewType:requestedOutputs:)()
{
  return MEMORY[0x1F41017F0]();
}

uint64_t ViewGraph.setRootView<A>(_:)()
{
  return MEMORY[0x1F41017F8]();
}

uint64_t ViewGraph.$zeroPoint.getter()
{
  return MEMORY[0x1F4101800]();
}

uint64_t ViewGraph.NextUpdate.maxVelocity(_:)()
{
  return MEMORY[0x1F4101808]();
}

uint64_t ViewGraph.displayList()()
{
  return MEMORY[0x1F4101810]();
}

uint64_t ViewGraph.responderNode.getter()
{
  return MEMORY[0x1F4101818]();
}

uint64_t ViewGraph.viewDebugData()()
{
  return MEMORY[0x1F4101820]();
}

Swift::Void __swiftcall ViewGraph.setProposedSize(_:)(CGSize a1)
{
  MEMORY[0x1F4101828]((__n128)__PAIR128__(v1, *(unint64_t *)&a1.width), (__n128)__PAIR128__(v2, *(unint64_t *)&a1.height));
}

uint64_t ViewGraph.preferenceBridge.getter()
{
  return MEMORY[0x1F4101830]();
}

uint64_t ViewGraph.preferenceBridge.setter()
{
  return MEMORY[0x1F4101838]();
}

uint64_t ViewGraph.setContainerSize(_:)()
{
  return MEMORY[0x1F4101840]();
}

uint64_t ViewGraph.setSafeAreaInsets(_:)()
{
  return MEMORY[0x1F4101848]();
}

Swift::Bool __swiftcall ViewGraph.setSafeAreaInsets(_:)(Swift::OpaquePointer a1)
{
  return MEMORY[0x1F4101850](a1._rawValue);
}

Swift::Bool __swiftcall ViewGraph.invalidateTransform()()
{
  return MEMORY[0x1F4101858]();
}

uint64_t ViewGraph.$defaultLayoutComputer.getter()
{
  return MEMORY[0x1F4101860]();
}

uint64_t ViewGraph.updatePreferenceBridge(environment:deferredUpdate:)()
{
  return MEMORY[0x1F4101868]();
}

uint64_t ViewGraph.updateRequiredMainThread.getter()
{
  return MEMORY[0x1F4101870]();
}

uint64_t ViewGraph.append<A>(feature:)()
{
  return MEMORY[0x1F4101878]();
}

uint64_t static ViewGraph.Outputs.defaults.getter()
{
  return MEMORY[0x1F4101880]();
}

uint64_t static ViewGraph.current.getter()
{
  return MEMORY[0x1F4101888]();
}

uint64_t ViewGraph.transform.getter()
{
  return MEMORY[0x1F4101890]();
}

uint64_t type metadata accessor for ViewGraph()
{
  return MEMORY[0x1F4101898]();
}

uint64_t ViewGraph.subscript.getter()
{
  return MEMORY[0x1F41018A0]();
}

uint64_t withDelay(_:do:)()
{
  return MEMORY[0x1F41018A8]();
}

uint64_t dispatch thunk of SymbolEffect.configuration.getter()
{
  return MEMORY[0x1F4101B90]();
}

uint64_t PulseSymbolEffect.isLayered.getter()
{
  return MEMORY[0x1F4101BA8]();
}

uint64_t type metadata accessor for PulseSymbolEffect()
{
  return MEMORY[0x1F4101BB0]();
}

uint64_t ScaleSymbolEffect.isUp.getter()
{
  return MEMORY[0x1F4101BB8]();
}

uint64_t ScaleSymbolEffect.isLayered.getter()
{
  return MEMORY[0x1F4101BC0]();
}

uint64_t type metadata accessor for ScaleSymbolEffect()
{
  return MEMORY[0x1F4101BC8]();
}

uint64_t AppearSymbolEffect.isUp.getter()
{
  return MEMORY[0x1F4101BD0]();
}

uint64_t AppearSymbolEffect.isLayered.getter()
{
  return MEMORY[0x1F4101BD8]();
}

uint64_t type metadata accessor for AppearSymbolEffect()
{
  return MEMORY[0x1F4101BE8]();
}

uint64_t BounceSymbolEffect.isUp.getter()
{
  return MEMORY[0x1F4101BF0]();
}

uint64_t BounceSymbolEffect.isLayered.getter()
{
  return MEMORY[0x1F4101BF8]();
}

uint64_t BounceSymbolEffect.init()()
{
  return MEMORY[0x1F4101C00]();
}

uint64_t type metadata accessor for BounceSymbolEffect()
{
  return MEMORY[0x1F4101C08]();
}

uint64_t RotateSymbolEffect.isClockwise.getter()
{
  return MEMORY[0x1F4101C10]();
}

uint64_t RotateSymbolEffect.isLayered.getter()
{
  return MEMORY[0x1F4101C18]();
}

uint64_t type metadata accessor for RotateSymbolEffect()
{
  return MEMORY[0x1F4101C20]();
}

uint64_t type metadata accessor for WiggleSymbolEffect.WiggleStyle()
{
  return MEMORY[0x1F4101C28]();
}

uint64_t WiggleSymbolEffect.style.getter()
{
  return MEMORY[0x1F4101C30]();
}

uint64_t WiggleSymbolEffect.isLayered.getter()
{
  return MEMORY[0x1F4101C38]();
}

uint64_t type metadata accessor for WiggleSymbolEffect()
{
  return MEMORY[0x1F4101C40]();
}

uint64_t type metadata accessor for BreatheSymbolEffect.BreatheStyle()
{
  return MEMORY[0x1F4101C48]();
}

uint64_t BreatheSymbolEffect.style.getter()
{
  return MEMORY[0x1F4101C50]();
}

uint64_t BreatheSymbolEffect.isLayered.getter()
{
  return MEMORY[0x1F4101C58]();
}

uint64_t type metadata accessor for BreatheSymbolEffect()
{
  return MEMORY[0x1F4101C60]();
}

uint64_t type metadata accessor for ReplaceSymbolEffect.ReplaceStyle()
{
  return MEMORY[0x1F4101C68]();
}

uint64_t ReplaceSymbolEffect.style.getter()
{
  return MEMORY[0x1F4101C78]();
}

uint64_t ReplaceSymbolEffect.isLayered.getter()
{
  return MEMORY[0x1F4101C80]();
}

uint64_t type metadata accessor for ReplaceSymbolEffect()
{
  return MEMORY[0x1F4101C90]();
}

uint64_t SymbolEffectOptions.repeatDelay.getter()
{
  return MEMORY[0x1F4101C98]();
}

uint64_t type metadata accessor for SymbolEffectOptions.RepeatOption()
{
  return MEMORY[0x1F4101CA0]();
}

uint64_t SymbolEffectOptions.prefersContinuous.getter()
{
  return MEMORY[0x1F4101CA8]();
}

uint64_t SymbolEffectOptions.speed.getter()
{
  return MEMORY[0x1F4101CB8]();
}

uint64_t SymbolEffectOptions.repeat.getter()
{
  return MEMORY[0x1F4101CC0]();
}

uint64_t static SymbolEffectOptions.default.getter()
{
  return MEMORY[0x1F4101CC8]();
}

uint64_t type metadata accessor for SymbolEffectOptions()
{
  return MEMORY[0x1F4101CD0]();
}

uint64_t DisappearSymbolEffect.isUp.getter()
{
  return MEMORY[0x1F4101CE8]();
}

uint64_t DisappearSymbolEffect.isLayered.getter()
{
  return MEMORY[0x1F4101CF0]();
}

uint64_t type metadata accessor for DisappearSymbolEffect()
{
  return MEMORY[0x1F4101D00]();
}

uint64_t MagicReplaceSymbolEffect.fallback.getter()
{
  return MEMORY[0x1F4101D08]();
}

uint64_t type metadata accessor for MagicReplaceSymbolEffect()
{
  return MEMORY[0x1F4101D10]();
}

uint64_t type metadata accessor for SymbolEffectConfiguration.Effect()
{
  return MEMORY[0x1F4101D18]();
}

uint64_t SymbolEffectConfiguration.effect.getter()
{
  return MEMORY[0x1F4101D20]();
}

uint64_t type metadata accessor for SymbolEffectConfiguration()
{
  return MEMORY[0x1F4101D28]();
}

uint64_t VariableColorSymbolEffect.isIterative.getter()
{
  return MEMORY[0x1F4101D30]();
}

uint64_t VariableColorSymbolEffect.isReversing.getter()
{
  return MEMORY[0x1F4101D38]();
}

uint64_t VariableColorSymbolEffect.hasReveal.getter()
{
  return MEMORY[0x1F4101D40]();
}

uint64_t type metadata accessor for VariableColorSymbolEffect()
{
  return MEMORY[0x1F4101D48]();
}

uint64_t type metadata accessor for DispatchWorkItemFlags()
{
  return MEMORY[0x1F4186CB0]();
}

uint64_t static DispatchQoS.unspecified.getter()
{
  return MEMORY[0x1F4186CF8]();
}

uint64_t type metadata accessor for DispatchQoS()
{
  return MEMORY[0x1F4186D60]();
}

uint64_t static DispatchTime.now()()
{
  return MEMORY[0x1F4186E28]();
}

uint64_t type metadata accessor for DispatchTime()
{
  return MEMORY[0x1F4186E60]();
}

uint64_t + infix(_:_:)()
{
  return MEMORY[0x1F4186F18]();
}

uint64_t Dictionary.init()()
{
  return MEMORY[0x1F4183270]();
}

uint64_t Array.init()()
{
  return MEMORY[0x1F4183280]();
}

uint64_t Set.init()()
{
  return MEMORY[0x1F4183288]();
}

uint64_t BinaryFloatingPoint.formatted<A>(_:)()
{
  return MEMORY[0x1F40E5FE0]();
}

uint64_t BinaryFloatingPoint.init<A>(_:)()
{
  return MEMORY[0x1F41832D0]();
}

uint64_t dispatch thunk of BinaryFloatingPoint.init(_:)()
{
  return MEMORY[0x1F41832F8]();
}

uint64_t dispatch thunk of BinaryFloatingPoint.init<A>(_:)()
{
  return MEMORY[0x1F4183308]();
}

NSDictionary __swiftcall Dictionary._bridgeToObjectiveC()()
{
  return (NSDictionary)MEMORY[0x1F40E6000]();
}

uint64_t static Dictionary._unconditionallyBridgeFromObjectiveC(_:)()
{
  return MEMORY[0x1F40E6030]();
}

uint64_t Dictionary<>.init(_:)()
{
  return MEMORY[0x1F40E6048]();
}

uint64_t Dictionary.startIndex.getter()
{
  return MEMORY[0x1F4183310]();
}

uint64_t Dictionary.removeValue(forKey:)()
{
  return MEMORY[0x1F4183320]();
}

uint64_t Dictionary.init(minimumCapacity:)()
{
  return MEMORY[0x1F4183338]();
}

Swift::Void __swiftcall Dictionary.reserveCapacity(_:)(Swift::Int a1)
{
}

uint64_t Dictionary.init(dictionaryLiteral:)()
{
  return MEMORY[0x1F4183358]();
}

uint64_t type metadata accessor for Dictionary.Keys()
{
  return MEMORY[0x1F4183398]();
}

uint64_t static Dictionary.Index.== infix(_:_:)()
{
  return MEMORY[0x1F41833A8]();
}

uint64_t type metadata accessor for Dictionary.Index._Variant()
{
  return MEMORY[0x1F41833B8]();
}

uint64_t Dictionary.count.getter()
{
  return MEMORY[0x1F41833D0]();
}

uint64_t Dictionary.merge(_:uniquingKeysWith:)()
{
  return MEMORY[0x1F41833E8]();
}

uint64_t type metadata accessor for Dictionary.Values()
{
  return MEMORY[0x1F4183408]();
}

uint64_t Dictionary.filter(_:)()
{
  return MEMORY[0x1F4183420]();
}

uint64_t Dictionary.optimisticFilter(_:)()
{
  return MEMORY[0x1F41018B0]();
}

uint64_t Dictionary.endIndex.getter()
{
  return MEMORY[0x1F4183478]();
}

uint64_t Dictionary.formIndex(after:)()
{
  return MEMORY[0x1F4183490]();
}

uint64_t Dictionary.mapValues<A>(_:)()
{
  return MEMORY[0x1F4183498]();
}

Swift::Void __swiftcall Dictionary.removeAll(keepingCapacity:)(Swift::Bool keepingCapacity)
{
}

uint64_t type metadata accessor for Dictionary()
{
  return MEMORY[0x1F41834A8]();
}

uint64_t Dictionary.subscript.getter()
{
  return MEMORY[0x1F41834F8]();
}

{
  return MEMORY[0x1F4183508]();
}

uint64_t Dictionary.subscript.setter()
{
  return MEMORY[0x1F4183500]();
}

uint64_t dispatch thunk of Encodable.encode(to:)()
{
  return MEMORY[0x1F4183510]();
}

uint64_t dispatch thunk of static FloatingPoint./ infix(_:_:)()
{
  return MEMORY[0x1F4183520]();
}

uint64_t FloatingPoint.rounded(toMultipleOf:)()
{
  return MEMORY[0x1F41018B8]();
}

uint64_t dispatch thunk of FloatingPoint.rounded(_:)()
{
  return MEMORY[0x1F4183570]();
}

uint64_t dispatch thunk of Hashable._rawHashValue(seed:)()
{
  return MEMORY[0x1F41835C0]();
}

uint64_t dispatch thunk of Hashable.hash(into:)()
{
  return MEMORY[0x1F41835C8]();
}

uint64_t dispatch thunk of Hashable.hashValue.getter()
{
  return MEMORY[0x1F41835D0]();
}

uint64_t DefaultIndices.startIndex.getter()
{
  return MEMORY[0x1F41835E0]();
}

uint64_t DefaultIndices.endIndex.getter()
{
  return MEMORY[0x1F41835E8]();
}

uint64_t DefaultIndices.formIndex(after:)()
{
  return MEMORY[0x1F41835F0]();
}

uint64_t type metadata accessor for DefaultIndices()
{
  return MEMORY[0x1F41835F8]();
}

uint64_t DefaultIndices.subscript.getter()
{
  return MEMORY[0x1F4183600]();
}

uint64_t Character.isUppercase.getter()
{
  return MEMORY[0x1F4183628]();
}

uint64_t Character.hash(into:)()
{
  return MEMORY[0x1F4183678]();
}

uint64_t dispatch thunk of BidirectionalCollection.index(before:)()
{
  return MEMORY[0x1F41836A8]();
}

uint64_t dispatch thunk of BidirectionalCollection.formIndex(before:)()
{
  return MEMORY[0x1F41836C8]();
}

uint64_t BidirectionalCollection.index(_:offsetBy:)()
{
  return MEMORY[0x1F41836F0]();
}

uint64_t BidirectionalCollection.distance(from:to:)()
{
  return MEMORY[0x1F4183700]();
}

uint64_t BidirectionalCollection.reversed()()
{
  return MEMORY[0x1F4183710]();
}

uint64_t BidirectionalCollection.lastIndex(where:)()
{
  return MEMORY[0x1F4183718]();
}

uint64_t BidirectionalCollection<>.difference<A>(from:)()
{
  return MEMORY[0x1F4183720]();
}

uint64_t BidirectionalCollection<>.joined(separator:)()
{
  return MEMORY[0x1F4183730]();
}

uint64_t dispatch thunk of static Comparable.> infix(_:_:)()
{
  return MEMORY[0x1F4183738]();
}

uint64_t dispatch thunk of static Comparable.< infix(_:_:)()
{
  return MEMORY[0x1F4183740]();
}

uint64_t dispatch thunk of static Comparable.>= infix(_:_:)()
{
  return MEMORY[0x1F4183748]();
}

uint64_t dispatch thunk of static Comparable.<= infix(_:_:)()
{
  return MEMORY[0x1F4183750]();
}

uint64_t Comparable.clamp(min:max:)()
{
  return MEMORY[0x1F41018C0]();
}

uint64_t Comparable.clamped(to:)()
{
  return MEMORY[0x1F41018C8]();
}

uint64_t MutableCollection.move(fromOffsets:toOffset:)()
{
  return MEMORY[0x1F41018D0]();
}

uint64_t MutableCollection.withContiguousMutableStorageIfAvailable<A>(_:)()
{
  return MEMORY[0x1F4183788]();
}

uint64_t MutableCollection._withUnsafeMutableBufferPointerIfSupported<A>(_:)()
{
  return MEMORY[0x1F4183790]();
}

uint64_t MutableCollection.swapAt(_:_:)()
{
  return MEMORY[0x1F4183798]();
}

uint64_t MutableCollection.subscript.getter()
{
  return MEMORY[0x1F41837A8]();
}

uint64_t MutableCollection<>.partition(by:)()
{
  return MEMORY[0x1F41837C0]();
}

uint64_t dispatch thunk of MutableCollection.subscript.setter()
{
  return MEMORY[0x1F41837E0]();
}

uint64_t ClosedRange.debugDescription.getter()
{
  return MEMORY[0x1F41837E8]();
}

uint64_t ClosedRange<>.progress(at:countdown:)()
{
  return MEMORY[0x1F41018D8]();
}

uint64_t ClosedRange.contains(_:)()
{
  return MEMORY[0x1F4183800]();
}

uint64_t type metadata accessor for ClosedRange()
{
  return MEMORY[0x1F4183808]();
}

uint64_t dispatch thunk of static Equatable.== infix(_:_:)()
{
  return MEMORY[0x1F4183838]();
}

uint64_t UnsafeBufferPointer.indices.getter()
{
  return MEMORY[0x1F4183858]();
}

uint64_t UnsafeBufferPointer.endIndex.getter()
{
  return MEMORY[0x1F4183860]();
}

uint64_t type metadata accessor for UnsafeBufferPointer()
{
  return MEMORY[0x1F4183870]();
}

uint64_t type metadata accessor for String.StandardComparator()
{
  return MEMORY[0x1F40E6168]();
}

NSString __swiftcall String._bridgeToObjectiveC()()
{
  return (NSString)MEMORY[0x1F40E6190]();
}

uint64_t static String._forceBridgeFromObjectiveC(_:result:)()
{
  return MEMORY[0x1F40E61B8]();
}

uint64_t static String._conditionallyBridgeFromObjectiveC(_:result:)()
{
  return MEMORY[0x1F40E61C8]();
}

uint64_t static String._unconditionallyBridgeFromObjectiveC(_:)()
{
  return MEMORY[0x1F40E61D8]();
}

uint64_t String.data(using:allowLossyConversion:)()
{
  return MEMORY[0x1F40E61E8]();
}

uint64_t String.init(data:encoding:)()
{
  return MEMORY[0x1F40E61F8]();
}

uint64_t String.init(format:_:)()
{
  return MEMORY[0x1F40E6238]();
}

uint64_t static String.Encoding.utf8.getter()
{
  return MEMORY[0x1F40E6268]();
}

uint64_t type metadata accessor for String.Encoding()
{
  return MEMORY[0x1F40E62A0]();
}

uint64_t String.init(_:)()
{
  return MEMORY[0x1F40E62F8]();
}

{
  return MEMORY[0x1F41018E0]();
}

uint64_t String.init<A>(describing:)()
{
  return MEMORY[0x1F4183880]();
}

{
  return MEMORY[0x1F4183888]();
}

Swift::String __swiftcall String.lowercased()()
{
  uint64_t v0 = MEMORY[0x1F4183898]();
  result._object = v1;
  result._uint64_t countAndFlagsBits = v0;
  return result;
}

uint64_t String.init<A>(reflecting:)()
{
  return MEMORY[0x1F41838A0]();
}

uint64_t static String._fromSubstring(_:)()
{
  return MEMORY[0x1F41838D8]();
}

Swift::Void __swiftcall String.reserveCapacity(_:)(Swift::Int a1)
{
}

uint64_t static String._uncheckedFromUTF8(_:)()
{
  return MEMORY[0x1F4183958]();
}

uint64_t String.hash(into:)()
{
  return MEMORY[0x1F41839B0]();
}

uint64_t String.index(after:)()
{
  return MEMORY[0x1F41839F8]();
}

uint64_t String.index(before:)()
{
  return MEMORY[0x1F4183A00]();
}

uint64_t String.index(_:offsetBy:limitedBy:)()
{
  return MEMORY[0x1F4183A08]();
}

uint64_t String.append<A>(contentsOf:)()
{
  return MEMORY[0x1F4183A28]();
}

Swift::Void __swiftcall String.append(_:)(Swift::String a1)
{
}

Swift::String_optional __swiftcall String.Iterator.next()()
{
  uint64_t v0 = MEMORY[0x1F4183A78]();
  result.value._object = v1;
  result.value._uint64_t countAndFlagsBits = v0;
  return result;
}

Swift::Int __swiftcall String.UTF8View._foreignCount()()
{
  return MEMORY[0x1F4183A80]();
}

uint64_t String.UTF8View._foreignIndex(after:)()
{
  return MEMORY[0x1F4183A88]();
}

uint64_t String.UTF8View._foreignIndex(_:offsetBy:)()
{
  return MEMORY[0x1F4183AA0]();
}

uint64_t String.UTF8View._foreignDistance(from:to:)()
{
  return MEMORY[0x1F4183AA8]();
}

uint64_t String.UTF8View._foreignSubscript(position:)()
{
  return MEMORY[0x1F4183AB0]();
}

uint64_t String.UTF16View.count.getter()
{
  return MEMORY[0x1F4183B00]();
}

uint64_t String.UTF16View.index(_:offsetBy:)()
{
  return MEMORY[0x1F4183B10]();
}

Swift::Bool __swiftcall String.hasPrefix(_:)(Swift::String a1)
{
  return MEMORY[0x1F4183B30](a1._countAndFlagsBits, a1._object);
}

Swift::String __swiftcall String.init(repeating:count:)(Swift::String repeating, Swift::Int count)
{
  uint64_t v2 = MEMORY[0x1F4183B48](repeating._countAndFlagsBits, repeating._object, count);
  result._object = v3;
  result._uint64_t countAndFlagsBits = v2;
  return result;
}

uint64_t String.subscript.getter()
{
  return MEMORY[0x1F4183B58]();
}

{
  return MEMORY[0x1F4183BA0]();
}

uint64_t String.init<A>(_:)()
{
  return MEMORY[0x1F4183B88]();
}

{
  return MEMORY[0x1F4183B90]();
}

uint64_t dispatch thunk of Sequence.makeIterator()()
{
  return MEMORY[0x1F4183BA8]();
}

uint64_t dispatch thunk of Sequence.underestimatedCount.getter()
{
  return MEMORY[0x1F4183BB8]();
}

uint64_t Sequence.first<A>(ofType:)()
{
  return MEMORY[0x1F41018E8]();
}

uint64_t Sequence.compactMap<A>(_:)()
{
  return MEMORY[0x1F4183BE8]();
}

uint64_t Sequence.enumerated()()
{
  return MEMORY[0x1F4183BF0]();
}

uint64_t Sequence._copyContents(initializing:)()
{
  return MEMORY[0x1F4183BF8]();
}

uint64_t Sequence.withContiguousStorageIfAvailable<A>(_:)()
{
  return MEMORY[0x1F4183C18]();
}

uint64_t Sequence.min(by:)()
{
  return MEMORY[0x1F4183C28]();
}

uint64_t Sequence.lazy.getter()
{
  return MEMORY[0x1F4183C38]();
}

uint64_t Sequence.first(where:)()
{
  return MEMORY[0x1F4183C40]();
}

uint64_t Sequence.filter(_:)()
{
  return MEMORY[0x1F4183C48]();
}

uint64_t Sequence.reduce<A>(_:_:)()
{
  return MEMORY[0x1F4183C68]();
}

uint64_t Sequence.sorted(by:)()
{
  return MEMORY[0x1F4183C70]();
}

uint64_t Sequence<>.sorted()()
{
  return MEMORY[0x1F4183CC8]();
}

uint64_t Sequence<>.contains(_:)()
{
  return MEMORY[0x1F4183CE0]();
}

uint64_t dispatch thunk of RawRepresentable.rawValue.getter()
{
  return MEMORY[0x1F4183D70]();
}

uint64_t dispatch thunk of RawRepresentable.init(rawValue:)()
{
  return MEMORY[0x1F4183D78]();
}

uint64_t RawRepresentable<>.encode(to:)()
{
  return MEMORY[0x1F4183D98]();
}

{
  return MEMORY[0x1F4183DC8]();
}

uint64_t RawRepresentable<>.init(from:)()
{
  return MEMORY[0x1F4183E10]();
}

{
  return MEMORY[0x1F4183E40]();
}

uint64_t specialized Array._makeUniqueAndReserveCapacityIfNotUnique()()
{
  return MEMORY[0x1F4183E80]();
}

NSArray __swiftcall Array._bridgeToObjectiveC()()
{
  return (NSArray)MEMORY[0x1F40E6338]();
}

uint64_t static Array._unconditionallyBridgeFromObjectiveC(_:)()
{
  return MEMORY[0x1F40E6370]();
}

uint64_t Array.description.getter()
{
  return MEMORY[0x1F4183E90]();
}

uint64_t specialized Array._endMutation()()
{
  return MEMORY[0x1F4183E98]();
}

uint64_t static Array._adoptStorage(_:count:)()
{
  return MEMORY[0x1F4183EA0]();
}

uint64_t Array._checkSubscript(_:wasNativeTypeChecked:)()
{
  return MEMORY[0x1F4183EA8]();
}

uint64_t Array.replaceSubrange<A>(_:with:)()
{
  return MEMORY[0x1F4183EB0]();
}

uint64_t specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)()
{
  return MEMORY[0x1F4183EC8]();
}

uint64_t Array.debugDescription.getter()
{
  return MEMORY[0x1F4183ED0]();
}

uint64_t static Array.+ infix(_:_:)()
{
  return MEMORY[0x1F4183ED8]();
}

uint64_t Array<A>.recursiveMap<A>(_:transform:)()
{
  return MEMORY[0x1F4165660]();
}

Swift::Void __swiftcall Array._makeMutableAndUnique()()
{
}

uint64_t static Array._allocateUninitialized(_:)()
{
  return MEMORY[0x1F4183EF0]();
}

uint64_t static Array._allocateBufferUninitialized(minimumCapacity:)()
{
  return MEMORY[0x1F4183F08]();
}

Swift::Bool __swiftcall Array._hoistableIsNativeTypeChecked()()
{
  return MEMORY[0x1F4183F18]();
}

uint64_t specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)()
{
  return MEMORY[0x1F4183F38]();
}

uint64_t Array.count.getter()
{
  return MEMORY[0x1F4183F40]();
}

uint64_t Array.append<A>(contentsOf:)()
{
  return MEMORY[0x1F4183F58]();
}

uint64_t Array.append(_:)()
{
  return MEMORY[0x1F4183F60]();
}

uint64_t Array.insert(_:at:)()
{
  return MEMORY[0x1F4183F68]();
}

uint64_t Array.remove(at:)()
{
  return MEMORY[0x1F4183F70]();
}

uint64_t Array<A>.resolve(in:)()
{
  return MEMORY[0x1F41018F0]();
}

uint64_t Array.endIndex.getter()
{
  return MEMORY[0x1F4183F78]();
}

Swift::Int __swiftcall Array._getCount()()
{
  return MEMORY[0x1F4183F80]();
}

Swift::Void __swiftcall Array.removeAll(keepingCapacity:)(Swift::Bool keepingCapacity)
{
}

uint64_t type metadata accessor for Array()
{
  return MEMORY[0x1F4183FA8]();
}

uint64_t Array<A>.hash(into:)()
{
  return MEMORY[0x1F4183FB8]();
}

uint64_t Array<A>.hashValue.getter()
{
  return MEMORY[0x1F4183FC0]();
}

uint64_t static Array<A>.== infix(_:_:)()
{
  return MEMORY[0x1F4183FC8]();
}

uint64_t Array.init<A>(_:)()
{
  return MEMORY[0x1F4183FD8]();
}

uint64_t Array.subscript.getter()
{
  return MEMORY[0x1F4183FE0]();
}

{
  return MEMORY[0x1F4183FF0]();
}

NSNumber __swiftcall Bool._bridgeToObjectiveC()()
{
  return (NSNumber)MEMORY[0x1F40E6388]();
}

uint64_t dispatch thunk of Actor.unownedExecutor.getter()
{
  return MEMORY[0x1F4187BF0]();
}

uint64_t CheckedContinuation.resume(throwing:)()
{
  return MEMORY[0x1F4187C00]();
}

uint64_t CheckedContinuation.resume(returning:)()
{
  return MEMORY[0x1F4187C08]();
}

uint64_t type metadata accessor for CheckedContinuation()
{
  return MEMORY[0x1F4187C10]();
}

uint64_t TaskGroup.makeAsyncIterator()()
{
  return MEMORY[0x1F4187C38]();
}

uint64_t type metadata accessor for TaskGroup()
{
  return MEMORY[0x1F4187C70]();
}

uint64_t static MainActor.shared.getter()
{
  return MEMORY[0x1F4187C98]();
}

uint64_t static MainActor.assumeIsolatedIfLinkedOnOrAfter<A>(_:context:_:file:line:)()
{
  return MEMORY[0x1F41018F8]();
}

uint64_t type metadata accessor for MainActor()
{
  return MEMORY[0x1F4187CA0]();
}

uint64_t static TaskPriority.userInitiated.getter()
{
  return MEMORY[0x1F4187CB0]();
}

uint64_t TaskPriority.rawValue.getter()
{
  return MEMORY[0x1F4187CF8]();
}

uint64_t type metadata accessor for TaskPriority()
{
  return MEMORY[0x1F4187D00]();
}

uint64_t type metadata accessor for AsyncStream.Continuation.YieldResult()
{
  return MEMORY[0x1F4187D10]();
}

uint64_t AsyncStream.Continuation.onTermination.setter()
{
  return MEMORY[0x1F4187D18]();
}

uint64_t type metadata accessor for AsyncStream.Continuation.BufferingPolicy()
{
  return MEMORY[0x1F4187D20]();
}

uint64_t AsyncStream.Continuation.yield(_:)()
{
  return MEMORY[0x1F4187D38]();
}

Swift::Void __swiftcall AsyncStream.Continuation.finish()()
{
}

uint64_t type metadata accessor for AsyncStream.Continuation()
{
  return MEMORY[0x1F4187D48]();
}

uint64_t AsyncStream.makeAsyncIterator()()
{
  return MEMORY[0x1F4187D50]();
}

uint64_t type metadata accessor for AsyncStream.Iterator()
{
  return MEMORY[0x1F4187D68]();
}

uint64_t type metadata accessor for AsyncStream()
{
  return MEMORY[0x1F4187D70]();
}

uint64_t AsyncStream.init(_:bufferingPolicy:_:)()
{
  return MEMORY[0x1F4187D78]();
}

Swift::Void __swiftcall Task.cancel()()
{
}

uint64_t type metadata accessor for Task()
{
  return MEMORY[0x1F4187DB0]();
}

uint64_t dispatch thunk of AsyncSequence.makeAsyncIterator()()
{
  return MEMORY[0x1F4187E68]();
}

uint64_t AsyncSequence.map<A>(_:)()
{
  return MEMORY[0x1F4187E70]();
}

NSNumber __swiftcall Double._bridgeToObjectiveC()()
{
  return (NSNumber)MEMORY[0x1F40E63C8]();
}

uint64_t Double.description.getter()
{
  return MEMORY[0x1F4184008]();
}

uint64_t Double._roundSlowPath(_:)()
{
  return MEMORY[0x1F4184018]();
}

uint64_t Double.write<A>(to:)()
{
  return MEMORY[0x1F4184048]();
}

uint64_t Double.exponent.getter()
{
  return MEMORY[0x1F4184058]();
}

uint64_t dispatch thunk of Decodable.init(from:)()
{
  return MEMORY[0x1F4184090]();
}

uint64_t Float.description.getter()
{
  return MEMORY[0x1F4184098]();
}

NSSet __swiftcall Set._bridgeToObjectiveC()()
{
  return (NSSet)MEMORY[0x1F40E6430]();
}

uint64_t static Set._unconditionallyBridgeFromObjectiveC(_:)()
{
  return MEMORY[0x1F40E6458]();
}

uint64_t Set.init(minimumCapacity:)()
{
  return MEMORY[0x1F4184138]();
}

uint64_t static Set.== infix(_:_:)()
{
  return MEMORY[0x1F4184160]();
}

uint64_t Set.Index._asCocoa.modify()
{
  return MEMORY[0x1F4184178]();
}

uint64_t type metadata accessor for Set.Index()
{
  return MEMORY[0x1F4184180]();
}

uint64_t Set.count.getter()
{
  return MEMORY[0x1F4184188]();
}

uint64_t Set.insert(_:)()
{
  return MEMORY[0x1F41841A8]();
}

uint64_t Set.remove(_:)()
{
  return MEMORY[0x1F41841B0]();
}

uint64_t Set<>.init(_:)()
{
  return MEMORY[0x1F4101900]();
}

uint64_t Set.isEmpty.getter()
{
  return MEMORY[0x1F41841C0]();
}

uint64_t Set.Iterator.init(_cocoa:)()
{
  return MEMORY[0x1F41841D0]();
}

uint64_t Set.contains(_:)()
{
  return MEMORY[0x1F41841F0]();
}

Swift::Void __swiftcall Set.removeAll(keepingCapacity:)(Swift::Bool keepingCapacity)
{
}

uint64_t type metadata accessor for Set()
{
  return MEMORY[0x1F4184230]();
}

uint64_t Set.init<A>(_:)()
{
  return MEMORY[0x1F4184250]();
}

NSNumber __swiftcall Int._bridgeToObjectiveC()()
{
  return (NSNumber)MEMORY[0x1F40E6478]();
}

uint64_t static Int._conditionallyBridgeFromObjectiveC(_:result:)()
{
  return MEMORY[0x1F40E64A0]();
}

uint64_t dispatch thunk of static Numeric.* infix(_:_:)()
{
  return MEMORY[0x1F4184278]();
}

uint64_t dispatch thunk of RandomAccessCollection.index(_:offsetBy:)()
{
  return MEMORY[0x1F4184290]();
}

uint64_t dispatch thunk of RandomAccessCollection.distance(from:to:)()
{
  return MEMORY[0x1F4184298]();
}

uint64_t RandomAccessCollection<>.indices.getter()
{
  return MEMORY[0x1F41842C0]();
}

uint64_t dispatch thunk of Collection.startIndex.getter()
{
  return MEMORY[0x1F41842D0]();
}

uint64_t dispatch thunk of Collection._failEarlyRangeCheck(_:bounds:)()
{
  return MEMORY[0x1F41842D8]();
}

{
  return MEMORY[0x1F41842E0]();
}

uint64_t dispatch thunk of Collection.count.getter()
{
  return MEMORY[0x1F41842F8]();
}

uint64_t dispatch thunk of Collection.index(after:)()
{
  return MEMORY[0x1F4184300]();
}

uint64_t Collection.withContiguousStorage<A>(_:)()
{
  return MEMORY[0x1F4101908]();
}

uint64_t Collection.index(atOffset:)()
{
  return MEMORY[0x1F4101910]();
}

uint64_t Collection.offset(of:)()
{
  return MEMORY[0x1F4101918]();
}

uint64_t dispatch thunk of Collection.indices.getter()
{
  return MEMORY[0x1F4184318]();
}

uint64_t dispatch thunk of Collection.isEmpty.getter()
{
  return MEMORY[0x1F4184320]();
}

uint64_t dispatch thunk of Collection.endIndex.getter()
{
  return MEMORY[0x1F4184330]();
}

uint64_t dispatch thunk of Collection.formIndex(after:)()
{
  return MEMORY[0x1F4184338]();
}

uint64_t Collection.firstIndex(where:)()
{
  return MEMORY[0x1F4184348]();
}

uint64_t Collection._failEarlyRangeCheck(_:bounds:)()
{
  return MEMORY[0x1F4184368]();
}

{
  return MEMORY[0x1F4184370]();
}

{
  return MEMORY[0x1F4184378]();
}

uint64_t Collection.count.getter()
{
  return MEMORY[0x1F4184390]();
}

uint64_t Collection.first.getter()
{
  return MEMORY[0x1F4184398]();
}

uint64_t Collection.suffix(from:)()
{
  return MEMORY[0x1F41843C8]();
}

uint64_t Collection.isEmpty.getter()
{
  return MEMORY[0x1F41843D0]();
}

uint64_t Collection.formIndex(_:offsetBy:limitedBy:)()
{
  return MEMORY[0x1F41843F0]();
}

uint64_t Collection.formIndex(_:offsetBy:)()
{
  return MEMORY[0x1F41843F8]();
}

uint64_t Collection.subscript.getter()
{
  return MEMORY[0x1F4184400]();
}

uint64_t Collection<>.indices.getter()
{
  return MEMORY[0x1F4184410]();
}

uint64_t dispatch thunk of Collection.subscript.read()
{
  return MEMORY[0x1F4184440]();
}

uint64_t dispatch thunk of RangeReplaceableCollection.removeSubrange(_:)()
{
  return MEMORY[0x1F4184448]();
}

uint64_t dispatch thunk of RangeReplaceableCollection.replaceSubrange<A>(_:with:)()
{
  return MEMORY[0x1F4184450]();
}

uint64_t dispatch thunk of RangeReplaceableCollection.append(_:)()
{
  return MEMORY[0x1F4184470]();
}

uint64_t dispatch thunk of RangeReplaceableCollection.insert<A>(contentsOf:at:)()
{
  return MEMORY[0x1F4184478]();
}

uint64_t RangeReplaceableCollection._remove(atOffsets:)()
{
  return MEMORY[0x1F4101920]();
}

uint64_t RangeReplaceableCollection<>.remove(atOffsets:)()
{
  return MEMORY[0x1F4101928]();
}

Swift::Void __swiftcall RangeReplaceableCollection.removeFirst(_:)(Swift::Int a1)
{
}

uint64_t RangeReplaceableCollection.removeSubrange<A>(_:)()
{
  return MEMORY[0x1F41844B8]();
}

Swift::Void __swiftcall RangeReplaceableCollection.removeAll(keepingCapacity:)(Swift::Bool keepingCapacity)
{
}

uint64_t RangeReplaceableCollection<>.removeLast(_:)()
{
  return MEMORY[0x1F4184570]();
}

uint64_t RangeReplaceableCollection<>.removeAll(where:)()
{
  return MEMORY[0x1F4184580]();
}

uint64_t Range<>.init<A>(_:in:)()
{
  return MEMORY[0x1F40E64C0]();
}

uint64_t Range<>.init(_:in:)()
{
  return MEMORY[0x1F40E64D8]();
}

uint64_t type metadata accessor for Range()
{
  return MEMORY[0x1F41845B0]();
}

uint64_t Range<>.startIndex.getter()
{
  return MEMORY[0x1F41845C8]();
}

uint64_t Range<>.endIndex.getter()
{
  return MEMORY[0x1F41845D0]();
}

uint64_t UITableViewHeaderFooterView.backgroundConfiguration.getter()
{
  return MEMORY[0x1F4166460]();
}

uint64_t UITableViewHeaderFooterView.backgroundConfiguration.setter()
{
  return MEMORY[0x1F4166468]();
}

uint64_t static AGGraphRef.stopTracing()()
{
  return MEMORY[0x1F4101930]();
}

uint64_t static AGGraphRef.startTracing(options:)()
{
  return MEMORY[0x1F4101938]();
}

Swift::UInt __swiftcall AGGraphRef.graphIdentity()()
{
  return MEMORY[0x1F4101940]();
}

uint64_t static AGGraphRef.cancelCurrentUpdateIfDeadlinePassed()()
{
  return MEMORY[0x1F4101948]();
}

uint64_t AGGraphRef.viewGraph()()
{
  return MEMORY[0x1F4101950]();
}

uint64_t static CGImageRef.render(size:scale:environment:options:renderer:)()
{
  return MEMORY[0x1F4101958]();
}

uint64_t NSPredicate.init(format:_:)()
{
  return MEMORY[0x1F40E6508]();
}

uint64_t UIFocusItem.isFocused.getter()
{
  return MEMORY[0x1F4166478]();
}

uint64_t NSDictionary.makeIterator()()
{
  return MEMORY[0x1F40E6528]();
}

uint64_t NSDictionary.init(dictionaryLiteral:)()
{
  return MEMORY[0x1F40E6538]();
}

uint64_t NSDictionary.Iterator.next()()
{
  return MEMORY[0x1F40E6548]();
}

uint64_t UIKeyCommand.init(title:image:action:input:modifierFlags:propertyList:alternates:discoverabilityTitle:attributes:state:)()
{
  return MEMORY[0x1F4166490]();
}

Swift::Void __swiftcall AGSubgraphRef.willRemove()()
{
}

Swift::Void __swiftcall AGSubgraphRef.didReinsert()()
{
}

Swift::Void __swiftcall AGSubgraphRef.willInvalidate(isInserted:)(Swift::Bool isInserted)
{
}

uint64_t AGSubgraphRef.addSecondaryChild(_:)()
{
  return MEMORY[0x1F4101978]();
}

uint64_t CATransform3D.init(_:)()
{
  return MEMORY[0x1F4101980]();
}

uint64_t NSUndoManager.registerUndo<A>(withTarget:handler:)()
{
  return MEMORY[0x1F40E6640]();
}

uint64_t static UIFocusSystem.focusSystem(for:)()
{
  return MEMORY[0x1F4166498]();
}

uint64_t UIWindowScene.traitOverrides.getter()
{
  return MEMORY[0x1F41664A0]();
}

uint64_t UIWindowScene.traitOverrides.setter()
{
  return MEMORY[0x1F41664A8]();
}

uint64_t static os_log_type_t.info.getter()
{
  return MEMORY[0x1F41886C0]();
}

uint64_t static os_log_type_t.debug.getter()
{
  return MEMORY[0x1F41886D0]();
}

uint64_t static os_log_type_t.error.getter()
{
  return MEMORY[0x1F41886E0]();
}

uint64_t static os_log_type_t.fault.getter()
{
  return MEMORY[0x1F41886E8]();
}

uint64_t static os_log_type_t.default.getter()
{
  return MEMORY[0x1F4188700]();
}

uint64_t NSItemProvider.loadTransferable<A>(type:completionHandler:)()
{
  return MEMORY[0x1F40DFB28]();
}

uint64_t NSItemProvider.init<A>(transferable:)()
{
  return MEMORY[0x1F40DFB30]();
}

uint64_t NSItemProvider.register<A>(_:)()
{
  return MEMORY[0x1F40DFB38]();
}

uint64_t NSItemProvider.registerDataRepresentation(for:visibility:loadHandler:)()
{
  return MEMORY[0x1F4187A30]();
}

uint64_t UIPointerStyle.init(effect:shape:)()
{
  return MEMORY[0x1F41664B0]();
}

uint64_t UIPointerRegion.identifier.getter()
{
  return MEMORY[0x1F41664D0]();
}

uint64_t UIPointerRegion.init(rect:identifier:)()
{
  return MEMORY[0x1F41664D8]();
}

uint64_t UITableViewCell.backgroundConfiguration.getter()
{
  return MEMORY[0x1F41664F0]();
}

uint64_t UITableViewCell.backgroundConfiguration.setter()
{
  return MEMORY[0x1F41664F8]();
}

uint64_t static AGAttributeFlags.scrapeable.getter()
{
  return MEMORY[0x1F4101988]();
}

uint64_t static AGAttributeFlags.invalidatable.getter()
{
  return MEMORY[0x1F4101990]();
}

uint64_t static AGAttributeFlags.transactional.getter()
{
  return MEMORY[0x1F4101998]();
}

uint64_t static AGAttributeFlags.removable.getter()
{
  return MEMORY[0x1F41019A0]();
}

CAFrameRateRange __swiftcall CAFrameRateRange.init(interval:)(Swift::Double interval)
{
  MEMORY[0x1F41019A8](interval);
  result.preferred = v3;
  result.maximum = v2;
  result.minimum = v1;
  return result;
}

uint64_t NSSortDescriptor.init<A>(_:)()
{
  return MEMORY[0x1F40E66A8]();
}

uint64_t UINavigationItem.renameDelegate.getter()
{
  return MEMORY[0x1F4166540]();
}

uint64_t UINavigationItem.renameDelegate.setter()
{
  return MEMORY[0x1F4166548]();
}

uint64_t UIViewController.traitOverrides.getter()
{
  return MEMORY[0x1F4166570]();
}

uint64_t UIViewController.traitOverrides.setter()
{
  return MEMORY[0x1F4166578]();
}

uint64_t UIViewController.registerForTraitChanges<A>(_:handler:)()
{
  return MEMORY[0x1F4166598]();
}

uint64_t static CGAffineTransform.== infix(_:_:)()
{
  return MEMORY[0x1F40D9720]();
}

uint64_t CGAffineTransform.init(rotation:)()
{
  return MEMORY[0x1F41019B0]();
}

uint64_t CGAffineTransform.init(_:)()
{
  return MEMORY[0x1F41019B8]();
}

uint64_t OS_dispatch_group.notify(qos:flags:queue:execute:)()
{
  return MEMORY[0x1F4186FB0]();
}

uint64_t OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)()
{
  return MEMORY[0x1F4186FF0]();
}

uint64_t static OS_dispatch_queue.main.getter()
{
  return MEMORY[0x1F41870B8]();
}

uint64_t OS_dispatch_queue.async(group:qos:flags:execute:)()
{
  return MEMORY[0x1F41870E0]();
}

uint64_t UITraitCollection._modifyingTraits(environmentWrapper:mutations:)()
{
  return MEMORY[0x1F41665D0]();
}

uint64_t UITraitCollection.typesettingLanguage.getter()
{
  return MEMORY[0x1F41665D8]();
}

uint64_t NSAttributedString.init(_:)()
{
  return MEMORY[0x1F40E6740]();
}

NSAttributedString __swiftcall NSAttributedString.replacingLineBreakModes(_:)(NSLineBreakMode a1)
{
  return (NSAttributedString)MEMORY[0x1F41019C0](a1);
}

uint64_t NSAttributedString.range.getter()
{
  return MEMORY[0x1F41019C8]();
}

uint64_t NSAttributedString.scaled(by:)()
{
  return MEMORY[0x1F41019D0]();
}

uint64_t UIFocusEnvironment.contains(_:)()
{
  return MEMORY[0x1F4166630]();
}

uint64_t static os_signpost_type_t.end.getter()
{
  return MEMORY[0x1F4188708]();
}

uint64_t static os_signpost_type_t.begin.getter()
{
  return MEMORY[0x1F4188710]();
}

uint64_t static AGNamedTraceEventID.childGeometries.getter()
{
  return MEMORY[0x1F41019D8]();
}

uint64_t type metadata accessor for NSNotificationCenter.Publisher()
{
  return MEMORY[0x1F40E6798]();
}

uint64_t NSNotificationCenter.publisher(for:object:)()
{
  return MEMORY[0x1F40E67A0]();
}

uint64_t static UIBarButtonItemGroup.fixedGroup(representativeItem:items:)()
{
  return MEMORY[0x1F4166638]();
}

uint64_t static UIBarButtonItemGroup.movableGroup(customizationIdentifier:representativeItem:items:)()
{
  return MEMORY[0x1F4166640]();
}

uint64_t static UIBarButtonItemGroup.optionalGroup(customizationIdentifier:isInDefaultCustomization:representativeItem:items:)()
{
  return MEMORY[0x1F4166648]();
}

uint64_t UICollectionViewCell.contentConfiguration.setter()
{
  return MEMORY[0x1F4166658]();
}

uint64_t UICollectionViewCell.backgroundConfiguration.getter()
{
  return MEMORY[0x1F4166660]();
}

uint64_t UICollectionViewCell.backgroundConfiguration.setter()
{
  return MEMORY[0x1F4166668]();
}

uint64_t UICollectionViewCell.defaultBackgroundConfiguration()()
{
  return MEMORY[0x1F4166680]();
}

uint64_t static AccessibilitySettings.animatedImagesEnabled.getter()
{
  return MEMORY[0x1F40D3178]();
}

uint64_t static AccessibilitySettings.animatedImagesEnabledDidChangeNotification.getter()
{
  return MEMORY[0x1F40D3180]();
}

uint64_t static NSAttributedStringKey._textScale.getter()
{
  return MEMORY[0x1F41019E0]();
}

uint64_t static NSAttributedStringKey.coreAXLink.getter()
{
  return MEMORY[0x1F41019E8]();
}

uint64_t static NSAttributedStringKey.coreAXLabel.getter()
{
  return MEMORY[0x1F41019F0]();
}

uint64_t static NSAttributedStringKey.coreAXFontName.getter()
{
  return MEMORY[0x1F41019F8]();
}

uint64_t static NSAttributedStringKey.coreAXFontSize.getter()
{
  return MEMORY[0x1F4101A00]();
}

uint64_t static NSAttributedStringKey.coreAXAlignment.getter()
{
  return MEMORY[0x1F4101A08]();
}

uint64_t static NSAttributedStringKey.coreAXUnderline.getter()
{
  return MEMORY[0x1F4101A10]();
}

uint64_t static NSAttributedStringKey.coreAXAttachment.getter()
{
  return MEMORY[0x1F4101A18]();
}

uint64_t static NSAttributedStringKey.coreAXFontFamily.getter()
{
  return MEMORY[0x1F4101A20]();
}

uint64_t static NSAttributedStringKey.coreAXSpeechPitch.getter()
{
  return MEMORY[0x1F4101A28]();
}

uint64_t static NSAttributedStringKey.coreAXStrikethrough.getter()
{
  return MEMORY[0x1F4101A30]();
}

uint64_t static NSAttributedStringKey.coreAXSpeechLanguage.getter()
{
  return MEMORY[0x1F4101A38]();
}

uint64_t static NSAttributedStringKey.coreAXSpeechSpellOut.getter()
{
  return MEMORY[0x1F4101A40]();
}

uint64_t static NSAttributedStringKey.coreAXTextualContext.getter()
{
  return MEMORY[0x1F4101A48]();
}

uint64_t static NSAttributedStringKey.coreAXForegroundColor.getter()
{
  return MEMORY[0x1F4101A50]();
}

uint64_t static NSAttributedStringKey.resolvableTextSegment.getter()
{
  return MEMORY[0x1F4101A58]();
}

uint64_t static NSAttributedStringKey.coreAXDurationTimeMMSS.getter()
{
  return MEMORY[0x1F4101A60]();
}

uint64_t static NSAttributedStringKey.coreAXTextHeadingLevel.getter()
{
  return MEMORY[0x1F4101A68]();
}

uint64_t static NSAttributedStringKey.coreAXSpeechPunctuation.getter()
{
  return MEMORY[0x1F4101A70]();
}

uint64_t static NSAttributedStringKey.coreAXSpeechAnnouncementPriority.getter()
{
  return MEMORY[0x1F4101A78]();
}

uint64_t UIContentSizeCategory.isAccessibilityCategory.getter()
{
  return MEMORY[0x1F4166688]();
}

uint64_t UIEditMenuConfiguration.init(identifier:sourcePoint:)()
{
  return MEMORY[0x1F41666B0]();
}

uint64_t UICollectionViewListCell.accessories.setter()
{
  return MEMORY[0x1F41666C0]();
}

uint64_t UICollectionViewListCell.defaultContentConfiguration()()
{
  return MEMORY[0x1F41666C8]();
}

uint64_t UIPresentationController.traitOverrides.getter()
{
  return MEMORY[0x1F41666E0]();
}

uint64_t UIPresentationController.traitOverrides.setter()
{
  return MEMORY[0x1F41666E8]();
}

uint64_t UISceneConnectionOptions.subscript.getter()
{
  return MEMORY[0x1F41666F0]();
}

uint64_t static NSCollectionLayoutSection.list(using:layoutEnvironment:)()
{
  return MEMORY[0x1F41666F8]();
}

uint64_t NSMutableAttributedString.addUniformAttribute(_:value:)()
{
  return MEMORY[0x1F4101A80]();
}

uint64_t static UIViewControllerTransition.zoom(options:sourceViewProvider:)()
{
  return MEMORY[0x1F4166700]();
}

uint64_t _UITabBarControllerSidebar._footerContentConfiguration.setter()
{
  return MEMORY[0x1F4166708]();
}

uint64_t _UITabBarControllerSidebar._headerContentConfiguration.setter()
{
  return MEMORY[0x1F4166710]();
}

uint64_t UIPasteControlConfiguration.cornerStyle.getter()
{
  return MEMORY[0x1F4166718]();
}

uint64_t UIPasteControlConfiguration.cornerStyle.setter()
{
  return MEMORY[0x1F4166720]();
}

uint64_t UISheetPresentationController.preferredCornerRadius.setter()
{
  return MEMORY[0x1F4166728]();
}

uint64_t static UISheetPresentationControllerDetent.custom(identifier:resolver:)()
{
  return MEMORY[0x1F4166740]();
}

UIWindowSceneActivationConfiguration __swiftcall UIWindowSceneActivationConfiguration.init(userActivity:options:preview:)(NSUserActivity userActivity, UIWindowSceneActivationRequestOptions_optional options, UITargetedPreview_optional preview)
{
  return (UIWindowSceneActivationConfiguration)MEMORY[0x1F4166748](userActivity.super.isa, options.value.super.super.isa, *(void *)&options.is_nil, preview.value.super.isa, *(void *)&preview.is_nil);
}

uint64_t UIDocumentViewControllerLaunchOptions.background.setter()
{
  return MEMORY[0x1F4166750]();
}

uint64_t UIWindowSceneActivationRequestOptions.placement.setter()
{
  return MEMORY[0x1F4166758]();
}

void __swiftcall UIPopoverPresentationControllerSourceItem.frame(in:)(__C::CGRect_optional *__return_ptr retstr, UIView *in)
{
}

uint64_t CGRect.convertAndClipToScrollView(to:transform:)()
{
  return MEMORY[0x1F4101A88]();
}

uint64_t CGRect.roundCoordinatesToNearestOrUp(toMultipleOf:)()
{
  return MEMORY[0x1F4101A90]();
}

uint64_t CGRect.inset(by:layoutDirection:)()
{
  return MEMORY[0x1F4101A98]();
}

uint64_t CGRect.inset(by:)()
{
  return MEMORY[0x1F4101AA0]();
}

uint64_t CGRect.outset(by:)()
{
  return MEMORY[0x1F4101AA8]();
}

__C::CGRect __swiftcall CGRect.outset(bySize:)(CGSize bySize)
{
  MEMORY[0x1F4101AB0]((__n128)__PAIR128__(v1, *(unint64_t *)&bySize.width), (__n128)__PAIR128__(v2, *(unint64_t *)&bySize.height));
  result.size.double height = v6;
  result.size.double width = v5;
  result.origin.CGFloat y = v4;
  result.origin.CGFloat x = v3;
  return result;
}

uint64_t CGRect.convert(to:transform:)()
{
  return MEMORY[0x1F4101AB8]();
}

uint64_t CGRect.convert(from:transform:)()
{
  return MEMORY[0x1F4101AC0]();
}

uint64_t CGRect.loggable.getter()
{
  return MEMORY[0x1F4101AD8]();
}

uint64_t CGRect.init(_:)()
{
  return MEMORY[0x1F4101AE0]();
}

uint64_t CGRect.subscript.getter()
{
  return MEMORY[0x1F4101AE8]();
}

uint64_t static CGSize.deviceSize.getter()
{
  return MEMORY[0x1F4101AF0]();
}

CGSize __swiftcall CGSize.normalized()()
{
  MEMORY[0x1F4101AF8]();
  result.double height = v1;
  result.double width = v0;
  return result;
}

uint64_t static CGSize.invalidValue.getter()
{
  return MEMORY[0x1F4101B00]();
}

uint64_t CGSize.inset(by:)()
{
  return MEMORY[0x1F4101B08]();
}

uint64_t CGSize.outset(by:)()
{
  return MEMORY[0x1F4101B10]();
}

uint64_t CGSize.clamped(to:)()
{
  return MEMORY[0x1F4101B18]();
}

uint64_t CGSize.unapply(_:)()
{
  return MEMORY[0x1F4101B20]();
}

uint64_t CGSize.magnitude.getter()
{
  return MEMORY[0x1F4101B28]();
}

uint64_t CGSize.init(_:)()
{
  return MEMORY[0x1F4101B30]();
}

void __swiftcall UIMenu.init(title:subtitle:image:identifier:options:preferredElementSize:children:)(UIMenu *__return_ptr retstr, Swift::String title, Swift::String_optional subtitle, UIImage_optional image, UIMenuIdentifier_optional identifier, UIMenuOptions options, UIMenuElementSize preferredElementSize, Swift::OpaquePointer children)
{
}

uint64_t UIView.registerForTraitChanges(_:action:)()
{
  return MEMORY[0x1F41667D8]();
}

uint64_t static UIView.animate<A>(bridgedAnimation:animations:completion:)()
{
  return MEMORY[0x1F41667F8]();
}

uint64_t protocol witness for ViewTransformable.convert(to:transform:) in conformance CGPoint()
{
  return MEMORY[0x1F4101B38]();
}

uint64_t protocol witness for ViewTransformable.convert(from:transform:) in conformance CGPoint()
{
  return MEMORY[0x1F4101B40]();
}

CGPoint __swiftcall CGPoint.clamp(min:max:)(CGPoint min, CGPoint max)
{
  MEMORY[0x1F4101B48]((__n128)__PAIR128__(v2, *(unint64_t *)&min.x), (__n128)__PAIR128__(v3, *(unint64_t *)&min.y), (__n128)__PAIR128__(v4, *(unint64_t *)&max.x), (__n128)__PAIR128__(v5, *(unint64_t *)&max.y));
  result.CGFloat y = v7;
  result.CGFloat x = v6;
  return result;
}

uint64_t CGPoint.offset(by:)()
{
  return MEMORY[0x1F4101B50]();
}

UIImage_optional __swiftcall UIImage.init(systemName:variableValue:configuration:)(Swift::String systemName, Swift::Double variableValue, UIImageConfiguration_optional configuration)
{
  unint64_t v3 = (objc_class *)MEMORY[0x1F4166810](systemName._countAndFlagsBits, systemName._object, configuration.value.super.isa, *(void *)&configuration.is_nil, variableValue);
  result.value.super.Class isa = v3;
  result.is_nil = v4;
  return result;
}

uint64_t UIImage.baselineOffsetFromBottom.getter()
{
  return MEMORY[0x1F4166818]();
}

UIImage_optional __swiftcall UIImage.init(named:in:variableValue:configuration:)(Swift::String named, NSBundle_optional in, Swift::Double variableValue, UIImageConfiguration_optional configuration)
{
  Swift::Bool v4 = (objc_class *)MEMORY[0x1F4166828](named._countAndFlagsBits, named._object, in.value.super.isa, *(void *)&in.is_nil, configuration.value.super.isa, *(void *)&configuration.is_nil, variableValue);
  result.value.super.Class isa = v4;
  result.is_nil = v5;
  return result;
}

uint64_t AGTypeID.description.getter()
{
  return MEMORY[0x1F410B088]();
}

uint64_t AGTypeID.isValueType.getter()
{
  return MEMORY[0x1F4101B58]();
}

uint64_t type metadata accessor for NSObject.KeyValueObservingPublisher()
{
  return MEMORY[0x1F40E6918]();
}

Swift::Int __swiftcall NSObject._rawHashValue(seed:)(Swift::Int seed)
{
  return MEMORY[0x1F41874A8](seed);
}

uint64_t static NSObject.== infix(_:_:)()
{
  return MEMORY[0x1F41874C0]();
}

uint64_t NSObject.hash(into:)()
{
  return MEMORY[0x1F41874D0]();
}

uint64_t NSObject.hashValue.getter()
{
  return MEMORY[0x1F41874E0]();
}

uint64_t UIAction.init(title:subtitle:image:selectedImage:identifier:discoverabilityTitle:attributes:state:handler:)()
{
  return MEMORY[0x1F4166838]();
}

uint64_t static UIButton.Configuration.borderless()()
{
  return MEMORY[0x1F4166878]();
}

uint64_t type metadata accessor for UIButton.Configuration.CornerStyle()
{
  return MEMORY[0x1F41668A0]();
}

uint64_t UIButton.Configuration.contentInsets.modify()
{
  return MEMORY[0x1F41668D0]();
}

uint64_t static UIButton.Configuration.borderedProminent()()
{
  return MEMORY[0x1F4166928]();
}

uint64_t UIButton.Configuration.titleLineBreakMode.setter()
{
  return MEMORY[0x1F4166930]();
}

uint64_t static UIButton.Configuration.== infix(_:_:)()
{
  return MEMORY[0x1F4166980]();
}

uint64_t UIButton.Configuration.image.setter()
{
  return MEMORY[0x1F41669C0]();
}

uint64_t static UIButton.Configuration.plain()()
{
  return MEMORY[0x1F41669C8]();
}

uint64_t UIButton.Configuration.title.setter()
{
  return MEMORY[0x1F41669D8]();
}

uint64_t static UIButton.Configuration.bordered()()
{
  return MEMORY[0x1F4166A00]();
}

uint64_t type metadata accessor for UIButton.Configuration.Indicator()
{
  return MEMORY[0x1F4166A10]();
}

uint64_t UIButton.Configuration.indicator.setter()
{
  return MEMORY[0x1F4166A18]();
}

uint64_t type metadata accessor for UIButton.Configuration()
{
  return MEMORY[0x1F4166A28]();
}

uint64_t UIButton.init(configuration:primaryAction:)()
{
  return MEMORY[0x1F4166A38]();
}

uint64_t UIButton.configuration.getter()
{
  return MEMORY[0x1F4166A48]();
}

uint64_t UIButton.configuration.setter()
{
  return MEMORY[0x1F4166A50]();
}

uint64_t UIButton.pointerStyleProvider.setter()
{
  return MEMORY[0x1F4166A60]();
}

NSValue __swiftcall _NSRange._bridgeToObjectiveC()()
{
  return (NSValue)MEMORY[0x1F40E6960]();
}

uint64_t _NSRange.init<A, B>(_:in:)()
{
  return MEMORY[0x1F40E6970]();
}

{
  return MEMORY[0x1F40E6978]();
}

uint64_t CTFontRef.bodyLeading.getter()
{
  return MEMORY[0x1F4101B60]();
}

uint64_t static CTFontRef.limitedHeight(by:lineHeight:leading:)()
{
  return MEMORY[0x1F4101B68]();
}

uint64_t CTFontRef.pointSize.getter()
{
  return MEMORY[0x1F4101B70]();
}

void __swiftcall NSDecimal.init(_:)(NSDecimal *__return_ptr retstr, Swift::Double a2)
{
}

uint64_t type metadata accessor for NSRunLoop.SchedulerOptions()
{
  return MEMORY[0x1F40E6A98]();
}

uint64_t type metadata accessor for NSRunLoop.SchedulerTimeType.Stride()
{
  return MEMORY[0x1F40E6AF0]();
}

uint64_t NSRunLoop.SchedulerTimeType.Stride.init(_:)()
{
  return MEMORY[0x1F40E6AF8]();
}

uint64_t type metadata accessor for NSRunLoop.SchedulerTimeType()
{
  return MEMORY[0x1F40E6B00]();
}

uint64_t NSRunLoop.SchedulerTimeType.init(_:)()
{
  return MEMORY[0x1F40E6B08]();
}

uint64_t NSRunLoop.schedule(after:tolerance:options:_:)()
{
  return MEMORY[0x1F40E6B10]();
}

uint64_t static NSRunLoop.addObserver(_:)()
{
  return MEMORY[0x1F4101B78]();
}

uint64_t static NSRunLoop.flushObservers()()
{
  return MEMORY[0x1F4101B80]();
}

uint64_t OS_os_log.signpostsEnabled.getter()
{
  return MEMORY[0x1F4188720]();
}

uint64_t static OS_os_log.default.getter()
{
  return MEMORY[0x1F4188728]();
}

uint64_t UICommand.init(title:subtitle:image:selectedImage:action:propertyList:alternates:discoverabilityTitle:attributes:state:)()
{
  return MEMORY[0x1F4166A70]();
}

uint64_t type metadata accessor for UnsafeMutablePointer()
{
  return MEMORY[0x1F4184620]();
}

uint64_t static Optional<A>._viewListCount(inputs:)()
{
  return MEMORY[0x1F4101B88]();
}

uint64_t type metadata accessor for Optional()
{
  return MEMORY[0x1F4184640]();
}

uint64_t Optional<A>.hash(into:)()
{
  return MEMORY[0x1F4184650]();
}

Swift::String __swiftcall Substring.lowercased()()
{
  uint64_t v0 = MEMORY[0x1F41846D8]();
  result._object = v1;
  result._uint64_t countAndFlagsBits = v0;
  return result;
}

uint64_t Substring.index(after:)()
{
  return MEMORY[0x1F4184720]();
}

uint64_t Substring.subscript.getter()
{
  return MEMORY[0x1F4184780]();
}

{
  return MEMORY[0x1F4184790]();
}

uint64_t Substring.init<A>(_:)()
{
  return MEMORY[0x1F4184798]();
}

uint64_t dispatch thunk of IteratorProtocol.next()()
{
  return MEMORY[0x1F41847A0]();
}

NSNumber __swiftcall UInt._bridgeToObjectiveC()()
{
  return (NSNumber)MEMORY[0x1F40E6B80]();
}

uint64_t UnsafeMutableRawBufferPointer.copyMemory(from:)()
{
  return MEMORY[0x1F41847C0]();
}

uint64_t UnsafeMutableRawBufferPointer.subscript.setter()
{
  return MEMORY[0x1F4184820]();
}

uint64_t dispatch thunk of Strideable.advanced(by:)()
{
  return MEMORY[0x1F4184830]();
}

uint64_t dispatch thunk of Strideable.distance(to:)()
{
  return MEMORY[0x1F4184838]();
}

uint64_t StringProtocol.capitalized.getter()
{
  return MEMORY[0x1F40E6BF0]();
}

uint64_t StringProtocol.rangeOfCharacter(from:options:range:)()
{
  return MEMORY[0x1F40E6C30]();
}

uint64_t StringProtocol.trimmingCharacters(in:)()
{
  return MEMORY[0x1F40E6C68]();
}

uint64_t StringProtocol.contains<A>(_:)()
{
  return MEMORY[0x1F40E6D88]();
}

uint64_t BinaryInteger.formatted<A>(_:)()
{
  return MEMORY[0x1F40E6D98]();
}

uint64_t dispatch thunk of BinaryInteger.init<A>(_:)()
{
  return MEMORY[0x1F4184970]();
}

uint64_t _bridgeAnyObjectToAny(_:)()
{
  return MEMORY[0x1F4184978]();
}

uint64_t dispatch thunk of AnyKeyPath._kvcKeyPathString.getter()
{
  return MEMORY[0x1F4184988]();
}

uint64_t dispatch thunk of AnyKeyPath._storedInlineOffset.getter()
{
  return MEMORY[0x1F41849A0]();
}

uint64_t static AnyKeyPath.== infix(_:_:)()
{
  return MEMORY[0x1F41849A8]();
}

uint64_t type metadata accessor for AnyKeyPath()
{
  return MEMORY[0x1F41849B0]();
}

uint64_t type metadata accessor for ArraySlice()
{
  return MEMORY[0x1F4184A40]();
}

uint64_t dispatch thunk of SetAlgebra.isSuperset(of:)()
{
  return MEMORY[0x1F4184A78]();
}

uint64_t dispatch thunk of SetAlgebra.intersection(_:)()
{
  return MEMORY[0x1F4184A80]();
}

uint64_t dispatch thunk of SetAlgebra.insert(_:)()
{
  return MEMORY[0x1F4184AA0]();
}

uint64_t dispatch thunk of SetAlgebra.isEmpty.getter()
{
  return MEMORY[0x1F4184AB0]();
}

uint64_t dispatch thunk of SetAlgebra.subtract(_:)()
{
  return MEMORY[0x1F4184AC0]();
}

uint64_t SetAlgebra<>.init(arrayLiteral:)()
{
  return MEMORY[0x1F4184AD0]();
}

uint64_t dispatch thunk of SetAlgebra.init()()
{
  return MEMORY[0x1F4184B10]();
}

uint64_t dispatch thunk of SetAlgebra.init<A>(_:)()
{
  return MEMORY[0x1F4184B18]();
}

uint64_t _HashTable.previousHole(before:)()
{
  return MEMORY[0x1F4184B20]();
}

uint64_t _HashTable.occupiedBucket(after:)()
{
  return MEMORY[0x1F4184B28]();
}

uint64_t _HashTable.nextHole(atOrAfter:)()
{
  return MEMORY[0x1F4184B30]();
}

uint64_t __CocoaSet.startIndex.getter()
{
  return MEMORY[0x1F4184B58]();
}

uint64_t __CocoaSet.makeIterator()()
{
  return MEMORY[0x1F4184B60]();
}

uint64_t __CocoaSet.Index.handleBitPattern.getter()
{
  return MEMORY[0x1F4184B68]();
}

uint64_t static __CocoaSet.Index.== infix(_:_:)()
{
  return MEMORY[0x1F4184B78]();
}

uint64_t __CocoaSet.Index.age.getter()
{
  return MEMORY[0x1F4184B80]();
}

uint64_t __CocoaSet.Index.element.getter()
{
  return MEMORY[0x1F4184B88]();
}

uint64_t __CocoaSet.count.getter()
{
  return MEMORY[0x1F4184B90]();
}

uint64_t __CocoaSet.member(for:)()
{
  return MEMORY[0x1F4184BA8]();
}

uint64_t __CocoaSet.element(at:)()
{
  return MEMORY[0x1F4184BB0]();
}

uint64_t __CocoaSet.Iterator.next()()
{
  return MEMORY[0x1F4184BC0]();
}

uint64_t __CocoaSet.contains(_:)()
{
  return MEMORY[0x1F4184BC8]();
}

uint64_t __CocoaSet.endIndex.getter()
{
  return MEMORY[0x1F4184BD0]();
}

uint64_t __CocoaSet.formIndex(after:isUnique:)()
{
  return MEMORY[0x1F4184BD8]();
}

uint64_t _setUpCast<A, B>(_:)()
{
  return MEMORY[0x1F4184BF0]();
}

NSObject __swiftcall AnyHashable._bridgeToObjectiveC()()
{
  return (NSObject)MEMORY[0x1F40E6DB8]();
}

uint64_t AnyHashable.description.getter()
{
  return MEMORY[0x1F4184C10]();
}

Swift::Int __swiftcall AnyHashable._rawHashValue(seed:)(Swift::Int seed)
{
  return MEMORY[0x1F4184C18](seed);
}

uint64_t static AnyHashable.== infix(_:_:)()
{
  return MEMORY[0x1F4184C20]();
}

uint64_t AnyHashable.base.getter()
{
  return MEMORY[0x1F4184C28]();
}

uint64_t AnyHashable.hash(into:)()
{
  return MEMORY[0x1F4184C30]();
}

uint64_t AnyHashable.init<A>(_:)()
{
  return MEMORY[0x1F4184C38]();
}

uint64_t static CommandLine.unsafeArgv.getter()
{
  return MEMORY[0x1F4184C78]();
}

uint64_t static CommandLine.argc.getter()
{
  return MEMORY[0x1F4184C80]();
}

uint64_t static CommandLine.arguments.getter()
{
  return MEMORY[0x1F4184C88]();
}

uint64_t static _SetStorage.copy(original:)()
{
  return MEMORY[0x1F4184C90]();
}

uint64_t static _SetStorage.resize(original:capacity:move:)()
{
  return MEMORY[0x1F4184C98]();
}

uint64_t static _SetStorage.convert(_:capacity:)()
{
  return MEMORY[0x1F4184CA0]();
}

uint64_t static _SetStorage.allocate(capacity:)()
{
  return MEMORY[0x1F4184CA8]();
}

uint64_t type metadata accessor for _SetStorage()
{
  return MEMORY[0x1F4184CB0]();
}

uint64_t _StringGuts._slowWithCString<A>(_:)()
{
  return MEMORY[0x1F4184CC0]();
}

uint64_t _StringGuts.foreignErrorCorrectedScalar(startingAt:)()
{
  return MEMORY[0x1F4184CE0]();
}

Swift::Void __swiftcall _StringGuts.grow(_:)(Swift::Int a1)
{
}

uint64_t _StringGuts.copyUTF8(into:)()
{
  return MEMORY[0x1F4184CF0]();
}

uint64_t dispatch thunk of Identifiable.id.getter()
{
  return MEMORY[0x1F4184D08]();
}

uint64_t type metadata accessor for LazySequence()
{
  return MEMORY[0x1F4184D18]();
}

uint64_t StaticString.description.getter()
{
  return MEMORY[0x1F4184D20]();
}

uint64_t Zip2Sequence.makeIterator()()
{
  return MEMORY[0x1F4184D28]();
}

uint64_t Zip2Sequence.Iterator.next()()
{
  return MEMORY[0x1F4184D30]();
}

uint64_t type metadata accessor for Zip2Sequence.Iterator()
{
  return MEMORY[0x1F4184D38]();
}

uint64_t type metadata accessor for Zip2Sequence()
{
  return MEMORY[0x1F4184D40]();
}

Swift::Void __swiftcall _ArrayBuffer._typeCheckSlowPath(_:)(Swift::Int a1)
{
}

uint64_t _ArrayBuffer._getElementSlowPath(_:)()
{
  return MEMORY[0x1F4184D78]();
}

uint64_t specialized _ArrayBuffer._getElementSlowPath(_:)()
{
  return MEMORY[0x1F4184D80]();
}

uint64_t specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)()
{
  return MEMORY[0x1F4184D88]();
}

uint64_t type metadata accessor for _IteratorBox()
{
  return MEMORY[0x1F4184DA0]();
}

uint64_t type metadata accessor for _SequenceBox()
{
  return MEMORY[0x1F4184DA8]();
}

uint64_t DecodingError.Context.init(codingPath:debugDescription:underlyingError:)()
{
  return MEMORY[0x1F4184DD0]();
}

uint64_t type metadata accessor for DecodingError.Context()
{
  return MEMORY[0x1F4184DE8]();
}

uint64_t type metadata accessor for DecodingError()
{
  return MEMORY[0x1F4184DF0]();
}

uint64_t EncodingError.Context.init(codingPath:debugDescription:underlyingError:)()
{
  return MEMORY[0x1F4184DF8]();
}

uint64_t type metadata accessor for EncodingError.Context()
{
  return MEMORY[0x1F4184E10]();
}

uint64_t type metadata accessor for EncodingError()
{
  return MEMORY[0x1F4184E18]();
}

uint64_t dispatch thunk of static SignedNumeric.- prefix(_:)()
{
  return MEMORY[0x1F4184E50]();
}

uint64_t _StringObject.sharedUTF8.getter()
{
  return MEMORY[0x1F4184E68]();
}

uint64_t _decodeScalar(_:startingAt:)()
{
  return MEMORY[0x1F4184E70]();
}

uint64_t type metadata accessor for PartialKeyPath()
{
  return MEMORY[0x1F4184E88]();
}

uint64_t type metadata accessor for UnfoldSequence()
{
  return MEMORY[0x1F4184E98]();
}

uint64_t _AppendKeyPath.appending<A, B, C>(path:)()
{
  return MEMORY[0x1F4184EA0]();
}

uint64_t type metadata accessor for CollectionOfOne()
{
  return MEMORY[0x1F4184EB8]();
}

uint64_t CollectionOfOne.init(_:)()
{
  return MEMORY[0x1F4184EC0]();
}

uint64_t specialized ContiguousArray._endMutation()()
{
  return MEMORY[0x1F4184ED8]();
}

Swift::Void __swiftcall ContiguousArray.reserveCapacity(_:)(Swift::Int a1)
{
}

uint64_t specialized ContiguousArray.reserveCapacity(_:)()
{
  return MEMORY[0x1F4184EF0]();
}

uint64_t specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)()
{
  return MEMORY[0x1F4184F28]();
}

uint64_t specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)()
{
  return MEMORY[0x1F4184F30]();
}

uint64_t ContiguousArray.append(_:)()
{
  return MEMORY[0x1F4184F48]();
}

uint64_t ContiguousArray.init()()
{
  return MEMORY[0x1F4184F68]();
}

uint64_t type metadata accessor for ContiguousArray()
{
  return MEMORY[0x1F4184F70]();
}

uint64_t type metadata accessor for LazyMapSequence()
{
  return MEMORY[0x1F4184FC0]();
}

uint64_t LazyMapSequence<>.index(before:)()
{
  return MEMORY[0x1F4184FC8]();
}

uint64_t type metadata accessor for WritableKeyPath()
{
  return MEMORY[0x1F4184FF0]();
}

uint64_t dispatch thunk of _AnySequenceBox._makeIterator()()
{
  return MEMORY[0x1F4184FF8]();
}

uint64_t _arrayForceCast<A, B>(_:)()
{
  return MEMORY[0x1F4185048]();
}

uint64_t _print_unlocked<A, B>(_:_:)()
{
  return MEMORY[0x1F4185050]();
}

uint64_t AsyncMapSequence.makeAsyncIterator()()
{
  return MEMORY[0x1F4187FC0]();
}

uint64_t type metadata accessor for AsyncMapSequence()
{
  return MEMORY[0x1F4187FF8]();
}

uint64_t type metadata accessor for IndexingIterator()
{
  return MEMORY[0x1F4185068]();
}

uint64_t type metadata accessor for PartialRangeFrom()
{
  return MEMORY[0x1F4185070]();
}

uint64_t CodingUserInfoKey.init(rawValue:)()
{
  return MEMORY[0x1F41850B0]();
}

uint64_t type metadata accessor for CodingUserInfoKey()
{
  return MEMORY[0x1F41850C0]();
}

uint64_t type metadata accessor for DropFirstSequence()
{
  return MEMORY[0x1F41850D0]();
}

Swift::Void __swiftcall _NativeDictionary.removeAll(isUnique:)(Swift::Bool isUnique)
{
}

uint64_t type metadata accessor for _NativeDictionary()
{
  return MEMORY[0x1F41851E0]();
}

uint64_t __CocoaDictionary.makeIterator()()
{
  return MEMORY[0x1F41851F8]();
}

uint64_t __CocoaDictionary.Iterator.next()()
{
  return MEMORY[0x1F4185270]();
}

uint64_t _assertionFailure(_:_:file:line:flags:)()
{
  return MEMORY[0x1F4185298]();
}

{
  return MEMORY[0x1F41852A0]();
}

uint64_t _bridgeCocoaArray<A>(_:)()
{
  return MEMORY[0x1F41852B0]();
}

uint64_t dispatch thunk of static AdditiveArithmetic.+ infix(_:_:)()
{
  return MEMORY[0x1F41852C0]();
}

uint64_t dispatch thunk of static AdditiveArithmetic.- infix(_:_:)()
{
  return MEMORY[0x1F41852C8]();
}

uint64_t dispatch thunk of static AdditiveArithmetic.+= infix(_:_:)()
{
  return MEMORY[0x1F41852D0]();
}

uint64_t dispatch thunk of static AdditiveArithmetic.-= infix(_:_:)()
{
  return MEMORY[0x1F41852D8]();
}

uint64_t dispatch thunk of static AdditiveArithmetic.zero.getter()
{
  return MEMORY[0x1F41852E0]();
}

uint64_t EnumeratedSequence.makeIterator()()
{
  return MEMORY[0x1F41852E8]();
}

uint64_t EnumeratedSequence.Iterator.next()()
{
  return MEMORY[0x1F41852F0]();
}

uint64_t type metadata accessor for EnumeratedSequence.Iterator()
{
  return MEMORY[0x1F41852F8]();
}

uint64_t type metadata accessor for EnumeratedSequence()
{
  return MEMORY[0x1F4185300]();
}

uint64_t type metadata accessor for LazyFilterSequence()
{
  return MEMORY[0x1F4185320]();
}

uint64_t type metadata accessor for ReversedCollection.Iterator()
{
  return MEMORY[0x1F4185338]();
}

uint64_t type metadata accessor for ReversedCollection()
{
  return MEMORY[0x1F4185340]();
}

uint64_t _CocoaArrayWrapper.endIndex.getter()
{
  return MEMORY[0x1F4185350]();
}

uint64_t _CocoaArrayWrapper.subscript.getter()
{
  return MEMORY[0x1F4185358]();
}

uint64_t static _DictionaryStorage.copy(original:)()
{
  return MEMORY[0x1F4185368]();
}

uint64_t static _DictionaryStorage.resize(original:capacity:move:)()
{
  return MEMORY[0x1F4185370]();
}

uint64_t static _DictionaryStorage.allocate(capacity:)()
{
  return MEMORY[0x1F4185380]();
}

uint64_t type metadata accessor for _DictionaryStorage()
{
  return MEMORY[0x1F4185388]();
}

uint64_t _fatalErrorMessage(_:_:file:line:flags:)()
{
  return MEMORY[0x1F4185398]();
}

uint64_t dispatch thunk of _AnyIteratorBoxBase.next()()
{
  return MEMORY[0x1F41853A8]();
}

uint64_t CollectionDifference.insertions.getter()
{
  return MEMORY[0x1F41853C0]();
}

uint64_t type metadata accessor for CollectionDifference.Change()
{
  return MEMORY[0x1F41853D0]();
}

uint64_t CollectionDifference.removals.getter()
{
  return MEMORY[0x1F41853D8]();
}

uint64_t type metadata accessor for CollectionDifference()
{
  return MEMORY[0x1F41853E0]();
}

uint64_t LazySequenceProtocol.map<A>(_:)()
{
  return MEMORY[0x1F4185410]();
}

uint64_t _SwiftNewtypeWrapper<>._toCustomAnyHashable()()
{
  return MEMORY[0x1F4185450]();
}

uint64_t _convertToAnyHashable<A>(_:)()
{
  return MEMORY[0x1F41854C0]();
}

Swift::Int __swiftcall _findStringSwitchCase(cases:string:)(Swift::OpaquePointer cases, Swift::String string)
{
  return MEMORY[0x1F41854C8](cases._rawValue, string._countAndFlagsBits, string._object);
}

uint64_t KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)()
{
  return MEMORY[0x1F41854D8]();
}

uint64_t KeyedDecodingContainer.codingPath.getter()
{
  return MEMORY[0x1F41854E0]();
}

uint64_t KeyedDecodingContainer.decodeIfPresent(_:forKey:)()
{
  return MEMORY[0x1F41854F8]();
}

{
  return MEMORY[0x1F4185508]();
}

{
  return MEMORY[0x1F4185510]();
}

uint64_t KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)()
{
  return MEMORY[0x1F4185528]();
}

uint64_t KeyedDecodingContainer.decode(_:forKey:)()
{
  return MEMORY[0x1F4185568]();
}

{
  return MEMORY[0x1F4185570]();
}

{
  return MEMORY[0x1F4185578]();
}

{
  return MEMORY[0x1F4185588]();
}

uint64_t KeyedDecodingContainer.decode<A>(_:forKey:)()
{
  return MEMORY[0x1F4185598]();
}

uint64_t KeyedDecodingContainer.allKeys.getter()
{
  return MEMORY[0x1F41855E0]();
}

uint64_t type metadata accessor for KeyedDecodingContainer()
{
  return MEMORY[0x1F41855F0]();
}

uint64_t KeyedDecodingContainer.init<A>(_:)()
{
  return MEMORY[0x1F41855F8]();
}

uint64_t KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)()
{
  return MEMORY[0x1F4185608]();
}

uint64_t KeyedEncodingContainer.encodeIfPresent(_:forKey:)()
{
  return MEMORY[0x1F4185628]();
}

{
  return MEMORY[0x1F4185638]();
}

{
  return MEMORY[0x1F4185640]();
}

uint64_t KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)()
{
  return MEMORY[0x1F4185658]();
}

uint64_t KeyedEncodingContainer.encode(_:forKey:)()
{
  return MEMORY[0x1F4185690]();
}

{
  return MEMORY[0x1F4185698]();
}

{
  return MEMORY[0x1F41856A0]();
}

{
  return MEMORY[0x1F41856B0]();
}

uint64_t KeyedEncodingContainer.encode<A>(_:forKey:)()
{
  return MEMORY[0x1F41856C0]();
}

uint64_t type metadata accessor for KeyedEncodingContainer()
{
  return MEMORY[0x1F4185710]();
}

uint64_t KeyedEncodingContainer.init<A>(_:)()
{
  return MEMORY[0x1F4185718]();
}

uint64_t specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)()
{
  return MEMORY[0x1F4185730]();
}

Swift::Int __swiftcall _minimumMergeRunLength(_:)(Swift::Int a1)
{
  return MEMORY[0x1F4185740](a1);
}

uint64_t _writeBackMutableSlice<A, B>(_:bounds:slice:)()
{
  return MEMORY[0x1F4185750]();
}

uint64_t dispatch thunk of CustomStringConvertible.description.getter()
{
  return MEMORY[0x1F4185758]();
}

uint64_t dispatch thunk of ExpressibleByNilLiteral.init(nilLiteral:)()
{
  return MEMORY[0x1F4185760]();
}

uint64_t type metadata accessor for _ContiguousArrayStorage()
{
  return MEMORY[0x1F4185768]();
}

uint64_t _setDownCastConditional<A, B>(_:)()
{
  return MEMORY[0x1F4185770]();
}

uint64_t dispatch thunk of UnkeyedDecodingContainer.decode(_:)()
{
  return MEMORY[0x1F41857C0]();
}

uint64_t dispatch thunk of UnkeyedDecodingContainer.isAtEnd.getter()
{
  return MEMORY[0x1F4185818]();
}

uint64_t UnkeyedDecodingContainer.decodeIfPresent(_:)()
{
  return MEMORY[0x1F4185828]();
}

{
  return MEMORY[0x1F4185830]();
}

{
  return MEMORY[0x1F4185838]();
}

{
  return MEMORY[0x1F4185840]();
}

{
  return MEMORY[0x1F4185848]();
}

{
  return MEMORY[0x1F4185858]();
}

{
  return MEMORY[0x1F4185860]();
}

uint64_t UnkeyedDecodingContainer.decodeIfPresent<A>(_:)()
{
  return MEMORY[0x1F4185850]();
}

uint64_t UnkeyedDecodingContainer.decode(_:)()
{
  return MEMORY[0x1F4185868]();
}

{
  return MEMORY[0x1F4185870]();
}

uint64_t dispatch thunk of UnkeyedEncodingContainer.encode(_:)()
{
  return MEMORY[0x1F41858B0]();
}

uint64_t UnkeyedEncodingContainer.encodeConditional<A>(_:)()
{
  return MEMORY[0x1F4185908]();
}

uint64_t UnkeyedEncodingContainer.encode<A>(contentsOf:)()
{
  return MEMORY[0x1F4185910]();
}

{
  return MEMORY[0x1F4185918]();
}

{
  return MEMORY[0x1F4185920]();
}

{
  return MEMORY[0x1F4185928]();
}

{
  return MEMORY[0x1F4185930]();
}

{
  return MEMORY[0x1F4185938]();
}

{
  return MEMORY[0x1F4185940]();
}

{
  return MEMORY[0x1F4185948]();
}

{
  return MEMORY[0x1F4185950]();
}

{
  return MEMORY[0x1F4185958]();
}

{
  return MEMORY[0x1F4185960]();
}

{
  return MEMORY[0x1F4185968]();
}

{
  return MEMORY[0x1F4185970]();
}

{
  return MEMORY[0x1F4185978]();
}

{
  return MEMORY[0x1F4185980]();
}

{
  return MEMORY[0x1F4185988]();
}

{
  return MEMORY[0x1F4185990]();
}

uint64_t UnkeyedEncodingContainer.encode(_:)()
{
  return MEMORY[0x1F4185998]();
}

{
  return MEMORY[0x1F41859A0]();
}

uint64_t type metadata accessor for FloatingPointRoundingRule()
{
  return MEMORY[0x1F41859C8]();
}

uint64_t DefaultStringInterpolation.appendInterpolation<A>(_:)()
{
  return MEMORY[0x1F41859E8]();
}

{
  return MEMORY[0x1F41859F0]();
}

uint64_t _forceBridgeFromObjectiveC<A>(_:_:)()
{
  return MEMORY[0x1F4185A18]();
}

uint64_t dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)()
{
  return MEMORY[0x1F4185A20]();
}

uint64_t _bridgeAnythingToObjectiveC<A>(_:)()
{
  return MEMORY[0x1F4185A30]();
}

uint64_t _diagnoseUnexpectedEnumCase<A>(type:)()
{
  return MEMORY[0x1F4185A38]();
}

uint64_t _stringCompareWithSmolCheck(_:_:expecting:)()
{
  return MEMORY[0x1F4185A40]();
}

uint64_t dispatch thunk of CustomDebugStringConvertible.debugDescription.getter()
{
  return MEMORY[0x1F4185A48]();
}

uint64_t dispatch thunk of SingleValueDecodingContainer.decode(_:)()
{
  return MEMORY[0x1F4185A90]();
}

uint64_t SingleValueDecodingContainer.decode(_:)()
{
  return MEMORY[0x1F4185AC8]();
}

{
  return MEMORY[0x1F4185AD0]();
}

uint64_t dispatch thunk of SingleValueEncodingContainer.encode(_:)()
{
  return MEMORY[0x1F4185B28]();
}

uint64_t SingleValueEncodingContainer.encode(_:)()
{
  return MEMORY[0x1F4185B70]();
}

{
  return MEMORY[0x1F4185B78]();
}

uint64_t dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter()
{
  return MEMORY[0x1F4185B90]();
}

uint64_t type metadata accessor for __ContiguousArrayStorageBase()
{
  return MEMORY[0x1F4185B98]();
}

uint64_t == infix<A, B>(_:_:)()
{
  return MEMORY[0x1F4185BA8]();
}

uint64_t KeyedDecodingContainerProtocol.decodeIfPresent(_:forKey:)()
{
  return MEMORY[0x1F4185BE8]();
}

{
  return MEMORY[0x1F4185BF0]();
}

{
  return MEMORY[0x1F4185BF8]();
}

{
  return MEMORY[0x1F4185C00]();
}

{
  return MEMORY[0x1F4185C08]();
}

{
  return MEMORY[0x1F4185C18]();
}

{
  return MEMORY[0x1F4185C20]();
}

uint64_t KeyedDecodingContainerProtocol.decodeIfPresent<A>(_:forKey:)()
{
  return MEMORY[0x1F4185C10]();
}

uint64_t KeyedDecodingContainerProtocol.decode(_:forKey:)()
{
  return MEMORY[0x1F4185C28]();
}

{
  return MEMORY[0x1F4185C30]();
}

uint64_t KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:)()
{
  return MEMORY[0x1F4185C88]();
}

{
  return MEMORY[0x1F4185C90]();
}

{
  return MEMORY[0x1F4185C98]();
}

{
  return MEMORY[0x1F4185CA0]();
}

{
  return MEMORY[0x1F4185CA8]();
}

{
  return MEMORY[0x1F4185CB8]();
}

{
  return MEMORY[0x1F4185CC0]();
}

{
  return MEMORY[0x1F4185CC8]();
}

{
  return MEMORY[0x1F4185CD0]();
}

uint64_t KeyedEncodingContainerProtocol.encodeIfPresent<A>(_:forKey:)()
{
  return MEMORY[0x1F4185CB0]();
}

uint64_t KeyedEncodingContainerProtocol.encodeConditional<A>(_:forKey:)()
{
  return MEMORY[0x1F4185CD8]();
}

uint64_t KeyedEncodingContainerProtocol.encode(_:forKey:)()
{
  return MEMORY[0x1F4185CE0]();
}

{
  return MEMORY[0x1F4185CE8]();
}

uint64_t _diagnoseUnavailableCodeReached()()
{
  return MEMORY[0x1F4185D20]();
}

uint64_t dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)()
{
  return MEMORY[0x1F4185D58]();
}

uint64_t _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)()
{
  return MEMORY[0x1F4185D68]();
}

uint64_t zip<A, B>(_:_:)()
{
  return MEMORY[0x1F4185DA0]();
}

NSNumber __swiftcall Int8._bridgeToObjectiveC()()
{
  return (NSNumber)MEMORY[0x1F40E6DE8]();
}

uint64_t ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)()
{
  return MEMORY[0x1F4185DD8]();
}

uint64_t KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)()
{
  return MEMORY[0x1F4185DE0]();
}

uint64_t Error.localizedDescription.getter()
{
  return MEMORY[0x1F40E6E30]();
}

uint64_t Never.body.getter()
{
  return MEMORY[0x1F40DFB40]();
}

uint64_t Slice.indices.getter()
{
  return MEMORY[0x1F4185E60]();
}

uint64_t type metadata accessor for Slice()
{
  return MEMORY[0x1F4185E78]();
}

uint64_t print(_:separator:terminator:)()
{
  return MEMORY[0x1F4185E90]();
}

uint64_t static Hasher._hash(seed:bytes:count:)()
{
  return MEMORY[0x1F4185E98]();
}

uint64_t static Hasher._hash(seed:_:)()
{
  return MEMORY[0x1F4185EA8]();
}

uint64_t Hasher.init(_seed:)()
{
  return MEMORY[0x1F4185EB0]();
}

uint64_t Hasher.combine(bytes:)()
{
  return MEMORY[0x1F4185EB8]();
}

Swift::Void __swiftcall Hasher._combine(_:)(Swift::UInt a1)
{
}

Swift::Void __swiftcall Hasher._combine(_:)(Swift::UInt8 a1)
{
}

Swift::Void __swiftcall Hasher._combine(_:)(Swift::UInt16 a1)
{
}

Swift::Void __swiftcall Hasher._combine(_:)(Swift::UInt32 a1)
{
}

Swift::Void __swiftcall Hasher._combine(_:)(Swift::UInt64 a1)
{
}

Swift::Int __swiftcall Hasher.finalize()()
{
  return MEMORY[0x1F4185EF0]();
}

Swift::Int __swiftcall Hasher._finalize()()
{
  return MEMORY[0x1F4185EF8]();
}

uint64_t Hasher.init()()
{
  return MEMORY[0x1F4185F00]();
}

uint64_t type metadata accessor for Result()
{
  return MEMORY[0x1F4185F68]();
}

NSNumber __swiftcall UInt32._bridgeToObjectiveC()()
{
  return (NSNumber)MEMORY[0x1F40E6EA8]();
}

uint64_t static UInt32._forceBridgeFromObjectiveC(_:result:)()
{
  return MEMORY[0x1F40E6EB0]();
}

uint64_t static UInt32._conditionallyBridgeFromObjectiveC(_:result:)()
{
  return MEMORY[0x1F40E6EB8]();
}

uint64_t static UInt32._unconditionallyBridgeFromObjectiveC(_:)()
{
  return MEMORY[0x1F40E6EC0]();
}

NSNumber __swiftcall UInt64._bridgeToObjectiveC()()
{
  return (NSNumber)MEMORY[0x1F40E6ED8]();
}

uint64_t static UInt64._forceBridgeFromObjectiveC(_:result:)()
{
  return MEMORY[0x1F40E6EE0]();
}

uint64_t static UInt64._conditionallyBridgeFromObjectiveC(_:result:)()
{
  return MEMORY[0x1F40E6EE8]();
}

uint64_t static UInt64._unconditionallyBridgeFromObjectiveC(_:)()
{
  return MEMORY[0x1F40E6EF0]();
}

uint64_t dispatch thunk of Decoder.unkeyedContainer()()
{
  return MEMORY[0x1F4185FB0]();
}

uint64_t dispatch thunk of Decoder.singleValueContainer()()
{
  return MEMORY[0x1F4185FB8]();
}

uint64_t dispatch thunk of Decoder.container<A>(keyedBy:)()
{
  return MEMORY[0x1F4185FC8]();
}

uint64_t dispatch thunk of Encoder.unkeyedContainer()()
{
  return MEMORY[0x1F4185FD8]();
}

uint64_t dispatch thunk of Encoder.singleValueContainer()()
{
  return MEMORY[0x1F4185FE0]();
}

uint64_t dispatch thunk of Encoder.container<A>(keyedBy:)()
{
  return MEMORY[0x1F4185FF0]();
}

uint64_t type metadata accessor for KeyPath()
{
  return MEMORY[0x1F4186008]();
}

uint64_t static Duration.TimeFormatStyle.Pattern.minuteSecond.getter()
{
  return MEMORY[0x1F40E6F08]();
}

uint64_t type metadata accessor for Duration.TimeFormatStyle.Pattern()
{
  return MEMORY[0x1F40E6F18]();
}

uint64_t type metadata accessor for Duration.TimeFormatStyle()
{
  return MEMORY[0x1F40E6F20]();
}

uint64_t static Duration.UnitsFormatStyle.ZeroValueUnitsDisplayStrategy.hide.getter()
{
  return MEMORY[0x1F40E6F30]();
}

uint64_t type metadata accessor for Duration.UnitsFormatStyle.ZeroValueUnitsDisplayStrategy()
{
  return MEMORY[0x1F40E6F38]();
}

uint64_t static Duration.UnitsFormatStyle.FractionalPartDisplayStrategy.hide(rounded:)()
{
  return MEMORY[0x1F40E6F58]();
}

uint64_t type metadata accessor for Duration.UnitsFormatStyle.FractionalPartDisplayStrategy()
{
  return MEMORY[0x1F40E6F68]();
}

uint64_t static Duration.UnitsFormatStyle.UnitWidth.narrow.getter()
{
  return MEMORY[0x1F40E6FB8]();
}

uint64_t type metadata accessor for Duration.UnitsFormatStyle.UnitWidth()
{
  return MEMORY[0x1F40E6FC0]();
}

uint64_t type metadata accessor for Duration.UnitsFormatStyle()
{
  return MEMORY[0x1F40E6FC8]();
}

uint64_t Duration.formatted<A>(_:)()
{
  return MEMORY[0x1F40E6FD0]();
}

uint64_t static Duration.seconds(_:)()
{
  return MEMORY[0x1F41861A8]();
}

uint64_t static RangeSet.== infix(_:_:)()
{
  return MEMORY[0x1F41861D8]();
}

uint64_t RangeSet.ranges.getter()
{
  return MEMORY[0x1F4186208]();
}

uint64_t type metadata accessor for RangeSet()
{
  return MEMORY[0x1F4186250]();
}

uint64_t dispatch thunk of CodingKey.stringValue.getter()
{
  return MEMORY[0x1F4186288]();
}

uint64_t dispatch thunk of CodingKey.init(stringValue:)()
{
  return MEMORY[0x1F4186290]();
}

uint64_t dispatch thunk of CodingKey.intValue.getter()
{
  return MEMORY[0x1F4186298]();
}

uint64_t OptionSet<>.insert(_:)()
{
  return MEMORY[0x1F41862C0]();
}

uint64_t OptionSet<>.contains(_:)()
{
  return MEMORY[0x1F41862D8]();
}

uint64_t _typeName(_:qualified:)()
{
  return MEMORY[0x1F4186318]();
}

uint64_t AGCompareValues()
{
  return MEMORY[0x1F410B090]();
}

uint64_t AGCreateWeakAttribute()
{
  return MEMORY[0x1F410B098]();
}

uint64_t AGGraphAddInput()
{
  return MEMORY[0x1F410B0A0]();
}

uint64_t AGGraphAddNamedTraceEvent()
{
  return MEMORY[0x1F410B0A8]();
}

uint64_t AGGraphAnyInputsChanged()
{
  return MEMORY[0x1F410B0B0]();
}

uint64_t AGGraphArchiveJSON()
{
  return MEMORY[0x1F410B0B8]();
}

uint64_t AGGraphCancelUpdate()
{
  return MEMORY[0x1F410B0C0]();
}

uint64_t AGGraphClearUpdate()
{
  return MEMORY[0x1F410B0C8]();
}

uint64_t AGGraphCreateIndirectAttribute()
{
  return MEMORY[0x1F410B0D0]();
}

uint64_t AGGraphCreateOffsetAttribute2()
{
  return MEMORY[0x1F410B0D8]();
}

uint64_t AGGraphCurrentAttributeWasModified()
{
  return MEMORY[0x1F410B0E0]();
}

uint64_t AGGraphGetAttributeGraph()
{
  return MEMORY[0x1F410B0E8]();
}

uint64_t AGGraphGetAttributeInfo()
{
  return MEMORY[0x1F410B0F0]();
}

uint64_t AGGraphGetAttributeSubgraph()
{
  return MEMORY[0x1F410B0F8]();
}

uint64_t AGGraphGetCounter()
{
  return MEMORY[0x1F410B100]();
}

uint64_t AGGraphGetCurrentAttribute()
{
  return MEMORY[0x1F410B108]();
}

uint64_t AGGraphGetDeadline()
{
  return MEMORY[0x1F410B110]();
}

uint64_t AGGraphGetFlags()
{
  return MEMORY[0x1F410B118]();
}

uint64_t AGGraphGetInputValue()
{
  return MEMORY[0x1F410B120]();
}

uint64_t AGGraphGetOutputValue()
{
  return MEMORY[0x1F410B128]();
}

uint64_t AGGraphGetValue()
{
  return MEMORY[0x1F410B130]();
}

uint64_t AGGraphGetValueState()
{
  return MEMORY[0x1F410B138]();
}

uint64_t AGGraphGetWeakValue()
{
  return MEMORY[0x1F410B140]();
}

uint64_t AGGraphHasDeadlinePassed()
{
  return MEMORY[0x1F410B148]();
}

uint64_t AGGraphInvalidateAllValues()
{
  return MEMORY[0x1F410B150]();
}

uint64_t AGGraphInvalidateValue()
{
  return MEMORY[0x1F410B158]();
}

uint64_t AGGraphMutateAttribute()
{
  return MEMORY[0x1F410B160]();
}

uint64_t AGGraphPrefetchValue()
{
  return MEMORY[0x1F410B168]();
}

uint64_t AGGraphRegisterDependency()
{
  return MEMORY[0x1F410B170]();
}

uint64_t AGGraphResetProfile()
{
  return MEMORY[0x1F410B178]();
}

uint64_t AGGraphSetDeadline()
{
  return MEMORY[0x1F410B180]();
}

uint64_t AGGraphSetFlags()
{
  return MEMORY[0x1F410B188]();
}

uint64_t AGGraphSetIndirectAttribute()
{
  return MEMORY[0x1F410B190]();
}

uint64_t AGGraphSetOutputValue()
{
  return MEMORY[0x1F410B198]();
}

uint64_t AGGraphSetUpdate()
{
  return MEMORY[0x1F410B1A0]();
}

uint64_t AGGraphSetValue()
{
  return MEMORY[0x1F410B1A8]();
}

uint64_t AGGraphStartProfiling()
{
  return MEMORY[0x1F410B1B0]();
}

uint64_t AGGraphStopProfiling()
{
  return MEMORY[0x1F410B1B8]();
}

uint64_t AGGraphWithUpdate()
{
  return MEMORY[0x1F410B1C0]();
}

uint64_t AGMakeUniqueID()
{
  return MEMORY[0x1F410B1C8]();
}

uint64_t AGSubgraphAddChild()
{
  return MEMORY[0x1F410B1D0]();
}

uint64_t AGSubgraphAddObserver()
{
  return MEMORY[0x1F410B1D8]();
}

uint64_t AGSubgraphCreate()
{
  return MEMORY[0x1F410B1E8]();
}

uint64_t AGSubgraphCreate2()
{
  return MEMORY[0x1F410B1F0]();
}

uint64_t AGSubgraphGetCurrent()
{
  return MEMORY[0x1F410B1F8]();
}

uint64_t AGSubgraphGetGraph()
{
  return MEMORY[0x1F410B200]();
}

uint64_t AGSubgraphInvalidate()
{
  return MEMORY[0x1F410B208]();
}

uint64_t AGSubgraphIsAncestor()
{
  return MEMORY[0x1F410B210]();
}

uint64_t AGSubgraphIsValid()
{
  return MEMORY[0x1F410B218]();
}

uint64_t AGSubgraphRemoveChild()
{
  return MEMORY[0x1F410B220]();
}

uint64_t AGSubgraphRemoveObserver()
{
  return MEMORY[0x1F410B228]();
}

uint64_t AGSubgraphSetCurrent()
{
  return MEMORY[0x1F410B230]();
}

uint64_t AGSubgraphShouldRecordTree()
{
  return MEMORY[0x1F410B238]();
}

uint64_t AGTreeValueGetValue()
{
  return MEMORY[0x1F410B248]();
}

uint64_t AGTupleElementOffset()
{
  return MEMORY[0x1F410B250]();
}

uint64_t AGTupleWithBuffer()
{
  return MEMORY[0x1F410B258]();
}

uint64_t AGWeakAttributeGetAttribute()
{
  return MEMORY[0x1F410B278]();
}

uint64_t AXAssistiveAccessEnabled()
{
  return MEMORY[0x1F40D3190]();
}

NSString *__cdecl AXNameFromColor(CGColorRef color)
{
  return (NSString *)MEMORY[0x1F40D31A0](color);
}

uint64_t BSSettingFlagForBool()
{
  return MEMORY[0x1F410C5E0]();
}

uint64_t BSSettingFlagIsYes()
{
  return MEMORY[0x1F410C5F8]();
}

CFTimeInterval CACurrentMediaTime(void)
{
  MEMORY[0x1F40F4A90]();
  return result;
}

uint64_t CALayerMapGeometry()
{
  return MEMORY[0x1F40F4BF8]();
}

BOOL CATransform3DEqualToTransform(CATransform3D *a, CATransform3D *b)
{
  return MEMORY[0x1F40F4CE0](a, b);
}

CFMutableDataRef CFDataCreateMutable(CFAllocatorRef allocator, CFIndex capacity)
{
  return (CFMutableDataRef)MEMORY[0x1F40D7808](allocator, capacity);
}

const void *__cdecl CFDictionaryGetValue(CFDictionaryRef theDict, const void *key)
{
  return (const void *)MEMORY[0x1F40D7A10](theDict, key);
}

void CFPreferencesSetAppValue(CFStringRef key, CFPropertyListRef value, CFStringRef applicationID)
{
}

CFRunLoopRef CFRunLoopGetCurrent(void)
{
  return (CFRunLoopRef)MEMORY[0x1F40D80B0]();
}

void CFRunLoopPerformBlock(CFRunLoopRef rl, CFTypeRef mode, void *block)
{
}

CGAffineTransform *__cdecl CGAffineTransformConcat(CGAffineTransform *__return_ptr retstr, CGAffineTransform *t1, CGAffineTransform *t2)
{
  return (CGAffineTransform *)MEMORY[0x1F40D9790](retstr, t1, t2);
}

CGAffineTransform *__cdecl CGAffineTransformMakeScale(CGAffineTransform *__return_ptr retstr, CGFloat sx, CGFloat sy)
{
  return (CGAffineTransform *)MEMORY[0x1F40D97D0](retstr, sx, sy);
}

CGAffineTransform *__cdecl CGAffineTransformMakeTranslation(CGAffineTransform *__return_ptr retstr, CGFloat tx, CGFloat ty)
{
  return (CGAffineTransform *)MEMORY[0x1F40D97D8](retstr, tx, ty);
}

CGDataProviderRef CGDataProviderCreateWithCFData(CFDataRef data)
{
  return (CGDataProviderRef)MEMORY[0x1F40DA300](data);
}

CGImageRef CGImageCreateWithJPEGDataProvider(CGDataProviderRef source, const CGFloat *decode, BOOL shouldInterpolate, CGColorRenderingIntent intent)
{
  return (CGImageRef)MEMORY[0x1F40DA8A0](source, decode, shouldInterpolate, *(void *)&intent);
}

CGImageRef CGImageCreateWithPNGDataProvider(CGDataProviderRef source, const CGFloat *decode, BOOL shouldInterpolate, CGColorRenderingIntent intent)
{
  return (CGImageRef)MEMORY[0x1F40DA8B8](source, decode, shouldInterpolate, *(void *)&intent);
}

void CGImageDestinationAddImage(CGImageDestinationRef idst, CGImageRef image, CFDictionaryRef properties)
{
}

CGImageDestinationRef CGImageDestinationCreateWithData(CFMutableDataRef data, CFStringRef type, size_t count, CFDictionaryRef options)
{
  return (CGImageDestinationRef)MEMORY[0x1F40E9738](data, type, count, options);
}

BOOL CGImageDestinationFinalize(CGImageDestinationRef idst)
{
  return MEMORY[0x1F40E9760](idst);
}

CFStringRef CGImageGetUTType(CGImageRef image)
{
  return (CFStringRef)MEMORY[0x1F40DA9B0](image);
}

CFDictionaryRef CGImageSourceCopyPropertiesAtIndex(CGImageSourceRef isrc, size_t index, CFDictionaryRef options)
{
  return (CFDictionaryRef)MEMORY[0x1F40E9938](isrc, index, options);
}

CGImageRef CGImageSourceCreateImageAtIndex(CGImageSourceRef isrc, size_t index, CFDictionaryRef options)
{
  return (CGImageRef)MEMORY[0x1F40E9968](isrc, index, options);
}

CGImageSourceRef CGImageSourceCreateWithURL(CFURLRef url, CFDictionaryRef options)
{
  return (CGImageSourceRef)MEMORY[0x1F40E99C8](url, options);
}

size_t CGImageSourceGetCount(CGImageSourceRef isrc)
{
  return MEMORY[0x1F40E99F8](isrc);
}

CGPoint CGPointApplyAffineTransform(CGPoint point, CGAffineTransform *t)
{
  MEMORY[0x1F40DB1F8](t, (__n128)point, *(__n128 *)&point.y);
  result.CGFloat y = v3;
  result.CGFloat x = v2;
  return result;
}

BOOL CGRectContainsPoint(CGRect rect, CGPoint point)
{
  return MEMORY[0x1F40DB228]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height, (__n128)point, *(__n128 *)&point.y);
}

BOOL CGRectContainsRect(CGRect rect1, CGRect rect2)
{
  return MEMORY[0x1F40DB230]((__n128)rect1.origin, *(__n128 *)&rect1.origin.y, (__n128)rect1.size, *(__n128 *)&rect1.size.height, (__n128)rect2.origin, *(__n128 *)&rect2.origin.y, (__n128)rect2.size, *(__n128 *)&rect2.size.height);
}

BOOL CGRectEqualToRect(CGRect rect1, CGRect rect2)
{
  return MEMORY[0x1F40DB248]((__n128)rect1.origin, *(__n128 *)&rect1.origin.y, (__n128)rect1.size, *(__n128 *)&rect1.size.height, (__n128)rect2.origin, *(__n128 *)&rect2.origin.y, (__n128)rect2.size, *(__n128 *)&rect2.size.height);
}

CGFloat CGRectGetHeight(CGRect rect)
{
  MEMORY[0x1F40DB250]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGFloat CGRectGetMaxX(CGRect rect)
{
  MEMORY[0x1F40DB268]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGFloat CGRectGetMaxY(CGRect rect)
{
  MEMORY[0x1F40DB270]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGFloat CGRectGetMidX(CGRect rect)
{
  MEMORY[0x1F40DB280]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGFloat CGRectGetMidY(CGRect rect)
{
  MEMORY[0x1F40DB288]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGFloat CGRectGetMinX(CGRect rect)
{
  MEMORY[0x1F40DB298]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGFloat CGRectGetMinY(CGRect rect)
{
  MEMORY[0x1F40DB2A0]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGFloat CGRectGetWidth(CGRect rect)
{
  MEMORY[0x1F40DB2A8]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGRect CGRectInset(CGRect rect, CGFloat dx, CGFloat dy)
{
  MEMORY[0x1F40DB2B8]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height, dx, dy);
  result.size.double height = v6;
  result.size.double width = v5;
  result.origin.CGFloat y = v4;
  result.origin.CGFloat x = v3;
  return result;
}

CGRect CGRectIntersection(CGRect r1, CGRect r2)
{
  MEMORY[0x1F40DB2C8]((__n128)r1.origin, *(__n128 *)&r1.origin.y, (__n128)r1.size, *(__n128 *)&r1.size.height, (__n128)r2.origin, *(__n128 *)&r2.origin.y, (__n128)r2.size, *(__n128 *)&r2.size.height);
  result.size.double height = v5;
  result.size.double width = v4;
  result.origin.CGFloat y = v3;
  result.origin.CGFloat x = v2;
  return result;
}

BOOL CGRectIntersectsRect(CGRect rect1, CGRect rect2)
{
  return MEMORY[0x1F40DB2D0]((__n128)rect1.origin, *(__n128 *)&rect1.origin.y, (__n128)rect1.size, *(__n128 *)&rect1.size.height, (__n128)rect2.origin, *(__n128 *)&rect2.origin.y, (__n128)rect2.size, *(__n128 *)&rect2.size.height);
}

BOOL CGRectIsEmpty(CGRect rect)
{
  return MEMORY[0x1F40DB2D8]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
}

BOOL CGRectIsNull(CGRect rect)
{
  return MEMORY[0x1F40DB2E8]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
}

CGRect CGRectOffset(CGRect rect, CGFloat dx, CGFloat dy)
{
  MEMORY[0x1F40DB2F8]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height, dx, dy);
  result.size.double height = v6;
  result.size.double width = v5;
  result.origin.CGFloat y = v4;
  result.origin.CGFloat x = v3;
  return result;
}

CGRect CGRectStandardize(CGRect rect)
{
  MEMORY[0x1F40DB300]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  result.size.double height = v4;
  result.size.double width = v3;
  result.origin.CGFloat y = v2;
  result.origin.CGFloat x = v1;
  return result;
}

CGRect CGRectUnion(CGRect r1, CGRect r2)
{
  MEMORY[0x1F40DB310]((__n128)r1.origin, *(__n128 *)&r1.origin.y, (__n128)r1.size, *(__n128 *)&r1.size.height, (__n128)r2.origin, *(__n128 *)&r2.origin.y, (__n128)r2.size, *(__n128 *)&r2.size.height);
  result.size.double height = v5;
  result.size.double width = v4;
  result.origin.CGFloat y = v3;
  result.origin.CGFloat x = v2;
  return result;
}

uint64_t CTFontDescriptorGetTextStyleSize()
{
  return MEMORY[0x1F40DF448]();
}

Class NSClassFromString(NSString *aClassName)
{
  return (Class)MEMORY[0x1F40E7010](aClassName);
}

NSRange NSIntersectionRange(NSRange range1, NSRange range2)
{
  NSUInteger v2 = MEMORY[0x1F40E7140](range1.location, range1.length, range2.location, range2.length);
  result.length = v3;
  result.location = v2;
  return result;
}

NSString *__cdecl NSStringFromClass(Class aClass)
{
  return (NSString *)MEMORY[0x1F40E7280](aClass);
}

NSString *__cdecl NSStringFromSelector(SEL aSelector)
{
  return (NSString *)MEMORY[0x1F40E72B0](aSelector);
}

uint64_t RPTSizeAlongAxis()
{
  return MEMORY[0x1F4147AA8]();
}

BOOL UIAccessibilityButtonShapesEnabled(void)
{
  return MEMORY[0x1F4166AD8]();
}

CGRect UIAccessibilityConvertFrameToScreenCoordinates(CGRect rect, UIView *view)
{
  MEMORY[0x1F4166AE0](view, (__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  result.size.double height = v5;
  result.size.double width = v4;
  result.origin.CGFloat y = v3;
  result.origin.CGFloat x = v2;
  return result;
}

UIBezierPath *__cdecl UIAccessibilityConvertPathToScreenCoordinates(UIBezierPath *path, UIView *view)
{
  return (UIBezierPath *)MEMORY[0x1F4166AE8](path, view);
}

id UIAccessibilityFocusedElement(UIAccessibilityAssistiveTechnologyIdentifier assistiveTechnologyIdentifier)
{
  return (id)MEMORY[0x1F4166AF8](assistiveTechnologyIdentifier);
}

BOOL UIAccessibilityIsInvertColorsEnabled(void)
{
  return MEMORY[0x1F4166B10]();
}

BOOL UIAccessibilityIsReduceMotionEnabled(void)
{
  return MEMORY[0x1F4166B18]();
}

BOOL UIAccessibilityIsReduceTransparencyEnabled(void)
{
  return MEMORY[0x1F4166B28]();
}

BOOL UIAccessibilityIsSwitchControlRunning(void)
{
  return MEMORY[0x1F4166B38]();
}

BOOL UIAccessibilityIsVoiceOverRunning(void)
{
  return MEMORY[0x1F4166B50]();
}

void UIAccessibilityPostNotification(UIAccessibilityNotifications notification, id argument)
{
}

BOOL UIAccessibilityPrefersCrossFadeTransitions(void)
{
  return MEMORY[0x1F4166B60]();
}

BOOL UIAccessibilityShouldDifferentiateWithoutColor(void)
{
  return MEMORY[0x1F4166B68]();
}

uint64_t UIAnimationDragCoefficient()
{
  return MEMORY[0x1F4166B70]();
}

int UIApplicationMain(int argc, char **argv, NSString *principalClassName, NSString *delegateClassName)
{
  return MEMORY[0x1F4166B78](*(void *)&argc, argv, principalClassName, delegateClassName);
}

CGContextRef UIGraphicsGetCurrentContext(void)
{
  return (CGContextRef)MEMORY[0x1F4166C48]();
}

uint64_t UIViewIgnoresTouchEvents()
{
  return MEMORY[0x1F4166F18]();
}

uint64_t _AXSAccessibilityEnabled()
{
  return MEMORY[0x1F4178840]();
}

uint64_t _AXSCommandAndControlEnabled()
{
  return MEMORY[0x1F4178A18]();
}

uint64_t _AXSFullKeyboardAccessEnabled()
{
  return MEMORY[0x1F4178AD8]();
}

uint64_t _AXSHoverTextEnabled()
{
  return MEMORY[0x1F4178BC0]();
}

uint64_t _AXSIncreaseButtonLegibility()
{
  return MEMORY[0x1F4178CD8]();
}

uint64_t _AXSPhotosensitiveMitigationEnabled()
{
  return MEMORY[0x1F4178DE0]();
}

void *__cdecl _Block_copy(const void *aBlock)
{
  return (void *)MEMORY[0x1F40C9A70](aBlock);
}

void _Block_object_dispose(const void *a1, const int a2)
{
}

void _Block_release(const void *aBlock)
{
}

uint64_t _CTClearFontFallbacksCache()
{
  return MEMORY[0x1F40DF9D0]();
}

uint64_t _UICurrentHitTestContext()
{
  return MEMORY[0x1F4166FF8]();
}

uint64_t _UIDragInteractionDefaultCancellationDelay()
{
  return MEMORY[0x1F4167000]();
}

uint64_t _UIDragInteractionDefaultCompetingLongPressDelay()
{
  return MEMORY[0x1F4167008]();
}

uint64_t _UIDragInteractionDefaultLiftDelay()
{
  return MEMORY[0x1F4167010]();
}

uint64_t _UIDragInteractionDefaultLiftMoveHysteresis()
{
  return MEMORY[0x1F4167018]();
}

uint64_t _UIDragInteractionDefaultPointerLiftDelay()
{
  return MEMORY[0x1F4167020]();
}

uint64_t _UIDragInteractionDefaultPointerLiftMoveHysteresis()
{
  return MEMORY[0x1F4167028]();
}

uint64_t _UIGestureRecognizerContainerAncestralDescription()
{
  return MEMORY[0x1F4167030]();
}

uint64_t _UIGestureRecognizerContainerCompare()
{
  return MEMORY[0x1F4167038]();
}

uint64_t _UIGestureRecognizerRegisterInContainer()
{
  return MEMORY[0x1F4167040]();
}

uint64_t _UIGestureRecognizerUnregisterFromContainer()
{
  return MEMORY[0x1F4167048]();
}

uint64_t _UISheetPageSize()
{
  return MEMORY[0x1F4167090]();
}

uint64_t _UIUpdateAdaptiveRateNeeded()
{
  return MEMORY[0x1F41670C8]();
}

uint64_t _UIUpdateCycleEnabled()
{
  return MEMORY[0x1F41670D0]();
}

uint64_t _UIUpdateCycleRegisterIdleObserver()
{
  return MEMORY[0x1F41670D8]();
}

uint64_t _UIUpdateCycleUnregisterIdleObserver()
{
  return MEMORY[0x1F41670E0]();
}

uint64_t _UIUpdateSequenceInsertItem()
{
  return MEMORY[0x1F4167100]();
}

void _Unwind_Resume(_Unwind_Exception *exception_object)
{
}

__double2 __sincos_stret(double a1)
{
  MEMORY[0x1F40C9C80](a1);
  result.__cosval = v2;
  result.__sinval = v1;
  return result;
}

{
  return MEMORY[0x1F41813D0]();
}

{
  return MEMORY[0x1F41813F0]();
}

void _os_log_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void _os_signpost_emit_with_name_impl(void *dso, os_log_t log, os_signpost_type_t type, os_signpost_id_t spid, const char *name, const char *format, uint8_t *buf, uint32_t size)
{
}

uint64_t _sl_dlopen()
{
  return MEMORY[0x1F415B160]();
}

uint64_t _swift_isClassOrObjCExistentialType()
{
  return MEMORY[0x1F4186340]();
}

uint64_t _swift_stdlib_reportUnimplementedInitializer()
{
  return MEMORY[0x1F4186388]();
}

uint64_t abort_report_np()
{
  return MEMORY[0x1F40CA1E8]();
}

long double atan(long double __x)
{
  MEMORY[0x1F40CA450](__x);
  return result;
}

long double atan2(long double __y, long double __x)
{
  MEMORY[0x1F40CA460](__y, __x);
  return result;
}

int atoi(const char *a1)
{
  return MEMORY[0x1F40CA4A8](a1);
}

void bzero(void *a1, size_t a2)
{
}

BOOL class_addMethod(Class cls, SEL name, IMP imp, const char *types)
{
  return MEMORY[0x1F41814C8](cls, name, imp, types);
}

Method class_getInstanceMethod(Class cls, SEL name)
{
  return (Method)MEMORY[0x1F4181528](cls, name);
}

IMP class_replaceMethod(Class cls, SEL name, IMP imp, const char *types)
{
  return (IMP)MEMORY[0x1F4181578](cls, name, imp, types);
}

dispatch_group_t dispatch_group_create(void)
{
  return (dispatch_group_t)MEMORY[0x1F40CBA88]();
}

void dispatch_group_enter(dispatch_group_t group)
{
}

void dispatch_group_leave(dispatch_group_t group)
{
}

void dispatch_once(dispatch_once_t *predicate, dispatch_block_t block)
{
}

void dispatch_sync(dispatch_queue_t queue, dispatch_block_t block)
{
}

char *dlerror(void)
{
  return (char *)MEMORY[0x1F40CBDB0]();
}

void *__cdecl dlsym(void *__handle, const char *__symbol)
{
  return (void *)MEMORY[0x1F40CBDC8](__handle, __symbol);
}

void exit(int a1)
{
}

long double fmod(long double __x, long double __y)
{
  MEMORY[0x1F40CC1A0](__x, __y);
  return result;
}

void free(void *a1)
{
}

char *__cdecl getenv(const char *a1)
{
  return (char *)MEMORY[0x1F40CC3B0](a1);
}

void *__cdecl malloc(size_t __size)
{
  return (void *)MEMORY[0x1F40CCB10](__size);
}

size_t malloc_size(const void *ptr)
{
  return MEMORY[0x1F40CCB80](ptr);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x1F40CCCF0](__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return (void *)MEMORY[0x1F40CCD10](__dst, __src, __len);
}

void method_exchangeImplementations(Method m1, Method m2)
{
}

IMP method_getImplementation(Method m)
{
  return (IMP)MEMORY[0x1F41815F8](m);
}

const char *__cdecl method_getTypeEncoding(Method m)
{
  return (const char *)MEMORY[0x1F4181618](m);
}

id objc_alloc(Class a1)
{
  return (id)MEMORY[0x1F4181638](a1);
}

id objc_allocWithZone(Class a1)
{
  return (id)MEMORY[0x1F4181640](a1);
}

uint64_t objc_alloc_init()
{
  return MEMORY[0x1F4181648]();
}

id objc_autorelease(id a1)
{
  return (id)MEMORY[0x1F4181660](a1);
}

id objc_autoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x1F4181678](a1);
}

uint64_t objc_claimAutoreleasedReturnValue()
{
  return MEMORY[0x1F4181688]();
}

id objc_getAssociatedObject(id object, const void *key)
{
  return (id)MEMORY[0x1F4181718](object, key);
}

Class objc_getClass(const char *name)
{
  return (Class)MEMORY[0x1F4181728](name);
}

id objc_msgSend(id a1, SEL a2, ...)
{
  return (id)MEMORY[0x1F4181798](a1, a2);
}

id objc_msgSendSuper2(objc_super *a1, SEL a2, ...)
{
  return (id)MEMORY[0x1F41817A8](a1, a2);
}

uint64_t objc_opt_class()
{
  return MEMORY[0x1F41817B0]();
}

uint64_t objc_opt_isKindOfClass()
{
  return MEMORY[0x1F41817B8]();
}

uint64_t objc_opt_respondsToSelector()
{
  return MEMORY[0x1F41817C8]();
}

uint64_t self
{
  return MEMORY[0x1F41817D0]();
}

void objc_release(id a1)
{
}

id objc_retain(id a1)
{
  return (id)MEMORY[0x1F41818B0](a1);
}

id objc_retainAutorelease(id a1)
{
  return (id)MEMORY[0x1F41818B8](a1);
}

id objc_retainAutoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x1F41818C0](a1);
}

id objc_retainAutoreleasedReturnValue(id a1)
{
  return (id)MEMORY[0x1F41818C8](a1);
}

id objc_retainBlock(id a1)
{
  return (id)MEMORY[0x1F41818D0](a1);
}

void objc_setAssociatedObject(id object, const void *key, id value, void *policy)
{
}

void objc_storeStrong(id *location, id obj)
{
}

Class object_getClass(id a1)
{
  return (Class)MEMORY[0x1F4181A58](a1);
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return MEMORY[0x1F40CD3B8](oslog, type);
}

uint64_t os_variant_allows_internal_security_policies()
{
  return MEMORY[0x1F40CD630]();
}

uint64_t os_variant_has_internal_content()
{
  return MEMORY[0x1F40CD648]();
}

long double pow(long double __x, long double __y)
{
  MEMORY[0x1F40CD818](__x, __y);
  return result;
}

int pthread_main_np(void)
{
  return MEMORY[0x1F40CDA68]();
}

uint64_t swift_allocBox()
{
  return MEMORY[0x1F41863D0]();
}

uint64_t swift_allocError()
{
  return MEMORY[0x1F41863E0]();
}

uint64_t swift_allocObject()
{
  return MEMORY[0x1F41863E8]();
}

uint64_t swift_arrayDestroy()
{
  return MEMORY[0x1F4186410]();
}

uint64_t swift_arrayInitWithCopy()
{
  return MEMORY[0x1F4186418]();
}

uint64_t swift_arrayInitWithTakeBackToFront()
{
  return MEMORY[0x1F4186420]();
}

uint64_t swift_arrayInitWithTakeFrontToBack()
{
  return MEMORY[0x1F4186428]();
}

uint64_t swift_beginAccess()
{
  return MEMORY[0x1F4186430]();
}

uint64_t swift_bridgeObjectRelease()
{
  return MEMORY[0x1F4186440]();
}

uint64_t swift_bridgeObjectRelease_n()
{
  return MEMORY[0x1F4186448]();
}

uint64_t swift_bridgeObjectRetain()
{
  return MEMORY[0x1F4186450]();
}

uint64_t swift_bridgeObjectRetain_n()
{
  return MEMORY[0x1F4186458]();
}

uint64_t swift_checkMetadataState()
{
  return MEMORY[0x1F4186460]();
}

uint64_t swift_conformsToProtocol2()
{
  return MEMORY[0x1F4186478]();
}

uint64_t swift_deallocClassInstance()
{
  return MEMORY[0x1F4186488]();
}

uint64_t swift_deallocObject()
{
  return MEMORY[0x1F4186498]();
}

uint64_t swift_deallocPartialClassInstance()
{
  return MEMORY[0x1F41864A0]();
}

uint64_t swift_defaultActor_destroy()
{
  return MEMORY[0x1F4188218]();
}

uint64_t swift_defaultActor_initialize()
{
  return MEMORY[0x1F4188220]();
}

uint64_t swift_dynamicCast()
{
  return MEMORY[0x1F41864B8]();
}

uint64_t swift_dynamicCastClass()
{
  return MEMORY[0x1F41864C0]();
}

uint64_t swift_dynamicCastClassUnconditional()
{
  return MEMORY[0x1F41864C8]();
}

uint64_t swift_dynamicCastMetatype()
{
  return MEMORY[0x1F41864D0]();
}

uint64_t swift_dynamicCastMetatypeUnconditional()
{
  return MEMORY[0x1F41864D8]();
}

uint64_t swift_dynamicCastObjCClass()
{
  return MEMORY[0x1F41864E0]();
}

uint64_t swift_dynamicCastObjCClassUnconditional()
{
  return MEMORY[0x1F41864E8]();
}

uint64_t swift_dynamicCastObjCProtocolConditional()
{
  return MEMORY[0x1F41864F0]();
}

uint64_t swift_dynamicCastObjCProtocolUnconditional()
{
  return MEMORY[0x1F41864F8]();
}

uint64_t swift_dynamicCastUnknownClass()
{
  return MEMORY[0x1F4186508]();
}

uint64_t swift_dynamicCastUnknownClassUnconditional()
{
  return MEMORY[0x1F4186510]();
}

uint64_t swift_endAccess()
{
  return MEMORY[0x1F4186518]();
}

uint64_t swift_errorRelease()
{
  return MEMORY[0x1F4186528]();
}

uint64_t swift_errorRetain()
{
  return MEMORY[0x1F4186530]();
}

uint64_t swift_getAssociatedConformanceWitness()
{
  return MEMORY[0x1F4186538]();
}

uint64_t swift_getAssociatedTypeWitness()
{
  return MEMORY[0x1F4186540]();
}

uint64_t swift_getAtKeyPath()
{
  return MEMORY[0x1F4186550]();
}

uint64_t swift_getDynamicType()
{
  return MEMORY[0x1F4186568]();
}

uint64_t swift_getEnumCaseMultiPayload()
{
  return MEMORY[0x1F4186570]();
}

uint64_t swift_getErrorValue()
{
  return MEMORY[0x1F4186580]();
}

uint64_t swift_getExistentialMetatypeMetadata()
{
  return MEMORY[0x1F4186588]();
}

uint64_t swift_getExistentialTypeMetadata()
{
  return MEMORY[0x1F4186590]();
}

uint64_t swift_getForeignTypeMetadata()
{
  return MEMORY[0x1F41865A8]();
}

uint64_t swift_getFunctionTypeMetadata()
{
  return MEMORY[0x1F41865B8]();
}

uint64_t swift_getFunctionTypeMetadata0()
{
  return MEMORY[0x1F41865C0]();
}

uint64_t swift_getFunctionTypeMetadata1()
{
  return MEMORY[0x1F41865C8]();
}

uint64_t swift_getFunctionTypeMetadata2()
{
  return MEMORY[0x1F41865D0]();
}

uint64_t swift_getGenericMetadata()
{
  return MEMORY[0x1F41865E0]();
}

uint64_t swift_getKeyPath()
{
  return MEMORY[0x1F41865E8]();
}

uint64_t swift_getMetatypeMetadata()
{
  return MEMORY[0x1F41865F0]();
}

uint64_t swift_getObjCClassFromMetadata()
{
  return MEMORY[0x1F41865F8]();
}

uint64_t swift_getObjCClassFromObject()
{
  return MEMORY[0x1F4186600]();
}

uint64_t swift_getObjCClassMetadata()
{
  return MEMORY[0x1F4186608]();
}

uint64_t swift_getObjectType()
{
  return MEMORY[0x1F4186610]();
}

uint64_t swift_getOpaqueTypeConformance2()
{
  return MEMORY[0x1F4186618]();
}

uint64_t swift_getOpaqueTypeMetadata2()
{
  return MEMORY[0x1F4186620]();
}

uint64_t swift_getSingletonMetadata()
{
  return MEMORY[0x1F4186628]();
}

uint64_t swift_getTupleTypeLayout2()
{
  return MEMORY[0x1F4186638]();
}

uint64_t swift_getTupleTypeLayout3()
{
  return MEMORY[0x1F4186640]();
}

uint64_t swift_getTupleTypeMetadata()
{
  return MEMORY[0x1F4186648]();
}

uint64_t swift_getTupleTypeMetadata2()
{
  return MEMORY[0x1F4186650]();
}

uint64_t swift_getTupleTypeMetadata3()
{
  return MEMORY[0x1F4186658]();
}

uint64_t swift_getWitnessTable()
{
  return MEMORY[0x1F4186680]();
}

uint64_t swift_initClassMetadata2()
{
  return MEMORY[0x1F4186688]();
}

uint64_t swift_initEnumMetadataMultiPayload()
{
  return MEMORY[0x1F4186690]();
}

uint64_t swift_initEnumMetadataSinglePayload()
{
  return MEMORY[0x1F41866A0]();
}

uint64_t swift_initStackObject()
{
  return MEMORY[0x1F41866A8]();
}

uint64_t swift_initStructMetadata()
{
  return MEMORY[0x1F41866B8]();
}

uint64_t swift_isClassType()
{
  return MEMORY[0x1F41866C0]();
}

uint64_t swift_isEscapingClosureAtFileLocation()
{
  return MEMORY[0x1F41866C8]();
}

uint64_t swift_isUniquelyReferenced_native()
{
  return MEMORY[0x1F41866E8]();
}

uint64_t swift_isUniquelyReferenced_nonNull()
{
  return MEMORY[0x1F41866F0]();
}

uint64_t swift_isUniquelyReferenced_nonNull_bridgeObject()
{
  return MEMORY[0x1F41866F8]();
}

uint64_t swift_isUniquelyReferenced_nonNull_native()
{
  return MEMORY[0x1F4186700]();
}

uint64_t swift_makeBoxUnique()
{
  return MEMORY[0x1F4186710]();
}

uint64_t swift_modifyAtWritableKeyPath()
{
  return MEMORY[0x1F4186720]();
}

uint64_t swift_once()
{
  return MEMORY[0x1F4186728]();
}

uint64_t swift_projectBox()
{
  return MEMORY[0x1F4186730]();
}

uint64_t swift_readAtKeyPath()
{
  return MEMORY[0x1F4186738]();
}

uint64_t swift_release()
{
  return MEMORY[0x1F4186758]();
}

uint64_t swift_release_n()
{
  return MEMORY[0x1F4186760]();
}

uint64_t swift_retain()
{
  return MEMORY[0x1F4186770]();
}

uint64_t swift_retain_n()
{
  return MEMORY[0x1F4186778]();
}

uint64_t swift_setAtWritableKeyPath()
{
  return MEMORY[0x1F4186788]();
}

uint64_t swift_setDeallocating()
{
  return MEMORY[0x1F4186790]();
}

uint64_t swift_slowAlloc()
{
  return MEMORY[0x1F4186798]();
}

uint64_t swift_slowDealloc()
{
  return MEMORY[0x1F41867A0]();
}

uint64_t swift_stdlib_isStackAllocationSafe()
{
  return MEMORY[0x1F41867A8]();
}

uint64_t swift_storeEnumTagMultiPayload()
{
  return MEMORY[0x1F41867B8]();
}

uint64_t swift_task_alloc()
{
  return MEMORY[0x1F4188250]();
}

uint64_t swift_task_create()
{
  return MEMORY[0x1F4188258]();
}

uint64_t swift_task_dealloc()
{
  return MEMORY[0x1F4188260]();
}

uint64_t swift_task_getMainExecutor()
{
  return MEMORY[0x1F4188268]();
}

uint64_t swift_task_isCancelled()
{
  return MEMORY[0x1F4188270]();
}

uint64_t swift_task_isCurrentExecutor()
{
  return MEMORY[0x1F4188278]();
}

uint64_t swift_unexpectedError()
{
  return MEMORY[0x1F41867D8]();
}

uint64_t swift_unknownObjectRelease()
{
  return MEMORY[0x1F41867E0]();
}

uint64_t swift_unknownObjectRelease_n()
{
  return MEMORY[0x1F41867E8]();
}

uint64_t swift_unknownObjectRetain()
{
  return MEMORY[0x1F41867F0]();
}

uint64_t swift_unknownObjectRetain_n()
{
  return MEMORY[0x1F41867F8]();
}

uint64_t swift_unknownObjectUnownedAssign()
{
  return MEMORY[0x1F4186800]();
}

uint64_t swift_unknownObjectUnownedDestroy()
{
  return MEMORY[0x1F4186818]();
}

uint64_t swift_unknownObjectUnownedInit()
{
  return MEMORY[0x1F4186820]();
}

uint64_t swift_unknownObjectUnownedLoadStrong()
{
  return MEMORY[0x1F4186828]();
}

uint64_t swift_unknownObjectWeakAssign()
{
  return MEMORY[0x1F4186840]();
}

uint64_t swift_unknownObjectWeakCopyAssign()
{
  return MEMORY[0x1F4186848]();
}

uint64_t swift_unknownObjectWeakCopyInit()
{
  return MEMORY[0x1F4186850]();
}

uint64_t swift_unknownObjectWeakDestroy()
{
  return MEMORY[0x1F4186858]();
}

uint64_t swift_unknownObjectWeakInit()
{
  return MEMORY[0x1F4186860]();
}

uint64_t swift_unknownObjectWeakLoadStrong()
{
  return MEMORY[0x1F4186868]();
}

uint64_t swift_unknownObjectWeakTakeAssign()
{
  return MEMORY[0x1F4186870]();
}

uint64_t swift_unknownObjectWeakTakeInit()
{
  return MEMORY[0x1F4186878]();
}

uint64_t swift_unownedRelease()
{
  return MEMORY[0x1F4186880]();
}

uint64_t swift_unownedRetain()
{
  return MEMORY[0x1F4186888]();
}

uint64_t swift_unownedRetainStrong()
{
  return MEMORY[0x1F4186890]();
}

uint64_t swift_updateClassMetadata2()
{
  return MEMORY[0x1F4186898]();
}

uint64_t swift_weakAssign()
{
  return MEMORY[0x1F41868A0]();
}

uint64_t swift_weakCopyAssign()
{
  return MEMORY[0x1F41868A8]();
}

uint64_t swift_weakCopyInit()
{
  return MEMORY[0x1F41868B0]();
}

uint64_t swift_weakDestroy()
{
  return MEMORY[0x1F41868B8]();
}

uint64_t swift_weakInit()
{
  return MEMORY[0x1F41868C0]();
}

uint64_t swift_weakLoadStrong()
{
  return MEMORY[0x1F41868C8]();
}

uint64_t swift_weakTakeAssign()
{
  return MEMORY[0x1F41868D0]();
}

uint64_t swift_weakTakeInit()
{
  return MEMORY[0x1F41868D8]();
}

uint64_t swift_willThrow()
{
  return MEMORY[0x1F41868E0]();
}

uint64_t swift_willThrowTypedImpl()
{
  return MEMORY[0x1F41868E8]();
}

UCharDirection u_charDirection(UChar32 c)
{
  return MEMORY[0x1F417F700](*(void *)&c);
}