void *assignWithTake for SearchToolbarItem(void *a1, void *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  int *v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  int *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  long long v37;
  long long v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  long long v45;
  long long v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  long long v53;
  long long v54;

  *a1 = *a2;
  swift_release();
  a1[1] = a2[1];
  swift_release();
  _s7SwiftUI7BindingVyAA16SearchFieldStateVGMaTm_2(0, &lazy cache variable for type metadata for Binding<SearchFieldState>, type metadata accessor for SearchFieldState, MEMORY[0x1E4F41638]);
  v7 = *(int *)(v6 + 32);
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  *v8 = *((unsigned char *)a2 + v7);
  v8[1] = *((unsigned char *)a2 + v7 + 1);
  *((_WORD *)v8 + 1) = *(_WORD *)((char *)a2 + v7 + 2);
  v8[8] = *((unsigned char *)a2 + v7 + 8);
  *((_DWORD *)v8 + 1) = *(_DWORD *)((char *)a2 + v7 + 4);
  v10 = (int *)type metadata accessor for SearchFieldState(0);
  v11 = v10[9];
  v12 = &v8[v11];
  v13 = &v9[v11];
  v14 = type metadata accessor for AttributedString();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 40))(v12, v13, v14);
  v8[v10[10]] = v9[v10[10]];
  v15 = v10[11];
  v16 = &v8[v15];
  v17 = &v9[v15];
  *(_DWORD *)v16 = *(_DWORD *)v17;
  v16[4] = v17[4];
  v18 = (int *)type metadata accessor for SearchFieldConfiguration(0);
  v19 = v18[6];
  v20 = (uint64_t)a1 + v19;
  v21 = (char *)a2 + v19;
  v22 = *((unsigned __int8 *)a1 + v19 + 8);
  if (v22 == 255) {
    goto LABEL_4;
  }
  v23 = v21[8];
  if (v23 == 255)
  {
    outlined destroy of PlatformItemCollection(v20);
LABEL_4:
    *(void *)v20 = *(void *)v21;
    *(unsigned char *)(v20 + 8) = v21[8];
    goto LABEL_6;
  }
  v24 = *(void *)v20;
  *(void *)v20 = *(void *)v21;
  *(unsigned char *)(v20 + 8) = v23 & 1;
  outlined consume of PlatformItemCollection.Storage(v24, v22 & 1);
LABEL_6:
  *((unsigned char *)a1 + v18[7]) = *((unsigned char *)a2 + v18[7]);
  v25 = v18[8];
  v26 = (char *)a1 + v25;
  v27 = (char *)a2 + v25;
  LOBYTE(v25) = *((unsigned char *)a2 + v25 + 16);
  v28 = *(void *)v26;
  v29 = *((void *)v26 + 1);
  v30 = v26[16];
  *(_OWORD *)v26 = *(_OWORD *)v27;
  v26[16] = v25;
  outlined consume of Text.Storage(v28, v29, v30);
  *((void *)v26 + 3) = *((void *)v27 + 3);
  swift_bridgeObjectRelease();
  v31 = a3[6];
  *((unsigned char *)a1 + a3[5]) = *((unsigned char *)a2 + a3[5]);
  v32 = (char *)a1 + v31;
  v33 = (char *)a2 + v31;
  if (*(void *)((char *)a1 + v31))
  {
    if (*(void *)v33)
    {
      v34 = *((void *)v33 + 1);
      *(void *)v32 = *(void *)v33;
      *((void *)v32 + 1) = v34;
      *((_DWORD *)v32 + 4) = *((_DWORD *)v33 + 4);
      v35 = *((void *)v33 + 4);
      v36 = (void *)*((void *)v32 + 4);
      *((void *)v32 + 3) = *((void *)v33 + 3);
      *((void *)v32 + 4) = v35;

      *((void *)v32 + 5) = *((void *)v33 + 5);
      swift_release();
      *((_DWORD *)v32 + 12) = *((_DWORD *)v33 + 12);
      *((void *)v32 + 7) = *((void *)v33 + 7);
      swift_release();
      *((_OWORD *)v32 + 4) = *((_OWORD *)v33 + 4);
      *((void *)v32 + 10) = *((void *)v33 + 10);
      swift_bridgeObjectRelease();
      goto LABEL_11;
    }
    outlined destroy of BoundInputsView((uint64_t)a1 + v31);
  }
  v37 = *((_OWORD *)v33 + 3);
  *((_OWORD *)v32 + 2) = *((_OWORD *)v33 + 2);
  *((_OWORD *)v32 + 3) = v37;
  *((_OWORD *)v32 + 4) = *((_OWORD *)v33 + 4);
  *((void *)v32 + 10) = *((void *)v33 + 10);
  v38 = *((_OWORD *)v33 + 1);
  *(_OWORD *)v32 = *(_OWORD *)v33;
  *((_OWORD *)v32 + 1) = v38;
LABEL_11:
  v39 = a3[7];
  v40 = (uint64_t)a1 + v39;
  v41 = (char *)a2 + v39;
  if (*(void *)((char *)a1 + v39))
  {
    if (*(void *)v41)
    {
      v42 = *((void *)v41 + 1);
      *(void *)v40 = *(void *)v41;
      *(void *)(v40 + 8) = v42;
      *(_DWORD *)(v40 + 16) = *((_DWORD *)v41 + 4);
      v43 = *((void *)v41 + 4);
      v44 = *(void **)(v40 + 32);
      *(void *)(v40 + 24) = *((void *)v41 + 3);
      *(void *)(v40 + 32) = v43;

      *(void *)(v40 + 40) = *((void *)v41 + 5);
      swift_release();
      *(_DWORD *)(v40 + 48) = *((_DWORD *)v41 + 12);
      *(void *)(v40 + 56) = *((void *)v41 + 7);
      swift_release();
      *(_OWORD *)(v40 + 64) = *((_OWORD *)v41 + 4);
      *(void *)(v40 + 80) = *((void *)v41 + 10);
      swift_bridgeObjectRelease();
      goto LABEL_16;
    }
    outlined destroy of BoundInputsView(v40);
  }
  v45 = *((_OWORD *)v41 + 3);
  *(_OWORD *)(v40 + 32) = *((_OWORD *)v41 + 2);
  *(_OWORD *)(v40 + 48) = v45;
  *(_OWORD *)(v40 + 64) = *((_OWORD *)v41 + 4);
  *(void *)(v40 + 80) = *((void *)v41 + 10);
  v46 = *((_OWORD *)v41 + 1);
  *(_OWORD *)v40 = *(_OWORD *)v41;
  *(_OWORD *)(v40 + 16) = v46;
LABEL_16:
  v47 = a3[9];
  *((unsigned char *)a1 + a3[8]) = *((unsigned char *)a2 + a3[8]);
  v48 = (char *)a1 + v47;
  v49 = (char *)a2 + v47;
  if (!*(void *)((char *)a1 + v47))
  {
LABEL_20:
    v53 = *((_OWORD *)v49 + 3);
    *((_OWORD *)v48 + 2) = *((_OWORD *)v49 + 2);
    *((_OWORD *)v48 + 3) = v53;
    *((_OWORD *)v48 + 4) = *((_OWORD *)v49 + 4);
    *((void *)v48 + 10) = *((void *)v49 + 10);
    v54 = *((_OWORD *)v49 + 1);
    *(_OWORD *)v48 = *(_OWORD *)v49;
    *((_OWORD *)v48 + 1) = v54;
    return a1;
  }
  if (!*(void *)v49)
  {
    outlined destroy of BoundInputsView((uint64_t)a1 + v47);
    goto LABEL_20;
  }
  v50 = *((void *)v49 + 1);
  *(void *)v48 = *(void *)v49;
  *((void *)v48 + 1) = v50;
  *((_DWORD *)v48 + 4) = *((_DWORD *)v49 + 4);
  v51 = *((void *)v49 + 4);
  v52 = (void *)*((void *)v48 + 4);
  *((void *)v48 + 3) = *((void *)v49 + 3);
  *((void *)v48 + 4) = v51;

  *((void *)v48 + 5) = *((void *)v49 + 5);
  swift_release();
  *((_DWORD *)v48 + 12) = *((_DWORD *)v49 + 12);
  *((void *)v48 + 7) = *((void *)v49 + 7);
  swift_release();
  *((_OWORD *)v48 + 4) = *((_OWORD *)v49 + 4);
  *((void *)v48 + 10) = *((void *)v49 + 10);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for SearchToolbarItem(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_187B8DCF4);
}

uint64_t sub_187B8DCF4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for SearchFieldConfiguration(0);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 24));
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    int v11 = v10 - 1;
    if (v11 < 0) {
      int v11 = -1;
    }
    return (v11 + 1);
  }
}

uint64_t storeEnumTagSinglePayload for SearchToolbarItem(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_187B8DDD4);
}

uint64_t sub_187B8DDD4(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for SearchFieldConfiguration(0);
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 24)) = a2;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for SearchScopeToolbarContent(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  v3 = a1;
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v5 = *(_DWORD *)(v4 + 80);
  uint64_t v6 = *(void *)(v4 + 64);
  if (v5 > 7
    || (*(_DWORD *)(v4 + 80) & 0x100000) != 0
    || ((v6 + ((v5 + 1) & ~v5) + 55) & 0xFFFFFFFFFFFFFFF8) + 16 > 0x18)
  {
    uint64_t v9 = *a2;
    uint64_t *v3 = *a2;
    v3 = (uint64_t *)(v9 + ((v5 & 0xF8 ^ 0x1F8) & (v5 + 16)));
  }
  else
  {
    *(unsigned char *)a1 = *(unsigned char *)a2;
    uint64_t v10 = ((unint64_t)a1 + v5 + 1) & ~v5;
    uint64_t v11 = ((unint64_t)a2 + v5 + 1) & ~v5;
    (*(void (**)(uint64_t, uint64_t))(v4 + 16))(v10, v11);
    uint64_t v12 = v10 + v6;
    uint64_t v13 = v11 + v6;
    unint64_t v14 = (v12 + 7) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v15 = (v13 + 7) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v16 = *(void *)v15;
    LOBYTE(v11) = *(unsigned char *)(v15 + 8);
    outlined copy of Environment<Bool>.Content(*(void *)v15, v11);
    *(void *)unint64_t v14 = v16;
    *(unsigned char *)(v14 + 8) = v11;
    unint64_t v17 = (v12 + 23) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v18 = (v13 + 23) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v19 = *(void *)v18;
    LOBYTE(v11) = *(unsigned char *)(v18 + 8);
    outlined copy of Environment<Bool>.Content(*(void *)v18, v11);
    *(void *)unint64_t v17 = v19;
    *(unsigned char *)(v17 + 8) = v11;
    unint64_t v20 = (v12 + 39) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v21 = (v13 + 39) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v22 = *(void *)v21;
    LOBYTE(v11) = *(unsigned char *)(v21 + 8);
    outlined copy of Environment<Bool>.Content(*(void *)v21, v11);
    *(void *)unint64_t v20 = v22;
    *(unsigned char *)(v20 + 8) = v11;
    unint64_t v23 = (v12 + 55) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v24 = (v13 + 55) & 0xFFFFFFFFFFFFFFF8;
    *(unsigned char *)unint64_t v23 = *(unsigned char *)v24;
    *(void *)(v23 + 8) = *(void *)(v24 + 8);
  }
  swift_retain();
  return v3;
}

uint64_t destroy for SearchScopeToolbarContent(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(*(void *)(a2 + 16) - 8);
  uint64_t v3 = v2 + 8;
  unint64_t v4 = (a1 + *(unsigned __int8 *)(v2 + 80) + 1) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  (*(void (**)(unint64_t))(v2 + 8))(v4);
  unint64_t v5 = v4 + *(void *)(v3 + 56);
  outlined consume of Environment<Bool>.Content(*(void *)((v5 + 7) & 0xFFFFFFFFFFFFFFF8), *(unsigned char *)(((v5 + 7) & 0xFFFFFFFFFFFFFFF8) + 8));
  outlined consume of Environment<Bool>.Content(*(void *)((v5 + 23) & 0xFFFFFFFFFFFFFFF8), *(unsigned char *)(((v5 + 23) & 0xFFFFFFFFFFFFFFF8) + 8));
  outlined consume of Environment<Bool>.Content(*(void *)((v5 + 39) & 0xFFFFFFFFFFFFFFF8), *(unsigned char *)(((v5 + 39) & 0xFFFFFFFFFFFFFFF8) + 8));

  return swift_release();
}

unsigned char *initializeWithCopy for SearchScopeToolbarContent(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v5 = v4 + 16;
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v7 = (unint64_t)&a1[v6 + 1] & ~v6;
  uint64_t v8 = (unint64_t)&a2[v6 + 1] & ~v6;
  (*(void (**)(uint64_t, uint64_t))(v4 + 16))(v7, v8);
  uint64_t v9 = *(void *)(v5 + 48);
  uint64_t v10 = v9 + v7;
  uint64_t v11 = v9 + v8;
  unint64_t v12 = (v9 + v7 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v13 = (v9 + v8 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v14 = *(void *)v13;
  LOBYTE(v8) = *(unsigned char *)(v13 + 8);
  outlined copy of Environment<Bool>.Content(*(void *)v13, v8);
  *(void *)unint64_t v12 = v14;
  *(unsigned char *)(v12 + 8) = v8;
  unint64_t v15 = (v10 + 23) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v16 = (v11 + 23) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v17 = *(void *)v16;
  LOBYTE(v8) = *(unsigned char *)(v16 + 8);
  outlined copy of Environment<Bool>.Content(*(void *)v16, v8);
  *(void *)unint64_t v15 = v17;
  *(unsigned char *)(v15 + 8) = v8;
  unint64_t v18 = (v10 + 39) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v19 = (v11 + 39) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v20 = *(void *)v19;
  LOBYTE(v8) = *(unsigned char *)(v19 + 8);
  outlined copy of Environment<Bool>.Content(*(void *)v19, v8);
  *(void *)unint64_t v18 = v20;
  *(unsigned char *)(v18 + 8) = v8;
  unint64_t v21 = (v10 + 55) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v22 = (v11 + 55) & 0xFFFFFFFFFFFFFFF8;
  *(unsigned char *)unint64_t v21 = *(unsigned char *)v22;
  *(void *)(v21 + 8) = *(void *)(v22 + 8);
  swift_retain();
  return a1;
}

unsigned char *assignWithCopy for SearchScopeToolbarContent(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v5 = v4 + 24;
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v7 = (unint64_t)&a1[v6 + 1] & ~v6;
  uint64_t v8 = (unint64_t)&a2[v6 + 1] & ~v6;
  (*(void (**)(uint64_t, uint64_t))(v4 + 24))(v7, v8);
  uint64_t v9 = *(void *)(v5 + 40);
  uint64_t v10 = v9 + v7;
  uint64_t v11 = v9 + v8;
  unint64_t v12 = (v9 + v7 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v13 = (v9 + v8 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v14 = *(void *)v13;
  LOBYTE(v8) = *(unsigned char *)(v13 + 8);
  outlined copy of Environment<Bool>.Content(*(void *)v13, v8);
  uint64_t v15 = *(void *)v12;
  char v16 = *(unsigned char *)(v12 + 8);
  *(void *)unint64_t v12 = v14;
  *(unsigned char *)(v12 + 8) = v8;
  outlined consume of Environment<Bool>.Content(v15, v16);
  unint64_t v17 = (v10 + 23) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v18 = (v11 + 23) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v19 = *(void *)v18;
  LOBYTE(v8) = *(unsigned char *)(v18 + 8);
  outlined copy of Environment<Bool>.Content(*(void *)v18, v8);
  uint64_t v20 = *(void *)v17;
  char v21 = *(unsigned char *)(v17 + 8);
  *(void *)unint64_t v17 = v19;
  *(unsigned char *)(v17 + 8) = v8;
  outlined consume of Environment<Bool>.Content(v20, v21);
  unint64_t v22 = (v10 + 39) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v23 = (v11 + 39) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v24 = *(void *)v23;
  LOBYTE(v8) = *(unsigned char *)(v23 + 8);
  outlined copy of Environment<Bool>.Content(*(void *)v23, v8);
  uint64_t v25 = *(void *)v22;
  char v26 = *(unsigned char *)(v22 + 8);
  *(void *)unint64_t v22 = v24;
  *(unsigned char *)(v22 + 8) = v8;
  outlined consume of Environment<Bool>.Content(v25, v26);
  unint64_t v27 = (v10 + 55) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v28 = (v11 + 55) & 0xFFFFFFFFFFFFFFF8;
  *(unsigned char *)unint64_t v27 = *(unsigned char *)v28;
  *(void *)(v27 + 8) = *(void *)(v28 + 8);
  swift_retain();
  swift_release();
  return a1;
}

unsigned char *initializeWithTake for SearchScopeToolbarContent(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v5 = v4 + 32;
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v7 = (unint64_t)&a1[v6 + 1] & ~v6;
  uint64_t v8 = (unint64_t)&a2[v6 + 1] & ~v6;
  (*(void (**)(uint64_t, uint64_t))(v4 + 32))(v7, v8);
  uint64_t v9 = *(void *)(v5 + 32);
  uint64_t v10 = v9 + v7;
  uint64_t v11 = v9 + v8;
  unint64_t v12 = (v10 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v13 = (v11 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v14 = *(void *)v13;
  *(unsigned char *)(v12 + 8) = *(unsigned char *)(v13 + 8);
  *(void *)unint64_t v12 = v14;
  unint64_t v15 = (v10 + 23) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v16 = (v11 + 23) & 0xFFFFFFFFFFFFFFF8;
  LOBYTE(v14) = *(unsigned char *)(v16 + 8);
  *(void *)unint64_t v15 = *(void *)v16;
  *(unsigned char *)(v15 + 8) = v14;
  unint64_t v17 = (v10 + 39) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v18 = (v11 + 39) & 0xFFFFFFFFFFFFFFF8;
  LOBYTE(v14) = *(unsigned char *)(v18 + 8);
  *(void *)unint64_t v17 = *(void *)v18;
  *(unsigned char *)(v17 + 8) = v14;
  *(_OWORD *)((v10 + 55) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)((v11 + 55) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

unsigned char *assignWithTake for SearchScopeToolbarContent(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v5 = v4 + 40;
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v7 = (unint64_t)&a1[v6 + 1] & ~v6;
  uint64_t v8 = (unint64_t)&a2[v6 + 1] & ~v6;
  (*(void (**)(uint64_t, uint64_t))(v4 + 40))(v7, v8);
  uint64_t v9 = *(void *)(v5 + 24);
  uint64_t v10 = v9 + v7;
  uint64_t v11 = v9 + v8;
  unint64_t v12 = (v10 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v13 = (v11 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v14 = *(void *)v13;
  LOBYTE(v13) = *(unsigned char *)(v13 + 8);
  uint64_t v15 = *(void *)v12;
  char v16 = *(unsigned char *)(v12 + 8);
  *(void *)unint64_t v12 = v14;
  *(unsigned char *)(v12 + 8) = v13;
  outlined consume of Environment<Bool>.Content(v15, v16);
  unint64_t v17 = (v10 + 23) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v18 = (v11 + 23) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v19 = *(void *)v18;
  LOBYTE(v18) = *(unsigned char *)(v18 + 8);
  uint64_t v20 = *(void *)v17;
  char v21 = *(unsigned char *)(v17 + 8);
  *(void *)unint64_t v17 = v19;
  *(unsigned char *)(v17 + 8) = v18;
  outlined consume of Environment<Bool>.Content(v20, v21);
  unint64_t v22 = (v10 + 39) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v23 = (v11 + 39) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v24 = *(void *)v23;
  LOBYTE(v23) = *(unsigned char *)(v23 + 8);
  uint64_t v25 = *(void *)v22;
  char v26 = *(unsigned char *)(v22 + 8);
  *(void *)unint64_t v22 = v24;
  *(unsigned char *)(v22 + 8) = v23;
  outlined consume of Environment<Bool>.Content(v25, v26);
  unint64_t v27 = (v10 + 55) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v28 = (v11 + 55) & 0xFFFFFFFFFFFFFFF8;
  *(unsigned char *)unint64_t v27 = *(unsigned char *)v28;
  *(void *)(v27 + 8) = *(void *)(v28 + 8);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for SearchScopeToolbarContent(_DWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  if (v5 <= 0x7FFFFFFE) {
    unsigned int v7 = 2147483646;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  uint64_t v8 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) + 55;
  if (v7 < a2)
  {
    unint64_t v9 = ((v8 + ((v6 + 1) & ~v6)) & 0xFFFFFFFFFFFFFFF8) + 16;
    unsigned int v10 = a2 - v7;
    uint64_t v11 = v9 & 0xFFFFFFF8;
    if ((v9 & 0xFFFFFFF8) != 0) {
      unsigned int v12 = 2;
    }
    else {
      unsigned int v12 = v10 + 1;
    }
    if (v12 >= 0x10000) {
      unsigned int v13 = 4;
    }
    else {
      unsigned int v13 = 2;
    }
    if (v12 < 0x100) {
      unsigned int v13 = 1;
    }
    if (v12 >= 2) {
      uint64_t v14 = v13;
    }
    else {
      uint64_t v14 = 0;
    }
    switch(v14)
    {
      case 1:
        int v15 = *((unsigned __int8 *)a1 + v9);
        if (!v15) {
          break;
        }
        goto LABEL_22;
      case 2:
        int v15 = *(unsigned __int16 *)((char *)a1 + v9);
        if (v15) {
          goto LABEL_22;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x187B8E760);
      case 4:
        int v15 = *(_DWORD *)((char *)a1 + v9);
        if (!v15) {
          break;
        }
LABEL_22:
        int v17 = v15 - 1;
        if (v11)
        {
          int v17 = 0;
          LODWORD(v11) = *a1;
        }
        return v7 + (v11 | v17) + 1;
      default:
        break;
    }
  }
  uint64_t v18 = ((unint64_t)a1 + v6 + 1) & ~v6;
  if (v5 >= 0x7FFFFFFE) {
    return (*(uint64_t (**)(uint64_t))(v4 + 48))(v18);
  }
  unint64_t v19 = *(void *)(((v8 + v18) & 0xFFFFFFFFFFFFFFF8) + 8);
  if (v19 >= 0xFFFFFFFF) {
    LODWORD(v19) = -1;
  }
  int v20 = v19 - 1;
  if (v20 < 0) {
    int v20 = -1;
  }
  return (v20 + 1);
}

void storeEnumTagSinglePayload for SearchScopeToolbarContent(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFE) {
    unsigned int v8 = 2147483646;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v10 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64) + 55;
  unint64_t v11 = ((v10 + ((v9 + 1) & ~v9)) & 0xFFFFFFFFFFFFFFF8) + 16;
  if (v8 >= a3)
  {
    int v15 = 0;
    int v16 = a2 - v8;
    if (a2 <= v8)
    {
LABEL_17:
      switch(v15)
      {
        case 1:
          a1[v11] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_30;
        case 2:
          *(_WORD *)&a1[v11] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_30;
        case 3:
          goto LABEL_42;
        case 4:
          *(_DWORD *)&a1[v11] = 0;
          goto LABEL_29;
        default:
LABEL_29:
          if (a2)
          {
LABEL_30:
            unint64_t v19 = (unint64_t)&a1[v9 + 1] & ~v9;
            if (v7 < 0x7FFFFFFE)
            {
              char v21 = (void *)((v10 + v19) & 0xFFFFFFFFFFFFFFF8);
              if (a2 > 0x7FFFFFFE)
              {
                *char v21 = a2 - 0x7FFFFFFF;
                v21[1] = 0;
              }
              else
              {
                v21[1] = a2;
              }
            }
            else
            {
              int v20 = *(void (**)(unint64_t))(v6 + 56);
              v20(v19);
            }
          }
          break;
      }
      return;
    }
  }
  else
  {
    unsigned int v12 = a3 - v8;
    if (((v10 + ((v9 + 1) & ~v9)) & 0xFFFFFFF8) == 0xFFFFFFF0) {
      unsigned int v13 = v12 + 1;
    }
    else {
      unsigned int v13 = 2;
    }
    if (v13 >= 0x10000) {
      int v14 = 4;
    }
    else {
      int v14 = 2;
    }
    if (v13 < 0x100) {
      int v14 = 1;
    }
    if (v13 >= 2) {
      int v15 = v14;
    }
    else {
      int v15 = 0;
    }
    int v16 = a2 - v8;
    if (a2 <= v8) {
      goto LABEL_17;
    }
  }
  if (((v10 + ((v9 + 1) & ~v9)) & 0xFFFFFFF8) == 0xFFFFFFF0) {
    int v17 = v16;
  }
  else {
    int v17 = 1;
  }
  if (((v10 + ((v9 + 1) & ~v9)) & 0xFFFFFFF8) != 0xFFFFFFF0)
  {
    unsigned int v18 = ~v8 + a2;
    bzero(a1, ((v10 + ((v9 + 1) & ~v9)) & 0xFFFFFFFFFFFFFFF8) + 16);
    *(_DWORD *)a1 = v18;
  }
  switch(v15)
  {
    case 1:
      a1[v11] = v17;
      break;
    case 2:
      *(_WORD *)&a1[v11] = v17;
      break;
    case 3:
LABEL_42:
      __break(1u);
      JUMPOUT(0x187B8E980);
    case 4:
      *(_DWORD *)&a1[v11] = v17;
      break;
    default:
      return;
  }
}

uint64_t associated type witness table accessor for ToolbarContent.Body : ToolbarContent in SearchScopeToolbarContent<A>()
{
  return swift_getOpaqueTypeConformance2();
}

double protocol witness for Rule.value.getter in conformance SearchToolbarItem.ChildEnvironment@<D0>(_OWORD *a1@<X8>)
{
  return SearchToolbarItem.ChildEnvironment.value.getter(a1);
}

uint64_t protocol witness for Rule.value.getter in conformance SearchToolbarItem.SearchTransform@<X0>(uint64_t (**a1)(uint64_t a1)@<X8>)
{
  uint64_t v3 = SearchToolbarItem.SearchTransform.value.getter(*v1);
  uint64_t v5 = v4;
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = v3;
  *(void *)(result + 24) = v5;
  *a1 = partial apply for thunk for @escaping @callee_guaranteed (@inout AccessibilityLargeContentViewTree) -> ();
  a1[1] = (uint64_t (*)(uint64_t))result;
  return result;
}

uint64_t sub_187B8EA58()
{
  uint64_t v1 = type metadata accessor for SearchFieldConfiguration(0);
  unint64_t v2 = (*(unsigned __int8 *)(*(void *)(v1 - 8) + 80) + 17) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v1 - 8) + 80);
  unint64_t v3 = (((((*(void *)(*(void *)(v1 - 8) + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v4 = v0 + v2;
  swift_release();
  swift_release();
  _s7SwiftUI7BindingVyAA16SearchFieldStateVGMaTm_2(0, &lazy cache variable for type metadata for Binding<SearchFieldState>, type metadata accessor for SearchFieldState, MEMORY[0x1E4F41638]);
  uint64_t v6 = *(int *)(v5 + 32);
  uint64_t v7 = v4 + v6 + *(int *)(type metadata accessor for SearchFieldState(0) + 36);
  uint64_t v8 = type metadata accessor for AttributedString();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8))(v7, v8);
  uint64_t v9 = v4 + *(int *)(v1 + 24);
  int v10 = *(unsigned __int8 *)(v9 + 8);
  if (v10 != 255) {
    outlined consume of PlatformItemCollection.Storage(*(void *)v9, v10 & 1);
  }
  outlined consume of Text.Storage(*(void *)(v4 + *(int *)(v1 + 32)), *(void *)(v4 + *(int *)(v1 + 32) + 8), *(unsigned char *)(v4 + *(int *)(v1 + 32) + 16));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  if (*(void *)(v0 + v3))
  {

    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
  }
  unint64_t v11 = (v3 + 191) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v12 = v0 + ((v3 + 95) & 0xFFFFFFFFFFFFFFF8);
  if (*(void *)v12)
  {

    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
  }
  if (*(void *)(v0 + v11))
  {

    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
  }

  return swift_deallocObject();
}

uint64_t sub_187B8ECB0()
{
  swift_release();

  return swift_deallocObject();
}

void *type metadata accessor for SearchToolbarItem.SearchTransform()
{
  return &unk_1ED424C80;
}

void *type metadata accessor for SearchToolbarItem.ChildEnvironment()
{
  return &unk_1ED424D00;
}

_UNKNOWN **sub_187B8ED08()
{
  return &protocol witness table for TupleToolbarContent<A>;
}

uint64_t *MainMenuItemHost.init(_:environment:focusedValues:focusStore:)(uint64_t a1, unint64_t *a2, uint64_t a3, int *a4)
{
  uint64_t v5 = v4;
  uint64_t v41 = *v5;
  uint64_t v34 = type metadata accessor for MainMenuItemHost.RootView(0);
  MEMORY[0x1F4188790](v34);
  uint64_t v39 = (uint64_t)&v33 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v12 = *a2;
  unint64_t v11 = a2[1];
  unint64_t v13 = *(void *)a3;
  int v14 = *(unsigned __int8 *)(a3 + 8);
  int v36 = *(_DWORD *)(a3 + 12);
  int v15 = v36;
  int v37 = v14;
  int v40 = *a4;
  LODWORD(a2) = v40;
  unint64_t v17 = *((void *)a4 + 1);
  uint64_t v16 = *((void *)a4 + 2);
  *((_WORD *)v5 + 12) = 0;
  *((unsigned char *)v5 + 26) = 0;
  v5[4] = 0;
  v5[5] = 0;
  *(uint64_t *)((char *)v5 + OBJC_IVAR____TtC7SwiftUI16MainMenuItemHost_delegate + 8) = 0;
  swift_unknownObjectUnownedInit();
  v35 = type metadata accessor for MainMenuItem;
  outlined init with copy of MainMenuItem(a1, (uint64_t)v5 + OBJC_IVAR____TtC7SwiftUI16MainMenuItemHost_mainMenuItem, type metadata accessor for MainMenuItem);
  unsigned int v18 = (unint64_t *)((char *)v5 + OBJC_IVAR____TtC7SwiftUI16MainMenuItemHost_environment);
  *unsigned int v18 = v12;
  v18[1] = v11;
  uint64_t v19 = (uint64_t)v5 + OBJC_IVAR____TtC7SwiftUI16MainMenuItemHost_focusedValues;
  *(void *)uint64_t v19 = v13;
  *(unsigned char *)(v19 + 8) = v14;
  *(_DWORD *)(v19 + 12) = v15;
  uint64_t v20 = (uint64_t)v5 + OBJC_IVAR____TtC7SwiftUI16MainMenuItemHost_focusStore;
  *(_DWORD *)uint64_t v20 = a2;
  unint64_t v38 = v17;
  *(void *)(v20 + 8) = v17;
  *(void *)(v20 + 16) = v16;
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  unint64_t v21 = v12;
  swift_retain();
  unint64_t v22 = v11;
  uint64_t v23 = swift_retain();
  MEMORY[0x18C113CA0](v23);
  char v24 = byte_1ED41DF61;
  if ((byte_1ED41DF61 & ~byte_1ED41DF60) == 0) {
    char v24 = 0;
  }
  LOBYTE(v42) = v24 | byte_1ED41DF60;
  type metadata accessor for ViewGraph();
  swift_allocObject();
  lazy protocol witness table accessor for type MainMenuItemHost and conformance MainMenuItemHost(&lazy protocol witness table cache variable for type MainMenuItemHost.RootView and conformance MainMenuItemHost.RootView, (void (*)(uint64_t))type metadata accessor for MainMenuItemHost.RootView);
  v5[2] = ViewGraph.init<A>(rootViewType:requestedOutputs:)();
  uint64_t v25 = swift_retain();
  unint64_t v42 = specialized FocusViewGraph.init(graph:)(v25);
  unint64_t v43 = v26;
  uint64_t v44 = v27;
  char v45 = v28 & 1;
  char v46 = v29 & 1;
  char v47 = v30 & 1;
  lazy protocol witness table accessor for type FocusViewGraph and conformance FocusViewGraph();
  ViewGraph.append<A>(feature:)();
  lazy protocol witness table accessor for type PlatformItemListViewGraph and conformance PlatformItemListViewGraph();
  unint64_t v42 = 0;
  LOWORD(v43) = 0;
  ViewGraph.append<A>(feature:)();
  lazy protocol witness table accessor for type MainMenuItemViewGraph and conformance MainMenuItemViewGraph();
  ViewGraph.append<A>(feature:)();
  uint64_t v31 = v39;
  outlined init with copy of MainMenuItem(a1, v39, v35);
  ViewGraph.setRootView<A>(_:)();
  outlined destroy of MainMenuItemHost.RootView(v31, type metadata accessor for MainMenuItemHost.RootView);
  unint64_t v42 = v21;
  unint64_t v43 = v22;
  GraphHost.setEnvironment(_:)();
  swift_release();
  swift_release();
  unint64_t v42 = v13;
  LOBYTE(v43) = v37;
  HIDWORD(v43) = v36;
  ViewGraph.setFocusedValues(_:)();
  swift_release();
  LODWORD(v42) = v40;
  unint64_t v43 = v38;
  uint64_t v44 = v16;
  ViewGraph.setFocusStore(_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  lazy protocol witness table accessor for type MainMenuItemHost and conformance MainMenuItemHost((unint64_t *)&lazy protocol witness table cache variable for type MainMenuItemHost and conformance MainMenuItemHost, (void (*)(uint64_t))type metadata accessor for MainMenuItemHost);
  ViewRendererHost.initializeViewGraph()();
  static Update.end()();
  outlined destroy of MainMenuItemHost.RootView(a1, type metadata accessor for MainMenuItem);
  return v5;
}

BOOL closure #1 in MainMenuItemHost.requestUpdate(after:)()
{
  uint64_t Strong = swift_unknownObjectUnownedLoadStrong();
  if (Strong)
  {
    *(unsigned char *)(Strong + 72) = 1;
    MainMenuItemCoordinator.updateIfNeeded()();
    swift_unknownObjectRelease();
  }
  return GraphHost.updatePreferences()();
}

Swift::Void __swiftcall MainMenuItemHost.updateFocusedValues()()
{
  uint64_t v1 = *(void *)(v0 + 16);
  swift_beginAccess();
  if ((*(unsigned char *)(v1 + 361) & 0x20) != 0)
  {
    lazy protocol witness table accessor for type FocusViewGraph and conformance FocusViewGraph();
    swift_retain();
    uint64_t v2 = ViewGraph.subscript.getter();
    if (v2
      && *(_DWORD *)(v2 + 4) != *MEMORY[0x1E4F4E7A0]
      && (AGGraphSetValue() & 1) != 0
      && (swift_beginAccess(), MEMORY[0x18C119DF0](v1 + 200)))
    {
      uint64_t v3 = *(void *)(v1 + 208);
      uint64_t ObjectType = swift_getObjectType();
      (*(void (**)(uint64_t))(*(void *)(v3 + 8) + 16))(ObjectType);
      swift_release();
      swift_unknownObjectRelease();
    }
    else
    {
      swift_release();
    }
  }
}

Swift::Void __swiftcall MainMenuItemHost.updateFocusStore()()
{
  uint64_t v1 = *(void *)(v0 + 16);
  swift_beginAccess();
  if ((*(unsigned char *)(v1 + 361) & 0x20) != 0)
  {
    lazy protocol witness table accessor for type FocusViewGraph and conformance FocusViewGraph();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v2 = ViewGraph.subscript.getter();
    if (v2
      && *(_DWORD *)(v2 + 8) != *MEMORY[0x1E4F4E7A0]
      && (AGGraphSetValue() & 1) != 0
      && (swift_beginAccess(), MEMORY[0x18C119DF0](v1 + 200)))
    {
      uint64_t v3 = *(void *)(v1 + 208);
      uint64_t ObjectType = swift_getObjectType();
      (*(void (**)(uint64_t))(*(void *)(v3 + 8) + 16))(ObjectType);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_unknownObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
  }
}

uint64_t MainMenuItemHost.__deallocating_deinit()
{
  swift_release();
  outlined destroy of MainMenuItemHost.RootView(v0 + OBJC_IVAR____TtC7SwiftUI16MainMenuItemHost_mainMenuItem, type metadata accessor for MainMenuItem);
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined destroy of unowned MainMenuItemHostDelegate?(v0 + OBJC_IVAR____TtC7SwiftUI16MainMenuItemHost_delegate);

  return swift_deallocClassInstance();
}

uint64_t ObjC metadata update function for MainMenuItemHost()
{
  return type metadata accessor for MainMenuItemHost(0);
}

uint64_t type metadata accessor for MainMenuItemHost(uint64_t a1)
{
  return type metadata accessor for SortableTableHeaderButton(a1, (uint64_t *)&type metadata singleton initialization cache for MainMenuItemHost);
}

uint64_t type metadata completion function for MainMenuItemHost()
{
  uint64_t result = type metadata accessor for MainMenuItem(319);
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t protocol witness for ViewRendererHost.updateRootView() in conformance MainMenuItemHost()
{
  uint64_t v1 = type metadata accessor for MainMenuItemHost.RootView(0);
  MEMORY[0x1F4188790](v1);
  uint64_t v3 = (char *)&v6 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = v0 + OBJC_IVAR____TtC7SwiftUI16MainMenuItemHost_mainMenuItem;
  swift_beginAccess();
  outlined init with copy of MainMenuItem(v4, (uint64_t)v3, type metadata accessor for MainMenuItem);
  lazy protocol witness table accessor for type MainMenuItemHost and conformance MainMenuItemHost(&lazy protocol witness table cache variable for type MainMenuItemHost.RootView and conformance MainMenuItemHost.RootView, (void (*)(uint64_t))type metadata accessor for MainMenuItemHost.RootView);
  ViewGraph.setRootView<A>(_:)();
  return outlined destroy of MainMenuItemHost.RootView((uint64_t)v3, type metadata accessor for MainMenuItemHost.RootView);
}

uint64_t protocol witness for ViewRendererHost.updateEnvironment() in conformance MainMenuItemHost()
{
  swift_retain();
  swift_retain();
  GraphHost.setEnvironment(_:)();
  swift_release();

  return swift_release();
}

uint64_t protocol witness for ViewGraphDelegate.updateViewGraph<A>(body:) in conformance MainMenuItemHost(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return protocol witness for ViewGraphDelegate.updateViewGraph<A>(body:) in conformance MainMenuItemHost(a1, a2, a3, a4, a5, (unint64_t *)&lazy protocol witness table cache variable for type MainMenuItemHost and conformance MainMenuItemHost, (uint64_t)&protocol conformance descriptor for MainMenuItemHost, MEMORY[0x1E4F3FE08]);
}

uint64_t protocol witness for ViewGraphDelegate.requestUpdate(after:) in conformance MainMenuItemHost()
{
  lazy protocol witness table accessor for type MainMenuItemHost and conformance MainMenuItemHost((unint64_t *)&lazy protocol witness table cache variable for type MainMenuItemHost and conformance MainMenuItemHost, (void (*)(uint64_t))type metadata accessor for MainMenuItemHost);

  return ViewRendererHost.updateViewGraph<A>(body:)();
}

uint64_t protocol witness for GraphDelegate.updateGraph<A>(body:) in conformance MainMenuItemHost(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return protocol witness for ViewGraphDelegate.updateViewGraph<A>(body:) in conformance MainMenuItemHost(a1, a2, a3, a4, a5, &lazy protocol witness table cache variable for type MainMenuItemHost and conformance MainMenuItemHost, (uint64_t)&protocol conformance descriptor for MainMenuItemHost, MEMORY[0x1E4F401C0]);
}

uint64_t protocol witness for ViewGraphDelegate.updateViewGraph<A>(body:) in conformance MainMenuItemHost(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t *a6, uint64_t a7, uint64_t (*a8)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v12 = *v8;
  uint64_t v13 = lazy protocol witness table accessor for type MainMenuItemHost and conformance MainMenuItemHost(a6, (void (*)(uint64_t))type metadata accessor for MainMenuItemHost);

  return a8(a1, a2, v12, a3, v13);
}

void protocol witness for GraphDelegate.graphDidChange() in conformance MainMenuItemHost()
{
  lazy protocol witness table accessor for type MainMenuItemHost and conformance MainMenuItemHost((unint64_t *)&lazy protocol witness table cache variable for type MainMenuItemHost and conformance MainMenuItemHost, (void (*)(uint64_t))type metadata accessor for MainMenuItemHost);

  ViewRendererHost.graphDidChange()();
}

uint64_t base witness table accessor for GraphDelegate in MainMenuItemHost()
{
  return lazy protocol witness table accessor for type MainMenuItemHost and conformance MainMenuItemHost(&lazy protocol witness table cache variable for type MainMenuItemHost and conformance MainMenuItemHost, (void (*)(uint64_t))type metadata accessor for MainMenuItemHost);
}

uint64_t base witness table accessor for ViewGraphDelegate in MainMenuItemHost()
{
  return lazy protocol witness table accessor for type MainMenuItemHost and conformance MainMenuItemHost(&lazy protocol witness table cache variable for type MainMenuItemHost and conformance MainMenuItemHost, (void (*)(uint64_t))type metadata accessor for MainMenuItemHost);
}

uint64_t type metadata accessor for MainMenuItemHost.RootView(uint64_t a1)
{
  return type metadata accessor for SortableTableHeaderButton(a1, (uint64_t *)&type metadata singleton initialization cache for MainMenuItemHost.RootView);
}

BOOL partial apply for closure #1 in MainMenuItemHost.requestUpdate(after:)()
{
  return closure #1 in MainMenuItemHost.requestUpdate(after:)();
}

uint64_t protocol witness for ViewGraphFeature.modifyViewInputs(inputs:graph:) in conformance MainMenuItemViewGraph(uint64_t a1)
{
  *(_DWORD *)(a1 + 36) |= 1u;
  return _GraphInputs.pushStyleContext<A>(_:)();
}

uint64_t closure #1 in MainMenuItemHost.RootView.body.getter(unint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for MainMenuItemHost.RootView(0);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)&v64 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v7);
  uint64_t v84 = (uint64_t)&v64 - v8;
  MEMORY[0x1F4188790](v9);
  uint64_t v81 = (uint64_t)&v64 - v10;
  MEMORY[0x1F4188790](v11);
  uint64_t v77 = (uint64_t)&v64 - v12;
  MEMORY[0x1F4188790](v13);
  uint64_t v73 = (uint64_t)&v64 - v14;
  MEMORY[0x1F4188790](v15);
  uint64_t v72 = (uint64_t)&v64 - v16;
  MEMORY[0x1F4188790](v17);
  uint64_t v68 = (uint64_t)&v64 - v18;
  outlined init with copy of MainMenuItem(a2, (uint64_t)&v64 - v18, type metadata accessor for MainMenuItemHost.RootView);
  uint64_t v19 = *(void **)a1;
  uint64_t v65 = *(void *)(*(void *)a1 + 16);
  if (!v65) {
    return outlined destroy of MainMenuItemHost.RootView(v68, type metadata accessor for MainMenuItemHost.RootView);
  }
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
LABEL_75:
  }
    uint64_t v19 = (void *)specialized _ArrayBuffer._consumeAndCreateNew()(v19);
  unint64_t v20 = 0;
  v64 = (void **)a1;
  while (1)
  {
    *(void *)a1 = v19;
    if (v20 >= v19[2])
    {
LABEL_72:
      __break(1u);
LABEL_73:
      __break(1u);
LABEL_74:
      __break(1u);
      goto LABEL_75;
    }
    unint64_t v74 = v20;
    uint64_t v22 = type metadata accessor for PlatformItemList.Item();
    uint64_t v23 = *(void *)(v22 - 8);
    unint64_t v21 = v74;
    unint64_t v86 = (*(unsigned __int8 *)(v23 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v23 + 80);
    uint64_t v24 = *(void *)(v23 + 72);
    uint64_t v25 = (char *)v19 + v86 + v24 * v74;
    uint64_t v85 = v22;
    v25[*(int *)(v22 + 116)] = 1;
    if (*((void *)v25 + 77)) {
      break;
    }
LABEL_5:
    unint64_t v20 = v21 + 1;
    a1 = (unint64_t)v64;
    uint64_t v19 = *v64;
    if (v20 == v65) {
      return outlined destroy of MainMenuItemHost.RootView(v68, type metadata accessor for MainMenuItemHost.RootView);
    }
  }
  outlined init with copy of MainMenuItem(v68, v72, type metadata accessor for MainMenuItemHost.RootView);
  v70 = v25;
  unint64_t v26 = (void *)*((void *)v25 + 77);
  uint64_t v66 = v26[2];
  if (!v66)
  {
LABEL_4:
    outlined destroy of MainMenuItemHost.RootView(v72, type metadata accessor for MainMenuItemHost.RootView);
    unint64_t v21 = v74;
    goto LABEL_5;
  }
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v70[77] = v26;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    uint64_t v62 = specialized _ArrayBuffer._consumeAndCreateNew()(v26);
    v70[77] = v62;
  }
  unint64_t v28 = 0;
  while (1)
  {
    unint64_t v75 = v28;
    a1 = (unint64_t)v70;
    uint64_t v19 = (void *)v70[77];
    char v30 = swift_isUniquelyReferenced_nonNull_native();
    *(void *)(a1 + 616) = v19;
    if ((v30 & 1) == 0)
    {
      uint64_t v19 = (void *)specialized _ArrayBuffer._consumeAndCreateNew()(v19);
      v70[77] = v19;
    }
    unint64_t v29 = v75;
    if (v75 >= v19[2]) {
      goto LABEL_73;
    }
    uint64_t v31 = (char *)v19 + v86 + v75 * v24;
    v31[*(int *)(v85 + 116)] = 1;
    if (*((void *)v31 + 77)) {
      break;
    }
LABEL_13:
    unint64_t v28 = v29 + 1;
    if (v28 == v66) {
      goto LABEL_4;
    }
  }
  outlined init with copy of MainMenuItem(v72, v73, type metadata accessor for MainMenuItemHost.RootView);
  v71 = v31;
  v32 = (void *)*((void *)v31 + 77);
  uint64_t v67 = v32[2];
  if (!v67)
  {
LABEL_12:
    outlined destroy of MainMenuItemHost.RootView(v73, type metadata accessor for MainMenuItemHost.RootView);
    unint64_t v29 = v75;
    goto LABEL_13;
  }
  char v33 = swift_isUniquelyReferenced_nonNull_native();
  v71[77] = v32;
  if ((v33 & 1) == 0)
  {
    uint64_t v61 = specialized _ArrayBuffer._consumeAndCreateNew()(v32);
    v71[77] = v61;
  }
  unint64_t v34 = 0;
  while (1)
  {
    unint64_t v76 = v34;
    a1 = (unint64_t)v71;
    uint64_t v19 = (void *)v71[77];
    char v36 = swift_isUniquelyReferenced_nonNull_native();
    *(void *)(a1 + 616) = v19;
    if ((v36 & 1) == 0)
    {
      uint64_t v19 = (void *)specialized _ArrayBuffer._consumeAndCreateNew()(v19);
      v71[77] = v19;
    }
    unint64_t v35 = v76;
    if (v76 >= v19[2]) {
      goto LABEL_74;
    }
    int v37 = (char *)v19 + v86 + v76 * v24;
    v37[*(int *)(v85 + 116)] = 1;
    if (*((void *)v37 + 77)) {
      break;
    }
LABEL_23:
    unint64_t v34 = v35 + 1;
    if (v34 == v67) {
      goto LABEL_12;
    }
  }
  outlined init with copy of MainMenuItem(v73, v77, type metadata accessor for MainMenuItemHost.RootView);
  v78 = v37;
  unint64_t v38 = (void *)*((void *)v37 + 77);
  uint64_t v69 = v38[2];
  if (!v69)
  {
LABEL_22:
    outlined destroy of MainMenuItemHost.RootView(v77, type metadata accessor for MainMenuItemHost.RootView);
    unint64_t v35 = v76;
    goto LABEL_23;
  }
  char v39 = swift_isUniquelyReferenced_nonNull_native();
  v78[77] = v38;
  if ((v39 & 1) == 0)
  {
    uint64_t v60 = specialized _ArrayBuffer._consumeAndCreateNew()(v38);
    v78[77] = v60;
  }
  unint64_t v40 = 0;
  while (1)
  {
    unint64_t v79 = v40;
    a1 = (unint64_t)v78;
    uint64_t v19 = (void *)v78[77];
    char v42 = swift_isUniquelyReferenced_nonNull_native();
    *(void *)(a1 + 616) = v19;
    if ((v42 & 1) == 0)
    {
      uint64_t v19 = (void *)specialized _ArrayBuffer._consumeAndCreateNew()(v19);
      v78[77] = v19;
    }
    unint64_t v41 = v79;
    if (v79 >= v19[2])
    {
LABEL_71:
      __break(1u);
      goto LABEL_72;
    }
    a1 = (unint64_t)v19 + v86 + v79 * v24;
    *(unsigned char *)(a1 + *(int *)(v85 + 116)) = 1;
    if (*(void *)(a1 + 616)) {
      break;
    }
LABEL_33:
    unint64_t v40 = v41 + 1;
    if (v40 == v69) {
      goto LABEL_22;
    }
  }
  outlined init with copy of MainMenuItem(v77, v81, type metadata accessor for MainMenuItemHost.RootView);
  unint64_t v43 = *(void **)(a1 + 616);
  uint64_t v82 = v43[2];
  if (!v82)
  {
LABEL_32:
    outlined destroy of MainMenuItemHost.RootView(v81, type metadata accessor for MainMenuItemHost.RootView);
    unint64_t v41 = v79;
    goto LABEL_33;
  }
  char v44 = swift_isUniquelyReferenced_nonNull_native();
  *(void *)(a1 + 616) = v43;
  if ((v44 & 1) == 0) {
    *(void *)(a1 + 616) = specialized _ArrayBuffer._consumeAndCreateNew()(v43);
  }
  unint64_t v45 = 0;
  v80 = (void *)a1;
  while (1)
  {
    uint64_t v19 = *(void **)(a1 + 616);
    char v46 = swift_isUniquelyReferenced_nonNull_native();
    *(void *)(a1 + 616) = v19;
    if ((v46 & 1) == 0)
    {
      uint64_t v19 = (void *)specialized _ArrayBuffer._consumeAndCreateNew()(v19);
      *(void *)(a1 + 616) = v19;
    }
    if (v45 >= v19[2])
    {
LABEL_70:
      __break(1u);
      goto LABEL_71;
    }
    char v47 = (char *)v19 + v86 + v45 * v24;
    v47[*(int *)(v85 + 116)] = 1;
    if (*((void *)v47 + 77)) {
      break;
    }
LABEL_43:
    if (++v45 == v82) {
      goto LABEL_32;
    }
  }
  unint64_t v83 = v45;
  outlined init with copy of MainMenuItem(v81, v84, type metadata accessor for MainMenuItemHost.RootView);
  v48 = (void *)*((void *)v47 + 77);
  v49 = (void *)v48[2];
  if (!v49)
  {
LABEL_42:
    outlined destroy of MainMenuItemHost.RootView(v84, type metadata accessor for MainMenuItemHost.RootView);
    a1 = (unint64_t)v80;
    unint64_t v45 = v83;
    goto LABEL_43;
  }
  char v50 = swift_isUniquelyReferenced_nonNull_native();
  *((void *)v47 + 77) = v48;
  if ((v50 & 1) == 0) {
    *((void *)v47 + 77) = specialized _ArrayBuffer._consumeAndCreateNew()(v48);
  }
  a1 = 0;
  while (1)
  {
    uint64_t v19 = (void *)*((void *)v47 + 77);
    char v51 = swift_isUniquelyReferenced_nonNull_native();
    *((void *)v47 + 77) = v19;
    if ((v51 & 1) == 0)
    {
      uint64_t v19 = (void *)specialized _ArrayBuffer._consumeAndCreateNew()(v19);
      *((void *)v47 + 77) = v19;
    }
    if (a1 >= v19[2])
    {
      __break(1u);
      goto LABEL_70;
    }
    v52 = (char *)v19 + v86 + a1 * v24;
    v52[*(int *)(v85 + 116)] = 1;
    if (*((void *)v52 + 77)) {
      break;
    }
LABEL_53:
    if ((void *)++a1 == v49) {
      goto LABEL_42;
    }
  }
  outlined init with copy of MainMenuItem(v84, (uint64_t)v6, type metadata accessor for MainMenuItemHost.RootView);
  v53 = (void *)*((void *)v52 + 77);
  uint64_t v54 = v53[2];
  if (!v54)
  {
LABEL_52:
    outlined destroy of MainMenuItemHost.RootView((uint64_t)v6, type metadata accessor for MainMenuItemHost.RootView);
    goto LABEL_53;
  }
  char v55 = swift_isUniquelyReferenced_nonNull_native();
  *((void *)v52 + 77) = v53;
  if ((v55 & 1) == 0) {
    *((void *)v52 + 77) = specialized _ArrayBuffer._consumeAndCreateNew()(v53);
  }
  unint64_t v56 = 0;
  unint64_t v57 = v86;
  while (1)
  {
    v58 = (void *)*((void *)v52 + 77);
    char v59 = swift_isUniquelyReferenced_nonNull_native();
    *((void *)v52 + 77) = v58;
    if ((v59 & 1) == 0)
    {
      v58 = (void *)specialized _ArrayBuffer._consumeAndCreateNew()(v58);
      *((void *)v52 + 77) = v58;
    }
    if (v56 >= v58[2]) {
      break;
    }
    ++v56;
    MainMenuItemHost.RootView.applyScaleDownMenuItem(_:)((uint64_t)v58 + v57);
    v57 += v24;
    if (v54 == v56) {
      goto LABEL_52;
    }
  }
  __break(1u);
  return outlined destroy of MainMenuItemHost.RootView(v68, type metadata accessor for MainMenuItemHost.RootView);
}

unint64_t lazy protocol witness table accessor for type MainMenuItemViewGraph and conformance MainMenuItemViewGraph()
{
  unint64_t result = lazy protocol witness table cache variable for type MainMenuItemViewGraph and conformance MainMenuItemViewGraph;
  if (!lazy protocol witness table cache variable for type MainMenuItemViewGraph and conformance MainMenuItemViewGraph)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MainMenuItemViewGraph and conformance MainMenuItemViewGraph);
  }
  return result;
}

uint64_t outlined destroy of unowned MainMenuItemHostDelegate?(uint64_t a1)
{
  return a1;
}

void *type metadata accessor for MainMenuItemViewGraph()
{
  return &unk_1ED482448;
}

uint64_t *initializeBufferWithCopyOfBuffer for MainMenuItemHost.RootView(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = type metadata accessor for MainMenuItem(0);
  int v5 = *(_DWORD *)(*(void *)(v4 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v15 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = v4;
    uint64_t v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    uint64_t v8 = *(int *)(v4 + 20);
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = type metadata accessor for UUID();
    uint64_t v12 = *(void *)(v11 - 8);
    uint64_t v13 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48);
    swift_bridgeObjectRetain();
    if (v13(v10, 10, v11))
    {
      uint64_t v14 = type metadata accessor for MainMenuItem.Identifier(0);
      memcpy(v9, v10, *(void *)(*(void *)(v14 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v9, v10, v11);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v9, 0, 10, v11);
    }
    *(uint64_t *)((char *)a1 + *(int *)(v6 + 24)) = *(uint64_t *)((char *)a2 + *(int *)(v6 + 24));
    swift_bridgeObjectRetain();
  }
  return a1;
}

void *initializeWithCopy for MainMenuItemHost.RootView(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  uint64_t v5 = type metadata accessor for MainMenuItem(0);
  uint64_t v6 = *(int *)(v5 + 20);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UUID();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48);
  swift_bridgeObjectRetain();
  if (v11(v8, 10, v9))
  {
    uint64_t v12 = type metadata accessor for MainMenuItem.Identifier(0);
    memcpy(v7, v8, *(void *)(*(void *)(v12 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v7, v8, v9);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 10, v9);
  }
  *(void *)((char *)a1 + *(int *)(v5 + 24)) = *(void *)((char *)a2 + *(int *)(v5 + 24));
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for MainMenuItemHost.RootView(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = type metadata accessor for MainMenuItem(0);
  uint64_t v5 = *(int *)(v4 + 20);
  uint64_t v6 = (char *)a1 + v5;
  uint64_t v7 = (char *)a2 + v5;
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 48);
  int v11 = v10(v6, 10, v8);
  int v12 = v10(v7, 10, v8);
  if (!v11)
  {
    if (!v12)
    {
      (*(void (**)(char *, char *, uint64_t))(v9 + 24))(v6, v7, v8);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v9 + 8))(v6, v8);
    goto LABEL_6;
  }
  if (v12)
  {
LABEL_6:
    uint64_t v13 = type metadata accessor for MainMenuItem.Identifier(0);
    memcpy(v6, v7, *(void *)(*(void *)(v13 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v9 + 16))(v6, v7, v8);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v9 + 56))(v6, 0, 10, v8);
LABEL_7:
  *(void *)((char *)a1 + *(int *)(v4 + 24)) = *(void *)((char *)a2 + *(int *)(v4 + 24));
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_OWORD *initializeWithTake for MainMenuItemHost.RootView(_OWORD *a1, _OWORD *a2)
{
  *a1 = *a2;
  uint64_t v4 = type metadata accessor for MainMenuItem(0);
  uint64_t v5 = *(int *)(v4 + 20);
  uint64_t v6 = (char *)a1 + v5;
  uint64_t v7 = (char *)a2 + v5;
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(v8 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 10, v8))
  {
    uint64_t v10 = type metadata accessor for MainMenuItem.Identifier(0);
    memcpy(v6, v7, *(void *)(*(void *)(v10 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v6, v7, v8);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v9 + 56))(v6, 0, 10, v8);
  }
  *(void *)((char *)a1 + *(int *)(v4 + 24)) = *(void *)((char *)a2 + *(int *)(v4 + 24));
  return a1;
}

uint64_t getEnumTagSinglePayload for MainMenuItemHost.RootView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_187B909CC);
}

uint64_t sub_187B909CC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for MainMenuItem.Content();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48);

  return v5(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for MainMenuItemHost.RootView(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_187B90A4C);
}

uint64_t sub_187B90A4C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for MainMenuItem.Content();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);

  return v5(a1, a2, a2, v4);
}

uint64_t associated type witness table accessor for View.Body : View in MainMenuItemHost.RootView()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_187B90AD8()
{
  uint64_t v1 = *(void *)(type metadata accessor for MainMenuItemHost.RootView(0) - 8);
  uint64_t v2 = v0 + ((*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80));
  swift_bridgeObjectRelease();
  uint64_t v3 = v2 + *(int *)(type metadata accessor for MainMenuItem(0) + 20);
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(v3, 10, v4)) {
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v3, v4);
  }
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

uint64_t outlined init with take of MainMenuItemHost.RootView(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for MainMenuItemHost.RootView(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t partial apply for closure #1 in MainMenuItemHost.RootView.body.getter(unint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for MainMenuItemHost.RootView(0) - 8);
  uint64_t v4 = v1 + ((*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));

  return closure #1 in MainMenuItemHost.RootView.body.getter(a1, v4);
}

void type metadata accessor for ModifiedContent<MainMenuItem.Content, PlatformItemListTransformModifier<AllPlatformItemListFlags>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<MainMenuItem.Content, PlatformItemListTransformModifier<AllPlatformItemListFlags>>)
  {
    type metadata accessor for MainMenuItem.Content();
    type metadata accessor for PlatformItemListTransformModifier<AllPlatformItemListFlags>();
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<MainMenuItem.Content, PlatformItemListTransformModifier<AllPlatformItemListFlags>>);
    }
  }
}

void type metadata accessor for PlatformItemListTransformModifier<AllPlatformItemListFlags>()
{
  if (!lazy cache variable for type metadata for PlatformItemListTransformModifier<AllPlatformItemListFlags>)
  {
    unint64_t v0 = type metadata accessor for PlatformItemListTransformModifier();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for PlatformItemListTransformModifier<AllPlatformItemListFlags>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<MainMenuItem.Content, PlatformItemListTransformModifier<AllPlatformItemListFlags>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<MainMenuItem.Content, PlatformItemListTransformModifier<AllPlatformItemListFlags>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<MainMenuItem.Content, PlatformItemListTransformModifier<AllPlatformItemListFlags>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<MainMenuItem.Content, PlatformItemListTransformModifier<AllPlatformItemListFlags>>();
    lazy protocol witness table accessor for type MainMenuItemHost and conformance MainMenuItemHost(&lazy protocol witness table cache variable for type MainMenuItem.Content and conformance MainMenuItem.Content, (void (*)(uint64_t))type metadata accessor for MainMenuItem.Content);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<MainMenuItem.Content, PlatformItemListTransformModifier<AllPlatformItemListFlags>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for ViewInputsBinding(_DWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (v5 <= 0x7FFFFFFF) {
    unsigned int v7 = 0x7FFFFFFF;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  if (v7 < a2)
  {
    unint64_t v8 = ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
    unsigned int v9 = a2 - v7;
    uint64_t v10 = v8 & 0xFFFFFFF8;
    if ((v8 & 0xFFFFFFF8) != 0) {
      unsigned int v11 = 2;
    }
    else {
      unsigned int v11 = v9 + 1;
    }
    if (v11 >= 0x10000) {
      unsigned int v12 = 4;
    }
    else {
      unsigned int v12 = 2;
    }
    if (v11 < 0x100) {
      unsigned int v12 = 1;
    }
    if (v11 >= 2) {
      uint64_t v13 = v12;
    }
    else {
      uint64_t v13 = 0;
    }
    switch(v13)
    {
      case 1:
        int v14 = *((unsigned __int8 *)a1 + v8);
        if (!v14) {
          break;
        }
        goto LABEL_22;
      case 2:
        int v14 = *(unsigned __int16 *)((char *)a1 + v8);
        if (v14) {
          goto LABEL_22;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x187B90FC0);
      case 4:
        int v14 = *(_DWORD *)((char *)a1 + v8);
        if (!v14) {
          break;
        }
LABEL_22:
        int v16 = v14 - 1;
        if (v10)
        {
          int v16 = 0;
          LODWORD(v10) = *a1;
        }
        return v7 + (v10 | v16) + 1;
      default:
        break;
    }
  }
  if (v5 >= 0x7FFFFFFF) {
    return (*(uint64_t (**)(void))(v4 + 48))();
  }
  unint64_t v17 = *(void *)(((unint64_t)a1 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
  if (v17 >= 0xFFFFFFFF) {
    LODWORD(v17) = -1;
  }
  return (v17 + 1);
}

void storeEnumTagSinglePayload for ViewInputsBinding(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  unint64_t v10 = ((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
  if (((v9 + 7) & 0xFFFFFFF8) == 0xFFFFFFF0) {
    unsigned int v11 = a3 - v8 + 1;
  }
  else {
    unsigned int v11 = 2;
  }
  if (v11 >= 0x10000) {
    int v12 = 4;
  }
  else {
    int v12 = 2;
  }
  if (v11 < 0x100) {
    int v12 = 1;
  }
  if (v11 >= 2) {
    unsigned int v13 = v12;
  }
  else {
    unsigned int v13 = 0;
  }
  if (v8 < a3) {
    uint64_t v14 = v13;
  }
  else {
    uint64_t v14 = 0;
  }
  if (a2 > v8)
  {
    if (((v9 + 7) & 0xFFFFFFF8) == 0xFFFFFFF0) {
      int v15 = a2 - v8;
    }
    else {
      int v15 = 1;
    }
    if (((v9 + 7) & 0xFFFFFFF8) != 0xFFFFFFF0)
    {
      int v16 = ~v8 + a2;
      bzero(a1, ((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 16);
      *(_DWORD *)a1 = v16;
    }
    switch(v14)
    {
      case 1:
        a1[v10] = v15;
        return;
      case 2:
        *(_WORD *)&a1[v10] = v15;
        return;
      case 3:
        goto LABEL_44;
      case 4:
        *(_DWORD *)&a1[v10] = v15;
        return;
      default:
        return;
    }
  }
  switch(v14)
  {
    case 1:
      a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_33;
    case 2:
      *(_WORD *)&a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_33;
    case 3:
LABEL_44:
      __break(1u);
      JUMPOUT(0x187B911B4);
    case 4:
      *(_DWORD *)&a1[v10] = 0;
      goto LABEL_32;
    default:
LABEL_32:
      if (a2)
      {
LABEL_33:
        if (v7 < 0x7FFFFFFF)
        {
          uint64_t v18 = (void *)((unint64_t)&a1[v9 + 7] & 0xFFFFFFFFFFFFFFF8);
          if ((a2 & 0x80000000) != 0)
          {
            uint64_t v19 = a2 ^ 0x80000000;
            v18[1] = 0;
          }
          else
          {
            uint64_t v19 = a2 - 1;
          }
          *uint64_t v18 = v19;
        }
        else
        {
          unint64_t v17 = *(void (**)(void))(v6 + 56);
          v17();
        }
      }
      return;
  }
}

uint64_t destroy for BoundInputsView(uint64_t a1)
{
  swift_release();
  swift_release();

  return swift_bridgeObjectRelease();
}

uint64_t assignWithTake for BoundInputsView(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);

  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  swift_release();
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_release();
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t View.bindInputs<A>(transform:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v15 = *(void *)(a3 - 8);
  double v16 = MEMORY[0x1F4188790](a1);
  uint64_t v18 = (char *)v21 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, double))(v15 + 16))(v18, v7, v16);
  (*(void (**)(uint64_t, char *, uint64_t))(v15 + 32))(a7, v18, a3);
  v21[0] = a3;
  v21[1] = a4;
  v21[2] = a5;
  v21[3] = a6;
  uint64_t v19 = (void *)(a7 + *(int *)(type metadata accessor for ViewInputsBinding() + 52));
  *uint64_t v19 = a1;
  v19[1] = a2;
  return swift_retain();
}

void static ViewInputsBinding._makeView(view:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  type metadata accessor for ViewInputsBinding();
  type metadata accessor for _GraphValue();
  _GraphValue.value.getter();
  _GraphValue.value.getter();
  if (*(void *)(*(void *)(a3 - 8) + 64)) {
    closure #1 in static ViewInputsBinding._makeView(view:inputs:)(1, a3, a4, a5, a6);
  }
  AGGraphCreateOffsetAttribute2();
  id v10 = (id)AGSubgraphGetCurrent();
  if (v10)
  {
    unsigned int v11 = v10;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    UniqueID.init()();
    id v12 = v11;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    type metadata accessor for ViewInputsBinding.Child();
    swift_getWitnessTable();
    _GraphValue.init<A>(_:)();
    static View.makeDebuggableView(view:inputs:)();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
  }
  else
  {
    __break(1u);
  }
}

uint64_t closure #1 in static ViewInputsBinding._makeView(view:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v11 = a2;
  uint64_t v12 = a3;
  uint64_t v13 = a4;
  uint64_t v14 = a5;
  v10[2] = type metadata accessor for ViewInputsBinding();
  v10[3] = a2;
  uint64_t v7 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(a1, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply, (uint64_t)v10, a2, MEMORY[0x1E4FBC248], v7, MEMORY[0x1E4FBC278], v8);
  return v11;
}

uint64_t ViewInputsBinding.Child.value.getter()
{
  return Rule.withObservation<A>(do:)();
}

uint64_t closure #1 in ViewInputsBinding.Child.value.getter()
{
  return Attribute.syncMainIfReferences<A>(do:)();
}

void closure #1 in closure #1 in ViewInputsBinding.Child.value.getter(uint64_t a1, uint64_t a2, uint64_t a3, _UNKNOWN **a4, uint64_t a5, uint64_t a6)
{
  uint64_t v21 = a3;
  uint64_t v22 = a4;
  uint64_t v23 = a5;
  uint64_t v24 = a6;
  uint64_t v11 = *(void (**)(uint64_t *))(a1 + *(int *)(type metadata accessor for ViewInputsBinding() + 52));
  uint64_t v12 = type metadata accessor for ViewFactory();
  int v13 = *(_DWORD *)(a2 + 4);
  uint64_t v21 = a3;
  uint64_t v22 = a4;
  uint64_t v23 = a5;
  uint64_t v24 = a6;
  type metadata accessor for ViewInputsBinding.Child();
  uint64_t v15 = *(void **)(a2 + 8);
  uint64_t v14 = *(void *)(a2 + 16);
  int v16 = *(_DWORD *)(a2 + 24);
  uint64_t v17 = *(void *)(a2 + 32);
  uint64_t v19 = *(void *)(a2 + 56);
  uint64_t v18 = *(void *)(a2 + 64);
  uint64_t v21 = v12;
  uint64_t v22 = &protocol witness table for ViewFactory<A>;
  LODWORD(v23) = v13;
  uint64_t v24 = v18;
  uint64_t v25 = v15;
  uint64_t v26 = v14;
  int v27 = v16;
  uint64_t v28 = v17;
  long long v29 = *(_OWORD *)(a2 + 40);
  uint64_t v30 = v19;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  id v20 = v15;
  v11(&v21);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance ViewInputsBinding<A, B>.Child(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F40FE388](a1, WitnessTable);
}

void protocol witness for static View._makeView(view:inputs:) in conformance ViewInputsBinding<A, B>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance ViewInputsBinding<A, B>()
{
  swift_getWitnessTable();

  return static UnaryView._makeViewList(view:inputs:)();
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance ViewInputsBinding<A, B>()
{
  return static UnaryView._viewListCount(inputs:)();
}

void protocol witness for View.body.getter in conformance ViewInputsBinding<A, B>()
{
}

uint64_t static ViewFactory.makeView(view:inputs:)()
{
  return static View.makeDebuggableView(view:inputs:)();
}

uint64_t protocol witness for static ViewFactoryProtocol.makeView(view:inputs:) in conformance ViewFactory<A>()
{
  return static ViewFactory.makeView(view:inputs:)();
}

uint64_t static BoundInputsView._makeView(view:inputs:)@<X0>(int *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v64 = *MEMORY[0x1E4F143B8];
  int v3 = *a1;
  int v4 = *((_DWORD *)a2 + 2);
  unint64_t v5 = a2[2];
  unsigned int v7 = *((_DWORD *)a2 + 6);
  unsigned int v6 = *((_DWORD *)a2 + 7);
  unsigned int v8 = *((_DWORD *)a2 + 8);
  unsigned int v9 = *((_DWORD *)a2 + 9);
  unint64_t v11 = a2[5];
  unint64_t v10 = a2[6];
  unsigned int v12 = *((_DWORD *)a2 + 14);
  unsigned int v13 = *((_DWORD *)a2 + 15);
  unsigned int v14 = *((_DWORD *)a2 + 16);
  unsigned int v15 = *((_DWORD *)a2 + 17);
  unsigned int v17 = *((_DWORD *)a2 + 18);
  unsigned int v16 = *((_DWORD *)a2 + 19);
  unsigned int v18 = *((_DWORD *)a2 + 20);
  uint64_t v19 = *a2;
  uint64_t v38 = *a2;
  unint64_t v31 = v11;
  unint64_t v32 = v5;
  unint64_t v40 = v5;
  LODWORD(v39) = v4;
  unint64_t v41 = __PAIR64__(v6, v7);
  unsigned int v42 = v8;
  unint64_t v44 = v11;
  unint64_t v45 = v10;
  unint64_t v33 = v10;
  unsigned int v43 = v9;
  unsigned int v28 = v13;
  unsigned int v29 = v12;
  unint64_t v46 = __PAIR64__(v13, v12);
  unsigned int v26 = v15;
  unsigned int v27 = v14;
  unsigned int v47 = v14;
  unsigned int v48 = v15;
  unsigned int v24 = v16;
  unsigned int v25 = v17;
  unsigned int v49 = v17;
  unsigned int v50 = v16;
  int v30 = v18;
  unsigned int v51 = v18;
  _ViewInputs.makeIndirectOutputs()();
  LODWORD(v38) = v3;
  type metadata accessor for _GraphValue<LimitedAvailabilityCommandContent>(0, (unint64_t *)&lazy cache variable for type metadata for _GraphValue<BoundInputsView>, (uint64_t)&type metadata for BoundInputsView, MEMORY[0x1E4F3F590]);
  int v20 = _GraphValue.value.getter();
  id v21 = (id)AGSubgraphGetCurrent();
  if (!v21) {
    __break(1u);
  }
  int v22 = *MEMORY[0x1E4F4E7A0];
  uint64_t v39 = v19;
  LODWORD(v38) = v20;
  LODWORD(v40) = v4;
  unint64_t v41 = v32;
  unsigned int v42 = v7;
  unsigned int v43 = v6;
  unint64_t v44 = __PAIR64__(v9, v8);
  unint64_t v45 = v31;
  unint64_t v46 = v33;
  unsigned int v47 = v29;
  unsigned int v48 = v28;
  unsigned int v49 = v27;
  unsigned int v50 = v26;
  unsigned int v51 = v25;
  unsigned int v52 = v24;
  uint64_t v54 = v35;
  int v53 = v30;
  int v55 = v36;
  int v56 = v37;
  id v57 = v21;
  uint64_t v58 = 0;
  char v59 = 1;
  uint64_t v60 = 0;
  int v61 = v22;
  uint64_t v62 = 0;
  uint64_t v63 = 0;
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  lazy protocol witness table accessor for type BoundInputsView.Info and conformance BoundInputsView.Info();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  Attribute.init<A>(body:value:flags:update:)();
  outlined release of BoundInputsView.Info((uint64_t)&v38);
  uint64_t result = _ViewOutputs.setIndirectDependency(_:)();
  *(void *)a3 = v35;
  *(_DWORD *)(a3 + 8) = v36;
  *(_DWORD *)(a3 + 12) = v37;
  return result;
}

void BoundInputsView.Info.updateValue()()
{
  uint64_t v1 = v0;
  if ((*(unsigned char *)(v0 + 128) & 1) != 0 || *(void *)(v0 + 120) != *(void *)(AGGraphGetValue() + 24))
  {
    BoundInputsView.Info.eraseContent()();
    *(void *)(v0 + 120) = *(void *)(AGGraphGetValue() + 24);
    *(unsigned char *)(v0 + 128) = 0;
    AGGraphGetValue();
    if (AGSubgraphIsValid())
    {
      uint64_t v2 = *(void **)(v0 + 112);
      id v3 = (id)AGSubgraphGetGraph();
      int v4 = (void *)AGSubgraphCreate();

      AGSubgraphAddChild();
      unint64_t v5 = *(void **)(AGGraphGetValue() + 32);
      if (v5 != v2)
      {
        id v6 = v5;
        AGSubgraphRef.addSecondaryChild(_:)();
      }
      AGGraphClearUpdate();
      id v7 = (id)AGSubgraphGetCurrent();
      AGSubgraphSetCurrent();
      closure #1 in BoundInputsView.Info.updateValue()(v1);
      AGSubgraphSetCurrent();

      AGGraphSetUpdate();
      unsigned int v8 = *(void **)(v1 + 136);
      id v20 = v4;

      *(void *)(v1 + 136) = v4;
      *(_DWORD *)(v1 + 144) = *(_DWORD *)(AGGraphGetValue() + 16);
      AGGraphGetValue();
      id v9 = (id)AGSubgraphGetGraph();
      id v10 = (id)AGSubgraphGetGraph();

      if (v9 == v10)
      {
      }
      else
      {
        int CurrentAttribute = AGGraphGetCurrentAttribute();
        if (CurrentAttribute == *MEMORY[0x1E4F4E7A0])
        {
          __break(1u);
        }
        else
        {
          int v12 = CurrentAttribute;
          unsigned int v13 = *(void **)(AGGraphGetValue() + 32);
          uint64_t v14 = swift_allocObject();
          *(void *)(v14 + 16) = v2;
          *(_DWORD *)(v14 + 24) = v12;
          id v15 = v2;
          id v16 = v13;
          uint64_t v17 = AGSubgraphAddObserver();

          swift_release();
          unsigned int v18 = *(void **)(AGGraphGetValue() + 32);
          swift_retain();
          swift_retain();
          swift_bridgeObjectRetain();
          id v19 = v18;
          swift_bridgeObjectRelease();
          swift_release();
          swift_release();

          *(void *)(v1 + 152) = v19;
          *(void *)(v1 + 160) = v17;
        }
      }
    }
  }
}

void BoundInputsView.Info.eraseContent()()
{
  uint64_t v1 = *(void **)(v0 + 136);
  if (v1)
  {
    uint64_t v2 = v0;
    *(void *)(v0 + 136) = 0;
    _ViewOutputs.detachIndirectOutputs()();
    AGSubgraphRef.willInvalidate(isInserted:)(1);
    AGSubgraphInvalidate();
    int v4 = (void *)(v0 + 152);
    id v3 = *(void **)(v0 + 152);
    if (v3)
    {
      AGSubgraphRemoveObserver();

      *int v4 = 0;
      *(void *)(v2 + 160) = 0;
    }
    int v5 = *MEMORY[0x1E4F4E7A0];

    *(_DWORD *)(v2 + 144) = v5;
  }
}

uint64_t closure #1 in BoundInputsView.Info.updateValue()(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 16);
  uint64_t v3 = *(void *)(a1 + 24);
  uint64_t v23 = *(void *)(a1 + 48);
  uint64_t v24 = *(void *)(a1 + 56);
  int v4 = *(_DWORD *)(a1 + 88);
  uint64_t v35 = *(void *)(a1 + 8);
  int v36 = v2;
  long long v38 = *(_OWORD *)(a1 + 32);
  uint64_t v39 = v23;
  uint64_t v40 = v24;
  long long v41 = *(_OWORD *)(a1 + 64);
  uint64_t v42 = *(void *)(a1 + 80);
  int v43 = v4;
  swift_beginAccess();
  int v5 = *(_DWORD *)(v3 + 16);
  uint64_t v6 = *(void *)(v3 + 24);
  long long v21 = *(_OWORD *)(v3 + 48);
  long long v22 = *(_OWORD *)(v3 + 32);
  uint64_t v8 = *(void *)(v3 + 64);
  uint64_t v7 = *(void *)(v3 + 72);
  char v9 = *(unsigned char *)(v3 + 80);
  char v10 = *(unsigned char *)(v3 + 81);
  uint64_t v11 = *(void *)(v3 + 88);
  type metadata accessor for _GraphValue<LimitedAvailabilityCommandContent>(0, (unint64_t *)&lazy cache variable for type metadata for MutableBox<CachedEnvironment>, MEMORY[0x1E4F3FEE0], MEMORY[0x1E4F3F398]);
  uint64_t v12 = swift_allocObject();
  *(_DWORD *)(v12 + 16) = v5;
  *(void *)(v12 + 24) = v6;
  *(_OWORD *)(v12 + 32) = v22;
  *(_OWORD *)(v12 + 48) = v21;
  *(void *)(v12 + 64) = v8;
  *(void *)(v12 + 72) = v7;
  *(unsigned char *)(v12 + 80) = v9;
  *(unsigned char *)(v12 + 81) = v10;
  *(void *)(v12 + 88) = v11;
  swift_retain();
  uint64_t v37 = v12;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t Value = AGGraphGetValue();
  int v14 = *(_DWORD *)(Value + 48);
  uint64_t v15 = *(void *)(Value + 56);
  uint64_t v16 = *(void *)(Value + 80);
  uint64_t v25 = *(void *)(Value + 40);
  LODWORD(v26) = v14;
  uint64_t v27 = v15;
  long long v28 = *(_OWORD *)(Value + 64);
  uint64_t v29 = v16;
  _GraphInputs.merge(_:ignoringPhase:)();
  uint64_t v17 = AGGraphGetValue();
  uint64_t v18 = *(void *)(v17 + 8);
  uint64_t v19 = *(unsigned int *)(v17 + 16);
  uint64_t v25 = v35;
  LODWORD(v26) = v36;
  uint64_t v27 = v12;
  long long v28 = v38;
  uint64_t v29 = v39;
  uint64_t v30 = v40;
  long long v31 = v41;
  uint64_t v32 = v42;
  int v33 = v43;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t *))(v18 + 8))(&v34, v19, &v25);
  uint64_t v25 = *(void *)(a1 + 96);
  uint64_t v26 = *(void *)(a1 + 104);
  _ViewOutputs.attachIndirectOutputs(to:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

void closure #2 in BoundInputsView.Info.updateValue()()
{
  if (AGSubgraphIsValid())
  {
    AGGraphGetAttributeInfo();
    uint64_t v1 = *(void **)(v0 + 152);
    *(void *)(v0 + 152) = 0;
    *(void *)(v0 + 160) = 0;

    BoundInputsView.Info.eraseContent()();
  }
}

void protocol witness for ObservedAttribute.destroy() in conformance BoundInputsView.Info()
{
  uint64_t v1 = *(void **)(v0 + 152);
  if (v1)
  {
    AGSubgraphRemoveObserver();

    *(void *)(v0 + 152) = 0;
    *(void *)(v0 + 160) = 0;
  }
  *(_DWORD *)(v0 + 144) = *MEMORY[0x1E4F4E7A0];
}

void protocol witness for static _AttributeBody._destroySelf(_:) in conformance BoundInputsView.Info(uint64_t a1)
{
  uint64_t v3 = (void *)(a1 + 152);
  int v2 = *(void **)(a1 + 152);
  if (v2)
  {
    AGSubgraphRemoveObserver();

    void *v3 = 0;
    v3[1] = 0;
  }
  *(_DWORD *)(a1 + 144) = *MEMORY[0x1E4F4E7A0];
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance BoundInputsView.Info(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type BoundInputsView.Info and conformance BoundInputsView.Info();

  return MEMORY[0x1F40FE388](a1, v2);
}

void protocol witness for View.body.getter in conformance BoundInputsView()
{
}

_UNKNOWN **base witness table accessor for View in BoundInputsView()
{
  return &protocol witness table for BoundInputsView;
}

_UNKNOWN **base witness table accessor for View in ViewInputsBinding<A, B>()
{
  return &protocol witness table for ViewInputsBinding<A, B>;
}

uint64_t type metadata accessor for ViewInputsBinding.Child()
{
  return swift_getGenericMetadata();
}

unint64_t lazy protocol witness table accessor for type BoundInputsView.Info and conformance BoundInputsView.Info()
{
  unint64_t result = lazy protocol witness table cache variable for type BoundInputsView.Info and conformance BoundInputsView.Info;
  if (!lazy protocol witness table cache variable for type BoundInputsView.Info and conformance BoundInputsView.Info)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BoundInputsView.Info and conformance BoundInputsView.Info);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type BoundInputsView.Info and conformance BoundInputsView.Info;
  if (!lazy protocol witness table cache variable for type BoundInputsView.Info and conformance BoundInputsView.Info)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BoundInputsView.Info and conformance BoundInputsView.Info);
  }
  return result;
}

uint64_t outlined release of BoundInputsView.Info(uint64_t a1)
{
  unint64_t v2 = *(void **)(a1 + 136);
  uint64_t v3 = *(void **)(a1 + 152);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();

  return a1;
}

uint64_t sub_187B927D0()
{
  return swift_deallocObject();
}

void partial apply for closure #2 in BoundInputsView.Info.updateValue()()
{
}

void destroy for BoundInputsView.Info(uint64_t a1)
{
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  unint64_t v2 = *(void **)(a1 + 152);
}

uint64_t initializeWithCopy for BoundInputsView.Info(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  uint64_t v3 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v3;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(unsigned char *)(a1 + 128) = *(unsigned char *)(a2 + 128);
  int v5 = *(void **)(a2 + 112);
  uint64_t v4 = *(void *)(a2 + 120);
  *(void *)(a1 + 112) = v5;
  *(void *)(a1 + 120) = v4;
  uint64_t v6 = *(void **)(a2 + 136);
  *(void *)(a1 + 136) = v6;
  *(_DWORD *)(a1 + 144) = *(_DWORD *)(a2 + 144);
  uint64_t v8 = *(void **)(a2 + 152);
  uint64_t v7 = *(void *)(a2 + 160);
  *(void *)(a1 + 152) = v8;
  *(void *)(a1 + 160) = v7;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v9 = v5;
  id v10 = v6;
  id v11 = v8;
  return a1;
}

uint64_t assignWithCopy for BoundInputsView.Info(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  *(_DWORD *)(a1 + 108) = *(_DWORD *)(a2 + 108);
  uint64_t v4 = *(void **)(a2 + 112);
  int v5 = *(void **)(a1 + 112);
  *(void *)(a1 + 112) = v4;
  id v6 = v4;

  uint64_t v7 = *(void *)(a2 + 120);
  *(unsigned char *)(a1 + 128) = *(unsigned char *)(a2 + 128);
  *(void *)(a1 + 120) = v7;
  uint64_t v8 = *(void **)(a1 + 136);
  id v9 = *(void **)(a2 + 136);
  *(void *)(a1 + 136) = v9;
  id v10 = v9;

  *(_DWORD *)(a1 + 144) = *(_DWORD *)(a2 + 144);
  id v11 = *(void **)(a2 + 152);
  uint64_t v12 = *(void **)(a1 + 152);
  *(void *)(a1 + 152) = v11;
  id v13 = v11;

  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  return a1;
}

uint64_t assignWithTake for BoundInputsView.Info(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_release();
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_release();
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  uint64_t v4 = *(void **)(a1 + 112);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);

  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  *(unsigned char *)(a1 + 128) = *(unsigned char *)(a2 + 128);
  int v5 = *(void **)(a1 + 136);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);

  *(_DWORD *)(a1 + 144) = *(_DWORD *)(a2 + 144);
  id v6 = *(void **)(a1 + 152);
  *(void *)(a1 + 152) = *(void *)(a2 + 152);

  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  return a1;
}

void *type metadata accessor for BoundInputsView.Info()
{
  return &unk_1ED419620;
}

uint64_t destroy for ViewInputsBinding.Child(uint64_t a1)
{
  swift_release();
  swift_release();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for ViewInputsBinding.Child(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  uint64_t v3 = *(void **)(a2 + 8);
  uint64_t v4 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = v4;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  uint64_t v5 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v5;
  id v6 = v3;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for ViewInputsBinding.Child(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  uint64_t v4 = *(void **)(a2 + 8);
  uint64_t v5 = *(void **)(a1 + 8);
  *(void *)(a1 + 8) = v4;
  id v6 = v4;

  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  return a1;
}

uint64_t assignWithTake for ViewInputsBinding.Child(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;

  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_release();
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_release();
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  return a1;
}

uint64_t base witness table accessor for _AttributeBody in ViewInputsBinding<A, B>.Child()
{
  return swift_getWitnessTable();
}

uint64_t partial apply for closure #1 in ViewInputsBinding.Child.value.getter()
{
  return closure #1 in ViewInputsBinding.Child.value.getter();
}

void partial apply for closure #1 in closure #1 in ViewInputsBinding.Child.value.getter(uint64_t a1)
{
  closure #1 in closure #1 in ViewInputsBinding.Child.value.getter(a1, *(void *)(v1 + 48), *(void *)(v1 + 16), *(_UNKNOWN ***)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40));
}

uint64_t type metadata accessor for ViewFactory()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t LimitedAvailabilityWidget.configuration.setter(uint64_t a1)
{
  uint64_t result = swift_release();
  void *v1 = a1;
  return result;
}

uint64_t (*LimitedAvailabilityWidget.configuration.modify())(void, void, void, void)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

void LimitedAvailabilityWidget.init()()
{
}

uint64_t LimitedAvailabilityWidget.init<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  double v7 = MEMORY[0x1F4188790](AssociatedTypeWitness);
  id v9 = (char *)&v11 - v8;
  (*(void (**)(uint64_t, uint64_t, double))(a3 + 32))(a2, a3, v7);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a2 - 8) + 8))(a1, a2);
  swift_getAssociatedConformanceWitness();
  type metadata accessor for LimitedAvailabilityConfigurationStorage();
  return LimitedAvailabilityCommandContentStorage.__allocating_init(_:)((uint64_t)v9);
}

uint64_t LimitedAvailabilityConfiguration.init<A>(_:)(uint64_t a1)
{
  return LimitedAvailabilityCommandContentStorage.__allocating_init(_:)(a1);
}

uint64_t type metadata accessor for LimitedAvailabilityConfigurationStorage()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t LimitedAvailabilityWidget.body.getter@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = a1;
  return swift_retain();
}

void protocol witness for Widget.init() in conformance LimitedAvailabilityWidget()
{
}

uint64_t (*LimitedAvailabilityConfiguration.storage.modify())(void, void, void, void)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

void LimitedAvailabilityConfigurationBase.makeWidgetConfiguration(widget:inputs:)()
{
}

uint64_t LimitedAvailabilityConfigurationBase.deinit()
{
  return v0;
}

uint64_t LimitedAvailabilityConfigurationBase.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t LimitedAvailabilityConfigurationStorage.Child.value.getter@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  AGGraphGetValue();
  type metadata accessor for LimitedAvailabilityConfigurationStorage();
  uint64_t v4 = swift_dynamicCastClassUnconditional();
  uint64_t v5 = v4 + *(void *)(*(void *)v4 + 112);
  id v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a1 - 8) + 16);

  return v6(a2, v5, a1);
}

uint64_t protocol witness for Rule.value.getter in conformance LimitedAvailabilityConfigurationStorage<A>.Child@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return LimitedAvailabilityConfigurationStorage.Child.value.getter(*(void *)(a1 + 16), a2);
}

unint64_t lazy protocol witness table accessor for type LimitedAvailabilityConfiguration.IndirectOutputs and conformance LimitedAvailabilityConfiguration.IndirectOutputs()
{
  unint64_t result = lazy protocol witness table cache variable for type LimitedAvailabilityConfiguration.IndirectOutputs and conformance LimitedAvailabilityConfiguration.IndirectOutputs;
  if (!lazy protocol witness table cache variable for type LimitedAvailabilityConfiguration.IndirectOutputs and conformance LimitedAvailabilityConfiguration.IndirectOutputs)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LimitedAvailabilityConfiguration.IndirectOutputs and conformance LimitedAvailabilityConfiguration.IndirectOutputs);
  }
  return result;
}

uint64_t associated type witness table accessor for Widget.Body : WidgetConfiguration in LimitedAvailabilityWidget()
{
  return swift_getOpaqueTypeConformance2();
}

ValueMetadata *type metadata accessor for LimitedAvailabilityWidget()
{
  return &type metadata for LimitedAvailabilityWidget;
}

ValueMetadata *type metadata accessor for LimitedAvailabilityConfiguration()
{
  return &type metadata for LimitedAvailabilityConfiguration;
}

uint64_t type metadata accessor for LimitedAvailabilityConfigurationBase()
{
  return self;
}

uint64_t method lookup function for LimitedAvailabilityConfigurationBase(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for LimitedAvailabilityConfigurationBase);
}

_UNKNOWN **sub_187B933B0()
{
  return &protocol witness table for LimitedAvailabilityConfiguration;
}

void *type metadata accessor for LimitedAvailabilityConfiguration.IndirectOutputs()
{
  return &unk_1ED472C50;
}

uint64_t type metadata accessor for LimitedAvailabilityConfigurationStorage.Child()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t base witness table accessor for _AttributeBody in LimitedAvailabilityConfigurationStorage<A>.Child()
{
  return swift_getWitnessTable();
}

uint64_t View.allowsGaugeResizing(_:)()
{
  return swift_release();
}

uint64_t EnvironmentValues.allowsGaugeResizing.getter()
{
  if (*(void *)(v0 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<AllowsGaugeResizingKey>();
    _s7SwiftUI30_EnvironmentKeyWritingModifierVySbGACyxGAA04ViewF0AAWlTm_0(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<AllowsGaugeResizingKey> and conformance EnvironmentPropertyKey<A>, (void (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<AllowsGaugeResizingKey>);
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<AllowsGaugeResizingKey>();
    _s7SwiftUI30_EnvironmentKeyWritingModifierVySbGACyxGAA04ViewF0AAWlTm_0(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<AllowsGaugeResizingKey> and conformance EnvironmentPropertyKey<A>, (void (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<AllowsGaugeResizingKey>);
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  return v2;
}

uint64_t key path getter for EnvironmentValues.allowsGaugeResizing : EnvironmentValues@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = EnvironmentValues.allowsGaugeResizing.getter();
  *a1 = result & 1;
  return result;
}

uint64_t sub_187B935EC@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = EnvironmentValues.allowsGaugeResizing.getter();
  *a1 = result & 1;
  return result;
}

uint64_t key path setter for EnvironmentValues.allowsGaugeResizing : EnvironmentValues()
{
  return EnvironmentValues.allowsGaugeResizing.setter();
}

uint64_t sub_187B93654()
{
  return EnvironmentValues.allowsGaugeResizing.setter();
}

uint64_t sub_187B9367C()
{
  return swift_getWitnessTable();
}

void *type metadata accessor for AllowsGaugeResizingKey()
{
  return &unk_1ED438700;
}

uint64_t TabContent.badge(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  v6[0] = a1;
  v6[1] = 0;
  if (a1) {
    uint64_t v4 = 0;
  }
  else {
    uint64_t v4 = 0x1FFFFFFFELL;
  }
  v6[2] = v4;
  v6[3] = 0;
  TabContent.modifier<A>(_:)((uint64_t)v6, a2, (uint64_t)&unk_1ED4142C0, a3);
  return outlined consume of BadgeLabel?(a1, 0, v4);
}

uint64_t sub_187B93794()
{
  return swift_getWitnessTable();
}

uint64_t sub_187B937F8()
{
  return swift_getWitnessTable();
}

uint64_t associated type witness table accessor for ViewModifier.Body : View in BadgeModifier()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t protocol witness for ViewModifier.body(content:) in conformance BadgeModifier@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = *v1;
  uint64_t v3 = v1[1];
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  *a1 = *v1;
  a1[1] = v3;
  a1[2] = v4;
  a1[3] = v5;
  return outlined copy of BadgeLabel?(v2, v3, v4);
}

uint64_t sub_187B93890()
{
  return lazy protocol witness table accessor for type BadgedView<_ViewModifier_Content<BadgeModifier>> and conformance BadgedView<A>(&lazy protocol witness table cache variable for type BadgedView<_ViewModifier_Content<BadgeModifier>> and conformance BadgedView<A>, (void (*)(uint64_t))type metadata accessor for BadgedView<_ViewModifier_Content<BadgeModifier>>);
}

uint64_t EnvironmentValues.refresh.getter()
{
  if (*(void *)(v0 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<RefreshAction.Key>();
    lazy protocol witness table accessor for type EnvironmentPropertyKey<RefreshAction.Key> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<RefreshAction.Key> and conformance EnvironmentPropertyKey<A>, (void (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<RefreshAction.Key>);
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<RefreshAction.Key>();
    lazy protocol witness table accessor for type EnvironmentPropertyKey<RefreshAction.Key> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<RefreshAction.Key> and conformance EnvironmentPropertyKey<A>, (void (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<RefreshAction.Key>);
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  return swift_release_n();
}

uint64_t View.refreshable(action:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[0] = a1;
  v4[1] = a2;
  return MEMORY[0x18C113660](v4, a3, &type metadata for RefreshableModifier);
}

uint64_t key path setter for RefreshableModifier.action : RefreshableModifier(uint64_t *a1, void *a2)
{
  uint64_t v4 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = v4;
  *(void *)(v5 + 24) = v3;
  swift_retain();
  uint64_t result = swift_release();
  *a2 = &thunk for @escaping @callee_guaranteed @Sendable @async () -> (@out ())partial apply;
  a2[1] = v5;
  return result;
}

uint64_t RefreshableModifier.ChildEnvironment.value.getter@<X0>(void *a1@<X8>)
{
  uint64_t Value = (void *)AGGraphGetValue();
  uint64_t v3 = Value[1];
  *a1 = *Value;
  a1[1] = v3;
  type metadata accessor for @Sendable ()();
  uint64_t v4 = (uint64_t *)AGGraphGetValue();
  uint64_t v6 = *v4;
  uint64_t v5 = v4[1];
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = v6;
  *(void *)(v7 + 24) = v5;
  type metadata accessor for EnvironmentPropertyKey<RefreshAction.Key>();
  lazy protocol witness table accessor for type EnvironmentPropertyKey<RefreshAction.Key> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<RefreshAction.Key> and conformance EnvironmentPropertyKey<A>, (void (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<RefreshAction.Key>);
  swift_retain();
  swift_retain_n();
  swift_retain();
  swift_retain();
  PropertyList.subscript.setter();
  if (a1[1])
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  swift_release();
  return swift_release();
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance RefreshableModifier(int *a1, uint64_t a2, void (*a3)(uint64_t, uint64_t *), uint64_t a4)
{
  int v4 = *a1;
  long long v5 = *(_OWORD *)(a2 + 48);
  v8[2] = *(_OWORD *)(a2 + 32);
  v8[3] = v5;
  v8[4] = *(_OWORD *)(a2 + 64);
  int v9 = *(_DWORD *)(a2 + 80);
  long long v6 = *(_OWORD *)(a2 + 16);
  v8[0] = *(_OWORD *)a2;
  v8[1] = v6;
  return specialized static ViewModifier<>._makeView(modifier:inputs:body:)(v4, (uint64_t)v8, a3, a4);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance RefreshableModifier(int *a1, uint64_t a2, void (*a3)(uint64_t, uint64_t *), uint64_t a4)
{
  int v4 = *a1;
  long long v5 = *(_OWORD *)(a2 + 48);
  v8[2] = *(_OWORD *)(a2 + 32);
  v8[3] = v5;
  v8[4] = *(_OWORD *)(a2 + 64);
  char v9 = *(unsigned char *)(a2 + 80);
  long long v6 = *(_OWORD *)(a2 + 16);
  v8[0] = *(_OWORD *)a2;
  v8[1] = v6;
  return specialized static ViewModifier<>._makeViewList(modifier:inputs:body:)(v4, (uint64_t)v8, a3, a4);
}

void protocol witness for ViewModifier.body(content:) in conformance RefreshableModifier()
{
}

uint64_t RefreshAction.callAsFunction()()
{
  int v4 = (uint64_t (*)(void))(*v0 + *(int *)*v0);
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v2;
  *uint64_t v2 = v1;
  v2[1] = partial apply for closure #1 in FeedbackGenerator.body(content:);
  return v4();
}

void *initializeBufferWithCopyOfBuffer for RefreshAction(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_retain();
  return a1;
}

void *assignWithCopy for RefreshAction(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_retain();
  swift_release();
  a1[2] = a2[2];
  return a1;
}

uint64_t assignWithTake for RefreshAction(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  return a1;
}

uint64_t UIKitRefreshControl.configuration.setter(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = v1 + OBJC_IVAR____TtC7SwiftUI19UIKitRefreshControl_configuration;
  uint64_t v4 = *(void *)(v1 + OBJC_IVAR____TtC7SwiftUI19UIKitRefreshControl_configuration + 16);
  *(_OWORD *)uint64_t v3 = *(_OWORD *)a1;
  *(void *)(v3 + 16) = v2;
  if (v2 == v4)
  {
    uint64_t v5 = OBJC_IVAR____TtC7SwiftUI19UIKitRefreshControl_currentTask;
    if (*(void *)(v1 + OBJC_IVAR____TtC7SwiftUI19UIKitRefreshControl_currentTask))
    {
      swift_retain();
      char isCancelled = swift_task_isCancelled();
      swift_release();
      if ((isCancelled & 1) == 0)
      {
        if (*(void *)(v1 + v5))
        {
          uint64_t v7 = swift_retain();
          MEMORY[0x18C115EE0](v7, MEMORY[0x1E4FBC848] + 8, MEMORY[0x1E4FBC248], MEMORY[0x1E4FBC278]);
          swift_release();
        }
      }
    }
  }

  return swift_release();
}

id UIKitRefreshControl.__deallocating_deinit()
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  if (*(void *)&v0[OBJC_IVAR____TtC7SwiftUI19UIKitRefreshControl_currentTask])
  {
    uint64_t v2 = swift_retain();
    MEMORY[0x18C115EE0](v2, MEMORY[0x1E4FBC848] + 8, MEMORY[0x1E4FBC248], MEMORY[0x1E4FBC278]);
    swift_release();
  }
  v4.receiver = v0;
  v4.super_class = ObjectType;
  return objc_msgSendSuper2(&v4, sel_dealloc);
}

Swift::Void __swiftcall UIKitRefreshControl._swiftui_handleRefreshControl()()
{
  type metadata accessor for TaskPriority?(0);
  MEMORY[0x1F4188790](v1 - 8);
  uint64_t v3 = &v11[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v12 = v0;
  type metadata accessor for @Sendable ()();
  static Update.ensure<A>(_:)();
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = v13;
  uint64_t v5 = OBJC_IVAR____TtC7SwiftUI19UIKitRefreshControl_currentTask;
  if (*(void *)&v0[OBJC_IVAR____TtC7SwiftUI19UIKitRefreshControl_currentTask])
  {
    uint64_t v6 = swift_retain();
    MEMORY[0x18C115EE0](v6, MEMORY[0x1E4FBC848] + 8, MEMORY[0x1E4FBC248], MEMORY[0x1E4FBC278]);
    swift_release();
  }
  static TaskPriority.userInitiated.getter();
  uint64_t v7 = type metadata accessor for TaskPriority();
  (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(v3, 0, 1, v7);
  uint64_t v8 = (void *)swift_allocObject();
  v8[2] = 0;
  v8[3] = 0;
  v8[4] = &thunk for @escaping @callee_guaranteed @Sendable @async () -> (@out ())partial apply;
  _OWORD v8[5] = v4;
  v8[6] = v0;
  char v9 = v0;
  uint64_t v10 = _sScTss5NeverORs_rlE8detached8priority9operationScTyxABGScPSg_xyYaYAcntFZyt_Tgm5((uint64_t)v3, (uint64_t)&async function pointer to partial apply for closure #2 in UIKitRefreshControl._swiftui_handleRefreshControl(), (uint64_t)v8);
  outlined destroy of TaskPriority?((uint64_t)v3);
  *(void *)&v0[v5] = v10;
  swift_release();
}

uint64_t closure #2 in UIKitRefreshControl._swiftui_handleRefreshControl()(uint64_t a1, uint64_t a2, uint64_t a3, int *a4, uint64_t a5, uint64_t a6)
{
  *(void *)(v6 + 16) = a6;
  char v9 = (uint64_t (*)(void))((char *)a4 + *a4);
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v6 + 24) = v7;
  *uint64_t v7 = v6;
  v7[1] = closure #2 in UIKitRefreshControl._swiftui_handleRefreshControl();
  return v9();
}

uint64_t closure #2 in UIKitRefreshControl._swiftui_handleRefreshControl()()
{
  swift_task_dealloc();
  return MEMORY[0x1F4188298](closure #2 in UIKitRefreshControl._swiftui_handleRefreshControl(), 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  type metadata accessor for MainActor();
  *(void *)(v0 + 32) = static MainActor.shared.getter();
  uint64_t v2 = dispatch thunk of Actor.unownedExecutor.getter();
  return MEMORY[0x1F4188298](closure #2 in UIKitRefreshControl._swiftui_handleRefreshControl(), v2, v1);
}

{
  uint64_t v0;
  void *v1;
  uint64_t (*v2)(void);
  uint64_t v4;

  uint64_t v1 = *(void **)(v0 + 16);
  swift_release();
  objc_msgSend(v1, sel_endRefreshing);
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t type metadata accessor for UIKitRefreshControl()
{
  return self;
}

uint64_t sub_187B94718()
{
  return swift_getWitnessTable();
}

ValueMetadata *type metadata accessor for RefreshableModifier()
{
  return &type metadata for RefreshableModifier;
}

ValueMetadata *type metadata accessor for RefreshAction.Key()
{
  return &type metadata for RefreshAction.Key;
}

_UNKNOWN **base witness table accessor for ViewModifier in RefreshableModifier()
{
  return &protocol witness table for RefreshableModifier;
}

uint64_t specialized static RefreshableModifier._makeInputs(modifier:inputs:)()
{
  return _GraphInputs.environment.setter();
}

uint64_t sub_187B94998@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = v4;
  *(void *)(v5 + 24) = v3;
  *a2 = &async function pointer to partial apply for thunk for @escaping @callee_guaranteed @Sendable @async () -> ();
  a2[1] = v5;

  return swift_retain();
}

unint64_t type metadata accessor for @Sendable ()()
{
  unint64_t result = lazy cache variable for type metadata for @Sendable ();
  if (!lazy cache variable for type metadata for @Sendable ())
  {
    unint64_t result = swift_getFunctionTypeMetadata0();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for @Sendable ());
  }
  return result;
}

void type metadata accessor for Focus<RefreshableModifier, @Sendable ()>()
{
  if (!lazy cache variable for type metadata for Focus<RefreshableModifier, @Sendable ()>)
  {
    type metadata accessor for @Sendable ()();
    unint64_t v0 = type metadata accessor for Focus();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Focus<RefreshableModifier, @Sendable ()>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type RefreshableModifier.ChildEnvironment and conformance RefreshableModifier.ChildEnvironment()
{
  unint64_t result = lazy protocol witness table cache variable for type RefreshableModifier.ChildEnvironment and conformance RefreshableModifier.ChildEnvironment;
  if (!lazy protocol witness table cache variable for type RefreshableModifier.ChildEnvironment and conformance RefreshableModifier.ChildEnvironment)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RefreshableModifier.ChildEnvironment and conformance RefreshableModifier.ChildEnvironment);
  }
  return result;
}

uint64_t sub_187B94B00()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in UIKitRefreshControl._swiftui_handleRefreshControl()@<X0>(void *a1@<X8>)
{
  uint64_t v3 = (uint64_t *)(*(void *)(v1 + 16) + OBJC_IVAR____TtC7SwiftUI19UIKitRefreshControl_configuration);
  uint64_t v5 = *v3;
  uint64_t v4 = v3[1];
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = v5;
  *(void *)(v6 + 24) = v4;
  *a1 = &thunk for @escaping @callee_guaranteed @Sendable @async () -> ()partial apply;
  a1[1] = v6;
  return swift_retain();
}

uint64_t sub_187B94BB0()
{
  swift_unknownObjectRelease();
  swift_release();

  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in UIKitRefreshControl._swiftui_handleRefreshControl()()
{
  uint64_t v2 = *(int **)(v0 + 32);
  uint64_t v3 = *(void *)(v0 + 48);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v4;
  *uint64_t v4 = v1;
  v4[1] = partial apply for closure #1 in closure #1 in AppDelegate.application(_:handleEventsForBackgroundURLSession:completionHandler:);
  void v4[2] = v3;
  uint64_t v7 = (uint64_t (*)(void))((char *)v2 + *v2);
  uint64_t v5 = (void *)swift_task_alloc();
  v4[3] = v5;
  *uint64_t v5 = v4;
  v5[1] = closure #2 in UIKitRefreshControl._swiftui_handleRefreshControl();
  return v7();
}

uint64_t outlined destroy of TaskPriority?(uint64_t a1)
{
  type metadata accessor for TaskPriority?(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void *type metadata accessor for RefreshableModifier.ChildEnvironment()
{
  return &unk_1ED42D7B8;
}

ValueMetadata *type metadata accessor for FormTextFieldLabelDisplayMode()
{
  return &type metadata for FormTextFieldLabelDisplayMode;
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance TextFieldLabelDisplayModeModifier<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return MEMORY[0x1F40FDA60](a1, a2, a3, a4, a5, a6, &protocol witness table for TextFieldLabelDisplayModeModifier<A>);
}

uint64_t protocol witness for static ViewModifier._viewListCount(inputs:body:) in conformance TextFieldLabelDisplayModeModifier<A>()
{
  return static ViewModifier<>._viewListCount(inputs:body:)();
}

_UNKNOWN **base witness table accessor for ViewModifier in TextFieldLabelDisplayModeModifier<A>()
{
  return &protocol witness table for TextFieldLabelDisplayModeModifier<A>;
}

void *type metadata accessor for _GraphInputs.TextFieldLabelDisplayModeKey()
{
  return &unk_1ED413F60;
}

unsigned char *storeEnumTagSinglePayload for ResolvedTextFieldLabelDisplayMode(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x187B94ECCLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ResolvedTextFieldLabelDisplayMode and conformance ResolvedTextFieldLabelDisplayMode()
{
  unint64_t result = lazy protocol witness table cache variable for type ResolvedTextFieldLabelDisplayMode and conformance ResolvedTextFieldLabelDisplayMode;
  if (!lazy protocol witness table cache variable for type ResolvedTextFieldLabelDisplayMode and conformance ResolvedTextFieldLabelDisplayMode)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ResolvedTextFieldLabelDisplayMode and conformance ResolvedTextFieldLabelDisplayMode);
  }
  return result;
}

void static ImmersiveSpaceContentBuilder.buildBlock<A>(_:)()
{
}

_UNKNOWN **associated type witness table accessor for ImmersiveSpaceContent.Body : ImmersiveSpaceContent in Never()
{
  return &protocol witness table for Never;
}

uint64_t dispatch thunk of ImmersiveSpaceContent.body.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

ValueMetadata *type metadata accessor for ImmersiveSpaceContentBuilder()
{
  return &type metadata for ImmersiveSpaceContentBuilder;
}

uint64_t dispatch thunk of PrimitiveImmersiveSpaceContent._makeView()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t ProminentDetailNavigationSplitViewStyle.makeBody(configuration:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  int v4 = *((_DWORD *)a1 + 4);
  uint64_t v6 = a1[3];
  uint64_t v5 = a1[4];
  uint64_t v7 = a1[5];
  char v8 = *((unsigned char *)a1 + 48);
  *(void *)a2 = implicit closure #2 in implicit closure #1 in variable initialization expression of NavigationSplitReader._stateHost;
  *(void *)(a2 + 8) = 0;
  *(unsigned char *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = v2;
  *(void *)(a2 + 40) = v3;
  *(_DWORD *)(a2 + 48) = v4;
  *(void *)(a2 + 56) = v6;
  *(void *)(a2 + 64) = v5;
  *(void *)(a2 + 72) = v7;
  *(unsigned char *)(a2 + 80) = v8;
  *(unsigned char *)(a2 + 81) = 1;
  swift_retain();
  swift_retain();
  swift_retain();

  return swift_retain();
}

uint64_t associated type witness table accessor for NavigationSplitViewStyle.Body : View in ProminentDetailNavigationSplitViewStyle()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t protocol witness for NavigationSplitViewStyle.makeBody(configuration:) in conformance ProminentDetailNavigationSplitViewStyle@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  int v4 = *((_DWORD *)a1 + 4);
  uint64_t v6 = a1[3];
  uint64_t v5 = a1[4];
  uint64_t v7 = a1[5];
  char v8 = *((unsigned char *)a1 + 48);
  *(void *)a2 = implicit closure #2 in implicit closure #1 in variable initialization expression of NavigationSplitReader._stateHost;
  *(void *)(a2 + 8) = 0;
  *(unsigned char *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = v2;
  *(void *)(a2 + 40) = v3;
  *(_DWORD *)(a2 + 48) = v4;
  *(void *)(a2 + 56) = v6;
  *(void *)(a2 + 64) = v5;
  *(void *)(a2 + 72) = v7;
  *(unsigned char *)(a2 + 80) = v8;
  *(unsigned char *)(a2 + 81) = 1;
  swift_retain();
  swift_retain();
  swift_retain();

  return swift_retain();
}

ValueMetadata *type metadata accessor for ProminentDetailNavigationSplitViewStyle()
{
  return &type metadata for ProminentDetailNavigationSplitViewStyle;
}

uint64_t static SectionPickerStyle._makeView<A>(value:inputs:)()
{
  return static MultiView._makeView(view:inputs:)();
}

uint64_t static SectionPickerStyle._makeViewList<A>(value:inputs:)()
{
  return static Group<A>._makeViewList(view:inputs:)();
}

uint64_t SectionPickerStyle.Body.base.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for _PickerValue();
  uint64_t Value = AGGraphGetValue();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16))(a1, Value, v2);
}

uint64_t SectionPickerStyle.Body.value.getter(int a1, uint64_t a2, uint64_t a3)
{
  v19[2] = &type metadata for SectionPickerStyle;
  v19[3] = a2;
  v19[4] = &protocol witness table for SectionPickerStyle;
  v19[5] = a3;
  uint64_t v6 = type metadata accessor for _PickerValue();
  MEMORY[0x1F4188790](v6 - 8);
  char v8 = (char *)v19 - v7;
  SectionPickerStyle.Body.base.getter((uint64_t)v19 - v7);
  destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(a2, a3, v9, v10);
  uint64_t v11 = type metadata accessor for PickerStyleConfiguration();
  (*(void (**)(char *, uint64_t))(*(void *)(v11 - 8) + 8))(v8, v11);
  uint64_t v12 = type metadata accessor for PickerStyleConfiguration.Content();
  unint64_t v13 = lazy protocol witness table accessor for type MenuPickerOptionSectionStyle and conformance MenuPickerOptionSectionStyle();
  View.sectionStyle<A, B>(_:in:)(v13, v14, v12, (uint64_t)&type metadata for MenuPickerOptionSectionStyle, MEMORY[0x1E4F3FCF0], (uint64_t)&protocol witness table for PickerStyleConfiguration<A>.Content, MEMORY[0x1E4F3FCE8], v15);
  uint64_t v16 = swift_allocObject();
  *(void *)(v16 + 16) = a2;
  *(void *)(v16 + 24) = a3;
  *(_DWORD *)(v16 + 32) = a1;
  type metadata accessor for StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, SectionStyleModifier<MenuPickerOptionSectionStyle>, EmptyModifier>();
  type metadata accessor for ModifiedContent();
  type metadata accessor for SectionPicker();
  unint64_t v17 = lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, SectionStyleModifier<MenuPickerOptionSectionStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>();
  v19[0] = &protocol witness table for PickerStyleConfiguration<A>.Content;
  v19[1] = v17;
  swift_getWitnessTable();
  swift_getWitnessTable();
  return Group.init<A, B>(subviews:transform:)();
}

uint64_t closure #1 in SectionPickerStyle.Body.value.getter@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  v24[1] = a2;
  uint64_t v25 = a1;
  uint64_t v26 = a5;
  uint64_t v7 = type metadata accessor for PickerStyleConfiguration();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  uint64_t v10 = (char *)v24 - v9;
  v27[0] = &type metadata for SectionPickerStyle;
  v27[1] = a3;
  v27[2] = &protocol witness table for SectionPickerStyle;
  v27[3] = a4;
  uint64_t v11 = type metadata accessor for _PickerValue();
  MEMORY[0x1F4188790](v11 - 8);
  unint64_t v13 = (char *)v24 - v12;
  uint64_t v14 = type metadata accessor for SectionPicker();
  uint64_t v15 = *(void *)(v14 - 8);
  MEMORY[0x1F4188790](v14);
  unint64_t v17 = (char *)v24 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v18);
  id v20 = (char *)v24 - v19;
  SectionPickerStyle.Body.base.getter((uint64_t)v13);
  (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v10, v13, v7);
  outlined init with copy of SubviewsCollection(v25, (uint64_t)v27);
  uint64_t KeyPath = swift_getKeyPath();
  SectionPicker.init(labelsVisibility:configuration:children:)(KeyPath, 0, (uint64_t)v10, (uint64_t)v27, (uint64_t)v17);
  swift_getWitnessTable();
  static ViewBuilder.buildExpression<A>(_:)(v17);
  long long v22 = *(void (**)(char *, uint64_t))(v15 + 8);
  v22(v17, v14);
  static ViewBuilder.buildExpression<A>(_:)(v20);
  return ((uint64_t (*)(char *, uint64_t))v22)(v20, v14);
}

__n128 SectionPicker.init(labelsVisibility:configuration:children:)@<Q0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  *(void *)a5 = a1;
  *(unsigned char *)(a5 + 8) = a2 & 1;
  uint64_t v8 = type metadata accessor for SectionPicker();
  uint64_t v9 = a5 + *(int *)(v8 + 36);
  uint64_t v10 = type metadata accessor for PickerStyleConfiguration();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 32))(v9, a3, v10);
  uint64_t v11 = a5 + *(int *)(v8 + 40);
  long long v12 = *(_OWORD *)(a4 + 16);
  *(_OWORD *)uint64_t v11 = *(_OWORD *)a4;
  *(_OWORD *)(v11 + 16) = v12;
  __n128 result = *(__n128 *)(a4 + 32);
  *(__n128 *)(v11 + 32) = result;
  *(void *)(v11 + 48) = *(void *)(a4 + 48);
  return result;
}

uint64_t SectionPicker.labelsVisibility.getter()
{
  uint64_t v1 = *(void *)v0;
  char v2 = *(unsigned char *)(v0 + 8);
  outlined copy of Environment<Bool>.Content(v1, v2);
  uint64_t v3 = specialized Environment.wrappedValue.getter(v1, v2);
  outlined consume of Environment<Bool>.Content(v1, v2);
  return v3;
}

double protocol witness for static Rule.initialValue.getter in conformance SectionPickerStyle.Body<A>@<D0>(_OWORD *a1@<X8>)
{
  double result = 0.0;
  a1[3] = 0u;
  a1[4] = 0u;
  a1[1] = 0u;
  a1[2] = 0u;
  *a1 = 0u;
  return result;
}

uint64_t protocol witness for Rule.value.getter in conformance SectionPickerStyle.Body<A>(uint64_t a1)
{
  return SectionPickerStyle.Body.value.getter(*v1, *(void *)(a1 + 16), *(void *)(a1 + 24));
}

uint64_t type metadata accessor for SectionPicker()
{
  return __swift_instantiateGenericMetadata();
}

unint64_t lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, SectionStyleModifier<MenuPickerOptionSectionStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>()
{
  unint64_t result = lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, SectionStyleModifier<MenuPickerOptionSectionStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>;
  if (!lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, SectionStyleModifier<MenuPickerOptionSectionStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>)
  {
    type metadata accessor for StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, SectionStyleModifier<MenuPickerOptionSectionStyle>, EmptyModifier>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, SectionStyleModifier<MenuPickerOptionSectionStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>);
  }
  return result;
}

uint64_t type metadata accessor for SectionPickerStyle.Body()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata completion function for SectionPicker()
{
  uint64_t result = type metadata accessor for PickerStyleConfiguration();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for SectionPicker(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v6 = *(_DWORD *)(v5 + 80);
  uint64_t v7 = ~(v6 | 7);
  uint64_t v8 = ((v6 + 16) & ~v6) + *(void *)(v5 + 64);
  unint64_t v9 = ((v8 + 7) & 0xFFFFFFFFFFFFFFF8) + 9;
  if (v6 > 7 || (*(_DWORD *)(v5 + 80) & 0x100000) != 0 || (((v6 | 7) + 9) & ~(v6 | 7)) + v9 + 63 > 0x18)
  {
    uint64_t v12 = *(void *)a2;
    *(void *)a1 = *(void *)a2;
    a1 = v12 + ((v6 + 16) & v7);
    swift_retain();
  }
  else
  {
    uint64_t v13 = ~v6;
    uint64_t v14 = *(void *)a2;
    char v15 = *(unsigned char *)(a2 + 8);
    uint64_t v33 = *(void *)(a3 + 16);
    outlined copy of Environment<Bool>.Content(*(void *)a2, v15);
    *(void *)a1 = v14;
    *(unsigned char *)(a1 + 8) = v15;
    uint64_t v16 = (a1 + 16) & v7;
    uint64_t v17 = (a2 + 16) & v7;
    *(void *)uint64_t v16 = *(void *)v17;
    uint64_t v18 = (void *)((v16 + 15) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v19 = (void *)((v17 + 15) & 0xFFFFFFFFFFFFFFF8);
    *uint64_t v18 = *v19;
    uint64_t v20 = v6 + 8;
    uint64_t v21 = ((unint64_t)v18 + v6 + 8) & ~v6;
    unint64_t v22 = ((unint64_t)v19 + v20) & v13;
    uint64_t v23 = *(void (**)(uint64_t, unint64_t, uint64_t))(v5 + 16);
    swift_retain();
    swift_retain();
    v23(v21, v22, v33);
    unint64_t v24 = ((v16 | 7) + v8) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v25 = ((v17 | 7) + v8) & 0xFFFFFFFFFFFFFFF8;
    *(void *)unint64_t v24 = *(void *)v25;
    *(unsigned char *)(v24 + 8) = *(unsigned char *)(v25 + 8);
    uint64_t v26 = (void *)((v16 | 7) + v9);
    uint64_t v27 = (void *)((v17 | 7) + v9);
    uint64_t v28 = v27[3];
    v26[3] = v28;
    v26[4] = v27[4];
    uint64_t v29 = **(void (***)(void *, void *, uint64_t))(v28 - 8);
    swift_bridgeObjectRetain();
    v29(v26, v27, v28);
    uint64_t v30 = (void *)v27[5];
    v26[5] = v30;
    v26[6] = v27[6];
    id v31 = v30;
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t destroy for SectionPicker(uint64_t a1, uint64_t a2)
{
  outlined consume of Environment<Bool>.Content(*(void *)a1, *(unsigned char *)(a1 + 8));
  uint64_t v4 = *(void *)(a2 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v7 = (a1 + (v6 | 7) + 9) & ~(v6 | 7);
  swift_release();
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v5 + 8))((v6 + ((v7 + 15) & 0xFFFFFFFFFFFFFFF8) + 8) & ~v6, v4);
  uint64_t v8 = *(void *)(v5 + 64) + ((v6 + 16) & ~v6) + 7;
  swift_bridgeObjectRelease();
  unint64_t v9 = v7 + (v8 & 0xFFFFFFFFFFFFFFF8);
  __swift_destroy_boxed_opaque_existential_1(v9 + 16);

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for SectionPicker(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)a2;
  char v7 = *(unsigned char *)(a2 + 8);
  outlined copy of Environment<Bool>.Content(*(void *)a2, v7);
  *(void *)a1 = v6;
  *(unsigned char *)(a1 + 8) = v7;
  uint64_t v8 = *(void *)(a3 + 16);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16);
  uint64_t v11 = v9 + 16;
  uint64_t v12 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v13 = (v12 | 7) + 9;
  char v15 = (void *)((v13 + a2) & ~(v12 | 7));
  uint64_t v14 = (void *)((v13 + a1) & ~(v12 | 7));
  *uint64_t v14 = *v15;
  uint64_t v16 = (void *)(((unint64_t)v14 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v17 = (void *)(((unint64_t)v15 + 15) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v16 = *v17;
  uint64_t v18 = ((unint64_t)v16 + v12 + 8) & ~v12;
  uint64_t v19 = ((unint64_t)v17 + v12 + 8) & ~v12;
  swift_retain();
  swift_retain();
  v10(v18, v19, v8);
  uint64_t v20 = *(void *)(v11 + 48) + ((v12 + 16) & ~v12) + 7;
  unint64_t v21 = ((unint64_t)v14 + v20) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v22 = ((unint64_t)v15 + v20) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v21 = *(void *)v22;
  *(unsigned char *)(v21 + 8) = *(unsigned char *)(v22 + 8);
  unint64_t v23 = (v20 & 0xFFFFFFFFFFFFFFF8) + 9;
  unint64_t v24 = (char *)v14 + v23;
  uint64_t v25 = (uint64_t)v14 + v23 + 7;
  uint64_t v26 = (char *)v15 + v23;
  uint64_t v27 = (uint64_t)v15 + v23 + 7;
  uint64_t v28 = *(void *)((char *)v15 + v23 + 31);
  *(void *)(v24 + 31) = v28;
  *(void *)(v24 + 39) = *(void *)((char *)v15 + v23 + 39);
  uint64_t v29 = **(void (***)(uint64_t, uint64_t, uint64_t))(v28 - 8);
  swift_bridgeObjectRetain();
  v29(v25, v27, v28);
  uint64_t v30 = *(void **)(v26 + 47);
  *(void *)(v24 + 47) = v30;
  *(void *)(v24 + 55) = *(void *)(v26 + 55);
  id v31 = v30;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for SectionPicker(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)a2;
  char v7 = *(unsigned char *)(a2 + 8);
  outlined copy of Environment<Bool>.Content(*(void *)a2, v7);
  uint64_t v8 = *(void *)a1;
  char v9 = *(unsigned char *)(a1 + 8);
  *(void *)a1 = v6;
  *(unsigned char *)(a1 + 8) = v7;
  outlined consume of Environment<Bool>.Content(v8, v9);
  uint64_t v10 = *(void *)(a3 + 16);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(unsigned __int8 *)(v11 + 80);
  uint64_t v13 = (v12 | 7) + 9;
  uint64_t v14 = (void *)((v13 + a1) & ~(v12 | 7));
  char v15 = (void *)((v13 + a2) & ~(v12 | 7));
  *uint64_t v14 = *v15;
  swift_retain();
  swift_release();
  uint64_t v16 = (void *)(((unint64_t)v14 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v17 = (void *)(((unint64_t)v15 + 15) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v16 = *v17;
  swift_retain();
  swift_release();
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v11 + 24))(((unint64_t)v16 + v12 + 8) & ~v12, ((unint64_t)v17 + v12 + 8) & ~v12, v10);
  uint64_t v18 = *(void *)(v11 + 64) + ((v12 + 16) & ~v12) + 7;
  unint64_t v19 = ((unint64_t)v14 + v18) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v20 = ((unint64_t)v15 + v18) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v19 = *(void *)v20;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(v19 + 8) = *(unsigned char *)(v20 + 8);
  unint64_t v21 = (v18 & 0xFFFFFFFFFFFFFFF8) + 9;
  unint64_t v22 = (char *)v14 + v21;
  unint64_t v23 = (char *)v15 + v21;
  __swift_assign_boxed_opaque_existential_1((void *)((char *)v14 + v21 + 7), (void *)((char *)v15 + v21 + 7));
  unint64_t v24 = *(void **)(v23 + 47);
  uint64_t v25 = *(void **)(v22 + 47);
  *(void *)(v22 + 47) = v24;
  id v26 = v24;

  *(void *)(v22 + 55) = *(void *)(v23 + 55);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t initializeWithTake for SectionPicker(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v5 = *(void (**)(unint64_t, unint64_t))(v4 + 32);
  uint64_t v6 = v4 + 32;
  uint64_t v7 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v8 = (v7 | 7) + 9;
  char v9 = (void *)((v8 + a1) & ~(v7 | 7));
  uint64_t v10 = (void *)((v8 + a2) & ~(v7 | 7));
  *char v9 = *v10;
  uint64_t v11 = (void *)(((unint64_t)v9 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v12 = (void *)(((unint64_t)v10 + 15) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v11 = *v12;
  v5(((unint64_t)v11 + v7 + 8) & ~v7, ((unint64_t)v12 + v7 + 8) & ~v7);
  uint64_t v13 = *(void *)(v6 + 32) + ((v7 + 16) & ~v7) + 7;
  unint64_t v14 = ((unint64_t)v9 + v13) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v15 = ((unint64_t)v10 + v13) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v14 = *(void *)v15;
  *(unsigned char *)(v14 + 8) = *(unsigned char *)(v15 + 8);
  unint64_t v16 = (v13 & 0xFFFFFFFFFFFFFFF8) + 9;
  uint64_t v17 = (char *)v9 + v16;
  uint64_t v18 = (char *)v10 + v16;
  uint64_t v19 = *(void *)(v18 + 55);
  long long v20 = *(_OWORD *)(v18 + 39);
  long long v21 = *(_OWORD *)(v18 + 23);
  *(_OWORD *)(v17 + 7) = *(_OWORD *)(v18 + 7);
  *(_OWORD *)(v17 + 23) = v21;
  *(_OWORD *)(v17 + 39) = v20;
  *(void *)(v17 + 55) = v19;
  return a1;
}

uint64_t assignWithTake for SectionPicker(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  char v7 = *((unsigned char *)a2 + 8);
  uint64_t v8 = *(void *)a1;
  char v9 = *(unsigned char *)(a1 + 8);
  *(void *)a1 = v6;
  *(unsigned char *)(a1 + 8) = v7;
  outlined consume of Environment<Bool>.Content(v8, v9);
  uint64_t v10 = *(void *)(a3 + 16);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(unsigned __int8 *)(v11 + 80);
  uint64_t v13 = (v12 | 7) + 9;
  unint64_t v14 = (void *)((v13 + a1) & ~(v12 | 7));
  unint64_t v15 = (void *)(((unint64_t)a2 + v13) & ~(v12 | 7));
  *unint64_t v14 = *v15;
  swift_release();
  unint64_t v16 = (void *)(((unint64_t)v14 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v17 = (void *)(((unint64_t)v15 + 15) & 0xFFFFFFFFFFFFFFF8);
  *unint64_t v16 = *v17;
  swift_release();
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v11 + 40))(((unint64_t)v16 + v12 + 8) & ~v12, ((unint64_t)v17 + v12 + 8) & ~v12, v10);
  uint64_t v18 = *(void *)(v11 + 64) + ((v12 + 16) & ~v12) + 7;
  unint64_t v19 = ((unint64_t)v14 + v18) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v20 = ((unint64_t)v15 + v18) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v19 = *(void *)v20;
  swift_bridgeObjectRelease();
  *(unsigned char *)(v19 + 8) = *(unsigned char *)(v20 + 8);
  unint64_t v21 = (v18 & 0xFFFFFFFFFFFFFFF8) + 9;
  unint64_t v22 = (char *)v14 + v21;
  unint64_t v23 = (char *)v15 + v21;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v14 + v21 + 7);
  long long v24 = *(_OWORD *)(v23 + 7);
  long long v25 = *(_OWORD *)(v23 + 23);
  *(void *)(v22 + 39) = *(void *)(v23 + 39);
  *(_OWORD *)(v22 + 23) = v25;
  *(_OWORD *)(v22 + 7) = v24;
  id v26 = *(void **)(v22 + 47);
  *(void *)(v22 + 47) = *(void *)(v23 + 47);

  *(void *)(v22 + 55) = *(void *)(v23 + 55);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for SectionPicker(_DWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  if (v5 <= 0x7FFFFFFF) {
    unsigned int v7 = 0x7FFFFFFF;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  uint64_t v8 = v6 | 7;
  if (v7 < a2)
  {
    unint64_t v9 = ((v8 + 9) & ~v8)
       + ((*(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) + ((v6 + 16) & ~v6) + 7) & 0xFFFFFFFFFFFFFFF8)
       + 72;
    unsigned int v10 = a2 - v7;
    uint64_t v11 = v9 & 0xFFFFFFF8;
    if ((v9 & 0xFFFFFFF8) != 0) {
      unsigned int v12 = 2;
    }
    else {
      unsigned int v12 = v10 + 1;
    }
    if (v12 >= 0x10000) {
      unsigned int v13 = 4;
    }
    else {
      unsigned int v13 = 2;
    }
    if (v12 < 0x100) {
      unsigned int v13 = 1;
    }
    if (v12 >= 2) {
      uint64_t v14 = v13;
    }
    else {
      uint64_t v14 = 0;
    }
    switch(v14)
    {
      case 1:
        int v15 = *((unsigned __int8 *)a1 + v9);
        if (!v15) {
          break;
        }
        goto LABEL_22;
      case 2:
        int v15 = *(unsigned __int16 *)((char *)a1 + v9);
        if (v15) {
          goto LABEL_22;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x187B9689CLL);
      case 4:
        int v15 = *(_DWORD *)((char *)a1 + v9);
        if (!v15) {
          break;
        }
LABEL_22:
        int v17 = v15 - 1;
        if (v11)
        {
          int v17 = 0;
          LODWORD(v11) = *a1;
        }
        return v7 + (v11 | v17) + 1;
      default:
        break;
    }
  }
  uint64_t v18 = (unint64_t *)(((((unint64_t)a1 + v8 + 9) & ~v8) + 15) & 0xFFFFFFFFFFFFFFF8);
  if ((v5 & 0x80000000) != 0) {
    return (*(uint64_t (**)(unint64_t))(v4 + 48))(((unint64_t)v18 + v6 + 8) & ~v6);
  }
  unint64_t v19 = *v18;
  if (v19 >= 0xFFFFFFFF) {
    LODWORD(v19) = -1;
  }
  return (v19 + 1);
}

void storeEnumTagSinglePayload for SectionPicker(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(unsigned __int8 *)(v6 + 80);
  size_t v10 = (((v9 | 7) + 9) & ~(v9 | 7))
      + ((*(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64) + ((v9 + 16) & ~v9) + 7) & 0xFFFFFFFFFFFFFFF8)
      + 72;
  if (v8 >= a3)
  {
    int v14 = 0;
    int v15 = a2 - v8;
    if (a2 <= v8)
    {
LABEL_17:
      switch(v14)
      {
        case 1:
          a1[v10] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_30;
        case 2:
          *(_WORD *)&a1[v10] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_30;
        case 3:
          goto LABEL_43;
        case 4:
          *(_DWORD *)&a1[v10] = 0;
          goto LABEL_29;
        default:
LABEL_29:
          if (a2)
          {
LABEL_30:
            uint64_t v18 = (void *)((((unint64_t)&a1[(v9 | 7) + 9] & ~(v9 | 7)) + 15) & 0xFFFFFFFFFFFFFFF8);
            if ((v7 & 0x80000000) != 0)
            {
              unint64_t v20 = *(void (**)(unint64_t))(v6 + 56);
              v20(((unint64_t)v18 + v9 + 8) & ~v9);
            }
            else
            {
              if ((a2 & 0x80000000) != 0) {
                uint64_t v19 = a2 ^ 0x80000000;
              }
              else {
                uint64_t v19 = a2 - 1;
              }
              *uint64_t v18 = v19;
            }
          }
          break;
      }
      return;
    }
  }
  else
  {
    unsigned int v11 = a3 - v8;
    if ((((v9 | 7) + 9) & ~(v9 | 7))
       + ((*(_DWORD *)(*(void *)(*(void *)(a4 + 16) - 8) + 64) + ((v9 + 16) & ~v9) + 7) & 0xFFFFFFF8) == -72)
      unsigned int v12 = v11 + 1;
    else {
      unsigned int v12 = 2;
    }
    if (v12 >= 0x10000) {
      int v13 = 4;
    }
    else {
      int v13 = 2;
    }
    if (v12 < 0x100) {
      int v13 = 1;
    }
    if (v12 >= 2) {
      int v14 = v13;
    }
    else {
      int v14 = 0;
    }
    int v15 = a2 - v8;
    if (a2 <= v8) {
      goto LABEL_17;
    }
  }
  if ((((v9 | 7) + 9) & ~(v9 | 7))
     + ((*(_DWORD *)(*(void *)(*(void *)(a4 + 16) - 8) + 64) + ((v9 + 16) & ~v9) + 7) & 0xFFFFFFF8) == -72)
    int v16 = v15;
  else {
    int v16 = 1;
  }
  if ((((v9 | 7) + 9) & ~(v9 | 7))
     + ((*(_DWORD *)(*(void *)(*(void *)(a4 + 16) - 8) + 64) + ((v9 + 16) & ~v9) + 7) & 0xFFFFFFF8) != -72)
  {
    int v17 = ~v8 + a2;
    bzero(a1, v10);
    *(_DWORD *)a1 = v17;
  }
  switch(v14)
  {
    case 1:
      a1[v10] = v16;
      break;
    case 2:
      *(_WORD *)&a1[v10] = v16;
      break;
    case 3:
LABEL_43:
      __break(1u);
      JUMPOUT(0x187B96AC8);
    case 4:
      *(_DWORD *)&a1[v10] = v16;
      break;
    default:
      return;
  }
}

ValueMetadata *type metadata accessor for AllowSectionPickerLabels()
{
  return &type metadata for AllowSectionPickerLabels;
}

uint64_t SectionPicker.body.getter(uint64_t a1)
{
  uint64_t v3 = v1 + *(int *)(a1 + 36);
  uint64_t v4 = v1;
  uint64_t v5 = *(void *)(v3 + *(int *)(type metadata accessor for PickerStyleConfiguration() + 36));
  outlined init with copy of SubviewsCollection(v4 + *(int *)(a1 + 40), (uint64_t)&v34);
  PickerContentView.init(selection:items:)(v5, (uint64_t)&v34, (uint64_t)v40);
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v17 = swift_getKeyPath();
  uint64_t v6 = swift_getKeyPath();
  lazy protocol witness table accessor for type CGFloat and conformance CGFloat();
  swift_bridgeObjectRetain();
  ScaledMetric.init(wrappedValue:)();
  uint64_t v7 = v34;
  char v8 = v35;
  uint64_t v9 = v36;
  LOBYTE(v4) = v37;
  uint64_t v19 = (ValueMetadata *)KeyPath;
  LOBYTE(v20) = 0;
  uint64_t v21 = v17;
  LOBYTE(v22) = 0;
  uint64_t v23 = v6;
  uint64_t v24 = 0;
  uint64_t v25 = 0;
  uint64_t v26 = 0;
  char v27 = 0;
  uint64_t v28 = v34;
  char v29 = v35;
  uint64_t v30 = v36;
  char v31 = v37;
  uint64_t v32 = v38;
  char v33 = v39;
  uint64_t v10 = type metadata accessor for PickerContentView();
  uint64_t WitnessTable = swift_getWitnessTable();
  lazy protocol witness table accessor for type CheckmarkToggleStyle and conformance CheckmarkToggleStyle();
  View.toggleStyle<A>(_:)((uint64_t)&v19, v10, (uint64_t)&type metadata for CheckmarkToggleStyle, WitnessTable);
  outlined consume of Environment<Bool>.Content(KeyPath, 0);
  outlined consume of Environment<Bool>.Content(v17, 0);
  outlined consume of Environment<HoverEffectContext?>.Content(v6, 0, 0, 0, 0);
  outlined consume of Environment<Bool>.Content(v7, v8);
  outlined consume of Environment<Bool>.Content(v9, v4);
  type metadata accessor for PickerStyleConfiguration.Label();
  uint64_t v11 = type metadata accessor for Optional();
  uint64_t v12 = type metadata accessor for Optional();
  unint64_t v13 = lazy protocol witness table accessor for type AllowSectionPickerLabels and conformance AllowSectionPickerLabels();
  uint64_t v19 = &type metadata for AllowSectionPickerLabels;
  uint64_t v20 = v11;
  uint64_t v21 = v12;
  unint64_t v22 = v13;
  type metadata accessor for StaticIf();
  type metadata accessor for SectionStyleModifier<MenuPickerOptionSectionStyle>(255, &lazy cache variable for type metadata for ToggleStyleModifier<CheckmarkToggleStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type CheckmarkToggleStyle and conformance CheckmarkToggleStyle, (uint64_t)&type metadata for CheckmarkToggleStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ToggleStyleModifier);
  uint64_t v14 = type metadata accessor for ModifiedContent();
  type metadata accessor for Section();
  type metadata accessor for Section();
  swift_getWitnessTable();
  swift_getWitnessTable();
  swift_getWitnessTable();
  swift_getWitnessTable();
  swift_getWitnessTable();
  swift_getWitnessTable();
  StaticIf<>.init<A>(in:then:else:)();
  (*(void (**)(unsigned char *, uint64_t))(*(void *)(v10 - 8) + 8))(v40, v10);
  return (*(uint64_t (**)(uint64_t *, uint64_t))(*(void *)(v14 - 8) + 8))(&v34, v14);
}

uint64_t closure #1 in SectionPicker.body.getter()
{
  type metadata accessor for SectionPicker();
  SectionPicker.styledMenuHeader.getter();
  v5[0] = v5[3];
  v5[1] = v5[4];
  v5[2] = v5[5];
  type metadata accessor for PickerStyleConfiguration.Label();
  v7[0] = &type metadata for AllowSectionPickerLabels;
  v7[1] = type metadata accessor for Optional();
  v7[2] = type metadata accessor for Optional();
  v7[3] = lazy protocol witness table accessor for type AllowSectionPickerLabels and conformance AllowSectionPickerLabels();
  uint64_t v0 = type metadata accessor for StaticIf();
  type metadata accessor for PickerContentView();
  type metadata accessor for SectionStyleModifier<MenuPickerOptionSectionStyle>(255, &lazy cache variable for type metadata for ToggleStyleModifier<CheckmarkToggleStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type CheckmarkToggleStyle and conformance CheckmarkToggleStyle, (uint64_t)&type metadata for CheckmarkToggleStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ToggleStyleModifier);
  uint64_t v1 = type metadata accessor for ModifiedContent();
  swift_getWitnessTable();
  swift_getWitnessTable();
  swift_getWitnessTable();
  swift_getWitnessTable();
  swift_getWitnessTable();
  Section<>.init(header:content:)((uint64_t)v5, (void (*)(uint64_t))partial apply for closure #1 in closure #1 in SectionPicker.body.getter, v0, v1, (uint64_t)v6);
  uint64_t v2 = type metadata accessor for Section();
  swift_getWitnessTable();
  static ViewBuilder.buildExpression<A>(_:)(v6);
  uint64_t v3 = *(void (**)(unsigned char *, uint64_t))(*(void *)(v2 - 8) + 8);
  v3(v6, v2);
  static ViewBuilder.buildExpression<A>(_:)(v7);
  return ((uint64_t (*)(void *, uint64_t))v3)(v7, v2);
}

uint64_t SectionPicker.styledMenuHeader.getter()
{
  type metadata accessor for PickerStyleConfiguration.Label();
  type metadata accessor for Optional();
  type metadata accessor for Optional();
  lazy protocol witness table accessor for type AllowSectionPickerLabels and conformance AllowSectionPickerLabels();
  uint64_t v4 = &protocol witness table for PickerStyleConfiguration<A>.Label;
  uint64_t WitnessTable = swift_getWitnessTable();
  swift_getWitnessTable();
  StaticIf<>.init(_:then:else:)();
  unsigned __int16 v1 = v5;
  char v2 = v6;
  type metadata accessor for StaticIf();
  swift_getWitnessTable();
  static ViewBuilder.buildExpression<A>(_:)(&v1);
  unsigned __int16 v5 = (unsigned __int16)&type metadata for AllowSectionPickerLabels;
  char v6 = &type metadata for AllowSectionPickerLabels >> 16;
  return static ViewBuilder.buildExpression<A>(_:)(&v5);
}

uint64_t closure #2 in SectionPicker.body.getter()
{
  uint64_t v0 = type metadata accessor for SectionPicker();
  SectionPicker.styledHeader.getter(v0);
  char v6 = v8[0];
  type metadata accessor for PickerStyleConfiguration.Label();
  uint64_t v1 = type metadata accessor for Optional();
  type metadata accessor for PickerContentView();
  type metadata accessor for SectionStyleModifier<MenuPickerOptionSectionStyle>(255, &lazy cache variable for type metadata for ToggleStyleModifier<CheckmarkToggleStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type CheckmarkToggleStyle and conformance CheckmarkToggleStyle, (uint64_t)&type metadata for CheckmarkToggleStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ToggleStyleModifier);
  uint64_t v2 = type metadata accessor for ModifiedContent();
  swift_getWitnessTable();
  swift_getWitnessTable();
  swift_getWitnessTable();
  Section<>.init(header:content:)((uint64_t)&v6, (void (*)(uint64_t))partial apply for closure #1 in closure #2 in SectionPicker.body.getter, v1, v2, (uint64_t)v7);
  uint64_t v3 = type metadata accessor for Section();
  swift_getWitnessTable();
  static ViewBuilder.buildExpression<A>(_:)(v7);
  uint64_t v4 = *(void (**)(unsigned char *, uint64_t))(*(void *)(v3 - 8) + 8);
  v4(v7, v3);
  static ViewBuilder.buildExpression<A>(_:)(v8);
  return ((uint64_t (*)(unsigned char *, uint64_t))v4)(v8, v3);
}

uint64_t SectionPicker.styledHeader.getter(uint64_t a1)
{
  if (SectionPicker.labelsVisibility.getter() == 2)
  {
    char v8 = 1;
    type metadata accessor for PickerStyleConfiguration.Label();
    static ToolbarContentBuilder.buildIf<A>(_:)((uint64_t)&v8, (uint64_t)&v9);
    char v4 = v9;
  }
  else
  {
    destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(*(void *)(a1 + 16), *(void *)(a1 + 24), v2, v3);
    uint64_t v5 = type metadata accessor for PickerStyleConfiguration.Label();
    uint64_t v6 = static ViewBuilder.buildExpression<A>(_:)(v5);
    static ViewBuilder.buildExpression<A>(_:)(v6);
    char v12 = 0;
    static ToolbarContentBuilder.buildIf<A>(_:)((uint64_t)&v12, (uint64_t)&v13);
    char v4 = v13;
  }
  char v11 = v4;
  type metadata accessor for PickerStyleConfiguration.Label();
  type metadata accessor for Optional();
  uint64_t v10 = &protocol witness table for PickerStyleConfiguration<A>.Label;
  swift_getWitnessTable();
  return static ViewBuilder.buildExpression<A>(_:)(&v11);
}

uint64_t closure #1 in closure #1 in SectionPicker.body.getter(uint64_t a1)
{
  type metadata accessor for PickerContentView();
  type metadata accessor for SectionStyleModifier<MenuPickerOptionSectionStyle>(255, &lazy cache variable for type metadata for ToggleStyleModifier<CheckmarkToggleStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type CheckmarkToggleStyle and conformance CheckmarkToggleStyle, (uint64_t)&type metadata for CheckmarkToggleStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ToggleStyleModifier);
  uint64_t v2 = type metadata accessor for ModifiedContent();
  swift_getWitnessTable();
  swift_getWitnessTable();
  static ViewBuilder.buildExpression<A>(_:)(a1);
  static ViewBuilder.buildExpression<A>(_:)(v4);
  return (*(uint64_t (**)(unsigned char *, uint64_t))(*(void *)(v2 - 8) + 8))(v4, v2);
}

uint64_t closure #1 in SectionPicker.styledMenuHeader.getter()
{
  uint64_t v0 = type metadata accessor for SectionPicker();
  SectionPicker.styledHeader.getter(v0);
  v4[0] = v4[1];
  type metadata accessor for PickerStyleConfiguration.Label();
  type metadata accessor for Optional();
  uint64_t v3 = &protocol witness table for PickerStyleConfiguration<A>.Label;
  swift_getWitnessTable();
  static ViewBuilder.buildExpression<A>(_:)(v4);
  char v2 = v4[2];
  return static ViewBuilder.buildExpression<A>(_:)(&v2);
}

uint64_t closure #2 in SectionPicker.styledMenuHeader.getter()
{
  if (SectionPicker.labelsVisibility.getter() == 1)
  {
    uint64_t v0 = type metadata accessor for SectionPicker();
    SectionPicker.styledHeader.getter(v0);
    LOBYTE(v4) = v5;
    type metadata accessor for PickerStyleConfiguration.Label();
    type metadata accessor for Optional();
    swift_getWitnessTable();
    static ViewBuilder.buildExpression<A>(_:)(&v4);
    char v5 = v3;
    static ViewBuilder.buildExpression<A>(_:)(&v5);
    __int16 v4 = v2;
  }
  else
  {
    __int16 v4 = 256;
    type metadata accessor for PickerStyleConfiguration.Label();
    type metadata accessor for Optional();
    swift_getWitnessTable();
  }
  static ToolbarContentBuilder.buildIf<A>(_:)((uint64_t)&v4, (uint64_t)&v5);
  type metadata accessor for PickerStyleConfiguration.Label();
  type metadata accessor for Optional();
  type metadata accessor for Optional();
  swift_getWitnessTable();
  swift_getWitnessTable();
  return static ViewBuilder.buildExpression<A>(_:)(&v5);
}

uint64_t protocol witness for static ViewInputPredicate.evaluate(inputs:) in conformance AllowSectionPickerLabels()
{
  lazy protocol witness table accessor for type AllowSectionPickerLabels and conformance AllowSectionPickerLabels();
  PropertyList.subscript.getter();
  return v1;
}

uint64_t protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance AllowSectionPickerLabels()
{
  return PropertyList.subscript.setter();
}

unint64_t lazy protocol witness table accessor for type AllowSectionPickerLabels and conformance AllowSectionPickerLabels()
{
  unint64_t result = lazy protocol witness table cache variable for type AllowSectionPickerLabels and conformance AllowSectionPickerLabels;
  if (!lazy protocol witness table cache variable for type AllowSectionPickerLabels and conformance AllowSectionPickerLabels)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AllowSectionPickerLabels and conformance AllowSectionPickerLabels);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AllowSectionPickerLabels and conformance AllowSectionPickerLabels;
  if (!lazy protocol witness table cache variable for type AllowSectionPickerLabels and conformance AllowSectionPickerLabels)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AllowSectionPickerLabels and conformance AllowSectionPickerLabels);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AllowSectionPickerLabels and conformance AllowSectionPickerLabels;
  if (!lazy protocol witness table cache variable for type AllowSectionPickerLabels and conformance AllowSectionPickerLabels)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AllowSectionPickerLabels and conformance AllowSectionPickerLabels);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AllowSectionPickerLabels and conformance AllowSectionPickerLabels;
  if (!lazy protocol witness table cache variable for type AllowSectionPickerLabels and conformance AllowSectionPickerLabels)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AllowSectionPickerLabels and conformance AllowSectionPickerLabels);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AllowSectionPickerLabels and conformance AllowSectionPickerLabels;
  if (!lazy protocol witness table cache variable for type AllowSectionPickerLabels and conformance AllowSectionPickerLabels)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AllowSectionPickerLabels and conformance AllowSectionPickerLabels);
  }
  return result;
}

_UNKNOWN **base witness table accessor for _GraphInputsModifier in AllowSectionPickerLabels()
{
  return &protocol witness table for AllowSectionPickerLabels;
}

uint64_t base witness table accessor for _AttributeBody in SectionPickerStyle.Body<A>()
{
  return swift_getWitnessTable();
}

uint64_t associated type witness table accessor for View.Body : View in SectionPicker<A>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t partial apply for closure #1 in SectionPicker.body.getter()
{
  return closure #1 in SectionPicker.body.getter();
}

uint64_t partial apply for closure #2 in SectionPicker.body.getter()
{
  return closure #2 in SectionPicker.body.getter();
}

uint64_t partial apply for closure #1 in closure #2 in SectionPicker.body.getter()
{
  return closure #1 in closure #1 in SectionPicker.body.getter(*(void *)(v0 + 32));
}

uint64_t partial apply for closure #1 in SectionPicker.styledMenuHeader.getter()
{
  return closure #1 in SectionPicker.styledMenuHeader.getter();
}

uint64_t partial apply for closure #2 in SectionPicker.styledMenuHeader.getter()
{
  return closure #2 in SectionPicker.styledMenuHeader.getter();
}

uint64_t sub_187B97F64()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in SectionPickerStyle.Body.value.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return closure #1 in SectionPickerStyle.Body.value.getter(a1, *(_DWORD *)(v2 + 32), *(void *)(v2 + 16), *(void *)(v2 + 24), a2);
}

uint64_t sub_187B97F88()
{
  return swift_getWitnessTable();
}

uint64_t destroy for TableColumnCollection.Backing(uint64_t a1)
{
  unsigned int v1 = *(unsigned __int8 *)(a1 + 40);
  if (v1 >= 2) {
    unsigned int v1 = *(_DWORD *)a1 + 2;
  }
  if (v1 != 1) {
    return __swift_destroy_boxed_opaque_existential_1(a1);
  }

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for TableColumnCollection.Backing(uint64_t a1, uint64_t a2)
{
  unsigned int v3 = *(unsigned __int8 *)(a2 + 40);
  if (v3 >= 2) {
    unsigned int v3 = *(_DWORD *)a2 + 2;
  }
  if (v3 == 1)
  {
    *(void *)a1 = *(void *)a2;
    swift_bridgeObjectRetain();
    char v4 = 1;
  }
  else
  {
    long long v5 = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 24) = v5;
    (**(void (***)(uint64_t))(v5 - 8))(a1);
    char v4 = 0;
  }
  *(unsigned char *)(a1 + 40) = v4;
  return a1;
}

uint64_t assignWithCopy for TableColumnCollection.Backing(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    unsigned int v4 = *(unsigned __int8 *)(a1 + 40);
    if (v4 >= 2) {
      unsigned int v4 = *(_DWORD *)a1 + 2;
    }
    if (v4 == 1) {
      swift_bridgeObjectRelease();
    }
    else {
      __swift_destroy_boxed_opaque_existential_1(a1);
    }
    unsigned int v5 = *(unsigned __int8 *)(a2 + 40);
    if (v5 >= 2) {
      unsigned int v5 = *(_DWORD *)a2 + 2;
    }
    if (v5 == 1)
    {
      *(void *)a1 = *(void *)a2;
      *(unsigned char *)(a1 + 40) = 1;
      swift_bridgeObjectRetain();
    }
    else
    {
      uint64_t v6 = *(void *)(a2 + 24);
      *(void *)(a1 + 24) = v6;
      *(void *)(a1 + 32) = *(void *)(a2 + 32);
      (**(void (***)(uint64_t, uint64_t))(v6 - 8))(a1, a2);
      *(unsigned char *)(a1 + 40) = 0;
    }
  }
  return a1;
}

uint64_t assignWithTake for TableColumnCollection.Backing(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    unsigned int v4 = *(unsigned __int8 *)(a1 + 40);
    if (v4 >= 2) {
      unsigned int v4 = *(_DWORD *)a1 + 2;
    }
    if (v4 == 1) {
      swift_bridgeObjectRelease();
    }
    else {
      __swift_destroy_boxed_opaque_existential_1(a1);
    }
    unsigned int v5 = *(unsigned __int8 *)(a2 + 40);
    if (v5 >= 2) {
      unsigned int v5 = *(_DWORD *)a2 + 2;
    }
    if (v5 == 1)
    {
      *(void *)a1 = *(void *)a2;
      char v6 = 1;
    }
    else
    {
      char v6 = 0;
      long long v7 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v7;
      *(void *)(a1 + 32) = *(void *)(a2 + 32);
    }
    *(unsigned char *)(a1 + 40) = v6;
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for TableColumnCollection.Backing(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 41)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 40);
  if (v3 >= 2) {
    return (v3 ^ 0xFF) + 1;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for TableColumnCollection.Backing(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_OWORD *)(result + 25) = 0u;
    *(_OWORD *)unint64_t result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_DWORD *)unint64_t result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 41) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 41) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 40) = -(char)a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for TableColumnCollection.Backing()
{
  return &type metadata for TableColumnCollection.Backing;
}

uint64_t specialized RandomAccessCollection<>.index(before:)(uint64_t result)
{
  uint64_t v2 = result - 1;
  if (__OFSUB__(result, 1))
  {
    __break(1u);
  }
  else
  {
    outlined init with copy of TableColumnCollection.Backing(v1, (uint64_t)v9);
    if (v10)
    {
      uint64_t v3 = *(void *)(*(void *)&v9[0] + 16);
      unint64_t result = swift_bridgeObjectRelease();
    }
    else
    {
      outlined init with take of OptionalBinaryInteger(v9, (uint64_t)v6);
      uint64_t v4 = v7;
      uint64_t v5 = v8;
      __swift_project_boxed_opaque_existential_1(v6, v7);
      uint64_t v3 = (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8))(v4, v5);
      unint64_t result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v6);
    }
    if ((v2 & 0x8000000000000000) == 0 && v2 < v3) {
      return v2;
    }
  }
  __break(1u);
  return result;
}

uint64_t TableColumnCollection.Backing.count.getter()
{
  outlined init with copy of TableColumnCollection.Backing(v0, (uint64_t)v8);
  if (v9)
  {
    uint64_t v1 = *(void *)(*(void *)&v8[0] + 16);
    swift_bridgeObjectRelease();
  }
  else
  {
    outlined init with take of OptionalBinaryInteger(v8, (uint64_t)v5);
    uint64_t v2 = v6;
    uint64_t v3 = v7;
    __swift_project_boxed_opaque_existential_1(v5, v6);
    uint64_t v1 = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(v2, v3);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v5);
  }
  return v1;
}

uint64_t TableColumnCollection.subscript.getter@<X0>(unint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  type metadata accessor for TableColumnCollection.Entry?(0);
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v8 = (char *)&v21[-1] - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for TableColumnCollection.Visitor(0);
  MEMORY[0x1F4188790](v9);
  char v11 = (void *)((char *)&v21[-1] - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t result = outlined init with copy of TableColumnCollection.Backing(v3, (uint64_t)v24);
  if (v25)
  {
    if ((a1 & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else
    {
      uint64_t v13 = *(void *)&v24[0];
      if (*(void *)(*(void *)&v24[0] + 16) > a1)
      {
        uint64_t v14 = *(void *)(type metadata accessor for TableColumnCollection.Entry(0) - 8);
        outlined init with copy of TableColumnCollection.Entry(v13+ ((*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80))+ *(void *)(v14 + 72) * a1, a2, type metadata accessor for TableColumnCollection.Entry);
        return swift_bridgeObjectRelease();
      }
    }
    __break(1u);
    goto LABEL_10;
  }
  outlined init with take of OptionalBinaryInteger(v24, (uint64_t)v21);
  uint64_t v15 = (uint64_t)v11 + *(int *)(v9 + 20);
  uint64_t v16 = type metadata accessor for TableColumnCollection.Entry(0);
  uint64_t v17 = *(void *)(v16 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v17 + 56))(v15, 1, 1, v16);
  *char v11 = a1;
  uint64_t v18 = v22;
  uint64_t v19 = v23;
  __swift_project_boxed_opaque_existential_1(v21, v22);
  TableColumnList.visitColumns<A>(applying:from:)((uint64_t)v11, a1, v18, v9, v19, (uint64_t)&protocol witness table for TableColumnCollection.Visitor);
  outlined init with copy of TableColumnCollection.Entry(v15, (uint64_t)v8, (uint64_t (*)(void))type metadata accessor for TableColumnCollection.Entry?);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v17 + 48))(v8, 1, v16);
  if (result == 1)
  {
LABEL_10:
    __break(1u);
    return result;
  }
  outlined destroy of TableColumnCollection.Visitor((uint64_t)v11, type metadata accessor for TableColumnCollection.Visitor);
  outlined init with take of TableColumnCollection.Entry((uint64_t)v8, a2);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v21);
}

uint64_t protocol witness for Identifiable.id.getter in conformance TableColumnCollection.Entry@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for UUID();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 16);

  return v4(a1, v1, v3);
}

uint64_t TableColumnCollection.Visitor.visit<A, B, C, D>(_:id:label:configuration:)(uint64_t a1, uint64_t a2, void *a3, unsigned __int8 *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  *(void *)&long long v61 = a8;
  uint64_t v59 = a6;
  uint64_t v57 = a5;
  id v52 = a3;
  uint64_t v64 = a1;
  uint64_t v58 = a12;
  uint64_t v65 = a11;
  uint64_t v63 = *(void *)(a7 - 8);
  uint64_t v54 = a10;
  uint64_t v53 = a9;
  MEMORY[0x1F4188790](a1);
  uint64_t v62 = (char *)&v50 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for TableColumnCollection.Entry?(0);
  MEMORY[0x1F4188790](v16 - 8);
  uint64_t v18 = (char *)&v50 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = type metadata accessor for UUID();
  uint64_t v20 = *(void *)(v19 - 8);
  double v21 = MEMORY[0x1F4188790](v19);
  uint64_t v23 = (char *)&v50 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  int v60 = *a4;
  uint64_t v24 = *((void *)a4 + 1);
  uint64_t v67 = *((void *)a4 + 2);
  uint64_t v68 = v24;
  uint64_t v25 = *((void *)a4 + 3);
  uint64_t v69 = *((void *)a4 + 4);
  uint64_t v70 = v25;
  int v26 = a4[40];
  int v55 = a4[56];
  int v56 = a4[57];
  char v27 = *(void (**)(char *, uint64_t, uint64_t, double))(v20 + 16);
  v27(v23, a2, v19, v21);
  if (v26 == 255)
  {
    uint64_t v28 = UUID.uuidString.getter();
    uint64_t v69 = v29;
    uint64_t v70 = v28;
    id v30 = objc_msgSend(v52, sel_string);
    uint64_t v31 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v67 = v32;
    uint64_t v68 = v31;

    (*(void (**)(char *, uint64_t))(v20 + 8))(v23, v19);
    LODWORD(v52) = 1;
  }
  else
  {
    LODWORD(v52) = v26 & 1;
    outlined copy of TableColumnCustomizationID.Base(v68, v67, v70, v69, v26 & 1);
    (*(void (**)(char *, uint64_t))(v20 + 8))(v23, v19);
  }
  ((void (*)(char *, uint64_t, uint64_t))v27)(v18, a2, v19);
  char v33 = v66;
  uint64_t v51 = *v66;
  uint64_t v71 = v57;
  uint64_t v72 = v59;
  uint64_t v73 = v61;
  uint64_t v74 = a7;
  uint64_t v75 = v53;
  uint64_t v76 = v54;
  uint64_t v77 = v58;
  uint64_t v78 = v65;
  uint64_t v34 = type metadata accessor for TableColumn();
  uint64_t v35 = *(int *)(v34 + 92);
  uint64_t v36 = v64;
  char v37 = (long long *)(v64 + *(int *)(v34 + 88));
  long long v61 = *v37;
  uint64_t v38 = *((void *)v37 + 2);
  uint64_t v39 = *((void *)v37 + 3);
  char v40 = *((unsigned char *)v37 + 32);
  uint64_t v41 = v64 + v35;
  uint64_t v42 = (int *)type metadata accessor for TableColumnCollection.Entry(0);
  outlined init with copy of TableColumnCollection.Entry(v41, (uint64_t)&v18[v42[11]], (uint64_t (*)(void))type metadata accessor for SwiftUIAnySortComparator?);
  (*(void (**)(char *, uint64_t, uint64_t))(v63 + 16))(v62, v36, a7);
  uint64_t v43 = AnyView.init<A>(_:)();
  unint64_t v44 = &v18[v42[5]];
  uint64_t v45 = v67;
  *(void *)unint64_t v44 = v68;
  *((void *)v44 + 1) = v45;
  uint64_t v46 = v69;
  *((void *)v44 + 2) = v70;
  *((void *)v44 + 3) = v46;
  v44[32] = (char)v52;
  *(void *)&v18[v42[6]] = v51;
  unsigned int v47 = &v18[v42[7]];
  *(_OWORD *)unsigned int v47 = v61;
  *((void *)v47 + 2) = v38;
  *((void *)v47 + 3) = v39;
  v47[32] = v40;
  v18[v42[8]] = v55;
  v18[v42[9]] = v56;
  v18[v42[10]] = v60;
  *(void *)&v18[v42[12]] = v43;
  (*(void (**)(char *, void, uint64_t, int *))(*((void *)v42 - 1) + 56))(v18, 0, 1, v42);
  uint64_t v48 = type metadata accessor for TableColumnCollection.Visitor(0);
  outlined assign with take of TableColumnCollection.Entry?((uint64_t)v18, (uint64_t)v33 + *(int *)(v48 + 20));
  return 0;
}

uint64_t protocol witness for TableColumnVisitor.visit<A, B, C, D>(_:id:label:configuration:) in conformance TableColumnCollection.Visitor(uint64_t a1, uint64_t a2, void *a3, unsigned __int8 *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  return 0;
}

uint64_t protocol witness for BidirectionalCollection.index(before:) in conformance TableColumnCollection@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = specialized RandomAccessCollection<>.index(before:)(*a1);
  *a2 = result;
  return result;
}

uint64_t protocol witness for BidirectionalCollection.formIndex(before:) in conformance TableColumnCollection(uint64_t *a1)
{
  uint64_t result = specialized RandomAccessCollection<>.index(before:)(*a1);
  *a1 = result;
  return result;
}

uint64_t protocol witness for BidirectionalCollection.index(_:offsetBy:) in conformance TableColumnCollection@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result = specialized RandomAccessCollection<>.index(_:offsetBy:)(*a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for BidirectionalCollection.distance(from:to:) in conformance TableColumnCollection(uint64_t *a1, uint64_t *a2)
{
  return specialized RandomAccessCollection<>.distance(from:to:)(*a1, *a2);
}

uint64_t protocol witness for Collection.endIndex.getter in conformance TableColumnCollection@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = TableColumnCollection.Backing.count.getter();
  *a1 = result;
  return result;
}

void (*protocol witness for Collection.subscript.read in conformance TableColumnCollection(void *a1, unint64_t *a2))(uint64_t *a1)
{
  uint64_t v4 = type metadata accessor for TableColumnCollection.Entry(0);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  *a1 = v5;
  TableColumnCollection.subscript.getter(*a2, (uint64_t)v5);
  return protocol witness for Collection.subscript.read in conformance TableColumnCollection;
}

void protocol witness for Collection.subscript.read in conformance TableColumnCollection(uint64_t *a1)
{
  uint64_t v1 = (void *)*a1;
  outlined destroy of TableColumnCollection.Visitor(*a1, type metadata accessor for TableColumnCollection.Entry);

  free(v1);
}

uint64_t protocol witness for Collection.subscript.getter in conformance TableColumnCollection@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  return specialized Collection<>.subscript.getter(*a1, a1[1], a2);
}

uint64_t protocol witness for Collection.indices.getter in conformance TableColumnCollection@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = specialized RandomAccessCollection<>.indices.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t protocol witness for RandomAccessCollection.index(_:offsetBy:limitedBy:) in conformance TableColumnCollection@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6 = *a1;
  uint64_t v7 = specialized RandomAccessCollection<>.distance(from:to:)(*a1, *a3);
  if (a2 < 1)
  {
    if (v7 <= 0 && v7 > a2) {
      goto LABEL_4;
    }
LABEL_10:
    uint64_t result = specialized RandomAccessCollection<>.index(_:offsetBy:)(v6, a2);
    char v9 = 0;
    goto LABEL_11;
  }
  if (v7 < 0 || v7 >= (unint64_t)a2) {
    goto LABEL_10;
  }
LABEL_4:
  uint64_t result = 0;
  char v9 = 1;
LABEL_11:
  *(void *)a4 = result;
  *(unsigned char *)(a4 + 8) = v9;
  return result;
}

uint64_t protocol witness for Collection.index(after:) in conformance TableColumnCollection@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = specialized RandomAccessCollection<>.index(after:)(*a1);
  *a2 = result;
  return result;
}

uint64_t protocol witness for Collection.formIndex(after:) in conformance TableColumnCollection(uint64_t *a1)
{
  uint64_t result = specialized RandomAccessCollection<>.index(after:)(*a1);
  *a1 = result;
  return result;
}

__n128 protocol witness for Sequence.makeIterator() in conformance TableColumnCollection@<Q0>(uint64_t a1@<X8>)
{
  long long v2 = *(_OWORD *)(v1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)v1;
  *(_OWORD *)(a1 + 16) = v2;
  __n128 result = *(__n128 *)(v1 + 25);
  *(__n128 *)(a1 + 25) = result;
  *(void *)(a1 + 48) = 0;
  return result;
}

uint64_t type metadata accessor for TableColumnCollection.Entry(uint64_t a1)
{
  return type metadata accessor for SortableTableHeaderButton(a1, (uint64_t *)&type metadata singleton initialization cache for TableColumnCollection.Entry);
}

uint64_t type metadata accessor for TableColumnCollection.Visitor(uint64_t a1)
{
  return type metadata accessor for SortableTableHeaderButton(a1, (uint64_t *)&type metadata singleton initialization cache for TableColumnCollection.Visitor);
}

uint64_t outlined init with copy of TableColumnCollection.Entry(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t outlined init with take of TableColumnCollection.Entry(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for TableColumnCollection.Entry(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of TableColumnCollection.Visitor(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

size_t protocol witness for Sequence._copyToContiguousArray() in conformance TableColumnCollection()
{
  size_t v1 = specialized _copyCollectionToContiguousArray<A>(_:)(v0);
  outlined destroy of TableColumnCollection(v0);
  return v1;
}

uint64_t *initializeBufferWithCopyOfBuffer for TableColumnCollection.Visitor(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v11 = *a2;
    uint64_t *v3 = *a2;
    uint64_t v3 = (uint64_t *)(v11 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    *a1 = *a2;
    uint64_t v5 = *(int *)(a3 + 20);
    uint64_t v6 = (char *)a1 + v5;
    uint64_t v7 = (char *)a2 + v5;
    uint64_t v8 = (int *)type metadata accessor for TableColumnCollection.Entry(0);
    uint64_t v9 = *((void *)v8 - 1);
    if ((*(unsigned int (**)(char *, uint64_t, int *))(v9 + 48))(v7, 1, v8))
    {
      type metadata accessor for TableColumnCollection.Entry?(0);
      memcpy(v6, v7, *(void *)(*(void *)(v10 - 8) + 64));
    }
    else
    {
      uint64_t v37 = v9;
      uint64_t v12 = type metadata accessor for UUID();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16))(v6, v7, v12);
      uint64_t v13 = v8[5];
      uint64_t v14 = &v6[v13];
      uint64_t v15 = &v7[v13];
      uint64_t v16 = *(void *)v15;
      uint64_t v17 = *((void *)v15 + 1);
      uint64_t v18 = *((void *)v15 + 2);
      uint64_t v19 = *((void *)v15 + 3);
      char v20 = v15[32];
      outlined copy of TableColumnCustomizationID.Base(*(void *)v15, v17, v18, v19, v20);
      *(void *)uint64_t v14 = v16;
      *((void *)v14 + 1) = v17;
      *((void *)v14 + 2) = v18;
      *((void *)v14 + 3) = v19;
      v14[32] = v20;
      *(void *)&v6[v8[6]] = *(void *)&v7[v8[6]];
      uint64_t v21 = v8[7];
      uint64_t v22 = &v6[v21];
      uint64_t v23 = &v7[v21];
      long long v24 = *((_OWORD *)v23 + 1);
      *(_OWORD *)uint64_t v22 = *(_OWORD *)v23;
      *((_OWORD *)v22 + 1) = v24;
      v22[32] = v23[32];
      v6[v8[8]] = v7[v8[8]];
      v6[v8[9]] = v7[v8[9]];
      v6[v8[10]] = v7[v8[10]];
      uint64_t v25 = v8[11];
      int v26 = &v6[v25];
      char v27 = &v7[v25];
      uint64_t v28 = *(void *)&v7[v25 + 24];
      if (v28)
      {
        *((void *)v26 + 3) = v28;
        (**(void (***)(char *, char *))(v28 - 8))(v26, v27);
        long long v29 = *(_OWORD *)(v27 + 56);
        *(_OWORD *)(v26 + 56) = v29;
        (**(void (***)(uint64_t, uint64_t))(v29 - 8))((uint64_t)(v26 + 32), (uint64_t)(v27 + 32));
        *((void *)v26 + 9) = *((void *)v27 + 9);
        uint64_t v30 = *((void *)v27 + 14);
        long long v31 = *((_OWORD *)v27 + 6);
        *((_OWORD *)v26 + 5) = *((_OWORD *)v27 + 5);
        *((_OWORD *)v26 + 6) = v31;
        *((void *)v26 + 14) = v30;
        swift_retain();
        swift_retain();
        swift_retain();
      }
      else
      {
        long long v32 = *((_OWORD *)v27 + 5);
        *((_OWORD *)v26 + 4) = *((_OWORD *)v27 + 4);
        *((_OWORD *)v26 + 5) = v32;
        *((_OWORD *)v26 + 6) = *((_OWORD *)v27 + 6);
        *((void *)v26 + 14) = *((void *)v27 + 14);
        long long v33 = *((_OWORD *)v27 + 1);
        *(_OWORD *)int v26 = *(_OWORD *)v27;
        *((_OWORD *)v26 + 1) = v33;
        long long v34 = *((_OWORD *)v27 + 3);
        *((_OWORD *)v26 + 2) = *((_OWORD *)v27 + 2);
        *((_OWORD *)v26 + 3) = v34;
      }
      *(void *)&v6[v8[12]] = *(void *)&v7[v8[12]];
      uint64_t v35 = *(void (**)(char *, void, uint64_t, int *))(v37 + 56);
      swift_retain();
      v35(v6, 0, 1, v8);
    }
  }
  return v3;
}

uint64_t destroy for TableColumnCollection.Visitor(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1 + *(int *)(a2 + 20);
  uint64_t v3 = type metadata accessor for TableColumnCollection.Entry(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 48))(v2, 1, v3);
  if (!result)
  {
    uint64_t v5 = type metadata accessor for UUID();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v2, v5);
    uint64_t v6 = v2 + *(int *)(v3 + 20);
    outlined consume of TableColumnCustomizationID.Base(*(void *)v6, *(void *)(v6 + 8), *(void *)(v6 + 16), *(void *)(v6 + 24), *(unsigned char *)(v6 + 32));
    uint64_t v7 = v2 + *(int *)(v3 + 44);
    if (*(void *)(v7 + 24))
    {
      __swift_destroy_boxed_opaque_existential_1(v2 + *(int *)(v3 + 44));
      __swift_destroy_boxed_opaque_existential_1(v7 + 32);
      swift_release();
      swift_release();
      swift_release();
    }
    return swift_release();
  }
  return result;
}

void *initializeWithCopy for TableColumnCollection.Visitor(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  uint64_t v7 = (int *)type metadata accessor for TableColumnCollection.Entry(0);
  uint64_t v8 = *((void *)v7 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v8 + 48))(v6, 1, v7))
  {
    type metadata accessor for TableColumnCollection.Entry?(0);
    memcpy(v5, v6, *(void *)(*(void *)(v9 - 8) + 64));
  }
  else
  {
    uint64_t v35 = v8;
    uint64_t v10 = type metadata accessor for UUID();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16))(v5, v6, v10);
    uint64_t v11 = v7[5];
    uint64_t v12 = &v5[v11];
    uint64_t v13 = &v6[v11];
    uint64_t v14 = *(void *)v13;
    uint64_t v15 = *((void *)v13 + 1);
    uint64_t v16 = *((void *)v13 + 2);
    uint64_t v17 = *((void *)v13 + 3);
    char v18 = v13[32];
    outlined copy of TableColumnCustomizationID.Base(*(void *)v13, v15, v16, v17, v18);
    *(void *)uint64_t v12 = v14;
    *((void *)v12 + 1) = v15;
    *((void *)v12 + 2) = v16;
    *((void *)v12 + 3) = v17;
    v12[32] = v18;
    *(void *)&v5[v7[6]] = *(void *)&v6[v7[6]];
    uint64_t v19 = v7[7];
    char v20 = &v5[v19];
    uint64_t v21 = &v6[v19];
    long long v22 = *((_OWORD *)v21 + 1);
    *(_OWORD *)char v20 = *(_OWORD *)v21;
    *((_OWORD *)v20 + 1) = v22;
    v20[32] = v21[32];
    v5[v7[8]] = v6[v7[8]];
    v5[v7[9]] = v6[v7[9]];
    v5[v7[10]] = v6[v7[10]];
    uint64_t v23 = v7[11];
    long long v24 = &v5[v23];
    uint64_t v25 = &v6[v23];
    uint64_t v26 = *(void *)&v6[v23 + 24];
    if (v26)
    {
      *((void *)v24 + 3) = v26;
      (**(void (***)(char *, char *))(v26 - 8))(v24, v25);
      long long v27 = *(_OWORD *)(v25 + 56);
      *(_OWORD *)(v24 + 56) = v27;
      (**(void (***)(uint64_t, uint64_t))(v27 - 8))((uint64_t)(v24 + 32), (uint64_t)(v25 + 32));
      *((void *)v24 + 9) = *((void *)v25 + 9);
      uint64_t v28 = *((void *)v25 + 14);
      long long v29 = *((_OWORD *)v25 + 6);
      *((_OWORD *)v24 + 5) = *((_OWORD *)v25 + 5);
      *((_OWORD *)v24 + 6) = v29;
      *((void *)v24 + 14) = v28;
      swift_retain();
      swift_retain();
      swift_retain();
    }
    else
    {
      long long v30 = *((_OWORD *)v25 + 5);
      *((_OWORD *)v24 + 4) = *((_OWORD *)v25 + 4);
      *((_OWORD *)v24 + 5) = v30;
      *((_OWORD *)v24 + 6) = *((_OWORD *)v25 + 6);
      *((void *)v24 + 14) = *((void *)v25 + 14);
      long long v31 = *((_OWORD *)v25 + 1);
      *(_OWORD *)long long v24 = *(_OWORD *)v25;
      *((_OWORD *)v24 + 1) = v31;
      long long v32 = *((_OWORD *)v25 + 3);
      *((_OWORD *)v24 + 2) = *((_OWORD *)v25 + 2);
      *((_OWORD *)v24 + 3) = v32;
    }
    *(void *)&v5[v7[12]] = *(void *)&v6[v7[12]];
    long long v33 = *(void (**)(char *, void, uint64_t, int *))(v35 + 56);
    swift_retain();
    v33(v5, 0, 1, v7);
  }
  return a1;
}

void *assignWithCopy for TableColumnCollection.Visitor(void *a1, void *a2, uint64_t a3)
{
  uint64_t v3 = a1;
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  uint64_t v7 = (int *)type metadata accessor for TableColumnCollection.Entry(0);
  uint64_t v8 = *((void *)v7 - 1);
  uint64_t v9 = *(uint64_t (**)(unsigned char *, uint64_t, int *))(v8 + 48);
  int v10 = v9(v5, 1, v7);
  int v11 = v9(v6, 1, v7);
  if (v10)
  {
    if (!v11)
    {
      v87 = v3;
      uint64_t v12 = type metadata accessor for UUID();
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v12 - 8) + 16))(v5, v6, v12);
      uint64_t v13 = v7[5];
      uint64_t v14 = &v5[v13];
      uint64_t v15 = &v6[v13];
      uint64_t v16 = *(void *)v15;
      uint64_t v17 = *((void *)v15 + 1);
      uint64_t v18 = *((void *)v15 + 2);
      uint64_t v19 = *((void *)v15 + 3);
      char v20 = v15[32];
      outlined copy of TableColumnCustomizationID.Base(*(void *)v15, v17, v18, v19, v20);
      *(void *)uint64_t v14 = v16;
      *((void *)v14 + 1) = v17;
      *((void *)v14 + 2) = v18;
      *((void *)v14 + 3) = v19;
      v14[32] = v20;
      *(void *)&v5[v7[6]] = *(void *)&v6[v7[6]];
      uint64_t v21 = v7[7];
      long long v22 = &v5[v21];
      uint64_t v23 = &v6[v21];
      long long v24 = *(_OWORD *)v23;
      long long v25 = *((_OWORD *)v23 + 1);
      v22[32] = v23[32];
      *(_OWORD *)long long v22 = v24;
      *((_OWORD *)v22 + 1) = v25;
      v5[v7[8]] = v6[v7[8]];
      v5[v7[9]] = v6[v7[9]];
      v5[v7[10]] = v6[v7[10]];
      uint64_t v26 = v7[11];
      long long v27 = &v5[v26];
      uint64_t v28 = &v6[v26];
      uint64_t v29 = *(void *)&v6[v26 + 24];
      if (v29)
      {
        *((void *)v27 + 3) = v29;
        (**(void (***)(char *, char *))(v29 - 8))(v27, v28);
        uint64_t v30 = *((void *)v28 + 7);
        *((void *)v27 + 7) = v30;
        *((void *)v27 + 8) = *((void *)v28 + 8);
        (**(void (***)(uint64_t, uint64_t))(v30 - 8))((uint64_t)(v27 + 32), (uint64_t)(v28 + 32));
        uint64_t v31 = *((void *)v28 + 10);
        *((void *)v27 + 9) = *((void *)v28 + 9);
        *((void *)v27 + 10) = v31;
        uint64_t v32 = *((void *)v28 + 12);
        *((void *)v27 + 11) = *((void *)v28 + 11);
        *((void *)v27 + 12) = v32;
        uint64_t v33 = *((void *)v28 + 13);
        uint64_t v34 = *((void *)v28 + 14);
        *((void *)v27 + 13) = v33;
        *((void *)v27 + 14) = v34;
        swift_retain();
        swift_retain();
        swift_retain();
      }
      else
      {
        long long v62 = *(_OWORD *)v28;
        long long v63 = *((_OWORD *)v28 + 1);
        long long v64 = *((_OWORD *)v28 + 3);
        *((_OWORD *)v27 + 2) = *((_OWORD *)v28 + 2);
        *((_OWORD *)v27 + 3) = v64;
        *(_OWORD *)long long v27 = v62;
        *((_OWORD *)v27 + 1) = v63;
        long long v65 = *((_OWORD *)v28 + 4);
        long long v66 = *((_OWORD *)v28 + 5);
        long long v67 = *((_OWORD *)v28 + 6);
        *((void *)v27 + 14) = *((void *)v28 + 14);
        *((_OWORD *)v27 + 5) = v66;
        *((_OWORD *)v27 + 6) = v67;
        *((_OWORD *)v27 + 4) = v65;
      }
      *(void *)&v5[v7[12]] = *(void *)&v6[v7[12]];
      uint64_t v68 = *(void (**)(unsigned char *, void, uint64_t, int *))(v8 + 56);
      swift_retain();
      v68(v5, 0, 1, v7);
      return v87;
    }
LABEL_7:
    type metadata accessor for TableColumnCollection.Entry?(0);
    memcpy(v5, v6, *(void *)(*(void *)(v35 - 8) + 64));
    return v3;
  }
  if (v11)
  {
    outlined destroy of TableColumnCollection.Visitor((uint64_t)v5, type metadata accessor for TableColumnCollection.Entry);
    goto LABEL_7;
  }
  uint64_t v36 = type metadata accessor for UUID();
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v36 - 8) + 24))(v5, v6, v36);
  uint64_t v37 = v7[5];
  uint64_t v38 = &v5[v37];
  uint64_t v39 = &v6[v37];
  uint64_t v40 = *(void *)v39;
  uint64_t v41 = *((void *)v39 + 1);
  uint64_t v42 = *((void *)v39 + 2);
  uint64_t v43 = *((void *)v39 + 3);
  char v44 = v39[32];
  outlined copy of TableColumnCustomizationID.Base(*(void *)v39, v41, v42, v43, v44);
  uint64_t v45 = *(void *)v38;
  uint64_t v46 = *((void *)v38 + 1);
  uint64_t v47 = *((void *)v38 + 2);
  uint64_t v48 = *((void *)v38 + 3);
  char v49 = v38[32];
  *(void *)uint64_t v38 = v40;
  *((void *)v38 + 1) = v41;
  *((void *)v38 + 2) = v42;
  *((void *)v38 + 3) = v43;
  v38[32] = v44;
  outlined consume of TableColumnCustomizationID.Base(v45, v46, v47, v48, v49);
  *(void *)&v5[v7[6]] = *(void *)&v6[v7[6]];
  uint64_t v50 = v7[7];
  uint64_t v51 = &v5[v50];
  id v52 = &v6[v50];
  char v53 = v52[32];
  long long v54 = *((_OWORD *)v52 + 1);
  *(_OWORD *)uint64_t v51 = *(_OWORD *)v52;
  *((_OWORD *)v51 + 1) = v54;
  v51[32] = v53;
  v5[v7[8]] = v6[v7[8]];
  v5[v7[9]] = v6[v7[9]];
  v5[v7[10]] = v6[v7[10]];
  uint64_t v55 = v7[11];
  uint64_t v56 = (uint64_t)&v5[v55];
  uint64_t v57 = (uint64_t *)&v6[v55];
  uint64_t v58 = *(void *)&v6[v55 + 24];
  if (*(void *)&v5[v55 + 24])
  {
    if (v58)
    {
      __swift_assign_boxed_opaque_existential_0((uint64_t *)v56, v57);
      __swift_assign_boxed_opaque_existential_1((uint64_t *)(v56 + 32), v57 + 4);
      uint64_t v59 = v57[10];
      *(void *)(v56 + 72) = v57[9];
      *(void *)(v56 + 80) = v59;
      swift_retain();
      swift_release();
      uint64_t v60 = v57[12];
      *(void *)(v56 + 88) = v57[11];
      *(void *)(v56 + 96) = v60;
      swift_retain();
      swift_release();
      uint64_t v61 = v57[14];
      *(void *)(v56 + 104) = v57[13];
      *(void *)(v56 + 112) = v61;
      swift_retain();
      swift_release();
    }
    else
    {
      outlined destroy of SwiftUIAnySortComparator(v56);
      long long v74 = *((_OWORD *)v57 + 3);
      long long v76 = *(_OWORD *)v57;
      long long v75 = *((_OWORD *)v57 + 1);
      *(_OWORD *)(v56 + 32) = *((_OWORD *)v57 + 2);
      *(_OWORD *)(v56 + 48) = v74;
      *(_OWORD *)uint64_t v56 = v76;
      *(_OWORD *)(v56 + 16) = v75;
      long long v78 = *((_OWORD *)v57 + 5);
      long long v77 = *((_OWORD *)v57 + 6);
      long long v79 = *((_OWORD *)v57 + 4);
      *(void *)(v56 + 112) = v57[14];
      *(_OWORD *)(v56 + 80) = v78;
      *(_OWORD *)(v56 + 96) = v77;
      *(_OWORD *)(v56 + 64) = v79;
    }
  }
  else if (v58)
  {
    *(void *)(v56 + 24) = v58;
    (**(void (***)(uint64_t, char *))(v58 - 8))(v56, (char *)v57);
    uint64_t v69 = v57[7];
    *(void *)(v56 + 56) = v69;
    *(void *)(v56 + 64) = v57[8];
    (**(void (***)(uint64_t, uint64_t))(v69 - 8))(v56 + 32, (uint64_t)(v57 + 4));
    uint64_t v70 = v57[10];
    *(void *)(v56 + 72) = v57[9];
    *(void *)(v56 + 80) = v70;
    uint64_t v71 = v57[12];
    *(void *)(v56 + 88) = v57[11];
    *(void *)(v56 + 96) = v71;
    uint64_t v72 = v57[13];
    uint64_t v73 = v57[14];
    *(void *)(v56 + 104) = v72;
    *(void *)(v56 + 112) = v73;
    swift_retain();
    swift_retain();
    swift_retain();
  }
  else
  {
    long long v80 = *(_OWORD *)v57;
    long long v81 = *((_OWORD *)v57 + 1);
    long long v82 = *((_OWORD *)v57 + 3);
    *(_OWORD *)(v56 + 32) = *((_OWORD *)v57 + 2);
    *(_OWORD *)(v56 + 48) = v82;
    *(_OWORD *)uint64_t v56 = v80;
    *(_OWORD *)(v56 + 16) = v81;
    long long v83 = *((_OWORD *)v57 + 4);
    long long v84 = *((_OWORD *)v57 + 5);
    long long v85 = *((_OWORD *)v57 + 6);
    *(void *)(v56 + 112) = v57[14];
    *(_OWORD *)(v56 + 80) = v84;
    *(_OWORD *)(v56 + 96) = v85;
    *(_OWORD *)(v56 + 64) = v83;
  }
  *(void *)&v5[v7[12]] = *(void *)&v6[v7[12]];
  swift_retain();
  swift_release();
  return v3;
}

void *initializeWithTake for TableColumnCollection.Visitor(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  uint64_t v7 = (int *)type metadata accessor for TableColumnCollection.Entry(0);
  uint64_t v8 = *((void *)v7 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v8 + 48))(v6, 1, v7))
  {
    type metadata accessor for TableColumnCollection.Entry?(0);
    memcpy(v5, v6, *(void *)(*(void *)(v9 - 8) + 64));
  }
  else
  {
    uint64_t v10 = type metadata accessor for UUID();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 32))(v5, v6, v10);
    uint64_t v11 = v7[5];
    uint64_t v12 = &v5[v11];
    uint64_t v13 = &v6[v11];
    long long v14 = *((_OWORD *)v13 + 1);
    *(_OWORD *)uint64_t v12 = *(_OWORD *)v13;
    *((_OWORD *)v12 + 1) = v14;
    v12[32] = v13[32];
    *(void *)&v5[v7[6]] = *(void *)&v6[v7[6]];
    uint64_t v15 = v7[7];
    uint64_t v16 = &v5[v15];
    uint64_t v17 = &v6[v15];
    long long v18 = *((_OWORD *)v17 + 1);
    *(_OWORD *)uint64_t v16 = *(_OWORD *)v17;
    *((_OWORD *)v16 + 1) = v18;
    v16[32] = v17[32];
    v5[v7[8]] = v6[v7[8]];
    v5[v7[9]] = v6[v7[9]];
    v5[v7[10]] = v6[v7[10]];
    uint64_t v19 = v7[11];
    char v20 = &v5[v19];
    uint64_t v21 = &v6[v19];
    long long v22 = *((_OWORD *)v21 + 1);
    *(_OWORD *)char v20 = *(_OWORD *)v21;
    *((_OWORD *)v20 + 1) = v22;
    long long v23 = *((_OWORD *)v21 + 3);
    *((_OWORD *)v20 + 2) = *((_OWORD *)v21 + 2);
    *((_OWORD *)v20 + 3) = v23;
    *((void *)v20 + 14) = *((void *)v21 + 14);
    long long v24 = *((_OWORD *)v21 + 6);
    long long v25 = *((_OWORD *)v21 + 4);
    *((_OWORD *)v20 + 5) = *((_OWORD *)v21 + 5);
    *((_OWORD *)v20 + 6) = v24;
    *((_OWORD *)v20 + 4) = v25;
    *(void *)&v5[v7[12]] = *(void *)&v6[v7[12]];
    (*(void (**)(char *, void, uint64_t, int *))(v8 + 56))(v5, 0, 1, v7);
  }
  return a1;
}

void *assignWithTake for TableColumnCollection.Visitor(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  uint64_t v7 = (int *)type metadata accessor for TableColumnCollection.Entry(0);
  uint64_t v8 = *((void *)v7 - 1);
  uint64_t v9 = *(uint64_t (**)(unsigned char *, uint64_t, int *))(v8 + 48);
  int v10 = v9(v5, 1, v7);
  int v11 = v9(v6, 1, v7);
  if (!v10)
  {
    if (v11)
    {
      outlined destroy of TableColumnCollection.Visitor((uint64_t)v5, type metadata accessor for TableColumnCollection.Entry);
      goto LABEL_6;
    }
    uint64_t v30 = type metadata accessor for UUID();
    (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v30 - 8) + 40))(v5, v6, v30);
    uint64_t v31 = v7[5];
    uint64_t v32 = &v5[v31];
    uint64_t v33 = &v6[v31];
    char v34 = v33[32];
    uint64_t v35 = *(void *)v32;
    uint64_t v36 = *((void *)v32 + 1);
    uint64_t v37 = *((void *)v32 + 2);
    uint64_t v38 = *((void *)v32 + 3);
    char v39 = v32[32];
    long long v40 = *((_OWORD *)v33 + 1);
    *(_OWORD *)uint64_t v32 = *(_OWORD *)v33;
    *((_OWORD *)v32 + 1) = v40;
    v32[32] = v34;
    outlined consume of TableColumnCustomizationID.Base(v35, v36, v37, v38, v39);
    *(void *)&v5[v7[6]] = *(void *)&v6[v7[6]];
    uint64_t v41 = v7[7];
    uint64_t v42 = &v5[v41];
    uint64_t v43 = &v6[v41];
    long long v44 = *((_OWORD *)v43 + 1);
    *(_OWORD *)uint64_t v42 = *(_OWORD *)v43;
    *((_OWORD *)v42 + 1) = v44;
    v42[32] = v43[32];
    v5[v7[8]] = v6[v7[8]];
    v5[v7[9]] = v6[v7[9]];
    v5[v7[10]] = v6[v7[10]];
    uint64_t v45 = v7[11];
    uint64_t v46 = (uint64_t)&v5[v45];
    uint64_t v47 = &v6[v45];
    if (*(void *)&v5[v45 + 24])
    {
      if (*((void *)v47 + 3))
      {
        __swift_destroy_boxed_opaque_existential_1(v46);
        long long v48 = *((_OWORD *)v47 + 1);
        *(_OWORD *)uint64_t v46 = *(_OWORD *)v47;
        *(_OWORD *)(v46 + 16) = v48;
        __swift_destroy_boxed_opaque_existential_1(v46 + 32);
        long long v49 = *((_OWORD *)v47 + 3);
        *(_OWORD *)(v46 + 32) = *((_OWORD *)v47 + 2);
        *(_OWORD *)(v46 + 48) = v49;
        *(void *)(v46 + 64) = *((void *)v47 + 8);
        *(_OWORD *)(v46 + 72) = *(_OWORD *)(v47 + 72);
        swift_release();
        *(_OWORD *)(v46 + 88) = *(_OWORD *)(v47 + 88);
        swift_release();
        *(_OWORD *)(v46 + 104) = *(_OWORD *)(v47 + 104);
        swift_release();
LABEL_13:
        *(void *)&v5[v7[12]] = *(void *)&v6[v7[12]];
        swift_release();
        return a1;
      }
      outlined destroy of SwiftUIAnySortComparator(v46);
    }
    long long v50 = *((_OWORD *)v47 + 5);
    *(_OWORD *)(v46 + 64) = *((_OWORD *)v47 + 4);
    *(_OWORD *)(v46 + 80) = v50;
    *(_OWORD *)(v46 + 96) = *((_OWORD *)v47 + 6);
    *(void *)(v46 + 112) = *((void *)v47 + 14);
    long long v51 = *((_OWORD *)v47 + 1);
    *(_OWORD *)uint64_t v46 = *(_OWORD *)v47;
    *(_OWORD *)(v46 + 16) = v51;
    long long v52 = *((_OWORD *)v47 + 3);
    *(_OWORD *)(v46 + 32) = *((_OWORD *)v47 + 2);
    *(_OWORD *)(v46 + 48) = v52;
    goto LABEL_13;
  }
  if (v11)
  {
LABEL_6:
    type metadata accessor for TableColumnCollection.Entry?(0);
    memcpy(v5, v6, *(void *)(*(void *)(v28 - 8) + 64));
    return a1;
  }
  uint64_t v12 = type metadata accessor for UUID();
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v12 - 8) + 32))(v5, v6, v12);
  uint64_t v13 = v7[5];
  long long v14 = &v5[v13];
  uint64_t v15 = &v6[v13];
  long long v16 = *((_OWORD *)v15 + 1);
  *(_OWORD *)long long v14 = *(_OWORD *)v15;
  *((_OWORD *)v14 + 1) = v16;
  v14[32] = v15[32];
  *(void *)&v5[v7[6]] = *(void *)&v6[v7[6]];
  uint64_t v17 = v7[7];
  long long v18 = &v5[v17];
  uint64_t v19 = &v6[v17];
  long long v20 = *((_OWORD *)v19 + 1);
  *(_OWORD *)long long v18 = *(_OWORD *)v19;
  *((_OWORD *)v18 + 1) = v20;
  v18[32] = v19[32];
  v5[v7[8]] = v6[v7[8]];
  v5[v7[9]] = v6[v7[9]];
  v5[v7[10]] = v6[v7[10]];
  uint64_t v21 = v7[11];
  long long v22 = &v5[v21];
  long long v23 = &v6[v21];
  long long v24 = *((_OWORD *)v23 + 1);
  *(_OWORD *)long long v22 = *(_OWORD *)v23;
  *((_OWORD *)v22 + 1) = v24;
  long long v25 = *((_OWORD *)v23 + 3);
  *((_OWORD *)v22 + 2) = *((_OWORD *)v23 + 2);
  *((_OWORD *)v22 + 3) = v25;
  *((void *)v22 + 14) = *((void *)v23 + 14);
  long long v26 = *((_OWORD *)v23 + 6);
  long long v27 = *((_OWORD *)v23 + 4);
  *((_OWORD *)v22 + 5) = *((_OWORD *)v23 + 5);
  *((_OWORD *)v22 + 6) = v26;
  *((_OWORD *)v22 + 4) = v27;
  *(void *)&v5[v7[12]] = *(void *)&v6[v7[12]];
  (*(void (**)(unsigned char *, void, uint64_t, int *))(v8 + 56))(v5, 0, 1, v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for TableColumnCollection.Visitor(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_187B9A4D8);
}

uint64_t sub_187B9A4D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a1 + *(int *)(a3 + 20);
  type metadata accessor for TableColumnCollection.Entry?(0);
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48);

  return v6(v4, a2, v5);
}

uint64_t storeEnumTagSinglePayload for TableColumnCollection.Visitor(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_187B9A55C);
}

uint64_t sub_187B9A55C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a1 + *(int *)(a4 + 20);
  type metadata accessor for TableColumnCollection.Entry?(0);
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56);

  return v7(v5, a2, a2, v6);
}

void type metadata completion function for TableColumnCollection.Visitor()
{
  type metadata accessor for TableColumnCollection.Entry?(319);
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

void *initializeBufferWithCopyOfBuffer for TableColumnCollection.Entry(void *a1, void *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v28 = *a2;
    *a1 = *a2;
    a1 = (void *)(v28 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    uint64_t v7 = type metadata accessor for UUID();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = a3[5];
    uint64_t v9 = (char *)a1 + v8;
    int v10 = (char *)a2 + v8;
    uint64_t v11 = *(void *)v10;
    uint64_t v12 = *((void *)v10 + 1);
    uint64_t v13 = *((void *)v10 + 2);
    uint64_t v14 = *((void *)v10 + 3);
    char v15 = v10[32];
    outlined copy of TableColumnCustomizationID.Base(*(void *)v10, v12, v13, v14, v15);
    *(void *)uint64_t v9 = v11;
    *((void *)v9 + 1) = v12;
    *((void *)v9 + 2) = v13;
    *((void *)v9 + 3) = v14;
    v9[32] = v15;
    uint64_t v16 = a3[7];
    *(void *)((char *)a1 + a3[6]) = *(void *)((char *)a2 + a3[6]);
    uint64_t v17 = (char *)a1 + v16;
    long long v18 = (char *)a2 + v16;
    long long v19 = *((_OWORD *)v18 + 1);
    *(_OWORD *)uint64_t v17 = *(_OWORD *)v18;
    *((_OWORD *)v17 + 1) = v19;
    v17[32] = v18[32];
    uint64_t v20 = a3[9];
    *((unsigned char *)a1 + a3[8]) = *((unsigned char *)a2 + a3[8]);
    *((unsigned char *)a1 + v20) = *((unsigned char *)a2 + v20);
    uint64_t v21 = a3[11];
    *((unsigned char *)a1 + a3[10]) = *((unsigned char *)a2 + a3[10]);
    long long v22 = (char *)a1 + v21;
    long long v23 = (char *)a2 + v21;
    uint64_t v24 = *(void *)((char *)a2 + v21 + 24);
    if (v24)
    {
      *((void *)v22 + 3) = v24;
      (**(void (***)(char *, char *))(v24 - 8))(v22, v23);
      long long v25 = *(_OWORD *)(v23 + 56);
      *(_OWORD *)(v22 + 56) = v25;
      (**(void (***)(uint64_t, uint64_t))(v25 - 8))((uint64_t)(v22 + 32), (uint64_t)(v23 + 32));
      *((void *)v22 + 9) = *((void *)v23 + 9);
      uint64_t v26 = *((void *)v23 + 14);
      long long v27 = *((_OWORD *)v23 + 6);
      *((_OWORD *)v22 + 5) = *((_OWORD *)v23 + 5);
      *((_OWORD *)v22 + 6) = v27;
      *((void *)v22 + 14) = v26;
      swift_retain();
      swift_retain();
      swift_retain();
    }
    else
    {
      long long v29 = *((_OWORD *)v23 + 5);
      *((_OWORD *)v22 + 4) = *((_OWORD *)v23 + 4);
      *((_OWORD *)v22 + 5) = v29;
      *((_OWORD *)v22 + 6) = *((_OWORD *)v23 + 6);
      *((void *)v22 + 14) = *((void *)v23 + 14);
      long long v30 = *((_OWORD *)v23 + 1);
      *(_OWORD *)long long v22 = *(_OWORD *)v23;
      *((_OWORD *)v22 + 1) = v30;
      long long v31 = *((_OWORD *)v23 + 3);
      *((_OWORD *)v22 + 2) = *((_OWORD *)v23 + 2);
      *((_OWORD *)v22 + 3) = v31;
    }
    *(void *)((char *)a1 + a3[12]) = *(void *)((char *)a2 + a3[12]);
  }
  swift_retain();
  return a1;
}

uint64_t destroy for TableColumnCollection.Entry(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  uint64_t v5 = a1 + *(int *)(a2 + 20);
  outlined consume of TableColumnCustomizationID.Base(*(void *)v5, *(void *)(v5 + 8), *(void *)(v5 + 16), *(void *)(v5 + 24), *(unsigned char *)(v5 + 32));
  uint64_t v6 = a1 + *(int *)(a2 + 44);
  if (*(void *)(v6 + 24))
  {
    __swift_destroy_boxed_opaque_existential_1(a1 + *(int *)(a2 + 44));
    __swift_destroy_boxed_opaque_existential_1(v6 + 32);
    swift_release();
    swift_release();
    swift_release();
  }

  return swift_release();
}

uint64_t initializeWithTake for TableColumnCollection.Entry(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a3[6];
  uint64_t v9 = a1 + v7;
  uint64_t v10 = a2 + v7;
  long long v11 = *(_OWORD *)(v10 + 16);
  *(_OWORD *)uint64_t v9 = *(_OWORD *)v10;
  *(_OWORD *)(v9 + 16) = v11;
  *(unsigned char *)(v9 + 32) = *(unsigned char *)(v10 + 32);
  *(void *)(a1 + v8) = *(void *)(a2 + v8);
  uint64_t v12 = a3[7];
  uint64_t v13 = a3[8];
  uint64_t v14 = a1 + v12;
  uint64_t v15 = a2 + v12;
  long long v16 = *(_OWORD *)(v15 + 16);
  *(_OWORD *)uint64_t v14 = *(_OWORD *)v15;
  *(_OWORD *)(v14 + 16) = v16;
  *(unsigned char *)(v14 + 32) = *(unsigned char *)(v15 + 32);
  *(unsigned char *)(a1 + v13) = *(unsigned char *)(a2 + v13);
  uint64_t v17 = a3[10];
  *(unsigned char *)(a1 + a3[9]) = *(unsigned char *)(a2 + a3[9]);
  *(unsigned char *)(a1 + v17) = *(unsigned char *)(a2 + v17);
  uint64_t v18 = a3[11];
  uint64_t v19 = a3[12];
  uint64_t v20 = a1 + v18;
  uint64_t v21 = a2 + v18;
  long long v22 = *(_OWORD *)(v21 + 16);
  *(_OWORD *)uint64_t v20 = *(_OWORD *)v21;
  *(_OWORD *)(v20 + 16) = v22;
  long long v23 = *(_OWORD *)(v21 + 48);
  *(_OWORD *)(v20 + 32) = *(_OWORD *)(v21 + 32);
  *(_OWORD *)(v20 + 48) = v23;
  *(void *)(v20 + 112) = *(void *)(v21 + 112);
  long long v24 = *(_OWORD *)(v21 + 96);
  long long v25 = *(_OWORD *)(v21 + 64);
  *(_OWORD *)(v20 + 80) = *(_OWORD *)(v21 + 80);
  *(_OWORD *)(v20 + 96) = v24;
  *(_OWORD *)(v20 + 64) = v25;
  *(void *)(a1 + v19) = *(void *)(a2 + v19);
  return a1;
}

uint64_t assignWithTake for TableColumnCollection.Entry(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  char v10 = *(unsigned char *)(v9 + 32);
  uint64_t v11 = *(void *)v8;
  uint64_t v12 = *(void *)(v8 + 8);
  uint64_t v13 = *(void *)(v8 + 16);
  uint64_t v14 = *(void *)(v8 + 24);
  char v15 = *(unsigned char *)(v8 + 32);
  long long v16 = *(_OWORD *)(v9 + 16);
  *(_OWORD *)uint64_t v8 = *(_OWORD *)v9;
  *(_OWORD *)(v8 + 16) = v16;
  *(unsigned char *)(v8 + 32) = v10;
  outlined consume of TableColumnCustomizationID.Base(v11, v12, v13, v14, v15);
  uint64_t v17 = a3[7];
  *(void *)(a1 + a3[6]) = *(void *)(a2 + a3[6]);
  uint64_t v18 = a1 + v17;
  uint64_t v19 = a2 + v17;
  long long v20 = *(_OWORD *)(v19 + 16);
  *(_OWORD *)uint64_t v18 = *(_OWORD *)v19;
  *(_OWORD *)(v18 + 16) = v20;
  *(unsigned char *)(v18 + 32) = *(unsigned char *)(v19 + 32);
  uint64_t v21 = a3[9];
  *(unsigned char *)(a1 + a3[8]) = *(unsigned char *)(a2 + a3[8]);
  *(unsigned char *)(a1 + v21) = *(unsigned char *)(a2 + v21);
  uint64_t v22 = a3[11];
  *(unsigned char *)(a1 + a3[10]) = *(unsigned char *)(a2 + a3[10]);
  uint64_t v23 = a1 + v22;
  uint64_t v24 = a2 + v22;
  if (!*(void *)(a1 + v22 + 24)) {
    goto LABEL_5;
  }
  if (!*(void *)(v24 + 24))
  {
    outlined destroy of SwiftUIAnySortComparator(a1 + v22);
LABEL_5:
    long long v27 = *(_OWORD *)(v24 + 80);
    *(_OWORD *)(v23 + 64) = *(_OWORD *)(v24 + 64);
    *(_OWORD *)(v23 + 80) = v27;
    *(_OWORD *)(v23 + 96) = *(_OWORD *)(v24 + 96);
    *(void *)(v23 + 112) = *(void *)(v24 + 112);
    long long v28 = *(_OWORD *)(v24 + 16);
    *(_OWORD *)uint64_t v23 = *(_OWORD *)v24;
    *(_OWORD *)(v23 + 16) = v28;
    long long v29 = *(_OWORD *)(v24 + 48);
    *(_OWORD *)(v23 + 32) = *(_OWORD *)(v24 + 32);
    *(_OWORD *)(v23 + 48) = v29;
    goto LABEL_6;
  }
  __swift_destroy_boxed_opaque_existential_1(a1 + v22);
  long long v25 = *(_OWORD *)(v24 + 16);
  *(_OWORD *)uint64_t v23 = *(_OWORD *)v24;
  *(_OWORD *)(v23 + 16) = v25;
  __swift_destroy_boxed_opaque_existential_1(v23 + 32);
  long long v26 = *(_OWORD *)(v24 + 48);
  *(_OWORD *)(v23 + 32) = *(_OWORD *)(v24 + 32);
  *(_OWORD *)(v23 + 48) = v26;
  *(void *)(v23 + 64) = *(void *)(v24 + 64);
  *(_OWORD *)(v23 + 72) = *(_OWORD *)(v24 + 72);
  swift_release();
  *(_OWORD *)(v23 + 88) = *(_OWORD *)(v24 + 88);
  swift_release();
  *(_OWORD *)(v23 + 104) = *(_OWORD *)(v24 + 104);
  swift_release();
LABEL_6:
  *(void *)(a1 + a3[12]) = *(void *)(a2 + a3[12]);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for TableColumnCollection.Entry(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_187B9AC58);
}

uint64_t sub_187B9AC58(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 48));
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    return (v10 + 1);
  }
}

uint64_t storeEnumTagSinglePayload for TableColumnCollection.Entry(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_187B9AD2C);
}

uint64_t sub_187B9AD2C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 48)) = (a2 - 1);
  }
  return result;
}

uint64_t type metadata completion function for TableColumnCollection.Entry()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t destroy for TableColumnCollection(uint64_t a1)
{
  if ((*(unsigned char *)(a1 + 40) & 1) == 0) {
    return __swift_destroy_boxed_opaque_existential_1(a1);
  }

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for TableColumnCollection(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 40);
  if (v3)
  {
    *(void *)a1 = *(void *)a2;
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v4 = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 24) = v4;
    (**(void (***)(uint64_t))(v4 - 8))(a1);
  }
  *(unsigned char *)(a1 + 40) = v3;
  return a1;
}

uint64_t assignWithCopy for TableColumnCollection(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    outlined destroy of TableColumnCollection.Backing(a1);
    if (*(unsigned char *)(a2 + 40))
    {
      *(void *)a1 = *(void *)a2;
      *(unsigned char *)(a1 + 40) = 1;
      swift_bridgeObjectRetain();
    }
    else
    {
      uint64_t v4 = *(void *)(a2 + 24);
      *(void *)(a1 + 24) = v4;
      *(void *)(a1 + 32) = *(void *)(a2 + 32);
      (**(void (***)(uint64_t, uint64_t))(v4 - 8))(a1, a2);
      *(unsigned char *)(a1 + 40) = 0;
    }
  }
  return a1;
}

_OWORD *assignWithTake for TableColumnCollection(_OWORD *a1, _OWORD *a2)
{
  if (a1 != a2)
  {
    outlined destroy of TableColumnCollection.Backing((uint64_t)a1);
    long long v4 = a2[1];
    *a1 = *a2;
    a1[1] = v4;
    *(_OWORD *)((char *)a1 + 25) = *(_OWORD *)((char *)a2 + 25);
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for TableColumnCollection(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 41)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 40);
  if (v3 <= 1) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for TableColumnCollection(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 40) = 0;
    *(void *)uint64_t result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 41) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 41) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 40) = -(char)a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for TableColumnCollection()
{
  return &type metadata for TableColumnCollection;
}

uint64_t associated type witness table accessor for Collection.Indices : BidirectionalCollection in TableColumnCollection()
{
  return lazy protocol witness table accessor for type Range<Int> and conformance <> Range<A>(&lazy protocol witness table cache variable for type Range<Int> and conformance <> Range<A>);
}

uint64_t associated type witness table accessor for Collection.SubSequence : BidirectionalCollection in TableColumnCollection()
{
  return lazy protocol witness table accessor for type Slice<TableColumnCollection> and conformance <> Slice<A>(&lazy protocol witness table cache variable for type Slice<TableColumnCollection> and conformance <> Slice<A>, (void (*)(void))lazy protocol witness table accessor for type TableColumnCollection and conformance TableColumnCollection);
}

uint64_t associated type witness table accessor for Collection.Indices : RandomAccessCollection in TableColumnCollection()
{
  return lazy protocol witness table accessor for type Range<Int> and conformance <> Range<A>((unint64_t *)&lazy protocol witness table cache variable for type Range<Int> and conformance <> Range<A>);
}

uint64_t associated type witness table accessor for Collection.SubSequence : RandomAccessCollection in TableColumnCollection()
{
  return lazy protocol witness table accessor for type Slice<TableColumnCollection> and conformance <> Slice<A>((unint64_t *)&lazy protocol witness table cache variable for type Slice<TableColumnCollection> and conformance <> Slice<A>, (void (*)(void))lazy protocol witness table accessor for type TableColumnCollection and conformance TableColumnCollection);
}

uint64_t lazy protocol witness table accessor for type Slice<TableColumnCollection> and conformance <> Slice<A>(unint64_t *a1, void (*a2)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for Slice<TableColumnCollection>(255, &lazy cache variable for type metadata for Slice<TableColumnCollection>, MEMORY[0x1E4FBC320]);
    a2();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type UUID and conformance UUID()
{
  unint64_t result = lazy protocol witness table cache variable for type UUID and conformance UUID;
  if (!lazy protocol witness table cache variable for type UUID and conformance UUID)
  {
    type metadata accessor for UUID();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID);
  }
  return result;
}

uint64_t associated type witness table accessor for Collection.Indices : Collection in TableColumnCollection()
{
  return lazy protocol witness table accessor for type Range<Int> and conformance <> Range<A>(&lazy protocol witness table cache variable for type Range<Int> and conformance <> Range<A>);
}

uint64_t associated type witness table accessor for Collection.SubSequence : Collection in TableColumnCollection()
{
  return lazy protocol witness table accessor for type IndexingIterator<TableColumnCollection> and conformance IndexingIterator<A>(&lazy protocol witness table cache variable for type Slice<TableColumnCollection> and conformance Slice<A>, &lazy cache variable for type metadata for Slice<TableColumnCollection>, MEMORY[0x1E4FBC320]);
}

uint64_t lazy protocol witness table accessor for type IndexingIterator<TableColumnCollection> and conformance IndexingIterator<A>(unint64_t *a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, unint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for Slice<TableColumnCollection>(255, a2, a3);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t associated type witness table accessor for Sequence.Iterator : IteratorProtocol in TableColumnCollection()
{
  return lazy protocol witness table accessor for type IndexingIterator<TableColumnCollection> and conformance IndexingIterator<A>(&lazy protocol witness table cache variable for type IndexingIterator<TableColumnCollection> and conformance IndexingIterator<A>, &lazy cache variable for type metadata for IndexingIterator<TableColumnCollection>, MEMORY[0x1E4FBBC18]);
}

void type metadata accessor for Slice<TableColumnCollection>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, unint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = lazy protocol witness table accessor for type TableColumnCollection and conformance TableColumnCollection();
    unint64_t v7 = a3(a1, &type metadata for TableColumnCollection, v6);
    if (!v8) {
      atomic_store(v7, a2);
    }
  }
}

uint64_t outlined assign with take of TableColumnCollection.Entry?(uint64_t a1, uint64_t a2)
{
  type metadata accessor for TableColumnCollection.Entry?(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

void static SearchFieldPlacement.toolbar.getter(unsigned char *a1@<X8>)
{
  *a1 = 3;
}

void static SearchFieldPlacement.toolbarPrincipal.getter(unsigned char *a1@<X8>)
{
  *a1 = 4;
}

uint64_t (*static SearchFieldPlacement.toolbarPrincipal.modify(unsigned char *a1))(void, void, void, void)
{
  *a1 = 4;
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

void static SearchFieldPlacement.sidebar.getter(unsigned char *a1@<X8>)
{
  *a1 = 5;
}

void static SearchFieldPlacement.navigationBarDrawer.getter(unsigned char *a1@<X8>)
{
  *a1 = 0;
}

void static SearchFieldPlacement.navigationColumn.getter()
{
}

void static SearchFieldPlacement.NavigationBarDrawerDisplayMode.automatic.getter(unsigned char *a1@<X8>)
{
  *a1 = 0;
}

uint64_t getEnumTagSinglePayload for SearchFieldPlacement(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xF9) {
    goto LABEL_17;
  }
  if (a2 + 7 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 7) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 7;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 7;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 7;
    }
  }
LABEL_17:
  if (*a1 <= 7u) {
    int v6 = 7;
  }
  else {
    int v6 = *a1;
  }
  int v7 = v6 - 8;
  if (*a1 < 2u) {
    int v8 = -1;
  }
  else {
    int v8 = v7;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for SearchFieldPlacement(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 7 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 7) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF9) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF8)
  {
    unsigned int v6 = ((a2 - 249) >> 8) + 1;
    *uint64_t result = a2 + 7;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x187B9B7C0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 7;
        break;
    }
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for SearchFieldPlacement.NavigationBarDrawerDisplayMode(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x187B9B8B8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type SearchFieldPlacement.DrawerDisplayMode and conformance SearchFieldPlacement.DrawerDisplayMode()
{
  unint64_t result = lazy protocol witness table cache variable for type SearchFieldPlacement.DrawerDisplayMode and conformance SearchFieldPlacement.DrawerDisplayMode;
  if (!lazy protocol witness table cache variable for type SearchFieldPlacement.DrawerDisplayMode and conformance SearchFieldPlacement.DrawerDisplayMode)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SearchFieldPlacement.DrawerDisplayMode and conformance SearchFieldPlacement.DrawerDisplayMode);
  }
  return result;
}

double _ProjectionEffect.transform.getter@<D0>(uint64_t a1@<X8>)
{
  double result = *(double *)(v1 + 64);
  long long v3 = *(_OWORD *)(v1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)v1;
  *(_OWORD *)(a1 + 16) = v3;
  long long v4 = *(_OWORD *)(v1 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(v1 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  *(double *)(a1 + 64) = result;
  return result;
}

double _ProjectionEffect.transform.setter(uint64_t a1)
{
  double result = *(double *)(a1 + 64);
  long long v3 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)uint64_t v1 = *(_OWORD *)a1;
  *(_OWORD *)(v1 + 16) = v3;
  long long v4 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(v1 + 32) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(v1 + 48) = v4;
  *(double *)(v1 + 64) = result;
  return result;
}

uint64_t (*_ProjectionEffect.transform.modify())(void, void, void, void)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

double _ProjectionEffect.init(transform:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  double result = *(double *)(a1 + 64);
  long long v3 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)a2 = *(_OWORD *)a1;
  *(_OWORD *)(a2 + 16) = v3;
  long long v4 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(a2 + 32) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(a2 + 48) = v4;
  *(double *)(a2 + 64) = result;
  return result;
}

double _ProjectionEffect.effectValue(size:)@<D0>(uint64_t a1@<X8>)
{
  double result = *(double *)(v1 + 64);
  long long v3 = *(_OWORD *)(v1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)v1;
  *(_OWORD *)(a1 + 16) = v3;
  long long v4 = *(_OWORD *)(v1 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(v1 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  *(double *)(a1 + 64) = result;
  return result;
}

uint64_t static _ProjectionEffect.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a1 + 48);
  long long v9[2] = *(_OWORD *)(a1 + 32);
  v9[3] = v2;
  uint64_t v10 = *(void *)(a1 + 64);
  long long v3 = *(_OWORD *)(a1 + 16);
  v9[0] = *(_OWORD *)a1;
  v9[1] = v3;
  long long v4 = *(_OWORD *)(a2 + 48);
  v7[2] = *(_OWORD *)(a2 + 32);
  v7[3] = v4;
  uint64_t v8 = *(void *)(a2 + 64);
  long long v5 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v5;
  return MEMORY[0x18C111030](v9, v7) & 1;
}

double protocol witness for GeometryEffect.effectValue(size:) in conformance _ProjectionEffect@<D0>(uint64_t a1@<X8>)
{
  double result = *(double *)(v1 + 64);
  long long v3 = *(_OWORD *)(v1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)v1;
  *(_OWORD *)(a1 + 16) = v3;
  long long v4 = *(_OWORD *)(v1 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(v1 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  *(double *)(a1 + 64) = result;
  return result;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance _ProjectionEffect(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a1 + 48);
  v7[2] = *(_OWORD *)(a1 + 32);
  v7[3] = v2;
  uint64_t v8 = *(void *)(a1 + 64);
  long long v3 = *(_OWORD *)(a1 + 16);
  v7[0] = *(_OWORD *)a1;
  v7[1] = v3;
  long long v4 = *(_OWORD *)(a2 + 48);
  long long v9[2] = *(_OWORD *)(a2 + 32);
  v9[3] = v4;
  uint64_t v10 = *(void *)(a2 + 64);
  long long v5 = *(_OWORD *)(a2 + 16);
  v9[0] = *(_OWORD *)a2;
  v9[1] = v5;
  return MEMORY[0x18C111030](v7, v9) & 1;
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance _ProjectionEffect()
{
  return static GeometryEffect.makeGeometryEffect(modifier:inputs:body:)();
}

void protocol witness for ViewModifier.body(content:) in conformance _ProjectionEffect()
{
}

uint64_t View.projectionEffect(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 64);
  long long v4 = *(_OWORD *)(a1 + 16);
  v7[0] = *(_OWORD *)a1;
  v7[1] = v4;
  long long v5 = *(_OWORD *)(a1 + 48);
  v7[2] = *(_OWORD *)(a1 + 32);
  v7[3] = v5;
  uint64_t v8 = v3;
  return MEMORY[0x18C113660](v7, a2, &type metadata for _ProjectionEffect, a3);
}

unint64_t instantiation function for generic protocol witness table for _ProjectionEffect(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type _ProjectionEffect and conformance _ProjectionEffect();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type _ProjectionEffect and conformance _ProjectionEffect()
{
  unint64_t result = lazy protocol witness table cache variable for type _ProjectionEffect and conformance _ProjectionEffect;
  if (!lazy protocol witness table cache variable for type _ProjectionEffect and conformance _ProjectionEffect)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ProjectionEffect and conformance _ProjectionEffect);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type _ProjectionEffect and conformance _ProjectionEffect;
  if (!lazy protocol witness table cache variable for type _ProjectionEffect and conformance _ProjectionEffect)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ProjectionEffect and conformance _ProjectionEffect);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for _ProjectionEffect(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 72)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for _ProjectionEffect(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(void *)unint64_t result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 72) = v3;
  return result;
}

ValueMetadata *type metadata accessor for _ProjectionEffect()
{
  return &type metadata for _ProjectionEffect;
}

uint64_t sub_187B9BCE0()
{
  return swift_getWitnessTable();
}

void SettingsLink.init<>()()
{
}

void SettingsLink.init(label:)()
{
}

void SettingsLink.body.getter()
{
}

void DefaultSettingsLinkLabel.body.getter()
{
}

uint64_t associated type witness table accessor for View.Body : View in SettingsLink<A>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for View.Body : View in DefaultSettingsLinkLabel()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance DefaultSettingsLinkLabel()
{
  return static ModifiedContent<>._viewListCount(inputs:)();
}

uint64_t type metadata completion function for SettingsLink()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for SettingsLink(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  long long v4 = a1;
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  int v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0 || ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 9 > 0x18)
  {
    uint64_t v9 = *a2;
    *long long v4 = *a2;
    long long v4 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
    swift_retain();
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    unint64_t v10 = ((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v11 = ((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v12 = *(void *)v11;
    char v13 = *(unsigned char *)(v11 + 8);
    outlined copy of Environment<Bool>.Content(*(void *)v11, v13);
    *(void *)unint64_t v10 = v12;
    *(unsigned char *)(v10 + 8) = v13;
  }
  return v4;
}

uint64_t destroy for SettingsLink(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(*(void *)(a2 + 16) - 8) + 8;
  (*(void (**)(void))v3)();
  unint64_t v4 = (a1 + *(void *)(v3 + 56) + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v5 = *(void *)v4;
  char v6 = *(unsigned char *)(v4 + 8);

  return outlined consume of Environment<Bool>.Content(v5, v6);
}

uint64_t assignWithCopy for SettingsLink(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 24;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 40) + 7;
  unint64_t v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v9 = *(void *)v8;
  LOBYTE(v5) = *(unsigned char *)(v8 + 8);
  outlined copy of Environment<Bool>.Content(*(void *)v8, v5);
  uint64_t v10 = *(void *)v7;
  char v11 = *(unsigned char *)(v7 + 8);
  *(void *)unint64_t v7 = v9;
  *(unsigned char *)(v7 + 8) = v5;
  outlined consume of Environment<Bool>.Content(v10, v11);
  return a1;
}

uint64_t assignWithTake for SettingsLink(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 40;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 24) + 7;
  unint64_t v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v9 = *(void *)v8;
  LOBYTE(v8) = *(unsigned char *)(v8 + 8);
  uint64_t v10 = *(void *)v7;
  char v11 = *(unsigned char *)(v7 + 8);
  *(void *)unint64_t v7 = v9;
  *(unsigned char *)(v7 + 8) = v8;
  outlined consume of Environment<Bool>.Content(v10, v11);
  return a1;
}

uint64_t getEnumTagSinglePayload for SettingsLink(unsigned __int8 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (v5 <= 0xFE) {
    unsigned int v7 = 254;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  if (v7 < a2)
  {
    unint64_t v8 = ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 9;
    unsigned int v9 = (a2 - v7 + 255) >> (8 * v8);
    if (v8 < 4) {
      unsigned int v10 = v9 + 1;
    }
    else {
      unsigned int v10 = 2;
    }
    if (v10 >= 0x10000) {
      unsigned int v11 = 4;
    }
    else {
      unsigned int v11 = 2;
    }
    if (v10 < 0x100) {
      unsigned int v11 = 1;
    }
    if (v10 >= 2) {
      uint64_t v12 = v11;
    }
    else {
      uint64_t v12 = 0;
    }
    switch(v12)
    {
      case 1:
        int v13 = a1[v8];
        if (!a1[v8]) {
          break;
        }
        goto LABEL_22;
      case 2:
        int v13 = *(unsigned __int16 *)&a1[v8];
        if (*(_WORD *)&a1[v8]) {
          goto LABEL_22;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x187B9C3A0);
      case 4:
        int v13 = *(_DWORD *)&a1[v8];
        if (!v13) {
          break;
        }
LABEL_22:
        int v15 = (v13 - 1) << (8 * v8);
        if (v8 >= 4) {
          int v15 = 0;
        }
        if (((v6 + 7) & 0xFFFFFFF8) == 0xFFFFFFF8) {
          int v16 = *a1;
        }
        else {
          int v16 = *(_DWORD *)a1;
        }
        return v7 + (v16 | v15) + 1;
      default:
        break;
    }
  }
  if (v5 >= 0xFE) {
    return (*(uint64_t (**)(void))(v4 + 48))();
  }
  unsigned int v17 = *(unsigned __int8 *)(((unint64_t)&a1[v6 + 7] & 0xFFFFFFFFFFFFFFF8) + 8);
  if (v17 > 1) {
    return (v17 ^ 0xFF) + 1;
  }
  else {
    return 0;
  }
}

void storeEnumTagSinglePayload for SettingsLink(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0xFE) {
    unsigned int v8 = 254;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  size_t v10 = ((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 9;
  char v11 = 8 * v10;
  if (v8 >= a3)
  {
    int v15 = 0;
    if (v8 >= a2)
    {
LABEL_17:
      switch(v15)
      {
        case 1:
          a1[v10] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_34;
        case 2:
          *(_WORD *)&a1[v10] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_34;
        case 3:
          goto LABEL_46;
        case 4:
          *(_DWORD *)&a1[v10] = 0;
          goto LABEL_33;
        default:
LABEL_33:
          if (a2)
          {
LABEL_34:
            if (v7 < 0xFE)
            {
              unint64_t v21 = (unint64_t)&a1[v9 + 7] & 0xFFFFFFFFFFFFFFF8;
              if (a2 > 0xFE)
              {
                *(unsigned char *)(v21 + 8) = 0;
                *(void *)unint64_t v21 = a2 - 255;
              }
              else
              {
                *(unsigned char *)(v21 + 8) = -(char)a2;
              }
            }
            else
            {
              long long v20 = *(void (**)(void))(v6 + 56);
              v20();
            }
          }
          break;
      }
      return;
    }
  }
  else
  {
    unsigned int v12 = (a3 - v8 + 255) >> v11;
    if (v10 <= 3) {
      unsigned int v13 = v12 + 1;
    }
    else {
      unsigned int v13 = 2;
    }
    if (v13 >= 0x10000) {
      int v14 = 4;
    }
    else {
      int v14 = 2;
    }
    if (v13 < 0x100) {
      int v14 = 1;
    }
    if (v13 >= 2) {
      int v15 = v14;
    }
    else {
      int v15 = 0;
    }
    if (v8 >= a2) {
      goto LABEL_17;
    }
  }
  unsigned int v16 = ~v8 + a2;
  unsigned int v17 = (~(_BYTE)v8 + a2);
  if (v10 < 4) {
    int v18 = (v16 >> v11) + 1;
  }
  else {
    int v18 = 1;
  }
  if (v10 >= 4) {
    unsigned int v19 = v16;
  }
  else {
    unsigned int v19 = v17;
  }
  bzero(a1, v10);
  if (v10 == 1) {
    *a1 = v19;
  }
  else {
    *(_DWORD *)a1 = v19;
  }
  switch(v15)
  {
    case 1:
      a1[v10] = v18;
      break;
    case 2:
      *(_WORD *)&a1[v10] = v18;
      break;
    case 3:
LABEL_46:
      __break(1u);
      JUMPOUT(0x187B9C5CCLL);
    case 4:
      *(_DWORD *)&a1[v10] = v18;
      break;
    default:
      return;
  }
}

uint64_t type metadata accessor for SettingsLink()
{
  return __swift_instantiateGenericMetadata();
}

ValueMetadata *type metadata accessor for DefaultSettingsLinkLabel()
{
  return &type metadata for DefaultSettingsLinkLabel;
}

uint64_t sub_187B9C61C()
{
  type metadata accessor for Button();

  return swift_getWitnessTable();
}

uint64_t sub_187B9C664()
{
  return lazy protocol witness table accessor for type Label<Text, Image> and conformance Label<A, B>((unint64_t *)&lazy protocol witness table cache variable for type Label<Text, Image> and conformance Label<A, B>, (void (*)(uint64_t))type metadata accessor for Label<Text, Image>);
}

__n128 _TransformEffect.transform.getter@<Q0>(uint64_t a1@<X8>)
{
  long long v2 = *(_OWORD *)(v1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)v1;
  *(_OWORD *)(a1 + 16) = v2;
  __n128 result = *(__n128 *)(v1 + 32);
  *(__n128 *)(a1 + 32) = result;
  return result;
}

__n128 _TransformEffect.transform.setter(uint64_t a1)
{
  long long v2 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)uint64_t v1 = *(_OWORD *)a1;
  *(_OWORD *)(v1 + 16) = v2;
  __n128 result = *(__n128 *)(a1 + 32);
  *(__n128 *)(v1 + 32) = result;
  return result;
}

uint64_t (*_TransformEffect.transform.modify())(void, void, void, void)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

void __swiftcall _TransformEffect.init(transform:)(SwiftUI::_TransformEffect *__return_ptr retstr, CGAffineTransform *transform)
{
  long long v2 = *(_OWORD *)&transform->c;
  *(_OWORD *)&retstr->transform.a = *(_OWORD *)&transform->a;
  *(_OWORD *)&retstr->transform.c = v2;
  *(_OWORD *)&retstr->transform.tx = *(_OWORD *)&transform->tx;
}

__n128 _TransformEffect.effectValue(size:)@<Q0>(uint64_t a1@<X8>)
{
  long long v2 = *(_OWORD *)(v1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)v1;
  *(void *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 24) = v2;
  *(void *)(a1 + 40) = 0;
  __n128 result = *(__n128 *)(v1 + 32);
  *(__n128 *)(a1 + 48) = result;
  *(void *)(a1 + 64) = 0x3FF0000000000000;
  return result;
}

uint64_t static _TransformEffect.== infix(_:_:)()
{
  return static CGAffineTransform.== infix(_:_:)() & 1;
}

__n128 protocol witness for GeometryEffect.effectValue(size:) in conformance _TransformEffect@<Q0>(uint64_t a1@<X8>)
{
  long long v2 = *(_OWORD *)(v1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)v1;
  *(void *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 24) = v2;
  *(void *)(a1 + 40) = 0;
  __n128 result = *(__n128 *)(v1 + 32);
  *(__n128 *)(a1 + 48) = result;
  *(void *)(a1 + 64) = 0x3FF0000000000000;
  return result;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance _TransformEffect()
{
  return static CGAffineTransform.== infix(_:_:)() & 1;
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance _TransformEffect()
{
  return static GeometryEffect.makeGeometryEffect(modifier:inputs:body:)();
}

void protocol witness for ViewModifier.body(content:) in conformance _TransformEffect()
{
}

uint64_t View.transformEffect(_:)(_OWORD *a1, uint64_t a2, uint64_t a3)
{
  long long v3 = a1[1];
  v5[0] = *a1;
  v5[1] = v3;
  v5[2] = a1[2];
  return MEMORY[0x18C113660](v5, a2, &type metadata for _TransformEffect, a3);
}

uint64_t VisualEffect.transformEffect(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return VisualEffect.transformEffect(_:)(a1, a2, a3, (uint64_t (*)(uint64_t *, uint64_t, uint64_t))VisualEffect.transformEffect(_:));
}

unint64_t lazy protocol witness table accessor for type _TransformEffect and conformance _TransformEffect()
{
  unint64_t result = lazy protocol witness table cache variable for type _TransformEffect and conformance _TransformEffect;
  if (!lazy protocol witness table cache variable for type _TransformEffect and conformance _TransformEffect)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _TransformEffect and conformance _TransformEffect);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type _TransformEffect and conformance _TransformEffect;
  if (!lazy protocol witness table cache variable for type _TransformEffect and conformance _TransformEffect)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _TransformEffect and conformance _TransformEffect);
  }
  return result;
}

uint64_t VisualEffect.transform(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return VisualEffect.transformEffect(_:)(a1, a2, a3, (uint64_t (*)(uint64_t *, uint64_t, uint64_t))VisualEffect.transform(_:));
}

uint64_t VisualEffect.transformEffect(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t *, uint64_t, uint64_t))
{
  CGAffineTransform.init(_:)();
  return a4(&v8, a2, a3);
}

uint64_t VisualEffect.transformEffect(_:)()
{
  return VisualEffect.geometryEffect<A>(_:)();
}

void HoverEffectContent.transformEffect(_:)()
{
}

unint64_t instantiation function for generic protocol witness table for _TransformEffect(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type _TransformEffect and conformance _TransformEffect();
  *(void *)(a1 + 8) = result;
  return result;
}

ValueMetadata *type metadata accessor for _TransformEffect()
{
  return &type metadata for _TransformEffect;
}

uint64_t sub_187B9CAE8()
{
  return swift_getWitnessTable();
}

uint64_t sub_187B9CB4C()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_187B9CBA8(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

uint64_t associated type witness table accessor for ToggleStyle.Body : View in ToolbarToggleStyle()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t ToolbarToggleStyle.makeCommonBody(configuration:)@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4 = *a1;
  unint64_t v3 = a1[1];
  char v5 = *((unsigned char *)a1 + 16);
  unint64_t v6 = a1[4];
  unint64_t v13 = a1[3];
  char v16 = *((unsigned char *)a1 + 41);
  char v17 = *((unsigned char *)a1 + 40);
  uint64_t v7 = a1[7];
  unint64_t v8 = a1[8];
  int v18 = (void *)a1[9];
  uint64_t v19 = a1[6];
  unint64_t v9 = a1[10];
  unint64_t v10 = a1[11];
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v15 = swift_getKeyPath();
  HIBYTE(v20) = 0;
  swift_retain();
  swift_retain();
  swift_retain();
  unint64_t v11 = v3;
  swift_retain();
  outlined copy of ToggleStyleConfiguration.Effect(v19, v7, v8, v18);
  _s7SwiftUI7BindingVySbGMaTm_5(0, (unint64_t *)&lazy cache variable for type metadata for Binding<Bool>, MEMORY[0x1E4FBB390], MEMORY[0x1E4F41638]);
  MEMORY[0x18C113DA0](&v20);
  LOBYTE(v3) = v20;
  uint64_t result = swift_getKeyPath();
  *(void *)a2 = v4;
  *(void *)(a2 + 8) = v11;
  *(unsigned char *)(a2 + 16) = v5;
  *(_DWORD *)(a2 + 17) = v4;
  *(_DWORD *)(a2 + 20) = v4 >> 24;
  *(void *)(a2 + 24) = v13;
  *(void *)(a2 + 32) = v6;
  *(unsigned char *)(a2 + 40) = v17;
  *(unsigned char *)(a2 + 41) = v16;
  *(_DWORD *)(a2 + 42) = v21;
  *(_WORD *)(a2 + 46) = v22;
  *(void *)(a2 + 48) = v19;
  *(void *)(a2 + 56) = v7;
  *(void *)(a2 + 64) = v8;
  *(void *)(a2 + 72) = v18;
  *(void *)(a2 + 80) = v9;
  *(void *)(a2 + 88) = v10;
  *(void *)(a2 + 96) = KeyPath;
  *(unsigned char *)(a2 + 104) = HIBYTE(v20);
  *(_DWORD *)(a2 + 108) = *(_DWORD *)((char *)&v20 + 3);
  *(_DWORD *)(a2 + 105) = v20;
  *(void *)(a2 + 112) = v15;
  *(unsigned char *)(a2 + 120) = 0;
  *(unsigned char *)(a2 + 121) = 0;
  *(unsigned char *)(a2 + 128) = v3;
  *(void *)(a2 + 136) = result;
  *(unsigned char *)(a2 + 144) = 0;
  return result;
}

double closure #2 in ToolbarToggleStyle.makeBody(configuration:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  outlined init with take of ToggleStyleConfiguration.Effect((long long *)(a1 + 48), v25);
  outlined init with take of ToggleStyleConfiguration.Effect(v25, &v26);
  unint64_t v4 = v28;
  if (v28)
  {
    uint64_t v6 = *((void *)&v26 + 1);
    uint64_t v5 = v26;
    uint64_t v7 = v27;
    uint64_t v8 = v29;
    uint64_t v9 = v30;
  }
  else
  {
    uint64_t v5 = 0;
    uint64_t v6 = 0;
    uint64_t v7 = 0;
    uint64_t v8 = 0;
    uint64_t v9 = 0;
  }
  uint64_t v10 = *(void *)(a1 + 24);
  uint64_t v11 = *(void *)(a1 + 32);
  char v21 = *(unsigned char *)(a1 + 40);
  swift_retain();
  swift_retain();
  outlined retain of ToggleStyleConfiguration.Effect((uint64_t)v25);
  swift_retain();
  swift_retain();
  outlined copy of ToggleStyleConfiguration.Effect(v5, v6, v7, v4);
  swift_release();
  swift_release();
  outlined consume of ToggleStyleConfiguration.Effect(v5, v6, v7, v4);
  uint64_t KeyPath = swift_getKeyPath();
  long long v12 = *(_OWORD *)(a1 + 48);
  v22[2] = *(_OWORD *)(a1 + 32);
  v22[3] = v12;
  long long v13 = *(_OWORD *)(a1 + 80);
  v22[4] = *(_OWORD *)(a1 + 64);
  v22[5] = v13;
  long long v14 = *(_OWORD *)(a1 + 16);
  v22[0] = *(_OWORD *)a1;
  v22[1] = v14;
  ToolbarToggleStyle.makeCommonBody(configuration:)((unint64_t *)v22, (uint64_t)v23);
  *(void *)a2 = v10;
  *(void *)(a2 + 8) = v11;
  *(unsigned char *)(a2 + 16) = v21;
  *(void *)(a2 + 24) = v5;
  *(void *)(a2 + 32) = v6;
  *(void *)(a2 + 40) = v7;
  *(void *)(a2 + 48) = v4;
  *(void *)(a2 + 56) = v8;
  *(void *)(a2 + 64) = v9;
  *(void *)(a2 + 72) = KeyPath;
  *(unsigned char *)(a2 + 80) = 0;
  *(void *)(a2 + 88) = 0;
  long long v15 = v23[7];
  *(_OWORD *)(a2 + 192) = v23[6];
  *(_OWORD *)(a2 + 208) = v15;
  *(_OWORD *)(a2 + 224) = v23[8];
  *(unsigned char *)(a2 + 240) = v24;
  long long v16 = v23[3];
  *(_OWORD *)(a2 + 128) = v23[2];
  *(_OWORD *)(a2 + 144) = v16;
  long long v17 = v23[5];
  *(_OWORD *)(a2 + 160) = v23[4];
  *(_OWORD *)(a2 + 176) = v17;
  double result = *(double *)v23;
  long long v19 = v23[1];
  *(_OWORD *)(a2 + 96) = v23[0];
  *(_OWORD *)(a2 + 112) = v19;
  return result;
}

uint64_t ToolbarToggleStyle.ResolvedBody.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v71 = a1;
  type metadata accessor for Button<ModifiedContent<ModifiedContent<ModifiedContent<ToggleStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, _EnvironmentKeyTransformModifier<AnyShapeStyle?>>, _BackgroundModifier<ModifiedContent<_ShapeView<ResolvedBorderShape, _OpacityShapeStyle<TintShapeStyle>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonEdgeOutsetModifier, EmptyModifier>>>>>();
  uint64_t v3 = v2 - 8;
  MEMORY[0x1F4188790](v2);
  uint64_t v5 = (_WORD *)((char *)&v60 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  type metadata accessor for ModifiedContent<Button<ModifiedContent<ModifiedContent<ModifiedContent<ToggleStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, _EnvironmentKeyTransformModifier<AnyShapeStyle?>>, _BackgroundModifier<ModifiedContent<_ShapeView<ResolvedBorderShape, _OpacityShapeStyle<TintShapeStyle>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonEdgeOutsetModifier, EmptyModifier>>>>>, _ContentShapeKindModifier<ToolbarButtonHoverShape>>();
  uint64_t v63 = v6 - 8;
  MEMORY[0x1F4188790](v6 - 8);
  long long v62 = (char *)&v60 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<ModifiedContent<ToggleStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, _EnvironmentKeyTransformModifier<AnyShapeStyle?>>, _BackgroundModifier<ModifiedContent<_ShapeView<ResolvedBorderShape, _OpacityShapeStyle<TintShapeStyle>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonEdgeOutsetModifier, EmptyModifier>>>>>, _ContentShapeKindModifier<ToolbarButtonHoverShape>>, CustomHoverEffectModifier<HoverEffect>>();
  uint64_t v67 = v8;
  MEMORY[0x1F4188790](v8);
  uint64_t v70 = (uint64_t)&v60 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<ModifiedContent<ToggleStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, _EnvironmentKeyTransformModifier<AnyShapeStyle?>>, _BackgroundModifier<ModifiedContent<_ShapeView<ResolvedBorderShape, _OpacityShapeStyle<TintShapeStyle>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonEdgeOutsetModifier, EmptyModifier>>>>>, _ContentShapeKindModifier<ToolbarButtonHoverShape>>, CustomHoverEffectModifier<HoverEffect>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonEdgeOutsetModifier, EmptyModifier>>(0);
  MEMORY[0x1F4188790](v10 - 8);
  uint64_t v69 = (uint64_t)&v60 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ToggleStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, _EnvironmentKeyTransformModifier<AnyShapeStyle?>>, _BackgroundModifier<ModifiedContent<_ShapeView<ResolvedBorderShape, _OpacityShapeStyle<TintShapeStyle>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonEdgeOutsetModifier, EmptyModifier>>>>(0, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<ModifiedContent<ToggleStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, _EnvironmentKeyTransformModifier<AnyShapeStyle?>>, _BackgroundModifier<ModifiedContent<_ShapeView<ResolvedBorderShape, _OpacityShapeStyle<TintShapeStyle>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonEdgeOutsetModifier, EmptyModifier>>>>>, _ContentShapeKindModifier<ToolbarButtonHoverShape>>, CustomHoverEffectModifier<HoverEffect>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonEdgeOutsetModifier, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier>, EmptyModifier>>, type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<ModifiedContent<ToggleStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, _EnvironmentKeyTransformModifier<AnyShapeStyle?>>, _BackgroundModifier<ModifiedContent<_ShapeView<ResolvedBorderShape, _OpacityShapeStyle<TintShapeStyle>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonEdgeOutsetModifier, EmptyModifier>>>>>, _ContentShapeKindModifier<ToolbarButtonHoverShape>>, CustomHoverEffectModifier<HoverEffect>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonEdgeOutsetModifier, EmptyModifier>>, (void (*)(uint64_t))type metadata accessor for StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier>, EmptyModifier>);
  uint64_t v66 = v12;
  MEMORY[0x1F4188790](v12);
  uint64_t v68 = (uint64_t)&v60 - v13;
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<ModifiedContent<ToggleStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, _EnvironmentKeyTransformModifier<AnyShapeStyle?>>, _BackgroundModifier<ModifiedContent<_ShapeView<ResolvedBorderShape, _OpacityShapeStyle<TintShapeStyle>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonEdgeOutsetModifier, EmptyModifier>>>>>, _ContentShapeKindModifier<ToolbarButtonHoverShape>>, CustomHoverEffectModifier<HoverEffect>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonEdgeOutsetModifier, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, PlatformItemTintModifier, EmptyMo();
  uint64_t v65 = v14;
  MEMORY[0x1F4188790](v14);
  uint64_t v64 = (uint64_t)&v60 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  long long v16 = v1[5];
  long long v96 = v1[4];
  long long v97 = v16;
  v98[0] = v1[6];
  *(_OWORD *)((char *)v98 + 10) = *(long long *)((char *)v1 + 106);
  long long v17 = v1[1];
  long long v92 = *v1;
  long long v93 = v17;
  long long v18 = v1[3];
  long long v94 = v1[2];
  long long v95 = v18;
  long long v19 = (_OWORD *)swift_allocObject();
  long long v20 = v1[3];
  v19[3] = v1[2];
  v19[4] = v20;
  long long v21 = v1[1];
  v19[1] = *v1;
  v19[2] = v21;
  *(_OWORD *)((char *)v19 + 122) = *(long long *)((char *)v1 + 106);
  long long v22 = v1[6];
  long long v23 = v1[4];
  void v19[6] = v1[5];
  v19[7] = v22;
  v19[5] = v23;
  *uint64_t v5 = 256;
  char v24 = (void *)((char *)v5 + *(int *)(v3 + 44));
  uint64_t v61 = v5;
  *char v24 = partial apply for implicit closure #2 in implicit closure #1 in ToolbarToggleStyle.ResolvedBody.body.getter;
  v24[1] = v19;
  type metadata accessor for ButtonAction();
  swift_storeEnumTagMultiPayload();
  uint64_t v25 = (uint64_t)v5 + *(int *)(v3 + 48);
  long long v101 = v94;
  long long v102 = v95;
  long long v103 = v96;
  long long v104 = v97;
  long long v99 = v92;
  long long v100 = v93;
  outlined retain of ToolbarToggleStyle.ResolvedBody((uint64_t)&v92);
  specialized View.toolbarButtonLabel(ignoreEdge:)(&v72, 0);
  uint64_t KeyPath = swift_getKeyPath();
  unsigned __int8 v27 = (_OWORD *)swift_allocObject();
  long long v28 = v97;
  v27[5] = v96;
  v27[6] = v28;
  void v27[7] = v98[0];
  *(_OWORD *)((char *)v27 + 122) = *(_OWORD *)((char *)v98 + 10);
  long long v29 = v93;
  v27[1] = v92;
  v27[2] = v29;
  long long v30 = v95;
  v27[3] = v94;
  v27[4] = v30;
  outlined init with copy of ModifiedContent<ToggleStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>((uint64_t)&v72, (uint64_t)&v87);
  uint64_t v89 = KeyPath;
  v90 = partial apply for implicit closure #2 in implicit closure #1 in ToolbarToggleStyle.ResolvedBody.label.getter;
  v91 = v27;
  outlined retain of ToolbarToggleStyle.ResolvedBody((uint64_t)&v92);
  outlined destroy of ModifiedContent<ToggleStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>((uint64_t)&v72);
  uint64_t v31 = static Alignment.center.getter();
  uint64_t v33 = v32;
  long long v76 = v96;
  long long v77 = v97;
  v78[0] = v98[0];
  *(_OWORD *)((char *)v78 + 10) = *(_OWORD *)((char *)v98 + 10);
  long long v72 = v92;
  long long v73 = v93;
  long long v74 = v94;
  long long v75 = v95;
  ToolbarToggleStyle.ResolvedBody.backgroundContent.getter((uint64_t)v79);
  char v34 = v79[0];
  uint64_t v35 = v79[1];
  char v36 = v80;
  long long v60 = v81;
  uint64_t v37 = v82;
  uint64_t v38 = v83;
  int v39 = v84;
  char v40 = v85;
  char v41 = v86;
  outlined init with copy of ModifiedContent<ModifiedContent<ToggleStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, _EnvironmentKeyTransformModifier<AnyShapeStyle?>>((uint64_t)&v87, v25, (uint64_t (*)(void))type metadata accessor for ModifiedContent<ModifiedContent<ToggleStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, _EnvironmentKeyTransformModifier<AnyShapeStyle?>>);
  *(unsigned char *)(v25 + 128) = v34;
  *(void *)(v25 + 136) = v35;
  uint64_t v42 = (uint64_t)v62;
  *(unsigned char *)(v25 + 144) = v36;
  *(_OWORD *)(v25 + 152) = v60;
  *(void *)(v25 + 168) = v37;
  *(void *)(v25 + 176) = v38;
  *(_DWORD *)(v25 + 184) = v39;
  *(unsigned char *)(v25 + 188) = v40;
  *(unsigned char *)(v25 + 189) = v41;
  *(void *)(v25 + 192) = v31;
  *(void *)(v25 + 200) = v33;
  outlined destroy of ModifiedContent<ModifiedContent<ToggleStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, _EnvironmentKeyTransformModifier<AnyShapeStyle?>>((uint64_t)&v87, (uint64_t (*)(void))type metadata accessor for ModifiedContent<ModifiedContent<ToggleStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, _EnvironmentKeyTransformModifier<AnyShapeStyle?>>);
  long long v87 = v99;
  char v88 = v100;
  long long v72 = v99;
  LOBYTE(v73) = v100;
  _s7SwiftUI7BindingVySbGMaTm_5(0, (unint64_t *)&lazy cache variable for type metadata for Binding<Bool>, MEMORY[0x1E4FBB390], MEMORY[0x1E4F41638]);
  uint64_t v44 = v43;
  MEMORY[0x18C113DA0](v79);
  if (LOBYTE(v79[0])) {
    uint64_t v45 = 0;
  }
  else {
    uint64_t v45 = 8;
  }
  uint64_t v46 = (uint64_t)v61;
  outlined init with copy of ModifiedContent<ModifiedContent<ToggleStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, _EnvironmentKeyTransformModifier<AnyShapeStyle?>>((uint64_t)v61, v42, (uint64_t (*)(void))type metadata accessor for Button<ModifiedContent<ModifiedContent<ModifiedContent<ToggleStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, _EnvironmentKeyTransformModifier<AnyShapeStyle?>>, _BackgroundModifier<ModifiedContent<_ShapeView<ResolvedBorderShape, _OpacityShapeStyle<TintShapeStyle>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonEdgeOutsetModifier, EmptyModifier>>>>>);
  uint64_t v47 = v42 + *(int *)(v63 + 44);
  *(_DWORD *)uint64_t v47 = 2;
  *(void *)(v47 + 8) = v45;
  outlined destroy of ModifiedContent<ModifiedContent<ToggleStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, _EnvironmentKeyTransformModifier<AnyShapeStyle?>>(v46, (uint64_t (*)(void))type metadata accessor for Button<ModifiedContent<ModifiedContent<ModifiedContent<ToggleStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, _EnvironmentKeyTransformModifier<AnyShapeStyle?>>, _BackgroundModifier<ModifiedContent<_ShapeView<ResolvedBorderShape, _OpacityShapeStyle<TintShapeStyle>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonEdgeOutsetModifier, EmptyModifier>>>>>);
  long long v72 = v87;
  LOBYTE(v73) = v88;
  MEMORY[0x18C113DA0](v79, v44);
  if (LOBYTE(v79[0]) == 1)
  {
    if (one-time initialization token for lift != -1) {
      swift_once();
    }
    long long v48 = &static HoverEffect.lift;
  }
  else
  {
    if (one-time initialization token for highlight != -1) {
      swift_once();
    }
    long long v48 = &static HoverEffect.highlight;
  }
  uint64_t v49 = *v48;
  uint64_t v50 = swift_getKeyPath();
  uint64_t v51 = swift_getKeyPath();
  uint64_t v52 = v70;
  outlined init with copy of ModifiedContent<ModifiedContent<ToggleStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, _EnvironmentKeyTransformModifier<AnyShapeStyle?>>(v42, v70, (uint64_t (*)(void))type metadata accessor for ModifiedContent<Button<ModifiedContent<ModifiedContent<ModifiedContent<ToggleStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, _EnvironmentKeyTransformModifier<AnyShapeStyle?>>, _BackgroundModifier<ModifiedContent<_ShapeView<ResolvedBorderShape, _OpacityShapeStyle<TintShapeStyle>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonEdgeOutsetModifier, EmptyModifier>>>>>, _ContentShapeKindModifier<ToolbarButtonHoverShape>>);
  uint64_t v53 = v52 + *(int *)(v67 + 36);
  *(void *)uint64_t v53 = v49;
  *(unsigned char *)(v53 + 8) = 1;
  *(void *)(v53 + 16) = v50;
  *(unsigned char *)(v53 + 24) = 0;
  *(void *)(v53 + 32) = v51;
  *(_WORD *)(v53 + 40) = 0;
  *(void *)(v53 + 48) = 0;
  *(unsigned char *)(v53 + 56) = 1;
  *(void *)(v53 + 64) = 0;
  *(_WORD *)(v53 + 72) = 513;
  *(void *)(v53 + 80) = 0;
  swift_retain();
  outlined destroy of ModifiedContent<ModifiedContent<ToggleStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, _EnvironmentKeyTransformModifier<AnyShapeStyle?>>(v42, (uint64_t (*)(void))type metadata accessor for ModifiedContent<Button<ModifiedContent<ModifiedContent<ModifiedContent<ToggleStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, _EnvironmentKeyTransformModifier<AnyShapeStyle?>>, _BackgroundModifier<ModifiedContent<_ShapeView<ResolvedBorderShape, _OpacityShapeStyle<TintShapeStyle>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonEdgeOutsetModifier, EmptyModifier>>>>>, _ContentShapeKindModifier<ToolbarButtonHoverShape>>);
  uint64_t v54 = v69;
  outlined init with copy of ModifiedContent<ModifiedContent<ToggleStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, _EnvironmentKeyTransformModifier<AnyShapeStyle?>>(v52, v69, (uint64_t (*)(void))type metadata accessor for ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<ModifiedContent<ToggleStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, _EnvironmentKeyTransformModifier<AnyShapeStyle?>>, _BackgroundModifier<ModifiedContent<_ShapeView<ResolvedBorderShape, _OpacityShapeStyle<TintShapeStyle>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonEdgeOutsetModifier, EmptyModifier>>>>>, _ContentShapeKindModifier<ToolbarButtonHoverShape>>, CustomHoverEffectModifier<HoverEffect>>);
  outlined destroy of ModifiedContent<ModifiedContent<ToggleStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, _EnvironmentKeyTransformModifier<AnyShapeStyle?>>(v52, (uint64_t (*)(void))type metadata accessor for ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<ModifiedContent<ToggleStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, _EnvironmentKeyTransformModifier<AnyShapeStyle?>>, _BackgroundModifier<ModifiedContent<_ShapeView<ResolvedBorderShape, _OpacityShapeStyle<TintShapeStyle>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonEdgeOutsetModifier, EmptyModifier>>>>>, _ContentShapeKindModifier<ToolbarButtonHoverShape>>, CustomHoverEffectModifier<HoverEffect>>);
  uint64_t v55 = v68;
  outlined init with copy of ModifiedContent<ModifiedContent<ToggleStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, _EnvironmentKeyTransformModifier<AnyShapeStyle?>>(v54, v68, (uint64_t (*)(void))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<ModifiedContent<ToggleStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, _EnvironmentKeyTransformModifier<AnyShapeStyle?>>, _BackgroundModifier<ModifiedContent<_ShapeView<ResolvedBorderShape, _OpacityShapeStyle<TintShapeStyle>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonEdgeOutsetModifier, EmptyModifier>>>>>, _ContentShapeKindModifier<ToolbarButtonHoverShape>>, CustomHoverEffectModifier<HoverEffect>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonEdgeOutsetModifier, EmptyModifier>>);
  *(void *)(v55 + *(int *)(v66 + 36)) = 1;
  outlined destroy of ModifiedContent<ModifiedContent<ToggleStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, _EnvironmentKeyTransformModifier<AnyShapeStyle?>>(v54, (uint64_t (*)(void))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<ModifiedContent<ToggleStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, _EnvironmentKeyTransformModifier<AnyShapeStyle?>>, _BackgroundModifier<ModifiedContent<_ShapeView<ResolvedBorderShape, _OpacityShapeStyle<TintShapeStyle>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonEdgeOutsetModifier, EmptyModifier>>>>>, _ContentShapeKindModifier<ToolbarButtonHoverShape>>, CustomHoverEffectModifier<HoverEffect>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonEdgeOutsetModifier, EmptyModifier>>);
  uint64_t v56 = swift_getKeyPath();
  uint64_t v57 = v64;
  outlined init with copy of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<ModifiedContent<ToggleStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, _EnvironmentKeyTransformModifier<AnyShapeStyle?>>, _BackgroundModifier<ModifiedContent<_ShapeView<ResolvedBorderShape, _OpacityShapeStyle<TintShapeStyle>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonEdgeOutsetModifier, EmptyModifier>>>>>, _ContentShapeKindModifier<ToolbarButtonHoverShape>>, CustomHoverEffectModifier<HoverEffect>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonEdgeOutsetModifier, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier>, EmptyModifier>>(v55, v64);
  uint64_t v58 = v57 + *(int *)(v65 + 36);
  *(void *)uint64_t v58 = v56;
  *(unsigned char *)(v58 + 8) = 0;
  outlined destroy of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<ModifiedContent<ToggleStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, _EnvironmentKeyTransformModifier<AnyShapeStyle?>>, _BackgroundModifier<ModifiedContent<_ShapeView<ResolvedBorderShape, _OpacityShapeStyle<TintShapeStyle>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonEdgeOutsetModifier, EmptyModifier>>>>>, _ContentShapeKindModifier<ToolbarButtonHoverShape>>, CustomHoverEffectModifier<HoverEffect>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonEdgeOutsetModifier, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier>, EmptyModifier>>(v55);
  return outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<ModifiedContent<ToggleStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, _EnvironmentKeyTransformModifier<AnyShapeStyle?>>, _BackgroundModifier<ModifiedContent<_ShapeView<ResolvedBorderShape, _OpacityShapeStyle<TintShapeStyle>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonEdgeOutsetModifier, EmptyModifier>>>>>, _ContentShapeKindModifier<ToolbarButtonHoverShape>>, CustomHoverEffectModifier<HoverEffect>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonEdgeOutsetModifier, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, PlatformItemTintModifier, EmptyMo(v57, v71);
}

void *implicit closure #2 in implicit closure #1 in ToolbarToggleStyle.ResolvedBody.body.getter(_OWORD *a1)
{
  long long v1 = a1[1];
  v8[0] = *a1;
  v8[1] = v1;
  long long v2 = a1[3];
  long long v8[2] = a1[2];
  v8[3] = v2;
  long long v3 = a1[5];
  v8[4] = a1[4];
  _OWORD v8[5] = v3;
  outlined retain of ToggleStyleConfiguration(v8);
  _s7SwiftUI7BindingVySbGMaTm_5(0, (unint64_t *)&lazy cache variable for type metadata for Binding<Bool>, MEMORY[0x1E4FBB390], MEMORY[0x1E4F41638]);
  uint64_t v5 = v4;
  swift_retain();
  swift_retain();
  MEMORY[0x18C113DA0](&v7, v5);
  dispatch thunk of AnyLocation.set(_:transaction:)();
  swift_release();
  swift_release();
  return outlined release of ToggleStyleConfiguration(v8);
}

void *implicit closure #2 in implicit closure #1 in ToolbarToggleStyle.ResolvedBody.label.getter(void *a1)
{
  _s7SwiftUI7BindingVySbGMaTm_5(0, (unint64_t *)&lazy cache variable for type metadata for Binding<Bool>, MEMORY[0x1E4FBB390], MEMORY[0x1E4F41638]);
  double result = MEMORY[0x18C113DA0](&v3);
  if (v3 == 1)
  {
    swift_release();
    double result = (void *)AnyShapeStyle.init<A>(_:)();
    *a1 = result;
  }
  return result;
}

void *ToolbarToggleStyle.ResolvedBody.backgroundContent.getter@<X0>(uint64_t a1@<X8>)
{
  long long v3 = v1[6];
  long long v34 = v1[5];
  *(_OWORD *)uint64_t v35 = v3;
  long long v4 = v1[4];
  *(_OWORD *)&v35[10] = *(long long *)((char *)v1 + 106);
  long long v5 = v1[1];
  long long v29 = *v1;
  long long v30 = v5;
  long long v6 = v1[3];
  long long v31 = v1[2];
  long long v32 = v6;
  long long v33 = v4;
  uint64_t v7 = v3;
  uint64_t v8 = BYTE8(v3);
  outlined retain of ToolbarToggleStyle.ResolvedBody((uint64_t)&v29);
  outlined copy of Environment<MenuActionDismissBehavior>.Content(v7, v8);
  specialized Environment.wrappedValue.getter(v7, v8, &v28);
  outlined consume of Environment<Bool?>.Content(v7, v8);
  outlined release of ToolbarToggleStyle.ResolvedBody((uint64_t)&v29);
  char v9 = v28;
  uint64_t v10 = *(void *)&v35[16];
  uint64_t v11 = v35[24];
  int v12 = v35[25];
  outlined retain of ToolbarToggleStyle.ResolvedBody((uint64_t)&v29);
  outlined copy of Environment<CGFloat?>.Content(v10, v11, v12);
  specialized Environment.wrappedValue.getter(v10, v11 | (v12 << 8), (uint64_t)&v26);
  outlined consume of Environment<CGFloat?>.Content(v10, v11, v12);
  outlined release of ToolbarToggleStyle.ResolvedBody((uint64_t)&v29);
  uint64_t v13 = v26;
  char v14 = BYTE8(v26);
  static EdgeInsets.zero.getter();
  uint64_t v16 = v15;
  uint64_t v18 = v17;
  uint64_t v20 = v19;
  uint64_t v22 = v21;
  long long v26 = v29;
  char v27 = v30;
  _s7SwiftUI7BindingVySbGMaTm_5(0, (unint64_t *)&lazy cache variable for type metadata for Binding<Bool>, MEMORY[0x1E4FBB390], MEMORY[0x1E4F41638]);
  double result = MEMORY[0x18C113DA0](&v28);
  BOOL v24 = v28 == 0;
  float v25 = 0.0;
  *(unsigned char *)a1 = v9;
  if (!v24) {
    float v25 = 1.0;
  }
  *(void *)(a1 + 8) = v13;
  *(unsigned char *)(a1 + 16) = v14;
  *(void *)(a1 + 24) = v16;
  *(void *)(a1 + 32) = v18;
  *(void *)(a1 + 40) = v20;
  *(void *)(a1 + 48) = v22;
  *(float *)(a1 + 56) = v25;
  *(_WORD *)(a1 + 60) = 256;
  return result;
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance ToolbarToggleStyle.ResolvedBody()
{
  return static ModifiedContent<>._viewListCount(inputs:)();
}

void *protocol witness for ToggleStyle.makeBody(configuration:) in conformance ToolbarToggleStyle@<X0>(long long *a1@<X0>, void *a2@<X8>)
{
  long long v3 = a1[3];
  long long v16 = a1[2];
  v17[0] = v3;
  long long v4 = a1[5];
  v17[1] = a1[4];
  v17[2] = v4;
  long long v5 = a1[1];
  long long v14 = *a1;
  long long v15 = v5;
  outlined init with take of ToggleStyleConfiguration.Effect(v17, v18);
  outlined init with take of ToggleStyleConfiguration.Effect(v18, &v19);
  long long v6 = v21;
  if (v21)
  {
    uint64_t v8 = *((void *)&v19 + 1);
    uint64_t v7 = v19;
    uint64_t v9 = v20;
    uint64_t v10 = v22;
    uint64_t v11 = v23;
  }
  else
  {
    uint64_t v7 = 0;
    uint64_t v8 = 0;
    uint64_t v9 = 0;
    uint64_t v10 = 0;
    uint64_t v11 = 0;
  }
  swift_retain();
  swift_retain();
  outlined retain of ToggleStyleConfiguration.Effect((uint64_t)v18);
  swift_retain();
  swift_retain();
  outlined copy of ToggleStyleConfiguration.Effect(v7, v8, v9, v6);
  swift_release();
  swift_release();
  outlined consume of ToggleStyleConfiguration.Effect(v7, v8, v9, v6);
  __src[0] = *((void *)&v15 + 1);
  __src[1] = v16;
  LOBYTE(__src[2]) = BYTE8(v16);
  __src[3] = v7;
  __src[4] = v8;
  __src[5] = v9;
  __src[6] = v6;
  __src[7] = v10;
  __src[8] = v11;
  __src[9] = swift_getKeyPath();
  LOBYTE(__src[10]) = 0;
  memset(&__src[11], 0, 17);
  closure #2 in ToolbarToggleStyle.makeBody(configuration:)((uint64_t)&v14, (uint64_t)&__src[14]);
  return memcpy(a2, __src, 0x161uLL);
}

uint64_t destroy for ToolbarToggleStyle.ResolvedBody(uint64_t a1)
{
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  long long v2 = *(void **)(a1 + 72);
  if (v2)
  {
    outlined consume of Environment<AppIntentExecutor?>.Content(*(void *)(a1 + 48), *(void *)(a1 + 56), *(unsigned char *)(a1 + 64));

    swift_release();
  }
  outlined consume of Environment<Bool?>.Content(*(void *)(a1 + 96), *(unsigned __int8 *)(a1 + 104));
  uint64_t v3 = *(void *)(a1 + 112);
  char v4 = *(unsigned char *)(a1 + 121);
  uint64_t v5 = *(unsigned __int8 *)(a1 + 120);

  return outlined consume of Environment<CGFloat?>.Content(v3, v5, v4);
}

uint64_t initializeWithCopy for ToolbarToggleStyle.ResolvedBody(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  uint64_t v5 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v5;
  *(_WORD *)(a1 + 40) = *(_WORD *)(a2 + 40);
  long long v6 = *(void **)(a2 + 72);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  if (v6)
  {
    uint64_t v7 = *(void *)(a2 + 48);
    uint64_t v8 = *(void *)(a2 + 56);
    char v9 = *(unsigned char *)(a2 + 64);
    outlined copy of Environment<AppIntentExecutor?>.Content(v7, v8, v9);
    *(void *)(a1 + 48) = v7;
    *(void *)(a1 + 56) = v8;
    *(unsigned char *)(a1 + 64) = v9;
    uint64_t v10 = *(void *)(a2 + 80);
    uint64_t v11 = *(void *)(a2 + 88);
    *(void *)(a1 + 72) = v6;
    *(void *)(a1 + 80) = v10;
    *(void *)(a1 + 88) = v11;
    id v12 = v6;
    swift_retain();
  }
  else
  {
    long long v13 = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 64) = v13;
    *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  }
  uint64_t v14 = *(void *)(a2 + 96);
  unsigned __int8 v15 = *(unsigned char *)(a2 + 104);
  outlined copy of Environment<MenuActionDismissBehavior>.Content(v14, v15);
  *(void *)(a1 + 96) = v14;
  *(unsigned char *)(a1 + 104) = v15;
  uint64_t v16 = *(void *)(a2 + 112);
  char v17 = *(unsigned char *)(a2 + 121);
  uint64_t v18 = *(unsigned __int8 *)(a2 + 120);
  outlined copy of Environment<CGFloat?>.Content(v16, v18, v17);
  *(void *)(a1 + 112) = v16;
  *(unsigned char *)(a1 + 120) = v18;
  *(unsigned char *)(a1 + 121) = v17;
  return a1;
}

uint64_t assignWithCopy for ToolbarToggleStyle.ResolvedBody(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_retain();
  swift_release();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_retain();
  swift_release();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_retain();
  swift_release();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_retain();
  swift_release();
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(unsigned char *)(a1 + 41) = *(unsigned char *)(a2 + 41);
  uint64_t v4 = (_OWORD *)(a1 + 48);
  uint64_t v5 = (_OWORD *)(a2 + 48);
  uint64_t v6 = *(void *)(a2 + 72);
  if (*(void *)(a1 + 72))
  {
    if (v6)
    {
      uint64_t v7 = *(void *)(a2 + 48);
      uint64_t v8 = *(void *)(a2 + 56);
      char v9 = *(unsigned char *)(a2 + 64);
      outlined copy of Environment<AppIntentExecutor?>.Content(v7, v8, v9);
      uint64_t v10 = *(void *)(a1 + 48);
      uint64_t v11 = *(void *)(a1 + 56);
      char v12 = *(unsigned char *)(a1 + 64);
      *(void *)(a1 + 48) = v7;
      *(void *)(a1 + 56) = v8;
      *(unsigned char *)(a1 + 64) = v9;
      outlined consume of Environment<AppIntentExecutor?>.Content(v10, v11, v12);
      long long v13 = *(void **)(a2 + 72);
      uint64_t v14 = *(void **)(a1 + 72);
      *(void *)(a1 + 72) = v13;
      id v15 = v13;

      uint64_t v16 = *(void *)(a2 + 88);
      *(void *)(a1 + 80) = *(void *)(a2 + 80);
      *(void *)(a1 + 88) = v16;
      swift_retain();
      swift_release();
    }
    else
    {
      outlined destroy of AppIntentAction(a1 + 48);
      long long v24 = *(_OWORD *)(a2 + 64);
      long long v23 = *(_OWORD *)(a2 + 80);
      *uint64_t v4 = *v5;
      *(_OWORD *)(a1 + 64) = v24;
      *(_OWORD *)(a1 + 80) = v23;
    }
  }
  else if (v6)
  {
    uint64_t v17 = *(void *)(a2 + 48);
    uint64_t v18 = *(void *)(a2 + 56);
    char v19 = *(unsigned char *)(a2 + 64);
    outlined copy of Environment<AppIntentExecutor?>.Content(v17, v18, v19);
    *(void *)(a1 + 48) = v17;
    *(void *)(a1 + 56) = v18;
    *(unsigned char *)(a1 + 64) = v19;
    unsigned __int8 v20 = *(void **)(a2 + 72);
    *(void *)(a1 + 72) = v20;
    uint64_t v21 = *(void *)(a2 + 88);
    *(void *)(a1 + 80) = *(void *)(a2 + 80);
    *(void *)(a1 + 88) = v21;
    id v22 = v20;
    swift_retain();
  }
  else
  {
    long long v25 = *v5;
    long long v26 = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 80) = v26;
    *uint64_t v4 = v25;
  }
  uint64_t v27 = *(void *)(a2 + 96);
  unsigned __int8 v28 = *(unsigned char *)(a2 + 104);
  outlined copy of Environment<MenuActionDismissBehavior>.Content(v27, v28);
  uint64_t v29 = *(void *)(a1 + 96);
  uint64_t v30 = *(unsigned __int8 *)(a1 + 104);
  *(void *)(a1 + 96) = v27;
  *(unsigned char *)(a1 + 104) = v28;
  outlined consume of Environment<Bool?>.Content(v29, v30);
  uint64_t v31 = *(void *)(a2 + 112);
  char v32 = *(unsigned char *)(a2 + 121);
  uint64_t v33 = *(unsigned __int8 *)(a2 + 120);
  outlined copy of Environment<CGFloat?>.Content(v31, v33, v32);
  uint64_t v34 = *(void *)(a1 + 112);
  char v35 = *(unsigned char *)(a1 + 121);
  *(void *)(a1 + 112) = v31;
  uint64_t v36 = *(unsigned __int8 *)(a1 + 120);
  *(unsigned char *)(a1 + 120) = v33;
  *(unsigned char *)(a1 + 121) = v32;
  outlined consume of Environment<CGFloat?>.Content(v34, v36, v35);
  return a1;
}

__n128 __swift_memcpy122_8(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  long long v3 = a2[1];
  long long v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  __n128 result = (__n128)a2[4];
  long long v6 = a2[5];
  long long v7 = a2[6];
  *(_OWORD *)(a1 + 106) = *(long long *)((char *)a2 + 106);
  *(_OWORD *)(a1 + 80) = v6;
  *(_OWORD *)(a1 + 96) = v7;
  *(__n128 *)(a1 + 64) = result;
  return result;
}

uint64_t assignWithTake for ToolbarToggleStyle.ResolvedBody(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_release();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_release();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_release();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_release();
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(unsigned char *)(a1 + 41) = *(unsigned char *)(a2 + 41);
  long long v4 = *(void **)(a1 + 72);
  if (!v4) {
    goto LABEL_5;
  }
  uint64_t v5 = *(void *)(a2 + 72);
  if (!v5)
  {
    outlined destroy of AppIntentAction(a1 + 48);
LABEL_5:
    long long v10 = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 64) = v10;
    *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
    goto LABEL_6;
  }
  char v6 = *(unsigned char *)(a2 + 64);
  uint64_t v7 = *(void *)(a1 + 48);
  uint64_t v8 = *(void *)(a1 + 56);
  char v9 = *(unsigned char *)(a1 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(unsigned char *)(a1 + 64) = v6;
  outlined consume of Environment<AppIntentExecutor?>.Content(v7, v8, v9);
  *(void *)(a1 + 72) = v5;

  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  swift_release();
LABEL_6:
  char v11 = *(unsigned char *)(a2 + 104);
  uint64_t v12 = *(void *)(a1 + 96);
  uint64_t v13 = *(unsigned __int8 *)(a1 + 104);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(unsigned char *)(a1 + 104) = v11;
  outlined consume of Environment<Bool?>.Content(v12, v13);
  char v14 = *(unsigned char *)(a2 + 120);
  char v15 = *(unsigned char *)(a2 + 121);
  uint64_t v16 = *(void *)(a1 + 112);
  char v17 = *(unsigned char *)(a1 + 121);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  uint64_t v18 = *(unsigned __int8 *)(a1 + 120);
  *(unsigned char *)(a1 + 120) = v14;
  *(unsigned char *)(a1 + 121) = v15;
  outlined consume of Environment<CGFloat?>.Content(v16, v18, v17);
  return a1;
}

uint64_t getEnumTagSinglePayload for ToolbarToggleStyle.ResolvedBody(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 122)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ToolbarToggleStyle.ResolvedBody(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_WORD *)(result + 120) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 122) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 122) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

void *type metadata accessor for ToolbarToggleStyle.ResolvedBody()
{
  return &unk_1ED42A2F0;
}

unint64_t lazy protocol witness table accessor for type StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, ModifiedContent<ModifiedContent<Toggle<ToggleStyleConfiguration.Label>, ToggleStyleModifier<ButtonToggleStyle>>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle>>, StaticIf<InterfaceIdiomPredicate<VisionInterfaceIdiom>, ModifiedContent<Toggle<ToggleStyleConfiguration.Label>, ToggleStyleModifier<ButtonToggleStyle>>, ModifiedContent<ToolbarToggleStyle.ResolvedBody, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>>>> and conformance <> StaticIf<A, B, C>()
{
  unint64_t result = lazy protocol witness table cache variable for type StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, ModifiedContent<ModifiedContent<Toggle<ToggleStyleConfiguration.Label>, ToggleStyleModifier<ButtonToggleStyle>>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle>>, StaticIf<InterfaceIdiomPredicate<VisionInterfaceIdiom>, ModifiedContent<Toggle<ToggleStyleConfiguration.Label>, ToggleStyleModifier<ButtonToggleStyle>>, ModifiedContent<ToolbarToggleStyle.ResolvedBody, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>>>> and conformance <> StaticIf<A, B, C>;
  if (!lazy protocol witness table cache variable for type StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, ModifiedContent<ModifiedContent<Toggle<ToggleStyleConfiguration.Label>, ToggleStyleModifier<ButtonToggleStyle>>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle>>, StaticIf<InterfaceIdiomPredicate<VisionInterfaceIdiom>, ModifiedContent<Toggle<ToggleStyleConfiguration.Label>, ToggleStyleModifier<ButtonToggleStyle>>, ModifiedContent<ToolbarToggleStyle.ResolvedBody, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>>>> and conformance <> StaticIf<A, B, C>)
  {
    type metadata accessor for StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, ModifiedContent<ModifiedContent<Toggle<ToggleStyleConfiguration.Label>, ToggleStyleModifier<ButtonToggleStyle>>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle>>, StaticIf<InterfaceIdiomPredicate<VisionInterfaceIdiom>, ModifiedContent<Toggle<ToggleStyleConfiguration.Label>, ToggleStyleModifier<ButtonToggleStyle>>, ModifiedContent<ToolbarToggleStyle.ResolvedBody, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>>>>();
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Toggle<ToggleStyleConfiguration.Label>, ToggleStyleModifier<ButtonToggleStyle>>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle>> and conformance <> ModifiedContent<A, B>();
    lazy protocol witness table accessor for type StaticIf<InterfaceIdiomPredicate<VisionInterfaceIdiom>, ModifiedContent<Toggle<ToggleStyleConfiguration.Label>, ToggleStyleModifier<ButtonToggleStyle>>, ModifiedContent<ToolbarToggleStyle.ResolvedBody, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>>> and conformance <> StaticIf<A, B, C>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, ModifiedContent<ModifiedContent<Toggle<ToggleStyleConfiguration.Label>, ToggleStyleModifier<ButtonToggleStyle>>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle>>, StaticIf<InterfaceIdiomPredicate<VisionInterfaceIdiom>, ModifiedContent<Toggle<ToggleStyleConfiguration.Label>, ToggleStyleModifier<ButtonToggleStyle>>, ModifiedContent<ToolbarToggleStyle.ResolvedBody, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>>>> and conformance <> StaticIf<A, B, C>);
  }
  return result;
}

void type metadata accessor for StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, ModifiedContent<ModifiedContent<Toggle<ToggleStyleConfiguration.Label>, ToggleStyleModifier<ButtonToggleStyle>>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle>>, StaticIf<InterfaceIdiomPredicate<VisionInterfaceIdiom>, ModifiedContent<Toggle<ToggleStyleConfiguration.Label>, ToggleStyleModifier<ButtonToggleStyle>>, ModifiedContent<ToolbarToggleStyle.ResolvedBody, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>>>>()
{
  if (!lazy cache variable for type metadata for StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, ModifiedContent<ModifiedContent<Toggle<ToggleStyleConfiguration.Label>, ToggleStyleModifier<ButtonToggleStyle>>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle>>, StaticIf<InterfaceIdiomPredicate<VisionInterfaceIdiom>, ModifiedContent<Toggle<ToggleStyleConfiguration.Label>, ToggleStyleModifier<ButtonToggleStyle>>, ModifiedContent<ToolbarToggleStyle.ResolvedBody, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>>>>)
  {
    _s7SwiftUI23InterfaceIdiomPredicateVyAA03MaccD0VGMaTm_0(255, (unint64_t *)&lazy cache variable for type metadata for InterfaceIdiomPredicate<MacInterfaceIdiom>, MEMORY[0x1E4F40158], MEMORY[0x1E4F40150], MEMORY[0x1E4F40C60]);
    type metadata accessor for ModifiedContent<ModifiedContent<Toggle<ToggleStyleConfiguration.Label>, ToggleStyleModifier<ButtonToggleStyle>>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle>>();
    type metadata accessor for StaticIf<InterfaceIdiomPredicate<VisionInterfaceIdiom>, ModifiedContent<Toggle<ToggleStyleConfiguration.Label>, ToggleStyleModifier<ButtonToggleStyle>>, ModifiedContent<ToolbarToggleStyle.ResolvedBody, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>>>();
    lazy protocol witness table accessor for type InterfaceIdiomPredicate<MacInterfaceIdiom> and conformance InterfaceIdiomPredicate<A>();
    unint64_t v0 = type metadata accessor for StaticIf();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, ModifiedContent<ModifiedContent<Toggle<ToggleStyleConfiguration.Label>, ToggleStyleModifier<ButtonToggleStyle>>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle>>, StaticIf<InterfaceIdiomPredicate<VisionInterfaceIdiom>, ModifiedContent<Toggle<ToggleStyleConfiguration.Label>, ToggleStyleModifier<ButtonToggleStyle>>, ModifiedContent<ToolbarToggleStyle.ResolvedBody, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>>>>);
    }
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<Toggle<ToggleStyleConfiguration.Label>, ToggleStyleModifier<ButtonToggleStyle>>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<Toggle<ToggleStyleConfiguration.Label>, ToggleStyleModifier<ButtonToggleStyle>>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle>>)
  {
    type metadata accessor for ModifiedContent<Toggle<ToggleStyleConfiguration.Label>, ToggleStyleModifier<ButtonToggleStyle>>();
    type metadata accessor for ToggleStyleModifier<ButtonToggleStyle>(255, &lazy cache variable for type metadata for PrimitiveButtonStyleContainerModifier<BorderedButtonStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type BorderedButtonStyle and conformance BorderedButtonStyle, (uint64_t)&type metadata for BorderedButtonStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PrimitiveButtonStyleContainerModifier);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<Toggle<ToggleStyleConfiguration.Label>, ToggleStyleModifier<ButtonToggleStyle>>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle>>);
    }
  }
}

void type metadata accessor for ModifiedContent<Toggle<ToggleStyleConfiguration.Label>, ToggleStyleModifier<ButtonToggleStyle>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<Toggle<ToggleStyleConfiguration.Label>, ToggleStyleModifier<ButtonToggleStyle>>)
  {
    _s7SwiftUI23InterfaceIdiomPredicateVyAA03MaccD0VGMaTm_0(255, &lazy cache variable for type metadata for Toggle<ToggleStyleConfiguration.Label>, (uint64_t)&type metadata for ToggleStyleConfiguration.Label, (uint64_t)&protocol witness table for ToggleStyleConfiguration.Label, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for Toggle);
    type metadata accessor for ToggleStyleModifier<ButtonToggleStyle>(255, &lazy cache variable for type metadata for ToggleStyleModifier<ButtonToggleStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type ButtonToggleStyle and conformance ButtonToggleStyle, (uint64_t)&type metadata for ButtonToggleStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ToggleStyleModifier);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<Toggle<ToggleStyleConfiguration.Label>, ToggleStyleModifier<ButtonToggleStyle>>);
    }
  }
}

void type metadata accessor for StaticIf<InterfaceIdiomPredicate<VisionInterfaceIdiom>, ModifiedContent<Toggle<ToggleStyleConfiguration.Label>, ToggleStyleModifier<ButtonToggleStyle>>, ModifiedContent<ToolbarToggleStyle.ResolvedBody, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>>>()
{
  if (!lazy cache variable for type metadata for StaticIf<InterfaceIdiomPredicate<VisionInterfaceIdiom>, ModifiedContent<Toggle<ToggleStyleConfiguration.Label>, ToggleStyleModifier<ButtonToggleStyle>>, ModifiedContent<ToolbarToggleStyle.ResolvedBody, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>>>)
  {
    _s7SwiftUI23InterfaceIdiomPredicateVyAA03MaccD0VGMaTm_0(255, (unint64_t *)&lazy cache variable for type metadata for InterfaceIdiomPredicate<VisionInterfaceIdiom>, MEMORY[0x1E4F406D0], MEMORY[0x1E4F406C8], MEMORY[0x1E4F40C60]);
    type metadata accessor for ModifiedContent<Toggle<ToggleStyleConfiguration.Label>, ToggleStyleModifier<ButtonToggleStyle>>();
    type metadata accessor for ModifiedContent<ToolbarToggleStyle.ResolvedBody, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>>(255, &lazy cache variable for type metadata for ModifiedContent<ToolbarToggleStyle.ResolvedBody, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>>, &lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>);
    lazy protocol witness table accessor for type InterfaceIdiomPredicate<VisionInterfaceIdiom> and conformance InterfaceIdiomPredicate<A>();
    unint64_t v0 = type metadata accessor for StaticIf();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for StaticIf<InterfaceIdiomPredicate<VisionInterfaceIdiom>, ModifiedContent<Toggle<ToggleStyleConfiguration.Label>, ToggleStyleModifier<ButtonToggleStyle>>, ModifiedContent<ToolbarToggleStyle.ResolvedBody, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Toggle<ToggleStyleConfiguration.Label>, ToggleStyleModifier<ButtonToggleStyle>>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<Toggle<ToggleStyleConfiguration.Label>, ToggleStyleModifier<ButtonToggleStyle>>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<Toggle<ToggleStyleConfiguration.Label>, ToggleStyleModifier<ButtonToggleStyle>>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<Toggle<ToggleStyleConfiguration.Label>, ToggleStyleModifier<ButtonToggleStyle>>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle>>();
    lazy protocol witness table accessor for type ModifiedContent<Toggle<ToggleStyleConfiguration.Label>, ToggleStyleModifier<ButtonToggleStyle>> and conformance <> ModifiedContent<A, B>();
    lazy protocol witness table accessor for type PrimitiveButtonStyleContainerModifier<BorderedButtonStyle> and conformance PrimitiveButtonStyleContainerModifier<A>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<Toggle<ToggleStyleConfiguration.Label>, ToggleStyleModifier<ButtonToggleStyle>>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<Toggle<ToggleStyleConfiguration.Label>, ToggleStyleModifier<ButtonToggleStyle>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<Toggle<ToggleStyleConfiguration.Label>, ToggleStyleModifier<ButtonToggleStyle>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<Toggle<ToggleStyleConfiguration.Label>, ToggleStyleModifier<ButtonToggleStyle>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<Toggle<ToggleStyleConfiguration.Label>, ToggleStyleModifier<ButtonToggleStyle>>();
    lazy protocol witness table accessor for type Toggle<ToggleStyleConfiguration.Label> and conformance Toggle<A>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<Toggle<ToggleStyleConfiguration.Label>, ToggleStyleModifier<ButtonToggleStyle>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type StaticIf<InterfaceIdiomPredicate<VisionInterfaceIdiom>, ModifiedContent<Toggle<ToggleStyleConfiguration.Label>, ToggleStyleModifier<ButtonToggleStyle>>, ModifiedContent<ToolbarToggleStyle.ResolvedBody, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>>> and conformance <> StaticIf<A, B, C>()
{
  unint64_t result = lazy protocol witness table cache variable for type StaticIf<InterfaceIdiomPredicate<VisionInterfaceIdiom>, ModifiedContent<Toggle<ToggleStyleConfiguration.Label>, ToggleStyleModifier<ButtonToggleStyle>>, ModifiedContent<ToolbarToggleStyle.ResolvedBody, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>>> and conformance <> StaticIf<A, B, C>;
  if (!lazy protocol witness table cache variable for type StaticIf<InterfaceIdiomPredicate<VisionInterfaceIdiom>, ModifiedContent<Toggle<ToggleStyleConfiguration.Label>, ToggleStyleModifier<ButtonToggleStyle>>, ModifiedContent<ToolbarToggleStyle.ResolvedBody, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>>> and conformance <> StaticIf<A, B, C>)
  {
    type metadata accessor for StaticIf<InterfaceIdiomPredicate<VisionInterfaceIdiom>, ModifiedContent<Toggle<ToggleStyleConfiguration.Label>, ToggleStyleModifier<ButtonToggleStyle>>, ModifiedContent<ToolbarToggleStyle.ResolvedBody, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>>>();
    lazy protocol witness table accessor for type ModifiedContent<Toggle<ToggleStyleConfiguration.Label>, ToggleStyleModifier<ButtonToggleStyle>> and conformance <> ModifiedContent<A, B>();
    lazy protocol witness table accessor for type ModifiedContent<ToolbarToggleStyle.ResolvedBody, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>> and conformance <> ModifiedContent<A, B>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StaticIf<InterfaceIdiomPredicate<VisionInterfaceIdiom>, ModifiedContent<Toggle<ToggleStyleConfiguration.Label>, ToggleStyleModifier<ButtonToggleStyle>>, ModifiedContent<ToolbarToggleStyle.ResolvedBody, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>>> and conformance <> StaticIf<A, B, C>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ToolbarToggleStyle.ResolvedBody, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ToolbarToggleStyle.ResolvedBody, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ToolbarToggleStyle.ResolvedBody, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ToolbarToggleStyle.ResolvedBody, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>>(255, &lazy cache variable for type metadata for ModifiedContent<ToolbarToggleStyle.ResolvedBody, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>>, &lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>);
    lazy protocol witness table accessor for type ToolbarToggleStyle.ResolvedBody and conformance ToolbarToggleStyle.ResolvedBody();
    lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>(&lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>, &lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>, (uint64_t)&type metadata for ToolbarButtonContentModifier, (void (*)(void))lazy protocol witness table accessor for type ToolbarButtonContentModifier and conformance ToolbarButtonContentModifier);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ToolbarToggleStyle.ResolvedBody, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ToolbarToggleStyle.ResolvedBody and conformance ToolbarToggleStyle.ResolvedBody()
{
  unint64_t result = lazy protocol witness table cache variable for type ToolbarToggleStyle.ResolvedBody and conformance ToolbarToggleStyle.ResolvedBody;
  if (!lazy protocol witness table cache variable for type ToolbarToggleStyle.ResolvedBody and conformance ToolbarToggleStyle.ResolvedBody)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ToolbarToggleStyle.ResolvedBody and conformance ToolbarToggleStyle.ResolvedBody);
  }
  return result;
}

uint64_t associated type witness table accessor for View.Body : View in ToolbarToggleStyle.ResolvedBody()
{
  return swift_getOpaqueTypeConformance2();
}

void type metadata accessor for Button<ModifiedContent<ModifiedContent<ModifiedContent<ToggleStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, _EnvironmentKeyTransformModifier<AnyShapeStyle?>>, _BackgroundModifier<ModifiedContent<_ShapeView<ResolvedBorderShape, _OpacityShapeStyle<TintShapeStyle>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonEdgeOutsetModifier, EmptyModifier>>>>>()
{
  if (!lazy cache variable for type metadata for Button<ModifiedContent<ModifiedContent<ModifiedContent<ToggleStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, _EnvironmentKeyTransformModifier<AnyShapeStyle?>>, _BackgroundModifier<ModifiedContent<_ShapeView<ResolvedBorderShape, _OpacityShapeStyle<TintShapeStyle>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonEdgeOutsetModifier, EmptyModifier>>>>>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ToggleStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, _EnvironmentKeyTransformModifier<AnyShapeStyle?>>, _BackgroundModifier<ModifiedContent<_ShapeView<ResolvedBorderShape, _OpacityShapeStyle<TintShapeStyle>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonEdgeOutsetModifier, EmptyModifier>>>>(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ToggleStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, _EnvironmentKeyTransformModifier<AnyShapeStyle?>>, _BackgroundModifier<ModifiedContent<_ShapeView<ResolvedBorderShape, _OpacityShapeStyle<TintShapeStyle>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonEdgeOutsetModifier, EmptyModifier>>>>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ToggleStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, _EnvironmentKeyTransformModifier<AnyShapeStyle?>>, (void (*)(uint64_t))type metadata accessor for _BackgroundModifier<ModifiedContent<_ShapeView<ResolvedBorderShape, _OpacityShapeStyle<TintShapeStyle>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonEdgeOutsetModifier, EmptyModifier>>>);
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ToggleStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, _EnvironmentKeyTransformModifier<AnyShapeStyle?>>, _BackgroundModifier<ModifiedContent<_ShapeView<ResolvedBorderShape, _OpacityShapeStyle<TintShapeStyle>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonEdgeOutsetModifier, EmptyModifier>>>> and conformance <> ModifiedContent<A, B>();
    unint64_t v0 = type metadata accessor for Button();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Button<ModifiedContent<ModifiedContent<ModifiedContent<ToggleStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, _EnvironmentKeyTransformModifier<AnyShapeStyle?>>, _BackgroundModifier<ModifiedContent<_ShapeView<ResolvedBorderShape, _OpacityShapeStyle<TintShapeStyle>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonEdgeOutsetModifier, EmptyModifier>>>>>);
    }
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<ToggleStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, _EnvironmentKeyTransformModifier<AnyShapeStyle?>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ToggleStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, _EnvironmentKeyTransformModifier<AnyShapeStyle?>>)
  {
    type metadata accessor for ModifiedContent<ToolbarToggleStyle.ResolvedBody, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>>(255, &lazy cache variable for type metadata for ModifiedContent<ToggleStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, (unint64_t *)&lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>);
    type metadata accessor for _EnvironmentKeyTransformModifier<AnyShapeStyle?>();
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ToggleStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, _EnvironmentKeyTransformModifier<AnyShapeStyle?>>);
    }
  }
}

void type metadata accessor for ModifiedContent<ToolbarToggleStyle.ResolvedBody, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>>(uint64_t a1, unint64_t *a2, unint64_t *a3)
{
  if (!*a2)
  {
    type metadata accessor for StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>(255, a3);
    unint64_t v4 = type metadata accessor for ModifiedContent();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

void type metadata accessor for _EnvironmentKeyTransformModifier<AnyShapeStyle?>()
{
  if (!lazy cache variable for type metadata for _EnvironmentKeyTransformModifier<AnyShapeStyle?>)
  {
    _s7SwiftUI7BindingVySbGMaTm_5(255, (unint64_t *)&lazy cache variable for type metadata for AnyShapeStyle?, MEMORY[0x1E4F3F700], MEMORY[0x1E4FBB718]);
    unint64_t v0 = type metadata accessor for _EnvironmentKeyTransformModifier();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyTransformModifier<AnyShapeStyle?>);
    }
  }
}

void type metadata accessor for _BackgroundModifier<ModifiedContent<_ShapeView<ResolvedBorderShape, _OpacityShapeStyle<TintShapeStyle>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonEdgeOutsetModifier, EmptyModifier>>>()
{
  if (!lazy cache variable for type metadata for _BackgroundModifier<ModifiedContent<_ShapeView<ResolvedBorderShape, _OpacityShapeStyle<TintShapeStyle>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonEdgeOutsetModifier, EmptyModifier>>>)
  {
    type metadata accessor for ModifiedContent<_ShapeView<ResolvedBorderShape, _OpacityShapeStyle<TintShapeStyle>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonEdgeOutsetModifier, EmptyModifier>>(255);
    lazy protocol witness table accessor for type ModifiedContent<_ShapeView<ResolvedBorderShape, _OpacityShapeStyle<TintShapeStyle>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonEdgeOutsetModifier, EmptyModifier>> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<_ShapeView<ResolvedBorderShape, _OpacityShapeStyle<TintShapeStyle>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonEdgeOutsetModifier, EmptyModifier>> and conformance <> ModifiedContent<A, B>, type metadata accessor for ModifiedContent<_ShapeView<ResolvedBorderShape, _OpacityShapeStyle<TintShapeStyle>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonEdgeOutsetModifier, EmptyModifier>>, (void (*)(void))lazy protocol witness table accessor for type _ShapeView<ResolvedBorderShape, _OpacityShapeStyle<TintShapeStyle>> and conformance _ShapeView<A, B>);
    unint64_t v0 = type metadata accessor for _BackgroundModifier();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _BackgroundModifier<ModifiedContent<_ShapeView<ResolvedBorderShape, _OpacityShapeStyle<TintShapeStyle>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonEdgeOutsetModifier, EmptyModifier>>>);
    }
  }
}

void type metadata accessor for ModifiedContent<_ShapeView<ResolvedBorderShape, _OpacityShapeStyle<TintShapeStyle>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonEdgeOutsetModifier, EmptyModifier>>(uint64_t a1)
{
}

void _s7SwiftUI23InterfaceIdiomPredicateVyAA03MaccD0VGMaTm_0(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = a5(0, a3, a4);
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

uint64_t lazy protocol witness table accessor for type _ShapeView<ResolvedBorderShape, _OpacityShapeStyle<TintShapeStyle>> and conformance _ShapeView<A, B>()
{
  return lazy protocol witness table accessor for type Button<ModifiedContent<ModifiedContent<ModifiedContent<ToggleStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, _EnvironmentKeyTransformModifier<AnyShapeStyle?>>, _BackgroundModifier<ModifiedContent<_ShapeView<ResolvedBorderShape, _OpacityShapeStyle<TintShapeStyle>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonEdgeOutsetModifier, EmptyModifier>>>>> and conformance Button<A>(&lazy protocol witness table cache variable for type _ShapeView<ResolvedBorderShape, _OpacityShapeStyle<TintShapeStyle>> and conformance _ShapeView<A, B>, (void (*)(uint64_t))type metadata accessor for _ShapeView<ResolvedBorderShape, _OpacityShapeStyle<TintShapeStyle>>);
}

uint64_t lazy protocol witness table accessor for type Button<ModifiedContent<ModifiedContent<ModifiedContent<ToggleStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, _EnvironmentKeyTransformModifier<AnyShapeStyle?>>, _BackgroundModifier<ModifiedContent<_ShapeView<ResolvedBorderShape, _OpacityShapeStyle<TintShapeStyle>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonEdgeOutsetModifier, EmptyModifier>>>>> and conformance Button<A>(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ToolbarButtonEdgeOutsetModifier and conformance ToolbarButtonEdgeOutsetModifier()
{
  unint64_t result = lazy protocol witness table cache variable for type ToolbarButtonEdgeOutsetModifier and conformance ToolbarButtonEdgeOutsetModifier;
  if (!lazy protocol witness table cache variable for type ToolbarButtonEdgeOutsetModifier and conformance ToolbarButtonEdgeOutsetModifier)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ToolbarButtonEdgeOutsetModifier and conformance ToolbarButtonEdgeOutsetModifier);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ToggleStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, _EnvironmentKeyTransformModifier<AnyShapeStyle?>>, _BackgroundModifier<ModifiedContent<_ShapeView<ResolvedBorderShape, _OpacityShapeStyle<TintShapeStyle>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonEdgeOutsetModifier, EmptyModifier>>>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ToggleStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, _EnvironmentKeyTransformModifier<AnyShapeStyle?>>, _BackgroundModifier<ModifiedContent<_ShapeView<ResolvedBorderShape, _OpacityShapeStyle<TintShapeStyle>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonEdgeOutsetModifier, EmptyModifier>>>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ToggleStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, _EnvironmentKeyTransformModifier<AnyShapeStyle?>>, _BackgroundModifier<ModifiedContent<_ShapeView<ResolvedBorderShape, _OpacityShapeStyle<TintShapeStyle>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonEdgeOutsetModifier, EmptyModifier>>>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ToggleStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, _EnvironmentKeyTransformModifier<AnyShapeStyle?>>, _BackgroundModifier<ModifiedContent<_ShapeView<ResolvedBorderShape, _OpacityShapeStyle<TintShapeStyle>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonEdgeOutsetModifier, EmptyModifier>>>>(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ToggleStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, _EnvironmentKeyTransformModifier<AnyShapeStyle?>>, _BackgroundModifier<ModifiedContent<_ShapeView<ResolvedBorderShape, _OpacityShapeStyle<TintShapeStyle>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonEdgeOutsetModifier, EmptyModifier>>>>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ToggleStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, _EnvironmentKeyTransformModifier<AnyShapeStyle?>>, (void (*)(uint64_t))type metadata accessor for _BackgroundModifier<ModifiedContent<_ShapeView<ResolvedBorderShape, _OpacityShapeStyle<TintShapeStyle>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonEdgeOutsetModifier, EmptyModifier>>>);
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ToggleStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, _EnvironmentKeyTransformModifier<AnyShapeStyle?>> and conformance <> ModifiedContent<A, B>();
    lazy protocol witness table accessor for type Button<ModifiedContent<ModifiedContent<ModifiedContent<ToggleStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, _EnvironmentKeyTransformModifier<AnyShapeStyle?>>, _BackgroundModifier<ModifiedContent<_ShapeView<ResolvedBorderShape, _OpacityShapeStyle<TintShapeStyle>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonEdgeOutsetModifier, EmptyModifier>>>>> and conformance Button<A>(&lazy protocol witness table cache variable for type _BackgroundModifier<ModifiedContent<_ShapeView<ResolvedBorderShape, _OpacityShapeStyle<TintShapeStyle>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonEdgeOutsetModifier, EmptyModifier>>> and conformance _BackgroundModifier<A>, (void (*)(uint64_t))type metadata accessor for _BackgroundModifier<ModifiedContent<_ShapeView<ResolvedBorderShape, _OpacityShapeStyle<TintShapeStyle>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonEdgeOutsetModifier, EmptyModifier>>>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ToggleStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, _EnvironmentKeyTransformModifier<AnyShapeStyle?>>, _BackgroundModifier<ModifiedContent<_ShapeView<ResolvedBorderShape, _OpacityShapeStyle<TintShapeStyle>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonEdgeOutsetModifier, EmptyModifier>>>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ToggleStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, _EnvironmentKeyTransformModifier<AnyShapeStyle?>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ToggleStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, _EnvironmentKeyTransformModifier<AnyShapeStyle?>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ToggleStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, _EnvironmentKeyTransformModifier<AnyShapeStyle?>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ToggleStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, _EnvironmentKeyTransformModifier<AnyShapeStyle?>>();
    lazy protocol witness table accessor for type ModifiedContent<ToggleStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>> and conformance <> ModifiedContent<A, B>();
    lazy protocol witness table accessor for type Button<ModifiedContent<ModifiedContent<ModifiedContent<ToggleStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, _EnvironmentKeyTransformModifier<AnyShapeStyle?>>, _BackgroundModifier<ModifiedContent<_ShapeView<ResolvedBorderShape, _OpacityShapeStyle<TintShapeStyle>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonEdgeOutsetModifier, EmptyModifier>>>>> and conformance Button<A>(&lazy protocol witness table cache variable for type _EnvironmentKeyTransformModifier<AnyShapeStyle?> and conformance _EnvironmentKeyTransformModifier<A>, (void (*)(uint64_t))type metadata accessor for _EnvironmentKeyTransformModifier<AnyShapeStyle?>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ToggleStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, _EnvironmentKeyTransformModifier<AnyShapeStyle?>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ToggleStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ToggleStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ToggleStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ToolbarToggleStyle.ResolvedBody, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>>(255, &lazy cache variable for type metadata for ModifiedContent<ToggleStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, (unint64_t *)&lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>);
    lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>((unint64_t *)&lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>, (unint64_t *)&lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>, (uint64_t)&type metadata for ToolbarButtonLabelModifier, (void (*)(void))lazy protocol witness table accessor for type ToolbarButtonLabelModifier and conformance ToolbarButtonLabelModifier);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ToggleStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<Button<ModifiedContent<ModifiedContent<ModifiedContent<ToggleStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, _EnvironmentKeyTransformModifier<AnyShapeStyle?>>, _BackgroundModifier<ModifiedContent<_ShapeView<ResolvedBorderShape, _OpacityShapeStyle<TintShapeStyle>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonEdgeOutsetModifier, EmptyModifier>>>>>, _ContentShapeKindModifier<ToolbarButtonHoverShape>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<Button<ModifiedContent<ModifiedContent<ModifiedContent<ToggleStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, _EnvironmentKeyTransformModifier<AnyShapeStyle?>>, _BackgroundModifier<ModifiedContent<_ShapeView<ResolvedBorderShape, _OpacityShapeStyle<TintShapeStyle>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonEdgeOutsetModifier, EmptyModifier>>>>>, _ContentShapeKindModifier<ToolbarButtonHoverShape>>)
  {
    type metadata accessor for Button<ModifiedContent<ModifiedContent<ModifiedContent<ToggleStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, _EnvironmentKeyTransformModifier<AnyShapeStyle?>>, _BackgroundModifier<ModifiedContent<_ShapeView<ResolvedBorderShape, _OpacityShapeStyle<TintShapeStyle>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonEdgeOutsetModifier, EmptyModifier>>>>>();
    type metadata accessor for ToggleStyleModifier<ButtonToggleStyle>(255, &lazy cache variable for type metadata for _ContentShapeKindModifier<ToolbarButtonHoverShape>, (uint64_t (*)(void))lazy protocol witness table accessor for type ToolbarButtonHoverShape and conformance ToolbarButtonHoverShape, (uint64_t)&type metadata for ToolbarButtonHoverShape, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _ContentShapeKindModifier);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<Button<ModifiedContent<ModifiedContent<ModifiedContent<ToggleStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, _EnvironmentKeyTransformModifier<AnyShapeStyle?>>, _BackgroundModifier<ModifiedContent<_ShapeView<ResolvedBorderShape, _OpacityShapeStyle<TintShapeStyle>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonEdgeOutsetModifier, EmptyModifier>>>>>, _ContentShapeKindModifier<ToolbarButtonHoverShape>>);
    }
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<ModifiedContent<ToggleStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, _EnvironmentKeyTransformModifier<AnyShapeStyle?>>, _BackgroundModifier<ModifiedContent<_ShapeView<ResolvedBorderShape, _OpacityShapeStyle<TintShapeStyle>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonEdgeOutsetModifier, EmptyModifier>>>>>, _ContentShapeKindModifier<ToolbarButtonHoverShape>>, CustomHoverEffectModifier<HoverEffect>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<ModifiedContent<ToggleStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, _EnvironmentKeyTransformModifier<AnyShapeStyle?>>, _BackgroundModifier<ModifiedContent<_ShapeView<ResolvedBorderShape, _OpacityShapeStyle<TintShapeStyle>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonEdgeOutsetModifier, EmptyModifier>>>>>, _ContentShapeKindModifier<ToolbarButtonHoverShape>>, CustomHoverEffectModifier<HoverEffect>>)
  {
    type metadata accessor for ModifiedContent<Button<ModifiedContent<ModifiedContent<ModifiedContent<ToggleStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, _EnvironmentKeyTransformModifier<AnyShapeStyle?>>, _BackgroundModifier<ModifiedContent<_ShapeView<ResolvedBorderShape, _OpacityShapeStyle<TintShapeStyle>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonEdgeOutsetModifier, EmptyModifier>>>>>, _ContentShapeKindModifier<ToolbarButtonHoverShape>>();
    type metadata accessor for ToggleStyleModifier<ButtonToggleStyle>(255, &lazy cache variable for type metadata for CustomHoverEffectModifier<HoverEffect>, (uint64_t (*)(void))lazy protocol witness table accessor for type HoverEffect and conformance HoverEffect, (uint64_t)&type metadata for HoverEffect, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for CustomHoverEffectModifier);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<ModifiedContent<ToggleStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, _EnvironmentKeyTransformModifier<AnyShapeStyle?>>, _BackgroundModifier<ModifiedContent<_ShapeView<ResolvedBorderShape, _OpacityShapeStyle<TintShapeStyle>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonEdgeOutsetModifier, EmptyModifier>>>>>, _ContentShapeKindModifier<ToolbarButtonHoverShape>>, CustomHoverEffectModifier<HoverEffect>>);
    }
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<ModifiedContent<ToggleStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, _EnvironmentKeyTransformModifier<AnyShapeStyle?>>, _BackgroundModifier<ModifiedContent<_ShapeView<ResolvedBorderShape, _OpacityShapeStyle<TintShapeStyle>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonEdgeOutsetModifier, EmptyModifier>>>>>, _ContentShapeKindModifier<ToolbarButtonHoverShape>>, CustomHoverEffectModifier<HoverEffect>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonEdgeOutsetModifier, EmptyModifier>>(uint64_t a1)
{
}

void type metadata accessor for ModifiedContent<_ShapeView<ResolvedBorderShape, _OpacityShapeStyle<TintShapeStyle>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonEdgeOutsetModifier, EmptyModifier>>(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    type metadata accessor for StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>(255, &lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonEdgeOutsetModifier, EmptyModifier>);
    unint64_t v4 = type metadata accessor for ModifiedContent();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ToggleStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, _EnvironmentKeyTransformModifier<AnyShapeStyle?>>, _BackgroundModifier<ModifiedContent<_ShapeView<ResolvedBorderShape, _OpacityShapeStyle<TintShapeStyle>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonEdgeOutsetModifier, EmptyModifier>>>>(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t), void (*a4)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    a4(255);
    unint64_t v6 = type metadata accessor for ModifiedContent();
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<ModifiedContent<ToggleStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, _EnvironmentKeyTransformModifier<AnyShapeStyle?>>, _BackgroundModifier<ModifiedContent<_ShapeView<ResolvedBorderShape, _OpacityShapeStyle<TintShapeStyle>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonEdgeOutsetModifier, EmptyModifier>>>>>, _ContentShapeKindModifier<ToolbarButtonHoverShape>>, CustomHoverEffectModifier<HoverEffect>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonEdgeOutsetModifier, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, PlatformItemTintModifier, EmptyMo()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<ModifiedContent<ToggleStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, _EnvironmentKeyTransformModifier<AnyShapeStyle?>>, _BackgroundModifier<ModifiedContent<_ShapeView<ResolvedBorderShape, _OpacityShapeStyle<TintShapeStyle>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonEdgeOutsetModifier, EmptyModifier>>>>>, _ContentShapeKindModifier<ToolbarButtonHoverShape>>, CustomHoverEffectModifier<HoverEffect>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonEdgeOutsetModifier, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, PlatformItemTintMo)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ToggleStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, _EnvironmentKeyTransformModifier<AnyShapeStyle?>>, _BackgroundModifier<ModifiedContent<_ShapeView<ResolvedBorderShape, _OpacityShapeStyle<TintShapeStyle>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonEdgeOutsetModifier, EmptyModifier>>>>(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<ModifiedContent<ToggleStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, _EnvironmentKeyTransformModifier<AnyShapeStyle?>>, _BackgroundModifier<ModifiedContent<_ShapeView<ResolvedBorderShape, _OpacityShapeStyle<TintShapeStyle>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonEdgeOutsetModifier, EmptyModifier>>>>>, _ContentShapeKindModifier<ToolbarButtonHoverShape>>, CustomHoverEffectModifier<HoverEffect>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonEdgeOutsetModifier, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier>, EmptyModifier>>, type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<ModifiedContent<ToggleStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, _EnvironmentKeyTransformModifier<AnyShapeStyle?>>, _BackgroundModifier<ModifiedContent<_ShapeView<ResolvedBorderShape, _OpacityShapeStyle<TintShapeStyle>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonEdgeOutsetModifier, EmptyModifier>>>>>, _ContentShapeKindModifier<ToolbarButtonHoverShape>>, CustomHoverEffectModifier<HoverEffect>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonEdgeOutsetModifier, EmptyModifier>>, (void (*)(uint64_t))type metadata accessor for StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier>, EmptyModifier>);
    type metadata accessor for StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>(255, (unint64_t *)&lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, PlatformItemTintModifier, EmptyModifier>);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<ModifiedContent<ToggleStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, _EnvironmentKeyTransformModifier<AnyShapeStyle?>>, _BackgroundModifier<ModifiedContent<_ShapeView<ResolvedBorderShape, _OpacityShapeStyle<TintShapeStyle>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonEdgeOutsetModifier, EmptyModifier>>>>>, _ContentShapeKindModifier<ToolbarButtonHoverShape>>, CustomHoverEffectModifier<HoverEffect>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonEdgeOutsetModifier, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, PlatformItemTintMo);
    }
  }
}

void *partial apply for implicit closure #2 in implicit closure #1 in ToolbarToggleStyle.ResolvedBody.body.getter()
{
  return implicit closure #2 in implicit closure #1 in ToolbarToggleStyle.ResolvedBody.body.getter((_OWORD *)(v0 + 16));
}

uint64_t outlined retain of ToolbarToggleStyle.ResolvedBody(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  uint64_t v3 = *(void *)(a1 + 56);
  uint64_t v4 = *(void *)(a1 + 64);
  uint64_t v5 = *(void **)(a1 + 72);
  uint64_t v8 = *(void *)(a1 + 96);
  unsigned int v7 = *(unsigned __int8 *)(a1 + 104);
  uint64_t v10 = *(void *)(a1 + 112);
  char v11 = *(unsigned char *)(a1 + 121);
  unsigned int v9 = *(unsigned __int8 *)(a1 + 120);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  outlined copy of ToggleStyleConfiguration.Effect(v2, v3, v4, v5);
  outlined copy of Environment<MenuActionDismissBehavior>.Content(v8, v7);
  outlined copy of Environment<CGFloat?>.Content(v10, v9, v11);
  return a1;
}

void *partial apply for implicit closure #2 in implicit closure #1 in ToolbarToggleStyle.ResolvedBody.label.getter(void *a1)
{
  return implicit closure #2 in implicit closure #1 in ToolbarToggleStyle.ResolvedBody.label.getter(a1);
}

uint64_t outlined init with copy of ModifiedContent<ToggleStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>(uint64_t a1, uint64_t a2)
{
  type metadata accessor for ModifiedContent<ToolbarToggleStyle.ResolvedBody, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>>(0, &lazy cache variable for type metadata for ModifiedContent<ToggleStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, (unint64_t *)&lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of ModifiedContent<ToggleStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>(uint64_t a1)
{
  type metadata accessor for ModifiedContent<ToolbarToggleStyle.ResolvedBody, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>>(0, &lazy cache variable for type metadata for ModifiedContent<ToggleStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, (unint64_t *)&lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t outlined init with copy of ModifiedContent<ModifiedContent<ToggleStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, _EnvironmentKeyTransformModifier<AnyShapeStyle?>>(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t outlined destroy of ModifiedContent<ModifiedContent<ToggleStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, _EnvironmentKeyTransformModifier<AnyShapeStyle?>>(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t outlined init with copy of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<ModifiedContent<ToggleStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, _EnvironmentKeyTransformModifier<AnyShapeStyle?>>, _BackgroundModifier<ModifiedContent<_ShapeView<ResolvedBorderShape, _OpacityShapeStyle<TintShapeStyle>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonEdgeOutsetModifier, EmptyModifier>>>>>, _ContentShapeKindModifier<ToolbarButtonHoverShape>>, CustomHoverEffectModifier<HoverEffect>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonEdgeOutsetModifier, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier>, EmptyModifier>>(uint64_t a1, uint64_t a2)
{
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ToggleStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, _EnvironmentKeyTransformModifier<AnyShapeStyle?>>, _BackgroundModifier<ModifiedContent<_ShapeView<ResolvedBorderShape, _OpacityShapeStyle<TintShapeStyle>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonEdgeOutsetModifier, EmptyModifier>>>>(0, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<ModifiedContent<ToggleStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, _EnvironmentKeyTransformModifier<AnyShapeStyle?>>, _BackgroundModifier<ModifiedContent<_ShapeView<ResolvedBorderShape, _OpacityShapeStyle<TintShapeStyle>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonEdgeOutsetModifier, EmptyModifier>>>>>, _ContentShapeKindModifier<ToolbarButtonHoverShape>>, CustomHoverEffectModifier<HoverEffect>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonEdgeOutsetModifier, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier>, EmptyModifier>>, type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<ModifiedContent<ToggleStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, _EnvironmentKeyTransformModifier<AnyShapeStyle?>>, _BackgroundModifier<ModifiedContent<_ShapeView<ResolvedBorderShape, _OpacityShapeStyle<TintShapeStyle>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonEdgeOutsetModifier, EmptyModifier>>>>>, _ContentShapeKindModifier<ToolbarButtonHoverShape>>, CustomHoverEffectModifier<HoverEffect>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonEdgeOutsetModifier, EmptyModifier>>, (void (*)(uint64_t))type metadata accessor for StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier>, EmptyModifier>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<ModifiedContent<ToggleStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, _EnvironmentKeyTransformModifier<AnyShapeStyle?>>, _BackgroundModifier<ModifiedContent<_ShapeView<ResolvedBorderShape, _OpacityShapeStyle<TintShapeStyle>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonEdgeOutsetModifier, EmptyModifier>>>>>, _ContentShapeKindModifier<ToolbarButtonHoverShape>>, CustomHoverEffectModifier<HoverEffect>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonEdgeOutsetModifier, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier>, EmptyModifier>>(uint64_t a1)
{
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ToggleStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, _EnvironmentKeyTransformModifier<AnyShapeStyle?>>, _BackgroundModifier<ModifiedContent<_ShapeView<ResolvedBorderShape, _OpacityShapeStyle<TintShapeStyle>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonEdgeOutsetModifier, EmptyModifier>>>>(0, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<ModifiedContent<ToggleStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, _EnvironmentKeyTransformModifier<AnyShapeStyle?>>, _BackgroundModifier<ModifiedContent<_ShapeView<ResolvedBorderShape, _OpacityShapeStyle<TintShapeStyle>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonEdgeOutsetModifier, EmptyModifier>>>>>, _ContentShapeKindModifier<ToolbarButtonHoverShape>>, CustomHoverEffectModifier<HoverEffect>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonEdgeOutsetModifier, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier>, EmptyModifier>>, type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<ModifiedContent<ToggleStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, _EnvironmentKeyTransformModifier<AnyShapeStyle?>>, _BackgroundModifier<ModifiedContent<_ShapeView<ResolvedBorderShape, _OpacityShapeStyle<TintShapeStyle>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonEdgeOutsetModifier, EmptyModifier>>>>>, _ContentShapeKindModifier<ToolbarButtonHoverShape>>, CustomHoverEffectModifier<HoverEffect>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonEdgeOutsetModifier, EmptyModifier>>, (void (*)(uint64_t))type metadata accessor for StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier>, EmptyModifier>);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<ModifiedContent<ToggleStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, _EnvironmentKeyTransformModifier<AnyShapeStyle?>>, _BackgroundModifier<ModifiedContent<_ShapeView<ResolvedBorderShape, _OpacityShapeStyle<TintShapeStyle>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonEdgeOutsetModifier, EmptyModifier>>>>>, _ContentShapeKindModifier<ToolbarButtonHoverShape>>, CustomHoverEffectModifier<HoverEffect>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonEdgeOutsetModifier, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, PlatformItemTintModifier, EmptyMo(uint64_t a1, uint64_t a2)
{
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<ModifiedContent<ToggleStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, _EnvironmentKeyTransformModifier<AnyShapeStyle?>>, _BackgroundModifier<ModifiedContent<_ShapeView<ResolvedBorderShape, _OpacityShapeStyle<TintShapeStyle>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonEdgeOutsetModifier, EmptyModifier>>>>>, _ContentShapeKindModifier<ToolbarButtonHoverShape>>, CustomHoverEffectModifier<HoverEffect>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonEdgeOutsetModifier, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, PlatformItemTintModifier, EmptyMo();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined release of ToolbarToggleStyle.ResolvedBody(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  uint64_t v3 = *(void *)(a1 + 56);
  uint64_t v4 = *(void *)(a1 + 64);
  uint64_t v5 = *(void **)(a1 + 72);
  uint64_t v8 = *(void *)(a1 + 96);
  unsigned int v7 = *(unsigned __int8 *)(a1 + 104);
  uint64_t v10 = *(void *)(a1 + 112);
  char v11 = *(unsigned char *)(a1 + 121);
  unsigned int v9 = *(unsigned __int8 *)(a1 + 120);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  outlined consume of ToggleStyleConfiguration.Effect(v2, v3, v4, v5);
  outlined consume of Environment<Bool?>.Content(v8, v7);
  outlined consume of Environment<CGFloat?>.Content(v10, v9, v11);
  return a1;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<ModifiedContent<ToggleStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, _EnvironmentKeyTransformModifier<AnyShapeStyle?>>, _BackgroundModifier<ModifiedContent<_ShapeView<ResolvedBorderShape, _OpacityShapeStyle<TintShapeStyle>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonEdgeOutsetModifier, EmptyModifier>>>>>, _ContentShapeKindModifier<ToolbarButtonHoverShape>>, CustomHoverEffectModifier<HoverEffect>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonEdgeOutsetModifier, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier>, EmptyModifier>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<ModifiedContent<ToggleStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, _EnvironmentKeyTransformModifier<AnyShapeStyle?>>, _BackgroundModifier<ModifiedContent<_ShapeView<ResolvedBorderShape, _OpacityShapeStyle<TintShapeStyle>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonEdgeOutsetModifier, EmptyModifier>>>>>, _ContentShapeKindModifier<ToolbarButtonHoverShape>>, CustomHoverEffectModifier<HoverEffect>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonEdgeOutsetModifier, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier>, EmptyModifier>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<ModifiedContent<ToggleStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, _EnvironmentKeyTransformModifier<AnyShapeStyle?>>, _BackgroundModifier<ModifiedContent<_ShapeView<ResolvedBorderShape, _OpacityShapeStyle<TintShapeStyle>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonEdgeOutsetModifier, EmptyModifier>>>>>, _ContentShapeKindModifier<ToolbarButtonHoverShape>>, CustomHoverEffectModifier<HoverEffect>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonEdgeOutsetModifier, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier>, EmptyModifier>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ToggleStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, _EnvironmentKeyTransformModifier<AnyShapeStyle?>>, _BackgroundModifier<ModifiedContent<_ShapeView<ResolvedBorderShape, _OpacityShapeStyle<TintShapeStyle>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonEdgeOutsetModifier, EmptyModifier>>>>(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<ModifiedContent<ToggleStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, _EnvironmentKeyTransformModifier<AnyShapeStyle?>>, _BackgroundModifier<ModifiedContent<_ShapeView<ResolvedBorderShape, _OpacityShapeStyle<TintShapeStyle>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonEdgeOutsetModifier, EmptyModifier>>>>>, _ContentShapeKindModifier<ToolbarButtonHoverShape>>, CustomHoverEffectModifier<HoverEffect>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonEdgeOutsetModifier, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier>, EmptyModifier>>, type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<ModifiedContent<ToggleStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, _EnvironmentKeyTransformModifier<AnyShapeStyle?>>, _BackgroundModifier<ModifiedContent<_ShapeView<ResolvedBorderShape, _OpacityShapeStyle<TintShapeStyle>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonEdgeOutsetModifier, EmptyModifier>>>>>, _ContentShapeKindModifier<ToolbarButtonHoverShape>>, CustomHoverEffectModifier<HoverEffect>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonEdgeOutsetModifier, EmptyModifier>>, (void (*)(uint64_t))type metadata accessor for StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier>, EmptyModifier>);
    lazy protocol witness table accessor for type ModifiedContent<_ShapeView<ResolvedBorderShape, _OpacityShapeStyle<TintShapeStyle>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonEdgeOutsetModifier, EmptyModifier>> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<ModifiedContent<ToggleStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, _EnvironmentKeyTransformModifier<AnyShapeStyle?>>, _BackgroundModifier<ModifiedContent<_ShapeView<ResolvedBorderShape, _OpacityShapeStyle<TintShapeStyle>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonEdgeOutsetModifier, EmptyModifier>>>>>, _ContentShapeKindModifier<ToolbarButtonHoverShape>>, CustomHoverEffectModifier<HoverEffect>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonEdgeOutsetModifier, EmptyModifier>> and conformance <> ModifiedContent<A, B>, type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<ModifiedContent<ToggleStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, _EnvironmentKeyTransformModifier<AnyShapeStyle?>>, _BackgroundModifier<ModifiedContent<_ShapeView<ResolvedBorderShape, _OpacityShapeStyle<TintShapeStyle>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonEdgeOutsetModifier, EmptyModifier>>>>>, _ContentShapeKindModifier<ToolbarButtonHoverShape>>, CustomHoverEffectModifier<HoverEffect>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonEdgeOutsetModifier, EmptyModifier>>, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<ModifiedContent<ToggleStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, _EnvironmentKeyTransformModifier<AnyShapeStyle?>>, _BackgroundModifier<ModifiedContent<_ShapeView<ResolvedBorderShape, _OpacityShapeStyle<TintShapeStyle>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonEdgeOutsetModifier, EmptyModifier>>>>>, _ContentShapeKindModifier<ToolbarButtonHoverShape>>, CustomHoverEffectModifier<HoverEffect>> and conformance <> ModifiedContent<A, B>);
    lazy protocol witness table accessor for type StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>((unint64_t *)&lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier>, EmptyModifier> and conformance <> StaticIf<A, B, C>, (void (*)(uint64_t))type metadata accessor for StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier>, EmptyModifier>, (void (*)(void))lazy protocol witness table accessor for type StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<ModifiedContent<ToggleStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, _EnvironmentKeyTransformModifier<AnyShapeStyle?>>, _BackgroundModifier<ModifiedContent<_ShapeView<ResolvedBorderShape, _OpacityShapeStyle<TintShapeStyle>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonEdgeOutsetModifier, EmptyModifier>>>>>, _ContentShapeKindModifier<ToolbarButtonHoverShape>>, CustomHoverEffectModifier<HoverEffect>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonEdgeOutsetModifier, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier>, EmptyModifier>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<_ShapeView<ResolvedBorderShape, _OpacityShapeStyle<TintShapeStyle>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonEdgeOutsetModifier, EmptyModifier>> and conformance <> ModifiedContent<A, B>(unint64_t *a1, void (*a2)(uint64_t), void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    a3();
    lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>(&lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonEdgeOutsetModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>, &lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonEdgeOutsetModifier, EmptyModifier>, (uint64_t)&type metadata for ToolbarButtonEdgeOutsetModifier, (void (*)(void))lazy protocol witness table accessor for type ToolbarButtonEdgeOutsetModifier and conformance ToolbarButtonEdgeOutsetModifier);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<ModifiedContent<ToggleStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, _EnvironmentKeyTransformModifier<AnyShapeStyle?>>, _BackgroundModifier<ModifiedContent<_ShapeView<ResolvedBorderShape, _OpacityShapeStyle<TintShapeStyle>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonEdgeOutsetModifier, EmptyModifier>>>>>, _ContentShapeKindModifier<ToolbarButtonHoverShape>>, CustomHoverEffectModifier<HoverEffect>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<ModifiedContent<ToggleStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, _EnvironmentKeyTransformModifier<AnyShapeStyle?>>, _BackgroundModifier<ModifiedContent<_ShapeView<ResolvedBorderShape, _OpacityShapeStyle<TintShapeStyle>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonEdgeOutsetModifier, EmptyModifier>>>>>, _ContentShapeKindModifier<ToolbarButtonHoverShape>>, CustomHoverEffectModifier<HoverEffect>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<ModifiedContent<ToggleStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, _EnvironmentKeyTransformModifier<AnyShapeStyle?>>, _BackgroundModifier<ModifiedContent<_ShapeView<ResolvedBorderShape, _OpacityShapeStyle<TintShapeStyle>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonEdgeOutsetModifier, EmptyModifier>>>>>, _ContentShapeKindModifier<ToolbarButtonHoverShape>>, CustomHoverEffectModifier<HoverEffect>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<ModifiedContent<ToggleStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, _EnvironmentKeyTransformModifier<AnyShapeStyle?>>, _BackgroundModifier<ModifiedContent<_ShapeView<ResolvedBorderShape, _OpacityShapeStyle<TintShapeStyle>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonEdgeOutsetModifier, EmptyModifier>>>>>, _ContentShapeKindModifier<ToolbarButtonHoverShape>>, CustomHoverEffectModifier<HoverEffect>>();
    lazy protocol witness table accessor for type ModifiedContent<Button<ModifiedContent<ModifiedContent<ModifiedContent<ToggleStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, _EnvironmentKeyTransformModifier<AnyShapeStyle?>>, _BackgroundModifier<ModifiedContent<_ShapeView<ResolvedBorderShape, _OpacityShapeStyle<TintShapeStyle>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonEdgeOutsetModifier, EmptyModifier>>>>>, _ContentShapeKindModifier<ToolbarButtonHoverShape>> and conformance <> ModifiedContent<A, B>();
    lazy protocol witness table accessor for type CustomHoverEffectModifier<HoverEffect> and conformance CustomHoverEffectModifier<A>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<ModifiedContent<ToggleStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, _EnvironmentKeyTransformModifier<AnyShapeStyle?>>, _BackgroundModifier<ModifiedContent<_ShapeView<ResolvedBorderShape, _OpacityShapeStyle<TintShapeStyle>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonEdgeOutsetModifier, EmptyModifier>>>>>, _ContentShapeKindModifier<ToolbarButtonHoverShape>>, CustomHoverEffectModifier<HoverEffect>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<Button<ModifiedContent<ModifiedContent<ModifiedContent<ToggleStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, _EnvironmentKeyTransformModifier<AnyShapeStyle?>>, _BackgroundModifier<ModifiedContent<_ShapeView<ResolvedBorderShape, _OpacityShapeStyle<TintShapeStyle>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonEdgeOutsetModifier, EmptyModifier>>>>>, _ContentShapeKindModifier<ToolbarButtonHoverShape>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<Button<ModifiedContent<ModifiedContent<ModifiedContent<ToggleStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, _EnvironmentKeyTransformModifier<AnyShapeStyle?>>, _BackgroundModifier<ModifiedContent<_ShapeView<ResolvedBorderShape, _OpacityShapeStyle<TintShapeStyle>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonEdgeOutsetModifier, EmptyModifier>>>>>, _ContentShapeKindModifier<ToolbarButtonHoverShape>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<Button<ModifiedContent<ModifiedContent<ModifiedContent<ToggleStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, _EnvironmentKeyTransformModifier<AnyShapeStyle?>>, _BackgroundModifier<ModifiedContent<_ShapeView<ResolvedBorderShape, _OpacityShapeStyle<TintShapeStyle>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonEdgeOutsetModifier, EmptyModifier>>>>>, _ContentShapeKindModifier<ToolbarButtonHoverShape>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<Button<ModifiedContent<ModifiedContent<ModifiedContent<ToggleStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, _EnvironmentKeyTransformModifier<AnyShapeStyle?>>, _BackgroundModifier<ModifiedContent<_ShapeView<ResolvedBorderShape, _OpacityShapeStyle<TintShapeStyle>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonEdgeOutsetModifier, EmptyModifier>>>>>, _ContentShapeKindModifier<ToolbarButtonHoverShape>>();
    lazy protocol witness table accessor for type Button<ModifiedContent<ModifiedContent<ModifiedContent<ToggleStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, _EnvironmentKeyTransformModifier<AnyShapeStyle?>>, _BackgroundModifier<ModifiedContent<_ShapeView<ResolvedBorderShape, _OpacityShapeStyle<TintShapeStyle>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonEdgeOutsetModifier, EmptyModifier>>>>> and conformance Button<A>(&lazy protocol witness table cache variable for type Button<ModifiedContent<ModifiedContent<ModifiedContent<ToggleStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, _EnvironmentKeyTransformModifier<AnyShapeStyle?>>, _BackgroundModifier<ModifiedContent<_ShapeView<ResolvedBorderShape, _OpacityShapeStyle<TintShapeStyle>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonEdgeOutsetModifier, EmptyModifier>>>>> and conformance Button<A>, (void (*)(uint64_t))type metadata accessor for Button<ModifiedContent<ModifiedContent<ModifiedContent<ToggleStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, _EnvironmentKeyTransformModifier<AnyShapeStyle?>>, _BackgroundModifier<ModifiedContent<_ShapeView<ResolvedBorderShape, _OpacityShapeStyle<TintShapeStyle>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonEdgeOutsetModifier, EmptyModifier>>>>>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<Button<ModifiedContent<ModifiedContent<ModifiedContent<ToggleStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, _EnvironmentKeyTransformModifier<AnyShapeStyle?>>, _BackgroundModifier<ModifiedContent<_ShapeView<ResolvedBorderShape, _OpacityShapeStyle<TintShapeStyle>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonEdgeOutsetModifier, EmptyModifier>>>>>, _ContentShapeKindModifier<ToolbarButtonHoverShape>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<ModifiedContent<ToggleStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, _EnvironmentKeyTransformModifier<AnyShapeStyle?>>, _BackgroundModifier<ModifiedContent<_ShapeView<ResolvedBorderShape, _OpacityShapeStyle<TintShapeStyle>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonEdgeOutsetModifier, EmptyModifier>>>>>, _ContentShapeKindModifier<ToolbarButtonHoverShape>>, CustomHoverEffectModifier<HoverEffect>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonEdgeOutsetModifier, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, PlatformItemTi()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<ModifiedContent<ToggleStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, _EnvironmentKeyTransformModifier<AnyShapeStyle?>>, _BackgroundModifier<ModifiedContent<_ShapeView<ResolvedBorderShape, _OpacityShapeStyle<TintShapeStyle>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonEdgeOutsetModifier, EmptyModifier>>>>>, _ContentShapeKindModifier<ToolbarButtonHoverShape>>, CustomHoverEffectModifier<HoverEffect>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonEdgeOutsetModifier, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, Platform;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<ModifiedContent<ToggleStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, _EnvironmentKeyTransformModifier<AnyShapeStyle?>>, _BackgroundModifier<ModifiedContent<_ShapeView<ResolvedBorderShape, _OpacityShapeStyle<TintShapeStyle>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonEdgeOutsetModifier, EmptyModifier>>>>>, _ContentShapeKindModifier<ToolbarButtonHoverShape>>, CustomHoverEffectModifier<HoverEffect>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonEdgeOutsetModifier, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, Platform)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<ModifiedContent<ToggleStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, _EnvironmentKeyTransformModifier<AnyShapeStyle?>>, _BackgroundModifier<ModifiedContent<_ShapeView<ResolvedBorderShape, _OpacityShapeStyle<TintShapeStyle>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonEdgeOutsetModifier, EmptyModifier>>>>>, _ContentShapeKindModifier<ToolbarButtonHoverShape>>, CustomHoverEffectModifier<HoverEffect>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonEdgeOutsetModifier, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, PlatformItemTintModifier, EmptyMo();
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<ModifiedContent<ToggleStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, _EnvironmentKeyTransformModifier<AnyShapeStyle?>>, _BackgroundModifier<ModifiedContent<_ShapeView<ResolvedBorderShape, _OpacityShapeStyle<TintShapeStyle>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonEdgeOutsetModifier, EmptyModifier>>>>>, _ContentShapeKindModifier<ToolbarButtonHoverShape>>, CustomHoverEffectModifier<HoverEffect>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonEdgeOutsetModifier, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier>, EmptyModifier>> and conformance <> ModifiedContent<A, B>();
    lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>(&lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, PlatformItemTintModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>, (unint64_t *)&lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, PlatformItemTintModifier, EmptyModifier>, (uint64_t)&type metadata for PlatformItemTintModifier, (void (*)(void))lazy protocol witness table accessor for type PlatformItemTintModifier and conformance PlatformItemTintModifier);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<ModifiedContent<ToggleStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, _EnvironmentKeyTransformModifier<AnyShapeStyle?>>, _BackgroundModifier<ModifiedContent<_ShapeView<ResolvedBorderShape, _OpacityShapeStyle<TintShapeStyle>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonEdgeOutsetModifier, EmptyModifier>>>>>, _ContentShapeKindModifier<ToolbarButtonHoverShape>>, CustomHoverEffectModifier<HoverEffect>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonEdgeOutsetModifier, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, Platform);
  }
  return result;
}

uint64_t View.onFocus(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = a1;
  *(void *)(v8 + 24) = a2;
  v12[0] = partial apply for closure #1 in View.onFocus(_:);
  v12[1] = v8;
  type metadata accessor for ResponderViewModifier<OnFocusModifier>();
  uint64_t v10 = v9;
  swift_retain();
  MEMORY[0x18C113660](v12, a3, v10, a4);
  return swift_release();
}

uint64_t sub_187B9FA48()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in View.onFocus(_:)@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = *(void *)(v2 + 24);
  *a2 = *(void *)(v2 + 16);
  a2[1] = v4;
  a2[2] = a1;
  swift_retain();

  return swift_retain();
}

void type metadata accessor for ResponderViewModifier<OnFocusModifier>()
{
  if (!lazy cache variable for type metadata for ResponderViewModifier<OnFocusModifier>)
  {
    unint64_t v0 = type metadata accessor for ResponderViewModifier();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ResponderViewModifier<OnFocusModifier>);
    }
  }
}

uint64_t sub_187B9FB24()
{
  return swift_getWitnessTable();
}

void *initializeBufferWithCopyOfBuffer for OnFocusModifier(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_retain();
  swift_retain();
  return a1;
}

void *assignWithCopy for OnFocusModifier(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_retain();
  swift_release();
  a1[2] = a2[2];
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for OnFocusModifier(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_release();
  return a1;
}

void *type metadata accessor for OnFocusModifier()
{
  return &unk_1ED41AF38;
}

_UNKNOWN **base witness table accessor for ViewModifier in OnFocusModifier()
{
  return &protocol witness table for OnFocusModifier;
}

uint64_t OnFocusModifier.Mutation.combine<A>(with:)(uint64_t a1)
{
  double v2 = MEMORY[0x1F4188790](a1);
  (*(void (**)(unsigned char *, double))(v4 + 16))(&v6[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)], v2);
  uint64_t result = swift_dynamicCast();
  if (result) {
    *(unsigned char *)(v1 + 8) = v6[12];
  }
  return result;
}

uint64_t static OnFocusModifier._makeView(modifier:inputs:body:)()
{
  uint64_t v0 = MEMORY[0x1E4FBB390];
  uint64_t v10 = (uint64_t (*)(void, uint64_t))MEMORY[0x1E4F4E778];
  type metadata accessor for External<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for External<Bool>, MEMORY[0x1E4FBB390], MEMORY[0x1E4F4E778]);
  _s14AttributeGraph8ExternalVySbGACyxGAA01_A4BodyAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type External<Bool> and conformance External<A>, (unint64_t *)&lazy cache variable for type metadata for External<Bool>, v0);
  Attribute.init<A>(body:value:flags:update:)();
  unint64_t v1 = AGCreateWeakAttribute();
  int v2 = v1;
  unint64_t v9 = HIDWORD(v1);
  type metadata accessor for External<Bool>(0, &lazy cache variable for type metadata for _GraphValue<OnFocusModifier>, (uint64_t)&unk_1ED41AF38, MEMORY[0x1E4F3F590]);
  _GraphValue.value.getter();
  _ViewInputs.viewPhase.getter();
  lazy protocol witness table accessor for type FocusedItemInputKey and conformance FocusedItemInputKey();
  swift_retain_n();
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  PropertyList.subscript.getter();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  swift_release_n();
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  lazy protocol witness table accessor for type OnFocusObserver and conformance OnFocusObserver();
  Attribute.init<A>(body:value:flags:update:)();
  static AGAttributeFlags.transactional.getter();
  AGGraphSetFlags();
  uint64_t v3 = swift_allocObject();
  type metadata accessor for GraphHost();
  MEMORY[0x18C114840]();
  swift_weakInit();
  swift_release();
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = v3;
  *(_DWORD *)(v4 + 24) = v2;
  *(_DWORD *)(v4 + 28) = v9;
  *(unsigned char *)(v4 + 32) = 1;
  uint64_t v5 = swift_allocObject();
  MEMORY[0x18C114840]();
  swift_weakInit();
  swift_release();
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = v5;
  *(_DWORD *)(v6 + 24) = v2;
  *(_DWORD *)(v6 + 28) = v9;
  *(unsigned char *)(v6 + 32) = 0;
  uint64_t v7 = MEMORY[0x1E4F40EE0];
  type metadata accessor for External<Bool>(0, &lazy cache variable for type metadata for External<_AppearanceActionModifier>, MEMORY[0x1E4F40EE0], v10);
  _s14AttributeGraph8ExternalVySbGACyxGAA01_A4BodyAAWlTm_0(&lazy protocol witness table cache variable for type External<_AppearanceActionModifier> and conformance External<A>, &lazy cache variable for type metadata for External<_AppearanceActionModifier>, v7);
  swift_retain();
  Attribute.init<A>(body:value:flags:update:)();
  swift_release();
  _GraphValue.init(_:)();
  static _AppearanceActionModifier._makeView(modifier:inputs:body:)();
  swift_release();
  return swift_release();
}

uint64_t closure #1 in closure #1 in static OnFocusModifier.appearanceHandler(_:_:)()
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    static Transaction.current.getter();
    lazy protocol witness table accessor for type OnFocusModifier.Mutation and conformance OnFocusModifier.Mutation();
    default argument 1 of GraphHost.asyncTransaction<A>(_:id:mutation:style:mayDeferUpdate:)();
    GraphHost.asyncTransaction<A>(_:id:mutation:style:mayDeferUpdate:)();
    swift_release();
    return swift_release();
  }
  return result;
}

void protocol witness for ViewModifier.body(content:) in conformance OnFocusModifier()
{
}

void OnFocusObserver.updateValue()()
{
  if ((*(unsigned char *)(v0 + 24) & 1) != 0 || (char v1 = 0, *(_DWORD *)(v0 + 20) != *(_DWORD *)AGGraphGetValue() >> 1))
  {
    *(_DWORD *)(v0 + 20) = *(_DWORD *)AGGraphGetValue() >> 1;
    *(unsigned char *)(v0 + 24) = 0;
    char v1 = 1;
  }
  Weakuint64_t Value = (unsigned char *)AGGraphGetWeakValue();
  if (WeakValue) {
    BOOL v4 = (v3 & 1) == 0;
  }
  else {
    BOOL v4 = 1;
  }
  if (!v4) {
    v1 |= *WeakValue ^ 1;
  }
  if (*(_DWORD *)(v0 + 8) == *MEMORY[0x1E4F4E7A0]) {
    goto LABEL_17;
  }
  type metadata accessor for External<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for FocusItem?, (uint64_t)&type metadata for FocusItem, MEMORY[0x1E4FBB718]);
  uint64_t Value = AGGraphGetValue();
  outlined init with copy of FocusItem?(Value, (uint64_t)v8);
  if (!v8[5] && v8[6] == 1)
  {
    outlined destroy of FocusItem?((uint64_t)v8);
LABEL_17:
    OnFocusObserver.lostFocus()();
    return;
  }
  AGGraphGetValue();
  uint64_t v6 = swift_retain();
  char v7 = FocusItem.inFocusedResponderChain(_:)(v6);
  swift_release();
  outlined destroy of FocusItem((uint64_t)v8);
  if ((v7 & 1) == 0) {
    goto LABEL_17;
  }
  if (v1) {
    OnFocusObserver.lostFocus()();
  }
  OnFocusObserver.gainedFocus()();
}

void OnFocusObserver.lostFocus()()
{
  if (*(unsigned char *)(v0 + 25) == 1 && (*(unsigned char *)(v0 + 24) & 1) == 0)
  {
    uint64_t Value = (uint64_t *)AGGraphGetValue();
    uint64_t v3 = *Value;
    uint64_t v2 = Value[1];
    uint64_t v4 = Value[2];
    uint64_t v5 = (void *)swift_allocObject();
    v5[2] = v3;
    _OWORD v5[3] = v2;
    v5[4] = v4;
    swift_retain_n();
    swift_retain_n();
    static Update.enqueueAction(_:)();
    swift_release();
    swift_release();
    swift_release();
    *(unsigned char *)(v0 + 25) = 0;
  }
}

void OnFocusObserver.gainedFocus()()
{
  if ((*(unsigned char *)(v0 + 25) & 1) == 0 && (*(unsigned char *)(v0 + 24) & 1) == 0)
  {
    uint64_t Value = (uint64_t *)AGGraphGetValue();
    uint64_t v3 = *Value;
    uint64_t v2 = Value[1];
    uint64_t v4 = Value[2];
    uint64_t v5 = (void *)swift_allocObject();
    v5[2] = v3;
    _OWORD v5[3] = v2;
    v5[4] = v4;
    swift_retain_n();
    swift_retain_n();
    static Update.enqueueAction(_:)();
    swift_release();
    swift_release();
    swift_release();
    *(unsigned char *)(v0 + 25) = 1;
  }
}

unint64_t lazy protocol witness table accessor for type OnFocusObserver and conformance OnFocusObserver()
{
  unint64_t result = lazy protocol witness table cache variable for type OnFocusObserver and conformance OnFocusObserver;
  if (!lazy protocol witness table cache variable for type OnFocusObserver and conformance OnFocusObserver)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type OnFocusObserver and conformance OnFocusObserver);
  }
  return result;
}

uint64_t sub_187BA0768()
{
  swift_weakDestroy();

  return swift_deallocObject();
}

uint64_t sub_187BA07A4()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in static OnFocusModifier.appearanceHandler(_:_:)()
{
  return static Update.ensure<A>(_:)();
}

uint64_t partial apply for closure #1 in closure #1 in static OnFocusModifier.appearanceHandler(_:_:)()
{
  return closure #1 in closure #1 in static OnFocusModifier.appearanceHandler(_:_:)();
}

unint64_t lazy protocol witness table accessor for type OnFocusModifier.Mutation and conformance OnFocusModifier.Mutation()
{
  unint64_t result = lazy protocol witness table cache variable for type OnFocusModifier.Mutation and conformance OnFocusModifier.Mutation;
  if (!lazy protocol witness table cache variable for type OnFocusModifier.Mutation and conformance OnFocusModifier.Mutation)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type OnFocusModifier.Mutation and conformance OnFocusModifier.Mutation);
  }
  return result;
}

void *type metadata accessor for OnFocusModifier.Mutation()
{
  return &unk_1ED41AEB8;
}

__n128 __swift_memcpy26_4(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  *(_OWORD *)(a1 + 10) = *(_OWORD *)(a2 + 10);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t getEnumTagSinglePayload for OnFocusObserver(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 26)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 25);
  BOOL v4 = v3 >= 2;
  int v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for OnFocusObserver(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(_WORD *)(result + 24) = 0;
    *(void *)__n128 result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 26) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 26) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 25) = a2 + 1;
    }
  }
  return result;
}

void *type metadata accessor for OnFocusObserver()
{
  return &unk_1ED41AFB8;
}

uint64_t specialized static UIKitAnimationBridge.withAnimation<A>(_:_:completion:)(uint64_t a1, uint64_t (*a2)(void), uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (!a1) {
    return a2();
  }
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = 0;
  *(unsigned char *)(v9 + 24) = -1;
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = a2;
  *(void *)(v10 + 24) = a3;
  type metadata accessor for UIView();
  char v11 = (void *)swift_allocObject();
  v11[2] = v9;
  v11[3] = partial apply for specialized thunk for @callee_guaranteed () -> (@out A, @error @owned Error);
  v11[4] = v10;
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16) = a4;
  *(void *)(v12 + 24) = a5;
  lazy protocol witness table accessor for type Bridge and conformance Bridge();
  swift_retain_n();
  swift_retain();
  swift_retain();
  swift_retain();
  static UIView.animate<A>(bridgedAnimation:animations:completion:)();
  swift_release();
  swift_release();
  swift_release();
  LOBYTE(a5) = swift_isEscapingClosureAtFileLocation();
  uint64_t result = swift_release();
  if (a5)
  {
    __break(1u);
    goto LABEL_9;
  }
  uint64_t result = swift_beginAccess();
  int v14 = *(unsigned __int8 *)(v9 + 24);
  if (v14 == 255)
  {
LABEL_9:
    __break(1u);
    return result;
  }
  if (v14)
  {
    id v15 = *(id *)(v9 + 16);
    type metadata accessor for CVarArg(0, (unint64_t *)&lazy cache variable for type metadata for Error);
    swift_willThrowTypedImpl();
  }
  swift_release();
  return swift_release();
}

uint64_t static UIKitAnimationBridge.withAnimation<A>(_:_:completion:)@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(void)@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  if (!a1) {
    return a2();
  }
  type metadata accessor for CVarArg(255, (unint64_t *)&lazy cache variable for type metadata for Error);
  uint64_t v13 = type metadata accessor for Result();
  type metadata accessor for Optional();
  uint64_t v14 = swift_allocBox();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v15, 1, 1, v13);
  uint64_t v16 = (void *)swift_allocObject();
  v16[2] = a6;
  v16[3] = a2;
  v16[4] = a3;
  swift_retain();
  closure #1 in static UIKitAnimationBridge.withAnimation<A>(_:_:completion:)((uint64_t)partial apply for thunk for @callee_guaranteed () -> (@out A, @error @owned Error), (uint64_t)v16, a1, v14, a4, a5, a6);
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  uint64_t result = swift_release();
  if (isEscapingClosureAtFileLocation)
  {
    __break(1u);
  }
  else
  {
    MEMORY[0x1F4188790](result);
    partial apply for closure #2 in static UIKitAnimationBridge.withAnimation<A>(_:_:completion:)(a7);
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t thunk for @callee_guaranteed () -> (@error @owned Error)(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t closure #1 in static UIKitAnimationBridge.withAnimation<A>(_:_:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  type metadata accessor for UIView();
  uint64_t v13 = (void *)swift_allocObject();
  v13[2] = a7;
  v13[3] = a4;
  v13[4] = a1;
  v13[5] = a2;
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = a5;
  *(void *)(v14 + 24) = a6;
  lazy protocol witness table accessor for type Bridge and conformance Bridge();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  static UIView.animate<A>(bridgedAnimation:animations:completion:)();
  swift_release();
  swift_release();
  return swift_release();
}

void specialized closure #1 in closure #1 in static UIKitAnimationBridge.withAnimation<A>(_:_:completion:)(uint64_t a1, void (*a2)(void *__return_ptr))
{
  a2(v6);
  uint64_t v3 = v6[0];
  swift_beginAccess();
  BOOL v4 = *(void **)(a1 + 16);
  *(void *)(a1 + 16) = v3;
  unsigned __int8 v5 = *(unsigned char *)(a1 + 24);
  *(unsigned char *)(a1 + 24) = 0;
  outlined consume of Result<(), Error>?(v4, v5);
}

uint64_t closure #1 in closure #1 in static UIKitAnimationBridge.withAnimation<A>(_:_:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  type metadata accessor for CVarArg(255, (unint64_t *)&lazy cache variable for type metadata for Error);
  uint64_t v7 = type metadata accessor for Result();
  uint64_t v8 = type metadata accessor for Optional();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  char v11 = &v14[-v10];
  uint64_t v12 = swift_projectBox();
  uint64_t v15 = a4;
  uint64_t v16 = a2;
  uint64_t v17 = a3;
  _ss6ResultOsRi_zrlE8catchingAByxq_Gxyq_YKXE_tcfC((void (*)(unsigned char *, double))partial apply for closure #1 in closure #1 in closure #1 in static UIKitAnimationBridge.withAnimation<A>(_:_:completion:), (uint64_t)v11);
  (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(v11, 0, 1, v7);
  swift_beginAccess();
  return (*(uint64_t (**)(uint64_t, unsigned char *, uint64_t))(v9 + 40))(v12, v11, v8);
}

uint64_t _ss6ResultOsRi_zrlE8catchingAByxq_Gxyq_YKXE_tcfC@<X0>(void (*a1)(unsigned char *, double)@<X0>, uint64_t a2@<X8>)
{
  MEMORY[0x1F4188790](a1);
  unsigned __int8 v5 = &v12[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v6 = type metadata accessor for Result();
  uint64_t v7 = *(void *)(v6 - 8);
  double v8 = MEMORY[0x1F4188790](v6);
  uint64_t v10 = &v12[-v9];
  a1(v5, v8);
  swift_storeEnumTagMultiPayload();
  return (*(uint64_t (**)(uint64_t, unsigned char *, uint64_t))(v7 + 32))(a2, v10, v6);
}

uint64_t closure #2 in static UIKitAnimationBridge.withAnimation<A>(_:_:completion:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  type metadata accessor for CVarArg(255, (unint64_t *)&lazy cache variable for type metadata for Error);
  uint64_t v4 = type metadata accessor for Result();
  uint64_t v5 = type metadata accessor for Optional();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  double v8 = (char *)&v10 - v7;
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, a1, v5);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48))(v8, 1, v4);
  if (result != 1) {
    return _ss6ResultOsRi_zrlE3getxyq_YKF(v4, (uint64_t)&v11, a2);
  }
  __break(1u);
  return result;
}

uint64_t _ss6ResultOsRi_zrlE3getxyq_YKF@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if (swift_getEnumCaseMultiPayload() != 1) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 16) - 8) + 32))(a3, v3);
  }
  (*(void (**)(uint64_t, uint64_t, void))(*(void *)(*(void *)(a1 + 24) - 8) + 32))(a2, v3, *(void *)(a1 + 24));
  return swift_willThrowTypedImpl();
}

uint64_t static BridgedStateKey.defaultValue.getter()
{
  return MEMORY[0x1F40FE378]();
}

uint64_t protocol witness for static UIBridgedAnimationStateKey.defaultValue.getter in conformance BridgedStateKey<A>()
{
  return static BridgedStateKey.defaultValue.getter();
}

uint64_t UIBridgedAnimationState.bridgedState.getter(uint64_t a1)
{
  type metadata accessor for BridgedVector();
  swift_getWitnessTable();
  uint64_t v2 = type metadata accessor for BridgedStateKey();
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F4165B90](v2, a1, v2, WitnessTable);
}

uint64_t UIBridgedAnimationState.bridgedState.setter()
{
  return UIBridgedAnimationState.subscript.setter();
}

uint64_t Bridge.animate<A>(value:time:state:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char *a5@<X8>)
{
  uint64_t v33 = a3;
  uint64_t v34 = a5;
  uint64_t v30 = a2;
  uint64_t v35 = a1;
  uint64_t v6 = *(void *)(a4 - 8);
  MEMORY[0x1F4188790](a1);
  double v8 = (char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for BridgedVector();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9);
  uint64_t v12 = (char *)&v27 - v11;
  uint64_t v13 = type metadata accessor for Optional();
  uint64_t v31 = *(void *)(v13 - 8);
  uint64_t v32 = v13;
  MEMORY[0x1F4188790](v13);
  uint64_t v15 = (char *)&v27 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v16);
  uint64_t v18 = (char *)&v27 - v17;
  uint64_t v29 = type metadata accessor for UIBridgedAnimationState();
  UIBridgedAnimationState.bridgedState.getter(v29);
  swift_getWitnessTable();
  LOBYTE(v40) = 1;
  AnimationContext.init(state:environment:)();
  unsigned __int8 v28 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 16);
  v28(v8, v35, a4);
  uint64_t v35 = v6;
  (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v12, v8, a4);
  Animation.animate<A>(value:time:context:)();
  char v19 = *(void (**)(char *, uint64_t))(v10 + 8);
  unsigned __int8 v20 = v12;
  uint64_t v21 = v31;
  v19(v20, v9);
  uint64_t v36 = v40;
  uint64_t v37 = v41;
  char v38 = v42;
  char v39 = v43;
  type metadata accessor for AnimationContext();
  AnimationContext.state.getter();
  UIBridgedAnimationState.bridgedState.setter();
  uint64_t v22 = v32;
  (*(void (**)(char *, char *, uint64_t))(v21 + 32))(v15, v18, v32);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v15, 1, v9) == 1)
  {
    (*(void (**)(char *, uint64_t))(v21 + 8))(v15, v22);
    uint64_t v23 = 1;
    long long v24 = v34;
  }
  else
  {
    long long v25 = v34;
    v28(v34, (uint64_t)v15, a4);
    v19(v15, v9);
    uint64_t v23 = 0;
    long long v24 = v25;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v35 + 56))(v24, v23, 1, a4);
  return swift_bridgeObjectRelease();
}

uint64_t Bridge.shouldMerge<A>(previous:value:time:state:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v19 = a2;
  uint64_t v8 = *(void *)(a5 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v10 = (char *)v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for BridgedVector();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x1F4188790](v11);
  uint64_t v14 = (char *)v18 - v13;
  outlined init with copy of TableColumnList(a1, (uint64_t)v24);
  type metadata accessor for CVarArg(0, &lazy cache variable for type metadata for UIBridgedAnimation);
  if (swift_dynamicCast())
  {
    uint64_t v15 = type metadata accessor for UIBridgedAnimationState();
    v18[1] = a3;
    UIBridgedAnimationState.bridgedState.getter(v15);
    swift_getWitnessTable();
    LOBYTE(v24[0]) = 1;
    AnimationContext.init(state:environment:)();
    (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, v19, a5);
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v14, v10, a5);
    swift_retain();
    char v16 = Animation.shouldMerge<A>(previous:value:time:context:)();
    swift_release();
    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
    uint64_t v20 = v24[0];
    uint64_t v21 = v24[1];
    char v22 = v25;
    char v23 = v26;
    type metadata accessor for AnimationContext();
    AnimationContext.state.getter();
    UIBridgedAnimationState.bridgedState.setter();
    swift_bridgeObjectRelease();
    swift_release();
  }
  else
  {
    char v16 = 0;
  }
  return v16 & 1;
}

uint64_t Bridge.velocity<A>(value:time:state:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, char *a4@<X8>)
{
  uint64_t v42 = a2;
  char v43 = a4;
  uint64_t v45 = a1;
  uint64_t v5 = *(void *)(a3 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v7 = (char *)&v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for BridgedVector();
  uint64_t v41 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  char v39 = (char *)&v34 - v9;
  uint64_t v10 = type metadata accessor for Optional();
  uint64_t v37 = *(void *)(v10 - 8);
  uint64_t v38 = v10;
  MEMORY[0x1F4188790](v10);
  uint64_t v40 = (char *)&v34 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v12);
  uint64_t v36 = (char *)&v34 - v13;
  uint64_t v14 = type metadata accessor for UIBridgedAnimationState();
  UIBridgedAnimationState.bridgedState.getter(v14);
  swift_getWitnessTable();
  LOBYTE(v46) = 1;
  AnimationContext.init(state:environment:)();
  uint64_t v15 = v46;
  uint64_t v16 = v47;
  char v17 = v48;
  char v18 = v49;
  uint64_t v35 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v35(v7, v45, a3);
  uint64_t v44 = a3;
  uint64_t v45 = v5;
  uint64_t v19 = *(void (**)(char *, char *, uint64_t))(v5 + 32);
  uint64_t v20 = v39;
  uint64_t v21 = a3;
  uint64_t v22 = v37;
  v19(v39, v7, v21);
  uint64_t v46 = v15;
  uint64_t v47 = v16;
  char v48 = v17;
  uint64_t v23 = v38;
  char v49 = v18;
  long long v24 = v36;
  Animation.velocity<A>(value:time:context:)();
  uint64_t v25 = v41;
  char v26 = *(void (**)(char *, uint64_t))(v41 + 8);
  v26(v20, v8);
  uint64_t v27 = v40;
  swift_bridgeObjectRelease();
  (*(void (**)(char *, char *, uint64_t))(v22 + 32))(v27, v24, v23);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48))(v27, 1, v8) == 1)
  {
    (*(void (**)(char *, uint64_t))(v22 + 8))(v27, v23);
    uint64_t v28 = 1;
    uint64_t v29 = v43;
    uint64_t v30 = v44;
  }
  else
  {
    uint64_t v32 = v43;
    uint64_t v31 = v44;
    v35(v43, (uint64_t)v27, v44);
    v26(v27, v8);
    uint64_t v28 = 0;
    uint64_t v30 = v31;
    uint64_t v29 = v32;
  }
  return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v45 + 56))(v29, v28, 1, v30);
}

uint64_t protocol witness for UIBridgedAnimation.animate<A>(value:time:state:) in conformance Bridge@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char *a4@<X8>)
{
  return Bridge.animate<A>(value:time:state:)(a1, a2, *v4, a3, a4);
}

uint64_t protocol witness for UIBridgedAnimation.shouldMerge<A>(previous:value:time:state:) in conformance Bridge(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return Bridge.shouldMerge<A>(previous:value:time:state:)(a1, a2, a3, *v4, a4);
}

uint64_t protocol witness for UIBridgedAnimation.velocity<A>(value:time:state:) in conformance Bridge@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, char *a3@<X8>)
{
  return Bridge.velocity<A>(value:time:state:)(a1, *v3, a2, a3);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Bridge()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance Bridge()
{
  swift_retain();
  Animation.hash(into:)();

  return swift_release();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Bridge()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance Bridge()
{
  return static Animation.== infix(_:_:)();
}

uint64_t static BridgedVector.+ infix(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5 = *(void *)(a2 - 8);
  double v6 = MEMORY[0x1F4188790](a1);
  uint64_t v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9(v6);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v5 + 32))(a3, v8, a2);
}

uint64_t BridgedVector.scale(by:)(uint64_t a1)
{
  return MEMORY[0x1F4165BB8](*(void *)(a1 + 16), *(void *)(a1 + 24));
}

uint64_t BridgedVector.magnitudeSquared.getter(uint64_t a1)
{
  return MEMORY[0x1F4165BB0](*(void *)(a1 + 16), *(void *)(a1 + 24));
}

uint64_t static BridgedVector.zero.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *(void *)(a1 - 8);
  MEMORY[0x1F4188790](a1);
  double v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  dispatch thunk of static AdditiveArithmetic.zero.getter();
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v4 + 32))(a2, v6, a1);
}

uint64_t static BridgedVector.== infix(_:_:)()
{
  return dispatch thunk of static Equatable.== infix(_:_:)() & 1;
}

uint64_t protocol witness for static AdditiveArithmetic.zero.getter in conformance BridgedVector<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return static BridgedVector.zero.getter(*(void *)(a1 + 16), a2);
}

uint64_t protocol witness for static AdditiveArithmetic.+ infix(_:_:) in conformance BridgedVector<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  return static BridgedVector.+ infix(_:_:)(a1, *(void *)(a2 + 16), a3);
}

uint64_t protocol witness for static AdditiveArithmetic.+= infix(_:_:) in conformance BridgedVector<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return static AdditiveArithmetic.+= infix(_:_:)(a1, a2, a3);
}

uint64_t protocol witness for static AdditiveArithmetic.- infix(_:_:) in conformance BridgedVector<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  return static BridgedVector.+ infix(_:_:)(a1, *(void *)(a2 + 16), a3);
}

uint64_t protocol witness for static AdditiveArithmetic.-= infix(_:_:) in conformance BridgedVector<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return static AdditiveArithmetic.+= infix(_:_:)(a1, a2, a3);
}

uint64_t static AdditiveArithmetic.+= infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 - 8);
  double v6 = MEMORY[0x1F4188790](a1);
  uint64_t v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9(v6);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a1, a3);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v5 + 32))(a1, v8, a3);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance BridgedVector<A>()
{
  return static BridgedVector.== infix(_:_:)();
}

uint64_t static UIView.animate(_:changes:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v10[2] = a2;
  v10[3] = a3;
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = a4;
  *(void *)(v8 + 24) = a5;
  outlined copy of AppIntentExecutor?(a4);
  specialized static UIKitAnimationBridge.withAnimation<A>(_:_:completion:)(a1, _ss5Error_pIgzo_ytsAA_pIegrzo_TRTA_0, (uint64_t)v10, (uint64_t)partial apply for closure #1 in static UIView.animate(_:changes:completion:), v8);
  return swift_release();
}

uint64_t _ss5Error_pIgzo_ytsAA_pIegrzo_TRTA_0()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t closure #1 in static UIView.animate(_:changes:completion:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  if (a3) {
    return a3();
  }
  return result;
}

uint64_t static UIView.animate(with:changes:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v10[2] = a2;
  v10[3] = a3;
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = a4;
  *(void *)(v8 + 24) = a5;
  outlined copy of AppIntentExecutor?(a4);
  specialized static UIKitAnimationBridge.withAnimation<A>(_:_:completion:)(a1, thunk for @callee_guaranteed () -> (@error @owned Error)partial apply, (uint64_t)v10, (uint64_t)partial apply for closure #1 in static UIView.animate(_:changes:completion:), v8);
  return swift_release();
}

uint64_t partial apply for closure #1 in static UIView.animate(_:changes:completion:)()
{
  char v1 = *(uint64_t (**)(void))(v0 + 16);
  if (v1) {
    return v1();
  }
  return result;
}

uint64_t static UIView.animate(_:animations:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v10[2] = a2;
  v10[3] = a3;
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = a4;
  *(void *)(v8 + 24) = a5;
  swift_retain();
  specialized static UIKitAnimationBridge.withAnimation<A>(_:_:completion:)(a1, thunk for @callee_guaranteed () -> (@error @owned Error)partial apply, (uint64_t)v10, (uint64_t)partial apply for closure #1 in static UIView.animate(_:animations:completion:), v8);
  return swift_release();
}

uint64_t partial apply for closure #1 in static UIView.animate(_:animations:completion:)(char a1, unsigned int a2)
{
  if (a1) {
    uint64_t v3 = 2;
  }
  else {
    uint64_t v3 = a2;
  }
  return (*(uint64_t (**)(uint64_t))(v2 + 16))(v3);
}

void UIView.AnimationResult.hash(into:)(uint64_t a1, unsigned __int8 a2)
{
}

BOOL static UIView.AnimationResult.== infix(_:_:)(char a1, char a2)
{
  return a1 == a2;
}

Swift::Int UIView.AnimationResult.hashValue.getter(unsigned __int8 a1)
{
  return Hasher._finalize()();
}

unint64_t lazy protocol witness table accessor for type UIView.AnimationResult and conformance UIView.AnimationResult()
{
  unint64_t result = lazy protocol witness table cache variable for type UIView.AnimationResult and conformance UIView.AnimationResult;
  if (!lazy protocol witness table cache variable for type UIView.AnimationResult and conformance UIView.AnimationResult)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UIView.AnimationResult and conformance UIView.AnimationResult);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for UIView.AnimationResult(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x187BA2A6CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for UIView.AnimationResult()
{
  return &type metadata for UIView.AnimationResult;
}

uint64_t sub_187BA2AA4()
{
  int v1 = *(unsigned __int8 *)(v0 + 24);
  if (v1 != 255) {
    outlined consume of Result<(), Error>(*(id *)(v0 + 16), v1 & 1);
  }

  return swift_deallocObject();
}

void outlined consume of Result<(), Error>(id a1, char a2)
{
  if (a2) {
}
  }

uint64_t sub_187BA2AF8()
{
  return swift_deallocObject();
}

uint64_t partial apply for specialized thunk for @callee_guaranteed () -> (@out A, @error @owned Error)()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t sub_187BA2B30()
{
  swift_release();
  swift_release();

  return swift_deallocObject();
}

void partial apply for specialized closure #1 in closure #1 in static UIKitAnimationBridge.withAnimation<A>(_:_:completion:)()
{
  specialized closure #1 in closure #1 in static UIKitAnimationBridge.withAnimation<A>(_:_:completion:)(*(void *)(v0 + 16), *(void (**)(void *__return_ptr))(v0 + 24));
}

uint64_t sub_187BA2B7C()
{
  swift_release();

  return swift_deallocObject();
}

unint64_t lazy protocol witness table accessor for type Bridge and conformance Bridge()
{
  unint64_t result = lazy protocol witness table cache variable for type Bridge and conformance Bridge;
  if (!lazy protocol witness table cache variable for type Bridge and conformance Bridge)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Bridge and conformance Bridge);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Bridge and conformance Bridge;
  if (!lazy protocol witness table cache variable for type Bridge and conformance Bridge)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Bridge and conformance Bridge);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Bridge and conformance Bridge;
  if (!lazy protocol witness table cache variable for type Bridge and conformance Bridge)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Bridge and conformance Bridge);
  }
  return result;
}

void outlined consume of Result<(), Error>?(void *a1, unsigned __int8 a2)
{
  if (a2 != 255) {
    outlined consume of Result<(), Error>(a1, a2 & 1);
  }
}

uint64_t sub_187BA2C20()
{
  return swift_deallocObject();
}

uint64_t partial apply for thunk for @callee_guaranteed () -> (@out A, @error @owned Error)()
{
  return (*(uint64_t (**)(void))(v0 + 24))();
}

uint64_t partial apply for closure #2 in static UIKitAnimationBridge.withAnimation<A>(_:_:completion:)@<X0>(uint64_t a1@<X8>)
{
  return closure #2 in static UIKitAnimationBridge.withAnimation<A>(_:_:completion:)(*(void *)(v1 + 24), a1);
}

uint64_t sub_187BA2C74()
{
  swift_release();
  swift_release();

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in static UIKitAnimationBridge.withAnimation<A>(_:_:completion:)()
{
  return closure #1 in closure #1 in static UIKitAnimationBridge.withAnimation<A>(_:_:completion:)(v0[3], v0[4], v0[5], v0[2]);
}

uint64_t partial apply for closure #1 in closure #1 in closure #1 in static UIKitAnimationBridge.withAnimation<A>(_:_:completion:)(void *a1)
{
  uint64_t result = (*(uint64_t (**)(void))(v1 + 24))();
  if (v2) {
    *a1 = v2;
  }
  return result;
}

void *type metadata accessor for Bridge()
{
  return &unk_1ED4669D8;
}

uint64_t type metadata accessor for BridgedVector()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for BridgedStateKey()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t getEnumTagSinglePayload for BridgedVector(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (!a2) {
    return 0;
  }
  unsigned int v7 = a2 - v5;
  if (a2 <= v5) {
    goto LABEL_19;
  }
  char v8 = 8 * v6;
  if (v6 <= 3)
  {
    unsigned int v10 = ((v7 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      int v9 = *(_DWORD *)((char *)a1 + v6);
      if (!v9) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      int v9 = *(unsigned __int16 *)((char *)a1 + v6);
      if (!*(unsigned __int16 *)((char *)a1 + v6)) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_19:
      if (v5) {
        return (*(uint64_t (**)(void))(v4 + 48))();
      }
      return 0;
    }
  }
  int v9 = *((unsigned __int8 *)a1 + v6);
  if (!*((unsigned char *)a1 + v6)) {
    goto LABEL_19;
  }
LABEL_11:
  int v11 = (v9 - 1) << v8;
  if (v6 > 3) {
    int v11 = 0;
  }
  if (v6)
  {
    if (v6 > 3) {
      LODWORD(v6) = 4;
    }
    switch((int)v6)
    {
      case 2:
        LODWORD(v6) = *a1;
        break;
      case 3:
        LODWORD(v6) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v6) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v6) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v5 + (v6 | v11) + 1;
}

void storeEnumTagSinglePayload for BridgedVector(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = *(void *)(v6 + 64);
  BOOL v9 = a3 >= v7;
  unsigned int v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      unsigned int v14 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v14))
      {
        int v11 = 4;
      }
      else if (v14 >= 0x100)
      {
        int v11 = 2;
      }
      else
      {
        int v11 = v14 > 1;
      }
    }
    else
    {
      int v11 = 1;
    }
  }
  else
  {
    int v11 = 0;
  }
  if (v7 < a2)
  {
    unsigned int v12 = ~v7 + a2;
    if (v8 < 4)
    {
      int v13 = (v12 >> (8 * v8)) + 1;
      if (v8)
      {
        int v15 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if (v8 == 3)
        {
          *(_WORD *)a1 = v15;
          a1[2] = BYTE2(v15);
        }
        else if (v8 == 2)
        {
          *(_WORD *)a1 = v15;
        }
        else
        {
          *a1 = v15;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v12;
      int v13 = 1;
    }
    switch(v11)
    {
      case 1:
        a1[v8] = v13;
        return;
      case 2:
        *(_WORD *)&a1[v8] = v13;
        return;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v8] = v13;
        return;
      default:
        return;
    }
  }
  switch(v11)
  {
    case 1:
      a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 2:
      *(_WORD *)&a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 3:
LABEL_34:
      __break(1u);
      JUMPOUT(0x187BA315CLL);
    case 4:
      *(_DWORD *)&a1[v8] = 0;
      goto LABEL_20;
    default:
LABEL_20:
      if (a2)
      {
LABEL_21:
        uint64_t v16 = *(void (**)(void))(v6 + 56);
        v16();
      }
      return;
  }
}

uint64_t base witness table accessor for Equatable in BridgedVector<A>()
{
  return swift_getWitnessTable();
}

uint64_t instantiation function for generic protocol witness table for BridgedVector<A>(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t thunk for @callee_guaranteed () -> (@error @owned Error)partial apply()
{
  return _ss5Error_pIgzo_ytsAA_pIegrzo_TRTA_0();
}

BOOL EnvironmentValues.isHoverEffectEnabled.getter()
{
  if (*(void *)(v0 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.HoverEffectStateKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.HoverEffectStateKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.HoverEffectStateKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.HoverEffectStateKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  return (v2 & 1) == 0;
}

BOOL key path getter for EnvironmentValues.isHoverEffectEnabled : EnvironmentValues@<W0>(unsigned char *a1@<X8>)
{
  BOOL result = EnvironmentValues.isHoverEffectEnabled.getter();
  *a1 = result;
  return result;
}

uint64_t key path setter for EnvironmentValues.isHoverEffectEnabled : EnvironmentValues()
{
  return EnvironmentValues.isHoverEffectEnabled.setter();
}

uint64_t EnvironmentValues.isHoverEffectEnabled.setter()
{
  uint64_t v1 = *(void *)(v0 + 8);
  type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.HoverEffectStateKey>);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.HoverEffectStateKey> and conformance EnvironmentPropertyKey<A>();
  swift_retain_n();
  if (v1)
  {
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    PropertyList.subscript.getter();
  }
  swift_release_n();
  type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.HoverEffectStateKey>);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.HoverEffectStateKey> and conformance EnvironmentPropertyKey<A>();
  swift_retain();
  PropertyList.subscript.setter();
  if (v1)
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  return swift_release();
}

uint64_t View.hoverEffect(_:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = *a1;
  lazy protocol witness table accessor for type HoverEffect and conformance HoverEffect();
  return View.hoverEffect<A>(_:isEnabled:)((uint64_t)&v8, 1, a2, (uint64_t)&type metadata for HoverEffect, a3, a4);
}

void View.hoverEffect<A>(_:in:isEnabled:)()
{
}

uint64_t static HoverEffect.automatic.getter@<X0>(void *a1@<X8>)
{
  return static HoverEffect.automatic.getter(&one-time initialization token for automatic, &static HoverEffect.automatic, a1);
}

uint64_t View.hoverEffect(_:isEnabled:)@<X0>(uint64_t *a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10 = *a1;
  lazy protocol witness table accessor for type HoverEffect and conformance HoverEffect();
  return View.hoverEffect<A>(_:isEnabled:)((uint64_t)&v10, a2, a3, (uint64_t)&type metadata for HoverEffect, a4, a5);
}

uint64_t View.defaultHoverEffect(_:)()
{
  return swift_release();
}

uint64_t EnvironmentValues.defaultHoverEffect.getter()
{
  if (*(void *)(v0 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.DefaultHoverEffectKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.DefaultHoverEffectKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.DefaultHoverEffectKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.DefaultHoverEffectKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  return swift_release_n();
}

uint64_t EnvironmentValues.defaultHoverEffect.setter()
{
  type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.DefaultHoverEffectKey>);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.DefaultHoverEffectKey> and conformance EnvironmentPropertyKey<A>();
  swift_retain();
  swift_retain();
  PropertyList.subscript.setter();
  if (*(void *)(v0 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  swift_release();
  return swift_release();
}

uint64_t View.defaultHoverEffect<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 - 8);
  MEMORY[0x1F4188790](a1);
  unsigned int v7 = (char *)v9 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_getKeyPath();
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a1, a3);
  type metadata accessor for _AnyHoverEffectBox();
  v9[1] = TransformBox.__allocating_init(_:)((uint64_t)v7);
  View.environment<A>(_:_:)();
  swift_release();
  return swift_release();
}

uint64_t HoverEffect.init<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  type metadata accessor for _AnyHoverEffectBox();
  uint64_t result = TransformBox.__allocating_init(_:)(a1);
  *a2 = result;
  return result;
}

uint64_t View.hoverEffectDisabled(_:)(char a1)
{
  swift_getKeyPath();
  *(unsigned char *)(swift_allocObject() + 16) = a1;
  View.transformEnvironment<A>(_:transform:)();
  swift_release();

  return swift_release();
}

void View.hoverEffect<A>(in:isEnabled:body:)()
{
}

uint64_t one-time initialization function for highlight()
{
  uint64_t KeyPath = swift_getKeyPath();
  type metadata accessor for CustomHoverEffectModifier<HoverEffect>(0, (unint64_t *)&lazy cache variable for type metadata for _InternalHoverEffectBox<HoverContainerEffect>, (uint64_t (*)(void))lazy protocol witness table accessor for type HoverContainerEffect and conformance HoverContainerEffect, (uint64_t)&type metadata for HoverContainerEffect, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _InternalHoverEffectBox);
  uint64_t result = swift_allocObject();
  *(void *)(result + 24) = 0;
  *(void *)(result + 32) = 0;
  *(void *)(result + 16) = KeyPath;
  *(_DWORD *)(result + 40) = 0;
  *(_WORD *)(result + 44) = 257;
  static HoverEffect.highlight = result;
  return result;
}

uint64_t static HoverEffect.highlight.getter@<X0>(void *a1@<X8>)
{
  return static HoverEffect.automatic.getter(&one-time initialization token for highlight, &static HoverEffect.highlight, a1);
}

uint64_t one-time initialization function for lift()
{
  uint64_t KeyPath = swift_getKeyPath();
  type metadata accessor for CustomHoverEffectModifier<HoverEffect>(0, (unint64_t *)&lazy cache variable for type metadata for _InternalHoverEffectBox<HoverContainerEffect>, (uint64_t (*)(void))lazy protocol witness table accessor for type HoverContainerEffect and conformance HoverContainerEffect, (uint64_t)&type metadata for HoverContainerEffect, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _InternalHoverEffectBox);
  uint64_t result = swift_allocObject();
  *(void *)(result + 24) = 0;
  *(void *)(result + 32) = 0;
  *(void *)(result + 16) = KeyPath;
  *(_DWORD *)(result + 40) = 0;
  *(_WORD *)(result + 44) = 258;
  static HoverEffect.lift = result;
  return result;
}

uint64_t static HoverEffect.lift.getter@<X0>(void *a1@<X8>)
{
  return static HoverEffect.automatic.getter(&one-time initialization token for lift, &static HoverEffect.lift, a1);
}

uint64_t HoverEffect.systemHoverEffect.getter()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 96))();
}

void protocol witness for CustomHoverEffect.body(content:) in conformance HoverEffect()
{
}

uint64_t protocol witness for InternalCustomHoverEffect.systemHoverEffect.getter in conformance HoverEffect()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 96))();
}

void AnyHoverEffectBox.matches(_:)()
{
}

void AnyHoverEffectBox.makeChild(container:inputs:body:)()
{
}

void AnyHoverEffectBox.systemHoverEffect.getter()
{
}

BOOL _AnyHoverEffectBox.matches(_:)()
{
  return swift_dynamicCastClass() != 0;
}

uint64_t _AnyHoverEffectBox.systemHoverEffect.getter@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t v4 = *(void *)(*(void *)v2 + 112);
  double v5 = MEMORY[0x1F4188790](a1);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v7 + 16))((char *)v14 - v8, v2 + *(void *)(v6 + 128), v4, v5);
  type metadata accessor for InternalCustomHoverEffect();
  if (swift_dynamicCast())
  {
    outlined init with take of OptionalBinaryInteger(v14, (uint64_t)v16);
    uint64_t v9 = v17;
    uint64_t v10 = v18;
    __swift_project_boxed_opaque_existential_1(v16, v17);
    (*(void (**)(long long *__return_ptr, uint64_t, uint64_t))(v10 + 32))(v14, v9, v10);
    uint64_t result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v16);
    char v12 = v14[0];
    char v13 = BYTE1(v14[0]);
  }
  else
  {
    uint64_t v15 = 0;
    memset(v14, 0, sizeof(v14));
    uint64_t result = outlined destroy of InternalCustomHoverEffect?((uint64_t)v14);
    char v12 = 3;
    char v13 = 1;
  }
  *a2 = v12;
  a2[1] = v13;
  return result;
}

uint64_t _InternalHoverEffectBox.systemHoverEffect.getter(uint64_t a1)
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 168);
  uint64_t v4 = *(void *)(v3 - 8);
  double v5 = MEMORY[0x1F4188790](a1);
  uint64_t v7 = (char *)&v9 - v6;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v4 + 16))((char *)&v9 - v6, (uint64_t)v1 + *(void *)(v2 + 128), v3, v5);
  (*(void (**)(uint64_t))(*(void *)(v2 + 176) + 32))(v3);
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v7, v3);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AnyHoverEffectChild<A>()
{
  return specialized AnyDynamicChild.description.getter();
}

uint64_t EnvironmentValues.hoverEffectState.getter()
{
  if (*(void *)(v0 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.HoverEffectStateKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.HoverEffectStateKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.HoverEffectStateKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.HoverEffectStateKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  return swift_release_n();
}

uint64_t EnvironmentValues.hoverEffectState.setter()
{
  type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.HoverEffectStateKey>);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.HoverEffectStateKey> and conformance EnvironmentPropertyKey<A>();
  swift_retain();
  PropertyList.subscript.setter();
  if (*(void *)(v0 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  return swift_release();
}

uint64_t (*EnvironmentValues.isHoverEffectEnabled.modify(uint64_t a1))()
{
  *(void *)a1 = v1;
  if (*(void *)(v1 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.HoverEffectStateKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.HoverEffectStateKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.HoverEffectStateKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.HoverEffectStateKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  *(unsigned char *)(a1 + 8) = (*(unsigned char *)(a1 + 9) & 1) == 0;
  return EnvironmentValues.isHoverEffectEnabled.modify;
}

uint64_t EnvironmentValues.isHoverEffectEnabled.modify()
{
  return EnvironmentValues.isHoverEffectEnabled.setter();
}

uint64_t (*EnvironmentValues.defaultHoverEffect.modify(uint64_t a1))(void *a1, char a2)
{
  *(void *)(a1 + 16) = v1;
  if (*(void *)(v1 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.DefaultHoverEffectKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.DefaultHoverEffectKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.DefaultHoverEffectKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.DefaultHoverEffectKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  return EnvironmentValues.defaultHoverEffect.modify;
}

uint64_t EnvironmentValues.defaultHoverEffect.modify(void *a1, char a2)
{
  uint64_t v3 = a1[2];
  a1[1] = *a1;
  type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.DefaultHoverEffectKey>);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.DefaultHoverEffectKey> and conformance EnvironmentPropertyKey<A>();
  swift_retain();
  if (a2)
  {
    swift_retain();
    swift_retain();
    PropertyList.subscript.setter();
    if (*(void *)(v3 + 8))
    {
      swift_retain();
      swift_retain();
      PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
      swift_release();
      swift_release();
    }
    swift_release();
    swift_release();
  }
  else
  {
    swift_retain();
    PropertyList.subscript.setter();
    if (*(void *)(v3 + 8))
    {
      swift_retain();
      swift_retain();
      PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
      swift_release();
      swift_release();
    }
    swift_release();
  }

  return swift_release();
}

void HoverEffectContainerModifier.body(content:)(uint64_t a1@<X8>)
{
  int v2 = *v1;
  if (*v1)
  {
    char v4 = *((unsigned char *)v1 + 33);
    if (*((unsigned char *)v1 + 34) == 1)
    {
      uint64_t v5 = *((void *)v1 + 1);
      char v6 = *((unsigned char *)v1 + 16);
      uint64_t v7 = *((void *)v1 + 3);
      uint64_t v8 = *((unsigned __int8 *)v1 + 32);
      outlined copy of Environment<Bool>.Content(v5, v6);
      outlined copy of Environment<HoverEffect?>.Content(v7, v8);
      outlined copy of Environment<Bool>.Content(v5, v6);
      char v9 = specialized Environment.wrappedValue.getter(v5, v6);
      outlined consume of Environment<Bool>.Content(v5, v6);
      outlined consume of Environment<Bool>.Content(v5, v6);
      outlined consume of Environment<Color?>.Content(v7, v8);
    }
    else
    {
      char v9 = 0;
    }
    *(void *)a1 = 4;
    *(_DWORD *)(a1 + 8) = v2;
    *(unsigned char *)(a1 + 12) = v4;
    *(_DWORD *)(a1 + 16) = v2;
    *(unsigned char *)(a1 + 20) = v9 & 1;
  }
  else
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
}

BOOL sub_187BA48F0@<W0>(unsigned char *a1@<X8>)
{
  BOOL result = EnvironmentValues.isHoverEffectEnabled.getter();
  *a1 = result;
  return result;
}

uint64_t sub_187BA4930()
{
  return EnvironmentValues.isHoverEffectEnabled.setter();
}

uint64_t sub_187BA4958()
{
  return swift_deallocObject();
}

uint64_t associated type witness table accessor for CustomHoverEffect.Body : CustomHoverEffect in HoverEffect()
{
  return MEMORY[0x1E4F418E0];
}

uint64_t sub_187BA49D8()
{
  return swift_getWitnessTable();
}

uint64_t sub_187BA4A6C(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

uint64_t sub_187BA4A74()
{
  return swift_getWitnessTable();
}

uint64_t sub_187BA4B18()
{
  return swift_getWitnessTable();
}

void type metadata accessor for _EnvironmentKeyWritingModifier<HoverEffect?>()
{
  if (!lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<HoverEffect?>)
  {
    type metadata accessor for _GraphValue<HoverEffect>(255, &lazy cache variable for type metadata for HoverEffect?, (uint64_t)&type metadata for HoverEffect, MEMORY[0x1E4FBB718]);
    unint64_t v0 = type metadata accessor for _EnvironmentKeyWritingModifier();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<HoverEffect?>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<HoverEffect?> and conformance _EnvironmentKeyWritingModifier<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<HoverEffect?> and conformance _EnvironmentKeyWritingModifier<A>;
  if (!lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<HoverEffect?> and conformance _EnvironmentKeyWritingModifier<A>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<HoverEffect?>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<HoverEffect?> and conformance _EnvironmentKeyWritingModifier<A>);
  }
  return result;
}

uint64_t sub_187BA4C58()
{
  return swift_getWitnessTable();
}

uint64_t sub_187BA4CC8()
{
  return swift_getWitnessTable();
}

void destroy for AnyHoverEffectContainer(uint64_t a1)
{
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();

  if (*(void *)(a1 + 136))
  {
    swift_release();
    int v2 = *(void **)(a1 + 144);
  }
}

uint64_t assignWithCopy for AnyHoverEffectContainer(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(_DWORD *)(a1 + 92) = *(_DWORD *)(a2 + 92);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  *(_DWORD *)(a1 + 108) = *(_DWORD *)(a2 + 108);
  uint64_t v4 = *(void *)(a2 + 120);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a1 + 120) = v4;
  swift_retain();
  swift_release();
  uint64_t v5 = *(void **)(a2 + 128);
  char v6 = *(void **)(a1 + 128);
  *(void *)(a1 + 128) = v5;
  id v7 = v5;

  uint64_t v8 = *(void *)(a2 + 136);
  if (!*(void *)(a1 + 136))
  {
    if (v8)
    {
      *(void *)(a1 + 136) = v8;
      char v12 = *(void **)(a2 + 144);
      *(void *)(a1 + 144) = v12;
      swift_retain();
      id v13 = v12;
      return a1;
    }
LABEL_7:
    *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
    return a1;
  }
  if (!v8)
  {
    outlined destroy of AnyHoverEffectContainer.ChildEffect(a1 + 136);
    goto LABEL_7;
  }
  *(void *)(a1 + 136) = v8;
  swift_retain();
  swift_release();
  char v9 = *(void **)(a2 + 144);
  uint64_t v10 = *(void **)(a1 + 144);
  *(void *)(a1 + 144) = v9;
  id v11 = v9;

  return a1;
}

uint64_t outlined destroy of AnyHoverEffectContainer.ChildEffect(uint64_t a1)
{
  return a1;
}

uint64_t assignWithTake for AnyHoverEffectContainer(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_release();
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_release();
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRelease();
  long long v4 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v4;
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  swift_release();
  uint64_t v5 = *(void **)(a1 + 128);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);

  uint64_t v6 = *(void *)(a2 + 136);
  if (!*(void *)(a1 + 136)) {
    goto LABEL_5;
  }
  if (!v6)
  {
    outlined destroy of AnyHoverEffectContainer.ChildEffect(a1 + 136);
LABEL_5:
    *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
    return a1;
  }
  *(void *)(a1 + 136) = v6;
  swift_release();
  id v7 = *(void **)(a1 + 144);
  *(void *)(a1 + 144) = *(void *)(a2 + 144);

  return a1;
}

uint64_t getEnumTagSinglePayload for AnyHoverEffectContainer(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 152)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AnyHoverEffectContainer(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 152) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 24) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 152) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

void *type metadata accessor for AnyHoverEffectContainer()
{
  return &unk_1ED43D9F8;
}

void *initializeBufferWithCopyOfBuffer for AnyHoverEffectContainer.ChildEffect(void *a1, void *a2)
{
  uint64_t v3 = (void *)a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_retain();
  id v4 = v3;
  return a1;
}

void destroy for AnyHoverEffectContainer.ChildEffect(uint64_t a1)
{
  swift_release();
  unint64_t v2 = *(void **)(a1 + 8);
}

void *assignWithCopy for AnyHoverEffectContainer.ChildEffect(void *a1, void *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  id v4 = (void *)a2[1];
  uint64_t v5 = (void *)a1[1];
  a1[1] = v4;
  id v6 = v4;

  return a1;
}

uint64_t assignWithTake for AnyHoverEffectContainer.ChildEffect(uint64_t a1, _OWORD *a2)
{
  swift_release();
  id v4 = *(void **)(a1 + 8);
  *(_OWORD *)a1 = *a2;

  return a1;
}

void *type metadata accessor for AnyHoverEffectContainer.ChildEffect()
{
  return &unk_1ED43D978;
}

ValueMetadata *type metadata accessor for EnvironmentValues.DefaultHoverEffectKey()
{
  return &type metadata for EnvironmentValues.DefaultHoverEffectKey;
}

ValueMetadata *type metadata accessor for EnvironmentValues.HoverEffectStateKey()
{
  return &type metadata for EnvironmentValues.HoverEffectStateKey;
}

id outlined copy of AnyHoverEffectContainer.ChildEffect?(id result, void *a2)
{
  if (result)
  {
    swift_retain();
    return a2;
  }
  return result;
}

unint64_t type metadata accessor for InternalCustomHoverEffect()
{
  unint64_t result = lazy cache variable for type metadata for InternalCustomHoverEffect;
  if (!lazy cache variable for type metadata for InternalCustomHoverEffect)
  {
    unint64_t result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for InternalCustomHoverEffect);
  }
  return result;
}

uint64_t outlined destroy of InternalCustomHoverEffect?(uint64_t a1)
{
  type metadata accessor for InternalCustomHoverEffect?();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void type metadata accessor for InternalCustomHoverEffect?()
{
  if (!lazy cache variable for type metadata for InternalCustomHoverEffect?)
  {
    type metadata accessor for InternalCustomHoverEffect();
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for InternalCustomHoverEffect?);
    }
  }
}

uint64_t destroy for HoverEffectContainerModifier(uint64_t a1)
{
  outlined consume of Environment<Bool>.Content(*(void *)(a1 + 8), *(unsigned char *)(a1 + 16));
  uint64_t v2 = *(void *)(a1 + 24);
  uint64_t v3 = *(unsigned __int8 *)(a1 + 32);

  return outlined consume of Environment<Color?>.Content(v2, v3);
}

uint64_t initializeWithCopy for HoverEffectContainerModifier(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  char v5 = *(unsigned char *)(a2 + 16);
  outlined copy of Environment<Bool>.Content(v4, v5);
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v5;
  uint64_t v6 = *(void *)(a2 + 24);
  unsigned __int8 v7 = *(unsigned char *)(a2 + 32);
  outlined copy of Environment<HoverEffect?>.Content(v6, v7);
  *(void *)(a1 + 24) = v6;
  *(unsigned char *)(a1 + 32) = v7;
  *(_WORD *)(a1 + 33) = *(_WORD *)(a2 + 33);
  return a1;
}

uint64_t assignWithCopy for HoverEffectContainerModifier(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  char v5 = *(unsigned char *)(a2 + 16);
  outlined copy of Environment<Bool>.Content(v4, v5);
  uint64_t v6 = *(void *)(a1 + 8);
  char v7 = *(unsigned char *)(a1 + 16);
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v5;
  outlined consume of Environment<Bool>.Content(v6, v7);
  uint64_t v8 = *(void *)(a2 + 24);
  unsigned __int8 v9 = *(unsigned char *)(a2 + 32);
  outlined copy of Environment<HoverEffect?>.Content(v8, v9);
  uint64_t v10 = *(void *)(a1 + 24);
  uint64_t v11 = *(unsigned __int8 *)(a1 + 32);
  *(void *)(a1 + 24) = v8;
  *(unsigned char *)(a1 + 32) = v9;
  outlined consume of Environment<Color?>.Content(v10, v11);
  *(unsigned char *)(a1 + 33) = *(unsigned char *)(a2 + 33);
  *(unsigned char *)(a1 + 34) = *(unsigned char *)(a2 + 34);
  return a1;
}

__n128 __swift_memcpy35_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 31) = *(_DWORD *)(a2 + 31);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for HoverEffectContainerModifier(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  char v5 = *(unsigned char *)(a2 + 16);
  uint64_t v6 = *(void *)(a1 + 8);
  char v7 = *(unsigned char *)(a1 + 16);
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v5;
  outlined consume of Environment<Bool>.Content(v6, v7);
  char v8 = *(unsigned char *)(a2 + 32);
  uint64_t v9 = *(void *)(a1 + 24);
  uint64_t v10 = *(unsigned __int8 *)(a1 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(unsigned char *)(a1 + 32) = v8;
  outlined consume of Environment<Color?>.Content(v9, v10);
  *(unsigned char *)(a1 + 33) = *(unsigned char *)(a2 + 33);
  *(unsigned char *)(a1 + 34) = *(unsigned char *)(a2 + 34);
  return a1;
}

uint64_t getEnumTagSinglePayload for HoverEffectContainerModifier(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 35)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 1) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for HoverEffectContainerModifier(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(unsigned char *)(result + 34) = 0;
    *(_WORD *)(result + 32) = 0;
    *(void *)__n128 result = a2 - 255;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 35) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 35) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 16) = -(char)a2;
    }
  }
  return result;
}

uint64_t associated type witness table accessor for ViewModifier.Body : View in HoverEffectContainerModifier()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_187BA56C4()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<_ViewModifier_Content<HoverEffectContainerModifier>, PortalGroupRendererEffect>, PointerHoverEffectModifier> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<_ViewModifier_Content<HoverEffectContainerModifier>, PortalGroupRendererEffect>, PointerHoverEffectModifier> and conformance <> ModifiedContent<A, B>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<_ViewModifier_Content<HoverEffectContainerModifier>, PortalGroupRendererEffect>, PointerHoverEffectModifier>, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<_ViewModifier_Content<HoverEffectContainerModifier>, PortalGroupRendererEffect> and conformance <> ModifiedContent<A, B>);
}

void type metadata accessor for ModifiedContent<ModifiedContent<_ViewModifier_Content<HoverEffectContainerModifier>, PortalGroupRendererEffect>, PointerHoverEffectModifier>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<_ViewModifier_Content<HoverEffectContainerModifier>, PortalGroupRendererEffect>, PointerHoverEffectModifier>)
  {
    type metadata accessor for ModifiedContent<_ViewModifier_Content<HoverEffectContainerModifier>, PortalGroupRendererEffect>();
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<_ViewModifier_Content<HoverEffectContainerModifier>, PortalGroupRendererEffect>, PointerHoverEffectModifier>);
    }
  }
}

void type metadata accessor for ModifiedContent<_ViewModifier_Content<HoverEffectContainerModifier>, PortalGroupRendererEffect>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<_ViewModifier_Content<HoverEffectContainerModifier>, PortalGroupRendererEffect>)
  {
    type metadata accessor for CustomHoverEffectModifier<HoverEffect>(255, &lazy cache variable for type metadata for _ViewModifier_Content<HoverEffectContainerModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type HoverEffectContainerModifier and conformance HoverEffectContainerModifier, (uint64_t)&type metadata for HoverEffectContainerModifier, MEMORY[0x1E4F408E0]);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<_ViewModifier_Content<HoverEffectContainerModifier>, PortalGroupRendererEffect>);
    }
  }
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<_ViewModifier_Content<HoverEffectContainerModifier>, PortalGroupRendererEffect> and conformance <> ModifiedContent<A, B>()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<_ViewModifier_Content<HoverEffectContainerModifier>, PortalGroupRendererEffect>, PointerHoverEffectModifier> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<HoverEffectContainerModifier>, PortalGroupRendererEffect> and conformance <> ModifiedContent<A, B>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<_ViewModifier_Content<HoverEffectContainerModifier>, PortalGroupRendererEffect>, (void (*)(void))lazy protocol witness table accessor for type _ViewModifier_Content<HoverEffectContainerModifier> and conformance _ViewModifier_Content<A>);
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<_ViewModifier_Content<HoverEffectContainerModifier>, PortalGroupRendererEffect>, PointerHoverEffectModifier> and conformance <> ModifiedContent<A, B>(unint64_t *a1, void (*a2)(uint64_t), void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    a3();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _ViewModifier_Content<HoverEffectContainerModifier> and conformance _ViewModifier_Content<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type _ViewModifier_Content<HoverEffectContainerModifier> and conformance _ViewModifier_Content<A>;
  if (!lazy protocol witness table cache variable for type _ViewModifier_Content<HoverEffectContainerModifier> and conformance _ViewModifier_Content<A>)
  {
    type metadata accessor for CustomHoverEffectModifier<HoverEffect>(255, &lazy cache variable for type metadata for _ViewModifier_Content<HoverEffectContainerModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type HoverEffectContainerModifier and conformance HoverEffectContainerModifier, (uint64_t)&type metadata for HoverEffectContainerModifier, MEMORY[0x1E4F408E0]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ViewModifier_Content<HoverEffectContainerModifier> and conformance _ViewModifier_Content<A>);
  }
  return result;
}

uint64_t View.repeatingRotationEffect(anchor:duration:)()
{
  static Animation.linear(duration:)();
  View.repeatingRotationEffect(from:to:anchor:animation:)();

  return swift_release();
}

uint64_t View.repeatingRotationEffect(from:to:anchor:animation:)()
{
  return swift_release();
}

uint64_t partial apply for closure #1 in View.repeatingRotationEffect(from:to:anchor:animation:)()
{
  return View.rotationEffect(_:anchor:)();
}

unint64_t lazy protocol witness table accessor for type _RotationEffect and conformance _RotationEffect()
{
  unint64_t result = lazy protocol witness table cache variable for type _RotationEffect and conformance _RotationEffect;
  if (!lazy protocol witness table cache variable for type _RotationEffect and conformance _RotationEffect)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _RotationEffect and conformance _RotationEffect);
  }
  return result;
}

uint64_t VisualEffect.rotationEffect(_:anchor:)()
{
  return VisualEffect.geometryEffect<A>(_:)();
}

void HoverEffectContent.rotationEffect(_:anchor:)()
{
}

uint64_t sub_187BA5C04()
{
  return swift_getWitnessTable();
}

uint64_t sub_187BA5CA8()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_187BA5D04(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

void static PrimitiveButtonStyle<>.accessoryBar.getter()
{
}

void __swiftcall AccessoryBarButtonStyle.init()()
{
}

void AccessoryBarButtonStyle.makeBody(configuration:)()
{
}

void __swiftcall AccessoryBarActionButtonStyle.init()()
{
}

uint64_t associated type witness table accessor for PrimitiveButtonStyle.Body : View in AccessoryBarButtonStyle()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for PrimitiveButtonStyle.Body : View in AccessoryBarActionButtonStyle()
{
  return swift_getOpaqueTypeConformance2();
}

ValueMetadata *type metadata accessor for AccessoryBarButtonStyle()
{
  return &type metadata for AccessoryBarButtonStyle;
}

ValueMetadata *type metadata accessor for AccessoryBarActionButtonStyle()
{
  return &type metadata for AccessoryBarActionButtonStyle;
}

void static PrimitiveButtonStyle<>.accessoryBarAction.getter()
{
}

void AccessoryBarActionButtonStyle.makeBody(configuration:)()
{
}

uint64_t View.repeatingScaleEffect(from:to:anchor:animation:)()
{
  return View.repeatingScaleEffect(from:to:anchor:animation:)();
}

{
  Animation.repeatForever(autoreverses:)();
  type metadata accessor for ModifiedContent();
  swift_getWitnessTable();
  View.appearanceAnimation<A>(animation:modifier:)();
  return swift_release();
}

uint64_t partial apply for closure #1 in View.repeatingScaleEffect(from:to:anchor:animation:)()
{
  return View.scaleEffect(_:anchor:)();
}

unint64_t lazy protocol witness table accessor for type _ScaleEffect and conformance _ScaleEffect()
{
  unint64_t result = lazy protocol witness table cache variable for type _ScaleEffect and conformance _ScaleEffect;
  if (!lazy protocol witness table cache variable for type _ScaleEffect and conformance _ScaleEffect)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ScaleEffect and conformance _ScaleEffect);
  }
  return result;
}

uint64_t VisualEffect.scaleEffect(_:anchor:)()
{
  return VisualEffect.geometryEffect<A>(_:)();
}

{
  lazy protocol witness table accessor for type _ScaleEffect and conformance _ScaleEffect();
  return VisualEffect.geometryEffect<A>(_:)();
}

void HoverEffectContent.scaleEffect(_:anchor:)()
{
}

{
  HoverEffectContent.scaleEffect(x:y:anchor:)();
}

void HoverEffectContent.scaleEffect(x:y:anchor:)()
{
}

uint64_t sub_187BA60B4()
{
  return swift_getWitnessTable();
}

uint64_t sub_187BA6158()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t specialized Sequence.first(where:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = a1 + 64;
  uint64_t v4 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v5 = -1;
  if (v4 < 64) {
    uint64_t v5 = ~(-1 << v4);
  }
  unint64_t v6 = v5 & *(void *)(a1 + 64);
  int64_t v7 = (unint64_t)(v4 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v9 = 0;
  if (!v6) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v10 = __clz(__rbit64(v6));
  v6 &= v6 - 1;
  for (unint64_t i = v10 | (v9 << 6); ; unint64_t i = __clz(__rbit64(v13)) + (v9 << 6))
  {
    int v15 = *(_DWORD *)(*(void *)(a1 + 48) + 4 * i);
    outlined init with copy of InspectorStorage(*(void *)(a1 + 56) + 120 * i, (uint64_t)v31 + 8);
    LODWORD(v31[0]) = v15;
    long long v27 = v31[4];
    long long v28 = v31[5];
    long long v29 = v31[6];
    long long v30 = v31[7];
    long long v23 = v31[0];
    long long v24 = v31[1];
    long long v25 = v31[2];
    long long v26 = v31[3];
    outlined init with copy of InspectorStorage((uint64_t)&v23 + 8, (uint64_t)v22);
    int v16 = v22[17];
    outlined destroy of InspectorStorage((uint64_t)v22);
    if (v16 == 1)
    {
      uint64_t result = swift_release();
      long long v17 = v28;
      *(_OWORD *)(a2 + 64) = v27;
      *(_OWORD *)(a2 + 80) = v17;
      long long v18 = v30;
      *(_OWORD *)(a2 + 96) = v29;
      *(_OWORD *)(a2 + 112) = v18;
      long long v19 = v24;
      *(_OWORD *)a2 = v23;
      *(_OWORD *)(a2 + 16) = v19;
      long long v20 = v26;
      *(_OWORD *)(a2 + 32) = v25;
      *(_OWORD *)(a2 + 48) = v20;
      return result;
    }
    uint64_t result = _s7SwiftUI12ViewIdentityV3key_AA16InspectorStorageV5valuetWOhTm_0((uint64_t)&v23, (uint64_t (*)(void))type metadata accessor for (key: ViewIdentity, value: InspectorStorage));
    if (v6) {
      goto LABEL_4;
    }
LABEL_5:
    int64_t v12 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v12 >= v7) {
      goto LABEL_25;
    }
    unint64_t v13 = *(void *)(v3 + 8 * v12);
    ++v9;
    if (!v13)
    {
      int64_t v9 = v12 + 1;
      if (v12 + 1 >= v7) {
        goto LABEL_25;
      }
      unint64_t v13 = *(void *)(v3 + 8 * v9);
      if (!v13)
      {
        int64_t v9 = v12 + 2;
        if (v12 + 2 >= v7) {
          goto LABEL_25;
        }
        unint64_t v13 = *(void *)(v3 + 8 * v9);
        if (!v13)
        {
          int64_t v9 = v12 + 3;
          if (v12 + 3 >= v7) {
            goto LABEL_25;
          }
          unint64_t v13 = *(void *)(v3 + 8 * v9);
          if (!v13) {
            break;
          }
        }
      }
    }
LABEL_20:
    unint64_t v6 = (v13 - 1) & v13;
  }
  int64_t v14 = v12 + 4;
  if (v14 >= v7)
  {
LABEL_25:
    uint64_t result = swift_release();
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 1;
    *(_OWORD *)(a2 + 24) = 0u;
    *(_OWORD *)(a2 + 40) = 0u;
    *(_OWORD *)(a2 + 56) = 0u;
    *(_OWORD *)(a2 + 72) = 0u;
    *(_OWORD *)(a2 + 88) = 0u;
    *(_OWORD *)(a2 + 104) = 0u;
    *(void *)(a2 + 120) = 0;
    return result;
  }
  unint64_t v13 = *(void *)(v3 + 8 * v14);
  if (v13)
  {
    int64_t v9 = v14;
    goto LABEL_20;
  }
  while (1)
  {
    int64_t v9 = v14 + 1;
    if (__OFADD__(v14, 1)) {
      break;
    }
    if (v9 >= v7) {
      goto LABEL_25;
    }
    unint64_t v13 = *(void *)(v3 + 8 * v9);
    ++v14;
    if (v13) {
      goto LABEL_20;
    }
  }
LABEL_27:
  __break(1u);
  return result;
}

uint64_t specialized UIKitInspectorV3Bridge.preferencesDidChange(_:)(uint64_t a1)
{
  specialized UIKitInspectorV3Bridge.updateInspectorIfNeeded(_:)(a1);
  v3[0] = a1;
  PreferenceValues.subscript.getter();
  PreferenceValues.subscript.getter();
  PreferenceValues.subscript.getter();
  specialized UIKitInspectorV3Bridge.updatePopoverIfNeeded(_:presentationOptionsPreference:backgroundPreference:)(v3[18], v4, v3, a1 | ((unint64_t)HIDWORD(a1) << 32));
  _s7SwiftUI16PreferenceValuesV5ValueVy_AA019PresentationOptionsC0VGWOhTm_0((uint64_t)v3, (unint64_t *)&lazy cache variable for type metadata for PreferenceValues.Value<PresentationOptionsPreference>, (uint64_t)&type metadata for PresentationOptionsPreference, MEMORY[0x1E4F3FD10]);
  return swift_bridgeObjectRelease();
}

void specialized UIKitInspectorV3Bridge.updateAnchor()()
{
  uint64_t v1 = v0;
  _s2os6LoggerVSgMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for Logger?, MEMORY[0x1E4FBD360], MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v2 - 8);
  int v4 = (char *)&v32 - v3;
  uint64_t v5 = v1 + direct field offset for UIKitInspectorV3Bridge.activePresentation;
  swift_beginAccess();
  outlined init with copy of UIKitInspectorV3Bridge<TabItem.RootView>.PresentationKind(v5, (uint64_t)v45);
  switch(BYTE8(v46))
  {
    case 1:
      goto LABEL_3;
    case 2:
      long long v17 = *(void **)(v1 + direct field offset for UIKitInspectorV3Bridge.presentedVC);
      if (v17)
      {
        id v18 = objc_msgSend(v17, sel_presentationController);
        if (v18)
        {
          long long v19 = v18;
          uint64_t v20 = swift_allocObject();
          swift_unknownObjectWeakInit();
          uint64_t v21 = swift_allocObject();
          *(void *)(v21 + 16) = v20;
          *(void *)(v21 + 24) = v19;
          swift_retain();
          id v22 = v19;
          onNextMainRunLoop(do:)();

          swift_release();
          swift_release();
        }
      }
      return;
    case 3:
      return;
    default:
      outlined destroy of UIKitInspectorV3Bridge<TabItem.RootView>.PresentationKind((uint64_t)v45);
LABEL_3:
      uint64_t v6 = v1 + direct field offset for UIKitInspectorV3Bridge.lastPopoverPresentation;
      swift_beginAccess();
      _s7SwiftUI19NavigationAuthorityVSgWOcTm_2(v6, (uint64_t)&v38, &lazy cache variable for type metadata for PopoverPresentation?, (uint64_t)&type metadata for PopoverPresentation);
      if (!(void)v38)
      {
        _s7SwiftUI16PreferenceValuesV5ValueVy_AA019PresentationOptionsC0VGWOhTm_0((uint64_t)&v38, &lazy cache variable for type metadata for PopoverPresentation?, (uint64_t)&type metadata for PopoverPresentation, MEMORY[0x1E4FBB718]);
        return;
      }
      long long v48 = v42;
      long long v49 = v43;
      v50[0] = v44[0];
      *(void *)((char *)v50 + 14) = *(void *)((char *)v44 + 14);
      v45[0] = v38;
      v45[1] = v39;
      long long v46 = v40;
      long long v47 = v41;
      int64_t v7 = *(void **)(v1 + direct field offset for UIKitInspectorV3Bridge.presentedVC);
      if (!v7) {
        goto LABEL_20;
      }
      id v8 = v7;
      id v9 = objc_msgSend(v8, sel_presentationController);
      if (v9)
      {
        unint64_t v10 = v9;
        if (specialized UIKitInspectorV3Bridge.popoverCanPresent(popover:)((uint64_t)v45))
        {
          uint64_t v11 = swift_allocObject();
          swift_unknownObjectWeakInit();
          outlined init with copy of PopoverPresentation((uint64_t)v45, (uint64_t)&v38);
          uint64_t v12 = swift_allocObject();
          long long v13 = v43;
          *(_OWORD *)(v12 + 88) = v42;
          *(_OWORD *)(v12 + 104) = v13;
          *(_OWORD *)(v12 + 120) = v44[0];
          long long v14 = v39;
          *(_OWORD *)(v12 + 24) = v38;
          *(_OWORD *)(v12 + 40) = v14;
          long long v15 = v41;
          *(_OWORD *)(v12 + 56) = v40;
          *(void *)(v12 + 16) = v11;
          *(void *)(v12 + 134) = *(void *)((char *)v44 + 14);
          *(_OWORD *)(v12 + 72) = v15;
          *(void *)(v12 + 144) = v10;
          swift_retain();
          id v16 = v10;
          static Update.enqueueAction(_:)();

          swift_release();
          outlined destroy of PopoverPresentation((uint64_t)v45);
          swift_release();
          return;
        }
        static Log.presentation.getter();
        uint64_t v23 = type metadata accessor for Logger();
        uint64_t v24 = *(void *)(v23 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48))(v4, 1, v23) == 1)
        {
          _s2os6LoggerVSgWOhTm_0((uint64_t)v4, (unint64_t *)&lazy cache variable for type metadata for Logger?, MEMORY[0x1E4FBD360]);
        }
        else
        {
          id v25 = v8;
          long long v26 = Logger.logObject.getter();
          os_log_type_t v27 = static os_log_type_t.default.getter();
          int v36 = v27;
          if (os_log_type_enabled(v26, v27))
          {
            uint64_t v35 = v24;
            long long v28 = (uint8_t *)swift_slowAlloc();
            uint64_t v37 = (void *)swift_slowAlloc();
            *(void *)&long long v38 = v25;
            uint64_t v33 = v28;
            uint64_t v34 = v26;
            *(_DWORD *)long long v28 = 138412290;
            uint64_t v32 = v28 + 4;
            id v29 = v25;
            long long v26 = v34;
            uint64_t v24 = v35;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            *uint64_t v37 = v7;

            long long v30 = v33;
            _os_log_impl(&dword_1872C6000, v26, (os_log_type_t)v36, "Dismissing popover for pc %@ due to scrolling out of bounds", v33, 0xCu);
            type metadata accessor for PresentationSizing?(0, (unint64_t *)&lazy cache variable for type metadata for NSObject?, (uint64_t)&lazy cache variable for type metadata for NSObject, 0x1E4FBA8A8, (void (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for NSObject);
            uint64_t v31 = v37;
            swift_arrayDestroy();
            MEMORY[0x18C119C60](v31, -1, -1);
            MEMORY[0x18C119C60](v30, -1, -1);
          }
          else
          {
          }
          (*(void (**)(char *, uint64_t))(v24 + 8))(v4, v23);
        }
        specialized UIKitInspectorV3Bridge.dismissAndReset(viewController:)(v8);

LABEL_20:
        outlined destroy of PopoverPresentation((uint64_t)v45);
      }
      else
      {
        outlined destroy of PopoverPresentation((uint64_t)v45);
      }
      return;
  }
}

Swift::Void __swiftcall UIKitNavigationController.pushViewController(_:animated:)(UIViewController *_, Swift::Bool animated)
{
  uint64_t v3 = v2;
  type metadata accessor for _UIHostingView<AnyView>(0, &lazy cache variable for type metadata for NavigationStackHostingController<AnyView>, MEMORY[0x1E4F41618], MEMORY[0x1E4F41610], (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for NavigationStackHostingController);
  if ([(UIViewController *)_ isKindOfClass:swift_getObjCClassFromMetadata()])
  {
    v37.receiver = v2;
    v37.super_class = (Class)type metadata accessor for UIKitNavigationController();
    [(UIViewController *)&v37 pushViewController:_ animated:animated];
    return;
  }
  uint64_t v6 = (long long *)&v2[OBJC_IVAR____TtC7SwiftUI25UIKitNavigationController_platformNavigationPresentationStrategy];
  swift_beginAccess();
  outlined init with copy of _PresentationTransitionOutputs.Content(v6, (uint64_t)&v58);
  if (v59 != 1)
  {
    if (v59)
    {
      outlined init with take of OptionalBinaryInteger(&v58, (uint64_t)__src);
      uint64_t v8 = __src[4];
      __swift_project_boxed_opaque_existential_1(__src, __src[3]);
      (*(void (**)(UIViewController *, Swift::Bool))(v8 + 8))(_, animated);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)__src);
    }
    else
    {
      v38.receiver = v3;
      v38.super_class = (Class)type metadata accessor for UIKitNavigationController();
      [(UIViewController *)&v38 pushViewController:_ animated:animated];
    }
    return;
  }
  uint64_t v7 = (uint64_t)&v3[OBJC_IVAR____TtC7SwiftUI25UIKitNavigationController_navigationAuthority];
  swift_beginAccess();
  _s7SwiftUI19NavigationAuthorityVSgWOcTm_2(v7, (uint64_t)__src, &lazy cache variable for type metadata for NavigationAuthority?, (uint64_t)&type metadata for NavigationAuthority);
  if (__src[1] == 1)
  {
    _s7SwiftUI16PreferenceValuesV5ValueVy_AA019PresentationOptionsC0VGWOhTm_0((uint64_t)__src, &lazy cache variable for type metadata for NavigationAuthority?, (uint64_t)&type metadata for NavigationAuthority, MEMORY[0x1E4FBB718]);
LABEL_13:
    long long v15 = (objc_class *)type metadata accessor for UIKitNavigationController();
    v56.receiver = v3;
    v56.super_class = v15;
    [(UIViewController *)&v56 pushViewController:_ animated:animated];
    return;
  }
  outlined init with take of NavigationAuthority((uint64_t)__src, (uint64_t)v57);
  id v9 = (Swift::UInt *)&v3[OBJC_IVAR____TtC7SwiftUI25UIKitNavigationController_context];
  uint64_t v10 = v3[OBJC_IVAR____TtC7SwiftUI25UIKitNavigationController_context + 8];
  if (v10 == 6) {
    goto LABEL_12;
  }
  Swift::UInt v11 = *v9;
  Swift::UInt v12 = v9[2];
  uint64_t Strong = swift_weakLoadStrong();
  if (!Strong
    || (uint64_t v14 = Strong + 16,
        swift_beginAccess(),
        outlined init with take of NavigationState.StackContent?(v14, (uint64_t)v53, (unint64_t *)&lazy cache variable for type metadata for NavigationState?, (uint64_t)&type metadata for NavigationState), outlined retain of NavigationState?((uint64_t)v53, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))outlined copy of NavigationState?), swift_release(), outlined init with take of NavigationState.StackContent?((uint64_t)v53, (uint64_t)v54, (unint64_t *)&lazy cache variable for type metadata for NavigationState?, (uint64_t)&type metadata for NavigationState), getEnumTag for AccessibilityActionCategory.Category((uint64_t)v54) == 1))
  {
LABEL_12:
    outlined destroy of NavigationAuthority((uint64_t)v57);
    goto LABEL_13;
  }
  long long v46 = v54[6];
  long long v47 = v54[7];
  long long v48 = v54[8];
  __int16 v49 = v55;
  long long v42 = v54[2];
  long long v43 = v54[3];
  long long v44 = v54[4];
  long long v45 = v54[5];
  long long v40 = v54[0];
  long long v41 = v54[1];
  NavigationState.stackContent(for:)(v11, v10, v12, (uint64_t)__dst);
  outlined init with take of NavigationState.StackContent?((uint64_t)__dst, (uint64_t)v51, &lazy cache variable for type metadata for NavigationState.StackContent?, (uint64_t)&type metadata for NavigationState.StackContent);
  outlined init with take of NavigationState.StackContent?((uint64_t)v51, (uint64_t)__src, &lazy cache variable for type metadata for NavigationState.StackContent?, (uint64_t)&type metadata for NavigationState.StackContent);
  if (_s7SwiftUI15NavigationStateV12StackContentVSgWOgTm((uint64_t)__src) == 1)
  {
    outlined destroy of NavigationAuthority((uint64_t)v57);
    outlined retain of NavigationState?((uint64_t)v53, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))outlined consume of NavigationState?);
    goto LABEL_13;
  }
  id v16 = objc_msgSend(v3, sel_topViewController);
  if (v16)
  {
    long long v17 = v16;
    uint64_t v18 = swift_dynamicCastClass();
    if (!v18)
    {
      uint64_t v21 = MEMORY[0x1E4FBC860];
      goto LABEL_22;
    }
    long long v19 = *(void **)(v18 + direct field offset for UIHostingController.toolbarBridge);
    uint64_t v20 = v19;

    if (v19)
    {
      uint64_t v21 = *(void *)&v20[direct field offset for ToolbarBridge.navigationAdaptor];
      swift_bridgeObjectRetain();
      long long v17 = v20;
LABEL_22:

      goto LABEL_23;
    }
  }
  uint64_t v21 = MEMORY[0x1E4FBC860];
LABEL_23:
  id v22 = _;
  char v23 = static Edge.Set.all.getter();
  uint64_t v39 = 0;
  Transaction.disablesAnimations.setter();
  uint64_t v36 = AGMakeUniqueID();
  memcpy(__dst, __src, sizeof(__dst));
  uint64_t v24 = NavigationState.StackContent.topKey.getter();
  unsigned __int8 v26 = v25;
  uint64_t v35 = v27;
  swift_retain();
  id v28 = objc_msgSend(v3, sel_viewControllers);
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIViewController);
  unint64_t v29 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v29 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v30 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v30 = *(void *)((v29 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  swift_bridgeObjectRelease();
  uint64_t v31 = v26;
  type metadata accessor for AnyNavigationLinkPresentedViewStorage<ModifiedContent<ModifiedContent<GenericViewControllerRepresentable, NavigationItemAdaptorModifier>, _SafeAreaRegionsIgnoringLayout>>();
  uint64_t v32 = swift_allocObject();
  *(void *)(v32 + 16) = v22;
  *(void *)(v32 + 24) = v21;
  *(void *)(v32 + 32) = -1;
  *(unsigned char *)(v32 + 40) = v23;
  uint64_t v33 = v22;
  swift_bridgeObjectRetain();
  char v34 = Transaction.disablesAnimations.getter();
  swift_release();
  *(void *)__dst = v32;
  *(void *)&__dst[8] = v30;
  *(void *)&__dst[16] = 0;
  *(void *)&__dst[24] = 0;
  *(void *)&__dst[32] = 1;
  *(void *)&__dst[40] = v36;
  *(void *)&__dst[48] = destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
  *(void *)&__dst[56] = 0;
  __dst[64] = 18;
  *(void *)&__dst[72] = v24;
  *(void *)&__dst[80] = v31;
  *(void *)&__dst[88] = v35;
  memset(&__dst[96], 0, 24);
  __dst[120] = v34 & 1;
  *(void *)&__dst[128] = 0;
  long long v46 = 0u;
  long long v47 = *(_OWORD *)&__dst[112];
  *(void *)&long long v48 = 0;
  long long v42 = *(_OWORD *)&__dst[32];
  long long v43 = (unint64_t)destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
  long long v44 = *(_OWORD *)&__dst[64];
  long long v45 = *(_OWORD *)&__dst[80];
  long long v40 = *(_OWORD *)__dst;
  long long v41 = 0u;
  NavigationAuthority.enqueueRequest(_:)(&v40);
  outlined retain of NavigationState?((uint64_t)v53, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))outlined consume of NavigationState?);
  swift_bridgeObjectRelease();

  outlined release of NavigationState.StackContent?((uint64_t)v51);
  swift_release();
  outlined destroy of NavigationAuthority((uint64_t)v57);
  outlined release of NavigationRequest((uint64_t)__dst);
}

void UIKitNavigationController.viewWillTransition(to:with:)(void *a1, double a2, double a3)
{
  v16.receiver = v3;
  v16.super_class = (Class)type metadata accessor for UIKitNavigationController();
  objc_msgSendSuper2(&v16, sel_viewWillTransitionToSize_withTransitionCoordinator_, a1, a2, a3);
  *((unsigned char *)v3 + OBJC_IVAR____TtC7SwiftUI25UIKitNavigationController_isTransitioningToSize) = 1;
  uint64_t v14 = (void (*)(uint64_t))destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
  uint64_t v15 = 0;
  uint64_t v10 = MEMORY[0x1E4F143A8];
  uint64_t v11 = 1107296256;
  Swift::UInt v12 = thunk for @escaping @callee_guaranteed (@guaranteed UIViewControllerTransitionCoordinatorContext) -> ();
  long long v13 = &block_descriptor_90_0;
  uint64_t v7 = _Block_copy(&v10);
  uint64_t v8 = swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t v14 = partial apply for closure #2 in UIKitNavigationController.viewWillTransition(to:with:);
  uint64_t v15 = v8;
  uint64_t v10 = MEMORY[0x1E4F143A8];
  uint64_t v11 = 1107296256;
  Swift::UInt v12 = thunk for @escaping @callee_guaranteed (@guaranteed UIViewControllerTransitionCoordinatorContext) -> ();
  long long v13 = &block_descriptor_96;
  id v9 = _Block_copy(&v10);
  swift_release();
  objc_msgSend(a1, sel_animateAlongsideTransition_completion_, v7, v9);
  _Block_release(v9);
  _Block_release(v7);
}

void closure #2 in UIKitNavigationController.viewWillTransition(to:with:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2 + 16;
  swift_beginAccess();
  uint64_t v3 = (unsigned char *)MEMORY[0x18C119DF0](v2);
  if (v3)
  {
    v3[OBJC_IVAR____TtC7SwiftUI25UIKitNavigationController_isTransitioningToSize] = 0;
  }
}

id UIKitNavigationController.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for UIKitNavigationController();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

Swift::Void __swiftcall UIKitTabBarController.viewDidMove(to:shouldAppearOrDisappear:)(UIWindow_optional *to, Swift::Bool shouldAppearOrDisappear)
{
  uint64_t v3 = v2;
  v11.receiver = v3;
  v11.super_class = (Class)swift_getObjectType();
  [(UIWindow_optional *)&v11 viewDidMoveToWindow:to shouldAppearOrDisappear:shouldAppearOrDisappear];
  uint64_t v6 = OBJC_IVAR____TtC7SwiftUI21UIKitTabBarController_popoverBridge;
  uint64_t v7 = *(char **)&v3[OBJC_IVAR____TtC7SwiftUI21UIKitTabBarController_popoverBridge];
  uint64_t v8 = *(void *)&v7[direct field offset for UIKitInspectorV3Bridge.delayedPopoverPreferences];
  if (v8) {
    BOOL v9 = to == 0;
  }
  else {
    BOOL v9 = 1;
  }
  if (!v9)
  {
    swift_bridgeObjectRetain();
    uint64_t v10 = v7;
    specialized UIKitInspectorV3Bridge.preferencesDidChange(_:)(v8);
    swift_bridgeObjectRelease();

    *(void *)(*(void *)&v3[v6] + direct field offset for UIKitInspectorV3Bridge.delayedPopoverPreferences) = 0;
    swift_bridgeObjectRelease();
  }
}

void @objc UIKitTabBarController._observeScrollViewDidScroll(_:)(void *a1, uint64_t a2, void *a3, const char **a4)
{
  v11.receiver = a1;
  v11.super_class = (Class)swift_getObjectType();
  uint64_t v7 = *a4;
  id v8 = a3;
  id v9 = v11.receiver;
  objc_msgSendSuper2(&v11, v7, v8);
  id v10 = v9;
  PlatformBarUpdater.callAsFunction(context:)(0, a1);
}

void @objc UIKitNavigationController.init(nibName:bundle:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v4 = a4;
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

uint64_t type metadata accessor for UIKitTabBarController()
{
  return self;
}

uint64_t getEnumTagSinglePayload for UIKitNavigationController.PlatformNavigationRequestStrategy(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFE && *(unsigned char *)(a1 + 40)) {
    return (*(_DWORD *)a1 + 2147483646);
  }
  unint64_t v3 = *(void *)(a1 + 24);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  unsigned int v4 = v3 + 1;
  unsigned int v5 = v3 - 1;
  if (v4 >= 3) {
    return v5;
  }
  else {
    return 0;
  }
}

ValueMetadata *type metadata accessor for UIKitNavigationController.PlatformNavigationRequestStrategy()
{
  return &type metadata for UIKitNavigationController.PlatformNavigationRequestStrategy;
}

id specialized closure #1 in UIHostingController.configurePreferredTransition(pushingFrom:enablePreemption:)(uint64_t a1, uint64_t a2, uint64_t a3, char *a4)
{
  uint64_t v6 = a2 + 16;
  swift_beginAccess();
  uint64_t v7 = MEMORY[0x18C119DF0](v6);
  if (!v7)
  {
LABEL_7:
    if (!a4) {
      return 0;
    }
LABEL_8:
    id v17 = *(id *)&a4[OBJC_IVAR____TtC7SwiftUI34MatchedTransitionSourceMarkingView_contentView];
    id v18 = v17;
    return v17;
  }
  id v8 = (void *)v7;
  swift_beginAccess();
  id v9 = (void *)MEMORY[0x18C119DF0](a3 + 16);
  if (!v9)
  {

    goto LABEL_7;
  }
  id v10 = v9;
  objc_super v11 = specialized UIHostingController.findSourceMarkingView(previousViewController:fallbackSource:)(v9, a4);
  if (!v11)
  {

    if (!a4) {
      return 0;
    }
    goto LABEL_8;
  }
  Swift::UInt v12 = v11;
  id v13 = objc_msgSend(v8, sel_transitionCoordinator);
  if (v13)
  {
    uint64_t v14 = v13;
    v12[OBJC_IVAR____TtC7SwiftUI34MatchedTransitionSourceMarkingView_isPartOfActiveZoom] = 1;
    MatchedTransitionSourceMarkingView.updateLayerStyle(isZooming:)(0);
    objc_msgSend(v12, sel_setNeedsLayout);
    uint64_t v15 = swift_allocObject();
    *(void *)(v15 + 16) = v12;
    v20[4] = partial apply for closure #1 in closure #1 in UIHostingController.configurePreferredTransition(pushingFrom:enablePreemption:);
    v20[5] = v15;
    v20[0] = MEMORY[0x1E4F143A8];
    v20[1] = 1107296256;
    v20[2] = thunk for @escaping @callee_guaranteed (@guaranteed UIViewControllerTransitionCoordinatorContext) -> ();
    v20[3] = &block_descriptor_79;
    objc_super v16 = _Block_copy(v20);
    Swift::UInt v12 = v12;
    swift_release();
    objc_msgSend(v14, sel_animateAlongsideTransitionInView_animation_completion_, 0, 0, v16);
    swift_unknownObjectRelease();

    _Block_release(v16);
  }
  else
  {
  }
  id v17 = *(id *)&v12[OBJC_IVAR____TtC7SwiftUI34MatchedTransitionSourceMarkingView_contentView];

  return v17;
}

id specialized UIHostingController.findSourceMarkingView(previousViewController:fallbackSource:)(void *a1, void *a2)
{
  unsigned int v5 = *(void **)(v2 + direct field offset for UIHostingController.host);
  type metadata accessor for _UIHostingView<AnyView>(0, (unint64_t *)&lazy cache variable for type metadata for _UIHostingView<AnyView>, MEMORY[0x1E4F41618], MEMORY[0x1E4F41610], (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for _UIHostingView);
  lazy protocol witness table accessor for type _UIHostingView<AnyView> and conformance _UIHostingView<A>();
  id v6 = v5;
  ViewRendererHost.preferenceValue<A>(_:)();

  if (v19 == 1)
  {
    _s7SwiftUI16PreferenceValuesV5ValueVy_AA019PresentationOptionsC0VGWOhTm_0((uint64_t)&v16, (unint64_t *)&lazy cache variable for type metadata for _NavigationTransitionOutputs?, (uint64_t)&type metadata for _NavigationTransitionOutputs, MEMORY[0x1E4FBB718]);
    goto LABEL_8;
  }
  outlined init with copy of _NavigationTransitionOutputs.Content((uint64_t)&v16, (uint64_t)&v15);
  outlined destroy of _NavigationTransitionOutputs((uint64_t)&v16);
  outlined init with take of _NavigationTransitionOutputs.Content((uint64_t)&v15, (uint64_t)&v16);
  if (!v19) {
    goto LABEL_8;
  }
  uint64_t v7 = v16;
  id result = objc_msgSend(a1, sel_view, v17, v18, v19, v20);
  if (result)
  {
    id v9 = result;
    MEMORY[0x1F4188790](result);
    long long v14[2] = v7;
    v14[3] = &v15;
    id v11 = _sSo6UIViewC7SwiftUIE20firstDescendantWhereyABSgSbABXEF05_sSo6a2C7B103UIE15firstDescendant6ofType9predicatexSgxm_SbxXEtlFSbABXEfU_AC34MatchedTransitionSourceMarkingViewC_Tg5xSbRi_zRi0_zlyAC0stuvW0CIsgnd_Tf1cn_nTf4ng_n(v10, (uint64_t (*)(uint64_t *))closure #1 in UIView._findMatchedTransitionSource<A>(id:in:)specialized partial apply, (uint64_t)v14);
    type metadata accessor for MatchedTransitionSourceMarkingView();
    uint64_t v12 = swift_dynamicCastClass();

    if (v12)
    {
      outlined destroy of AnyHashable((uint64_t)&v15);
      return (id)v12;
    }

    outlined destroy of AnyHashable((uint64_t)&v15);
LABEL_8:
    id v13 = a2;
    return a2;
  }
  __break(1u);
  return result;
}

uint64_t specialized UIHostingController.configureBackgroundForZoom()()
{
  uint64_t v1 = v0;
  static Semantics.v6_2.getter();
  uint64_t result = isLinkedOnOrAfter(_:)();
  if (result)
  {
    uint64_t v3 = direct field offset for UIHostingController.host;
    unsigned int v4 = *(void **)(v0 + direct field offset for UIHostingController.host);
    *((unsigned char *)v4 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v4) + 0x1C0)) = 1;
    unsigned int v5 = v4;
    specialized _UIHostingView.updateBackgroundColor()();

    MEMORY[0x1F4188790](v6);
    static Update.ensure<A>(_:)();
    if (v16 >> 62 == 1)
    {
      swift_retain();
      swift_retain();
      outlined copy of ContainerBackgroundValue.Content(v15, v16);
      swift_retain();
      swift_retain();
      swift_retain();
      swift_release();
      uint64_t v7 = ShapeStyle.fallbackColor(in:level:)();
      swift_release();
      outlined consume of ContainerBackgroundValue.Content(v15, v16);
      swift_release();
      swift_release();
      swift_release();
      if (v7)
      {
        id v8 = *(void **)(v1 + v3);
        type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIColor);
        id v9 = v8;
        uint64_t v10 = swift_retain();
        id v11 = UIColor.init(_:)(v10);
        uint64_t v12 = *(void *)((*MEMORY[0x1E4FBC8C8] & *v9) + 0x1C8);
        id v13 = *(void **)((char *)v9 + v12);
        *(void *)((char *)v9 + v12) = v11;
        id v14 = v11;

        specialized _UIHostingView.updateBackgroundColor()();
        outlined consume of ContainerBackgroundValue.Content(v15, v16);
        swift_release();
      }
      else
      {
        outlined consume of ContainerBackgroundValue.Content(v15, v16);
      }
      swift_release();
      swift_release();
    }
    else
    {
      outlined consume of ContainerBackgroundValue.Content(v15, v16);
      swift_release();
      swift_release();
    }
    return swift_release();
  }
  return result;
}

double specialized closure #1 in UIHostingController.configureBackgroundForZoom()@<D0>(uint64_t a1@<X8>)
{
  swift_retain();
  GraphHost.preferenceValues()();
  swift_release();
  PreferenceValues.subscript.getter();
  swift_bridgeObjectRelease();
  *(_OWORD *)a1 = v3;
  *(unsigned char *)(a1 + 16) = v4;
  double result = *(double *)&v5;
  *(_OWORD *)(a1 + 24) = v5;
  *(void *)(a1 + 40) = v6;
  return result;
}

id specialized UIKitInspectorV3Bridge.popoverPresentationDelegate.getter()
{
  uint64_t v1 = direct field offset for UIKitInspectorV3Bridge.$__lazy_storage_$_popoverPresentationDelegate;
  uint64_t v2 = *(void **)(v0 + direct field offset for UIKitInspectorV3Bridge.$__lazy_storage_$_popoverPresentationDelegate);
  if (v2)
  {
    id v3 = *(id *)(v0 + direct field offset for UIKitInspectorV3Bridge.$__lazy_storage_$_popoverPresentationDelegate);
  }
  else
  {
    char v4 = (objc_class *)type metadata accessor for PopoverPresentationDelegate();
    long long v5 = objc_allocWithZone(v4);
    v5[OBJC_IVAR____TtC7SwiftUI27PopoverPresentationDelegate_isLayoutPreventionActive] = 0;
    *(void *)&v5[OBJC_IVAR____TtC7SwiftUI27PopoverPresentationDelegate_delegate + 8] = &protocol witness table for UIKitInspectorV3Bridge<A>;
    swift_unknownObjectWeakInit();
    v10.receiver = v5;
    v10.super_class = v4;
    id v6 = objc_msgSendSuper2(&v10, sel_init);
    uint64_t v7 = *(void **)(v0 + v1);
    *(void *)(v0 + v1) = v6;
    id v3 = v6;

    uint64_t v2 = 0;
  }
  id v8 = v2;
  return v3;
}

uint64_t specialized UIKitInspectorV3Bridge.reset()()
{
  uint64_t v1 = v0;
  *(void *)(v0 + direct field offset for UIKitInspectorV3Bridge.activeInspectorAnchor) = 0;
  swift_release();
  uint64_t v2 = direct field offset for UIKitInspectorV3Bridge.presentedVC;
  id v3 = *(char **)(v0 + direct field offset for UIKitInspectorV3Bridge.presentedVC);
  if (v3)
  {
    char v4 = *(void **)&v3[direct field offset for UIHostingController.host];
    *(void *)&long long v12 = 0;
    BYTE8(v12) = 1;
    type metadata accessor for _UIHostingView<AnyView>(0, (unint64_t *)&lazy cache variable for type metadata for _UIHostingView<AnyView>, MEMORY[0x1E4F41618], MEMORY[0x1E4F41610], (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for _UIHostingView);
    lazy protocol witness table accessor for type _UIHostingView<AnyView> and conformance _UIHostingView<A>();
    id v5 = v4;
    ViewRendererHost.render(interval:updateDisplayList:targetTimestamp:)();

    id v3 = *(char **)(v0 + v2);
  }
  *(void *)(v0 + v2) = 0;

  id v6 = (void *)(v0 + direct field offset for UIKitInspectorV3Bridge.lastAnchorValues);
  swift_beginAccess();
  uint64_t v7 = MEMORY[0x1E4FBC868];
  *id v6 = MEMORY[0x1E4FBC868];
  swift_bridgeObjectRelease();
  id v8 = (void *)(v1 + direct field offset for UIKitInspectorV3Bridge.lastInspectorValues);
  swift_beginAccess();
  *id v8 = v7;
  swift_bridgeObjectRelease();
  long long v17 = 0u;
  memset(v18, 0, sizeof(v18));
  long long v15 = 0u;
  long long v16 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  long long v12 = 0u;
  uint64_t v9 = v1 + direct field offset for UIKitInspectorV3Bridge.lastPopoverPresentation;
  swift_beginAccess();
  outlined assign with take of PopoverPresentation?((uint64_t)&v12, v9, &lazy cache variable for type metadata for PopoverPresentation?, (uint64_t)&type metadata for PopoverPresentation);
  swift_endAccess();
  *(void *)&long long v14 = 0;
  long long v12 = 0u;
  long long v13 = 0u;
  BYTE8(v14) = 3;
  uint64_t v10 = v1 + direct field offset for UIKitInspectorV3Bridge.activePresentation;
  swift_beginAccess();
  outlined assign with take of UIKitInspectorV3Bridge<TabItem.RootView>.PresentationKind((uint64_t)&v12, v10);
  uint64_t result = swift_endAccess();
  *(unsigned char *)(v1 + direct field offset for UIKitInspectorV3Bridge.dismissingReason) = 2;
  return result;
}

uint64_t specialized UIKitInspectorV3Bridge.updatePopoverIfNeeded(_:presentationOptionsPreference:backgroundPreference:)(uint64_t a1, int a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v5 = v4;
  _s2os6LoggerVSgMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for Logger?, MEMORY[0x1E4FBD360], MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v10 - 8);
  long long v12 = (char *)v58 - v11;
  uint64_t v13 = *(void *)(a1 + 16);
  if (v13)
  {
    outlined init with copy of PopoverPresentation(a1 + 120 * v13 - 88, (uint64_t)v77);
    if (v13 != 1)
    {
LABEL_24:
      static Log.presentation.getter();
      uint64_t v31 = type metadata accessor for Logger();
      uint64_t v32 = *(void *)(v31 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v32 + 48))(v12, 1, v31) == 1)
      {
        _s2os6LoggerVSgWOhTm_0((uint64_t)v12, (unint64_t *)&lazy cache variable for type metadata for Logger?, MEMORY[0x1E4FBD360]);
      }
      else
      {
        uint64_t v33 = Logger.logObject.getter();
        os_log_type_t v34 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v33, v34))
        {
          uint64_t v35 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v35 = 0;
          _os_log_impl(&dword_1872C6000, v33, v34, "Can't present popover, only going to try to dismiss", v35, 2u);
          MEMORY[0x18C119C60](v35, -1, -1);
        }

        (*(void (**)(char *, uint64_t))(v32 + 8))(v12, v31);
      }
      uint64_t v36 = v5 + direct field offset for UIKitInspectorV3Bridge.activePresentation;
      swift_beginAccess();
      outlined init with copy of UIKitInspectorV3Bridge<TabItem.RootView>.PresentationKind(v36, (uint64_t)&v72);
      outlined init with copy of UIKitInspectorV3Bridge<TabItem.RootView>.PresentationKind((uint64_t)&v72, (uint64_t)&v65);
      char v37 = 1;
      switch(BYTE8(v67))
      {
        case 1:
        case 3:
          goto LABEL_31;
        case 2:
          break;
        default:
          outlined destroy of UIKitInspectorV3Bridge<TabItem.RootView>.PresentationKind((uint64_t)&v65);
LABEL_31:
          char v37 = 0;
          break;
      }
      outlined destroy of UIKitInspectorV3Bridge<TabItem.RootView>.PresentationKind((uint64_t)&v72);
      if ((v37 & 1) == 0 && !*(void *)&v77[0])
      {
        objc_super v38 = *(void **)(v5 + direct field offset for UIKitInspectorV3Bridge.presentedVC);
        if (v38)
        {
          id v39 = v38;
          specialized UIKitInspectorV3Bridge.dismissAndReset(viewController:)(v39);
        }
      }
      goto LABEL_60;
    }
  }
  else
  {
    memset(v77, 0, 118);
  }
  uint64_t v14 = v5 + direct field offset for UIKitInspectorV3Bridge.activePresentation;
  swift_beginAccess();
  outlined init with copy of UIKitInspectorV3Bridge<TabItem.RootView>.PresentationKind(v14, (uint64_t)&v72);
  outlined init with copy of UIKitInspectorV3Bridge<TabItem.RootView>.PresentationKind((uint64_t)&v72, (uint64_t)&v65);
  switch(BYTE8(v67))
  {
    case 1:
    case 3:
      goto LABEL_7;
    case 2:
      outlined destroy of UIKitInspectorV3Bridge<TabItem.RootView>.PresentationKind((uint64_t)&v72);
      goto LABEL_24;
    default:
      outlined destroy of UIKitInspectorV3Bridge<TabItem.RootView>.PresentationKind((uint64_t)&v65);
LABEL_7:
      outlined destroy of UIKitInspectorV3Bridge<TabItem.RootView>.PresentationKind((uint64_t)&v72);
      id v15 = (id)MEMORY[0x18C119DF0](v5 + direct field offset for UIKitInspectorV3Bridge.presenterOverride);
      if (v15) {
        goto LABEL_12;
      }
      uint64_t v16 = a4;
      uint64_t v17 = v5 + direct field offset for UIKitInspectorV3Bridge.host;
      uint64_t v18 = (void *)MEMORY[0x18C119DF0](v5 + direct field offset for UIKitInspectorV3Bridge.host);
      if (!v18) {
        goto LABEL_63;
      }
      uint64_t v19 = v18;
      id v15 = (id)MEMORY[0x18C119DF0]((char *)v18 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v18) + 0xC0));

      a4 = v16;
      if (v15) {
        goto LABEL_12;
      }
      uint64_t v20 = (void *)MEMORY[0x18C119DF0](v17);
      if (!v20) {
        goto LABEL_64;
      }
      uint64_t v21 = v20;
      id v15 = objc_msgSend(v20, sel__viewControllerForAncestor);

      if (!v15) {
        goto LABEL_24;
      }
LABEL_12:
      uint64_t v22 = direct field offset for UIKitInspectorV3Bridge.popoverSeed;
      int v23 = *(_DWORD *)(v5 + direct field offset for UIKitInspectorV3Bridge.popoverSeed);
      if (v23 != -1 && a2 != -1 && v23 == a2)
      {
        id v28 = (void *)MEMORY[0x18C119DF0](v5 + direct field offset for UIKitInspectorV3Bridge.host);
        if (!v28)
        {
          __break(1u);
LABEL_63:
          __break(1u);
LABEL_64:
          __break(1u);
          goto LABEL_65;
        }
        unint64_t v29 = v28;
        uint64_t v30 = (void *)MEMORY[0x18C119DF0]((char *)v28 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v28) + 0xC0));

LABEL_60:
        uint64_t v53 = (uint64_t (*)(void, uint64_t))MEMORY[0x1E4FBB718];
        uint64_t v52 = v77;
        return _s7SwiftUI16PreferenceValuesV5ValueVy_AA019PresentationOptionsC0VGWOhTm_0((uint64_t)v52, &lazy cache variable for type metadata for PopoverPresentation?, (uint64_t)&type metadata for PopoverPresentation, v53);
      }
      unsigned __int8 v26 = (void *)(v5 + direct field offset for UIKitInspectorV3Bridge.lastPopoverPresentation);
      swift_beginAccess();
      if (*v26)
      {
        uint64_t v27 = v26[2];
        swift_retain();
      }
      else
      {
        uint64_t v27 = 0;
      }
      uint64_t v60 = a4;
      _s7SwiftUI19NavigationAuthorityVSgWOcTm_2((uint64_t)v77, (uint64_t)&v72, &lazy cache variable for type metadata for PopoverPresentation?, (uint64_t)&type metadata for PopoverPresentation);
      uint64_t v59 = a3;
      if ((void)v72)
      {
        uint64_t v40 = v73;
        swift_retain();
        outlined destroy of PopoverPresentation((uint64_t)&v72);
        if (v27)
        {
          if (v40)
          {
            _s2os6LoggerVSgMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for CGRect?, (uint64_t (*)(uint64_t))type metadata accessor for CGRect, MEMORY[0x1E4FBB718]);
            v58[1] = v41;
            lazy protocol witness table accessor for type CGRect? and conformance <A> A?();
            swift_retain();
            char v42 = static Anchor<A>.== infix(_:_:)();
            swift_release_n();
            swift_release();
            char v43 = v42 ^ 1;
            goto LABEL_46;
          }
          goto LABEL_44;
        }
        if (v40)
        {
LABEL_44:
          swift_release();
          char v43 = 1;
          goto LABEL_46;
        }
      }
      else
      {
        _s7SwiftUI16PreferenceValuesV5ValueVy_AA019PresentationOptionsC0VGWOhTm_0((uint64_t)&v72, &lazy cache variable for type metadata for PopoverPresentation?, (uint64_t)&type metadata for PopoverPresentation, MEMORY[0x1E4FBB718]);
        if (v27) {
          goto LABEL_44;
        }
      }
      char v43 = 0;
LABEL_46:
      char v44 = v60;
      *(_DWORD *)(v5 + v22) = a2;
      swift_beginAccess();
      outlined assign with copy of PopoverPresentation?((uint64_t)v77, (uint64_t)v26);
      swift_endAccess();
      long long v45 = *(void **)(v5 + direct field offset for UIKitInspectorV3Bridge.presentedVC);
      if (!v45)
      {
        _s7SwiftUI19NavigationAuthorityVSgWOcTm_2((uint64_t)v77, (uint64_t)&v65, &lazy cache variable for type metadata for PopoverPresentation?, (uint64_t)&type metadata for PopoverPresentation);
        if (!(void)v65)
        {

          uint64_t v51 = (uint64_t (*)(void, uint64_t))MEMORY[0x1E4FBB718];
          _s7SwiftUI16PreferenceValuesV5ValueVy_AA019PresentationOptionsC0VGWOhTm_0((uint64_t)v77, &lazy cache variable for type metadata for PopoverPresentation?, (uint64_t)&type metadata for PopoverPresentation, MEMORY[0x1E4FBB718]);
          uint64_t v52 = &v65;
          uint64_t v53 = v51;
          return _s7SwiftUI16PreferenceValuesV5ValueVy_AA019PresentationOptionsC0VGWOhTm_0((uint64_t)v52, &lazy cache variable for type metadata for PopoverPresentation?, (uint64_t)&type metadata for PopoverPresentation, v53);
        }
        v75[1] = v69;
        v75[2] = v70;
        v76[0] = *(_OWORD *)v71;
        *(void *)((char *)v76 + 14) = *(void *)&v71[14];
        long long v72 = v65;
        long long v73 = v66;
        long long v74 = v67;
        v75[0] = v68;
        specialized UIKitInspectorV3Bridge.presentNewPopover(presentation:presenter:options:wantsTransparentBackground:)((uint64_t)&v72, v15, v59, v44 & 1);

        outlined destroy of PopoverPresentation((uint64_t)&v72);
        goto LABEL_60;
      }
      outlined init with copy of UIKitInspectorV3Bridge<TabItem.RootView>.PresentationKind(v14, (uint64_t)&v65);
      if (BYTE8(v67))
      {
        if (BYTE8(v67) == 1)
        {
          int v47 = v65;
          _s7SwiftUI19NavigationAuthorityVSgWOcTm_2((uint64_t)v77, (uint64_t)&v72, &lazy cache variable for type metadata for PopoverPresentation?, (uint64_t)&type metadata for PopoverPresentation);
          uint64_t v48 = v72;
          if ((void)v72)
          {
            uint64_t v49 = HIDWORD(v74);
            id v50 = v45;
            outlined destroy of PopoverPresentation((uint64_t)&v72);
          }
          else
          {
            id v56 = v45;
            _s7SwiftUI16PreferenceValuesV5ValueVy_AA019PresentationOptionsC0VGWOhTm_0((uint64_t)&v72, &lazy cache variable for type metadata for PopoverPresentation?, (uint64_t)&type metadata for PopoverPresentation, MEMORY[0x1E4FBB718]);
            uint64_t v49 = 0;
          }
          LOBYTE(v72) = v48 == 0;
          specialized compareAndUpdate #1 <A><A1>(_:_:presented:) in UIKitInspectorV3Bridge.updatePopoverIfNeeded(_:presentationOptionsPreference:backgroundPreference:)(v47, v49 | ((unint64_t)(v48 == 0) << 32), (char *)v45, v5, (uint64_t)v77, v43 & 1, v15, (uint64_t)v59, v44 & 1);

          goto LABEL_60;
        }
LABEL_65:
        _assertionFailure(_:_:file:line:flags:)();
        __break(1u);
        JUMPOUT(0x187BA8EDCLL);
      }
      v63[0] = v65;
      v63[1] = v66;
      uint64_t v64 = v67;
      _s7SwiftUI19NavigationAuthorityVSgWOcTm_2((uint64_t)v77, (uint64_t)&v72, &lazy cache variable for type metadata for PopoverPresentation?, (uint64_t)&type metadata for PopoverPresentation);
      if ((void)v72)
      {
        _s7SwiftUI19NavigationAuthorityVSgWOcTm_2((uint64_t)v75, (uint64_t)v61, (unint64_t *)&lazy cache variable for type metadata for AnyHashable?, MEMORY[0x1E4FBB960]);
        id v46 = v45;
        outlined destroy of PopoverPresentation((uint64_t)&v72);
      }
      else
      {
        id v54 = v45;
        _s7SwiftUI16PreferenceValuesV5ValueVy_AA019PresentationOptionsC0VGWOhTm_0((uint64_t)&v72, &lazy cache variable for type metadata for PopoverPresentation?, (uint64_t)&type metadata for PopoverPresentation, MEMORY[0x1E4FBB718]);
        memset(v61, 0, sizeof(v61));
        uint64_t v62 = 0;
      }
      specialized compareAndUpdate #1 <A><A1>(_:_:presented:) in UIKitInspectorV3Bridge.updatePopoverIfNeeded(_:presentationOptionsPreference:backgroundPreference:)((uint64_t)v63, (uint64_t)v61, (char *)v45, v5, (uint64_t)v77, v43 & 1, v15, (uint64_t)v59, v44 & 1);

      __int16 v55 = (uint64_t (*)(void, uint64_t))MEMORY[0x1E4FBB718];
      _s7SwiftUI16PreferenceValuesV5ValueVy_AA019PresentationOptionsC0VGWOhTm_0((uint64_t)v61, (unint64_t *)&lazy cache variable for type metadata for AnyHashable?, MEMORY[0x1E4FBB960], MEMORY[0x1E4FBB718]);
      outlined destroy of AnyHashable((uint64_t)v63);
      uint64_t v52 = v77;
      uint64_t v53 = v55;
      return _s7SwiftUI16PreferenceValuesV5ValueVy_AA019PresentationOptionsC0VGWOhTm_0((uint64_t)v52, &lazy cache variable for type metadata for PopoverPresentation?, (uint64_t)&type metadata for PopoverPresentation, v53);
  }
}

uint64_t outlined init with copy of PopoverPresentation(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t outlined init with copy of UIKitInspectorV3Bridge<TabItem.RootView>.PresentationKind(uint64_t a1, uint64_t a2)
{
  type metadata accessor for UIKitInspectorV3Bridge<TabItem.RootView>.PresentationKind(0, &lazy cache variable for type metadata for UIKitInspectorV3Bridge<TabItem.RootView>.PresentationKind, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))type metadata accessor for UIKitInspectorV3Bridge.PresentationKind);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of UIKitInspectorV3Bridge<TabItem.RootView>.PresentationKind(uint64_t a1)
{
  type metadata accessor for UIKitInspectorV3Bridge<TabItem.RootView>.PresentationKind(0, &lazy cache variable for type metadata for UIKitInspectorV3Bridge<TabItem.RootView>.PresentationKind, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))type metadata accessor for UIKitInspectorV3Bridge.PresentationKind);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void specialized closure #2 in UIKitInspectorV3Bridge.updateAnchor()(uint64_t a1, void *a2)
{
  uint64_t v3 = a1 + 16;
  swift_beginAccess();
  uint64_t v4 = MEMORY[0x18C119DF0](v3);
  if (v4)
  {
    uint64_t v5 = (char *)v4;
    MEMORY[0x18C113CA0]();
    if (*(void *)&v5[direct field offset for UIKitInspectorV3Bridge.activeInspectorAnchor])
    {
      swift_retain();
      id v6 = specialized UIKitInspectorV3Bridge.popoverPresentationDelegate.getter();
      specialized PopoverPresentationDelegate.updateAnchor(_:presentationController:)(a2);
      swift_release();
    }
    static Update.end()();
  }
}

void specialized UIKitInspectorV3Bridge.dismissAndReset(viewController:)(void *a1)
{
  _s2os6LoggerVSgMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for Logger?, MEMORY[0x1E4FBD360], MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)&v26 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v6 = MEMORY[0x1F4188790](v5);
  id v8 = (char *)&v26 - v7;
  if (objc_msgSend(a1, sel_isBeingDismissed, v6))
  {
    static Log.presentation.getter();
    uint64_t v9 = type metadata accessor for Logger();
    uint64_t v10 = *(void *)(v9 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    {
      _s2os6LoggerVSgWOhTm_0((uint64_t)v8, (unint64_t *)&lazy cache variable for type metadata for Logger?, MEMORY[0x1E4FBD360]);
    }
    else
    {
      id v13 = a1;
      uint64_t v14 = Logger.logObject.getter();
      os_log_type_t v15 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v14, v15))
      {
        uint64_t v16 = (uint8_t *)swift_slowAlloc();
        unsigned __int8 v26 = (void *)swift_slowAlloc();
        uint64_t v27 = v16;
        aBlock[0] = v13;
        *(_DWORD *)uint64_t v16 = 138412290;
        id v17 = v13;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        uint64_t v18 = v26;
        *unsigned __int8 v26 = v13;

        uint64_t v19 = v27;
        _os_log_impl(&dword_1872C6000, v14, v15, "View controller %@ is already dismissing, not going to dismiss again", v27, 0xCu);
        type metadata accessor for PresentationSizing?(0, (unint64_t *)&lazy cache variable for type metadata for NSObject?, (uint64_t)&lazy cache variable for type metadata for NSObject, 0x1E4FBA8A8, (void (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for NSObject);
        swift_arrayDestroy();
        MEMORY[0x18C119C60](v18, -1, -1);
        MEMORY[0x18C119C60](v19, -1, -1);
      }
      else
      {
      }
      (*(void (**)(char *, uint64_t))(v10 + 8))(v8, v9);
    }
  }
  else
  {
    static Log.presentation.getter();
    uint64_t v11 = type metadata accessor for Logger();
    uint64_t v12 = *(void *)(v11 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v4, 1, v11) == 1)
    {
      _s2os6LoggerVSgWOhTm_0((uint64_t)v4, (unint64_t *)&lazy cache variable for type metadata for Logger?, MEMORY[0x1E4FBD360]);
    }
    else
    {
      uint64_t v20 = Logger.logObject.getter();
      os_log_type_t v21 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v20, v21))
      {
        uint64_t v22 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v22 = 0;
        _os_log_impl(&dword_1872C6000, v20, v21, "Dismissing popover", v22, 2u);
        MEMORY[0x18C119C60](v22, -1, -1);
      }

      (*(void (**)(char *, uint64_t))(v12 + 8))(v4, v11);
    }
    id v23 = objc_msgSend(a1, sel_presentingViewController);
    if (!v23) {
      id v23 = a1;
    }
    uint64_t v24 = swift_allocObject();
    swift_unknownObjectWeakInit();
    aBlock[4] = partial apply for specialized closure #1 in UIKitInspectorV3Bridge.dismissAndReset(viewController:);
    aBlock[5] = v24;
    aBlock[0] = MEMORY[0x1E4F143A8];
    aBlock[1] = 1107296256;
    aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
    aBlock[3] = &block_descriptor_84;
    unsigned __int8 v25 = _Block_copy(aBlock);
    swift_release();
    objc_msgSend(v23, sel_dismissViewControllerAnimated_completion_, 1, v25);
    _Block_release(v25);
  }
}

void specialized closure #1 in UIKitInspectorV3Bridge.updateAnchor()(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4 = a1 + 16;
  swift_beginAccess();
  uint64_t v5 = MEMORY[0x18C119DF0](v4);
  if (v5)
  {
    double v6 = (void *)v5;
    id v7 = specialized UIKitInspectorV3Bridge.popoverPresentationDelegate.getter();
    specialized PopoverPresentationDelegate.updateAnchor(_:presentationController:)(a3);
  }
}

void specialized compareAndUpdate #1 <A><A1>(_:_:presented:) in UIKitInspectorV3Bridge.updatePopoverIfNeeded(_:presentationOptionsPreference:backgroundPreference:)(uint64_t a1, uint64_t a2, char *a3, uint64_t a4, uint64_t a5, char a6, void *a7, uint64_t a8, char a9)
{
  uint64_t v9 = direct field offset for UIKitInspectorV3Bridge.dismissingReason;
  if (*(unsigned char *)(a4 + direct field offset for UIKitInspectorV3Bridge.dismissingReason) == 2)
  {
    outlined init with copy of AnyHashable(a1, (uint64_t)&v36);
    uint64_t v15 = MEMORY[0x1E4FBB960];
    _s7SwiftUI19NavigationAuthorityVSgWOcTm_2((uint64_t)&v36, (uint64_t)&v43, (unint64_t *)&lazy cache variable for type metadata for AnyHashable?, MEMORY[0x1E4FBB960]);
    _s7SwiftUI19NavigationAuthorityVSgWOcTm_2(a2, (uint64_t)&v45[8], (unint64_t *)&lazy cache variable for type metadata for AnyHashable?, v15);
    if (*((void *)&v44 + 1))
    {
      _s7SwiftUI19NavigationAuthorityVSgWOcTm_2((uint64_t)&v43, (uint64_t)v35, (unint64_t *)&lazy cache variable for type metadata for AnyHashable?, MEMORY[0x1E4FBB960]);
      if (*(void *)&v45[32])
      {
        v33[0] = *(_OWORD *)&v45[8];
        v33[1] = *(_OWORD *)&v45[24];
        uint64_t v34 = *(void *)&v45[40];
        char v16 = MEMORY[0x18C1174E0](v35, v33);
        outlined destroy of AnyHashable((uint64_t)v33);
        uint64_t v17 = MEMORY[0x1E4FBB960];
        uint64_t v18 = (uint64_t (*)(void, uint64_t))MEMORY[0x1E4FBB718];
        _s7SwiftUI16PreferenceValuesV5ValueVy_AA019PresentationOptionsC0VGWOhTm_0((uint64_t)&v36, (unint64_t *)&lazy cache variable for type metadata for AnyHashable?, MEMORY[0x1E4FBB960], MEMORY[0x1E4FBB718]);
        outlined destroy of AnyHashable((uint64_t)v35);
        _s7SwiftUI16PreferenceValuesV5ValueVy_AA019PresentationOptionsC0VGWOhTm_0((uint64_t)&v43, (unint64_t *)&lazy cache variable for type metadata for AnyHashable?, v17, v18);
        uint64_t v19 = a3;
        if ((v16 & 1) == 0) {
          goto LABEL_15;
        }
LABEL_8:
        _s7SwiftUI19NavigationAuthorityVSgWOcTm_2(a5, (uint64_t)&v36, &lazy cache variable for type metadata for PopoverPresentation?, (uint64_t)&type metadata for PopoverPresentation);
        if (!(void)v36)
        {
          __break(1u);
          return;
        }
        *(_OWORD *)&v45[32] = v40;
        long long v46 = v41;
        v47[0] = *(_OWORD *)v42;
        *(void *)((char *)v47 + 14) = *(void *)&v42[14];
        long long v43 = v36;
        long long v44 = v37;
        *(_OWORD *)long long v45 = v38;
        *(_OWORD *)&v45[16] = v39;
        uint64_t v20 = v36;
        uint64_t v21 = direct field offset for UIHostingController.host;
        uint64_t v22 = *(void **)&v19[direct field offset for UIHostingController.host];
        id v23 = (void *)MEMORY[0x1E4FBC8C8];
        uint64_t v24 = (void *)((char *)v22 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v22) + 0x60));
        swift_beginAccess();
        *uint64_t v24 = v20;
        swift_retain_n();
        unsigned __int8 v25 = v22;
        swift_release();
        v35[0] = 1;
        type metadata accessor for _UIHostingView<AnyView>(0, (unint64_t *)&lazy cache variable for type metadata for _UIHostingView<AnyView>, MEMORY[0x1E4F41618], MEMORY[0x1E4F41610], (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for _UIHostingView);
        lazy protocol witness table accessor for type _UIHostingView<AnyView> and conformance _UIHostingView<A>();
        ViewRendererHost.invalidateProperties(_:mayDeferUpdate:)();

        swift_release_n();
        if (a6) {
          specialized UIKitInspectorV3Bridge.updateAnchor()();
        }
        unsigned __int8 v26 = *(void **)&v19[v21];
        uint64_t v27 = *(void *)&v47[0];
        uint64_t v28 = *(void *)((char *)v26 + *(void *)((*v23 & *v26) + 0x68));
        uint64_t v29 = *(void *)(v28 + 152);
        *(void *)(v28 + 152) = *((void *)&v46 + 1);
        *(void *)(v28 + 160) = v27;
        swift_retain();
        uint64_t v30 = v26;
        swift_retain();
        outlined consume of EnvironmentValues?(v29);
        if (MEMORY[0x18C119DF0](v28 + 24))
        {
          swift_getObjectType();
          v35[0] = 2;
          ViewRendererHost.invalidateProperties(_:mayDeferUpdate:)();

          swift_unknownObjectRelease();
        }
        else
        {
        }
        goto LABEL_19;
      }
      _s7SwiftUI16PreferenceValuesV5ValueVy_AA019PresentationOptionsC0VGWOhTm_0((uint64_t)&v36, (unint64_t *)&lazy cache variable for type metadata for AnyHashable?, MEMORY[0x1E4FBB960], MEMORY[0x1E4FBB718]);
      outlined destroy of AnyHashable((uint64_t)v35);
    }
    else
    {
      _s7SwiftUI16PreferenceValuesV5ValueVy_AA019PresentationOptionsC0VGWOhTm_0((uint64_t)&v36, (unint64_t *)&lazy cache variable for type metadata for AnyHashable?, MEMORY[0x1E4FBB960], MEMORY[0x1E4FBB718]);
      if (!*(void *)&v45[32])
      {
        _s7SwiftUI16PreferenceValuesV5ValueVy_AA019PresentationOptionsC0VGWOhTm_0((uint64_t)&v43, (unint64_t *)&lazy cache variable for type metadata for AnyHashable?, MEMORY[0x1E4FBB960], MEMORY[0x1E4FBB718]);
        uint64_t v19 = a3;
        goto LABEL_8;
      }
    }
    _s7SwiftUI12ViewIdentityV3key_AA16InspectorStorageV5valuetWOhTm_0((uint64_t)&v43, (uint64_t (*)(void))type metadata accessor for (AnyHashable?, AnyHashable?));
    uint64_t v19 = a3;
LABEL_15:
    _s7SwiftUI19NavigationAuthorityVSgWOcTm_2(a5, (uint64_t)&v36, &lazy cache variable for type metadata for PopoverPresentation?, (uint64_t)&type metadata for PopoverPresentation);
    if (!(void)v36)
    {
      _s7SwiftUI16PreferenceValuesV5ValueVy_AA019PresentationOptionsC0VGWOhTm_0((uint64_t)&v36, &lazy cache variable for type metadata for PopoverPresentation?, (uint64_t)&type metadata for PopoverPresentation, MEMORY[0x1E4FBB718]);
      *(unsigned char *)(a4 + v9) = 1;
      specialized UIKitInspectorV3Bridge.dismissAndReset(viewController:)(v19);
      return;
    }
    *(_OWORD *)&v45[32] = v40;
    long long v46 = v41;
    v47[0] = *(_OWORD *)v42;
    *(void *)((char *)v47 + 14) = *(void *)&v42[14];
    long long v43 = v36;
    long long v44 = v37;
    *(_OWORD *)long long v45 = v38;
    *(_OWORD *)&v45[16] = v39;
    specialized UIKitInspectorV3Bridge.replaceExistingPopover(_:with:presenter:presentationOptions:wantsTransparentBackground:)(v19, (uint64_t)&v43, a7, a8, a9 & 1);
LABEL_19:
    outlined destroy of PopoverPresentation((uint64_t)&v43);
  }
}

void specialized compareAndUpdate #1 <A><A1>(_:_:presented:) in UIKitInspectorV3Bridge.updatePopoverIfNeeded(_:presentationOptionsPreference:backgroundPreference:)(int a1, uint64_t a2, char *a3, uint64_t a4, uint64_t a5, char a6, void *a7, uint64_t a8, char a9)
{
  uint64_t v9 = direct field offset for UIKitInspectorV3Bridge.dismissingReason;
  if (*(unsigned char *)(a4 + direct field offset for UIKitInspectorV3Bridge.dismissingReason) == 2)
  {
    if ((a2 & 0x100000000) != 0 || a2 != a1)
    {
      _s7SwiftUI19NavigationAuthorityVSgWOcTm_2(a5, (uint64_t)&v25, &lazy cache variable for type metadata for PopoverPresentation?, (uint64_t)&type metadata for PopoverPresentation);
      if (!(void)v25)
      {
        _s7SwiftUI16PreferenceValuesV5ValueVy_AA019PresentationOptionsC0VGWOhTm_0((uint64_t)&v25, &lazy cache variable for type metadata for PopoverPresentation?, (uint64_t)&type metadata for PopoverPresentation, MEMORY[0x1E4FBB718]);
        *(unsigned char *)(a4 + v9) = 1;
        specialized UIKitInspectorV3Bridge.dismissAndReset(viewController:)(a3);
        return;
      }
      long long v37 = v30;
      v38[0] = *(_OWORD *)v31;
      long long v32 = v25;
      long long v33 = v26;
      long long v34 = v27;
      *(void *)((char *)v38 + 14) = *(void *)&v31[14];
      long long v35 = v28;
      long long v36 = v29;
      specialized UIKitInspectorV3Bridge.replaceExistingPopover(_:with:presenter:presentationOptions:wantsTransparentBackground:)(a3, (uint64_t)&v32, a7, a8, a9 & 1);
    }
    else
    {
      _s7SwiftUI19NavigationAuthorityVSgWOcTm_2(a5, (uint64_t)&v25, &lazy cache variable for type metadata for PopoverPresentation?, (uint64_t)&type metadata for PopoverPresentation);
      if (!(void)v25)
      {
        __break(1u);
        return;
      }
      long long v37 = v30;
      v38[0] = *(_OWORD *)v31;
      long long v32 = v25;
      long long v33 = v26;
      long long v34 = v27;
      *(void *)((char *)v38 + 14) = *(void *)&v31[14];
      long long v35 = v28;
      long long v36 = v29;
      uint64_t v15 = v25;
      uint64_t v16 = direct field offset for UIHostingController.host;
      uint64_t v17 = *(void **)&a3[direct field offset for UIHostingController.host];
      uint64_t v18 = (void *)((char *)v17 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v17) + 0x60));
      swift_beginAccess();
      *uint64_t v18 = v15;
      swift_retain_n();
      uint64_t v19 = v17;
      swift_release();
      type metadata accessor for _UIHostingView<AnyView>(0, (unint64_t *)&lazy cache variable for type metadata for _UIHostingView<AnyView>, MEMORY[0x1E4F41618], MEMORY[0x1E4F41610], (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for _UIHostingView);
      lazy protocol witness table accessor for type _UIHostingView<AnyView> and conformance _UIHostingView<A>();
      ViewRendererHost.invalidateProperties(_:mayDeferUpdate:)();

      swift_release_n();
      if (a6) {
        specialized UIKitInspectorV3Bridge.updateAnchor()();
      }
      uint64_t v20 = *(void **)&a3[v16];
      uint64_t v21 = *(void *)&v38[0];
      uint64_t v22 = *(void *)((char *)v20 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v20) + 0x68));
      uint64_t v23 = *(void *)(v22 + 152);
      *(void *)(v22 + 152) = *((void *)&v37 + 1);
      *(void *)(v22 + 160) = v21;
      swift_retain();
      uint64_t v24 = v20;
      swift_retain();
      outlined consume of EnvironmentValues?(v23);
      if (MEMORY[0x18C119DF0](v22 + 24))
      {
        swift_getObjectType();
        ViewRendererHost.invalidateProperties(_:mayDeferUpdate:)();

        swift_unknownObjectRelease();
      }
      else
      {
      }
    }
    outlined destroy of PopoverPresentation((uint64_t)&v32);
  }
}

void specialized UIKitInspectorV3Bridge.replaceExistingPopover(_:with:presenter:presentationOptions:wantsTransparentBackground:)(void *a1, uint64_t a2, void *a3, uint64_t a4, char a5)
{
  uint64_t v6 = v5;
  uint64_t v38 = a4;
  _s2os6LoggerVSgMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for Logger?, MEMORY[0x1E4FBD360], MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v11 - 8);
  id v13 = (char *)&v36 - v12;
  static Log.presentation.getter();
  uint64_t v14 = type metadata accessor for Logger();
  uint64_t v15 = *(void *)(v14 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14) == 1)
  {
    _s2os6LoggerVSgWOhTm_0((uint64_t)v13, (unint64_t *)&lazy cache variable for type metadata for Logger?, MEMORY[0x1E4FBD360]);
  }
  else
  {
    long long v36 = a3;
    long long v37 = a1;
    uint64_t v16 = Logger.logObject.getter();
    os_log_type_t v17 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v16, v17))
    {
      char v18 = a5;
      uint64_t v19 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v19 = 0;
      _os_log_impl(&dword_1872C6000, v16, v17, "Replacing existing popover with new one", v19, 2u);
      uint64_t v20 = v19;
      a5 = v18;
      MEMORY[0x18C119C60](v20, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v15 + 8))(v13, v14);
    a3 = v36;
    a1 = v37;
  }
  _s7SwiftUI19NavigationAuthorityVSgWOcTm_2(a2 + 48, (uint64_t)&v40, (unint64_t *)&lazy cache variable for type metadata for AnyHashable?, MEMORY[0x1E4FBB960]);
  if (*((void *)&v41 + 1))
  {
    v50[0] = v40;
    v50[1] = v41;
    uint64_t v51 = v42;
    outlined init with copy of AnyHashable((uint64_t)v50, (uint64_t)v53);
    unsigned __int8 v55 = 0;
    outlined destroy of AnyHashable((uint64_t)v50);
  }
  else
  {
    uint64_t v54 = 0;
    memset(v53, 0, sizeof(v53));
    unsigned __int8 v55 = -1;
  }
  outlined init with copy of PopoverPresentation(a2, (uint64_t)v50);
  if (v55 == 255)
  {
    int v21 = v52;
    outlined destroy of PopoverPresentation((uint64_t)v50);
    v56[0] = v21;
    char v57 = 1;
    outlined destroy of UIKitInspectorV3Bridge<TabItem.RootView>.PresentationKind?((uint64_t)v53, (unint64_t *)&lazy cache variable for type metadata for UIKitInspectorV3Bridge<TabItem.RootView>.PresentationKind?, (uint64_t)&lazy cache variable for type metadata for UIKitInspectorV3Bridge<TabItem.RootView>.PresentationKind, (uint64_t)type metadata accessor for UIKitInspectorV3Bridge.PresentationKind, (void (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UIKitInspectorV3Bridge<TabItem.RootView>.PresentationKind);
  }
  else
  {
    outlined destroy of PopoverPresentation((uint64_t)v50);
    outlined init with take of UIKitInspectorV3Bridge<TabItem.RootView>.PresentationKind((uint64_t)v53, (uint64_t)v56);
  }
  uint64_t v22 = v6 + direct field offset for UIKitInspectorV3Bridge.activePresentation;
  swift_beginAccess();
  outlined assign with take of UIKitInspectorV3Bridge<TabItem.RootView>.PresentationKind((uint64_t)v56, v22);
  swift_endAccess();
  *(unsigned char *)(v6 + direct field offset for UIKitInspectorV3Bridge.dismissingReason) = 0;
  id v23 = objc_msgSend(a1, sel_presentingViewController);
  if (!v23) {
    id v23 = a1;
  }
  uint64_t v24 = swift_allocObject();
  swift_unknownObjectWeakInit();
  outlined init with copy of PopoverPresentation(a2, (uint64_t)v48);
  outlined init with copy of PresentationOptionsPreference(v38, (uint64_t)&v40);
  uint64_t v25 = swift_allocObject();
  long long v26 = v46;
  *(_OWORD *)(v25 + 264) = v47[0];
  *(_OWORD *)(v25 + 273) = *(_OWORD *)((char *)v47 + 9);
  long long v27 = v48[5];
  *(_OWORD *)(v25 + 96) = v48[4];
  *(_OWORD *)(v25 + 112) = v27;
  *(_OWORD *)(v25 + 128) = *(_OWORD *)v49;
  long long v28 = v48[1];
  *(_OWORD *)(v25 + 32) = v48[0];
  *(_OWORD *)(v25 + 48) = v28;
  long long v29 = v48[3];
  *(_OWORD *)(v25 + 64) = v48[2];
  *(_OWORD *)(v25 + 80) = v29;
  long long v30 = v44;
  *(_OWORD *)(v25 + 232) = v45;
  *(_OWORD *)(v25 + 248) = v26;
  long long v31 = v40;
  *(_OWORD *)(v25 + 168) = v41;
  long long v32 = v43;
  *(_OWORD *)(v25 + 184) = v42;
  *(_OWORD *)(v25 + 200) = v32;
  *(_OWORD *)(v25 + 216) = v30;
  *(void *)(v25 + 16) = v24;
  *(void *)(v25 + 24) = a1;
  *(void *)(v25 + 142) = *(void *)&v49[14];
  *(_OWORD *)(v25 + 152) = v31;
  *(unsigned char *)(v25 + 289) = a5 & 1;
  *(void *)(v25 + 296) = a3;
  v39[4] = partial apply for specialized closure #2 in UIKitInspectorV3Bridge.replaceExistingPopover(_:with:presenter:presentationOptions:wantsTransparentBackground:);
  v39[5] = v25;
  v39[0] = MEMORY[0x1E4F143A8];
  v39[1] = 1107296256;
  v39[2] = thunk for @escaping @callee_guaranteed () -> ();
  v39[3] = &block_descriptor_27;
  long long v33 = _Block_copy(v39);
  id v34 = a1;
  id v35 = a3;
  swift_release();
  objc_msgSend(v23, sel_dismissViewControllerAnimated_completion_, 1, v33);
  _Block_release(v33);
}

void specialized UIKitInspectorV3Bridge.presentNewPopover(presentation:presenter:options:wantsTransparentBackground:)(uint64_t a1, void *a2, uint64_t *a3, int a4)
{
  uint64_t v5 = v4;
  _s2os6LoggerVSgMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for Logger?, MEMORY[0x1E4FBD360], MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v10 - 8);
  uint64_t v12 = &v42[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1F4188790](v13);
  uint64_t v15 = &v42[-v14];
  uint64_t v16 = (uint64_t)v5 + direct field offset for UIKitInspectorV3Bridge.activePresentation;
  swift_beginAccess();
  outlined init with copy of UIKitInspectorV3Bridge<TabItem.RootView>.PresentationKind(v16, (uint64_t)&v45);
  outlined init with copy of UIKitInspectorV3Bridge<TabItem.RootView>.PresentationKind((uint64_t)&v45, (uint64_t)v52);
  if (v54 - 2 >= 2)
  {
    if (!v54) {
      outlined destroy of UIKitInspectorV3Bridge<TabItem.RootView>.PresentationKind((uint64_t)v52);
    }
    outlined destroy of UIKitInspectorV3Bridge<TabItem.RootView>.PresentationKind((uint64_t)&v45);
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    outlined destroy of UIKitInspectorV3Bridge<TabItem.RootView>.PresentationKind((uint64_t)&v45);
    if (specialized UIKitInspectorV3Bridge.popoverCanPresent(popover:)(a1))
    {
      int v43 = a4;
      long long v44 = a3;
      static Log.presentation.getter();
      uint64_t v17 = type metadata accessor for Logger();
      uint64_t v18 = *(void *)(v17 - 8);
      if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v18 + 48))(v15, 1, v17) == 1)
      {
        _s2os6LoggerVSgWOhTm_0((uint64_t)v15, (unint64_t *)&lazy cache variable for type metadata for Logger?, MEMORY[0x1E4FBD360]);
      }
      else
      {
        int v21 = Logger.logObject.getter();
        os_log_type_t v22 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v21, v22))
        {
          id v23 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)id v23 = 0;
          _os_log_impl(&dword_1872C6000, v21, v22, "Presenting new popover", v23, 2u);
          MEMORY[0x18C119C60](v23, -1, -1);
        }

        (*(void (**)(unsigned char *, uint64_t))(v18 + 8))(v15, v17);
      }
      id v24 = objc_msgSend(self, sel_defaultCenter);
      if (one-time initialization token for willPresent != -1) {
        swift_once();
      }
      objc_msgSend(v24, sel_postNotificationName_object_, static SheetInspectorBridgeNotifications.willPresent, 0);

      static Transaction.current.getter();
      char v25 = Transaction.isAnimated.getter();
      swift_release();
      id v26 = objc_msgSend(a2, sel_presentedViewController);
      if (v26)
      {
        long long v27 = v26;
        if ((objc_msgSend(v26, sel_isBeingDismissed) & 1) == 0)
        {
          self;
          if (!swift_dynamicCastObjCClass()) {
            objc_msgSend(a2, sel_dismissViewControllerAnimated_completion_, v25 & 1, 0);
          }
        }
      }
      uint64_t v28 = *(void *)a1;
      type metadata accessor for _UIHostingView<AnyView>(0, &lazy cache variable for type metadata for PresentationHostingController<AnyView>, MEMORY[0x1E4F41618], MEMORY[0x1E4F41610], (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PresentationHostingController);
      long long v30 = objc_allocWithZone(v29);
      swift_retain();
      long long v31 = v5;
      long long v32 = specialized PresentationHostingController.init(rootView:delegate:drawsBackground:)(v28, (uint64_t)v31, 1, v30);
      swift_release();

      *(void *)(*(void *)&v32[direct field offset for UIHostingController.host]
                + *(void *)((*MEMORY[0x1E4FBC8C8] & **(void **)&v32[direct field offset for UIHostingController.host])
                            + 0x198)
                + 8) = &protocol witness table for UIKitInspectorV3Bridge<A>;
      swift_unknownObjectWeakAssign();
      swift_retain();
      GraphHost.addPreference<A>(_:)();
      swift_release();
      long long v33 = *(void **)&v31[direct field offset for UIKitInspectorV3Bridge.presentedVC];
      *(void *)&v31[direct field offset for UIKitInspectorV3Bridge.presentedVC] = v32;
      id v34 = v32;

      uint64_t v35 = *(void *)(a1 + 88);
      uint64_t v36 = *(void *)(a1 + 96);
      LOWORD(v33) = *(unsigned __int8 *)(a1 + 8);
      __int16 v37 = *(unsigned __int8 *)(a1 + 9);
      swift_retain();
      swift_retain();
      specialized UIKitInspectorV3Bridge.preparePopover(presented:anchor:environment:presentationOptions:arrowEdges:wantsTransparentBackground:)(v34, v35, v36, v44, (unsigned __int16)v33 | (v37 << 8), v43 & 1);
      swift_release();
      swift_release();
      specialized PresentationHostingController.setupSheet<A>(for:presenter:placement:)(a2, 5);
      _s7SwiftUI19NavigationAuthorityVSgWOcTm_2(a1 + 48, (uint64_t)&v45, (unint64_t *)&lazy cache variable for type metadata for AnyHashable?, MEMORY[0x1E4FBB960]);
      if (*((void *)&v46 + 1))
      {
        v52[0] = v45;
        v52[1] = v46;
        uint64_t v53 = v47;
        outlined init with copy of AnyHashable((uint64_t)v52, (uint64_t)v49);
        unsigned __int8 v51 = 0;
        outlined destroy of AnyHashable((uint64_t)v52);
      }
      else
      {
        uint64_t v50 = 0;
        memset(v49, 0, sizeof(v49));
        unsigned __int8 v51 = -1;
      }
      outlined init with copy of PopoverPresentation(a1, (uint64_t)&v45);
      if (v51 == 255)
      {
        int v41 = v48;
        outlined destroy of PopoverPresentation((uint64_t)&v45);
        LODWORD(v52[0]) = v41;
        unsigned __int8 v54 = 1;
        outlined destroy of UIKitInspectorV3Bridge<TabItem.RootView>.PresentationKind?((uint64_t)v49, (unint64_t *)&lazy cache variable for type metadata for UIKitInspectorV3Bridge<TabItem.RootView>.PresentationKind?, (uint64_t)&lazy cache variable for type metadata for UIKitInspectorV3Bridge<TabItem.RootView>.PresentationKind, (uint64_t)type metadata accessor for UIKitInspectorV3Bridge.PresentationKind, (void (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UIKitInspectorV3Bridge<TabItem.RootView>.PresentationKind);
      }
      else
      {
        outlined destroy of PopoverPresentation((uint64_t)&v45);
        outlined init with take of UIKitInspectorV3Bridge<TabItem.RootView>.PresentationKind((uint64_t)v49, (uint64_t)v52);
      }
      swift_beginAccess();
      outlined assign with take of UIKitInspectorV3Bridge<TabItem.RootView>.PresentationKind((uint64_t)v52, v16);
      swift_endAccess();
      objc_msgSend(a2, sel_presentViewController_animated_completion_, v34, 1, 0);
    }
    else
    {
      static Log.presentation.getter();
      uint64_t v19 = type metadata accessor for Logger();
      uint64_t v20 = *(void *)(v19 - 8);
      if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v20 + 48))(v12, 1, v19) == 1)
      {
        _s2os6LoggerVSgWOhTm_0((uint64_t)v12, (unint64_t *)&lazy cache variable for type metadata for Logger?, MEMORY[0x1E4FBD360]);
      }
      else
      {
        uint64_t v38 = Logger.logObject.getter();
        os_log_type_t v39 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v38, v39))
        {
          long long v40 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)long long v40 = 0;
          _os_log_impl(&dword_1872C6000, v38, v39, "Not presenting new popover, source view is scrolled out of bounds", v40, 2u);
          MEMORY[0x18C119C60](v40, -1, -1);
        }

        (*(void (**)(unsigned char *, uint64_t))(v20 + 8))(v12, v19);
      }
    }
  }
}

void specialized closure #2 in UIKitInspectorV3Bridge.replaceExistingPopover(_:with:presenter:presentationOptions:wantsTransparentBackground:)(uint64_t a1, char *a2, uint64_t *a3, uint64_t *a4, char a5, void *a6)
{
  uint64_t v11 = a1 + 16;
  swift_beginAccess();
  uint64_t v12 = MEMORY[0x18C119DF0](v11);
  if (v12)
  {
    uint64_t v13 = (void *)v12;
    *(unsigned char *)(v12 + direct field offset for UIKitInspectorV3Bridge.dismissingReason) = 2;
    uint64_t v14 = *a3;
    uint64_t v15 = *(void **)&a2[direct field offset for UIHostingController.host];
    uint64_t v16 = (void *)((char *)v15 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v15) + 0x60));
    id v21 = a6;
    swift_beginAccess();
    *uint64_t v16 = v14;
    swift_retain_n();
    uint64_t v17 = v15;
    swift_release();
    type metadata accessor for _UIHostingView<AnyView>(0, (unint64_t *)&lazy cache variable for type metadata for _UIHostingView<AnyView>, MEMORY[0x1E4F41618], MEMORY[0x1E4F41610], (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for _UIHostingView);
    lazy protocol witness table accessor for type _UIHostingView<AnyView> and conformance _UIHostingView<A>();
    ViewRendererHost.invalidateProperties(_:mayDeferUpdate:)();

    swift_release_n();
    uint64_t v18 = a3[11];
    uint64_t v19 = a3[12];
    __int16 v20 = *((unsigned __int8 *)a3 + 8);
    LOWORD(v17) = *((unsigned __int8 *)a3 + 9);
    swift_retain();
    swift_retain();
    specialized UIKitInspectorV3Bridge.preparePopover(presented:anchor:environment:presentationOptions:arrowEdges:wantsTransparentBackground:)(a2, v18, v19, a4, v20 | ((_WORD)v17 << 8), a5 & 1);
    swift_release();
    swift_release();
    objc_msgSend(v21, sel_presentViewController_animated_completion_, a2, 1, 0);
  }
}

void specialized UIKitInspectorV3Bridge.presentNewInspector(_:id:anchors:presentationOptionsPreference:backgroundPreference:)(void *a1, int a2, uint64_t a3, uint64_t *a4, char a5)
{
  id v11 = (id)MEMORY[0x18C119DF0](&v5[direct field offset for UIKitInspectorV3Bridge.presenterOverride]);
  if (!v11)
  {
    uint64_t v12 = &v5[direct field offset for UIKitInspectorV3Bridge.host];
    uint64_t v13 = (void *)MEMORY[0x18C119DF0](&v5[direct field offset for UIKitInspectorV3Bridge.host]);
    if (!v13)
    {
      __break(1u);
      goto LABEL_41;
    }
    uint64_t v14 = v13;
    id v11 = (id)MEMORY[0x18C119DF0]((char *)v13 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v13) + 0xC0));

    if (!v11)
    {
      uint64_t v15 = (void *)MEMORY[0x18C119DF0](v12);
      if (v15)
      {
        uint64_t v16 = v15;
        id v11 = objc_msgSend(v15, sel__viewControllerForAncestor);

        if (!v11) {
          return;
        }
        goto LABEL_6;
      }
LABEL_41:
      __break(1u);
      goto LABEL_42;
    }
  }
LABEL_6:
  uint64_t v17 = (uint64_t)&v5[direct field offset for UIKitInspectorV3Bridge.activePresentation];
  swift_beginAccess();
  outlined init with copy of UIKitInspectorV3Bridge<TabItem.RootView>.PresentationKind(v17, (uint64_t)v68);
  outlined init with copy of UIKitInspectorV3Bridge<TabItem.RootView>.PresentationKind((uint64_t)v68, (uint64_t)v70);
  switch(v72)
  {
    case 1:
    case 3:
      goto LABEL_8;
    case 2:
      goto LABEL_43;
    default:
      outlined destroy of UIKitInspectorV3Bridge<TabItem.RootView>.PresentationKind((uint64_t)v70);
LABEL_8:
      uint64_t v61 = a4;
      outlined destroy of UIKitInspectorV3Bridge<TabItem.RootView>.PresentationKind((uint64_t)v68);
      uint64_t v18 = a1[11];
      outlined init with copy of InspectorStorage((uint64_t)a1, (uint64_t)v68);
      char v60 = a5;
      uint64_t v62 = a3;
      int v19 = a2;
      if (v18)
      {
        swift_retain();
        outlined destroy of InspectorStorage((uint64_t)v68);
      }
      else
      {
        uint64_t v18 = v69;
        swift_retain();
        outlined destroy of InspectorStorage((uint64_t)v68);
        if (!v18) {
          uint64_t v18 = AnyView.init<A>(_:)();
        }
      }
      type metadata accessor for _UIHostingView<AnyView>(0, &lazy cache variable for type metadata for PresentationHostingController<AnyView>, MEMORY[0x1E4F41618], MEMORY[0x1E4F41610], (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PresentationHostingController);
      id v21 = objc_allocWithZone(v20);
      swift_retain();
      os_log_type_t v22 = v5;
      id v23 = specialized PresentationHostingController.init(rootView:delegate:drawsBackground:)(v18, (uint64_t)v22, 1, v21);
      swift_release();

      uint64_t v24 = direct field offset for UIHostingController.host;
      *(void *)(*(void *)&v23[direct field offset for UIHostingController.host]
                + *(void *)((*MEMORY[0x1E4FBC8C8] & **(void **)&v23[direct field offset for UIHostingController.host])
                            + 0x198)
                + 8) = &protocol witness table for UIKitInspectorV3Bridge<A>;
      uint64_t v64 = v22;
      swift_unknownObjectWeakAssign();
      swift_retain();
      GraphHost.addPreference<A>(_:)();
      swift_release();
      swift_release();
      _s7SwiftUI19NavigationAuthorityVSgWOcTm_2((uint64_t)(a1 + 6), (uint64_t)&v65, (unint64_t *)&lazy cache variable for type metadata for AnyHashable?, MEMORY[0x1E4FBB960]);
      uint64_t v63 = a1;
      if (!*((void *)&v66 + 1))
      {
        _s7SwiftUI16PreferenceValuesV5ValueVy_AA019PresentationOptionsC0VGWOhTm_0((uint64_t)&v65, (unint64_t *)&lazy cache variable for type metadata for AnyHashable?, MEMORY[0x1E4FBB960], MEMORY[0x1E4FBB718]);
        goto LABEL_23;
      }
      v70[0] = v65;
      v70[1] = v66;
      uint64_t v71 = v67;
      if (!*(void *)(v62 + 16)
        || (unint64_t v25 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v70), (v26 & 1) == 0))
      {
        outlined destroy of AnyHashable((uint64_t)v70);
LABEL_23:
        long long v40 = *(void **)&v23[v24];
        uint64_t v41 = a1[13];
        uint64_t v42 = a1[14];
        uint64_t v43 = *(void *)((char *)v40 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v40) + 0x68));
        uint64_t v44 = *(void *)(v43 + 152);
        *(void *)(v43 + 152) = v41;
        *(void *)(v43 + 160) = v42;
        swift_retain();
        long long v45 = v40;
        swift_retain();
        outlined consume of EnvironmentValues?(v44);
        if (MEMORY[0x18C119DF0](v43 + 24))
        {
          swift_getObjectType();
          LOWORD(v70[0]) = 2;
          ViewRendererHost.invalidateProperties(_:mayDeferUpdate:)();

          swift_unknownObjectRelease();
        }
        else
        {
        }
        a2 = v19;
        if (*(unsigned char *)(*(void *)&v23[v24] + *(void *)((*MEMORY[0x1E4FBC8C8] & **(void **)&v23[v24]) + 0xD8)) == 2)
        {
          *(void *)&v70[0] = v41;
          *((void *)&v70[0] + 1) = v42;
          EnvironmentValues.explicitPreferredColorScheme.getter();
          if (v65 != 2)
          {
            long long v46 = *(void **)&v23[v24];
            uint64_t v47 = *(void *)((*MEMORY[0x1E4FBC8C8] & *v46) + 0xD8);
            uint64_t v48 = *((unsigned __int8 *)v46 + v47);
            *((unsigned char *)v46 + v47) = v65;
            uint64_t v49 = v23;
            uint64_t v50 = v46;
            specialized _UIHostingView.didChangeColorScheme(from:)(v48);
          }
          char v39 = 6;
        }
        else
        {
          char v39 = 6;
        }
        __int16 v37 = v64;
        goto LABEL_32;
      }
      uint64_t v27 = *(void *)(*(void *)(v62 + 56) + 8 * v25);
      uint64_t v28 = self;
      swift_retain();
      id v29 = objc_msgSend(v28, sel_currentDevice);
      id v30 = objc_msgSend(v29, sel_userInterfaceIdiom);

      if (v30 != (id)1)
      {
        outlined destroy of AnyHashable((uint64_t)v70);
        swift_release();
        goto LABEL_23;
      }
      *(void *)&v64[direct field offset for UIKitInspectorV3Bridge.activeInspectorAnchor] = v27;
      swift_retain();
      swift_release();
      uint64_t v32 = a1[13];
      uint64_t v31 = a1[14];
      swift_retain();
      swift_retain();
      specialized UIKitInspectorV3Bridge.preparePopover(presented:anchor:environment:presentationOptions:arrowEdges:wantsTransparentBackground:)(v23, v32, v31, v61, 256, v60 & 1);
      swift_release();
      swift_release();
      id v33 = objc_msgSend(v23, sel_popoverPresentationController);
      if (!v33)
      {
        outlined destroy of AnyHashable((uint64_t)v70);
        swift_release();
        a1 = v63;
        goto LABEL_23;
      }
      id v34 = v33;
      type metadata accessor for PreferenceValues.Value<PresentationOptionsPreference>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>, MEMORY[0x1E4FBC838] + 8, MEMORY[0x1E4FBBE00]);
      uint64_t v35 = swift_allocObject();
      *(_OWORD *)(v35 + 16) = xmmword_188351940;
      uint64_t v36 = MEMORY[0x18C119DF0](&v64[direct field offset for UIKitInspectorV3Bridge.host]);
      if (!v36)
      {
LABEL_42:
        __break(1u);
LABEL_43:
        outlined destroy of UIKitInspectorV3Bridge<TabItem.RootView>.PresentationKind((uint64_t)v68);
        _assertionFailure(_:_:file:line:flags:)();
        __break(1u);
        JUMPOUT(0x187BAB690);
      }
      __int16 v37 = v64;
      *(void *)(v35 + 32) = v36;
      *(void *)&long long v65 = v35;
      specialized Array._endMutation()();
      type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIView);
      Class isa = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      objc_msgSend(v34, sel_setPassthroughViews_, isa);
      swift_release();

      outlined destroy of AnyHashable((uint64_t)v70);
      char v39 = 5;
LABEL_32:
      specialized PresentationHostingController.setupSheet<A>(for:presenter:placement:)(v11, v39);
      id v51 = objc_msgSend(v23, sel_presentationController);
      if (v51)
      {
        int v52 = v51;
        self;
        uint64_t v53 = swift_dynamicCastObjCClass();
        if (v53)
        {
          unsigned __int8 v54 = (void *)v53;
          type metadata accessor for PreferenceValues.Value<PresentationOptionsPreference>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>, MEMORY[0x1E4FBC838] + 8, MEMORY[0x1E4FBBE00]);
          uint64_t v55 = swift_allocObject();
          *(_OWORD *)(v55 + 16) = xmmword_1883863C0;
          id v56 = self;
          *(void *)(v55 + 32) = objc_msgSend(v56, sel_mediumDetent);
          *(void *)(v55 + 40) = objc_msgSend(v56, sel_largeDetent);
          *(void *)&v70[0] = v55;
          specialized Array._endMutation()();
          __int16 v37 = v64;
          type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UISheetPresentationControllerDetent);
          Class v57 = Array._bridgeToObjectiveC()().super.isa;
          swift_bridgeObjectRelease();
          objc_msgSend(v54, sel_setDetents_, v57);

          objc_msgSend(v54, sel_setLargestUndimmedDetentIdentifier_, *MEMORY[0x1E4FB2F00]);
          objc_msgSend(v54, sel_setPrefersScrollingExpandsWhenScrolledToEdge_, 1);
          objc_msgSend(v54, sel_setPrefersGrabberVisible_, 1);
        }
      }
      if (v63[1])
      {
        LOBYTE(v70[0]) = 1;
        swift_retain();
        swift_retain();
        dispatch thunk of AnyLocation.set(_:transaction:)();
        swift_release();
        swift_release();
      }
      long long v58 = *(void **)&v37[direct field offset for UIKitInspectorV3Bridge.presentedVC];
      *(void *)&v37[direct field offset for UIKitInspectorV3Bridge.presentedVC] = v23;
      uint64_t v59 = v23;

      LODWORD(v70[0]) = a2;
      char v72 = 2;
      swift_beginAccess();
      outlined assign with take of UIKitInspectorV3Bridge<TabItem.RootView>.PresentationKind((uint64_t)v70, v17);
      swift_endAccess();
      objc_msgSend(v11, sel_presentViewController_animated_completion_, v59, 1, 0);

      return;
  }
}

uint64_t specialized UIKitInspectorV3Bridge.updateExistingInspector(_:values:)(char *a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = v3 + direct field offset for UIKitInspectorV3Bridge.activePresentation;
  swift_beginAccess();
  outlined init with copy of UIKitInspectorV3Bridge<TabItem.RootView>.PresentationKind(v6, (uint64_t)&v34);
  outlined init with copy of UIKitInspectorV3Bridge<TabItem.RootView>.PresentationKind((uint64_t)&v34, (uint64_t)v38);
  Swift::UInt32 v7 = 0;
  switch(BYTE8(v39))
  {
    case 1:
    case 2:
      Swift::UInt32 v7 = v38[0];
      break;
    case 3:
      break;
    default:
      outlined destroy of UIKitInspectorV3Bridge<TabItem.RootView>.PresentationKind((uint64_t)v38);
      Swift::UInt32 v7 = 0;
      break;
  }
  outlined destroy of UIKitInspectorV3Bridge<TabItem.RootView>.PresentationKind((uint64_t)&v34);
  if (*(void *)(a2 + 16) && (unint64_t v8 = specialized __RawDictionaryStorage.find<A>(_:)(v7), (v9 & 1) != 0))
  {
    outlined init with copy of InspectorStorage(*(void *)(a2 + 56) + 120 * v8, (uint64_t)v38);
  }
  else
  {
    v38[0] = xmmword_18834BB90;
    v38[1] = 0u;
    long long v39 = 0u;
    long long v40 = 0u;
    long long v41 = 0u;
    long long v42 = 0u;
    long long v43 = 0u;
    uint64_t v44 = 0;
  }
  _s7SwiftUI19NavigationAuthorityVSgWOcTm_2((uint64_t)v38, (uint64_t)&v34, &lazy cache variable for type metadata for InspectorStorage?, (uint64_t)&type metadata for InspectorStorage);
  uint64_t v10 = *((void *)&v34 + 1);
  if (*((void *)&v34 + 1) != 1)
  {
    uint64_t v12 = v34;
    char v13 = v35;
    outlined copy of Binding<NavigationSplitViewColumn>?(v34, *((uint64_t *)&v34 + 1));
    uint64_t v11 = outlined destroy of InspectorStorage((uint64_t)&v34);
    if (!v10) {
      goto LABEL_14;
    }
    *(void *)&long long v31 = v12;
    *((void *)&v31 + 1) = v10;
    LOBYTE(v32) = v13 & 1;
    type metadata accessor for PreferenceValues.Value<PresentationOptionsPreference>(0, (unint64_t *)&lazy cache variable for type metadata for Binding<Bool>, MEMORY[0x1E4FBB390], MEMORY[0x1E4F41638]);
    MEMORY[0x18C113DA0](&v30);
    swift_release();
    uint64_t v11 = swift_release();
    if ((v30 & 1) == 0) {
      goto LABEL_14;
    }
    _s7SwiftUI19NavigationAuthorityVSgWOcTm_2((uint64_t)v38, (uint64_t)&v34, &lazy cache variable for type metadata for InspectorStorage?, (uint64_t)&type metadata for InspectorStorage);
    if (*((void *)&v34 + 1) == 1)
    {
      _s7SwiftUI16PreferenceValuesV5ValueVy_AA019PresentationOptionsC0VGWOhTm_0((uint64_t)&v34, &lazy cache variable for type metadata for InspectorStorage?, (uint64_t)&type metadata for InspectorStorage, MEMORY[0x1E4FBB718]);
      long long v31 = 0u;
      long long v32 = 0u;
      uint64_t v33 = 0;
    }
    else
    {
      _s7SwiftUI19NavigationAuthorityVSgWOcTm_2((uint64_t)v37, (uint64_t)&v31, (unint64_t *)&lazy cache variable for type metadata for AnyHashable?, MEMORY[0x1E4FBB960]);
      outlined destroy of InspectorStorage((uint64_t)&v34);
      if (*((void *)&v32 + 1))
      {
        long long v34 = v31;
        long long v35 = v32;
        uint64_t v36 = v33;
        uint64_t v18 = (uint64_t *)(v3 + direct field offset for UIKitInspectorV3Bridge.lastAnchorValues);
        swift_beginAccess();
        uint64_t v19 = *v18;
        if (*(void *)(v19 + 16)
          && (unint64_t v20 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&v34), (v21 & 1) != 0))
        {
          uint64_t v22 = *(void *)(*(void *)(v19 + 56) + 8 * v20);
          swift_retain();
        }
        else
        {
          uint64_t v22 = 0;
        }
        swift_endAccess();
        outlined destroy of AnyHashable((uint64_t)&v34);
        *(void *)(v3 + direct field offset for UIKitInspectorV3Bridge.activeInspectorAnchor) = v22;
        swift_release();
LABEL_29:
        id v23 = objc_msgSend(a1, sel_presentationController);
        if (v23)
        {
          uint64_t v24 = v23;
          if (*(void *)(v3 + direct field offset for UIKitInspectorV3Bridge.activeInspectorAnchor))
          {
            swift_retain();
            id v25 = specialized UIKitInspectorV3Bridge.popoverPresentationDelegate.getter();
            specialized PopoverPresentationDelegate.updateAnchor(_:presentationController:)(v24);

            swift_release();
            uint64_t v24 = v25;
          }
        }
        _s7SwiftUI19NavigationAuthorityVSgWOcTm_2((uint64_t)v38, (uint64_t)&v34, &lazy cache variable for type metadata for InspectorStorage?, (uint64_t)&type metadata for InspectorStorage);
        if (*((void *)&v34 + 1) == 1)
        {
          __break(1u);
        }
        else
        {
          uint64_t v26 = v37[5];
          swift_retain();
          outlined destroy of InspectorStorage((uint64_t)&v34);
          if (v26)
          {
            uint64_t v27 = *(void **)&a1[direct field offset for UIHostingController.host];
            uint64_t v28 = (void *)((char *)v27 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v27) + 0x60));
            int v14 = 1;
            swift_beginAccess();
            *uint64_t v28 = v26;
            swift_retain_n();
            id v29 = v27;
            swift_release();
            __int16 v30 = 1;
            type metadata accessor for _UIHostingView<AnyView>(0, (unint64_t *)&lazy cache variable for type metadata for _UIHostingView<AnyView>, MEMORY[0x1E4F41618], MEMORY[0x1E4F41610], (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for _UIHostingView);
            lazy protocol witness table accessor for type _UIHostingView<AnyView> and conformance _UIHostingView<A>();
            ViewRendererHost.invalidateProperties(_:mayDeferUpdate:)();

            uint64_t v11 = swift_release_n();
            goto LABEL_17;
          }
        }
        __break(1u);
        JUMPOUT(0x187BABCE8);
      }
    }
    _s7SwiftUI16PreferenceValuesV5ValueVy_AA019PresentationOptionsC0VGWOhTm_0((uint64_t)&v31, (unint64_t *)&lazy cache variable for type metadata for AnyHashable?, MEMORY[0x1E4FBB960], MEMORY[0x1E4FBB718]);
    goto LABEL_29;
  }
  uint64_t v11 = _s7SwiftUI16PreferenceValuesV5ValueVy_AA019PresentationOptionsC0VGWOhTm_0((uint64_t)&v34, &lazy cache variable for type metadata for InspectorStorage?, (uint64_t)&type metadata for InspectorStorage, MEMORY[0x1E4FBB718]);
LABEL_14:
  if (*(unsigned char *)(v3 + direct field offset for UIKitInspectorV3Bridge.dismissingReason) == 2)
  {
    *(unsigned char *)(v3 + direct field offset for UIKitInspectorV3Bridge.dismissingReason) = 1;
    specialized UIKitInspectorV3Bridge.dismissAndReset(viewController:)(a1);
  }
  int v14 = 0;
LABEL_17:
  MEMORY[0x1F4188790](v11);
  type metadata accessor for PreferenceValues.Value<PresentationOptionsPreference>(0, (unint64_t *)&lazy cache variable for type metadata for Bool?, MEMORY[0x1E4FBB390], MEMORY[0x1E4FBB718]);
  static Update.dispatchImmediately<A>(_:)();
  if v30 == 2 || ((v14 ^ v30))
  {
    _s7SwiftUI19NavigationAuthorityVSgWOcTm_2((uint64_t)v38, (uint64_t)&v34, &lazy cache variable for type metadata for InspectorStorage?, (uint64_t)&type metadata for InspectorStorage);
    uint64_t v15 = swift_allocObject();
    outlined init with take of NavigationState.StackContent?((uint64_t)&v34, v15 + 16, &lazy cache variable for type metadata for InspectorStorage?, (uint64_t)&type metadata for InspectorStorage);
    *(unsigned char *)(v15 + 136) = v14;
    static Update.enqueueAction(_:)();
    swift_release();
    uint64_t v16 = (uint64_t (*)(void, uint64_t))MEMORY[0x1E4FBB718];
  }
  else
  {
    uint64_t v16 = (uint64_t (*)(void, uint64_t))MEMORY[0x1E4FBB718];
  }
  return _s7SwiftUI16PreferenceValuesV5ValueVy_AA019PresentationOptionsC0VGWOhTm_0((uint64_t)v38, &lazy cache variable for type metadata for InspectorStorage?, (uint64_t)&type metadata for InspectorStorage, v16);
}

void specialized closure #1 in UIKitInspectorV3Bridge.dismissAndReset(viewController:)(uint64_t a1)
{
  uint64_t v1 = a1 + 16;
  swift_beginAccess();
  uint64_t v2 = MEMORY[0x18C119DF0](v1);
  if (v2)
  {
    uint64_t v3 = (void *)v2;
    specialized UIKitInspectorV3Bridge.reset()();
  }
}

uint64_t specialized closure #1 in PresentationHostingController.setupSheet<A>(for:presenter:placement:)@<X0>(uint64_t a1@<X8>)
{
  swift_retain();
  GraphHost.preferenceValues()();
  swift_release();
  char v3 = v4[0];
  PreferenceValues.subscript.getter();
  outlined init with copy of PresentationOptionsPreference((uint64_t)v4, a1);
  _s7SwiftUI16PreferenceValuesV5ValueVy_AA019PresentationOptionsC0VGWOhTm_0((uint64_t)v4, (unint64_t *)&lazy cache variable for type metadata for PreferenceValues.Value<PresentationOptionsPreference>, (uint64_t)&type metadata for PresentationOptionsPreference, MEMORY[0x1E4F3FD10]);
  PreferenceValues.subscript.getter();
  uint64_t result = swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 137) = v3;
  return result;
}

uint64_t outlined destroy of PopoverPresentation(uint64_t a1)
{
  return a1;
}

unint64_t lazy protocol witness table accessor for type CGRect? and conformance <A> A?()
{
  unint64_t result = lazy protocol witness table cache variable for type CGRect? and conformance <A> A?;
  if (!lazy protocol witness table cache variable for type CGRect? and conformance <A> A?)
  {
    _s2os6LoggerVSgMaTm_0(255, (unint64_t *)&lazy cache variable for type metadata for CGRect?, (uint64_t (*)(uint64_t))type metadata accessor for CGRect, MEMORY[0x1E4FBB718]);
    lazy protocol witness table accessor for type CGRect and conformance CGRect();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CGRect? and conformance <A> A?);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type CGRect and conformance CGRect()
{
  unint64_t result = lazy protocol witness table cache variable for type CGRect and conformance CGRect;
  if (!lazy protocol witness table cache variable for type CGRect and conformance CGRect)
  {
    type metadata accessor for CGRect(255);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CGRect and conformance CGRect);
  }
  return result;
}

void type metadata accessor for (AnyHashable?, AnyHashable?)()
{
  if (!lazy cache variable for type metadata for (AnyHashable?, AnyHashable?))
  {
    type metadata accessor for PreferenceValues.Value<PresentationOptionsPreference>(255, (unint64_t *)&lazy cache variable for type metadata for AnyHashable?, MEMORY[0x1E4FBB960], MEMORY[0x1E4FBB718]);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (AnyHashable?, AnyHashable?));
    }
  }
}

uint64_t sub_187BAC040()
{
  swift_unknownObjectWeakDestroy();

  return swift_deallocObject();
}

uint64_t sub_187BAC078()
{
  swift_release();

  return swift_deallocObject();
}

void partial apply for specialized closure #2 in UIKitInspectorV3Bridge.updateAnchor()()
{
  specialized closure #2 in UIKitInspectorV3Bridge.updateAnchor()(*(void *)(v0 + 16), *(void **)(v0 + 24));
}

uint64_t specialized closure #1 in PresentationHostingController.setWantsFullScreen(placement:sheetController:)@<X0>(unsigned char *a1@<X8>)
{
  swift_retain();
  GraphHost.preferenceValue<A>(_:)();
  uint64_t result = swift_release();
  *a1 = v3;
  return result;
}

char *specialized PresentationHostingController.init(rootView:delegate:drawsBackground:)(uint64_t a1, uint64_t a2, char a3, unsigned char *a4)
{
  swift_getObjectType();
  *(void *)&a4[direct field offset for PresentationHostingController.delegate + 8] = 0;
  swift_unknownObjectWeakInit();
  a4[direct field offset for PresentationHostingController.bridgedPresentationWantsTransparentBackground] = 0;
  a4[direct field offset for PresentationHostingController.presentingBridgeKind] = 2;
  *(void *)&a4[direct field offset for PresentationHostingController.lastColumnCount] = 0;
  a4[direct field offset for PresentationHostingController.lastInteractiveDismissDisabled] = 2;
  a4[direct field offset for PresentationHostingController.didPresenterLoseModifierRecursively] = 0;
  a4[direct field offset for PresentationHostingController.wasPreempted] = 0;
  uint64_t v6 = &a4[direct field offset for PresentationHostingController.lastPresentationOptions];
  *(_OWORD *)((char *)v6 + 121) = 0u;
  v6[6] = 0u;
  v6[7] = 0u;
  void v6[4] = 0u;
  v6[5] = 0u;
  v6[2] = 0u;
  void v6[3] = 0u;
  *uint64_t v6 = 0u;
  v6[1] = 0u;
  Swift::UInt32 v7 = &a4[direct field offset for PresentationHostingController.lastPreferenceForSheetControllerConfiguration];
  *(_OWORD *)((char *)v7 + 121) = 0u;
  v7[6] = 0u;
  v7[7] = 0u;
  _OWORD v7[4] = 0u;
  v7[5] = 0u;
  v7[2] = 0u;
  v7[3] = 0u;
  *Swift::UInt32 v7 = 0u;
  v7[1] = 0u;
  unint64_t v8 = &a4[direct field offset for PresentationHostingController.observedSize];
  *(void *)unint64_t v8 = 0;
  *((void *)v8 + 1) = 0;
  v8[16] = 1;
  a4[direct field offset for PresentationHostingController.presentationWantsTransparentBackground] = a3 ^ 1;
  uint64_t v9 = one-time initialization token for clientNeedsOscillationSuppression;
  uint64_t v10 = a4;
  if (v9 != -1) {
    swift_once();
  }
  if (clientNeedsOscillationSuppression)
  {
    type metadata accessor for PreferenceValues.Value<PresentationOptionsPreference>(0, &lazy cache variable for type metadata for OscillationDetector<PresentationOptionsPreference>, (uint64_t)&type metadata for PresentationOptionsPreference, (uint64_t (*)(void, uint64_t))type metadata accessor for OscillationDetector);
    uint64_t v11 = swift_allocObject();
    *(void *)(v11 + 24) = 0;
    *(void *)(v11 + 56) = MEMORY[0x1E4FBC860];
    *(void *)(v11 + 64) = 0x8000000000000000;
    *(unsigned char *)(v11 + 72) = 0;
    type metadata accessor for PreferenceValues.Value<PresentationOptionsPreference>(0, (unint64_t *)&lazy cache variable for type metadata for PresentationOptionsPreference?, (uint64_t)&type metadata for PresentationOptionsPreference, MEMORY[0x1E4FBB718]);
    memset(v24, 0, 137);
    uint64_t v12 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)(v12 + 16) = 3;
    _s7SwiftUI19NavigationAuthorityVSgWOcTm_2((uint64_t)v24, v12 + 32, (unint64_t *)&lazy cache variable for type metadata for PresentationOptionsPreference?, (uint64_t)&type metadata for PresentationOptionsPreference);
    _s7SwiftUI19NavigationAuthorityVSgWOcTm_2((uint64_t)v24, v12 + 176, (unint64_t *)&lazy cache variable for type metadata for PresentationOptionsPreference?, (uint64_t)&type metadata for PresentationOptionsPreference);
    outlined init with take of NavigationState.StackContent?((uint64_t)v24, v12 + 320, (unint64_t *)&lazy cache variable for type metadata for PresentationOptionsPreference?, (uint64_t)&type metadata for PresentationOptionsPreference);
    *(void *)(v11 + 16) = v12;
    *(void *)(v11 + 32) = closure #1 in PresentationHostingController.init(rootView:delegate:drawsBackground:);
    *(void *)(v11 + 40) = 0;
    *(void *)(v11 + 48) = 10;
    *(void *)&v10[direct field offset for PresentationHostingController.oscillationDetector] = v11;
  }
  else
  {
    *(void *)&v10[direct field offset for PresentationHostingController.oscillationDetector] = 0;
  }

  swift_retain();
  char v13 = (char *)specialized UIHostingController.init(rootView:)();
  swift_release();
  *(void *)&v13[direct field offset for PresentationHostingController.delegate + 8] = &protocol witness table for UIKitInspectorV3Bridge<A>;
  swift_unknownObjectWeakAssign();
  int v14 = v13;
  specialized PresentationHostingController.setBackgroundTransparency(preferenceValue:)(0);
  _s2os6LoggerVSgMaTm_0(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<UITraitDefinition.Type>, (uint64_t (*)(uint64_t))type metadata accessor for UITraitDefinition.Type, MEMORY[0x1E4FBBE00]);
  uint64_t v15 = swift_allocObject();
  *(_OWORD *)(v15 + 16) = xmmword_188357320;
  uint64_t v16 = type metadata accessor for UITraitHorizontalSizeClass();
  uint64_t v17 = MEMORY[0x1E4FB0FA8];
  *(void *)(v15 + 32) = v16;
  *(void *)(v15 + 40) = v17;
  uint64_t v18 = type metadata accessor for UITraitVerticalSizeClass();
  uint64_t v19 = MEMORY[0x1E4FB0F10];
  *(void *)(v15 + 48) = v18;
  *(void *)(v15 + 56) = v19;
  uint64_t v20 = type metadata accessor for UITraitPresentationSemanticContext();
  uint64_t v21 = MEMORY[0x1E4FB10B8];
  *(void *)(v15 + 64) = v20;
  *(void *)(v15 + 72) = v21;
  uint64_t v22 = v14;
  UIViewController.registerForTraitChanges<A>(_:handler:)();
  swift_unknownObjectRelease();

  swift_bridgeObjectRelease();
  *(void *)&v24[0] = 0;
  lazy protocol witness table accessor for type RemoteSheetContainerViewGraphFeature and conformance RemoteSheetContainerViewGraphFeature();
  swift_retain();
  ViewGraph.append<A>(feature:)();
  swift_release();

  return v22;
}

uint64_t specialized PresentationHostingController.setupSheet<A>(for:presenter:placement:)(void *a1, char a2)
{
  char v3 = v2;
  v2[direct field offset for PresentationHostingController.presentingBridgeKind] = 1;
  type metadata accessor for (PresentationOptionsPreference, Bool)();
  static Update.ensure<A>(_:)();
  unsigned __int8 v6 = v45;
  long long v51 = v43;
  v52[0] = *(_OWORD *)v44;
  *(_OWORD *)((char *)v52 + 9) = *(_OWORD *)&v44[9];
  *(_OWORD *)&v47[16] = v39;
  long long v48 = v40;
  long long v49 = v41;
  long long v50 = v42;
  long long v46 = v37;
  *(_OWORD *)uint64_t v47 = v38;
  uint64_t v7 = qword_1883864D8[a2];
  specialized UIHostingController.configurePreferredTransition(pushingFrom:enablePreemption:)(a1, 1);
  id v8 = objc_msgSend(v2, sel__preferredTransition);

  if (!v8) {
    specialized PresentationHostingController.prepareModalPresentationStyle(_:presentationOptions:)(v7, (uint64_t)&v46);
  }
  id v9 = objc_msgSend(v3, sel_presentationController);
  if (v9)
  {
    uint64_t v10 = v9;
    self;
    id v11 = (id)swift_dynamicCastObjCClass();
    if (v11) {
      goto LABEL_8;
    }
  }
  id v12 = objc_msgSend(v3, sel_popoverPresentationController);
  if (!v12) {
    return outlined destroy of PresentationOptionsPreference((uint64_t)&v46);
  }
  char v13 = v12;
  id v11 = objc_msgSend(v12, sel_adaptiveSheetPresentationController);

  if (!v11) {
    return outlined destroy of PresentationOptionsPreference((uint64_t)&v46);
  }
LABEL_8:
  id v14 = objc_msgSend(v11, sel__setWantsFullScreen_, a2 == 4);
  if (a2 == 4)
  {
    MEMORY[0x1F4188790](v14);
    type metadata accessor for PreferenceValues.Value<PresentationOptionsPreference>(0, (unint64_t *)&lazy cache variable for type metadata for Bool?, MEMORY[0x1E4FBB390], MEMORY[0x1E4FBB718]);
    static Update.ensure<A>(_:)();
    char v15 = v37;
  }
  else
  {
    char v15 = 2;
  }
  specialized PresentationHostingController.updateFullScreenInteractiveDismissIfNeeded(disabled:)(v15);
  id v16 = v11;
  specialized PresentationHostingController.configureSizingOptions(for:sheetController:)((uint64_t)&v46, v11);

  if (static SemanticFeature.isEnabled.getter())
  {
    outlined init with copy of PresentationSizing?((uint64_t)&v51, (uint64_t)&v34);
    if (v35)
    {
      outlined init with take of OptionalBinaryInteger(&v34, (uint64_t)&v37);
    }
    else
    {
      *((void *)&v38 + 1) = &type metadata for AutomaticPresentationSizing;
      *(void *)&long long v39 = &protocol witness table for AutomaticPresentationSizing;
      outlined destroy of UIKitInspectorV3Bridge<TabItem.RootView>.PresentationKind?((uint64_t)&v34, (unint64_t *)&lazy cache variable for type metadata for PresentationSizing?, (uint64_t)&lazy cache variable for type metadata for PresentationSizing, (uint64_t)&protocol descriptor for PresentationSizing, (void (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for CVarArg);
    }
  }
  else
  {
    *(void *)&long long v39 = 0;
    long long v37 = 0u;
    long long v38 = 0u;
  }
  specialized PresentationHostingController.updatePreferredContentSizeIfNeeded(presenter:sizing:)(a1, (uint64_t)&v37);
  outlined destroy of UIKitInspectorV3Bridge<TabItem.RootView>.PresentationKind?((uint64_t)&v37, (unint64_t *)&lazy cache variable for type metadata for PresentationSizing?, (uint64_t)&lazy cache variable for type metadata for PresentationSizing, (uint64_t)&protocol descriptor for PresentationSizing, (void (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for CVarArg);
  id v17 = objc_msgSend(v3, sel_traitCollection);
  id v18 = objc_msgSend(v17, sel_horizontalSizeClass);

  if (v18 == (id)2)
  {
    id v19 = objc_msgSend(v3, sel_traitCollection);
    id v20 = objc_msgSend(v19, sel_verticalSizeClass);

    outlined init with copy of PresentationOptionsPreference((uint64_t)&v46, (uint64_t)&v37);
    if (v20 == (id)2)
    {
      outlined destroy of PresentationOptionsPreference((uint64_t)&v37);
      outlined init with copy of PresentationOptionsPreference((uint64_t)&v46, (uint64_t)&v34);
      goto LABEL_23;
    }
  }
  else
  {
    outlined init with copy of PresentationOptionsPreference((uint64_t)&v46, (uint64_t)&v37);
  }
  uint64_t v21 = *(void *)(v37 + 16);
  outlined destroy of PresentationOptionsPreference((uint64_t)&v37);
  outlined init with copy of PresentationOptionsPreference((uint64_t)&v46, (uint64_t)&v34);
  if (v21)
  {
    uint64_t v22 = v36;
    outlined destroy of PresentationOptionsPreference((uint64_t)&v34);
    if ((v22 | 2) != 2) {
      specialized PresentationHostingController.configureDetents(of:using:)((uint64_t)v16, (uint64_t)&v46);
    }
    goto LABEL_24;
  }
LABEL_23:
  outlined destroy of PresentationOptionsPreference((uint64_t)&v34);
LABEL_24:
  if (*(void *)v47)
  {
    Swift::UInt v31 = *((void *)&v46 + 1);
    unint64_t v32 = *(void *)v47;
    long long v33 = *(_OWORD *)&v47[8];
    type metadata accessor for PreferenceValues.Value<PresentationOptionsPreference>(0, &lazy cache variable for type metadata for Binding<PresentationDetent>, (uint64_t)&type metadata for PresentationDetent, MEMORY[0x1E4F41638]);
    MEMORY[0x18C113DA0](&v29);
    Swift::UInt v23 = v29;
    unint64_t v24 = v30;
    if (specialized Set.contains(_:)(v29, v30, v46))
    {
      Swift::UInt v31 = v23;
      unint64_t v32 = v24;
      id v25 = PresentationDetent.uiSheetDetentId.getter();
      objc_msgSend(v16, sel_setSelectedDetentIdentifier_, v25);
    }
    else
    {
      MEMORY[0x18C112B90](0xD000000000000052, 0x8000000188333910);
    }
  }
  outlined init with copy of PresentationOptionsPreference((uint64_t)&v46, (uint64_t)&v31);
  uint64_t v26 = (uint64_t)&v3[direct field offset for PresentationHostingController.lastPresentationOptions];
  swift_beginAccess();
  outlined assign with take of PopoverPresentation?((uint64_t)&v31, v26, (unint64_t *)&lazy cache variable for type metadata for PresentationOptionsPreference?, (uint64_t)&type metadata for PresentationOptionsPreference);
  swift_endAccess();
  if (MEMORY[0x18C119DF0](&v3[direct field offset for PresentationHostingController.delegate]))
  {
    uint64_t v27 = swift_dynamicCastObjCProtocolConditional();
    if (!v27) {
      swift_unknownObjectRelease();
    }
  }
  else
  {
    uint64_t v27 = 0;
  }
  objc_msgSend(v16, sel_setDelegate_, v27);
  swift_unknownObjectRelease();
  specialized PresentationHostingController.setBackgroundTransparency(preferenceValue:)(v6);

  return outlined destroy of PresentationOptionsPreference((uint64_t)&v46);
}

void specialized UIKitInspectorV3Bridge.preparePopover(presented:anchor:environment:presentationOptions:arrowEdges:wantsTransparentBackground:)(char *a1, uint64_t a2, uint64_t a3, uint64_t *a4, __int16 a5, char a6)
{
  uint64_t v10 = direct field offset for UIHostingController.host;
  id v11 = *(void **)&a1[direct field offset for UIHostingController.host];
  id v12 = (void *)MEMORY[0x1E4FBC8C8];
  uint64_t v13 = *(void *)((char *)v11 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v11) + 0x68));
  uint64_t v14 = *(void *)(v13 + 152);
  *(void *)(v13 + 152) = a2;
  *(void *)(v13 + 160) = a3;
  swift_retain();
  char v15 = v11;
  swift_retain();
  outlined consume of EnvironmentValues?(v14);
  if (MEMORY[0x18C119DF0](v13 + 24))
  {
    swift_getObjectType();
    LOWORD(v34) = 2;
    ViewRendererHost.invalidateProperties(_:mayDeferUpdate:)();

    swift_unknownObjectRelease();
  }
  else
  {
  }
  if (*(unsigned char *)(*(void *)&a1[v10] + *(void *)((*v12 & **(void **)&a1[v10]) + 0xD8)) == 2)
  {
    uint64_t v34 = a2;
    uint64_t v35 = a3;
    EnvironmentValues.explicitPreferredColorScheme.getter();
    if (v36 != 2)
    {
      id v16 = *(void **)&a1[v10];
      uint64_t v17 = *(void *)((*v12 & *v16) + 0xD8);
      uint64_t v18 = *((unsigned __int8 *)v16 + v17);
      *((unsigned char *)v16 + v17) = v36;
      id v19 = a1;
      id v20 = v16;
      specialized _UIHostingView.didChangeColorScheme(from:)(v18);
    }
  }
  specialized PresentationHostingController.prepareModalPresentationStyle(_:presentationOptions:)(7, (uint64_t)a4);
  specialized PresentationHostingController.setBackgroundTransparency(preferenceValue:)(a6 & 1);
  specialized PresentationHostingController.updateSheet(with:)(a4);
  id v21 = objc_msgSend(a1, sel_presentationController);
  if (v21)
  {
    uint64_t v22 = v21;
    self;
    uint64_t v23 = swift_dynamicCastObjCClass();
    if (v23)
    {
      unint64_t v24 = (void *)v23;
      id v25 = v22;
      id v26 = specialized UIKitInspectorV3Bridge.popoverPresentationDelegate.getter();
      objc_msgSend(v24, sel_setDelegate_, v26);
    }
    id v27 = specialized UIKitInspectorV3Bridge.popoverPresentationDelegate.getter();
    specialized PopoverPresentationDelegate.updateAnchor(_:presentationController:)(v22);
  }
  id v28 = objc_msgSend(a1, sel_popoverPresentationController);
  if (v28)
  {
    id v32 = v28;
    if (*(unsigned char *)(v33 + direct field offset for UIKitInspectorV3Bridge.overrideArrowDirections + 8) == 1)
    {
      uint64_t v34 = a2;
      uint64_t v35 = a3;
      EnvironmentValues.layoutDirection.getter();
      LOBYTE(v34) = v36;
      uint64_t v29 = specialized UIPopoverArrowDirection.init(edges:layoutDirection:)(a5 & 0x1FF, (char *)&v34);
      id v28 = v32;
    }
    else
    {
      uint64_t v29 = *(void *)(v33 + direct field offset for UIKitInspectorV3Bridge.overrideArrowDirections);
    }
    objc_msgSend(v28, sel_setPermittedArrowDirections_, v29);
  }
}

BOOL specialized UIKitInspectorV3Bridge.sourceViewVisibleInScrollView(anchor:transform:percentVisibilityRequired:)(double a1, uint64_t a2, long long *a3)
{
  uint64_t v5 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E4FBB718];
  _s2os6LoggerVSgMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for Logger?, MEMORY[0x1E4FBD360], MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v6 - 8);
  id v8 = (char *)&v19 - v7;
  long long v9 = a3[1];
  long long v22 = *a3;
  long long v23 = v9;
  uint64_t v24 = *((void *)a3 + 4);
  _s2os6LoggerVSgMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for CGRect?, (uint64_t (*)(uint64_t))type metadata accessor for CGRect, v5);
  Anchor.convert(to:)();
  if (v21)
  {
    static Log.presentation.getter();
    uint64_t v10 = type metadata accessor for Logger();
    uint64_t v11 = *(void *)(v10 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v8, 1, v10) == 1)
    {
      _s2os6LoggerVSgWOhTm_0((uint64_t)v8, (unint64_t *)&lazy cache variable for type metadata for Logger?, MEMORY[0x1E4FBD360]);
    }
    else
    {
      id v16 = Logger.logObject.getter();
      os_log_type_t v17 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v16, v17))
      {
        uint64_t v18 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v18 = 0;
        _os_log_impl(&dword_1872C6000, v16, v17, "Couldn't find popover source view size. Not going to compute whether\nto dismiss.", v18, 2u);
        MEMORY[0x18C119C60](v18, -1, -1);
      }

      (*(void (**)(char *, uint64_t))(v11 + 8))(v8, v10);
    }
    return 1;
  }
  else
  {
    long long v12 = v20;
    uint64_t v26 = 0;
    uint64_t v27 = 0;
    long long v28 = v20;
    uint64_t v24 = 0;
    long long v22 = 0u;
    long long v23 = 0u;
    char v25 = 2;
    long long v13 = a3[1];
    long long v19 = *a3;
    long long v20 = v13;
    uint64_t v21 = *((void *)a3 + 4);
    CGRect.convertAndClipToScrollView(to:transform:)();
    outlined destroy of CoordinateSpace((uint64_t)&v22);
    double v14 = *(double *)&v28 / *(double *)&v12;
    if (*(double *)&v28 / *(double *)&v12 >= *((double *)&v28 + 1) / *((double *)&v12 + 1)) {
      double v14 = *((double *)&v28 + 1) / *((double *)&v12 + 1);
    }
    return v14 >= a1;
  }
}

BOOL specialized UIKitInspectorV3Bridge.popoverCanPresent(popover:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for SearchEnvironmentProperties(0);
  MEMORY[0x1F4188790](v2);
  uint64_t v4 = (char *)&v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = *(void *)(a1 + 96);
  if (*(unsigned char *)(a1 + 117) == 1)
  {
    type metadata accessor for _UIHostingView<AnyView>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.__Key_searchStorage>, (uint64_t)&type metadata for EnvironmentValues.__Key_searchStorage, (uint64_t)&protocol witness table for EnvironmentValues.__Key_searchStorage, MEMORY[0x1E4F40930]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.__Key_searchStorage> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.__Key_searchStorage> and conformance EnvironmentPropertyKey<A>, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.__Key_searchStorage>, (uint64_t)&type metadata for EnvironmentValues.__Key_searchStorage, (uint64_t)&protocol witness table for EnvironmentValues.__Key_searchStorage);
    swift_retain_n();
    if (v5)
    {
      swift_retain_n();
      PropertyList.Tracker.value<A>(_:for:)();
      swift_release_n();
    }
    else
    {
      PropertyList.subscript.getter();
    }
    swift_release_n();
    if (!*(void *)&v12[0]) {
      return 0;
    }
    SearchEnvironmentStorage.properties.getter((uint64_t)v4);
    swift_release();
    outlined init with copy of Binding<PlatformSearchPopoverAnchor?>?((uint64_t)&v4[*(int *)(v2 + 28)], (uint64_t)v14);
    _s7SwiftUI12ViewIdentityV3key_AA16InspectorStorageV5valuetWOhTm_0((uint64_t)v4, type metadata accessor for SearchEnvironmentProperties);
    if (!*((void *)&v14[0] + 1))
    {
      _s2os6LoggerVSgWOhTm_0((uint64_t)v14, (unint64_t *)&lazy cache variable for type metadata for Binding<PlatformSearchPopoverAnchor?>?, (uint64_t (*)(uint64_t))type metadata accessor for Binding<PlatformSearchPopoverAnchor?>);
      return 0;
    }
    type metadata accessor for Binding<PlatformSearchPopoverAnchor?>();
    MEMORY[0x18C113DA0](v12);
    if (BYTE8(v12[0]))
    {
      _s7SwiftUI16PreferenceValuesV5ValueVy_AA019PresentationOptionsC0VGWOhTm_0((uint64_t)v12, (unint64_t *)&lazy cache variable for type metadata for PlatformSearchPopoverAnchor?, (uint64_t)&type metadata for PlatformSearchPopoverAnchor, MEMORY[0x1E4FBB718]);
      _s7SwiftUI12ViewIdentityV3key_AA16InspectorStorageV5valuetWOhTm_0((uint64_t)v14, (uint64_t (*)(void))type metadata accessor for Binding<PlatformSearchPopoverAnchor?>);
      return 0;
    }
    uint64_t v6 = (void *)MEMORY[0x18C119DF0](v12);
    _s7SwiftUI16PreferenceValuesV5ValueVy_AA019PresentationOptionsC0VGWOhTm_0((uint64_t)v12, (unint64_t *)&lazy cache variable for type metadata for PlatformSearchPopoverAnchor?, (uint64_t)&type metadata for PlatformSearchPopoverAnchor, MEMORY[0x1E4FBB718]);
    _s7SwiftUI12ViewIdentityV3key_AA16InspectorStorageV5valuetWOhTm_0((uint64_t)v14, (uint64_t (*)(void))type metadata accessor for Binding<PlatformSearchPopoverAnchor?>);
    if (!v6) {
      return 0;
    }
  }
  type metadata accessor for _UIHostingView<AnyView>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.__Key_popoverAutomaticallyDismissesWhenScrolledOutOfView>, (uint64_t)&type metadata for EnvironmentValues.__Key_popoverAutomaticallyDismissesWhenScrolledOutOfView, (uint64_t)&protocol witness table for EnvironmentValues.__Key_popoverAutomaticallyDismissesWhenScrolledOutOfView, MEMORY[0x1E4F40930]);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.__Key_searchStorage> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.__Key_popoverAutomaticallyDismissesWhenScrolledOutOfView> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.__Key_popoverAutomaticallyDismissesWhenScrolledOutOfView>, (uint64_t)&type metadata for EnvironmentValues.__Key_popoverAutomaticallyDismissesWhenScrolledOutOfView, (uint64_t)&protocol witness table for EnvironmentValues.__Key_popoverAutomaticallyDismissesWhenScrolledOutOfView);
  swift_retain_n();
  if (v5)
  {
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    PropertyList.subscript.getter();
  }
  swift_release_n();
  if ((v14[0] & 1) != 0 && (*(unsigned char *)(a1 + 116) & 1) == 0)
  {
    int v8 = *(_DWORD *)(a1 + 112);
    uint64_t v9 = *(void *)(a1 + 104);
    AGGraphClearUpdate();
    *(void *)&v14[0] = v9;
    DWORD2(v14[0]) = v8;
    AnchorGeometry.transform.getter();
    AGGraphSetUpdate();
    v14[0] = v12[0];
    v14[1] = v12[1];
    uint64_t v15 = v13;
    BOOL v7 = specialized UIKitInspectorV3Bridge.sourceViewVisibleInScrollView(anchor:transform:percentVisibilityRequired:)(0.5, *(void *)(a1 + 16), v14);
    outlined release of ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?((uint64_t)v14);
  }
  else
  {
    return 1;
  }
  return v7;
}

uint64_t sub_187BAD5D4()
{
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  if (*(void *)(v0 + 96)) {
    __swift_destroy_boxed_opaque_existential_1(v0 + 72);
  }
  swift_release();
  swift_release();

  return swift_deallocObject();
}

void partial apply for specialized closure #1 in UIKitInspectorV3Bridge.updateAnchor()()
{
  specialized closure #1 in UIKitInspectorV3Bridge.updateAnchor()(*(void *)(v0 + 16), v0 + 24, *(void **)(v0 + 144));
}

uint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.__Key_searchStorage> and conformance EnvironmentPropertyKey<A>(unint64_t *a1, unint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for _UIHostingView<AnyView>(255, a2, a3, a4, MEMORY[0x1E4F40930]);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t outlined init with copy of Binding<PlatformSearchPopoverAnchor?>?(uint64_t a1, uint64_t a2)
{
  _s2os6LoggerVSgMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for Binding<PlatformSearchPopoverAnchor?>?, (uint64_t (*)(uint64_t))type metadata accessor for Binding<PlatformSearchPopoverAnchor?>, MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined assign with take of UIKitInspectorV3Bridge<TabItem.RootView>.PresentationKind(uint64_t a1, uint64_t a2)
{
  type metadata accessor for UIKitInspectorV3Bridge<TabItem.RootView>.PresentationKind(0, &lazy cache variable for type metadata for UIKitInspectorV3Bridge<TabItem.RootView>.PresentationKind, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))type metadata accessor for UIKitInspectorV3Bridge.PresentationKind);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_187BAD7D4()
{
  swift_release();

  swift_release();
  swift_release();
  swift_release();
  if (*(void *)(v0 + 104)) {
    __swift_destroy_boxed_opaque_existential_1(v0 + 80);
  }
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  if (*(void *)(v0 + 168))
  {
    swift_release();
    swift_release();
  }
  uint64_t v1 = *(void **)(v0 + 200);
  if ((unint64_t)v1 >= 3) {

  }
  if (*(void *)(v0 + 272)) {
    __swift_destroy_boxed_opaque_existential_1(v0 + 248);
  }

  return swift_deallocObject();
}

void partial apply for specialized closure #2 in UIKitInspectorV3Bridge.replaceExistingPopover(_:with:presenter:presentationOptions:wantsTransparentBackground:)()
{
  specialized closure #2 in UIKitInspectorV3Bridge.replaceExistingPopover(_:with:presenter:presentationOptions:wantsTransparentBackground:)(*(void *)(v0 + 16), *(char **)(v0 + 24), (uint64_t *)(v0 + 32), (uint64_t *)(v0 + 152), *(unsigned char *)(v0 + 289), *(void **)(v0 + 296));
}

uint64_t outlined init with take of UIKitInspectorV3Bridge<TabItem.RootView>.PresentationKind(uint64_t a1, uint64_t a2)
{
  type metadata accessor for UIKitInspectorV3Bridge<TabItem.RootView>.PresentationKind(0, &lazy cache variable for type metadata for UIKitInspectorV3Bridge<TabItem.RootView>.PresentationKind, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))type metadata accessor for UIKitInspectorV3Bridge.PresentationKind);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t partial apply for specialized closure #1 in PresentationHostingController.setupSheet<A>(for:presenter:placement:)@<X0>(uint64_t a1@<X8>)
{
  return specialized closure #1 in PresentationHostingController.setupSheet<A>(for:presenter:placement:)(a1);
}

uint64_t outlined destroy of UIKitInspectorV3Bridge<TabItem.RootView>.PresentationKind?(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t, uint64_t, uint64_t))
{
  type metadata accessor for PresentationSizing?(0, a2, a3, a4, a5);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(a1, v6);
  return a1;
}

uint64_t outlined assign with take of PopoverPresentation?(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t a4)
{
  type metadata accessor for PreferenceValues.Value<PresentationOptionsPreference>(0, a3, a4, MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a2, a1, v6);
  return a2;
}

uint64_t partial apply for specialized closure #1 in PresentationHostingController.setWantsFullScreen(placement:sheetController:)@<X0>(unsigned char *a1@<X8>)
{
  return specialized closure #1 in PresentationHostingController.setWantsFullScreen(placement:sheetController:)(a1);
}

uint64_t partial apply for specialized closure #1 in UIView._findMatchedTransitionSource<A>(id:in:)(uint64_t *a1)
{
  return specialized closure #1 in UIView._findMatchedTransitionSource<A>(id:in:)(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_187BADA48()
{
  swift_release();
  swift_release();

  return swift_deallocObject();
}

id partial apply for specialized closure #1 in UIHostingController.configurePreferredTransition(pushingFrom:enablePreemption:)(uint64_t a1)
{
  return specialized closure #1 in UIHostingController.configurePreferredTransition(pushingFrom:enablePreemption:)(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(char **)(v1 + 32));
}

double partial apply for specialized closure #1 in UIHostingController.configureBackgroundForZoom()@<D0>(uint64_t a1@<X8>)
{
  return specialized closure #1 in UIHostingController.configureBackgroundForZoom()(a1);
}

uint64_t sub_187BADAB8()
{
  return swift_deallocObject();
}

id partial apply for closure #1 in closure #1 in UIHostingController.configurePreferredTransition(pushingFrom:enablePreemption:)(uint64_t a1)
{
  return closure #1 in closure #1 in UIHostingController.configurePreferredTransition(pushingFrom:enablePreemption:)(a1, *(void *)(v1 + 16));
}

void partial apply for specialized closure #1 in UIKitInspectorV3Bridge.dismissAndReset(viewController:)()
{
  specialized closure #1 in UIKitInspectorV3Bridge.dismissAndReset(viewController:)(v0);
}

void type metadata accessor for (key: ViewIdentity, value: InspectorStorage)()
{
  if (!lazy cache variable for type metadata for (key: ViewIdentity, value: InspectorStorage))
  {
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (key: ViewIdentity, value: InspectorStorage));
    }
  }
}

uint64_t outlined destroy of InspectorStorage(uint64_t a1)
{
  return a1;
}

uint64_t partial apply for closure #1 in UIKitInspectorV3Bridge.updateExistingInspector(_:values:)@<X0>(char *a1@<X8>)
{
  return closure #1 in UIKitInspectorV3Bridge.updateExistingInspector(_:values:)(*(void *)(v1 + 16), a1);
}

uint64_t sub_187BADBC8()
{
  uint64_t v1 = *(void *)(v0 + 24);
  if (v1)
  {
    if (v1 == 1) {
      goto LABEL_7;
    }
    swift_release();
    swift_release();
  }
  if (*(void *)(v0 + 88)) {
    __swift_destroy_boxed_opaque_existential_1(v0 + 64);
  }
  swift_release();
  swift_release();
  swift_release();
  swift_release();
LABEL_7:

  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in UIKitInspectorV3Bridge.updateExistingInspector(_:values:)()
{
  return closure #2 in UIKitInspectorV3Bridge.updateExistingInspector(_:values:)(v0 + 16);
}

void specialized UIKitNavigationController.init(coder:)()
{
  v0[OBJC_IVAR____TtC7SwiftUI25UIKitNavigationController_isDataDriven] = 0;
  uint64_t v1 = OBJC_IVAR____TtC7SwiftUI25UIKitNavigationController_update;
  type metadata accessor for PlatformBarUpdater();
  uint64_t v2 = (void *)swift_allocObject();
  v2[2] = specialized InferredToolbarState.init()();
  v2[3] = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
  v2[5] = 0;
  swift_unknownObjectWeakInit();
  uint64_t v3 = MEMORY[0x1E4FBC870];
  *(void *)&v0[v1] = v2;
  v2[7] = 0;
  v2[8] = 0;
  v0[OBJC_IVAR____TtC7SwiftUI25UIKitNavigationController_isTransitioningToSize] = 0;
  v2[6] = v3;
  uint64_t v4 = &v0[OBJC_IVAR____TtC7SwiftUI25UIKitNavigationController_navigationAuthority];
  *(_OWORD *)uint64_t v4 = xmmword_18834BB90;
  *((void *)v4 + 2) = 0;
  uint64_t v5 = &v0[OBJC_IVAR____TtC7SwiftUI25UIKitNavigationController_context];
  *(_OWORD *)uint64_t v5 = xmmword_1883863B0;
  *((void *)v5 + 2) = 0;
  uint64_t v6 = &v0[OBJC_IVAR____TtC7SwiftUI25UIKitNavigationController_platformNavigationPresentationStrategy];
  *(_OWORD *)uint64_t v6 = 0u;
  *((_OWORD *)v6 + 1) = 0u;
  *((void *)v6 + 4) = 0;
  v0[OBJC_IVAR____TtC7SwiftUI25UIKitNavigationController_isSecure] = 0;
  *(void *)&v0[OBJC_IVAR____TtC7SwiftUI25UIKitNavigationController_backgroundHost] = 0;

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void specialized UIKitTabBarController.init(coder:)()
{
  uint64_t v1 = OBJC_IVAR____TtC7SwiftUI21UIKitTabBarController_popoverBridge;
  type metadata accessor for UIKitInspectorV3Bridge<TabItem.RootView>.PresentationKind(0, (unint64_t *)&lazy cache variable for type metadata for UIKitInspectorV3Bridge<TabItem.RootView>, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))type metadata accessor for UIKitInspectorV3Bridge);
  *(void *)&v0[v1] = objc_msgSend(objc_allocWithZone(v2), sel_init);
  uint64_t v3 = OBJC_IVAR____TtC7SwiftUI21UIKitTabBarController_update;
  type metadata accessor for PlatformBarUpdater();
  uint64_t v4 = (void *)swift_allocObject();
  void v4[2] = specialized InferredToolbarState.init()();
  unsigned char v4[3] = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
  v4[5] = 0;
  swift_unknownObjectWeakInit();
  uint64_t v5 = MEMORY[0x1E4FBC870];
  v4[7] = 0;
  v4[8] = 0;
  v4[6] = v5;
  *(void *)&v0[v3] = v4;
  *(void *)&v0[OBJC_IVAR____TtC7SwiftUI21UIKitTabBarController_sidebarBottomBarHost] = 0;
  *(void *)&v0[OBJC_IVAR____TtC7SwiftUI21UIKitTabBarController_backgroundHost] = 0;

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void type metadata accessor for UIKitInspectorV3Bridge<TabItem.RootView>.PresentationKind(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, unint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = lazy protocol witness table accessor for type TabItem.RootView and conformance TabItem.RootView();
    unint64_t v7 = a3(a1, &type metadata for TabItem.RootView, v6);
    if (!v8) {
      atomic_store(v7, a2);
    }
  }
}

void partial apply for closure #2 in UIKitNavigationController.viewWillTransition(to:with:)(uint64_t a1)
{
  closure #2 in UIKitNavigationController.viewWillTransition(to:with:)(a1, v1);
}

void type metadata accessor for AnyNavigationLinkPresentedViewStorage<ModifiedContent<ModifiedContent<GenericViewControllerRepresentable, NavigationItemAdaptorModifier>, _SafeAreaRegionsIgnoringLayout>>()
{
  if (!lazy cache variable for type metadata for AnyNavigationLinkPresentedViewStorage<ModifiedContent<ModifiedContent<GenericViewControllerRepresentable, NavigationItemAdaptorModifier>, _SafeAreaRegionsIgnoringLayout>>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<GenericViewControllerRepresentable, NavigationItemAdaptorModifier>, _SafeAreaRegionsIgnoringLayout>();
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<GenericViewControllerRepresentable, NavigationItemAdaptorModifier>, _SafeAreaRegionsIgnoringLayout> and conformance <> ModifiedContent<A, B>();
    unint64_t v0 = type metadata accessor for AnyNavigationLinkPresentedViewStorage();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for AnyNavigationLinkPresentedViewStorage<ModifiedContent<ModifiedContent<GenericViewControllerRepresentable, NavigationItemAdaptorModifier>, _SafeAreaRegionsIgnoringLayout>>);
    }
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<GenericViewControllerRepresentable, NavigationItemAdaptorModifier>, _SafeAreaRegionsIgnoringLayout>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<GenericViewControllerRepresentable, NavigationItemAdaptorModifier>, _SafeAreaRegionsIgnoringLayout>)
  {
    type metadata accessor for _UIHostingView<AnyView>(255, &lazy cache variable for type metadata for ModifiedContent<GenericViewControllerRepresentable, NavigationItemAdaptorModifier>, (uint64_t)&type metadata for GenericViewControllerRepresentable, (uint64_t)&type metadata for NavigationItemAdaptorModifier, MEMORY[0x1E4F3FBA0]);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<GenericViewControllerRepresentable, NavigationItemAdaptorModifier>, _SafeAreaRegionsIgnoringLayout>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<GenericViewControllerRepresentable, NavigationItemAdaptorModifier>, _SafeAreaRegionsIgnoringLayout> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<GenericViewControllerRepresentable, NavigationItemAdaptorModifier>, _SafeAreaRegionsIgnoringLayout> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<GenericViewControllerRepresentable, NavigationItemAdaptorModifier>, _SafeAreaRegionsIgnoringLayout> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<GenericViewControllerRepresentable, NavigationItemAdaptorModifier>, _SafeAreaRegionsIgnoringLayout>();
    lazy protocol witness table accessor for type ModifiedContent<GenericViewControllerRepresentable, NavigationItemAdaptorModifier> and conformance <> ModifiedContent<A, B>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<GenericViewControllerRepresentable, NavigationItemAdaptorModifier>, _SafeAreaRegionsIgnoringLayout> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<GenericViewControllerRepresentable, NavigationItemAdaptorModifier> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<GenericViewControllerRepresentable, NavigationItemAdaptorModifier> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<GenericViewControllerRepresentable, NavigationItemAdaptorModifier> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for _UIHostingView<AnyView>(255, &lazy cache variable for type metadata for ModifiedContent<GenericViewControllerRepresentable, NavigationItemAdaptorModifier>, (uint64_t)&type metadata for GenericViewControllerRepresentable, (uint64_t)&type metadata for NavigationItemAdaptorModifier, MEMORY[0x1E4F3FBA0]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<GenericViewControllerRepresentable, NavigationItemAdaptorModifier> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t outlined destroy of UIKitNavigationController.PlatformNavigationRequestStrategy(uint64_t a1)
{
  if (*(void *)(a1 + 24) >= 0xFFFFFFFFuLL) {
    __swift_destroy_boxed_opaque_existential_1(a1);
  }
  return a1;
}

BOOL static ButtonRole.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

void static ButtonRole.destructive.getter(unsigned char *a1@<X8>)
{
  *a1 = 1;
}

uint64_t VisualEffect.blur(radius:opaque:)()
{
  return VisualEffect.rendererEffect<A>(_:)();
}

unint64_t lazy protocol witness table accessor for type _BlurEffect and conformance _BlurEffect()
{
  unint64_t result = lazy protocol witness table cache variable for type _BlurEffect and conformance _BlurEffect;
  if (!lazy protocol witness table cache variable for type _BlurEffect and conformance _BlurEffect)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _BlurEffect and conformance _BlurEffect);
  }
  return result;
}

uint64_t sub_187BAE268()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t VisualEffect.brightness(_:)()
{
  return VisualEffect.rendererEffect<A>(_:)();
}

uint64_t sub_187BAE304()
{
  return swift_getOpaqueTypeConformance2();
}

ValueMetadata *type metadata accessor for ToolbarMenuStyle()
{
  return &type metadata for ToolbarMenuStyle;
}

uint64_t associated type witness table accessor for MenuStyle.Body : View in ToolbarMenuStyle()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t ToolbarMenuStyle.makeBody(configuration:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  uint64_t v5 = a1[2];
  uint64_t v6 = a1[3];
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v8 = swift_getKeyPath();
  outlined copy of AppIntentExecutor?(v3);
  outlined copy of AppIntentExecutor?(v5);
  Namespace.wrappedValue.getter();
  _print_unlocked<A, B>(_:_:)();
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = 0;
  *(void *)(result + 24) = 0xE000000000000000;
  *(void *)a2 = v3;
  *(void *)(a2 + 8) = v4;
  *(void *)(a2 + 16) = v5;
  *(void *)(a2 + 24) = v6;
  *(void *)(a2 + 32) = 0;
  *(unsigned char *)(a2 + 40) = 0;
  *(void *)(a2 + 48) = KeyPath;
  *(unsigned char *)(a2 + 56) = 0;
  *(void *)(a2 + 64) = v8;
  *(unsigned char *)(a2 + 72) = 0;
  *(void *)(a2 + 80) = partial apply for closure #1 in View.platformItemIdentifier(_:);
  *(void *)(a2 + 88) = result;
  return result;
}

uint64_t protocol witness for MenuStyle.makeBody(configuration:) in conformance ToolbarMenuStyle@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return ToolbarMenuStyle.makeBody(configuration:)(a1, a2);
}

uint64_t sub_187BAE4B4()
{
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

uint64_t sub_187BAE4EC()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Menu<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, MenuStyleModifier<ButtonMenuStyle>>, _PreferenceTransformModifier<PlatformItemList.Key>> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Menu<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, MenuStyleModifier<ButtonMenuStyle>>, _PreferenceTransformModifier<PlatformItemList.Key>> and conformance <> ModifiedContent<A, B>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Menu<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, MenuStyleModifier<ButtonMenuStyle>>, _PreferenceTransformModifier<PlatformItemList.Key>>, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<Menu<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, MenuStyleModifier<ButtonMenuStyle>> and conformance <> ModifiedContent<A, B>, (void (*)(void))lazy protocol witness table accessor for type _PreferenceTransformModifier<PlatformItemList.Key> and conformance _PreferenceTransformModifier<A>);
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Menu<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, MenuStyleModifier<ButtonMenuStyle>>, _PreferenceTransformModifier<PlatformItemList.Key>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Menu<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, MenuStyleModifier<ButtonMenuStyle>>, _PreferenceTransformModifier<PlatformItemList.Key>>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<Menu<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, MenuStyleModifier<ButtonMenuStyle>>();
    _s7SwiftUI23InterfaceIdiomPredicateVyAA03MaccD0VGMaTm_1(255, &lazy cache variable for type metadata for _PreferenceTransformModifier<PlatformItemList.Key>, (uint64_t)&type metadata for PlatformItemList.Key, (uint64_t)&protocol witness table for PlatformItemList.Key, MEMORY[0x1E4F41108]);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Menu<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, MenuStyleModifier<ButtonMenuStyle>>, _PreferenceTransformModifier<PlatformItemList.Key>>);
    }
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<Menu<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, MenuStyleModifier<ButtonMenuStyle>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<Menu<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, MenuStyleModifier<ButtonMenuStyle>>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<Menu<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>();
    type metadata accessor for PrimitiveButtonStyleContainerModifier<BorderedButtonStyle>(255, &lazy cache variable for type metadata for MenuStyleModifier<ButtonMenuStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type ButtonMenuStyle and conformance ButtonMenuStyle, (uint64_t)&type metadata for ButtonMenuStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for MenuStyleModifier);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<Menu<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, MenuStyleModifier<ButtonMenuStyle>>);
    }
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<Menu<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<Menu<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)
  {
    type metadata accessor for ModifiedContent<Menu<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle>, EmptyModifier>>();
    type metadata accessor for PrimitiveButtonStyleContainerModifier<BorderedButtonStyle>(255, &lazy cache variable for type metadata for PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type BorderlessButtonStyle and conformance BorderlessButtonStyle, (uint64_t)&type metadata for BorderlessButtonStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PrimitiveButtonStyleContainerModifier);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<Menu<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>);
    }
  }
}

void type metadata accessor for ModifiedContent<Menu<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle>, EmptyModifier>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<Menu<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle>, EmptyModifier>>)
  {
    type metadata accessor for Menu<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content>();
    type metadata accessor for StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle>, EmptyModifier>();
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<Menu<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle>, EmptyModifier>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type ButtonMenuStyle and conformance ButtonMenuStyle()
{
  unint64_t result = lazy protocol witness table cache variable for type ButtonMenuStyle and conformance ButtonMenuStyle;
  if (!lazy protocol witness table cache variable for type ButtonMenuStyle and conformance ButtonMenuStyle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ButtonMenuStyle and conformance ButtonMenuStyle);
  }
  return result;
}

void _s7SwiftUI23InterfaceIdiomPredicateVyAA03MaccD0VGMaTm_1(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = a5(0, a3, a4);
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<Menu<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, MenuStyleModifier<ButtonMenuStyle>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<Menu<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, MenuStyleModifier<ButtonMenuStyle>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<Menu<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, MenuStyleModifier<ButtonMenuStyle>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<Menu<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, MenuStyleModifier<ButtonMenuStyle>>();
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Menu<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, MenuStyleModifier<ButtonMenuStyle>>, _PreferenceTransformModifier<PlatformItemList.Key>> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<Menu<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>> and conformance <> ModifiedContent<A, B>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<Menu<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<Menu<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>, (void (*)(void))lazy protocol witness table accessor for type PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle> and conformance PrimitiveButtonStyleContainerModifier<A>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<Menu<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, MenuStyleModifier<ButtonMenuStyle>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<Menu<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Menu<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, MenuStyleModifier<ButtonMenuStyle>>, _PreferenceTransformModifier<PlatformItemList.Key>> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<Menu<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<Menu<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle>, EmptyModifier>>, (void (*)(void))lazy protocol witness table accessor for type Menu<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content> and conformance Menu<A, B>, (void (*)(void))lazy protocol witness table accessor for type StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>);
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Menu<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, MenuStyleModifier<ButtonMenuStyle>>, _PreferenceTransformModifier<PlatformItemList.Key>> and conformance <> ModifiedContent<A, B>(unint64_t *a1, void (*a2)(uint64_t), void (*a3)(void), void (*a4)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    a3();
    a4();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t static _AppearanceActionModifier._makeScene(modifier:inputs:body:)(uint64_t a1, uint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t *))
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *a2;
  int v4 = *((_DWORD *)a2 + 2);
  uint64_t v5 = a2[2];
  unsigned int v6 = *((_DWORD *)a2 + 6);
  unsigned int v7 = *((_DWORD *)a2 + 7);
  unsigned int v8 = *((_DWORD *)a2 + 8);
  unsigned int v9 = *((_DWORD *)a2 + 9);
  long long v14 = *(_OWORD *)(a2 + 5);
  int v12 = *((_DWORD *)a2 + 14);
  type metadata accessor for _GraphValue<_AppearanceActionModifier>();
  _GraphValue.value.getter();
  LODWORD(v16) = v4;
  DWORD1(v22) = DWORD1(v14);
  _GraphInputs.phase.getter();
  AppearanceEffect.init(modifier:phase:)();
  uint64_t v24 = v3;
  uint64_t v25 = v16;
  uint64_t v26 = v5;
  unint64_t v27 = __PAIR64__(v7, v6);
  unint64_t v28 = __PAIR64__(v9, v8);
  char v29 = v14;
  uint64_t v30 = *(void *)((char *)&v22 + 4);
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  lazy protocol witness table accessor for type AppearanceEffect and conformance AppearanceEffect();
  Attribute.init<A>(body:value:flags:update:)();
  outlined consume of NavigationEventHandlers?(v16, v5, __SPAIR64__(v7, v6));
  static AGAttributeFlags.transactional.getter();
  static AGAttributeFlags.removable.getter();
  uint64_t v10 = AGGraphSetFlags();
  uint64_t v15 = v3;
  LODWORD(v16) = v4;
  uint64_t v17 = v5;
  unsigned int v18 = v6;
  unsigned int v19 = v7;
  unsigned int v20 = v8;
  unsigned int v21 = v9;
  long long v22 = v14;
  int v23 = v12;
  return a3(v10, &v15);
}

void type metadata accessor for _GraphValue<_AppearanceActionModifier>()
{
  if (!lazy cache variable for type metadata for _GraphValue<_AppearanceActionModifier>)
  {
    unint64_t v0 = type metadata accessor for _GraphValue();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _GraphValue<_AppearanceActionModifier>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type AppearanceEffect and conformance AppearanceEffect()
{
  unint64_t result = lazy protocol witness table cache variable for type AppearanceEffect and conformance AppearanceEffect;
  if (!lazy protocol witness table cache variable for type AppearanceEffect and conformance AppearanceEffect)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AppearanceEffect and conformance AppearanceEffect);
  }
  return result;
}

uint64_t static Animation.timingCurve(_:duration:)(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 32) == 1)
  {
    if (*(void *)(a1 + 16) | *(void *)(a1 + 8) | *(void *)a1 | *(void *)(a1 + 24))
    {
      lazy protocol witness table accessor for type UnitCurveAnimation and conformance UnitCurveAnimation();
      return Animation.init<A>(_:)();
    }
    else
    {
      return static Animation.linear(duration:)();
    }
  }
  else
  {
    return static Animation.timingCurve(_:_:_:_:duration:)();
  }
}

unint64_t lazy protocol witness table accessor for type UnitCurveAnimation and conformance UnitCurveAnimation()
{
  unint64_t result = lazy protocol witness table cache variable for type UnitCurveAnimation and conformance UnitCurveAnimation;
  if (!lazy protocol witness table cache variable for type UnitCurveAnimation and conformance UnitCurveAnimation)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UnitCurveAnimation and conformance UnitCurveAnimation);
  }
  return result;
}

uint64_t key path getter for EnvironmentValues.accessibilityEnabled : EnvironmentValues@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = EnvironmentValues.accessibilityEnabled.getter();
  *a1 = result & 1;
  return result;
}

uint64_t key path setter for EnvironmentValues.accessibilityEnabled : EnvironmentValues()
{
  return EnvironmentValues.accessibilityEnabled.setter();
}

uint64_t _ArchivedViewStates.init()@<X0>(void *a1@<X8>)
{
  uint64_t v2 = type metadata accessor for UUID();
  MEMORY[0x1F4188790](v2 - 8);
  *a1 = 0;
  uint64_t v3 = (int *)type metadata accessor for _ArchivedViewStates(0);
  *(void *)((char *)a1 + v3[6]) = 0;
  uint64_t v4 = v3[7];
  type metadata accessor for MutableBox<[Int : Any]>(0, &lazy cache variable for type metadata for MutableBox<[Int : Any]>, (uint64_t (*)(uint64_t))type metadata accessor for [Int : Any], MEMORY[0x1E4F3F398]);
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = MEMORY[0x1E4FBC868];
  *(void *)((char *)a1 + v4) = v5;
  *(void *)((char *)a1 + v3[8]) = 0;
  default argument 1 of ArchivedViewCore.Metadata.init(majorVersion:stateAttachments:stableIDAttachment:dataAttachment:archiveID:deploymentVersion:)();
  UUID.init()();
  return ArchivedViewCore.Metadata.init(majorVersion:stateAttachments:stableIDAttachment:dataAttachment:archiveID:deploymentVersion:)();
}

uint64_t type metadata accessor for _ArchivedViewStates(uint64_t a1)
{
  return type metadata accessor for SortableTableHeaderButton(a1, (uint64_t *)&type metadata singleton initialization cache for _ArchivedViewStates);
}

void _ArchivedViewStates.init(reader:delegate:)(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v6 = type metadata accessor for ArchivedViewCore.Metadata();
  MEMORY[0x1F4188790](v6);
  unsigned int v8 = (char *)v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  unsigned int v9 = (int *)type metadata accessor for _ArchivedViewStates(0);
  uint64_t v31 = v9[6];
  *(void *)((char *)a3 + v31) = 0;
  uint64_t v10 = v9[7];
  type metadata accessor for MutableBox<[Int : Any]>(0, &lazy cache variable for type metadata for MutableBox<[Int : Any]>, (uint64_t (*)(uint64_t))type metadata accessor for [Int : Any], MEMORY[0x1E4F3F398]);
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = MEMORY[0x1E4FBC868];
  v30[2] = v10;
  *(void *)((char *)a3 + v10) = v11;
  uint64_t v12 = v9[8];
  static ViewDecoders.registerStandard()();
  *a3 = a1;
  v30[1] = v12;
  *(void *)((char *)a3 + v12) = a2;
  type metadata accessor for JSONDecoder();
  swift_allocObject();
  swift_retain();
  swift_retain();
  JSONDecoder.init()();
  swift_retain();
  uint64_t v13 = ArchiveReader.endIndex.getter();
  if (ArchiveReader.endIndex.getter() < 0)
  {
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  uint64_t v14 = ArchiveReader.endIndex.getter();
  swift_release();
  if (v13 < 0 || v14 < v13) {
    goto LABEL_19;
  }
  v30[0] = v9;
  uint64_t v15 = ArchiveReader.subscript.getter();
  unint64_t v17 = v16;
  lazy protocol witness table accessor for type ArchiveReader and conformance ArchiveReader(&lazy protocol witness table cache variable for type ArchivedViewCore.Metadata and conformance ArchivedViewCore.Metadata, MEMORY[0x1E4F3FC60]);
  uint64_t v18 = v32;
  dispatch thunk of JSONDecoder.decode<A>(_:from:)();
  if (v18)
  {
    swift_release();
    swift_release();
    outlined consume of Data._Representation(v15, v17);
    swift_release();
    swift_release();
LABEL_11:
    swift_bridgeObjectRelease();
    swift_release();
    goto LABEL_12;
  }
  outlined consume of Data._Representation(v15, v17);
  swift_release();
  uint64_t v19 = v30[0];
  uint64_t v20 = (uint64_t)a3 + *(int *)(v30[0] + 20);
  outlined init with take of _ArchivedView((uint64_t)v8, v20, MEMORY[0x1E4F3FC60]);
  if (*(void *)v20 != 13)
  {
    type metadata accessor for _ArchivedViewStates.Error(0);
    lazy protocol witness table accessor for type ArchiveReader and conformance ArchiveReader(&lazy protocol witness table cache variable for type _ArchivedViewStates.Error and conformance _ArchivedViewStates.Error, (void (*)(uint64_t))type metadata accessor for _ArchivedViewStates.Error);
    swift_allocError();
    uint64_t v22 = v21;
    uint64_t v23 = type metadata accessor for UUID();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v23 - 8) + 56))(v22, 1, 2, v23);
    goto LABEL_10;
  }
  if (*(unsigned char *)(v20 + 24) == 1)
  {
    swift_release();
LABEL_12:
    swift_release();
    return;
  }
  uint64_t v24 = *(void *)(v20 + 16);
  swift_retain();
  uint64_t v25 = ArchiveReader.endIndex.getter();
  swift_release();
  if ((v25 & 0x8000000000000000) == 0)
  {
    if ((v24 & 0x8000000000000000) == 0 && v24 < v25)
    {
      ArchiveReader.subscript.getter();
      ProtobufDecoder.init(_:)();
      _DisplayList_StableIdentityMap.init(from:)();
      swift_release();
      swift_release();
      char v29 = v33;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      *(void *)((char *)a3 + v31) = v34;
      return;
    }
    type metadata accessor for _ArchivedViewStates.Error(0);
    lazy protocol witness table accessor for type ArchiveReader and conformance ArchiveReader(&lazy protocol witness table cache variable for type _ArchivedViewStates.Error and conformance _ArchivedViewStates.Error, (void (*)(uint64_t))type metadata accessor for _ArchivedViewStates.Error);
    swift_allocError();
    uint64_t v27 = v26;
    uint64_t v28 = type metadata accessor for UUID();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v28 - 8) + 56))(v27, 2, 2, v28);
LABEL_10:
    swift_willThrow();
    swift_release();
    swift_release();
    swift_release();
    outlined destroy of _ArchivedView((uint64_t)a3 + *(int *)(v19 + 20), MEMORY[0x1E4F3FC60]);
    goto LABEL_11;
  }
LABEL_20:
  __break(1u);
}

uint64_t static ViewDecoders.registerStandard()()
{
  type metadata accessor for ArchivableFactory<ArchivableLinkModifier>();
  lazy protocol witness table accessor for type ArchiveReader and conformance ArchiveReader(&lazy protocol witness table cache variable for type ArchivableFactory<ArchivableLinkModifier> and conformance ArchivableFactory<A>, (void (*)(uint64_t))type metadata accessor for ArchivableFactory<ArchivableLinkModifier>);
  lazy protocol witness table accessor for type ArchiveReader and conformance ArchiveReader(&lazy protocol witness table cache variable for type ArchivableFactory<ArchivableLinkModifier> and conformance ArchivableFactory<A>, (void (*)(uint64_t))type metadata accessor for ArchivableFactory<ArchivableLinkModifier>);
  static ViewDecoders.registerDecodableFactoryType<A>(_:forID:)();
  type metadata accessor for ArchivableFactory<TimelineProgressView<ArchivableLinearProgressView.Base>.ArchivableTimelineProgressView>();
  lazy protocol witness table accessor for type ArchiveReader and conformance ArchiveReader(&lazy protocol witness table cache variable for type ArchivableFactory<TimelineProgressView<ArchivableLinearProgressView.Base>.ArchivableTimelineProgressView> and conformance ArchivableFactory<A>, (void (*)(uint64_t))type metadata accessor for ArchivableFactory<TimelineProgressView<ArchivableLinearProgressView.Base>.ArchivableTimelineProgressView>);
  lazy protocol witness table accessor for type ArchiveReader and conformance ArchiveReader(&lazy protocol witness table cache variable for type ArchivableFactory<TimelineProgressView<ArchivableLinearProgressView.Base>.ArchivableTimelineProgressView> and conformance ArchivableFactory<A>, (void (*)(uint64_t))type metadata accessor for ArchivableFactory<TimelineProgressView<ArchivableLinearProgressView.Base>.ArchivableTimelineProgressView>);
  static ViewDecoders.registerDecodableFactoryType<A>(_:forID:)();
  type metadata accessor for ArchivableFactory<TimelineProgressView<CircularPercentageGaugeRing>.ArchivableTimelineProgressView>();
  lazy protocol witness table accessor for type ArchiveReader and conformance ArchiveReader(&lazy protocol witness table cache variable for type ArchivableFactory<TimelineProgressView<CircularPercentageGaugeRing>.ArchivableTimelineProgressView> and conformance ArchivableFactory<A>, (void (*)(uint64_t))type metadata accessor for ArchivableFactory<TimelineProgressView<CircularPercentageGaugeRing>.ArchivableTimelineProgressView>);
  lazy protocol witness table accessor for type ArchiveReader and conformance ArchiveReader(&lazy protocol witness table cache variable for type ArchivableFactory<TimelineProgressView<CircularPercentageGaugeRing>.ArchivableTimelineProgressView> and conformance ArchivableFactory<A>, (void (*)(uint64_t))type metadata accessor for ArchivableFactory<TimelineProgressView<CircularPercentageGaugeRing>.ArchivableTimelineProgressView>);
  static ViewDecoders.registerDecodableFactoryType<A>(_:forID:)();
  type metadata accessor for ArchivableFactory<HandGestureShortcutInteractiveControl.HandGestureShortcutPreferenceWriter>();
  lazy protocol witness table accessor for type ArchiveReader and conformance ArchiveReader((unint64_t *)&lazy protocol witness table cache variable for type ArchivableFactory<HandGestureShortcutInteractiveControl.HandGestureShortcutPreferenceWriter> and conformance ArchivableFactory<A>, (void (*)(uint64_t))type metadata accessor for ArchivableFactory<HandGestureShortcutInteractiveControl.HandGestureShortcutPreferenceWriter>);
  lazy protocol witness table accessor for type ArchiveReader and conformance ArchiveReader(&lazy protocol witness table cache variable for type ArchivableFactory<HandGestureShortcutInteractiveControl.HandGestureShortcutPreferenceWriter> and conformance ArchivableFactory<A>, (void (*)(uint64_t))type metadata accessor for ArchivableFactory<HandGestureShortcutInteractiveControl.HandGestureShortcutPreferenceWriter>);
  static ViewDecoders.registerDecodableFactoryType<A>(_:forID:)();
  type metadata accessor for ArchivableFactory<TimelineProgressView<ResolvedCircularPlaybackProgressView.Base>.ArchivableTimelineProgressView>();
  lazy protocol witness table accessor for type ArchiveReader and conformance ArchiveReader(&lazy protocol witness table cache variable for type ArchivableFactory<TimelineProgressView<ResolvedCircularPlaybackProgressView.Base>.ArchivableTimelineProgressView> and conformance ArchivableFactory<A>, (void (*)(uint64_t))type metadata accessor for ArchivableFactory<TimelineProgressView<ResolvedCircularPlaybackProgressView.Base>.ArchivableTimelineProgressView>);
  lazy protocol witness table accessor for type ArchiveReader and conformance ArchiveReader(&lazy protocol witness table cache variable for type ArchivableFactory<TimelineProgressView<ResolvedCircularPlaybackProgressView.Base>.ArchivableTimelineProgressView> and conformance ArchivableFactory<A>, (void (*)(uint64_t))type metadata accessor for ArchivableFactory<TimelineProgressView<ResolvedCircularPlaybackProgressView.Base>.ArchivableTimelineProgressView>);
  static ViewDecoders.registerDecodableFactoryType<A>(_:forID:)();
  type metadata accessor for ArchivableFactory<ArchivableButtonAppIntentModifier>();
  lazy protocol witness table accessor for type ArchiveReader and conformance ArchiveReader(&lazy protocol witness table cache variable for type ArchivableFactory<ArchivableButtonAppIntentModifier> and conformance ArchivableFactory<A>, (void (*)(uint64_t))type metadata accessor for ArchivableFactory<ArchivableButtonAppIntentModifier>);
  lazy protocol witness table accessor for type ArchiveReader and conformance ArchiveReader(&lazy protocol witness table cache variable for type ArchivableFactory<ArchivableButtonAppIntentModifier> and conformance ArchivableFactory<A>, (void (*)(uint64_t))type metadata accessor for ArchivableFactory<ArchivableButtonAppIntentModifier>);
  static ViewDecoders.registerDecodableFactoryType<A>(_:forID:)();
  type metadata accessor for ArchivableFactory<ArchivableToggleAppIntentModifier>();
  lazy protocol witness table accessor for type ArchiveReader and conformance ArchiveReader(&lazy protocol witness table cache variable for type ArchivableFactory<ArchivableToggleAppIntentModifier> and conformance ArchivableFactory<A>, (void (*)(uint64_t))type metadata accessor for ArchivableFactory<ArchivableToggleAppIntentModifier>);
  lazy protocol witness table accessor for type ArchiveReader and conformance ArchiveReader(&lazy protocol witness table cache variable for type ArchivableFactory<ArchivableToggleAppIntentModifier> and conformance ArchivableFactory<A>, (void (*)(uint64_t))type metadata accessor for ArchivableFactory<ArchivableToggleAppIntentModifier>);
  static ViewDecoders.registerDecodableFactoryType<A>(_:forID:)();
  type metadata accessor for ArchivableFactory<ArchivablePlaybackButtonViewModifier>();
  lazy protocol witness table accessor for type ArchiveReader and conformance ArchiveReader(&lazy protocol witness table cache variable for type ArchivableFactory<ArchivablePlaybackButtonViewModifier> and conformance ArchivableFactory<A>, (void (*)(uint64_t))type metadata accessor for ArchivableFactory<ArchivablePlaybackButtonViewModifier>);
  lazy protocol witness table accessor for type ArchiveReader and conformance ArchiveReader(&lazy protocol witness table cache variable for type ArchivableFactory<ArchivablePlaybackButtonViewModifier> and conformance ArchivableFactory<A>, (void (*)(uint64_t))type metadata accessor for ArchivableFactory<ArchivablePlaybackButtonViewModifier>);
  static ViewDecoders.registerDecodableFactoryType<A>(_:forID:)();
  type metadata accessor for ArchivableFactory<ArchivableAccessibilityActionModifier>();
  lazy protocol witness table accessor for type ArchiveReader and conformance ArchiveReader(&lazy protocol witness table cache variable for type ArchivableFactory<ArchivableAccessibilityActionModifier> and conformance ArchivableFactory<A>, (void (*)(uint64_t))type metadata accessor for ArchivableFactory<ArchivableAccessibilityActionModifier>);
  lazy protocol witness table accessor for type ArchiveReader and conformance ArchiveReader(&lazy protocol witness table cache variable for type ArchivableFactory<ArchivableAccessibilityActionModifier> and conformance ArchivableFactory<A>, (void (*)(uint64_t))type metadata accessor for ArchivableFactory<ArchivableAccessibilityActionModifier>);
  static ViewDecoders.registerDecodableFactoryType<A>(_:forID:)();
  lazy protocol witness table accessor for type ArchivableAccessibilityViewModifier.Factory and conformance ArchivableAccessibilityViewModifier.Factory();
  lazy protocol witness table accessor for type ArchivableAccessibilityViewModifier.Factory and conformance ArchivableAccessibilityViewModifier.Factory();
  static ViewDecoders.registerDecodableFactoryType<A>(_:forID:)();
  type metadata accessor for ArchivableFactory<InvalidatableContentModifier>();
  lazy protocol witness table accessor for type ArchiveReader and conformance ArchiveReader(&lazy protocol witness table cache variable for type ArchivableFactory<InvalidatableContentModifier> and conformance ArchivableFactory<A>, (void (*)(uint64_t))type metadata accessor for ArchivableFactory<InvalidatableContentModifier>);
  lazy protocol witness table accessor for type ArchiveReader and conformance ArchiveReader(&lazy protocol witness table cache variable for type ArchivableFactory<InvalidatableContentModifier> and conformance ArchivableFactory<A>, (void (*)(uint64_t))type metadata accessor for ArchivableFactory<InvalidatableContentModifier>);

  return static ViewDecoders.registerDecodableFactoryType<A>(_:forID:)();
}

uint64_t _ArchivedViewStates.init(data:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, void *a3@<X8>)
{
  type metadata accessor for DataArchiveReader();
  outlined copy of Data._Representation(a1, a2);
  uint64_t v7 = DataArchiveReader.__allocating_init(data:)();
  if (!v3) {
    _ArchivedViewStates.init(reader:delegate:)(v7, 0, a3);
  }
  return outlined consume of Data._Representation(a1, a2);
}

uint64_t _ArchivedViewStates.init(contentsOf:)@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  unint64_t v17 = a2;
  uint64_t v4 = type metadata accessor for URL();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v9 = MEMORY[0x1F4188790](v8);
  uint64_t v11 = (char *)&v16 - v10;
  uint64_t v12 = *(void (**)(char *, uint64_t, uint64_t, double))(v5 + 16);
  v12((char *)&v16 - v10, a1, v4, v9);
  if (URL.isFileURL.getter())
  {
    uint64_t v13 = *(void (**)(char *, uint64_t))(v5 + 8);
    v13(v11, v4);
    type metadata accessor for FileArchiveReader();
    ((void (*)(char *, uint64_t, uint64_t))v12)(v7, a1, v4);
    uint64_t v14 = FileArchiveReader.__allocating_init(url:)();
    if (!v2) {
      _ArchivedViewStates.init(reader:delegate:)(v14, 0, v17);
    }
    return ((uint64_t (*)(uint64_t, uint64_t))v13)(a1, v4);
  }
  else
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

void _ArchivedViewStates.init(contentsOf:)(void *a1@<X0>, void *a2@<X8>)
{
  type metadata accessor for FileArchiveReader();
  id v5 = a1;
  uint64_t v6 = FileArchiveReader.__allocating_init(file:)();
  if (!v2) {
    _ArchivedViewStates.init(reader:delegate:)(v6, 0, a2);
  }
}

uint64_t _ArchivedViewStates.init<A>(data:delegate:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, void *a6@<X8>)
{
  v18[1] = a5;
  uint64_t v19 = a6;
  uint64_t v11 = *(void *)(a4 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v13 = (char *)v18 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for DataArchiveReader();
  outlined copy of Data._Representation(a1, a2);
  uint64_t v14 = DataArchiveReader.__allocating_init(data:)();
  if (!v6)
  {
    uint64_t v15 = v14;
    type metadata accessor for _AnyArchivedViewDelegate();
    (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, a3, a4);
    uint64_t v16 = _AnyArchivedViewDelegate.__allocating_init(_:)((uint64_t)v13);
    _ArchivedViewStates.init(reader:delegate:)(v15, (uint64_t)v16, v19);
  }
  outlined consume of Data._Representation(a1, a2);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v11 + 8))(a3, a4);
}

uint64_t type metadata accessor for _AnyArchivedViewDelegate()
{
  return __swift_instantiateGenericMetadata();
}

char *_AnyArchivedViewDelegate.__allocating_init(_:)(uint64_t a1)
{
  uint64_t v2 = (char *)swift_allocObject();
  (*(void (**)(char *, uint64_t))(*(void *)(*(void *)(*(void *)v2
                                                                  + class metadata base offset for _AnyArchivedViewDelegate)
                                                      - 8)
                                          + 32))(&v2[*(void *)(*(void *)v2 + class metadata base offset for _AnyArchivedViewDelegate + 16)], a1);
  return v2;
}

uint64_t _ArchivedViewStates.init<A>(contentsOf:delegate:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  uint64_t v28 = a5;
  uint64_t v27 = a4;
  uint64_t v31 = a2;
  uint64_t v30 = a3;
  uint64_t v6 = *(void *)(a3 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v26 = (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for URL();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  uint64_t v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v13 = MEMORY[0x1F4188790](v12);
  uint64_t v15 = (char *)&v25 - v14;
  uint64_t v16 = *(void (**)(char *, uint64_t, uint64_t, double))(v9 + 16);
  v16((char *)&v25 - v14, a1, v8, v13);
  if (URL.isFileURL.getter())
  {
    unint64_t v17 = *(void (**)(char *, uint64_t))(v9 + 8);
    v17(v15, v8);
    type metadata accessor for FileArchiveReader();
    ((void (*)(char *, uint64_t, uint64_t))v16)(v11, a1, v8);
    uint64_t v18 = v29;
    uint64_t v19 = FileArchiveReader.__allocating_init(url:)();
    uint64_t v20 = v30;
    if (!v18)
    {
      uint64_t v21 = v19;
      uint64_t v29 = type metadata accessor for _AnyArchivedViewDelegate();
      uint64_t v22 = (uint64_t)v26;
      (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v26, v31, v20);
      uint64_t v23 = _AnyArchivedViewDelegate.__allocating_init(_:)(v22);
      _ArchivedViewStates.init(reader:delegate:)(v21, (uint64_t)v23, v28);
    }
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v31, v20);
    return ((uint64_t (*)(uint64_t, uint64_t))v17)(a1, v8);
  }
  else
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

uint64_t _ArchivedViewStates.init<A>(contentsOf:delegate:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  unint64_t v17 = a4;
  uint64_t v8 = *(void *)(a3 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v10 = (char *)&v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for FileArchiveReader();
  id v11 = a1;
  uint64_t v12 = FileArchiveReader.__allocating_init(file:)();
  if (!v4)
  {
    uint64_t v13 = v12;
    type metadata accessor for _AnyArchivedViewDelegate();
    (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, a2, a3);
    uint64_t v14 = _AnyArchivedViewDelegate.__allocating_init(_:)((uint64_t)v10);
    _ArchivedViewStates.init(reader:delegate:)(v13, (uint64_t)v14, v17);
  }

  return (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 8))(a2, a3);
}

uint64_t _ArchivedViewStates.startIndex.getter()
{
  return 0;
}

uint64_t _ArchivedViewStates.endIndex.getter()
{
  return *(void *)(*(void *)(v0 + *(int *)(type metadata accessor for _ArchivedViewStates(0) + 20) + 8) + 16);
}

uint64_t _ArchivedViewStates.subscript.getter@<X0>(unint64_t a1@<X0>, uint64_t a2@<X8>)
{
  type metadata accessor for MutableBox<[Int : Any]>(0, &lazy cache variable for type metadata for _ArchivedView?, type metadata accessor for _ArchivedView, MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)&v9 - v5;
  _ArchivedViewStates.state(at:)(a1, (uint64_t)&v9 - v5);
  uint64_t v7 = type metadata accessor for _ArchivedView(0);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(v6, 0, 1, v7);
  return outlined init with take of _ArchivedView((uint64_t)v6, a2, type metadata accessor for _ArchivedView);
}

uint64_t type metadata accessor for _ArchivedView(uint64_t a1)
{
  return type metadata accessor for SortableTableHeaderButton(a1, (uint64_t *)&type metadata singleton initialization cache for _ArchivedView);
}

uint64_t _ArchivedViewStates.state(at:)@<X0>(unint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *v2;
  if (!*v2) {
    goto LABEL_26;
  }
  uint64_t v7 = type metadata accessor for _ArchivedViewStates(0);
  if ((a1 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_25;
  }
  if (*(void *)(*(uint64_t *)((char *)v2 + *(int *)(v7 + 20) + 8) + 16) <= a1)
  {
LABEL_25:
    __break(1u);
LABEL_26:
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  uint64_t v21 = v7;
  swift_retain();
  uint64_t v8 = ArchiveReader.subscript.getter();
  unint64_t v10 = v9;
  outlined copy of Data._Representation(v8, v9);
  ProtobufDecoder.init(_:)();
  makeUserInfo #1 (_:) in _ArchivedViewStates.state(at:)((uint64_t)&v32, v4, (uint64_t)v2);
  *(_DWORD *)&v23[8] = 0;
  DisplayList.init()();
  uint64_t v11 = 0;
  uint64_t v12 = v24;
  *(void *)uint64_t v23 = v25;
  char v13 = v26;
  while (2)
  {
    char v22 = v13;
    while (1)
    {
      if (v28 >= v29)
      {
        unint64_t v20 = a1;
        uint64_t v15 = v12;
        uint64_t v16 = type metadata accessor for _ArchivedView(0);
        ArchivedViewCore.Metadata.archiveID.getter();
        swift_release();
        outlined consume of Data._Representation(v8, v10);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();

        uint64_t v17 = *(uint64_t *)((char *)v2 + *(int *)(v21 + 24));
        uint64_t v18 = *(int *)(v16 + 28);
        *(_DWORD *)(a2 + *(int *)(v16 + 32)) = 0x40000000;
        *(void *)a2 = v11;
        *(void *)(a2 + 8) = 0;
        *(void *)(a2 + 16) = v15;
        *(_WORD *)(a2 + 24) = *(_WORD *)v23;
        *(unsigned char *)(a2 + 26) = v22;
        *(void *)(a2 + 32) = v20;
        *(void *)(a2 + v18) = v17;
        return swift_bridgeObjectRetain();
      }
      unint64_t v14 = v30;
      if (v30)
      {
        if (v28 < v31) {
          goto LABEL_13;
        }
        if (v31 < v28) {
          goto LABEL_22;
        }
        unint64_t v30 = 0;
      }
      unint64_t v14 = ProtobufDecoder.decodeVarint()();
      if (v3) {
        goto LABEL_23;
      }
      if (v14 <= 7)
      {
LABEL_22:
        lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
        swift_allocError();
        swift_willThrow();
        goto LABEL_23;
      }
LABEL_13:
      if (v14 >> 3 == 2) {
        break;
      }
      if (v14 >> 3 == 1)
      {
        unint64_t v33 = v14;
        type metadata accessor for CGSize(0);
        ProtobufDecoder.messageField<A>(_:)();
        if (v3) {
          goto LABEL_23;
        }
        uint64_t v11 = *(void *)&v23[4];
      }
      else
      {
        *(void *)&v23[4] = v14;
        ProtobufDecoder.skipField(_:)();
        if (v3) {
          goto LABEL_23;
        }
      }
    }
    unint64_t v33 = v14;
    ProtobufDecoder.messageField<A>(_:)();
    if (!v3)
    {
      swift_bridgeObjectRelease();
      uint64_t v12 = *(void *)&v23[4];
      *(_WORD *)uint64_t v23 = 0;
      char v13 = 0;
      continue;
    }
    break;
  }
LABEL_23:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  outlined consume of Data._Representation(v8, v10);
  return swift_release();
}

uint64_t _ArchivedView.init()@<X0>(uint64_t a1@<X8>)
{
  DisplayList.init()();
  uint64_t v2 = type metadata accessor for _ArchivedView(0);
  uint64_t result = UUID.init()();
  uint64_t v4 = *(int *)(v2 + 28);
  *(_DWORD *)(a1 + *(int *)(v2 + 32)) = 0x40000000;
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = v5;
  *(_WORD *)(a1 + 24) = v6;
  *(unsigned char *)(a1 + 26) = v7;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + v4) = 0;
  return result;
}

uint64_t outlined destroy of _ArchivedView?(uint64_t a1)
{
  type metadata accessor for MutableBox<[Int : Any]>(0, &lazy cache variable for type metadata for _ArchivedView?, type metadata accessor for _ArchivedView, MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t makeUserInfo #1 (_:) in _ArchivedViewStates.state(at:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = type metadata accessor for CodingUserInfoKey();
  MEMORY[0x1F4188790](v5 - 8);
  char v7 = (char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v8);
  unint64_t v10 = (char *)&v22 - v9;
  uint64_t v11 = type metadata accessor for ArchiveReader();
  static ArchiveReader.readerKey.getter();
  *((void *)&v23 + 1) = v11;
  *(void *)&long long v22 = a2;
  swift_retain();
  specialized Dictionary.subscript.setter((uint64_t)&v22, (uint64_t)v10);
  static ArchiveReader.cacheKey.getter();
  uint64_t v12 = type metadata accessor for _ArchivedViewStates(0);
  uint64_t v13 = *(void *)(a3 + *(int *)(v12 + 28));
  type metadata accessor for MutableBox<[Int : Any]>(0, &lazy cache variable for type metadata for MutableBox<[Int : Any]>, (uint64_t (*)(uint64_t))type metadata accessor for [Int : Any], MEMORY[0x1E4F3F398]);
  *((void *)&v23 + 1) = v14;
  *(void *)&long long v22 = v13;
  swift_retain();
  specialized Dictionary.subscript.setter((uint64_t)&v22, (uint64_t)v10);
  static ArchiveReader.namedImagesKey.getter();
  *((void *)&v23 + 1) = MEMORY[0x1E4F3F3A8];
  swift_retain();
  NamedImage.Cache.init(archiveDelegate:)();
  specialized Dictionary.subscript.setter((uint64_t)&v22, (uint64_t)v10);
  static ArchivedViewCore.preferredBundleLanguageKey.getter();
  uint64_t v15 = a3 + *(int *)(v12 + 20);
  uint64_t v16 = (uint64_t *)(v15 + *(int *)(type metadata accessor for ArchivedViewCore.Metadata() + 40));
  uint64_t v17 = v16[1];
  if (v17)
  {
    uint64_t v18 = *v16;
    *((void *)&v23 + 1) = MEMORY[0x1E4FBB1A0];
    *(void *)&long long v22 = v18;
    *((void *)&v22 + 1) = v17;
  }
  else
  {
    long long v22 = 0u;
    long long v23 = 0u;
  }
  swift_bridgeObjectRetain();
  specialized Dictionary.subscript.setter((uint64_t)&v22, (uint64_t)v7);
  static ArchivedViewCore.preferredCompositionLanguage.getter();
  char v19 = ArchivedViewCore.Metadata.preferredCompositionLanguage.getter();
  type metadata accessor for CTCompositionLanguage(0);
  *((void *)&v23 + 1) = v20;
  LOBYTE(v22) = v19;
  return specialized Dictionary.subscript.setter((uint64_t)&v22, (uint64_t)v10);
}

uint64_t _ArchivedViewStates.State.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  long long v13 = 0uLL;
  uint64_t result = DisplayList.init()();
  long long v12 = 0uLL;
  uint64_t v6 = v14;
  __int16 v7 = v15;
  char v8 = v16;
  unint64_t v9 = a1[1];
  if (v9 >= a1[2])
  {
LABEL_17:
    a1[3] = 0;
    *(_OWORD *)a2 = v12;
    *(void *)(a2 + 16) = v6;
    *(_WORD *)(a2 + 24) = v7;
    *(unsigned char *)(a2 + 26) = v8;
    return result;
  }
  while (1)
  {
    unint64_t v10 = a1[3];
    if (v10)
    {
      unint64_t v11 = a1[4];
      if (v9 < v11) {
        goto LABEL_8;
      }
      if (v11 < v9) {
        break;
      }
      a1[3] = 0;
    }
    unint64_t v10 = ProtobufDecoder.decodeVarint()();
    if (v2) {
      return swift_bridgeObjectRelease();
    }
    if (v10 <= 7) {
      break;
    }
LABEL_8:
    if (v10 >> 3 == 2)
    {
      ProtobufDecoder.messageField<A>(_:)();
      if (v2) {
        return swift_bridgeObjectRelease();
      }
      uint64_t result = swift_bridgeObjectRelease();
      uint64_t v6 = v13;
      __int16 v7 = 0;
      char v8 = 0;
    }
    else if (v10 >> 3 == 1)
    {
      type metadata accessor for CGSize(0);
      uint64_t result = ProtobufDecoder.messageField<A>(_:)();
      if (v2) {
        return swift_bridgeObjectRelease();
      }
      long long v12 = v13;
    }
    else
    {
      *(void *)&long long v13 = v10;
      uint64_t result = ProtobufDecoder.skipField(_:)();
      if (v2) {
        return swift_bridgeObjectRelease();
      }
    }
    unint64_t v9 = a1[1];
    if (v9 >= a1[2]) {
      goto LABEL_17;
    }
  }
  lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
  swift_allocError();
  swift_willThrow();
  return swift_bridgeObjectRelease();
}

uint64_t _ArchivedViewStates.auxiliaryData.getter()
{
  if (*v0)
  {
    if (*((unsigned char *)v0 + *(int *)(type metadata accessor for _ArchivedViewStates(0) + 20) + 40)) {
      return 0;
    }
    swift_retain();
    uint64_t v1 = ArchiveReader.subscript.getter();
    swift_release();
    return v1;
  }
  else
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

uint64_t _ArchivedViewStates.attachment(at:)(uint64_t a1)
{
  if (*v1)
  {
    uint64_t v8 = *v1;
    uint64_t v9 = a1;
    if (a1 < 0) {
      return 0;
    }
    swift_retain_n();
    if (ArchiveReader.endIndex.getter() <= a1)
    {
      uint64_t v5 = 0;
    }
    else
    {
      type metadata accessor for ArchiveReader();
      lazy protocol witness table accessor for type ArchiveReader and conformance ArchiveReader(&lazy protocol witness table cache variable for type ArchiveReader and conformance ArchiveReader, MEMORY[0x1E4F3F708]);
      uint64_t v3 = (void (*)(unsigned char *, void))protocol witness for Collection.subscript.read in conformance ArchiveReader();
      uint64_t v5 = *(void *)v4;
      outlined copy of Data._Representation(*(void *)v4, *(void *)(v4 + 8));
      v3(v7, 0);
    }
    swift_release_n();
    return v5;
  }
  else
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

void *protocol witness for BidirectionalCollection.index(before:) in conformance _ArchivedViewStates@<X0>(void *result@<X0>, uint64_t a2@<X1>, unint64_t *a3@<X8>)
{
  unint64_t v4 = *result - 1;
  if (__OFSUB__(*result, 1))
  {
    __break(1u);
  }
  else if (v4 < *(void *)(*(void *)(v3 + *(int *)(a2 + 20) + 8) + 16))
  {
    *a3 = v4;
    return result;
  }
  __break(1u);
  return result;
}

unint64_t *protocol witness for BidirectionalCollection.formIndex(before:) in conformance _ArchivedViewStates(unint64_t *result, uint64_t a2)
{
  unint64_t v3 = *result - 1;
  if (__OFSUB__(*result, 1))
  {
    __break(1u);
  }
  else if (v3 < *(void *)(*(void *)(v2 + *(int *)(a2 + 20) + 8) + 16))
  {
    *uint64_t result = v3;
    return result;
  }
  __break(1u);
  return result;
}

uint64_t protocol witness for Collection.endIndex.getter in conformance _ArchivedViewStates@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  *a2 = *(void *)(*(void *)(v2 + *(int *)(result + 20) + 8) + 16);
  return result;
}

void (*protocol witness for Collection.subscript.read in conformance _ArchivedViewStates(void *a1, unint64_t *a2))(uint64_t a1)
{
  type metadata accessor for MutableBox<[Int : Any]>(0, &lazy cache variable for type metadata for _ArchivedView?, type metadata accessor for _ArchivedView, MEMORY[0x1E4FBB718]);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  *a1 = v5;
  uint64_t v6 = type metadata accessor for _ArchivedView(0);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = malloc(*(void *)(v7 + 64));
  a1[1] = v8;
  _ArchivedViewStates.state(at:)(*a2, (uint64_t)v5);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(v5, 0, 1, v6);
  outlined init with take of _ArchivedView((uint64_t)v5, (uint64_t)v8, type metadata accessor for _ArchivedView);
  return protocol witness for Collection.subscript.read in conformance _ArchivedViewStates;
}

void protocol witness for Collection.subscript.read in conformance _ArchivedViewStates(uint64_t a1)
{
  uint64_t v2 = *(void **)a1;
  uint64_t v1 = *(void **)(a1 + 8);
  outlined destroy of _ArchivedView((uint64_t)v1, type metadata accessor for _ArchivedView);
  free(v1);

  free(v2);
}

uint64_t *protocol witness for Collection.subscript.getter in conformance _ArchivedViewStates@<X0>(uint64_t *result@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v4 = *result;
  if (*result < 0 || (uint64_t v6 = result[1], *(void *)(*(void *)(v3 + *(int *)(a2 + 20) + 8) + 16) < v6))
  {
    __break(1u);
  }
  else
  {
    type metadata accessor for Slice<_ArchivedViewStates>(0);
    uint64_t result = (uint64_t *)outlined init with copy of _ArchivedView(v3, (uint64_t)a3 + *(int *)(v7 + 40), type metadata accessor for _ArchivedViewStates);
    *a3 = v4;
    a3[1] = v6;
  }
  return result;
}

uint64_t protocol witness for Collection.indices.getter in conformance _ArchivedViewStates@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *(void *)(*(void *)(v2 + *(int *)(result + 20) + 8) + 16);
  *a2 = 0;
  a2[1] = v3;
  return result;
}

BOOL protocol witness for Collection.isEmpty.getter in conformance _ArchivedViewStates(uint64_t a1)
{
  return *(void *)(*(void *)(v1 + *(int *)(a1 + 20) + 8) + 16) == 0;
}

void *protocol witness for RandomAccessCollection.index(_:offsetBy:) in conformance _ArchivedViewStates@<X0>(void *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t *a4@<X8>)
{
  unint64_t v5 = *result + a2;
  if (__OFADD__(*result, a2))
  {
    __break(1u);
  }
  else if (v5 <= *(void *)(*(void *)(v4 + *(int *)(a3 + 20) + 8) + 16))
  {
    *a4 = v5;
    return result;
  }
  __break(1u);
  return result;
}

unint64_t protocol witness for RandomAccessCollection.index(_:offsetBy:limitedBy:) in conformance _ArchivedViewStates@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X1>, unint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  unint64_t result = specialized RandomAccessCollection.index(_:offsetBy:limitedBy:)(*a1, a2, *a3);
  *(void *)a4 = result;
  *(unsigned char *)(a4 + 8) = v6 & 1;
  return result;
}

unint64_t *protocol witness for RandomAccessCollection.distance(from:to:) in conformance _ArchivedViewStates(unint64_t *result, unint64_t *a2, uint64_t a3)
{
  unint64_t v4 = *a2;
  unint64_t v5 = *(void *)(*(void *)(v3 + *(int *)(a3 + 20) + 8) + 16);
  if (*result <= v5 && v4 <= v5) {
    return (unint64_t *)(v4 - *result);
  }
  __break(1u);
  return result;
}

void *protocol witness for Collection.index(after:) in conformance _ArchivedViewStates@<X0>(void *result@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  if (*result >= *(void *)(*(void *)(v3 + *(int *)(a2 + 20) + 8) + 16)) {
    __break(1u);
  }
  else {
    *a3 = *result + 1;
  }
  return result;
}

void *protocol witness for Collection.formIndex(after:) in conformance _ArchivedViewStates(void *result, uint64_t a2)
{
  if (*result >= *(void *)(*(void *)(v2 + *(int *)(a2 + 20) + 8) + 16)) {
    __break(1u);
  }
  else {
    ++*result;
  }
  return result;
}

void protocol witness for Sequence.makeIterator() in conformance _ArchivedViewStates(uint64_t a1@<X8>)
{
  outlined init with take of _ArchivedView(v1, a1, type metadata accessor for _ArchivedViewStates);
  type metadata accessor for IndexingIterator<_ArchivedViewStates>(0);
  *(void *)(a1 + *(int *)(v3 + 36)) = 0;
}

uint64_t protocol witness for Sequence.underestimatedCount.getter in conformance _ArchivedViewStates(uint64_t a1)
{
  return *(void *)(*(void *)(v1 + *(int *)(a1 + 20) + 8) + 16);
}

size_t protocol witness for Sequence._copyToContiguousArray() in conformance _ArchivedViewStates()
{
  size_t v1 = specialized _copyCollectionToContiguousArray<A>(_:)(v0);
  outlined destroy of _ArchivedView(v0, type metadata accessor for _ArchivedViewStates);
  return v1;
}

uint64_t protocol witness for ProtobufDecodableMessage.init(from:) in conformance _ArchivedViewStates.State@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return _ArchivedViewStates.State.init(from:)(a1, a2);
}

uint64_t protocol witness for ProtobufEncodableMessage.encode(to:) in conformance _ArchivedViewStates.State()
{
  type metadata accessor for CGSize(0);
  uint64_t result = ProtobufEncoder.messageField<A>(_:_:)();
  if (!v0) {
    return ProtobufEncoder.messageField<A>(_:_:)();
  }
  return result;
}

void static _ArchivedViewStates.DeploymentVersion.v5.getter(unsigned char *a1@<X8>)
{
  *a1 = 1;
}

void static _ArchivedViewStates.DeploymentVersion.v6.getter(unsigned char *a1@<X8>)
{
  *a1 = 2;
}

BOOL static _ArchivedViewStates.DeploymentVersion.< infix(_:_:)(char *a1, char *a2)
{
  return *a1 < *a2;
}

void _ArchivedViewStates.DeploymentVersion.hash(into:)()
{
  Hasher._combine(_:)(*v0);
}

BOOL static _ArchivedViewStates.DeploymentVersion.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

Swift::Int _ArchivedViewStates.DeploymentVersion.hashValue.getter()
{
  Swift::UInt8 v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

BOOL protocol witness for static Comparable.< infix(_:_:) in conformance _ArchivedViewStates.DeploymentVersion(char *a1, char *a2)
{
  return *a1 < *a2;
}

BOOL protocol witness for static Comparable.<= infix(_:_:) in conformance _ArchivedViewStates.DeploymentVersion(char *a1, char *a2)
{
  return *a2 >= *a1;
}

BOOL protocol witness for static Comparable.>= infix(_:_:) in conformance _ArchivedViewStates.DeploymentVersion(char *a1, char *a2)
{
  return *a1 >= *a2;
}

BOOL protocol witness for static Comparable.> infix(_:_:) in conformance _ArchivedViewStates.DeploymentVersion(char *a1, char *a2)
{
  return *a2 < *a1;
}

uint64_t protocol witness for Decodable.init(from:) in conformance _ArchivedViewStates.DeploymentVersion@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Decoder.singleValueContainer()();
  if (!v2)
  {
    __swift_project_boxed_opaque_existential_1(v7, v7[3]);
    char v5 = dispatch thunk of SingleValueDecodingContainer.decode(_:)();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v7);
    *a2 = v5;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t _ArchivedViewStates.DeploymentVersion.init(from:)@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Decoder.singleValueContainer()();
  if (!v2)
  {
    __swift_project_boxed_opaque_existential_1(v7, v7[3]);
    char v5 = dispatch thunk of SingleValueDecodingContainer.decode(_:)();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v7);
    *a2 = v5;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance _ArchivedViewStates.DeploymentVersion(void *a1)
{
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Encoder.singleValueContainer()();
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v2, v3);
  dispatch thunk of SingleValueEncodingContainer.encode(_:)();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v2);
}

uint64_t _ArchivedViewStates.DeploymentVersion.encode(to:)(void *a1)
{
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Encoder.singleValueContainer()();
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v2, v3);
  dispatch thunk of SingleValueEncodingContainer.encode(_:)();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v2);
}

uint64_t static _ArchivedView._makeView(view:inputs:)@<X0>(uint64_t *a1@<X1>, void *a2@<X8>)
{
  uint64_t v86 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *a1;
  uint64_t v3 = a1[2];
  unsigned int v52 = *((_DWORD *)a1 + 7);
  int v61 = *((_DWORD *)a1 + 2);
  unsigned int v62 = *((_DWORD *)a1 + 9);
  uint64_t v4 = a1[5];
  uint64_t v5 = a1[6];
  unsigned int v6 = *((_DWORD *)a1 + 14);
  HIDWORD(v60) = *((_DWORD *)a1 + 15);
  unsigned int v57 = *((_DWORD *)a1 + 16);
  unsigned int v58 = *((_DWORD *)a1 + 6);
  unsigned int v7 = *((_DWORD *)a1 + 18);
  unsigned int v55 = *((_DWORD *)a1 + 8);
  unsigned int v56 = *((_DWORD *)a1 + 17);
  unsigned int v9 = *((_DWORD *)a1 + 19);
  int v8 = *((_DWORD *)a1 + 20);
  _ViewOutputs.init()();
  type metadata accessor for DisplayList.UnaryInterpolatorGroup();
  swift_allocObject();
  DisplayList.UnaryInterpolatorGroup.init()();
  int v10 = PreferencesInputs.contains<A>(_:includeHostPreferences:)();
  int v47 = PreferencesInputs.contains<A>(_:includeHostPreferences:)();
  v77[0] = v2;
  LODWORD(v77[1]) = v61;
  *(void *)&long long v78 = v3;
  *((void *)&v78 + 1) = __PAIR64__(v52, v58);
  unint64_t v79 = __PAIR64__(v62, v55);
  uint64_t v80 = v4;
  uint64_t v81 = v5;
  LODWORD(v60) = v6;
  unint64_t v82 = __PAIR64__(HIDWORD(v60), v6);
  unint64_t v83 = __PAIR64__(v56, v57);
  unint64_t v50 = __PAIR64__(v9, v7);
  unint64_t v84 = __PAIR64__(v9, v7);
  int v54 = v8;
  int v85 = v8;
  swift_retain();
  swift_retain();
  uint64_t v51 = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  int v40 = v10;
  if (v10) {
    PreferenceKeys.add(_:)();
  }
  _ViewInputs.animatedPosition()();
  _ViewInputs.containerPosition.setter();
  _DisplayList_Identity.init()();
  uint64_t v53 = v3;
  uint64_t v59 = v5;
  LODWORD(v66[0]) = v2;
  _ViewInputs.pushIdentity(_:)();
  type metadata accessor for MutableBox<[Int : Any]>(0, &lazy cache variable for type metadata for _GraphValue<_ArchivedView>, type metadata accessor for _ArchivedView, MEMORY[0x1E4F3F590]);
  swift_retain();
  int v11 = _GraphValue.value.getter();
  _ViewInputs.animatedSize()();
  HIDWORD(v68) = v11;
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  lazy protocol witness table accessor for type ArchivedDisplayList and conformance ArchivedDisplayList();
  int v12 = Attribute.init<A>(body:value:flags:update:)();
  swift_release();
  HIDWORD(v79) |= 0x10u;
  *(void *)((char *)&v68 + 4) = *(void *)((char *)v77 + 4);
  long long v69 = v78;
  unint64_t v70 = v79;
  uint64_t v71 = v80;
  uint64_t v72 = v81;
  unint64_t v73 = v82;
  unint64_t v74 = v83;
  unint64_t v75 = v84;
  int v76 = v85;
  LODWORD(v68) = _ViewInputs.environment.getter();
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  lazy protocol witness table accessor for type _ViewInputs.EnvironmentTransform and conformance _ViewInputs.EnvironmentTransform();
  Attribute.init<A>(body:value:flags:update:)();
  _ViewInputs.environment.setter();
  uint64_t v13 = v77[0];
  int v14 = v77[1];
  long long v16 = v78;
  unint64_t v15 = v79;
  uint64_t v18 = v80;
  uint64_t v17 = v81;
  unint64_t v19 = v82;
  unint64_t v20 = v83;
  unint64_t v21 = v84;
  int v22 = v85;
  id v23 = (id)AGSubgraphGetCurrent();
  if (!v23) {
    goto LABEL_21;
  }
  id v24 = v23;
  int v25 = *MEMORY[0x1E4F4E7A0];
  type metadata accessor for MutableBox<DisplayList.HostedViewState>(0, &lazy cache variable for type metadata for MutableBox<DisplayList.HostedViewState>, (uint64_t)&type metadata for DisplayList.HostedViewState, MEMORY[0x1E4F3F398]);
  uint64_t v26 = swift_allocObject();
  *(_DWORD *)(v26 + 16) = v25;
  *(_DWORD *)(v26 + 20) = v12;
  *(void *)(v26 + 24) = v24;
  *(void *)(v26 + 32) = v13;
  *(_DWORD *)(v26 + 40) = v14;
  *(_OWORD *)(v26 + 48) = v16;
  *(void *)(v26 + 64) = v15;
  *(void *)(v26 + 72) = v18;
  *(void *)(v26 + 80) = v17;
  *(void *)(v26 + 88) = v19;
  *(void *)(v26 + 96) = v20;
  *(void *)(v26 + 104) = v21;
  *(_DWORD *)(v26 + 112) = v22;
  uint64_t v27 = MEMORY[0x1E4FBC860];
  *(void *)(v26 + 120) = MEMORY[0x1E4FBC868];
  *(void *)(v26 + 128) = v27;
  *(_DWORD *)(v26 + 136) = 0;
  *(void *)&long long v68 = v26;
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  lazy protocol witness table accessor for type DisplayList.HostedViews and conformance DisplayList.HostedViews();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  unsigned int v63 = Attribute.init<A>(body:value:flags:update:)();
  swift_release();
  int v46 = 0;
  char v28 = v47;
  char v29 = v62;
  if ((v40 | v47))
  {
    LODWORD(v68) = v63;
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    lazy protocol witness table accessor for type DisplayList.HostedViews.SplicedDisplayList and conformance DisplayList.HostedViews.SplicedDisplayList();
    int v46 = Attribute.init<A>(body:value:flags:update:)();
    if (v40)
    {
      _ViewOutputs.subscript.setter();
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      type metadata accessor for MutableBox<DisplayList.HostedViewState>(0, &lazy cache variable for type metadata for [ArchivedViewState], (uint64_t)&type metadata for ArchivedViewState, MEMORY[0x1E4FBB320]);
      type metadata accessor for DisplayList.HostedViews.Preference<ArchivedViewStatesKey>(0, &lazy cache variable for type metadata for DisplayList.HostedViews.Preference<ArchivedViewStatesKey>, (uint64_t)&type metadata for ArchivedViewStatesKey, (uint64_t)&protocol witness table for ArchivedViewStatesKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for DisplayList.HostedViews.Preference);
      lazy protocol witness table accessor for type DisplayList.HostedViews.Preference<ArchivedViewStatesKey> and conformance DisplayList.HostedViews.Preference<A>();
      Attribute.init<A>(body:value:flags:update:)();
      _GraphValue.value.getter();
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      type metadata accessor for InterpolatableArchiveContent(0);
      lazy protocol witness table accessor for type InterpolatableArchiveContent.Init and conformance InterpolatableArchiveContent.Init();
      Attribute.init<A>(body:value:flags:update:)();
      *(void *)&long long v68 = v2;
      DWORD2(v68) = v61;
      *(void *)&long long v69 = v53;
      *((void *)&v69 + 1) = __PAIR64__(v52, v58);
      unint64_t v70 = __PAIR64__(v62, v55);
      uint64_t v71 = v51;
      uint64_t v72 = v59;
      unint64_t v73 = v60;
      unint64_t v74 = __PAIR64__(v56, v57);
      unint64_t v75 = v50;
      int v76 = v54;
      lazy protocol witness table accessor for type ArchiveReader and conformance ArchiveReader(&lazy protocol witness table cache variable for type InterpolatableArchiveContent and conformance InterpolatableArchiveContent, (void (*)(uint64_t))type metadata accessor for InterpolatableArchiveContent);
      char v29 = v62;
      _ViewOutputs.applyInterpolatorGroup<A>(_:content:inputs:animatesSize:defersRender:)();
    }
  }
  *(void *)&long long v68 = v59;
  DWORD2(v68) = v60;
  if (PreferencesInputs.contains<A>(_:includeHostPreferences:)())
  {
    unsigned int v45 = _ViewInputs.animatedSize()();
    unsigned int v43 = _ViewInputs.animatedPosition()();
    unsigned int v41 = _ViewInputs.transform.getter();
    type metadata accessor for DisplayList.HostedViewResponder(0);
    long long v38 = (void *)swift_allocObject();
    v38[28] = 0;
    v38[29] = 0;
    v38[27] = 0;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    ViewTransform.init()();
    *((void *)&v69 + 1) = __PAIR64__(v52, v58);
    unint64_t v70 = __PAIR64__(v62, v55);
    uint64_t v71 = v51;
    uint64_t v72 = v59;
    unint64_t v73 = v60;
    char v28 = v47;
    unint64_t v74 = __PAIR64__(v56, v57);
    unint64_t v75 = v50;
    int v76 = v54;
    *(void *)&long long v68 = __PAIR64__(v45, v63);
    *((void *)&v68 + 1) = __PAIR64__(v41, v43);
    *(void *)&long long v69 = DefaultLayoutViewResponder.init(inputs:)();
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    type metadata accessor for MutableBox<[Int : Any]>(0, (unint64_t *)&lazy cache variable for type metadata for [ViewResponder], MEMORY[0x1E4F3F7E8], MEMORY[0x1E4FBB320]);
    lazy protocol witness table accessor for type DisplayList.HostedViews.ResponderFilter and conformance DisplayList.HostedViews.ResponderFilter();
    Attribute.init<A>(body:value:flags:update:)();
    swift_release();
    LOBYTE(v68) = 0;
    _ViewOutputs.subscript.setter();
    if ((v62 & 2) == 0)
    {
LABEL_9:
      if ((v28 & 1) == 0) {
        goto LABEL_11;
      }
      goto LABEL_10;
    }
  }
  else if ((v29 & 2) == 0)
  {
    goto LABEL_9;
  }
  LODWORD(v68) = _GraphValue.value.getter();
  *((void *)&v68 + 1) = 0;
  *(void *)&long long v69 = 0;
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  lazy protocol witness table accessor for type ArchivedLayoutComputer and conformance ArchivedLayoutComputer();
  Attribute.init<A>(body:value:flags:update:)();
  LOBYTE(v68) = 0;
  _ViewOutputs.layoutComputer.setter();
  if (v28)
  {
LABEL_10:
    swift_getKeyPath();
    int v49 = _ViewInputs.mapEnvironment<A>(_:)();
    swift_release();
    int v48 = _ViewInputs.viewPhase.getter();
    int v44 = _ViewInputs.animatedPosition()();
    int v42 = _ViewInputs.animatedSize()();
    *(void *)&long long v68 = v2;
    DWORD2(v68) = v61;
    *(void *)&long long v69 = v53;
    *((void *)&v69 + 1) = __PAIR64__(v52, v58);
    unint64_t v70 = __PAIR64__(v62, v55);
    uint64_t v71 = v51;
    uint64_t v72 = v59;
    unint64_t v73 = v60;
    unint64_t v74 = __PAIR64__(v56, v57);
    unint64_t v75 = v50;
    int v76 = v54;
    int v30 = _ViewInputs.transform.getter();
    specialized ArchivedAccessibilityAttachment.init(list:accessibilityEnabled:phase:position:size:transform:resetSeed:)(v46, v49, v48, v44, v42, v30, 0, (uint64_t)&v68);
    v66[0] = v68;
    v66[1] = v69;
    unint64_t v67 = v70;
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    lazy protocol witness table accessor for type ArchivedAccessibilityAttachment and conformance ArchivedAccessibilityAttachment();
    Attribute.init<A>(body:value:flags:update:)();
    outlined release of ContextMenuResponderFilter((uint64_t)&v68);
    LOBYTE(v66[0]) = 0;
    _ViewOutputs.subscript.setter();
  }
LABEL_11:
  uint64_t v64 = 0;
  swift_bridgeObjectRetain();
  if (PreferenceKeys.endIndex.getter())
  {
    lazy protocol witness table accessor for type PreferenceKeys and conformance PreferenceKeys();
    while (1)
    {
      unint64_t v31 = (void (*)(_OWORD *, void))protocol witness for Collection.subscript.read in conformance PreferenceKeys();
      unint64_t v33 = *(ValueMetadata **)v32;
      uint64_t v34 = *(void *)(v32 + 8);
      v31(v66, 0);
      uint64_t v35 = v64;
      *(void *)&v66[0] = v59;
      swift_bridgeObjectRetain();
      uint64_t v36 = PreferenceKeys.endIndex.getter();
      if (v64 < 0 || v64 >= v36) {
        break;
      }
      ++v64;
      swift_bridgeObjectRelease();
      specialized makePreference #1 <A>(key:) in static _ArchivedView._makeView(view:inputs:)((uint64_t)v33, v63, (uint64_t)v65, v33, v34);
      if (v35 + 1 == PreferenceKeys.endIndex.getter()) {
        goto LABEL_16;
      }
    }
    __break(1u);
LABEL_21:
    __break(1u);
  }
LABEL_16:
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  uint64_t result = swift_beginAccess();
  *a2 = v65[0];
  a2[1] = v65[1];
  return result;
}

void specialized makePreference #1 <A>(key:) in static _ArchivedView._makeView(view:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, ValueMetadata *a4, uint64_t a5)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  if (a4 != &type metadata for AccessibilityNodesKey
    && a4 != (ValueMetadata *)MEMORY[0x1E4F3F488]
    && a4 != (ValueMetadata *)MEMORY[0x1E4F401D0]
    && a4 != &type metadata for ArchivedViewStatesKey)
  {
    uint64_t v10 = destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(a2, a4, a5, a4);
    v18[0] = v10;
    MEMORY[0x1F4188790](v10);
    long long v14[2] = swift_getAssociatedTypeWitness();
    uint64_t v15 = type metadata accessor for DisplayList.HostedViews.Preference();
    uint64_t WitnessTable = swift_getWitnessTable();
    uint64_t v11 = type metadata accessor for Attribute();
    _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v18, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TA_4, (uint64_t)v14, v15, MEMORY[0x1E4FBC248], v11, MEMORY[0x1E4FBC278], v12);
    uint64_t v13 = v17;
    swift_beginAccess();
    MEMORY[0x18C10D730](a4, v13, a4, a5);
    swift_endAccess();
  }
}

void protocol witness for View.body.getter in conformance _ArchivedView()
{
}

uint64_t static _ArchivedView.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for _ArchivedView(0);
  MEMORY[0x1F4188790](v4);
  unsigned int v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v7);
  unsigned int v9 = (char *)&v14 - v8;
  uint64_t v10 = *(void *)(a1 + 32);
  uint64_t v11 = *(void *)(a2 + 32);
  outlined init with copy of _ArchivedView(a1, (uint64_t)&v14 - v8, type metadata accessor for _ArchivedView);
  outlined init with copy of _ArchivedView(a2, (uint64_t)v6, type metadata accessor for _ArchivedView);
  if (v10 == v11) {
    char v12 = static UUID.== infix(_:_:)();
  }
  else {
    char v12 = 0;
  }
  outlined destroy of _ArchivedView((uint64_t)v6, type metadata accessor for _ArchivedView);
  outlined destroy of _ArchivedView((uint64_t)v9, type metadata accessor for _ArchivedView);
  return v12 & 1;
}

uint64_t _ArchivedView.containsForegroundLayers.getter()
{
  return *(unsigned char *)(v0 + 26) & 1;
}

BOOL _ArchivedView.containsForegroundLayers(level:)(unsigned char *a1)
{
  return (*(unsigned char *)(v1 + 26) & *a1) != 0;
}

uint64_t _ArchivedView.containsPrivacySensitive.getter()
{
  return (*(unsigned __int8 *)(v0 + 26) >> 2) & 1;
}

uint64_t _ArchivedView.containsInteractiveControls.getter()
{
  return (*(unsigned __int8 *)(v0 + 26) >> 3) & 1;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance _ArchivedView(uint64_t a1, uint64_t a2)
{
  MEMORY[0x1F4188790](a1);
  uint64_t v4 = (char *)&v14 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v5);
  uint64_t v7 = (char *)&v14 - v6;
  uint64_t v9 = *(void *)(v8 + 32);
  uint64_t v11 = *(void *)(v10 + 32);
  outlined init with copy of _ArchivedView(v8, (uint64_t)&v14 - v6, type metadata accessor for _ArchivedView);
  outlined init with copy of _ArchivedView(a2, (uint64_t)v4, type metadata accessor for _ArchivedView);
  if (v9 == v11) {
    char v12 = static UUID.== infix(_:_:)();
  }
  else {
    char v12 = 0;
  }
  outlined destroy of _ArchivedView((uint64_t)v4, type metadata accessor for _ArchivedView);
  outlined destroy of _ArchivedView((uint64_t)v7, type metadata accessor for _ArchivedView);
  return v12 & 1;
}

double _ArchivedView.maxAnimationDuration.getter()
{
  return *(float *)(v0 + *(int *)(type metadata accessor for _ArchivedView(0) + 32));
}

uint64_t _ArchivedView.maxAnimationDuration.setter(double a1)
{
  float v2 = a1;
  uint64_t result = type metadata accessor for _ArchivedView(0);
  *(float *)(v1 + *(int *)(result + 32)) = v2;
  return result;
}

float (*_ArchivedView.maxAnimationDuration.modify(uint64_t a1))(uint64_t a1)
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for _ArchivedView(0) + 32);
  *(_DWORD *)(a1 + 16) = v3;
  *(double *)a1 = *(float *)(v1 + v3);
  return _ArchivedView.maxAnimationDuration.modify;
}

float _ArchivedView.maxAnimationDuration.modify(uint64_t a1)
{
  float result = *(double *)a1;
  *(float *)(*(void *)(a1 + 8) + *(int *)(a1 + 16)) = result;
  return result;
}

uint64_t _AnyArchivedViewDelegate.resolveImage(uuid:)(uint64_t a1)
{
  uint64_t v3 = *v1;
  swift_beginAccess();
  (*(void (**)(uint64_t, void))(*(void *)(v3 + class metadata base offset for _AnyArchivedViewDelegate + 8)
                                          + 8))(a1, *(void *)(v3 + class metadata base offset for _AnyArchivedViewDelegate));
  return swift_endAccess();
}

void _AnyArchivedViewDelegate.__allocating_init()()
{
}

uint64_t _AnyArchivedViewDelegate.__ivar_destroyer()
{
  return (*(uint64_t (**)(char *))(*(void *)(*(void *)(*(void *)v0
                                                                   + class metadata base offset for _AnyArchivedViewDelegate)
                                                       - 8)
                                           + 8))(&v0[*(void *)(*(void *)v0
                                                                 + class metadata base offset for _AnyArchivedViewDelegate
                                                                 + 16)]);
}

uint64_t _AnyArchivedViewDelegate.__deallocating_deinit()
{
  (*(void (**)(char *))(*(void *)(*(void *)(*(void *)v0
                                                         + class metadata base offset for _AnyArchivedViewDelegate)
                                             - 8)
                                 + 8))(&v0[*(void *)(*(void *)v0
                                                       + class metadata base offset for _AnyArchivedViewDelegate
                                                       + 16)]);

  return swift_deallocClassInstance();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance ArchivedViewState.ID()
{
  Swift::UInt32 v1 = *(_DWORD *)(v0 + 20);
  Hasher.init(_seed:)();
  Hasher.combine(bytes:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance ArchivedViewState.ID()
{
  Swift::UInt32 v1 = *(_DWORD *)(v0 + 20);
  Hasher.combine(bytes:)();
  Hasher._combine(_:)(v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ArchivedViewState.ID()
{
  Swift::UInt32 v1 = *(_DWORD *)(v0 + 20);
  Hasher.init(_seed:)();
  Hasher.combine(bytes:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t protocol witness for static PreferenceKey.reduce(value:nextValue:) in conformance ArchivedViewStatesKey(uint64_t a1, void (*a2)(uint64_t *__return_ptr))
{
  a2(&v3);
  return specialized Array.append<A>(contentsOf:)(v3);
}

uint64_t InterpolatableArchiveContent.Init.value.getter@<X0>(void *a1@<X8>)
{
  uint64_t v2 = type metadata accessor for _ArchivedView(0);
  uint64_t Value = AGGraphGetValue();
  uint64_t v4 = *(void *)(Value + 32);
  uint64_t v5 = Value + *(int *)(v2 + 24);
  uint64_t v6 = (int *)type metadata accessor for InterpolatableArchiveContent(0);
  uint64_t v7 = (char *)a1 + v6[5];
  uint64_t v8 = type metadata accessor for UUID();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 16))(v7, v5, v8);
  BOOL v9 = *(void *)(AGGraphGetValue() + *(int *)(v2 + 28)) != 0;
  type metadata accessor for MutableBox<DisplayList.HostedViewState>(0, &lazy cache variable for type metadata for [ArchivedViewState], (uint64_t)&type metadata for ArchivedViewState, MEMORY[0x1E4FBB320]);
  uint64_t v10 = *(void *)AGGraphGetValue();
  *a1 = v4;
  *((unsigned char *)a1 + v6[6]) = v9;
  *(void *)((char *)a1 + v6[7]) = v10;

  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for static Rule.initialValue.getter in conformance InterpolatableArchiveContent.Init@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for InterpolatableArchiveContent(0);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56);

  return v3(a1, 1, 1, v2);
}

uint64_t protocol witness for Rule.value.getter in conformance InterpolatableArchiveContent.Init@<X0>(void *a1@<X8>)
{
  return InterpolatableArchiveContent.Init.value.getter(a1);
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance InterpolatableArchiveContent.Init(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type InterpolatableArchiveContent.Init and conformance InterpolatableArchiveContent.Init();

  return MEMORY[0x1F40FE388](a1, v2);
}

uint64_t InterpolatableArchiveContent.modifyTransition(state:to:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for InterpolatableArchiveContent(0);
  MEMORY[0x1F4188790](v6);
  uint64_t v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v9);
  uint64_t v11 = (char *)&v19 - v10;
  MEMORY[0x1F4188790](v12);
  uint64_t v14 = (char *)&v19 - v13;
  char v15 = static UUID.== infix(_:_:)();
  outlined init with copy of _ArchivedView(v3, (uint64_t)v14, type metadata accessor for InterpolatableArchiveContent);
  outlined init with copy of _ArchivedView(a2, (uint64_t)v11, type metadata accessor for InterpolatableArchiveContent);
  if (v15)
  {
    outlined destroy of _ArchivedView((uint64_t)v11, type metadata accessor for InterpolatableArchiveContent);
    return outlined destroy of _ArchivedView((uint64_t)v14, type metadata accessor for InterpolatableArchiveContent);
  }
  int v17 = v14[*(int *)(v6 + 24)];
  outlined destroy of _ArchivedView((uint64_t)v14, type metadata accessor for InterpolatableArchiveContent);
  outlined init with take of _ArchivedView((uint64_t)v11, (uint64_t)v8, type metadata accessor for InterpolatableArchiveContent);
  if (v17 != 1)
  {
    outlined destroy of _ArchivedView((uint64_t)v8, type metadata accessor for InterpolatableArchiveContent);
    goto LABEL_7;
  }
  char v18 = v8[*(int *)(v6 + 24)];
  uint64_t result = outlined destroy of _ArchivedView((uint64_t)v8, type metadata accessor for InterpolatableArchiveContent);
  if ((v18 & 1) == 0)
  {
LABEL_7:
    uint64_t result = outlined consume of ContentTransition.Storage(*(void *)a1, *(unsigned int *)(a1 + 8) | ((unint64_t)*(unsigned __int8 *)(a1 + 12) << 32), *(unsigned char *)(a1 + 13));
    *(void *)a1 = 0x8000000002;
    *(_DWORD *)(a1 + 8) = 0x2000000;
    *(_WORD *)(a1 + 12) = 3;
  }
  return result;
}

uint64_t InterpolatableArchiveContent.defaultAnimation(to:)(uint64_t a1)
{
  v18[1] = *MEMORY[0x1E4F143B8];
  v18[0] = 0;
  uint64_t v2 = *(void *)(a1 + *(int *)(type metadata accessor for InterpolatableArchiveContent(0) + 28));
  uint64_t v3 = *(void *)(v2 + 16);
  if (v3)
  {
    uint64_t v4 = v2 + 32;
    swift_bridgeObjectRetain();
    for (uint64_t i = 0; i != v3; ++i)
    {
      uint64_t v6 = (int32x4_t *)(v4 + 32 * i);
      uint64_t v7 = v6[1].i64[1];
      if (v7)
      {
        int32x4_t v17 = *v6;
        __int32 v8 = v6[1].i32[0];
        Swift::UInt32 v9 = v6[1].u32[1];
        swift_retain_n();
        uint64_t v10 = specialized getter of oldIDs #1 in InterpolatableArchiveContent.defaultAnimation(to:)(v18, v1);
        if (!*(void *)(v10 + 16)
          || (Hasher.init(_seed:)(),
              Hasher.combine(bytes:)(),
              Hasher._combine(_:)(v9),
              Swift::Int v11 = Hasher._finalize()(),
              uint64_t v12 = -1 << *(unsigned char *)(v10 + 32),
              unint64_t v13 = v11 & ~v12,
              ((*(void *)(v10 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v13) & 1) == 0))
        {
LABEL_13:
          swift_release();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          goto LABEL_16;
        }
        uint64_t v14 = ~v12;
        while (1)
        {
          char v15 = (int32x4_t *)(*(void *)(v10 + 48) + 24 * v13);
          if ((vminv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(vmovn_s32(vceqq_s32(*v15, v17)), 0xFuLL))) & 1) != 0
            && v15[1].i32[0] == v8
            && v15[1].i32[1] == v9)
          {
            break;
          }
          unint64_t v13 = (v13 + 1) & v14;
          if (((*(void *)(v10 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v13) & 1) == 0) {
            goto LABEL_13;
          }
        }
        swift_release_n();
        swift_bridgeObjectRelease();
      }
    }
    swift_bridgeObjectRelease();
    uint64_t v7 = 0;
  }
  else
  {
    uint64_t v7 = 0;
  }
LABEL_16:
  swift_bridgeObjectRelease();
  return v7;
}

uint64_t specialized getter of oldIDs #1 in InterpolatableArchiveContent.defaultAnimation(to:)(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  if (*a1)
  {
    swift_bridgeObjectRetain();
  }
  else
  {
    uint64_t v4 = *(void *)(a2 + *(int *)(type metadata accessor for InterpolatableArchiveContent(0) + 28));
    lazy protocol witness table accessor for type ArchivedViewState.ID and conformance ArchivedViewState.ID();
    swift_bridgeObjectRetain();
    uint64_t v5 = Set.init(minimumCapacity:)();
    uint64_t v13 = v5;
    uint64_t v6 = *(void *)(v4 + 16);
    if (v6)
    {
      uint64_t v7 = (unint64_t *)(v4 + 48);
      do
      {
        unint64_t v8 = *(v7 - 2);
        unint64_t v9 = *(v7 - 1);
        unint64_t v10 = *v7;
        v7 += 4;
        specialized Set._Variant.insert(_:)(v12, v8, v9, v10);
        --v6;
      }
      while (v6);
      swift_bridgeObjectRelease();
      uint64_t v2 = v13;
    }
    else
    {
      uint64_t v2 = v5;
      swift_bridgeObjectRelease();
    }
    swift_beginAccess();
    *a1 = v2;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  return v2;
}

void protocol witness for static InterpolatableContent.defaultTransition.getter in conformance InterpolatableArchiveContent(uint64_t a1@<X8>)
{
  *(void *)a1 = 0x8000000004;
  *(unsigned char *)(a1 + 12) = 3;
  *(_DWORD *)(a1 + 8) = 0x2000000;
  *(_WORD *)(a1 + 13) = 0;
}

uint64_t specialized InterpolatableContent<>.requiresTransition(to:)(void *a1)
{
  if (*v1 == *a1
    && (uint64_t v3 = type metadata accessor for InterpolatableArchiveContent(0), (static UUID.== infix(_:_:)() & 1) != 0)
    && *((unsigned __int8 *)v1 + *(int *)(v3 + 24)) == *((unsigned __int8 *)a1 + *(int *)(v3 + 24)))
  {
    char v4 = specialized static Array<A>.== infix(_:_:)(*(void *)((char *)v1 + *(int *)(v3 + 28)), *(void *)((char *)a1 + *(int *)(v3 + 28))) ^ 1;
  }
  else
  {
    char v4 = 1;
  }
  return v4 & 1;
}

uint64_t ArchivedDisplayList.updateValue()()
{
  uint64_t v1 = v0;
  uint64_t v56 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (int *)type metadata accessor for _ArchivedView(0);
  MEMORY[0x1F4188790](v2);
  char v4 = (char *)&v32 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  unint64_t v8 = (char *)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for DisplayList.ArchiveIDs();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9);
  uint64_t v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  DisplayList.Version.init(forUpdate:)();
  uint64_t v33 = v47;
  uint64_t Value = AGGraphGetValue();
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, Value + v2[6], v5);
  uint64_t v14 = *(void *)(AGGraphGetValue() + v2[7]);
  if (v14)
  {
    uint64_t v15 = v14;
  }
  else
  {
    _DisplayList_StableIdentityMap.init()();
    uint64_t v15 = v47;
  }
  *(void *)&long long v38 = v15;
  swift_bridgeObjectRetain();
  DisplayList.ArchiveIDs.init(uuid:stableIDs:)();
  uint64_t v16 = *v1;
  uint64_t v17 = AGGraphGetValue();
  outlined init with copy of _ArchivedView(v17, (uint64_t)v4, type metadata accessor for _ArchivedView);
  double v18 = *(float *)&v4[v2[8]];
  outlined destroy of _ArchivedView((uint64_t)v4, type metadata accessor for _ArchivedView);
  swift_beginAccess();
  *(double *)(v16 + 16) = v18;
  type metadata accessor for MutableBox<[Int : Any]>(0, &lazy cache variable for type metadata for DisplayList.ArchiveIDs?, MEMORY[0x1E4F3F478], MEMORY[0x1E4FBB718]);
  uint64_t v19 = swift_allocBox();
  uint64_t v21 = v20;
  outlined init with copy of _ArchivedView((uint64_t)v12, v20, MEMORY[0x1E4F3F478]);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v10 + 56))(v21, 0, 1, v9);
  uint64_t v22 = AGGraphGetValue();
  uint64_t v23 = *(void *)(v22 + 16);
  __int16 v24 = *(_WORD *)(v22 + 24);
  char v25 = *(unsigned char *)(v22 + 26);
  *(void *)&long long v38 = v19;
  *((void *)&v38 + 1) = 0x4000000100000000;
  *(void *)&long long v39 = v23;
  BYTE10(v39) = v25;
  WORD4(v39) = v24;
  uint64_t v26 = (long long *)AGGraphGetValue();
  long long v27 = v26[1];
  long long v47 = *v26;
  long long v48 = v27;
  uint64_t v28 = swift_bridgeObjectRetain();
  MEMORY[0x18C114450](v28);
  int v37 = *((_DWORD *)v1 + 2);
  uint64_t v34 = v33;
  DisplayList.Item.init(_:frame:identity:version:)();
  LOBYTE(v38) = 0;
  DisplayList.Item.canonicalize(options:)();
  DisplayList.UnaryInterpolatorGroup.apply(to:)();
  uint64_t v29 = v50;
  unint64_t v30 = v51;
  long long v38 = v47;
  long long v39 = v48;
  uint64_t v40 = v49;
  uint64_t v41 = v50;
  unint64_t v42 = v51;
  uint64_t v43 = v52;
  char v45 = v54;
  __int16 v44 = v53;
  int v46 = v55;
  outlined copy of DisplayList.Item.Value(v50, v51);
  DisplayList.init(_:)();
  *(void *)&long long v38 = v34;
  WORD4(v38) = v35;
  BYTE10(v38) = v36;
  AGGraphSetOutputValue();
  swift_bridgeObjectRelease();
  outlined consume of DisplayList.Item.Value(v29, v30);
  return outlined destroy of _ArchivedView((uint64_t)v12, MEMORY[0x1E4F3F478]);
}

uint64_t ArchivedAccessibilityAttachment.updateValue()()
{
  uint64_t v1 = v0;
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  if (*(unsigned char *)AGGraphGetValue() == 1)
  {
    int v2 = *(_DWORD *)AGGraphGetValue() >> 1;
    if (v2 != *(_DWORD *)(v0 + 24))
    {
      *(_DWORD *)(v0 + 24) = v2;
      uint64_t v3 = *(void *)(v0 + 32);
      DisplayList.AccessibilityUpdater.createRoot()();
      unint64_t v4 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
      swift_beginAccess();
      *(void *)(v3 + 48) = v4;
      swift_bridgeObjectRelease();
    }
    uint64_t Value = AGGraphGetValue();
    uint64_t v34 = *(void *)Value;
    long long v6 = *(_OWORD *)(Value + 24);
    long long v35 = *(_OWORD *)(Value + 8);
    long long v36 = v6;
    *(_OWORD *)uint64_t v32 = *(_OWORD *)AGGraphGetValue();
    uint64_t v7 = swift_retain();
    *(double *)&unint64_t v8 = MEMORY[0x18C10C240](v7);
    ViewTransform.resetPosition(_:)((CGPoint)__PAIR128__(v9, v8));
    AGGraphGetValue();
    if (v10 & 1) != 0 || (AGGraphGetValue(), (v11))
    {
      char v13 = 1;
    }
    else
    {
      AGGraphGetValue();
      char v13 = v12 & 1;
    }
    uint64_t v18 = *(void *)(v1 + 32);
    uint64_t v19 = AGGraphGetValue();
    __int16 v20 = *(_WORD *)(v19 + 8);
    char v21 = *(unsigned char *)(v19 + 10);
    uint64_t v29 = *(void *)v19;
    __int16 v30 = v20;
    char v31 = v21;
    AGGraphGetValue();
    uint64_t v22 = swift_bridgeObjectRetain();
    MEMORY[0x18C114450](v22);
    *(void *)uint64_t v32 = v34;
    *(_OWORD *)&v32[8] = v35;
    long long v33 = v36;
    swift_retain();
    BOOL v23 = specialized DisplayList.AccessibilityUpdater.update(list:size:transform:geometryChanged:)(&v29, (uint64_t *)v32, v13);
    swift_bridgeObjectRelease();
    swift_release();
    if (!v23 && AGGraphGetOutputValue()) {
      return swift_release();
    }
    __int16 v24 = *(void **)(v18 + 40);
    if (v24)
    {
      type metadata accessor for MutableBox<DisplayList.HostedViewState>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>, MEMORY[0x1E4FBC838] + 8, MEMORY[0x1E4FBBE00]);
      uint64_t v25 = swift_allocObject();
      *(_OWORD *)(v25 + 16) = xmmword_188351940;
      *(void *)(v25 + 32) = v24;
      *(void *)uint64_t v32 = v25;
      specialized Array._endMutation()();
      uint64_t v26 = *(void *)v32;
    }
    else
    {
      uint64_t v26 = MEMORY[0x1E4FBC860];
    }
    uint64_t v27 = *(void *)(v18 + 56);
    *(void *)uint64_t v32 = v26;
    *(void *)&v32[8] = v27;
    id v28 = v24;
    AGGraphSetOutputValue();
    swift_release();
  }
  else
  {
    uint64_t v34 = MEMORY[0x1E4FBC860];
    *(void *)&long long v35 = 0;
    AGGraphSetOutputValue();
    uint64_t result = AGGraphGetValue();
    if ((v15 & 1) == 0) {
      return result;
    }
    uint64_t v16 = *(void *)(v0 + 32);
    DisplayList.AccessibilityUpdater.createRoot()();
    unint64_t v17 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
    swift_beginAccess();
    *(void *)(v16 + 48) = v17;
  }
  return swift_bridgeObjectRelease();
}

uint64_t ArchivedLayoutComputer.updateValue()()
{
  type metadata accessor for _ArchivedView(0);
  uint64_t Value = AGGraphGetValue();
  double v2 = *(double *)Value;
  double v3 = *(double *)(Value + 8);
  BOOL v4 = *(double *)Value == *(double *)(v0 + 8) && v3 == *(double *)(v0 + 16);
  if (!v4 || (uint64_t result = AGGraphGetOutputValue()) == 0)
  {
    lazy protocol witness table accessor for type ArchivedLayoutComputer and conformance ArchivedLayoutComputer();
    lazy protocol witness table accessor for type ArchivedLayoutComputer.Engine and conformance ArchivedLayoutComputer.Engine();
    uint64_t result = StatefulRule<>.update<A>(to:)();
    *(double *)(v0 + 8) = v2;
    *(double *)(v0 + 16) = v3;
  }
  return result;
}

uint64_t protocol witness for LayoutEngine.childGeometries(at:origin:) in conformance ArchivedLayoutComputer.Engine()
{
  return MEMORY[0x1F40FD928]();
}

uint64_t ProtobufDecoder.decodeVarint()()
{
  double v2 = *(char **)(v0 + 8);
  unint64_t v1 = *(void *)(v0 + 16);
  double v3 = v2 + 1;
  if (v1 < (unint64_t)(v2 + 1))
  {
LABEL_2:
    lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
    swift_allocError();
    return swift_willThrow();
  }
  char v5 = *v2;
  uint64_t result = v5 & 0x7F;
  if (v5 < 0)
  {
    unint64_t v7 = 7;
    while (1)
    {
      long long v6 = v3 + 1;
      if (v1 < (unint64_t)(v3 + 1)) {
        break;
      }
      char v8 = *v3;
      unint64_t v9 = (unint64_t)(*v3 & 0x7F) << v7;
      if (v7 > 0x3F) {
        unint64_t v9 = 0;
      }
      result |= v9;
      v7 += 7;
      double v3 = v6;
      if ((v8 & 0x80) == 0) {
        goto LABEL_10;
      }
    }
    *(void *)(v0 + 8) = v3;
    goto LABEL_2;
  }
  long long v6 = v3;
LABEL_10:
  *(void *)(v0 + 8) = v6;
  return result;
}

unint64_t lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError()
{
  unint64_t result = lazy protocol witness table cache variable for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError;
  if (!lazy protocol witness table cache variable for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ArchivedDisplayList and conformance ArchivedDisplayList()
{
  unint64_t result = lazy protocol witness table cache variable for type ArchivedDisplayList and conformance ArchivedDisplayList;
  if (!lazy protocol witness table cache variable for type ArchivedDisplayList and conformance ArchivedDisplayList)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ArchivedDisplayList and conformance ArchivedDisplayList);
  }
  return result;
}

uint64_t sub_187BB46A8@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = EnvironmentValues.accessibilityEnabled.getter();
  *a1 = result & 1;
  return result;
}

uint64_t sub_187BB46E8()
{
  return EnvironmentValues.accessibilityEnabled.setter();
}

BOOL specialized static ArchivedViewState.ID.== infix(_:_:)(int32x4_t *a1, int32x4_t *a2)
{
  BOOL result = 0;
  if ((vminv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(vmovn_s32(vceqq_s32(*a1, *a2)), 0xFuLL))) & 1) != 0
    && a1[1].i32[0] == a2[1].i32[0])
  {
    return a1[1].i32[1] == a2[1].i32[1];
  }
  return result;
}

uint64_t specialized static ArchivedViewState.== infix(_:_:)(int32x4_t *a1, int32x4_t *a2)
{
  uint64_t result = 0;
  if ((vminv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(vmovn_s32(vceqq_s32(*a1, *a2)), 0xFuLL))) & 1) != 0
    && a1[1].i32[0] == a2[1].i32[0]
    && a1[1].i32[1] == a2[1].i32[1])
  {
    uint64_t v4 = a2[1].i64[1];
    if (a1[1].i64[1])
    {
      if (v4)
      {
        swift_retain();
        swift_retain();
        char v5 = static Animation.== infix(_:_:)();
        swift_release();
        swift_release();
        if (v5) {
          return 1;
        }
      }
    }
    else if (!v4)
    {
      return 1;
    }
    return 0;
  }
  return result;
}

uint64_t specialized static InterpolatableArchiveContent.== infix(_:_:)(void *a1, void *a2)
{
  if (*a1 != *a2) {
    return 0;
  }
  uint64_t v4 = type metadata accessor for InterpolatableArchiveContent(0);
  if ((static UUID.== infix(_:_:)() & 1) == 0
    || *((unsigned __int8 *)a1 + *(int *)(v4 + 24)) != *((unsigned __int8 *)a2 + *(int *)(v4 + 24)))
  {
    return 0;
  }
  uint64_t v6 = *(int *)(v4 + 28);
  uint64_t v7 = *(void *)((char *)a1 + v6);
  uint64_t v8 = *(void *)((char *)a2 + v6);

  return specialized static Array<A>.== infix(_:_:)(v7, v8);
}

uint64_t specialized ArchivedAccessibilityAttachment.init(list:accessibilityEnabled:phase:position:size:transform:resetSeed:)@<X0>(int a1@<W0>, int a2@<W1>, int a3@<W2>, int a4@<W3>, int a5@<W4>, int a6@<W5>, int a7@<W6>, uint64_t a8@<X8>)
{
  type metadata accessor for ViewGraph();
  uint64_t v14 = MEMORY[0x18C114EE0]() + 200;
  swift_beginAccess();
  uint64_t v15 = MEMORY[0x18C119DF0](v14);
  uint64_t result = swift_release();
  if (v15)
  {
    swift_getObjectType();
    uint64_t v17 = swift_conformsToProtocol2();
    if (v17) {
      uint64_t v18 = v17;
    }
    else {
      uint64_t v18 = 0;
    }
    if (v17) {
      uint64_t v19 = v15;
    }
    else {
      uint64_t v19 = 0;
    }
    if (v19)
    {
      type metadata accessor for DisplayList.AccessibilityUpdater();
      uint64_t v20 = swift_allocObject();
      *(_WORD *)(v20 + 16) = 0;
      *(void *)(v20 + 32) = 0;
      swift_unknownObjectWeakInit();
      *(void *)(v20 + 48) = MEMORY[0x1E4FBC868];
      *(void *)(v20 + 56) = 0;
      *(void *)(v20 + 32) = v18;
      *(void *)(v20 + 40) = 0;
      swift_unknownObjectWeakAssign();
      DisplayList.AccessibilityUpdater.createRoot()();
      uint64_t result = swift_unknownObjectRelease();
      *(_DWORD *)a8 = a1;
      *(_DWORD *)(a8 + 4) = a2;
      *(_DWORD *)(a8 + 8) = a3;
      *(_DWORD *)(a8 + 12) = a4;
      *(_DWORD *)(a8 + 16) = a5;
      *(_DWORD *)(a8 + 20) = a6;
      *(_DWORD *)(a8 + 24) = a7;
      *(void *)(a8 + 32) = v20;
      return result;
    }
    uint64_t result = swift_unknownObjectRelease();
  }
  __break(1u);
  return result;
}

unint64_t lazy protocol witness table accessor for type ArchivedAccessibilityAttachment and conformance ArchivedAccessibilityAttachment()
{
  unint64_t result = lazy protocol witness table cache variable for type ArchivedAccessibilityAttachment and conformance ArchivedAccessibilityAttachment;
  if (!lazy protocol witness table cache variable for type ArchivedAccessibilityAttachment and conformance ArchivedAccessibilityAttachment)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ArchivedAccessibilityAttachment and conformance ArchivedAccessibilityAttachment);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ArchivedLayoutComputer and conformance ArchivedLayoutComputer()
{
  unint64_t result = lazy protocol witness table cache variable for type ArchivedLayoutComputer and conformance ArchivedLayoutComputer;
  if (!lazy protocol witness table cache variable for type ArchivedLayoutComputer and conformance ArchivedLayoutComputer)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ArchivedLayoutComputer and conformance ArchivedLayoutComputer);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ArchivedLayoutComputer and conformance ArchivedLayoutComputer;
  if (!lazy protocol witness table cache variable for type ArchivedLayoutComputer and conformance ArchivedLayoutComputer)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ArchivedLayoutComputer and conformance ArchivedLayoutComputer);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type DisplayList.HostedViews.Preference<ArchivedViewStatesKey> and conformance DisplayList.HostedViews.Preference<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type DisplayList.HostedViews.Preference<ArchivedViewStatesKey> and conformance DisplayList.HostedViews.Preference<A>;
  if (!lazy protocol witness table cache variable for type DisplayList.HostedViews.Preference<ArchivedViewStatesKey> and conformance DisplayList.HostedViews.Preference<A>)
  {
    type metadata accessor for DisplayList.HostedViews.Preference<ArchivedViewStatesKey>(255, &lazy cache variable for type metadata for DisplayList.HostedViews.Preference<ArchivedViewStatesKey>, (uint64_t)&type metadata for ArchivedViewStatesKey, (uint64_t)&protocol witness table for ArchivedViewStatesKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for DisplayList.HostedViews.Preference);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DisplayList.HostedViews.Preference<ArchivedViewStatesKey> and conformance DisplayList.HostedViews.Preference<A>);
  }
  return result;
}

uint64_t type metadata accessor for InterpolatableArchiveContent(uint64_t a1)
{
  return type metadata accessor for SortableTableHeaderButton(a1, (uint64_t *)&type metadata singleton initialization cache for InterpolatableArchiveContent);
}

unint64_t lazy protocol witness table accessor for type InterpolatableArchiveContent.Init and conformance InterpolatableArchiveContent.Init()
{
  unint64_t result = lazy protocol witness table cache variable for type InterpolatableArchiveContent.Init and conformance InterpolatableArchiveContent.Init;
  if (!lazy protocol witness table cache variable for type InterpolatableArchiveContent.Init and conformance InterpolatableArchiveContent.Init)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InterpolatableArchiveContent.Init and conformance InterpolatableArchiveContent.Init);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type InterpolatableArchiveContent.Init and conformance InterpolatableArchiveContent.Init;
  if (!lazy protocol witness table cache variable for type InterpolatableArchiveContent.Init and conformance InterpolatableArchiveContent.Init)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InterpolatableArchiveContent.Init and conformance InterpolatableArchiveContent.Init);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type ArchiveReader and conformance ArchiveReader(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t base witness table accessor for BidirectionalCollection in _ArchivedViewStates()
{
  return lazy protocol witness table accessor for type ArchiveReader and conformance ArchiveReader(&lazy protocol witness table cache variable for type _ArchivedViewStates and conformance _ArchivedViewStates, (void (*)(uint64_t))type metadata accessor for _ArchivedViewStates);
}

uint64_t associated type witness table accessor for Collection.Indices : RandomAccessCollection in _ArchivedViewStates()
{
  return lazy protocol witness table accessor for type Range<Int> and conformance <> Range<A>((unint64_t *)&lazy protocol witness table cache variable for type Range<Int> and conformance <> Range<A>);
}

void type metadata accessor for DisplayList.HostedViews.Preference<ArchivedViewStatesKey>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = a5(0, a3, a4);
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

uint64_t associated type witness table accessor for Collection.SubSequence : RandomAccessCollection in _ArchivedViewStates()
{
  return lazy protocol witness table accessor for type Slice<_ArchivedViewStates> and conformance <> Slice<A>(&lazy protocol witness table cache variable for type Slice<_ArchivedViewStates> and conformance <> Slice<A>, &lazy protocol witness table cache variable for type _ArchivedViewStates and conformance _ArchivedViewStates);
}

void type metadata accessor for Slice<_ArchivedViewStates>(uint64_t a1)
{
}

uint64_t base witness table accessor for Collection in _ArchivedViewStates()
{
  return lazy protocol witness table accessor for type ArchiveReader and conformance ArchiveReader(&lazy protocol witness table cache variable for type _ArchivedViewStates and conformance _ArchivedViewStates, (void (*)(uint64_t))type metadata accessor for _ArchivedViewStates);
}

uint64_t associated type witness table accessor for Collection.Indices : BidirectionalCollection in _ArchivedViewStates()
{
  return lazy protocol witness table accessor for type Range<Int> and conformance <> Range<A>(&lazy protocol witness table cache variable for type Range<Int> and conformance <> Range<A>);
}

uint64_t associated type witness table accessor for Collection.SubSequence : BidirectionalCollection in _ArchivedViewStates()
{
  return lazy protocol witness table accessor for type Slice<_ArchivedViewStates> and conformance <> Slice<A>(&lazy protocol witness table cache variable for type Slice<_ArchivedViewStates> and conformance <> Slice<A>, &lazy protocol witness table cache variable for type _ArchivedViewStates and conformance _ArchivedViewStates);
}

uint64_t lazy protocol witness table accessor for type Slice<_ArchivedViewStates> and conformance <> Slice<A>(unint64_t *a1, unint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for Slice<_ArchivedViewStates>(255);
    lazy protocol witness table accessor for type ArchiveReader and conformance ArchiveReader(a2, (void (*)(uint64_t))type metadata accessor for _ArchivedViewStates);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t base witness table accessor for Sequence in _ArchivedViewStates()
{
  return lazy protocol witness table accessor for type ArchiveReader and conformance ArchiveReader(&lazy protocol witness table cache variable for type _ArchivedViewStates and conformance _ArchivedViewStates, (void (*)(uint64_t))type metadata accessor for _ArchivedViewStates);
}

uint64_t associated type witness table accessor for Collection.Indices : Collection in _ArchivedViewStates()
{
  return lazy protocol witness table accessor for type Range<Int> and conformance <> Range<A>(&lazy protocol witness table cache variable for type Range<Int> and conformance <> Range<A>);
}

uint64_t associated type witness table accessor for Collection.SubSequence : Collection in _ArchivedViewStates()
{
  return lazy protocol witness table accessor for type ArchiveReader and conformance ArchiveReader(&lazy protocol witness table cache variable for type Slice<_ArchivedViewStates> and conformance Slice<A>, type metadata accessor for Slice<_ArchivedViewStates>);
}

uint64_t associated type witness table accessor for Sequence.Iterator : IteratorProtocol in _ArchivedViewStates()
{
  return lazy protocol witness table accessor for type ArchiveReader and conformance ArchiveReader(&lazy protocol witness table cache variable for type IndexingIterator<_ArchivedViewStates> and conformance IndexingIterator<A>, type metadata accessor for IndexingIterator<_ArchivedViewStates>);
}

void type metadata accessor for IndexingIterator<_ArchivedViewStates>(uint64_t a1)
{
}

void type metadata accessor for Slice<_ArchivedViewStates>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v6 = type metadata accessor for _ArchivedViewStates(255);
    uint64_t v7 = lazy protocol witness table accessor for type ArchiveReader and conformance ArchiveReader(&lazy protocol witness table cache variable for type _ArchivedViewStates and conformance _ArchivedViewStates, (void (*)(uint64_t))type metadata accessor for _ArchivedViewStates);
    unint64_t v8 = a3(a1, v6, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

unint64_t lazy protocol witness table accessor for type _ArchivedViewStates.DeploymentVersion and conformance _ArchivedViewStates.DeploymentVersion()
{
  unint64_t result = lazy protocol witness table cache variable for type _ArchivedViewStates.DeploymentVersion and conformance _ArchivedViewStates.DeploymentVersion;
  if (!lazy protocol witness table cache variable for type _ArchivedViewStates.DeploymentVersion and conformance _ArchivedViewStates.DeploymentVersion)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ArchivedViewStates.DeploymentVersion and conformance _ArchivedViewStates.DeploymentVersion);
  }
  return result;
}

_UNKNOWN **base witness table accessor for View in _ArchivedView()
{
  return &protocol witness table for _ArchivedView;
}

double sub_187BB5154@<D0>(uint64_t a1@<X0>, double *a2@<X8>)
{
  double result = *(float *)(a1 + *(int *)(type metadata accessor for _ArchivedView(0) + 32));
  *a2 = result;
  return result;
}

uint64_t sub_187BB5190(double *a1, uint64_t a2)
{
  float v3 = *a1;
  uint64_t result = type metadata accessor for _ArchivedView(0);
  *(float *)(a2 + *(int *)(result + 32)) = v3;
  return result;
}

void *initializeBufferWithCopyOfBuffer for _ArchivedViewStates(void *a1, void *a2, int *a3)
{
  int v3 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  uint64_t v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    uint64_t v7 = (void *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
  }
  else
  {
    uint64_t v7 = a1;
    uint64_t v8 = a3[5];
    uint64_t v9 = (char *)a1 + v8;
    char v10 = (char *)a2 + v8;
    uint64_t v11 = *(void *)((char *)a2 + v8 + 8);
    *(void *)uint64_t v9 = *(void *)((char *)a2 + v8);
    *((void *)v9 + 1) = v11;
    *((void *)v9 + 2) = *(void *)((char *)a2 + v8 + 16);
    v9[24] = *((unsigned char *)a2 + v8 + 24);
    *((void *)v9 + 4) = *(void *)((char *)a2 + v8 + 32);
    v9[40] = *((unsigned char *)a2 + v8 + 40);
    char v12 = (int *)type metadata accessor for ArchivedViewCore.Metadata();
    uint64_t v13 = v12[8];
    uint64_t v22 = &v10[v13];
    BOOL v23 = &v9[v13];
    uint64_t v14 = type metadata accessor for UUID();
    char v21 = *(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 16);
    swift_retain();
    swift_bridgeObjectRetain();
    v21(v23, v22, v14);
    v9[v12[9]] = v10[v12[9]];
    uint64_t v15 = v12[10];
    uint64_t v16 = &v9[v15];
    uint64_t v17 = &v10[v15];
    uint64_t v18 = *((void *)v17 + 1);
    *(void *)uint64_t v16 = *(void *)v17;
    *((void *)v16 + 1) = v18;
    v9[v12[11]] = v10[v12[11]];
    uint64_t v19 = a3[7];
    *(void *)((char *)v7 + a3[6]) = *(void *)((char *)a2 + a3[6]);
    *(void *)((char *)v7 + v19) = *(void *)((char *)a2 + v19);
    *(void *)((char *)v7 + a3[8]) = *(void *)((char *)a2 + a3[8]);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_retain();
  }
  swift_retain();
  return v7;
}

uint64_t destroy for _ArchivedViewStates(uint64_t a1, uint64_t a2)
{
  swift_release();
  uint64_t v4 = a1 + *(int *)(a2 + 20);
  swift_bridgeObjectRelease();
  uint64_t v5 = v4 + *(int *)(type metadata accessor for ArchivedViewCore.Metadata() + 32);
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v5, v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();

  return swift_release();
}

void *initializeWithCopy for _ArchivedViewStates(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = *(void *)((char *)a2 + v6 + 8);
  *(void *)uint64_t v7 = *(void *)((char *)a2 + v6);
  *((void *)v7 + 1) = v9;
  v7[24] = *((unsigned char *)a2 + v6 + 24);
  *((void *)v7 + 2) = *(void *)((char *)a2 + v6 + 16);
  v7[40] = *((unsigned char *)a2 + v6 + 40);
  *((void *)v7 + 4) = *(void *)((char *)a2 + v6 + 32);
  char v10 = (int *)type metadata accessor for ArchivedViewCore.Metadata();
  uint64_t v11 = v10[8];
  uint64_t v20 = &v8[v11];
  char v21 = &v7[v11];
  uint64_t v12 = type metadata accessor for UUID();
  uint64_t v13 = *(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16);
  swift_retain();
  swift_bridgeObjectRetain();
  v13(v21, v20, v12);
  v7[v10[9]] = v8[v10[9]];
  uint64_t v14 = v10[10];
  uint64_t v15 = &v7[v14];
  uint64_t v16 = &v8[v14];
  uint64_t v17 = *((void *)v16 + 1);
  *(void *)uint64_t v15 = *(void *)v16;
  *((void *)v15 + 1) = v17;
  v7[v10[11]] = v8[v10[11]];
  uint64_t v18 = a3[7];
  *(void *)((char *)a1 + a3[6]) = *(void *)((char *)a2 + a3[6]);
  *(void *)((char *)a1 + v18) = *(void *)((char *)a2 + v18);
  *(void *)((char *)a1 + a3[8]) = *(void *)((char *)a2 + a3[8]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  return a1;
}

void *assignWithCopy for _ArchivedViewStates(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  *(void *)uint64_t v7 = *(void *)((char *)a2 + v6);
  *((void *)v7 + 1) = *(void *)((char *)a2 + v6 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v9 = *((void *)v8 + 2);
  v7[24] = v8[24];
  *((void *)v7 + 2) = v9;
  uint64_t v10 = *((void *)v8 + 4);
  v7[40] = v8[40];
  *((void *)v7 + 4) = v10;
  uint64_t v11 = (int *)type metadata accessor for ArchivedViewCore.Metadata();
  uint64_t v12 = v11[8];
  uint64_t v13 = &v7[v12];
  uint64_t v14 = &v8[v12];
  uint64_t v15 = type metadata accessor for UUID();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 24))(v13, v14, v15);
  v7[v11[9]] = v8[v11[9]];
  uint64_t v16 = v11[10];
  uint64_t v17 = &v7[v16];
  uint64_t v18 = &v8[v16];
  *(void *)uint64_t v17 = *(void *)v18;
  *((void *)v17 + 1) = *((void *)v18 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v7[v11[11]] = v8[v11[11]];
  *(void *)((char *)a1 + a3[6]) = *(void *)((char *)a2 + a3[6]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)((char *)a1 + a3[7]) = *(void *)((char *)a2 + a3[7]);
  swift_retain();
  swift_release();
  *(void *)((char *)a1 + a3[8]) = *(void *)((char *)a2 + a3[8]);
  swift_retain();
  swift_release();
  return a1;
}

void *initializeWithTake for _ArchivedViewStates(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  *(_OWORD *)uint64_t v7 = *(_OWORD *)((char *)a2 + v6);
  v7[24] = *((unsigned char *)a2 + v6 + 24);
  *((void *)v7 + 2) = *(void *)((char *)a2 + v6 + 16);
  v7[40] = *((unsigned char *)a2 + v6 + 40);
  *((void *)v7 + 4) = *(void *)((char *)a2 + v6 + 32);
  uint64_t v9 = (int *)type metadata accessor for ArchivedViewCore.Metadata();
  uint64_t v10 = v9[8];
  uint64_t v11 = &v7[v10];
  uint64_t v12 = &v8[v10];
  uint64_t v13 = type metadata accessor for UUID();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 32))(v11, v12, v13);
  v7[v9[9]] = v8[v9[9]];
  *(_OWORD *)&v7[v9[10]] = *(_OWORD *)&v8[v9[10]];
  v7[v9[11]] = v8[v9[11]];
  uint64_t v14 = a3[7];
  *(void *)((char *)a1 + a3[6]) = *(void *)((char *)a2 + a3[6]);
  *(void *)((char *)a1 + v14) = *(void *)((char *)a2 + v14);
  *(void *)((char *)a1 + a3[8]) = *(void *)((char *)a2 + a3[8]);
  return a1;
}

void *assignWithTake for _ArchivedViewStates(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  swift_release();
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = *(void *)((char *)a2 + v6 + 8);
  *(void *)uint64_t v7 = *(void *)((char *)a2 + v6);
  *((void *)v7 + 1) = v9;
  swift_bridgeObjectRelease();
  *((void *)v7 + 2) = *((void *)v8 + 2);
  v7[24] = v8[24];
  *((void *)v7 + 4) = *((void *)v8 + 4);
  v7[40] = v8[40];
  uint64_t v10 = (int *)type metadata accessor for ArchivedViewCore.Metadata();
  uint64_t v11 = v10[8];
  uint64_t v12 = &v7[v11];
  uint64_t v13 = &v8[v11];
  uint64_t v14 = type metadata accessor for UUID();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 40))(v12, v13, v14);
  v7[v10[9]] = v8[v10[9]];
  uint64_t v15 = v10[10];
  uint64_t v16 = &v7[v15];
  uint64_t v17 = &v8[v15];
  uint64_t v19 = *(void *)v17;
  uint64_t v18 = *((void *)v17 + 1);
  *(void *)uint64_t v16 = v19;
  *((void *)v16 + 1) = v18;
  swift_bridgeObjectRelease();
  v7[v10[11]] = v8[v10[11]];
  *(void *)((char *)a1 + a3[6]) = *(void *)((char *)a2 + a3[6]);
  swift_bridgeObjectRelease();
  *(void *)((char *)a1 + a3[7]) = *(void *)((char *)a2 + a3[7]);
  swift_release();
  *(void *)((char *)a1 + a3[8]) = *(void *)((char *)a2 + a3[8]);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for _ArchivedViewStates(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_187BB59CC);
}

uint64_t sub_187BB59CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return __swift_get_extra_inhabitant_indexTm_3(a1, a2, a3, MEMORY[0x1E4F3FC60]);
}

uint64_t storeEnumTagSinglePayload for _ArchivedViewStates(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_187BB59F8);
}

uint64_t sub_187BB59F8(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  return __swift_store_extra_inhabitant_indexTm_3(a1, a2, a3, a4, MEMORY[0x1E4F3FC60]);
}

uint64_t type metadata completion function for _ArchivedViewStates()
{
  uint64_t result = type metadata accessor for ArchivedViewCore.Metadata();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for _ArchivedViewStates.EncodingStyle()
{
  return &type metadata for _ArchivedViewStates.EncodingStyle;
}

ValueMetadata *type metadata accessor for _ArchivedViewStates.DeploymentVersion()
{
  return &type metadata for _ArchivedViewStates.DeploymentVersion;
}

void *initializeBufferWithCopyOfBuffer for _ArchivedView(uint64_t a1, uint64_t *a2, int *a3)
{
  uint64_t v4 = (void *)a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v13 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (void *)(v13 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(void *)(a1 + 16) = a2[2];
    *(_WORD *)(a1 + 24) = *((_WORD *)a2 + 12);
    *(unsigned char *)(a1 + 26) = *((unsigned char *)a2 + 26);
    uint64_t v7 = a3[6];
    uint64_t v8 = a1 + v7;
    uint64_t v9 = (uint64_t)a2 + v7;
    *(void *)(a1 + 32) = a2[4];
    uint64_t v10 = type metadata accessor for UUID();
    uint64_t v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16);
    swift_bridgeObjectRetain();
    v11(v8, v9, v10);
    uint64_t v12 = a3[8];
    *(void *)((char *)v4 + a3[7]) = *(uint64_t *)((char *)a2 + a3[7]);
    *(_DWORD *)((char *)v4 + v12) = *(_DWORD *)((char *)a2 + v12);
    swift_bridgeObjectRetain();
  }
  return v4;
}

uint64_t destroy for _ArchivedView(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 24);
  uint64_t v5 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for _ArchivedView(uint64_t a1, uint64_t a2, int *a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_WORD *)(a1 + 24) = *(_WORD *)(a2 + 24);
  *(unsigned char *)(a1 + 26) = *(unsigned char *)(a2 + 26);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  uint64_t v6 = a3[6];
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = type metadata accessor for UUID();
  uint64_t v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 16);
  swift_bridgeObjectRetain();
  v10(v7, v8, v9);
  uint64_t v11 = a3[8];
  *(void *)(a1 + a3[7]) = *(void *)(a2 + a3[7]);
  *(_DWORD *)(a1 + v11) = *(_DWORD *)(a2 + v11);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for _ArchivedView(uint64_t a1, uint64_t a2, int *a3)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_WORD *)(a1 + 24) = *(_WORD *)(a2 + 24);
  *(unsigned char *)(a1 + 26) = *(unsigned char *)(a2 + 26);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  uint64_t v6 = a3[6];
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  *(void *)(a1 + a3[7]) = *(void *)(a2 + a3[7]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + a3[8]) = *(_DWORD *)(a2 + a3[8]);
  return a1;
}

uint64_t initializeWithTake for _ArchivedView(uint64_t a1, uint64_t a2, int *a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 11) = *(_OWORD *)(a2 + 11);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  uint64_t v6 = a3[6];
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32))(v7, v8, v9);
  uint64_t v10 = a3[8];
  *(void *)(a1 + a3[7]) = *(void *)(a2 + a3[7]);
  *(_DWORD *)(a1 + v10) = *(_DWORD *)(a2 + v10);
  return a1;
}

uint64_t assignWithTake for _ArchivedView(uint64_t a1, uint64_t a2, int *a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(_WORD *)(a1 + 24) = *(_WORD *)(a2 + 24);
  *(unsigned char *)(a1 + 26) = *(unsigned char *)(a2 + 26);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  uint64_t v6 = a3[6];
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 40))(v7, v8, v9);
  *(void *)(a1 + a3[7]) = *(void *)(a2 + a3[7]);
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + a3[8]) = *(_DWORD *)(a2 + a3[8]);
  return a1;
}

uint64_t getEnumTagSinglePayload for _ArchivedView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_187BB5FF8);
}

uint64_t sub_187BB5FF8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 16);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for UUID();
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 24);
    return v9(v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for _ArchivedView(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_187BB60BC);
}

uint64_t sub_187BB60BC(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 16) = (a2 - 1);
  }
  else
  {
    uint64_t v7 = type metadata accessor for UUID();
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 24);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t type metadata completion function for _ArchivedView()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t type metadata completion function for _AnyArchivedViewDelegate()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_initClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t initializeWithCopy for _ArchivedViewStates.State(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_WORD *)(a1 + 24) = *(_WORD *)(a2 + 24);
  *(unsigned char *)(a1 + 26) = *(unsigned char *)(a2 + 26);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for _ArchivedViewStates.State(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_WORD *)(a1 + 24) = *(_WORD *)(a2 + 24);
  *(unsigned char *)(a1 + 26) = *(unsigned char *)(a2 + 26);
  return a1;
}

__n128 __swift_memcpy27_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  *(_OWORD *)(a1 + 11) = *(_OWORD *)(a2 + 11);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for _ArchivedViewStates.State(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(_WORD *)(a1 + 24) = *(_WORD *)(a2 + 24);
  *(unsigned char *)(a1 + 26) = *(unsigned char *)(a2 + 26);
  return a1;
}

uint64_t getEnumTagSinglePayload for _ArchivedViewStates.State(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 27)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for _ArchivedViewStates.State(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(unsigned char *)(result + 26) = 0;
    *(_WORD *)(result + 24) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 27) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 16) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 27) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for _ArchivedViewStates.State()
{
  return &type metadata for _ArchivedViewStates.State;
}

void *type metadata accessor for InterpolatableArchiveContent.Init()
{
  return &unk_1ED453200;
}

void *initializeBufferWithCopyOfBuffer for InterpolatableArchiveContent(void *a1, void *a2, int *a3)
{
  unint64_t v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v12 = *a2;
    *unint64_t v4 = *a2;
    unint64_t v4 = (void *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *a1 = *a2;
    uint64_t v7 = a3[5];
    uint64_t v8 = (char *)a1 + v7;
    uint64_t v9 = (char *)a2 + v7;
    uint64_t v10 = type metadata accessor for UUID();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16))(v8, v9, v10);
    uint64_t v11 = a3[7];
    *((unsigned char *)v4 + a3[6]) = *((unsigned char *)a2 + a3[6]);
    *(void *)((char *)v4 + v11) = *(void *)((char *)a2 + v11);
    swift_bridgeObjectRetain();
  }
  return v4;
}

uint64_t destroy for InterpolatableArchiveContent(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1 + *(int *)(a2 + 20);
  uint64_t v3 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(v2, v3);

  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for InterpolatableArchiveContent(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UUID();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16))(v7, v8, v9);
  uint64_t v10 = a3[7];
  *((unsigned char *)a1 + a3[6]) = *((unsigned char *)a2 + a3[6]);
  *(void *)((char *)a1 + v10) = *(void *)((char *)a2 + v10);
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for InterpolatableArchiveContent(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UUID();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  *((unsigned char *)a1 + a3[6]) = *((unsigned char *)a2 + a3[6]);
  *(void *)((char *)a1 + a3[7]) = *(void *)((char *)a2 + a3[7]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

void *initializeWithTake for InterpolatableArchiveContent(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UUID();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32))(v7, v8, v9);
  uint64_t v10 = a3[7];
  *((unsigned char *)a1 + a3[6]) = *((unsigned char *)a2 + a3[6]);
  *(void *)((char *)a1 + v10) = *(void *)((char *)a2 + v10);
  return a1;
}

void *assignWithTake for InterpolatableArchiveContent(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UUID();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 40))(v7, v8, v9);
  uint64_t v10 = a3[7];
  *((unsigned char *)a1 + a3[6]) = *((unsigned char *)a2 + a3[6]);
  *(void *)((char *)a1 + v10) = *(void *)((char *)a2 + v10);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for InterpolatableArchiveContent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_187BB68B0);
}

uint64_t sub_187BB68B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return __swift_get_extra_inhabitant_indexTm_3(a1, a2, a3, MEMORY[0x1E4F27990]);
}

uint64_t __swift_get_extra_inhabitant_indexTm_3(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  uint64_t v7 = a4(0);
  uint64_t v8 = *(void *)(v7 - 8);
  if (*(_DWORD *)(v8 + 84) == a2)
  {
    uint64_t v9 = v7;
    uint64_t v10 = a1 + *(int *)(a3 + 20);
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 48);
    return v11(v10, a2, v9);
  }
  else
  {
    unint64_t v13 = *(void *)(a1 + *(int *)(a3 + 28));
    if (v13 >= 0xFFFFFFFF) {
      LODWORD(v13) = -1;
    }
    return (v13 + 1);
  }
}

uint64_t storeEnumTagSinglePayload for InterpolatableArchiveContent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_187BB69A4);
}

uint64_t sub_187BB69A4(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  return __swift_store_extra_inhabitant_indexTm_3(a1, a2, a3, a4, MEMORY[0x1E4F27990]);
}

uint64_t __swift_store_extra_inhabitant_indexTm_3(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t (*a5)(void))
{
  uint64_t result = a5(0);
  uint64_t v10 = *(void *)(result - 8);
  if (*(_DWORD *)(v10 + 84) == a3)
  {
    uint64_t v11 = result;
    uint64_t v12 = a1 + *(int *)(a4 + 20);
    unint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 56);
    return v13(v12, a2, a2, v11);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 28)) = (a2 - 1);
  }
  return result;
}

uint64_t type metadata completion function for InterpolatableArchiveContent()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for ArchivedViewStatesKey()
{
  return &type metadata for ArchivedViewStatesKey;
}

uint64_t assignWithCopy for ArchivedViewState(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for ArchivedViewState(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_release();
  return a1;
}

ValueMetadata *type metadata accessor for ArchivedViewState()
{
  return &type metadata for ArchivedViewState;
}

void *type metadata accessor for ArchivedLayoutComputer()
{
  return &unk_1ED438B88;
}

void *type metadata accessor for ArchivedAccessibilityAttachment()
{
  return &unk_1ED45AD68;
}

uint64_t initializeBufferWithCopyOfBuffer for ArchivedDisplayList(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for ArchivedDisplayList(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  return a1;
}

uint64_t assignWithTake for ArchivedDisplayList(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_release();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  return a1;
}

void *type metadata accessor for ArchivedDisplayList()
{
  return &unk_1ED473AC8;
}

unint64_t lazy protocol witness table accessor for type ArchivedViewState.ID and conformance ArchivedViewState.ID()
{
  unint64_t result = lazy protocol witness table cache variable for type ArchivedViewState.ID and conformance ArchivedViewState.ID;
  if (!lazy protocol witness table cache variable for type ArchivedViewState.ID and conformance ArchivedViewState.ID)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ArchivedViewState.ID and conformance ArchivedViewState.ID);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ArchivedViewState.ID and conformance ArchivedViewState.ID;
  if (!lazy protocol witness table cache variable for type ArchivedViewState.ID and conformance ArchivedViewState.ID)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ArchivedViewState.ID and conformance ArchivedViewState.ID);
  }
  return result;
}

uint64_t outlined init with copy of _ArchivedView(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t outlined init with take of _ArchivedView(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t outlined consume of ContentTransition.Storage(uint64_t a1, uint64_t a2, char a3)
{
  if (a3 == 1) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ArchivedLayoutComputer.Engine and conformance ArchivedLayoutComputer.Engine()
{
  unint64_t result = lazy protocol witness table cache variable for type ArchivedLayoutComputer.Engine and conformance ArchivedLayoutComputer.Engine;
  if (!lazy protocol witness table cache variable for type ArchivedLayoutComputer.Engine and conformance ArchivedLayoutComputer.Engine)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ArchivedLayoutComputer.Engine and conformance ArchivedLayoutComputer.Engine);
  }
  return result;
}

void type metadata accessor for MutableBox<DisplayList.HostedViewState>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

uint64_t outlined destroy of _ArchivedView(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t type metadata accessor for _ArchivedViewStates.Error(uint64_t a1)
{
  return type metadata accessor for SortableTableHeaderButton(a1, (uint64_t *)&type metadata singleton initialization cache for _ArchivedViewStates.Error);
}

void type metadata accessor for ArchivableFactory<ArchivableLinkModifier>()
{
  if (!lazy cache variable for type metadata for ArchivableFactory<ArchivableLinkModifier>)
  {
    type metadata accessor for ArchivableLinkModifier(255);
    lazy protocol witness table accessor for type ArchiveReader and conformance ArchiveReader(&lazy protocol witness table cache variable for type ArchivableLinkModifier and conformance ArchivableLinkModifier, (void (*)(uint64_t))type metadata accessor for ArchivableLinkModifier);
    lazy protocol witness table accessor for type ArchiveReader and conformance ArchiveReader(&lazy protocol witness table cache variable for type ArchivableLinkModifier and conformance ArchivableLinkModifier, (void (*)(uint64_t))type metadata accessor for ArchivableLinkModifier);
    lazy protocol witness table accessor for type ArchiveReader and conformance ArchiveReader((unint64_t *)&lazy protocol witness table cache variable for type ArchivableLinkModifier and conformance ArchivableLinkModifier, (void (*)(uint64_t))type metadata accessor for ArchivableLinkModifier);
    unint64_t v0 = type metadata accessor for ArchivableFactory();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ArchivableFactory<ArchivableLinkModifier>);
    }
  }
}

void type metadata accessor for ArchivableFactory<TimelineProgressView<ArchivableLinearProgressView.Base>.ArchivableTimelineProgressView>()
{
  if (!lazy cache variable for type metadata for ArchivableFactory<TimelineProgressView<ArchivableLinearProgressView.Base>.ArchivableTimelineProgressView>)
  {
    type metadata accessor for TimelineProgressView<ArchivableLinearProgressView.Base>.ArchivableTimelineProgressView(255, &lazy cache variable for type metadata for TimelineProgressView<ArchivableLinearProgressView.Base>.ArchivableTimelineProgressView, (void (*)(void))lazy protocol witness table accessor for type ArchivableLinearProgressView.Base and conformance ArchivableLinearProgressView.Base);
    lazy protocol witness table accessor for type TimelineProgressView<ResolvedCircularPlaybackProgressView.Base>.ArchivableTimelineProgressView and conformance TimelineProgressView<A>.ArchivableTimelineProgressView(&lazy protocol witness table cache variable for type TimelineProgressView<ArchivableLinearProgressView.Base>.ArchivableTimelineProgressView and conformance TimelineProgressView<A>.ArchivableTimelineProgressView, &lazy cache variable for type metadata for TimelineProgressView<ArchivableLinearProgressView.Base>.ArchivableTimelineProgressView, (void (*)(void))lazy protocol witness table accessor for type ArchivableLinearProgressView.Base and conformance ArchivableLinearProgressView.Base);
    unint64_t v0 = type metadata accessor for ArchivableFactory();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ArchivableFactory<TimelineProgressView<ArchivableLinearProgressView.Base>.ArchivableTimelineProgressView>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type ArchivableLinearProgressView.Base and conformance ArchivableLinearProgressView.Base()
{
  unint64_t result = lazy protocol witness table cache variable for type ArchivableLinearProgressView.Base and conformance ArchivableLinearProgressView.Base;
  if (!lazy protocol witness table cache variable for type ArchivableLinearProgressView.Base and conformance ArchivableLinearProgressView.Base)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ArchivableLinearProgressView.Base and conformance ArchivableLinearProgressView.Base);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ArchivableLinearProgressView.Base and conformance ArchivableLinearProgressView.Base;
  if (!lazy protocol witness table cache variable for type ArchivableLinearProgressView.Base and conformance ArchivableLinearProgressView.Base)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ArchivableLinearProgressView.Base and conformance ArchivableLinearProgressView.Base);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type TimelineProgressView<ResolvedCircularPlaybackProgressView.Base>.ArchivableTimelineProgressView and conformance TimelineProgressView<A>.ArchivableTimelineProgressView(unint64_t *a1, unint64_t *a2, void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for TimelineProgressView<ArchivableLinearProgressView.Base>.ArchivableTimelineProgressView(255, a2, a3);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void type metadata accessor for ArchivableFactory<TimelineProgressView<CircularPercentageGaugeRing>.ArchivableTimelineProgressView>()
{
  if (!lazy cache variable for type metadata for ArchivableFactory<TimelineProgressView<CircularPercentageGaugeRing>.ArchivableTimelineProgressView>)
  {
    type metadata accessor for TimelineProgressView<ArchivableLinearProgressView.Base>.ArchivableTimelineProgressView(255, &lazy cache variable for type metadata for TimelineProgressView<CircularPercentageGaugeRing>.ArchivableTimelineProgressView, (void (*)(void))lazy protocol witness table accessor for type CircularPercentageGaugeRing and conformance CircularPercentageGaugeRing);
    lazy protocol witness table accessor for type TimelineProgressView<ResolvedCircularPlaybackProgressView.Base>.ArchivableTimelineProgressView and conformance TimelineProgressView<A>.ArchivableTimelineProgressView(&lazy protocol witness table cache variable for type TimelineProgressView<CircularPercentageGaugeRing>.ArchivableTimelineProgressView and conformance TimelineProgressView<A>.ArchivableTimelineProgressView, &lazy cache variable for type metadata for TimelineProgressView<CircularPercentageGaugeRing>.ArchivableTimelineProgressView, (void (*)(void))lazy protocol witness table accessor for type CircularPercentageGaugeRing and conformance CircularPercentageGaugeRing);
    unint64_t v0 = type metadata accessor for ArchivableFactory();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ArchivableFactory<TimelineProgressView<CircularPercentageGaugeRing>.ArchivableTimelineProgressView>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type CircularPercentageGaugeRing and conformance CircularPercentageGaugeRing()
{
  unint64_t result = lazy protocol witness table cache variable for type CircularPercentageGaugeRing and conformance CircularPercentageGaugeRing;
  if (!lazy protocol witness table cache variable for type CircularPercentageGaugeRing and conformance CircularPercentageGaugeRing)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CircularPercentageGaugeRing and conformance CircularPercentageGaugeRing);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CircularPercentageGaugeRing and conformance CircularPercentageGaugeRing;
  if (!lazy protocol witness table cache variable for type CircularPercentageGaugeRing and conformance CircularPercentageGaugeRing)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CircularPercentageGaugeRing and conformance CircularPercentageGaugeRing);
  }
  return result;
}

void type metadata accessor for ArchivableFactory<HandGestureShortcutInteractiveControl.HandGestureShortcutPreferenceWriter>()
{
  if (!lazy cache variable for type metadata for ArchivableFactory<HandGestureShortcutInteractiveControl.HandGestureShortcutPreferenceWriter>)
  {
    lazy protocol witness table accessor for type HandGestureShortcutInteractiveControl.HandGestureShortcutPreferenceWriter and conformance HandGestureShortcutInteractiveControl.HandGestureShortcutPreferenceWriter();
    lazy protocol witness table accessor for type HandGestureShortcutInteractiveControl.HandGestureShortcutPreferenceWriter and conformance HandGestureShortcutInteractiveControl.HandGestureShortcutPreferenceWriter();
    lazy protocol witness table accessor for type HandGestureShortcutInteractiveControl.HandGestureShortcutPreferenceWriter and conformance HandGestureShortcutInteractiveControl.HandGestureShortcutPreferenceWriter();
    unint64_t v0 = type metadata accessor for ArchivableFactory();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ArchivableFactory<HandGestureShortcutInteractiveControl.HandGestureShortcutPreferenceWriter>);
    }
  }
}

void type metadata accessor for ArchivableFactory<TimelineProgressView<ResolvedCircularPlaybackProgressView.Base>.ArchivableTimelineProgressView>()
{
  if (!lazy cache variable for type metadata for ArchivableFactory<TimelineProgressView<ResolvedCircularPlaybackProgressView.Base>.ArchivableTimelineProgressView>)
  {
    type metadata accessor for TimelineProgressView<ArchivableLinearProgressView.Base>.ArchivableTimelineProgressView(255, &lazy cache variable for type metadata for TimelineProgressView<ResolvedCircularPlaybackProgressView.Base>.ArchivableTimelineProgressView, (void (*)(void))lazy protocol witness table accessor for type ResolvedCircularPlaybackProgressView.Base and conformance ResolvedCircularPlaybackProgressView.Base);
    lazy protocol witness table accessor for type TimelineProgressView<ResolvedCircularPlaybackProgressView.Base>.ArchivableTimelineProgressView and conformance TimelineProgressView<A>.ArchivableTimelineProgressView(&lazy protocol witness table cache variable for type TimelineProgressView<ResolvedCircularPlaybackProgressView.Base>.ArchivableTimelineProgressView and conformance TimelineProgressView<A>.ArchivableTimelineProgressView, &lazy cache variable for type metadata for TimelineProgressView<ResolvedCircularPlaybackProgressView.Base>.ArchivableTimelineProgressView, (void (*)(void))lazy protocol witness table accessor for type ResolvedCircularPlaybackProgressView.Base and conformance ResolvedCircularPlaybackProgressView.Base);
    unint64_t v0 = type metadata accessor for ArchivableFactory();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ArchivableFactory<TimelineProgressView<ResolvedCircularPlaybackProgressView.Base>.ArchivableTimelineProgressView>);
    }
  }
}

void type metadata accessor for TimelineProgressView<ArchivableLinearProgressView.Base>.ArchivableTimelineProgressView(uint64_t a1, unint64_t *a2, void (*a3)(void))
{
  if (!*a2)
  {
    a3();
    unint64_t v4 = type metadata accessor for TimelineProgressView.ArchivableTimelineProgressView();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

unint64_t lazy protocol witness table accessor for type ResolvedCircularPlaybackProgressView.Base and conformance ResolvedCircularPlaybackProgressView.Base()
{
  unint64_t result = lazy protocol witness table cache variable for type ResolvedCircularPlaybackProgressView.Base and conformance ResolvedCircularPlaybackProgressView.Base;
  if (!lazy protocol witness table cache variable for type ResolvedCircularPlaybackProgressView.Base and conformance ResolvedCircularPlaybackProgressView.Base)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ResolvedCircularPlaybackProgressView.Base and conformance ResolvedCircularPlaybackProgressView.Base);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ResolvedCircularPlaybackProgressView.Base and conformance ResolvedCircularPlaybackProgressView.Base;
  if (!lazy protocol witness table cache variable for type ResolvedCircularPlaybackProgressView.Base and conformance ResolvedCircularPlaybackProgressView.Base)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ResolvedCircularPlaybackProgressView.Base and conformance ResolvedCircularPlaybackProgressView.Base);
  }
  return result;
}

void type metadata accessor for ArchivableFactory<ArchivableButtonAppIntentModifier>()
{
  if (!lazy cache variable for type metadata for ArchivableFactory<ArchivableButtonAppIntentModifier>)
  {
    lazy protocol witness table accessor for type ArchivableButtonAppIntentModifier and conformance ArchivableButtonAppIntentModifier();
    lazy protocol witness table accessor for type ArchivableButtonAppIntentModifier and conformance ArchivableButtonAppIntentModifier();
    lazy protocol witness table accessor for type ArchivableButtonAppIntentModifier and conformance ArchivableButtonAppIntentModifier();
    unint64_t v0 = type metadata accessor for ArchivableFactory();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ArchivableFactory<ArchivableButtonAppIntentModifier>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type ArchivableButtonAppIntentModifier and conformance ArchivableButtonAppIntentModifier()
{
  unint64_t result = lazy protocol witness table cache variable for type ArchivableButtonAppIntentModifier and conformance ArchivableButtonAppIntentModifier;
  if (!lazy protocol witness table cache variable for type ArchivableButtonAppIntentModifier and conformance ArchivableButtonAppIntentModifier)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ArchivableButtonAppIntentModifier and conformance ArchivableButtonAppIntentModifier);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ArchivableButtonAppIntentModifier and conformance ArchivableButtonAppIntentModifier;
  if (!lazy protocol witness table cache variable for type ArchivableButtonAppIntentModifier and conformance ArchivableButtonAppIntentModifier)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ArchivableButtonAppIntentModifier and conformance ArchivableButtonAppIntentModifier);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ArchivableButtonAppIntentModifier and conformance ArchivableButtonAppIntentModifier;
  if (!lazy protocol witness table cache variable for type ArchivableButtonAppIntentModifier and conformance ArchivableButtonAppIntentModifier)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ArchivableButtonAppIntentModifier and conformance ArchivableButtonAppIntentModifier);
  }
  return result;
}

void type metadata accessor for ArchivableFactory<ArchivableToggleAppIntentModifier>()
{
  if (!lazy cache variable for type metadata for ArchivableFactory<ArchivableToggleAppIntentModifier>)
  {
    lazy protocol witness table accessor for type ArchivableToggleAppIntentModifier and conformance ArchivableToggleAppIntentModifier();
    lazy protocol witness table accessor for type ArchivableToggleAppIntentModifier and conformance ArchivableToggleAppIntentModifier();
    lazy protocol witness table accessor for type ArchivableToggleAppIntentModifier and conformance ArchivableToggleAppIntentModifier();
    unint64_t v0 = type metadata accessor for ArchivableFactory();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ArchivableFactory<ArchivableToggleAppIntentModifier>);
    }
  }
}

void type metadata accessor for ArchivableFactory<ArchivablePlaybackButtonViewModifier>()
{
  if (!lazy cache variable for type metadata for ArchivableFactory<ArchivablePlaybackButtonViewModifier>)
  {
    type metadata accessor for ArchivablePlaybackButtonViewModifier(255);
    lazy protocol witness table accessor for type ArchiveReader and conformance ArchiveReader(&lazy protocol witness table cache variable for type ArchivablePlaybackButtonViewModifier and conformance ArchivablePlaybackButtonViewModifier, (void (*)(uint64_t))type metadata accessor for ArchivablePlaybackButtonViewModifier);
    lazy protocol witness table accessor for type ArchiveReader and conformance ArchiveReader(&lazy protocol witness table cache variable for type ArchivablePlaybackButtonViewModifier and conformance ArchivablePlaybackButtonViewModifier, (void (*)(uint64_t))type metadata accessor for ArchivablePlaybackButtonViewModifier);
    lazy protocol witness table accessor for type ArchiveReader and conformance ArchiveReader(&lazy protocol witness table cache variable for type ArchivablePlaybackButtonViewModifier and conformance ArchivablePlaybackButtonViewModifier, (void (*)(uint64_t))type metadata accessor for ArchivablePlaybackButtonViewModifier);
    unint64_t v0 = type metadata accessor for ArchivableFactory();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ArchivableFactory<ArchivablePlaybackButtonViewModifier>);
    }
  }
}

void type metadata accessor for ArchivableFactory<ArchivableAccessibilityActionModifier>()
{
  if (!lazy cache variable for type metadata for ArchivableFactory<ArchivableAccessibilityActionModifier>)
  {
    lazy protocol witness table accessor for type ArchivableAccessibilityActionModifier and conformance ArchivableAccessibilityActionModifier();
    lazy protocol witness table accessor for type ArchivableAccessibilityActionModifier and conformance ArchivableAccessibilityActionModifier();
    lazy protocol witness table accessor for type ArchivableAccessibilityActionModifier and conformance ArchivableAccessibilityActionModifier();
    unint64_t v0 = type metadata accessor for ArchivableFactory();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ArchivableFactory<ArchivableAccessibilityActionModifier>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type ArchivableAccessibilityActionModifier and conformance ArchivableAccessibilityActionModifier()
{
  unint64_t result = lazy protocol witness table cache variable for type ArchivableAccessibilityActionModifier and conformance ArchivableAccessibilityActionModifier;
  if (!lazy protocol witness table cache variable for type ArchivableAccessibilityActionModifier and conformance ArchivableAccessibilityActionModifier)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ArchivableAccessibilityActionModifier and conformance ArchivableAccessibilityActionModifier);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ArchivableAccessibilityActionModifier and conformance ArchivableAccessibilityActionModifier;
  if (!lazy protocol witness table cache variable for type ArchivableAccessibilityActionModifier and conformance ArchivableAccessibilityActionModifier)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ArchivableAccessibilityActionModifier and conformance ArchivableAccessibilityActionModifier);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ArchivableAccessibilityActionModifier and conformance ArchivableAccessibilityActionModifier;
  if (!lazy protocol witness table cache variable for type ArchivableAccessibilityActionModifier and conformance ArchivableAccessibilityActionModifier)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ArchivableAccessibilityActionModifier and conformance ArchivableAccessibilityActionModifier);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ArchivableAccessibilityViewModifier.Factory and conformance ArchivableAccessibilityViewModifier.Factory()
{
  unint64_t result = lazy protocol witness table cache variable for type ArchivableAccessibilityViewModifier.Factory and conformance ArchivableAccessibilityViewModifier.Factory;
  if (!lazy protocol witness table cache variable for type ArchivableAccessibilityViewModifier.Factory and conformance ArchivableAccessibilityViewModifier.Factory)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ArchivableAccessibilityViewModifier.Factory and conformance ArchivableAccessibilityViewModifier.Factory);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ArchivableAccessibilityViewModifier.Factory and conformance ArchivableAccessibilityViewModifier.Factory;
  if (!lazy protocol witness table cache variable for type ArchivableAccessibilityViewModifier.Factory and conformance ArchivableAccessibilityViewModifier.Factory)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ArchivableAccessibilityViewModifier.Factory and conformance ArchivableAccessibilityViewModifier.Factory);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ArchivableAccessibilityViewModifier.Factory and conformance ArchivableAccessibilityViewModifier.Factory;
  if (!lazy protocol witness table cache variable for type ArchivableAccessibilityViewModifier.Factory and conformance ArchivableAccessibilityViewModifier.Factory)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ArchivableAccessibilityViewModifier.Factory and conformance ArchivableAccessibilityViewModifier.Factory);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ArchivableAccessibilityViewModifier.Factory and conformance ArchivableAccessibilityViewModifier.Factory;
  if (!lazy protocol witness table cache variable for type ArchivableAccessibilityViewModifier.Factory and conformance ArchivableAccessibilityViewModifier.Factory)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ArchivableAccessibilityViewModifier.Factory and conformance ArchivableAccessibilityViewModifier.Factory);
  }
  return result;
}

void type metadata accessor for ArchivableFactory<InvalidatableContentModifier>()
{
  if (!lazy cache variable for type metadata for ArchivableFactory<InvalidatableContentModifier>)
  {
    lazy protocol witness table accessor for type InvalidatableContentModifier and conformance InvalidatableContentModifier();
    lazy protocol witness table accessor for type InvalidatableContentModifier and conformance InvalidatableContentModifier();
    lazy protocol witness table accessor for type InvalidatableContentModifier and conformance InvalidatableContentModifier();
    unint64_t v0 = type metadata accessor for ArchivableFactory();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ArchivableFactory<InvalidatableContentModifier>);
    }
  }
}

uint64_t *initializeBufferWithCopyOfBuffer for _ArchivedViewStates.Error(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = *(void *)(a3 - 8);
    uint64_t v7 = type metadata accessor for UUID();
    uint64_t v8 = *(void *)(v7 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(a2, 2, v7))
    {
      memcpy(a1, a2, *(void *)(v6 + 64));
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(a1, a2, v7);
      (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v8 + 56))(a1, 0, 2, v7);
    }
  }
  return a1;
}

uint64_t destroy for _ArchivedViewStates.Error(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v2 - 8);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(a1, 2, v2);
  if (!result)
  {
    unint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 8);
    return v4(a1, v2);
  }
  return result;
}

void *initializeWithCopy for _ArchivedViewStates.Error(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v7 + 48))(a2, 2, v6))
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v7 + 16))(a1, a2, v6);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 2, v6);
  }
  return a1;
}

void *assignWithCopy for _ArchivedViewStates.Error(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v7 + 48);
  int v9 = v8(a1, 2, v6);
  int v10 = v8(a2, 2, v6);
  if (!v9)
  {
    if (!v10)
    {
      (*(void (**)(void *, void *, uint64_t))(v7 + 24))(a1, a2, v6);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v7 + 8))(a1, v6);
    goto LABEL_6;
  }
  if (v10)
  {
LABEL_6:
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v7 + 16))(a1, a2, v6);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 2, v6);
  return a1;
}

void *initializeWithTake for _ArchivedViewStates.Error(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v7 + 48))(a2, 2, v6))
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v7 + 32))(a1, a2, v6);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 2, v6);
  }
  return a1;
}

void *assignWithTake for _ArchivedViewStates.Error(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v7 + 48);
  int v9 = v8(a1, 2, v6);
  int v10 = v8(a2, 2, v6);
  if (!v9)
  {
    if (!v10)
    {
      (*(void (**)(void *, void *, uint64_t))(v7 + 40))(a1, a2, v6);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v7 + 8))(a1, v6);
    goto LABEL_6;
  }
  if (v10)
  {
LABEL_6:
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v7 + 32))(a1, a2, v6);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 2, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for _ArchivedViewStates.Error(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_187BB8278);
}

uint64_t sub_187BB8278(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  unsigned int v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48))(a1, a2, v4);
  if (v5 >= 3) {
    return v5 - 2;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for _ArchivedViewStates.Error(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_187BB82F8);
}

uint64_t sub_187BB82F8(uint64_t a1, int a2, uint64_t a3)
{
  if (a2) {
    uint64_t v5 = (a2 + 2);
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56);

  return v7(a1, v5, a3, v6);
}

uint64_t getEnumTag for _ArchivedViewStates.Error(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for UUID();
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 48);

  return v3(a1, 2, v2);
}

uint64_t destructiveInjectEnumTag for _ArchivedViewStates.Error(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);

  return v5(a1, a2, 2, v4);
}

uint64_t type metadata completion function for _ArchivedViewStates.Error()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataSinglePayload();
    return 0;
  }
  return result;
}

void *type metadata accessor for ArchivedLayoutComputer.Engine()
{
  return &unk_1ED438B08;
}

ValueMetadata *type metadata accessor for ArchivedViewState.ID()
{
  return &type metadata for ArchivedViewState.ID;
}

Swift::Void __swiftcall DialogActionDelegate.performDialogAction(_:)(UIAlertAction a1)
{
}

void *initializeBufferWithCopyOfBuffer for DialogActionContext(void *a1, void *a2, int *a3)
{
  int v3 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  uint64_t v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) == 0)
  {
    uint64_t v5 = a3;
    uint64_t v6 = a1;
    a1[1] = a2[1];
    uint64_t v7 = a3[6];
    uint64_t v8 = (void **)((char *)a1 + v7);
    int v9 = (void **)((char *)a2 + v7);
    uint64_t v10 = type metadata accessor for DialogActionContext.CancelType(0);
    uint64_t v11 = *(void *)(v10 - 8);
    uint64_t v12 = *(unsigned int (**)(void **, uint64_t, uint64_t))(v11 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v12(v9, 1, v10))
    {
      _s7SwiftUI16CommandOperationVSgMaTm_0(0, &lazy cache variable for type metadata for DialogActionContext.CancelType?, (void (*)(uint64_t))type metadata accessor for DialogActionContext.CancelType);
      memcpy(v8, v9, *(void *)(*(void *)(v13 - 8) + 64));
      uint64_t v14 = a2;
LABEL_100:
      uint64_t v171 = v5[8];
      *(void *)((char *)v6 + v5[7]) = *(void *)((char *)v14 + v5[7]);
      *(void *)((char *)v6 + v171) = *(void *)((char *)v14 + v171);
      uint64_t v172 = v5[9];
      v173 = *(void **)((char *)v14 + v172);
      *(void *)((char *)v6 + v172) = v173;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      id v174 = v173;
      return v6;
    }
    uint64_t v204 = v11;
    if (swift_getEnumCaseMultiPayload() != 1)
    {
      uint64_t v33 = type metadata accessor for PlatformItemList.Item();
      uint64_t v34 = *(void *)(v33 - 8);
      if ((*(unsigned int (**)(void **, uint64_t, uint64_t))(v34 + 48))(v9, 1, v33))
      {
        _s7SwiftUI16CommandOperationVSgMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for PlatformItemList.Item?, (void (*)(uint64_t))type metadata accessor for PlatformItemList.Item);
        memcpy(v8, v9, *(void *)(*(void *)(v35 - 8) + 64));
        uint64_t v36 = v204;
        uint64_t v14 = a2;
      }
      else
      {
        uint64_t v193 = v34;
        uint64_t v201 = v10;
        v203 = v5;
        long long v39 = *v9;
        uint64_t v40 = v9[1];
        *uint64_t v8 = *v9;
        v8[1] = v40;
        uint64_t v41 = v9[3];
        long long v8[2] = v9[2];
        v8[3] = v41;
        *((unsigned char *)v8 + 32) = *((unsigned char *)v9 + 32);
        unint64_t v42 = v9[6];
        _OWORD v8[5] = v9[5];
        _OWORD v8[6] = v42;
        *((unsigned char *)v8 + 56) = *((unsigned char *)v9 + 56);
        uint64_t v43 = v8 + 8;
        __int16 v44 = v9 + 8;
        unint64_t v45 = (unint64_t)v9[23];
        id v46 = v39;
        id v47 = v40;
        swift_bridgeObjectRetain();
        swift_retain();
        if (v45 >> 1 == 4294967294)
        {
          long long v48 = *((_OWORD *)v9 + 13);
          *((_OWORD *)v8 + 12) = *((_OWORD *)v9 + 12);
          *((_OWORD *)v8 + 13) = v48;
          *((_OWORD *)v8 + 14) = *((_OWORD *)v9 + 14);
          *(_DWORD *)((char *)v8 + 239) = *(_DWORD *)((char *)v9 + 239);
          long long v49 = *((_OWORD *)v9 + 9);
          *((_OWORD *)v8 + 8) = *((_OWORD *)v9 + 8);
          *((_OWORD *)v8 + 9) = v49;
          long long v50 = *((_OWORD *)v9 + 11);
          *((_OWORD *)v8 + 10) = *((_OWORD *)v9 + 10);
          *((_OWORD *)v8 + 11) = v50;
          long long v51 = *((_OWORD *)v9 + 5);
          *uint64_t v43 = *v44;
          *((_OWORD *)v8 + 5) = v51;
          long long v52 = *((_OWORD *)v9 + 7);
          *((_OWORD *)v8 + 6) = *((_OWORD *)v9 + 6);
          *((_OWORD *)v8 + 7) = v52;
        }
        else
        {
          int v80 = *((unsigned __int8 *)v9 + 72);
          if (v80 == 255)
          {
            *(void *)uint64_t v43 = *(void *)v44;
            *((unsigned char *)v8 + 72) = *((unsigned char *)v9 + 72);
          }
          else
          {
            uint64_t v81 = v9[8];
            outlined copy of GraphicsImage.Contents(v81, *((unsigned char *)v9 + 72));
            void v8[8] = v81;
            *((unsigned char *)v8 + 72) = v80;
            unint64_t v45 = (unint64_t)v9[23];
          }
          v8[10] = v9[10];
          *(_OWORD *)(v8 + 11) = *(_OWORD *)(v9 + 11);
          *((unsigned char *)v8 + 104) = *((unsigned char *)v9 + 104);
          *(_OWORD *)((char *)v8 + 108) = *(_OWORD *)((char *)v9 + 108);
          *((unsigned char *)v8 + 124) = *((unsigned char *)v9 + 124);
          long long v110 = *((_OWORD *)v9 + 9);
          *((_OWORD *)v8 + 8) = *((_OWORD *)v9 + 8);
          *((_OWORD *)v8 + 9) = v110;
          *((_WORD *)v8 + 80) = *((_WORD *)v9 + 80);
          *((unsigned char *)v8 + 162) = *((unsigned char *)v9 + 162);
          *((unsigned char *)v8 + 163) = *((unsigned char *)v9 + 163);
          if (v45 >> 1 == 0xFFFFFFFF)
          {
            long long v111 = *(_OWORD *)(v9 + 23);
            *(_OWORD *)(v8 + 21) = *(_OWORD *)(v9 + 21);
            *(_OWORD *)(v8 + 23) = v111;
          }
          else
          {
            uint64_t v112 = (uint64_t)v9[21];
            uint64_t v113 = (uint64_t)v9[22];
            v114 = v9[24];
            outlined copy of AccessibilityImageLabel(v112, v113, v45);
            v8[21] = (void *)v112;
            v8[22] = (void *)v113;
            v8[23] = (void *)v45;
            v8[24] = v114;
          }
          v115 = v9[26];
          v8[25] = v9[25];
          v8[26] = v115;
          *((_WORD *)v8 + 108) = *((_WORD *)v9 + 108);
          *((_DWORD *)v8 + 55) = *((_DWORD *)v9 + 55);
          *((unsigned char *)v8 + 224) = *((unsigned char *)v9 + 224);
          v116 = v9[29];
          v8[29] = v116;
          *((_WORD *)v8 + 120) = *((_WORD *)v9 + 120);
          *((unsigned char *)v8 + 242) = *((unsigned char *)v9 + 242);
          swift_unknownObjectRetain();
          swift_retain();
          id v117 = v116;
        }
        v118 = v9[32];
        if (v118)
        {
          v8[31] = v9[31];
          v8[32] = v118;
          v119 = v9[33];
          swift_bridgeObjectRetain();
          if ((unint64_t)v119 >= 2) {
            id v120 = v119;
          }
          v8[33] = v119;
          *((_DWORD *)v8 + 68) = *((_DWORD *)v9 + 68);
          *((unsigned char *)v8 + 276) = *((unsigned char *)v9 + 276);
          *(_WORD *)((char *)v8 + 277) = *(_WORD *)((char *)v9 + 277);
          v121 = v9[36];
          v8[35] = v9[35];
          v8[36] = v121;
          swift_retain();
          swift_retain();
        }
        else
        {
          long long v122 = *(_OWORD *)(v9 + 33);
          *(_OWORD *)(v8 + 31) = *(_OWORD *)(v9 + 31);
          *(_OWORD *)(v8 + 33) = v122;
          *(_OWORD *)(v8 + 35) = *(_OWORD *)(v9 + 35);
        }
        unint64_t v123 = (unint64_t)v9[41];
        v199 = (int *)v33;
        if (v123 >> 2 == 0xFFFFFFFF)
        {
          long long v124 = *(_OWORD *)(v9 + 47);
          *(_OWORD *)(v8 + 45) = *(_OWORD *)(v9 + 45);
          *(_OWORD *)(v8 + 47) = v124;
          v8[49] = v9[49];
          long long v125 = *(_OWORD *)(v9 + 39);
          *(_OWORD *)(v8 + 37) = *(_OWORD *)(v9 + 37);
          *(_OWORD *)(v8 + 39) = v125;
          long long v126 = *(_OWORD *)(v9 + 43);
          *(_OWORD *)(v8 + 41) = *(_OWORD *)(v9 + 41);
          *(_OWORD *)(v8 + 43) = v126;
        }
        else
        {
          v127 = v9[37];
          uint64_t v128 = (uint64_t)v9[38];
          uint64_t v129 = (uint64_t)v9[39];
          uint64_t v130 = (uint64_t)v9[43];
          v131 = v9[44];
          uint64_t v176 = (uint64_t)v9[40];
          uint64_t v177 = (uint64_t)v9[45];
          uint64_t v179 = (uint64_t)v9[46];
          uint64_t v183 = (uint64_t)v9[47];
          __dstc = v9[48];
          v191 = v9[49];
          uint64_t v132 = (uint64_t)v9[42];
          outlined copy of PlatformItemList.Item.SystemItem(v127, v128, v129, v176, v123, v132, v130, (char)v131, v177, v179, v183, (char)__dstc, (uint64_t)v191);
          v8[37] = v127;
          v8[38] = (void *)v128;
          v8[39] = (void *)v129;
          v8[40] = (void *)v176;
          v8[41] = (void *)v123;
          v8[42] = (void *)v132;
          uint64_t v33 = (uint64_t)v199;
          v8[43] = (void *)v130;
          v8[44] = v131;
          v8[45] = (void *)v177;
          v8[46] = (void *)v179;
          v8[47] = (void *)v183;
          v8[48] = __dstc;
          v8[49] = v191;
        }
        v133 = v9[51];
        if (v133 == (void *)1)
        {
          long long v134 = *((_OWORD *)v9 + 28);
          *((_OWORD *)v8 + 27) = *((_OWORD *)v9 + 27);
          *((_OWORD *)v8 + 28) = v134;
          *((unsigned char *)v8 + 464) = *((unsigned char *)v9 + 464);
          long long v135 = *((_OWORD *)v9 + 26);
          *((_OWORD *)v8 + 25) = *((_OWORD *)v9 + 25);
          *((_OWORD *)v8 + 26) = v135;
        }
        else
        {
          *((_DWORD *)v8 + 100) = *((_DWORD *)v9 + 100);
          *((unsigned char *)v8 + 404) = *((unsigned char *)v9 + 404);
          if (v133)
          {
            v136 = v9[52];
            v8[51] = v133;
            v8[52] = v136;
            swift_retain();
          }
          else
          {
            *(_OWORD *)(v8 + 51) = *(_OWORD *)(v9 + 51);
          }
          v137 = v9[53];
          if (v137)
          {
            v138 = v9[54];
            v8[53] = v137;
            v8[54] = v138;
            swift_retain();
          }
          else
          {
            *(_OWORD *)(v8 + 53) = *(_OWORD *)(v9 + 53);
          }
          v139 = v9[55];
          if (v139)
          {
            v140 = v9[56];
            v8[55] = v139;
            v8[56] = v140;
            swift_retain();
          }
          else
          {
            *(_OWORD *)(v8 + 55) = *(_OWORD *)(v9 + 55);
          }
          v8[57] = v9[57];
          *((unsigned char *)v8 + 464) = *((unsigned char *)v9 + 464);
        }
        v141 = v9[60];
        v8[59] = v9[59];
        v8[60] = v141;
        v8[61] = v9[61];
        *((unsigned char *)v8 + 496) = *((unsigned char *)v9 + 496);
        v142 = v9[63];
        swift_bridgeObjectRetain();
        if (v142)
        {
          v143 = v9[64];
          v8[63] = v142;
          v8[64] = v143;
          swift_retain();
        }
        else
        {
          *(_OWORD *)(v8 + 63) = *(_OWORD *)(v9 + 63);
        }
        *((_WORD *)v8 + 260) = *((_WORD *)v9 + 260);
        v144 = v9[66];
        if (v144)
        {
          v8[66] = v144;
          v8[67] = v9[67];
          v8[68] = v9[68];
          swift_bridgeObjectRetain();
          swift_retain();
          swift_retain();
        }
        else
        {
          *((_OWORD *)v8 + 33) = *((_OWORD *)v9 + 33);
          v8[68] = v9[68];
        }
        v145 = v9[69];
        if (v145 == (void *)1)
        {
          uint64_t v146 = v33;
          *(_OWORD *)(v8 + 69) = *(_OWORD *)(v9 + 69);
          v8[71] = v9[71];
        }
        else
        {
          v8[69] = v145;
          v147 = v9[70];
          swift_retain();
          uint64_t v146 = v33;
          if (v147)
          {
            v148 = v9[71];
            v8[70] = v147;
            v8[71] = v148;
            swift_retain();
          }
          else
          {
            *((_OWORD *)v8 + 35) = *((_OWORD *)v9 + 35);
          }
        }
        v149 = v9[72];
        v8[72] = v149;
        v8[73] = v9[73];
        v8[74] = v9[74];
        v8[75] = v9[75];
        v8[76] = v9[76];
        v8[77] = v9[77];
        v8[78] = v9[78];
        *((_WORD *)v8 + 316) = *((_WORD *)v9 + 316);
        *((unsigned char *)v8 + 634) = *((unsigned char *)v9 + 634);
        uint64_t v150 = *(int *)(v146 + 112);
        v192 = (char *)v8 + v150;
        v151 = (char *)v9 + v150;
        uint64_t v152 = type metadata accessor for CommandOperation();
        uint64_t v180 = *(void *)(v152 - 8);
        v184 = *(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v180 + 48);
        id v153 = v149;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v184(v151, 1, v152))
        {
          _s7SwiftUI16CommandOperationVSgMaTm_0(0, &lazy cache variable for type metadata for CommandOperation?, (void (*)(uint64_t))type metadata accessor for CommandOperation);
          memcpy(v192, v151, *(void *)(*(void *)(v154 - 8) + 64));
          uint64_t v5 = v203;
          uint64_t v10 = v201;
          uint64_t v14 = a2;
        }
        else
        {
          unsigned char *v192 = *v151;
          uint64_t v155 = *(int *)(v152 + 20);
          __dsta = (int *)v152;
          v156 = &v192[v155];
          v157 = &v151[v155];
          uint64_t v158 = *(void *)&v151[v155];
          uint64_t v159 = *(void *)&v151[v155 + 8];
          char v160 = v151[v155 + 16];
          outlined copy of Text.Storage(*(void *)v157, *((void *)v157 + 1), v157[16]);
          *(void *)v156 = v158;
          *((void *)v156 + 1) = v159;
          v156[16] = v160;
          *((void *)v156 + 3) = *((void *)v157 + 3);
          uint64_t v161 = *(int *)(type metadata accessor for CommandGroupPlacement(0) + 20);
          v162 = &v156[v161];
          v163 = &v157[v161];
          uint64_t v164 = type metadata accessor for UUID();
          v165 = *(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v164 - 8) + 16);
          swift_bridgeObjectRetain();
          v165(v162, v163, v164);
          uint64_t v166 = __dsta[6];
          v167 = &v192[v166];
          v168 = &v151[v166];
          if (*v168)
          {
            uint64_t v169 = v168[1];
            void *v167 = *v168;
            v167[1] = v169;
            swift_retain();
          }
          else
          {
            *(_OWORD *)v167 = *(_OWORD *)v168;
          }
          uint64_t v5 = v203;
          uint64_t v10 = v201;
          uint64_t v14 = a2;
          (*(void (**)(unsigned char *, void, uint64_t, int *))(v180 + 56))(v192, 0, 1, __dsta);
        }
        *((unsigned char *)v8 + v199[29]) = *((unsigned char *)v9 + v199[29]);
        *((unsigned char *)v8 + v199[30]) = *((unsigned char *)v9 + v199[30]);
        *((unsigned char *)v8 + v199[31]) = *((unsigned char *)v9 + v199[31]);
        *((unsigned char *)v8 + v199[32]) = *((unsigned char *)v9 + v199[32]);
        *(void **)((char *)v8 + v199[33]) = *(void **)((char *)v9 + v199[33]);
        v170 = *(void (**)(void **, void, uint64_t, int *))(v193 + 56);
        swift_retain();
        v170(v8, 0, 1, v199);
        uint64_t v36 = v204;
      }
      goto LABEL_99;
    }
    uint64_t v200 = v10;
    v202 = v5;
    uint64_t v15 = *v9;
    uint64_t v16 = v9[1];
    *uint64_t v8 = *v9;
    v8[1] = v16;
    uint64_t v17 = v9[3];
    long long v8[2] = v9[2];
    v8[3] = v17;
    *((unsigned char *)v8 + 32) = *((unsigned char *)v9 + 32);
    uint64_t v18 = v9[6];
    _OWORD v8[5] = v9[5];
    _OWORD v8[6] = v18;
    *((unsigned char *)v8 + 56) = *((unsigned char *)v9 + 56);
    uint64_t v19 = v8 + 8;
    uint64_t v20 = v9 + 8;
    unint64_t v21 = (unint64_t)v9[23];
    id v22 = v15;
    id v23 = v16;
    swift_bridgeObjectRetain();
    swift_retain();
    if (v21 >> 1 == 4294967294)
    {
      long long v24 = *((_OWORD *)v9 + 13);
      *((_OWORD *)v8 + 12) = *((_OWORD *)v9 + 12);
      *((_OWORD *)v8 + 13) = v24;
      *((_OWORD *)v8 + 14) = *((_OWORD *)v9 + 14);
      *(_DWORD *)((char *)v8 + 239) = *(_DWORD *)((char *)v9 + 239);
      long long v25 = *((_OWORD *)v9 + 9);
      *((_OWORD *)v8 + 8) = *((_OWORD *)v9 + 8);
      *((_OWORD *)v8 + 9) = v25;
      long long v26 = *((_OWORD *)v9 + 11);
      *((_OWORD *)v8 + 10) = *((_OWORD *)v9 + 10);
      *((_OWORD *)v8 + 11) = v26;
      long long v27 = *((_OWORD *)v9 + 5);
      *uint64_t v19 = *v20;
      *((_OWORD *)v8 + 5) = v27;
      long long v28 = *((_OWORD *)v9 + 7);
      *((_OWORD *)v8 + 6) = *((_OWORD *)v9 + 6);
      *((_OWORD *)v8 + 7) = v28;
      uint64_t v29 = v9[32];
      if (v29)
      {
LABEL_8:
        v8[31] = v9[31];
        v8[32] = v29;
        __int16 v30 = v9[33];
        swift_bridgeObjectRetain();
        if ((unint64_t)v30 >= 2) {
          id v31 = v30;
        }
        v8[33] = v30;
        *((_DWORD *)v8 + 68) = *((_DWORD *)v9 + 68);
        *((unsigned char *)v8 + 276) = *((unsigned char *)v9 + 276);
        *(_WORD *)((char *)v8 + 277) = *(_WORD *)((char *)v9 + 277);
        uint64_t v32 = v9[36];
        v8[35] = v9[35];
        v8[36] = v32;
        swift_retain();
        swift_retain();
LABEL_23:
        unint64_t v62 = (unint64_t)v9[41];
        if (v62 >> 2 == 0xFFFFFFFF)
        {
          long long v63 = *(_OWORD *)(v9 + 47);
          *(_OWORD *)(v8 + 45) = *(_OWORD *)(v9 + 45);
          *(_OWORD *)(v8 + 47) = v63;
          v8[49] = v9[49];
          long long v64 = *(_OWORD *)(v9 + 39);
          *(_OWORD *)(v8 + 37) = *(_OWORD *)(v9 + 37);
          *(_OWORD *)(v8 + 39) = v64;
          long long v65 = *(_OWORD *)(v9 + 43);
          *(_OWORD *)(v8 + 41) = *(_OWORD *)(v9 + 41);
          *(_OWORD *)(v8 + 43) = v65;
        }
        else
        {
          long long v66 = v9[37];
          uint64_t v67 = (uint64_t)v9[38];
          uint64_t v68 = (uint64_t)v9[40];
          uint64_t v70 = (uint64_t)v9[42];
          uint64_t v69 = (uint64_t)v9[43];
          uint64_t v71 = v9[44];
          uint64_t v178 = (uint64_t)v9[39];
          uint64_t v181 = (uint64_t)v9[45];
          __dstb = v9[46];
          v189 = v9[47];
          v194 = v9[48];
          uint64_t v197 = (uint64_t)v9[49];
          outlined copy of PlatformItemList.Item.SystemItem(v66, v67, v178, v68, v62, v70, v69, (char)v71, v181, (uint64_t)__dstb, (uint64_t)v189, (char)v194, v197);
          v8[37] = v66;
          v8[38] = (void *)v67;
          v8[39] = (void *)v178;
          v8[40] = (void *)v68;
          v8[41] = (void *)v62;
          v8[42] = (void *)v70;
          v8[43] = (void *)v69;
          v8[44] = v71;
          v8[45] = (void *)v181;
          v8[46] = __dstb;
          v8[47] = v189;
          v8[48] = v194;
          v8[49] = (void *)v197;
        }
        uint64_t v72 = v9[51];
        if (v72 == (void *)1)
        {
          long long v73 = *((_OWORD *)v9 + 28);
          *((_OWORD *)v8 + 27) = *((_OWORD *)v9 + 27);
          *((_OWORD *)v8 + 28) = v73;
          *((unsigned char *)v8 + 464) = *((unsigned char *)v9 + 464);
          long long v74 = *((_OWORD *)v9 + 26);
          *((_OWORD *)v8 + 25) = *((_OWORD *)v9 + 25);
          *((_OWORD *)v8 + 26) = v74;
LABEL_38:
          unint64_t v82 = v9[60];
          v8[59] = v9[59];
          v8[60] = v82;
          v8[61] = v9[61];
          *((unsigned char *)v8 + 496) = *((unsigned char *)v9 + 496);
          unint64_t v83 = v9[63];
          swift_bridgeObjectRetain();
          if (v83)
          {
            unint64_t v84 = v9[64];
            v8[63] = v83;
            v8[64] = v84;
            swift_retain();
          }
          else
          {
            *(_OWORD *)(v8 + 63) = *(_OWORD *)(v9 + 63);
          }
          *((_WORD *)v8 + 260) = *((_WORD *)v9 + 260);
          int v85 = v9[66];
          if (v85)
          {
            v8[66] = v85;
            v8[67] = v9[67];
            v8[68] = v9[68];
            swift_bridgeObjectRetain();
            swift_retain();
            swift_retain();
          }
          else
          {
            *((_OWORD *)v8 + 33) = *((_OWORD *)v9 + 33);
            v8[68] = v9[68];
          }
          uint64_t v86 = v9[69];
          if (v86 == (void *)1)
          {
            *(_OWORD *)(v8 + 69) = *(_OWORD *)(v9 + 69);
            v8[71] = v9[71];
          }
          else
          {
            v8[69] = v86;
            long long v87 = v9[70];
            swift_retain();
            if (v87)
            {
              char v88 = v9[71];
              v8[70] = v87;
              v8[71] = v88;
              swift_retain();
            }
            else
            {
              *((_OWORD *)v8 + 35) = *((_OWORD *)v9 + 35);
            }
          }
          uint64_t v89 = v9[72];
          v8[72] = v89;
          v8[73] = v9[73];
          v8[74] = v9[74];
          v8[75] = v9[75];
          v8[76] = v9[76];
          v8[77] = v9[77];
          v8[78] = v9[78];
          *((_WORD *)v8 + 316) = *((_WORD *)v9 + 316);
          *((unsigned char *)v8 + 634) = *((unsigned char *)v9 + 634);
          uint64_t v90 = type metadata accessor for PlatformItemList.Item();
          uint64_t v91 = *(int *)(v90 + 112);
          __dst = (char *)v8 + v91;
          v190 = (int *)v90;
          v198 = (char *)v9 + v91;
          uint64_t v92 = type metadata accessor for CommandOperation();
          uint64_t v182 = *(void *)(v92 - 8);
          v195 = *(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v182 + 48);
          id v93 = v89;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if (v195(v198, 1, v92))
          {
            _s7SwiftUI16CommandOperationVSgMaTm_0(0, &lazy cache variable for type metadata for CommandOperation?, (void (*)(uint64_t))type metadata accessor for CommandOperation);
            memcpy(__dst, v198, *(void *)(*(void *)(v94 - 8) + 64));
            uint64_t v36 = v204;
            uint64_t v14 = a2;
            uint64_t v5 = v202;
            uint64_t v10 = v200;
          }
          else
          {
            unsigned char *__dst = *v198;
            uint64_t v95 = *(int *)(v92 + 20);
            long long v96 = &__dst[v95];
            long long v97 = &v198[v95];
            uint64_t v98 = *(void *)&v198[v95];
            uint64_t v99 = *(void *)&v198[v95 + 8];
            uint64_t v196 = v92;
            char v100 = v198[v95 + 16];
            outlined copy of Text.Storage(v98, *((void *)v97 + 1), v97[16]);
            *(void *)long long v96 = v98;
            *((void *)v96 + 1) = v99;
            v96[16] = v100;
            *((void *)v96 + 3) = *((void *)v97 + 3);
            uint64_t v101 = *(int *)(type metadata accessor for CommandGroupPlacement(0) + 20);
            long long v102 = &v96[v101];
            long long v103 = &v97[v101];
            uint64_t v104 = type metadata accessor for UUID();
            v105 = *(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v104 - 8) + 16);
            swift_bridgeObjectRetain();
            v105(v102, v103, v104);
            uint64_t v106 = *(int *)(v196 + 24);
            v107 = &__dst[v106];
            v108 = &v198[v106];
            if (*v108)
            {
              uint64_t v109 = v108[1];
              void *v107 = *v108;
              v107[1] = v109;
              swift_retain();
            }
            else
            {
              *(_OWORD *)v107 = *(_OWORD *)v108;
            }
            uint64_t v36 = v204;
            uint64_t v14 = a2;
            uint64_t v5 = v202;
            uint64_t v10 = v200;
            (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v182 + 56))(__dst, 0, 1, v196);
          }
          *((unsigned char *)v8 + v190[29]) = *((unsigned char *)v9 + v190[29]);
          *((unsigned char *)v8 + v190[30]) = *((unsigned char *)v9 + v190[30]);
          *((unsigned char *)v8 + v190[31]) = *((unsigned char *)v9 + v190[31]);
          *((unsigned char *)v8 + v190[32]) = *((unsigned char *)v9 + v190[32]);
          *(void **)((char *)v8 + v190[33]) = *(void **)((char *)v9 + v190[33]);
          swift_retain();
LABEL_99:
          swift_storeEnumTagMultiPayload();
          (*(void (**)(void **, void, uint64_t, uint64_t))(v36 + 56))(v8, 0, 1, v10);
          goto LABEL_100;
        }
        *((_DWORD *)v8 + 100) = *((_DWORD *)v9 + 100);
        *((unsigned char *)v8 + 404) = *((unsigned char *)v9 + 404);
        if (v72)
        {
          unint64_t v75 = v9[52];
          v8[51] = v72;
          v8[52] = v75;
          swift_retain();
          int v76 = v9[53];
          if (v76) {
            goto LABEL_30;
          }
        }
        else
        {
          *(_OWORD *)(v8 + 51) = *(_OWORD *)(v9 + 51);
          int v76 = v9[53];
          if (v76)
          {
LABEL_30:
            long long v77 = v9[54];
            v8[53] = v76;
            v8[54] = v77;
            swift_retain();
            long long v78 = v9[55];
            if (v78)
            {
LABEL_31:
              unint64_t v79 = v9[56];
              v8[55] = v78;
              v8[56] = v79;
              swift_retain();
LABEL_37:
              v8[57] = v9[57];
              *((unsigned char *)v8 + 464) = *((unsigned char *)v9 + 464);
              goto LABEL_38;
            }
LABEL_36:
            *(_OWORD *)(v8 + 55) = *(_OWORD *)(v9 + 55);
            goto LABEL_37;
          }
        }
        *(_OWORD *)(v8 + 53) = *(_OWORD *)(v9 + 53);
        long long v78 = v9[55];
        if (v78) {
          goto LABEL_31;
        }
        goto LABEL_36;
      }
    }
    else
    {
      int v37 = *((unsigned __int8 *)v9 + 72);
      if (v37 == 255)
      {
        *(void *)uint64_t v19 = *(void *)v20;
        *((unsigned char *)v8 + 72) = *((unsigned char *)v9 + 72);
      }
      else
      {
        long long v38 = v9[8];
        outlined copy of GraphicsImage.Contents(v38, *((unsigned char *)v9 + 72));
        void v8[8] = v38;
        *((unsigned char *)v8 + 72) = v37;
        unint64_t v21 = (unint64_t)v9[23];
      }
      v8[10] = v9[10];
      *(_OWORD *)(v8 + 11) = *(_OWORD *)(v9 + 11);
      *((unsigned char *)v8 + 104) = *((unsigned char *)v9 + 104);
      *(_OWORD *)((char *)v8 + 108) = *(_OWORD *)((char *)v9 + 108);
      *((unsigned char *)v8 + 124) = *((unsigned char *)v9 + 124);
      long long v53 = *((_OWORD *)v9 + 9);
      *((_OWORD *)v8 + 8) = *((_OWORD *)v9 + 8);
      *((_OWORD *)v8 + 9) = v53;
      *((_WORD *)v8 + 80) = *((_WORD *)v9 + 80);
      *((unsigned char *)v8 + 162) = *((unsigned char *)v9 + 162);
      *((unsigned char *)v8 + 163) = *((unsigned char *)v9 + 163);
      if (v21 >> 1 == 0xFFFFFFFF)
      {
        long long v54 = *(_OWORD *)(v9 + 23);
        *(_OWORD *)(v8 + 21) = *(_OWORD *)(v9 + 21);
        *(_OWORD *)(v8 + 23) = v54;
      }
      else
      {
        uint64_t v55 = (uint64_t)v9[21];
        uint64_t v56 = (uint64_t)v9[22];
        unsigned int v57 = v9[24];
        outlined copy of AccessibilityImageLabel(v55, v56, v21);
        v8[21] = (void *)v55;
        v8[22] = (void *)v56;
        v8[23] = (void *)v21;
        v8[24] = v57;
      }
      unsigned int v58 = v9[26];
      v8[25] = v9[25];
      v8[26] = v58;
      *((_WORD *)v8 + 108) = *((_WORD *)v9 + 108);
      *((_DWORD *)v8 + 55) = *((_DWORD *)v9 + 55);
      *((unsigned char *)v8 + 224) = *((unsigned char *)v9 + 224);
      uint64_t v59 = v9[29];
      v8[29] = v59;
      *((_WORD *)v8 + 120) = *((_WORD *)v9 + 120);
      *((unsigned char *)v8 + 242) = *((unsigned char *)v9 + 242);
      swift_unknownObjectRetain();
      swift_retain();
      id v60 = v59;
      uint64_t v29 = v9[32];
      if (v29) {
        goto LABEL_8;
      }
    }
    long long v61 = *(_OWORD *)(v9 + 33);
    *(_OWORD *)(v8 + 31) = *(_OWORD *)(v9 + 31);
    *(_OWORD *)(v8 + 33) = v61;
    *(_OWORD *)(v8 + 35) = *(_OWORD *)(v9 + 35);
    goto LABEL_23;
  }
  uint64_t v6 = (void *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
  swift_retain();
  return v6;
}

void destroy for DialogActionContext(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 24);
  uint64_t v5 = type metadata accessor for DialogActionContext.CancelType(0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48))(v4, 1, v5)) {
    goto LABEL_62;
  }
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    uint64_t v13 = type metadata accessor for PlatformItemList.Item();
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 48))(v4, 1, v13)) {
      goto LABEL_62;
    }

    swift_bridgeObjectRelease();
    swift_release();
    uint64_t v14 = *(void *)(v4 + 184);
    unint64_t v15 = v14 & 0xFFFFFFFFFFFFFFFELL;
    if ((v14 & 0xFFFFFFFFFFFFFFFELL) != 0x1FFFFFFFCLL)
    {
      int v16 = *(unsigned __int8 *)(v4 + 72);
      if (v16 != 255)
      {
        outlined consume of GraphicsImage.Contents(*(void **)(v4 + 64), v16);
        uint64_t v14 = *(void *)(v4 + 184);
        unint64_t v15 = v14 & 0xFFFFFFFFFFFFFFFELL;
      }
      if (v15 != 0x1FFFFFFFELL) {
        outlined consume of AccessibilityImageLabel(*(void *)(v4 + 168), *(void *)(v4 + 176), v14);
      }
      swift_unknownObjectRelease();
      swift_release();
    }
    if (*(void *)(v4 + 256))
    {
      swift_bridgeObjectRelease();
      uint64_t v17 = *(void **)(v4 + 264);
      if ((unint64_t)v17 >= 2) {

      }
      swift_release();
      swift_release();
    }
    unint64_t v18 = *(void *)(v4 + 328);
    if (v18 >> 2 != 0xFFFFFFFF) {
      outlined consume of PlatformItemList.Item.SystemItem(*(void **)(v4 + 296), *(void *)(v4 + 304), *(void *)(v4 + 312), *(void *)(v4 + 320), v18, *(void *)(v4 + 336), *(void *)(v4 + 344), *(void *)(v4 + 352), *(void *)(v4 + 360), *(void *)(v4 + 368), *(void *)(v4 + 376), *(void *)(v4 + 384), *(void *)(v4 + 392));
    }
    uint64_t v19 = *(void *)(v4 + 408);
    if (v19)
    {
      if (v19 == 1)
      {
LABEL_50:
        swift_bridgeObjectRelease();
        if (*(void *)(v4 + 504)) {
          swift_release();
        }
        if (*(void *)(v4 + 528))
        {
          swift_bridgeObjectRelease();
          swift_release();
          swift_release();
        }
        if (*(void *)(v4 + 552) != 1)
        {
          swift_release();
          if (*(void *)(v4 + 560)) {
            swift_release();
          }
        }

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v12 = *(int *)(v13 + 112);
        goto LABEL_58;
      }
      swift_release();
    }
    if (*(void *)(v4 + 424)) {
      swift_release();
    }
    if (*(void *)(v4 + 440)) {
      swift_release();
    }
    goto LABEL_50;
  }

  swift_bridgeObjectRelease();
  swift_release();
  uint64_t v6 = *(void *)(v4 + 184);
  unint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
  if ((v6 & 0xFFFFFFFFFFFFFFFELL) != 0x1FFFFFFFCLL)
  {
    int v8 = *(unsigned __int8 *)(v4 + 72);
    if (v8 != 255)
    {
      outlined consume of GraphicsImage.Contents(*(void **)(v4 + 64), v8);
      uint64_t v6 = *(void *)(v4 + 184);
      unint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
    if (v7 != 0x1FFFFFFFELL) {
      outlined consume of AccessibilityImageLabel(*(void *)(v4 + 168), *(void *)(v4 + 176), v6);
    }
    swift_unknownObjectRelease();
    swift_release();
  }
  if (*(void *)(v4 + 256))
  {
    swift_bridgeObjectRelease();
    int v9 = *(void **)(v4 + 264);
    if ((unint64_t)v9 >= 2) {

    }
    swift_release();
    swift_release();
  }
  unint64_t v10 = *(void *)(v4 + 328);
  if (v10 >> 2 != 0xFFFFFFFF) {
    outlined consume of PlatformItemList.Item.SystemItem(*(void **)(v4 + 296), *(void *)(v4 + 304), *(void *)(v4 + 312), *(void *)(v4 + 320), v10, *(void *)(v4 + 336), *(void *)(v4 + 344), *(void *)(v4 + 352), *(void *)(v4 + 360), *(void *)(v4 + 368), *(void *)(v4 + 376), *(void *)(v4 + 384), *(void *)(v4 + 392));
  }
  uint64_t v11 = *(void *)(v4 + 408);
  if (!v11) {
    goto LABEL_18;
  }
  if (v11 != 1)
  {
    swift_release();
LABEL_18:
    if (*(void *)(v4 + 424)) {
      swift_release();
    }
    if (*(void *)(v4 + 440)) {
      swift_release();
    }
  }
  swift_bridgeObjectRelease();
  if (*(void *)(v4 + 504)) {
    swift_release();
  }
  if (*(void *)(v4 + 528))
  {
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
  }
  if (*(void *)(v4 + 552) != 1)
  {
    swift_release();
    if (*(void *)(v4 + 560)) {
      swift_release();
    }
  }

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v12 = *(int *)(type metadata accessor for PlatformItemList.Item() + 112);
LABEL_58:
  uint64_t v20 = v4 + v12;
  uint64_t v21 = type metadata accessor for CommandOperation();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v21 - 8) + 48))(v20, 1, v21))
  {
    uint64_t v22 = v20 + *(int *)(v21 + 20);
    outlined consume of Text.Storage(*(void *)v22, *(void *)(v22 + 8), *(unsigned char *)(v22 + 16));
    swift_bridgeObjectRelease();
    uint64_t v23 = v22 + *(int *)(type metadata accessor for CommandGroupPlacement(0) + 20);
    uint64_t v24 = type metadata accessor for UUID();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v24 - 8) + 8))(v23, v24);
    if (*(void *)(v20 + *(int *)(v21 + 24))) {
      swift_release();
    }
  }
  swift_release();
LABEL_62:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  long long v25 = *(void **)(a1 + *(int *)(a2 + 36));
}

void *initializeWithCopy for DialogActionContext(void *a1, void *a2, int *a3)
{
  int v3 = a3;
  uint64_t v4 = a1;
  uint64_t v5 = a2[1];
  *a1 = *a2;
  a1[1] = v5;
  uint64_t v6 = a3[6];
  unint64_t v7 = (char *)a1 + v6;
  int v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for DialogActionContext.CancelType(0);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (!v11(v8, 1, v9))
  {
    uint64_t v209 = v10;
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v205 = v3;
      v207 = v4;
      uint64_t v14 = *(void **)v8;
      unint64_t v15 = (void *)*((void *)v8 + 1);
      *(void *)unint64_t v7 = *(void *)v8;
      *((void *)v7 + 1) = v15;
      uint64_t v16 = *((void *)v8 + 3);
      *((void *)v7 + 2) = *((void *)v8 + 2);
      *((void *)v7 + 3) = v16;
      unsigned char v7[32] = v8[32];
      uint64_t v17 = *((void *)v8 + 6);
      *((void *)v7 + 5) = *((void *)v8 + 5);
      *((void *)v7 + 6) = v17;
      v7[56] = v8[56];
      unint64_t v18 = v7 + 64;
      uint64_t v19 = v8 + 64;
      unint64_t v20 = *((void *)v8 + 23);
      id v21 = v14;
      id v22 = v15;
      swift_bridgeObjectRetain();
      swift_retain();
      if (v20 >> 1 == 4294967294)
      {
        long long v23 = *((_OWORD *)v8 + 13);
        *((_OWORD *)v7 + 12) = *((_OWORD *)v8 + 12);
        *((_OWORD *)v7 + 13) = v23;
        *((_OWORD *)v7 + 14) = *((_OWORD *)v8 + 14);
        *(_DWORD *)(v7 + 239) = *(_DWORD *)(v8 + 239);
        long long v24 = *((_OWORD *)v8 + 9);
        *((_OWORD *)v7 + 8) = *((_OWORD *)v8 + 8);
        *((_OWORD *)v7 + 9) = v24;
        long long v25 = *((_OWORD *)v8 + 11);
        *((_OWORD *)v7 + 10) = *((_OWORD *)v8 + 10);
        *((_OWORD *)v7 + 11) = v25;
        long long v26 = *((_OWORD *)v8 + 5);
        *unint64_t v18 = *v19;
        *((_OWORD *)v7 + 5) = v26;
        long long v27 = *((_OWORD *)v8 + 7);
        *((_OWORD *)v7 + 6) = *((_OWORD *)v8 + 6);
        *((_OWORD *)v7 + 7) = v27;
        uint64_t v28 = *((void *)v8 + 32);
        if (v28)
        {
LABEL_6:
          *((void *)v7 + 31) = *((void *)v8 + 31);
          *((void *)v7 + 32) = v28;
          uint64_t v29 = (void *)*((void *)v8 + 33);
          swift_bridgeObjectRetain();
          if ((unint64_t)v29 >= 2) {
            id v30 = v29;
          }
          *((void *)v7 + 33) = v29;
          *((_DWORD *)v7 + 68) = *((_DWORD *)v8 + 68);
          v7[276] = v8[276];
          *(_WORD *)(v7 + 277) = *(_WORD *)(v8 + 277);
          uint64_t v31 = *((void *)v8 + 36);
          *((void *)v7 + 35) = *((void *)v8 + 35);
          *((void *)v7 + 36) = v31;
          swift_retain();
          swift_retain();
LABEL_24:
          unint64_t v66 = *((void *)v8 + 41);
          uint64_t v204 = v9;
          if (v66 >> 2 == 0xFFFFFFFF)
          {
            long long v67 = *(_OWORD *)(v8 + 376);
            *(_OWORD *)(v7 + 360) = *(_OWORD *)(v8 + 360);
            *(_OWORD *)(v7 + 376) = v67;
            *((void *)v7 + 49) = *((void *)v8 + 49);
            long long v68 = *(_OWORD *)(v8 + 312);
            *(_OWORD *)(v7 + 296) = *(_OWORD *)(v8 + 296);
            *(_OWORD *)(v7 + 312) = v68;
            long long v69 = *(_OWORD *)(v8 + 344);
            *(_OWORD *)(v7 + 328) = *(_OWORD *)(v8 + 328);
            *(_OWORD *)(v7 + 344) = v69;
          }
          else
          {
            uint64_t v70 = (void *)*((void *)v8 + 37);
            uint64_t v71 = *((void *)v8 + 38);
            uint64_t v73 = *((void *)v8 + 39);
            uint64_t v72 = *((void *)v8 + 40);
            uint64_t v75 = *((void *)v8 + 42);
            uint64_t v74 = *((void *)v8 + 43);
            uint64_t v76 = *((void *)v8 + 44);
            uint64_t v184 = *((void *)v8 + 45);
            uint64_t v187 = *((void *)v8 + 46);
            v192 = (void *)*((void *)v8 + 47);
            __dstb = (void *)*((void *)v8 + 48);
            uint64_t v200 = *((void *)v8 + 49);
            outlined copy of PlatformItemList.Item.SystemItem(v70, v71, v73, v72, v66, v75, v74, v76, v184, v187, (uint64_t)v192, (char)__dstb, v200);
            *((void *)v7 + 37) = v70;
            *((void *)v7 + 38) = v71;
            *((void *)v7 + 39) = v73;
            *((void *)v7 + 40) = v72;
            *((void *)v7 + 41) = v66;
            *((void *)v7 + 42) = v75;
            *((void *)v7 + 43) = v74;
            *((void *)v7 + 44) = v76;
            *((void *)v7 + 45) = v184;
            *((void *)v7 + 46) = v187;
            *((void *)v7 + 47) = v192;
            *((void *)v7 + 48) = __dstb;
            *((void *)v7 + 49) = v200;
          }
          uint64_t v77 = *((void *)v8 + 51);
          if (v77 == 1)
          {
            long long v78 = *((_OWORD *)v8 + 28);
            *((_OWORD *)v7 + 27) = *((_OWORD *)v8 + 27);
            *((_OWORD *)v7 + 28) = v78;
            v7[464] = v8[464];
            long long v79 = *((_OWORD *)v8 + 26);
            *((_OWORD *)v7 + 25) = *((_OWORD *)v8 + 25);
            *((_OWORD *)v7 + 26) = v79;
LABEL_39:
            uint64_t v87 = *((void *)v8 + 60);
            *((void *)v7 + 59) = *((void *)v8 + 59);
            *((void *)v7 + 60) = v87;
            *((void *)v7 + 61) = *((void *)v8 + 61);
            v7[496] = v8[496];
            uint64_t v88 = *((void *)v8 + 63);
            swift_bridgeObjectRetain();
            if (v88)
            {
              uint64_t v89 = *((void *)v8 + 64);
              *((void *)v7 + 63) = v88;
              *((void *)v7 + 64) = v89;
              swift_retain();
            }
            else
            {
              *(_OWORD *)(v7 + 504) = *(_OWORD *)(v8 + 504);
            }
            *((_WORD *)v7 + 260) = *((_WORD *)v8 + 260);
            uint64_t v90 = *((void *)v8 + 66);
            if (v90)
            {
              *((void *)v7 + 66) = v90;
              *((void *)v7 + 67) = *((void *)v8 + 67);
              *((void *)v7 + 68) = *((void *)v8 + 68);
              swift_bridgeObjectRetain();
              swift_retain();
              swift_retain();
            }
            else
            {
              *((_OWORD *)v7 + 33) = *((_OWORD *)v8 + 33);
              *((void *)v7 + 68) = *((void *)v8 + 68);
            }
            uint64_t v91 = *((void *)v8 + 69);
            if (v91 == 1)
            {
              *(_OWORD *)(v7 + 552) = *(_OWORD *)(v8 + 552);
              *((void *)v7 + 71) = *((void *)v8 + 71);
            }
            else
            {
              *((void *)v7 + 69) = v91;
              uint64_t v92 = *((void *)v8 + 70);
              swift_retain();
              if (v92)
              {
                uint64_t v93 = *((void *)v8 + 71);
                *((void *)v7 + 70) = v92;
                *((void *)v7 + 71) = v93;
                swift_retain();
              }
              else
              {
                *((_OWORD *)v7 + 35) = *((_OWORD *)v8 + 35);
              }
            }
            uint64_t v94 = (void *)*((void *)v8 + 72);
            *((void *)v7 + 72) = v94;
            *((void *)v7 + 73) = *((void *)v8 + 73);
            *((void *)v7 + 74) = *((void *)v8 + 74);
            *((void *)v7 + 75) = *((void *)v8 + 75);
            *((void *)v7 + 76) = *((void *)v8 + 76);
            *((void *)v7 + 77) = *((void *)v8 + 77);
            *((void *)v7 + 78) = *((void *)v8 + 78);
            *((_WORD *)v7 + 316) = *((_WORD *)v8 + 316);
            v7[634] = v8[634];
            uint64_t v95 = type metadata accessor for PlatformItemList.Item();
            uint64_t v96 = *(int *)(v95 + 112);
            uint64_t v193 = (int *)v95;
            __dsta = &v7[v96];
            long long v97 = &v8[v96];
            uint64_t v98 = type metadata accessor for CommandOperation();
            uint64_t v188 = *(void *)(v98 - 8);
            uint64_t v201 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v188 + 48);
            id v99 = v94;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            if (v201(v97, 1, v98))
            {
              _s7SwiftUI16CommandOperationVSgMaTm_0(0, &lazy cache variable for type metadata for CommandOperation?, (void (*)(uint64_t))type metadata accessor for CommandOperation);
              memcpy(__dsta, v97, *(void *)(*(void *)(v100 - 8) + 64));
              uint64_t v4 = v207;
              uint64_t v35 = v209;
              uint64_t v13 = a2;
              uint64_t v9 = v204;
              int v3 = v205;
            }
            else
            {
              char *__dsta = *v97;
              uint64_t v101 = *(int *)(v98 + 20);
              long long v102 = &__dsta[v101];
              long long v103 = &v97[v101];
              v202 = v97;
              uint64_t v104 = v98;
              uint64_t v105 = *(void *)&v97[v101];
              uint64_t v106 = *((void *)v103 + 1);
              char v107 = v103[16];
              outlined copy of Text.Storage(v105, v106, v107);
              *(void *)long long v102 = v105;
              *((void *)v102 + 1) = v106;
              v102[16] = v107;
              *((void *)v102 + 3) = *((void *)v103 + 3);
              uint64_t v108 = *(int *)(type metadata accessor for CommandGroupPlacement(0) + 20);
              uint64_t v109 = &v102[v108];
              long long v110 = &v103[v108];
              uint64_t v111 = type metadata accessor for UUID();
              uint64_t v112 = *(void (**)(char *, char *, uint64_t))(*(void *)(v111 - 8) + 16);
              swift_bridgeObjectRetain();
              v112(v109, v110, v111);
              uint64_t v113 = *(int *)(v104 + 24);
              v114 = &__dsta[v113];
              v115 = &v202[v113];
              if (*(void *)v115)
              {
                uint64_t v116 = *((void *)v115 + 1);
                *(void *)v114 = *(void *)v115;
                *((void *)v114 + 1) = v116;
                swift_retain();
              }
              else
              {
                *(_OWORD *)v114 = *(_OWORD *)v115;
              }
              uint64_t v4 = v207;
              uint64_t v35 = v209;
              uint64_t v13 = a2;
              uint64_t v9 = v204;
              int v3 = v205;
              (*(void (**)(char *, void, uint64_t, uint64_t))(v188 + 56))(__dsta, 0, 1, v104);
            }
            v7[v193[29]] = v8[v193[29]];
            v7[v193[30]] = v8[v193[30]];
            v7[v193[31]] = v8[v193[31]];
            v7[v193[32]] = v8[v193[32]];
            *(void *)&v7[v193[33]] = *(void *)&v8[v193[33]];
            swift_retain();
            goto LABEL_96;
          }
          *((_DWORD *)v7 + 100) = *((_DWORD *)v8 + 100);
          v7[404] = v8[404];
          if (v77)
          {
            uint64_t v80 = *((void *)v8 + 52);
            *((void *)v7 + 51) = v77;
            *((void *)v7 + 52) = v80;
            swift_retain();
            uint64_t v81 = *((void *)v8 + 53);
            if (v81) {
              goto LABEL_31;
            }
          }
          else
          {
            *(_OWORD *)(v7 + 408) = *(_OWORD *)(v8 + 408);
            uint64_t v81 = *((void *)v8 + 53);
            if (v81)
            {
LABEL_31:
              uint64_t v82 = *((void *)v8 + 54);
              *((void *)v7 + 53) = v81;
              *((void *)v7 + 54) = v82;
              swift_retain();
              uint64_t v83 = *((void *)v8 + 55);
              if (v83)
              {
LABEL_32:
                uint64_t v84 = *((void *)v8 + 56);
                *((void *)v7 + 55) = v83;
                *((void *)v7 + 56) = v84;
                swift_retain();
LABEL_38:
                *((void *)v7 + 57) = *((void *)v8 + 57);
                v7[464] = v8[464];
                goto LABEL_39;
              }
LABEL_37:
              *(_OWORD *)(v7 + 440) = *(_OWORD *)(v8 + 440);
              goto LABEL_38;
            }
          }
          *(_OWORD *)(v7 + 424) = *(_OWORD *)(v8 + 424);
          uint64_t v83 = *((void *)v8 + 55);
          if (v83) {
            goto LABEL_32;
          }
          goto LABEL_37;
        }
      }
      else
      {
        int v36 = v8[72];
        if (v36 == 255)
        {
          *(void *)unint64_t v18 = *(void *)v19;
          v7[72] = v8[72];
        }
        else
        {
          int v37 = (void *)*((void *)v8 + 8);
          outlined copy of GraphicsImage.Contents(v37, v8[72]);
          *((void *)v7 + 8) = v37;
          v7[72] = v36;
          unint64_t v20 = *((void *)v8 + 23);
        }
        *((void *)v7 + 10) = *((void *)v8 + 10);
        *(_OWORD *)(v7 + 88) = *(_OWORD *)(v8 + 88);
        v7[104] = v8[104];
        *(_OWORD *)(v7 + 108) = *(_OWORD *)(v8 + 108);
        v7[124] = v8[124];
        long long v56 = *((_OWORD *)v8 + 9);
        *((_OWORD *)v7 + 8) = *((_OWORD *)v8 + 8);
        *((_OWORD *)v7 + 9) = v56;
        *((_WORD *)v7 + 80) = *((_WORD *)v8 + 80);
        v7[162] = v8[162];
        v7[163] = v8[163];
        if (v20 >> 1 == 0xFFFFFFFF)
        {
          long long v57 = *(_OWORD *)(v8 + 184);
          *(_OWORD *)(v7 + 168) = *(_OWORD *)(v8 + 168);
          *(_OWORD *)(v7 + 184) = v57;
        }
        else
        {
          uint64_t v58 = *((void *)v8 + 21);
          uint64_t v59 = *((void *)v8 + 22);
          uint64_t v60 = v9;
          uint64_t v61 = *((void *)v8 + 24);
          outlined copy of AccessibilityImageLabel(v58, v59, v20);
          *((void *)v7 + 21) = v58;
          *((void *)v7 + 22) = v59;
          *((void *)v7 + 23) = v20;
          *((void *)v7 + 24) = v61;
          uint64_t v9 = v60;
        }
        uint64_t v62 = *((void *)v8 + 26);
        *((void *)v7 + 25) = *((void *)v8 + 25);
        *((void *)v7 + 26) = v62;
        *((_WORD *)v7 + 108) = *((_WORD *)v8 + 108);
        *((_DWORD *)v7 + 55) = *((_DWORD *)v8 + 55);
        v7[224] = v8[224];
        long long v63 = (void *)*((void *)v8 + 29);
        *((void *)v7 + 29) = v63;
        *((_WORD *)v7 + 120) = *((_WORD *)v8 + 120);
        v7[242] = v8[242];
        swift_unknownObjectRetain();
        swift_retain();
        id v64 = v63;
        uint64_t v28 = *((void *)v8 + 32);
        if (v28) {
          goto LABEL_6;
        }
      }
      long long v65 = *(_OWORD *)(v8 + 264);
      *(_OWORD *)(v7 + 248) = *(_OWORD *)(v8 + 248);
      *(_OWORD *)(v7 + 264) = v65;
      *(_OWORD *)(v7 + 280) = *(_OWORD *)(v8 + 280);
      goto LABEL_24;
    }
    uint64_t v32 = type metadata accessor for PlatformItemList.Item();
    uint64_t v33 = *(unsigned int (***)(void, uint64_t, uint64_t))(v32 - 8);
    if (((unsigned int (**)(char *, uint64_t, uint64_t))v33)[6](v8, 1, v32))
    {
      _s7SwiftUI16CommandOperationVSgMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for PlatformItemList.Item?, (void (*)(uint64_t))type metadata accessor for PlatformItemList.Item);
      memcpy(v7, v8, *(void *)(*(void *)(v34 - 8) + 64));
      uint64_t v35 = v209;
      uint64_t v13 = a2;
LABEL_96:
      swift_storeEnumTagMultiPayload();
      (*(void (**)(char *, void, uint64_t, uint64_t))(v35 + 56))(v7, 0, 1, v9);
      goto LABEL_97;
    }
    __dst = v33;
    v199 = (int *)v32;
    uint64_t v203 = v9;
    v206 = v3;
    v208 = v4;
    long long v38 = *(void **)v8;
    long long v39 = (void *)*((void *)v8 + 1);
    *(void *)unint64_t v7 = *(void *)v8;
    *((void *)v7 + 1) = v39;
    uint64_t v40 = *((void *)v8 + 3);
    *((void *)v7 + 2) = *((void *)v8 + 2);
    *((void *)v7 + 3) = v40;
    unsigned char v7[32] = v8[32];
    uint64_t v41 = *((void *)v8 + 6);
    *((void *)v7 + 5) = *((void *)v8 + 5);
    *((void *)v7 + 6) = v41;
    v7[56] = v8[56];
    unint64_t v42 = v7 + 64;
    uint64_t v43 = v8 + 64;
    unint64_t v44 = *((void *)v8 + 23);
    id v45 = v38;
    id v46 = v39;
    swift_bridgeObjectRetain();
    swift_retain();
    if (v44 >> 1 == 4294967294)
    {
      long long v47 = *((_OWORD *)v8 + 13);
      *((_OWORD *)v7 + 12) = *((_OWORD *)v8 + 12);
      *((_OWORD *)v7 + 13) = v47;
      *((_OWORD *)v7 + 14) = *((_OWORD *)v8 + 14);
      *(_DWORD *)(v7 + 239) = *(_DWORD *)(v8 + 239);
      long long v48 = *((_OWORD *)v8 + 9);
      *((_OWORD *)v7 + 8) = *((_OWORD *)v8 + 8);
      *((_OWORD *)v7 + 9) = v48;
      long long v49 = *((_OWORD *)v8 + 11);
      *((_OWORD *)v7 + 10) = *((_OWORD *)v8 + 10);
      *((_OWORD *)v7 + 11) = v49;
      long long v50 = *((_OWORD *)v8 + 5);
      *unint64_t v42 = *v43;
      *((_OWORD *)v7 + 5) = v50;
      long long v51 = *((_OWORD *)v8 + 7);
      *((_OWORD *)v7 + 6) = *((_OWORD *)v8 + 6);
      *((_OWORD *)v7 + 7) = v51;
      uint64_t v52 = *((void *)v8 + 32);
      if (v52)
      {
LABEL_15:
        *((void *)v7 + 31) = *((void *)v8 + 31);
        *((void *)v7 + 32) = v52;
        long long v53 = (void *)*((void *)v8 + 33);
        swift_bridgeObjectRetain();
        if ((unint64_t)v53 >= 2) {
          id v54 = v53;
        }
        *((void *)v7 + 33) = v53;
        *((_DWORD *)v7 + 68) = *((_DWORD *)v8 + 68);
        v7[276] = v8[276];
        *(_WORD *)(v7 + 277) = *(_WORD *)(v8 + 277);
        uint64_t v55 = *((void *)v8 + 36);
        *((void *)v7 + 35) = *((void *)v8 + 35);
        *((void *)v7 + 36) = v55;
        swift_retain();
        swift_retain();
        goto LABEL_63;
      }
    }
    else
    {
      int v85 = v8[72];
      if (v85 == 255)
      {
        *(void *)unint64_t v42 = *(void *)v43;
        v7[72] = v8[72];
      }
      else
      {
        uint64_t v86 = (void *)*((void *)v8 + 8);
        outlined copy of GraphicsImage.Contents(v86, v8[72]);
        *((void *)v7 + 8) = v86;
        v7[72] = v85;
        unint64_t v44 = *((void *)v8 + 23);
      }
      *((void *)v7 + 10) = *((void *)v8 + 10);
      *(_OWORD *)(v7 + 88) = *(_OWORD *)(v8 + 88);
      v7[104] = v8[104];
      *(_OWORD *)(v7 + 108) = *(_OWORD *)(v8 + 108);
      v7[124] = v8[124];
      long long v117 = *((_OWORD *)v8 + 9);
      *((_OWORD *)v7 + 8) = *((_OWORD *)v8 + 8);
      *((_OWORD *)v7 + 9) = v117;
      *((_WORD *)v7 + 80) = *((_WORD *)v8 + 80);
      v7[162] = v8[162];
      v7[163] = v8[163];
      if (v44 >> 1 == 0xFFFFFFFF)
      {
        long long v118 = *(_OWORD *)(v8 + 184);
        *(_OWORD *)(v7 + 168) = *(_OWORD *)(v8 + 168);
        *(_OWORD *)(v7 + 184) = v118;
      }
      else
      {
        uint64_t v119 = *((void *)v8 + 21);
        uint64_t v120 = *((void *)v8 + 22);
        uint64_t v121 = *((void *)v8 + 24);
        outlined copy of AccessibilityImageLabel(v119, v120, v44);
        *((void *)v7 + 21) = v119;
        *((void *)v7 + 22) = v120;
        *((void *)v7 + 23) = v44;
        *((void *)v7 + 24) = v121;
      }
      uint64_t v122 = *((void *)v8 + 26);
      *((void *)v7 + 25) = *((void *)v8 + 25);
      *((void *)v7 + 26) = v122;
      *((_WORD *)v7 + 108) = *((_WORD *)v8 + 108);
      *((_DWORD *)v7 + 55) = *((_DWORD *)v8 + 55);
      v7[224] = v8[224];
      unint64_t v123 = (void *)*((void *)v8 + 29);
      *((void *)v7 + 29) = v123;
      *((_WORD *)v7 + 120) = *((_WORD *)v8 + 120);
      v7[242] = v8[242];
      swift_unknownObjectRetain();
      swift_retain();
      id v124 = v123;
      uint64_t v52 = *((void *)v8 + 32);
      if (v52) {
        goto LABEL_15;
      }
    }
    long long v125 = *(_OWORD *)(v8 + 264);
    *(_OWORD *)(v7 + 248) = *(_OWORD *)(v8 + 248);
    *(_OWORD *)(v7 + 264) = v125;
    *(_OWORD *)(v7 + 280) = *(_OWORD *)(v8 + 280);
LABEL_63:
    unint64_t v126 = *((void *)v8 + 41);
    if (v126 >> 2 == 0xFFFFFFFF)
    {
      long long v127 = *(_OWORD *)(v8 + 376);
      *(_OWORD *)(v7 + 360) = *(_OWORD *)(v8 + 360);
      *(_OWORD *)(v7 + 376) = v127;
      *((void *)v7 + 49) = *((void *)v8 + 49);
      long long v128 = *(_OWORD *)(v8 + 312);
      *(_OWORD *)(v7 + 296) = *(_OWORD *)(v8 + 296);
      *(_OWORD *)(v7 + 312) = v128;
      long long v129 = *(_OWORD *)(v8 + 344);
      *(_OWORD *)(v7 + 328) = *(_OWORD *)(v8 + 328);
      *(_OWORD *)(v7 + 344) = v129;
    }
    else
    {
      uint64_t v130 = (void *)*((void *)v8 + 37);
      uint64_t v131 = *((void *)v8 + 38);
      uint64_t v133 = *((void *)v8 + 39);
      uint64_t v132 = *((void *)v8 + 40);
      uint64_t v134 = *((void *)v8 + 42);
      uint64_t v135 = *((void *)v8 + 43);
      uint64_t v136 = *((void *)v8 + 44);
      uint64_t v182 = *((void *)v8 + 45);
      uint64_t v183 = *((void *)v8 + 46);
      uint64_t v185 = *((void *)v8 + 47);
      uint64_t v189 = *((void *)v8 + 48);
      v194 = (void *)*((void *)v8 + 49);
      outlined copy of PlatformItemList.Item.SystemItem(v130, v131, v133, v132, v126, v134, v135, v136, v182, v183, v185, v189, (uint64_t)v194);
      *((void *)v7 + 37) = v130;
      *((void *)v7 + 38) = v131;
      *((void *)v7 + 39) = v133;
      *((void *)v7 + 40) = v132;
      *((void *)v7 + 41) = v126;
      *((void *)v7 + 42) = v134;
      *((void *)v7 + 43) = v135;
      *((void *)v7 + 44) = v136;
      *((void *)v7 + 45) = v182;
      *((void *)v7 + 46) = v183;
      *((void *)v7 + 47) = v185;
      *((void *)v7 + 48) = v189;
      *((void *)v7 + 49) = v194;
    }
    uint64_t v137 = *((void *)v8 + 51);
    if (v137 == 1)
    {
      long long v138 = *((_OWORD *)v8 + 28);
      *((_OWORD *)v7 + 27) = *((_OWORD *)v8 + 27);
      *((_OWORD *)v7 + 28) = v138;
      v7[464] = v8[464];
      long long v139 = *((_OWORD *)v8 + 26);
      *((_OWORD *)v7 + 25) = *((_OWORD *)v8 + 25);
      *((_OWORD *)v7 + 26) = v139;
    }
    else
    {
      *((_DWORD *)v7 + 100) = *((_DWORD *)v8 + 100);
      v7[404] = v8[404];
      if (v137)
      {
        uint64_t v140 = *((void *)v8 + 52);
        *((void *)v7 + 51) = v137;
        *((void *)v7 + 52) = v140;
        swift_retain();
      }
      else
      {
        *(_OWORD *)(v7 + 408) = *(_OWORD *)(v8 + 408);
      }
      uint64_t v141 = *((void *)v8 + 53);
      if (v141)
      {
        uint64_t v142 = *((void *)v8 + 54);
        *((void *)v7 + 53) = v141;
        *((void *)v7 + 54) = v142;
        swift_retain();
      }
      else
      {
        *(_OWORD *)(v7 + 424) = *(_OWORD *)(v8 + 424);
      }
      uint64_t v143 = *((void *)v8 + 55);
      if (v143)
      {
        uint64_t v144 = *((void *)v8 + 56);
        *((void *)v7 + 55) = v143;
        *((void *)v7 + 56) = v144;
        swift_retain();
      }
      else
      {
        *(_OWORD *)(v7 + 440) = *(_OWORD *)(v8 + 440);
      }
      *((void *)v7 + 57) = *((void *)v8 + 57);
      v7[464] = v8[464];
    }
    uint64_t v145 = *((void *)v8 + 60);
    *((void *)v7 + 59) = *((void *)v8 + 59);
    *((void *)v7 + 60) = v145;
    *((void *)v7 + 61) = *((void *)v8 + 61);
    v7[496] = v8[496];
    uint64_t v146 = *((void *)v8 + 63);
    swift_bridgeObjectRetain();
    if (v146)
    {
      uint64_t v147 = *((void *)v8 + 64);
      *((void *)v7 + 63) = v146;
      *((void *)v7 + 64) = v147;
      swift_retain();
    }
    else
    {
      *(_OWORD *)(v7 + 504) = *(_OWORD *)(v8 + 504);
    }
    *((_WORD *)v7 + 260) = *((_WORD *)v8 + 260);
    uint64_t v148 = *((void *)v8 + 66);
    if (v148)
    {
      *((void *)v7 + 66) = v148;
      *((void *)v7 + 67) = *((void *)v8 + 67);
      *((void *)v7 + 68) = *((void *)v8 + 68);
      swift_bridgeObjectRetain();
      swift_retain();
      swift_retain();
    }
    else
    {
      *((_OWORD *)v7 + 33) = *((_OWORD *)v8 + 33);
      *((void *)v7 + 68) = *((void *)v8 + 68);
    }
    uint64_t v149 = *((void *)v8 + 69);
    if (v149 == 1)
    {
      *(_OWORD *)(v7 + 552) = *(_OWORD *)(v8 + 552);
      *((void *)v7 + 71) = *((void *)v8 + 71);
    }
    else
    {
      *((void *)v7 + 69) = v149;
      uint64_t v150 = *((void *)v8 + 70);
      swift_retain();
      if (v150)
      {
        uint64_t v151 = *((void *)v8 + 71);
        *((void *)v7 + 70) = v150;
        *((void *)v7 + 71) = v151;
        swift_retain();
      }
      else
      {
        *((_OWORD *)v7 + 35) = *((_OWORD *)v8 + 35);
      }
    }
    uint64_t v152 = (void *)*((void *)v8 + 72);
    *((void *)v7 + 72) = v152;
    *((void *)v7 + 73) = *((void *)v8 + 73);
    *((void *)v7 + 74) = *((void *)v8 + 74);
    *((void *)v7 + 75) = *((void *)v8 + 75);
    *((void *)v7 + 76) = *((void *)v8 + 76);
    *((void *)v7 + 77) = *((void *)v8 + 77);
    *((void *)v7 + 78) = *((void *)v8 + 78);
    *((_WORD *)v7 + 316) = *((_WORD *)v8 + 316);
    v7[634] = v8[634];
    uint64_t v153 = v199[28];
    v195 = &v7[v153];
    uint64_t v154 = &v8[v153];
    uint64_t v155 = type metadata accessor for CommandOperation();
    uint64_t v186 = *(void *)(v155 - 8);
    v190 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v186 + 48);
    id v156 = v152;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v190(v154, 1, v155))
    {
      _s7SwiftUI16CommandOperationVSgMaTm_0(0, &lazy cache variable for type metadata for CommandOperation?, (void (*)(uint64_t))type metadata accessor for CommandOperation);
      memcpy(v195, v154, *(void *)(*(void *)(v157 - 8) + 64));
      uint64_t v4 = v208;
      uint64_t v13 = a2;
      uint64_t v9 = v203;
      int v3 = v206;
      uint64_t v159 = __dst;
      uint64_t v158 = v199;
    }
    else
    {
      char v160 = v154;
      char *v195 = *v154;
      uint64_t v161 = *(int *)(v155 + 20);
      v162 = &v195[v161];
      v163 = &v154[v161];
      uint64_t v191 = v155;
      uint64_t v164 = *(void *)v163;
      uint64_t v165 = *((void *)v163 + 1);
      char v166 = v163[16];
      outlined copy of Text.Storage(*(void *)v163, v165, v166);
      *(void *)v162 = v164;
      *((void *)v162 + 1) = v165;
      v162[16] = v166;
      *((void *)v162 + 3) = *((void *)v163 + 3);
      uint64_t v167 = *(int *)(type metadata accessor for CommandGroupPlacement(0) + 20);
      v168 = &v162[v167];
      uint64_t v169 = &v163[v167];
      uint64_t v170 = type metadata accessor for UUID();
      uint64_t v171 = *(void (**)(char *, char *, uint64_t))(*(void *)(v170 - 8) + 16);
      swift_bridgeObjectRetain();
      v171(v168, v169, v170);
      uint64_t v172 = *(int *)(v191 + 24);
      v173 = &v195[v172];
      id v174 = &v160[v172];
      uint64_t v4 = v208;
      if (*(void *)v174)
      {
        uint64_t v175 = *((void *)v174 + 1);
        *(void *)v173 = *(void *)v174;
        *((void *)v173 + 1) = v175;
        swift_retain();
      }
      else
      {
        *(_OWORD *)v173 = *(_OWORD *)v174;
      }
      uint64_t v13 = a2;
      uint64_t v9 = v203;
      int v3 = v206;
      uint64_t v159 = __dst;
      uint64_t v158 = v199;
      (*(void (**)(char *, void, uint64_t, uint64_t))(v186 + 56))(v195, 0, 1, v191);
    }
    v7[v158[29]] = v8[v158[29]];
    v7[v158[30]] = v8[v158[30]];
    v7[v158[31]] = v8[v158[31]];
    v7[v158[32]] = v8[v158[32]];
    *(void *)&v7[v158[33]] = *(void *)&v8[v158[33]];
    uint64_t v176 = (void (*)(char *, void, uint64_t, int *))v159[7];
    swift_retain();
    v176(v7, 0, 1, v158);
    uint64_t v35 = v209;
    goto LABEL_96;
  }
  _s7SwiftUI16CommandOperationVSgMaTm_0(0, &lazy cache variable for type metadata for DialogActionContext.CancelType?, (void (*)(uint64_t))type metadata accessor for DialogActionContext.CancelType);
  memcpy(v7, v8, *(void *)(*(void *)(v12 - 8) + 64));
  uint64_t v13 = a2;
LABEL_97:
  uint64_t v177 = v3[8];
  *(void *)((char *)v4 + v3[7]) = *(void *)((char *)v13 + v3[7]);
  *(void *)((char *)v4 + v177) = *(void *)((char *)v13 + v177);
  uint64_t v178 = v3[9];
  uint64_t v179 = *(void **)((char *)v13 + v178);
  *(void *)((char *)v4 + v178) = v179;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v180 = v179;
  return v4;
}

void *assignWithCopy for DialogActionContext(void *a1, void *a2, int *a3)
{
  uint64_t v4 = a2;
  uint64_t v5 = a1;
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v5[1] = v4[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = a3[6];
  uint64_t v7 = (uint64_t)v5 + v6;
  int v8 = (char *)v4 + v6;
  uint64_t v9 = type metadata accessor for DialogActionContext.CancelType(0);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 48);
  int v12 = v11(v7, 1, v9);
  int v13 = v11((uint64_t)v8, 1, v9);
  if (v12)
  {
    if (!v13)
    {
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        uint64_t v431 = v9;
        v437 = v4;
        v441 = v5;
        uint64_t v14 = *(void **)v8;
        *(void *)uint64_t v7 = *(void *)v8;
        unint64_t v15 = (void *)*((void *)v8 + 1);
        *(void *)(v7 + 8) = v15;
        *(void *)(v7 + 16) = *((void *)v8 + 2);
        *(void *)(v7 + 24) = *((void *)v8 + 3);
        *(unsigned char *)(v7 + 32) = v8[32];
        *(void *)(v7 + 40) = *((void *)v8 + 5);
        *(void *)(v7 + 48) = *((void *)v8 + 6);
        *(unsigned char *)(v7 + 56) = v8[56];
        uint64_t v16 = (_OWORD *)(v7 + 64);
        uint64_t v17 = (id *)(v8 + 64);
        unint64_t v18 = *((void *)v8 + 23);
        id v19 = v14;
        id v20 = v15;
        swift_bridgeObjectRetain();
        swift_retain();
        if (v18 >> 1 == 4294967294)
        {
          long long v21 = *(_OWORD *)v17;
          long long v22 = *((_OWORD *)v8 + 5);
          long long v23 = *((_OWORD *)v8 + 7);
          *(_OWORD *)(v7 + 96) = *((_OWORD *)v8 + 6);
          *(_OWORD *)(v7 + 112) = v23;
          *uint64_t v16 = v21;
          *(_OWORD *)(v7 + 80) = v22;
          long long v24 = *((_OWORD *)v8 + 8);
          long long v25 = *((_OWORD *)v8 + 9);
          long long v26 = *((_OWORD *)v8 + 11);
          *(_OWORD *)(v7 + 160) = *((_OWORD *)v8 + 10);
          *(_OWORD *)(v7 + 176) = v26;
          *(_OWORD *)(v7 + 128) = v24;
          *(_OWORD *)(v7 + 144) = v25;
          long long v27 = *((_OWORD *)v8 + 12);
          long long v28 = *((_OWORD *)v8 + 13);
          long long v29 = *((_OWORD *)v8 + 14);
          *(_DWORD *)(v7 + 239) = *(_DWORD *)(v8 + 239);
          *(_OWORD *)(v7 + 208) = v28;
          *(_OWORD *)(v7 + 224) = v29;
          *(_OWORD *)(v7 + 192) = v27;
          if (*((void *)v8 + 32))
          {
LABEL_6:
            *(void *)(v7 + 248) = *((void *)v8 + 31);
            *(void *)(v7 + 256) = *((void *)v8 + 32);
            id v30 = (void *)*((void *)v8 + 33);
            swift_bridgeObjectRetain();
            if ((unint64_t)v30 >= 2) {
              id v31 = v30;
            }
            *(void *)(v7 + 264) = v30;
            int v32 = *((_DWORD *)v8 + 68);
            *(unsigned char *)(v7 + 276) = v8[276];
            *(_DWORD *)(v7 + 272) = v32;
            *(unsigned char *)(v7 + 277) = v8[277];
            *(unsigned char *)(v7 + 278) = v8[278];
            *(void *)(v7 + 280) = *((void *)v8 + 35);
            *(void *)(v7 + 288) = *((void *)v8 + 36);
            swift_retain();
            swift_retain();
LABEL_32:
            unint64_t v91 = *((void *)v8 + 41);
            uint64_t v426 = v10;
            if (v91 >> 2 == 0xFFFFFFFF)
            {
              long long v92 = *(_OWORD *)(v8 + 296);
              long long v93 = *(_OWORD *)(v8 + 328);
              *(_OWORD *)(v7 + 312) = *(_OWORD *)(v8 + 312);
              *(_OWORD *)(v7 + 328) = v93;
              *(_OWORD *)(v7 + 296) = v92;
              long long v94 = *(_OWORD *)(v8 + 344);
              long long v95 = *(_OWORD *)(v8 + 360);
              long long v96 = *(_OWORD *)(v8 + 376);
              *(void *)(v7 + 392) = *((void *)v8 + 49);
              *(_OWORD *)(v7 + 360) = v95;
              *(_OWORD *)(v7 + 376) = v96;
              *(_OWORD *)(v7 + 344) = v94;
            }
            else
            {
              long long v97 = (void *)*((void *)v8 + 37);
              uint64_t v98 = *((void *)v8 + 38);
              uint64_t v99 = *((void *)v8 + 40);
              uint64_t v100 = *((void *)v8 + 42);
              uint64_t v101 = *((void *)v8 + 43);
              uint64_t v102 = *((void *)v8 + 44);
              uint64_t v387 = *((void *)v8 + 39);
              uint64_t v390 = *((void *)v8 + 45);
              v394 = (void *)*((void *)v8 + 46);
              uint64_t v402 = *((void *)v8 + 47);
              __dstd = (void *)*((void *)v8 + 48);
              v418 = (void *)*((void *)v8 + 49);
              outlined copy of PlatformItemList.Item.SystemItem(v97, v98, v387, v99, v91, v100, v101, v102, v390, (uint64_t)v394, v402, (char)__dstd, (uint64_t)v418);
              *(void *)(v7 + 296) = v97;
              *(void *)(v7 + 304) = v98;
              *(void *)(v7 + 312) = v387;
              *(void *)(v7 + 320) = v99;
              *(void *)(v7 + 328) = v91;
              *(void *)(v7 + 336) = v100;
              *(void *)(v7 + 344) = v101;
              *(void *)(v7 + 352) = v102;
              *(void *)(v7 + 360) = v390;
              *(void *)(v7 + 368) = v394;
              *(void *)(v7 + 376) = v402;
              *(void *)(v7 + 384) = __dstd;
              *(void *)(v7 + 392) = v418;
            }
            if (*((void *)v8 + 51) == 1)
            {
              *(_OWORD *)(v7 + 400) = *((_OWORD *)v8 + 25);
              long long v103 = *((_OWORD *)v8 + 26);
              long long v104 = *((_OWORD *)v8 + 27);
              long long v105 = *((_OWORD *)v8 + 28);
              *(unsigned char *)(v7 + 464) = v8[464];
              *(_OWORD *)(v7 + 432) = v104;
              *(_OWORD *)(v7 + 448) = v105;
              *(_OWORD *)(v7 + 416) = v103;
              goto LABEL_47;
            }
            *(unsigned char *)(v7 + 400) = v8[400];
            *(unsigned char *)(v7 + 401) = v8[401];
            *(unsigned char *)(v7 + 402) = v8[402];
            *(unsigned char *)(v7 + 403) = v8[403];
            *(unsigned char *)(v7 + 404) = v8[404];
            uint64_t v106 = *((void *)v8 + 51);
            if (v106)
            {
              uint64_t v107 = *((void *)v8 + 52);
              *(void *)(v7 + 408) = v106;
              *(void *)(v7 + 416) = v107;
              swift_retain();
              uint64_t v108 = *((void *)v8 + 53);
              if (v108) {
                goto LABEL_39;
              }
            }
            else
            {
              *(_OWORD *)(v7 + 408) = *(_OWORD *)(v8 + 408);
              uint64_t v108 = *((void *)v8 + 53);
              if (v108)
              {
LABEL_39:
                uint64_t v109 = *((void *)v8 + 54);
                *(void *)(v7 + 424) = v108;
                *(void *)(v7 + 432) = v109;
                swift_retain();
                uint64_t v110 = *((void *)v8 + 55);
                if (v110)
                {
LABEL_40:
                  uint64_t v111 = *((void *)v8 + 56);
                  *(void *)(v7 + 440) = v110;
                  *(void *)(v7 + 448) = v111;
                  swift_retain();
LABEL_46:
                  *(void *)(v7 + 456) = *((void *)v8 + 57);
                  *(unsigned char *)(v7 + 464) = v8[464];
LABEL_47:
                  *(void *)(v7 + 472) = *((void *)v8 + 59);
                  *(void *)(v7 + 480) = *((void *)v8 + 60);
                  *(void *)(v7 + 488) = *((void *)v8 + 61);
                  *(unsigned char *)(v7 + 496) = v8[496];
                  uint64_t v114 = *((void *)v8 + 63);
                  swift_bridgeObjectRetain();
                  if (v114)
                  {
                    uint64_t v115 = *((void *)v8 + 64);
                    *(void *)(v7 + 504) = v114;
                    *(void *)(v7 + 512) = v115;
                    swift_retain();
                  }
                  else
                  {
                    *(_OWORD *)(v7 + 504) = *(_OWORD *)(v8 + 504);
                  }
                  *(_WORD *)(v7 + 520) = *((_WORD *)v8 + 260);
                  uint64_t v116 = *((void *)v8 + 66);
                  if (v116)
                  {
                    *(void *)(v7 + 528) = v116;
                    *(void *)(v7 + 536) = *((void *)v8 + 67);
                    *(void *)(v7 + 544) = *((void *)v8 + 68);
                    swift_bridgeObjectRetain();
                    swift_retain();
                    swift_retain();
                  }
                  else
                  {
                    long long v117 = *((_OWORD *)v8 + 33);
                    *(void *)(v7 + 544) = *((void *)v8 + 68);
                    *(_OWORD *)(v7 + 528) = v117;
                  }
                  uint64_t v118 = *((void *)v8 + 69);
                  v435 = a3;
                  if (v118 == 1)
                  {
                    uint64_t v119 = (_OWORD *)(v7 + 552);
                    long long v120 = *(_OWORD *)(v8 + 552);
                    *(void *)(v7 + 568) = *((void *)v8 + 71);
                  }
                  else
                  {
                    *(void *)(v7 + 552) = v118;
                    uint64_t v121 = *((void *)v8 + 70);
                    swift_retain();
                    if (v121)
                    {
                      uint64_t v122 = *((void *)v8 + 71);
                      *(void *)(v7 + 560) = v121;
                      *(void *)(v7 + 568) = v122;
                      swift_retain();
LABEL_59:
                      unint64_t v123 = (void *)*((void *)v8 + 72);
                      *(void *)(v7 + 576) = v123;
                      *(void *)(v7 + 584) = *((void *)v8 + 73);
                      *(void *)(v7 + 592) = *((void *)v8 + 74);
                      *(void *)(v7 + 600) = *((void *)v8 + 75);
                      *(void *)(v7 + 608) = *((void *)v8 + 76);
                      *(void *)(v7 + 616) = *((void *)v8 + 77);
                      *(void *)(v7 + 624) = *((void *)v8 + 78);
                      *(unsigned char *)(v7 + 632) = v8[632];
                      *(unsigned char *)(v7 + 633) = v8[633];
                      *(unsigned char *)(v7 + 634) = v8[634];
                      uint64_t v124 = type metadata accessor for PlatformItemList.Item();
                      uint64_t v125 = *(int *)(v124 + 112);
                      v403 = (int *)v124;
                      __dst = (char *)(v7 + v125);
                      unint64_t v126 = &v8[v125];
                      uint64_t v127 = type metadata accessor for CommandOperation();
                      v395 = *(void **)(v127 - 8);
                      v419 = (unsigned int (*)(char *, uint64_t, uint64_t))v395[6];
                      id v128 = v123;
                      swift_bridgeObjectRetain();
                      swift_bridgeObjectRetain();
                      swift_bridgeObjectRetain();
                      swift_bridgeObjectRetain();
                      if (v419(v126, 1, v127))
                      {
                        _s7SwiftUI16CommandOperationVSgMaTm_0(0, &lazy cache variable for type metadata for CommandOperation?, (void (*)(uint64_t))type metadata accessor for CommandOperation);
                        memcpy(__dst, v126, *(void *)(*(void *)(v129 - 8) + 64));
                        uint64_t v4 = v437;
                        uint64_t v5 = v441;
                        uint64_t v10 = v426;
                        uint64_t v9 = v431;
                        uint64_t v130 = v403;
                      }
                      else
                      {
                        char *__dst = *v126;
                        uint64_t v131 = *(int *)(v127 + 20);
                        uint64_t v132 = &__dst[v131];
                        uint64_t v133 = &v126[v131];
                        v420 = v126;
                        uint64_t v134 = v127;
                        uint64_t v135 = *(void *)&v126[v131];
                        uint64_t v136 = *((void *)v133 + 1);
                        char v137 = v133[16];
                        outlined copy of Text.Storage(v135, v136, v137);
                        *(void *)uint64_t v132 = v135;
                        *((void *)v132 + 1) = v136;
                        v132[16] = v137;
                        *((void *)v132 + 3) = *((void *)v133 + 3);
                        uint64_t v138 = *(int *)(type metadata accessor for CommandGroupPlacement(0) + 20);
                        long long v139 = &v132[v138];
                        uint64_t v140 = &v133[v138];
                        uint64_t v141 = type metadata accessor for UUID();
                        uint64_t v142 = *(void (**)(char *, char *, uint64_t))(*(void *)(v141 - 8) + 16);
                        swift_bridgeObjectRetain();
                        uint64_t v143 = v139;
                        uint64_t v144 = v134;
                        v142(v143, v140, v141);
                        uint64_t v145 = *(int *)(v134 + 24);
                        uint64_t v146 = &__dst[v145];
                        uint64_t v147 = &v420[v145];
                        if (*(void *)v147)
                        {
                          uint64_t v148 = *((void *)v147 + 1);
                          *(void *)uint64_t v146 = *(void *)v147;
                          *((void *)v146 + 1) = v148;
                          swift_retain();
                        }
                        else
                        {
                          *(_OWORD *)uint64_t v146 = *(_OWORD *)v147;
                        }
                        uint64_t v4 = v437;
                        uint64_t v5 = v441;
                        a3 = v435;
                        uint64_t v10 = v426;
                        uint64_t v9 = v431;
                        uint64_t v130 = v403;
                        ((void (*)(char *, void, uint64_t, uint64_t))v395[7])(__dst, 0, 1, v144);
                      }
                      *(unsigned char *)(v7 + v130[29]) = v8[v130[29]];
                      *(unsigned char *)(v7 + v130[30]) = v8[v130[30]];
                      *(unsigned char *)(v7 + v130[31]) = v8[v130[31]];
                      *(unsigned char *)(v7 + v130[32]) = v8[v130[32]];
                      *(void *)(v7 + v130[33]) = *(void *)&v8[v130[33]];
                      swift_retain();
                      goto LABEL_158;
                    }
                    uint64_t v119 = (_OWORD *)(v7 + 560);
                    long long v120 = *((_OWORD *)v8 + 35);
                  }
                  _OWORD *v119 = v120;
                  goto LABEL_59;
                }
LABEL_45:
                *(_OWORD *)(v7 + 440) = *(_OWORD *)(v8 + 440);
                goto LABEL_46;
              }
            }
            *(_OWORD *)(v7 + 424) = *(_OWORD *)(v8 + 424);
            uint64_t v110 = *((void *)v8 + 55);
            if (v110) {
              goto LABEL_40;
            }
            goto LABEL_45;
          }
        }
        else
        {
          int v53 = v8[72];
          if (v53 == 255)
          {
            id v76 = *v17;
            *(unsigned char *)(v7 + 72) = v8[72];
            *(void *)uint64_t v16 = v76;
          }
          else
          {
            id v54 = *v17;
            outlined copy of GraphicsImage.Contents(*v17, v8[72]);
            *(void *)(v7 + 64) = v54;
            *(unsigned char *)(v7 + 72) = v53;
          }
          *(void *)(v7 + 80) = *((void *)v8 + 10);
          *(_OWORD *)(v7 + 88) = *(_OWORD *)(v8 + 88);
          *(unsigned char *)(v7 + 104) = v8[104];
          long long v77 = *(_OWORD *)(v8 + 108);
          *(unsigned char *)(v7 + 124) = v8[124];
          *(_OWORD *)(v7 + 108) = v77;
          long long v78 = *((_OWORD *)v8 + 8);
          long long v79 = *((_OWORD *)v8 + 9);
          *(unsigned char *)(v7 + 160) = v8[160];
          *(_OWORD *)(v7 + 128) = v78;
          *(_OWORD *)(v7 + 144) = v79;
          *(unsigned char *)(v7 + 161) = v8[161];
          *(unsigned char *)(v7 + 162) = v8[162];
          *(unsigned char *)(v7 + 163) = v8[163];
          unint64_t v80 = *((void *)v8 + 23);
          if (v80 >> 1 == 0xFFFFFFFF)
          {
            long long v81 = *(_OWORD *)(v8 + 184);
            *(_OWORD *)(v7 + 168) = *(_OWORD *)(v8 + 168);
            *(_OWORD *)(v7 + 184) = v81;
          }
          else
          {
            uint64_t v82 = *((void *)v8 + 21);
            uint64_t v83 = *((void *)v8 + 22);
            uint64_t v84 = v10;
            uint64_t v85 = *((void *)v8 + 24);
            outlined copy of AccessibilityImageLabel(v82, v83, *((void *)v8 + 23));
            *(void *)(v7 + 168) = v82;
            *(void *)(v7 + 176) = v83;
            *(void *)(v7 + 184) = v80;
            *(void *)(v7 + 192) = v85;
            uint64_t v10 = v84;
          }
          *(void *)(v7 + 200) = *((void *)v8 + 25);
          *(void *)(v7 + 208) = *((void *)v8 + 26);
          *(unsigned char *)(v7 + 216) = v8[216];
          *(unsigned char *)(v7 + 217) = v8[217];
          int v86 = *((_DWORD *)v8 + 55);
          *(unsigned char *)(v7 + 224) = v8[224];
          *(_DWORD *)(v7 + 220) = v86;
          uint64_t v87 = (void *)*((void *)v8 + 29);
          *(void *)(v7 + 232) = v87;
          *(_WORD *)(v7 + 240) = *((_WORD *)v8 + 120);
          *(unsigned char *)(v7 + 242) = v8[242];
          swift_unknownObjectRetain();
          swift_retain();
          id v88 = v87;
          if (*((void *)v8 + 32)) {
            goto LABEL_6;
          }
        }
        long long v89 = *(_OWORD *)(v8 + 248);
        long long v90 = *(_OWORD *)(v8 + 280);
        *(_OWORD *)(v7 + 264) = *(_OWORD *)(v8 + 264);
        *(_OWORD *)(v7 + 280) = v90;
        *(_OWORD *)(v7 + 248) = v89;
        goto LABEL_32;
      }
      uint64_t v50 = type metadata accessor for PlatformItemList.Item();
      uint64_t v51 = *(void *)(v50 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v51 + 48))(v8, 1, v50))
      {
        _s7SwiftUI16CommandOperationVSgMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for PlatformItemList.Item?, (void (*)(uint64_t))type metadata accessor for PlatformItemList.Item);
        memcpy((void *)v7, v8, *(void *)(*(void *)(v52 - 8) + 64));
LABEL_158:
        swift_storeEnumTagMultiPayload();
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
        goto LABEL_159;
      }
      uint64_t v401 = v51;
      v417 = (int *)v50;
      uint64_t v425 = v10;
      uint64_t v432 = v9;
      v434 = a3;
      v439 = v4;
      v443 = v5;
      uint64_t v58 = *(void **)v8;
      *(void *)uint64_t v7 = *(void *)v8;
      uint64_t v59 = (void *)*((void *)v8 + 1);
      *(void *)(v7 + 8) = v59;
      *(void *)(v7 + 16) = *((void *)v8 + 2);
      *(void *)(v7 + 24) = *((void *)v8 + 3);
      *(unsigned char *)(v7 + 32) = v8[32];
      *(void *)(v7 + 40) = *((void *)v8 + 5);
      *(void *)(v7 + 48) = *((void *)v8 + 6);
      *(unsigned char *)(v7 + 56) = v8[56];
      uint64_t v60 = (_OWORD *)(v7 + 64);
      uint64_t v61 = (id *)(v8 + 64);
      unint64_t v62 = *((void *)v8 + 23);
      id v63 = v58;
      id v64 = v59;
      swift_bridgeObjectRetain();
      swift_retain();
      if (v62 >> 1 == 4294967294)
      {
        long long v65 = *(_OWORD *)v61;
        long long v66 = *((_OWORD *)v8 + 5);
        long long v67 = *((_OWORD *)v8 + 7);
        *(_OWORD *)(v7 + 96) = *((_OWORD *)v8 + 6);
        *(_OWORD *)(v7 + 112) = v67;
        *uint64_t v60 = v65;
        *(_OWORD *)(v7 + 80) = v66;
        long long v68 = *((_OWORD *)v8 + 8);
        long long v69 = *((_OWORD *)v8 + 9);
        long long v70 = *((_OWORD *)v8 + 11);
        *(_OWORD *)(v7 + 160) = *((_OWORD *)v8 + 10);
        *(_OWORD *)(v7 + 176) = v70;
        *(_OWORD *)(v7 + 128) = v68;
        *(_OWORD *)(v7 + 144) = v69;
        long long v71 = *((_OWORD *)v8 + 12);
        long long v72 = *((_OWORD *)v8 + 13);
        long long v73 = *((_OWORD *)v8 + 14);
        *(_DWORD *)(v7 + 239) = *(_DWORD *)(v8 + 239);
        *(_OWORD *)(v7 + 208) = v72;
        *(_OWORD *)(v7 + 224) = v73;
        *(_OWORD *)(v7 + 192) = v71;
      }
      else
      {
        int v112 = v8[72];
        if (v112 == 255)
        {
          id v200 = *v61;
          *(unsigned char *)(v7 + 72) = v8[72];
          *(void *)uint64_t v60 = v200;
        }
        else
        {
          id v113 = *v61;
          outlined copy of GraphicsImage.Contents(*v61, v8[72]);
          *(void *)(v7 + 64) = v113;
          *(unsigned char *)(v7 + 72) = v112;
        }
        *(void *)(v7 + 80) = *((void *)v8 + 10);
        *(_OWORD *)(v7 + 88) = *(_OWORD *)(v8 + 88);
        *(unsigned char *)(v7 + 104) = v8[104];
        long long v201 = *(_OWORD *)(v8 + 108);
        *(unsigned char *)(v7 + 124) = v8[124];
        *(_OWORD *)(v7 + 108) = v201;
        long long v202 = *((_OWORD *)v8 + 8);
        long long v203 = *((_OWORD *)v8 + 9);
        *(unsigned char *)(v7 + 160) = v8[160];
        *(_OWORD *)(v7 + 128) = v202;
        *(_OWORD *)(v7 + 144) = v203;
        *(unsigned char *)(v7 + 161) = v8[161];
        *(unsigned char *)(v7 + 162) = v8[162];
        *(unsigned char *)(v7 + 163) = v8[163];
        unint64_t v204 = *((void *)v8 + 23);
        if (v204 >> 1 == 0xFFFFFFFF)
        {
          long long v205 = *(_OWORD *)(v8 + 184);
          *(_OWORD *)(v7 + 168) = *(_OWORD *)(v8 + 168);
          *(_OWORD *)(v7 + 184) = v205;
        }
        else
        {
          uint64_t v206 = *((void *)v8 + 21);
          uint64_t v207 = *((void *)v8 + 22);
          uint64_t v208 = *((void *)v8 + 24);
          outlined copy of AccessibilityImageLabel(v206, v207, *((void *)v8 + 23));
          *(void *)(v7 + 168) = v206;
          *(void *)(v7 + 176) = v207;
          *(void *)(v7 + 184) = v204;
          *(void *)(v7 + 192) = v208;
        }
        *(void *)(v7 + 200) = *((void *)v8 + 25);
        *(void *)(v7 + 208) = *((void *)v8 + 26);
        *(unsigned char *)(v7 + 216) = v8[216];
        *(unsigned char *)(v7 + 217) = v8[217];
        int v209 = *((_DWORD *)v8 + 55);
        *(unsigned char *)(v7 + 224) = v8[224];
        *(_DWORD *)(v7 + 220) = v209;
        v210 = (void *)*((void *)v8 + 29);
        *(void *)(v7 + 232) = v210;
        *(_WORD *)(v7 + 240) = *((_WORD *)v8 + 120);
        *(unsigned char *)(v7 + 242) = v8[242];
        swift_unknownObjectRetain();
        swift_retain();
        id v211 = v210;
      }
      if (*((void *)v8 + 32))
      {
        *(void *)(v7 + 248) = *((void *)v8 + 31);
        *(void *)(v7 + 256) = *((void *)v8 + 32);
        v212 = (void *)*((void *)v8 + 33);
        swift_bridgeObjectRetain();
        if ((unint64_t)v212 >= 2) {
          id v213 = v212;
        }
        *(void *)(v7 + 264) = v212;
        int v214 = *((_DWORD *)v8 + 68);
        *(unsigned char *)(v7 + 276) = v8[276];
        *(_DWORD *)(v7 + 272) = v214;
        *(unsigned char *)(v7 + 277) = v8[277];
        *(unsigned char *)(v7 + 278) = v8[278];
        *(void *)(v7 + 280) = *((void *)v8 + 35);
        *(void *)(v7 + 288) = *((void *)v8 + 36);
        swift_retain();
        swift_retain();
      }
      else
      {
        long long v215 = *(_OWORD *)(v8 + 248);
        long long v216 = *(_OWORD *)(v8 + 280);
        *(_OWORD *)(v7 + 264) = *(_OWORD *)(v8 + 264);
        *(_OWORD *)(v7 + 280) = v216;
        *(_OWORD *)(v7 + 248) = v215;
      }
      unint64_t v217 = *((void *)v8 + 41);
      if (v217 >> 2 == 0xFFFFFFFF)
      {
        long long v218 = *(_OWORD *)(v8 + 296);
        long long v219 = *(_OWORD *)(v8 + 328);
        *(_OWORD *)(v7 + 312) = *(_OWORD *)(v8 + 312);
        *(_OWORD *)(v7 + 328) = v219;
        *(_OWORD *)(v7 + 296) = v218;
        long long v220 = *(_OWORD *)(v8 + 344);
        long long v221 = *(_OWORD *)(v8 + 360);
        long long v222 = *(_OWORD *)(v8 + 376);
        *(void *)(v7 + 392) = *((void *)v8 + 49);
        *(_OWORD *)(v7 + 360) = v221;
        *(_OWORD *)(v7 + 376) = v222;
        *(_OWORD *)(v7 + 344) = v220;
      }
      else
      {
        v223 = (void *)*((void *)v8 + 37);
        uint64_t v224 = *((void *)v8 + 38);
        uint64_t v226 = *((void *)v8 + 39);
        uint64_t v225 = *((void *)v8 + 40);
        uint64_t v227 = *((void *)v8 + 42);
        uint64_t v228 = *((void *)v8 + 43);
        uint64_t v229 = *((void *)v8 + 44);
        uint64_t v386 = *((void *)v8 + 45);
        uint64_t v388 = *((void *)v8 + 46);
        uint64_t v391 = *((void *)v8 + 47);
        v397 = (void *)*((void *)v8 + 48);
        __dstf = (void *)*((void *)v8 + 49);
        outlined copy of PlatformItemList.Item.SystemItem(v223, v224, v226, v225, v217, v227, v228, v229, v386, v388, v391, (char)v397, (uint64_t)__dstf);
        *(void *)(v7 + 296) = v223;
        *(void *)(v7 + 304) = v224;
        *(void *)(v7 + 312) = v226;
        *(void *)(v7 + 320) = v225;
        *(void *)(v7 + 328) = v217;
        *(void *)(v7 + 336) = v227;
        *(void *)(v7 + 344) = v228;
        *(void *)(v7 + 352) = v229;
        *(void *)(v7 + 360) = v386;
        *(void *)(v7 + 368) = v388;
        *(void *)(v7 + 376) = v391;
        *(void *)(v7 + 384) = v397;
        *(void *)(v7 + 392) = __dstf;
      }
      if (*((void *)v8 + 51) == 1)
      {
        *(_OWORD *)(v7 + 400) = *((_OWORD *)v8 + 25);
        long long v230 = *((_OWORD *)v8 + 26);
        long long v231 = *((_OWORD *)v8 + 27);
        long long v232 = *((_OWORD *)v8 + 28);
        *(unsigned char *)(v7 + 464) = v8[464];
        *(_OWORD *)(v7 + 432) = v231;
        *(_OWORD *)(v7 + 448) = v232;
        *(_OWORD *)(v7 + 416) = v230;
      }
      else
      {
        *(unsigned char *)(v7 + 400) = v8[400];
        *(unsigned char *)(v7 + 401) = v8[401];
        *(unsigned char *)(v7 + 402) = v8[402];
        *(unsigned char *)(v7 + 403) = v8[403];
        *(unsigned char *)(v7 + 404) = v8[404];
        uint64_t v233 = *((void *)v8 + 51);
        if (v233)
        {
          uint64_t v234 = *((void *)v8 + 52);
          *(void *)(v7 + 408) = v233;
          *(void *)(v7 + 416) = v234;
          swift_retain();
        }
        else
        {
          *(_OWORD *)(v7 + 408) = *(_OWORD *)(v8 + 408);
        }
        uint64_t v239 = *((void *)v8 + 53);
        if (v239)
        {
          uint64_t v240 = *((void *)v8 + 54);
          *(void *)(v7 + 424) = v239;
          *(void *)(v7 + 432) = v240;
          swift_retain();
        }
        else
        {
          *(_OWORD *)(v7 + 424) = *(_OWORD *)(v8 + 424);
        }
        uint64_t v243 = *((void *)v8 + 55);
        if (v243)
        {
          uint64_t v244 = *((void *)v8 + 56);
          *(void *)(v7 + 440) = v243;
          *(void *)(v7 + 448) = v244;
          swift_retain();
        }
        else
        {
          *(_OWORD *)(v7 + 440) = *(_OWORD *)(v8 + 440);
        }
        *(void *)(v7 + 456) = *((void *)v8 + 57);
        *(unsigned char *)(v7 + 464) = v8[464];
      }
      *(void *)(v7 + 472) = *((void *)v8 + 59);
      *(void *)(v7 + 480) = *((void *)v8 + 60);
      *(void *)(v7 + 488) = *((void *)v8 + 61);
      *(unsigned char *)(v7 + 496) = v8[496];
      uint64_t v254 = *((void *)v8 + 63);
      swift_bridgeObjectRetain();
      if (v254)
      {
        uint64_t v255 = *((void *)v8 + 64);
        *(void *)(v7 + 504) = v254;
        *(void *)(v7 + 512) = v255;
        swift_retain();
      }
      else
      {
        *(_OWORD *)(v7 + 504) = *(_OWORD *)(v8 + 504);
      }
      *(_WORD *)(v7 + 520) = *((_WORD *)v8 + 260);
      uint64_t v256 = *((void *)v8 + 66);
      if (v256)
      {
        *(void *)(v7 + 528) = v256;
        *(void *)(v7 + 536) = *((void *)v8 + 67);
        *(void *)(v7 + 544) = *((void *)v8 + 68);
        swift_bridgeObjectRetain();
        swift_retain();
        swift_retain();
      }
      else
      {
        long long v257 = *((_OWORD *)v8 + 33);
        *(void *)(v7 + 544) = *((void *)v8 + 68);
        *(_OWORD *)(v7 + 528) = v257;
      }
      uint64_t v258 = *((void *)v8 + 69);
      if (v258 == 1)
      {
        v259 = (_OWORD *)(v7 + 552);
        long long v260 = *(_OWORD *)(v8 + 552);
        *(void *)(v7 + 568) = *((void *)v8 + 71);
      }
      else
      {
        *(void *)(v7 + 552) = v258;
        uint64_t v261 = *((void *)v8 + 70);
        swift_retain();
        if (v261)
        {
          uint64_t v262 = *((void *)v8 + 71);
          *(void *)(v7 + 560) = v261;
          *(void *)(v7 + 568) = v262;
          swift_retain();
LABEL_148:
          v285 = (void *)*((void *)v8 + 72);
          *(void *)(v7 + 576) = v285;
          *(void *)(v7 + 584) = *((void *)v8 + 73);
          *(void *)(v7 + 592) = *((void *)v8 + 74);
          *(void *)(v7 + 600) = *((void *)v8 + 75);
          *(void *)(v7 + 608) = *((void *)v8 + 76);
          *(void *)(v7 + 616) = *((void *)v8 + 77);
          *(void *)(v7 + 624) = *((void *)v8 + 78);
          *(unsigned char *)(v7 + 632) = v8[632];
          *(unsigned char *)(v7 + 633) = v8[633];
          *(unsigned char *)(v7 + 634) = v8[634];
          uint64_t v286 = v417[28];
          v398 = (char *)(v7 + v286);
          v287 = &v8[v286];
          uint64_t v288 = type metadata accessor for CommandOperation();
          uint64_t v392 = *(void *)(v288 - 8);
          __dstg = *(unsigned int (**)(char *, uint64_t, uint64_t))(v392 + 48);
          id v289 = v285;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if (__dstg(v287, 1, v288))
          {
            _s7SwiftUI16CommandOperationVSgMaTm_0(0, &lazy cache variable for type metadata for CommandOperation?, (void (*)(uint64_t))type metadata accessor for CommandOperation);
            memcpy(v398, v287, *(void *)(*(void *)(v290 - 8) + 64));
            uint64_t v4 = v439;
            uint64_t v5 = v443;
            a3 = v434;
            uint64_t v10 = v425;
            uint64_t v9 = v432;
            v291 = v417;
            uint64_t v292 = v401;
          }
          else
          {
            char *v398 = *v287;
            uint64_t v293 = *(int *)(v288 + 20);
            __dstc = (int *)v288;
            v294 = &v398[v293];
            v295 = &v287[v293];
            uint64_t v296 = *(void *)&v287[v293];
            uint64_t v297 = *(void *)&v287[v293 + 8];
            char v298 = v287[v293 + 16];
            outlined copy of Text.Storage(*(void *)v295, *((void *)v295 + 1), v295[16]);
            *(void *)v294 = v296;
            *((void *)v294 + 1) = v297;
            v294[16] = v298;
            *((void *)v294 + 3) = *((void *)v295 + 3);
            uint64_t v299 = *(int *)(type metadata accessor for CommandGroupPlacement(0) + 20);
            v300 = &v294[v299];
            v301 = &v295[v299];
            uint64_t v302 = type metadata accessor for UUID();
            v303 = *(void (**)(char *, char *, uint64_t))(*(void *)(v302 - 8) + 16);
            swift_bridgeObjectRetain();
            v303(v300, v301, v302);
            uint64_t v304 = __dstc[6];
            v305 = &v398[v304];
            v306 = &v287[v304];
            if (*(void *)v306)
            {
              uint64_t v307 = *((void *)v306 + 1);
              *(void *)v305 = *(void *)v306;
              *((void *)v305 + 1) = v307;
              swift_retain();
            }
            else
            {
              *(_OWORD *)v305 = *(_OWORD *)v306;
            }
            uint64_t v4 = v439;
            uint64_t v5 = v443;
            uint64_t v10 = v425;
            uint64_t v9 = v432;
            v291 = v417;
            uint64_t v292 = v401;
            (*(void (**)(char *, void, uint64_t, int *))(v392 + 56))(v398, 0, 1, __dstc);
            a3 = v434;
          }
          *(unsigned char *)(v7 + v291[29]) = v8[v291[29]];
          *(unsigned char *)(v7 + v291[30]) = v8[v291[30]];
          *(unsigned char *)(v7 + v291[31]) = v8[v291[31]];
          *(unsigned char *)(v7 + v291[32]) = v8[v291[32]];
          *(void *)(v7 + v291[33]) = *(void *)&v8[v291[33]];
          v308 = *(void (**)(uint64_t, void, uint64_t, int *))(v292 + 56);
          swift_retain();
          v308(v7, 0, 1, v291);
          goto LABEL_158;
        }
        v259 = (_OWORD *)(v7 + 560);
        long long v260 = *((_OWORD *)v8 + 35);
      }
      _OWORD *v259 = v260;
      goto LABEL_148;
    }
    goto LABEL_11;
  }
  if (v13)
  {
    outlined destroy of DialogActionContext.CancelType(v7, type metadata accessor for DialogActionContext.CancelType);
LABEL_11:
    _s7SwiftUI16CommandOperationVSgMaTm_0(0, &lazy cache variable for type metadata for DialogActionContext.CancelType?, (void (*)(uint64_t))type metadata accessor for DialogActionContext.CancelType);
    memcpy((void *)v7, v8, *(void *)(*(void *)(v33 - 8) + 64));
    goto LABEL_159;
  }
  if (v5 == v4) {
    goto LABEL_159;
  }
  outlined destroy of DialogActionContext.CancelType(v7, type metadata accessor for DialogActionContext.CancelType);
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    uint64_t v55 = type metadata accessor for PlatformItemList.Item();
    long long v56 = *(unsigned int (***)(void, uint64_t, uint64_t))(v55 - 8);
    if (((unsigned int (**)(char *, uint64_t, uint64_t))v56)[6](v8, 1, v55))
    {
      _s7SwiftUI16CommandOperationVSgMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for PlatformItemList.Item?, (void (*)(uint64_t))type metadata accessor for PlatformItemList.Item);
      memcpy((void *)v7, v8, *(void *)(*(void *)(v57 - 8) + 64));
LABEL_204:
      swift_storeEnumTagMultiPayload();
      goto LABEL_159;
    }
    __dsta = v56;
    v427 = (int *)v55;
    v436 = a3;
    v440 = v4;
    v444 = v5;
    uint64_t v149 = *(void **)v8;
    *(void *)uint64_t v7 = *(void *)v8;
    uint64_t v150 = (void *)*((void *)v8 + 1);
    *(void *)(v7 + 8) = v150;
    *(void *)(v7 + 16) = *((void *)v8 + 2);
    *(void *)(v7 + 24) = *((void *)v8 + 3);
    *(unsigned char *)(v7 + 32) = v8[32];
    *(void *)(v7 + 40) = *((void *)v8 + 5);
    *(void *)(v7 + 48) = *((void *)v8 + 6);
    *(unsigned char *)(v7 + 56) = v8[56];
    uint64_t v151 = (_OWORD *)(v7 + 64);
    uint64_t v152 = (id *)(v8 + 64);
    unint64_t v153 = *((void *)v8 + 23);
    id v154 = v149;
    id v155 = v150;
    swift_bridgeObjectRetain();
    swift_retain();
    if (v153 >> 1 == 4294967294)
    {
      long long v156 = *(_OWORD *)v152;
      long long v157 = *((_OWORD *)v8 + 5);
      long long v158 = *((_OWORD *)v8 + 7);
      *(_OWORD *)(v7 + 96) = *((_OWORD *)v8 + 6);
      *(_OWORD *)(v7 + 112) = v158;
      _OWORD *v151 = v156;
      *(_OWORD *)(v7 + 80) = v157;
      long long v159 = *((_OWORD *)v8 + 8);
      long long v160 = *((_OWORD *)v8 + 9);
      long long v161 = *((_OWORD *)v8 + 11);
      *(_OWORD *)(v7 + 160) = *((_OWORD *)v8 + 10);
      *(_OWORD *)(v7 + 176) = v161;
      *(_OWORD *)(v7 + 128) = v159;
      *(_OWORD *)(v7 + 144) = v160;
      long long v162 = *((_OWORD *)v8 + 12);
      long long v163 = *((_OWORD *)v8 + 13);
      long long v164 = *((_OWORD *)v8 + 14);
      *(_DWORD *)(v7 + 239) = *(_DWORD *)(v8 + 239);
      *(_OWORD *)(v7 + 208) = v163;
      *(_OWORD *)(v7 + 224) = v164;
      *(_OWORD *)(v7 + 192) = v162;
    }
    else
    {
      int v235 = v8[72];
      if (v235 == 255)
      {
        id v314 = *v152;
        *(unsigned char *)(v7 + 72) = v8[72];
        *(void *)uint64_t v151 = v314;
      }
      else
      {
        id v236 = *v152;
        outlined copy of GraphicsImage.Contents(*v152, v8[72]);
        *(void *)(v7 + 64) = v236;
        *(unsigned char *)(v7 + 72) = v235;
      }
      *(void *)(v7 + 80) = *((void *)v8 + 10);
      *(_OWORD *)(v7 + 88) = *(_OWORD *)(v8 + 88);
      *(unsigned char *)(v7 + 104) = v8[104];
      long long v315 = *(_OWORD *)(v8 + 108);
      *(unsigned char *)(v7 + 124) = v8[124];
      *(_OWORD *)(v7 + 108) = v315;
      long long v316 = *((_OWORD *)v8 + 8);
      long long v317 = *((_OWORD *)v8 + 9);
      *(unsigned char *)(v7 + 160) = v8[160];
      *(_OWORD *)(v7 + 128) = v316;
      *(_OWORD *)(v7 + 144) = v317;
      *(unsigned char *)(v7 + 161) = v8[161];
      *(unsigned char *)(v7 + 162) = v8[162];
      *(unsigned char *)(v7 + 163) = v8[163];
      unint64_t v318 = *((void *)v8 + 23);
      if (v318 >> 1 == 0xFFFFFFFF)
      {
        long long v319 = *(_OWORD *)(v8 + 184);
        *(_OWORD *)(v7 + 168) = *(_OWORD *)(v8 + 168);
        *(_OWORD *)(v7 + 184) = v319;
      }
      else
      {
        uint64_t v320 = *((void *)v8 + 21);
        uint64_t v321 = *((void *)v8 + 22);
        uint64_t v322 = *((void *)v8 + 24);
        outlined copy of AccessibilityImageLabel(v320, v321, *((void *)v8 + 23));
        *(void *)(v7 + 168) = v320;
        *(void *)(v7 + 176) = v321;
        *(void *)(v7 + 184) = v318;
        *(void *)(v7 + 192) = v322;
      }
      *(void *)(v7 + 200) = *((void *)v8 + 25);
      *(void *)(v7 + 208) = *((void *)v8 + 26);
      *(unsigned char *)(v7 + 216) = v8[216];
      *(unsigned char *)(v7 + 217) = v8[217];
      int v323 = *((_DWORD *)v8 + 55);
      *(unsigned char *)(v7 + 224) = v8[224];
      *(_DWORD *)(v7 + 220) = v323;
      v324 = (void *)*((void *)v8 + 29);
      *(void *)(v7 + 232) = v324;
      *(_WORD *)(v7 + 240) = *((_WORD *)v8 + 120);
      *(unsigned char *)(v7 + 242) = v8[242];
      swift_unknownObjectRetain();
      swift_retain();
      id v325 = v324;
    }
    if (*((void *)v8 + 32))
    {
      *(void *)(v7 + 248) = *((void *)v8 + 31);
      *(void *)(v7 + 256) = *((void *)v8 + 32);
      v326 = (void *)*((void *)v8 + 33);
      swift_bridgeObjectRetain();
      if ((unint64_t)v326 >= 2) {
        id v327 = v326;
      }
      *(void *)(v7 + 264) = v326;
      int v328 = *((_DWORD *)v8 + 68);
      *(unsigned char *)(v7 + 276) = v8[276];
      *(_DWORD *)(v7 + 272) = v328;
      *(unsigned char *)(v7 + 277) = v8[277];
      *(unsigned char *)(v7 + 278) = v8[278];
      *(void *)(v7 + 280) = *((void *)v8 + 35);
      *(void *)(v7 + 288) = *((void *)v8 + 36);
      swift_retain();
      swift_retain();
    }
    else
    {
      long long v329 = *(_OWORD *)(v8 + 248);
      long long v330 = *(_OWORD *)(v8 + 280);
      *(_OWORD *)(v7 + 264) = *(_OWORD *)(v8 + 264);
      *(_OWORD *)(v7 + 280) = v330;
      *(_OWORD *)(v7 + 248) = v329;
    }
    unint64_t v331 = *((void *)v8 + 41);
    if (v331 >> 2 == 0xFFFFFFFF)
    {
      long long v332 = *(_OWORD *)(v8 + 296);
      long long v333 = *(_OWORD *)(v8 + 328);
      *(_OWORD *)(v7 + 312) = *(_OWORD *)(v8 + 312);
      *(_OWORD *)(v7 + 328) = v333;
      *(_OWORD *)(v7 + 296) = v332;
      long long v334 = *(_OWORD *)(v8 + 344);
      long long v335 = *(_OWORD *)(v8 + 360);
      long long v336 = *(_OWORD *)(v8 + 376);
      *(void *)(v7 + 392) = *((void *)v8 + 49);
      *(_OWORD *)(v7 + 360) = v335;
      *(_OWORD *)(v7 + 376) = v336;
      *(_OWORD *)(v7 + 344) = v334;
    }
    else
    {
      v337 = (void *)*((void *)v8 + 37);
      uint64_t v338 = *((void *)v8 + 38);
      uint64_t v340 = *((void *)v8 + 39);
      uint64_t v339 = *((void *)v8 + 40);
      uint64_t v341 = *((void *)v8 + 42);
      uint64_t v342 = *((void *)v8 + 43);
      uint64_t v343 = *((void *)v8 + 44);
      uint64_t v389 = *((void *)v8 + 45);
      uint64_t v393 = *((void *)v8 + 46);
      v399 = (void *)*((void *)v8 + 47);
      uint64_t v406 = *((void *)v8 + 48);
      v423 = (void *)*((void *)v8 + 49);
      outlined copy of PlatformItemList.Item.SystemItem(v337, v338, v340, v339, v331, v341, v342, v343, v389, v393, (uint64_t)v399, v406, (uint64_t)v423);
      *(void *)(v7 + 296) = v337;
      *(void *)(v7 + 304) = v338;
      *(void *)(v7 + 312) = v340;
      *(void *)(v7 + 320) = v339;
      *(void *)(v7 + 328) = v331;
      *(void *)(v7 + 336) = v341;
      *(void *)(v7 + 344) = v342;
      *(void *)(v7 + 352) = v343;
      *(void *)(v7 + 360) = v389;
      *(void *)(v7 + 368) = v393;
      *(void *)(v7 + 376) = v399;
      *(void *)(v7 + 384) = v406;
      *(void *)(v7 + 392) = v423;
    }
    if (*((void *)v8 + 51) == 1)
    {
      *(_OWORD *)(v7 + 400) = *((_OWORD *)v8 + 25);
      long long v344 = *((_OWORD *)v8 + 26);
      long long v345 = *((_OWORD *)v8 + 27);
      long long v346 = *((_OWORD *)v8 + 28);
      *(unsigned char *)(v7 + 464) = v8[464];
      *(_OWORD *)(v7 + 432) = v345;
      *(_OWORD *)(v7 + 448) = v346;
      *(_OWORD *)(v7 + 416) = v344;
    }
    else
    {
      *(unsigned char *)(v7 + 400) = v8[400];
      *(unsigned char *)(v7 + 401) = v8[401];
      *(unsigned char *)(v7 + 402) = v8[402];
      *(unsigned char *)(v7 + 403) = v8[403];
      *(unsigned char *)(v7 + 404) = v8[404];
      uint64_t v347 = *((void *)v8 + 51);
      if (v347)
      {
        uint64_t v348 = *((void *)v8 + 52);
        *(void *)(v7 + 408) = v347;
        *(void *)(v7 + 416) = v348;
        swift_retain();
      }
      else
      {
        *(_OWORD *)(v7 + 408) = *(_OWORD *)(v8 + 408);
      }
      uint64_t v349 = *((void *)v8 + 53);
      if (v349)
      {
        uint64_t v350 = *((void *)v8 + 54);
        *(void *)(v7 + 424) = v349;
        *(void *)(v7 + 432) = v350;
        swift_retain();
      }
      else
      {
        *(_OWORD *)(v7 + 424) = *(_OWORD *)(v8 + 424);
      }
      uint64_t v351 = *((void *)v8 + 55);
      if (v351)
      {
        uint64_t v352 = *((void *)v8 + 56);
        *(void *)(v7 + 440) = v351;
        *(void *)(v7 + 448) = v352;
        swift_retain();
      }
      else
      {
        *(_OWORD *)(v7 + 440) = *(_OWORD *)(v8 + 440);
      }
      *(void *)(v7 + 456) = *((void *)v8 + 57);
      *(unsigned char *)(v7 + 464) = v8[464];
    }
    *(void *)(v7 + 472) = *((void *)v8 + 59);
    *(void *)(v7 + 480) = *((void *)v8 + 60);
    *(void *)(v7 + 488) = *((void *)v8 + 61);
    *(unsigned char *)(v7 + 496) = v8[496];
    uint64_t v353 = *((void *)v8 + 63);
    swift_bridgeObjectRetain();
    if (v353)
    {
      uint64_t v354 = *((void *)v8 + 64);
      *(void *)(v7 + 504) = v353;
      *(void *)(v7 + 512) = v354;
      swift_retain();
    }
    else
    {
      *(_OWORD *)(v7 + 504) = *(_OWORD *)(v8 + 504);
    }
    *(_WORD *)(v7 + 520) = *((_WORD *)v8 + 260);
    uint64_t v355 = *((void *)v8 + 66);
    if (v355)
    {
      *(void *)(v7 + 528) = v355;
      *(void *)(v7 + 536) = *((void *)v8 + 67);
      *(void *)(v7 + 544) = *((void *)v8 + 68);
      swift_bridgeObjectRetain();
      swift_retain();
      swift_retain();
    }
    else
    {
      long long v356 = *((_OWORD *)v8 + 33);
      *(void *)(v7 + 544) = *((void *)v8 + 68);
      *(_OWORD *)(v7 + 528) = v356;
    }
    uint64_t v357 = *((void *)v8 + 69);
    if (v357 == 1)
    {
      v358 = (_OWORD *)(v7 + 552);
      long long v359 = *(_OWORD *)(v8 + 552);
      *(void *)(v7 + 568) = *((void *)v8 + 71);
    }
    else
    {
      *(void *)(v7 + 552) = v357;
      uint64_t v360 = *((void *)v8 + 70);
      swift_retain();
      if (v360)
      {
        uint64_t v361 = *((void *)v8 + 71);
        *(void *)(v7 + 560) = v360;
        *(void *)(v7 + 568) = v361;
        swift_retain();
LABEL_197:
        v362 = (void *)*((void *)v8 + 72);
        *(void *)(v7 + 576) = v362;
        *(void *)(v7 + 584) = *((void *)v8 + 73);
        *(void *)(v7 + 592) = *((void *)v8 + 74);
        *(void *)(v7 + 600) = *((void *)v8 + 75);
        *(void *)(v7 + 608) = *((void *)v8 + 76);
        *(void *)(v7 + 616) = *((void *)v8 + 77);
        *(void *)(v7 + 624) = *((void *)v8 + 78);
        *(unsigned char *)(v7 + 632) = v8[632];
        *(unsigned char *)(v7 + 633) = v8[633];
        *(unsigned char *)(v7 + 634) = v8[634];
        uint64_t v363 = v427[28];
        v424 = (char *)(v7 + v363);
        v364 = &v8[v363];
        uint64_t v365 = type metadata accessor for CommandOperation();
        v400 = *(void **)(v365 - 8);
        v407 = (unsigned int (*)(char *, uint64_t, uint64_t))v400[6];
        id v366 = v362;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v407(v364, 1, v365))
        {
          _s7SwiftUI16CommandOperationVSgMaTm_0(0, &lazy cache variable for type metadata for CommandOperation?, (void (*)(uint64_t))type metadata accessor for CommandOperation);
          memcpy(v424, v364, *(void *)(*(void *)(v367 - 8) + 64));
          uint64_t v4 = v440;
          uint64_t v5 = v444;
          a3 = v436;
          v368 = v427;
        }
        else
        {
          v369 = v364;
          char *v424 = *v364;
          uint64_t v370 = *(int *)(v365 + 20);
          v371 = &v424[v370];
          v372 = &v364[v370];
          uint64_t v408 = v365;
          uint64_t v373 = *(void *)v372;
          uint64_t v374 = *((void *)v372 + 1);
          char v375 = v372[16];
          outlined copy of Text.Storage(*(void *)v372, v374, v375);
          *(void *)v371 = v373;
          *((void *)v371 + 1) = v374;
          v371[16] = v375;
          *((void *)v371 + 3) = *((void *)v372 + 3);
          uint64_t v376 = *(int *)(type metadata accessor for CommandGroupPlacement(0) + 20);
          v377 = &v371[v376];
          v378 = &v372[v376];
          uint64_t v379 = type metadata accessor for UUID();
          v380 = *(void (**)(char *, char *, uint64_t))(*(void *)(v379 - 8) + 16);
          swift_bridgeObjectRetain();
          v380(v377, v378, v379);
          uint64_t v381 = *(int *)(v408 + 24);
          v382 = &v424[v381];
          v383 = &v369[v381];
          uint64_t v5 = v444;
          if (*(void *)v383)
          {
            uint64_t v384 = *((void *)v383 + 1);
            *(void *)v382 = *(void *)v383;
            *((void *)v382 + 1) = v384;
            swift_retain();
          }
          else
          {
            *(_OWORD *)v382 = *(_OWORD *)v383;
          }
          a3 = v436;
          uint64_t v4 = v440;
          v368 = v427;
          ((void (*)(char *, void, uint64_t, uint64_t))v400[7])(v424, 0, 1, v408);
        }
        *(unsigned char *)(v7 + v368[29]) = v8[v368[29]];
        *(unsigned char *)(v7 + v368[30]) = v8[v368[30]];
        *(unsigned char *)(v7 + v368[31]) = v8[v368[31]];
        *(unsigned char *)(v7 + v368[32]) = v8[v368[32]];
        *(void *)(v7 + v368[33]) = *(void *)&v8[v368[33]];
        v385 = (void (*)(uint64_t, void, uint64_t, int *))__dsta[7];
        swift_retain();
        v385(v7, 0, 1, v368);
        goto LABEL_204;
      }
      v358 = (_OWORD *)(v7 + 560);
      long long v359 = *((_OWORD *)v8 + 35);
    }
    _OWORD *v358 = v359;
    goto LABEL_197;
  }
  v433 = a3;
  v438 = v4;
  v442 = v5;
  uint64_t v34 = *(void **)v8;
  *(void *)uint64_t v7 = *(void *)v8;
  uint64_t v35 = (void *)*((void *)v8 + 1);
  *(void *)(v7 + 8) = v35;
  *(void *)(v7 + 16) = *((void *)v8 + 2);
  *(void *)(v7 + 24) = *((void *)v8 + 3);
  *(unsigned char *)(v7 + 32) = v8[32];
  *(void *)(v7 + 40) = *((void *)v8 + 5);
  *(void *)(v7 + 48) = *((void *)v8 + 6);
  *(unsigned char *)(v7 + 56) = v8[56];
  int v36 = (_OWORD *)(v7 + 64);
  int v37 = (id *)(v8 + 64);
  unint64_t v38 = *((void *)v8 + 23);
  id v39 = v34;
  id v40 = v35;
  swift_bridgeObjectRetain();
  swift_retain();
  if (v38 >> 1 == 4294967294)
  {
    long long v41 = *(_OWORD *)v37;
    long long v42 = *((_OWORD *)v8 + 5);
    long long v43 = *((_OWORD *)v8 + 7);
    *(_OWORD *)(v7 + 96) = *((_OWORD *)v8 + 6);
    *(_OWORD *)(v7 + 112) = v43;
    *int v36 = v41;
    *(_OWORD *)(v7 + 80) = v42;
    long long v44 = *((_OWORD *)v8 + 8);
    long long v45 = *((_OWORD *)v8 + 9);
    long long v46 = *((_OWORD *)v8 + 11);
    *(_OWORD *)(v7 + 160) = *((_OWORD *)v8 + 10);
    *(_OWORD *)(v7 + 176) = v46;
    *(_OWORD *)(v7 + 128) = v44;
    *(_OWORD *)(v7 + 144) = v45;
    long long v47 = *((_OWORD *)v8 + 12);
    long long v48 = *((_OWORD *)v8 + 13);
    long long v49 = *((_OWORD *)v8 + 14);
    *(_DWORD *)(v7 + 239) = *(_DWORD *)(v8 + 239);
    *(_OWORD *)(v7 + 208) = v48;
    *(_OWORD *)(v7 + 224) = v49;
    *(_OWORD *)(v7 + 192) = v47;
  }
  else
  {
    int v74 = v8[72];
    if (v74 == 255)
    {
      id v165 = *v37;
      *(unsigned char *)(v7 + 72) = v8[72];
      *(void *)int v36 = v165;
    }
    else
    {
      id v75 = *v37;
      outlined copy of GraphicsImage.Contents(*v37, v8[72]);
      *(void *)(v7 + 64) = v75;
      *(unsigned char *)(v7 + 72) = v74;
    }
    *(void *)(v7 + 80) = *((void *)v8 + 10);
    *(_OWORD *)(v7 + 88) = *(_OWORD *)(v8 + 88);
    *(unsigned char *)(v7 + 104) = v8[104];
    long long v166 = *(_OWORD *)(v8 + 108);
    *(unsigned char *)(v7 + 124) = v8[124];
    *(_OWORD *)(v7 + 108) = v166;
    long long v167 = *((_OWORD *)v8 + 8);
    long long v168 = *((_OWORD *)v8 + 9);
    *(unsigned char *)(v7 + 160) = v8[160];
    *(_OWORD *)(v7 + 128) = v167;
    *(_OWORD *)(v7 + 144) = v168;
    *(unsigned char *)(v7 + 161) = v8[161];
    *(unsigned char *)(v7 + 162) = v8[162];
    *(unsigned char *)(v7 + 163) = v8[163];
    unint64_t v169 = *((void *)v8 + 23);
    if (v169 >> 1 == 0xFFFFFFFF)
    {
      long long v170 = *(_OWORD *)(v8 + 184);
      *(_OWORD *)(v7 + 168) = *(_OWORD *)(v8 + 168);
      *(_OWORD *)(v7 + 184) = v170;
    }
    else
    {
      uint64_t v171 = *((void *)v8 + 21);
      uint64_t v172 = *((void *)v8 + 22);
      uint64_t v173 = *((void *)v8 + 24);
      outlined copy of AccessibilityImageLabel(v171, v172, *((void *)v8 + 23));
      *(void *)(v7 + 168) = v171;
      *(void *)(v7 + 176) = v172;
      *(void *)(v7 + 184) = v169;
      *(void *)(v7 + 192) = v173;
    }
    *(void *)(v7 + 200) = *((void *)v8 + 25);
    *(void *)(v7 + 208) = *((void *)v8 + 26);
    *(unsigned char *)(v7 + 216) = v8[216];
    *(unsigned char *)(v7 + 217) = v8[217];
    int v174 = *((_DWORD *)v8 + 55);
    *(unsigned char *)(v7 + 224) = v8[224];
    *(_DWORD *)(v7 + 220) = v174;
    uint64_t v175 = (void *)*((void *)v8 + 29);
    *(void *)(v7 + 232) = v175;
    *(_WORD *)(v7 + 240) = *((_WORD *)v8 + 120);
    *(unsigned char *)(v7 + 242) = v8[242];
    swift_unknownObjectRetain();
    swift_retain();
    id v176 = v175;
  }
  if (*((void *)v8 + 32))
  {
    *(void *)(v7 + 248) = *((void *)v8 + 31);
    *(void *)(v7 + 256) = *((void *)v8 + 32);
    uint64_t v177 = (void *)*((void *)v8 + 33);
    swift_bridgeObjectRetain();
    if ((unint64_t)v177 >= 2) {
      id v178 = v177;
    }
    *(void *)(v7 + 264) = v177;
    int v179 = *((_DWORD *)v8 + 68);
    *(unsigned char *)(v7 + 276) = v8[276];
    *(_DWORD *)(v7 + 272) = v179;
    *(unsigned char *)(v7 + 277) = v8[277];
    *(unsigned char *)(v7 + 278) = v8[278];
    *(void *)(v7 + 280) = *((void *)v8 + 35);
    *(void *)(v7 + 288) = *((void *)v8 + 36);
    swift_retain();
    swift_retain();
  }
  else
  {
    long long v180 = *(_OWORD *)(v8 + 248);
    long long v181 = *(_OWORD *)(v8 + 280);
    *(_OWORD *)(v7 + 264) = *(_OWORD *)(v8 + 264);
    *(_OWORD *)(v7 + 280) = v181;
    *(_OWORD *)(v7 + 248) = v180;
  }
  unint64_t v182 = *((void *)v8 + 41);
  if (v182 >> 2 == 0xFFFFFFFF)
  {
    long long v183 = *(_OWORD *)(v8 + 296);
    long long v184 = *(_OWORD *)(v8 + 328);
    *(_OWORD *)(v7 + 312) = *(_OWORD *)(v8 + 312);
    *(_OWORD *)(v7 + 328) = v184;
    *(_OWORD *)(v7 + 296) = v183;
    long long v185 = *(_OWORD *)(v8 + 344);
    long long v186 = *(_OWORD *)(v8 + 360);
    long long v187 = *(_OWORD *)(v8 + 376);
    *(void *)(v7 + 392) = *((void *)v8 + 49);
    *(_OWORD *)(v7 + 360) = v186;
    *(_OWORD *)(v7 + 376) = v187;
    *(_OWORD *)(v7 + 344) = v185;
  }
  else
  {
    uint64_t v188 = (void *)*((void *)v8 + 37);
    uint64_t v189 = *((void *)v8 + 38);
    uint64_t v191 = *((void *)v8 + 39);
    uint64_t v190 = *((void *)v8 + 40);
    uint64_t v192 = *((void *)v8 + 42);
    uint64_t v193 = *((void *)v8 + 43);
    uint64_t v194 = *((void *)v8 + 44);
    v396 = (void *)*((void *)v8 + 45);
    uint64_t v404 = *((void *)v8 + 46);
    __dste = (void *)*((void *)v8 + 47);
    v421 = (void *)*((void *)v8 + 48);
    uint64_t v428 = *((void *)v8 + 49);
    outlined copy of PlatformItemList.Item.SystemItem(v188, v189, v191, v190, v182, v192, v193, v194, (uint64_t)v396, v404, (uint64_t)__dste, (char)v421, v428);
    *(void *)(v7 + 296) = v188;
    *(void *)(v7 + 304) = v189;
    *(void *)(v7 + 312) = v191;
    *(void *)(v7 + 320) = v190;
    *(void *)(v7 + 328) = v182;
    *(void *)(v7 + 336) = v192;
    *(void *)(v7 + 344) = v193;
    *(void *)(v7 + 352) = v194;
    *(void *)(v7 + 360) = v396;
    *(void *)(v7 + 368) = v404;
    *(void *)(v7 + 376) = __dste;
    *(void *)(v7 + 384) = v421;
    *(void *)(v7 + 392) = v428;
  }
  if (*((void *)v8 + 51) == 1)
  {
    *(_OWORD *)(v7 + 400) = *((_OWORD *)v8 + 25);
    long long v195 = *((_OWORD *)v8 + 26);
    long long v196 = *((_OWORD *)v8 + 27);
    long long v197 = *((_OWORD *)v8 + 28);
    *(unsigned char *)(v7 + 464) = v8[464];
    *(_OWORD *)(v7 + 432) = v196;
    *(_OWORD *)(v7 + 448) = v197;
    *(_OWORD *)(v7 + 416) = v195;
  }
  else
  {
    *(unsigned char *)(v7 + 400) = v8[400];
    *(unsigned char *)(v7 + 401) = v8[401];
    *(unsigned char *)(v7 + 402) = v8[402];
    *(unsigned char *)(v7 + 403) = v8[403];
    *(unsigned char *)(v7 + 404) = v8[404];
    uint64_t v198 = *((void *)v8 + 51);
    if (v198)
    {
      uint64_t v199 = *((void *)v8 + 52);
      *(void *)(v7 + 408) = v198;
      *(void *)(v7 + 416) = v199;
      swift_retain();
    }
    else
    {
      *(_OWORD *)(v7 + 408) = *(_OWORD *)(v8 + 408);
    }
    uint64_t v237 = *((void *)v8 + 53);
    if (v237)
    {
      uint64_t v238 = *((void *)v8 + 54);
      *(void *)(v7 + 424) = v237;
      *(void *)(v7 + 432) = v238;
      swift_retain();
    }
    else
    {
      *(_OWORD *)(v7 + 424) = *(_OWORD *)(v8 + 424);
    }
    uint64_t v241 = *((void *)v8 + 55);
    if (v241)
    {
      uint64_t v242 = *((void *)v8 + 56);
      *(void *)(v7 + 440) = v241;
      *(void *)(v7 + 448) = v242;
      swift_retain();
    }
    else
    {
      *(_OWORD *)(v7 + 440) = *(_OWORD *)(v8 + 440);
    }
    *(void *)(v7 + 456) = *((void *)v8 + 57);
    *(unsigned char *)(v7 + 464) = v8[464];
  }
  *(void *)(v7 + 472) = *((void *)v8 + 59);
  *(void *)(v7 + 480) = *((void *)v8 + 60);
  *(void *)(v7 + 488) = *((void *)v8 + 61);
  *(unsigned char *)(v7 + 496) = v8[496];
  uint64_t v245 = *((void *)v8 + 63);
  swift_bridgeObjectRetain();
  if (v245)
  {
    uint64_t v246 = *((void *)v8 + 64);
    *(void *)(v7 + 504) = v245;
    *(void *)(v7 + 512) = v246;
    swift_retain();
  }
  else
  {
    *(_OWORD *)(v7 + 504) = *(_OWORD *)(v8 + 504);
  }
  *(_WORD *)(v7 + 520) = *((_WORD *)v8 + 260);
  uint64_t v247 = *((void *)v8 + 66);
  if (v247)
  {
    *(void *)(v7 + 528) = v247;
    *(void *)(v7 + 536) = *((void *)v8 + 67);
    *(void *)(v7 + 544) = *((void *)v8 + 68);
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
  }
  else
  {
    long long v248 = *((_OWORD *)v8 + 33);
    *(void *)(v7 + 544) = *((void *)v8 + 68);
    *(_OWORD *)(v7 + 528) = v248;
  }
  uint64_t v249 = *((void *)v8 + 69);
  if (v249 == 1)
  {
    v250 = (_OWORD *)(v7 + 552);
    long long v251 = *(_OWORD *)(v8 + 552);
    *(void *)(v7 + 568) = *((void *)v8 + 71);
LABEL_141:
    _OWORD *v250 = v251;
    goto LABEL_142;
  }
  *(void *)(v7 + 552) = v249;
  uint64_t v252 = *((void *)v8 + 70);
  swift_retain();
  if (!v252)
  {
    v250 = (_OWORD *)(v7 + 560);
    long long v251 = *((_OWORD *)v8 + 35);
    goto LABEL_141;
  }
  uint64_t v253 = *((void *)v8 + 71);
  *(void *)(v7 + 560) = v252;
  *(void *)(v7 + 568) = v253;
  swift_retain();
LABEL_142:
  v263 = (void *)*((void *)v8 + 72);
  *(void *)(v7 + 576) = v263;
  *(void *)(v7 + 584) = *((void *)v8 + 73);
  *(void *)(v7 + 592) = *((void *)v8 + 74);
  *(void *)(v7 + 600) = *((void *)v8 + 75);
  *(void *)(v7 + 608) = *((void *)v8 + 76);
  *(void *)(v7 + 616) = *((void *)v8 + 77);
  *(void *)(v7 + 624) = *((void *)v8 + 78);
  *(unsigned char *)(v7 + 632) = v8[632];
  *(unsigned char *)(v7 + 633) = v8[633];
  *(unsigned char *)(v7 + 634) = v8[634];
  uint64_t v264 = type metadata accessor for PlatformItemList.Item();
  uint64_t v265 = *(int *)(v264 + 112);
  __dstb = (char *)(v7 + v265);
  v422 = (int *)v264;
  v266 = &v8[v265];
  uint64_t v267 = type metadata accessor for CommandOperation();
  uint64_t v405 = *(void *)(v267 - 8);
  v429 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v405 + 48);
  id v268 = v263;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v429(v266, 1, v267))
  {
    _s7SwiftUI16CommandOperationVSgMaTm_0(0, &lazy cache variable for type metadata for CommandOperation?, (void (*)(uint64_t))type metadata accessor for CommandOperation);
    memcpy(__dstb, v266, *(void *)(*(void *)(v269 - 8) + 64));
    uint64_t v4 = v438;
    uint64_t v5 = v442;
    a3 = v433;
  }
  else
  {
    char *__dstb = *v266;
    uint64_t v270 = *(int *)(v267 + 20);
    v271 = &__dstb[v270];
    uint64_t v430 = v267;
    v272 = &v266[v270];
    uint64_t v273 = *(void *)&v266[v270];
    uint64_t v274 = *(void *)&v266[v270 + 8];
    char v275 = v266[v270 + 16];
    outlined copy of Text.Storage(*(void *)v272, *((void *)v272 + 1), v272[16]);
    *(void *)v271 = v273;
    *((void *)v271 + 1) = v274;
    v271[16] = v275;
    *((void *)v271 + 3) = *((void *)v272 + 3);
    uint64_t v276 = *(int *)(type metadata accessor for CommandGroupPlacement(0) + 20);
    v277 = &v271[v276];
    v278 = &v272[v276];
    uint64_t v279 = type metadata accessor for UUID();
    v280 = *(void (**)(char *, char *, uint64_t))(*(void *)(v279 - 8) + 16);
    swift_bridgeObjectRetain();
    v280(v277, v278, v279);
    uint64_t v281 = *(int *)(v430 + 24);
    v282 = &__dstb[v281];
    v283 = &v266[v281];
    if (*(void *)v283)
    {
      uint64_t v284 = *((void *)v283 + 1);
      *(void *)v282 = *(void *)v283;
      *((void *)v282 + 1) = v284;
      swift_retain();
    }
    else
    {
      *(_OWORD *)v282 = *(_OWORD *)v283;
    }
    uint64_t v4 = v438;
    uint64_t v5 = v442;
    (*(void (**)(char *, void, uint64_t, uint64_t))(v405 + 56))(__dstb, 0, 1, v430);
    a3 = v433;
  }
  *(unsigned char *)(v7 + v422[29]) = v8[v422[29]];
  *(unsigned char *)(v7 + v422[30]) = v8[v422[30]];
  *(unsigned char *)(v7 + v422[31]) = v8[v422[31]];
  *(unsigned char *)(v7 + v422[32]) = v8[v422[32]];
  *(void *)(v7 + v422[33]) = *(void *)&v8[v422[33]];
  swift_retain();
  swift_storeEnumTagMultiPayload();
LABEL_159:
  *(void *)((char *)v5 + a3[7]) = *(void *)((char *)v4 + a3[7]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)((char *)v5 + a3[8]) = *(void *)((char *)v4 + a3[8]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v309 = a3[9];
  v310 = *(void **)((char *)v5 + v309);
  v311 = *(void **)((char *)v4 + v309);
  *(void *)((char *)v5 + v309) = v311;
  id v312 = v311;

  return v5;
}

void *assignWithTake for DialogActionContext(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRelease();
  uint64_t v173 = a3;
  uint64_t v6 = a3[6];
  uint64_t v7 = (uint64_t)a1 + v6;
  int v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for DialogActionContext.CancelType(0);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 48);
  int v12 = v11(v7, 1, v9);
  int v13 = v11((uint64_t)v8, 1, v9);
  if (v12)
  {
    if (!v13)
    {
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        long long v14 = *((_OWORD *)v8 + 1);
        *(_OWORD *)uint64_t v7 = *(_OWORD *)v8;
        *(_OWORD *)(v7 + 16) = v14;
        *(unsigned char *)(v7 + 32) = v8[32];
        uint64_t v15 = *((void *)v8 + 6);
        *(void *)(v7 + 40) = *((void *)v8 + 5);
        *(void *)(v7 + 48) = v15;
        *(unsigned char *)(v7 + 56) = v8[56];
        long long v16 = *((_OWORD *)v8 + 13);
        *(_OWORD *)(v7 + 192) = *((_OWORD *)v8 + 12);
        *(_OWORD *)(v7 + 208) = v16;
        *(_OWORD *)(v7 + 224) = *((_OWORD *)v8 + 14);
        *(_DWORD *)(v7 + 239) = *(_DWORD *)(v8 + 239);
        long long v17 = *((_OWORD *)v8 + 9);
        *(_OWORD *)(v7 + 128) = *((_OWORD *)v8 + 8);
        *(_OWORD *)(v7 + 144) = v17;
        long long v18 = *((_OWORD *)v8 + 11);
        *(_OWORD *)(v7 + 160) = *((_OWORD *)v8 + 10);
        *(_OWORD *)(v7 + 176) = v18;
        long long v19 = *((_OWORD *)v8 + 5);
        *(_OWORD *)(v7 + 64) = *((_OWORD *)v8 + 4);
        *(_OWORD *)(v7 + 80) = v19;
        long long v20 = *((_OWORD *)v8 + 7);
        *(_OWORD *)(v7 + 96) = *((_OWORD *)v8 + 6);
        *(_OWORD *)(v7 + 112) = v20;
        *(_OWORD *)(v7 + 248) = *(_OWORD *)(v8 + 248);
        long long v21 = *(_OWORD *)(v8 + 280);
        *(_OWORD *)(v7 + 264) = *(_OWORD *)(v8 + 264);
        *(_OWORD *)(v7 + 280) = v21;
        long long v22 = *(_OWORD *)(v8 + 376);
        *(_OWORD *)(v7 + 360) = *(_OWORD *)(v8 + 360);
        *(_OWORD *)(v7 + 376) = v22;
        *(void *)(v7 + 392) = *((void *)v8 + 49);
        long long v23 = *(_OWORD *)(v8 + 312);
        *(_OWORD *)(v7 + 296) = *(_OWORD *)(v8 + 296);
        *(_OWORD *)(v7 + 312) = v23;
        long long v24 = *(_OWORD *)(v8 + 344);
        *(_OWORD *)(v7 + 328) = *(_OWORD *)(v8 + 328);
        *(_OWORD *)(v7 + 344) = v24;
        long long v25 = *((_OWORD *)v8 + 28);
        *(_OWORD *)(v7 + 432) = *((_OWORD *)v8 + 27);
        *(_OWORD *)(v7 + 448) = v25;
        *(unsigned char *)(v7 + 464) = v8[464];
        long long v26 = *((_OWORD *)v8 + 26);
        *(_OWORD *)(v7 + 400) = *((_OWORD *)v8 + 25);
        *(_OWORD *)(v7 + 416) = v26;
        *(_OWORD *)(v7 + 472) = *(_OWORD *)(v8 + 472);
        *(_OWORD *)(v7 + 481) = *(_OWORD *)(v8 + 481);
        uint64_t v27 = *((void *)v8 + 63);
        if (v27)
        {
          uint64_t v28 = *((void *)v8 + 64);
          *(void *)(v7 + 504) = v27;
          *(void *)(v7 + 512) = v28;
        }
        else
        {
          *(_OWORD *)(v7 + 504) = *(_OWORD *)(v8 + 504);
        }
        *(_WORD *)(v7 + 520) = *((_WORD *)v8 + 260);
        *(_OWORD *)(v7 + 528) = *((_OWORD *)v8 + 33);
        *(void *)(v7 + 544) = *((void *)v8 + 68);
        *(void *)(v7 + 568) = *((void *)v8 + 71);
        *(_OWORD *)(v7 + 552) = *(_OWORD *)(v8 + 552);
        *(void *)(v7 + 576) = *((void *)v8 + 72);
        *(_OWORD *)(v7 + 584) = *(_OWORD *)(v8 + 584);
        *(_OWORD *)(v7 + 600) = *(_OWORD *)(v8 + 600);
        *(void *)(v7 + 616) = *((void *)v8 + 77);
        *(void *)(v7 + 624) = *((void *)v8 + 78);
        *(unsigned char *)(v7 + 632) = v8[632];
        *(_WORD *)(v7 + 633) = *(_WORD *)(v8 + 633);
        long long v47 = (int *)type metadata accessor for PlatformItemList.Item();
        uint64_t v48 = v47[28];
        __dsta = (char *)(v7 + v48);
        long long v49 = &v8[v48];
        uint64_t v50 = type metadata accessor for CommandOperation();
        uint64_t v51 = *(void *)(v50 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v51 + 48))(v49, 1, v50))
        {
          _s7SwiftUI16CommandOperationVSgMaTm_0(0, &lazy cache variable for type metadata for CommandOperation?, (void (*)(uint64_t))type metadata accessor for CommandOperation);
          memcpy(__dsta, v49, *(void *)(*(void *)(v52 - 8) + 64));
        }
        else
        {
          uint64_t v161 = v51;
          __src = (void *)v9;
          char *__dsta = *v49;
          uint64_t v70 = *(int *)(v50 + 20);
          long long v71 = &__dsta[v70];
          long long v72 = &v49[v70];
          long long v73 = *(_OWORD *)&v49[v70 + 16];
          *(_OWORD *)long long v71 = *(_OWORD *)&v49[v70];
          *((_OWORD *)v71 + 1) = v73;
          uint64_t v74 = *(int *)(type metadata accessor for CommandGroupPlacement(0) + 20);
          id v75 = &v71[v74];
          id v76 = &v72[v74];
          uint64_t v77 = type metadata accessor for UUID();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v77 - 8) + 32))(v75, v76, v77);
          uint64_t v78 = *(int *)(v50 + 24);
          long long v79 = &__dsta[v78];
          unint64_t v80 = &v49[v78];
          uint64_t v81 = *(void *)v80;
          if (*(void *)v80)
          {
            uint64_t v82 = *((void *)v80 + 1);
            *(void *)long long v79 = v81;
            *((void *)v79 + 1) = v82;
          }
          else
          {
            *(_OWORD *)long long v79 = *(_OWORD *)v80;
          }
          uint64_t v9 = (uint64_t)__src;
          (*(void (**)(char *, void, uint64_t, uint64_t))(v161 + 56))(__dsta, 0, 1, v50);
        }
        *(unsigned char *)(v7 + v47[29]) = v8[v47[29]];
        *(unsigned char *)(v7 + v47[30]) = v8[v47[30]];
        *(unsigned char *)(v7 + v47[31]) = v8[v47[31]];
        *(unsigned char *)(v7 + v47[32]) = v8[v47[32]];
        *(void *)(v7 + v47[33]) = *(void *)&v8[v47[33]];
      }
      else
      {
        long long v45 = (int *)type metadata accessor for PlatformItemList.Item();
        __dst = (void (**)(uint64_t, void, uint64_t, int *))*((void *)v45 - 1);
        if (((unsigned int (*)(char *, uint64_t, int *))__dst[6])(v8, 1, v45))
        {
          _s7SwiftUI16CommandOperationVSgMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for PlatformItemList.Item?, (void (*)(uint64_t))type metadata accessor for PlatformItemList.Item);
          memcpy((void *)v7, v8, *(void *)(*(void *)(v46 - 8) + 64));
        }
        else
        {
          long long v55 = *((_OWORD *)v8 + 1);
          *(_OWORD *)uint64_t v7 = *(_OWORD *)v8;
          *(_OWORD *)(v7 + 16) = v55;
          *(unsigned char *)(v7 + 32) = v8[32];
          uint64_t v56 = *((void *)v8 + 6);
          *(void *)(v7 + 40) = *((void *)v8 + 5);
          *(void *)(v7 + 48) = v56;
          *(unsigned char *)(v7 + 56) = v8[56];
          long long v57 = *((_OWORD *)v8 + 13);
          *(_OWORD *)(v7 + 192) = *((_OWORD *)v8 + 12);
          *(_OWORD *)(v7 + 208) = v57;
          *(_OWORD *)(v7 + 224) = *((_OWORD *)v8 + 14);
          *(_DWORD *)(v7 + 239) = *(_DWORD *)(v8 + 239);
          long long v58 = *((_OWORD *)v8 + 9);
          *(_OWORD *)(v7 + 128) = *((_OWORD *)v8 + 8);
          *(_OWORD *)(v7 + 144) = v58;
          long long v59 = *((_OWORD *)v8 + 11);
          *(_OWORD *)(v7 + 160) = *((_OWORD *)v8 + 10);
          *(_OWORD *)(v7 + 176) = v59;
          long long v60 = *((_OWORD *)v8 + 5);
          *(_OWORD *)(v7 + 64) = *((_OWORD *)v8 + 4);
          *(_OWORD *)(v7 + 80) = v60;
          long long v61 = *((_OWORD *)v8 + 7);
          *(_OWORD *)(v7 + 96) = *((_OWORD *)v8 + 6);
          *(_OWORD *)(v7 + 112) = v61;
          *(_OWORD *)(v7 + 248) = *(_OWORD *)(v8 + 248);
          long long v62 = *(_OWORD *)(v8 + 280);
          *(_OWORD *)(v7 + 264) = *(_OWORD *)(v8 + 264);
          *(_OWORD *)(v7 + 280) = v62;
          long long v63 = *(_OWORD *)(v8 + 376);
          *(_OWORD *)(v7 + 360) = *(_OWORD *)(v8 + 360);
          *(_OWORD *)(v7 + 376) = v63;
          *(void *)(v7 + 392) = *((void *)v8 + 49);
          long long v64 = *(_OWORD *)(v8 + 312);
          *(_OWORD *)(v7 + 296) = *(_OWORD *)(v8 + 296);
          *(_OWORD *)(v7 + 312) = v64;
          long long v65 = *(_OWORD *)(v8 + 344);
          *(_OWORD *)(v7 + 328) = *(_OWORD *)(v8 + 328);
          *(_OWORD *)(v7 + 344) = v65;
          long long v66 = *((_OWORD *)v8 + 28);
          *(_OWORD *)(v7 + 432) = *((_OWORD *)v8 + 27);
          *(_OWORD *)(v7 + 448) = v66;
          *(unsigned char *)(v7 + 464) = v8[464];
          long long v67 = *((_OWORD *)v8 + 26);
          *(_OWORD *)(v7 + 400) = *((_OWORD *)v8 + 25);
          *(_OWORD *)(v7 + 416) = v67;
          *(_OWORD *)(v7 + 472) = *(_OWORD *)(v8 + 472);
          *(_OWORD *)(v7 + 481) = *(_OWORD *)(v8 + 481);
          uint64_t v68 = *((void *)v8 + 63);
          if (v68)
          {
            uint64_t v69 = *((void *)v8 + 64);
            *(void *)(v7 + 504) = v68;
            *(void *)(v7 + 512) = v69;
          }
          else
          {
            *(_OWORD *)(v7 + 504) = *(_OWORD *)(v8 + 504);
          }
          *(_WORD *)(v7 + 520) = *((_WORD *)v8 + 260);
          *(_OWORD *)(v7 + 528) = *((_OWORD *)v8 + 33);
          *(void *)(v7 + 544) = *((void *)v8 + 68);
          *(void *)(v7 + 568) = *((void *)v8 + 71);
          *(_OWORD *)(v7 + 552) = *(_OWORD *)(v8 + 552);
          *(void *)(v7 + 576) = *((void *)v8 + 72);
          *(_OWORD *)(v7 + 584) = *(_OWORD *)(v8 + 584);
          *(_OWORD *)(v7 + 600) = *(_OWORD *)(v8 + 600);
          *(void *)(v7 + 616) = *((void *)v8 + 77);
          *(void *)(v7 + 624) = *((void *)v8 + 78);
          *(unsigned char *)(v7 + 632) = v8[632];
          *(_WORD *)(v7 + 633) = *(_WORD *)(v8 + 633);
          uint64_t v105 = v45[28];
          long long v162 = (char *)(v7 + v105);
          uint64_t v106 = &v8[v105];
          uint64_t v107 = type metadata accessor for CommandOperation();
          uint64_t v108 = *(void *)(v107 - 8);
          __srca = v106;
          uint64_t v109 = v106;
          uint64_t v110 = v107;
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v108 + 48))(v109, 1, v107))
          {
            _s7SwiftUI16CommandOperationVSgMaTm_0(0, &lazy cache variable for type metadata for CommandOperation?, (void (*)(uint64_t))type metadata accessor for CommandOperation);
            memcpy(v162, __srca, *(void *)(*(void *)(v111 - 8) + 64));
          }
          else
          {
            uint64_t v158 = v110;
            uint64_t v159 = v108;
            char *v162 = *__srca;
            uint64_t v124 = *(int *)(v110 + 20);
            uint64_t v125 = &v162[v124];
            unint64_t v126 = &__srca[v124];
            long long v127 = *(_OWORD *)&__srca[v124 + 16];
            *(_OWORD *)uint64_t v125 = *(_OWORD *)&__srca[v124];
            *((_OWORD *)v125 + 1) = v127;
            uint64_t v128 = *(int *)(type metadata accessor for CommandGroupPlacement(0) + 20);
            long long v157 = &v125[v128];
            uint64_t v129 = &v126[v128];
            uint64_t v130 = type metadata accessor for UUID();
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v130 - 8) + 32))(v157, v129, v130);
            uint64_t v131 = *(int *)(v158 + 24);
            uint64_t v132 = &v162[v131];
            uint64_t v133 = (uint64_t *)&__srca[v131];
            uint64_t v134 = *v133;
            if (*v133)
            {
              uint64_t v135 = v133[1];
              *(void *)uint64_t v132 = v134;
              *((void *)v132 + 1) = v135;
            }
            else
            {
              *(_OWORD *)uint64_t v132 = *(_OWORD *)v133;
            }
            (*(void (**)(char *, void, uint64_t, uint64_t))(v159 + 56))(v162, 0, 1, v158);
          }
          *(unsigned char *)(v7 + v45[29]) = v8[v45[29]];
          *(unsigned char *)(v7 + v45[30]) = v8[v45[30]];
          *(unsigned char *)(v7 + v45[31]) = v8[v45[31]];
          *(unsigned char *)(v7 + v45[32]) = v8[v45[32]];
          *(void *)(v7 + v45[33]) = *(void *)&v8[v45[33]];
          __dst[7](v7, 0, 1, v45);
        }
      }
      swift_storeEnumTagMultiPayload();
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
      goto LABEL_49;
    }
LABEL_8:
    _s7SwiftUI16CommandOperationVSgMaTm_0(0, &lazy cache variable for type metadata for DialogActionContext.CancelType?, (void (*)(uint64_t))type metadata accessor for DialogActionContext.CancelType);
    memcpy((void *)v7, v8, *(void *)(*(void *)(v29 - 8) + 64));
    goto LABEL_49;
  }
  if (v13)
  {
    outlined destroy of DialogActionContext.CancelType(v7, type metadata accessor for DialogActionContext.CancelType);
    goto LABEL_8;
  }
  if (a1 != a2)
  {
    outlined destroy of DialogActionContext.CancelType(v7, type metadata accessor for DialogActionContext.CancelType);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      long long v30 = *((_OWORD *)v8 + 1);
      *(_OWORD *)uint64_t v7 = *(_OWORD *)v8;
      *(_OWORD *)(v7 + 16) = v30;
      *(unsigned char *)(v7 + 32) = v8[32];
      uint64_t v31 = *((void *)v8 + 6);
      *(void *)(v7 + 40) = *((void *)v8 + 5);
      *(void *)(v7 + 48) = v31;
      *(unsigned char *)(v7 + 56) = v8[56];
      long long v32 = *((_OWORD *)v8 + 13);
      *(_OWORD *)(v7 + 192) = *((_OWORD *)v8 + 12);
      *(_OWORD *)(v7 + 208) = v32;
      *(_OWORD *)(v7 + 224) = *((_OWORD *)v8 + 14);
      *(_DWORD *)(v7 + 239) = *(_DWORD *)(v8 + 239);
      long long v33 = *((_OWORD *)v8 + 9);
      *(_OWORD *)(v7 + 128) = *((_OWORD *)v8 + 8);
      *(_OWORD *)(v7 + 144) = v33;
      long long v34 = *((_OWORD *)v8 + 11);
      *(_OWORD *)(v7 + 160) = *((_OWORD *)v8 + 10);
      *(_OWORD *)(v7 + 176) = v34;
      long long v35 = *((_OWORD *)v8 + 5);
      *(_OWORD *)(v7 + 64) = *((_OWORD *)v8 + 4);
      *(_OWORD *)(v7 + 80) = v35;
      long long v36 = *((_OWORD *)v8 + 7);
      *(_OWORD *)(v7 + 96) = *((_OWORD *)v8 + 6);
      *(_OWORD *)(v7 + 112) = v36;
      *(_OWORD *)(v7 + 248) = *(_OWORD *)(v8 + 248);
      long long v37 = *(_OWORD *)(v8 + 280);
      *(_OWORD *)(v7 + 264) = *(_OWORD *)(v8 + 264);
      *(_OWORD *)(v7 + 280) = v37;
      long long v38 = *(_OWORD *)(v8 + 376);
      *(_OWORD *)(v7 + 360) = *(_OWORD *)(v8 + 360);
      *(_OWORD *)(v7 + 376) = v38;
      *(void *)(v7 + 392) = *((void *)v8 + 49);
      long long v39 = *(_OWORD *)(v8 + 312);
      *(_OWORD *)(v7 + 296) = *(_OWORD *)(v8 + 296);
      *(_OWORD *)(v7 + 312) = v39;
      long long v40 = *(_OWORD *)(v8 + 344);
      *(_OWORD *)(v7 + 328) = *(_OWORD *)(v8 + 328);
      *(_OWORD *)(v7 + 344) = v40;
      long long v41 = *((_OWORD *)v8 + 28);
      *(_OWORD *)(v7 + 432) = *((_OWORD *)v8 + 27);
      *(_OWORD *)(v7 + 448) = v41;
      *(unsigned char *)(v7 + 464) = v8[464];
      long long v42 = *((_OWORD *)v8 + 26);
      *(_OWORD *)(v7 + 400) = *((_OWORD *)v8 + 25);
      *(_OWORD *)(v7 + 416) = v42;
      *(_OWORD *)(v7 + 472) = *(_OWORD *)(v8 + 472);
      *(_OWORD *)(v7 + 481) = *(_OWORD *)(v8 + 481);
      uint64_t v43 = *((void *)v8 + 63);
      if (v43)
      {
        uint64_t v44 = *((void *)v8 + 64);
        *(void *)(v7 + 504) = v43;
        *(void *)(v7 + 512) = v44;
      }
      else
      {
        *(_OWORD *)(v7 + 504) = *(_OWORD *)(v8 + 504);
      }
      *(_WORD *)(v7 + 520) = *((_WORD *)v8 + 260);
      *(_OWORD *)(v7 + 528) = *((_OWORD *)v8 + 33);
      *(void *)(v7 + 544) = *((void *)v8 + 68);
      *(void *)(v7 + 568) = *((void *)v8 + 71);
      *(_OWORD *)(v7 + 552) = *(_OWORD *)(v8 + 552);
      *(void *)(v7 + 576) = *((void *)v8 + 72);
      *(_OWORD *)(v7 + 584) = *(_OWORD *)(v8 + 584);
      *(_OWORD *)(v7 + 600) = *(_OWORD *)(v8 + 600);
      *(void *)(v7 + 616) = *((void *)v8 + 77);
      *(void *)(v7 + 624) = *((void *)v8 + 78);
      *(unsigned char *)(v7 + 632) = v8[632];
      *(_WORD *)(v7 + 633) = *(_WORD *)(v8 + 633);
      uint64_t v83 = (int *)type metadata accessor for PlatformItemList.Item();
      uint64_t v84 = v83[28];
      uint64_t v85 = (char *)(v7 + v84);
      int v86 = &v8[v84];
      uint64_t v87 = type metadata accessor for CommandOperation();
      uint64_t v88 = *(void *)(v87 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v88 + 48))(v86, 1, v87))
      {
        _s7SwiftUI16CommandOperationVSgMaTm_0(0, &lazy cache variable for type metadata for CommandOperation?, (void (*)(uint64_t))type metadata accessor for CommandOperation);
        memcpy(v85, v86, *(void *)(*(void *)(v89 - 8) + 64));
      }
      else
      {
        *uint64_t v85 = *v86;
        uint64_t v112 = *(int *)(v87 + 20);
        __srcc = v86;
        __dstc = v85;
        id v113 = &v85[v112];
        uint64_t v114 = &v86[v112];
        long long v115 = *((_OWORD *)v114 + 1);
        *(_OWORD *)id v113 = *(_OWORD *)v114;
        *((_OWORD *)v113 + 1) = v115;
        uint64_t v116 = *(int *)(type metadata accessor for CommandGroupPlacement(0) + 20);
        long long v163 = &v113[v116];
        long long v117 = &v114[v116];
        uint64_t v118 = type metadata accessor for UUID();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v118 - 8) + 32))(v163, v117, v118);
        uint64_t v119 = *(int *)(v87 + 24);
        long long v120 = &__dstc[v119];
        uint64_t v121 = &__srcc[v119];
        uint64_t v122 = *(void *)v121;
        if (*(void *)v121)
        {
          uint64_t v123 = *((void *)v121 + 1);
          *(void *)long long v120 = v122;
          *((void *)v120 + 1) = v123;
        }
        else
        {
          *(_OWORD *)long long v120 = *(_OWORD *)v121;
        }
        (*(void (**)(char *, void, uint64_t, uint64_t))(v88 + 56))(__dstc, 0, 1, v87);
      }
      *(unsigned char *)(v7 + v83[29]) = v8[v83[29]];
      *(unsigned char *)(v7 + v83[30]) = v8[v83[30]];
      *(unsigned char *)(v7 + v83[31]) = v8[v83[31]];
      *(unsigned char *)(v7 + v83[32]) = v8[v83[32]];
      *(void *)(v7 + v83[33]) = *(void *)&v8[v83[33]];
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      int v53 = (int *)type metadata accessor for PlatformItemList.Item();
      __dstb = (void (**)(uint64_t, void, uint64_t, int *))*((void *)v53 - 1);
      if (((unsigned int (*)(char *, uint64_t, int *))__dstb[6])(v8, 1, v53))
      {
        _s7SwiftUI16CommandOperationVSgMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for PlatformItemList.Item?, (void (*)(uint64_t))type metadata accessor for PlatformItemList.Item);
        memcpy((void *)v7, v8, *(void *)(*(void *)(v54 - 8) + 64));
      }
      else
      {
        long long v90 = *((_OWORD *)v8 + 1);
        *(_OWORD *)uint64_t v7 = *(_OWORD *)v8;
        *(_OWORD *)(v7 + 16) = v90;
        *(unsigned char *)(v7 + 32) = v8[32];
        uint64_t v91 = *((void *)v8 + 6);
        *(void *)(v7 + 40) = *((void *)v8 + 5);
        *(void *)(v7 + 48) = v91;
        *(unsigned char *)(v7 + 56) = v8[56];
        long long v92 = *((_OWORD *)v8 + 13);
        *(_OWORD *)(v7 + 192) = *((_OWORD *)v8 + 12);
        *(_OWORD *)(v7 + 208) = v92;
        *(_OWORD *)(v7 + 224) = *((_OWORD *)v8 + 14);
        *(_DWORD *)(v7 + 239) = *(_DWORD *)(v8 + 239);
        long long v93 = *((_OWORD *)v8 + 9);
        *(_OWORD *)(v7 + 128) = *((_OWORD *)v8 + 8);
        *(_OWORD *)(v7 + 144) = v93;
        long long v94 = *((_OWORD *)v8 + 11);
        *(_OWORD *)(v7 + 160) = *((_OWORD *)v8 + 10);
        *(_OWORD *)(v7 + 176) = v94;
        long long v95 = *((_OWORD *)v8 + 5);
        *(_OWORD *)(v7 + 64) = *((_OWORD *)v8 + 4);
        *(_OWORD *)(v7 + 80) = v95;
        long long v96 = *((_OWORD *)v8 + 7);
        *(_OWORD *)(v7 + 96) = *((_OWORD *)v8 + 6);
        *(_OWORD *)(v7 + 112) = v96;
        *(_OWORD *)(v7 + 248) = *(_OWORD *)(v8 + 248);
        long long v97 = *(_OWORD *)(v8 + 280);
        *(_OWORD *)(v7 + 264) = *(_OWORD *)(v8 + 264);
        *(_OWORD *)(v7 + 280) = v97;
        long long v98 = *(_OWORD *)(v8 + 376);
        *(_OWORD *)(v7 + 360) = *(_OWORD *)(v8 + 360);
        *(_OWORD *)(v7 + 376) = v98;
        *(void *)(v7 + 392) = *((void *)v8 + 49);
        long long v99 = *(_OWORD *)(v8 + 312);
        *(_OWORD *)(v7 + 296) = *(_OWORD *)(v8 + 296);
        *(_OWORD *)(v7 + 312) = v99;
        long long v100 = *(_OWORD *)(v8 + 344);
        *(_OWORD *)(v7 + 328) = *(_OWORD *)(v8 + 328);
        *(_OWORD *)(v7 + 344) = v100;
        long long v101 = *((_OWORD *)v8 + 28);
        *(_OWORD *)(v7 + 432) = *((_OWORD *)v8 + 27);
        *(_OWORD *)(v7 + 448) = v101;
        *(unsigned char *)(v7 + 464) = v8[464];
        long long v102 = *((_OWORD *)v8 + 26);
        *(_OWORD *)(v7 + 400) = *((_OWORD *)v8 + 25);
        *(_OWORD *)(v7 + 416) = v102;
        *(_OWORD *)(v7 + 472) = *(_OWORD *)(v8 + 472);
        *(_OWORD *)(v7 + 481) = *(_OWORD *)(v8 + 481);
        uint64_t v103 = *((void *)v8 + 63);
        if (v103)
        {
          uint64_t v104 = *((void *)v8 + 64);
          *(void *)(v7 + 504) = v103;
          *(void *)(v7 + 512) = v104;
        }
        else
        {
          *(_OWORD *)(v7 + 504) = *(_OWORD *)(v8 + 504);
        }
        *(_WORD *)(v7 + 520) = *((_WORD *)v8 + 260);
        *(_OWORD *)(v7 + 528) = *((_OWORD *)v8 + 33);
        *(void *)(v7 + 544) = *((void *)v8 + 68);
        *(void *)(v7 + 568) = *((void *)v8 + 71);
        *(_OWORD *)(v7 + 552) = *(_OWORD *)(v8 + 552);
        *(void *)(v7 + 576) = *((void *)v8 + 72);
        *(_OWORD *)(v7 + 584) = *(_OWORD *)(v8 + 584);
        *(_OWORD *)(v7 + 600) = *(_OWORD *)(v8 + 600);
        *(void *)(v7 + 616) = *((void *)v8 + 77);
        *(void *)(v7 + 624) = *((void *)v8 + 78);
        *(unsigned char *)(v7 + 632) = v8[632];
        *(_WORD *)(v7 + 633) = *(_WORD *)(v8 + 633);
        uint64_t v136 = v53[28];
        char v137 = (char *)(v7 + v136);
        uint64_t v138 = &v8[v136];
        uint64_t v139 = type metadata accessor for CommandOperation();
        uint64_t v140 = *(void *)(v139 - 8);
        __srcb = v138;
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v140 + 48))(v138, 1, v139))
        {
          _s7SwiftUI16CommandOperationVSgMaTm_0(0, &lazy cache variable for type metadata for CommandOperation?, (void (*)(uint64_t))type metadata accessor for CommandOperation);
          memcpy(v137, v138, *(void *)(*(void *)(v141 - 8) + 64));
        }
        else
        {
          char *v137 = *v138;
          uint64_t v145 = *(int *)(v139 + 20);
          uint64_t v146 = &v137[v145];
          long long v164 = v137;
          uint64_t v147 = &__srcb[v145];
          long long v148 = *(_OWORD *)&__srcb[v145 + 16];
          *(_OWORD *)uint64_t v146 = *(_OWORD *)&__srcb[v145];
          *((_OWORD *)v146 + 1) = v148;
          uint64_t v149 = *(int *)(type metadata accessor for CommandGroupPlacement(0) + 20);
          uint64_t v150 = &v146[v149];
          long long v160 = &v147[v149];
          uint64_t v151 = type metadata accessor for UUID();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v151 - 8) + 32))(v150, v160, v151);
          uint64_t v152 = *(int *)(v139 + 24);
          unint64_t v153 = &v164[v152];
          id v154 = &__srcb[v152];
          uint64_t v155 = *(void *)v154;
          if (*(void *)v154)
          {
            uint64_t v156 = *((void *)v154 + 1);
            *(void *)unint64_t v153 = v155;
            *((void *)v153 + 1) = v156;
          }
          else
          {
            *(_OWORD *)unint64_t v153 = *(_OWORD *)v154;
          }
          (*(void (**)(char *, void, uint64_t, uint64_t))(v140 + 56))(v164, 0, 1, v139);
        }
        *(unsigned char *)(v7 + v53[29]) = v8[v53[29]];
        *(unsigned char *)(v7 + v53[30]) = v8[v53[30]];
        *(unsigned char *)(v7 + v53[31]) = v8[v53[31]];
        *(unsigned char *)(v7 + v53[32]) = v8[v53[32]];
        *(void *)(v7 + v53[33]) = *(void *)&v8[v53[33]];
        __dstb[7](v7, 0, 1, v53);
      }
      swift_storeEnumTagMultiPayload();
    }
  }
LABEL_49:
  *(void *)((char *)a1 + v173[7]) = *(void *)((char *)a2 + v173[7]);
  swift_bridgeObjectRelease();
  *(void *)((char *)a1 + v173[8]) = *(void *)((char *)a2 + v173[8]);
  swift_bridgeObjectRelease();
  uint64_t v142 = v173[9];
  uint64_t v143 = *(void **)((char *)a1 + v142);
  *(void *)((char *)a1 + v142) = *(void *)((char *)a2 + v142);

  return a1;
}

uint64_t sub_187BBE0CC(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    uint64_t v4 = *a1;
    if ((unint64_t)*a1 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    _s7SwiftUI16CommandOperationVSgMaTm_0(0, &lazy cache variable for type metadata for DialogActionContext.CancelType?, (void (*)(uint64_t))type metadata accessor for DialogActionContext.CancelType);
    uint64_t v9 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = (char *)a1 + *(int *)(a3 + 24);
    return v9(v11, a2, v10);
  }
}

void *sub_187BBE198(void *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *uint64_t result = (a2 - 1);
  }
  else
  {
    _s7SwiftUI16CommandOperationVSgMaTm_0(0, &lazy cache variable for type metadata for DialogActionContext.CancelType?, (void (*)(uint64_t))type metadata accessor for DialogActionContext.CancelType);
    uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = (char *)v5 + *(int *)(a4 + 24);
    return (void *)v8(v10, a2, a2, v9);
  }
  return result;
}

char *initializeBufferWithCopyOfBuffer for DialogActionContext.CancelType(char *a1, char **a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) == 0)
  {
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v6 = *a2;
      uint64_t v7 = a2[1];
      *(void *)a1 = *a2;
      *((void *)a1 + 1) = v7;
      uint64_t v8 = a2[3];
      *((void *)a1 + 2) = a2[2];
      *((void *)a1 + 3) = v8;
      a1[32] = *((unsigned char *)a2 + 32);
      uint64_t v9 = a2[6];
      *((void *)a1 + 5) = a2[5];
      *((void *)a1 + 6) = v9;
      a1[56] = *((unsigned char *)a2 + 56);
      uint64_t v10 = a1 + 64;
      uint64_t v11 = a2 + 8;
      unint64_t v12 = (unint64_t)a2[23];
      id v13 = v6;
      long long v14 = v7;
      swift_bridgeObjectRetain();
      swift_retain();
      if (v12 >> 1 == 4294967294)
      {
        long long v15 = *((_OWORD *)a2 + 13);
        *((_OWORD *)a1 + 12) = *((_OWORD *)a2 + 12);
        *((_OWORD *)a1 + 13) = v15;
        *((_OWORD *)a1 + 14) = *((_OWORD *)a2 + 14);
        *(_DWORD *)(a1 + 239) = *(_DWORD *)((char *)a2 + 239);
        long long v16 = *((_OWORD *)a2 + 9);
        *((_OWORD *)a1 + 8) = *((_OWORD *)a2 + 8);
        *((_OWORD *)a1 + 9) = v16;
        long long v17 = *((_OWORD *)a2 + 11);
        *((_OWORD *)a1 + 10) = *((_OWORD *)a2 + 10);
        *((_OWORD *)a1 + 11) = v17;
        long long v18 = *((_OWORD *)a2 + 5);
        *uint64_t v10 = *v11;
        *((_OWORD *)a1 + 5) = v18;
        long long v19 = *((_OWORD *)a2 + 7);
        *((_OWORD *)a1 + 6) = *((_OWORD *)a2 + 6);
        *((_OWORD *)a1 + 7) = v19;
        long long v20 = a2[32];
        if (v20)
        {
LABEL_5:
          *((void *)a1 + 31) = a2[31];
          *((void *)a1 + 32) = v20;
          long long v21 = a2[33];
          swift_bridgeObjectRetain();
          if ((unint64_t)v21 >= 2) {
            long long v22 = v21;
          }
          *((void *)a1 + 33) = v21;
          *((_DWORD *)a1 + 68) = *((_DWORD *)a2 + 68);
          a1[276] = *((unsigned char *)a2 + 276);
          *(_WORD *)(a1 + 277) = *(_WORD *)((char *)a2 + 277);
          long long v23 = a2[36];
          *((void *)a1 + 35) = a2[35];
          *((void *)a1 + 36) = v23;
          swift_retain();
          swift_retain();
LABEL_24:
          unint64_t v57 = (unint64_t)a2[41];
          if (v57 >> 2 == 0xFFFFFFFF)
          {
            long long v58 = *(_OWORD *)(a2 + 47);
            *(_OWORD *)(a1 + 360) = *(_OWORD *)(a2 + 45);
            *(_OWORD *)(a1 + 376) = v58;
            *((void *)a1 + 49) = a2[49];
            long long v59 = *(_OWORD *)(a2 + 39);
            *(_OWORD *)(a1 + 296) = *(_OWORD *)(a2 + 37);
            *(_OWORD *)(a1 + 312) = v59;
            long long v60 = *(_OWORD *)(a2 + 43);
            *(_OWORD *)(a1 + 328) = *(_OWORD *)(a2 + 41);
            *(_OWORD *)(a1 + 344) = v60;
          }
          else
          {
            long long v61 = a2[37];
            uint64_t v62 = (uint64_t)a2[38];
            uint64_t v63 = (uint64_t)a2[39];
            uint64_t v64 = (uint64_t)a2[40];
            uint64_t v65 = (uint64_t)a2[42];
            uint64_t v66 = (uint64_t)a2[43];
            long long v67 = a2[44];
            uint64_t v171 = (uint64_t)a2[45];
            int v174 = a2[46];
            uint64_t v178 = (uint64_t)a2[47];
            __dstb = a2[48];
            uint64_t v186 = (uint64_t)a2[49];
            outlined copy of PlatformItemList.Item.SystemItem(v61, v62, v63, v64, v57, v65, v66, (char)v67, v171, (uint64_t)v174, v178, (char)__dstb, v186);
            *((void *)a1 + 37) = v61;
            *((void *)a1 + 38) = v62;
            *((void *)a1 + 39) = v63;
            *((void *)a1 + 40) = v64;
            *((void *)a1 + 41) = v57;
            *((void *)a1 + 42) = v65;
            *((void *)a1 + 43) = v66;
            *((void *)a1 + 44) = v67;
            *((void *)a1 + 45) = v171;
            *((void *)a1 + 46) = v174;
            *((void *)a1 + 47) = v178;
            *((void *)a1 + 48) = __dstb;
            *((void *)a1 + 49) = v186;
          }
          uint64_t v68 = a2[51];
          if (v68 == (char *)1)
          {
            long long v69 = *((_OWORD *)a2 + 28);
            *((_OWORD *)a1 + 27) = *((_OWORD *)a2 + 27);
            *((_OWORD *)a1 + 28) = v69;
            a1[464] = *((unsigned char *)a2 + 464);
            long long v70 = *((_OWORD *)a2 + 26);
            *((_OWORD *)a1 + 25) = *((_OWORD *)a2 + 25);
            *((_OWORD *)a1 + 26) = v70;
LABEL_39:
            uint64_t v78 = a2[60];
            *((void *)a1 + 59) = a2[59];
            *((void *)a1 + 60) = v78;
            *((void *)a1 + 61) = a2[61];
            a1[496] = *((unsigned char *)a2 + 496);
            long long v79 = a2[63];
            swift_bridgeObjectRetain();
            if (v79)
            {
              unint64_t v80 = a2[64];
              *((void *)a1 + 63) = v79;
              *((void *)a1 + 64) = v80;
              swift_retain();
            }
            else
            {
              *(_OWORD *)(a1 + 504) = *(_OWORD *)(a2 + 63);
            }
            *((_WORD *)a1 + 260) = *((_WORD *)a2 + 260);
            uint64_t v81 = a2[66];
            if (v81)
            {
              *((void *)a1 + 66) = v81;
              *((void *)a1 + 67) = a2[67];
              *((void *)a1 + 68) = a2[68];
              swift_bridgeObjectRetain();
              swift_retain();
              swift_retain();
            }
            else
            {
              *((_OWORD *)a1 + 33) = *((_OWORD *)a2 + 33);
              *((void *)a1 + 68) = a2[68];
            }
            uint64_t v82 = a2[69];
            if (v82 == (char *)1)
            {
              *(_OWORD *)(a1 + 552) = *(_OWORD *)(a2 + 69);
              *((void *)a1 + 71) = a2[71];
            }
            else
            {
              *((void *)a1 + 69) = v82;
              uint64_t v83 = a2[70];
              swift_retain();
              if (v83)
              {
                uint64_t v84 = a2[71];
                *((void *)a1 + 70) = v83;
                *((void *)a1 + 71) = v84;
                swift_retain();
              }
              else
              {
                *((_OWORD *)a1 + 35) = *((_OWORD *)a2 + 35);
              }
            }
            uint64_t v85 = a2[72];
            *((void *)a1 + 72) = v85;
            *((void *)a1 + 73) = a2[73];
            *((void *)a1 + 74) = a2[74];
            *((void *)a1 + 75) = a2[75];
            *((void *)a1 + 76) = a2[76];
            *((void *)a1 + 77) = a2[77];
            *((void *)a1 + 78) = a2[78];
            *((_WORD *)a1 + 316) = *((_WORD *)a2 + 316);
            a1[634] = *((unsigned char *)a2 + 634);
            uint64_t v86 = type metadata accessor for PlatformItemList.Item();
            uint64_t v87 = *(int *)(v86 + 112);
            int v179 = (int *)v86;
            __dsta = &a1[v87];
            uint64_t v88 = (char *)a2 + v87;
            uint64_t v89 = type metadata accessor for CommandOperation();
            uint64_t v175 = *(void **)(v89 - 8);
            long long v187 = (unsigned int (*)(unsigned char *, uint64_t, uint64_t))v175[6];
            long long v90 = v85;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            if (v187(v88, 1, v89))
            {
              _s7SwiftUI16CommandOperationVSgMaTm_0(0, &lazy cache variable for type metadata for CommandOperation?, (void (*)(uint64_t))type metadata accessor for CommandOperation);
              memcpy(__dsta, v88, *(void *)(*(void *)(v91 - 8) + 64));
            }
            else
            {
              char *__dsta = *v88;
              uint64_t v92 = *(int *)(v89 + 20);
              long long v93 = &__dsta[v92];
              long long v94 = &v88[v92];
              uint64_t v188 = v88;
              uint64_t v95 = v89;
              uint64_t v96 = *(void *)&v88[v92];
              uint64_t v97 = *((void *)v94 + 1);
              char v98 = v94[16];
              outlined copy of Text.Storage(v96, v97, v98);
              *(void *)long long v93 = v96;
              *((void *)v93 + 1) = v97;
              v93[16] = v98;
              *((void *)v93 + 3) = *((void *)v94 + 3);
              uint64_t v99 = *(int *)(type metadata accessor for CommandGroupPlacement(0) + 20);
              long long v100 = &v93[v99];
              long long v101 = &v94[v99];
              uint64_t v102 = type metadata accessor for UUID();
              uint64_t v103 = *(void (**)(char *, unsigned char *, uint64_t))(*(void *)(v102 - 8) + 16);
              swift_bridgeObjectRetain();
              v103(v100, v101, v102);
              uint64_t v104 = *(int *)(v95 + 24);
              uint64_t v105 = &__dsta[v104];
              uint64_t v106 = &v188[v104];
              if (*v106)
              {
                uint64_t v107 = v106[1];
                *(void *)uint64_t v105 = *v106;
                *((void *)v105 + 1) = v107;
                swift_retain();
              }
              else
              {
                *(_OWORD *)uint64_t v105 = *(_OWORD *)v106;
              }
              ((void (*)(char *, void, uint64_t, uint64_t))v175[7])(__dsta, 0, 1, v95);
            }
            a1[v179[29]] = *((unsigned char *)a2 + v179[29]);
            a1[v179[30]] = *((unsigned char *)a2 + v179[30]);
            a1[v179[31]] = *((unsigned char *)a2 + v179[31]);
            a1[v179[32]] = *((unsigned char *)a2 + v179[32]);
            *(void *)&a1[v179[33]] = *(char **)((char *)a2 + v179[33]);
            swift_retain();
            goto LABEL_94;
          }
          *((_DWORD *)a1 + 100) = *((_DWORD *)a2 + 100);
          a1[404] = *((unsigned char *)a2 + 404);
          if (v68)
          {
            long long v71 = a2[52];
            *((void *)a1 + 51) = v68;
            *((void *)a1 + 52) = v71;
            swift_retain();
            long long v72 = a2[53];
            if (v72) {
              goto LABEL_31;
            }
          }
          else
          {
            *(_OWORD *)(a1 + 408) = *(_OWORD *)(a2 + 51);
            long long v72 = a2[53];
            if (v72)
            {
LABEL_31:
              long long v73 = a2[54];
              *((void *)a1 + 53) = v72;
              *((void *)a1 + 54) = v73;
              swift_retain();
              uint64_t v74 = a2[55];
              if (v74)
              {
LABEL_32:
                id v75 = a2[56];
                *((void *)a1 + 55) = v74;
                *((void *)a1 + 56) = v75;
                swift_retain();
LABEL_38:
                *((void *)a1 + 57) = a2[57];
                a1[464] = *((unsigned char *)a2 + 464);
                goto LABEL_39;
              }
LABEL_37:
              *(_OWORD *)(a1 + 440) = *(_OWORD *)(a2 + 55);
              goto LABEL_38;
            }
          }
          *(_OWORD *)(a1 + 424) = *(_OWORD *)(a2 + 53);
          uint64_t v74 = a2[55];
          if (v74) {
            goto LABEL_32;
          }
          goto LABEL_37;
        }
      }
      else
      {
        int v28 = *((unsigned __int8 *)a2 + 72);
        if (v28 == 255)
        {
          *(void *)uint64_t v10 = *(void *)v11;
          a1[72] = *((unsigned char *)a2 + 72);
        }
        else
        {
          uint64_t v29 = a2[8];
          outlined copy of GraphicsImage.Contents(v29, *((unsigned char *)a2 + 72));
          *((void *)a1 + 8) = v29;
          a1[72] = v28;
          unint64_t v12 = (unint64_t)a2[23];
        }
        *((void *)a1 + 10) = a2[10];
        *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 11);
        a1[104] = *((unsigned char *)a2 + 104);
        *(_OWORD *)(a1 + 108) = *(_OWORD *)((char *)a2 + 108);
        a1[124] = *((unsigned char *)a2 + 124);
        long long v48 = *((_OWORD *)a2 + 9);
        *((_OWORD *)a1 + 8) = *((_OWORD *)a2 + 8);
        *((_OWORD *)a1 + 9) = v48;
        *((_WORD *)a1 + 80) = *((_WORD *)a2 + 80);
        a1[162] = *((unsigned char *)a2 + 162);
        a1[163] = *((unsigned char *)a2 + 163);
        if (v12 >> 1 == 0xFFFFFFFF)
        {
          long long v49 = *(_OWORD *)(a2 + 23);
          *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 21);
          *(_OWORD *)(a1 + 184) = v49;
        }
        else
        {
          uint64_t v50 = (uint64_t)a2[21];
          uint64_t v51 = (uint64_t)a2[22];
          uint64_t v52 = a2[24];
          outlined copy of AccessibilityImageLabel(v50, v51, v12);
          *((void *)a1 + 21) = v50;
          *((void *)a1 + 22) = v51;
          *((void *)a1 + 23) = v12;
          *((void *)a1 + 24) = v52;
        }
        int v53 = a2[26];
        *((void *)a1 + 25) = a2[25];
        *((void *)a1 + 26) = v53;
        *((_WORD *)a1 + 108) = *((_WORD *)a2 + 108);
        *((_DWORD *)a1 + 55) = *((_DWORD *)a2 + 55);
        a1[224] = *((unsigned char *)a2 + 224);
        uint64_t v54 = a2[29];
        *((void *)a1 + 29) = v54;
        *((_WORD *)a1 + 120) = *((_WORD *)a2 + 120);
        a1[242] = *((unsigned char *)a2 + 242);
        swift_unknownObjectRetain();
        swift_retain();
        long long v55 = v54;
        long long v20 = a2[32];
        if (v20) {
          goto LABEL_5;
        }
      }
      long long v56 = *(_OWORD *)(a2 + 33);
      *(_OWORD *)(a1 + 248) = *(_OWORD *)(a2 + 31);
      *(_OWORD *)(a1 + 264) = v56;
      *(_OWORD *)(a1 + 280) = *(_OWORD *)(a2 + 35);
      goto LABEL_24;
    }
    uint64_t v25 = type metadata accessor for PlatformItemList.Item();
    long long v26 = *(unsigned int (***)(void, uint64_t, uint64_t))(v25 - 8);
    if (((unsigned int (**)(char **, uint64_t, uint64_t))v26)[6](a2, 1, v25))
    {
      _s7SwiftUI16CommandOperationVSgMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for PlatformItemList.Item?, (void (*)(uint64_t))type metadata accessor for PlatformItemList.Item);
      memcpy(a1, a2, *(void *)(*(void *)(v27 - 8) + 64));
LABEL_94:
      swift_storeEnumTagMultiPayload();
      return a1;
    }
    __dst = v26;
    long long v30 = *a2;
    uint64_t v31 = a2[1];
    *(void *)a1 = *a2;
    *((void *)a1 + 1) = v31;
    long long v32 = a2[3];
    *((void *)a1 + 2) = a2[2];
    *((void *)a1 + 3) = v32;
    a1[32] = *((unsigned char *)a2 + 32);
    long long v33 = a2[6];
    *((void *)a1 + 5) = a2[5];
    *((void *)a1 + 6) = v33;
    a1[56] = *((unsigned char *)a2 + 56);
    long long v34 = a1 + 64;
    long long v35 = a2 + 8;
    unint64_t v36 = (unint64_t)a2[23];
    id v37 = v30;
    long long v38 = v31;
    swift_bridgeObjectRetain();
    swift_retain();
    if (v36 >> 1 == 4294967294)
    {
      long long v39 = *((_OWORD *)a2 + 13);
      *((_OWORD *)a1 + 12) = *((_OWORD *)a2 + 12);
      *((_OWORD *)a1 + 13) = v39;
      *((_OWORD *)a1 + 14) = *((_OWORD *)a2 + 14);
      *(_DWORD *)(a1 + 239) = *(_DWORD *)((char *)a2 + 239);
      long long v40 = *((_OWORD *)a2 + 9);
      *((_OWORD *)a1 + 8) = *((_OWORD *)a2 + 8);
      *((_OWORD *)a1 + 9) = v40;
      long long v41 = *((_OWORD *)a2 + 11);
      *((_OWORD *)a1 + 10) = *((_OWORD *)a2 + 10);
      *((_OWORD *)a1 + 11) = v41;
      long long v42 = *((_OWORD *)a2 + 5);
      *long long v34 = *v35;
      *((_OWORD *)a1 + 5) = v42;
      long long v43 = *((_OWORD *)a2 + 7);
      *((_OWORD *)a1 + 6) = *((_OWORD *)a2 + 6);
      *((_OWORD *)a1 + 7) = v43;
      uint64_t v44 = a2[32];
      if (v44)
      {
LABEL_15:
        *((void *)a1 + 31) = a2[31];
        *((void *)a1 + 32) = v44;
        long long v45 = a2[33];
        swift_bridgeObjectRetain();
        if ((unint64_t)v45 >= 2) {
          uint64_t v46 = v45;
        }
        *((void *)a1 + 33) = v45;
        *((_DWORD *)a1 + 68) = *((_DWORD *)a2 + 68);
        a1[276] = *((unsigned char *)a2 + 276);
        *(_WORD *)(a1 + 277) = *(_WORD *)((char *)a2 + 277);
        long long v47 = a2[36];
        *((void *)a1 + 35) = a2[35];
        *((void *)a1 + 36) = v47;
        swift_retain();
        swift_retain();
LABEL_63:
        unint64_t v117 = (unint64_t)a2[41];
        uint64_t v189 = (int *)v25;
        if (v117 >> 2 == 0xFFFFFFFF)
        {
          long long v118 = *(_OWORD *)(a2 + 47);
          *(_OWORD *)(a1 + 360) = *(_OWORD *)(a2 + 45);
          *(_OWORD *)(a1 + 376) = v118;
          *((void *)a1 + 49) = a2[49];
          long long v119 = *(_OWORD *)(a2 + 39);
          *(_OWORD *)(a1 + 296) = *(_OWORD *)(a2 + 37);
          *(_OWORD *)(a1 + 312) = v119;
          long long v120 = *(_OWORD *)(a2 + 43);
          *(_OWORD *)(a1 + 328) = *(_OWORD *)(a2 + 41);
          *(_OWORD *)(a1 + 344) = v120;
        }
        else
        {
          uint64_t v121 = a2[37];
          uint64_t v122 = (uint64_t)a2[38];
          uint64_t v123 = (uint64_t)a2[39];
          uint64_t v124 = (uint64_t)a2[40];
          uint64_t v126 = (uint64_t)a2[42];
          uint64_t v125 = (uint64_t)a2[43];
          long long v127 = a2[44];
          uint64_t v169 = (uint64_t)a2[45];
          uint64_t v170 = (uint64_t)a2[46];
          uint64_t v172 = (uint64_t)a2[47];
          id v176 = a2[48];
          uint64_t v180 = (uint64_t)a2[49];
          outlined copy of PlatformItemList.Item.SystemItem(v121, v122, v123, v124, v117, v126, v125, (char)v127, v169, v170, v172, (char)v176, v180);
          *((void *)a1 + 37) = v121;
          *((void *)a1 + 38) = v122;
          *((void *)a1 + 39) = v123;
          *((void *)a1 + 40) = v124;
          *((void *)a1 + 41) = v117;
          *((void *)a1 + 42) = v126;
          uint64_t v25 = (uint64_t)v189;
          *((void *)a1 + 43) = v125;
          *((void *)a1 + 44) = v127;
          *((void *)a1 + 45) = v169;
          *((void *)a1 + 46) = v170;
          *((void *)a1 + 47) = v172;
          *((void *)a1 + 48) = v176;
          *((void *)a1 + 49) = v180;
        }
        uint64_t v128 = a2[51];
        if (v128 == (char *)1)
        {
          long long v129 = *((_OWORD *)a2 + 28);
          *((_OWORD *)a1 + 27) = *((_OWORD *)a2 + 27);
          *((_OWORD *)a1 + 28) = v129;
          a1[464] = *((unsigned char *)a2 + 464);
          long long v130 = *((_OWORD *)a2 + 26);
          *((_OWORD *)a1 + 25) = *((_OWORD *)a2 + 25);
          *((_OWORD *)a1 + 26) = v130;
LABEL_76:
          uint64_t v136 = a2[60];
          *((void *)a1 + 59) = a2[59];
          *((void *)a1 + 60) = v136;
          *((void *)a1 + 61) = a2[61];
          a1[496] = *((unsigned char *)a2 + 496);
          char v137 = a2[63];
          swift_bridgeObjectRetain();
          if (v137)
          {
            uint64_t v138 = a2[64];
            *((void *)a1 + 63) = v137;
            *((void *)a1 + 64) = v138;
            swift_retain();
          }
          else
          {
            *(_OWORD *)(a1 + 504) = *(_OWORD *)(a2 + 63);
          }
          *((_WORD *)a1 + 260) = *((_WORD *)a2 + 260);
          uint64_t v139 = a2[66];
          if (v139)
          {
            *((void *)a1 + 66) = v139;
            *((void *)a1 + 67) = a2[67];
            *((void *)a1 + 68) = a2[68];
            swift_bridgeObjectRetain();
            swift_retain();
            swift_retain();
          }
          else
          {
            *((_OWORD *)a1 + 33) = *((_OWORD *)a2 + 33);
            *((void *)a1 + 68) = a2[68];
          }
          uint64_t v140 = a2[69];
          if (v140 == (char *)1)
          {
            *(_OWORD *)(a1 + 552) = *(_OWORD *)(a2 + 69);
            *((void *)a1 + 71) = a2[71];
          }
          else
          {
            *((void *)a1 + 69) = v140;
            uint64_t v141 = a2[70];
            swift_retain();
            if (v141)
            {
              uint64_t v142 = a2[71];
              *((void *)a1 + 70) = v141;
              *((void *)a1 + 71) = v142;
              swift_retain();
            }
            else
            {
              *((_OWORD *)a1 + 35) = *((_OWORD *)a2 + 35);
            }
          }
          uint64_t v143 = a2[72];
          *((void *)a1 + 72) = v143;
          *((void *)a1 + 73) = a2[73];
          *((void *)a1 + 74) = a2[74];
          *((void *)a1 + 75) = a2[75];
          *((void *)a1 + 76) = a2[76];
          *((void *)a1 + 77) = a2[77];
          *((void *)a1 + 78) = a2[78];
          *((_WORD *)a1 + 316) = *((_WORD *)a2 + 316);
          a1[634] = *((unsigned char *)a2 + 634);
          uint64_t v144 = *(int *)(v25 + 112);
          uint64_t v177 = &a1[v144];
          uint64_t v145 = (char *)a2 + v144;
          uint64_t v146 = type metadata accessor for CommandOperation();
          uint64_t v173 = *(void *)(v146 - 8);
          long long v181 = *(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v173 + 48);
          uint64_t v147 = v143;
          long long v148 = v145;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if (v181(v145, 1, v146))
          {
            _s7SwiftUI16CommandOperationVSgMaTm_0(0, &lazy cache variable for type metadata for CommandOperation?, (void (*)(uint64_t))type metadata accessor for CommandOperation);
            memcpy(v177, v145, *(void *)(*(void *)(v149 - 8) + 64));
            uint64_t v150 = v189;
          }
          else
          {
            *uint64_t v177 = *v145;
            uint64_t v151 = *(int *)(v146 + 20);
            uint64_t v152 = v146;
            unint64_t v153 = &v177[v151];
            id v154 = &v148[v151];
            unint64_t v182 = v148;
            uint64_t v155 = *(void *)&v148[v151];
            uint64_t v156 = *((void *)v154 + 1);
            char v157 = v154[16];
            outlined copy of Text.Storage(v155, v156, v157);
            *(void *)unint64_t v153 = v155;
            *((void *)v153 + 1) = v156;
            v153[16] = v157;
            *((void *)v153 + 3) = *((void *)v154 + 3);
            uint64_t v158 = *(int *)(type metadata accessor for CommandGroupPlacement(0) + 20);
            uint64_t v159 = &v153[v158];
            long long v160 = &v154[v158];
            uint64_t v161 = type metadata accessor for UUID();
            long long v162 = *(void (**)(char *, unsigned char *, uint64_t))(*(void *)(v161 - 8) + 16);
            swift_bridgeObjectRetain();
            v162(v159, v160, v161);
            uint64_t v163 = *(int *)(v152 + 24);
            long long v164 = &v177[v163];
            id v165 = &v182[v163];
            if (*v165)
            {
              uint64_t v166 = v165[1];
              *(void *)long long v164 = *v165;
              *((void *)v164 + 1) = v166;
              swift_retain();
            }
            else
            {
              *(_OWORD *)long long v164 = *(_OWORD *)v165;
            }
            uint64_t v150 = v189;
            (*(void (**)(char *, void, uint64_t, uint64_t))(v173 + 56))(v177, 0, 1, v152);
          }
          a1[v150[29]] = *((unsigned char *)a2 + v150[29]);
          a1[v150[30]] = *((unsigned char *)a2 + v150[30]);
          a1[v150[31]] = *((unsigned char *)a2 + v150[31]);
          a1[v150[32]] = *((unsigned char *)a2 + v150[32]);
          *(void *)&a1[v150[33]] = *(char **)((char *)a2 + v150[33]);
          long long v167 = (void (*)(char *, void, uint64_t, int *))__dst[7];
          swift_retain();
          v167(a1, 0, 1, v150);
          goto LABEL_94;
        }
        *((_DWORD *)a1 + 100) = *((_DWORD *)a2 + 100);
        a1[404] = *((unsigned char *)a2 + 404);
        if (v128)
        {
          uint64_t v131 = a2[52];
          *((void *)a1 + 51) = v128;
          *((void *)a1 + 52) = v131;
          swift_retain();
          uint64_t v132 = a2[53];
          if (v132) {
            goto LABEL_70;
          }
        }
        else
        {
          *(_OWORD *)(a1 + 408) = *(_OWORD *)(a2 + 51);
          uint64_t v132 = a2[53];
          if (v132)
          {
LABEL_70:
            uint64_t v133 = a2[54];
            *((void *)a1 + 53) = v132;
            *((void *)a1 + 54) = v133;
            swift_retain();
            uint64_t v134 = a2[55];
            if (v134)
            {
LABEL_71:
              uint64_t v135 = a2[56];
              *((void *)a1 + 55) = v134;
              *((void *)a1 + 56) = v135;
              swift_retain();
LABEL_75:
              *((void *)a1 + 57) = a2[57];
              a1[464] = *((unsigned char *)a2 + 464);
              goto LABEL_76;
            }
LABEL_74:
            *(_OWORD *)(a1 + 440) = *(_OWORD *)(a2 + 55);
            goto LABEL_75;
          }
        }
        *(_OWORD *)(a1 + 424) = *(_OWORD *)(a2 + 53);
        uint64_t v134 = a2[55];
        if (v134) {
          goto LABEL_71;
        }
        goto LABEL_74;
      }
    }
    else
    {
      int v76 = *((unsigned __int8 *)a2 + 72);
      if (v76 == 255)
      {
        *(void *)long long v34 = *(void *)v35;
        a1[72] = *((unsigned char *)a2 + 72);
      }
      else
      {
        uint64_t v77 = a2[8];
        outlined copy of GraphicsImage.Contents(v77, *((unsigned char *)a2 + 72));
        *((void *)a1 + 8) = v77;
        a1[72] = v76;
        unint64_t v36 = (unint64_t)a2[23];
      }
      *((void *)a1 + 10) = a2[10];
      *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 11);
      a1[104] = *((unsigned char *)a2 + 104);
      *(_OWORD *)(a1 + 108) = *(_OWORD *)((char *)a2 + 108);
      a1[124] = *((unsigned char *)a2 + 124);
      long long v108 = *((_OWORD *)a2 + 9);
      *((_OWORD *)a1 + 8) = *((_OWORD *)a2 + 8);
      *((_OWORD *)a1 + 9) = v108;
      *((_WORD *)a1 + 80) = *((_WORD *)a2 + 80);
      a1[162] = *((unsigned char *)a2 + 162);
      a1[163] = *((unsigned char *)a2 + 163);
      if (v36 >> 1 == 0xFFFFFFFF)
      {
        long long v109 = *(_OWORD *)(a2 + 23);
        *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 21);
        *(_OWORD *)(a1 + 184) = v109;
      }
      else
      {
        uint64_t v110 = (uint64_t)a2[21];
        uint64_t v111 = (uint64_t)a2[22];
        uint64_t v112 = a2[24];
        outlined copy of AccessibilityImageLabel(v110, v111, v36);
        *((void *)a1 + 21) = v110;
        *((void *)a1 + 22) = v111;
        *((void *)a1 + 23) = v36;
        *((void *)a1 + 24) = v112;
      }
      id v113 = a2[26];
      *((void *)a1 + 25) = a2[25];
      *((void *)a1 + 26) = v113;
      *((_WORD *)a1 + 108) = *((_WORD *)a2 + 108);
      *((_DWORD *)a1 + 55) = *((_DWORD *)a2 + 55);
      a1[224] = *((unsigned char *)a2 + 224);
      uint64_t v114 = a2[29];
      *((void *)a1 + 29) = v114;
      *((_WORD *)a1 + 120) = *((_WORD *)a2 + 120);
      a1[242] = *((unsigned char *)a2 + 242);
      swift_unknownObjectRetain();
      swift_retain();
      long long v115 = v114;
      uint64_t v44 = a2[32];
      if (v44) {
        goto LABEL_15;
      }
    }
    long long v116 = *(_OWORD *)(a2 + 33);
    *(_OWORD *)(a1 + 248) = *(_OWORD *)(a2 + 31);
    *(_OWORD *)(a1 + 264) = v116;
    *(_OWORD *)(a1 + 280) = *(_OWORD *)(a2 + 35);
    goto LABEL_63;
  }
  long long v24 = *a2;
  *(void *)a1 = *a2;
  a1 = &v24[(v5 + 16) & ~(unint64_t)v5];
  swift_retain();
  return a1;
}

uint64_t destroy for DialogActionContext.CancelType(uint64_t a1)
{
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    uint64_t v9 = type metadata accessor for PlatformItemList.Item();
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48))(a1, 1, v9);
    if (result) {
      return result;
    }

    swift_bridgeObjectRelease();
    swift_release();
    uint64_t v11 = *(void *)(a1 + 184);
    unint64_t v12 = v11 & 0xFFFFFFFFFFFFFFFELL;
    if ((v11 & 0xFFFFFFFFFFFFFFFELL) != 0x1FFFFFFFCLL)
    {
      int v13 = *(unsigned __int8 *)(a1 + 72);
      if (v13 != 255)
      {
        outlined consume of GraphicsImage.Contents(*(void **)(a1 + 64), v13);
        uint64_t v11 = *(void *)(a1 + 184);
        unint64_t v12 = v11 & 0xFFFFFFFFFFFFFFFELL;
      }
      if (v12 != 0x1FFFFFFFELL) {
        outlined consume of AccessibilityImageLabel(*(void *)(a1 + 168), *(void *)(a1 + 176), v11);
      }
      swift_unknownObjectRelease();
      swift_release();
    }
    if (*(void *)(a1 + 256))
    {
      swift_bridgeObjectRelease();
      long long v14 = *(void **)(a1 + 264);
      if ((unint64_t)v14 >= 2) {

      }
      swift_release();
      swift_release();
    }
    unint64_t v15 = *(void *)(a1 + 328);
    if (v15 >> 2 != 0xFFFFFFFF) {
      outlined consume of PlatformItemList.Item.SystemItem(*(void **)(a1 + 296), *(void *)(a1 + 304), *(void *)(a1 + 312), *(void *)(a1 + 320), v15, *(void *)(a1 + 336), *(void *)(a1 + 344), *(void *)(a1 + 352), *(void *)(a1 + 360), *(void *)(a1 + 368), *(void *)(a1 + 376), *(void *)(a1 + 384), *(void *)(a1 + 392));
    }
    uint64_t v16 = *(void *)(a1 + 408);
    if (v16)
    {
      if (v16 == 1)
      {
LABEL_49:
        swift_bridgeObjectRelease();
        if (*(void *)(a1 + 504)) {
          swift_release();
        }
        if (*(void *)(a1 + 528))
        {
          swift_bridgeObjectRelease();
          swift_release();
          swift_release();
        }
        if (*(void *)(a1 + 552) != 1)
        {
          swift_release();
          if (*(void *)(a1 + 560)) {
            swift_release();
          }
        }

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v8 = *(int *)(v9 + 112);
        goto LABEL_57;
      }
      swift_release();
    }
    if (*(void *)(a1 + 424)) {
      swift_release();
    }
    if (*(void *)(a1 + 440)) {
      swift_release();
    }
    goto LABEL_49;
  }

  swift_bridgeObjectRelease();
  swift_release();
  uint64_t v2 = *(void *)(a1 + 184);
  unint64_t v3 = v2 & 0xFFFFFFFFFFFFFFFELL;
  if ((v2 & 0xFFFFFFFFFFFFFFFELL) != 0x1FFFFFFFCLL)
  {
    int v4 = *(unsigned __int8 *)(a1 + 72);
    if (v4 != 255)
    {
      outlined consume of GraphicsImage.Contents(*(void **)(a1 + 64), v4);
      uint64_t v2 = *(void *)(a1 + 184);
      unint64_t v3 = v2 & 0xFFFFFFFFFFFFFFFELL;
    }
    if (v3 != 0x1FFFFFFFELL) {
      outlined consume of AccessibilityImageLabel(*(void *)(a1 + 168), *(void *)(a1 + 176), v2);
    }
    swift_unknownObjectRelease();
    swift_release();
  }
  if (*(void *)(a1 + 256))
  {
    swift_bridgeObjectRelease();
    int v5 = *(void **)(a1 + 264);
    if ((unint64_t)v5 >= 2) {

    }
    swift_release();
    swift_release();
  }
  unint64_t v6 = *(void *)(a1 + 328);
  if (v6 >> 2 != 0xFFFFFFFF) {
    outlined consume of PlatformItemList.Item.SystemItem(*(void **)(a1 + 296), *(void *)(a1 + 304), *(void *)(a1 + 312), *(void *)(a1 + 320), v6, *(void *)(a1 + 336), *(void *)(a1 + 344), *(void *)(a1 + 352), *(void *)(a1 + 360), *(void *)(a1 + 368), *(void *)(a1 + 376), *(void *)(a1 + 384), *(void *)(a1 + 392));
  }
  uint64_t v7 = *(void *)(a1 + 408);
  if (!v7) {
    goto LABEL_17;
  }
  if (v7 != 1)
  {
    swift_release();
LABEL_17:
    if (*(void *)(a1 + 424)) {
      swift_release();
    }
    if (*(void *)(a1 + 440)) {
      swift_release();
    }
  }
  swift_bridgeObjectRelease();
  if (*(void *)(a1 + 504)) {
    swift_release();
  }
  if (*(void *)(a1 + 528))
  {
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
  }
  if (*(void *)(a1 + 552) != 1)
  {
    swift_release();
    if (*(void *)(a1 + 560)) {
      swift_release();
    }
  }

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v8 = *(int *)(type metadata accessor for PlatformItemList.Item() + 112);
LABEL_57:
  uint64_t v17 = a1 + v8;
  uint64_t v18 = type metadata accessor for CommandOperation();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 48))(v17, 1, v18))
  {
    uint64_t v19 = v17 + *(int *)(v18 + 20);
    outlined consume of Text.Storage(*(void *)v19, *(void *)(v19 + 8), *(unsigned char *)(v19 + 16));
    swift_bridgeObjectRelease();
    uint64_t v20 = v19 + *(int *)(type metadata accessor for CommandGroupPlacement(0) + 20);
    uint64_t v21 = type metadata accessor for UUID();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v21 - 8) + 8))(v20, v21);
    if (*(void *)(v17 + *(int *)(v18 + 24))) {
      swift_release();
    }
  }

  return swift_release();
}

uint64_t initializeWithCopy for DialogActionContext.CancelType(uint64_t a1, uint64_t a2)
{
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    int v4 = *(void **)a2;
    int v5 = *(void **)(a2 + 8);
    *(void *)a1 = *(void *)a2;
    *(void *)(a1 + 8) = v5;
    uint64_t v6 = *(void *)(a2 + 24);
    *(void *)(a1 + 16) = *(void *)(a2 + 16);
    *(void *)(a1 + 24) = v6;
    *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
    uint64_t v7 = *(void *)(a2 + 48);
    *(void *)(a1 + 40) = *(void *)(a2 + 40);
    *(void *)(a1 + 48) = v7;
    *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
    uint64_t v8 = (_OWORD *)(a1 + 64);
    uint64_t v9 = (_OWORD *)(a2 + 64);
    unint64_t v10 = *(void *)(a2 + 184);
    id v11 = v4;
    id v12 = v5;
    swift_bridgeObjectRetain();
    swift_retain();
    if (v10 >> 1 == 4294967294)
    {
      long long v13 = *(_OWORD *)(a2 + 208);
      *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
      *(_OWORD *)(a1 + 208) = v13;
      *(_OWORD *)(a1 + 224) = *(_OWORD *)(a2 + 224);
      *(_DWORD *)(a1 + 239) = *(_DWORD *)(a2 + 239);
      long long v14 = *(_OWORD *)(a2 + 144);
      *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
      *(_OWORD *)(a1 + 144) = v14;
      long long v15 = *(_OWORD *)(a2 + 176);
      *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
      *(_OWORD *)(a1 + 176) = v15;
      long long v16 = *(_OWORD *)(a2 + 80);
      *uint64_t v8 = *v9;
      *(_OWORD *)(a1 + 80) = v16;
      long long v17 = *(_OWORD *)(a2 + 112);
      *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
      *(_OWORD *)(a1 + 112) = v17;
      uint64_t v18 = *(void *)(a2 + 256);
      if (v18)
      {
LABEL_4:
        *(void *)(a1 + 248) = *(void *)(a2 + 248);
        *(void *)(a1 + 256) = v18;
        uint64_t v19 = *(void **)(a2 + 264);
        swift_bridgeObjectRetain();
        if ((unint64_t)v19 >= 2) {
          id v20 = v19;
        }
        *(void *)(a1 + 264) = v19;
        *(_DWORD *)(a1 + 272) = *(_DWORD *)(a2 + 272);
        *(unsigned char *)(a1 + 276) = *(unsigned char *)(a2 + 276);
        *(_WORD *)(a1 + 277) = *(_WORD *)(a2 + 277);
        uint64_t v21 = *(void *)(a2 + 288);
        *(void *)(a1 + 280) = *(void *)(a2 + 280);
        *(void *)(a1 + 288) = v21;
        swift_retain();
        swift_retain();
LABEL_22:
        unint64_t v54 = *(void *)(a2 + 328);
        if (v54 >> 2 == 0xFFFFFFFF)
        {
          long long v55 = *(_OWORD *)(a2 + 376);
          *(_OWORD *)(a1 + 360) = *(_OWORD *)(a2 + 360);
          *(_OWORD *)(a1 + 376) = v55;
          *(void *)(a1 + 392) = *(void *)(a2 + 392);
          long long v56 = *(_OWORD *)(a2 + 312);
          *(_OWORD *)(a1 + 296) = *(_OWORD *)(a2 + 296);
          *(_OWORD *)(a1 + 312) = v56;
          long long v57 = *(_OWORD *)(a2 + 344);
          *(_OWORD *)(a1 + 328) = *(_OWORD *)(a2 + 328);
          *(_OWORD *)(a1 + 344) = v57;
        }
        else
        {
          long long v58 = *(void **)(a2 + 296);
          uint64_t v59 = *(void *)(a2 + 304);
          uint64_t v60 = *(void *)(a2 + 312);
          uint64_t v61 = *(void *)(a2 + 320);
          uint64_t v62 = *(void *)(a2 + 336);
          uint64_t v63 = *(void *)(a2 + 344);
          uint64_t v64 = *(void *)(a2 + 352);
          uint64_t v168 = *(void *)(a2 + 360);
          uint64_t v172 = *(void *)(a2 + 368);
          int v174 = *(void **)(a2 + 376);
          __dsta = *(void **)(a2 + 384);
          uint64_t v183 = *(void *)(a2 + 392);
          outlined copy of PlatformItemList.Item.SystemItem(v58, v59, v60, v61, v54, v62, v63, v64, v168, v172, (uint64_t)v174, (char)__dsta, v183);
          *(void *)(a1 + 296) = v58;
          *(void *)(a1 + 304) = v59;
          *(void *)(a1 + 312) = v60;
          *(void *)(a1 + 320) = v61;
          *(void *)(a1 + 328) = v54;
          *(void *)(a1 + 336) = v62;
          *(void *)(a1 + 344) = v63;
          *(void *)(a1 + 352) = v64;
          *(void *)(a1 + 360) = v168;
          *(void *)(a1 + 368) = v172;
          *(void *)(a1 + 376) = v174;
          *(void *)(a1 + 384) = __dsta;
          *(void *)(a1 + 392) = v183;
        }
        uint64_t v65 = *(void *)(a2 + 408);
        if (v65 == 1)
        {
          long long v66 = *(_OWORD *)(a2 + 448);
          *(_OWORD *)(a1 + 432) = *(_OWORD *)(a2 + 432);
          *(_OWORD *)(a1 + 448) = v66;
          *(unsigned char *)(a1 + 464) = *(unsigned char *)(a2 + 464);
          long long v67 = *(_OWORD *)(a2 + 416);
          *(_OWORD *)(a1 + 400) = *(_OWORD *)(a2 + 400);
          *(_OWORD *)(a1 + 416) = v67;
LABEL_37:
          uint64_t v75 = *(void *)(a2 + 480);
          *(void *)(a1 + 472) = *(void *)(a2 + 472);
          *(void *)(a1 + 480) = v75;
          *(void *)(a1 + 488) = *(void *)(a2 + 488);
          *(unsigned char *)(a1 + 496) = *(unsigned char *)(a2 + 496);
          uint64_t v76 = *(void *)(a2 + 504);
          swift_bridgeObjectRetain();
          if (v76)
          {
            uint64_t v77 = *(void *)(a2 + 512);
            *(void *)(a1 + 504) = v76;
            *(void *)(a1 + 512) = v77;
            swift_retain();
          }
          else
          {
            *(_OWORD *)(a1 + 504) = *(_OWORD *)(a2 + 504);
          }
          *(_WORD *)(a1 + 520) = *(_WORD *)(a2 + 520);
          uint64_t v78 = *(void *)(a2 + 528);
          if (v78)
          {
            *(void *)(a1 + 528) = v78;
            *(void *)(a1 + 536) = *(void *)(a2 + 536);
            *(void *)(a1 + 544) = *(void *)(a2 + 544);
            swift_bridgeObjectRetain();
            swift_retain();
            swift_retain();
          }
          else
          {
            *(_OWORD *)(a1 + 528) = *(_OWORD *)(a2 + 528);
            *(void *)(a1 + 544) = *(void *)(a2 + 544);
          }
          uint64_t v79 = *(void *)(a2 + 552);
          if (v79 == 1)
          {
            *(_OWORD *)(a1 + 552) = *(_OWORD *)(a2 + 552);
            *(void *)(a1 + 568) = *(void *)(a2 + 568);
          }
          else
          {
            *(void *)(a1 + 552) = v79;
            uint64_t v80 = *(void *)(a2 + 560);
            swift_retain();
            if (v80)
            {
              uint64_t v81 = *(void *)(a2 + 568);
              *(void *)(a1 + 560) = v80;
              *(void *)(a1 + 568) = v81;
              swift_retain();
            }
            else
            {
              *(_OWORD *)(a1 + 560) = *(_OWORD *)(a2 + 560);
            }
          }
          uint64_t v82 = *(void **)(a2 + 576);
          *(void *)(a1 + 576) = v82;
          *(void *)(a1 + 584) = *(void *)(a2 + 584);
          *(void *)(a1 + 592) = *(void *)(a2 + 592);
          *(void *)(a1 + 600) = *(void *)(a2 + 600);
          *(void *)(a1 + 608) = *(void *)(a2 + 608);
          *(void *)(a1 + 616) = *(void *)(a2 + 616);
          *(void *)(a1 + 624) = *(void *)(a2 + 624);
          *(_WORD *)(a1 + 632) = *(_WORD *)(a2 + 632);
          *(unsigned char *)(a1 + 634) = *(unsigned char *)(a2 + 634);
          uint64_t v83 = type metadata accessor for PlatformItemList.Item();
          uint64_t v84 = *(int *)(v83 + 112);
          uint64_t v175 = (int *)v83;
          __dst = (unsigned char *)(a1 + v84);
          uint64_t v85 = (unsigned char *)(a2 + v84);
          uint64_t v86 = type metadata accessor for CommandOperation();
          uint64_t v173 = *(void *)(v86 - 8);
          long long v184 = *(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v173 + 48);
          id v87 = v82;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if (v184(v85, 1, v86))
          {
            _s7SwiftUI16CommandOperationVSgMaTm_0(0, &lazy cache variable for type metadata for CommandOperation?, (void (*)(uint64_t))type metadata accessor for CommandOperation);
            memcpy(__dst, v85, *(void *)(*(void *)(v88 - 8) + 64));
          }
          else
          {
            unsigned char *__dst = *v85;
            uint64_t v89 = *(int *)(v86 + 20);
            long long v90 = &__dst[v89];
            uint64_t v91 = &v85[v89];
            long long v185 = v85;
            uint64_t v92 = v86;
            uint64_t v93 = *(void *)&v85[v89];
            uint64_t v94 = *((void *)v91 + 1);
            char v95 = v91[16];
            outlined copy of Text.Storage(v93, v94, v95);
            *(void *)long long v90 = v93;
            *((void *)v90 + 1) = v94;
            v90[16] = v95;
            *((void *)v90 + 3) = *((void *)v91 + 3);
            uint64_t v96 = *(int *)(type metadata accessor for CommandGroupPlacement(0) + 20);
            uint64_t v97 = &v90[v96];
            char v98 = &v91[v96];
            uint64_t v99 = type metadata accessor for UUID();
            long long v100 = *(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v99 - 8) + 16);
            swift_bridgeObjectRetain();
            v100(v97, v98, v99);
            uint64_t v101 = *(int *)(v92 + 24);
            uint64_t v102 = &__dst[v101];
            uint64_t v103 = &v185[v101];
            if (*v103)
            {
              uint64_t v104 = v103[1];
              *uint64_t v102 = *v103;
              v102[1] = v104;
              swift_retain();
            }
            else
            {
              *(_OWORD *)uint64_t v102 = *(_OWORD *)v103;
            }
            (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v173 + 56))(__dst, 0, 1, v92);
          }
          *(unsigned char *)(a1 + v175[29]) = *(unsigned char *)(a2 + v175[29]);
          *(unsigned char *)(a1 + v175[30]) = *(unsigned char *)(a2 + v175[30]);
          *(unsigned char *)(a1 + v175[31]) = *(unsigned char *)(a2 + v175[31]);
          *(unsigned char *)(a1 + v175[32]) = *(unsigned char *)(a2 + v175[32]);
          *(void *)(a1 + v175[33]) = *(void *)(a2 + v175[33]);
          swift_retain();
          goto LABEL_92;
        }
        *(_DWORD *)(a1 + 400) = *(_DWORD *)(a2 + 400);
        *(unsigned char *)(a1 + 404) = *(unsigned char *)(a2 + 404);
        if (v65)
        {
          uint64_t v68 = *(void *)(a2 + 416);
          *(void *)(a1 + 408) = v65;
          *(void *)(a1 + 416) = v68;
          swift_retain();
          uint64_t v69 = *(void *)(a2 + 424);
          if (v69) {
            goto LABEL_29;
          }
        }
        else
        {
          *(_OWORD *)(a1 + 408) = *(_OWORD *)(a2 + 408);
          uint64_t v69 = *(void *)(a2 + 424);
          if (v69)
          {
LABEL_29:
            uint64_t v70 = *(void *)(a2 + 432);
            *(void *)(a1 + 424) = v69;
            *(void *)(a1 + 432) = v70;
            swift_retain();
            uint64_t v71 = *(void *)(a2 + 440);
            if (v71)
            {
LABEL_30:
              uint64_t v72 = *(void *)(a2 + 448);
              *(void *)(a1 + 440) = v71;
              *(void *)(a1 + 448) = v72;
              swift_retain();
LABEL_36:
              *(void *)(a1 + 456) = *(void *)(a2 + 456);
              *(unsigned char *)(a1 + 464) = *(unsigned char *)(a2 + 464);
              goto LABEL_37;
            }
LABEL_35:
            *(_OWORD *)(a1 + 440) = *(_OWORD *)(a2 + 440);
            goto LABEL_36;
          }
        }
        *(_OWORD *)(a1 + 424) = *(_OWORD *)(a2 + 424);
        uint64_t v71 = *(void *)(a2 + 440);
        if (v71) {
          goto LABEL_30;
        }
        goto LABEL_35;
      }
    }
    else
    {
      int v25 = *(unsigned __int8 *)(a2 + 72);
      if (v25 == 255)
      {
        *(void *)uint64_t v8 = *(void *)v9;
        *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
      }
      else
      {
        long long v26 = *(void **)(a2 + 64);
        outlined copy of GraphicsImage.Contents(v26, *(unsigned char *)(a2 + 72));
        *(void *)(a1 + 64) = v26;
        *(unsigned char *)(a1 + 72) = v25;
        unint64_t v10 = *(void *)(a2 + 184);
      }
      *(void *)(a1 + 80) = *(void *)(a2 + 80);
      *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
      *(unsigned char *)(a1 + 104) = *(unsigned char *)(a2 + 104);
      *(_OWORD *)(a1 + 108) = *(_OWORD *)(a2 + 108);
      *(unsigned char *)(a1 + 124) = *(unsigned char *)(a2 + 124);
      long long v45 = *(_OWORD *)(a2 + 144);
      *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
      *(_OWORD *)(a1 + 144) = v45;
      *(_WORD *)(a1 + 160) = *(_WORD *)(a2 + 160);
      *(unsigned char *)(a1 + 162) = *(unsigned char *)(a2 + 162);
      *(unsigned char *)(a1 + 163) = *(unsigned char *)(a2 + 163);
      if (v10 >> 1 == 0xFFFFFFFF)
      {
        long long v46 = *(_OWORD *)(a2 + 184);
        *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
        *(_OWORD *)(a1 + 184) = v46;
      }
      else
      {
        uint64_t v47 = *(void *)(a2 + 168);
        uint64_t v48 = *(void *)(a2 + 176);
        uint64_t v49 = *(void *)(a2 + 192);
        outlined copy of AccessibilityImageLabel(v47, v48, v10);
        *(void *)(a1 + 168) = v47;
        *(void *)(a1 + 176) = v48;
        *(void *)(a1 + 184) = v10;
        *(void *)(a1 + 192) = v49;
      }
      uint64_t v50 = *(void *)(a2 + 208);
      *(void *)(a1 + 200) = *(void *)(a2 + 200);
      *(void *)(a1 + 208) = v50;
      *(_WORD *)(a1 + 216) = *(_WORD *)(a2 + 216);
      *(_DWORD *)(a1 + 220) = *(_DWORD *)(a2 + 220);
      *(unsigned char *)(a1 + 224) = *(unsigned char *)(a2 + 224);
      uint64_t v51 = *(void **)(a2 + 232);
      *(void *)(a1 + 232) = v51;
      *(_WORD *)(a1 + 240) = *(_WORD *)(a2 + 240);
      *(unsigned char *)(a1 + 242) = *(unsigned char *)(a2 + 242);
      swift_unknownObjectRetain();
      swift_retain();
      id v52 = v51;
      uint64_t v18 = *(void *)(a2 + 256);
      if (v18) {
        goto LABEL_4;
      }
    }
    long long v53 = *(_OWORD *)(a2 + 264);
    *(_OWORD *)(a1 + 248) = *(_OWORD *)(a2 + 248);
    *(_OWORD *)(a1 + 264) = v53;
    *(_OWORD *)(a1 + 280) = *(_OWORD *)(a2 + 280);
    goto LABEL_22;
  }
  uint64_t v22 = type metadata accessor for PlatformItemList.Item();
  uint64_t v23 = *(void *)(v22 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v23 + 48))(a2, 1, v22))
  {
    _s7SwiftUI16CommandOperationVSgMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for PlatformItemList.Item?, (void (*)(uint64_t))type metadata accessor for PlatformItemList.Item);
    memcpy((void *)a1, (const void *)a2, *(void *)(*(void *)(v24 - 8) + 64));
    goto LABEL_92;
  }
  uint64_t v171 = v23;
  uint64_t v27 = *(void **)a2;
  int v28 = *(void **)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v28;
  uint64_t v29 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v29;
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  uint64_t v30 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v30;
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  uint64_t v31 = (void *)(a1 + 64);
  long long v32 = (void *)(a2 + 64);
  unint64_t v33 = *(void *)(a2 + 184);
  id v34 = v27;
  id v35 = v28;
  swift_bridgeObjectRetain();
  swift_retain();
  if (v33 >> 1 != 4294967294)
  {
    int v73 = *(unsigned __int8 *)(a2 + 72);
    if (v73 == 255)
    {
      *uint64_t v31 = *v32;
      *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
    }
    else
    {
      uint64_t v74 = *(void **)(a2 + 64);
      outlined copy of GraphicsImage.Contents(v74, *(unsigned char *)(a2 + 72));
      *(void *)(a1 + 64) = v74;
      *(unsigned char *)(a1 + 72) = v73;
      unint64_t v33 = *(void *)(a2 + 184);
    }
    *(void *)(a1 + 80) = *(void *)(a2 + 80);
    *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
    *(unsigned char *)(a1 + 104) = *(unsigned char *)(a2 + 104);
    *(_OWORD *)(a1 + 108) = *(_OWORD *)(a2 + 108);
    *(unsigned char *)(a1 + 124) = *(unsigned char *)(a2 + 124);
    long long v105 = *(_OWORD *)(a2 + 144);
    *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
    *(_OWORD *)(a1 + 144) = v105;
    *(_WORD *)(a1 + 160) = *(_WORD *)(a2 + 160);
    *(unsigned char *)(a1 + 162) = *(unsigned char *)(a2 + 162);
    *(unsigned char *)(a1 + 163) = *(unsigned char *)(a2 + 163);
    if (v33 >> 1 == 0xFFFFFFFF)
    {
      long long v106 = *(_OWORD *)(a2 + 184);
      *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
      *(_OWORD *)(a1 + 184) = v106;
    }
    else
    {
      uint64_t v107 = *(void *)(a2 + 168);
      uint64_t v108 = *(void *)(a2 + 176);
      uint64_t v109 = *(void *)(a2 + 192);
      outlined copy of AccessibilityImageLabel(v107, v108, v33);
      *(void *)(a1 + 168) = v107;
      *(void *)(a1 + 176) = v108;
      *(void *)(a1 + 184) = v33;
      *(void *)(a1 + 192) = v109;
    }
    uint64_t v110 = *(void *)(a2 + 208);
    *(void *)(a1 + 200) = *(void *)(a2 + 200);
    *(void *)(a1 + 208) = v110;
    *(_WORD *)(a1 + 216) = *(_WORD *)(a2 + 216);
    *(_DWORD *)(a1 + 220) = *(_DWORD *)(a2 + 220);
    *(unsigned char *)(a1 + 224) = *(unsigned char *)(a2 + 224);
    uint64_t v111 = *(void **)(a2 + 232);
    *(void *)(a1 + 232) = v111;
    *(_WORD *)(a1 + 240) = *(_WORD *)(a2 + 240);
    *(unsigned char *)(a1 + 242) = *(unsigned char *)(a2 + 242);
    swift_unknownObjectRetain();
    swift_retain();
    id v112 = v111;
    uint64_t v41 = *(void *)(a2 + 256);
    if (v41) {
      goto LABEL_13;
    }
LABEL_60:
    long long v113 = *(_OWORD *)(a2 + 264);
    *(_OWORD *)(a1 + 248) = *(_OWORD *)(a2 + 248);
    *(_OWORD *)(a1 + 264) = v113;
    *(_OWORD *)(a1 + 280) = *(_OWORD *)(a2 + 280);
    goto LABEL_61;
  }
  long long v36 = *(_OWORD *)(a2 + 208);
  *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 208) = v36;
  *(_OWORD *)(a1 + 224) = *(_OWORD *)(a2 + 224);
  *(_DWORD *)(a1 + 239) = *(_DWORD *)(a2 + 239);
  long long v37 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v37;
  long long v38 = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 176) = v38;
  long long v39 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)uint64_t v31 = *(_OWORD *)v32;
  *(_OWORD *)(a1 + 80) = v39;
  long long v40 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = v40;
  uint64_t v41 = *(void *)(a2 + 256);
  if (!v41) {
    goto LABEL_60;
  }
LABEL_13:
  *(void *)(a1 + 248) = *(void *)(a2 + 248);
  *(void *)(a1 + 256) = v41;
  long long v42 = *(void **)(a2 + 264);
  swift_bridgeObjectRetain();
  if ((unint64_t)v42 >= 2) {
    id v43 = v42;
  }
  *(void *)(a1 + 264) = v42;
  *(_DWORD *)(a1 + 272) = *(_DWORD *)(a2 + 272);
  *(unsigned char *)(a1 + 276) = *(unsigned char *)(a2 + 276);
  *(_WORD *)(a1 + 277) = *(_WORD *)(a2 + 277);
  uint64_t v44 = *(void *)(a2 + 288);
  *(void *)(a1 + 280) = *(void *)(a2 + 280);
  *(void *)(a1 + 288) = v44;
  swift_retain();
  swift_retain();
LABEL_61:
  unint64_t v114 = *(void *)(a2 + 328);
  uint64_t v186 = (int *)v22;
  if (v114 >> 2 == 0xFFFFFFFF)
  {
    long long v115 = *(_OWORD *)(a2 + 376);
    *(_OWORD *)(a1 + 360) = *(_OWORD *)(a2 + 360);
    *(_OWORD *)(a1 + 376) = v115;
    *(void *)(a1 + 392) = *(void *)(a2 + 392);
    long long v116 = *(_OWORD *)(a2 + 312);
    *(_OWORD *)(a1 + 296) = *(_OWORD *)(a2 + 296);
    *(_OWORD *)(a1 + 312) = v116;
    long long v117 = *(_OWORD *)(a2 + 344);
    *(_OWORD *)(a1 + 328) = *(_OWORD *)(a2 + 328);
    *(_OWORD *)(a1 + 344) = v117;
  }
  else
  {
    long long v118 = *(void **)(a2 + 296);
    uint64_t v119 = *(void *)(a2 + 304);
    uint64_t v120 = *(void *)(a2 + 312);
    uint64_t v121 = *(void *)(a2 + 320);
    uint64_t v123 = *(void *)(a2 + 336);
    uint64_t v122 = *(void *)(a2 + 344);
    uint64_t v124 = *(void *)(a2 + 352);
    uint64_t v166 = *(void *)(a2 + 360);
    uint64_t v167 = *(void *)(a2 + 368);
    uint64_t v169 = *(void *)(a2 + 376);
    id v176 = *(void **)(a2 + 384);
    __dstb = *(void **)(a2 + 392);
    outlined copy of PlatformItemList.Item.SystemItem(v118, v119, v120, v121, v114, v123, v122, v124, v166, v167, v169, (char)v176, (uint64_t)__dstb);
    *(void *)(a1 + 296) = v118;
    *(void *)(a1 + 304) = v119;
    *(void *)(a1 + 312) = v120;
    *(void *)(a1 + 320) = v121;
    *(void *)(a1 + 328) = v114;
    *(void *)(a1 + 336) = v123;
    *(void *)(a1 + 344) = v122;
    *(void *)(a1 + 352) = v124;
    *(void *)(a1 + 360) = v166;
    *(void *)(a1 + 368) = v167;
    *(void *)(a1 + 376) = v169;
    *(void *)(a1 + 384) = v176;
    uint64_t v22 = (uint64_t)v186;
    *(void *)(a1 + 392) = __dstb;
  }
  uint64_t v125 = *(void *)(a2 + 408);
  if (v125 != 1)
  {
    *(_DWORD *)(a1 + 400) = *(_DWORD *)(a2 + 400);
    *(unsigned char *)(a1 + 404) = *(unsigned char *)(a2 + 404);
    if (v125)
    {
      uint64_t v128 = *(void *)(a2 + 416);
      *(void *)(a1 + 408) = v125;
      *(void *)(a1 + 416) = v128;
      swift_retain();
      uint64_t v129 = *(void *)(a2 + 424);
      if (v129) {
        goto LABEL_68;
      }
    }
    else
    {
      *(_OWORD *)(a1 + 408) = *(_OWORD *)(a2 + 408);
      uint64_t v129 = *(void *)(a2 + 424);
      if (v129)
      {
LABEL_68:
        uint64_t v130 = *(void *)(a2 + 432);
        *(void *)(a1 + 424) = v129;
        *(void *)(a1 + 432) = v130;
        swift_retain();
        uint64_t v131 = *(void *)(a2 + 440);
        if (v131)
        {
LABEL_69:
          uint64_t v132 = *(void *)(a2 + 448);
          *(void *)(a1 + 440) = v131;
          *(void *)(a1 + 448) = v132;
          swift_retain();
LABEL_73:
          *(void *)(a1 + 456) = *(void *)(a2 + 456);
          *(unsigned char *)(a1 + 464) = *(unsigned char *)(a2 + 464);
          goto LABEL_74;
        }
LABEL_72:
        *(_OWORD *)(a1 + 440) = *(_OWORD *)(a2 + 440);
        goto LABEL_73;
      }
    }
    *(_OWORD *)(a1 + 424) = *(_OWORD *)(a2 + 424);
    uint64_t v131 = *(void *)(a2 + 440);
    if (v131) {
      goto LABEL_69;
    }
    goto LABEL_72;
  }
  long long v126 = *(_OWORD *)(a2 + 448);
  *(_OWORD *)(a1 + 432) = *(_OWORD *)(a2 + 432);
  *(_OWORD *)(a1 + 448) = v126;
  *(unsigned char *)(a1 + 464) = *(unsigned char *)(a2 + 464);
  long long v127 = *(_OWORD *)(a2 + 416);
  *(_OWORD *)(a1 + 400) = *(_OWORD *)(a2 + 400);
  *(_OWORD *)(a1 + 416) = v127;
LABEL_74:
  uint64_t v133 = *(void *)(a2 + 480);
  *(void *)(a1 + 472) = *(void *)(a2 + 472);
  *(void *)(a1 + 480) = v133;
  *(void *)(a1 + 488) = *(void *)(a2 + 488);
  *(unsigned char *)(a1 + 496) = *(unsigned char *)(a2 + 496);
  uint64_t v134 = *(void *)(a2 + 504);
  swift_bridgeObjectRetain();
  if (v134)
  {
    uint64_t v135 = *(void *)(a2 + 512);
    *(void *)(a1 + 504) = v134;
    *(void *)(a1 + 512) = v135;
    swift_retain();
  }
  else
  {
    *(_OWORD *)(a1 + 504) = *(_OWORD *)(a2 + 504);
  }
  *(_WORD *)(a1 + 520) = *(_WORD *)(a2 + 520);
  uint64_t v136 = *(void *)(a2 + 528);
  if (v136)
  {
    *(void *)(a1 + 528) = v136;
    *(void *)(a1 + 536) = *(void *)(a2 + 536);
    *(void *)(a1 + 544) = *(void *)(a2 + 544);
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
  }
  else
  {
    *(_OWORD *)(a1 + 528) = *(_OWORD *)(a2 + 528);
    *(void *)(a1 + 544) = *(void *)(a2 + 544);
  }
  uint64_t v137 = *(void *)(a2 + 552);
  if (v137 == 1)
  {
    *(_OWORD *)(a1 + 552) = *(_OWORD *)(a2 + 552);
    *(void *)(a1 + 568) = *(void *)(a2 + 568);
  }
  else
  {
    *(void *)(a1 + 552) = v137;
    uint64_t v138 = *(void *)(a2 + 560);
    swift_retain();
    if (v138)
    {
      uint64_t v139 = *(void *)(a2 + 568);
      *(void *)(a1 + 560) = v138;
      *(void *)(a1 + 568) = v139;
      swift_retain();
    }
    else
    {
      *(_OWORD *)(a1 + 560) = *(_OWORD *)(a2 + 560);
    }
  }
  uint64_t v140 = *(void **)(a2 + 576);
  *(void *)(a1 + 576) = v140;
  *(void *)(a1 + 584) = *(void *)(a2 + 584);
  *(void *)(a1 + 592) = *(void *)(a2 + 592);
  *(void *)(a1 + 600) = *(void *)(a2 + 600);
  *(void *)(a1 + 608) = *(void *)(a2 + 608);
  *(void *)(a1 + 616) = *(void *)(a2 + 616);
  *(void *)(a1 + 624) = *(void *)(a2 + 624);
  *(_WORD *)(a1 + 632) = *(_WORD *)(a2 + 632);
  *(unsigned char *)(a1 + 634) = *(unsigned char *)(a2 + 634);
  uint64_t v141 = *(int *)(v22 + 112);
  uint64_t v177 = (unsigned char *)(a1 + v141);
  uint64_t v142 = (unsigned char *)(a2 + v141);
  uint64_t v143 = type metadata accessor for CommandOperation();
  uint64_t v170 = *(void *)(v143 - 8);
  __dstc = *(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v170 + 48);
  id v144 = v140;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (__dstc(v142, 1, v143))
  {
    _s7SwiftUI16CommandOperationVSgMaTm_0(0, &lazy cache variable for type metadata for CommandOperation?, (void (*)(uint64_t))type metadata accessor for CommandOperation);
    memcpy(v177, v142, *(void *)(*(void *)(v145 - 8) + 64));
    uint64_t v146 = v186;
    uint64_t v147 = v171;
  }
  else
  {
    *uint64_t v177 = *v142;
    uint64_t v148 = *(int *)(v143 + 20);
    uint64_t v149 = &v177[v148];
    uint64_t v150 = &v142[v148];
    __dstd = v142;
    uint64_t v151 = *(void *)&v142[v148];
    uint64_t v152 = *(void *)&v142[v148 + 8];
    uint64_t v153 = v143;
    char v154 = v150[16];
    outlined copy of Text.Storage(v151, v152, v154);
    *(void *)uint64_t v149 = v151;
    *((void *)v149 + 1) = v152;
    v149[16] = v154;
    *((void *)v149 + 3) = *((void *)v150 + 3);
    uint64_t v155 = *(int *)(type metadata accessor for CommandGroupPlacement(0) + 20);
    uint64_t v156 = &v149[v155];
    char v157 = &v150[v155];
    uint64_t v158 = type metadata accessor for UUID();
    uint64_t v159 = *(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v158 - 8) + 16);
    swift_bridgeObjectRetain();
    v159(v156, v157, v158);
    uint64_t v160 = *(int *)(v153 + 24);
    uint64_t v161 = &v177[v160];
    long long v162 = &__dstd[v160];
    if (*(void *)v162)
    {
      uint64_t v163 = *((void *)v162 + 1);
      *uint64_t v161 = *(void *)v162;
      v161[1] = v163;
      swift_retain();
    }
    else
    {
      *(_OWORD *)uint64_t v161 = *(_OWORD *)v162;
    }
    uint64_t v146 = v186;
    uint64_t v147 = v171;
    (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v170 + 56))(v177, 0, 1, v153);
  }
  *(unsigned char *)(a1 + v146[29]) = *(unsigned char *)(a2 + v146[29]);
  *(unsigned char *)(a1 + v146[30]) = *(unsigned char *)(a2 + v146[30]);
  *(unsigned char *)(a1 + v146[31]) = *(unsigned char *)(a2 + v146[31]);
  *(unsigned char *)(a1 + v146[32]) = *(unsigned char *)(a2 + v146[32]);
  *(void *)(a1 + v146[33]) = *(void *)(a2 + v146[33]);
  long long v164 = *(void (**)(uint64_t, void, uint64_t, int *))(v147 + 56);
  swift_retain();
  v164(a1, 0, 1, v146);
LABEL_92:
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t assignWithCopy for DialogActionContext.CancelType(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    outlined destroy of DialogActionContext.CancelType(a1, type metadata accessor for DialogActionContext.CancelType);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      int v4 = *(void **)a2;
      *(void *)a1 = *(void *)a2;
      int v5 = *(void **)(a2 + 8);
      *(void *)(a1 + 8) = v5;
      *(void *)(a1 + 16) = *(void *)(a2 + 16);
      *(void *)(a1 + 24) = *(void *)(a2 + 24);
      *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
      *(void *)(a1 + 40) = *(void *)(a2 + 40);
      *(void *)(a1 + 48) = *(void *)(a2 + 48);
      *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
      uint64_t v6 = (_OWORD *)(a1 + 64);
      uint64_t v7 = (id *)(a2 + 64);
      unint64_t v8 = *(void *)(a2 + 184);
      id v9 = v4;
      id v10 = v5;
      swift_bridgeObjectRetain();
      swift_retain();
      if (v8 >> 1 == 4294967294)
      {
        long long v11 = *(_OWORD *)v7;
        long long v12 = *(_OWORD *)(a2 + 80);
        long long v13 = *(_OWORD *)(a2 + 112);
        *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
        *(_OWORD *)(a1 + 112) = v13;
        *uint64_t v6 = v11;
        *(_OWORD *)(a1 + 80) = v12;
        long long v14 = *(_OWORD *)(a2 + 128);
        long long v15 = *(_OWORD *)(a2 + 144);
        long long v16 = *(_OWORD *)(a2 + 176);
        *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
        *(_OWORD *)(a1 + 176) = v16;
        *(_OWORD *)(a1 + 128) = v14;
        *(_OWORD *)(a1 + 144) = v15;
        long long v17 = *(_OWORD *)(a2 + 192);
        long long v18 = *(_OWORD *)(a2 + 208);
        long long v19 = *(_OWORD *)(a2 + 224);
        *(_DWORD *)(a1 + 239) = *(_DWORD *)(a2 + 239);
        *(_OWORD *)(a1 + 208) = v18;
        *(_OWORD *)(a1 + 224) = v19;
        *(_OWORD *)(a1 + 192) = v17;
        if (*(void *)(a2 + 256))
        {
LABEL_5:
          *(void *)(a1 + 248) = *(void *)(a2 + 248);
          *(void *)(a1 + 256) = *(void *)(a2 + 256);
          id v20 = *(void **)(a2 + 264);
          swift_bridgeObjectRetain();
          if ((unint64_t)v20 >= 2) {
            id v21 = v20;
          }
          *(void *)(a1 + 264) = v20;
          int v22 = *(_DWORD *)(a2 + 272);
          *(unsigned char *)(a1 + 276) = *(unsigned char *)(a2 + 276);
          *(_DWORD *)(a1 + 272) = v22;
          *(unsigned char *)(a1 + 277) = *(unsigned char *)(a2 + 277);
          *(unsigned char *)(a1 + 278) = *(unsigned char *)(a2 + 278);
          *(void *)(a1 + 280) = *(void *)(a2 + 280);
          *(void *)(a1 + 288) = *(void *)(a2 + 288);
          swift_retain();
          swift_retain();
LABEL_23:
          unint64_t v61 = *(void *)(a2 + 328);
          if (v61 >> 2 == 0xFFFFFFFF)
          {
            long long v62 = *(_OWORD *)(a2 + 296);
            long long v63 = *(_OWORD *)(a2 + 328);
            *(_OWORD *)(a1 + 312) = *(_OWORD *)(a2 + 312);
            *(_OWORD *)(a1 + 328) = v63;
            *(_OWORD *)(a1 + 296) = v62;
            long long v64 = *(_OWORD *)(a2 + 344);
            long long v65 = *(_OWORD *)(a2 + 360);
            long long v66 = *(_OWORD *)(a2 + 376);
            *(void *)(a1 + 392) = *(void *)(a2 + 392);
            *(_OWORD *)(a1 + 360) = v65;
            *(_OWORD *)(a1 + 376) = v66;
            *(_OWORD *)(a1 + 344) = v64;
          }
          else
          {
            long long v67 = *(void **)(a2 + 296);
            uint64_t v68 = *(void *)(a2 + 304);
            uint64_t v69 = *(void *)(a2 + 312);
            uint64_t v70 = *(void *)(a2 + 320);
            uint64_t v71 = *(void *)(a2 + 336);
            uint64_t v72 = *(void *)(a2 + 344);
            uint64_t v73 = *(void *)(a2 + 352);
            uint64_t v190 = *(void *)(a2 + 360);
            uint64_t v193 = *(void *)(a2 + 368);
            uint64_t v198 = *(void **)(a2 + 376);
            __dstb = *(void **)(a2 + 384);
            uint64_t v205 = *(void *)(a2 + 392);
            outlined copy of PlatformItemList.Item.SystemItem(v67, v68, v69, v70, v61, v71, v72, v73, v190, v193, (uint64_t)v198, (char)__dstb, v205);
            *(void *)(a1 + 296) = v67;
            *(void *)(a1 + 304) = v68;
            *(void *)(a1 + 312) = v69;
            *(void *)(a1 + 320) = v70;
            *(void *)(a1 + 328) = v61;
            *(void *)(a1 + 336) = v71;
            *(void *)(a1 + 344) = v72;
            *(void *)(a1 + 352) = v73;
            *(void *)(a1 + 360) = v190;
            *(void *)(a1 + 368) = v193;
            *(void *)(a1 + 376) = v198;
            *(void *)(a1 + 384) = __dstb;
            *(void *)(a1 + 392) = v205;
          }
          if (*(void *)(a2 + 408) == 1)
          {
            *(_OWORD *)(a1 + 400) = *(_OWORD *)(a2 + 400);
            long long v74 = *(_OWORD *)(a2 + 416);
            long long v75 = *(_OWORD *)(a2 + 432);
            long long v76 = *(_OWORD *)(a2 + 448);
            *(unsigned char *)(a1 + 464) = *(unsigned char *)(a2 + 464);
            *(_OWORD *)(a1 + 432) = v75;
            *(_OWORD *)(a1 + 448) = v76;
            *(_OWORD *)(a1 + 416) = v74;
            goto LABEL_38;
          }
          *(unsigned char *)(a1 + 400) = *(unsigned char *)(a2 + 400);
          *(unsigned char *)(a1 + 401) = *(unsigned char *)(a2 + 401);
          *(unsigned char *)(a1 + 402) = *(unsigned char *)(a2 + 402);
          *(unsigned char *)(a1 + 403) = *(unsigned char *)(a2 + 403);
          *(unsigned char *)(a1 + 404) = *(unsigned char *)(a2 + 404);
          uint64_t v77 = *(void *)(a2 + 408);
          if (v77)
          {
            uint64_t v78 = *(void *)(a2 + 416);
            *(void *)(a1 + 408) = v77;
            *(void *)(a1 + 416) = v78;
            swift_retain();
            uint64_t v79 = *(void *)(a2 + 424);
            if (v79) {
              goto LABEL_30;
            }
          }
          else
          {
            *(_OWORD *)(a1 + 408) = *(_OWORD *)(a2 + 408);
            uint64_t v79 = *(void *)(a2 + 424);
            if (v79)
            {
LABEL_30:
              uint64_t v80 = *(void *)(a2 + 432);
              *(void *)(a1 + 424) = v79;
              *(void *)(a1 + 432) = v80;
              swift_retain();
              uint64_t v81 = *(void *)(a2 + 440);
              if (v81)
              {
LABEL_31:
                uint64_t v82 = *(void *)(a2 + 448);
                *(void *)(a1 + 440) = v81;
                *(void *)(a1 + 448) = v82;
                swift_retain();
LABEL_37:
                *(void *)(a1 + 456) = *(void *)(a2 + 456);
                *(unsigned char *)(a1 + 464) = *(unsigned char *)(a2 + 464);
LABEL_38:
                *(void *)(a1 + 472) = *(void *)(a2 + 472);
                *(void *)(a1 + 480) = *(void *)(a2 + 480);
                *(void *)(a1 + 488) = *(void *)(a2 + 488);
                *(unsigned char *)(a1 + 496) = *(unsigned char *)(a2 + 496);
                uint64_t v85 = *(void *)(a2 + 504);
                swift_bridgeObjectRetain();
                if (v85)
                {
                  uint64_t v86 = *(void *)(a2 + 512);
                  *(void *)(a1 + 504) = v85;
                  *(void *)(a1 + 512) = v86;
                  swift_retain();
                }
                else
                {
                  *(_OWORD *)(a1 + 504) = *(_OWORD *)(a2 + 504);
                }
                *(_WORD *)(a1 + 520) = *(_WORD *)(a2 + 520);
                uint64_t v87 = *(void *)(a2 + 528);
                if (v87)
                {
                  *(void *)(a1 + 528) = v87;
                  *(void *)(a1 + 536) = *(void *)(a2 + 536);
                  *(void *)(a1 + 544) = *(void *)(a2 + 544);
                  swift_bridgeObjectRetain();
                  swift_retain();
                  swift_retain();
                }
                else
                {
                  long long v88 = *(_OWORD *)(a2 + 528);
                  *(void *)(a1 + 544) = *(void *)(a2 + 544);
                  *(_OWORD *)(a1 + 528) = v88;
                }
                uint64_t v89 = *(void *)(a2 + 552);
                if (v89 == 1)
                {
                  long long v90 = (_OWORD *)(a1 + 552);
                  long long v91 = *(_OWORD *)(a2 + 552);
                  *(void *)(a1 + 568) = *(void *)(a2 + 568);
                }
                else
                {
                  *(void *)(a1 + 552) = v89;
                  uint64_t v92 = *(void *)(a2 + 560);
                  swift_retain();
                  if (v92)
                  {
                    uint64_t v93 = *(void *)(a2 + 568);
                    *(void *)(a1 + 560) = v92;
                    *(void *)(a1 + 568) = v93;
                    swift_retain();
LABEL_50:
                    uint64_t v94 = *(void **)(a2 + 576);
                    *(void *)(a1 + 576) = v94;
                    *(void *)(a1 + 584) = *(void *)(a2 + 584);
                    *(void *)(a1 + 592) = *(void *)(a2 + 592);
                    *(void *)(a1 + 600) = *(void *)(a2 + 600);
                    *(void *)(a1 + 608) = *(void *)(a2 + 608);
                    *(void *)(a1 + 616) = *(void *)(a2 + 616);
                    *(void *)(a1 + 624) = *(void *)(a2 + 624);
                    *(unsigned char *)(a1 + 632) = *(unsigned char *)(a2 + 632);
                    *(unsigned char *)(a1 + 633) = *(unsigned char *)(a2 + 633);
                    *(unsigned char *)(a1 + 634) = *(unsigned char *)(a2 + 634);
                    uint64_t v95 = type metadata accessor for PlatformItemList.Item();
                    uint64_t v96 = *(int *)(v95 + 112);
                    uint64_t v199 = (int *)v95;
                    __dsta = (unsigned char *)(a1 + v96);
                    uint64_t v97 = (unsigned char *)(a2 + v96);
                    uint64_t v98 = type metadata accessor for CommandOperation();
                    uint64_t v194 = *(void *)(v98 - 8);
                    uint64_t v206 = *(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v194 + 48);
                    id v99 = v94;
                    swift_bridgeObjectRetain();
                    swift_bridgeObjectRetain();
                    swift_bridgeObjectRetain();
                    swift_bridgeObjectRetain();
                    if (v206(v97, 1, v98))
                    {
                      _s7SwiftUI16CommandOperationVSgMaTm_0(0, &lazy cache variable for type metadata for CommandOperation?, (void (*)(uint64_t))type metadata accessor for CommandOperation);
                      memcpy(__dsta, v97, *(void *)(*(void *)(v100 - 8) + 64));
                    }
                    else
                    {
                      unsigned char *__dsta = *v97;
                      uint64_t v101 = *(int *)(v98 + 20);
                      uint64_t v102 = &__dsta[v101];
                      uint64_t v103 = &v97[v101];
                      uint64_t v207 = v97;
                      uint64_t v104 = v98;
                      uint64_t v105 = *(void *)&v97[v101];
                      uint64_t v106 = *((void *)v103 + 1);
                      char v107 = v103[16];
                      outlined copy of Text.Storage(v105, v106, v107);
                      *(void *)uint64_t v102 = v105;
                      *((void *)v102 + 1) = v106;
                      v102[16] = v107;
                      *((void *)v102 + 3) = *((void *)v103 + 3);
                      uint64_t v108 = *(int *)(type metadata accessor for CommandGroupPlacement(0) + 20);
                      uint64_t v109 = &v102[v108];
                      uint64_t v110 = &v103[v108];
                      uint64_t v111 = type metadata accessor for UUID();
                      id v112 = *(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v111 - 8) + 16);
                      swift_bridgeObjectRetain();
                      v112(v109, v110, v111);
                      uint64_t v113 = *(int *)(v104 + 24);
                      unint64_t v114 = &__dsta[v113];
                      long long v115 = &v207[v113];
                      if (*v115)
                      {
                        uint64_t v116 = v115[1];
                        void *v114 = *v115;
                        v114[1] = v116;
                        swift_retain();
                      }
                      else
                      {
                        *(_OWORD *)unint64_t v114 = *(_OWORD *)v115;
                      }
                      (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v194 + 56))(__dsta, 0, 1, v104);
                    }
                    *(unsigned char *)(a1 + v199[29]) = *(unsigned char *)(a2 + v199[29]);
                    *(unsigned char *)(a1 + v199[30]) = *(unsigned char *)(a2 + v199[30]);
                    *(unsigned char *)(a1 + v199[31]) = *(unsigned char *)(a2 + v199[31]);
                    *(unsigned char *)(a1 + v199[32]) = *(unsigned char *)(a2 + v199[32]);
                    *(void *)(a1 + v199[33]) = *(void *)(a2 + v199[33]);
                    swift_retain();
                    goto LABEL_95;
                  }
                  long long v90 = (_OWORD *)(a1 + 560);
                  long long v91 = *(_OWORD *)(a2 + 560);
                }
                *long long v90 = v91;
                goto LABEL_50;
              }
LABEL_36:
              *(_OWORD *)(a1 + 440) = *(_OWORD *)(a2 + 440);
              goto LABEL_37;
            }
          }
          *(_OWORD *)(a1 + 424) = *(_OWORD *)(a2 + 424);
          uint64_t v81 = *(void *)(a2 + 440);
          if (v81) {
            goto LABEL_31;
          }
          goto LABEL_36;
        }
      }
      else
      {
        int v26 = *(unsigned __int8 *)(a2 + 72);
        if (v26 == 255)
        {
          id v47 = *v7;
          *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
          *(void *)uint64_t v6 = v47;
        }
        else
        {
          id v27 = *v7;
          outlined copy of GraphicsImage.Contents(*v7, *(unsigned char *)(a2 + 72));
          *(void *)(a1 + 64) = v27;
          *(unsigned char *)(a1 + 72) = v26;
        }
        *(void *)(a1 + 80) = *(void *)(a2 + 80);
        *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
        *(unsigned char *)(a1 + 104) = *(unsigned char *)(a2 + 104);
        long long v48 = *(_OWORD *)(a2 + 108);
        *(unsigned char *)(a1 + 124) = *(unsigned char *)(a2 + 124);
        *(_OWORD *)(a1 + 108) = v48;
        long long v49 = *(_OWORD *)(a2 + 128);
        long long v50 = *(_OWORD *)(a2 + 144);
        *(unsigned char *)(a1 + 160) = *(unsigned char *)(a2 + 160);
        *(_OWORD *)(a1 + 128) = v49;
        *(_OWORD *)(a1 + 144) = v50;
        *(unsigned char *)(a1 + 161) = *(unsigned char *)(a2 + 161);
        *(unsigned char *)(a1 + 162) = *(unsigned char *)(a2 + 162);
        *(unsigned char *)(a1 + 163) = *(unsigned char *)(a2 + 163);
        unint64_t v51 = *(void *)(a2 + 184);
        if (v51 >> 1 == 0xFFFFFFFF)
        {
          long long v52 = *(_OWORD *)(a2 + 184);
          *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
          *(_OWORD *)(a1 + 184) = v52;
        }
        else
        {
          uint64_t v53 = *(void *)(a2 + 168);
          uint64_t v54 = *(void *)(a2 + 176);
          uint64_t v55 = *(void *)(a2 + 192);
          outlined copy of AccessibilityImageLabel(v53, v54, *(void *)(a2 + 184));
          *(void *)(a1 + 168) = v53;
          *(void *)(a1 + 176) = v54;
          *(void *)(a1 + 184) = v51;
          *(void *)(a1 + 192) = v55;
        }
        *(void *)(a1 + 200) = *(void *)(a2 + 200);
        *(void *)(a1 + 208) = *(void *)(a2 + 208);
        *(unsigned char *)(a1 + 216) = *(unsigned char *)(a2 + 216);
        *(unsigned char *)(a1 + 217) = *(unsigned char *)(a2 + 217);
        int v56 = *(_DWORD *)(a2 + 220);
        *(unsigned char *)(a1 + 224) = *(unsigned char *)(a2 + 224);
        *(_DWORD *)(a1 + 220) = v56;
        long long v57 = *(void **)(a2 + 232);
        *(void *)(a1 + 232) = v57;
        *(_WORD *)(a1 + 240) = *(_WORD *)(a2 + 240);
        *(unsigned char *)(a1 + 242) = *(unsigned char *)(a2 + 242);
        swift_unknownObjectRetain();
        swift_retain();
        id v58 = v57;
        if (*(void *)(a2 + 256)) {
          goto LABEL_5;
        }
      }
      long long v59 = *(_OWORD *)(a2 + 248);
      long long v60 = *(_OWORD *)(a2 + 280);
      *(_OWORD *)(a1 + 264) = *(_OWORD *)(a2 + 264);
      *(_OWORD *)(a1 + 280) = v60;
      *(_OWORD *)(a1 + 248) = v59;
      goto LABEL_23;
    }
    uint64_t v23 = type metadata accessor for PlatformItemList.Item();
    uint64_t v24 = *(unsigned int (***)(void, uint64_t, uint64_t))(v23 - 8);
    if (v24[6](a2, 1, v23))
    {
      _s7SwiftUI16CommandOperationVSgMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for PlatformItemList.Item?, (void (*)(uint64_t))type metadata accessor for PlatformItemList.Item);
      memcpy((void *)a1, (const void *)a2, *(void *)(*(void *)(v25 - 8) + 64));
LABEL_95:
      swift_storeEnumTagMultiPayload();
      return a1;
    }
    __dst = v24;
    int v28 = *(void **)a2;
    *(void *)a1 = *(void *)a2;
    uint64_t v29 = *(void **)(a2 + 8);
    *(void *)(a1 + 8) = v29;
    *(void *)(a1 + 16) = *(void *)(a2 + 16);
    *(void *)(a1 + 24) = *(void *)(a2 + 24);
    *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
    *(void *)(a1 + 40) = *(void *)(a2 + 40);
    *(void *)(a1 + 48) = *(void *)(a2 + 48);
    *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
    uint64_t v30 = (_OWORD *)(a1 + 64);
    uint64_t v31 = (id *)(a2 + 64);
    unint64_t v32 = *(void *)(a2 + 184);
    id v33 = v28;
    id v34 = v29;
    swift_bridgeObjectRetain();
    swift_retain();
    if (v32 >> 1 == 4294967294)
    {
      long long v35 = *(_OWORD *)v31;
      long long v36 = *(_OWORD *)(a2 + 80);
      long long v37 = *(_OWORD *)(a2 + 112);
      *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
      *(_OWORD *)(a1 + 112) = v37;
      *uint64_t v30 = v35;
      *(_OWORD *)(a1 + 80) = v36;
      long long v38 = *(_OWORD *)(a2 + 128);
      long long v39 = *(_OWORD *)(a2 + 144);
      long long v40 = *(_OWORD *)(a2 + 176);
      *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
      *(_OWORD *)(a1 + 176) = v40;
      *(_OWORD *)(a1 + 128) = v38;
      *(_OWORD *)(a1 + 144) = v39;
      long long v41 = *(_OWORD *)(a2 + 192);
      long long v42 = *(_OWORD *)(a2 + 208);
      long long v43 = *(_OWORD *)(a2 + 224);
      *(_DWORD *)(a1 + 239) = *(_DWORD *)(a2 + 239);
      *(_OWORD *)(a1 + 208) = v42;
      *(_OWORD *)(a1 + 224) = v43;
      *(_OWORD *)(a1 + 192) = v41;
      if (*(void *)(a2 + 256))
      {
LABEL_14:
        *(void *)(a1 + 248) = *(void *)(a2 + 248);
        *(void *)(a1 + 256) = *(void *)(a2 + 256);
        uint64_t v44 = *(void **)(a2 + 264);
        swift_bridgeObjectRetain();
        if ((unint64_t)v44 >= 2) {
          id v45 = v44;
        }
        *(void *)(a1 + 264) = v44;
        int v46 = *(_DWORD *)(a2 + 272);
        *(unsigned char *)(a1 + 276) = *(unsigned char *)(a2 + 276);
        *(_DWORD *)(a1 + 272) = v46;
        *(unsigned char *)(a1 + 277) = *(unsigned char *)(a2 + 277);
        *(unsigned char *)(a1 + 278) = *(unsigned char *)(a2 + 278);
        *(void *)(a1 + 280) = *(void *)(a2 + 280);
        *(void *)(a1 + 288) = *(void *)(a2 + 288);
        swift_retain();
        swift_retain();
LABEL_63:
        unint64_t v131 = *(void *)(a2 + 328);
        uint64_t v208 = (int *)v23;
        if (v131 >> 2 == 0xFFFFFFFF)
        {
          long long v132 = *(_OWORD *)(a2 + 296);
          long long v133 = *(_OWORD *)(a2 + 328);
          *(_OWORD *)(a1 + 312) = *(_OWORD *)(a2 + 312);
          *(_OWORD *)(a1 + 328) = v133;
          *(_OWORD *)(a1 + 296) = v132;
          long long v134 = *(_OWORD *)(a2 + 344);
          long long v135 = *(_OWORD *)(a2 + 360);
          long long v136 = *(_OWORD *)(a2 + 376);
          *(void *)(a1 + 392) = *(void *)(a2 + 392);
          *(_OWORD *)(a1 + 360) = v135;
          *(_OWORD *)(a1 + 376) = v136;
          *(_OWORD *)(a1 + 344) = v134;
        }
        else
        {
          uint64_t v137 = *(void **)(a2 + 296);
          uint64_t v138 = *(void *)(a2 + 304);
          uint64_t v139 = *(void *)(a2 + 312);
          uint64_t v140 = *(void *)(a2 + 320);
          uint64_t v142 = *(void *)(a2 + 336);
          uint64_t v141 = *(void *)(a2 + 344);
          uint64_t v143 = *(void *)(a2 + 352);
          uint64_t v188 = *(void *)(a2 + 360);
          uint64_t v189 = *(void *)(a2 + 368);
          uint64_t v191 = *(void *)(a2 + 376);
          uint64_t v195 = *(void *)(a2 + 384);
          id v200 = *(void **)(a2 + 392);
          outlined copy of PlatformItemList.Item.SystemItem(v137, v138, v139, v140, v131, v142, v141, v143, v188, v189, v191, v195, (uint64_t)v200);
          *(void *)(a1 + 296) = v137;
          *(void *)(a1 + 304) = v138;
          *(void *)(a1 + 312) = v139;
          *(void *)(a1 + 320) = v140;
          *(void *)(a1 + 328) = v131;
          *(void *)(a1 + 336) = v142;
          uint64_t v23 = (uint64_t)v208;
          *(void *)(a1 + 344) = v141;
          *(void *)(a1 + 352) = v143;
          *(void *)(a1 + 360) = v188;
          *(void *)(a1 + 368) = v189;
          *(void *)(a1 + 376) = v191;
          *(void *)(a1 + 384) = v195;
          *(void *)(a1 + 392) = v200;
        }
        if (*(void *)(a2 + 408) == 1)
        {
          *(_OWORD *)(a1 + 400) = *(_OWORD *)(a2 + 400);
          long long v144 = *(_OWORD *)(a2 + 416);
          long long v145 = *(_OWORD *)(a2 + 432);
          long long v146 = *(_OWORD *)(a2 + 448);
          *(unsigned char *)(a1 + 464) = *(unsigned char *)(a2 + 464);
          *(_OWORD *)(a1 + 432) = v145;
          *(_OWORD *)(a1 + 448) = v146;
          *(_OWORD *)(a1 + 416) = v144;
          goto LABEL_76;
        }
        *(unsigned char *)(a1 + 400) = *(unsigned char *)(a2 + 400);
        *(unsigned char *)(a1 + 401) = *(unsigned char *)(a2 + 401);
        *(unsigned char *)(a1 + 402) = *(unsigned char *)(a2 + 402);
        *(unsigned char *)(a1 + 403) = *(unsigned char *)(a2 + 403);
        *(unsigned char *)(a1 + 404) = *(unsigned char *)(a2 + 404);
        uint64_t v147 = *(void *)(a2 + 408);
        if (v147)
        {
          uint64_t v148 = *(void *)(a2 + 416);
          *(void *)(a1 + 408) = v147;
          *(void *)(a1 + 416) = v148;
          swift_retain();
          uint64_t v149 = *(void *)(a2 + 424);
          if (v149) {
            goto LABEL_70;
          }
        }
        else
        {
          *(_OWORD *)(a1 + 408) = *(_OWORD *)(a2 + 408);
          uint64_t v149 = *(void *)(a2 + 424);
          if (v149)
          {
LABEL_70:
            uint64_t v150 = *(void *)(a2 + 432);
            *(void *)(a1 + 424) = v149;
            *(void *)(a1 + 432) = v150;
            swift_retain();
            uint64_t v151 = *(void *)(a2 + 440);
            if (v151)
            {
LABEL_71:
              uint64_t v152 = *(void *)(a2 + 448);
              *(void *)(a1 + 440) = v151;
              *(void *)(a1 + 448) = v152;
              swift_retain();
LABEL_75:
              *(void *)(a1 + 456) = *(void *)(a2 + 456);
              *(unsigned char *)(a1 + 464) = *(unsigned char *)(a2 + 464);
LABEL_76:
              *(void *)(a1 + 472) = *(void *)(a2 + 472);
              *(void *)(a1 + 480) = *(void *)(a2 + 480);
              *(void *)(a1 + 488) = *(void *)(a2 + 488);
              *(unsigned char *)(a1 + 496) = *(unsigned char *)(a2 + 496);
              uint64_t v153 = *(void *)(a2 + 504);
              swift_bridgeObjectRetain();
              if (v153)
              {
                uint64_t v154 = *(void *)(a2 + 512);
                *(void *)(a1 + 504) = v153;
                *(void *)(a1 + 512) = v154;
                swift_retain();
              }
              else
              {
                *(_OWORD *)(a1 + 504) = *(_OWORD *)(a2 + 504);
              }
              *(_WORD *)(a1 + 520) = *(_WORD *)(a2 + 520);
              uint64_t v155 = *(void *)(a2 + 528);
              if (v155)
              {
                *(void *)(a1 + 528) = v155;
                *(void *)(a1 + 536) = *(void *)(a2 + 536);
                *(void *)(a1 + 544) = *(void *)(a2 + 544);
                swift_bridgeObjectRetain();
                swift_retain();
                swift_retain();
              }
              else
              {
                long long v156 = *(_OWORD *)(a2 + 528);
                *(void *)(a1 + 544) = *(void *)(a2 + 544);
                *(_OWORD *)(a1 + 528) = v156;
              }
              uint64_t v157 = *(void *)(a2 + 552);
              if (v157 == 1)
              {
                uint64_t v158 = (_OWORD *)(a1 + 552);
                long long v159 = *(_OWORD *)(a2 + 552);
                *(void *)(a1 + 568) = *(void *)(a2 + 568);
              }
              else
              {
                *(void *)(a1 + 552) = v157;
                uint64_t v160 = *(void *)(a2 + 560);
                swift_retain();
                if (v160)
                {
                  uint64_t v161 = *(void *)(a2 + 568);
                  *(void *)(a1 + 560) = v160;
                  *(void *)(a1 + 568) = v161;
                  swift_retain();
LABEL_88:
                  long long v162 = *(void **)(a2 + 576);
                  *(void *)(a1 + 576) = v162;
                  *(void *)(a1 + 584) = *(void *)(a2 + 584);
                  *(void *)(a1 + 592) = *(void *)(a2 + 592);
                  *(void *)(a1 + 600) = *(void *)(a2 + 600);
                  *(void *)(a1 + 608) = *(void *)(a2 + 608);
                  *(void *)(a1 + 616) = *(void *)(a2 + 616);
                  *(void *)(a1 + 624) = *(void *)(a2 + 624);
                  *(unsigned char *)(a1 + 632) = *(unsigned char *)(a2 + 632);
                  *(unsigned char *)(a1 + 633) = *(unsigned char *)(a2 + 633);
                  *(unsigned char *)(a1 + 634) = *(unsigned char *)(a2 + 634);
                  uint64_t v163 = *(int *)(v23 + 112);
                  long long v201 = (unsigned char *)(a1 + v163);
                  long long v164 = (unsigned char *)(a2 + v163);
                  uint64_t v165 = type metadata accessor for CommandOperation();
                  uint64_t v192 = *(void *)(v165 - 8);
                  long long v196 = *(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v192 + 48);
                  id v166 = v162;
                  uint64_t v167 = v164;
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRetain();
                  if (v196(v164, 1, v165))
                  {
                    _s7SwiftUI16CommandOperationVSgMaTm_0(0, &lazy cache variable for type metadata for CommandOperation?, (void (*)(uint64_t))type metadata accessor for CommandOperation);
                    memcpy(v201, v164, *(void *)(*(void *)(v168 - 8) + 64));
                    uint64_t v169 = v208;
                  }
                  else
                  {
                    *long long v201 = *v164;
                    uint64_t v170 = *(int *)(v165 + 20);
                    uint64_t v171 = v165;
                    uint64_t v172 = &v201[v170];
                    uint64_t v173 = &v167[v170];
                    long long v197 = v167;
                    uint64_t v174 = *(void *)&v167[v170];
                    uint64_t v175 = *((void *)v173 + 1);
                    char v176 = v173[16];
                    outlined copy of Text.Storage(v174, v175, v176);
                    *(void *)uint64_t v172 = v174;
                    *((void *)v172 + 1) = v175;
                    v172[16] = v176;
                    *((void *)v172 + 3) = *((void *)v173 + 3);
                    uint64_t v177 = *(int *)(type metadata accessor for CommandGroupPlacement(0) + 20);
                    uint64_t v178 = &v172[v177];
                    int v179 = &v173[v177];
                    uint64_t v180 = type metadata accessor for UUID();
                    long long v181 = *(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v180 - 8) + 16);
                    swift_bridgeObjectRetain();
                    v181(v178, v179, v180);
                    uint64_t v182 = *(int *)(v171 + 24);
                    uint64_t v183 = &v201[v182];
                    long long v184 = &v197[v182];
                    if (*v184)
                    {
                      uint64_t v185 = v184[1];
                      *uint64_t v183 = *v184;
                      v183[1] = v185;
                      swift_retain();
                    }
                    else
                    {
                      *(_OWORD *)uint64_t v183 = *(_OWORD *)v184;
                    }
                    uint64_t v169 = v208;
                    (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v192 + 56))(v201, 0, 1, v171);
                  }
                  *(unsigned char *)(a1 + v169[29]) = *(unsigned char *)(a2 + v169[29]);
                  *(unsigned char *)(a1 + v169[30]) = *(unsigned char *)(a2 + v169[30]);
                  *(unsigned char *)(a1 + v169[31]) = *(unsigned char *)(a2 + v169[31]);
                  *(unsigned char *)(a1 + v169[32]) = *(unsigned char *)(a2 + v169[32]);
                  *(void *)(a1 + v169[33]) = *(void *)(a2 + v169[33]);
                  uint64_t v186 = (void (*)(uint64_t, void, uint64_t, int *))__dst[7];
                  swift_retain();
                  v186(a1, 0, 1, v169);
                  goto LABEL_95;
                }
                uint64_t v158 = (_OWORD *)(a1 + 560);
                long long v159 = *(_OWORD *)(a2 + 560);
              }
              *uint64_t v158 = v159;
              goto LABEL_88;
            }
LABEL_74:
            *(_OWORD *)(a1 + 440) = *(_OWORD *)(a2 + 440);
            goto LABEL_75;
          }
        }
        *(_OWORD *)(a1 + 424) = *(_OWORD *)(a2 + 424);
        uint64_t v151 = *(void *)(a2 + 440);
        if (v151) {
          goto LABEL_71;
        }
        goto LABEL_74;
      }
    }
    else
    {
      int v83 = *(unsigned __int8 *)(a2 + 72);
      if (v83 == 255)
      {
        id v117 = *v31;
        *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
        *(void *)uint64_t v30 = v117;
      }
      else
      {
        id v84 = *v31;
        outlined copy of GraphicsImage.Contents(*v31, *(unsigned char *)(a2 + 72));
        *(void *)(a1 + 64) = v84;
        *(unsigned char *)(a1 + 72) = v83;
      }
      *(void *)(a1 + 80) = *(void *)(a2 + 80);
      *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
      *(unsigned char *)(a1 + 104) = *(unsigned char *)(a2 + 104);
      long long v118 = *(_OWORD *)(a2 + 108);
      *(unsigned char *)(a1 + 124) = *(unsigned char *)(a2 + 124);
      *(_OWORD *)(a1 + 108) = v118;
      long long v119 = *(_OWORD *)(a2 + 128);
      long long v120 = *(_OWORD *)(a2 + 144);
      *(unsigned char *)(a1 + 160) = *(unsigned char *)(a2 + 160);
      *(_OWORD *)(a1 + 128) = v119;
      *(_OWORD *)(a1 + 144) = v120;
      *(unsigned char *)(a1 + 161) = *(unsigned char *)(a2 + 161);
      *(unsigned char *)(a1 + 162) = *(unsigned char *)(a2 + 162);
      *(unsigned char *)(a1 + 163) = *(unsigned char *)(a2 + 163);
      unint64_t v121 = *(void *)(a2 + 184);
      if (v121 >> 1 == 0xFFFFFFFF)
      {
        long long v122 = *(_OWORD *)(a2 + 184);
        *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
        *(_OWORD *)(a1 + 184) = v122;
      }
      else
      {
        uint64_t v123 = *(void *)(a2 + 168);
        uint64_t v124 = *(void *)(a2 + 176);
        uint64_t v125 = *(void *)(a2 + 192);
        outlined copy of AccessibilityImageLabel(v123, v124, *(void *)(a2 + 184));
        *(void *)(a1 + 168) = v123;
        *(void *)(a1 + 176) = v124;
        *(void *)(a1 + 184) = v121;
        *(void *)(a1 + 192) = v125;
      }
      *(void *)(a1 + 200) = *(void *)(a2 + 200);
      *(void *)(a1 + 208) = *(void *)(a2 + 208);
      *(unsigned char *)(a1 + 216) = *(unsigned char *)(a2 + 216);
      *(unsigned char *)(a1 + 217) = *(unsigned char *)(a2 + 217);
      int v126 = *(_DWORD *)(a2 + 220);
      *(unsigned char *)(a1 + 224) = *(unsigned char *)(a2 + 224);
      *(_DWORD *)(a1 + 220) = v126;
      long long v127 = *(void **)(a2 + 232);
      *(void *)(a1 + 232) = v127;
      *(_WORD *)(a1 + 240) = *(_WORD *)(a2 + 240);
      *(unsigned char *)(a1 + 242) = *(unsigned char *)(a2 + 242);
      swift_unknownObjectRetain();
      swift_retain();
      id v128 = v127;
      if (*(void *)(a2 + 256)) {
        goto LABEL_14;
      }
    }
    long long v129 = *(_OWORD *)(a2 + 248);
    long long v130 = *(_OWORD *)(a2 + 280);
    *(_OWORD *)(a1 + 264) = *(_OWORD *)(a2 + 264);
    *(_OWORD *)(a1 + 280) = v130;
    *(_OWORD *)(a1 + 248) = v129;
    goto LABEL_63;
  }
  return a1;
}

uint64_t initializeWithTake for DialogActionContext.CancelType(uint64_t a1, uint64_t a2)
{
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    long long v4 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v4;
    *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
    uint64_t v5 = *(void *)(a2 + 48);
    *(void *)(a1 + 40) = *(void *)(a2 + 40);
    *(void *)(a1 + 48) = v5;
    *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
    long long v6 = *(_OWORD *)(a2 + 208);
    *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
    *(_OWORD *)(a1 + 208) = v6;
    *(_OWORD *)(a1 + 224) = *(_OWORD *)(a2 + 224);
    *(_DWORD *)(a1 + 239) = *(_DWORD *)(a2 + 239);
    long long v7 = *(_OWORD *)(a2 + 144);
    *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
    *(_OWORD *)(a1 + 144) = v7;
    long long v8 = *(_OWORD *)(a2 + 176);
    *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
    *(_OWORD *)(a1 + 176) = v8;
    long long v9 = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 80) = v9;
    long long v10 = *(_OWORD *)(a2 + 112);
    *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
    *(_OWORD *)(a1 + 112) = v10;
    *(_OWORD *)(a1 + 248) = *(_OWORD *)(a2 + 248);
    long long v11 = *(_OWORD *)(a2 + 280);
    *(_OWORD *)(a1 + 264) = *(_OWORD *)(a2 + 264);
    *(_OWORD *)(a1 + 280) = v11;
    long long v12 = *(_OWORD *)(a2 + 376);
    *(_OWORD *)(a1 + 360) = *(_OWORD *)(a2 + 360);
    *(_OWORD *)(a1 + 376) = v12;
    *(void *)(a1 + 392) = *(void *)(a2 + 392);
    long long v13 = *(_OWORD *)(a2 + 312);
    *(_OWORD *)(a1 + 296) = *(_OWORD *)(a2 + 296);
    *(_OWORD *)(a1 + 312) = v13;
    long long v14 = *(_OWORD *)(a2 + 344);
    *(_OWORD *)(a1 + 328) = *(_OWORD *)(a2 + 328);
    *(_OWORD *)(a1 + 344) = v14;
    long long v15 = *(_OWORD *)(a2 + 448);
    *(_OWORD *)(a1 + 432) = *(_OWORD *)(a2 + 432);
    *(_OWORD *)(a1 + 448) = v15;
    *(unsigned char *)(a1 + 464) = *(unsigned char *)(a2 + 464);
    long long v16 = *(_OWORD *)(a2 + 416);
    *(_OWORD *)(a1 + 400) = *(_OWORD *)(a2 + 400);
    *(_OWORD *)(a1 + 416) = v16;
    *(_OWORD *)(a1 + 472) = *(_OWORD *)(a2 + 472);
    *(_OWORD *)(a1 + 481) = *(_OWORD *)(a2 + 481);
    uint64_t v17 = *(void *)(a2 + 504);
    if (v17)
    {
      uint64_t v18 = *(void *)(a2 + 512);
      *(void *)(a1 + 504) = v17;
      *(void *)(a1 + 512) = v18;
    }
    else
    {
      *(_OWORD *)(a1 + 504) = *(_OWORD *)(a2 + 504);
    }
    *(_WORD *)(a1 + 520) = *(_WORD *)(a2 + 520);
    *(_OWORD *)(a1 + 528) = *(_OWORD *)(a2 + 528);
    *(void *)(a1 + 544) = *(void *)(a2 + 544);
    *(void *)(a1 + 568) = *(void *)(a2 + 568);
    *(_OWORD *)(a1 + 552) = *(_OWORD *)(a2 + 552);
    *(void *)(a1 + 576) = *(void *)(a2 + 576);
    *(_OWORD *)(a1 + 584) = *(_OWORD *)(a2 + 584);
    *(_OWORD *)(a1 + 600) = *(_OWORD *)(a2 + 600);
    *(void *)(a1 + 616) = *(void *)(a2 + 616);
    *(void *)(a1 + 624) = *(void *)(a2 + 624);
    *(unsigned char *)(a1 + 632) = *(unsigned char *)(a2 + 632);
    *(_WORD *)(a1 + 633) = *(_WORD *)(a2 + 633);
    int v22 = (int *)type metadata accessor for PlatformItemList.Item();
    uint64_t v23 = v22[28];
    uint64_t v24 = (unsigned char *)(a1 + v23);
    uint64_t v25 = (unsigned char *)(a2 + v23);
    uint64_t v26 = type metadata accessor for CommandOperation();
    uint64_t v27 = *(void *)(v26 - 8);
    if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v27 + 48))(v25, 1, v26))
    {
      _s7SwiftUI16CommandOperationVSgMaTm_0(0, &lazy cache variable for type metadata for CommandOperation?, (void (*)(uint64_t))type metadata accessor for CommandOperation);
      memcpy(v24, v25, *(void *)(*(void *)(v28 - 8) + 64));
    }
    else
    {
      *uint64_t v24 = *v25;
      uint64_t v44 = *(int *)(v26 + 20);
      id v45 = &v24[v44];
      int v46 = &v25[v44];
      long long v47 = *(_OWORD *)&v25[v44 + 16];
      *id v45 = *(_OWORD *)&v25[v44];
      v45[1] = v47;
      uint64_t v48 = *(int *)(type metadata accessor for CommandGroupPlacement(0) + 20);
      long long v49 = (char *)v45 + v48;
      long long v50 = &v46[v48];
      uint64_t v51 = type metadata accessor for UUID();
      (*(void (**)(char *, unsigned char *, uint64_t))(*(void *)(v51 - 8) + 32))(v49, v50, v51);
      uint64_t v52 = *(int *)(v26 + 24);
      uint64_t v53 = &v24[v52];
      uint64_t v54 = (uint64_t *)&v25[v52];
      uint64_t v55 = *v54;
      if (*v54)
      {
        uint64_t v56 = v54[1];
        void *v53 = v55;
        v53[1] = v56;
      }
      else
      {
        *(_OWORD *)uint64_t v53 = *(_OWORD *)v54;
      }
      (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v27 + 56))(v24, 0, 1, v26);
    }
    *(unsigned char *)(a1 + v22[29]) = *(unsigned char *)(a2 + v22[29]);
    *(unsigned char *)(a1 + v22[30]) = *(unsigned char *)(a2 + v22[30]);
    *(unsigned char *)(a1 + v22[31]) = *(unsigned char *)(a2 + v22[31]);
    *(unsigned char *)(a1 + v22[32]) = *(unsigned char *)(a2 + v22[32]);
    *(void *)(a1 + v22[33]) = *(void *)(a2 + v22[33]);
  }
  else
  {
    long long v19 = (int *)type metadata accessor for PlatformItemList.Item();
    uint64_t v20 = *((void *)v19 - 1);
    if ((*(unsigned int (**)(uint64_t, uint64_t, int *))(v20 + 48))(a2, 1, v19))
    {
      _s7SwiftUI16CommandOperationVSgMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for PlatformItemList.Item?, (void (*)(uint64_t))type metadata accessor for PlatformItemList.Item);
      memcpy((void *)a1, (const void *)a2, *(void *)(*(void *)(v21 - 8) + 64));
    }
    else
    {
      long long v29 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v29;
      *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
      uint64_t v30 = *(void *)(a2 + 48);
      *(void *)(a1 + 40) = *(void *)(a2 + 40);
      *(void *)(a1 + 48) = v30;
      *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
      long long v31 = *(_OWORD *)(a2 + 208);
      *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
      *(_OWORD *)(a1 + 208) = v31;
      *(_OWORD *)(a1 + 224) = *(_OWORD *)(a2 + 224);
      *(_DWORD *)(a1 + 239) = *(_DWORD *)(a2 + 239);
      long long v32 = *(_OWORD *)(a2 + 144);
      *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
      *(_OWORD *)(a1 + 144) = v32;
      long long v33 = *(_OWORD *)(a2 + 176);
      *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
      *(_OWORD *)(a1 + 176) = v33;
      long long v34 = *(_OWORD *)(a2 + 80);
      *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
      *(_OWORD *)(a1 + 80) = v34;
      long long v35 = *(_OWORD *)(a2 + 112);
      *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
      *(_OWORD *)(a1 + 112) = v35;
      *(_OWORD *)(a1 + 248) = *(_OWORD *)(a2 + 248);
      long long v36 = *(_OWORD *)(a2 + 280);
      *(_OWORD *)(a1 + 264) = *(_OWORD *)(a2 + 264);
      *(_OWORD *)(a1 + 280) = v36;
      long long v37 = *(_OWORD *)(a2 + 376);
      *(_OWORD *)(a1 + 360) = *(_OWORD *)(a2 + 360);
      *(_OWORD *)(a1 + 376) = v37;
      *(void *)(a1 + 392) = *(void *)(a2 + 392);
      long long v38 = *(_OWORD *)(a2 + 312);
      *(_OWORD *)(a1 + 296) = *(_OWORD *)(a2 + 296);
      *(_OWORD *)(a1 + 312) = v38;
      long long v39 = *(_OWORD *)(a2 + 344);
      *(_OWORD *)(a1 + 328) = *(_OWORD *)(a2 + 328);
      *(_OWORD *)(a1 + 344) = v39;
      long long v40 = *(_OWORD *)(a2 + 448);
      *(_OWORD *)(a1 + 432) = *(_OWORD *)(a2 + 432);
      *(_OWORD *)(a1 + 448) = v40;
      *(unsigned char *)(a1 + 464) = *(unsigned char *)(a2 + 464);
      long long v41 = *(_OWORD *)(a2 + 416);
      *(_OWORD *)(a1 + 400) = *(_OWORD *)(a2 + 400);
      *(_OWORD *)(a1 + 416) = v41;
      *(_OWORD *)(a1 + 472) = *(_OWORD *)(a2 + 472);
      *(_OWORD *)(a1 + 481) = *(_OWORD *)(a2 + 481);
      uint64_t v42 = *(void *)(a2 + 504);
      if (v42)
      {
        uint64_t v43 = *(void *)(a2 + 512);
        *(void *)(a1 + 504) = v42;
        *(void *)(a1 + 512) = v43;
      }
      else
      {
        *(_OWORD *)(a1 + 504) = *(_OWORD *)(a2 + 504);
      }
      *(_WORD *)(a1 + 520) = *(_WORD *)(a2 + 520);
      *(_OWORD *)(a1 + 528) = *(_OWORD *)(a2 + 528);
      *(void *)(a1 + 544) = *(void *)(a2 + 544);
      *(void *)(a1 + 568) = *(void *)(a2 + 568);
      *(_OWORD *)(a1 + 552) = *(_OWORD *)(a2 + 552);
      *(void *)(a1 + 576) = *(void *)(a2 + 576);
      *(_OWORD *)(a1 + 584) = *(_OWORD *)(a2 + 584);
      *(_OWORD *)(a1 + 600) = *(_OWORD *)(a2 + 600);
      *(void *)(a1 + 616) = *(void *)(a2 + 616);
      *(void *)(a1 + 624) = *(void *)(a2 + 624);
      *(unsigned char *)(a1 + 632) = *(unsigned char *)(a2 + 632);
      *(_WORD *)(a1 + 633) = *(_WORD *)(a2 + 633);
      uint64_t v57 = v19[28];
      id v58 = (unsigned char *)(a1 + v57);
      long long v59 = (unsigned char *)(a2 + v57);
      uint64_t v60 = type metadata accessor for CommandOperation();
      uint64_t v61 = *(void *)(v60 - 8);
      if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v61 + 48))(v59, 1, v60))
      {
        _s7SwiftUI16CommandOperationVSgMaTm_0(0, &lazy cache variable for type metadata for CommandOperation?, (void (*)(uint64_t))type metadata accessor for CommandOperation);
        memcpy(v58, v59, *(void *)(*(void *)(v62 - 8) + 64));
      }
      else
      {
        uint64_t v77 = v20;
        unsigned char *v58 = *v59;
        uint64_t v63 = *(int *)(v60 + 20);
        long long v64 = &v58[v63];
        long long v65 = &v59[v63];
        long long v66 = *(_OWORD *)&v59[v63 + 16];
        *long long v64 = *(_OWORD *)&v59[v63];
        v64[1] = v66;
        uint64_t v67 = *(int *)(type metadata accessor for CommandGroupPlacement(0) + 20);
        uint64_t v68 = (char *)v64 + v67;
        uint64_t v69 = &v65[v67];
        uint64_t v70 = type metadata accessor for UUID();
        (*(void (**)(char *, unsigned char *, uint64_t))(*(void *)(v70 - 8) + 32))(v68, v69, v70);
        uint64_t v71 = *(int *)(v60 + 24);
        uint64_t v72 = &v58[v71];
        uint64_t v73 = (uint64_t *)&v59[v71];
        uint64_t v74 = *v73;
        if (*v73)
        {
          uint64_t v75 = v73[1];
          *uint64_t v72 = v74;
          v72[1] = v75;
        }
        else
        {
          *(_OWORD *)uint64_t v72 = *(_OWORD *)v73;
        }
        uint64_t v20 = v77;
        (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v61 + 56))(v58, 0, 1, v60);
      }
      *(unsigned char *)(a1 + v19[29]) = *(unsigned char *)(a2 + v19[29]);
      *(unsigned char *)(a1 + v19[30]) = *(unsigned char *)(a2 + v19[30]);
      *(unsigned char *)(a1 + v19[31]) = *(unsigned char *)(a2 + v19[31]);
      *(unsigned char *)(a1 + v19[32]) = *(unsigned char *)(a2 + v19[32]);
      *(void *)(a1 + v19[33]) = *(void *)(a2 + v19[33]);
      (*(void (**)(uint64_t, void, uint64_t, int *))(v20 + 56))(a1, 0, 1, v19);
    }
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t assignWithTake for DialogActionContext.CancelType(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    outlined destroy of DialogActionContext.CancelType(a1, type metadata accessor for DialogActionContext.CancelType);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      long long v4 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v4;
      *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
      uint64_t v5 = *(void *)(a2 + 48);
      *(void *)(a1 + 40) = *(void *)(a2 + 40);
      *(void *)(a1 + 48) = v5;
      *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
      long long v6 = *(_OWORD *)(a2 + 208);
      *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
      *(_OWORD *)(a1 + 208) = v6;
      *(_OWORD *)(a1 + 224) = *(_OWORD *)(a2 + 224);
      *(_DWORD *)(a1 + 239) = *(_DWORD *)(a2 + 239);
      long long v7 = *(_OWORD *)(a2 + 144);
      *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
      *(_OWORD *)(a1 + 144) = v7;
      long long v8 = *(_OWORD *)(a2 + 176);
      *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
      *(_OWORD *)(a1 + 176) = v8;
      long long v9 = *(_OWORD *)(a2 + 80);
      *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
      *(_OWORD *)(a1 + 80) = v9;
      long long v10 = *(_OWORD *)(a2 + 112);
      *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
      *(_OWORD *)(a1 + 112) = v10;
      *(_OWORD *)(a1 + 248) = *(_OWORD *)(a2 + 248);
      long long v11 = *(_OWORD *)(a2 + 280);
      *(_OWORD *)(a1 + 264) = *(_OWORD *)(a2 + 264);
      *(_OWORD *)(a1 + 280) = v11;
      long long v12 = *(_OWORD *)(a2 + 376);
      *(_OWORD *)(a1 + 360) = *(_OWORD *)(a2 + 360);
      *(_OWORD *)(a1 + 376) = v12;
      *(void *)(a1 + 392) = *(void *)(a2 + 392);
      long long v13 = *(_OWORD *)(a2 + 312);
      *(_OWORD *)(a1 + 296) = *(_OWORD *)(a2 + 296);
      *(_OWORD *)(a1 + 312) = v13;
      long long v14 = *(_OWORD *)(a2 + 344);
      *(_OWORD *)(a1 + 328) = *(_OWORD *)(a2 + 328);
      *(_OWORD *)(a1 + 344) = v14;
      long long v15 = *(_OWORD *)(a2 + 448);
      *(_OWORD *)(a1 + 432) = *(_OWORD *)(a2 + 432);
      *(_OWORD *)(a1 + 448) = v15;
      *(unsigned char *)(a1 + 464) = *(unsigned char *)(a2 + 464);
      long long v16 = *(_OWORD *)(a2 + 416);
      *(_OWORD *)(a1 + 400) = *(_OWORD *)(a2 + 400);
      *(_OWORD *)(a1 + 416) = v16;
      *(_OWORD *)(a1 + 472) = *(_OWORD *)(a2 + 472);
      *(_OWORD *)(a1 + 481) = *(_OWORD *)(a2 + 481);
      uint64_t v17 = *(void *)(a2 + 504);
      if (v17)
      {
        uint64_t v18 = *(void *)(a2 + 512);
        *(void *)(a1 + 504) = v17;
        *(void *)(a1 + 512) = v18;
      }
      else
      {
        *(_OWORD *)(a1 + 504) = *(_OWORD *)(a2 + 504);
      }
      *(_WORD *)(a1 + 520) = *(_WORD *)(a2 + 520);
      *(_OWORD *)(a1 + 528) = *(_OWORD *)(a2 + 528);
      *(void *)(a1 + 544) = *(void *)(a2 + 544);
      *(void *)(a1 + 568) = *(void *)(a2 + 568);
      *(_OWORD *)(a1 + 552) = *(_OWORD *)(a2 + 552);
      *(void *)(a1 + 576) = *(void *)(a2 + 576);
      *(_OWORD *)(a1 + 584) = *(_OWORD *)(a2 + 584);
      *(_OWORD *)(a1 + 600) = *(_OWORD *)(a2 + 600);
      *(void *)(a1 + 616) = *(void *)(a2 + 616);
      *(void *)(a1 + 624) = *(void *)(a2 + 624);
      *(unsigned char *)(a1 + 632) = *(unsigned char *)(a2 + 632);
      *(_WORD *)(a1 + 633) = *(_WORD *)(a2 + 633);
      int v22 = (int *)type metadata accessor for PlatformItemList.Item();
      uint64_t v23 = v22[28];
      uint64_t v24 = (unsigned char *)(a1 + v23);
      uint64_t v25 = (unsigned char *)(a2 + v23);
      uint64_t v26 = type metadata accessor for CommandOperation();
      uint64_t v27 = *(void *)(v26 - 8);
      if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v27 + 48))(v25, 1, v26))
      {
        _s7SwiftUI16CommandOperationVSgMaTm_0(0, &lazy cache variable for type metadata for CommandOperation?, (void (*)(uint64_t))type metadata accessor for CommandOperation);
        memcpy(v24, v25, *(void *)(*(void *)(v28 - 8) + 64));
      }
      else
      {
        *uint64_t v24 = *v25;
        uint64_t v44 = *(int *)(v26 + 20);
        id v45 = &v24[v44];
        int v46 = &v25[v44];
        long long v47 = *(_OWORD *)&v25[v44 + 16];
        *id v45 = *(_OWORD *)&v25[v44];
        v45[1] = v47;
        uint64_t v48 = *(int *)(type metadata accessor for CommandGroupPlacement(0) + 20);
        long long v49 = (char *)v45 + v48;
        long long v50 = &v46[v48];
        uint64_t v51 = type metadata accessor for UUID();
        (*(void (**)(char *, unsigned char *, uint64_t))(*(void *)(v51 - 8) + 32))(v49, v50, v51);
        uint64_t v52 = *(int *)(v26 + 24);
        uint64_t v53 = &v24[v52];
        uint64_t v54 = (uint64_t *)&v25[v52];
        uint64_t v55 = *v54;
        if (*v54)
        {
          uint64_t v56 = v54[1];
          void *v53 = v55;
          v53[1] = v56;
        }
        else
        {
          *(_OWORD *)uint64_t v53 = *(_OWORD *)v54;
        }
        (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v27 + 56))(v24, 0, 1, v26);
      }
      *(unsigned char *)(a1 + v22[29]) = *(unsigned char *)(a2 + v22[29]);
      *(unsigned char *)(a1 + v22[30]) = *(unsigned char *)(a2 + v22[30]);
      *(unsigned char *)(a1 + v22[31]) = *(unsigned char *)(a2 + v22[31]);
      *(unsigned char *)(a1 + v22[32]) = *(unsigned char *)(a2 + v22[32]);
      *(void *)(a1 + v22[33]) = *(void *)(a2 + v22[33]);
    }
    else
    {
      long long v19 = (int *)type metadata accessor for PlatformItemList.Item();
      uint64_t v20 = *((void *)v19 - 1);
      if ((*(unsigned int (**)(uint64_t, uint64_t, int *))(v20 + 48))(a2, 1, v19))
      {
        _s7SwiftUI16CommandOperationVSgMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for PlatformItemList.Item?, (void (*)(uint64_t))type metadata accessor for PlatformItemList.Item);
        memcpy((void *)a1, (const void *)a2, *(void *)(*(void *)(v21 - 8) + 64));
      }
      else
      {
        long long v29 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + 16) = v29;
        *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
        uint64_t v30 = *(void *)(a2 + 48);
        *(void *)(a1 + 40) = *(void *)(a2 + 40);
        *(void *)(a1 + 48) = v30;
        *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
        long long v31 = *(_OWORD *)(a2 + 208);
        *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
        *(_OWORD *)(a1 + 208) = v31;
        *(_OWORD *)(a1 + 224) = *(_OWORD *)(a2 + 224);
        *(_DWORD *)(a1 + 239) = *(_DWORD *)(a2 + 239);
        long long v32 = *(_OWORD *)(a2 + 144);
        *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
        *(_OWORD *)(a1 + 144) = v32;
        long long v33 = *(_OWORD *)(a2 + 176);
        *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
        *(_OWORD *)(a1 + 176) = v33;
        long long v34 = *(_OWORD *)(a2 + 80);
        *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
        *(_OWORD *)(a1 + 80) = v34;
        long long v35 = *(_OWORD *)(a2 + 112);
        *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
        *(_OWORD *)(a1 + 112) = v35;
        *(_OWORD *)(a1 + 248) = *(_OWORD *)(a2 + 248);
        long long v36 = *(_OWORD *)(a2 + 280);
        *(_OWORD *)(a1 + 264) = *(_OWORD *)(a2 + 264);
        *(_OWORD *)(a1 + 280) = v36;
        long long v37 = *(_OWORD *)(a2 + 376);
        *(_OWORD *)(a1 + 360) = *(_OWORD *)(a2 + 360);
        *(_OWORD *)(a1 + 376) = v37;
        *(void *)(a1 + 392) = *(void *)(a2 + 392);
        long long v38 = *(_OWORD *)(a2 + 312);
        *(_OWORD *)(a1 + 296) = *(_OWORD *)(a2 + 296);
        *(_OWORD *)(a1 + 312) = v38;
        long long v39 = *(_OWORD *)(a2 + 344);
        *(_OWORD *)(a1 + 328) = *(_OWORD *)(a2 + 328);
        *(_OWORD *)(a1 + 344) = v39;
        long long v40 = *(_OWORD *)(a2 + 448);
        *(_OWORD *)(a1 + 432) = *(_OWORD *)(a2 + 432);
        *(_OWORD *)(a1 + 448) = v40;
        *(unsigned char *)(a1 + 464) = *(unsigned char *)(a2 + 464);
        long long v41 = *(_OWORD *)(a2 + 416);
        *(_OWORD *)(a1 + 400) = *(_OWORD *)(a2 + 400);
        *(_OWORD *)(a1 + 416) = v41;
        *(_OWORD *)(a1 + 472) = *(_OWORD *)(a2 + 472);
        *(_OWORD *)(a1 + 481) = *(_OWORD *)(a2 + 481);
        uint64_t v42 = *(void *)(a2 + 504);
        if (v42)
        {
          uint64_t v43 = *(void *)(a2 + 512);
          *(void *)(a1 + 504) = v42;
          *(void *)(a1 + 512) = v43;
        }
        else
        {
          *(_OWORD *)(a1 + 504) = *(_OWORD *)(a2 + 504);
        }
        *(_WORD *)(a1 + 520) = *(_WORD *)(a2 + 520);
        *(_OWORD *)(a1 + 528) = *(_OWORD *)(a2 + 528);
        *(void *)(a1 + 544) = *(void *)(a2 + 544);
        *(void *)(a1 + 568) = *(void *)(a2 + 568);
        *(_OWORD *)(a1 + 552) = *(_OWORD *)(a2 + 552);
        *(void *)(a1 + 576) = *(void *)(a2 + 576);
        *(_OWORD *)(a1 + 584) = *(_OWORD *)(a2 + 584);
        *(_OWORD *)(a1 + 600) = *(_OWORD *)(a2 + 600);
        *(void *)(a1 + 616) = *(void *)(a2 + 616);
        *(void *)(a1 + 624) = *(void *)(a2 + 624);
        *(unsigned char *)(a1 + 632) = *(unsigned char *)(a2 + 632);
        *(_WORD *)(a1 + 633) = *(_WORD *)(a2 + 633);
        uint64_t v57 = v19[28];
        id v58 = (unsigned char *)(a1 + v57);
        long long v59 = (unsigned char *)(a2 + v57);
        uint64_t v60 = type metadata accessor for CommandOperation();
        uint64_t v61 = *(void *)(v60 - 8);
        if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v61 + 48))(v59, 1, v60))
        {
          _s7SwiftUI16CommandOperationVSgMaTm_0(0, &lazy cache variable for type metadata for CommandOperation?, (void (*)(uint64_t))type metadata accessor for CommandOperation);
          memcpy(v58, v59, *(void *)(*(void *)(v62 - 8) + 64));
        }
        else
        {
          uint64_t v77 = v20;
          unsigned char *v58 = *v59;
          uint64_t v63 = *(int *)(v60 + 20);
          long long v64 = &v58[v63];
          long long v65 = &v59[v63];
          long long v66 = *(_OWORD *)&v59[v63 + 16];
          *long long v64 = *(_OWORD *)&v59[v63];
          v64[1] = v66;
          uint64_t v67 = *(int *)(type metadata accessor for CommandGroupPlacement(0) + 20);
          uint64_t v68 = (char *)v64 + v67;
          uint64_t v69 = &v65[v67];
          uint64_t v70 = type metadata accessor for UUID();
          (*(void (**)(char *, unsigned char *, uint64_t))(*(void *)(v70 - 8) + 32))(v68, v69, v70);
          uint64_t v71 = *(int *)(v60 + 24);
          uint64_t v72 = &v58[v71];
          uint64_t v73 = (uint64_t *)&v59[v71];
          uint64_t v74 = *v73;
          if (*v73)
          {
            uint64_t v75 = v73[1];
            *uint64_t v72 = v74;
            v72[1] = v75;
          }
          else
          {
            *(_OWORD *)uint64_t v72 = *(_OWORD *)v73;
          }
          uint64_t v20 = v77;
          (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v61 + 56))(v58, 0, 1, v60);
        }
        *(unsigned char *)(a1 + v19[29]) = *(unsigned char *)(a2 + v19[29]);
        *(unsigned char *)(a1 + v19[30]) = *(unsigned char *)(a2 + v19[30]);
        *(unsigned char *)(a1 + v19[31]) = *(unsigned char *)(a2 + v19[31]);
        *(unsigned char *)(a1 + v19[32]) = *(unsigned char *)(a2 + v19[32]);
        *(void *)(a1 + v19[33]) = *(void *)(a2 + v19[33]);
        (*(void (**)(uint64_t, void, uint64_t, int *))(v20 + 56))(a1, 0, 1, v19);
      }
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t DialogActionContext.init(visiting:presentationType:environment:actionDelegate:)@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  uint64_t v166 = a4;
  _s7SwiftUI16CommandOperationVSgMaTm_0(0, &lazy cache variable for type metadata for DialogActionContext.CancelType?, (void (*)(uint64_t))type metadata accessor for DialogActionContext.CancelType);
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v155 = (uint64_t)&v145 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v11);
  uint64_t v187 = (uint64_t)&v145 - v12;
  uint64_t v159 = type metadata accessor for PlatformItemList.Item();
  uint64_t v165 = *(void *)(v159 - 8);
  MEMORY[0x1F4188790](v159);
  uint64_t v148 = (uint64_t)&v145 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  uint64_t v146 = (uint64_t)&v145 - v15;
  MEMORY[0x1F4188790](v16);
  uint64_t v147 = (uint64_t)&v145 - v17;
  MEMORY[0x1F4188790](v18);
  uint64_t v183 = (uint64_t)&v145 - v19;
  MEMORY[0x1F4188790](v20);
  uint64_t v195 = (uint64_t)&v145 - v21;
  MEMORY[0x1F4188790](v22);
  uint64_t v197 = (uint64_t)&v145 - v23;
  type metadata accessor for (offset: Int, element: PlatformItemList.Item)();
  uint64_t v25 = v24;
  uint64_t v26 = *(void *)(v24 - 8);
  MEMORY[0x1F4188790](v24);
  long long v164 = (char *)&v145 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  _s7SwiftUI16CommandOperationVSgMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for (offset: Int, element: PlatformItemList.Item)?, (void (*)(uint64_t))type metadata accessor for (offset: Int, element: PlatformItemList.Item));
  MEMORY[0x1F4188790](v28 - 8);
  uint64_t v194 = (char *)&v145 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v30);
  uint64_t v191 = (uint64_t *)((char *)&v145 - v31);
  _s7SwiftUI16CommandOperationVSgMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for PlatformItemList.Item?, (void (*)(uint64_t))type metadata accessor for PlatformItemList.Item);
  MEMORY[0x1F4188790](v32 - 8);
  uint64_t v152 = (uint64_t)&v145 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v34);
  uint64_t v160 = (uint64_t)&v145 - v35;
  uint64_t v36 = a3[1];
  uint64_t v153 = *a3;
  uint64_t v154 = v36;
  long long v37 = (int *)type metadata accessor for DialogActionContext(0);
  long long v38 = (char *)a5 + v37[6];
  uint64_t v39 = type metadata accessor for DialogActionContext.CancelType(0);
  uint64_t v40 = *(void *)(v39 - 8);
  long long v41 = *(void (**)(char *, void, uint64_t, uint64_t))(v40 + 56);
  uint64_t v193 = v39;
  uint64_t v150 = v41;
  uint64_t v151 = v40 + 56;
  ((void (*)(char *, uint64_t, uint64_t))v41)(v38, 1, 1);
  uint64_t v149 = v37[9];
  *(void *)((char *)a5 + v149) = 0;
  uint64_t v184 = a1;
  *a5 = a1;
  uint64_t v42 = MEMORY[0x1E4FBC860];
  a5[1] = MEMORY[0x1E4FBC860];
  uint64_t v43 = a5 + 1;
  unint64_t v44 = specialized Dictionary.init(dictionaryLiteral:)(v42);
  uint64_t v167 = v37[7];
  *(void *)((char *)a5 + v167) = v44;
  uint64_t v161 = (void *)((char *)a5 + v37[8]);
  *uint64_t v161 = v42;
  int v156 = a2;
  uint64_t v45 = v184;
  swift_bridgeObjectRetain();
  if ((_BYTE)a2)
  {
    int v46 = 1;
  }
  else
  {
    static Semantics.v5.getter();
    int v46 = isLinkedOnOrAfter(_:)() ^ 1;
  }
  int v182 = v46;
  uint64_t v47 = v195;
  uint64_t v180 = a5;
  uint64_t v157 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v165 + 56);
  uint64_t v158 = v165 + 56;
  v157(v160, 1, 1, v159);
  int v188 = 0;
  unint64_t v48 = 0;
  uint64_t v49 = v45;
  unint64_t v50 = *(void *)(v45 + 16);
  uint64_t v189 = (unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v26 + 48);
  uint64_t v190 = (void (**)(unint64_t *, uint64_t, uint64_t, uint64_t))(v26 + 56);
  unint64_t v185 = v50;
  uint64_t v186 = (unsigned char *)(v197 + 521);
  uint64_t v192 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v40 + 48);
  long long v162 = a5 + 1;
  uint64_t v163 = (char *)(v47 + 521);
  uint64_t v51 = v197;
  long long v181 = v38;
  uint64_t v196 = v25;
  while (1)
  {
    uint64_t v52 = (unint64_t *)v194;
    if (v48 == v50)
    {
      uint64_t v53 = 1;
      unint64_t v198 = v50;
    }
    else
    {
      if (v48 >= *(void *)(v49 + 16))
      {
        __break(1u);
LABEL_83:
        __break(1u);
LABEL_84:
        __break(1u);
        goto LABEL_85;
      }
      unint64_t v54 = v48 + 1;
      uint64_t v55 = (uint64_t)&v164[*(int *)(v25 + 48)];
      uint64_t v56 = v38;
      uint64_t v57 = v43;
      unint64_t v58 = v48;
      outlined init with copy of PlatformItemList.Item(v49+ ((*(unsigned __int8 *)(v165 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v165 + 80))+ *(void *)(v165 + 72) * v48, v55);
      uint64_t v59 = (uint64_t)v52 + *(int *)(v25 + 48);
      unint64_t *v52 = v58;
      uint64_t v43 = v57;
      long long v38 = v56;
      _s7SwiftUI16PlatformItemListV0D0VWObTm_0(v55, v59, (uint64_t (*)(void))type metadata accessor for PlatformItemList.Item);
      uint64_t v53 = 0;
      unint64_t v198 = v54;
    }
    (*v190)(v52, v53, 1, v25);
    uint64_t v60 = v191;
    outlined init with take of (offset: Int, element: PlatformItemList.Item)?((uint64_t)v52, (uint64_t)v191);
    if ((*v189)(v60, 1, v25) == 1)
    {
      swift_bridgeObjectRelease();
      if (v156 != 1) {
        goto LABEL_58;
      }
      if (*v43 >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v141 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (v141)
        {
LABEL_58:
          if (!(*v43 >> 62))
          {
            uint64_t v112 = *(void *)((*v43 & 0xFFFFFFFFFFFFFF8) + 0x10);
            goto LABEL_60;
          }
LABEL_85:
          swift_bridgeObjectRetain();
          uint64_t v112 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
LABEL_60:
          uint64_t v113 = v152;
          outlined init with copy of PlatformItemList.Item?(v160, v152, (unint64_t *)&lazy cache variable for type metadata for PlatformItemList.Item?, (void (*)(uint64_t))type metadata accessor for PlatformItemList.Item);
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v165 + 48))(v113, 1, v159) == 1)
          {
            int v114 = v156;
            outlined destroy of PlatformItemList.Item?(v113, (unint64_t *)&lazy cache variable for type metadata for PlatformItemList.Item?, (void (*)(uint64_t))type metadata accessor for PlatformItemList.Item);
            if (v114 != 1 && !v112) {
              goto LABEL_63;
            }
            if (((v114 != 1) & (v188 ^ 1)) == 0)
            {
              if (v112)
              {
                uint64_t v115 = static Text.System.cancel.getter();
                goto LABEL_69;
              }
LABEL_63:
              uint64_t v115 = static Text.System.ok.getter();
LABEL_69:
              uint64_t v123 = v115;
              uint64_t v124 = v116;
              LODWORD(v198) = v112 == 0;
              BOOL v125 = v112 != 0;
              v204[0] = v153;
              v204[1] = v154;
              char v126 = v117 & 1;
              v203[1] = 0;
              v203[0] = 0;
              *(void *)&v201[0] = 0;
              uint64_t v127 = Text.resolveString(in:with:idiom:)();
              uint64_t v129 = v128;
              swift_release();
              swift_release();
              id v130 = objc_allocWithZone(MEMORY[0x1E4F28B18]);
              unint64_t v131 = (void *)MEMORY[0x18C115780](v127, v129);
              swift_bridgeObjectRelease();
              id v132 = objc_msgSend(v130, sel_initWithString_, v131);

              _s7SwiftUI5ImageVAAE8ResolvedVSgWOi0_((uint64_t)v204);
              _s7SwiftUI16PlatformItemListV0D0VWObTm_0((uint64_t)v204, (uint64_t)v203, (uint64_t (*)(void))type metadata accessor for Image.Resolved?);
              *(void *)&v201[0] = 1;
              *((void *)&v201[0] + 1) = destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
              memset(&v201[1], 0, 48);
              char v202 = 0;
              __n128 v199 = 0uLL;
              uint64_t v200 = 0;
              uint64_t v133 = v146;
              PlatformItemList.Item.init(text:image:selectionBehavior:accessibility:tint:imageColorResolver:)((uint64_t)v132, (uint64_t)v203, v201, &v199, 0, 0, v146);
              outlined consume of Text.Storage(v123, v124, v126);
              swift_bridgeObjectRelease();
              *(unsigned char *)(v133 + 520) = 4 * v125;
              *(unsigned char *)(v133 + 521) = v198;
              long long v38 = v181;
              outlined destroy of PlatformItemList.Item?((uint64_t)v181, &lazy cache variable for type metadata for DialogActionContext.CancelType?, (void (*)(uint64_t))type metadata accessor for DialogActionContext.CancelType);
              _s7SwiftUI16PlatformItemListV0D0VWObTm_0(v133, (uint64_t)v38, (uint64_t (*)(void))type metadata accessor for PlatformItemList.Item);
              uint64_t v120 = v193;
              swift_storeEnumTagMultiPayload();
              v150(v38, 0, 1, v120);
              uint64_t v43 = v162;
              goto LABEL_70;
            }
            swift_release();
            swift_release();
            uint64_t v120 = v193;
            if (v156 == 2)
            {
LABEL_70:
              uint64_t v134 = v155;
              outlined init with copy of PlatformItemList.Item?((uint64_t)v38, v155, &lazy cache variable for type metadata for DialogActionContext.CancelType?, (void (*)(uint64_t))type metadata accessor for DialogActionContext.CancelType);
              if ((*v192)(v134, 1, v120) == 1)
              {
                swift_release();
                outlined destroy of PlatformItemList.Item?(v160, (unint64_t *)&lazy cache variable for type metadata for PlatformItemList.Item?, (void (*)(uint64_t))type metadata accessor for PlatformItemList.Item);
                long long v135 = &lazy cache variable for type metadata for DialogActionContext.CancelType?;
                long long v136 = (void (*)(uint64_t))type metadata accessor for DialogActionContext.CancelType;
                uint64_t v137 = v134;
              }
              else
              {
                if (swift_getEnumCaseMultiPayload() != 1)
                {
                  swift_release();
                  outlined destroy of PlatformItemList.Item?(v160, (unint64_t *)&lazy cache variable for type metadata for PlatformItemList.Item?, (void (*)(uint64_t))type metadata accessor for PlatformItemList.Item);
                  return outlined destroy of DialogActionContext.CancelType(v134, type metadata accessor for DialogActionContext.CancelType);
                }
                _s7SwiftUI16PlatformItemListV0D0VWObTm_0(v134, v148, (uint64_t (*)(void))type metadata accessor for PlatformItemList.Item);
                id v138 = PlatformItemList.Item.alertAction(delegate:)(0);
                if (v138)
                {
                  id v139 = v138;
                  MEMORY[0x18C115B40]();
                  if (*(void *)((*v43 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*v43 & 0xFFFFFFFFFFFFFF8)
                                                                                     + 0x18) >> 1)
                    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
                  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
                  specialized Array._endMutation()();
                }
                swift_release();
                outlined destroy of DialogActionContext.CancelType(v148, (uint64_t (*)(void))type metadata accessor for PlatformItemList.Item);
                long long v135 = (unint64_t *)&lazy cache variable for type metadata for PlatformItemList.Item?;
                long long v136 = (void (*)(uint64_t))type metadata accessor for PlatformItemList.Item;
                uint64_t v137 = v160;
              }
              return outlined destroy of PlatformItemList.Item?(v137, v135, v136);
            }
            outlined destroy of PlatformItemList.Item?((uint64_t)v38, &lazy cache variable for type metadata for DialogActionContext.CancelType?, (void (*)(uint64_t))type metadata accessor for DialogActionContext.CancelType);
            unint64_t v121 = v38;
            uint64_t v122 = 1;
          }
          else
          {
            swift_release();
            swift_release();
            uint64_t v118 = v113;
            uint64_t v119 = v147;
            _s7SwiftUI16PlatformItemListV0D0VWObTm_0(v118, v147, (uint64_t (*)(void))type metadata accessor for PlatformItemList.Item);
            outlined destroy of PlatformItemList.Item?((uint64_t)v38, &lazy cache variable for type metadata for DialogActionContext.CancelType?, (void (*)(uint64_t))type metadata accessor for DialogActionContext.CancelType);
            _s7SwiftUI16PlatformItemListV0D0VWObTm_0(v119, (uint64_t)v38, (uint64_t (*)(void))type metadata accessor for PlatformItemList.Item);
            uint64_t v120 = v193;
            swift_storeEnumTagMultiPayload();
            unint64_t v121 = v38;
            uint64_t v122 = 0;
          }
          v150(v121, v122, 1, v120);
          goto LABEL_70;
        }
      }
      else if (*(void *)((*v43 & 0xFFFFFFFFFFFFFF8) + 0x10))
      {
        goto LABEL_58;
      }
      static os_log_type_t.fault.getter();
      type metadata accessor for OS_os_log();
      uint64_t v111 = (void *)static OS_os_log.default.getter();
      os_log(_:dso:log:_:_:)();

      goto LABEL_58;
    }
    uint64_t v61 = *v60;
    _s7SwiftUI16PlatformItemListV0D0VWObTm_0((uint64_t)v60 + *(int *)(v25 + 48), v51, (uint64_t (*)(void))type metadata accessor for PlatformItemList.Item);
    if ((*v186 & 1) == 0) {
      v188 |= *(unsigned char *)(v51 + 520) == 1;
    }
    uint64_t v62 = v51;
    uint64_t v63 = v187;
    outlined init with copy of PlatformItemList.Item?((uint64_t)v38, v187, &lazy cache variable for type metadata for DialogActionContext.CancelType?, (void (*)(uint64_t))type metadata accessor for DialogActionContext.CancelType);
    unsigned int v64 = (*v192)(v63, 1, v193);
    outlined destroy of PlatformItemList.Item?(v63, &lazy cache variable for type metadata for DialogActionContext.CancelType?, (void (*)(uint64_t))type metadata accessor for DialogActionContext.CancelType);
    uint64_t v65 = v195;
    outlined init with copy of PlatformItemList.Item(v62, v195);
    if (v64 == 1)
    {
      int v66 = *(unsigned __int8 *)(v65 + 520);
      char v67 = *v163;
      outlined destroy of DialogActionContext.CancelType(v65, (uint64_t (*)(void))type metadata accessor for PlatformItemList.Item);
      uint64_t v25 = v196;
      if ((v67 & 1) == 0 && v66 == 4)
      {
        uint64_t v68 = v160;
        outlined destroy of PlatformItemList.Item?(v160, (unint64_t *)&lazy cache variable for type metadata for PlatformItemList.Item?, (void (*)(uint64_t))type metadata accessor for PlatformItemList.Item);
        uint64_t v51 = v197;
        _s7SwiftUI16PlatformItemListV0D0VWObTm_0(v197, v68, (uint64_t (*)(void))type metadata accessor for PlatformItemList.Item);
        v157(v68, 0, 1, v159);
        goto LABEL_7;
      }
    }
    else
    {
      outlined destroy of DialogActionContext.CancelType(v65, (uint64_t (*)(void))type metadata accessor for PlatformItemList.Item);
      uint64_t v25 = v196;
    }
    uint64_t v51 = v197;
    uint64_t v69 = v183;
    outlined init with copy of PlatformItemList.Item(v197, v183);
    if ((v182 & 1) != 0 && *(void *)(v69 + 408) <= 1uLL)
    {
      outlined destroy of DialogActionContext.CancelType(v69, (uint64_t (*)(void))type metadata accessor for PlatformItemList.Item);
      goto LABEL_46;
    }
    outlined destroy of DialogActionContext.CancelType(v69, (uint64_t (*)(void))type metadata accessor for PlatformItemList.Item);
    id v70 = PlatformItemList.Item.alertAction(delegate:)(v166);
    if (v70) {
      break;
    }
LABEL_46:
    unint64_t v92 = *(void *)(v51 + 328);
    if (v92 >> 2 != 0xFFFFFFFF && (v92 & 0xC000000000000000) == 0x4000000000000000)
    {
      uint64_t v93 = *(void **)(v51 + 296);
      uint64_t v94 = *(void *)(v51 + 304);
      uint64_t v95 = *(void *)(v51 + 312);
      uint64_t v96 = *(void *)(v51 + 320);
      uint64_t v97 = *(void *)(v51 + 344);
      uint64_t v170 = *(void *)(v51 + 336);
      id v171 = v93;
      uint64_t v168 = *(void *)(v51 + 352);
      uint64_t v169 = v97;
      uint64_t v98 = (void *)v51;
      uint64_t v99 = *(void *)(v51 + 360);
      uint64_t v100 = v98[46];
      uint64_t v101 = v98[47];
      uint64_t v102 = v98[48];
      uint64_t v103 = v98[49];
      outlined copy of PlatformItemList.Item.SystemItem(v93, v94, v95, v96, v92, v170, v97, v168, v99, v100, v101, v102, v103);
      uint64_t v172 = v103;
      uint64_t v144 = v103;
      uint64_t v173 = v102;
      char v143 = v102;
      uint64_t v174 = v101;
      uint64_t v175 = v100;
      uint64_t v176 = v99;
      uint64_t v142 = v99;
      id v104 = v171;
      uint64_t v178 = v95;
      uint64_t v179 = v94;
      uint64_t v177 = v96;
      uint64_t v105 = v96;
      uint64_t v106 = v169;
      uint64_t v107 = v170;
      char v108 = v168;
      id v109 = outlined copy of PlatformItemList.Item.SystemItem(v171, v94, v95, v105, v92, v170, v169, v168, v142, v100, v101, v143, v144);
      uint64_t v110 = v161;
      MEMORY[0x18C115B40](v109);
      if (*(void *)((*v110 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*v110 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      outlined consume of PlatformItemList.Item.SystemItem?(v104, v179, v178, v177, v92, v107, v106, v108, v176, v175, v174, v173, v172);
      uint64_t v43 = v162;
      long long v38 = v181;
      uint64_t v49 = v184;
      uint64_t v25 = v196;
      uint64_t v51 = v197;
    }
    outlined destroy of DialogActionContext.CancelType(v51, (uint64_t (*)(void))type metadata accessor for PlatformItemList.Item);
LABEL_7:
    unint64_t v50 = v185;
    unint64_t v48 = v198;
  }
  id v71 = v70;
  long long v38 = (char *)v70;
  MEMORY[0x18C115B40]();
  if (*(void *)((*v43 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*v43 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  }
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  uint64_t v72 = v180;
  uint64_t v73 = v167;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v204[0] = *(void *)((char *)v72 + v73);
  uint64_t v75 = v204[0];
  *(void *)((char *)v72 + v73) = 0x8000000000000000;
  unint64_t v77 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v38);
  uint64_t v78 = *(void *)(v75 + 16);
  BOOL v79 = (v76 & 1) == 0;
  uint64_t v80 = v78 + v79;
  if (__OFADD__(v78, v79)) {
    goto LABEL_83;
  }
  char v81 = v76;
  if (*(void *)(v75 + 24) >= v80)
  {
    if (isUniquelyReferenced_nonNull_native)
    {
      id v84 = (void *)v204[0];
      if ((v76 & 1) == 0) {
        goto LABEL_35;
      }
    }
    else
    {
      specialized _NativeDictionary.copy()();
      id v84 = (void *)v204[0];
      if ((v81 & 1) == 0) {
        goto LABEL_35;
      }
    }
    goto LABEL_33;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v80, isUniquelyReferenced_nonNull_native);
  unint64_t v82 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v38);
  if ((v81 & 1) == (v83 & 1))
  {
    unint64_t v77 = v82;
    id v84 = (void *)v204[0];
    if ((v81 & 1) == 0)
    {
LABEL_35:
      v84[(v77 >> 6) + 8] |= 1 << v77;
      uint64_t v85 = 8 * v77;
      *(void *)(v84[6] + v85) = v38;
      *(void *)(v84[7] + v85) = v61;
      uint64_t v86 = v84[2];
      BOOL v87 = __OFADD__(v86, 1);
      uint64_t v88 = v86 + 1;
      if (v87) {
        goto LABEL_84;
      }
      v84[2] = v88;
      goto LABEL_37;
    }
LABEL_33:
    *(void *)(v84[7] + 8 * v77) = v61;
LABEL_37:
    *(void *)((char *)v180 + v167) = v84;
    swift_bridgeObjectRelease();
    uint64_t v51 = v197;
    uint64_t v89 = *(void *)(v197 + 480);
    if (v89)
    {
      uint64_t v90 = *(void *)(v197 + 488);
      int v91 = *(unsigned __int8 *)(v197 + 496);
      if ((*(void *)(v197 + 472) == 13 && v89 == 0xE100000000000000
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        && !v90
        && !v91)
      {
        uint64_t v49 = v184;
        if (*(void *)((char *)v180 + v149)) {

        }
        else {
          *(void *)((char *)v180 + v149) = v71;
        }
        long long v38 = v181;
        goto LABEL_46;
      }
    }
    else
    {

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    long long v38 = v181;
    uint64_t v49 = v184;
    goto LABEL_46;
  }
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

id PlatformItemList.Item.alertAction(delegate:)(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for PlatformItemList.Item();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = *(void *)(v4 + 64);
  MEMORY[0x1F4188790](v3 - 8);
  long long v6 = (char *)aBlock - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v9 = MEMORY[0x1F4188790](v7);
  uint64_t v10 = (char *)aBlock - v8;
  id v11 = 0;
  unint64_t v12 = *(void *)(v1 + 328);
  if (v12 >> 2 != 0xFFFFFFFF && (v12 & 0xC000000000000000) == 0x4000000000000000) {
    return v11;
  }
  if (*(void *)v1)
  {

    outlined init with copy of PlatformItemList.Item(v1, (uint64_t)v10);
    outlined destroy of DialogActionContext.CancelType((uint64_t)v10, (uint64_t (*)(void))type metadata accessor for PlatformItemList.Item);
  }
  else
  {
    outlined init with copy of PlatformItemList.Item(v1, (uint64_t)aBlock - v8);
    int v14 = v10[520];
    char v15 = v10[521];
    outlined destroy of DialogActionContext.CancelType((uint64_t)v10, (uint64_t (*)(void))type metadata accessor for PlatformItemList.Item);
    id v11 = 0;
    if ((v15 & 1) != 0 || v14 != 4) {
      return v11;
    }
  }
  if (a1)
  {
    uint64_t v16 = swift_allocObject();
    swift_weakInit();
    uint64_t v17 = partial apply for closure #1 in PlatformItemList.Item.alertAction(delegate:);
  }
  else
  {
    outlined init with copy of PlatformItemList.Item(v1, (uint64_t)v6);
    unint64_t v18 = (*(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
    uint64_t v16 = swift_allocObject();
    _s7SwiftUI16PlatformItemListV0D0VWObTm_0((uint64_t)v6, v16 + v18, (uint64_t (*)(void))type metadata accessor for PlatformItemList.Item);
    uint64_t v17 = partial apply for closure #2 in PlatformItemList.Item.alertAction(delegate:);
  }
  uint64_t v19 = v17;
  if ((*(unsigned char *)(v1 + 521) & 1) == 0)
  {
    int v27 = *(unsigned __int8 *)(v1 + 520);
    if (v27 == 4) {
      uint64_t v20 = 1;
    }
    else {
      uint64_t v20 = 2 * (v27 == 1);
    }
    id v21 = *(id *)v1;
    if (*(void *)v1) {
      goto LABEL_14;
    }
LABEL_19:
    swift_retain();
    uint64_t v26 = 0;
    goto LABEL_20;
  }
  uint64_t v20 = 0;
  id v21 = *(id *)v1;
  if (!*(void *)v1) {
    goto LABEL_19;
  }
LABEL_14:
  id v22 = objc_msgSend(v21, sel_string);
  uint64_t v23 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v25 = v24;

  swift_retain();
  uint64_t v26 = (void *)MEMORY[0x18C115780](v23, v25);
  swift_bridgeObjectRelease();
LABEL_20:
  aBlock[4] = v19;
  aBlock[5] = v16;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable (@guaranteed NSTimer) -> ();
  aBlock[3] = &block_descriptor_28;
  uint64_t v28 = _Block_copy(aBlock);
  swift_release();
  id v29 = objc_msgSend(self, sel_actionWithTitle_style_handler_, v26, v20, v28);
  _Block_release(v28);

  uint64_t v30 = *(void *)(v1 + 408);
  if (v30)
  {
    if (v30 == 1) {
      uint64_t v31 = *(void *)(v1 + 616) != 0;
    }
    else {
      uint64_t v31 = *(unsigned __int8 *)(v1 + 56);
    }
  }
  else
  {
    uint64_t v31 = 0;
  }
  objc_msgSend(v29, sel_setEnabled_, v31);
  id v11 = v29;
  specialized PlatformItemList.Item.applyAccessibilityProperties(to:)(v11, v1);

  swift_release();
  return v11;
}

uint64_t closure #1 in PlatformItemList.Item.alertAction(delegate:)(uint64_t a1)
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    (*(void (**)(uint64_t))(*(void *)result + 80))(a1);
    return swift_release();
  }
  return result;
}

void closure #2 in PlatformItemList.Item.alertAction(delegate:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void (**)(uint64_t))(a2 + 408);
  if ((unint64_t)v2 >= 2)
  {
    uint64_t v3 = swift_retain();
    v2(v3);
    outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?((uint64_t)v2);
  }
}

void type metadata accessor for (offset: Int, element: PlatformItemList.Item)()
{
  if (!lazy cache variable for type metadata for (offset: Int, element: PlatformItemList.Item))
  {
    type metadata accessor for PlatformItemList.Item();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (offset: Int, element: PlatformItemList.Item));
    }
  }
}

uint64_t outlined init with take of (offset: Int, element: PlatformItemList.Item)?(uint64_t a1, uint64_t a2)
{
  _s7SwiftUI16CommandOperationVSgMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for (offset: Int, element: PlatformItemList.Item)?, (void (*)(uint64_t))type metadata accessor for (offset: Int, element: PlatformItemList.Item));
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of DialogActionContext.CancelType(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

void type metadata accessor for Image.Resolved?()
{
  if (!lazy cache variable for type metadata for Image.Resolved?)
  {
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Image.Resolved?);
    }
  }
}

unint64_t type metadata accessor for OS_os_log()
{
  unint64_t result = lazy cache variable for type metadata for OS_os_log;
  if (!lazy cache variable for type metadata for OS_os_log)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for OS_os_log);
  }
  return result;
}

uint64_t sub_187BC3F80()
{
  uint64_t v1 = type metadata accessor for PlatformItemList.Item();
  uint64_t v2 = v0
     + ((*(unsigned __int8 *)(*(void *)(v1 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v1 - 8) + 80));

  swift_bridgeObjectRelease();
  swift_release();
  uint64_t v3 = *(void *)(v2 + 184);
  unint64_t v4 = v3 & 0xFFFFFFFFFFFFFFFELL;
  if ((v3 & 0xFFFFFFFFFFFFFFFELL) != 0x1FFFFFFFCLL)
  {
    int v5 = *(unsigned __int8 *)(v2 + 72);
    if (v5 != 255)
    {
      outlined consume of GraphicsImage.Contents(*(void **)(v2 + 64), v5);
      uint64_t v3 = *(void *)(v2 + 184);
      unint64_t v4 = v3 & 0xFFFFFFFFFFFFFFFELL;
    }
    if (v4 != 0x1FFFFFFFELL) {
      outlined consume of AccessibilityImageLabel(*(void *)(v2 + 168), *(void *)(v2 + 176), v3);
    }
    swift_unknownObjectRelease();
    swift_release();
  }
  if (*(void *)(v2 + 256))
  {
    swift_bridgeObjectRelease();
    long long v6 = *(void **)(v2 + 264);
    if ((unint64_t)v6 >= 2) {

    }
    swift_release();
    swift_release();
  }
  unint64_t v7 = *(void *)(v2 + 328);
  if (v7 >> 2 != 0xFFFFFFFF) {
    outlined consume of PlatformItemList.Item.SystemItem(*(void **)(v2 + 296), *(void *)(v2 + 304), *(void *)(v2 + 312), *(void *)(v2 + 320), v7, *(void *)(v2 + 336), *(void *)(v2 + 344), *(void *)(v2 + 352), *(void *)(v2 + 360), *(void *)(v2 + 368), *(void *)(v2 + 376), *(void *)(v2 + 384), *(void *)(v2 + 392));
  }
  uint64_t v8 = *(void *)(v2 + 408);
  if (v8)
  {
    if (v8 == 1) {
      goto LABEL_20;
    }
    swift_release();
  }
  if (*(void *)(v2 + 424)) {
    swift_release();
  }
  if (*(void *)(v2 + 440)) {
    swift_release();
  }
LABEL_20:
  swift_bridgeObjectRelease();
  if (*(void *)(v2 + 504)) {
    swift_release();
  }
  if (*(void *)(v2 + 528))
  {
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
  }
  if (*(void *)(v2 + 552) != 1)
  {
    swift_release();
    if (*(void *)(v2 + 560)) {
      swift_release();
    }
  }

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v9 = v2 + *(int *)(v1 + 112);
  uint64_t v10 = type metadata accessor for CommandOperation();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 48))(v9, 1, v10))
  {
    uint64_t v11 = v9 + *(int *)(v10 + 20);
    outlined consume of Text.Storage(*(void *)v11, *(void *)(v11 + 8), *(unsigned char *)(v11 + 16));
    swift_bridgeObjectRelease();
    uint64_t v12 = v11 + *(int *)(type metadata accessor for CommandGroupPlacement(0) + 20);
    uint64_t v13 = type metadata accessor for UUID();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v13 - 8) + 8))(v12, v13);
    if (*(void *)(v9 + *(int *)(v10 + 24))) {
      swift_release();
    }
  }
  swift_release();

  return swift_deallocObject();
}

void partial apply for closure #2 in PlatformItemList.Item.alertAction(delegate:)(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for PlatformItemList.Item() - 8);
  uint64_t v4 = v1 + ((*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));

  closure #2 in PlatformItemList.Item.alertAction(delegate:)(a1, v4);
}

uint64_t sub_187BC4324()
{
  swift_weakDestroy();

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in PlatformItemList.Item.alertAction(delegate:)(uint64_t a1)
{
  return closure #1 in PlatformItemList.Item.alertAction(delegate:)(a1);
}

uint64_t associated type witness table accessor for TokenFieldStyle.Body : View in SearchFieldConfigurationTokenFieldStyle()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t SearchFieldConfigurationTokenFieldStyle.makeBody(configuration:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for TokenFieldConfiguration(0);
  MEMORY[0x1F4188790](v4 - 8);
  long long v6 = (char *)&v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for SearchFieldConfigurationTokenFieldStyle.BodyView<ForEach<Binding<[AnyToken]>, AnyHashable, ModifiedContent<MergePlatformItemsView<AnyView>, _PreferenceTransformModifier<PlatformItemList.Key>>>>();
  uint64_t v8 = v7 - 8;
  MEMORY[0x1F4188790](v7);
  uint64_t v10 = (char *)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v11);
  uint64_t v13 = (char *)&v23 - v12;
  type metadata accessor for ModifiedContent<SearchFieldConfigurationTokenFieldStyle.BodyView<ForEach<Binding<[AnyToken]>, AnyHashable, ModifiedContent<MergePlatformItemsView<AnyView>, _PreferenceTransformModifier<PlatformItemList.Key>>>>, PickerStyleWriter<SectionPickerStyle>>();
  MEMORY[0x1F4188790](v14 - 8);
  uint64_t v16 = (char *)&v23 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for ModifiedContent<ModifiedContent<SearchFieldConfigurationTokenFieldStyle.BodyView<ForEach<Binding<[AnyToken]>, AnyHashable, ModifiedContent<MergePlatformItemsView<AnyView>, _PreferenceTransformModifier<PlatformItemList.Key>>>>, PickerStyleWriter<SectionPickerStyle>>, StyleContextWriter<MenuStyleContext>>();
  MEMORY[0x1F4188790](v17 - 8);
  uint64_t v19 = (char *)&v23 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  _s7SwiftUI23TokenFieldConfigurationVWOcTm_0(a1, (uint64_t)v6, type metadata accessor for TokenFieldConfiguration);
  _s7SwiftUI23TokenFieldConfigurationVWOcTm_0((uint64_t)v6, (uint64_t)v10, type metadata accessor for TokenFieldConfiguration);
  closure #1 in SearchFieldConfigurationTokenFieldStyle.makeBody(configuration:)(a1, (uint64_t)&v23);
  _s7SwiftUI23TokenFieldConfigurationVWOhTm_0((uint64_t)v6, type metadata accessor for TokenFieldConfiguration);
  uint64_t v20 = &v10[*(int *)(v8 + 44)];
  uint64_t v21 = v27;
  *(void *)uint64_t v20 = v23;
  *(_OWORD *)(v20 + 8) = v24;
  *(_OWORD *)(v20 + 24) = v25;
  *(_OWORD *)(v20 + 40) = v26;
  *((void *)v20 + 7) = v21;
  outlined init with take of SearchFieldConfigurationTokenFieldStyle.BodyView<ForEach<Binding<[AnyToken]>, AnyHashable, ModifiedContent<MergePlatformItemsView<AnyView>, _PreferenceTransformModifier<PlatformItemList.Key>>>>((uint64_t)v10, (uint64_t)v13, (uint64_t (*)(void))type metadata accessor for SearchFieldConfigurationTokenFieldStyle.BodyView<ForEach<Binding<[AnyToken]>, AnyHashable, ModifiedContent<MergePlatformItemsView<AnyView>, _PreferenceTransformModifier<PlatformItemList.Key>>>>);
  _s7SwiftUI23TokenFieldConfigurationVWOcTm_0((uint64_t)v13, (uint64_t)v16, (uint64_t (*)(void))type metadata accessor for SearchFieldConfigurationTokenFieldStyle.BodyView<ForEach<Binding<[AnyToken]>, AnyHashable, ModifiedContent<MergePlatformItemsView<AnyView>, _PreferenceTransformModifier<PlatformItemList.Key>>>>);
  _s7SwiftUI23TokenFieldConfigurationVWOhTm_0((uint64_t)v13, (uint64_t (*)(void))type metadata accessor for SearchFieldConfigurationTokenFieldStyle.BodyView<ForEach<Binding<[AnyToken]>, AnyHashable, ModifiedContent<MergePlatformItemsView<AnyView>, _PreferenceTransformModifier<PlatformItemList.Key>>>>);
  _s7SwiftUI23TokenFieldConfigurationVWOcTm_0((uint64_t)v16, (uint64_t)v19, (uint64_t (*)(void))type metadata accessor for ModifiedContent<SearchFieldConfigurationTokenFieldStyle.BodyView<ForEach<Binding<[AnyToken]>, AnyHashable, ModifiedContent<MergePlatformItemsView<AnyView>, _PreferenceTransformModifier<PlatformItemList.Key>>>>, PickerStyleWriter<SectionPickerStyle>>);
  _s7SwiftUI23TokenFieldConfigurationVWOhTm_0((uint64_t)v16, (uint64_t (*)(void))type metadata accessor for ModifiedContent<SearchFieldConfigurationTokenFieldStyle.BodyView<ForEach<Binding<[AnyToken]>, AnyHashable, ModifiedContent<MergePlatformItemsView<AnyView>, _PreferenceTransformModifier<PlatformItemList.Key>>>>, PickerStyleWriter<SectionPickerStyle>>);
  _s7SwiftUI23TokenFieldConfigurationVWOcTm_0((uint64_t)v19, a2, (uint64_t (*)(void))type metadata accessor for ModifiedContent<ModifiedContent<SearchFieldConfigurationTokenFieldStyle.BodyView<ForEach<Binding<[AnyToken]>, AnyHashable, ModifiedContent<MergePlatformItemsView<AnyView>, _PreferenceTransformModifier<PlatformItemList.Key>>>>, PickerStyleWriter<SectionPickerStyle>>, StyleContextWriter<MenuStyleContext>>);
  return _s7SwiftUI23TokenFieldConfigurationVWOhTm_0((uint64_t)v19, (uint64_t (*)(void))type metadata accessor for ModifiedContent<ModifiedContent<SearchFieldConfigurationTokenFieldStyle.BodyView<ForEach<Binding<[AnyToken]>, AnyHashable, ModifiedContent<MergePlatformItemsView<AnyView>, _PreferenceTransformModifier<PlatformItemList.Key>>>>, PickerStyleWriter<SectionPickerStyle>>, StyleContextWriter<MenuStyleContext>>);
}

__n128 closure #1 in SearchFieldConfigurationTokenFieldStyle.makeBody(configuration:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v31 = a1;
  uint64_t v4 = type metadata accessor for TokenFieldConfiguration(0);
  uint64_t v34 = *(void *)(v4 - 8);
  uint64_t v5 = *(void *)(v34 + 64);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v32 = type metadata accessor for SearchAttributedString;
  uint64_t v33 = (uint64_t)&v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  long long v6 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E4F41638];
  _s7SwiftUI24SearchFieldConfigurationV4DataVSgMaTm_0(0, &lazy cache variable for type metadata for Binding<SearchAttributedString>, (uint64_t (*)(uint64_t))type metadata accessor for SearchAttributedString, MEMORY[0x1E4F41638]);
  uint64_t v8 = v7 - 8;
  MEMORY[0x1F4188790](v7);
  uint64_t v10 = (uint64_t *)((char *)&v30 - v9);
  uint64_t v11 = MEMORY[0x1E4F273A8];
  _s7SwiftUI24SearchFieldConfigurationV4DataVSgMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for Binding<AttributedString>, MEMORY[0x1E4F273A8], v6);
  uint64_t v13 = v12 - 8;
  MEMORY[0x1F4188790](v12);
  uint64_t v15 = (uint64_t *)((char *)&v30 - v14);
  outlined init with copy of Binding<AnyToken>(a1, (uint64_t)&v30 - v14, (uint64_t)&lazy cache variable for type metadata for Binding<AttributedString>, v11, (uint64_t)v6, (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))_s7SwiftUI24SearchFieldConfigurationV4DataVSgMaTm_0);
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v16 = (char *)v15 + *(int *)(v13 + 40);
  uint64_t v17 = (char *)v10 + *(int *)(v8 + 40);
  uint64_t v18 = type metadata accessor for AttributedString();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v18 - 8) + 16))(v17, v16, v18);
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<SearchFieldConfigurationTokenFieldStyle.BodyView<ForEach<Binding<[AnyToken]>, AnyHashable, ModifiedContent<MergePlatformItemsView<AnyView>, _PreferenceTransformModifier<PlatformItemList.Key>>>>, PickerStyleWriter<SectionPickerStyle>>, StyleContextWriter<MenuStyleContext>>, ViewInputFlagModifier<AllowSectionPickerLabels>>(0, &lazy cache variable for type metadata for WritableKeyPath<AttributedString, SearchAttributedString>, MEMORY[0x1E4F273A8], (uint64_t (*)(uint64_t))type metadata accessor for SearchAttributedString, MEMORY[0x1E4FBBC08]);
  lazy protocol witness table accessor for type WritableKeyPath<AttributedString, SearchAttributedString> and conformance WritableKeyPath<A, B>();
  uint64_t v19 = dispatch thunk of AnyLocation.projecting<A>(_:)();
  *uint64_t v10 = *v15;
  v10[1] = v19;
  swift_retain();
  swift_release();
  outlined destroy of Binding<AnyToken>((uint64_t)v15, (uint64_t)&lazy cache variable for type metadata for Binding<AttributedString>, v11, (uint64_t)v6, (uint64_t (*)(void))_s7SwiftUI24SearchFieldConfigurationV4DataVSgMaTm_0);
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v20 = SearchAttributedString.tokens.getter();
  type metadata accessor for WritableKeyPath<SearchAttributedString, [AnyToken]>();
  lazy protocol witness table accessor for type WritableKeyPath<SearchAttributedString, [AnyToken]> and conformance WritableKeyPath<A, B>();
  uint64_t v21 = dispatch thunk of AnyLocation.projecting<A>(_:)();
  uint64_t v22 = *v10;
  swift_retain();
  swift_release();
  outlined destroy of Binding<AnyToken>((uint64_t)v10, (uint64_t)&lazy cache variable for type metadata for Binding<SearchAttributedString>, (uint64_t)v32, (uint64_t)v6, (uint64_t (*)(void))_s7SwiftUI24SearchFieldConfigurationV4DataVSgMaTm_0);
  uint64_t v35 = v22;
  uint64_t v36 = v21;
  long long v37 = v20;
  uint64_t v23 = v33;
  _s7SwiftUI23TokenFieldConfigurationVWOcTm_0(v31, v33, type metadata accessor for TokenFieldConfiguration);
  unint64_t v24 = (*(unsigned __int8 *)(v34 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v34 + 80);
  uint64_t v25 = swift_allocObject();
  outlined init with take of SearchFieldConfigurationTokenFieldStyle.BodyView<ForEach<Binding<[AnyToken]>, AnyHashable, ModifiedContent<MergePlatformItemsView<AnyView>, _PreferenceTransformModifier<PlatformItemList.Key>>>>(v23, v25 + v24, type metadata accessor for TokenFieldConfiguration);
  type metadata accessor for Binding<[AnyToken]>();
  type metadata accessor for ModifiedContent<MergePlatformItemsView<AnyView>, _PreferenceTransformModifier<PlatformItemList.Key>>();
  lazy protocol witness table accessor for type Binding<[AnyToken]> and conformance <A> Binding<A>();
  lazy protocol witness table accessor for type ModifiedContent<MergePlatformItemsView<AnyView>, _PreferenceTransformModifier<PlatformItemList.Key>> and conformance <> ModifiedContent<A, B>();
  lazy protocol witness table accessor for type Binding<AnyToken> and conformance <A> Binding<A>();
  ForEach<>.init(_:content:)();
  uint64_t v26 = v42;
  __n128 result = v39;
  long long v28 = v40;
  long long v29 = v41;
  *(void *)a2 = KeyPath;
  *(__n128 *)(a2 + 8) = result;
  *(_OWORD *)(a2 + 24) = v28;
  *(_OWORD *)(a2 + 40) = v29;
  *(void *)(a2 + 56) = v26;
  return result;
}

uint64_t key path setter for AttributedString.search : AttributedString(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for SearchAttributedString();
  MEMORY[0x1F4188790](v4 - 8);
  long long v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  _s7SwiftUI23TokenFieldConfigurationVWOcTm_0(a1, (uint64_t)v6, (uint64_t (*)(void))type metadata accessor for SearchAttributedString);
  uint64_t v7 = type metadata accessor for AttributedString();
  uint64_t v8 = *(void *)(v7 - 8);
  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(a2, v7);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v8 + 32))(a2, v6, v7);
}

uint64_t implicit closure #1 in closure #1 in SearchFieldConfigurationTokenFieldStyle.makeBody(configuration:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v5 = MEMORY[0x1E4F41638];
  outlined init with copy of Binding<AnyToken>(a1, (uint64_t)v12, (uint64_t)&lazy cache variable for type metadata for Binding<AnyToken>, (uint64_t)&type metadata for AnyToken, MEMORY[0x1E4F41638], (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))type metadata accessor for [AnyToken]);
  v10[3] = v12[3];
  v10[4] = v12[4];
  uint64_t v11 = v13;
  v10[0] = v12[0];
  v10[1] = v12[1];
  v10[2] = v12[2];
  outlined init with copy of Binding<AnyToken>((uint64_t)v10, (uint64_t)v9, (uint64_t)&lazy cache variable for type metadata for Binding<AnyToken>, (uint64_t)&type metadata for AnyToken, v5, (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))type metadata accessor for [AnyToken]);
  uint64_t v6 = type metadata accessor for TokenFieldConfiguration(0);
  uint64_t v7 = (*(uint64_t (**)(unsigned char *))(a2 + *(int *)(v6 + 28)))(v9);
  outlined destroy of Binding<AnyToken>((uint64_t)v9, (uint64_t)&lazy cache variable for type metadata for Binding<AnyToken>, (uint64_t)&type metadata for AnyToken, v5, (uint64_t (*)(void))type metadata accessor for [AnyToken]);
  *a3 = v7;
  a3[1] = (uint64_t)closure #1 in View.forcePlatformItem();
  a3[2] = 0;
  return outlined destroy of Binding<AnyToken>((uint64_t)v10, (uint64_t)&lazy cache variable for type metadata for Binding<AnyToken>, (uint64_t)&type metadata for AnyToken, v5, (uint64_t (*)(void))type metadata accessor for [AnyToken]);
}

double static SearchFieldConfigurationTokenFieldStyle.BodyView._makeView(view:inputs:)@<D0>(int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, double *a5@<X8>)
{
  uint64_t v31 = a5;
  uint64_t v55 = *MEMORY[0x1E4F143B8];
  int v7 = *a1;
  int v8 = *(_DWORD *)(a2 + 8);
  uint64_t v9 = *(_UNKNOWN ***)(a2 + 16);
  uint64_t v10 = *(void *)(a2 + 40);
  uint64_t v11 = *(ValueMetadata **)(a2 + 48);
  int v12 = *(_DWORD *)(a2 + 80);
  int v46 = *(ValueMetadata **)a2;
  int v47 = v8;
  long long v49 = *(_OWORD *)(a2 + 24);
  unint64_t v48 = v9;
  uint64_t v50 = v10;
  uint64_t v51 = v11;
  long long v29 = *(_OWORD *)(a2 + 56);
  long long v52 = v29;
  uint64_t v53 = *(void *)(a2 + 72);
  int v54 = v12;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v30 = v11;
  swift_bridgeObjectRetain();
  specialized _ViewInputs.addPlatformItemListKey<A>(flags:editOperation:)(2u);
  LODWORD(v41) = v7;
  type metadata accessor for SearchFieldConfigurationTokenFieldStyle.BodyView();
  type metadata accessor for _GraphValue();
  _GraphValue.value.getter();
  if (*(void *)(*(void *)(type metadata accessor for TokenFieldConfiguration(0) - 8) + 64)) {
    closure #1 in static SearchFieldConfigurationTokenFieldStyle.BodyView._makeView(view:inputs:)(1);
  }
  int OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
  LODWORD(v41) = v7;
  _GraphValue.value.getter();
  if (*(void *)(*(void *)(a3 - 8) + 64)) {
    closure #2 in static SearchFieldConfigurationTokenFieldStyle.BodyView._makeView(view:inputs:)(1, a3);
  }
  int v13 = AGGraphCreateOffsetAttribute2();
  v25[4] = v50;
  uint64_t v26 = v51;
  uint64_t v32 = v46;
  LODWORD(v33) = v47;
  uint64_t v34 = v48;
  long long v35 = v49;
  uint64_t v36 = v50;
  long long v37 = v51;
  long long v38 = v52;
  uint64_t v39 = v53;
  int v40 = v54;
  id v14 = PlatformItemListGenerator.init(flags:content:inputs:inputsIncludeGeometry:)(v13, (uint64_t *)&v32, 1, (uint64_t)&v41);
  uint64_t v27 = v25;
  uint64_t v15 = v41;
  v25[1] = v43;
  v25[2] = v44;
  long long v25[3] = v45;
  MEMORY[0x1F4188790](v14);
  uint64_t v32 = &type metadata for SearchTokenPlatformItemListFlags;
  uint64_t v33 = a3;
  uint64_t v34 = &protocol witness table for SearchTokenPlatformItemListFlags;
  *(void *)&long long v35 = a4;
  uint64_t v23 = type metadata accessor for PlatformItemListGenerator();
  uint64_t WitnessTable = swift_getWitnessTable();
  type metadata accessor for [AnyToken](0, &lazy cache variable for type metadata for Attribute<PlatformItemList>, (uint64_t)&type metadata for PlatformItemList, MEMORY[0x1E4F4E740]);
  uint64_t v17 = v16;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v26 = v15;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v41, (uint64_t)partial apply for closure #1 in Attribute.init<A>(_:), (uint64_t)v22, v23, MEMORY[0x1E4FBC248], v17, MEMORY[0x1E4FBC278], v18);
  uint64_t v19 = v41;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();

  swift_release();
  LODWORD(v15) = v32;
  _ViewOutputs.init()();
  uint64_t v32 = v30;
  LODWORD(v33) = v29;
  MEMORY[0x1F4188790](v30);
  *(_DWORD *)&v22[-16] = OffsetAttribute2;
  *(_DWORD *)&v22[-12] = v15;
  swift_bridgeObjectRetain();
  PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  uint64_t v20 = v31;
  *(void *)uint64_t v31 = v41;
  double result = v42;
  v20[1] = v42;
  return result;
}

uint64_t closure #1 in static SearchFieldConfigurationTokenFieldStyle.BodyView._makeView(view:inputs:)(uint64_t a1)
{
  v6[2] = type metadata accessor for SearchFieldConfigurationTokenFieldStyle.BodyView();
  uint64_t v2 = type metadata accessor for TokenFieldConfiguration(0);
  uint64_t v3 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(a1, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply, (uint64_t)v6, v2, MEMORY[0x1E4FBC248], v3, MEMORY[0x1E4FBC278], v4);
  return v6[5];
}

uint64_t closure #2 in static SearchFieldConfigurationTokenFieldStyle.BodyView._makeView(view:inputs:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for SearchFieldConfigurationTokenFieldStyle.BodyView();
  uint64_t v5 = a1 + *(int *)(v4 + 36);
  void v9[2] = v4;
  v9[3] = a2;
  uint64_t v6 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v5, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply, (uint64_t)v9, a2, MEMORY[0x1E4FBC248], v6, MEMORY[0x1E4FBC278], v7);
  return v9[5];
}

uint64_t implicit closure #1 in static SearchFieldConfigurationTokenFieldStyle.BodyView._makeView(view:inputs:)()
{
  return Attribute.init<A>(body:value:flags:update:)();
}

double protocol witness for static View._makeView(view:inputs:) in conformance SearchFieldConfigurationTokenFieldStyle.BodyView<A>@<D0>(int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, double *a4@<X8>)
{
  return static SearchFieldConfigurationTokenFieldStyle.BodyView._makeView(view:inputs:)(a1, a2, *(void *)(a3 + 16), *(void *)(a3 + 24), a4);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance SearchFieldConfigurationTokenFieldStyle.BodyView<A>()
{
  swift_getWitnessTable();

  return static UnaryView._makeViewList(view:inputs:)();
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance SearchFieldConfigurationTokenFieldStyle.BodyView<A>()
{
  return static UnaryView._viewListCount(inputs:)();
}

void protocol witness for View.body.getter in conformance SearchFieldConfigurationTokenFieldStyle.BodyView<A>()
{
}

uint64_t SearchFieldConfigurationTokenFieldStyle.MakeConfiguration.value.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = MEMORY[0x1E4F273A8];
  uint64_t v3 = MEMORY[0x1E4F41638];
  _s7SwiftUI24SearchFieldConfigurationV4DataVSgMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for Binding<AttributedString>, MEMORY[0x1E4F273A8], MEMORY[0x1E4F41638]);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)&v25 - v5;
  uint64_t v7 = type metadata accessor for TokenFieldConfiguration(0);
  MEMORY[0x1F4188790](v7);
  uint64_t v9 = (char *)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v10);
  int v12 = (char *)&v25 - v11;
  uint64_t Value = AGGraphGetValue();
  _s7SwiftUI23TokenFieldConfigurationVWOcTm_0(Value, (uint64_t)v12, type metadata accessor for TokenFieldConfiguration);
  outlined init with copy of Binding<AnyToken>((uint64_t)v12, (uint64_t)v6, (uint64_t)&lazy cache variable for type metadata for Binding<AttributedString>, v2, v3, (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))_s7SwiftUI24SearchFieldConfigurationV4DataVSgMaTm_0);
  _s7SwiftUI23TokenFieldConfigurationVWOhTm_0((uint64_t)v12, type metadata accessor for TokenFieldConfiguration);
  uint64_t v14 = AGGraphGetValue();
  uint64_t result = _s7SwiftUI23TokenFieldConfigurationVWOcTm_0(v14, (uint64_t)v9, type metadata accessor for TokenFieldConfiguration);
  uint64_t v16 = &v9[*(int *)(v7 + 24)];
  uint64_t v17 = *((void *)v16 + 3);
  if (v17)
  {
    uint64_t v19 = *(void *)v16;
    uint64_t v18 = *((void *)v16 + 1);
    int v20 = *((_DWORD *)v16 + 4) & 1;
    outlined copy of Text.Storage(*(void *)v16, v18, v16[16] & 1);
    swift_bridgeObjectRetain();
    _s7SwiftUI23TokenFieldConfigurationVWOhTm_0((uint64_t)v9, type metadata accessor for TokenFieldConfiguration);
    uint64_t v21 = AGCreateWeakAttribute();
    outlined init with take of Binding<AttributedString>((uint64_t)v6, a1);
    uint64_t v22 = type metadata accessor for SearchFieldConfiguration.Data(0);
    uint64_t v23 = a1 + *(int *)(v22 + 20);
    *(void *)uint64_t v23 = v19;
    *(void *)(v23 + 8) = v18;
    *(unsigned char *)(v23 + 16) = v20;
    *(void *)(v23 + 24) = v17;
    uint64_t v24 = a1 + *(int *)(v22 + 24);
    *(void *)uint64_t v24 = v21;
    *(unsigned char *)(v24 + 8) = 0;
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v22 - 8) + 56))(a1, 0, 1, v22);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t protocol witness for static Rule.initialValue.getter in conformance SearchFieldConfigurationTokenFieldStyle.MakeConfiguration@<X0>(uint64_t a1@<X8>)
{
  _s7SwiftUI24SearchFieldConfigurationV4DataVSgMaTm_0(0, &lazy cache variable for type metadata for SearchFieldConfiguration.Data?, type metadata accessor for SearchFieldConfiguration.Data, MEMORY[0x1E4FBB718]);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56);

  return v3(a1, 1, 1, v2);
}

uint64_t protocol witness for Rule.value.getter in conformance SearchFieldConfigurationTokenFieldStyle.MakeConfiguration@<X0>(uint64_t a1@<X8>)
{
  return SearchFieldConfigurationTokenFieldStyle.MakeConfiguration.value.getter(a1);
}

void type metadata accessor for SearchFieldConfigurationTokenFieldStyle.BodyView<ForEach<Binding<[AnyToken]>, AnyHashable, ModifiedContent<MergePlatformItemsView<AnyView>, _PreferenceTransformModifier<PlatformItemList.Key>>>>()
{
  if (!lazy cache variable for type metadata for SearchFieldConfigurationTokenFieldStyle.BodyView<ForEach<Binding<[AnyToken]>, AnyHashable, ModifiedContent<MergePlatformItemsView<AnyView>, _PreferenceTransformModifier<PlatformItemList.Key>>>>)
  {
    type metadata accessor for ForEach<Binding<[AnyToken]>, AnyHashable, ModifiedContent<MergePlatformItemsView<AnyView>, _PreferenceTransformModifier<PlatformItemList.Key>>>();
    lazy protocol witness table accessor for type ForEach<Binding<[AnyToken]>, AnyHashable, ModifiedContent<MergePlatformItemsView<AnyView>, _PreferenceTransformModifier<PlatformItemList.Key>>> and conformance <> ForEach<A, B, C>();
    unint64_t v0 = type metadata accessor for SearchFieldConfigurationTokenFieldStyle.BodyView();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for SearchFieldConfigurationTokenFieldStyle.BodyView<ForEach<Binding<[AnyToken]>, AnyHashable, ModifiedContent<MergePlatformItemsView<AnyView>, _PreferenceTransformModifier<PlatformItemList.Key>>>>);
    }
  }
}

void type metadata accessor for ForEach<Binding<[AnyToken]>, AnyHashable, ModifiedContent<MergePlatformItemsView<AnyView>, _PreferenceTransformModifier<PlatformItemList.Key>>>()
{
  if (!lazy cache variable for type metadata for ForEach<Binding<[AnyToken]>, AnyHashable, ModifiedContent<MergePlatformItemsView<AnyView>, _PreferenceTransformModifier<PlatformItemList.Key>>>)
  {
    type metadata accessor for Binding<[AnyToken]>();
    type metadata accessor for ModifiedContent<MergePlatformItemsView<AnyView>, _PreferenceTransformModifier<PlatformItemList.Key>>();
    lazy protocol witness table accessor for type Binding<[AnyToken]> and conformance <A> Binding<A>();
    unint64_t v0 = type metadata accessor for ForEach();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ForEach<Binding<[AnyToken]>, AnyHashable, ModifiedContent<MergePlatformItemsView<AnyView>, _PreferenceTransformModifier<PlatformItemList.Key>>>);
    }
  }
}

void type metadata accessor for Binding<[AnyToken]>()
{
  if (!lazy cache variable for type metadata for Binding<[AnyToken]>)
  {
    type metadata accessor for [AnyToken](255, &lazy cache variable for type metadata for [AnyToken], (uint64_t)&type metadata for AnyToken, MEMORY[0x1E4FBB320]);
    unint64_t v0 = type metadata accessor for Binding();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Binding<[AnyToken]>);
    }
  }
}

void type metadata accessor for ModifiedContent<MergePlatformItemsView<AnyView>, _PreferenceTransformModifier<PlatformItemList.Key>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<MergePlatformItemsView<AnyView>, _PreferenceTransformModifier<PlatformItemList.Key>>)
  {
    type metadata accessor for MergePlatformItemsView<AnyView>(255, &lazy cache variable for type metadata for MergePlatformItemsView<AnyView>, MEMORY[0x1E4F41618], MEMORY[0x1E4F41610], (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for MergePlatformItemsView);
    type metadata accessor for MergePlatformItemsView<AnyView>(255, &lazy cache variable for type metadata for _PreferenceTransformModifier<PlatformItemList.Key>, (uint64_t)&type metadata for PlatformItemList.Key, (uint64_t)&protocol witness table for PlatformItemList.Key, MEMORY[0x1E4F41108]);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<MergePlatformItemsView<AnyView>, _PreferenceTransformModifier<PlatformItemList.Key>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type Binding<[AnyToken]> and conformance <A> Binding<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type Binding<[AnyToken]> and conformance <A> Binding<A>;
  if (!lazy protocol witness table cache variable for type Binding<[AnyToken]> and conformance <A> Binding<A>)
  {
    type metadata accessor for Binding<[AnyToken]>();
    lazy protocol witness table accessor for type [AnyToken] and conformance [A](&lazy protocol witness table cache variable for type [AnyToken] and conformance [A]);
    lazy protocol witness table accessor for type [AnyToken] and conformance [A](&lazy protocol witness table cache variable for type [AnyToken] and conformance [A]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Binding<[AnyToken]> and conformance <A> Binding<A>);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type [AnyToken] and conformance [A](unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for [AnyToken](255, &lazy cache variable for type metadata for [AnyToken], (uint64_t)&type metadata for AnyToken, MEMORY[0x1E4FBB320]);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ForEach<Binding<[AnyToken]>, AnyHashable, ModifiedContent<MergePlatformItemsView<AnyView>, _PreferenceTransformModifier<PlatformItemList.Key>>> and conformance <> ForEach<A, B, C>()
{
  unint64_t result = lazy protocol witness table cache variable for type ForEach<Binding<[AnyToken]>, AnyHashable, ModifiedContent<MergePlatformItemsView<AnyView>, _PreferenceTransformModifier<PlatformItemList.Key>>> and conformance <> ForEach<A, B, C>;
  if (!lazy protocol witness table cache variable for type ForEach<Binding<[AnyToken]>, AnyHashable, ModifiedContent<MergePlatformItemsView<AnyView>, _PreferenceTransformModifier<PlatformItemList.Key>>> and conformance <> ForEach<A, B, C>)
  {
    type metadata accessor for ForEach<Binding<[AnyToken]>, AnyHashable, ModifiedContent<MergePlatformItemsView<AnyView>, _PreferenceTransformModifier<PlatformItemList.Key>>>();
    lazy protocol witness table accessor for type ModifiedContent<MergePlatformItemsView<AnyView>, _PreferenceTransformModifier<PlatformItemList.Key>> and conformance <> ModifiedContent<A, B>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ForEach<Binding<[AnyToken]>, AnyHashable, ModifiedContent<MergePlatformItemsView<AnyView>, _PreferenceTransformModifier<PlatformItemList.Key>>> and conformance <> ForEach<A, B, C>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<MergePlatformItemsView<AnyView>, _PreferenceTransformModifier<PlatformItemList.Key>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<MergePlatformItemsView<AnyView>, _PreferenceTransformModifier<PlatformItemList.Key>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<MergePlatformItemsView<AnyView>, _PreferenceTransformModifier<PlatformItemList.Key>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<MergePlatformItemsView<AnyView>, _PreferenceTransformModifier<PlatformItemList.Key>>();
    lazy protocol witness table accessor for type _PreferenceTransformModifier<PlatformItemList.Key> and conformance _PreferenceTransformModifier<A>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<MergePlatformItemsView<AnyView>, _PreferenceTransformModifier<PlatformItemList.Key>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t type metadata accessor for SearchFieldConfigurationTokenFieldStyle.BodyView()
{
  return __swift_instantiateGenericMetadata();
}

void type metadata accessor for ModifiedContent<SearchFieldConfigurationTokenFieldStyle.BodyView<ForEach<Binding<[AnyToken]>, AnyHashable, ModifiedContent<MergePlatformItemsView<AnyView>, _PreferenceTransformModifier<PlatformItemList.Key>>>>, PickerStyleWriter<SectionPickerStyle>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<SearchFieldConfigurationTokenFieldStyle.BodyView<ForEach<Binding<[AnyToken]>, AnyHashable, ModifiedContent<MergePlatformItemsView<AnyView>, _PreferenceTransformModifier<PlatformItemList.Key>>>>, PickerStyleWriter<SectionPickerStyle>>)
  {
    type metadata accessor for SearchFieldConfigurationTokenFieldStyle.BodyView<ForEach<Binding<[AnyToken]>, AnyHashable, ModifiedContent<MergePlatformItemsView<AnyView>, _PreferenceTransformModifier<PlatformItemList.Key>>>>();
    type metadata accessor for MergePlatformItemsView<AnyView>(255, &lazy cache variable for type metadata for PickerStyleWriter<SectionPickerStyle>, (uint64_t)&type metadata for SectionPickerStyle, (uint64_t)&protocol witness table for SectionPickerStyle, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PickerStyleWriter);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<SearchFieldConfigurationTokenFieldStyle.BodyView<ForEach<Binding<[AnyToken]>, AnyHashable, ModifiedContent<MergePlatformItemsView<AnyView>, _PreferenceTransformModifier<PlatformItemList.Key>>>>, PickerStyleWriter<SectionPickerStyle>>);
    }
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<SearchFieldConfigurationTokenFieldStyle.BodyView<ForEach<Binding<[AnyToken]>, AnyHashable, ModifiedContent<MergePlatformItemsView<AnyView>, _PreferenceTransformModifier<PlatformItemList.Key>>>>, PickerStyleWriter<SectionPickerStyle>>, StyleContextWriter<MenuStyleContext>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<SearchFieldConfigurationTokenFieldStyle.BodyView<ForEach<Binding<[AnyToken]>, AnyHashable, ModifiedContent<MergePlatformItemsView<AnyView>, _PreferenceTransformModifier<PlatformItemList.Key>>>>, PickerStyleWriter<SectionPickerStyle>>, StyleContextWriter<MenuStyleContext>>)
  {
    type metadata accessor for ModifiedContent<SearchFieldConfigurationTokenFieldStyle.BodyView<ForEach<Binding<[AnyToken]>, AnyHashable, ModifiedContent<MergePlatformItemsView<AnyView>, _PreferenceTransformModifier<PlatformItemList.Key>>>>, PickerStyleWriter<SectionPickerStyle>>();
    type metadata accessor for MergePlatformItemsView<AnyView>(255, (unint64_t *)&lazy cache variable for type metadata for StyleContextWriter<MenuStyleContext>, MEMORY[0x1E4F3FCF0], MEMORY[0x1E4F3FCE8], MEMORY[0x1E4F40318]);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<SearchFieldConfigurationTokenFieldStyle.BodyView<ForEach<Binding<[AnyToken]>, AnyHashable, ModifiedContent<MergePlatformItemsView<AnyView>, _PreferenceTransformModifier<PlatformItemList.Key>>>>, PickerStyleWriter<SectionPickerStyle>>, StyleContextWriter<MenuStyleContext>>);
    }
  }
}

void type metadata accessor for MergePlatformItemsView<AnyView>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = a5(0, a3, a4);
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

uint64_t _s7SwiftUI23TokenFieldConfigurationVWOcTm_0(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t outlined init with copy of Binding<AnyToken>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(void, uint64_t, uint64_t, uint64_t))
{
  uint64_t v8 = a6(0, a3, a4, a5);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 16))(a2, a1, v8);
  return a2;
}

uint64_t sub_187BC5F48@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for AttributedString();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);

  return v5(a2, a1, v4);
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<SearchFieldConfigurationTokenFieldStyle.BodyView<ForEach<Binding<[AnyToken]>, AnyHashable, ModifiedContent<MergePlatformItemsView<AnyView>, _PreferenceTransformModifier<PlatformItemList.Key>>>>, PickerStyleWriter<SectionPickerStyle>>, StyleContextWriter<MenuStyleContext>>, ViewInputFlagModifier<AllowSectionPickerLabels>>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t), uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v9 = a3(255);
    uint64_t v10 = a4(255);
    unint64_t v11 = a5(a1, v9, v10);
    if (!v12) {
      atomic_store(v11, a2);
    }
  }
}

unint64_t lazy protocol witness table accessor for type WritableKeyPath<AttributedString, SearchAttributedString> and conformance WritableKeyPath<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type WritableKeyPath<AttributedString, SearchAttributedString> and conformance WritableKeyPath<A, B>;
  if (!lazy protocol witness table cache variable for type WritableKeyPath<AttributedString, SearchAttributedString> and conformance WritableKeyPath<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<SearchFieldConfigurationTokenFieldStyle.BodyView<ForEach<Binding<[AnyToken]>, AnyHashable, ModifiedContent<MergePlatformItemsView<AnyView>, _PreferenceTransformModifier<PlatformItemList.Key>>>>, PickerStyleWriter<SectionPickerStyle>>, StyleContextWriter<MenuStyleContext>>, ViewInputFlagModifier<AllowSectionPickerLabels>>(255, &lazy cache variable for type metadata for WritableKeyPath<AttributedString, SearchAttributedString>, MEMORY[0x1E4F273A8], (uint64_t (*)(uint64_t))type metadata accessor for SearchAttributedString, MEMORY[0x1E4FBBC08]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WritableKeyPath<AttributedString, SearchAttributedString> and conformance WritableKeyPath<A, B>);
  }
  return result;
}

char *sub_187BC60D8@<X0>(char **a1@<X8>)
{
  unint64_t result = SearchAttributedString.tokens.getter();
  *a1 = result;
  return result;
}

uint64_t sub_187BC6104()
{
  uint64_t v0 = swift_bridgeObjectRetain();
  SearchAttributedString.update(tokens:)((Swift::OpaquePointer)v0);

  return swift_bridgeObjectRelease();
}

void type metadata accessor for WritableKeyPath<SearchAttributedString, [AnyToken]>()
{
  if (!lazy cache variable for type metadata for WritableKeyPath<SearchAttributedString, [AnyToken]>)
  {
    type metadata accessor for SearchAttributedString();
    type metadata accessor for [AnyToken](255, &lazy cache variable for type metadata for [AnyToken], (uint64_t)&type metadata for AnyToken, MEMORY[0x1E4FBB320]);
    unint64_t v0 = type metadata accessor for WritableKeyPath();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for WritableKeyPath<SearchAttributedString, [AnyToken]>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type WritableKeyPath<SearchAttributedString, [AnyToken]> and conformance WritableKeyPath<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type WritableKeyPath<SearchAttributedString, [AnyToken]> and conformance WritableKeyPath<A, B>;
  if (!lazy protocol witness table cache variable for type WritableKeyPath<SearchAttributedString, [AnyToken]> and conformance WritableKeyPath<A, B>)
  {
    type metadata accessor for WritableKeyPath<SearchAttributedString, [AnyToken]>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WritableKeyPath<SearchAttributedString, [AnyToken]> and conformance WritableKeyPath<A, B>);
  }
  return result;
}

uint64_t outlined destroy of Binding<AnyToken>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  uint64_t v6 = a5(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(a1, v6);
  return a1;
}

uint64_t sub_187BC628C()
{
  uint64_t v1 = type metadata accessor for TokenFieldConfiguration(0);
  uint64_t v2 = v0
     + ((*(unsigned __int8 *)(*(void *)(v1 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v1 - 8) + 80));
  swift_release();
  swift_release();
  _s7SwiftUI24SearchFieldConfigurationV4DataVSgMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for Binding<AttributedString>, MEMORY[0x1E4F273A8], MEMORY[0x1E4F41638]);
  uint64_t v4 = v2 + *(int *)(v3 + 32);
  uint64_t v5 = type metadata accessor for AttributedString();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  uint64_t v6 = v2 + *(int *)(v1 + 24);
  if (*(void *)(v6 + 24))
  {
    outlined consume of Text.Storage(*(void *)v6, *(void *)(v6 + 8), *(unsigned char *)(v6 + 16));
    swift_bridgeObjectRelease();
  }
  swift_release();

  return swift_deallocObject();
}

uint64_t outlined init with take of SearchFieldConfigurationTokenFieldStyle.BodyView<ForEach<Binding<[AnyToken]>, AnyHashable, ModifiedContent<MergePlatformItemsView<AnyView>, _PreferenceTransformModifier<PlatformItemList.Key>>>>(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t partial apply for implicit closure #1 in closure #1 in SearchFieldConfigurationTokenFieldStyle.makeBody(configuration:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5 = *(void *)(type metadata accessor for TokenFieldConfiguration(0) - 8);
  uint64_t v6 = v2 + ((*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));

  return implicit closure #1 in closure #1 in SearchFieldConfigurationTokenFieldStyle.makeBody(configuration:)(a1, v6, a2);
}

unint64_t lazy protocol witness table accessor for type Binding<AnyToken> and conformance <A> Binding<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type Binding<AnyToken> and conformance <A> Binding<A>;
  if (!lazy protocol witness table cache variable for type Binding<AnyToken> and conformance <A> Binding<A>)
  {
    type metadata accessor for [AnyToken](255, (unint64_t *)&lazy cache variable for type metadata for Binding<AnyToken>, (uint64_t)&type metadata for AnyToken, MEMORY[0x1E4F41638]);
    lazy protocol witness table accessor for type AnyToken and conformance AnyToken();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Binding<AnyToken> and conformance <A> Binding<A>);
  }
  return result;
}

uint64_t type metadata completion function for SearchFieldConfigurationTokenFieldStyle.BodyView()
{
  uint64_t result = type metadata accessor for TokenFieldConfiguration(319);
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

void *initializeBufferWithCopyOfBuffer for SearchFieldConfigurationTokenFieldStyle.BodyView(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for AttributedString();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(_DWORD *)(v7 + 80);
  uint64_t v9 = v8 | 7;
  uint64_t v10 = ((v8 + 16) & ~v8) + *(void *)(v7 + 64) + 7;
  uint64_t v11 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v12 = *(_DWORD *)(v11 + 80);
  if ((v8 | 7 | v12) != 7
    || ((*(_DWORD *)(v11 + 80) | *(_DWORD *)(v7 + 80)) & 0x100000) != 0
    || (((((v10 & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFFFF8) + v12 + 16) & ~v12) + *(void *)(v11 + 64) > 0x18)
  {
    uint64_t v15 = *a2;
    *a1 = *a2;
    uint64_t v16 = (void *)(v15 + (((v8 | 7 | v12) + 16) & ~(v8 | 7 | v12)));
    swift_retain();
  }
  else
  {
    unint64_t v38 = (((v10 & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFFFF8) + v12 + 16;
    uint64_t v39 = *(void *)(a3 + 16);
    uint64_t v17 = ~v8;
    int v40 = a2;
    long long v41 = a1;
    uint64_t v18 = (void *)(((unint64_t)a1 + v9) & ~v9);
    uint64_t v19 = (void *)(((unint64_t)a2 + v9) & ~v9);
    *uint64_t v18 = *v19;
    uint64_t v37 = ~v12;
    int v20 = (void *)(((unint64_t)v18 + 15) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v21 = (void *)(((unint64_t)v19 + 15) & 0xFFFFFFFFFFFFFFF8);
    *int v20 = *v21;
    uint64_t v22 = v8 + 8;
    unint64_t v23 = ((unint64_t)v20 + v22) & v17;
    unint64_t v24 = ((unint64_t)v21 + v22) & v17;
    uint64_t v25 = *(void (**)(unint64_t, unint64_t, uint64_t))(v7 + 16);
    swift_retain();
    swift_retain();
    v25(v23, v24, v6);
    unint64_t v26 = ((unint64_t)v18 + v10) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v27 = ((unint64_t)v19 + v10) & 0xFFFFFFFFFFFFFFF8;
    if (*(void *)(v27 + 24) < 0xFFFFFFFFuLL)
    {
      long long v31 = *(_OWORD *)(v27 + 16);
      *(_OWORD *)unint64_t v26 = *(_OWORD *)v27;
      *(_OWORD *)(v26 + 16) = v31;
    }
    else
    {
      uint64_t v28 = *(void *)v27;
      uint64_t v29 = *(void *)(v27 + 8);
      char v30 = *(unsigned char *)(v27 + 16);
      outlined copy of Text.Storage(*(void *)v27, v29, v30);
      *(void *)unint64_t v26 = v28;
      *(void *)(v26 + 8) = v29;
      *(unsigned char *)(v26 + 16) = v30;
      *(void *)(v26 + 24) = *(void *)(v27 + 24);
      swift_bridgeObjectRetain();
    }
    uint64_t v32 = (void *)((v26 + 39) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v33 = (void *)((v27 + 39) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v34 = v33[1];
    void *v32 = *v33;
    v32[1] = v34;
    uint64_t v16 = v41;
    long long v35 = *(void (**)(unint64_t, unint64_t, uint64_t))(v11 + 16);
    swift_retain();
    v35(((unint64_t)v41 + v38) & v37, ((unint64_t)v40 + v38) & v37, v39);
  }
  return v16;
}

uint64_t destroy for SearchFieldConfigurationTokenFieldStyle.BodyView(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AttributedString();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(unsigned __int8 *)(v5 + 80);
  swift_release();
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v5 + 8))((v6 + (((((v6 | 7) + a1) & ~(v6 | 7)) + 15) & 0xFFFFFFFFFFFFFFF8) + 8) & ~v6, v4);
  uint64_t v7 = *(void *)(v5 + 64) + ((v6 + 16) & ~v6) + 7;
  unint64_t v8 = (v7 + (((v6 | 7) + a1) & ~(v6 | 7))) & 0xFFFFFFFFFFFFFFF8;
  if (*(void *)(v8 + 24) >= 0xFFFFFFFFuLL)
  {
    outlined consume of Text.Storage(*(void *)v8, *(void *)(v8 + 8), *(unsigned char *)(v8 + 16));
    swift_bridgeObjectRelease();
  }
  swift_release();
  uint64_t v9 = *(void *)(*(void *)(a2 + 16) - 8);
  uint64_t v10 = *(uint64_t (**)(unint64_t))(v9 + 8);
  unint64_t v11 = (a1 + *(unsigned __int8 *)(v9 + 80) + (((v7 & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFFFF8) + 16) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);

  return v10(v11);
}

uint64_t initializeWithCopy for SearchFieldConfigurationTokenFieldStyle.BodyView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = type metadata accessor for AttributedString();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16);
  uint64_t v8 = v6 + 16;
  uint64_t v9 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v34 = a2;
  uint64_t v10 = (void *)(((v9 | 7) + a2) & ~(v9 | 7));
  unint64_t v11 = (void *)(((v9 | 7) + a1) & ~(v9 | 7));
  *unint64_t v11 = *v10;
  uint64_t v12 = (void *)(((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFFFF8);
  int v13 = (void *)(((unint64_t)v10 + 15) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v12 = *v13;
  uint64_t v14 = ((unint64_t)v12 + v9 + 8) & ~v9;
  uint64_t v15 = ((unint64_t)v13 + v9 + 8) & ~v9;
  swift_retain();
  swift_retain();
  v7(v14, v15, v5);
  uint64_t v16 = *(void *)(v8 + 48) + ((v9 + 16) & ~v9) + 7;
  unint64_t v17 = (v16 + (((v9 | 7) + a1) & ~(v9 | 7))) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v18 = ((unint64_t)v10 + v16) & 0xFFFFFFFFFFFFFFF8;
  if (*(void *)(v18 + 24) < 0xFFFFFFFFuLL)
  {
    long long v22 = *(_OWORD *)(v18 + 16);
    *(_OWORD *)unint64_t v17 = *(_OWORD *)v18;
    *(_OWORD *)(v17 + 16) = v22;
  }
  else
  {
    uint64_t v19 = *(void *)v18;
    uint64_t v20 = *(void *)(v18 + 8);
    char v21 = *(unsigned char *)(v18 + 16);
    outlined copy of Text.Storage(*(void *)v18, v20, v21);
    *(void *)unint64_t v17 = v19;
    *(void *)(v17 + 8) = v20;
    *(unsigned char *)(v17 + 16) = v21;
    *(void *)(v17 + 24) = *(void *)(v18 + 24);
    swift_bridgeObjectRetain();
  }
  unint64_t v23 = (void *)((v17 + 39) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v24 = (void *)((v18 + 39) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v25 = v24[1];
  *unint64_t v23 = *v24;
  v23[1] = v25;
  uint64_t v26 = *(void *)(a3 + 16);
  unint64_t v27 = *(void (**)(unint64_t, unint64_t, uint64_t))(*(void *)(v26 - 8) + 16);
  uint64_t v28 = *(unsigned __int8 *)(*(void *)(v26 - 8) + 80);
  unint64_t v29 = (((v16 & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFFFF8) + v28 + 16;
  unint64_t v30 = (v29 + a1) & ~v28;
  unint64_t v31 = (v29 + v34) & ~v28;
  swift_retain();
  v27(v30, v31, v26);
  return a1;
}

uint64_t assignWithCopy for SearchFieldConfigurationTokenFieldStyle.BodyView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = type metadata accessor for AttributedString();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v8 = (void *)(((v7 | 7) + a1) & ~(v7 | 7));
  uint64_t v9 = (void *)(((v7 | 7) + a2) & ~(v7 | 7));
  *uint64_t v8 = *v9;
  swift_retain();
  swift_release();
  uint64_t v10 = (void *)(((unint64_t)v8 + 15) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v11 = (void *)(((unint64_t)v9 + 15) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v10 = *v11;
  swift_retain();
  swift_release();
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v6 + 24))(((unint64_t)v10 + v7 + 8) & ~v7, ((unint64_t)v11 + v7 + 8) & ~v7, v5);
  uint64_t v12 = *(void *)(v6 + 64) + ((v7 + 16) & ~v7) + 7;
  unint64_t v13 = ((unint64_t)v8 + v12) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v14 = ((unint64_t)v9 + v12) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v15 = *(void *)(v14 + 24);
  if (*(void *)(v13 + 24) < 0xFFFFFFFFuLL)
  {
    if (v15 >= 0xFFFFFFFF)
    {
      uint64_t v22 = *(void *)v14;
      uint64_t v23 = *(void *)(v14 + 8);
      char v24 = *(unsigned char *)(v14 + 16);
      outlined copy of Text.Storage(*(void *)v14, v23, v24);
      *(void *)unint64_t v13 = v22;
      *(void *)(v13 + 8) = v23;
      *(unsigned char *)(v13 + 16) = v24;
      *(void *)(v13 + 24) = *(void *)(v14 + 24);
      swift_bridgeObjectRetain();
      goto LABEL_8;
    }
LABEL_7:
    long long v25 = *(_OWORD *)(v14 + 16);
    *(_OWORD *)unint64_t v13 = *(_OWORD *)v14;
    *(_OWORD *)(v13 + 16) = v25;
    goto LABEL_8;
  }
  if (v15 < 0xFFFFFFFF)
  {
    outlined consume of Text.Storage(*(void *)v13, *(void *)(v13 + 8), *(unsigned char *)(v13 + 16));
    swift_bridgeObjectRelease();
    goto LABEL_7;
  }
  uint64_t v16 = *(void *)v14;
  uint64_t v17 = *(void *)(v14 + 8);
  char v18 = *(unsigned char *)(v14 + 16);
  outlined copy of Text.Storage(*(void *)v14, v17, v18);
  uint64_t v19 = *(void *)v13;
  uint64_t v20 = *(void *)(v13 + 8);
  char v21 = *(unsigned char *)(v13 + 16);
  *(void *)unint64_t v13 = v16;
  *(void *)(v13 + 8) = v17;
  *(unsigned char *)(v13 + 16) = v18;
  outlined consume of Text.Storage(v19, v20, v21);
  *(void *)(v13 + 24) = *(void *)(v14 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
LABEL_8:
  uint64_t v26 = (void *)((v13 + 39) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v27 = (void *)((v14 + 39) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v28 = v27[1];
  *uint64_t v26 = *v27;
  v26[1] = v28;
  swift_retain();
  swift_release();
  uint64_t v29 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v30 = *(unsigned __int8 *)(v29 + 80);
  unint64_t v31 = (((v12 & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFFFF8) + v30 + 16;
  (*(void (**)(unint64_t, unint64_t))(v29 + 24))((v31 + a1) & ~v30, (v31 + a2) & ~v30);
  return a1;
}

uint64_t initializeWithTake for SearchFieldConfigurationTokenFieldStyle.BodyView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for AttributedString();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void (**)(unint64_t, unint64_t, uint64_t))(v7 + 32);
  uint64_t v9 = v7 + 32;
  uint64_t v10 = *(unsigned __int8 *)(v7 + 80);
  unint64_t v11 = (void *)(((v10 | 7) + a2) & ~(v10 | 7));
  uint64_t v12 = (void *)(((v10 | 7) + a1) & ~(v10 | 7));
  *uint64_t v12 = *v11;
  unint64_t v13 = (void *)(((unint64_t)v12 + 15) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v14 = (void *)(((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFFFF8);
  *unint64_t v13 = *v14;
  v8(((unint64_t)v13 + v10 + 8) & ~v10, ((unint64_t)v14 + v10 + 8) & ~v10, v6);
  uint64_t v15 = *(void *)(v9 + 32) + ((v10 + 16) & ~v10) + 7;
  uint64_t v16 = (_OWORD *)((v15 + (((v10 | 7) + a1) & ~(v10 | 7))) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v17 = (_OWORD *)((v15 + (((v10 | 7) + a2) & ~(v10 | 7))) & 0xFFFFFFFFFFFFFFF8);
  long long v18 = v17[1];
  *uint64_t v16 = *v17;
  v16[1] = v18;
  *(_OWORD *)(((unint64_t)v16 + 39) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v17 + 39) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v19 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v20 = *(unsigned __int8 *)(v19 + 80);
  unint64_t v21 = (((v15 & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFFFF8) + v20 + 16;
  (*(void (**)(unint64_t, unint64_t))(v19 + 32))((v21 + a1) & ~v20, (v21 + a2) & ~v20);
  return a1;
}

uint64_t assignWithTake for SearchFieldConfigurationTokenFieldStyle.BodyView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for AttributedString();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v9 = (void *)(((v8 | 7) + a2) & ~(v8 | 7));
  uint64_t v10 = (void *)(((v8 | 7) + a1) & ~(v8 | 7));
  *uint64_t v10 = *v9;
  swift_release();
  unint64_t v11 = (void *)(((unint64_t)v10 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v12 = (void *)(((unint64_t)v9 + 15) & 0xFFFFFFFFFFFFFFF8);
  *unint64_t v11 = *v12;
  swift_release();
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v7 + 40))(((unint64_t)v11 + v8 + 8) & ~v8, ((unint64_t)v12 + v8 + 8) & ~v8, v6);
  uint64_t v13 = *(void *)(v7 + 64) + ((v8 + 16) & ~v8) + 7;
  unint64_t v14 = (v13 + (((v8 | 7) + a1) & ~(v8 | 7))) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v15 = (v13 + (((v8 | 7) + a2) & ~(v8 | 7))) & 0xFFFFFFFFFFFFFFF8;
  if (*(void *)(v14 + 24) < 0xFFFFFFFFuLL) {
    goto LABEL_5;
  }
  if (*(void *)(v15 + 24) < 0xFFFFFFFFuLL)
  {
    outlined consume of Text.Storage(*(void *)v14, *(void *)(v14 + 8), *(unsigned char *)(v14 + 16));
    swift_bridgeObjectRelease();
LABEL_5:
    long long v20 = *(_OWORD *)(v15 + 16);
    *(_OWORD *)unint64_t v14 = *(_OWORD *)v15;
    *(_OWORD *)(v14 + 16) = v20;
    goto LABEL_6;
  }
  char v16 = *(unsigned char *)(v15 + 16);
  uint64_t v17 = *(void *)v14;
  uint64_t v18 = *(void *)(v14 + 8);
  char v19 = *(unsigned char *)(v14 + 16);
  *(_OWORD *)unint64_t v14 = *(_OWORD *)v15;
  *(unsigned char *)(v14 + 16) = v16;
  outlined consume of Text.Storage(v17, v18, v19);
  *(void *)(v14 + 24) = *(void *)(v15 + 24);
  swift_bridgeObjectRelease();
LABEL_6:
  *(_OWORD *)((v14 + 39) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)((v15 + 39) & 0xFFFFFFFFFFFFFFF8);
  swift_release();
  uint64_t v21 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v22 = *(unsigned __int8 *)(v21 + 80);
  unint64_t v23 = (((v13 & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFFFF8) + v22 + 16;
  (*(void (**)(unint64_t, unint64_t))(v21 + 40))((v23 + a1) & ~v22, (v23 + a2) & ~v22);
  return a1;
}

uint64_t getEnumTagSinglePayload for SearchFieldConfigurationTokenFieldStyle.BodyView(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(type metadata accessor for AttributedString() - 8);
  uint64_t v7 = v6;
  unsigned int v8 = *(_DWORD *)(v6 + 84);
  if (v8 <= 0x7FFFFFFF) {
    unsigned int v9 = 0x7FFFFFFF;
  }
  else {
    unsigned int v9 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v10 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v11 = *(unsigned int *)(v10 + 84);
  uint64_t v12 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v13 = *(void *)(v6 + 64);
  uint64_t v14 = *(unsigned __int8 *)(v10 + 80);
  if (v11 <= v9) {
    unsigned int v15 = v9;
  }
  else {
    unsigned int v15 = *(_DWORD *)(v10 + 84);
  }
  if (!a2) {
    return 0;
  }
  unint64_t v16 = ((((v13 + ((v12 + 16) & ~v12) + 7) & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFFFF8) + v14 + 16;
  if (a2 <= v15) {
    goto LABEL_28;
  }
  unint64_t v17 = (v16 & ~v14) + *(void *)(v10 + 64);
  char v18 = 8 * v17;
  if (v17 <= 3)
  {
    unsigned int v21 = ((a2 - v15 + ~(-1 << v18)) >> v18) + 1;
    if (HIWORD(v21))
    {
      int v19 = *(_DWORD *)((char *)a1 + v17);
      if (!v19) {
        goto LABEL_28;
      }
      goto LABEL_18;
    }
    if (v21 > 0xFF)
    {
      int v19 = *(unsigned __int16 *)((char *)a1 + v17);
      if (!*(unsigned __int16 *)((char *)a1 + v17)) {
        goto LABEL_28;
      }
      goto LABEL_18;
    }
    if (v21 < 2)
    {
LABEL_28:
      if (v9 >= v11)
      {
        uint64_t v26 = (uint64_t *)(((((unint64_t)a1 + (v12 | 7)) & ~(v12 | 7)) + 15) & 0xFFFFFFFFFFFFFFF8);
        if ((v8 & 0x80000000) != 0)
        {
          uint64_t v28 = *(uint64_t (**)(unint64_t))(v7 + 48);
          return v28(((unint64_t)v26 + v12 + 8) & ~v12);
        }
        else
        {
          uint64_t v27 = *v26;
          if ((unint64_t)*v26 >= 0xFFFFFFFF) {
            LODWORD(v27) = -1;
          }
          return (v27 + 1);
        }
      }
      else
      {
        long long v25 = *(uint64_t (**)(unint64_t, uint64_t))(v10 + 48);
        return v25(((unint64_t)a1 + v16) & ~v14, v11);
      }
    }
  }
  int v19 = *((unsigned __int8 *)a1 + v17);
  if (!*((unsigned char *)a1 + v17)) {
    goto LABEL_28;
  }
LABEL_18:
  int v22 = (v19 - 1) << v18;
  if (v17 > 3) {
    int v22 = 0;
  }
  if (v17)
  {
    if (v17 <= 3) {
      int v23 = (v16 & ~v14) + *(_DWORD *)(v10 + 64);
    }
    else {
      int v23 = 4;
    }
    switch(v23)
    {
      case 2:
        int v24 = *a1;
        break;
      case 3:
        int v24 = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        int v24 = *(_DWORD *)a1;
        break;
      default:
        int v24 = *(unsigned __int8 *)a1;
        break;
    }
  }
  else
  {
    int v24 = 0;
  }
  return v15 + (v24 | v22) + 1;
}

void storeEnumTagSinglePayload for SearchFieldConfigurationTokenFieldStyle.BodyView(unsigned char *a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  uint64_t v8 = *(void *)(type metadata accessor for AttributedString() - 8);
  uint64_t v9 = v8;
  unsigned int v10 = *(_DWORD *)(v8 + 84);
  if (v10 <= 0x7FFFFFFF) {
    unsigned int v11 = 0x7FFFFFFF;
  }
  else {
    unsigned int v11 = *(_DWORD *)(v8 + 84);
  }
  uint64_t v12 = *(void *)(*(void *)(a4 + 16) - 8);
  uint64_t v13 = *(unsigned int *)(v12 + 84);
  uint64_t v14 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v15 = *(void *)(v8 + 64);
  uint64_t v16 = *(unsigned __int8 *)(v12 + 80);
  if (v13 <= v11) {
    unsigned int v17 = v11;
  }
  else {
    unsigned int v17 = *(_DWORD *)(v12 + 84);
  }
  size_t v18 = ((((v15 + ((v14 + 16) & ~v14) + 7) & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFFFF8) + 16;
  size_t v19 = v18 + v16;
  size_t v20 = ((v18 + v16) & ~v16) + *(void *)(v12 + 64);
  if (a3 <= v17)
  {
    int v21 = 0;
  }
  else if (v20 <= 3)
  {
    unsigned int v25 = ((a3 - v17 + ~(-1 << (8 * v20))) >> (8 * v20)) + 1;
    if (HIWORD(v25))
    {
      int v21 = 4;
    }
    else if (v25 >= 0x100)
    {
      int v21 = 2;
    }
    else
    {
      int v21 = v25 > 1;
    }
  }
  else
  {
    int v21 = 1;
  }
  if (v17 < a2)
  {
    unsigned int v22 = ~v17 + a2;
    if (v20 < 4)
    {
      int v23 = (v22 >> (8 * v20)) + 1;
      if (v20)
      {
        int v26 = v22 & ~(-1 << (8 * v20));
        bzero(a1, v20);
        if (v20 == 3)
        {
          *(_WORD *)a1 = v26;
          a1[2] = BYTE2(v26);
        }
        else if (v20 == 2)
        {
          *(_WORD *)a1 = v26;
        }
        else
        {
          *a1 = v26;
        }
      }
    }
    else
    {
      bzero(a1, v20);
      *(_DWORD *)a1 = v22;
      int v23 = 1;
    }
    switch(v21)
    {
      case 1:
        a1[v20] = v23;
        return;
      case 2:
        *(_WORD *)&a1[v20] = v23;
        return;
      case 3:
        goto LABEL_52;
      case 4:
        *(_DWORD *)&a1[v20] = v23;
        return;
      default:
        return;
    }
  }
  uint64_t v24 = ~v16;
  switch(v21)
  {
    case 1:
      a1[v20] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_27;
    case 2:
      *(_WORD *)&a1[v20] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_27;
    case 3:
LABEL_52:
      __break(1u);
      JUMPOUT(0x187BC7820);
    case 4:
      *(_DWORD *)&a1[v20] = 0;
      goto LABEL_26;
    default:
LABEL_26:
      if (a2)
      {
LABEL_27:
        if (v11 >= v13)
        {
          if (v11 >= a2)
          {
            uint64_t v29 = (void *)((((unint64_t)&a1[v14 | 7] & ~(v14 | 7)) + 15) & 0xFFFFFFFFFFFFFFF8);
            if ((v10 & 0x80000000) != 0)
            {
              unint64_t v31 = *(void (**)(unint64_t, uint64_t))(v9 + 56);
              v31(((unint64_t)v29 + v14 + 8) & ~v14, a2);
            }
            else
            {
              if ((a2 & 0x80000000) != 0) {
                uint64_t v30 = a2 ^ 0x80000000;
              }
              else {
                uint64_t v30 = (a2 - 1);
              }
              *uint64_t v29 = v30;
            }
          }
          else if (v18)
          {
            int v28 = ~v11 + a2;
            bzero(a1, v18);
            *(_DWORD *)a1 = v28;
          }
        }
        else
        {
          uint64_t v27 = *(void (**)(unint64_t, uint64_t, uint64_t))(v12 + 56);
          v27((unint64_t)&a1[v19] & v24, a2, v13);
        }
      }
      return;
  }
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<SearchFieldConfigurationTokenFieldStyle.BodyView<ForEach<Binding<[AnyToken]>, AnyHashable, ModifiedContent<MergePlatformItemsView<AnyView>, _PreferenceTransformModifier<PlatformItemList.Key>>>>, PickerStyleWriter<SectionPickerStyle>>, StyleContextWriter<MenuStyleContext>>, ViewInputFlagModifier<AllowSectionPickerLabels>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<SearchFieldConfigurationTokenFieldStyle.BodyView<ForEach<Binding<[AnyToken]>, AnyHashable, ModifiedContent<MergePlatformItemsView<AnyView>, _PreferenceTransformModifier<PlatformItemList.Key>>>>, PickerStyleWriter<SectionPickerStyle>>, StyleContextWriter<MenuStyleContext>>, ViewInputFlagModifier<AllowSectionPickerLabels>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<SearchFieldConfigurationTokenFieldStyle.BodyView<ForEach<Binding<[AnyToken]>, AnyHashable, ModifiedContent<MergePlatformItemsView<AnyView>, _PreferenceTransformModifier<PlatformItemList.Key>>>>, PickerStyleWriter<SectionPickerStyle>>, StyleContextWriter<MenuStyleContext>>, ViewInputFlagModifier<AllowSectionPickerLabels>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<SearchFieldConfigurationTokenFieldStyle.BodyView<ForEach<Binding<[AnyToken]>, AnyHashable, ModifiedContent<MergePlatformItemsView<AnyView>, _PreferenceTransformModifier<PlatformItemList.Key>>>>, PickerStyleWriter<SectionPickerStyle>>, StyleContextWriter<MenuStyleContext>>, ViewInputFlagModifier<AllowSectionPickerLabels>>(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<SearchFieldConfigurationTokenFieldStyle.BodyView<ForEach<Binding<[AnyToken]>, AnyHashable, ModifiedContent<MergePlatformItemsView<AnyView>, _PreferenceTransformModifier<PlatformItemList.Key>>>>, PickerStyleWriter<SectionPickerStyle>>, StyleContextWriter<MenuStyleContext>>, ViewInputFlagModifier<AllowSectionPickerLabels>>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<SearchFieldConfigurationTokenFieldStyle.BodyView<ForEach<Binding<[AnyToken]>, AnyHashable, ModifiedContent<MergePlatformItemsView<AnyView>, _PreferenceTransformModifier<PlatformItemList.Key>>>>, PickerStyleWriter<SectionPickerStyle>>, StyleContextWriter<MenuStyleContext>>, (uint64_t (*)(uint64_t))type metadata accessor for ViewInputFlagModifier<AllowSectionPickerLabels>, MEMORY[0x1E4F3FBA0]);
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<SearchFieldConfigurationTokenFieldStyle.BodyView<ForEach<Binding<[AnyToken]>, AnyHashable, ModifiedContent<MergePlatformItemsView<AnyView>, _PreferenceTransformModifier<PlatformItemList.Key>>>>, PickerStyleWriter<SectionPickerStyle>>, StyleContextWriter<MenuStyleContext>> and conformance <> ModifiedContent<A, B>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<SearchFieldConfigurationTokenFieldStyle.BodyView<ForEach<Binding<[AnyToken]>, AnyHashable, ModifiedContent<MergePlatformItemsView<AnyView>, _PreferenceTransformModifier<PlatformItemList.Key>>>>, PickerStyleWriter<SectionPickerStyle>>, StyleContextWriter<MenuStyleContext>>, ViewInputFlagModifier<AllowSectionPickerLabels>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for ViewInputFlagModifier<AllowSectionPickerLabels>()
{
  if (!lazy cache variable for type metadata for ViewInputFlagModifier<AllowSectionPickerLabels>)
  {
    lazy protocol witness table accessor for type AllowSectionPickerLabels and conformance AllowSectionPickerLabels();
    unint64_t v0 = type metadata accessor for ViewInputFlagModifier();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ViewInputFlagModifier<AllowSectionPickerLabels>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<SearchFieldConfigurationTokenFieldStyle.BodyView<ForEach<Binding<[AnyToken]>, AnyHashable, ModifiedContent<MergePlatformItemsView<AnyView>, _PreferenceTransformModifier<PlatformItemList.Key>>>>, PickerStyleWriter<SectionPickerStyle>>, StyleContextWriter<MenuStyleContext>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<SearchFieldConfigurationTokenFieldStyle.BodyView<ForEach<Binding<[AnyToken]>, AnyHashable, ModifiedContent<MergePlatformItemsView<AnyView>, _PreferenceTransformModifier<PlatformItemList.Key>>>>, PickerStyleWriter<SectionPickerStyle>>, StyleContextWriter<MenuStyleContext>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<SearchFieldConfigurationTokenFieldStyle.BodyView<ForEach<Binding<[AnyToken]>, AnyHashable, ModifiedContent<MergePlatformItemsView<AnyView>, _PreferenceTransformModifier<PlatformItemList.Key>>>>, PickerStyleWriter<SectionPickerStyle>>, StyleContextWriter<MenuStyleContext>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<SearchFieldConfigurationTokenFieldStyle.BodyView<ForEach<Binding<[AnyToken]>, AnyHashable, ModifiedContent<MergePlatformItemsView<AnyView>, _PreferenceTransformModifier<PlatformItemList.Key>>>>, PickerStyleWriter<SectionPickerStyle>>, StyleContextWriter<MenuStyleContext>>();
    lazy protocol witness table accessor for type ModifiedContent<SearchFieldConfigurationTokenFieldStyle.BodyView<ForEach<Binding<[AnyToken]>, AnyHashable, ModifiedContent<MergePlatformItemsView<AnyView>, _PreferenceTransformModifier<PlatformItemList.Key>>>>, PickerStyleWriter<SectionPickerStyle>> and conformance <> ModifiedContent<A, B>();
    lazy protocol witness table accessor for type StyleContextWriter<MenuStyleContext> and conformance StyleContextWriter<A>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<SearchFieldConfigurationTokenFieldStyle.BodyView<ForEach<Binding<[AnyToken]>, AnyHashable, ModifiedContent<MergePlatformItemsView<AnyView>, _PreferenceTransformModifier<PlatformItemList.Key>>>>, PickerStyleWriter<SectionPickerStyle>>, StyleContextWriter<MenuStyleContext>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<SearchFieldConfigurationTokenFieldStyle.BodyView<ForEach<Binding<[AnyToken]>, AnyHashable, ModifiedContent<MergePlatformItemsView<AnyView>, _PreferenceTransformModifier<PlatformItemList.Key>>>>, PickerStyleWriter<SectionPickerStyle>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<SearchFieldConfigurationTokenFieldStyle.BodyView<ForEach<Binding<[AnyToken]>, AnyHashable, ModifiedContent<MergePlatformItemsView<AnyView>, _PreferenceTransformModifier<PlatformItemList.Key>>>>, PickerStyleWriter<SectionPickerStyle>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<SearchFieldConfigurationTokenFieldStyle.BodyView<ForEach<Binding<[AnyToken]>, AnyHashable, ModifiedContent<MergePlatformItemsView<AnyView>, _PreferenceTransformModifier<PlatformItemList.Key>>>>, PickerStyleWriter<SectionPickerStyle>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<SearchFieldConfigurationTokenFieldStyle.BodyView<ForEach<Binding<[AnyToken]>, AnyHashable, ModifiedContent<MergePlatformItemsView<AnyView>, _PreferenceTransformModifier<PlatformItemList.Key>>>>, PickerStyleWriter<SectionPickerStyle>>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<SearchFieldConfigurationTokenFieldStyle.BodyView<ForEach<Binding<[AnyToken]>, AnyHashable, ModifiedContent<MergePlatformItemsView<AnyView>, _PreferenceTransformModifier<PlatformItemList.Key>>>>, PickerStyleWriter<SectionPickerStyle>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

_UNKNOWN **base witness table accessor for View in SearchFieldConfigurationTokenFieldStyle.BodyView<A>()
{
  return &protocol witness table for SearchFieldConfigurationTokenFieldStyle.BodyView<A>;
}

void type metadata accessor for [AnyToken](uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

uint64_t partial apply for implicit closure #1 in static SearchFieldConfigurationTokenFieldStyle.BodyView._makeView(view:inputs:)()
{
  return implicit closure #1 in static SearchFieldConfigurationTokenFieldStyle.BodyView._makeView(view:inputs:)();
}

unint64_t lazy protocol witness table accessor for type SearchFieldConfigurationTokenFieldStyle.MakeConfiguration and conformance SearchFieldConfigurationTokenFieldStyle.MakeConfiguration()
{
  unint64_t result = lazy protocol witness table cache variable for type SearchFieldConfigurationTokenFieldStyle.MakeConfiguration and conformance SearchFieldConfigurationTokenFieldStyle.MakeConfiguration;
  if (!lazy protocol witness table cache variable for type SearchFieldConfigurationTokenFieldStyle.MakeConfiguration and conformance SearchFieldConfigurationTokenFieldStyle.MakeConfiguration)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SearchFieldConfigurationTokenFieldStyle.MakeConfiguration and conformance SearchFieldConfigurationTokenFieldStyle.MakeConfiguration);
  }
  return result;
}

void *type metadata accessor for SearchFieldConfigurationTokenFieldStyle.MakeConfiguration()
{
  return &unk_1ED40BE18;
}

void *initializeWithTake for ItemBoundNavigationDestinationModifier(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  unint64_t v5 = (void *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v6 = (void *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
  *unint64_t v5 = *v6;
  uint64_t v7 = *(void *)(a3 + 16);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(unsigned __int8 *)(v8 + 80);
  unsigned int v10 = (void *)(((unint64_t)v5 + v9 + 8) & ~v9);
  unsigned int v11 = (const void *)(((unint64_t)v6 + v9 + 8) & ~v9);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v8 + 48))(v11, 1, v7))
  {
    int v12 = *(_DWORD *)(v8 + 84);
    size_t v13 = *(void *)(v8 + 64);
    if (v12) {
      size_t v14 = v13;
    }
    else {
      size_t v14 = v13 + 1;
    }
    memcpy(v10, v11, v14);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v8 + 32))(v10, v11, v7);
    uint64_t v16 = *(void (**)(void *, void, uint64_t, uint64_t))(v8 + 56);
    uint64_t v15 = v8 + 56;
    v16(v10, 0, 1, v7);
    int v12 = *(_DWORD *)(v15 + 28);
    size_t v13 = *(void *)(v15 + 8);
  }
  size_t v17 = v13 + ((v9 + 16) & ~v9);
  if (!v12) {
    ++v17;
  }
  size_t v18 = (_OWORD *)(((unint64_t)a1 + v17 + 7) & 0xFFFFFFFFFFFFFFF8);
  size_t v19 = (_OWORD *)(((unint64_t)a2 + v17 + 7) & 0xFFFFFFFFFFFFFFF8);
  *size_t v18 = *v19;
  *(void *)(((unint64_t)v18 + 23) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v19 + 23) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

uint64_t type metadata accessor for ItemBoundNavigationDestinationModifier()
{
  return swift_getGenericMetadata();
}

uint64_t associated type witness table accessor for ViewModifier.Body : View in ItemBoundNavigationDestinationModifier<A, B>()
{
  return associated type witness table accessor for View.Body : View in SidebarListBody<A, B>();
}

uint64_t ItemBoundNavigationDestinationModifier.init(item:destination:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  type metadata accessor for Optional();
  uint64_t v8 = type metadata accessor for Binding();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 32))(a4, a1, v8);
  uint64_t result = type metadata accessor for ItemBoundNavigationDestinationModifier();
  unsigned int v10 = (void *)(a4 + *(int *)(result + 52));
  *unsigned int v10 = a2;
  v10[1] = a3;
  *(void *)(a4 + *(int *)(result + 56)) = 0;
  return result;
}

uint64_t ItemBoundNavigationDestinationModifier.body(content:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v61 = a2;
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v5 = type metadata accessor for Optional();
  MEMORY[0x1F4188790](v5);
  unint64_t v58 = (char *)&v43 - v6;
  uint64_t v49 = *(void *)(a1 + 24);
  uint64_t v7 = v49;
  FunctionTypeMetadata1 = swift_getFunctionTypeMetadata1();
  uint64_t v8 = *(void *)(a1 + 32);
  uint64_t v9 = v4;
  uint64_t v48 = v4;
  uint64_t updated = type metadata accessor for UpdateViewDestinationRequestProcessor();
  uint64_t v60 = *(void *)(updated - 8);
  MEMORY[0x1F4188790](updated);
  uint64_t v57 = (uint64_t)&v43 - v10;
  uint64_t v11 = type metadata accessor for Binding();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x1F4188790](v11);
  size_t v14 = (char *)&v43 - v13;
  uint64_t v50 = *(void *)(a1 + 40);
  uint64_t v66 = v9;
  uint64_t v67 = v7;
  uint64_t v68 = v8;
  uint64_t v69 = v50;
  uint64_t v52 = type metadata accessor for BaseModifier();
  uint64_t v56 = *(void *)(v52 - 8);
  MEMORY[0x1F4188790](v52);
  uint64_t v16 = (char *)&v43 - v15;
  uint64_t v44 = (char *)&v43 - v15;
  uint64_t v17 = type metadata accessor for ModifiedContent();
  uint64_t v55 = *(void *)(v17 - 8);
  MEMORY[0x1F4188790](v17);
  int v46 = (char *)&v43 - v18;
  swift_getWitnessTable();
  uint64_t v47 = type metadata accessor for _ViewModifier_Content();
  uint64_t v19 = type metadata accessor for ModifiedContent();
  uint64_t v54 = *(void *)(v19 - 8);
  MEMORY[0x1F4188790](v19);
  uint64_t v45 = (char *)&v43 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v22 = MEMORY[0x1F4188790](v21);
  uint64_t v53 = (char *)&v43 - v23;
  uint64_t v24 = v11;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v12 + 16))(v14, v2, v11, v22);
  unsigned int v25 = (uint64_t *)(v2 + *(int *)(a1 + 52));
  uint64_t v27 = *v25;
  uint64_t v26 = v25[1];
  swift_retain();
  uint64_t v28 = Namespace.wrappedValue.getter();
  BaseModifier.init(item:transform:id:)((uint64_t)v14, v27, v26, v28, (uint64_t)v16);
  uint64_t v29 = (uint64_t)v58;
  MEMORY[0x18C113DA0](v24);
  uint64_t v66 = v27;
  uint64_t v67 = v26;
  swift_retain();
  uint64_t v30 = Namespace.wrappedValue.getter();
  uint64_t v31 = v57;
  UpdateViewDestinationRequestProcessor.init(presentationData:destination:linkID:)(v29, (uint64_t)&v66, v30, FunctionTypeMetadata1, v57);
  uint64_t v32 = v46;
  uint64_t v33 = updated;
  uint64_t v34 = v52;
  long long v35 = v44;
  MEMORY[0x18C10D370](v31, v52, updated, &protocol witness table for BaseModifier<A, B>);
  (*(void (**)(uint64_t, uint64_t))(v60 + 8))(v31, v33);
  (*(void (**)(char *, uint64_t))(v56 + 8))(v35, v34);
  uint64_t v36 = v47;
  uint64_t WitnessTable = swift_getWitnessTable();
  unint64_t v38 = v45;
  MEMORY[0x18C113660](v32, v36, v17, WitnessTable);
  (*(void (**)(char *, uint64_t))(v55 + 8))(v32, v17);
  unsigned int v64 = &protocol witness table for BaseModifier<A, B>;
  uint64_t v65 = &protocol witness table for UpdateViewDestinationRequestProcessor<A, B>;
  uint64_t v39 = swift_getWitnessTable();
  uint64_t v62 = WitnessTable;
  uint64_t v63 = v39;
  swift_getWitnessTable();
  int v40 = v53;
  static ViewBuilder.buildExpression<A>(_:)(v38);
  long long v41 = *(void (**)(char *, uint64_t))(v54 + 8);
  v41(v38, v19);
  static ViewBuilder.buildExpression<A>(_:)(v40);
  return ((uint64_t (*)(char *, uint64_t))v41)(v40, v19);
}

uint64_t BaseModifier.init(item:transform:id:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  type metadata accessor for Optional();
  uint64_t v10 = type metadata accessor for Binding();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 32))(a5, a1, v10);
  uint64_t result = type metadata accessor for BaseModifier();
  uint64_t v12 = (void *)(a5 + *(int *)(result + 52));
  *uint64_t v12 = a2;
  v12[1] = a3;
  *(void *)(a5 + *(int *)(result + 56)) = a4;
  return result;
}

uint64_t type metadata completion function for ItemBoundNavigationDestinationModifier()
{
  type metadata accessor for Optional();
  uint64_t result = type metadata accessor for Binding();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for ItemBoundNavigationDestinationModifier(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = v5;
  int v7 = *(_DWORD *)(v5 + 80);
  uint64_t v8 = v7;
  int v9 = v7 + 16;
  uint64_t v10 = (v8 + 16) & ~v8;
  if (*(_DWORD *)(v5 + 84)) {
    size_t v11 = *(void *)(v5 + 64);
  }
  else {
    size_t v11 = *(void *)(v5 + 64) + 1;
  }
  size_t v12 = v10 + v11;
  int v13 = v7 & 0x100000;
  uint64_t v14 = *a2;
  *a1 = *a2;
  if (v8 > 7
    || v13 != 0
    || ((((v10 + v11 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 8 > 0x18)
  {
    a1 = (uint64_t *)(v14 + ((v8 & 0xF8 ^ 0x1F8) & v9));
  }
  else
  {
    uint64_t v18 = (void *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v19 = (void *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
    *uint64_t v18 = *v19;
    __dst = (void *)(((unint64_t)v18 + v8 + 8) & ~v8);
    uint64_t v20 = (const void *)(((unint64_t)v19 + v8 + 8) & ~v8);
    uint64_t v21 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v5 + 48);
    swift_retain();
    swift_retain();
    if (v21(v20, 1, v4))
    {
      memcpy(__dst, v20, v11);
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v6 + 16))(__dst, v20, v4);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v6 + 56))(__dst, 0, 1, v4);
    }
    double v22 = (void *)(((unint64_t)a1 + v12 + 7) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v23 = (void *)(((unint64_t)a2 + v12 + 7) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v24 = v23[1];
    *double v22 = *v23;
    v22[1] = v24;
    *(void *)(((unint64_t)v22 + 23) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v23 + 23) & 0xFFFFFFFFFFFFFFF8);
  }
  swift_retain();
  return a1;
}

void *initializeWithCopy for ItemBoundNavigationDestinationModifier(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v5 = (void *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v6 = (void *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v5 = *v6;
  uint64_t v7 = *(void *)(a3 + 16);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v10 = (void *)(((unint64_t)v5 + v9 + 8) & ~v9);
  size_t v11 = (const void *)(((unint64_t)v6 + v9 + 8) & ~v9);
  size_t v12 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v8 + 48);
  swift_retain();
  swift_retain();
  if (v12(v11, 1, v7))
  {
    int v13 = *(_DWORD *)(v8 + 84);
    uint64_t v14 = *(void *)(v8 + 64);
    if (v13) {
      size_t v15 = *(void *)(v8 + 64);
    }
    else {
      size_t v15 = v14 + 1;
    }
    memcpy(v10, v11, v15);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v8 + 16))(v10, v11, v7);
    uint64_t v17 = *(void (**)(void *, void, uint64_t, uint64_t))(v8 + 56);
    uint64_t v16 = v8 + 56;
    v17(v10, 0, 1, v7);
    int v13 = *(_DWORD *)(v16 + 28);
    uint64_t v14 = *(void *)(v16 + 8);
  }
  uint64_t v18 = v14 + ((v9 + 16) & ~v9);
  if (!v13) {
    ++v18;
  }
  uint64_t v19 = (void *)(((unint64_t)a1 + v18 + 7) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v20 = (void *)(((unint64_t)a2 + v18 + 7) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v21 = v20[1];
  *uint64_t v19 = *v20;
  v19[1] = v21;
  *(void *)(((unint64_t)v19 + 23) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v20 + 23) & 0xFFFFFFFFFFFFFFF8);
  swift_retain();
  return a1;
}

void *assignWithCopy for ItemBoundNavigationDestinationModifier(void *a1, void *a2, uint64_t a3)
{
  unint64_t v6 = (unint64_t)a2 + 15;
  *a1 = *a2;
  swift_retain();
  swift_release();
  uint64_t v7 = (void *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v8 = v6 & 0xFFFFFFFFFFFFFFF8;
  *uint64_t v7 = *(void *)(v6 & 0xFFFFFFFFFFFFFFF8);
  swift_retain();
  swift_release();
  uint64_t v9 = *(void *)(a3 + 16);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(unsigned __int8 *)(v10 + 80);
  size_t v12 = (void *)(((unint64_t)v7 + v11 + 8) & ~v11);
  int v13 = (void *)((v11 + 8 + v8) & ~v11);
  uint64_t v14 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v10 + 48);
  LODWORD(v8) = v14(v12, 1, v9);
  int v15 = v14(v13, 1, v9);
  if (v8)
  {
    if (v15)
    {
      int v16 = *(_DWORD *)(v10 + 84);
      size_t v17 = *(void *)(v10 + 64);
LABEL_6:
      if (v16) {
        size_t v18 = v17;
      }
      else {
        size_t v18 = v17 + 1;
      }
      memcpy(v12, v13, v18);
      goto LABEL_12;
    }
    (*(void (**)(void *, void *, uint64_t))(v10 + 16))(v12, v13, v9);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v12, 0, 1, v9);
  }
  else
  {
    if (v15)
    {
      (*(void (**)(void *, uint64_t))(v10 + 8))(v12, v9);
      int v16 = *(_DWORD *)(v10 + 84);
      size_t v17 = *(void *)(v10 + 64);
      goto LABEL_6;
    }
    (*(void (**)(void *, void *, uint64_t))(v10 + 24))(v12, v13, v9);
  }
LABEL_12:
  uint64_t v19 = *(void *)(v10 + 64) + ((v11 + 16) & ~v11);
  if (!*(_DWORD *)(v10 + 84)) {
    ++v19;
  }
  uint64_t v20 = (void *)(((unint64_t)a1 + v19 + 7) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v21 = (void *)(((unint64_t)a2 + v19 + 7) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v22 = v21[1];
  *uint64_t v20 = *v21;
  v20[1] = v22;
  swift_retain();
  swift_release();
  *(void *)(((unint64_t)v20 + 23) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v21 + 23) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

void *assignWithTake for ItemBoundNavigationDestinationModifier(void *a1, void *a2, uint64_t a3)
{
  unint64_t v6 = (unint64_t)a2 + 15;
  *a1 = *a2;
  swift_release();
  uint64_t v7 = (void *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v8 = v6 & 0xFFFFFFFFFFFFFFF8;
  *uint64_t v7 = *(void *)(v6 & 0xFFFFFFFFFFFFFFF8);
  swift_release();
  uint64_t v9 = *(void *)(a3 + 16);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(unsigned __int8 *)(v10 + 80);
  size_t v12 = (void *)(((unint64_t)v7 + v11 + 8) & ~v11);
  int v13 = (void *)((v11 + 8 + v8) & ~v11);
  uint64_t v14 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v10 + 48);
  int v15 = v14(v12, 1, v9);
  int v16 = v14(v13, 1, v9);
  if (v15)
  {
    if (v16)
    {
      int v17 = *(_DWORD *)(v10 + 84);
      size_t v18 = *(void *)(v10 + 64);
LABEL_6:
      if (v17) {
        size_t v19 = v18;
      }
      else {
        size_t v19 = v18 + 1;
      }
      memcpy(v12, v13, v19);
      goto LABEL_12;
    }
    (*(void (**)(void *, void *, uint64_t))(v10 + 32))(v12, v13, v9);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v12, 0, 1, v9);
  }
  else
  {
    if (v16)
    {
      (*(void (**)(void *, uint64_t))(v10 + 8))(v12, v9);
      int v17 = *(_DWORD *)(v10 + 84);
      size_t v18 = *(void *)(v10 + 64);
      goto LABEL_6;
    }
    (*(void (**)(void *, void *, uint64_t))(v10 + 40))(v12, v13, v9);
  }
LABEL_12:
  uint64_t v20 = *(void *)(v10 + 64) + ((v11 + 16) & ~v11);
  if (!*(_DWORD *)(v10 + 84)) {
    ++v20;
  }
  uint64_t v21 = (_OWORD *)(((unint64_t)a1 + v20 + 7) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v22 = (uint64_t)a2 + v20 + 7;
  unint64_t v23 = (v22 & 0xFFFFFFFFFFFFFFF8) + 23;
  *uint64_t v21 = *(_OWORD *)(v22 & 0xFFFFFFFFFFFFFFF8);
  swift_release();
  *(void *)(((unint64_t)v21 + 23) & 0xFFFFFFFFFFFFFFF8) = *(void *)(v23 & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

uint64_t getEnumTagSinglePayload for ItemBoundNavigationDestinationModifier(_DWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v5 = v4;
  int v6 = *(_DWORD *)(v4 + 84);
  if (v6) {
    unsigned int v7 = v6 - 1;
  }
  else {
    unsigned int v7 = 0;
  }
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = v7;
  }
  uint64_t v9 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v10 = 7;
  if (!v6) {
    uint64_t v10 = 8;
  }
  if (!a2) {
    return 0;
  }
  if (v8 < a2)
  {
    unint64_t v11 = ((((v10 + *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) + ((v9 + 16) & ~v9)) & 0xFFFFFFFFFFFFFFF8)
          + 23) & 0xFFFFFFFFFFFFFFF8)
        + 8;
    unsigned int v12 = a2 - v8;
    uint64_t v13 = v11 & 0xFFFFFFF8;
    if ((v11 & 0xFFFFFFF8) != 0) {
      unsigned int v14 = 2;
    }
    else {
      unsigned int v14 = v12 + 1;
    }
    if (v14 >= 0x10000) {
      unsigned int v15 = 4;
    }
    else {
      unsigned int v15 = 2;
    }
    if (v14 < 0x100) {
      unsigned int v15 = 1;
    }
    if (v14 >= 2) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = 0;
    }
    switch(v16)
    {
      case 1:
        int v17 = *((unsigned __int8 *)a1 + v11);
        if (!v17) {
          break;
        }
        goto LABEL_27;
      case 2:
        int v17 = *(unsigned __int16 *)((char *)a1 + v11);
        if (v17) {
          goto LABEL_27;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x187BC8F34);
      case 4:
        int v17 = *(_DWORD *)((char *)a1 + v11);
        if (!v17) {
          break;
        }
LABEL_27:
        int v19 = v17 - 1;
        if (v13)
        {
          int v19 = 0;
          LODWORD(v13) = *a1;
        }
        return v8 + (v13 | v19) + 1;
      default:
        break;
    }
  }
  uint64_t v20 = (unint64_t *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  if ((v7 & 0x80000000) != 0)
  {
    unsigned int v22 = (*(uint64_t (**)(unint64_t))(v5 + 48))(((unint64_t)v20 + v9 + 8) & ~v9);
    if (v22 >= 2) {
      return v22 - 1;
    }
    else {
      return 0;
    }
  }
  else
  {
    unint64_t v21 = *v20;
    if (v21 >= 0xFFFFFFFF) {
      LODWORD(v21) = -1;
    }
    return (v21 + 1);
  }
}

void storeEnumTagSinglePayload for ItemBoundNavigationDestinationModifier(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  int v6 = 0;
  uint64_t v7 = *(void *)(*(void *)(a4 + 16) - 8);
  int v8 = *(_DWORD *)(v7 + 84);
  unsigned int v9 = v8 - 1;
  if (!v8) {
    unsigned int v9 = 0;
  }
  if (v9 <= 0x7FFFFFFF) {
    unsigned int v10 = 0x7FFFFFFF;
  }
  else {
    unsigned int v10 = v9;
  }
  uint64_t v11 = *(unsigned __int8 *)(v7 + 80);
  size_t v12 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  if (!v8) {
    ++v12;
  }
  size_t v13 = ((((v12 + ((v11 + 16) & ~v11) + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 8;
  if (v10 < a3)
  {
    unsigned int v14 = a3 - v10;
    if (((((v12 + ((v11 + 16) & ~v11) + 7) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8) == 0xFFFFFFF8) {
      unsigned int v15 = v14 + 1;
    }
    else {
      unsigned int v15 = 2;
    }
    if (v15 >= 0x10000) {
      int v16 = 4;
    }
    else {
      int v16 = 2;
    }
    if (v15 < 0x100) {
      int v16 = 1;
    }
    if (v15 >= 2) {
      int v6 = v16;
    }
    else {
      int v6 = 0;
    }
  }
  if (a2 > v10)
  {
    if (((((v12 + ((v11 + 16) & ~v11) + 7) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8) == 0xFFFFFFF8) {
      int v17 = a2 - v10;
    }
    else {
      int v17 = 1;
    }
    if (((((v12 + ((v11 + 16) & ~v11) + 7) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8) != 0xFFFFFFF8)
    {
      int v18 = ~v10 + a2;
      bzero(a1, v13);
      *(_DWORD *)a1 = v18;
    }
    switch(v6)
    {
      case 1:
        a1[v13] = v17;
        return;
      case 2:
        *(_WORD *)&a1[v13] = v17;
        return;
      case 3:
        goto LABEL_59;
      case 4:
        *(_DWORD *)&a1[v13] = v17;
        return;
      default:
        return;
    }
  }
  switch(v6)
  {
    case 1:
      a1[v13] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_35;
    case 2:
      *(_WORD *)&a1[v13] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_35;
    case 3:
LABEL_59:
      __break(1u);
      JUMPOUT(0x187BC91E8);
    case 4:
      *(_DWORD *)&a1[v13] = 0;
      goto LABEL_34;
    default:
LABEL_34:
      if (a2)
      {
LABEL_35:
        int v19 = (void *)((unint64_t)(a1 + 15) & 0xFFFFFFFFFFFFFFF8);
        if ((v9 & 0x80000000) != 0)
        {
          unint64_t v21 = (unsigned char *)(((unint64_t)v19 + v11 + 8) & ~v11);
          if (v9 >= a2)
          {
            uint64_t v25 = a2 + 1;
            uint64_t v26 = *(void (**)(unint64_t, uint64_t))(v7 + 56);
            v26(((unint64_t)v19 + v11 + 8) & ~v11, v25);
          }
          else
          {
            if (v12 <= 3) {
              int v22 = ~(-1 << (8 * v12));
            }
            else {
              int v22 = -1;
            }
            if (v12)
            {
              int v23 = v22 & (~v9 + a2);
              if (v12 <= 3) {
                int v24 = v12;
              }
              else {
                int v24 = 4;
              }
              bzero(v21, v12);
              switch(v24)
              {
                case 2:
                  *(_WORD *)unint64_t v21 = v23;
                  break;
                case 3:
                  *(_WORD *)unint64_t v21 = v23;
                  v21[2] = BYTE2(v23);
                  break;
                case 4:
                  *(_DWORD *)unint64_t v21 = v23;
                  break;
                default:
                  *unint64_t v21 = v23;
                  break;
              }
            }
          }
        }
        else
        {
          if ((a2 & 0x80000000) != 0) {
            uint64_t v20 = a2 ^ 0x80000000;
          }
          else {
            uint64_t v20 = a2 - 1;
          }
          *int v19 = v20;
        }
      }
      return;
  }
}

uint64_t sub_187BC9220()
{
  return swift_getWitnessTable();
}

_UNKNOWN **base witness table accessor for ViewModifier in BaseModifier<A, B>()
{
  return &protocol witness table for BaseModifier<A, B>;
}

uint64_t static BaseModifier._makeView(modifier:inputs:body:)@<X0>(int *a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, unint64_t *)@<X2>, uint64_t a4@<X3>, unint64_t a5@<X4>, unint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v77 = a4;
  unint64_t v78 = a5;
  uint64_t v75 = a9;
  char v76 = a3;
  int v12 = *a1;
  unint64_t v13 = *(void *)a2;
  unsigned int v67 = *(_DWORD *)(a2 + 8);
  uint64_t v14 = *(void *)(a2 + 16);
  uint64_t v68 = *(void *)(a2 + 24);
  uint64_t v69 = *(void *)(a2 + 32);
  uint64_t v16 = *(void *)(a2 + 40);
  uint64_t v15 = *(void *)(a2 + 48);
  uint64_t v70 = *(void *)(a2 + 56);
  int v17 = *(_DWORD *)(a2 + 68);
  int v71 = *(_DWORD *)(a2 + 64);
  int v72 = v17;
  int v18 = *(_DWORD *)(a2 + 76);
  int v19 = *(_DWORD *)(a2 + 80);
  int v73 = *(_DWORD *)(a2 + 72);
  int v74 = v18;
  lazy protocol witness table accessor for type IsInNavigationV4Context and conformance IsInNavigationV4Context();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  PropertyList.subscript.getter();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  if (v83 == 1)
  {
    LODWORD(v60) = v12;
    unint64_t v65 = a6;
    uint64_t v63 = a7;
    int v64 = v19;
    lazy protocol witness table accessor for type IsInLazyContainer and conformance IsInLazyContainer();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    PropertyList.subscript.getter();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    unint64_t v20 = v78;
    unint64_t v83 = 0;
    unint64_t v84 = 0xE000000000000000;
    _StringGuts.grow(_:)(429);
    v21._object = (void *)0x8000000188334000;
    v21._countAndFlagsBits = 0x1000000000000181;
    String.append(_:)(v21);
    type metadata accessor for Optional();
    swift_getMetatypeMetadata();
    uint64_t v79 = String.init<A>(describing:)();
    unint64_t v80 = v22;
    v23._countAndFlagsBits = String.init<A>(_:)();
    String.append(_:)(v23);
    swift_bridgeObjectRelease();
    v24._countAndFlagsBits = 0xD00000000000002ALL;
    v24._object = (void *)0x8000000188334190;
    String.append(_:)(v24);
    MEMORY[0x18C112B90](0, 0xE000000000000000);
    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type NavigationAuthority.ListSelectionCanonicalIDKey and conformance NavigationAuthority.ListSelectionCanonicalIDKey();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    PropertyList.subscript.getter();
    uint64_t v66 = v15;
    swift_bridgeObjectRelease();
    uint64_t v59 = v16;
    swift_bridgeObjectRelease();
    uint64_t v58 = v14;
    swift_release();
    swift_release();
    uint64_t v61 = 0;
    uint64_t v62 = 0xE000000000000000;
    unint64_t v25 = v65;
    uint64_t v56 = &v53;
    uint64_t v26 = MEMORY[0x18C112B90](0xD00000000000006ALL, 0x8000000188333F90);
    MEMORY[0x1F4188790](v26);
    _OWORD v52[2] = v20;
    v52[3] = v25;
    v52[4] = a7;
    v52[5] = a8;
    LODWORD(v79) = v12;
    unint64_t v83 = v20;
    unint64_t v84 = v25;
    *(void *)&long long v85 = a7;
    *((void *)&v85 + 1) = a8;
    type metadata accessor for BaseModifier();
    type metadata accessor for _GraphValue();
    type metadata accessor for Optional();
    type metadata accessor for Binding();
    _GraphValue.subscript.getter();
    type metadata accessor for _GraphValue();
    uint64_t v27 = _GraphValue.value.getter();
    unsigned int v57 = v27;
    *(void *)&long long v55 = v52;
    MEMORY[0x1F4188790](v27);
    unint64_t v28 = v20;
    v52[-4] = v20;
    v52[-3] = v25;
    uint64_t v29 = a7;
    v52[-2] = a7;
    v52[-1] = a8;
    LODWORD(v79) = v12;
    unint64_t v83 = v28;
    unint64_t v84 = v25;
    unint64_t v30 = v28;
    *(void *)&long long v85 = a7;
    *((void *)&v85 + 1) = a8;
    type metadata accessor for BaseModifier.Transform();
    _GraphValue.subscript.getter();
    type metadata accessor for _GraphValue();
    uint64_t v31 = _GraphValue.value.getter();
    LODWORD(v56) = v31;
    MEMORY[0x1F4188790](v31);
    v52[-4] = v30;
    v52[-3] = v25;
    v52[-2] = a7;
    v52[-1] = a8;
    LODWORD(v83) = v12;
    uint64_t v32 = MEMORY[0x1E4F41808];
    _GraphValue.subscript.getter();
    _s7SwiftUI11_GraphValueVyAA9NamespaceV2IDVGMaTm_0(0, &lazy cache variable for type metadata for _GraphValue<Namespace.ID>, v32, MEMORY[0x1E4F3F590]);
    unsigned int v33 = _GraphValue.value.getter();
    lazy protocol witness table accessor for type NavigationAuthority.DepthKey and conformance NavigationAuthority.DepthKey();
    swift_retain_n();
    uint64_t v34 = v58;
    swift_retain_n();
    uint64_t v35 = v59;
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    PropertyList.subscript.getter();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    unsigned int v36 = v83;
    lazy protocol witness table accessor for type NavigationAuthority.StackKeyViewInputKey and conformance NavigationAuthority.StackKeyViewInputKey();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    PropertyList.subscript.getter();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    *(void *)&long long v37 = v83;
    long long v60 = v37;
    lazy protocol witness table accessor for type NavigationAuthority.ListKeyViewInputKey and conformance NavigationAuthority.ListKeyViewInputKey();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    PropertyList.subscript.getter();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    *(void *)&long long v38 = v83;
    long long v55 = v38;
    lazy protocol witness table accessor for type NavigationAuthority.ViewInputKey and conformance NavigationAuthority.ViewInputKey();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    PropertyList.subscript.getter();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    *(void *)&long long v39 = v83;
    long long v54 = v39;
    lazy protocol witness table accessor for type NavigationAuthority.SeedInputs and conformance NavigationAuthority.SeedInputs();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    PropertyList.subscript.getter();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    swift_release_n();
    swift_release_n();
    *(void *)&long long v40 = v83;
    long long v53 = v40;
    uint64_t v41 = v78;
    unint64_t v42 = v65;
    unint64_t v83 = v78;
    unint64_t v84 = v65;
    *(void *)&long long v85 = v29;
    *((void *)&v85 + 1) = a8;
    type metadata accessor for BaseModifier.Presenter();
    unint64_t v83 = __PAIR64__(v57, v56);
    unint64_t v84 = __PAIR64__(v33, v36);
    *(void *)&long long v43 = v60;
    *((void *)&v43 + 1) = v55;
    *(void *)&long long v44 = v54;
    *((void *)&v44 + 1) = v53;
    long long v85 = v43;
    long long v86 = v44;
    uint64_t v45 = v61;
    uint64_t v46 = v62;
    uint64_t v87 = v61;
    uint64_t v88 = v62;
    outlined copy of Text.LineStyle?(v61, v62);
    outlined copy of Text.LineStyle?(v45, v46);
    uint64_t v79 = v41;
    unint64_t v80 = v42;
    uint64_t v81 = v29;
    uint64_t v82 = a8;
    type metadata accessor for BaseModifier.Child();
    swift_getWitnessTable();
    _GraphValue.init<A>(_:)();
    unint64_t v83 = v13;
    LODWORD(v84) = v67;
    *(void *)&long long v85 = v34;
    *((void *)&v85 + 1) = v68;
    *(void *)&long long v86 = v69;
    *((void *)&v86 + 1) = v35;
    uint64_t v87 = v66;
    uint64_t v88 = v70;
    int v89 = v71;
    int v90 = v72;
    int v91 = v73;
    int v92 = v74;
    int v93 = v64;
    swift_getWitnessTable();
    static ViewModifier.makeDebuggableView(modifier:inputs:body:)();
    outlined consume of Text.LineStyle?(v45, v46);
    return outlined consume of Text.LineStyle?(v45, v46);
  }
  else
  {
    _StringGuts.grow(_:)(207);
    v48._countAndFlagsBits = 0xD0000000000000B7;
    v48._object = (void *)0x8000000188333ED0;
    String.append(_:)(v48);
    type metadata accessor for Optional();
    swift_getMetatypeMetadata();
    v49._countAndFlagsBits = String.init<A>(describing:)();
    String.append(_:)(v49);
    swift_bridgeObjectRelease();
    v50._object = (void *)0x8000000188328660;
    v50._countAndFlagsBits = 0xD000000000000016;
    String.append(_:)(v50);
    MEMORY[0x18C112B90](0, 0xE000000000000000);
    uint64_t v51 = swift_bridgeObjectRelease();
    unint64_t v83 = v13;
    unint64_t v84 = v67 | 0xE000000000000000;
    *(void *)&long long v85 = v14;
    *((void *)&v85 + 1) = v68;
    *(void *)&long long v86 = v69;
    *((void *)&v86 + 1) = v16;
    uint64_t v87 = v15;
    uint64_t v88 = v70;
    int v89 = v71;
    int v90 = v72;
    int v91 = v73;
    int v92 = v74;
    int v93 = v19;
    return v76(v51, &v83);
  }
}

uint64_t closure #1 in static BaseModifier._makeView(modifier:inputs:body:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v11 = a2;
  uint64_t v12 = a3;
  uint64_t v13 = a4;
  uint64_t v14 = a5;
  void v9[2] = type metadata accessor for BaseModifier();
  type metadata accessor for Optional();
  uint64_t v10 = type metadata accessor for Binding();
  uint64_t v6 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(a1, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply, (uint64_t)v9, v10, MEMORY[0x1E4FBC248], v6, MEMORY[0x1E4FBC278], v7);
  return v11;
}

uint64_t closure #2 in static BaseModifier._makeView(modifier:inputs:body:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v17 = a2;
  uint64_t v18 = a3;
  uint64_t v19 = a4;
  uint64_t v20 = a5;
  uint64_t v10 = type metadata accessor for BaseModifier();
  uint64_t v11 = a1 + *(int *)(v10 + 52);
  v15[2] = v10;
  uint64_t v17 = a2;
  uint64_t v18 = a3;
  uint64_t v19 = a4;
  uint64_t v20 = a5;
  uint64_t v16 = type metadata accessor for BaseModifier.Transform();
  uint64_t v12 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v11, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply, (uint64_t)v15, v16, MEMORY[0x1E4FBC248], v12, MEMORY[0x1E4FBC278], v13);
  return v17;
}

uint64_t closure #3 in static BaseModifier._makeView(modifier:inputs:body:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v13 = a2;
  uint64_t v14 = a3;
  uint64_t v15 = a4;
  uint64_t v16 = a5;
  uint64_t v6 = type metadata accessor for BaseModifier();
  uint64_t v7 = a1 + *(int *)(v6 + 56);
  _OWORD v12[2] = v6;
  uint64_t v8 = MEMORY[0x1E4F41808];
  uint64_t v9 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v7, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply, (uint64_t)v12, v8, MEMORY[0x1E4FBC248], v9, MEMORY[0x1E4FBC278], v10);
  return v13;
}

uint64_t BaseModifier.Child.item.getter@<X0>(uint64_t a1@<X8>)
{
  type metadata accessor for Optional();
  uint64_t v2 = type metadata accessor for Binding();
  uint64_t Value = AGGraphGetValue();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16);

  return v4(a1, Value, v2);
}

uint64_t BaseModifier.Child.requestKey.getter@<X0>(uint64_t a1@<X8>)
{
  unsigned int v2 = *v1;
  unsigned int v3 = v1[1];
  unsigned int v4 = v1[2];
  unsigned int v5 = v1[3];
  unsigned int v6 = v1[4];
  unsigned int v7 = v1[5];
  unsigned int v9 = v1[6];
  unsigned int v8 = v1[7];
  unsigned int v10 = v1[8];
  unsigned int v24 = v1[10];
  unsigned int v25 = v1[9];
  unsigned int v23 = v1[11];
  uint64_t v22 = *((void *)v1 + 6);
  uint64_t v21 = *((void *)v1 + 7);
  BaseModifier.Child.listKey.getter(v35);
  unint64_t v27 = __PAIR64__(v3, v2);
  unint64_t v28 = __PAIR64__(v5, v4);
  *(void *)&long long v29 = __PAIR64__(v7, v6);
  *((void *)&v29 + 1) = __PAIR64__(v8, v9);
  unsigned int v30 = v10;
  unsigned int v31 = v25;
  unint64_t v32 = __PAIR64__(v23, v24);
  uint64_t v33 = v22;
  uint64_t v34 = v21;
  uint64_t v11 = BaseModifier.Child.stackKey.getter();
  unsigned __int8 v13 = v12;
  unint64_t v15 = v14;
  uint64_t result = outlined init with take of NavigationState.ListKey??((uint64_t)v35, (uint64_t)v36);
  if (v37 == 2
    || (_s7SwiftUI19NavigationAuthorityVSgWObTm_1((uint64_t)v36, (uint64_t)v38, &lazy cache variable for type metadata for NavigationState.ListKey?, (uint64_t)&type metadata for NavigationState.ListKey), uint64_t result = _s7SwiftUI19NavigationAuthorityVSgWObTm_1((uint64_t)v38, (uint64_t)&v27, &lazy cache variable for type metadata for NavigationState.ListKey?, (uint64_t)&type metadata for NavigationState.ListKey), v17 = v32, v32 == 1))
  {
    if ((v13 & 0xFE) == 6)
    {
      uint64_t v11 = 0;
      unint64_t v18 = 0;
      unint64_t v17 = 0;
      long long v19 = 0uLL;
      uint64_t v20 = 0x1FFFFFFFELL;
    }
    else
    {
      uint64_t v20 = 0;
      unint64_t v17 = 0;
      unint64_t v18 = v13;
      long long v19 = v15;
    }
  }
  else
  {
    uint64_t v11 = v27;
    unint64_t v18 = v28;
    long long v19 = v29;
    uint64_t v20 = v30 | 0x4000000000000000;
  }
  *(void *)a1 = v11;
  *(void *)(a1 + 8) = v18;
  *(_OWORD *)(a1 + 16) = v19;
  *(void *)(a1 + 32) = v20;
  *(void *)(a1 + 40) = v17;
  return result;
}

uint64_t BaseModifier.Child.value.getter@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = a1;
  uint64_t v41 = a2;
  uint64_t v40 = *(void *)(a1 + 16);
  type metadata accessor for Optional();
  uint64_t v4 = type metadata accessor for Binding();
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v51 = (uint64_t)&v36 - v5;
  unsigned int v6 = *v2;
  unsigned int v7 = v2[1];
  unsigned int v8 = v2[2];
  unsigned int v53 = v2[3];
  unsigned int v9 = v2[4];
  unsigned int v10 = v2[5];
  unsigned int v11 = v2[6];
  unsigned int v55 = v2[7];
  unsigned int v12 = v2[9];
  unsigned int v56 = v2[8];
  unsigned int v54 = v12;
  uint64_t v13 = v2[10];
  uint64_t v44 = v2[11];
  uint64_t v14 = *((void *)v2 + 7);
  uint64_t v52 = *((void *)v2 + 6);
  *(void *)&long long v65 = __PAIR64__(v7, v6);
  unsigned int v48 = v6;
  unsigned int v46 = v7;
  *((void *)&v65 + 1) = __PAIR64__(v53, v8);
  unint64_t v66 = __PAIR64__(v10, v9);
  unsigned int v47 = v10;
  unsigned int v67 = v11;
  unsigned int v68 = v55;
  unsigned int v45 = v11;
  unsigned int v69 = v56;
  unsigned int v70 = v12;
  int v71 = v13;
  int v72 = v44;
  uint64_t v49 = v13;
  uint64_t v73 = v52;
  uint64_t v74 = v14;
  uint64_t v50 = v3;
  uint64_t v39 = specialized BaseModifier.Child.transform.getter();
  uint64_t v37 = v15;
  *(void *)&long long v65 = __PAIR64__(v7, v6);
  unsigned int v42 = v8;
  unsigned int v16 = v53;
  *((void *)&v65 + 1) = __PAIR64__(v53, v8);
  unint64_t v66 = __PAIR64__(v10, v9);
  unsigned int v43 = v9;
  unsigned int v17 = v55;
  unsigned int v67 = v11;
  unsigned int v68 = v55;
  unsigned int v18 = v54;
  unsigned int v69 = v56;
  unsigned int v70 = v54;
  int v71 = v13;
  LODWORD(v13) = v44;
  int v72 = v44;
  uint64_t v19 = v52;
  uint64_t v73 = v52;
  uint64_t v74 = v14;
  BaseModifier.Child.item.getter(v51);
  uint64_t v38 = *(void *)AGGraphGetValue();
  uint64_t v20 = *(void *)AGGraphGetValue();
  *(void *)&long long v62 = 0;
  *((void *)&v62 + 1) = v19;
  uint64_t v21 = v19;
  uint64_t v63 = v14;
  uint64_t v64 = v20;
  long long v36 = xmmword_18834BB90;
  long long v61 = xmmword_18834BB90;
  LODWORD(v3) = v48;
  LODWORD(v19) = v46;
  *(void *)&long long v65 = __PAIR64__(v46, v48);
  *((void *)&v65 + 1) = __PAIR64__(v16, v8);
  unsigned int v22 = v47;
  unint64_t v66 = __PAIR64__(v47, v9);
  unsigned int v23 = v45;
  unsigned int v67 = v45;
  unsigned int v68 = v17;
  unsigned int v24 = v56;
  unsigned int v69 = v56;
  unsigned int v70 = v18;
  int v25 = v49;
  int v71 = v49;
  int v72 = v13;
  uint64_t v73 = v21;
  uint64_t v74 = v14;
  BaseModifier.Child.requestKey.getter((uint64_t)v75);
  *(void *)&long long v65 = __PAIR64__(v19, v3);
  *((void *)&v65 + 1) = __PAIR64__(v53, v42);
  unint64_t v66 = __PAIR64__(v22, v43);
  uint64_t v26 = v52;
  unsigned int v67 = v23;
  unsigned int v68 = v55;
  unsigned int v69 = v24;
  unsigned int v70 = v54;
  int v71 = v25;
  int v72 = v13;
  uint64_t v73 = v52;
  uint64_t v74 = v14;
  BaseModifier.Child.authority.getter((uint64_t)v60);
  _s7SwiftUI19NavigationAuthorityVSgWOcTm_3((uint64_t)v60, (uint64_t)v58, (uint64_t)&lazy cache variable for type metadata for NavigationAuthority??, (uint64_t)&lazy cache variable for type metadata for NavigationAuthority?, (uint64_t)&type metadata for NavigationAuthority, (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))type metadata accessor for NavigationAuthority??);
  if (v59 == 2)
  {
    long long v65 = v36;
    unint64_t v66 = 0;
    uint64_t v27 = v37;
    swift_retain();
    outlined copy of Text.LineStyle?(v26, v14);
  }
  else
  {
    _s7SwiftUI19NavigationAuthorityVSgWObTm_1((uint64_t)v58, (uint64_t)v57, &lazy cache variable for type metadata for NavigationAuthority?, (uint64_t)&type metadata for NavigationAuthority);
    uint64_t v28 = MEMORY[0x1E4FBB718];
    _s7SwiftUI19NavigationAuthorityVSgWOcTm_3((uint64_t)v57, (uint64_t)&v65, (uint64_t)&lazy cache variable for type metadata for NavigationAuthority?, (uint64_t)&type metadata for NavigationAuthority, MEMORY[0x1E4FBB718], (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))_s7SwiftUI11_GraphValueVyAA9NamespaceV2IDVGMaTm_0);
    uint64_t v27 = v37;
    swift_retain();
    outlined copy of Text.LineStyle?(v26, v14);
    _s7SwiftUI19NavigationAuthorityVSgWOhTm_1((uint64_t)v57, (uint64_t)&lazy cache variable for type metadata for NavigationAuthority?, (uint64_t)&type metadata for NavigationAuthority, v28, (uint64_t (*)(void))_s7SwiftUI11_GraphValueVyAA9NamespaceV2IDVGMaTm_0);
  }
  long long v29 = v41;
  uint64_t v30 = v51;
  uint64_t v31 = v39;
  uint64_t v32 = v38;
  _s7SwiftUI19NavigationAuthorityVSgWOhTm_1((uint64_t)v60, (uint64_t)&lazy cache variable for type metadata for NavigationAuthority??, (uint64_t)&lazy cache variable for type metadata for NavigationAuthority?, (uint64_t)&type metadata for NavigationAuthority, (uint64_t (*)(void))type metadata accessor for NavigationAuthority??);
  Weakuint64_t Value = (uint64_t *)AGGraphGetWeakValue();
  if (WeakValue) {
    uint64_t v34 = *WeakValue;
  }
  else {
    uint64_t v34 = -1;
  }
  return BaseModifier.Presenter.init(transform:item:depth:selectionIdentifier:viewListID:key:authority:navigationStateSeeds:)(v31, v27, v30, v32, &v62, (uint64_t *)&v61, (uint64_t)v75, (uint64_t)&v65, v29, v34);
}

uint64_t BaseModifier.Presenter.init(transform:item:depth:selectionIdentifier:viewListID:key:authority:navigationStateSeeds:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, long long *a5@<X4>, uint64_t *a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, void *a9@<X8>, uint64_t a10)
{
  long long v23 = *a5;
  uint64_t v14 = *((void *)a5 + 2);
  uint64_t v13 = *((void *)a5 + 3);
  uint64_t v16 = *a6;
  uint64_t v15 = a6[1];
  *a9 = a1;
  a9[1] = a2;
  unsigned int v17 = (int *)type metadata accessor for BaseModifier.Presenter();
  unsigned int v18 = (char *)a9 + v17[13];
  type metadata accessor for Optional();
  uint64_t v19 = type metadata accessor for Binding();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v19 - 8) + 32))(v18, a3, v19);
  *(void *)((char *)a9 + v17[14]) = a4;
  uint64_t v20 = (char *)a9 + v17[15];
  *(_OWORD *)uint64_t v20 = v23;
  *((void *)v20 + 2) = v14;
  *((void *)v20 + 3) = v13;
  uint64_t v21 = (void *)((char *)a9 + v17[16]);
  *uint64_t v21 = v16;
  v21[1] = v15;
  _s7SwiftUI19NavigationAuthorityVSgWObTm_1(a7, (uint64_t)a9 + v17[17], &lazy cache variable for type metadata for NavigationRequest.KeyKind?, (uint64_t)&type metadata for NavigationRequest.KeyKind);
  uint64_t result = _s7SwiftUI19NavigationAuthorityVSgWObTm_1(a8, (uint64_t)a9 + v17[18], &lazy cache variable for type metadata for NavigationAuthority?, (uint64_t)&type metadata for NavigationAuthority);
  *(void *)((char *)a9 + v17[19]) = a10;
  return result;
}

uint64_t protocol witness for static Rule.initialValue.getter in conformance BaseModifier<A, B>.Child@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for BaseModifier.Presenter();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56))(a1, 1, 1, v2);
}

uint64_t BaseModifier.Presenter.authorityIsPresenting.getter(int *a1)
{
  _s7SwiftUI19NavigationAuthorityVSgWOcTm_3(v1 + a1[18], (uint64_t)v28, (uint64_t)&lazy cache variable for type metadata for NavigationAuthority?, (uint64_t)&type metadata for NavigationAuthority, MEMORY[0x1E4FBB718], (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))_s7SwiftUI11_GraphValueVyAA9NamespaceV2IDVGMaTm_0);
  if (v29 == 1)
  {
    _s7SwiftUI19NavigationAuthorityVSgWOhTm_1((uint64_t)v28, (uint64_t)&lazy cache variable for type metadata for NavigationAuthority?, (uint64_t)&type metadata for NavigationAuthority, MEMORY[0x1E4FBB718], (uint64_t (*)(void))_s7SwiftUI11_GraphValueVyAA9NamespaceV2IDVGMaTm_0);
    LOBYTE(Strong) = 0;
  }
  else
  {
    outlined init with take of NavigationAuthority((uint64_t)v28, (uint64_t)v30);
    uint64_t v4 = v1 + a1[17];
    unint64_t v5 = *(void *)(v4 + 32);
    if (v5 >> 1 == 0xFFFFFFFF)
    {
      outlined destroy of NavigationAuthority((uint64_t)v30);
      LOBYTE(Strong) = 0;
    }
    else
    {
      uint64_t v6 = *(void *)(v4 + 40);
      long long v7 = *(_OWORD *)(v4 + 16);
      v31[0] = *(_OWORD *)v4;
      v31[1] = v7;
      unint64_t v32 = v5;
      uint64_t v33 = v6;
      unsigned int v8 = (uint64_t *)(v1 + a1[15]);
      uint64_t v10 = *v8;
      uint64_t v9 = v8[1];
      uint64_t v11 = v8[2];
      uint64_t v12 = v8[3];
      uint64_t Strong = swift_weakLoadStrong();
      if (Strong)
      {
        swift_beginAccess();
        _s7SwiftUI19NavigationAuthorityVSgWObTm_1(Strong + 16, (uint64_t)v27, (unint64_t *)&lazy cache variable for type metadata for NavigationState?, (uint64_t)&type metadata for NavigationState);
        swift_retain();
        outlined copy of Text.LineStyle?(v9, v11);
        outlined retain of NavigationState?((uint64_t)v27, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))outlined copy of NavigationState?);
        swift_release();
        _s7SwiftUI19NavigationAuthorityVSgWObTm_1((uint64_t)v27, (uint64_t)v28, (unint64_t *)&lazy cache variable for type metadata for NavigationState?, (uint64_t)&type metadata for NavigationState);
        if (getEnumTag for AccessibilityActionCategory.Category((uint64_t)v28) == 1)
        {
          swift_release();
          outlined consume of Text.LineStyle?(v9, v11);
          LOBYTE(Strong) = 0;
        }
        else
        {
          _s7SwiftUI19NavigationAuthorityVSgWObTm_1((uint64_t)v27, (uint64_t)v25, (unint64_t *)&lazy cache variable for type metadata for NavigationState?, (uint64_t)&type metadata for NavigationState);
          long long v21 = v25[6];
          long long v22 = v25[7];
          long long v23 = v25[8];
          __int16 v24 = v26;
          long long v17 = v25[2];
          long long v18 = v25[3];
          long long v19 = v25[4];
          long long v20 = v25[5];
          long long v15 = v25[0];
          long long v16 = v25[1];
          v14[0] = v10;
          v14[1] = v9;
          long long v14[2] = v11;
          void v14[3] = v12;
          LOBYTE(Strong) = NavigationState.isPresentingView(_:from:)(v14, (uint64_t)v31);
          outlined retain of NavigationState?((uint64_t)v27, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))outlined consume of NavigationState?);
          swift_release();
          outlined consume of Text.LineStyle?(v9, v11);
        }
      }
      outlined destroy of NavigationAuthority((uint64_t)v30);
    }
  }
  return Strong & 1;
}

uint64_t BaseModifier.Presenter.request.getter@<X0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  int v71 = a2;
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v5 = type metadata accessor for Optional();
  uint64_t v63 = type metadata accessor for Binding();
  *(void *)&long long v67 = *(void *)(v63 - 8);
  MEMORY[0x1F4188790](v63);
  unint64_t v66 = (char *)&v61 - v6;
  uint64_t v7 = *(void *)(a1 + 24);
  MEMORY[0x1F4188790](v8);
  uint64_t v73 = (uint64_t)&v61 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v75 = *(char **)(v4 - 8);
  MEMORY[0x1F4188790](v10);
  int v72 = (char *)&v61 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v13 = TupleTypeMetadata2 - 8;
  MEMORY[0x1F4188790](TupleTypeMetadata2);
  long long v15 = (char *)&v61 - v14;
  uint64_t v16 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v17);
  long long v19 = (char *)&v61 - v18;
  uint64_t v76 = v4;
  uint64_t v77 = v7;
  uint64_t v65 = v7;
  uint64_t v20 = *(void *)(a1 + 40);
  uint64_t v62 = *(void *)(a1 + 32);
  uint64_t v78 = v62;
  uint64_t v79 = v20;
  unint64_t v80 = v2;
  static Update.dispatchImmediately<A>(_:)();
  unsigned int v68 = (int *)a1;
  uint64_t v74 = (void (**)(char *))v2;
  char v21 = BaseModifier.Presenter.authorityIsPresenting.getter((int *)a1);
  uint64_t v22 = *(int *)(v13 + 56);
  long long v23 = v75;
  uint64_t v70 = v16;
  uint64_t v24 = v5;
  uint64_t v25 = v4;
  __int16 v26 = *(void (**)(char *, char *))(v16 + 16);
  uint64_t v69 = v24;
  v26(v15, v19);
  v15[v22] = v21 & 1;
  if ((*((unsigned int (**)(char *, uint64_t, uint64_t))v23 + 6))(v15, 1, v4) == 1)
  {
    if ((v21 & 1) == 0)
    {
      uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v70 + 8))(v19, v69);
      unsigned int v47 = v71;
      v71[6] = 0u;
      v47[7] = 0u;
      v47[4] = 0u;
      v47[5] = 0u;
      _OWORD v47[2] = 0u;
      _OWORD v47[3] = 0u;
      *unsigned int v47 = 0u;
      v47[1] = 0u;
      *((void *)v47 + 16) = 0x1FFFFFFFCLL;
      *((void *)v47 + 17) = 0;
      *((void *)v47 + 18) = 0;
      *((void *)v47 + 19) = 0;
      return result;
    }
    uint64_t v64 = v19;
    uint64_t v27 = v68[18];
    uint64_t v28 = (char **)((char *)v74 + v68[17]);
    uint64_t v29 = (uint64_t)v28[1];
    int v72 = *v28;
    uint64_t v73 = v29;
    uint64_t v30 = v28[3];
    uint64_t v75 = v28[2];
    unint64_t v31 = (unint64_t)v28[4];
    unint64_t v32 = v28[5];
    uint64_t v33 = (uint64_t *)((char *)v74 + v68[15]);
    uint64_t v35 = *v33;
    uint64_t v34 = v33[1];
    uint64_t v36 = v33[2];
    *(void *)&long long v67 = v33[3];
    _s7SwiftUI19NavigationAuthorityVSgWOcTm_3((uint64_t)v74 + v27, (uint64_t)v95, (uint64_t)&lazy cache variable for type metadata for NavigationAuthority?, (uint64_t)&type metadata for NavigationAuthority, MEMORY[0x1E4FBB718], (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))_s7SwiftUI11_GraphValueVyAA9NamespaceV2IDVGMaTm_0);
    uint64_t v37 = v71;
    _OWORD *v71 = xmmword_18834BB90;
    *((void *)v37 + 2) = 0;
    if (v31 >> 1 == 0xFFFFFFFF)
    {
      _s7SwiftUI17NavigationRequestVSgWOi0_((uint64_t)&v81);
    }
    else
    {
      swift_retain();
      outlined copy of Text.LineStyle?(v34, v36);
      swift_retain();
      outlined copy of Text.LineStyle?(v34, v36);
      swift_retain();
      unsigned int v56 = v30;
      char v57 = Transaction.disablesAnimations.getter();
      swift_release();
      swift_release();
      outlined consume of Text.LineStyle?(v34, v36);
      uint64_t v81 = v35;
      uint64_t v82 = v34;
      *(void *)&long long v83 = v36;
      *((void *)&v83 + 1) = v67;
      long long v84 = 0u;
      long long v85 = 0u;
      char v86 = 19;
      uint64_t v87 = v72;
      uint64_t v88 = v73;
      int v89 = v75;
      int v90 = v56;
      unint64_t v91 = v31;
      int v92 = v32;
      char v93 = v57 & 1;
      uint64_t v94 = 0;
      destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(&v81, v58, v59, v60);
    }
    _s7SwiftUI19NavigationAuthorityVSgWObTm_1((uint64_t)&v81, (uint64_t)v96, &lazy cache variable for type metadata for NavigationRequest?, (uint64_t)&type metadata for NavigationRequest);
    _s7SwiftUI19NavigationAuthorityVSgWObTm_1((uint64_t)v96, (uint64_t)v37 + 24, &lazy cache variable for type metadata for NavigationRequest?, (uint64_t)&type metadata for NavigationRequest);
    outlined assign with take of NavigationAuthority?((uint64_t)v95, (uint64_t)v37);
  }
  else
  {
    uint64_t v64 = v19;
    uint64_t v38 = v66;
    uint64_t v39 = v67;
    uint64_t v61 = v20;
    uint64_t v40 = v72;
    (*((void (**)(char *, char *, uint64_t))v23 + 4))(v72, v15, v4);
    uint64_t v41 = v74;
    (*v74)(v40);
    if (v21)
    {
      unsigned int v42 = v68;
      _s7SwiftUI19NavigationAuthorityVSgWObTm_1((uint64_t)v41 + v68[17], (uint64_t)v96, &lazy cache variable for type metadata for NavigationRequest.KeyKind?, (uint64_t)&type metadata for NavigationRequest.KeyKind);
      unsigned int v43 = (char *)v41 + v42[15];
      uint64_t v44 = v23;
      uint64_t v45 = *((void *)v43 + 1);
      uint64_t v81 = *(void *)v43;
      uint64_t v82 = v45;
      long long v67 = *((_OWORD *)v43 + 1);
      long long v83 = v67;
      _s7SwiftUI19NavigationAuthorityVSgWOcTm_3((uint64_t)v41 + v42[18], (uint64_t)v95, (uint64_t)&lazy cache variable for type metadata for NavigationAuthority?, (uint64_t)&type metadata for NavigationAuthority, MEMORY[0x1E4FBB718], (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))_s7SwiftUI11_GraphValueVyAA9NamespaceV2IDVGMaTm_0);
      swift_retain();
      outlined copy of Text.LineStyle?(v45, v67);
      UpdateViewDestinationRequest.init<A>(updateDestination:key:identifier:shouldTargetSourceColumn:navigationAuthority:)(v73, (uint64_t)v96, &v81, 1, (uint64_t)v95, v65, (uint64_t)v71);
      (*((void (**)(char *, uint64_t))v44 + 1))(v72, v4);
    }
    else
    {
      unsigned int v48 = v68;
      uint64_t v49 = (uint64_t *)((char *)v41 + v68[13]);
      uint64_t v50 = (uint64_t)v38;
      (*(void (**)(char *, uint64_t *, uint64_t))(v39 + 16))(v38, v49, v63);
      _s7SwiftUI19NavigationAuthorityVSgWObTm_1((uint64_t)v41 + v48[17], (uint64_t)v96, &lazy cache variable for type metadata for NavigationRequest.KeyKind?, (uint64_t)&type metadata for NavigationRequest.KeyKind);
      uint64_t v51 = *(uint64_t *)((char *)v41 + v48[14]);
      uint64_t v52 = (char *)v41 + v48[15];
      unsigned int v53 = v41;
      uint64_t v54 = *((void *)v52 + 1);
      uint64_t v81 = *(void *)v52;
      uint64_t v82 = v54;
      long long v67 = *((_OWORD *)v52 + 1);
      long long v83 = v67;
      _s7SwiftUI19NavigationAuthorityVSgWOcTm_3((uint64_t)v53 + v48[18], (uint64_t)v95, (uint64_t)&lazy cache variable for type metadata for NavigationAuthority?, (uint64_t)&type metadata for NavigationAuthority, MEMORY[0x1E4FBB718], (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))_s7SwiftUI11_GraphValueVyAA9NamespaceV2IDVGMaTm_0);
      uint64_t v55 = *v49;
      swift_retain();
      outlined copy of Text.LineStyle?(v54, v67);
      swift_retain();
      UpdateViewDestinationRequest.init<A, B>(presentDestination:item:key:depth:selectionIdentifier:navigationAuthority:transaction:)(v73, v50, (uint64_t)v96, v51, &v81, (uint64_t)v95, v55, v25, (uint64_t)v71, v65, v62, v61);
      (*((void (**)(char *, uint64_t))v23 + 1))(v72, v25);
    }
  }
  return (*(uint64_t (**)(char *, uint64_t))(v70 + 8))(v64, v69);
}

uint64_t closure #1 in BaseModifier.Presenter.request.getter()
{
  type metadata accessor for BaseModifier.Presenter();
  type metadata accessor for Optional();
  uint64_t v0 = type metadata accessor for Binding();
  return MEMORY[0x18C113DA0](v0);
}

uint64_t UpdateViewDestinationRequest.init<A, B>(presentDestination:item:key:depth:selectionIdentifier:navigationAuthority:transaction:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12)
{
  _s7SwiftUI19NavigationAuthorityVSgWObTm_1(a3, (uint64_t)v42, &lazy cache variable for type metadata for NavigationRequest.KeyKind?, (uint64_t)&type metadata for NavigationRequest.KeyKind);
  uint64_t v16 = v42[0];
  uint64_t v30 = v42[2];
  uint64_t v31 = v42[1];
  uint64_t v28 = v42[4];
  uint64_t v29 = v42[3];
  uint64_t v27 = v42[5];
  uint64_t v17 = *a5;
  uint64_t v18 = a5[1];
  uint64_t v19 = a5[2];
  uint64_t v32 = a5[3];
  *(_OWORD *)a9 = xmmword_18834BB90;
  *(void *)(a9 + 16) = 0;
  _s7SwiftUI17NavigationRequestVSgWOi0_((uint64_t)v46);
  _s7SwiftUI19NavigationAuthorityVSgWObTm_1((uint64_t)v46, a9 + 24, &lazy cache variable for type metadata for NavigationRequest?, (uint64_t)&type metadata for NavigationRequest);
  _s7SwiftUI19NavigationAuthorityVSgWObTm_1(a3, (uint64_t)v43, &lazy cache variable for type metadata for NavigationRequest.KeyKind?, (uint64_t)&type metadata for NavigationRequest.KeyKind);
  if (v44 >> 1 == 0xFFFFFFFF)
  {
    swift_release();
    swift_release();
    outlined consume of Text.LineStyle?(v18, v19);
    _s7SwiftUI19NavigationAuthorityVSgWObTm_1((uint64_t)v46, (uint64_t)v45, &lazy cache variable for type metadata for NavigationRequest?, (uint64_t)&type metadata for NavigationRequest);
    uint64_t v20 = a10;
    uint64_t v21 = a1;
  }
  else
  {
    v45[0] = v16;
    v45[1] = v31;
    _OWORD v45[2] = v30;
    v45[3] = v29;
    v45[4] = v28;
    v45[5] = v27;
    uint64_t v20 = a10;
    uint64_t v21 = a1;
    closure #1 in UpdateViewDestinationRequest.init<A, B>(presentDestination:item:key:depth:selectionIdentifier:navigationAuthority:transaction:)((uint64_t)v45, a1, a7, a4, v17, v18, v19, v32, (uint64_t)v38, a2, a8, a10, a11, a12);
    swift_release();
    swift_release();
    outlined consume of Text.LineStyle?(v18, v19);
    v40[6] = v38[6];
    v40[7] = v38[7];
    uint64_t v41 = v39;
    v40[2] = v38[2];
    v40[3] = v38[3];
    v40[4] = v38[4];
    v40[5] = v38[5];
    v40[0] = v38[0];
    v40[1] = v38[1];
    destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(v40, v22, v23, v24);
    _s7SwiftUI19NavigationAuthorityVSgWObTm_1((uint64_t)v40, (uint64_t)v45, &lazy cache variable for type metadata for NavigationRequest?, (uint64_t)&type metadata for NavigationRequest);
  }
  type metadata accessor for Optional();
  uint64_t v25 = type metadata accessor for Binding();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v25 - 8) + 8))(a2, v25);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v20 - 8) + 8))(v21, v20);
  _s7SwiftUI19NavigationAuthorityVSgWObTm_1(a9 + 24, (uint64_t)v40, &lazy cache variable for type metadata for NavigationRequest?, (uint64_t)&type metadata for NavigationRequest);
  outlined release of NavigationRequest?((uint64_t)v40);
  _s7SwiftUI19NavigationAuthorityVSgWObTm_1((uint64_t)v45, a9 + 24, &lazy cache variable for type metadata for NavigationRequest?, (uint64_t)&type metadata for NavigationRequest);
  return outlined assign with take of NavigationAuthority?(a6, a9);
}

uint64_t BaseModifier.Presenter.body(content:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 - 8);
  uint64_t v4 = *(void *)(v3 + 64);
  double v5 = MEMORY[0x1F4188790](a1);
  uint64_t v8 = (uint64_t *)(v7 + *(int *)(v6 + 60));
  uint64_t v9 = *v8;
  uint64_t v10 = v8[1];
  uint64_t v11 = v8[2];
  uint64_t v12 = v8[3];
  (*(void (**)(char *, uint64_t, uint64_t, double))(v3 + 16))((char *)v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v7, a2, v5);
  unint64_t v13 = (*(unsigned __int8 *)(v3 + 80) + 80) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v14 = swift_allocObject();
  long long v15 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(v14 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(v14 + 32) = v15;
  *(void *)(v14 + 48) = v9;
  *(void *)(v14 + 56) = v10;
  *(void *)(v14 + 64) = v11;
  *(void *)(v14 + 72) = v12;
  (*(void (**)(unint64_t, char *, uint64_t))(v3 + 32))(v14 + v13, (char *)v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), a2);
  swift_retain();
  outlined copy of Text.LineStyle?(v10, v11);
  swift_getWitnessTable();
  type metadata accessor for _ViewModifier_Content();
  uint64_t WitnessTable = swift_getWitnessTable();
  View.transformPreference<A>(_:_:)();
  swift_release();
  v20[0] = v21;
  v20[1] = v22;
  type metadata accessor for _PreferenceTransformModifier<UpdateViewDestinationRequest.UpdateViewDestinationRequestKey>();
  type metadata accessor for ModifiedContent();
  unint64_t updated = lazy protocol witness table accessor for type _PreferenceTransformModifier<UpdateViewDestinationRequest.UpdateViewDestinationRequestKey> and conformance _PreferenceTransformModifier<A>();
  v19[0] = WitnessTable;
  v19[1] = updated;
  swift_getWitnessTable();
  static ViewBuilder.buildExpression<A>(_:)(v20);
  swift_release();
  uint64_t v21 = v23;
  uint64_t v22 = v24;
  static ViewBuilder.buildExpression<A>(_:)(&v21);
  return swift_release();
}

uint64_t closure #1 in BaseModifier.Presenter.body(content:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  swift_retain();
  outlined copy of Text.LineStyle?(a3, a4);
  *(void *)&long long v18 = a7;
  *((void *)&v18 + 1) = a8;
  uint64_t v19 = a9;
  uint64_t v20 = a10;
  uint64_t v16 = type metadata accessor for BaseModifier.Presenter();
  BaseModifier.Presenter.request.getter(v16, &v18);
  return specialized Dictionary.subscript.setter((uint64_t)&v18, a2, a3, a4, a5);
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance BaseModifier<A, B>@<X0>(int *a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, unint64_t *)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  return static BaseModifier._makeView(modifier:inputs:body:)(a1, a2, a3, a4, *(void *)(a5 + 16), *(void *)(a5 + 24), *(void *)(a5 + 32), *(void *)(a5 + 40), a6);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance BaseModifier<A, B>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F40FF3F8](a1, a2, a3, a4, a5, WitnessTable);
}

uint64_t closure #1 in UpdateViewDestinationRequest.init<A, B>(presentDestination:item:key:depth:selectionIdentifier:navigationAuthority:transaction:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v26 = a7;
  uint64_t v27 = a8;
  uint64_t v25 = a6;
  uint64_t v32 = a3;
  uint64_t v33 = a4;
  uint64_t v30 = a9;
  uint64_t v31 = a2;
  uint64_t v28 = a12;
  uint64_t v29 = a13;
  type metadata accessor for Optional();
  uint64_t v16 = type metadata accessor for Binding();
  uint64_t v17 = *(void *)(v16 - 8);
  MEMORY[0x1F4188790](v16);
  uint64_t v19 = (char *)&v25 - v18;
  outlined init with take of NavigationRequest.KeyKind(a1, (uint64_t)v38);
  uint64_t v34 = a5;
  uint64_t v35 = v25;
  uint64_t v36 = v26;
  uint64_t v37 = v27;
  (*(void (**)(char *, uint64_t, uint64_t))(v17 + 16))(v19, a10, v16);
  unint64_t v20 = (*(unsigned __int8 *)(v17 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80);
  uint64_t v21 = (char *)swift_allocObject();
  uint64_t v23 = v28;
  uint64_t v22 = v29;
  *((void *)v21 + 2) = a11;
  *((void *)v21 + 3) = v23;
  *((void *)v21 + 4) = v22;
  *((void *)v21 + 5) = a14;
  (*(void (**)(char *, char *, uint64_t))(v17 + 32))(&v21[v20], v19, v16);
  static NavigationRequest.programmaticallyPresentView<A>(_:from:transaction:depth:identifier:dismiss:)(v31, (uint64_t)v38, v33, (uint64_t)partial apply for closure #1 in closure #1 in UpdateViewDestinationRequest.init<A, B>(presentDestination:item:key:depth:selectionIdentifier:navigationAuthority:transaction:), (uint64_t)v21, v30);
  return swift_release();
}

uint64_t closure #1 in closure #1 in UpdateViewDestinationRequest.init<A, B>(presentDestination:item:key:depth:selectionIdentifier:navigationAuthority:transaction:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = type metadata accessor for Optional();
  uint64_t v4 = *(void *)(v3 - 8);
  double v5 = MEMORY[0x1F4188790](v3);
  uint64_t v7 = (char *)&v9 - v6;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t, double))(*(void *)(a2 - 8) + 56))((char *)&v9 - v6, 1, 1, a2, v5);
  type metadata accessor for Binding();
  specialized Binding.wrappedValue.setter();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v7, v3);
}

uint64_t partial apply for closure #1 in static BaseModifier._makeView(modifier:inputs:body:)(uint64_t a1)
{
  return closure #1 in static BaseModifier._makeView(modifier:inputs:body:)(a1, v1[2], v1[3], v1[4], v1[5]);
}

{
  uint64_t v1;

  return closure #1 in static BaseModifier._makeView(modifier:inputs:body:)(a1, *(void *)(v1 + 16));
}

uint64_t partial apply for closure #2 in static BaseModifier._makeView(modifier:inputs:body:)(uint64_t a1)
{
  return closure #2 in static BaseModifier._makeView(modifier:inputs:body:)(a1, v1[2], v1[3], v1[4], v1[5]);
}

{
  return closure #2 in static BaseModifier._makeView(modifier:inputs:body:)(a1);
}

uint64_t partial apply for closure #3 in static BaseModifier._makeView(modifier:inputs:body:)(uint64_t a1)
{
  return closure #3 in static BaseModifier._makeView(modifier:inputs:body:)(a1, v1[2], v1[3], v1[4], v1[5]);
}

{
  return closure #3 in static BaseModifier._makeView(modifier:inputs:body:)(a1);
}

uint64_t type metadata accessor for BaseModifier.Presenter()
{
  return swift_getGenericMetadata();
}

uint64_t destroy for BaseModifier.Child(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 56);
  if (result != 1) {
    return swift_release();
  }
  return result;
}

uint64_t initializeWithCopy for BaseModifier.Child(uint64_t a1, uint64_t a2)
{
  long long v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  uint64_t v4 = (_OWORD *)(a2 + 48);
  uint64_t v5 = *(void *)(a2 + 56);
  if (v5 == 1)
  {
    *(_OWORD *)(a1 + 48) = *v4;
  }
  else
  {
    *(void *)(a1 + 48) = *(void *)v4;
    *(void *)(a1 + 56) = v5;
    swift_retain();
  }
  return a1;
}

uint64_t assignWithCopy for BaseModifier.Child(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  long long v3 = (_OWORD *)(a1 + 48);
  uint64_t v4 = (_OWORD *)(a2 + 48);
  uint64_t v5 = *(void *)(a2 + 56);
  if (*(void *)(a1 + 56) != 1)
  {
    if (v5 != 1)
    {
      *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
      *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
      *(void *)(a1 + 56) = *(void *)(a2 + 56);
      swift_retain();
      swift_release();
      return a1;
    }
    outlined destroy of _ViewList_ID.Canonical(a1 + 48);
    goto LABEL_6;
  }
  if (v5 == 1)
  {
LABEL_6:
    _OWORD *v3 = *v4;
    return a1;
  }
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_retain();
  return a1;
}

uint64_t assignWithTake for BaseModifier.Child(uint64_t a1, uint64_t a2)
{
  long long v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  uint64_t v4 = (_OWORD *)(a1 + 48);
  uint64_t v5 = (void *)(a2 + 48);
  if (*(void *)(a1 + 56) != 1)
  {
    uint64_t v6 = *(void *)(a2 + 56);
    if (v6 != 1)
    {
      *(void *)(a1 + 48) = *v5;
      *(void *)(a1 + 56) = v6;
      swift_release();
      return a1;
    }
    outlined destroy of _ViewList_ID.Canonical((uint64_t)v4);
  }
  *uint64_t v4 = *(_OWORD *)v5;
  return a1;
}

uint64_t getEnumTagSinglePayload for BaseModifier.Child(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 > 0x7FFFFFFD && *(unsigned char *)(a1 + 64)) {
    return (*(_DWORD *)a1 + 2147483646);
  }
  unint64_t v3 = *(void *)(a1 + 56);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  BOOL v5 = __OFSUB__(v4, 1);
  int v6 = v4 - 1;
  if (v6 < 0 != v5) {
    int v6 = -1;
  }
  return (v6 + 1);
}

uint64_t storeEnumTagSinglePayload for BaseModifier.Child(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFD)
  {
    *(void *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)uint64_t result = a2 - 2147483646;
    if (a3 > 0x7FFFFFFD) {
      *(unsigned char *)(result + 64) = 1;
    }
  }
  else
  {
    if (a3 > 0x7FFFFFFD) {
      *(unsigned char *)(result + 64) = 0;
    }
    if (a2) {
      *(void *)(result + 56) = a2 + 1;
    }
  }
  return result;
}

uint64_t type metadata completion function for BaseModifier.Presenter()
{
  type metadata accessor for Optional();
  uint64_t result = type metadata accessor for Binding();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

unint64_t destroy for BaseModifier.Presenter(uint64_t a1, uint64_t a2)
{
  swift_release();
  uint64_t v4 = *(void *)(a2 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v7 = (a1 + (v6 | 7) + 16) & ~(v6 | 7);
  swift_release();
  swift_release();
  unint64_t v8 = (v6 + ((v7 + 15) & 0xFFFFFFFFFFFFFFF8) + 8) & ~v6;
  if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v5 + 48))(v8, 1, v4)) {
    (*(void (**)(unint64_t, uint64_t))(v5 + 8))(v8, v4);
  }
  uint64_t v9 = ((v6 + 16) & ~v6) + *(void *)(v5 + 64) + v7;
  if (!*(_DWORD *)(v5 + 84)) {
    ++v9;
  }
  unint64_t v10 = (((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  swift_release();
  if (*(void *)(v10 + 16) != 1) {
    swift_release();
  }
  unint64_t v11 = (v10 + 39) & 0xFFFFFFFFFFFFFFF8;
  unint64_t result = *(void *)(v11 + 8);
  LODWORD(v13) = -1;
  if (result < 0xFFFFFFFF) {
    uint64_t v13 = *(void *)(v11 + 8);
  }
  if ((int)v13 - 1 < 0) {
    unint64_t result = swift_release();
  }
  unint64_t v14 = *(void *)(((((v11 + 23) & 0xFFFFFFFFFFFFFFF8) + 55) & 0xFFFFFFFFFFFFFFF8) + 8);
  if (v14 >= 0xFFFFFFFF) {
    LODWORD(v14) = -1;
  }
  if ((int)v14 - 1 < 0)
  {
    swift_weakDestroy();
    swift_release();
    return swift_release();
  }
  return result;
}

void *initializeWithCopy for BaseModifier.Presenter(void *a1, void *a2, uint64_t a3)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = v6;
  uint64_t v8 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v9 = (v8 | 7) + 16;
  uint64_t v39 = a1;
  uint64_t v10 = ((unint64_t)a1 + v9) & ~(v8 | 7);
  uint64_t v40 = ((unint64_t)a2 + v9) & ~(v8 | 7);
  *(void *)uint64_t v10 = *(void *)v40;
  unint64_t v11 = (void *)((v10 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v12 = (void *)((v40 + 15) & 0xFFFFFFFFFFFFFFF8);
  *unint64_t v11 = *v12;
  uint64_t v13 = (void *)(((unint64_t)v11 + v8 + 8) & ~v8);
  unint64_t v14 = (const void *)(((unint64_t)v12 + v8 + 8) & ~v8);
  long long v15 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v6 + 48);
  swift_retain();
  swift_retain();
  swift_retain();
  if (v15(v14, 1, v5))
  {
    int v16 = *(_DWORD *)(v7 + 84);
    size_t v17 = *(void *)(v7 + 64);
    if (v16) {
      size_t v18 = v17;
    }
    else {
      size_t v18 = v17 + 1;
    }
    memcpy(v13, v14, v18);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v7 + 16))(v13, v14, v5);
    unint64_t v20 = *(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56);
    uint64_t v19 = v7 + 56;
    v20(v13, 0, 1, v5);
    int v16 = *(_DWORD *)(v19 + 28);
    size_t v17 = *(void *)(v19 + 8);
  }
  size_t v21 = v17 + ((v8 + 16) & ~v8);
  if (!v16) {
    ++v21;
  }
  uint64_t v22 = (void *)(((v10 | 7) + v21) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v23 = (void *)(((v40 | 7) + v21) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v22 = *v23;
  unint64_t v24 = ((unint64_t)v22 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v25 = ((unint64_t)v23 + 15) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v24 = *(void *)v25;
  uint64_t v26 = *(void *)(v25 + 16);
  swift_retain();
  if (v26 == 1)
  {
    *(_OWORD *)(v24 + 8) = *(_OWORD *)(v25 + 8);
  }
  else
  {
    *(_DWORD *)(v24 + 8) = *(_DWORD *)(v25 + 8);
    *(_DWORD *)(v24 + 12) = *(_DWORD *)(v25 + 12);
    *(void *)(v24 + 16) = *(void *)(v25 + 16);
    swift_retain();
  }
  *(void *)(v24 + 24) = *(void *)(v25 + 24);
  unint64_t v27 = (v24 + 39) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v28 = (v25 + 39) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v29 = *(void *)(v28 + 8);
  if (v29 >= 0xFFFFFFFF) {
    LODWORD(v29) = -1;
  }
  if ((int)v29 - 1 < 0)
  {
    *(_DWORD *)unint64_t v27 = *(_DWORD *)v28;
    *(_DWORD *)(v27 + 4) = *(_DWORD *)(v28 + 4);
    *(void *)(v27 + 8) = *(void *)(v28 + 8);
    swift_retain();
  }
  else
  {
    *(_OWORD *)unint64_t v27 = *(_OWORD *)v28;
  }
  uint64_t v30 = (_OWORD *)((v27 + 23) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v31 = (long long *)((v28 + 23) & 0xFFFFFFFFFFFFFFF8);
  long long v32 = *v31;
  long long v33 = v31[2];
  v30[1] = v31[1];
  v30[2] = v33;
  *uint64_t v30 = v32;
  unint64_t v34 = ((unint64_t)v30 + 55) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v35 = ((unint64_t)v31 + 55) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v36 = *(void *)(v35 + 8);
  if (v36 >= 0xFFFFFFFF) {
    LODWORD(v36) = -1;
  }
  if ((int)v36 - 1 < 0)
  {
    swift_weakCopyInit();
    *(void *)(v34 + 8) = *(void *)(v35 + 8);
    *(void *)(v34 + 16) = *(void *)(v35 + 16);
    swift_retain();
    swift_retain();
  }
  else
  {
    long long v37 = *(_OWORD *)v35;
    *(void *)(v34 + 16) = *(void *)(v35 + 16);
    *(_OWORD *)unint64_t v34 = v37;
  }
  *(void *)((v34 + 27) & 0xFFFFFFFFFFFFFFF8) = *(void *)((v35 + 27) & 0xFFFFFFFFFFFFFFF8);
  return v39;
}

void *assignWithCopy for BaseModifier.Presenter(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_retain();
  swift_release();
  uint64_t v7 = *(void *)(a3 + 16);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v10 = (v9 | 7) + 16;
  unsigned int v48 = a1;
  uint64_t v11 = ((unint64_t)a1 + v10) & ~(v9 | 7);
  uint64_t v12 = ((unint64_t)a2 + v10) & ~(v9 | 7);
  *(void *)uint64_t v11 = *(void *)v12;
  swift_retain();
  swift_release();
  uint64_t v13 = (void *)((v11 + 15) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v14 = (void *)((v12 + 15) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v13 = *v14;
  swift_retain();
  swift_release();
  long long v15 = (void *)(((unint64_t)v13 + v9 + 8) & ~v9);
  int v16 = (void *)(((unint64_t)v14 + v9 + 8) & ~v9);
  size_t v17 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v8 + 48);
  LODWORD(v13) = v17(v15, 1, v7);
  int v18 = v17(v16, 1, v7);
  if (v13)
  {
    if (!v18)
    {
      (*(void (**)(void *, void *, uint64_t))(v8 + 16))(v15, v16, v7);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v8 + 56))(v15, 0, 1, v7);
      goto LABEL_12;
    }
    int v19 = *(_DWORD *)(v8 + 84);
    size_t v20 = *(void *)(v8 + 64);
  }
  else
  {
    if (!v18)
    {
      (*(void (**)(void *, void *, uint64_t))(v8 + 24))(v15, v16, v7);
      goto LABEL_12;
    }
    (*(void (**)(void *, uint64_t))(v8 + 8))(v15, v7);
    int v19 = *(_DWORD *)(v8 + 84);
    size_t v20 = *(void *)(v8 + 64);
  }
  if (v19) {
    size_t v21 = v20;
  }
  else {
    size_t v21 = v20 + 1;
  }
  memcpy(v15, v16, v21);
LABEL_12:
  uint64_t v22 = *(void *)(v8 + 64) + ((v9 + 16) & ~v9);
  if (!*(_DWORD *)(v8 + 84)) {
    ++v22;
  }
  uint64_t v23 = (void *)(((v11 | 7) + v22) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v24 = (void *)(((v12 | 7) + v22) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v23 = *v24;
  unint64_t v25 = ((unint64_t)v23 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v26 = ((unint64_t)v24 + 15) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v25 = *(void *)v26;
  swift_retain();
  swift_release();
  uint64_t v27 = *(void *)(v26 + 16);
  if (*(void *)(v25 + 16) == 1)
  {
    if (v27 != 1)
    {
      *(_DWORD *)(v25 + 8) = *(_DWORD *)(v26 + 8);
      *(_DWORD *)(v25 + 12) = *(_DWORD *)(v26 + 12);
      *(void *)(v25 + 16) = *(void *)(v26 + 16);
      swift_retain();
      goto LABEL_21;
    }
    goto LABEL_19;
  }
  if (v27 == 1)
  {
    outlined destroy of _ViewList_ID.Canonical(v25 + 8);
LABEL_19:
    *(_OWORD *)(v25 + 8) = *(_OWORD *)(v26 + 8);
    goto LABEL_21;
  }
  *(_DWORD *)(v25 + 8) = *(_DWORD *)(v26 + 8);
  *(_DWORD *)(v25 + 12) = *(_DWORD *)(v26 + 12);
  *(void *)(v25 + 16) = *(void *)(v26 + 16);
  swift_retain();
  swift_release();
LABEL_21:
  *(void *)(v25 + 24) = *(void *)(v26 + 24);
  unint64_t v28 = (v25 + 39) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v29 = (v26 + 39) & 0xFFFFFFFFFFFFFFF8;
  LODWORD(v30) = -1;
  if (*(void *)(v28 + 8) >= 0xFFFFFFFFuLL) {
    LODWORD(v31) = -1;
  }
  else {
    uint64_t v31 = *(void *)(v28 + 8);
  }
  int v32 = v31 - 1;
  if (*(void *)(v29 + 8) < 0xFFFFFFFFuLL) {
    uint64_t v30 = *(void *)(v29 + 8);
  }
  int v33 = v30 - 1;
  if ((v32 & 0x80000000) == 0)
  {
    if (v33 < 0)
    {
      *(_DWORD *)unint64_t v28 = *(_DWORD *)v29;
      *(_DWORD *)(v28 + 4) = *(_DWORD *)(v29 + 4);
      *(void *)(v28 + 8) = *(void *)(v29 + 8);
      swift_retain();
      goto LABEL_32;
    }
    goto LABEL_31;
  }
  if ((v33 & 0x80000000) == 0)
  {
    swift_release();
LABEL_31:
    *(_OWORD *)unint64_t v28 = *(_OWORD *)v29;
    goto LABEL_32;
  }
  *(_DWORD *)unint64_t v28 = *(_DWORD *)v29;
  *(_DWORD *)(v28 + 4) = *(_DWORD *)(v29 + 4);
  *(void *)(v28 + 8) = *(void *)(v29 + 8);
  swift_retain();
  swift_release();
LABEL_32:
  unint64_t v34 = (_OWORD *)((v28 + 23) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v35 = (long long *)((v29 + 23) & 0xFFFFFFFFFFFFFFF8);
  long long v36 = *v35;
  long long v37 = v35[2];
  v34[1] = v35[1];
  v34[2] = v37;
  *unint64_t v34 = v36;
  unint64_t v38 = ((unint64_t)v34 + 55) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v39 = ((unint64_t)v35 + 55) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v40 = *(void *)(v38 + 8);
  if (v40 >= 0xFFFFFFFF) {
    LODWORD(v40) = -1;
  }
  int v41 = v40 - 1;
  unint64_t v42 = *(void *)(v39 + 8);
  if (v42 >= 0xFFFFFFFF) {
    LODWORD(v42) = -1;
  }
  int v43 = v42 - 1;
  if (v41 < 0)
  {
    if (v43 < 0)
    {
      swift_weakCopyAssign();
      *(void *)(v38 + 8) = *(void *)(v39 + 8);
      swift_retain();
      swift_release();
      *(void *)(v38 + 16) = *(void *)(v39 + 16);
      swift_retain();
      swift_release();
      goto LABEL_42;
    }
    swift_weakDestroy();
    swift_release();
    swift_release();
    goto LABEL_41;
  }
  if ((v43 & 0x80000000) == 0)
  {
LABEL_41:
    long long v44 = *(_OWORD *)v39;
    *(void *)(v38 + 16) = *(void *)(v39 + 16);
    *(_OWORD *)unint64_t v38 = v44;
    goto LABEL_42;
  }
  swift_weakCopyInit();
  *(void *)(v38 + 8) = *(void *)(v39 + 8);
  *(void *)(v38 + 16) = *(void *)(v39 + 16);
  swift_retain();
  swift_retain();
LABEL_42:
  uint64_t v45 = (_DWORD *)((v38 + 27) & 0xFFFFFFFFFFFFFFF8);
  unsigned int v46 = (_DWORD *)((v39 + 27) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v45 = *v46;
  v45[1] = v46[1];
  return v48;
}

_OWORD *initializeWithTake for BaseModifier.Presenter(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(void *)(a3 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = v5;
  uint64_t v7 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v8 = (v7 | 7) + 16;
  uint64_t v9 = ((unint64_t)a1 + v8) & ~(v7 | 7);
  uint64_t v10 = ((unint64_t)a2 + v8) & ~(v7 | 7);
  *(void *)uint64_t v9 = *(void *)v10;
  uint64_t v11 = (void *)((v9 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v12 = (void *)((v10 + 15) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v11 = *v12;
  uint64_t v13 = (void *)(((unint64_t)v11 + v7 + 8) & ~v7);
  unint64_t v14 = (const void *)(((unint64_t)v12 + v7 + 8) & ~v7);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v5 + 48))(v14, 1, v4))
  {
    int v15 = *(_DWORD *)(v6 + 84);
    size_t v16 = *(void *)(v6 + 64);
    if (v15) {
      size_t v17 = v16;
    }
    else {
      size_t v17 = v16 + 1;
    }
    memcpy(v13, v14, v17);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v6 + 32))(v13, v14, v4);
    int v19 = *(void (**)(void *, void, uint64_t, uint64_t))(v6 + 56);
    uint64_t v18 = v6 + 56;
    v19(v13, 0, 1, v4);
    int v15 = *(_DWORD *)(v18 + 28);
    size_t v16 = *(void *)(v18 + 8);
  }
  size_t v20 = v16 + ((v7 + 16) & ~v7);
  if (!v15) {
    ++v20;
  }
  unint64_t v21 = (v9 | 7) + v20;
  uint64_t v22 = (void *)(((v10 | 7) + v20) & 0xFFFFFFFFFFFFFFF8);
  v21 &= 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v21 = *v22;
  uint64_t v23 = (_OWORD *)((v21 + 15) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v24 = (_OWORD *)(((unint64_t)v22 + 15) & 0xFFFFFFFFFFFFFFF8);
  long long v25 = v24[1];
  *uint64_t v23 = *v24;
  v23[1] = v25;
  unint64_t v26 = (_OWORD *)(((unint64_t)v23 + 39) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v27 = (_OWORD *)(((unint64_t)v24 + 39) & 0xFFFFFFFFFFFFFFF8);
  *unint64_t v26 = *v27;
  unint64_t v28 = (_OWORD *)(((unint64_t)v26 + 23) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v29 = (long long *)(((unint64_t)v27 + 23) & 0xFFFFFFFFFFFFFFF8);
  long long v30 = *v29;
  long long v31 = v29[2];
  v28[1] = v29[1];
  v28[2] = v31;
  *unint64_t v28 = v30;
  unint64_t v32 = ((unint64_t)v28 + 55) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v33 = ((unint64_t)v29 + 55) & 0xFFFFFFFFFFFFFFF8;
  int v34 = *(void *)(v33 + 8);
  if (*(void *)(v33 + 8) >= 0xFFFFFFFFuLL) {
    int v34 = -1;
  }
  if (v34 - 1 < 0)
  {
    unint64_t v32 = swift_weakTakeInit();
    *(_OWORD *)(v32 + 8) = *(_OWORD *)(v33 + 8);
  }
  else
  {
    long long v35 = *(_OWORD *)v33;
    *(void *)(v32 + 16) = *(void *)(v33 + 16);
    *(_OWORD *)unint64_t v32 = v35;
  }
  *(void *)((v32 + 27) & 0xFFFFFFFFFFFFFFF8) = *(void *)((v33 + 27) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

_OWORD *assignWithTake for BaseModifier.Presenter(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_release();
  uint64_t v6 = *(void *)(a3 + 16);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v9 = (v8 | 7) + 16;
  long long v44 = a1;
  uint64_t v10 = ((unint64_t)a1 + v9) & ~(v8 | 7);
  uint64_t v11 = ((unint64_t)a2 + v9) & ~(v8 | 7);
  *(void *)uint64_t v10 = *(void *)v11;
  swift_release();
  uint64_t v12 = (void *)((v10 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v13 = (void *)((v11 + 15) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v12 = *v13;
  swift_release();
  unint64_t v14 = (void *)(((unint64_t)v12 + v8 + 8) & ~v8);
  int v15 = (void *)(((unint64_t)v13 + v8 + 8) & ~v8);
  size_t v16 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v7 + 48);
  LODWORD(v13) = v16(v14, 1, v6);
  int v17 = v16(v15, 1, v6);
  if (v13)
  {
    if (!v17)
    {
      (*(void (**)(void *, void *, uint64_t))(v7 + 32))(v14, v15, v6);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(v14, 0, 1, v6);
      goto LABEL_12;
    }
    int v18 = *(_DWORD *)(v7 + 84);
    size_t v19 = *(void *)(v7 + 64);
  }
  else
  {
    if (!v17)
    {
      (*(void (**)(void *, void *, uint64_t))(v7 + 40))(v14, v15, v6);
      goto LABEL_12;
    }
    (*(void (**)(void *, uint64_t))(v7 + 8))(v14, v6);
    int v18 = *(_DWORD *)(v7 + 84);
    size_t v19 = *(void *)(v7 + 64);
  }
  if (v18) {
    size_t v20 = v19;
  }
  else {
    size_t v20 = v19 + 1;
  }
  memcpy(v14, v15, v20);
LABEL_12:
  uint64_t v21 = *(void *)(v7 + 64) + ((v8 + 16) & ~v8);
  if (!*(_DWORD *)(v7 + 84)) {
    ++v21;
  }
  uint64_t v22 = (void *)(((v10 | 7) + v21) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v23 = (void *)(((v11 | 7) + v21) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v22 = *v23;
  unint64_t v24 = ((unint64_t)v22 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v25 = ((unint64_t)v23 + 15) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v24 = *(void *)v25;
  swift_release();
  if (*(void *)(v24 + 16) == 1) {
    goto LABEL_17;
  }
  if (*(void *)(v25 + 16) == 1)
  {
    outlined destroy of _ViewList_ID.Canonical(v24 + 8);
LABEL_17:
    *(_OWORD *)(v24 + 8) = *(_OWORD *)(v25 + 8);
    goto LABEL_19;
  }
  *(_DWORD *)(v24 + 8) = *(_DWORD *)(v25 + 8);
  *(_DWORD *)(v24 + 12) = *(_DWORD *)(v25 + 12);
  *(void *)(v24 + 16) = *(void *)(v25 + 16);
  swift_release();
LABEL_19:
  *(void *)(v24 + 24) = *(void *)(v25 + 24);
  unint64_t v26 = (v24 + 39) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v27 = (v25 + 39) & 0xFFFFFFFFFFFFFFF8;
  LODWORD(v28) = -1;
  if (*(void *)(v26 + 8) < 0xFFFFFFFFuLL) {
    uint64_t v28 = *(void *)(v26 + 8);
  }
  if ((int)v28 - 1 >= 0) {
    goto LABEL_26;
  }
  unint64_t v29 = *(void *)(v27 + 8);
  if (v29 >= 0xFFFFFFFF) {
    LODWORD(v29) = -1;
  }
  if ((int)v29 - 1 >= 0)
  {
    swift_release();
LABEL_26:
    *(_OWORD *)unint64_t v26 = *(_OWORD *)v27;
    goto LABEL_27;
  }
  *(_DWORD *)unint64_t v26 = *(_DWORD *)v27;
  *(_DWORD *)(v26 + 4) = *(_DWORD *)(v27 + 4);
  *(void *)(v26 + 8) = *(void *)(v27 + 8);
  swift_release();
LABEL_27:
  long long v30 = (_OWORD *)((v26 + 23) & 0xFFFFFFFFFFFFFFF8);
  long long v31 = (long long *)((v27 + 23) & 0xFFFFFFFFFFFFFFF8);
  long long v32 = *v31;
  long long v33 = v31[2];
  v30[1] = v31[1];
  v30[2] = v33;
  *long long v30 = v32;
  unint64_t v34 = ((unint64_t)v30 + 55) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v35 = ((unint64_t)v31 + 55) & 0xFFFFFFFFFFFFFFF8;
  int v36 = *(void *)(v34 + 8);
  if (*(void *)(v34 + 8) >= 0xFFFFFFFFuLL) {
    int v36 = -1;
  }
  int v37 = v36 - 1;
  unint64_t v38 = *(void *)(v35 + 8);
  if (v38 >= 0xFFFFFFFF) {
    LODWORD(v38) = -1;
  }
  int v39 = v38 - 1;
  if (v37 < 0)
  {
    if (v39 < 0)
    {
      swift_weakTakeAssign();
      *(void *)(v34 + 8) = *(void *)(v35 + 8);
      swift_release();
      *(void *)(v34 + 16) = *(void *)(v35 + 16);
      swift_release();
      goto LABEL_37;
    }
    swift_weakDestroy();
    swift_release();
    swift_release();
    goto LABEL_36;
  }
  if ((v39 & 0x80000000) == 0)
  {
LABEL_36:
    long long v40 = *(_OWORD *)v35;
    *(void *)(v34 + 16) = *(void *)(v35 + 16);
    *(_OWORD *)unint64_t v34 = v40;
    goto LABEL_37;
  }
  swift_weakTakeInit();
  *(_OWORD *)(v34 + 8) = *(_OWORD *)(v35 + 8);
LABEL_37:
  int v41 = (_DWORD *)((v34 + 27) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v42 = (_DWORD *)((v35 + 27) & 0xFFFFFFFFFFFFFFF8);
  *int v41 = *v42;
  v41[1] = v42[1];
  return v44;
}

uint64_t getEnumTagSinglePayload for BaseModifier.Presenter(_DWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v5 = v4;
  int v6 = *(_DWORD *)(v4 + 84);
  int v7 = v6 - 1;
  if (!v6) {
    int v7 = 0;
  }
  if (v7 <= 0x7FFFFFFF) {
    int v8 = 0x7FFFFFFF;
  }
  else {
    int v8 = v7;
  }
  if (v7 >= 0) {
    unsigned int v9 = 0x7FFFFFFF;
  }
  else {
    unsigned int v9 = v8;
  }
  uint64_t v10 = *(unsigned __int8 *)(v4 + 80);
  if (v6) {
    uint64_t v11 = 7;
  }
  else {
    uint64_t v11 = 8;
  }
  if (!a2) {
    return 0;
  }
  uint64_t v12 = v10 | 7;
  if (v9 < a2)
  {
    unint64_t v13 = ((((((((((((v11
                    + *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64)
                    + ((v10 + 16) & ~v10)
                    + ((v10 + 16) & ~v12)) & 0xFFFFFFFFFFFFFFF8)
                  + 15) & 0xFFFFFFFFFFFFFFF8)
                + 39) & 0xFFFFFFFFFFFFFFF8)
              + 23) & 0xFFFFFFFFFFFFFFF8)
            + 55) & 0xFFFFFFFFFFFFFFF8)
          + 27) & 0xFFFFFFFFFFFFFFF8)
        + 8;
    unsigned int v14 = a2 - v9;
    uint64_t v15 = v13 & 0xFFFFFFF8;
    if ((v13 & 0xFFFFFFF8) != 0) {
      unsigned int v16 = 2;
    }
    else {
      unsigned int v16 = v14 + 1;
    }
    if (v16 >= 0x10000) {
      unsigned int v17 = 4;
    }
    else {
      unsigned int v17 = 2;
    }
    if (v16 < 0x100) {
      unsigned int v17 = 1;
    }
    if (v16 >= 2) {
      uint64_t v18 = v17;
    }
    else {
      uint64_t v18 = 0;
    }
    switch(v18)
    {
      case 1:
        int v19 = *((unsigned __int8 *)a1 + v13);
        if (!v19) {
          break;
        }
        goto LABEL_30;
      case 2:
        int v19 = *(unsigned __int16 *)((char *)a1 + v13);
        if (v19) {
          goto LABEL_30;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x187BCD4D8);
      case 4:
        int v19 = *(_DWORD *)((char *)a1 + v13);
        if (!v19) {
          break;
        }
LABEL_30:
        int v21 = v19 - 1;
        if (v15)
        {
          int v21 = 0;
          LODWORD(v15) = *a1;
        }
        return v9 + (v15 | v21) + 1;
      default:
        break;
    }
  }
  if (v9 == 0x7FFFFFFF)
  {
    uint64_t v22 = *(void *)a1;
    if (*(void *)a1 >= 0xFFFFFFFFuLL) {
      LODWORD(v22) = -1;
    }
    return (v22 + 1);
  }
  else
  {
    unsigned int v23 = (*(uint64_t (**)(unint64_t))(v5 + 48))((v10
                                                                 + (((((unint64_t)a1 + v12 + 16) & ~v12) + 15) & 0xFFFFFFFFFFFFFFF8)
                                                                 + 8) & ~v10);
    if (v23 >= 2) {
      return v23 - 1;
    }
    else {
      return 0;
    }
  }
}

void storeEnumTagSinglePayload for BaseModifier.Presenter(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  int v6 = 0;
  uint64_t v7 = *(void *)(*(void *)(a4 + 16) - 8);
  int v8 = *(_DWORD *)(v7 + 84);
  int v9 = v8 - 1;
  if (!v8) {
    int v9 = 0;
  }
  if (v9 <= 0x7FFFFFFF) {
    unsigned int v10 = 0x7FFFFFFF;
  }
  else {
    unsigned int v10 = v9;
  }
  if (v9 >= 0) {
    unsigned int v10 = 0x7FFFFFFF;
  }
  uint64_t v11 = *(unsigned __int8 *)(v7 + 80);
  size_t v12 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  if (!v8) {
    ++v12;
  }
  size_t v13 = ((((((((((((v12 + ((v11 + 16) & ~(v11 | 7)) + ((v11 + 16) & ~v11) + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
              + 39) & 0xFFFFFFFFFFFFFFF8)
            + 23) & 0xFFFFFFFFFFFFFFF8)
          + 55) & 0xFFFFFFFFFFFFFFF8)
        + 27) & 0xFFFFFFFFFFFFFFF8)
      + 8;
  if (v10 < a3)
  {
    unsigned int v14 = a3 - v10;
    if (((((((((((((v12
                   + ((v11 + 16) & ~(v11 | 7))
                   + ((v11 + 16) & ~v11)
                   + 7) & 0xFFFFFFF8)
                 + 15) & 0xFFFFFFF8)
               + 39) & 0xFFFFFFF8)
             + 23) & 0xFFFFFFF8)
           + 55) & 0xFFFFFFF8)
         + 27) & 0xFFFFFFF8) == 0xFFFFFFF8)
      unsigned int v15 = v14 + 1;
    else {
      unsigned int v15 = 2;
    }
    if (v15 >= 0x10000) {
      int v16 = 4;
    }
    else {
      int v16 = 2;
    }
    if (v15 < 0x100) {
      int v16 = 1;
    }
    if (v15 >= 2) {
      int v6 = v16;
    }
    else {
      int v6 = 0;
    }
  }
  if (a2 > v10)
  {
    if (((((((((((((v12
                   + ((v11 + 16) & ~(v11 | 7))
                   + ((v11 + 16) & ~v11)
                   + 7) & 0xFFFFFFF8)
                 + 15) & 0xFFFFFFF8)
               + 39) & 0xFFFFFFF8)
             + 23) & 0xFFFFFFF8)
           + 55) & 0xFFFFFFF8)
         + 27) & 0xFFFFFFF8) == 0xFFFFFFF8)
      int v17 = a2 - v10;
    else {
      int v17 = 1;
    }
    if (((((((((((((v12
                   + ((v11 + 16) & ~(v11 | 7))
                   + ((v11 + 16) & ~v11)
                   + 7) & 0xFFFFFFF8)
                 + 15) & 0xFFFFFFF8)
               + 39) & 0xFFFFFFF8)
             + 23) & 0xFFFFFFF8)
           + 55) & 0xFFFFFFF8)
         + 27) & 0xFFFFFFF8) != 0xFFFFFFF8)
    {
      unsigned int v18 = ~v10 + a2;
      bzero(a1, v13);
      *(_DWORD *)a1 = v18;
    }
    switch(v6)
    {
      case 1:
        a1[v13] = v17;
        return;
      case 2:
        *(_WORD *)&a1[v13] = v17;
        return;
      case 3:
        goto LABEL_61;
      case 4:
        *(_DWORD *)&a1[v13] = v17;
        return;
      default:
        return;
    }
  }
  switch(v6)
  {
    case 1:
      a1[v13] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_37;
    case 2:
      *(_WORD *)&a1[v13] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_37;
    case 3:
LABEL_61:
      __break(1u);
      JUMPOUT(0x187BCD7DCLL);
    case 4:
      *(_DWORD *)&a1[v13] = 0;
      goto LABEL_36;
    default:
LABEL_36:
      if (a2)
      {
LABEL_37:
        if (v10 == 0x7FFFFFFF)
        {
          if ((a2 & 0x80000000) != 0)
          {
            uint64_t v19 = a2 ^ 0x80000000;
            *((void *)a1 + 1) = 0;
          }
          else
          {
            uint64_t v19 = a2 - 1;
          }
          *(void *)a1 = v19;
        }
        else
        {
          size_t v20 = (unsigned char *)((v11 + ((((unint64_t)&a1[(v11 | 7) + 16] & ~(v11 | 7)) + 15) & 0xFFFFFFFFFFFFFFF8) + 8) & ~v11);
          if (v9 >= a2)
          {
            uint64_t v24 = a2 + 1;
            unint64_t v25 = *(void (**)(unsigned char *, uint64_t))(v7 + 56);
            v25(v20, v24);
          }
          else
          {
            if (v12 <= 3) {
              int v21 = ~(-1 << (8 * v12));
            }
            else {
              int v21 = -1;
            }
            if (v12)
            {
              int v22 = v21 & (~v9 + a2);
              if (v12 <= 3) {
                int v23 = v12;
              }
              else {
                int v23 = 4;
              }
              bzero(v20, v12);
              switch(v23)
              {
                case 2:
                  *(_WORD *)size_t v20 = v22;
                  break;
                case 3:
                  *(_WORD *)size_t v20 = v22;
                  void v20[2] = BYTE2(v22);
                  break;
                case 4:
                  *(_DWORD *)size_t v20 = v22;
                  break;
                default:
                  *size_t v20 = v22;
                  break;
              }
            }
          }
        }
      }
      return;
  }
}

uint64_t associated type witness table accessor for ViewModifier.Body : View in BaseModifier<A, B>.Presenter()
{
  return associated type witness table accessor for View.Body : View in SidebarListBody<A, B>();
}

uint64_t base witness table accessor for _AttributeBody in BaseModifier<A, B>.Child()
{
  return swift_getWitnessTable();
}

uint64_t specialized BaseModifier.Child.transform.getter()
{
  return *(void *)AGGraphGetValue();
}

uint64_t sub_187BCD89C()
{
  long long v9 = *(_OWORD *)(v0 + 16);
  unint64_t v1 = (int *)type metadata accessor for BaseModifier.Presenter();
  unint64_t v2 = (*(unsigned __int8 *)(*((void *)v1 - 1) + 80) + 80) & ~(unint64_t)*(unsigned __int8 *)(*((void *)v1 - 1) + 80);
  swift_release();
  if (*(void *)(v0 + 64) != 1) {
    swift_release();
  }
  uint64_t v3 = v0 + v2;
  swift_release();
  unint64_t v4 = v0 + v2 + v1[13];
  swift_release();
  swift_release();
  type metadata accessor for Optional();
  unint64_t v5 = v4 + *(int *)(type metadata accessor for Binding() + 32);
  uint64_t v6 = *(void *)(v9 - 8);
  if (!(*(unsigned int (**)(unint64_t, uint64_t, void))(v6 + 48))(v5, 1, v9)) {
    (*(void (**)(unint64_t, void))(v6 + 8))(v5, v9);
  }
  uint64_t v7 = v3 + v1[15];
  swift_release();
  if (*(void *)(v7 + 16) != 1) {
    swift_release();
  }
  if (*(void *)(v3 + v1[16] + 8) != 1) {
    swift_release();
  }
  if (*(void *)(v3 + v1[18] + 8) != 1)
  {
    swift_weakDestroy();
    swift_release();
    swift_release();
  }
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in BaseModifier.Presenter.body(content:)(uint64_t a1)
{
  uint64_t v3 = v1[2];
  uint64_t v4 = v1[3];
  uint64_t v5 = v1[4];
  uint64_t v6 = v1[5];
  uint64_t v7 = *(void *)(type metadata accessor for BaseModifier.Presenter() - 8);
  return closure #1 in BaseModifier.Presenter.body(content:)(a1, v1[6], v1[7], v1[8], v1[9], (uint64_t)v1 + ((*(unsigned __int8 *)(v7 + 80) + 80) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80)), v3, v4, v5, v6);
}

void type metadata accessor for _PreferenceTransformModifier<UpdateViewDestinationRequest.UpdateViewDestinationRequestKey>()
{
  if (!lazy cache variable for type metadata for _PreferenceTransformModifier<UpdateViewDestinationRequest.UpdateViewDestinationRequestKey>)
  {
    unint64_t v0 = type metadata accessor for _PreferenceTransformModifier();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _PreferenceTransformModifier<UpdateViewDestinationRequest.UpdateViewDestinationRequestKey>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type _PreferenceTransformModifier<UpdateViewDestinationRequest.UpdateViewDestinationRequestKey> and conformance _PreferenceTransformModifier<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type _PreferenceTransformModifier<UpdateViewDestinationRequest.UpdateViewDestinationRequestKey> and conformance _PreferenceTransformModifier<A>;
  if (!lazy protocol witness table cache variable for type _PreferenceTransformModifier<UpdateViewDestinationRequest.UpdateViewDestinationRequestKey> and conformance _PreferenceTransformModifier<A>)
  {
    type metadata accessor for _PreferenceTransformModifier<UpdateViewDestinationRequest.UpdateViewDestinationRequestKey>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _PreferenceTransformModifier<UpdateViewDestinationRequest.UpdateViewDestinationRequestKey> and conformance _PreferenceTransformModifier<A>);
  }
  return result;
}

uint64_t partial apply for closure #1 in BaseModifier.Presenter.request.getter()
{
  return closure #1 in BaseModifier.Presenter.request.getter();
}

uint64_t sub_187BCDBF8()
{
  uint64_t v1 = *(void *)(v0 + 16);
  type metadata accessor for Optional();
  unint64_t v2 = (int *)(type metadata accessor for Binding() - 8);
  uint64_t v3 = v0
     + ((*(unsigned __int8 *)(*(void *)v2 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v2 + 80));
  swift_release();
  swift_release();
  uint64_t v4 = v3 + v2[10];
  uint64_t v5 = *(void *)(v1 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(v4, 1, v1)) {
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v1);
  }

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in UpdateViewDestinationRequest.init<A, B>(presentDestination:item:key:depth:selectionIdentifier:navigationAuthority:transaction:)()
{
  uint64_t v1 = *(void *)(v0 + 16);
  type metadata accessor for Optional();
  uint64_t v2 = *(void *)(type metadata accessor for Binding() - 8);
  uint64_t v3 = v0 + ((*(unsigned __int8 *)(v2 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));

  return closure #1 in closure #1 in UpdateViewDestinationRequest.init<A, B>(presentDestination:item:key:depth:selectionIdentifier:navigationAuthority:transaction:)(v3, v1);
}

uint64_t sub_187BCDDD8()
{
  return swift_getWitnessTable();
}

uint64_t protocol witness for LayoutGesture.responder.getter in conformance HitTestingLayoutGesture()
{
  return swift_retain();
}

uint64_t protocol witness for static Gesture._makeGesture(gesture:inputs:) in conformance HitTestingLayoutGesture(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = lazy protocol witness table accessor for type HitTestingLayoutGesture and conformance HitTestingLayoutGesture();

  return MEMORY[0x1F40FDEB8](a1, a2, a3, v6);
}

void protocol witness for Gesture.body.getter in conformance HitTestingLayoutGesture()
{
}

uint64_t View.hitTestingLayoutGesture()(uint64_t a1, uint64_t a2)
{
  return View.layoutGesture<A>(_:)((uint64_t)closure #1 in View.hitTestingLayoutGesture(), 0, a1, (uint64_t)&unk_1ED43EC68, a2);
}

uint64_t closure #1 in View.hitTestingLayoutGesture()@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = a1;
  return swift_retain();
}

uint64_t sub_187BCDFD0()
{
  return swift_getWitnessTable();
}

void type metadata accessor for LayoutGestureModifier<HitTestingLayoutGesture>()
{
  if (!lazy cache variable for type metadata for LayoutGestureModifier<HitTestingLayoutGesture>)
  {
    unint64_t v0 = type metadata accessor for LayoutGestureModifier();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for LayoutGestureModifier<HitTestingLayoutGesture>);
    }
  }
}

void *type metadata accessor for HitTestingLayoutGesture()
{
  return &unk_1ED43EC68;
}

_UNKNOWN **base witness table accessor for Gesture in HitTestingLayoutGesture()
{
  return &protocol witness table for HitTestingLayoutGesture;
}

unint64_t lazy protocol witness table accessor for type HitTestingLayoutGesture and conformance HitTestingLayoutGesture()
{
  unint64_t result = lazy protocol witness table cache variable for type HitTestingLayoutGesture and conformance HitTestingLayoutGesture;
  if (!lazy protocol witness table cache variable for type HitTestingLayoutGesture and conformance HitTestingLayoutGesture)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HitTestingLayoutGesture and conformance HitTestingLayoutGesture);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type HitTestingLayoutGesture and conformance HitTestingLayoutGesture;
  if (!lazy protocol witness table cache variable for type HitTestingLayoutGesture and conformance HitTestingLayoutGesture)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HitTestingLayoutGesture and conformance HitTestingLayoutGesture);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type HitTestingLayoutGesture and conformance HitTestingLayoutGesture;
  if (!lazy protocol witness table cache variable for type HitTestingLayoutGesture and conformance HitTestingLayoutGesture)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HitTestingLayoutGesture and conformance HitTestingLayoutGesture);
  }
  return result;
}

uint64_t specialized HitTestingLayoutGesture.updateEventBindings(_:proxy:)(uint64_t *a1, uint64_t *a2)
{
  void (*v26)(long long *__return_ptr, uint64_t, uint64_t);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  Swift::Bool v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int64_t v50;
  _OWORD v52[13];
  int v53;
  long long v54;
  long long v55;
  long long v56;
  long long v57;
  long long v58;
  long long v59;
  long long v60;
  long long v61;
  long long v62;
  long long v63;
  long long v64;
  long long v65;
  long long v66;
  int v67;
  long long v68;
  long long v69;
  long long v70;
  long long v71;
  long long v72;
  long long v73;
  long long v74;
  long long v75;
  long long v76;
  long long v77;
  long long v78;
  long long v79;
  long long v80;
  int v81;
  long long v82;
  long long v83;
  long long v84;
  long long v85;
  long long v86;
  long long v87;
  long long v88;
  long long v89;
  long long v90;
  long long v91;
  long long v92;
  long long v93;
  long long v94;
  int v95;
  unsigned char v96[40];
  void v97[2];
  long long v98[3];

  uint64_t v2 = *a2;
  uint64_t v3 = *a1;
  unsigned int v48 = *a1 + 64;
  uint64_t v4 = 1 << *(unsigned char *)(*a1 + 32);
  uint64_t v5 = -1;
  if (v4 < 64) {
    uint64_t v5 = ~(-1 << v4);
  }
  unint64_t v6 = v5 & *(void *)(*a1 + 64);
  unint64_t v7 = (unint64_t)(v4 + 63) >> 6;
  int v43 = v7 - 1;
  uint64_t result = swift_bridgeObjectRetain();
  unint64_t v9 = 0;
  uint64_t v49 = v2;
  uint64_t v50 = v7;
  long long v44 = v3 + 104;
  uint64_t v45 = v7 - 5;
  unsigned int v46 = v3;
  while (1)
  {
    while (1)
    {
      while (1)
      {
        while (1)
        {
          while (1)
          {
            if (v6)
            {
              unint64_t v10 = __clz(__rbit64(v6));
              v6 &= v6 - 1;
              unint64_t v11 = v10 | (v9 << 6);
LABEL_9:
              uint64_t v12 = *(void *)(v3 + 56);
              size_t v13 = (uint64_t *)(*(void *)(v3 + 48) + 16 * v11);
              uint64_t v15 = *v13;
              uint64_t v14 = v13[1];
              *(void *)&uint64_t v82 = v15;
              *((void *)&v82 + 1) = v14;
              outlined init with copy of TableColumnList(v12 + 40 * v11, (uint64_t)&v83);
              goto LABEL_16;
            }
            int64_t v16 = v9 + 1;
            if (__OFADD__(v9, 1)) {
              goto LABEL_58;
            }
            if (v16 >= v50)
            {
              unint64_t v18 = v9;
            }
            else
            {
              unint64_t v17 = *(void *)(v48 + 8 * v16);
              if (v17) {
                goto LABEL_13;
              }
              unint64_t v18 = v9 + 1;
              if ((uint64_t)(v9 + 2) < v50)
              {
                unint64_t v17 = *(void *)(v48 + 8 * (v9 + 2));
                if (v17)
                {
                  int64_t v16 = v9 + 2;
LABEL_13:
                  unint64_t v6 = (v17 - 1) & v17;
                  unint64_t v11 = __clz(__rbit64(v17)) + (v16 << 6);
                  unint64_t v9 = v16;
                  goto LABEL_9;
                }
                unint64_t v18 = v9 + 2;
                if ((uint64_t)(v9 + 3) < v50)
                {
                  unint64_t v17 = *(void *)(v48 + 8 * (v9 + 3));
                  if (v17)
                  {
                    int64_t v16 = v9 + 3;
                    goto LABEL_13;
                  }
                  int64_t v16 = v9 + 4;
                  unint64_t v18 = v9 + 3;
                  if ((uint64_t)(v9 + 4) < v50)
                  {
                    unint64_t v17 = *(void *)(v48 + 8 * v16);
                    if (v17) {
                      goto LABEL_13;
                    }
                    while (v45 != v9)
                    {
                      unint64_t v17 = *(void *)(v44 + 8 * v9++);
                      if (v17)
                      {
                        int64_t v16 = v9 + 4;
                        goto LABEL_13;
                      }
                    }
                    unint64_t v18 = v43;
                  }
                }
              }
            }
            unint64_t v6 = 0;
            *(void *)&long long v85 = 0;
            long long v83 = 0u;
            long long v84 = 0u;
            unint64_t v9 = v18;
            uint64_t v82 = 0u;
LABEL_16:
            outlined init with take of (key: EventID, value: EventType)?((uint64_t)&v82, (uint64_t)v97);
            Swift::UInt v19 = v97[0];
            if (!v97[0]) {
              return swift_release();
            }
            Swift::UInt v20 = v97[1];
            outlined init with take of OptionalBinaryInteger(v98, (uint64_t)v96);
            uint64_t v21 = *a1;
            if (!*(void *)(*a1 + 16)
              || (unint64_t v22 = specialized __RawDictionaryStorage.find<A>(_:)(v19, v20), (v23 & 1) == 0))
            {
              *(void *)&long long v84 = 0;
              uint64_t v82 = 0u;
              long long v83 = 0u;
LABEL_5:
              outlined destroy of LocationBasedSensoryFeedback?((uint64_t)&v82, &lazy cache variable for type metadata for EventType?, (unint64_t *)&lazy cache variable for type metadata for EventType);
              goto LABEL_6;
            }
            outlined init with copy of TableColumnList(*(void *)(v21 + 56) + 40 * v22, (uint64_t)&v82);
            uint64_t v24 = *((void *)&v83 + 1);
            if (!*((void *)&v83 + 1)) {
              goto LABEL_5;
            }
            uint64_t v25 = v84;
            __swift_project_boxed_opaque_existential_1(&v82, *((uint64_t *)&v83 + 1));
            unint64_t v26 = *(void (**)(long long *__return_ptr, uint64_t, uint64_t))(v25 + 24);
            unint64_t v27 = v25;
            uint64_t v28 = v49;
            v26(&v68, v24, v27);
            unint64_t v29 = v68;
            outlined destroy of LocationBasedSensoryFeedback?((uint64_t)&v82, &lazy cache variable for type metadata for EventType?, (unint64_t *)&lazy cache variable for type metadata for EventType);
            if (v29) {
              break;
            }
LABEL_6:
            uint64_t result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v96);
          }
          unsigned int v47 = v9;
          outlined init with copy of TableColumnList((uint64_t)v96, (uint64_t)&v82);
          type metadata accessor for CVarArg(0, (unint64_t *)&lazy cache variable for type metadata for EventType);
          type metadata accessor for CVarArg(0, &lazy cache variable for type metadata for HitTestableEventType);
          if (swift_dynamicCast()) {
            break;
          }
          *(void *)&unsigned int v56 = 0;
          uint64_t v54 = 0u;
          uint64_t v55 = 0u;
          outlined destroy of LocationBasedSensoryFeedback?((uint64_t)&v54, (unint64_t *)&lazy cache variable for type metadata for HitTestableEventType?, &lazy cache variable for type metadata for HitTestableEventType);
          __swift_destroy_boxed_opaque_existential_1((uint64_t)v96);
          uint64_t result = swift_release();
        }
        outlined init with take of OptionalBinaryInteger(&v54, (uint64_t)&v68);
        outlined init with copy of TableColumnList((uint64_t)&v68, (uint64_t)&v54);
        HitTestableEvent.init(_:)();
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v68);
        HitTestableEvent.hitTestLocation.getter();
        long long v31 = v30;
        long long v33 = v32;
        *(void *)&uint64_t v82 = v49;
        uint64_t result = LayoutGestureChildProxy.endIndex.getter();
        if (result < 0) {
          goto LABEL_59;
        }
        if (result) {
          break;
        }
LABEL_32:
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v96);
        swift_release();
        uint64_t result = swift_release();
        uint64_t v3 = v46;
      }
      unint64_t v34 = 0;
      unint64_t v35 = result - 1;
      while (1)
      {
        *(void *)&uint64_t v54 = v49;
        LayoutGestureChildProxy.subscript.getter();
        int v92 = v78;
        char v93 = v79;
        uint64_t v94 = v80;
        uint64_t v95 = v81;
        uint64_t v88 = v74;
        int v89 = v75;
        int v90 = v76;
        unint64_t v91 = v77;
        long long v84 = v70;
        long long v85 = v71;
        char v86 = v72;
        uint64_t v87 = v73;
        uint64_t v82 = v68;
        long long v83 = v69;
        *(void *)&uint64_t v54 = v29;
        if (LayoutGestureChildProxy.Child.binds(_:)()) {
          break;
        }
        outlined release of LayoutGestureChildProxy.Child((uint64_t)&v82);
        if (v35 == v34) {
          goto LABEL_32;
        }
        ++v34;
      }
      uint64_t v78 = v92;
      uint64_t v79 = v93;
      unint64_t v80 = v94;
      uint64_t v81 = v95;
      uint64_t v74 = v88;
      uint64_t v75 = v89;
      uint64_t v76 = v90;
      uint64_t v77 = v91;
      uint64_t v70 = v84;
      int v71 = v85;
      int v72 = v86;
      uint64_t v73 = v87;
      unsigned int v68 = v82;
      uint64_t v69 = v83;
      if (!LayoutGestureChildProxy.Child.containsGlobalLocation(_:)((CGPoint)__PAIR128__(v33, v31))) {
        break;
      }
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v96);
      swift_release();
      swift_release();
      uint64_t result = outlined release of LayoutGestureChildProxy.Child((uint64_t)&v82);
      uint64_t v3 = v46;
    }
    *(void *)&unsigned int v68 = v49;
    uint64_t result = LayoutGestureChildProxy.endIndex.getter();
    if (result < 0) {
      goto LABEL_60;
    }
    int v36 = result;
    if (result) {
      break;
    }
LABEL_54:
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v96);
    swift_release();
    swift_release();
    uint64_t result = outlined release of LayoutGestureChildProxy.Child((uint64_t)&v82);
LABEL_48:
    uint64_t v3 = v46;
    unint64_t v9 = v47;
  }
  int v37 = result - 1;
  while (v36 >= v37 + 1)
  {
    if (v34 != v37)
    {
      *(void *)&v52[0] = v28;
      LayoutGestureChildProxy.subscript.getter();
      uint64_t v78 = v64;
      uint64_t v79 = v65;
      unint64_t v80 = v66;
      uint64_t v74 = v60;
      uint64_t v75 = v61;
      uint64_t v76 = v62;
      uint64_t v77 = v63;
      uint64_t v70 = v56;
      int v71 = v57;
      int v72 = v58;
      uint64_t v73 = v59;
      unsigned int v68 = v54;
      uint64_t v69 = v55;
      v52[10] = v64;
      v52[11] = v65;
      v52[12] = v66;
      void v52[6] = v60;
      v52[7] = v61;
      v52[8] = v62;
      v52[9] = v63;
      _OWORD v52[2] = v56;
      v52[3] = v57;
      v52[4] = v58;
      v52[5] = v59;
      uint64_t v81 = v67;
      unsigned int v53 = v67;
      v52[0] = v54;
      v52[1] = v55;
      unint64_t v38 = LayoutGestureChildProxy.Child.containsGlobalLocation(_:)((CGPoint)__PAIR128__(v33, v31));
      uint64_t result = outlined release of LayoutGestureChildProxy.Child((uint64_t)&v68);
      if (v38)
      {
        *(void *)&v52[0] = v19;
        *((void *)&v52[0] + 1) = v20;
        uint64_t result = LayoutGestureChildProxy.bindChild(index:event:id:)();
        int v39 = v54;
        if ((void)v54 != 1)
        {
          long long v40 = *((void *)&v54 + 1);
          outlined init with copy of TableColumnList((uint64_t)v96, (uint64_t)&v54);
          swift_retain();
          int v41 = *((void *)&v55 + 1);
          unint64_t v42 = v56;
          __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v54, *((uint64_t *)&v55 + 1));
          *(void *)&v52[0] = v40;
          (*(void (**)(_OWORD *, uint64_t, uint64_t))(v42 + 32))(v52, v41, v42);
          outlined init with copy of TableColumnList((uint64_t)&v54, (uint64_t)v52);
          specialized Dictionary.subscript.setter((uint64_t)v52, v19, v20);
          swift_release();
          outlined release of LayoutGestureChildProxy.Child((uint64_t)&v82);
          outlined consume of EnvironmentValues?(v39);
          swift_release();
          __swift_destroy_boxed_opaque_existential_1((uint64_t)v96);
          uint64_t result = __swift_destroy_boxed_opaque_existential_1((uint64_t)&v54);
          goto LABEL_48;
        }
        uint64_t v28 = v49;
      }
    }
    if (--v37 == -1) {
      goto LABEL_54;
    }
  }
  __break(1u);
LABEL_58:
  __break(1u);
LABEL_59:
  __break(1u);
LABEL_60:
  __break(1u);
  return result;
}

void type metadata accessor for (key: EventID, value: EventType)?()
{
  if (!lazy cache variable for type metadata for (key: EventID, value: EventType)?)
  {
    type metadata accessor for (key: EventID, value: EventType)();
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for (key: EventID, value: EventType)?);
    }
  }
}

uint64_t outlined release of LayoutGestureChildProxy.Child(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 16);
  uint64_t v17 = *(void *)(a1 + 56);
  uint64_t v18 = *(void *)(a1 + 48);
  uint64_t v15 = *(void *)(a1 + 72);
  uint64_t v16 = *(void *)(a1 + 64);
  uint64_t v3 = *(void *)(a1 + 88);
  uint64_t v4 = *(void *)(a1 + 96);
  uint64_t v13 = *(void *)(a1 + 104);
  uint64_t v14 = *(void *)(a1 + 80);
  long long v11 = *(_OWORD *)(a1 + 128);
  long long v12 = *(_OWORD *)(a1 + 112);
  long long v9 = *(_OWORD *)(a1 + 160);
  long long v10 = *(_OWORD *)(a1 + 144);
  uint64_t v5 = *(void *)(a1 + 176);
  uint64_t v6 = *(void *)(a1 + 184);
  unsigned __int8 v7 = *(unsigned char *)(a1 + 192);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();

  outlined consume of LayoutGestureBox.Child.DebugData?(v18, v17, v16, v15, v14, v3, v4, v13, v12, *((uint64_t *)&v12 + 1), v11, *((uint64_t *)&v11 + 1), v10, *((uint64_t *)&v10 + 1), v9, *((uint64_t *)&v9 + 1), v5, v6, v7);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t outlined consume of LayoutGestureBox.Child.DebugData?(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, unsigned __int8 a19)
{
  if (a19 != 255)
  {
    return outlined consume of LayoutGestureBox.Child.DebugData(result, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19 & 1);
  }
  return result;
}

uint64_t outlined consume of LayoutGestureBox.Child.DebugData(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, char a19)
{
  if ((a19 & 1) == 0)
  {
    outlined consume of ArrayWith2Inline<(String, String)>.Storage(a9, a10, a11, a12, a13, a14, a15, a16, a17);
    return swift_release();
  }
  return result;
}

uint64_t outlined consume of ArrayWith2Inline<(String, String)>.Storage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  if (a9 == 2)
  {
    return swift_release();
  }
  else
  {
    if (a9 == 1)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    else
    {
      if (a9) {
        return result;
      }
      swift_bridgeObjectRelease();
    }
    return swift_bridgeObjectRelease();
  }
}

unint64_t View.appEntityIdentifier(_:)(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    uint64_t v4 = swift_allocObject();
    *(void *)(v4 + 16) = a1;
    *(void *)(v4 + 24) = a2;
    unint64_t v5 = v4 | 0x3000000000000000;
  }
  else
  {
    unint64_t v5 = 0xF000000000000007;
  }
  swift_bridgeObjectRetain();
  View.scrapeableAttachment(_:)();

  return outlined consume of ScrapeableContent.Content?(v5);
}

uint64_t sub_187BCECC4()
{
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

unint64_t View.appIntentIdentifier(_:)(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    uint64_t v4 = swift_allocObject();
    *(void *)(v4 + 16) = a1;
    *(void *)(v4 + 24) = a2;
    unint64_t v5 = v4 | 0x4000000000000000;
  }
  else
  {
    unint64_t v5 = 0xF000000000000007;
  }
  swift_bridgeObjectRetain();
  View.scrapeableAttachment(_:)();

  return outlined consume of ScrapeableContent.Content?(v5);
}

uint64_t sub_187BCEDA0()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_187BCEDE4()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_187BCEE2C()
{
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);

  return swift_deallocObject();
}

uint64_t VisualEffect.contrast(_:)()
{
  return VisualEffect.rendererEffect<A>(_:)();
}

uint64_t sub_187BCEEA4()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t PlatformUnaryViewResponder.bindEvent(_:)()
{
  swift_retain();
  uint64_t v0 = dispatch thunk of ResponderNode.bindEvent(_:)();
  swift_release();
  return v0;
}

uint64_t PlatformUnaryViewResponder.makeGesture(inputs:)()
{
  swift_retain();
  dispatch thunk of ResponderNode.makeGesture(inputs:)();

  return swift_release();
}

Swift::Void __swiftcall PlatformUnaryViewResponder.resetGesture()()
{
  swift_retain();
  dispatch thunk of ResponderNode.resetGesture()();

  swift_release();
}

uint64_t PlatformUnaryViewResponder.children.getter()
{
  type metadata accessor for Any?(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>, MEMORY[0x1E4FBC838] + 8, MEMORY[0x1E4FBBE00]);
  uint64_t v1 = swift_allocObject();
  *(_OWORD *)(v1 + 16) = xmmword_188351940;
  *(void *)(v1 + 32) = *(void *)(v0 + 224);
  uint64_t v3 = v1;
  specialized Array._endMutation()();
  swift_retain();
  return v3;
}

void PlatformUnaryViewResponder.__allocating_init()()
{
}

uint64_t PlatformUnaryViewResponder.__ivar_destroyer()
{
  return swift_release();
}

uint64_t PlatformUnaryViewResponder.deinit()
{
  outlined destroy of weak FallbackResponderProvider?(v0 + 16);
  swift_weakDestroy();
  swift_unknownObjectWeakDestroy();
  swift_unknownObjectWeakDestroy();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  outlined destroy of PlatformViewResponderBase.PlatformHitTestResult?(v0 + 160);
  swift_unknownObjectWeakDestroy();
  swift_unknownObjectWeakDestroy();
  swift_bridgeObjectRelease();
  swift_release();
  return v0;
}

uint64_t PlatformUnaryViewResponder.__deallocating_deinit()
{
  PlatformUnaryViewResponder.deinit();

  return swift_deallocClassInstance();
}

uint64_t ObjC metadata update function for PlatformUnaryViewResponder()
{
  return type metadata accessor for PlatformUnaryViewResponder();
}

void protocol witness for ToolbarContent.body.getter in conformance <> ForEach<A, B, C>()
{
}

uint64_t protocol witness for static ToolbarContent._makeContent(content:inputs:resolved:) in conformance <> ForEach<A, B, C>()
{
  return static ToolbarContent._makeContent(content:inputs:resolved:)();
}

uint64_t static ToolbarContent._makeContent(content:inputs:resolved:)()
{
  return static MainActor.assumeIsolatedIfLinkedOnOrAfter<A>(_:context:_:file:line:)();
}

uint64_t protocol witness for static ToolbarContent._makeContent(content:inputs:resolved:) in conformance LimitedAvailabilityToolbarContent()
{
  return protocol witness for static ToolbarContent._makeContent(content:inputs:resolved:) in conformance LimitedAvailabilityToolbarContent();
}

{
  type metadata accessor for MainActor();
  static Semantics.v6.getter();
  return static MainActor.assumeIsolatedIfLinkedOnOrAfter<A>(_:context:_:file:line:)();
}

uint64_t protocol witness for static ToolbarContent._makeContent(content:inputs:resolved:) in conformance SearchToolbarItem()
{
  return protocol witness for static ToolbarContent._makeContent(content:inputs:resolved:) in conformance LimitedAvailabilityToolbarContent();
}

uint64_t specialized static ToolbarContent._makeToolbar(content:inputs:)@<X0>(long long *a1@<X1>, uint64_t a2@<X8>)
{
  static DynamicPropertyCache.fields(of:)();
  long long v4 = v20;
  char v5 = v21;
  long long v6 = a1[3];
  long long v18 = a1[2];
  v19[0] = v6;
  *(_OWORD *)((char *)v19 + 12) = *(long long *)((char *)a1 + 60);
  long long v7 = a1[1];
  long long v16 = *a1;
  long long v17 = v7;
  outlined retain of _ViewInputs((uint64_t)a1);
  int v13 = DWORD1(v21);
  specialized static ToolbarContent.makeBody(toolbar:inputs:fields:)();
  char v8 = v21;
  long long v21 = v17;
  long long v22 = v18;
  v23[0] = v19[0];
  *(_OWORD *)((char *)v23 + 12) = *(_OWORD *)((char *)v19 + 12);
  long long v20 = v16;
  outlined retain of _ViewInputs((uint64_t)&v20);
  specialized static ToolbarContent._makeToolbar(content:inputs:)(&v14, v14, &v20);
  outlined release of _ViewInputs((uint64_t)&v20);
  uint64_t v9 = v14;
  int v10 = DWORD2(v14);
  uint64_t v11 = v15;
  if ((v8 & 1) == 0)
  {
    long long v14 = v4;
    LOBYTE(v15) = v5;
    HIDWORD(v15) = v13;
    _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)();
  }
  outlined release of _ViewInputs((uint64_t)&v20);
  uint64_t result = outlined consume of DynamicPropertyCache.Fields.Layout();
  *(void *)a2 = v9;
  *(_DWORD *)(a2 + 8) = v10;
  *(void *)(a2 + 16) = v11;
  return result;
}

uint64_t static ToolbarContent._makeToolbar(content:inputs:)@<X0>(int *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  int v4 = *a1;
  uint64_t v5 = *a2;
  int v6 = *((_DWORD *)a2 + 2);
  uint64_t v7 = a2[2];
  uint64_t v9 = a2[5];
  uint64_t v8 = a2[6];
  int v29 = *((_DWORD *)a2 + 14);
  uint64_t v10 = a2[8];
  int v11 = *((_DWORD *)a2 + 18);
  static DynamicPropertyCache.fields(of:)();
  uint64_t v12 = v46;
  uint64_t v13 = v47;
  char v14 = v48;
  int v15 = HIDWORD(v48);
  uint64_t v46 = v5;
  LODWORD(v47) = v6;
  long long v49 = *(_OWORD *)(a2 + 3);
  uint64_t v48 = v7;
  uint64_t v50 = v9;
  uint64_t v51 = v8;
  int v52 = v29;
  uint64_t v53 = v10;
  int v54 = v11;
  int v23 = v15;
  int v24 = v4;
  int v45 = v4;
  uint64_t v27 = v12;
  HIDWORD(v33) = HIDWORD(v13);
  uint64_t v30 = v13;
  char v28 = v14;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  static ToolbarContent.makeBody(toolbar:inputs:fields:)();
  uint64_t v16 = v43;
  uint64_t v26 = v42;
  LOBYTE(v6) = v44;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v32 = v5;
  LODWORD(v33) = v47;
  uint64_t v34 = v7;
  long long v35 = v49;
  uint64_t v36 = v9;
  uint64_t v37 = v51;
  int v38 = v52;
  uint64_t v39 = v53;
  int v40 = v11;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  (*(void (**)(uint64_t *__return_ptr, unsigned char *, uint64_t *, uint64_t, uint64_t))(AssociatedConformanceWitness + 32))(&v42, v41, &v32, AssociatedTypeWitness, AssociatedConformanceWitness);
  uint64_t v19 = v42;
  int v20 = v43;
  uint64_t v21 = v44;
  if (v6)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
  }
  else
  {
    uint64_t v42 = v26;
    uint64_t v43 = v16;
    int v45 = v24;
    uint64_t v32 = v27;
    uint64_t v33 = v30;
    uint64_t v25 = v44;
    LOBYTE(v34) = v28;
    HIDWORD(v34) = v23;
    _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    uint64_t v21 = v25;
  }
  uint64_t result = outlined consume of DynamicPropertyCache.Fields.Layout();
  *(void *)a3 = v19;
  *(_DWORD *)(a3 + 8) = v20;
  *(void *)(a3 + 16) = v21;
  return result;
}

uint64_t specialized closure #1 in static ToolbarContent._makeContent(content:inputs:resolved:)()
{
  return static MainActor.assumeIsolatedIfLinkedOnOrAfter<A>(_:context:_:file:line:)();
}

{
  uint64_t v0;

  uint64_t v0 = MEMORY[0x1E4FBC248];
  type metadata accessor for _GraphValue<IndexViewPlacementModifier>(0, (unint64_t *)&lazy cache variable for type metadata for _GraphValue<Never>);
  _GraphValue.value.getter();
  swift_getKeyPath();
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  type metadata accessor for Focus<EmptyToolbarContent, Never>(0, (unint64_t *)&lazy cache variable for type metadata for Focus<Never, Never>, v0, v0, MEMORY[0x1E4F4E760]);
  lazy protocol witness table accessor for type Focus<EmptyToolbarContent, Never> and conformance Focus<A, B>((unint64_t *)&lazy protocol witness table cache variable for type Focus<Never, Never> and conformance Focus<A, B>, (unint64_t *)&lazy cache variable for type metadata for Focus<Never, Never>, v0);
  Attribute.init<A>(body:value:flags:update:)();
  swift_release();
  _GraphValue.init(_:)();
  type metadata accessor for MainActor();
  static Semantics.v6.getter();
  return static MainActor.assumeIsolatedIfLinkedOnOrAfter<A>(_:context:_:file:line:)();
}

{
  type metadata accessor for _GraphValue<IndexViewPlacementModifier>(0, &lazy cache variable for type metadata for _GraphValue<EmptyToolbarContent>);
  _GraphValue.value.getter();
  swift_getKeyPath();
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  type metadata accessor for Focus<EmptyToolbarContent, Never>(0, &lazy cache variable for type metadata for Focus<EmptyToolbarContent, Never>, (uint64_t)&type metadata for EmptyToolbarContent, MEMORY[0x1E4FBC248], MEMORY[0x1E4F4E760]);
  lazy protocol witness table accessor for type Focus<EmptyToolbarContent, Never> and conformance Focus<A, B>(&lazy protocol witness table cache variable for type Focus<EmptyToolbarContent, Never> and conformance Focus<A, B>, &lazy cache variable for type metadata for Focus<EmptyToolbarContent, Never>, (uint64_t)&type metadata for EmptyToolbarContent);
  Attribute.init<A>(body:value:flags:update:)();
  swift_release();
  _GraphValue.init(_:)();
  type metadata accessor for MainActor();
  static Semantics.v6.getter();
  return static MainActor.assumeIsolatedIfLinkedOnOrAfter<A>(_:context:_:file:line:)();
}

{
  type metadata accessor for _GraphValue<IndexViewPlacementModifier>(0, &lazy cache variable for type metadata for _GraphValue<LimitedAvailabilityToolbarContent>);
  _GraphValue.value.getter();
  swift_getKeyPath();
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  type metadata accessor for Focus<EmptyToolbarContent, Never>(0, &lazy cache variable for type metadata for Focus<LimitedAvailabilityToolbarContent, Never>, (uint64_t)&type metadata for LimitedAvailabilityToolbarContent, MEMORY[0x1E4FBC248], MEMORY[0x1E4F4E760]);
  lazy protocol witness table accessor for type Focus<EmptyToolbarContent, Never> and conformance Focus<A, B>(&lazy protocol witness table cache variable for type Focus<LimitedAvailabilityToolbarContent, Never> and conformance Focus<A, B>, &lazy cache variable for type metadata for Focus<LimitedAvailabilityToolbarContent, Never>, (uint64_t)&type metadata for LimitedAvailabilityToolbarContent);
  Attribute.init<A>(body:value:flags:update:)();
  swift_release();
  _GraphValue.init(_:)();
  type metadata accessor for MainActor();
  static Semantics.v6.getter();
  return static MainActor.assumeIsolatedIfLinkedOnOrAfter<A>(_:context:_:file:line:)();
}

uint64_t closure #1 in static ToolbarContent._makeContent(content:inputs:resolved:)(uint64_t a1, _OWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  type metadata accessor for _GraphValue();
  uint64_t v20 = a4;
  uint64_t v21 = a5;
  LODWORD(v22[0]) = _GraphValue.value.getter();
  *((void *)&v22[0] + 1) = swift_getKeyPath();
  uint64_t v17 = AssociatedTypeWitness;
  uint64_t v18 = type metadata accessor for Focus();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v10 = type metadata accessor for Attribute();
  swift_retain();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v22, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TA_4, (uint64_t)v16, v18, MEMORY[0x1E4FBC248], v10, MEMORY[0x1E4FBC278], v11);
  swift_release();
  swift_release();
  _GraphValue.init(_:)();
  long long v12 = a2[1];
  v22[0] = *a2;
  v22[1] = v12;
  v22[2] = a2[2];
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  return (*(uint64_t (**)(int *, _OWORD *, uint64_t, uint64_t, uint64_t))(AssociatedConformanceWitness + 40))(&v15, v22, a3, AssociatedTypeWitness, AssociatedConformanceWitness);
}

uint64_t partial apply for closure #1 in static ToolbarContent._makeContent(content:inputs:resolved:)()
{
  return closure #1 in static ToolbarContent._makeContent(content:inputs:resolved:)(*(unsigned int *)(v0 + 32), *(_OWORD **)(v0 + 40), *(void *)(v0 + 48), *(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t specialized static ToolbarContent.makeBody(toolbar:inputs:fields:)()
{
  static Semantics.v4.getter();
  if ((isLinkedOnOrAfter(_:)() & 1) != 0 && (AGTypeID.isValueType.getter() & 1) == 0)
  {
    _StringGuts.grow(_:)(39);
    swift_bridgeObjectRelease();
    v1._countAndFlagsBits = 0x726576654ELL;
    v1._object = (void *)0xE500000000000000;
    String.append(_:)(v1);
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    type metadata accessor for Focus<EmptyToolbarContent, Never>(0, &lazy cache variable for type metadata for ToolbarContentBodyAccessory<Never>, MEMORY[0x1E4FBC248], (uint64_t)&protocol witness table for Never, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for ToolbarContentBodyAccessory);
    lazy protocol witness table accessor for type ToolbarContentBodyAccessory<Never> and conformance ToolbarContentBodyAccessory<A>();
    return BodyAccessor.makeBody(container:inputs:fields:)();
  }
  return result;
}

uint64_t static ToolbarContent.makeBody(toolbar:inputs:fields:)()
{
  static Semantics.v4.getter();
  if ((isLinkedOnOrAfter(_:)() & 1) != 0 && (AGTypeID.isValueType.getter() & 1) == 0)
  {
    _StringGuts.grow(_:)(39);
    swift_bridgeObjectRelease();
    v1._countAndFlagsBits = _typeName(_:qualified:)();
    String.append(_:)(v1);
    swift_bridgeObjectRelease();
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    type metadata accessor for ToolbarContentBodyAccessory();
    swift_getWitnessTable();
    return BodyAccessor.makeBody(container:inputs:fields:)();
  }
  return result;
}

uint64_t ToolbarContentBodyAccessory.updateBody(of:changed:)(uint64_t result, char a2)
{
  if (a2)
  {
    MEMORY[0x1F4188790](result);
    type metadata accessor for ToolbarContentBodyAccessory();
    swift_getWitnessTable();
    return BodyAccessor.setBody(_:)();
  }
  return result;
}

uint64_t protocol witness for BodyAccessor.updateBody(of:changed:) in conformance ToolbarContentBodyAccessory<A>(uint64_t result, char a2)
{
  return ToolbarContentBodyAccessory.updateBody(of:changed:)(result, a2);
}

uint64_t protocol witness for static ToolbarContent._makeToolbar(content:inputs:) in conformance Never@<X0>(long long *a1@<X1>, uint64_t a2@<X8>)
{
  long long v2 = a1[3];
  v5[2] = a1[2];
  v6[0] = v2;
  *(_OWORD *)((char *)v6 + 12) = *(long long *)((char *)a1 + 60);
  long long v3 = a1[1];
  v5[0] = *a1;
  v5[1] = v3;
  return specialized static ToolbarContent._makeToolbar(content:inputs:)(v5, a2);
}

uint64_t protocol witness for static ToolbarContent._makeContent(content:inputs:resolved:) in conformance Never()
{
  return protocol witness for static ToolbarContent._makeContent(content:inputs:resolved:) in conformance LimitedAvailabilityToolbarContent();
}

uint64_t protocol witness for static ToolbarContent._makeToolbar(content:inputs:) in conformance EmptyToolbarContent@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 64);
  uint64_t result = PreferencesOutputs.init()();
  *(void *)a2 = v5;
  *(_DWORD *)(a2 + 8) = v6;
  *(void *)(a2 + 16) = v3;
  return result;
}

uint64_t protocol witness for static ToolbarContent._makeContent(content:inputs:resolved:) in conformance EmptyToolbarContent()
{
  return protocol witness for static ToolbarContent._makeContent(content:inputs:resolved:) in conformance LimitedAvailabilityToolbarContent();
}

uint64_t static ToolbarContentBuilder.buildEither<A, B>(first:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = type metadata accessor for _ConditionalContent.Storage();
  double v7 = MEMORY[0x1F4188790](v6);
  uint64_t v9 = (char *)&v11 - v8;
  (*(void (**)(char *, uint64_t, uint64_t, double))(*(void *)(a2 - 8) + 16))((char *)&v11 - v8, a1, a2, v7);
  swift_storeEnumTagMultiPayload();
  return _ConditionalContent.init(__storage:)((uint64_t)v9, a3);
}

uint64_t static ToolbarContentBuilder.buildEither<A, B>(second:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v6 = type metadata accessor for _ConditionalContent.Storage();
  double v7 = MEMORY[0x1F4188790](v6);
  uint64_t v9 = (char *)&v11 - v8;
  (*(void (**)(char *, uint64_t, uint64_t, double))(*(void *)(a2 - 8) + 16))((char *)&v11 - v8, a1, a2, v7);
  swift_storeEnumTagMultiPayload();
  return _ConditionalContent.init(__storage:)((uint64_t)v9, a3);
}

uint64_t protocol witness for static TupleDescriptor.typeCache.setter in conformance ToolbarContentDescriptor(uint64_t a1)
{
  if (one-time initialization token for typeCache != -1) {
    swift_once();
  }
  swift_beginAccess();
  static ToolbarContentDescriptor.typeCache = a1;
  return swift_bridgeObjectRelease();
}

void protocol witness for ToolbarContent.body.getter in conformance <A> Group<A>()
{
}

void protocol witness for ToolbarContent.body.getter in conformance <> _ConditionalContent<A, B>()
{
}

void protocol witness for ToolbarContent.body.getter in conformance <A> A?()
{
}

_UNKNOWN **associated type witness table accessor for ToolbarContent.Body : ToolbarContent in Never()
{
  return &protocol witness table for Never;
}

_UNKNOWN **associated type witness table accessor for ToolbarContent.Body : CustomizableToolbarContent in Never()
{
  return &protocol witness table for Never;
}

uint64_t dispatch thunk of ToolbarContent.body.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of static ToolbarContent._makeToolbar(content:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 32))();
}

uint64_t dispatch thunk of static ToolbarContent._makeContent(content:inputs:resolved:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 40))();
}

uint64_t initializeWithCopy for _ToolbarInputs(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  uint64_t v3 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v3;
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for _ToolbarInputs(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  return a1;
}

uint64_t assignWithTake for _ToolbarInputs(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_release();
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_release();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  return a1;
}

uint64_t getEnumTagSinglePayload for _ToolbarInputs(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 76)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for _ToolbarInputs(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_DWORD *)(result + 72) = 0;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 76) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 16) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 76) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for _ToolbarInputs()
{
  return &type metadata for _ToolbarInputs;
}

uint64_t initializeBufferWithCopyOfBuffer for _ToolbarOutputs(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for _ToolbarOutputs(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  return a1;
}

uint64_t assignWithTake for _ToolbarOutputs(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  return a1;
}

ValueMetadata *type metadata accessor for _ToolbarOutputs()
{
  return &type metadata for _ToolbarOutputs;
}

uint64_t destroy for _ToolbarItemList()
{
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for _ToolbarItemList(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  uint64_t v3 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v3;
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for _ToolbarItemList(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  return a1;
}

uint64_t assignWithTake for _ToolbarItemList(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_release();
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_release();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  return a1;
}

uint64_t storeEnumTagSinglePayload for _ToolbarItemList(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 104) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 16) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 104) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for _ToolbarItemList()
{
  return &type metadata for _ToolbarItemList;
}

ValueMetadata *type metadata accessor for ToolbarContentBuilder()
{
  return &type metadata for ToolbarContentBuilder;
}

_UNKNOWN **sub_187BD0FE4()
{
  return &protocol witness table for TupleToolbarContent<A>;
}

_UNKNOWN **sub_187BD0FF0()
{
  return &protocol witness table for TupleToolbarContent<A>;
}

ValueMetadata *type metadata accessor for EmptyToolbarContent()
{
  return &type metadata for EmptyToolbarContent;
}

ValueMetadata *type metadata accessor for ToolbarContentDescriptor()
{
  return &type metadata for ToolbarContentDescriptor;
}

uint64_t partial apply for specialized closure #1 in static ToolbarContent._makeContent(content:inputs:resolved:)()
{
  return specialized closure #1 in static ToolbarContent._makeContent(content:inputs:resolved:)();
}

{
  return specialized closure #1 in static ToolbarContent._makeContent(content:inputs:resolved:)();
}

{
  return specialized closure #1 in static ToolbarContent._makeContent(content:inputs:resolved:)();
}

{
  return specialized closure #1 in static ToolbarContent._makeContent(content:inputs:resolved:)();
}

uint64_t sub_187BD103C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(*(void *)(a3 + a2 - 8) + 24))(*(void *)(a3 + a2 - 16));
}

uint64_t sub_187BD107C()
{
  return 16;
}

__n128 sub_187BD1088(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t lazy protocol witness table accessor for type Focus<EmptyToolbarContent, Never> and conformance Focus<A, B>(unint64_t *a1, unint64_t *a2, uint64_t a3)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for Focus<EmptyToolbarContent, Never>(255, a2, a3, MEMORY[0x1E4FBC248], MEMORY[0x1E4F4E760]);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t type metadata accessor for ToolbarContentBodyAccessory()
{
  return __swift_instantiateGenericMetadata();
}

unint64_t lazy protocol witness table accessor for type ToolbarContentBodyAccessory<Never> and conformance ToolbarContentBodyAccessory<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type ToolbarContentBodyAccessory<Never> and conformance ToolbarContentBodyAccessory<A>;
  if (!lazy protocol witness table cache variable for type ToolbarContentBodyAccessory<Never> and conformance ToolbarContentBodyAccessory<A>)
  {
    type metadata accessor for Focus<EmptyToolbarContent, Never>(255, &lazy cache variable for type metadata for ToolbarContentBodyAccessory<Never>, MEMORY[0x1E4FBC248], (uint64_t)&protocol witness table for Never, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for ToolbarContentBodyAccessory);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ToolbarContentBodyAccessory<Never> and conformance ToolbarContentBodyAccessory<A>);
  }
  return result;
}

void type metadata accessor for Focus<EmptyToolbarContent, Never>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = a5(0, a3, a4);
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

uint64_t partial apply for closure #1 in ToolbarContentBodyAccessory.updateBody(of:changed:)()
{
  return (*(uint64_t (**)(void))(*(void *)(v0 + 24) + 24))(*(void *)(v0 + 16));
}

void type metadata accessor for _GraphValue<SearchToolbarItem>()
{
  if (!lazy cache variable for type metadata for _GraphValue<SearchToolbarItem>)
  {
    type metadata accessor for SearchToolbarItem();
    unint64_t v0 = type metadata accessor for _GraphValue();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _GraphValue<SearchToolbarItem>);
    }
  }
}

void type metadata accessor for Focus<SearchToolbarItem, Never>()
{
  if (!lazy cache variable for type metadata for Focus<SearchToolbarItem, Never>)
  {
    type metadata accessor for SearchToolbarItem();
    unint64_t v0 = type metadata accessor for Focus();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Focus<SearchToolbarItem, Never>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type Focus<SearchToolbarItem, Never> and conformance Focus<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type Focus<SearchToolbarItem, Never> and conformance Focus<A, B>;
  if (!lazy protocol witness table cache variable for type Focus<SearchToolbarItem, Never> and conformance Focus<A, B>)
  {
    type metadata accessor for Focus<SearchToolbarItem, Never>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Focus<SearchToolbarItem, Never> and conformance Focus<A, B>);
  }
  return result;
}

uint64_t closure #1 in static ToolbarContent._makeContent(content:inputs:resolved:)specialized partial apply()
{
  return partial apply for specialized closure #1 in static ToolbarContent._makeContent(content:inputs:resolved:)();
}

uint64_t VisualEffect.grayscale(_:)()
{
  return VisualEffect.rendererEffect<A>(_:)();
}

uint64_t sub_187BD13EC()
{
  return swift_getOpaqueTypeConformance2();
}

double protocol witness for static _ViewTraitKey.defaultValue.getter in conformance FormRowInsetsTraitKey@<D0>(uint64_t a1@<X8>)
{
  double result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(unsigned char *)(a1 + 32) = 2;
  return result;
}

void View.formRowInsets(_:)()
{
}

uint64_t View.formRowBackground<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v7[2] = a2;
  v7[3] = a3;
  void v7[4] = a4;
  v7[5] = a5;
  type metadata accessor for Optional();
  _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((void (*)(char *, char *))partial apply for closure #1 in View.formRowBackground<A>(_:), (uint64_t)v7, MEMORY[0x1E4FBC248], MEMORY[0x1E4F3F700], v5, (uint64_t)&v8);
  v7[7] = v8;
  View._trait<A>(_:_:)();
  return swift_release();
}

uint64_t closure #1 in View.formRowBackground<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  double v3 = MEMORY[0x1F4188790](a1);
  (*(void (**)(char *, double))(v5 + 16))((char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v3);
  uint64_t result = AnyShapeStyle.init<A>(_:)();
  *a2 = result;
  return result;
}

uint64_t partial apply for closure #1 in View.formRowBackground<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return closure #1 in View.formRowBackground<A>(_:)(a1, a2);
}

uint64_t sub_187BD1644()
{
  return swift_deallocObject();
}

void *partial apply for closure #1 in View.formRowIndentationLevel(_:)(void *result)
{
  if ((*(unsigned char *)(v1 + 24) & 1) == 0) {
    *uint64_t result = *(void *)(v1 + 16);
  }
  return result;
}

uint64_t FormRowAccessoryRevealState.__deallocating_deinit()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC7SwiftUI27FormRowAccessoryRevealState__isHovered;
  type metadata accessor for Published<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for Published<Bool>, MEMORY[0x1E4FBB390], MEMORY[0x1E4F1AC70]);
  uint64_t v3 = v2;
  uint64_t v4 = *(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8);
  v4(v1, v2);
  v4(v0 + OBJC_IVAR____TtC7SwiftUI27FormRowAccessoryRevealState__isFocused, v3);

  return swift_deallocClassInstance();
}

void View.formBackground<A>(_:)()
{
}

uint64_t protocol witness for ColorProvider.staticColor.getter in conformance EmphasizedGroupBackgroundColorProvider()
{
  return MEMORY[0x1F40FDDD0]();
}

uint64_t protocol witness for ColorProvider.colorDescription.getter in conformance EmphasizedGroupBackgroundColorProvider()
{
  return String.init<A>(describing:)();
}

uint64_t one-time initialization function for emphasizedGroupBackground()
{
  lazy protocol witness table accessor for type EmphasizedGroupBackgroundColorProvider and conformance EmphasizedGroupBackgroundColorProvider();
  uint64_t result = Color.init<A>(provider:)();
  static Color.emphasizedGroupBackground = result;
  return result;
}

uint64_t static Color.emphasizedGroupBackground.getter()
{
  if (one-time initialization token for emphasizedGroupBackground != -1) {
    swift_once();
  }

  return swift_retain();
}

uint64_t ObjC metadata update function for FormRowAccessoryRevealState()
{
  return type metadata accessor for FormRowAccessoryRevealState();
}

uint64_t type metadata accessor for FormRowAccessoryRevealState()
{
  uint64_t result = type metadata singleton initialization cache for FormRowAccessoryRevealState;
  if (!type metadata singleton initialization cache for FormRowAccessoryRevealState) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void type metadata completion function for FormRowAccessoryRevealState()
{
  type metadata accessor for Published<Bool>(319, (unint64_t *)&lazy cache variable for type metadata for Published<Bool>, MEMORY[0x1E4FBB390], MEMORY[0x1E4F1AC70]);
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

uint64_t type metadata accessor for FormRowAccessoryRevealState.Wrapper()
{
  return self;
}

uint64_t sub_187BD193C()
{
  return swift_getWitnessTable();
}

unint64_t lazy protocol witness table accessor for type _TraitWritingModifier<FormRowInsetsTraitKey> and conformance _TraitWritingModifier<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type _TraitWritingModifier<FormRowInsetsTraitKey> and conformance _TraitWritingModifier<A>;
  if (!lazy protocol witness table cache variable for type _TraitWritingModifier<FormRowInsetsTraitKey> and conformance _TraitWritingModifier<A>)
  {
    type metadata accessor for _TraitWritingModifier<OnDeleteDefaultTraitKey>(255, &lazy cache variable for type metadata for _TraitWritingModifier<FormRowInsetsTraitKey>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _TraitWritingModifier<FormRowInsetsTraitKey> and conformance _TraitWritingModifier<A>);
  }
  return result;
}

uint64_t sub_187BD1A30()
{
  return swift_getWitnessTable();
}

unint64_t lazy protocol witness table accessor for type _TraitWritingModifier<FormRowBackgroundTraitKey> and conformance _TraitWritingModifier<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type _TraitWritingModifier<FormRowBackgroundTraitKey> and conformance _TraitWritingModifier<A>;
  if (!lazy protocol witness table cache variable for type _TraitWritingModifier<FormRowBackgroundTraitKey> and conformance _TraitWritingModifier<A>)
  {
    type metadata accessor for _TraitWritingModifier<OnDeleteDefaultTraitKey>(255, &lazy cache variable for type metadata for _TraitWritingModifier<FormRowBackgroundTraitKey>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _TraitWritingModifier<FormRowBackgroundTraitKey> and conformance _TraitWritingModifier<A>);
  }
  return result;
}

uint64_t sub_187BD1B28()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_187BD1B80()
{
  return swift_getWitnessTable();
}

void type metadata accessor for Published<Bool>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

uint64_t sub_187BD1C60(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

ValueMetadata *type metadata accessor for FormRowInsetsTraitKey()
{
  return &type metadata for FormRowInsetsTraitKey;
}

void *type metadata accessor for FormRowIndentationKey()
{
  return &unk_1ED434F60;
}

ValueMetadata *type metadata accessor for FormRowBackgroundTraitKey()
{
  return &type metadata for FormRowBackgroundTraitKey;
}

unint64_t lazy protocol witness table accessor for type EmphasizedGroupBackgroundColorProvider and conformance EmphasizedGroupBackgroundColorProvider()
{
  unint64_t result = lazy protocol witness table cache variable for type EmphasizedGroupBackgroundColorProvider and conformance EmphasizedGroupBackgroundColorProvider;
  if (!lazy protocol witness table cache variable for type EmphasizedGroupBackgroundColorProvider and conformance EmphasizedGroupBackgroundColorProvider)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EmphasizedGroupBackgroundColorProvider and conformance EmphasizedGroupBackgroundColorProvider);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type EmphasizedGroupBackgroundColorProvider and conformance EmphasizedGroupBackgroundColorProvider;
  if (!lazy protocol witness table cache variable for type EmphasizedGroupBackgroundColorProvider and conformance EmphasizedGroupBackgroundColorProvider)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EmphasizedGroupBackgroundColorProvider and conformance EmphasizedGroupBackgroundColorProvider);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type EmphasizedGroupBackgroundColorProvider and conformance EmphasizedGroupBackgroundColorProvider;
  if (!lazy protocol witness table cache variable for type EmphasizedGroupBackgroundColorProvider and conformance EmphasizedGroupBackgroundColorProvider)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EmphasizedGroupBackgroundColorProvider and conformance EmphasizedGroupBackgroundColorProvider);
  }
  return result;
}

ValueMetadata *type metadata accessor for EmphasizedGroupBackgroundColorProvider()
{
  return &type metadata for EmphasizedGroupBackgroundColorProvider;
}

ValueMetadata *type metadata accessor for FormRowInsetsTraitKey.Configuration()
{
  return &type metadata for FormRowInsetsTraitKey.Configuration;
}

uint64_t specialized EmphasizedGroupBackgroundColorProvider.resolve(in:)()
{
  return Color.Resolved.init(white:opacity:)();
}

BOOL @objc UIKitRelationshipGestureRecognizer.canPrevent(_:)()
{
  uint64_t ObjectType = swift_getObjectType();
  return ObjectType != type metadata accessor for UIKitGestureRecognizer();
}

uint64_t type metadata accessor for UIKitRelationshipGestureRecognizer()
{
  return self;
}

uint64_t VisualEffect.hueRotation(_:)()
{
  return VisualEffect.rendererEffect<A>(_:)();
}

uint64_t sub_187BD1F18()
{
  return swift_getOpaqueTypeConformance2();
}

void __swiftcall HiddenTitleBarWindowStyle.init()()
{
}

void HiddenTitleBarWindowStyle.configureWindow(_:)()
{
}

ValueMetadata *type metadata accessor for HiddenTitleBarWindowStyle()
{
  return &type metadata for HiddenTitleBarWindowStyle;
}

void Scene.windowBackground<A>(_:)()
{
}

uint64_t sub_187BD1FBC(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

uint64_t specialized static PlatformItemsModifier.transformPlatformItemsOutputs<A>(_:inputs:modifier:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 48);
  uint64_t result = PreferencesInputs.contains<A>(_:includeHostPreferences:)();
  if (result)
  {
    outlined retain of _ViewInputs(a2);
    lazy protocol witness table accessor for type _ViewInputs.PlatformItemFeaturesKey and conformance _ViewInputs.PlatformItemFeaturesKey();
    PropertyList.subscript.getter();
    uint64_t result = outlined release of _ViewInputs(a2);
    if ((v4 & 0x80) != 0)
    {
      type metadata accessor for _ContiguousArrayStorage<Swift.AnyObject>(0, (unint64_t *)&lazy cache variable for type metadata for _GraphValue<AccessibilityPlatformItemTransform>, (uint64_t)&type metadata for AccessibilityPlatformItemTransform, MEMORY[0x1E4F3F590]);
      _GraphValue.value.getter();
      swift_bridgeObjectRetain();
      PreferencesOutputs.subscript.getter();
      swift_bridgeObjectRelease();
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      type metadata accessor for PropertiesTransform<AccessibilityAttachmentModifier>(0, &lazy cache variable for type metadata for PlatformItemsTransform<AccessibilityPlatformItemTransform>, (uint64_t (*)(void))lazy protocol witness table accessor for type AccessibilityPlatformItemTransform and conformance AccessibilityPlatformItemTransform, (uint64_t)&type metadata for AccessibilityPlatformItemTransform, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PlatformItemsTransform);
      lazy protocol witness table accessor for type PlatformItemsTransform<AccessibilityPlatformItemTransform> and conformance PlatformItemsTransform<A>();
      Attribute.init<A>(body:value:flags:update:)();
      return PreferencesOutputs.subscript.setter();
    }
  }
  return result;
}

{
  uint64_t result;
  uint64_t v4;

  uint64_t v4 = *(void *)(a2 + 48);
  uint64_t result = PreferencesInputs.contains<A>(_:includeHostPreferences:)();
  if (result)
  {
    outlined retain of _ViewInputs(a2);
    lazy protocol witness table accessor for type _ViewInputs.PlatformItemFeaturesKey and conformance _ViewInputs.PlatformItemFeaturesKey();
    PropertyList.subscript.getter();
    uint64_t result = outlined release of _ViewInputs(a2);
    if ((v4 & 8) != 0)
    {
      type metadata accessor for _ContiguousArrayStorage<Swift.AnyObject>(0, &lazy cache variable for type metadata for _GraphValue<PlatformButtonActionTransform>, (uint64_t)&type metadata for PlatformButtonActionTransform, MEMORY[0x1E4F3F590]);
      _GraphValue.value.getter();
      swift_bridgeObjectRetain();
      PreferencesOutputs.subscript.getter();
      swift_bridgeObjectRelease();
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      type metadata accessor for PropertiesTransform<AccessibilityAttachmentModifier>(0, &lazy cache variable for type metadata for PlatformItemsTransform<PlatformButtonActionTransform>, (uint64_t (*)(void))lazy protocol witness table accessor for type PlatformButtonActionTransform and conformance PlatformButtonActionTransform, (uint64_t)&type metadata for PlatformButtonActionTransform, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PlatformItemsTransform);
      lazy protocol witness table accessor for type PlatformItemsTransform<PlatformButtonActionTransform> and conformance PlatformItemsTransform<A>();
      Attribute.init<A>(body:value:flags:update:)();
      return PreferencesOutputs.subscript.setter();
    }
  }
  return result;
}

{
  uint64_t result;
  uint64_t v4;

  uint64_t v4 = *(void *)(a2 + 48);
  uint64_t result = PreferencesInputs.contains<A>(_:includeHostPreferences:)();
  if (result)
  {
    outlined retain of _ViewInputs(a2);
    lazy protocol witness table accessor for type _ViewInputs.PlatformItemFeaturesKey and conformance _ViewInputs.PlatformItemFeaturesKey();
    PropertyList.subscript.getter();
    uint64_t result = outlined release of _ViewInputs(a2);
    if ((v4 & 0x20) != 0)
    {
      type metadata accessor for _ContiguousArrayStorage<Swift.AnyObject>(0, &lazy cache variable for type metadata for _GraphValue<LabelIconPlatformItemModifier>, (uint64_t)&type metadata for LabelIconPlatformItemModifier, MEMORY[0x1E4F3F590]);
      _GraphValue.value.getter();
      swift_bridgeObjectRetain();
      PreferencesOutputs.subscript.getter();
      swift_bridgeObjectRelease();
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      type metadata accessor for PropertiesTransform<AccessibilityAttachmentModifier>(0, &lazy cache variable for type metadata for PlatformItemsTransform<LabelIconPlatformItemModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type LabelIconPlatformItemModifier and conformance LabelIconPlatformItemModifier, (uint64_t)&type metadata for LabelIconPlatformItemModifier, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PlatformItemsTransform);
      lazy protocol witness table accessor for type PlatformItemsTransform<LabelIconPlatformItemModifier> and conformance PlatformItemsTransform<A>();
      Attribute.init<A>(body:value:flags:update:)();
      return PreferencesOutputs.subscript.setter();
    }
  }
  return result;
}

{
  uint64_t vars8;

  return specialized static PlatformItemsModifier.transformPlatformItemsOutputs<A>(_:inputs:modifier:)(a1, a2);
}

{
  uint64_t result;
  uint64_t v4;

  uint64_t v4 = *(void *)(a2 + 48);
  uint64_t result = PreferencesInputs.contains<A>(_:includeHostPreferences:)();
  if (result)
  {
    outlined retain of _ViewInputs(a2);
    lazy protocol witness table accessor for type _ViewInputs.PlatformItemFeaturesKey and conformance _ViewInputs.PlatformItemFeaturesKey();
    PropertyList.subscript.getter();
    uint64_t result = outlined release of _ViewInputs(a2);
    if ((v4 & 8) != 0)
    {
      type metadata accessor for _ContiguousArrayStorage<Swift.AnyObject>(0, &lazy cache variable for type metadata for _GraphValue<PlatformNewDocumentButtonTransform>, (uint64_t)&type metadata for PlatformNewDocumentButtonTransform, MEMORY[0x1E4F3F590]);
      _GraphValue.value.getter();
      swift_bridgeObjectRetain();
      PreferencesOutputs.subscript.getter();
      swift_bridgeObjectRelease();
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      type metadata accessor for PropertiesTransform<AccessibilityAttachmentModifier>(0, &lazy cache variable for type metadata for PlatformItemsTransform<PlatformNewDocumentButtonTransform>, (uint64_t (*)(void))lazy protocol witness table accessor for type PlatformNewDocumentButtonTransform and conformance PlatformNewDocumentButtonTransform, (uint64_t)&type metadata for PlatformNewDocumentButtonTransform, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PlatformItemsTransform);
      lazy protocol witness table accessor for type PlatformItemsTransform<PlatformNewDocumentButtonTransform> and conformance PlatformItemsTransform<A>();
      Attribute.init<A>(body:value:flags:update:)();
      return PreferencesOutputs.subscript.setter();
    }
  }
  return result;
}

uint64_t protocol witness for AccessibilityViewModifier.initialAttachment(for:) in conformance AccessibilityTraitsModifier<A>.ChildModifier()
{
  return AccessibilityViewModifier.initialAttachment(for:)();
}

double protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance AccessibilityLabelModifier<A>.ChildModifier@<D0>(int *a1@<X0>, long long *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, void *a6@<X8>)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return static AccessibilityViewModifier._makeView(modifier:inputs:body:)(a1, a2, a3, a4, a5, WitnessTable, a6);
}

uint64_t implicit closure #3 in static AccessibilityViewModifier._makeView(modifier:inputs:body:)()
{
  return Attribute.init<A>(body:value:flags:update:)();
}

Swift::Bool __swiftcall AnyAccessibilityViewModifier.willCreateNode(for:)(Swift::OpaquePointer a1)
{
  Swift::Bool result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void AnyAccessibilityViewModifier.initialAttachment(for:)()
{
}

void AnyAccessibilityViewModifier.hash(into:)()
{
}

uint64_t PropertiesTransform.deferredAttachment.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = *(unsigned int *)(v1 + 32);
  if (result == *MEMORY[0x1E4F4E7A0])
  {
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    *(unsigned char *)(a1 + 16) = -1;
  }
  else
  {
    uint64_t Value = AGGraphGetValue();
    uint64_t v6 = *(void *)Value;
    unint64_t v5 = *(void **)(Value + 8);
    *(void *)a1 = *(void *)Value;
    *(void *)(a1 + 8) = v5;
    char v7 = *(unsigned char *)(Value + 16);
    *(unsigned char *)(a1 + 16) = v7;
    return outlined copy of AccessibilityAttachment.Tree(v6, v5, v7);
  }
  return result;
}

uint64_t PropertiesTransform.nodeList.getter@<X0>(void *a1@<X8>)
{
  uint64_t result = *(unsigned int *)(v1 + 36);
  if (result == *MEMORY[0x1E4F4E7A0])
  {
    *a1 = 0;
    a1[1] = 0;
  }
  else
  {
    uint64_t Value = (void *)AGGraphGetValue();
    uint64_t v5 = Value[1];
    *a1 = *Value;
    a1[1] = v5;
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t PropertiesTransform.updateValue()(uint64_t a1)
{
  void (*v163)(long long *__return_ptr, long long *, void *, unint64_t, uint64_t, uint64_t);
  uint64_t v164;
  unint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  void *rawValue;
  uint64_t v170;
  char *v171;
  long long v172;
  uint64_t v173;
  char v174;
  long long v175;
  long long v176;
  unsigned __int8 v177;
  long long v178;
  long long v179;
  uint64_t v180;

  uint64_t v2 = v1;
  uint64_t v180 = *MEMORY[0x1E4F143B8];
  uint64_t v170 = *(void *)(a1 + 16);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v5 = *(void *)(TupleTypeMetadata2 - 8);
  MEMORY[0x1F4188790](TupleTypeMetadata2);
  char v7 = (char *)&v150 - v6;
  PropertiesTransform.environment.getter(&v179);
  uint64_t v176 = v179;
  char v8 = EnvironmentValues.accessibilityEnabled.getter();
  swift_release();
  swift_release();
  if ((v8 & 1) == 0)
  {
    PropertiesTransform.nodeList.getter(&v179);
    uint64_t v28 = v179;
    if ((void)v179)
    {
      uint64_t v29 = *((void *)&v179 + 1);
LABEL_40:
      *(void *)&uint64_t v179 = v28;
      *((void *)&v179 + 1) = v29;
      AGGraphSetOutputValue();
      return swift_bridgeObjectRelease();
    }
    if (one-time initialization token for defaultValue == -1)
    {
LABEL_39:
      uint64_t v29 = *((void *)&static AccessibilityNodesKey.defaultValue + 1);
      uint64_t v28 = static AccessibilityNodesKey.defaultValue;
      swift_bridgeObjectRetain();
      goto LABEL_40;
    }
LABEL_77:
    swift_once();
    goto LABEL_39;
  }
  if (*(_DWORD *)(v2 + 80) != *(_DWORD *)AGGraphGetValue() >> 1)
  {

    *(void *)(v2 + 64) = 0;
    swift_unknownObjectWeakAssign();
    *(_DWORD *)(v2 + 80) = *(_DWORD *)AGGraphGetValue() >> 1;
  }
  uint64_t v9 = *(int *)(TupleTypeMetadata2 + 48);
  uint64_t v10 = v170;
  uint64_t Value = AGGraphGetValue();
  char v13 = v12;
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16))(v7, Value, v10);
  v7[v9] = v13 & 1;
  char v14 = (uint64_t *)AGGraphGetValue();
  uint64_t v16 = v15;
  uint64_t v17 = *v14;
  uint64_t v18 = v14[1];
  int CurrentAttribute = AGGraphGetCurrentAttribute();
  int v20 = *MEMORY[0x1E4F4E7A0];
  if (CurrentAttribute == *MEMORY[0x1E4F4E7A0])
  {
LABEL_73:
    __break(1u);
LABEL_74:
    __break(1u);
    goto LABEL_75;
  }
  long long v164 = v16;
  uint64_t v154 = v5;
  uint64_t v156 = v18;
  swift_retain();
  uint64_t v157 = v17;
  swift_retain();
  AccessibilityAttachmentToken.init<A>(_:)();
  uint64_t v21 = v179;
  char v22 = BYTE8(v179);
  int v23 = *(_DWORD *)(v2 + 36);
  uint64_t v168 = a1;
  if (v23 == v20)
  {
    uint64_t v27 = 0;
    uint64_t v24 = 0;
    int v26 = 0;
  }
  else
  {
    uint64_t v24 = *(void *)(AGGraphGetValue() + 8);
    int v26 = v25 & 1;
    uint64_t v27 = swift_bridgeObjectRetain();
  }
  if (v27) {
    int v30 = v26;
  }
  else {
    int v30 = 0;
  }
  int v153 = v30;
  if (v27) {
    uint64_t v31 = v24;
  }
  else {
    uint64_t v31 = 0;
  }
  uint64_t v152 = v31;
  if (v27) {
    v32._rawuint64_t Value = (void *)v27;
  }
  else {
    v32._rawuint64_t Value = (void *)MEMORY[0x1E4FBC860];
  }
  uint64_t v33 = *(void *)(v168 + 24);
  uint64_t v34 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v33 + 32);
  swift_bridgeObjectRetain_n();
  uint64_t v167 = v33;
  char v35 = v34(v32._rawValue, v170, v33);
  uint64_t v160 = v7;
  uint64_t v166 = v2;
  rawuint64_t Value = v32._rawValue;
  uint64_t v155 = TupleTypeMetadata2;
  if (v35)
  {
    type metadata accessor for ViewGraph();
    uint64_t v36 = MEMORY[0x18C114EE0]() + 200;
    swift_beginAccess();
    uint64_t v37 = MEMORY[0x18C119DF0](v36);
    swift_release();
    if (v37)
    {
      swift_getObjectType();
      uint64_t v38 = swift_conformsToProtocol2();
      if (v38) {
        uint64_t v39 = v38;
      }
      else {
        uint64_t v39 = 0;
      }
      if (v38) {
        uint64_t v40 = v37;
      }
      else {
        uint64_t v40 = 0;
      }
      if (v40)
      {
LABEL_43:
        uint64_t v46 = *(void **)(v2 + 64);
        uint64_t v47 = v167;
        uint64_t v48 = *(uint64_t (**)(uint64_t, uint64_t, void *, uint64_t, uint64_t))(v167 + 56);
        long long v49 = v46;
        uint64_t v50 = (char *)v48(v40, v39, v46, v170, v47);

        swift_unknownObjectRelease();
        if (v46 && v50 == v49)
        {
          swift_bridgeObjectRelease();
          if ((v164 & 1) == 0)
          {
            char v51 = 0;
            char v7 = v160;
            goto LABEL_147;
          }
          char v7 = v160;
          goto LABEL_145;
        }
        Outputuint64_t Value = AGGraphGetOutputValue();
        uint64_t v159 = v50;
        if (!OutputValue)
        {
          char v7 = v160;
          goto LABEL_139;
        }
        char v7 = v160;
        if (v46) {
          goto LABEL_139;
        }
        if (!((unint64_t)v32._rawValue >> 62))
        {
          uint64_t v53 = *(void *)(((unint64_t)v32._rawValue & 0xFFFFFFFFFFFFFF8) + 0x10);
          if (v53)
          {
LABEL_51:
            unint64_t v54 = 0;
            id v171 = (char *)((unint64_t)v32._rawValue & 0xC000000000000001);
            uint64_t v162 = (unint64_t)v32._rawValue & 0xFFFFFFFFFFFFFF8;
            uint64_t v161 = (char *)v32._rawValue + 32;
            uint64_t v165 = v53;
            while (1)
            {
              if (v171)
              {
                uint64_t v60 = (char *)MEMORY[0x18C117680](v54, v32._rawValue);
              }
              else
              {
                if (v54 >= *(void *)(v162 + 16)) {
                  goto LABEL_74;
                }
                uint64_t v60 = (char *)*(id *)&v161[8 * v54];
              }
              uint64_t v61 = v60;
              if (__OFADD__(v54++, 1))
              {
                __break(1u);
                goto LABEL_73;
              }
              uint64_t v63 = &v60[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_attachmentsStorage];
              swift_beginAccess();
              uint64_t v64 = *(void *)v63;
              uint64_t v65 = *(void *)(*(void *)v63 + 16);
              if (v65) {
                break;
              }

LABEL_54:
              char v7 = v160;
              v32._rawuint64_t Value = rawValue;
              if (v54 == v53) {
                goto LABEL_139;
              }
            }
            swift_bridgeObjectRetain();
            unint64_t v66 = 0;
            long long v67 = (unsigned __int8 *)(v64 + 64);
            unsigned int v68 = (unsigned __int8 *)(v64 + 64);
            while (1)
            {
              int v70 = *v68;
              v68 += 40;
              char v69 = v70;
              if (v70 != 255)
              {
                *(void *)&uint64_t v176 = *((void *)v67 - 1);
                BYTE8(v176) = v69;
                *(void *)&uint64_t v178 = v21;
                BYTE8(v178) = v22;
                if (static AccessibilityAttachmentToken.== infix(_:_:)()) {
                  break;
                }
              }
              ++v66;
              long long v67 = v68;
              if (v65 == v66) {
                goto LABEL_53;
              }
            }
            swift_bridgeObjectRelease();
            uint64_t v71 = *(void *)v63;
            unint64_t v72 = *(void *)(*(void *)v63 + 16);
            if (v72 >= v66)
            {
              swift_beginAccess();
              unint64_t v73 = *(void *)(*(void *)v63 + 16);
              if (v73 >= v66)
              {
                uint64_t v163 = (void (*)(long long *__return_ptr, long long *, void *, unint64_t, uint64_t, uint64_t))((2 * v72) | 1);
                swift_bridgeObjectRetain();
                specialized Array.replaceSubrange<A>(_:with:)(v66, v73);
                swift_endAccess();
                uint64_t v55 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs10ArraySliceVy7SwiftUI30AccessibilityAttachmentStorage33_2F6327E72581B7F866C81F7546545BE8LLVG_AH0hI0Vs5NeverOTg503_s7f4UI17h37NodeC17removeAttachments5afteryAA0C15i33TokenO_tFAA0cH0VAA0cH7Storage33_2klmnopQ55LLVcfu_33_27bc406762570ff177ca3ffab16a1c9fAlITf3nnnpk_nTf1cn_nTf4x_n((char *)(v71 + 32), v66, (unint64_t)v163);
                static AccessibilityAttachment.combine(_:)(v55, (uint64_t *)&v176);
                swift_bridgeObjectRelease();
                unsigned int v56 = (void *)*((void *)&v176 + 1);
                uint64_t v178 = v176;
                uint64_t v175 = 0uLL;
                AccessibilityNode.scheduleNotifyForAttachmentChange(from:to:)((uint64_t *)&v178, &v175);
                swift_bridgeObjectRelease();

                char v57 = &v61[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_cachedCombinedAttachment];
                uint64_t v58 = *(void *)&v61[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_cachedCombinedAttachment];
                uint64_t v59 = *(void **)&v61[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_cachedCombinedAttachment + 8];
                *(void *)char v57 = 0;
                *((void *)v57 + 1) = 0;
                outlined consume of AccessibilityAttachment?(v58, v59);
                v61[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_platformElementPropertiesDirty] = 1;
LABEL_53:

                swift_bridgeObjectRelease();
                uint64_t v53 = v165;
                goto LABEL_54;
              }
              goto LABEL_76;
            }
LABEL_75:
            __break(1u);
LABEL_76:
            __break(1u);
            goto LABEL_77;
          }
LABEL_139:
          swift_bridgeObjectRelease();
          uint64_t v120 = v166;
          unint64_t v121 = *(void **)(v166 + 64);
          if (v121)
          {
            uint64_t v50 = v159;
            uint64_t v122 = v159;

            *(void *)(v120 + 64) = v122;
            if ((v164 & 1) == 0) {
              goto LABEL_146;
            }
          }
          else
          {
            uint64_t v50 = v159;
            if ((v164 & 1) == 0)
            {
              *(void *)&uint64_t v176 = v157;
              *((void *)&v176 + 1) = v156;
              AccessibilityNode.updateEnvironment(_:)((uint64_t *)&v176);
              *(void *)(v120 + 64) = v50;
              uint64_t v123 = v50;
LABEL_146:
              char v51 = 1;
LABEL_147:
              (*(void (**)(long long *__return_ptr, Swift::OpaquePointer, uint64_t))(v167 + 40))(&v178, v32, v170);
              swift_bridgeObjectRelease();
              PropertiesTransform.deferredAttachment.getter((uint64_t)&v176);
              if (v177 <= 1u)
              {
                BOOL v125 = (void *)*((void *)&v176 + 1);
                uint64_t v126 = v176;
                if (v177)
                {
                  uint64_t v127 = specialized Sequence.compactMap<A>(_:)(v176);
                  static AccessibilityAttachment.combine(_:)(v127, (uint64_t *)&v175);
                  swift_bridgeObjectRelease();
                  outlined consume of AccessibilityAttachment.Tree?(v126, v125, 1);
                  BOOL v125 = (void *)*((void *)&v175 + 1);
                  uint64_t v126 = v175;
                }
                *(void *)&uint64_t v176 = v126;
                AccessibilityProperties.merge(with:)((uint64_t *)&v176);
                uint64_t v176 = v178;
                uint64_t v128 = (void *)AccessibilityAttachment.platformElement.getter();

                if (!v128)
                {
                  *(void *)&uint64_t v176 = v126;
                  *((void *)&v176 + 1) = v125;
                  if (AccessibilityAttachment.platformElement.getter()) {
                    AccessibilityAttachment.platformElement.setter();
                  }
                }
                swift_bridgeObjectRelease();
              }
              uint64_t v129 = &v50[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_attachmentsStorage];
              swift_beginAccess();
              uint64_t v130 = *(void *)v129;
              uint64_t v131 = *(void *)(v130 + 16);
              if (v131)
              {
                swift_bridgeObjectRetain();
                id v132 = (unsigned __int8 *)(v130 + 64);
                uint64_t v133 = (unsigned __int8 *)(v130 + 64);
                while (1)
                {
                  int v135 = *v133;
                  v133 += 40;
                  char v134 = v135;
                  if (v135 != 255)
                  {
                    *(void *)&uint64_t v175 = *((void *)v132 - 1);
                    BYTE8(v175) = v134;
                    uint64_t v173 = v21;
                    uint64_t v174 = v22;
                    if (static AccessibilityAttachmentToken.== infix(_:_:)()) {
                      break;
                    }
                  }
                  id v132 = v133;
                  if (!--v131)
                  {
                    swift_bridgeObjectRelease();
                    goto LABEL_162;
                  }
                }
                swift_bridgeObjectRelease();
                uint64_t v175 = v178;
                uint64_t v173 = v21;
                uint64_t v174 = v22;
                id v136 = *((id *)&v178 + 1);
                swift_bridgeObjectRetain();
                char v137 = specialized AccessibilityNode.updateAttachment(_:isInPlatformItemList:token:merge:)((char **)&v175, &v173, 0);

                swift_bridgeObjectRelease();
                if (v137)
                {
                  char v138 = 1;
                  id v139 = v50;
                  goto LABEL_163;
                }
                id v139 = v50;
                AccessibilityNode.platformElement.getter();
                uint64_t v119 = v154;
                if (v148)
                {

                  char v138 = 1;
                }
                else
                {
                  uint64_t v149 = (void *)MEMORY[0x18C119DF0](&v139[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_parent]);

                  if (v149) {
                    char v138 = v51;
                  }
                  else {
                    char v138 = 1;
                  }
                }
              }
              else
              {
LABEL_162:
                uint64_t v175 = v178;
                uint64_t v173 = v21;
                uint64_t v174 = v22;
                id v136 = *((id *)&v178 + 1);
                swift_bridgeObjectRetain();
                id v139 = v50;
                specialized AccessibilityNode.addAttachment(_:isInPlatformItemList:token:)((uint64_t *)&v175, &v173);

                swift_bridgeObjectRelease();
                char v138 = 1;
LABEL_163:
                uint64_t v119 = v154;
              }
              AccessibilityNode.updateChildren(_:)(v32);
              swift_bridgeObjectRelease();
              type metadata accessor for _ContiguousArrayStorage<Swift.AnyObject>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>, MEMORY[0x1E4FBC838] + 8, MEMORY[0x1E4FBBE00]);
              uint64_t v140 = swift_allocObject();
              *(_OWORD *)(v140 + 16) = xmmword_188351940;
              *(void *)(v140 + 32) = v139;
              *(void *)&uint64_t v175 = v140;
              specialized Array._endMutation()();
              uint64_t v141 = (void *)v175;

              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              v32._rawuint64_t Value = v141;
              if ((v138 & 1) == 0) {
                goto LABEL_166;
              }
LABEL_165:
              DisplayList.Version.init(forUpdate:)();
              uint64_t v142 = v178;
              goto LABEL_171;
            }
            *(void *)(v166 + 64) = v159;
            uint64_t v124 = v50;
          }
LABEL_145:
          *(void *)&uint64_t v176 = v157;
          *((void *)&v176 + 1) = v156;
          AccessibilityNode.updateEnvironment(_:)((uint64_t *)&v176);
          goto LABEL_146;
        }
LABEL_138:
        swift_bridgeObjectRetain();
        uint64_t v53 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (v53) {
          goto LABEL_51;
        }
        goto LABEL_139;
      }
      swift_unknownObjectRelease();
    }
    else
    {
      uint64_t v40 = 0;
    }
    uint64_t v39 = 0;
    goto LABEL_43;
  }
  unint64_t v41 = (unint64_t)v32._rawValue >> 62;
  if (!*(void *)(v2 + 64))
  {
    swift_bridgeObjectRelease();
    goto LABEL_80;
  }
  if (v41)
  {
    swift_bridgeObjectRetain();
    uint64_t v42 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v42) {
      goto LABEL_32;
    }
  }
  else
  {
    uint64_t v42 = *(void *)(((unint64_t)v32._rawValue & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v42)
    {
LABEL_32:
      if (v42 < 1)
      {
        __break(1u);
        goto LABEL_138;
      }
      for (uint64_t i = 0; i != v42; ++i)
      {
        if (((unint64_t)v32._rawValue & 0xC000000000000001) != 0) {
          id v44 = (id)MEMORY[0x18C117680](i, v32._rawValue);
        }
        else {
          id v44 = *((id *)v32._rawValue + i + 4);
        }
        int v45 = v44;
        swift_unknownObjectWeakAssign();
      }
    }
  }
  swift_bridgeObjectRelease();
  uint64_t v74 = v166;

  *(void *)(v74 + 64) = 0;
LABEL_80:
  if (v41)
  {
LABEL_134:
    swift_bridgeObjectRetain();
    uint64_t v75 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v75) {
      goto LABEL_82;
    }
LABEL_135:
    swift_bridgeObjectRelease_n();
    uint64_t v119 = v154;
    if ((v153 & 1) == 0) {
      goto LABEL_169;
    }
    goto LABEL_165;
  }
  uint64_t v75 = *(void *)(((unint64_t)v32._rawValue & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (!v75) {
    goto LABEL_135;
  }
LABEL_82:
  unint64_t v76 = 0;
  uint64_t v161 = 0;
  uint64_t v163 = *(void (**)(long long *__return_ptr, long long *, void *, unint64_t, uint64_t, uint64_t))(v167 + 48);
  long long v164 = v167 + 48;
  uint64_t v165 = (unint64_t)v32._rawValue & 0xC000000000000001;
  uint64_t v159 = (char *)((unint64_t)v32._rawValue & 0xFFFFFFFFFFFFFF8);
  uint64_t v158 = (char *)v32._rawValue + 32;
  int v151 = v153;
  uint64_t v162 = v75;
  do
  {
    while (1)
    {
      if (v165)
      {
        uint64_t v77 = (char *)MEMORY[0x18C117680](v76, v32._rawValue);
      }
      else
      {
        if (v76 >= *((void *)v159 + 2)) {
          goto LABEL_133;
        }
        uint64_t v77 = (char *)*(id *)&v158[8 * v76];
      }
      uint64_t v78 = v77;
      unint64_t v79 = v76 + 1;
      if (__OFADD__(v76, 1))
      {
        __break(1u);
LABEL_133:
        __break(1u);
        goto LABEL_134;
      }
      *(void *)&uint64_t v176 = v21;
      BYTE8(v176) = v22;
      swift_bridgeObjectRetain();
      v163(&v172, &v176, v32._rawValue, v76, v170, v167);
      swift_bridgeObjectRelease();
      PropertiesTransform.deferredAttachment.getter((uint64_t)&v176);
      if (v177 <= 1u)
      {
        unint64_t v80 = (void *)*((void *)&v176 + 1);
        uint64_t v81 = v176;
        if (v177)
        {
          uint64_t v82 = v161;
          long long v83 = specialized Sequence.compactMap<A>(_:)(v176);
          uint64_t v161 = v82;
          static AccessibilityAttachment.combine(_:)(v83, (uint64_t *)&v178);
          swift_bridgeObjectRelease();
          outlined consume of AccessibilityAttachment.Tree?(v81, v80, 1);
          unint64_t v80 = (void *)*((void *)&v178 + 1);
          uint64_t v81 = v178;
        }
        *(void *)&uint64_t v176 = v81;
        AccessibilityProperties.merge(with:)((uint64_t *)&v176);
        uint64_t v176 = v172;
        long long v84 = (void *)AccessibilityAttachment.platformElement.getter();

        if (!v84)
        {
          *(void *)&uint64_t v176 = v81;
          *((void *)&v176 + 1) = v80;
          if (AccessibilityAttachment.platformElement.getter()) {
            AccessibilityAttachment.platformElement.setter();
          }
        }
        swift_bridgeObjectRelease();
      }
      long long v85 = (char **)&v78[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_attachmentsStorage];
      swift_beginAccess();
      char v86 = *v85;
      uint64_t v87 = *((void *)*v85 + 2);
      id v171 = v78;
      if (v87)
      {
        swift_bridgeObjectRetain();
        uint64_t v88 = (unsigned __int8 *)(v86 + 64);
        int v89 = (unsigned __int8 *)(v86 + 64);
        while (1)
        {
          int v91 = *v89;
          v89 += 40;
          char v90 = v91;
          if (v91 != 255)
          {
            *(void *)&uint64_t v176 = *((void *)v88 - 1);
            BYTE8(v176) = v90;
            *(void *)&uint64_t v178 = v21;
            BYTE8(v178) = v22;
            if (static AccessibilityAttachmentToken.== infix(_:_:)()) {
              break;
            }
          }
          uint64_t v88 = v89;
          if (!--v87) {
            goto LABEL_103;
          }
        }
        LOBYTE(v87) = 1;
LABEL_103:
        swift_bridgeObjectRelease();
      }
      unint64_t v76 = v79;
      long long v92 = v172;
      uint64_t v176 = v172;
      if (AccessibilityAttachment.isEmpty.getter())
      {
        if ((v87 & 1) == 0) {
          goto LABEL_83;
        }
      }
      else if ((v87 & 1) == 0)
      {
        uint64_t v97 = v171;
        AccessibilityNode.traits.getter((uint64_t *)&v176);
        if ((v176 & 0x80000) == 0)
        {
          uint64_t v98 = *(void *)&v97[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_relationshipScope];
          if (!v98) {
            goto LABEL_121;
          }
          Swift::UInt v99 = *(void *)&v97[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_id];
          swift_beginAccess();
          uint64_t v100 = *(void *)(v98 + 32);
          if (*(void *)(v100 + 16)
            && (unint64_t v101 = specialized __RawDictionaryStorage.find<A>(_:)(v99, 0), (v102 & 1) != 0))
          {
            uint64_t v103 = *(void **)(*(void *)(v100 + 56) + 8 * v101);
            id v150 = v103;
            swift_endAccess();
            swift_retain();
            swift_bridgeObjectRetain();
            id v104 = v161;
            unint64_t v105 = specialized Sequence.reduce<A>(into:_:)(MEMORY[0x1E4FBC860], (uint64_t)v103, v98, 1u);
            uint64_t v161 = v104;
            swift_bridgeObjectRelease();
          }
          else
          {
            swift_endAccess();
            swift_retain();
            unint64_t v105 = MEMORY[0x1E4FBC860];
          }
          if (v105 >> 62)
          {
            swift_bridgeObjectRetain();
            uint64_t v106 = _CocoaArrayWrapper.endIndex.getter();
            swift_release();
            swift_bridgeObjectRelease();
          }
          else
          {
            uint64_t v106 = *(void *)((v105 & 0xFFFFFFFFFFFFFF8) + 0x10);
            swift_release();
          }
          swift_bridgeObjectRelease();
          char v7 = v160;
          if (!v106) {
            goto LABEL_121;
          }
        }
        *(void *)&uint64_t v178 = v92;
        AccessibilityProperties.traits.getter();
        if ((BYTE2(v176) & 8) == 0 && (BYTE10(v176) & 8) != 0)
        {
LABEL_121:
          uint64_t v176 = v92;
          id v107 = *((id *)&v92 + 1);
          swift_bridgeObjectRetain();
          AccessibilityNode.scheduleNotifyForAttachmentAddition(of:)(&v176);
          char v108 = *v85;
          swift_bridgeObjectRetain_n();
          id v109 = v107;
          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          *long long v85 = v108;
          id v150 = v109;
          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          {
            char v108 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v108 + 2) + 1, 1, v108);
            *long long v85 = v108;
          }
          unint64_t v112 = *((void *)v108 + 2);
          unint64_t v111 = *((void *)v108 + 3);
          if (v112 >= v111 >> 1)
          {
            char v108 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v111 > 1), v112 + 1, 1, v108);
            *long long v85 = v108;
          }
          *((void *)v108 + 2) = v112 + 1;
          uint64_t v113 = &v108[40 * v112];
          *((_OWORD *)v113 + 2) = v92;
          *((void *)v113 + 6) = 0;
          *((void *)v113 + 7) = v21;
          v113[64] = v22;
          int v114 = v171;
          uint64_t v115 = &v171[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_cachedCombinedAttachment];
          uint64_t v116 = *(void *)&v171[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_cachedCombinedAttachment];
          char v117 = *(void **)&v171[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_cachedCombinedAttachment + 8];
          *(void *)uint64_t v115 = 0;
          *((void *)v115 + 1) = 0;
          outlined consume of AccessibilityAttachment?(v116, v117);
          int v151 = 1;
          v114[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_platformElementPropertiesDirty] = 1;

          id v118 = v150;
          swift_bridgeObjectRelease_n();
          BOOL v96 = v79 == v162;
          char v7 = v160;
          goto LABEL_126;
        }
LABEL_83:
        swift_bridgeObjectRelease();

        break;
      }
      uint64_t v176 = v92;
      *(void *)&uint64_t v178 = v21;
      BYTE8(v178) = v22;
      id v93 = *((id *)&v92 + 1);
      swift_bridgeObjectRetain();
      id v94 = v171;
      char v95 = specialized AccessibilityNode.updateAttachment(_:isInPlatformItemList:token:merge:)((char **)&v176, (uint64_t *)&v178, 0);

      swift_bridgeObjectRelease_n();
      if ((v95 & 1) == 0) {
        break;
      }
      int v151 = 1;
      BOOL v96 = v79 == v162;
LABEL_126:
      v32._rawuint64_t Value = rawValue;
      if (v96)
      {
        swift_bridgeObjectRelease_n();
        uint64_t v119 = v154;
        goto LABEL_165;
      }
    }
    v32._rawuint64_t Value = rawValue;
  }
  while (v79 != v162);
  swift_bridgeObjectRelease_n();
  uint64_t v119 = v154;
  if (v151) {
    goto LABEL_165;
  }
LABEL_166:
  if (v153)
  {
    char v143 = *(void **)(v166 + 64);
    if (v143)
    {
      *(void *)(swift_allocObject() + 16) = v143;
      id v144 = v143;
      static Update.enqueueAction(_:)();

      swift_release();
    }
  }
LABEL_169:
  uint64_t v145 = AGGraphGetOutputValue();
  if (v145)
  {
    uint64_t v142 = *(void *)(v145 + 8);
LABEL_171:
    uint64_t v146 = v155;
  }
  else
  {
    uint64_t v146 = v155;
    uint64_t v142 = v152;
  }
  *(Swift::OpaquePointer *)&uint64_t v178 = v32;
  *((void *)&v178 + 1) = v142;
  swift_bridgeObjectRetain();
  AGGraphSetOutputValue();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  (*(void (**)(char *, uint64_t))(v119 + 8))(v7, v146);
  return swift_bridgeObjectRelease();
}

void closure #1 in PropertiesTransform.updateValue()()
{
}

unint64_t protocol witness for CustomStringConvertible.description.getter in conformance PropertiesTransform<A>()
{
  return specialized PropertiesTransform.description.getter();
}

double static PropertiesTransform<>.scrapeContent(from:)@<D0>(uint64_t a1@<X8>)
{
  AGGraphGetAttributeInfo();
  uint64_t v3 = v2;
  uint64_t v4 = swift_allocObject();
  outlined init with copy of PropertiesTransform<AccessibilityAttachmentModifier>(v3, (uint64_t)v21);
  uint64_t v5 = *(void *)AGGraphGetValue();
  swift_retain();
  swift_retain();
  outlined destroy of PropertiesTransform<AccessibilityAttachmentModifier>((uint64_t)v21);
  swift_beginAccess();
  *(void *)(v4 + 16) = *(void *)(v5 + 16);
  swift_bridgeObjectRetain();
  swift_release();
  swift_release();
  outlined init with copy of PropertiesTransform<AccessibilityAttachmentModifier>(v3, (uint64_t)v20);
  uint64_t Value = (uint64_t *)AGGraphGetValue();
  uint64_t v8 = *Value;
  uint64_t v7 = Value[1];
  *(void *)(v4 + 24) = v8;
  *(void *)(v4 + 32) = v7;
  swift_retain();
  swift_retain();
  outlined destroy of PropertiesTransform<AccessibilityAttachmentModifier>((uint64_t)v20);
  *(_OWORD *)(v4 + 40) = *(_OWORD *)(v3 + 40);
  uint64_t v19 = v4 | 0x5000000000000000;
  int v9 = *(_DWORD *)(v3 + 28);
  int v18 = *(_DWORD *)(v3 + 24);
  int v17 = v9;
  outlined init with copy of PropertiesTransform<AccessibilityAttachmentModifier>(v3, (uint64_t)v16);
  outlined destroy of PropertiesTransform<AccessibilityAttachmentModifier>((uint64_t)v16);
  outlined init with copy of PropertiesTransform<AccessibilityAttachmentModifier>(v3, (uint64_t)v15);
  outlined destroy of PropertiesTransform<AccessibilityAttachmentModifier>((uint64_t)v15);
  outlined init with copy of PropertiesTransform<AccessibilityAttachmentModifier>(v3, (uint64_t)v14);
  outlined destroy of PropertiesTransform<AccessibilityAttachmentModifier>((uint64_t)v14);
  ScrapeableContent.Item.init(_:ids:_:position:size:transform:)();
  uint64_t v10 = v26;
  long long v11 = v23;
  *(_OWORD *)a1 = v22;
  *(_OWORD *)(a1 + 16) = v11;
  double result = *(double *)&v24;
  long long v13 = v25;
  *(_OWORD *)(a1 + 32) = v24;
  *(_OWORD *)(a1 + 48) = v13;
  *(void *)(a1 + 64) = v10;
  return result;
}

void (*PlatformItemListTransform.value.getter(unint64_t a1))(char **a1)
{
  int v1 = a1;
  unint64_t v2 = HIDWORD(a1);
  AGGraphGetValue();
  char v3 = EnvironmentValues.accessibilityEnabled.getter();
  uint64_t v4 = destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
  if ((v3 & 1) != 0 && *MEMORY[0x1E4F4E7A0] != v1)
  {
    uint64_t Value = AGGraphGetValue();
    uint64_t v6 = *(void *)Value;
    uint64_t v7 = *(void **)(Value + 8);
    char v8 = *(unsigned char *)(Value + 16);
    uint64_t v9 = swift_allocObject();
    *(void *)(v9 + 16) = v6;
    *(void *)(v9 + 24) = v7;
    *(unsigned char *)(v9 + 32) = v8;
    *(_DWORD *)(v9 + 36) = v1;
    *(_DWORD *)(v9 + 40) = v2;
    outlined copy of AccessibilityAttachment.Tree(v6, v7, v8);
    return partial apply for closure #2 in PlatformItemListTransform.value.getter;
  }
  return (void (*)(char **))v4;
}

uint64_t protocol witness for Rule.value.getter in conformance PlatformItemListTransform@<X0>(uint64_t (**a1)(uint64_t a1)@<X8>)
{
  char v3 = PlatformItemListTransform.value.getter(*v1);
  uint64_t v5 = v4;
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = v3;
  *(void *)(result + 24) = v5;
  *a1 = partial apply for thunk for @escaping @callee_guaranteed (@inout AccessibilityLargeContentViewTree) -> ();
  a1[1] = (uint64_t (*)(uint64_t))result;
  return result;
}

unint64_t protocol witness for CustomStringConvertible.description.getter in conformance PlatformItemListTransform()
{
  return 0xD000000000000026;
}

uint64_t PlatformAccessibilityEnv.updateValue()()
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  AGGraphGetValue();
  char v1 = v0;
  char v3 = 2;
  if (!AGGraphGetOutputValue())
  {
    swift_retain();
    swift_retain();
    goto LABEL_7;
  }
  swift_retain();
  swift_retain();
  if (specialized getter of changed #1 in PlatformAccessibilityEnv.updateValue()(&v3, v1 & 1))
  {
LABEL_7:
    PropertyList.Tracker.reset()();
    swift_retain();
    swift_retain();
    EnvironmentValues.init(_:tracker:)();
    uint64_t v4 = v6;
    uint64_t v5 = v7;
    AGGraphSetOutputValue();
    swift_release();
    swift_release();
    swift_release();
    return swift_release();
  }
  swift_release();

  return swift_release();
}

uint64_t specialized getter of changed #1 in PlatformAccessibilityEnv.updateValue()(unsigned char *a1, char a2)
{
  int v2 = *a1;
  if (v2 == 2)
  {
    if (a2)
    {
      swift_retain();
      swift_retain();
      char v4 = PropertyList.Tracker.hasDifferentUsedValues(_:)();
      swift_release();
      swift_release();
    }
    else
    {
      char v4 = 0;
    }
    swift_beginAccess();
    *a1 = v4 & 1;
  }
  else
  {
    char v4 = v2 & 1;
  }
  return v4 & 1;
}

void PlatformAccessibilityContent.updateValue()()
{
  char v1 = v0;
  uint64_t v174 = *MEMORY[0x1E4F143B8];
  uint64_t Value = (uint64_t *)AGGraphGetValue();
  int v4 = v3;
  uint64_t v5 = Value[1];
  uint64_t v172 = *Value;
  uint64_t v173 = (void *)v5;
  swift_retain();
  swift_retain();
  if ((EnvironmentValues.accessibilityEnabled.getter() & 1) == 0) {
    goto LABEL_7;
  }
  int v159 = v4;
  if (*v0 == *MEMORY[0x1E4F4E7A0]) {
    goto LABEL_7;
  }
  uint64_t v6 = AGGraphGetValue();
  int v156 = v7;
  uint64_t v8 = *(void ***)v6;
  int v9 = *(unsigned __int8 *)(v6 + 16);
  uint64_t v157 = *(void **)(v6 + 8);
  outlined copy of AccessibilityAttachment.Tree(*(void *)v6, v157, v9);
  if (!v9)
  {
    char v154 = 0;
    swift_bridgeObjectRetain();
    uint64_t v14 = (uint64_t)v8;
    goto LABEL_105;
  }
  if (v9 != 1)
  {
LABEL_7:
    type metadata accessor for _ContiguousArrayStorage<Swift.AnyObject>(0, &lazy cache variable for type metadata for PlatformItem.AccessibilityContent?, (uint64_t)&type metadata for PlatformItem.AccessibilityContent, MEMORY[0x1E4FBB718]);
    uint64_t v172 = 0;
    uint64_t v173 = 0;
    AGGraphSetOutputValue();
LABEL_8:
    swift_release();
    swift_release();
    return;
  }
  char v154 = 1;
  type metadata accessor for AnyAccessibilityPropertiesEntry();
  swift_bridgeObjectRetain();
  uint64_t v10 = Dictionary.init(minimumCapacity:)();
  uint64_t v163 = v10;
  long long v11 = v8[2];
  if (!v11) {
    goto LABEL_104;
  }
  unint64_t v12 = 0;
  long long v13 = v8 + 4;
  uint64_t v145 = v8;
  uint64_t v142 = v8 + 4;
  char v143 = v8[2];
  while (1)
  {
    if (v12 >= (unint64_t)v8[2]) {
      goto LABEL_114;
    }
    int v18 = &v13[3 * v12];
    uint64_t v19 = *v18;
    int v20 = (void *)v18[1];
    int v21 = *((unsigned __int8 *)v18 + 16);
    if (!v21)
    {
      char v151 = 0;
      unint64_t v152 = v12;
      id v15 = v20;
      swift_bridgeObjectRetain_n();
      id v16 = v15;
      uint64_t v17 = v19;
      goto LABEL_11;
    }
    if (v21 == 1) {
      break;
    }
LABEL_12:
    if ((void *)++v12 == v11) {
      goto LABEL_112;
    }
  }
  char v151 = 1;
  unint64_t v152 = v12;
  uint64_t v147 = *(void *)(v19 + 16);
  if (!v147)
  {
    outlined copy of AccessibilityAttachment.Tree(v19, v20, 1);
    swift_bridgeObjectRetain();
    id v132 = (char *)MEMORY[0x1E4FBC860];
    goto LABEL_101;
  }
  uint64_t v149 = v19 + 32;
  outlined copy of AccessibilityAttachment.Tree(v19, v20, 1);
  char v134 = v20;
  outlined copy of AccessibilityAttachment.Tree(v19, v20, 1);
  swift_bridgeObjectRetain();
  uint64_t v22 = 0;
  long long v23 = (char *)MEMORY[0x1E4FBC860];
  uint64_t v141 = v19;
LABEL_20:
  uint64_t v25 = v149 + 24 * v22;
  uint64_t v26 = *(void *)v25;
  uint64_t v27 = *(void **)(v25 + 8);
  int v28 = *(unsigned __int8 *)(v25 + 16);
  if (!v28)
  {
    uint64_t v146 = v22;
    uint64_t v155 = v23;
    uint64_t v106 = v26;
    id v107 = v27;
    id v108 = v27;
    uint64_t v109 = v106;
    swift_bridgeObjectRetain();
    goto LABEL_84;
  }
  if (v28 != 1) {
    goto LABEL_19;
  }
  uint64_t v146 = v22;
  uint64_t v155 = v23;
  uint64_t v148 = *(void *)(v26 + 16);
  id v136 = v27;
  uint64_t v137 = v26;
  if (!v148)
  {
    uint64_t v114 = v26;
    uint64_t v115 = v27;
    outlined copy of AccessibilityAttachment.Tree(v26, v27, 1);
    outlined copy of AccessibilityAttachment.Tree(v114, v115, 1);
    swift_bridgeObjectRetain();
    Swift::OpaquePointer v32 = (char *)MEMORY[0x1E4FBC860];
    uint64_t v116 = *(void *)(MEMORY[0x1E4FBC860] + 16);
    if (!v116) {
      goto LABEL_98;
    }
    goto LABEL_89;
  }
  uint64_t v153 = v26 + 32;
  uint64_t v29 = v26;
  int v30 = v27;
  outlined copy of AccessibilityAttachment.Tree(v26, v27, 1);
  outlined copy of AccessibilityAttachment.Tree(v29, v30, 1);
  outlined copy of AccessibilityAttachment.Tree(v29, v30, 1);
  swift_bridgeObjectRetain();
  uint64_t v31 = 0;
  Swift::OpaquePointer v32 = (char *)MEMORY[0x1E4FBC860];
  id v144 = v1;
LABEL_26:
  uint64_t v34 = v153 + 24 * v31;
  uint64_t v36 = *(void *)v34;
  char v35 = *(void **)(v34 + 8);
  int v37 = *(unsigned __int8 *)(v34 + 16);
  if (!v37)
  {
    uint64_t v150 = v31;
    uint64_t v42 = v35;
    id v43 = v35;
    uint64_t v44 = v36;
    swift_bridgeObjectRetain();
    goto LABEL_31;
  }
  if (v37 != 1) {
    goto LABEL_25;
  }
  uint64_t v150 = v31;
  uint64_t v160 = *(void *)(v36 + 16);
  char v138 = v32;
  id v139 = v35;
  uint64_t v140 = v36;
  if (!v160)
  {
    long long v49 = v35;
    outlined copy of AccessibilityAttachment.Tree(v36, v35, 1);
    outlined copy of AccessibilityAttachment.Tree(v36, v49, 1);
    swift_bridgeObjectRetain();
    uint64_t v50 = (char *)MEMORY[0x1E4FBC860];
    goto LABEL_72;
  }
  uint64_t v161 = v36 + 32;
  uint64_t v38 = v36;
  uint64_t v39 = v36;
  uint64_t v40 = v35;
  outlined copy of AccessibilityAttachment.Tree(v38, v35, 1);
  outlined copy of AccessibilityAttachment.Tree(v39, v40, 1);
  outlined copy of AccessibilityAttachment.Tree(v39, v40, 1);
  swift_bridgeObjectRetain();
  uint64_t v41 = 0;
  uint64_t v162 = (char *)MEMORY[0x1E4FBC860];
  while (1)
  {
    uint64_t v54 = v161 + 24 * v41;
    uint64_t v55 = *(void *)v54;
    unsigned int v56 = *(void **)(v54 + 8);
    int v57 = *(unsigned __int8 *)(v54 + 16);
    if (!v57)
    {
      int v70 = v56;
      id v71 = v56;
      uint64_t v72 = v55;
      swift_bridgeObjectRetain();
LABEL_67:
      uint64_t v88 = v162;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v88 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v162 + 2) + 1, 1, v162);
      }
      unint64_t v90 = *((void *)v88 + 2);
      unint64_t v89 = *((void *)v88 + 3);
      uint64_t v162 = v88;
      if (v90 >= v89 >> 1)
      {
        char v51 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v89 > 1), v90 + 1, 1, v88);
        int v52 = v70;
        uint64_t v162 = v51;
      }
      else
      {
        int v52 = v70;
      }
      *((void *)v162 + 2) = v90 + 1;
      uint64_t v53 = &v162[16 * v90];
      *((void *)v53 + 4) = v72;
      *((void *)v53 + 5) = v52;
      goto LABEL_38;
    }
    if (v57 == 1) {
      break;
    }
LABEL_38:
    if (++v41 == v160)
    {
      outlined consume of AccessibilityAttachment.Tree(v140, v139, 1);
      Swift::OpaquePointer v32 = v138;
      uint64_t v50 = v162;
LABEL_72:
      int v91 = v50;
      uint64_t v92 = *((void *)v50 + 2);
      if (!v92)
      {
        AccessibilityAttachment.init()();
        swift_bridgeObjectRelease();
        outlined consume of AccessibilityAttachment.Tree(v140, v139, 1);
        outlined consume of AccessibilityAttachment.Tree(v140, v139, 1);
        outlined consume of AccessibilityAttachment.Tree(v140, v139, 1);
        uint64_t v44 = v170;
        uint64_t v42 = v171;
        goto LABEL_31;
      }
      uint64_t v93 = v92 - 1;
      if (v92 == 1)
      {
        id v94 = (void *)*((void *)v50 + 5);
        uint64_t v170 = *((void *)v50 + 4);
        uint64_t v95 = v170;
        id v96 = v94;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        outlined consume of AccessibilityAttachment.Tree(v140, v139, 1);
        outlined consume of AccessibilityAttachment.Tree(v140, v139, 1);
        outlined consume of AccessibilityAttachment.Tree(v140, v139, 1);
        uint64_t v44 = v95;
        uint64_t v42 = v94;
        Swift::OpaquePointer v32 = v138;
        goto LABEL_31;
      }
      uint64_t v97 = &v50[16 * v93];
      uint64_t v99 = *((void *)v97 + 4);
      uint64_t v98 = (void *)*((void *)v97 + 5);
      uint64_t v168 = v99;
      uint64_t v169 = v98;
      id v100 = v98;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      unint64_t v101 = (void **)&v91[16 * v92 + 8];
      uint64_t v8 = (void **)(v92 - 2);
      while ((uint64_t)v8 < v93)
      {
        uint64_t v102 = (uint64_t)*(v101 - 1);
        uint64_t v103 = *v101;
        uint64_t v166 = v102;
        id v104 = v103;
        swift_bridgeObjectRetain();
        AccessibilityProperties.merge(with:)(&v166);
        uint64_t v166 = v168;
        uint64_t v167 = v169;
        unint64_t v105 = (void *)AccessibilityAttachment.platformElement.getter();

        if (!v105)
        {
          uint64_t v166 = v102;
          uint64_t v167 = v103;
          if (AccessibilityAttachment.platformElement.getter()) {
            AccessibilityAttachment.platformElement.setter();
          }
        }

        swift_bridgeObjectRelease();
        v101 -= 2;
        uint64_t v8 = (void **)((char *)v8 - 1);
        if (v8 == (void **)-1)
        {
          swift_bridgeObjectRelease_n();
          outlined consume of AccessibilityAttachment.Tree(v140, v139, 1);
          outlined consume of AccessibilityAttachment.Tree(v140, v139, 1);
          outlined consume of AccessibilityAttachment.Tree(v140, v139, 1);
          uint64_t v44 = v168;
          uint64_t v42 = v169;
          uint64_t v8 = v145;
          Swift::OpaquePointer v32 = v138;
LABEL_31:
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            Swift::OpaquePointer v32 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v32 + 2) + 1, 1, v32);
          }
          int v45 = v32;
          unint64_t v46 = *((void *)v32 + 2);
          uint64_t v47 = v45;
          unint64_t v48 = *((void *)v45 + 3);
          if (v46 >= v48 >> 1) {
            uint64_t v47 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v48 > 1), v46 + 1, 1, v47);
          }
          *((void *)v47 + 2) = v46 + 1;
          uint64_t v33 = &v47[16 * v46];
          Swift::OpaquePointer v32 = v47;
          *((void *)v33 + 4) = v44;
          *((void *)v33 + 5) = v42;
          uint64_t v31 = v150;
LABEL_25:
          if (++v31 != v148) {
            goto LABEL_26;
          }
          outlined consume of AccessibilityAttachment.Tree(v137, v136, 1);
          uint64_t v116 = *((void *)v32 + 2);
          if (!v116)
          {
LABEL_98:
            AccessibilityAttachment.init()();
            swift_bridgeObjectRelease();
            outlined consume of AccessibilityAttachment.Tree(v137, v136, 1);
            outlined consume of AccessibilityAttachment.Tree(v137, v136, 1);
            outlined consume of AccessibilityAttachment.Tree(v137, v136, 1);
            uint64_t v109 = v172;
            id v107 = v173;
            goto LABEL_84;
          }
LABEL_89:
          char v117 = v32;
          uint64_t v118 = v116 - 1;
          if (v116 == 1)
          {
            uint64_t v119 = (void *)*((void *)v117 + 5);
            uint64_t v172 = *((void *)v117 + 4);
            uint64_t v120 = v172;
            id v121 = v119;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRelease();
            outlined consume of AccessibilityAttachment.Tree(v137, v136, 1);
            outlined consume of AccessibilityAttachment.Tree(v137, v136, 1);
            outlined consume of AccessibilityAttachment.Tree(v137, v136, 1);
            uint64_t v109 = v120;
            id v107 = v119;
            goto LABEL_84;
          }
          uint64_t v122 = &v117[16 * v118];
          uint64_t v124 = *((void *)v122 + 4);
          uint64_t v123 = (void *)*((void *)v122 + 5);
          uint64_t v170 = v124;
          id v171 = v123;
          id v125 = v123;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          uint64_t v126 = (void **)&v117[16 * v116 + 8];
          uint64_t v127 = v116 - 2;
          while (v127 < v118)
          {
            uint64_t v128 = (uint64_t)*(v126 - 1);
            uint64_t v129 = *v126;
            uint64_t v168 = v128;
            id v130 = v129;
            swift_bridgeObjectRetain();
            AccessibilityProperties.merge(with:)(&v168);
            uint64_t v168 = v170;
            uint64_t v169 = v171;
            uint64_t v131 = (void *)AccessibilityAttachment.platformElement.getter();

            if (!v131)
            {
              uint64_t v168 = v128;
              uint64_t v169 = v129;
              if (AccessibilityAttachment.platformElement.getter()) {
                AccessibilityAttachment.platformElement.setter();
              }
            }

            swift_bridgeObjectRelease();
            v126 -= 2;
            if (--v127 == -1)
            {
              swift_bridgeObjectRelease_n();
              outlined consume of AccessibilityAttachment.Tree(v137, v136, 1);
              outlined consume of AccessibilityAttachment.Tree(v137, v136, 1);
              outlined consume of AccessibilityAttachment.Tree(v137, v136, 1);
              uint64_t v109 = v170;
              id v107 = v171;
              uint64_t v8 = v145;
LABEL_84:
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                uint64_t v155 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v155 + 2) + 1, 1, v155);
              }
              uint64_t v22 = v146;
              uint64_t v110 = v109;
              long long v23 = v155;
              unint64_t v112 = *((void *)v155 + 2);
              unint64_t v111 = *((void *)v155 + 3);
              if (v112 >= v111 >> 1)
              {
                uint64_t v113 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v111 > 1), v112 + 1, 1, v155);
                uint64_t v110 = v109;
                uint64_t v22 = v146;
                long long v23 = v113;
              }
              *((void *)v23 + 2) = v112 + 1;
              long long v24 = &v23[16 * v112];
              *((void *)v24 + 4) = v110;
              *((void *)v24 + 5) = v107;
              uint64_t v19 = v141;
LABEL_19:
              if (++v22 != v147) {
                goto LABEL_20;
              }
              int v20 = v134;
              id v132 = v23;
              outlined consume of AccessibilityAttachment.Tree(v19, v134, 1);
LABEL_101:
              static AccessibilityAttachment.combine(_:)(v132, &v172);
              swift_bridgeObjectRelease();
              outlined consume of AccessibilityAttachment.Tree(v19, v20, 1);
              uint64_t v17 = v172;
              id v16 = v173;
LABEL_11:
              uint64_t v172 = v17;
              swift_bridgeObjectRetain();
              AccessibilityProperties.merge(with:)(&v172);

              swift_bridgeObjectRelease();
              outlined consume of AccessibilityAttachment.Tree(v19, v20, v151);
              swift_bridgeObjectRelease();
              long long v13 = v142;
              long long v11 = v143;
              unint64_t v12 = v152;
              goto LABEL_12;
            }
          }
          __break(1u);
LABEL_114:
          __break(1u);
        }
      }
      __break(1u);
LABEL_112:
      outlined consume of AccessibilityAttachment.Tree((uint64_t)v8, v157, 1);
      uint64_t v14 = v163;
      goto LABEL_105;
    }
  }
  uint64_t v58 = *(void *)(v55 + 16);
  uint64_t v158 = v56;
  if (v58)
  {
    outlined copy of AccessibilityAttachment.Tree(v55, v56, 1);
    outlined copy of AccessibilityAttachment.Tree(v55, v56, 1);
    outlined copy of AccessibilityAttachment.Tree(v55, v56, 1);
    swift_bridgeObjectRetain();
    uint64_t v59 = v55;
    uint64_t v60 = (unsigned char *)(v55 + 48);
    uint64_t v61 = (char *)MEMORY[0x1E4FBC860];
    while (1)
    {
      uint64_t v63 = *((void *)v60 - 2);
      uint64_t v64 = (void *)*((void *)v60 - 1);
      if (!*v60) {
        break;
      }
      if (*v60 == 1)
      {
        outlined copy of AccessibilityAttachment.Tree(*((void *)v60 - 2), *((void **)v60 - 1), 1);
        outlined copy of AccessibilityAttachment.Tree(v63, v64, 1);
        uint64_t v65 = swift_bridgeObjectRetain();
        unint64_t v66 = specialized Sequence.compactMap<A>(_:)(v65);
        static AccessibilityAttachment.combine(_:)(v66, &v166);
        swift_bridgeObjectRelease();
        outlined consume of AccessibilityAttachment.Tree(v63, v64, 1);
        outlined consume of AccessibilityAttachment.Tree(v63, v64, 1);
        swift_bridgeObjectRelease();
        uint64_t v63 = v166;
        uint64_t v64 = v167;
LABEL_49:
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v61 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v61 + 2) + 1, 1, v61);
        }
        unint64_t v69 = *((void *)v61 + 2);
        unint64_t v68 = *((void *)v61 + 3);
        if (v69 >= v68 >> 1) {
          uint64_t v61 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v68 > 1), v69 + 1, 1, v61);
        }
        *((void *)v61 + 2) = v69 + 1;
        uint64_t v62 = &v61[16 * v69];
        *((void *)v62 + 4) = v63;
        *((void *)v62 + 5) = v64;
      }
      v60 += 24;
      if (!--v58)
      {
        uint64_t v55 = v59;
        outlined consume of AccessibilityAttachment.Tree(v59, v56, 1);
        uint64_t v8 = v145;
        goto LABEL_56;
      }
    }
    id v67 = v64;
    swift_bridgeObjectRetain();
    goto LABEL_49;
  }
  outlined copy of AccessibilityAttachment.Tree(v55, v56, 1);
  outlined copy of AccessibilityAttachment.Tree(v55, v56, 1);
  swift_bridgeObjectRetain();
  uint64_t v61 = (char *)MEMORY[0x1E4FBC860];
LABEL_56:
  uint64_t v73 = *((void *)v61 + 2);
  uint64_t v74 = v73 - 1;
  if (v73 == 1)
  {
    uint64_t v75 = v55;
    uint64_t v77 = (void *)*((void *)v61 + 5);
    uint64_t v168 = *((void *)v61 + 4);
    uint64_t v76 = v168;
    id v78 = v77;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    outlined consume of AccessibilityAttachment.Tree(v75, v158, 1);
    outlined consume of AccessibilityAttachment.Tree(v75, v158, 1);
    outlined consume of AccessibilityAttachment.Tree(v75, v158, 1);
    uint64_t v72 = v76;
    int v70 = v77;
    char v1 = v144;
    goto LABEL_67;
  }
  if (!v73)
  {
    AccessibilityAttachment.init()();
    swift_bridgeObjectRelease();
    outlined consume of AccessibilityAttachment.Tree(v55, v158, 1);
    outlined consume of AccessibilityAttachment.Tree(v55, v158, 1);
    outlined consume of AccessibilityAttachment.Tree(v55, v158, 1);
    uint64_t v72 = v168;
    int v70 = v169;
    char v1 = v144;
    goto LABEL_67;
  }
  uint64_t v135 = v55;
  unint64_t v79 = &v61[16 * v74];
  uint64_t v81 = *((void *)v79 + 4);
  unint64_t v80 = (void *)*((void *)v79 + 5);
  uint64_t v166 = v81;
  uint64_t v167 = v80;
  id v82 = v80;
  swift_bridgeObjectRetain();
  uint64_t v10 = swift_bridgeObjectRetain();
  uint64_t v8 = (void **)&v61[16 * v73 + 8];
  uint64_t v83 = v73 - 2;
  while (v83 < v74)
  {
    uint64_t v85 = (uint64_t)*(v8 - 1);
    long long v84 = *v8;
    uint64_t v164 = v85;
    id v86 = v84;
    swift_bridgeObjectRetain();
    AccessibilityProperties.merge(with:)(&v164);
    uint64_t v164 = v166;
    uint64_t v165 = v167;
    uint64_t v87 = (void *)AccessibilityAttachment.platformElement.getter();

    if (!v87)
    {
      uint64_t v164 = v85;
      uint64_t v165 = v84;
      if (AccessibilityAttachment.platformElement.getter()) {
        AccessibilityAttachment.platformElement.setter();
      }
    }

    uint64_t v10 = swift_bridgeObjectRelease();
    v8 -= 2;
    if (--v83 == -1)
    {
      swift_bridgeObjectRelease_n();
      outlined consume of AccessibilityAttachment.Tree(v135, v158, 1);
      outlined consume of AccessibilityAttachment.Tree(v135, v158, 1);
      outlined consume of AccessibilityAttachment.Tree(v135, v158, 1);
      uint64_t v72 = v166;
      int v70 = v167;
      char v1 = v144;
      uint64_t v8 = v145;
      goto LABEL_67;
    }
  }
  __break(1u);
LABEL_104:
  uint64_t v14 = v10;
  outlined consume of AccessibilityAttachment.Tree((uint64_t)v8, v157, 1);
LABEL_105:
  if (((v159 | v156) & 1) != 0
    || (type metadata accessor for _ContiguousArrayStorage<Swift.AnyObject>(0, &lazy cache variable for type metadata for PlatformItem.AccessibilityContent?, (uint64_t)&type metadata for PlatformItem.AccessibilityContent, MEMORY[0x1E4FBB718]), !AGGraphGetOutputValue()))
  {
    uint64_t v133 = AGCreateWeakAttribute();
    uint64_t v172 = v14;
    uint64_t v173 = (void *)v133;
    type metadata accessor for _ContiguousArrayStorage<Swift.AnyObject>(0, &lazy cache variable for type metadata for PlatformItem.AccessibilityContent?, (uint64_t)&type metadata for PlatformItem.AccessibilityContent, MEMORY[0x1E4FBB718]);
    AGGraphSetOutputValue();
    outlined consume of AccessibilityAttachment.Tree((uint64_t)v8, v157, v154);
    swift_bridgeObjectRelease();
    goto LABEL_8;
  }
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();

  outlined consume of AccessibilityAttachment.Tree((uint64_t)v8, v157, v154);
}

uint64_t protocol witness for Rule.value.getter in conformance MakePlatformTransform@<X0>(_OWORD *a1@<X8>)
{
  type metadata accessor for _ContiguousArrayStorage<Swift.AnyObject>(0, &lazy cache variable for type metadata for PlatformItem.AccessibilityContent?, (uint64_t)&type metadata for PlatformItem.AccessibilityContent, MEMORY[0x1E4FBB718]);
  *a1 = *(_OWORD *)AGGraphGetValue();

  return swift_bridgeObjectRetain();
}

uint64_t DisplayListTransform.environment.getter@<X0>(void *a1@<X8>)
{
  uint64_t Value = (uint64_t *)AGGraphGetValue();
  uint64_t v4 = *Value;
  uint64_t v3 = Value[1];
  *a1 = v4;
  a1[1] = v3;
  swift_retain();

  return swift_retain();
}

uint64_t DisplayListTransform.content.getter@<X0>(uint64_t a1@<X8>)
{
  if (*(_DWORD *)(v1 + 48) == *MEMORY[0x1E4F4E7A0])
  {
    uint64_t result = 0;
    *(unsigned char *)(a1 + 10) = 0;
    *(_WORD *)(a1 + 8) = 0;
  }
  else
  {
    uint64_t Value = AGGraphGetValue();
    char v5 = *(unsigned char *)(Value + 10);
    *(_WORD *)(a1 + 8) = *(_WORD *)(Value + 8);
    *(unsigned char *)(a1 + 10) = v5;
    uint64_t result = swift_bridgeObjectRetain();
  }
  *(void *)a1 = result;
  return result;
}

uint64_t DisplayListTransform.deferredAttachment.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = *(unsigned int *)(v1 + 52);
  if (result == *MEMORY[0x1E4F4E7A0])
  {
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    *(unsigned char *)(a1 + 16) = -1;
  }
  else
  {
    uint64_t Value = AGGraphGetValue();
    uint64_t v6 = *(void *)Value;
    char v5 = *(void **)(Value + 8);
    *(void *)a1 = *(void *)Value;
    *(void *)(a1 + 8) = v5;
    char v7 = *(unsigned char *)(Value + 16);
    *(unsigned char *)(a1 + 16) = v7;
    return outlined copy of AccessibilityAttachment.Tree(v6, v5, v7);
  }
  return result;
}

void protocol witness for ViewModifier.body(content:) in conformance AccessibilityPlatformItemTransform()
{
}

uint64_t closure #2 in DisplayListTransform.value.getter(uint64_t *a1)
{
  uint64_t v1 = (void *)a1[1];
  uint64_t v15 = *a1;
  id v16 = v1;
  id v2 = v1;
  swift_bridgeObjectRetain_n();
  uint64_t v3 = specialized AccessibilityProperties.subscript.getter(v15);
  uint64_t v5 = v4;
  char v7 = v6;
  swift_bridgeObjectRelease();
  if (v7) {
    uint64_t v8 = 0;
  }
  else {
    uint64_t v8 = v3;
  }
  memset(&v11[1], 0, 32);
  if (v7) {
    uint64_t v9 = 0;
  }
  else {
    uint64_t v9 = v5;
  }
  uint64_t v12 = v8;
  uint64_t v13 = v9;
  char v14 = v7 & 1;
  type metadata accessor for DisplayListTransform();
  DisplayListTransform.environment.getter(v11);
  return AccessibilityNodeAttachment.init(_:platformStorage:in:idiom:createsNode:kind:encode:)();
}

uint64_t ArchivableAccessibilityViewModifier.body(content:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, char a3@<W3>, uint64_t a4@<X4>, uint64_t *a5@<X8>)
{
  type metadata accessor for AnyAccessibilityPropertiesEntry();
  uint64_t v15 = Dictionary.init(minimumCapacity:)();
  if (a4)
  {
    char v10 = a3 & 1;
    outlined copy of Environment<AppIntentExecutor?>.Content(a1, a2, a3 & 1);
    uint64_t v11 = swift_bridgeObjectRetain();
    _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay7SwiftUI26CodableAccessibilityActionVG_AF03AnygH0Vs5NeverOTg503_s7d4UI37g97ArchivableViewAttachment33_71F62EDC1DAE3BBC7A74521E45BA5A66LLV10propertiesAA0C10PropertiesVvgAA03i2C6H21VAA07CodablecR0VXEfU_AF0gmN10Attachment03_71pqrstuvW0LLVTf1cn_nTf4ngX_n(v11, a1, a2, a3 & 1);
    uint64_t v13 = v12;
    outlined consume of Environment<AppIntentExecutor?>.Content(a1, a2, v10);
    swift_bridgeObjectRelease();
    specialized AccessibilityProperties.subscript.setter(v13);
  }
  uint64_t result = AccessibilityAttachment.init(properties:)();
  *a5 = v15;
  a5[1] = v16;
  return result;
}

uint64_t ArchivableAccessibilityViewModifier.Factory.encode(to:)(void *a1)
{
  type metadata accessor for PropertiesTransform<AccessibilityAttachmentModifier>(0, &lazy cache variable for type metadata for KeyedEncodingContainer<ArchivableAccessibilityViewModifier.Factory.CodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type ArchivableAccessibilityViewModifier.Factory.CodingKeys and conformance ArchivableAccessibilityViewModifier.Factory.CodingKeys, (uint64_t)&unk_1ED4611B0, MEMORY[0x1E4FBBDE0]);
  uint64_t v4 = v3;
  v18[0] = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  uint64_t v5 = *v1;
  uint64_t v6 = v1[1];
  char v7 = *((unsigned char *)v1 + 16);
  uint64_t v8 = v1[3];
  int v23 = *((_DWORD *)v1 + 8);
  uint64_t v9 = v1[5];
  uint64_t v10 = v1[6];
  uint64_t v11 = a1[3];
  uint64_t v12 = a1;
  char v14 = (char *)v18 - v13;
  __swift_project_boxed_opaque_existential_1(v12, v11);
  lazy protocol witness table accessor for type ArchivableAccessibilityViewModifier.Factory.CodingKeys and conformance ArchivableAccessibilityViewModifier.Factory.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  uint64_t v19 = v5;
  uint64_t v20 = v6;
  char v21 = v7;
  uint64_t v22 = v8;
  char v24 = 0;
  lazy protocol witness table accessor for type AccessibilityArchivableViewAttachment and conformance AccessibilityArchivableViewAttachment();
  uint64_t v15 = v18[1];
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (v15) {
    return (*(uint64_t (**)(char *, uint64_t))(v18[0] + 8))(v14, v4);
  }
  uint64_t v17 = v18[0];
  LODWORD(v19) = v23;
  char v24 = 1;
  lazy protocol witness table accessor for type _DisplayList_Identity and conformance _DisplayList_Identity();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  uint64_t v19 = v9;
  uint64_t v20 = v10;
  char v24 = 2;
  type metadata accessor for CGSize(0);
  lazy protocol witness table accessor for type CGSize and conformance CGSize((unint64_t *)&lazy protocol witness table cache variable for type CGSize and conformance CGSize);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v17 + 8))(v14, v4);
}

uint64_t ArchivableAccessibilityViewModifier.Factory.init(from:)@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  type metadata accessor for PropertiesTransform<AccessibilityAttachmentModifier>(0, &lazy cache variable for type metadata for KeyedDecodingContainer<ArchivableAccessibilityViewModifier.Factory.CodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type ArchivableAccessibilityViewModifier.Factory.CodingKeys and conformance ArchivableAccessibilityViewModifier.Factory.CodingKeys, (uint64_t)&unk_1ED4611B0, MEMORY[0x1E4FBBDC0]);
  uint64_t v25 = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v8 = (char *)&v20 - v7;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type ArchivableAccessibilityViewModifier.Factory.CodingKeys and conformance ArchivableAccessibilityViewModifier.Factory.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  uint64_t v9 = v6;
  char v24 = a2;
  char v30 = 0;
  lazy protocol witness table accessor for type AccessibilityArchivableViewAttachment and conformance AccessibilityArchivableViewAttachment();
  uint64_t v10 = v25;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v11 = *((void *)&v26 + 1);
  int v12 = v27;
  uint64_t v13 = v28;
  char v29 = v27;
  char v30 = 1;
  uint64_t v23 = v26;
  outlined copy of Environment<AppIntentExecutor?>.Content(v26, *((uint64_t *)&v26 + 1), v27);
  lazy protocol witness table accessor for type _DisplayList_Identity and conformance _DisplayList_Identity();
  swift_bridgeObjectRetain();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  int v21 = v12;
  uint64_t v22 = v11;
  uint64_t v14 = v23;
  LODWORD(v11) = v26;
  type metadata accessor for CGSize(0);
  char v30 = 2;
  lazy protocol witness table accessor for type CGSize and conformance CGSize(&lazy protocol witness table cache variable for type CGSize and conformance CGSize);
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v9 + 8))(v8, v10);
  long long v16 = v26;
  int v17 = v11;
  int v18 = v24;
  uint64_t v19 = v22;
  *char v24 = v14;
  v18[1] = v19;
  *((unsigned char *)v18 + 16) = v21;
  long long v18[3] = v13;
  *((_DWORD *)v18 + 8) = v17;
  *(_OWORD *)(v18 + 5) = v16;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  outlined consume of Environment<AppIntentExecutor?>.Content(v14, v19, v29);
  return swift_bridgeObjectRelease();
}

uint64_t ArchivableAccessibilityViewModifier.encode(to:)(void *a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5)
{
  uint64_t v15 = a5;
  HIDWORD(v14) = a4;
  type metadata accessor for PropertiesTransform<AccessibilityAttachmentModifier>(0, &lazy cache variable for type metadata for KeyedEncodingContainer<ArchivableAccessibilityViewModifier.CodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type ArchivableAccessibilityViewModifier.CodingKeys and conformance ArchivableAccessibilityViewModifier.CodingKeys, (uint64_t)&unk_1ED461120, MEMORY[0x1E4FBBDE0]);
  uint64_t v9 = v8;
  uint64_t v10 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  int v12 = (char *)&v14 - v11;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type ArchivableAccessibilityViewModifier.CodingKeys and conformance ArchivableAccessibilityViewModifier.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  uint64_t v16 = a2;
  uint64_t v17 = a3;
  char v18 = BYTE4(v14) & 1;
  uint64_t v19 = v15;
  lazy protocol witness table accessor for type AccessibilityArchivableViewAttachment and conformance AccessibilityArchivableViewAttachment();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance ArchivableAccessibilityViewModifier.Factory.CodingKeys()
{
  uint64_t v1 = 0x797469746E656469;
  if (*v0 != 1) {
    uint64_t v1 = 1702521203;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x656D686361747461;
  }
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance ArchivableAccessibilityViewModifier.Factory.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized ArchivableAccessibilityViewModifier.Factory.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ArchivableAccessibilityViewModifier.Factory.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ArchivableAccessibilityViewModifier.Factory.CodingKeys and conformance ArchivableAccessibilityViewModifier.Factory.CodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ArchivableAccessibilityViewModifier.Factory.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ArchivableAccessibilityViewModifier.Factory.CodingKeys and conformance ArchivableAccessibilityViewModifier.Factory.CodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t protocol witness for _DisplayList_ViewFactory.makeView() in conformance ArchivableAccessibilityViewModifier.Factory()
{
  outlined copy of Environment<AppIntentExecutor?>.Content(*(void *)v0, *(void *)(v0 + 8), *(unsigned char *)(v0 + 16));
  type metadata accessor for ModifiedContent<ArchivablePlaceholder, ArchivableAccessibilityViewModifier>();
  lazy protocol witness table accessor for type ModifiedContent<ArchivablePlaceholder, ArchivableAccessibilityViewModifier> and conformance <> ModifiedContent<A, B>();
  swift_bridgeObjectRetain();
  return AnyView.init<A>(_:)();
}

void protocol witness for _DisplayList_ViewFactory.identity.getter in conformance ArchivableAccessibilityViewModifier.Factory(_DWORD *a1@<X8>)
{
  *a1 = *(_DWORD *)(v1 + 32);
}

uint64_t protocol witness for Decodable.init(from:) in conformance ArchivableAccessibilityViewModifier.Factory@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  return ArchivableAccessibilityViewModifier.Factory.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance ArchivableAccessibilityViewModifier.Factory(void *a1)
{
  return ArchivableAccessibilityViewModifier.Factory.encode(to:)(a1);
}

ValueMetadata *protocol witness for AnyViewFactory.viewType.getter in conformance ArchivableAccessibilityViewModifier.Factory()
{
  return &type metadata for ArchivableAccessibilityViewModifier;
}

uint64_t protocol witness for AnyViewFactory.encoding() in conformance ArchivableAccessibilityViewModifier.Factory@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = *(void *)v2;
  uint64_t v5 = *(void *)(v2 + 8);
  char v6 = *(unsigned char *)(v2 + 16);
  uint64_t v7 = *(void *)(v2 + 24);
  int v8 = *(_DWORD *)(v2 + 32);
  uint64_t v9 = *(void *)(v2 + 40);
  uint64_t v10 = *(void *)(v2 + 48);
  *a2 = 0xD00000000000002BLL;
  a2[1] = 0x8000000188333D00;
  a2[5] = a1;
  a2[6] = lazy protocol witness table accessor for type ArchivableAccessibilityViewModifier.Factory and conformance ArchivableAccessibilityViewModifier.Factory();
  a2[7] = lazy protocol witness table accessor for type ArchivableAccessibilityViewModifier.Factory and conformance ArchivableAccessibilityViewModifier.Factory();
  uint64_t v11 = swift_allocObject();
  a2[2] = v11;
  *(void *)(v11 + 16) = v4;
  *(void *)(v11 + 24) = v5;
  *(unsigned char *)(v11 + 32) = v6;
  *(void *)(v11 + 40) = v7;
  *(_DWORD *)(v11 + 48) = v8;
  *(void *)(v11 + 56) = v9;
  *(void *)(v11 + 64) = v10;
  outlined copy of Environment<AppIntentExecutor?>.Content(v4, v5, v6);

  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance ArchivableAccessibilityViewModifier.CodingKeys()
{
  return 0x656D686361747461;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance ArchivableAccessibilityViewModifier.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  if (a1 == 0x656D686361747461 && a2 == 0xEA0000000000746ELL)
  {
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = 0;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ArchivableAccessibilityViewModifier.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ArchivableAccessibilityViewModifier.CodingKeys and conformance ArchivableAccessibilityViewModifier.CodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ArchivableAccessibilityViewModifier.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ArchivableAccessibilityViewModifier.CodingKeys and conformance ArchivableAccessibilityViewModifier.CodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t protocol witness for ViewModifier.body(content:) in conformance ArchivableAccessibilityViewModifier@<X0>(uint64_t *a1@<X8>)
{
  return ArchivableAccessibilityViewModifier.body(content:)(*(void *)v1, *(void *)(v1 + 8), *(unsigned char *)(v1 + 16), *(void *)(v1 + 24), a1);
}

void *protocol witness for Decodable.init(from:) in conformance ArchivableAccessibilityViewModifier@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = specialized ArchivableAccessibilityViewModifier.init(from:)(a1);
  if (!v2)
  {
    *(void *)a2 = result;
    *(void *)(a2 + 8) = v5;
    *(unsigned char *)(a2 + 16) = v6 & 1;
    *(void *)(a2 + 24) = v7;
  }
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance ArchivableAccessibilityViewModifier(void *a1)
{
  return ArchivableAccessibilityViewModifier.encode(to:)(a1, *(void *)v1, *(void *)(v1 + 8), *(unsigned __int8 *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance AccessibilityArchivableViewAttachment.CodingKeys()
{
  return 0x736E6F69746361;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance AccessibilityArchivableViewAttachment.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  if (a1 == 0x736E6F69746361 && a2 == 0xE700000000000000)
  {
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = 0;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AccessibilityArchivableViewAttachment.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type AccessibilityArchivableViewAttachment.CodingKeys and conformance AccessibilityArchivableViewAttachment.CodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AccessibilityArchivableViewAttachment.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type AccessibilityArchivableViewAttachment.CodingKeys and conformance AccessibilityArchivableViewAttachment.CodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t protocol witness for Decodable.init(from:) in conformance AccessibilityArchivableViewAttachment@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = specialized AccessibilityArchivableViewAttachment.init(from:)(a1);
  if (!v2)
  {
    *(void *)a2 = result;
    *(void *)(a2 + 8) = v5;
    *(unsigned char *)(a2 + 16) = v6 & 1;
    *(void *)(a2 + 24) = v7;
  }
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance AccessibilityArchivableViewAttachment(void *a1)
{
  return specialized AccessibilityArchivableViewAttachment.encode(to:)(a1, *(void *)(v1 + 24));
}

uint64_t protocol witness for AccessibilityViewModifier.initialAttachment(for:) in conformance ArchivedAttachmentModifier@<X0>(void *a1@<X8>)
{
  uint64_t v2 = (void *)v1[1];
  *a1 = *v1;
  a1[1] = v2;
  id v3 = v2;

  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance ArchivedAttachmentModifier@<X0>(int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(long long *__return_ptr, uint64_t, _OWORD *)@<X2>, void *a4@<X8>)
{
  int v4 = *a1;
  long long v5 = *(_OWORD *)(a2 + 48);
  long long v8[2] = *(_OWORD *)(a2 + 32);
  v8[3] = v5;
  v8[4] = *(_OWORD *)(a2 + 64);
  int v9 = *(_DWORD *)(a2 + 80);
  long long v6 = *(_OWORD *)(a2 + 16);
  v8[0] = *(_OWORD *)a2;
  v8[1] = v6;
  return specialized static AccessibilityViewModifier._makeView(modifier:inputs:body:)(v4, (uint64_t)v8, a3, a4);
}

void protocol witness for ViewModifier.body(content:) in conformance ArchivedAttachmentModifier()
{
}

id protocol witness for AccessibilityViewModifier.createOrUpdateNode(viewRendererHost:existingNode:) in conformance AccessibilityGestureModifier(uint64_t a1, uint64_t a2, void *a3)
{
  if (a3)
  {
    id v4 = a3;
  }
  else
  {
    objc_allocWithZone((Class)type metadata accessor for AccessibilityNode());
    uint64_t v6 = swift_unknownObjectRetain();
    id v4 = specialized AccessibilityNode.init(viewRendererHost:isFromDisplayList:)(v6, a2, 0);
    swift_unknownObjectRelease();
  }
  id v7 = a3;
  return v4;
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance AccessibilityGestureModifier@<X0>(int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(long long *__return_ptr, uint64_t, _OWORD *)@<X2>, void *a4@<X8>)
{
  int v4 = *a1;
  long long v5 = *(_OWORD *)(a2 + 48);
  long long v8[2] = *(_OWORD *)(a2 + 32);
  v8[3] = v5;
  v8[4] = *(_OWORD *)(a2 + 64);
  int v9 = *(_DWORD *)(a2 + 80);
  long long v6 = *(_OWORD *)(a2 + 16);
  v8[0] = *(_OWORD *)a2;
  v8[1] = v6;
  return specialized static AccessibilityViewModifier._makeView(modifier:inputs:body:)(v4, (uint64_t)v8, a3, a4);
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance AccessibilityPlatformViewModifier@<X0>(int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(uint64_t *__return_ptr)@<X2>, double *a4@<X8>)
{
  int v4 = *a1;
  long long v5 = *(_OWORD *)(a2 + 48);
  long long v8[2] = *(_OWORD *)(a2 + 32);
  v8[3] = v5;
  v8[4] = *(_OWORD *)(a2 + 64);
  int v9 = *(_DWORD *)(a2 + 80);
  long long v6 = *(_OWORD *)(a2 + 16);
  v8[0] = *(_OWORD *)a2;
  v8[1] = v6;
  return specialized static AccessibilityViewModifier._makeView(modifier:inputs:body:)(v4, (uint64_t)v8, a3, a4);
}

double protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance AccessibilityRotorModifier<A>@<D0>(int *a1@<X0>, long long *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, void *a6@<X8>)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return static AccessibilityViewModifier._makeView(modifier:inputs:body:)(a1, a2, a3, a4, a5, WitnessTable, a6);
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance AccessibilityOpacityModifier@<X0>(int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(long long *__return_ptr, uint64_t, _OWORD *)@<X2>, void *a4@<X8>)
{
  int v4 = *a1;
  long long v5 = *(_OWORD *)(a2 + 48);
  long long v8[2] = *(_OWORD *)(a2 + 32);
  v8[3] = v5;
  v8[4] = *(_OWORD *)(a2 + 64);
  int v9 = *(_DWORD *)(a2 + 80);
  long long v6 = *(_OWORD *)(a2 + 16);
  v8[0] = *(_OWORD *)a2;
  v8[1] = v6;
  return specialized static AccessibilityViewModifier._makeView(modifier:inputs:body:)(v4, (uint64_t)v8, a3, a4);
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance AccessibilityScrollableModifier@<X0>(int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(long long *__return_ptr, uint64_t, _OWORD *)@<X2>, void *a4@<X8>)
{
  int v4 = *a1;
  long long v5 = *(_OWORD *)(a2 + 48);
  long long v8[2] = *(_OWORD *)(a2 + 32);
  v8[3] = v5;
  v8[4] = *(_OWORD *)(a2 + 64);
  int v9 = *(_DWORD *)(a2 + 80);
  long long v6 = *(_OWORD *)(a2 + 16);
  v8[0] = *(_OWORD *)a2;
  v8[1] = v6;
  return specialized static AccessibilityViewModifier._makeView(modifier:inputs:body:)(v4, (uint64_t)v8, a3, a4);
}

uint64_t sub_187BD8D28()
{
  return swift_deallocObject();
}

void _s7SwiftUI19PropertiesTransform33_71F62EDC1DAE3BBC7A74521E45BA5A66LLV11updateValueyyFyycfU_TA_0()
{
}

unint64_t specialized PropertiesTransform.description.getter()
{
  _StringGuts.grow(_:)(36);
  swift_bridgeObjectRelease();
  v0._countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  return 0xD000000000000022;
}

char *_sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs10ArraySliceVy7SwiftUI30AccessibilityAttachmentStorage33_2F6327E72581B7F866C81F7546545BE8LLVG_AH0hI0Vs5NeverOTg503_s7f4UI17h37NodeC17removeAttachments5afteryAA0C15i33TokenO_tFAA0cH0VAA0cH7Storage33_2klmnopQ55LLVcfu_33_27bc406762570ff177ca3ffab16a1c9fAlITf3nnnpk_nTf1cn_nTf4x_n(char *result, uint64_t a2, unint64_t a3)
{
  int64_t v15 = a3 >> 1;
  uint64_t v3 = (a3 >> 1) - a2;
  if (__OFSUB__(a3 >> 1, a2))
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  uint64_t v4 = MEMORY[0x1E4FBC860];
  if (!v3) {
    return (char *)v4;
  }
  long long v5 = result;
  uint64_t v17 = MEMORY[0x1E4FBC860];
  uint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3 & ~(v3 >> 63), 0);
  if ((v3 & 0x8000000000000000) == 0)
  {
    uint64_t v14 = v3;
    uint64_t v6 = 0;
    uint64_t v4 = v17;
    for (uint64_t i = (void **)&v5[40 * a2 + 8]; ; i += 5)
    {
      uint64_t v8 = v6 + 1;
      if (__OFADD__(v6, 1)) {
        break;
      }
      if (a2 + v6 >= v15 || v6 >= v3) {
        goto LABEL_13;
      }
      uint64_t v9 = (uint64_t)*(i - 1);
      uint64_t v10 = *i;
      unint64_t v11 = *(void *)(v17 + 16);
      unint64_t v12 = *(void *)(v17 + 24);
      swift_bridgeObjectRetain();
      uint64_t result = v10;
      if (v11 >= v12 >> 1) {
        uint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v12 > 1), v11 + 1, 1);
      }
      *(void *)(v17 + 16) = v11 + 1;
      uint64_t v13 = v17 + 16 * v11;
      *(void *)(v13 + 32) = v9;
      *(void *)(v13 + 40) = v10;
      ++v6;
      uint64_t v3 = v14;
      if (v8 == v14) {
        return (char *)v4;
      }
    }
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
LABEL_15:
  __break(1u);
  return result;
}

unint64_t lazy protocol witness table accessor for type PlatformAccessibilityEnv and conformance PlatformAccessibilityEnv()
{
  unint64_t result = lazy protocol witness table cache variable for type PlatformAccessibilityEnv and conformance PlatformAccessibilityEnv;
  if (!lazy protocol witness table cache variable for type PlatformAccessibilityEnv and conformance PlatformAccessibilityEnv)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlatformAccessibilityEnv and conformance PlatformAccessibilityEnv);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PlatformAccessibilityContent and conformance PlatformAccessibilityContent()
{
  unint64_t result = lazy protocol witness table cache variable for type PlatformAccessibilityContent and conformance PlatformAccessibilityContent;
  if (!lazy protocol witness table cache variable for type PlatformAccessibilityContent and conformance PlatformAccessibilityContent)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlatformAccessibilityContent and conformance PlatformAccessibilityContent);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type MakePlatformTransform and conformance MakePlatformTransform()
{
  unint64_t result = lazy protocol witness table cache variable for type MakePlatformTransform and conformance MakePlatformTransform;
  if (!lazy protocol witness table cache variable for type MakePlatformTransform and conformance MakePlatformTransform)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MakePlatformTransform and conformance MakePlatformTransform);
  }
  return result;
}

uint64_t partial apply for implicit closure #3 in static AccessibilityViewModifier._makeView(modifier:inputs:body:)()
{
  return implicit closure #3 in static AccessibilityViewModifier._makeView(modifier:inputs:body:)();
}

unint64_t lazy protocol witness table accessor for type DisplayListTransform<AccessibilityContainerModifier> and conformance DisplayListTransform<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type DisplayListTransform<AccessibilityContainerModifier> and conformance DisplayListTransform<A>;
  if (!lazy protocol witness table cache variable for type DisplayListTransform<AccessibilityContainerModifier> and conformance DisplayListTransform<A>)
  {
    type metadata accessor for PropertiesTransform<AccessibilityAttachmentModifier>(255, (unint64_t *)&lazy cache variable for type metadata for DisplayListTransform<AccessibilityContainerModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type AccessibilityContainerModifier and conformance AccessibilityContainerModifier, (uint64_t)&type metadata for AccessibilityContainerModifier, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for DisplayListTransform);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DisplayListTransform<AccessibilityContainerModifier> and conformance DisplayListTransform<A>);
  }
  return result;
}

uint64_t specialized AccessibilityArchivableViewAttachment.encode(to:)(void *a1, uint64_t a2)
{
  type metadata accessor for PropertiesTransform<AccessibilityAttachmentModifier>(0, &lazy cache variable for type metadata for KeyedEncodingContainer<AccessibilityArchivableViewAttachment.CodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type AccessibilityArchivableViewAttachment.CodingKeys and conformance AccessibilityArchivableViewAttachment.CodingKeys, (uint64_t)&unk_1ED462818, MEMORY[0x1E4FBBDE0]);
  uint64_t v5 = v4;
  uint64_t v6 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v8 = (char *)v10 - v7;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type AccessibilityArchivableViewAttachment.CodingKeys and conformance AccessibilityArchivableViewAttachment.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v10[1] = a2;
  type metadata accessor for _ContiguousArrayStorage<Swift.AnyObject>(0, &lazy cache variable for type metadata for [CodableAccessibilityAction], (uint64_t)&type metadata for CodableAccessibilityAction, MEMORY[0x1E4FBB320]);
  lazy protocol witness table accessor for type [CodableAccessibilityAction] and conformance <A> [A](&lazy protocol witness table cache variable for type [CodableAccessibilityAction] and conformance <A> [A], (void (*)(void))lazy protocol witness table accessor for type CodableAccessibilityAction and conformance CodableAccessibilityAction);
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t specialized AccessibilityArchivableViewAttachment.init(from:)(void *a1)
{
  type metadata accessor for PropertiesTransform<AccessibilityAttachmentModifier>(0, &lazy cache variable for type metadata for KeyedDecodingContainer<AccessibilityArchivableViewAttachment.CodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type AccessibilityArchivableViewAttachment.CodingKeys and conformance AccessibilityArchivableViewAttachment.CodingKeys, (uint64_t)&unk_1ED462818, MEMORY[0x1E4FBBDC0]);
  uint64_t v4 = v3;
  uint64_t v10 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  uint64_t v6 = (char *)&v10 - v5;
  uint64_t KeyPath = swift_getKeyPath();
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type AccessibilityArchivableViewAttachment.CodingKeys and conformance AccessibilityArchivableViewAttachment.CodingKeys();
  swift_retain();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v1)
  {
    swift_release();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  else
  {
    uint64_t v8 = v10;
    type metadata accessor for _ContiguousArrayStorage<Swift.AnyObject>(0, &lazy cache variable for type metadata for [CodableAccessibilityAction], (uint64_t)&type metadata for CodableAccessibilityAction, MEMORY[0x1E4FBB320]);
    lazy protocol witness table accessor for type [CodableAccessibilityAction] and conformance <A> [A](&lazy protocol witness table cache variable for type [CodableAccessibilityAction] and conformance <A> [A], (void (*)(void))lazy protocol witness table accessor for type CodableAccessibilityAction and conformance CodableAccessibilityAction);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v8 + 8))(v6, v4);
    swift_bridgeObjectRetain();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    swift_bridgeObjectRelease();
  }
  swift_release();
  return KeyPath;
}

uint64_t specialized ArchivableAccessibilityViewModifier.Factory.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x656D686361747461 && a2 == 0xEA0000000000746ELL;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x797469746E656469 && a2 == 0xE800000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 1702521203 && a2 == 0xE400000000000000)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 2;
    }
    else {
      return 3;
    }
  }
}

uint64_t specialized AccessibilityArchivableViewAttachment.init(_:environment:)(uint64_t a1, uint64_t *a2)
{
  BOOL v2 = *(void **)(a1 + 8);
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  uint64_t KeyPath = swift_getKeyPath();
  swift_retain();

  uint64_t v6 = swift_bridgeObjectRetain();
  uint64_t v7 = specialized AccessibilityProperties.subscript.getter(v6);
  swift_bridgeObjectRelease_n();
  swift_retain();
  swift_retain();
  uint64_t v8 = specialized Sequence.compactMap<A>(_:)(v7, v3, v4);
  swift_bridgeObjectRelease();
  swift_release_n();
  swift_release_n();
  uint64_t v9 = *((void *)v8 + 2);
  swift_release();
  if (!v9)
  {
    swift_release();
    swift_bridgeObjectRelease();
    return 0;
  }
  return KeyPath;
}

uint64_t sub_187BD9768()
{
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

uint64_t sub_187BD97A0()
{
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);

  return swift_deallocObject();
}

uint64_t outlined copy of AccessibilityArchivableViewAttachment?(uint64_t result, uint64_t a2, char a3, uint64_t a4)
{
  if (a4 != 1)
  {
    outlined copy of Environment<AppIntentExecutor?>.Content(result, a2, a3 & 1);
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_187BD9874()
{
  outlined consume of Environment<AppIntentExecutor?>.Content(*(void *)(v0 + 16), *(void *)(v0 + 24), *(unsigned char *)(v0 + 32));
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

uint64_t outlined consume of AccessibilityArchivableViewAttachment?(uint64_t result, uint64_t a2, char a3, uint64_t a4)
{
  if (a4 != 1)
  {
    outlined consume of Environment<AppIntentExecutor?>.Content(result, a2, a3 & 1);
    return swift_bridgeObjectRelease();
  }
  return result;
}

void type metadata accessor for AccessibilityNodeAttachment?()
{
  if (!lazy cache variable for type metadata for AccessibilityNodeAttachment?)
  {
    type metadata accessor for AccessibilityNodeAttachment();
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for AccessibilityNodeAttachment?);
    }
  }
}

unint64_t lazy protocol witness table accessor for type PlatformItemListTransform and conformance PlatformItemListTransform()
{
  unint64_t result = lazy protocol witness table cache variable for type PlatformItemListTransform and conformance PlatformItemListTransform;
  if (!lazy protocol witness table cache variable for type PlatformItemListTransform and conformance PlatformItemListTransform)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlatformItemListTransform and conformance PlatformItemListTransform);
  }
  return result;
}

uint64_t outlined init with take of Image.Resolved?(uint64_t a1, uint64_t a2)
{
  type metadata accessor for _ContiguousArrayStorage<Swift.AnyObject>(0, (unint64_t *)&lazy cache variable for type metadata for Image.Resolved?, MEMORY[0x1E4F41550], MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_187BD9A44()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_187BD9A7C()
{
  outlined consume of AccessibilityAttachment.Tree(*(void *)(v0 + 16), *(void **)(v0 + 24), *(unsigned char *)(v0 + 32));

  return swift_deallocObject();
}

void partial apply for closure #2 in PlatformItemListTransform.value.getter(char **a1)
{
  closure #2 in PlatformItemListTransform.value.getter(a1, *(void *)(v1 + 16), *(char **)(v1 + 24), *(unsigned char *)(v1 + 32), *(void *)(v1 + 36));
}

unint64_t lazy protocol witness table accessor for type AccessibilityPlatformItemTransform and conformance AccessibilityPlatformItemTransform()
{
  unint64_t result = lazy protocol witness table cache variable for type AccessibilityPlatformItemTransform and conformance AccessibilityPlatformItemTransform;
  if (!lazy protocol witness table cache variable for type AccessibilityPlatformItemTransform and conformance AccessibilityPlatformItemTransform)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityPlatformItemTransform and conformance AccessibilityPlatformItemTransform);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AccessibilityPlatformItemTransform and conformance AccessibilityPlatformItemTransform;
  if (!lazy protocol witness table cache variable for type AccessibilityPlatformItemTransform and conformance AccessibilityPlatformItemTransform)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityPlatformItemTransform and conformance AccessibilityPlatformItemTransform);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PlatformItemsTransform<AccessibilityPlatformItemTransform> and conformance PlatformItemsTransform<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type PlatformItemsTransform<AccessibilityPlatformItemTransform> and conformance PlatformItemsTransform<A>;
  if (!lazy protocol witness table cache variable for type PlatformItemsTransform<AccessibilityPlatformItemTransform> and conformance PlatformItemsTransform<A>)
  {
    type metadata accessor for PropertiesTransform<AccessibilityAttachmentModifier>(255, &lazy cache variable for type metadata for PlatformItemsTransform<AccessibilityPlatformItemTransform>, (uint64_t (*)(void))lazy protocol witness table accessor for type AccessibilityPlatformItemTransform and conformance AccessibilityPlatformItemTransform, (uint64_t)&type metadata for AccessibilityPlatformItemTransform, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PlatformItemsTransform);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlatformItemsTransform<AccessibilityPlatformItemTransform> and conformance PlatformItemsTransform<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type DisplayListTransform<AccessibilityAttachmentModifier> and conformance DisplayListTransform<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type DisplayListTransform<AccessibilityAttachmentModifier> and conformance DisplayListTransform<A>;
  if (!lazy protocol witness table cache variable for type DisplayListTransform<AccessibilityAttachmentModifier> and conformance DisplayListTransform<A>)
  {
    type metadata accessor for PropertiesTransform<AccessibilityAttachmentModifier>(255, (unint64_t *)&lazy cache variable for type metadata for DisplayListTransform<AccessibilityAttachmentModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type AccessibilityAttachmentModifier and conformance AccessibilityAttachmentModifier, (uint64_t)&type metadata for AccessibilityAttachmentModifier, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for DisplayListTransform);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DisplayListTransform<AccessibilityAttachmentModifier> and conformance DisplayListTransform<A>);
  }
  return result;
}

uint64_t sub_187BD9C3C()
{
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();

  return swift_deallocObject();
}

uint64_t outlined init with copy of PropertiesTransform<AccessibilityAttachmentModifier>(uint64_t a1, uint64_t a2)
{
  type metadata accessor for PropertiesTransform<AccessibilityAttachmentModifier>(0, &lazy cache variable for type metadata for PropertiesTransform<AccessibilityAttachmentModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type AccessibilityAttachmentModifier and conformance AccessibilityAttachmentModifier, (uint64_t)&type metadata for AccessibilityAttachmentModifier, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PropertiesTransform);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of PropertiesTransform<AccessibilityAttachmentModifier>(uint64_t a1)
{
  type metadata accessor for PropertiesTransform<AccessibilityAttachmentModifier>(0, &lazy cache variable for type metadata for PropertiesTransform<AccessibilityAttachmentModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type AccessibilityAttachmentModifier and conformance AccessibilityAttachmentModifier, (uint64_t)&type metadata for AccessibilityAttachmentModifier, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PropertiesTransform);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t lazy protocol witness table accessor for type AccessibilityArchivableViewAttachment.CodingKeys and conformance AccessibilityArchivableViewAttachment.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type AccessibilityArchivableViewAttachment.CodingKeys and conformance AccessibilityArchivableViewAttachment.CodingKeys;
  if (!lazy protocol witness table cache variable for type AccessibilityArchivableViewAttachment.CodingKeys and conformance AccessibilityArchivableViewAttachment.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityArchivableViewAttachment.CodingKeys and conformance AccessibilityArchivableViewAttachment.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AccessibilityArchivableViewAttachment.CodingKeys and conformance AccessibilityArchivableViewAttachment.CodingKeys;
  if (!lazy protocol witness table cache variable for type AccessibilityArchivableViewAttachment.CodingKeys and conformance AccessibilityArchivableViewAttachment.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityArchivableViewAttachment.CodingKeys and conformance AccessibilityArchivableViewAttachment.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AccessibilityArchivableViewAttachment.CodingKeys and conformance AccessibilityArchivableViewAttachment.CodingKeys;
  if (!lazy protocol witness table cache variable for type AccessibilityArchivableViewAttachment.CodingKeys and conformance AccessibilityArchivableViewAttachment.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityArchivableViewAttachment.CodingKeys and conformance AccessibilityArchivableViewAttachment.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AccessibilityArchivableViewAttachment.CodingKeys and conformance AccessibilityArchivableViewAttachment.CodingKeys;
  if (!lazy protocol witness table cache variable for type AccessibilityArchivableViewAttachment.CodingKeys and conformance AccessibilityArchivableViewAttachment.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityArchivableViewAttachment.CodingKeys and conformance AccessibilityArchivableViewAttachment.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type CodableAccessibilityAction and conformance CodableAccessibilityAction()
{
  unint64_t result = lazy protocol witness table cache variable for type CodableAccessibilityAction and conformance CodableAccessibilityAction;
  if (!lazy protocol witness table cache variable for type CodableAccessibilityAction and conformance CodableAccessibilityAction)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodableAccessibilityAction and conformance CodableAccessibilityAction);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CodableAccessibilityAction and conformance CodableAccessibilityAction;
  if (!lazy protocol witness table cache variable for type CodableAccessibilityAction and conformance CodableAccessibilityAction)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodableAccessibilityAction and conformance CodableAccessibilityAction);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type [CodableAccessibilityAction] and conformance <A> [A](unint64_t *a1, void (*a2)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for _ContiguousArrayStorage<Swift.AnyObject>(255, &lazy cache variable for type metadata for [CodableAccessibilityAction], (uint64_t)&type metadata for CodableAccessibilityAction, MEMORY[0x1E4FBB320]);
    a2();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type LabelIconPlatformItemModifier and conformance LabelIconPlatformItemModifier()
{
  unint64_t result = lazy protocol witness table cache variable for type LabelIconPlatformItemModifier and conformance LabelIconPlatformItemModifier;
  if (!lazy protocol witness table cache variable for type LabelIconPlatformItemModifier and conformance LabelIconPlatformItemModifier)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LabelIconPlatformItemModifier and conformance LabelIconPlatformItemModifier);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type LabelIconPlatformItemModifier and conformance LabelIconPlatformItemModifier;
  if (!lazy protocol witness table cache variable for type LabelIconPlatformItemModifier and conformance LabelIconPlatformItemModifier)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LabelIconPlatformItemModifier and conformance LabelIconPlatformItemModifier);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PlatformItemsTransform<LabelIconPlatformItemModifier> and conformance PlatformItemsTransform<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type PlatformItemsTransform<LabelIconPlatformItemModifier> and conformance PlatformItemsTransform<A>;
  if (!lazy protocol witness table cache variable for type PlatformItemsTransform<LabelIconPlatformItemModifier> and conformance PlatformItemsTransform<A>)
  {
    type metadata accessor for PropertiesTransform<AccessibilityAttachmentModifier>(255, &lazy cache variable for type metadata for PlatformItemsTransform<LabelIconPlatformItemModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type LabelIconPlatformItemModifier and conformance LabelIconPlatformItemModifier, (uint64_t)&type metadata for LabelIconPlatformItemModifier, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PlatformItemsTransform);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlatformItemsTransform<LabelIconPlatformItemModifier> and conformance PlatformItemsTransform<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PlatformNewDocumentButtonTransform and conformance PlatformNewDocumentButtonTransform()
{
  unint64_t result = lazy protocol witness table cache variable for type PlatformNewDocumentButtonTransform and conformance PlatformNewDocumentButtonTransform;
  if (!lazy protocol witness table cache variable for type PlatformNewDocumentButtonTransform and conformance PlatformNewDocumentButtonTransform)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlatformNewDocumentButtonTransform and conformance PlatformNewDocumentButtonTransform);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PlatformNewDocumentButtonTransform and conformance PlatformNewDocumentButtonTransform;
  if (!lazy protocol witness table cache variable for type PlatformNewDocumentButtonTransform and conformance PlatformNewDocumentButtonTransform)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlatformNewDocumentButtonTransform and conformance PlatformNewDocumentButtonTransform);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PlatformItemsTransform<PlatformButtonActionTransform> and conformance PlatformItemsTransform<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type PlatformItemsTransform<PlatformButtonActionTransform> and conformance PlatformItemsTransform<A>;
  if (!lazy protocol witness table cache variable for type PlatformItemsTransform<PlatformButtonActionTransform> and conformance PlatformItemsTransform<A>)
  {
    type metadata accessor for PropertiesTransform<AccessibilityAttachmentModifier>(255, &lazy cache variable for type metadata for PlatformItemsTransform<PlatformButtonActionTransform>, (uint64_t (*)(void))lazy protocol witness table accessor for type PlatformButtonActionTransform and conformance PlatformButtonActionTransform, (uint64_t)&type metadata for PlatformButtonActionTransform, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PlatformItemsTransform);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlatformItemsTransform<PlatformButtonActionTransform> and conformance PlatformItemsTransform<A>);
  }
  return result;
}

void *type metadata accessor for AccessibilityArchivableViewAttachment.CodingKeys()
{
  return &unk_1ED462818;
}

void *type metadata accessor for PlatformItemListTransform()
{
  return &unk_1ED447D70;
}

uint64_t assignWithTake for ArchivableAccessibilityViewModifier.Factory(uint64_t a1, uint64_t a2)
{
  char v4 = *(unsigned char *)(a2 + 16);
  uint64_t v5 = *(void *)a1;
  uint64_t v6 = *(void *)(a1 + 8);
  char v7 = *(unsigned char *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(unsigned char *)(a1 + 16) = v4;
  outlined consume of Environment<AppIntentExecutor?>.Content(v5, v6, v7);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  return a1;
}

uint64_t getEnumTagSinglePayload for ArchivableAccessibilityViewModifier.Factory(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 56)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 24);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ArchivableAccessibilityViewModifier.Factory(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)unint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 56) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 56) = 0;
    }
    if (a2) {
      *(void *)(result + 24) = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ArchivableAccessibilityViewModifier.Factory()
{
  return &type metadata for ArchivableAccessibilityViewModifier.Factory;
}

uint64_t getEnumTagSinglePayload for DisplayListTransform(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 60)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for DisplayListTransform(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_DWORD *)(result + 56) = 0;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 60) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 60) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

void *type metadata accessor for MakePlatformTransform()
{
  return &unk_1ED435620;
}

uint64_t assignWithCopy for AccessibilityPlatformItemTransform(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  return a1;
}

void *assignWithTake for AccessibilityPlatformItemTransform(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  return a1;
}

ValueMetadata *type metadata accessor for AccessibilityPlatformItemTransform()
{
  return &type metadata for AccessibilityPlatformItemTransform;
}

void *type metadata accessor for PlatformAccessibilityContent()
{
  return &unk_1ED453CE0;
}

void *type metadata accessor for PlatformAccessibilityEnv()
{
  return &unk_1ED442E38;
}

uint64_t assignWithCopy for PropertiesTransform(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  int v4 = *(void **)(a1 + 64);
  uint64_t v5 = *(void **)(a2 + 64);
  *(void *)(a1 + 64) = v5;
  id v6 = v5;

  swift_unknownObjectWeakCopyAssign();
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  return a1;
}

uint64_t initializeWithTake for PropertiesTransform(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_unknownObjectWeakTakeInit();
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  return a1;
}

uint64_t assignWithTake for PropertiesTransform(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  uint64_t v5 = *(void **)(a1 + 64);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);

  swift_unknownObjectWeakTakeAssign();
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  return a1;
}

uint64_t getEnumTagSinglePayload for PropertiesTransform(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 84)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 40);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for PropertiesTransform(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_DWORD *)(result + 80) = 0;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 84) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 40) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 84) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

void *type metadata accessor for AccessibilityArchivableViewAttachment()
{
  return &unk_1ED4628C8;
}

void *assignWithCopy for ArchivedAttachmentModifier(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  long long v4 = (void *)a1[1];
  uint64_t v5 = (void *)a2[1];
  a1[1] = v5;
  id v6 = v5;

  return a1;
}

ValueMetadata *type metadata accessor for ArchivedAttachmentModifier()
{
  return &type metadata for ArchivedAttachmentModifier;
}

_UNKNOWN **base witness table accessor for ViewModifier in ArchivedAttachmentModifier()
{
  return &protocol witness table for ArchivedAttachmentModifier;
}

unint64_t instantiation function for generic protocol witness table for ArchivedAttachmentModifier(uint64_t a1)
{
  *(void *)(a1 + 8) = lazy protocol witness table accessor for type ArchivedAttachmentModifier and conformance ArchivedAttachmentModifier();
  unint64_t result = lazy protocol witness table accessor for type ArchivedAttachmentModifier and conformance ArchivedAttachmentModifier();
  *(void *)(a1 + 16) = result;
  return result;
}

_UNKNOWN **base witness table accessor for ViewModifier in AccessibilityPlatformItemTransform()
{
  return &protocol witness table for AccessibilityPlatformItemTransform;
}

unint64_t instantiation function for generic protocol witness table for AccessibilityPlatformItemTransform(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type AccessibilityPlatformItemTransform and conformance AccessibilityPlatformItemTransform();
  *(void *)(a1 + 8) = result;
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table accessor for type AccessibilityPlatformItemTransform and conformance AccessibilityPlatformItemTransform();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t base witness table accessor for _AttributeBody in DisplayListTransform<A>()
{
  return swift_getWitnessTable();
}

void type metadata accessor for ModifiedContent<ArchivablePlaceholder, ArchivableAccessibilityViewModifier>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ArchivablePlaceholder, ArchivableAccessibilityViewModifier>)
  {
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ArchivablePlaceholder, ArchivableAccessibilityViewModifier>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ArchivablePlaceholder, ArchivableAccessibilityViewModifier> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ArchivablePlaceholder, ArchivableAccessibilityViewModifier> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ArchivablePlaceholder, ArchivableAccessibilityViewModifier> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ArchivablePlaceholder, ArchivableAccessibilityViewModifier>();
    lazy protocol witness table accessor for type ArchivableAccessibilityViewModifier and conformance ArchivableAccessibilityViewModifier();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ArchivablePlaceholder, ArchivableAccessibilityViewModifier> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ArchivableAccessibilityViewModifier and conformance ArchivableAccessibilityViewModifier()
{
  unint64_t result = lazy protocol witness table cache variable for type ArchivableAccessibilityViewModifier and conformance ArchivableAccessibilityViewModifier;
  if (!lazy protocol witness table cache variable for type ArchivableAccessibilityViewModifier and conformance ArchivableAccessibilityViewModifier)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ArchivableAccessibilityViewModifier and conformance ArchivableAccessibilityViewModifier);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ArchivableAccessibilityViewModifier and conformance ArchivableAccessibilityViewModifier;
  if (!lazy protocol witness table cache variable for type ArchivableAccessibilityViewModifier and conformance ArchivableAccessibilityViewModifier)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ArchivableAccessibilityViewModifier and conformance ArchivableAccessibilityViewModifier);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ArchivableAccessibilityViewModifier and conformance ArchivableAccessibilityViewModifier;
  if (!lazy protocol witness table cache variable for type ArchivableAccessibilityViewModifier and conformance ArchivableAccessibilityViewModifier)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ArchivableAccessibilityViewModifier and conformance ArchivableAccessibilityViewModifier);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ArchivableAccessibilityViewModifier.Factory.CodingKeys and conformance ArchivableAccessibilityViewModifier.Factory.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type ArchivableAccessibilityViewModifier.Factory.CodingKeys and conformance ArchivableAccessibilityViewModifier.Factory.CodingKeys;
  if (!lazy protocol witness table cache variable for type ArchivableAccessibilityViewModifier.Factory.CodingKeys and conformance ArchivableAccessibilityViewModifier.Factory.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ArchivableAccessibilityViewModifier.Factory.CodingKeys and conformance ArchivableAccessibilityViewModifier.Factory.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ArchivableAccessibilityViewModifier.Factory.CodingKeys and conformance ArchivableAccessibilityViewModifier.Factory.CodingKeys;
  if (!lazy protocol witness table cache variable for type ArchivableAccessibilityViewModifier.Factory.CodingKeys and conformance ArchivableAccessibilityViewModifier.Factory.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ArchivableAccessibilityViewModifier.Factory.CodingKeys and conformance ArchivableAccessibilityViewModifier.Factory.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ArchivableAccessibilityViewModifier.Factory.CodingKeys and conformance ArchivableAccessibilityViewModifier.Factory.CodingKeys;
  if (!lazy protocol witness table cache variable for type ArchivableAccessibilityViewModifier.Factory.CodingKeys and conformance ArchivableAccessibilityViewModifier.Factory.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ArchivableAccessibilityViewModifier.Factory.CodingKeys and conformance ArchivableAccessibilityViewModifier.Factory.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ArchivableAccessibilityViewModifier.Factory.CodingKeys and conformance ArchivableAccessibilityViewModifier.Factory.CodingKeys;
  if (!lazy protocol witness table cache variable for type ArchivableAccessibilityViewModifier.Factory.CodingKeys and conformance ArchivableAccessibilityViewModifier.Factory.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ArchivableAccessibilityViewModifier.Factory.CodingKeys and conformance ArchivableAccessibilityViewModifier.Factory.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AccessibilityArchivableViewAttachment and conformance AccessibilityArchivableViewAttachment()
{
  unint64_t result = lazy protocol witness table cache variable for type AccessibilityArchivableViewAttachment and conformance AccessibilityArchivableViewAttachment;
  if (!lazy protocol witness table cache variable for type AccessibilityArchivableViewAttachment and conformance AccessibilityArchivableViewAttachment)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityArchivableViewAttachment and conformance AccessibilityArchivableViewAttachment);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AccessibilityArchivableViewAttachment and conformance AccessibilityArchivableViewAttachment;
  if (!lazy protocol witness table cache variable for type AccessibilityArchivableViewAttachment and conformance AccessibilityArchivableViewAttachment)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityArchivableViewAttachment and conformance AccessibilityArchivableViewAttachment);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type CGSize and conformance CGSize(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for CGSize(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type DisplayListTransform<AccessibilityPlatformViewModifier> and conformance DisplayListTransform<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type DisplayListTransform<AccessibilityPlatformViewModifier> and conformance DisplayListTransform<A>;
  if (!lazy protocol witness table cache variable for type DisplayListTransform<AccessibilityPlatformViewModifier> and conformance DisplayListTransform<A>)
  {
    type metadata accessor for PropertiesTransform<AccessibilityAttachmentModifier>(255, &lazy cache variable for type metadata for DisplayListTransform<AccessibilityPlatformViewModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type AccessibilityPlatformViewModifier and conformance AccessibilityPlatformViewModifier, (uint64_t)&type metadata for AccessibilityPlatformViewModifier, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for DisplayListTransform);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DisplayListTransform<AccessibilityPlatformViewModifier> and conformance DisplayListTransform<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type DisplayListTransform<AccessibilityScrollableModifier> and conformance DisplayListTransform<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type DisplayListTransform<AccessibilityScrollableModifier> and conformance DisplayListTransform<A>;
  if (!lazy protocol witness table cache variable for type DisplayListTransform<AccessibilityScrollableModifier> and conformance DisplayListTransform<A>)
  {
    type metadata accessor for PropertiesTransform<AccessibilityAttachmentModifier>(255, &lazy cache variable for type metadata for DisplayListTransform<AccessibilityScrollableModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type AccessibilityScrollableModifier and conformance AccessibilityScrollableModifier, (uint64_t)&type metadata for AccessibilityScrollableModifier, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for DisplayListTransform);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DisplayListTransform<AccessibilityScrollableModifier> and conformance DisplayListTransform<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type DisplayListTransform<AccessibilityScrollableContextModifier> and conformance DisplayListTransform<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type DisplayListTransform<AccessibilityScrollableContextModifier> and conformance DisplayListTransform<A>;
  if (!lazy protocol witness table cache variable for type DisplayListTransform<AccessibilityScrollableContextModifier> and conformance DisplayListTransform<A>)
  {
    type metadata accessor for PropertiesTransform<AccessibilityAttachmentModifier>(255, &lazy cache variable for type metadata for DisplayListTransform<AccessibilityScrollableContextModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type AccessibilityScrollableContextModifier and conformance AccessibilityScrollableContextModifier, (uint64_t)&type metadata for AccessibilityScrollableContextModifier, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for DisplayListTransform);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DisplayListTransform<AccessibilityScrollableContextModifier> and conformance DisplayListTransform<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type DisplayListTransform<ArchivedAttachmentModifier> and conformance DisplayListTransform<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type DisplayListTransform<ArchivedAttachmentModifier> and conformance DisplayListTransform<A>;
  if (!lazy protocol witness table cache variable for type DisplayListTransform<ArchivedAttachmentModifier> and conformance DisplayListTransform<A>)
  {
    type metadata accessor for PropertiesTransform<AccessibilityAttachmentModifier>(255, &lazy cache variable for type metadata for DisplayListTransform<ArchivedAttachmentModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type ArchivedAttachmentModifier and conformance ArchivedAttachmentModifier, (uint64_t)&type metadata for ArchivedAttachmentModifier, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for DisplayListTransform);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DisplayListTransform<ArchivedAttachmentModifier> and conformance DisplayListTransform<A>);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for ArchivableAccessibilityViewModifier.Factory.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x187BDAFCCLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

void *type metadata accessor for ArchivableAccessibilityViewModifier.Factory.CodingKeys()
{
  return &unk_1ED4611B0;
}

uint64_t destroy for ArchivableAccessibilityViewModifier.Factory(uint64_t a1)
{
  outlined consume of Environment<AppIntentExecutor?>.Content(*(void *)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16));

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for AccessibilityArchivableViewAttachment(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  uint64_t v5 = *(void *)(a2 + 8);
  char v6 = *(unsigned char *)(a2 + 16);
  outlined copy of Environment<AppIntentExecutor?>.Content(*(void *)a2, v5, v6);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  *(unsigned char *)(a1 + 16) = v6;
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for AccessibilityArchivableViewAttachment(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  uint64_t v5 = *(void *)(a2 + 8);
  char v6 = *(unsigned char *)(a2 + 16);
  outlined copy of Environment<AppIntentExecutor?>.Content(*(void *)a2, v5, v6);
  uint64_t v7 = *(void *)a1;
  uint64_t v8 = *(void *)(a1 + 8);
  char v9 = *(unsigned char *)(a1 + 16);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  *(unsigned char *)(a1 + 16) = v6;
  outlined consume of Environment<AppIntentExecutor?>.Content(v7, v8, v9);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for AccessibilityArchivableViewAttachment(uint64_t a1, uint64_t a2)
{
  char v4 = *(unsigned char *)(a2 + 16);
  uint64_t v5 = *(void *)a1;
  uint64_t v6 = *(void *)(a1 + 8);
  char v7 = *(unsigned char *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(unsigned char *)(a1 + 16) = v4;
  outlined consume of Environment<AppIntentExecutor?>.Content(v5, v6, v7);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for ArchivableAccessibilityViewModifier()
{
  return &type metadata for ArchivableAccessibilityViewModifier;
}

unint64_t instantiation function for generic protocol witness table for ArchivableAccessibilityViewModifier(void *a1)
{
  a1[1] = lazy protocol witness table accessor for type ArchivableAccessibilityViewModifier and conformance ArchivableAccessibilityViewModifier();
  a1[2] = lazy protocol witness table accessor for type ArchivableAccessibilityViewModifier and conformance ArchivableAccessibilityViewModifier();
  unint64_t result = lazy protocol witness table accessor for type ArchivableAccessibilityViewModifier and conformance ArchivableAccessibilityViewModifier();
  a1[3] = result;
  return result;
}

uint64_t associated type witness table accessor for ViewModifier.Body : View in ArchivableAccessibilityViewModifier()
{
  return swift_getOpaqueTypeConformance2();
}

id outlined copy of AccessibilityText.Storage(void *a1, uint64_t a2, char a3)
{
  if (a3) {
    return a1;
  }
  else {
    return (id)swift_bridgeObjectRetain();
  }
}

uint64_t outlined init with take of CodableAccessibilityAction.ActionKind(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_187BDB400()
{
  if (*(void *)(v0 + 16)) {
    swift_release();
  }
  __int16 v1 = *(_WORD *)(v0 + 48);
  if (v1 != 251 && (v1 & 0xFC | 2) != 0xFE) {
    outlined consume of AccessibilityText.Storage(*(void **)(v0 + 32), *(void *)(v0 + 40), v1 & 1);
  }
  outlined consume of Environment<AppIntentExecutor?>.Content(*(void *)(v0 + 56), *(void *)(v0 + 64), *(unsigned char *)(v0 + 72));

  swift_release();

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in AnyAccessibilityAction.init(_:appIntentExecutor:)()
{
  return closure #1 in AnyAccessibilityAction.init(_:appIntentExecutor:)();
}

uint64_t sub_187BDB494()
{
  if (*(void *)(v0 + 40) >= 5uLL)
  {
    outlined consume of Text.Storage(*(void *)(v0 + 16), *(void *)(v0 + 24), *(unsigned char *)(v0 + 32));
    swift_bridgeObjectRelease();
  }
  if (*(void *)(v0 + 72) >= 3uLL)
  {
    outlined consume of Text.Storage(*(void *)(v0 + 48), *(void *)(v0 + 56), *(unsigned char *)(v0 + 64));
    swift_bridgeObjectRelease();
  }
  if (*(void *)(v0 + 104))
  {
    outlined consume of Text.Storage(*(void *)(v0 + 80), *(void *)(v0 + 88), *(unsigned char *)(v0 + 96));
    swift_bridgeObjectRelease();
  }
  swift_release();
  swift_release();

  return swift_deallocObject();
}

unint64_t lazy protocol witness table accessor for type ArchivableAccessibilityViewModifier.CodingKeys and conformance ArchivableAccessibilityViewModifier.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type ArchivableAccessibilityViewModifier.CodingKeys and conformance ArchivableAccessibilityViewModifier.CodingKeys;
  if (!lazy protocol witness table cache variable for type ArchivableAccessibilityViewModifier.CodingKeys and conformance ArchivableAccessibilityViewModifier.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ArchivableAccessibilityViewModifier.CodingKeys and conformance ArchivableAccessibilityViewModifier.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ArchivableAccessibilityViewModifier.CodingKeys and conformance ArchivableAccessibilityViewModifier.CodingKeys;
  if (!lazy protocol witness table cache variable for type ArchivableAccessibilityViewModifier.CodingKeys and conformance ArchivableAccessibilityViewModifier.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ArchivableAccessibilityViewModifier.CodingKeys and conformance ArchivableAccessibilityViewModifier.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ArchivableAccessibilityViewModifier.CodingKeys and conformance ArchivableAccessibilityViewModifier.CodingKeys;
  if (!lazy protocol witness table cache variable for type ArchivableAccessibilityViewModifier.CodingKeys and conformance ArchivableAccessibilityViewModifier.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ArchivableAccessibilityViewModifier.CodingKeys and conformance ArchivableAccessibilityViewModifier.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ArchivableAccessibilityViewModifier.CodingKeys and conformance ArchivableAccessibilityViewModifier.CodingKeys;
  if (!lazy protocol witness table cache variable for type ArchivableAccessibilityViewModifier.CodingKeys and conformance ArchivableAccessibilityViewModifier.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ArchivableAccessibilityViewModifier.CodingKeys and conformance ArchivableAccessibilityViewModifier.CodingKeys);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for AccessibilityArchivableViewAttachment.CodingKeys(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x187BDB620);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

void *type metadata accessor for ArchivableAccessibilityViewModifier.CodingKeys()
{
  return &unk_1ED461120;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<_ViewModifier_Content<ArchivableAccessibilityViewModifier>, ArchivedAttachmentModifier> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<ArchivableAccessibilityViewModifier>, ArchivedAttachmentModifier> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<ArchivableAccessibilityViewModifier>, ArchivedAttachmentModifier> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<_ViewModifier_Content<ArchivableAccessibilityViewModifier>, ArchivedAttachmentModifier>();
    lazy protocol witness table accessor for type _ViewModifier_Content<ArchivableAccessibilityViewModifier> and conformance _ViewModifier_Content<A>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<ArchivableAccessibilityViewModifier>, ArchivedAttachmentModifier> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<_ViewModifier_Content<ArchivableAccessibilityViewModifier>, ArchivedAttachmentModifier>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<_ViewModifier_Content<ArchivableAccessibilityViewModifier>, ArchivedAttachmentModifier>)
  {
    type metadata accessor for PropertiesTransform<AccessibilityAttachmentModifier>(255, &lazy cache variable for type metadata for _ViewModifier_Content<ArchivableAccessibilityViewModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type ArchivableAccessibilityViewModifier and conformance ArchivableAccessibilityViewModifier, (uint64_t)&type metadata for ArchivableAccessibilityViewModifier, MEMORY[0x1E4F408E0]);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<_ViewModifier_Content<ArchivableAccessibilityViewModifier>, ArchivedAttachmentModifier>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type _ViewModifier_Content<ArchivableAccessibilityViewModifier> and conformance _ViewModifier_Content<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type _ViewModifier_Content<ArchivableAccessibilityViewModifier> and conformance _ViewModifier_Content<A>;
  if (!lazy protocol witness table cache variable for type _ViewModifier_Content<ArchivableAccessibilityViewModifier> and conformance _ViewModifier_Content<A>)
  {
    type metadata accessor for PropertiesTransform<AccessibilityAttachmentModifier>(255, &lazy cache variable for type metadata for _ViewModifier_Content<ArchivableAccessibilityViewModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type ArchivableAccessibilityViewModifier and conformance ArchivableAccessibilityViewModifier, (uint64_t)&type metadata for ArchivableAccessibilityViewModifier, MEMORY[0x1E4F408E0]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ViewModifier_Content<ArchivableAccessibilityViewModifier> and conformance _ViewModifier_Content<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type DisplayListTransform<AccessibilityOpacityModifier> and conformance DisplayListTransform<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type DisplayListTransform<AccessibilityOpacityModifier> and conformance DisplayListTransform<A>;
  if (!lazy protocol witness table cache variable for type DisplayListTransform<AccessibilityOpacityModifier> and conformance DisplayListTransform<A>)
  {
    type metadata accessor for PropertiesTransform<AccessibilityAttachmentModifier>(255, &lazy cache variable for type metadata for DisplayListTransform<AccessibilityOpacityModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type AccessibilityOpacityModifier and conformance AccessibilityOpacityModifier, (uint64_t)&type metadata for AccessibilityOpacityModifier, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for DisplayListTransform);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DisplayListTransform<AccessibilityOpacityModifier> and conformance DisplayListTransform<A>);
  }
  return result;
}

void type metadata accessor for PropertiesTransform<AccessibilityAttachmentModifier>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void), uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v9 = a3();
    unint64_t v10 = a5(a1, a4, v9);
    if (!v11) {
      atomic_store(v10, a2);
    }
  }
}

unint64_t lazy protocol witness table accessor for type DisplayListTransform<AccessibilityGestureModifier> and conformance DisplayListTransform<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type DisplayListTransform<AccessibilityGestureModifier> and conformance DisplayListTransform<A>;
  if (!lazy protocol witness table cache variable for type DisplayListTransform<AccessibilityGestureModifier> and conformance DisplayListTransform<A>)
  {
    type metadata accessor for PropertiesTransform<AccessibilityAttachmentModifier>(255, &lazy cache variable for type metadata for DisplayListTransform<AccessibilityGestureModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type AccessibilityGestureModifier and conformance AccessibilityGestureModifier, (uint64_t)&type metadata for AccessibilityGestureModifier, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for DisplayListTransform);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DisplayListTransform<AccessibilityGestureModifier> and conformance DisplayListTransform<A>);
  }
  return result;
}

uint64_t sub_187BDBA94@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = ContainerValues.subscript.getter();
  *a1 = v3;
  return result;
}

uint64_t sub_187BDBAEC()
{
  return ContainerValues.subscript.setter();
}

uint64_t protocol witness for LabelStyle.makeBody(configuration:) in conformance IconOnlyLabelStyle@<X0>(uint64_t a1@<X8>)
{
  return IconOnlyLabelStyle.makeBody(configuration:)(a1);
}

void protocol witness for ViewModifier.body(content:) in conformance LabelIconPlatformItemModifier()
{
}

uint64_t sub_187BDBCC0()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in View.accessibilityLabel<A>(_:label:)(uint64_t a1)
{
  return closure #1 in View.accessibilityLabel<A>(_:label:)(a1, *(unsigned char *)(v1 + 16));
}

uint64_t associated type witness table accessor for LabelStyle.Body : View in IconOnlyLabelStyle()
{
  return swift_getOpaqueTypeConformance2();
}

ValueMetadata *type metadata accessor for IconOnlyLabelStyle()
{
  return &type metadata for IconOnlyLabelStyle;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, _ContainerValueWritingModifier<LabelItemRole?>>, AccessibilityAttachmentModifier>, DisableDeferredAccessibilityAttachmentModifier>, _BackgroundModifier<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>, _HiddenModifier>, _PreferenceTransformModifier<AccessibilityAttachment.Key>>>>, AccessibilityAttachmentModifier>, DetachDeferredAccessibilityAttachmentModifier>, EnableDeferredAccessibilityAttachmentModifier>, ViewInputFlagModifier<AccessibilityShowsLabelIcon>>, LabelIconPlatformItemModifier> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, _ContainerValueWritingModifier<LabelItemRole?>>, AccessibilityAttachmentModifier>, DisableDeferredAccessibilityAttachmentModifier>, _BackgroundModifier<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>, _HiddenModifier>, _PreferenceTransformModifier<AccessibilityAttachment.Key>>>>, AccessibilityAttachmentModifier>, DetachDeferredAccessibilityAttachmentModifier>, EnableDeferredAccessibilityAttachmentModifier>, ViewInputFlagModifier<AccessibilityShowsLabelIcon>>, LabelIconPlatformItemModifier> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, _ContainerValueWritingModifier<LabelItemRole?>>, AccessibilityAttachmentModifier>, DisableDeferredAccessibilityAttachmentModifier>, _BackgroundModifier<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>, _HiddenModifier>, _PreferenceTransformModifier<AccessibilityAttachment.Key>>>>, AccessibilityAttachmentModifier>, DetachDeferredAccessibilityAttachmentModifier>, EnableDeferredAccessibilityAttachmentModifier>, ViewInputFlagModifier<AccessibilityShowsLabelIcon>>, LabelIconPlatformItemModifier> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, _ContainerValueWritingModifier<LabelItemRole?>>, AccessibilityAttachmentModifier>, DisableDeferredAccessibilityAttachmentModifier>, _BackgroundModifier<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>, _HiddenModifier>, _PreferenceTransformModifier<AccessibilityAttachment.Key>>>>, AccessibilityAttachmentModifier>, DetachDeferredAccessibilityAttachmentModifier>, EnableDeferredAccessibilityAttachmentModifier>, ViewInputFlagModifier<AccessibilityShowsLabelIcon>>, LabelIconPlatformItemModifier>(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, _ContainerValueWritingModifier<LabelItemRole?>>, AccessibilityAttachmentModifier>, DisableDeferredAccessibilityAttachmentModifier>, _BackgroundModifier<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>, _HiddenModifier>, _PreferenceTransformModifier<AccessibilityAttachment.Key>>>>, AccessibilityAttachmentModifier>, DetachDeferredAccessibilityAttachmentModifier>, EnableDeferredAccessibilityAttachmentModifier>, ViewInputFlagModifier<AccessibilityShowsLabelIcon>>, LabelIconPlatformItemModifier>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, _ContainerValueWritingModifier<LabelItemRole?>>, AccessibilityAttachmentModifier>, DisableDeferredAccessibilityAttachmentModifier>, _BackgroundModifier<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>, _HiddenModifier>, _PreferenceTransformModifier<AccessibilityAttachment.Key>>>>, AccessibilityAttachmentModifier>, DetachDeferredAccessibilityAttachmentModifier>, EnableDeferredAccessibilityAttachmentModifier>, ViewInputFlagModifier<AccessibilityShowsLabelIcon>>);
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, _ContainerValueWritingModifier<LabelItemRole?>>, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, _ContainerValueWritingModifier<LabelItemRole?>>, AccessibilityAttachmentModifier>, DisableDeferredAccessibilityAttachmentModifier>, _BackgroundModifier<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>, _HiddenModifier>, _PreferenceTransformModifier<AccessibilityAttachment.Key>>>>, AccessibilityAttachmentModifier>, DetachDeferredAccessibilityAttachmentModifier>, EnableDeferredAccessibilityAttachmentModifier>, ViewInputFlagModifier<AccessibilityShowsLabelIcon>> and conformance <> ModifiedContent<A, B>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, _ContainerValueWritingModifier<LabelItemRole?>>, AccessibilityAttachmentModifier>, DisableDeferredAccessibilityAttachmentModifier>, _BackgroundModifier<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>, _HiddenModifier>, _PreferenceTransformModifier<AccessibilityAttachment.Key>>>>, AccessibilityAttachmentModifier>, DetachDeferredAccessibilityAttachmentModifier>, EnableDeferredAccessibilityAttachmentModifier>, ViewInputFlagModifier<AccessibilityShowsLabelIcon>>, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, _ContainerValueWritingModifier<LabelItemRole?>>, AccessibilityAttachmentModifier>, DisableDeferredAccessibilityAttachmentModifier>, _BackgroundModifier<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>, _HiddenModifier>, _PreferenceTransformModifier<AccessibilityAttachment.Key>>>>, AccessibilityAttachmentModifier>, DetachDeferredAccessibilityAttachmentModifier>, EnableDeferredAccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, _ContainerValueWritingModifier<LabelItemRole?>>, AccessibilityAttachmentModifier>, DisableDeferredAccessibilityAttachmentModifier>, _BackgroundModifier<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>, _HiddenModifier>, _PreferenceTransformModifier<AccessibilityAttachment.Key>>>>, AccessibilityAttachmentModifier>, DetachDeferredAccessibilityAttachmentModifier>, EnableDeferredAccessibilityAttachmentModifier>, ViewInputFlagModifier<AccessibilityShowsLabelIcon>>, LabelIconPlatformItemModifier> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, _ContainerValueWritingModifier<LabelItemRole?>>, AccessibilityAttachmentModifier>, DisableDeferredAccessibilityAttachmentModifier>, _BackgroundModifier<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>, _HiddenModifier>, _PreferenceTransformModifier<AccessibilityAttachment.Key>>>>, AccessibilityAttachmentModifier>, DetachDeferredAccessibilityAttachmentModifier>, EnableDeferredAccessibilityAttachmentModifier>, ViewInputFlagModifier<AccessibilityShowsLabelIcon>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, _ContainerValueWritingModifier<LabelItemRole?>>, AccessibilityAttachmentModifier>, DisableDeferredAccessibilityAttachmentModifier>, _BackgroundModifier<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>, _HiddenModifier>, _PreferenceTransformModifier<AccessibilityAttachment.Key>>>>, AccessibilityAttachmentModifier>, DetachDeferredAccessibilityAttachmentModifier>, EnableDeferredAccessibilityAttachmentModifier>, ViewInputFlagModifier<AccessibilityShowsLabelIcon>>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, _ContainerValueWritingModifier<LabelItemRole?>>, AccessibilityAttachmentModifier>, DisableDeferredAccessibilityAttachmentModifier>, _BackgroundModifier<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>, _HiddenModifier>, _PreferenceTransformModifier<AccessibilityAttachment.Key>>>>, AccessibilityAttachmentModifier>, DetachDeferredAccessibilityAttachmentModifier>, EnableDeferredAccessibilityAttachmentModifier>, ViewInputFlagModifier<AccessibilityShowsLabelIcon>>, LabelIconPlatformItemModifier>(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, _ContainerValueWritingModifier<LabelItemRole?>>, AccessibilityAttachmentModifier>, DisableDeferredAccessibilityAttachmentModifier>, _BackgroundModifier<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>, _HiddenModifier>, _PreferenceTransformModifier<AccessibilityAttachment.Key>>>>, AccessibilityAttachmentModifier>, DetachDeferredAccessibilityAttachmentModifier>, EnableDeferredAccessibilityAttachmentModifier>, type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, _ContainerValueWritingModifier<LabelItemRole?>>, AccessibilityAttachmentModifier>, DisableDeferredAccessibilityAttachmentModifier>, _BackgroundModifier<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>, _HiddenModifier>, _PreferenceTransformModifier<AccessibilityAttachment.Key>>>>, AccessibilityAttachmentModifier>, DetachDeferredAccessibilityAttachmentModifier>);
    _s7SwiftUI29AccessibilityChildBehaviorBox33_F0D4BE429651399A5FAD2DF7DCDF699DLLCyAA0cdE0V7CombineVGMaTm_0(255, (unint64_t *)&lazy cache variable for type metadata for ViewInputFlagModifier<AccessibilityShowsLabelIcon>, (uint64_t (*)(void))lazy protocol witness table accessor for type AccessibilityShowsLabelIcon and conformance AccessibilityShowsLabelIcon, (uint64_t)&type metadata for AccessibilityShowsLabelIcon, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ViewInputFlagModifier);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, _ContainerValueWritingModifier<LabelItemRole?>>, AccessibilityAttachmentModifier>, DisableDeferredAccessibilityAttachmentModifier>, _BackgroundModifier<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>, _HiddenModifier>, _PreferenceTransformModifier<AccessibilityAttachment.Key>>>>, AccessibilityAttachmentModifier>, DetachDeferredAccessibilityAttachmentModifier>, EnableDeferredAccessibilityAttachmentModifier>, ViewInputFlagModifier<AccessibilityShowsLabelIcon>>);
    }
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, _ContainerValueWritingModifier<LabelItemRole?>>, AccessibilityAttachmentModifier>, DisableDeferredAccessibilityAttachmentModifier>, _BackgroundModifier<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>, _HiddenModifier>, _PreferenceTransformModifier<AccessibilityAttachment.Key>>>>, AccessibilityAttachmentModifier>, DetachDeferredAccessibilityAttachmentModifier>(uint64_t a1)
{
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, _ContainerValueWritingModifier<LabelItemRole?>>, AccessibilityAttachmentModifier>, DisableDeferredAccessibilityAttachmentModifier>, _BackgroundModifier<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>, _HiddenModifier>, _PreferenceTransformModifier<AccessibilityAttachment.Key>>>>, AccessibilityAttachmentModifier>(uint64_t a1)
{
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, _ContainerValueWritingModifier<LabelItemRole?>>, AccessibilityAttachmentModifier>, DisableDeferredAccessibilityAttachmentModifier>, _BackgroundModifier<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>, _HiddenModifier>, _PreferenceTransformModifier<AccessibilityAttachment.Key>>>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, _ContainerValueWritingModifier<LabelItemRole?>>, AccessibilityAttachmentModifier>, DisableDeferredAccessibilityAttachmentModifier>, _BackgroundModifier<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>, _HiddenModifier>, _PreferenceTransformModifier<AccessibilityAttachment.Key>>>>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, _ContainerValueWritingModifier<LabelItemRole?>>, AccessibilityAttachmentModifier>, DisableDeferredAccessibilityAttachmentModifier>, _BackgroundModifier<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>, _HiddenModifier>, _PreferenceTransformModifier<AccessibilityAttachment.Key>>>>, AccessibilityAttachmentModifier>, DetachDeferredAccessibilityAttachmentModifier>, EnableDeferredAccessibilityAttachmentModifier>, ViewInputFlagModifier<AccessibilityShowsLabelIcon>>, LabelIconPlatformItemModifier>(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, _ContainerValueWritingModifier<LabelItemRole?>>, AccessibilityAttachmentModifier>, DisableDeferredAccessibilityAttachmentModifier>, type metadata accessor for ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, _ContainerValueWritingModifier<LabelItemRole?>>, AccessibilityAttachmentModifier>);
    type metadata accessor for _BackgroundModifier<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>, _HiddenModifier>, _PreferenceTransformModifier<AccessibilityAttachment.Key>>>();
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, _ContainerValueWritingModifier<LabelItemRole?>>, AccessibilityAttachmentModifier>, DisableDeferredAccessibilityAttachmentModifier>, _BackgroundModifier<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>, _HiddenModifier>, _PreferenceTransformModifier<AccessibilityAttachment.Key>>>>);
    }
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, _ContainerValueWritingModifier<LabelItemRole?>>, AccessibilityAttachmentModifier>(uint64_t a1)
{
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>(uint64_t a1)
{
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, _ContainerValueWritingModifier<LabelItemRole?>>, AccessibilityAttachmentModifier>, DisableDeferredAccessibilityAttachmentModifier>, _BackgroundModifier<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>, _HiddenModifier>, _PreferenceTransformModifier<AccessibilityAttachment.Key>>>>, AccessibilityAttachmentModifier>, DetachDeferredAccessibilityAttachmentModifier>, EnableDeferredAccessibilityAttachmentModifier>, ViewInputFlagModifier<AccessibilityShowsLabelIcon>>, LabelIconPlatformItemModifier>(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = type metadata accessor for ModifiedContent();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>)
  {
    type metadata accessor for ModifiedContent<LabelStyleConfiguration.Title, DetachedGeometryModifier>(255, &lazy cache variable for type metadata for ModifiedContent<LabelStyleConfiguration.Title, DetachedGeometryModifier>, (uint64_t)&type metadata for LabelStyleConfiguration.Title, (uint64_t)&type metadata for DetachedGeometryModifier, MEMORY[0x1E4F3FBA0]);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>);
    }
  }
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>, _HiddenModifier>, _PreferenceTransformModifier<AccessibilityAttachment.Key>> and conformance <> ModifiedContent<A, B>(unint64_t *a1, void (*a2)(uint64_t), void (*a3)(void), void (*a4)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    a3();
    a4();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, _ContainerValueWritingModifier<LabelItemRole?>>, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>(unint64_t *a1, void (*a2)(uint64_t), void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    a3();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, _ContainerValueWritingModifier<LabelItemRole?>>, AccessibilityAttachmentModifier>, DisableDeferredAccessibilityAttachmentModifier>, _BackgroundModifier<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>, _HiddenModifier>, _PreferenceTransformModifier<AccessibilityAttachment.Key>>>>, AccessibilityAttachmentModifier>, DetachDeferredAccessibilityAttachmentModifier>, EnableDeferredAccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, _ContainerValueWritingModifier<LabelItemRole?>>, AccessibilityAttachmentModifier>, DisableDeferredAccessibilityAttachmentModifier>, _BackgroundModifier<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>, _HiddenModifier>, _PreferenceTransformModifier<AccessibilityAttachment.Key>>>>, AccessibilityAttachmentModifier>, DetachDeferredAccessibilityAttachmentModifier>, EnableDeferredAccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, _ContainerValueWritingModifier<LabelItemRole?>>, AccessibilityAttachmentModifier>, DisableDeferredAccessibilityAttachmentModifier>, _BackgroundModifier<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>, _HiddenModifier>, _PreferenceTransformModifier<AccessibilityAttachment.Key>>>>, AccessibilityAttachmentModifier>, DetachDeferredAccessibilityAttachmentModifier>, EnableDeferredAccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, _ContainerValueWritingModifier<LabelItemRole?>>, AccessibilityAttachmentModifier>, DisableDeferredAccessibilityAttachmentModifier>, _BackgroundModifier<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>, _HiddenModifier>, _PreferenceTransformModifier<AccessibilityAttachment.Key>>>>, AccessibilityAttachmentModifier>, DetachDeferredAccessibilityAttachmentModifier>, EnableDeferredAccessibilityAttachmentModifier>, ViewInputFlagModifier<AccessibilityShowsLabelIcon>>, LabelIconPlatformItemModifier>(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, _ContainerValueWritingModifier<LabelItemRole?>>, AccessibilityAttachmentModifier>, DisableDeferredAccessibilityAttachmentModifier>, _BackgroundModifier<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>, _HiddenModifier>, _PreferenceTransformModifier<AccessibilityAttachment.Key>>>>, AccessibilityAttachmentModifier>, DetachDeferredAccessibilityAttachmentModifier>, EnableDeferredAccessibilityAttachmentModifier>, type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, _ContainerValueWritingModifier<LabelItemRole?>>, AccessibilityAttachmentModifier>, DisableDeferredAccessibilityAttachmentModifier>, _BackgroundModifier<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>, _HiddenModifier>, _PreferenceTransformModifier<AccessibilityAttachment.Key>>>>, AccessibilityAttachmentModifier>, DetachDeferredAccessibilityAttachmentModifier>);
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, _ContainerValueWritingModifier<LabelItemRole?>>, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, _ContainerValueWritingModifier<LabelItemRole?>>, AccessibilityAttachmentModifier>, DisableDeferredAccessibilityAttachmentModifier>, _BackgroundModifier<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>, _HiddenModifier>, _PreferenceTransformModifier<AccessibilityAttachment.Key>>>>, AccessibilityAttachmentModifier>, DetachDeferredAccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>, type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, _ContainerValueWritingModifier<LabelItemRole?>>, AccessibilityAttachmentModifier>, DisableDeferredAccessibilityAttachmentModifier>, _BackgroundModifier<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>, _HiddenModifier>, _PreferenceTransformModifier<AccessibilityAttachment.Key>>>>, AccessibilityAttachmentModifier>, DetachDeferredAccessibilityAttachmentModifier>, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, _ContainerValueWritingModifier<LabelItemRole?>>, AccessibilityAttachmentModifier>, DisableDeferredAccessibilityAttachmentModifier>, _BackgroundModifier<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>, _HiddenModifier>, _PreferenceTransformModifier<AccessibilityAttachment.Key>>>>, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, _ContainerValueWritingModifier<LabelItemRole?>>, AccessibilityAttachmentModifier>, DisableDeferredAccessibilityAttachmentModifier>, _BackgroundModifier<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>, _HiddenModifier>, _PreferenceTransformModifier<AccessibilityAttachment.Key>>>>, AccessibilityAttachmentModifier>, DetachDeferredAccessibilityAttachmentModifier>, EnableDeferredAccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, _ContainerValueWritingModifier<LabelItemRole?>>, AccessibilityAttachmentModifier>, DisableDeferredAccessibilityAttachmentModifier>, _BackgroundModifier<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>, _HiddenModifier>, _PreferenceTransformModifier<AccessibilityAttachment.Key>>>>, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, _ContainerValueWritingModifier<LabelItemRole?>>, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, _ContainerValueWritingModifier<LabelItemRole?>>, AccessibilityAttachmentModifier>, DisableDeferredAccessibilityAttachmentModifier>, _BackgroundModifier<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>, _HiddenModifier>, _PreferenceTransformModifier<AccessibilityAttachment.Key>>>>, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>, type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, _ContainerValueWritingModifier<LabelItemRole?>>, AccessibilityAttachmentModifier>, DisableDeferredAccessibilityAttachmentModifier>, _BackgroundModifier<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>, _HiddenModifier>, _PreferenceTransformModifier<AccessibilityAttachment.Key>>>>, AccessibilityAttachmentModifier>, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, _ContainerValueWritingModifier<LabelItemRole?>>, AccessibilityAttachmentModifier>, DisableDeferredAccessibilityAttachmentModifier>, _BackgroundModifier<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>, _HiddenModifier>, _PreferenceTransformModifier<AccessibilityAttachment.Key>>>> and conformance <> ModifiedContent<A, B>);
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, _ContainerValueWritingModifier<LabelItemRole?>>, AccessibilityAttachmentModifier>, DisableDeferredAccessibilityAttachmentModifier>, _BackgroundModifier<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>, _HiddenModifier>, _PreferenceTransformModifier<AccessibilityAttachment.Key>>>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, _ContainerValueWritingModifier<LabelItemRole?>>, AccessibilityAttachmentModifier>, DisableDeferredAccessibilityAttachmentModifier>, _BackgroundModifier<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>, _HiddenModifier>, _PreferenceTransformModifier<AccessibilityAttachment.Key>>>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, _ContainerValueWritingModifier<LabelItemRole?>>, AccessibilityAttachmentModifier>, DisableDeferredAccessibilityAttachmentModifier>, _BackgroundModifier<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>, _HiddenModifier>, _PreferenceTransformModifier<AccessibilityAttachment.Key>>>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, _ContainerValueWritingModifier<LabelItemRole?>>, AccessibilityAttachmentModifier>, DisableDeferredAccessibilityAttachmentModifier>, _BackgroundModifier<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>, _HiddenModifier>, _PreferenceTransformModifier<AccessibilityAttachment.Key>>>>();
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, _ContainerValueWritingModifier<LabelItemRole?>>, AccessibilityAttachmentModifier>, DisableDeferredAccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>();
    lazy protocol witness table accessor for type _BackgroundModifier<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>, _HiddenModifier>, _PreferenceTransformModifier<AccessibilityAttachment.Key>>> and conformance _BackgroundModifier<A>(&lazy protocol witness table cache variable for type _BackgroundModifier<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>, _HiddenModifier>, _PreferenceTransformModifier<AccessibilityAttachment.Key>>> and conformance _BackgroundModifier<A>, (void (*)(uint64_t))type metadata accessor for _BackgroundModifier<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>, _HiddenModifier>, _PreferenceTransformModifier<AccessibilityAttachment.Key>>>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, _ContainerValueWritingModifier<LabelItemRole?>>, AccessibilityAttachmentModifier>, DisableDeferredAccessibilityAttachmentModifier>, _BackgroundModifier<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>, _HiddenModifier>, _PreferenceTransformModifier<AccessibilityAttachment.Key>>>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, _ContainerValueWritingModifier<LabelItemRole?>>, AccessibilityAttachmentModifier>, DisableDeferredAccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, _ContainerValueWritingModifier<LabelItemRole?>>, AccessibilityAttachmentModifier>, DisableDeferredAccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, _ContainerValueWritingModifier<LabelItemRole?>>, AccessibilityAttachmentModifier>, DisableDeferredAccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, _ContainerValueWritingModifier<LabelItemRole?>>, AccessibilityAttachmentModifier>, DisableDeferredAccessibilityAttachmentModifier>, _BackgroundModifier<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>, _HiddenModifier>, _PreferenceTransformModifier<AccessibilityAttachment.Key>>>>, AccessibilityAttachmentModifier>, DetachDeferredAccessibilityAttachmentModifier>, EnableDeferredAccessibilityAttachmentModifier>, ViewInputFlagModifier<AccessibilityShowsLabelIcon>>, LabelIconPlatformItemModifier>(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, _ContainerValueWritingModifier<LabelItemRole?>>, AccessibilityAttachmentModifier>, DisableDeferredAccessibilityAttachmentModifier>, type metadata accessor for ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, _ContainerValueWritingModifier<LabelItemRole?>>, AccessibilityAttachmentModifier>);
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, _ContainerValueWritingModifier<LabelItemRole?>>, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, _ContainerValueWritingModifier<LabelItemRole?>>, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>, type metadata accessor for ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, _ContainerValueWritingModifier<LabelItemRole?>>, AccessibilityAttachmentModifier>, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<LabelStyleConfiguration.Icon, _ContainerValueWritingModifier<LabelItemRole?>> and conformance <> ModifiedContent<A, B>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, _ContainerValueWritingModifier<LabelItemRole?>>, AccessibilityAttachmentModifier>, DisableDeferredAccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<LabelStyleConfiguration.Icon, _ContainerValueWritingModifier<LabelItemRole?>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<LabelStyleConfiguration.Icon, _ContainerValueWritingModifier<LabelItemRole?>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<LabelStyleConfiguration.Icon, _ContainerValueWritingModifier<LabelItemRole?>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<LabelStyleConfiguration.Icon, _ContainerValueWritingModifier<LabelItemRole?>>();
    lazy protocol witness table accessor for type _BackgroundModifier<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>, _HiddenModifier>, _PreferenceTransformModifier<AccessibilityAttachment.Key>>> and conformance _BackgroundModifier<A>((unint64_t *)&lazy protocol witness table cache variable for type _ContainerValueWritingModifier<LabelItemRole?> and conformance _ContainerValueWritingModifier<A>, (void (*)(uint64_t))type metadata accessor for _ContainerValueWritingModifier<LabelItemRole?>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<LabelStyleConfiguration.Icon, _ContainerValueWritingModifier<LabelItemRole?>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type _BackgroundModifier<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>, _HiddenModifier>, _PreferenceTransformModifier<AccessibilityAttachment.Key>>> and conformance _BackgroundModifier<A>(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

_UNKNOWN **base witness table accessor for ViewModifier in LabelIconPlatformItemModifier()
{
  return &protocol witness table for LabelIconPlatformItemModifier;
}

unint64_t instantiation function for generic protocol witness table for LabelIconPlatformItemModifier(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type LabelIconPlatformItemModifier and conformance LabelIconPlatformItemModifier();
  *(void *)(a1 + 8) = result;
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table accessor for type LabelIconPlatformItemModifier and conformance LabelIconPlatformItemModifier();
  *(void *)(a1 + 8) = result;
  return result;
}

void NavigationViewStyle._columnBasedBody(configuration:)()
{
}

{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void protocol witness for View.body.getter in conformance _NavigationViewStyleConfiguration.Content()
{
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance ResolvedNavigationViewStyle(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = lazy protocol witness table accessor for type ResolvedNavigationViewStyle and conformance ResolvedNavigationViewStyle();

  return MEMORY[0x1F40FDF90](a1, a2, a3, v6);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance ResolvedNavigationViewStyle(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = lazy protocol witness table accessor for type ResolvedNavigationViewStyle and conformance ResolvedNavigationViewStyle();

  return MEMORY[0x1F40FDF98](a1, a2, a3, v6);
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance ResolvedNavigationViewStyle()
{
  return static StyleableView._viewListCount(inputs:)();
}

uint64_t View.navigationViewStyle<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = *(void *)(a3 - 8);
  MEMORY[0x1F4188790](a1);
  unint64_t v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for NavigationViewStyleModifier();
  uint64_t v12 = *(void *)(v11 - 8);
  double v13 = MEMORY[0x1F4188790](v11);
  int64_t v15 = (char *)&v17 - v14;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v8 + 16))(v10, a1, a3, v13);
  (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v15, v10, a3);
  MEMORY[0x18C113660](v15, a2, v11, a4);
  return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v15, v11);
}

uint64_t type metadata accessor for NavigationViewStyleModifier()
{
  return __swift_instantiateGenericMetadata();
}

unint64_t instantiation function for generic protocol witness table for _NavigationViewStyleConfiguration.Content(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type _NavigationViewStyleConfiguration.Content and conformance _NavigationViewStyleConfiguration.Content();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type _NavigationViewStyleConfiguration.Content and conformance _NavigationViewStyleConfiguration.Content()
{
  unint64_t result = lazy protocol witness table cache variable for type _NavigationViewStyleConfiguration.Content and conformance _NavigationViewStyleConfiguration.Content;
  if (!lazy protocol witness table cache variable for type _NavigationViewStyleConfiguration.Content and conformance _NavigationViewStyleConfiguration.Content)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _NavigationViewStyleConfiguration.Content and conformance _NavigationViewStyleConfiguration.Content);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type _NavigationViewStyleConfiguration.Content and conformance _NavigationViewStyleConfiguration.Content;
  if (!lazy protocol witness table cache variable for type _NavigationViewStyleConfiguration.Content and conformance _NavigationViewStyleConfiguration.Content)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _NavigationViewStyleConfiguration.Content and conformance _NavigationViewStyleConfiguration.Content);
  }
  return result;
}

_UNKNOWN **base witness table accessor for View in _NavigationViewStyleConfiguration.Content()
{
  return &protocol witness table for _NavigationViewStyleConfiguration.Content;
}

uint64_t default associated conformance accessor for NavigationViewStyle.NavigationViewStyle._Body2: View()
{
  return MEMORY[0x1E4F417F0];
}

uint64_t dispatch thunk of NavigationViewStyle._body(configuration:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 40))();
}

uint64_t dispatch thunk of NavigationViewStyle._columnBasedBody(configuration:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 48))();
}

ValueMetadata *type metadata accessor for _NavigationViewStyleConfiguration()
{
  return &type metadata for _NavigationViewStyleConfiguration;
}

ValueMetadata *type metadata accessor for _NavigationViewStyleConfiguration.Content()
{
  return &type metadata for _NavigationViewStyleConfiguration.Content;
}

uint64_t sub_187BDCA94()
{
  return swift_getWitnessTable();
}

uint64_t getEnumTagSinglePayload for NavigationViewStyleModifier(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (!a2) {
    return 0;
  }
  unsigned int v7 = a2 - v5;
  if (a2 <= v5) {
    goto LABEL_19;
  }
  char v8 = 8 * v6;
  if (v6 <= 3)
  {
    unsigned int v10 = ((v7 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      int v9 = *(_DWORD *)((char *)a1 + v6);
      if (!v9) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      int v9 = *(unsigned __int16 *)((char *)a1 + v6);
      if (!*(unsigned __int16 *)((char *)a1 + v6)) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_19:
      if (v5) {
        return (*(uint64_t (**)(void))(v4 + 48))();
      }
      return 0;
    }
  }
  int v9 = *((unsigned __int8 *)a1 + v6);
  if (!*((unsigned char *)a1 + v6)) {
    goto LABEL_19;
  }
LABEL_11:
  int v11 = (v9 - 1) << v8;
  if (v6 > 3) {
    int v11 = 0;
  }
  if (v6)
  {
    if (v6 > 3) {
      LODWORD(v6) = 4;
    }
    switch((int)v6)
    {
      case 2:
        LODWORD(v6) = *a1;
        break;
      case 3:
        LODWORD(v6) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v6) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v6) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v5 + (v6 | v11) + 1;
}

void storeEnumTagSinglePayload for NavigationViewStyleModifier(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = *(void *)(v6 + 64);
  BOOL v9 = a3 >= v7;
  unsigned int v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      unsigned int v14 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v14))
      {
        int v11 = 4;
      }
      else if (v14 >= 0x100)
      {
        int v11 = 2;
      }
      else
      {
        int v11 = v14 > 1;
      }
    }
    else
    {
      int v11 = 1;
    }
  }
  else
  {
    int v11 = 0;
  }
  if (v7 < a2)
  {
    unsigned int v12 = ~v7 + a2;
    if (v8 < 4)
    {
      int v13 = (v12 >> (8 * v8)) + 1;
      if (v8)
      {
        int v15 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if (v8 == 3)
        {
          *(_WORD *)a1 = v15;
          a1[2] = BYTE2(v15);
        }
        else if (v8 == 2)
        {
          *(_WORD *)a1 = v15;
        }
        else
        {
          *a1 = v15;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v12;
      int v13 = 1;
    }
    switch(v11)
    {
      case 1:
        a1[v8] = v13;
        return;
      case 2:
        *(_WORD *)&a1[v8] = v13;
        return;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v8] = v13;
        return;
      default:
        return;
    }
  }
  switch(v11)
  {
    case 1:
      a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 2:
      *(_WORD *)&a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 3:
LABEL_34:
      __break(1u);
      JUMPOUT(0x187BDCE78);
    case 4:
      *(_DWORD *)&a1[v8] = 0;
      goto LABEL_20;
    default:
LABEL_20:
      if (a2)
      {
LABEL_21:
        uint64_t v16 = *(void (**)(void))(v6 + 56);
        v16();
      }
      return;
  }
}

_UNKNOWN **base witness table accessor for ViewModifier in NavigationViewStyleModifier<A>()
{
  return &protocol witness table for NavigationViewStyleModifier<A>;
}

uint64_t base witness table accessor for MultiViewModifier in NavigationViewStyleModifier<A>()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for PrimitiveViewModifier in NavigationViewStyleModifier<A>()
{
  return swift_getWitnessTable();
}

uint64_t associated type witness table accessor for StyleModifier.StyleBody : View in NavigationViewStyleModifier<A>()
{
  return swift_getAssociatedConformanceWitness();
}

uint64_t NavigationViewStyleModifier.styleBody(configuration:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 24);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v4 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v8 = MEMORY[0x1F4188790](v7);
  unsigned int v10 = (char *)&v13 - v9;
  (*(void (**)(double))(v2 + 40))(v8);
  swift_getAssociatedConformanceWitness();
  static ViewBuilder.buildExpression<A>(_:)(v6);
  int v11 = *(void (**)(char *, uint64_t))(v4 + 8);
  v11(v6, AssociatedTypeWitness);
  static ViewBuilder.buildExpression<A>(_:)(v10);
  return ((uint64_t (*)(char *, uint64_t))v11)(v10, AssociatedTypeWitness);
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance NavigationViewStyleModifier<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F40FDF88](a1, a2, a3, a4, a5, WitnessTable);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance NavigationViewStyleModifier<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F40FDF78](a1, a2, a3, a4, a5, WitnessTable);
}

uint64_t protocol witness for static ViewModifier._viewListCount(inputs:body:) in conformance NavigationViewStyleModifier<A>()
{
  return static StyleModifier._viewListCount(inputs:body:)();
}

ValueMetadata *type metadata accessor for ResolvedNavigationViewStyle()
{
  return &type metadata for ResolvedNavigationViewStyle;
}

unint64_t lazy protocol witness table accessor for type ResolvedNavigationViewStyle and conformance ResolvedNavigationViewStyle()
{
  unint64_t result = lazy protocol witness table cache variable for type ResolvedNavigationViewStyle and conformance ResolvedNavigationViewStyle;
  if (!lazy protocol witness table cache variable for type ResolvedNavigationViewStyle and conformance ResolvedNavigationViewStyle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ResolvedNavigationViewStyle and conformance ResolvedNavigationViewStyle);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ResolvedNavigationViewStyle and conformance ResolvedNavigationViewStyle;
  if (!lazy protocol witness table cache variable for type ResolvedNavigationViewStyle and conformance ResolvedNavigationViewStyle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ResolvedNavigationViewStyle and conformance ResolvedNavigationViewStyle);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type NavigationViewStyleModifier<DefaultNavigationViewStyle> and conformance NavigationViewStyleModifier<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type NavigationViewStyleModifier<DefaultNavigationViewStyle> and conformance NavigationViewStyleModifier<A>;
  if (!lazy protocol witness table cache variable for type NavigationViewStyleModifier<DefaultNavigationViewStyle> and conformance NavigationViewStyleModifier<A>)
  {
    type metadata accessor for NavigationViewStyleModifier<DefaultNavigationViewStyle>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NavigationViewStyleModifier<DefaultNavigationViewStyle> and conformance NavigationViewStyleModifier<A>);
  }
  return result;
}

void type metadata accessor for NavigationViewStyleModifier<DefaultNavigationViewStyle>()
{
  if (!lazy cache variable for type metadata for NavigationViewStyleModifier<DefaultNavigationViewStyle>)
  {
    lazy protocol witness table accessor for type DefaultNavigationViewStyle and conformance DefaultNavigationViewStyle();
    unint64_t v0 = type metadata accessor for NavigationViewStyleModifier();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for NavigationViewStyleModifier<DefaultNavigationViewStyle>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type DefaultNavigationViewStyle and conformance DefaultNavigationViewStyle()
{
  unint64_t result = lazy protocol witness table cache variable for type DefaultNavigationViewStyle and conformance DefaultNavigationViewStyle;
  if (!lazy protocol witness table cache variable for type DefaultNavigationViewStyle and conformance DefaultNavigationViewStyle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DefaultNavigationViewStyle and conformance DefaultNavigationViewStyle);
  }
  return result;
}

uint64_t associated type witness table accessor for View.Body : View in ResolvedNavigationViewStyle()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t getEnumTagSinglePayload for _CustomViewModifierHoverEffect(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (!a2) {
    return 0;
  }
  unsigned int v7 = a2 - v5;
  if (a2 <= v5) {
    goto LABEL_19;
  }
  char v8 = 8 * v6;
  if (v6 <= 3)
  {
    unsigned int v10 = ((v7 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      int v9 = *(_DWORD *)((char *)a1 + v6);
      if (!v9) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      int v9 = *(unsigned __int16 *)((char *)a1 + v6);
      if (!*(unsigned __int16 *)((char *)a1 + v6)) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_19:
      if (v5) {
        return (*(uint64_t (**)(void))(v4 + 48))();
      }
      return 0;
    }
  }
  int v9 = *((unsigned __int8 *)a1 + v6);
  if (!*((unsigned char *)a1 + v6)) {
    goto LABEL_19;
  }
LABEL_11:
  int v11 = (v9 - 1) << v8;
  if (v6 > 3) {
    int v11 = 0;
  }
  if (v6)
  {
    if (v6 > 3) {
      LODWORD(v6) = 4;
    }
    switch((int)v6)
    {
      case 2:
        LODWORD(v6) = *a1;
        break;
      case 3:
        LODWORD(v6) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v6) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v6) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v5 + (v6 | v11) + 1;
}

void storeEnumTagSinglePayload for _CustomViewModifierHoverEffect(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = *(void *)(v6 + 64);
  BOOL v9 = a3 >= v7;
  unsigned int v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      unsigned int v14 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v14))
      {
        int v11 = 4;
      }
      else if (v14 >= 0x100)
      {
        int v11 = 2;
      }
      else
      {
        int v11 = v14 > 1;
      }
    }
    else
    {
      int v11 = 1;
    }
  }
  else
  {
    int v11 = 0;
  }
  if (v7 < a2)
  {
    unsigned int v12 = ~v7 + a2;
    if (v8 < 4)
    {
      int v13 = (v12 >> (8 * v8)) + 1;
      if (v8)
      {
        int v15 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if (v8 == 3)
        {
          *(_WORD *)a1 = v15;
          a1[2] = BYTE2(v15);
        }
        else if (v8 == 2)
        {
          *(_WORD *)a1 = v15;
        }
        else
        {
          *a1 = v15;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v12;
      int v13 = 1;
    }
    switch(v11)
    {
      case 1:
        a1[v8] = v13;
        return;
      case 2:
        *(_WORD *)&a1[v8] = v13;
        return;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v8] = v13;
        return;
      default:
        return;
    }
  }
  switch(v11)
  {
    case 1:
      a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 2:
      *(_WORD *)&a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 3:
LABEL_34:
      __break(1u);
      JUMPOUT(0x187BDD7BCLL);
    case 4:
      *(_DWORD *)&a1[v8] = 0;
      goto LABEL_20;
    default:
LABEL_20:
      if (a2)
      {
LABEL_21:
        uint64_t v16 = *(void (**)(void))(v6 + 56);
        v16();
      }
      return;
  }
}

uint64_t base witness table accessor for CustomHoverEffect in _CustomViewModifierHoverEffect<A>()
{
  return swift_getWitnessTable();
}

uint64_t associated type witness table accessor for InternalCustomHoverEffect.WrappedEffectType : InternalCustomHoverEffect in _CustomViewModifierHoverEffect<A>()
{
  return swift_getWitnessTable();
}

void _CustomViewModifierHoverEffect.systemHoverEffect.getter(_WORD *a1@<X8>)
{
  *a1 = 259;
}

void protocol witness for CustomHoverEffect.body(content:) in conformance _CustomViewModifierHoverEffect<A>()
{
}

uint64_t protocol witness for InternalCustomHoverEffect.wrappedEffect.getter in conformance _CustomViewModifierHoverEffect<A>()
{
  return MEMORY[0x1F4100280]();
}

uint64_t sub_187BDD844()
{
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();

  return swift_deallocObject();
}

void specialized CustomHoverEffect.bodyError()()
{
  _StringGuts.grow(_:)(34);
  swift_bridgeObjectRelease();
  v0._countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  v1._countAndFlagsBits = 46;
  v1._object = (void *)0xE100000000000000;
  String.append(_:)(v1);
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void specialized CustomHoverEffect<>.body(content:)()
{
}

uint64_t one-time initialization function for clarityUIContentBackground()
{
  if (one-time initialization token for clarityUIContentBackground != -1) {
    swift_once();
  }
  Swift::String v0 = (void *)static UIColor.clarityUIContentBackground;
  type metadata accessor for UIColor();
  lazy protocol witness table accessor for type UIColor and conformance UIColor();
  id v1 = v0;
  uint64_t result = Color.init<A>(provider:)();
  static Color.clarityUIContentBackground = result;
  return result;
}

{
  id v0;
  void *v1;
  id v2;
  uint64_t result;
  void v4[6];

  Swift::String v0 = objc_allocWithZone(MEMORY[0x1E4FB1618]);
  v4[4] = closure #1 in variable initialization expression of static UIColor.clarityUIContentBackground;
  v4[5] = 0;
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 1107296256;
  void v4[2] = thunk for @escaping @callee_guaranteed (@guaranteed UIAccessibilityCustomRotorSearchPredicate) -> (@owned UIAccessibilityCustomRotorItemResult?);
  unsigned char v4[3] = &block_descriptor_3_0;
  id v1 = _Block_copy(v4);
  uint64_t v2 = objc_msgSend(v0, sel_initWithDynamicProvider_, v1);
  _Block_release(v1);
  uint64_t result = swift_release();
  static UIColor.clarityUIContentBackground = (uint64_t)v2;
  return result;
}

uint64_t static Color.clarityUIContentBackground.getter()
{
  return static Color.clarityUIContentBackground.getter(&one-time initialization token for clarityUIContentBackground);
}

uint64_t static Color.clarityUIButtonBackground.getter()
{
  id v0 = objc_allocWithZone(MEMORY[0x1E4FB1618]);
  v5[4] = closure #1 in static Color.clarityUIButtonBackground.getter;
  v5[5] = 0;
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 1107296256;
  v5[2] = thunk for @escaping @callee_guaranteed (@guaranteed UIAccessibilityCustomRotorSearchPredicate) -> (@owned UIAccessibilityCustomRotorItemResult?);
  long long v5[3] = &block_descriptor_29;
  id v1 = _Block_copy(v5);
  id v2 = objc_msgSend(v0, sel_initWithDynamicProvider_, v1);
  _Block_release(v1);
  swift_release();
  v5[0] = v2;
  type metadata accessor for UIColor();
  lazy protocol witness table accessor for type UIColor and conformance UIColor();
  Color.init<A>(provider:)();
  uint64_t v3 = Color.opacity(_:)();
  swift_release();
  return v3;
}

id closure #1 in static Color.clarityUIButtonBackground.getter(void *a1)
{
  return closure #1 in static Color.clarityUIButtonBackground.getter(a1, (SEL *)&selRef_systemGray5Color, (SEL *)&selRef_systemBackgroundColor);
}

uint64_t one-time initialization function for clarityUIPressedButtonOverlay(uint64_t a1)
{
  return one-time initialization function for clarityUIPressedButtonOverlay(a1, &static Color.clarityUIPressedButtonOverlay);
}

uint64_t static Color.clarityUIPressedButtonOverlay.getter()
{
  return static Color.clarityUIContentBackground.getter(&one-time initialization token for clarityUIPressedButtonOverlay);
}

uint64_t one-time initialization function for clarityUIButtonShadowColor(uint64_t a1)
{
  return one-time initialization function for clarityUIPressedButtonOverlay(a1, &static Color.clarityUIButtonShadowColor);
}

uint64_t static Color.clarityUIButtonShadowColor.getter()
{
  return static Color.clarityUIContentBackground.getter(&one-time initialization token for clarityUIButtonShadowColor);
}

uint64_t static Color.clarityUIContentBackground.getter(void *a1)
{
  if (*a1 != -1) {
    swift_once();
  }

  return swift_retain();
}

uint64_t one-time initialization function for clarityUINavigationAppIconShadow(uint64_t a1)
{
  return one-time initialization function for clarityUIPressedButtonOverlay(a1, &static Color.clarityUINavigationAppIconShadow);
}

uint64_t one-time initialization function for clarityUIBarShadowColor(uint64_t a1)
{
  return one-time initialization function for clarityUIPressedButtonOverlay(a1, &static Color.clarityUIBarShadowColor);
}

uint64_t one-time initialization function for clarityUIPressedButtonOverlay(uint64_t a1, uint64_t *a2)
{
  static Color.black.getter();
  uint64_t v3 = Color.opacity(_:)();
  uint64_t result = swift_release();
  *a2 = v3;
  return result;
}

id closure #1 in variable initialization expression of static UIColor.clarityUIContentBackground(void *a1)
{
  return closure #1 in static Color.clarityUIButtonBackground.getter(a1, (SEL *)&selRef_systemBackgroundColor, (SEL *)&selRef_systemGroupedBackgroundColor);
}

id closure #1 in static Color.clarityUIButtonBackground.getter(void *a1, SEL *a2, SEL *a3)
{
  id v5 = objc_msgSend(a1, sel_userInterfaceStyle);
  uint64_t v6 = self;
  if (v5 == (id)2) {
    unsigned int v7 = a2;
  }
  else {
    unsigned int v7 = a3;
  }
  id v8 = [v6 *v7];

  return v8;
}

id static UIColor.clarityUIContentBackground.getter()
{
  if (one-time initialization token for clarityUIContentBackground != -1) {
    swift_once();
  }
  id v0 = (void *)static UIColor.clarityUIContentBackground;

  return v0;
}

unint64_t lazy protocol witness table accessor for type UIColor and conformance UIColor()
{
  unint64_t result = lazy protocol witness table cache variable for type UIColor and conformance UIColor;
  if (!lazy protocol witness table cache variable for type UIColor and conformance UIColor)
  {
    type metadata accessor for UIColor();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UIColor and conformance UIColor);
  }
  return result;
}

void *static SceneList.windowGroupConfigMatchingActivationConditions(items:targetContentIdentifier:)@<X0>(void *result@<X0>, uint64_t a2@<X2>, void *a3@<X8>)
{
  if (!a2)
  {
    a3[42] = 0;
    *((_OWORD *)a3 + 19) = 0u;
    *((_OWORD *)a3 + 20) = 0u;
    *((_OWORD *)a3 + 17) = 0u;
    *((_OWORD *)a3 + 18) = 0u;
    *((_OWORD *)a3 + 15) = 0u;
    *((_OWORD *)a3 + 16) = 0u;
    *((_OWORD *)a3 + 13) = 0u;
    *((_OWORD *)a3 + 14) = 0u;
    *((_OWORD *)a3 + 11) = 0u;
    *((_OWORD *)a3 + 12) = 0u;
    *((_OWORD *)a3 + 9) = 0u;
    *((_OWORD *)a3 + 10) = 0u;
    *((_OWORD *)a3 + 7) = 0u;
    *((_OWORD *)a3 + 8) = 0u;
    *((_OWORD *)a3 + 5) = 0u;
    *((_OWORD *)a3 + 6) = 0u;
    *((_OWORD *)a3 + 3) = 0u;
    *((_OWORD *)a3 + 4) = 0u;
    *((_OWORD *)a3 + 1) = 0u;
    *((_OWORD *)a3 + 2) = 0u;
    *(_OWORD *)a3 = 0u;
    return result;
  }
  uint64_t v3 = result[2];
  if (v3)
  {
    uint64_t v4 = (uint64_t)(result + 4);
    swift_bridgeObjectRetain();
    uint64_t v5 = v3;
    while (1)
    {
      outlined init with copy of SceneList.Item(v4, (uint64_t)__src);
      outlined init with copy of SceneList.Item.Value((uint64_t)__src, (uint64_t)&v30);
      if (v38)
      {
        outlined destroy of SceneList.Item.Value((uint64_t)&v30);
      }
      else
      {
        uint64_t v6 = v31;
        uint64_t v8 = v32;
        uint64_t v7 = v33;
        uint64_t v9 = v34;
        uint64_t v10 = v36;
        uint64_t v11 = __src[25];
        if (__src[25])
        {
          uint64_t v26 = v30;
          uint64_t v27 = v31;
          uint64_t v28 = v32;
          uint64_t v12 = v37;
          uint64_t v25 = v35;
          swift_bridgeObjectRetain();
          char v13 = specialized Sequence.contains(where:)(v11);
          swift_bridgeObjectRelease();
          if (v13)
          {
            swift_bridgeObjectRelease();
            memcpy(__dst, __src, 0x118uLL);
            memcpy(v41, __dst, 0x118uLL);
            unint64_t result = memcpy(a3, v41, 0x118uLL);
            a3[35] = v26;
            a3[36] = v27;
            a3[37] = v28;
            a3[38] = v7;
            a3[39] = v9;
            a3[40] = v25;
            a3[41] = v10;
            a3[42] = v12;
            return result;
          }
          swift_release();
          outlined consume of Text?(v27, v28, v7, v9);
          uint64_t v14 = v10;
        }
        else
        {
          swift_release();
          outlined consume of Text?(v6, v8, v7, v9);
          uint64_t v14 = v10;
        }
        outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v14);
      }
      outlined destroy of SceneList.Item((uint64_t)__src);
      v4 += 280;
      if (!--v5)
      {
        swift_bridgeObjectRelease();
        break;
      }
    }
  }
  uint64_t v45 = 0;
  long long v44 = 0u;
  long long v43 = 0u;
  long long v42 = 0u;
  memset(v41, 0, sizeof(v41));
  if (v3)
  {
    int v15 = (void *)(swift_bridgeObjectRetain() + 232);
    do
    {
      outlined init with copy of (SceneList.Item, WindowSceneConfiguration<WindowGroupConfigurationAttributes>)?((uint64_t)v41, (uint64_t)__dst);
      uint64_t v16 = __dst[33];
      outlined destroy of (SceneList.Item, WindowSceneConfiguration<WindowGroupConfigurationAttributes>)?((uint64_t)__dst);
      if (!v16)
      {
        outlined init with copy of SceneList.Item.Value((uint64_t)(v15 - 25), (uint64_t)__dst);
        if (LOBYTE(__dst[16]))
        {
          outlined destroy of SceneList.Item.Value((uint64_t)__dst);
        }
        else
        {
          uint64_t v17 = __dst[0];
          uint64_t v18 = __dst[1];
          uint64_t v19 = __dst[2];
          uint64_t v20 = __dst[3];
          uint64_t v21 = __dst[4];
          uint64_t v22 = __dst[6];
          uint64_t v23 = __dst[7];
          if (*v15)
          {
            swift_release();
            outlined consume of Text?(v18, v19, v20, v21);
            outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v22);
          }
          else
          {
            uint64_t v29 = __dst[5];
            outlined destroy of (SceneList.Item, WindowSceneConfiguration<WindowGroupConfigurationAttributes>)?((uint64_t)v41);
            outlined init with copy of SceneList.Item((uint64_t)(v15 - 25), (uint64_t)v41);
            *((void *)&v41[17] + 1) = v17;
            *(void *)&long long v42 = v18;
            *((void *)&v42 + 1) = v19;
            *(void *)&long long v43 = v20;
            *((void *)&v43 + 1) = v21;
            *(void *)&long long v44 = v29;
            *((void *)&v44 + 1) = v22;
            uint64_t v45 = v23;
          }
        }
      }
      v15 += 35;
      --v3;
    }
    while (v3);
    swift_bridgeObjectRelease();
  }
  return (void *)outlined init with take of (SceneList.Item, WindowSceneConfiguration<WindowGroupConfigurationAttributes>)?((uint64_t)v41, (uint64_t)a3);
}

uint64_t Scene.handlesExternalEvents(matching:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a1;
  return Scene.modifier<A>(_:)(&v4, a2, &unk_1ED452028, a3);
}

uint64_t sub_187BDE1F0()
{
  return swift_getWitnessTable();
}

void *type metadata accessor for ActivationConditionsModifier()
{
  return &unk_1ED452028;
}

uint64_t static ActivationConditionsModifier._makeScene(modifier:inputs:body:)@<X0>(int *a1@<X0>, uint64_t *a2@<X1>, void (*a3)(uint64_t *__return_ptr)@<X2>, uint64_t a4@<X8>)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  int v5 = *a1;
  int v6 = *((_DWORD *)a2 + 2);
  uint64_t v7 = a2[2];
  int v8 = *((_DWORD *)a2 + 14);
  uint64_t v16 = *a2;
  int v17 = v6;
  uint64_t v18 = v7;
  long long v9 = *(_OWORD *)(a2 + 5);
  long long v19 = *(_OWORD *)(a2 + 3);
  long long v20 = v9;
  int v21 = v8;
  a3(&v14);
  uint64_t v10 = v14;
  int v11 = v15;
  uint64_t v16 = v14;
  int v17 = v15;
  uint64_t result = PreferencesOutputs.subscript.getter();
  if ((result & 0x100000000) == 0)
  {
    int v13 = result;
    LODWORD(v16) = v5;
    type metadata accessor for _GraphValue<ActivationConditionsModifier>();
    type metadata accessor for Set<String>(0, &lazy cache variable for type metadata for Set<String>, MEMORY[0x1E4FBB1A0], MEMORY[0x1E4FBB1B0], MEMORY[0x1E4FBB510]);
    _GraphValue.subscript.getter();
    type metadata accessor for _GraphValue<Set<String>>();
    LODWORD(v16) = _GraphValue.value.getter();
    HIDWORD(v16) = v13;
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    lazy protocol witness table accessor for type ApplyActivationConditions and conformance ApplyActivationConditions();
    Attribute.init<A>(body:value:flags:update:)();
    LOBYTE(v16) = 0;
    uint64_t result = PreferencesOutputs.subscript.setter();
    uint64_t v10 = v14;
    int v11 = v15;
  }
  *(void *)a4 = v10;
  *(_DWORD *)(a4 + 8) = v11;
  return result;
}

void type metadata accessor for _GraphValue<ActivationConditionsModifier>()
{
  if (!lazy cache variable for type metadata for _GraphValue<ActivationConditionsModifier>)
  {
    unint64_t v0 = type metadata accessor for _GraphValue();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _GraphValue<ActivationConditionsModifier>);
    }
  }
}

void type metadata accessor for _GraphValue<Set<String>>()
{
  if (!lazy cache variable for type metadata for _GraphValue<Set<String>>)
  {
    type metadata accessor for Set<String>(255, &lazy cache variable for type metadata for Set<String>, MEMORY[0x1E4FBB1A0], MEMORY[0x1E4FBB1B0], MEMORY[0x1E4FBB510]);
    unint64_t v0 = type metadata accessor for _GraphValue();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _GraphValue<Set<String>>);
    }
  }
}

char *ApplyActivationConditions.value.getter(uint64_t a1)
{
  uint64_t v2 = *(void *)AGGraphGetValue();
  uint64_t v3 = *(void *)(v2 + 16);
  if (!v3) {
    return (char *)MEMORY[0x1E4FBC860];
  }
  uint64_t v4 = v2 + 32;
  swift_bridgeObjectRetain();
  int v5 = (char *)MEMORY[0x1E4FBC860];
  int v6 = &lazy cache variable for type metadata for Set<String>;
  do
  {
    outlined init with copy of SceneList.Item(v4, (uint64_t)v28);
    outlined init with copy of SceneList.Item.Value((uint64_t)v28, (uint64_t)__src);
    if (LOBYTE(__src[16]) == 6)
    {
      uint64_t v15 = __src[3];
      uint64_t v16 = __src[4];
      char v17 = __src[5];
      uint64_t v18 = __src[6];
      swift_release();
      swift_bridgeObjectRelease();
      outlined consume of Text?(v15, v16, v17, v18);
      goto LABEL_9;
    }
    if (!LOBYTE(__src[16]))
    {
      uint64_t v7 = __src[1];
      int v8 = v5;
      uint64_t v9 = a1;
      uint64_t v10 = v6;
      uint64_t v11 = __src[2];
      char v12 = __src[3];
      uint64_t v13 = __src[4];
      uint64_t v25 = __src[6];
      swift_release();
      char v14 = v12;
      int v6 = v10;
      a1 = v9;
      int v5 = v8;
      outlined consume of Text?(v7, v11, v14, v13);
      outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v25);
LABEL_9:
      outlined init with copy of SceneList.Item((uint64_t)v28, (uint64_t)v27);
      type metadata accessor for Set<String>(0, v6, MEMORY[0x1E4FBB1A0], MEMORY[0x1E4FBB1B0], MEMORY[0x1E4FBB510]);
      uint64_t v19 = *(void *)AGGraphGetValue();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v27[25] = v19;
      outlined init with copy of SceneList.Item((uint64_t)v27, (uint64_t)__src);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        int v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v5 + 2) + 1, 1, v5);
      }
      unint64_t v21 = *((void *)v5 + 2);
      unint64_t v20 = *((void *)v5 + 3);
      if (v21 >= v20 >> 1) {
        int v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v20 > 1), v21 + 1, 1, v5);
      }
      *((void *)v5 + 2) = v21 + 1;
      memcpy(&v5[280 * v21 + 32], __src, 0x118uLL);
      outlined destroy of SceneList.Item((uint64_t)v28);
      outlined destroy of SceneList.Item((uint64_t)v27);
      goto LABEL_4;
    }
    outlined init with copy of SceneList.Item((uint64_t)v28, (uint64_t)v27);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      int v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v5 + 2) + 1, 1, v5);
    }
    unint64_t v23 = *((void *)v5 + 2);
    unint64_t v22 = *((void *)v5 + 3);
    if (v23 >= v22 >> 1) {
      int v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v22 > 1), v23 + 1, 1, v5);
    }
    *((void *)v5 + 2) = v23 + 1;
    memcpy(&v5[280 * v23 + 32], v27, 0x118uLL);
    outlined destroy of SceneList.Item((uint64_t)v28);
    outlined destroy of SceneList.Item.Value((uint64_t)__src);
LABEL_4:
    v4 += 280;
    --v3;
  }
  while (v3);
  swift_bridgeObjectRelease();
  return v5;
}

char *protocol witness for Rule.value.getter in conformance ApplyActivationConditions@<X0>(char **a1@<X8>)
{
  uint64_t result = ApplyActivationConditions.value.getter(*v1);
  *a1 = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type ApplyActivationConditions and conformance ApplyActivationConditions()
{
  unint64_t result = lazy protocol witness table cache variable for type ApplyActivationConditions and conformance ApplyActivationConditions;
  if (!lazy protocol witness table cache variable for type ApplyActivationConditions and conformance ApplyActivationConditions)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ApplyActivationConditions and conformance ApplyActivationConditions);
  }
  return result;
}

uint64_t outlined init with copy of (SceneList.Item, WindowSceneConfiguration<WindowGroupConfigurationAttributes>)?(uint64_t a1, uint64_t a2)
{
  type metadata accessor for (SceneList.Item, WindowSceneConfiguration<WindowGroupConfigurationAttributes>)?();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void type metadata accessor for (SceneList.Item, WindowSceneConfiguration<WindowGroupConfigurationAttributes>)?()
{
  if (!lazy cache variable for type metadata for (SceneList.Item, WindowSceneConfiguration<WindowGroupConfigurationAttributes>)?)
  {
    type metadata accessor for (SceneList.Item, WindowSceneConfiguration<WindowGroupConfigurationAttributes>)();
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for (SceneList.Item, WindowSceneConfiguration<WindowGroupConfigurationAttributes>)?);
    }
  }
}

void type metadata accessor for Set<String>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = a5(0, a3, a4);
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

uint64_t outlined destroy of (SceneList.Item, WindowSceneConfiguration<WindowGroupConfigurationAttributes>)?(uint64_t a1)
{
  type metadata accessor for (SceneList.Item, WindowSceneConfiguration<WindowGroupConfigurationAttributes>)?();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t outlined init with take of (SceneList.Item, WindowSceneConfiguration<WindowGroupConfigurationAttributes>)?(uint64_t a1, uint64_t a2)
{
  type metadata accessor for (SceneList.Item, WindowSceneConfiguration<WindowGroupConfigurationAttributes>)?();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t specialized Sequence.contains(where:)(uint64_t a1)
{
  uint64_t v2 = a1 + 56;
  uint64_t v3 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v4 = -1;
  if (v3 < 64) {
    uint64_t v4 = ~(-1 << v3);
  }
  unint64_t v5 = v4 & *(void *)(a1 + 56);
  int64_t v6 = (unint64_t)(v3 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v8 = 0;
  while (v5)
  {
    unint64_t v9 = __clz(__rbit64(v5));
    v5 &= v5 - 1;
    unint64_t v10 = v9 | (v8 << 6);
LABEL_22:
    char v14 = (uint64_t *)(*(void *)(a1 + 48) + 16 * v10);
    uint64_t v15 = *v14;
    uint64_t v16 = v14[1];
    if (*v14) {
      BOOL v17 = 0;
    }
    else {
      BOOL v17 = v16 == 0xE000000000000000;
    }
    if (!v17)
    {
      uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
      if ((result & 1) == 0)
      {
        BOOL v18 = v15 == 42 && v16 == 0xE100000000000000;
        if (v18
          || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
          || (lazy protocol witness table accessor for type String and conformance String(),
              uint64_t result = StringProtocol.contains<A>(_:)(),
              (result & 1) != 0))
        {
          uint64_t v19 = 1;
LABEL_35:
          swift_release();
          return v19;
        }
      }
    }
  }
  int64_t v11 = v8 + 1;
  if (__OFADD__(v8, 1))
  {
    __break(1u);
    goto LABEL_37;
  }
  if (v11 >= v6) {
    goto LABEL_34;
  }
  unint64_t v12 = *(void *)(v2 + 8 * v11);
  ++v8;
  if (v12) {
    goto LABEL_21;
  }
  int64_t v8 = v11 + 1;
  if (v11 + 1 >= v6) {
    goto LABEL_34;
  }
  unint64_t v12 = *(void *)(v2 + 8 * v8);
  if (v12) {
    goto LABEL_21;
  }
  int64_t v8 = v11 + 2;
  if (v11 + 2 >= v6) {
    goto LABEL_34;
  }
  unint64_t v12 = *(void *)(v2 + 8 * v8);
  if (v12) {
    goto LABEL_21;
  }
  int64_t v8 = v11 + 3;
  if (v11 + 3 >= v6) {
    goto LABEL_34;
  }
  unint64_t v12 = *(void *)(v2 + 8 * v8);
  if (v12)
  {
LABEL_21:
    unint64_t v5 = (v12 - 1) & v12;
    unint64_t v10 = __clz(__rbit64(v12)) + (v8 << 6);
    goto LABEL_22;
  }
  int64_t v13 = v11 + 4;
  if (v13 >= v6)
  {
LABEL_34:
    uint64_t v19 = 0;
    goto LABEL_35;
  }
  unint64_t v12 = *(void *)(v2 + 8 * v13);
  if (v12)
  {
    int64_t v8 = v13;
    goto LABEL_21;
  }
  while (1)
  {
    int64_t v8 = v13 + 1;
    if (__OFADD__(v13, 1)) {
      break;
    }
    if (v8 >= v6) {
      goto LABEL_34;
    }
    unint64_t v12 = *(void *)(v2 + 8 * v8);
    ++v13;
    if (v12) {
      goto LABEL_21;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

void *type metadata accessor for ApplyActivationConditions()
{
  return &unk_1ED4457A8;
}

void AccessibilityTechnologies.init()(_WORD *a1@<X8>)
{
  *a1 = 0;
}

BOOL AccessibilityTechnologies.insert(_:)(_WORD *a1, unsigned __int16 *a2)
{
  int v3 = *a2;
  int v4 = (unsigned __int16)*v2;
  int v5 = v4 & v3;
  if ((v4 & v3) != v3)
  {
    LOWORD(v4) = v4 | v3;
    *uint64_t v2 = v4;
  }
  *a1 = v4;
  return v5 != v3;
}

_WORD *AccessibilityTechnologies.remove(_:)@<X0>(_WORD *result@<X0>, uint64_t a2@<X8>)
{
  __int16 v3 = *v2 & ~*result;
  *uint64_t v2 = v3;
  *(_WORD *)a2 = v3;
  *(unsigned char *)(a2 + 2) = 0;
  return result;
}

void static AccessibilityTechnologies.voiceOver.getter(_WORD *a1@<X8>)
{
  *a1 = 1;
}

void static AccessibilityTechnologies.switchControl.getter(_WORD *a1@<X8>)
{
  *a1 = 2;
}

void static AccessibilityTechnologies.fullKeyboardAccess.getter(_WORD *a1@<X8>)
{
  *a1 = 4;
}

void static AccessibilityTechnologies.voiceControl.getter(_WORD *a1@<X8>)
{
  *a1 = 8;
}

void static AccessibilityTechnologies.hoverText.getter(_WORD *a1@<X8>)
{
  *a1 = 16;
}

_WORD *AccessibilityTechnologies.union(_:)@<X0>(_WORD *result@<X0>, _WORD *a2@<X8>)
{
  *a2 = *v2 | *result;
  return result;
}

_WORD *AccessibilityTechnologies.formUnion(_:)(_WORD *result)
{
  *v1 |= *result;
  return result;
}

_WORD *AccessibilityTechnologies.intersection(_:)@<X0>(_WORD *result@<X0>, _WORD *a2@<X8>)
{
  *a2 = *v2 & *result;
  return result;
}

_WORD *AccessibilityTechnologies.formIntersection(_:)(_WORD *result)
{
  *v1 &= *result;
  return result;
}

_WORD *AccessibilityTechnologies.symmetricDifference(_:)@<X0>(_WORD *result@<X0>, _WORD *a2@<X8>)
{
  *a2 = *v2 ^ *result;
  return result;
}

_WORD *AccessibilityTechnologies.formSymmetricDifference(_:)(_WORD *result)
{
  *v1 ^= *result;
  return result;
}

BOOL AccessibilityTechnologies.contains(_:)(unsigned __int16 *a1)
{
  return (*a1 & ~*v1) == 0;
}

_WORD *AccessibilityTechnologies.update(with:)@<X0>(_WORD *result@<X0>, uint64_t a2@<X8>)
{
  __int16 v3 = *v2 & *result;
  *uint64_t v2 = v3;
  *(_WORD *)a2 = v3;
  *(unsigned char *)(a2 + 2) = v3 == 0;
  return result;
}

uint64_t AccessibilityTechnologySet.list.getter(unsigned __int16 a1)
{
  uint64_t v1 = 0;
  uint64_t v2 = MEMORY[0x1E4FBC860];
  unsigned int v3 = a1;
  do
  {
    unsigned int v6 = outlined read-only object #0 of AccessibilityTechnologySet.list.getter[v1 + 32];
    if (v6 > 0xF || ((v3 >> v6) & 1) != 0)
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v2 + 16) + 1, 1);
      }
      unint64_t v5 = *(void *)(v2 + 16);
      unint64_t v4 = *(void *)(v2 + 24);
      if (v5 >= v4 >> 1) {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v4 > 1), v5 + 1, 1);
      }
      *(void *)(v2 + 16) = v5 + 1;
      *(unsigned char *)(v2 + v5 + 32) = v6;
    }
    ++v1;
  }
  while (v1 != 6);
  return v2;
}

uint64_t AccessibilityTechnologySet.assertAllSupportFocus()(unsigned __int16 a1)
{
  uint64_t v1 = AccessibilityTechnologySet.list.getter(a1);
  uint64_t v2 = *(void *)(v1 + 16);
  if (v2)
  {
    for (uint64_t i = 0; i != v2; ++i)
    {
      if (*(unsigned __int8 *)(v1 + i + 32) >= 2u)
      {
        static os_log_type_t.fault.getter();
        unint64_t v4 = (void *)static Log.runtimeIssuesLog.getter();
        type metadata accessor for _ContiguousArrayStorage<CVarArg>();
        uint64_t v5 = swift_allocObject();
        *(_OWORD *)(v5 + 16) = xmmword_18834BB80;
        uint64_t v6 = String.init<A>(describing:)();
        uint64_t v8 = v7;
        *(void *)(v5 + 56) = MEMORY[0x1E4FBB1A0];
        *(void *)(v5 + 64) = lazy protocol witness table accessor for type String and conformance String();
        *(void *)(v5 + 32) = v6;
        *(void *)(v5 + 40) = v8;
        os_log(_:dso:log:_:_:)();

        swift_bridgeObjectRelease();
      }
    }
  }
  else if (((vars8 ^ (2 * vars8)) & 0x4000000000000000) != 0)
  {
    __break(0xC471u);
  }
  return swift_bridgeObjectRelease();
}

BOOL static AccessibilityTechnologies.== infix(_:_:)(unsigned __int16 *a1, unsigned __int16 *a2)
{
  return *a1 == *a2;
}

_WORD *protocol witness for SetAlgebra.union(_:) in conformance AccessibilityTechnologies@<X0>(_WORD *result@<X0>, _WORD *a2@<X8>)
{
  *a2 = *v2 | *result;
  return result;
}

_WORD *protocol witness for SetAlgebra.intersection(_:) in conformance AccessibilityTechnologies@<X0>(_WORD *result@<X0>, _WORD *a2@<X8>)
{
  *a2 = *v2 & *result;
  return result;
}

_WORD *protocol witness for SetAlgebra.symmetricDifference(_:) in conformance AccessibilityTechnologies@<X0>(_WORD *result@<X0>, _WORD *a2@<X8>)
{
  *a2 = *v2 ^ *result;
  return result;
}

BOOL protocol witness for SetAlgebra.insert(_:) in conformance AccessibilityTechnologies(_WORD *a1, unsigned __int16 *a2)
{
  int v3 = *a2;
  int v4 = (unsigned __int16)*v2;
  int v5 = v4 & v3;
  if ((v4 & v3) != v3)
  {
    LOWORD(v4) = v4 | v3;
    *uint64_t v2 = v4;
  }
  *a1 = v4;
  return v5 != v3;
}

_WORD *protocol witness for SetAlgebra.remove(_:) in conformance AccessibilityTechnologies@<X0>(_WORD *result@<X0>, uint64_t a2@<X8>)
{
  __int16 v3 = *v2 & ~*result;
  *uint64_t v2 = v3;
  *(_WORD *)a2 = v3;
  *(unsigned char *)(a2 + 2) = 0;
  return result;
}

_WORD *protocol witness for SetAlgebra.update(with:) in conformance AccessibilityTechnologies@<X0>(_WORD *result@<X0>, uint64_t a2@<X8>)
{
  __int16 v3 = *v2 & *result;
  *uint64_t v2 = v3;
  *(_WORD *)a2 = v3;
  *(unsigned char *)(a2 + 2) = v3 == 0;
  return result;
}

_WORD *protocol witness for SetAlgebra.formUnion(_:) in conformance AccessibilityTechnologies(_WORD *result)
{
  *v1 |= *result;
  return result;
}

_WORD *protocol witness for SetAlgebra.formIntersection(_:) in conformance AccessibilityTechnologies(_WORD *result)
{
  *v1 &= *result;
  return result;
}

_WORD *protocol witness for SetAlgebra.formSymmetricDifference(_:) in conformance AccessibilityTechnologies(_WORD *result)
{
  *v1 ^= *result;
  return result;
}

_WORD *protocol witness for SetAlgebra.subtracting(_:) in conformance AccessibilityTechnologies@<X0>(_WORD *result@<X0>, _WORD *a2@<X8>)
{
  *a2 = *v2 & ~*result;
  return result;
}

BOOL protocol witness for SetAlgebra.isSubset(of:) in conformance AccessibilityTechnologies(unsigned __int16 *a1)
{
  return (*v1 & ~*a1) == 0;
}

BOOL protocol witness for SetAlgebra.isDisjoint(with:) in conformance AccessibilityTechnologies(_WORD *a1)
{
  return (unsigned __int16)(*v1 & *a1) == 0;
}

BOOL protocol witness for SetAlgebra.isSuperset(of:) in conformance AccessibilityTechnologies(unsigned __int16 *a1)
{
  return (*a1 & ~*v1) == 0;
}

BOOL protocol witness for SetAlgebra.isEmpty.getter in conformance AccessibilityTechnologies()
{
  return *v0 == 0;
}

_WORD *protocol witness for SetAlgebra.subtract(_:) in conformance AccessibilityTechnologies(_WORD *result)
{
  *v1 &= ~*result;
  return result;
}

_WORD *protocol witness for OptionSet.init(rawValue:) in conformance AccessibilityTechnologySet@<X0>(_WORD *result@<X0>, _WORD *a2@<X8>)
{
  *a2 = *result;
  return result;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AccessibilityTechnologySet()
{
  Swift::UInt16 v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance AccessibilityTechnologySet()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AccessibilityTechnologySet()
{
  Swift::UInt16 v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t protocol witness for Decodable.init(from:) in conformance AccessibilityTechnologySet()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance AccessibilityTechnologySet()
{
  return RawRepresentable<>.encode(to:)();
}

BOOL protocol witness for SetAlgebra.insert(_:) in conformance AccessibilityTechnologySet(_WORD *a1, unsigned __int16 *a2)
{
  int v3 = *a2;
  int v4 = (unsigned __int16)*v2;
  if ((v4 & v3) != v3) {
    *uint64_t v2 = v4 | v3;
  }
  *a1 = v3;
  return (v4 & v3) != v3;
}

unsigned __int16 *protocol witness for SetAlgebra.remove(_:) in conformance AccessibilityTechnologySet@<X0>(unsigned __int16 *result@<X0>, uint64_t a2@<X8>)
{
  int v3 = *result;
  int v4 = (unsigned __int16)*v2;
  int v5 = v4 & v3;
  if ((v4 & v3) != 0) {
    *uint64_t v2 = v4 & ~(_WORD)v3;
  }
  *(_WORD *)a2 = v5;
  *(unsigned char *)(a2 + 2) = v5 == 0;
  return result;
}

unsigned __int16 *protocol witness for SetAlgebra.update(with:) in conformance AccessibilityTechnologySet@<X0>(unsigned __int16 *result@<X0>, uint64_t a2@<X8>)
{
  int v3 = *result;
  int v4 = (unsigned __int16)*v2;
  *uint64_t v2 = v4 | v3;
  int v5 = v4 & v3;
  *(_WORD *)a2 = v5;
  *(unsigned char *)(a2 + 2) = v5 == 0;
  return result;
}

_WORD *protocol witness for RawRepresentable.init(rawValue:) in conformance AccessibilityTechnologySet@<X0>(_WORD *result@<X0>, uint64_t a2@<X8>)
{
  *(_WORD *)a2 = *result;
  *(unsigned char *)(a2 + 2) = 0;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance AccessibilityTechnologySet(_WORD *a1@<X8>)
{
  *a1 = *v1;
}

uint64_t protocol witness for ExpressibleByArrayLiteral.init(arrayLiteral:) in conformance AccessibilityTechnologySet@<X0>(uint64_t a1@<X0>, _WORD *a2@<X8>)
{
  __int16 v3 = specialized SetAlgebra<>.init(arrayLiteral:)(a1);
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v3;
  return result;
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance AccessibilityTechnology@<X0>(unsigned __int16 *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = specialized AccessibilityTechnology.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance AccessibilityTechnology(_WORD *a1@<X8>)
{
  *a1 = *v1;
}

void protocol witness for static CaseIterable.allCases.getter in conformance AccessibilityTechnology(void *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of static AccessibilityTechnology.allCases.getter;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AccessibilityTechnology()
{
  Swift::UInt16 v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance AccessibilityTechnology()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AccessibilityTechnology()
{
  Swift::UInt16 v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

unint64_t lazy protocol witness table accessor for type AccessibilityTechnologies and conformance AccessibilityTechnologies()
{
  unint64_t result = lazy protocol witness table cache variable for type AccessibilityTechnologies and conformance AccessibilityTechnologies;
  if (!lazy protocol witness table cache variable for type AccessibilityTechnologies and conformance AccessibilityTechnologies)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityTechnologies and conformance AccessibilityTechnologies);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AccessibilityTechnologies and conformance AccessibilityTechnologies;
  if (!lazy protocol witness table cache variable for type AccessibilityTechnologies and conformance AccessibilityTechnologies)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityTechnologies and conformance AccessibilityTechnologies);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AccessibilityTechnologySet and conformance AccessibilityTechnologySet()
{
  unint64_t result = lazy protocol witness table cache variable for type AccessibilityTechnologySet and conformance AccessibilityTechnologySet;
  if (!lazy protocol witness table cache variable for type AccessibilityTechnologySet and conformance AccessibilityTechnologySet)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityTechnologySet and conformance AccessibilityTechnologySet);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AccessibilityTechnologySet and conformance AccessibilityTechnologySet;
  if (!lazy protocol witness table cache variable for type AccessibilityTechnologySet and conformance AccessibilityTechnologySet)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityTechnologySet and conformance AccessibilityTechnologySet);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AccessibilityTechnologySet and conformance AccessibilityTechnologySet;
  if (!lazy protocol witness table cache variable for type AccessibilityTechnologySet and conformance AccessibilityTechnologySet)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityTechnologySet and conformance AccessibilityTechnologySet);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AccessibilityTechnologySet and conformance AccessibilityTechnologySet;
  if (!lazy protocol witness table cache variable for type AccessibilityTechnologySet and conformance AccessibilityTechnologySet)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityTechnologySet and conformance AccessibilityTechnologySet);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for AccessibilityTechnology(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFB) {
    goto LABEL_17;
  }
  if (a2 + 5 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 5) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 5;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 5;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 5;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 6;
  int v8 = v6 - 6;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for AccessibilityTechnology(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 5 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 5) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFB) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFA)
  {
    unsigned int v6 = ((a2 - 251) >> 8) + 1;
    *unint64_t result = a2 + 5;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x187BDF848);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 5;
        break;
    }
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type [AccessibilityTechnology] and conformance [A]()
{
  unint64_t result = lazy protocol witness table cache variable for type [AccessibilityTechnology] and conformance [A];
  if (!lazy protocol witness table cache variable for type [AccessibilityTechnology] and conformance [A])
  {
    type metadata accessor for [AccessibilityTechnology]();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [AccessibilityTechnology] and conformance [A]);
  }
  return result;
}

void type metadata accessor for [AccessibilityTechnology]()
{
  if (!lazy cache variable for type metadata for [AccessibilityTechnology])
  {
    unint64_t v0 = type metadata accessor for Array();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for [AccessibilityTechnology]);
    }
  }
}

uint64_t specialized AccessibilityTechnology.init(rawValue:)(uint64_t result)
{
  if ((unsigned __int16)result >= 6u) {
    return 6;
  }
  else {
    return (unsigned __int16)result;
  }
}

uint64_t PersistentSystemOverlaysKey.Overlays.visibility.getter()
{
  return *v0;
}

uint64_t PersistentSystemOverlaysKey.Overlays.visibility.setter(uint64_t result)
{
  unsigned char *v1 = result;
  return result;
}

uint64_t (*PersistentSystemOverlaysKey.Overlays.visibility.modify())(void, void, void, void)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t PersistentSystemOverlaysKey.Overlays.isAnimated.getter()
{
  return *(unsigned __int8 *)(v0 + 1);
}

uint64_t PersistentSystemOverlaysKey.Overlays.isAnimated.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 1) = result;
  return result;
}

uint64_t (*PersistentSystemOverlaysKey.Overlays.isAnimated.modify())(void, void, void, void)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t static PersistentSystemOverlaysKey.Overlays.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return (*a1 == *a2) & (a2[1] ^ a1[1] ^ 1u);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PersistentSystemOverlaysKey.Overlays(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return (*a1 == *a2) & (a2[1] ^ a1[1] ^ 1u);
}

void static PersistentSystemOverlaysKey.defaultValue.getter(_WORD *a1@<X8>)
{
  *a1 = 512;
}

_WORD *static PersistentSystemOverlaysKey.reduce(value:nextValue:)(_WORD *result, void *(*a2)(uint64_t *__return_ptr))
{
  int v2 = result;
  __int16 v3 = *result;
  if ((*result & 0xFF00) == 0x200)
  {
    unint64_t result = a2(&v4);
    __int16 v3 = v4;
  }
  *int v2 = v3;
  return result;
}

_WORD *protocol witness for static PreferenceKey.reduce(value:nextValue:) in conformance PersistentSystemOverlaysKey(_WORD *result, void *(*a2)(uint64_t *__return_ptr))
{
  int v2 = result;
  __int16 v3 = *result;
  if ((*result & 0xFF00) == 0x200)
  {
    unint64_t result = a2(&v4);
    __int16 v3 = v4;
  }
  *int v2 = v3;
  return result;
}

uint64_t View.persistentSystemOverlays(_:)@<X0>(char a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  char v9 = a1;
  unint64_t v7 = lazy protocol witness table accessor for type Visibility and conformance Visibility();
  return View.transactionalPreference<A, B>(key:value:transform:)((uint64_t)&type metadata for PersistentSystemOverlaysKey, (uint64_t)&v9, (uint64_t)closure #1 in View._statusBar(hidden:), 0, a2, MEMORY[0x1E4F3F3F0], (uint64_t)&type metadata for PersistentSystemOverlaysKey, a3, a4, v7, (uint64_t)&protocol witness table for PersistentSystemOverlaysKey);
}

unint64_t lazy protocol witness table accessor for type Visibility and conformance Visibility()
{
  unint64_t result = lazy protocol witness table cache variable for type Visibility and conformance Visibility;
  if (!lazy protocol witness table cache variable for type Visibility and conformance Visibility)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Visibility and conformance Visibility);
  }
  return result;
}

uint64_t static PersistentSystemOverlaysSceneModifier._makeScene(modifier:inputs:body:)@<X0>(int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(unint64_t *__return_ptr)@<X2>, uint64_t a4@<X8>)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  int v5 = *a1;
  int v6 = *(_DWORD *)(a2 + 8);
  uint64_t v7 = *(void *)(a2 + 16);
  uint64_t v8 = *(void *)(a2 + 40);
  unint64_t v9 = *(void *)(a2 + 48);
  int v10 = *(_DWORD *)(a2 + 56);
  unint64_t v18 = *(void *)a2;
  int v19 = v6;
  uint64_t v20 = v7;
  long long v21 = *(_OWORD *)(a2 + 24);
  uint64_t v22 = v8;
  unint64_t v23 = v9;
  int v24 = v10;
  a3(&v16);
  unint64_t v18 = v9;
  int v19 = v10;
  uint64_t result = PreferencesInputs.contains<A>(_:includeHostPreferences:)();
  if (result)
  {
    LODWORD(v18) = v5;
    type metadata accessor for _GraphValue<PersistentSystemOverlaysSceneModifier>();
    unsigned int v12 = _GraphValue.value.getter();
    unint64_t v18 = v16;
    int v19 = v17;
    uint64_t v13 = PreferencesOutputs.subscript.getter();
    unsigned int v14 = *MEMORY[0x1E4F4E7A0];
    if ((v13 & 0x100000000) == 0) {
      unsigned int v14 = v13;
    }
    unint64_t v18 = __PAIR64__(v14, v12);
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    lazy protocol witness table accessor for type PersistentSystemOverlaysSceneModifier.UpdateSceneList and conformance PersistentSystemOverlaysSceneModifier.UpdateSceneList();
    Attribute.init<A>(body:value:flags:update:)();
    LOBYTE(v18) = 0;
    uint64_t result = PreferencesOutputs.subscript.setter();
  }
  int v15 = v17;
  *(void *)a4 = v16;
  *(_DWORD *)(a4 + 8) = v15;
  return result;
}

char *PersistentSystemOverlaysSceneModifier.UpdateSceneList.value.getter(uint64_t a1)
{
  if (*MEMORY[0x1E4F4E7A0] == HIDWORD(a1)) {
    return (char *)MEMORY[0x1E4FBC860];
  }
  uint64_t Value = AGGraphGetValue();
  uint64_t v2 = *(void *)Value;
  uint64_t v3 = *(void *)(*(void *)Value + 16);
  if (!v3) {
    return (char *)MEMORY[0x1E4FBC860];
  }
  type metadata accessor for EnvironmentPropertyKey<ScenePersistentSystemOverlaysKey>();
  uint64_t v4 = v2 + 32;
  swift_bridgeObjectRetain();
  int v5 = (char *)MEMORY[0x1E4FBC860];
  do
  {
    outlined init with copy of SceneList.Item(v4, (uint64_t)v10);
    __src[0] = *(unsigned char *)AGGraphGetValue();
    lazy protocol witness table accessor for type EnvironmentPropertyKey<ScenePersistentSystemOverlaysKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain();
    PropertyList.subscript.setter();
    if (v11)
    {
      swift_retain();
      swift_retain();
      PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
      swift_release();
      swift_release();
    }
    swift_release();
    outlined init with copy of SceneList.Item((uint64_t)v10, (uint64_t)__src);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      int v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v5 + 2) + 1, 1, v5);
    }
    unint64_t v7 = *((void *)v5 + 2);
    unint64_t v6 = *((void *)v5 + 3);
    if (v7 >= v6 >> 1) {
      int v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v6 > 1), v7 + 1, 1, v5);
    }
    *((void *)v5 + 2) = v7 + 1;
    memcpy(&v5[280 * v7 + 32], __src, 0x118uLL);
    outlined destroy of SceneList.Item((uint64_t)v10);
    v4 += 280;
    --v3;
  }
  while (v3);
  swift_bridgeObjectRelease();
  return v5;
}

char *protocol witness for Rule.value.getter in conformance PersistentSystemOverlaysSceneModifier.UpdateSceneList@<X0>(char **a1@<X8>)
{
  uint64_t result = PersistentSystemOverlaysSceneModifier.UpdateSceneList.value.getter(*v1);
  *a1 = result;
  return result;
}

uint64_t Scene.persistentSystemOverlays(_:)(char a1, uint64_t a2, uint64_t a3)
{
  char v4 = a1;
  return Scene.modifier<A>(_:)(&v4, a2, &type metadata for PersistentSystemOverlaysSceneModifier, a3);
}

ValueMetadata *type metadata accessor for PersistentSystemOverlaysKey()
{
  return &type metadata for PersistentSystemOverlaysKey;
}

uint64_t sub_187BDFFD8()
{
  return swift_getWitnessTable();
}

void type metadata accessor for TransactionalPreferenceModifier<Visibility, PersistentSystemOverlaysKey>()
{
  if (!lazy cache variable for type metadata for TransactionalPreferenceModifier<Visibility, PersistentSystemOverlaysKey>)
  {
    lazy protocol witness table accessor for type Visibility and conformance Visibility();
    unint64_t v0 = type metadata accessor for TransactionalPreferenceModifier();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TransactionalPreferenceModifier<Visibility, PersistentSystemOverlaysKey>);
    }
  }
}

uint64_t sub_187BE00C0()
{
  return swift_getWitnessTable();
}

unsigned char *storeEnumTagSinglePayload for PersistentSystemOverlaysSceneModifier(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x187BE01F0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PersistentSystemOverlaysSceneModifier()
{
  return &type metadata for PersistentSystemOverlaysSceneModifier;
}

ValueMetadata *type metadata accessor for HostingGestureOverlayAuthorityKey()
{
  return &type metadata for HostingGestureOverlayAuthorityKey;
}

void type metadata accessor for _GraphValue<PersistentSystemOverlaysSceneModifier>()
{
  if (!lazy cache variable for type metadata for _GraphValue<PersistentSystemOverlaysSceneModifier>)
  {
    unint64_t v0 = type metadata accessor for _GraphValue();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _GraphValue<PersistentSystemOverlaysSceneModifier>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type PersistentSystemOverlaysSceneModifier.UpdateSceneList and conformance PersistentSystemOverlaysSceneModifier.UpdateSceneList()
{
  unint64_t result = lazy protocol witness table cache variable for type PersistentSystemOverlaysSceneModifier.UpdateSceneList and conformance PersistentSystemOverlaysSceneModifier.UpdateSceneList;
  if (!lazy protocol witness table cache variable for type PersistentSystemOverlaysSceneModifier.UpdateSceneList and conformance PersistentSystemOverlaysSceneModifier.UpdateSceneList)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PersistentSystemOverlaysSceneModifier.UpdateSceneList and conformance PersistentSystemOverlaysSceneModifier.UpdateSceneList);
  }
  return result;
}

ValueMetadata *type metadata accessor for ScenePersistentSystemOverlaysKey()
{
  return &type metadata for ScenePersistentSystemOverlaysKey;
}

ValueMetadata *type metadata accessor for PersistentSystemOverlaysSceneModifier.UpdateSceneList()
{
  return &type metadata for PersistentSystemOverlaysSceneModifier.UpdateSceneList;
}

double MagnificationGesture.minimumScaleDelta.getter()
{
  return *(double *)v0;
}

uint64_t (*MagnificationGesture.minimumScaleDelta.modify())(void, void, void, void)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t static MagnificationGesture._makeGesture(gesture:inputs:)()
{
  return static PubliclyPrimitiveGesture.makeGesture(gesture:inputs:)();
}

unint64_t lazy protocol witness table accessor for type MagnificationGesture and conformance MagnificationGesture()
{
  unint64_t result = lazy protocol witness table cache variable for type MagnificationGesture and conformance MagnificationGesture;
  if (!lazy protocol witness table cache variable for type MagnificationGesture and conformance MagnificationGesture)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MagnificationGesture and conformance MagnificationGesture);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type MagnificationGesture and conformance MagnificationGesture;
  if (!lazy protocol witness table cache variable for type MagnificationGesture and conformance MagnificationGesture)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MagnificationGesture and conformance MagnificationGesture);
  }
  return result;
}

__n128 MagnificationGesture.internalBody.getter@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *v1;
  type metadata accessor for MagnifyGesture.Value();
  MapGesture.init(_:)();
  __n128 result = v5;
  *(void *)a1 = v3;
  *(__n128 *)(a1 + 8) = v5;
  return result;
}

void MagnifyGesture.init(minimumScaleDelta:)(double *a1@<X8>, double a2@<D0>)
{
  *a1 = a2;
}

double specialized implicit closure #1 in MagnificationGesture.internalBody.getter@<D0>(uint64_t a1@<X0>, double *a2@<X8>)
{
  double result = *(double *)(a1 + *(int *)(type metadata accessor for MagnifyGesture.Value() + 20));
  *a2 = result;
  return result;
}

uint64_t type metadata accessor for MagnifyGesture.Value()
{
  uint64_t result = type metadata singleton initialization cache for MagnifyGesture.Value;
  if (!type metadata singleton initialization cache for MagnifyGesture.Value) {
    return swift_getSingletonMetadata();
  }
  return result;
}

__n128 protocol witness for PubliclyPrimitiveGesture.internalBody.getter in conformance MagnificationGesture@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *v1;
  type metadata accessor for MagnifyGesture.Value();
  MapGesture.init(_:)();
  __n128 result = v5;
  *(void *)a1 = v3;
  *(__n128 *)(a1 + 8) = v5;
  return result;
}

uint64_t protocol witness for static Gesture._makeGesture(gesture:inputs:) in conformance MagnificationGesture()
{
  return static PubliclyPrimitiveGesture.makeGesture(gesture:inputs:)();
}

void protocol witness for Gesture.body.getter in conformance MagnificationGesture()
{
}

uint64_t MagnifyGesture.Value.time.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for Date();
  unsigned int v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 16);

  return v4(a1, v1, v3);
}

uint64_t MagnifyGesture.Value.time.setter(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for Date();
  unsigned int v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 40);

  return v4(v1, a1, v3);
}

uint64_t (*MagnifyGesture.Value.time.modify())(void, void, void, void)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

double MagnifyGesture.Value.magnification.getter()
{
  return *(double *)(v0 + *(int *)(type metadata accessor for MagnifyGesture.Value() + 20));
}

uint64_t MagnifyGesture.Value.magnification.setter(double a1)
{
  uint64_t result = type metadata accessor for MagnifyGesture.Value();
  *(double *)(v1 + *(int *)(result + 20)) = a1;
  return result;
}

uint64_t (*MagnifyGesture.Value.magnification.modify())(void, void, void, void)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

double MagnifyGesture.Value.velocity.getter()
{
  return *(double *)(v0 + *(int *)(type metadata accessor for MagnifyGesture.Value() + 24));
}

uint64_t MagnifyGesture.Value.velocity.setter(double a1)
{
  uint64_t result = type metadata accessor for MagnifyGesture.Value();
  *(double *)(v1 + *(int *)(result + 24)) = a1;
  return result;
}

uint64_t (*MagnifyGesture.Value.velocity.modify())(void, void, void, void)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

double MagnifyGesture.Value.startAnchor.getter()
{
  return *(double *)(v0 + *(int *)(type metadata accessor for MagnifyGesture.Value() + 28));
}

uint64_t MagnifyGesture.Value.startAnchor.setter(double a1, double a2)
{
  uint64_t result = type metadata accessor for MagnifyGesture.Value();
  unsigned int v6 = (double *)(v2 + *(int *)(result + 28));
  *unsigned int v6 = a1;
  v6[1] = a2;
  return result;
}

uint64_t (*MagnifyGesture.Value.startAnchor.modify())(void, void, void, void)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

double MagnifyGesture.Value.startLocation.getter()
{
  return *(double *)(v0 + *(int *)(type metadata accessor for MagnifyGesture.Value() + 32));
}

uint64_t MagnifyGesture.Value.startLocation.setter(double a1, double a2)
{
  uint64_t result = type metadata accessor for MagnifyGesture.Value();
  unsigned int v6 = (double *)(v2 + *(int *)(result + 32));
  *unsigned int v6 = a1;
  v6[1] = a2;
  return result;
}

uint64_t (*MagnifyGesture.Value.startLocation.modify())(void, void, void, void)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

double MagnifyGesture.minimumScaleDelta.getter()
{
  return *(double *)v0;
}

void MagnifyGesture.minimumScaleDelta.setter(double a1)
{
  double *v1 = a1;
}

uint64_t (*MagnifyGesture.minimumScaleDelta.modify())(void, void, void, void)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t static MagnifyGesture._makeGesture(gesture:inputs:)()
{
  return static Gesture.makeDebuggableGesture(gesture:inputs:)();
}

uint64_t closure #1 in MagnifyGesture.Child.value.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  type metadata accessor for SimultaneousGesture<TransformBasedMagnifyGesture, TouchBasedMagnifyGesture>(0, (unint64_t *)&lazy cache variable for type metadata for SimultaneousGesture<TransformBasedMagnifyGesture, TouchBasedMagnifyGesture>.Value, MEMORY[0x1E4F404D8]);
  uint64_t v5 = v4;
  MEMORY[0x1F4188790](v4);
  unint64_t v7 = (char *)&v18 - v6;
  uint64_t v8 = MEMORY[0x1E4FBB718];
  type metadata accessor for CategoryGesture<MagnifyGesture.Value>(0, &lazy cache variable for type metadata for MagnifyGesture.Value?, (uint64_t (*)(uint64_t))type metadata accessor for MagnifyGesture.Value, MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v11 = (char *)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v12);
  unsigned int v14 = (char *)&v18 - v13;
  _s7SwiftUI22CoordinateSpaceGestureVyAA14TransformEventVGWOcTm_0(a1, (uint64_t)&v18 - v13, (uint64_t)&lazy cache variable for type metadata for MagnifyGesture.Value?, (uint64_t)type metadata accessor for MagnifyGesture.Value, v8, (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))type metadata accessor for CategoryGesture<MagnifyGesture.Value>);
  outlined init with copy of SimultaneousGesture<TransformBasedMagnifyGesture, TouchBasedMagnifyGesture>.Value(a1, (uint64_t)v7);
  uint64_t v15 = type metadata accessor for MagnifyGesture.Value();
  unint64_t v16 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v15 - 8) + 48);
  if (v16(v14, 1, v15) == 1)
  {
    _s7SwiftUI22CoordinateSpaceGestureVyAA14TransformEventVGWOcTm_0((uint64_t)&v7[*(int *)(v5 + 52)], (uint64_t)v11, (uint64_t)&lazy cache variable for type metadata for MagnifyGesture.Value?, (uint64_t)type metadata accessor for MagnifyGesture.Value, MEMORY[0x1E4FBB718], (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))type metadata accessor for CategoryGesture<MagnifyGesture.Value>);
    uint64_t result = v16(v11, 1, v15);
    if (result == 1)
    {
      __break(1u);
    }
    else
    {
      outlined destroy of SimultaneousGesture<TransformBasedMagnifyGesture, TouchBasedMagnifyGesture>.Value((uint64_t)v7);
      outlined init with take of (DragGesture.Value, DragGesture.Value)((uint64_t)v11, a2, (uint64_t (*)(void))type metadata accessor for MagnifyGesture.Value);
      return _s7SwiftUI22CoordinateSpaceGestureVyAA14TransformEventVGWOhTm_0((uint64_t)v14, (uint64_t)&lazy cache variable for type metadata for MagnifyGesture.Value?, (uint64_t)type metadata accessor for MagnifyGesture.Value, MEMORY[0x1E4FBB718], (uint64_t (*)(void))type metadata accessor for CategoryGesture<MagnifyGesture.Value>);
    }
  }
  else
  {
    outlined destroy of SimultaneousGesture<TransformBasedMagnifyGesture, TouchBasedMagnifyGesture>.Value((uint64_t)v7);
    return outlined init with take of (DragGesture.Value, DragGesture.Value)((uint64_t)v14, a2, (uint64_t (*)(void))type metadata accessor for MagnifyGesture.Value);
  }
  return result;
}

void protocol witness for Gesture.body.getter in conformance MagnifyGesture()
{
}

uint64_t closure #1 in TransformBasedMagnifyGesture.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, double a4@<D0>)
{
  uint64_t v6 = a3;
  double v8 = *(double *)a2;
  uint64_t v7 = *(void *)(a2 + 8);
  double v10 = *(double *)(a2 + 16);
  uint64_t v9 = *(void *)(a2 + 24);
  uint64_t v11 = *(void *)(a2 + 32);
  uint64_t v12 = *(void *)(a2 + 40);
  uint64_t v14 = *(void *)(a2 + 48);
  double v13 = *(double *)(a2 + 56);
  double v16 = *(double *)(a2 + 64);
  uint64_t v15 = *(void *)(a2 + 72);
  uint64_t v17 = *(void *)(a2 + 80);
  char v18 = *(unsigned char *)(a2 + 88);
  if ((*(unsigned char *)a1 & 1) == 0)
  {
    switch(*(unsigned char *)(a2 + 88))
    {
      case 1:
        if (*(unsigned char *)(a1 + 16))
        {
          *(double *)(a1 + 8) = v13;
          *(unsigned char *)(a1 + 16) = 0;
        }
        else
        {
          double v24 = *(double *)(a1 + 8);
          if (v13 * v16 < 0.0) {
            double v25 = 0.0;
          }
          else {
            double v25 = v13 * v16;
          }
          uint64_t v49 = *(void *)(a2 + 80);
          uint64_t v43 = *(void *)(a2 + 24);
          uint64_t v46 = *(void *)(a2 + 8);
          uint64_t v37 = *(void *)(a2 + 72);
          uint64_t v40 = *(void *)(a2 + 32);
          specialized VelocitySampler.addSample(_:time:)(v25, *(double *)a2);
          uint64_t v17 = v49;
          uint64_t v15 = v37;
          uint64_t v11 = v40;
          uint64_t v9 = v43;
          uint64_t v7 = v46;
          if (vabdd_f64(v25, v24) > a4) {
            *(unsigned char *)a1 = 1;
          }
        }
        break;
      case 2:
        goto LABEL_5;
      case 3:
        break;
      default:
        if (*(void *)&v10 == 1)
        {
          uint64_t v35 = *(void *)(a2 + 72);
          uint64_t v38 = *(void *)(a2 + 32);
          uint64_t v47 = *(void *)(a2 + 80);
          uint64_t v41 = *(void *)(a2 + 24);
          uint64_t v44 = *(void *)(a2 + 8);
          outlined consume of GesturePhase<TransformEvent>(*(uint64_t *)&v8, v7, 1, v9, v11, v12, v14, *(uint64_t *)&v13, *(uint64_t *)&v16, v15, v17, 0);
          uint64_t v17 = v47;
          uint64_t v15 = v35;
          uint64_t v11 = v38;
          uint64_t v9 = v41;
          uint64_t v7 = v44;
        }
        else
        {
LABEL_5:
          double v19 = v13 * v16;
          if (v13 * v16 < 0.0) {
            double v19 = 0.0;
          }
          uint64_t v42 = *(void *)(a2 + 40);
          uint64_t v48 = *(void *)(a2 + 80);
          uint64_t v20 = *(void *)(a2 + 8);
          double v36 = *(double *)(a2 + 16);
          uint64_t v39 = *(void *)(a2 + 48);
          uint64_t v21 = *(void *)(a2 + 24);
          uint64_t v22 = *(void *)(a2 + 32);
          uint64_t v23 = *(void *)(a2 + 72);
          specialized VelocitySampler.addSample(_:time:)(v19, *(double *)a2);
          uint64_t v17 = v48;
          uint64_t v15 = v23;
          uint64_t v11 = v22;
          uint64_t v9 = v21;
          double v10 = v36;
          uint64_t v14 = v39;
          uint64_t v7 = v20;
          uint64_t v12 = v42;
          uint64_t v6 = a3;
        }
        break;
    }
  }
  double v26 = *(double *)(a1 + 8);
  char v27 = *(unsigned char *)(a1 + 16);
  char v28 = *(unsigned char *)(a1 + 40);
  char v29 = *(unsigned char *)(a1 + 64);
  char v30 = *(unsigned char *)(a1 + 88);
  uint64_t v31 = *(void *)(a1 + 96);
  char v32 = *(unsigned char *)(a1 + 104);
  uint64_t v33 = *(void *)(a1 + 112);
  LOBYTE(v52[0]) = *(unsigned char *)a1;
  v52[1] = v26;
  char v53 = v27;
  long long v54 = *(_OWORD *)(a1 + 24);
  char v55 = v28;
  long long v56 = *(_OWORD *)(a1 + 48);
  char v57 = v29;
  long long v58 = *(_OWORD *)(a1 + 72);
  char v59 = v30;
  uint64_t v60 = v31;
  char v61 = v32;
  uint64_t v62 = v33;
  v50[0] = v8;
  *(void *)&v50[1] = v7;
  _OWORD v50[2] = v10;
  *(void *)&v50[3] = v9;
  *(void *)&v50[4] = v11;
  *(void *)&v50[5] = v12;
  *(void *)&v50[6] = v14;
  v50[7] = v13;
  v50[8] = v16;
  *(void *)&v50[9] = v15;
  *(void *)&v50[10] = v17;
  char v51 = v18;
  return TransformBasedMagnifyGesture.phase(state:childPhase:)(v52, v50, v6);
}

uint64_t TransformBasedMagnifyGesture.phase(state:childPhase:)@<X0>(double *a1@<X0>, double *a2@<X1>, uint64_t a3@<X8>)
{
  char v5 = *(unsigned char *)a1;
  double v6 = a1[1];
  char v7 = *((unsigned char *)a1 + 16);
  double v8 = *a2;
  uint64_t v9 = *((void *)a2 + 1);
  uint64_t v11 = *((void *)a2 + 2);
  uint64_t v10 = *((void *)a2 + 3);
  uint64_t v13 = *((void *)a2 + 4);
  uint64_t v12 = *((void *)a2 + 5);
  uint64_t v14 = *((void *)a2 + 6);
  double v15 = a2[7];
  double v17 = a2[8];
  uint64_t v16 = *((void *)a2 + 9);
  uint64_t v18 = *((void *)a2 + 10);
  int v19 = *((unsigned __int8 *)a2 + 88);
  if (!v3 || v9 | *(void *)&v8 | v11 | v10 | v13 | v12 | v14 | *(void *)&v15 | *(void *)&v17 | v16 | v18)
  {
    if (v5)
    {
      switch(*((unsigned char *)a2 + 88))
      {
        case 0:
          if (v11 == 1) {
            goto LABEL_18;
          }
          if (v7) {
            goto LABEL_40;
          }
          if (v15 * v17 < 0.0) {
            double v20 = 1.0;
          }
          else {
            double v20 = v15 * v17 + 1.0;
          }
          double v21 = v20 - v6;
          if (v21 < 0.0) {
            double v22 = 0.0;
          }
          else {
            double v22 = v21;
          }
          double v23 = TransformGestureAnchorHelper.startPoints(_:)();
          uint64_t v25 = v24;
          uint64_t v27 = v26;
          uint64_t v29 = v28;
          Date.init(timeIntervalSinceReferenceDate:)();
          double v30 = specialized VelocitySampler.velocity.getter();
          uint64_t v31 = (int *)type metadata accessor for MagnifyGesture.Value();
          *(double *)(a3 + v31[5]) = v22;
          *(double *)(a3 + v31[6]) = v30;
          char v32 = (double *)(a3 + v31[7]);
          double *v32 = v23;
          *((void *)v32 + 1) = v25;
          uint64_t v33 = (void *)(a3 + v31[8]);
          *uint64_t v33 = v27;
          v33[1] = v29;
          (*(void (**)(uint64_t, void, uint64_t, int *))(*((void *)v31 - 1) + 56))(a3, 0, 1, v31);
          break;
        case 1:
          if (v7)
          {
            __break(1u);
LABEL_39:
            __break(1u);
LABEL_40:
            __break(1u);
            JUMPOUT(0x187BE15A8);
          }
          if (v15 * v17 < 0.0) {
            double v35 = 1.0;
          }
          else {
            double v35 = v15 * v17 + 1.0;
          }
          double v36 = v35 - v6;
          if (v36 < 0.0) {
            double v37 = 0.0;
          }
          else {
            double v37 = v36;
          }
LABEL_34:
          double v40 = TransformGestureAnchorHelper.startPoints(_:)();
          uint64_t v42 = v41;
          uint64_t v44 = v43;
          uint64_t v46 = v45;
          Date.init(timeIntervalSinceReferenceDate:)();
          double v47 = specialized VelocitySampler.velocity.getter();
          uint64_t v48 = (int *)type metadata accessor for MagnifyGesture.Value();
          *(double *)(a3 + v48[5]) = v37;
          *(double *)(a3 + v48[6]) = v47;
          uint64_t v49 = (double *)(a3 + v48[7]);
          double *v49 = v40;
          *((void *)v49 + 1) = v42;
          uint64_t v50 = (void *)(a3 + v48[8]);
          *uint64_t v50 = v44;
          v50[1] = v46;
          break;
        case 2:
          if (v7) {
            goto LABEL_39;
          }
          if (v15 * v17 < 0.0) {
            double v38 = 1.0;
          }
          else {
            double v38 = v15 * v17 + 1.0;
          }
          double v39 = v38 - v6;
          if (v39 < 0.0) {
            double v37 = 0.0;
          }
          else {
            double v37 = v39;
          }
          goto LABEL_34;
        case 3:
          break;
        default:
          JUMPOUT(0);
      }
    }
    else if (v19 != 2 {
           && (v19 != 3
    }
            || v9 | *(void *)&v8 | v11 | v10 | v13 | v12 | v14 | *(void *)&v15 | *(void *)&v17 | v16 | v18))
    {
LABEL_18:
      uint64_t v34 = type metadata accessor for MagnifyGesture.Value();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v34 - 8) + 56))(a3, 1, 1, v34);
    }
  }
  type metadata accessor for CategoryGesture<MagnifyGesture.Value>(0, &lazy cache variable for type metadata for GesturePhase<MagnifyGesture.Value>, (uint64_t (*)(uint64_t))type metadata accessor for MagnifyGesture.Value, MEMORY[0x1E4F3F5F8]);

  return swift_storeEnumTagMultiPayload();
}

void protocol witness for GestureStateProtocol.init() in conformance TouchBasedMagnifyGesture.StateType(uint64_t a1@<X8>)
{
  *(unsigned char *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 24) = 1;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(unsigned char *)(a1 + 48) = 1;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(unsigned char *)(a1 + 72) = 1;
  *(void *)(a1 + 80) = 0;
  *(unsigned char *)(a1 + 88) = 1;
  *(void *)(a1 + 96) = 0x3FE8000000000000;
}

uint64_t closure #1 in TouchBasedMagnifyGesture.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  type metadata accessor for Tuple<DragGesture.Value, EmptyTuple>();
  MEMORY[0x1F4188790](v4 - 8);
  double v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for (DragGesture.Value, DragGesture.Value)();
  uint64_t v8 = a2 + *(int *)(v7 + 48);
  outlined init with copy of Tuple<DragGesture.Value, EmptyTuple>(a1, a2, type metadata accessor for DragGesture.Value);
  type metadata accessor for Tuple<DragGesture.Value, Tuple<DragGesture.Value, EmptyTuple>>();
  outlined init with copy of Tuple<DragGesture.Value, EmptyTuple>(a1 + *(int *)(v9 + 44), (uint64_t)v6, (uint64_t (*)(void))type metadata accessor for Tuple<DragGesture.Value, EmptyTuple>);
  return outlined init with take of (DragGesture.Value, DragGesture.Value)((uint64_t)v6, v8, type metadata accessor for DragGesture.Value);
}

uint64_t closure #2 in TouchBasedMagnifyGesture.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X8>, double a6@<D0>)
{
  TouchBasedMagnifyGesture.update(state:childPhase:)((unsigned char *)a1, a2, a6);
  char v11 = *(unsigned char *)(a1 + 24);
  char v12 = *(unsigned char *)(a1 + 48);
  char v13 = *(unsigned char *)(a1 + 72);
  uint64_t v14 = *(void *)(a1 + 80);
  char v15 = *(unsigned char *)(a1 + 88);
  uint64_t v16 = *(void *)(a1 + 96);
  v18[0] = *(unsigned char *)a1;
  long long v19 = *(_OWORD *)(a1 + 8);
  char v20 = v11;
  long long v21 = *(_OWORD *)(a1 + 32);
  char v22 = v12;
  long long v23 = *(_OWORD *)(a1 + 56);
  char v24 = v13;
  uint64_t v25 = v14;
  char v26 = v15;
  uint64_t v27 = v16;
  return TouchBasedMagnifyGesture.phase(state:childPhase:)((uint64_t)v18, a2, a3, a4, a5);
}

uint64_t TouchBasedMagnifyGesture.update(state:childPhase:)(unsigned char *a1, uint64_t a2, double a3)
{
  uint64_t v69 = a2;
  int v70 = a1;
  type metadata accessor for CategoryGesture<MagnifyGesture.Value>(0, &lazy cache variable for type metadata for (DragGesture.Value, DragGesture.Value)?, (uint64_t (*)(uint64_t))type metadata accessor for (DragGesture.Value, DragGesture.Value), MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v4 - 8);
  id v67 = (char *)&v63 - v5;
  uint64_t v6 = type metadata accessor for Date();
  uint64_t v64 = *(void *)(v6 - 8);
  uint64_t v65 = v6;
  MEMORY[0x1F4188790](v6);
  uint64_t v8 = (char *)&v63 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v9);
  char v11 = (char *)&v63 - v10;
  type metadata accessor for (DragGesture.Value, DragGesture.Value)();
  uint64_t v68 = v12;
  uint64_t v66 = *(void *)(v12 - 8);
  MEMORY[0x1F4188790](v12);
  uint64_t v14 = (char *)&v63 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v15);
  double v17 = (char *)&v63 - v16;
  MEMORY[0x1F4188790](v18);
  uint64_t v63 = (uint64_t)&v63 - v19;
  MEMORY[0x1F4188790](v20);
  char v22 = (char *)&v63 - v21;
  type metadata accessor for CategoryGesture<MagnifyGesture.Value>(0, &lazy cache variable for type metadata for GesturePhase<(DragGesture.Value, DragGesture.Value)>, (uint64_t (*)(uint64_t))type metadata accessor for (DragGesture.Value, DragGesture.Value), MEMORY[0x1E4F3F5F8]);
  MEMORY[0x1F4188790](v23);
  uint64_t v25 = (char *)&v63 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v26);
  uint64_t v28 = (char *)&v63 - v27;
  MEMORY[0x1F4188790](v29);
  uint64_t v31 = (char *)&v63 - v30;
  MEMORY[0x1F4188790](v32);
  uint64_t v34 = (char *)&v63 - v33;
  if (*v70)
  {
    uint64_t v35 = (uint64_t)v14;
    uint64_t v36 = v66;
    double v37 = v67;
    _s7SwiftUI22CoordinateSpaceGestureVyAA14TransformEventVGWOcTm_0(v69, (uint64_t)v31, (uint64_t)&lazy cache variable for type metadata for GesturePhase<(DragGesture.Value, DragGesture.Value)>, (uint64_t)type metadata accessor for (DragGesture.Value, DragGesture.Value), MEMORY[0x1E4F3F5F8], (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))type metadata accessor for CategoryGesture<MagnifyGesture.Value>);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if ((EnumCaseMultiPayload - 1) < 2)
    {
      _s7SwiftUI22CoordinateSpaceGestureVyAA14TransformEventVGWOcTm_0((uint64_t)v31, (uint64_t)v25, (uint64_t)&lazy cache variable for type metadata for GesturePhase<(DragGesture.Value, DragGesture.Value)>, (uint64_t)type metadata accessor for (DragGesture.Value, DragGesture.Value), MEMORY[0x1E4F3F5F8], (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))type metadata accessor for CategoryGesture<MagnifyGesture.Value>);
      uint64_t v28 = v25;
      double v39 = v8;
      uint64_t v40 = v68;
      uint64_t v41 = (uint64_t)v37;
      uint64_t v42 = (uint64_t)v17;
      uint64_t v43 = v36;
LABEL_4:
      outlined init with take of (DragGesture.Value, DragGesture.Value)((uint64_t)v28, v35, (uint64_t (*)(void))type metadata accessor for (DragGesture.Value, DragGesture.Value));
      _s7SwiftUI22CoordinateSpaceGestureVyAA14TransformEventVGWOhTm_0((uint64_t)v31, (uint64_t)&lazy cache variable for type metadata for GesturePhase<(DragGesture.Value, DragGesture.Value)>, (uint64_t)type metadata accessor for (DragGesture.Value, DragGesture.Value), MEMORY[0x1E4F3F5F8], (uint64_t (*)(void))type metadata accessor for CategoryGesture<MagnifyGesture.Value>);
      outlined init with take of (DragGesture.Value, DragGesture.Value)(v35, v41, (uint64_t (*)(void))type metadata accessor for (DragGesture.Value, DragGesture.Value));
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v43 + 56))(v41, 0, 1, v40);
      goto LABEL_12;
    }
    double v39 = v8;
    uint64_t v40 = v68;
    uint64_t v41 = (uint64_t)v37;
    uint64_t v42 = (uint64_t)v17;
    uint64_t v43 = v36;
    if (!EnumCaseMultiPayload)
    {
      _s7SwiftUI22CoordinateSpaceGestureVyAA14TransformEventVGWOcTm_0((uint64_t)v31, (uint64_t)v28, (uint64_t)&lazy cache variable for type metadata for GesturePhase<(DragGesture.Value, DragGesture.Value)>, (uint64_t)type metadata accessor for (DragGesture.Value, DragGesture.Value), MEMORY[0x1E4F3F5F8], (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))type metadata accessor for CategoryGesture<MagnifyGesture.Value>);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v36 + 48))(v28, 1, v40) != 1) {
        goto LABEL_4;
      }
      _s7SwiftUI22CoordinateSpaceGestureVyAA14TransformEventVGWOhTm_0((uint64_t)v28, (uint64_t)&lazy cache variable for type metadata for (DragGesture.Value, DragGesture.Value)?, (uint64_t)type metadata accessor for (DragGesture.Value, DragGesture.Value), MEMORY[0x1E4FBB718], (uint64_t (*)(void))type metadata accessor for CategoryGesture<MagnifyGesture.Value>);
    }
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v36 + 56))(v37, 1, 1, v40);
    _s7SwiftUI22CoordinateSpaceGestureVyAA14TransformEventVGWOhTm_0((uint64_t)v31, (uint64_t)&lazy cache variable for type metadata for GesturePhase<(DragGesture.Value, DragGesture.Value)>, (uint64_t)type metadata accessor for (DragGesture.Value, DragGesture.Value), MEMORY[0x1E4F3F5F8], (uint64_t (*)(void))type metadata accessor for CategoryGesture<MagnifyGesture.Value>);
LABEL_12:
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v43 + 48))(v41, 1, v40) == 1) {
      return _s7SwiftUI22CoordinateSpaceGestureVyAA14TransformEventVGWOhTm_0(v41, (uint64_t)&lazy cache variable for type metadata for (DragGesture.Value, DragGesture.Value)?, (uint64_t)type metadata accessor for (DragGesture.Value, DragGesture.Value), MEMORY[0x1E4FBB718], (uint64_t (*)(void))type metadata accessor for CategoryGesture<MagnifyGesture.Value>);
    }
    uint64_t v55 = *(int *)(v40 + 48);
    uint64_t v56 = v42 + v55;
    uint64_t v57 = v41 + v55;
    outlined init with take of (DragGesture.Value, DragGesture.Value)(v41, v42, type metadata accessor for DragGesture.Value);
    outlined init with take of (DragGesture.Value, DragGesture.Value)(v57, v56, type metadata accessor for DragGesture.Value);
    uint64_t v58 = *(int *)(v40 + 48);
    uint64_t v59 = v63;
    uint64_t v60 = v63 + v58;
    outlined init with copy of Tuple<DragGesture.Value, EmptyTuple>(v42, v63, type metadata accessor for DragGesture.Value);
    outlined init with copy of Tuple<DragGesture.Value, EmptyTuple>(v56, v60, type metadata accessor for DragGesture.Value);
    double v61 = static TouchBasedMagnifyGesture.scale(_:)(v39, v59, v60);
    _s7SwiftUI11DragGestureV5ValueVWOhTm_0(v60, type metadata accessor for DragGesture.Value);
    _s7SwiftUI11DragGestureV5ValueVWOhTm_0(v59, type metadata accessor for DragGesture.Value);
    Date.timeIntervalSinceReferenceDate.getter();
    specialized VelocitySampler.addSample(_:time:)(v61, v62);
    (*(void (**)(char *, uint64_t))(v64 + 8))(v39, v65);
    return _s7SwiftUI11DragGestureV5ValueVWOhTm_0(v42, (uint64_t (*)(void))type metadata accessor for (DragGesture.Value, DragGesture.Value));
  }
  _s7SwiftUI22CoordinateSpaceGestureVyAA14TransformEventVGWOcTm_0(v69, (uint64_t)&v63 - v33, (uint64_t)&lazy cache variable for type metadata for GesturePhase<(DragGesture.Value, DragGesture.Value)>, (uint64_t)type metadata accessor for (DragGesture.Value, DragGesture.Value), MEMORY[0x1E4F3F5F8], (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))type metadata accessor for CategoryGesture<MagnifyGesture.Value>);
  if (swift_getEnumCaseMultiPayload() != 1) {
    return _s7SwiftUI22CoordinateSpaceGestureVyAA14TransformEventVGWOhTm_0((uint64_t)v34, (uint64_t)&lazy cache variable for type metadata for GesturePhase<(DragGesture.Value, DragGesture.Value)>, (uint64_t)type metadata accessor for (DragGesture.Value, DragGesture.Value), MEMORY[0x1E4F3F5F8], (uint64_t (*)(void))type metadata accessor for CategoryGesture<MagnifyGesture.Value>);
  }
  uint64_t v44 = v68;
  uint64_t v45 = *(int *)(v68 + 48);
  uint64_t v46 = (uint64_t)&v22[v45];
  uint64_t v47 = (uint64_t)&v34[v45];
  outlined init with take of (DragGesture.Value, DragGesture.Value)((uint64_t)v34, (uint64_t)v22, type metadata accessor for DragGesture.Value);
  outlined init with take of (DragGesture.Value, DragGesture.Value)(v47, v46, type metadata accessor for DragGesture.Value);
  uint64_t v48 = *(int *)(v44 + 48);
  uint64_t v49 = v63;
  uint64_t v50 = v63 + v48;
  outlined init with copy of Tuple<DragGesture.Value, EmptyTuple>((uint64_t)v22, v63, type metadata accessor for DragGesture.Value);
  outlined init with copy of Tuple<DragGesture.Value, EmptyTuple>(v46, v50, type metadata accessor for DragGesture.Value);
  double v51 = static TouchBasedMagnifyGesture.scale(_:)(v11, v49, v50);
  _s7SwiftUI11DragGestureV5ValueVWOhTm_0(v50, type metadata accessor for DragGesture.Value);
  _s7SwiftUI11DragGestureV5ValueVWOhTm_0(v49, type metadata accessor for DragGesture.Value);
  Date.timeIntervalSinceReferenceDate.getter();
  int v52 = v70;
  specialized VelocitySampler.addSample(_:time:)(v51, v53);
  (*(void (**)(char *, uint64_t))(v64 + 8))(v11, v65);
  uint64_t result = _s7SwiftUI11DragGestureV5ValueVWOhTm_0((uint64_t)v22, (uint64_t (*)(void))type metadata accessor for (DragGesture.Value, DragGesture.Value));
  if (fabs(v51 + -1.0) > a3) {
    unsigned char *v52 = 1;
  }
  return result;
}

uint64_t TouchBasedMagnifyGesture.phase(state:childPhase:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X8>)
{
  int v37 = a4;
  uint64_t v36 = a3;
  type metadata accessor for (DragGesture.Value, DragGesture.Value)();
  uint64_t v33 = *(void *)(v8 - 8);
  uint64_t v34 = v8;
  MEMORY[0x1F4188790](v8);
  uint64_t v35 = (uint64_t)&v32 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = MEMORY[0x1E4F3F5F8];
  type metadata accessor for CategoryGesture<MagnifyGesture.Value>(0, &lazy cache variable for type metadata for GesturePhase<(DragGesture.Value, DragGesture.Value)>, (uint64_t (*)(uint64_t))type metadata accessor for (DragGesture.Value, DragGesture.Value), MEMORY[0x1E4F3F5F8]);
  MEMORY[0x1F4188790](v11);
  uint64_t v13 = (char *)&v32 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  uint64_t v16 = (char *)&v32 - v15;
  MEMORY[0x1F4188790](v17);
  uint64_t v19 = (char *)&v32 - v18;
  long long v20 = *(_OWORD *)(a1 + 80);
  v38[4] = *(_OWORD *)(a1 + 64);
  v38[5] = v20;
  uint64_t v39 = *(void *)(a1 + 96);
  long long v21 = *(_OWORD *)(a1 + 16);
  v38[0] = *(_OWORD *)a1;
  v38[1] = v21;
  long long v22 = *(_OWORD *)(a1 + 48);
  _OWORD v38[2] = *(_OWORD *)(a1 + 32);
  _OWORD v38[3] = v22;
  _s7SwiftUI22CoordinateSpaceGestureVyAA14TransformEventVGWOcTm_0(a2, (uint64_t)&v32 - v18, (uint64_t)&lazy cache variable for type metadata for GesturePhase<(DragGesture.Value, DragGesture.Value)>, (uint64_t)type metadata accessor for (DragGesture.Value, DragGesture.Value), v10, (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))type metadata accessor for CategoryGesture<MagnifyGesture.Value>);
  LODWORD(a1) = swift_getEnumCaseMultiPayload();
  _s7SwiftUI22CoordinateSpaceGestureVyAA14TransformEventVGWOhTm_0((uint64_t)v19, (uint64_t)&lazy cache variable for type metadata for GesturePhase<(DragGesture.Value, DragGesture.Value)>, (uint64_t)type metadata accessor for (DragGesture.Value, DragGesture.Value), v10, (uint64_t (*)(void))type metadata accessor for CategoryGesture<MagnifyGesture.Value>);
  if (a1 == 3) {
    goto LABEL_2;
  }
  if (v38[0])
  {
    _s7SwiftUI22CoordinateSpaceGestureVyAA14TransformEventVGWOcTm_0(a2, (uint64_t)v13, (uint64_t)&lazy cache variable for type metadata for GesturePhase<(DragGesture.Value, DragGesture.Value)>, (uint64_t)type metadata accessor for (DragGesture.Value, DragGesture.Value), MEMORY[0x1E4F3F5F8], (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))type metadata accessor for CategoryGesture<MagnifyGesture.Value>);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 1u:
      case 2u:
        uint64_t v29 = v35;
        outlined init with take of (DragGesture.Value, DragGesture.Value)((uint64_t)v13, v35, (uint64_t (*)(void))type metadata accessor for (DragGesture.Value, DragGesture.Value));
        closure #1 in TouchBasedMagnifyGesture.phase(state:childPhase:)(v29, v36, v37, (uint64_t)v38, a5);
        _s7SwiftUI11DragGestureV5ValueVWOhTm_0(v29, (uint64_t (*)(void))type metadata accessor for (DragGesture.Value, DragGesture.Value));
        type metadata accessor for CategoryGesture<MagnifyGesture.Value>(0, &lazy cache variable for type metadata for GesturePhase<MagnifyGesture.Value>, (uint64_t (*)(uint64_t))type metadata accessor for MagnifyGesture.Value, MEMORY[0x1E4F3F5F8]);
        return swift_storeEnumTagMultiPayload();
      case 3u:
        goto LABEL_2;
      default:
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v33 + 48))(v13, 1, v34) == 1)
        {
          uint64_t v25 = type metadata accessor for MagnifyGesture.Value();
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v25 - 8) + 56))(a5, 1, 1, v25);
          type metadata accessor for CategoryGesture<MagnifyGesture.Value>(0, &lazy cache variable for type metadata for GesturePhase<MagnifyGesture.Value>, (uint64_t (*)(uint64_t))type metadata accessor for MagnifyGesture.Value, MEMORY[0x1E4F3F5F8]);
          swift_storeEnumTagMultiPayload();
          return _s7SwiftUI22CoordinateSpaceGestureVyAA14TransformEventVGWOhTm_0((uint64_t)v13, (uint64_t)&lazy cache variable for type metadata for (DragGesture.Value, DragGesture.Value)?, (uint64_t)type metadata accessor for (DragGesture.Value, DragGesture.Value), MEMORY[0x1E4FBB718], (uint64_t (*)(void))type metadata accessor for CategoryGesture<MagnifyGesture.Value>);
        }
        uint64_t v30 = v35;
        outlined init with take of (DragGesture.Value, DragGesture.Value)((uint64_t)v13, v35, (uint64_t (*)(void))type metadata accessor for (DragGesture.Value, DragGesture.Value));
        closure #1 in TouchBasedMagnifyGesture.phase(state:childPhase:)(v30, v36, v37, (uint64_t)v38, a5);
        _s7SwiftUI11DragGestureV5ValueVWOhTm_0(v30, (uint64_t (*)(void))type metadata accessor for (DragGesture.Value, DragGesture.Value));
        uint64_t v31 = type metadata accessor for MagnifyGesture.Value();
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v31 - 8) + 56))(a5, 0, 1, v31);
        uint64_t v28 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E4F3F5F8];
        break;
    }
    goto LABEL_14;
  }
  _s7SwiftUI22CoordinateSpaceGestureVyAA14TransformEventVGWOcTm_0(a2, (uint64_t)v16, (uint64_t)&lazy cache variable for type metadata for GesturePhase<(DragGesture.Value, DragGesture.Value)>, (uint64_t)type metadata accessor for (DragGesture.Value, DragGesture.Value), MEMORY[0x1E4F3F5F8], (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))type metadata accessor for CategoryGesture<MagnifyGesture.Value>);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload != 3)
  {
    if (EnumCaseMultiPayload == 2)
    {
      _s7SwiftUI22CoordinateSpaceGestureVyAA14TransformEventVGWOhTm_0((uint64_t)v16, (uint64_t)&lazy cache variable for type metadata for GesturePhase<(DragGesture.Value, DragGesture.Value)>, (uint64_t)type metadata accessor for (DragGesture.Value, DragGesture.Value), MEMORY[0x1E4F3F5F8], (uint64_t (*)(void))type metadata accessor for CategoryGesture<MagnifyGesture.Value>);
      goto LABEL_2;
    }
    uint64_t v26 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E4F3F5F8];
    _s7SwiftUI22CoordinateSpaceGestureVyAA14TransformEventVGWOhTm_0((uint64_t)v16, (uint64_t)&lazy cache variable for type metadata for GesturePhase<(DragGesture.Value, DragGesture.Value)>, (uint64_t)type metadata accessor for (DragGesture.Value, DragGesture.Value), MEMORY[0x1E4F3F5F8], (uint64_t (*)(void))type metadata accessor for CategoryGesture<MagnifyGesture.Value>);
    uint64_t v27 = type metadata accessor for MagnifyGesture.Value();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v27 - 8) + 56))(a5, 1, 1, v27);
    uint64_t v28 = v26;
LABEL_14:
    type metadata accessor for CategoryGesture<MagnifyGesture.Value>(0, &lazy cache variable for type metadata for GesturePhase<MagnifyGesture.Value>, (uint64_t (*)(uint64_t))type metadata accessor for MagnifyGesture.Value, v28);
    return swift_storeEnumTagMultiPayload();
  }
LABEL_2:
  type metadata accessor for CategoryGesture<MagnifyGesture.Value>(0, &lazy cache variable for type metadata for GesturePhase<MagnifyGesture.Value>, (uint64_t (*)(uint64_t))type metadata accessor for MagnifyGesture.Value, MEMORY[0x1E4F3F5F8]);
  return swift_storeEnumTagMultiPayload();
}

double static TouchBasedMagnifyGesture.scale(_:)(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v50 = a1;
  uint64_t v48 = type metadata accessor for Date();
  uint64_t v51 = *(void *)(v48 - 8);
  MEMORY[0x1F4188790](v48);
  uint64_t v49 = (char *)&v45 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v47 = (char *)&v45 - v7;
  type metadata accessor for (DragGesture.Value, DragGesture.Value)();
  uint64_t v9 = v8 - 8;
  MEMORY[0x1F4188790](v8);
  uint64_t v52 = (uint64_t)&v45 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v11);
  uint64_t v46 = (uint64_t)&v45 - v12;
  MEMORY[0x1F4188790](v13);
  uint64_t v15 = (char *)&v45 - v14;
  MEMORY[0x1F4188790](v16);
  uint64_t v18 = (char *)&v45 - v17;
  MEMORY[0x1F4188790](v19);
  long long v21 = (char *)&v45 - v20;
  long long v22 = (char *)&v45 + *(int *)(v9 + 56) - v20;
  outlined init with copy of Tuple<DragGesture.Value, EmptyTuple>(a2, (uint64_t)&v45 - v20, type metadata accessor for DragGesture.Value);
  outlined init with copy of Tuple<DragGesture.Value, EmptyTuple>(a3, (uint64_t)v22, type metadata accessor for DragGesture.Value);
  uint64_t v23 = (uint64_t)&v18[*(int *)(v9 + 56)];
  outlined init with copy of Tuple<DragGesture.Value, EmptyTuple>((uint64_t)v21, (uint64_t)v18, type metadata accessor for DragGesture.Value);
  outlined init with copy of Tuple<DragGesture.Value, EmptyTuple>((uint64_t)v22, v23, type metadata accessor for DragGesture.Value);
  type metadata accessor for DragGesture.Value(0);
  _s7SwiftUI11DragGestureV5ValueVWOhTm_0((uint64_t)v18, type metadata accessor for DragGesture.Value);
  uint64_t v24 = (uint64_t)&v15[*(int *)(v9 + 56)];
  outlined init with copy of Tuple<DragGesture.Value, EmptyTuple>((uint64_t)v21, (uint64_t)v15, type metadata accessor for DragGesture.Value);
  outlined init with copy of Tuple<DragGesture.Value, EmptyTuple>((uint64_t)v22, v24, type metadata accessor for DragGesture.Value);
  _s7SwiftUI11DragGestureV5ValueVWOhTm_0(v24, type metadata accessor for DragGesture.Value);
  distance(_:_:)();
  double v26 = v25;
  _s7SwiftUI11DragGestureV5ValueVWOhTm_0((uint64_t)v15, type metadata accessor for DragGesture.Value);
  _s7SwiftUI11DragGestureV5ValueVWOhTm_0(v23, type metadata accessor for DragGesture.Value);
  uint64_t v27 = (uint64_t)&v18[*(int *)(v9 + 56)];
  outlined init with copy of Tuple<DragGesture.Value, EmptyTuple>((uint64_t)v21, (uint64_t)v18, type metadata accessor for DragGesture.Value);
  uint64_t v28 = (uint64_t)v22;
  outlined init with copy of Tuple<DragGesture.Value, EmptyTuple>((uint64_t)v22, v27, type metadata accessor for DragGesture.Value);
  _s7SwiftUI11DragGestureV5ValueVWOhTm_0((uint64_t)v18, type metadata accessor for DragGesture.Value);
  uint64_t v29 = (uint64_t)&v15[*(int *)(v9 + 56)];
  outlined init with copy of Tuple<DragGesture.Value, EmptyTuple>((uint64_t)v21, (uint64_t)v15, type metadata accessor for DragGesture.Value);
  outlined init with copy of Tuple<DragGesture.Value, EmptyTuple>((uint64_t)v22, v29, type metadata accessor for DragGesture.Value);
  _s7SwiftUI11DragGestureV5ValueVWOhTm_0(v29, type metadata accessor for DragGesture.Value);
  distance(_:_:)();
  double v31 = v30;
  _s7SwiftUI11DragGestureV5ValueVWOhTm_0((uint64_t)v15, type metadata accessor for DragGesture.Value);
  _s7SwiftUI11DragGestureV5ValueVWOhTm_0(v27, type metadata accessor for DragGesture.Value);
  uint64_t v32 = v46;
  uint64_t v45 = v46 + *(int *)(v9 + 56);
  uint64_t v33 = v45;
  outlined init with copy of Tuple<DragGesture.Value, EmptyTuple>((uint64_t)v21, v46, type metadata accessor for DragGesture.Value);
  outlined init with copy of Tuple<DragGesture.Value, EmptyTuple>((uint64_t)v22, v33, type metadata accessor for DragGesture.Value);
  uint64_t v34 = *(void (**)(char *, uint64_t, uint64_t))(v51 + 16);
  uint64_t v36 = v47;
  uint64_t v35 = v48;
  v34(v47, v32, v48);
  _s7SwiftUI11DragGestureV5ValueVWOhTm_0(v32, type metadata accessor for DragGesture.Value);
  uint64_t v37 = v52 + *(int *)(v9 + 56);
  outlined init with copy of Tuple<DragGesture.Value, EmptyTuple>((uint64_t)v21, v52, type metadata accessor for DragGesture.Value);
  outlined init with copy of Tuple<DragGesture.Value, EmptyTuple>(v28, v37, type metadata accessor for DragGesture.Value);
  double v38 = v49;
  uint64_t v39 = v35;
  v34(v49, v37, v35);
  _s7SwiftUI11DragGestureV5ValueVWOhTm_0(v37, type metadata accessor for DragGesture.Value);
  lazy protocol witness table accessor for type ModifierGesture<StateContainerGesture<TouchBasedMagnifyGesture.StateType, (DragGesture.Value, DragGesture.Value), MagnifyGesture.Value>, _MapGesture<TupleGesture<DragGesture, TupleGesture<DragGesture, EmptyTupleGesture>>, (DragGesture.Value, DragGesture.Value)>> and conformance ModifierGesture<A, B>((unint64_t *)&lazy protocol witness table cache variable for type Date and conformance Date, MEMORY[0x1E4F27928]);
  if (dispatch thunk of static Comparable.>= infix(_:_:)()) {
    uint64_t v40 = v38;
  }
  else {
    uint64_t v40 = v36;
  }
  uint64_t v41 = v36;
  uint64_t v42 = v38;
  v34(v50, (uint64_t)v40, v39);
  uint64_t v43 = *(void (**)(char *, uint64_t))(v51 + 8);
  v43(v42, v39);
  v43(v41, v39);
  _s7SwiftUI11DragGestureV5ValueVWOhTm_0((uint64_t)v21, (uint64_t (*)(void))type metadata accessor for (DragGesture.Value, DragGesture.Value));
  _s7SwiftUI11DragGestureV5ValueVWOhTm_0(v52, type metadata accessor for DragGesture.Value);
  _s7SwiftUI11DragGestureV5ValueVWOhTm_0(v45, type metadata accessor for DragGesture.Value);
  return v26 / v31;
}

int *closure #1 in TouchBasedMagnifyGesture.phase(state:childPhase:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v51 = a4;
  int v50 = a3;
  uint64_t v49 = a2;
  uint64_t v52 = a5;
  type metadata accessor for (DragGesture.Value, DragGesture.Value)();
  uint64_t v7 = v6 - 8;
  MEMORY[0x1F4188790](v6);
  uint64_t v9 = (char *)&v45 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v10);
  uint64_t v12 = (char *)&v45 - v11;
  uint64_t v48 = type metadata accessor for Date();
  uint64_t v47 = *(void *)(v48 - 8);
  MEMORY[0x1F4188790](v48);
  uint64_t v46 = (char *)&v45 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  uint64_t v16 = (char *)&v45 - v15;
  uint64_t v45 = (char *)&v45 - v15;
  uint64_t v17 = *(int *)(v7 + 56);
  uint64_t v18 = (uint64_t)&v12[v17];
  uint64_t v19 = a1 + v17;
  outlined init with copy of Tuple<DragGesture.Value, EmptyTuple>(a1, (uint64_t)v12, type metadata accessor for DragGesture.Value);
  outlined init with copy of Tuple<DragGesture.Value, EmptyTuple>(v19, v18, type metadata accessor for DragGesture.Value);
  double v20 = static TouchBasedMagnifyGesture.scale(_:)(v16, (uint64_t)v12, v18);
  _s7SwiftUI11DragGestureV5ValueVWOhTm_0(v18, type metadata accessor for DragGesture.Value);
  _s7SwiftUI11DragGestureV5ValueVWOhTm_0((uint64_t)v12, type metadata accessor for DragGesture.Value);
  uint64_t v21 = (uint64_t)&v12[*(int *)(v7 + 56)];
  outlined init with copy of Tuple<DragGesture.Value, EmptyTuple>(a1, (uint64_t)v12, type metadata accessor for DragGesture.Value);
  outlined init with copy of Tuple<DragGesture.Value, EmptyTuple>(v19, v21, type metadata accessor for DragGesture.Value);
  type metadata accessor for DragGesture.Value(0);
  _s7SwiftUI11DragGestureV5ValueVWOhTm_0((uint64_t)v12, type metadata accessor for DragGesture.Value);
  uint64_t v22 = (uint64_t)&v9[*(int *)(v7 + 56)];
  outlined init with copy of Tuple<DragGesture.Value, EmptyTuple>(a1, (uint64_t)v9, type metadata accessor for DragGesture.Value);
  outlined init with copy of Tuple<DragGesture.Value, EmptyTuple>(v19, v22, type metadata accessor for DragGesture.Value);
  _s7SwiftUI11DragGestureV5ValueVWOhTm_0(v22, type metadata accessor for DragGesture.Value);
  _s7SwiftUI11DragGestureV5ValueVWOhTm_0((uint64_t)v9, type metadata accessor for DragGesture.Value);
  _s7SwiftUI11DragGestureV5ValueVWOhTm_0(v21, type metadata accessor for DragGesture.Value);
  uint64_t v23 = (uint64_t)&v12[*(int *)(v7 + 56)];
  outlined init with copy of Tuple<DragGesture.Value, EmptyTuple>(a1, (uint64_t)v12, type metadata accessor for DragGesture.Value);
  outlined init with copy of Tuple<DragGesture.Value, EmptyTuple>(v19, v23, type metadata accessor for DragGesture.Value);
  _s7SwiftUI11DragGestureV5ValueVWOhTm_0((uint64_t)v12, type metadata accessor for DragGesture.Value);
  uint64_t v24 = (uint64_t)&v9[*(int *)(v7 + 56)];
  outlined init with copy of Tuple<DragGesture.Value, EmptyTuple>(a1, (uint64_t)v9, type metadata accessor for DragGesture.Value);
  outlined init with copy of Tuple<DragGesture.Value, EmptyTuple>(v19, v24, type metadata accessor for DragGesture.Value);
  _s7SwiftUI11DragGestureV5ValueVWOhTm_0(v24, type metadata accessor for DragGesture.Value);
  _s7SwiftUI11DragGestureV5ValueVWOhTm_0((uint64_t)v9, type metadata accessor for DragGesture.Value);
  _s7SwiftUI11DragGestureV5ValueVWOhTm_0(v23, type metadata accessor for DragGesture.Value);
  double v25 = TransformGestureAnchorHelper.startPoints(_:)();
  uint64_t v27 = v26;
  uint64_t v29 = v28;
  uint64_t v31 = v30;
  uint64_t v32 = v47;
  uint64_t v33 = v46;
  uint64_t v34 = v45;
  uint64_t v35 = v48;
  (*(void (**)(char *, char *, uint64_t))(v47 + 16))(v46, v45, v48);
  long long v36 = *(_OWORD *)(v51 + 56);
  long long v55 = *(_OWORD *)(v51 + 40);
  long long v56 = v36;
  long long v37 = *(_OWORD *)(v51 + 88);
  long long v57 = *(_OWORD *)(v51 + 72);
  long long v58 = v37;
  long long v38 = *(_OWORD *)(v51 + 24);
  long long v53 = *(_OWORD *)(v51 + 8);
  long long v54 = v38;
  double v39 = specialized VelocitySampler.velocity.getter();
  (*(void (**)(char *, uint64_t))(v32 + 8))(v34, v35);
  uint64_t v40 = *(void (**)(uint64_t, char *, uint64_t))(v32 + 32);
  uint64_t v41 = v52;
  v40(v52, v33, v35);
  uint64_t result = (int *)type metadata accessor for MagnifyGesture.Value();
  *(double *)(v41 + result[5]) = v20;
  *(double *)(v41 + result[6]) = v39;
  uint64_t v43 = (double *)(v41 + result[7]);
  *uint64_t v43 = v25;
  *((void *)v43 + 1) = v27;
  uint64_t v44 = (void *)(v41 + result[8]);
  *uint64_t v44 = v29;
  v44[1] = v31;
  return result;
}

uint64_t protocol witness for Gesture.body.getter in conformance TouchBasedMagnifyGesture@<X0>(uint64_t a1@<X8>)
{
  return TouchBasedMagnifyGesture.body.getter(*(void *)(v1 + 8), *(_DWORD *)(v1 + 16), a1, *(double *)v1);
}

BOOL specialized static MagnifyGesture.Value.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  if ((static Date.== infix(_:_:)() & 1) == 0) {
    return 0;
  }
  uint64_t v4 = type metadata accessor for MagnifyGesture.Value();
  if (*(double *)(a1 + *(int *)(v4 + 20)) != *(double *)(a2 + *(int *)(v4 + 20))) {
    return 0;
  }
  uint64_t v5 = v4;
  if (*(double *)(a1 + *(int *)(v4 + 24)) != *(double *)(a2 + *(int *)(v4 + 24))
    || (static UnitPoint.== infix(_:_:)() & 1) == 0)
  {
    return 0;
  }
  uint64_t v6 = *(int *)(v5 + 32);
  double v7 = *(double *)(a1 + v6);
  double v8 = *(double *)(a1 + v6 + 8);
  uint64_t v9 = (double *)(a2 + v6);
  double v10 = v9[1];
  BOOL v11 = v7 == *v9;
  return v8 == v10 && v11;
}

void type metadata accessor for _MapGesture<SimultaneousGesture<TransformBasedMagnifyGesture, TouchBasedMagnifyGesture>, MagnifyGesture.Value>()
{
  if (!lazy cache variable for type metadata for _MapGesture<SimultaneousGesture<TransformBasedMagnifyGesture, TouchBasedMagnifyGesture>, MagnifyGesture.Value>)
  {
    type metadata accessor for SimultaneousGesture<TransformBasedMagnifyGesture, TouchBasedMagnifyGesture>(255, (unint64_t *)&lazy cache variable for type metadata for SimultaneousGesture<TransformBasedMagnifyGesture, TouchBasedMagnifyGesture>, MEMORY[0x1E4F404E0]);
    type metadata accessor for MagnifyGesture.Value();
    lazy protocol witness table accessor for type SimultaneousGesture<TransformBasedMagnifyGesture, TouchBasedMagnifyGesture> and conformance SimultaneousGesture<A, B>();
    unint64_t v0 = type metadata accessor for _MapGesture();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _MapGesture<SimultaneousGesture<TransformBasedMagnifyGesture, TouchBasedMagnifyGesture>, MagnifyGesture.Value>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type TransformBasedMagnifyGesture and conformance TransformBasedMagnifyGesture()
{
  unint64_t result = lazy protocol witness table cache variable for type TransformBasedMagnifyGesture and conformance TransformBasedMagnifyGesture;
  if (!lazy protocol witness table cache variable for type TransformBasedMagnifyGesture and conformance TransformBasedMagnifyGesture)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TransformBasedMagnifyGesture and conformance TransformBasedMagnifyGesture);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type TouchBasedMagnifyGesture and conformance TouchBasedMagnifyGesture()
{
  unint64_t result = lazy protocol witness table cache variable for type TouchBasedMagnifyGesture and conformance TouchBasedMagnifyGesture;
  if (!lazy protocol witness table cache variable for type TouchBasedMagnifyGesture and conformance TouchBasedMagnifyGesture)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TouchBasedMagnifyGesture and conformance TouchBasedMagnifyGesture);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type SimultaneousGesture<TransformBasedMagnifyGesture, TouchBasedMagnifyGesture> and conformance SimultaneousGesture<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type SimultaneousGesture<TransformBasedMagnifyGesture, TouchBasedMagnifyGesture> and conformance SimultaneousGesture<A, B>;
  if (!lazy protocol witness table cache variable for type SimultaneousGesture<TransformBasedMagnifyGesture, TouchBasedMagnifyGesture> and conformance SimultaneousGesture<A, B>)
  {
    type metadata accessor for SimultaneousGesture<TransformBasedMagnifyGesture, TouchBasedMagnifyGesture>(255, (unint64_t *)&lazy cache variable for type metadata for SimultaneousGesture<TransformBasedMagnifyGesture, TouchBasedMagnifyGesture>, MEMORY[0x1E4F404E0]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SimultaneousGesture<TransformBasedMagnifyGesture, TouchBasedMagnifyGesture> and conformance SimultaneousGesture<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type CategoryGesture<MagnifyGesture.Value> and conformance CategoryGesture<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type CategoryGesture<MagnifyGesture.Value> and conformance CategoryGesture<A>;
  if (!lazy protocol witness table cache variable for type CategoryGesture<MagnifyGesture.Value> and conformance CategoryGesture<A>)
  {
    type metadata accessor for CategoryGesture<MagnifyGesture.Value>(255, (unint64_t *)&lazy cache variable for type metadata for CategoryGesture<MagnifyGesture.Value>, (uint64_t (*)(uint64_t))type metadata accessor for MagnifyGesture.Value, MEMORY[0x1E4F3FAC8]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CategoryGesture<MagnifyGesture.Value> and conformance CategoryGesture<A>);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type _MapGesture<SimultaneousGesture<TransformBasedMagnifyGesture, TouchBasedMagnifyGesture>, MagnifyGesture.Value> and conformance _MapGesture<A, B>()
{
  return lazy protocol witness table accessor for type ModifierGesture<StateContainerGesture<TouchBasedMagnifyGesture.StateType, (DragGesture.Value, DragGesture.Value), MagnifyGesture.Value>, _MapGesture<TupleGesture<DragGesture, TupleGesture<DragGesture, EmptyTupleGesture>>, (DragGesture.Value, DragGesture.Value)>> and conformance ModifierGesture<A, B>(&lazy protocol witness table cache variable for type _MapGesture<SimultaneousGesture<TransformBasedMagnifyGesture, TouchBasedMagnifyGesture>, MagnifyGesture.Value> and conformance _MapGesture<A, B>, (void (*)(uint64_t))type metadata accessor for _MapGesture<SimultaneousGesture<TransformBasedMagnifyGesture, TouchBasedMagnifyGesture>, MagnifyGesture.Value>);
}

uint64_t lazy protocol witness table accessor for type ModifierGesture<StateContainerGesture<TouchBasedMagnifyGesture.StateType, (DragGesture.Value, DragGesture.Value), MagnifyGesture.Value>, _MapGesture<TupleGesture<DragGesture, TupleGesture<DragGesture, EmptyTupleGesture>>, (DragGesture.Value, DragGesture.Value)>> and conformance ModifierGesture<A, B>(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type MagnifyGesture.Child and conformance MagnifyGesture.Child()
{
  unint64_t result = lazy protocol witness table cache variable for type MagnifyGesture.Child and conformance MagnifyGesture.Child;
  if (!lazy protocol witness table cache variable for type MagnifyGesture.Child and conformance MagnifyGesture.Child)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MagnifyGesture.Child and conformance MagnifyGesture.Child);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type ModifierGesture<CategoryGesture<MagnifyGesture.Value>, ModifierGesture<StateContainerGesture<TouchBasedMagnifyGesture.StateType, (DragGesture.Value, DragGesture.Value), MagnifyGesture.Value>, _MapGesture<TupleGesture<DragGesture, TupleGesture<DragGesture, EmptyTupleGesture>>, (DragGesture.Value, DragGesture.Value)>>> and conformance ModifierGesture<A, B>(unint64_t *a1, unint64_t *a2, void (*a3)(uint64_t), void (*a4)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for ModifierGesture<CategoryGesture<MagnifyGesture.Value>, _MapGesture<SimultaneousGesture<TransformBasedMagnifyGesture, TouchBasedMagnifyGesture>, MagnifyGesture.Value>>(255, a2, a3, a4);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t associated type witness table accessor for PubliclyPrimitiveGesture.InternalBody : Gesture in MagnificationGesture()
{
  return swift_getOpaqueTypeConformance2();
}

_UNKNOWN **base witness table accessor for Gesture in MagnificationGesture()
{
  return &protocol witness table for MagnificationGesture;
}

_UNKNOWN **base witness table accessor for Gesture in MagnifyGesture()
{
  return &protocol witness table for MagnifyGesture;
}

ValueMetadata *type metadata accessor for MagnificationGesture()
{
  return &type metadata for MagnificationGesture;
}

ValueMetadata *type metadata accessor for MagnifyGesture()
{
  return &type metadata for MagnifyGesture;
}

uint64_t getEnumTagSinglePayload for MagnifyGesture.Value(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_187BE36F8);
}

uint64_t sub_187BE36F8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Date();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48);

  return v5(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for MagnifyGesture.Value(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_187BE3778);
}

uint64_t sub_187BE3778(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Date();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);

  return v5(a1, a2, a2, v4);
}

uint64_t type metadata completion function for MagnifyGesture.Value()
{
  uint64_t result = type metadata accessor for Date();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_187BE389C()
{
  return lazy protocol witness table accessor for type ModifierGesture<StateContainerGesture<TouchBasedMagnifyGesture.StateType, (DragGesture.Value, DragGesture.Value), MagnifyGesture.Value>, _MapGesture<TupleGesture<DragGesture, TupleGesture<DragGesture, EmptyTupleGesture>>, (DragGesture.Value, DragGesture.Value)>> and conformance ModifierGesture<A, B>(&lazy protocol witness table cache variable for type _MapGesture<MagnifyGesture, CGFloat> and conformance _MapGesture<A, B>, (void (*)(uint64_t))type metadata accessor for _MapGesture<MagnifyGesture, CGFloat>);
}

void type metadata accessor for _MapGesture<MagnifyGesture, CGFloat>()
{
  if (!lazy cache variable for type metadata for _MapGesture<MagnifyGesture, CGFloat>)
  {
    unint64_t v0 = type metadata accessor for _MapGesture();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _MapGesture<MagnifyGesture, CGFloat>);
    }
  }
}

ValueMetadata *type metadata accessor for MagnifyGesture.Value.Platform()
{
  return &type metadata for MagnifyGesture.Value.Platform;
}

void *type metadata accessor for MagnifyGesture.Child()
{
  return &unk_1ED4173E0;
}

ValueMetadata *type metadata accessor for TouchBasedMagnifyGesture()
{
  return &type metadata for TouchBasedMagnifyGesture;
}

ValueMetadata *type metadata accessor for TransformBasedMagnifyGesture()
{
  return &type metadata for TransformBasedMagnifyGesture;
}

uint64_t associated type witness table accessor for Gesture.Body : Gesture in TouchBasedMagnifyGesture()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for Gesture.Body : Gesture in TransformBasedMagnifyGesture()
{
  return swift_getOpaqueTypeConformance2();
}

void type metadata accessor for _GraphValue<MagnifyGesture>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

uint64_t sub_187BE3A14()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in TransformBasedMagnifyGesture.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return closure #1 in TransformBasedMagnifyGesture.body.getter(a1, a2, a3, *(double *)(v3 + 16));
}

uint64_t sub_187BE3A34()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in TouchBasedMagnifyGesture.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return closure #2 in TouchBasedMagnifyGesture.body.getter(a1, a2, *(void *)(v3 + 24), *(_DWORD *)(v3 + 32), a3, *(double *)(v3 + 16));
}

void type metadata accessor for ModifierGesture<StateContainerGesture<TouchBasedMagnifyGesture.StateType, (DragGesture.Value, DragGesture.Value), MagnifyGesture.Value>, _MapGesture<TupleGesture<DragGesture, TupleGesture<DragGesture, EmptyTupleGesture>>, (DragGesture.Value, DragGesture.Value)>>()
{
  if (!lazy cache variable for type metadata for ModifierGesture<StateContainerGesture<TouchBasedMagnifyGesture.StateType, (DragGesture.Value, DragGesture.Value), MagnifyGesture.Value>, _MapGesture<TupleGesture<DragGesture, TupleGesture<DragGesture, EmptyTupleGesture>>, (DragGesture.Value, DragGesture.Value)>>)
  {
    type metadata accessor for StateContainerGesture<TouchBasedMagnifyGesture.StateType, (DragGesture.Value, DragGesture.Value), MagnifyGesture.Value>();
    type metadata accessor for _MapGesture<TupleGesture<DragGesture, TupleGesture<DragGesture, EmptyTupleGesture>>, (DragGesture.Value, DragGesture.Value)>();
    lazy protocol witness table accessor for type ModifierGesture<StateContainerGesture<TouchBasedMagnifyGesture.StateType, (DragGesture.Value, DragGesture.Value), MagnifyGesture.Value>, _MapGesture<TupleGesture<DragGesture, TupleGesture<DragGesture, EmptyTupleGesture>>, (DragGesture.Value, DragGesture.Value)>> and conformance ModifierGesture<A, B>(&lazy protocol witness table cache variable for type StateContainerGesture<TouchBasedMagnifyGesture.StateType, (DragGesture.Value, DragGesture.Value), MagnifyGesture.Value> and conformance StateContainerGesture<A, B, C>, (void (*)(uint64_t))type metadata accessor for StateContainerGesture<TouchBasedMagnifyGesture.StateType, (DragGesture.Value, DragGesture.Value), MagnifyGesture.Value>);
    lazy protocol witness table accessor for type ModifierGesture<StateContainerGesture<TouchBasedMagnifyGesture.StateType, (DragGesture.Value, DragGesture.Value), MagnifyGesture.Value>, _MapGesture<TupleGesture<DragGesture, TupleGesture<DragGesture, EmptyTupleGesture>>, (DragGesture.Value, DragGesture.Value)>> and conformance ModifierGesture<A, B>(&lazy protocol witness table cache variable for type _MapGesture<TupleGesture<DragGesture, TupleGesture<DragGesture, EmptyTupleGesture>>, (DragGesture.Value, DragGesture.Value)> and conformance _MapGesture<A, B>, (void (*)(uint64_t))type metadata accessor for _MapGesture<TupleGesture<DragGesture, TupleGesture<DragGesture, EmptyTupleGesture>>, (DragGesture.Value, DragGesture.Value)>);
    unint64_t v0 = type metadata accessor for ModifierGesture();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifierGesture<StateContainerGesture<TouchBasedMagnifyGesture.StateType, (DragGesture.Value, DragGesture.Value), MagnifyGesture.Value>, _MapGesture<TupleGesture<DragGesture, TupleGesture<DragGesture, EmptyTupleGesture>>, (DragGesture.Value, DragGesture.Value)>>);
    }
  }
}

void type metadata accessor for StateContainerGesture<TouchBasedMagnifyGesture.StateType, (DragGesture.Value, DragGesture.Value), MagnifyGesture.Value>()
{
  if (!lazy cache variable for type metadata for StateContainerGesture<TouchBasedMagnifyGesture.StateType, (DragGesture.Value, DragGesture.Value), MagnifyGesture.Value>)
  {
    type metadata accessor for (DragGesture.Value, DragGesture.Value)();
    type metadata accessor for MagnifyGesture.Value();
    lazy protocol witness table accessor for type TouchBasedMagnifyGesture.StateType and conformance TouchBasedMagnifyGesture.StateType();
    unint64_t v0 = type metadata accessor for StateContainerGesture();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for StateContainerGesture<TouchBasedMagnifyGesture.StateType, (DragGesture.Value, DragGesture.Value), MagnifyGesture.Value>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type TouchBasedMagnifyGesture.StateType and conformance TouchBasedMagnifyGesture.StateType()
{
  unint64_t result = lazy protocol witness table cache variable for type TouchBasedMagnifyGesture.StateType and conformance TouchBasedMagnifyGesture.StateType;
  if (!lazy protocol witness table cache variable for type TouchBasedMagnifyGesture.StateType and conformance TouchBasedMagnifyGesture.StateType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TouchBasedMagnifyGesture.StateType and conformance TouchBasedMagnifyGesture.StateType);
  }
  return result;
}

uint64_t _s7SwiftUI22CoordinateSpaceGestureVyAA14TransformEventVGWOcTm_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(void, uint64_t, uint64_t, uint64_t))
{
  uint64_t v8 = a6(0, a3, a4, a5);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 16))(a2, a1, v8);
  return a2;
}

uint64_t _s7SwiftUI22CoordinateSpaceGestureVyAA14TransformEventVGWOhTm_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  uint64_t v6 = a5(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(a1, v6);
  return a1;
}

void type metadata accessor for CategoryGesture<MagnifyGesture.Value>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

uint64_t outlined init with copy of SimultaneousGesture<TransformBasedMagnifyGesture, TouchBasedMagnifyGesture>.Value(uint64_t a1, uint64_t a2)
{
  type metadata accessor for SimultaneousGesture<TransformBasedMagnifyGesture, TouchBasedMagnifyGesture>(0, (unint64_t *)&lazy cache variable for type metadata for SimultaneousGesture<TransformBasedMagnifyGesture, TouchBasedMagnifyGesture>.Value, MEMORY[0x1E4F404D8]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of SimultaneousGesture<TransformBasedMagnifyGesture, TouchBasedMagnifyGesture>.Value(uint64_t a1)
{
  type metadata accessor for SimultaneousGesture<TransformBasedMagnifyGesture, TouchBasedMagnifyGesture>(0, (unint64_t *)&lazy cache variable for type metadata for SimultaneousGesture<TransformBasedMagnifyGesture, TouchBasedMagnifyGesture>.Value, MEMORY[0x1E4F404D8]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t outlined init with take of (DragGesture.Value, DragGesture.Value)(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

void *type metadata accessor for TransformBasedMagnifyGesture.StateType()
{
  return &unk_1ED454BD8;
}

uint64_t getEnumTagSinglePayload for TouchBasedMagnifyGesture.StateType(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && a1[104]) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *a1;
  BOOL v4 = v3 >= 2;
  int v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for TouchBasedMagnifyGesture.StateType(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)unint64_t result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 104) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 104) = 0;
    }
    if (a2) {
      *(unsigned char *)unint64_t result = a2 + 1;
    }
  }
  return result;
}

void *type metadata accessor for TouchBasedMagnifyGesture.StateType()
{
  return &unk_1ED444710;
}

uint64_t sub_187BE3F88()
{
  return lazy protocol witness table accessor for type ModifierGesture<StateContainerGesture<TouchBasedMagnifyGesture.StateType, (DragGesture.Value, DragGesture.Value), MagnifyGesture.Value>, _MapGesture<TupleGesture<DragGesture, TupleGesture<DragGesture, EmptyTupleGesture>>, (DragGesture.Value, DragGesture.Value)>> and conformance ModifierGesture<A, B>(&lazy protocol witness table cache variable for type ModifierGesture<StateContainerGesture<TransformBasedMagnifyGesture.StateType, TransformEvent, MagnifyGesture.Value>, ModifierGesture<CoordinateSpaceGesture<TransformEvent>, EventListener<TransformEvent>>> and conformance ModifierGesture<A, B>, (void (*)(uint64_t))type metadata accessor for ModifierGesture<StateContainerGesture<TransformBasedMagnifyGesture.StateType, TransformEvent, MagnifyGesture.Value>, ModifierGesture<CoordinateSpaceGesture<TransformEvent>, EventListener<TransformEvent>>>);
}

void type metadata accessor for ModifierGesture<StateContainerGesture<TransformBasedMagnifyGesture.StateType, TransformEvent, MagnifyGesture.Value>, ModifierGesture<CoordinateSpaceGesture<TransformEvent>, EventListener<TransformEvent>>>()
{
  if (!lazy cache variable for type metadata for ModifierGesture<StateContainerGesture<TransformBasedMagnifyGesture.StateType, TransformEvent, MagnifyGesture.Value>, ModifierGesture<CoordinateSpaceGesture<TransformEvent>, EventListener<TransformEvent>>>)
  {
    type metadata accessor for StateContainerGesture<TransformBasedMagnifyGesture.StateType, TransformEvent, MagnifyGesture.Value>();
    type metadata accessor for ModifierGesture<CoordinateSpaceGesture<TransformEvent>, EventListener<TransformEvent>>();
    lazy protocol witness table accessor for type ModifierGesture<StateContainerGesture<TouchBasedMagnifyGesture.StateType, (DragGesture.Value, DragGesture.Value), MagnifyGesture.Value>, _MapGesture<TupleGesture<DragGesture, TupleGesture<DragGesture, EmptyTupleGesture>>, (DragGesture.Value, DragGesture.Value)>> and conformance ModifierGesture<A, B>(&lazy protocol witness table cache variable for type StateContainerGesture<TransformBasedMagnifyGesture.StateType, TransformEvent, MagnifyGesture.Value> and conformance StateContainerGesture<A, B, C>, (void (*)(uint64_t))type metadata accessor for StateContainerGesture<TransformBasedMagnifyGesture.StateType, TransformEvent, MagnifyGesture.Value>);
    lazy protocol witness table accessor for type ModifierGesture<StateContainerGesture<TouchBasedMagnifyGesture.StateType, (DragGesture.Value, DragGesture.Value), MagnifyGesture.Value>, _MapGesture<TupleGesture<DragGesture, TupleGesture<DragGesture, EmptyTupleGesture>>, (DragGesture.Value, DragGesture.Value)>> and conformance ModifierGesture<A, B>(&lazy protocol witness table cache variable for type ModifierGesture<CoordinateSpaceGesture<TransformEvent>, EventListener<TransformEvent>> and conformance ModifierGesture<A, B>, (void (*)(uint64_t))type metadata accessor for ModifierGesture<CoordinateSpaceGesture<TransformEvent>, EventListener<TransformEvent>>);
    unint64_t v0 = type metadata accessor for ModifierGesture();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifierGesture<StateContainerGesture<TransformBasedMagnifyGesture.StateType, TransformEvent, MagnifyGesture.Value>, ModifierGesture<CoordinateSpaceGesture<TransformEvent>, EventListener<TransformEvent>>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type TransformBasedMagnifyGesture.StateType and conformance TransformBasedMagnifyGesture.StateType()
{
  unint64_t result = lazy protocol witness table cache variable for type TransformBasedMagnifyGesture.StateType and conformance TransformBasedMagnifyGesture.StateType;
  if (!lazy protocol witness table cache variable for type TransformBasedMagnifyGesture.StateType and conformance TransformBasedMagnifyGesture.StateType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TransformBasedMagnifyGesture.StateType and conformance TransformBasedMagnifyGesture.StateType);
  }
  return result;
}

uint64_t sub_187BE4110()
{
  return lazy protocol witness table accessor for type ModifierGesture<CategoryGesture<MagnifyGesture.Value>, ModifierGesture<StateContainerGesture<TouchBasedMagnifyGesture.StateType, (DragGesture.Value, DragGesture.Value), MagnifyGesture.Value>, _MapGesture<TupleGesture<DragGesture, TupleGesture<DragGesture, EmptyTupleGesture>>, (DragGesture.Value, DragGesture.Value)>>> and conformance ModifierGesture<A, B>(&lazy protocol witness table cache variable for type ModifierGesture<CategoryGesture<MagnifyGesture.Value>, ModifierGesture<StateContainerGesture<TouchBasedMagnifyGesture.StateType, (DragGesture.Value, DragGesture.Value), MagnifyGesture.Value>, _MapGesture<TupleGesture<DragGesture, TupleGesture<DragGesture, EmptyTupleGesture>>, (DragGesture.Value, DragGesture.Value)>>> and conformance ModifierGesture<A, B>, &lazy cache variable for type metadata for ModifierGesture<CategoryGesture<MagnifyGesture.Value>, ModifierGesture<StateContainerGesture<TouchBasedMagnifyGesture.StateType, (DragGesture.Value, DragGesture.Value), MagnifyGesture.Value>, _MapGesture<TupleGesture<DragGesture, TupleGesture<DragGesture, EmptyTupleGesture>>, (DragGesture.Value, DragGesture.Value)>>>, (void (*)(uint64_t))type metadata accessor for ModifierGesture<StateContainerGesture<TouchBasedMagnifyGesture.StateType, (DragGesture.Value, DragGesture.Value), MagnifyGesture.Value>, _MapGesture<TupleGesture<DragGesture, TupleGesture<DragGesture, EmptyTupleGesture>>, (DragGesture.Value, DragGesture.Value)>>, (void (*)(void))lazy protocol witness table accessor for type ModifierGesture<StateContainerGesture<TouchBasedMagnifyGesture.StateType, (DragGesture.Value, DragGesture.Value), MagnifyGesture.Value>, _MapGesture<TupleGesture<DragGesture, TupleGesture<DragGesture, EmptyTupleGesture>>, (DragGesture.Value, DragGesture.Value)>> and conformance ModifierGesture<A, B>);
}

void type metadata accessor for ModifierGesture<CategoryGesture<MagnifyGesture.Value>, _MapGesture<SimultaneousGesture<TransformBasedMagnifyGesture, TouchBasedMagnifyGesture>, MagnifyGesture.Value>>(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t), void (*a4)(void))
{
  if (!*a2)
  {
    type metadata accessor for CategoryGesture<MagnifyGesture.Value>(255, (unint64_t *)&lazy cache variable for type metadata for CategoryGesture<MagnifyGesture.Value>, (uint64_t (*)(uint64_t))type metadata accessor for MagnifyGesture.Value, MEMORY[0x1E4F3FAC8]);
    a3(255);
    lazy protocol witness table accessor for type CategoryGesture<MagnifyGesture.Value> and conformance CategoryGesture<A>();
    a4();
    unint64_t v7 = type metadata accessor for ModifierGesture();
    if (!v8) {
      atomic_store(v7, a2);
    }
  }
}

uint64_t lazy protocol witness table accessor for type ModifierGesture<StateContainerGesture<TouchBasedMagnifyGesture.StateType, (DragGesture.Value, DragGesture.Value), MagnifyGesture.Value>, _MapGesture<TupleGesture<DragGesture, TupleGesture<DragGesture, EmptyTupleGesture>>, (DragGesture.Value, DragGesture.Value)>> and conformance ModifierGesture<A, B>()
{
  return lazy protocol witness table accessor for type ModifierGesture<StateContainerGesture<TouchBasedMagnifyGesture.StateType, (DragGesture.Value, DragGesture.Value), MagnifyGesture.Value>, _MapGesture<TupleGesture<DragGesture, TupleGesture<DragGesture, EmptyTupleGesture>>, (DragGesture.Value, DragGesture.Value)>> and conformance ModifierGesture<A, B>(&lazy protocol witness table cache variable for type ModifierGesture<StateContainerGesture<TouchBasedMagnifyGesture.StateType, (DragGesture.Value, DragGesture.Value), MagnifyGesture.Value>, _MapGesture<TupleGesture<DragGesture, TupleGesture<DragGesture, EmptyTupleGesture>>, (DragGesture.Value, DragGesture.Value)>> and conformance ModifierGesture<A, B>, (void (*)(uint64_t))type metadata accessor for ModifierGesture<StateContainerGesture<TouchBasedMagnifyGesture.StateType, (DragGesture.Value, DragGesture.Value), MagnifyGesture.Value>, _MapGesture<TupleGesture<DragGesture, TupleGesture<DragGesture, EmptyTupleGesture>>, (DragGesture.Value, DragGesture.Value)>>);
}

uint64_t associated type witness table accessor for PrimitiveButtonStyle.Body : View in SidebarButtonStyle()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t SidebarButtonStyle.makeBody(configuration:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v28 = a1;
  uint64_t v29 = a4;
  uint64_t v27 = type metadata accessor for SidebarButtonStyle._Body(0);
  MEMORY[0x1F4188790](v27);
  unint64_t v7 = (char *)&v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v8);
  double v10 = (char *)&v26 - v9;
  uint64_t v11 = type metadata accessor for PrimitiveButtonStyleConfiguration(0);
  MEMORY[0x1F4188790](v11);
  uint64_t v13 = (char *)&v26 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  _s7SwiftUI6ButtonVyAA09PrimitiveC18StyleConfigurationV5LabelVGMaTm_3(0, (unint64_t *)&lazy cache variable for type metadata for Button<PrimitiveButtonStyleConfiguration.Label>, (uint64_t)&type metadata for PrimitiveButtonStyleConfiguration.Label, (uint64_t)&protocol witness table for PrimitiveButtonStyleConfiguration.Label, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for Button);
  uint64_t v15 = v14;
  MEMORY[0x1F4188790](v14);
  uint64_t v17 = (char *)&v26 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v18);
  double v20 = (char *)&v26 - v19;
  uint64_t v21 = a3 & 1;
  outlined copy of Environment<Bool>.Content(a2, v21);
  int v22 = specialized Environment.wrappedValue.getter(a2, v21);
  outlined consume of Environment<Bool?>.Content(a2, v21);
  if (v22 == 2)
  {
    _s7SwiftUI33PrimitiveButtonStyleConfigurationVWOcTm_5(v28, (uint64_t)v7, type metadata accessor for PrimitiveButtonStyleConfiguration);
    uint64_t v23 = &v7[*(int *)(v27 + 20)];
    *(void *)uint64_t v23 = swift_getKeyPath();
    v23[8] = 0;
    outlined init with take of SidebarButtonStyle._Body((uint64_t)v7, (uint64_t)v10, type metadata accessor for SidebarButtonStyle._Body);
    _s7SwiftUI33PrimitiveButtonStyleConfigurationVWOcTm_5((uint64_t)v10, v29, type metadata accessor for SidebarButtonStyle._Body);
    type metadata accessor for _ConditionalContent<Button<PrimitiveButtonStyleConfiguration.Label>, SidebarButtonStyle._Body>.Storage(0, &lazy cache variable for type metadata for _ConditionalContent<Button<PrimitiveButtonStyleConfiguration.Label>, SidebarButtonStyle._Body>.Storage, MEMORY[0x1E4F40568]);
    swift_storeEnumTagMultiPayload();
    return outlined destroy of SidebarButtonStyle._Body((uint64_t)v10, type metadata accessor for SidebarButtonStyle._Body);
  }
  else
  {
    _s7SwiftUI33PrimitiveButtonStyleConfigurationVWOcTm_5(v28, (uint64_t)v13, type metadata accessor for PrimitiveButtonStyleConfiguration);
    char v25 = v13[1];
    *uint64_t v17 = *v13;
    v17[1] = v25;
    _s7SwiftUI33PrimitiveButtonStyleConfigurationVWOcTm_5((uint64_t)&v13[*(int *)(v11 + 24)], (uint64_t)&v17[*(int *)(v15 + 36)], (uint64_t (*)(void))type metadata accessor for ButtonAction);
    outlined destroy of SidebarButtonStyle._Body((uint64_t)v13, type metadata accessor for PrimitiveButtonStyleConfiguration);
    outlined init with take of Button<PrimitiveButtonStyleConfiguration.Label>((uint64_t)v17, (uint64_t)v20);
    outlined init with copy of Button<PrimitiveButtonStyleConfiguration.Label>((uint64_t)v20, v29);
    type metadata accessor for _ConditionalContent<Button<PrimitiveButtonStyleConfiguration.Label>, SidebarButtonStyle._Body>.Storage(0, &lazy cache variable for type metadata for _ConditionalContent<Button<PrimitiveButtonStyleConfiguration.Label>, SidebarButtonStyle._Body>.Storage, MEMORY[0x1E4F40568]);
    swift_storeEnumTagMultiPayload();
    return outlined destroy of Button<PrimitiveButtonStyleConfiguration.Label>((uint64_t)v20);
  }
}

uint64_t SidebarButtonStyle._Body.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for PrimitiveButtonStyleConfiguration(0);
  MEMORY[0x1F4188790](v3 - 8);
  int v5 = (char *)&v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for SidebarButtonStyle._Body.SidebarButtonContent(0);
  uint64_t v7 = v6 - 8;
  MEMORY[0x1F4188790](v6);
  uint64_t v9 = (uint64_t)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for _UnaryViewAdaptor<SidebarButtonStyle._Body.SidebarButtonContent>();
  MEMORY[0x1F4188790](v10 - 8);
  uint64_t v12 = (char *)&v18 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  _s7SwiftUI33PrimitiveButtonStyleConfigurationVWOcTm_5(v1, (uint64_t)v5, type metadata accessor for PrimitiveButtonStyleConfiguration);
  *(void *)uint64_t v9 = swift_getKeyPath();
  *(unsigned char *)(v9 + 8) = 0;
  *(void *)(v9 + 16) = swift_getKeyPath();
  *(unsigned char *)(v9 + 24) = 0;
  outlined init with take of SidebarButtonStyle._Body((uint64_t)v5, v9 + *(int *)(v7 + 32), type metadata accessor for PrimitiveButtonStyleConfiguration);
  outlined init with take of SidebarButtonStyle._Body(v9, (uint64_t)v12, type metadata accessor for SidebarButtonStyle._Body.SidebarButtonContent);
  uint64_t v13 = v1 + *(int *)(type metadata accessor for SidebarButtonStyle._Body(0) + 20);
  uint64_t v14 = *(void *)v13;
  uint64_t v15 = *(unsigned __int8 *)(v13 + 8);
  outlined copy of Environment<Bool>.Content(*(void *)v13, *(unsigned char *)(v13 + 8));
  LOBYTE(v9) = specialized Environment.wrappedValue.getter(v14, v15);
  outlined consume of Environment<Bool?>.Content(v14, v15);
  _s7SwiftUI33PrimitiveButtonStyleConfigurationVWOcTm_5((uint64_t)v12, a1, (uint64_t (*)(void))type metadata accessor for _UnaryViewAdaptor<SidebarButtonStyle._Body.SidebarButtonContent>);
  type metadata accessor for ModifiedContent<_UnaryViewAdaptor<SidebarButtonStyle._Body.SidebarButtonContent>, _TraitWritingModifier<SidebarButtonState.Key>>();
  *(unsigned char *)(a1 + *(int *)(v16 + 36)) = (v9 & 1) == 0;
  return outlined destroy of SidebarButtonStyle._Body((uint64_t)v12, (uint64_t (*)(void))type metadata accessor for _UnaryViewAdaptor<SidebarButtonStyle._Body.SidebarButtonContent>);
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance SidebarButtonStyle._Body.SidebarButtonContent()
{
  return static ModifiedContent<>._viewListCount(inputs:)();
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance SidebarButtonStyle._Body()
{
  return static ModifiedContent<>._viewListCount(inputs:)();
}

uint64_t protocol witness for PrimitiveButtonStyle.makeBody(configuration:) in conformance SidebarButtonStyle@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return SidebarButtonStyle.makeBody(configuration:)(a1, *(void *)v2, *(unsigned char *)(v2 + 8), a2);
}

uint64_t type metadata accessor for SidebarButtonStyle._Body(uint64_t a1)
{
  return type metadata accessor for SortableTableHeaderButton(a1, (uint64_t *)&type metadata singleton initialization cache for SidebarButtonStyle._Body);
}

uint64_t outlined destroy of SidebarButtonStyle._Body(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

void *initializeBufferWithCopyOfBuffer for SidebarButtonStyle._Body(_WORD *a1, _WORD *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) == 0)
  {
    *a1 = *a2;
    uint64_t v7 = *(int *)(type metadata accessor for PrimitiveButtonStyleConfiguration(0) + 24);
    uint64_t v8 = (char *)v4 + v7;
    uint64_t v9 = (char *)a2 + v7;
    type metadata accessor for ButtonAction();
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      uint64_t v26 = *(void *)v9;
      uint64_t v27 = *((void *)v9 + 1);
      char v28 = v9[16];
      outlined copy of Environment<AppIntentExecutor?>.Content(*(void *)v9, v27, v28);
      *(void *)uint64_t v8 = v26;
      *((void *)v8 + 1) = v27;
      v8[16] = v28;
      uint64_t v29 = *((void *)v9 + 5);
      long long v30 = *(_OWORD *)(v9 + 24);
      *(_OWORD *)(v8 + 24) = v30;
      *((void *)v8 + 5) = v29;
      id v31 = (id)v30;
    }
    else
    {
      if (EnumCaseMultiPayload == 1)
      {
        uint64_t v11 = *(void *)v9;
        uint64_t v12 = *((void *)v9 + 1);
        uint64_t v14 = *((void *)v9 + 2);
        uint64_t v13 = *((void *)v9 + 3);
        char v39 = v9[34];
        __int16 v15 = *((_WORD *)v9 + 16);
        outlined copy of Environment<OpenURLAction>.Content(*(void *)v9, v12, v14, v13, v15, v39);
        *(void *)uint64_t v8 = v11;
        *((void *)v8 + 1) = v12;
        *((void *)v8 + 2) = v14;
        *((void *)v8 + 3) = v13;
        *((_WORD *)v8 + 16) = v15;
        v8[34] = v39;
        uint64_t v16 = *((void *)v9 + 5);
        uint64_t v17 = *((void *)v9 + 6);
        uint64_t v18 = *((void *)v9 + 7);
        uint64_t v19 = *((void *)v9 + 8);
        char v40 = v9[74];
        LOWORD(v14) = *((_WORD *)v9 + 36);
        outlined copy of Environment<OpenURLAction>.Content(v16, v17, v18, v19, v14, v40);
        *((void *)v8 + 5) = v16;
        *((void *)v8 + 6) = v17;
        *((void *)v8 + 7) = v18;
        *((void *)v8 + 8) = v19;
        *((_WORD *)v8 + 36) = v14;
        v8[74] = v40;
        uint64_t v20 = *(int *)(type metadata accessor for LinkDestination() + 24);
        uint64_t v21 = &v8[v20];
        int v22 = &v9[v20];
        uint64_t v23 = type metadata accessor for URL();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v23 - 8) + 16))(v21, v22, v23);
        uint64_t v24 = type metadata accessor for LinkDestination.Configuration();
        v21[*(int *)(v24 + 20)] = v22[*(int *)(v24 + 20)];
LABEL_9:
        swift_storeEnumTagMultiPayload();
        uint64_t v33 = *(int *)(a3 + 20);
        uint64_t v34 = (char *)v4 + v33;
        uint64_t v35 = (char *)a2 + v33;
        uint64_t v36 = *(void *)v35;
        char v37 = v35[8];
        outlined copy of Environment<Bool>.Content(*(void *)v35, v37);
        *(void *)uint64_t v34 = v36;
        v34[8] = v37;
        return v4;
      }
      uint64_t v32 = *((void *)v9 + 1);
      *(void *)uint64_t v8 = *(void *)v9;
      *((void *)v8 + 1) = v32;
    }
    swift_retain();
    goto LABEL_9;
  }
  uint64_t v25 = *(void *)a2;
  *uint64_t v4 = *(void *)a2;
  uint64_t v4 = (void *)(v25 + ((v5 + 16) & ~(unint64_t)v5));
  swift_retain();
  return v4;
}

uint64_t destroy for SidebarButtonStyle._Body(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + *(int *)(type metadata accessor for PrimitiveButtonStyleConfiguration(0) + 24);
  type metadata accessor for ButtonAction();
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    outlined consume of Environment<AppIntentExecutor?>.Content(*(void *)v4, *(void *)(v4 + 8), *(unsigned char *)(v4 + 16));

LABEL_6:
    swift_release();
    goto LABEL_8;
  }
  if (EnumCaseMultiPayload != 1)
  {
    if (EnumCaseMultiPayload) {
      goto LABEL_8;
    }
    goto LABEL_6;
  }
  outlined consume of Environment<OpenURLAction>.Content(*(void *)v4, *(void *)(v4 + 8), *(void *)(v4 + 16), *(void *)(v4 + 24), *(_WORD *)(v4 + 32), *(unsigned char *)(v4 + 34));
  outlined consume of Environment<OpenURLAction>.Content(*(void *)(v4 + 40), *(void *)(v4 + 48), *(void *)(v4 + 56), *(void *)(v4 + 64), *(_WORD *)(v4 + 72), *(unsigned char *)(v4 + 74));
  uint64_t v6 = v4 + *(int *)(type metadata accessor for LinkDestination() + 24);
  uint64_t v7 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);
LABEL_8:
  uint64_t v8 = (uint64_t *)(a1 + *(int *)(a2 + 20));
  uint64_t v9 = *v8;
  uint64_t v10 = *((unsigned __int8 *)v8 + 8);

  return outlined consume of Environment<Bool?>.Content(v9, v10);
}

_WORD *initializeWithCopy for SidebarButtonStyle._Body(_WORD *a1, _WORD *a2, uint64_t a3)
{
  uint64_t v4 = a2;
  *a1 = *a2;
  uint64_t v6 = *(int *)(type metadata accessor for PrimitiveButtonStyleConfiguration(0) + 24);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)v4 + v6;
  type metadata accessor for ButtonAction();
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    uint64_t v25 = *(void *)v8;
    uint64_t v26 = *((void *)v8 + 1);
    char v27 = v8[16];
    outlined copy of Environment<AppIntentExecutor?>.Content(*(void *)v8, v26, v27);
    *(void *)uint64_t v7 = v25;
    *((void *)v7 + 1) = v26;
    v7[16] = v27;
    uint64_t v28 = *((void *)v8 + 5);
    long long v29 = *(_OWORD *)(v8 + 24);
    *(_OWORD *)(v7 + 24) = v29;
    *((void *)v7 + 5) = v28;
    id v30 = (id)v29;
LABEL_6:
    swift_retain();
    goto LABEL_7;
  }
  if (EnumCaseMultiPayload != 1)
  {
    uint64_t v31 = *((void *)v8 + 1);
    *(void *)uint64_t v7 = *(void *)v8;
    *((void *)v7 + 1) = v31;
    goto LABEL_6;
  }
  uint64_t v38 = a3;
  char v39 = v4;
  uint64_t v10 = *(void *)v8;
  uint64_t v11 = *((void *)v8 + 1);
  uint64_t v13 = *((void *)v8 + 2);
  uint64_t v12 = *((void *)v8 + 3);
  char v14 = v8[34];
  __int16 v15 = *((_WORD *)v8 + 16);
  outlined copy of Environment<OpenURLAction>.Content(*(void *)v8, v11, v13, v12, v15, v14);
  *(void *)uint64_t v7 = v10;
  *((void *)v7 + 1) = v11;
  *((void *)v7 + 2) = v13;
  *((void *)v7 + 3) = v12;
  *((_WORD *)v7 + 16) = v15;
  v7[34] = v14;
  uint64_t v16 = *((void *)v8 + 5);
  uint64_t v17 = *((void *)v8 + 6);
  uint64_t v18 = *((void *)v8 + 7);
  uint64_t v19 = *((void *)v8 + 8);
  LOBYTE(v11) = v8[74];
  LOWORD(v13) = *((_WORD *)v8 + 36);
  outlined copy of Environment<OpenURLAction>.Content(v16, v17, v18, v19, v13, v11);
  *((void *)v7 + 5) = v16;
  *((void *)v7 + 6) = v17;
  *((void *)v7 + 7) = v18;
  *((void *)v7 + 8) = v19;
  *((_WORD *)v7 + 36) = v13;
  v7[74] = v11;
  a3 = v38;
  uint64_t v4 = v39;
  uint64_t v20 = *(int *)(type metadata accessor for LinkDestination() + 24);
  uint64_t v21 = &v7[v20];
  int v22 = &v8[v20];
  uint64_t v23 = type metadata accessor for URL();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v23 - 8) + 16))(v21, v22, v23);
  uint64_t v24 = type metadata accessor for LinkDestination.Configuration();
  v21[*(int *)(v24 + 20)] = v22[*(int *)(v24 + 20)];
LABEL_7:
  swift_storeEnumTagMultiPayload();
  uint64_t v32 = *(int *)(a3 + 20);
  uint64_t v33 = (char *)a1 + v32;
  uint64_t v34 = (char *)v4 + v32;
  uint64_t v35 = *(void *)v34;
  char v36 = v34[8];
  outlined copy of Environment<Bool>.Content(*(void *)v34, v36);
  *(void *)uint64_t v33 = v35;
  v33[8] = v36;
  return a1;
}

_WORD *assignWithCopy for SidebarButtonStyle._Body(_WORD *a1, _WORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = type metadata accessor for PrimitiveButtonStyleConfiguration(0);
  if (a1 != a2)
  {
    uint64_t v7 = *(int *)(v6 + 24);
    uint64_t v8 = (char *)a1 + v7;
    uint64_t v9 = (char *)a2 + v7;
    outlined destroy of SidebarButtonStyle._Body((uint64_t)a1 + v7, (uint64_t (*)(void))type metadata accessor for ButtonAction);
    type metadata accessor for ButtonAction();
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      uint64_t v26 = *(void *)v9;
      uint64_t v27 = *((void *)v9 + 1);
      char v28 = v9[16];
      outlined copy of Environment<AppIntentExecutor?>.Content(*(void *)v9, v27, v28);
      *(void *)uint64_t v8 = v26;
      *((void *)v8 + 1) = v27;
      v8[16] = v28;
      long long v29 = (void *)*((void *)v9 + 3);
      *((void *)v8 + 3) = v29;
      uint64_t v30 = *((void *)v9 + 5);
      *((void *)v8 + 4) = *((void *)v9 + 4);
      *((void *)v8 + 5) = v30;
      id v31 = v29;
    }
    else
    {
      if (EnumCaseMultiPayload == 1)
      {
        uint64_t v41 = a3;
        uint64_t v11 = *(void *)v9;
        uint64_t v12 = *((void *)v9 + 1);
        uint64_t v14 = *((void *)v9 + 2);
        uint64_t v13 = *((void *)v9 + 3);
        char v15 = v9[34];
        __int16 v16 = *((_WORD *)v9 + 16);
        outlined copy of Environment<OpenURLAction>.Content(*(void *)v9, v12, v14, v13, v16, v15);
        *(void *)uint64_t v8 = v11;
        *((void *)v8 + 1) = v12;
        *((void *)v8 + 2) = v14;
        *((void *)v8 + 3) = v13;
        *((_WORD *)v8 + 16) = v16;
        v8[34] = v15;
        uint64_t v17 = *((void *)v9 + 5);
        uint64_t v18 = *((void *)v9 + 6);
        uint64_t v19 = *((void *)v9 + 7);
        uint64_t v20 = *((void *)v9 + 8);
        LOBYTE(v12) = v9[74];
        LOWORD(v14) = *((_WORD *)v9 + 36);
        outlined copy of Environment<OpenURLAction>.Content(v17, v18, v19, v20, v14, v12);
        *((void *)v8 + 5) = v17;
        *((void *)v8 + 6) = v18;
        *((void *)v8 + 7) = v19;
        *((void *)v8 + 8) = v20;
        *((_WORD *)v8 + 36) = v14;
        v8[74] = v12;
        a3 = v41;
        uint64_t v21 = *(int *)(type metadata accessor for LinkDestination() + 24);
        int v22 = &v8[v21];
        uint64_t v23 = &v9[v21];
        uint64_t v24 = type metadata accessor for URL();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v24 - 8) + 16))(v22, v23, v24);
        uint64_t v25 = type metadata accessor for LinkDestination.Configuration();
        v22[*(int *)(v25 + 20)] = v23[*(int *)(v25 + 20)];
LABEL_8:
        swift_storeEnumTagMultiPayload();
        goto LABEL_9;
      }
      uint64_t v32 = *((void *)v9 + 1);
      *(void *)uint64_t v8 = *(void *)v9;
      *((void *)v8 + 1) = v32;
    }
    swift_retain();
    goto LABEL_8;
  }
LABEL_9:
  uint64_t v33 = *(int *)(a3 + 20);
  uint64_t v34 = (char *)a1 + v33;
  uint64_t v35 = (char *)a2 + v33;
  uint64_t v36 = *(void *)v35;
  char v37 = v35[8];
  outlined copy of Environment<Bool>.Content(*(void *)v35, v37);
  uint64_t v38 = *(void *)v34;
  uint64_t v39 = v34[8];
  *(void *)uint64_t v34 = v36;
  v34[8] = v37;
  outlined consume of Environment<Bool?>.Content(v38, v39);
  return a1;
}

_WORD *initializeWithTake for SidebarButtonStyle._Body(_WORD *a1, _WORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = *(int *)(type metadata accessor for PrimitiveButtonStyleConfiguration(0) + 24);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for ButtonAction();
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    long long v10 = *((_OWORD *)v8 + 1);
    *(_OWORD *)uint64_t v7 = *(_OWORD *)v8;
    *((_OWORD *)v7 + 1) = v10;
    *(_DWORD *)(v7 + 31) = *(_DWORD *)(v8 + 31);
    *(_OWORD *)(v7 + 40) = *(_OWORD *)(v8 + 40);
    *(_OWORD *)(v7 + 56) = *(_OWORD *)(v8 + 56);
    *(_DWORD *)(v7 + 71) = *(_DWORD *)(v8 + 71);
    uint64_t v11 = *(int *)(type metadata accessor for LinkDestination() + 24);
    uint64_t v12 = &v7[v11];
    uint64_t v13 = &v8[v11];
    uint64_t v14 = type metadata accessor for URL();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 32))(v12, v13, v14);
    uint64_t v15 = type metadata accessor for LinkDestination.Configuration();
    v12[*(int *)(v15 + 20)] = v13[*(int *)(v15 + 20)];
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v7, v8, *(void *)(*(void *)(v9 - 8) + 64));
  }
  uint64_t v16 = *(int *)(a3 + 20);
  uint64_t v17 = (char *)a1 + v16;
  uint64_t v18 = (char *)a2 + v16;
  *(void *)uint64_t v17 = *(void *)v18;
  v17[8] = v18[8];
  return a1;
}

_WORD *assignWithTake for SidebarButtonStyle._Body(_WORD *a1, _WORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = type metadata accessor for PrimitiveButtonStyleConfiguration(0);
  if (a1 != a2)
  {
    uint64_t v7 = *(int *)(v6 + 24);
    uint64_t v8 = (char *)a1 + v7;
    uint64_t v9 = (char *)a2 + v7;
    outlined destroy of SidebarButtonStyle._Body((uint64_t)a1 + v7, (uint64_t (*)(void))type metadata accessor for ButtonAction);
    uint64_t v10 = type metadata accessor for ButtonAction();
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      long long v11 = *((_OWORD *)v9 + 1);
      *(_OWORD *)uint64_t v8 = *(_OWORD *)v9;
      *((_OWORD *)v8 + 1) = v11;
      *(_DWORD *)(v8 + 31) = *(_DWORD *)(v9 + 31);
      *(_OWORD *)(v8 + 40) = *(_OWORD *)(v9 + 40);
      *(_OWORD *)(v8 + 56) = *(_OWORD *)(v9 + 56);
      *(_DWORD *)(v8 + 71) = *(_DWORD *)(v9 + 71);
      uint64_t v12 = *(int *)(type metadata accessor for LinkDestination() + 24);
      uint64_t v13 = &v8[v12];
      uint64_t v14 = &v9[v12];
      uint64_t v15 = type metadata accessor for URL();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 32))(v13, v14, v15);
      uint64_t v16 = type metadata accessor for LinkDestination.Configuration();
      v13[*(int *)(v16 + 20)] = v14[*(int *)(v16 + 20)];
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v8, v9, *(void *)(*(void *)(v10 - 8) + 64));
    }
  }
  uint64_t v17 = *(int *)(a3 + 20);
  uint64_t v18 = (char *)a1 + v17;
  uint64_t v19 = (char *)a2 + v17;
  uint64_t v20 = *(void *)v19;
  LOBYTE(v19) = v19[8];
  uint64_t v21 = *(void *)v18;
  uint64_t v22 = v18[8];
  *(void *)uint64_t v18 = v20;
  unsigned char v18[8] = (char)v19;
  outlined consume of Environment<Bool?>.Content(v21, v22);
  return a1;
}

uint64_t getEnumTagSinglePayload for SidebarButtonStyle._Body(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_187BE555C);
}

uint64_t sub_187BE555C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for PrimitiveButtonStyleConfiguration(0);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unsigned int v10 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 20) + 8);
    if (v10 > 1) {
      return (v10 ^ 0xFF) + 1;
    }
    else {
      return 0;
    }
  }
}

uint64_t storeEnumTagSinglePayload for SidebarButtonStyle._Body(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_187BE5630);
}

uint64_t sub_187BE5630(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for PrimitiveButtonStyleConfiguration(0);
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unsigned int v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(unsigned char *)(a1 + *(int *)(a4 + 20) + 8) = -(char)a2;
  }
  return result;
}

uint64_t type metadata completion function for SidebarButtonStyle._Body()
{
  uint64_t result = type metadata accessor for PrimitiveButtonStyleConfiguration(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for SidebarButtonState(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x187BE5850);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SidebarButtonState()
{
  return &type metadata for SidebarButtonState;
}

unint64_t lazy protocol witness table accessor for type _ConditionalContent<Button<PrimitiveButtonStyleConfiguration.Label>, SidebarButtonStyle._Body> and conformance <> _ConditionalContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type _ConditionalContent<Button<PrimitiveButtonStyleConfiguration.Label>, SidebarButtonStyle._Body> and conformance <> _ConditionalContent<A, B>;
  if (!lazy protocol witness table cache variable for type _ConditionalContent<Button<PrimitiveButtonStyleConfiguration.Label>, SidebarButtonStyle._Body> and conformance <> _ConditionalContent<A, B>)
  {
    type metadata accessor for _ConditionalContent<Button<PrimitiveButtonStyleConfiguration.Label>, SidebarButtonStyle._Body>.Storage(255, &lazy cache variable for type metadata for _ConditionalContent<Button<PrimitiveButtonStyleConfiguration.Label>, SidebarButtonStyle._Body>, MEMORY[0x1E4F40578]);
    lazy protocol witness table accessor for type Button<PrimitiveButtonStyleConfiguration.Label> and conformance Button<A>();
    lazy protocol witness table accessor for type _DefaultForegroundStyleModifier<BorderlessButtonLabelShapeStyle<AnyShapeStyle>> and conformance _DefaultForegroundStyleModifier<A>(&lazy protocol witness table cache variable for type SidebarButtonStyle._Body and conformance SidebarButtonStyle._Body, (void (*)(uint64_t))type metadata accessor for SidebarButtonStyle._Body);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ConditionalContent<Button<PrimitiveButtonStyleConfiguration.Label>, SidebarButtonStyle._Body> and conformance <> _ConditionalContent<A, B>);
  }
  return result;
}

void type metadata accessor for _ConditionalContent<Button<PrimitiveButtonStyleConfiguration.Label>, SidebarButtonStyle._Body>.Storage(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    _s7SwiftUI6ButtonVyAA09PrimitiveC18StyleConfigurationV5LabelVGMaTm_3(255, (unint64_t *)&lazy cache variable for type metadata for Button<PrimitiveButtonStyleConfiguration.Label>, (uint64_t)&type metadata for PrimitiveButtonStyleConfiguration.Label, (uint64_t)&protocol witness table for PrimitiveButtonStyleConfiguration.Label, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for Button);
    uint64_t v7 = v6;
    uint64_t v8 = type metadata accessor for SidebarButtonStyle._Body(255);
    unint64_t v9 = a3(a1, v7, v8);
    if (!v10) {
      atomic_store(v9, a2);
    }
  }
}

uint64_t associated type witness table accessor for View.Body : View in SidebarButtonStyle._Body()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t type metadata accessor for SidebarButtonStyle._Body.SidebarButtonContent(uint64_t a1)
{
  return type metadata accessor for SortableTableHeaderButton(a1, (uint64_t *)&type metadata singleton initialization cache for SidebarButtonStyle._Body.SidebarButtonContent);
}

void type metadata accessor for _UnaryViewAdaptor<SidebarButtonStyle._Body.SidebarButtonContent>()
{
  if (!lazy cache variable for type metadata for _UnaryViewAdaptor<SidebarButtonStyle._Body.SidebarButtonContent>)
  {
    type metadata accessor for SidebarButtonStyle._Body.SidebarButtonContent(255);
    lazy protocol witness table accessor for type _DefaultForegroundStyleModifier<BorderlessButtonLabelShapeStyle<AnyShapeStyle>> and conformance _DefaultForegroundStyleModifier<A>(&lazy protocol witness table cache variable for type SidebarButtonStyle._Body.SidebarButtonContent and conformance SidebarButtonStyle._Body.SidebarButtonContent, (void (*)(uint64_t))type metadata accessor for SidebarButtonStyle._Body.SidebarButtonContent);
    unint64_t v0 = type metadata accessor for _UnaryViewAdaptor();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _UnaryViewAdaptor<SidebarButtonStyle._Body.SidebarButtonContent>);
    }
  }
}

uint64_t outlined init with take of SidebarButtonStyle._Body(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

void type metadata accessor for ModifiedContent<_UnaryViewAdaptor<SidebarButtonStyle._Body.SidebarButtonContent>, _TraitWritingModifier<SidebarButtonState.Key>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<_UnaryViewAdaptor<SidebarButtonStyle._Body.SidebarButtonContent>, _TraitWritingModifier<SidebarButtonState.Key>>)
  {
    type metadata accessor for _UnaryViewAdaptor<SidebarButtonStyle._Body.SidebarButtonContent>();
    _s7SwiftUI6ButtonVyAA09PrimitiveC18StyleConfigurationV5LabelVGMaTm_3(255, &lazy cache variable for type metadata for _TraitWritingModifier<SidebarButtonState.Key>, (uint64_t)&type metadata for SidebarButtonState.Key, (uint64_t)&protocol witness table for SidebarButtonState.Key, MEMORY[0x1E4F408B8]);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<_UnaryViewAdaptor<SidebarButtonStyle._Body.SidebarButtonContent>, _TraitWritingModifier<SidebarButtonState.Key>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type _TraitWritingModifier<SidebarButtonState.Key> and conformance _TraitWritingModifier<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type _TraitWritingModifier<SidebarButtonState.Key> and conformance _TraitWritingModifier<A>;
  if (!lazy protocol witness table cache variable for type _TraitWritingModifier<SidebarButtonState.Key> and conformance _TraitWritingModifier<A>)
  {
    _s7SwiftUI6ButtonVyAA09PrimitiveC18StyleConfigurationV5LabelVGMaTm_3(255, &lazy cache variable for type metadata for _TraitWritingModifier<SidebarButtonState.Key>, (uint64_t)&type metadata for SidebarButtonState.Key, (uint64_t)&protocol witness table for SidebarButtonState.Key, MEMORY[0x1E4F408B8]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _TraitWritingModifier<SidebarButtonState.Key> and conformance _TraitWritingModifier<A>);
  }
  return result;
}

ValueMetadata *type metadata accessor for SidebarButtonState.Key()
{
  return &type metadata for SidebarButtonState.Key;
}

unint64_t initializeBufferWithCopyOfBuffer for SidebarButtonStyle._Body.SidebarButtonContent(unint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v35 = *(void *)a2;
    *(void *)a1 = *(void *)a2;
    a1 = v35 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    uint64_t v7 = *(void *)a2;
    char v8 = *(unsigned char *)(a2 + 8);
    outlined copy of Environment<Bool>.Content(*(void *)a2, v8);
    *(void *)a1 = v7;
    *(unsigned char *)(a1 + 8) = v8;
    uint64_t v9 = *(void *)(a2 + 16);
    unsigned __int8 v10 = *(unsigned char *)(a2 + 24);
    outlined copy of Environment<HoverEffect?>.Content(v9, v10);
    *(void *)(a1 + 16) = v9;
    *(unsigned char *)(a1 + 24) = v10;
    uint64_t v11 = *(int *)(a3 + 24);
    uint64_t v12 = a1 + v11;
    uint64_t v13 = a2 + v11;
    *(_WORD *)(a1 + v11) = *(_WORD *)(a2 + v11);
    uint64_t v14 = *(int *)(type metadata accessor for PrimitiveButtonStyleConfiguration(0) + 24);
    uint64_t v15 = v12 + v14;
    uint64_t v16 = v13 + v14;
    type metadata accessor for ButtonAction();
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      uint64_t v36 = *(void *)v16;
      uint64_t v37 = *(void *)(v16 + 8);
      char v38 = *(unsigned char *)(v16 + 16);
      outlined copy of Environment<AppIntentExecutor?>.Content(*(void *)v16, v37, v38);
      *(void *)uint64_t v15 = v36;
      *(void *)(v15 + 8) = v37;
      *(unsigned char *)(v15 + 16) = v38;
      uint64_t v39 = *(void *)(v16 + 40);
      long long v40 = *(_OWORD *)(v16 + 24);
      *(_OWORD *)(v15 + 24) = v40;
      *(void *)(v15 + 40) = v39;
      id v41 = (id)v40;
      swift_retain();
    }
    else if (EnumCaseMultiPayload == 1)
    {
      uint64_t v18 = *(void *)v16;
      uint64_t v19 = *(void *)(v16 + 8);
      uint64_t v20 = *(void *)(v16 + 16);
      uint64_t v21 = *(void *)(v16 + 24);
      char v22 = *(unsigned char *)(v16 + 34);
      __int16 v23 = *(_WORD *)(v16 + 32);
      outlined copy of Environment<OpenURLAction>.Content(*(void *)v16, v19, v20, v21, v23, v22);
      *(void *)uint64_t v15 = v18;
      *(void *)(v15 + 8) = v19;
      *(void *)(v15 + 16) = v20;
      *(void *)(v15 + 24) = v21;
      *(_WORD *)(v15 + 32) = v23;
      *(unsigned char *)(v15 + 34) = v22;
      uint64_t v24 = *(void *)(v16 + 40);
      uint64_t v25 = *(void *)(v16 + 48);
      uint64_t v26 = *(void *)(v16 + 56);
      uint64_t v27 = *(void *)(v16 + 64);
      char v28 = *(unsigned char *)(v16 + 74);
      __int16 v29 = *(_WORD *)(v16 + 72);
      outlined copy of Environment<OpenURLAction>.Content(v24, v25, v26, v27, v29, v28);
      *(void *)(v15 + 40) = v24;
      *(void *)(v15 + 48) = v25;
      *(void *)(v15 + 56) = v26;
      *(void *)(v15 + 64) = v27;
      *(_WORD *)(v15 + 72) = v29;
      *(unsigned char *)(v15 + 74) = v28;
      uint64_t v30 = *(int *)(type metadata accessor for LinkDestination() + 24);
      uint64_t v31 = v15 + v30;
      uint64_t v32 = v16 + v30;
      uint64_t v33 = type metadata accessor for URL();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v33 - 8) + 16))(v31, v32, v33);
      uint64_t v34 = type metadata accessor for LinkDestination.Configuration();
      *(unsigned char *)(v31 + *(int *)(v34 + 20)) = *(unsigned char *)(v32 + *(int *)(v34 + 20));
    }
    else
    {
      uint64_t v42 = *(void *)(v16 + 8);
      *(void *)uint64_t v15 = *(void *)v16;
      *(void *)(v15 + 8) = v42;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t destroy for SidebarButtonStyle._Body.SidebarButtonContent(uint64_t a1, uint64_t a2)
{
  outlined consume of Environment<Bool?>.Content(*(void *)a1, *(unsigned __int8 *)(a1 + 8));
  outlined consume of Environment<AnyShapeStyle?>.Content(*(void *)(a1 + 16), *(unsigned __int8 *)(a1 + 24));
  uint64_t v4 = a1 + *(int *)(a2 + 24);
  uint64_t v5 = v4 + *(int *)(type metadata accessor for PrimitiveButtonStyleConfiguration(0) + 24);
  type metadata accessor for ButtonAction();
  uint64_t result = swift_getEnumCaseMultiPayload();
  if (result == 2)
  {
    outlined consume of Environment<AppIntentExecutor?>.Content(*(void *)v5, *(void *)(v5 + 8), *(unsigned char *)(v5 + 16));

LABEL_6:
    return swift_release();
  }
  if (result != 1)
  {
    if (result) {
      return result;
    }
    goto LABEL_6;
  }
  outlined consume of Environment<OpenURLAction>.Content(*(void *)v5, *(void *)(v5 + 8), *(void *)(v5 + 16), *(void *)(v5 + 24), *(_WORD *)(v5 + 32), *(unsigned char *)(v5 + 34));
  outlined consume of Environment<OpenURLAction>.Content(*(void *)(v5 + 40), *(void *)(v5 + 48), *(void *)(v5 + 56), *(void *)(v5 + 64), *(_WORD *)(v5 + 72), *(unsigned char *)(v5 + 74));
  uint64_t v7 = v5 + *(int *)(type metadata accessor for LinkDestination() + 24);
  uint64_t v8 = type metadata accessor for URL();
  uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8);

  return v9(v7, v8);
}

uint64_t initializeWithCopy for SidebarButtonStyle._Body.SidebarButtonContent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)a2;
  char v7 = *(unsigned char *)(a2 + 8);
  outlined copy of Environment<Bool>.Content(*(void *)a2, v7);
  *(void *)a1 = v6;
  *(unsigned char *)(a1 + 8) = v7;
  uint64_t v8 = *(void *)(a2 + 16);
  unsigned __int8 v9 = *(unsigned char *)(a2 + 24);
  outlined copy of Environment<HoverEffect?>.Content(v8, v9);
  *(void *)(a1 + 16) = v8;
  *(unsigned char *)(a1 + 24) = v9;
  uint64_t v10 = *(int *)(a3 + 24);
  uint64_t v11 = a1 + v10;
  uint64_t v12 = (_WORD *)(a2 + v10);
  *(_WORD *)(a1 + v10) = *v12;
  uint64_t v13 = *(int *)(type metadata accessor for PrimitiveButtonStyleConfiguration(0) + 24);
  uint64_t v14 = v11 + v13;
  uint64_t v15 = (char *)v12 + v13;
  type metadata accessor for ButtonAction();
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    uint64_t v33 = *(void *)v15;
    uint64_t v34 = *((void *)v15 + 1);
    char v35 = v15[16];
    outlined copy of Environment<AppIntentExecutor?>.Content(*(void *)v15, v34, v35);
    *(void *)uint64_t v14 = v33;
    *(void *)(v14 + 8) = v34;
    *(unsigned char *)(v14 + 16) = v35;
    uint64_t v36 = *((void *)v15 + 5);
    long long v37 = *(_OWORD *)(v15 + 24);
    *(_OWORD *)(v14 + 24) = v37;
    *(void *)(v14 + 40) = v36;
    id v38 = (id)v37;
LABEL_6:
    swift_retain();
    goto LABEL_7;
  }
  if (EnumCaseMultiPayload != 1)
  {
    uint64_t v39 = *((void *)v15 + 1);
    *(void *)uint64_t v14 = *(void *)v15;
    *(void *)(v14 + 8) = v39;
    goto LABEL_6;
  }
  uint64_t v17 = *(void *)v15;
  uint64_t v18 = *((void *)v15 + 1);
  uint64_t v19 = *((void *)v15 + 2);
  uint64_t v20 = *((void *)v15 + 3);
  char v21 = v15[34];
  __int16 v22 = *((_WORD *)v15 + 16);
  outlined copy of Environment<OpenURLAction>.Content(*(void *)v15, v18, v19, v20, v22, v21);
  *(void *)uint64_t v14 = v17;
  *(void *)(v14 + 8) = v18;
  *(void *)(v14 + 16) = v19;
  *(void *)(v14 + 24) = v20;
  *(_WORD *)(v14 + 32) = v22;
  *(unsigned char *)(v14 + 34) = v21;
  uint64_t v23 = *((void *)v15 + 5);
  uint64_t v24 = *((void *)v15 + 6);
  uint64_t v25 = *((void *)v15 + 7);
  uint64_t v26 = *((void *)v15 + 8);
  LOBYTE(v20) = v15[74];
  __int16 v27 = *((_WORD *)v15 + 36);
  outlined copy of Environment<OpenURLAction>.Content(v23, v24, v25, v26, v27, v20);
  *(void *)(v14 + 40) = v23;
  *(void *)(v14 + 48) = v24;
  *(void *)(v14 + 56) = v25;
  *(void *)(v14 + 64) = v26;
  *(_WORD *)(v14 + 72) = v27;
  *(unsigned char *)(v14 + 74) = v20;
  uint64_t v28 = *(int *)(type metadata accessor for LinkDestination() + 24);
  uint64_t v29 = v14 + v28;
  uint64_t v30 = &v15[v28];
  uint64_t v31 = type metadata accessor for URL();
  (*(void (**)(uint64_t, char *, uint64_t))(*(void *)(v31 - 8) + 16))(v29, v30, v31);
  uint64_t v32 = type metadata accessor for LinkDestination.Configuration();
  *(unsigned char *)(v29 + *(int *)(v32 + 20)) = v30[*(int *)(v32 + 20)];
LABEL_7:
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t *assignWithCopy for SidebarButtonStyle._Body.SidebarButtonContent(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)a2;
  char v7 = *(unsigned char *)(a2 + 8);
  outlined copy of Environment<Bool>.Content(*(void *)a2, v7);
  uint64_t v8 = *a1;
  uint64_t v9 = *((unsigned __int8 *)a1 + 8);
  *a1 = v6;
  *((unsigned char *)a1 + 8) = v7;
  outlined consume of Environment<Bool?>.Content(v8, v9);
  uint64_t v10 = *(void *)(a2 + 16);
  unsigned __int8 v11 = *(unsigned char *)(a2 + 24);
  outlined copy of Environment<HoverEffect?>.Content(v10, v11);
  uint64_t v12 = a1[2];
  uint64_t v13 = *((unsigned __int8 *)a1 + 24);
  a1[2] = v10;
  *((unsigned char *)a1 + 24) = v11;
  outlined consume of Environment<AnyShapeStyle?>.Content(v12, v13);
  uint64_t v14 = *(int *)(a3 + 24);
  uint64_t v15 = (uint64_t)a1 + v14;
  uint64_t v16 = a2 + v14;
  *(_WORD *)((char *)a1 + v14) = *(_WORD *)(a2 + v14);
  uint64_t v17 = type metadata accessor for PrimitiveButtonStyleConfiguration(0);
  if (a1 != (uint64_t *)a2)
  {
    uint64_t v18 = *(int *)(v17 + 24);
    uint64_t v19 = v15 + v18;
    uint64_t v20 = v16 + v18;
    outlined destroy of SidebarButtonStyle._Body(v19, (uint64_t (*)(void))type metadata accessor for ButtonAction);
    type metadata accessor for ButtonAction();
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      uint64_t v38 = *(void *)v20;
      uint64_t v39 = *(void *)(v20 + 8);
      char v40 = *(unsigned char *)(v20 + 16);
      outlined copy of Environment<AppIntentExecutor?>.Content(*(void *)v20, v39, v40);
      *(void *)uint64_t v19 = v38;
      *(void *)(v19 + 8) = v39;
      *(unsigned char *)(v19 + 16) = v40;
      id v41 = *(void **)(v20 + 24);
      *(void *)(v19 + 24) = v41;
      uint64_t v42 = *(void *)(v20 + 40);
      *(void *)(v19 + 32) = *(void *)(v20 + 32);
      *(void *)(v19 + 40) = v42;
      id v43 = v41;
    }
    else
    {
      if (EnumCaseMultiPayload == 1)
      {
        uint64_t v22 = *(void *)v20;
        uint64_t v23 = *(void *)(v20 + 8);
        uint64_t v24 = *(void *)(v20 + 16);
        uint64_t v25 = *(void *)(v20 + 24);
        char v26 = *(unsigned char *)(v20 + 34);
        __int16 v27 = *(_WORD *)(v20 + 32);
        outlined copy of Environment<OpenURLAction>.Content(*(void *)v20, v23, v24, v25, v27, v26);
        *(void *)uint64_t v19 = v22;
        *(void *)(v19 + 8) = v23;
        *(void *)(v19 + 16) = v24;
        *(void *)(v19 + 24) = v25;
        *(_WORD *)(v19 + 32) = v27;
        *(unsigned char *)(v19 + 34) = v26;
        uint64_t v28 = *(void *)(v20 + 40);
        uint64_t v29 = *(void *)(v20 + 48);
        uint64_t v30 = *(void *)(v20 + 56);
        uint64_t v31 = *(void *)(v20 + 64);
        LOBYTE(v25) = *(unsigned char *)(v20 + 74);
        __int16 v32 = *(_WORD *)(v20 + 72);
        outlined copy of Environment<OpenURLAction>.Content(v28, v29, v30, v31, v32, v25);
        *(void *)(v19 + 40) = v28;
        *(void *)(v19 + 48) = v29;
        *(void *)(v19 + 56) = v30;
        *(void *)(v19 + 64) = v31;
        *(_WORD *)(v19 + 72) = v32;
        *(unsigned char *)(v19 + 74) = v25;
        uint64_t v33 = *(int *)(type metadata accessor for LinkDestination() + 24);
        uint64_t v34 = v19 + v33;
        uint64_t v35 = v20 + v33;
        uint64_t v36 = type metadata accessor for URL();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v36 - 8) + 16))(v34, v35, v36);
        uint64_t v37 = type metadata accessor for LinkDestination.Configuration();
        *(unsigned char *)(v34 + *(int *)(v37 + 20)) = *(unsigned char *)(v35 + *(int *)(v37 + 20));
LABEL_8:
        swift_storeEnumTagMultiPayload();
        return a1;
      }
      uint64_t v44 = *(void *)(v20 + 8);
      *(void *)uint64_t v19 = *(void *)v20;
      *(void *)(v19 + 8) = v44;
    }
    swift_retain();
    goto LABEL_8;
  }
  return a1;
}

uint64_t initializeWithTake for SidebarButtonStyle._Body.SidebarButtonContent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  uint64_t v4 = *(int *)(a3 + 24);
  uint64_t v5 = a1 + v4;
  uint64_t v6 = a2 + v4;
  *(_WORD *)(a1 + v4) = *(_WORD *)(a2 + v4);
  uint64_t v7 = *(int *)(type metadata accessor for PrimitiveButtonStyleConfiguration(0) + 24);
  uint64_t v8 = (char *)(v5 + v7);
  uint64_t v9 = (char *)(v6 + v7);
  uint64_t v10 = type metadata accessor for ButtonAction();
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    long long v11 = *((_OWORD *)v9 + 1);
    *(_OWORD *)uint64_t v8 = *(_OWORD *)v9;
    *((_OWORD *)v8 + 1) = v11;
    *(_DWORD *)(v8 + 31) = *(_DWORD *)(v9 + 31);
    *(_OWORD *)(v8 + 40) = *(_OWORD *)(v9 + 40);
    *(_OWORD *)(v8 + 56) = *(_OWORD *)(v9 + 56);
    *(_DWORD *)(v8 + 71) = *(_DWORD *)(v9 + 71);
    uint64_t v12 = *(int *)(type metadata accessor for LinkDestination() + 24);
    uint64_t v13 = &v8[v12];
    uint64_t v14 = &v9[v12];
    uint64_t v15 = type metadata accessor for URL();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 32))(v13, v14, v15);
    uint64_t v16 = type metadata accessor for LinkDestination.Configuration();
    v13[*(int *)(v16 + 20)] = v14[*(int *)(v16 + 20)];
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v8, v9, *(void *)(*(void *)(v10 - 8) + 64));
  }
  return a1;
}

uint64_t *assignWithTake for SidebarButtonStyle._Body.SidebarButtonContent(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  char v7 = *((unsigned char *)a2 + 8);
  uint64_t v8 = *a1;
  uint64_t v9 = *((unsigned __int8 *)a1 + 8);
  *a1 = v6;
  *((unsigned char *)a1 + 8) = v7;
  outlined consume of Environment<Bool?>.Content(v8, v9);
  char v10 = *((unsigned char *)a2 + 24);
  uint64_t v11 = a1[2];
  uint64_t v12 = *((unsigned __int8 *)a1 + 24);
  a1[2] = a2[2];
  *((unsigned char *)a1 + 24) = v10;
  outlined consume of Environment<AnyShapeStyle?>.Content(v11, v12);
  uint64_t v13 = *(int *)(a3 + 24);
  uint64_t v14 = (uint64_t)a1 + v13;
  uint64_t v15 = (uint64_t)a2 + v13;
  *(_WORD *)((char *)a1 + v13) = *(_WORD *)((char *)a2 + v13);
  uint64_t v16 = type metadata accessor for PrimitiveButtonStyleConfiguration(0);
  if (a1 != a2)
  {
    uint64_t v17 = *(int *)(v16 + 24);
    uint64_t v18 = (char *)(v14 + v17);
    uint64_t v19 = (char *)(v15 + v17);
    outlined destroy of SidebarButtonStyle._Body((uint64_t)v18, (uint64_t (*)(void))type metadata accessor for ButtonAction);
    uint64_t v20 = type metadata accessor for ButtonAction();
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      long long v21 = *((_OWORD *)v19 + 1);
      *(_OWORD *)uint64_t v18 = *(_OWORD *)v19;
      *((_OWORD *)v18 + 1) = v21;
      *(_DWORD *)(v18 + 31) = *(_DWORD *)(v19 + 31);
      *(_OWORD *)(v18 + 40) = *(_OWORD *)(v19 + 40);
      *(_OWORD *)(v18 + 56) = *(_OWORD *)(v19 + 56);
      *(_DWORD *)(v18 + 71) = *(_DWORD *)(v19 + 71);
      uint64_t v22 = *(int *)(type metadata accessor for LinkDestination() + 24);
      uint64_t v23 = &v18[v22];
      uint64_t v24 = &v19[v22];
      uint64_t v25 = type metadata accessor for URL();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v25 - 8) + 32))(v23, v24, v25);
      uint64_t v26 = type metadata accessor for LinkDestination.Configuration();
      v23[*(int *)(v26 + 20)] = v24[*(int *)(v26 + 20)];
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v18, v19, *(void *)(*(void *)(v20 - 8) + 64));
    }
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for SidebarButtonStyle._Body.SidebarButtonContent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_187BE67A0);
}

uint64_t sub_187BE67A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 254)
  {
    unsigned int v4 = *(unsigned __int8 *)(a1 + 8);
    if (v4 > 1) {
      return (v4 ^ 0xFF) + 1;
    }
    else {
      return 0;
    }
  }
  else
  {
    uint64_t v8 = type metadata accessor for PrimitiveButtonStyleConfiguration(0);
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 24);
    return v9(v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for SidebarButtonStyle._Body.SidebarButtonContent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_187BE685C);
}

uint64_t sub_187BE685C(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 254)
  {
    *(unsigned char *)(result + 8) = -(char)a2;
  }
  else
  {
    uint64_t v7 = type metadata accessor for PrimitiveButtonStyleConfiguration(0);
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 24);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t type metadata completion function for SidebarButtonStyle._Body.SidebarButtonContent()
{
  uint64_t result = type metadata accessor for PrimitiveButtonStyleConfiguration(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<_UnaryViewAdaptor<SidebarButtonStyle._Body.SidebarButtonContent>, _TraitWritingModifier<SidebarButtonState.Key>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<_UnaryViewAdaptor<SidebarButtonStyle._Body.SidebarButtonContent>, _TraitWritingModifier<SidebarButtonState.Key>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<_UnaryViewAdaptor<SidebarButtonStyle._Body.SidebarButtonContent>, _TraitWritingModifier<SidebarButtonState.Key>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<_UnaryViewAdaptor<SidebarButtonStyle._Body.SidebarButtonContent>, _TraitWritingModifier<SidebarButtonState.Key>>();
    lazy protocol witness table accessor for type _DefaultForegroundStyleModifier<BorderlessButtonLabelShapeStyle<AnyShapeStyle>> and conformance _DefaultForegroundStyleModifier<A>(&lazy protocol witness table cache variable for type _UnaryViewAdaptor<SidebarButtonStyle._Body.SidebarButtonContent> and conformance _UnaryViewAdaptor<A>, (void (*)(uint64_t))type metadata accessor for _UnaryViewAdaptor<SidebarButtonStyle._Body.SidebarButtonContent>);
    lazy protocol witness table accessor for type _TraitWritingModifier<SidebarButtonState.Key> and conformance _TraitWritingModifier<A>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<_UnaryViewAdaptor<SidebarButtonStyle._Body.SidebarButtonContent>, _TraitWritingModifier<SidebarButtonState.Key>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t associated type witness table accessor for View.Body : View in SidebarButtonStyle._Body.SidebarButtonContent()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_187BE6A60()
{
  uint64_t v1 = type metadata accessor for PrimitiveButtonStyleConfiguration(0);
  unint64_t v2 = v0
     + *(int *)(v1 + 24)
     + ((*(unsigned __int8 *)(*(void *)(v1 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v1 - 8) + 80));
  type metadata accessor for ButtonAction();
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    outlined consume of Environment<AppIntentExecutor?>.Content(*(void *)v2, *(void *)(v2 + 8), *(unsigned char *)(v2 + 16));

LABEL_6:
    swift_release();
    goto LABEL_8;
  }
  if (EnumCaseMultiPayload != 1)
  {
    if (EnumCaseMultiPayload) {
      goto LABEL_8;
    }
    goto LABEL_6;
  }
  outlined consume of Environment<OpenURLAction>.Content(*(void *)v2, *(void *)(v2 + 8), *(void *)(v2 + 16), *(void *)(v2 + 24), *(_WORD *)(v2 + 32), *(unsigned char *)(v2 + 34));
  outlined consume of Environment<OpenURLAction>.Content(*(void *)(v2 + 40), *(void *)(v2 + 48), *(void *)(v2 + 56), *(void *)(v2 + 64), *(_WORD *)(v2 + 72), *(unsigned char *)(v2 + 74));
  unint64_t v4 = v2 + *(int *)(type metadata accessor for LinkDestination() + 24);
  uint64_t v5 = type metadata accessor for URL();
  (*(void (**)(unint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
LABEL_8:

  return swift_deallocObject();
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, OnPlatformContainerSelectionModifier>, ListButtonStyleDisabledOpacityModifier>(uint64_t a1)
{
}

void type metadata accessor for ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, OnPlatformContainerSelectionModifier>(uint64_t a1)
{
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, OnPlatformContainerSelectionModifier>, ListButtonStyleDisabledOpacityModifier>(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = type metadata accessor for ModifiedContent();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

void type metadata accessor for _DefaultForegroundStyleModifier<BorderlessButtonLabelShapeStyle<AnyShapeStyle>>()
{
  if (!lazy cache variable for type metadata for _DefaultForegroundStyleModifier<BorderlessButtonLabelShapeStyle<AnyShapeStyle>>)
  {
    _s7SwiftUI6ButtonVyAA09PrimitiveC18StyleConfigurationV5LabelVGMaTm_3(255, &lazy cache variable for type metadata for BorderlessButtonLabelShapeStyle<AnyShapeStyle>, MEMORY[0x1E4F3F700], MEMORY[0x1E4F3F6F8], (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for BorderlessButtonLabelShapeStyle);
    unint64_t v0 = type metadata accessor for _DefaultForegroundStyleModifier();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _DefaultForegroundStyleModifier<BorderlessButtonLabelShapeStyle<AnyShapeStyle>>);
    }
  }
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, OnPlatformContainerSelectionModifier> and conformance <> ModifiedContent<A, B>()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, OnPlatformContainerSelectionModifier>, ListButtonStyleDisabledOpacityModifier> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, OnPlatformContainerSelectionModifier> and conformance <> ModifiedContent<A, B>, type metadata accessor for ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, OnPlatformContainerSelectionModifier>, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<PrimitiveButtonStyleConfiguration.Label, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>> and conformance <> ModifiedContent<A, B>, (void (*)(void))lazy protocol witness table accessor for type OnPlatformContainerSelectionModifier and conformance OnPlatformContainerSelectionModifier);
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, OnPlatformContainerSelectionModifier>, ListButtonStyleDisabledOpacityModifier>, _DefaultForegroundStyleModifier<BorderlessButtonLabelShapeStyle<AnyShapeStyle>>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, OnPlatformContainerSelectionModifier>, ListButtonStyleDisabledOpacityModifier>, _DefaultForegroundStyleModifier<BorderlessButtonLabelShapeStyle<AnyShapeStyle>>>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, OnPlatformContainerSelectionModifier>, ListButtonStyleDisabledOpacityModifier>(255);
    type metadata accessor for _DefaultForegroundStyleModifier<BorderlessButtonLabelShapeStyle<AnyShapeStyle>>();
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, OnPlatformContainerSelectionModifier>, ListButtonStyleDisabledOpacityModifier>, _DefaultForegroundStyleModifier<BorderlessButtonLabelShapeStyle<AnyShapeStyle>>>);
    }
  }
}

void View.contextMenu<A>(isPresented:menuItems:)()
{
}

uint64_t View.contextMenu<A, B>(menuItems:preview:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void (*a3)(uint64_t)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11)
{
  uint64_t v35 = a8;
  uint64_t v32 = a6;
  uint64_t v29 = a5;
  uint64_t v37 = a4;
  uint64_t v38 = a3;
  uint64_t v34 = a2;
  uint64_t v33 = a1;
  uint64_t v39 = a9;
  uint64_t v30 = a10;
  MEMORY[0x1F4188790](a1);
  uint64_t v36 = (char *)&v27 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for StyleContextWriter<MenuStyleContext>();
  type metadata accessor for ModifiedContent();
  unint64_t v14 = lazy protocol witness table accessor for type StyleContextWriter<MenuStyleContext> and conformance StyleContextWriter<A>();
  uint64_t v52 = a10;
  unint64_t v53 = v14;
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v15 = type metadata accessor for ZStack();
  MEMORY[0x1F4188790](v15);
  uint64_t v17 = (char *)&v27 - v16;
  uint64_t v18 = swift_getWitnessTable();
  uint64_t v48 = v15;
  uint64_t v49 = a7;
  uint64_t v28 = a7;
  uint64_t v50 = v18;
  uint64_t v51 = a11;
  uint64_t v19 = type metadata accessor for ContextMenuPreviewModifier();
  uint64_t v20 = *(void *)(v19 - 8);
  MEMORY[0x1F4188790](v19);
  uint64_t v22 = (char *)&v27 - v21;
  uint64_t v40 = a5;
  uint64_t v41 = v32;
  uint64_t v23 = v35;
  uint64_t v42 = a7;
  uint64_t v43 = v35;
  uint64_t v44 = v30;
  uint64_t v45 = a11;
  uint64_t v46 = v33;
  uint64_t v47 = v34;
  static Alignment.center.getter();
  uint64_t v24 = ZStack.init(alignment:content:)();
  uint64_t v25 = (uint64_t)v36;
  v38(v24);
  ContextMenuPreviewModifier.init(menuView:preview:hidePreview:previewAction:)((uint64_t)v17, v25, 0, 0, 0, 254, v15, v28, (uint64_t)v22);
  MEMORY[0x18C113660](v22, v29, v19, v23);
  return (*(uint64_t (**)(char *, uint64_t))(v20 + 8))(v22, v19);
}

uint64_t View.contextMenu<A, B, C>(menuItems:preview:previewDestination:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t)@<X2>, uint64_t a4@<X3>, void (*a5)(uint64_t)@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  uint64_t v50 = a7;
  uint64_t v47 = a6;
  uint64_t v48 = a5;
  uint64_t v45 = a4;
  uint64_t v46 = a3;
  uint64_t v43 = a2;
  uint64_t v42 = a1;
  uint64_t v49 = a9;
  uint64_t v40 = a12;
  uint64_t v37 = a13;
  MEMORY[0x1F4188790](a1);
  uint64_t v44 = (char *)v33 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v17);
  uint64_t v41 = (char *)v33 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for StyleContextWriter<MenuStyleContext>();
  uint64_t v39 = type metadata accessor for ModifiedContent();
  unint64_t v19 = lazy protocol witness table accessor for type StyleContextWriter<MenuStyleContext> and conformance StyleContextWriter<A>();
  uint64_t v67 = a13;
  unint64_t v68 = v19;
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v20 = type metadata accessor for ZStack();
  MEMORY[0x1F4188790](v20);
  uint64_t v22 = (char *)v33 - v21;
  uint64_t v36 = swift_getWitnessTable();
  uint64_t v61 = v20;
  uint64_t v62 = a10;
  uint64_t v34 = a10;
  uint64_t v35 = a11;
  uint64_t v63 = a11;
  uint64_t v64 = v36;
  v33[1] = a14;
  uint64_t v65 = a14;
  uint64_t v66 = a15;
  uint64_t v23 = type metadata accessor for ContextMenuPreviewDestinationModifier();
  uint64_t v24 = *(void *)(v23 - 8);
  MEMORY[0x1F4188790](v23);
  uint64_t v26 = (char *)v33 - v25;
  uint64_t v51 = v50;
  uint64_t v52 = a8;
  uint64_t v53 = a10;
  uint64_t v54 = a11;
  uint64_t v27 = v40;
  uint64_t v55 = v40;
  uint64_t v56 = v37;
  uint64_t v57 = a14;
  uint64_t v58 = a15;
  uint64_t v59 = v42;
  uint64_t v60 = v43;
  static Alignment.center.getter();
  uint64_t v28 = ZStack.init(alignment:content:)();
  uint64_t v29 = (uint64_t)v41;
  uint64_t v30 = v46(v28);
  uint64_t v31 = (uint64_t)v44;
  v48(v30);
  ContextMenuPreviewDestinationModifier.init(menuView:preview:destination:)((uint64_t)v22, v29, v31, v20, v34, v35, (uint64_t)v26);
  MEMORY[0x18C113660](v26, v50, v23, v27);
  return (*(uint64_t (**)(char *, uint64_t))(v24 + 8))(v26, v23);
}

uint64_t closure #1 in View.contextMenu<A, B, C>(menuItems:preview:previewDestination:)@<X0>(void (*a1)(double)@<X0>, uint64_t a2@<X3>, uint64_t a3@<X7>, uint64_t a4@<X8>)
{
  v21[1] = a4;
  uint64_t v7 = *(void *)(a2 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v9 = (char *)v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for StyleContextWriter<MenuStyleContext>();
  uint64_t v10 = type metadata accessor for ModifiedContent();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v10);
  uint64_t v13 = (char *)v21 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v15 = MEMORY[0x1F4188790](v14);
  uint64_t v17 = (char *)v21 - v16;
  a1(v15);
  View.styleContext<A>(_:)();
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, a2);
  unint64_t v18 = lazy protocol witness table accessor for type StyleContextWriter<MenuStyleContext> and conformance StyleContextWriter<A>();
  v21[2] = a3;
  void v21[3] = v18;
  swift_getWitnessTable();
  static ViewBuilder.buildExpression<A>(_:)(v13);
  unint64_t v19 = *(void (**)(char *, uint64_t))(v11 + 8);
  v19(v13, v10);
  static ViewBuilder.buildExpression<A>(_:)(v17);
  return ((uint64_t (*)(char *, uint64_t))v19)(v17, v10);
}

uint64_t partial apply for closure #1 in View.contextMenu<A, B, C>(menuItems:preview:previewDestination:)@<X0>(uint64_t a1@<X8>)
{
  return closure #1 in View.contextMenu<A, B, C>(menuItems:preview:previewDestination:)(*(void (**)(double))(v1 + 80), *(void *)(v1 + 24), *(void *)(v1 + 56), a1);
}

uint64_t View.contextMenu<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v22 = a6;
  uint64_t v19 = a5;
  uint64_t v20 = a1;
  uint64_t v21 = a4;
  type metadata accessor for StyleContextWriter<MenuStyleContext>();
  type metadata accessor for ModifiedContent();
  uint64_t v30 = a5;
  unint64_t v31 = lazy protocol witness table accessor for type StyleContextWriter<MenuStyleContext> and conformance StyleContextWriter<A>();
  swift_getWitnessTable();
  type metadata accessor for ZStack();
  type metadata accessor for Optional();
  uint64_t v9 = type metadata accessor for Group();
  MEMORY[0x1F4188790](v9);
  uint64_t v11 = (char *)&v18 - v10;
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v28 = swift_getWitnessTable();
  swift_getWitnessTable();
  uint64_t v12 = type metadata accessor for ContextMenuModifier();
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x1F4188790](v12);
  double v15 = (char *)&v18 - v14;
  uint64_t v23 = a2;
  uint64_t v24 = a3;
  uint64_t v16 = v21;
  uint64_t v25 = v21;
  uint64_t v26 = v19;
  uint64_t v27 = v20;
  Group<A>.init(content:)();
  ContextMenuModifier.init(menuView:)((uint64_t)v11, v9, (uint64_t)v15);
  MEMORY[0x18C113660](v15, a2, v12, v16);
  return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v15, v12);
}

uint64_t partial apply for closure #1 in View.contextMenu<A>(_:)()
{
  return partial apply for closure #1 in View.contextMenu<A>(_:)((uint64_t (*)(void, void, void, void, void))closure #1 in View.contextMenu<A>(_:));
}

uint64_t closure #1 in closure #1 in View.contextMenu<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  type metadata accessor for StyleContextWriter<MenuStyleContext>();
  uint64_t v6 = type metadata accessor for ModifiedContent();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v9 = (char *)v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v10);
  uint64_t v12 = (char *)v16 - v11;
  View.styleContext<A>(_:)();
  unint64_t v13 = lazy protocol witness table accessor for type StyleContextWriter<MenuStyleContext> and conformance StyleContextWriter<A>();
  v16[0] = a5;
  v16[1] = v13;
  swift_getWitnessTable();
  static ViewBuilder.buildExpression<A>(_:)(v9);
  uint64_t v14 = *(void (**)(char *, uint64_t))(v7 + 8);
  v14(v9, v6);
  static ViewBuilder.buildExpression<A>(_:)(v12);
  return ((uint64_t (*)(char *, uint64_t))v14)(v12, v6);
}

uint64_t ContextMenu.init(menuItems:)(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t getEnumTagSinglePayload for ContextMenu(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (!a2) {
    return 0;
  }
  unsigned int v7 = a2 - v5;
  if (a2 <= v5) {
    goto LABEL_19;
  }
  char v8 = 8 * v6;
  if (v6 <= 3)
  {
    unsigned int v10 = ((v7 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      int v9 = *(_DWORD *)((char *)a1 + v6);
      if (!v9) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      int v9 = *(unsigned __int16 *)((char *)a1 + v6);
      if (!*(unsigned __int16 *)((char *)a1 + v6)) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_19:
      if (v5) {
        return (*(uint64_t (**)(void))(v4 + 48))();
      }
      return 0;
    }
  }
  int v9 = *((unsigned __int8 *)a1 + v6);
  if (!*((unsigned char *)a1 + v6)) {
    goto LABEL_19;
  }
LABEL_11:
  int v11 = (v9 - 1) << v8;
  if (v6 > 3) {
    int v11 = 0;
  }
  if (v6)
  {
    if (v6 > 3) {
      LODWORD(v6) = 4;
    }
    switch((int)v6)
    {
      case 2:
        LODWORD(v6) = *a1;
        break;
      case 3:
        LODWORD(v6) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v6) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v6) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v5 + (v6 | v11) + 1;
}

void storeEnumTagSinglePayload for ContextMenu(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = *(void *)(v6 + 64);
  BOOL v9 = a3 >= v7;
  unsigned int v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      unsigned int v14 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v14))
      {
        int v11 = 4;
      }
      else if (v14 >= 0x100)
      {
        int v11 = 2;
      }
      else
      {
        int v11 = v14 > 1;
      }
    }
    else
    {
      int v11 = 1;
    }
  }
  else
  {
    int v11 = 0;
  }
  if (v7 < a2)
  {
    unsigned int v12 = ~v7 + a2;
    if (v8 < 4)
    {
      int v13 = (v12 >> (8 * v8)) + 1;
      if (v8)
      {
        int v15 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if (v8 == 3)
        {
          *(_WORD *)a1 = v15;
          a1[2] = BYTE2(v15);
        }
        else if (v8 == 2)
        {
          *(_WORD *)a1 = v15;
        }
        else
        {
          *a1 = v15;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v12;
      int v13 = 1;
    }
    switch(v11)
    {
      case 1:
        a1[v8] = v13;
        return;
      case 2:
        *(_WORD *)&a1[v8] = v13;
        return;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v8] = v13;
        return;
      default:
        return;
    }
  }
  switch(v11)
  {
    case 1:
      a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 2:
      *(_WORD *)&a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 3:
LABEL_34:
      __break(1u);
      JUMPOUT(0x187BE7F00);
    case 4:
      *(_DWORD *)&a1[v8] = 0;
      goto LABEL_20;
    default:
LABEL_20:
      if (a2)
      {
LABEL_21:
        uint64_t v16 = *(void (**)(void))(v6 + 56);
        v16();
      }
      return;
  }
}

uint64_t type metadata accessor for ContextMenu()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_187BE7F40()
{
  return swift_getWitnessTable();
}

uint64_t sub_187BE8044()
{
  return swift_getWitnessTable();
}

uint64_t sub_187BE8158()
{
  return swift_getWitnessTable();
}

uint64_t sub_187BE8260()
{
  return swift_getWitnessTable();
}

uint64_t partial apply for closure #1 in closure #1 in View.contextMenu<A>(_:)()
{
  return partial apply for closure #1 in View.contextMenu<A>(_:)(closure #1 in closure #1 in View.contextMenu<A>(_:));
}

uint64_t partial apply for closure #1 in View.contextMenu<A>(_:)(uint64_t (*a1)(void, void, void, void, void))
{
  return a1(v1[6], v1[2], v1[3], v1[4], v1[5]);
}

uint64_t destroy for MenuBuilderContext()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for MenuBuilderContext(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v3 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v3;
  uint64_t v4 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for MenuBuilderContext(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for MenuBuilderContext(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for MenuBuilderContext()
{
  return &type metadata for MenuBuilderContext;
}

ValueMetadata *type metadata accessor for KeyCommandID()
{
  return &type metadata for KeyCommandID;
}

id specialized Sequence.first(where:)(unint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  _s7SwiftUI16CommandOperationVSgMaTm_1(0, &lazy cache variable for type metadata for CommandOperation?, (uint64_t (*)(uint64_t))type metadata accessor for CommandOperation, MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v6 - 8);
  size_t v8 = (char *)v26 - v7;
  if (a1 >> 62) {
    goto LABEL_18;
  }
  uint64_t v9 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v9; uint64_t v9 = _CocoaArrayWrapper.endIndex.getter())
  {
    v26[1] = v3;
    uint64_t v27 = v8;
    uint64_t v29 = v9;
    unint64_t v30 = a1 & 0xC000000000000001;
    uint64_t v10 = 4;
    uint64_t v28 = a2;
    while (1)
    {
      id v12 = v30 ? (id)MEMORY[0x18C117680](v10 - 4, a1) : *(id *)(a1 + 8 * v10);
      int v13 = v12;
      uint64_t v3 = v10 - 3;
      if (__OFADD__(v10 - 4, 1)) {
        break;
      }
      uint64_t v14 = *(void *)(a2 + 40);
      if (*(void *)(v14 + 16))
      {
        id v31 = v12;
        unint64_t v15 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v31);
        if (v16)
        {
          unint64_t v17 = v15;
          unint64_t v18 = a1;
          uint64_t v19 = *(void *)(v14 + 56);
          uint64_t v20 = type metadata accessor for CommandOperation();
          uint64_t v21 = *(void *)(v20 - 8);
          uint64_t v22 = v19 + *(void *)(v21 + 72) * v17;
          a1 = v18;
          size_t v8 = v27;
          _s7SwiftUI16PlatformItemListV0D0VWOcTm_0(v22, (uint64_t)v27, (uint64_t (*)(void))type metadata accessor for CommandOperation);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v21 + 56))(v8, 0, 1, v20);
          a2 = v28;
        }
        else
        {
          uint64_t v20 = type metadata accessor for CommandOperation();
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 56))(v8, 1, 1, v20);
        }
        id v23 = v31;

        type metadata accessor for CommandOperation();
        int v24 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v20 - 8) + 48))(v8, 1, v20);
        uint64_t v9 = v29;
        if (v24 != 1)
        {
          outlined destroy of CommandOperation?((uint64_t)v8);
          swift_bridgeObjectRelease();
          return v23;
        }
      }
      else
      {
        uint64_t v11 = type metadata accessor for CommandOperation();
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56))(v8, 1, 1, v11);
      }
      outlined destroy of CommandOperation?((uint64_t)v8);

      ++v10;
      if (v3 == v9) {
        goto LABEL_19;
      }
    }
    __break(1u);
LABEL_18:
    swift_bridgeObjectRetain();
  }
LABEL_19:
  swift_bridgeObjectRelease();
  return 0;
}

Swift::Void __swiftcall UpdateContextMenuInteraction.updateValue()()
{
  Weakuint64_t Value = (uint64_t *)AGGraphGetWeakValue();
  if (WeakValue)
  {
    uint64_t v1 = *WeakValue;
    uint64_t v2 = MEMORY[0x18C119DF0]();
    if (v2)
    {
      uint64_t v3 = (void *)v2;
      uint64_t v4 = MEMORY[0x1E4FBC860];
      uint64_t v24 = MEMORY[0x1E4FBC860];
      swift_bridgeObjectRetain();
      unint64_t v5 = specialized Dictionary.init(dictionaryLiteral:)(v4);
      _s7SwiftUI16CommandOperationVSgMaTm_1(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<MenuVisitor.MenuStackGroup>, (uint64_t (*)(uint64_t))type metadata accessor for MenuVisitor.MenuStackGroup, MEMORY[0x1E4FBBE00]);
      uint64_t v6 = type metadata accessor for MenuVisitor.MenuStackGroup();
      unint64_t v7 = (*(unsigned __int8 *)(*(void *)(v6 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v6 - 8) + 80);
      uint64_t v8 = swift_allocObject();
      *(_OWORD *)(v8 + 16) = xmmword_18834BB80;
      uint64_t v9 = v8 + v7;
      if (one-time initialization token for empty != -1) {
        swift_once();
      }
      uint64_t v10 = __swift_project_value_buffer(v6, (uint64_t)static MenuVisitor.MenuStackGroup.empty);
      _s7SwiftUI16PlatformItemListV0D0VWOcTm_0(v10, v9, (uint64_t (*)(void))type metadata accessor for MenuVisitor.MenuStackGroup);
      uint64_t aBlock = 0;
      LOBYTE(v17) = 0;
      unint64_t v18 = (id (*)(uint64_t, void *))MEMORY[0x1E4FBC868];
      uint64_t v19 = (void *)v5;
      uint64_t v20 = (uint64_t (*)())v4;
      uint64_t v21 = MEMORY[0x1E4FBC868];
      char v22 = 0;
      uint64_t v23 = v8;
      MenuVisitor.visit(_:uniqueNames:)(v1, &v24);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v24 = v4;
      char v15 = 1;
      uint64_t v11 = swift_allocObject();
      *(void *)(v11 + 16) = &v15;
      *(void *)(v11 + 24) = &v24;
      uint64_t v12 = swift_allocObject();
      *(void *)(v12 + 16) = partial apply for closure #1 in UpdateContextMenuInteraction.updateValue();
      *(void *)(v12 + 24) = v11;
      uint64_t v20 = partial apply for thunk for @callee_guaranteed (@guaranteed UIMenu) -> (@owned UIMenu);
      uint64_t v21 = v12;
      uint64_t aBlock = MEMORY[0x1E4F143A8];
      uint64_t v17 = 1107296256;
      unint64_t v18 = thunk for @escaping @callee_guaranteed (@guaranteed UIMenu) -> (@owned UIMenu);
      uint64_t v19 = &block_descriptor_30;
      int v13 = _Block_copy(&aBlock);
      swift_retain();
      swift_release();
      objc_msgSend(v3, sel_updateVisibleMenuWithBlock_, v13);

      _Block_release(v13);
      char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
      swift_release();
      if (isEscapingClosureAtFileLocation)
      {
        __break(1u);
      }
      else
      {
        swift_release();
        swift_bridgeObjectRelease();
      }
    }
  }
}

uint64_t MenuVisitor.visit(_:uniqueNames:)(uint64_t a1, uint64_t *a2)
{
  char v202 = a2;
  uint64_t v203 = type metadata accessor for UUID();
  uint64_t v4 = *(void *)(v203 - 8);
  MEMORY[0x1F4188790](v203);
  uint64_t v195 = (char *)v156 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v166 = (char *)v156 - v7;
  uint64_t v188 = type metadata accessor for CommandGroupPlacement(0);
  MEMORY[0x1F4188790](v188);
  uint64_t v196 = (uint64_t)v156 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for CommandOperation();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9);
  uint64_t v185 = (uint64_t)v156 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v12);
  uint64_t v160 = (uint64_t)v156 - v13;
  uint64_t v199 = type metadata accessor for MenuVisitor.MenuStackGroup();
  uint64_t v197 = *(void *)(v199 - 8);
  MEMORY[0x1F4188790](v199);
  uint64_t v167 = (uint64_t)v156 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v15);
  uint64_t v187 = (uint64_t)v156 - v16;
  _s7SwiftUI16CommandOperationVSgMaTm_1(0, &lazy cache variable for type metadata for CommandOperation?, (uint64_t (*)(uint64_t))type metadata accessor for CommandOperation, MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v17 - 8);
  uint64_t v19 = (char *)v156 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v20);
  uint64_t v159 = (uint64_t)v156 - v21;
  MEMORY[0x1F4188790](v22);
  uint64_t v161 = (uint64_t)v156 - v23;
  MEMORY[0x1F4188790](v24);
  uint64_t v26 = (unsigned __int8 *)v156 - v25;
  uint64_t v201 = type metadata accessor for PlatformItemList.Item();
  uint64_t v27 = *(void *)(v201 - 8);
  MEMORY[0x1F4188790](v201);
  uint64_t v186 = (uint64_t)v156 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v29);
  id v31 = (void *)((char *)v156 - v30);
  MenuVisitor.reset()();
  unint64_t v207 = *v2;
  uint64_t v32 = *(void (**)(uint64_t, uint64_t))(a1 + 16);
  uint64_t v33 = MEMORY[0x1E4FBC860];
  if (v32)
  {
    uint64_t v184 = v31 + 37;
    uint64_t v206 = (char *)(v2 + 1);
    uint64_t v34 = a1;
    unint64_t v163 = (*(unsigned __int8 *)(v27 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v27 + 80);
    uint64_t v35 = a1 + v163;
    uint64_t v205 = *(void *)(v27 + 72);
    uint64_t v200 = (unsigned int (**)(unsigned __int8 *, uint64_t, uint64_t))(v10 + 48);
    uint64_t v158 = v2 + 5;
    uint64_t v157 = (void (**)(uint64_t, void, uint64_t, uint64_t))(v10 + 56);
    uint64_t v191 = (void (**)(char *, uint64_t, uint64_t))(v4 + 16);
    uint64_t v162 = v4;
    uint64_t v183 = (void (**)(uint64_t, uint64_t))(v4 + 8);
    v156[1] = v34;
    swift_bridgeObjectRetain();
    long long v181 = xmmword_18834BB80;
    unint64_t v204 = v2;
    uint64_t v193 = v9;
    uint64_t v192 = v19;
    uint64_t v194 = v26;
    uint64_t v36 = v2;
    while (1)
    {
      _s7SwiftUI16PlatformItemListV0D0VWOcTm_0(v35, (uint64_t)v31, (uint64_t (*)(void))type metadata accessor for PlatformItemList.Item);
      if (!*v206)
      {
        outlined init with copy of CommandOperation?((uint64_t)v31 + *(int *)(v201 + 112), (uint64_t)v26);
        if ((*v200)(v26, 1, v9) == 1)
        {
          outlined destroy of CommandOperation?((uint64_t)v26);
        }
        else
        {
          int v37 = *v26;
          _s7SwiftUI16PlatformItemListV0D0VWOhTm_0((uint64_t)v26, (uint64_t (*)(void))type metadata accessor for CommandOperation);
          if (v37 == 3) {
            char v38 = 1;
          }
          else {
            char v38 = 2;
          }
          char *v206 = v38;
        }
      }
      unint64_t v39 = v31[41];
      if (v39 >> 62 != 3 || (v39 & 0xFFFFFFFFFFFFFFFCLL) == 0x3FFFFFFFCLL) {
        break;
      }
      int8x16_t v41 = vorrq_s8(vorrq_s8(vorrq_s8(*(int8x16_t *)(v184 + 5), *(int8x16_t *)(v184 + 9)), vorrq_s8(*(int8x16_t *)(v184 + 7), *(int8x16_t *)(v184 + 11))), vorrq_s8(*(int8x16_t *)v184, *((int8x16_t *)v184 + 1)));
      int8x8_t v42 = vorr_s8(*(int8x8_t *)v41.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v41, v41, 8uLL));
      if (v39 != 0xC000000000000000 || *(void *)&v42 != 0) {
        break;
      }
      uint64_t v77 = v187;
      _s7SwiftUI16PlatformItemListV0D0VWOcTm_0((uint64_t)v31, v187, (uint64_t (*)(void))type metadata accessor for PlatformItemList.Item);
      *(void *)(v77 + *(int *)(v199 + 20)) = MEMORY[0x1E4FBC860];
      id v78 = (void *)v36[7];
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        id v78 = (void *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v78[2] + 1, 1, v78);
      }
      unint64_t v80 = v78[2];
      unint64_t v79 = v78[3];
      if (v80 >= v79 >> 1) {
        id v78 = (void *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v79 > 1, v80 + 1, 1, v78);
      }
      _OWORD v78[2] = v80 + 1;
      outlined init with take of CommandOperation(v187, (uint64_t)v78+ ((*(unsigned __int8 *)(v197 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v197 + 80))+ *(void *)(v197 + 72) * v80, (uint64_t (*)(void))type metadata accessor for MenuVisitor.MenuStackGroup);
      v36[7] = v78;
      *((unsigned char *)v36 + 48) = 0;
      if ((v207 & 1) == 0)
      {
LABEL_3:
        _s7SwiftUI16PlatformItemListV0D0VWOhTm_0((uint64_t)v31, (uint64_t (*)(void))type metadata accessor for PlatformItemList.Item);
        goto LABEL_4;
      }
LABEL_74:
      outlined init with copy of CommandOperation?((uint64_t)v31 + *(int *)(v201 + 112), (uint64_t)v19);
      if ((*v200)((unsigned __int8 *)v19, 1, v9) == 1)
      {
        _s7SwiftUI16PlatformItemListV0D0VWOhTm_0((uint64_t)v31, (uint64_t (*)(void))type metadata accessor for PlatformItemList.Item);
        outlined destroy of CommandOperation?((uint64_t)v19);
        goto LABEL_4;
      }
      uint64_t v115 = v185;
      outlined init with take of CommandOperation((uint64_t)v19, v185, (uint64_t (*)(void))type metadata accessor for CommandOperation);
      uint64_t v116 = v115 + *(int *)(v9 + 20);
      _s7SwiftUI16PlatformItemListV0D0VWOcTm_0(v116, v196, type metadata accessor for CommandGroupPlacement);
      uint64_t v117 = v36[3];
      uint64_t v118 = v116 + *(int *)(v188 + 20);
      uint64_t v119 = *v191;
      uint64_t v120 = (uint64_t)v166;
      (*v191)(v166, v118, v203);
      if (*(void *)(v117 + 16))
      {
        unint64_t v121 = specialized __RawDictionaryStorage.find<A>(_:)(v120);
        uint64_t v122 = (void *)MEMORY[0x1E4FBC860];
        if (v123)
        {
          uint64_t v122 = *(void **)(*(void *)(v117 + 56) + 8 * v121);
          swift_bridgeObjectRetain();
        }
      }
      else
      {
        uint64_t v122 = (void *)MEMORY[0x1E4FBC860];
      }
      unint64_t v198 = *v183;
      v198(v120, v203);
      _s7SwiftUI16PlatformItemListV0D0VWOcTm_0((uint64_t)v31, v186, (uint64_t (*)(void))type metadata accessor for PlatformItemList.Item);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v122 = (void *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v122[2] + 1, 1, v122);
      }
      unint64_t v125 = v122[2];
      unint64_t v124 = v122[3];
      if (v125 >= v124 >> 1) {
        uint64_t v122 = (void *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v124 > 1, v125 + 1, 1, v122);
      }
      v122[2] = v125 + 1;
      outlined init with take of CommandOperation(v186, (uint64_t)v122 + v163 + v125 * v205, (uint64_t (*)(void))type metadata accessor for PlatformItemList.Item);
      uint64_t v126 = (uint64_t)v195;
      v119(v195, v196 + *(int *)(v188 + 20), v203);
      int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v208 = (void *)v36[3];
      uint64_t v128 = (uint64_t)v208;
      uint64_t v129 = v36;
      v36[3] = 0x8000000000000000;
      unint64_t v131 = specialized __RawDictionaryStorage.find<A>(_:)(v126);
      uint64_t v132 = *(void *)(v128 + 16);
      BOOL v133 = (v130 & 1) == 0;
      uint64_t v134 = v132 + v133;
      if (__OFADD__(v132, v133))
      {
        __break(1u);
LABEL_100:
        __break(1u);
LABEL_101:
        __break(1u);
LABEL_102:
        uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
        __break(1u);
        return result;
      }
      char v135 = v130;
      if (*(void *)(v128 + 24) >= v134)
      {
        uint64_t v138 = v162;
        if (isUniquelyReferenced_nonNull_native) {
          goto LABEL_90;
        }
        specialized _NativeDictionary.copy()();
      }
      else
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v134, isUniquelyReferenced_nonNull_native);
        unint64_t v136 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v195);
        if ((v135 & 1) != (v137 & 1)) {
          goto LABEL_102;
        }
        unint64_t v131 = v136;
      }
      uint64_t v138 = v162;
LABEL_90:
      uint64_t v26 = v194;
      id v139 = v208;
      if (v135)
      {
        uint64_t v140 = v208[7];
        swift_bridgeObjectRelease();
        *(void *)(v140 + 8 * v131) = v122;
      }
      else
      {
        v208[(v131 >> 6) + 8] |= 1 << v131;
        v119((char *)(v139[6] + *(void *)(v138 + 72) * v131), (uint64_t)v195, v203);
        *(void *)(v139[7] + 8 * v131) = v122;
        uint64_t v141 = v139[2];
        BOOL v142 = __OFADD__(v141, 1);
        uint64_t v143 = v141 + 1;
        if (v142) {
          goto LABEL_100;
        }
        v139[2] = v143;
      }
      uint64_t v36 = v129;
      v129[3] = v139;
      swift_bridgeObjectRelease();
      v198((uint64_t)v195, v203);
      _s7SwiftUI16PlatformItemListV0D0VWOhTm_0(v196, type metadata accessor for CommandGroupPlacement);
      _s7SwiftUI16PlatformItemListV0D0VWOhTm_0(v185, (uint64_t (*)(void))type metadata accessor for CommandOperation);
      _s7SwiftUI16PlatformItemListV0D0VWOhTm_0((uint64_t)v31, (uint64_t (*)(void))type metadata accessor for PlatformItemList.Item);
      uint64_t v9 = v193;
      uint64_t v19 = v192;
LABEL_4:
      v35 += v205;
      uint64_t v32 = (void (*)(uint64_t, uint64_t))((char *)v32 - 1);
      if (!v32)
      {
        swift_bridgeObjectRelease();
        uint64_t v33 = MEMORY[0x1E4FBC860];
        uint64_t v2 = v36;
        goto LABEL_97;
      }
    }
    uint64_t v44 = v31[77];
    if (!v44)
    {
      MenuVisitor.buildUIMenuElement(_:uniqueNames:)((uint64_t)v31, v202);
      if ((v207 & 1) == 0) {
        goto LABEL_3;
      }
      goto LABEL_74;
    }
    unint64_t v198 = v32;
    uint64_t v45 = *v36;
    swift_bridgeObjectRetain();
    uint64_t v46 = MEMORY[0x1E4FBC860];
    unint64_t v47 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
    LOBYTE(v216) = 0;
    _s7SwiftUI16CommandOperationVSgMaTm_1(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<MenuVisitor.MenuStackGroup>, (uint64_t (*)(uint64_t))type metadata accessor for MenuVisitor.MenuStackGroup, MEMORY[0x1E4FBBE00]);
    uint64_t v48 = *(void *)(v197 + 72);
    unint64_t v49 = (*(unsigned __int8 *)(v197 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v197 + 80);
    uint64_t v50 = swift_allocObject();
    *(_OWORD *)(v50 + 16) = v181;
    if (one-time initialization token for empty != -1) {
      swift_once();
    }
    uint64_t v51 = __swift_project_value_buffer(v199, (uint64_t)static MenuVisitor.MenuStackGroup.empty);
    _s7SwiftUI16PlatformItemListV0D0VWOcTm_0(v51, v50 + v49, (uint64_t (*)(void))type metadata accessor for MenuVisitor.MenuStackGroup);
    uint64_t v208 = (void *)v45;
    char v209 = 0;
    uint64_t v210 = MEMORY[0x1E4FBC868];
    unint64_t v211 = v47;
    uint64_t v212 = v46;
    uint64_t v213 = MEMORY[0x1E4FBC868];
    char v214 = v216;
    uint64_t v215 = v50;
    MenuVisitor.visit(_:uniqueNames:)(v44, v202);
    swift_bridgeObjectRelease();
    uint64_t v52 = (void *)v31[37];
    uint64_t v53 = v31[38];
    uint64_t v54 = v31[39];
    uint64_t v55 = v31[40];
    unint64_t v56 = v31[41];
    uint64_t v57 = v31[42];
    uint64_t v58 = v31[43];
    uint64_t v59 = v31[44];
    uint64_t v61 = v31[45];
    uint64_t v60 = v31[46];
    uint64_t v62 = v31[47];
    uint64_t v63 = v31[48];
    uint64_t v64 = v31[49];
    if (v56 >> 62 == 3
      && (v56 & 0xFFFFFFFFFFFFFFFCLL) != 0x3FFFFFFFCLL
      && ((uint64_t v65 = v54 | v53 | v55 | v57 | v58 | v59 | v61 | v60 | v62 | v63 | v64, v56 == 0xC000000000000000)
       && v52 == (void *)2
       && !v65
       || v56 == 0xC000000000000000 && v52 == (void *)4 && !v65))
    {
      uint64_t v66 = v167;
      _s7SwiftUI16PlatformItemListV0D0VWOcTm_0((uint64_t)v31, v167, (uint64_t (*)(void))type metadata accessor for PlatformItemList.Item);
      *(void *)(v66 + *(int *)(v199 + 20)) = v212;
      uint64_t v67 = v204;
      unint64_t v68 = (void *)v204[7];
      swift_bridgeObjectRetain();
      char v69 = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v32 = v198;
      if ((v69 & 1) == 0) {
        unint64_t v68 = (void *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v68[2] + 1, 1, v68);
      }
      uint64_t v19 = v192;
      unint64_t v71 = v68[2];
      unint64_t v70 = v68[3];
      if (v71 >= v70 >> 1) {
        unint64_t v68 = (void *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v70 > 1, v71 + 1, 1, v68);
      }
      v68[2] = v71 + 1;
      outlined init with take of CommandOperation(v167, (uint64_t)v68 + v49 + v71 * v48, (uint64_t (*)(void))type metadata accessor for MenuVisitor.MenuStackGroup);
      v67[7] = v68;
      *((unsigned char *)v67 + 48) = 1;
      uint64_t v9 = v193;
      if ((v207 & 2) == 0) {
        goto LABEL_66;
      }
    }
    else
    {
      uint64_t v190 = v35;
      unint64_t v168 = v56;
      v189.value = (UIMenuIdentifier)(v56 >> 62);
      unint64_t v182 = v56 & 0xFFFFFFFFFFFFFFFCLL;
      uint64_t v169 = v64;
      uint64_t v170 = v63;
      uint64_t v171 = v62;
      uint64_t v172 = v60;
      uint64_t v173 = v61;
      uint64_t v174 = v59;
      uint64_t v175 = v58;
      uint64_t v176 = v57;
      uint64_t v177 = v55;
      uint64_t v178 = v54;
      uint64_t v179 = v53;
      id v180 = v52;
      uint64_t v72 = v204[2];
      int v73 = *((unsigned __int8 *)v204 + 48);
      PlatformItemList.Item.configurationIdentifier.getter((uint64_t)v217);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      unint64_t v74 = PlatformItemList.Item.ConfigurationIdentifier.identifier.getter();
      uint64_t v76 = v75;
      outlined release of PlatformItemList.Item.ConfigurationIdentifier((uint64_t)v217);
      if (v73 == 1)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v164 = v72;
        uint64_t v81 = *v202;
        uint64_t v82 = specialized MenuVisitor.uniqueMenuIdentifier(in:candidate:)(*v202, v74, v76);
        uint64_t v84 = v83;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRetain();
        char v85 = swift_isUniquelyReferenced_nonNull_native();
        unint64_t v165 = v82;
        if ((v85 & 1) == 0) {
          uint64_t v81 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v81 + 16) + 1, 1, (char *)v81);
        }
        unint64_t v87 = *(void *)(v81 + 16);
        unint64_t v86 = *(void *)(v81 + 24);
        if (v87 >= v86 >> 1) {
          uint64_t v81 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v86 > 1), v87 + 1, 1, (char *)v81);
        }
        *(void *)(v81 + 16) = v87 + 1;
        uint64_t v88 = v81 + 16 * v87;
        unint64_t v74 = v165;
        *(void *)(v88 + 32) = v165;
        *(void *)(v88 + 40) = v84;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t *v202 = v81;
        uint64_t v76 = v84;
      }
      id v89 = PlatformItemList.Item.uiAction(_:)(v74, v76);
      static Semantics.v6.getter();
      if (isLinkedOnOrAfter(_:)()) {
        uint64_t v90 = 16;
      }
      else {
        uint64_t v90 = 0;
      }
      if (v189.value)
      {
        unint64_t v91 = v74;
      }
      else
      {
        unint64_t v91 = v74;
        if (v182 != 0x3FFFFFFFCLL)
        {
          v90 |= 0x81uLL;
          outlined copy of PlatformItemList.Item.SystemItem(v180, v179, v178, v177, v168, v176, v175, v174, v173, v172, v171, v170, v169);
        }
      }
      v189.value = (UIMenuIdentifier)v90;
      id v92 = objc_msgSend(v89, sel_title);
      uint64_t v93 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v95 = v94;

      id v96 = objc_msgSend(v89, sel_subtitle);
      if (v96)
      {
        uint64_t v97 = v96;
        uint64_t v98 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        id v100 = v99;
      }
      else
      {
        uint64_t v98 = 0;
        id v100 = 0;
      }
      type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIMenu);
      unint64_t v101 = v89;
      uint64_t v102 = (objc_class *)objc_msgSend(v89, sel_image);
      char v103 = MEMORY[0x18C115780](v91, v76);
      swift_bridgeObjectRelease();
      UIMenuElementSize v154 = swift_bridgeObjectRetain();
      v104._countAndFlagsBits = v93;
      v104._object = v95;
      v105.value._countAndFlagsBits = v98;
      v105.value._object = v100;
      v219.value.super.Class isa = v102;
      v219.is_nil = v103;
      UIMenu.init(title:subtitle:image:identifier:options:preferredElementSize:children:)(&v218, v104, v105, v219, v189, 0xFFFFFFFFFFFFFFFFLL, v154, v155);
      id v107 = v106;
      specialized PlatformItemList.Item.applyAccessibilityProperties(to:)(v107, v31);

      MenuVisitor.appendMenuItem(_:)(v107);
      if ((v207 & 2) == 0)
      {

        uint64_t v9 = v193;
        uint64_t v19 = v192;
        uint64_t v32 = v198;
        uint64_t v35 = v190;
        goto LABEL_66;
      }
      uint64_t v108 = v161;
      outlined init with copy of CommandOperation?((uint64_t)v31 + *(int *)(v201 + 112), v161);
      uint64_t v9 = v193;
      unsigned int v109 = (*v200)((unsigned __int8 *)v108, 1, v193);
      uint64_t v19 = v192;
      uint64_t v32 = v198;
      if (v109 == 1)
      {

        outlined destroy of CommandOperation?(v108);
      }
      else
      {
        uint64_t v110 = v160;
        outlined init with take of CommandOperation(v108, v160, (uint64_t (*)(void))type metadata accessor for CommandOperation);
        uint64_t v111 = v159;
        _s7SwiftUI16PlatformItemListV0D0VWOcTm_0(v110, v159, (uint64_t (*)(void))type metadata accessor for CommandOperation);
        (*v157)(v111, 0, 1, v9);
        specialized Dictionary.subscript.setter(v111, v107);

        _s7SwiftUI16PlatformItemListV0D0VWOhTm_0(v110, (uint64_t (*)(void))type metadata accessor for CommandOperation);
      }
      uint64_t v35 = v190;
    }
    uint64_t v112 = v210;
    uint64_t v113 = v211;
    uint64_t v114 = v213;
    if (*(void *)(v210 + 16) || *(void *)(v211 + 16) || *(void *)(v213 + 16))
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      specialized MenuBuilderContext.mergeMaps(from:)(v112, v113, v114);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_73:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v26 = v194;
      uint64_t v36 = v204;
      if ((v207 & 1) == 0) {
        goto LABEL_3;
      }
      goto LABEL_74;
    }
LABEL_66:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_73;
  }
LABEL_97:
  uint64_t v208 = (void *)v33;
  uint64_t v144 = v2[7];
  uint64_t v145 = *(void *)(v144 + 16);
  if (!v145) {
    goto LABEL_101;
  }
  uint64_t v146 = (uint64_t)v2;
  uint64_t v147 = (v207 >> 1) & 1;
  uint64_t v148 = v144 + ((*(unsigned __int8 *)(v197 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v197 + 80));
  uint64_t v149 = *(void *)(v148 + *(int *)(v199 + 20));
  unint64_t v150 = (2 * v145) | 1;
  swift_bridgeObjectRetain();
  _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs10ArraySliceVy7SwiftUI11MenuVisitor33_0F42DDF44729C152DA9EC9F6F4D00118LLV0H10StackGroupVG_So06UIMenuB0Cs5NeverOTg503_s7f4UI11h11Visitor33_0jklmnopq59LLV5visit_11uniqueNamesyAA16PlatformItemListV_SaySSGztFSo13tb7CAD0C10rS6VXEfU_AKSaySSGSbTf1cn_nTf4xnnn_n(v148, 1, v150, v146, (uint64_t *)&v208, v147);
  uint64_t v216 = v149;
  specialized Array.append<A>(contentsOf:)(v151);
  uint64_t v152 = v216;
  swift_bridgeObjectRelease();
  *(void *)(v146 + 32) = v152;
  return swift_bridgeObjectRelease();
}

uint64_t one-time initialization function for empty()
{
  uint64_t v0 = type metadata accessor for PlatformItemList.Item();
  MEMORY[0x1F4188790](v0 - 8);
  uint64_t v2 = (char *)&v6 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = type metadata accessor for MenuVisitor.MenuStackGroup();
  __swift_allocate_value_buffer(v3, static MenuVisitor.MenuStackGroup.empty);
  uint64_t v4 = __swift_project_value_buffer(v3, (uint64_t)static MenuVisitor.MenuStackGroup.empty);
  _s7SwiftUI5ImageVAAE8ResolvedVSgWOi0_((uint64_t)v12);
  outlined init with take of PlatformItem.PrimaryContent?((uint64_t)v12, (uint64_t)v11, (unint64_t *)&lazy cache variable for type metadata for Image.Resolved?);
  v9[0] = xmmword_18834BB90;
  memset(&v9[1], 0, 48);
  char v10 = 0;
  __n128 v7 = 0uLL;
  uint64_t v8 = 0;
  PlatformItemList.Item.init(text:image:selectionBehavior:accessibility:tint:imageColorResolver:)(0, (uint64_t)v11, v9, &v7, 0, 0, (uint64_t)v2);
  uint64_t result = outlined init with take of CommandOperation((uint64_t)v2, v4, (uint64_t (*)(void))type metadata accessor for PlatformItemList.Item);
  *(void *)(v4 + *(int *)(v3 + 20)) = MEMORY[0x1E4FBC860];
  return result;
}

uint64_t MenuVisitor.reset()()
{
  uint64_t v1 = MEMORY[0x1E4FBC860];
  unint64_t v2 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v3 = MEMORY[0x1E4FBC868];
  *(unsigned char *)(v0 + 8) = 0;
  *(void *)(v0 + 16) = v3;
  *(void *)(v0 + 24) = v2;
  *(void *)(v0 + 32) = v1;
  *(void *)(v0 + 40) = v3;
  *(unsigned char *)(v0 + 48) = 0;
  _s7SwiftUI16CommandOperationVSgMaTm_1(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<MenuVisitor.MenuStackGroup>, (uint64_t (*)(uint64_t))type metadata accessor for MenuVisitor.MenuStackGroup, MEMORY[0x1E4FBBE00]);
  uint64_t v4 = type metadata accessor for MenuVisitor.MenuStackGroup();
  unint64_t v5 = (*(unsigned __int8 *)(*(void *)(v4 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v4 - 8) + 80);
  uint64_t v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_18834BB80;
  if (one-time initialization token for empty != -1) {
    swift_once();
  }
  uint64_t v7 = __swift_project_value_buffer(v4, (uint64_t)static MenuVisitor.MenuStackGroup.empty);
  _s7SwiftUI16PlatformItemListV0D0VWOcTm_0(v7, v6 + v5, (uint64_t (*)(void))type metadata accessor for MenuVisitor.MenuStackGroup);
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v0 + 56) = v6;
  return result;
}

id PlatformItemList.Item.uiAction(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v40 = type metadata accessor for PlatformItemList.Item();
  uint64_t v43 = *(void *)(v40 - 8);
  uint64_t v6 = *(void *)(v43 + 64);
  MEMORY[0x1F4188790](v40);
  uint64_t v7 = (char *)&v40 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v10 = MEMORY[0x1F4188790](v8);
  uint64_t v11 = (id *)((char *)&v40 - v9);
  uint64_t v12 = *(void **)(v3 + 576);
  if (v12)
  {
    id v13 = objc_msgSend(v12, sel_string, v10);
    uint64_t v14 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v16 = v15;

    _s7SwiftUI16PlatformItemListV0D0VWOcTm_0(v3, (uint64_t)v11, (uint64_t (*)(void))type metadata accessor for PlatformItemList.Item);
    if (v16)
    {
      unint64_t v41 = v16;
      uint64_t v42 = v14;
      goto LABEL_8;
    }
  }
  else
  {
    _s7SwiftUI16PlatformItemListV0D0VWOcTm_0(v3, (uint64_t)&v40 - v9, (uint64_t (*)(void))type metadata accessor for PlatformItemList.Item);
  }
  if (*v11)
  {
    id v17 = objc_msgSend(*v11, sel_string);
    uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v41 = v19;
    uint64_t v42 = v18;
  }
  else
  {
    unint64_t v41 = 0xE000000000000000;
    uint64_t v42 = 0;
  }
LABEL_8:
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIAction);
  _s7SwiftUI16PlatformItemListV0D0VWOhTm_0((uint64_t)v11, (uint64_t (*)(void))type metadata accessor for PlatformItemList.Item);
  PlatformItemList.Item.resolvedMenuItemImage.getter();
  MEMORY[0x18C115780](a1, a2);
  _s7SwiftUI16PlatformItemListV0D0VWOcTm_0(v3, (uint64_t)v7, (uint64_t (*)(void))type metadata accessor for PlatformItemList.Item);
  uint64_t v20 = *(unsigned __int8 *)(v43 + 80);
  uint64_t v21 = swift_allocObject();
  outlined init with take of CommandOperation((uint64_t)v7, v21 + ((v20 + 16) & ~v20), (uint64_t (*)(void))type metadata accessor for PlatformItemList.Item);
  swift_bridgeObjectRetain();
  uint64_t v22 = (void *)UIAction.init(title:subtitle:image:selectedImage:identifier:discoverabilityTitle:attributes:state:handler:)();
  uint64_t v23 = v22;
  uint64_t v24 = *(void *)(v3 + 624);
  if (v24 && *(void *)(v24 + 16) && (uint64_t v25 = *(void **)(v24 + ((v20 + 32) & ~v20))) != 0)
  {
    id v26 = v22;
    id v27 = objc_msgSend(v25, sel_string);
    uint64_t v28 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v30 = v29;

    id v31 = (void *)MEMORY[0x18C115780](v28, v30);
    swift_bridgeObjectRelease();
  }
  else
  {
    id v32 = v22;
    id v31 = 0;
  }
  objc_msgSend(v23, sel_setSubtitle_, v31, v40, v41, v42);

  objc_msgSend(v23, sel_setState_, qword_188389B38[*(char *)(v3 + 634)]);
  unint64_t v33 = *(void *)(v3 + 328);
  if (!(v33 >> 62) && (v33 & 0xFFFFFFFFFFFFFFFCLL) != 0x3FFFFFFFCLL)
  {
    uint64_t v34 = *(void *)(v3 + 296) & 0xFF00;
    outlined copy of PlatformItemList.Item.SystemItem(*(id *)(v3 + 296), *(void *)(v3 + 304), *(void *)(v3 + 312), *(void *)(v3 + 320), v33, *(void *)(v3 + 336), *(void *)(v3 + 344), *(void *)(v3 + 352), *(void *)(v3 + 360), *(void *)(v3 + 368), *(void *)(v3 + 376), *(void *)(v3 + 384), *(void *)(v3 + 392));
    if (v34 != 1024)
    {
      id v35 = PlatformItemList.Item.resolvedMenuItemImage.getter();
      objc_msgSend(v23, sel_setSelectedImage_, v35);
    }
  }
  uint64_t v36 = *(void *)(v3 + 408);
  if (!v36) {
    goto LABEL_25;
  }
  if (v36 != 1)
  {
    if (*(unsigned char *)(v3 + 56)) {
      goto LABEL_20;
    }
LABEL_25:
    if (*(unsigned char *)(v3 + *(int *)(v40 + 120))) {
      uint64_t v37 = 9;
    }
    else {
      uint64_t v37 = 1;
    }
    goto LABEL_32;
  }
  if (!*(void *)(v3 + 616)) {
    goto LABEL_25;
  }
LABEL_20:
  if ((*(unsigned char *)(v3 + 521) & 1) != 0 || *(unsigned char *)(v3 + 520) != 1)
  {
    if (*(unsigned char *)(v3 + *(int *)(v40 + 120)) == 1) {
      uint64_t v37 = 8;
    }
    else {
      uint64_t v37 = 0;
    }
  }
  else if (*(unsigned char *)(v3 + *(int *)(v40 + 120)))
  {
    uint64_t v37 = 10;
  }
  else
  {
    uint64_t v37 = 2;
  }
LABEL_32:
  objc_msgSend(v23, sel_setAttributes_, v37);
  id v38 = v23;
  specialized PlatformItemList.Item.applyAccessibilityProperties(to:)(v38, (void *)v3);

  return v38;
}

uint64_t MenuVisitor.appendMenuItem(_:)(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for MenuVisitor.MenuStackGroup();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(unsigned char *)(v2 + 48))
  {
    if (one-time initialization token for empty != -1) {
      swift_once();
    }
    uint64_t v8 = __swift_project_value_buffer(v4, (uint64_t)static MenuVisitor.MenuStackGroup.empty);
    _s7SwiftUI16PlatformItemListV0D0VWOcTm_0(v8, (uint64_t)v7, (uint64_t (*)(void))type metadata accessor for MenuVisitor.MenuStackGroup);
    uint64_t v9 = *(void **)(v2 + 56);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v9 = (void *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v9[2] + 1, 1, v9);
    }
    unint64_t v11 = v9[2];
    unint64_t v10 = v9[3];
    if (v11 >= v10 >> 1) {
      uint64_t v9 = (void *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v10 > 1, v11 + 1, 1, v9);
    }
    void v9[2] = v11 + 1;
    outlined init with take of CommandOperation((uint64_t)v7, (uint64_t)v9+ ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))+ *(void *)(v5 + 72) * v11, (uint64_t (*)(void))type metadata accessor for MenuVisitor.MenuStackGroup);
    *(void *)(v2 + 56) = v9;
    *(unsigned char *)(v2 + 48) = 0;
  }
  else
  {
    uint64_t v9 = *(void **)(v2 + 56);
  }
  unint64_t v12 = v9[2];
  id v13 = a1;
  if (swift_isUniquelyReferenced_nonNull_native())
  {
    if (v12) {
      goto LABEL_12;
    }
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  uint64_t v9 = (void *)specialized _ArrayBuffer._consumeAndCreateNew()(v9);
  if (!v12) {
    goto LABEL_16;
  }
LABEL_12:
  if (v12 > v9[2])
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  uint64_t v14 = (void *)((char *)v9
                 + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))
                 + *(void *)(v5 + 72) * (v12 - 1)
                 + *(int *)(v4 + 20));
  MEMORY[0x18C115B40]();
  if (*(void *)((*v14 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*v14 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
LABEL_18:
  }
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  uint64_t result = specialized Array._endMutation()();
  *(void *)(v2 + 56) = v9;
  return result;
}

void MenuVisitor.buildUIMenuElement(_:uniqueNames:)(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = v2;
  _s7SwiftUI16CommandOperationVSgMaTm_1(0, &lazy cache variable for type metadata for CommandOperation?, (uint64_t (*)(uint64_t))type metadata accessor for CommandOperation, MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v43 = (uint64_t)&v42 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v8);
  unint64_t v10 = (char *)&v42 - v9;
  uint64_t v11 = type metadata accessor for CommandOperation();
  uint64_t v44 = *(void *)(v11 - 8);
  uint64_t v45 = v11;
  MEMORY[0x1F4188790](v11);
  uint64_t v42 = (uint64_t)&v42 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = *v2;
  char v14 = *((unsigned char *)v2 + 48);
  PlatformItemList.Item.configurationIdentifier.getter((uint64_t)v48);
  uint64_t v15 = PlatformItemList.Item.ConfigurationIdentifier.identifier.getter();
  uint64_t v17 = v16;
  outlined release of PlatformItemList.Item.ConfigurationIdentifier((uint64_t)v48);
  if (v14)
  {
    uint64_t v18 = v17;
    if ((v13 & 1) == 0) {
      goto LABEL_13;
    }
  }
  else
  {
    uint64_t v19 = *a2;
    uint64_t v15 = specialized MenuVisitor.uniqueMenuIdentifier(in:candidate:)(*a2, v15, v17);
    uint64_t v18 = v20;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v19 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v19 + 16) + 1, 1, (char *)v19);
    }
    unint64_t v22 = *(void *)(v19 + 16);
    unint64_t v21 = *(void *)(v19 + 24);
    if (v22 >= v21 >> 1) {
      uint64_t v19 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v21 > 1), v22 + 1, 1, (char *)v19);
    }
    *(void *)(v19 + 16) = v22 + 1;
    uint64_t v23 = v19 + 16 * v22;
    *(void *)(v23 + 32) = v15;
    *(void *)(v23 + 40) = v18;
    *a2 = v19;
    if ((v13 & 1) == 0)
    {
LABEL_13:
      if (*(void *)(a1 + 408) != 1 && *(void *)(a1 + 456) && *(void *)a1)
      {
        id v33 = objc_msgSend(*(id *)a1, sel_string);
        static String._unconditionallyBridgeFromObjectiveC(_:)();

        type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UICommand);
        long long v46 = 0u;
        long long v47 = 0u;
        uint64_t v34 = UICommand.init(title:subtitle:image:selectedImage:action:propertyList:alternates:discoverabilityTitle:attributes:state:)();
      }
      else
      {
        uint64_t v34 = (uint64_t)PlatformItemList.Item.uiAction(_:)(v15, v18);
      }
      id v26 = (id)v34;
      swift_bridgeObjectRelease();
      MenuVisitor.appendMenuItem(_:)(v26);
      if ((v13 & 1) == 0)
      {

        return;
      }
      goto LABEL_22;
    }
  }
  uint64_t v24 = PlatformItemList.Item.uiKeyCommand.getter();
  if (!v24) {
    goto LABEL_13;
  }
  uint64_t v25 = v24;
  swift_bridgeObjectRelease();
  id v26 = v25;
  id v27 = UIKeyCommand.discoverabilityID.getter();
  if (v28)
  {
    __break(1u);
    return;
  }
  Swift::UInt v29 = (Swift::UInt)v27;
  unint64_t v30 = *(void *)(a1 + 408);
  if (v30 >= 2)
  {
    uint64_t v35 = *(void *)(a1 + 416);
    uint64_t v32 = swift_allocObject();
    *(void *)(v32 + 16) = v30;
    *(void *)(v32 + 24) = v35;
    swift_retain();
    id v31 = partial apply for thunk for @callee_guaranteed () -> ();
  }
  else
  {
    id v31 = (uint64_t (*)())destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
    uint64_t v32 = 0;
  }
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(void *)&long long v46 = v3[2];
  v3[2] = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v31, v32, v29, isUniquelyReferenced_nonNull_native);
  v3[2] = v46;

  swift_bridgeObjectRelease();
  MenuVisitor.appendMenuItem(_:)(v26);
LABEL_22:
  uint64_t v37 = type metadata accessor for PlatformItemList.Item();
  outlined init with copy of CommandOperation?(a1 + *(int *)(v37 + 112), (uint64_t)v10);
  uint64_t v39 = v44;
  uint64_t v38 = v45;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v44 + 48))(v10, 1, v45) == 1)
  {

    outlined destroy of CommandOperation?((uint64_t)v10);
  }
  else
  {
    uint64_t v40 = v42;
    outlined init with take of CommandOperation((uint64_t)v10, v42, (uint64_t (*)(void))type metadata accessor for CommandOperation);
    uint64_t v41 = v43;
    _s7SwiftUI16PlatformItemListV0D0VWOcTm_0(v40, v43, (uint64_t (*)(void))type metadata accessor for CommandOperation);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v39 + 56))(v41, 0, 1, v38);
    specialized Dictionary.subscript.setter(v41, v26);
    _s7SwiftUI16PlatformItemListV0D0VWOhTm_0(v40, (uint64_t (*)(void))type metadata accessor for CommandOperation);
  }
}

void closure #1 in MenuVisitor.visit(_:uniqueNames:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, int a4@<W3>, void *a5@<X8>)
{
  int v71 = a4;
  uint64_t v66 = a5;
  uint64_t v67 = a3;
  _s7SwiftUI16CommandOperationVSgMaTm_1(0, &lazy cache variable for type metadata for CommandOperation?, (uint64_t (*)(uint64_t))type metadata accessor for CommandOperation, MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v8 - 8);
  uint64_t v61 = (uint64_t)&v61 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v10);
  uint64_t v63 = (uint64_t)&v61 - v11;
  MEMORY[0x1F4188790](v12);
  unint64_t v70 = (char *)&v61 - v13;
  uint64_t v14 = type metadata accessor for CommandOperation();
  uint64_t v72 = *(void *)(v14 - 8);
  uint64_t v73 = v14;
  MEMORY[0x1F4188790](v14);
  uint64_t v62 = (uint64_t)&v61 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v64 = a2;
  uint64_t v65 = a2 + 40;
  uint64_t v16 = *a3;
  uint64_t v68 = a1;
  PlatformItemList.Item.configurationIdentifier.getter((uint64_t)v74);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  unint64_t v17 = PlatformItemList.Item.ConfigurationIdentifier.identifier.getter();
  uint64_t v19 = v18;
  outlined release of PlatformItemList.Item.ConfigurationIdentifier((uint64_t)v74);
  uint64_t v69 = specialized MenuVisitor.uniqueMenuIdentifier(in:candidate:)(v16, v17, v19);
  uint64_t v21 = v20;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  unint64_t v22 = (char **)v67;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v23 = *v22;
  swift_bridgeObjectRetain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *unint64_t v22 = v23;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    uint64_t v23 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v23 + 2) + 1, 1, v23);
    *unint64_t v22 = v23;
  }
  unint64_t v26 = *((void *)v23 + 2);
  unint64_t v25 = *((void *)v23 + 3);
  uint64_t v28 = v72;
  uint64_t v27 = v73;
  uint64_t v29 = v68;
  if (v26 >= v25 >> 1)
  {
    uint64_t v23 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v25 > 1), v26 + 1, 1, v23);
    *unint64_t v22 = v23;
  }
  *((void *)v23 + 2) = v26 + 1;
  unint64_t v30 = &v23[16 * v26];
  uint64_t v31 = v69;
  *((void *)v30 + 4) = v69;
  *((void *)v30 + 5) = v21;
  if (*(void *)v29)
  {
    id v32 = objc_msgSend(*(id *)v29, sel_string);
    uint64_t v33 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v35 = v34;
  }
  else
  {
    uint64_t v33 = 0;
    uint64_t v35 = (void *)0xE000000000000000;
  }
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIMenu);
  char v36 = MEMORY[0x18C115780](v31, v21);
  swift_bridgeObjectRelease();
  type metadata accessor for MenuVisitor.MenuStackGroup();
  UIMenuElementSize v59 = swift_bridgeObjectRetain();
  v37._countAndFlagsBits = v33;
  v37._object = v35;
  v75.value.super.Class isa = 0;
  v75.is_nil = v36;
  UIMenu.init(title:subtitle:image:identifier:options:preferredElementSize:children:)(v38, v37, (Swift::String_optional)0, v75, (UIMenuIdentifier_optional)1, 0xFFFFFFFFFFFFFFFFLL, v59, v60);
  uint64_t v40 = v39;
  unint64_t v41 = *(void *)(v29 + 328);
  if (v41 >> 62 == 3
    && (v41 & 0xFFFFFFFFFFFFFFFCLL) != 0x3FFFFFFFCLL
    && v41 == 0xC000000000000000
    && *(void *)(v29 + 296) == 4
    && !(*(void *)(v29 + 312) | *(void *)(v29 + 320) | *(void *)(v29 + 304)))
  {
    int8x16_t v42 = vorrq_s8(vorrq_s8(*(int8x16_t *)(v29 + 336), *(int8x16_t *)(v29 + 368)), vorrq_s8(*(int8x16_t *)(v29 + 352), *(int8x16_t *)(v29 + 384)));
    if (!*(void *)&vorr_s8(*(int8x8_t *)v42.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v42, v42, 8uLL)))
    {
      uint64_t v43 = 1;
      if (*(unsigned char *)(v29 + 633) != 1) {
        uint64_t v43 = 2;
      }
      if (*(unsigned char *)(v29 + 633)) {
        uint64_t v44 = v43;
      }
      else {
        uint64_t v44 = 0;
      }
      objc_msgSend(v39, sel_setPreferredElementSize_, v44);
    }
  }
  uint64_t v45 = (uint64_t)v70;
  if (v71)
  {
    uint64_t v46 = type metadata accessor for PlatformItemList.Item();
    outlined init with copy of CommandOperation?(v29 + *(int *)(v46 + 112), v45);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v28 + 48))(v45, 1, v27) == 1)
    {
      outlined destroy of CommandOperation?(v45);
      unint64_t v47 = swift_bridgeObjectRetain();
      id v48 = specialized Sequence.first(where:)(v47, v64);
      swift_bridgeObjectRelease();
      if (v48)
      {
        uint64_t v49 = *(void *)v65;
        if (*(void *)(*(void *)v65 + 16))
        {
          id v50 = v40;
          id v51 = v48;
          unint64_t v52 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v51);
          if (v53)
          {
            uint64_t v54 = *(void *)(v49 + 56) + *(void *)(v28 + 72) * v52;
            uint64_t v55 = v61;
            _s7SwiftUI16PlatformItemListV0D0VWOcTm_0(v54, v61, (uint64_t (*)(void))type metadata accessor for CommandOperation);
            (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v28 + 56))(v55, 0, 1, v27);
          }
          else
          {
            uint64_t v55 = v61;
            (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v28 + 56))(v61, 1, 1, v27);
          }
        }
        else
        {
          uint64_t v55 = v61;
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v28 + 56))(v61, 1, 1, v27);
          id v58 = v40;
        }
        specialized Dictionary.subscript.setter(v55, v40);
      }
    }
    else
    {
      uint64_t v56 = v62;
      outlined init with take of CommandOperation(v45, v62, (uint64_t (*)(void))type metadata accessor for CommandOperation);
      uint64_t v57 = v63;
      _s7SwiftUI16PlatformItemListV0D0VWOcTm_0(v56, v63, (uint64_t (*)(void))type metadata accessor for CommandOperation);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v28 + 56))(v57, 0, 1, v27);
      specialized Dictionary.subscript.setter(v57, v40);
      _s7SwiftUI16PlatformItemListV0D0VWOhTm_0(v56, (uint64_t (*)(void))type metadata accessor for CommandOperation);
    }
  }
  *uint64_t v66 = v40;
}

void *PlatformItemList.Item.uiKeyCommand.getter()
{
  if (*(void *)(v0 + 480))
  {
    uint64_t v1 = v0;
    char v2 = *(unsigned char *)(v0 + 496);
    swift_bridgeObjectRetain_n();
    if ((Character.isUppercase.getter() & 1) != 0 && (static Semantics.v3.getter(), (isLinkedOnOrAfter(_:)() & 1) == 0))
    {
      String.lowercased()();
      swift_bridgeObjectRelease();
      uint64_t v3 = *(void **)v0;
      if (!*(void *)v0)
      {
LABEL_8:
        PlatformItemList.Item.image.getter();
        type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIKeyCommand);
        _s7SwiftUI16CommandOperationVSgMaTm_1(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<(Any, Any)>, (uint64_t (*)(uint64_t))type metadata accessor for (Any, Any), MEMORY[0x1E4FBBE00]);
        uint64_t v6 = swift_allocObject();
        *(_OWORD *)(v6 + 16) = xmmword_18834BB80;
        *(void *)(v6 + 56) = MEMORY[0x1E4FBB1A0];
        *(void *)(v6 + 32) = 0xD00000000000001ELL;
        *(void *)(v6 + 40) = 0x8000000188334740;
        id v7 = objc_msgSend(objc_allocWithZone(NSNumber), sel_initWithInteger_, AGMakeUniqueID());
        *(void *)(v6 + 88) = type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
        *(void *)(v6 + 64) = v7;
        type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSDictionary);
        NSDictionary.init(dictionaryLiteral:)();
        uint64_t v12 = MEMORY[0x1E4FBC860];
        uint64_t v8 = (void *)UIKeyCommand.init(title:image:action:input:modifierFlags:propertyList:alternates:discoverabilityTitle:attributes:state:)();
        uint64_t v5 = v8;
        uint64_t v9 = *(void *)(v1 + 408);
        if (v9)
        {
          if (v9 == 1)
          {
            if (*(void *)(v1 + 616))
            {
LABEL_11:
              uint64_t v10 = 0;
LABEL_14:
              objc_msgSend(v8, sel_setAttributes_, v10, v12, 0, 0, 0, 0);
              objc_msgSend(v5, sel_setAllowsAutomaticLocalization_, (3u >> (v2 & 7)) & 1);
              objc_msgSend(v5, sel_setAllowsAutomaticMirroring_, (v2 & 7) == 0);
              swift_bridgeObjectRelease();
              return v5;
            }
          }
          else if (*(unsigned char *)(v1 + 56))
          {
            goto LABEL_11;
          }
        }
        uint64_t v10 = 1;
        goto LABEL_14;
      }
    }
    else
    {
      uint64_t v3 = *(void **)v0;
      if (!*(void *)v0) {
        goto LABEL_8;
      }
    }
    id v4 = objc_msgSend(v3, sel_string);
    static String._unconditionallyBridgeFromObjectiveC(_:)();

    goto LABEL_8;
  }
  return 0;
}

id UIKeyCommand.discoverabilityID.getter()
{
  if (objc_msgSend(v0, sel_propertyList))
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v4, 0, sizeof(v4));
  }
  outlined init with take of PlatformItem.PrimaryContent?((uint64_t)v4, (uint64_t)&v5, (unint64_t *)&lazy cache variable for type metadata for Any?);
  if (!v6)
  {
    outlined destroy of Any?((uint64_t)&v5);
    return 0;
  }
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSDictionary);
  if ((swift_dynamicCast() & 1) == 0) {
    return 0;
  }
  *(void *)&v4[0] = 0xD00000000000001ELL;
  *((void *)&v4[0] + 1) = 0x8000000188334740;
  id v1 = objc_msgSend(v3, sel___swift_objectForKeyedSubscript_, _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)());
  swift_unknownObjectRelease();
  if (v1)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    outlined init with take of Any(v4, &v5);
    outlined init with copy of Any((uint64_t)&v5, (uint64_t)v4);
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
    swift_dynamicCast();
    id v1 = objc_msgSend(v3, sel_integerValue);

    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v5);
  }
  else
  {
  }
  return v1;
}

uint64_t protocol witness for static EnvironmentKey.defaultValue.getter in conformance EnvironmentValues.DocumentCommandsKey@<X0>(void *a1@<X8>)
{
  if (one-time initialization token for defaultValue != -1) {
    swift_once();
  }
  *a1 = static EnvironmentValues.DocumentCommandsKey.defaultValue;

  return swift_bridgeObjectRetain();
}

void closure #1 in UpdateContextMenuInteraction.updateValue()(void *a1, unsigned char *a2, Swift::OpaquePointer children)
{
  if (*a2 == 1)
  {
    *a2 = 0;
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIMenuElement);
    swift_bridgeObjectRetain();
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    objc_msgSend(a1, sel_menuByReplacingChildren_, isa);
  }
  else
  {
    uint64_t v5 = *(void *)children._rawValue;
    if (*(void *)children._rawValue >> 62) {
      goto LABEL_21;
    }
    uint64_t v6 = *(void *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    for (; v6; uint64_t v6 = _CocoaArrayWrapper.endIndex.getter())
    {
      uint64_t v7 = 4;
      uint64_t v26 = v6;
      while (1)
      {
        id v8 = (v5 & 0xC000000000000001) != 0 ? (id)MEMORY[0x18C117680](v7 - 4, v5) : *(id *)(v5 + 8 * v7);
        uint64_t v9 = v8;
        uint64_t v10 = v7 - 3;
        if (__OFADD__(v7 - 4, 1)) {
          break;
        }
        self;
        uint64_t v11 = swift_dynamicCastObjCClass();
        if (v11)
        {
          uint64_t v12 = (void *)v11;
          id v27 = v9;
          id v13 = objc_msgSend(v12, sel_identifier);
          uint64_t v14 = a1;
          id v15 = objc_msgSend(a1, sel_identifier);
          uint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v18 = v17;
          if (v16 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v18 == v19)
          {

            swift_bridgeObjectRelease_n();
LABEL_19:
            swift_bridgeObjectRelease();
            id v22 = objc_msgSend(v12, sel_children);
            type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIMenuElement);
            uint64_t v23 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

            *(void *)children._rawuint64_t Value = v23;
            swift_bridgeObjectRelease();
            return;
          }
          char v21 = _stringCompareWithSmolCheck(_:_:expecting:)();

          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if (v21) {
            goto LABEL_19;
          }

          a1 = v14;
          uint64_t v6 = v26;
        }

        ++v7;
        if (v10 == v6) {
          goto LABEL_22;
        }
      }
      __break(1u);
LABEL_21:
      swift_bridgeObjectRetain();
    }
LABEL_22:
    swift_bridgeObjectRelease();
    type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIMenu);
    v24._countAndFlagsBits = 0;
    v24._object = (void *)0xE000000000000000;
    v28.value.super.Class isa = 0;
    v28.is_nil = 0;
    UIMenu.init(title:subtitle:image:identifier:options:preferredElementSize:children:)(MEMORY[0x1E4FBC860], v24, (Swift::String_optional)0, v28, 0, 0xFFFFFFFFFFFFFFFFLL, MEMORY[0x1E4FBC860], children);
  }
}

id thunk for @escaping @callee_guaranteed (@guaranteed UIMenu) -> (@owned UIMenu)(uint64_t a1, void *a2)
{
  char v2 = *(uint64_t (**)(void))(a1 + 32);
  id v3 = a2;
  id v4 = (void *)v2();

  return v4;
}

uint64_t type metadata accessor for MenuVisitor.MenuStackGroup()
{
  uint64_t result = type metadata singleton initialization cache for MenuVisitor.MenuStackGroup;
  if (!type metadata singleton initialization cache for MenuVisitor.MenuStackGroup) {
    return swift_getSingletonMetadata();
  }
  return result;
}

id specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A, @in_guaranteed B) -> (@out A, @out B)@<X0>(id *a1@<X0>, void *a2@<X8>)
{
  type metadata accessor for (key: UIMenuElement, value: CommandOperation)();
  uint64_t v5 = (uint64_t)a1 + *(int *)(v4 + 48);
  type metadata accessor for (UIMenuElement, CommandOperation)();
  id v8 = *a1;
  _s7SwiftUI16PlatformItemListV0D0VWOcTm_0(v5, (uint64_t)a2 + *(int *)(v6 + 48), (uint64_t (*)(void))type metadata accessor for CommandOperation);
  *a2 = v8;

  return v8;
}

void specialized PlatformItemList.Item.applyAccessibilityProperties(to:)(void *a1, void *a2)
{
  uint64_t v4 = PlatformItemList.Item.accessibilityEffectiveText.getter();
  if (v4)
  {
    uint64_t v5 = v4;
    objc_msgSend(a1, sel_setAccessibilityAttributedLabel_, v4);
  }
  unint64_t v6 = a2[66];
  if (v6)
  {
    uint64_t v7 = a2[67];
    uint64_t v8 = a2[68];
    unint64_t v28 = v7;
    uint64_t v29 = v8;
    if (EnvironmentValues.accessibilityEnabled.getter())
    {
      uint64_t v9 = swift_bridgeObjectRetain();
      specialized AccessibilityProperties.subscript.getter(v9, (uint64_t)&v28);
      swift_bridgeObjectRelease();
      if (v29)
      {
        if (v30 >= 2u)
        {
          swift_bridgeObjectRelease();
        }
        else
        {
          uint64_t v10 = (void *)MEMORY[0x18C115780](v28, v29);
          swift_bridgeObjectRelease();
          objc_msgSend(a1, sel_setAccessibilityIdentifier_, v10);
        }
      }
      AccessibilityProperties.traits.getter();
      unint64_t v11 = v28;
      unint64_t v12 = (unint64_t)objc_msgSend(a1, sel_accessibilityTraits);
      uint64_t v13 = static AccessibilityTrait.allCases.getter();
      uint64_t v14 = 0;
      uint64_t v15 = *(void *)(v13 + 16);
      if (v15)
      {
        uint64_t v16 = (unsigned __int8 *)(v13 + 32);
        do
        {
          unsigned int v18 = *v16++;
          char v17 = v18;
          int v19 = (1 << v18) & 0x2844;
          if (v18 <= 0xD && v19 != 0 && ((v11 >> v17) & 1) != 0)
          {
            LOBYTE(v28) = v17;
            uint64_t v21 = AccessibilityTrait.uiTrait.getter();
            if ((v22 & 1) == 0) {
              v14 |= v21;
            }
          }
          --v15;
        }
        while (v15);
      }
      swift_bridgeObjectRelease();
      objc_msgSend(a1, sel_setAccessibilityTraits_, v14 | v12);
      unint64_t v28 = v6;
      if (*(void *)(AccessibilityProperties.hints.getter() + 16))
      {
        unint64_t v28 = v7;
        uint64_t v29 = v8;
        swift_retain();
        swift_retain();
        uint64_t v23 = static AccessibilityCore.textsResolvedToPlainText(_:in:updateResolvableAttributes:resolveSuffix:idiom:separator:)();
        uint64_t v25 = v24;
        swift_bridgeObjectRelease();
        if (v25)
        {
          uint64_t v26 = (void *)MEMORY[0x18C115780](v23, v25);
          swift_bridgeObjectRelease();
        }
        else
        {
          uint64_t v26 = 0;
        }
        objc_msgSend(a1, sel_setAccessibilityHint_, v26, v8, v7);
        swift_release();
        swift_release();
      }
      else
      {
        swift_bridgeObjectRelease();
      }
      AccessibilityProperties.visibility.getter();
      if ((v28 & 4) != 0)
      {
        uint64_t v27 = 1;
      }
      else if ((v28 & 0x400000000) != 0)
      {
        uint64_t v27 = 0;
      }
      else
      {
        uint64_t v27 = (v28 >> 3) & 1;
      }
      objc_msgSend(a1, sel_setAccessibilityElementsHidden_, v27);
    }
  }
}

uint64_t specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A, @in_guaranteed B) -> (@out A, @out B)@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v4 = a1[2];
  *a2 = v2;
  a2[1] = v3;
  a2[2] = v4;
  return swift_retain();
}

{
  uint64_t v3;
  uint64_t result;

  uint64_t v3 = *a1;
  uint64_t result = outlined init with copy of TableColumnList((uint64_t)(a1 + 1), (uint64_t)(a2 + 1));
  *a2 = v3;
  return result;
}

{
  uint64_t v2;
  uint64_t v3;

  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  *a2 = v2;
  a2[1] = v3;
  return swift_bridgeObjectRetain();
}

{
  uint64_t v3;
  uint64_t result;

  uint64_t v3 = *a1;
  uint64_t result = outlined init with copy of NavigationDestinationPresentation((uint64_t)(a1 + 1), (uint64_t)(a2 + 1));
  *a2 = v3;
  return result;
}

uint64_t specialized MenuVisitor.uniqueMenuIdentifier(in:candidate:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a1 + 16);
  if (v5)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v7 = (void *)(a1 + 40);
    uint64_t v8 = 1;
    uint64_t v9 = a2;
    uint64_t v10 = a3;
    while (1)
    {
      BOOL v11 = *(v7 - 1) == v9 && *v7 == v10;
      if (v11 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRetain();
        v12._countAndFlagsBits = 46;
        v12._object = (void *)0xE100000000000000;
        String.append(_:)(v12);
        v13._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v13);
        uint64_t result = swift_bridgeObjectRelease();
        if (__OFADD__(v8++, 1))
        {
          __break(1u);
          return result;
        }
        uint64_t v9 = a2;
        uint64_t v10 = a3;
      }
      v7 += 2;
      if (!--v5)
      {
        swift_bridgeObjectRelease();
        return v9;
      }
    }
  }
  swift_bridgeObjectRetain();
  return a2;
}

void _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs10ArraySliceVy7SwiftUI11MenuVisitor33_0F42DDF44729C152DA9EC9F6F4D00118LLV0H10StackGroupVG_So06UIMenuB0Cs5NeverOTg503_s7f4UI11h11Visitor33_0jklmnopq59LLV5visit_11uniqueNamesyAA16PlatformItemListV_SaySSGztFSo13tb7CAD0C10rS6VXEfU_AKSaySSGSbTf1cn_nTf4xnnn_n(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t *a5, char a6)
{
  uint64_t v20 = a4;
  uint64_t v21 = a5;
  uint64_t v19 = a1;
  uint64_t v10 = type metadata accessor for MenuVisitor.MenuStackGroup();
  uint64_t v18 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v10 - 8);
  Swift::String v12 = (char *)&v17 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  int64_t v22 = a3 >> 1;
  uint64_t v23 = a2;
  uint64_t v13 = (a3 >> 1) - a2;
  if (__OFSUB__(a3 >> 1, a2)) {
    goto LABEL_15;
  }
  if (v13)
  {
    void v24[2] = MEMORY[0x1E4FBC860];
    specialized ContiguousArray.reserveCapacity(_:)();
    if (v13 < 0)
    {
LABEL_16:
      __break(1u);
      return;
    }
    uint64_t v14 = 0;
    int v15 = a6 & 1;
    while (1)
    {
      uint64_t v16 = v14 + 1;
      if (__OFADD__(v14, 1)) {
        break;
      }
      if (v23 + v14 >= v22 || v14 >= v13) {
        goto LABEL_14;
      }
      _s7SwiftUI16PlatformItemListV0D0VWOcTm_0(v19 + *(void *)(v18 + 72) * (v23 + v14), (uint64_t)v12, (uint64_t (*)(void))type metadata accessor for MenuVisitor.MenuStackGroup);
      closure #1 in MenuVisitor.visit(_:uniqueNames:)((uint64_t)v12, v20, v21, v15, v24);
      _s7SwiftUI16PlatformItemListV0D0VWOhTm_0((uint64_t)v12, (uint64_t (*)(void))type metadata accessor for MenuVisitor.MenuStackGroup);
      if (v6)
      {
        swift_release();
        return;
      }
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      ++v14;
      if (v16 == v13) {
        return;
      }
    }
    __break(1u);
LABEL_14:
    __break(1u);
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
}

uint64_t outlined init with copy of CommandOperation?(uint64_t a1, uint64_t a2)
{
  _s7SwiftUI16CommandOperationVSgMaTm_1(0, &lazy cache variable for type metadata for CommandOperation?, (uint64_t (*)(uint64_t))type metadata accessor for CommandOperation, MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of CommandOperation?(uint64_t a1)
{
  _s7SwiftUI16CommandOperationVSgMaTm_1(0, &lazy cache variable for type metadata for CommandOperation?, (uint64_t (*)(uint64_t))type metadata accessor for CommandOperation, MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t outlined release of PlatformItemList.Item.ConfigurationIdentifier(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 24);
  uint64_t v3 = *(void **)(a1 + 32);
  swift_bridgeObjectRelease();

  return a1;
}

uint64_t specialized MenuBuilderContext.mergeMaps(from:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  swift_bridgeObjectRetain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v11 = v3[1];
  v3[1] = 0x8000000000000000;
  specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(a1, (uint64_t)specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A, @in_guaranteed B) -> (@out A, @out B), 0, isUniquelyReferenced_nonNull_native, &v11);
  v3[1] = v11;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  char v8 = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v11 = v3[2];
  v3[2] = 0x8000000000000000;
  specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(a2, (uint64_t)specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A, @in_guaranteed B) -> (@out A, @out B), 0, v8, &v11);
  v3[2] = v11;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  char v9 = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v11 = v3[4];
  v3[4] = 0x8000000000000000;
  specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(a3, (uint64_t)specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A, @in_guaranteed B) -> (@out A, @out B), 0, v9, (uint64_t)&v11);
  v3[4] = v11;

  return swift_bridgeObjectRelease();
}

uint64_t outlined assign with take of CommandOperation(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CommandOperation();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_187BED628()
{
  uint64_t v1 = type metadata accessor for PlatformItemList.Item();
  uint64_t v2 = v0
     + ((*(unsigned __int8 *)(*(void *)(v1 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v1 - 8) + 80));

  swift_bridgeObjectRelease();
  swift_release();
  uint64_t v3 = *(void *)(v2 + 184);
  unint64_t v4 = v3 & 0xFFFFFFFFFFFFFFFELL;
  if ((v3 & 0xFFFFFFFFFFFFFFFELL) != 0x1FFFFFFFCLL)
  {
    int v5 = *(unsigned __int8 *)(v2 + 72);
    if (v5 != 255)
    {
      outlined consume of GraphicsImage.Contents(*(void **)(v2 + 64), v5);
      uint64_t v3 = *(void *)(v2 + 184);
      unint64_t v4 = v3 & 0xFFFFFFFFFFFFFFFELL;
    }
    if (v4 != 0x1FFFFFFFELL) {
      outlined consume of AccessibilityImageLabel(*(void *)(v2 + 168), *(void *)(v2 + 176), v3);
    }
    swift_unknownObjectRelease();
    swift_release();
  }
  if (*(void *)(v2 + 256))
  {
    swift_bridgeObjectRelease();
    uint64_t v6 = *(void **)(v2 + 264);
    if ((unint64_t)v6 >= 2) {

    }
    swift_release();
    swift_release();
  }
  unint64_t v7 = *(void *)(v2 + 328);
  if (v7 >> 2 != 0xFFFFFFFF) {
    outlined consume of PlatformItemList.Item.SystemItem(*(void **)(v2 + 296), *(void *)(v2 + 304), *(void *)(v2 + 312), *(void *)(v2 + 320), v7, *(void *)(v2 + 336), *(void *)(v2 + 344), *(void *)(v2 + 352), *(void *)(v2 + 360), *(void *)(v2 + 368), *(void *)(v2 + 376), *(void *)(v2 + 384), *(void *)(v2 + 392));
  }
  uint64_t v8 = *(void *)(v2 + 408);
  if (v8)
  {
    if (v8 == 1) {
      goto LABEL_20;
    }
    swift_release();
  }
  if (*(void *)(v2 + 424)) {
    swift_release();
  }
  if (*(void *)(v2 + 440)) {
    swift_release();
  }
LABEL_20:
  swift_bridgeObjectRelease();
  if (*(void *)(v2 + 504)) {
    swift_release();
  }
  if (*(void *)(v2 + 528))
  {
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
  }
  if (*(void *)(v2 + 552) != 1)
  {
    swift_release();
    if (*(void *)(v2 + 560)) {
      swift_release();
    }
  }

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v9 = v2 + *(int *)(v1 + 112);
  uint64_t v10 = type metadata accessor for CommandOperation();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 48))(v9, 1, v10))
  {
    uint64_t v11 = v9 + *(int *)(v10 + 20);
    outlined consume of Text.Storage(*(void *)v11, *(void *)(v11 + 8), *(unsigned char *)(v11 + 16));
    swift_bridgeObjectRelease();
    uint64_t v12 = v11 + *(int *)(type metadata accessor for CommandGroupPlacement(0) + 20);
    uint64_t v13 = type metadata accessor for UUID();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v13 - 8) + 8))(v12, v13);
    if (*(void *)(v9 + *(int *)(v10 + 24))) {
      swift_release();
    }
  }
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_187BED95C()
{
  swift_release();

  return swift_deallocObject();
}

void type metadata accessor for (Any, Any)()
{
  if (!lazy cache variable for type metadata for (Any, Any))
  {
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (Any, Any));
    }
  }
}

uint64_t sub_187BED9FC()
{
  return swift_deallocObject();
}

void partial apply for closure #1 in UpdateContextMenuInteraction.updateValue()(void *a1)
{
  v2._rawuint64_t Value = *(void **)(v1 + 24);
  closure #1 in UpdateContextMenuInteraction.updateValue()(a1, *(unsigned char **)(v1 + 16), v2);
}

uint64_t sub_187BEDA14()
{
  return swift_deallocObject();
}

uint64_t partial apply for thunk for @callee_guaranteed (@guaranteed UIMenu) -> (@owned UIMenu)()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t assignWithCopy for UpdateContextMenuInteraction(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_unknownObjectWeakCopyAssign();
  *(_DWORD *)(result + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(result + 12) = *(_DWORD *)(a2 + 12);
  return result;
}

double assignWithTake for UpdateContextMenuInteraction(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = swift_unknownObjectWeakTakeAssign();
  double result = *(double *)(a2 + 8);
  *(double *)(v3 + 8) = result;
  return result;
}

ValueMetadata *type metadata accessor for UpdateContextMenuInteraction()
{
  return &type metadata for UpdateContextMenuInteraction;
}

uint64_t assignWithCopy for MenuVisitor.MenuStackGroup(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = a2 + 278;
  uint64_t v6 = *(void **)a1;
  unint64_t v7 = *(void **)a2;
  *(void *)a1 = *(void *)a2;
  id v8 = v7;

  uint64_t v9 = *(void **)(a1 + 8);
  uint64_t v10 = *(void **)(a2 + 8);
  *(void *)(a1 + 8) = v10;
  id v11 = v10;

  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_retain();
  swift_release();
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  uint64_t v12 = (_OWORD *)(a1 + 64);
  uint64_t v13 = (id *)(a2 + 64);
  unint64_t v14 = *(void *)(a2 + 184) & 0xFFFFFFFFFFFFFFFELL;
  if (*(void *)(a1 + 184) >> 1 == 4294967294)
  {
    if (v14 == 0x1FFFFFFFCLL)
    {
      long long v15 = *(_OWORD *)v13;
      long long v16 = *(_OWORD *)(a2 + 80);
      long long v17 = *(_OWORD *)(a2 + 112);
      *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
      *(_OWORD *)(a1 + 112) = v17;
      *uint64_t v12 = v15;
      *(_OWORD *)(a1 + 80) = v16;
      long long v18 = *(_OWORD *)(a2 + 128);
      long long v19 = *(_OWORD *)(a2 + 144);
      long long v20 = *(_OWORD *)(a2 + 176);
      *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
      *(_OWORD *)(a1 + 176) = v20;
      *(_OWORD *)(a1 + 128) = v18;
      *(_OWORD *)(a1 + 144) = v19;
      long long v21 = *(_OWORD *)(a2 + 192);
      long long v22 = *(_OWORD *)(a2 + 208);
      long long v23 = *(_OWORD *)(a2 + 224);
      *(_DWORD *)(a1 + 239) = *(_DWORD *)(a2 + 239);
      *(_OWORD *)(a1 + 208) = v22;
      *(_OWORD *)(a1 + 224) = v23;
      *(_OWORD *)(a1 + 192) = v21;
    }
    else
    {
      int v33 = *(unsigned __int8 *)(a2 + 72);
      if (v33 == 255)
      {
        id v39 = *v13;
        *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
        *(void *)uint64_t v12 = v39;
      }
      else
      {
        id v34 = *v13;
        outlined copy of GraphicsImage.Contents(*v13, *(unsigned char *)(a2 + 72));
        *(void *)(a1 + 64) = v34;
        *(unsigned char *)(a1 + 72) = v33;
      }
      *(void *)(a1 + 80) = *(void *)(a2 + 80);
      *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
      *(unsigned char *)(a1 + 104) = *(unsigned char *)(a2 + 104);
      long long v40 = *(_OWORD *)(a2 + 108);
      *(unsigned char *)(a1 + 124) = *(unsigned char *)(a2 + 124);
      *(_OWORD *)(a1 + 108) = v40;
      long long v41 = *(_OWORD *)(a2 + 128);
      long long v42 = *(_OWORD *)(a2 + 144);
      *(unsigned char *)(a1 + 160) = *(unsigned char *)(a2 + 160);
      *(_OWORD *)(a1 + 128) = v41;
      *(_OWORD *)(a1 + 144) = v42;
      *(unsigned char *)(a1 + 161) = *(unsigned char *)(a2 + 161);
      *(unsigned char *)(a1 + 162) = *(unsigned char *)(a2 + 162);
      *(unsigned char *)(a1 + 163) = *(unsigned char *)(a2 + 163);
      unint64_t v43 = *(void *)(a2 + 184);
      if (v43 >> 1 == 0xFFFFFFFF)
      {
        long long v44 = *(_OWORD *)(a2 + 184);
        *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
        *(_OWORD *)(a1 + 184) = v44;
      }
      else
      {
        uint64_t v45 = *(void *)(a2 + 168);
        uint64_t v46 = *(void *)(a2 + 176);
        uint64_t v47 = *(void *)(a2 + 192);
        outlined copy of AccessibilityImageLabel(v45, v46, *(void *)(a2 + 184));
        *(void *)(a1 + 168) = v45;
        *(void *)(a1 + 176) = v46;
        *(void *)(a1 + 184) = v43;
        *(void *)(a1 + 192) = v47;
      }
      *(void *)(a1 + 200) = *(void *)(a2 + 200);
      *(void *)(a1 + 208) = *(void *)(a2 + 208);
      *(unsigned char *)(a1 + 216) = *(unsigned char *)(a2 + 216);
      *(unsigned char *)(a1 + 217) = *(unsigned char *)(a2 + 217);
      int v48 = *(_DWORD *)(a2 + 220);
      *(unsigned char *)(a1 + 224) = *(unsigned char *)(a2 + 224);
      *(_DWORD *)(a1 + 220) = v48;
      uint64_t v49 = *(void **)(a2 + 232);
      *(void *)(a1 + 232) = v49;
      *(_WORD *)(a1 + 240) = *(_WORD *)(a2 + 240);
      *(unsigned char *)(a1 + 242) = *(unsigned char *)(a2 + 242);
      swift_unknownObjectRetain();
      swift_retain();
      id v50 = v49;
    }
  }
  else if (v14 == 0x1FFFFFFFCLL)
  {
    outlined destroy of Image.Resolved(a1 + 64);
    long long v24 = *(_OWORD *)(a2 + 112);
    long long v26 = *(_OWORD *)v13;
    long long v25 = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
    *(_OWORD *)(a1 + 112) = v24;
    *uint64_t v12 = v26;
    *(_OWORD *)(a1 + 80) = v25;
    long long v27 = *(_OWORD *)(a2 + 176);
    long long v29 = *(_OWORD *)(a2 + 128);
    long long v28 = *(_OWORD *)(a2 + 144);
    *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
    *(_OWORD *)(a1 + 176) = v27;
    *(_OWORD *)(a1 + 128) = v29;
    *(_OWORD *)(a1 + 144) = v28;
    long long v31 = *(_OWORD *)(a2 + 208);
    long long v30 = *(_OWORD *)(a2 + 224);
    long long v32 = *(_OWORD *)(a2 + 192);
    *(_DWORD *)(a1 + 239) = *(_DWORD *)(a2 + 239);
    *(_OWORD *)(a1 + 208) = v31;
    *(_OWORD *)(a1 + 224) = v30;
    *(_OWORD *)(a1 + 192) = v32;
  }
  else
  {
    int v35 = *(unsigned __int8 *)(a2 + 72);
    if (*(unsigned __int8 *)(a1 + 72) == 255)
    {
      if (v35 == 255)
      {
        id v53 = *v13;
        *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
        *(void *)uint64_t v12 = v53;
      }
      else
      {
        id v51 = *v13;
        outlined copy of GraphicsImage.Contents(*v13, *(unsigned char *)(a2 + 72));
        *(void *)(a1 + 64) = v51;
        *(unsigned char *)(a1 + 72) = v35;
      }
    }
    else if (v35 == 255)
    {
      outlined destroy of GraphicsImage.Contents(a1 + 64);
      char v52 = *(unsigned char *)(a2 + 72);
      *(void *)uint64_t v12 = *v13;
      *(unsigned char *)(a1 + 72) = v52;
    }
    else
    {
      id v36 = *v13;
      outlined copy of GraphicsImage.Contents(*v13, *(unsigned char *)(a2 + 72));
      Swift::String v37 = *(void **)(a1 + 64);
      *(void *)(a1 + 64) = v36;
      char v38 = *(unsigned char *)(a1 + 72);
      *(unsigned char *)(a1 + 72) = v35;
      outlined consume of GraphicsImage.Contents(v37, v38);
    }
    *(void *)(a1 + 80) = *(void *)(a2 + 80);
    *(void *)(a1 + 88) = *(void *)(a2 + 88);
    *(void *)(a1 + 96) = *(void *)(a2 + 96);
    *(unsigned char *)(a1 + 104) = *(unsigned char *)(a2 + 104);
    long long v54 = *(_OWORD *)(a2 + 108);
    *(unsigned char *)(a1 + 124) = *(unsigned char *)(a2 + 124);
    *(_OWORD *)(a1 + 108) = v54;
    long long v55 = *(_OWORD *)(a2 + 128);
    long long v56 = *(_OWORD *)(a2 + 144);
    *(unsigned char *)(a1 + 160) = *(unsigned char *)(a2 + 160);
    *(_OWORD *)(a1 + 128) = v55;
    *(_OWORD *)(a1 + 144) = v56;
    *(unsigned char *)(a1 + 161) = *(unsigned char *)(a2 + 161);
    *(unsigned char *)(a1 + 162) = *(unsigned char *)(a2 + 162);
    *(unsigned char *)(a1 + 163) = *(unsigned char *)(a2 + 163);
    uint64_t v57 = (_OWORD *)(a1 + 168);
    id v58 = (_OWORD *)(a2 + 168);
    uint64_t v59 = *(void *)(a2 + 184);
    unint64_t v60 = v59 & 0xFFFFFFFFFFFFFFFELL;
    if (*(void *)(a1 + 184) >> 1 == 0xFFFFFFFFLL)
    {
      if (v60 == 0x1FFFFFFFELL)
      {
        long long v61 = *(_OWORD *)(a2 + 184);
        *uint64_t v57 = *v58;
        *(_OWORD *)(a1 + 184) = v61;
      }
      else
      {
        uint64_t v63 = *(void *)(a2 + 168);
        uint64_t v64 = *(void *)(a2 + 176);
        uint64_t v65 = *(void *)(a2 + 192);
        outlined copy of AccessibilityImageLabel(v63, v64, *(void *)(a2 + 184));
        *(void *)(a1 + 168) = v63;
        *(void *)(a1 + 176) = v64;
        *(void *)(a1 + 184) = v59;
        *(void *)(a1 + 192) = v65;
      }
    }
    else if (v60 == 0x1FFFFFFFELL)
    {
      outlined destroy of AccessibilityImageLabel(a1 + 168);
      long long v62 = *(_OWORD *)(a2 + 184);
      *uint64_t v57 = *v58;
      *(_OWORD *)(a1 + 184) = v62;
    }
    else
    {
      uint64_t v66 = *(void *)(a2 + 168);
      uint64_t v67 = *(void *)(a2 + 176);
      uint64_t v68 = *(void *)(a2 + 192);
      outlined copy of AccessibilityImageLabel(v66, v67, *(void *)(a2 + 184));
      uint64_t v69 = *(void *)(a1 + 168);
      uint64_t v70 = *(void *)(a1 + 176);
      uint64_t v71 = *(void *)(a1 + 184);
      *(void *)(a1 + 168) = v66;
      *(void *)(a1 + 176) = v67;
      *(void *)(a1 + 184) = v59;
      *(void *)(a1 + 192) = v68;
      outlined consume of AccessibilityImageLabel(v69, v70, v71);
    }
    *(void *)(a1 + 200) = *(void *)(a2 + 200);
    swift_unknownObjectRetain();
    swift_unknownObjectRelease();
    *(void *)(a1 + 208) = *(void *)(a2 + 208);
    swift_retain();
    swift_release();
    *(unsigned char *)(a1 + 216) = *(unsigned char *)(a2 + 216);
    *(unsigned char *)(a1 + 217) = *(unsigned char *)(a2 + 217);
    int v72 = *(_DWORD *)(a2 + 220);
    *(unsigned char *)(a1 + 224) = *(unsigned char *)(a2 + 224);
    *(_DWORD *)(a1 + 220) = v72;
    uint64_t v73 = *(void **)(a1 + 232);
    unint64_t v74 = *(void **)(a2 + 232);
    *(void *)(a1 + 232) = v74;
    id v75 = v74;

    *(_WORD *)(a1 + 240) = *(_WORD *)(a2 + 240);
    *(unsigned char *)(a1 + 242) = *(unsigned char *)(a2 + 242);
  }
  uint64_t v76 = (_OWORD *)(a1 + 248);
  uint64_t v77 = (_OWORD *)(a2 + 248);
  uint64_t v78 = *(void *)(a2 + 256);
  if (*(void *)(a1 + 256))
  {
    if (!v78)
    {
      outlined destroy of Image.NamedResolved(a1 + 248);
      long long v86 = *(_OWORD *)(a2 + 264);
      long long v85 = *(_OWORD *)(a2 + 280);
      *uint64_t v76 = *v77;
      *(_OWORD *)(a1 + 264) = v86;
      *(_OWORD *)(a1 + 280) = v85;
      goto LABEL_44;
    }
    *(void *)(a1 + 248) = *(void *)(a2 + 248);
    *(void *)(a1 + 256) = *(void *)(a2 + 256);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    unint64_t v79 = *(void **)(a1 + 264);
    unint64_t v80 = *(void **)(a2 + 264);
    if ((unint64_t)v79 >= 2)
    {
      if ((unint64_t)v80 >= 2)
      {
        *(void *)(a1 + 264) = v80;
        id v89 = v80;

        goto LABEL_43;
      }

      unint64_t v80 = *(void **)(a2 + 264);
    }
    else if ((unint64_t)v80 >= 2)
    {
      *(void *)(a1 + 264) = v80;
      id v81 = v80;
LABEL_43:
      int v90 = *(_DWORD *)(a2 + 272);
      *(unsigned char *)(a1 + 276) = *(unsigned char *)(a2 + 276);
      *(_DWORD *)(a1 + 272) = v90;
      *(unsigned char *)(a1 + 277) = *(unsigned char *)(a2 + 277);
      *(unsigned char *)(a1 + 278) = *(unsigned char *)v5;
      *(void *)(a1 + 280) = *(void *)(a2 + 280);
      swift_retain();
      swift_release();
      *(void *)(a1 + 288) = *(void *)(a2 + 288);
      swift_retain();
      swift_release();
      goto LABEL_44;
    }
    *(void *)(a1 + 264) = v80;
    goto LABEL_43;
  }
  if (v78)
  {
    *(void *)(a1 + 248) = *(void *)(a2 + 248);
    *(void *)(a1 + 256) = *(void *)(a2 + 256);
    uint64_t v82 = *(void **)(a2 + 264);
    swift_bridgeObjectRetain();
    if ((unint64_t)v82 >= 2) {
      id v83 = v82;
    }
    *(void *)(a1 + 264) = v82;
    int v84 = *(_DWORD *)(a2 + 272);
    *(unsigned char *)(a1 + 276) = *(unsigned char *)(a2 + 276);
    *(_DWORD *)(a1 + 272) = v84;
    *(unsigned char *)(a1 + 277) = *(unsigned char *)(a2 + 277);
    *(unsigned char *)(a1 + 278) = *(unsigned char *)(a2 + 278);
    *(void *)(a1 + 280) = *(void *)(a2 + 280);
    *(void *)(a1 + 288) = *(void *)(a2 + 288);
    swift_retain();
    swift_retain();
  }
  else
  {
    long long v87 = *v77;
    long long v88 = *(_OWORD *)(a2 + 280);
    *(_OWORD *)(a1 + 264) = *(_OWORD *)(a2 + 264);
    *(_OWORD *)(a1 + 280) = v88;
    *uint64_t v76 = v87;
  }
LABEL_44:
  unint64_t v91 = (long long *)(a1 + 296);
  id v92 = (long long *)(a2 + 296);
  unint64_t v93 = *(void *)(a2 + 328);
  unint64_t v94 = v93 & 0xFFFFFFFFFFFFFFFCLL;
  if (*(void *)(a1 + 328) >> 2 == 0xFFFFFFFFLL)
  {
    if (v94 == 0x3FFFFFFFCLL)
    {
      long long v95 = *v92;
      long long v96 = *(_OWORD *)(a2 + 328);
      *(_OWORD *)(a1 + 312) = *(_OWORD *)(a2 + 312);
      *(_OWORD *)(a1 + 328) = v96;
      long long *v91 = v95;
      long long v97 = *(_OWORD *)(a2 + 344);
      long long v98 = *(_OWORD *)(a2 + 360);
      long long v99 = *(_OWORD *)(a2 + 376);
      *(void *)(a1 + 392) = *(void *)(a2 + 392);
      *(_OWORD *)(a1 + 360) = v98;
      *(_OWORD *)(a1 + 376) = v99;
      *(_OWORD *)(a1 + 344) = v97;
    }
    else
    {
      Swift::String_optional v105 = *(void **)(a2 + 296);
      uint64_t v106 = *(void *)(a2 + 304);
      uint64_t v107 = *(void *)(a2 + 312);
      uint64_t v108 = *(void *)(a2 + 320);
      uint64_t v231 = v5;
      uint64_t v109 = *(void *)(a2 + 336);
      uint64_t v110 = *(void *)(a2 + 344);
      uint64_t v111 = *(void *)(a2 + 352);
      uint64_t v218 = *(void *)(a2 + 360);
      uint64_t v220 = *(void *)(a2 + 368);
      uint64_t v222 = *(void *)(a2 + 376);
      uint64_t v225 = *(void *)(a2 + 384);
      uint64_t v228 = *(void *)(a2 + 392);
      outlined copy of PlatformItemList.Item.SystemItem(v105, v106, v107, v108, v93, v109, v110, v111, v218, v220, v222, v225, v228);
      *(void *)(a1 + 296) = v105;
      *(void *)(a1 + 304) = v106;
      *(void *)(a1 + 312) = v107;
      *(void *)(a1 + 320) = v108;
      *(void *)(a1 + 328) = v93;
      *(void *)(a1 + 336) = v109;
      *(void *)(a1 + 344) = v110;
      *(void *)(a1 + 352) = v111;
      *(void *)(a1 + 360) = v218;
      *(void *)(a1 + 368) = v220;
      *(void *)(a1 + 376) = v222;
      *(void *)(a1 + 384) = v225;
      uint64_t v5 = v231;
      *(void *)(a1 + 392) = v228;
    }
  }
  else if (v94 == 0x3FFFFFFFCLL)
  {
    outlined destroy of PlatformItemList.Item.SystemItem(a1 + 296);
    long long v101 = *(_OWORD *)(a2 + 312);
    long long v100 = *(_OWORD *)(a2 + 328);
    long long *v91 = *v92;
    *(_OWORD *)(a1 + 312) = v101;
    *(_OWORD *)(a1 + 328) = v100;
    long long v103 = *(_OWORD *)(a2 + 360);
    long long v102 = *(_OWORD *)(a2 + 376);
    long long v104 = *(_OWORD *)(a2 + 344);
    *(void *)(a1 + 392) = *(void *)(a2 + 392);
    *(_OWORD *)(a1 + 360) = v103;
    *(_OWORD *)(a1 + 376) = v102;
    *(_OWORD *)(a1 + 344) = v104;
  }
  else
  {
    uint64_t v112 = *(void **)(a2 + 296);
    uint64_t v113 = *(void *)(a2 + 304);
    uint64_t v232 = v5;
    uint64_t v114 = *(void *)(a2 + 312);
    uint64_t v115 = *(void *)(a2 + 320);
    uint64_t v116 = *(void *)(a2 + 336);
    uint64_t v117 = *(void *)(a2 + 344);
    uint64_t v118 = *(void *)(a2 + 352);
    uint64_t v219 = *(void *)(a2 + 360);
    uint64_t v221 = *(void *)(a2 + 368);
    uint64_t v223 = *(void *)(a2 + 376);
    uint64_t v226 = *(void *)(a2 + 384);
    uint64_t v229 = *(void *)(a2 + 392);
    outlined copy of PlatformItemList.Item.SystemItem(v112, v113, v114, v115, v93, v116, v117, v118, v219, v221, v223, v226, v229);
    uint64_t v119 = *(void **)(a1 + 296);
    uint64_t v120 = *(void *)(a1 + 304);
    uint64_t v121 = *(void *)(a1 + 312);
    uint64_t v122 = *(void *)(a1 + 320);
    unint64_t v123 = *(void *)(a1 + 328);
    uint64_t v124 = *(void *)(a1 + 336);
    uint64_t v125 = *(void *)(a1 + 344);
    uint64_t v126 = *(void *)(a1 + 352);
    long long v127 = *(_OWORD *)(a1 + 360);
    long long v128 = *(_OWORD *)(a1 + 376);
    uint64_t v129 = *(void *)(a1 + 392);
    *(void *)(a1 + 296) = v112;
    *(void *)(a1 + 304) = v113;
    *(void *)(a1 + 312) = v114;
    *(void *)(a1 + 320) = v115;
    *(void *)(a1 + 328) = v93;
    *(void *)(a1 + 336) = v116;
    *(void *)(a1 + 344) = v117;
    *(void *)(a1 + 352) = v118;
    *(void *)(a1 + 360) = v219;
    *(void *)(a1 + 368) = v221;
    *(void *)(a1 + 376) = v223;
    *(void *)(a1 + 384) = v226;
    uint64_t v5 = v232;
    *(void *)(a1 + 392) = v229;
    outlined consume of PlatformItemList.Item.SystemItem(v119, v120, v121, v122, v123, v124, v125, v126, v127, *((uint64_t *)&v127 + 1), v128, SBYTE8(v128), v129);
  }
  char v130 = (_OWORD *)(a1 + 400);
  unint64_t v131 = (_OWORD *)(v5 + 122);
  uint64_t v132 = (_OWORD *)(a1 + 408);
  uint64_t v133 = *(void *)(a1 + 408);
  uint64_t v134 = (_OWORD *)(a2 + 408);
  uint64_t v135 = *(void *)(a2 + 408);
  if (v133 != 1)
  {
    if (v135 == 1)
    {
      outlined destroy of PlatformItemList.Item.SelectionBehavior(a1 + 400);
      *char v130 = *v131;
      long long v140 = *(_OWORD *)(v5 + 154);
      long long v139 = *(_OWORD *)(v5 + 170);
      long long v141 = *(_OWORD *)(v5 + 138);
      *(unsigned char *)(a1 + 464) = *(unsigned char *)(v5 + 186);
      *(_OWORD *)(a1 + 432) = v140;
      *(_OWORD *)(a1 + 448) = v139;
      *(_OWORD *)(a1 + 416) = v141;
      goto LABEL_85;
    }
    *(unsigned char *)(a1 + 400) = *(unsigned char *)(v5 + 122);
    *(unsigned char *)(a1 + 401) = *(unsigned char *)(v5 + 123);
    *(unsigned char *)(a1 + 402) = *(unsigned char *)(v5 + 124);
    *(unsigned char *)(a1 + 403) = *(unsigned char *)(v5 + 125);
    *(unsigned char *)(a1 + 404) = *(unsigned char *)(a2 + 404);
    uint64_t v147 = *(void *)(a2 + 408);
    if (v133)
    {
      if (v147)
      {
        uint64_t v148 = *(void *)(a2 + 416);
        *(void *)(a1 + 408) = v147;
        *(void *)(a1 + 416) = v148;
        swift_retain();
        swift_release();
        goto LABEL_70;
      }
      swift_release();
    }
    else if (v147)
    {
      uint64_t v149 = *(void *)(a2 + 416);
      *(void *)(a1 + 408) = v147;
      *(void *)(a1 + 416) = v149;
      swift_retain();
      goto LABEL_70;
    }
    *uint64_t v132 = *v134;
LABEL_70:
    uint64_t v150 = *(void *)(a2 + 424);
    if (*(void *)(a1 + 424))
    {
      if (v150)
      {
        uint64_t v151 = *(void *)(a2 + 432);
        *(void *)(a1 + 424) = v150;
        *(void *)(a1 + 432) = v151;
        swift_retain();
        swift_release();
        goto LABEL_77;
      }
      swift_release();
    }
    else if (v150)
    {
      uint64_t v152 = *(void *)(a2 + 432);
      *(void *)(a1 + 424) = v150;
      *(void *)(a1 + 432) = v152;
      swift_retain();
      goto LABEL_77;
    }
    *(_OWORD *)(a1 + 424) = *(_OWORD *)(a2 + 424);
LABEL_77:
    uint64_t v146 = *(void *)(a2 + 440);
    if (*(void *)(a1 + 440))
    {
      if (v146)
      {
        uint64_t v153 = *(void *)(a2 + 448);
        *(void *)(a1 + 440) = v146;
        *(void *)(a1 + 448) = v153;
        swift_retain();
        swift_release();
        goto LABEL_84;
      }
      swift_release();
    }
    else if (v146)
    {
      goto LABEL_81;
    }
    *(_OWORD *)(a1 + 440) = *(_OWORD *)(a2 + 440);
    goto LABEL_84;
  }
  if (v135 == 1)
  {
    *char v130 = *v131;
    long long v136 = *(_OWORD *)(v5 + 138);
    long long v137 = *(_OWORD *)(v5 + 154);
    long long v138 = *(_OWORD *)(v5 + 170);
    *(unsigned char *)(a1 + 464) = *(unsigned char *)(v5 + 186);
    *(_OWORD *)(a1 + 432) = v137;
    *(_OWORD *)(a1 + 448) = v138;
    *(_OWORD *)(a1 + 416) = v136;
    goto LABEL_85;
  }
  *(unsigned char *)(a1 + 400) = *(unsigned char *)(a2 + 400);
  *(unsigned char *)(a1 + 401) = *(unsigned char *)(a2 + 401);
  *(unsigned char *)(a1 + 402) = *(unsigned char *)(a2 + 402);
  *(unsigned char *)(a1 + 403) = *(unsigned char *)(a2 + 403);
  *(unsigned char *)(a1 + 404) = *(unsigned char *)(a2 + 404);
  uint64_t v142 = *(void *)(a2 + 408);
  if (v142)
  {
    uint64_t v143 = *(void *)(a2 + 416);
    *(void *)(a1 + 408) = v142;
    *(void *)(a1 + 416) = v143;
    swift_retain();
    uint64_t v144 = *(void *)(a2 + 424);
    if (v144) {
      goto LABEL_58;
    }
  }
  else
  {
    *uint64_t v132 = *v134;
    uint64_t v144 = *(void *)(a2 + 424);
    if (v144)
    {
LABEL_58:
      uint64_t v145 = *(void *)(a2 + 432);
      *(void *)(a1 + 424) = v144;
      *(void *)(a1 + 432) = v145;
      swift_retain();
      uint64_t v146 = *(void *)(a2 + 440);
      if (!v146) {
        goto LABEL_65;
      }
LABEL_81:
      uint64_t v154 = *(void *)(a2 + 448);
      *(void *)(a1 + 440) = v146;
      *(void *)(a1 + 448) = v154;
      swift_retain();
      goto LABEL_84;
    }
  }
  *(_OWORD *)(a1 + 424) = *(_OWORD *)(a2 + 424);
  uint64_t v146 = *(void *)(a2 + 440);
  if (v146) {
    goto LABEL_81;
  }
LABEL_65:
  *(_OWORD *)(a1 + 440) = *(_OWORD *)(a2 + 440);
LABEL_84:
  *(void *)(a1 + 456) = *(void *)(a2 + 456);
  *(unsigned char *)(a1 + 464) = *(unsigned char *)(a2 + 464);
LABEL_85:
  *(void *)(a1 + 472) = *(void *)(a2 + 472);
  *(void *)(a1 + 480) = *(void *)(a2 + 480);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 488) = *(void *)(a2 + 488);
  *(unsigned char *)(a1 + 496) = *(unsigned char *)(a2 + 496);
  uint64_t v155 = *(void *)(a2 + 504);
  if (*(void *)(a1 + 504))
  {
    if (v155)
    {
      uint64_t v156 = *(void *)(a2 + 512);
      *(void *)(a1 + 504) = v155;
      *(void *)(a1 + 512) = v156;
      swift_retain();
      swift_release();
      goto LABEL_92;
    }
    swift_release();
  }
  else if (v155)
  {
    uint64_t v157 = *(void *)(a2 + 512);
    *(void *)(a1 + 504) = v155;
    *(void *)(a1 + 512) = v157;
    swift_retain();
    goto LABEL_92;
  }
  *(_OWORD *)(a1 + 504) = *(_OWORD *)(a2 + 504);
LABEL_92:
  *(_WORD *)(a1 + 520) = *(_WORD *)(a2 + 520);
  uint64_t v158 = (_OWORD *)(a1 + 528);
  uint64_t v159 = (_OWORD *)(a2 + 528);
  uint64_t v160 = *(void *)(a2 + 528);
  if (*(void *)(a1 + 528))
  {
    if (v160)
    {
      *(void *)(a1 + 528) = v160;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 536) = *(void *)(a2 + 536);
      swift_retain();
      swift_release();
      *(void *)(a1 + 544) = *(void *)(a2 + 544);
      swift_retain();
      swift_release();
    }
    else
    {
      outlined destroy of PlatformItemList.Item.Accessibility(a1 + 528);
      uint64_t v161 = *(void *)(a2 + 544);
      *uint64_t v158 = *v159;
      *(void *)(a1 + 544) = v161;
    }
  }
  else if (v160)
  {
    *(void *)(a1 + 528) = v160;
    *(void *)(a1 + 536) = *(void *)(a2 + 536);
    *(void *)(a1 + 544) = *(void *)(a2 + 544);
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
  }
  else
  {
    long long v162 = *v159;
    *(void *)(a1 + 544) = *(void *)(a2 + 544);
    *uint64_t v158 = v162;
  }
  unint64_t v163 = (long long *)(a1 + 552);
  uint64_t v164 = (long long *)(a2 + 552);
  uint64_t v165 = *(void *)(a2 + 552);
  if (*(void *)(a1 + 552) == 1)
  {
    if (v165 == 1)
    {
      long long v166 = *v164;
      *(void *)(a1 + 568) = *(void *)(a2 + 568);
      long long *v163 = v166;
      goto LABEL_115;
    }
    *(void *)(a1 + 552) = v165;
    uint64_t v168 = *(void *)(a2 + 560);
    swift_retain();
    if (!v168)
    {
      *(_OWORD *)(a1 + 560) = *(_OWORD *)(a2 + 560);
      goto LABEL_115;
    }
    uint64_t v169 = *(void *)(a2 + 568);
    *(void *)(a1 + 560) = v168;
    goto LABEL_112;
  }
  if (v165 == 1)
  {
    outlined destroy of PlatformItemList.Item.SecondaryNavigationBehavior(a1 + 552);
    uint64_t v167 = *(void *)(a2 + 568);
    long long *v163 = *v164;
    *(void *)(a1 + 568) = v167;
    goto LABEL_115;
  }
  *(void *)(a1 + 552) = v165;
  swift_retain();
  swift_release();
  uint64_t v170 = *(void *)(a2 + 560);
  if (*(void *)(a1 + 560))
  {
    if (v170)
    {
      uint64_t v171 = *(void *)(a2 + 568);
      *(void *)(a1 + 560) = v170;
      *(void *)(a1 + 568) = v171;
      swift_retain();
      swift_release();
      goto LABEL_115;
    }
    swift_release();
  }
  else if (v170)
  {
    uint64_t v169 = *(void *)(a2 + 568);
    *(void *)(a1 + 560) = v170;
LABEL_112:
    *(void *)(a1 + 568) = v169;
    swift_retain();
    goto LABEL_115;
  }
  *(_OWORD *)(a1 + 560) = *(_OWORD *)(a2 + 560);
LABEL_115:
  uint64_t v172 = *(void **)(a1 + 576);
  uint64_t v173 = *(void **)(a2 + 576);
  *(void *)(a1 + 576) = v173;
  id v174 = v173;

  *(void *)(a1 + 584) = *(void *)(a2 + 584);
  *(void *)(a1 + 592) = *(void *)(a2 + 592);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 600) = *(void *)(a2 + 600);
  *(void *)(a1 + 608) = *(void *)(a2 + 608);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 616) = *(void *)(a2 + 616);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 624) = *(void *)(a2 + 624);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 632) = *(unsigned char *)(a2 + 632);
  *(unsigned char *)(a1 + 633) = *(unsigned char *)(a2 + 633);
  *(unsigned char *)(a1 + 634) = *(unsigned char *)(a2 + 634);
  uint64_t v175 = (int *)type metadata accessor for PlatformItemList.Item();
  uint64_t v176 = v175[28];
  uint64_t v177 = (unsigned char *)(a1 + v176);
  uint64_t v178 = (unsigned char *)(a2 + v176);
  uint64_t v179 = type metadata accessor for CommandOperation();
  uint64_t v233 = *(void *)(v179 - 8);
  id v180 = *(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(v233 + 48);
  LODWORD(v172) = v180(v177, 1, v179);
  long long v181 = v178;
  int v182 = v180(v178, 1, v179);
  if (!v172)
  {
    if (!v182)
    {
      uint64_t v224 = v178;
      *uint64_t v177 = *v178;
      uint64_t v198 = *(int *)(v179 + 20);
      uint64_t v199 = &v177[v198];
      uint64_t v200 = &v178[v198];
      uint64_t v201 = *(void *)v200;
      uint64_t v202 = *((void *)v200 + 1);
      char v203 = v200[16];
      outlined copy of Text.Storage(*(void *)v200, v202, v203);
      uint64_t v204 = *(void *)v199;
      uint64_t v205 = *((void *)v199 + 1);
      char v206 = v199[16];
      *(void *)uint64_t v199 = v201;
      *((void *)v199 + 1) = v202;
      v199[16] = v203;
      outlined consume of Text.Storage(v204, v205, v206);
      *((void *)v199 + 3) = *((void *)v200 + 3);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      uint64_t v207 = *(int *)(type metadata accessor for CommandGroupPlacement(0) + 20);
      uint64_t v208 = &v199[v207];
      char v209 = &v200[v207];
      uint64_t v210 = type metadata accessor for UUID();
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v210 - 8) + 24))(v208, v209, v210);
      uint64_t v211 = *(int *)(v179 + 24);
      uint64_t v212 = &v177[v211];
      uint64_t v213 = &v224[v211];
      uint64_t v214 = *(void *)&v224[v211];
      if (*v212)
      {
        if (v214)
        {
          uint64_t v215 = *((void *)v213 + 1);
          void *v212 = v214;
          v212[1] = v215;
          swift_retain();
          swift_release();
          goto LABEL_127;
        }
        swift_release();
      }
      else if (v214)
      {
        uint64_t v217 = *((void *)v213 + 1);
        void *v212 = v214;
        v212[1] = v217;
        swift_retain();
        goto LABEL_127;
      }
      *(_OWORD *)uint64_t v212 = *(_OWORD *)v213;
      goto LABEL_127;
    }
    _s7SwiftUI16PlatformItemListV0D0VWOhTm_0((uint64_t)v177, (uint64_t (*)(void))type metadata accessor for CommandOperation);
    goto LABEL_121;
  }
  if (v182)
  {
LABEL_121:
    _s7SwiftUI16CommandOperationVSgMaTm_1(0, &lazy cache variable for type metadata for CommandOperation?, (uint64_t (*)(uint64_t))type metadata accessor for CommandOperation, MEMORY[0x1E4FBB718]);
    memcpy(v177, v178, *(void *)(*(void *)(v197 - 8) + 64));
    goto LABEL_127;
  }
  *uint64_t v177 = *v178;
  uint64_t v183 = *(int *)(v179 + 20);
  uint64_t v184 = &v177[v183];
  long long v230 = v177;
  uint64_t v185 = &v181[v183];
  uint64_t v186 = *(void *)&v181[v183];
  uint64_t v187 = *(void *)&v181[v183 + 8];
  char v188 = v181[v183 + 16];
  outlined copy of Text.Storage(v186, v187, v188);
  *(void *)uint64_t v184 = v186;
  *((void *)v184 + 1) = v187;
  v184[16] = v188;
  *((void *)v184 + 3) = *((void *)v185 + 3);
  uint64_t v189 = *(int *)(type metadata accessor for CommandGroupPlacement(0) + 20);
  uint64_t v227 = &v184[v189];
  uint64_t v190 = &v185[v189];
  uint64_t v191 = type metadata accessor for UUID();
  uint64_t v192 = *(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v191 - 8) + 16);
  swift_bridgeObjectRetain();
  v192(v227, v190, v191);
  uint64_t v193 = *(int *)(v179 + 24);
  uint64_t v194 = &v230[v193];
  uint64_t v195 = &v181[v193];
  if (*v195)
  {
    uint64_t v196 = v195[1];
    void *v194 = *v195;
    v194[1] = v196;
    swift_retain();
  }
  else
  {
    *(_OWORD *)uint64_t v194 = *(_OWORD *)v195;
  }
  (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v233 + 56))(v230, 0, 1, v179);
LABEL_127:
  *(unsigned char *)(a1 + v175[29]) = *(unsigned char *)(a2 + v175[29]);
  *(unsigned char *)(a1 + v175[30]) = *(unsigned char *)(a2 + v175[30]);
  *(unsigned char *)(a1 + v175[31]) = *(unsigned char *)(a2 + v175[31]);
  *(unsigned char *)(a1 + v175[32]) = *(unsigned char *)(a2 + v175[32]);
  *(void *)(a1 + v175[33]) = *(void *)(a2 + v175[33]);
  swift_retain();
  swift_release();
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t initializeWithTake for MenuVisitor.MenuStackGroup(uint64_t a1, uint64_t a2, uint64_t a3)
{
  long long v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  uint64_t v7 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v7;
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  long long v8 = *(_OWORD *)(a2 + 208);
  *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 208) = v8;
  *(_OWORD *)(a1 + 224) = *(_OWORD *)(a2 + 224);
  *(_DWORD *)(a1 + 239) = *(_DWORD *)(a2 + 239);
  long long v9 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v9;
  long long v10 = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 176) = v10;
  long long v11 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v11;
  long long v12 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = v12;
  *(_OWORD *)(a1 + 248) = *(_OWORD *)(a2 + 248);
  long long v13 = *(_OWORD *)(a2 + 280);
  *(_OWORD *)(a1 + 264) = *(_OWORD *)(a2 + 264);
  *(_OWORD *)(a1 + 280) = v13;
  long long v14 = *(_OWORD *)(a2 + 376);
  *(_OWORD *)(a1 + 360) = *(_OWORD *)(a2 + 360);
  *(_OWORD *)(a1 + 376) = v14;
  *(void *)(a1 + 392) = *(void *)(a2 + 392);
  long long v15 = *(_OWORD *)(a2 + 312);
  *(_OWORD *)(a1 + 296) = *(_OWORD *)(a2 + 296);
  *(_OWORD *)(a1 + 312) = v15;
  long long v16 = *(_OWORD *)(a2 + 344);
  *(_OWORD *)(a1 + 328) = *(_OWORD *)(a2 + 328);
  *(_OWORD *)(a1 + 344) = v16;
  long long v17 = *(_OWORD *)(a2 + 448);
  *(_OWORD *)(a1 + 432) = *(_OWORD *)(a2 + 432);
  *(_OWORD *)(a1 + 448) = v17;
  *(unsigned char *)(a1 + 464) = *(unsigned char *)(a2 + 464);
  long long v18 = *(_OWORD *)(a2 + 416);
  *(_OWORD *)(a1 + 400) = *(_OWORD *)(a2 + 400);
  *(_OWORD *)(a1 + 416) = v18;
  *(_OWORD *)(a1 + 472) = *(_OWORD *)(a2 + 472);
  *(_OWORD *)(a1 + 481) = *(_OWORD *)(a2 + 481);
  uint64_t v19 = *(void *)(a2 + 504);
  if (v19)
  {
    uint64_t v20 = *(void *)(a2 + 512);
    *(void *)(a1 + 504) = v19;
    *(void *)(a1 + 512) = v20;
  }
  else
  {
    *(_OWORD *)(a1 + 504) = *(_OWORD *)(a2 + 504);
  }
  *(_WORD *)(a1 + 520) = *(_WORD *)(a2 + 520);
  *(_OWORD *)(a1 + 528) = *(_OWORD *)(a2 + 528);
  *(void *)(a1 + 544) = *(void *)(a2 + 544);
  *(void *)(a1 + 568) = *(void *)(a2 + 568);
  *(_OWORD *)(a1 + 552) = *(_OWORD *)(a2 + 552);
  *(void *)(a1 + 576) = *(void *)(a2 + 576);
  *(_OWORD *)(a1 + 584) = *(_OWORD *)(a2 + 584);
  *(_OWORD *)(a1 + 600) = *(_OWORD *)(a2 + 600);
  *(void *)(a1 + 616) = *(void *)(a2 + 616);
  *(void *)(a1 + 624) = *(void *)(a2 + 624);
  *(unsigned char *)(a1 + 632) = *(unsigned char *)(a2 + 632);
  *(_WORD *)(a1 + 633) = *(_WORD *)(a2 + 633);
  long long v21 = (int *)type metadata accessor for PlatformItemList.Item();
  uint64_t v22 = v21[28];
  long long v23 = (unsigned char *)(a1 + v22);
  long long v24 = (unsigned char *)(a2 + v22);
  uint64_t v25 = type metadata accessor for CommandOperation();
  uint64_t v26 = *(void *)(v25 - 8);
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v26 + 48))(v24, 1, v25))
  {
    _s7SwiftUI16CommandOperationVSgMaTm_1(0, &lazy cache variable for type metadata for CommandOperation?, (uint64_t (*)(uint64_t))type metadata accessor for CommandOperation, MEMORY[0x1E4FBB718]);
    memcpy(v23, v24, *(void *)(*(void *)(v27 - 8) + 64));
  }
  else
  {
    *long long v23 = *v24;
    uint64_t v28 = *(int *)(v25 + 20);
    long long v29 = &v23[v28];
    long long v30 = &v24[v28];
    long long v31 = *(_OWORD *)&v24[v28 + 16];
    *long long v29 = *(_OWORD *)&v24[v28];
    v29[1] = v31;
    uint64_t v32 = *(int *)(type metadata accessor for CommandGroupPlacement(0) + 20);
    int v33 = (char *)v29 + v32;
    id v34 = &v30[v32];
    uint64_t v35 = type metadata accessor for UUID();
    (*(void (**)(char *, unsigned char *, uint64_t))(*(void *)(v35 - 8) + 32))(v33, v34, v35);
    uint64_t v36 = *(int *)(v25 + 24);
    Swift::String v37 = &v23[v36];
    char v38 = (uint64_t *)&v24[v36];
    uint64_t v39 = *v38;
    if (*v38)
    {
      uint64_t v40 = v38[1];
      *Swift::String v37 = v39;
      v37[1] = v40;
    }
    else
    {
      *(_OWORD *)Swift::String v37 = *(_OWORD *)v38;
    }
    (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v26 + 56))(v23, 0, 1, v25);
  }
  *(unsigned char *)(a1 + v21[29]) = *(unsigned char *)(a2 + v21[29]);
  *(unsigned char *)(a1 + v21[30]) = *(unsigned char *)(a2 + v21[30]);
  *(unsigned char *)(a1 + v21[31]) = *(unsigned char *)(a2 + v21[31]);
  *(unsigned char *)(a1 + v21[32]) = *(unsigned char *)(a2 + v21[32]);
  *(void *)(a1 + v21[33]) = *(void *)(a2 + v21[33]);
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t assignWithTake for MenuVisitor.MenuStackGroup(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = a2 + 278;
  uint64_t v7 = *(void **)a1;
  *(void *)a1 = *(void *)a2;

  long long v8 = *(void **)(a1 + 8);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);

  uint64_t v9 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v9;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  uint64_t v10 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v10;
  swift_release();
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  long long v11 = (_OWORD *)(a1 + 64);
  long long v12 = (_OWORD *)(a2 + 64);
  if (*(void *)(a1 + 184) >> 1 == 4294967294) {
    goto LABEL_4;
  }
  if (*(void *)(a2 + 184) >> 1 == 4294967294)
  {
    outlined destroy of Image.Resolved(a1 + 64);
LABEL_4:
    long long v13 = *(_OWORD *)(a2 + 208);
    *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
    *(_OWORD *)(a1 + 208) = v13;
    *(_OWORD *)(a1 + 224) = *(_OWORD *)(a2 + 224);
    *(_DWORD *)(a1 + 239) = *(_DWORD *)(a2 + 239);
    long long v14 = *(_OWORD *)(a2 + 144);
    *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
    *(_OWORD *)(a1 + 144) = v14;
    long long v15 = *(_OWORD *)(a2 + 176);
    *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
    *(_OWORD *)(a1 + 176) = v15;
    long long v16 = *(_OWORD *)(a2 + 80);
    *long long v11 = *v12;
    *(_OWORD *)(a1 + 80) = v16;
    long long v17 = *(_OWORD *)(a2 + 112);
    *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
    *(_OWORD *)(a1 + 112) = v17;
    goto LABEL_16;
  }
  int v18 = *(unsigned __int8 *)(a1 + 72);
  if (v18 != 255)
  {
    int v19 = *(unsigned __int8 *)(a2 + 72);
    if (v19 != 255)
    {
      uint64_t v20 = *(void **)(a1 + 64);
      *(void *)(a1 + 64) = *(void *)v12;
      *(unsigned char *)(a1 + 72) = v19;
      outlined consume of GraphicsImage.Contents(v20, v18);
      goto LABEL_10;
    }
    outlined destroy of GraphicsImage.Contents(a1 + 64);
  }
  *(void *)long long v11 = *(void *)v12;
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
LABEL_10:
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(unsigned char *)(a1 + 104) = *(unsigned char *)(a2 + 104);
  *(_OWORD *)(a1 + 108) = *(_OWORD *)(a2 + 108);
  *(unsigned char *)(a1 + 124) = *(unsigned char *)(a2 + 124);
  long long v21 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v21;
  *(unsigned char *)(a1 + 160) = *(unsigned char *)(a2 + 160);
  *(unsigned char *)(a1 + 161) = *(unsigned char *)(a2 + 161);
  unint64_t v22 = *(void *)(a1 + 184);
  *(_WORD *)(a1 + 162) = *(_WORD *)(a2 + 162);
  if (v22 >> 1 != 0xFFFFFFFF)
  {
    unint64_t v23 = *(void *)(a2 + 184);
    if (v23 >> 1 != 0xFFFFFFFF)
    {
      uint64_t v25 = *(void *)(a2 + 192);
      uint64_t v26 = *(void *)(a1 + 168);
      uint64_t v27 = *(void *)(a1 + 176);
      *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
      *(void *)(a1 + 184) = v23;
      *(void *)(a1 + 192) = v25;
      outlined consume of AccessibilityImageLabel(v26, v27, v22);
      goto LABEL_15;
    }
    outlined destroy of AccessibilityImageLabel(a1 + 168);
  }
  long long v24 = *(_OWORD *)(a2 + 184);
  *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
  *(_OWORD *)(a1 + 184) = v24;
LABEL_15:
  *(void *)(a1 + 200) = *(void *)(a2 + 200);
  swift_unknownObjectRelease();
  *(void *)(a1 + 208) = *(void *)(a2 + 208);
  swift_release();
  *(unsigned char *)(a1 + 216) = *(unsigned char *)(a2 + 216);
  *(unsigned char *)(a1 + 217) = *(unsigned char *)(a2 + 217);
  *(_DWORD *)(a1 + 220) = *(_DWORD *)(a2 + 220);
  *(unsigned char *)(a1 + 224) = *(unsigned char *)(a2 + 224);
  uint64_t v28 = *(void **)(a1 + 232);
  *(void *)(a1 + 232) = *(void *)(a2 + 232);

  *(_WORD *)(a1 + 240) = *(_WORD *)(a2 + 240);
  *(unsigned char *)(a1 + 242) = *(unsigned char *)(a2 + 242);
LABEL_16:
  if (!*(void *)(a1 + 256))
  {
LABEL_21:
    long long v32 = *(_OWORD *)(a2 + 264);
    *(_OWORD *)(a1 + 248) = *(_OWORD *)(a2 + 248);
    *(_OWORD *)(a1 + 264) = v32;
    *(_OWORD *)(a1 + 280) = *(_OWORD *)(a2 + 280);
    goto LABEL_26;
  }
  uint64_t v29 = *(void *)(a2 + 256);
  if (!v29)
  {
    outlined destroy of Image.NamedResolved(a1 + 248);
    goto LABEL_21;
  }
  *(void *)(a1 + 248) = *(void *)(a2 + 248);
  *(void *)(a1 + 256) = v29;
  swift_bridgeObjectRelease();
  long long v30 = *(void **)(a1 + 264);
  unint64_t v31 = *(void *)(a2 + 264);
  if ((unint64_t)v30 >= 2)
  {
    if (v31 >= 2)
    {
      *(void *)(a1 + 264) = v31;
    }
    else
    {

      *(void *)(a1 + 264) = *(void *)(a2 + 264);
    }
  }
  else
  {
    *(void *)(a1 + 264) = v31;
  }
  *(_DWORD *)(a1 + 272) = *(_DWORD *)(a2 + 272);
  *(_WORD *)(a1 + 276) = *(_WORD *)(a2 + 276);
  *(unsigned char *)(a1 + 278) = *(unsigned char *)v6;
  *(void *)(a1 + 280) = *(void *)(a2 + 280);
  swift_release();
  *(void *)(a1 + 288) = *(void *)(a2 + 288);
  swift_release();
LABEL_26:
  int v33 = (_OWORD *)(a1 + 296);
  unint64_t v34 = *(void *)(a1 + 328);
  if (v34 >> 2 == 0xFFFFFFFF)
  {
LABEL_29:
    long long v36 = *(_OWORD *)(v6 + 98);
    *(_OWORD *)(a1 + 360) = *(_OWORD *)(v6 + 82);
    *(_OWORD *)(a1 + 376) = v36;
    *(void *)(a1 + 392) = *(void *)(v6 + 114);
    long long v37 = *(_OWORD *)(v6 + 34);
    *int v33 = *(_OWORD *)(v6 + 18);
    *(_OWORD *)(a1 + 312) = v37;
    long long v38 = *(_OWORD *)(v6 + 66);
    *(_OWORD *)(a1 + 328) = *(_OWORD *)(v6 + 50);
    *(_OWORD *)(a1 + 344) = v38;
    goto LABEL_31;
  }
  unint64_t v35 = *(void *)(a2 + 328);
  if (v35 >> 2 == 0xFFFFFFFF)
  {
    outlined destroy of PlatformItemList.Item.SystemItem(a1 + 296);
    goto LABEL_29;
  }
  uint64_t v39 = *(void **)(a1 + 296);
  uint64_t v40 = *(void *)(a1 + 304);
  uint64_t v41 = *(void *)(a1 + 312);
  uint64_t v42 = *(void *)(a1 + 320);
  uint64_t v43 = *(void *)(a1 + 336);
  uint64_t v44 = *(void *)(a1 + 344);
  uint64_t v45 = *(void *)(a1 + 352);
  long long v46 = *(_OWORD *)(a1 + 360);
  long long v47 = *(_OWORD *)(a1 + 376);
  uint64_t v48 = *(void *)(a1 + 392);
  long long v49 = *(_OWORD *)(v6 + 34);
  *int v33 = *(_OWORD *)(v6 + 18);
  *(_OWORD *)(a1 + 312) = v49;
  *(void *)(a1 + 328) = v35;
  long long v50 = *(_OWORD *)(a2 + 352);
  *(_OWORD *)(a1 + 336) = *(_OWORD *)(a2 + 336);
  *(_OWORD *)(a1 + 352) = v50;
  long long v51 = *(_OWORD *)(a2 + 384);
  *(_OWORD *)(a1 + 368) = *(_OWORD *)(a2 + 368);
  *(_OWORD *)(a1 + 384) = v51;
  outlined consume of PlatformItemList.Item.SystemItem(v39, v40, v41, v42, v34, v43, v44, v45, v46, *((uint64_t *)&v46 + 1), v47, SBYTE8(v47), v48);
LABEL_31:
  uint64_t v52 = *(void *)(a1 + 408);
  if (v52 == 1)
  {
LABEL_34:
    long long v54 = *(_OWORD *)(v6 + 170);
    *(_OWORD *)(a1 + 432) = *(_OWORD *)(v6 + 154);
    *(_OWORD *)(a1 + 448) = v54;
    *(unsigned char *)(a1 + 464) = *(unsigned char *)(v6 + 186);
    long long v55 = *(_OWORD *)(v6 + 138);
    *(_OWORD *)(a1 + 400) = *(_OWORD *)(v6 + 122);
    *(_OWORD *)(a1 + 416) = v55;
    goto LABEL_57;
  }
  uint64_t v53 = *(void *)(a2 + 408);
  if (v53 == 1)
  {
    outlined destroy of PlatformItemList.Item.SelectionBehavior(a1 + 400);
    goto LABEL_34;
  }
  *(unsigned char *)(a1 + 400) = *(unsigned char *)(v6 + 122);
  *(unsigned char *)(a1 + 401) = *(unsigned char *)(v6 + 123);
  *(unsigned char *)(a1 + 402) = *(unsigned char *)(v6 + 124);
  *(unsigned char *)(a1 + 403) = *(unsigned char *)(v6 + 125);
  *(unsigned char *)(a1 + 404) = *(unsigned char *)(a2 + 404);
  if (v52)
  {
    if (v53)
    {
      uint64_t v56 = *(void *)(a2 + 416);
      *(void *)(a1 + 408) = v53;
      *(void *)(a1 + 416) = v56;
      swift_release();
      goto LABEL_42;
    }
    swift_release();
  }
  else if (v53)
  {
    uint64_t v57 = *(void *)(a2 + 416);
    *(void *)(a1 + 408) = v53;
    *(void *)(a1 + 416) = v57;
    goto LABEL_42;
  }
  *(_OWORD *)(a1 + 408) = *(_OWORD *)(a2 + 408);
LABEL_42:
  uint64_t v58 = *(void *)(a2 + 424);
  if (*(void *)(a1 + 424))
  {
    if (v58)
    {
      uint64_t v59 = *(void *)(a2 + 432);
      *(void *)(a1 + 424) = v58;
      *(void *)(a1 + 432) = v59;
      swift_release();
      goto LABEL_49;
    }
    swift_release();
  }
  else if (v58)
  {
    uint64_t v60 = *(void *)(a2 + 432);
    *(void *)(a1 + 424) = v58;
    *(void *)(a1 + 432) = v60;
    goto LABEL_49;
  }
  *(_OWORD *)(a1 + 424) = *(_OWORD *)(a2 + 424);
LABEL_49:
  uint64_t v61 = *(void *)(a2 + 440);
  if (!*(void *)(a1 + 440))
  {
    if (v61)
    {
      uint64_t v63 = *(void *)(a2 + 448);
      *(void *)(a1 + 440) = v61;
      *(void *)(a1 + 448) = v63;
      goto LABEL_56;
    }
LABEL_55:
    *(_OWORD *)(a1 + 440) = *(_OWORD *)(a2 + 440);
    goto LABEL_56;
  }
  if (!v61)
  {
    swift_release();
    goto LABEL_55;
  }
  uint64_t v62 = *(void *)(a2 + 448);
  *(void *)(a1 + 440) = v61;
  *(void *)(a1 + 448) = v62;
  swift_release();
LABEL_56:
  *(void *)(a1 + 456) = *(void *)(a2 + 456);
  *(unsigned char *)(a1 + 464) = *(unsigned char *)(a2 + 464);
LABEL_57:
  uint64_t v64 = *(void *)(a2 + 480);
  *(void *)(a1 + 472) = *(void *)(a2 + 472);
  *(void *)(a1 + 480) = v64;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 488) = *(void *)(a2 + 488);
  *(unsigned char *)(a1 + 496) = *(unsigned char *)(a2 + 496);
  uint64_t v65 = *(void *)(a2 + 504);
  if (*(void *)(a1 + 504))
  {
    if (v65)
    {
      uint64_t v66 = *(void *)(a2 + 512);
      *(void *)(a1 + 504) = v65;
      *(void *)(a1 + 512) = v66;
      swift_release();
      goto LABEL_64;
    }
    swift_release();
  }
  else if (v65)
  {
    uint64_t v67 = *(void *)(a2 + 512);
    *(void *)(a1 + 504) = v65;
    *(void *)(a1 + 512) = v67;
    goto LABEL_64;
  }
  *(_OWORD *)(a1 + 504) = *(_OWORD *)(a2 + 504);
LABEL_64:
  *(_WORD *)(a1 + 520) = *(_WORD *)(a2 + 520);
  if (*(void *)(a1 + 528))
  {
    uint64_t v68 = *(void *)(a2 + 528);
    if (v68)
    {
      *(void *)(a1 + 528) = v68;
      swift_bridgeObjectRelease();
      *(void *)(a1 + 536) = *(void *)(a2 + 536);
      swift_release();
      *(void *)(a1 + 544) = *(void *)(a2 + 544);
      swift_release();
      goto LABEL_69;
    }
    outlined destroy of PlatformItemList.Item.Accessibility(a1 + 528);
  }
  *(_OWORD *)(a1 + 528) = *(_OWORD *)(a2 + 528);
  *(void *)(a1 + 544) = *(void *)(a2 + 544);
LABEL_69:
  uint64_t v115 = a3;
  if (*(void *)(a1 + 552) == 1)
  {
LABEL_72:
    *(_OWORD *)(a1 + 552) = *(_OWORD *)(a2 + 552);
    *(void *)(a1 + 568) = *(void *)(a2 + 568);
    goto LABEL_73;
  }
  uint64_t v69 = *(void *)(a2 + 552);
  if (v69 == 1)
  {
    outlined destroy of PlatformItemList.Item.SecondaryNavigationBehavior(a1 + 552);
    goto LABEL_72;
  }
  *(void *)(a1 + 552) = v69;
  swift_release();
  uint64_t v95 = *(void *)(a2 + 560);
  if (*(void *)(a1 + 560))
  {
    if (v95)
    {
      uint64_t v96 = *(void *)(a2 + 568);
      *(void *)(a1 + 560) = v95;
      *(void *)(a1 + 568) = v96;
      swift_release();
      goto LABEL_73;
    }
    swift_release();
  }
  else if (v95)
  {
    uint64_t v112 = *(void *)(a2 + 568);
    *(void *)(a1 + 560) = v95;
    *(void *)(a1 + 568) = v112;
    goto LABEL_73;
  }
  *(_OWORD *)(a1 + 560) = *(_OWORD *)(a2 + 560);
LABEL_73:
  uint64_t v70 = *(void **)(a1 + 576);
  *(void *)(a1 + 576) = *(void *)(a2 + 576);

  *(void *)(a1 + 584) = *(void *)(a2 + 584);
  *(void *)(a1 + 592) = *(void *)(a2 + 592);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 600) = *(void *)(a2 + 600);
  *(void *)(a1 + 608) = *(void *)(a2 + 608);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 616) = *(void *)(a2 + 616);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 624) = *(void *)(a2 + 624);
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 632) = *(unsigned char *)(a2 + 632);
  *(_WORD *)(a1 + 633) = *(_WORD *)(a2 + 633);
  uint64_t v71 = (int *)type metadata accessor for PlatformItemList.Item();
  uint64_t v72 = v71[28];
  uint64_t v73 = (unsigned char *)(a1 + v72);
  unint64_t v74 = (unsigned char *)(a2 + v72);
  uint64_t v75 = type metadata accessor for CommandOperation();
  uint64_t v76 = *(void *)(v75 - 8);
  uint64_t v77 = *(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(v76 + 48);
  int v78 = v77(v73, 1, v75);
  int v79 = v77(v74, 1, v75);
  if (!v78)
  {
    if (!v79)
    {
      *uint64_t v73 = *v74;
      uint64_t v97 = *(int *)(v75 + 20);
      long long v98 = &v73[v97];
      long long v99 = &v74[v97];
      LOBYTE(v97) = v74[v97 + 16];
      uint64_t v100 = *(void *)v98;
      uint64_t v101 = *((void *)v98 + 1);
      char v102 = v98[16];
      *(_OWORD *)long long v98 = *(_OWORD *)v99;
      v98[16] = v97;
      outlined consume of Text.Storage(v100, v101, v102);
      *((void *)v98 + 3) = *((void *)v99 + 3);
      swift_bridgeObjectRelease();
      uint64_t v103 = *(int *)(type metadata accessor for CommandGroupPlacement(0) + 20);
      long long v104 = &v98[v103];
      Swift::String_optional v105 = &v99[v103];
      uint64_t v106 = type metadata accessor for UUID();
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v106 - 8) + 40))(v104, v105, v106);
      uint64_t v107 = *(int *)(v75 + 24);
      uint64_t v108 = &v73[v107];
      uint64_t v109 = (uint64_t *)&v74[v107];
      uint64_t v110 = *v109;
      if (*v108)
      {
        uint64_t v94 = v115;
        if (v110)
        {
          uint64_t v111 = v109[1];
          void *v108 = v110;
          v108[1] = v111;
          swift_release();
          goto LABEL_90;
        }
        swift_release();
      }
      else
      {
        uint64_t v94 = v115;
        if (v110)
        {
          uint64_t v114 = v109[1];
          void *v108 = v110;
          v108[1] = v114;
          goto LABEL_90;
        }
      }
      *(_OWORD *)uint64_t v108 = *(_OWORD *)v109;
      goto LABEL_90;
    }
    _s7SwiftUI16PlatformItemListV0D0VWOhTm_0((uint64_t)v73, (uint64_t (*)(void))type metadata accessor for CommandOperation);
    goto LABEL_79;
  }
  if (v79)
  {
LABEL_79:
    _s7SwiftUI16CommandOperationVSgMaTm_1(0, &lazy cache variable for type metadata for CommandOperation?, (uint64_t (*)(uint64_t))type metadata accessor for CommandOperation, MEMORY[0x1E4FBB718]);
    memcpy(v73, v74, *(void *)(*(void *)(v93 - 8) + 64));
    uint64_t v94 = v115;
    goto LABEL_90;
  }
  *uint64_t v73 = *v74;
  uint64_t v80 = *(int *)(v75 + 20);
  id v81 = &v73[v80];
  uint64_t v82 = &v74[v80];
  long long v83 = *(_OWORD *)&v74[v80 + 16];
  *id v81 = *(_OWORD *)&v74[v80];
  v81[1] = v83;
  uint64_t v84 = *(int *)(type metadata accessor for CommandGroupPlacement(0) + 20);
  long long v85 = (char *)v81 + v84;
  long long v86 = &v82[v84];
  uint64_t v87 = type metadata accessor for UUID();
  (*(void (**)(char *, unsigned char *, uint64_t))(*(void *)(v87 - 8) + 32))(v85, v86, v87);
  uint64_t v88 = *(int *)(v75 + 24);
  id v89 = &v73[v88];
  int v90 = (uint64_t *)&v74[v88];
  uint64_t v91 = *v90;
  if (*v90)
  {
    uint64_t v92 = v90[1];
    *id v89 = v91;
    v89[1] = v92;
  }
  else
  {
    *(_OWORD *)id v89 = *(_OWORD *)v90;
  }
  uint64_t v94 = v115;
  (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v76 + 56))(v73, 0, 1, v75);
LABEL_90:
  *(unsigned char *)(a1 + v71[29]) = *(unsigned char *)(a2 + v71[29]);
  *(unsigned char *)(a1 + v71[30]) = *(unsigned char *)(a2 + v71[30]);
  *(unsigned char *)(a1 + v71[31]) = *(unsigned char *)(a2 + v71[31]);
  *(unsigned char *)(a1 + v71[32]) = *(unsigned char *)(a2 + v71[32]);
  *(void *)(a1 + v71[33]) = *(void *)(a2 + v71[33]);
  swift_release();
  *(void *)(a1 + *(int *)(v94 + 20)) = *(void *)(a2 + *(int *)(v94 + 20));
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for MenuVisitor.MenuStackGroup(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_187BEF918);
}

uint64_t sub_187BEF918(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for PlatformItemList.Item();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    long long v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 20));
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    return (v10 + 1);
  }
}

uint64_t storeEnumTagSinglePayload for MenuVisitor.MenuStackGroup(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_187BEF9EC);
}

uint64_t sub_187BEF9EC(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for PlatformItemList.Item();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
  }
  return result;
}

uint64_t type metadata completion function for MenuVisitor.MenuStackGroup()
{
  uint64_t result = type metadata accessor for PlatformItemList.Item();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for EnvironmentValues.DocumentCommandsKey()
{
  return &type metadata for EnvironmentValues.DocumentCommandsKey;
}

ValueMetadata *type metadata accessor for MenuBuilderContext.PlacementMap()
{
  return &type metadata for MenuBuilderContext.PlacementMap;
}

unsigned char *storeEnumTagSinglePayload for MenuBuilderContext.PlacementKind(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x187BEFC2CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for MenuBuilderContext.PlacementKind()
{
  return &type metadata for MenuBuilderContext.PlacementKind;
}

unint64_t lazy protocol witness table accessor for type MenuBuilderContext.PlacementKind and conformance MenuBuilderContext.PlacementKind()
{
  unint64_t result = lazy protocol witness table cache variable for type MenuBuilderContext.PlacementKind and conformance MenuBuilderContext.PlacementKind;
  if (!lazy protocol witness table cache variable for type MenuBuilderContext.PlacementKind and conformance MenuBuilderContext.PlacementKind)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MenuBuilderContext.PlacementKind and conformance MenuBuilderContext.PlacementKind);
  }
  return result;
}

uint64_t destroy for MenuVisitor()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for MenuVisitor(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  uint64_t v3 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v3;
  uint64_t v4 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v4;
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for MenuVisitor(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for MenuVisitor(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for MenuVisitor(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 64)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for MenuVisitor(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 64) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 16) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 64) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

void *type metadata accessor for MenuVisitor()
{
  return &unk_1ED40EE98;
}

void *type metadata accessor for MenuVisitor.Options()
{
  return &unk_1ED40EE70;
}

unint64_t lazy protocol witness table accessor for type MenuVisitor.Options and conformance MenuVisitor.Options()
{
  unint64_t result = lazy protocol witness table cache variable for type MenuVisitor.Options and conformance MenuVisitor.Options;
  if (!lazy protocol witness table cache variable for type MenuVisitor.Options and conformance MenuVisitor.Options)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MenuVisitor.Options and conformance MenuVisitor.Options);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type MenuVisitor.Options and conformance MenuVisitor.Options;
  if (!lazy protocol witness table cache variable for type MenuVisitor.Options and conformance MenuVisitor.Options)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MenuVisitor.Options and conformance MenuVisitor.Options);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type MenuVisitor.Options and conformance MenuVisitor.Options;
  if (!lazy protocol witness table cache variable for type MenuVisitor.Options and conformance MenuVisitor.Options)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MenuVisitor.Options and conformance MenuVisitor.Options);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type MenuVisitor.Options and conformance MenuVisitor.Options;
  if (!lazy protocol witness table cache variable for type MenuVisitor.Options and conformance MenuVisitor.Options)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MenuVisitor.Options and conformance MenuVisitor.Options);
  }
  return result;
}

void static FullScreenToolbarBehavior.automatic.getter(unsigned char *a1@<X8>)
{
  *a1 = 0;
}

void static FullScreenToolbarBehavior.showsWithWindow.getter(unsigned char *a1@<X8>)
{
  *a1 = 1;
}

void static FullScreenToolbarBehavior.showsWithMenuBar.getter()
{
}

uint64_t View.windowToolbarFullScreenVisibility(_:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a1 - 8) + 16))(a2, v2, a1);
}

ValueMetadata *type metadata accessor for FullScreenToolbarBehavior()
{
  return &type metadata for FullScreenToolbarBehavior;
}

uint64_t sub_187BF0168(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

unint64_t lazy protocol witness table accessor for type WindowToolbarFullScreenVisibility.Role and conformance WindowToolbarFullScreenVisibility.Role()
{
  unint64_t result = lazy protocol witness table cache variable for type WindowToolbarFullScreenVisibility.Role and conformance WindowToolbarFullScreenVisibility.Role;
  if (!lazy protocol witness table cache variable for type WindowToolbarFullScreenVisibility.Role and conformance WindowToolbarFullScreenVisibility.Role)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WindowToolbarFullScreenVisibility.Role and conformance WindowToolbarFullScreenVisibility.Role);
  }
  return result;
}

void static WindowToolbarFullScreenVisibility.visible.getter()
{
}

void static WindowToolbarFullScreenVisibility.onHover.getter()
{
}

void UIViewResponder.containsGlobalPoints(_:cacheKey:options:)(double *a1@<X0>, unint64_t a2@<X1>, double **a3@<X2>, uint64_t a4@<X8>)
{
  long long v8 = *a3;
  if (static UnifiedHitTestingFeature.isEnabled.getter())
  {
    int v19 = v8;
    PlatformViewResponderBase.containsGlobalPoints(_:cacheKey:options:)(a1, a2 | ((HIDWORD(a2) & 1) << 32), &v19, a4);
    return;
  }
  uint64_t v9 = (void *)MEMORY[0x18C119DF0](v4 + 40);
  double v10 = 0.0;
  if (!v9) {
    goto LABEL_6;
  }
  long long v11 = v9;
  if (v8)
  {

LABEL_8:
    long long v18[3] = v8;
    dispatch thunk of ViewResponder.children.getter();
    swift_beginAccess();
    type metadata accessor for ContentResponderHelper<TrivialContentResponder>();
    ContentResponderHelper.containsGlobalPoints(_:cacheKey:options:children:)();
    swift_endAccess();
    swift_bridgeObjectRelease();
    unint64_t v13 = (unint64_t)v19;
    double v10 = v20;
    swift_bridgeObjectRelease();
    if (v19)
    {
      double v14 = 16.0;
      if (v20 > 16.0) {
        double v14 = v20;
      }
      if ((v8 & 2) == 0) {
        double v10 = v14;
      }
    }
    goto LABEL_13;
  }
  unsigned int v12 = objc_msgSend(v9, sel_isUserInteractionEnabled);

  if (v12) {
    goto LABEL_8;
  }
LABEL_6:
  unint64_t v13 = 0;
LABEL_13:
  v18[0] = v8;
  PlatformViewResponderBase.containsGlobalPoints(_:cacheKey:options:)(a1, a2 | ((HIDWORD(a2) & 1) << 32), v18, (uint64_t)&v19);
  unint64_t v15 = (unint64_t)v19;
  double v16 = v20;
  swift_bridgeObjectRelease();
  if (v10 <= v16) {
    double v10 = v16;
  }
  uint64_t v17 = dispatch thunk of ViewResponder.children.getter();
  *(void *)a4 = v15 | v13;
  *(double *)(a4 + 8) = v10;
  *(void *)(a4 + 16) = v17;
}

Swift::Void __swiftcall UIViewResponder.extendPrintTree(string:)(Swift::String *string)
{
  swift_beginAccess();
  type metadata accessor for ContentResponderHelper<TrivialContentResponder>();
  ContentResponderHelper.size.getter();
  swift_endAccess();
  v1._countAndFlagsBits = Double.description.getter();
  String.append(_:)(v1);
  swift_bridgeObjectRelease();
  v2._countAndFlagsBits = 8236;
  v2._object = (void *)0xE200000000000000;
  String.append(_:)(v2);
  swift_beginAccess();
  ContentResponderHelper.size.getter();
  swift_endAccess();
  v3._countAndFlagsBits = Double.description.getter();
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  v4._countAndFlagsBits = 93;
  v4._object = (void *)0xE100000000000000;
  String.append(_:)(v4);
  v5._countAndFlagsBits = 91;
  v5._object = (void *)0xE100000000000000;
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
}

uint64_t UIViewResponder.platformViewIsEnabled.getter()
{
  uint64_t v1 = v0 + 40;
  Swift::String v2 = (void *)MEMORY[0x18C119DF0](v1);
  if (v2)
  {
    Swift::String v3 = v2;
    uint64_t v4 = (uint64_t)objc_msgSend(v2, sel_isUserInteractionEnabled);
  }
  else
  {
    uint64_t v5 = MEMORY[0x18C119DF0](v1);
    if (!v5) {
      return 0;
    }
    Swift::String v3 = (void *)v5;
    uint64_t v4 = 1;
  }

  return v4;
}

void __swiftcall UIViewResponder.platformViewHitTest(globalPoint:cacheKey:)(UIView_optional *__return_ptr retstr, CGPoint globalPoint, Swift::UInt32_optional cacheKey)
{
  double y = globalPoint.y;
  double x = globalPoint.x;
  unsigned int v6 = MEMORY[0x18C119DF0](retstr, v3 + 40);
  if (v6)
  {
    uint64_t v7 = v6;
    id v8 = objc_msgSend(v6, sel_window);

    if (!v8)
    {

      return;
    }
    objc_msgSend(v7, sel_convertPoint_fromView_, 0, x, y);
    double v10 = v9;
    double v12 = v11;
    swift_beginAccess();
    if (MEMORY[0x18C119DF0](v3 + 16))
    {
      uint64_t v13 = *(void *)(v3 + 24);
      uint64_t ObjectType = swift_getObjectType();
      unint64_t v15 = type metadata accessor for CurrentEventProvider();
      (*(void (**)(void *__return_ptr, unint64_t, unint64_t, uint64_t, uint64_t))(v13 + 16))(v19, v15, v15, ObjectType, v13);
      swift_unknownObjectRelease();
      uint64_t v16 = v20;
      if (v20)
      {
        uint64_t v17 = v21;
        __swift_project_boxed_opaque_existential_1(v19, v20);
        int v18 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v17 + 8))(v16, v17);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v19);
LABEL_10:
        objc_msgSend(v7, sel_hitTest_withEvent_, v18, v10, v12);

        return;
      }
      outlined destroy of CurrentEventProvider?((uint64_t)v19);
    }
    int v18 = 0;
    goto LABEL_10;
  }
}

uint64_t UIViewResponder.__allocating_init()()
{
  uint64_t v0 = swift_allocObject();
  uint64_t v1 = specialized UIViewResponder.init()(v0);
  swift_release();
  return v1;
}

uint64_t UIViewResponder.__ivar_destroyer()
{
  swift_unknownObjectWeakDestroy();

  return swift_bridgeObjectRelease();
}

uint64_t ObjC metadata update function for UIViewResponder()
{
  return type metadata accessor for UIViewResponder();
}

uint64_t protocol witness for FocusResponder.keyPressHandlers.getter in conformance UIViewResponder()
{
  return swift_bridgeObjectRetain();
}

void type metadata accessor for CurrentEventProvider?(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

unint64_t type metadata accessor for CurrentEventProvider()
{
  unint64_t result = lazy cache variable for type metadata for CurrentEventProvider;
  if (!lazy cache variable for type metadata for CurrentEventProvider)
  {
    unint64_t result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for CurrentEventProvider);
  }
  return result;
}

uint64_t outlined destroy of CurrentEventProvider?(uint64_t a1)
{
  type metadata accessor for CurrentEventProvider?(0, (unint64_t *)&lazy cache variable for type metadata for CurrentEventProvider?, (uint64_t (*)(uint64_t))type metadata accessor for CurrentEventProvider, MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t destroy for BorderedButtonColorSpec(uint64_t a1)
{
  swift_release();
  uint64_t v2 = *(unsigned __int8 *)(a1 + 32);
  if (v2 != 255) {
    outlined consume of Material.ID(*(void *)(a1 + 24), v2);
  }
  unint64_t result = *(void *)(a1 + 48);
  if (result >= 3)
  {
    return swift_release();
  }
  return result;
}

uint64_t initializeWithCopy for BorderedButtonColorSpec(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  uint64_t v4 = (uint64_t *)(a2 + 24);
  uint64_t v5 = *(void *)(a2 + 32);
  uint64_t v6 = ~*(unsigned char *)(a2 + 32);
  swift_retain();
  if (v6)
  {
    uint64_t v7 = *v4;
    outlined copy of Material.ID(v7, v5);
    *(void *)(a1 + 24) = v7;
    *(unsigned char *)(a1 + 32) = v5;
    *(_DWORD *)(a1 + 36) = HIDWORD(v5);
  }
  else
  {
    *(_OWORD *)(a1 + 24) = *(_OWORD *)v4;
  }
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  unint64_t v8 = *(void *)(a2 + 48);
  if (v8 >= 3) {
    unint64_t v8 = swift_retain();
  }
  *(void *)(a1 + 48) = v8;
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  return a1;
}

uint64_t assignWithCopy for BorderedButtonColorSpec(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_retain();
  swift_release();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  uint64_t v4 = *(unsigned __int8 *)(a2 + 32);
  if (*(unsigned char *)(a1 + 32) != 0xFF)
  {
    if (v4 != 255)
    {
      uint64_t v6 = *(void *)(a2 + 24);
      outlined copy of Material.ID(v6, *(unsigned char *)(a2 + 32));
      uint64_t v7 = *(void *)(a1 + 24);
      *(void *)(a1 + 24) = v6;
      unsigned __int8 v8 = *(unsigned char *)(a1 + 32);
      *(unsigned char *)(a1 + 32) = v4;
      outlined consume of Material.ID(v7, v8);
      goto LABEL_8;
    }
    outlined destroy of Material(a1 + 24);
LABEL_6:
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
    goto LABEL_9;
  }
  if (v4 == 255) {
    goto LABEL_6;
  }
  uint64_t v5 = *(void *)(a2 + 24);
  outlined copy of Material.ID(v5, *(unsigned char *)(a2 + 32));
  *(void *)(a1 + 24) = v5;
  *(unsigned char *)(a1 + 32) = v4;
LABEL_8:
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
LABEL_9:
  uint64_t v9 = (unint64_t *)(a1 + 48);
  unint64_t v10 = *(void *)(a1 + 48);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  unint64_t v11 = *(void *)(a2 + 48);
  if (v10 >= 3)
  {
    if (v11 >= 3)
    {
      *uint64_t v9 = v11;
      swift_retain();
      swift_release();
    }
    else
    {
      outlined destroy of Color(a1 + 48);
      *uint64_t v9 = *(void *)(a2 + 48);
    }
  }
  else
  {
    *uint64_t v9 = v11;
    if (v11 >= 3) {
      swift_retain();
    }
  }
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  return a1;
}

uint64_t outlined destroy of Material(uint64_t a1)
{
  return a1;
}

uint64_t outlined destroy of Color(uint64_t a1)
{
  return a1;
}

uint64_t assignWithTake for BorderedButtonColorSpec(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_release();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  uint64_t v4 = (_OWORD *)(a2 + 24);
  uint64_t v5 = *(unsigned __int8 *)(a1 + 32);
  if (v5 == 255) {
    goto LABEL_4;
  }
  unint64_t v6 = *(void *)(a2 + 32);
  if (*(unsigned char *)(a2 + 32) == 0xFF)
  {
    outlined destroy of Material(a1 + 24);
LABEL_4:
    *(_OWORD *)(a1 + 24) = *v4;
    goto LABEL_6;
  }
  unint64_t v7 = HIDWORD(v6);
  uint64_t v8 = *(void *)(a1 + 24);
  *(void *)(a1 + 24) = *(void *)v4;
  *(unsigned char *)(a1 + 32) = v6;
  outlined consume of Material.ID(v8, v5);
  *(_DWORD *)(a1 + 36) = v7;
LABEL_6:
  unint64_t v10 = (unint64_t *)(a1 + 48);
  unint64_t v9 = *(void *)(a1 + 48);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  unint64_t v11 = *(void *)(a2 + 48);
  if (v9 >= 3)
  {
    if (v11 >= 3)
    {
      *unint64_t v10 = v11;
      swift_release();
      goto LABEL_11;
    }
    outlined destroy of Color(a1 + 48);
  }
  *unint64_t v10 = v11;
LABEL_11:
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  return a1;
}

ValueMetadata *type metadata accessor for BorderedButtonColorSpec()
{
  return &type metadata for BorderedButtonColorSpec;
}

unint64_t *assignWithCopy for BorderedButtonColorSpec.LabelStyle(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3 = *a1;
  unint64_t v4 = *a2;
  if (v3 < 0xFFFFFFFF)
  {
    *a1 = v4;
    if (v4 >= 0xFFFFFFFF) {
      swift_retain();
    }
  }
  else if (v4 < 0xFFFFFFFF)
  {
    swift_release();
    *a1 = *a2;
  }
  else
  {
    *a1 = v4;
    swift_retain();
    swift_release();
  }
  return a1;
}

unint64_t *assignWithTake for BorderedButtonColorSpec.LabelStyle(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3 = *a2;
  if (*a1 < 0xFFFFFFFF) {
    goto LABEL_5;
  }
  if (v3 < 0xFFFFFFFF)
  {
    swift_release();
LABEL_5:
    *a1 = v3;
    return a1;
  }
  *a1 = v3;
  swift_release();
  return a1;
}

uint64_t destroy for BorderedButtonSpec(uint64_t a1)
{
  outlined consume of Environment<Bool?>.Content(*(void *)a1, *(unsigned __int8 *)(a1 + 8));
  outlined consume of Environment<KeyboardShortcut?>.Content(*(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(unsigned __int8 *)(a1 + 40), *(unsigned char *)(a1 + 41));
  uint64_t v2 = *(void *)(a1 + 48);
  uint64_t v3 = *(unsigned __int8 *)(a1 + 56);

  return outlined consume of Environment<Bool?>.Content(v2, v3);
}

uint64_t initializeWithCopy for BorderedButtonSpec(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  unsigned __int8 v5 = *((unsigned char *)a2 + 8);
  outlined copy of Environment<MenuActionDismissBehavior>.Content(*a2, v5);
  *(void *)a1 = v4;
  *(unsigned char *)(a1 + 8) = v5;
  uint64_t v6 = a2[2];
  uint64_t v7 = a2[3];
  uint64_t v8 = a2[4];
  char v9 = *((unsigned char *)a2 + 41);
  unsigned __int8 v10 = *((unsigned char *)a2 + 40);
  outlined copy of Environment<KeyboardShortcut?>.Content(v6, v7, v8, v10, v9);
  *(void *)(a1 + 16) = v6;
  *(void *)(a1 + 24) = v7;
  *(void *)(a1 + 32) = v8;
  *(unsigned char *)(a1 + 40) = v10;
  *(unsigned char *)(a1 + 41) = v9;
  uint64_t v11 = a2[6];
  uint64_t v12 = *((unsigned __int8 *)a2 + 56);
  outlined copy of Environment<MenuActionDismissBehavior>.Content(v11, v12);
  *(void *)(a1 + 48) = v11;
  *(unsigned char *)(a1 + 56) = v12;
  return a1;
}

uint64_t *assignWithCopy for BorderedButtonSpec(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  unsigned __int8 v5 = *((unsigned char *)a2 + 8);
  outlined copy of Environment<MenuActionDismissBehavior>.Content(*a2, v5);
  uint64_t v6 = *a1;
  uint64_t v7 = *((unsigned __int8 *)a1 + 8);
  *a1 = v4;
  *((unsigned char *)a1 + 8) = v5;
  outlined consume of Environment<Bool?>.Content(v6, v7);
  uint64_t v8 = a2[2];
  uint64_t v9 = a2[3];
  uint64_t v10 = a2[4];
  char v11 = *((unsigned char *)a2 + 41);
  unsigned __int8 v12 = *((unsigned char *)a2 + 40);
  outlined copy of Environment<KeyboardShortcut?>.Content(v8, v9, v10, v12, v11);
  uint64_t v13 = a1[2];
  uint64_t v14 = a1[3];
  uint64_t v15 = a1[4];
  char v16 = *((unsigned char *)a1 + 41);
  a1[2] = v8;
  a1[3] = v9;
  a1[4] = v10;
  uint64_t v17 = *((unsigned __int8 *)a1 + 40);
  *((unsigned char *)a1 + 40) = v12;
  *((unsigned char *)a1 + 41) = v11;
  outlined consume of Environment<KeyboardShortcut?>.Content(v13, v14, v15, v17, v16);
  uint64_t v18 = a2[6];
  uint64_t v19 = *((unsigned __int8 *)a2 + 56);
  outlined copy of Environment<MenuActionDismissBehavior>.Content(v18, v19);
  uint64_t v20 = a1[6];
  uint64_t v21 = *((unsigned __int8 *)a1 + 56);
  a1[6] = v18;
  *((unsigned char *)a1 + 56) = v19;
  outlined consume of Environment<Bool?>.Content(v20, v21);
  return a1;
}

uint64_t *assignWithTake for BorderedButtonSpec(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  char v5 = *((unsigned char *)a2 + 8);
  uint64_t v6 = *a1;
  uint64_t v7 = *((unsigned __int8 *)a1 + 8);
  *a1 = v4;
  *((unsigned char *)a1 + 8) = v5;
  outlined consume of Environment<Bool?>.Content(v6, v7);
  uint64_t v8 = a2[4];
  char v9 = *((unsigned char *)a2 + 40);
  char v10 = *((unsigned char *)a2 + 41);
  uint64_t v11 = a1[2];
  uint64_t v12 = a1[3];
  uint64_t v13 = a1[4];
  char v14 = *((unsigned char *)a1 + 41);
  *((_OWORD *)a1 + 1) = *((_OWORD *)a2 + 1);
  a1[4] = v8;
  uint64_t v15 = *((unsigned __int8 *)a1 + 40);
  *((unsigned char *)a1 + 40) = v9;
  *((unsigned char *)a1 + 41) = v10;
  outlined consume of Environment<KeyboardShortcut?>.Content(v11, v12, v13, v15, v14);
  char v16 = *((unsigned char *)a2 + 56);
  uint64_t v17 = a1[6];
  uint64_t v18 = *((unsigned __int8 *)a1 + 56);
  a1[6] = a2[6];
  *((unsigned char *)a1 + 56) = v16;
  outlined consume of Environment<Bool?>.Content(v17, v18);
  return a1;
}

unsigned char *storeEnumTagSinglePayload for AccessibilityLabeledContentPresentation(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x187BF115CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

uint64_t protocol witness for static ViewInputPredicate.evaluate(inputs:) in conformance AccessibilityCombinedLabeledContent()
{
  lazy protocol witness table accessor for type AccessibilityCombinedLabeledContent and conformance AccessibilityCombinedLabeledContent();
  PropertyList.subscript.getter();
  return v1;
}

unint64_t lazy protocol witness table accessor for type AccessibilityLabeledContentPresentation and conformance AccessibilityLabeledContentPresentation()
{
  unint64_t result = lazy protocol witness table cache variable for type AccessibilityLabeledContentPresentation and conformance AccessibilityLabeledContentPresentation;
  if (!lazy protocol witness table cache variable for type AccessibilityLabeledContentPresentation and conformance AccessibilityLabeledContentPresentation)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityLabeledContentPresentation and conformance AccessibilityLabeledContentPresentation);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for AccessibilityLabeledContentContentModifier(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (v5 <= 0xFD) {
    unsigned int v7 = 253;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  int v8 = a2 - v7;
  if (a2 <= v7) {
    goto LABEL_23;
  }
  uint64_t v9 = v6 + 1;
  char v10 = 8 * (v6 + 1);
  if ((v6 + 1) <= 3)
  {
    unsigned int v13 = ((v8 + ~(-1 << v10)) >> v10) + 1;
    if (HIWORD(v13))
    {
      int v11 = *(_DWORD *)((char *)a1 + v9);
      if (!v11) {
        goto LABEL_23;
      }
      goto LABEL_15;
    }
    if (v13 > 0xFF)
    {
      int v11 = *(unsigned __int16 *)((char *)a1 + v9);
      if (!*(unsigned __int16 *)((char *)a1 + v9)) {
        goto LABEL_23;
      }
      goto LABEL_15;
    }
    if (v13 < 2)
    {
LABEL_23:
      if (v5 >= 0xFD) {
        return (*(uint64_t (**)(void))(v4 + 48))();
      }
      unsigned int v15 = *((unsigned __int8 *)a1 + v6);
      BOOL v16 = v15 >= 2;
      unsigned int v17 = v15 - 2;
      if (!v16) {
        unsigned int v17 = -1;
      }
      if (v17 + 1 >= 2) {
        return v17;
      }
      else {
        return 0;
      }
    }
  }
  int v11 = *((unsigned __int8 *)a1 + v9);
  if (!*((unsigned char *)a1 + v9)) {
    goto LABEL_23;
  }
LABEL_15:
  int v14 = (v11 - 1) << v10;
  if (v9 > 3) {
    int v14 = 0;
  }
  if (v9)
  {
    if (v9 > 3) {
      LODWORD(v9) = 4;
    }
    switch((int)v9)
    {
      case 2:
        LODWORD(v9) = *a1;
        break;
      case 3:
        LODWORD(v9) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v9) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v9) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v7 + (v9 | v14) + 1;
}

void storeEnumTagSinglePayload for AccessibilityLabeledContentContentModifier(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0xFD) {
    unsigned int v8 = 253;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  size_t v10 = v9 + 1;
  BOOL v11 = a3 >= v8;
  unsigned int v12 = a3 - v8;
  if (v12 != 0 && v11)
  {
    if (v10 <= 3)
    {
      unsigned int v16 = ((v12 + ~(-1 << (8 * v10))) >> (8 * v10)) + 1;
      if (HIWORD(v16))
      {
        int v13 = 4;
      }
      else if (v16 >= 0x100)
      {
        int v13 = 2;
      }
      else
      {
        int v13 = v16 > 1;
      }
    }
    else
    {
      int v13 = 1;
    }
  }
  else
  {
    int v13 = 0;
  }
  if (v8 < a2)
  {
    unsigned int v14 = ~v8 + a2;
    if (v10 < 4)
    {
      int v15 = (v14 >> (8 * v10)) + 1;
      if (v9 != -1)
      {
        int v17 = v14 & ~(-1 << (8 * v10));
        bzero(a1, v10);
        if (v10 == 3)
        {
          *(_WORD *)a1 = v17;
          a1[2] = BYTE2(v17);
        }
        else if (v10 == 2)
        {
          *(_WORD *)a1 = v17;
        }
        else
        {
          *a1 = v17;
        }
      }
    }
    else
    {
      bzero(a1, v9 + 1);
      *(_DWORD *)a1 = v14;
      int v15 = 1;
    }
    switch(v13)
    {
      case 1:
        a1[v10] = v15;
        return;
      case 2:
        *(_WORD *)&a1[v10] = v15;
        return;
      case 3:
        goto LABEL_39;
      case 4:
        *(_DWORD *)&a1[v10] = v15;
        return;
      default:
        return;
    }
  }
  switch(v13)
  {
    case 1:
      a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 2:
      *(_WORD *)&a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 3:
LABEL_39:
      __break(1u);
      JUMPOUT(0x187BF16B0);
    case 4:
      *(_DWORD *)&a1[v10] = 0;
      goto LABEL_23;
    default:
LABEL_23:
      if (a2)
      {
LABEL_24:
        if (v7 < 0xFD)
        {
          a1[v9] = a2 + 2;
        }
        else
        {
          uint64_t v18 = *(void (**)(void))(v6 + 56);
          v18();
        }
      }
      return;
  }
}

unsigned char *storeEnumTagSinglePayload for AccessibilityLabeledContentLabelModifier(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x187BF17A4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

_UNKNOWN **base witness table accessor for ViewModifier in AccessibilityLabeledContentLabelModifier()
{
  return &protocol witness table for AccessibilityLabeledContentLabelModifier;
}

uint64_t AccessibilityLabeledContentLabelModifier.Attachment.value.getter@<X0>(uint64_t *a1@<X8>)
{
  if (*(unsigned char *)AGGraphGetValue() == 1)
  {
    type metadata accessor for AnyAccessibilityPropertiesEntry();
    uint64_t v12 = Dictionary.init(minimumCapacity:)();
    specialized AccessibilityProperties.subscript.setter(dword_1ED464648 | ((unint64_t)dword_1ED464648 << 32));
    LOBYTE(v11) = 19;
    AccessibilityNullableOptionSet<>.init(adding:)();
    specialized AccessibilityProperties.subscript.setter(v7, v8);
    uint64_t v2 = v12;
  }
  else
  {
    AccessibilityNullableOptionSet<>.init(adding:)();
    type metadata accessor for AnyAccessibilityPropertiesEntry();
    uint64_t v11 = Dictionary.init(minimumCapacity:)();
    type metadata accessor for AccessibilityPropertiesEntry<AccessibilityNullableOptionSet<AccessibilityTraitSet>>();
    uint64_t v9 = v3;
    unint64_t v10 = lazy protocol witness table accessor for type AccessibilityPropertiesEntry<AccessibilityNullableOptionSet<AccessibilityTraitSet>> and conformance AccessibilityPropertiesEntry<A>();
    uint64_t v7 = v12;
    uint64_t v8 = v13;
    specialized Dictionary.subscript.setter((uint64_t)&v7, MEMORY[0x1E4F40BA8]);
    uint64_t v2 = v11;
  }
  uint64_t v11 = v2;
  AccessibilityAttachment.init(properties:)();
  uint64_t v4 = v7;
  uint64_t v5 = v8;
  _s7SwiftUI10MutableBoxCyAA23AccessibilityAttachmentVGMaTm_1(0, (unint64_t *)&lazy cache variable for type metadata for MutableBox<AccessibilityAttachment>, MEMORY[0x1E4F40A58], MEMORY[0x1E4F3F398]);
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = v4;
  *(void *)(result + 24) = v5;
  *a1 = result;
  a1[1] = 0;
  return result;
}

uint64_t protocol witness for Rule.value.getter in conformance AccessibilityLabeledContentLabelModifier.Attachment@<X0>(uint64_t *a1@<X8>)
{
  return AccessibilityLabeledContentLabelModifier.Attachment.value.getter(a1);
}

unint64_t instantiation function for generic protocol witness table for AccessibilityLabeledContentLabelModifier(uint64_t a1)
{
  *(void *)(a1 + 8) = lazy protocol witness table accessor for type AccessibilityLabeledContentLabelModifier and conformance AccessibilityLabeledContentLabelModifier();
  unint64_t result = lazy protocol witness table accessor for type AccessibilityLabeledContentLabelModifier and conformance AccessibilityLabeledContentLabelModifier();
  *(void *)(a1 + 16) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type AccessibilityLabeledContentLabelModifier and conformance AccessibilityLabeledContentLabelModifier()
{
  unint64_t result = lazy protocol witness table cache variable for type AccessibilityLabeledContentLabelModifier and conformance AccessibilityLabeledContentLabelModifier;
  if (!lazy protocol witness table cache variable for type AccessibilityLabeledContentLabelModifier and conformance AccessibilityLabeledContentLabelModifier)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityLabeledContentLabelModifier and conformance AccessibilityLabeledContentLabelModifier);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AccessibilityLabeledContentLabelModifier and conformance AccessibilityLabeledContentLabelModifier;
  if (!lazy protocol witness table cache variable for type AccessibilityLabeledContentLabelModifier and conformance AccessibilityLabeledContentLabelModifier)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityLabeledContentLabelModifier and conformance AccessibilityLabeledContentLabelModifier);
  }
  return result;
}

void protocol witness for ViewModifier.body(content:) in conformance AccessibilityLabeledContentLabelModifier()
{
}

uint64_t closure #1 in static AccessibilityLabeledContentContentModifier._makeView(modifier:inputs:body:)(uint64_t a1, uint64_t a2)
{
  v7[2] = type metadata accessor for AccessibilityLabeledContentContentModifier();
  v7[3] = a2;
  uint64_t v4 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(a1, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply, (uint64_t)v7, a2, MEMORY[0x1E4FBC248], v4, MEMORY[0x1E4FBC278], v5);
  return v7[5];
}

void AccessibilityLabeledContentContentModifier.LabelChild.value.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v5 = (char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for ModifiedContent();
  MEMORY[0x1F4188790](v6);
  uint64_t Value = AGGraphGetValue();
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, Value, a2);
  View.accessibilityDetachedGeometry()();
}

void sub_187BF1C9C()
{
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v1);
  *(void *)(v4 - 96) = v0;
  *(void *)(v4 - 88) = &protocol witness table for DetachedGeometryModifier;
  swift_getWitnessTable();
  View.accessibilityRepresentationStyle()();
}

uint64_t sub_187BF1CF4()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
}

uint64_t protocol witness for static Rule.initialValue.getter in conformance AccessibilityLabeledContentContentModifier<A>.LabelChild@<X0>(uint64_t a1@<X8>)
{
  type metadata accessor for ModifiedContent();
  uint64_t v2 = type metadata accessor for ModifiedContent();
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56);

  return v3(a1, 1, 1, v2);
}

void protocol witness for Rule.value.getter in conformance AccessibilityLabeledContentContentModifier<A>.LabelChild(uint64_t a1)
{
  AccessibilityLabeledContentContentModifier.LabelChild.value.getter(*v1, *(void *)(a1 + 16));
}

void AccessibilityLabeledContentContentModifier.Attachment.updateValue()()
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  if (*(unsigned char *)AGGraphGetValue() != 1)
  {
    type metadata accessor for AnyAccessibilityPropertiesEntry();
    uint64_t v23 = Dictionary.init(minimumCapacity:)();
    AccessibilityAttachment.init(properties:)();
    goto LABEL_6;
  }
  if (*MEMORY[0x1E4F4E7A0] == *v0)
  {
    uint64_t v4 = 0;
    uint64_t v5 = 0;
    int v6 = 2;
  }
  else
  {
    uint64_t Value = AGGraphGetValue();
    char v3 = v2;
    uint64_t v4 = *(void *)Value;
    uint64_t v5 = *(void **)(Value + 8);
    int v6 = *(unsigned __int8 *)(Value + 16);
    outlined copy of AccessibilityAttachment.Tree(*(void *)Value, v5, v6);
    if (v3) {
      goto LABEL_12;
    }
  }
  if (!AGGraphGetOutputValue())
  {
LABEL_12:
    if (!v6)
    {
      swift_bridgeObjectRetain();
      goto LABEL_16;
    }
    if (v6 == 1)
    {
      uint64_t v9 = swift_bridgeObjectRetain();
      unint64_t v10 = specialized Sequence.compactMap<A>(_:)(v9);
      static AccessibilityChildBehavior.defaultCombine(childProperties:createsCustomActions:)((uint64_t)v10, 1, &v25);
      swift_bridgeObjectRelease();
      outlined consume of AccessibilityAttachment.Tree(v4, v5, 1);
LABEL_16:
      uint64_t v11 = swift_bridgeObjectRetain();
      uint64_t v12 = specialized AccessibilityProperties.subscript.getter(v11);
      swift_bridgeObjectRelease();
      uint64_t v13 = *(void *)(v12 + 16);
      swift_bridgeObjectRelease();
      type metadata accessor for AnyAccessibilityPropertiesEntry();
      Dictionary.init(minimumCapacity:)();
      uint64_t v14 = swift_bridgeObjectRetain();
      specialized AccessibilityProperties.subscript.getter(v14, (uint64_t)&v23);
      swift_bridgeObjectRelease();
      uint64_t v15 = v23;
      if (v23) {
        char v16 = 0;
      }
      else {
        char v16 = v24;
      }
      swift_bridgeObjectRetain();
      specialized AccessibilityProperties.subscript.setter(v15, v16);
      if (v13)
      {
        uint64_t v17 = swift_bridgeObjectRetain();
        uint64_t v18 = specialized AccessibilityProperties.subscript.getter(v17);
        swift_bridgeObjectRelease_n();
        uint64_t v19 = specialized Sequence.compactMap<A>(_:)(v18, 0, 0, 0, 0);
        swift_bridgeObjectRelease();
        specialized AccessibilityProperties.subscript.setter((uint64_t)v19);
      }
      else
      {
        swift_bridgeObjectRelease();
      }
      AccessibilityAttachment.init(properties:)();
      uint64_t v20 = v25;
      uint64_t v21 = v26;
      _s7SwiftUI10MutableBoxCyAA23AccessibilityAttachmentVGMaTm_1(0, (unint64_t *)&lazy cache variable for type metadata for MutableBox<AccessibilityAttachment>, MEMORY[0x1E4F40A58], MEMORY[0x1E4F3F398]);
      uint64_t v22 = swift_allocObject();
      *(void *)(v22 + 16) = v20;
      *(void *)(v22 + 24) = v21;
      uint64_t v25 = v22;
      uint64_t v26 = 0;
      AGGraphSetOutputValue();
      outlined consume of AccessibilityAttachment.Tree(v4, v5, v6);
      swift_bridgeObjectRelease();
      goto LABEL_24;
    }
    AccessibilityAttachment.init()();
LABEL_6:
    uint64_t v7 = v26;
    _s7SwiftUI10MutableBoxCyAA23AccessibilityAttachmentVGMaTm_1(0, (unint64_t *)&lazy cache variable for type metadata for MutableBox<AccessibilityAttachment>, MEMORY[0x1E4F40A58], MEMORY[0x1E4F3F398]);
    uint64_t v8 = swift_allocObject();
    *(void *)(v8 + 16) = v25;
    *(void *)(v8 + 24) = v7;
    uint64_t v25 = v8;
    uint64_t v26 = 0;
    AGGraphSetOutputValue();
LABEL_24:
    swift_release();
    return;
  }

  outlined consume of AccessibilityAttachment.Tree(v4, v5, v6);
}

unsigned char *protocol witness for Rule.value.getter in conformance ResolvedPresentation@<X0>(unsigned char *a1@<X8>)
{
  _s7SwiftUI10MutableBoxCyAA23AccessibilityAttachmentVGMaTm_1(0, &lazy cache variable for type metadata for AccessibilityLabeledContentPresentation?, (uint64_t)&type metadata for AccessibilityLabeledContentPresentation, MEMORY[0x1E4FBB718]);
  unint64_t result = (unsigned char *)AGGraphGetValue();
  int v3 = *result;
  if (v3 == 2)
  {
    unint64_t result = (unsigned char *)AGGraphGetValue();
    char v4 = *result == 2;
  }
  else
  {
    char v4 = v3 & 1;
  }
  *a1 = v4;
  return result;
}

void type metadata accessor for AccessibilityPropertiesEntry<AccessibilityNullableOptionSet<AccessibilityTraitSet>>()
{
  if (!lazy cache variable for type metadata for AccessibilityPropertiesEntry<AccessibilityNullableOptionSet<AccessibilityTraitSet>>)
  {
    type metadata accessor for AccessibilityNullableOptionSet<AccessibilityTraitSet>();
    unint64_t v0 = type metadata accessor for AccessibilityPropertiesEntry();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for AccessibilityPropertiesEntry<AccessibilityNullableOptionSet<AccessibilityTraitSet>>);
    }
  }
}

void *type metadata accessor for ResolvedPresentation()
{
  return &unk_1ED431E78;
}

void *type metadata accessor for AccessibilityLabeledContentLabelModifier.Attachment()
{
  return &unk_1ED464660;
}

char *specialized Sequence.compactMap<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void (*v20)(long long *__return_ptr, _OWORD *, uint64_t, uint64_t);
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char *v25;
  long long v26;
  long long v27;
  uint64_t v29;
  uint64_t v30;
  long long v31;
  _OWORD v32[2];
  long long v33;
  _OWORD v34[2];
  long long v35;
  unsigned char v36[25];
  char *v37;

  *(void *)&unint64_t v31 = a2;
  *((void *)&v31 + 1) = a3;
  uint64_t v5 = *(void *)(a1 + 16);
  if (!v5) {
    return (char *)MEMORY[0x1E4FBC860];
  }
  uint64_t v8 = (void *)(a1 + 32);
  swift_bridgeObjectRetain();
  uint64_t v9 = (char *)MEMORY[0x1E4FBC860];
  uint64_t v29 = a4;
  long long v30 = a5;
  do
  {
    long long v37 = v9;
    int v33 = v31;
    *(void *)&v34[0] = a4;
    *((void *)&v34[0] + 1) = a5;
    uint64_t v11 = v8[3];
    uint64_t v10 = v8[4];
    __swift_project_boxed_opaque_existential_1(v8, v11);
    uint64_t v12 = *(uint64_t (**)(long long *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(v10 + 80);
    unint64_t v13 = lazy protocol witness table accessor for type AccessibilityVoidAction and conformance AccessibilityVoidAction();
    if (v12(&v33, &type metadata for AccessibilityVoidAction, v13, v11, v10))
    {
      uint64_t v14 = v8[3];
      uint64_t v15 = v8[4];
      __swift_project_boxed_opaque_existential_1(v8, v14);
      (*(void (**)(long long *__return_ptr, uint64_t, uint64_t))(v15 + 24))(&v33, v14, v15);
      long long v16 = v33;
      long long v17 = v34[0];
      uint64_t v18 = v8[3];
      uint64_t v19 = v8[4];
      __swift_project_boxed_opaque_existential_1(v8, v18);
      v32[0] = v16;
      v32[1] = v17;
      uint64_t v20 = *(void (**)(long long *__return_ptr, _OWORD *, uint64_t, uint64_t))(v19 + 64);
      uint64_t v21 = v18;
      uint64_t v22 = v19;
      a4 = v29;
      a5 = v30;
      v20(&v35, v32, v21, v22);
      outlined consume of AccessibilityActionCategory?(v16, *((uint64_t *)&v16 + 1), v17, *((unint64_t *)&v17 + 1));
      if (!*(void *)&v36[8])
      {
        outlined destroy of AnyAccessibilityAction?((uint64_t)&v35);
        uint64_t v9 = v37;
        goto LABEL_3;
      }
    }
    else
    {
      outlined init with copy of AnyAccessibilityAction((uint64_t)v8, (uint64_t)&v35);
    }
    int v33 = v35;
    v34[0] = *(_OWORD *)v36;
    *(_OWORD *)((char *)v34 + 9) = *(_OWORD *)&v36[9];
    uint64_t v9 = v37;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v9 + 2) + 1, 1, v9);
    }
    char v24 = *((void *)v9 + 2);
    uint64_t v23 = *((void *)v9 + 3);
    if (v24 >= v23 >> 1) {
      uint64_t v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v23 > 1), v24 + 1, 1, v9);
    }
    *((void *)v9 + 2) = v24 + 1;
    uint64_t v25 = &v9[48 * v24];
    uint64_t v26 = v33;
    uint64_t v27 = v34[0];
    *(_OWORD *)(v25 + 57) = *(_OWORD *)((char *)v34 + 9);
    *((_OWORD *)v25 + 2) = v26;
    *((_OWORD *)v25 + 3) = v27;
LABEL_3:
    v8 += 6;
    --v5;
  }
  while (v5);
  swift_bridgeObjectRelease();
  return v9;
}

uint64_t outlined consume of AccessibilityActionCategory?(uint64_t result, uint64_t a2, char a3, unint64_t a4)
{
  if (a4 != 2) {
    return outlined consume of AccessibilityActionCategory.Category(result, a2, a3, a4);
  }
  return result;
}

uint64_t ViewTraitCollection.insertInteraction(for:)(char a1)
{
  uint64_t v2 = 1;
  uint64_t result = ViewTraitCollection.value<A>(for:defaultValue:)();
  if (v5) {
    return v2;
  }
  if (!__OFADD__(v4, a1 & 1))
  {
    ViewTraitCollection.value<A>(for:defaultValue:)();
    return v4;
  }
  __break(1u);
  return result;
}

uint64_t DynamicViewContent.dropDestination<A>(for:action:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  unint64_t v13 = (void *)swift_allocObject();
  v13[2] = a4;
  v13[3] = a5;
  v13[4] = a6;
  v13[5] = a7;
  v13[6] = a2;
  v13[7] = a3;
  swift_retain();
  v16[0] = static Transferable.readableContentTypes.getter();
  v16[1] = partial apply for closure #1 in DynamicViewContent.dropDestination<A>(for:action:);
  void v16[2] = v13;
  type metadata accessor for _TraitWritingModifier<OnInsertTraitKey>();
  MEMORY[0x18C113660](v16, a4, v14, *(void *)(a6 + 8));
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t closure #1 in DynamicViewContent.dropDestination<A>(for:action:)(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v51 = a5;
  uint64_t v52 = a7;
  uint64_t v44 = a3;
  uint64_t v13 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v50 = *(void *)(v13 - 8);
  MEMORY[0x1F4188790](v13);
  uint64_t v48 = (char *)&v41 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for DispatchQoS();
  uint64_t v47 = *(void *)(v15 - 8);
  MEMORY[0x1F4188790](v15);
  long long v46 = (char *)&v41 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  dispatch_group_t v17 = dispatch_group_create();
  uint64_t v56 = static Array._allocateUninitialized(_:)();
  type metadata accessor for Array();
  AtomicBox.init(wrappedValue:)();
  uint64_t v18 = aBlock[0];
  unint64_t v54 = a2;
  if (a2 >> 62)
  {
    swift_bridgeObjectRetain();
    a2 = v54;
    uint64_t result = _CocoaArrayWrapper.endIndex.getter();
  }
  else
  {
    uint64_t v19 = *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    uint64_t result = v19;
  }
  uint64_t v49 = v15;
  uint64_t v45 = a1;
  if (!result)
  {
    swift_bridgeObjectRelease();
LABEL_13:
    uint64_t v34 = v50;
    type metadata accessor for OS_dispatch_queue();
    unint64_t v35 = (void *)static OS_dispatch_queue.main.getter();
    long long v36 = (void *)swift_allocObject();
    v36[2] = v51;
    v36[3] = a6;
    v36[4] = v52;
    v36[5] = a8;
    v36[6] = v44;
    v36[7] = a4;
    uint64_t v37 = v45;
    v36[8] = v18;
    v36[9] = v37;
    aBlock[4] = partial apply for closure #2 in closure #1 in DynamicViewContent.dropDestination<A>(for:action:);
    aBlock[5] = v36;
    aBlock[0] = MEMORY[0x1E4F143A8];
    aBlock[1] = 1107296256;
    aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
    aBlock[3] = &block_descriptor_31;
    long long v38 = _Block_copy(aBlock);
    swift_retain();
    swift_retain();
    uint64_t v39 = v46;
    static DispatchQoS.unspecified.getter();
    uint64_t v56 = MEMORY[0x1E4FBC860];
    lazy protocol witness table accessor for type _TraitWritingModifier<OnInsertTraitKey> and conformance _TraitWritingModifier<A>((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, MEMORY[0x1E4FBCB00]);
    _s22UniformTypeIdentifiers6UTTypeVSgMaTm_2(0, (unint64_t *)&lazy cache variable for type metadata for [DispatchWorkItemFlags], MEMORY[0x1E4FBCB00], MEMORY[0x1E4FBB320]);
    lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
    uint64_t v40 = v48;
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_group.notify(qos:flags:queue:execute:)();
    _Block_release(v38);
    swift_release();

    (*(void (**)(char *, uint64_t))(v34 + 8))(v40, v13);
    (*(void (**)(char *, uint64_t))(v47 + 8))(v39, v49);
    return swift_release();
  }
  if (result >= 1)
  {
    uint64_t v42 = a4;
    uint64_t v43 = v13;
    uint64_t v53 = result;
    uint64_t v21 = 0;
    if ((a2 & 0xC000000000000001) != 0)
    {
      uint64_t v23 = v51;
      uint64_t v22 = v52;
      do
      {
        MEMORY[0x18C117680](v21++, a2);
        dispatch_group_enter(v17);
        char v24 = (void *)swift_allocObject();
        void v24[2] = v23;
        void v24[3] = a6;
        v24[4] = v22;
        v24[5] = a8;
        v24[6] = v17;
        v24[7] = v18;
        swift_retain();
        uint64_t v25 = v17;
        uint64_t v26 = NSItemProvider.loadTransferable<A>(type:completionHandler:)();
        a2 = v54;
        swift_unknownObjectRelease();

        swift_release();
      }
      while (v53 != v21);
    }
    else
    {
      uint64_t v28 = v51;
      uint64_t v27 = v52;
      do
      {
        uint64_t v29 = *(void **)(a2 + 8 * v21++ + 32);
        id v30 = v29;
        dispatch_group_enter(v17);
        unint64_t v31 = (void *)swift_allocObject();
        _OWORD v31[2] = v28;
        v31[3] = a6;
        v31[4] = v27;
        v31[5] = a8;
        v31[6] = v17;
        v31[7] = v18;
        swift_retain();
        long long v32 = v17;
        int v33 = NSItemProvider.loadTransferable<A>(type:completionHandler:)();

        a2 = v54;
        swift_release();
      }
      while (v53 != v21);
    }
    swift_bridgeObjectRelease();
    a4 = v42;
    uint64_t v13 = v43;
    goto LABEL_13;
  }
  __break(1u);
  return result;
}

uint64_t sub_187BF2C10()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in DynamicViewContent.dropDestination<A>(for:action:)(uint64_t a1, unint64_t a2)
{
  return closure #1 in DynamicViewContent.dropDestination<A>(for:action:)(a1, a2, v2[6], v2[7], v2[2], v2[3], v2[4], v2[5]);
}

void type metadata accessor for _TraitWritingModifier<OnInsertTraitKey>()
{
  if (!lazy cache variable for type metadata for _TraitWritingModifier<OnInsertTraitKey>)
  {
    unint64_t v0 = type metadata accessor for _TraitWritingModifier();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _TraitWritingModifier<OnInsertTraitKey>);
    }
  }
}

void closure #1 in closure #1 in DynamicViewContent.dropDestination<A>(for:action:)(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = *(void *)(a5 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v11 = (char *)&v33[-1] - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v12);
  uint64_t v14 = (char *)&v33[-1] - v13;
  type metadata accessor for Error();
  uint64_t v15 = type metadata accessor for Result();
  double v16 = MEMORY[0x1F4188790](v15);
  uint64_t v18 = (void **)((char *)&v33[-1] - v17);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v19 + 16))((char *)&v33[-1] - v17, a1, v15, v16);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v20 = *v18;
    os_log_type_t v21 = static os_log_type_t.fault.getter();
    uint64_t v22 = static Log.runtimeIssuesLog.getter();
    if (os_log_type_enabled(v22, v21))
    {
      id v23 = v20;
      id v24 = v20;
      uint64_t v25 = swift_slowAlloc();
      uint64_t v26 = swift_slowAlloc();
      v33[0] = v26;
      *(_DWORD *)uint64_t v25 = 136315394;
      uint64_t v27 = _typeName(_:qualified:)();
      uint64_t v34 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v27, v28, v33);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v25 + 12) = 2080;
      swift_getErrorValue();
      uint64_t v29 = Error.localizedDescription.getter();
      uint64_t v34 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v29, v30, v33);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_1872C6000, v22, v21, "Error loading %s: %s", (uint8_t *)v25, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x18C119C60](v26, -1, -1);
      MEMORY[0x18C119C60](v25, -1, -1);
    }
    else
    {
    }
  }
  else
  {
    (*(void (**)(char *, void **, uint64_t))(v9 + 32))(v14, v18, a5);
    (*(void (**)(char *, char *, uint64_t))(v9 + 16))(v11, v14, a5);
    uint64_t v34 = a3;
    swift_retain();
    type metadata accessor for Array();
    type metadata accessor for AtomicBox();
    unint64_t v31 = (void (*)(uint64_t *, void))AtomicBox.wrappedValue.modify();
    Array.append(_:)();
    v31(v33, 0);
    swift_release();
    (*(void (**)(char *, uint64_t))(v9 + 8))(v14, a5);
  }
  dispatch_group_leave(a2);
}

uint64_t closure #2 in closure #1 in DynamicViewContent.dropDestination<A>(for:action:)(void (*a1)(uint64_t, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  type metadata accessor for Array();
  type metadata accessor for AtomicBox();
  AtomicBox.wrappedValue.getter();
  a1(v7, a4);
  return swift_bridgeObjectRelease();
}

void DynamicViewContent.dropDestination<A>(for:action:isTargeted:)()
{
}

uint64_t DynamicViewContent.onInsert(of:perform:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v9[0] = a1;
  v9[1] = a2;
  void v9[2] = a3;
  type metadata accessor for _TraitWritingModifier<OnInsertTraitKey>();
  return MEMORY[0x18C113660](v9, a4, v7, *(void *)(a5 + 8));
}

uint64_t DynamicViewContent.onInsert(of:perform:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  _s22UniformTypeIdentifiers6UTTypeVSgMaTm_2(0, (unint64_t *)&lazy cache variable for type metadata for UTType?, MEMORY[0x1E4FBCEA8], MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v13 - 8);
  uint64_t v15 = (char *)v34 - v14;
  uint64_t v16 = type metadata accessor for UTType();
  MEMORY[0x1F4188790](v16);
  uint64_t v43 = (char *)v34 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v18);
  uint64_t v42 = (char *)v34 - v20;
  uint64_t v21 = *(void *)(a1 + 16);
  if (v21)
  {
    uint64_t v35 = a2;
    uint64_t v36 = a3;
    uint64_t v37 = a6;
    uint64_t v38 = a5;
    uint64_t v39 = a4;
    uint64_t v40 = v6;
    uint64_t v22 = (unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48);
    uint64_t v41 = v19;
    id v23 = (void (**)(char *, char *, uint64_t))(v19 + 32);
    swift_bridgeObjectRetain();
    v34[1] = a1;
    uint64_t v24 = a1 + 40;
    uint64_t v25 = (char *)MEMORY[0x1E4FBC860];
    do
    {
      swift_bridgeObjectRetain();
      UTType.init(_:)();
      if ((*v22)(v15, 1, v16) == 1)
      {
        outlined destroy of UTType?((uint64_t)v15);
      }
      else
      {
        uint64_t v26 = *v23;
        uint64_t v27 = v42;
        (*v23)(v42, v15, v16);
        v26(v43, v27, v16);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v25 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v25 + 2) + 1, 1, v25);
        }
        unint64_t v29 = *((void *)v25 + 2);
        unint64_t v28 = *((void *)v25 + 3);
        uint64_t v30 = v41;
        if (v29 >= v28 >> 1)
        {
          uint64_t v31 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v28 > 1, v29 + 1, 1, v25);
          uint64_t v30 = v41;
          uint64_t v25 = (char *)v31;
        }
        *((void *)v25 + 2) = v29 + 1;
        v26(&v25[((*(unsigned __int8 *)(v30 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v30 + 80))+ *(void *)(v30 + 72) * v29], v43, v16);
      }
      v24 += 16;
      --v21;
    }
    while (v21);
    swift_bridgeObjectRelease();
    a4 = v39;
    a5 = v38;
    a2 = v35;
    a3 = v36;
  }
  else
  {
    uint64_t v25 = (char *)MEMORY[0x1E4FBC860];
  }
  v44[0] = v25;
  v44[1] = a2;
  v44[2] = a3;
  type metadata accessor for _TraitWritingModifier<OnInsertTraitKey>();
  MEMORY[0x18C113660](v44, a4, v32, *(void *)(a5 + 8));
  return swift_bridgeObjectRelease();
}

Swift::Void __swiftcall OnInsertInteraction.insert(_:)(Swift::OpaquePointer a1)
{
  char v5 = v4;
  if (v1)
  {
    uint64_t v6 = v3;
    uint64_t v7 = v2;
    uint64_t v8 = v1;
    uint64_t v10 = (Swift::OpaquePointer *)swift_allocObject();
    v10[2]._rawuint64_t Value = (void *)v8;
    v10[3]._rawuint64_t Value = v7;
    v10[4]._rawuint64_t Value = v6;
    v10[5]._rawuint64_t Value = (void *)v8;
    v10[6]._rawuint64_t Value = v7;
    v10[7]._rawuint64_t Value = v6;
    v10[8]._rawuint64_t Value = v5;
    v10[9]._rawuint64_t Value = a1._rawValue;
    outlined copy of PasteHelper?(v8);
    outlined copy of PasteHelper?(v8);
    swift_bridgeObjectRetain();
    swift_retain();
    swift_bridgeObjectRetain();
    static Update.enqueueAction(_:)();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
  }
  else
  {
    _StringGuts.grow(_:)(76);
    v11._countAndFlagsBits = 0xD000000000000027;
    v11._object = (void *)0x8000000188334830;
    String.append(_:)(v11);
    v12._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v12);
    swift_bridgeObjectRelease();
    v13._object = (void *)0x8000000188334860;
    v13._countAndFlagsBits = 0xD000000000000023;
    String.append(_:)(v13);
    MEMORY[0x18C112B90](0, 0xE000000000000000);
    swift_bridgeObjectRelease();
  }
}

uint64_t sub_187BF3668()
{
  return swift_getWitnessTable();
}

uint64_t sub_187BF3708()
{
  return MEMORY[0x1E4F417F0];
}

uint64_t sub_187BF3714()
{
  return swift_getWitnessTable();
}

ValueMetadata *type metadata accessor for OnInsertConfiguration()
{
  return &type metadata for OnInsertConfiguration;
}

ValueMetadata *type metadata accessor for OnInsertTraitKey()
{
  return &type metadata for OnInsertTraitKey;
}

uint64_t sub_187BF37D8()
{
  swift_release();
  swift_release();

  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in closure #1 in DynamicViewContent.dropDestination<A>(for:action:)()
{
  return closure #2 in closure #1 in DynamicViewContent.dropDestination<A>(for:action:)(*(void (**)(uint64_t, uint64_t))(v0 + 48), *(void *)(v0 + 56), *(void *)(v0 + 64), *(void *)(v0 + 72));
}

uint64_t lazy protocol witness table accessor for type _TraitWritingModifier<OnInsertTraitKey> and conformance _TraitWritingModifier<A>(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void partial apply for closure #1 in closure #1 in DynamicViewContent.dropDestination<A>(for:action:)(uint64_t a1)
{
  closure #1 in closure #1 in DynamicViewContent.dropDestination<A>(for:action:)(a1, *(NSObject **)(v1 + 48), *(void *)(v1 + 56), *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_187BF3888()
{
  swift_bridgeObjectRelease();
  swift_release();
  if (*(void *)(v0 + 40))
  {
    swift_bridgeObjectRelease();
    swift_release();
  }
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in OnInsertInteraction.insert(_:)()
{
  return (*(uint64_t (**)(void, void))(v0 + 24))(*(void *)(v0 + 64), *(void *)(v0 + 72));
}

ValueMetadata *type metadata accessor for IndexView()
{
  return &type metadata for IndexView;
}

uint64_t associated type witness table accessor for View.Body : View in IndexView()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance IndexView(long long *a1)
{
  int v1 = *((_DWORD *)a1 + 4);
  uint64_t v2 = *((void *)a1 + 3);
  long long v5 = *a1;
  int v6 = v1;
  uint64_t v7 = v2;
  unint64_t v3 = lazy protocol witness table accessor for type IndexViewBody and conformance IndexViewBody();
  return (*(uint64_t (**)(long long *))(v3 + 40))(&v5);
}

uint64_t protocol witness for View.body.getter in conformance IndexView@<X0>(void *a1@<X8>)
{
  uint64_t v3 = *v1;
  uint64_t v4 = v1[1];
  uint64_t v5 = v1[2];
  outlined init with copy of _VariadicView_Children((uint64_t)(v1 + 3), (uint64_t)(a1 + 3));
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v5;
  swift_retain();

  return swift_retain();
}

uint64_t NewDocumentButton.body.getter@<X0>(_WORD *a1@<X8>)
{
  *a1 = 256;
  type metadata accessor for Button<Text>();
  uint64_t v4 = v3;
  uint64_t v5 = (void *)((char *)a1 + *(int *)(v3 + 36));
  *uint64_t v5 = destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
  v5[1] = 0;
  type metadata accessor for ButtonAction();
  swift_storeEnumTagMultiPayload();
  closure #2 in NewDocumentButton.body.getter(v1, (uint64_t)a1 + *(int *)(v4 + 40));
  type metadata accessor for ModifiedContent<Button<Text>, PlatformNewDocumentButtonModifier>();
  uint64_t v7 = (uint64_t)a1 + *(int *)(v6 + 36);

  return outlined init with copy of TableColumnList((uint64_t)(v1 + 4), v7);
}

uint64_t closure #2 in NewDocumentButton.body.getter@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  uint64_t v5 = a1[2];
  uint64_t v6 = a1[3];
  if (v6)
  {
    char v7 = v5 & 1;
    uint64_t v8 = *a1;
    uint64_t v9 = v4;
    uint64_t v10 = v6;
  }
  else
  {
    LocalizedStringKey.init(stringLiteral:)();
    uint64_t v8 = Text.init(_:tableName:bundle:comment:)();
    char v7 = v11 & 1;
  }
  *(void *)a2 = v8;
  *(void *)(a2 + 8) = v9;
  *(unsigned char *)(a2 + 16) = v7;
  *(void *)(a2 + 24) = v10;

  return outlined copy of Text?(v3, v4, v5, v6);
}

void type metadata accessor for Button<Text>()
{
  if (!lazy cache variable for type metadata for Button<Text>)
  {
    unint64_t v0 = type metadata accessor for Button();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Button<Text>);
    }
  }
}

void type metadata accessor for ModifiedContent<Button<Text>, PlatformNewDocumentButtonModifier>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<Button<Text>, PlatformNewDocumentButtonModifier>)
  {
    type metadata accessor for Button<Text>();
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<Button<Text>, PlatformNewDocumentButtonModifier>);
    }
  }
}

uint64_t makeStrategy(contentType:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = type metadata accessor for UTType();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  char v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v8);
  uint64_t v10 = (char *)&v17 - v9;
  _s22UniformTypeIdentifiers6UTTypeVSgMaTm_3(0, (unint64_t *)&lazy cache variable for type metadata for UTType?, MEMORY[0x1E4FBCEA8]);
  MEMORY[0x1F4188790](v11 - 8);
  Swift::String v13 = (char *)&v17 - v12;
  outlined init with copy of UTType?(a1, (uint64_t)&v17 - v12);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v13, 1, v4) == 1)
  {
    uint64_t v19 = 0;
    long long v17 = 0u;
    long long v18 = 0u;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v10, v13, v4);
    (*(void (**)(char *, char *, uint64_t))(v5 + 16))(v7, v10, v4);
    *((void *)&v18 + 1) = type metadata accessor for ContentTypeDocumentCreationStrategy(0);
    uint64_t v19 = lazy protocol witness table accessor for type DefaultDocumentCreationStrategy and conformance DefaultDocumentCreationStrategy(&lazy protocol witness table cache variable for type ContentTypeDocumentCreationStrategy and conformance ContentTypeDocumentCreationStrategy, (void (*)(uint64_t))type metadata accessor for ContentTypeDocumentCreationStrategy);
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v17);
    ContentTypeDocumentCreationStrategy.init(_:)((uint64_t)v7, (unint64_t *)boxed_opaque_existential_1);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v10, v4);
    if (*((void *)&v18 + 1)) {
      return outlined init with take of OptionalBinaryInteger(&v17, (uint64_t)a2);
    }
  }
  a2[3] = type metadata accessor for DefaultDocumentCreationStrategy(0);
  a2[4] = lazy protocol witness table accessor for type DefaultDocumentCreationStrategy and conformance DefaultDocumentCreationStrategy(&lazy protocol witness table cache variable for type DefaultDocumentCreationStrategy and conformance DefaultDocumentCreationStrategy, (void (*)(uint64_t))type metadata accessor for DefaultDocumentCreationStrategy);
  uint64_t v16 = __swift_allocate_boxed_opaque_existential_1(a2);
  DefaultDocumentCreationStrategy.init()((unint64_t *)v16);
  return _s7SwiftUI24DocumentCreationStrategy_pSgWOhTm_0((uint64_t)&v17, (unint64_t *)&lazy cache variable for type metadata for DocumentCreationStrategy?, (void (*)(uint64_t))type metadata accessor for DocumentCreationStrategy);
}

uint64_t _s7SwiftUI24DocumentCreationStrategy_pSgWOhTm_0(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  _s22UniformTypeIdentifiers6UTTypeVSgMaTm_3(0, a2, a3);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  return a1;
}

uint64_t NewDocumentButton<>.init(_:contentType:)@<X0>(uint64_t a1@<X4>, uint64_t *a2@<X8>)
{
  uint64_t v4 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v6 = v5;
  uint64_t v8 = v7;
  uint64_t v10 = v9 & 1;
  makeStrategy(contentType:)(a1, (uint64_t *)v12);
  _s7SwiftUI24DocumentCreationStrategy_pSgWOhTm_0(a1, (unint64_t *)&lazy cache variable for type metadata for UTType?, MEMORY[0x1E4FBCEA8]);
  *a2 = v4;
  a2[1] = v6;
  a2[2] = v10;
  a2[3] = v8;
  return outlined init with take of OptionalBinaryInteger(v12, (uint64_t)(a2 + 4));
}

uint64_t NewDocumentButton<>.init<A>(_:contentType:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8 = *(void *)(a3 - 8);
  double v9 = MEMORY[0x1F4188790](a1);
  (*(void (**)(char *, uint64_t, double))(v8 + 16))((char *)&v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v9);
  uint64_t v11 = Text.init<A>(_:)();
  uint64_t v13 = v12;
  uint64_t v15 = v14;
  uint64_t v17 = v16 & 1;
  makeStrategy(contentType:)(a2, (uint64_t *)v20);
  _s7SwiftUI24DocumentCreationStrategy_pSgWOhTm_0(a2, (unint64_t *)&lazy cache variable for type metadata for UTType?, MEMORY[0x1E4FBCEA8]);
  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(a1, a3);
  *a4 = v11;
  a4[1] = v13;
  a4[2] = v17;
  a4[3] = v15;
  return outlined init with take of OptionalBinaryInteger(v20, (uint64_t)(a4 + 4));
}

uint64_t NewDocumentButton<>.init<A>(_:for:contentType:prepareDocument:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, void *a8@<X8>, uint64_t a9, uint64_t a10)
{
  uint64_t v24 = a3;
  uint64_t v25 = a4;
  char v16 = (void (*)(uint64_t))MEMORY[0x1E4FBCEA8];
  _s22UniformTypeIdentifiers6UTTypeVSgMaTm_3(0, (unint64_t *)&lazy cache variable for type metadata for UTType?, MEMORY[0x1E4FBCEA8]);
  MEMORY[0x1F4188790](v17 - 8);
  uint64_t v19 = (char *)&v23 - v18;
  outlined init with copy of UTType?(a5, (uint64_t)&v23 - v18);
  uint64_t v27 = type metadata accessor for FileDocumentCreationStrategy();
  uint64_t WitnessTable = swift_getWitnessTable();
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v26);
  FileDocumentCreationStrategy.init(contentType:prepareDocument:)((uint64_t)v19, a6, a7, a9, a10, boxed_opaque_existential_1);
  _s7SwiftUI24DocumentCreationStrategy_pSgWOhTm_0(a5, (unint64_t *)&lazy cache variable for type metadata for UTType?, v16);
  *a8 = a1;
  a8[1] = a2;
  uint64_t v21 = v25;
  a8[2] = v24;
  a8[3] = v21;
  return outlined init with take of OptionalBinaryInteger(&v26, (uint64_t)(a8 + 4));
}

uint64_t NewDocumentButton<>.init<A>(_:for:contentType:prepareDocument:)@<X0>(uint64_t a1@<X5>, uint64_t a2@<X6>, uint64_t a3@<X7>, uint64_t *a4@<X8>, uint64_t a5, uint64_t a6)
{
  uint64_t v21 = a2;
  uint64_t v22 = a3;
  uint64_t v8 = (void (*)(uint64_t))MEMORY[0x1E4FBCEA8];
  _s22UniformTypeIdentifiers6UTTypeVSgMaTm_3(0, (unint64_t *)&lazy cache variable for type metadata for UTType?, MEMORY[0x1E4FBCEA8]);
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v11 = (char *)&v21 - v10;
  uint64_t v12 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v14 = v13;
  uint64_t v16 = v15;
  uint64_t v18 = v17 & 1;
  outlined init with copy of UTType?(a1, (uint64_t)v11);
  uint64_t v24 = type metadata accessor for FileDocumentCreationStrategy();
  uint64_t WitnessTable = swift_getWitnessTable();
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v23);
  FileDocumentCreationStrategy.init(contentType:prepareDocument:)((uint64_t)v11, v21, v22, a5, a6, boxed_opaque_existential_1);
  _s7SwiftUI24DocumentCreationStrategy_pSgWOhTm_0(a1, (unint64_t *)&lazy cache variable for type metadata for UTType?, v8);
  *a4 = v12;
  a4[1] = v14;
  a4[2] = v18;
  a4[3] = v16;
  return outlined init with take of OptionalBinaryInteger(&v23, (uint64_t)(a4 + 4));
}

uint64_t NewDocumentButton<>.init<A, B>(_:for:contentType:prepareDocument:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t *a8@<X8>)
{
  uint64_t v35 = a7;
  uint64_t v36 = a3;
  uint64_t v37 = a4;
  uint64_t v34 = a1;
  uint64_t v13 = (void (*)(uint64_t))MEMORY[0x1E4FBCEA8];
  _s22UniformTypeIdentifiers6UTTypeVSgMaTm_3(0, (unint64_t *)&lazy cache variable for type metadata for UTType?, MEMORY[0x1E4FBCEA8]);
  MEMORY[0x1F4188790](v14 - 8);
  uint64_t v16 = (char *)&v31 - v15;
  uint64_t v17 = *(void *)(a6 - 8);
  double v19 = MEMORY[0x1F4188790](v18);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v17 + 16))((char *)&v31 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0), a1, a6, v19);
  uint64_t v21 = Text.init<A>(_:)();
  uint64_t v23 = v22;
  uint64_t v32 = v24 & 1;
  uint64_t v33 = v25;
  uint64_t v26 = a2;
  outlined init with copy of UTType?(a2, (uint64_t)v16);
  uint64_t v27 = v35;
  uint64_t v39 = type metadata accessor for FileDocumentCreationStrategy();
  uint64_t WitnessTable = swift_getWitnessTable();
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v38);
  FileDocumentCreationStrategy.init(contentType:prepareDocument:)((uint64_t)v16, v36, v37, a5, v27, boxed_opaque_existential_1);
  _s7SwiftUI24DocumentCreationStrategy_pSgWOhTm_0(v26, (unint64_t *)&lazy cache variable for type metadata for UTType?, v13);
  (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v34, a6);
  *a8 = v21;
  a8[1] = v23;
  uint64_t v29 = v33;
  a8[2] = v32;
  a8[3] = v29;
  return outlined init with take of OptionalBinaryInteger(&v38, (uint64_t)(a8 + 4));
}

{
  void (*v12)(uint64_t);
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  long long v37;
  uint64_t v38;
  uint64_t WitnessTable;

  uint64_t v35 = a7;
  uint64_t v36 = a3;
  uint64_t v33 = a5;
  uint64_t v34 = a2;
  uint64_t v32 = a1;
  uint64_t v12 = (void (*)(uint64_t))MEMORY[0x1E4FBCEA8];
  _s22UniformTypeIdentifiers6UTTypeVSgMaTm_3(0, (unint64_t *)&lazy cache variable for type metadata for UTType?, MEMORY[0x1E4FBCEA8]);
  MEMORY[0x1F4188790](v13 - 8);
  uint64_t v15 = (char *)&v30 - v14;
  uint64_t v16 = *(void *)(a6 - 8);
  uint64_t v18 = MEMORY[0x1F4188790](v17);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v16 + 16))((char *)&v30 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0), a1, a6, v18);
  uint64_t v20 = Text.init<A>(_:)();
  uint64_t v22 = v21;
  uint64_t v30 = v23 & 1;
  uint64_t v31 = v24;
  uint64_t v25 = type metadata accessor for ReferenceFileDocumentCreationStrategy();
  uint64_t v26 = v34;
  outlined init with copy of UTType?(v34, (uint64_t)v15);
  swift_retain();
  uint64_t v27 = ReferenceFileDocumentCreationStrategy.__allocating_init(contentType:prepareDocument:)((uint64_t)v15, v36, a4);
  long long v38 = v25;
  uint64_t WitnessTable = swift_getWitnessTable();
  swift_release();
  *(void *)&uint64_t v37 = v27;
  _s7SwiftUI24DocumentCreationStrategy_pSgWOhTm_0(v26, (unint64_t *)&lazy cache variable for type metadata for UTType?, v12);
  (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v32, a6);
  *a8 = v20;
  a8[1] = v22;
  unint64_t v28 = v31;
  a8[2] = v30;
  a8[3] = v28;
  return outlined init with take of OptionalBinaryInteger(&v37, (uint64_t)(a8 + 4));
}

uint64_t NewDocumentButton<>.init<A>(_:for:contentType:prepareDocument:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, void *a8@<X8>)
{
  uint64_t v23 = a3;
  uint64_t v24 = a4;
  uint64_t v14 = (void (*)(uint64_t))MEMORY[0x1E4FBCEA8];
  _s22UniformTypeIdentifiers6UTTypeVSgMaTm_3(0, (unint64_t *)&lazy cache variable for type metadata for UTType?, MEMORY[0x1E4FBCEA8]);
  MEMORY[0x1F4188790](v15 - 8);
  uint64_t v17 = (char *)&v22 - v16;
  uint64_t v18 = type metadata accessor for ReferenceFileDocumentCreationStrategy();
  outlined init with copy of UTType?(a5, (uint64_t)v17);
  swift_retain();
  uint64_t v19 = ReferenceFileDocumentCreationStrategy.__allocating_init(contentType:prepareDocument:)((uint64_t)v17, a6, a7);
  uint64_t v26 = v18;
  uint64_t WitnessTable = swift_getWitnessTable();
  swift_release();
  *(void *)&long long v25 = v19;
  _s7SwiftUI24DocumentCreationStrategy_pSgWOhTm_0(a5, (unint64_t *)&lazy cache variable for type metadata for UTType?, v14);
  *a8 = a1;
  a8[1] = a2;
  uint64_t v20 = v24;
  a8[2] = v23;
  a8[3] = v20;
  return outlined init with take of OptionalBinaryInteger(&v25, (uint64_t)(a8 + 4));
}

uint64_t NewDocumentButton<>.init<A>(_:for:contentType:prepareDocument:)@<X0>(uint64_t a1@<X5>, uint64_t a2@<X6>, uint64_t a3@<X7>, uint64_t *a4@<X8>)
{
  uint64_t v21 = a1;
  uint64_t v22 = a2;
  uint64_t v6 = (void (*)(uint64_t))MEMORY[0x1E4FBCEA8];
  _s22UniformTypeIdentifiers6UTTypeVSgMaTm_3(0, (unint64_t *)&lazy cache variable for type metadata for UTType?, MEMORY[0x1E4FBCEA8]);
  MEMORY[0x1F4188790](v7 - 8);
  uint64_t v9 = (char *)&v21 - v8;
  uint64_t v10 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v12 = v11;
  uint64_t v14 = v13;
  uint64_t v16 = v15 & 1;
  uint64_t v17 = type metadata accessor for ReferenceFileDocumentCreationStrategy();
  uint64_t v18 = v21;
  outlined init with copy of UTType?(v21, (uint64_t)v9);
  swift_retain();
  uint64_t v19 = ReferenceFileDocumentCreationStrategy.__allocating_init(contentType:prepareDocument:)((uint64_t)v9, v22, a3);
  uint64_t v24 = v17;
  uint64_t WitnessTable = swift_getWitnessTable();
  swift_release();
  *(void *)&long long v23 = v19;
  _s7SwiftUI24DocumentCreationStrategy_pSgWOhTm_0(v18, (unint64_t *)&lazy cache variable for type metadata for UTType?, v6);
  *a4 = v10;
  a4[1] = v12;
  a4[2] = v16;
  a4[3] = v14;
  return outlined init with take of OptionalBinaryInteger(&v23, (uint64_t)(a4 + 4));
}

uint64_t NewDocumentButton<>.init<A>(_:contentType:prepareDocumentURL:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t *a6@<X8>)
{
  uint64_t v30 = a3;
  uint64_t v31 = a4;
  _s22UniformTypeIdentifiers6UTTypeVSgMaTm_3(0, (unint64_t *)&lazy cache variable for type metadata for UTType?, MEMORY[0x1E4FBCEA8]);
  MEMORY[0x1F4188790](v10 - 8);
  uint64_t v12 = (char *)&v27 - v11;
  uint64_t v13 = *(void *)(a5 - 8);
  double v15 = MEMORY[0x1F4188790](v14);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v13 + 16))((char *)&v27 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0), a1, a5, v15);
  uint64_t v17 = Text.init<A>(_:)();
  uint64_t v19 = v18;
  uint64_t v28 = v20 & 1;
  uint64_t v29 = v21;
  uint64_t v22 = type metadata accessor for UTType();
  uint64_t v23 = *(void *)(v22 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v23 + 16))(v12, a2, v22);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v23 + 56))(v12, 0, 1, v22);
  uint64_t v33 = type metadata accessor for URLDocumentCreationStrategy(0);
  uint64_t v34 = lazy protocol witness table accessor for type DefaultDocumentCreationStrategy and conformance DefaultDocumentCreationStrategy(&lazy protocol witness table cache variable for type URLDocumentCreationStrategy and conformance URLDocumentCreationStrategy, (void (*)(uint64_t))type metadata accessor for URLDocumentCreationStrategy);
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v32);
  URLDocumentCreationStrategy.init(contentType:prepareDocument:)((uint64_t)v12, v30, v31, (unint64_t *)boxed_opaque_existential_1);
  (*(void (**)(uint64_t, uint64_t))(v23 + 8))(a2, v22);
  (*(void (**)(uint64_t, uint64_t))(v13 + 8))(a1, a5);
  *a6 = v17;
  a6[1] = v19;
  uint64_t v25 = v29;
  a6[2] = v28;
  a6[3] = v25;
  return outlined init with take of OptionalBinaryInteger(&v32, (uint64_t)(a6 + 4));
}

double static PlatformNewDocumentButtonModifier._makeView(modifier:inputs:body:)@<D0>(int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(uint64_t *__return_ptr)@<X2>, double *a4@<X8>)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  long long v5 = *(_OWORD *)(a2 + 48);
  long long v6 = *(_OWORD *)(a2 + 16);
  long long v20 = *(_OWORD *)(a2 + 32);
  long long v21 = v5;
  long long v7 = *(_OWORD *)(a2 + 48);
  long long v22 = *(_OWORD *)(a2 + 64);
  long long v8 = *(_OWORD *)(a2 + 16);
  v19[0] = *(_OWORD *)a2;
  v19[1] = v8;
  long long v15 = v20;
  long long v16 = v7;
  long long v17 = *(_OWORD *)(a2 + 64);
  int v9 = *a1;
  int v23 = *(_DWORD *)(a2 + 80);
  int v18 = *(_DWORD *)(a2 + 80);
  long long v13 = v19[0];
  long long v14 = v6;
  a3(&v11);
  *(void *)&long long v13 = v21;
  DWORD2(v13) = DWORD2(v21);
  if (PreferencesInputs.contains<A>(_:includeHostPreferences:)())
  {
    outlined retain of _ViewInputs((uint64_t)v19);
    lazy protocol witness table accessor for type _ViewInputs.PlatformItemFeaturesKey and conformance _ViewInputs.PlatformItemFeaturesKey();
    PropertyList.subscript.getter();
    outlined release of _ViewInputs((uint64_t)v19);
    if ((v13 & 8) != 0)
    {
      LODWORD(v13) = v9;
      type metadata accessor for _GraphValue<PlatformNewDocumentButtonModifier>();
      _GraphValue.value.getter();
      LODWORD(v13) = AGGraphCreateOffsetAttribute2();
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      lazy protocol witness table accessor for type PlatformNewDocumentButtonTransform.MakeTransform and conformance PlatformNewDocumentButtonTransform.MakeTransform();
      Attribute.init<A>(body:value:flags:update:)();
      _GraphValue.init(_:)();
      specialized static PlatformItemsModifier.transformPlatformItemsOutputs<A>(_:inputs:modifier:)((uint64_t)&v11, (uint64_t)v19);
    }
  }
  *(void *)a4 = v11;
  double result = v12;
  a4[1] = v12;
  return result;
}

void protocol witness for ViewModifier.body(content:) in conformance PlatformNewDocumentButtonModifier()
{
}

void protocol witness for ViewModifier.body(content:) in conformance PlatformNewDocumentButtonTransform()
{
}

id one-time initialization function for defaultAction()
{
  id result = objc_msgSend(self, sel_createDocumentActionWithIntent_, *MEMORY[0x1E4FB2838]);
  static _NewDocumentButton.defaultAction = (uint64_t)result;
  return result;
}

id static _NewDocumentButton.defaultAction.getter()
{
  if (one-time initialization token for defaultAction != -1) {
    swift_once();
  }
  unint64_t v0 = (void *)static _NewDocumentButton.defaultAction;

  return v0;
}

uint64_t _NewDocumentButton.body.getter@<X0>(_WORD *a1@<X8>)
{
  *a1 = 256;
  type metadata accessor for Button<Text>();
  uint64_t v3 = v2;
  uint64_t v4 = (void *)((char *)a1 + *(int *)(v2 + 36));
  *uint64_t v4 = destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
  v4[1] = 0;
  type metadata accessor for ButtonAction();
  swift_storeEnumTagMultiPayload();
  long long v5 = (char *)a1 + *(int *)(v3 + 40);
  lazy protocol witness table accessor for type String and conformance String();
  uint64_t result = Text.init<A>(_:)();
  *(void *)long long v5 = result;
  *((void *)v5 + 1) = v7;
  v5[16] = v8 & 1;
  *((void *)v5 + 3) = v9;
  return result;
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance _NewDocumentButton()
{
  return static ModifiedContent<>._viewListCount(inputs:)();
}

uint64_t protocol witness for View.body.getter in conformance _NewDocumentButton@<X0>(_WORD *a1@<X8>)
{
  *a1 = 256;
  type metadata accessor for Button<Text>();
  uint64_t v3 = v2;
  uint64_t v4 = (void *)((char *)a1 + *(int *)(v2 + 36));
  *uint64_t v4 = destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
  v4[1] = 0;
  type metadata accessor for ButtonAction();
  swift_storeEnumTagMultiPayload();
  long long v5 = (char *)a1 + *(int *)(v3 + 40);
  lazy protocol witness table accessor for type String and conformance String();
  uint64_t result = Text.init<A>(_:)();
  *(void *)long long v5 = result;
  *((void *)v5 + 1) = v7;
  v5[16] = v8 & 1;
  *((void *)v5 + 3) = v9;
  return result;
}

uint64_t associated type witness table accessor for View.Body : View in NewDocumentButton<A>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for View.Body : View in _NewDocumentButton()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t destroy for NewDocumentButton(uint64_t a1)
{
  if (*(void *)(a1 + 24))
  {
    outlined consume of Text.Storage(*(void *)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16));
    swift_bridgeObjectRelease();
  }

  return __swift_destroy_boxed_opaque_existential_1(a1 + 32);
}

uint64_t initializeWithCopy for NewDocumentButton(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    uint64_t v5 = *(void *)a2;
    uint64_t v6 = *(void *)(a2 + 8);
    char v7 = *(unsigned char *)(a2 + 16);
    outlined copy of Text.Storage(*(void *)a2, v6, v7);
    *(void *)a1 = v5;
    *(void *)(a1 + 8) = v6;
    *(unsigned char *)(a1 + 16) = v7;
    *(void *)(a1 + 24) = v4;
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v8 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v8;
  }
  long long v9 = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 56) = v9;
  (**(void (***)(uint64_t, uint64_t))(v9 - 8))(a1 + 32, a2 + 32);
  return a1;
}

uint64_t assignWithCopy for NewDocumentButton(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 24);
  if (*(void *)(a1 + 24))
  {
    if (v4)
    {
      uint64_t v5 = *(void *)a2;
      uint64_t v6 = *(void *)(a2 + 8);
      char v7 = *(unsigned char *)(a2 + 16);
      outlined copy of Text.Storage(*(void *)a2, v6, v7);
      uint64_t v8 = *(void *)a1;
      uint64_t v9 = *(void *)(a1 + 8);
      char v10 = *(unsigned char *)(a1 + 16);
      *(void *)a1 = v5;
      *(void *)(a1 + 8) = v6;
      *(unsigned char *)(a1 + 16) = v7;
      outlined consume of Text.Storage(v8, v9, v10);
      *(void *)(a1 + 24) = *(void *)(a2 + 24);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      outlined destroy of Text(a1);
      long long v14 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v14;
    }
  }
  else if (v4)
  {
    uint64_t v11 = *(void *)a2;
    uint64_t v12 = *(void *)(a2 + 8);
    char v13 = *(unsigned char *)(a2 + 16);
    outlined copy of Text.Storage(*(void *)a2, v12, v13);
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v12;
    *(unsigned char *)(a1 + 16) = v13;
    *(void *)(a1 + 24) = *(void *)(a2 + 24);
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v15 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v15;
  }
  __swift_assign_boxed_opaque_existential_1((uint64_t *)(a1 + 32), (uint64_t *)(a2 + 32));
  return a1;
}

uint64_t assignWithTake for NewDocumentButton(uint64_t a1, uint64_t a2)
{
  if (!*(void *)(a1 + 24)) {
    goto LABEL_5;
  }
  uint64_t v4 = *(void *)(a2 + 24);
  if (!v4)
  {
    outlined destroy of Text(a1);
LABEL_5:
    long long v9 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v9;
    goto LABEL_6;
  }
  char v5 = *(unsigned char *)(a2 + 16);
  uint64_t v6 = *(void *)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  char v8 = *(unsigned char *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(unsigned char *)(a1 + 16) = v5;
  outlined consume of Text.Storage(v6, v7, v8);
  *(void *)(a1 + 24) = v4;
  swift_bridgeObjectRelease();
LABEL_6:
  __swift_destroy_boxed_opaque_existential_1(a1 + 32);
  long long v10 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v10;
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  return a1;
}

uint64_t getEnumTagSinglePayload for NewDocumentButton(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 72)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 56);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for NewDocumentButton(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 72) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 56) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 72) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t type metadata accessor for NewDocumentButton()
{
  return __swift_instantiateGenericMetadata();
}

ValueMetadata *type metadata accessor for _NewDocumentButton()
{
  return &type metadata for _NewDocumentButton;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<Button<Text>, PlatformNewDocumentButtonModifier> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<Button<Text>, PlatformNewDocumentButtonModifier> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<Button<Text>, PlatformNewDocumentButtonModifier> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<Button<Text>, PlatformNewDocumentButtonModifier>();
    lazy protocol witness table accessor for type DefaultDocumentCreationStrategy and conformance DefaultDocumentCreationStrategy((unint64_t *)&lazy protocol witness table cache variable for type Button<Text> and conformance Button<A>, (void (*)(uint64_t))type metadata accessor for Button<Text>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<Button<Text>, PlatformNewDocumentButtonModifier> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t sub_187BF5814()
{
  return lazy protocol witness table accessor for type DefaultDocumentCreationStrategy and conformance DefaultDocumentCreationStrategy((unint64_t *)&lazy protocol witness table cache variable for type Button<Text> and conformance Button<A>, (void (*)(uint64_t))type metadata accessor for Button<Text>);
}

ValueMetadata *type metadata accessor for AsyncNewDocumentProvider()
{
  return &type metadata for AsyncNewDocumentProvider;
}

ValueMetadata *type metadata accessor for PlatformNewDocumentButtonModifier()
{
  return &type metadata for PlatformNewDocumentButtonModifier;
}

_UNKNOWN **base witness table accessor for ViewModifier in PlatformNewDocumentButtonModifier()
{
  return &protocol witness table for PlatformNewDocumentButtonModifier;
}

void type metadata accessor for _GraphValue<PlatformNewDocumentButtonModifier>()
{
  if (!lazy cache variable for type metadata for _GraphValue<PlatformNewDocumentButtonModifier>)
  {
    unint64_t v0 = type metadata accessor for _GraphValue();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _GraphValue<PlatformNewDocumentButtonModifier>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type PlatformNewDocumentButtonTransform.MakeTransform and conformance PlatformNewDocumentButtonTransform.MakeTransform()
{
  unint64_t result = lazy protocol witness table cache variable for type PlatformNewDocumentButtonTransform.MakeTransform and conformance PlatformNewDocumentButtonTransform.MakeTransform;
  if (!lazy protocol witness table cache variable for type PlatformNewDocumentButtonTransform.MakeTransform and conformance PlatformNewDocumentButtonTransform.MakeTransform)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlatformNewDocumentButtonTransform.MakeTransform and conformance PlatformNewDocumentButtonTransform.MakeTransform);
  }
  return result;
}

void type metadata accessor for ModifiedContent<ResolvedButtonStyle, StaticSourceWriter<PrimitiveButtonStyleConfiguration.Label, Text>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ResolvedButtonStyle, StaticSourceWriter<PrimitiveButtonStyleConfiguration.Label, Text>>)
  {
    type metadata accessor for ResolvedButtonStyle(255);
    type metadata accessor for StaticSourceWriter<PrimitiveButtonStyleConfiguration.Label, Text>(255, &lazy cache variable for type metadata for StaticSourceWriter<PrimitiveButtonStyleConfiguration.Label, Text>, (void (*)(void))lazy protocol witness table accessor for type PrimitiveButtonStyleConfiguration.Label and conformance PrimitiveButtonStyleConfiguration.Label);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ResolvedButtonStyle, StaticSourceWriter<PrimitiveButtonStyleConfiguration.Label, Text>>);
    }
  }
}

void type metadata accessor for StaticSourceWriter<PrimitiveButtonStyleConfiguration.Label, Text>(uint64_t a1, unint64_t *a2, void (*a3)(void))
{
  if (!*a2)
  {
    a3();
    unint64_t v4 = type metadata accessor for StaticSourceWriter();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ResolvedButtonStyle, StaticSourceWriter<PrimitiveButtonStyleConfiguration.Label, Text>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ResolvedButtonStyle, StaticSourceWriter<PrimitiveButtonStyleConfiguration.Label, Text>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ResolvedButtonStyle, StaticSourceWriter<PrimitiveButtonStyleConfiguration.Label, Text>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ResolvedButtonStyle, StaticSourceWriter<PrimitiveButtonStyleConfiguration.Label, Text>>();
    lazy protocol witness table accessor for type DefaultDocumentCreationStrategy and conformance DefaultDocumentCreationStrategy(&lazy protocol witness table cache variable for type ResolvedButtonStyle and conformance ResolvedButtonStyle, (void (*)(uint64_t))type metadata accessor for ResolvedButtonStyle);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ResolvedButtonStyle, StaticSourceWriter<PrimitiveButtonStyleConfiguration.Label, Text>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

ValueMetadata *type metadata accessor for PlatformNewDocumentButtonTransform.MakeTransform()
{
  return &type metadata for PlatformNewDocumentButtonTransform.MakeTransform;
}

ValueMetadata *type metadata accessor for PlatformNewDocumentButtonTransform()
{
  return &type metadata for PlatformNewDocumentButtonTransform;
}

_UNKNOWN **base witness table accessor for ViewModifier in PlatformNewDocumentButtonTransform()
{
  return &protocol witness table for PlatformNewDocumentButtonTransform;
}

unint64_t instantiation function for generic protocol witness table for PlatformNewDocumentButtonTransform(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type PlatformNewDocumentButtonTransform and conformance PlatformNewDocumentButtonTransform();
  *(void *)(a1 + 8) = result;
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table accessor for type PlatformNewDocumentButtonTransform and conformance PlatformNewDocumentButtonTransform();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t getEnumTagSinglePayload for ViewInputFlagModifier(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (!a2) {
    return 0;
  }
  unsigned int v7 = a2 - v5;
  if (a2 <= v5) {
    goto LABEL_19;
  }
  char v8 = 8 * v6;
  if (v6 <= 3)
  {
    unsigned int v10 = ((v7 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      int v9 = *(_DWORD *)((char *)a1 + v6);
      if (!v9) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      int v9 = *(unsigned __int16 *)((char *)a1 + v6);
      if (!*(unsigned __int16 *)((char *)a1 + v6)) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_19:
      if (v5) {
        return (*(uint64_t (**)(void))(v4 + 48))();
      }
      return 0;
    }
  }
  int v9 = *((unsigned __int8 *)a1 + v6);
  if (!*((unsigned char *)a1 + v6)) {
    goto LABEL_19;
  }
LABEL_11:
  int v11 = (v9 - 1) << v8;
  if (v6 > 3) {
    int v11 = 0;
  }
  if (v6)
  {
    if (v6 > 3) {
      LODWORD(v6) = 4;
    }
    switch((int)v6)
    {
      case 2:
        LODWORD(v6) = *a1;
        break;
      case 3:
        LODWORD(v6) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v6) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v6) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v5 + (v6 | v11) + 1;
}

void storeEnumTagSinglePayload for ViewInputFlagModifier(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = *(void *)(v6 + 64);
  BOOL v9 = a3 >= v7;
  unsigned int v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      unsigned int v14 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v14))
      {
        int v11 = 4;
      }
      else if (v14 >= 0x100)
      {
        int v11 = 2;
      }
      else
      {
        int v11 = v14 > 1;
      }
    }
    else
    {
      int v11 = 1;
    }
  }
  else
  {
    int v11 = 0;
  }
  if (v7 < a2)
  {
    unsigned int v12 = ~v7 + a2;
    if (v8 < 4)
    {
      int v13 = (v12 >> (8 * v8)) + 1;
      if (v8)
      {
        int v15 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if (v8 == 3)
        {
          *(_WORD *)a1 = v15;
          a1[2] = BYTE2(v15);
        }
        else if (v8 == 2)
        {
          *(_WORD *)a1 = v15;
        }
        else
        {
          *a1 = v15;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v12;
      int v13 = 1;
    }
    switch(v11)
    {
      case 1:
        a1[v8] = v13;
        return;
      case 2:
        *(_WORD *)&a1[v8] = v13;
        return;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v8] = v13;
        return;
      default:
        return;
    }
  }
  switch(v11)
  {
    case 1:
      a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 2:
      *(_WORD *)&a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 3:
LABEL_34:
      __break(1u);
      JUMPOUT(0x187BF5F34);
    case 4:
      *(_DWORD *)&a1[v8] = 0;
      goto LABEL_20;
    default:
LABEL_20:
      if (a2)
      {
LABEL_21:
        long long v16 = *(void (**)(void))(v6 + 56);
        v16();
      }
      return;
  }
}

uint64_t type metadata accessor for FalseViewInputBoolFlagModifier()
{
  return __swift_instantiateGenericMetadata();
}

_UNKNOWN **base witness table accessor for ViewModifier in FalseViewInputBoolFlagModifier<A>()
{
  return &protocol witness table for FalseViewInputBoolFlagModifier<A>;
}

uint64_t closure #1 in static ViewInputFlagModifier._makeInputs(modifier:inputs:)(uint64_t a1, uint64_t a2)
{
  v7[2] = type metadata accessor for ViewInputFlagModifier();
  v7[3] = a2;
  uint64_t v4 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(a1, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply, (uint64_t)v7, a2, MEMORY[0x1E4FBC248], v4, MEMORY[0x1E4FBC278], v5);
  return v7[5];
}

uint64_t protocol witness for static ViewModifier._viewListCount(inputs:body:) in conformance ViewInputFlagModifier<A>()
{
  return static ViewModifier<>._viewListCount(inputs:body:)();
}

uint64_t protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance FalseViewInputBoolFlagModifier<A>()
{
  return specialized static FalseViewInputBoolFlagModifier._makeInputs(modifier:inputs:)();
}

_UNKNOWN **base witness table accessor for ViewModifier in ViewInputFlagModifier<A>()
{
  return &protocol witness table for ViewInputFlagModifier<A>;
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance FalseViewInputBoolFlagModifier<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return MEMORY[0x1F40FDA60](a1, a2, a3, a4, a5, a6, &protocol witness table for FalseViewInputBoolFlagModifier<A>);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance FalseViewInputBoolFlagModifier<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F40FF3A0](a1, a2, a3, a4, a5, WitnessTable);
}

uint64_t protocol witness for static ViewModifier._viewListCount(inputs:body:) in conformance FalseViewInputBoolFlagModifier<A>()
{
  return static ViewModifier<>._viewListCount(inputs:body:)();
}

void specialized ViewModifier.bodyError()()
{
  _StringGuts.grow(_:)(34);
  swift_bridgeObjectRelease();
  v0._countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  v1._countAndFlagsBits = 46;
  v1._object = (void *)0xE100000000000000;
  String.append(_:)(v1);
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

{
  specialized ViewModifier.bodyError()(0xD00000000000001FLL, (void *)0x800000018833FA40);
}

{
  specialized ViewModifier.bodyError()(0xD000000000000020, (void *)0x800000018833FA10);
}

{
  specialized ViewModifier.bodyError()(0x646F4D6B7361545FLL, (void *)0xED00007265696669);
}

{
  specialized ViewModifier.bodyError()(0xD000000000000019, (void *)0x800000018833FAE0);
}

{
  specialized ViewModifier.bodyError()(0xD000000000000015, (void *)0x800000018833FAC0);
}

{
  specialized ViewModifier.bodyError()(0xD000000000000016, (void *)0x800000018833FAA0);
}

{
  specialized ViewModifier.bodyError()(0xD00000000000001DLL, (void *)0x800000018833FA80);
}

{
  specialized ViewModifier.bodyError()(0xD000000000000011, (void *)0x800000018833FA60);
}

{
  specialized ViewModifier.bodyError()(0xD00000000000001ELL, (void *)0x800000018833F9F0);
}

{
  specialized ViewModifier.bodyError()(0xD000000000000019, (void *)0x800000018833F9D0);
}

{
  specialized ViewModifier.bodyError()(0xD000000000000014, (void *)0x800000018833F9B0);
}

{
  specialized ViewModifier.bodyError()(0x6F697469736F505FLL, (void *)0xEF74756F79614C6ELL);
}

{
  specialized ViewModifier.bodyError()(0xD000000000000011, (void *)0x800000018833F990);
}

{
  specialized ViewModifier.bodyError()(0xD000000000000010, (void *)0x800000018833F970);
}

{
  specialized ViewModifier.bodyError()(0xD000000000000014, (void *)0x800000018833F950);
}

{
  specialized ViewModifier.bodyError()(0xD000000000000023, (void *)0x800000018833F920);
}

{
  specialized ViewModifier.bodyError()(0xD000000000000014, (void *)0x800000018833F900);
}

{
  specialized ViewModifier.bodyError()(0xD00000000000002DLL, (void *)0x800000018833F8D0);
}

{
  specialized ViewModifier.bodyError()(0xD000000000000016, (void *)0x800000018833F8B0);
}

{
  specialized ViewModifier.bodyError()(0xD000000000000015, (void *)0x800000018833F890);
}

{
  specialized ViewModifier.bodyError()(0xD000000000000013, (void *)0x800000018833F870);
}

{
  specialized ViewModifier.bodyError()(0xD000000000000016, (void *)0x800000018833F850);
}

{
  specialized ViewModifier.bodyError()(0xD000000000000018, (void *)0x800000018833F830);
}

void specialized ViewModifier<>.body(content:)()
{
}

uint64_t partial apply for closure #1 in static ViewInputFlagModifier._makeInputs(modifier:inputs:)(uint64_t a1)
{
  return closure #1 in static ViewInputFlagModifier._makeInputs(modifier:inputs:)(a1, *(void *)(v1 + 16));
}

uint64_t specialized static FalseViewInputBoolFlagModifier._makeInputs(modifier:inputs:)()
{
  char v1 = 0;
  return specialized _GraphInputs.subscript.setter((uint64_t)&v1);
}

uint64_t destroy for NavigationSplitViewState(void *a1)
{
  if (a1[2])
  {
    swift_release();
    swift_release();
  }
  if (a1[4]) {
    swift_release();
  }
  uint64_t result = a1[7];
  if (result)
  {
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t initializeWithCopy for NavigationSplitViewState(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 16);
  if (v4)
  {
    *(void *)(a1 + 8) = *(void *)(a2 + 8);
    *(void *)(a1 + 16) = v4;
    *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
    swift_retain();
    swift_retain();
  }
  else
  {
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
    *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  }
  uint64_t v5 = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 25) = *(unsigned char *)(a2 + 25);
  if (!v5)
  {
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    uint64_t v7 = *(void *)(a2 + 56);
    if (v7) {
      goto LABEL_6;
    }
LABEL_8:
    *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
    *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
    goto LABEL_9;
  }
  uint64_t v6 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = v5;
  *(void *)(a1 + 40) = v6;
  swift_retain();
  uint64_t v7 = *(void *)(a2 + 56);
  if (!v7) {
    goto LABEL_8;
  }
LABEL_6:
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v7;
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  swift_retain();
  swift_retain();
LABEL_9:
  *(unsigned char *)(a1 + 65) = *(unsigned char *)(a2 + 65);
  return a1;
}

uint64_t assignWithCopy for NavigationSplitViewState(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  uint64_t v4 = a1 + 8;
  uint64_t v5 = (long long *)(a2 + 8);
  uint64_t v6 = *(void *)(a2 + 16);
  if (*(void *)(a1 + 16))
  {
    if (v6)
    {
      *(void *)(a1 + 8) = *(void *)(a2 + 8);
      swift_retain();
      swift_release();
      *(void *)(a1 + 16) = *(void *)(a2 + 16);
      swift_retain();
      swift_release();
      *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
    }
    else
    {
      outlined destroy of Binding<NavigationSplitViewColumn>(a1 + 8);
      char v7 = *((unsigned char *)v5 + 16);
      *(_OWORD *)uint64_t v4 = *v5;
      *(unsigned char *)(v4 + 16) = v7;
    }
  }
  else if (v6)
  {
    *(void *)(a1 + 8) = *(void *)(a2 + 8);
    *(void *)(a1 + 16) = *(void *)(a2 + 16);
    *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
    swift_retain();
    swift_retain();
  }
  else
  {
    long long v8 = *v5;
    *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
    *(_OWORD *)uint64_t v4 = v8;
  }
  uint64_t v9 = *(void *)(a1 + 32);
  *(unsigned char *)(a1 + 25) = *(unsigned char *)(a2 + 25);
  uint64_t v10 = *(void *)(a2 + 32);
  if (v9)
  {
    if (v10)
    {
      uint64_t v11 = *(void *)(a2 + 40);
      *(void *)(a1 + 32) = v10;
      *(void *)(a1 + 40) = v11;
      swift_retain();
      swift_release();
      goto LABEL_15;
    }
    swift_release();
  }
  else if (v10)
  {
    uint64_t v12 = *(void *)(a2 + 40);
    *(void *)(a1 + 32) = v10;
    *(void *)(a1 + 40) = v12;
    swift_retain();
    goto LABEL_15;
  }
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
LABEL_15:
  int v13 = (_OWORD *)(a1 + 48);
  unsigned int v14 = (_OWORD *)(a2 + 48);
  uint64_t v15 = *(void *)(a2 + 56);
  if (*(void *)(a1 + 56))
  {
    if (v15)
    {
      *(void *)(a1 + 48) = *(void *)(a2 + 48);
      swift_retain();
      swift_release();
      *(void *)(a1 + 56) = *(void *)(a2 + 56);
      swift_retain();
      swift_release();
      *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
    }
    else
    {
      outlined destroy of Binding<NavigationSplitViewColumn>(a1 + 48);
      char v16 = *(unsigned char *)(a2 + 64);
      *int v13 = *v14;
      *(unsigned char *)(a1 + 64) = v16;
    }
  }
  else if (v15)
  {
    *(void *)(a1 + 48) = *(void *)(a2 + 48);
    *(void *)(a1 + 56) = *(void *)(a2 + 56);
    *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
    swift_retain();
    swift_retain();
  }
  else
  {
    long long v17 = *v14;
    *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
    *int v13 = v17;
  }
  *(unsigned char *)(a1 + 65) = *(unsigned char *)(a2 + 65);
  return a1;
}

uint64_t outlined destroy of Binding<NavigationSplitViewColumn>(uint64_t a1)
{
  type metadata accessor for Binding<NavigationSplitViewColumn>();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void type metadata accessor for Binding<NavigationSplitViewColumn>()
{
  if (!lazy cache variable for type metadata for Binding<NavigationSplitViewColumn>)
  {
    unint64_t v0 = type metadata accessor for Binding();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Binding<NavigationSplitViewColumn>);
    }
  }
}

uint64_t assignWithTake for NavigationSplitViewState(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  uint64_t v4 = a1 + 8;
  uint64_t v5 = a2 + 8;
  if (*(void *)(a1 + 16))
  {
    uint64_t v6 = *(void *)(a2 + 16);
    if (v6)
    {
      *(void *)(a1 + 8) = *(void *)(a2 + 8);
      swift_release();
      *(void *)(a1 + 16) = v6;
      swift_release();
      *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
      goto LABEL_6;
    }
    outlined destroy of Binding<NavigationSplitViewColumn>(a1 + 8);
  }
  *(_OWORD *)uint64_t v4 = *(_OWORD *)v5;
  *(unsigned char *)(v4 + 16) = *(unsigned char *)(v5 + 16);
LABEL_6:
  uint64_t v7 = *(void *)(a2 + 32);
  uint64_t v8 = *(void *)(a1 + 32);
  *(unsigned char *)(a1 + 25) = *(unsigned char *)(a2 + 25);
  if (v8)
  {
    if (v7)
    {
      uint64_t v9 = *(void *)(a2 + 40);
      *(void *)(a1 + 32) = v7;
      *(void *)(a1 + 40) = v9;
      swift_release();
      goto LABEL_13;
    }
    swift_release();
  }
  else if (v7)
  {
    uint64_t v10 = *(void *)(a2 + 40);
    *(void *)(a1 + 32) = v7;
    *(void *)(a1 + 40) = v10;
    goto LABEL_13;
  }
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
LABEL_13:
  if (!*(void *)(a1 + 56))
  {
LABEL_17:
    *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
    *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
    goto LABEL_18;
  }
  uint64_t v11 = *(void *)(a2 + 56);
  if (!v11)
  {
    outlined destroy of Binding<NavigationSplitViewColumn>(a1 + 48);
    goto LABEL_17;
  }
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_release();
  *(void *)(a1 + 56) = v11;
  swift_release();
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
LABEL_18:
  *(unsigned char *)(a1 + 65) = *(unsigned char *)(a2 + 65);
  return a1;
}

uint64_t getEnumTagSinglePayload for NavigationSplitViewState(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 66)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 16);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for NavigationSplitViewState(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_WORD *)(result + 64) = 0;
    *(void *)uint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 66) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 66) = 0;
    }
    if (a2) {
      *(void *)(result + 16) = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for NavigationSplitViewState()
{
  return &type metadata for NavigationSplitViewState;
}

Swift::Bool __swiftcall NavigationSplitViewState.reduceCompactColumnBindingsIfGreaterThan(_:)(SwiftUI::NavigationSplitColumn_optional a1)
{
  if (a1.value <= SwiftUI_NavigationSplitColumn_detail)
  {
    uint64_t v2 = v1;
    uint64_t v4 = *(void *)(v1 + 16);
    if (v4)
    {
      int v5 = *(unsigned __int8 *)(v2 + 25);
      if (v5 != 3)
      {
        uint64_t v6 = *(void *)(v2 + 8);
        if (a1.value)
        {
          if (a1.value == SwiftUI_NavigationSplitColumn_content && v5 == 2)
          {
LABEL_7:
            *(SwiftUI::NavigationSplitColumn_optional *)(v2 + 25) = a1;
            swift_retain();
            swift_retain();
            dispatch thunk of AnyLocation.set(_:transaction:)();
            outlined consume of Binding<NavigationSplitViewColumn>?(v6, v4);
            int v7 = 1;
            uint64_t v8 = *(void *)(v2 + 56);
            if (!v8) {
              goto LABEL_17;
            }
LABEL_12:
            int v9 = *(unsigned __int8 *)(v2 + 65);
            if (v9 != 3)
            {
              uint64_t v10 = *(void *)(v2 + 48);
              if (a1.value)
              {
                if (a1.value != SwiftUI_NavigationSplitColumn_content || v9 != 2) {
                  goto LABEL_17;
                }
              }
              else if ((v9 - 1) >= 2)
              {
                goto LABEL_17;
              }
              *(SwiftUI::NavigationSplitColumn_optional *)(v2 + 65) = a1;
              swift_retain();
              swift_retain();
              dispatch thunk of AnyLocation.set(_:transaction:)();
              outlined consume of Binding<NavigationSplitViewColumn>?(v10, v8);
              int v7 = 1;
            }
LABEL_17:
            *(_DWORD *)v2 += v7;
            return v7;
          }
        }
        else if ((v5 - 1) < 2)
        {
          goto LABEL_7;
        }
      }
    }
    int v7 = 0;
    uint64_t v8 = *(void *)(v2 + 56);
    if (!v8) {
      goto LABEL_17;
    }
    goto LABEL_12;
  }
  LOBYTE(v7) = 0;
  return v7;
}

uint64_t closure #1 in NavigationSplitViewState.handleEvent(_:)(uint64_t (*a1)(uint64_t), uint64_t a2, uint64_t a3)
{
  return a1(a3);
}

double _s7SwiftUI15NavigationStateV12UpdateResultOWOi0_(uint64_t a1)
{
  double result = 0.0;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0x1FFFFFFFELL;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 233) = 0u;
  return result;
}

uint64_t type metadata completion function for PopUpButton()
{
  uint64_t result = type metadata accessor for PickerStyleConfiguration();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

void *initializeBufferWithCopyOfBuffer for PopUpButton(unint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v3 = (void *)a1;
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  int v5 = *(_DWORD *)(v4 + 80);
  uint64_t v6 = v5;
  unint64_t v7 = v5 & 0xF8 ^ 0xFFFFFFFFFFFFFFF8;
  uint64_t v8 = ((v6 + 16) & ~v6) + *(void *)(v4 + 64) + 7;
  unint64_t v9 = (v8 & 0xFFFFFFFFFFFFFFF8) + 9;
  unint64_t v10 = (v7 & (v5 + 64)) + v9 + 39;
  int v11 = v5 & 0x100000;
  if (v6 > 7 || v11 != 0 || v10 > 0x18)
  {
    uint64_t v14 = *(void *)a2;
    void *v3 = *(void *)a2;
    unint64_t v3 = (void *)(v14 + (v7 & (v6 + 16)));
    swift_retain();
  }
  else
  {
    uint64_t v35 = *(void *)(a3 + 16);
    *(unsigned char *)a1 = *(unsigned char *)a2;
    uint64_t v15 = (void *)(a1 & 0xFFFFFFFFFFFFFFF8);
    unint64_t v16 = a2 & 0xFFFFFFFFFFFFFFF8;
    uint64_t v17 = *(void *)((a2 & 0xFFFFFFFFFFFFFFF8) + 32);
    v15[4] = v17;
    v15[5] = *(void *)((a2 & 0xFFFFFFFFFFFFFFF8) + 40);
    (**(void (***)(unint64_t, unint64_t))(v17 - 8))((a1 & 0xFFFFFFFFFFFFFFF8) + 8, (a2 & 0xFFFFFFFFFFFFFFF8) + 8);
    int v18 = *(void **)(v16 + 48);
    v15[6] = v18;
    v15[7] = *(void *)(v16 + 56);
    uint64_t v19 = (void *)(v7 & ((unint64_t)v15 + 71));
    long long v20 = (void *)(v7 & (v16 + 71));
    *uint64_t v19 = *v20;
    long long v21 = (void *)(((unint64_t)v19 + 15) & 0xFFFFFFFFFFFFFFF8);
    long long v22 = (void *)(((unint64_t)v20 + 15) & 0xFFFFFFFFFFFFFFF8);
    *long long v21 = *v22;
    uint64_t v23 = ((unint64_t)v21 + v6 + 8) & ~v6;
    uint64_t v24 = ((unint64_t)v22 + v6 + 8) & ~v6;
    uint64_t v25 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
    uint64_t v34 = v23;
    id v26 = v18;
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    v25(v34, v24, v35);
    unint64_t v27 = ((unint64_t)v19 + v8) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v28 = ((unint64_t)v20 + v8) & 0xFFFFFFFFFFFFFFF8;
    *(void *)unint64_t v27 = *(void *)v28;
    *(unsigned char *)(v27 + 8) = *(unsigned char *)(v28 + 8);
    uint64_t v29 = (char *)v19 + v9;
    uint64_t v30 = (char *)v20 + v9;
    uint64_t v31 = *(void *)((char *)v20 + v9 + 7);
    char v32 = v30[15];
    swift_bridgeObjectRetain();
    outlined copy of Environment<Bool>.Content(v31, v32);
    *(void *)(v29 + 7) = v31;
    v29[15] = v32;
    *(_OWORD *)(v29 + 23) = *(_OWORD *)(v30 + 23);
  }
  return v3;
}

uint64_t destroy for PopUpButton(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = a1 & 0xFFFFFFFFFFFFFFF8;
  __swift_destroy_boxed_opaque_existential_1((a1 & 0xFFFFFFFFFFFFFFF8) + 8);

  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(a2 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v7 = (v3 + (v6 | 7) + 64) & ~(v6 | 7);
  swift_release();
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v5 + 8))((v6 + ((v7 + 15) & 0xFFFFFFFFFFFFFFF8) + 8) & ~v6, v4);
  uint64_t v8 = *(void *)(v5 + 64) + ((v6 + 16) & ~v6) + 7;
  swift_bridgeObjectRelease();
  unint64_t v9 = v7 + (v8 & 0xFFFFFFFFFFFFFFF8);
  uint64_t v10 = *(void *)(v9 + 16);
  char v11 = *(unsigned char *)(v9 + 24);

  return outlined consume of Environment<Bool>.Content(v10, v11);
}

unint64_t initializeWithCopy for PopUpButton(unint64_t a1, unint64_t a2, uint64_t a3)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v4 = (void *)(a1 & 0xFFFFFFFFFFFFFFF8);
  unint64_t v5 = a2 & 0xFFFFFFFFFFFFFFF8;
  uint64_t v6 = *(void *)((a2 & 0xFFFFFFFFFFFFFFF8) + 32);
  v4[4] = v6;
  v4[5] = *(void *)((a2 & 0xFFFFFFFFFFFFFFF8) + 40);
  (**(void (***)(unint64_t, unint64_t))(v6 - 8))((a1 & 0xFFFFFFFFFFFFFFF8) + 8, (a2 & 0xFFFFFFFFFFFFFFF8) + 8);
  uint64_t v7 = *(void **)(v5 + 48);
  v4[6] = v7;
  v4[7] = *(void *)(v5 + 56);
  uint64_t v8 = *(void *)(a3 + 16);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v29 = *(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16);
  uint64_t v10 = v9 + 16;
  uint64_t v11 = *(_DWORD *)(v9 + 80);
  unint64_t v12 = *(_DWORD *)(v9 + 80) & 0xF8 ^ 0xFFFFFFFFFFFFFFF8;
  int v13 = (void *)(((unint64_t)v4 + v11 + 64) & v12);
  uint64_t v14 = (void *)((v11 + 64 + v5) & v12);
  *int v13 = *v14;
  uint64_t v15 = (void *)(((unint64_t)v13 + 15) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v16 = (void *)(((unint64_t)v14 + 15) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v15 = *v16;
  uint64_t v17 = ((unint64_t)v15 + v11 + 8) & ~v11;
  uint64_t v18 = ((unint64_t)v16 + v11 + 8) & ~v11;
  id v19 = v7;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  v29(v17, v18, v8);
  uint64_t v20 = *(void *)(v10 + 48) + ((v11 + 16) & ~v11) + 7;
  unint64_t v21 = ((unint64_t)v13 + v20) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v22 = ((unint64_t)v14 + v20) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v21 = *(void *)v22;
  *(unsigned char *)(v21 + 8) = *(unsigned char *)(v22 + 8);
  unint64_t v23 = (v20 & 0xFFFFFFFFFFFFFFF8) + 9;
  uint64_t v24 = (char *)v13 + v23;
  uint64_t v25 = (char *)v14 + v23;
  uint64_t v26 = *(void *)(v25 + 7);
  char v27 = v25[15];
  swift_bridgeObjectRetain();
  outlined copy of Environment<Bool>.Content(v26, v27);
  *(void *)(v24 + 7) = v26;
  v24[15] = v27;
  *(_OWORD *)(v24 + 23) = *(_OWORD *)(v25 + 23);
  return a1;
}

unint64_t assignWithCopy for PopUpButton(unint64_t a1, unint64_t a2, uint64_t a3)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  unint64_t v5 = a1 & 0xFFFFFFFFFFFFFFF8;
  unint64_t v6 = a2 & 0xFFFFFFFFFFFFFFF8;
  __swift_assign_boxed_opaque_existential_1((uint64_t *)((a1 & 0xFFFFFFFFFFFFFFF8) + 8), (uint64_t *)((a2 & 0xFFFFFFFFFFFFFFF8) + 8));
  uint64_t v7 = *(void **)(v6 + 48);
  uint64_t v8 = *(void **)(v5 + 48);
  *(void *)(v5 + 48) = v7;
  id v9 = v7;

  *(void *)(v5 + 56) = *(void *)(v6 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v10 = *(void *)(a3 + 16);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(_DWORD *)(v11 + 80);
  unint64_t v13 = *(_DWORD *)(v11 + 80) & 0xF8 ^ 0xFFFFFFFFFFFFFFF8;
  uint64_t v14 = (void *)((v12 + 64 + v5) & v13);
  uint64_t v15 = (void *)((v12 + 64 + v6) & v13);
  *uint64_t v14 = *v15;
  swift_retain();
  swift_release();
  unint64_t v16 = (void *)(((unint64_t)v14 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v17 = (void *)(((unint64_t)v15 + 15) & 0xFFFFFFFFFFFFFFF8);
  *unint64_t v16 = *v17;
  swift_retain();
  swift_release();
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v11 + 24))(((unint64_t)v16 + v12 + 8) & ~v12, ((unint64_t)v17 + v12 + 8) & ~v12, v10);
  uint64_t v18 = *(void *)(v11 + 64) + ((v12 + 16) & ~v12) + 7;
  unint64_t v19 = ((unint64_t)v14 + v18) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v20 = ((unint64_t)v15 + v18) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v19 = *(void *)v20;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(v19 + 8) = *(unsigned char *)(v20 + 8);
  unint64_t v21 = (v18 & 0xFFFFFFFFFFFFFFF8) + 9;
  unint64_t v22 = (char *)v14 + v21;
  unint64_t v23 = (char *)v15 + v21;
  uint64_t v24 = *(void *)(v23 + 7);
  LOBYTE(v18) = v23[15];
  outlined copy of Environment<Bool>.Content(v24, v18);
  uint64_t v25 = *(void *)(v22 + 7);
  char v26 = v22[15];
  *(void *)(v22 + 7) = v24;
  v22[15] = v18;
  outlined consume of Environment<Bool>.Content(v25, v26);
  *(_OWORD *)(v22 + 23) = *(_OWORD *)(v23 + 23);
  return a1;
}

unint64_t initializeWithTake for PopUpButton(unint64_t a1, unint64_t a2, uint64_t a3)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  unint64_t v4 = a1 & 0xFFFFFFFFFFFFFFF8;
  long long v5 = *(_OWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 8);
  long long v6 = *(_OWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 24);
  long long v7 = *(_OWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 40);
  *(void *)(v4 + 56) = *(void *)((a2 & 0xFFFFFFFFFFFFFFF8) + 56);
  *(_OWORD *)(v4 + 40) = v7;
  *(_OWORD *)(v4 + 24) = v6;
  *(_OWORD *)(v4 + 8) = v5;
  uint64_t v8 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v9 = *(_DWORD *)(v8 + 80);
  unint64_t v10 = *(_DWORD *)(v8 + 80) & 0xF8 ^ 0xFFFFFFFFFFFFFFF8;
  uint64_t v11 = (void *)((v9 + 64 + (a1 & 0xFFFFFFFFFFFFFFF8)) & v10);
  uint64_t v12 = (void *)((v9 + 64 + (a2 & 0xFFFFFFFFFFFFFFF8)) & v10);
  *uint64_t v11 = *v12;
  unint64_t v13 = (void *)(((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v14 = (void *)(((unint64_t)v12 + 15) & 0xFFFFFFFFFFFFFFF8);
  *unint64_t v13 = *v14;
  uint64_t v15 = v8 + 32;
  (*(void (**)(unint64_t, unint64_t))(v8 + 32))(((unint64_t)v13 + v9 + 8) & ~v9, ((unint64_t)v14 + v9 + 8) & ~v9);
  uint64_t v16 = *(void *)(v15 + 32) + ((v9 + 16) & ~v9) + 7;
  unint64_t v17 = ((unint64_t)v11 + v16) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v18 = ((unint64_t)v12 + v16) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v17 = *(void *)v18;
  *(unsigned char *)(v17 + 8) = *(unsigned char *)(v18 + 8);
  unint64_t v19 = (v16 & 0xFFFFFFFFFFFFFFF8) + 9;
  unint64_t v20 = (char *)v11 + v19;
  unint64_t v21 = (char *)v12 + v19;
  LOBYTE(v18) = v21[15];
  *(void *)(v20 + 7) = *(void *)(v21 + 7);
  v20[15] = v18;
  *(_OWORD *)(v20 + 23) = *(_OWORD *)(v21 + 23);
  return a1;
}

unint64_t assignWithTake for PopUpButton(unint64_t a1, unint64_t a2, uint64_t a3)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  unint64_t v5 = a1 & 0xFFFFFFFFFFFFFFF8;
  unint64_t v6 = a2 & 0xFFFFFFFFFFFFFFF8;
  __swift_destroy_boxed_opaque_existential_1((a1 & 0xFFFFFFFFFFFFFFF8) + 8);
  long long v7 = *(_OWORD *)(v6 + 8);
  long long v8 = *(_OWORD *)(v6 + 24);
  *(void *)(v5 + 40) = *(void *)(v6 + 40);
  *(_OWORD *)(v5 + 24) = v8;
  *(_OWORD *)(v5 + 8) = v7;
  uint64_t v9 = *(void **)(v5 + 48);
  *(void *)(v5 + 48) = *(void *)(v6 + 48);

  *(void *)(v5 + 56) = *(void *)(v6 + 56);
  swift_bridgeObjectRelease();
  uint64_t v10 = *(void *)(a3 + 16);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(_DWORD *)(v11 + 80);
  unint64_t v13 = *(_DWORD *)(v11 + 80) & 0xF8 ^ 0xFFFFFFFFFFFFFFF8;
  uint64_t v14 = (void *)((v12 + 64 + v5) & v13);
  uint64_t v15 = (void *)((v12 + 64 + v6) & v13);
  *uint64_t v14 = *v15;
  swift_release();
  uint64_t v16 = (void *)(((unint64_t)v14 + 15) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v17 = (void *)(((unint64_t)v15 + 15) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v16 = *v17;
  swift_release();
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v11 + 40))(((unint64_t)v16 + v12 + 8) & ~v12, ((unint64_t)v17 + v12 + 8) & ~v12, v10);
  uint64_t v18 = *(void *)(v11 + 64) + ((v12 + 16) & ~v12) + 7;
  unint64_t v19 = ((unint64_t)v14 + v18) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v20 = ((unint64_t)v15 + v18) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v19 = *(void *)v20;
  swift_bridgeObjectRelease();
  *(unsigned char *)(v19 + 8) = *(unsigned char *)(v20 + 8);
  unint64_t v21 = (v18 & 0xFFFFFFFFFFFFFFF8) + 9;
  unint64_t v22 = (char *)v14 + v21;
  unint64_t v23 = (char *)v15 + v21;
  char v24 = *((unsigned char *)v15 + v21 + 15);
  uint64_t v25 = *(void *)(v22 + 7);
  char v26 = v22[15];
  *(void *)(v22 + 7) = *(void *)((char *)v15 + v21 + 7);
  v22[15] = v24;
  outlined consume of Environment<Bool>.Content(v25, v26);
  *(_OWORD *)(v22 + 23) = *(_OWORD *)(v23 + 23);
  return a1;
}

uint64_t getEnumTagSinglePayload for PopUpButton(unint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v5 = v4;
  int v6 = *(_DWORD *)(v4 + 84);
  if (v6 <= 0x7FFFFFFF) {
    int v7 = 0x7FFFFFFF;
  }
  else {
    int v7 = *(_DWORD *)(v4 + 84);
  }
  uint64_t v8 = *(unsigned __int8 *)(v4 + 80);
  if (v6 >= 0) {
    unsigned int v9 = 0x7FFFFFFF;
  }
  else {
    unsigned int v9 = v7;
  }
  if (!a2) {
    return 0;
  }
  uint64_t v10 = v8 | 7;
  if (v9 < a2)
  {
    unint64_t v11 = ((v8 + 64) & ~v10)
        + ((*(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) + ((v8 + 16) & ~v8) + 7) & 0xFFFFFFFFFFFFFFF8)
        + 48;
    unsigned int v12 = a2 - v9;
    uint64_t v13 = v11 & 0xFFFFFFF8;
    if ((v11 & 0xFFFFFFF8) != 0) {
      unsigned int v14 = 2;
    }
    else {
      unsigned int v14 = v12 + 1;
    }
    if (v14 >= 0x10000) {
      unsigned int v15 = 4;
    }
    else {
      unsigned int v15 = 2;
    }
    if (v14 < 0x100) {
      unsigned int v15 = 1;
    }
    if (v14 >= 2) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = 0;
    }
    switch(v16)
    {
      case 1:
        int v17 = *(unsigned __int8 *)(a1 + v11);
        if (!v17) {
          break;
        }
        goto LABEL_25;
      case 2:
        int v17 = *(unsigned __int16 *)(a1 + v11);
        if (v17) {
          goto LABEL_25;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x187BF7658);
      case 4:
        int v17 = *(_DWORD *)(a1 + v11);
        if (!v17) {
          break;
        }
LABEL_25:
        int v19 = v17 - 1;
        if (v13)
        {
          int v19 = 0;
          LODWORD(v13) = *(_DWORD *)a1;
        }
        return v9 + (v13 | v19) + 1;
      default:
        break;
    }
  }
  unint64_t v20 = a1 & 0xFFFFFFFFFFFFFFF8;
  if (v9 != 0x7FFFFFFF) {
    return (*(uint64_t (**)(unint64_t))(v5 + 48))((v8
  }
                                                                  + ((((v20 + v10 + 64) & ~v10) + 15) & 0xFFFFFFFFFFFFFFF8)
                                                                  + 8) & ~v8);
  unint64_t v21 = *(void *)(v20 + 32);
  if (v21 >= 0xFFFFFFFF) {
    LODWORD(v21) = -1;
  }
  return (v21 + 1);
}

double storeEnumTagSinglePayload for PopUpButton(unint64_t a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  if (v7 >= 0) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  uint64_t v9 = *(unsigned __int8 *)(v6 + 80);
  size_t v10 = ((v9 + 64) & ~(v9 | 7))
      + ((*(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64) + ((v9 + 16) & ~v9) + 7) & 0xFFFFFFFFFFFFFFF8)
      + 48;
  if (v8 >= a3)
  {
    int v14 = 0;
    int v15 = a2 - v8;
    if (a2 <= v8)
    {
LABEL_19:
      switch(v14)
      {
        case 1:
          *(unsigned char *)(a1 + v10) = 0;
          if (!a2) {
            return result;
          }
          goto LABEL_32;
        case 2:
          *(_WORD *)(a1 + v10) = 0;
          if (!a2) {
            return result;
          }
          goto LABEL_32;
        case 3:
          goto LABEL_44;
        case 4:
          *(_DWORD *)(a1 + v10) = 0;
          goto LABEL_31;
        default:
LABEL_31:
          if (a2)
          {
LABEL_32:
            unint64_t v19 = a1 & 0xFFFFFFFFFFFFFFF8;
            if (v8 == 0x7FFFFFFF)
            {
              if ((a2 & 0x80000000) != 0)
              {
                double result = 0.0;
                *(_OWORD *)(v19 + 32) = 0u;
                *(_OWORD *)(v19 + 48) = 0u;
                *(_OWORD *)(v19 + 16) = 0u;
                *(void *)(v19 + 8) = a2 ^ 0x80000000;
              }
              else
              {
                *(void *)(v19 + 32) = a2 - 1;
              }
            }
            else
            {
              unint64_t v20 = *(void (**)(unint64_t))(v6 + 56);
              v20((v9 + ((((v19 + (v9 | 7) + 64) & ~(v9 | 7)) + 15) & 0xFFFFFFFFFFFFFFF8) + 8) & ~v9);
            }
          }
          break;
      }
      return result;
    }
  }
  else
  {
    unsigned int v11 = a3 - v8;
    if (((v9 + 64) & ~(v9 | 7))
       + ((*(_DWORD *)(*(void *)(*(void *)(a4 + 16) - 8) + 64) + ((v9 + 16) & ~v9) + 7) & 0xFFFFFFF8) == -48)
      unsigned int v12 = v11 + 1;
    else {
      unsigned int v12 = 2;
    }
    if (v12 >= 0x10000) {
      int v13 = 4;
    }
    else {
      int v13 = 2;
    }
    if (v12 < 0x100) {
      int v13 = 1;
    }
    if (v12 >= 2) {
      int v14 = v13;
    }
    else {
      int v14 = 0;
    }
    int v15 = a2 - v8;
    if (a2 <= v8) {
      goto LABEL_19;
    }
  }
  if (((v9 + 64) & ~(v9 | 7))
     + ((*(_DWORD *)(*(void *)(*(void *)(a4 + 16) - 8) + 64) + ((v9 + 16) & ~v9) + 7) & 0xFFFFFFF8) == -48)
    int v16 = v15;
  else {
    int v16 = 1;
  }
  if (((v9 + 64) & ~(v9 | 7))
     + ((*(_DWORD *)(*(void *)(*(void *)(a4 + 16) - 8) + 64) + ((v9 + 16) & ~v9) + 7) & 0xFFFFFFF8) != -48)
  {
    int v17 = ~v8 + a2;
    bzero((void *)a1, v10);
    *(_DWORD *)a1 = v17;
  }
  switch(v14)
  {
    case 1:
      *(unsigned char *)(a1 + v10) = v16;
      break;
    case 2:
      *(_WORD *)(a1 + v10) = v16;
      break;
    case 3:
LABEL_44:
      __break(1u);
      JUMPOUT(0x187BF78A8);
    case 4:
      *(_DWORD *)(a1 + v10) = v16;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t type metadata accessor for PopUpButton()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t associated type witness table accessor for View.Body : View in PopUpButton<A>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t PopUpButton.detailLabel.getter@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v5 = type metadata accessor for Binding();
  MEMORY[0x1F4188790](v5 - 8);
  int v7 = (char *)&v14 - v6;
  uint64_t v8 = *(void *)(a1 + 24);
  type metadata accessor for PickerStyleConfiguration();
  PickerStyleConfiguration.$selection.getter();
  destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(v4, v8, v9, v10);
  uint64_t v11 = type metadata accessor for PickerStyleConfiguration.Content();
  return PickerCurrentValueLabel.init(selection:options:)((uint64_t)v7, v12, v11, a2);
}

uint64_t PopUpButton.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v43 = a2;
  type metadata accessor for StyleContextAcceptsPredicate<ToolbarStyleContext>(255, (unint64_t *)&lazy cache variable for type metadata for StyleContextAcceptsPredicate<ToolbarStyleContext>, MEMORY[0x1E4F40520], MEMORY[0x1E4F410E8]);
  uint64_t v39 = v3;
  uint64_t v40 = a1;
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v5 = *(void *)(a1 + 24);
  type metadata accessor for PickerStyleConfiguration.Label();
  type metadata accessor for StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, PlatformItemListContentModifier, EmptyModifier>(255, &lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, PlatformItemListContentModifier, EmptyModifier>);
  uint64_t v44 = type metadata accessor for ModifiedContent();
  type metadata accessor for PickerStyleConfiguration.Content();
  type metadata accessor for PickerCurrentValueLabel();
  type metadata accessor for StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, PlatformItemListContentModifier, EmptyModifier>(255, (unint64_t *)&lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>);
  type metadata accessor for ModifiedContent();
  uint64_t v6 = type metadata accessor for PickerContentView();
  type metadata accessor for StyleContextWriter<MenuStyleContext>();
  uint64_t v7 = type metadata accessor for ModifiedContent();
  type metadata accessor for ToggleStyleModifier<CheckmarkToggleStyle>(255, &lazy cache variable for type metadata for ToggleStyleModifier<CheckmarkToggleStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type CheckmarkToggleStyle and conformance CheckmarkToggleStyle, (uint64_t)&type metadata for CheckmarkToggleStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ToggleStyleModifier);
  uint64_t v42 = v7;
  type metadata accessor for ModifiedContent();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v81 = lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>((unint64_t *)&lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>, (unint64_t *)&lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>, (uint64_t)&type metadata for ToolbarButtonLabelModifier, (void (*)(void))lazy protocol witness table accessor for type ToolbarButtonLabelModifier and conformance ToolbarButtonLabelModifier);
  swift_getWitnessTable();
  uint64_t v32 = swift_getWitnessTable();
  uint64_t v78 = v32;
  unint64_t v79 = lazy protocol witness table accessor for type StyleContextWriter<MenuStyleContext> and conformance StyleContextWriter<A>();
  uint64_t v76 = swift_getWitnessTable();
  uint64_t v77 = &protocol witness table for ToggleStyleModifier<A>;
  swift_getWitnessTable();
  type metadata accessor for UIKitMenuButton();
  type metadata accessor for UIKitSystemButtonConfigurationModifier(255);
  uint64_t v33 = type metadata accessor for ModifiedContent();
  _OWORD v31[2] = type metadata accessor for LabeledContent();
  type metadata accessor for ToggleStyleModifier<CheckmarkToggleStyle>(255, &lazy cache variable for type metadata for ViewInputFlagModifier<AccessibilityCombinedLabeledContent>, (uint64_t (*)(void))lazy protocol witness table accessor for type AccessibilityCombinedLabeledContent and conformance AccessibilityCombinedLabeledContent, (uint64_t)&type metadata for AccessibilityCombinedLabeledContent, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ViewInputFlagModifier);
  v31[1] = type metadata accessor for ModifiedContent();
  type metadata accessor for StaticIf<HideLabelPredicate, LabelsHiddenModifier, EmptyModifier>();
  uint64_t v34 = type metadata accessor for ModifiedContent();
  type metadata accessor for StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier>, EmptyModifier>();
  uint64_t v35 = type metadata accessor for ModifiedContent();
  type metadata accessor for StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, PlatformItemListContentModifier, EmptyModifier>(255, (unint64_t *)&lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, PlatformItemTintModifier, EmptyModifier>);
  uint64_t v37 = type metadata accessor for ModifiedContent();
  type metadata accessor for StyleContextAcceptsPredicate<ToolbarStyleContext>(255, &lazy cache variable for type metadata for _EnvironmentKeyTransformModifier<MenuOrder>, (uint64_t)&type metadata for MenuOrder, MEMORY[0x1E4F41280]);
  uint64_t v72 = v39;
  uint64_t v73 = type metadata accessor for ModifiedContent();
  uint64_t v74 = v73;
  unint64_t v75 = lazy protocol witness table accessor for type StyleContextAcceptsPredicate<ToolbarStyleContext> and conformance StyleContextAcceptsPredicate<A>();
  uint64_t v8 = type metadata accessor for StaticIf();
  uint64_t v39 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  uint64_t v36 = (char *)v31 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v10);
  long long v38 = (char *)v31 - v11;
  uint64_t v12 = v41;
  uint64_t v13 = v41 + *(int *)(v40 + 40);
  uint64_t v14 = *(void *)(v13 + *(int *)(type metadata accessor for PickerStyleConfiguration() + 36));
  outlined init with copy of SubviewsCollection(v12 + 8, (uint64_t)&v72);
  PickerContentView.init(selection:items:)(v14, (uint64_t)&v72, (uint64_t)v71);
  swift_bridgeObjectRetain();
  View.styleContext<A>(_:)();
  (*(void (**)(unsigned char *, uint64_t))(*(void *)(v6 - 8) + 8))(v71, v6);
  uint64_t v49 = v4;
  uint64_t v50 = v5;
  uint64_t v51 = v12;
  uint64_t v52 = &v72;
  uint64_t v45 = v4;
  uint64_t v46 = v5;
  uint64_t v47 = v12;
  uint64_t v48 = &v72;
  uint64_t v15 = lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>(&lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, PlatformItemListContentModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>, &lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, PlatformItemListContentModifier, EmptyModifier>, (uint64_t)&type metadata for PlatformItemListContentModifier, (void (*)(void))lazy protocol witness table accessor for type PlatformItemListContentModifier and conformance PlatformItemListContentModifier);
  uint64_t v69 = &protocol witness table for PickerStyleConfiguration<A>.Label;
  uint64_t v70 = v15;
  uint64_t v16 = swift_getWitnessTable();
  uint64_t v67 = &protocol witness table for UIKitMenuButton<A, B>;
  uint64_t v68 = &protocol witness table for UIKitSystemButtonConfigurationModifier;
  uint64_t v17 = swift_getWitnessTable();
  uint64_t v65 = v16;
  uint64_t v66 = v17;
  uint64_t v63 = swift_getWitnessTable();
  uint64_t v64 = &protocol witness table for ViewInputFlagModifier<A>;
  uint64_t v18 = swift_getWitnessTable();
  uint64_t v19 = _s7SwiftUI8StaticIfVyAA19_SemanticFeature_v5VAA33AllowsToolbarItemBridgingModifierVAA05EmptyL0VGACyxq_q0_GAA04ViewL0A2aLR_AaLR0_rlWlTm_0(&lazy protocol witness table cache variable for type StaticIf<HideLabelPredicate, LabelsHiddenModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>, (void (*)(uint64_t))type metadata accessor for StaticIf<HideLabelPredicate, LabelsHiddenModifier, EmptyModifier>, (void (*)(void))lazy protocol witness table accessor for type LabelsHiddenModifier and conformance LabelsHiddenModifier);
  uint64_t v61 = v18;
  uint64_t v62 = v19;
  uint64_t v20 = swift_getWitnessTable();
  uint64_t v21 = _s7SwiftUI8StaticIfVyAA19_SemanticFeature_v5VAA33AllowsToolbarItemBridgingModifierVAA05EmptyL0VGACyxq_q0_GAA04ViewL0A2aLR_AaLR0_rlWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier>, EmptyModifier> and conformance <> StaticIf<A, B, C>, (void (*)(uint64_t))type metadata accessor for StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier>, EmptyModifier>, (void (*)(void))lazy protocol witness table accessor for type StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>);
  uint64_t v59 = v20;
  uint64_t v60 = v21;
  uint64_t v22 = swift_getWitnessTable();
  uint64_t v23 = lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>(&lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, PlatformItemTintModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>, (unint64_t *)&lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, PlatformItemTintModifier, EmptyModifier>, (uint64_t)&type metadata for PlatformItemTintModifier, (void (*)(void))lazy protocol witness table accessor for type PlatformItemTintModifier and conformance PlatformItemTintModifier);
  uint64_t v57 = v22;
  uint64_t v58 = v23;
  uint64_t v24 = swift_getWitnessTable();
  unint64_t v25 = lazy protocol witness table accessor for type _EnvironmentKeyTransformModifier<MenuOrder> and conformance _EnvironmentKeyTransformModifier<A>();
  uint64_t v55 = v24;
  unint64_t v56 = v25;
  uint64_t v30 = swift_getWitnessTable();
  char v26 = v36;
  StaticIf<>.init<A>(in:then:else:)();
  uint64_t v53 = v30;
  uint64_t v54 = v30;
  swift_getWitnessTable();
  char v27 = v38;
  static ViewBuilder.buildExpression<A>(_:)(v26);
  unint64_t v28 = *(void (**)(char *, uint64_t))(v39 + 8);
  v28(v26, v8);
  static ViewBuilder.buildExpression<A>(_:)(v27);
  v28(v27, v8);
  return (*(uint64_t (**)(uint64_t *))(*(void *)(v42 - 8) + 8))(&v72);
}

uint64_t closure #1 in PopUpButton.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v35 = a2;
  uint64_t v34 = a1;
  uint64_t v36 = a3;
  type metadata accessor for PickerStyleConfiguration.Label();
  type metadata accessor for StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, PlatformItemListContentModifier, EmptyModifier>(255, &lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, PlatformItemListContentModifier, EmptyModifier>);
  v30[1] = type metadata accessor for ModifiedContent();
  type metadata accessor for PickerStyleConfiguration.Content();
  type metadata accessor for PickerCurrentValueLabel();
  type metadata accessor for StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, PlatformItemListContentModifier, EmptyModifier>(255, (unint64_t *)&lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>);
  uint64_t v3 = type metadata accessor for ModifiedContent();
  type metadata accessor for PickerContentView();
  type metadata accessor for StyleContextWriter<MenuStyleContext>();
  uint64_t v4 = type metadata accessor for ModifiedContent();
  type metadata accessor for ToggleStyleModifier<CheckmarkToggleStyle>(255, &lazy cache variable for type metadata for ToggleStyleModifier<CheckmarkToggleStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type CheckmarkToggleStyle and conformance CheckmarkToggleStyle, (uint64_t)&type metadata for CheckmarkToggleStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ToggleStyleModifier);
  uint64_t v31 = v4;
  uint64_t v5 = type metadata accessor for ModifiedContent();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v58 = lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>((unint64_t *)&lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>, (unint64_t *)&lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>, (uint64_t)&type metadata for ToolbarButtonLabelModifier, (void (*)(void))lazy protocol witness table accessor for type ToolbarButtonLabelModifier and conformance ToolbarButtonLabelModifier);
  uint64_t v6 = swift_getWitnessTable();
  uint64_t v55 = swift_getWitnessTable();
  unint64_t v56 = lazy protocol witness table accessor for type StyleContextWriter<MenuStyleContext> and conformance StyleContextWriter<A>();
  uint64_t v7 = swift_getWitnessTable();
  uint64_t v53 = v7;
  uint64_t v54 = &protocol witness table for ToggleStyleModifier<A>;
  uint64_t v59 = v3;
  uint64_t v60 = v5;
  uint64_t v61 = v6;
  uint64_t v62 = swift_getWitnessTable();
  type metadata accessor for UIKitMenuButton();
  type metadata accessor for UIKitSystemButtonConfigurationModifier(255);
  void v30[3] = type metadata accessor for ModifiedContent();
  v30[2] = type metadata accessor for LabeledContent();
  type metadata accessor for ToggleStyleModifier<CheckmarkToggleStyle>(255, &lazy cache variable for type metadata for ViewInputFlagModifier<AccessibilityCombinedLabeledContent>, (uint64_t (*)(void))lazy protocol witness table accessor for type AccessibilityCombinedLabeledContent and conformance AccessibilityCombinedLabeledContent, (uint64_t)&type metadata for AccessibilityCombinedLabeledContent, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ViewInputFlagModifier);
  type metadata accessor for ModifiedContent();
  type metadata accessor for StaticIf<HideLabelPredicate, LabelsHiddenModifier, EmptyModifier>();
  v30[4] = type metadata accessor for ModifiedContent();
  type metadata accessor for StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier>, EmptyModifier>();
  uint64_t v32 = type metadata accessor for ModifiedContent();
  type metadata accessor for StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, PlatformItemListContentModifier, EmptyModifier>(255, (unint64_t *)&lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, PlatformItemTintModifier, EmptyModifier>);
  uint64_t v33 = type metadata accessor for ModifiedContent();
  type metadata accessor for StyleContextAcceptsPredicate<ToolbarStyleContext>(255, &lazy cache variable for type metadata for _EnvironmentKeyTransformModifier<MenuOrder>, (uint64_t)&type metadata for MenuOrder, MEMORY[0x1E4F41280]);
  uint64_t v8 = type metadata accessor for ModifiedContent();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  uint64_t v11 = (char *)v30 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v12);
  uint64_t v14 = (char *)v30 - v13;
  uint64_t v15 = type metadata accessor for PopUpButton();
  int v16 = PopUpButton.toolbarMenuIndicatorVisibility.getter(v15);
  PopUpButton.menuButton<A>(content:flexibleDimensions:menuIndicatorVisibility:)(v35, 0, v16, v15, v31, v7, (uint64_t)v11);
  uint64_t v17 = lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>(&lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, PlatformItemListContentModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>, &lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, PlatformItemListContentModifier, EmptyModifier>, (uint64_t)&type metadata for PlatformItemListContentModifier, (void (*)(void))lazy protocol witness table accessor for type PlatformItemListContentModifier and conformance PlatformItemListContentModifier);
  uint64_t v51 = &protocol witness table for PickerStyleConfiguration<A>.Label;
  uint64_t v52 = v17;
  uint64_t v18 = swift_getWitnessTable();
  uint64_t v49 = &protocol witness table for UIKitMenuButton<A, B>;
  uint64_t v50 = &protocol witness table for UIKitSystemButtonConfigurationModifier;
  uint64_t v19 = swift_getWitnessTable();
  uint64_t v47 = v18;
  uint64_t v48 = v19;
  uint64_t v45 = swift_getWitnessTable();
  uint64_t v46 = &protocol witness table for ViewInputFlagModifier<A>;
  uint64_t v20 = swift_getWitnessTable();
  uint64_t v21 = _s7SwiftUI8StaticIfVyAA19_SemanticFeature_v5VAA33AllowsToolbarItemBridgingModifierVAA05EmptyL0VGACyxq_q0_GAA04ViewL0A2aLR_AaLR0_rlWlTm_0(&lazy protocol witness table cache variable for type StaticIf<HideLabelPredicate, LabelsHiddenModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>, (void (*)(uint64_t))type metadata accessor for StaticIf<HideLabelPredicate, LabelsHiddenModifier, EmptyModifier>, (void (*)(void))lazy protocol witness table accessor for type LabelsHiddenModifier and conformance LabelsHiddenModifier);
  uint64_t v43 = v20;
  uint64_t v44 = v21;
  uint64_t v22 = swift_getWitnessTable();
  uint64_t v23 = _s7SwiftUI8StaticIfVyAA19_SemanticFeature_v5VAA33AllowsToolbarItemBridgingModifierVAA05EmptyL0VGACyxq_q0_GAA04ViewL0A2aLR_AaLR0_rlWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier>, EmptyModifier> and conformance <> StaticIf<A, B, C>, (void (*)(uint64_t))type metadata accessor for StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier>, EmptyModifier>, (void (*)(void))lazy protocol witness table accessor for type StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>);
  uint64_t v41 = v22;
  uint64_t v42 = v23;
  uint64_t v24 = swift_getWitnessTable();
  uint64_t v25 = lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>(&lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, PlatformItemTintModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>, (unint64_t *)&lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, PlatformItemTintModifier, EmptyModifier>, (uint64_t)&type metadata for PlatformItemTintModifier, (void (*)(void))lazy protocol witness table accessor for type PlatformItemTintModifier and conformance PlatformItemTintModifier);
  uint64_t v39 = v24;
  uint64_t v40 = v25;
  uint64_t v26 = swift_getWitnessTable();
  unint64_t v27 = lazy protocol witness table accessor for type _EnvironmentKeyTransformModifier<MenuOrder> and conformance _EnvironmentKeyTransformModifier<A>();
  uint64_t v37 = v26;
  unint64_t v38 = v27;
  swift_getWitnessTable();
  static ViewBuilder.buildExpression<A>(_:)(v11);
  unint64_t v28 = *(void (**)(char *, uint64_t))(v9 + 8);
  v28(v11, v8);
  static ViewBuilder.buildExpression<A>(_:)(v14);
  return ((uint64_t (*)(char *, uint64_t))v28)(v14, v8);
}

uint64_t PopUpButton.toolbarMenuIndicatorVisibility.getter(uint64_t a1)
{
  uint64_t v2 = v1 + *(int *)(a1 + 44);
  uint64_t v3 = *(void *)v2;
  char v4 = *(unsigned char *)(v2 + 8);
  outlined copy of Environment<Bool>.Content(*(void *)v2, v4);
  int v5 = specialized Environment.wrappedValue.getter(v3, v4);
  outlined consume of Environment<Bool>.Content(v3, v4);
  if (v5 == 1) {
    return 1;
  }
  else {
    return 2;
  }
}

uint64_t PopUpButton.menuButton<A>(content:flexibleDimensions:menuIndicatorVisibility:)@<X0>(uint64_t a1@<X0>, int a2@<W1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v58 = a1;
  uint64_t v49 = a5;
  int v56 = a2;
  int v57 = a3;
  uint64_t v60 = a7;
  uint64_t v9 = *(void *)(a4 + 16);
  uint64_t v8 = *(void *)(a4 + 24);
  type metadata accessor for PickerStyleConfiguration.Label();
  type metadata accessor for StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, PlatformItemListContentModifier, EmptyModifier>(255, &lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, PlatformItemListContentModifier, EmptyModifier>);
  uint64_t v44 = type metadata accessor for ModifiedContent();
  type metadata accessor for PickerStyleConfiguration.Content();
  type metadata accessor for PickerCurrentValueLabel();
  type metadata accessor for StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, PlatformItemListContentModifier, EmptyModifier>(255, (unint64_t *)&lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>);
  uint64_t v10 = type metadata accessor for ModifiedContent();
  type metadata accessor for ToggleStyleModifier<CheckmarkToggleStyle>(255, &lazy cache variable for type metadata for ToggleStyleModifier<CheckmarkToggleStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type CheckmarkToggleStyle and conformance CheckmarkToggleStyle, (uint64_t)&type metadata for CheckmarkToggleStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ToggleStyleModifier);
  uint64_t v11 = type metadata accessor for ModifiedContent();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v91 = lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>((unint64_t *)&lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>, (unint64_t *)&lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>, (uint64_t)&type metadata for ToolbarButtonLabelModifier, (void (*)(void))lazy protocol witness table accessor for type ToolbarButtonLabelModifier and conformance ToolbarButtonLabelModifier);
  uint64_t v88 = a6;
  id v89 = &protocol witness table for ToggleStyleModifier<A>;
  uint64_t v92 = v10;
  uint64_t v93 = v11;
  uint64_t v94 = swift_getWitnessTable();
  uint64_t v95 = swift_getWitnessTable();
  type metadata accessor for UIKitMenuButton();
  type metadata accessor for UIKitSystemButtonConfigurationModifier(255);
  type metadata accessor for ModifiedContent();
  uint64_t v12 = type metadata accessor for LabeledContent();
  uint64_t v51 = *(void *)(v12 - 8);
  MEMORY[0x1F4188790](v12);
  uint64_t v45 = (uint64_t)&v42 - v13;
  type metadata accessor for ToggleStyleModifier<CheckmarkToggleStyle>(255, &lazy cache variable for type metadata for ViewInputFlagModifier<AccessibilityCombinedLabeledContent>, (uint64_t (*)(void))lazy protocol witness table accessor for type AccessibilityCombinedLabeledContent and conformance AccessibilityCombinedLabeledContent, (uint64_t)&type metadata for AccessibilityCombinedLabeledContent, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ViewInputFlagModifier);
  uint64_t v14 = type metadata accessor for ModifiedContent();
  uint64_t v50 = *(void *)(v14 - 8);
  MEMORY[0x1F4188790](v14);
  uint64_t v42 = (char *)&v42 - v15;
  type metadata accessor for StaticIf<HideLabelPredicate, LabelsHiddenModifier, EmptyModifier>();
  uint64_t v16 = type metadata accessor for ModifiedContent();
  uint64_t v52 = *(void *)(v16 - 8);
  MEMORY[0x1F4188790](v16);
  uint64_t v43 = (char *)&v42 - v17;
  type metadata accessor for StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier>, EmptyModifier>();
  uint64_t v48 = type metadata accessor for ModifiedContent();
  uint64_t v53 = *(void *)(v48 - 8);
  MEMORY[0x1F4188790](v48);
  uint64_t v46 = (char *)&v42 - v18;
  type metadata accessor for StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, PlatformItemListContentModifier, EmptyModifier>(255, (unint64_t *)&lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, PlatformItemTintModifier, EmptyModifier>);
  uint64_t v19 = type metadata accessor for ModifiedContent();
  uint64_t v20 = *(void *)(v19 - 8);
  uint64_t v54 = v19;
  uint64_t v55 = v20;
  MEMORY[0x1F4188790](v19);
  uint64_t v47 = (char *)&v42 - v21;
  uint64_t v66 = v9;
  uint64_t v67 = v49;
  uint64_t v68 = v8;
  uint64_t v69 = a6;
  char v70 = v56;
  char v71 = v57;
  uint64_t v72 = v59;
  uint64_t v73 = v58;
  uint64_t v61 = v9;
  uint64_t v62 = v49;
  uint64_t v63 = v8;
  uint64_t v64 = a6;
  uint64_t v65 = v59;
  uint64_t v22 = lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>(&lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, PlatformItemListContentModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>, &lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, PlatformItemListContentModifier, EmptyModifier>, (uint64_t)&type metadata for PlatformItemListContentModifier, (void (*)(void))lazy protocol witness table accessor for type PlatformItemListContentModifier and conformance PlatformItemListContentModifier);
  long long v86 = &protocol witness table for PickerStyleConfiguration<A>.Label;
  uint64_t v87 = v22;
  uint64_t v23 = swift_getWitnessTable();
  uint64_t v84 = &protocol witness table for UIKitMenuButton<A, B>;
  long long v85 = &protocol witness table for UIKitSystemButtonConfigurationModifier;
  uint64_t v24 = swift_getWitnessTable();
  uint64_t v25 = v45;
  LabeledContent<>.init(content:label:)((uint64_t (*)(void))partial apply for closure #1 in PopUpButton.menuButton<A>(content:flexibleDimensions:menuIndicatorVisibility:), (uint64_t (*)(uint64_t))partial apply for closure #2 in PopUpButton.menuButton<A>(content:flexibleDimensions:menuIndicatorVisibility:), v45);
  uint64_t v82 = v23;
  uint64_t v83 = v24;
  uint64_t v26 = swift_getWitnessTable();
  unint64_t v27 = lazy protocol witness table accessor for type AccessibilityCombinedLabeledContent and conformance AccessibilityCombinedLabeledContent();
  unint64_t v28 = v42;
  View.input<A>(_:)((uint64_t)&type metadata for AccessibilityCombinedLabeledContent, v12, (uint64_t)&type metadata for AccessibilityCombinedLabeledContent, v26, v27);
  (*(void (**)(uint64_t, uint64_t))(v51 + 8))(v25, v12);
  uint64_t v80 = v26;
  uint64_t v81 = &protocol witness table for ViewInputFlagModifier<A>;
  uint64_t v29 = swift_getWitnessTable();
  type metadata accessor for StaticIf<HideLabelPredicate, LabelsHiddenModifier, EmptyModifier>();
  uint64_t v30 = v43;
  MEMORY[0x18C113660](v31, v14, v31, v29);
  (*(void (**)(char *, uint64_t))(v50 + 8))(v28, v14);
  uint64_t v32 = _s7SwiftUI8StaticIfVyAA19_SemanticFeature_v5VAA33AllowsToolbarItemBridgingModifierVAA05EmptyL0VGACyxq_q0_GAA04ViewL0A2aLR_AaLR0_rlWlTm_0(&lazy protocol witness table cache variable for type StaticIf<HideLabelPredicate, LabelsHiddenModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>, (void (*)(uint64_t))type metadata accessor for StaticIf<HideLabelPredicate, LabelsHiddenModifier, EmptyModifier>, (void (*)(void))lazy protocol witness table accessor for type LabelsHiddenModifier and conformance LabelsHiddenModifier);
  uint64_t v78 = v29;
  uint64_t v79 = v32;
  uint64_t v33 = swift_getWitnessTable();
  uint64_t v34 = v46;
  View.allowsToolbarItemBridging(options:)(1, v16, v33);
  (*(void (**)(char *, uint64_t))(v52 + 8))(v30, v16);
  uint64_t v35 = _s7SwiftUI8StaticIfVyAA19_SemanticFeature_v5VAA33AllowsToolbarItemBridgingModifierVAA05EmptyL0VGACyxq_q0_GAA04ViewL0A2aLR_AaLR0_rlWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier>, EmptyModifier> and conformance <> StaticIf<A, B, C>, (void (*)(uint64_t))type metadata accessor for StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier>, EmptyModifier>, (void (*)(void))lazy protocol witness table accessor for type StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>);
  uint64_t v76 = v33;
  uint64_t v77 = v35;
  uint64_t v36 = v48;
  uint64_t v37 = swift_getWitnessTable();
  unint64_t v38 = v47;
  View.toolbarPlatformItemTint()(v36, v37);
  (*(void (**)(char *, uint64_t))(v53 + 8))(v34, v36);
  swift_getKeyPath();
  uint64_t v39 = lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>(&lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, PlatformItemTintModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>, (unint64_t *)&lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, PlatformItemTintModifier, EmptyModifier>, (uint64_t)&type metadata for PlatformItemTintModifier, (void (*)(void))lazy protocol witness table accessor for type PlatformItemTintModifier and conformance PlatformItemTintModifier);
  uint64_t v74 = v37;
  uint64_t v75 = v39;
  uint64_t v40 = v54;
  swift_getWitnessTable();
  View.transformEnvironment<A>(_:transform:)();
  swift_release();
  return (*(uint64_t (**)(char *, uint64_t))(v55 + 8))(v38, v40);
}

uint64_t closure #2 in PopUpButton.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v33 = a2;
  uint64_t v34 = a1;
  uint64_t v35 = a3;
  type metadata accessor for PickerStyleConfiguration.Label();
  type metadata accessor for StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, PlatformItemListContentModifier, EmptyModifier>(255, &lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, PlatformItemListContentModifier, EmptyModifier>);
  v29[0] = type metadata accessor for ModifiedContent();
  type metadata accessor for PickerStyleConfiguration.Content();
  type metadata accessor for PickerCurrentValueLabel();
  type metadata accessor for StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, PlatformItemListContentModifier, EmptyModifier>(255, (unint64_t *)&lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>);
  uint64_t v3 = type metadata accessor for ModifiedContent();
  type metadata accessor for PickerContentView();
  type metadata accessor for StyleContextWriter<MenuStyleContext>();
  uint64_t v4 = type metadata accessor for ModifiedContent();
  type metadata accessor for ToggleStyleModifier<CheckmarkToggleStyle>(255, &lazy cache variable for type metadata for ToggleStyleModifier<CheckmarkToggleStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type CheckmarkToggleStyle and conformance CheckmarkToggleStyle, (uint64_t)&type metadata for CheckmarkToggleStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ToggleStyleModifier);
  uint64_t v30 = v4;
  uint64_t v5 = type metadata accessor for ModifiedContent();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v57 = lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>((unint64_t *)&lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>, (unint64_t *)&lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>, (uint64_t)&type metadata for ToolbarButtonLabelModifier, (void (*)(void))lazy protocol witness table accessor for type ToolbarButtonLabelModifier and conformance ToolbarButtonLabelModifier);
  uint64_t v6 = swift_getWitnessTable();
  uint64_t v54 = swift_getWitnessTable();
  unint64_t v55 = lazy protocol witness table accessor for type StyleContextWriter<MenuStyleContext> and conformance StyleContextWriter<A>();
  uint64_t v7 = swift_getWitnessTable();
  uint64_t v52 = v7;
  uint64_t v53 = &protocol witness table for ToggleStyleModifier<A>;
  uint64_t v58 = v3;
  uint64_t v59 = v5;
  uint64_t v60 = v6;
  uint64_t v61 = swift_getWitnessTable();
  type metadata accessor for UIKitMenuButton();
  type metadata accessor for UIKitSystemButtonConfigurationModifier(255);
  type metadata accessor for ModifiedContent();
  v29[1] = type metadata accessor for LabeledContent();
  type metadata accessor for ToggleStyleModifier<CheckmarkToggleStyle>(255, &lazy cache variable for type metadata for ViewInputFlagModifier<AccessibilityCombinedLabeledContent>, (uint64_t (*)(void))lazy protocol witness table accessor for type AccessibilityCombinedLabeledContent and conformance AccessibilityCombinedLabeledContent, (uint64_t)&type metadata for AccessibilityCombinedLabeledContent, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ViewInputFlagModifier);
  type metadata accessor for ModifiedContent();
  type metadata accessor for StaticIf<HideLabelPredicate, LabelsHiddenModifier, EmptyModifier>();
  v29[2] = type metadata accessor for ModifiedContent();
  type metadata accessor for StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier>, EmptyModifier>();
  uint64_t v31 = type metadata accessor for ModifiedContent();
  type metadata accessor for StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, PlatformItemListContentModifier, EmptyModifier>(255, (unint64_t *)&lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, PlatformItemTintModifier, EmptyModifier>);
  uint64_t v32 = type metadata accessor for ModifiedContent();
  type metadata accessor for StyleContextAcceptsPredicate<ToolbarStyleContext>(255, &lazy cache variable for type metadata for _EnvironmentKeyTransformModifier<MenuOrder>, (uint64_t)&type metadata for MenuOrder, MEMORY[0x1E4F41280]);
  uint64_t v8 = type metadata accessor for ModifiedContent();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  uint64_t v11 = (char *)v29 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v12);
  uint64_t v14 = (char *)v29 - v13;
  uint64_t v15 = type metadata accessor for PopUpButton();
  PopUpButton.menuButton<A>(content:flexibleDimensions:menuIndicatorVisibility:)(v33, 0, 3, v15, v30, v7, (uint64_t)v11);
  uint64_t v16 = lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>(&lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, PlatformItemListContentModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>, &lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, PlatformItemListContentModifier, EmptyModifier>, (uint64_t)&type metadata for PlatformItemListContentModifier, (void (*)(void))lazy protocol witness table accessor for type PlatformItemListContentModifier and conformance PlatformItemListContentModifier);
  uint64_t v50 = &protocol witness table for PickerStyleConfiguration<A>.Label;
  uint64_t v51 = v16;
  uint64_t v17 = swift_getWitnessTable();
  uint64_t v48 = &protocol witness table for UIKitMenuButton<A, B>;
  uint64_t v49 = &protocol witness table for UIKitSystemButtonConfigurationModifier;
  uint64_t v18 = swift_getWitnessTable();
  uint64_t v46 = v17;
  uint64_t v47 = v18;
  uint64_t v44 = swift_getWitnessTable();
  uint64_t v45 = &protocol witness table for ViewInputFlagModifier<A>;
  uint64_t v19 = swift_getWitnessTable();
  uint64_t v20 = _s7SwiftUI8StaticIfVyAA19_SemanticFeature_v5VAA33AllowsToolbarItemBridgingModifierVAA05EmptyL0VGACyxq_q0_GAA04ViewL0A2aLR_AaLR0_rlWlTm_0(&lazy protocol witness table cache variable for type StaticIf<HideLabelPredicate, LabelsHiddenModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>, (void (*)(uint64_t))type metadata accessor for StaticIf<HideLabelPredicate, LabelsHiddenModifier, EmptyModifier>, (void (*)(void))lazy protocol witness table accessor for type LabelsHiddenModifier and conformance LabelsHiddenModifier);
  uint64_t v42 = v19;
  uint64_t v43 = v20;
  uint64_t v21 = swift_getWitnessTable();
  uint64_t v22 = _s7SwiftUI8StaticIfVyAA19_SemanticFeature_v5VAA33AllowsToolbarItemBridgingModifierVAA05EmptyL0VGACyxq_q0_GAA04ViewL0A2aLR_AaLR0_rlWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier>, EmptyModifier> and conformance <> StaticIf<A, B, C>, (void (*)(uint64_t))type metadata accessor for StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier>, EmptyModifier>, (void (*)(void))lazy protocol witness table accessor for type StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>);
  uint64_t v40 = v21;
  uint64_t v41 = v22;
  uint64_t v23 = swift_getWitnessTable();
  uint64_t v24 = lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>(&lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, PlatformItemTintModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>, (unint64_t *)&lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, PlatformItemTintModifier, EmptyModifier>, (uint64_t)&type metadata for PlatformItemTintModifier, (void (*)(void))lazy protocol witness table accessor for type PlatformItemTintModifier and conformance PlatformItemTintModifier);
  uint64_t v38 = v23;
  uint64_t v39 = v24;
  uint64_t v25 = swift_getWitnessTable();
  unint64_t v26 = lazy protocol witness table accessor for type _EnvironmentKeyTransformModifier<MenuOrder> and conformance _EnvironmentKeyTransformModifier<A>();
  uint64_t v36 = v25;
  unint64_t v37 = v26;
  swift_getWitnessTable();
  static ViewBuilder.buildExpression<A>(_:)(v11);
  unint64_t v27 = *(void (**)(char *, uint64_t))(v9 + 8);
  v27(v11, v8);
  static ViewBuilder.buildExpression<A>(_:)(v14);
  return ((uint64_t (*)(char *, uint64_t))v27)(v14, v8);
}

uint64_t closure #1 in PopUpButton.menuButton<A>(content:flexibleDimensions:menuIndicatorVisibility:)@<X0>(int a1@<W0>, int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v58 = a4;
  uint64_t v66 = a3;
  int v55 = a1;
  uint64_t v56 = a9;
  int v65 = a2;
  LODWORD(v57) = a2;
  uint64_t v13 = type metadata accessor for UIButton.Configuration();
  uint64_t v63 = *(void *)(v13 - 8);
  uint64_t v64 = v13;
  MEMORY[0x1F4188790](v13);
  uint64_t v15 = (char *)&v48 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for PopUpButton();
  uint64_t v17 = *(void *)(v16 - 8);
  MEMORY[0x1F4188790](v16);
  uint64_t v19 = (char *)&v48 - v18;
  uint64_t v73 = type metadata accessor for PickerStyleConfiguration.Content();
  uint64_t v74 = a5;
  uint64_t v59 = a5;
  uint64_t v75 = &protocol witness table for PickerStyleConfiguration<A>.Content;
  uint64_t v76 = a7;
  uint64_t v61 = a7;
  type metadata accessor for PickerCurrentValueLabel();
  type metadata accessor for StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, PlatformItemListContentModifier, EmptyModifier>(255, (unint64_t *)&lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>);
  uint64_t v20 = type metadata accessor for ModifiedContent();
  type metadata accessor for ToggleStyleModifier<CheckmarkToggleStyle>(255, &lazy cache variable for type metadata for ToggleStyleModifier<CheckmarkToggleStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type CheckmarkToggleStyle and conformance CheckmarkToggleStyle, (uint64_t)&type metadata for CheckmarkToggleStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ToggleStyleModifier);
  uint64_t v60 = a6;
  uint64_t v21 = type metadata accessor for ModifiedContent();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v23 = lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>((unint64_t *)&lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>, (unint64_t *)&lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>, (uint64_t)&type metadata for ToolbarButtonLabelModifier, (void (*)(void))lazy protocol witness table accessor for type ToolbarButtonLabelModifier and conformance ToolbarButtonLabelModifier);
  uint64_t v71 = WitnessTable;
  uint64_t v72 = v23;
  uint64_t v24 = swift_getWitnessTable();
  uint64_t v62 = a8;
  uint64_t v69 = a8;
  char v70 = &protocol witness table for ToggleStyleModifier<A>;
  uint64_t v25 = swift_getWitnessTable();
  uint64_t v54 = v20;
  uint64_t v73 = v20;
  uint64_t v74 = v21;
  uint64_t v53 = v21;
  uint64_t v50 = v24;
  uint64_t v75 = (_UNKNOWN **)v24;
  uint64_t v76 = v25;
  uint64_t v49 = v25;
  uint64_t v26 = type metadata accessor for UIKitMenuButton();
  uint64_t v51 = *(void *)(v26 - 8);
  MEMORY[0x1F4188790](v26);
  unint64_t v28 = (char *)&v48 - v27;
  type metadata accessor for UIKitSystemButtonConfigurationModifier(255);
  uint64_t v29 = type metadata accessor for ModifiedContent();
  uint64_t v52 = *(void *)(v29 - 8);
  MEMORY[0x1F4188790](v29);
  uint64_t v31 = (char *)&v48 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v33 = MEMORY[0x1F4188790](v32);
  uint64_t v35 = (char *)&v48 - v34;
  uint64_t v36 = v16;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v17 + 16))(v19, v66, v16, v33);
  if (v57 == 3)
  {
    unint64_t v37 = &v19[*(int *)(v16 + 44)];
    uint64_t v38 = *(void *)v37;
    uint64_t v57 = v19;
    uint64_t v39 = v17;
    uint64_t v40 = v36;
    char v41 = v37[8];
    outlined copy of Environment<Bool>.Content(v38, v41);
    int v65 = specialized Environment.wrappedValue.getter(v38, v41);
    char v42 = v41;
    uint64_t v36 = v40;
    uint64_t v17 = v39;
    uint64_t v19 = v57;
    outlined consume of Environment<Bool>.Content(v38, v42);
  }
  uint64_t v43 = (*(uint64_t (**)(char *, uint64_t))(v17 + 8))(v19, v36);
  MEMORY[0x1F4188790](v43);
  MEMORY[0x1F4188790](v59);
  v47[7] = v49;
  v47[6] = v50;
  v47[5] = v53;
  _OWORD v47[3] = v47;
  v47[4] = v54;
  UIKitMenuButton.init(action:isPopUpButton:flexibleDimensions:menuTitleVisibility:menuIndicatorVisibility:onPresentationChanged:menuContent:label:)(0, 0, 1, v55, 2, v65, 0, 0, (uint64_t)v28, (void (*)(uint64_t))partial apply for closure #1 in closure #1 in PopUpButton.menuButton<A>(content:flexibleDimensions:menuIndicatorVisibility:), v44, (void (*)(uint64_t))partial apply for closure #2 in closure #1 in PopUpButton.menuButton<A>(content:flexibleDimensions:menuIndicatorVisibility:));
  static UIButton.Configuration.bordered()();
  View.uikitButtonConfiguration(_:)((uint64_t)v15, v26, (uint64_t)&protocol witness table for UIKitMenuButton<A, B>);
  (*(void (**)(char *, uint64_t))(v63 + 8))(v15, v64);
  (*(void (**)(char *, uint64_t))(v51 + 8))(v28, v26);
  uint64_t v67 = &protocol witness table for UIKitMenuButton<A, B>;
  uint64_t v68 = &protocol witness table for UIKitSystemButtonConfigurationModifier;
  swift_getWitnessTable();
  static ViewBuilder.buildExpression<A>(_:)(v31);
  uint64_t v45 = *(void (**)(char *, uint64_t))(v52 + 8);
  v45(v31, v29);
  static ViewBuilder.buildExpression<A>(_:)(v35);
  return ((uint64_t (*)(char *, uint64_t))v45)(v35, v29);
}

uint64_t closure #1 in closure #1 in PopUpButton.menuButton<A>(content:flexibleDimensions:menuIndicatorVisibility:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X4>, uint64_t a4@<X8>)
{
  uint64_t v26 = a3;
  uint64_t v27 = a1;
  uint64_t v29 = a4;
  type metadata accessor for ToggleStyleModifier<CheckmarkToggleStyle>(255, &lazy cache variable for type metadata for ToggleStyleModifier<CheckmarkToggleStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type CheckmarkToggleStyle and conformance CheckmarkToggleStyle, (uint64_t)&type metadata for CheckmarkToggleStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ToggleStyleModifier);
  uint64_t v5 = type metadata accessor for ModifiedContent();
  uint64_t v28 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v24 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v7);
  uint64_t v25 = (char *)&v23 - v8;
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v10 = swift_getKeyPath();
  uint64_t v11 = swift_getKeyPath();
  uint64_t v47 = 0x4038000000000000;
  lazy protocol witness table accessor for type CGFloat and conformance CGFloat();
  ScaledMetric.init(wrappedValue:)();
  uint64_t v12 = v32;
  char v13 = v33;
  uint64_t v14 = v34;
  char v15 = v35;
  uint64_t v16 = v36;
  char v17 = v37;
  uint64_t v32 = KeyPath;
  char v33 = 0;
  uint64_t v34 = v10;
  char v35 = 0;
  uint64_t v36 = v11;
  uint64_t v37 = 0;
  uint64_t v38 = 0;
  uint64_t v39 = 0;
  char v40 = 0;
  uint64_t v41 = v12;
  char v42 = v13;
  uint64_t v43 = v14;
  char v44 = v15;
  uint64_t v45 = v16;
  char v46 = v17;
  lazy protocol witness table accessor for type CheckmarkToggleStyle and conformance CheckmarkToggleStyle();
  uint64_t v18 = v26;
  View.toggleStyle<A>(_:)((uint64_t)&v32, a2, (uint64_t)&type metadata for CheckmarkToggleStyle, v26);
  outlined consume of Environment<Bool>.Content(KeyPath, 0);
  outlined consume of Environment<Bool>.Content(v10, 0);
  outlined consume of Environment<HoverEffectContext?>.Content(v11, 0, 0, 0, 0);
  outlined consume of Environment<Bool>.Content(v12, v13);
  outlined consume of Environment<Bool>.Content(v14, v15);
  uint64_t v30 = v18;
  uint64_t v31 = &protocol witness table for ToggleStyleModifier<A>;
  swift_getWitnessTable();
  uint64_t v19 = v25;
  uint64_t v20 = v24;
  static ViewBuilder.buildExpression<A>(_:)(v24);
  uint64_t v21 = *(void (**)(char *, uint64_t))(v28 + 8);
  v21(v20, v5);
  static ViewBuilder.buildExpression<A>(_:)(v19);
  return ((uint64_t (*)(char *, uint64_t))v21)(v19, v5);
}

uint64_t closure #2 in closure #1 in PopUpButton.menuButton<A>(content:flexibleDimensions:menuIndicatorVisibility:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  v21[1] = a3;
  void v21[4] = type metadata accessor for PickerStyleConfiguration.Content();
  v21[5] = a1;
  v21[6] = &protocol witness table for PickerStyleConfiguration<A>.Content;
  v21[7] = a2;
  uint64_t v5 = type metadata accessor for PickerCurrentValueLabel();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v8 = (char *)v21 - v7;
  type metadata accessor for StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, PlatformItemListContentModifier, EmptyModifier>(255, (unint64_t *)&lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>);
  uint64_t v9 = type metadata accessor for ModifiedContent();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9);
  uint64_t v12 = (char *)v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v13);
  char v15 = (char *)v21 - v14;
  uint64_t v16 = type metadata accessor for PopUpButton();
  PopUpButton.detailLabel.getter(v16, v8);
  uint64_t WitnessTable = swift_getWitnessTable();
  View.toolbarButtonLabel(ignoreEdge:)(0, v5, WitnessTable);
  (*(void (**)(unsigned char *, uint64_t))(v6 + 8))(v8, v5);
  uint64_t v18 = lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>((unint64_t *)&lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>, (unint64_t *)&lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>, (uint64_t)&type metadata for ToolbarButtonLabelModifier, (void (*)(void))lazy protocol witness table accessor for type ToolbarButtonLabelModifier and conformance ToolbarButtonLabelModifier);
  v21[2] = WitnessTable;
  void v21[3] = v18;
  swift_getWitnessTable();
  static ViewBuilder.buildExpression<A>(_:)(v12);
  uint64_t v19 = *(void (**)(char *, uint64_t))(v10 + 8);
  v19(v12, v9);
  static ViewBuilder.buildExpression<A>(_:)(v15);
  return ((uint64_t (*)(char *, uint64_t))v19)(v15, v9);
}

uint64_t closure #2 in PopUpButton.menuButton<A>(content:flexibleDimensions:menuIndicatorVisibility:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(a2, a4, a3, a4);
  uint64_t v4 = type metadata accessor for PickerStyleConfiguration.Label();
  type metadata accessor for StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, PlatformItemListContentModifier, EmptyModifier>(0, &lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, PlatformItemListContentModifier, EmptyModifier>);
  MEMORY[0x18C113660](v5, v4, v5, &protocol witness table for PickerStyleConfiguration<A>.Label);
  type metadata accessor for StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, PlatformItemListContentModifier, EmptyModifier>(255, &lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, PlatformItemListContentModifier, EmptyModifier>);
  type metadata accessor for ModifiedContent();
  lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>(&lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, PlatformItemListContentModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>, &lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, PlatformItemListContentModifier, EmptyModifier>, (uint64_t)&type metadata for PlatformItemListContentModifier, (void (*)(void))lazy protocol witness table accessor for type PlatformItemListContentModifier and conformance PlatformItemListContentModifier);
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v7 = static ViewBuilder.buildExpression<A>(_:)(WitnessTable);
  return static ViewBuilder.buildExpression<A>(_:)(v7);
}

unsigned char *closure #3 in PopUpButton.menuButton<A>(content:flexibleDimensions:menuIndicatorVisibility:)(unsigned char *result)
{
  if (!*result) {
    *double result = 1;
  }
  return result;
}

unint64_t PopUpButton.init(children:configuration:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  type metadata accessor for PickerStyleConfiguration.CurrentValueLabel();
  swift_getWitnessTable();
  *(unsigned char *)a3 = protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key() & 1;
  long long v6 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(a3 + 8) = *(_OWORD *)a1;
  *(_OWORD *)(a3 + 24) = v6;
  *(_OWORD *)(a3 + 40) = *(_OWORD *)(a1 + 32);
  *(void *)(a3 + 56) = *(void *)(a1 + 48);
  uint64_t v7 = (int *)type metadata accessor for PopUpButton();
  uint64_t v8 = a3 + v7[10];
  uint64_t v9 = type metadata accessor for PickerStyleConfiguration();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32))(v8, a2, v9);
  uint64_t v10 = a3 + v7[11];
  *(void *)uint64_t v10 = swift_getKeyPath();
  *(unsigned char *)(v10 + 8) = 0;
  uint64_t v11 = (void *)(a3 + v7[12]);
  unint64_t result = lazy protocol witness table accessor for type AnyButtonStyleType.Unknown and conformance AnyButtonStyleType.Unknown();
  *uint64_t v11 = &type metadata for AnyButtonStyleType.Unknown;
  v11[1] = result;
  return result;
}

void type metadata accessor for ToggleStyleModifier<CheckmarkToggleStyle>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void), uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v9 = a3();
    unint64_t v10 = a5(a1, a4, v9);
    if (!v11) {
      atomic_store(v10, a2);
    }
  }
}

void type metadata accessor for StaticIf<HideLabelPredicate, LabelsHiddenModifier, EmptyModifier>()
{
  if (!lazy cache variable for type metadata for StaticIf<HideLabelPredicate, LabelsHiddenModifier, EmptyModifier>)
  {
    lazy protocol witness table accessor for type HideLabelPredicate and conformance HideLabelPredicate();
    unint64_t v0 = type metadata accessor for StaticIf();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for StaticIf<HideLabelPredicate, LabelsHiddenModifier, EmptyModifier>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type HideLabelPredicate and conformance HideLabelPredicate()
{
  unint64_t result = lazy protocol witness table cache variable for type HideLabelPredicate and conformance HideLabelPredicate;
  if (!lazy protocol witness table cache variable for type HideLabelPredicate and conformance HideLabelPredicate)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HideLabelPredicate and conformance HideLabelPredicate);
  }
  return result;
}

void type metadata accessor for StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, PlatformItemListContentModifier, EmptyModifier>(uint64_t a1, unint64_t *a2)
{
  if (!*a2)
  {
    type metadata accessor for StyleContextAcceptsPredicate<ToolbarStyleContext>(255, (unint64_t *)&lazy cache variable for type metadata for StyleContextAcceptsPredicate<ToolbarStyleContext>, MEMORY[0x1E4F40520], MEMORY[0x1E4F410E8]);
    lazy protocol witness table accessor for type StyleContextAcceptsPredicate<ToolbarStyleContext> and conformance StyleContextAcceptsPredicate<A>();
    unint64_t v3 = type metadata accessor for StaticIf();
    if (!v4) {
      atomic_store(v3, a2);
    }
  }
}

uint64_t partial apply for closure #1 in PopUpButton.body.getter@<X0>(uint64_t a1@<X8>)
{
  return closure #1 in PopUpButton.body.getter(*(void *)(v1 + 32), *(void *)(v1 + 40), a1);
}

uint64_t partial apply for closure #2 in PopUpButton.body.getter@<X0>(uint64_t a1@<X8>)
{
  return closure #2 in PopUpButton.body.getter(*(void *)(v1 + 32), *(void *)(v1 + 40), a1);
}

uint64_t lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>(unint64_t *a1, unint64_t *a2, uint64_t a3, void (*a4)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, PlatformItemListContentModifier, EmptyModifier>(255, a2);
    a4();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _EnvironmentKeyTransformModifier<MenuOrder> and conformance _EnvironmentKeyTransformModifier<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type _EnvironmentKeyTransformModifier<MenuOrder> and conformance _EnvironmentKeyTransformModifier<A>;
  if (!lazy protocol witness table cache variable for type _EnvironmentKeyTransformModifier<MenuOrder> and conformance _EnvironmentKeyTransformModifier<A>)
  {
    type metadata accessor for StyleContextAcceptsPredicate<ToolbarStyleContext>(255, &lazy cache variable for type metadata for _EnvironmentKeyTransformModifier<MenuOrder>, (uint64_t)&type metadata for MenuOrder, MEMORY[0x1E4F41280]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _EnvironmentKeyTransformModifier<MenuOrder> and conformance _EnvironmentKeyTransformModifier<A>);
  }
  return result;
}

uint64_t partial apply for closure #1 in PopUpButton.menuButton<A>(content:flexibleDimensions:menuIndicatorVisibility:)@<X0>(uint64_t a1@<X8>)
{
  return closure #1 in PopUpButton.menuButton<A>(content:flexibleDimensions:menuIndicatorVisibility:)(*(unsigned __int8 *)(v1 + 48), *(unsigned __int8 *)(v1 + 49), *(void *)(v1 + 56), *(void *)(v1 + 64), *(void *)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40), a1);
}

uint64_t partial apply for closure #2 in PopUpButton.menuButton<A>(content:flexibleDimensions:menuIndicatorVisibility:)()
{
  return closure #2 in PopUpButton.menuButton<A>(content:flexibleDimensions:menuIndicatorVisibility:)(v0[6], v0[2], v0[3], v0[4]);
}

uint64_t partial apply for closure #1 in closure #1 in PopUpButton.menuButton<A>(content:flexibleDimensions:menuIndicatorVisibility:)()
{
  return partial apply for closure #1 in closure #1 in PopUpButton.menuButton<A>(content:flexibleDimensions:menuIndicatorVisibility:)((uint64_t (*)(void, void, void, void, void))closure #1 in closure #1 in PopUpButton.menuButton<A>(content:flexibleDimensions:menuIndicatorVisibility:));
}

uint64_t partial apply for closure #2 in closure #1 in PopUpButton.menuButton<A>(content:flexibleDimensions:menuIndicatorVisibility:)()
{
  return partial apply for closure #1 in closure #1 in PopUpButton.menuButton<A>(content:flexibleDimensions:menuIndicatorVisibility:)((uint64_t (*)(void, void, void, void, void))closure #2 in closure #1 in PopUpButton.menuButton<A>(content:flexibleDimensions:menuIndicatorVisibility:));
}

uint64_t partial apply for closure #1 in closure #1 in PopUpButton.menuButton<A>(content:flexibleDimensions:menuIndicatorVisibility:)(uint64_t (*a1)(void, void, void, void, void))
{
  return a1(v1[6], v1[2], v1[3], v1[4], v1[5]);
}

void *type metadata accessor for HideLabelPredicate()
{
  return &unk_1ED427EC8;
}

uint64_t sub_187BFAB04()
{
  return swift_getWitnessTable();
}

uint64_t specialized static HideLabelPredicate.evaluate(inputs:)()
{
  _GraphInputs.interfaceIdiom.getter();
  if ((AnyInterfaceIdiom.accepts<A>(_:)() & 1) != 0
    || (static Semantics.v4.getter(), (isLinkedOnOrAfter(_:)() & 1) == 0)
    || (static StyleContextAcceptsPredicate.evaluate(inputs:)() & 1) != 0
    || (static StyleContextAcceptsPredicate.evaluate(inputs:)() & 1) != 0)
  {
    char v0 = 0;
  }
  else
  {
    char v0 = static StyleContextAcceptsPredicate.evaluate(inputs:)() ^ 1;
  }
  return v0 & 1;
}

void *specialized Sequence.first(where:)(unint64_t a1)
{
  if (a1 >> 62) {
    goto LABEL_14;
  }
  uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v2; uint64_t v2 = _CocoaArrayWrapper.endIndex.getter())
  {
    uint64_t v3 = 4;
    while (1)
    {
      id v4 = (a1 & 0xC000000000000001) != 0 ? (id)MEMORY[0x18C117680](v3 - 4, a1) : *(id *)(a1 + 8 * v3);
      uint64_t v5 = v4;
      uint64_t v6 = v3 - 3;
      if (__OFADD__(v3 - 4, 1)) {
        break;
      }
      if (objc_msgSend(v4, sel_isSystemItem))
      {
        swift_bridgeObjectRelease();
        return v5;
      }

      ++v3;
      if (v6 == v2) {
        goto LABEL_10;
      }
    }
    __break(1u);
LABEL_14:
    swift_bridgeObjectRetain();
  }
LABEL_10:
  swift_bridgeObjectRelease();
  return 0;
}

void closure #1 in ToolbarBridge.navigationItemWillAppear<A>(hostingController:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a1 + 16);
  if (v6)
  {
    v11[6] = v3;
    uint64_t v7 = a1 + 32;
    swift_bridgeObjectRetain();
    uint64_t v8 = 0;
    do
    {
      outlined init with copy of UINavigationItemAdaptorStorage.Adaptor(v7, (uint64_t)v15);
      outlined init with copy of TableColumnList((uint64_t)v15, (uint64_t)v12);
      outlined destroy of UINavigationItemAdaptorStorage.Adaptor((uint64_t)v15);
      uint64_t v9 = v13;
      uint64_t v10 = v14;
      __swift_project_boxed_opaque_existential_1(v12, v13);
      (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v10 + 8))(&v16, v9, v10);
      v8 |= v16;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v12);
      v7 += 48;
      --v6;
    }
    while (v6);
    a1 = swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v8 = 0;
  }
  MEMORY[0x1F4188790](a1);
  v11[2] = a3;
  _OWORD v11[3] = a2;
  v11[4] = v8;
}

uint64_t closure #1 in closure #1 in ToolbarBridge.navigationItemWillAppear<A>(hostingController:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = *(void *)(a2 + direct field offset for ToolbarBridge.navigationAdaptor);
  uint64_t v6 = *(void *)(v5 + 16);
  if (v6)
  {
    uint64_t v9 = v5 + 32;
    swift_bridgeObjectRetain();
    int v10 = 1;
    do
    {
      outlined init with copy of UINavigationItemAdaptorStorage.Adaptor(v9, (uint64_t)v17);
      outlined init with copy of TableColumnList((uint64_t)v17, (uint64_t)v14);
      outlined destroy of UINavigationItemAdaptorStorage.Adaptor((uint64_t)v17);
      uint64_t v11 = v15;
      uint64_t v12 = v16;
      __swift_project_boxed_opaque_existential_1(v14, v15);
      v10 &= (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v12 + 24))(a3, a1, v11, v12);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v14);
      v9 += 48;
      --v6;
    }
    while (v6);
    swift_bridgeObjectRelease();
  }
  else
  {
    LOBYTE(v10) = 1;
  }
  return ((a4 & 1) == 0) | ((v10 & 1) == 0);
}

void closure #1 in ToolbarBridge.navigationItemWillDisappear<A>(hostingController:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = a1;
  uint64_t v8 = *(void *)(a1 + 16);
  if (v8)
  {
    v14[9] = a4;
    v14[10] = v4;
    uint64_t v9 = a1 + 32;
    swift_bridgeObjectRetain();
    uint64_t v10 = 0;
    do
    {
      outlined init with copy of UINavigationItemAdaptorStorage.Adaptor(v9, (uint64_t)v18);
      outlined init with copy of TableColumnList((uint64_t)v18, (uint64_t)v15);
      outlined destroy of UINavigationItemAdaptorStorage.Adaptor((uint64_t)v18);
      uint64_t v11 = v16;
      uint64_t v12 = v17;
      __swift_project_boxed_opaque_existential_1(v15, v16);
      (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v12 + 8))(&v19, v11, v12);
      v10 |= v19;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v15);
      v9 += 48;
      --v8;
    }
    while (v8);
    a1 = swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v10 = 0;
  }
  MEMORY[0x1F4188790](a1);
  long long v14[2] = a3;
  void v14[3] = v13;
  uint64_t v14[4] = v7;
  v14[5] = a2;
  v14[6] = v10;
}

uint64_t closure #1 in closure #1 in ToolbarBridge.navigationItemWillDisappear<A>(hostingController:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = *(void *)(a2 + 16);
  if (v5)
  {
    uint64_t v8 = a2 + 32;
    swift_bridgeObjectRetain();
    int v9 = 1;
    do
    {
      outlined init with copy of UINavigationItemAdaptorStorage.Adaptor(v8, (uint64_t)v16);
      outlined init with copy of TableColumnList((uint64_t)v16, (uint64_t)v13);
      outlined destroy of UINavigationItemAdaptorStorage.Adaptor((uint64_t)v16);
      uint64_t v10 = v14;
      uint64_t v11 = v15;
      __swift_project_boxed_opaque_existential_1(v13, v14);
      v9 &= (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v11 + 32))(a3, a1, v10, v11);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v13);
      v8 += 48;
      --v5;
    }
    while (v5);
    swift_bridgeObjectRelease();
  }
  else
  {
    LOBYTE(v9) = 1;
  }
  return ((a4 & 1) == 0) | ((v9 & 1) == 0);
}

void ToolbarBridge.updateTabSidebar(tabBarController:)(id a1)
{
  unint64_t v3 = *(void *)(v1 + direct field offset for ToolbarBridge.platformVended + 24);
  if (v3 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v4 = *(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  if (v4 > 0) {
    goto LABEL_4;
  }
  id v6 = objc_msgSend(a1, sel__uip_sidebar);
  id v7 = objc_msgSend(v6, sel__toolbarItems);

  if (v7)
  {
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIBarButtonItem);
    unint64_t v8 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    if (v8 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v9 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v9 = *(void *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    swift_bridgeObjectRelease();
    if (v9 >= 1)
    {
LABEL_4:
      id v5 = objc_msgSend(a1, sel__uip_sidebar);
      type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIBarButtonItem);
      swift_bridgeObjectRetain();
      Class isa = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      objc_msgSend(v5, sel__setToolbarItems_, isa);
    }
  }
}

void UIKitToolbarStrategy.updateVended(_:to:)(unsigned char *a1, char a2, uint64_t a3)
{
  uint64_t v72 = type metadata accessor for ToolbarStorage.GroupItem(0);
  uint64_t v71 = *(void *)(v72 - 8);
  MEMORY[0x1F4188790](v72);
  uint64_t v69 = (uint64_t)&v66 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v7 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E4FBB718];
  type metadata accessor for PlatformItemList.Item?(0, &lazy cache variable for type metadata for ToolbarStorage.GroupItem?, type metadata accessor for ToolbarStorage.GroupItem, MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v8 - 8);
  uint64_t v74 = (uint64_t)&v66 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v10);
  uint64_t v73 = (uint64_t)&v66 - v11;
  type metadata accessor for PlatformItemList.Item?(0, &lazy cache variable for type metadata for ToolbarStorage.Item?, type metadata accessor for ToolbarStorage.Item, v7);
  MEMORY[0x1F4188790](v12 - 8);
  uint64_t v14 = (char *)&v66 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v15);
  uint64_t v17 = (char *)&v66 - v16;
  uint64_t v18 = type metadata accessor for ToolbarStorage.Item(0);
  uint64_t v70 = *(void *)(v18 - 8);
  MEMORY[0x1F4188790](v18);
  uint64_t v20 = (char *)&v66 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v21);
  uint64_t v23 = (char *)&v66 - v22;
  type metadata accessor for (Toolbar.VendedItem, ToolbarStorage.Entry.Kind)();
  MEMORY[0x1F4188790](v24 - 8);
  uint64_t v26 = (char *)&v66 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v28 = (uint64_t)&v26[*(int *)(v27 + 56)];
  uint64_t v75 = a1;
  *(void *)uint64_t v26 = a1;
  v26[8] = a2;
  outlined init with copy of ToolbarStorage.Entry.Kind(a3, v28, type metadata accessor for ToolbarStorage.Entry.Kind);
  switch(a2)
  {
    case 1:
      type metadata accessor for ToolbarStorage.Entry.Kind(0);
      if (swift_getEnumCaseMultiPayload()) {
        goto LABEL_10;
      }
      outlined init with take of ToolbarStorage.NavigationProperties(v28, (uint64_t)v23, type metadata accessor for ToolbarStorage.Item);
      char v29 = *(unsigned char *)(a3 + *(int *)(type metadata accessor for ToolbarStorage.Entry(0) + 20));
      id v30 = v75;
      v75[OBJC_IVAR____TtC7SwiftUI18UIKitBarButtonItem_edge] = v29;
      outlined init with copy of ToolbarStorage.Entry.Kind((uint64_t)v23, (uint64_t)v17, type metadata accessor for ToolbarStorage.Item);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v70 + 56))(v17, 0, 1, v18);
      uint64_t v31 = (uint64_t)v30 + OBJC_IVAR____TtC7SwiftUI18UIKitBarButtonItem_item;
      swift_beginAccess();
      uint64_t v32 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E4FBB718];
      outlined init with copy of ToolbarStorage.NavigationProperties?(v31, (uint64_t)v14, &lazy cache variable for type metadata for ToolbarStorage.Item?, type metadata accessor for ToolbarStorage.Item, MEMORY[0x1E4FBB718]);
      swift_beginAccess();
      v30;
      outlined assign with copy of ToolbarStorage.GroupItem?((uint64_t)v17, v31, &lazy cache variable for type metadata for ToolbarStorage.Item?, type metadata accessor for ToolbarStorage.Item);
      swift_endAccess();
      UIKitBarButtonItem.item.didset();
      outlined destroy of ToolbarStorage.NavigationProperties?((uint64_t)v17, &lazy cache variable for type metadata for ToolbarStorage.Item?, type metadata accessor for ToolbarStorage.Item, v32);
      outlined destroy of ToolbarStorage.NavigationProperties?((uint64_t)v14, &lazy cache variable for type metadata for ToolbarStorage.Item?, type metadata accessor for ToolbarStorage.Item, v32);
      goto LABEL_13;
    case 2:
      type metadata accessor for ToolbarStorage.Entry.Kind(0);
      int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      if (EnumCaseMultiPayload)
      {
        if (EnumCaseMultiPayload != 1)
        {
LABEL_10:
          uint64_t v45 = v75;
          outlined destroy of ToolbarStorage.NavigationProperties((uint64_t)v26, (uint64_t (*)(void))type metadata accessor for (Toolbar.VendedItem, ToolbarStorage.Entry.Kind));
          return;
        }
        uint64_t v38 = v69;
        outlined init with take of ToolbarStorage.NavigationProperties(v28, v69, type metadata accessor for ToolbarStorage.GroupItem);
        char v39 = *(unsigned char *)(a3 + *(int *)(type metadata accessor for ToolbarStorage.Entry(0) + 20));
        id v40 = v75;
        v75[OBJC_IVAR____TtC7SwiftUI23UIKitBarButtonItemGroup_edge] = v39;
        uint64_t v41 = v73;
        outlined init with copy of ToolbarStorage.Entry.Kind(v38, v73, type metadata accessor for ToolbarStorage.GroupItem);
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v71 + 56))(v41, 0, 1, v72);
        uint64_t v42 = (uint64_t)v40 + OBJC_IVAR____TtC7SwiftUI23UIKitBarButtonItemGroup_groupItem;
        swift_beginAccess();
        uint64_t v43 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E4FBB718];
        uint64_t v44 = v74;
        outlined init with copy of ToolbarStorage.NavigationProperties?(v42, v74, &lazy cache variable for type metadata for ToolbarStorage.GroupItem?, type metadata accessor for ToolbarStorage.GroupItem, MEMORY[0x1E4FBB718]);
        swift_beginAccess();
        v40;
        outlined assign with copy of ToolbarStorage.GroupItem?(v41, v42, &lazy cache variable for type metadata for ToolbarStorage.GroupItem?, type metadata accessor for ToolbarStorage.GroupItem);
        swift_endAccess();
        UIKitBarButtonItemGroup.didChangeGroupItem(from:)(v44);
        outlined destroy of ToolbarStorage.NavigationProperties?(v41, &lazy cache variable for type metadata for ToolbarStorage.GroupItem?, type metadata accessor for ToolbarStorage.GroupItem, v43);
        outlined destroy of ToolbarStorage.NavigationProperties?(v44, &lazy cache variable for type metadata for ToolbarStorage.GroupItem?, type metadata accessor for ToolbarStorage.GroupItem, v43);
        uint64_t v36 = type metadata accessor for ToolbarStorage.GroupItem;
        uint64_t v35 = v38;
      }
      else
      {
        uint64_t v68 = v23;
        outlined init with take of ToolbarStorage.NavigationProperties(v28, (uint64_t)v23, type metadata accessor for ToolbarStorage.Item);
        uint64_t v46 = type metadata accessor for ToolbarStorage.Entry(0);
        id v47 = v75;
        v75[OBJC_IVAR____TtC7SwiftUI23UIKitBarButtonItemGroup_edge] = *(unsigned char *)(a3 + *(int *)(v46 + 20));
        outlined init with copy of ToolbarStorage.Entry.Kind((uint64_t)v23, (uint64_t)v20, type metadata accessor for ToolbarStorage.Item);
        uint64_t v69 = *((void *)v20 + 4);
        uint64_t v67 = *((void *)v20 + 5);
        uint64_t v48 = v73;
        outlined init with copy of ToolbarItemPlacement.Role((uint64_t)(v20 + 48), v73 + 16);
        __int16 v49 = *((_WORD *)v20 + 45);
        char v50 = v20[92];
        uint64_t v51 = *((void *)v20 + 12);
        type metadata accessor for PlatformItemList.Item?(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<ToolbarStorage.Item>, type metadata accessor for ToolbarStorage.Item, MEMORY[0x1E4FBBE00]);
        unint64_t v52 = (*(unsigned __int8 *)(v70 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v70 + 80);
        uint64_t v53 = swift_allocObject();
        *(_OWORD *)(v53 + 16) = xmmword_18834BB80;
        outlined init with take of ToolbarStorage.NavigationProperties((uint64_t)v20, v53 + v52, type metadata accessor for ToolbarStorage.Item);
        uint64_t v54 = v72;
        uint64_t v55 = v48 + *(int *)(v72 + 44);
        uint64_t v56 = type metadata accessor for ToolbarStorage.GroupItem.CollapsedContent(0);
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v56 - 8) + 56))(v55, 1, 1, v56);
        uint64_t v57 = v67;
        *(void *)uint64_t v48 = v69;
        *(void *)(v48 + 8) = v57;
        *(_WORD *)(v48 + 57) = v49;
        *(unsigned char *)(v48 + 59) = v50;
        *(void *)(v48 + 64) = v51;
        *(void *)(v48 + 72) = v53;
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v71 + 56))(v48, 0, 1, v54);
        uint64_t v58 = (uint64_t)v47 + OBJC_IVAR____TtC7SwiftUI23UIKitBarButtonItemGroup_groupItem;
        swift_beginAccess();
        uint64_t v59 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E4FBB718];
        uint64_t v60 = v74;
        outlined init with copy of ToolbarStorage.NavigationProperties?(v58, v74, &lazy cache variable for type metadata for ToolbarStorage.GroupItem?, type metadata accessor for ToolbarStorage.GroupItem, MEMORY[0x1E4FBB718]);
        swift_beginAccess();
        swift_bridgeObjectRetain();
        id v61 = v47;
        outlined assign with copy of ToolbarStorage.GroupItem?(v48, v58, &lazy cache variable for type metadata for ToolbarStorage.GroupItem?, type metadata accessor for ToolbarStorage.GroupItem);
        swift_endAccess();
        UIKitBarButtonItemGroup.didChangeGroupItem(from:)(v60);
        outlined destroy of ToolbarStorage.NavigationProperties?(v48, &lazy cache variable for type metadata for ToolbarStorage.GroupItem?, type metadata accessor for ToolbarStorage.GroupItem, v59);
        outlined destroy of ToolbarStorage.NavigationProperties?(v60, &lazy cache variable for type metadata for ToolbarStorage.GroupItem?, type metadata accessor for ToolbarStorage.GroupItem, v59);

        uint64_t v36 = type metadata accessor for ToolbarStorage.Item;
        uint64_t v35 = (uint64_t)v68;
      }
LABEL_14:
      outlined destroy of ToolbarStorage.NavigationProperties(v35, v36);

      return;
    case 3:
      type metadata accessor for ToolbarStorage.Entry.Kind(0);
      if (swift_getEnumCaseMultiPayload()) {
        goto LABEL_10;
      }
      outlined init with take of ToolbarStorage.NavigationProperties(v28, (uint64_t)v23, type metadata accessor for ToolbarStorage.Item);
      outlined init with copy of _ViewList_View((uint64_t)(v23 + 104), (uint64_t)v76);
      char v62 = *(unsigned char *)(a3 + *(int *)(type metadata accessor for ToolbarStorage.Entry(0) + 20));
      swift_unknownObjectWeakInit();
      uint64_t v63 = swift_unknownObjectWeakAssign();
      outlined init with take of WeakBox<UIBarButtonItem>(v63, (uint64_t)v82);
      _OWORD v78[2] = v76[2];
      v78[3] = v76[3];
      v78[4] = v76[4];
      uint64_t v79 = v77;
      v78[0] = v76[0];
      v78[1] = v76[1];
      char v80 = v62;
      char v81 = 0;
      outlined init with copy of BarItemView((uint64_t)v78, (uint64_t)v76);
      id v64 = v75;
      int v65 = &v75[*(void *)((*MEMORY[0x1E4FBC8C8] & *(void *)v75) + 0x60)];
      swift_beginAccess();
      v64;
      outlined assign with take of BarItemView((uint64_t)v76, (uint64_t)v65);
      swift_endAccess();
      LOWORD(v76[0]) = 1;
      type metadata accessor for UIKitBarItemHost<BarItemView>(0, &lazy cache variable for type metadata for _UIHostingView<BarItemView>, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))type metadata accessor for _UIHostingView);
      lazy protocol witness table accessor for type _UIHostingView<BarItemView> and conformance _UIHostingView<A>();
      ViewRendererHost.invalidateProperties(_:mayDeferUpdate:)();
      outlined destroy of BarItemView((uint64_t)v78);
LABEL_13:
      uint64_t v36 = type metadata accessor for ToolbarStorage.Item;
      uint64_t v35 = (uint64_t)v23;
      goto LABEL_14;
    case 4:
      type metadata accessor for ToolbarStorage.Entry.Kind(0);
      if (swift_getEnumCaseMultiPayload()) {
        goto LABEL_10;
      }
      outlined init with take of ToolbarStorage.NavigationProperties(v28, (uint64_t)v23, type metadata accessor for ToolbarStorage.Item);
      outlined init with copy of ToolbarStorage.Entry.Kind((uint64_t)v23, (uint64_t)v20, type metadata accessor for ToolbarStorage.Item);
      id v33 = v75;
      uint64_t v34 = &v75[OBJC_IVAR____TtC7SwiftUI19UIKitBarPaletteHost_item];
      swift_beginAccess();
      v33;
      outlined assign with copy of ToolbarStorage.Item((uint64_t)v20, (uint64_t)v34);
      swift_endAccess();
      UIKitBarPaletteHost.item.didset();
      outlined destroy of ToolbarStorage.NavigationProperties((uint64_t)v20, type metadata accessor for ToolbarStorage.Item);
      uint64_t v35 = (uint64_t)v23;
      uint64_t v36 = type metadata accessor for ToolbarStorage.Item;
      goto LABEL_14;
    default:
      goto LABEL_10;
  }
}

void closure #1 in closure #1 in UIKitToolbarStrategy.updateBarTitle()(uint64_t a1, uint64_t a2, void **a3)
{
}

void closure #1 in closure #1 in UIKitToolbarStrategy.updateNavigationAccessory()(uint64_t a1, uint64_t a2, void **a3)
{
}

void closure #1 in closure #1 in UIKitToolbarStrategy.updateBarTitle()(uint64_t a1, uint64_t a2, void **a3, unsigned __int16 *a4, unsigned __int16 *a5)
{
  uint64_t v10 = type metadata accessor for ToolbarStorage.Entry.Kind(0);
  MEMORY[0x1F4188790](v10);
  uint64_t v12 = (char *)&v34 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for ToolbarStorage.Item(0);
  MEMORY[0x1F4188790](v13 - 8);
  uint64_t v15 = (char *)&v34 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v16);
  uint64_t v18 = (char *)&v34 - v17;
  if (!*a3)
  {
    uint64_t v36 = a5;
    id v19 = *(id *)a2;
    int v20 = *(unsigned __int8 *)(a2 + 8);
    if (v20 == 3)
    {
      *a3 = v19;
      id v21 = v19;
    }
    else
    {
      id v35 = *(id *)a2;
      outlined init with copy of ToolbarStorage.Entry.Kind(a1, (uint64_t)v12, type metadata accessor for ToolbarStorage.Entry.Kind);
      if (swift_getEnumCaseMultiPayload())
      {
        outlined destroy of ToolbarStorage.NavigationProperties((uint64_t)v12, type metadata accessor for ToolbarStorage.Entry.Kind);
      }
      else
      {
        outlined init with take of ToolbarStorage.NavigationProperties((uint64_t)v12, (uint64_t)v15, type metadata accessor for ToolbarStorage.Item);
        outlined consume of Toolbar.VendedItem?(v35, v20);
        outlined init with take of ToolbarStorage.NavigationProperties((uint64_t)v15, (uint64_t)v18, type metadata accessor for ToolbarStorage.Item);
        outlined init with copy of _ViewList_View((uint64_t)(v18 + 104), (uint64_t)v39);
        swift_unknownObjectWeakInit();
        swift_unknownObjectWeakAssign();
        outlined init with take of WeakBox<UIBarButtonItem>((uint64_t)v38, (uint64_t)&v44);
        v41[2] = v39[2];
        v41[3] = v39[3];
        unsigned char v41[4] = v39[4];
        uint64_t v42 = v40;
        v41[0] = v39[0];
        v41[1] = v39[1];
        __int16 v43 = 2;
        outlined init with copy of BarItemView((uint64_t)v41, (uint64_t)v39);
        type metadata accessor for UIKitBarItemHost<BarItemView>(0, &lazy cache variable for type metadata for UIKitBarItemHost<BarItemView>, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))type metadata accessor for UIKitBarItemHost);
        uint64_t v23 = (char *)objc_allocWithZone(v22);
        uint64_t v24 = (void *)MEMORY[0x1E4FBC8C8];
        uint64_t v25 = &v23[*(void *)((*MEMORY[0x1E4FBC8C8] & *(void *)v23) + 0x650)];
        *(void *)uint64_t v25 = destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
        *((void *)v25 + 1) = 0;
        outlined init with copy of BarItemView((uint64_t)v39, (uint64_t)v38);
        uint64_t v26 = (void *)specialized _UIHostingView.init(rootView:)((uint64_t)v38);
        uint64_t v27 = (void *)((char *)v26 + *(void *)((*v24 & *v26) + 0xB8));
        swift_beginAccess();
        uint64_t v28 = *v27;
        *uint64_t v27 = 0;
        if (v28)
        {
          int v29 = *a4;
          int v30 = *v36;
          if ((v30 & ~v29) == 0) {
            LOWORD(v30) = 0;
          }
          __int16 v37 = v30 | v29;
          type metadata accessor for UIKitBarItemHost<BarItemView>(0, &lazy cache variable for type metadata for _UIHostingView<BarItemView>, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))type metadata accessor for _UIHostingView);
          lazy protocol witness table accessor for type _UIHostingView<BarItemView> and conformance _UIHostingView<A>();
          uint64_t v31 = v26;
          ViewRendererHost.invalidateProperties(_:mayDeferUpdate:)();
        }
        outlined destroy of BarItemView((uint64_t)v39);
        outlined destroy of BarItemView((uint64_t)v41);
        outlined destroy of ToolbarStorage.NavigationProperties((uint64_t)v18, type metadata accessor for ToolbarStorage.Item);
        *(void *)a2 = v26;
        *(unsigned char *)(a2 + 8) = 3;
        uint64_t v32 = *a3;
        *a3 = v26;
        id v33 = v26;
      }
    }
  }
}

void closure #1 in closure #1 in UIKitToolbarStrategy.barButtonItems(in:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, void *a7)
{
  uint64_t v32 = a3;
  uint64_t v13 = type metadata accessor for ToolbarStorage.Entry.Kind(0);
  MEMORY[0x1F4188790](v13);
  uint64_t v15 = (char *)&v33[-1] - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for ToolbarStorage.Item(0);
  MEMORY[0x1F4188790](v16 - 8);
  uint64_t v18 = (char *)&v33[-1] - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v19);
  id v21 = (char *)&v33[-1] - v20;
  memset(v33, 0, sizeof(v33));
  long long v34 = xmmword_18838AA10;
  LOBYTE(a5) = specialized static Toolbar.BarLocation.== infix(_:_:)(a5, (uint64_t)v33);
  outlined destroy of Toolbar.BarLocation((uint64_t)v33);
  if ((a5 & 1) != 0 && *a4 == a6) {
    *(unsigned char *)(v32 + 8) = 1;
  }
  Class v22 = *(void **)a2;
  int v23 = *(unsigned __int8 *)(a2 + 8);
  if (v23 == 1)
  {
    id v24 = v22;
  }
  else
  {
    outlined init with copy of ToolbarStorage.Entry.Kind(a1, (uint64_t)v15, type metadata accessor for ToolbarStorage.Entry.Kind);
    if (swift_getEnumCaseMultiPayload())
    {
      outlined destroy of ToolbarStorage.NavigationProperties((uint64_t)v15, type metadata accessor for ToolbarStorage.Entry.Kind);
      goto LABEL_11;
    }
    outlined init with take of ToolbarStorage.NavigationProperties((uint64_t)v15, (uint64_t)v18, type metadata accessor for ToolbarStorage.Item);
    outlined consume of Toolbar.VendedItem?(v22, v23);
    outlined init with take of ToolbarStorage.NavigationProperties((uint64_t)v18, (uint64_t)v21, type metadata accessor for ToolbarStorage.Item);
    int v26 = *(unsigned __int8 *)(v32 + 8);
    id v27 = *(id *)v32;
    id v28 = specialized static UIKitBarButtonItem.makeVended(item:context:)((uint64_t)v21, v27, v26);
    char v30 = v29;
    id v24 = v31;

    outlined destroy of ToolbarStorage.NavigationProperties((uint64_t)v21, type metadata accessor for ToolbarStorage.Item);
    *(void *)a2 = v28;
    *(unsigned char *)(a2 + 8) = v30;
    if (!v24) {
      goto LABEL_11;
    }
  }
  id v25 = v24;
  MEMORY[0x18C115B40]();
  if (*(void *)((*a7 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*a7 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  }
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();

LABEL_11:
  *(unsigned char *)(v32 + 8) = 2;
  ++*a4;
}

uint64_t closure #1 in closure #1 in UIKitToolbarStrategy.makeBarItems()(uint64_t a1, uint64_t a2, void *a3, int a4, uint64_t a5, uint64_t a6)
{
  id v44 = a3;
  uint64_t v45 = a6;
  uint64_t v43 = a5;
  int v42 = a4;
  uint64_t v46 = a1;
  type metadata accessor for PlatformItemList.Item?(0, &lazy cache variable for type metadata for ToolbarStorage.GroupItem?, type metadata accessor for ToolbarStorage.GroupItem, MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v7 - 8);
  uint64_t v9 = (char *)&v40 - v8;
  uint64_t v10 = type metadata accessor for ToolbarStorage.GroupItem(0);
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v10);
  uint64_t v41 = (uint64_t)&v40 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for ToolbarStorage.Entry.Kind(0);
  MEMORY[0x1F4188790](v13);
  uint64_t v15 = (char *)&v40 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for ToolbarStorage.Item(0);
  MEMORY[0x1F4188790](v16 - 8);
  uint64_t v18 = (char *)&v40 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v19);
  id v21 = (char *)&v40 - v20;
  Class v22 = *(void **)a2;
  int v23 = *(unsigned __int8 *)(a2 + 8);
  if (v23 == 1)
  {
    _s7SwiftUI7ToolbarO13UpdateContextVSgMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>, MEMORY[0x1E4FBC838] + 8, MEMORY[0x1E4FBBE00]);
    uint64_t v24 = swift_allocObject();
    *(_OWORD *)(v24 + 16) = xmmword_188351940;
    *(void *)(v24 + 32) = v22;
    v51[0] = v24;
    specialized Array._endMutation()();
    unint64_t updated = v51[0];
    id v26 = v22;
    goto LABEL_16;
  }
  outlined init with copy of ToolbarStorage.Entry.Kind(v46, (uint64_t)v15, type metadata accessor for ToolbarStorage.Entry.Kind);
  if (swift_getEnumCaseMultiPayload())
  {
    outlined destroy of ToolbarStorage.NavigationProperties((uint64_t)v15, type metadata accessor for ToolbarStorage.Entry.Kind);
    ToolbarStorage.Entry.groupItem.getter((uint64_t)v9);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10) == 1)
    {
      outlined destroy of ToolbarStorage.NavigationProperties?((uint64_t)v9, &lazy cache variable for type metadata for ToolbarStorage.GroupItem?, type metadata accessor for ToolbarStorage.GroupItem, MEMORY[0x1E4FBB718]);
      unint64_t updated = MEMORY[0x1E4FBC860];
      goto LABEL_16;
    }
    uint64_t v32 = v41;
    outlined init with take of ToolbarStorage.NavigationProperties((uint64_t)v9, v41, type metadata accessor for ToolbarStorage.GroupItem);
    if (!v44) {
      return outlined destroy of ToolbarStorage.NavigationProperties(v32, type metadata accessor for ToolbarStorage.GroupItem);
    }
    id v33 = v44;
    uint64_t v34 = swift_bridgeObjectRetain();
    unint64_t updated = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay7SwiftUI14ToolbarStorageV4ItemVG_So011UIBarButtonH0Cs5NeverOTg503_s7d9UI20UIKitf67StrategyV12makeBarItems33_A409749AC298CF150D90E447BB4FA064LLSaySo15ijh56CGyFyAA0D6BridgeCyACG_AA0D0O13UpdateContextVtXEfU_yAA0D7G44V5EntryV_AM06VendedR0OSgztXEfU_AgQ0R0VXEfU0_AF0iH7ContextVTf1cn_nTf4ng_n(v34, v33, v42);
    swift_bridgeObjectRelease();

    id v35 = type metadata accessor for ToolbarStorage.GroupItem;
    uint64_t v36 = v32;
  }
  else
  {
    outlined init with take of ToolbarStorage.NavigationProperties((uint64_t)v15, (uint64_t)v18, type metadata accessor for ToolbarStorage.Item);
    outlined init with take of ToolbarStorage.NavigationProperties((uint64_t)v18, (uint64_t)v21, type metadata accessor for ToolbarStorage.Item);
    if (!v44) {
      return outlined destroy of ToolbarStorage.NavigationProperties((uint64_t)v21, type metadata accessor for ToolbarStorage.Item);
    }
    id v27 = v44;
    outlined consume of Toolbar.VendedItem?(v22, v23);
    *(void *)a2 = specialized static UIKitBarButtonItem.makeVended(item:context:)((uint64_t)v21, v27, v42);
    *(unsigned char *)(a2 + 8) = v29;
    if (v28)
    {
      uint64_t v30 = v28;
      _s7SwiftUI7ToolbarO13UpdateContextVSgMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>, MEMORY[0x1E4FBC838] + 8, MEMORY[0x1E4FBBE00]);
      uint64_t v31 = swift_allocObject();
      *(_OWORD *)(v31 + 16) = xmmword_188351940;
      *(void *)(v31 + 32) = v30;
      v51[0] = v31;
      specialized Array._endMutation()();
      unint64_t updated = v51[0];
    }
    else
    {

      unint64_t updated = MEMORY[0x1E4FBC860];
    }
    id v35 = type metadata accessor for ToolbarStorage.Item;
    uint64_t v36 = (uint64_t)v21;
  }
  outlined destroy of ToolbarStorage.NavigationProperties(v36, v35);
LABEL_16:
  ToolbarStorage.Entry.placement.getter((uint64_t)&v47);
  if (v50 == 255)
  {
    outlined destroy of PushTarget?((uint64_t)&v47, &lazy cache variable for type metadata for ToolbarItemPlacement.Role?, (uint64_t)&type metadata for ToolbarItemPlacement.Role);
  }
  else
  {
    outlined init with take of ToolbarItemPlacement.Role((uint64_t)&v47, (uint64_t)v51);
    uint64_t v47 = 4;
    long long v48 = 0u;
    long long v49 = 0u;
    unsigned __int8 v50 = 2;
    char v38 = specialized static ToolbarItemPlacement.Role.== infix(_:_:)((uint64_t)v51, (uint64_t)&v47);
    outlined destroy of ToolbarItemPlacement.Role((uint64_t)&v47);
    if (v38)
    {
      unint64_t v39 = swift_bridgeObjectRetain();
      specialized Array.append<A>(contentsOf:)(v39);
      outlined destroy of ToolbarItemPlacement.Role((uint64_t)v51);
      return swift_bridgeObjectRelease();
    }
    outlined destroy of ToolbarItemPlacement.Role((uint64_t)v51);
  }
  return specialized Array.append<A>(contentsOf:)(updated);
}

id thunk for @escaping @callee_unowned @convention(block) (@unowned NSArray) -> (@autoreleased UIMenu?)(uint64_t a1, uint64_t a2)
{
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIMenuElement);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  id v4 = (id)(*(uint64_t (**)(uint64_t, Class))(a2 + 16))(a2, isa);

  return v4;
}

void closure #1 in closure #1 in UIKitToolbarStrategy.updateTitleMenuProvider()(uint64_t a1, uint64_t a2, unsigned __int8 a3, uint64_t a4)
{
  if (a3 == 255)
  {
    UIMenuElementSize v5 = MEMORY[0x1E4FBC860];
    uint64_t v17 = MEMORY[0x1E4FBC860];
    specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
    type metadata accessor for PlatformItemList.Item?(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<MenuVisitor.MenuStackGroup>, (uint64_t (*)(uint64_t))type metadata accessor for MenuVisitor.MenuStackGroup, MEMORY[0x1E4FBBE00]);
    uint64_t v6 = type metadata accessor for MenuVisitor.MenuStackGroup();
    unint64_t v7 = (*(unsigned __int8 *)(*(void *)(v6 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v6 - 8) + 80);
    uint64_t v8 = swift_allocObject();
    *(_OWORD *)(v8 + 16) = xmmword_18834BB80;
    uint64_t v9 = v8 + v7;
    if (one-time initialization token for empty != -1) {
      swift_once();
    }
    uint64_t v10 = __swift_project_value_buffer(v6, (uint64_t)static MenuVisitor.MenuStackGroup.empty);
    outlined init with copy of ToolbarStorage.Entry.Kind(v10, v9, (uint64_t (*)(void))type metadata accessor for MenuVisitor.MenuStackGroup);
    MenuVisitor.visit(_:uniqueNames:)(a4, &v17);
    swift_bridgeObjectRelease();
    UIMenuElementSize v11 = v5;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    MEMORY[0x1F4188790](a1);
    LOBYTE(v15._rawValue) = v12 & 1;
    type metadata accessor for WeakBox<UIBarButtonItem>(0, (unint64_t *)&lazy cache variable for type metadata for [UIMenuElement], (unint64_t *)&lazy cache variable for type metadata for UIMenuElement, 0x1E4FB1980, MEMORY[0x1E4FBB320]);
    static Update.ensure<A>(_:)();
    UIMenuElementSize v11 = v16;
  }
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIMenu);
  v13._countAndFlagsBits = 0;
  v13._object = (void *)0xE000000000000000;
  v18.value.super.Class isa = 0;
  v18.is_nil = 0;
  UIMenu.init(title:subtitle:image:identifier:options:preferredElementSize:children:)(v14, v13, (Swift::String_optional)0, v18, 0, 0xFFFFFFFFFFFFFFFFLL, v11, v15);
}

uint64_t closure #1 in closure #1 in closure #1 in UIKitToolbarStrategy.updateTitleMenuProvider()@<X0>(uint64_t a1@<X0>, char a2@<W1>, void *a3@<X8>)
{
  if (a2) {
    goto LABEL_4;
  }
  Weakuint64_t Value = (uint64_t *)AGGraphGetWeakValue();
  if (WeakValue)
  {
    a1 = *WeakValue;
LABEL_4:
    swift_bridgeObjectRetain();
    goto LABEL_5;
  }
  a1 = MEMORY[0x1E4FBC860];
LABEL_5:
  uint64_t v6 = MEMORY[0x1E4FBC860];
  uint64_t v12 = MEMORY[0x1E4FBC860];
  specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
  type metadata accessor for PlatformItemList.Item?(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<MenuVisitor.MenuStackGroup>, (uint64_t (*)(uint64_t))type metadata accessor for MenuVisitor.MenuStackGroup, MEMORY[0x1E4FBBE00]);
  uint64_t v7 = type metadata accessor for MenuVisitor.MenuStackGroup();
  unint64_t v8 = (*(unsigned __int8 *)(*(void *)(v7 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v7 - 8) + 80);
  uint64_t v9 = swift_allocObject();
  *(_OWORD *)(v9 + 16) = xmmword_18834BB80;
  if (one-time initialization token for empty != -1) {
    swift_once();
  }
  uint64_t v10 = __swift_project_value_buffer(v7, (uint64_t)static MenuVisitor.MenuStackGroup.empty);
  outlined init with copy of ToolbarStorage.Entry.Kind(v10, v9 + v8, (uint64_t (*)(void))type metadata accessor for MenuVisitor.MenuStackGroup);
  MenuVisitor.visit(_:uniqueNames:)(a1, &v12);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  *a3 = v6;
  return result;
}

id thunk for @escaping @callee_guaranteed (@guaranteed [UIMenuElement]) -> (@owned UIMenu?)(uint64_t a1)
{
  uint64_t v1 = *(uint64_t (**)(uint64_t))(a1 + 32);
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIMenuElement);
  uint64_t v2 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  swift_retain();
  unint64_t v3 = (void *)v1(v2);
  swift_release();
  swift_bridgeObjectRelease();

  return v3;
}

double closure #1 in closure #1 in UIKitToolbarStrategy.updateHeaderProperties()@<D0>(uint64_t a1@<X1>, uint64_t a2@<X2>, unint64_t a3@<X3>, uint64_t a4@<X8>)
{
  outlined init with copy of PushTarget?(a1 + 8, (uint64_t)v17, (unint64_t *)&lazy cache variable for type metadata for AnySharePreview?, (uint64_t)&type metadata for AnySharePreview);
  if ((void)v18)
  {
    long long v7 = v19;
    *(_OWORD *)(a4 + 32) = v18;
    *(_OWORD *)(a4 + 48) = v7;
    long long v8 = v21;
    *(_OWORD *)(a4 + 64) = v20;
    *(_OWORD *)(a4 + 80) = v8;
    double result = *(double *)v17;
    long long v10 = v17[1];
    *(_OWORD *)a4 = v17[0];
    *(_OWORD *)(a4 + 16) = v10;
  }
  else
  {
    outlined destroy of PushTarget?((uint64_t)v17, (unint64_t *)&lazy cache variable for type metadata for AnySharePreview?, (uint64_t)&type metadata for AnySharePreview);
    if (a3) {
      uint64_t v11 = a2;
    }
    else {
      uint64_t v11 = 0;
    }
    unint64_t v12 = 0xE000000000000000;
    if (a3) {
      unint64_t v12 = a3;
    }
    *(void *)&v17[0] = v11;
    *((void *)&v17[0] + 1) = v12;
    lazy protocol witness table accessor for type String and conformance String();
    swift_bridgeObjectRetain();
    uint64_t v13 = Text.init<A>(_:)();
    double result = 0.0;
    *(_OWORD *)(a4 + 64) = 0u;
    *(_OWORD *)(a4 + 80) = 0u;
    *(void *)a4 = v13;
    *(void *)(a4 + 8) = v15;
    *(void *)(a4 + 16) = v14 & 1;
    *(void *)(a4 + 24) = v16;
    *(void *)(a4 + 32) = protocol witness for CollectionViewListDataSourceBase.section(forSectionLabelIndex:) in conformance TableDataSourceAdaptor;
    *(void *)(a4 + 40) = 0;
    *(void *)(a4 + 48) = protocol witness for CollectionViewListDataSourceBase.section(forSectionLabelIndex:) in conformance TableDataSourceAdaptor;
    *(void *)(a4 + 56) = 0;
  }
  return result;
}

uint64_t closure #2 in closure #1 in UIKitToolbarStrategy.updateHeaderProperties()(uint64_t a1, uint64_t a2)
{
  _s7SwiftUI7ToolbarO13UpdateContextVSgMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>, MEMORY[0x1E4FBC838] + 8, MEMORY[0x1E4FBBE00]);
  uint64_t v3 = swift_allocObject();
  *(_OWORD *)(v3 + 16) = xmmword_188351940;
  *(void *)(v3 + 32) = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1710]), sel_initWithItemProvider_, a2);
  specialized Array._endMutation()();
  return v3;
}

Class thunk for @escaping @callee_guaranteed (@guaranteed UIDragSession) -> (@owned [UIDragItem])(uint64_t a1)
{
  uint64_t v1 = *(void (**)(uint64_t))(a1 + 32);
  swift_retain();
  uint64_t v2 = swift_unknownObjectRetain();
  v1(v2);
  swift_release();
  swift_unknownObjectRelease();
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIDragItem);
  v3.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();

  return v3.super.isa;
}

id closure #3 in closure #1 in UIKitToolbarStrategy.updateHeaderProperties()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIActivityViewController);
  uint64_t v10 = a2;
  uint64_t v11 = a3;
  outlined retain of AnyShareConfiguration(a1);
  swift_retain();
  swift_retain();
  id result = UIActivityViewController.init(configuration:env:)(a1, &v10);
  if (!result)
  {
    id v7 = objc_allocWithZone(MEMORY[0x1E4F42718]);
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    id v9 = objc_msgSend(v7, sel_initWithActivityItems_applicationActivities_, isa, 0, v10, v11);

    return v9;
  }
  return result;
}

uint64_t UIKitToolbarStrategy.createToolbarIfNeeded()()
{
  uint64_t v1 = *v0;
  if (*v0)
  {
    outlined init with copy of PushTarget?((uint64_t)(v0 + 1), (uint64_t)v10, &lazy cache variable for type metadata for Toolbar.UpdateContext?, (uint64_t)&type metadata for Toolbar.UpdateContext);
    if (v11[4])
    {
      outlined init with take of Toolbar.UpdateContext((uint64_t)v10, (uint64_t)v12);
      outlined init with copy of HostingControllerOverrides((uint64_t)v12, (uint64_t)v8);
      uint64_t v2 = (void *)MEMORY[0x18C119DF0](&v9);
      NSArray v3 = v1;
      outlined destroy of HostingControllerOverrides((uint64_t)v8);
      outlined init with copy of Toolbar.UpdateContext((uint64_t)v12, (uint64_t)v10);
      if (v2)
      {
        outlined destroy of Toolbar.UpdateContext((uint64_t)v10);
      }
      else
      {
        uint64_t v2 = (void *)MEMORY[0x18C119DF0](v11);
        outlined destroy of Toolbar.UpdateContext((uint64_t)v10);
        if (!v2)
        {
          UIMenuElementSize v5 = &v3[direct field offset for ToolbarBridge.platformVended];
          if (*(void *)&v3[direct field offset for ToolbarBridge.platformVended + 32])
          {
          }
          else
          {
            id v6 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for UIKitToolbar()), sel_initWithFrame_, 0.0, 0.0, 0.0, 0.0);
            id v7 = (void *)*((void *)v5 + 4);
            *((void *)v5 + 4) = v6;
          }
          return outlined destroy of Toolbar.UpdateContext((uint64_t)v12);
        }
      }

      return outlined destroy of Toolbar.UpdateContext((uint64_t)v12);
    }
    outlined destroy of PushTarget?((uint64_t)v10, &lazy cache variable for type metadata for Toolbar.UpdateContext?, (uint64_t)&type metadata for Toolbar.UpdateContext);
  }
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void protocol witness for ToolbarStrategy.updateVended(_:to:) in conformance UIKitToolbarStrategy(unsigned char *a1, char a2, uint64_t a3)
{
}

uint64_t protocol witness for UINavigationItemRenameDelegate.navigationItem(_:didEndRenamingWith:) in conformance ToolbarPlatformDelegate(uint64_t a1, uint64_t a2, void *a3)
{
  return specialized ToolbarPlatformDelegate.navigationItem(_:didEndRenamingWith:)(a2, a3);
}

uint64_t protocol witness for static EnvironmentKey.defaultValue.getter in conformance EnvironmentValues.InputAccessoryKey@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for defaultValue != -1) {
    swift_once();
  }
  return outlined init with copy of ToolbarStorage.NavigationProperties?((uint64_t)&static EnvironmentValues.InputAccessoryKey.defaultValue, a1, &lazy cache variable for type metadata for WeakBox<InputAccessoryGenerator>, (uint64_t (*)(uint64_t))type metadata accessor for InputAccessoryGenerator, MEMORY[0x1E4F41720]);
}

uint64_t type metadata accessor for UIKitDocumentProperties()
{
  return self;
}

uint64_t assignWithTake for UIKitToolbarStrategy(uint64_t a1, uint64_t a2)
{
  id v4 = *(void **)a1;
  *(void *)a1 = *(void *)a2;

  UIMenuElementSize v5 = (_OWORD *)(a1 + 8);
  id v6 = (_OWORD *)(a2 + 8);
  uint64_t v7 = *(void *)(a2 + 96);
  if (*(void *)(a1 + 96))
  {
    if (v7)
    {
      uint64_t v8 = *(unsigned __int8 *)(a2 + 16);
      if (*(unsigned char *)(a1 + 16) == 2)
      {
        if (v8 != 2)
        {
          swift_unknownObjectWeakTakeInit();
LABEL_17:
          *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
          *(void *)(a1 + 24) = *(void *)(a2 + 24);
          *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
          goto LABEL_18;
        }
      }
      else
      {
        if (v8 != 2)
        {
          swift_unknownObjectWeakTakeAssign();
          goto LABEL_17;
        }
        outlined destroy of PushTarget(a1 + 8);
      }
      *UIMenuElementSize v5 = *v6;
      *(_OWORD *)(a1 + 17) = *(_OWORD *)(a2 + 17);
LABEL_18:
      swift_unknownObjectWeakTakeAssign();
      swift_unknownObjectWeakTakeAssign();
      *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
      swift_unknownObjectWeakTakeAssign();
      swift_unknownObjectWeakTakeAssign();
      swift_unknownObjectWeakTakeAssign();
      *(_WORD *)(a1 + 88) = *(_WORD *)(a2 + 88);
      *(void *)(a1 + 96) = *(void *)(a2 + 96);
      swift_bridgeObjectRelease();
      return a1;
    }
    outlined destroy of Toolbar.UpdateContext(a1 + 8);
    goto LABEL_10;
  }
  if (!v7)
  {
LABEL_10:
    long long v9 = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
    *(_OWORD *)(a1 + 56) = v9;
    long long v10 = *(_OWORD *)(a2 + 88);
    *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
    *(_OWORD *)(a1 + 88) = v10;
    long long v11 = *(_OWORD *)(a2 + 24);
    *UIMenuElementSize v5 = *v6;
    *(_OWORD *)(a1 + 24) = v11;
    return a1;
  }
  if (*(unsigned char *)(a2 + 16) == 2)
  {
    *UIMenuElementSize v5 = *v6;
    *(_OWORD *)(a1 + 17) = *(_OWORD *)(a2 + 17);
  }
  else
  {
    swift_unknownObjectWeakTakeInit();
    *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
    *(void *)(a1 + 24) = *(void *)(a2 + 24);
    *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  }
  swift_unknownObjectWeakTakeInit();
  swift_unknownObjectWeakTakeInit();
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  swift_unknownObjectWeakTakeInit();
  swift_unknownObjectWeakTakeInit();
  swift_unknownObjectWeakTakeInit();
  *(_WORD *)(a1 + 88) = *(_WORD *)(a2 + 88);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  return a1;
}

uint64_t getEnumTagSinglePayload for UIKitToolbarStrategy(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *((unsigned char *)a1 + 104)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  uint64_t v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for UIKitToolbarStrategy(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)uint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 104) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 104) = 0;
    }
    if (a2) {
      *(void *)uint64_t result = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for UIKitToolbarStrategy()
{
  return &type metadata for UIKitToolbarStrategy;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay7SwiftUI14ToolbarStorageV4ItemVG_So011UIBarButtonH0Cs5NeverOTg503_s7d9UI20UIKitf67StrategyV12makeBarItems33_A409749AC298CF150D90E447BB4FA064LLSaySo15ijh56CGyFyAA0D6BridgeCyACG_AA0D0O13UpdateContextVtXEfU_yAA0D7G44V5EntryV_AM06VendedR0OSgztXEfU_AgQ0R0VXEfU0_AF0iH7ContextVTf1cn_nTf4ng_n(uint64_t a1, void *a2, int a3)
{
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t result = MEMORY[0x1E4FBC860];
  if (v4)
  {
    uint64_t v11 = MEMORY[0x1E4FBC860];
    specialized ContiguousArray.reserveCapacity(_:)();
    uint64_t v8 = *(void *)(type metadata accessor for ToolbarStorage.Item(0) - 8);
    uint64_t v9 = a1 + ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
    uint64_t v10 = *(void *)(v8 + 72);
    do
    {
      specialized static UIKitBarButtonItem.makeGroupItem(item:context:)(v9, a2, a3);
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      v9 += v10;
      --v4;
    }
    while (v4);
    return v11;
  }
  return result;
}

uint64_t specialized ToolbarPlatformDelegate.navigationItem(_:didEndRenamingWith:)(uint64_t a1, void *a2)
{
  v42._countAndFlagsBits = a1;
  v42._object = a2;
  uint64_t v3 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E4FBB718];
  type metadata accessor for PlatformItemList.Item?(0, (unint64_t *)&lazy cache variable for type metadata for PlatformItemList.Item?, (uint64_t (*)(uint64_t))type metadata accessor for PlatformItemList.Item, MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v4 - 8);
  id v6 = (char *)&v35 - v5;
  uint64_t v7 = type metadata accessor for PlatformItemList.Item();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  uint64_t v10 = (uint64_t *)((char *)&v35 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  type metadata accessor for PlatformItemList.Item?(0, &lazy cache variable for type metadata for ToolbarStorage.NavigationProperties?, type metadata accessor for ToolbarStorage.NavigationProperties, v3);
  MEMORY[0x1F4188790](v11 - 8);
  uint64_t v13 = (char *)&v35 - v12;
  uint64_t v14 = type metadata accessor for ToolbarStorage.NavigationProperties(0);
  uint64_t v15 = *(void *)(v14 - 8);
  double v16 = MEMORY[0x1F4188790](v14);
  long long v18 = (char *)&v35 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = v2 + OBJC_IVAR____TtC7SwiftUI23ToolbarPlatformDelegate_provider;
  uint64_t result = MEMORY[0x18C119DF0](v2 + OBJC_IVAR____TtC7SwiftUI23ToolbarPlatformDelegate_provider, v16);
  if (result)
  {
    uint64_t v21 = *(void *)(v19 + 8);
    uint64_t ObjectType = swift_getObjectType();
    int v23 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v21 + 8))(ObjectType, v21);
    swift_unknownObjectRelease();
    uint64_t v24 = (uint64_t)v23 + direct field offset for ToolbarBridge.navigationProperties;
    swift_beginAccess();
    outlined init with copy of ToolbarStorage.NavigationProperties?(v24, (uint64_t)v13, &lazy cache variable for type metadata for ToolbarStorage.NavigationProperties?, type metadata accessor for ToolbarStorage.NavigationProperties, MEMORY[0x1E4FBB718]);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14) == 1)
    {

      return outlined destroy of ToolbarStorage.NavigationProperties?((uint64_t)v13, &lazy cache variable for type metadata for ToolbarStorage.NavigationProperties?, type metadata accessor for ToolbarStorage.NavigationProperties, MEMORY[0x1E4FBB718]);
    }
    else
    {
      outlined init with take of ToolbarStorage.NavigationProperties((uint64_t)v13, (uint64_t)v18, type metadata accessor for ToolbarStorage.NavigationProperties);
      outlined init with copy of ToolbarStorage.NavigationProperties?((uint64_t)&v18[*(int *)(v14 + 24)], (uint64_t)v6, (unint64_t *)&lazy cache variable for type metadata for PlatformItemList.Item?, (uint64_t (*)(uint64_t))type metadata accessor for PlatformItemList.Item, MEMORY[0x1E4FBB718]);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1)
      {
        outlined destroy of ToolbarStorage.NavigationProperties((uint64_t)v18, type metadata accessor for ToolbarStorage.NavigationProperties);

        return outlined destroy of ToolbarStorage.NavigationProperties?((uint64_t)v6, (unint64_t *)&lazy cache variable for type metadata for PlatformItemList.Item?, (uint64_t (*)(uint64_t))type metadata accessor for PlatformItemList.Item, MEMORY[0x1E4FBB718]);
      }
      else
      {
        outlined init with take of ToolbarStorage.NavigationProperties((uint64_t)v6, (uint64_t)v10, (uint64_t (*)(void))type metadata accessor for PlatformItemList.Item);
        unint64_t v25 = v10[41];
        if (v25 >> 2 != 0xFFFFFFFF && v25 >> 62 == 1)
        {
          id v27 = (void *)v10[37];
          uint64_t v26 = v10[38];
          uint64_t v28 = v10[40];
          uint64_t v40 = v10[39];
          uint64_t v41 = v26;
          uint64_t v29 = v10[43];
          uint64_t v38 = v10[42];
          uint64_t v39 = v28;
          uint64_t v30 = v10[45];
          uint64_t v36 = v10[44];
          uint64_t v37 = v29;
          uint64_t v31 = v10[46];
          uint64_t v32 = v10[47];
          uint64_t v33 = v10[48];
          uint64_t v34 = v10[49];
          outlined copy of PlatformItemList.Item.SystemItem(v27, v26, v40, v28, v25, v38, v29, v36, v30, v31, v32, v33, v34);
          PlatformTextFieldCoordinator.updateText(_:)(v42);
          outlined consume of PlatformItemList.Item.SystemItem?(v27, v41, v40, v39, v25, v38, v37, v36, v30, v31, v32, v33, v34);
        }

        outlined destroy of ToolbarStorage.NavigationProperties((uint64_t)v10, (uint64_t (*)(void))type metadata accessor for PlatformItemList.Item);
        return outlined destroy of ToolbarStorage.NavigationProperties((uint64_t)v18, type metadata accessor for ToolbarStorage.NavigationProperties);
      }
    }
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ToolbarPlatformDelegate and conformance ToolbarPlatformDelegate()
{
  unint64_t result = lazy protocol witness table cache variable for type ToolbarPlatformDelegate and conformance ToolbarPlatformDelegate;
  if (!lazy protocol witness table cache variable for type ToolbarPlatformDelegate and conformance ToolbarPlatformDelegate)
  {
    type metadata accessor for ToolbarPlatformDelegate();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ToolbarPlatformDelegate and conformance ToolbarPlatformDelegate);
  }
  return result;
}

uint64_t sub_187BFEAE8()
{
  if (*(void *)(v0 + 56))
  {
    if (*(void *)(v0 + 48))
    {
      outlined consume of Text.Storage(*(void *)(v0 + 24), *(void *)(v0 + 32), *(unsigned char *)(v0 + 40));
      swift_bridgeObjectRelease();
    }
    swift_release();
    swift_release();
    if (*(void *)(v0 + 112)) {
      __swift_destroy_boxed_opaque_existential_1(v0 + 88);
    }
  }
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

double partial apply for closure #1 in closure #1 in UIKitToolbarStrategy.updateHeaderProperties()@<D0>(uint64_t a1@<X8>)
{
  return closure #1 in closure #1 in UIKitToolbarStrategy.updateHeaderProperties()(v1 + 16, *(void *)(v1 + 120), *(void *)(v1 + 128), a1);
}

uint64_t sub_187BFEB78()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in closure #1 in UIKitToolbarStrategy.updateHeaderProperties()(uint64_t a1)
{
  return closure #2 in closure #1 in UIKitToolbarStrategy.updateHeaderProperties()(a1, *(void *)(v1 + 16));
}

uint64_t sub_187BFEBB8()
{
  outlined consume of AnyShareConfiguration.Storage(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40), *(unsigned char *)(v0 + 48));
  if (*(void *)(v0 + 80))
  {
    outlined consume of Text.Storage(*(void *)(v0 + 56), *(void *)(v0 + 64), *(unsigned char *)(v0 + 72));
    swift_bridgeObjectRelease();
  }
  if (*(void *)(v0 + 112))
  {
    outlined consume of Text.Storage(*(void *)(v0 + 88), *(void *)(v0 + 96), *(unsigned char *)(v0 + 104));
    swift_bridgeObjectRelease();
  }
  swift_release();
  swift_release();

  return swift_deallocObject();
}

id partial apply for closure #3 in closure #1 in UIKitToolbarStrategy.updateHeaderProperties()()
{
  return closure #3 in closure #1 in UIKitToolbarStrategy.updateHeaderProperties()(v0 + 16, *(void *)(v0 + 120), *(void *)(v0 + 128));
}

uint64_t outlined destroy of AnySharePreview(uint64_t a1)
{
  return a1;
}

uint64_t outlined retain of AnyShareConfiguration(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  uint64_t v3 = *(void *)(a1 + 48);
  uint64_t v4 = *(void *)(a1 + 56);
  uint64_t v5 = *(void *)(a1 + 64);
  uint64_t v6 = *(void *)(a1 + 72);
  uint64_t v7 = *(void *)(a1 + 80);
  uint64_t v8 = *(void *)(a1 + 88);
  uint64_t v9 = *(void *)(a1 + 96);
  outlined copy of AnyShareConfiguration.Storage(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(unsigned char *)(a1 + 32));
  outlined copy of Text?(v2, v3, v4, v5);
  outlined copy of Text?(v6, v7, v8, v9);
  return a1;
}

uint64_t outlined copy of ToolbarStorage.NavigationProperties.Actions?(uint64_t result, unsigned __int8 a2)
{
  if (a2 != 254) {
    return outlined copy of PlatformItemCollection?(result, a2);
  }
  return result;
}

uint64_t sub_187BFED44()
{
  int v1 = *(unsigned __int8 *)(v0 + 24);
  if (v1 != 255) {
    outlined consume of PlatformItemCollection.Storage(*(void *)(v0 + 16), v1 & 1);
  }
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

void partial apply for closure #1 in closure #1 in UIKitToolbarStrategy.updateTitleMenuProvider()(uint64_t a1)
{
  closure #1 in closure #1 in UIKitToolbarStrategy.updateTitleMenuProvider()(a1, *(void *)(v1 + 16), *(unsigned char *)(v1 + 24), *(void *)(v1 + 32));
}

uint64_t sub_187BFEDA4()
{
  _Block_release(*(const void **)(v0 + 16));

  return swift_deallocObject();
}

id partial apply for thunk for @escaping @callee_unowned @convention(block) (@unowned NSArray) -> (@autoreleased UIMenu?)(uint64_t a1)
{
  return thunk for @escaping @callee_unowned @convention(block) (@unowned NSArray) -> (@autoreleased UIMenu?)(a1, *(void *)(v1 + 16));
}

uint64_t partial apply for closure #1 in closure #1 in closure #1 in UIKitToolbarStrategy.updateTitleMenuProvider()@<X0>(void *a1@<X8>)
{
  return closure #1 in closure #1 in closure #1 in UIKitToolbarStrategy.updateTitleMenuProvider()(*(void *)(v1 + 16), *(unsigned char *)(v1 + 24), a1);
}

void type metadata accessor for WeakBox<UIBarButtonItem>(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v8 = type metadata accessor for NSObject(255, a3);
    unint64_t v9 = a5(a1, v8);
    if (!v10) {
      atomic_store(v9, a2);
    }
  }
}

uint64_t sub_187BFEE9C()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in UIKitToolbarStrategy.barButtonItems(in:)(uint64_t a1, uint64_t a2)
{
  return partial apply for closure #1 in closure #1 in UIKitToolbarStrategy.barButtonItems(in:)(a1, a2, (uint64_t (*)(uint64_t, uint64_t, void, void, void, void, void))closure #1 in closure #1 in UIKitToolbarStrategy.barButtonItems(in:));
}

uint64_t outlined init with take of WeakBox<UIBarButtonItem>(uint64_t a1, uint64_t a2)
{
  type metadata accessor for WeakBox<UIBarButtonItem>(0, (unint64_t *)&lazy cache variable for type metadata for WeakBox<UIBarButtonItem>, (unint64_t *)&lazy cache variable for type metadata for UIBarButtonItem, 0x1E4FB14A8, MEMORY[0x1E4F41720]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void type metadata accessor for (Toolbar.VendedItem, ToolbarStorage.Entry.Kind)()
{
  if (!lazy cache variable for type metadata for (Toolbar.VendedItem, ToolbarStorage.Entry.Kind))
  {
    type metadata accessor for ToolbarStorage.Entry.Kind(255);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (Toolbar.VendedItem, ToolbarStorage.Entry.Kind));
    }
  }
}

uint64_t outlined assign with copy of ToolbarStorage.Item(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ToolbarStorage.Item(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

uint64_t outlined assign with copy of ToolbarStorage.GroupItem?(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t (*a4)(uint64_t))
{
  type metadata accessor for PlatformItemList.Item?(0, a3, a4, MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a2, a1, v6);
  return a2;
}

void partial apply for closure #1 in ToolbarBridge.navigationItemWillDisappear<A>(hostingController:)()
{
  closure #1 in ToolbarBridge.navigationItemWillDisappear<A>(hostingController:)(v0[4], v0[5], v0[2], v0[3]);
}

uint64_t partial apply for closure #1 in closure #1 in ToolbarBridge.navigationItemWillDisappear<A>(hostingController:)(uint64_t a1)
{
  return closure #1 in closure #1 in ToolbarBridge.navigationItemWillDisappear<A>(hostingController:)(a1, v1[4], v1[5], v1[6]);
}

uint64_t outlined init with take of PushTarget(uint64_t a1, uint64_t a2)
{
  return a2;
}

void partial apply for closure #1 in ToolbarBridge.navigationItemWillAppear<A>(hostingController:)()
{
  closure #1 in ToolbarBridge.navigationItemWillAppear<A>(hostingController:)(v0[2], v0[3], v0[4]);
}

uint64_t partial apply for closure #1 in closure #1 in ToolbarBridge.navigationItemWillAppear<A>(hostingController:)(uint64_t a1)
{
  return closure #1 in closure #1 in ToolbarBridge.navigationItemWillAppear<A>(hostingController:)(a1, v1[2], v1[3], v1[4]);
}

void partial apply for closure #1 in ToolbarBridge.safeAreaDidChange<A>(hostingController:)()
{
  uint64_t v1 = *(void *)(v0 + 16);
  BOOL v2 = __OFSUB__(v1, 1);
  uint64_t v3 = v1 - 1;
  if (v2) {
    __break(1u);
  }
  else {
    *(void *)(v0 + 16) = v3;
  }
}

ValueMetadata *type metadata accessor for EnvironmentValues.InputAccessoryKey()
{
  return &type metadata for EnvironmentValues.InputAccessoryKey;
}

uint64_t sub_187BFF1F0()
{
  return swift_getOpaqueTypeConformance2();
}

void static SubmitTriggers.text.getter(void *a1@<X8>)
{
  *a1 = 1;
}

uint64_t SubmitTriggers.rawValue.getter()
{
  return *(void *)v0;
}

SwiftUI::SubmitTriggers __swiftcall SubmitTriggers.init(rawValue:)(SwiftUI::SubmitTriggers rawValue)
{
  v1->rawuint64_t Value = rawValue.rawValue;
  return rawValue;
}

void static SubmitTriggers.search.getter(void *a1@<X8>)
{
  *a1 = 4;
}

void static SubmitTriggers.collection.getter(void *a1@<X8>)
{
  *a1 = 8;
}

unint64_t lazy protocol witness table accessor for type SubmitTriggers and conformance SubmitTriggers()
{
  unint64_t result = lazy protocol witness table cache variable for type SubmitTriggers and conformance SubmitTriggers;
  if (!lazy protocol witness table cache variable for type SubmitTriggers and conformance SubmitTriggers)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SubmitTriggers and conformance SubmitTriggers);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SubmitTriggers and conformance SubmitTriggers;
  if (!lazy protocol witness table cache variable for type SubmitTriggers and conformance SubmitTriggers)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SubmitTriggers and conformance SubmitTriggers);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SubmitTriggers and conformance SubmitTriggers;
  if (!lazy protocol witness table cache variable for type SubmitTriggers and conformance SubmitTriggers)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SubmitTriggers and conformance SubmitTriggers);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SubmitTriggers and conformance SubmitTriggers;
  if (!lazy protocol witness table cache variable for type SubmitTriggers and conformance SubmitTriggers)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SubmitTriggers and conformance SubmitTriggers);
  }
  return result;
}

void one-time initialization function for all()
{
  uint64_t v0 = unk_1ED4184A0;
  if ((unk_1ED4184A0 & ~qword_1ED418498) == 0) {
    uint64_t v0 = 0;
  }
  static SubmitTriggers.all = v0 | qword_1ED418498;
}

{
  uint64_t v0;
  uint64_t v1;

  uint64_t v0 = unk_1ED411798;
  if ((unk_1ED411798 & ~qword_1ED411790) == 0) {
    uint64_t v0 = 0;
  }
  uint64_t v1 = qword_1ED4117A0;
  if ((qword_1ED4117A0 & ~(v0 | qword_1ED411790)) == 0) {
    uint64_t v1 = 0;
  }
  static ListItemKind.Set.all = v1 | v0 | qword_1ED411790;
}

{
  uint64_t v0;
  uint64_t v1;

  uint64_t v0 = unk_1ED41D618;
  if ((unk_1ED41D618 & ~qword_1ED41D610) == 0) {
    uint64_t v0 = 0;
  }
  uint64_t v1 = qword_1ED41D620;
  if ((qword_1ED41D620 & ~(v0 | qword_1ED41D610)) == 0) {
    uint64_t v1 = 0;
  }
  static FocusableOptions.all = v1 | v0 | qword_1ED41D610;
}

void static ScrollableHStackBehavior.continuous.getter(unsigned char *a1@<X8>)
{
  *a1 = 3;
}

void static ScrollableHStackBehavior.childLeading.getter(unsigned char *a1@<X8>)
{
  *a1 = 0;
}

void static ScrollableHStackBehavior.paging.getter(unsigned char *a1@<X8>)
{
  *a1 = 1;
}

void static ScrollableHStackBehavior.childPaging.getter(unsigned char *a1@<X8>)
{
  *a1 = 2;
}

uint64_t ScrollableHStack.init(_:width:padding:alignment:spacing:content:)@<X0>(unsigned char *a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, char a6@<W5>, uint64_t (*a7)(uint64_t, uint64_t, uint64_t, uint64_t)@<X6>, uint64_t a8@<X8>, double a9@<D0>)
{
  *(unsigned char *)a8 = *a1;
  *(double *)(a8 + 8) = a9;
  *(void *)(a8 + 16) = a2;
  *(unsigned char *)(a8 + 24) = a3 & 1;
  *(void *)(a8 + 32) = a4;
  *(void *)(a8 + 40) = a5;
  *(unsigned char *)(a8 + 48) = a6 & 1;
  uint64_t v11 = type metadata accessor for ScrollableHStackBase();
  uint64_t result = a7(v11, v12, v13, v14);
  double v16 = (void *)(a8 + *(int *)(v11 + 72));
  *double v16 = destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
  v16[1] = 0;
  return result;
}

uint64_t ScrollableHStack.body.getter(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 24);
  v8[0] = *(void *)(a1 + 16);
  v8[1] = MEMORY[0x1E4F3F740];
  long long v8[2] = v2;
  v8[3] = MEMORY[0x1E4F3F738];
  uint64_t v3 = type metadata accessor for ScrollableHStackBase();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  uint64_t v6 = (char *)v8 - v5;
  swift_getWitnessTable();
  static ViewBuilder.buildExpression<A>(_:)(v1);
  static ViewBuilder.buildExpression<A>(_:)(v6);
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t type metadata accessor for ScrollableHStackBase()
{
  return swift_getGenericMetadata();
}

uint64_t associated type witness table accessor for View.Body : View in ScrollableHStack<A>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t getEnumTagSinglePayload for ScrollableHStackBehavior(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFD) {
    goto LABEL_17;
  }
  if (a2 + 3 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 3) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 3;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 3;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 3;
    }
  }
LABEL_17:
  if (*a1 <= 3u) {
    int v6 = 3;
  }
  else {
    int v6 = *a1;
  }
  int v7 = v6 - 4;
  if (*a1 < 3u) {
    int v8 = -1;
  }
  else {
    int v8 = v7;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for ScrollableHStackBehavior(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *uint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x187BFF7D8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ScrollableHStackBehavior()
{
  return &type metadata for ScrollableHStackBehavior;
}

uint64_t type metadata completion function for ScrollableHStack()
{
  uint64_t result = type metadata accessor for ScrollableHStackBase();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for ScrollableHStack(unint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  if (v5 <= 0x7FFFFFFF) {
    unsigned int v7 = 0x7FFFFFFF;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  uint64_t v8 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) + 7;
  if (v7 < a2)
  {
    unint64_t v9 = ((v8 + ((v6 + 49) & ~v6)) & 0xFFFFFFFFFFFFFFF8) + 16;
    unsigned int v10 = a2 - v7;
    uint64_t v11 = v9 & 0xFFFFFFF8;
    if ((v9 & 0xFFFFFFF8) != 0) {
      unsigned int v12 = 2;
    }
    else {
      unsigned int v12 = v10 + 1;
    }
    if (v12 >= 0x10000) {
      unsigned int v13 = 4;
    }
    else {
      unsigned int v13 = 2;
    }
    if (v12 < 0x100) {
      unsigned int v13 = 1;
    }
    if (v12 >= 2) {
      uint64_t v14 = v13;
    }
    else {
      uint64_t v14 = 0;
    }
    switch(v14)
    {
      case 1:
        int v15 = *(unsigned __int8 *)(a1 + v9);
        if (!v15) {
          break;
        }
        goto LABEL_22;
      case 2:
        int v15 = *(unsigned __int16 *)(a1 + v9);
        if (v15) {
          goto LABEL_22;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x187BFFA50);
      case 4:
        int v15 = *(_DWORD *)(a1 + v9);
        if (!v15) {
          break;
        }
LABEL_22:
        int v17 = v15 - 1;
        if (v11)
        {
          int v17 = 0;
          LODWORD(v11) = *(_DWORD *)a1;
        }
        return v7 + (v11 | v17) + 1;
      default:
        break;
    }
  }
  unint64_t v18 = ((((((a1 & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + v6 + 9) & ~v6;
  if (v5 >= 0x7FFFFFFF) {
    return (*(uint64_t (**)(unint64_t))(v4 + 48))(v18);
  }
  unint64_t v19 = *(void *)((v8 + v18) & 0xFFFFFFFFFFFFFFF8);
  if (v19 >= 0xFFFFFFFF) {
    LODWORD(v19) = -1;
  }
  return (v19 + 1);
}

void storeEnumTagSinglePayload for ScrollableHStack(unint64_t a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v10 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64) + 7;
  unint64_t v11 = ((v10 + ((v9 + 49) & ~v9)) & 0xFFFFFFFFFFFFFFF8) + 16;
  if (v8 >= a3)
  {
    int v15 = 0;
    int v16 = a2 - v8;
    if (a2 <= v8)
    {
LABEL_17:
      switch(v15)
      {
        case 1:
          *(unsigned char *)(a1 + v11) = 0;
          if (!a2) {
            return;
          }
          goto LABEL_30;
        case 2:
          *(_WORD *)(a1 + v11) = 0;
          if (!a2) {
            return;
          }
          goto LABEL_30;
        case 3:
          goto LABEL_43;
        case 4:
          *(_DWORD *)(a1 + v11) = 0;
          goto LABEL_29;
        default:
LABEL_29:
          if (a2)
          {
LABEL_30:
            unint64_t v19 = ((((((a1 & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + v9 + 9) & ~v9;
            if (v7 < 0x7FFFFFFF)
            {
              uint64_t v21 = (void *)((v10 + v19) & 0xFFFFFFFFFFFFFFF8);
              if ((a2 & 0x80000000) != 0)
              {
                uint64_t v22 = a2 ^ 0x80000000;
                v21[1] = 0;
              }
              else
              {
                uint64_t v22 = a2 - 1;
              }
              *uint64_t v21 = v22;
            }
            else
            {
              long long v20 = *(void (**)(unint64_t))(v6 + 56);
              v20(v19);
            }
          }
          break;
      }
      return;
    }
  }
  else
  {
    unsigned int v12 = a3 - v8;
    if (((v10 + ((v9 + 49) & ~v9)) & 0xFFFFFFF8) == 0xFFFFFFF0) {
      unsigned int v13 = v12 + 1;
    }
    else {
      unsigned int v13 = 2;
    }
    if (v13 >= 0x10000) {
      int v14 = 4;
    }
    else {
      int v14 = 2;
    }
    if (v13 < 0x100) {
      int v14 = 1;
    }
    if (v13 >= 2) {
      int v15 = v14;
    }
    else {
      int v15 = 0;
    }
    int v16 = a2 - v8;
    if (a2 <= v8) {
      goto LABEL_17;
    }
  }
  if (((v10 + ((v9 + 49) & ~v9)) & 0xFFFFFFF8) == 0xFFFFFFF0) {
    int v17 = v16;
  }
  else {
    int v17 = 1;
  }
  if (((v10 + ((v9 + 49) & ~v9)) & 0xFFFFFFF8) != 0xFFFFFFF0)
  {
    int v18 = ~v8 + a2;
    bzero((void *)a1, ((v10 + ((v9 + 49) & ~v9)) & 0xFFFFFFFFFFFFFFF8) + 16);
    *(_DWORD *)a1 = v18;
  }
  switch(v15)
  {
    case 1:
      *(unsigned char *)(a1 + v11) = v17;
      break;
    case 2:
      *(_WORD *)(a1 + v11) = v17;
      break;
    case 3:
LABEL_43:
      __break(1u);
      JUMPOUT(0x187BFFC7CLL);
    case 4:
      *(_DWORD *)(a1 + v11) = v17;
      break;
    default:
      return;
  }
}

uint64_t type metadata accessor for ScrollableHStack()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_187BFFCBC()
{
  return swift_getWitnessTable();
}

uint64_t type metadata completion function for ScrollableHStackBase()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

void *initializeBufferWithCopyOfBuffer for ScrollableHStack(unint64_t a1, unint64_t a2, uint64_t a3)
{
  int v3 = (void *)a1;
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v5 = *(_DWORD *)(v4 + 80);
  uint64_t v6 = *(void *)(v4 + 64) + 7;
  if (v5 > 7
    || (*(_DWORD *)(v4 + 80) & 0x100000) != 0
    || ((v6 + ((v5 + 49) & ~v5)) & 0xFFFFFFFFFFFFFFF8) + 16 > 0x18)
  {
    uint64_t v9 = *(void *)a2;
    void *v3 = *(void *)a2;
    int v3 = (void *)(v9 + ((v5 & 0xF8 ^ 0x1F8) & (v5 + 16)));
  }
  else
  {
    *(unsigned char *)a1 = *(unsigned char *)a2;
    *(void *)((a1 & 0xFFFFFFFFFFFFFFF8) + 8) = *(void *)((a2 & 0xFFFFFFFFFFFFFFF8) + 8);
    unint64_t v10 = ((a1 & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v11 = ((a2 & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v12 = *(void *)v11;
    *(unsigned char *)(v10 + 8) = *(unsigned char *)(v11 + 8);
    *(void *)unint64_t v10 = v12;
    unsigned int v13 = (void *)(((a1 & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFFFF8);
    int v14 = (void *)(((a2 & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFFFF8);
    *unsigned int v13 = *v14;
    unint64_t v15 = ((unint64_t)v13 + 15) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v16 = ((unint64_t)v14 + 15) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v17 = *(void *)v16;
    *(unsigned char *)(v15 + 8) = *(unsigned char *)(v16 + 8);
    *(void *)unint64_t v15 = v17;
    uint64_t v18 = (v15 + v5 + 9) & ~v5;
    uint64_t v19 = (v16 + v5 + 9) & ~v5;
    (*(void (**)(uint64_t, uint64_t))(v4 + 16))(v18, v19);
    long long v20 = (void *)((v6 + v19) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v21 = v20[1];
    uint64_t v22 = (void *)((v6 + v18) & 0xFFFFFFFFFFFFFFF8);
    *uint64_t v22 = *v20;
    v22[1] = v21;
  }
  swift_retain();
  return v3;
}

uint64_t destroy for ScrollableHStack(uint64_t a1, uint64_t a2)
{
  (*(void (**)(unint64_t))(*(void *)(*(void *)(a2 + 16) - 8) + 8))(((((((a1 & 0xFFFFFFFFFFFFFFF8)
                                                                                                + 39) & 0xFFFFFFFFFFFFFFF8)
                                                                                              + 15) & 0xFFFFFFFFFFFFFFF8)
                                                                                            + *(unsigned __int8 *)(*(void *)(*(void *)(a2 + 16) - 8) + 80)
                                                                                            + 9) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(*(void *)(a2 + 16) - 8) + 80));

  return swift_release();
}

unint64_t initializeWithCopy for ScrollableHStack(unint64_t a1, unint64_t a2, uint64_t a3)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)((a1 & 0xFFFFFFFFFFFFFFF8) + 8) = *(void *)((a2 & 0xFFFFFFFFFFFFFFF8) + 8);
  unint64_t v4 = ((a1 & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v5 = ((a2 & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v6 = *(void *)v5;
  *(unsigned char *)(v4 + 8) = *(unsigned char *)(v5 + 8);
  *(void *)unint64_t v4 = v6;
  unsigned int v7 = (void *)(((a1 & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFFFF8);
  unsigned int v8 = (void *)(((a2 & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFFFF8);
  *unsigned int v7 = *v8;
  unint64_t v9 = ((unint64_t)v7 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v10 = ((unint64_t)v8 + 15) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v11 = *(void *)v10;
  *(unsigned char *)(v9 + 8) = *(unsigned char *)(v10 + 8);
  *(void *)unint64_t v9 = v11;
  uint64_t v12 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v13 = v12 + 16;
  uint64_t v14 = *(unsigned __int8 *)(v12 + 80);
  uint64_t v15 = (v14 + 9 + v9) & ~v14;
  uint64_t v16 = (v14 + 9 + v10) & ~v14;
  (*(void (**)(uint64_t, uint64_t))(v12 + 16))(v15, v16);
  uint64_t v17 = *(void *)(v13 + 48) + 7;
  uint64_t v18 = (void *)((v17 + v15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v19 = (void *)((v17 + v16) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v20 = v19[1];
  *uint64_t v18 = *v19;
  v18[1] = v20;
  swift_retain();
  return a1;
}

unint64_t assignWithCopy for ScrollableHStack(unint64_t a1, unint64_t a2, uint64_t a3)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)((a1 & 0xFFFFFFFFFFFFFFF8) + 8) = *(void *)((a2 & 0xFFFFFFFFFFFFFFF8) + 8);
  unint64_t v4 = ((a1 & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v5 = ((a2 & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v6 = *(void *)v5;
  *(unsigned char *)(v4 + 8) = *(unsigned char *)(v5 + 8);
  *(void *)unint64_t v4 = v6;
  unsigned int v7 = (void *)(((a1 & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFFFF8);
  unsigned int v8 = (void *)(((a2 & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFFFF8);
  *unsigned int v7 = *v8;
  unint64_t v9 = ((unint64_t)v7 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v10 = ((unint64_t)v8 + 15) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v11 = *(void *)v10;
  *(unsigned char *)(v9 + 8) = *(unsigned char *)(v10 + 8);
  *(void *)unint64_t v9 = v11;
  uint64_t v12 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v13 = v12 + 24;
  uint64_t v14 = *(unsigned __int8 *)(v12 + 80);
  uint64_t v15 = (v14 + 9 + v9) & ~v14;
  uint64_t v16 = (v14 + 9 + v10) & ~v14;
  (*(void (**)(uint64_t, uint64_t))(v12 + 24))(v15, v16);
  uint64_t v17 = *(void *)(v13 + 40) + 7;
  uint64_t v18 = (void *)((v17 + v15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v19 = (void *)((v17 + v16) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v20 = v19[1];
  *uint64_t v18 = *v19;
  v18[1] = v20;
  swift_retain();
  swift_release();
  return a1;
}

unint64_t initializeWithTake for ScrollableHStack(unint64_t a1, unint64_t a2, uint64_t a3)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)((a1 & 0xFFFFFFFFFFFFFFF8) + 8) = *(void *)((a2 & 0xFFFFFFFFFFFFFFF8) + 8);
  unint64_t v4 = ((a1 & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v5 = ((a2 & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v6 = *(void *)v5;
  *(unsigned char *)(v4 + 8) = *(unsigned char *)(v5 + 8);
  *(void *)unint64_t v4 = v6;
  unsigned int v7 = (void *)(((a1 & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFFFF8);
  unsigned int v8 = (void *)(((a2 & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFFFF8);
  *unsigned int v7 = *v8;
  unint64_t v9 = ((unint64_t)v7 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v10 = ((unint64_t)v8 + 15) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v11 = *(void *)v10;
  *(unsigned char *)(v9 + 8) = *(unsigned char *)(v10 + 8);
  *(void *)unint64_t v9 = v11;
  uint64_t v12 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v13 = v12 + 32;
  uint64_t v14 = *(unsigned __int8 *)(v12 + 80);
  uint64_t v15 = (v14 + 9 + v9) & ~v14;
  uint64_t v16 = (v14 + 9 + v10) & ~v14;
  (*(void (**)(uint64_t, uint64_t))(v12 + 32))(v15, v16);
  *(_OWORD *)((*(void *)(v13 + 32) + 7 + v15) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)((*(void *)(v13 + 32)
                                                                                       + 7
                                                                                       + v16) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

unint64_t assignWithTake for ScrollableHStack(unint64_t a1, unint64_t a2, uint64_t a3)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)((a1 & 0xFFFFFFFFFFFFFFF8) + 8) = *(void *)((a2 & 0xFFFFFFFFFFFFFFF8) + 8);
  unint64_t v4 = ((a1 & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v5 = ((a2 & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v6 = *(void *)v5;
  *(unsigned char *)(v4 + 8) = *(unsigned char *)(v5 + 8);
  *(void *)unint64_t v4 = v6;
  unsigned int v7 = (void *)(((a1 & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFFFF8);
  unsigned int v8 = (void *)(((a2 & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFFFF8);
  *unsigned int v7 = *v8;
  unint64_t v9 = ((unint64_t)v7 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v10 = ((unint64_t)v8 + 15) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v11 = *(void *)v10;
  *(unsigned char *)(v9 + 8) = *(unsigned char *)(v10 + 8);
  *(void *)unint64_t v9 = v11;
  uint64_t v12 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v13 = v12 + 40;
  uint64_t v14 = *(unsigned __int8 *)(v12 + 80);
  uint64_t v15 = (v14 + 9 + v9) & ~v14;
  uint64_t v16 = (v14 + 9 + v10) & ~v14;
  (*(void (**)(uint64_t, uint64_t))(v12 + 40))(v15, v16);
  *(_OWORD *)((*(void *)(v13 + 24) + 7 + v15) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)((*(void *)(v13 + 24)
                                                                                       + 7
                                                                                       + v16) & 0xFFFFFFFFFFFFFFF8);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for ScrollableHStackBase(unint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  if (v5 <= 0x7FFFFFFF) {
    unsigned int v7 = 0x7FFFFFFF;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  uint64_t v8 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) + 7;
  if (v7 < a2)
  {
    unint64_t v9 = ((v8 + ((v6 + 49) & ~v6)) & 0xFFFFFFFFFFFFFFF8) + 16;
    unsigned int v10 = a2 - v7;
    uint64_t v11 = v9 & 0xFFFFFFF8;
    if ((v9 & 0xFFFFFFF8) != 0) {
      unsigned int v12 = 2;
    }
    else {
      unsigned int v12 = v10 + 1;
    }
    if (v12 >= 0x10000) {
      unsigned int v13 = 4;
    }
    else {
      unsigned int v13 = 2;
    }
    if (v12 < 0x100) {
      unsigned int v13 = 1;
    }
    if (v12 >= 2) {
      uint64_t v14 = v13;
    }
    else {
      uint64_t v14 = 0;
    }
    switch(v14)
    {
      case 1:
        int v15 = *(unsigned __int8 *)(a1 + v9);
        if (!v15) {
          break;
        }
        goto LABEL_22;
      case 2:
        int v15 = *(unsigned __int16 *)(a1 + v9);
        if (v15) {
          goto LABEL_22;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x187C0058CLL);
      case 4:
        int v15 = *(_DWORD *)(a1 + v9);
        if (!v15) {
          break;
        }
LABEL_22:
        int v17 = v15 - 1;
        if (v11)
        {
          int v17 = 0;
          LODWORD(v11) = *(_DWORD *)a1;
        }
        return v7 + (v11 | v17) + 1;
      default:
        break;
    }
  }
  unint64_t v18 = ((((((a1 & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + v6 + 9) & ~v6;
  if (v5 >= 0x7FFFFFFF) {
    return (*(uint64_t (**)(unint64_t))(v4 + 48))(v18);
  }
  unint64_t v19 = *(void *)((v8 + v18) & 0xFFFFFFFFFFFFFFF8);
  if (v19 >= 0xFFFFFFFF) {
    LODWORD(v19) = -1;
  }
  return (v19 + 1);
}

void storeEnumTagSinglePayload for ScrollableHStackBase(unint64_t a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v10 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64) + 7;
  unint64_t v11 = ((v10 + ((v9 + 49) & ~v9)) & 0xFFFFFFFFFFFFFFF8) + 16;
  if (v8 >= a3)
  {
    int v15 = 0;
    int v16 = a2 - v8;
    if (a2 <= v8)
    {
LABEL_17:
      switch(v15)
      {
        case 1:
          *(unsigned char *)(a1 + v11) = 0;
          if (!a2) {
            return;
          }
          goto LABEL_30;
        case 2:
          *(_WORD *)(a1 + v11) = 0;
          if (!a2) {
            return;
          }
          goto LABEL_30;
        case 3:
          goto LABEL_43;
        case 4:
          *(_DWORD *)(a1 + v11) = 0;
          goto LABEL_29;
        default:
LABEL_29:
          if (a2)
          {
LABEL_30:
            unint64_t v19 = ((((((a1 & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + v9 + 9) & ~v9;
            if (v7 < 0x7FFFFFFF)
            {
              uint64_t v21 = (void *)((v10 + v19) & 0xFFFFFFFFFFFFFFF8);
              if ((a2 & 0x80000000) != 0)
              {
                uint64_t v22 = a2 ^ 0x80000000;
                v21[1] = 0;
              }
              else
              {
                uint64_t v22 = a2 - 1;
              }
              *uint64_t v21 = v22;
            }
            else
            {
              uint64_t v20 = *(void (**)(unint64_t))(v6 + 56);
              v20(v19);
            }
          }
          break;
      }
      return;
    }
  }
  else
  {
    unsigned int v12 = a3 - v8;
    if (((v10 + ((v9 + 49) & ~v9)) & 0xFFFFFFF8) == 0xFFFFFFF0) {
      unsigned int v13 = v12 + 1;
    }
    else {
      unsigned int v13 = 2;
    }
    if (v13 >= 0x10000) {
      int v14 = 4;
    }
    else {
      int v14 = 2;
    }
    if (v13 < 0x100) {
      int v14 = 1;
    }
    if (v13 >= 2) {
      int v15 = v14;
    }
    else {
      int v15 = 0;
    }
    int v16 = a2 - v8;
    if (a2 <= v8) {
      goto LABEL_17;
    }
  }
  if (((v10 + ((v9 + 49) & ~v9)) & 0xFFFFFFF8) == 0xFFFFFFF0) {
    int v17 = v16;
  }
  else {
    int v17 = 1;
  }
  if (((v10 + ((v9 + 49) & ~v9)) & 0xFFFFFFF8) != 0xFFFFFFF0)
  {
    int v18 = ~v8 + a2;
    bzero((void *)a1, ((v10 + ((v9 + 49) & ~v9)) & 0xFFFFFFFFFFFFFFF8) + 16);
    *(_DWORD *)a1 = v18;
  }
  switch(v15)
  {
    case 1:
      *(unsigned char *)(a1 + v11) = v17;
      break;
    case 2:
      *(_WORD *)(a1 + v11) = v17;
      break;
    case 3:
LABEL_43:
      __break(1u);
      JUMPOUT(0x187C007B8);
    case 4:
      *(_DWORD *)(a1 + v11) = v17;
      break;
    default:
      return;
  }
}

uint64_t associated type witness table accessor for View.Body : View in ScrollableHStackBase<A, B>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t ScrollableHStackBase.body.getter@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v69 = a2;
  uint64_t v4 = a1[4];
  uint64_t v62 = a1[2];
  uint64_t v63 = v4;
  type metadata accessor for LazyFixedSizeHStack();
  uint64_t v5 = type metadata accessor for ScrollView();
  uint64_t v58 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v57 = (uint64_t)&v54 - v6;
  uint64_t v71 = v7;
  uint64_t v8 = type metadata accessor for ModifiedContent();
  uint64_t v61 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  uint64_t v10 = (char *)&v54 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v11);
  uint64_t v60 = (char *)&v54 - v12;
  uint64_t v13 = type metadata accessor for PagingScrollView();
  uint64_t v55 = *(void *)(v13 - 8);
  MEMORY[0x1F4188790](v13);
  int v15 = (char *)&v54 - v14;
  uint64_t v68 = v16;
  uint64_t v17 = type metadata accessor for ModifiedContent();
  uint64_t v56 = *(void *)(v17 - 8);
  MEMORY[0x1F4188790](v17);
  unint64_t v19 = (char *)&v54 - v18;
  uint64_t v67 = v20;
  uint64_t v21 = type metadata accessor for ModifiedContent();
  uint64_t v59 = *(void *)(v21 - 8);
  MEMORY[0x1F4188790](v21);
  int v23 = (char *)&v54 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v24);
  uint64_t v26 = (char *)&v54 - v25;
  uint64_t v64 = v8;
  uint64_t v66 = type metadata accessor for _ConditionalContent();
  uint64_t v65 = *(void *)(v66 - 8);
  MEMORY[0x1F4188790](v66);
  uint64_t v70 = (char *)&v54 - v28;
  if (*v2 == 3)
  {
    MEMORY[0x1F4188790](v27);
    uint64_t v29 = a1[3];
    *(&v54 - 6) = v62;
    *(&v54 - 5) = v29;
    uint64_t v30 = a1[5];
    *(&v54 - 4) = v63;
    *(&v54 - 3) = v30;
    *(&v54 - 2) = (uint64_t)v2;
    uint64_t v31 = v57;
    ScrollView.init(_:content:)(1, (uint64_t (*)(uint64_t))partial apply for closure #2 in ScrollableHStackBase.body.getter, v57);
    uint64_t v32 = static Edge.Set.horizontal.getter();
    double v33 = ScrollableHStackBase.actualPadding.getter();
    uint64_t v34 = v71;
    uint64_t WitnessTable = swift_getWitnessTable();
    View.scrollContentPadding(_:_:)(v32, v34, WitnessTable, v33);
    (*(void (**)(uint64_t, uint64_t))(v58 + 8))(v31, v34);
    uint64_t v91 = WitnessTable;
    uint64_t v92 = &protocol witness table for ContentMarginModifier;
    uint64_t v36 = v64;
    swift_getWitnessTable();
    uint64_t v37 = v21;
    uint64_t v38 = v60;
    static ViewBuilder.buildExpression<A>(_:)(v10);
    uint64_t v39 = *(void (**)(char *, uint64_t))(v61 + 8);
    v39(v10, v36);
    static ViewBuilder.buildExpression<A>(_:)(v38);
    uint64_t v89 = swift_getWitnessTable();
    int v90 = &protocol witness table for ContentMarginModifier;
    uint64_t v87 = swift_getWitnessTable();
    uint64_t v88 = &protocol witness table for TransformScrollIndicators;
    swift_getWitnessTable();
    static ViewBuilder.buildEither<A, B>(second:)((uint64_t)v10, v37, v36);
    v39(v10, v36);
    v39(v38, v36);
  }
  else
  {
    char v78 = *v2;
    MEMORY[0x1F4188790](v27);
    uint64_t v40 = a1[3];
    *(&v54 - 6) = v62;
    *(&v54 - 5) = v40;
    uint64_t v41 = a1[5];
    *(&v54 - 4) = v63;
    *(&v54 - 3) = v41;
    *(&v54 - 2) = (uint64_t)v2;
    PagingScrollView.init(behavior:axis:content:)(&v78, 0, partial apply for closure #2 in ScrollableHStackBase.body.getter, v15);
    uint64_t v42 = static Edge.Set.horizontal.getter();
    double v43 = ScrollableHStackBase.actualPadding.getter();
    uint64_t v44 = v68;
    uint64_t v45 = swift_getWitnessTable();
    View.scrollContentPadding(_:_:)(v42, v44, v45, v43);
    (*(void (**)(unsigned char *, uint64_t))(v55 + 8))(v15, v44);
    char v78 = 3;
    uint64_t v76 = v45;
    uint64_t v77 = &protocol witness table for ContentMarginModifier;
    uint64_t v46 = v67;
    uint64_t v47 = swift_getWitnessTable();
    View.scrollIndicators(_:axes:)(&v78, 3, v46);
    (*(void (**)(char *, uint64_t))(v56 + 8))(v19, v46);
    uint64_t v74 = v47;
    uint64_t v75 = &protocol witness table for TransformScrollIndicators;
    swift_getWitnessTable();
    static ViewBuilder.buildExpression<A>(_:)(v23);
    long long v48 = *(void (**)(char *, uint64_t))(v59 + 8);
    v48(v23, v21);
    static ViewBuilder.buildExpression<A>(_:)(v26);
    uint64_t v72 = swift_getWitnessTable();
    uint64_t v73 = &protocol witness table for ContentMarginModifier;
    swift_getWitnessTable();
    static ViewBuilder.buildEither<A, B>(first:)((uint64_t)v23, v21);
    v48(v23, v21);
    v48(v26, v21);
  }
  uint64_t v85 = swift_getWitnessTable();
  long long v86 = &protocol witness table for ContentMarginModifier;
  uint64_t v83 = swift_getWitnessTable();
  uint64_t v84 = &protocol witness table for TransformScrollIndicators;
  uint64_t v49 = swift_getWitnessTable();
  uint64_t v81 = swift_getWitnessTable();
  uint64_t v82 = &protocol witness table for ContentMarginModifier;
  uint64_t v50 = swift_getWitnessTable();
  uint64_t v79 = v49;
  uint64_t v80 = v50;
  uint64_t v51 = v66;
  swift_getWitnessTable();
  unint64_t v52 = v70;
  static ViewBuilder.buildExpression<A>(_:)(v70);
  return (*(uint64_t (**)(char *, uint64_t))(v65 + 8))(v52, v51);
}

uint64_t ScrollableHStackBase.scrollContent.getter(uint64_t a1)
{
  uint64_t v2 = a1;
  uint64_t v3 = *(void *)(v1 + 32);
  if (*(unsigned char *)(v1 + 48)) {
    a1 = defaultSpacingValue.getter();
  }
  MEMORY[0x1F4188790](a1);
  long long v4 = *(_OWORD *)(v2 + 32);
  long long v8 = *(_OWORD *)(v2 + 16);
  long long v9 = v4;
  uint64_t v10 = v1;
  return LazyFixedSizeHStack.init(width:alignment:spacing:content:)(v3, v5, 0, (uint64_t)partial apply for closure #1 in ScrollableHStackBase.scrollContent.getter, (uint64_t)&v7, v8, v4);
}

double ScrollableHStackBase.actualPadding.getter()
{
  if ((*(unsigned char *)(v0 + 24) & 1) == 0) {
    return *(double *)(v0 + 16);
  }
  EnvironmentValues.init()();
  EnvironmentValues.defaultPadding.getter();
  double v2 = v1;
  swift_release();
  swift_release();
  return v2;
}

uint64_t closure #1 in ScrollableHStackBase.body.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = type metadata accessor for LazyFixedSizeHStack();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9);
  uint64_t v12 = (char *)v19 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v13);
  int v15 = (char *)v19 - v14;
  v19[0] = a2;
  v19[1] = a3;
  _OWORD v19[2] = a4;
  void v19[3] = a5;
  uint64_t v16 = type metadata accessor for ScrollableHStackBase();
  ScrollableHStackBase.scrollContent.getter(v16);
  static ViewBuilder.buildExpression<A>(_:)(v12);
  uint64_t v17 = *(void (**)(char *, uint64_t))(v10 + 8);
  v17(v12, v9);
  static ViewBuilder.buildExpression<A>(_:)(v15);
  return ((uint64_t (*)(char *, uint64_t))v17)(v15, v9);
}

uint64_t closure #1 in ScrollableHStackBase.scrollContent.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v6 = (char *)v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13[0] = v7;
  v13[1] = v8;
  v13[2] = v9;
  void v13[3] = v10;
  uint64_t v11 = type metadata accessor for ScrollableHStackBase();
  static ViewBuilder.buildExpression<A>(_:)(a1 + *(int *)(v11 + 68));
  static ViewBuilder.buildExpression<A>(_:)(v6);
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, a2);
}

uint64_t partial apply for closure #2 in ScrollableHStackBase.body.getter()
{
  return closure #1 in ScrollableHStackBase.body.getter(v0[6], v0[2], v0[3], v0[4], v0[5]);
}

uint64_t partial apply for closure #1 in ScrollableHStackBase.scrollContent.getter()
{
  return closure #1 in ScrollableHStackBase.scrollContent.getter(*(void *)(v0 + 48), *(void *)(v0 + 16));
}

uint64_t sub_187C015C8()
{
  return swift_getWitnessTable();
}

uint64_t ShapeStyle.opacity(_:)(uint64_t a1)
{
  double v3 = MEMORY[0x1F4188790](a1);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v5 + 16))((char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v1, a1, v3);
  return _OpacityShapeStyle.init(style:opacity:)();
}

uint64_t View.repeatingOpacity(from:to:animation:)()
{
  return swift_release();
}

void HoverEffectContent.opacity(_:)()
{
}

uint64_t partial apply for closure #1 in View.repeatingOpacity(from:to:animation:)()
{
  return View.opacity(_:)();
}

uint64_t ShapeStyle.opacities(_:)(uint64_t a1, uint64_t a2)
{
  double v4 = MEMORY[0x1F4188790](a1);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v6 + 16))((char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), v2, a2, v4);
  swift_bridgeObjectRetain();
  return _OpacitiesShapeStyle.init(style:opacities:)();
}

uint64_t sub_187C01A7C()
{
  return swift_getWitnessTable();
}

uint64_t sub_187C01B20()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_187C01B78(void *a1)
{
  return get_witness_table_7SwiftUI10ShapeStyleRzlAA08_OpacitycD0VyxGAaBHPyHCTm(a1, MEMORY[0x1E4F403C0]);
}

uint64_t sub_187C01BA4(void *a1)
{
  return get_witness_table_7SwiftUI10ShapeStyleRzlAA08_OpacitycD0VyxGAaBHPyHCTm(a1, MEMORY[0x1E4F40730]);
}

uint64_t get_witness_table_7SwiftUI10ShapeStyleRzlAA08_OpacitycD0VyxGAaBHPyHCTm(void *a1, void (*a2)(uint64_t, void, void))
{
  a2(255, *a1, a1[1]);

  return swift_getWitnessTable();
}

BOOL static ToolbarLegibility.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

void static ToolbarLegibility.standard.getter(unsigned char *a1@<X8>)
{
  *a1 = 1;
}

void static ToolbarLegibility.fullscreen.getter(unsigned char *a1@<X8>)
{
  *a1 = 2;
}

void ToolbarLegibility.hash(into:)()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int ToolbarLegibility.hashValue.getter()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

unint64_t lazy protocol witness table accessor for type ToolbarLegibility and conformance ToolbarLegibility()
{
  unint64_t result = lazy protocol witness table cache variable for type ToolbarLegibility and conformance ToolbarLegibility;
  if (!lazy protocol witness table cache variable for type ToolbarLegibility and conformance ToolbarLegibility)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ToolbarLegibility and conformance ToolbarLegibility);
  }
  return result;
}

uint64_t initializeWithCopy for ToolbarAppearanceConfiguration(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v3 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v3;
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(_WORD *)(a1 + 56) = *(_WORD *)(a2 + 56);
  *(unsigned char *)(a1 + 58) = *(unsigned char *)(a2 + 58);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for ToolbarAppearanceConfiguration(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_retain();
  swift_release();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_retain();
  swift_release();
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(void *)(a1 + 32) = v4;
  uint64_t v5 = *(void *)(a2 + 48);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  *(void *)(a1 + 48) = v5;
  *(unsigned char *)(a1 + 57) = *(unsigned char *)(a2 + 57);
  *(unsigned char *)(a1 + 58) = *(unsigned char *)(a2 + 58);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_retain();
  swift_release();
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  return a1;
}

uint64_t getEnumTagSinglePayload for ToolbarAppearanceConfiguration(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 73)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ToolbarAppearanceConfiguration(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 72) = 0;
    *(void *)unint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 73) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 73) = 0;
    }
    if (a2) {
      *(void *)(result + 8) = a2;
    }
  }
  return result;
}

uint64_t assignWithTake for ToolbarAppearanceModifier(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  swift_release();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_release();
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  return a1;
}

_UNKNOWN **base witness table accessor for ViewModifier in ToolbarAppearanceModifier()
{
  return &protocol witness table for ToolbarAppearanceModifier;
}

unint64_t lazy protocol witness table accessor for type ToolbarLegibility.Role and conformance ToolbarLegibility.Role()
{
  unint64_t result = lazy protocol witness table cache variable for type ToolbarLegibility.Role and conformance ToolbarLegibility.Role;
  if (!lazy protocol witness table cache variable for type ToolbarLegibility.Role and conformance ToolbarLegibility.Role)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ToolbarLegibility.Role and conformance ToolbarLegibility.Role);
  }
  return result;
}

uint64_t ToolbarAppearanceModifier.PreferenceValue.modifier.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t Value = AGGraphGetValue();
  uint64_t v4 = *(void *)(Value + 8);
  uint64_t v3 = *(void *)(Value + 16);
  char v5 = *(unsigned char *)(Value + 24);
  uint64_t v6 = *(void *)(Value + 32);
  char v7 = *(unsigned char *)(Value + 40);
  uint64_t v8 = *(void *)(Value + 48);
  char v9 = *(unsigned char *)(Value + 56);
  __int16 v10 = *(_WORD *)(Value + 57);
  char v11 = *(unsigned char *)(Value + 59);
  uint64_t v12 = *(void *)(Value + 64);
  char v13 = *(unsigned char *)(Value + 72);
  *(unsigned char *)a1 = *(unsigned char *)Value;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v3;
  *(unsigned char *)(a1 + 24) = v5;
  *(void *)(a1 + 32) = v6;
  *(unsigned char *)(a1 + 40) = v7;
  *(void *)(a1 + 48) = v8;
  *(unsigned char *)(a1 + 56) = v9;
  *(_WORD *)(a1 + 57) = v10;
  *(unsigned char *)(a1 + 59) = v11;
  *(void *)(a1 + 64) = v12;
  *(unsigned char *)(a1 + 72) = v13;
  swift_retain();
  swift_bridgeObjectRetain();

  return swift_retain();
}

uint64_t (*ToolbarAppearanceModifier.PreferenceValue.value.getter(uint64_t a1, uint64_t a2, uint64_t a3))(void *a1)
{
  if ((*(uint64_t (**)(uint64_t, uint64_t))(a3 + 24))(a2, a3)) {
    goto LABEL_4;
  }
  uint64_t v6 = ToolbarAppearanceModifier.PreferenceValue.resolvedBars.getter();
  unint64_t result = (uint64_t (*)(void *))(*(void *(**)(uint64_t *__return_ptr, uint64_t, uint64_t))(a3 + 16))(v23, a2, a3);
  if (v24 != 7)
  {
    char v8 = specialized Sequence<>.contains(_:)((uint64_t)v23, (uint64_t)v6);
    swift_bridgeObjectRelease();
    outlined destroy of ToolbarPlacement.Role((uint64_t)v23);
    char v9 = destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
    if ((v8 & 1) == 0) {
      return (uint64_t (*)(void *))v9;
    }
LABEL_4:
    AGGraphClearUpdate();
    closure #2 in ToolbarAppearanceModifier.PreferenceValue.value.getter(v23);
    AGGraphSetUpdate();
    uint64_t v22 = v23[0];
    ToolbarAppearanceModifier.PreferenceValue.modifier.getter((uint64_t)v23);
    char v21 = v23[0];
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    ToolbarAppearanceModifier.PreferenceValue.modifier.getter((uint64_t)v23);
    uint64_t v20 = v23[2];
    swift_bridgeObjectRelease();
    swift_release();
    ToolbarAppearanceModifier.PreferenceValue.modifier.getter((uint64_t)v23);
    char v19 = v24;
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    ToolbarAppearanceModifier.PreferenceValue.modifier.getter((uint64_t)v23);
    uint64_t v18 = v25;
    char v17 = v26;
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    ToolbarAppearanceModifier.PreferenceValue.modifier.getter((uint64_t)v23);
    uint64_t v16 = v27;
    char v10 = v28;
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    ToolbarAppearanceModifier.PreferenceValue.modifier.getter((uint64_t)v23);
    char v11 = v29;
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    ToolbarAppearanceModifier.PreferenceValue.modifier.getter((uint64_t)v23);
    char v12 = v30;
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    ToolbarAppearanceModifier.PreferenceValue.modifier.getter((uint64_t)v23);
    uint64_t v13 = v23[1];
    swift_bridgeObjectRelease();
    swift_release();
    ToolbarAppearanceModifier.PreferenceValue.modifier.getter((uint64_t)v23);
    char v14 = v31;
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    uint64_t v15 = swift_allocObject();
    *(void *)(v15 + 16) = a2;
    *(void *)(v15 + 24) = a3;
    *(void *)(v15 + 32) = a1;
    *(unsigned char *)(v15 + 40) = v21;
    *(void *)(v15 + 48) = v20;
    *(unsigned char *)(v15 + 56) = v19;
    *(void *)(v15 + 64) = v18;
    *(unsigned char *)(v15 + 72) = v17;
    *(void *)(v15 + 80) = v16;
    *(unsigned char *)(v15 + 88) = v10;
    *(unsigned char *)(v15 + 89) = v11;
    *(unsigned char *)(v15 + 90) = v12;
    *(void *)(v15 + 96) = v13;
    *(void *)(v15 + 104) = v22;
    *(unsigned char *)(v15 + 112) = v14;
    return partial apply for closure #3 in ToolbarAppearanceModifier.PreferenceValue.value.getter;
  }
  __break(1u);
  return result;
}

char *ToolbarAppearanceModifier.PreferenceValue.resolvedBars.getter()
{
  ToolbarAppearanceModifier.PreferenceValue.modifier.getter((uint64_t)v21);
  uint64_t v0 = v22;
  swift_release();
  swift_release();
  unint64_t v1 = *((void *)v0 + 2);
  if (v1) {
    goto LABEL_10;
  }
  uint64_t v14 = 0;
  uint64_t v15 = 0;
  uint64_t v16 = 0;
  long long v17 = xmmword_188382690;
  ToolbarAppearanceModifier.PreferenceValue.modifier.getter((uint64_t)v21);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  outlined init with copy of ToolbarPlacement.Storage((uint64_t)&v14, (uint64_t)v12);
  if (v13 == 7)
  {
    uint64_t v20 = 0;
    long long v18 = 0u;
    long long v19 = 0u;
  }
  else
  {
    outlined destroy of ToolbarPlacement.Storage((uint64_t)v12);
    outlined init with copy of ToolbarPlacement((uint64_t)&v14, (uint64_t)&v18);
  }
  outlined destroy of ToolbarPlacement((uint64_t)&v14);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v0 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v0 + 2) + 1, 1, v0);
  }
  unint64_t v3 = *((void *)v0 + 2);
  unint64_t v2 = *((void *)v0 + 3);
  if (v3 >= v2 >> 1) {
    uint64_t v0 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v2 > 1), v3 + 1, 1, v0);
  }
  *((void *)v0 + 2) = v3 + 1;
  uint64_t v4 = &v0[40 * v3];
  long long v5 = v18;
  long long v6 = v19;
  *((void *)v4 + 8) = v20;
  *((_OWORD *)v4 + 2) = v5;
  *((_OWORD *)v4 + 3) = v6;
  unint64_t v1 = v3 + 1;
  if (v3 == -1)
  {
    swift_bridgeObjectRelease();
    return (char *)MEMORY[0x1E4FBC860];
  }
  else
  {
LABEL_10:
    uint64_t v7 = (uint64_t)(v0 + 32);
    swift_bridgeObjectRetain();
    char v8 = (char *)MEMORY[0x1E4FBC860];
    do
    {
      outlined init with copy of ToolbarPlacement(v7, (uint64_t)v21);
      outlined init with copy of ToolbarPlacement.Storage((uint64_t)v21, (uint64_t)v12);
      if (v13 == 7)
      {
        outlined destroy of ToolbarPlacement.Storage((uint64_t)v12);
        uint64_t v15 = 0;
        uint64_t v16 = 0;
        uint64_t v14 = 0;
        long long v17 = xmmword_188382690;
      }
      else
      {
        outlined init with take of ToolbarPlacement.Role((uint64_t)v12, (uint64_t)&v18);
        outlined init with take of ToolbarPlacement.Role((uint64_t)&v18, (uint64_t)&v14);
      }
      outlined destroy of ToolbarPlacement((uint64_t)v21);
      if ((void)v17 == 7)
      {
        outlined destroy of ToolbarPlacement.Role?((uint64_t)&v14);
      }
      else
      {
        outlined init with take of ToolbarPlacement.Role((uint64_t)&v14, (uint64_t)&v18);
        outlined init with take of ToolbarPlacement.Role((uint64_t)&v18, (uint64_t)&v14);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          char v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v8 + 2) + 1, 1, v8);
        }
        unint64_t v10 = *((void *)v8 + 2);
        unint64_t v9 = *((void *)v8 + 3);
        if (v10 >= v9 >> 1) {
          char v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v9 > 1), v10 + 1, 1, v8);
        }
        *((void *)v8 + 2) = v10 + 1;
        outlined init with take of ToolbarPlacement.Role((uint64_t)&v14, (uint64_t)&v8[40 * v10 + 32]);
      }
      v7 += 40;
      --v1;
    }
    while (v1);
    swift_bridgeObjectRelease_n();
  }
  return v8;
}

uint64_t closure #2 in ToolbarAppearanceModifier.PreferenceValue.value.getter@<X0>(uint64_t *a1@<X8>)
{
  AGGraphGetValue();
  swift_retain();
  uint64_t v2 = Transaction.animation.getter();
  uint64_t result = swift_release();
  *a1 = v2;
  return result;
}

uint64_t closure #3 in ToolbarAppearanceModifier.PreferenceValue.value.getter(void *a1, uint64_t a2, char a3, uint64_t a4, char a5, uint64_t a6, char a7, uint64_t a8, char a9, char a10, char a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16)
{
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(a16 + 16))(v89, a15, a16);
  outlined init with copy of ToolbarPlacement.Role?((uint64_t)v89, (uint64_t)v87);
  if (v88 == 7)
  {
    outlined destroy of ToolbarPlacement.Role?((uint64_t)v89);
    uint64_t v18 = (uint64_t)ToolbarAppearanceModifier.PreferenceValue.resolvedBars.getter();
    uint64_t v19 = *(void *)(v18 + 16);
    if (v19) {
      goto LABEL_3;
    }
    return swift_bridgeObjectRelease();
  }
  outlined init with take of ToolbarPlacement.Role((uint64_t)v87, (uint64_t)v86);
  type metadata accessor for _GraphValue<ToolbarAppearanceModifier>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<ToolbarPlacement.Role>, (uint64_t)&type metadata for ToolbarPlacement.Role, MEMORY[0x1E4FBBE00]);
  uint64_t v18 = swift_allocObject();
  *(_OWORD *)(v18 + 16) = xmmword_18834BB80;
  outlined init with take of ToolbarPlacement.Role((uint64_t)v86, v18 + 32);
  outlined destroy of ToolbarPlacement.Role?((uint64_t)v89);
  uint64_t v19 = *(void *)(v18 + 16);
  if (!v19) {
    return swift_bridgeObjectRelease();
  }
LABEL_3:
  uint64_t v20 = v18 + 32;
  uint64_t v84 = a1;
  char v67 = a7;
  while (1)
  {
    uint64_t v72 = v20;
    uint64_t v73 = v19;
    outlined init with copy of ToolbarPlacement.Role(v20, (uint64_t)v89);
    uint64_t v22 = *a1;
    if (*(void *)(*a1 + 16) && (uint64_t v23 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v89), (v24 & 1) != 0))
    {
      uint64_t v25 = *(void *)(v22 + 56) + 80 * v23;
      char v26 = *(unsigned char *)v25;
      uint64_t v27 = *(void *)(v25 + 8);
      uint64_t v28 = *(void *)(v25 + 16);
      uint64_t v78 = *(void *)(v25 + 32);
      char v80 = *(unsigned char *)(v25 + 24);
      char v82 = *(unsigned char *)(v25 + 40);
      uint64_t v29 = *(void *)(v25 + 48);
      char v83 = *(unsigned char *)(v25 + 56);
      char v30 = *(unsigned char *)(v25 + 57);
      char v31 = *(unsigned char *)(v25 + 58);
      char v32 = *(unsigned char *)(v25 + 72);
      uint64_t v33 = *(void *)(v25 + 64);
      swift_retain();
      uint64_t v34 = v27;
      uint64_t v35 = v78;
      swift_retain();
      swift_retain();
      char v36 = v80;
    }
    else
    {
      uint64_t v29 = 0;
      char v31 = 0;
      uint64_t v35 = 0;
      char v36 = 0;
      char v32 = 0;
      char v26 = 0;
      uint64_t v33 = 0;
      uint64_t v34 = 0;
      uint64_t v28 = 0;
      char v30 = 2;
      char v82 = 1;
      char v83 = 1;
    }
    if (a3 == 3) {
      char v37 = v26;
    }
    else {
      char v37 = a3;
    }
    char v81 = v37;
    if (a4)
    {
      char v38 = v36;
      swift_retain();
      swift_release();
      char v36 = v38;
      uint64_t v28 = a4;
    }
    if (a5 == 4) {
      char v39 = v36;
    }
    else {
      char v39 = a5;
    }
    char v75 = v39;
    uint64_t v40 = a6;
    if (a7) {
      uint64_t v40 = v35;
    }
    uint64_t v74 = v40;
    uint64_t v41 = a8;
    if (a9) {
      uint64_t v41 = v29;
    }
    uint64_t v76 = v41;
    if (a10 == 2) {
      char v42 = v30;
    }
    else {
      char v42 = a10;
    }
    if (a11 == 3) {
      char v43 = v31;
    }
    else {
      char v43 = a11;
    }
    char v77 = v43;
    char v79 = v42;
    if (a12)
    {
      swift_retain();
      swift_release();
      uint64_t v34 = a12;
    }
    uint64_t v44 = v33;
    if (a13)
    {
      swift_retain();
      swift_release();
      uint64_t v44 = a13;
    }
    char v45 = a14 == 3 ? v32 : a14;
    outlined init with copy of ToolbarPlacement.Role((uint64_t)v89, (uint64_t)v87);
    uint64_t v46 = v28;
    swift_retain();
    uint64_t v47 = v44;
    swift_retain();
    uint64_t v48 = v34;
    swift_retain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v86[0] = *v84;
    uint64_t v50 = v86[0];
    *uint64_t v84 = 0x8000000000000000;
    unint64_t v52 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v87);
    uint64_t v53 = *(void *)(v50 + 16);
    BOOL v54 = (v51 & 1) == 0;
    uint64_t v55 = v53 + v54;
    if (__OFADD__(v53, v54)) {
      break;
    }
    char v56 = v51;
    if (*(void *)(v50 + 24) >= v55)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
        specialized _NativeDictionary.copy()();
      }
    }
    else
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v55, isUniquelyReferenced_nonNull_native);
      uint64_t v57 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v87);
      if ((v56 & 1) != (v58 & 1)) {
        goto LABEL_49;
      }
      unint64_t v52 = v57;
    }
    char v59 = a7 & v82;
    char v60 = a9 & v83;
    uint64_t v61 = (void *)v86[0];
    if (v56)
    {
      uint64_t v21 = *(void *)(v86[0] + 56) + 80 * v52;
      swift_release();
      swift_release();
      swift_release();
      *(unsigned char *)uint64_t v21 = v81;
      *(void *)(v21 + 8) = v48;
      *(void *)(v21 + 16) = v46;
      *(unsigned char *)(v21 + 24) = v75;
      *(void *)(v21 + 32) = v74;
      *(unsigned char *)(v21 + 40) = v59;
      *(void *)(v21 + 48) = v76;
      *(unsigned char *)(v21 + 56) = v60;
      *(unsigned char *)(v21 + 57) = v79;
      *(unsigned char *)(v21 + 58) = v77;
      *(void *)(v21 + 64) = v47;
      *(unsigned char *)(v21 + 72) = v45;
    }
    else
    {
      *(void *)(v86[0] + 8 * (v52 >> 6) + 64) |= 1 << v52;
      outlined init with copy of ToolbarPlacement.Role((uint64_t)v87, v61[6] + 40 * v52);
      uint64_t v62 = v61[7] + 80 * v52;
      *(unsigned char *)uint64_t v62 = v81;
      *(void *)(v62 + 8) = v48;
      *(void *)(v62 + 16) = v46;
      *(unsigned char *)(v62 + 24) = v75;
      *(void *)(v62 + 32) = v74;
      *(unsigned char *)(v62 + 40) = v59;
      *(void *)(v62 + 48) = v76;
      *(unsigned char *)(v62 + 56) = v60;
      *(unsigned char *)(v62 + 57) = v79;
      *(unsigned char *)(v62 + 58) = v77;
      *(void *)(v62 + 64) = v47;
      *(unsigned char *)(v62 + 72) = v45;
      uint64_t v63 = v61[2];
      BOOL v64 = __OFADD__(v63, 1);
      uint64_t v65 = v63 + 1;
      if (v64) {
        goto LABEL_48;
      }
      v61[2] = v65;
    }
    a1 = v84;
    *uint64_t v84 = v61;
    swift_bridgeObjectRelease();
    outlined destroy of ToolbarPlacement.Role((uint64_t)v87);
    outlined destroy of ToolbarPlacement.Role((uint64_t)v89);
    swift_release();
    swift_release();
    swift_release();
    uint64_t v20 = v72 + 40;
    uint64_t v19 = v73 - 1;
    a7 = v67;
    if (v73 == 1) {
      return swift_bridgeObjectRelease();
    }
  }
  __break(1u);
LABEL_48:
  __break(1u);
LABEL_49:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t protocol witness for Rule.value.getter in conformance ToolbarAppearanceModifier.PreferenceValue<A>@<X0>(uint64_t a1@<X0>, uint64_t (**a2)(uint64_t a1)@<X8>)
{
  uint64_t v4 = ToolbarAppearanceModifier.PreferenceValue.value.getter(*v2, *(void *)(a1 + 16), *(void *)(a1 + 24));
  uint64_t v6 = v5;
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = v4;
  *(void *)(result + 24) = v6;
  *a2 = partial apply for thunk for @escaping @callee_guaranteed (@inout AccessibilityLargeContentViewTree) -> ();
  a2[1] = (uint64_t (*)(uint64_t))result;
  return result;
}

void protocol witness for ViewModifier.body(content:) in conformance ToolbarAppearanceModifier()
{
}

uint64_t protocol witness for static PreferenceKey.reduce(value:nextValue:) in conformance NavigationBarAppearanceKey(uint64_t *a1, void (*a2)(uint64_t *__return_ptr))
{
  return specialized static ToolbarAppearanceKey.reduce(value:nextValue:)(a1, a2);
}

double protocol witness for static ToolbarAppearanceKey.toolbarPlacement.getter in conformance TabBarAppearanceKey@<D0>(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)&double result = 5;
  *(_OWORD *)(a1 + 24) = xmmword_18835ED10;
  return result;
}

double protocol witness for static ToolbarAppearanceKey.toolbarPlacement.getter in conformance BottomBarAppearanceKey@<D0>(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)&double result = 3;
  *(_OWORD *)(a1 + 24) = xmmword_188382680;
  return result;
}

double protocol witness for static ToolbarAppearanceKey.toolbarPlacement.getter in conformance WindowToolbarAppearanceKey@<D0>(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)&double result = 2;
  *(_OWORD *)(a1 + 24) = xmmword_18838AA10;
  return result;
}

double protocol witness for static ToolbarAppearanceKey.toolbarPlacement.getter in conformance AccessoryBarAppearanceKey@<D0>(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)&double result = 7;
  *(_OWORD *)(a1 + 24) = xmmword_188382690;
  return result;
}

double protocol witness for static ToolbarAppearanceKey.toolbarPlacement.getter in conformance BottomOrnamentAppearanceKey@<D0>(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)&double result = 6;
  *(_OWORD *)(a1 + 24) = xmmword_188382670;
  return result;
}

uint64_t sub_187C03A78()
{
  swift_release();
  swift_release();
  swift_release();

  return swift_deallocObject();
}

uint64_t partial apply for closure #3 in ToolbarAppearanceModifier.PreferenceValue.value.getter(void *a1)
{
  return closure #3 in ToolbarAppearanceModifier.PreferenceValue.value.getter(a1, *(void *)(v1 + 32), *(unsigned char *)(v1 + 40), *(void *)(v1 + 48), *(unsigned char *)(v1 + 56), *(void *)(v1 + 64), *(unsigned char *)(v1 + 72), *(void *)(v1 + 80), *(unsigned char *)(v1 + 88), *(_WORD *)(v1 + 89), HIBYTE(*(_WORD *)(v1 + 89)), *(void *)(v1 + 96), *(void *)(v1 + 104), *(unsigned char *)(v1 + 112), *(void *)(v1 + 16), *(void *)(v1 + 24));
}

ValueMetadata *type metadata accessor for EnvironmentValues.ManagedBarAppearancesKey()
{
  return &type metadata for EnvironmentValues.ManagedBarAppearancesKey;
}

ValueMetadata *type metadata accessor for EnvironmentValues.HostingControllerManagedBarsKey()
{
  return &type metadata for EnvironmentValues.HostingControllerManagedBarsKey;
}

ValueMetadata *type metadata accessor for NavigationBarAppearanceKey()
{
  return &type metadata for NavigationBarAppearanceKey;
}

ValueMetadata *type metadata accessor for TabBarAppearanceKey()
{
  return &type metadata for TabBarAppearanceKey;
}

ValueMetadata *type metadata accessor for BottomBarAppearanceKey()
{
  return &type metadata for BottomBarAppearanceKey;
}

ValueMetadata *type metadata accessor for WindowToolbarAppearanceKey()
{
  return &type metadata for WindowToolbarAppearanceKey;
}

ValueMetadata *type metadata accessor for WindowToolbarItemsAppearanceKey()
{
  return &type metadata for WindowToolbarItemsAppearanceKey;
}

ValueMetadata *type metadata accessor for AccessoryBarAppearanceKey()
{
  return &type metadata for AccessoryBarAppearanceKey;
}

ValueMetadata *type metadata accessor for BottomOrnamentAppearanceKey()
{
  return &type metadata for BottomOrnamentAppearanceKey;
}

unsigned char *storeEnumTagSinglePayload for ToolbarAppearanceModificationContext(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *double result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x187C03D50);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *double result = a2 + 1;
        break;
    }
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ToolbarAppearanceModificationContext and conformance ToolbarAppearanceModificationContext()
{
  unint64_t result = lazy protocol witness table cache variable for type ToolbarAppearanceModificationContext and conformance ToolbarAppearanceModificationContext;
  if (!lazy protocol witness table cache variable for type ToolbarAppearanceModificationContext and conformance ToolbarAppearanceModificationContext)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ToolbarAppearanceModificationContext and conformance ToolbarAppearanceModificationContext);
  }
  return result;
}

uint64_t base witness table accessor for _AttributeBody in ToolbarAppearanceModifier.PreferenceValue<A>()
{
  return swift_getWitnessTable();
}

uint64_t sub_187C03DEC()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t AnimatedValueKeyframe.value.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 16) - 8) + 16))(a2, v2);
}

uint64_t AnimatedValueKeyframe.value.setter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a2 + 16) - 8) + 40))(v2, a1);
}

uint64_t (*AnimatedValueKeyframe.value.modify())(void, void, void, void)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t AnimatedValueKeyframe.interpolation.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1 + 28);
  uint64_t v5 = type metadata accessor for AnimatedValueKeyframe.InterpolationParameters();
  unsigned int v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);

  return v6(a2, v4, v5);
}

uint64_t type metadata accessor for AnimatedValueKeyframe.InterpolationParameters()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t AnimatedValueKeyframe.interpolation.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + *(int *)(a2 + 28);
  uint64_t v5 = type metadata accessor for AnimatedValueKeyframe.InterpolationParameters();
  unsigned int v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40);

  return v6(v4, a1, v5);
}

uint64_t (*AnimatedValueKeyframe.interpolation.modify())(void, void, void, void)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

__n128 AnimatedValueKeyframe.timingCurve.getter@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2 + *(int *)(a1 + 32);
  char v4 = *(unsigned char *)(v3 + 32);
  __n128 result = *(__n128 *)v3;
  long long v6 = *(_OWORD *)(v3 + 16);
  *(_OWORD *)a2 = *(_OWORD *)v3;
  *(_OWORD *)(a2 + 16) = v6;
  *(unsigned char *)(a2 + 32) = v4;
  return result;
}

__n128 AnimatedValueKeyframe.timingCurve.setter(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a1 + 32);
  uint64_t v4 = v2 + *(int *)(a2 + 32);
  __n128 result = *(__n128 *)a1;
  long long v6 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)uint64_t v4 = *(_OWORD *)a1;
  *(_OWORD *)(v4 + 16) = v6;
  *(unsigned char *)(v4 + 32) = v3;
  return result;
}

uint64_t (*AnimatedValueKeyframe.timingCurve.modify())(void, void, void, void)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t static AnimatedValueKeyframe.InterpolationParameters.automatic.getter@<X0>(uint64_t a1@<X8>)
{
  return static AnimatedValueKeyframe.InterpolationParameters.automatic.getter(a1);
}

{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v9;

  uint64_t v2 = type metadata accessor for AnimatedValueKeyframe.InterpolationParameters.Mode();
  MEMORY[0x1F4188790](v2);
  uint64_t v4 = (char *)&v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v5);
  uint64_t v7 = (char *)&v9 - v6;
  swift_storeEnumTagMultiPayload();
  swift_storeEnumTagMultiPayload();
  return AnimatedValueKeyframe.InterpolationParameters.init(incoming:outgoing:)((uint64_t)v7, (uint64_t)v4, a1);
}

uint64_t type metadata accessor for AnimatedValueKeyframe.InterpolationParameters.Mode()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t AnimatedValueKeyframe.init(value:interpolation:incomingTimingCurve:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, long long *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  long long v16 = *a3;
  uint64_t v7 = *((void *)a3 + 2);
  uint64_t v8 = *((void *)a3 + 3);
  char v9 = *((unsigned char *)a3 + 32);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a4 - 8) + 32))(a5, a1, a4);
  uint64_t v10 = type metadata accessor for AnimatedValueKeyframe();
  uint64_t v11 = a5 + *(int *)(v10 + 32);
  *(_OWORD *)uint64_t v11 = v16;
  *(void *)(v11 + 16) = v7;
  *(void *)(v11 + 24) = v8;
  *(unsigned char *)(v11 + 32) = v9;
  uint64_t v12 = a5 + *(int *)(v10 + 28);
  uint64_t v13 = type metadata accessor for AnimatedValueKeyframe.InterpolationParameters();
  uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 32);

  return v14(v12, a2, v13);
}

uint64_t type metadata accessor for AnimatedValueKeyframe()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t static AnimatedValueKeyframe.InterpolationParameters.kochanekBartels(tension:continuity:bias:)@<X0>(uint64_t a1@<X8>, double a2@<D0>, double a3@<D1>, double a4@<D2>)
{
  uint64_t v8 = type metadata accessor for AnimatedValueKeyframe.InterpolationParameters.Mode();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  uint64_t v11 = (char *)&v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v12);
  uint64_t v14 = (char *)&v19 - v13;
  MEMORY[0x1F4188790](v15);
  long long v17 = (double *)((char *)&v19 - v16);
  *long long v17 = a2;
  v17[1] = a3;
  _OWORD v17[2] = a4;
  swift_storeEnumTagMultiPayload();
  (*(void (**)(char *, double *, uint64_t))(v9 + 16))(v14, v17, v8);
  (*(void (**)(char *, double *, uint64_t))(v9 + 32))(v11, v17, v8);
  return AnimatedValueKeyframe.InterpolationParameters.init(incoming:outgoing:)((uint64_t)v14, (uint64_t)v11, a1);
}

uint64_t static AnimatedValueKeyframe.InterpolationParameters.linear.getter@<X0>(uint64_t a1@<X8>)
{
  return static AnimatedValueKeyframe.InterpolationParameters.automatic.getter(a1);
}

uint64_t static AnimatedValueKeyframe.InterpolationParameters.asymmetric(incomingControlPoint:outgoingControlPoint:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return static AnimatedValueKeyframe.InterpolationParameters.asymmetric(incomingControlPoint:outgoingControlPoint:)(a1, a2, a3, a4);
}

{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  double v12;
  uint64_t v13;
  char *v14;
  void (*v15)(char *, uint64_t, uint64_t, double);
  uint64_t v17;

  uint64_t v8 = type metadata accessor for AnimatedValueKeyframe.InterpolationParameters.Mode();
  MEMORY[0x1F4188790](v8);
  uint64_t v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = MEMORY[0x1F4188790](v11);
  uint64_t v14 = (char *)&v17 - v13;
  uint64_t v15 = *(void (**)(char *, uint64_t, uint64_t, double))(*(void *)(a3 - 8) + 16);
  v15((char *)&v17 - v13, a1, a3, v12);
  swift_storeEnumTagMultiPayload();
  ((void (*)(char *, uint64_t, uint64_t))v15)(v10, a2, a3);
  swift_storeEnumTagMultiPayload();
  return AnimatedValueKeyframe.InterpolationParameters.init(incoming:outgoing:)((uint64_t)v14, (uint64_t)v10, a4);
}

uint64_t static AnimatedValueKeyframe.InterpolationParameters.asymmetric(incomingTangent:outgoingTangent:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return static AnimatedValueKeyframe.InterpolationParameters.asymmetric(incomingControlPoint:outgoingControlPoint:)(a1, a2, a3, a4);
}

uint64_t static AnimatedValueKeyframe.InterpolationParameters.Mode<A>.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v44 = a1;
  uint64_t v45 = a2;
  uint64_t v4 = *(void *)(a3 - 8);
  uint64_t v40 = a4;
  uint64_t v41 = v4;
  MEMORY[0x1F4188790](a1);
  char v39 = (char *)&v38 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  char v38 = (char *)&v38 - v7;
  uint64_t v42 = v8;
  uint64_t v9 = type metadata accessor for AnimatedValueKeyframe.InterpolationParameters.Mode();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9);
  uint64_t v12 = (char *)&v38 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v13);
  uint64_t v15 = (char *)&v38 - v14;
  MEMORY[0x1F4188790](v16);
  uint64_t v18 = (double *)((char *)&v38 - v17);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v20 = *(void *)(TupleTypeMetadata2 - 8);
  double v21 = MEMORY[0x1F4188790](TupleTypeMetadata2);
  uint64_t v23 = (char *)&v38 - v22;
  uint64_t v25 = (double *)((char *)&v38 + *(int *)(v24 + 48) - v22);
  uint64_t v43 = v10;
  char v26 = *(void (**)(char *, uint64_t, uint64_t, double))(v10 + 16);
  v26((char *)&v38 - v22, v44, v9, v21);
  ((void (*)(double *, uint64_t, uint64_t))v26)(v25, v45, v9);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      ((void (*)(char *, char *, uint64_t))v26)(v15, v23, v9);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        uint64_t v31 = v41;
        uint64_t v30 = v42;
        char v32 = v38;
        (*(void (**)(char *, double *, uint64_t))(v41 + 32))(v38, v25, v42);
        char v29 = dispatch thunk of static Equatable.== infix(_:_:)();
        uint64_t v33 = *(void (**)(char *, uint64_t))(v31 + 8);
        v33(v32, v30);
        uint64_t v34 = v15;
        goto LABEL_10;
      }
      uint64_t v12 = v15;
      goto LABEL_17;
    case 2u:
      ((void (*)(char *, char *, uint64_t))v26)(v12, v23, v9);
      if (swift_getEnumCaseMultiPayload() == 2)
      {
        uint64_t v35 = v41;
        uint64_t v30 = v42;
        char v36 = v39;
        (*(void (**)(char *, double *, uint64_t))(v41 + 32))(v39, v25, v42);
        char v29 = dispatch thunk of static Equatable.== infix(_:_:)();
        uint64_t v33 = *(void (**)(char *, uint64_t))(v35 + 8);
        v33(v36, v30);
        uint64_t v34 = v12;
LABEL_10:
        v33(v34, v30);
LABEL_15:
        uint64_t v20 = v43;
        TupleTypeMetadata2 = v9;
      }
      else
      {
LABEL_17:
        (*(void (**)(char *, uint64_t))(v41 + 8))(v12, v42);
LABEL_18:
        char v29 = 0;
      }
      (*(void (**)(char *, uint64_t))(v20 + 8))(v23, TupleTypeMetadata2);
      return v29 & 1;
    case 3u:
      if (swift_getEnumCaseMultiPayload() != 3) {
        goto LABEL_18;
      }
      goto LABEL_14;
    case 4u:
      if (swift_getEnumCaseMultiPayload() != 4) {
        goto LABEL_18;
      }
LABEL_14:
      char v29 = 1;
      goto LABEL_15;
    default:
      ((void (*)(double *, char *, uint64_t))v26)(v18, v23, v9);
      double v28 = v18[1];
      double v27 = v18[2];
      if (swift_getEnumCaseMultiPayload()) {
        goto LABEL_18;
      }
      char v29 = *v18 == *v25 && v28 == v25[1] && v27 == v25[2];
      goto LABEL_15;
  }
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance <A> AnimatedValueKeyframe<A>.InterpolationParameters.Mode(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return static AnimatedValueKeyframe.InterpolationParameters.Mode<A>.== infix(_:_:)(a1, a2, *(void *)(a3 + 16), *(void *)(a4 - 8));
}

uint64_t static AnimatedValueKeyframe.InterpolationParameters<A>.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if ((static AnimatedValueKeyframe.InterpolationParameters.Mode<A>.== infix(_:_:)(a1, a2, a3, a4) & 1) == 0) {
    return 0;
  }
  uint64_t v8 = *(int *)(type metadata accessor for AnimatedValueKeyframe.InterpolationParameters() + 28);

  return static AnimatedValueKeyframe.InterpolationParameters.Mode<A>.== infix(_:_:)(a1 + v8, a2 + v8, a3, a4);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance <A> AnimatedValueKeyframe<A>.InterpolationParameters(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return static AnimatedValueKeyframe.InterpolationParameters<A>.== infix(_:_:)(a1, a2, *(void *)(a3 + 16), *(void *)(a4 - 8));
}

uint64_t static AnimatedValueKeyframe<A>.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if ((dispatch thunk of static Equatable.== infix(_:_:)() & 1) != 0
    && (uint64_t v8 = type metadata accessor for AnimatedValueKeyframe(),
        (static AnimatedValueKeyframe.InterpolationParameters<A>.== infix(_:_:)(a1 + *(int *)(v8 + 28), a2 + *(int *)(v8 + 28), a3, a4) & 1) != 0))
  {
    char v9 = static UnitCurve.== infix(_:_:)();
  }
  else
  {
    char v9 = 0;
  }
  return v9 & 1;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance <A> AnimatedValueKeyframe<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return static AnimatedValueKeyframe<A>.== infix(_:_:)(a1, a2, *(void *)(a3 + 16), *(void *)(a4 - 8));
}

uint64_t type metadata completion function for AnimatedValueKeyframe()
{
  uint64_t v0 = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t v0 = type metadata accessor for AnimatedValueKeyframe.InterpolationParameters();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return v0;
}

uint64_t *initializeBufferWithCopyOfBuffer for AnimatedValueKeyframe(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  unint64_t v7 = *(void *)(v6 + 64);
  int v8 = *(_DWORD *)(v6 + 80);
  uint64_t v9 = v8 & 0xF8 | 7;
  uint64_t v10 = ~v9;
  if (v7 <= 0x18) {
    uint64_t v11 = 24;
  }
  else {
    uint64_t v11 = *(void *)(v6 + 64);
  }
  uint64_t v12 = 1;
  if (v11 > 3)
  {
    uint64_t v13 = 1;
    goto LABEL_13;
  }
  unsigned int v14 = ((1 << (8 * v11)) + 1) >> (8 * v11);
  if (v14 > 0xFFFC)
  {
    uint64_t v12 = 4;
  }
  else
  {
    if (v14 < 0xFD)
    {
      uint64_t v12 = 1;
      uint64_t v13 = 1;
      goto LABEL_13;
    }
    uint64_t v12 = 2;
  }
  BOOL v15 = v14 > 0xFFFC;
  uint64_t v13 = 2;
  if (v15) {
    uint64_t v13 = 4;
  }
LABEL_13:
  BOOL v15 = (v8 & 0x1000F8) != 0
     || ((v11 + ((v7 + v9) & ~v9) + ((v11 + v12 + v9) & v10) + v13 + 7) & 0xFFFFFFFFFFFFFFF8) + 33 > 0x18;
  if (!v15)
  {
    uint64_t v17 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v6 + 16);
    v17(a1, a2, v5);
    uint64_t v18 = ((unint64_t)a2 + v7 + 7) & v10;
    if (v11 > 3) {
      goto LABEL_22;
    }
    unsigned int v19 = ((1 << (8 * v11)) + 1) >> (8 * v11);
    if (v19 > 0xFFFC)
    {
      unsigned int v20 = *(_DWORD *)(v18 + v11);
    }
    else
    {
      if (v19 <= 0xFC)
      {
LABEL_22:
        unsigned int v20 = *(unsigned __int8 *)(v18 + v11);
        goto LABEL_25;
      }
      unsigned int v20 = *(unsigned __int16 *)(v18 + v11);
    }
LABEL_25:
    uint64_t v21 = ((unint64_t)v4 + v7 + 7) & v10;
    unsigned int v22 = v20 - 3;
    if (v20 >= 3)
    {
      if (v11 <= 3) {
        uint64_t v23 = v11;
      }
      else {
        uint64_t v23 = 4;
      }
      switch(v23)
      {
        case 1:
          int v24 = *(unsigned __int8 *)v18;
          goto LABEL_34;
        case 2:
          int v24 = *(unsigned __int16 *)v18;
          goto LABEL_34;
        case 3:
          int v24 = *(unsigned __int16 *)v18 | (*(unsigned __int8 *)(v18 + 2) << 16);
          goto LABEL_34;
        case 4:
          int v24 = *(_DWORD *)v18;
LABEL_34:
          int v25 = (v24 | (v22 << (8 * v11))) + 3;
          unsigned int v20 = v24 + 3;
          if (v11 < 4) {
            unsigned int v20 = v25;
          }
          break;
        default:
          break;
      }
    }
    if (v20 != 2)
    {
      if (v20 != 1)
      {
        if (!v20)
        {
          long long v26 = *(_OWORD *)v18;
          *(void *)(v21 + 16) = *(void *)(v18 + 16);
          *(_OWORD *)uint64_t v21 = v26;
          if (v11 > 3) {
            goto LABEL_40;
          }
          unsigned int v27 = ((1 << (8 * v11)) + 1) >> (8 * v11);
          if (v27 > 0xFFFC)
          {
            *(_DWORD *)(v21 + v11) = 0;
          }
          else
          {
            if (v27 <= 0xFC)
            {
LABEL_40:
              *(unsigned char *)(v21 + v11) = 0;
              if (v11 > 3)
              {
LABEL_61:
                uint64_t v33 = 1;
                goto LABEL_72;
              }
              goto LABEL_58;
            }
            *(_WORD *)(v21 + v11) = 0;
          }
LABEL_70:
          BOOL v15 = v27 > 0xFFFC;
          uint64_t v33 = 2;
          if (v15) {
            uint64_t v33 = 4;
          }
          goto LABEL_72;
        }
        if (v11 > 3) {
          goto LABEL_56;
        }
        unsigned int v30 = ((1 << (8 * v11)) + 1) >> (8 * v11);
        uint64_t v31 = 2;
        if (v30 > 0xFFFC) {
          uint64_t v31 = 4;
        }
        if (v30 <= 0xFC) {
LABEL_56:
        }
          uint64_t v31 = 1;
        memcpy((void *)v21, (const void *)v18, v31 + v11);
        if (v11 > 3) {
          goto LABEL_61;
        }
LABEL_58:
        unsigned int v32 = ((1 << (8 * v11)) + 1) >> (8 * v11);
        uint64_t v33 = 2;
        if (v32 > 0xFFFC) {
          uint64_t v33 = 4;
        }
        if (v32 <= 0xFC) {
          goto LABEL_61;
        }
LABEL_72:
        uint64_t v34 = v33 + v11;
        uint64_t v35 = v21 | 7;
        uint64_t v36 = v35 + v34;
        uint64_t v37 = v18 | 7;
        char v38 = (void *)(((v18 | 7) + v34) & v10);
        if (v11 <= 3)
        {
          unsigned int v39 = ((1 << (8 * v11)) + 1) >> (8 * v11);
          if (v39 > 0xFFFC)
          {
            unsigned int v40 = *(_DWORD *)((char *)v38 + v11);
          }
          else
          {
            if (v39 <= 0xFC) {
              goto LABEL_75;
            }
            unsigned int v40 = *(unsigned __int16 *)((char *)v38 + v11);
          }
LABEL_78:
          uint64_t v41 = (void *)(v36 & v10);
          unsigned int v42 = v40 - 3;
          if (v40 >= 3)
          {
            if (v11 <= 3) {
              uint64_t v43 = v11;
            }
            else {
              uint64_t v43 = 4;
            }
            switch(v43)
            {
              case 1:
                int v44 = *(unsigned __int8 *)v38;
                goto LABEL_87;
              case 2:
                int v44 = *(unsigned __int16 *)v38;
                goto LABEL_87;
              case 3:
                int v44 = *(unsigned __int16 *)v38 | (*((unsigned __int8 *)v38 + 2) << 16);
                goto LABEL_87;
              case 4:
                int v44 = *(_DWORD *)v38;
LABEL_87:
                int v45 = (v44 | (v42 << (8 * v11))) + 3;
                unsigned int v40 = v44 + 3;
                if (v11 < 4) {
                  unsigned int v40 = v45;
                }
                break;
              default:
                break;
            }
          }
          if (v40 != 2)
          {
            if (v40 != 1)
            {
              if (v40)
              {
                if (v11 > 3) {
                  goto LABEL_106;
                }
                unsigned int v49 = ((1 << (8 * v11)) + 1) >> (8 * v11);
                uint64_t v50 = 2;
                if (v49 > 0xFFFC) {
                  uint64_t v50 = 4;
                }
                if (v49 <= 0xFC) {
LABEL_106:
                }
                  uint64_t v50 = 1;
                memcpy(v41, v38, v50 + v11);
              }
              else
              {
                long long v46 = *(_OWORD *)v38;
                v41[2] = v38[2];
                *(_OWORD *)uint64_t v41 = v46;
                if (v11 <= 3)
                {
                  unsigned int v47 = ((1 << (8 * v11)) + 1) >> (8 * v11);
                  if (v47 > 0xFFFC)
                  {
                    *(_DWORD *)((char *)v41 + v11) = 0;
                    uint64_t v52 = 11;
                    goto LABEL_123;
                  }
                  if (v47 > 0xFC)
                  {
                    *(_WORD *)((char *)v41 + v11) = 0;
LABEL_122:
                    uint64_t v52 = 9;
LABEL_123:
                    BOOL v15 = v47 > 0xFFFC;
                    uint64_t v51 = 2;
                    if (v15) {
                      uint64_t v51 = 4;
                    }
                    goto LABEL_125;
                  }
                }
                *((unsigned char *)v41 + v11) = 0;
              }
LABEL_108:
              uint64_t v51 = 1;
              if (v11 > 3)
              {
                uint64_t v52 = 8;
LABEL_125:
                uint64_t v53 = ((v11 + v52) & v10) + v11 + v51;
                uint64_t v54 = v35 + v53;
                unint64_t v55 = (v37 + v53) & 0xFFFFFFFFFFFFFFF8;
                long long v56 = *(_OWORD *)v55;
                long long v57 = *(_OWORD *)(v55 + 16);
                v54 &= 0xFFFFFFFFFFFFFFF8;
                *(unsigned char *)(v54 + 32) = *(unsigned char *)(v55 + 32);
                *(_OWORD *)uint64_t v54 = v56;
                *(_OWORD *)(v54 + 16) = v57;
                return v4;
              }
              unsigned int v47 = ((1 << (8 * v11)) + 1) >> (8 * v11);
              if (v47 > 0xFFFC)
              {
                uint64_t v52 = 11;
                goto LABEL_123;
              }
              if (v47 < 0xFD)
              {
                uint64_t v51 = 1;
                uint64_t v52 = 8;
                goto LABEL_125;
              }
              goto LABEL_122;
            }
            ((void (*)(void *))v17)(v41);
            if (v11 > 3)
            {
LABEL_101:
              *((unsigned char *)v41 + v11) = 1;
              goto LABEL_108;
            }
            int v48 = 1;
            unsigned int v47 = ((1 << (8 * v11)) + 1) >> (8 * v11);
            if (v47 <= 0xFFFC)
            {
              if (v47 <= 0xFC) {
                goto LABEL_101;
              }
LABEL_121:
              *(_WORD *)((char *)v41 + v11) = v48;
              goto LABEL_122;
            }
LABEL_118:
            *(_DWORD *)((char *)v41 + v11) = v48;
            uint64_t v52 = 11;
            goto LABEL_123;
          }
          ((void (*)(void *))v17)(v41);
          if (v11 <= 3)
          {
            unsigned int v47 = ((1 << (8 * v11)) + 1) >> (8 * v11);
            if (v47 > 0xFFFC)
            {
              int v48 = 2;
              goto LABEL_118;
            }
            if (v47 > 0xFC)
            {
              LOWORD(v48) = 2;
              goto LABEL_121;
            }
          }
          *((unsigned char *)v41 + v11) = 2;
          goto LABEL_108;
        }
LABEL_75:
        unsigned int v40 = *((unsigned __int8 *)v38 + v11);
        goto LABEL_78;
      }
      v17((uint64_t *)v21, (uint64_t *)v18, v5);
      if (v11 > 3) {
        goto LABEL_49;
      }
      int v29 = 1;
      unsigned int v27 = ((1 << (8 * v11)) + 1) >> (8 * v11);
      if (v27 <= 0xFFFC)
      {
        if (v27 <= 0xFC)
        {
LABEL_49:
          char v28 = 1;
LABEL_50:
          *(unsigned char *)(v21 + v11) = v28;
          if (v11 > 3) {
            goto LABEL_61;
          }
          goto LABEL_58;
        }
LABEL_69:
        *(_WORD *)(v21 + v11) = v29;
        goto LABEL_70;
      }
LABEL_66:
      *(_DWORD *)(v21 + v11) = v29;
      goto LABEL_70;
    }
    v17((uint64_t *)v21, (uint64_t *)v18, v5);
    if (v11 <= 3)
    {
      unsigned int v27 = ((1 << (8 * v11)) + 1) >> (8 * v11);
      if (v27 > 0xFFFC)
      {
        int v29 = 2;
        goto LABEL_66;
      }
      if (v27 > 0xFC)
      {
        LOWORD(v29) = 2;
        goto LABEL_69;
      }
    }
    char v28 = 2;
    goto LABEL_50;
  }
  uint64_t v16 = *a2;
  *uint64_t v4 = *a2;
  uint64_t v4 = (uint64_t *)(v16 + ((v9 + 16) & v10));
  swift_retain();
  return v4;
}

unsigned __int8 *destroy for AnimatedValueKeyframe(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  uint64_t v4 = *(void *)(v3 - 8);
  int v25 = *(uint64_t (**)(void))(v4 + 8);
  uint64_t v26 = v4 + 8;
  ((void (*)(uint64_t, uint64_t))v25)(a1, v3);
  unint64_t v5 = *(void *)(v4 + 64);
  uint64_t v6 = *(_DWORD *)(v4 + 80) & 0xF8 | 7;
  unint64_t v7 = (unsigned __int8 *)((v5 + a1 + v6) & ~v6);
  if (v5 <= 0x18) {
    uint64_t v8 = 24;
  }
  else {
    uint64_t v8 = *(void *)(v26 + 56);
  }
  char v9 = 8 * v8;
  if (v8 > 3) {
    goto LABEL_5;
  }
  unsigned int v11 = ((1 << v9) + 1) >> v9;
  if (v11 > 0xFFFC)
  {
    unsigned int v10 = *(_DWORD *)&v7[v8];
  }
  else
  {
    if (v11 <= 0xFC)
    {
LABEL_5:
      unsigned int v10 = v7[v8];
      goto LABEL_10;
    }
    unsigned int v10 = *(unsigned __int16 *)&v7[v8];
  }
LABEL_10:
  unsigned int v12 = v10 - 3;
  if (v10 >= 3)
  {
    if (v8 <= 3) {
      uint64_t v13 = v8;
    }
    else {
      uint64_t v13 = 4;
    }
    switch(v13)
    {
      case 1:
        int v14 = *v7;
        goto LABEL_19;
      case 2:
        int v14 = *(unsigned __int16 *)v7;
        goto LABEL_19;
      case 3:
        int v14 = *(unsigned __int16 *)v7 | (v7[2] << 16);
        goto LABEL_19;
      case 4:
        int v14 = *(_DWORD *)v7;
LABEL_19:
        int v15 = (v14 | (v12 << v9)) + 3;
        unsigned int v10 = v14 + 3;
        if (v8 < 4) {
          unsigned int v10 = v15;
        }
        break;
      default:
        break;
    }
  }
  if (v10 - 1 <= 1) {
    ((void (*)(unsigned __int8 *, uint64_t))v25)(v7, v3);
  }
  uint64_t v16 = ~v6;
  if (v8 > 3)
  {
    uint64_t v17 = v8 + v6;
LABEL_25:
    __n128 result = (unsigned __int8 *)((unint64_t)&v7[v17 + 1] & v16);
    unsigned int v19 = result[v8];
    goto LABEL_30;
  }
  unsigned int v20 = ((1 << v9) + 1) >> v9;
  if (v20 > 0xFFFC)
  {
    __n128 result = (unsigned __int8 *)((unint64_t)&v7[v8 + 4 + v6] & v16);
    unsigned int v19 = *(_DWORD *)&result[v8];
  }
  else
  {
    uint64_t v17 = v8 + v6;
    if (v20 < 0xFD) {
      goto LABEL_25;
    }
    __n128 result = (unsigned __int8 *)((unint64_t)&v7[v17 + 2] & v16);
    unsigned int v19 = *(unsigned __int16 *)&result[v8];
  }
LABEL_30:
  unsigned int v21 = v19 - 3;
  if (v19 >= 3)
  {
    if (v8 <= 3) {
      uint64_t v22 = v8;
    }
    else {
      uint64_t v22 = 4;
    }
    switch(v22)
    {
      case 1:
        int v23 = *result;
        goto LABEL_39;
      case 2:
        int v23 = *(unsigned __int16 *)result;
        goto LABEL_39;
      case 3:
        int v23 = *(unsigned __int16 *)result | (result[2] << 16);
        goto LABEL_39;
      case 4:
        int v23 = *(_DWORD *)result;
LABEL_39:
        int v24 = (v23 | (v21 << v9)) + 3;
        unsigned int v19 = v23 + 3;
        if (v8 < 4) {
          unsigned int v19 = v24;
        }
        break;
      default:
        break;
    }
  }
  if (v19 - 1 <= 1)
  {
    return (unsigned __int8 *)v25();
  }
  return result;
}

__n128 assignWithCopy for AnimatedValueKeyframe(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 24))(a1, a2, v5);
  unint64_t v7 = *(void *)(v6 + 64);
  uint64_t v8 = *(_DWORD *)(v6 + 80) & 0xF8 | 7;
  uint64_t v9 = v7 + v8 + a1;
  uint64_t v10 = ~v8;
  uint64_t v11 = v9 & ~v8;
  uint64_t v12 = v7 + v8 + a2;
  uint64_t v13 = v12 & ~v8;
  if (v7 <= 0x18) {
    uint64_t v14 = 24;
  }
  else {
    uint64_t v14 = *(void *)(v6 + 64);
  }
  if (v11 == v13)
  {
LABEL_58:
    if (v14 <= 3) {
      goto LABEL_75;
    }
    goto LABEL_59;
  }
  char v15 = 8 * v14;
  if (v14 > 3) {
    goto LABEL_8;
  }
  unsigned int v16 = ((1 << v15) + 1) >> v15;
  if (v16 > 0xFFFC)
  {
    unsigned int v17 = *(_DWORD *)(v11 + v14);
    unsigned int v18 = v17 - 3;
    if (v17 < 3) {
      goto LABEL_23;
    }
    goto LABEL_13;
  }
  if (v16 <= 0xFC)
  {
LABEL_8:
    unsigned int v17 = *(unsigned __int8 *)(v11 + v14);
    unsigned int v18 = v17 - 3;
    if (v17 < 3) {
      goto LABEL_23;
    }
LABEL_13:
    if (v14 <= 3) {
      uint64_t v19 = v14;
    }
    else {
      uint64_t v19 = 4;
    }
    switch(v19)
    {
      case 1:
        int v20 = *(unsigned __int8 *)v11;
        goto LABEL_21;
      case 2:
        int v20 = *(unsigned __int16 *)v11;
        goto LABEL_21;
      case 3:
        int v20 = *(unsigned __int16 *)v11 | (*(unsigned __int8 *)((v9 & ~v8) + 2) << 16);
        goto LABEL_21;
      case 4:
        int v20 = *(_DWORD *)v11;
LABEL_21:
        int v21 = (v20 | (v18 << v15)) + 3;
        unsigned int v17 = v20 + 3;
        if (v14 < 4) {
          unsigned int v17 = v21;
        }
        break;
      default:
        goto LABEL_23;
    }
    goto LABEL_23;
  }
  unsigned int v17 = *(unsigned __int16 *)(v11 + v14);
  unsigned int v18 = v17 - 3;
  if (v17 >= 3) {
    goto LABEL_13;
  }
LABEL_23:
  if (v17 - 1 <= 1) {
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v9 & ~v8, v5);
  }
  if (v14 > 3) {
    goto LABEL_28;
  }
  unsigned int v22 = ((1 << v15) + 1) >> v15;
  if (v22 > 0xFFFC)
  {
    unsigned int v23 = *(_DWORD *)(v13 + v14);
    unsigned int v24 = v23 - 3;
    if (v23 < 3) {
      goto LABEL_43;
    }
    goto LABEL_33;
  }
  if (v22 > 0xFC)
  {
    unsigned int v23 = *(unsigned __int16 *)(v13 + v14);
    unsigned int v24 = v23 - 3;
    if (v23 < 3) {
      goto LABEL_43;
    }
  }
  else
  {
LABEL_28:
    unsigned int v23 = *(unsigned __int8 *)(v13 + v14);
    unsigned int v24 = v23 - 3;
    if (v23 < 3) {
      goto LABEL_43;
    }
  }
LABEL_33:
  if (v14 <= 3) {
    uint64_t v25 = v14;
  }
  else {
    uint64_t v25 = 4;
  }
  switch(v25)
  {
    case 1:
      int v26 = *(unsigned __int8 *)v13;
      goto LABEL_41;
    case 2:
      int v26 = *(unsigned __int16 *)v13;
      goto LABEL_41;
    case 3:
      int v26 = *(unsigned __int16 *)v13 | (*(unsigned __int8 *)((v12 & ~v8) + 2) << 16);
      goto LABEL_41;
    case 4:
      int v26 = *(_DWORD *)v13;
LABEL_41:
      int v27 = (v26 | (v24 << v15)) + 3;
      unsigned int v23 = v26 + 3;
      if (v14 < 4) {
        unsigned int v23 = v27;
      }
      break;
    default:
      break;
  }
LABEL_43:
  if (v23 == 2)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v9 & ~v8, v12 & ~v8, v5);
    if (v14 <= 3)
    {
      unsigned int v29 = ((1 << v15) + 1) >> v15;
      if (v29 > 0xFFFC)
      {
        int v30 = 2;
        goto LABEL_71;
      }
      if (v29 > 0xFC)
      {
        LOWORD(v30) = 2;
        goto LABEL_74;
      }
    }
    *(unsigned char *)(v11 + v14) = 2;
    if (v14 <= 3) {
      goto LABEL_75;
    }
    goto LABEL_59;
  }
  if (v23 == 1)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v9 & ~v8, v12 & ~v8, v5);
    if (v14 > 3)
    {
LABEL_57:
      *(unsigned char *)(v11 + v14) = 1;
      goto LABEL_58;
    }
    int v30 = 1;
    unsigned int v31 = ((1 << v15) + 1) >> v15;
    if (v31 <= 0xFFFC)
    {
      if (v31 <= 0xFC) {
        goto LABEL_57;
      }
LABEL_74:
      *(_WORD *)(v11 + v14) = v30;
      goto LABEL_75;
    }
LABEL_71:
    *(_DWORD *)(v11 + v14) = v30;
    goto LABEL_75;
  }
  if (v23)
  {
    if (v14 > 3) {
      goto LABEL_64;
    }
    unsigned int v33 = ((1 << v15) + 1) >> v15;
    uint64_t v34 = 2;
    if (v33 > 0xFFFC) {
      uint64_t v34 = 4;
    }
    if (v33 <= 0xFC) {
LABEL_64:
    }
      uint64_t v34 = 1;
    memcpy((void *)(v9 & ~v8), (const void *)(v12 & ~v8), v34 + v14);
    if (v14 <= 3) {
      goto LABEL_75;
    }
  }
  else
  {
    long long v28 = *(_OWORD *)v13;
    *(void *)((v9 & ~v8) + 0x10) = *(void *)((v12 & ~v8) + 0x10);
    *(_OWORD *)uint64_t v11 = v28;
    if (v14 <= 3)
    {
      unsigned int v35 = ((1 << v15) + 1) >> v15;
      if (v35 > 0xFFFC)
      {
        *(_DWORD *)(v11 + v14) = 0;
        goto LABEL_75;
      }
      if (v35 > 0xFC)
      {
        *(_WORD *)(v11 + v14) = 0;
        goto LABEL_75;
      }
    }
    *(unsigned char *)(v11 + v14) = 0;
    if (v14 <= 3)
    {
LABEL_75:
      int v32 = 0;
      unsigned int v36 = ((1 << (8 * v14)) + 1) >> (8 * v14);
      uint64_t v37 = 2;
      if (v36 > 0xFFFC) {
        uint64_t v37 = 4;
      }
      if (v36 > 0xFC) {
        goto LABEL_79;
      }
      goto LABEL_78;
    }
  }
LABEL_59:
  int v32 = 1;
LABEL_78:
  uint64_t v37 = 1;
LABEL_79:
  uint64_t v38 = v37 + v14;
  unsigned int v39 = (void *)(((v9 | v8) + v38) & v10);
  unsigned int v40 = (void *)(((v12 | v8) + v38) & v10);
  char v41 = 8 * v14;
  if (v39 == v40) {
    goto LABEL_133;
  }
  if (v32) {
    goto LABEL_83;
  }
  unsigned int v42 = ((1 << v41) + 1) >> v41;
  if (v42 > 0xFFFC)
  {
    unsigned int v43 = *(_DWORD *)((char *)v39 + v14);
    unsigned int v44 = v43 - 3;
    if (v43 < 3) {
      goto LABEL_98;
    }
    goto LABEL_88;
  }
  if (v42 <= 0xFC)
  {
LABEL_83:
    unsigned int v43 = *((unsigned __int8 *)v39 + v14);
    unsigned int v44 = v43 - 3;
    if (v43 < 3) {
      goto LABEL_98;
    }
LABEL_88:
    if (v32) {
      uint64_t v45 = 4;
    }
    else {
      uint64_t v45 = v14;
    }
    switch(v45)
    {
      case 1:
        int v46 = *(unsigned __int8 *)v39;
        goto LABEL_96;
      case 2:
        int v46 = *(unsigned __int16 *)v39;
        goto LABEL_96;
      case 3:
        int v46 = *(unsigned __int16 *)v39 | (*((unsigned __int8 *)v39 + 2) << 16);
        goto LABEL_96;
      case 4:
        int v46 = *(_DWORD *)v39;
LABEL_96:
        int v47 = (v46 | (v44 << v41)) + 3;
        unsigned int v43 = v46 + 3;
        if (!v32) {
          unsigned int v43 = v47;
        }
        break;
      default:
        goto LABEL_98;
    }
    goto LABEL_98;
  }
  unsigned int v43 = *(unsigned __int16 *)((char *)v39 + v14);
  unsigned int v44 = v43 - 3;
  if (v43 >= 3) {
    goto LABEL_88;
  }
LABEL_98:
  if (v43 - 1 <= 1) {
    (*(void (**)(void *, uint64_t))(v6 + 8))(v39, v5);
  }
  if (v32) {
    goto LABEL_103;
  }
  unsigned int v48 = ((1 << v41) + 1) >> v41;
  if (v48 > 0xFFFC)
  {
    unsigned int v49 = *(_DWORD *)((char *)v40 + v14);
    unsigned int v50 = v49 - 3;
    if (v49 < 3) {
      goto LABEL_118;
    }
    goto LABEL_108;
  }
  if (v48 <= 0xFC)
  {
LABEL_103:
    unsigned int v49 = *((unsigned __int8 *)v40 + v14);
    unsigned int v50 = v49 - 3;
    if (v49 < 3) {
      goto LABEL_118;
    }
  }
  else
  {
    unsigned int v49 = *(unsigned __int16 *)((char *)v40 + v14);
    unsigned int v50 = v49 - 3;
    if (v49 < 3) {
      goto LABEL_118;
    }
  }
LABEL_108:
  if (v32) {
    uint64_t v51 = 4;
  }
  else {
    uint64_t v51 = v14;
  }
  switch(v51)
  {
    case 1:
      int v52 = *(unsigned __int8 *)v40;
      goto LABEL_116;
    case 2:
      int v52 = *(unsigned __int16 *)v40;
      goto LABEL_116;
    case 3:
      int v52 = *(unsigned __int16 *)v40 | (*((unsigned __int8 *)v40 + 2) << 16);
      goto LABEL_116;
    case 4:
      int v52 = *(_DWORD *)v40;
LABEL_116:
      int v53 = (v52 | (v50 << v41)) + 3;
      unsigned int v49 = v52 + 3;
      if (!v32) {
        unsigned int v49 = v53;
      }
      break;
    default:
      break;
  }
LABEL_118:
  if (v49 == 2)
  {
    (*(void (**)(void *, void *, uint64_t))(v6 + 16))(v39, v40, v5);
    if ((v32 & 1) == 0)
    {
      unsigned int v55 = ((1 << v41) + 1) >> v41;
      if (v55 > 0xFFFC)
      {
        int v56 = 2;
        goto LABEL_150;
      }
      if (v55 > 0xFC)
      {
        LOWORD(v56) = 2;
        goto LABEL_153;
      }
    }
    *((unsigned char *)v39 + v14) = 2;
    if (v32) {
      goto LABEL_134;
    }
LABEL_141:
    unsigned int v60 = ((1 << v41) + 1) >> v41;
    unsigned int v57 = v60 + 3;
    uint64_t v61 = 2;
    if (v60 > 0xFFFC) {
      uint64_t v61 = 4;
    }
    if (v60 > 0xFC)
    {
      uint64_t v62 = ~v8;
      goto LABEL_156;
    }
    goto LABEL_145;
  }
  if (v49 == 1)
  {
    (*(void (**)(void *, void *, uint64_t))(v6 + 16))(v39, v40, v5);
    if (v32)
    {
LABEL_132:
      *((unsigned char *)v39 + v14) = 1;
LABEL_133:
      if ((v32 & 1) == 0) {
        goto LABEL_141;
      }
      goto LABEL_134;
    }
    int v56 = 1;
    unsigned int v55 = ((1 << v41) + 1) >> v41;
    if (v55 <= 0xFFFC)
    {
      if (v55 <= 0xFC) {
        goto LABEL_132;
      }
LABEL_153:
      *(_WORD *)((char *)v39 + v14) = v56;
      goto LABEL_154;
    }
LABEL_150:
    *(_DWORD *)((char *)v39 + v14) = v56;
    goto LABEL_154;
  }
  if (v49)
  {
    if (v32) {
      goto LABEL_139;
    }
    unsigned int v58 = ((1 << v41) + 1) >> v41;
    uint64_t v59 = 2;
    if (v58 > 0xFFFC) {
      uint64_t v59 = 4;
    }
    if (v58 <= 0xFC) {
LABEL_139:
    }
      uint64_t v59 = 1;
    memcpy(v39, v40, v59 + v14);
    if (v32) {
      goto LABEL_134;
    }
    goto LABEL_141;
  }
  long long v54 = *(_OWORD *)v40;
  v39[2] = v40[2];
  *(_OWORD *)unsigned int v39 = v54;
  if (v32) {
    goto LABEL_122;
  }
  unsigned int v55 = ((1 << v41) + 1) >> v41;
  if (v55 > 0xFFFC)
  {
    *(_DWORD *)((char *)v39 + v14) = 0;
  }
  else
  {
    if (v55 <= 0xFC)
    {
LABEL_122:
      *((unsigned char *)v39 + v14) = 0;
      if ((v32 & 1) == 0) {
        goto LABEL_141;
      }
LABEL_134:
      unsigned int v57 = 4;
LABEL_145:
      uint64_t v62 = ~v8;
      uint64_t v61 = 1;
      goto LABEL_156;
    }
    *(_WORD *)((char *)v39 + v14) = 0;
  }
LABEL_154:
  uint64_t v62 = ~v8;
  unsigned int v57 = v55 + 3;
  BOOL v63 = v55 > 0xFFFC;
  uint64_t v61 = 2;
  if (v63) {
    uint64_t v61 = 4;
  }
LABEL_156:
  uint64_t v64 = (v14 + v8 + v61) & v62;
  uint64_t v65 = 4;
  if (v57 < 0x10000) {
    uint64_t v65 = 2;
  }
  if (v57 < 0x100) {
    uint64_t v66 = 1;
  }
  else {
    uint64_t v66 = v65;
  }
  uint64_t v67 = v66 + v14 + v64;
  uint64_t v68 = (v11 | 7) + v67;
  unint64_t v69 = ((v13 | 7) + v67) & 0xFFFFFFFFFFFFFFF8;
  __n128 result = *(__n128 *)v69;
  long long v71 = *(_OWORD *)(v69 + 16);
  v68 &= 0xFFFFFFFFFFFFFFF8;
  *(unsigned char *)(v68 + 32) = *(unsigned char *)(v69 + 32);
  *(__n128 *)uint64_t v68 = result;
  *(_OWORD *)(v68 + 16) = v71;
  return result;
}

__n128 initializeWithTake for AnimatedValueKeyframe(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8) + 32;
  unsigned int v57 = *(void (**)(uint64_t, uint64_t, uint64_t))v6;
  (*(void (**)(uint64_t, uint64_t, uint64_t))v6)(a1, a2, v5);
  unint64_t v7 = *(void *)(v6 + 32);
  uint64_t v8 = *(_DWORD *)(v6 + 48) & 0xF8 | 7;
  uint64_t v9 = v7 + v8 + a1;
  uint64_t v10 = v7 + v8 + a2;
  uint64_t v11 = v10 & ~v8;
  if (v7 <= 0x18) {
    uint64_t v12 = 24;
  }
  else {
    uint64_t v12 = *(void *)(v6 + 32);
  }
  char v13 = 8 * v12;
  if (v12 > 3) {
    goto LABEL_7;
  }
  unsigned int v14 = ((1 << v13) + 1) >> v13;
  if (v14 > 0xFFFC)
  {
    unsigned int v15 = *(_DWORD *)(v11 + v12);
  }
  else
  {
    if (v14 <= 0xFC)
    {
LABEL_7:
      unsigned int v15 = *(unsigned __int8 *)(v11 + v12);
      goto LABEL_10;
    }
    unsigned int v15 = *(unsigned __int16 *)(v11 + v12);
  }
LABEL_10:
  uint64_t v16 = v9 & ~v8;
  unsigned int v17 = v15 - 3;
  if (v15 >= 3)
  {
    if (v12 <= 3) {
      uint64_t v18 = v12;
    }
    else {
      uint64_t v18 = 4;
    }
    switch(v18)
    {
      case 1:
        int v19 = *(unsigned __int8 *)v11;
        goto LABEL_19;
      case 2:
        int v19 = *(unsigned __int16 *)v11;
        goto LABEL_19;
      case 3:
        int v19 = *(unsigned __int16 *)v11 | (*(unsigned __int8 *)((v10 & ~v8) + 2) << 16);
        goto LABEL_19;
      case 4:
        int v19 = *(_DWORD *)v11;
LABEL_19:
        int v20 = (v19 | (v17 << v13)) + 3;
        unsigned int v15 = v19 + 3;
        if (v12 < 4) {
          unsigned int v15 = v20;
        }
        break;
      default:
        break;
    }
  }
  uint64_t v21 = ~v8;
  switch(v15)
  {
    case 2u:
      v57(v9 & ~v8, v10 & ~v8, v5);
      if (v12 <= 3)
      {
        unsigned int v23 = ((1 << v13) + 1) >> v13;
        if (v23 > 0xFFFC)
        {
          int v25 = 2;
          goto LABEL_51;
        }
        if (v23 > 0xFC)
        {
          LOWORD(v25) = 2;
          goto LABEL_54;
        }
      }
      char v24 = 2;
      goto LABEL_35;
    case 1u:
      v57(v9 & ~v8, v10 & ~v8, v5);
      if (v12 > 3)
      {
LABEL_34:
        char v24 = 1;
LABEL_35:
        *(unsigned char *)(v16 + v12) = v24;
        if (v12 > 3) {
          goto LABEL_46;
        }
        goto LABEL_43;
      }
      int v25 = 1;
      unsigned int v23 = ((1 << v13) + 1) >> v13;
      if (v23 <= 0xFFFC)
      {
        if (v23 <= 0xFC) {
          goto LABEL_34;
        }
LABEL_54:
        *(_WORD *)(v16 + v12) = v25;
        goto LABEL_55;
      }
LABEL_51:
      *(_DWORD *)(v16 + v12) = v25;
      goto LABEL_55;
    case 0u:
      long long v22 = *(_OWORD *)v11;
      *(void *)((v9 & ~v8) + 0x10) = *(void *)((v10 & ~v8) + 0x10);
      *(_OWORD *)uint64_t v16 = v22;
      if (v12 > 3) {
        goto LABEL_25;
      }
      unsigned int v23 = ((1 << v13) + 1) >> v13;
      if (v23 > 0xFFFC)
      {
        *(_DWORD *)(v16 + v12) = 0;
      }
      else
      {
        if (v23 <= 0xFC)
        {
LABEL_25:
          *(unsigned char *)(v16 + v12) = 0;
          if (v12 > 3)
          {
LABEL_46:
            uint64_t v29 = 1;
            goto LABEL_57;
          }
          goto LABEL_43;
        }
        *(_WORD *)(v16 + v12) = 0;
      }
LABEL_55:
      BOOL v30 = v23 > 0xFFFC;
      uint64_t v29 = 2;
      if (v30) {
        uint64_t v29 = 4;
      }
      goto LABEL_57;
  }
  if (v12 > 3) {
    goto LABEL_41;
  }
  unsigned int v26 = ((1 << v13) + 1) >> v13;
  uint64_t v27 = 2;
  if (v26 > 0xFFFC) {
    uint64_t v27 = 4;
  }
  if (v26 <= 0xFC) {
LABEL_41:
  }
    uint64_t v27 = 1;
  memcpy((void *)(v9 & ~v8), (const void *)(v10 & ~v8), v27 + v12);
  if (v12 > 3) {
    goto LABEL_46;
  }
LABEL_43:
  unsigned int v28 = ((1 << v13) + 1) >> v13;
  uint64_t v29 = 2;
  if (v28 > 0xFFFC) {
    uint64_t v29 = 4;
  }
  if (v28 <= 0xFC) {
    goto LABEL_46;
  }
LABEL_57:
  uint64_t v31 = v29 + v12;
  uint64_t v32 = (v9 | v8) + v31;
  unsigned int v33 = (void *)(((v10 | v8) + v31) & v21);
  if (v12 > 3)
  {
LABEL_60:
    unsigned int v35 = *((unsigned __int8 *)v33 + v12);
    goto LABEL_63;
  }
  unsigned int v34 = ((1 << v13) + 1) >> v13;
  if (v34 > 0xFFFC)
  {
    unsigned int v35 = *(_DWORD *)((char *)v33 + v12);
  }
  else
  {
    if (v34 <= 0xFC) {
      goto LABEL_60;
    }
    unsigned int v35 = *(unsigned __int16 *)((char *)v33 + v12);
  }
LABEL_63:
  unsigned int v36 = (void *)(v32 & v21);
  unsigned int v37 = v35 - 3;
  if (v35 >= 3)
  {
    if (v12 <= 3) {
      uint64_t v38 = v12;
    }
    else {
      uint64_t v38 = 4;
    }
    switch(v38)
    {
      case 1:
        int v39 = *(unsigned __int8 *)v33;
        goto LABEL_72;
      case 2:
        int v39 = *(unsigned __int16 *)v33;
        goto LABEL_72;
      case 3:
        int v39 = *(unsigned __int16 *)v33 | (*((unsigned __int8 *)v33 + 2) << 16);
        goto LABEL_72;
      case 4:
        int v39 = *(_DWORD *)v33;
LABEL_72:
        int v40 = (v39 | (v37 << v13)) + 3;
        unsigned int v35 = v39 + 3;
        if (v12 < 4) {
          unsigned int v35 = v40;
        }
        break;
      default:
        break;
    }
  }
  if (v35 == 2)
  {
    ((void (*)(void *))v57)(v36);
    if (v12 <= 3)
    {
      unsigned int v42 = ((1 << v13) + 1) >> v13;
      if (v42 > 0xFFFC)
      {
        int v43 = 2;
        goto LABEL_103;
      }
      if (v42 > 0xFC)
      {
        LOWORD(v43) = 2;
        goto LABEL_106;
      }
    }
    *((unsigned char *)v36 + v12) = 2;
    goto LABEL_93;
  }
  if (v35 == 1)
  {
    ((void (*)(void *))v57)(v36);
    if (v12 > 3)
    {
LABEL_86:
      *((unsigned char *)v36 + v12) = 1;
      goto LABEL_93;
    }
    int v43 = 1;
    unsigned int v42 = ((1 << v13) + 1) >> v13;
    if (v42 <= 0xFFFC)
    {
      if (v42 <= 0xFC) {
        goto LABEL_86;
      }
LABEL_106:
      *(_WORD *)((char *)v36 + v12) = v43;
LABEL_107:
      unsigned int v46 = v42 + 3;
      BOOL v30 = v42 > 0xFFFC;
      uint64_t v48 = 2;
      if (v30) {
        uint64_t v48 = 4;
      }
      goto LABEL_109;
    }
LABEL_103:
    *(_DWORD *)((char *)v36 + v12) = v43;
    goto LABEL_107;
  }
  if (v35)
  {
    if (v12 > 3) {
      goto LABEL_91;
    }
    unsigned int v44 = ((1 << v13) + 1) >> v13;
    uint64_t v45 = 2;
    if (v44 > 0xFFFC) {
      uint64_t v45 = 4;
    }
    if (v44 <= 0xFC) {
LABEL_91:
    }
      uint64_t v45 = 1;
    memcpy(v36, v33, v45 + v12);
    goto LABEL_93;
  }
  long long v41 = *(_OWORD *)v33;
  v36[2] = v33[2];
  *(_OWORD *)unsigned int v36 = v41;
  if (v12 > 3) {
    goto LABEL_78;
  }
  unsigned int v42 = ((1 << v13) + 1) >> v13;
  if (v42 > 0xFFFC)
  {
    *(_DWORD *)((char *)v36 + v12) = 0;
    goto LABEL_107;
  }
  if (v42 > 0xFC)
  {
    *(_WORD *)((char *)v36 + v12) = 0;
    goto LABEL_107;
  }
LABEL_78:
  *((unsigned char *)v36 + v12) = 0;
LABEL_93:
  if (v12 > 3)
  {
    unsigned int v46 = 4;
LABEL_98:
    uint64_t v48 = 1;
    goto LABEL_109;
  }
  unsigned int v47 = ((1 << v13) + 1) >> v13;
  unsigned int v46 = v47 + 3;
  uint64_t v48 = 2;
  if (v47 > 0xFFFC) {
    uint64_t v48 = 4;
  }
  if (v47 <= 0xFC) {
    goto LABEL_98;
  }
LABEL_109:
  uint64_t v49 = (v12 + v8 + v48) & v21;
  uint64_t v50 = 4;
  if (v46 < 0x10000) {
    uint64_t v50 = 2;
  }
  if (v46 < 0x100) {
    uint64_t v51 = 1;
  }
  else {
    uint64_t v51 = v50;
  }
  uint64_t v52 = v51 + v12 + v49;
  uint64_t v53 = (v16 | 7) + v52;
  unint64_t v54 = ((v11 | 7) + v52) & 0xFFFFFFFFFFFFFFF8;
  __n128 result = *(__n128 *)v54;
  long long v56 = *(_OWORD *)(v54 + 16);
  v53 &= 0xFFFFFFFFFFFFFFF8;
  *(unsigned char *)(v53 + 32) = *(unsigned char *)(v54 + 32);
  *(__n128 *)uint64_t v53 = result;
  *(_OWORD *)(v53 + 16) = v56;
  return result;
}

uint64_t getEnumTagSinglePayload for AnimatedValueKeyframe(unsigned __int8 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  unint64_t v6 = *(void *)(v4 + 64);
  uint64_t v7 = 24;
  if (v6 > 0x18) {
    uint64_t v7 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  }
  char v8 = 8 * v7;
  if (v7 > 3)
  {
    int v9 = 4;
LABEL_5:
    char v10 = 8;
    goto LABEL_6;
  }
  unsigned int v15 = ((1 << v8) + 1) >> v8;
  if (v15 > 0xFFFC)
  {
LABEL_15:
    unsigned int v11 = 0x7FFFFFFF;
    if (v7 > 3) {
      goto LABEL_8;
    }
    goto LABEL_16;
  }
  int v9 = v15 + 3;
  if (v15 <= 0xFC) {
    goto LABEL_5;
  }
  char v10 = 16;
LABEL_6:
  unsigned int v11 = (1 << v10) - v9;
  if ((v11 & 0x80000000) != 0) {
    goto LABEL_15;
  }
  if (v7 > 3)
  {
LABEL_8:
    int v12 = 4;
    goto LABEL_9;
  }
LABEL_16:
  unsigned int v16 = ((1 << v8) + 1) >> v8;
  if (v16 <= 0xFFFC)
  {
    int v12 = v16 + 3;
    if (v16 > 0xFC)
    {
      char v13 = 16;
LABEL_10:
      unsigned int v14 = (1 << v13) - v12;
      if ((v14 & 0x80000000) == 0) {
        goto LABEL_20;
      }
      goto LABEL_19;
    }
LABEL_9:
    char v13 = 8;
    goto LABEL_10;
  }
LABEL_19:
  unsigned int v14 = 0x7FFFFFFF;
LABEL_20:
  if (v14 > v11) {
    unsigned int v11 = v14;
  }
  if (v11 <= v5) {
    unsigned int v17 = *(_DWORD *)(v4 + 84);
  }
  else {
    unsigned int v17 = v11;
  }
  uint64_t v18 = 1;
  if (v7 <= 3)
  {
    unsigned int v20 = ((1 << v8) + 1) >> v8;
    if (v20 > 0xFFFC)
    {
      uint64_t v18 = 4;
    }
    else
    {
      if (v20 < 0xFD)
      {
        uint64_t v18 = 1;
        uint64_t v19 = 1;
        if (!a2) {
          return 0;
        }
        goto LABEL_37;
      }
      uint64_t v18 = 2;
    }
    uint64_t v19 = 4;
    if (v20 <= 0xFFFC) {
      uint64_t v19 = 2;
    }
    if (!a2) {
      return 0;
    }
    goto LABEL_37;
  }
  uint64_t v19 = 1;
  if (!a2) {
    return 0;
  }
LABEL_37:
  uint64_t v21 = *(_DWORD *)(v4 + 80) & 0xF8 | 7;
  uint64_t v22 = ~v21;
  if (v17 < a2)
  {
    unint64_t v23 = ((v7 + ((v6 + v21) & ~v21) + ((v7 + v18 + v21) & v22) + v19 + 7) & 0xFFFFFFFFFFFFFFF8) + 33;
    unsigned int v24 = (a2 - v17 + 255) >> (8 * v23);
    if (v23 < 4) {
      unsigned int v25 = v24 + 1;
    }
    else {
      unsigned int v25 = 2;
    }
    if (v25 >= 0x10000) {
      LODWORD(v26) = 4;
    }
    else {
      LODWORD(v26) = 2;
    }
    if (v25 < 0x100) {
      LODWORD(v26) = 1;
    }
    if (v25 >= 2) {
      uint64_t v26 = v26;
    }
    else {
      uint64_t v26 = 0;
    }
    switch(v26)
    {
      case 1:
        int v27 = a1[v23];
        if (!a1[v23]) {
          break;
        }
        goto LABEL_53;
      case 2:
        int v27 = *(unsigned __int16 *)&a1[v23];
        if (*(_WORD *)&a1[v23]) {
          goto LABEL_53;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x187C07014);
      case 4:
        int v27 = *(_DWORD *)&a1[v23];
        if (!v27) {
          break;
        }
LABEL_53:
        int v28 = (v27 - 1) << (8 * v23);
        if (v23 >= 4) {
          int v28 = 0;
        }
        if (v23 == 1) {
          int v29 = *a1;
        }
        else {
          int v29 = *(_DWORD *)a1;
        }
        return v17 + (v29 | v28) + 1;
      default:
        break;
    }
  }
  if (!v17) {
    return 0;
  }
  if (v7 > 3)
  {
    int v30 = 4;
LABEL_61:
    char v31 = 8;
    goto LABEL_62;
  }
  unsigned int v36 = ((1 << v8) + 1) >> v8;
  if (v36 > 0xFFFC)
  {
LABEL_71:
    unsigned int v32 = 0x7FFFFFFF;
    if (v7 > 3) {
      goto LABEL_64;
    }
    goto LABEL_72;
  }
  int v30 = v36 + 3;
  if (v36 <= 0xFC) {
    goto LABEL_61;
  }
  char v31 = 16;
LABEL_62:
  unsigned int v32 = (1 << v31) - v30;
  if ((v32 & 0x80000000) != 0) {
    goto LABEL_71;
  }
  if (v7 > 3)
  {
LABEL_64:
    int v33 = 4;
    goto LABEL_65;
  }
LABEL_72:
  unsigned int v37 = ((1 << v8) + 1) >> v8;
  if (v37 <= 0xFFFC)
  {
    int v33 = v37 + 3;
    if (v37 > 0xFC)
    {
      char v34 = 16;
LABEL_66:
      unsigned int v35 = (1 << v34) - v33;
      if ((v35 & 0x80000000) == 0) {
        goto LABEL_76;
      }
      goto LABEL_75;
    }
LABEL_65:
    char v34 = 8;
    goto LABEL_66;
  }
LABEL_75:
  unsigned int v35 = 0x7FFFFFFF;
LABEL_76:
  if (v35 > v32) {
    unsigned int v32 = v35;
  }
  if (v32 <= v5) {
    unsigned int v38 = *(_DWORD *)(v4 + 84);
  }
  else {
    unsigned int v38 = v32;
  }
  if (v5 >= v32) {
    return (*(uint64_t (**)(void))(v4 + 48))();
  }
  int v39 = &a1[v6];
  if (v7 > 3)
  {
    int v40 = 4;
    goto LABEL_84;
  }
  unsigned int v44 = ((1 << v8) + 1) >> v8;
  if (v44 <= 0xFFFC)
  {
    int v40 = v44 + 3;
    if (v44 > 0xFC)
    {
      char v41 = 16;
LABEL_85:
      unsigned int v42 = (1 << v41) - v40;
      if ((v42 & 0x80000000) == 0) {
        goto LABEL_92;
      }
      goto LABEL_91;
    }
LABEL_84:
    char v41 = 8;
    goto LABEL_85;
  }
LABEL_91:
  unsigned int v42 = 0x7FFFFFFF;
LABEL_92:
  uint64_t v45 = &v39[v21];
  if (v7 > 3)
  {
    int v46 = 4;
    goto LABEL_94;
  }
  unsigned int v49 = ((1 << v8) + 1) >> v8;
  if (v49 <= 0xFFFC)
  {
    int v46 = v49 + 3;
    if (v49 > 0xFC)
    {
      char v47 = 16;
LABEL_95:
      unsigned int v48 = (1 << v47) - v46;
      if ((v48 & 0x80000000) == 0) {
        goto LABEL_101;
      }
      goto LABEL_100;
    }
LABEL_94:
    char v47 = 8;
    goto LABEL_95;
  }
LABEL_100:
  unsigned int v48 = 0x7FFFFFFF;
LABEL_101:
  uint64_t v50 = (unsigned __int16 *)((unint64_t)v45 & v22);
  if (v48 > v42) {
    unsigned int v42 = v48;
  }
  uint64_t v51 = 1;
  if (v7 > 3)
  {
    uint64_t v52 = 1;
    goto LABEL_114;
  }
  unsigned int v53 = ((1 << v8) + 1) >> v8;
  if (v53 > 0xFFFC)
  {
    uint64_t v51 = 4;
  }
  else
  {
    if (v53 < 0xFD)
    {
      uint64_t v51 = 1;
      uint64_t v52 = 1;
      goto LABEL_114;
    }
    uint64_t v51 = 2;
  }
  uint64_t v52 = 4;
  if (v53 <= 0xFFFC) {
    uint64_t v52 = 2;
  }
LABEL_114:
  unsigned int v54 = v38 - v42;
  if (v38 <= v42) {
    goto LABEL_132;
  }
  uint64_t v55 = ((v7 + v51 + v21) & v22) + v7 + v52;
  char v56 = 8 * v55;
  if (v55 > 3)
  {
LABEL_116:
    int v57 = *((unsigned __int8 *)v50 + v55);
    goto LABEL_123;
  }
  unsigned int v58 = ((v54 + ~(-1 << v56)) >> v56) + 1;
  if (HIWORD(v58))
  {
    int v57 = *(_DWORD *)((char *)v50 + v55);
  }
  else
  {
    if (v58 <= 0xFF)
    {
      if (v58 < 2)
      {
LABEL_132:
        if (!v42) {
          return 0;
        }
        if (v7 <= 3)
        {
          unsigned int v68 = ((1 << v8) + 1) >> v8;
          if (v68 > 0xFFFC) {
            goto LABEL_145;
          }
          int v62 = v68 + 3;
          if (v68 > 0xFC)
          {
            char v63 = 16;
LABEL_136:
            unsigned int v64 = (1 << v63) - v62;
            if ((v64 & 0x80000000) == 0)
            {
              if (v7 > 3)
              {
LABEL_138:
                int v65 = 4;
                goto LABEL_139;
              }
LABEL_146:
              unsigned int v69 = ((1 << v8) + 1) >> v8;
              if (v69 > 0xFFFC)
              {
LABEL_149:
                unsigned int v67 = 0x7FFFFFFF;
LABEL_150:
                if (v67 > v64) {
                  unsigned int v64 = v67;
                }
                if (v7 <= 3)
                {
                  unsigned int v74 = ((1 << v8) + 1) >> v8;
                  if (v74 > 0xFFFC) {
                    goto LABEL_162;
                  }
                  int v70 = v74 + 3;
                  if (v74 > 0xFC)
                  {
                    char v71 = 16;
LABEL_155:
                    int v72 = (1 << v71) - v70;
                    if ((v72 & 0x80000000) == 0)
                    {
                      if (v72 == v64) {
                        goto LABEL_157;
                      }
                      goto LABEL_163;
                    }
LABEL_162:
                    if (v64 == 0x7FFFFFFF)
                    {
LABEL_157:
                      if (v7 <= 3)
                      {
                        unsigned int v76 = ((1 << v8) + 1) >> v8;
                        if (v76 > 0xFFFC) {
                          goto LABEL_169;
                        }
                        int v73 = v76 + 3;
                        if (v76 > 0xFC)
                        {
                          char v77 = 16;
LABEL_168:
                          unsigned int v78 = (1 << v77) - v73;
                          if ((v78 & 0x80000000) == 0)
                          {
LABEL_170:
                            if (v7 > 3) {
                              goto LABEL_174;
                            }
                            unsigned int v79 = ((1 << v8) + 1) >> v8;
                            uint64_t v80 = 2;
                            if (v79 > 0xFFFC) {
                              uint64_t v80 = 4;
                            }
                            if (v79 <= 0xFC) {
LABEL_174:
                            }
                              uint64_t v80 = 1;
                            if (!v64) {
                              return 0;
                            }
                            BOOL v81 = v64 >= v78;
                            unsigned int v82 = v64 - v78;
                            if (v82 == 0 || !v81)
                            {
LABEL_238:
                              if (v78)
                              {
                                if (v7 <= 3)
                                {
                                  unsigned int v108 = ((1 << v8) + 1) >> v8;
                                  if (v108 > 0xFFFC)
                                  {
                                    unsigned int v104 = *(_DWORD *)((char *)v50 + v7);
                                    unsigned int v105 = ~v104;
LABEL_249:
                                    unsigned int v111 = 0x7FFFFFFF;
LABEL_250:
                                    if (v111 > v105) {
                                      return -v104;
                                    }
                                    else {
                                      return 0;
                                    }
                                  }
                                  int v107 = v108 + 3;
                                  if (v108 > 0xFC)
                                  {
                                    int v110 = *(unsigned __int16 *)((char *)v50 + v7);
                                    unsigned int v104 = v110 | 0xFFFF0000;
                                    unsigned int v105 = v110 ^ 0xFFFF;
                                    char v106 = 16;
                                  }
                                  else
                                  {
                                    int v109 = *((unsigned __int8 *)v50 + v7);
                                    unsigned int v104 = v109 | 0xFFFFFF00;
                                    unsigned int v105 = v109 ^ 0xFF;
                                    char v106 = 8;
                                  }
                                }
                                else
                                {
                                  int v103 = *((unsigned __int8 *)v50 + v7);
                                  unsigned int v104 = v103 | 0xFFFFFF00;
                                  unsigned int v105 = v103 ^ 0xFF;
                                  char v106 = 8;
                                  int v107 = 4;
                                }
                                unsigned int v111 = (1 << v106) - v107;
                                if ((v111 & 0x80000000) == 0) {
                                  goto LABEL_250;
                                }
                                goto LABEL_249;
                              }
                              return 0;
                            }
                            uint64_t v83 = v80 + v7;
                            char v84 = 8 * v83;
                            if (v83 <= 3)
                            {
                              unsigned int v88 = ((v82 + ~(-1 << v84)) >> v84) + 1;
                              if (HIWORD(v88))
                              {
                                int v85 = *(_DWORD *)((char *)v50 + v83);
                                goto LABEL_220;
                              }
                              if (v88 > 0xFF)
                              {
                                int v85 = *(unsigned __int16 *)((char *)v50 + v83);
                                goto LABEL_220;
                              }
                              if (v88 < 2) {
                                goto LABEL_238;
                              }
                            }
                            int v85 = *((unsigned __int8 *)v50 + v83);
LABEL_220:
                            if (!v85) {
                              goto LABEL_238;
                            }
                            int v99 = (v85 - 1) << v84;
                            if (v83 > 3) {
                              int v99 = 0;
                            }
                            if (v83)
                            {
                              if (v83 <= 3) {
                                int v100 = v83;
                              }
                              else {
                                int v100 = 4;
                              }
                              switch(v100)
                              {
                                case 2:
                                  goto LABEL_253;
                                case 3:
                                  goto LABEL_254;
                                case 4:
                                  goto LABEL_255;
                                default:
                                  goto LABEL_237;
                              }
                            }
                            goto LABEL_246;
                          }
LABEL_169:
                          unsigned int v78 = 0x7FFFFFFF;
                          goto LABEL_170;
                        }
                      }
                      else
                      {
                        int v73 = 4;
                      }
                      char v77 = 8;
                      goto LABEL_168;
                    }
LABEL_163:
                    if (v7 <= 3)
                    {
                      unsigned int v86 = ((1 << v8) + 1) >> v8;
                      uint64_t v87 = v7 + ((unint64_t)v45 | v21);
                      if (v86 > 0xFFFC)
                      {
                        uint64_t v75 = v87 + 4;
                      }
                      else if (v86 > 0xFC)
                      {
                        uint64_t v75 = v87 + 2;
                      }
                      else
                      {
                        uint64_t v75 = v87 + 1;
                      }
                    }
                    else
                    {
                      uint64_t v75 = (uint64_t)v50 + v7 + v21 + 1;
                    }
                    uint64_t v50 = (unsigned __int16 *)(v75 & v22);
                    if (v7 <= 3)
                    {
                      unsigned int v90 = ((1 << v8) + 1) >> v8;
                      if (v90 > 0xFFFC) {
                        goto LABEL_201;
                      }
                      int v89 = v90 + 3;
                      if (v90 > 0xFC)
                      {
                        char v91 = 16;
LABEL_200:
                        unsigned int v78 = (1 << v91) - v89;
                        if ((v78 & 0x80000000) == 0)
                        {
LABEL_202:
                          if (v7 > 3) {
                            goto LABEL_206;
                          }
                          unsigned int v92 = ((1 << v8) + 1) >> v8;
                          uint64_t v93 = 2;
                          if (v92 > 0xFFFC) {
                            uint64_t v93 = 4;
                          }
                          if (v92 <= 0xFC) {
LABEL_206:
                          }
                            uint64_t v93 = 1;
                          if (!v64) {
                            return 0;
                          }
                          BOOL v81 = v64 >= v78;
                          unsigned int v94 = v64 - v78;
                          if (v94 == 0 || !v81) {
                            goto LABEL_238;
                          }
                          uint64_t v95 = v93 + v7;
                          char v96 = 8 * v95;
                          if (v95 > 3) {
                            goto LABEL_211;
                          }
                          unsigned int v98 = ((v94 + ~(-1 << v96)) >> v96) + 1;
                          if (HIWORD(v98))
                          {
                            int v97 = *(_DWORD *)((char *)v50 + v95);
                          }
                          else
                          {
                            if (v98 <= 0xFF)
                            {
                              if (v98 < 2) {
                                goto LABEL_238;
                              }
LABEL_211:
                              int v97 = *((unsigned __int8 *)v50 + v95);
                              goto LABEL_229;
                            }
                            int v97 = *(unsigned __int16 *)((char *)v50 + v95);
                          }
LABEL_229:
                          if (!v97) {
                            goto LABEL_238;
                          }
                          int v99 = (v97 - 1) << v96;
                          if (v95 > 3) {
                            int v99 = 0;
                          }
                          if (v95)
                          {
                            if (v95 <= 3) {
                              int v101 = v95;
                            }
                            else {
                              int v101 = 4;
                            }
                            switch(v101)
                            {
                              case 2:
LABEL_253:
                                int v102 = *v50;
                                break;
                              case 3:
LABEL_254:
                                int v102 = *v50 | (*((unsigned __int8 *)v50 + 2) << 16);
                                break;
                              case 4:
LABEL_255:
                                int v102 = *(_DWORD *)v50;
                                break;
                              default:
LABEL_237:
                                int v102 = *(unsigned __int8 *)v50;
                                break;
                            }
                            return v78 + (v102 | v99) + 1;
                          }
LABEL_246:
                          int v102 = 0;
                          return v78 + (v102 | v99) + 1;
                        }
LABEL_201:
                        unsigned int v78 = 0x7FFFFFFF;
                        goto LABEL_202;
                      }
                    }
                    else
                    {
                      int v89 = 4;
                    }
                    char v91 = 8;
                    goto LABEL_200;
                  }
                }
                else
                {
                  int v70 = 4;
                }
                char v71 = 8;
                goto LABEL_155;
              }
              int v65 = v69 + 3;
              if (v69 > 0xFC)
              {
                char v66 = 16;
LABEL_140:
                unsigned int v67 = (1 << v66) - v65;
                if ((v67 & 0x80000000) == 0) {
                  goto LABEL_150;
                }
                goto LABEL_149;
              }
LABEL_139:
              char v66 = 8;
              goto LABEL_140;
            }
LABEL_145:
            unsigned int v64 = 0x7FFFFFFF;
            if (v7 > 3) {
              goto LABEL_138;
            }
            goto LABEL_146;
          }
        }
        else
        {
          int v62 = 4;
        }
        char v63 = 8;
        goto LABEL_136;
      }
      goto LABEL_116;
    }
    int v57 = *(unsigned __int16 *)((char *)v50 + v55);
  }
LABEL_123:
  if (!v57) {
    goto LABEL_132;
  }
  int v59 = (v57 - 1) << v56;
  if (v55 > 3) {
    int v59 = 0;
  }
  if (v55)
  {
    if (v55 <= 3) {
      int v60 = v55;
    }
    else {
      int v60 = 4;
    }
    switch(v60)
    {
      case 2:
        int v61 = *v50;
        break;
      case 3:
        int v61 = *v50 | (*(unsigned __int8 *)(((unint64_t)v45 & v22) + 2) << 16);
        break;
      case 4:
        int v61 = *(_DWORD *)v50;
        break;
      default:
        int v61 = *(unsigned __int8 *)v50;
        break;
    }
  }
  else
  {
    int v61 = 0;
  }
  return v42 + (v61 | v59) + 1;
}

void storeEnumTagSinglePayload for AnimatedValueKeyframe(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  unsigned int v5 = a1;
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  unint64_t v8 = *(void *)(v6 + 64);
  uint64_t v9 = 24;
  if (v8 > 0x18) {
    uint64_t v9 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  }
  if (v9 > 3)
  {
    int v10 = 4;
LABEL_5:
    char v11 = 8;
    goto LABEL_6;
  }
  unsigned int v16 = ((1 << (8 * v9)) + 1) >> (8 * v9);
  if (v16 > 0xFFFC)
  {
LABEL_15:
    unsigned int v12 = 0x7FFFFFFF;
    if (v9 > 3) {
      goto LABEL_8;
    }
    goto LABEL_16;
  }
  int v10 = v16 + 3;
  if (v16 <= 0xFC) {
    goto LABEL_5;
  }
  char v11 = 16;
LABEL_6:
  unsigned int v12 = (1 << v11) - v10;
  if ((v12 & 0x80000000) != 0) {
    goto LABEL_15;
  }
  if (v9 > 3)
  {
LABEL_8:
    int v13 = 4;
    goto LABEL_9;
  }
LABEL_16:
  unsigned int v17 = ((1 << (8 * v9)) + 1) >> (8 * v9);
  if (v17 <= 0xFFFC)
  {
    int v13 = v17 + 3;
    if (v17 > 0xFC)
    {
      char v14 = 16;
LABEL_10:
      unsigned int v15 = (1 << v14) - v13;
      if ((v15 & 0x80000000) == 0) {
        goto LABEL_20;
      }
      goto LABEL_19;
    }
LABEL_9:
    char v14 = 8;
    goto LABEL_10;
  }
LABEL_19:
  unsigned int v15 = 0x7FFFFFFF;
LABEL_20:
  if (v15 > v12) {
    unsigned int v12 = v15;
  }
  if (v12 <= v7) {
    unsigned int v18 = *(_DWORD *)(v6 + 84);
  }
  else {
    unsigned int v18 = v12;
  }
  uint64_t v19 = *(_DWORD *)(v6 + 80) & 0xF8 | 7;
  uint64_t v20 = ~v19;
  uint64_t v21 = 1;
  if (v9 > 3)
  {
    uint64_t v22 = 1;
    goto LABEL_34;
  }
  unsigned int v23 = ((1 << (8 * v9)) + 1) >> (8 * v9);
  if (v23 > 0xFFFC)
  {
    uint64_t v21 = 4;
  }
  else
  {
    if (v23 < 0xFD)
    {
      uint64_t v21 = 1;
      uint64_t v22 = 1;
      goto LABEL_34;
    }
    uint64_t v21 = 2;
  }
  BOOL v24 = v23 > 0xFFFC;
  uint64_t v22 = 2;
  if (v24) {
    uint64_t v22 = 4;
  }
LABEL_34:
  size_t v25 = ((v9 + ((v8 + v19) & ~v19) + ((v9 + v21 + v19) & v20) + v22 + 7) & 0xFFFFFFFFFFFFFFF8) + 33;
  if (v18 < a3)
  {
    unsigned int v26 = (a3 - v18 + 255) >> (8 * v25);
    if (v25 <= 3) {
      unsigned int v27 = v26 + 1;
    }
    else {
      unsigned int v27 = 2;
    }
    if (v27 >= 0x10000) {
      int v28 = 4;
    }
    else {
      int v28 = 2;
    }
    if (v27 < 0x100) {
      int v28 = 1;
    }
    if (v27 >= 2) {
      int v29 = v28;
    }
    else {
      int v29 = 0;
    }
    if (v18 >= a2) {
      goto LABEL_47;
    }
LABEL_51:
    if (v25 < 4) {
      int v30 = ((~v18 + a2) >> (8 * v25)) + 1;
    }
    else {
      int v30 = 1;
    }
    if (v25 >= 4) {
      unsigned int v31 = ~v18 + a2;
    }
    else {
      unsigned int v31 = (~(_BYTE)v18 + a2);
    }
    bzero(a1, v25);
    if (v25 == 1) {
      *unsigned int v5 = v31;
    }
    else {
      *(_DWORD *)unsigned int v5 = v31;
    }
    switch(v29)
    {
      case 1:
LABEL_61:
        v5[v25] = v30;
        break;
      case 2:
LABEL_208:
        *(_WORD *)&v5[v25] = v30;
        break;
      case 3:
LABEL_259:
        __break(1u);
        JUMPOUT(0x187C07CC0);
      case 4:
LABEL_257:
        *(_DWORD *)&v5[v25] = v30;
        break;
      default:
        return;
    }
    return;
  }
  int v29 = 0;
  if (v18 < a2) {
    goto LABEL_51;
  }
LABEL_47:
  switch(v29)
  {
    case 1:
      a1[v25] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_64;
    case 2:
      *(_WORD *)&a1[v25] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_64;
    case 3:
      goto LABEL_259;
    case 4:
      *(_DWORD *)&a1[v25] = 0;
      goto LABEL_63;
    default:
LABEL_63:
      if (!a2) {
        return;
      }
LABEL_64:
      if (v9 > 3)
      {
        int v32 = 4;
LABEL_66:
        char v33 = 8;
        goto LABEL_67;
      }
      unsigned int v38 = ((1 << (8 * v9)) + 1) >> (8 * v9);
      if (v38 > 0xFFFC)
      {
LABEL_76:
        unsigned int v34 = 0x7FFFFFFF;
        if (v9 > 3) {
          goto LABEL_69;
        }
        goto LABEL_77;
      }
      int v32 = v38 + 3;
      if (v38 <= 0xFC) {
        goto LABEL_66;
      }
      char v33 = 16;
LABEL_67:
      unsigned int v34 = (1 << v33) - v32;
      if ((v34 & 0x80000000) != 0) {
        goto LABEL_76;
      }
      if (v9 > 3)
      {
LABEL_69:
        int v35 = 4;
LABEL_70:
        char v36 = 8;
        goto LABEL_71;
      }
LABEL_77:
      unsigned int v39 = ((1 << (8 * v9)) + 1) >> (8 * v9);
      if (v39 > 0xFFFC) {
        goto LABEL_80;
      }
      int v35 = v39 + 3;
      if (v39 <= 0xFC) {
        goto LABEL_70;
      }
      char v36 = 16;
LABEL_71:
      unsigned int v37 = (1 << v36) - v35;
      if ((v37 & 0x80000000) == 0) {
        goto LABEL_81;
      }
LABEL_80:
      unsigned int v37 = 0x7FFFFFFF;
LABEL_81:
      if (v37 > v34) {
        unsigned int v34 = v37;
      }
      if (v34 <= v7) {
        unsigned int v40 = v7;
      }
      else {
        unsigned int v40 = v34;
      }
      if (v7 < v34)
      {
        if (v9 <= 3)
        {
          unsigned int v45 = ((1 << (8 * v9)) + 1) >> (8 * v9);
          if (v45 > 0xFFFC)
          {
LABEL_100:
            unsigned int v43 = 0x7FFFFFFF;
LABEL_101:
            int v46 = &a1[v8];
            if (v9 <= 3)
            {
              unsigned int v50 = ((1 << (8 * v9)) + 1) >> (8 * v9);
              if (v50 > 0xFFFC)
              {
LABEL_109:
                unsigned int v49 = 0x7FFFFFFF;
LABEL_110:
                unint64_t v51 = (unint64_t)&v46[v19];
                if (v49 <= v43) {
                  unsigned int v49 = v43;
                }
                uint64_t v52 = 1;
                if (v9 > 3)
                {
                  uint64_t v53 = 1;
                  goto LABEL_121;
                }
                unsigned int v54 = ((1 << (8 * v9)) + 1) >> (8 * v9);
                if (v54 > 0xFFFC)
                {
                  uint64_t v52 = 4;
                }
                else
                {
                  if (v54 < 0xFD)
                  {
                    uint64_t v52 = 1;
                    uint64_t v53 = 1;
LABEL_121:
                    unsigned int v5 = (unsigned char *)(v51 & v20);
                    size_t v25 = ((v9 + v52 + v19) & v20) + v9 + v53;
                    BOOL v55 = v40 >= v49;
                    unsigned int v56 = v40 - v49;
                    if (v56 != 0 && v55)
                    {
                      if (v25 <= 3)
                      {
                        unsigned int v59 = ((v56 + ~(-1 << (8 * v25))) >> (8 * v25)) + 1;
                        if (HIWORD(v59))
                        {
                          int v57 = 4;
                        }
                        else if (v59 >= 0x100)
                        {
                          int v57 = 2;
                        }
                        else
                        {
                          int v57 = v59 > 1;
                        }
                      }
                      else
                      {
                        int v57 = 1;
                      }
                    }
                    else
                    {
                      int v57 = 0;
                    }
                    if (v49 < a2)
                    {
                      unsigned int v58 = ~v49 + a2;
                      if (v25 < 4)
                      {
                        int v30 = (v58 >> (8 * v25)) + 1;
                        if (v25)
                        {
                          int v60 = v58 & ~(-1 << (8 * v25));
                          bzero(v5, v25);
                          if (v25 == 3)
                          {
                            *(_WORD *)unsigned int v5 = v60;
                            v5[2] = BYTE2(v60);
                          }
                          else if (v25 == 2)
                          {
                            *(_WORD *)unsigned int v5 = v60;
                          }
                          else
                          {
                            *unsigned int v5 = v60;
                          }
                        }
                      }
                      else
                      {
                        bzero(v5, v25);
                        *(_DWORD *)unsigned int v5 = v58;
                        int v30 = 1;
                      }
                      switch(v57)
                      {
                        case 1:
                          goto LABEL_61;
                        case 2:
                          goto LABEL_208;
                        case 3:
                          goto LABEL_259;
                        case 4:
                          goto LABEL_257;
                        default:
                          return;
                      }
                    }
                    switch(v57)
                    {
                      case 1:
                        v5[v25] = 0;
                        goto LABEL_141;
                      case 2:
                        *(_WORD *)&v5[v25] = 0;
                        goto LABEL_141;
                      case 3:
                        goto LABEL_259;
                      case 4:
                        *(_DWORD *)&v5[v25] = 0;
                        goto LABEL_141;
                      default:
LABEL_141:
                        if (v9 <= 3)
                        {
                          unsigned int v67 = ((1 << (8 * v9)) + 1) >> (8 * v9);
                          if (v67 > 0xFFFC) {
                            goto LABEL_153;
                          }
                          int v61 = v67 + 3;
                          if (v67 > 0xFC)
                          {
                            char v62 = 16;
LABEL_144:
                            unsigned int v63 = (1 << v62) - v61;
                            if ((v63 & 0x80000000) == 0)
                            {
                              if (v9 > 3)
                              {
LABEL_146:
                                int v64 = 4;
LABEL_147:
                                char v65 = 8;
                                goto LABEL_148;
                              }
LABEL_154:
                              unsigned int v68 = ((1 << (8 * v9)) + 1) >> (8 * v9);
                              if (v68 > 0xFFFC) {
                                goto LABEL_157;
                              }
                              int v64 = v68 + 3;
                              if (v68 <= 0xFC) {
                                goto LABEL_147;
                              }
                              char v65 = 16;
LABEL_148:
                              unsigned int v66 = (1 << v65) - v64;
                              if ((v66 & 0x80000000) == 0) {
                                goto LABEL_158;
                              }
LABEL_157:
                              unsigned int v66 = 0x7FFFFFFF;
LABEL_158:
                              if (v66 > v63) {
                                unsigned int v63 = v66;
                              }
                              if (v9 <= 3)
                              {
                                unsigned int v75 = ((1 << (8 * v9)) + 1) >> (8 * v9);
                                if (v75 > 0xFFFC) {
                                  goto LABEL_173;
                                }
                                int v69 = v75 + 3;
                                if (v75 > 0xFC)
                                {
                                  char v70 = 16;
LABEL_163:
                                  int v71 = (1 << v70) - v69;
                                  if ((v71 & 0x80000000) == 0)
                                  {
                                    if (v71 == v63) {
                                      goto LABEL_165;
                                    }
                                    goto LABEL_174;
                                  }
LABEL_173:
                                  if (v63 == 0x7FFFFFFF)
                                  {
LABEL_165:
                                    if (v9 <= 3)
                                    {
                                      unsigned int v77 = ((1 << (8 * v9)) + 1) >> (8 * v9);
                                      if (v77 > 0xFFFC) {
                                        goto LABEL_179;
                                      }
                                      int v72 = v77 + 3;
                                      if (v77 > 0xFC)
                                      {
                                        char v73 = 16;
LABEL_168:
                                        unsigned int v74 = (1 << v73) - v72;
                                        if ((v74 & 0x80000000) == 0)
                                        {
LABEL_180:
                                          if (v9 > 3) {
                                            goto LABEL_184;
                                          }
                                          unsigned int v78 = ((1 << (8 * v9)) + 1) >> (8 * v9);
                                          uint64_t v79 = 2;
                                          if (v78 > 0xFFFC) {
                                            uint64_t v79 = 4;
                                          }
                                          if (v78 <= 0xFC) {
LABEL_184:
                                          }
                                            uint64_t v79 = 1;
                                          size_t v25 = v79 + v9;
                                          if (v63 <= v74)
                                          {
                                            int v80 = 0;
                                          }
                                          else if (v25 <= 3)
                                          {
                                            unsigned int v84 = ((v63 - v74 + ~(-1 << (8 * v25))) >> (8 * v25)) + 1;
                                            if (HIWORD(v84))
                                            {
                                              int v80 = 4;
                                            }
                                            else if (v84 >= 0x100)
                                            {
                                              int v80 = 2;
                                            }
                                            else
                                            {
                                              int v80 = v84 > 1;
                                            }
                                          }
                                          else
                                          {
                                            int v80 = 1;
                                          }
                                          if (v74 < a2)
                                          {
                                            unsigned int v83 = ~v74 + a2;
                                            if (v25 < 4)
                                            {
                                              int v30 = (v83 >> (8 * v25)) + 1;
                                              if (v25)
                                              {
                                                int v85 = v83 & ~(-1 << (8 * v25));
                                                bzero(v5, v25);
                                                if (v25 == 3)
                                                {
                                                  *(_WORD *)unsigned int v5 = v85;
                                                  v5[2] = BYTE2(v85);
                                                }
                                                else if (v25 == 2)
                                                {
                                                  *(_WORD *)unsigned int v5 = v85;
                                                }
                                                else
                                                {
                                                  *unsigned int v5 = v85;
                                                }
                                              }
                                            }
                                            else
                                            {
                                              bzero(v5, v25);
                                              *(_DWORD *)unsigned int v5 = v83;
                                              int v30 = 1;
                                            }
                                            switch(v80)
                                            {
                                              case 1:
                                                goto LABEL_61;
                                              case 2:
                                                goto LABEL_208;
                                              case 3:
                                                goto LABEL_259;
                                              case 4:
                                                goto LABEL_257;
                                              default:
                                                return;
                                            }
                                          }
                                          switch(v80)
                                          {
                                            case 1:
                                              goto LABEL_232;
                                            case 2:
                                              goto LABEL_241;
                                            case 3:
                                              goto LABEL_259;
                                            case 4:
                                              goto LABEL_242;
                                            default:
                                              goto LABEL_243;
                                          }
                                        }
LABEL_179:
                                        unsigned int v74 = 0x7FFFFFFF;
                                        goto LABEL_180;
                                      }
                                    }
                                    else
                                    {
                                      int v72 = 4;
                                    }
                                    char v73 = 8;
                                    goto LABEL_168;
                                  }
LABEL_174:
                                  if (v9 <= 3)
                                  {
                                    unsigned int v81 = ((1 << (8 * v9)) + 1) >> (8 * v9);
                                    uint64_t v82 = v9 + (v51 | v19);
                                    if (v81 > 0xFFFC)
                                    {
                                      uint64_t v76 = v82 + 4;
                                    }
                                    else if (v81 > 0xFC)
                                    {
                                      uint64_t v76 = v82 + 2;
                                    }
                                    else
                                    {
                                      uint64_t v76 = v82 + 1;
                                    }
                                  }
                                  else
                                  {
                                    uint64_t v76 = (uint64_t)&v5[v9 + 1 + v19];
                                  }
                                  unsigned int v5 = (unsigned char *)(v76 & v20);
                                  if (v9 <= 3)
                                  {
                                    unsigned int v89 = ((1 << (8 * v9)) + 1) >> (8 * v9);
                                    if (v89 > 0xFFFC)
                                    {
LABEL_218:
                                      unsigned int v88 = 0x7FFFFFFF;
LABEL_219:
                                      if (v9 > 3) {
                                        goto LABEL_223;
                                      }
                                      unsigned int v90 = ((1 << (8 * v9)) + 1) >> (8 * v9);
                                      uint64_t v91 = 2;
                                      if (v90 > 0xFFFC) {
                                        uint64_t v91 = 4;
                                      }
                                      if (v90 <= 0xFC) {
LABEL_223:
                                      }
                                        uint64_t v91 = 1;
                                      size_t v25 = v91 + v9;
                                      if (v63 <= v88)
                                      {
                                        int v92 = 0;
                                      }
                                      else if (v25 <= 3)
                                      {
                                        unsigned int v94 = ((v63 - v88 + ~(-1 << (8 * v25))) >> (8 * v25)) + 1;
                                        if (HIWORD(v94))
                                        {
                                          int v92 = 4;
                                        }
                                        else if (v94 >= 0x100)
                                        {
                                          int v92 = 2;
                                        }
                                        else
                                        {
                                          int v92 = v94 > 1;
                                        }
                                      }
                                      else
                                      {
                                        int v92 = 1;
                                      }
                                      if (v88 < a2)
                                      {
                                        unsigned int v93 = ~v88 + a2;
                                        if (v25 < 4)
                                        {
                                          int v30 = (v93 >> (8 * v25)) + 1;
                                          if (v25)
                                          {
                                            int v95 = v93 & ~(-1 << (8 * v25));
                                            bzero(v5, v25);
                                            if (v25 == 3)
                                            {
                                              *(_WORD *)unsigned int v5 = v95;
                                              v5[2] = BYTE2(v95);
                                            }
                                            else if (v25 == 2)
                                            {
                                              *(_WORD *)unsigned int v5 = v95;
                                            }
                                            else
                                            {
                                              *unsigned int v5 = v95;
                                            }
                                          }
                                        }
                                        else
                                        {
                                          bzero(v5, v25);
                                          *(_DWORD *)unsigned int v5 = v93;
                                          int v30 = 1;
                                        }
                                        switch(v92)
                                        {
                                          case 1:
                                            goto LABEL_61;
                                          case 2:
                                            goto LABEL_208;
                                          case 3:
                                            goto LABEL_259;
                                          case 4:
                                            goto LABEL_257;
                                          default:
                                            return;
                                        }
                                      }
                                      switch(v92)
                                      {
                                        case 1:
LABEL_232:
                                          v5[v25] = 0;
                                          goto LABEL_243;
                                        case 2:
LABEL_241:
                                          *(_WORD *)&v5[v25] = 0;
                                          goto LABEL_243;
                                        case 3:
                                          goto LABEL_259;
                                        case 4:
LABEL_242:
                                          *(_DWORD *)&v5[v25] = 0;
                                          goto LABEL_243;
                                        default:
LABEL_243:
                                          int v96 = -a2;
                                          if (v9 > 3) {
                                            goto LABEL_246;
                                          }
                                          unsigned int v97 = ((1 << (8 * v9)) + 1) >> (8 * v9);
                                          if (v97 > 0xFFFC)
                                          {
                                            *(_DWORD *)&v5[v9] = v96;
                                          }
                                          else if (v97 > 0xFC)
                                          {
                                            *(_WORD *)&v5[v9] = v96;
                                          }
                                          else
                                          {
LABEL_246:
                                            v5[v9] = v96;
                                          }
                                          break;
                                      }
                                      return;
                                    }
                                    int v86 = v89 + 3;
                                    if (v89 > 0xFC)
                                    {
                                      char v87 = 16;
LABEL_213:
                                      unsigned int v88 = (1 << v87) - v86;
                                      if ((v88 & 0x80000000) == 0) {
                                        goto LABEL_219;
                                      }
                                      goto LABEL_218;
                                    }
                                  }
                                  else
                                  {
                                    int v86 = 4;
                                  }
                                  char v87 = 8;
                                  goto LABEL_213;
                                }
                              }
                              else
                              {
                                int v69 = 4;
                              }
                              char v70 = 8;
                              goto LABEL_163;
                            }
LABEL_153:
                            unsigned int v63 = 0x7FFFFFFF;
                            if (v9 > 3) {
                              goto LABEL_146;
                            }
                            goto LABEL_154;
                          }
                        }
                        else
                        {
                          int v61 = 4;
                        }
                        char v62 = 8;
                        goto LABEL_144;
                    }
                  }
                  uint64_t v52 = 2;
                }
                BOOL v24 = v54 > 0xFFFC;
                uint64_t v53 = 2;
                if (v24) {
                  uint64_t v53 = 4;
                }
                goto LABEL_121;
              }
              int v47 = v50 + 3;
              if (v50 > 0xFC)
              {
                char v48 = 16;
LABEL_104:
                unsigned int v49 = (1 << v48) - v47;
                if ((v49 & 0x80000000) == 0) {
                  goto LABEL_110;
                }
                goto LABEL_109;
              }
            }
            else
            {
              int v47 = 4;
            }
            char v48 = 8;
            goto LABEL_104;
          }
          int v41 = v45 + 3;
          if (v45 > 0xFC)
          {
            char v42 = 16;
LABEL_90:
            unsigned int v43 = (1 << v42) - v41;
            if ((v43 & 0x80000000) == 0) {
              goto LABEL_101;
            }
            goto LABEL_100;
          }
        }
        else
        {
          int v41 = 4;
        }
        char v42 = 8;
        goto LABEL_90;
      }
      unsigned int v44 = *(void (**)(void))(v6 + 56);
      v44();
      return;
  }
}

uint64_t type metadata completion function for AnimatedValueKeyframe.InterpolationParameters()
{
  uint64_t result = type metadata accessor for AnimatedValueKeyframe.InterpolationParameters.Mode();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

void *initializeBufferWithCopyOfBuffer for AnimatedValueKeyframe.InterpolationParameters(char *__dst, char *__src, uint64_t a3)
{
  uint64_t v4 = __dst;
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  if (*(void *)(v6 + 64) <= 0x18uLL) {
    uint64_t v7 = 24;
  }
  else {
    uint64_t v7 = *(void *)(v6 + 64);
  }
  char v8 = 8 * v7;
  if (v7 > 3
    || ((v9 = ((1 << v8) + 1) >> v8, v9 <= 0xFFFC) ? (uint64_t v10 = 2) : (uint64_t v10 = 4), v9 <= 0xFC))
  {
    uint64_t v10 = 1;
  }
  int v11 = *(_DWORD *)(v6 + 80);
  uint64_t v12 = v11 & 0xF8 | 7;
  uint64_t v13 = ~v12;
  uint64_t v14 = (v10 + v7 + v12) & ~v12;
  if (v7 > 3)
  {
    unint64_t v15 = v7 + v14 + 1;
    if ((v11 & 0x1000F8) == 0 && v15 < 0x19) {
      goto LABEL_23;
    }
    goto LABEL_36;
  }
  unsigned int v17 = ((1 << v8) + 1) >> v8;
  if (v17 > 0xFFFC)
  {
    unint64_t v24 = v7 + v14 + 4;
    if ((v11 & 0x1000F8) == 0 && v24 < 0x19)
    {
      unsigned int v22 = *(_DWORD *)&__src[v7];
      unsigned int v23 = v22 - 3;
      if (v22 < 3) {
        goto LABEL_52;
      }
      goto LABEL_39;
    }
    goto LABEL_36;
  }
  int v18 = v11 & 0x1000F8;
  uint64_t v19 = v7 + v14;
  if (v17 <= 0xFC)
  {
    unint64_t v20 = v19 + 1;
    if (v18) {
      BOOL v21 = 1;
    }
    else {
      BOOL v21 = v20 >= 0x19;
    }
    if (!v21)
    {
LABEL_23:
      unsigned int v22 = __src[v7];
      unsigned int v23 = v22 - 3;
      if (v22 < 3) {
        goto LABEL_52;
      }
      goto LABEL_39;
    }
LABEL_36:
    uint64_t v28 = *(void *)__src;
    *uint64_t v4 = *(void *)__src;
    uint64_t v4 = (void *)(v28 + ((v12 + 16) & v13));
    swift_retain();
    return v4;
  }
  unint64_t v26 = v19 + 2;
  if (v18) {
    BOOL v27 = 1;
  }
  else {
    BOOL v27 = v26 >= 0x19;
  }
  if (v27) {
    goto LABEL_36;
  }
  unsigned int v22 = *(unsigned __int16 *)&__src[v7];
  unsigned int v23 = v22 - 3;
  if (v22 < 3) {
    goto LABEL_52;
  }
LABEL_39:
  if (v7 <= 3) {
    uint64_t v30 = v7;
  }
  else {
    uint64_t v30 = 4;
  }
  switch(v30)
  {
    case 1:
      int v31 = *__src;
      if (v7 < 4) {
        goto LABEL_50;
      }
      goto LABEL_51;
    case 2:
      int v31 = *(unsigned __int16 *)__src;
      if (v7 >= 4) {
        goto LABEL_51;
      }
      goto LABEL_50;
    case 3:
      int v31 = *(unsigned __int16 *)__src | (__src[2] << 16);
      if (v7 >= 4) {
        goto LABEL_51;
      }
      goto LABEL_50;
    case 4:
      int v31 = *(_DWORD *)__src;
      if (v7 < 4) {
LABEL_50:
      }
        v31 |= v23 << v8;
LABEL_51:
      unsigned int v22 = v31 + 3;
      break;
    default:
      break;
  }
LABEL_52:
  if (v22 == 2)
  {
    (*(void (**)(char *, char *, uint64_t))(v6 + 16))(__dst, __src, v5);
    if (v7 <= 3)
    {
      unsigned int v32 = ((1 << v8) + 1) >> v8;
      if (v32 > 0xFFFC)
      {
        int v34 = 2;
        goto LABEL_82;
      }
      if (v32 > 0xFC)
      {
        LOWORD(v34) = 2;
        goto LABEL_85;
      }
    }
    char v33 = 2;
    goto LABEL_66;
  }
  if (v22 != 1)
  {
    if (v22)
    {
      if (v7 > 3) {
        goto LABEL_72;
      }
      unsigned int v38 = ((1 << v8) + 1) >> v8;
      uint64_t v39 = 2;
      if (v38 > 0xFFFC) {
        uint64_t v39 = 4;
      }
      if (v38 <= 0xFC) {
LABEL_72:
      }
        uint64_t v39 = 1;
      memcpy(__dst, __src, v39 + v7);
      if (v7 >= 4) {
        goto LABEL_67;
      }
      goto LABEL_74;
    }
    *(_OWORD *)__dst = *(_OWORD *)__src;
    *((void *)__dst + 2) = *((void *)__src + 2);
    if (v7 > 3) {
      goto LABEL_56;
    }
    unsigned int v32 = ((1 << v8) + 1) >> v8;
    if (v32 > 0xFFFC)
    {
      *(_DWORD *)&__dst[v7] = 0;
    }
    else
    {
      if (v32 <= 0xFC)
      {
LABEL_56:
        __dst[v7] = 0;
        if (v7 >= 4) {
          goto LABEL_67;
        }
        goto LABEL_74;
      }
      *(_WORD *)&__dst[v7] = 0;
    }
LABEL_86:
    BOOL v43 = v32 > 0xFFFC;
    uint64_t v41 = 2;
    if (v43) {
      uint64_t v41 = 4;
    }
    goto LABEL_88;
  }
  (*(void (**)(char *, char *, uint64_t))(v6 + 16))(__dst, __src, v5);
  if (v7 > 3) {
    goto LABEL_65;
  }
  int v34 = 1;
  unsigned int v32 = ((1 << v8) + 1) >> v8;
  if (v32 > 0xFFFC)
  {
LABEL_82:
    *(_DWORD *)((char *)v4 + v7) = v34;
    goto LABEL_86;
  }
  if (v32 > 0xFC)
  {
LABEL_85:
    *(_WORD *)((char *)v4 + v7) = v34;
    goto LABEL_86;
  }
LABEL_65:
  char v33 = 1;
LABEL_66:
  *((unsigned char *)v4 + v7) = v33;
  if (v7 >= 4)
  {
LABEL_67:
    int v35 = (void *)(((unint64_t)v4 + v7 + 8) & v13);
    char v36 = (void *)((unint64_t)&__src[v7 + 8] & v13);
    unsigned int v37 = (unsigned __int8 *)v36 + v7;
LABEL_91:
    unsigned int v45 = *v37;
    unsigned int v46 = v45 - 3;
    if (v45 < 3) {
      goto LABEL_106;
    }
    goto LABEL_96;
  }
LABEL_74:
  unsigned int v40 = ((1 << v8) + 1) >> v8;
  uint64_t v41 = 2;
  if (v40 > 0xFFFC) {
    uint64_t v41 = 4;
  }
  if (v40 < 0xFD)
  {
    uint64_t v42 = v7 + 8;
    goto LABEL_89;
  }
LABEL_88:
  uint64_t v42 = v41 + v7 + 7;
LABEL_89:
  int v35 = (void *)(((unint64_t)v4 + v42) & v13);
  char v36 = (void *)((unint64_t)&__src[v42] & v13);
  unsigned int v37 = (unsigned __int8 *)v36 + v7;
  unsigned int v44 = ((1 << v8) + 1) >> v8;
  if (v44 > 0xFFFC)
  {
    unsigned int v45 = *(_DWORD *)v37;
    unsigned int v46 = v45 - 3;
    if (v45 < 3) {
      goto LABEL_106;
    }
    goto LABEL_96;
  }
  if (v44 <= 0xFC) {
    goto LABEL_91;
  }
  unsigned int v45 = *(unsigned __int16 *)v37;
  unsigned int v46 = v45 - 3;
  if (v45 < 3) {
    goto LABEL_106;
  }
LABEL_96:
  if (v7 <= 3) {
    uint64_t v47 = v7;
  }
  else {
    uint64_t v47 = 4;
  }
  switch(v47)
  {
    case 1:
      int v48 = *(unsigned __int8 *)v36;
      goto LABEL_104;
    case 2:
      int v48 = *(unsigned __int16 *)v36;
      goto LABEL_104;
    case 3:
      int v48 = *(unsigned __int16 *)v36 | (*((unsigned __int8 *)v36 + 2) << 16);
      goto LABEL_104;
    case 4:
      int v48 = *(_DWORD *)v36;
LABEL_104:
      int v49 = (v48 | (v46 << v8)) + 3;
      unsigned int v45 = v48 + 3;
      if (v7 < 4) {
        unsigned int v45 = v49;
      }
      break;
    default:
      break;
  }
LABEL_106:
  if (v45 == 2)
  {
    (*(void (**)(void *))(v6 + 16))(v35);
    if (v7 <= 3)
    {
      unsigned int v51 = ((1 << v8) + 1) >> v8;
      if (v51 > 0xFFFC)
      {
        int v52 = 2;
        goto LABEL_129;
      }
      if (v51 > 0xFC)
      {
        LOWORD(v52) = 2;
        goto LABEL_132;
      }
    }
    *((unsigned char *)v35 + v7) = 2;
    return v4;
  }
  if (v45 == 1)
  {
    (*(void (**)(void *))(v6 + 16))(v35);
    if (v7 > 3)
    {
LABEL_118:
      *((unsigned char *)v35 + v7) = 1;
      return v4;
    }
    int v52 = 1;
    unsigned int v53 = ((1 << v8) + 1) >> v8;
    if (v53 <= 0xFFFC)
    {
      if (v53 <= 0xFC) {
        goto LABEL_118;
      }
LABEL_132:
      *(_WORD *)((char *)v35 + v7) = v52;
      return v4;
    }
LABEL_129:
    *(_DWORD *)((char *)v35 + v7) = v52;
    return v4;
  }
  if (v45)
  {
    if (v7 > 3) {
      goto LABEL_123;
    }
    unsigned int v54 = ((1 << v8) + 1) >> v8;
    uint64_t v55 = 2;
    if (v54 > 0xFFFC) {
      uint64_t v55 = 4;
    }
    if (v54 <= 0xFC) {
LABEL_123:
    }
      uint64_t v55 = 1;
    memcpy(v35, v36, v55 + v7);
  }
  else
  {
    long long v50 = *(_OWORD *)v36;
    v35[2] = v36[2];
    *(_OWORD *)int v35 = v50;
    if (v7 > 3) {
      goto LABEL_110;
    }
    unsigned int v56 = ((1 << v8) + 1) >> v8;
    if (v56 > 0xFFFC)
    {
      *(_DWORD *)((char *)v35 + v7) = 0;
      return v4;
    }
    if (v56 <= 0xFC) {
LABEL_110:
    }
      *((unsigned char *)v35 + v7) = 0;
    else {
      *(_WORD *)((char *)v35 + v7) = 0;
    }
  }
  return v4;
}

unsigned __int8 *destroy for AnimatedValueKeyframe.InterpolationParameters(unsigned __int8 *a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(*(void *)(a2 + 16) - 8);
  if (*(void *)(v3 + 64) <= 0x18uLL) {
    uint64_t v4 = 24;
  }
  else {
    uint64_t v4 = *(void *)(v3 + 64);
  }
  char v5 = 8 * v4;
  if (v4 > 3) {
    goto LABEL_5;
  }
  unsigned int v7 = ((1 << v5) + 1) >> v5;
  if (v7 > 0xFFFC)
  {
    unsigned int v6 = *(_DWORD *)&a1[v4];
  }
  else
  {
    if (v7 <= 0xFC)
    {
LABEL_5:
      unsigned int v6 = a1[v4];
      goto LABEL_10;
    }
    unsigned int v6 = *(unsigned __int16 *)&a1[v4];
  }
LABEL_10:
  unsigned int v8 = v6 - 3;
  if (v6 >= 3)
  {
    if (v4 <= 3) {
      uint64_t v9 = v4;
    }
    else {
      uint64_t v9 = 4;
    }
    switch(v9)
    {
      case 1:
        int v10 = *a1;
        goto LABEL_19;
      case 2:
        int v10 = *(unsigned __int16 *)a1;
        goto LABEL_19;
      case 3:
        int v10 = *(unsigned __int16 *)a1 | (a1[2] << 16);
        goto LABEL_19;
      case 4:
        int v10 = *(_DWORD *)a1;
LABEL_19:
        int v11 = (v10 | (v8 << v5)) + 3;
        unsigned int v6 = v10 + 3;
        if (v4 < 4) {
          unsigned int v6 = v11;
        }
        break;
      default:
        break;
    }
  }
  if (v6 - 1 <= 1)
  {
    uint64_t v23 = *(void *)(*(void *)(a2 + 16) - 8);
    (*(void (**)(unsigned __int8 *, void))(v3 + 8))(a1, *(void *)(a2 + 16));
    uint64_t v3 = v23;
  }
  if (v4 > 3) {
    goto LABEL_27;
  }
  unsigned int v12 = ((1 << v5) + 1) >> v5;
  uint64_t v13 = 2;
  if (v12 > 0xFFFC) {
    uint64_t v13 = 4;
  }
  if (v12 <= 0xFC) {
LABEL_27:
  }
    uint64_t v13 = 1;
  uint64_t v14 = *(_DWORD *)(v3 + 80) & 0xF8 | 7;
  uint64_t result = (unsigned __int8 *)((unint64_t)&a1[v4 + v13 + v14] & ~v14);
  if (v4 > 3) {
    goto LABEL_29;
  }
  unsigned int v17 = ((1 << v5) + 1) >> v5;
  if (v17 > 0xFFFC)
  {
    unsigned int v16 = *(_DWORD *)&result[v4];
  }
  else
  {
    if (v17 <= 0xFC)
    {
LABEL_29:
      unsigned int v16 = result[v4];
      goto LABEL_34;
    }
    unsigned int v16 = *(unsigned __int16 *)&result[v4];
  }
LABEL_34:
  unsigned int v18 = v16 - 3;
  if (v16 >= 3)
  {
    if (v4 <= 3) {
      uint64_t v19 = v4;
    }
    else {
      uint64_t v19 = 4;
    }
    switch(v19)
    {
      case 1:
        int v20 = *result;
        goto LABEL_43;
      case 2:
        int v20 = *(unsigned __int16 *)result;
        goto LABEL_43;
      case 3:
        int v20 = *(unsigned __int16 *)result | (result[2] << 16);
        goto LABEL_43;
      case 4:
        int v20 = *(_DWORD *)result;
LABEL_43:
        int v21 = (v20 | (v18 << v5)) + 3;
        unsigned int v16 = v20 + 3;
        if (v4 < 4) {
          unsigned int v16 = v21;
        }
        break;
      default:
        break;
    }
  }
  if (v16 - 1 <= 1)
  {
    unsigned int v22 = *(uint64_t (**)(void))(v3 + 8);
    return (unsigned __int8 *)v22();
  }
  return result;
}

unsigned char *initializeWithCopy for AnimatedValueKeyframe.InterpolationParameters(unsigned char *__dst, void *__src, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  if (*(void *)(v6 + 64) <= 0x18uLL) {
    uint64_t v7 = 24;
  }
  else {
    uint64_t v7 = *(void *)(v6 + 64);
  }
  char v8 = 8 * v7;
  if (v7 > 3) {
    goto LABEL_7;
  }
  unsigned int v9 = ((1 << v8) + 1) >> v8;
  if (v9 > 0xFFFC)
  {
    unsigned int v10 = *(_DWORD *)((char *)__src + v7);
    unsigned int v11 = v10 - 3;
    if (v10 < 3) {
      goto LABEL_25;
    }
    goto LABEL_12;
  }
  if (v9 > 0xFC)
  {
    unsigned int v10 = *(unsigned __int16 *)((char *)__src + v7);
    unsigned int v11 = v10 - 3;
    if (v10 < 3) {
      goto LABEL_25;
    }
  }
  else
  {
LABEL_7:
    unsigned int v10 = *((unsigned __int8 *)__src + v7);
    unsigned int v11 = v10 - 3;
    if (v10 < 3) {
      goto LABEL_25;
    }
  }
LABEL_12:
  if (v7 <= 3) {
    uint64_t v12 = v7;
  }
  else {
    uint64_t v12 = 4;
  }
  switch(v12)
  {
    case 1:
      int v13 = *(unsigned __int8 *)__src;
      if (v7 < 4) {
        goto LABEL_23;
      }
      goto LABEL_24;
    case 2:
      int v13 = *(unsigned __int16 *)__src;
      if (v7 >= 4) {
        goto LABEL_24;
      }
      goto LABEL_23;
    case 3:
      int v13 = *(unsigned __int16 *)__src | (*((unsigned __int8 *)__src + 2) << 16);
      if (v7 >= 4) {
        goto LABEL_24;
      }
      goto LABEL_23;
    case 4:
      int v13 = *(_DWORD *)__src;
      if (v7 < 4) {
LABEL_23:
      }
        v13 |= v11 << v8;
LABEL_24:
      unsigned int v10 = v13 + 3;
      break;
    default:
      break;
  }
LABEL_25:
  switch(v10)
  {
    case 2u:
      (*(void (**)(unsigned char *, void *, uint64_t))(v6 + 16))(__dst, __src, v5);
      if (v7 <= 3)
      {
        unsigned int v14 = ((1 << v8) + 1) >> v8;
        if (v14 > 0xFFFC)
        {
          int v16 = 2;
          goto LABEL_55;
        }
        if (v14 > 0xFC)
        {
          LOWORD(v16) = 2;
          goto LABEL_58;
        }
      }
      char v15 = 2;
      goto LABEL_39;
    case 1u:
      (*(void (**)(unsigned char *, void *, uint64_t))(v6 + 16))(__dst, __src, v5);
      if (v7 > 3)
      {
LABEL_38:
        char v15 = 1;
LABEL_39:
        __dst[v7] = v15;
        if (v7 > 3) {
          goto LABEL_50;
        }
        goto LABEL_47;
      }
      int v16 = 1;
      unsigned int v14 = ((1 << v8) + 1) >> v8;
      if (v14 <= 0xFFFC)
      {
        if (v14 <= 0xFC) {
          goto LABEL_38;
        }
LABEL_58:
        *(_WORD *)&__dst[v7] = v16;
        goto LABEL_59;
      }
LABEL_55:
      *(_DWORD *)&__dst[v7] = v16;
      goto LABEL_59;
    case 0u:
      *(_OWORD *)__dst = *(_OWORD *)__src;
      *((void *)__dst + 2) = __src[2];
      if (v7 > 3) {
        goto LABEL_29;
      }
      unsigned int v14 = ((1 << v8) + 1) >> v8;
      if (v14 > 0xFFFC)
      {
        *(_DWORD *)&__dst[v7] = 0;
      }
      else
      {
        if (v14 <= 0xFC)
        {
LABEL_29:
          __dst[v7] = 0;
          if (v7 > 3)
          {
LABEL_50:
            uint64_t v20 = 1;
            goto LABEL_61;
          }
          goto LABEL_47;
        }
        *(_WORD *)&__dst[v7] = 0;
      }
LABEL_59:
      BOOL v21 = v14 > 0xFFFC;
      uint64_t v20 = 2;
      if (v21) {
        uint64_t v20 = 4;
      }
      goto LABEL_61;
  }
  if (v7 > 3) {
    goto LABEL_45;
  }
  unsigned int v17 = ((1 << v8) + 1) >> v8;
  uint64_t v18 = 2;
  if (v17 > 0xFFFC) {
    uint64_t v18 = 4;
  }
  if (v17 <= 0xFC) {
LABEL_45:
  }
    uint64_t v18 = 1;
  memcpy(__dst, __src, v18 + v7);
  if (v7 > 3) {
    goto LABEL_50;
  }
LABEL_47:
  unsigned int v19 = ((1 << v8) + 1) >> v8;
  uint64_t v20 = 2;
  if (v19 > 0xFFFC) {
    uint64_t v20 = 4;
  }
  if (v19 <= 0xFC) {
    goto LABEL_50;
  }
LABEL_61:
  uint64_t v22 = *(_DWORD *)(v6 + 80) & 0xF8 | 7;
  uint64_t v23 = v20 + v7 + v22;
  unint64_t v24 = (unint64_t)&__dst[v23];
  size_t v25 = (void *)(((unint64_t)__src + v23) & ~v22);
  if (v7 > 3)
  {
LABEL_64:
    unsigned int v27 = *((unsigned __int8 *)v25 + v7);
    goto LABEL_67;
  }
  unsigned int v26 = ((1 << v8) + 1) >> v8;
  if (v26 > 0xFFFC)
  {
    unsigned int v27 = *(_DWORD *)((char *)v25 + v7);
  }
  else
  {
    if (v26 <= 0xFC) {
      goto LABEL_64;
    }
    unsigned int v27 = *(unsigned __int16 *)((char *)v25 + v7);
  }
LABEL_67:
  uint64_t v28 = (void *)(v24 & ~v22);
  unsigned int v29 = v27 - 3;
  if (v27 >= 3)
  {
    if (v7 <= 3) {
      uint64_t v30 = v7;
    }
    else {
      uint64_t v30 = 4;
    }
    switch(v30)
    {
      case 1:
        int v31 = *(unsigned __int8 *)v25;
        goto LABEL_76;
      case 2:
        int v31 = *(unsigned __int16 *)v25;
        goto LABEL_76;
      case 3:
        int v31 = *(unsigned __int16 *)v25 | (*((unsigned __int8 *)v25 + 2) << 16);
        goto LABEL_76;
      case 4:
        int v31 = *(_DWORD *)v25;
LABEL_76:
        int v32 = (v31 | (v29 << v8)) + 3;
        unsigned int v27 = v31 + 3;
        if (v7 < 4) {
          unsigned int v27 = v32;
        }
        break;
      default:
        break;
    }
  }
  if (v27 == 2)
  {
    (*(void (**)(void *))(v6 + 16))(v28);
    if (v7 <= 3)
    {
      unsigned int v34 = ((1 << v8) + 1) >> v8;
      if (v34 > 0xFFFC)
      {
        int v35 = 2;
        goto LABEL_101;
      }
      if (v34 > 0xFC)
      {
        LOWORD(v35) = 2;
        goto LABEL_104;
      }
    }
    *((unsigned char *)v28 + v7) = 2;
    return __dst;
  }
  if (v27 == 1)
  {
    (*(void (**)(void *))(v6 + 16))(v28);
    if (v7 > 3)
    {
LABEL_90:
      *((unsigned char *)v28 + v7) = 1;
      return __dst;
    }
    int v35 = 1;
    unsigned int v36 = ((1 << v8) + 1) >> v8;
    if (v36 <= 0xFFFC)
    {
      if (v36 <= 0xFC) {
        goto LABEL_90;
      }
LABEL_104:
      *(_WORD *)((char *)v28 + v7) = v35;
      return __dst;
    }
LABEL_101:
    *(_DWORD *)((char *)v28 + v7) = v35;
    return __dst;
  }
  if (v27)
  {
    if (v7 > 3) {
      goto LABEL_95;
    }
    unsigned int v37 = ((1 << v8) + 1) >> v8;
    uint64_t v38 = 2;
    if (v37 > 0xFFFC) {
      uint64_t v38 = 4;
    }
    if (v37 <= 0xFC) {
LABEL_95:
    }
      uint64_t v38 = 1;
    memcpy(v28, v25, v38 + v7);
  }
  else
  {
    long long v33 = *(_OWORD *)v25;
    v28[2] = v25[2];
    *(_OWORD *)uint64_t v28 = v33;
    if (v7 > 3) {
      goto LABEL_82;
    }
    unsigned int v39 = ((1 << v8) + 1) >> v8;
    if (v39 > 0xFFFC)
    {
      *(_DWORD *)((char *)v28 + v7) = 0;
      return __dst;
    }
    if (v39 <= 0xFC) {
LABEL_82:
    }
      *((unsigned char *)v28 + v7) = 0;
    else {
      *(_WORD *)((char *)v28 + v7) = 0;
    }
  }
  return __dst;
}

char *assignWithCopy for AnimatedValueKeyframe.InterpolationParameters(char *__dst, char *__src, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  if (__dst == __src) {
    goto LABEL_75;
  }
  if (*(void *)(v6 + 64) <= 0x18uLL) {
    uint64_t v7 = 24;
  }
  else {
    uint64_t v7 = *(void *)(v6 + 64);
  }
  char v8 = 8 * v7;
  if (v7 > 3) {
    goto LABEL_8;
  }
  unsigned int v9 = ((1 << v8) + 1) >> v8;
  if (v9 > 0xFFFC)
  {
    unsigned int v10 = *(_DWORD *)&__dst[v7];
    unsigned int v11 = v10 - 3;
    if (v10 < 3) {
      goto LABEL_25;
    }
    goto LABEL_13;
  }
  if (v9 <= 0xFC)
  {
LABEL_8:
    unsigned int v10 = __dst[v7];
    unsigned int v11 = v10 - 3;
    if (v10 < 3) {
      goto LABEL_25;
    }
LABEL_13:
    if (v7 <= 3) {
      uint64_t v12 = v7;
    }
    else {
      uint64_t v12 = 4;
    }
    switch(v12)
    {
      case 1:
        int v13 = *__dst;
        if (v7 < 4) {
          goto LABEL_20;
        }
        goto LABEL_24;
      case 2:
        int v13 = *(unsigned __int16 *)__dst;
        if (v7 < 4) {
          goto LABEL_20;
        }
        goto LABEL_24;
      case 3:
        int v13 = *(unsigned __int16 *)__dst | (__dst[2] << 16);
        if (v7 < 4) {
          goto LABEL_20;
        }
        goto LABEL_24;
      case 4:
        int v13 = *(_DWORD *)__dst;
        if (v7 < 4) {
LABEL_20:
        }
          unsigned int v10 = (v13 | (v11 << v8)) + 3;
        else {
LABEL_24:
        }
          unsigned int v10 = v13 + 3;
        break;
      default:
        goto LABEL_25;
    }
    goto LABEL_25;
  }
  unsigned int v10 = *(unsigned __int16 *)&__dst[v7];
  unsigned int v11 = v10 - 3;
  if (v10 >= 3) {
    goto LABEL_13;
  }
LABEL_25:
  if (v10 - 1 <= 1) {
    (*(void (**)(char *, uint64_t))(v6 + 8))(__dst, v5);
  }
  if (v7 > 3) {
    goto LABEL_30;
  }
  unsigned int v14 = ((1 << v8) + 1) >> v8;
  if (v14 > 0xFFFC)
  {
    unsigned int v15 = *(_DWORD *)&__src[v7];
    unsigned int v16 = v15 - 3;
    if (v15 < 3) {
      goto LABEL_48;
    }
    goto LABEL_35;
  }
  if (v14 > 0xFC)
  {
    unsigned int v15 = *(unsigned __int16 *)&__src[v7];
    unsigned int v16 = v15 - 3;
    if (v15 < 3) {
      goto LABEL_48;
    }
  }
  else
  {
LABEL_30:
    unsigned int v15 = __src[v7];
    unsigned int v16 = v15 - 3;
    if (v15 < 3) {
      goto LABEL_48;
    }
  }
LABEL_35:
  if (v7 <= 3) {
    uint64_t v17 = v7;
  }
  else {
    uint64_t v17 = 4;
  }
  switch(v17)
  {
    case 1:
      int v18 = *__src;
      if (v7 < 4) {
        goto LABEL_46;
      }
      goto LABEL_47;
    case 2:
      int v18 = *(unsigned __int16 *)__src;
      if (v7 >= 4) {
        goto LABEL_47;
      }
      goto LABEL_46;
    case 3:
      int v18 = *(unsigned __int16 *)__src | (__src[2] << 16);
      if (v7 >= 4) {
        goto LABEL_47;
      }
      goto LABEL_46;
    case 4:
      int v18 = *(_DWORD *)__src;
      if (v7 < 4) {
LABEL_46:
      }
        v18 |= v16 << v8;
LABEL_47:
      unsigned int v15 = v18 + 3;
      break;
    default:
      break;
  }
LABEL_48:
  if (v15 == 2)
  {
    (*(void (**)(char *, char *, uint64_t))(v6 + 16))(__dst, __src, v5);
    if (v7 <= 3)
    {
      unsigned int v20 = ((1 << v8) + 1) >> v8;
      if (v20 > 0xFFFC)
      {
        int v21 = 2;
        goto LABEL_71;
      }
      if (v20 > 0xFC)
      {
        LOWORD(v21) = 2;
        goto LABEL_74;
      }
    }
    __dst[v7] = 2;
    goto LABEL_75;
  }
  if (v15 == 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v6 + 16))(__dst, __src, v5);
    if (v7 > 3)
    {
LABEL_60:
      __dst[v7] = 1;
      goto LABEL_75;
    }
    int v21 = 1;
    unsigned int v22 = ((1 << v8) + 1) >> v8;
    if (v22 <= 0xFFFC)
    {
      if (v22 <= 0xFC) {
        goto LABEL_60;
      }
LABEL_74:
      *(_WORD *)&__dst[v7] = v21;
      goto LABEL_75;
    }
LABEL_71:
    *(_DWORD *)&__dst[v7] = v21;
    goto LABEL_75;
  }
  if (v15)
  {
    if (v7 > 3) {
      goto LABEL_65;
    }
    unsigned int v23 = ((1 << v8) + 1) >> v8;
    uint64_t v24 = 2;
    if (v23 > 0xFFFC) {
      uint64_t v24 = 4;
    }
    if (v23 <= 0xFC) {
LABEL_65:
    }
      uint64_t v24 = 1;
    memcpy(__dst, __src, v24 + v7);
    goto LABEL_75;
  }
  long long v19 = *(_OWORD *)__src;
  *((void *)__dst + 2) = *((void *)__src + 2);
  *(_OWORD *)__dst = v19;
  if (v7 > 3) {
    goto LABEL_52;
  }
  unsigned int v25 = ((1 << v8) + 1) >> v8;
  if (v25 > 0xFFFC)
  {
    *(_DWORD *)&__dst[v7] = 0;
  }
  else
  {
    if (v25 <= 0xFC)
    {
LABEL_52:
      __dst[v7] = 0;
      goto LABEL_75;
    }
    *(_WORD *)&__dst[v7] = 0;
  }
LABEL_75:
  uint64_t v26 = v6;
  if (*(void *)(v6 + 64) <= 0x18uLL) {
    uint64_t v27 = 24;
  }
  else {
    uint64_t v27 = *(void *)(v6 + 64);
  }
  if (v27 > 3) {
    goto LABEL_82;
  }
  unsigned int v28 = ((1 << (8 * v27)) + 1) >> (8 * v27);
  uint64_t v29 = 2;
  if (v28 > 0xFFFC) {
    uint64_t v29 = 4;
  }
  if (v28 <= 0xFC) {
LABEL_82:
  }
    uint64_t v29 = 1;
  uint64_t v30 = *(_DWORD *)(v6 + 80) & 0xF8 | 7;
  uint64_t v31 = v29 + v27 + v30;
  int v32 = (void *)((unint64_t)&__dst[v31] & ~v30);
  long long v33 = (void *)((unint64_t)&__src[v31] & ~v30);
  if (v32 == v33) {
    return __dst;
  }
  if (v27 > 3) {
    goto LABEL_87;
  }
  unsigned int v34 = ((1 << (8 * v27)) + 1) >> (8 * v27);
  if (v34 > 0xFFFC)
  {
    unsigned int v35 = *(_DWORD *)((char *)v32 + v27);
    unsigned int v36 = v35 - 3;
    if (v35 < 3) {
      goto LABEL_102;
    }
    goto LABEL_92;
  }
  if (v34 <= 0xFC)
  {
LABEL_87:
    unsigned int v35 = *((unsigned __int8 *)v32 + v27);
    unsigned int v36 = v35 - 3;
    if (v35 < 3) {
      goto LABEL_102;
    }
LABEL_92:
    if (v27 <= 3) {
      uint64_t v37 = v27;
    }
    else {
      uint64_t v37 = 4;
    }
    switch(v37)
    {
      case 1:
        int v38 = *(unsigned __int8 *)v32;
        goto LABEL_100;
      case 2:
        int v38 = *(unsigned __int16 *)v32;
        goto LABEL_100;
      case 3:
        int v38 = *(unsigned __int16 *)v32 | (*((unsigned __int8 *)v32 + 2) << 16);
        goto LABEL_100;
      case 4:
        int v38 = *(_DWORD *)v32;
LABEL_100:
        int v39 = (v38 | (v36 << (8 * v27))) + 3;
        unsigned int v35 = v38 + 3;
        if (v27 < 4) {
          unsigned int v35 = v39;
        }
        break;
      default:
        goto LABEL_102;
    }
    goto LABEL_102;
  }
  unsigned int v35 = *(unsigned __int16 *)((char *)v32 + v27);
  unsigned int v36 = v35 - 3;
  if (v35 >= 3) {
    goto LABEL_92;
  }
LABEL_102:
  if (v35 - 1 <= 1) {
    (*(void (**)(void *, uint64_t))(v26 + 8))(v32, v5);
  }
  if (v27 > 3) {
    goto LABEL_107;
  }
  unsigned int v40 = ((1 << (8 * v27)) + 1) >> (8 * v27);
  if (v40 > 0xFFFC)
  {
    unsigned int v41 = *(_DWORD *)((char *)v33 + v27);
    unsigned int v42 = v41 - 3;
    if (v41 < 3) {
      goto LABEL_122;
    }
    goto LABEL_112;
  }
  if (v40 > 0xFC)
  {
    unsigned int v41 = *(unsigned __int16 *)((char *)v33 + v27);
    unsigned int v42 = v41 - 3;
    if (v41 < 3) {
      goto LABEL_122;
    }
  }
  else
  {
LABEL_107:
    unsigned int v41 = *((unsigned __int8 *)v33 + v27);
    unsigned int v42 = v41 - 3;
    if (v41 < 3) {
      goto LABEL_122;
    }
  }
LABEL_112:
  if (v27 <= 3) {
    uint64_t v43 = v27;
  }
  else {
    uint64_t v43 = 4;
  }
  switch(v43)
  {
    case 1:
      int v44 = *(unsigned __int8 *)v33;
      goto LABEL_120;
    case 2:
      int v44 = *(unsigned __int16 *)v33;
      goto LABEL_120;
    case 3:
      int v44 = *(unsigned __int16 *)v33 | (*((unsigned __int8 *)v33 + 2) << 16);
      goto LABEL_120;
    case 4:
      int v44 = *(_DWORD *)v33;
LABEL_120:
      int v45 = (v44 | (v42 << (8 * v27))) + 3;
      unsigned int v41 = v44 + 3;
      if (v27 < 4) {
        unsigned int v41 = v45;
      }
      break;
    default:
      break;
  }
LABEL_122:
  if (v41 == 2)
  {
    (*(void (**)(void *, void *, uint64_t))(v26 + 16))(v32, v33, v5);
    if (v27 <= 3)
    {
      unsigned int v47 = ((1 << (8 * v27)) + 1) >> (8 * v27);
      if (v47 > 0xFFFC)
      {
        int v48 = 2;
        goto LABEL_145;
      }
      if (v47 > 0xFC)
      {
        LOWORD(v48) = 2;
        goto LABEL_148;
      }
    }
    *((unsigned char *)v32 + v27) = 2;
    return __dst;
  }
  if (v41 == 1)
  {
    (*(void (**)(void *, void *, uint64_t))(v26 + 16))(v32, v33, v5);
    if (v27 > 3)
    {
LABEL_134:
      *((unsigned char *)v32 + v27) = 1;
      return __dst;
    }
    int v48 = 1;
    unsigned int v49 = ((1 << (8 * v27)) + 1) >> (8 * v27);
    if (v49 <= 0xFFFC)
    {
      if (v49 <= 0xFC) {
        goto LABEL_134;
      }
LABEL_148:
      *(_WORD *)((char *)v32 + v27) = v48;
      return __dst;
    }
LABEL_145:
    *(_DWORD *)((char *)v32 + v27) = v48;
    return __dst;
  }
  if (v41)
  {
    if (v27 > 3) {
      goto LABEL_139;
    }
    unsigned int v50 = ((1 << (8 * v27)) + 1) >> (8 * v27);
    uint64_t v51 = 2;
    if (v50 > 0xFFFC) {
      uint64_t v51 = 4;
    }
    if (v50 <= 0xFC) {
LABEL_139:
    }
      uint64_t v51 = 1;
    memcpy(v32, v33, v51 + v27);
  }
  else
  {
    long long v46 = *(_OWORD *)v33;
    v32[2] = v33[2];
    *(_OWORD *)int v32 = v46;
    if (v27 > 3) {
      goto LABEL_126;
    }
    unsigned int v52 = ((1 << (8 * v27)) + 1) >> (8 * v27);
    if (v52 > 0xFFFC)
    {
      *(_DWORD *)((char *)v32 + v27) = 0;
      return __dst;
    }
    if (v52 <= 0xFC) {
LABEL_126:
    }
      *((unsigned char *)v32 + v27) = 0;
    else {
      *(_WORD *)((char *)v32 + v27) = 0;
    }
  }
  return __dst;
}

unsigned char *initializeWithTake for AnimatedValueKeyframe.InterpolationParameters(unsigned char *__dst, void *__src, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  if (*(void *)(v6 + 64) <= 0x18uLL) {
    uint64_t v7 = 24;
  }
  else {
    uint64_t v7 = *(void *)(v6 + 64);
  }
  char v8 = 8 * v7;
  if (v7 > 3) {
    goto LABEL_7;
  }
  unsigned int v9 = ((1 << v8) + 1) >> v8;
  if (v9 > 0xFFFC)
  {
    unsigned int v10 = *(_DWORD *)((char *)__src + v7);
    unsigned int v11 = v10 - 3;
    if (v10 < 3) {
      goto LABEL_25;
    }
    goto LABEL_12;
  }
  if (v9 > 0xFC)
  {
    unsigned int v10 = *(unsigned __int16 *)((char *)__src + v7);
    unsigned int v11 = v10 - 3;
    if (v10 < 3) {
      goto LABEL_25;
    }
  }
  else
  {
LABEL_7:
    unsigned int v10 = *((unsigned __int8 *)__src + v7);
    unsigned int v11 = v10 - 3;
    if (v10 < 3) {
      goto LABEL_25;
    }
  }
LABEL_12:
  if (v7 <= 3) {
    uint64_t v12 = v7;
  }
  else {
    uint64_t v12 = 4;
  }
  switch(v12)
  {
    case 1:
      int v13 = *(unsigned __int8 *)__src;
      if (v7 < 4) {
        goto LABEL_23;
      }
      goto LABEL_24;
    case 2:
      int v13 = *(unsigned __int16 *)__src;
      if (v7 >= 4) {
        goto LABEL_24;
      }
      goto LABEL_23;
    case 3:
      int v13 = *(unsigned __int16 *)__src | (*((unsigned __int8 *)__src + 2) << 16);
      if (v7 >= 4) {
        goto LABEL_24;
      }
      goto LABEL_23;
    case 4:
      int v13 = *(_DWORD *)__src;
      if (v7 < 4) {
LABEL_23:
      }
        v13 |= v11 << v8;
LABEL_24:
      unsigned int v10 = v13 + 3;
      break;
    default:
      break;
  }
LABEL_25:
  switch(v10)
  {
    case 2u:
      (*(void (**)(unsigned char *, void *, uint64_t))(v6 + 32))(__dst, __src, v5);
      if (v7 <= 3)
      {
        unsigned int v14 = ((1 << v8) + 1) >> v8;
        if (v14 > 0xFFFC)
        {
          int v16 = 2;
          goto LABEL_55;
        }
        if (v14 > 0xFC)
        {
          LOWORD(v16) = 2;
          goto LABEL_58;
        }
      }
      char v15 = 2;
      goto LABEL_39;
    case 1u:
      (*(void (**)(unsigned char *, void *, uint64_t))(v6 + 32))(__dst, __src, v5);
      if (v7 > 3)
      {
LABEL_38:
        char v15 = 1;
LABEL_39:
        __dst[v7] = v15;
        if (v7 > 3) {
          goto LABEL_50;
        }
        goto LABEL_47;
      }
      int v16 = 1;
      unsigned int v14 = ((1 << v8) + 1) >> v8;
      if (v14 <= 0xFFFC)
      {
        if (v14 <= 0xFC) {
          goto LABEL_38;
        }
LABEL_58:
        *(_WORD *)&__dst[v7] = v16;
        goto LABEL_59;
      }
LABEL_55:
      *(_DWORD *)&__dst[v7] = v16;
      goto LABEL_59;
    case 0u:
      *(_OWORD *)__dst = *(_OWORD *)__src;
      *((void *)__dst + 2) = __src[2];
      if (v7 > 3) {
        goto LABEL_29;
      }
      unsigned int v14 = ((1 << v8) + 1) >> v8;
      if (v14 > 0xFFFC)
      {
        *(_DWORD *)&__dst[v7] = 0;
      }
      else
      {
        if (v14 <= 0xFC)
        {
LABEL_29:
          __dst[v7] = 0;
          if (v7 > 3)
          {
LABEL_50:
            uint64_t v20 = 1;
            goto LABEL_61;
          }
          goto LABEL_47;
        }
        *(_WORD *)&__dst[v7] = 0;
      }
LABEL_59:
      BOOL v21 = v14 > 0xFFFC;
      uint64_t v20 = 2;
      if (v21) {
        uint64_t v20 = 4;
      }
      goto LABEL_61;
  }
  if (v7 > 3) {
    goto LABEL_45;
  }
  unsigned int v17 = ((1 << v8) + 1) >> v8;
  uint64_t v18 = 2;
  if (v17 > 0xFFFC) {
    uint64_t v18 = 4;
  }
  if (v17 <= 0xFC) {
LABEL_45:
  }
    uint64_t v18 = 1;
  memcpy(__dst, __src, v18 + v7);
  if (v7 > 3) {
    goto LABEL_50;
  }
LABEL_47:
  unsigned int v19 = ((1 << v8) + 1) >> v8;
  uint64_t v20 = 2;
  if (v19 > 0xFFFC) {
    uint64_t v20 = 4;
  }
  if (v19 <= 0xFC) {
    goto LABEL_50;
  }
LABEL_61:
  uint64_t v22 = *(_DWORD *)(v6 + 80) & 0xF8 | 7;
  uint64_t v23 = v20 + v7 + v22;
  unint64_t v24 = (unint64_t)&__dst[v23];
  unsigned int v25 = (void *)(((unint64_t)__src + v23) & ~v22);
  if (v7 > 3)
  {
LABEL_64:
    unsigned int v27 = *((unsigned __int8 *)v25 + v7);
    goto LABEL_67;
  }
  unsigned int v26 = ((1 << v8) + 1) >> v8;
  if (v26 > 0xFFFC)
  {
    unsigned int v27 = *(_DWORD *)((char *)v25 + v7);
  }
  else
  {
    if (v26 <= 0xFC) {
      goto LABEL_64;
    }
    unsigned int v27 = *(unsigned __int16 *)((char *)v25 + v7);
  }
LABEL_67:
  unsigned int v28 = (void *)(v24 & ~v22);
  unsigned int v29 = v27 - 3;
  if (v27 >= 3)
  {
    if (v7 <= 3) {
      uint64_t v30 = v7;
    }
    else {
      uint64_t v30 = 4;
    }
    switch(v30)
    {
      case 1:
        int v31 = *(unsigned __int8 *)v25;
        goto LABEL_76;
      case 2:
        int v31 = *(unsigned __int16 *)v25;
        goto LABEL_76;
      case 3:
        int v31 = *(unsigned __int16 *)v25 | (*((unsigned __int8 *)v25 + 2) << 16);
        goto LABEL_76;
      case 4:
        int v31 = *(_DWORD *)v25;
LABEL_76:
        int v32 = (v31 | (v29 << v8)) + 3;
        unsigned int v27 = v31 + 3;
        if (v7 < 4) {
          unsigned int v27 = v32;
        }
        break;
      default:
        break;
    }
  }
  if (v27 == 2)
  {
    (*(void (**)(void *))(v6 + 32))(v28);
    if (v7 <= 3)
    {
      unsigned int v34 = ((1 << v8) + 1) >> v8;
      if (v34 > 0xFFFC)
      {
        int v35 = 2;
        goto LABEL_101;
      }
      if (v34 > 0xFC)
      {
        LOWORD(v35) = 2;
        goto LABEL_104;
      }
    }
    *((unsigned char *)v28 + v7) = 2;
    return __dst;
  }
  if (v27 == 1)
  {
    (*(void (**)(void *))(v6 + 32))(v28);
    if (v7 > 3)
    {
LABEL_90:
      *((unsigned char *)v28 + v7) = 1;
      return __dst;
    }
    int v35 = 1;
    unsigned int v36 = ((1 << v8) + 1) >> v8;
    if (v36 <= 0xFFFC)
    {
      if (v36 <= 0xFC) {
        goto LABEL_90;
      }
LABEL_104:
      *(_WORD *)((char *)v28 + v7) = v35;
      return __dst;
    }
LABEL_101:
    *(_DWORD *)((char *)v28 + v7) = v35;
    return __dst;
  }
  if (v27)
  {
    if (v7 > 3) {
      goto LABEL_95;
    }
    unsigned int v37 = ((1 << v8) + 1) >> v8;
    uint64_t v38 = 2;
    if (v37 > 0xFFFC) {
      uint64_t v38 = 4;
    }
    if (v37 <= 0xFC) {
LABEL_95:
    }
      uint64_t v38 = 1;
    memcpy(v28, v25, v38 + v7);
  }
  else
  {
    long long v33 = *(_OWORD *)v25;
    v28[2] = v25[2];
    *(_OWORD *)unsigned int v28 = v33;
    if (v7 > 3) {
      goto LABEL_82;
    }
    unsigned int v39 = ((1 << v8) + 1) >> v8;
    if (v39 > 0xFFFC)
    {
      *(_DWORD *)((char *)v28 + v7) = 0;
      return __dst;
    }
    if (v39 <= 0xFC) {
LABEL_82:
    }
      *((unsigned char *)v28 + v7) = 0;
    else {
      *(_WORD *)((char *)v28 + v7) = 0;
    }
  }
  return __dst;
}

char *assignWithTake for AnimatedValueKeyframe.InterpolationParameters(char *__dst, char *__src, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  if (__dst == __src) {
    goto LABEL_75;
  }
  if (*(void *)(v6 + 64) <= 0x18uLL) {
    uint64_t v7 = 24;
  }
  else {
    uint64_t v7 = *(void *)(v6 + 64);
  }
  char v8 = 8 * v7;
  if (v7 > 3) {
    goto LABEL_8;
  }
  unsigned int v9 = ((1 << v8) + 1) >> v8;
  if (v9 > 0xFFFC)
  {
    unsigned int v10 = *(_DWORD *)&__dst[v7];
    unsigned int v11 = v10 - 3;
    if (v10 < 3) {
      goto LABEL_25;
    }
    goto LABEL_13;
  }
  if (v9 <= 0xFC)
  {
LABEL_8:
    unsigned int v10 = __dst[v7];
    unsigned int v11 = v10 - 3;
    if (v10 < 3) {
      goto LABEL_25;
    }
LABEL_13:
    if (v7 <= 3) {
      uint64_t v12 = v7;
    }
    else {
      uint64_t v12 = 4;
    }
    switch(v12)
    {
      case 1:
        int v13 = *__dst;
        if (v7 < 4) {
          goto LABEL_20;
        }
        goto LABEL_24;
      case 2:
        int v13 = *(unsigned __int16 *)__dst;
        if (v7 < 4) {
          goto LABEL_20;
        }
        goto LABEL_24;
      case 3:
        int v13 = *(unsigned __int16 *)__dst | (__dst[2] << 16);
        if (v7 < 4) {
          goto LABEL_20;
        }
        goto LABEL_24;
      case 4:
        int v13 = *(_DWORD *)__dst;
        if (v7 < 4) {
LABEL_20:
        }
          unsigned int v10 = (v13 | (v11 << v8)) + 3;
        else {
LABEL_24:
        }
          unsigned int v10 = v13 + 3;
        break;
      default:
        goto LABEL_25;
    }
    goto LABEL_25;
  }
  unsigned int v10 = *(unsigned __int16 *)&__dst[v7];
  unsigned int v11 = v10 - 3;
  if (v10 >= 3) {
    goto LABEL_13;
  }
LABEL_25:
  if (v10 - 1 <= 1) {
    (*(void (**)(char *, uint64_t))(v6 + 8))(__dst, v5);
  }
  if (v7 > 3) {
    goto LABEL_30;
  }
  unsigned int v14 = ((1 << v8) + 1) >> v8;
  if (v14 > 0xFFFC)
  {
    unsigned int v15 = *(_DWORD *)&__src[v7];
    unsigned int v16 = v15 - 3;
    if (v15 < 3) {
      goto LABEL_48;
    }
    goto LABEL_35;
  }
  if (v14 > 0xFC)
  {
    unsigned int v15 = *(unsigned __int16 *)&__src[v7];
    unsigned int v16 = v15 - 3;
    if (v15 < 3) {
      goto LABEL_48;
    }
  }
  else
  {
LABEL_30:
    unsigned int v15 = __src[v7];
    unsigned int v16 = v15 - 3;
    if (v15 < 3) {
      goto LABEL_48;
    }
  }
LABEL_35:
  if (v7 <= 3) {
    uint64_t v17 = v7;
  }
  else {
    uint64_t v17 = 4;
  }
  switch(v17)
  {
    case 1:
      int v18 = *__src;
      if (v7 < 4) {
        goto LABEL_46;
      }
      goto LABEL_47;
    case 2:
      int v18 = *(unsigned __int16 *)__src;
      if (v7 >= 4) {
        goto LABEL_47;
      }
      goto LABEL_46;
    case 3:
      int v18 = *(unsigned __int16 *)__src | (__src[2] << 16);
      if (v7 >= 4) {
        goto LABEL_47;
      }
      goto LABEL_46;
    case 4:
      int v18 = *(_DWORD *)__src;
      if (v7 < 4) {
LABEL_46:
      }
        v18 |= v16 << v8;
LABEL_47:
      unsigned int v15 = v18 + 3;
      break;
    default:
      break;
  }
LABEL_48:
  if (v15 == 2)
  {
    (*(void (**)(char *, char *, uint64_t))(v6 + 32))(__dst, __src, v5);
    if (v7 <= 3)
    {
      unsigned int v19 = ((1 << v8) + 1) >> v8;
      if (v19 > 0xFFFC)
      {
        int v20 = 2;
        goto LABEL_71;
      }
      if (v19 > 0xFC)
      {
        LOWORD(v20) = 2;
        goto LABEL_74;
      }
    }
    __dst[v7] = 2;
    goto LABEL_75;
  }
  if (v15 == 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v6 + 32))(__dst, __src, v5);
    if (v7 > 3)
    {
LABEL_60:
      __dst[v7] = 1;
      goto LABEL_75;
    }
    int v20 = 1;
    unsigned int v21 = ((1 << v8) + 1) >> v8;
    if (v21 <= 0xFFFC)
    {
      if (v21 <= 0xFC) {
        goto LABEL_60;
      }
LABEL_74:
      *(_WORD *)&__dst[v7] = v20;
      goto LABEL_75;
    }
LABEL_71:
    *(_DWORD *)&__dst[v7] = v20;
    goto LABEL_75;
  }
  if (v15)
  {
    if (v7 > 3) {
      goto LABEL_65;
    }
    unsigned int v22 = ((1 << v8) + 1) >> v8;
    uint64_t v23 = 2;
    if (v22 > 0xFFFC) {
      uint64_t v23 = 4;
    }
    if (v22 <= 0xFC) {
LABEL_65:
    }
      uint64_t v23 = 1;
    memcpy(__dst, __src, v23 + v7);
    goto LABEL_75;
  }
  *(_OWORD *)__dst = *(_OWORD *)__src;
  *((void *)__dst + 2) = *((void *)__src + 2);
  if (v7 > 3) {
    goto LABEL_52;
  }
  unsigned int v24 = ((1 << v8) + 1) >> v8;
  if (v24 > 0xFFFC)
  {
    *(_DWORD *)&__dst[v7] = 0;
  }
  else
  {
    if (v24 <= 0xFC)
    {
LABEL_52:
      __dst[v7] = 0;
      goto LABEL_75;
    }
    *(_WORD *)&__dst[v7] = 0;
  }
LABEL_75:
  uint64_t v25 = v6;
  if (*(void *)(v6 + 64) <= 0x18uLL) {
    uint64_t v26 = 24;
  }
  else {
    uint64_t v26 = *(void *)(v6 + 64);
  }
  if (v26 > 3) {
    goto LABEL_82;
  }
  unsigned int v27 = ((1 << (8 * v26)) + 1) >> (8 * v26);
  uint64_t v28 = 2;
  if (v27 > 0xFFFC) {
    uint64_t v28 = 4;
  }
  if (v27 <= 0xFC) {
LABEL_82:
  }
    uint64_t v28 = 1;
  uint64_t v29 = *(_DWORD *)(v6 + 80) & 0xF8 | 7;
  uint64_t v30 = v28 + v26 + v29;
  int v31 = (void *)((unint64_t)&__dst[v30] & ~v29);
  int v32 = (void *)((unint64_t)&__src[v30] & ~v29);
  if (v31 == v32) {
    return __dst;
  }
  if (v26 > 3) {
    goto LABEL_87;
  }
  unsigned int v33 = ((1 << (8 * v26)) + 1) >> (8 * v26);
  if (v33 > 0xFFFC)
  {
    unsigned int v34 = *(_DWORD *)((char *)v31 + v26);
    unsigned int v35 = v34 - 3;
    if (v34 < 3) {
      goto LABEL_102;
    }
    goto LABEL_92;
  }
  if (v33 <= 0xFC)
  {
LABEL_87:
    unsigned int v34 = *((unsigned __int8 *)v31 + v26);
    unsigned int v35 = v34 - 3;
    if (v34 < 3) {
      goto LABEL_102;
    }
LABEL_92:
    if (v26 <= 3) {
      uint64_t v36 = v26;
    }
    else {
      uint64_t v36 = 4;
    }
    switch(v36)
    {
      case 1:
        int v37 = *(unsigned __int8 *)v31;
        goto LABEL_100;
      case 2:
        int v37 = *(unsigned __int16 *)v31;
        goto LABEL_100;
      case 3:
        int v37 = *(unsigned __int16 *)v31 | (*((unsigned __int8 *)v31 + 2) << 16);
        goto LABEL_100;
      case 4:
        int v37 = *(_DWORD *)v31;
LABEL_100:
        int v38 = (v37 | (v35 << (8 * v26))) + 3;
        unsigned int v34 = v37 + 3;
        if (v26 < 4) {
          unsigned int v34 = v38;
        }
        break;
      default:
        goto LABEL_102;
    }
    goto LABEL_102;
  }
  unsigned int v34 = *(unsigned __int16 *)((char *)v31 + v26);
  unsigned int v35 = v34 - 3;
  if (v34 >= 3) {
    goto LABEL_92;
  }
LABEL_102:
  if (v34 - 1 <= 1) {
    (*(void (**)(void *, uint64_t))(v25 + 8))(v31, v5);
  }
  if (v26 > 3) {
    goto LABEL_107;
  }
  unsigned int v39 = ((1 << (8 * v26)) + 1) >> (8 * v26);
  if (v39 > 0xFFFC)
  {
    unsigned int v40 = *(_DWORD *)((char *)v32 + v26);
    unsigned int v41 = v40 - 3;
    if (v40 < 3) {
      goto LABEL_122;
    }
    goto LABEL_112;
  }
  if (v39 > 0xFC)
  {
    unsigned int v40 = *(unsigned __int16 *)((char *)v32 + v26);
    unsigned int v41 = v40 - 3;
    if (v40 < 3) {
      goto LABEL_122;
    }
  }
  else
  {
LABEL_107:
    unsigned int v40 = *((unsigned __int8 *)v32 + v26);
    unsigned int v41 = v40 - 3;
    if (v40 < 3) {
      goto LABEL_122;
    }
  }
LABEL_112:
  if (v26 <= 3) {
    uint64_t v42 = v26;
  }
  else {
    uint64_t v42 = 4;
  }
  switch(v42)
  {
    case 1:
      int v43 = *(unsigned __int8 *)v32;
      goto LABEL_120;
    case 2:
      int v43 = *(unsigned __int16 *)v32;
      goto LABEL_120;
    case 3:
      int v43 = *(unsigned __int16 *)v32 | (*((unsigned __int8 *)v32 + 2) << 16);
      goto LABEL_120;
    case 4:
      int v43 = *(_DWORD *)v32;
LABEL_120:
      int v44 = (v43 | (v41 << (8 * v26))) + 3;
      unsigned int v40 = v43 + 3;
      if (v26 < 4) {
        unsigned int v40 = v44;
      }
      break;
    default:
      break;
  }
LABEL_122:
  if (v40 == 2)
  {
    (*(void (**)(void *, void *, uint64_t))(v25 + 32))(v31, v32, v5);
    if (v26 <= 3)
    {
      unsigned int v46 = ((1 << (8 * v26)) + 1) >> (8 * v26);
      if (v46 > 0xFFFC)
      {
        int v47 = 2;
        goto LABEL_145;
      }
      if (v46 > 0xFC)
      {
        LOWORD(v47) = 2;
        goto LABEL_148;
      }
    }
    *((unsigned char *)v31 + v26) = 2;
    return __dst;
  }
  if (v40 == 1)
  {
    (*(void (**)(void *, void *, uint64_t))(v25 + 32))(v31, v32, v5);
    if (v26 > 3)
    {
LABEL_134:
      *((unsigned char *)v31 + v26) = 1;
      return __dst;
    }
    int v47 = 1;
    unsigned int v48 = ((1 << (8 * v26)) + 1) >> (8 * v26);
    if (v48 <= 0xFFFC)
    {
      if (v48 <= 0xFC) {
        goto LABEL_134;
      }
LABEL_148:
      *(_WORD *)((char *)v31 + v26) = v47;
      return __dst;
    }
LABEL_145:
    *(_DWORD *)((char *)v31 + v26) = v47;
    return __dst;
  }
  if (v40)
  {
    if (v26 > 3) {
      goto LABEL_139;
    }
    unsigned int v49 = ((1 << (8 * v26)) + 1) >> (8 * v26);
    uint64_t v50 = 2;
    if (v49 > 0xFFFC) {
      uint64_t v50 = 4;
    }
    if (v49 <= 0xFC) {
LABEL_139:
    }
      uint64_t v50 = 1;
    memcpy(v31, v32, v50 + v26);
  }
  else
  {
    long long v45 = *(_OWORD *)v32;
    _OWORD v31[2] = v32[2];
    *(_OWORD *)int v31 = v45;
    if (v26 > 3) {
      goto LABEL_126;
    }
    unsigned int v51 = ((1 << (8 * v26)) + 1) >> (8 * v26);
    if (v51 > 0xFFFC)
    {
      *(_DWORD *)((char *)v31 + v26) = 0;
      return __dst;
    }
    if (v51 <= 0xFC) {
LABEL_126:
    }
      *((unsigned char *)v31 + v26) = 0;
    else {
      *(_WORD *)((char *)v31 + v26) = 0;
    }
  }
  return __dst;
}

uint64_t getEnumTagSinglePayload for AnimatedValueKeyframe.InterpolationParameters(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(*(void *)(a3 + 16) - 8);
  unint64_t v4 = *(void *)(v3 + 64);
  if (v4 <= 0x18) {
    unint64_t v4 = 24;
  }
  char v5 = 8 * v4;
  if (v4 > 3)
  {
    int v6 = 4;
LABEL_7:
    char v8 = 8;
    goto LABEL_8;
  }
  unsigned int v7 = ((1 << v5) + 1) >> v5;
  if (v7 > 0xFFFC) {
    goto LABEL_11;
  }
  int v6 = v7 + 3;
  if (v7 <= 0xFC) {
    goto LABEL_7;
  }
  char v8 = 16;
LABEL_8:
  unsigned int v9 = (1 << v8) - v6;
  if ((v9 & 0x80000000) != 0)
  {
LABEL_11:
    unsigned int v9 = 0x7FFFFFFF;
    if (v4 > 3) {
      goto LABEL_10;
    }
    goto LABEL_12;
  }
  if (v4 > 3)
  {
LABEL_10:
    int v10 = 4;
LABEL_14:
    char v12 = 8;
    goto LABEL_15;
  }
LABEL_12:
  unsigned int v11 = ((1 << v5) + 1) >> v5;
  if (v11 > 0xFFFC)
  {
LABEL_16:
    unsigned int v13 = 0x7FFFFFFF;
    goto LABEL_17;
  }
  int v10 = v11 + 3;
  if (v11 <= 0xFC) {
    goto LABEL_14;
  }
  char v12 = 16;
LABEL_15:
  unsigned int v13 = (1 << v12) - v10;
  if ((v13 & 0x80000000) != 0) {
    goto LABEL_16;
  }
LABEL_17:
  if (v13 <= v9) {
    unsigned int v13 = v9;
  }
  if (v4 > 3) {
    goto LABEL_23;
  }
  unsigned int v14 = ((1 << v5) + 1) >> v5;
  uint64_t v15 = 2;
  if (v14 > 0xFFFC) {
    uint64_t v15 = 4;
  }
  if (v14 <= 0xFC) {
LABEL_23:
  }
    uint64_t v15 = 1;
  int v16 = *(_DWORD *)(v3 + 80);
  if (v4 > 3) {
    goto LABEL_28;
  }
  unsigned int v17 = ((1 << v5) + 1) >> v5;
  uint64_t v18 = 2;
  if (v17 > 0xFFFC) {
    uint64_t v18 = 4;
  }
  if (v17 <= 0xFC) {
LABEL_28:
  }
    uint64_t v18 = 1;
  if (!a2) {
    return 0;
  }
  uint64_t v19 = v16 & 0xF8 | 7;
  if (a2 > v13)
  {
    unint64_t v20 = ((v4 + v19 + v15) & ~v19) + v4 + v18;
    char v21 = 8 * v20;
    if (v20 > 3) {
      goto LABEL_32;
    }
    unsigned int v23 = ((a2 - v13 + ~(-1 << v21)) >> v21) + 1;
    if (HIWORD(v23))
    {
      int v22 = *(_DWORD *)((char *)a1 + v20);
      if (!v22) {
        goto LABEL_49;
      }
      goto LABEL_41;
    }
    if (v23 > 0xFF)
    {
      int v22 = *(unsigned __int16 *)((char *)a1 + v20);
      if (!*(unsigned __int16 *)((char *)a1 + v20)) {
        goto LABEL_49;
      }
      goto LABEL_41;
    }
    if (v23 >= 2)
    {
LABEL_32:
      int v22 = *((unsigned __int8 *)a1 + v20);
      if (!*((unsigned char *)a1 + v20)) {
        goto LABEL_49;
      }
LABEL_41:
      int v24 = (v22 - 1) << v21;
      if (v20 > 3) {
        int v24 = 0;
      }
      if (v20)
      {
        if (v20 > 3) {
          LODWORD(v20) = 4;
        }
        switch((int)v20)
        {
          case 2:
            LODWORD(v20) = *a1;
            break;
          case 3:
            LODWORD(v20) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
            break;
          case 4:
            LODWORD(v20) = *(_DWORD *)a1;
            break;
          default:
            LODWORD(v20) = *(unsigned __int8 *)a1;
            break;
        }
      }
      return v13 + (v20 | v24) + 1;
    }
  }
LABEL_49:
  if (!v13) {
    return 0;
  }
  if (v4 > 3)
  {
    int v25 = 4;
LABEL_54:
    char v27 = 8;
    goto LABEL_55;
  }
  unsigned int v26 = ((1 << v5) + 1) >> v5;
  if (v26 > 0xFFFC) {
    goto LABEL_58;
  }
  int v25 = v26 + 3;
  if (v26 <= 0xFC) {
    goto LABEL_54;
  }
  char v27 = 16;
LABEL_55:
  unsigned int v28 = (1 << v27) - v25;
  if ((v28 & 0x80000000) != 0)
  {
LABEL_58:
    unsigned int v28 = 0x7FFFFFFF;
    if (v4 > 3) {
      goto LABEL_57;
    }
    goto LABEL_59;
  }
  if (v4 > 3)
  {
LABEL_57:
    int v29 = 4;
    goto LABEL_61;
  }
LABEL_59:
  unsigned int v30 = ((1 << v5) + 1) >> v5;
  if (v30 <= 0xFFFC)
  {
    int v29 = v30 + 3;
    if (v30 > 0xFC)
    {
      char v31 = 16;
LABEL_62:
      unsigned int v32 = (1 << v31) - v29;
      if ((v32 & 0x80000000) == 0) {
        goto LABEL_64;
      }
      goto LABEL_63;
    }
LABEL_61:
    char v31 = 8;
    goto LABEL_62;
  }
LABEL_63:
  unsigned int v32 = 0x7FFFFFFF;
LABEL_64:
  if (v32 > v28) {
    unsigned int v28 = v32;
  }
  if (v4 > 3)
  {
    int v33 = 4;
LABEL_70:
    char v35 = 8;
    goto LABEL_71;
  }
  unsigned int v34 = ((1 << v5) + 1) >> v5;
  if (v34 > 0xFFFC) {
    goto LABEL_75;
  }
  int v33 = v34 + 3;
  if (v34 <= 0xFC) {
    goto LABEL_70;
  }
  char v35 = 16;
LABEL_71:
  int v36 = (1 << v35) - v33;
  if ((v36 & 0x80000000) == 0)
  {
    if (v36 == v28) {
      goto LABEL_73;
    }
    goto LABEL_76;
  }
LABEL_75:
  if (v28 != 0x7FFFFFFF)
  {
LABEL_76:
    uint64_t v38 = ~v19;
    if (v4 > 3) {
      goto LABEL_79;
    }
    unsigned int v39 = ((1 << v5) + 1) >> v5;
    if (v39 > 0xFFFC)
    {
      uint64_t v41 = (uint64_t)a1 + v4 + v19 + 4;
LABEL_100:
      unsigned int v51 = (unsigned __int16 *)(v41 & v38);
      if (v4 <= 3)
      {
        unsigned int v53 = ((1 << v5) + 1) >> v5;
        if (v53 > 0xFFFC) {
          goto LABEL_108;
        }
        int v52 = v53 + 3;
        if (v53 > 0xFC)
        {
          char v54 = 16;
LABEL_105:
          unsigned int v13 = (1 << v54) - v52;
          if ((v13 & 0x80000000) == 0)
          {
            if (v4 > 3) {
              goto LABEL_112;
            }
LABEL_109:
            unsigned int v55 = ((1 << v5) + 1) >> v5;
            uint64_t v56 = 2;
            if (v55 > 0xFFFC) {
              uint64_t v56 = 4;
            }
            if (v55 > 0xFC)
            {
LABEL_113:
              if (!v28) {
                return 0;
              }
              unsigned int v57 = v28 - v13;
              if (v28 <= v13) {
                goto LABEL_158;
              }
              unint64_t v20 = v56 + v4;
              char v58 = 8 * (v56 + v4);
              if (v20 > 3)
              {
LABEL_116:
                int v59 = *((unsigned __int8 *)v51 + v20);
                goto LABEL_150;
              }
              unsigned int v61 = ((v57 + ~(-1 << v58)) >> v58) + 1;
              if (HIWORD(v61))
              {
                int v59 = *(_DWORD *)((char *)v51 + v20);
              }
              else
              {
                if (v61 <= 0xFF)
                {
                  if (v61 < 2) {
                    goto LABEL_158;
                  }
                  goto LABEL_116;
                }
                int v59 = *(unsigned __int16 *)((char *)v51 + v20);
              }
LABEL_150:
              if (v59)
              {
                int v24 = (v59 - 1) << v58;
                if (v20 > 3) {
                  int v24 = 0;
                }
                if (v20)
                {
                  if (v20 > 3) {
                    LODWORD(v20) = 4;
                  }
                  switch((int)v20)
                  {
                    case 2:
                      LODWORD(v20) = *v51;
                      break;
                    case 3:
                      LODWORD(v20) = *v51 | (*((unsigned __int8 *)v51 + 2) << 16);
                      break;
                    case 4:
                      LODWORD(v20) = *(_DWORD *)v51;
                      break;
                    default:
                      LODWORD(v20) = *(unsigned __int8 *)v51;
                      break;
                  }
                }
                return v13 + (v20 | v24) + 1;
              }
LABEL_158:
              if (v13)
              {
                if (v4 > 3)
                {
                  int v63 = *((unsigned __int8 *)v51 + v4);
                  goto LABEL_161;
                }
                unsigned int v71 = ((1 << v5) + 1) >> v5;
                if (v71 <= 0xFFFC)
                {
                  int v65 = v71 + 3;
                  if (v71 <= 0xFC)
                  {
                    int v66 = *((unsigned __int8 *)v51 + v4);
                    goto LABEL_166;
                  }
                  int v72 = *(unsigned __int16 *)((char *)v51 + v4);
LABEL_171:
                  unsigned int v67 = v72 | 0xFFFF0000;
                  unsigned int v68 = v72 ^ 0xFFFF;
                  char v69 = 16;
LABEL_172:
                  unsigned int v73 = (1 << v69) - v65;
                  if ((v73 & 0x80000000) == 0) {
                    goto LABEL_174;
                  }
                  goto LABEL_173;
                }
                unsigned int v67 = *(_DWORD *)((char *)v51 + v4);
LABEL_168:
                unsigned int v68 = ~v67;
LABEL_173:
                unsigned int v73 = 0x7FFFFFFF;
LABEL_174:
                if (v73 > v68) {
                  return -v67;
                }
                else {
                  return 0;
                }
              }
              return 0;
            }
LABEL_112:
            uint64_t v56 = 1;
            goto LABEL_113;
          }
LABEL_108:
          unsigned int v13 = 0x7FFFFFFF;
          if (v4 > 3) {
            goto LABEL_112;
          }
          goto LABEL_109;
        }
      }
      else
      {
        int v52 = 4;
      }
      char v54 = 8;
      goto LABEL_105;
    }
    if (v39 > 0xFC) {
      unsigned int v40 = a1 + 1;
    }
    else {
LABEL_79:
    }
      unsigned int v40 = (unsigned __int16 *)((char *)a1 + 1);
    uint64_t v41 = (uint64_t)v40 + v4 + v19;
    goto LABEL_100;
  }
LABEL_73:
  if (v4 > 3)
  {
    int v37 = 4;
LABEL_83:
    char v43 = 8;
    goto LABEL_84;
  }
  unsigned int v42 = ((1 << v5) + 1) >> v5;
  if (v42 > 0xFFFC) {
    goto LABEL_87;
  }
  int v37 = v42 + 3;
  if (v42 <= 0xFC) {
    goto LABEL_83;
  }
  char v43 = 16;
LABEL_84:
  unsigned int v44 = (1 << v43) - v37;
  if ((v44 & 0x80000000) == 0)
  {
    if (v4 > 3) {
      goto LABEL_91;
    }
    goto LABEL_88;
  }
LABEL_87:
  unsigned int v44 = 0x7FFFFFFF;
  if (v4 > 3)
  {
LABEL_91:
    uint64_t v46 = 1;
    goto LABEL_92;
  }
LABEL_88:
  unsigned int v45 = ((1 << v5) + 1) >> v5;
  uint64_t v46 = 2;
  if (v45 > 0xFFFC) {
    uint64_t v46 = 4;
  }
  if (v45 <= 0xFC) {
    goto LABEL_91;
  }
LABEL_92:
  if (!v28) {
    return 0;
  }
  unsigned int v47 = v28 - v44;
  if (v28 <= v44) {
    goto LABEL_142;
  }
  unint64_t v48 = v46 + v4;
  char v49 = 8 * (v46 + v4);
  if (v48 > 3)
  {
LABEL_95:
    int v50 = *((unsigned __int8 *)a1 + v48);
    goto LABEL_134;
  }
  unsigned int v60 = ((v47 + ~(-1 << v49)) >> v49) + 1;
  if (HIWORD(v60))
  {
    int v50 = *(_DWORD *)((char *)a1 + v48);
  }
  else
  {
    if (v60 <= 0xFF)
    {
      if (v60 < 2)
      {
LABEL_142:
        if (v44)
        {
          if (v4 > 3)
          {
            int v63 = *((unsigned __int8 *)a1 + v4);
LABEL_161:
            unsigned int v67 = v63 | 0xFFFFFF00;
            unsigned int v68 = v63 ^ 0xFF;
            char v69 = 8;
            int v65 = 4;
            goto LABEL_172;
          }
          unsigned int v64 = ((1 << v5) + 1) >> v5;
          if (v64 <= 0xFFFC)
          {
            int v65 = v64 + 3;
            if (v64 <= 0xFC)
            {
              int v66 = *((unsigned __int8 *)a1 + v4);
LABEL_166:
              unsigned int v67 = v66 | 0xFFFFFF00;
              unsigned int v68 = v66 ^ 0xFF;
              char v69 = 8;
              goto LABEL_172;
            }
            int v72 = *(unsigned __int16 *)((char *)a1 + v4);
            goto LABEL_171;
          }
          unsigned int v67 = *(_DWORD *)((char *)a1 + v4);
          goto LABEL_168;
        }
        return 0;
      }
      goto LABEL_95;
    }
    int v50 = *(unsigned __int16 *)((char *)a1 + v48);
  }
LABEL_134:
  if (!v50) {
    goto LABEL_142;
  }
  int v62 = (v50 - 1) << v49;
  if (v48 > 3) {
    int v62 = 0;
  }
  if (v48)
  {
    if (v48 > 3) {
      LODWORD(v48) = 4;
    }
    switch((int)v48)
    {
      case 2:
        LODWORD(v48) = *a1;
        break;
      case 3:
        LODWORD(v48) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v48) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v48) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v44 + (v48 | v62) + 1;
}

void storeEnumTagSinglePayload for AnimatedValueKeyframe.InterpolationParameters(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  unint64_t v4 = a1;
  uint64_t v5 = *(void *)(*(void *)(a4 + 16) - 8);
  unint64_t v6 = *(void *)(v5 + 64);
  if (v6 <= 0x18) {
    unint64_t v6 = 24;
  }
  char v7 = 8 * v6;
  if (v6 > 3)
  {
    int v8 = 4;
LABEL_5:
    char v9 = 8;
    goto LABEL_6;
  }
  unsigned int v14 = ((1 << v7) + 1) >> v7;
  if (v14 > 0xFFFC)
  {
LABEL_15:
    unsigned int v10 = 0x7FFFFFFF;
    if (v6 > 3) {
      goto LABEL_8;
    }
    goto LABEL_16;
  }
  int v8 = v14 + 3;
  if (v14 <= 0xFC) {
    goto LABEL_5;
  }
  char v9 = 16;
LABEL_6:
  unsigned int v10 = (1 << v9) - v8;
  if ((v10 & 0x80000000) != 0) {
    goto LABEL_15;
  }
  if (v6 > 3)
  {
LABEL_8:
    int v11 = 4;
LABEL_9:
    char v12 = 8;
    goto LABEL_10;
  }
LABEL_16:
  unsigned int v15 = ((1 << v7) + 1) >> v7;
  if (v15 > 0xFFFC)
  {
LABEL_19:
    unsigned int v13 = 0x7FFFFFFF;
    goto LABEL_20;
  }
  int v11 = v15 + 3;
  if (v15 <= 0xFC) {
    goto LABEL_9;
  }
  char v12 = 16;
LABEL_10:
  unsigned int v13 = (1 << v12) - v11;
  if ((v13 & 0x80000000) != 0) {
    goto LABEL_19;
  }
LABEL_20:
  if (v13 > v10) {
    unsigned int v10 = v13;
  }
  if (v6 > 3) {
    goto LABEL_26;
  }
  unsigned int v16 = ((1 << v7) + 1) >> v7;
  uint64_t v17 = 2;
  if (v16 > 0xFFFC) {
    uint64_t v17 = 4;
  }
  if (v16 <= 0xFC) {
LABEL_26:
  }
    uint64_t v17 = 1;
  uint64_t v18 = *(_DWORD *)(v5 + 80) & 0xF8 | 7;
  unint64_t v19 = (v6 + v18 + v17) & ~v18;
  if (v6 > 3) {
    goto LABEL_31;
  }
  unsigned int v20 = ((1 << v7) + 1) >> v7;
  uint64_t v21 = 2;
  if (v20 > 0xFFFC) {
    uint64_t v21 = 4;
  }
  if (v20 <= 0xFC) {
LABEL_31:
  }
    uint64_t v21 = 1;
  size_t v22 = v19 + v6 + v21;
  if (a3 <= v10)
  {
    int v23 = 0;
  }
  else if (v22 <= 3)
  {
    unsigned int v27 = ((a3 - v10 + ~(-1 << (8 * v22))) >> (8 * v22)) + 1;
    if (HIWORD(v27))
    {
      int v23 = 4;
    }
    else if (v27 >= 0x100)
    {
      int v23 = 2;
    }
    else
    {
      int v23 = v27 > 1;
    }
  }
  else
  {
    int v23 = 1;
  }
  if (v10 < a2)
  {
    unsigned int v24 = ~v10 + a2;
    if (v22 < 4)
    {
      int v25 = (v24 >> (8 * v22)) + 1;
      if (v22)
      {
        int v28 = v24 & ~(-1 << (8 * v22));
        bzero(a1, v22);
        if (v22 == 3)
        {
          *(_WORD *)unint64_t v4 = v28;
          _OWORD v4[2] = BYTE2(v28);
        }
        else if (v22 == 2)
        {
          *(_WORD *)unint64_t v4 = v28;
        }
        else
        {
          *unint64_t v4 = v28;
        }
      }
    }
    else
    {
      bzero(a1, v22);
      *(_DWORD *)unint64_t v4 = v24;
      int v25 = 1;
    }
    switch(v23)
    {
      case 1:
        goto LABEL_115;
      case 2:
        goto LABEL_178;
      case 3:
        goto LABEL_181;
      case 4:
        goto LABEL_179;
      default:
        return;
    }
  }
  uint64_t v26 = ~v18;
  switch(v23)
  {
    case 1:
      a1[v22] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_52;
    case 2:
      *(_WORD *)&a1[v22] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_52;
    case 3:
LABEL_181:
      __break(1u);
      JUMPOUT(0x187C0B3A8);
    case 4:
      *(_DWORD *)&a1[v22] = 0;
      goto LABEL_51;
    default:
LABEL_51:
      if (!a2) {
        return;
      }
LABEL_52:
      if (v6 > 3)
      {
        int v29 = 4;
LABEL_54:
        char v30 = 8;
        goto LABEL_55;
      }
      unsigned int v35 = ((1 << v7) + 1) >> v7;
      if (v35 > 0xFFFC)
      {
LABEL_64:
        unsigned int v31 = 0x7FFFFFFF;
        if (v6 > 3) {
          goto LABEL_57;
        }
        goto LABEL_65;
      }
      int v29 = v35 + 3;
      if (v35 <= 0xFC) {
        goto LABEL_54;
      }
      char v30 = 16;
LABEL_55:
      unsigned int v31 = (1 << v30) - v29;
      if ((v31 & 0x80000000) != 0) {
        goto LABEL_64;
      }
      if (v6 > 3)
      {
LABEL_57:
        int v32 = 4;
LABEL_58:
        char v33 = 8;
        goto LABEL_59;
      }
LABEL_65:
      unsigned int v36 = ((1 << v7) + 1) >> v7;
      if (v36 > 0xFFFC) {
        goto LABEL_68;
      }
      int v32 = v36 + 3;
      if (v36 <= 0xFC) {
        goto LABEL_58;
      }
      char v33 = 16;
LABEL_59:
      unsigned int v34 = (1 << v33) - v32;
      if ((v34 & 0x80000000) == 0) {
        goto LABEL_69;
      }
LABEL_68:
      unsigned int v34 = 0x7FFFFFFF;
LABEL_69:
      if (v34 > v31) {
        unsigned int v31 = v34;
      }
      if (v6 > 3)
      {
        int v37 = 4;
LABEL_73:
        char v38 = 8;
        goto LABEL_74;
      }
      unsigned int v43 = ((1 << v7) + 1) >> v7;
      if (v43 > 0xFFFC) {
        goto LABEL_85;
      }
      int v37 = v43 + 3;
      if (v43 <= 0xFC) {
        goto LABEL_73;
      }
      char v38 = 16;
LABEL_74:
      int v39 = (1 << v38) - v37;
      if ((v39 & 0x80000000) == 0)
      {
        if (v39 == v31) {
          goto LABEL_76;
        }
        goto LABEL_86;
      }
LABEL_85:
      if (v31 == 0x7FFFFFFF)
      {
LABEL_76:
        if (v6 <= 3)
        {
          unsigned int v46 = ((1 << v7) + 1) >> v7;
          if (v46 > 0xFFFC) {
            goto LABEL_95;
          }
          int v40 = v46 + 3;
          if (v46 > 0xFC)
          {
            char v41 = 16;
LABEL_79:
            unsigned int v42 = (1 << v41) - v40;
            if ((v42 & 0x80000000) == 0)
            {
              if (v6 > 3) {
                goto LABEL_99;
              }
LABEL_96:
              unsigned int v47 = ((1 << v7) + 1) >> v7;
              uint64_t v48 = 2;
              if (v47 > 0xFFFC) {
                uint64_t v48 = 4;
              }
              if (v47 > 0xFC)
              {
LABEL_100:
                size_t v22 = v48 + v6;
                BOOL v49 = v31 >= v42;
                unsigned int v50 = v31 - v42;
                if (v50 != 0 && v49)
                {
                  if (v22 <= 3)
                  {
                    unsigned int v54 = ((v50 + ~(-1 << (8 * v22))) >> (8 * v22)) + 1;
                    if (HIWORD(v54))
                    {
                      int v52 = 4;
                    }
                    else if (v54 >= 0x100)
                    {
                      int v52 = 2;
                    }
                    else
                    {
                      int v52 = v54 > 1;
                    }
                  }
                  else
                  {
                    int v52 = 1;
                  }
                }
                else
                {
                  int v52 = 0;
                }
                if (v42 < a2)
                {
                  unsigned int v53 = ~v42 + a2;
                  if (v22 < 4)
                  {
                    int v25 = (v53 >> (8 * v22)) + 1;
                    if (v22)
                    {
                      int v64 = v53 & ~(-1 << (8 * v22));
                      bzero(a1, v22);
                      if (v22 == 3)
                      {
                        *(_WORD *)unint64_t v4 = v64;
                        _OWORD v4[2] = BYTE2(v64);
                      }
                      else if (v22 == 2)
                      {
                        *(_WORD *)unint64_t v4 = v64;
                      }
                      else
                      {
                        *unint64_t v4 = v64;
                      }
                    }
                  }
                  else
                  {
                    bzero(a1, v22);
                    *(_DWORD *)unint64_t v4 = v53;
                    int v25 = 1;
                  }
                  switch(v52)
                  {
                    case 1:
                      goto LABEL_115;
                    case 2:
                      goto LABEL_178;
                    case 3:
                      goto LABEL_181;
                    case 4:
                      goto LABEL_179;
                    default:
                      return;
                  }
                }
                switch(v52)
                {
                  case 1:
                    a1[v22] = 0;
                    goto LABEL_158;
                  case 2:
                    *(_WORD *)&a1[v22] = 0;
                    goto LABEL_158;
                  case 3:
                    goto LABEL_181;
                  case 4:
                    *(_DWORD *)&a1[v22] = 0;
                    goto LABEL_158;
                  default:
LABEL_158:
                    int v67 = -a2;
                    if (v6 > 3) {
                      goto LABEL_168;
                    }
                    unsigned int v68 = ((1 << v7) + 1) >> v7;
                    if (v68 > 0xFFFC) {
                      goto LABEL_169;
                    }
                    if (v68 <= 0xFC) {
                      goto LABEL_168;
                    }
                    goto LABEL_171;
                }
              }
LABEL_99:
              uint64_t v48 = 1;
              goto LABEL_100;
            }
LABEL_95:
            unsigned int v42 = 0x7FFFFFFF;
            if (v6 > 3) {
              goto LABEL_99;
            }
            goto LABEL_96;
          }
        }
        else
        {
          int v40 = 4;
        }
        char v41 = 8;
        goto LABEL_79;
      }
LABEL_86:
      if (v6 > 3) {
        goto LABEL_87;
      }
      unsigned int v51 = ((1 << v7) + 1) >> v7;
      if (v51 <= 0xFFFC)
      {
        if (v51 > 0xFC)
        {
          unsigned int v44 = a1 + 2;
          goto LABEL_88;
        }
LABEL_87:
        unsigned int v44 = a1 + 1;
LABEL_88:
        unsigned int v45 = &v44[v6 + v18];
        goto LABEL_121;
      }
      unsigned int v45 = &a1[v6 + 4 + v18];
LABEL_121:
      unint64_t v4 = (char *)((unint64_t)v45 & v26);
      if (v6 > 3)
      {
        int v55 = 4;
LABEL_123:
        char v56 = 8;
        goto LABEL_124;
      }
      unsigned int v58 = ((1 << v7) + 1) >> v7;
      if (v58 > 0xFFFC) {
        goto LABEL_130;
      }
      int v55 = v58 + 3;
      if (v58 <= 0xFC) {
        goto LABEL_123;
      }
      char v56 = 16;
LABEL_124:
      unsigned int v57 = (1 << v56) - v55;
      if ((v57 & 0x80000000) == 0)
      {
        if (v6 > 3) {
          goto LABEL_134;
        }
LABEL_131:
        unsigned int v59 = ((1 << v7) + 1) >> v7;
        uint64_t v60 = 2;
        if (v59 > 0xFFFC) {
          uint64_t v60 = 4;
        }
        if (v59 > 0xFC) {
          goto LABEL_135;
        }
        goto LABEL_134;
      }
LABEL_130:
      unsigned int v57 = 0x7FFFFFFF;
      if (v6 <= 3) {
        goto LABEL_131;
      }
LABEL_134:
      uint64_t v60 = 1;
LABEL_135:
      size_t v22 = v60 + v6;
      BOOL v49 = v31 >= v57;
      unsigned int v61 = v31 - v57;
      if (v61 != 0 && v49)
      {
        if (v22 <= 3)
        {
          unsigned int v65 = ((v61 + ~(-1 << (8 * v22))) >> (8 * v22)) + 1;
          if (HIWORD(v65))
          {
            int v62 = 4;
          }
          else if (v65 >= 0x100)
          {
            int v62 = 2;
          }
          else
          {
            int v62 = v65 > 1;
          }
        }
        else
        {
          int v62 = 1;
        }
      }
      else
      {
        int v62 = 0;
      }
      if (v57 < a2)
      {
        unsigned int v63 = ~v57 + a2;
        if (v22 < 4)
        {
          int v25 = (v63 >> (8 * v22)) + 1;
          if (v22)
          {
            int v66 = v63 & ~(-1 << (8 * v22));
            bzero(v4, v22);
            if (v22 == 3)
            {
              *(_WORD *)unint64_t v4 = v66;
              _OWORD v4[2] = BYTE2(v66);
            }
            else if (v22 == 2)
            {
              *(_WORD *)unint64_t v4 = v66;
            }
            else
            {
              *unint64_t v4 = v66;
            }
          }
        }
        else
        {
          bzero(v4, v22);
          *(_DWORD *)unint64_t v4 = v63;
          int v25 = 1;
        }
        switch(v62)
        {
          case 1:
LABEL_115:
            v4[v22] = v25;
            return;
          case 2:
LABEL_178:
            *(_WORD *)&v4[v22] = v25;
            return;
          case 3:
            goto LABEL_181;
          case 4:
LABEL_179:
            *(_DWORD *)&v4[v22] = v25;
            return;
          default:
            return;
        }
      }
      switch(v62)
      {
        case 1:
          v4[v22] = 0;
          goto LABEL_165;
        case 2:
          *(_WORD *)&v4[v22] = 0;
          goto LABEL_165;
        case 3:
          goto LABEL_181;
        case 4:
          *(_DWORD *)&v4[v22] = 0;
          goto LABEL_165;
        default:
LABEL_165:
          int v67 = -a2;
          if (v6 > 3) {
            goto LABEL_168;
          }
          unsigned int v69 = ((1 << v7) + 1) >> v7;
          if (v69 > 0xFFFC)
          {
LABEL_169:
            *(_DWORD *)&v4[v6] = v67;
          }
          else if (v69 > 0xFC)
          {
LABEL_171:
            *(_WORD *)&v4[v6] = v67;
          }
          else
          {
LABEL_168:
            v4[v6] = v67;
          }
          break;
      }
      return;
  }
}

uint64_t type metadata completion function for AnimatedValueKeyframe.InterpolationParameters.Mode()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

void *initializeBufferWithCopyOfBuffer for AnimatedValueKeyframe.InterpolationParameters.Mode(char *__dst, void *a2, uint64_t a3)
{
  uint64_t v3 = __dst;
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  if (*(void *)(v4 + 64) <= 0x18uLL) {
    uint64_t v5 = 24;
  }
  else {
    uint64_t v5 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  }
  if (v5 > 3)
  {
    unint64_t v6 = v5 + 1;
    int v7 = *(_DWORD *)(v4 + 80);
    int v8 = v7 & 0x1000F8;
    goto LABEL_9;
  }
  unsigned int v9 = ((1 << (8 * v5)) + 1) >> (8 * v5);
  int v7 = *(_DWORD *)(v4 + 80);
  if (v9 > 0xFFFC)
  {
    if ((unint64_t)(v5 + 4) > 0x18 || (v7 & 0x1000F8) != 0) {
      goto LABEL_27;
    }
    unsigned int v11 = *(_DWORD *)((char *)a2 + v5);
    unsigned int v12 = v11 - 3;
    if (v11 < 3) {
      goto LABEL_40;
    }
    goto LABEL_30;
  }
  int v8 = v7 & 0x1000F8;
  if (v9 > 0xFC)
  {
    if ((unint64_t)(v5 + 2) > 0x18 || v8 != 0) {
      goto LABEL_27;
    }
    unsigned int v11 = *(unsigned __int16 *)((char *)a2 + v5);
    unsigned int v12 = v11 - 3;
    if (v11 < 3) {
      goto LABEL_40;
    }
LABEL_30:
    if (v5 <= 3) {
      uint64_t v17 = v5;
    }
    else {
      uint64_t v17 = 4;
    }
    switch(v17)
    {
      case 1:
        int v18 = *(unsigned __int8 *)a2;
        goto LABEL_38;
      case 2:
        int v18 = *(unsigned __int16 *)a2;
        goto LABEL_38;
      case 3:
        int v18 = *(unsigned __int16 *)a2 | (*((unsigned __int8 *)a2 + 2) << 16);
        goto LABEL_38;
      case 4:
        int v18 = *(_DWORD *)a2;
LABEL_38:
        int v19 = (v18 | (v12 << (8 * v5))) + 3;
        unsigned int v11 = v18 + 3;
        if (v5 < 4) {
          unsigned int v11 = v19;
        }
        break;
      default:
        goto LABEL_40;
    }
    goto LABEL_40;
  }
  unint64_t v6 = v5 + 1;
LABEL_9:
  if (v6 > 0x18 || v8 != 0)
  {
LABEL_27:
    uint64_t v15 = *a2;
    void *v3 = *a2;
    uint64_t v3 = (void *)(v15 + (((v7 & 0xF8 | 7u) + 16) & ~(unint64_t)(v7 & 0xF8 | 7u)));
    swift_retain();
    return v3;
  }
  unsigned int v11 = *((unsigned __int8 *)a2 + v5);
  unsigned int v12 = v11 - 3;
  if (v11 >= 3) {
    goto LABEL_30;
  }
LABEL_40:
  if (v11 == 2)
  {
    (*(void (**)(char *))(v4 + 16))(__dst);
    if (v5 <= 3)
    {
      unsigned int v20 = ((1 << (8 * v5)) + 1) >> (8 * v5);
      if (v20 > 0xFFFC)
      {
        int v21 = 2;
        goto LABEL_63;
      }
      if (v20 > 0xFC)
      {
        LOWORD(v21) = 2;
        goto LABEL_66;
      }
    }
    *((unsigned char *)v3 + v5) = 2;
    return v3;
  }
  if (v11 == 1)
  {
    (*(void (**)(char *))(v4 + 16))(__dst);
    if (v5 > 3)
    {
LABEL_52:
      *((unsigned char *)v3 + v5) = 1;
      return v3;
    }
    int v21 = 1;
    unsigned int v22 = ((1 << (8 * v5)) + 1) >> (8 * v5);
    if (v22 <= 0xFFFC)
    {
      if (v22 <= 0xFC) {
        goto LABEL_52;
      }
LABEL_66:
      *(_WORD *)((char *)v3 + v5) = v21;
      return v3;
    }
LABEL_63:
    *(_DWORD *)((char *)v3 + v5) = v21;
    return v3;
  }
  if (v11)
  {
    if (v5 > 3) {
      goto LABEL_57;
    }
    unsigned int v23 = ((1 << (8 * v5)) + 1) >> (8 * v5);
    uint64_t v24 = 2;
    if (v23 > 0xFFFC) {
      uint64_t v24 = 4;
    }
    if (v23 <= 0xFC) {
LABEL_57:
    }
      uint64_t v24 = 1;
    memcpy(__dst, a2, v24 + v5);
  }
  else
  {
    *(_OWORD *)__dst = *(_OWORD *)a2;
    *((void *)__dst + 2) = a2[2];
    if (v5 > 3) {
      goto LABEL_44;
    }
    unsigned int v25 = ((1 << (8 * v5)) + 1) >> (8 * v5);
    if (v25 > 0xFFFC)
    {
      *(_DWORD *)&__dst[v5] = 0;
      return v3;
    }
    if (v25 <= 0xFC) {
LABEL_44:
    }
      __dst[v5] = 0;
    else {
      *(_WORD *)&__dst[v5] = 0;
    }
  }
  return v3;
}

unsigned __int8 *destroy for AnimatedValueKeyframe.InterpolationParameters.Mode(unsigned __int8 *result, uint64_t a2)
{
  unint64_t v2 = *(void *)(*(void *)(*(void *)(a2 + 16) - 8) + 64);
  if (v2 <= 0x18) {
    unint64_t v2 = 24;
  }
  if (v2 > 3) {
    goto LABEL_4;
  }
  unsigned int v4 = ((1 << (8 * v2)) + 1) >> (8 * v2);
  if (v4 > 0xFFFC)
  {
    unsigned int v3 = *(_DWORD *)&result[v2];
  }
  else
  {
    if (v4 <= 0xFC)
    {
LABEL_4:
      unsigned int v3 = result[v2];
      goto LABEL_9;
    }
    unsigned int v3 = *(unsigned __int16 *)&result[v2];
  }
LABEL_9:
  unsigned int v5 = v3 - 3;
  if (v3 >= 3)
  {
    if (v2 <= 3) {
      uint64_t v6 = v2;
    }
    else {
      uint64_t v6 = 4;
    }
    switch(v6)
    {
      case 1:
        int v7 = *result;
        goto LABEL_18;
      case 2:
        int v7 = *(unsigned __int16 *)result;
        goto LABEL_18;
      case 3:
        int v7 = *(unsigned __int16 *)result | (result[2] << 16);
        goto LABEL_18;
      case 4:
        int v7 = *(_DWORD *)result;
LABEL_18:
        int v8 = (v7 | (v5 << (8 * v2))) + 3;
        unsigned int v3 = v7 + 3;
        if (v2 < 4) {
          unsigned int v3 = v8;
        }
        break;
      default:
        break;
    }
  }
  if (v3 - 1 <= 1) {
    return (unsigned __int8 *)(*(uint64_t (**)(void))(*(void *)(*(void *)(a2 + 16) - 8) + 8))();
  }
  return result;
}

unsigned char *initializeWithCopy for AnimatedValueKeyframe.InterpolationParameters.Mode(unsigned char *__dst, void *a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  if (*(void *)(v4 + 64) <= 0x18uLL) {
    uint64_t v5 = 24;
  }
  else {
    uint64_t v5 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  }
  if (v5 > 3) {
    goto LABEL_7;
  }
  unsigned int v6 = ((1 << (8 * v5)) + 1) >> (8 * v5);
  if (v6 > 0xFFFC)
  {
    unsigned int v7 = *(_DWORD *)((char *)a2 + v5);
    unsigned int v8 = v7 - 3;
    if (v7 < 3) {
      goto LABEL_22;
    }
    goto LABEL_12;
  }
  if (v6 > 0xFC)
  {
    unsigned int v7 = *(unsigned __int16 *)((char *)a2 + v5);
    unsigned int v8 = v7 - 3;
    if (v7 < 3) {
      goto LABEL_22;
    }
  }
  else
  {
LABEL_7:
    unsigned int v7 = *((unsigned __int8 *)a2 + v5);
    unsigned int v8 = v7 - 3;
    if (v7 < 3) {
      goto LABEL_22;
    }
  }
LABEL_12:
  if (v5 <= 3) {
    uint64_t v9 = v5;
  }
  else {
    uint64_t v9 = 4;
  }
  switch(v9)
  {
    case 1:
      int v10 = *(unsigned __int8 *)a2;
      goto LABEL_20;
    case 2:
      int v10 = *(unsigned __int16 *)a2;
      goto LABEL_20;
    case 3:
      int v10 = *(unsigned __int16 *)a2 | (*((unsigned __int8 *)a2 + 2) << 16);
      goto LABEL_20;
    case 4:
      int v10 = *(_DWORD *)a2;
LABEL_20:
      int v11 = (v10 | (v8 << (8 * v5))) + 3;
      unsigned int v7 = v10 + 3;
      if (v5 < 4) {
        unsigned int v7 = v11;
      }
      break;
    default:
      break;
  }
LABEL_22:
  if (v7 == 2)
  {
    (*(void (**)(unsigned char *))(v4 + 16))(__dst);
    if (v5 <= 3)
    {
      unsigned int v12 = ((1 << (8 * v5)) + 1) >> (8 * v5);
      if (v12 > 0xFFFC)
      {
        int v13 = 2;
        goto LABEL_45;
      }
      if (v12 > 0xFC)
      {
        LOWORD(v13) = 2;
        goto LABEL_48;
      }
    }
    __dst[v5] = 2;
    return __dst;
  }
  if (v7 == 1)
  {
    (*(void (**)(unsigned char *))(v4 + 16))(__dst);
    if (v5 > 3)
    {
LABEL_34:
      __dst[v5] = 1;
      return __dst;
    }
    int v13 = 1;
    unsigned int v14 = ((1 << (8 * v5)) + 1) >> (8 * v5);
    if (v14 <= 0xFFFC)
    {
      if (v14 <= 0xFC) {
        goto LABEL_34;
      }
LABEL_48:
      *(_WORD *)&__dst[v5] = v13;
      return __dst;
    }
LABEL_45:
    *(_DWORD *)&__dst[v5] = v13;
    return __dst;
  }
  if (v7)
  {
    if (v5 > 3) {
      goto LABEL_39;
    }
    unsigned int v15 = ((1 << (8 * v5)) + 1) >> (8 * v5);
    uint64_t v16 = 2;
    if (v15 > 0xFFFC) {
      uint64_t v16 = 4;
    }
    if (v15 <= 0xFC) {
LABEL_39:
    }
      uint64_t v16 = 1;
    memcpy(__dst, a2, v16 + v5);
  }
  else
  {
    *(_OWORD *)__dst = *(_OWORD *)a2;
    *((void *)__dst + 2) = a2[2];
    if (v5 > 3) {
      goto LABEL_26;
    }
    unsigned int v17 = ((1 << (8 * v5)) + 1) >> (8 * v5);
    if (v17 > 0xFFFC)
    {
      *(_DWORD *)&__dst[v5] = 0;
      return __dst;
    }
    if (v17 <= 0xFC) {
LABEL_26:
    }
      __dst[v5] = 0;
    else {
      *(_WORD *)&__dst[v5] = 0;
    }
  }
  return __dst;
}

char *assignWithCopy for AnimatedValueKeyframe.InterpolationParameters.Mode(char *__dst, char *__src, uint64_t a3)
{
  if (__dst == __src) {
    return __dst;
  }
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  if (*(void *)(v6 + 64) <= 0x18uLL) {
    uint64_t v7 = 24;
  }
  else {
    uint64_t v7 = *(void *)(v6 + 64);
  }
  char v8 = 8 * v7;
  if (v7 > 3) {
    goto LABEL_8;
  }
  unsigned int v9 = ((1 << v8) + 1) >> v8;
  if (v9 > 0xFFFC)
  {
    unsigned int v10 = *(_DWORD *)&__dst[v7];
    unsigned int v11 = v10 - 3;
    if (v10 < 3) {
      goto LABEL_23;
    }
    goto LABEL_13;
  }
  if (v9 <= 0xFC)
  {
LABEL_8:
    unsigned int v10 = __dst[v7];
    unsigned int v11 = v10 - 3;
    if (v10 < 3) {
      goto LABEL_23;
    }
LABEL_13:
    if (v7 <= 3) {
      uint64_t v12 = v7;
    }
    else {
      uint64_t v12 = 4;
    }
    switch(v12)
    {
      case 1:
        int v13 = *__dst;
        goto LABEL_21;
      case 2:
        int v13 = *(unsigned __int16 *)__dst;
        goto LABEL_21;
      case 3:
        int v13 = *(unsigned __int16 *)__dst | (__dst[2] << 16);
        goto LABEL_21;
      case 4:
        int v13 = *(_DWORD *)__dst;
LABEL_21:
        int v14 = (v13 | (v11 << v8)) + 3;
        unsigned int v10 = v13 + 3;
        if (v7 < 4) {
          unsigned int v10 = v14;
        }
        break;
      default:
        goto LABEL_23;
    }
    goto LABEL_23;
  }
  unsigned int v10 = *(unsigned __int16 *)&__dst[v7];
  unsigned int v11 = v10 - 3;
  if (v10 >= 3) {
    goto LABEL_13;
  }
LABEL_23:
  if (v10 - 1 <= 1) {
    (*(void (**)(char *, uint64_t))(v6 + 8))(__dst, v5);
  }
  if (v7 > 3) {
    goto LABEL_28;
  }
  unsigned int v15 = ((1 << v8) + 1) >> v8;
  if (v15 > 0xFFFC)
  {
    unsigned int v16 = *(_DWORD *)&__src[v7];
    unsigned int v17 = v16 - 3;
    if (v16 < 3) {
      goto LABEL_43;
    }
    goto LABEL_33;
  }
  if (v15 > 0xFC)
  {
    unsigned int v16 = *(unsigned __int16 *)&__src[v7];
    unsigned int v17 = v16 - 3;
    if (v16 < 3) {
      goto LABEL_43;
    }
  }
  else
  {
LABEL_28:
    unsigned int v16 = __src[v7];
    unsigned int v17 = v16 - 3;
    if (v16 < 3) {
      goto LABEL_43;
    }
  }
LABEL_33:
  if (v7 <= 3) {
    uint64_t v18 = v7;
  }
  else {
    uint64_t v18 = 4;
  }
  switch(v18)
  {
    case 1:
      int v19 = *__src;
      goto LABEL_41;
    case 2:
      int v19 = *(unsigned __int16 *)__src;
      goto LABEL_41;
    case 3:
      int v19 = *(unsigned __int16 *)__src | (__src[2] << 16);
      goto LABEL_41;
    case 4:
      int v19 = *(_DWORD *)__src;
LABEL_41:
      int v20 = (v19 | (v17 << v8)) + 3;
      unsigned int v16 = v19 + 3;
      if (v7 < 4) {
        unsigned int v16 = v20;
      }
      break;
    default:
      break;
  }
LABEL_43:
  if (v16 == 2)
  {
    (*(void (**)(char *, char *, uint64_t))(v6 + 16))(__dst, __src, v5);
    if (v7 <= 3)
    {
      unsigned int v22 = ((1 << v8) + 1) >> v8;
      if (v22 > 0xFFFC)
      {
        int v23 = 2;
        goto LABEL_66;
      }
      if (v22 > 0xFC)
      {
        LOWORD(v23) = 2;
        goto LABEL_69;
      }
    }
    __dst[v7] = 2;
    return __dst;
  }
  if (v16 == 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v6 + 16))(__dst, __src, v5);
    if (v7 > 3)
    {
LABEL_55:
      __dst[v7] = 1;
      return __dst;
    }
    int v23 = 1;
    unsigned int v24 = ((1 << v8) + 1) >> v8;
    if (v24 <= 0xFFFC)
    {
      if (v24 <= 0xFC) {
        goto LABEL_55;
      }
LABEL_69:
      *(_WORD *)&__dst[v7] = v23;
      return __dst;
    }
LABEL_66:
    *(_DWORD *)&__dst[v7] = v23;
    return __dst;
  }
  if (v16)
  {
    if (v7 > 3) {
      goto LABEL_60;
    }
    unsigned int v25 = ((1 << v8) + 1) >> v8;
    uint64_t v26 = 2;
    if (v25 > 0xFFFC) {
      uint64_t v26 = 4;
    }
    if (v25 <= 0xFC) {
LABEL_60:
    }
      uint64_t v26 = 1;
    memcpy(__dst, __src, v26 + v7);
  }
  else
  {
    long long v21 = *(_OWORD *)__src;
    *((void *)__dst + 2) = *((void *)__src + 2);
    *(_OWORD *)__dst = v21;
    if (v7 > 3) {
      goto LABEL_47;
    }
    unsigned int v27 = ((1 << v8) + 1) >> v8;
    if (v27 > 0xFFFC)
    {
      *(_DWORD *)&__dst[v7] = 0;
      return __dst;
    }
    if (v27 <= 0xFC) {
LABEL_47:
    }
      __dst[v7] = 0;
    else {
      *(_WORD *)&__dst[v7] = 0;
    }
  }
  return __dst;
}

unsigned char *initializeWithTake for AnimatedValueKeyframe.InterpolationParameters.Mode(unsigned char *__dst, void *a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  if (*(void *)(v4 + 64) <= 0x18uLL) {
    uint64_t v5 = 24;
  }
  else {
    uint64_t v5 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  }
  if (v5 > 3) {
    goto LABEL_7;
  }
  unsigned int v6 = ((1 << (8 * v5)) + 1) >> (8 * v5);
  if (v6 > 0xFFFC)
  {
    unsigned int v7 = *(_DWORD *)((char *)a2 + v5);
    unsigned int v8 = v7 - 3;
    if (v7 < 3) {
      goto LABEL_22;
    }
    goto LABEL_12;
  }
  if (v6 > 0xFC)
  {
    unsigned int v7 = *(unsigned __int16 *)((char *)a2 + v5);
    unsigned int v8 = v7 - 3;
    if (v7 < 3) {
      goto LABEL_22;
    }
  }
  else
  {
LABEL_7:
    unsigned int v7 = *((unsigned __int8 *)a2 + v5);
    unsigned int v8 = v7 - 3;
    if (v7 < 3) {
      goto LABEL_22;
    }
  }
LABEL_12:
  if (v5 <= 3) {
    uint64_t v9 = v5;
  }
  else {
    uint64_t v9 = 4;
  }
  switch(v9)
  {
    case 1:
      int v10 = *(unsigned __int8 *)a2;
      goto LABEL_20;
    case 2:
      int v10 = *(unsigned __int16 *)a2;
      goto LABEL_20;
    case 3:
      int v10 = *(unsigned __int16 *)a2 | (*((unsigned __int8 *)a2 + 2) << 16);
      goto LABEL_20;
    case 4:
      int v10 = *(_DWORD *)a2;
LABEL_20:
      int v11 = (v10 | (v8 << (8 * v5))) + 3;
      unsigned int v7 = v10 + 3;
      if (v5 < 4) {
        unsigned int v7 = v11;
      }
      break;
    default:
      break;
  }
LABEL_22:
  if (v7 == 2)
  {
    (*(void (**)(unsigned char *))(v4 + 32))(__dst);
    if (v5 <= 3)
    {
      unsigned int v12 = ((1 << (8 * v5)) + 1) >> (8 * v5);
      if (v12 > 0xFFFC)
      {
        int v13 = 2;
        goto LABEL_45;
      }
      if (v12 > 0xFC)
      {
        LOWORD(v13) = 2;
        goto LABEL_48;
      }
    }
    __dst[v5] = 2;
    return __dst;
  }
  if (v7 == 1)
  {
    (*(void (**)(unsigned char *))(v4 + 32))(__dst);
    if (v5 > 3)
    {
LABEL_34:
      __dst[v5] = 1;
      return __dst;
    }
    int v13 = 1;
    unsigned int v14 = ((1 << (8 * v5)) + 1) >> (8 * v5);
    if (v14 <= 0xFFFC)
    {
      if (v14 <= 0xFC) {
        goto LABEL_34;
      }
LABEL_48:
      *(_WORD *)&__dst[v5] = v13;
      return __dst;
    }
LABEL_45:
    *(_DWORD *)&__dst[v5] = v13;
    return __dst;
  }
  if (v7)
  {
    if (v5 > 3) {
      goto LABEL_39;
    }
    unsigned int v15 = ((1 << (8 * v5)) + 1) >> (8 * v5);
    uint64_t v16 = 2;
    if (v15 > 0xFFFC) {
      uint64_t v16 = 4;
    }
    if (v15 <= 0xFC) {
LABEL_39:
    }
      uint64_t v16 = 1;
    memcpy(__dst, a2, v16 + v5);
  }
  else
  {
    *(_OWORD *)__dst = *(_OWORD *)a2;
    *((void *)__dst + 2) = a2[2];
    if (v5 > 3) {
      goto LABEL_26;
    }
    unsigned int v17 = ((1 << (8 * v5)) + 1) >> (8 * v5);
    if (v17 > 0xFFFC)
    {
      *(_DWORD *)&__dst[v5] = 0;
      return __dst;
    }
    if (v17 <= 0xFC) {
LABEL_26:
    }
      __dst[v5] = 0;
    else {
      *(_WORD *)&__dst[v5] = 0;
    }
  }
  return __dst;
}

char *assignWithTake for AnimatedValueKeyframe.InterpolationParameters.Mode(char *__dst, char *__src, uint64_t a3)
{
  if (__dst == __src) {
    return __dst;
  }
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  if (*(void *)(v6 + 64) <= 0x18uLL) {
    uint64_t v7 = 24;
  }
  else {
    uint64_t v7 = *(void *)(v6 + 64);
  }
  char v8 = 8 * v7;
  if (v7 > 3) {
    goto LABEL_8;
  }
  unsigned int v9 = ((1 << v8) + 1) >> v8;
  if (v9 > 0xFFFC)
  {
    unsigned int v10 = *(_DWORD *)&__dst[v7];
    unsigned int v11 = v10 - 3;
    if (v10 < 3) {
      goto LABEL_23;
    }
    goto LABEL_13;
  }
  if (v9 <= 0xFC)
  {
LABEL_8:
    unsigned int v10 = __dst[v7];
    unsigned int v11 = v10 - 3;
    if (v10 < 3) {
      goto LABEL_23;
    }
LABEL_13:
    if (v7 <= 3) {
      uint64_t v12 = v7;
    }
    else {
      uint64_t v12 = 4;
    }
    switch(v12)
    {
      case 1:
        int v13 = *__dst;
        goto LABEL_21;
      case 2:
        int v13 = *(unsigned __int16 *)__dst;
        goto LABEL_21;
      case 3:
        int v13 = *(unsigned __int16 *)__dst | (__dst[2] << 16);
        goto LABEL_21;
      case 4:
        int v13 = *(_DWORD *)__dst;
LABEL_21:
        int v14 = (v13 | (v11 << v8)) + 3;
        unsigned int v10 = v13 + 3;
        if (v7 < 4) {
          unsigned int v10 = v14;
        }
        break;
      default:
        goto LABEL_23;
    }
    goto LABEL_23;
  }
  unsigned int v10 = *(unsigned __int16 *)&__dst[v7];
  unsigned int v11 = v10 - 3;
  if (v10 >= 3) {
    goto LABEL_13;
  }
LABEL_23:
  if (v10 - 1 <= 1) {
    (*(void (**)(char *, uint64_t))(v6 + 8))(__dst, v5);
  }
  if (v7 > 3) {
    goto LABEL_28;
  }
  unsigned int v15 = ((1 << v8) + 1) >> v8;
  if (v15 > 0xFFFC)
  {
    unsigned int v16 = *(_DWORD *)&__src[v7];
    unsigned int v17 = v16 - 3;
    if (v16 < 3) {
      goto LABEL_43;
    }
    goto LABEL_33;
  }
  if (v15 > 0xFC)
  {
    unsigned int v16 = *(unsigned __int16 *)&__src[v7];
    unsigned int v17 = v16 - 3;
    if (v16 < 3) {
      goto LABEL_43;
    }
  }
  else
  {
LABEL_28:
    unsigned int v16 = __src[v7];
    unsigned int v17 = v16 - 3;
    if (v16 < 3) {
      goto LABEL_43;
    }
  }
LABEL_33:
  if (v7 <= 3) {
    uint64_t v18 = v7;
  }
  else {
    uint64_t v18 = 4;
  }
  switch(v18)
  {
    case 1:
      int v19 = *__src;
      goto LABEL_41;
    case 2:
      int v19 = *(unsigned __int16 *)__src;
      goto LABEL_41;
    case 3:
      int v19 = *(unsigned __int16 *)__src | (__src[2] << 16);
      goto LABEL_41;
    case 4:
      int v19 = *(_DWORD *)__src;
LABEL_41:
      int v20 = (v19 | (v17 << v8)) + 3;
      unsigned int v16 = v19 + 3;
      if (v7 < 4) {
        unsigned int v16 = v20;
      }
      break;
    default:
      break;
  }
LABEL_43:
  if (v16 == 2)
  {
    (*(void (**)(char *, char *, uint64_t))(v6 + 32))(__dst, __src, v5);
    if (v7 <= 3)
    {
      unsigned int v21 = ((1 << v8) + 1) >> v8;
      if (v21 > 0xFFFC)
      {
        int v22 = 2;
        goto LABEL_66;
      }
      if (v21 > 0xFC)
      {
        LOWORD(v22) = 2;
        goto LABEL_69;
      }
    }
    __dst[v7] = 2;
    return __dst;
  }
  if (v16 == 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v6 + 32))(__dst, __src, v5);
    if (v7 > 3)
    {
LABEL_55:
      __dst[v7] = 1;
      return __dst;
    }
    int v22 = 1;
    unsigned int v23 = ((1 << v8) + 1) >> v8;
    if (v23 <= 0xFFFC)
    {
      if (v23 <= 0xFC) {
        goto LABEL_55;
      }
LABEL_69:
      *(_WORD *)&__dst[v7] = v22;
      return __dst;
    }
LABEL_66:
    *(_DWORD *)&__dst[v7] = v22;
    return __dst;
  }
  if (v16)
  {
    if (v7 > 3) {
      goto LABEL_60;
    }
    unsigned int v24 = ((1 << v8) + 1) >> v8;
    uint64_t v25 = 2;
    if (v24 > 0xFFFC) {
      uint64_t v25 = 4;
    }
    if (v24 <= 0xFC) {
LABEL_60:
    }
      uint64_t v25 = 1;
    memcpy(__dst, __src, v25 + v7);
  }
  else
  {
    *(_OWORD *)__dst = *(_OWORD *)__src;
    *((void *)__dst + 2) = *((void *)__src + 2);
    if (v7 > 3) {
      goto LABEL_47;
    }
    unsigned int v26 = ((1 << v8) + 1) >> v8;
    if (v26 > 0xFFFC)
    {
      *(_DWORD *)&__dst[v7] = 0;
      return __dst;
    }
    if (v26 <= 0xFC) {
LABEL_47:
    }
      __dst[v7] = 0;
    else {
      *(_WORD *)&__dst[v7] = 0;
    }
  }
  return __dst;
}

uint64_t getEnumTagSinglePayload for AnimatedValueKeyframe.InterpolationParameters.Mode(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  unint64_t v3 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  if (v3 <= 0x18) {
    unint64_t v3 = 24;
  }
  if (v3 > 3)
  {
    int v4 = 4;
LABEL_7:
    char v6 = 8;
    goto LABEL_8;
  }
  unsigned int v5 = ((1 << (8 * v3)) + 1) >> (8 * v3);
  if (v5 > 0xFFFC) {
    goto LABEL_11;
  }
  int v4 = v5 + 3;
  if (v5 <= 0xFC) {
    goto LABEL_7;
  }
  char v6 = 16;
LABEL_8:
  unsigned int v7 = (1 << v6) - v4;
  if ((v7 & 0x80000000) == 0)
  {
    if (v3 > 3) {
      goto LABEL_15;
    }
LABEL_12:
    unsigned int v8 = ((1 << (8 * v3)) + 1) >> (8 * v3);
    uint64_t v9 = 2;
    if (v8 > 0xFFFC) {
      uint64_t v9 = 4;
    }
    if (v8 > 0xFC) {
      goto LABEL_16;
    }
    goto LABEL_15;
  }
LABEL_11:
  unsigned int v7 = 0x7FFFFFFF;
  if (v3 <= 3) {
    goto LABEL_12;
  }
LABEL_15:
  uint64_t v9 = 1;
LABEL_16:
  if (!a2) {
    return 0;
  }
  if (a2 <= v7) {
    goto LABEL_35;
  }
  unint64_t v10 = v9 + v3;
  char v11 = 8 * v10;
  if (v10 <= 3)
  {
    unsigned int v13 = ((a2 - v7 + ~(-1 << v11)) >> v11) + 1;
    if (HIWORD(v13))
    {
      int v12 = *(_DWORD *)((char *)a1 + v10);
      if (!v12) {
        goto LABEL_35;
      }
      goto LABEL_27;
    }
    if (v13 > 0xFF)
    {
      int v12 = *(unsigned __int16 *)((char *)a1 + v10);
      if (!*(unsigned __int16 *)((char *)a1 + v10)) {
        goto LABEL_35;
      }
      goto LABEL_27;
    }
    if (v13 < 2)
    {
LABEL_35:
      if (v7)
      {
        if (v3 <= 3)
        {
          unsigned int v21 = ((1 << (8 * v3)) + 1) >> (8 * v3);
          if (v21 > 0xFFFC)
          {
            unsigned int v16 = *(_DWORD *)((char *)a1 + v3);
            unsigned int v17 = ~v16;
LABEL_45:
            unsigned int v24 = 0x7FFFFFFF;
LABEL_46:
            if (v24 > v17) {
              return -v16;
            }
            else {
              return 0;
            }
          }
          int v19 = v21 + 3;
          if (v21 > 0xFC)
          {
            int v23 = *(unsigned __int16 *)((char *)a1 + v3);
            unsigned int v16 = v23 | 0xFFFF0000;
            unsigned int v17 = v23 ^ 0xFFFF;
            char v18 = 16;
          }
          else
          {
            int v22 = *((unsigned __int8 *)a1 + v3);
            unsigned int v16 = v22 | 0xFFFFFF00;
            unsigned int v17 = v22 ^ 0xFF;
            char v18 = 8;
          }
        }
        else
        {
          int v15 = *((unsigned __int8 *)a1 + v3);
          unsigned int v16 = v15 | 0xFFFFFF00;
          unsigned int v17 = v15 ^ 0xFF;
          char v18 = 8;
          int v19 = 4;
        }
        unsigned int v24 = (1 << v18) - v19;
        if ((v24 & 0x80000000) == 0) {
          goto LABEL_46;
        }
        goto LABEL_45;
      }
      return 0;
    }
  }
  int v12 = *((unsigned __int8 *)a1 + v10);
  if (!*((unsigned char *)a1 + v10)) {
    goto LABEL_35;
  }
LABEL_27:
  int v14 = (v12 - 1) << v11;
  if (v10 > 3) {
    int v14 = 0;
  }
  if (v10)
  {
    if (v10 > 3) {
      LODWORD(v10) = 4;
    }
    switch((int)v10)
    {
      case 2:
        LODWORD(v10) = *a1;
        break;
      case 3:
        LODWORD(v10) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v10) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v10) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v7 + (v10 | v14) + 1;
}

void storeEnumTagSinglePayload for AnimatedValueKeyframe.InterpolationParameters.Mode(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  unint64_t v5 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  if (v5 <= 0x18) {
    unint64_t v5 = 24;
  }
  char v6 = 8 * v5;
  if (v5 > 3)
  {
    int v7 = 4;
LABEL_5:
    char v8 = 8;
    goto LABEL_6;
  }
  unsigned int v10 = ((1 << v6) + 1) >> v6;
  if (v10 > 0xFFFC) {
    goto LABEL_12;
  }
  int v7 = v10 + 3;
  if (v10 <= 0xFC) {
    goto LABEL_5;
  }
  char v8 = 16;
LABEL_6:
  unsigned int v9 = (1 << v8) - v7;
  if ((v9 & 0x80000000) == 0)
  {
    if (v5 > 3) {
      goto LABEL_16;
    }
    goto LABEL_13;
  }
LABEL_12:
  unsigned int v9 = 0x7FFFFFFF;
  if (v5 > 3)
  {
LABEL_16:
    uint64_t v12 = 1;
    goto LABEL_17;
  }
LABEL_13:
  unsigned int v11 = ((1 << v6) + 1) >> v6;
  uint64_t v12 = 2;
  if (v11 > 0xFFFC) {
    uint64_t v12 = 4;
  }
  if (v11 <= 0xFC) {
    goto LABEL_16;
  }
LABEL_17:
  size_t v13 = v12 + v5;
  if (a3 <= v9)
  {
    int v14 = 0;
  }
  else if (v13 <= 3)
  {
    unsigned int v17 = ((a3 - v9 + ~(-1 << (8 * v13))) >> (8 * v13)) + 1;
    if (HIWORD(v17))
    {
      int v14 = 4;
    }
    else if (v17 >= 0x100)
    {
      int v14 = 2;
    }
    else
    {
      int v14 = v17 > 1;
    }
  }
  else
  {
    int v14 = 1;
  }
  if (v9 < a2)
  {
    unsigned int v15 = ~v9 + a2;
    if (v13 < 4)
    {
      int v16 = (v15 >> (8 * v13)) + 1;
      if (v13)
      {
        int v18 = v15 & ~(-1 << (8 * v13));
        bzero(a1, v13);
        if (v13 == 3)
        {
          *(_WORD *)a1 = v18;
          a1[2] = BYTE2(v18);
        }
        else if (v13 == 2)
        {
          *(_WORD *)a1 = v18;
        }
        else
        {
          *a1 = v18;
        }
      }
    }
    else
    {
      bzero(a1, v13);
      *(_DWORD *)a1 = v15;
      int v16 = 1;
    }
    switch(v14)
    {
      case 1:
        a1[v13] = v16;
        return;
      case 2:
        *(_WORD *)&a1[v13] = v16;
        return;
      case 3:
        goto LABEL_53;
      case 4:
        *(_DWORD *)&a1[v13] = v16;
        return;
      default:
        return;
    }
  }
  switch(v14)
  {
    case 1:
      a1[v13] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_37;
    case 2:
      *(_WORD *)&a1[v13] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_37;
    case 3:
LABEL_53:
      __break(1u);
      JUMPOUT(0x187C0CB64);
    case 4:
      *(_DWORD *)&a1[v13] = 0;
      goto LABEL_36;
    default:
LABEL_36:
      if (!a2) {
        return;
      }
LABEL_37:
      int v19 = -a2;
      if (v5 > 3) {
        goto LABEL_38;
      }
      unsigned int v20 = ((1 << v6) + 1) >> v6;
      if (v20 > 0xFFFC)
      {
        *(_DWORD *)&a1[v5] = v19;
      }
      else if (v20 <= 0xFC)
      {
LABEL_38:
        a1[v5] = v19;
      }
      else
      {
        *(_WORD *)&a1[v5] = v19;
      }
      return;
  }
}

uint64_t getEnumTag for AnimatedValueKeyframe.InterpolationParameters.Mode(unsigned __int8 *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(*(void *)(a2 + 16) - 8);
  uint64_t v3 = 24;
  if (*(void *)(v2 + 64) > 0x18uLL) {
    uint64_t v3 = *(void *)(v2 + 64);
  }
  if (v3 > 3) {
    goto LABEL_4;
  }
  unsigned int v5 = ((1 << (8 * v3)) + 1) >> (8 * v3);
  if (v5 > 0xFFFC)
  {
    uint64_t v4 = *(unsigned int *)&a1[v3];
  }
  else
  {
    if (v5 <= 0xFC)
    {
LABEL_4:
      uint64_t v4 = a1[v3];
      goto LABEL_9;
    }
    uint64_t v4 = *(unsigned __int16 *)&a1[v3];
  }
LABEL_9:
  int v6 = v4 - 3;
  if (v4 >= 3)
  {
    if (v3 <= 3) {
      uint64_t v7 = v3;
    }
    else {
      uint64_t v7 = 4;
    }
    switch(v7)
    {
      case 1:
        int v8 = *a1;
        goto LABEL_18;
      case 2:
        int v8 = *(unsigned __int16 *)a1;
        goto LABEL_18;
      case 3:
        int v8 = *(unsigned __int16 *)a1 | (a1[2] << 16);
        goto LABEL_18;
      case 4:
        int v8 = *(_DWORD *)a1;
LABEL_18:
        unsigned int v9 = (v8 | (v6 << (8 * v3))) + 3;
        LODWORD(v4) = v8 + 3;
        if (v3 >= 4) {
          uint64_t v4 = v4;
        }
        else {
          uint64_t v4 = v9;
        }
        break;
      default:
        return v4;
    }
  }
  return v4;
}

void destructiveInjectEnumTag for AnimatedValueKeyframe.InterpolationParameters.Mode(unsigned char *a1, unsigned int a2, uint64_t a3)
{
  if (*(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) <= 0x18uLL) {
    size_t v5 = 24;
  }
  else {
    size_t v5 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  }
  if (a2 > 2)
  {
    unsigned int v6 = a2 - 3;
    if (v5 < 4)
    {
      int v8 = (v6 >> (8 * v5)) + 3;
      v6 &= ~(-1 << (8 * v5));
      unsigned int v9 = (int *)&a1[v5];
      unsigned int v10 = ((1 << (8 * v5)) + 1) >> (8 * v5);
      if (v10 > 0xFFFC)
      {
        *unsigned int v9 = v8;
      }
      else if (v10 > 0xFC)
      {
        *(_WORD *)unsigned int v9 = v8;
      }
      else
      {
        *(unsigned char *)unsigned int v9 = v8;
      }
    }
    else
    {
      a1[v5] = 3;
    }
    if (v5 <= 3) {
      int v11 = v5;
    }
    else {
      int v11 = 4;
    }
    bzero(a1, v5);
    switch(v11)
    {
      case 2:
        *(_WORD *)a1 = v6;
        break;
      case 3:
        *(_WORD *)a1 = v6;
        a1[2] = BYTE2(v6);
        break;
      case 4:
        *(_DWORD *)a1 = v6;
        break;
      default:
        *a1 = v6;
        break;
    }
  }
  else
  {
    if (v5 > 3)
    {
LABEL_6:
      a1[v5] = a2;
      return;
    }
    unsigned int v7 = ((1 << (8 * v5)) + 1) >> (8 * v5);
    if (v7 > 0xFFFC)
    {
      *(_DWORD *)&a1[v5] = a2;
    }
    else
    {
      if (v7 <= 0xFC) {
        goto LABEL_6;
      }
      *(_WORD *)&a1[v5] = a2;
    }
  }
}

void static SliderStyle<>.capsule.getter()
{
}

void CapsuleSliderStyle.makeBody(configuration:)()
{
}

uint64_t associated type witness table accessor for SliderStyle.Body : View in CapsuleSliderStyle()
{
  return swift_getOpaqueTypeConformance2();
}

ValueMetadata *type metadata accessor for CapsuleSliderStyle()
{
  return &type metadata for CapsuleSliderStyle;
}

uint64_t sub_187C0CE54()
{
  return lazy protocol witness table accessor for type CapsuleSlider<ModifiedContent<SliderStyleConfiguration.Label, LabelStyleWritingModifier<IconOnlyLabelStyle>>> and conformance CapsuleSlider<A>(&lazy protocol witness table cache variable for type CapsuleSlider<ModifiedContent<SliderStyleConfiguration.Label, LabelStyleWritingModifier<IconOnlyLabelStyle>>> and conformance CapsuleSlider<A>, (void (*)(uint64_t))type metadata accessor for CapsuleSlider<ModifiedContent<SliderStyleConfiguration.Label, LabelStyleWritingModifier<IconOnlyLabelStyle>>>);
}

void type metadata accessor for CapsuleSlider<ModifiedContent<SliderStyleConfiguration.Label, LabelStyleWritingModifier<IconOnlyLabelStyle>>>()
{
  if (!lazy cache variable for type metadata for CapsuleSlider<ModifiedContent<SliderStyleConfiguration.Label, LabelStyleWritingModifier<IconOnlyLabelStyle>>>)
  {
    type metadata accessor for ModifiedContent<SliderStyleConfiguration.Label, LabelStyleWritingModifier<IconOnlyLabelStyle>>();
    lazy protocol witness table accessor for type ModifiedContent<SliderStyleConfiguration.Label, LabelStyleWritingModifier<IconOnlyLabelStyle>> and conformance <> ModifiedContent<A, B>();
    unint64_t v0 = type metadata accessor for CapsuleSlider();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for CapsuleSlider<ModifiedContent<SliderStyleConfiguration.Label, LabelStyleWritingModifier<IconOnlyLabelStyle>>>);
    }
  }
}

void type metadata accessor for ModifiedContent<SliderStyleConfiguration.Label, LabelStyleWritingModifier<IconOnlyLabelStyle>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<SliderStyleConfiguration.Label, LabelStyleWritingModifier<IconOnlyLabelStyle>>)
  {
    type metadata accessor for LabelStyleWritingModifier<IconOnlyLabelStyle>();
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<SliderStyleConfiguration.Label, LabelStyleWritingModifier<IconOnlyLabelStyle>>);
    }
  }
}

void type metadata accessor for LabelStyleWritingModifier<IconOnlyLabelStyle>()
{
  if (!lazy cache variable for type metadata for LabelStyleWritingModifier<IconOnlyLabelStyle>)
  {
    lazy protocol witness table accessor for type IconOnlyLabelStyle and conformance IconOnlyLabelStyle();
    unint64_t v0 = type metadata accessor for LabelStyleWritingModifier();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for LabelStyleWritingModifier<IconOnlyLabelStyle>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type IconOnlyLabelStyle and conformance IconOnlyLabelStyle()
{
  unint64_t result = lazy protocol witness table cache variable for type IconOnlyLabelStyle and conformance IconOnlyLabelStyle;
  if (!lazy protocol witness table cache variable for type IconOnlyLabelStyle and conformance IconOnlyLabelStyle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IconOnlyLabelStyle and conformance IconOnlyLabelStyle);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<SliderStyleConfiguration.Label, LabelStyleWritingModifier<IconOnlyLabelStyle>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<SliderStyleConfiguration.Label, LabelStyleWritingModifier<IconOnlyLabelStyle>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<SliderStyleConfiguration.Label, LabelStyleWritingModifier<IconOnlyLabelStyle>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<SliderStyleConfiguration.Label, LabelStyleWritingModifier<IconOnlyLabelStyle>>();
    lazy protocol witness table accessor for type CapsuleSlider<ModifiedContent<SliderStyleConfiguration.Label, LabelStyleWritingModifier<IconOnlyLabelStyle>>> and conformance CapsuleSlider<A>(&lazy protocol witness table cache variable for type LabelStyleWritingModifier<IconOnlyLabelStyle> and conformance LabelStyleWritingModifier<A>, (void (*)(uint64_t))type metadata accessor for LabelStyleWritingModifier<IconOnlyLabelStyle>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<SliderStyleConfiguration.Label, LabelStyleWritingModifier<IconOnlyLabelStyle>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type CapsuleSlider<ModifiedContent<SliderStyleConfiguration.Label, LabelStyleWritingModifier<IconOnlyLabelStyle>>> and conformance CapsuleSlider<A>(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void static ToolbarBackgroundVisibility.automatic.getter(unsigned char *a1@<X8>)
{
  *a1 = 0;
}

void static ToolbarBackgroundVisibility.visible.getter(unsigned char *a1@<X8>)
{
  *a1 = 1;
}

void static ToolbarBackgroundVisibility.visibleOnScroll.getter()
{
}

void static ToolbarBackgroundVisibility.hidden.getter(unsigned char *a1@<X8>)
{
  *a1 = 3;
}

BOOL static ToolbarBackgroundVisibility.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t ToolbarBackgroundVisibility.init(_:)@<X0>(uint64_t result@<X0>, unsigned char *a2@<X8>)
{
  *a2 = 0x30100u >> (8 * result);
  return result;
}

uint64_t View.toolbarBackground<A>(_:for:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  double v8 = MEMORY[0x1F4188790](a1);
  (*(void (**)(char *, double))(v10 + 16))(&v13[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)], v8);
  uint64_t v11 = AnyShapeStyle.init<A>(_:)();
  v13[0] = 4;
  char v27 = 2;
  char v26 = 3;
  char v25 = 3;
  swift_bridgeObjectRetain();
  ToolbarAppearanceModifier.init(visibility:foregroundStyle:background:backgroundVisibility:backgroundVisibilityOnScrollDistance:backgroundOpacity:colorScheme:toolbarLegibility:fullScreenVisibility:bars:context:)(3, 0, v11, v13, 0, 1, 0, 1, (uint64_t)v28, &v27, &v26, &v25, a2, 2);
  v13[0] = v28[0];
  uint64_t v14 = v29;
  uint64_t v15 = v30;
  char v16 = v31;
  uint64_t v17 = v32;
  char v18 = v33;
  uint64_t v19 = v34;
  char v20 = v35;
  __int16 v21 = v36;
  char v22 = v37;
  uint64_t v23 = v38;
  char v24 = v39;
  MEMORY[0x18C113660](v13, a3, &type metadata for ToolbarAppearanceModifier, a5);
  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

uint64_t View.toolbarBackground(_:for:)(char a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v8[0] = 0x30100u >> (8 * a1);
  char v22 = 2;
  char v21 = 3;
  char v20 = 3;
  swift_bridgeObjectRetain();
  ToolbarAppearanceModifier.init(visibility:foregroundStyle:background:backgroundVisibility:backgroundVisibilityOnScrollDistance:backgroundOpacity:colorScheme:toolbarLegibility:fullScreenVisibility:bars:context:)(3, 0, 0, v8, 0, 1, 0, 1, (uint64_t)v23, &v22, &v21, &v20, a2, 1);
  v8[0] = v23[0];
  uint64_t v9 = v24;
  uint64_t v10 = v25;
  char v11 = v26;
  uint64_t v12 = v27;
  char v13 = v28;
  uint64_t v14 = v29;
  char v15 = v30;
  __int16 v16 = v31;
  char v17 = v32;
  uint64_t v18 = v33;
  char v19 = v34;
  MEMORY[0x18C113660](v8, a3, &type metadata for ToolbarAppearanceModifier, a4);
  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

uint64_t View.toolbarColorScheme(_:for:)(char *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char v7 = *a1;
  v9[0] = 4;
  char v23 = v7;
  char v22 = 3;
  char v21 = 3;
  swift_bridgeObjectRetain();
  ToolbarAppearanceModifier.init(visibility:foregroundStyle:background:backgroundVisibility:backgroundVisibilityOnScrollDistance:backgroundOpacity:colorScheme:toolbarLegibility:fullScreenVisibility:bars:context:)(3, 0, 0, v9, 0, 1, 0, 1, (uint64_t)v24, &v23, &v22, &v21, a2, 2);
  v9[0] = v24[0];
  uint64_t v10 = v25;
  uint64_t v11 = v26;
  char v12 = v27;
  uint64_t v13 = v28;
  char v14 = v29;
  uint64_t v15 = v30;
  char v16 = v31;
  __int16 v17 = v32;
  char v18 = v33;
  uint64_t v19 = v34;
  char v20 = v35;
  MEMORY[0x18C113660](v9, a3, &type metadata for ToolbarAppearanceModifier, a4);
  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

void View.toolbarLegibility(_:for:)()
{
}

uint64_t View.toolbarForegroundStyle<A>(_:for:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  double v8 = MEMORY[0x1F4188790](a1);
  (*(void (**)(char *, double))(v10 + 16))(&v13[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)], v8);
  uint64_t v11 = AnyShapeStyle.init<A>(_:)();
  v13[0] = 4;
  char v27 = 2;
  char v26 = 3;
  char v25 = 3;
  swift_bridgeObjectRetain();
  ToolbarAppearanceModifier.init(visibility:foregroundStyle:background:backgroundVisibility:backgroundVisibilityOnScrollDistance:backgroundOpacity:colorScheme:toolbarLegibility:fullScreenVisibility:bars:context:)(3, v11, 0, v13, 0, 1, 0, 1, (uint64_t)v28, &v27, &v26, &v25, a2, 2);
  v13[0] = v28[0];
  uint64_t v14 = v29;
  uint64_t v15 = v30;
  char v16 = v31;
  uint64_t v17 = v32;
  char v18 = v33;
  uint64_t v19 = v34;
  char v20 = v35;
  __int16 v21 = v36;
  char v22 = v37;
  uint64_t v23 = v38;
  char v24 = v39;
  MEMORY[0x18C113660](v13, a3, &type metadata for ToolbarAppearanceModifier, a5);
  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

uint64_t View.avoidNavigationBarToToolbarConversion()()
{
  return swift_release();
}

uint64_t EnvironmentValues.allowsNavigationBarToToolbarConversion.getter()
{
  if (*(void *)(v0 + 8))
  {
    type metadata accessor for FocusedValuePropertyKey<FocusedValues.__Key_toolbarVisibility>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.AllowsToolbarConversionKey>, (uint64_t)&type metadata for EnvironmentValues.AllowsToolbarConversionKey, (uint64_t)&protocol witness table for EnvironmentValues.AllowsToolbarConversionKey, MEMORY[0x1E4F40930]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.AllowsToolbarConversionKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for FocusedValuePropertyKey<FocusedValues.__Key_toolbarVisibility>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.AllowsToolbarConversionKey>, (uint64_t)&type metadata for EnvironmentValues.AllowsToolbarConversionKey, (uint64_t)&protocol witness table for EnvironmentValues.AllowsToolbarConversionKey, MEMORY[0x1E4F40930]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.AllowsToolbarConversionKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  return v2;
}

uint64_t sub_187C0D99C@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = EnvironmentValues.allowsNavigationBarToToolbarConversion.getter();
  *a1 = result & 1;
  return result;
}

uint64_t sub_187C0D9DC()
{
  return EnvironmentValues.allowsNavigationBarToToolbarConversion.setter();
}

uint64_t sub_187C0DA04()
{
  return swift_getWitnessTable();
}

uint64_t sub_187C0DA6C()
{
  return swift_getWitnessTable();
}

unint64_t lazy protocol witness table accessor for type ToolbarBackgroundVisibility.Role and conformance ToolbarBackgroundVisibility.Role()
{
  unint64_t result = lazy protocol witness table cache variable for type ToolbarBackgroundVisibility.Role and conformance ToolbarBackgroundVisibility.Role;
  if (!lazy protocol witness table cache variable for type ToolbarBackgroundVisibility.Role and conformance ToolbarBackgroundVisibility.Role)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ToolbarBackgroundVisibility.Role and conformance ToolbarBackgroundVisibility.Role);
  }
  return result;
}

uint64_t EnvironmentValues.allowsNavigationBarToToolbarConversion.setter()
{
  type metadata accessor for FocusedValuePropertyKey<FocusedValues.__Key_toolbarVisibility>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.AllowsToolbarConversionKey>, (uint64_t)&type metadata for EnvironmentValues.AllowsToolbarConversionKey, (uint64_t)&protocol witness table for EnvironmentValues.AllowsToolbarConversionKey, MEMORY[0x1E4F40930]);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.AllowsToolbarConversionKey> and conformance EnvironmentPropertyKey<A>();
  swift_retain();
  PropertyList.subscript.setter();
  if (*(void *)(v0 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  return swift_release();
}

uint64_t FocusedValues.toolbarVisibility.getter()
{
  swift_retain();
  uint64_t v0 = specialized FocusedValues.subscript.getter();
  swift_release();
  return v0;
}

uint64_t FocusedValues.toolbarVisibility.setter(uint64_t result)
{
  if (result != 3)
  {
    if ((*(unsigned char *)(v1 + 8) & 2) != 0)
    {
      if (one-time initialization token for scene == -1)
      {
LABEL_6:
        swift_bridgeObjectRetain();
        type metadata accessor for FocusedValuePropertyKey<FocusedValues.__Key_toolbarVisibility>(0, &lazy cache variable for type metadata for FocusedValuePropertyKey<FocusedValues.__Key_toolbarVisibility>, (uint64_t)&type metadata for FocusedValues.__Key_toolbarVisibility, (uint64_t)&protocol witness table for FocusedValues.__Key_toolbarVisibility, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for FocusedValuePropertyKey);
        lazy protocol witness table accessor for type FocusedValuePropertyKey<FocusedValues.__Key_toolbarVisibility> and conformance FocusedValuePropertyKey<A>();
        return PropertyList.subscript.setter();
      }
    }
    else if (one-time initialization token for view == -1)
    {
      goto LABEL_6;
    }
    swift_once();
    goto LABEL_6;
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type FocusedValuePropertyKey<FocusedValues.__Key_toolbarVisibility> and conformance FocusedValuePropertyKey<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type FocusedValuePropertyKey<FocusedValues.__Key_toolbarVisibility> and conformance FocusedValuePropertyKey<A>;
  if (!lazy protocol witness table cache variable for type FocusedValuePropertyKey<FocusedValues.__Key_toolbarVisibility> and conformance FocusedValuePropertyKey<A>)
  {
    type metadata accessor for FocusedValuePropertyKey<FocusedValues.__Key_toolbarVisibility>(255, &lazy cache variable for type metadata for FocusedValuePropertyKey<FocusedValues.__Key_toolbarVisibility>, (uint64_t)&type metadata for FocusedValues.__Key_toolbarVisibility, (uint64_t)&protocol witness table for FocusedValues.__Key_toolbarVisibility, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for FocusedValuePropertyKey);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FocusedValuePropertyKey<FocusedValues.__Key_toolbarVisibility> and conformance FocusedValuePropertyKey<A>);
  }
  return result;
}

ValueMetadata *type metadata accessor for EnvironmentValues.AllowsToolbarConversionKey()
{
  return &type metadata for EnvironmentValues.AllowsToolbarConversionKey;
}

ValueMetadata *type metadata accessor for FocusedValues.__Key_toolbarVisibility()
{
  return &type metadata for FocusedValues.__Key_toolbarVisibility;
}

uint64_t specialized PlatformListViewBase<>.backgroundHost.getter(void (*a1)(double))
{
  type metadata accessor for UIBackgroundConfiguration?();
  double v3 = MEMORY[0x1F4188790](v2 - 8);
  size_t v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  a1(v3);
  uint64_t v6 = type metadata accessor for UIBackgroundConfiguration();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v6 - 8) + 48))(v5, 1, v6))
  {
    outlined destroy of UIBackgroundConfiguration?((uint64_t)v5);
    return 0;
  }
  double v8 = (void *)UIBackgroundConfiguration.customView.getter();
  outlined destroy of UIBackgroundConfiguration?((uint64_t)v5);
  if (!v8) {
    return 0;
  }
  type metadata accessor for _UIHostingView<ModifiedContent<AnyView, EmptyModifier>>();
  uint64_t result = swift_dynamicCastClass();
  if (!result)
  {

    return 0;
  }
  return result;
}

uint64_t protocol witness for PlatformListViewBase.backgroundHost.getter in conformance ListTableViewHeaderFooter()
{
  return specialized PlatformListViewBase<>.backgroundHost.getter(MEMORY[0x1E4FB1170]);
}

uint64_t protocol witness for PlatformListViewBase.backgroundHost.getter in conformance ListTableViewCell()
{
  return specialized PlatformListViewBase<>.backgroundHost.getter(MEMORY[0x1E4FB11A0]);
}

uint64_t *initializeBufferWithCopyOfBuffer for ResolvedMultiDatePicker(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = type metadata accessor for MultiDatePickerStyleConfiguration(0);
  int v5 = *(_DWORD *)(*(void *)(v4 - 8) + 80);
  uint64_t v6 = *a2;
  *a1 = *a2;
  if ((v5 & 0x20000) != 0)
  {
    a1 = (uint64_t *)(v6 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = v4;
    uint64_t v8 = a2[2];
    a1[1] = a2[1];
    a1[2] = v8;
    uint64_t v9 = *(int *)(v4 + 24);
    __dst = (char *)a1 + v9;
    uint64_t v10 = (char *)a2 + v9;
    uint64_t v11 = type metadata accessor for Date();
    uint64_t v12 = *(void *)(v11 - 8);
    uint64_t v13 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48);
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    if (v13(v10, 1, v11))
    {
      _s10Foundation4DateVSgMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for Date?, MEMORY[0x1E4F27928], MEMORY[0x1E4FBB718]);
      memcpy(__dst, v10, *(void *)(*(void *)(v14 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 16))(__dst, v10, v11);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(__dst, 0, 1, v11);
    }
    uint64_t v15 = *(int *)(v7 + 28);
    char v16 = (char *)a1 + v15;
    uint64_t v17 = (char *)a2 + v15;
    if (v13(v17, 1, v11))
    {
      _s10Foundation4DateVSgMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for Date?, MEMORY[0x1E4F27928], MEMORY[0x1E4FBB718]);
      memcpy(v16, v17, *(void *)(*(void *)(v18 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v16, v17, v11);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v16, 0, 1, v11);
    }
  }
  return a1;
}

uint64_t type metadata accessor for MultiDatePickerStyleConfiguration(uint64_t a1)
{
  return type metadata accessor for SortableTableHeaderButton(a1, (uint64_t *)&type metadata singleton initialization cache for MultiDatePickerStyleConfiguration);
}

uint64_t destroy for ResolvedMultiDatePicker(uint64_t a1)
{
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t v2 = type metadata accessor for MultiDatePickerStyleConfiguration(0);
  uint64_t v3 = a1 + *(int *)(v2 + 24);
  uint64_t v4 = type metadata accessor for Date();
  uint64_t v9 = *(void *)(v4 - 8);
  int v5 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
  if (!v5(v3, 1, v4)) {
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v3, v4);
  }
  uint64_t v6 = a1 + *(int *)(v2 + 28);
  uint64_t result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v5)(v6, 1, v4);
  if (!result)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t))(v9 + 8);
    return v8(v6, v4);
  }
  return result;
}

void *initializeWithCopy for ResolvedMultiDatePicker(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  a1[2] = a2[2];
  uint64_t v5 = type metadata accessor for MultiDatePickerStyleConfiguration(0);
  uint64_t v6 = *(int *)(v5 + 24);
  __dst = (char *)a1 + v6;
  uint64_t v7 = (char *)a2 + v6;
  uint64_t v8 = type metadata accessor for Date();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  if (v10(v7, 1, v8))
  {
    _s10Foundation4DateVSgMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for Date?, MEMORY[0x1E4F27928], MEMORY[0x1E4FBB718]);
    memcpy(__dst, v7, *(void *)(*(void *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 16))(__dst, v7, v8);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v9 + 56))(__dst, 0, 1, v8);
  }
  uint64_t v12 = *(int *)(v5 + 28);
  uint64_t v13 = (char *)a1 + v12;
  uint64_t v14 = (char *)a2 + v12;
  if (v10(v14, 1, v8))
  {
    _s10Foundation4DateVSgMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for Date?, MEMORY[0x1E4F27928], MEMORY[0x1E4FBB718]);
    memcpy(v13, v14, *(void *)(*(void *)(v15 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 16))(v13, v14, v8);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v9 + 56))(v13, 0, 1, v8);
  }
  return a1;
}

char *assignWithCopy for ResolvedMultiDatePicker(char *a1, void *a2)
{
  *(void *)a1 = *a2;
  swift_retain();
  swift_release();
  *((void *)a1 + 1) = a2[1];
  swift_retain();
  swift_release();
  *((void *)a1 + 2) = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = type metadata accessor for MultiDatePickerStyleConfiguration(0);
  uint64_t v5 = *(int *)(v4 + 24);
  uint64_t v6 = &a1[v5];
  uint64_t v7 = (char *)a2 + v5;
  uint64_t v8 = type metadata accessor for Date();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 48);
  int v11 = v10(v6, 1, v8);
  int v12 = v10(v7, 1, v8);
  if (v11)
  {
    if (!v12)
    {
      (*(void (**)(char *, char *, uint64_t))(v9 + 16))(v6, v7, v8);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v9 + 56))(v6, 0, 1, v8);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v12)
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(v6, v8);
LABEL_6:
    _s10Foundation4DateVSgMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for Date?, MEMORY[0x1E4F27928], MEMORY[0x1E4FBB718]);
    memcpy(v6, v7, *(void *)(*(void *)(v13 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v9 + 24))(v6, v7, v8);
LABEL_7:
  uint64_t v14 = *(int *)(v4 + 28);
  uint64_t v15 = &a1[v14];
  char v16 = (char *)a2 + v14;
  int v17 = v10(&a1[v14], 1, v8);
  int v18 = v10(v16, 1, v8);
  if (!v17)
  {
    if (!v18)
    {
      (*(void (**)(char *, char *, uint64_t))(v9 + 24))(v15, v16, v8);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v9 + 8))(v15, v8);
    goto LABEL_12;
  }
  if (v18)
  {
LABEL_12:
    _s10Foundation4DateVSgMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for Date?, MEMORY[0x1E4F27928], MEMORY[0x1E4FBB718]);
    memcpy(v15, v16, *(void *)(*(void *)(v19 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v9 + 16))(v15, v16, v8);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v9 + 56))(v15, 0, 1, v8);
  return a1;
}

uint64_t initializeWithTake for ResolvedMultiDatePicker(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  uint64_t v4 = type metadata accessor for MultiDatePickerStyleConfiguration(0);
  uint64_t v5 = *(int *)(v4 + 24);
  uint64_t v6 = (void *)(a1 + v5);
  uint64_t v7 = (const void *)(a2 + v5);
  uint64_t v8 = type metadata accessor for Date();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v9 + 48);
  if (v10(v7, 1, v8))
  {
    _s10Foundation4DateVSgMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for Date?, MEMORY[0x1E4F27928], MEMORY[0x1E4FBB718]);
    memcpy(v6, v7, *(void *)(*(void *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v9 + 32))(v6, v7, v8);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v9 + 56))(v6, 0, 1, v8);
  }
  uint64_t v12 = *(int *)(v4 + 28);
  uint64_t v13 = (void *)(a1 + v12);
  uint64_t v14 = (const void *)(a2 + v12);
  if (v10(v14, 1, v8))
  {
    _s10Foundation4DateVSgMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for Date?, MEMORY[0x1E4F27928], MEMORY[0x1E4FBB718]);
    memcpy(v13, v14, *(void *)(*(void *)(v15 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v9 + 32))(v13, v14, v8);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v9 + 56))(v13, 0, 1, v8);
  }
  return a1;
}

char *assignWithTake for ResolvedMultiDatePicker(char *a1, void *a2)
{
  *(void *)a1 = *a2;
  swift_release();
  *((void *)a1 + 1) = a2[1];
  swift_release();
  *((void *)a1 + 2) = a2[2];
  swift_bridgeObjectRelease();
  uint64_t v4 = type metadata accessor for MultiDatePickerStyleConfiguration(0);
  uint64_t v5 = *(int *)(v4 + 24);
  uint64_t v6 = &a1[v5];
  uint64_t v7 = (char *)a2 + v5;
  uint64_t v8 = type metadata accessor for Date();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 48);
  int v11 = v10(v6, 1, v8);
  int v12 = v10(v7, 1, v8);
  if (v11)
  {
    if (!v12)
    {
      (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v6, v7, v8);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v9 + 56))(v6, 0, 1, v8);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v12)
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(v6, v8);
LABEL_6:
    _s10Foundation4DateVSgMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for Date?, MEMORY[0x1E4F27928], MEMORY[0x1E4FBB718]);
    memcpy(v6, v7, *(void *)(*(void *)(v13 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v9 + 40))(v6, v7, v8);
LABEL_7:
  uint64_t v14 = *(int *)(v4 + 28);
  uint64_t v15 = &a1[v14];
  char v16 = (char *)a2 + v14;
  int v17 = v10(&a1[v14], 1, v8);
  int v18 = v10(v16, 1, v8);
  if (!v17)
  {
    if (!v18)
    {
      (*(void (**)(char *, char *, uint64_t))(v9 + 40))(v15, v16, v8);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v9 + 8))(v15, v8);
    goto LABEL_12;
  }
  if (v18)
  {
LABEL_12:
    _s10Foundation4DateVSgMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for Date?, MEMORY[0x1E4F27928], MEMORY[0x1E4FBB718]);
    memcpy(v15, v16, *(void *)(*(void *)(v19 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v15, v16, v8);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v9 + 56))(v15, 0, 1, v8);
  return a1;
}

uint64_t getEnumTagSinglePayload for ResolvedMultiDatePicker(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_187C0EE88);
}

uint64_t sub_187C0EE88(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for MultiDatePickerStyleConfiguration(0);
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48);

  return v5(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for ResolvedMultiDatePicker(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_187C0EF08);
}

uint64_t sub_187C0EF08(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for MultiDatePickerStyleConfiguration(0);
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);

  return v5(a1, a2, a2, v4);
}

uint64_t type metadata accessor for ResolvedMultiDatePicker(uint64_t a1)
{
  return type metadata accessor for SortableTableHeaderButton(a1, (uint64_t *)&type metadata singleton initialization cache for ResolvedMultiDatePicker);
}

uint64_t type metadata completion function for ResolvedMultiDatePicker()
{
  uint64_t result = type metadata accessor for MultiDatePickerStyleConfiguration(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for MultiDatePickerStyleConfiguration(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  uint64_t v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    uint64_t v7 = (uint64_t *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain();
  }
  else
  {
    uint64_t v7 = a1;
    uint64_t v8 = a2[2];
    a1[1] = a2[1];
    a1[2] = v8;
    uint64_t v9 = *(int *)(a3 + 24);
    __dst = (char *)a1 + v9;
    uint64_t v10 = (char *)a2 + v9;
    uint64_t v11 = type metadata accessor for Date();
    uint64_t v12 = *(void *)(v11 - 8);
    uint64_t v13 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48);
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    if (v13(v10, 1, v11))
    {
      _s10Foundation4DateVSgMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for Date?, MEMORY[0x1E4F27928], MEMORY[0x1E4FBB718]);
      memcpy(__dst, v10, *(void *)(*(void *)(v14 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 16))(__dst, v10, v11);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(__dst, 0, 1, v11);
    }
    uint64_t v15 = *(int *)(a3 + 28);
    char v16 = (char *)v7 + v15;
    int v17 = (char *)a2 + v15;
    if (v13(v17, 1, v11))
    {
      _s10Foundation4DateVSgMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for Date?, MEMORY[0x1E4F27928], MEMORY[0x1E4FBB718]);
      memcpy(v16, v17, *(void *)(*(void *)(v18 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v16, v17, v11);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v16, 0, 1, v11);
    }
  }
  return v7;
}

uint64_t destroy for MultiDatePickerStyleConfiguration(uint64_t a1, uint64_t a2)
{
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 24);
  uint64_t v5 = type metadata accessor for Date();
  uint64_t v10 = *(void *)(v5 - 8);
  uint64_t v6 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48);
  if (!v6(v4, 1, v5)) {
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v4, v5);
  }
  uint64_t v7 = a1 + *(int *)(a2 + 28);
  uint64_t result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v6)(v7, 1, v5);
  if (!result)
  {
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t))(v10 + 8);
    return v9(v7, v5);
  }
  return result;
}

void *initializeWithCopy for MultiDatePickerStyleConfiguration(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  a1[2] = a2[2];
  uint64_t v7 = *(int *)(a3 + 24);
  __dst = (char *)a1 + v7;
  uint64_t v8 = (char *)a2 + v7;
  uint64_t v9 = type metadata accessor for Date();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  if (v11(v8, 1, v9))
  {
    _s10Foundation4DateVSgMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for Date?, MEMORY[0x1E4F27928], MEMORY[0x1E4FBB718]);
    memcpy(__dst, v8, *(void *)(*(void *)(v12 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 16))(__dst, v8, v9);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(__dst, 0, 1, v9);
  }
  uint64_t v13 = *(int *)(a3 + 28);
  uint64_t v14 = (char *)a1 + v13;
  uint64_t v15 = (char *)a2 + v13;
  if (v11(v15, 1, v9))
  {
    _s10Foundation4DateVSgMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for Date?, MEMORY[0x1E4F27928], MEMORY[0x1E4FBB718]);
    memcpy(v14, v15, *(void *)(*(void *)(v16 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v14, v15, v9);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v14, 0, 1, v9);
  }
  return a1;
}

char *assignWithCopy for MultiDatePickerStyleConfiguration(char *a1, void *a2, uint64_t a3)
{
  *(void *)a1 = *a2;
  swift_retain();
  swift_release();
  *((void *)a1 + 1) = a2[1];
  swift_retain();
  swift_release();
  *((void *)a1 + 2) = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(int *)(a3 + 24);
  uint64_t v7 = &a1[v6];
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for Date();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48);
  int v12 = v11(v7, 1, v9);
  int v13 = v11(v8, 1, v9);
  if (v12)
  {
    if (!v13)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v7, v8, v9);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v13)
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v7, v9);
LABEL_6:
    _s10Foundation4DateVSgMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for Date?, MEMORY[0x1E4F27928], MEMORY[0x1E4FBB718]);
    memcpy(v7, v8, *(void *)(*(void *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 24))(v7, v8, v9);
LABEL_7:
  uint64_t v15 = *(int *)(a3 + 28);
  uint64_t v16 = &a1[v15];
  int v17 = (char *)a2 + v15;
  int v18 = v11(&a1[v15], 1, v9);
  int v19 = v11(v17, 1, v9);
  if (!v18)
  {
    if (!v19)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 24))(v16, v17, v9);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v10 + 8))(v16, v9);
    goto LABEL_12;
  }
  if (v19)
  {
LABEL_12:
    _s10Foundation4DateVSgMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for Date?, MEMORY[0x1E4F27928], MEMORY[0x1E4FBB718]);
    memcpy(v16, v17, *(void *)(*(void *)(v20 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v16, v17, v9);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v16, 0, 1, v9);
  return a1;
}

uint64_t initializeWithTake for MultiDatePickerStyleConfiguration(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  uint64_t v6 = *(int *)(a3 + 24);
  uint64_t v7 = (void *)(a1 + v6);
  uint64_t v8 = (const void *)(a2 + v6);
  uint64_t v9 = type metadata accessor for Date();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v10 + 48);
  if (v11(v8, 1, v9))
  {
    _s10Foundation4DateVSgMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for Date?, MEMORY[0x1E4F27928], MEMORY[0x1E4FBB718]);
    memcpy(v7, v8, *(void *)(*(void *)(v12 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v10 + 32))(v7, v8, v9);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  uint64_t v13 = *(int *)(a3 + 28);
  uint64_t v14 = (void *)(a1 + v13);
  uint64_t v15 = (const void *)(a2 + v13);
  if (v11(v15, 1, v9))
  {
    _s10Foundation4DateVSgMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for Date?, MEMORY[0x1E4F27928], MEMORY[0x1E4FBB718]);
    memcpy(v14, v15, *(void *)(*(void *)(v16 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v10 + 32))(v14, v15, v9);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v14, 0, 1, v9);
  }
  return a1;
}

char *assignWithTake for MultiDatePickerStyleConfiguration(char *a1, void *a2, uint64_t a3)
{
  *(void *)a1 = *a2;
  swift_release();
  *((void *)a1 + 1) = a2[1];
  swift_release();
  *((void *)a1 + 2) = a2[2];
  swift_bridgeObjectRelease();
  uint64_t v6 = *(int *)(a3 + 24);
  uint64_t v7 = &a1[v6];
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for Date();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48);
  int v12 = v11(v7, 1, v9);
  int v13 = v11(v8, 1, v9);
  if (v12)
  {
    if (!v13)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v7, v8, v9);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v13)
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v7, v9);
LABEL_6:
    _s10Foundation4DateVSgMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for Date?, MEMORY[0x1E4F27928], MEMORY[0x1E4FBB718]);
    memcpy(v7, v8, *(void *)(*(void *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 40))(v7, v8, v9);
LABEL_7:
  uint64_t v15 = *(int *)(a3 + 28);
  uint64_t v16 = &a1[v15];
  int v17 = (char *)a2 + v15;
  int v18 = v11(&a1[v15], 1, v9);
  int v19 = v11(v17, 1, v9);
  if (!v18)
  {
    if (!v19)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 40))(v16, v17, v9);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v10 + 8))(v16, v9);
    goto LABEL_12;
  }
  if (v19)
  {
LABEL_12:
    _s10Foundation4DateVSgMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for Date?, MEMORY[0x1E4F27928], MEMORY[0x1E4FBB718]);
    memcpy(v16, v17, *(void *)(*(void *)(v20 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v16, v17, v9);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v16, 0, 1, v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for MultiDatePickerStyleConfiguration(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_187C0FEAC);
}

uint64_t sub_187C0FEAC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    _s10Foundation4DateVSgMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for Date?, MEMORY[0x1E4F27928], MEMORY[0x1E4FBB718]);
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 24);
    return v9(v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for MultiDatePickerStyleConfiguration(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_187C0FFA0);
}

uint64_t sub_187C0FFA0(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }
  else
  {
    _s10Foundation4DateVSgMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for Date?, MEMORY[0x1E4F27928], MEMORY[0x1E4FBB718]);
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 24);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

void type metadata completion function for MultiDatePickerStyleConfiguration()
{
  _s10Foundation4DateVSgMaTm_0(319, (unint64_t *)&lazy cache variable for type metadata for Date?, MEMORY[0x1E4F27928], MEMORY[0x1E4FBB718]);
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

_UNKNOWN **base witness table accessor for View in ResolvedMultiDatePicker()
{
  return &protocol witness table for ResolvedMultiDatePicker;
}

uint64_t MultiDatePickerValue.Init.base.getter@<X0>(uint64_t a1@<X8>)
{
  type metadata accessor for ResolvedMultiDatePicker(0);
  uint64_t Value = AGGraphGetValue();

  return outlined init with copy of ResolvedMultiDatePicker(Value, a1);
}

uint64_t MultiDatePickerValue.Init.value.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = type metadata accessor for MultiDatePickerStyleConfiguration(0);
  MEMORY[0x1F4188790](v5 - 8);
  uint64_t v7 = (char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for ResolvedMultiDatePicker(0);
  MEMORY[0x1F4188790](v8 - 8);
  uint64_t v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = *(void *)(a1 + 16);
  double v13 = MEMORY[0x1F4188790](v12);
  uint64_t v15 = (char *)&v18 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v16 + 16))(v15, v2 + *(int *)(a1 + 36), v11, v13);
  MultiDatePickerValue.Init.base.getter((uint64_t)v10);
  outlined init with take of MultiDatePickerStyleConfiguration((uint64_t)v10, (uint64_t)v7);
  return MultiDatePickerValue.init(style:configuration:)((uint64_t)v15, (uint64_t)v7, v11, a2);
}

uint64_t MultiDatePickerValue.init(style:configuration:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a3 - 8) + 32))(a4, a1);
  uint64_t v6 = a4 + *(int *)(type metadata accessor for MultiDatePickerValue() + 36);

  return outlined init with take of MultiDatePickerStyleConfiguration(a2, v6);
}

uint64_t protocol witness for static Rule.initialValue.getter in conformance MultiDatePickerValue<A>.Init@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for MultiDatePickerValue();
  int v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56);

  return v3(a1, 1, 1, v2);
}

uint64_t specialized static ResolvedMultiDatePicker.makeView<A>(view:style:inputs:)()
{
  return static View.makeView(view:inputs:)();
}

uint64_t specialized static ResolvedMultiDatePicker.makeViewList<A>(view:style:inputs:)()
{
  return static View.makeViewList(view:inputs:)();
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance ResolvedMultiDatePicker()
{
  return specialized static ResolvedMultiDatePicker.makeView<A>(view:style:inputs:)();
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance ResolvedMultiDatePicker()
{
  return specialized static ResolvedMultiDatePicker.makeViewList<A>(view:style:inputs:)();
}

void protocol witness for View.body.getter in conformance ResolvedMultiDatePicker()
{
}

uint64_t type metadata accessor for MultiDatePickerValue()
{
  return __swift_instantiateGenericMetadata();
}

void type metadata accessor for MultiDatePickerValue<AutomaticMultiDatePickerStyle>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void, ValueMetadata *, _UNKNOWN **))
{
  if (!*a2)
  {
    unint64_t v4 = a3(0, &type metadata for AutomaticMultiDatePickerStyle, &protocol witness table for AutomaticMultiDatePickerStyle);
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t type metadata accessor for MultiDatePickerValue.Init()
{
  return __swift_instantiateGenericMetadata();
}

unint64_t lazy protocol witness table accessor for type MultiDatePickerValue<AutomaticMultiDatePickerStyle>.Init and conformance MultiDatePickerValue<A>.Init()
{
  unint64_t result = lazy protocol witness table cache variable for type MultiDatePickerValue<AutomaticMultiDatePickerStyle>.Init and conformance MultiDatePickerValue<A>.Init;
  if (!lazy protocol witness table cache variable for type MultiDatePickerValue<AutomaticMultiDatePickerStyle>.Init and conformance MultiDatePickerValue<A>.Init)
  {
    type metadata accessor for MultiDatePickerValue<AutomaticMultiDatePickerStyle>(255, &lazy cache variable for type metadata for MultiDatePickerValue<AutomaticMultiDatePickerStyle>.Init, (uint64_t (*)(void, ValueMetadata *, _UNKNOWN **))type metadata accessor for MultiDatePickerValue.Init);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MultiDatePickerValue<AutomaticMultiDatePickerStyle>.Init and conformance MultiDatePickerValue<A>.Init);
  }
  return result;
}

void type metadata accessor for _GraphValue<MultiDatePickerValue<AutomaticMultiDatePickerStyle>>()
{
  if (!lazy cache variable for type metadata for _GraphValue<MultiDatePickerValue<AutomaticMultiDatePickerStyle>>)
  {
    type metadata accessor for MultiDatePickerValue<AutomaticMultiDatePickerStyle>(255, (unint64_t *)&lazy cache variable for type metadata for MultiDatePickerValue<AutomaticMultiDatePickerStyle>, (uint64_t (*)(void, ValueMetadata *, _UNKNOWN **))type metadata accessor for MultiDatePickerValue);
    unint64_t v0 = type metadata accessor for _GraphValue();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _GraphValue<MultiDatePickerValue<AutomaticMultiDatePickerStyle>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type UIKitCalendarView and conformance UIKitCalendarView()
{
  unint64_t result = lazy protocol witness table cache variable for type UIKitCalendarView and conformance UIKitCalendarView;
  if (!lazy protocol witness table cache variable for type UIKitCalendarView and conformance UIKitCalendarView)
  {
    type metadata accessor for UIKitCalendarView(255);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UIKitCalendarView and conformance UIKitCalendarView);
  }
  return result;
}

uint64_t type metadata completion function for MultiDatePickerValue.Init()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for MultiDatePickerValue.Init(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  if (!a2) {
    return 0;
  }
  unsigned int v7 = a2 - v5;
  if (a2 <= v5) {
    goto LABEL_19;
  }
  uint64_t v8 = ((v6 + 4) & ~v6) + *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  char v9 = 8 * v8;
  if (v8 <= 3)
  {
    unsigned int v11 = ((v7 + ~(-1 << v9)) >> v9) + 1;
    if (HIWORD(v11))
    {
      int v10 = *(_DWORD *)((char *)a1 + v8);
      if (!v10) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v11 > 0xFF)
    {
      int v10 = *(unsigned __int16 *)((char *)a1 + v8);
      if (!*(unsigned __int16 *)((char *)a1 + v8)) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v11 < 2)
    {
LABEL_19:
      if (v5) {
        return (*(uint64_t (**)(unint64_t))(v4 + 48))(((unint64_t)a1 + v6 + 4) & ~v6);
      }
      return 0;
    }
  }
  int v10 = *((unsigned __int8 *)a1 + v8);
  if (!*((unsigned char *)a1 + v8)) {
    goto LABEL_19;
  }
LABEL_11:
  int v12 = (v10 - 1) << v9;
  if (v8 > 3) {
    int v12 = 0;
  }
  if (v8)
  {
    if (v8 > 3) {
      LODWORD(v8) = 4;
    }
    switch((int)v8)
    {
      case 2:
        LODWORD(v8) = *a1;
        break;
      case 3:
        LODWORD(v8) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v8) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v8) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v5 + (v8 | v12) + 1;
}

void storeEnumTagSinglePayload for MultiDatePickerValue.Init(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  uint64_t v8 = *(unsigned __int8 *)(v6 + 80);
  size_t v9 = ((v8 + 4) & ~v8) + *(void *)(v6 + 64);
  BOOL v10 = a3 >= v7;
  unsigned int v11 = a3 - v7;
  if (v11 != 0 && v10)
  {
    if (v9 <= 3)
    {
      unsigned int v15 = ((v11 + ~(-1 << (8 * v9))) >> (8 * v9)) + 1;
      if (HIWORD(v15))
      {
        int v12 = 4;
      }
      else if (v15 >= 0x100)
      {
        int v12 = 2;
      }
      else
      {
        int v12 = v15 > 1;
      }
    }
    else
    {
      int v12 = 1;
    }
  }
  else
  {
    int v12 = 0;
  }
  if (v7 < a2)
  {
    unsigned int v13 = ~v7 + a2;
    if (v9 < 4)
    {
      int v14 = (v13 >> (8 * v9)) + 1;
      if (v9)
      {
        int v16 = v13 & ~(-1 << (8 * v9));
        bzero(a1, v9);
        if (v9 == 3)
        {
          *(_WORD *)a1 = v16;
          a1[2] = BYTE2(v16);
        }
        else if (v9 == 2)
        {
          *(_WORD *)a1 = v16;
        }
        else
        {
          *a1 = v16;
        }
      }
    }
    else
    {
      bzero(a1, v9);
      *(_DWORD *)a1 = v13;
      int v14 = 1;
    }
    switch(v12)
    {
      case 1:
        a1[v9] = v14;
        return;
      case 2:
        *(_WORD *)&a1[v9] = v14;
        return;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v9] = v14;
        return;
      default:
        return;
    }
  }
  switch(v12)
  {
    case 1:
      a1[v9] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 2:
      *(_WORD *)&a1[v9] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 3:
LABEL_34:
      __break(1u);
      JUMPOUT(0x187C10F50);
    case 4:
      *(_DWORD *)&a1[v9] = 0;
      goto LABEL_20;
    default:
LABEL_20:
      if (a2)
      {
LABEL_21:
        unint64_t v17 = (unint64_t)&a1[v8 + 4] & ~v8;
        uint64_t v18 = *(void (**)(unint64_t))(v6 + 56);
        v18(v17);
      }
      return;
  }
}

uint64_t type metadata completion function for MultiDatePickerValue()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for MultiDatePickerStyleConfiguration(319);
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for MultiDatePickerValue(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void *)(v6 + 64);
  uint64_t v8 = type metadata accessor for Date();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(_DWORD *)(v9 + 80);
  uint64_t v11 = v10 | 7;
  uint64_t v12 = (v10 | 7) + v7;
  uint64_t v13 = v10 + 24;
  if (*(_DWORD *)(v9 + 84)) {
    uint64_t v14 = *(void *)(v9 + 64);
  }
  else {
    uint64_t v14 = *(void *)(v9 + 64) + 1;
  }
  uint64_t v15 = v11 | *(_DWORD *)(v6 + 80);
  if (v15 != 7
    || ((*(_DWORD *)(v6 + 80) | *(_DWORD *)(v9 + 80)) & 0x100000) != 0
    || (v12 & ~(v10 | 7)) + v14 + ((v14 + v10 + ((v10 + 24) & ~v10)) & (unint64_t)~v10) > 0x18)
  {
    uint64_t v18 = *a2;
    *a1 = *a2;
    int v19 = (uint64_t *)(v18 + ((v15 + 16) & ~v15));
    swift_retain();
  }
  else
  {
    size_t __n = v14;
    uint64_t v36 = v14 + v10;
    uint64_t v20 = v8;
    uint64_t v21 = ~v11;
    uint64_t v22 = ~v10;
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v6 + 16))(a1, a2, v5);
    char v37 = a1;
    unint64_t v23 = (unint64_t)a1 + v12;
    uint64_t v24 = v22;
    char v25 = (void *)(v23 & v21);
    char v26 = (void *)(((unint64_t)a2 + v12) & v21);
    uint64_t v27 = v20;
    *char v25 = *v26;
    v25[1] = v26[1];
    v25[2] = v26[2];
    uint64_t v28 = (void *)(((unint64_t)v25 + v13) & v22);
    uint64_t v29 = (const void *)(((unint64_t)v26 + v13) & v22);
    uint64_t v30 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v9 + 48);
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    if (v30(v29, 1, v27))
    {
      size_t v31 = __n;
      memcpy(v28, v29, __n);
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v9 + 16))(v28, v29, v27);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v9 + 56))(v28, 0, 1, v27);
      size_t v31 = __n;
    }
    uint64_t v32 = (void *)(((unint64_t)v28 + v36) & v24);
    char v33 = (const void *)(((unint64_t)v29 + v36) & v24);
    int v19 = v37;
    if (v30(v33, 1, v27))
    {
      memcpy(v32, v33, v31);
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v9 + 16))(v32, v33, v27);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v9 + 56))(v32, 0, 1, v27);
    }
  }
  return v19;
}

uint64_t destroy for MultiDatePickerValue(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(*(void *)(a2 + 16) - 8) + 8;
  (*(void (**)(void))v3)();
  uint64_t v4 = *(void *)(v3 + 56);
  uint64_t v5 = type metadata accessor for Date();
  uint64_t v16 = *(void *)(v5 - 8);
  uint64_t v6 = *(unsigned __int8 *)(v16 + 80);
  uint64_t v7 = v4 + a1 + (v6 | 7);
  uint64_t v8 = ~v6;
  unint64_t v9 = v7 & ~v6 & 0xFFFFFFFFFFFFFFF8;
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t v10 = v6 + v9 + 24;
  uint64_t v11 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v16 + 48);
  if (!v11(v10 & ~v6, 1, v5)) {
    (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v10 & ~v6, v5);
  }
  uint64_t v12 = (v10 | v6) + *(void *)(v16 + 64);
  if (!*(_DWORD *)(v16 + 84)) {
    ++v12;
  }
  uint64_t v13 = v12 & v8;
  uint64_t result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v11)(v12 & v8, 1, v5);
  if (!result)
  {
    uint64_t v15 = *(uint64_t (**)(uint64_t, uint64_t))(v16 + 8);
    return v15(v13, v5);
  }
  return result;
}

uint64_t initializeWithCopy for MultiDatePickerValue(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 16;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 48);
  uint64_t v7 = type metadata accessor for Date();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v10 = (v9 | 7) + v6;
  uint64_t v25 = a1;
  uint64_t v11 = (void *)((v10 + a1) & ~(v9 | 7));
  uint64_t v12 = (void *)((v10 + a2) & ~(v9 | 7));
  *uint64_t v11 = *v12;
  v11[1] = v12[1];
  v11[2] = v12[2];
  unint64_t v23 = (unint64_t)v11 + v9 + 24;
  uint64_t v24 = ~v9;
  uint64_t v13 = (void *)(v23 & ~v9);
  unint64_t v14 = (unint64_t)v12 + v9 + 24;
  uint64_t v15 = *(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v8 + 48);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  if (v15(v14 & ~v9, 1, v7))
  {
    int v16 = *(_DWORD *)(v8 + 84);
    size_t v17 = *(void *)(v8 + 64);
    if (v16) {
      size_t v18 = *(void *)(v8 + 64);
    }
    else {
      size_t v18 = v17 + 1;
    }
    memcpy(v13, (const void *)(v14 & ~v9), v18);
  }
  else
  {
    (*(void (**)(void *, unint64_t, uint64_t))(v8 + 16))(v13, v14 & ~v9, v7);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v8 + 56))(v13, 0, 1, v7);
    int v16 = *(_DWORD *)(v8 + 84);
    size_t v17 = *(void *)(v8 + 64);
  }
  if (v16) {
    size_t v19 = v17;
  }
  else {
    size_t v19 = v17 + 1;
  }
  uint64_t v20 = (void *)(((v23 | v9) + v19) & v24);
  uint64_t v21 = (const void *)(((v14 | v9) + v19) & v24);
  if (v15((unint64_t)v21, 1, v7))
  {
    memcpy(v20, v21, v19);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v8 + 16))(v20, v21, v7);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v8 + 56))(v20, 0, 1, v7);
  }
  return v25;
}

uint64_t assignWithCopy for MultiDatePickerValue(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 24;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 40);
  uint64_t v7 = type metadata accessor for Date();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v10 = (v9 | 7) + v6;
  uint64_t v28 = a1;
  uint64_t v11 = (void *)((v10 + a1) & ~(v9 | 7));
  uint64_t v12 = (void *)((v10 + a2) & ~(v9 | 7));
  *uint64_t v11 = *v12;
  swift_retain();
  swift_release();
  v11[1] = v12[1];
  swift_retain();
  swift_release();
  v11[2] = v12[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  unint64_t v13 = (unint64_t)v11 + v9 + 24;
  uint64_t v27 = ~v9;
  unint64_t v14 = (unint64_t)v12 + v9 + 24;
  uint64_t v15 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v8 + 48);
  int v16 = v15(v13 & ~v9, 1, v7);
  int v17 = v15(v14 & ~v9, 1, v7);
  if (v16)
  {
    if (!v17)
    {
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v8 + 16))(v13 & ~v9, v14 & ~v9, v7);
      (*(void (**)(unint64_t, void, uint64_t, uint64_t))(v8 + 56))(v13 & ~v9, 0, 1, v7);
      goto LABEL_12;
    }
    int v18 = *(_DWORD *)(v8 + 84);
    size_t v19 = *(void *)(v8 + 64);
  }
  else
  {
    if (!v17)
    {
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v8 + 24))(v13 & ~v9, v14 & ~v9, v7);
      goto LABEL_12;
    }
    (*(void (**)(unint64_t, uint64_t))(v8 + 8))(v13 & ~v9, v7);
    int v18 = *(_DWORD *)(v8 + 84);
    size_t v19 = *(void *)(v8 + 64);
  }
  if (v18) {
    size_t v20 = v19;
  }
  else {
    size_t v20 = v19 + 1;
  }
  memcpy((void *)(v13 & ~v9), (const void *)(v14 & ~v9), v20);
LABEL_12:
  if (*(_DWORD *)(v8 + 84)) {
    size_t v21 = *(void *)(v8 + 64);
  }
  else {
    size_t v21 = *(void *)(v8 + 64) + 1;
  }
  uint64_t v22 = (void *)(((v13 | v9) + v21) & v27);
  unint64_t v23 = (const void *)(((v14 | v9) + v21) & v27);
  int v24 = v15((unint64_t)v22, 1, v7);
  int v25 = v15((unint64_t)v23, 1, v7);
  if (!v24)
  {
    if (!v25)
    {
      (*(void (**)(void *, const void *, uint64_t))(v8 + 24))(v22, v23, v7);
      return v28;
    }
    (*(void (**)(void *, uint64_t))(v8 + 8))(v22, v7);
    goto LABEL_20;
  }
  if (v25)
  {
LABEL_20:
    memcpy(v22, v23, v21);
    return v28;
  }
  (*(void (**)(void *, const void *, uint64_t))(v8 + 16))(v22, v23, v7);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v8 + 56))(v22, 0, 1, v7);
  return v28;
}

uint64_t initializeWithTake for MultiDatePickerValue(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 32;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 32);
  uint64_t v7 = type metadata accessor for Date();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v10 = (v9 | 7) + v6;
  uint64_t v25 = a1;
  uint64_t v11 = (v10 + a1) & ~(v9 | 7);
  uint64_t v12 = (v10 + a2) & ~(v9 | 7);
  uint64_t v13 = *(void *)(v12 + 0x10);
  *(_OWORD *)uint64_t v11 = *(_OWORD *)v12;
  *(void *)(v11 + 16) = v13;
  uint64_t v14 = v9 + 24 + v11;
  uint64_t v15 = v9 + 24 + v12;
  uint64_t v23 = ~v9;
  int v24 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48);
  if (v24(v15 & ~v9, 1, v7))
  {
    int v16 = *(_DWORD *)(v8 + 84);
    size_t v17 = *(void *)(v8 + 64);
    if (v16) {
      size_t v18 = *(void *)(v8 + 64);
    }
    else {
      size_t v18 = v17 + 1;
    }
    memcpy((void *)(v14 & ~v9), (const void *)(v15 & ~v9), v18);
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 32))(v14 & ~v9, v15 & ~v9, v7);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v8 + 56))(v14 & ~v9, 0, 1, v7);
    int v16 = *(_DWORD *)(v8 + 84);
    size_t v17 = *(void *)(v8 + 64);
  }
  if (v16) {
    size_t v19 = v17;
  }
  else {
    size_t v19 = v17 + 1;
  }
  size_t v20 = (void *)(((v14 | v9) + v19) & v23);
  size_t v21 = (const void *)(((v15 | v9) + v19) & v23);
  if (v24((uint64_t)v21, 1, v7))
  {
    memcpy(v20, v21, v19);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v8 + 32))(v20, v21, v7);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v8 + 56))(v20, 0, 1, v7);
  }
  return v25;
}

uint64_t assignWithTake for MultiDatePickerValue(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 40;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 24);
  uint64_t v7 = type metadata accessor for Date();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v10 = (v9 | 7) + v6;
  uint64_t v28 = a1;
  uint64_t v11 = (void *)((v10 + a1) & ~(v9 | 7));
  uint64_t v12 = (void *)((v10 + a2) & ~(v9 | 7));
  *uint64_t v11 = *v12;
  swift_release();
  v11[1] = v12[1];
  swift_release();
  v11[2] = v12[2];
  swift_bridgeObjectRelease();
  unint64_t v13 = (unint64_t)v11 + v9 + 24;
  uint64_t v27 = ~v9;
  unint64_t v14 = (unint64_t)v12 + v9 + 24;
  uint64_t v15 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v8 + 48);
  int v16 = v15(v13 & ~v9, 1, v7);
  int v17 = v15(v14 & ~v9, 1, v7);
  if (v16)
  {
    if (!v17)
    {
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v8 + 32))(v13 & ~v9, v14 & ~v9, v7);
      (*(void (**)(unint64_t, void, uint64_t, uint64_t))(v8 + 56))(v13 & ~v9, 0, 1, v7);
      goto LABEL_12;
    }
    int v18 = *(_DWORD *)(v8 + 84);
    size_t v19 = *(void *)(v8 + 64);
  }
  else
  {
    if (!v17)
    {
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v8 + 40))(v13 & ~v9, v14 & ~v9, v7);
      goto LABEL_12;
    }
    (*(void (**)(unint64_t, uint64_t))(v8 + 8))(v13 & ~v9, v7);
    int v18 = *(_DWORD *)(v8 + 84);
    size_t v19 = *(void *)(v8 + 64);
  }
  if (v18) {
    size_t v20 = v19;
  }
  else {
    size_t v20 = v19 + 1;
  }
  memcpy((void *)(v13 & ~v9), (const void *)(v14 & ~v9), v20);
LABEL_12:
  if (*(_DWORD *)(v8 + 84)) {
    size_t v21 = *(void *)(v8 + 64);
  }
  else {
    size_t v21 = *(void *)(v8 + 64) + 1;
  }
  uint64_t v22 = (void *)(((v13 | v9) + v21) & v27);
  uint64_t v23 = (const void *)(((v14 | v9) + v21) & v27);
  int v24 = v15((unint64_t)v22, 1, v7);
  int v25 = v15((unint64_t)v23, 1, v7);
  if (!v24)
  {
    if (!v25)
    {
      (*(void (**)(void *, const void *, uint64_t))(v8 + 40))(v22, v23, v7);
      return v28;
    }
    (*(void (**)(void *, uint64_t))(v8 + 8))(v22, v7);
    goto LABEL_20;
  }
  if (v25)
  {
LABEL_20:
    memcpy(v22, v23, v21);
    return v28;
  }
  (*(void (**)(void *, const void *, uint64_t))(v8 + 32))(v22, v23, v7);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v8 + 56))(v22, 0, 1, v7);
  return v28;
}

uint64_t getEnumTagSinglePayload for MultiDatePickerValue(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(unsigned int *)(v6 + 84);
  uint64_t v8 = type metadata accessor for Date();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = v9;
  int v11 = *(_DWORD *)(v9 + 84);
  if (v11) {
    unsigned int v12 = v11 - 1;
  }
  else {
    unsigned int v12 = 0;
  }
  if (v12 <= 0x7FFFFFFF) {
    unsigned int v13 = 0x7FFFFFFF;
  }
  else {
    unsigned int v13 = v12;
  }
  if (v13 <= v7) {
    unsigned int v14 = v7;
  }
  else {
    unsigned int v14 = v13;
  }
  uint64_t v15 = *(unsigned __int8 *)(v9 + 80);
  if (v11) {
    uint64_t v16 = *(void *)(*(void *)(v8 - 8) + 64);
  }
  else {
    uint64_t v16 = *(void *)(*(void *)(v8 - 8) + 64) + 1;
  }
  if (!a2) {
    return 0;
  }
  uint64_t v17 = v15 | 7;
  uint64_t v18 = (v15 | 7) + *(void *)(v6 + 64);
  uint64_t v19 = v15 + 24;
  if (a2 <= v14) {
    goto LABEL_34;
  }
  uint64_t v20 = (v18 & ~v17) + v16 + ((v16 + v15 + (v19 & ~v15)) & ~v15);
  char v21 = 8 * v20;
  if (v20 <= 3)
  {
    unsigned int v24 = ((a2 - v14 + ~(-1 << v21)) >> v21) + 1;
    if (HIWORD(v24))
    {
      int v22 = *(_DWORD *)((char *)a1 + v20);
      if (!v22) {
        goto LABEL_34;
      }
      goto LABEL_24;
    }
    if (v24 > 0xFF)
    {
      int v22 = *(unsigned __int16 *)((char *)a1 + v20);
      if (!*(unsigned __int16 *)((char *)a1 + v20)) {
        goto LABEL_34;
      }
      goto LABEL_24;
    }
    if (v24 < 2)
    {
LABEL_34:
      if (v7 >= v13)
      {
        uint64_t v29 = *(uint64_t (**)(unsigned __int16 *, uint64_t, uint64_t))(v6 + 48);
        return v29(a1, v7, v5);
      }
      else if ((v12 & 0x80000000) != 0)
      {
        unsigned int v30 = (*(uint64_t (**)(unint64_t))(v10 + 48))((v19 + (((unint64_t)a1 + v18) & ~v17)) & ~v15);
        if (v30 >= 2) {
          return v30 - 1;
        }
        else {
          return 0;
        }
      }
      else
      {
        unint64_t v28 = *(void *)((((unint64_t)a1 + v18) & ~v17) + 8);
        if (v28 >= 0xFFFFFFFF) {
          LODWORD(v28) = -1;
        }
        return (v28 + 1);
      }
    }
  }
  int v22 = *((unsigned __int8 *)a1 + v20);
  if (!*((unsigned char *)a1 + v20)) {
    goto LABEL_34;
  }
LABEL_24:
  int v25 = (v22 - 1) << v21;
  if (v20 > 3) {
    int v25 = 0;
  }
  if (v20)
  {
    if (v20 <= 3) {
      int v26 = v20;
    }
    else {
      int v26 = 4;
    }
    switch(v26)
    {
      case 2:
        int v27 = *a1;
        break;
      case 3:
        int v27 = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        int v27 = *(_DWORD *)a1;
        break;
      default:
        int v27 = *(unsigned __int8 *)a1;
        break;
    }
  }
  else
  {
    int v27 = 0;
  }
  return v14 + (v27 | v25) + 1;
}

void storeEnumTagSinglePayload for MultiDatePickerValue(unsigned char *a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  uint64_t v7 = *(void *)(a4 + 16);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v36 = v8;
  uint64_t v9 = *(unsigned int *)(v8 + 84);
  int v10 = 0;
  uint64_t v11 = *(void *)(type metadata accessor for Date() - 8);
  int v12 = *(_DWORD *)(v11 + 84);
  uint64_t v13 = *(unsigned __int8 *)(v11 + 80);
  if (v12) {
    unsigned int v14 = v12 - 1;
  }
  else {
    unsigned int v14 = 0;
  }
  if (v14 <= 0x7FFFFFFF) {
    unsigned int v15 = 0x7FFFFFFF;
  }
  else {
    unsigned int v15 = v14;
  }
  if (v15 <= v9) {
    unsigned int v16 = v9;
  }
  else {
    unsigned int v16 = v15;
  }
  uint64_t v17 = (v13 | 7) + *(void *)(v8 + 64);
  uint64_t v18 = v13 + 24;
  if (v12) {
    size_t v19 = *(void *)(v11 + 64);
  }
  else {
    size_t v19 = *(void *)(v11 + 64) + 1;
  }
  size_t v20 = ((v19 + v13 + ((v13 + 24) & ~v13)) & ~v13) + v19;
  size_t v21 = v20 + (v17 & ~(v13 | 7));
  if (a3 <= v16) {
    goto LABEL_23;
  }
  if (v21 <= 3)
  {
    unsigned int v24 = ((a3 - v16 + ~(-1 << (8 * v21))) >> (8 * v21)) + 1;
    if (HIWORD(v24))
    {
      int v10 = 4;
      if (v16 < a2) {
        goto LABEL_24;
      }
      goto LABEL_16;
    }
    if (v24 >= 0x100) {
      int v10 = 2;
    }
    else {
      int v10 = v24 > 1;
    }
LABEL_23:
    if (v16 < a2) {
      goto LABEL_24;
    }
LABEL_16:
    uint64_t v22 = ~(v13 | 7);
    uint64_t v23 = ~v13;
    switch(v10)
    {
      case 1:
        a1[v21] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_32;
      case 2:
        *(_WORD *)&a1[v21] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_32;
      case 3:
        goto LABEL_76;
      case 4:
        *(_DWORD *)&a1[v21] = 0;
        goto LABEL_31;
      default:
LABEL_31:
        if (a2)
        {
LABEL_32:
          if (v9 >= v15)
          {
            uint64_t v32 = *(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(v36 + 56);
            v32(a1, a2, v9, v7);
          }
          else
          {
            unint64_t v28 = (_WORD *)((unint64_t)&a1[v17] & v22);
            if (v15 >= a2)
            {
              if ((v14 & 0x80000000) != 0)
              {
                unint64_t v28 = (_WORD *)(((unint64_t)v28 + v18) & v23);
                if (v14 >= a2)
                {
                  char v35 = *(void (**)(_WORD *, void))(v11 + 56);
                  v35(v28, (a2 + 1));
                }
                else
                {
                  if (v19 <= 3) {
                    int v33 = ~(-1 << (8 * v19));
                  }
                  else {
                    int v33 = -1;
                  }
                  if (v19)
                  {
                    int v30 = v33 & (~v14 + a2);
                    if (v19 <= 3) {
                      int v34 = v19;
                    }
                    else {
                      int v34 = 4;
                    }
                    bzero(v28, v19);
                    switch(v34)
                    {
                      case 2:
LABEL_69:
                        *unint64_t v28 = v30;
                        break;
                      case 3:
LABEL_74:
                        *unint64_t v28 = v30;
                        *((unsigned char *)v28 + 2) = BYTE2(v30);
                        break;
                      case 4:
LABEL_75:
                        *(_DWORD *)unint64_t v28 = v30;
                        break;
                      default:
LABEL_42:
                        *(unsigned char *)unint64_t v28 = v30;
                        break;
                    }
                  }
                }
              }
              else if ((a2 & 0x80000000) != 0)
              {
                *((void *)v28 + 1) = 0;
                *((void *)v28 + 2) = 0;
                *(void *)unint64_t v28 = a2 ^ 0x80000000;
              }
              else
              {
                *((void *)v28 + 1) = (a2 - 1);
              }
            }
            else
            {
              if (v20 <= 3) {
                int v29 = ~(-1 << (8 * v20));
              }
              else {
                int v29 = -1;
              }
              if (v20)
              {
                int v30 = v29 & (~v15 + a2);
                if (v20 <= 3) {
                  int v31 = v20;
                }
                else {
                  int v31 = 4;
                }
                bzero(v28, v20);
                switch(v31)
                {
                  case 2:
                    goto LABEL_69;
                  case 3:
                    goto LABEL_74;
                  case 4:
                    goto LABEL_75;
                  default:
                    goto LABEL_42;
                }
              }
            }
          }
        }
        break;
    }
    return;
  }
  int v10 = 1;
  if (v16 >= a2) {
    goto LABEL_16;
  }
LABEL_24:
  unsigned int v25 = ~v16 + a2;
  if (v21 < 4)
  {
    int v26 = (v25 >> (8 * v21)) + 1;
    if (v21)
    {
      int v27 = v25 & ~(-1 << (8 * v21));
      bzero(a1, v21);
      if (v21 == 3)
      {
        *(_WORD *)a1 = v27;
        a1[2] = BYTE2(v27);
      }
      else if (v21 == 2)
      {
        *(_WORD *)a1 = v27;
      }
      else
      {
        *a1 = v27;
      }
    }
  }
  else
  {
    bzero(a1, v21);
    *(_DWORD *)a1 = v25;
    int v26 = 1;
  }
  switch(v10)
  {
    case 1:
      a1[v21] = v26;
      break;
    case 2:
      *(_WORD *)&a1[v21] = v26;
      break;
    case 3:
LABEL_76:
      __break(1u);
      JUMPOUT(0x187C126C0);
    case 4:
      *(_DWORD *)&a1[v21] = v26;
      break;
    default:
      return;
  }
}

ValueMetadata *type metadata accessor for MultiDatePickerStyleConfiguration.Label()
{
  return &type metadata for MultiDatePickerStyleConfiguration.Label;
}

_UNKNOWN **base witness table accessor for View in MultiDatePickerStyleConfiguration.Label()
{
  return &protocol witness table for MultiDatePickerStyleConfiguration.Label;
}

unint64_t instantiation function for generic protocol witness table for MultiDatePickerStyleConfiguration.Label(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type MultiDatePickerStyleConfiguration.Label and conformance MultiDatePickerStyleConfiguration.Label();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type MultiDatePickerStyleConfiguration.Label and conformance MultiDatePickerStyleConfiguration.Label()
{
  unint64_t result = lazy protocol witness table cache variable for type MultiDatePickerStyleConfiguration.Label and conformance MultiDatePickerStyleConfiguration.Label;
  if (!lazy protocol witness table cache variable for type MultiDatePickerStyleConfiguration.Label and conformance MultiDatePickerStyleConfiguration.Label)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MultiDatePickerStyleConfiguration.Label and conformance MultiDatePickerStyleConfiguration.Label);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type MultiDatePickerStyleConfiguration.Label and conformance MultiDatePickerStyleConfiguration.Label;
  if (!lazy protocol witness table cache variable for type MultiDatePickerStyleConfiguration.Label and conformance MultiDatePickerStyleConfiguration.Label)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MultiDatePickerStyleConfiguration.Label and conformance MultiDatePickerStyleConfiguration.Label);
  }
  return result;
}

uint64_t base witness table accessor for _AttributeBody in MultiDatePickerValue<A>.Init()
{
  return swift_getWitnessTable();
}

uint64_t outlined init with copy of ResolvedMultiDatePicker(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ResolvedMultiDatePicker(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t static ItemProviderTraitKey.defaultValue.getter()
{
  return 0;
}

uint64_t View.itemProvider(_:)(uint64_t a1, uint64_t a2)
{
  if (a1)
  {
    uint64_t v4 = swift_allocObject();
    *(void *)(v4 + 16) = a1;
    *(void *)(v4 + 24) = a2;
    uint64_t v5 = _sSo14NSItemProviderCSgIego_ACIegr_TRTA_0;
  }
  else
  {
    uint64_t v5 = 0;
  }
  outlined copy of AppIntentExecutor?(a1);
  View._trait<A>(_:_:)();
  return outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?((uint64_t)v5);
}

uint64_t sub_187C12900()
{
  swift_release();

  return swift_deallocObject();
}

ValueMetadata *type metadata accessor for ItemProviderTraitKey()
{
  return &type metadata for ItemProviderTraitKey;
}

uint64_t sub_187C12948()
{
  return swift_getWitnessTable();
}

void type metadata accessor for _TraitWritingModifier<ItemProviderTraitKey>()
{
  if (!lazy cache variable for type metadata for _TraitWritingModifier<ItemProviderTraitKey>)
  {
    unint64_t v0 = type metadata accessor for _TraitWritingModifier();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _TraitWritingModifier<ItemProviderTraitKey>);
    }
  }
}

void View.activeColorScheme(_:)()
{
}

uint64_t sub_187C12A28()
{
  type metadata accessor for ActiveControlLabelWrapper();

  return swift_getWitnessTable();
}

uint64_t type metadata accessor for ActiveControlLabelWrapper()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata completion function for ActiveControlLabelWrapper()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

void *initializeBufferWithCopyOfBuffer for ActiveControlLabelWrapper(void *a1, void *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  int v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0 || (v6 & 0xFFFFFFFFFFFFFFF8) + 17 > 0x18)
  {
    uint64_t v9 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (void *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
    swift_retain();
  }
  else
  {
    (*(void (**)(void *, void *))(v5 + 16))(a1, a2);
    *((unsigned char *)v4 + v6) = *((unsigned char *)a2 + v6);
    unint64_t v10 = ((unint64_t)v4 + v6) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v11 = ((unint64_t)a2 + v6) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v12 = *(void *)(v11 + 8);
    char v13 = *(unsigned char *)(v11 + 16);
    outlined copy of Environment<Bool>.Content(v12, v13);
    *(void *)(v10 + 8) = v12;
    *(unsigned char *)(v10 + 16) = v13;
  }
  return v4;
}

uint64_t destroy for ActiveControlLabelWrapper(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(*(void *)(a2 + 16) - 8) + 8;
  (*(void (**)(void))v3)();
  unint64_t v4 = (*(void *)(v3 + 56) + a1) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v5 = *(void *)(v4 + 8);
  char v6 = *(unsigned char *)(v4 + 16);

  return outlined consume of Environment<Bool>.Content(v5, v6);
}

uint64_t initializeWithCopy for ActiveControlLabelWrapper(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 16;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 48);
  unint64_t v7 = v6 + a1;
  uint64_t v8 = v6 + a2;
  *(unsigned char *)unint64_t v7 = *(unsigned char *)v8;
  unint64_t v9 = v7 & 0xFFFFFFFFFFFFFFF8;
  v8 &= 0xFFFFFFFFFFFFFFF8;
  uint64_t v10 = *(void *)(v8 + 8);
  LOBYTE(v5) = *(unsigned char *)(v8 + 16);
  outlined copy of Environment<Bool>.Content(v10, v5);
  *(void *)(v9 + 8) = v10;
  *(unsigned char *)(v9 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for ActiveControlLabelWrapper(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 24;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 40);
  unint64_t v7 = v6 + a1;
  uint64_t v8 = v6 + a2;
  *(unsigned char *)unint64_t v7 = *(unsigned char *)v8;
  unint64_t v9 = v7 & 0xFFFFFFFFFFFFFFF8;
  v8 &= 0xFFFFFFFFFFFFFFF8;
  uint64_t v10 = *(void *)(v8 + 8);
  LOBYTE(v5) = *(unsigned char *)(v8 + 16);
  outlined copy of Environment<Bool>.Content(v10, v5);
  uint64_t v11 = *(void *)(v9 + 8);
  char v12 = *(unsigned char *)(v9 + 16);
  *(void *)(v9 + 8) = v10;
  *(unsigned char *)(v9 + 16) = v5;
  outlined consume of Environment<Bool>.Content(v11, v12);
  return a1;
}

uint64_t initializeWithTake for ActiveControlLabelWrapper(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 32;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 32);
  uint64_t v7 = v6 + a1;
  uint64_t v8 = v6 + a2;
  *(unsigned char *)uint64_t v7 = *(unsigned char *)v8;
  v7 &= 0xFFFFFFFFFFFFFFF8;
  v8 &= 0xFFFFFFFFFFFFFFF8;
  char v9 = *(unsigned char *)(v8 + 16);
  *(void *)(v7 + 8) = *(void *)(v8 + 8);
  *(unsigned char *)(v7 + 16) = v9;
  return a1;
}

uint64_t assignWithTake for ActiveControlLabelWrapper(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 40;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 24);
  uint64_t v7 = v6 + a1;
  uint64_t v8 = v6 + a2;
  *(unsigned char *)uint64_t v7 = *(unsigned char *)v8;
  v7 &= 0xFFFFFFFFFFFFFFF8;
  v8 &= 0xFFFFFFFFFFFFFFF8;
  uint64_t v9 = *(void *)(v8 + 8);
  LOBYTE(v8) = *(unsigned char *)(v8 + 16);
  uint64_t v10 = *(void *)(v7 + 8);
  char v11 = *(unsigned char *)(v7 + 16);
  *(void *)(v7 + 8) = v9;
  *(unsigned char *)(v7 + 16) = v8;
  outlined consume of Environment<Bool>.Content(v10, v11);
  return a1;
}

uint64_t getEnumTagSinglePayload for ActiveControlLabelWrapper(unsigned __int8 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (v5 <= 0xFE) {
    unsigned int v7 = 254;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  if (v7 < a2)
  {
    unint64_t v8 = (v6 & 0xFFFFFFFFFFFFFFF8) + 17;
    unsigned int v9 = (a2 - v7 + 255) >> (8 * v8);
    if (v8 < 4) {
      unsigned int v10 = v9 + 1;
    }
    else {
      unsigned int v10 = 2;
    }
    if (v10 >= 0x10000) {
      unsigned int v11 = 4;
    }
    else {
      unsigned int v11 = 2;
    }
    if (v10 < 0x100) {
      unsigned int v11 = 1;
    }
    if (v10 >= 2) {
      uint64_t v12 = v11;
    }
    else {
      uint64_t v12 = 0;
    }
    switch(v12)
    {
      case 1:
        int v13 = a1[v8];
        if (!a1[v8]) {
          break;
        }
        goto LABEL_22;
      case 2:
        int v13 = *(unsigned __int16 *)&a1[v8];
        if (*(_WORD *)&a1[v8]) {
          goto LABEL_22;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x187C13044);
      case 4:
        int v13 = *(_DWORD *)&a1[v8];
        if (!v13) {
          break;
        }
LABEL_22:
        int v15 = (v13 - 1) << (8 * v8);
        if (v8 >= 4) {
          int v15 = 0;
        }
        if ((v6 & 0xFFFFFFF8) == 0xFFFFFFF0) {
          int v16 = *a1;
        }
        else {
          int v16 = *(_DWORD *)a1;
        }
        return v7 + (v16 | v15) + 1;
      default:
        break;
    }
  }
  if (v5 >= 0xFE) {
    return (*(uint64_t (**)(void))(v4 + 48))();
  }
  unsigned int v17 = a1[v6];
  if (v17 >= 2) {
    return v17 - 1;
  }
  else {
    return 0;
  }
}

void storeEnumTagSinglePayload for ActiveControlLabelWrapper(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0xFE) {
    unsigned int v8 = 254;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  size_t v10 = (v9 & 0xFFFFFFFFFFFFFFF8) + 17;
  char v11 = 8 * v10;
  if (v8 >= a3)
  {
    int v15 = 0;
    if (v8 >= a2)
    {
LABEL_17:
      switch(v15)
      {
        case 1:
          a1[v10] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_34;
        case 2:
          *(_WORD *)&a1[v10] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_34;
        case 3:
          goto LABEL_43;
        case 4:
          *(_DWORD *)&a1[v10] = 0;
          goto LABEL_33;
        default:
LABEL_33:
          if (a2)
          {
LABEL_34:
            if (v7 < 0xFE)
            {
              a1[v9] = a2 + 1;
            }
            else
            {
              size_t v20 = *(void (**)(void))(v6 + 56);
              v20();
            }
          }
          break;
      }
      return;
    }
  }
  else
  {
    unsigned int v12 = (a3 - v8 + 255) >> v11;
    if (v10 <= 3) {
      unsigned int v13 = v12 + 1;
    }
    else {
      unsigned int v13 = 2;
    }
    if (v13 >= 0x10000) {
      int v14 = 4;
    }
    else {
      int v14 = 2;
    }
    if (v13 < 0x100) {
      int v14 = 1;
    }
    if (v13 >= 2) {
      int v15 = v14;
    }
    else {
      int v15 = 0;
    }
    if (v8 >= a2) {
      goto LABEL_17;
    }
  }
  unsigned int v16 = ~v8 + a2;
  unsigned int v17 = (~(_BYTE)v8 + a2);
  if (v10 < 4) {
    int v18 = (v16 >> v11) + 1;
  }
  else {
    int v18 = 1;
  }
  if (v10 >= 4) {
    unsigned int v19 = v16;
  }
  else {
    unsigned int v19 = v17;
  }
  bzero(a1, v10);
  if (v10 == 1) {
    *a1 = v19;
  }
  else {
    *(_DWORD *)a1 = v19;
  }
  switch(v15)
  {
    case 1:
      a1[v10] = v18;
      break;
    case 2:
      *(_WORD *)&a1[v10] = v18;
      break;
    case 3:
LABEL_43:
      __break(1u);
      JUMPOUT(0x187C13248);
    case 4:
      *(_DWORD *)&a1[v10] = v18;
      break;
    default:
      return;
  }
}

uint64_t associated type witness table accessor for View.Body : View in ActiveControlLabelWrapper<A>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_187C132B4()
{
  return swift_getWitnessTable();
}

void type metadata accessor for _EnvironmentKeyTransformModifier<ColorScheme>()
{
  if (!lazy cache variable for type metadata for _EnvironmentKeyTransformModifier<ColorScheme>)
  {
    unint64_t v0 = type metadata accessor for _EnvironmentKeyTransformModifier();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyTransformModifier<ColorScheme>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type _EnvironmentKeyTransformModifier<ColorScheme> and conformance _EnvironmentKeyTransformModifier<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type _EnvironmentKeyTransformModifier<ColorScheme> and conformance _EnvironmentKeyTransformModifier<A>;
  if (!lazy protocol witness table cache variable for type _EnvironmentKeyTransformModifier<ColorScheme> and conformance _EnvironmentKeyTransformModifier<A>)
  {
    type metadata accessor for _EnvironmentKeyTransformModifier<ColorScheme>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _EnvironmentKeyTransformModifier<ColorScheme> and conformance _EnvironmentKeyTransformModifier<A>);
  }
  return result;
}

ValueMetadata *type metadata accessor for ToolbarLabeledContentStyle()
{
  return &type metadata for ToolbarLabeledContentStyle;
}

uint64_t associated type witness table accessor for LabeledContentStyle.Body : View in ToolbarLabeledContentStyle()
{
  return swift_getOpaqueTypeConformance2();
}

unint64_t lazy protocol witness table accessor for type PlatformItemLabelView<ToolbarPlatformItemListFlags, LabeledContentStyleConfiguration.Label, LabeledContentStyleConfiguration.Content> and conformance PlatformItemLabelView<A, B, C>()
{
  unint64_t result = lazy protocol witness table cache variable for type PlatformItemLabelView<ToolbarPlatformItemListFlags, LabeledContentStyleConfiguration.Label, LabeledContentStyleConfiguration.Content> and conformance PlatformItemLabelView<A, B, C>;
  if (!lazy protocol witness table cache variable for type PlatformItemLabelView<ToolbarPlatformItemListFlags, LabeledContentStyleConfiguration.Label, LabeledContentStyleConfiguration.Content> and conformance PlatformItemLabelView<A, B, C>)
  {
    type metadata accessor for PlatformItemLabelView<ToolbarPlatformItemListFlags, LabeledContentStyleConfiguration.Label, LabeledContentStyleConfiguration.Content>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlatformItemLabelView<ToolbarPlatformItemListFlags, LabeledContentStyleConfiguration.Label, LabeledContentStyleConfiguration.Content> and conformance PlatformItemLabelView<A, B, C>);
  }
  return result;
}

void type metadata accessor for PlatformItemLabelView<ToolbarPlatformItemListFlags, LabeledContentStyleConfiguration.Label, LabeledContentStyleConfiguration.Content>()
{
  if (!lazy cache variable for type metadata for PlatformItemLabelView<ToolbarPlatformItemListFlags, LabeledContentStyleConfiguration.Label, LabeledContentStyleConfiguration.Content>)
  {
    unint64_t v0 = type metadata accessor for PlatformItemLabelView();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for PlatformItemLabelView<ToolbarPlatformItemListFlags, LabeledContentStyleConfiguration.Label, LabeledContentStyleConfiguration.Content>);
    }
  }
}

uint64_t View.sidebarDimmingIgnoresSafeArea(_:)()
{
  return View._trait<A>(_:_:)();
}

uint64_t sub_187C13528()
{
  return swift_getWitnessTable();
}

void type metadata accessor for _TraitWritingModifier<SidebarDimmingIgnoresSafeAreaTraitKey>()
{
  if (!lazy cache variable for type metadata for _TraitWritingModifier<SidebarDimmingIgnoresSafeAreaTraitKey>)
  {
    unint64_t v0 = type metadata accessor for _TraitWritingModifier();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _TraitWritingModifier<SidebarDimmingIgnoresSafeAreaTraitKey>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type _TraitWritingModifier<SidebarDimmingIgnoresSafeAreaTraitKey> and conformance _TraitWritingModifier<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type _TraitWritingModifier<SidebarDimmingIgnoresSafeAreaTraitKey> and conformance _TraitWritingModifier<A>;
  if (!lazy protocol witness table cache variable for type _TraitWritingModifier<SidebarDimmingIgnoresSafeAreaTraitKey> and conformance _TraitWritingModifier<A>)
  {
    type metadata accessor for _TraitWritingModifier<SidebarDimmingIgnoresSafeAreaTraitKey>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _TraitWritingModifier<SidebarDimmingIgnoresSafeAreaTraitKey> and conformance _TraitWritingModifier<A>);
  }
  return result;
}

ValueMetadata *type metadata accessor for SidebarDimmingIgnoresSafeAreaTraitKey()
{
  return &type metadata for SidebarDimmingIgnoresSafeAreaTraitKey;
}

uint64_t static InsetGroupedListStyle._makeView<A>(value:inputs:)(int *a1, uint64_t a2, uint64_t a3, _UNKNOWN **a4)
{
  int v29 = *(ValueMetadata **)a2;
  int v28 = *(_DWORD *)(a2 + 8);
  uint64_t v27 = *(void *)(a2 + 16);
  int v30 = *(_DWORD *)(a2 + 80);
  int v39 = *a1;
  int v31 = &type metadata for InsetGroupedListStyle;
  *(void *)&long long v32 = a3;
  *((void *)&v32 + 1) = &protocol witness table for InsetGroupedListStyle;
  int v33 = a4;
  type metadata accessor for _ListValue();
  type metadata accessor for _GraphValue();
  unsigned int v7 = *(_UNKNOWN ***)(a2 + 24);
  unint64_t v8 = *(void *)(a2 + 32);
  long long v25 = *(_OWORD *)(a2 + 56);
  long long v26 = *(_OWORD *)(a2 + 40);
  uint64_t v9 = *(void *)(a2 + 72);
  int v10 = _GraphValue.value.getter();
  memset(v45, 0, sizeof(v45));
  __int16 v46 = 1;
  unint64_t v11 = lazy protocol witness table accessor for type InsetGroupedListStyleContext and conformance InsetGroupedListStyleContext();
  InsettableGroupedListBodyRule.init(base:insetMode:context:)(v10, (uint64_t)v45, v12, (uint64_t)&type metadata for InsetGroupedListStyleContext, (char *)&v31);
  int v13 = (int)v31;
  long long v24 = v32;
  int v14 = v33;
  unint64_t v15 = v34;
  char v16 = v35;
  char v23 = BYTE1(v35);
  type metadata accessor for ModifiedContent<ListStyleContent, StyleContextWriter<InsetGroupedListStyleContext>>();
  int v18 = v17;
  uint64_t v19 = type metadata accessor for SelectionManagerBox();
  unint64_t v20 = lazy protocol witness table accessor for type ModifiedContent<ListStyleContent, StyleContextWriter<InsetGroupedListStyleContext>> and conformance <> ModifiedContent<A, B>();
  uint64_t WitnessTable = swift_getWitnessTable();
  int v31 = v18;
  *(void *)&long long v32 = v19;
  *((void *)&v32 + 1) = v20;
  int v33 = (_UNKNOWN **)WitnessTable;
  type metadata accessor for InsettableGroupedListBody();
  int v39 = v13;
  long long v40 = v24;
  char v41 = v14;
  unint64_t v42 = v15;
  char v43 = v16;
  char v44 = v23;
  int v31 = &type metadata for InsetGroupedListStyle;
  *(void *)&long long v32 = &type metadata for InsetGroupedListStyleContext;
  *((void *)&v32 + 1) = a3;
  int v33 = &protocol witness table for InsetGroupedListStyle;
  unint64_t v34 = v11;
  *(void *)&long long v35 = a4;
  type metadata accessor for InsettableGroupedListBodyRule();
  swift_getWitnessTable();
  _GraphValue.init<A>(_:)();
  int v31 = v29;
  LODWORD(v32) = v28;
  *((void *)&v32 + 1) = v27;
  int v33 = v7;
  unint64_t v34 = v8;
  long long v35 = v26;
  long long v36 = v25;
  uint64_t v37 = v9;
  int v38 = v30;
  swift_getWitnessTable();
  return static View._makeView(view:inputs:)();
}

uint64_t protocol witness for static StyleContext.acceptsAny<A>(_:) in conformance InsetGroupedListStyleContext(uint64_t a1, uint64_t a2)
{
  MEMORY[0x1F4188790](a1);
  if (a2) {
    memcpy((char *)&v6 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v3, v4);
  }
  return static StyleContext.acceptsAny<A>(_:)() & 1;
}

uint64_t UIKitCalendarView.fontDesign.getter@<X0>(unsigned char *a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for UIKitCalendarView(0) + 36);
  uint64_t v4 = *(void *)v3;
  char v5 = *(unsigned char *)(v3 + 8);
  outlined copy of ResolvedTableRowIDs.Storage(*(void *)v3, v5);
  unint64_t v6 = specialized Environment.wrappedValue.getter(v4, v5);
  outlined consume of Environment<[SceneID : KeyboardShortcut]>.Content(v4, v5);
  if (v6 >> 62) {
    goto LABEL_23;
  }
  unint64_t v7 = *(void *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (!v7)
  {
LABEL_11:
    unint64_t v11 = 0;
    goto LABEL_13;
  }
  while (1)
  {
    while (__OFSUB__(v7--, 1))
    {
      __break(1u);
LABEL_21:
      __break(1u);
LABEL_22:
      __break(1u);
LABEL_23:
      swift_bridgeObjectRetain();
      unint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (!v7) {
        goto LABEL_11;
      }
    }
    if ((v6 & 0xC000000000000001) != 0)
    {
      MEMORY[0x18C117680](v7, v6);
      goto LABEL_9;
    }
    if ((v7 & 0x8000000000000000) != 0) {
      goto LABEL_21;
    }
    if (v7 >= *(void *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
      goto LABEL_22;
    }
    swift_retain();
LABEL_9:
    type metadata accessor for AnyDynamicFontModifier<Font.DesignModifier>();
    uint64_t v9 = swift_dynamicCastClass();
    uint64_t v10 = swift_release();
    if (v9) {
      break;
    }
    if (!v7) {
      goto LABEL_11;
    }
  }
  MEMORY[0x1F4188790](v10);
  unint64_t v15 = v7;
  partial apply for specialized closure #1 in BidirectionalCollection.last(where:)(&v15, &v16);
  unint64_t v11 = v16;
LABEL_13:
  uint64_t result = swift_bridgeObjectRelease();
  if (v11)
  {
    type metadata accessor for AnyDynamicFontModifier<Font.DesignModifier>();
    uint64_t v13 = swift_dynamicCastClass();
    if (v13) {
      char v14 = *(unsigned char *)(v13 + 16);
    }
    else {
      char v14 = 0;
    }
    uint64_t result = swift_release();
  }
  else
  {
    char v14 = 0;
  }
  *a1 = v14;
  return result;
}

uint64_t UIKitCalendarView.body.getter@<X0>(uint64_t a1@<X8>)
{
  type metadata accessor for LabeledContent<MultiDatePickerStyleConfiguration.Label, UIKitCalendarViewRepresentable>();
  MEMORY[0x1F4188790](v3 - 8);
  char v5 = (char *)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = *(int *)(v6 + 48);
  outlined init with copy of MultiDatePickerStyleConfiguration(v1, (uint64_t)v5, type metadata accessor for MultiDatePickerStyleConfiguration);
  uint64_t v8 = type metadata accessor for UIKitCalendarView(0);
  uint64_t v9 = (int *)type metadata accessor for UIKitCalendarViewRepresentable(0);
  specialized Environment.wrappedValue.getter((uint64_t)&v5[v9[5]]);
  specialized Environment.wrappedValue.getter((uint64_t)&v5[v9[6]]);
  specialized Environment.wrappedValue.getter((uint64_t)&v5[v9[7]]);
  uint64_t v10 = (uint64_t *)(v1 + *(int *)(v8 + 32));
  uint64_t v11 = *v10;
  uint64_t v12 = *((unsigned __int8 *)v10 + 8);
  outlined copy of Environment<Color?>.Content(*v10, v12);
  uint64_t v13 = specialized Environment.wrappedValue.getter(v11, v12);
  outlined consume of Environment<Color?>.Content(v11, v12);
  UIKitCalendarView.fontDesign.getter(&v17);
  char v14 = v17;
  *(void *)&v5[v9[8]] = v13;
  v5[v9[9]] = v14;
  v5[v7] = 2;
  outlined init with copy of MultiDatePickerStyleConfiguration((uint64_t)v5, a1, (uint64_t (*)(void))type metadata accessor for LabeledContent<MultiDatePickerStyleConfiguration.Label, UIKitCalendarViewRepresentable>);
  return outlined destroy of MultiDatePickerStyleConfiguration((uint64_t)v5, (uint64_t (*)(void))type metadata accessor for LabeledContent<MultiDatePickerStyleConfiguration.Label, UIKitCalendarViewRepresentable>);
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance UIKitCalendarView()
{
  return static ModifiedContent<>._viewListCount(inputs:)();
}

uint64_t @objc UIKitCalendarViewRepresentable.Coordinator.multiDateSelection(_:didSelectDate:)(void *a1, uint64_t a2, void *a3, uint64_t a4, void (*a5)(char *))
{
  uint64_t v8 = type metadata accessor for DateComponents();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  uint64_t v11 = (char *)&v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  static DateComponents._unconditionallyBridgeFromObjectiveC(_:)();
  id v12 = a3;
  id v13 = a1;
  a5(v11);

  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
}

uint64_t UIKitCalendarViewRepresentable.Coordinator.__ivar_destroyer()
{
  return outlined destroy of MultiDatePickerStyleConfiguration(v0+ OBJC_IVAR____TtCV7SwiftUIP33_1CD2D554D5FF79B0EC2610FA354BC03430UIKitCalendarViewRepresentable11Coordinator_configuration, type metadata accessor for MultiDatePickerStyleConfiguration);
}

uint64_t ObjC metadata update function for UIKitCalendarViewRepresentable.Coordinator()
{
  return type metadata accessor for UIKitCalendarViewRepresentable.Coordinator(0);
}

uint64_t type metadata accessor for UIKitCalendarViewRepresentable.Coordinator(uint64_t a1)
{
  return type metadata accessor for SortableTableHeaderButton(a1, (uint64_t *)&type metadata singleton initialization cache for UIKitCalendarViewRepresentable.Coordinator);
}

uint64_t type metadata completion function for UIKitCalendarViewRepresentable.Coordinator()
{
  uint64_t result = type metadata accessor for MultiDatePickerStyleConfiguration(319);
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

void UIKitCalendarViewRepresentable.updateUIView(_:context:)(void *a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for DateInterval();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v58 = v6;
  uint64_t v59 = v7;
  MEMORY[0x1F4188790](v6);
  uint64_t v9 = (char *)&v52 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for DateComponents?(0, (unint64_t *)&lazy cache variable for type metadata for Date?, MEMORY[0x1E4F27928], MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v10 - 8);
  uint64_t v57 = (uint64_t)&v52 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v12);
  char v14 = (char *)&v52 - v13;
  uint64_t v15 = type metadata accessor for Date();
  uint64_t v16 = *(void *)(v15 - 8);
  MEMORY[0x1F4188790](v15);
  unsigned int v54 = (char *)&v52 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v18);
  unint64_t v20 = (char *)&v52 - v19;
  MEMORY[0x1F4188790](v21);
  char v23 = (char *)&v52 - v22;
  uint64_t v60 = *(void *)(a2 + 40);
  uint64_t v24 = type metadata accessor for UIKitCalendarViewRepresentable(0);
  Class isa = Locale._bridgeToObjectiveC()().super.isa;
  objc_msgSend(a1, sel_setLocale_, isa);

  Class v26 = Calendar._bridgeToObjectiveC()().super.isa;
  objc_msgSend(a1, sel_setCalendar_, v26);

  uint64_t v61 = v24;
  Class v27 = TimeZone._bridgeToObjectiveC()().super.isa;
  objc_msgSend(a1, sel_setTimeZone_, v27);

  uint64_t v28 = v16;
  uint64_t v29 = type metadata accessor for MultiDatePickerStyleConfiguration(0);
  uint64_t v30 = *(int *)(v29 + 24);
  char v56 = v3;
  outlined init with copy of Date?((uint64_t)v3 + v30, (uint64_t)v14);
  int v31 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v16 + 48);
  int v32 = v31(v14, 1, v15);
  int v55 = v9;
  unsigned int v53 = v20;
  if (v32 == 1)
  {
    outlined destroy of Date?((uint64_t)v14, (unint64_t *)&lazy cache variable for type metadata for Date?, MEMORY[0x1E4F27928], MEMORY[0x1E4FBB718]);
    uint64_t v33 = v60;
    uint64_t v34 = v58;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v23, v14, v15);
    (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v20, v23, v15);
    id v35 = objc_msgSend(a1, sel_availableDateRange);
    static DateInterval._unconditionallyBridgeFromObjectiveC(_:)();

    DateInterval.start.setter();
    Class v36 = DateInterval._bridgeToObjectiveC()().super.isa;
    uint64_t v37 = v9;
    uint64_t v38 = v58;
    (*(void (**)(char *, uint64_t))(v59 + 8))(v37, v58);
    objc_msgSend(a1, sel_setAvailableDateRange_, v36);

    uint64_t v28 = v16;
    (*(void (**)(char *, uint64_t))(v16 + 8))(v23, v15);
    uint64_t v33 = v60;
    uint64_t v34 = v38;
  }
  long long v40 = v56;
  uint64_t v39 = v57;
  outlined init with copy of Date?((uint64_t)v56 + *(int *)(v29 + 28), v57);
  if (v31((char *)v39, 1, v15) == 1)
  {
    outlined destroy of Date?(v39, (unint64_t *)&lazy cache variable for type metadata for Date?, MEMORY[0x1E4F27928], MEMORY[0x1E4FBB718]);
  }
  else
  {
    char v41 = v54;
    (*(void (**)(char *, uint64_t, uint64_t))(v28 + 32))(v54, v39, v15);
    (*(void (**)(char *, char *, uint64_t))(v28 + 16))(v53, v41, v15);
    id v42 = objc_msgSend(a1, sel_availableDateRange);
    uint64_t v43 = v28;
    char v44 = v55;
    static DateInterval._unconditionallyBridgeFromObjectiveC(_:)();

    DateInterval.end.setter();
    Class v45 = DateInterval._bridgeToObjectiveC()().super.isa;
    (*(void (**)(char *, uint64_t))(v59 + 8))(v44, v34);
    objc_msgSend(a1, sel_setAvailableDateRange_, v45);

    (*(void (**)(char *, uint64_t))(v43 + 8))(v41, v15);
  }
  uint64_t v46 = v61;
  uint64_t v47 = *(int *)(v61 + 32);
  if (*(uint64_t *)((char *)v40 + v47)) {
    uint64_t v48 = *(uint64_t *)((char *)v40 + v47);
  }
  else {
    uint64_t v48 = static Color.blue.getter();
  }
  type metadata accessor for UIColor();
  swift_retain();
  id v49 = UIColor.init(_:)(v48);
  objc_msgSend(a1, sel_setTintColor_, v49);

  id v50 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB14E0]), sel_initWithDelegate_, v33);
  uint64_t v62 = *v40;
  long long v63 = *(_OWORD *)(v40 + 1);
  type metadata accessor for DateComponents?(0, &lazy cache variable for type metadata for Binding<Set<DateComponents>>, (uint64_t (*)(uint64_t))type metadata accessor for Set<DateComponents>, MEMORY[0x1E4F41638]);
  MEMORY[0x18C113DA0](&v64);
  specialized _copyCollectionToContiguousArray<A>(_:)(v64);
  swift_bridgeObjectRelease();
  type metadata accessor for DateComponents();
  Class v51 = Array._bridgeToObjectiveC()().super.isa;
  swift_release();
  objc_msgSend(v50, sel_setSelectedDates_, v51);

  objc_msgSend(a1, sel_setSelectionBehavior_, v50);
  objc_msgSend(a1, sel_setFontDesign_, **((void **)&unk_1E53B9050 + *((char *)v40 + *(int *)(v46 + 36))));
}

id protocol witness for UIViewRepresentable.makeUIView(context:) in conformance UIKitCalendarViewRepresentable()
{
  id v0 = objc_allocWithZone(MEMORY[0x1E4FB14E8]);

  return objc_msgSend(v0, sel_init);
}

uint64_t protocol witness for UIViewRepresentable.makeCoordinator() in conformance UIKitCalendarViewRepresentable@<X0>(void *a1@<X8>)
{
  uint64_t v3 = type metadata accessor for MultiDatePickerStyleConfiguration(0);
  MEMORY[0x1F4188790](v3 - 8);
  char v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of MultiDatePickerStyleConfiguration(v1, (uint64_t)v5, type metadata accessor for MultiDatePickerStyleConfiguration);
  uint64_t v6 = (objc_class *)type metadata accessor for UIKitCalendarViewRepresentable.Coordinator(0);
  id v7 = objc_allocWithZone(v6);
  outlined init with copy of MultiDatePickerStyleConfiguration((uint64_t)v5, (uint64_t)v7+ OBJC_IVAR____TtCV7SwiftUIP33_1CD2D554D5FF79B0EC2610FA354BC03430UIKitCalendarViewRepresentable11Coordinator_configuration, type metadata accessor for MultiDatePickerStyleConfiguration);
  v10.receiver = v7;
  v10.super_class = v6;
  id v8 = objc_msgSendSuper2(&v10, sel_init);
  uint64_t result = outlined destroy of MultiDatePickerStyleConfiguration((uint64_t)v5, type metadata accessor for MultiDatePickerStyleConfiguration);
  *a1 = v8;
  return result;
}

unint64_t specialized closure #1 in BidirectionalCollection.last(where:)(unint64_t result, uint64_t a2)
{
  if ((a2 & 0xC000000000000001) != 0) {
    return MEMORY[0x18C117680]();
  }
  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10) > result)
  {
    return swift_retain();
  }
  __break(1u);
  return result;
}

uint64_t specialized UIKitCalendarViewRepresentable.Coordinator.multiDateSelection(_:didSelectDate:)(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for DateComponents();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  uint64_t v6 = (char *)v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v8 = MEMORY[0x1F4188790](v7);
  objc_super v10 = (char *)v17 - v9;
  uint64_t v11 = (void *)(v1
                 + OBJC_IVAR____TtCV7SwiftUIP33_1CD2D554D5FF79B0EC2610FA354BC03430UIKitCalendarViewRepresentable11Coordinator_configuration);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v4 + 16))(v6, a1, v3, v8);
  uint64_t v12 = v11[1];
  uint64_t v13 = v11[2];
  v17[0] = *v11;
  v17[1] = v12;
  _OWORD v17[2] = v13;
  type metadata accessor for DateComponents?(0, &lazy cache variable for type metadata for Binding<Set<DateComponents>>, (uint64_t (*)(uint64_t))type metadata accessor for Set<DateComponents>, MEMORY[0x1E4F41638]);
  uint64_t v15 = v14;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  MEMORY[0x18C113DA0](&v18, v15);
  specialized Set._Variant.insert(_:)((uint64_t)v10, v6);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v10, v3);
  v17[0] = v18;
  dispatch thunk of AnyLocation.set(_:transaction:)();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t specialized UIKitCalendarViewRepresentable.Coordinator.multiDateSelection(_:didDeselectDate:)(uint64_t a1)
{
  uint64_t v3 = (uint64_t (*)(uint64_t))MEMORY[0x1E4F26F90];
  uint64_t v4 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E4FBB718];
  type metadata accessor for DateComponents?(0, &lazy cache variable for type metadata for DateComponents?, MEMORY[0x1E4F26F90], MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v5 - 8);
  uint64_t v7 = (char *)v13 - v6;
  uint64_t v8 = *(void *)(v1
                 + OBJC_IVAR____TtCV7SwiftUIP33_1CD2D554D5FF79B0EC2610FA354BC03430UIKitCalendarViewRepresentable11Coordinator_configuration
                 + 8);
  uint64_t v9 = *(void *)(v1
                 + OBJC_IVAR____TtCV7SwiftUIP33_1CD2D554D5FF79B0EC2610FA354BC03430UIKitCalendarViewRepresentable11Coordinator_configuration
                 + 16);
  v13[0] = *(void *)(v1
                     + OBJC_IVAR____TtCV7SwiftUIP33_1CD2D554D5FF79B0EC2610FA354BC03430UIKitCalendarViewRepresentable11Coordinator_configuration);
  v13[1] = v8;
  v13[2] = v9;
  type metadata accessor for DateComponents?(0, &lazy cache variable for type metadata for Binding<Set<DateComponents>>, (uint64_t (*)(uint64_t))type metadata accessor for Set<DateComponents>, MEMORY[0x1E4F41638]);
  uint64_t v11 = v10;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  MEMORY[0x18C113DA0](&v14, v11);
  specialized Set._Variant.remove(_:)(a1, (uint64_t)v7);
  outlined destroy of Date?((uint64_t)v7, &lazy cache variable for type metadata for DateComponents?, v3, v4);
  v13[0] = v14;
  dispatch thunk of AnyLocation.set(_:transaction:)();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return swift_bridgeObjectRelease();
}

void type metadata accessor for Set<DateComponents>()
{
  if (!lazy cache variable for type metadata for Set<DateComponents>)
  {
    type metadata accessor for DateComponents();
    lazy protocol witness table accessor for type DateComponents and conformance DateComponents();
    unint64_t v0 = type metadata accessor for Set();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Set<DateComponents>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type DateComponents and conformance DateComponents()
{
  unint64_t result = lazy protocol witness table cache variable for type DateComponents and conformance DateComponents;
  if (!lazy protocol witness table cache variable for type DateComponents and conformance DateComponents)
  {
    type metadata accessor for DateComponents();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DateComponents and conformance DateComponents);
  }
  return result;
}

uint64_t outlined destroy of Date?(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  type metadata accessor for DateComponents?(0, a2, a3, a4);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(a1, v5);
  return a1;
}

void *initializeBufferWithCopyOfBuffer for UIKitCalendarView(void *a1, char *a2, int *a3)
{
  int v3 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  uint64_t v4 = *(void *)a2;
  *a1 = *(void *)a2;
  if ((v3 & 0x20000) != 0)
  {
    uint64_t v6 = (void *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain();
  }
  else
  {
    uint64_t v6 = a1;
    uint64_t v7 = *((void *)a2 + 2);
    a1[1] = *((void *)a2 + 1);
    a1[2] = v7;
    uint64_t v8 = type metadata accessor for MultiDatePickerStyleConfiguration(0);
    uint64_t v9 = *(int *)(v8 + 24);
    uint64_t v10 = (char *)v6 + v9;
    char v44 = a2;
    uint64_t v11 = &a2[v9];
    uint64_t v12 = type metadata accessor for Date();
    uint64_t v13 = *(void *)(v12 - 8);
    uint64_t v14 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48);
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    if (v14(v11, 1, v12))
    {
      type metadata accessor for DateComponents?(0, (unint64_t *)&lazy cache variable for type metadata for Date?, MEMORY[0x1E4F27928], MEMORY[0x1E4FBB718]);
      memcpy(v10, v11, *(void *)(*(void *)(v15 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v10, v11, v12);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
    }
    uint64_t v16 = *(int *)(v8 + 28);
    uint64_t v17 = (char *)v6 + v16;
    uint64_t v18 = &v44[v16];
    if (v14(&v44[v16], 1, v12))
    {
      type metadata accessor for DateComponents?(0, (unint64_t *)&lazy cache variable for type metadata for Date?, MEMORY[0x1E4F27928], MEMORY[0x1E4FBB718]);
      memcpy(v17, v18, *(void *)(*(void *)(v19 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v17, v18, v12);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v17, 0, 1, v12);
    }
    uint64_t v20 = a3[5];
    uint64_t v21 = (void *)((char *)v6 + v20);
    uint64_t v22 = &v44[v20];
    type metadata accessor for DateComponents?(0, (unint64_t *)&lazy cache variable for type metadata for Environment<Locale>.Content, MEMORY[0x1E4F27A78], MEMORY[0x1E4F3F4D8]);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v23 = type metadata accessor for Locale();
      (*(void (**)(void *, char *, uint64_t))(*(void *)(v23 - 8) + 16))(v21, v22, v23);
    }
    else
    {
      *uint64_t v21 = *(void *)v22;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v24 = a3[6];
    long long v25 = (void *)((char *)v6 + v24);
    Class v26 = &v44[v24];
    type metadata accessor for DateComponents?(0, (unint64_t *)&lazy cache variable for type metadata for Environment<Calendar>.Content, MEMORY[0x1E4F27CA0], MEMORY[0x1E4F3F4D8]);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v27 = type metadata accessor for Calendar();
      (*(void (**)(void *, char *, uint64_t))(*(void *)(v27 - 8) + 16))(v25, v26, v27);
    }
    else
    {
      *long long v25 = *(void *)v26;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v28 = a3[7];
    uint64_t v29 = (void *)((char *)v6 + v28);
    uint64_t v30 = &v44[v28];
    type metadata accessor for DateComponents?(0, (unint64_t *)&lazy cache variable for type metadata for Environment<TimeZone>.Content, MEMORY[0x1E4F27D68], MEMORY[0x1E4F3F4D8]);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v31 = type metadata accessor for TimeZone();
      (*(void (**)(void *, char *, uint64_t))(*(void *)(v31 - 8) + 16))(v29, v30, v31);
    }
    else
    {
      *uint64_t v29 = *(void *)v30;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v32 = a3[8];
    uint64_t v33 = (char *)v6 + v32;
    uint64_t v34 = &v44[v32];
    uint64_t v35 = *(void *)v34;
    unsigned __int8 v36 = v34[8];
    outlined copy of Environment<Color?>.Content(*(void *)v34, v36);
    *(void *)uint64_t v33 = v35;
    v33[8] = v36;
    uint64_t v37 = a3[9];
    uint64_t v38 = (char *)v6 + v37;
    uint64_t v39 = &v44[v37];
    uint64_t v40 = *(void *)v39;
    char v41 = v39[8];
    outlined copy of ResolvedTableRowIDs.Storage(*(void *)v39, v41);
    *(void *)uint64_t v38 = v40;
    _OWORD v38[8] = v41;
  }
  return v6;
}

uint64_t destroy for UIKitCalendarView(uint64_t a1, int *a2)
{
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t v4 = type metadata accessor for MultiDatePickerStyleConfiguration(0);
  uint64_t v5 = a1 + *(int *)(v4 + 24);
  uint64_t v6 = type metadata accessor for Date();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
  if (!v8(v5, 1, v6)) {
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v5, v6);
  }
  uint64_t v9 = a1 + *(int *)(v4 + 28);
  if (!v8(v9, 1, v6)) {
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v9, v6);
  }
  uint64_t v10 = a1 + a2[5];
  type metadata accessor for DateComponents?(0, (unint64_t *)&lazy cache variable for type metadata for Environment<Locale>.Content, MEMORY[0x1E4F27A78], MEMORY[0x1E4F3F4D8]);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v11 = type metadata accessor for Locale();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v11 - 8) + 8))(v10, v11);
  }
  else
  {
    swift_release();
  }
  uint64_t v12 = a1 + a2[6];
  type metadata accessor for DateComponents?(0, (unint64_t *)&lazy cache variable for type metadata for Environment<Calendar>.Content, MEMORY[0x1E4F27CA0], MEMORY[0x1E4F3F4D8]);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v13 = type metadata accessor for Calendar();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v13 - 8) + 8))(v12, v13);
  }
  else
  {
    swift_release();
  }
  uint64_t v14 = a1 + a2[7];
  type metadata accessor for DateComponents?(0, (unint64_t *)&lazy cache variable for type metadata for Environment<TimeZone>.Content, MEMORY[0x1E4F27D68], MEMORY[0x1E4F3F4D8]);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v15 = type metadata accessor for TimeZone();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v15 - 8) + 8))(v14, v15);
  }
  else
  {
    swift_release();
  }
  outlined consume of Environment<Color?>.Content(*(void *)(a1 + a2[8]), *(unsigned __int8 *)(a1 + a2[8] + 8));
  uint64_t v16 = a1 + a2[9];
  uint64_t v17 = *(void *)v16;
  char v18 = *(unsigned char *)(v16 + 8);

  return outlined consume of Environment<[SceneID : KeyboardShortcut]>.Content(v17, v18);
}

void *initializeWithCopy for UIKitCalendarView(void *a1, char *a2, int *a3)
{
  uint64_t v5 = *((void *)a2 + 1);
  *a1 = *(void *)a2;
  a1[1] = v5;
  a1[2] = *((void *)a2 + 2);
  uint64_t v6 = type metadata accessor for MultiDatePickerStyleConfiguration(0);
  uint64_t v7 = *(int *)(v6 + 24);
  uint64_t v8 = (char *)a1 + v7;
  id v42 = a2;
  uint64_t v9 = &a2[v7];
  uint64_t v10 = type metadata accessor for Date();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  if (v12(v9, 1, v10))
  {
    type metadata accessor for DateComponents?(0, (unint64_t *)&lazy cache variable for type metadata for Date?, MEMORY[0x1E4F27928], MEMORY[0x1E4FBB718]);
    memcpy(v8, v9, *(void *)(*(void *)(v13 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v8, v9, v10);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  }
  uint64_t v14 = *(int *)(v6 + 28);
  uint64_t v15 = (char *)a1 + v14;
  uint64_t v16 = &v42[v14];
  if (v12(&v42[v14], 1, v10))
  {
    type metadata accessor for DateComponents?(0, (unint64_t *)&lazy cache variable for type metadata for Date?, MEMORY[0x1E4F27928], MEMORY[0x1E4FBB718]);
    memcpy(v15, v16, *(void *)(*(void *)(v17 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v15, v16, v10);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v15, 0, 1, v10);
  }
  uint64_t v18 = a3[5];
  uint64_t v19 = (void *)((char *)a1 + v18);
  uint64_t v20 = &v42[v18];
  type metadata accessor for DateComponents?(0, (unint64_t *)&lazy cache variable for type metadata for Environment<Locale>.Content, MEMORY[0x1E4F27A78], MEMORY[0x1E4F3F4D8]);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v21 = type metadata accessor for Locale();
    (*(void (**)(void *, char *, uint64_t))(*(void *)(v21 - 8) + 16))(v19, v20, v21);
  }
  else
  {
    *uint64_t v19 = *(void *)v20;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  uint64_t v22 = a3[6];
  uint64_t v23 = (void *)((char *)a1 + v22);
  uint64_t v24 = &v42[v22];
  type metadata accessor for DateComponents?(0, (unint64_t *)&lazy cache variable for type metadata for Environment<Calendar>.Content, MEMORY[0x1E4F27CA0], MEMORY[0x1E4F3F4D8]);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v25 = type metadata accessor for Calendar();
    (*(void (**)(void *, char *, uint64_t))(*(void *)(v25 - 8) + 16))(v23, v24, v25);
  }
  else
  {
    *uint64_t v23 = *(void *)v24;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  uint64_t v26 = a3[7];
  uint64_t v27 = (void *)((char *)a1 + v26);
  uint64_t v28 = &v42[v26];
  type metadata accessor for DateComponents?(0, (unint64_t *)&lazy cache variable for type metadata for Environment<TimeZone>.Content, MEMORY[0x1E4F27D68], MEMORY[0x1E4F3F4D8]);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v29 = type metadata accessor for TimeZone();
    (*(void (**)(void *, char *, uint64_t))(*(void *)(v29 - 8) + 16))(v27, v28, v29);
  }
  else
  {
    *uint64_t v27 = *(void *)v28;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  uint64_t v30 = a3[8];
  uint64_t v31 = (char *)a1 + v30;
  uint64_t v32 = &v42[v30];
  uint64_t v33 = *(void *)v32;
  unsigned __int8 v34 = v32[8];
  outlined copy of Environment<Color?>.Content(*(void *)v32, v34);
  *(void *)uint64_t v31 = v33;
  _OWORD v31[8] = v34;
  uint64_t v35 = a3[9];
  unsigned __int8 v36 = (char *)a1 + v35;
  uint64_t v37 = &v42[v35];
  uint64_t v38 = *(void *)v37;
  char v39 = v37[8];
  outlined copy of ResolvedTableRowIDs.Storage(*(void *)v37, v39);
  *(void *)unsigned __int8 v36 = v38;
  v36[8] = v39;
  return a1;
}

char *assignWithCopy for UIKitCalendarView(char *a1, char *a2, int *a3)
{
  *(void *)a1 = *(void *)a2;
  swift_retain();
  swift_release();
  *((void *)a1 + 1) = *((void *)a2 + 1);
  swift_retain();
  swift_release();
  *((void *)a1 + 2) = *((void *)a2 + 2);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v5 = type metadata accessor for MultiDatePickerStyleConfiguration(0);
  uint64_t v6 = *(int *)(v5 + 24);
  uint64_t v7 = &a1[v6];
  uint64_t v8 = &a2[v6];
  uint64_t v9 = type metadata accessor for Date();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48);
  int v12 = v11(v7, 1, v9);
  int v13 = v11(v8, 1, v9);
  if (v12)
  {
    if (!v13)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v7, v8, v9);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v13)
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v7, v9);
LABEL_6:
    type metadata accessor for DateComponents?(0, (unint64_t *)&lazy cache variable for type metadata for Date?, MEMORY[0x1E4F27928], MEMORY[0x1E4FBB718]);
    memcpy(v7, v8, *(void *)(*(void *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 24))(v7, v8, v9);
LABEL_7:
  uint64_t v15 = *(int *)(v5 + 28);
  uint64_t v16 = &a1[v15];
  uint64_t v17 = &a2[v15];
  int v18 = v11(&a1[v15], 1, v9);
  int v19 = v11(v17, 1, v9);
  if (v18)
  {
    if (!v19)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v16, v17, v9);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v16, 0, 1, v9);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v19)
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v16, v9);
LABEL_12:
    type metadata accessor for DateComponents?(0, (unint64_t *)&lazy cache variable for type metadata for Date?, MEMORY[0x1E4F27928], MEMORY[0x1E4FBB718]);
    memcpy(v16, v17, *(void *)(*(void *)(v20 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 24))(v16, v17, v9);
LABEL_13:
  if (a1 != a2)
  {
    uint64_t v21 = a3[5];
    uint64_t v22 = &a1[v21];
    uint64_t v23 = &a2[v21];
    uint64_t v24 = (uint64_t (*)(uint64_t))MEMORY[0x1E4F27A78];
    uint64_t v25 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E4F3F4D8];
    outlined destroy of Date?((uint64_t)&a1[v21], (unint64_t *)&lazy cache variable for type metadata for Environment<Locale>.Content, MEMORY[0x1E4F27A78], MEMORY[0x1E4F3F4D8]);
    type metadata accessor for DateComponents?(0, (unint64_t *)&lazy cache variable for type metadata for Environment<Locale>.Content, v24, v25);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v26 = type metadata accessor for Locale();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v26 - 8) + 16))(v22, v23, v26);
    }
    else
    {
      *(void *)uint64_t v22 = *(void *)v23;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v27 = a3[6];
    uint64_t v28 = &a1[v27];
    uint64_t v29 = &a2[v27];
    uint64_t v30 = (uint64_t (*)(uint64_t))MEMORY[0x1E4F27CA0];
    uint64_t v31 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E4F3F4D8];
    outlined destroy of Date?((uint64_t)&a1[v27], (unint64_t *)&lazy cache variable for type metadata for Environment<Calendar>.Content, MEMORY[0x1E4F27CA0], MEMORY[0x1E4F3F4D8]);
    type metadata accessor for DateComponents?(0, (unint64_t *)&lazy cache variable for type metadata for Environment<Calendar>.Content, v30, v31);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v32 = type metadata accessor for Calendar();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v32 - 8) + 16))(v28, v29, v32);
    }
    else
    {
      *(void *)uint64_t v28 = *(void *)v29;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v33 = a3[7];
    unsigned __int8 v34 = &a1[v33];
    uint64_t v35 = &a2[v33];
    unsigned __int8 v36 = (uint64_t (*)(uint64_t))MEMORY[0x1E4F27D68];
    uint64_t v37 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E4F3F4D8];
    outlined destroy of Date?((uint64_t)&a1[v33], (unint64_t *)&lazy cache variable for type metadata for Environment<TimeZone>.Content, MEMORY[0x1E4F27D68], MEMORY[0x1E4F3F4D8]);
    type metadata accessor for DateComponents?(0, (unint64_t *)&lazy cache variable for type metadata for Environment<TimeZone>.Content, v36, v37);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v38 = type metadata accessor for TimeZone();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v38 - 8) + 16))(v34, v35, v38);
    }
    else
    {
      *(void *)unsigned __int8 v34 = *(void *)v35;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  uint64_t v39 = a3[8];
  uint64_t v40 = &a1[v39];
  char v41 = &a2[v39];
  uint64_t v42 = *(void *)v41;
  unsigned __int8 v43 = v41[8];
  outlined copy of Environment<Color?>.Content(*(void *)v41, v43);
  uint64_t v44 = *(void *)v40;
  uint64_t v45 = v40[8];
  *(void *)uint64_t v40 = v42;
  _OWORD v40[8] = v43;
  outlined consume of Environment<Color?>.Content(v44, v45);
  uint64_t v46 = a3[9];
  uint64_t v47 = &a1[v46];
  uint64_t v48 = &a2[v46];
  uint64_t v49 = *(void *)v48;
  LOBYTE(v40) = v48[8];
  outlined copy of ResolvedTableRowIDs.Storage(*(void *)v48, (char)v40);
  uint64_t v50 = *(void *)v47;
  char v51 = v47[8];
  *(void *)uint64_t v47 = v49;
  void v47[8] = (char)v40;
  outlined consume of Environment<[SceneID : KeyboardShortcut]>.Content(v50, v51);
  return a1;
}

uint64_t initializeWithTake for UIKitCalendarView(uint64_t a1, uint64_t a2, int *a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  uint64_t v6 = type metadata accessor for MultiDatePickerStyleConfiguration(0);
  uint64_t v7 = *(int *)(v6 + 24);
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (const void *)(a2 + v7);
  uint64_t v10 = type metadata accessor for Date();
  uint64_t v11 = *(void *)(v10 - 8);
  int v12 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v11 + 48);
  if (v12(v9, 1, v10))
  {
    type metadata accessor for DateComponents?(0, (unint64_t *)&lazy cache variable for type metadata for Date?, MEMORY[0x1E4F27928], MEMORY[0x1E4FBB718]);
    memcpy(v8, v9, *(void *)(*(void *)(v13 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v11 + 32))(v8, v9, v10);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  }
  uint64_t v14 = *(int *)(v6 + 28);
  uint64_t v15 = (void *)(a1 + v14);
  uint64_t v16 = (const void *)(a2 + v14);
  if (v12((const void *)(a2 + v14), 1, v10))
  {
    type metadata accessor for DateComponents?(0, (unint64_t *)&lazy cache variable for type metadata for Date?, MEMORY[0x1E4F27928], MEMORY[0x1E4FBB718]);
    memcpy(v15, v16, *(void *)(*(void *)(v17 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v11 + 32))(v15, v16, v10);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v11 + 56))(v15, 0, 1, v10);
  }
  uint64_t v18 = a3[5];
  int v19 = (void *)(a1 + v18);
  uint64_t v20 = (const void *)(a2 + v18);
  type metadata accessor for DateComponents?(0, (unint64_t *)&lazy cache variable for type metadata for Environment<Locale>.Content, MEMORY[0x1E4F27A78], MEMORY[0x1E4F3F4D8]);
  uint64_t v22 = v21;
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v23 = type metadata accessor for Locale();
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v23 - 8) + 32))(v19, v20, v23);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v19, v20, *(void *)(*(void *)(v22 - 8) + 64));
  }
  uint64_t v24 = a3[6];
  uint64_t v25 = (void *)(a1 + v24);
  uint64_t v26 = (const void *)(a2 + v24);
  type metadata accessor for DateComponents?(0, (unint64_t *)&lazy cache variable for type metadata for Environment<Calendar>.Content, MEMORY[0x1E4F27CA0], MEMORY[0x1E4F3F4D8]);
  uint64_t v28 = v27;
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v29 = type metadata accessor for Calendar();
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v29 - 8) + 32))(v25, v26, v29);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v25, v26, *(void *)(*(void *)(v28 - 8) + 64));
  }
  uint64_t v30 = a3[7];
  uint64_t v31 = (void *)(a1 + v30);
  uint64_t v32 = (const void *)(a2 + v30);
  type metadata accessor for DateComponents?(0, (unint64_t *)&lazy cache variable for type metadata for Environment<TimeZone>.Content, MEMORY[0x1E4F27D68], MEMORY[0x1E4F3F4D8]);
  uint64_t v34 = v33;
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v35 = type metadata accessor for TimeZone();
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v35 - 8) + 32))(v31, v32, v35);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v31, v32, *(void *)(*(void *)(v34 - 8) + 64));
  }
  uint64_t v36 = a3[8];
  uint64_t v37 = a3[9];
  uint64_t v38 = a1 + v36;
  uint64_t v39 = a2 + v36;
  *(void *)uint64_t v38 = *(void *)v39;
  *(unsigned char *)(v38 + 8) = *(unsigned char *)(v39 + 8);
  uint64_t v40 = a1 + v37;
  uint64_t v41 = a2 + v37;
  *(void *)uint64_t v40 = *(void *)v41;
  *(unsigned char *)(v40 + 8) = *(unsigned char *)(v41 + 8);
  return a1;
}

char *assignWithTake for UIKitCalendarView(char *a1, char *a2, int *a3)
{
  *(void *)a1 = *(void *)a2;
  swift_release();
  *((void *)a1 + 1) = *((void *)a2 + 1);
  swift_release();
  *((void *)a1 + 2) = *((void *)a2 + 2);
  swift_bridgeObjectRelease();
  uint64_t v5 = type metadata accessor for MultiDatePickerStyleConfiguration(0);
  uint64_t v6 = *(int *)(v5 + 24);
  uint64_t v7 = &a1[v6];
  uint64_t v8 = &a2[v6];
  uint64_t v9 = type metadata accessor for Date();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48);
  int v12 = v11(v7, 1, v9);
  int v13 = v11(v8, 1, v9);
  if (v12)
  {
    if (!v13)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v7, v8, v9);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v13)
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v7, v9);
LABEL_6:
    type metadata accessor for DateComponents?(0, (unint64_t *)&lazy cache variable for type metadata for Date?, MEMORY[0x1E4F27928], MEMORY[0x1E4FBB718]);
    memcpy(v7, v8, *(void *)(*(void *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 40))(v7, v8, v9);
LABEL_7:
  uint64_t v15 = *(int *)(v5 + 28);
  uint64_t v16 = &a1[v15];
  uint64_t v17 = &a2[v15];
  int v18 = v11(&a1[v15], 1, v9);
  int v19 = v11(v17, 1, v9);
  if (v18)
  {
    uint64_t v20 = a3;
    if (!v19)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v16, v17, v9);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v16, 0, 1, v9);
      if (a1 == a2) {
        goto LABEL_23;
      }
      goto LABEL_14;
    }
LABEL_13:
    type metadata accessor for DateComponents?(0, (unint64_t *)&lazy cache variable for type metadata for Date?, MEMORY[0x1E4F27928], MEMORY[0x1E4FBB718]);
    memcpy(v16, v17, *(void *)(*(void *)(v21 - 8) + 64));
    if (a1 == a2) {
      goto LABEL_23;
    }
    goto LABEL_14;
  }
  uint64_t v20 = a3;
  if (v19)
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v16, v9);
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 40))(v16, v17, v9);
  if (a1 == a2) {
    goto LABEL_23;
  }
LABEL_14:
  uint64_t v22 = v20[5];
  uint64_t v23 = &a1[v22];
  uint64_t v24 = &a2[v22];
  uint64_t v25 = (uint64_t (*)(uint64_t))MEMORY[0x1E4F27A78];
  uint64_t v26 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E4F3F4D8];
  outlined destroy of Date?((uint64_t)&a1[v22], (unint64_t *)&lazy cache variable for type metadata for Environment<Locale>.Content, MEMORY[0x1E4F27A78], MEMORY[0x1E4F3F4D8]);
  type metadata accessor for DateComponents?(0, (unint64_t *)&lazy cache variable for type metadata for Environment<Locale>.Content, v25, v26);
  uint64_t v28 = v27;
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v29 = type metadata accessor for Locale();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v29 - 8) + 32))(v23, v24, v29);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v23, v24, *(void *)(*(void *)(v28 - 8) + 64));
  }
  uint64_t v30 = v20[6];
  uint64_t v31 = &a1[v30];
  uint64_t v32 = &a2[v30];
  uint64_t v33 = (uint64_t (*)(uint64_t))MEMORY[0x1E4F27CA0];
  uint64_t v34 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E4F3F4D8];
  outlined destroy of Date?((uint64_t)&a1[v30], (unint64_t *)&lazy cache variable for type metadata for Environment<Calendar>.Content, MEMORY[0x1E4F27CA0], MEMORY[0x1E4F3F4D8]);
  type metadata accessor for DateComponents?(0, (unint64_t *)&lazy cache variable for type metadata for Environment<Calendar>.Content, v33, v34);
  uint64_t v36 = v35;
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v37 = type metadata accessor for Calendar();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v37 - 8) + 32))(v31, v32, v37);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v31, v32, *(void *)(*(void *)(v36 - 8) + 64));
  }
  uint64_t v38 = v20[7];
  uint64_t v39 = &a1[v38];
  uint64_t v40 = &a2[v38];
  uint64_t v41 = (uint64_t (*)(uint64_t))MEMORY[0x1E4F27D68];
  uint64_t v42 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E4F3F4D8];
  outlined destroy of Date?((uint64_t)&a1[v38], (unint64_t *)&lazy cache variable for type metadata for Environment<TimeZone>.Content, MEMORY[0x1E4F27D68], MEMORY[0x1E4F3F4D8]);
  type metadata accessor for DateComponents?(0, (unint64_t *)&lazy cache variable for type metadata for Environment<TimeZone>.Content, v41, v42);
  uint64_t v44 = v43;
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v45 = type metadata accessor for TimeZone();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v45 - 8) + 32))(v39, v40, v45);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v39, v40, *(void *)(*(void *)(v44 - 8) + 64));
  }
LABEL_23:
  uint64_t v46 = v20[8];
  uint64_t v47 = &a1[v46];
  uint64_t v48 = &a2[v46];
  uint64_t v49 = *(void *)v48;
  LOBYTE(v48) = v48[8];
  uint64_t v50 = *(void *)v47;
  uint64_t v51 = v47[8];
  *(void *)uint64_t v47 = v49;
  void v47[8] = (char)v48;
  outlined consume of Environment<Color?>.Content(v50, v51);
  uint64_t v52 = v20[9];
  unsigned int v53 = &a1[v52];
  unsigned int v54 = &a2[v52];
  uint64_t v55 = *(void *)v54;
  LOBYTE(v54) = v54[8];
  uint64_t v56 = *(void *)v53;
  char v57 = v53[8];
  *(void *)unsigned int v53 = v55;
  v53[8] = (char)v54;
  outlined consume of Environment<[SceneID : KeyboardShortcut]>.Content(v56, v57);
  return a1;
}

uint64_t getEnumTagSinglePayload for UIKitCalendarView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_187C16B90);
}

uint64_t sub_187C16B90(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for MultiDatePickerStyleConfiguration(0);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    uint64_t v10 = a1;
  }
  else
  {
    type metadata accessor for DateComponents?(0, &lazy cache variable for type metadata for Environment<Locale>, MEMORY[0x1E4F27A78], MEMORY[0x1E4F3F4E0]);
    if (*(_DWORD *)(*(void *)(v11 - 8) + 84) == a2)
    {
      uint64_t v8 = v11;
      uint64_t v12 = *(void *)(v11 - 8);
      uint64_t v13 = a3[5];
    }
    else
    {
      type metadata accessor for DateComponents?(0, &lazy cache variable for type metadata for Environment<Calendar>, MEMORY[0x1E4F27CA0], MEMORY[0x1E4F3F4E0]);
      if (*(_DWORD *)(*(void *)(v14 - 8) + 84) == a2)
      {
        uint64_t v8 = v14;
        uint64_t v12 = *(void *)(v14 - 8);
        uint64_t v13 = a3[6];
      }
      else
      {
        type metadata accessor for DateComponents?(0, (unint64_t *)&lazy cache variable for type metadata for Environment<TimeZone>, MEMORY[0x1E4F27D68], MEMORY[0x1E4F3F4E0]);
        if (*(_DWORD *)(*(void *)(v15 - 8) + 84) != a2)
        {
          unsigned int v17 = *(unsigned __int8 *)(a1 + a3[8] + 8);
          if (v17 > 1) {
            return (v17 ^ 0xFF) + 1;
          }
          else {
            return 0;
          }
        }
        uint64_t v8 = v15;
        uint64_t v12 = *(void *)(v15 - 8);
        uint64_t v13 = a3[7];
      }
    }
    uint64_t v10 = a1 + v13;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
  }

  return v9(v10, a2, v8);
}

uint64_t storeEnumTagSinglePayload for UIKitCalendarView(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_187C16DE0);
}

void sub_187C16DE0(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8 = type metadata accessor for MultiDatePickerStyleConfiguration(0);
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    uint64_t v12 = a1;
  }
  else
  {
    type metadata accessor for DateComponents?(0, &lazy cache variable for type metadata for Environment<Locale>, MEMORY[0x1E4F27A78], MEMORY[0x1E4F3F4E0]);
    if (*(_DWORD *)(*(void *)(v13 - 8) + 84) == a3)
    {
      uint64_t v10 = v13;
      uint64_t v14 = *(void *)(v13 - 8);
      uint64_t v15 = a4[5];
    }
    else
    {
      type metadata accessor for DateComponents?(0, &lazy cache variable for type metadata for Environment<Calendar>, MEMORY[0x1E4F27CA0], MEMORY[0x1E4F3F4E0]);
      if (*(_DWORD *)(*(void *)(v16 - 8) + 84) == a3)
      {
        uint64_t v10 = v16;
        uint64_t v14 = *(void *)(v16 - 8);
        uint64_t v15 = a4[6];
      }
      else
      {
        type metadata accessor for DateComponents?(0, (unint64_t *)&lazy cache variable for type metadata for Environment<TimeZone>, MEMORY[0x1E4F27D68], MEMORY[0x1E4F3F4E0]);
        if (*(_DWORD *)(*(void *)(v17 - 8) + 84) != a3)
        {
          *(unsigned char *)(a1 + a4[8] + 8) = -(char)a2;
          return;
        }
        uint64_t v10 = v17;
        uint64_t v14 = *(void *)(v17 - 8);
        uint64_t v15 = a4[7];
      }
    }
    uint64_t v12 = a1 + v15;
    uint64_t v11 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }

  v11(v12, a2, a2, v10);
}

uint64_t type metadata accessor for UIKitCalendarView(uint64_t a1)
{
  return type metadata accessor for SortableTableHeaderButton(a1, (uint64_t *)&type metadata singleton initialization cache for UIKitCalendarView);
}

void type metadata completion function for UIKitCalendarView()
{
  type metadata accessor for MultiDatePickerStyleConfiguration(319);
  if (v0 <= 0x3F)
  {
    type metadata accessor for DateComponents?(319, (unint64_t *)&lazy cache variable for type metadata for Environment<Locale>.Content, MEMORY[0x1E4F27A78], MEMORY[0x1E4F3F4D8]);
    if (v1 <= 0x3F)
    {
      type metadata accessor for DateComponents?(319, (unint64_t *)&lazy cache variable for type metadata for Environment<Calendar>.Content, MEMORY[0x1E4F27CA0], MEMORY[0x1E4F3F4D8]);
      if (v2 <= 0x3F)
      {
        type metadata accessor for DateComponents?(319, (unint64_t *)&lazy cache variable for type metadata for Environment<TimeZone>.Content, MEMORY[0x1E4F27D68], MEMORY[0x1E4F3F4D8]);
        if (v3 <= 0x3F) {
          swift_initStructMetadata();
        }
      }
    }
  }
}

uint64_t associated type witness table accessor for View.Body : View in UIKitCalendarView()
{
  return swift_getOpaqueTypeConformance2();
}

void type metadata accessor for LabeledContent<MultiDatePickerStyleConfiguration.Label, UIKitCalendarViewRepresentable>()
{
  if (!lazy cache variable for type metadata for LabeledContent<MultiDatePickerStyleConfiguration.Label, UIKitCalendarViewRepresentable>)
  {
    type metadata accessor for UIKitCalendarViewRepresentable(255);
    unint64_t v0 = type metadata accessor for LabeledContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for LabeledContent<MultiDatePickerStyleConfiguration.Label, UIKitCalendarViewRepresentable>);
    }
  }
}

uint64_t type metadata accessor for UIKitCalendarViewRepresentable(uint64_t a1)
{
  return type metadata accessor for SortableTableHeaderButton(a1, type metadata singleton initialization cache for UIKitCalendarViewRepresentable);
}

uint64_t outlined init with copy of MultiDatePickerStyleConfiguration(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t outlined destroy of MultiDatePickerStyleConfiguration(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

void type metadata accessor for AnyDynamicFontModifier<Font.DesignModifier>()
{
  if (!lazy cache variable for type metadata for AnyDynamicFontModifier<Font.DesignModifier>)
  {
    lazy protocol witness table accessor for type Font.DesignModifier and conformance Font.DesignModifier();
    unint64_t v0 = type metadata accessor for AnyDynamicFontModifier();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for AnyDynamicFontModifier<Font.DesignModifier>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type Font.DesignModifier and conformance Font.DesignModifier()
{
  unint64_t result = lazy protocol witness table cache variable for type Font.DesignModifier and conformance Font.DesignModifier;
  if (!lazy protocol witness table cache variable for type Font.DesignModifier and conformance Font.DesignModifier)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Font.DesignModifier and conformance Font.DesignModifier);
  }
  return result;
}

unint64_t partial apply for specialized closure #1 in BidirectionalCollection.last(where:)@<X0>(unint64_t *a1@<X0>, unint64_t *a2@<X8>)
{
  unint64_t result = specialized closure #1 in BidirectionalCollection.last(where:)(*a1, **(void **)(v2 + 16));
  if (!v3) {
    *a2 = result;
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type LabeledContent<MultiDatePickerStyleConfiguration.Label, UIKitCalendarViewRepresentable> and conformance <> LabeledContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type LabeledContent<MultiDatePickerStyleConfiguration.Label, UIKitCalendarViewRepresentable> and conformance <> LabeledContent<A, B>;
  if (!lazy protocol witness table cache variable for type LabeledContent<MultiDatePickerStyleConfiguration.Label, UIKitCalendarViewRepresentable> and conformance <> LabeledContent<A, B>)
  {
    type metadata accessor for LabeledContent<MultiDatePickerStyleConfiguration.Label, UIKitCalendarViewRepresentable>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LabeledContent<MultiDatePickerStyleConfiguration.Label, UIKitCalendarViewRepresentable> and conformance <> LabeledContent<A, B>);
  }
  return result;
}

void *initializeBufferWithCopyOfBuffer for UIKitCalendarViewRepresentable(void *a1, char *a2, int *a3)
{
  int v3 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  uint64_t v4 = *(void *)a2;
  *a1 = *(void *)a2;
  if ((v3 & 0x20000) != 0)
  {
    uint64_t v6 = (void *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
  }
  else
  {
    uint64_t v6 = a1;
    uint64_t v7 = *((void *)a2 + 2);
    a1[1] = *((void *)a2 + 1);
    a1[2] = v7;
    uint64_t v8 = type metadata accessor for MultiDatePickerStyleConfiguration(0);
    uint64_t v9 = *(int *)(v8 + 24);
    __dst = (char *)v6 + v9;
    uint64_t v36 = v8;
    uint64_t v10 = &a2[v9];
    uint64_t v11 = type metadata accessor for Date();
    uint64_t v12 = *(void *)(v11 - 8);
    uint64_t v13 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48);
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    if (v13(v10, 1, v11))
    {
      type metadata accessor for DateComponents?(0, (unint64_t *)&lazy cache variable for type metadata for Date?, MEMORY[0x1E4F27928], MEMORY[0x1E4FBB718]);
      memcpy(__dst, v10, *(void *)(*(void *)(v14 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 16))(__dst, v10, v11);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(__dst, 0, 1, v11);
    }
    uint64_t v15 = v12;
    uint64_t v16 = *(int *)(v36 + 28);
    uint64_t v17 = (char *)v6 + v16;
    int v18 = &a2[v16];
    if (v13(&a2[v16], 1, v11))
    {
      type metadata accessor for DateComponents?(0, (unint64_t *)&lazy cache variable for type metadata for Date?, MEMORY[0x1E4F27928], MEMORY[0x1E4FBB718]);
      memcpy(v17, v18, *(void *)(*(void *)(v19 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v17, v18, v11);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v17, 0, 1, v11);
    }
    uint64_t v20 = a3[5];
    uint64_t v21 = (char *)v6 + v20;
    uint64_t v22 = &a2[v20];
    uint64_t v23 = type metadata accessor for Locale();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v23 - 8) + 16))(v21, v22, v23);
    uint64_t v24 = a3[6];
    uint64_t v25 = (char *)v6 + v24;
    uint64_t v26 = &a2[v24];
    uint64_t v27 = type metadata accessor for Calendar();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v27 - 8) + 16))(v25, v26, v27);
    uint64_t v28 = a3[7];
    uint64_t v29 = (char *)v6 + v28;
    uint64_t v30 = &a2[v28];
    uint64_t v31 = type metadata accessor for TimeZone();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v31 - 8) + 16))(v29, v30, v31);
    uint64_t v32 = a3[9];
    *(void *)((char *)v6 + a3[8]) = *(void *)&a2[a3[8]];
    *((unsigned char *)v6 + v32) = a2[v32];
  }
  swift_retain();
  return v6;
}

uint64_t destroy for UIKitCalendarViewRepresentable(uint64_t a1, int *a2)
{
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t v4 = type metadata accessor for MultiDatePickerStyleConfiguration(0);
  uint64_t v5 = a1 + *(int *)(v4 + 24);
  uint64_t v6 = type metadata accessor for Date();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
  if (!v8(v5, 1, v6)) {
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v5, v6);
  }
  uint64_t v9 = a1 + *(int *)(v4 + 28);
  if (!v8(v9, 1, v6)) {
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v9, v6);
  }
  uint64_t v10 = a1 + a2[5];
  uint64_t v11 = type metadata accessor for Locale();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v11 - 8) + 8))(v10, v11);
  uint64_t v12 = a1 + a2[6];
  uint64_t v13 = type metadata accessor for Calendar();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v13 - 8) + 8))(v12, v13);
  uint64_t v14 = a1 + a2[7];
  uint64_t v15 = type metadata accessor for TimeZone();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v15 - 8) + 8))(v14, v15);

  return swift_release();
}

void *initializeWithCopy for UIKitCalendarViewRepresentable(void *a1, char *a2, int *a3)
{
  uint64_t v5 = *((void *)a2 + 1);
  *a1 = *(void *)a2;
  a1[1] = v5;
  a1[2] = *((void *)a2 + 2);
  uint64_t v6 = type metadata accessor for MultiDatePickerStyleConfiguration(0);
  uint64_t v7 = *(int *)(v6 + 24);
  __dst = (char *)a1 + v7;
  uint64_t v8 = &a2[v7];
  uint64_t v9 = type metadata accessor for Date();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  if (v11(v8, 1, v9))
  {
    type metadata accessor for DateComponents?(0, (unint64_t *)&lazy cache variable for type metadata for Date?, MEMORY[0x1E4F27928], MEMORY[0x1E4FBB718]);
    memcpy(__dst, v8, *(void *)(*(void *)(v12 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 16))(__dst, v8, v9);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(__dst, 0, 1, v9);
  }
  uint64_t v13 = v10;
  uint64_t v14 = *(int *)(v6 + 28);
  uint64_t v15 = (char *)a1 + v14;
  uint64_t v16 = &a2[v14];
  if (v11(&a2[v14], 1, v9))
  {
    type metadata accessor for DateComponents?(0, (unint64_t *)&lazy cache variable for type metadata for Date?, MEMORY[0x1E4F27928], MEMORY[0x1E4FBB718]);
    memcpy(v15, v16, *(void *)(*(void *)(v17 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v15, v16, v9);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v15, 0, 1, v9);
  }
  uint64_t v18 = a3[5];
  uint64_t v19 = (char *)a1 + v18;
  uint64_t v20 = &a2[v18];
  uint64_t v21 = type metadata accessor for Locale();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v21 - 8) + 16))(v19, v20, v21);
  uint64_t v22 = a3[6];
  uint64_t v23 = (char *)a1 + v22;
  uint64_t v24 = &a2[v22];
  uint64_t v25 = type metadata accessor for Calendar();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v25 - 8) + 16))(v23, v24, v25);
  uint64_t v26 = a3[7];
  uint64_t v27 = (char *)a1 + v26;
  uint64_t v28 = &a2[v26];
  uint64_t v29 = type metadata accessor for TimeZone();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v29 - 8) + 16))(v27, v28, v29);
  uint64_t v30 = a3[9];
  *(void *)((char *)a1 + a3[8]) = *(void *)&a2[a3[8]];
  *((unsigned char *)a1 + v30) = a2[v30];
  swift_retain();
  return a1;
}

char *assignWithCopy for UIKitCalendarViewRepresentable(char *a1, void *a2, int *a3)
{
  *(void *)a1 = *a2;
  swift_retain();
  swift_release();
  *((void *)a1 + 1) = a2[1];
  swift_retain();
  swift_release();
  *((void *)a1 + 2) = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v5 = type metadata accessor for MultiDatePickerStyleConfiguration(0);
  uint64_t v6 = *(int *)(v5 + 24);
  uint64_t v7 = &a1[v6];
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for Date();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48);
  int v12 = v11(v7, 1, v9);
  int v13 = v11(v8, 1, v9);
  if (v12)
  {
    if (!v13)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v7, v8, v9);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v13)
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v7, v9);
LABEL_6:
    type metadata accessor for DateComponents?(0, (unint64_t *)&lazy cache variable for type metadata for Date?, MEMORY[0x1E4F27928], MEMORY[0x1E4FBB718]);
    memcpy(v7, v8, *(void *)(*(void *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 24))(v7, v8, v9);
LABEL_7:
  uint64_t v15 = *(int *)(v5 + 28);
  uint64_t v16 = &a1[v15];
  uint64_t v17 = (char *)a2 + v15;
  int v18 = v11(&a1[v15], 1, v9);
  int v19 = v11(v17, 1, v9);
  if (!v18)
  {
    if (!v19)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 24))(v16, v17, v9);
      goto LABEL_13;
    }
    (*(void (**)(char *, uint64_t))(v10 + 8))(v16, v9);
    goto LABEL_12;
  }
  if (v19)
  {
LABEL_12:
    type metadata accessor for DateComponents?(0, (unint64_t *)&lazy cache variable for type metadata for Date?, MEMORY[0x1E4F27928], MEMORY[0x1E4FBB718]);
    memcpy(v16, v17, *(void *)(*(void *)(v20 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v16, v17, v9);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v16, 0, 1, v9);
LABEL_13:
  uint64_t v21 = a3[5];
  uint64_t v22 = &a1[v21];
  uint64_t v23 = (char *)a2 + v21;
  uint64_t v24 = type metadata accessor for Locale();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v24 - 8) + 24))(v22, v23, v24);
  uint64_t v25 = a3[6];
  uint64_t v26 = &a1[v25];
  uint64_t v27 = (char *)a2 + v25;
  uint64_t v28 = type metadata accessor for Calendar();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v28 - 8) + 24))(v26, v27, v28);
  uint64_t v29 = a3[7];
  uint64_t v30 = &a1[v29];
  uint64_t v31 = (char *)a2 + v29;
  uint64_t v32 = type metadata accessor for TimeZone();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v32 - 8) + 24))(v30, v31, v32);
  *(void *)&a1[a3[8]] = *(void *)((char *)a2 + a3[8]);
  swift_retain();
  swift_release();
  a1[a3[9]] = *((unsigned char *)a2 + a3[9]);
  return a1;
}

uint64_t initializeWithTake for UIKitCalendarViewRepresentable(uint64_t a1, uint64_t a2, int *a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  uint64_t v6 = type metadata accessor for MultiDatePickerStyleConfiguration(0);
  uint64_t v7 = *(int *)(v6 + 24);
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (const void *)(a2 + v7);
  uint64_t v10 = type metadata accessor for Date();
  uint64_t v11 = *(void *)(v10 - 8);
  int v12 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v11 + 48);
  if (v12(v9, 1, v10))
  {
    type metadata accessor for DateComponents?(0, (unint64_t *)&lazy cache variable for type metadata for Date?, MEMORY[0x1E4F27928], MEMORY[0x1E4FBB718]);
    memcpy(v8, v9, *(void *)(*(void *)(v13 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v11 + 32))(v8, v9, v10);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  }
  uint64_t v14 = *(int *)(v6 + 28);
  uint64_t v15 = (void *)(a1 + v14);
  uint64_t v16 = (const void *)(a2 + v14);
  if (v12((const void *)(a2 + v14), 1, v10))
  {
    type metadata accessor for DateComponents?(0, (unint64_t *)&lazy cache variable for type metadata for Date?, MEMORY[0x1E4F27928], MEMORY[0x1E4FBB718]);
    memcpy(v15, v16, *(void *)(*(void *)(v17 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v11 + 32))(v15, v16, v10);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v11 + 56))(v15, 0, 1, v10);
  }
  uint64_t v18 = a3[5];
  uint64_t v19 = a1 + v18;
  uint64_t v20 = a2 + v18;
  uint64_t v21 = type metadata accessor for Locale();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v21 - 8) + 32))(v19, v20, v21);
  uint64_t v22 = a3[6];
  uint64_t v23 = a1 + v22;
  uint64_t v24 = a2 + v22;
  uint64_t v25 = type metadata accessor for Calendar();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v25 - 8) + 32))(v23, v24, v25);
  uint64_t v26 = a3[7];
  uint64_t v27 = a1 + v26;
  uint64_t v28 = a2 + v26;
  uint64_t v29 = type metadata accessor for TimeZone();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v29 - 8) + 32))(v27, v28, v29);
  uint64_t v30 = a3[9];
  *(void *)(a1 + a3[8]) = *(void *)(a2 + a3[8]);
  *(unsigned char *)(a1 + v30) = *(unsigned char *)(a2 + v30);
  return a1;
}

char *assignWithTake for UIKitCalendarViewRepresentable(char *a1, void *a2, int *a3)
{
  *(void *)a1 = *a2;
  swift_release();
  *((void *)a1 + 1) = a2[1];
  swift_release();
  *((void *)a1 + 2) = a2[2];
  swift_bridgeObjectRelease();
  uint64_t v5 = type metadata accessor for MultiDatePickerStyleConfiguration(0);
  uint64_t v6 = *(int *)(v5 + 24);
  uint64_t v7 = &a1[v6];
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for Date();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48);
  int v12 = v11(v7, 1, v9);
  int v13 = v11(v8, 1, v9);
  if (v12)
  {
    if (!v13)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v7, v8, v9);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v13)
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v7, v9);
LABEL_6:
    type metadata accessor for DateComponents?(0, (unint64_t *)&lazy cache variable for type metadata for Date?, MEMORY[0x1E4F27928], MEMORY[0x1E4FBB718]);
    memcpy(v7, v8, *(void *)(*(void *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 40))(v7, v8, v9);
LABEL_7:
  uint64_t v15 = *(int *)(v5 + 28);
  uint64_t v16 = &a1[v15];
  uint64_t v17 = (char *)a2 + v15;
  int v18 = v11(&a1[v15], 1, v9);
  int v19 = v11(v17, 1, v9);
  if (!v18)
  {
    if (!v19)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 40))(v16, v17, v9);
      goto LABEL_13;
    }
    (*(void (**)(char *, uint64_t))(v10 + 8))(v16, v9);
    goto LABEL_12;
  }
  if (v19)
  {
LABEL_12:
    type metadata accessor for DateComponents?(0, (unint64_t *)&lazy cache variable for type metadata for Date?, MEMORY[0x1E4F27928], MEMORY[0x1E4FBB718]);
    memcpy(v16, v17, *(void *)(*(void *)(v20 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v16, v17, v9);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v16, 0, 1, v9);
LABEL_13:
  uint64_t v21 = a3[5];
  uint64_t v22 = &a1[v21];
  uint64_t v23 = (char *)a2 + v21;
  uint64_t v24 = type metadata accessor for Locale();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v24 - 8) + 40))(v22, v23, v24);
  uint64_t v25 = a3[6];
  uint64_t v26 = &a1[v25];
  uint64_t v27 = (char *)a2 + v25;
  uint64_t v28 = type metadata accessor for Calendar();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v28 - 8) + 40))(v26, v27, v28);
  uint64_t v29 = a3[7];
  uint64_t v30 = &a1[v29];
  uint64_t v31 = (char *)a2 + v29;
  uint64_t v32 = type metadata accessor for TimeZone();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v32 - 8) + 40))(v30, v31, v32);
  *(void *)&a1[a3[8]] = *(void *)((char *)a2 + a3[8]);
  swift_release();
  a1[a3[9]] = *((unsigned char *)a2 + a3[9]);
  return a1;
}

uint64_t getEnumTagSinglePayload for UIKitCalendarViewRepresentable(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_187C18944);
}

uint64_t sub_187C18944(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for MultiDatePickerStyleConfiguration(0);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    uint64_t v10 = a1;
LABEL_10:
    return v9(v10, a2, v8);
  }
  uint64_t v11 = type metadata accessor for Locale();
  if (*(_DWORD *)(*(void *)(v11 - 8) + 84) == a2)
  {
    uint64_t v8 = v11;
    uint64_t v12 = *(void *)(v11 - 8);
    uint64_t v13 = a3[5];
LABEL_9:
    uint64_t v10 = a1 + v13;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    goto LABEL_10;
  }
  uint64_t v14 = type metadata accessor for Calendar();
  if (*(_DWORD *)(*(void *)(v14 - 8) + 84) == a2)
  {
    uint64_t v8 = v14;
    uint64_t v12 = *(void *)(v14 - 8);
    uint64_t v13 = a3[6];
    goto LABEL_9;
  }
  uint64_t v15 = type metadata accessor for TimeZone();
  if (*(_DWORD *)(*(void *)(v15 - 8) + 84) == a2)
  {
    uint64_t v8 = v15;
    uint64_t v12 = *(void *)(v15 - 8);
    uint64_t v13 = a3[7];
    goto LABEL_9;
  }
  unint64_t v17 = *(void *)(a1 + a3[8]);
  if (v17 >= 0xFFFFFFFF) {
    LODWORD(v17) = -1;
  }
  int v18 = v17 - 1;
  if (v18 < 0) {
    int v18 = -1;
  }
  return (v18 + 1);
}

uint64_t storeEnumTagSinglePayload for UIKitCalendarViewRepresentable(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_187C18B10);
}

uint64_t sub_187C18B10(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8 = type metadata accessor for MultiDatePickerStyleConfiguration(0);
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    uint64_t v12 = a1;
  }
  else
  {
    uint64_t v13 = type metadata accessor for Locale();
    if (*(_DWORD *)(*(void *)(v13 - 8) + 84) == a3)
    {
      uint64_t v10 = v13;
      uint64_t v14 = *(void *)(v13 - 8);
      uint64_t v15 = a4[5];
    }
    else
    {
      uint64_t v16 = type metadata accessor for Calendar();
      if (*(_DWORD *)(*(void *)(v16 - 8) + 84) == a3)
      {
        uint64_t v10 = v16;
        uint64_t v14 = *(void *)(v16 - 8);
        uint64_t v15 = a4[6];
      }
      else
      {
        uint64_t result = type metadata accessor for TimeZone();
        if (*(_DWORD *)(*(void *)(result - 8) + 84) != a3)
        {
          *(void *)(a1 + a4[8]) = a2;
          return result;
        }
        uint64_t v10 = result;
        uint64_t v14 = *(void *)(result - 8);
        uint64_t v15 = a4[7];
      }
    }
    uint64_t v12 = a1 + v15;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }

  return v11(v12, a2, a2, v10);
}

uint64_t type metadata completion function for UIKitCalendarViewRepresentable()
{
  uint64_t result = type metadata accessor for MultiDatePickerStyleConfiguration(319);
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for Locale();
    if (v2 <= 0x3F)
    {
      uint64_t result = type metadata accessor for Calendar();
      if (v3 <= 0x3F)
      {
        uint64_t result = type metadata accessor for TimeZone();
        if (v4 <= 0x3F)
        {
          swift_initStructMetadata();
          return 0;
        }
      }
    }
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<LabeledContent<MultiDatePickerStyleConfiguration.Label, UIKitCalendarViewRepresentable>, LabelsHiddenModifier> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<LabeledContent<MultiDatePickerStyleConfiguration.Label, UIKitCalendarViewRepresentable>, LabelsHiddenModifier> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<LabeledContent<MultiDatePickerStyleConfiguration.Label, UIKitCalendarViewRepresentable>, LabelsHiddenModifier> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<LabeledContent<MultiDatePickerStyleConfiguration.Label, UIKitCalendarViewRepresentable>, LabelsHiddenModifier>();
    lazy protocol witness table accessor for type LabeledContent<MultiDatePickerStyleConfiguration.Label, UIKitCalendarViewRepresentable> and conformance <> LabeledContent<A, B>();
    lazy protocol witness table accessor for type LabelsHiddenModifier and conformance LabelsHiddenModifier();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<LabeledContent<MultiDatePickerStyleConfiguration.Label, UIKitCalendarViewRepresentable>, LabelsHiddenModifier> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<LabeledContent<MultiDatePickerStyleConfiguration.Label, UIKitCalendarViewRepresentable>, LabelsHiddenModifier>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<LabeledContent<MultiDatePickerStyleConfiguration.Label, UIKitCalendarViewRepresentable>, LabelsHiddenModifier>)
  {
    type metadata accessor for LabeledContent<MultiDatePickerStyleConfiguration.Label, UIKitCalendarViewRepresentable>();
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<LabeledContent<MultiDatePickerStyleConfiguration.Label, UIKitCalendarViewRepresentable>, LabelsHiddenModifier>);
    }
  }
}

uint64_t View.layoutScale(_:)(uint64_t a1, uint64_t a2, double a3)
{
  double v4 = a3;
  return MEMORY[0x18C113660](&v4, a1, &type metadata for _LayoutScaleModifier, a2);
}

void _LayoutScaleModifier.scale.setter(double a1)
{
  double *v1 = a1;
}

uint64_t (*_LayoutScaleModifier.scale.modify())(void, void, void, void)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

void _LayoutScaleModifier.animatableData.setter(double a1)
{
  double *v1 = a1;
}

double (*_LayoutScaleModifier.animatableData.modify(void *a1))(uint64_t a1)
{
  a1[1] = v1;
  *a1 = *v1;
  return protocol witness for Animatable.animatableData.modify in conformance ScrollTransitionProgress;
}

double static _LayoutScaleModifier._makeView(modifier:inputs:body:)@<D0>(uint64_t a1@<X1>, void (*a2)(unint64_t *__return_ptr, uint64_t, unint64_t *)@<X2>, double *a3@<X8>)
{
  uint64_t v55 = *MEMORY[0x1E4F143B8];
  unint64_t v3 = *(void *)a1;
  int v4 = *(_DWORD *)(a1 + 8);
  unint64_t v5 = *(void *)(a1 + 16);
  unsigned int v7 = *(_DWORD *)(a1 + 24);
  unsigned int v6 = *(_DWORD *)(a1 + 28);
  unsigned int v8 = *(_DWORD *)(a1 + 32);
  unsigned int v34 = *(_DWORD *)(a1 + 36);
  uint64_t v9 = *(void *)(a1 + 40);
  unint64_t v33 = *(void *)(a1 + 48);
  unsigned int v32 = *(_DWORD *)(a1 + 56);
  unsigned int v29 = *(_DWORD *)(a1 + 60);
  unsigned int v31 = *(_DWORD *)(a1 + 64);
  unsigned int v28 = *(_DWORD *)(a1 + 68);
  unsigned int v10 = *(_DWORD *)(a1 + 76);
  unsigned int v30 = *(_DWORD *)(a1 + 72);
  int v11 = *(_DWORD *)(a1 + 80);
  lazy protocol witness table accessor for type _LayoutScaleModifier and conformance _LayoutScaleModifier();
  unsigned int v27 = static Animatable.makeAnimatable(value:inputs:)();
  unint64_t v46 = v3;
  int v47 = v4;
  unint64_t v48 = v5;
  *(void *)&long long v49 = __PAIR64__(v6, v7);
  *((void *)&v49 + 1) = __PAIR64__(v34, v8);
  uint64_t v50 = v9;
  unint64_t v51 = v33;
  *(void *)&long long v52 = __PAIR64__(v29, v32);
  *((void *)&v52 + 1) = __PAIR64__(v28, v31);
  unint64_t v53 = __PAIR64__(v10, v30);
  int v54 = v11;
  LODWORD(v38) = v4;
  unint64_t v39 = v5;
  *(void *)&long long v40 = __PAIR64__(v6, v7);
  *((void *)&v40 + 1) = __PAIR64__(v34, v8);
  uint64_t v41 = v9;
  unint64_t v42 = v33;
  *(void *)&long long v43 = __PAIR64__(v29, v32);
  *((void *)&v43 + 1) = __PAIR64__(v28, v31);
  unint64_t v44 = __PAIR64__(v10, v30);
  unsigned int v26 = v10;
  int v45 = v11;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  LODWORD(v37) = v27;
  HIDWORD(v37) = _ViewInputs.environment.getter();
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  lazy protocol witness table accessor for type ScaledEnvironment and conformance ScaledEnvironment();
  Attribute.init<A>(body:value:flags:update:)();
  _ViewInputs.environment.setter();
  if ((v34 & 0x20) != 0)
  {
    _ViewInputs.position.getter();
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    lazy protocol witness table accessor for type ScaledOrigin and conformance ScaledOrigin();
    Attribute.init<A>(body:value:flags:update:)();
    _ViewInputs.position.setter();
    _ViewInputs.animatedPosition()();
    Attribute.init<A>(body:value:flags:update:)();
    _ViewInputs.containerPosition.setter();
    _ViewInputs.size.getter();
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    lazy protocol witness table accessor for type ScaledSize and conformance ScaledSize();
    Attribute.init<A>(body:value:flags:update:)();
    _ViewInputs.size.setter();
    unint64_t v39 = v5;
    *(void *)&long long v40 = __PAIR64__(v6, v7);
    *((void *)&v40 + 1) = __PAIR64__(v34, v8);
    uint64_t v41 = v9;
    unint64_t v42 = v33;
    *(void *)&long long v43 = __PAIR64__(v29, v32);
    *((void *)&v43 + 1) = __PAIR64__(v28, v31);
    unint64_t v44 = __PAIR64__(v10, v30);
    int v45 = v11;
    LODWORD(v37) = v27;
    HIDWORD(v37) = _ViewInputs.position.getter();
    LODWORD(v38) = _ViewInputs.transform.getter();
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    lazy protocol witness table accessor for type ScaledTransform and conformance ScaledTransform();
    Attribute.init<A>(body:value:flags:update:)();
    _ViewInputs.transform.setter();
  }
  unint64_t v37 = v46;
  LODWORD(v38) = v47;
  unint64_t v39 = v48;
  long long v40 = v49;
  uint64_t v41 = v50;
  unint64_t v42 = v51;
  long long v43 = v52;
  unint64_t v44 = v53;
  int v45 = v54;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v12 = swift_bridgeObjectRetain();
  a2(&v35, v12, &v37);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  unint64_t v37 = v33;
  LODWORD(v38) = v32;
  char v13 = PreferencesInputs.contains<A>(_:includeHostPreferences:)();
  uint64_t v14 = (unsigned int *)MEMORY[0x1E4F4E7A0];
  if (v13)
  {
    _DisplayList_Identity.init()();
    unsigned int v23 = v37;
    unint64_t v37 = v3;
    LODWORD(v38) = v4;
    unint64_t v39 = v5;
    *(void *)&long long v40 = __PAIR64__(v6, v7);
    *((void *)&v40 + 1) = __PAIR64__(v34, v8);
    uint64_t v41 = v9;
    unint64_t v42 = v33;
    *(void *)&long long v43 = __PAIR64__(v29, v32);
    *((void *)&v43 + 1) = __PAIR64__(v28, v31);
    unint64_t v44 = __PAIR64__(v26, v30);
    int v45 = v11;
    _ViewInputs.pushIdentity(_:)();
    unint64_t v37 = v3;
    LODWORD(v38) = v4;
    unint64_t v39 = v5;
    *(void *)&long long v40 = __PAIR64__(v6, v7);
    *((void *)&v40 + 1) = __PAIR64__(v34, v8);
    uint64_t v41 = v9;
    unint64_t v42 = v33;
    *(void *)&long long v43 = __PAIR64__(v29, v32);
    *((void *)&v43 + 1) = __PAIR64__(v28, v31);
    unint64_t v44 = __PAIR64__(v26, v30);
    int v45 = v11;
    unsigned int v22 = _ViewInputs.animatedPosition()();
    unint64_t v37 = v3;
    LODWORD(v38) = v4;
    unint64_t v39 = v5;
    *(void *)&long long v40 = __PAIR64__(v6, v7);
    *((void *)&v40 + 1) = __PAIR64__(v34, v8);
    uint64_t v41 = v9;
    unint64_t v42 = v33;
    *(void *)&long long v43 = __PAIR64__(v29, v32);
    *((void *)&v43 + 1) = __PAIR64__(v28, v31);
    unint64_t v44 = __PAIR64__(v26, v30);
    int v45 = v11;
    unsigned int v21 = _ViewInputs.animatedCGSize()();
    unint64_t v37 = v3;
    LODWORD(v38) = v4;
    unint64_t v39 = v5;
    *(void *)&long long v40 = __PAIR64__(v6, v7);
    *((void *)&v40 + 1) = __PAIR64__(v34, v8);
    uint64_t v41 = v9;
    uint64_t v14 = (unsigned int *)MEMORY[0x1E4F4E7A0];
    unint64_t v42 = v33;
    *(void *)&long long v43 = __PAIR64__(v29, v32);
    *((void *)&v43 + 1) = __PAIR64__(v28, v31);
    unint64_t v44 = __PAIR64__(v26, v30);
    int v45 = v11;
    unsigned int v15 = _ViewInputs.containerPosition.getter();
    unint64_t v37 = v35;
    unint64_t v38 = *(void *)&v36;
    uint64_t v16 = _ViewOutputs.subscript.getter();
    unsigned int v17 = *v14;
    if ((v16 & 0x100000000) == 0) {
      unsigned int v17 = v16;
    }
    unint64_t v37 = __PAIR64__(v27, v23);
    unint64_t v38 = __PAIR64__(v21, v22);
    unint64_t v39 = __PAIR64__(v17, v15);
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    lazy protocol witness table accessor for type ScaledDisplayList and conformance ScaledDisplayList();
    Attribute.init<A>(body:value:flags:update:)();
    LOBYTE(v37) = 0;
    _ViewOutputs.subscript.setter();
  }
  if ((v34 & 2) != 0)
  {
    unint64_t v37 = v35;
    unint64_t v38 = *(void *)&v36;
    uint64_t v18 = _ViewOutputs.layoutComputer.getter();
    unsigned int v19 = *v14;
    if ((v18 & 0x100000000) == 0) {
      unsigned int v19 = v18;
    }
    unint64_t v37 = __PAIR64__(v19, v27);
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    lazy protocol witness table accessor for type ScaledLayoutComputer and conformance ScaledLayoutComputer();
    Attribute.init<A>(body:value:flags:update:)();
    LOBYTE(v37) = 0;
    _ViewOutputs.layoutComputer.setter();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  *(void *)a3 = v35;
  double result = v36;
  a3[1] = v36;
  return result;
}

unint64_t lazy protocol witness table accessor for type _LayoutScaleModifier and conformance _LayoutScaleModifier()
{
  unint64_t result = lazy protocol witness table cache variable for type _LayoutScaleModifier and conformance _LayoutScaleModifier;
  if (!lazy protocol witness table cache variable for type _LayoutScaleModifier and conformance _LayoutScaleModifier)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _LayoutScaleModifier and conformance _LayoutScaleModifier);
  }
  return result;
}

uint64_t (*protocol witness for Animatable.animatableData.modify in conformance _LayoutScaleModifier(void *a1))()
{
  a1[1] = v1;
  *a1 = *v1;
  return protocol witness for Animatable.animatableData.modify in conformance _LayoutScaleModifier;
}

void protocol witness for ViewModifier.body(content:) in conformance _LayoutScaleModifier()
{
}

uint64_t protocol witness for Rule.value.getter in conformance ScaledEnvironment@<X0>(void *a1@<X8>)
{
  uint64_t Value = (uint64_t *)AGGraphGetValue();
  uint64_t v4 = *Value;
  uint64_t v3 = Value[1];
  *a1 = v4;
  a1[1] = v3;
  swift_retain();
  swift_retain();
  EnvironmentValues.pixelLength.getter();
  AGGraphGetValue();
  return EnvironmentValues.defaultPixelLength.setter();
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance ScaledEnvironment(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ScaledEnvironment and conformance ScaledEnvironment();

  return MEMORY[0x1F40FE388](a1, v2);
}

double protocol witness for Rule.value.getter in conformance ScaledOrigin@<D0>(_OWORD *a1@<X8>)
{
  long long v7 = *(_OWORD *)AGGraphGetValue();
  double v5 = 1.0 / *(double *)AGGraphGetValue();
  unint64_t v2 = (void (*)(unsigned char *, void))ViewOrigin.value.modify();
  float64x2_t *v3 = vmulq_n_f64(*v3, v5);
  v2(v6, 0);
  double result = *(double *)&v7;
  *a1 = v7;
  return result;
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance ScaledOrigin(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ScaledOrigin and conformance ScaledOrigin();

  return MEMORY[0x1F40FE388](a1, v2);
}

double ScaledSize.value.getter@<D0>(_OWORD *a1@<X8>)
{
  uint64_t Value = (long long *)AGGraphGetValue();
  long long v3 = Value[1];
  long long v10 = *Value;
  long long v11 = v3;
  double v8 = 1.0 / *(double *)AGGraphGetValue();
  uint64_t v4 = (void (*)(_OWORD *, void))ViewSize.value.modify();
  *double v5 = vmulq_n_f64(*v5, v8);
  v4(v9, 0);
  v9[0] = v10;
  v9[1] = v11;
  ViewSize.proposal.getter();
  _ProposedSize.scaled(by:)();
  ViewSize.proposal.setter();
  double result = *(double *)&v10;
  long long v7 = v11;
  *a1 = v10;
  a1[1] = v7;
  return result;
}

double protocol witness for Rule.value.getter in conformance ScaledSize@<D0>(_OWORD *a1@<X8>)
{
  return ScaledSize.value.getter(a1);
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance ScaledSize(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ScaledSize and conformance ScaledSize();

  return MEMORY[0x1F40FE388](a1, v2);
}

void protocol witness for Rule.value.getter in conformance ScaledTransform(uint64_t a1@<X8>)
{
  uint64_t Value = AGGraphGetValue();
  *(void *)a1 = *(void *)Value;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(Value + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(Value + 24);
  CGFloat v3 = 1.0 / *(double *)AGGraphGetValue();
  *(_OWORD *)&v5.a = *(_OWORD *)AGGraphGetValue();
  uint64_t v4 = swift_retain();
  MEMORY[0x18C10C240](v4);
  ViewTransform.appendPosition(_:scale:)();
  CGAffineTransformMakeScale(&v5, v3, v3);
  ViewTransform.appendAffineTransform(_:inverse:)(&v5, 0);
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance ScaledTransform(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ScaledTransform and conformance ScaledTransform();

  return MEMORY[0x1F40FE388](a1, v2);
}

uint64_t ScaledLayoutComputer.updateValue()()
{
  AGGraphGetValue();
  if (*(_DWORD *)(v0 + 4) == *MEMORY[0x1E4F4E7A0])
  {
    static LayoutComputer.defaultValue.getter();
  }
  else
  {
    AGGraphGetValue();
    swift_retain();
  }
  lazy protocol witness table accessor for type ScaledLayoutComputer and conformance ScaledLayoutComputer();
  lazy protocol witness table accessor for type ScaledLayoutComputer.Engine and conformance ScaledLayoutComputer.Engine();
  StatefulRule<>.update<A>(to:)();
  return swift_release();
}

uint64_t ScaledLayoutComputer.Engine.sizeThatFits(_:)()
{
  return swift_release();
}

uint64_t protocol witness for LayoutEngine.childGeometries(at:origin:) in conformance ScaledLayoutComputer.Engine()
{
  return MEMORY[0x1F40FD928]();
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance ScaledLayoutComputer(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ScaledLayoutComputer and conformance ScaledLayoutComputer();

  return MEMORY[0x1F40FE388](a1, v2);
}

uint64_t ScaledDisplayList.value.getter()
{
  if (*(_DWORD *)(v0 + 20) == *MEMORY[0x1E4F4E7A0])
  {
    DisplayList.init()();
    CGFloat a = v12.a;
    __int16 b_low = LOWORD(v12.b);
    char v3 = BYTE2(v12.b);
  }
  else
  {
    uint64_t Value = AGGraphGetValue();
    CGFloat a = *(double *)Value;
    __int16 b_low = *(_WORD *)(Value + 8);
    char v3 = *(unsigned char *)(Value + 10);
    swift_bridgeObjectRetain();
  }
  v12.CGFloat a = a;
  LOWORD(v12.b) = b_low;
  BYTE2(v12.b) = v3;
  if (DisplayList.isEmpty.getter())
  {
    swift_bridgeObjectRelease();
    return DisplayList.init()();
  }
  else
  {
    *(_OWORD *)&v12.CGFloat a = *(_OWORD *)AGGraphGetValue();
    MEMORY[0x18C10C240]();
    *(_OWORD *)&v12.CGFloat a = *(_OWORD *)AGGraphGetValue();
    MEMORY[0x18C10C240]();
    unsigned int v6 = (CGFloat *)AGGraphGetValue();
    CGAffineTransformMakeScale(&v12, *v6, *v6);
    long long v10 = *(_OWORD *)&v12.c;
    long long v11 = *(_OWORD *)&v12.a;
    tdouble x = v12.tx;
    tdouble y = v12.ty;
    uint64_t v9 = swift_allocObject();
    *(_OWORD *)(v9 + 16) = v11;
    *(_OWORD *)(v9 + 32) = v10;
    *(CGFloat *)(v9 + 48) = tx;
    *(CGFloat *)(v9 + 56) = ty;
    *(void *)(v9 + 72) = 0;
    *(void *)(v9 + 80) = 0;
    *(void *)(v9 + 64) = 0;
    *(unsigned char *)(v9 + 88) = 0;
    type metadata accessor for CGSize(0);
    AGGraphGetValue();
    DisplayList.Version.init(forUpdate:)();
    DisplayList.Item.init(_:frame:identity:version:)();
    DisplayList.Item.canonicalize(options:)();
    return DisplayList.init(_:)();
  }
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance ScaledDisplayList(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ScaledDisplayList and conformance ScaledDisplayList();

  return MEMORY[0x1F40FE388](a1, v2);
}

unint64_t lazy protocol witness table accessor for type ScaledEnvironment and conformance ScaledEnvironment()
{
  unint64_t result = lazy protocol witness table cache variable for type ScaledEnvironment and conformance ScaledEnvironment;
  if (!lazy protocol witness table cache variable for type ScaledEnvironment and conformance ScaledEnvironment)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ScaledEnvironment and conformance ScaledEnvironment);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ScaledEnvironment and conformance ScaledEnvironment;
  if (!lazy protocol witness table cache variable for type ScaledEnvironment and conformance ScaledEnvironment)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ScaledEnvironment and conformance ScaledEnvironment);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ScaledLayoutComputer and conformance ScaledLayoutComputer()
{
  unint64_t result = lazy protocol witness table cache variable for type ScaledLayoutComputer and conformance ScaledLayoutComputer;
  if (!lazy protocol witness table cache variable for type ScaledLayoutComputer and conformance ScaledLayoutComputer)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ScaledLayoutComputer and conformance ScaledLayoutComputer);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ScaledLayoutComputer and conformance ScaledLayoutComputer;
  if (!lazy protocol witness table cache variable for type ScaledLayoutComputer and conformance ScaledLayoutComputer)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ScaledLayoutComputer and conformance ScaledLayoutComputer);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ScaledLayoutComputer and conformance ScaledLayoutComputer;
  if (!lazy protocol witness table cache variable for type ScaledLayoutComputer and conformance ScaledLayoutComputer)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ScaledLayoutComputer and conformance ScaledLayoutComputer);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ScaledDisplayList and conformance ScaledDisplayList()
{
  unint64_t result = lazy protocol witness table cache variable for type ScaledDisplayList and conformance ScaledDisplayList;
  if (!lazy protocol witness table cache variable for type ScaledDisplayList and conformance ScaledDisplayList)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ScaledDisplayList and conformance ScaledDisplayList);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ScaledDisplayList and conformance ScaledDisplayList;
  if (!lazy protocol witness table cache variable for type ScaledDisplayList and conformance ScaledDisplayList)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ScaledDisplayList and conformance ScaledDisplayList);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ScaledOrigin and conformance ScaledOrigin()
{
  unint64_t result = lazy protocol witness table cache variable for type ScaledOrigin and conformance ScaledOrigin;
  if (!lazy protocol witness table cache variable for type ScaledOrigin and conformance ScaledOrigin)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ScaledOrigin and conformance ScaledOrigin);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ScaledOrigin and conformance ScaledOrigin;
  if (!lazy protocol witness table cache variable for type ScaledOrigin and conformance ScaledOrigin)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ScaledOrigin and conformance ScaledOrigin);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ScaledSize and conformance ScaledSize()
{
  unint64_t result = lazy protocol witness table cache variable for type ScaledSize and conformance ScaledSize;
  if (!lazy protocol witness table cache variable for type ScaledSize and conformance ScaledSize)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ScaledSize and conformance ScaledSize);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ScaledSize and conformance ScaledSize;
  if (!lazy protocol witness table cache variable for type ScaledSize and conformance ScaledSize)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ScaledSize and conformance ScaledSize);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ScaledTransform and conformance ScaledTransform()
{
  unint64_t result = lazy protocol witness table cache variable for type ScaledTransform and conformance ScaledTransform;
  if (!lazy protocol witness table cache variable for type ScaledTransform and conformance ScaledTransform)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ScaledTransform and conformance ScaledTransform);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ScaledTransform and conformance ScaledTransform;
  if (!lazy protocol witness table cache variable for type ScaledTransform and conformance ScaledTransform)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ScaledTransform and conformance ScaledTransform);
  }
  return result;
}

_UNKNOWN **base witness table accessor for ViewModifier in _LayoutScaleModifier()
{
  return &protocol witness table for _LayoutScaleModifier;
}

double sub_187C1A46C@<D0>(double *a1@<X0>, void *a2@<X8>)
{
  double result = *a1;
  *a2 = *(void *)a1;
  return result;
}

double sub_187C1A478(double *a1, void *a2)
{
  double result = *a1;
  *a2 = *(void *)a1;
  return result;
}

ValueMetadata *type metadata accessor for _LayoutScaleModifier()
{
  return &type metadata for _LayoutScaleModifier;
}

uint64_t sub_187C1A494()
{
  return swift_getWitnessTable();
}

void *type metadata accessor for ScaledTransform()
{
  return &unk_1ED41B488;
}

void *type metadata accessor for ScaledSize()
{
  return &unk_1ED40D388;
}

void *type metadata accessor for ScaledOrigin()
{
  return &unk_1ED412628;
}

void *type metadata accessor for ScaledDisplayList()
{
  return &unk_1ED474ED8;
}

void *type metadata accessor for ScaledLayoutComputer()
{
  return &unk_1ED432050;
}

void *type metadata accessor for ScaledEnvironment()
{
  return &unk_1ED424A70;
}

uint64_t sub_187C1A768()
{
  return swift_deallocObject();
}

unint64_t lazy protocol witness table accessor for type ScaledLayoutComputer.Engine and conformance ScaledLayoutComputer.Engine()
{
  unint64_t result = lazy protocol witness table cache variable for type ScaledLayoutComputer.Engine and conformance ScaledLayoutComputer.Engine;
  if (!lazy protocol witness table cache variable for type ScaledLayoutComputer.Engine and conformance ScaledLayoutComputer.Engine)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ScaledLayoutComputer.Engine and conformance ScaledLayoutComputer.Engine);
  }
  return result;
}

void *assignWithCopy for ScaledLayoutComputer.Engine(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  a1[2] = a2[2];
  return a1;
}

void *assignWithTake for ScaledLayoutComputer.Engine(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_release();
  a1[2] = a2[2];
  return a1;
}

void *type metadata accessor for ScaledLayoutComputer.Engine()
{
  return &unk_1ED474F10;
}

uint64_t *initializeBufferWithCopyOfBuffer for CollapsibleWheelDatePickerStyle(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v8 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    _s7SwiftUI11EnvironmentV7ContentOy10Foundation6LocaleV_GMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for Environment<Locale>.Content, MEMORY[0x1E4F27A78], MEMORY[0x1E4F3F4D8]);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v7 = type metadata accessor for Locale();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    }
    else
    {
      *a1 = *a2;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v9 = a3[5];
    long long v10 = (uint64_t *)((char *)a1 + v9);
    long long v11 = (uint64_t *)((char *)a2 + v9);
    _s7SwiftUI11EnvironmentV7ContentOy10Foundation6LocaleV_GMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for Environment<Calendar>.Content, MEMORY[0x1E4F27CA0], MEMORY[0x1E4F3F4D8]);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v12 = type metadata accessor for Calendar();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v12 - 8) + 16))(v10, v11, v12);
    }
    else
    {
      *long long v10 = *v11;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v13 = a3[6];
    uint64_t v14 = (uint64_t *)((char *)a1 + v13);
    unsigned int v15 = (uint64_t *)((char *)a2 + v13);
    _s7SwiftUI11EnvironmentV7ContentOy10Foundation6LocaleV_GMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for Environment<TimeZone>.Content, MEMORY[0x1E4F27D68], MEMORY[0x1E4F3F4D8]);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v16 = type metadata accessor for TimeZone();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v16 - 8) + 16))(v14, v15, v16);
    }
    else
    {
      *uint64_t v14 = *v15;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v17 = a3[7];
    uint64_t v18 = (char *)a1 + v17;
    unsigned int v19 = (char *)a2 + v17;
    *uint64_t v18 = *v19;
    *((void *)v18 + 1) = *((void *)v19 + 1);
  }
  swift_retain();
  return a1;
}

uint64_t destroy for CollapsibleWheelDatePickerStyle(uint64_t a1, uint64_t a2)
{
  _s7SwiftUI11EnvironmentV7ContentOy10Foundation6LocaleV_GMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for Environment<Locale>.Content, MEMORY[0x1E4F27A78], MEMORY[0x1E4F3F4D8]);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v4 = type metadata accessor for Locale();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  }
  else
  {
    swift_release();
  }
  uint64_t v5 = a1 + *(int *)(a2 + 20);
  _s7SwiftUI11EnvironmentV7ContentOy10Foundation6LocaleV_GMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for Environment<Calendar>.Content, MEMORY[0x1E4F27CA0], MEMORY[0x1E4F3F4D8]);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v6 = type metadata accessor for Calendar();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v5, v6);
  }
  else
  {
    swift_release();
  }
  uint64_t v7 = a1 + *(int *)(a2 + 24);
  _s7SwiftUI11EnvironmentV7ContentOy10Foundation6LocaleV_GMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for Environment<TimeZone>.Content, MEMORY[0x1E4F27D68], MEMORY[0x1E4F3F4D8]);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v8 = type metadata accessor for TimeZone();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8))(v7, v8);
  }
  else
  {
    swift_release();
  }

  return swift_release();
}

void *initializeWithCopy for CollapsibleWheelDatePickerStyle(void *a1, void *a2, int *a3)
{
  _s7SwiftUI11EnvironmentV7ContentOy10Foundation6LocaleV_GMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for Environment<Locale>.Content, MEMORY[0x1E4F27A78], MEMORY[0x1E4F3F4D8]);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v6 = type metadata accessor for Locale();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  }
  else
  {
    *a1 = *a2;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  uint64_t v7 = a3[5];
  uint64_t v8 = (void *)((char *)a1 + v7);
  uint64_t v9 = (void *)((char *)a2 + v7);
  _s7SwiftUI11EnvironmentV7ContentOy10Foundation6LocaleV_GMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for Environment<Calendar>.Content, MEMORY[0x1E4F27CA0], MEMORY[0x1E4F3F4D8]);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v10 = type metadata accessor for Calendar();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v10 - 8) + 16))(v8, v9, v10);
  }
  else
  {
    *uint64_t v8 = *v9;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  uint64_t v11 = a3[6];
  uint64_t v12 = (void *)((char *)a1 + v11);
  uint64_t v13 = (void *)((char *)a2 + v11);
  _s7SwiftUI11EnvironmentV7ContentOy10Foundation6LocaleV_GMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for Environment<TimeZone>.Content, MEMORY[0x1E4F27D68], MEMORY[0x1E4F3F4D8]);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v14 = type metadata accessor for TimeZone();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v14 - 8) + 16))(v12, v13, v14);
  }
  else
  {
    *uint64_t v12 = *v13;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  uint64_t v15 = a3[7];
  uint64_t v16 = (char *)a1 + v15;
  uint64_t v17 = (char *)a2 + v15;
  *uint64_t v16 = *v17;
  *((void *)v16 + 1) = *((void *)v17 + 1);
  swift_retain();
  return a1;
}

void *assignWithCopy for CollapsibleWheelDatePickerStyle(void *a1, void *a2, int *a3)
{
  if (a1 != a2)
  {
    uint64_t v6 = (uint64_t (*)(uint64_t))MEMORY[0x1E4F27A78];
    uint64_t v7 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E4F3F4D8];
    outlined destroy of Environment<Locale>.Content((uint64_t)a1, (unint64_t *)&lazy cache variable for type metadata for Environment<Locale>.Content, MEMORY[0x1E4F27A78], MEMORY[0x1E4F3F4D8]);
    _s7SwiftUI11EnvironmentV7ContentOy10Foundation6LocaleV_GMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for Environment<Locale>.Content, v6, v7);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v8 = type metadata accessor for Locale();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v8 - 8) + 16))(a1, a2, v8);
    }
    else
    {
      *a1 = *a2;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v9 = a3[5];
    uint64_t v10 = (void *)((char *)a1 + v9);
    uint64_t v11 = (void *)((char *)a2 + v9);
    uint64_t v12 = (uint64_t (*)(uint64_t))MEMORY[0x1E4F27CA0];
    uint64_t v13 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E4F3F4D8];
    outlined destroy of Environment<Locale>.Content((uint64_t)a1 + v9, (unint64_t *)&lazy cache variable for type metadata for Environment<Calendar>.Content, MEMORY[0x1E4F27CA0], MEMORY[0x1E4F3F4D8]);
    _s7SwiftUI11EnvironmentV7ContentOy10Foundation6LocaleV_GMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for Environment<Calendar>.Content, v12, v13);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v14 = type metadata accessor for Calendar();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v14 - 8) + 16))(v10, v11, v14);
    }
    else
    {
      *uint64_t v10 = *v11;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v15 = a3[6];
    uint64_t v16 = (void *)((char *)a1 + v15);
    uint64_t v17 = (void *)((char *)a2 + v15);
    uint64_t v18 = (uint64_t (*)(uint64_t))MEMORY[0x1E4F27D68];
    unsigned int v19 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E4F3F4D8];
    outlined destroy of Environment<Locale>.Content((uint64_t)a1 + v15, (unint64_t *)&lazy cache variable for type metadata for Environment<TimeZone>.Content, MEMORY[0x1E4F27D68], MEMORY[0x1E4F3F4D8]);
    _s7SwiftUI11EnvironmentV7ContentOy10Foundation6LocaleV_GMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for Environment<TimeZone>.Content, v18, v19);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v20 = type metadata accessor for TimeZone();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v20 - 8) + 16))(v16, v17, v20);
    }
    else
    {
      *uint64_t v16 = *v17;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  uint64_t v21 = a3[7];
  unsigned int v22 = (char *)a1 + v21;
  unsigned int v23 = (char *)a2 + v21;
  *unsigned int v22 = *v23;
  *((void *)v22 + 1) = *((void *)v23 + 1);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t outlined destroy of Environment<Locale>.Content(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  _s7SwiftUI11EnvironmentV7ContentOy10Foundation6LocaleV_GMaTm_0(0, a2, a3, a4);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(a1, v5);
  return a1;
}

char *initializeWithTake for CollapsibleWheelDatePickerStyle(char *a1, char *a2, int *a3)
{
  _s7SwiftUI11EnvironmentV7ContentOy10Foundation6LocaleV_GMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for Environment<Locale>.Content, MEMORY[0x1E4F27A78], MEMORY[0x1E4F3F4D8]);
  uint64_t v7 = v6;
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v8 = type metadata accessor for Locale();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 32))(a1, a2, v8);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64));
  }
  uint64_t v9 = a3[5];
  uint64_t v10 = &a1[v9];
  uint64_t v11 = &a2[v9];
  _s7SwiftUI11EnvironmentV7ContentOy10Foundation6LocaleV_GMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for Environment<Calendar>.Content, MEMORY[0x1E4F27CA0], MEMORY[0x1E4F3F4D8]);
  uint64_t v13 = v12;
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v14 = type metadata accessor for Calendar();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 32))(v10, v11, v14);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v10, v11, *(void *)(*(void *)(v13 - 8) + 64));
  }
  uint64_t v15 = a3[6];
  uint64_t v16 = &a1[v15];
  uint64_t v17 = &a2[v15];
  _s7SwiftUI11EnvironmentV7ContentOy10Foundation6LocaleV_GMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for Environment<TimeZone>.Content, MEMORY[0x1E4F27D68], MEMORY[0x1E4F3F4D8]);
  uint64_t v19 = v18;
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v20 = type metadata accessor for TimeZone();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v20 - 8) + 32))(v16, v17, v20);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v16, v17, *(void *)(*(void *)(v19 - 8) + 64));
  }
  *(_OWORD *)&a1[a3[7]] = *(_OWORD *)&a2[a3[7]];
  return a1;
}

char *assignWithTake for CollapsibleWheelDatePickerStyle(char *a1, char *a2, int *a3)
{
  if (a1 != a2)
  {
    uint64_t v6 = (uint64_t (*)(uint64_t))MEMORY[0x1E4F27A78];
    uint64_t v7 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E4F3F4D8];
    outlined destroy of Environment<Locale>.Content((uint64_t)a1, (unint64_t *)&lazy cache variable for type metadata for Environment<Locale>.Content, MEMORY[0x1E4F27A78], MEMORY[0x1E4F3F4D8]);
    _s7SwiftUI11EnvironmentV7ContentOy10Foundation6LocaleV_GMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for Environment<Locale>.Content, v6, v7);
    uint64_t v9 = v8;
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v10 = type metadata accessor for Locale();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 32))(a1, a2, v10);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(v9 - 8) + 64));
    }
    uint64_t v11 = a3[5];
    uint64_t v12 = &a1[v11];
    uint64_t v13 = &a2[v11];
    uint64_t v14 = (uint64_t (*)(uint64_t))MEMORY[0x1E4F27CA0];
    uint64_t v15 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E4F3F4D8];
    outlined destroy of Environment<Locale>.Content((uint64_t)&a1[v11], (unint64_t *)&lazy cache variable for type metadata for Environment<Calendar>.Content, MEMORY[0x1E4F27CA0], MEMORY[0x1E4F3F4D8]);
    _s7SwiftUI11EnvironmentV7ContentOy10Foundation6LocaleV_GMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for Environment<Calendar>.Content, v14, v15);
    uint64_t v17 = v16;
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v18 = type metadata accessor for Calendar();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v18 - 8) + 32))(v12, v13, v18);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v12, v13, *(void *)(*(void *)(v17 - 8) + 64));
    }
    uint64_t v19 = a3[6];
    uint64_t v20 = &a1[v19];
    uint64_t v21 = &a2[v19];
    unsigned int v22 = (uint64_t (*)(uint64_t))MEMORY[0x1E4F27D68];
    unsigned int v23 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E4F3F4D8];
    outlined destroy of Environment<Locale>.Content((uint64_t)&a1[v19], (unint64_t *)&lazy cache variable for type metadata for Environment<TimeZone>.Content, MEMORY[0x1E4F27D68], MEMORY[0x1E4F3F4D8]);
    _s7SwiftUI11EnvironmentV7ContentOy10Foundation6LocaleV_GMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for Environment<TimeZone>.Content, v22, v23);
    uint64_t v25 = v24;
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v26 = type metadata accessor for TimeZone();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v26 - 8) + 32))(v20, v21, v26);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v20, v21, *(void *)(*(void *)(v25 - 8) + 64));
    }
  }
  uint64_t v27 = a3[7];
  unsigned int v28 = &a1[v27];
  unsigned int v29 = &a2[v27];
  *unsigned int v28 = *v29;
  *((void *)v28 + 1) = *((void *)v29 + 1);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for CollapsibleWheelDatePickerStyle(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_187C1B9B0);
}

uint64_t sub_187C1B9B0(uint64_t a1, uint64_t a2, int *a3)
{
  _s7SwiftUI11EnvironmentV7ContentOy10Foundation6LocaleV_GMaTm_0(0, &lazy cache variable for type metadata for Environment<Locale>, MEMORY[0x1E4F27A78], MEMORY[0x1E4F3F4E0]);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    uint64_t v10 = a1;
LABEL_8:
    return v9(v10, a2, v8);
  }
  _s7SwiftUI11EnvironmentV7ContentOy10Foundation6LocaleV_GMaTm_0(0, &lazy cache variable for type metadata for Environment<Calendar>, MEMORY[0x1E4F27CA0], MEMORY[0x1E4F3F4E0]);
  if (*(_DWORD *)(*(void *)(v11 - 8) + 84) == a2)
  {
    uint64_t v8 = v11;
    uint64_t v12 = *(void *)(v11 - 8);
    uint64_t v13 = a3[5];
LABEL_7:
    uint64_t v10 = a1 + v13;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    goto LABEL_8;
  }
  _s7SwiftUI11EnvironmentV7ContentOy10Foundation6LocaleV_GMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for Environment<TimeZone>, MEMORY[0x1E4F27D68], MEMORY[0x1E4F3F4E0]);
  if (*(_DWORD *)(*(void *)(v14 - 8) + 84) == a2)
  {
    uint64_t v8 = v14;
    uint64_t v12 = *(void *)(v14 - 8);
    uint64_t v13 = a3[6];
    goto LABEL_7;
  }
  unint64_t v16 = *(void *)(a1 + a3[7] + 8);
  if (v16 >= 0xFFFFFFFF) {
    LODWORD(v16) = -1;
  }
  int v17 = v16 - 1;
  if (v17 < 0) {
    int v17 = -1;
  }
  return (v17 + 1);
}

uint64_t storeEnumTagSinglePayload for CollapsibleWheelDatePickerStyle(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_187C1BBC4);
}

void sub_187C1BBC4(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  _s7SwiftUI11EnvironmentV7ContentOy10Foundation6LocaleV_GMaTm_0(0, &lazy cache variable for type metadata for Environment<Locale>, MEMORY[0x1E4F27A78], MEMORY[0x1E4F3F4E0]);
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    uint64_t v12 = a1;
  }
  else
  {
    _s7SwiftUI11EnvironmentV7ContentOy10Foundation6LocaleV_GMaTm_0(0, &lazy cache variable for type metadata for Environment<Calendar>, MEMORY[0x1E4F27CA0], MEMORY[0x1E4F3F4E0]);
    if (*(_DWORD *)(*(void *)(v13 - 8) + 84) == a3)
    {
      uint64_t v10 = v13;
      uint64_t v14 = *(void *)(v13 - 8);
      uint64_t v15 = a4[5];
    }
    else
    {
      _s7SwiftUI11EnvironmentV7ContentOy10Foundation6LocaleV_GMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for Environment<TimeZone>, MEMORY[0x1E4F27D68], MEMORY[0x1E4F3F4E0]);
      if (*(_DWORD *)(*(void *)(v16 - 8) + 84) != a3)
      {
        *(void *)(a1 + a4[7] + 8) = a2;
        return;
      }
      uint64_t v10 = v16;
      uint64_t v14 = *(void *)(v16 - 8);
      uint64_t v15 = a4[6];
    }
    uint64_t v12 = a1 + v15;
    uint64_t v11 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }

  v11(v12, a2, a2, v10);
}

uint64_t type metadata accessor for CollapsibleWheelDatePickerStyle()
{
  uint64_t result = type metadata singleton initialization cache for CollapsibleWheelDatePickerStyle;
  if (!type metadata singleton initialization cache for CollapsibleWheelDatePickerStyle) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void type metadata completion function for CollapsibleWheelDatePickerStyle()
{
  _s7SwiftUI11EnvironmentV7ContentOy10Foundation6LocaleV_GMaTm_0(319, (unint64_t *)&lazy cache variable for type metadata for Environment<Locale>.Content, MEMORY[0x1E4F27A78], MEMORY[0x1E4F3F4D8]);
  if (v0 <= 0x3F)
  {
    _s7SwiftUI11EnvironmentV7ContentOy10Foundation6LocaleV_GMaTm_0(319, (unint64_t *)&lazy cache variable for type metadata for Environment<Calendar>.Content, MEMORY[0x1E4F27CA0], MEMORY[0x1E4F3F4D8]);
    if (v1 <= 0x3F)
    {
      _s7SwiftUI11EnvironmentV7ContentOy10Foundation6LocaleV_GMaTm_0(319, (unint64_t *)&lazy cache variable for type metadata for Environment<TimeZone>.Content, MEMORY[0x1E4F27D68], MEMORY[0x1E4F3F4D8]);
      if (v2 <= 0x3F) {
        swift_initStructMetadata();
      }
    }
  }
}

uint64_t associated type witness table accessor for DatePickerStyle.Body : View in CollapsibleWheelDatePickerStyle()
{
  return swift_getOpaqueTypeConformance2();
}

id one-time initialization function for dateFormatter()
{
  id v0 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F28C10]), sel_init);
  objc_msgSend(v0, sel_setDateStyle_, 2);
  id result = objc_msgSend(v0, sel_setTimeStyle_, 1);
  static CollapsibleWheelDatePickerStyle.dateFormatter = (uint64_t)v0;
  return result;
}

uint64_t CollapsibleWheelDatePickerStyle.makeBody(configuration:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v70 = a1;
  uint64_t v75 = a2;
  uint64_t v69 = type metadata accessor for DatePickerStyleConfiguration(0);
  MEMORY[0x1F4188790](v69);
  uint64_t v68 = (uint64_t)&v60 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for DatePicker<DatePickerStyleConfiguration.Label>();
  uint64_t v62 = v5;
  MEMORY[0x1F4188790](v5);
  uint64_t v63 = (uint64_t)&v60 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v7);
  uint64_t v67 = (uint64_t)&v60 - v8;
  type metadata accessor for ModifiedContent<DatePicker<DatePickerStyleConfiguration.Label>, DatePickerStyleModifier<WheelDatePickerStyle>>();
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v66 = (uint64_t)&v60 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for ModifiedContent<ModifiedContent<DatePicker<DatePickerStyleConfiguration.Label>, DatePickerStyleModifier<WheelDatePickerStyle>>, _LabeledContentStyleModifier<HiddenLabeledContentStyle>>();
  MEMORY[0x1F4188790](v11 - 8);
  uint64_t v65 = (uint64_t)&v60 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<DatePicker<DatePickerStyleConfiguration.Label>, DatePickerStyleModifier<WheelDatePickerStyle>>, _LabeledContentStyleModifier<HiddenLabeledContentStyle>>, _AlignmentLayout>();
  uint64_t v61 = v13;
  MEMORY[0x1F4188790](v13);
  uint64_t v64 = (uint64_t)&v60 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<DatePicker<DatePickerStyleConfiguration.Label>, DatePickerStyleModifier<WheelDatePickerStyle>>, _LabeledContentStyleModifier<HiddenLabeledContentStyle>>, _AlignmentLayout>, ViewInputFlagModifier<AccessibilityCombinedLabeledContent>>();
  uint64_t v72 = *(void *)(v15 - 8);
  uint64_t v73 = v15;
  MEMORY[0x1F4188790](v15);
  uint64_t v60 = (uint64_t)&v60 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  _s7SwiftUI11EnvironmentV7ContentOy10Foundation6LocaleV_GMaTm_0(0, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<DatePicker<DatePickerStyleConfiguration.Label>, DatePickerStyleModifier<WheelDatePickerStyle>>, _LabeledContentStyleModifier<HiddenLabeledContentStyle>>, _AlignmentLayout>, ViewInputFlagModifier<AccessibilityCombinedLabeledContent>>?, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<DatePicker<DatePickerStyleConfiguration.Label>, DatePickerStyleModifier<WheelDatePickerStyle>>, _LabeledContentStyleModifier<HiddenLabeledContentStyle>>, _AlignmentLayout>, ViewInputFlagModifier<AccessibilityCombinedLabeledContent>>, MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v17 - 8);
  uint64_t v74 = (uint64_t)&v60 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v19);
  uint64_t v21 = (char *)&v60 - v20;
  uint64_t v22 = type metadata accessor for CollapsibleWheelDatePickerStyle();
  uint64_t v23 = v22 - 8;
  uint64_t v24 = *(void *)(v22 - 8);
  uint64_t v25 = *(void *)(v24 + 64);
  MEMORY[0x1F4188790](v22);
  type metadata accessor for Button<ModifiedContent<LabeledContent<ModifiedContent<DatePickerStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Color?>>, ModifiedContent<Text, _EnvironmentKeyWritingModifier<Color?>>>, ViewInputFlagModifier<AccessibilityCombinedLabeledContent>>>();
  uint64_t v27 = v26 - 8;
  MEMORY[0x1F4188790](v26);
  uint64_t v71 = (uint64_t)&v60 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v29);
  unsigned int v31 = (_WORD *)((char *)&v60 - v30);
  MEMORY[0x1F4188790](v32);
  unsigned int v34 = (char *)&v60 - v33;
  outlined init with copy of CollapsibleWheelDatePickerStyle(v2, (uint64_t)&v60 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t (*)(void))type metadata accessor for CollapsibleWheelDatePickerStyle);
  unint64_t v35 = (*(unsigned __int8 *)(v24 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v24 + 80);
  uint64_t v36 = swift_allocObject();
  outlined init with take of CollapsibleWheelDatePickerStyle((uint64_t)&v60 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0), v36 + v35, (uint64_t (*)(void))type metadata accessor for CollapsibleWheelDatePickerStyle);
  *unsigned int v31 = 256;
  unint64_t v37 = (uint64_t (**)())((char *)v31 + *(int *)(v27 + 44));
  *unint64_t v37 = partial apply for closure #1 in CollapsibleWheelDatePickerStyle.makeBody(configuration:);
  v37[1] = (uint64_t (*)())v36;
  type metadata accessor for ButtonAction();
  uint64_t v38 = v70;
  swift_storeEnumTagMultiPayload();
  closure #2 in CollapsibleWheelDatePickerStyle.makeBody(configuration:)(v3, v38, (uint64_t)v31 + *(int *)(v27 + 48));
  outlined init with take of CollapsibleWheelDatePickerStyle((uint64_t)v31, (uint64_t)v34, (uint64_t (*)(void))type metadata accessor for Button<ModifiedContent<LabeledContent<ModifiedContent<DatePickerStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Color?>>, ModifiedContent<Text, _EnvironmentKeyWritingModifier<Color?>>>, ViewInputFlagModifier<AccessibilityCombinedLabeledContent>>>);
  uint64_t v39 = v3 + *(int *)(v23 + 36);
  char v40 = *(unsigned char *)v39;
  uint64_t v41 = *(void *)(v39 + 8);
  char v76 = v40;
  uint64_t v77 = v41;
  _s7SwiftUI5ColorVSgMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for State<Bool>, MEMORY[0x1E4FBB390], MEMORY[0x1E4F41580]);
  State.wrappedValue.getter();
  if (v78 == 1)
  {
    uint64_t v42 = v68;
    outlined init with copy of CollapsibleWheelDatePickerStyle(v38, v68, type metadata accessor for DatePickerStyleConfiguration);
    long long v43 = (uint64_t (*)(uint64_t))MEMORY[0x1E4F27928];
    uint64_t v44 = v63;
    outlined init with copy of Date?(v42, v63, &lazy cache variable for type metadata for Binding<Date>, MEMORY[0x1E4F27928], MEMORY[0x1E4F41638]);
    uint64_t v45 = v69;
    uint64_t v46 = v62;
    int v47 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E4FBB718];
    outlined init with copy of Date?(v42 + *(int *)(v69 + 24), v44 + *(int *)(v62 + 36), (unint64_t *)&lazy cache variable for type metadata for Date?, v43, MEMORY[0x1E4FBB718]);
    outlined init with copy of Date?(v42 + *(int *)(v45 + 28), v44 + *(int *)(v46 + 40), (unint64_t *)&lazy cache variable for type metadata for Date?, v43, v47);
    *(void *)(v44 + *(int *)(v46 + 44)) = *(void *)(v42 + *(int *)(v45 + 32));
    outlined destroy of ModifiedContent<ModifiedContent<ModifiedContent<DatePicker<DatePickerStyleConfiguration.Label>, DatePickerStyleModifier<WheelDatePickerStyle>>, _LabeledContentStyleModifier<HiddenLabeledContentStyle>>, _AlignmentLayout>(v42, type metadata accessor for DatePickerStyleConfiguration);
    uint64_t v48 = v67;
    outlined init with take of CollapsibleWheelDatePickerStyle(v44, v67, (uint64_t (*)(void))type metadata accessor for DatePicker<DatePickerStyleConfiguration.Label>);
    uint64_t v49 = v66;
    outlined init with copy of CollapsibleWheelDatePickerStyle(v48, v66, (uint64_t (*)(void))type metadata accessor for DatePicker<DatePickerStyleConfiguration.Label>);
    outlined destroy of ModifiedContent<ModifiedContent<ModifiedContent<DatePicker<DatePickerStyleConfiguration.Label>, DatePickerStyleModifier<WheelDatePickerStyle>>, _LabeledContentStyleModifier<HiddenLabeledContentStyle>>, _AlignmentLayout>(v48, (uint64_t (*)(void))type metadata accessor for DatePicker<DatePickerStyleConfiguration.Label>);
    uint64_t v50 = v65;
    outlined init with copy of CollapsibleWheelDatePickerStyle(v49, v65, (uint64_t (*)(void))type metadata accessor for ModifiedContent<DatePicker<DatePickerStyleConfiguration.Label>, DatePickerStyleModifier<WheelDatePickerStyle>>);
    outlined destroy of ModifiedContent<ModifiedContent<ModifiedContent<DatePicker<DatePickerStyleConfiguration.Label>, DatePickerStyleModifier<WheelDatePickerStyle>>, _LabeledContentStyleModifier<HiddenLabeledContentStyle>>, _AlignmentLayout>(v49, (uint64_t (*)(void))type metadata accessor for ModifiedContent<DatePicker<DatePickerStyleConfiguration.Label>, DatePickerStyleModifier<WheelDatePickerStyle>>);
    uint64_t v51 = v64;
    outlined init with copy of CollapsibleWheelDatePickerStyle(v50, v64, (uint64_t (*)(void))type metadata accessor for ModifiedContent<ModifiedContent<DatePicker<DatePickerStyleConfiguration.Label>, DatePickerStyleModifier<WheelDatePickerStyle>>, _LabeledContentStyleModifier<HiddenLabeledContentStyle>>);
    *(_WORD *)(v51 + *(int *)(v61 + 36)) = 769;
    outlined destroy of ModifiedContent<ModifiedContent<ModifiedContent<DatePicker<DatePickerStyleConfiguration.Label>, DatePickerStyleModifier<WheelDatePickerStyle>>, _LabeledContentStyleModifier<HiddenLabeledContentStyle>>, _AlignmentLayout>(v50, (uint64_t (*)(void))type metadata accessor for ModifiedContent<ModifiedContent<DatePicker<DatePickerStyleConfiguration.Label>, DatePickerStyleModifier<WheelDatePickerStyle>>, _LabeledContentStyleModifier<HiddenLabeledContentStyle>>);
    uint64_t v52 = v60;
    outlined init with copy of CollapsibleWheelDatePickerStyle(v51, v60, (uint64_t (*)(void))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<DatePicker<DatePickerStyleConfiguration.Label>, DatePickerStyleModifier<WheelDatePickerStyle>>, _LabeledContentStyleModifier<HiddenLabeledContentStyle>>, _AlignmentLayout>);
    outlined destroy of ModifiedContent<ModifiedContent<ModifiedContent<DatePicker<DatePickerStyleConfiguration.Label>, DatePickerStyleModifier<WheelDatePickerStyle>>, _LabeledContentStyleModifier<HiddenLabeledContentStyle>>, _AlignmentLayout>(v51, (uint64_t (*)(void))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<DatePicker<DatePickerStyleConfiguration.Label>, DatePickerStyleModifier<WheelDatePickerStyle>>, _LabeledContentStyleModifier<HiddenLabeledContentStyle>>, _AlignmentLayout>);
    outlined init with take of CollapsibleWheelDatePickerStyle(v52, (uint64_t)v21, (uint64_t (*)(void))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<DatePicker<DatePickerStyleConfiguration.Label>, DatePickerStyleModifier<WheelDatePickerStyle>>, _LabeledContentStyleModifier<HiddenLabeledContentStyle>>, _AlignmentLayout>, ViewInputFlagModifier<AccessibilityCombinedLabeledContent>>);
    uint64_t v53 = 0;
  }
  else
  {
    uint64_t v53 = 1;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v72 + 56))(v21, v53, 1, v73);
  uint64_t v54 = v71;
  outlined init with copy of CollapsibleWheelDatePickerStyle((uint64_t)v34, v71, (uint64_t (*)(void))type metadata accessor for Button<ModifiedContent<LabeledContent<ModifiedContent<DatePickerStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Color?>>, ModifiedContent<Text, _EnvironmentKeyWritingModifier<Color?>>>, ViewInputFlagModifier<AccessibilityCombinedLabeledContent>>>);
  uint64_t v55 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E4FBB718];
  uint64_t v56 = v74;
  outlined init with copy of Date?((uint64_t)v21, v74, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<DatePicker<DatePickerStyleConfiguration.Label>, DatePickerStyleModifier<WheelDatePickerStyle>>, _LabeledContentStyleModifier<HiddenLabeledContentStyle>>, _AlignmentLayout>, ViewInputFlagModifier<AccessibilityCombinedLabeledContent>>?, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<DatePicker<DatePickerStyleConfiguration.Label>, DatePickerStyleModifier<WheelDatePickerStyle>>, _LabeledContentStyleModifier<HiddenLabeledContentStyle>>, _AlignmentLayout>, ViewInputFlagModifier<AccessibilityCombinedLabeledContent>>, MEMORY[0x1E4FBB718]);
  uint64_t v57 = v75;
  outlined init with copy of CollapsibleWheelDatePickerStyle(v54, v75, (uint64_t (*)(void))type metadata accessor for Button<ModifiedContent<LabeledContent<ModifiedContent<DatePickerStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Color?>>, ModifiedContent<Text, _EnvironmentKeyWritingModifier<Color?>>>, ViewInputFlagModifier<AccessibilityCombinedLabeledContent>>>);
  type metadata accessor for (Button<ModifiedContent<LabeledContent<ModifiedContent<DatePickerStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Color?>>, ModifiedContent<Text, _EnvironmentKeyWritingModifier<Color?>>>, ViewInputFlagModifier<AccessibilityCombinedLabeledContent>>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<DatePicker<DatePickerStyleConfiguration.Label>, DatePickerStyleModifier<WheelDatePickerStyle>>, _LabeledContentStyleModifier<HiddenLabeledContentStyle>>, _AlignmentLayout>, ViewInputFlagModifier<AccessibilityCombinedLabeledContent>>?)();
  outlined init with copy of Date?(v56, v57 + *(int *)(v58 + 48), &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<DatePicker<DatePickerStyleConfiguration.Label>, DatePickerStyleModifier<WheelDatePickerStyle>>, _LabeledContentStyleModifier<HiddenLabeledContentStyle>>, _AlignmentLayout>, ViewInputFlagModifier<AccessibilityCombinedLabeledContent>>?, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<DatePicker<DatePickerStyleConfiguration.Label>, DatePickerStyleModifier<WheelDatePickerStyle>>, _LabeledContentStyleModifier<HiddenLabeledContentStyle>>, _AlignmentLayout>, ViewInputFlagModifier<AccessibilityCombinedLabeledContent>>, v55);
  outlined destroy of Environment<Locale>.Content((uint64_t)v21, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<DatePicker<DatePickerStyleConfiguration.Label>, DatePickerStyleModifier<WheelDatePickerStyle>>, _LabeledContentStyleModifier<HiddenLabeledContentStyle>>, _AlignmentLayout>, ViewInputFlagModifier<AccessibilityCombinedLabeledContent>>?, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<DatePicker<DatePickerStyleConfiguration.Label>, DatePickerStyleModifier<WheelDatePickerStyle>>, _LabeledContentStyleModifier<HiddenLabeledContentStyle>>, _AlignmentLayout>, ViewInputFlagModifier<AccessibilityCombinedLabeledContent>>, v55);
  outlined destroy of ModifiedContent<ModifiedContent<ModifiedContent<DatePicker<DatePickerStyleConfiguration.Label>, DatePickerStyleModifier<WheelDatePickerStyle>>, _LabeledContentStyleModifier<HiddenLabeledContentStyle>>, _AlignmentLayout>((uint64_t)v34, (uint64_t (*)(void))type metadata accessor for Button<ModifiedContent<LabeledContent<ModifiedContent<DatePickerStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Color?>>, ModifiedContent<Text, _EnvironmentKeyWritingModifier<Color?>>>, ViewInputFlagModifier<AccessibilityCombinedLabeledContent>>>);
  outlined destroy of Environment<Locale>.Content(v56, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<DatePicker<DatePickerStyleConfiguration.Label>, DatePickerStyleModifier<WheelDatePickerStyle>>, _LabeledContentStyleModifier<HiddenLabeledContentStyle>>, _AlignmentLayout>, ViewInputFlagModifier<AccessibilityCombinedLabeledContent>>?, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<DatePicker<DatePickerStyleConfiguration.Label>, DatePickerStyleModifier<WheelDatePickerStyle>>, _LabeledContentStyleModifier<HiddenLabeledContentStyle>>, _AlignmentLayout>, ViewInputFlagModifier<AccessibilityCombinedLabeledContent>>, v55);
  return outlined destroy of ModifiedContent<ModifiedContent<ModifiedContent<DatePicker<DatePickerStyleConfiguration.Label>, DatePickerStyleModifier<WheelDatePickerStyle>>, _LabeledContentStyleModifier<HiddenLabeledContentStyle>>, _AlignmentLayout>(v54, (uint64_t (*)(void))type metadata accessor for Button<ModifiedContent<LabeledContent<ModifiedContent<DatePickerStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Color?>>, ModifiedContent<Text, _EnvironmentKeyWritingModifier<Color?>>>, ViewInputFlagModifier<AccessibilityCombinedLabeledContent>>>);
}

uint64_t closure #1 in CollapsibleWheelDatePickerStyle.makeBody(configuration:)()
{
  return swift_release();
}

uint64_t closure #1 in closure #1 in CollapsibleWheelDatePickerStyle.makeBody(configuration:)(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + *(int *)(type metadata accessor for CollapsibleWheelDatePickerStyle() + 28) + 8);
  _s7SwiftUI5ColorVSgMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for State<Bool>, MEMORY[0x1E4FBB390], MEMORY[0x1E4F41580]);
  swift_retain();
  uint64_t result = State.wrappedValue.getter();
  if (v2)
  {
    dispatch thunk of AnyLocation.set(_:transaction:)();
    return swift_release();
  }
  return result;
}

__n128 closure #2 in CollapsibleWheelDatePickerStyle.makeBody(configuration:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  CollapsibleWheelDatePickerStyle.formattedDate(_:)(a2);
  uint64_t v5 = a1 + *(int *)(type metadata accessor for CollapsibleWheelDatePickerStyle() + 28);
  LOBYTE(v8) = *(unsigned char *)v5;
  uint64_t v9 = *(void *)(v5 + 8);
  _s7SwiftUI5ColorVSgMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for State<Bool>, MEMORY[0x1E4FBB390], MEMORY[0x1E4F41580]);
  State.wrappedValue.getter();
  if (v7 == 1) {
    static Color.accentColor.getter();
  }
  else {
    static Color.secondary.getter();
  }
  View.defaultForegroundColor(_:)();
  swift_bridgeObjectRelease();
  swift_release();
  View.defaultForegroundColor(_:)();
  *(void *)a3 = v8;
  *(void *)(a3 + 8) = v9;
  *(void *)(a3 + 16) = v8;
  *(void *)(a3 + 24) = v9;
  *(unsigned char *)(a3 + 32) = v10;
  __n128 result = v11;
  *(__n128 *)(a3 + 40) = v11;
  *(void *)(a3 + 56) = v12;
  *(unsigned char *)(a3 + 64) = 2;
  return result;
}

uint64_t CollapsibleWheelDatePickerStyle.formattedDate(_:)(uint64_t a1)
{
  uint64_t v27 = a1;
  uint64_t v1 = type metadata accessor for Date();
  uint64_t v28 = *(void *)(v1 - 8);
  uint64_t v29 = v1;
  MEMORY[0x1F4188790](v1);
  uint64_t v26 = (char *)&v23 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = type metadata accessor for TimeZone();
  uint64_t v24 = *(void *)(v3 - 8);
  uint64_t v25 = v3;
  MEMORY[0x1F4188790](v3);
  uint64_t v5 = (char *)&v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for Calendar();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v9 = (char *)&v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for Locale();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v10);
  uint64_t v13 = (char *)&v23 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for dateFormatter != -1) {
    swift_once();
  }
  uint64_t v14 = (void *)static CollapsibleWheelDatePickerStyle.dateFormatter;
  specialized Environment.wrappedValue.getter((uint64_t)v13);
  Class isa = Locale._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  objc_msgSend(v14, sel_setLocale_, isa);

  type metadata accessor for CollapsibleWheelDatePickerStyle();
  specialized Environment.wrappedValue.getter((uint64_t)v9);
  Class v16 = Calendar._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  objc_msgSend(v14, sel_setCalendar_, v16);

  specialized Environment.wrappedValue.getter((uint64_t)v5);
  Class v17 = TimeZone._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t))(v24 + 8))(v5, v25);
  objc_msgSend(v14, sel_setTimeZone_, v17);

  uint64_t v30 = *(void *)(v27 + *(int *)(type metadata accessor for DatePickerStyleConfiguration(0) + 32));
  NSDateFormatter.configure(with:)(&v30);
  _s7SwiftUI11EnvironmentV7ContentOy10Foundation6LocaleV_GMaTm_0(0, &lazy cache variable for type metadata for Binding<Date>, MEMORY[0x1E4F27928], MEMORY[0x1E4F41638]);
  uint64_t v18 = v26;
  MEMORY[0x18C113DA0]();
  Class v19 = Date._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t))(v28 + 8))(v18, v29);
  id v20 = objc_msgSend(v14, sel_stringFromDate_, v19);

  uint64_t v21 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  return v21;
}

id NSDateFormatter.configure(with:)(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (one-time initialization token for hourAndMinute != -1) {
    swift_once();
  }
  objc_msgSend(v1, sel_setTimeStyle_, (static DatePickerComponents.hourAndMinute & ~v2) == 0);
  if (one-time initialization token for date != -1) {
    swift_once();
  }
  BOOL v3 = (static DatePickerComponents.date & ~v2) == 0;

  return objc_msgSend(v1, sel_setDateStyle_, v3);
}

void type metadata accessor for DatePicker<DatePickerStyleConfiguration.Label>()
{
  if (!lazy cache variable for type metadata for DatePicker<DatePickerStyleConfiguration.Label>)
  {
    unint64_t v0 = type metadata accessor for DatePicker();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for DatePicker<DatePickerStyleConfiguration.Label>);
    }
  }
}

void type metadata accessor for ModifiedContent<DatePicker<DatePickerStyleConfiguration.Label>, DatePickerStyleModifier<WheelDatePickerStyle>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<DatePicker<DatePickerStyleConfiguration.Label>, DatePickerStyleModifier<WheelDatePickerStyle>>)
  {
    type metadata accessor for DatePicker<DatePickerStyleConfiguration.Label>();
    type metadata accessor for DatePickerStyleModifier<WheelDatePickerStyle>(255, &lazy cache variable for type metadata for DatePickerStyleModifier<WheelDatePickerStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type WheelDatePickerStyle and conformance WheelDatePickerStyle, (uint64_t)&type metadata for WheelDatePickerStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for DatePickerStyleModifier);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<DatePicker<DatePickerStyleConfiguration.Label>, DatePickerStyleModifier<WheelDatePickerStyle>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type WheelDatePickerStyle and conformance WheelDatePickerStyle()
{
  unint64_t result = lazy protocol witness table cache variable for type WheelDatePickerStyle and conformance WheelDatePickerStyle;
  if (!lazy protocol witness table cache variable for type WheelDatePickerStyle and conformance WheelDatePickerStyle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WheelDatePickerStyle and conformance WheelDatePickerStyle);
  }
  return result;
}

void type metadata accessor for ModifiedContent<ModifiedContent<DatePicker<DatePickerStyleConfiguration.Label>, DatePickerStyleModifier<WheelDatePickerStyle>>, _LabeledContentStyleModifier<HiddenLabeledContentStyle>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<DatePicker<DatePickerStyleConfiguration.Label>, DatePickerStyleModifier<WheelDatePickerStyle>>, _LabeledContentStyleModifier<HiddenLabeledContentStyle>>)
  {
    type metadata accessor for ModifiedContent<DatePicker<DatePickerStyleConfiguration.Label>, DatePickerStyleModifier<WheelDatePickerStyle>>();
    type metadata accessor for DatePickerStyleModifier<WheelDatePickerStyle>(255, &lazy cache variable for type metadata for _LabeledContentStyleModifier<HiddenLabeledContentStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type HiddenLabeledContentStyle and conformance HiddenLabeledContentStyle, (uint64_t)&type metadata for HiddenLabeledContentStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _LabeledContentStyleModifier);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<DatePicker<DatePickerStyleConfiguration.Label>, DatePickerStyleModifier<WheelDatePickerStyle>>, _LabeledContentStyleModifier<HiddenLabeledContentStyle>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type HiddenLabeledContentStyle and conformance HiddenLabeledContentStyle()
{
  unint64_t result = lazy protocol witness table cache variable for type HiddenLabeledContentStyle and conformance HiddenLabeledContentStyle;
  if (!lazy protocol witness table cache variable for type HiddenLabeledContentStyle and conformance HiddenLabeledContentStyle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HiddenLabeledContentStyle and conformance HiddenLabeledContentStyle);
  }
  return result;
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<DatePicker<DatePickerStyleConfiguration.Label>, DatePickerStyleModifier<WheelDatePickerStyle>>, _LabeledContentStyleModifier<HiddenLabeledContentStyle>>, _AlignmentLayout>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<DatePicker<DatePickerStyleConfiguration.Label>, DatePickerStyleModifier<WheelDatePickerStyle>>, _LabeledContentStyleModifier<HiddenLabeledContentStyle>>, _AlignmentLayout>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<DatePicker<DatePickerStyleConfiguration.Label>, DatePickerStyleModifier<WheelDatePickerStyle>>, _LabeledContentStyleModifier<HiddenLabeledContentStyle>>();
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<DatePicker<DatePickerStyleConfiguration.Label>, DatePickerStyleModifier<WheelDatePickerStyle>>, _LabeledContentStyleModifier<HiddenLabeledContentStyle>>, _AlignmentLayout>);
    }
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<DatePicker<DatePickerStyleConfiguration.Label>, DatePickerStyleModifier<WheelDatePickerStyle>>, _LabeledContentStyleModifier<HiddenLabeledContentStyle>>, _AlignmentLayout>, ViewInputFlagModifier<AccessibilityCombinedLabeledContent>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<DatePicker<DatePickerStyleConfiguration.Label>, DatePickerStyleModifier<WheelDatePickerStyle>>, _LabeledContentStyleModifier<HiddenLabeledContentStyle>>, _AlignmentLayout>, ViewInputFlagModifier<AccessibilityCombinedLabeledContent>>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<DatePicker<DatePickerStyleConfiguration.Label>, DatePickerStyleModifier<WheelDatePickerStyle>>, _LabeledContentStyleModifier<HiddenLabeledContentStyle>>, _AlignmentLayout>();
    type metadata accessor for DatePickerStyleModifier<WheelDatePickerStyle>(255, &lazy cache variable for type metadata for ViewInputFlagModifier<AccessibilityCombinedLabeledContent>, (uint64_t (*)(void))lazy protocol witness table accessor for type AccessibilityCombinedLabeledContent and conformance AccessibilityCombinedLabeledContent, (uint64_t)&type metadata for AccessibilityCombinedLabeledContent, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ViewInputFlagModifier);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<DatePicker<DatePickerStyleConfiguration.Label>, DatePickerStyleModifier<WheelDatePickerStyle>>, _LabeledContentStyleModifier<HiddenLabeledContentStyle>>, _AlignmentLayout>, ViewInputFlagModifier<AccessibilityCombinedLabeledContent>>);
    }
  }
}

void type metadata accessor for DatePickerStyleModifier<WheelDatePickerStyle>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void), uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v9 = a3();
    unint64_t v10 = a5(a1, a4, v9);
    if (!v11) {
      atomic_store(v10, a2);
    }
  }
}

void type metadata accessor for Button<ModifiedContent<LabeledContent<ModifiedContent<DatePickerStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Color?>>, ModifiedContent<Text, _EnvironmentKeyWritingModifier<Color?>>>, ViewInputFlagModifier<AccessibilityCombinedLabeledContent>>>()
{
  if (!lazy cache variable for type metadata for Button<ModifiedContent<LabeledContent<ModifiedContent<DatePickerStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Color?>>, ModifiedContent<Text, _EnvironmentKeyWritingModifier<Color?>>>, ViewInputFlagModifier<AccessibilityCombinedLabeledContent>>>)
  {
    type metadata accessor for ModifiedContent<LabeledContent<ModifiedContent<DatePickerStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Color?>>, ModifiedContent<Text, _EnvironmentKeyWritingModifier<Color?>>>, ViewInputFlagModifier<AccessibilityCombinedLabeledContent>>();
    lazy protocol witness table accessor for type ModifiedContent<LabeledContent<ModifiedContent<DatePickerStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Color?>>, ModifiedContent<Text, _EnvironmentKeyWritingModifier<Color?>>>, ViewInputFlagModifier<AccessibilityCombinedLabeledContent>> and conformance <> ModifiedContent<A, B>();
    unint64_t v0 = type metadata accessor for Button();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Button<ModifiedContent<LabeledContent<ModifiedContent<DatePickerStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Color?>>, ModifiedContent<Text, _EnvironmentKeyWritingModifier<Color?>>>, ViewInputFlagModifier<AccessibilityCombinedLabeledContent>>>);
    }
  }
}

void type metadata accessor for ModifiedContent<LabeledContent<ModifiedContent<DatePickerStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Color?>>, ModifiedContent<Text, _EnvironmentKeyWritingModifier<Color?>>>, ViewInputFlagModifier<AccessibilityCombinedLabeledContent>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<LabeledContent<ModifiedContent<DatePickerStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Color?>>, ModifiedContent<Text, _EnvironmentKeyWritingModifier<Color?>>>, ViewInputFlagModifier<AccessibilityCombinedLabeledContent>>)
  {
    type metadata accessor for LabeledContent<ModifiedContent<DatePickerStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Color?>>, ModifiedContent<Text, _EnvironmentKeyWritingModifier<Color?>>>();
    type metadata accessor for DatePickerStyleModifier<WheelDatePickerStyle>(255, &lazy cache variable for type metadata for ViewInputFlagModifier<AccessibilityCombinedLabeledContent>, (uint64_t (*)(void))lazy protocol witness table accessor for type AccessibilityCombinedLabeledContent and conformance AccessibilityCombinedLabeledContent, (uint64_t)&type metadata for AccessibilityCombinedLabeledContent, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ViewInputFlagModifier);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<LabeledContent<ModifiedContent<DatePickerStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Color?>>, ModifiedContent<Text, _EnvironmentKeyWritingModifier<Color?>>>, ViewInputFlagModifier<AccessibilityCombinedLabeledContent>>);
    }
  }
}

void type metadata accessor for LabeledContent<ModifiedContent<DatePickerStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Color?>>, ModifiedContent<Text, _EnvironmentKeyWritingModifier<Color?>>>()
{
  if (!lazy cache variable for type metadata for LabeledContent<ModifiedContent<DatePickerStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Color?>>, ModifiedContent<Text, _EnvironmentKeyWritingModifier<Color?>>>)
  {
    type metadata accessor for ModifiedContent<DatePickerStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Color?>>(255, &lazy cache variable for type metadata for ModifiedContent<DatePickerStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Color?>>);
    type metadata accessor for ModifiedContent<DatePickerStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Color?>>(255, &lazy cache variable for type metadata for ModifiedContent<Text, _EnvironmentKeyWritingModifier<Color?>>);
    unint64_t v0 = type metadata accessor for LabeledContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for LabeledContent<ModifiedContent<DatePickerStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Color?>>, ModifiedContent<Text, _EnvironmentKeyWritingModifier<Color?>>>);
    }
  }
}

void type metadata accessor for ModifiedContent<DatePickerStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Color?>>(uint64_t a1, unint64_t *a2)
{
  if (!*a2)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Color?>();
    unint64_t v3 = type metadata accessor for ModifiedContent();
    if (!v4) {
      atomic_store(v3, a2);
    }
  }
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<LabeledContent<ModifiedContent<DatePickerStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Color?>>, ModifiedContent<Text, _EnvironmentKeyWritingModifier<Color?>>>, ViewInputFlagModifier<AccessibilityCombinedLabeledContent>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<LabeledContent<ModifiedContent<DatePickerStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Color?>>, ModifiedContent<Text, _EnvironmentKeyWritingModifier<Color?>>>, ViewInputFlagModifier<AccessibilityCombinedLabeledContent>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<LabeledContent<ModifiedContent<DatePickerStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Color?>>, ModifiedContent<Text, _EnvironmentKeyWritingModifier<Color?>>>, ViewInputFlagModifier<AccessibilityCombinedLabeledContent>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<LabeledContent<ModifiedContent<DatePickerStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Color?>>, ModifiedContent<Text, _EnvironmentKeyWritingModifier<Color?>>>, ViewInputFlagModifier<AccessibilityCombinedLabeledContent>>();
    lazy protocol witness table accessor for type LabeledContent<ModifiedContent<DatePickerStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Color?>>, ModifiedContent<Text, _EnvironmentKeyWritingModifier<Color?>>> and conformance <> LabeledContent<A, B>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<LabeledContent<ModifiedContent<DatePickerStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Color?>>, ModifiedContent<Text, _EnvironmentKeyWritingModifier<Color?>>>, ViewInputFlagModifier<AccessibilityCombinedLabeledContent>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type LabeledContent<ModifiedContent<DatePickerStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Color?>>, ModifiedContent<Text, _EnvironmentKeyWritingModifier<Color?>>> and conformance <> LabeledContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type LabeledContent<ModifiedContent<DatePickerStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Color?>>, ModifiedContent<Text, _EnvironmentKeyWritingModifier<Color?>>> and conformance <> LabeledContent<A, B>;
  if (!lazy protocol witness table cache variable for type LabeledContent<ModifiedContent<DatePickerStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Color?>>, ModifiedContent<Text, _EnvironmentKeyWritingModifier<Color?>>> and conformance <> LabeledContent<A, B>)
  {
    type metadata accessor for LabeledContent<ModifiedContent<DatePickerStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Color?>>, ModifiedContent<Text, _EnvironmentKeyWritingModifier<Color?>>>();
    lazy protocol witness table accessor for type ModifiedContent<DatePickerStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Color?>> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<DatePickerStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Color?>> and conformance <> ModifiedContent<A, B>, &lazy cache variable for type metadata for ModifiedContent<DatePickerStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Color?>>);
    lazy protocol witness table accessor for type ModifiedContent<DatePickerStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Color?>> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<Text, _EnvironmentKeyWritingModifier<Color?>> and conformance <> ModifiedContent<A, B>, &lazy cache variable for type metadata for ModifiedContent<Text, _EnvironmentKeyWritingModifier<Color?>>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LabeledContent<ModifiedContent<DatePickerStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Color?>>, ModifiedContent<Text, _EnvironmentKeyWritingModifier<Color?>>> and conformance <> LabeledContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<Color?> and conformance _EnvironmentKeyWritingModifier<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<Color?> and conformance _EnvironmentKeyWritingModifier<A>;
  if (!lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<Color?> and conformance _EnvironmentKeyWritingModifier<A>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Color?>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<Color?> and conformance _EnvironmentKeyWritingModifier<A>);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<DatePickerStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Color?>> and conformance <> ModifiedContent<A, B>(unint64_t *a1, unint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for ModifiedContent<DatePickerStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Color?>>(255, a2);
    lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<Color?> and conformance _EnvironmentKeyWritingModifier<A>();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_187C1D7D4()
{
  uint64_t v1 = type metadata accessor for CollapsibleWheelDatePickerStyle();
  unint64_t v2 = (*(unsigned __int8 *)(*(void *)(v1 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v1 - 8) + 80);
  uint64_t v3 = v0 + v2;
  _s7SwiftUI11EnvironmentV7ContentOy10Foundation6LocaleV_GMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for Environment<Locale>.Content, MEMORY[0x1E4F27A78], MEMORY[0x1E4F3F4D8]);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v4 = type metadata accessor for Locale();
    (*(void (**)(unint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(v0 + v2, v4);
  }
  else
  {
    swift_release();
  }
  uint64_t v5 = v3 + *(int *)(v1 + 20);
  _s7SwiftUI11EnvironmentV7ContentOy10Foundation6LocaleV_GMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for Environment<Calendar>.Content, MEMORY[0x1E4F27CA0], MEMORY[0x1E4F3F4D8]);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v6 = type metadata accessor for Calendar();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v5, v6);
  }
  else
  {
    swift_release();
  }
  uint64_t v7 = v3 + *(int *)(v1 + 24);
  _s7SwiftUI11EnvironmentV7ContentOy10Foundation6LocaleV_GMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for Environment<TimeZone>.Content, MEMORY[0x1E4F27D68], MEMORY[0x1E4F3F4D8]);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v8 = type metadata accessor for TimeZone();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8))(v7, v8);
  }
  else
  {
    swift_release();
  }
  swift_release();

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in CollapsibleWheelDatePickerStyle.makeBody(configuration:)()
{
  type metadata accessor for CollapsibleWheelDatePickerStyle();

  return closure #1 in CollapsibleWheelDatePickerStyle.makeBody(configuration:)();
}

uint64_t outlined init with copy of CollapsibleWheelDatePickerStyle(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t outlined init with copy of Date?(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t (*a4)(uint64_t), uint64_t (*a5)(uint64_t, uint64_t))
{
  _s7SwiftUI11EnvironmentV7ContentOy10Foundation6LocaleV_GMaTm_0(0, a3, a4, a5);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 16))(a2, a1, v7);
  return a2;
}

void type metadata accessor for (Button<ModifiedContent<LabeledContent<ModifiedContent<DatePickerStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Color?>>, ModifiedContent<Text, _EnvironmentKeyWritingModifier<Color?>>>, ViewInputFlagModifier<AccessibilityCombinedLabeledContent>>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<DatePicker<DatePickerStyleConfiguration.Label>, DatePickerStyleModifier<WheelDatePickerStyle>>, _LabeledContentStyleModifier<HiddenLabeledContentStyle>>, _AlignmentLayout>, ViewInputFlagModifier<AccessibilityCombinedLabeledContent>>?)()
{
  if (!lazy cache variable for type metadata for (Button<ModifiedContent<LabeledContent<ModifiedContent<DatePickerStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Color?>>, ModifiedContent<Text, _EnvironmentKeyWritingModifier<Color?>>>, ViewInputFlagModifier<AccessibilityCombinedLabeledContent>>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<DatePicker<DatePickerStyleConfiguration.Label>, DatePickerStyleModifier<WheelDatePickerStyle>>, _LabeledContentStyleModifier<HiddenLabeledContentStyle>>, _AlignmentLayout>, ViewInputFlagModifier<AccessibilityCombinedLabeledContent>>?))
  {
    type metadata accessor for Button<ModifiedContent<LabeledContent<ModifiedContent<DatePickerStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Color?>>, ModifiedContent<Text, _EnvironmentKeyWritingModifier<Color?>>>, ViewInputFlagModifier<AccessibilityCombinedLabeledContent>>>();
    _s7SwiftUI11EnvironmentV7ContentOy10Foundation6LocaleV_GMaTm_0(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<DatePicker<DatePickerStyleConfiguration.Label>, DatePickerStyleModifier<WheelDatePickerStyle>>, _LabeledContentStyleModifier<HiddenLabeledContentStyle>>, _AlignmentLayout>, ViewInputFlagModifier<AccessibilityCombinedLabeledContent>>?, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<DatePicker<DatePickerStyleConfiguration.Label>, DatePickerStyleModifier<WheelDatePickerStyle>>, _LabeledContentStyleModifier<HiddenLabeledContentStyle>>, _AlignmentLayout>, ViewInputFlagModifier<AccessibilityCombinedLabeledContent>>, MEMORY[0x1E4FBB718]);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (Button<ModifiedContent<LabeledContent<ModifiedContent<DatePickerStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Color?>>, ModifiedContent<Text, _EnvironmentKeyWritingModifier<Color?>>>, ViewInputFlagModifier<AccessibilityCombinedLabeledContent>>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<DatePicker<DatePickerStyleConfiguration.Label>, DatePickerStyleModifier<WheelDatePickerStyle>>, _LabeledContentStyleModifier<HiddenLabeledContentStyle>>, _AlignmentLayout>, ViewInputFlagModifier<AccessibilityCombinedLabeledContent>>?));
    }
  }
}

uint64_t outlined destroy of ModifiedContent<ModifiedContent<ModifiedContent<DatePicker<DatePickerStyleConfiguration.Label>, DatePickerStyleModifier<WheelDatePickerStyle>>, _LabeledContentStyleModifier<HiddenLabeledContentStyle>>, _AlignmentLayout>(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t outlined init with take of CollapsibleWheelDatePickerStyle(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t partial apply for closure #1 in closure #1 in CollapsibleWheelDatePickerStyle.makeBody(configuration:)()
{
  return closure #1 in closure #1 in CollapsibleWheelDatePickerStyle.makeBody(configuration:)(*(void *)(v0 + 16));
}

unint64_t lazy protocol witness table accessor for type TupleView<(Button<ModifiedContent<LabeledContent<ModifiedContent<DatePickerStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Color?>>, ModifiedContent<Text, _EnvironmentKeyWritingModifier<Color?>>>, ViewInputFlagModifier<AccessibilityCombinedLabeledContent>>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<DatePicker<DatePickerStyleConfiguration.Label>, DatePickerStyleModifier<WheelDatePickerStyle>>, _LabeledContentStyleModifier<HiddenLabeledContentStyle>>, _AlignmentLayout>, ViewInputFlagModifier<AccessibilityCombinedLabeledContent>>?)> and conformance TupleView<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type TupleView<(Button<ModifiedContent<LabeledContent<ModifiedContent<DatePickerStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Color?>>, ModifiedContent<Text, _EnvironmentKeyWritingModifier<Color?>>>, ViewInputFlagModifier<AccessibilityCombinedLabeledContent>>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<DatePicker<DatePickerStyleConfiguration.Label>, DatePickerStyleModifier<WheelDatePickerStyle>>, _LabeledContentStyleModifier<HiddenLabeledContentStyle>>, _AlignmentLayout>, ViewInputFlagModifier<AccessibilityCombinedLabeledContent>>?)> and conformance TupleView<A>;
  if (!lazy protocol witness table cache variable for type TupleView<(Button<ModifiedContent<LabeledContent<ModifiedContent<DatePickerStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Color?>>, ModifiedContent<Text, _EnvironmentKeyWritingModifier<Color?>>>, ViewInputFlagModifier<AccessibilityCombinedLabeledContent>>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<DatePicker<DatePickerStyleConfiguration.Label>, DatePickerStyleModifier<WheelDatePickerStyle>>, _LabeledContentStyleModifier<HiddenLabeledContentStyle>>, _AlignmentLayout>, ViewInputFlagModifier<AccessibilityCombinedLabeledContent>>?)> and conformance TupleView<A>)
  {
    _s7SwiftUI11EnvironmentV7ContentOy10Foundation6LocaleV_GMaTm_0(255, &lazy cache variable for type metadata for TupleView<(Button<ModifiedContent<LabeledContent<ModifiedContent<DatePickerStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Color?>>, ModifiedContent<Text, _EnvironmentKeyWritingModifier<Color?>>>, ViewInputFlagModifier<AccessibilityCombinedLabeledContent>>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<DatePicker<DatePickerStyleConfiguration.Label>, DatePickerStyleModifier<WheelDatePickerStyle>>, _LabeledContentStyleModifier<HiddenLabeledContentStyle>>, _AlignmentLayout>, ViewInputFlagModifier<AccessibilityCombinedLabeledContent>>?)>, (uint64_t (*)(uint64_t))type metadata accessor for (Button<ModifiedContent<LabeledContent<ModifiedContent<DatePickerStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Color?>>, ModifiedContent<Text, _EnvironmentKeyWritingModifier<Color?>>>, ViewInputFlagModifier<AccessibilityCombinedLabeledContent>>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<DatePicker<DatePickerStyleConfiguration.Label>, DatePickerStyleModifier<WheelDatePickerStyle>>, _LabeledContentStyleModifier<HiddenLabeledContentStyle>>, _AlignmentLayout>, ViewInputFlagModifier<AccessibilityCombinedLabeledContent>>?), MEMORY[0x1E4F41850]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TupleView<(Button<ModifiedContent<LabeledContent<ModifiedContent<DatePickerStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Color?>>, ModifiedContent<Text, _EnvironmentKeyWritingModifier<Color?>>>, ViewInputFlagModifier<AccessibilityCombinedLabeledContent>>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<DatePicker<DatePickerStyleConfiguration.Label>, DatePickerStyleModifier<WheelDatePickerStyle>>, _LabeledContentStyleModifier<HiddenLabeledContentStyle>>, _AlignmentLayout>, ViewInputFlagModifier<AccessibilityCombinedLabeledContent>>?)> and conformance TupleView<A>);
  }
  return result;
}

void _s7SwiftUI11EnvironmentV7ContentOy10Foundation6LocaleV_GMaTm_0(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

uint64_t FocusBridge.focusDidChange_PhoneWatch(rootResponder:)(uint64_t a1)
{
  uint64_t result = FocusBridge.canAcceptFocus.getter();
  if (result)
  {
    memset(v20, 0, sizeof(v20));
    uint64_t v21 = 1;
    int v22 = 0;
    if (a1)
    {
      MEMORY[0x1F4188790](result);
      MEMORY[0x1F4188790](v3);
      dispatch thunk of ResponderNode.visit(applying:)();
    }
    FocusBridge.focusedItem.getter((uint64_t)v19);
    outlined init with copy of FocusItem?((uint64_t)v20, (uint64_t)v15);
    if (v15[5] || v15[6] != 1)
    {
      outlined init with take of FocusItem((uint64_t)v15, (uint64_t)v16);
    }
    else
    {
      *(_OWORD *)Class v17 = 0u;
      memset(v16, 0, sizeof(v16));
      *(void *)&v17[16] = 1;
      int v18 = 0;
      outlined destroy of FocusItem?((uint64_t)v15);
    }
    FocusBridge.focusedItem.setter((uint64_t)v16);
    FocusBridge.focusedItem.getter((uint64_t)v16);
    uint64_t v5 = *(void *)&v17[8];
    uint64_t v4 = *(void *)&v17[16];
    outlined destroy of FocusItem?((uint64_t)v16);
    if (v5 || v4 != 1)
    {
      FocusBridge.focusedItem.getter((uint64_t)v16);
      uint64_t v7 = (void *)FocusBridge.host.getter();
      uint64_t v9 = v8;
      uint64_t v11 = v10;
      outlined init with copy of FocusItem?((uint64_t)v16, (uint64_t)v15);
      uint64_t v12 = (void *)swift_allocObject();
      outlined init with take of FocusItem?((uint64_t)v15, (uint64_t)(v12 + 2));
      v12[10] = v7;
      v12[11] = v9;
      v12[12] = v11;
      id v13 = v7;
      onNextMainRunLoop(do:)();

      swift_release();
    }
    else
    {
      outlined init with copy of FocusItem?((uint64_t)v19, (uint64_t)v16);
      if (*(_OWORD *)&v17[8] != __PAIR128__(1, 0))
      {
        uint64_t v6 = (void *)FocusItem.platformResponder.getter();
        outlined destroy of FocusItem((uint64_t)v16);
        if (v6)
        {

          outlined init with copy of FocusItem?((uint64_t)v19, (uint64_t)v16);
          if (*(void *)&v17[8] || *(void *)&v17[16] != 1)
          {
            uint64_t v14 = (void *)FocusItem.platformResponder.getter();
            outlined destroy of FocusItem((uint64_t)v16);
            if (v14)
            {
LABEL_21:
              objc_msgSend(v14, sel_resignFirstResponder);

              goto LABEL_17;
            }
          }
          else
          {
            outlined destroy of FocusItem?((uint64_t)v16);
          }
          uint64_t v14 = (void *)FocusBridge.host.getter();
          if (v14) {
            goto LABEL_21;
          }
        }
LABEL_17:
        outlined destroy of FocusItem?((uint64_t)v19);
        return outlined destroy of FocusItem?((uint64_t)v20);
      }
    }
    outlined destroy of FocusItem?((uint64_t)v16);
    goto LABEL_17;
  }
  return result;
}

uint64_t closure #1 in FocusBridge.focusDidChange_PhoneWatch(rootResponder:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, unsigned char *a4@<X8>)
{
  (*(void (**)(void *__return_ptr, void))(a2 + 16))(v10, *a1);
  if (v10[5]) {
    BOOL v6 = 0;
  }
  else {
    BOOL v6 = v10[6] == 1;
  }
  if (v6)
  {
    uint64_t result = outlined destroy of FocusItem?((uint64_t)v10);
  }
  else
  {
    outlined init with take of FocusItem((uint64_t)v10, (uint64_t)v11);
    if (FocusItem.isFocusable.getter())
    {
      uint64_t v7 = (void *)FocusItem.platformResponder.getter();
      if (v7 || (uint64_t v7 = (void *)FocusBridge.host.getter()) != 0)
      {
        unsigned int v8 = objc_msgSend(v7, sel_isFirstResponder);

        if (v8)
        {
          outlined destroy of FocusItem?(a3);
          uint64_t result = outlined init with take of FocusItem((uint64_t)v11, a3);
          *a4 = 2;
          return result;
        }
      }
    }
    uint64_t result = outlined destroy of FocusItem((uint64_t)v11);
  }
  *a4 = 0;
  return result;
}

void closure #2 in FocusBridge.focusDidChange_PhoneWatch(rootResponder:)(uint64_t a1, void *a2)
{
  outlined init with copy of FocusItem?(a1, (uint64_t)v5);
  if (v5[5]) {
    BOOL v3 = 0;
  }
  else {
    BOOL v3 = v5[6] == 1;
  }
  if (v3)
  {
    outlined destroy of FocusItem?((uint64_t)v5);
    if (!a2) {
      return;
    }
    goto LABEL_9;
  }
  id v4 = (id)FocusItem.platformResponder.getter();
  outlined destroy of FocusItem((uint64_t)v5);
  if (v4)
  {
LABEL_10:
    objc_msgSend(v4, sel_becomeFirstResponder);

    return;
  }
  if (a2)
  {
LABEL_9:
    id v4 = a2;
    goto LABEL_10;
  }
}

uint64_t sub_187C1E264()
{
  if (*(void *)(v0 + 56)) {
    BOOL v1 = 0;
  }
  else {
    BOOL v1 = *(void *)(v0 + 64) == 1;
  }
  if (!v1)
  {
    int v2 = *(unsigned __int8 *)(v0 + 48);
    if (v2 == 2 || v2 == 1)
    {
      swift_unknownObjectWeakDestroy();
    }
    else if (!*(unsigned char *)(v0 + 48))
    {
      swift_release();
    }
    swift_weakDestroy();
  }

  return swift_deallocObject();
}

uint64_t outlined init with take of FocusItem?(uint64_t a1, uint64_t a2)
{
  type metadata accessor for FocusItem?();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void partial apply for closure #2 in FocusBridge.focusDidChange_PhoneWatch(rootResponder:)()
{
  closure #2 in FocusBridge.focusDidChange_PhoneWatch(rootResponder:)(v0 + 16, *(void **)(v0 + 80));
}

uint64_t partial apply for closure #1 in FocusBridge.focusDidChange_PhoneWatch(rootResponder:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  return closure #1 in FocusBridge.focusDidChange_PhoneWatch(rootResponder:)(a1, a2, *(void *)(v3 + 24), a3);
}

uint64_t _PlatformViewRepresentableLayoutOptions.rawValue.getter()
{
  return *(void *)v0;
}

SwiftUI::_PlatformViewRepresentableLayoutOptions __swiftcall _PlatformViewRepresentableLayoutOptions.init(rawValue:)(SwiftUI::_PlatformViewRepresentableLayoutOptions rawValue)
{
  v1->rawuint64_t Value = rawValue.rawValue;
  return rawValue;
}

void static _PlatformViewRepresentableLayoutOptions.propagatesSafeArea.getter(void *a1@<X8>)
{
  *a1 = 4;
}

ValueMetadata *type metadata accessor for _PlatformViewRepresentableLayoutOptions()
{
  return &type metadata for _PlatformViewRepresentableLayoutOptions;
}

ValueMetadata *type metadata accessor for EndChildGeometries()
{
  return &type metadata for EndChildGeometries;
}

ValueMetadata *type metadata accessor for BeginChildGeometries()
{
  return &type metadata for BeginChildGeometries;
}

uint64_t BeginChildGeometries.encode(to:)()
{
  MEMORY[0x18C114450]();
  type metadata accessor for CGSize(0);
  uint64_t result = ProtobufEncoder.messageField<A>(_:_:)();
  if (!v0)
  {
    type metadata accessor for CGPoint(0);
    ProtobufEncoder.messageField<A>(_:_:)();
    ViewSize.proposal.getter();
    _ProposedSize.width.getter();
    if ((v2 & 1) == 0) {
      ProtobufEncoder.cgFloatField(_:_:defaultValue:)();
    }
    ViewSize.proposal.getter();
    uint64_t result = _ProposedSize.height.getter();
    if ((v3 & 1) == 0) {
      return ProtobufEncoder.cgFloatField(_:_:defaultValue:)();
    }
  }
  return result;
}

uint64_t protocol witness for ProtobufEncodableMessage.encode(to:) in conformance BeginChildGeometries()
{
  return BeginChildGeometries.encode(to:)();
}

uint64_t EndChildGeometries.CodableViewGeometry.encode(to:)()
{
  type metadata accessor for CGSize(0);
  uint64_t result = ProtobufEncoder.messageField<A>(_:_:)();
  if (!v0)
  {
    type metadata accessor for CGPoint(0);
    ProtobufEncoder.messageField<A>(_:_:)();
    _ProposedSize.width.getter();
    if ((v2 & 1) == 0) {
      ProtobufEncoder.cgFloatField(_:_:defaultValue:)();
    }
    uint64_t result = _ProposedSize.height.getter();
    if ((v3 & 1) == 0) {
      return ProtobufEncoder.cgFloatField(_:_:defaultValue:)();
    }
  }
  return result;
}

uint64_t protocol witness for ProtobufEncodableMessage.encode(to:) in conformance EndChildGeometries.CodableViewGeometry()
{
  return EndChildGeometries.CodableViewGeometry.encode(to:)();
}

uint64_t EndChildGeometries.encode(to:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  if (v3)
  {
    lazy protocol witness table accessor for type EndChildGeometries.CodableViewGeometry and conformance EndChildGeometries.CodableViewGeometry();
    swift_bridgeObjectRetain();
    uint64_t v5 = a2 + 80;
    do
    {
      ProtobufEncoder.messageField<A>(_:_:)();
      if (v2) {
        break;
      }
      v5 += 64;
      --v3;
    }
    while (v3);
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t protocol witness for ProtobufEncodableMessage.encode(to:) in conformance EndChildGeometries(uint64_t a1)
{
  return EndChildGeometries.encode(to:)(a1, *v1);
}

unint64_t lazy protocol witness table accessor for type EndChildGeometries.CodableViewGeometry and conformance EndChildGeometries.CodableViewGeometry()
{
  unint64_t result = lazy protocol witness table cache variable for type EndChildGeometries.CodableViewGeometry and conformance EndChildGeometries.CodableViewGeometry;
  if (!lazy protocol witness table cache variable for type EndChildGeometries.CodableViewGeometry and conformance EndChildGeometries.CodableViewGeometry)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EndChildGeometries.CodableViewGeometry and conformance EndChildGeometries.CodableViewGeometry);
  }
  return result;
}

uint64_t specialized EndChildGeometries.init(_:)(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = MEMORY[0x1E4FBC860];
  if (v1)
  {
    uint64_t v21 = MEMORY[0x1E4FBC860];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0);
    uint64_t v2 = v21;
    uint64_t v4 = a1 + 88;
    do
    {
      uint64_t v5 = swift_retain();
      double v6 = MEMORY[0x18C10C240](v5);
      uint64_t v8 = v7;
      ViewSize.proposal.getter();
      uint64_t v9 = swift_release();
      double v10 = MEMORY[0x18C114450](v9);
      uint64_t v12 = v11;
      unint64_t v14 = *(void *)(v21 + 16);
      unint64_t v13 = *(void *)(v21 + 24);
      if (v14 >= v13 >> 1) {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v13 > 1), v14 + 1, 1);
      }
      *(void *)(v21 + 16) = v14 + 1;
      uint64_t v15 = v21 + (v14 << 6);
      *(double *)(v15 + 32) = v6;
      *(void *)(v15 + 40) = v8;
      *(void *)(v15 + 48) = v17;
      *(unsigned char *)(v15 + 56) = v18;
      *(void *)(v15 + 64) = v19;
      *(unsigned char *)(v15 + 72) = v20;
      v4 += 64;
      *(double *)(v15 + 80) = v10;
      *(void *)(v15 + 88) = v12;
      --v1;
    }
    while (v1);
  }
  return v2;
}

ValueMetadata *type metadata accessor for EndChildGeometries.CodableViewGeometry()
{
  return &type metadata for EndChildGeometries.CodableViewGeometry;
}

void static OrnamentAttachmentAnchor.scene(_:)()
{
}

void static OrnamentAttachmentAnchor.scene(alignment:)()
{
}

void View.ornament<A>(visibility:attachmentAnchor:contentAlignment:ornament:)()
{
}

void View.ornament<A>(visibility:attachmentAnchor:contentAlignment:zOffset:isInternal:ornament:)()
{
}

void View.ornament<A>(isPresented:sceneAnchor:offset:ornament:)()
{
}

ValueMetadata *type metadata accessor for OrnamentAttachmentAnchor()
{
  return &type metadata for OrnamentAttachmentAnchor;
}

uint64_t sub_187C1E9D0()
{
  return swift_getWitnessTable();
}

uint64_t type metadata accessor for OrnamentModifier()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_187C1EA58()
{
  return swift_getWitnessTable();
}

uint64_t type metadata accessor for OrnamentModifierLegacy()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata completion function for OrnamentModifierLegacy()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for OrnamentModifierLegacy(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(_DWORD *)(v5 + 80);
  uint64_t v7 = *(void *)(v5 + 64) + 7;
  int v8 = *(_DWORD *)(v5 + 80) & 0x100000;
  uint64_t v9 = *a2;
  *(void *)a1 = *a2;
  if (v6 > 7
    || v8 != 0
    || ((((((v7 + ((v6 + 17) & ~v6)) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)
     + 8 > 0x18)
  {
    a1 = v9 + ((v6 & 0xF8 ^ 0x1F8) & (v6 + 16));
    swift_retain();
  }
  else
  {
    *(void *)(a1 + 8) = a2[1];
    *(unsigned char *)(a1 + 16) = *((unsigned char *)a2 + 16);
    uint64_t v12 = (a1 + v6 + 17) & ~v6;
    uint64_t v13 = ((unint64_t)a2 + v6 + 17) & ~v6;
    unint64_t v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
    swift_retain();
    swift_retain();
    v14(v12, v13, v4);
    uint64_t v15 = (_OWORD *)((v7 + v12) & 0xFFFFFFFFFFFFFFF8);
    Class v16 = (_OWORD *)((v7 + v13) & 0xFFFFFFFFFFFFFFF8);
    *uint64_t v15 = *v16;
    uint64_t v17 = (_OWORD *)(((unint64_t)v15 + 23) & 0xFFFFFFFFFFFFFFF8);
    char v18 = (_OWORD *)(((unint64_t)v16 + 23) & 0xFFFFFFFFFFFFFFF8);
    *uint64_t v17 = *v18;
    *(void *)(((unint64_t)v17 + 23) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v18 + 23) & 0xFFFFFFFFFFFFFFF8);
  }
  return a1;
}

uint64_t destroy for OrnamentModifierLegacy(uint64_t a1, uint64_t a2)
{
  swift_release();
  swift_release();
  uint64_t v4 = *(void *)(*(void *)(a2 + 16) - 8);
  uint64_t v5 = *(uint64_t (**)(unint64_t))(v4 + 8);
  unint64_t v6 = (a1 + *(unsigned __int8 *)(v4 + 80) + 17) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);

  return v5(v6);
}

uint64_t initializeWithCopy for OrnamentModifierLegacy(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  uint64_t v5 = *(void *)(a3 + 16);
  unint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);
  uint64_t v7 = *(void *)(v5 - 8) + 16;
  uint64_t v8 = *(unsigned __int8 *)(*(void *)(v5 - 8) + 80);
  uint64_t v9 = (v8 + 17 + a1) & ~v8;
  uint64_t v10 = (v8 + 17 + a2) & ~v8;
  swift_retain();
  swift_retain();
  v6(v9, v10, v5);
  uint64_t v11 = *(void *)(v7 + 48) + 7;
  uint64_t v12 = (_OWORD *)((v11 + v9) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v13 = (_OWORD *)((v11 + v10) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v12 = *v13;
  unint64_t v14 = (_OWORD *)(((unint64_t)v12 + 23) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v15 = (_OWORD *)(((unint64_t)v13 + 23) & 0xFFFFFFFFFFFFFFF8);
  *unint64_t v14 = *v15;
  *(void *)(((unint64_t)v14 + 23) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v15 + 23) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}