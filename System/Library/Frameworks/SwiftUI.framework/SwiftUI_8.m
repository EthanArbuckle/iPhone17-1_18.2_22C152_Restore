uint64_t NewDocumentButton<>.init(_:contentType:prepareDocumentURL:)@<X0>(uint64_t a1@<X4>, uint64_t a2@<X5>, uint64_t a3@<X6>, uint64_t *a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v21;
  uint64_t v22;
  long long v23;
  uint64_t v24;
  uint64_t v25;

  v22 = a3;
  _s22UniformTypeIdentifiers6UTTypeVSgMaTm_3(0, (unint64_t *)&lazy cache variable for type metadata for UTType?, MEMORY[0x1E4FBCEA8]);
  MEMORY[0x1F4188790](v7 - 8);
  v9 = (char *)&v21 - v8;
  v10 = Text.init(_:tableName:bundle:comment:)();
  v12 = v11;
  v14 = v13;
  v16 = v15 & 1;
  v17 = type metadata accessor for UTType();
  v18 = *(void *)(v17 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v18 + 16))(v9, a1, v17);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v18 + 56))(v9, 0, 1, v17);
  v24 = type metadata accessor for URLDocumentCreationStrategy(0);
  v25 = lazy protocol witness table accessor for type DefaultDocumentCreationStrategy and conformance DefaultDocumentCreationStrategy(&lazy protocol witness table cache variable for type URLDocumentCreationStrategy and conformance URLDocumentCreationStrategy, (void (*)(uint64_t))type metadata accessor for URLDocumentCreationStrategy);
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v23);
  URLDocumentCreationStrategy.init(contentType:prepareDocument:)((uint64_t)v9, a2, v22, (unint64_t *)boxed_opaque_existential_1);
  (*(void (**)(uint64_t, uint64_t))(v18 + 8))(a1, v17);
  *a4 = v10;
  a4[1] = v12;
  a4[2] = v16;
  a4[3] = v14;
  return outlined init with take of OptionalBinaryInteger(&v23, (uint64_t)(a4 + 4));
}

uint64_t LazyFocusableFillerBoundsProvider.updateMetrics(in:placedBounds:axis:)(uint64_t a1, char a2, CGFloat a3, CGFloat a4, CGFloat a5, CGFloat a6)
{
  uint64_t v7 = v6;
  uint64_t v9 = a2 & 1;
  CGRect.range(in:)(v9, a3, a4, a5, a6);
  double v11 = v10;
  double v13 = v12;
  int64_t v14 = *(void *)(a1 + 16);
  v15 = (char *)MEMORY[0x1E4FBC860];
  if (v14)
  {
    v94 = (char *)MEMORY[0x1E4FBC860];
    uint64_t isUniquelyReferenced_nonNull_native = (uint64_t)specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v14, 0);
    v17 = (double *)(a1 + 56);
    do
    {
      double v18 = *(v17 - 3);
      double v19 = *(v17 - 2);
      double v20 = *(v17 - 1);
      double v21 = *v17;
      BOOL v22 = (~*(void *)&v18 & 0x7FF0000000000000) == 0 || (~*((void *)v17 - 2) & 0x7FF0000000000000) == 0;
      if (!v22
        && (double Width = CGRectGetWidth(*(CGRect *)(v17 - 3)),
            (~*(void *)&Width & 0x7FF0000000000000) != 0
         && (v95.origin.x = v18,
             v95.origin.y = v19,
             v95.size.width = v20,
             v95.size.height = v21,
             (~((uint64_t (__cdecl *)(CGRect))CGRectGetHeight)(v95) & 0x7FF0000000000000) != 0)))
      {
        if (v9) {
          double v28 = v21;
        }
        else {
          double v28 = v20;
        }
        if (v9) {
          double v18 = v19;
        }
        if (v28 <= 0.0) {
          double v28 = 0.0;
        }
        double v23 = v18 + v28;
        if (v18 > v18 + v28) {
          goto LABEL_93;
        }
      }
      else
      {
        MEMORY[0x1F4188790](isUniquelyReferenced_nonNull_native);
        static Log.internalError(_:)();
        double v18 = 0.0;
        double v23 = 0.0;
      }
      v15 = v94;
      uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        uint64_t isUniquelyReferenced_nonNull_native = (uint64_t)specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v94 + 2) + 1, 1);
        v15 = v94;
      }
      unint64_t v25 = *((void *)v15 + 2);
      unint64_t v24 = *((void *)v15 + 3);
      if (v25 >= v24 >> 1)
      {
        uint64_t isUniquelyReferenced_nonNull_native = (uint64_t)specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v24 > 1), v25 + 1, 1);
        v15 = v94;
      }
      *((void *)v15 + 2) = v25 + 1;
      v26 = &v15[16 * v25];
      *((double *)v26 + 4) = v18;
      *((double *)v26 + 5) = v23;
      v17 += 4;
      --v14;
    }
    while (v14);
  }
  v94 = v15;
  swift_bridgeObjectRetain();
  specialized MutableCollection<>.sort(by:)(&v94);
  swift_bridgeObjectRelease();
  uint64_t v29 = *((void *)v94 + 2);
  if (!v29)
  {
    v31 = (char *)MEMORY[0x1E4FBC860];
LABEL_66:
    swift_release();
    unint64_t v61 = *((void *)v31 + 2);
    if (v61 > 1)
    {
      double v62 = *((double *)v31 + 5);
      double v64 = *((double *)v31 + 6);
      double v63 = *((double *)v31 + 7);
      if (v63 - v64 >= v62 - *((double *)v31 + 4)) {
        double v65 = v62 - *((double *)v31 + 4);
      }
      else {
        double v65 = v63 - v64;
      }
      double v66 = v64 - v62;
      unint64_t v67 = v61 - 2;
      if (v67)
      {
        v68 = (double *)(v31 + 72);
        do
        {
          double v69 = v63 - v64;
          double v70 = v64 + v63;
          double v71 = *(v68 - 1);
          double v72 = *v68;
          double v73 = v71 - v63;
          if (*v68 - v71 < v69) {
            double v69 = *v68 - v71;
          }
          if (v65 + v66 >= (v71 + v72) * 0.5 - v70 * 0.5)
          {
            double v65 = v69;
            double v66 = v73;
          }
          v68 += 2;
          double v63 = v72;
          double v64 = v71;
          --v67;
        }
        while (v67);
      }
      uint64_t v74 = *(void *)(v7 + 64);
      if (*(void *)(v74 + 16))
      {
        uint64_t v75 = specialized __RawDictionaryStorage.find<A>(_:)(v9);
        if (v76)
        {
          v77 = (double *)(*(void *)(v74 + 56) + 32 * v75);
          double v65 = (v65 + *v77) * 0.5;
          double v66 = (v66 + v77[1]) * 0.5;
        }
      }
      uint64_t v78 = *((void *)v31 + 2);
      double v79 = 0.0;
      double v80 = 0.0;
      if (v78)
      {
        double v79 = *((double *)v31 + 4);
        double v80 = *(double *)&v31[16 * v78 + 24];
      }
      swift_bridgeObjectRelease();
      double v81 = v79 - (v66 + v65) * floor((v79 - v11) / (v66 + v65)) - v11;
      double v82 = v13 - (v66 + v65) * floor((v13 - v80) / (v66 + v65)) - v80;
      double v83 = v66 + v65 * 0.25;
      if (v83 >= v81) {
        double v84 = 0.0;
      }
      else {
        double v84 = v66 + v65 * 0.25;
      }
      double v85 = v81 - v84;
      if (v83 >= v82) {
        double v86 = 0.0;
      }
      else {
        double v86 = v66 + v65 * 0.25;
      }
      double v87 = v82 - v86;
      char v88 = swift_isUniquelyReferenced_nonNull_native();
      v94 = *(char **)(v7 + 64);
      *(void *)(v7 + 64) = 0x8000000000000000;
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v9, v88, v65, v66, v85, v87);
      *(void *)(v7 + 64) = v94;
    }
    return swift_bridgeObjectRelease();
  }
  v30 = v94 + 32;
  v31 = (char *)MEMORY[0x1E4FBC860];
  double v32 = 0.0;
  while (1)
  {
    long long v34 = *(_OWORD *)v30;
    uint64_t v35 = *((void *)v31 + 2);
    if (!v35)
    {
      long long v91 = *(_OWORD *)v30;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        v31 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 1, v31);
      }
      unint64_t v44 = *((void *)v31 + 2);
      unint64_t v43 = *((void *)v31 + 3);
      long long v45 = v91;
      if (v44 >= v43 >> 1)
      {
        v56 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v43 > 1), v44 + 1, 1, v31);
        long long v45 = v91;
        v31 = v56;
      }
      *((void *)v31 + 2) = v44 + 1;
      *(_OWORD *)&v31[16 * v44 + 32] = v45;
      goto LABEL_31;
    }
    v36 = &v31[16 * v35];
    double v38 = *((double *)v36 + 2);
    double v37 = *((double *)v36 + 3);
    if (*(double *)&v34 == v38) {
      break;
    }
    double v46 = v32 + v37;
    if (v32 + v37 >= *(double *)&v34)
    {
      double v52 = *((double *)v30 + 1);
      if (v37 <= *(double *)&v34)
      {
        long long v93 = *(_OWORD *)v30;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          v31 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v35 + 1, 1, v31);
        }
        unint64_t v54 = *((void *)v31 + 2);
        unint64_t v53 = *((void *)v31 + 3);
        long long v55 = v93;
        if (v54 >= v53 >> 1)
        {
          v60 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v53 > 1), v54 + 1, 1, v31);
          long long v55 = v93;
          v31 = v60;
        }
        *((void *)v31 + 2) = v54 + 1;
        *(_OWORD *)&v31[16 * v54 + 32] = v55;
        if (v46 - v52 > 0.0) {
          double v32 = v46 - v52;
        }
        else {
          double v32 = 0.0;
        }
        goto LABEL_31;
      }
      double v33 = *((double *)&v34 + 1) - v37;
      goto LABEL_29;
    }
    long long v92 = *(_OWORD *)v30;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      v31 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v31);
    }
    unint64_t v47 = *((void *)v31 + 2);
    long long v48 = v92;
    if (!v47) {
      goto LABEL_91;
    }
    *((void *)v31 + 2) = v47 - 1;
    if (v38 > v46) {
      goto LABEL_92;
    }
    unint64_t v49 = *((void *)v31 + 3);
    if (v47 > v49 >> 1)
    {
      v58 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v49 > 1), v47, 1, v31);
      long long v48 = v92;
      v31 = v58;
    }
    *((void *)v31 + 2) = v47;
    v50 = &v31[16 * v47 - 16];
    *((double *)v50 + 4) = v38;
    *((double *)v50 + 5) = v46;
    unint64_t v51 = *((void *)v31 + 3);
    if (v47 >= v51 >> 1)
    {
      v59 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v51 > 1), v47 + 1, 1, v31);
      long long v48 = v92;
      v31 = v59;
    }
    *((void *)v31 + 2) = v47 + 1;
    *(_OWORD *)&v31[16 * v47 + 32] = v48;
    double v32 = 0.0;
LABEL_31:
    v30 += 16;
    if (!--v29) {
      goto LABEL_66;
    }
  }
  double v39 = *((double *)v30 + 1);
  if (v37 < *((double *)&v34 + 1))
  {
    double v33 = *((double *)&v34 + 1) - v37;
LABEL_29:
    if (v33 > v32) {
      double v32 = v33;
    }
    goto LABEL_31;
  }
  long long v90 = *(_OWORD *)v30;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    v31 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v31);
  }
  unint64_t v40 = *((void *)v31 + 2);
  long long v41 = v90;
  if (v40)
  {
    *((void *)v31 + 2) = v40 - 1;
    unint64_t v42 = *((void *)v31 + 3);
    if (v40 > v42 >> 1)
    {
      v57 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v42 > 1), v40, 1, v31);
      long long v41 = v90;
      v31 = v57;
    }
    *((void *)v31 + 2) = v40;
    *(_OWORD *)&v31[16 * v40 + 16] = v41;
    double v32 = v32 + v37 - v39;
    goto LABEL_31;
  }
  __break(1u);
LABEL_91:
  __break(1u);
LABEL_92:
  __break(1u);
LABEL_93:
  __break(1u);
  uint64_t result = swift_release();
  __break(1u);
  return result;
}

uint64_t assignWithTake for FocusStore.Entry(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 40;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 24) + 7;
  uint64_t v7 = (void *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = (void *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v7 = *v8;
  swift_bridgeObjectRelease();
  uint64_t v45 = type metadata accessor for AttributedString();
  uint64_t v9 = *(void *)(v45 - 8);
  uint64_t v10 = *(_DWORD *)(v9 + 80);
  uint64_t v11 = v10 + 8;
  unint64_t v12 = *(_DWORD *)(v9 + 80) & 0xF8 ^ 0xFFFFFFFFFFFFFFF8;
  double v13 = (unsigned __int8 *)(((unint64_t)v7 + v10 + 8) & v12);
  int64_t v14 = (unsigned __int8 *)(((unint64_t)v8 + v10 + 8) & v12);
  if (v13 != v14)
  {
    uint64_t v15 = *(void *)(v45 - 8);
    unint64_t v16 = v10 & 0xFC ^ 0xFFFFFFFFFFFFFFFCLL;
    uint64_t v17 = *(void *)(v9 + 64);
    uint64_t v44 = v17;
    if (((v10 + 16) & v16) + ((v17 + ((v10 + 9) & ~v10)) & 0xFFFFFFFFFFFFFFFCLL) + 9 <= 0x10) {
      unint64_t v18 = 16;
    }
    else {
      unint64_t v18 = ((v10 + 16) & v16) + ((v17 + ((v10 + 9) & ~v10)) & 0xFFFFFFFFFFFFFFFCLL) + 9;
    }
    unsigned int v19 = v13[v18];
    unsigned int v20 = v19 - 2;
    if (v19 >= 2)
    {
      if (v18 <= 3) {
        uint64_t v21 = v18;
      }
      else {
        uint64_t v21 = 4;
      }
      switch(v21)
      {
        case 1:
          int v22 = *v13;
          goto LABEL_14;
        case 2:
          int v22 = *(unsigned __int16 *)v13;
          goto LABEL_14;
        case 3:
          int v22 = *(unsigned __int16 *)v13 | (v13[2] << 16);
          goto LABEL_14;
        case 4:
          int v22 = *(_DWORD *)v13;
LABEL_14:
          int v23 = (v22 | (v20 << (8 * v18))) + 2;
          unsigned int v19 = v22 + 2;
          if (v18 < 4) {
            unsigned int v19 = v23;
          }
          break;
        default:
          break;
      }
    }
    if (v19 == 1)
    {
      swift_release();
      swift_release();
      uint64_t v24 = ~v10;
      (*(void (**)(unint64_t, uint64_t))(v15 + 8))((v10 + ((((v11 + ((unint64_t)(v13 + 15) & 0xFFFFFFFFFFFFFFF8)) & v16) + 7) & 0xFFFFFFFFFFFFFFFCLL) + 5) & ~v10, v45);
    }
    else
    {
      uint64_t v24 = ~v10;
      swift_weakDestroy();
      swift_weakDestroy();
    }
    unsigned int v25 = v14[v18];
    unsigned int v26 = v25 - 2;
    if (v25 >= 2)
    {
      if (v18 <= 3) {
        uint64_t v27 = v18;
      }
      else {
        uint64_t v27 = 4;
      }
      switch(v27)
      {
        case 1:
          int v28 = *v14;
          goto LABEL_28;
        case 2:
          int v28 = *(unsigned __int16 *)v14;
          goto LABEL_28;
        case 3:
          int v28 = *(unsigned __int16 *)v14 | (v14[2] << 16);
          goto LABEL_28;
        case 4:
          int v28 = *(_DWORD *)v14;
LABEL_28:
          int v29 = (v28 | (v26 << (8 * v18))) + 2;
          unsigned int v25 = v28 + 2;
          if (v18 < 4) {
            unsigned int v25 = v29;
          }
          break;
        default:
          break;
      }
    }
    if (v25 == 1)
    {
      *(void *)double v13 = *(void *)v14;
      v30 = (void *)((unint64_t)(v13 + 15) & 0xFFFFFFFFFFFFFFF8);
      v31 = (void *)((unint64_t)(v14 + 15) & 0xFFFFFFFFFFFFFFF8);
      void *v30 = *v31;
      unint64_t v32 = ((unint64_t)v30 + v11) & v16;
      unint64_t v33 = ((unint64_t)v31 + v11) & v16;
      *(unsigned char *)unint64_t v32 = *(unsigned char *)v33;
      *(unsigned char *)(v32 | 1) = *(unsigned char *)(v33 | 1);
      *(unsigned char *)(v32 | 2) = *(unsigned char *)(v33 | 2);
      *(unsigned char *)(v32 | 3) = *(unsigned char *)(v33 | 3);
      unint64_t v34 = (v32 + 7) & 0xFFFFFFFFFFFFFFFCLL;
      unint64_t v35 = (v33 + 7) & 0xFFFFFFFFFFFFFFFCLL;
      int v36 = *(_DWORD *)v35;
      *(unsigned char *)(v34 + 4) = *(unsigned char *)(v35 + 4);
      *(_DWORD *)unint64_t v34 = v36;
      uint64_t v37 = (v10 + 5 + v34) & v24;
      uint64_t v38 = (v10 + 5 + v35) & v24;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v15 + 32))(v37, v38, v45);
      *(unsigned char *)(v44 + v37) = *(unsigned char *)(v44 + v38);
      unint64_t v39 = (v44 + v37) & 0xFFFFFFFFFFFFFFFCLL;
      unint64_t v40 = (v44 + v38) & 0xFFFFFFFFFFFFFFFCLL;
      int v41 = *(_DWORD *)(v40 + 4);
      *(unsigned char *)(v39 + 8) = *(unsigned char *)(v40 + 8);
      *(_DWORD *)(v39 + 4) = v41;
      char v42 = 1;
    }
    else
    {
      swift_weakTakeInit();
      swift_weakTakeInit();
      char v42 = 0;
    }
    v13[v18] = v42;
  }
  return a1;
}

uint64_t initializeWithCopy for BoundInputsView(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  v3 = *(void **)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v3;
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  id v4 = v3;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  return a1;
}

void storeEnumTagSinglePayload for _AligningContentProvider(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0xFE) {
    unsigned int v8 = 254;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  size_t v10 = v9 + 3;
  BOOL v11 = a3 >= v8;
  unsigned int v12 = a3 - v8;
  if (v12 != 0 && v11)
  {
    if (v10 <= 3)
    {
      unsigned int v16 = ((v12 + ~(-1 << (8 * v10))) >> (8 * v10)) + 1;
      if (HIWORD(v16))
      {
        int v13 = 4;
      }
      else if (v16 >= 0x100)
      {
        int v13 = 2;
      }
      else
      {
        int v13 = v16 > 1;
      }
    }
    else
    {
      int v13 = 1;
    }
  }
  else
  {
    int v13 = 0;
  }
  if (v8 >= a2)
  {
    switch(v13)
    {
      case 1:
        a1[v10] = 0;
        if (a2) {
          goto LABEL_24;
        }
        break;
      case 2:
        *(_WORD *)&a1[v10] = 0;
        if (a2) {
          goto LABEL_24;
        }
        break;
      case 3:
LABEL_39:
        __break(1u);
        break;
      case 4:
        *(_DWORD *)&a1[v10] = 0;
        goto LABEL_23;
      default:
LABEL_23:
        if (a2)
        {
LABEL_24:
          if (v7 < 0xFE)
          {
            a1[v9 + 2] = a2 + 1;
          }
          else
          {
            unint64_t v18 = *(void (**)(void))(v6 + 56);
            v18();
          }
        }
        break;
    }
  }
  else
  {
    unsigned int v14 = ~v8 + a2;
    if (v10 < 4)
    {
      int v15 = (v14 >> (8 * v10)) + 1;
      if (v9 != -3)
      {
        int v17 = v14 & ~(-1 << (8 * v10));
        bzero(a1, v10);
        if (v10 == 3)
        {
          *(_WORD *)a1 = v17;
          a1[2] = BYTE2(v17);
        }
        else if (v10 == 2)
        {
          *(_WORD *)a1 = v17;
        }
        else
        {
          *a1 = v17;
        }
      }
    }
    else
    {
      bzero(a1, v9 + 3);
      *(_DWORD *)a1 = v14;
      int v15 = 1;
    }
    switch(v13)
    {
      case 1:
        a1[v10] = v15;
        break;
      case 2:
        *(_WORD *)&a1[v10] = v15;
        break;
      case 3:
        goto LABEL_39;
      case 4:
        *(_DWORD *)&a1[v10] = v15;
        break;
      default:
        return;
    }
  }
}

uint64_t ButtonStyleAdaptorMenuStyle.makeBody(configuration:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v29 = a3;
  type metadata accessor for UIKitMenuButton<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content>();
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v27 = *(void *)(a2 + 16);
  uint64_t v25 = v7;
  uint64_t v26 = v6;
  type metadata accessor for UIKitButtonStyleModifier();
  uint64_t v8 = type metadata accessor for ModifiedContent();
  uint64_t v28 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  size_t v10 = (char *)v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v11);
  int v13 = (char *)v24 - v12;
  uint64_t v14 = *a1;
  uint64_t v15 = a1[1];
  uint64_t v17 = a1[2];
  uint64_t v16 = a1[3];
  uint64_t v18 = v3 + *(int *)(a2 + 36);
  uint64_t v19 = *(void *)v18;
  uint64_t v20 = *(unsigned __int8 *)(v18 + 8);
  outlined copy of AppIntentExecutor?(v14);
  outlined copy of AppIntentExecutor?(v17);
  outlined copy of Environment<Bool>.Content(v19, v20);
  char v21 = specialized Environment.wrappedValue.getter(v19, v20);
  outlined consume of Environment<Bool?>.Content(v19, v20);
  outlined copy of AppIntentExecutor?(v14);
  outlined copy of AppIntentExecutor?(v17);
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v14);
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v17);
  uint64_t v32 = v14;
  uint64_t v33 = v15;
  __int16 v34 = 0;
  char v35 = v21;
  char v36 = 2;
  uint64_t v37 = v17;
  uint64_t v38 = v16;
  View.uikitButtonStyle<A>(_:)(v24[1], v25, v27, (uint64_t)&protocol witness table for UIKitMenuButton<A, B>);
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v14);
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v17);
  v30 = &protocol witness table for UIKitMenuButton<A, B>;
  v31 = &protocol witness table for UIKitButtonStyleModifier<A>;
  swift_getWitnessTable();
  static ViewBuilder.buildExpression<A>(_:)(v10);
  int v22 = *(void (**)(char *, uint64_t))(v28 + 8);
  v22(v10, v8);
  static ViewBuilder.buildExpression<A>(_:)(v13);
  return ((uint64_t (*)(char *, uint64_t))v22)(v13, v8);
}

uint64_t View.uikitButtonStyle<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = *(void *)(a3 - 8);
  MEMORY[0x1F4188790](a1);
  size_t v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for UIKitButtonStyleModifier();
  uint64_t v12 = *(void *)(v11 - 8);
  double v13 = MEMORY[0x1F4188790](v11);
  uint64_t v15 = (char *)&v17 - v14;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v8 + 16))(v10, a1, a3, v13);
  (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v15, v10, a3);
  MEMORY[0x18C113660](v15, a2, v11, a4);
  return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v15, v11);
}

uint64_t specialized UIHostingController.resolveRequiredBridges(in:allowedActions:)(uint64_t a1, uint64_t a2, unint64_t a3)
{
  id v4 = v3;
  MEMORY[0x18C113CA0]();
  uint64_t v8 = a2;
  uint64_t v9 = a1;
  if (a1 == 1)
  {
    swift_retain();
    GraphHost.environment.getter();
    swift_release();
    uint64_t v9 = v49[0];
    uint64_t v8 = v49[1];
  }
  if (v9)
  {
    if ((a3 & 3) != 0)
    {
      char v48 = a3;
      uint64_t v10 = swift_allocObject();
      uint64_t v43 = direct field offset for UIHostingController.requiredBridges;
      *(void *)(v10 + 16) = *(void *)&v3[direct field offset for UIHostingController.requiredBridges];
      _s7SwiftUI14_UIHostingViewCyAA03AnyD0VGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.ManagedBridgesKey>, (uint64_t)&type metadata for EnvironmentValues.ManagedBridgesKey, (uint64_t)&protocol witness table for EnvironmentValues.ManagedBridgesKey, MEMORY[0x1E4F40930]);
      outlined copy of EnvironmentValues?(a1);
      lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.ManagedBridgesKey> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.ManagedBridgesKey> and conformance EnvironmentPropertyKey<A>, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.ManagedBridgesKey>, (uint64_t)&type metadata for EnvironmentValues.ManagedBridgesKey, (uint64_t)&protocol witness table for EnvironmentValues.ManagedBridgesKey);
      swift_retain_n();
      if (v8)
      {
        swift_retain_n();
        PropertyList.Tracker.value<A>(_:for:)();
        swift_release_n();
      }
      else
      {
        PropertyList.subscript.getter();
      }
      swift_release_n();
      char v12 = v49[0];
      id v13 = objc_msgSend(v3, sel_navigationController);
      char v14 = a3;
      if (!v13)
      {
        uint64_t v15 = (uint64_t)&v4[direct field offset for UIHostingController.overrides];
        swift_beginAccess();
        outlined init with copy of HostingControllerOverrides(v15, (uint64_t)v49);
        id v13 = (id)MEMORY[0x18C119DF0](v50);
        outlined destroy of HostingControllerOverrides((uint64_t)v49);
      }
      id v47 = objc_msgSend(v4, sel_tabBarController);
      uint64_t v16 = (a3 >> 1) & 1;
      uint64_t v44 = v8;
      double v46 = v13;
      if (v13)
      {
        if ((v12 & 4) != 0) {
          char v17 = 0;
        }
        else {
          char v17 = objc_msgSend(v13, sel__supportsDataDrivenNavigation) ^ 1;
        }
        update #1 <A>(bridge:isNeeded:) in UIHostingController.resolveRequiredBridges(in:allowedActions:)(4, v17, a3 & 1, v10, (a3 & 2) != 0);
      }
      else
      {
        uint64_t v18 = *(void *)&v4[direct field offset for UIHostingController.navigationBridge];
        if (v18)
        {
          uint64_t v19 = MEMORY[0x18C119DF0](v18 + 24);
          if (!v19) {
            goto LABEL_24;
          }
          uint64_t v20 = (void *)v19;
          uint64_t v21 = v19 + direct field offset for UIHostingController.overrides;
          swift_beginAccess();
          outlined init with copy of HostingControllerOverrides(v21, (uint64_t)v49);
          swift_retain();

          int v22 = (void *)MEMORY[0x18C119DF0](v50);
          outlined destroy of HostingControllerOverrides((uint64_t)v49);
          swift_release();
          if (v22)
          {

            char v23 = 1;
            char v14 = v48;
          }
          else
          {
LABEL_24:
            char v23 = 0;
            char v14 = v48;
          }
        }
        else
        {
          char v23 = 0;
        }
        update #1 <A>(bridge:isNeeded:) in UIHostingController.resolveRequiredBridges(in:allowedActions:)(4, v23, v14 & 1, v10, v16);
        if (!v47)
        {
          uint64_t v24 = *(void **)&v4[direct field offset for UIHostingController.host];
          _s7SwiftUI14_UIHostingViewCyAA03AnyD0VGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for _UIHostingView<AnyView>, MEMORY[0x1E4F41618], MEMORY[0x1E4F41610], (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for _UIHostingView);
          lazy protocol witness table accessor for type _UIHostingView<AnyView> and conformance _UIHostingView<A>((unint64_t *)&lazy protocol witness table cache variable for type _UIHostingView<AnyView> and conformance _UIHostingView<A>, (unint64_t *)&lazy cache variable for type metadata for _UIHostingView<AnyView>, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for _UIHostingView);
          id v25 = v24;
          char v14 = v48;
          char v26 = ViewRendererHost.isRootHost.getter();

          if ((v26 & 1) == 0)
          {
            char v27 = 0;
LABEL_29:
            update #1 <A>(bridge:isNeeded:) in UIHostingController.resolveRequiredBridges(in:allowedActions:)(1, v27, v14 & 1, v10, v16);
            static Semantics.v3.getter();
            char v28 = isLinkedOnOrAfter(_:)();
            char v45 = v12;
            update #1 <A>(bridge:isNeeded:) in UIHostingController.resolveRequiredBridges(in:allowedActions:)(16, v28 & ((v12 & 0x10) == 0), v14 & 1, v10, v16);
            uint64_t v29 = direct field offset for UIHostingController.host;
            v30 = *(void **)&v4[direct field offset for UIHostingController.host];
            _s7SwiftUI14_UIHostingViewCyAA03AnyD0VGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for _UIHostingView<AnyView>, MEMORY[0x1E4F41618], MEMORY[0x1E4F41610], (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for _UIHostingView);
            lazy protocol witness table accessor for type _UIHostingView<AnyView> and conformance _UIHostingView<A>((unint64_t *)&lazy protocol witness table cache variable for type _UIHostingView<AnyView> and conformance _UIHostingView<A>, (unint64_t *)&lazy cache variable for type metadata for _UIHostingView<AnyView>, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for _UIHostingView);
            id v31 = v30;
            char v32 = ViewRendererHost.isRootHost.getter();

            if ((v32 & 1) != 0
              && (id v33 = objc_msgSend(*(id *)&v4[v29], sel_window)) != 0)
            {

              char v34 = 1;
            }
            else
            {
              char v34 = 0;
            }
            update #1 <A>(bridge:isNeeded:) in UIHostingController.resolveRequiredBridges(in:allowedActions:)(2, v34, v48 & 1, v10, v16);
            id v35 = *(id *)&v4[v29];
            char v36 = ViewRendererHost.isRootHost.getter();

            if ((v36 & 1) != 0
              && (id v37 = objc_msgSend(*(id *)&v4[v29], sel_window)) != 0)
            {

              char v38 = 1;
            }
            else
            {
              char v38 = 0;
            }
            update #1 <A>(bridge:isNeeded:) in UIHostingController.resolveRequiredBridges(in:allowedActions:)(32, v38, v48 & 1, v10, v16);
            if (v45 < 0)
            {
              char v40 = 0;
            }
            else
            {
              uint64_t ObjectType = swift_getObjectType();
              char v40 = (*(uint64_t (**)(void))(ObjectType + 1200))() ^ 1;
            }
            update #1 <A>(bridge:isNeeded:) in UIHostingController.resolveRequiredBridges(in:allowedActions:)(128, v40 & 1, v48 & 1, v10, v16);
            swift_beginAccess();
            uint64_t v41 = *(void *)(v10 + 16);
            uint64_t v42 = *(void *)&v4[v43];
            *(void *)&v4[v43] = v41;
            specialized UIHostingController.didChangeRequiredBridges(from:to:)(v42, v41);
            swift_release();

            specialized UIHostingController.resolveBarAppearanceBehavior(in:)(v9, v44);
            swift_release();
            swift_release();
            return static Update.end()();
          }
        }
      }
      char v27 = (v12 & 1) == 0;
      goto LABEL_29;
    }
    outlined copy of EnvironmentValues?(a1);
    specialized UIHostingController.resolveBarAppearanceBehavior(in:)(v9, v8);
    swift_release();
  }
  else
  {
    outlined copy of EnvironmentValues?(a1);
  }
  swift_release();

  return static Update.end()();
}

void specialized UIHostingController.resolveBarAppearanceBehavior(in:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  if (a2)
  {
    _s7SwiftUI14_UIHostingViewCyAA03AnyD0VGMaTm_0(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.ManagedBarAppearancesKey>, (uint64_t)&type metadata for EnvironmentValues.ManagedBarAppearancesKey, (uint64_t)&protocol witness table for EnvironmentValues.ManagedBarAppearancesKey, MEMORY[0x1E4F40930]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.ManagedBridgesKey> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.ManagedBarAppearancesKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.ManagedBarAppearancesKey>, (uint64_t)&type metadata for EnvironmentValues.ManagedBarAppearancesKey, (uint64_t)&protocol witness table for EnvironmentValues.ManagedBarAppearancesKey);
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    _s7SwiftUI14_UIHostingViewCyAA03AnyD0VGMaTm_0(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.ManagedBarAppearancesKey>, (uint64_t)&type metadata for EnvironmentValues.ManagedBarAppearancesKey, (uint64_t)&protocol witness table for EnvironmentValues.ManagedBarAppearancesKey, MEMORY[0x1E4F40930]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.ManagedBridgesKey> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.ManagedBarAppearancesKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.ManagedBarAppearancesKey>, (uint64_t)&type metadata for EnvironmentValues.ManagedBarAppearancesKey, (uint64_t)&protocol witness table for EnvironmentValues.ManagedBarAppearancesKey);
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  uint64_t v4 = *(void *)(v2 + direct field offset for UIHostingController.allowedBehaviors);
  uint64_t v5 = direct field offset for UIHostingController.barAppearanceBridge;
  uint64_t v6 = *(void **)(v2 + direct field offset for UIHostingController.barAppearanceBridge);
  if (*(void *)(v19 + 16))
  {
    if (v6) {
      goto LABEL_13;
    }
    goto LABEL_11;
  }
  if (v6)
  {
    if ((v4 & 1) == 0)
    {
      id v7 = v6;
      swift_retain();
      GraphHost.removePreference<A>(_:)();
      GraphHost.removePreference<A>(_:)();

      swift_release();
      uint64_t v8 = *(void **)(v2 + v5);
      *(void *)(v2 + v5) = 0;
    }
    goto LABEL_13;
  }
  if (v4)
  {
LABEL_11:
    id v9 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for BarAppearanceBridge()), sel_init);
    uint64_t v10 = *(void **)(v2 + v5);
    *(void *)(v2 + v5) = v9;

    uint64_t v11 = *(void **)(v2 + v5);
    if (!v11)
    {
      __break(1u);
      return;
    }
    id v12 = v11;
    swift_retain();
    BarAppearanceBridge.addPreferences(to:)();

    swift_release();
  }
LABEL_13:
  id v13 = *(void **)(v3 + v5);
  if (v13)
  {
    uint64_t v14 = *(void *)(*(void *)(*(void *)(v3 + direct field offset for UIHostingController.host)
                                + *(void *)((*MEMORY[0x1E4FBC8C8] & **(void **)(v3
                                                                                  + direct field offset for UIHostingController.host))
                                            + 0x68))
                    + 64);
    uint64_t v15 = v13;
    swift_retain();
    BarAppearanceBridge.updateAllowedBars(_:viewGraph:)(v19, v14);
    swift_release();
    uint64_t v16 = OBJC_IVAR____TtC7SwiftUI19BarAppearanceBridge_platformStorage;
    if (v4)
    {
      v15[OBJC_IVAR____TtC7SwiftUI19BarAppearanceBridge_platformStorage] = *(void *)(v19 + 16) != 0;
      uint64_t v18 = *(void *)(v19 + 16);
      swift_bridgeObjectRelease();
      BOOL v17 = v18 == 0;
    }
    else
    {
      v15[OBJC_IVAR____TtC7SwiftUI19BarAppearanceBridge_platformStorage] = 1;
      swift_bridgeObjectRelease();
      BOOL v17 = 0;
    }
    v15[v16 + 16] = v17;
  }
  else
  {
    swift_bridgeObjectRelease();
  }
}

uint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.ManagedBridgesKey> and conformance EnvironmentPropertyKey<A>(unint64_t *a1, unint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = *a1;
  if (!result)
  {
    _s7SwiftUI14_UIHostingViewCyAA03AnyD0VGMaTm_0(255, a2, a3, a4, MEMORY[0x1E4F40930]);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void specialized UIHostingController.didChangeRequiredBridges(from:to:)(uint64_t a1, uint64_t a2)
{
  if (a2 == a1) {
    return;
  }
  uint64_t v3 = v2;
  char v4 = a1;
  MEMORY[0x18C113CA0]();
  uint64_t v5 = *(void *)&v3[direct field offset for UIHostingController.requiredBridges];
  char v6 = (v5 ^ v4) & v4;
  char v7 = (v5 ^ v4) & v5;
  if ((v6 & 2) == 0)
  {
    if (((v5 ^ v4) & v5 & 2) != 0)
    {
      id v8 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for KeyboardShortcutBridge()), sel_init);
      id v9 = *(void **)&v3[direct field offset for UIHostingController.keyboardShortcutBridge];
      *(void *)&v3[direct field offset for UIHostingController.keyboardShortcutBridge] = v8;
    }
    if ((v6 & 4) == 0) {
      goto LABEL_6;
    }
LABEL_15:
    uint64_t v20 = direct field offset for UIHostingController.navigationBridge;
    if (*(void *)&v3[direct field offset for UIHostingController.navigationBridge])
    {
      swift_retain();
      swift_retain();
      GraphHost.removePreference<A>(_:)();
      swift_release();
      swift_release();
    }
    *(void *)&v3[v20] = 0;
    goto LABEL_18;
  }
  uint64_t v13 = direct field offset for UIHostingController.keyboardShortcutBridge;
  uint64_t v14 = *(void **)&v3[direct field offset for UIHostingController.keyboardShortcutBridge];
  if (v14)
  {
    uint64_t v15 = v14;
    swift_retain();
    GraphHost.removePreference<A>(_:)();
    v15[OBJC_IVAR____TtC7SwiftUI22KeyboardShortcutBridge_isObservingPreferences] = 0;

    swift_release();
    uint64_t v16 = *(void **)&v3[v13];
    if (v16)
    {
      _s7SwiftUI14_UIHostingViewCyAA03AnyD0VGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for UIHostingController<AnyView>, MEMORY[0x1E4F41618], MEMORY[0x1E4F41610], (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for UIHostingController);
      v46[3] = v17;
      v46[4] = &protocol witness table for UIHostingController<A>;
      v46[0] = v3;
      id v18 = v16;
      uint64_t v19 = v3;
      KeyboardShortcutBridge.flushKeyCommands(_:)((uint64_t)v46);

      outlined destroy of KeyboardShortcutSource?((uint64_t)v46);
      uint64_t v14 = *(void **)&v3[v13];
    }
    else
    {
      uint64_t v14 = 0;
    }
  }
  *(void *)&v3[v13] = 0;

  if ((v6 & 4) != 0) {
    goto LABEL_15;
  }
LABEL_6:
  if ((v7 & 4) == 0) {
    goto LABEL_19;
  }
  _s7SwiftUI14_UIHostingViewCyAA03AnyD0VGMaTm_0(0, &lazy cache variable for type metadata for NavigationBridge_PhoneTV<AnyView>, MEMORY[0x1E4F41618], MEMORY[0x1E4F41610], (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for NavigationBridge_PhoneTV);
  uint64_t v10 = swift_allocObject();
  uint64_t v11 = specialized UIKitNavigationBridge.init()(v10);
  swift_release();
  uint64_t v12 = direct field offset for UIHostingController.navigationBridge;
  *(void *)&v3[direct field offset for UIHostingController.navigationBridge] = v11;
  swift_release();
  if (!*(void *)&v3[v12])
  {
    __break(1u);
    goto LABEL_54;
  }
  swift_unknownObjectWeakAssign();
  if (!*(void *)&v3[v12])
  {
LABEL_54:
    __break(1u);
    goto LABEL_55;
  }
  swift_retain();
  swift_retain();
  GraphHost.addPreference<A>(_:)();
  swift_release();
LABEL_18:
  swift_release();
LABEL_19:
  if ((v6 & 1) == 0)
  {
    if ((v7 & 1) == 0) {
      goto LABEL_23;
    }
    _s7SwiftUI14_UIHostingViewCyAA03AnyD0VGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for ToolbarBridge<UIKitToolbarStrategy>, (uint64_t)&type metadata for UIKitToolbarStrategy, (uint64_t)&protocol witness table for UIKitToolbarStrategy, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for ToolbarBridge);
    id v22 = objc_msgSend(objc_allocWithZone(v21), sel_init);
    uint64_t v23 = direct field offset for UIHostingController.toolbarBridge;
    uint64_t v24 = *(void **)&v3[direct field offset for UIHostingController.toolbarBridge];
    *(void *)&v3[direct field offset for UIHostingController.toolbarBridge] = v22;

    id v25 = *(void **)&v3[v23];
    if (v25)
    {
      id v26 = v25;
      swift_retain();
      GraphHost.addPreference<A>(_:)();
      GraphHost.addPreference<A>(_:)();
      GraphHost.addPreference<A>(_:)();
      GraphHost.addPreference<A>(_:)();

      swift_release();
LABEL_23:
      if ((v6 & 0x10) == 0) {
        goto LABEL_24;
      }
LABEL_31:
      uint64_t v33 = direct field offset for UIHostingController.contentScrollViewBridge;
      if (*(void *)&v3[direct field offset for UIHostingController.contentScrollViewBridge])
      {
        swift_retain();
        swift_retain();
        GraphHost.removePreference<A>(_:)();
        swift_release();
        swift_release();
      }
      *(void *)&v3[v33] = 0;
      goto LABEL_34;
    }
LABEL_55:
    __break(1u);
LABEL_56:
    __break(1u);
    goto LABEL_57;
  }
  uint64_t v30 = direct field offset for UIHostingController.toolbarBridge;
  id v31 = *(void **)&v3[direct field offset for UIHostingController.toolbarBridge];
  if (v31)
  {
    id v32 = v31;
    swift_retain();
    GraphHost.removePreference<A>(_:)();
    GraphHost.removePreference<A>(_:)();
    GraphHost.removePreference<A>(_:)();
    GraphHost.removePreference<A>(_:)();

    swift_release();
    id v31 = *(void **)&v3[v30];
  }
  *(void *)&v3[v30] = 0;

  if ((v6 & 0x10) != 0) {
    goto LABEL_31;
  }
LABEL_24:
  if ((v7 & 0x10) == 0) {
    goto LABEL_35;
  }
  type metadata accessor for UIKitContentScrollViewBridge();
  uint64_t v27 = swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t v28 = MEMORY[0x1E4FBC868];
  *(_DWORD *)(v27 + 24) = -1;
  *(void *)(v27 + 32) = v28;
  *(void *)(v27 + 40) = 0;
  *(void *)(v27 + 48) = 0x3FF0000000000000;
  uint64_t v29 = direct field offset for UIHostingController.contentScrollViewBridge;
  *(void *)&v3[direct field offset for UIHostingController.contentScrollViewBridge] = v27;
  swift_release();
  if (!*(void *)&v3[v29]) {
    goto LABEL_56;
  }
  swift_unknownObjectWeakAssign();
  if (!*(void *)&v3[v29])
  {
LABEL_57:
    __break(1u);
    goto LABEL_58;
  }
  swift_retain();
  swift_retain();
  GraphHost.addPreference<A>(_:)();
  swift_release();
LABEL_34:
  swift_release();
LABEL_35:
  if ((v6 & 0x20) != 0)
  {
    uint64_t v36 = direct field offset for UIHostingController.alwaysOnBridge;
    if (*(void *)&v3[direct field offset for UIHostingController.alwaysOnBridge])
    {
      swift_retain();
      swift_retain();
      GraphHost.removePreference<A>(_:)();
      swift_release();
      swift_release();
    }
    *(void *)&v3[v36] = 0;
    goto LABEL_43;
  }
  if ((v7 & 0x20) != 0)
  {
    _s7SwiftUI14_UIHostingViewCyAA03AnyD0VGMaTm_0(0, &lazy cache variable for type metadata for AlwaysOnBridge<AnyView>, MEMORY[0x1E4F41618], MEMORY[0x1E4F41610], (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for AlwaysOnBridge);
    uint64_t v34 = swift_allocObject();
    swift_unknownObjectWeakInit();
    *(_DWORD *)(v34 + 44) = 0;
    *(void *)(v34 + 24) = 0;
    *(void *)(v34 + 32) = 0;
    *(_WORD *)(v34 + 40) = 0;
    *(void *)(v34 + 48) = MEMORY[0x1E4FBC860];
    uint64_t v35 = direct field offset for UIHostingController.alwaysOnBridge;
    *(void *)&v3[direct field offset for UIHostingController.alwaysOnBridge] = v34;
    swift_release();
    if (*(void *)&v3[v35])
    {
      swift_unknownObjectWeakAssign();
      if (*(void *)&v3[v35])
      {
        swift_retain();
        swift_retain();
        GraphHost.addPreference<A>(_:)();
        swift_release();
LABEL_43:
        swift_release();
        goto LABEL_44;
      }
LABEL_59:
      __break(1u);
      return;
    }
LABEL_58:
    __break(1u);
    goto LABEL_59;
  }
LABEL_44:
  if (v6 < 0)
  {
    uint64_t v43 = direct field offset for UIHostingController.inspectorBridgeV5;
    uint64_t v44 = *(void **)&v3[direct field offset for UIHostingController.inspectorBridgeV5];
    if (v44)
    {
      id v45 = v44;
      swift_retain();
      GraphHost.removePreference<A>(_:)();
      GraphHost.removePreference<A>(_:)();

      swift_release();
      uint64_t v44 = *(void **)&v3[v43];
    }
    *(void *)&v3[v43] = 0;
  }
  else if (v7 < 0)
  {
    _s7SwiftUI14_UIHostingViewCyAA03AnyD0VGMaTm_0(0, &lazy cache variable for type metadata for UIKitInspectorBridgeV5<AnyView>, MEMORY[0x1E4F41618], MEMORY[0x1E4F41610], (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for UIKitInspectorBridgeV5);
    id v38 = objc_msgSend(objc_allocWithZone(v37), sel_init);
    uint64_t v39 = direct field offset for UIHostingController.inspectorBridgeV5;
    char v40 = *(void **)&v3[direct field offset for UIHostingController.inspectorBridgeV5];
    *(void *)&v3[direct field offset for UIHostingController.inspectorBridgeV5] = v38;

    uint64_t v41 = *(void **)&v3[v39];
    if (v41)
    {
      swift_unknownObjectWeakAssign();
      id v42 = v41;
      swift_retain();
      GraphHost.addPreference<A>(_:)();
      GraphHost.addPreference<A>(_:)();

      swift_release();
    }
  }
  static Update.end()();
}

id closure #1 in UICollectionViewListCoordinatorBase.trailingSwipeActionsConfiguration(indexPath:environment:)@<X0>(long long *a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v29 = a4;
  uint64_t v27 = *MEMORY[0x1E4FBC8C8] & *a2;
  uint64_t v6 = v27;
  uint64_t v7 = type metadata accessor for IndexPath();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(void *)(v8 + 64);
  MEMORY[0x1F4188790](v7);
  uint64_t v10 = (char *)&v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  long long v11 = a1[5];
  long long v35 = a1[4];
  long long v36 = v11;
  long long v37 = a1[6];
  long long v12 = a1[1];
  long long v31 = *a1;
  long long v32 = v12;
  long long v13 = a1[3];
  long long v33 = a1[2];
  long long v34 = v13;
  uint64_t v28 = type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UISwipeActionsConfiguration);
  long long v14 = a1[5];
  v30[4] = a1[4];
  v30[5] = v14;
  v30[6] = a1[6];
  long long v15 = a1[1];
  v30[0] = *a1;
  v30[1] = v15;
  long long v16 = a1[2];
  v30[3] = a1[3];
  v30[2] = v16;
  uint64_t v17 = swift_allocObject();
  swift_unknownObjectWeakInit();
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, a3, v7);
  unint64_t v18 = (*(unsigned __int8 *)(v8 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  unint64_t v19 = (v9 + v18 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v20 = swift_allocObject();
  *(void *)(v20 + 16) = *(void *)(v6 + 96);
  *(_OWORD *)(v20 + 24) = *(_OWORD *)(v27 + 104);
  *(void *)(v20 + 40) = *(void *)(v6 + 120);
  *(void *)(v20 + 48) = v17;
  (*(void (**)(unint64_t, char *, uint64_t))(v8 + 32))(v20 + v18, v10, v7);
  Class v21 = (_OWORD *)(v20 + v19);
  long long v22 = v36;
  v21[4] = v35;
  v21[5] = v22;
  v21[6] = v37;
  long long v23 = v32;
  *Class v21 = v31;
  v21[1] = v23;
  long long v24 = v34;
  v21[2] = v33;
  v21[3] = v24;
  outlined retain of SwipeActions.Configuration(&v31);
  outlined retain of SwipeActions.Configuration(&v31);
  id result = UISwipeActionsConfiguration.init(configuration:performDestructiveAction:)((unsigned __int8 *)v30, (uint64_t)partial apply for closure #1 in closure #1 in UICollectionViewListCoordinatorBase.trailingSwipeActionsConfiguration(indexPath:environment:), v20);
  *uint64_t v29 = result;
  return result;
}

void TaskGesturePhase.Handler.invalidate()()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 88);
  uint64_t v22 = *(void *)(*v0 + 80);
  uint64_t v23 = v2;
  swift_getAssociatedTypeWitness();
  type metadata accessor for TaskPhase();
  uint64_t v3 = type metadata accessor for AsyncStream.Continuation();
  uint64_t v4 = type metadata accessor for Optional();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)&v21 - v6;
  uint64_t v8 = *(void *)(v3 - 8);
  uint64_t v9 = *(void *)(v8 + 64);
  MEMORY[0x1F4188790](v10);
  long long v11 = (char *)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v12);
  long long v14 = (char *)&v21 - v13;
  uint64_t v15 = *(void *)(v1 + 112);
  if ((*((unsigned char *)v0 + v15) & 1) == 0)
  {
    *((unsigned char *)v0 + v15) = 1;
    uint64_t v16 = (uint64_t)v0 + *(void *)(*v0 + 96);
    swift_beginAccess();
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v16, v4);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v7, 1, v3) == 1)
    {
      (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    }
    else
    {
      uint64_t v17 = *(void (**)(char *, char *, uint64_t))(v8 + 32);
      v17(v14, v7, v3);
      (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v11, v14, v3);
      unint64_t v18 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
      uint64_t v19 = swift_allocObject();
      uint64_t v20 = v23;
      *(void *)(v19 + 16) = v22;
      *(void *)(v19 + 24) = v20;
      v17((char *)(v19 + v18), v11, v3);
      static Update.enqueueAction(_:)();
      swift_release();
      (*(void (**)(char *, uint64_t))(v8 + 8))(v14, v3);
    }
  }
}

uint64_t getEnumTagSinglePayload for Link(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(unsigned int *)(v6 + 84);
  uint64_t v8 = type metadata accessor for URL();
  uint64_t v9 = *(void *)(v8 - 8);
  unsigned int v10 = *(_DWORD *)(v9 + 84);
  uint64_t v11 = *(unsigned __int8 *)(v9 + 80);
  if (v10 <= 0xFE) {
    unsigned int v12 = 254;
  }
  else {
    unsigned int v12 = *(_DWORD *)(v9 + 84);
  }
  if (v12 <= v7) {
    unsigned int v13 = v7;
  }
  else {
    unsigned int v13 = v12;
  }
  if (!a2) {
    return 0;
  }
  uint64_t v14 = v11 | 7;
  uint64_t v15 = (v11 | 7) + *(void *)(v6 + 64);
  if (a2 <= v13) {
    goto LABEL_28;
  }
  uint64_t v16 = *(void *)(*(void *)(v8 - 8) + 64) + ((v11 + 75) & ~v11) + (v15 & ~v14) + 1;
  char v17 = 8 * v16;
  if (v16 <= 3)
  {
    unsigned int v20 = ((a2 - v13 + ~(-1 << v17)) >> v17) + 1;
    if (HIWORD(v20))
    {
      int v18 = *(_DWORD *)((char *)a1 + v16);
      if (!v18) {
        goto LABEL_28;
      }
      goto LABEL_18;
    }
    if (v20 > 0xFF)
    {
      int v18 = *(unsigned __int16 *)((char *)a1 + v16);
      if (!*(unsigned __int16 *)((char *)a1 + v16)) {
        goto LABEL_28;
      }
      goto LABEL_18;
    }
    if (v20 < 2)
    {
LABEL_28:
      if (v7 >= v12)
      {
        id v25 = *(uint64_t (**)(unsigned __int16 *, uint64_t, uint64_t))(v6 + 48);
        return v25(a1, v7, v5);
      }
      else if (v10 > 0xFE)
      {
        uint64_t v26 = *(uint64_t (**)(unint64_t))(v9 + 48);
        return v26((v11 + (((((unint64_t)a1 + v15) & ~v14) + 42) & 0xFFFFFFFFFFFFFFF8) + 35) & ~v11);
      }
      else
      {
        unsigned int v24 = *(unsigned __int8 *)((((unint64_t)a1 + v15) & ~v14) + 0x22);
        if (v24 > 1) {
          return (v24 ^ 0xFF) + 1;
        }
        else {
          return 0;
        }
      }
    }
  }
  int v18 = *((unsigned __int8 *)a1 + v16);
  if (!*((unsigned char *)a1 + v16)) {
    goto LABEL_28;
  }
LABEL_18:
  int v21 = (v18 - 1) << v17;
  if (v16 > 3) {
    int v21 = 0;
  }
  if (v16)
  {
    if (v16 <= 3) {
      int v22 = v16;
    }
    else {
      int v22 = 4;
    }
    switch(v22)
    {
      case 2:
        int v23 = *a1;
        break;
      case 3:
        int v23 = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        int v23 = *(_DWORD *)a1;
        break;
      default:
        int v23 = *(unsigned __int8 *)a1;
        break;
    }
  }
  else
  {
    int v23 = 0;
  }
  return v13 + (v23 | v21) + 1;
}

uint64_t View.fileExporter<A>(isPresented:item:contentTypes:defaultFilename:onCompletion:onCancellation:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, long long a10, long long a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v34 = a5;
  uint64_t v32 = a6;
  int v33 = a3;
  long long v30 = a11;
  long long v31 = a10;
  uint64_t v20 = type metadata accessor for Optional();
  double v21 = MEMORY[0x1F4188790](v20);
  int v23 = (char *)&v30 - v22;
  (*(void (**)(char *, uint64_t, double))(v24 + 16))((char *)&v30 - v22, a4, v21);
  id v25 = AnyTransferable.init<A>(_:)((uint64_t)v23, a12, a14);
  View._fileExporter(isPresented:item:contentTypes:defaultFilename:onCompletion:onCancellation:)(a1, a2, v33, (uint64_t)v25, v26, v27, v28, v34, a9, v32, a7, a8, v31, *((uint64_t *)&v31 + 1), v30, *((uint64_t *)&v30 + 1), a13);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t View._fileExporter(isPresented:item:contentTypes:defaultFilename:onCompletion:onCancellation:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  uint64_t v18 = v17;
  uint64_t v60 = a8;
  uint64_t v61 = a5;
  uint64_t v62 = a6;
  uint64_t v63 = a7;
  uint64_t v66 = a9;
  uint64_t v22 = a17;
  uint64_t v64 = a4;
  uint64_t v65 = a16;
  type metadata accessor for FileExportOperation?(0);
  MEMORY[0x1F4188790](v23 - 8);
  id v25 = (char *)v51 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for FileDialogConfiguration<FileExportOperation.Key, FileExportOperation>();
  uint64_t v27 = v26;
  MEMORY[0x1F4188790](v26);
  uint64_t v29 = (void *)((char *)v51 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v30 = a1;
  uint64_t v67 = a1;
  uint64_t v68 = a2;
  char v69 = a3;
  type metadata accessor for Binding<Bool>();
  MEMORY[0x18C113DA0](&v70);
  if (v70 == 1)
  {
    uint64_t v59 = v18;
    v56 = v29;
    uint64_t v57 = a14;
    uint64_t v54 = a15;
    uint64_t v55 = a13;
    uint64_t v52 = a10;
    uint64_t v53 = a11;
    uint64_t v31 = swift_allocObject();
    uint64_t v58 = a17;
    uint64_t v32 = v31;
    *(void *)(v31 + 16) = a1;
    *(void *)(v31 + 24) = a2;
    v51[1] = a2;
    v51[2] = a1;
    *(unsigned char *)(v31 + 32) = a3 & 1;
    *(void *)(v31 + 40) = a12;
    *(void *)(v31 + 48) = a13;
    uint64_t v33 = swift_allocObject();
    *(void *)(v33 + 16) = v30;
    *(void *)(v33 + 24) = a2;
    *(unsigned char *)(v33 + 32) = a3 & 1;
    *(void *)(v33 + 40) = v57;
    *(void *)(v33 + 48) = a15;
    uint64_t v34 = (int *)type metadata accessor for FileExportOperation(0);
    long long v35 = &v25[v34[5]];
    *(void *)long long v35 = 0;
    *((void *)v35 + 1) = 0;
    long long v36 = &v25[v34[6]];
    uint64_t v37 = type metadata accessor for URL();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v37 - 8) + 56))(v36, 1, 1, v37);
    id v38 = &v25[v34[7]];
    *(_OWORD *)id v38 = 0u;
    *((_OWORD *)v38 + 1) = 0u;
    uint64_t v39 = &v25[v34[8]];
    *(_OWORD *)uint64_t v39 = 0u;
    *((_OWORD *)v39 + 1) = 0u;
    char v40 = &v25[v34[9]];
    *(_OWORD *)char v40 = 0u;
    *((_OWORD *)v40 + 1) = 0u;
    uint64_t v41 = &v25[v34[10]];
    type metadata accessor for Predicate<Pack{URL}>();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v42 - 8) + 56))(v41, 1, 1, v42);
    v25[v34[11]] = 2;
    uint64_t v43 = &v25[v34[12]];
    *(void *)uint64_t v43 = 0;
    v43[8] = 1;
    uint64_t v44 = v63;
    uint64_t v46 = v60;
    uint64_t v45 = v61;
    *(void *)id v25 = v64;
    *((void *)v25 + 1) = v45;
    uint64_t v57 = v27;
    *((void *)v25 + 2) = v62;
    *((void *)v25 + 3) = v44;
    v25[32] = 1;
    uint64_t v47 = v52;
    uint64_t v48 = v53;
    *((void *)v25 + 5) = v46;
    *((void *)v25 + 6) = v47;
    *((void *)v25 + 7) = v48;
    *((void *)v25 + 8) = partial apply for closure #1 in View._fileExporter(isPresented:item:contentTypes:defaultFilename:onCompletion:onCancellation:);
    *((void *)v25 + 9) = v32;
    uint64_t v22 = v58;
    *((void *)v25 + 10) = partial apply for closure #2 in View._fileExporter(isPresented:items:contentTypes:onCompletion:onCancellation:);
    *((void *)v25 + 11) = v33;
    type metadata accessor for FileExportOperation.Mode(0);
    swift_storeEnumTagMultiPayload();
    (*(void (**)(char *, void, uint64_t, int *))(*((void *)v34 - 1) + 56))(v25, 0, 1, v34);
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    swift_retain_n();
    swift_retain_n();
    uint64_t v29 = v56;
    swift_bridgeObjectRetain();
    uint64_t v27 = v57;
    outlined copy of AnyTransferable?(v64);
  }
  else
  {
    uint64_t v49 = type metadata accessor for FileExportOperation(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v49 - 8) + 56))(v25, 1, 1, v49);
  }
  specialized FileDialogConfiguration.init(preferenceKey:operation:)((uint64_t)v25, (uint64_t (*)(void))type metadata accessor for FileDialogConfiguration<FileExportOperation.Key, FileExportOperation>, (uint64_t)&type metadata for FileExportOperation.Key, (uint64_t (*)(uint64_t, char *))outlined init with take of FileExportOperation?, v29);
  MEMORY[0x18C113660](v29, v65, v27, v22);
  return _s7SwiftUI23FileDialogConfigurationVyAA0C15ExportOperationV3KeyVAEGWOhTm_0((uint64_t)v29, (uint64_t (*)(void))type metadata accessor for FileDialogConfiguration<FileExportOperation.Key, FileExportOperation>);
}

void *keypath_get_25Tm@<X0>(void *(*a1)(uint64_t *__return_ptr)@<X3>, unsigned char *a2@<X8>)
{
  id result = a1(&v4);
  *a2 = v4;
  return result;
}

void type metadata accessor for (CodingKey, DecodingError.Context)()
{
  if (!lazy cache variable for type metadata for (CodingKey, DecodingError.Context))
  {
    type metadata accessor for CVarArg(255, &lazy cache variable for type metadata for CodingKey);
    type metadata accessor for DecodingError.Context();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (CodingKey, DecodingError.Context));
    }
  }
}

void type metadata accessor for _ContiguousArrayStorage<ModifiedContent<_VariadicView.Tree<_VStackLayout, _VariadicView_Children>, RootItemModifier>>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

uint64_t specialized _dictionaryUpCast<A, B, C, D>(_:)(uint64_t a1)
{
  if (*(void *)(a1 + 16))
  {
    type metadata accessor for _DictionaryStorage<AnyHashable, Any>();
    uint64_t v2 = static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    uint64_t v2 = MEMORY[0x1E4FBC868];
  }
  uint64_t v27 = a1 + 64;
  uint64_t v3 = -1 << *(unsigned char *)(a1 + 32);
  if (-v3 < 64) {
    uint64_t v4 = ~(-1 << -(char)v3);
  }
  else {
    uint64_t v4 = -1;
  }
  unint64_t v5 = v4 & *(void *)(a1 + 64);
  int64_t v26 = (unint64_t)(63 - v3) >> 6;
  uint64_t v6 = v2 + 64;
  swift_bridgeObjectRetain();
  uint64_t result = swift_retain();
  int64_t v8 = 0;
  while (1)
  {
    if (v5)
    {
      unint64_t v11 = __clz(__rbit64(v5));
      v5 &= v5 - 1;
      unint64_t v12 = v11 | (v8 << 6);
      goto LABEL_28;
    }
    int64_t v13 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }
    if (v13 >= v26) {
      goto LABEL_37;
    }
    unint64_t v14 = *(void *)(v27 + 8 * v13);
    int64_t v15 = v8 + 1;
    if (!v14)
    {
      int64_t v15 = v8 + 2;
      if (v8 + 2 >= v26) {
        goto LABEL_37;
      }
      unint64_t v14 = *(void *)(v27 + 8 * v15);
      if (!v14)
      {
        int64_t v15 = v8 + 3;
        if (v8 + 3 >= v26) {
          goto LABEL_37;
        }
        unint64_t v14 = *(void *)(v27 + 8 * v15);
        if (!v14)
        {
          int64_t v15 = v8 + 4;
          if (v8 + 4 >= v26) {
            goto LABEL_37;
          }
          unint64_t v14 = *(void *)(v27 + 8 * v15);
          if (!v14) {
            break;
          }
        }
      }
    }
LABEL_27:
    unint64_t v5 = (v14 - 1) & v14;
    unint64_t v12 = __clz(__rbit64(v14)) + (v15 << 6);
    int64_t v8 = v15;
LABEL_28:
    uint64_t v17 = *(void **)(*(void *)(a1 + 48) + 8 * v12);
    outlined init with copy of Any(*(void *)(a1 + 56) + 32 * v12, (uint64_t)v39 + 8);
    *(void *)&v39[0] = v17;
    v37[0] = v39[0];
    v37[1] = v39[1];
    uint64_t v38 = v40;
    *(void *)&v36[0] = v17;
    type metadata accessor for NSAttributedStringKey(0);
    id v18 = v17;
    swift_dynamicCast();
    outlined init with take of Any((_OWORD *)((char *)v37 + 8), v31);
    long long v32 = v28;
    long long v33 = v29;
    uint64_t v34 = v30;
    outlined init with take of Any(v31, v35);
    long long v28 = v32;
    long long v29 = v33;
    uint64_t v30 = v34;
    outlined init with take of Any(v35, v36);
    outlined init with take of Any(v36, &v32);
    uint64_t result = AnyHashable._rawHashValue(seed:)(*(void *)(v2 + 40));
    uint64_t v19 = -1 << *(unsigned char *)(v2 + 32);
    unint64_t v20 = result & ~v19;
    unint64_t v21 = v20 >> 6;
    if (((-1 << v20) & ~*(void *)(v6 + 8 * (v20 >> 6))) != 0)
    {
      unint64_t v9 = __clz(__rbit64((-1 << v20) & ~*(void *)(v6 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v22 = 0;
      unint64_t v23 = (unint64_t)(63 - v19) >> 6;
      do
      {
        if (++v21 == v23 && (v22 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        BOOL v24 = v21 == v23;
        if (v21 == v23) {
          unint64_t v21 = 0;
        }
        v22 |= v24;
        uint64_t v25 = *(void *)(v6 + 8 * v21);
      }
      while (v25 == -1);
      unint64_t v9 = __clz(__rbit64(~v25)) + (v21 << 6);
    }
    *(void *)(v6 + ((v9 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v9;
    uint64_t v10 = *(void *)(v2 + 48) + 40 * v9;
    *(_OWORD *)uint64_t v10 = v28;
    *(_OWORD *)(v10 + 16) = v29;
    *(void *)(v10 + 32) = v30;
    uint64_t result = (uint64_t)outlined init with take of Any(&v32, (_OWORD *)(*(void *)(v2 + 56) + 32 * v9));
    ++*(void *)(v2 + 16);
  }
  int64_t v16 = v8 + 5;
  if (v8 + 5 >= v26)
  {
LABEL_37:
    swift_release();
    outlined consume of Set<UIPress>.Iterator._Variant();
    return v2;
  }
  unint64_t v14 = *(void *)(v27 + 8 * v16);
  if (v14)
  {
    int64_t v15 = v8 + 5;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v15 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      break;
    }
    if (v15 >= v26) {
      goto LABEL_37;
    }
    unint64_t v14 = *(void *)(v27 + 8 * v15);
    ++v16;
    if (v14) {
      goto LABEL_27;
    }
  }
LABEL_39:
  __break(1u);
  return result;
}

id specialized _NativeDictionary.setValue(_:forKey:isUnique:)(void *a1, char a2, double a3, double a4)
{
  unint64_t v5 = (void **)v4;
  unint64_t v9 = (void *)*v4;
  unint64_t v11 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)a1);
  uint64_t v12 = v9[2];
  BOOL v13 = (v10 & 1) == 0;
  id result = (id)(v12 + v13);
  if (__OFADD__(v12, v13))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v15 = v10;
  uint64_t v16 = v9[3];
  if (v16 >= (uint64_t)result && (a2 & 1) != 0)
  {
LABEL_7:
    uint64_t v17 = *v5;
    if (v15)
    {
LABEL_8:
      id v18 = (double *)(v17[7] + 16 * v11);
      *id v18 = a3;
      v18[1] = a4;
      return result;
    }
    goto LABEL_11;
  }
  if (v16 >= (uint64_t)result && (a2 & 1) == 0)
  {
    id result = specialized _NativeDictionary.copy()();
    goto LABEL_7;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)((uint64_t)result, a2 & 1);
  id result = (id)specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)a1);
  if ((v15 & 1) != (v19 & 1))
  {
LABEL_15:
    type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIDragItem);
    id result = (id)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v11 = (unint64_t)result;
  uint64_t v17 = *v5;
  if (v15) {
    goto LABEL_8;
  }
LABEL_11:
  specialized _NativeDictionary._insert(at:key:value:)(v11, (uint64_t)a1, v17, a3, a4);

  return a1;
}

void type metadata accessor for _SetStorage<UIOpenURLContext>()
{
  if (!lazy cache variable for type metadata for _SetStorage<UIOpenURLContext>)
  {
    type metadata accessor for UIOpenURLContext();
    lazy protocol witness table accessor for type AppPreviewHost and conformance AppPreviewHost(&lazy protocol witness table cache variable for type UIOpenURLContext and conformance NSObject, 255, (void (*)(uint64_t))type metadata accessor for UIOpenURLContext);
    unint64_t v0 = type metadata accessor for _SetStorage();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _SetStorage<UIOpenURLContext>);
    }
  }
}

double *specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(uint64_t *a1, char a2)
{
  uint64_t v4 = a2 & 1;
  Swift::Int v5 = a1[1];
  id result = (double *)_minimumMergeRunLength(_:)(v5);
  if ((uint64_t)result < v5)
  {
    if (v5 >= 0) {
      uint64_t v7 = v5;
    }
    else {
      uint64_t v7 = v5 + 1;
    }
    if (v5 < -1)
    {
LABEL_224:
      id result = (double *)_assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      return result;
    }
    uint64_t v152 = v2;
    Swift::Int v153 = v5;
    v151 = result;
    v148 = a1;
    if (v5 >= 2)
    {
      uint64_t v8 = v7 >> 1;
      type metadata accessor for UIKitProxyFocusItem();
      uint64_t v9 = static Array._allocateBufferUninitialized(minimumCapacity:)();
      *(void *)(v9 + 16) = v8;
      uint64_t v149 = v9;
      char v10 = (char *)(v9 + 32);
      goto LABEL_12;
    }
    unint64_t v11 = (char *)MEMORY[0x1E4FBC860];
    char v10 = (char *)(MEMORY[0x1E4FBC860] + 32);
    uint64_t v149 = MEMORY[0x1E4FBC860];
    if (v5 == 1)
    {
LABEL_12:
      Swift::Int v12 = 0;
      uint64_t v13 = *a1;
      uint64_t v150 = *a1 + 32;
      uint64_t v155 = *a1 - 16;
      unint64_t v11 = (char *)MEMORY[0x1E4FBC860];
      Swift::Int v14 = v153;
      v161 = v10;
      uint64_t v159 = *a1;
      while (1)
      {
        Swift::Int v16 = v12 + 1;
        if (v12 + 1 < v14)
        {
          uint64_t v17 = *(void *)(v13 + 16 * v12);
          id v18 = (double *)(*(void *)(v13 + 16 * v16)
                         + OBJC_IVAR____TtC7SwiftUIP33_60C465D0E37117769FC505C04DE5239A24UIKitFocusableFillerItem_logicalFrame);
          double v19 = *v18;
          double v20 = v18[1];
          if (v4) {
            double v21 = v18[1];
          }
          else {
            double v21 = *v18;
          }
          char v22 = (double *)(v17
                         + OBJC_IVAR____TtC7SwiftUIP33_60C465D0E37117769FC505C04DE5239A24UIKitFocusableFillerItem_logicalFrame);
          uint64_t v23 = v17
              + OBJC_IVAR____TtC7SwiftUIP33_60C465D0E37117769FC505C04DE5239A24UIKitFocusableFillerItem_logicalFrame
              + 8;
          if (v4) {
            char v22 = (double *)v23;
          }
          double v24 = *v22;
          Swift::Int v16 = v12 + 2;
          if (v12 + 2 < v14)
          {
            uint64_t v25 = (void *)(v150 + 16 * v12);
            while (1)
            {
              int64_t v26 = (double *)(*v25
                             + OBJC_IVAR____TtC7SwiftUIP33_60C465D0E37117769FC505C04DE5239A24UIKitFocusableFillerItem_logicalFrame);
              double v27 = v4 ? v20 : v19;
              double v19 = *v26;
              double v20 = v26[1];
              double v28 = v4 ? v26[1] : *v26;
              if (v21 < v24 == v28 >= v27) {
                break;
              }
              ++v16;
              v25 += 2;
              if (v14 == v16)
              {
                Swift::Int v16 = v14;
                break;
              }
            }
          }
          if (v21 < v24)
          {
            if (v16 < v12) {
              goto LABEL_214;
            }
            if (v12 < v16)
            {
              long long v29 = (long long *)(v155 + 16 * v16);
              Swift::Int v30 = v16;
              Swift::Int v31 = v12;
              long long v32 = (long long *)(v13 + 16 * v12);
              do
              {
                if (v31 != --v30)
                {
                  if (!v13) {
                    goto LABEL_221;
                  }
                  long long v33 = *v32;
                  *long long v32 = *v29;
                  *long long v29 = v33;
                }
                ++v31;
                --v29;
                ++v32;
              }
              while (v31 < v30);
            }
          }
        }
        if (v16 < v14)
        {
          if (__OFSUB__(v16, v12)) {
            goto LABEL_209;
          }
          if (v16 - v12 < (uint64_t)v151)
          {
            uint64_t v34 = (char *)v151 + v12;
            if (__OFADD__(v12, v151)) {
              goto LABEL_215;
            }
            if ((uint64_t)v34 >= v14) {
              uint64_t v34 = (char *)v14;
            }
            if ((uint64_t)v34 < v12) {
              goto LABEL_216;
            }
            if ((char *)v16 != v34)
            {
              uint64_t v35 = v155 + 16 * v16;
              do
              {
                uint64_t v36 = *(void *)(v13 + 16 * v16);
                uint64_t v37 = v35;
                Swift::Int v38 = v12;
                do
                {
                  uint64_t v39 = (double *)(v36
                                 + OBJC_IVAR____TtC7SwiftUIP33_60C465D0E37117769FC505C04DE5239A24UIKitFocusableFillerItem_logicalFrame);
                  if (v4) {
                    uint64_t v39 = (double *)(v36
                  }
                                   + OBJC_IVAR____TtC7SwiftUIP33_60C465D0E37117769FC505C04DE5239A24UIKitFocusableFillerItem_logicalFrame
                                   + 8);
                  uint64_t v40 = (double *)(*(void *)v37
                                 + OBJC_IVAR____TtC7SwiftUIP33_60C465D0E37117769FC505C04DE5239A24UIKitFocusableFillerItem_logicalFrame);
                  if (v4) {
                    ++v40;
                  }
                  if (*v39 >= *v40) {
                    break;
                  }
                  if (!v13) {
                    goto LABEL_217;
                  }
                  uint64_t v41 = *(void *)(v37 + 24);
                  *(_OWORD *)(v37 + 16) = *(_OWORD *)v37;
                  *(void *)uint64_t v37 = v36;
                  *(void *)(v37 + 8) = v41;
                  v37 -= 16;
                  ++v38;
                }
                while (v16 != v38);
                ++v16;
                v35 += 16;
              }
              while ((char *)v16 != v34);
              Swift::Int v16 = (Swift::Int)v34;
            }
          }
        }
        if (v16 < v12) {
          goto LABEL_208;
        }
        Swift::Int v154 = v16;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          unint64_t v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v11 + 2) + 1, 1, v11);
        }
        unint64_t v43 = *((void *)v11 + 2);
        unint64_t v42 = *((void *)v11 + 3);
        unint64_t v15 = v43 + 1;
        char v10 = v161;
        if (v43 >= v42 >> 1)
        {
          char v10 = v161;
          unint64_t v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v42 > 1), v43 + 1, 1, v11);
        }
        *((void *)v11 + 2) = v15;
        uint64_t v44 = v11 + 32;
        uint64_t v45 = &v11[16 * v43 + 32];
        *(void *)uint64_t v45 = v12;
        *((void *)v45 + 1) = v154;
        if (v43) {
          break;
        }
        unint64_t v15 = 1;
LABEL_14:
        Swift::Int v14 = v153;
        Swift::Int v12 = v154;
        if (v154 >= v153) {
          goto LABEL_181;
        }
      }
      v160 = v11 + 32;
      v156 = v11;
      while (1)
      {
        int64_t v46 = v15 - 1;
        if (v15 >= 4)
        {
          unint64_t v51 = &v44[16 * v15];
          uint64_t v52 = *((void *)v51 - 8);
          uint64_t v53 = *((void *)v51 - 7);
          BOOL v57 = __OFSUB__(v53, v52);
          uint64_t v54 = v53 - v52;
          if (v57) {
            goto LABEL_197;
          }
          uint64_t v56 = *((void *)v51 - 6);
          uint64_t v55 = *((void *)v51 - 5);
          BOOL v57 = __OFSUB__(v55, v56);
          uint64_t v49 = v55 - v56;
          char v50 = v57;
          if (v57) {
            goto LABEL_198;
          }
          unint64_t v58 = v15 - 2;
          uint64_t v59 = &v44[16 * v15 - 32];
          uint64_t v61 = *(void *)v59;
          uint64_t v60 = *((void *)v59 + 1);
          BOOL v57 = __OFSUB__(v60, v61);
          uint64_t v62 = v60 - v61;
          if (v57) {
            goto LABEL_200;
          }
          BOOL v57 = __OFADD__(v49, v62);
          uint64_t v63 = v49 + v62;
          if (v57) {
            goto LABEL_203;
          }
          if (v63 >= v54)
          {
            double v81 = &v44[16 * v46];
            uint64_t v83 = *(void *)v81;
            uint64_t v82 = *((void *)v81 + 1);
            BOOL v57 = __OFSUB__(v82, v83);
            uint64_t v84 = v82 - v83;
            if (v57) {
              goto LABEL_207;
            }
            BOOL v74 = v49 < v84;
            goto LABEL_99;
          }
        }
        else
        {
          if (v15 != 3)
          {
            uint64_t v75 = *((void *)v11 + 4);
            uint64_t v76 = *((void *)v11 + 5);
            BOOL v57 = __OFSUB__(v76, v75);
            uint64_t v68 = v76 - v75;
            char v69 = v57;
            goto LABEL_93;
          }
          uint64_t v48 = *((void *)v11 + 4);
          uint64_t v47 = *((void *)v11 + 5);
          BOOL v57 = __OFSUB__(v47, v48);
          uint64_t v49 = v47 - v48;
          char v50 = v57;
        }
        if (v50) {
          goto LABEL_199;
        }
        unint64_t v58 = v15 - 2;
        uint64_t v64 = &v44[16 * v15 - 32];
        uint64_t v66 = *(void *)v64;
        uint64_t v65 = *((void *)v64 + 1);
        BOOL v67 = __OFSUB__(v65, v66);
        uint64_t v68 = v65 - v66;
        char v69 = v67;
        if (v67) {
          goto LABEL_202;
        }
        uint64_t v70 = &v44[16 * v46];
        uint64_t v72 = *(void *)v70;
        uint64_t v71 = *((void *)v70 + 1);
        BOOL v57 = __OFSUB__(v71, v72);
        uint64_t v73 = v71 - v72;
        if (v57) {
          goto LABEL_205;
        }
        if (__OFADD__(v68, v73)) {
          goto LABEL_206;
        }
        if (v68 + v73 >= v49)
        {
          BOOL v74 = v49 < v73;
LABEL_99:
          if (v74) {
            int64_t v46 = v58;
          }
          goto LABEL_101;
        }
LABEL_93:
        if (v69) {
          goto LABEL_201;
        }
        v77 = &v44[16 * v46];
        uint64_t v79 = *(void *)v77;
        uint64_t v78 = *((void *)v77 + 1);
        BOOL v57 = __OFSUB__(v78, v79);
        uint64_t v80 = v78 - v79;
        if (v57) {
          goto LABEL_204;
        }
        if (v80 < v68) {
          goto LABEL_14;
        }
LABEL_101:
        if (v46 - 1 >= v15)
        {
          __break(1u);
LABEL_194:
          __break(1u);
LABEL_195:
          __break(1u);
LABEL_196:
          __break(1u);
LABEL_197:
          __break(1u);
LABEL_198:
          __break(1u);
LABEL_199:
          __break(1u);
LABEL_200:
          __break(1u);
LABEL_201:
          __break(1u);
LABEL_202:
          __break(1u);
LABEL_203:
          __break(1u);
LABEL_204:
          __break(1u);
LABEL_205:
          __break(1u);
LABEL_206:
          __break(1u);
LABEL_207:
          __break(1u);
LABEL_208:
          __break(1u);
LABEL_209:
          __break(1u);
          goto LABEL_210;
        }
        if (!v13) {
          goto LABEL_220;
        }
        uint64_t v85 = v4;
        double v86 = v11;
        int64_t v164 = v46 - 1;
        v163 = &v44[16 * v46 - 16];
        uint64_t v87 = *(void *)v163;
        char v88 = &v44[16 * v46];
        uint64_t v90 = *(void *)v88;
        uint64_t v89 = *((void *)v88 + 1);
        v162 = v88;
        long long v91 = (char *)(v13 + 16 * *(void *)v163);
        long long v92 = (char *)(v13 + 16 * *(void *)v88);
        unint64_t v93 = v13 + 16 * v89;
        uint64_t v94 = v92 - v91;
        uint64_t v95 = v92 - v91 + 15;
        if (v92 - v91 >= 0) {
          uint64_t v95 = v92 - v91;
        }
        uint64_t v96 = v95 >> 4;
        uint64_t v97 = v93 - (void)v92;
        uint64_t v98 = v93 - (void)v92 + 15;
        if ((uint64_t)(v93 - (void)v92) >= 0) {
          uint64_t v98 = v93 - (void)v92;
        }
        uint64_t v99 = v98 >> 4;
        if (v96 >= v98 >> 4)
        {
          if (v97 < -15) {
            goto LABEL_223;
          }
          if ((unint64_t)v10 >= v93 || v10 != v92)
          {
            uint64_t v158 = v89;
            uint64_t v113 = *(void *)v163;
            int64_t v114 = v46;
            uint64_t v115 = v90;
            memmove(v10, v92, 16 * v99);
            uint64_t v90 = v115;
            uint64_t v89 = v158;
            uint64_t v87 = v113;
            int64_t v46 = v114;
            char v10 = v161;
          }
          v103 = &v10[16 * v99];
          uint64_t v13 = v159;
          if (v87 >= v90 || v97 < 16)
          {
            v105 = v10;
            unint64_t v11 = v86;
            uint64_t v4 = v85;
            goto LABEL_157;
          }
          uint64_t v116 = OBJC_IVAR____TtC7SwiftUIP33_60C465D0E37117769FC505C04DE5239A24UIKitFocusableFillerItem_logicalFrame;
          v117 = (char *)(v155 + 16 * v89);
          unint64_t v11 = v86;
          uint64_t v4 = v85;
          while (2)
          {
            v118 = v117 + 16;
            v119 = v92 - 16;
            uint64_t v120 = *((void *)v92 - 2);
            v121 = (double *)(*((void *)v103 - 2) + v116);
            if (v85) {
              ++v121;
            }
            double v122 = *v121;
            v123 = (double *)(v120 + v116);
            uint64_t v124 = v120 + v116 + 8;
            if (v85) {
              v123 = (double *)v124;
            }
            if (v122 >= *v123)
            {
              v119 = v103 - 16;
              if (v118 == v103)
              {
                BOOL v125 = v117 >= v103;
                v103 -= 16;
                if (!v125) {
                  goto LABEL_151;
                }
              }
              else
              {
                v103 -= 16;
              }
            }
            else if (v118 == v92)
            {
              BOOL v125 = v117 >= v92;
              v92 -= 16;
              if (!v125) {
                goto LABEL_151;
              }
            }
            else
            {
              v92 -= 16;
            }
            *(_OWORD *)v117 = *(_OWORD *)v119;
LABEL_151:
            if (v91 >= v92 || (v117 -= 16, v10 >= v103))
            {
              v105 = v10;
              goto LABEL_157;
            }
            continue;
          }
        }
        if (v94 < -15) {
          goto LABEL_223;
        }
        if (v10 != v91 || (unint64_t v11 = v86, v10 >= v92))
        {
          uint64_t v157 = v89;
          uint64_t v100 = *(void *)v163;
          int64_t v101 = v46;
          uint64_t v102 = v90;
          memmove(v10, v91, 16 * v96);
          uint64_t v90 = v102;
          unint64_t v11 = v156;
          uint64_t v89 = v157;
          uint64_t v87 = v100;
          int64_t v46 = v101;
          char v10 = v161;
        }
        v103 = &v10[16 * v96];
        uint64_t v4 = v85;
        if (v90 < v89 && v94 >= 16)
        {
          uint64_t v104 = OBJC_IVAR____TtC7SwiftUIP33_60C465D0E37117769FC505C04DE5239A24UIKitFocusableFillerItem_logicalFrame;
          v105 = v10;
          while (1)
          {
            uint64_t v106 = *(void *)v105;
            v107 = (double *)(*(void *)v92 + v104);
            if (v85) {
              ++v107;
            }
            double v108 = *v107;
            v109 = (double *)(v106 + v104);
            uint64_t v110 = v106 + v104 + 8;
            if (v85) {
              v109 = (double *)v110;
            }
            if (v108 >= *v109) {
              break;
            }
            v111 = v92;
            BOOL v112 = v91 == v92;
            v92 += 16;
            if (!v112) {
              goto LABEL_124;
            }
LABEL_125:
            v91 += 16;
            if (v105 >= v103 || (unint64_t)v92 >= v93) {
              goto LABEL_155;
            }
          }
          v111 = v105;
          BOOL v112 = v91 == v105;
          v105 += 16;
          if (v112) {
            goto LABEL_125;
          }
LABEL_124:
          *(_OWORD *)long long v91 = *(_OWORD *)v111;
          goto LABEL_125;
        }
        v105 = v10;
LABEL_155:
        long long v92 = v91;
        uint64_t v13 = v159;
LABEL_157:
        uint64_t v126 = v103 - v105;
        uint64_t v127 = v103 - v105 + 15;
        if (v126 >= 0) {
          uint64_t v127 = v126;
        }
        if (v126 <= -16) {
          goto LABEL_223;
        }
        uint64_t v128 = v127 >> 4;
        if (v92 != v105 || v92 >= &v105[16 * v128])
        {
          uint64_t v129 = v89;
          uint64_t v130 = v87;
          int64_t v131 = v46;
          memmove(v92, v105, 16 * v128);
          uint64_t v89 = v129;
          uint64_t v87 = v130;
          int64_t v46 = v131;
        }
        if (v89 < v87) {
          goto LABEL_194;
        }
        if (v46 > *((void *)v11 + 2)) {
          goto LABEL_195;
        }
        *(void *)v163 = v87;
        uint64_t v44 = v160;
        *(void *)&v160[16 * v164 + 8] = v89;
        unint64_t v132 = *((void *)v11 + 2);
        if (v46 >= (uint64_t)v132) {
          goto LABEL_196;
        }
        unint64_t v15 = v132 - 1;
        memmove(v162, v162 + 16, 16 * (v132 - 1 - v46));
        *((void *)v11 + 2) = v132 - 1;
        char v10 = v161;
        if (v132 <= 2) {
          goto LABEL_14;
        }
      }
    }
    unint64_t v15 = *(void *)(MEMORY[0x1E4FBC860] + 16);
LABEL_181:
    if (v15 < 2)
    {
LABEL_192:
      swift_bridgeObjectRelease();
      *(void *)(v149 + 16) = 0;
      return (double *)swift_bridgeObjectRelease();
    }
    uint64_t v142 = *v148;
    while (1)
    {
      unint64_t v143 = v15 - 2;
      if (v15 < 2) {
        break;
      }
      if (!v142) {
        goto LABEL_222;
      }
      uint64_t v144 = *(void *)&v11[16 * v143 + 32];
      uint64_t v145 = *(void *)&v11[16 * v15 + 24];
      specialized _merge<A>(low:mid:high:buffer:by:)((char *)(v142 + 16 * v144), (char *)(v142 + 16 * *(void *)&v11[16 * v15 + 16]), v142 + 16 * v145, v10, v4);
      if (v152) {
        goto LABEL_192;
      }
      if (v145 < v144) {
        goto LABEL_211;
      }
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        unint64_t v11 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v11);
      }
      if (v143 >= *((void *)v11 + 2)) {
        goto LABEL_212;
      }
      v146 = &v11[16 * v143 + 32];
      *(void *)v146 = v144;
      *((void *)v146 + 1) = v145;
      unint64_t v147 = *((void *)v11 + 2);
      if (v15 > v147) {
        goto LABEL_213;
      }
      memmove(&v11[16 * v15 + 16], &v11[16 * v15 + 32], 16 * (v147 - v15));
      *((void *)v11 + 2) = v147 - 1;
      unint64_t v15 = v147 - 1;
      if (v147 <= 2) {
        goto LABEL_192;
      }
    }
LABEL_210:
    __break(1u);
LABEL_211:
    __break(1u);
LABEL_212:
    __break(1u);
LABEL_213:
    __break(1u);
LABEL_214:
    __break(1u);
LABEL_215:
    __break(1u);
LABEL_216:
    __break(1u);
LABEL_217:
    __break(1u);
LABEL_218:
    __break(1u);
LABEL_219:
    __break(1u);
LABEL_220:
    __break(1u);
LABEL_221:
    __break(1u);
LABEL_222:
    __break(1u);
LABEL_223:
    _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
    goto LABEL_224;
  }
  if (v5 < 0) {
    goto LABEL_218;
  }
  if ((unint64_t)v5 >= 2)
  {
    uint64_t v133 = *a1;
    uint64_t v134 = -1;
    uint64_t v135 = 1;
    uint64_t v136 = *a1;
    do
    {
      uint64_t v137 = *(void *)(v133 + 16 * v135);
      uint64_t v138 = v134;
      uint64_t v139 = v136;
      do
      {
        id result = (double *)(v137
                          + OBJC_IVAR____TtC7SwiftUIP33_60C465D0E37117769FC505C04DE5239A24UIKitFocusableFillerItem_logicalFrame);
        if (v4) {
          id result = (double *)(v137
        }
                            + OBJC_IVAR____TtC7SwiftUIP33_60C465D0E37117769FC505C04DE5239A24UIKitFocusableFillerItem_logicalFrame
                            + 8);
        v140 = (double *)(*(void *)v139
                        + OBJC_IVAR____TtC7SwiftUIP33_60C465D0E37117769FC505C04DE5239A24UIKitFocusableFillerItem_logicalFrame);
        if (v4) {
          ++v140;
        }
        if (*result >= *v140) {
          break;
        }
        if (!v133) {
          goto LABEL_219;
        }
        uint64_t v141 = *(void *)(v139 + 24);
        *(_OWORD *)(v139 + 16) = *(_OWORD *)v139;
        *(void *)uint64_t v139 = v137;
        *(void *)(v139 + 8) = v141;
        v139 -= 16;
        BOOL v125 = __CFADD__(v138++, 1);
      }
      while (!v125);
      ++v135;
      v136 += 16;
      --v134;
    }
    while (v135 != v5);
  }
  return result;
}

uint64_t specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(uint64_t *a1, uint64_t a2)
{
  uint64_t v5 = swift_allocObject();
  long long v6 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(v5 + 48) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(v5 + 64) = v6;
  *(unsigned char *)(v5 + 80) = *(unsigned char *)(a2 + 64);
  long long v7 = *(_OWORD *)(a2 + 16);
  uint64_t v134 = a2;
  *(_OWORD *)(v5 + 16) = *(_OWORD *)a2;
  *(_OWORD *)(v5 + 32) = v7;
  Swift::Int v8 = a1[1];
  Swift::Int v9 = _minimumMergeRunLength(_:)(v8);
  if (v9 >= v8)
  {
    if (v8 < 0) {
      goto LABEL_153;
    }
    if (v8) {
      specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(0, v8, 1, a1, v134);
    }
    return swift_release();
  }
  if (v8 >= 0) {
    uint64_t v10 = v8;
  }
  else {
    uint64_t v10 = v8 + 1;
  }
  if (v8 < -1) {
    goto LABEL_161;
  }
  Swift::Int v130 = v9;
  uint64_t v127 = a1;
  if (v8 < 2)
  {
    Swift::Int v14 = (char *)MEMORY[0x1E4FBC860];
    uint64_t v133 = (double *)(MEMORY[0x1E4FBC860] + 32);
    uint64_t v129 = MEMORY[0x1E4FBC860];
    if (v8 != 1)
    {
      unint64_t v17 = *(void *)(MEMORY[0x1E4FBC860] + 16);
LABEL_120:
      if (v17 >= 2)
      {
        uint64_t v118 = *v127;
        do
        {
          unint64_t v119 = v17 - 2;
          if (v17 < 2) {
            goto LABEL_148;
          }
          if (!v118) {
            goto LABEL_160;
          }
          uint64_t v120 = v14;
          v121 = v14 + 32;
          uint64_t v122 = *(void *)&v14[16 * v119 + 32];
          uint64_t v123 = *(void *)&v14[16 * v17 + 24];
          specialized _merge<A>(low:mid:high:buffer:by:)((double *)(v118 + 40 * v122), (double *)(v118 + 40 * *(void *)&v121[16 * v17 - 16]), v118 + 40 * v123, v133, v134);
          if (v2) {
            break;
          }
          if (v123 < v122) {
            goto LABEL_149;
          }
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v120 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v120);
          }
          if (v119 >= *((void *)v120 + 2)) {
            goto LABEL_150;
          }
          uint64_t v124 = &v120[16 * v119 + 32];
          *(void *)uint64_t v124 = v122;
          *((void *)v124 + 1) = v123;
          unint64_t v125 = *((void *)v120 + 2);
          if (v17 > v125) {
            goto LABEL_151;
          }
          memmove(&v120[16 * v17 + 16], &v120[16 * v17 + 32], 16 * (v125 - v17));
          Swift::Int v14 = v120;
          *((void *)v120 + 2) = v125 - 1;
          unint64_t v17 = v125 - 1;
        }
        while (v125 > 2);
      }
LABEL_131:
      swift_bridgeObjectRelease();
      *(void *)(v129 + 16) = 0;
      swift_release();
      return swift_bridgeObjectRelease();
    }
  }
  else
  {
    uint64_t v11 = v10 >> 1;
    uint64_t v12 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)(v12 + 16) = v11;
    uint64_t v129 = v12;
    uint64_t v133 = (double *)(v12 + 32);
  }
  Swift::Int v15 = 0;
  uint64_t v16 = *a1;
  uint64_t v128 = *a1 + 112;
  uint64_t v126 = *a1 - 16;
  Swift::Int v14 = (char *)MEMORY[0x1E4FBC860];
  Swift::Int v131 = v8;
  uint64_t v132 = *a1;
LABEL_16:
  Swift::Int v18 = v15++;
  if (v15 >= v8) {
    goto LABEL_48;
  }
  double v19 = (double *)(v16 + 40 * v15);
  double v21 = v19[1];
  double v20 = v19[2];
  double v22 = v19[3];
  double v23 = v19[4];
  double v24 = (double *)(v16 + 40 * v18);
  double v25 = *(double *)(v134 + 56);
  double v26 = vabdd_f64((v22 + v23) * 0.5, v25);
  double v27 = vabdd_f64((v24[3] + v24[4]) * 0.5, v25);
  if (*(unsigned char *)(v134 + 64))
  {
    double v28 = v24[1];
    BOOL v29 = v21 < v28;
    if (v21 != v28) {
      goto LABEL_23;
    }
  }
  else
  {
    double v30 = v24[2];
    if (v20 != v30)
    {
      BOOL v29 = v30 < v20;
      goto LABEL_23;
    }
  }
  BOOL v29 = v26 < v27;
LABEL_23:
  int v31 = v29;
  Swift::Int v15 = v18 + 2;
  if (v18 + 2 < v8)
  {
    long long v32 = (double *)(v128 + 40 * v18);
    while (1)
    {
      double v33 = *(v32 - 3);
      double v34 = *(v32 - 2);
      double v35 = v22 + v23;
      double v22 = *(v32 - 1);
      double v23 = *v32;
      double v36 = vabdd_f64((v22 + *v32) * 0.5, v25);
      double v37 = vabdd_f64(v35 * 0.5, v25);
      if (*(unsigned char *)(v134 + 64))
      {
        BOOL v38 = v33 < v21;
        if (v33 != v21) {
          goto LABEL_34;
        }
      }
      else if (v34 != v20)
      {
        BOOL v38 = v20 < v34;
        goto LABEL_34;
      }
      BOOL v38 = v36 < v37;
LABEL_34:
      int v39 = v38;
      if (v31 != v39) {
        break;
      }
      ++v15;
      v32 += 5;
      double v20 = v34;
      double v21 = v33;
      if (v8 == v15)
      {
        Swift::Int v15 = v8;
        break;
      }
    }
  }
  if (v31)
  {
    if (v15 < v18) {
      goto LABEL_154;
    }
    if (v18 < v15)
    {
      uint64_t v40 = 40 * v15;
      uint64_t v41 = 40 * v18;
      Swift::Int v42 = v15;
      Swift::Int v43 = v18;
      do
      {
        if (v43 != --v42)
        {
          if (!v16) {
            goto LABEL_159;
          }
          uint64_t v44 = v16 + v41;
          uint64_t v45 = *(void *)(v16 + v41);
          uint64_t v46 = v16 + v40;
          long long v47 = *(_OWORD *)(v16 + v41 + 8);
          long long v48 = *(_OWORD *)(v16 + v41 + 24);
          uint64_t v49 = *(void *)(v16 + v40 - 8);
          long long v50 = *(_OWORD *)(v16 + v40 - 24);
          *(_OWORD *)uint64_t v44 = *(_OWORD *)(v16 + v40 - 40);
          *(_OWORD *)(v44 + 16) = v50;
          *(void *)(v44 + 32) = v49;
          *(void *)(v46 - 40) = v45;
          *(_OWORD *)(v46 - 32) = v47;
          *(_OWORD *)(v46 - 16) = v48;
        }
        ++v43;
        v40 -= 40;
        v41 += 40;
      }
      while (v43 < v42);
    }
  }
LABEL_48:
  if (v15 >= v8) {
    goto LABEL_71;
  }
  if (__OFSUB__(v15, v18)) {
    goto LABEL_152;
  }
  if (v15 - v18 >= v130) {
    goto LABEL_71;
  }
  Swift::Int v51 = v18 + v130;
  if (__OFADD__(v18, v130)) {
    goto LABEL_155;
  }
  if (v51 >= v8) {
    Swift::Int v51 = v8;
  }
  if (v51 >= v18)
  {
    if (v15 == v51) {
      goto LABEL_71;
    }
    double v52 = *(double *)(v134 + 56);
    char v53 = *(unsigned char *)(v134 + 64);
    uint64_t v54 = v126 + 40 * v15;
LABEL_58:
    uint64_t v55 = (double *)(v16 + 40 * v15);
    double v56 = v55[1];
    double v57 = v55[2];
    double v58 = v55[3];
    double v59 = v55[4];
    double v60 = vabdd_f64((v58 + v59) * 0.5, v52);
    uint64_t v61 = v54;
    Swift::Int v62 = v18;
    while (1)
    {
      double v63 = vabdd_f64((*(double *)v61 + *(double *)(v61 + 8)) * 0.5, v52);
      if ((v53 & 1) == 0) {
        break;
      }
      double v64 = *(double *)(v61 - 16);
      if (v56 == v64) {
        goto LABEL_64;
      }
      if (v56 >= v64) {
        goto LABEL_57;
      }
LABEL_67:
      if (!v16) {
        goto LABEL_157;
      }
      uint64_t v66 = *(void *)(v61 + 16);
      long long v67 = *(_OWORD *)(v61 - 8);
      *(_OWORD *)(v61 + 16) = *(_OWORD *)(v61 - 24);
      *(_OWORD *)(v61 + 32) = v67;
      *(void *)(v61 + 48) = *(void *)(v61 + 8);
      *(void *)(v61 - 24) = v66;
      *(double *)(v61 - 16) = v56;
      *(double *)(v61 - 8) = v57;
      *(double *)uint64_t v61 = v58;
      *(double *)(v61 + 8) = v59;
      v61 -= 40;
      if (v15 == ++v62)
      {
LABEL_57:
        ++v15;
        v54 += 40;
        if (v15 != v51) {
          goto LABEL_58;
        }
        Swift::Int v15 = v51;
LABEL_71:
        if (v15 < v18) {
          goto LABEL_147;
        }
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          Swift::Int v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v14 + 2) + 1, 1, v14);
        }
        unint64_t v69 = *((void *)v14 + 2);
        unint64_t v68 = *((void *)v14 + 3);
        unint64_t v17 = v69 + 1;
        uint64_t v16 = v132;
        if (v69 >= v68 >> 1)
        {
          v117 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v68 > 1), v69 + 1, 1, v14);
          uint64_t v16 = v132;
          Swift::Int v14 = v117;
        }
        *((void *)v14 + 2) = v17;
        uint64_t v70 = v14 + 32;
        uint64_t v71 = &v14[16 * v69 + 32];
        *(void *)uint64_t v71 = v18;
        *((void *)v71 + 1) = v15;
        if (v69)
        {
          while (2)
          {
            unint64_t v72 = v17 - 1;
            if (v17 >= 4)
            {
              v77 = &v70[16 * v17];
              uint64_t v78 = *((void *)v77 - 8);
              uint64_t v79 = *((void *)v77 - 7);
              BOOL v83 = __OFSUB__(v79, v78);
              uint64_t v80 = v79 - v78;
              if (v83) {
                goto LABEL_136;
              }
              uint64_t v82 = *((void *)v77 - 6);
              uint64_t v81 = *((void *)v77 - 5);
              BOOL v83 = __OFSUB__(v81, v82);
              uint64_t v75 = v81 - v82;
              char v76 = v83;
              if (v83) {
                goto LABEL_137;
              }
              unint64_t v84 = v17 - 2;
              uint64_t v85 = &v70[16 * v17 - 32];
              uint64_t v87 = *(void *)v85;
              uint64_t v86 = *((void *)v85 + 1);
              BOOL v83 = __OFSUB__(v86, v87);
              uint64_t v88 = v86 - v87;
              if (v83) {
                goto LABEL_139;
              }
              BOOL v83 = __OFADD__(v75, v88);
              uint64_t v89 = v75 + v88;
              if (v83) {
                goto LABEL_142;
              }
              if (v89 >= v80)
              {
                v107 = &v70[16 * v72];
                uint64_t v109 = *(void *)v107;
                uint64_t v108 = *((void *)v107 + 1);
                BOOL v83 = __OFSUB__(v108, v109);
                uint64_t v110 = v108 - v109;
                if (v83) {
                  goto LABEL_146;
                }
                BOOL v100 = v75 < v110;
              }
              else
              {
LABEL_90:
                if (v76) {
                  goto LABEL_138;
                }
                unint64_t v84 = v17 - 2;
                uint64_t v90 = &v70[16 * v17 - 32];
                uint64_t v92 = *(void *)v90;
                uint64_t v91 = *((void *)v90 + 1);
                BOOL v93 = __OFSUB__(v91, v92);
                uint64_t v94 = v91 - v92;
                char v95 = v93;
                if (v93) {
                  goto LABEL_141;
                }
                uint64_t v96 = &v70[16 * v72];
                uint64_t v98 = *(void *)v96;
                uint64_t v97 = *((void *)v96 + 1);
                BOOL v83 = __OFSUB__(v97, v98);
                uint64_t v99 = v97 - v98;
                if (v83) {
                  goto LABEL_144;
                }
                if (__OFADD__(v94, v99)) {
                  goto LABEL_145;
                }
                if (v94 + v99 < v75) {
                  goto LABEL_102;
                }
                BOOL v100 = v75 < v99;
              }
              if (v100) {
                unint64_t v72 = v84;
              }
            }
            else
            {
              if (v17 == 3)
              {
                uint64_t v74 = *((void *)v14 + 4);
                uint64_t v73 = *((void *)v14 + 5);
                BOOL v83 = __OFSUB__(v73, v74);
                uint64_t v75 = v73 - v74;
                char v76 = v83;
                goto LABEL_90;
              }
              uint64_t v101 = *((void *)v14 + 4);
              uint64_t v102 = *((void *)v14 + 5);
              BOOL v83 = __OFSUB__(v102, v101);
              uint64_t v94 = v102 - v101;
              char v95 = v83;
LABEL_102:
              if (v95) {
                goto LABEL_140;
              }
              v103 = &v70[16 * v72];
              uint64_t v105 = *(void *)v103;
              uint64_t v104 = *((void *)v103 + 1);
              BOOL v83 = __OFSUB__(v104, v105);
              uint64_t v106 = v104 - v105;
              if (v83) {
                goto LABEL_143;
              }
              if (v106 < v94) {
                goto LABEL_15;
              }
            }
            unint64_t v111 = v72 - 1;
            if (v72 - 1 >= v17)
            {
              __break(1u);
LABEL_133:
              __break(1u);
LABEL_134:
              __break(1u);
LABEL_135:
              __break(1u);
LABEL_136:
              __break(1u);
LABEL_137:
              __break(1u);
LABEL_138:
              __break(1u);
LABEL_139:
              __break(1u);
LABEL_140:
              __break(1u);
LABEL_141:
              __break(1u);
LABEL_142:
              __break(1u);
LABEL_143:
              __break(1u);
LABEL_144:
              __break(1u);
LABEL_145:
              __break(1u);
LABEL_146:
              __break(1u);
LABEL_147:
              __break(1u);
LABEL_148:
              __break(1u);
LABEL_149:
              __break(1u);
LABEL_150:
              __break(1u);
LABEL_151:
              __break(1u);
LABEL_152:
              __break(1u);
LABEL_153:
              __break(1u);
LABEL_154:
              __break(1u);
LABEL_155:
              __break(1u);
              goto LABEL_156;
            }
            if (!v16) {
              goto LABEL_158;
            }
            BOOL v112 = &v70[16 * v111];
            uint64_t v113 = *(void *)v112;
            int64_t v114 = &v70[16 * v72];
            uint64_t v115 = *((void *)v114 + 1);
            specialized _merge<A>(low:mid:high:buffer:by:)((double *)(v16 + 40 * *(void *)v112), (double *)(v16 + 40 * *(void *)v114), v16 + 40 * v115, v133, v134);
            if (v2) {
              goto LABEL_131;
            }
            if (v115 < v113) {
              goto LABEL_133;
            }
            if (v72 > *((void *)v14 + 2)) {
              goto LABEL_134;
            }
            *(void *)BOOL v112 = v113;
            *(void *)&v70[16 * v111 + 8] = v115;
            unint64_t v116 = *((void *)v14 + 2);
            if (v72 >= v116) {
              goto LABEL_135;
            }
            unint64_t v17 = v116 - 1;
            memmove(&v70[16 * v72], v114 + 16, 16 * (v116 - 1 - v72));
            *((void *)v14 + 2) = v116 - 1;
            uint64_t v16 = v132;
            if (v116 <= 2) {
              goto LABEL_15;
            }
            continue;
          }
        }
        unint64_t v17 = 1;
LABEL_15:
        Swift::Int v8 = v131;
        if (v15 >= v131) {
          goto LABEL_120;
        }
        goto LABEL_16;
      }
    }
    double v65 = *(double *)(v61 - 8);
    if (v57 != v65)
    {
      if (v65 >= v57) {
        goto LABEL_57;
      }
      goto LABEL_67;
    }
LABEL_64:
    if (v60 >= v63) {
      goto LABEL_57;
    }
    goto LABEL_67;
  }
LABEL_156:
  __break(1u);
LABEL_157:
  __break(1u);
LABEL_158:
  __break(1u);
LABEL_159:
  __break(1u);
LABEL_160:
  __break(1u);
LABEL_161:
  swift_release();
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v2;
  Swift::Int v5;
  Swift::Int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  Swift::Int v10;
  uint64_t v11;
  char *v12;
  Swift::Int v13;
  unint64_t v14;
  Swift::Int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  BOOL v23;
  Swift::Int v24;
  unint64_t v25;
  unint64_t v26;
  unsigned char *v27;
  uint64_t v28;
  uint64_t v29;
  BOOL v30;
  BOOL v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  Swift::Int v35;
  Swift::Int v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  unint64_t v44;
  unint64_t v45;
  unsigned char *v46;
  uint64_t v47;
  uint64_t v48;
  BOOL v49;
  BOOL v50;
  BOOL v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  Swift::Int v55;
  Swift::Int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char v61;
  char v62;
  long long v63;
  long long v64;
  long long v65;
  long long v66;
  long long v67;
  Swift::Int v68;
  Swift::Int v69;
  uint64_t v70;
  int v71;
  _OWORD *v72;
  int v73;
  unint64_t v74;
  unint64_t v75;
  unsigned char *v76;
  uint64_t v77;
  uint64_t v78;
  BOOL v79;
  BOOL v80;
  BOOL v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char v85;
  char v86;
  long long v87;
  long long v88;
  long long v89;
  unint64_t v90;
  unint64_t v91;
  char *v92;
  char *v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  char v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  BOOL v105;
  unint64_t v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  uint64_t v113;
  uint64_t v114;
  BOOL v115;
  uint64_t v116;
  char v117;
  char *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  BOOL v122;
  uint64_t v123;
  uint64_t v124;
  char *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  char *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  unint64_t v133;
  char *v134;
  uint64_t v135;
  unint64_t v136;
  char *v137;
  uint64_t v138;
  char *v139;
  uint64_t v140;
  char *v141;
  unint64_t v142;
  uint64_t result;
  uint64_t v144;
  unint64_t v145;
  uint64_t v146;
  uint64_t v147;
  char *v148;
  char *v149;
  unint64_t v150;
  uint64_t *v151;
  uint64_t v152;
  Swift::Int v153;
  Swift::Int v154;
  char *v155;
  char *v156;
  Swift::Int v157;
  char *__dst;
  Swift::Int v159;
  Swift::Int v160;
  Swift::Int v161;
  uint64_t v162;
  unsigned char *v163;
  Swift::Int v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  BOOL v168;
  uint64_t v169;
  uint64_t v170;
  Swift::Int v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  Swift::Int v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  unint64_t v184;

  uint64_t v5 = a1[1];
  swift_bridgeObjectRetain_n();
  long long v6 = _minimumMergeRunLength(_:)(v5);
  if (v6 >= v5)
  {
    if (v5 < 0) {
      goto LABEL_271;
    }
    if (!v5) {
      return swift_bridgeObjectRelease_n();
    }
    swift_bridgeObjectRetain();
    specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(0, v5, 1, a1, a2);
    if (!v2) {
      return swift_bridgeObjectRelease_n();
    }
LABEL_232:
    swift_bridgeObjectRelease_n();
    return swift_bridgeObjectRelease();
  }
  Swift::Int v153 = v6;
  if (v5 >= 0) {
    long long v7 = v5;
  }
  else {
    long long v7 = v5 + 1;
  }
  if (v5 < -1) {
    goto LABEL_280;
  }
  v166 = a2;
  uint64_t v157 = v5;
  v162 = v2;
  v151 = a1;
  if (v5 < 2)
  {
    __dst = (char *)(MEMORY[0x1E4FBC860] + 32);
    uint64_t v152 = MEMORY[0x1E4FBC860];
    if (v5 != 1)
    {
      uint64_t v12 = (char *)MEMORY[0x1E4FBC860];
      Swift::Int v14 = *(void *)(MEMORY[0x1E4FBC860] + 16);
LABEL_235:
      v156 = v12;
      if (v14 >= 2)
      {
        uint64_t v144 = *v151;
        do
        {
          uint64_t v145 = v14 - 2;
          if (v14 < 2) {
            goto LABEL_265;
          }
          if (!v144) {
            goto LABEL_279;
          }
          v146 = *(void *)&v156[16 * v145 + 32];
          unint64_t v147 = *(void *)&v156[16 * v14 + 24];
          v148 = (char *)(v144 + 56 * *(void *)&v156[16 * v14 + 16]);
          swift_bridgeObjectRetain();
          specialized _merge<A>(low:mid:high:buffer:by:)((char *)(v144 + 56 * v146), v148, v144 + 56 * v147, __dst, v166);
          if (v162) {
            goto LABEL_231;
          }
          swift_bridgeObjectRelease();
          if (v147 < v146) {
            goto LABEL_266;
          }
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            v156 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v156);
          }
          if (v145 >= *((void *)v156 + 2)) {
            goto LABEL_267;
          }
          uint64_t v149 = &v156[16 * v145 + 32];
          *(void *)uint64_t v149 = v146;
          *((void *)v149 + 1) = v147;
          uint64_t v150 = *((void *)v156 + 2);
          if (v14 > v150) {
            goto LABEL_268;
          }
          memmove(&v156[16 * v14 + 16], &v156[16 * v14 + 32], 16 * (v150 - v14));
          *((void *)v156 + 2) = v150 - 1;
          Swift::Int v14 = v150 - 1;
        }
        while (v150 > 2);
      }
      swift_bridgeObjectRelease();
      *(void *)(v152 + 16) = 0;
      swift_bridgeObjectRelease_n();
      return swift_bridgeObjectRelease();
    }
  }
  else
  {
    Swift::Int v8 = v7 >> 1;
    type metadata accessor for (index: Int, element: TabCustomizationID, id: TabCustomizationID)();
    Swift::Int v9 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)(v9 + 16) = v8;
    uint64_t v152 = v9;
    __dst = (char *)(v9 + 32);
  }
  uint64_t v10 = 0;
  uint64_t v11 = *a1;
  v163 = (unsigned char *)(a2 + 48);
  uint64_t v12 = (char *)MEMORY[0x1E4FBC860];
  uint64_t v13 = v157;
  v165 = *a1;
  while (1)
  {
    uint64_t v155 = v12;
    Swift::Int v15 = v10 + 1;
    int64_t v164 = v10;
    if (v10 + 1 >= v13) {
      goto LABEL_117;
    }
    uint64_t v159 = v10 + 1;
    uint64_t v16 = v11 + 56 * v15;
    unint64_t v17 = *(void *)v16;
    v181 = *(void *)(v16 + 32);
    v178 = *(void *)(v16 + 40);
    Swift::Int v18 = *(unsigned __int8 *)(v16 + 48);
    double v19 = v11 + 56 * v10;
    double v20 = *(void *)(v19 + 32);
    double v21 = *(void *)(v19 + 40);
    double v22 = *(unsigned __int8 *)(v19 + 48);
    if (v18 == 1)
    {
      if ((v22 & 1) == 0)
      {
        double v23 = 1;
        a2 = v166;
        uint64_t v13 = v157;
        goto LABEL_55;
      }
    }
    else if (*(unsigned char *)(v19 + 48))
    {
      double v24 = v10 + 2;
      uint64_t v13 = v157;
      if (v10 + 2 < v157) {
        goto LABEL_22;
      }
      Swift::Int v15 = v10 + 2;
      a2 = v166;
LABEL_117:
      if (v15 < v13) {
        goto LABEL_131;
      }
      goto LABEL_183;
    }
    v172 = *(void *)v19;
    v175 = v17;
    double v25 = *(void *)(v166 + 16);
    if (!v25)
    {
LABEL_54:
      double v23 = v175 < v172;
      uint64_t v11 = v165;
      a2 = v166;
      uint64_t v13 = v157;
      uint64_t v10 = v164;
LABEL_55:
      double v24 = v10 + 2;
      if (v10 + 2 >= v13) {
        goto LABEL_108;
      }
      goto LABEL_56;
    }
    double v26 = 0;
    double v27 = v163;
    while (1)
    {
      double v28 = *((void *)v27 - 2);
      BOOL v29 = *((void *)v27 - 1);
      if ((*v27 & 1) == 0) {
        break;
      }
      if (v18)
      {
        double v30 = v28 == v181 && v29 == v178;
        if (v30 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
          goto LABEL_47;
        }
      }
      if (v22) {
        goto LABEL_42;
      }
LABEL_25:
      ++v26;
      v27 += 24;
      if (v25 == v26) {
        goto LABEL_54;
      }
    }
    if ((v18 & 1) != 0
      || (v28 == v181 ? (int v31 = v29 == v178) : (int v31 = 0), !v31
                                                      && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0))
    {
      if (v22) {
        goto LABEL_25;
      }
LABEL_42:
      long long v32 = v28 == v20 && v29 == v21;
      if (v32 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
        goto LABEL_47;
      }
      goto LABEL_25;
    }
LABEL_47:
    if (v26 >= v25) {
      goto LABEL_275;
    }
    double v33 = *((void *)v27 - 2);
    double v34 = *((void *)v27 - 1);
    uint64_t v11 = v165;
    a2 = v166;
    uint64_t v10 = v164;
    if ((*v27 & 1) == 0)
    {
      if (v18)
      {
        double v23 = 0;
        uint64_t v13 = v157;
      }
      else
      {
        if (v33 != v181 || v34 != v178) {
          goto LABEL_126;
        }
        double v23 = 1;
        uint64_t v13 = v157;
      }
      goto LABEL_55;
    }
    if ((v18 & 1) == 0)
    {
      double v24 = v164 + 2;
      uint64_t v13 = v157;
      if (v164 + 2 >= v157) {
        goto LABEL_130;
      }
LABEL_22:
      double v23 = 0;
      goto LABEL_56;
    }
    if (v33 == v181 && v34 == v178)
    {
      double v24 = v164 + 2;
      uint64_t v13 = v157;
      if (v164 + 2 >= v157) {
        goto LABEL_109;
      }
      goto LABEL_128;
    }
LABEL_126:
    double v24 = v164 + 2;
    uint64_t v13 = v157;
    if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      if (v164 + 2 >= v157) {
        goto LABEL_130;
      }
      goto LABEL_22;
    }
    if (v164 + 2 >= v157) {
      goto LABEL_109;
    }
LABEL_128:
    double v23 = 1;
LABEL_56:
    double v35 = v24;
    double v36 = v159;
    v168 = v23;
    while (2)
    {
      double v24 = v35;
      double v37 = v11 + 56 * v35;
      BOOL v38 = *(void *)v37;
      v182 = *(void *)(v37 + 32);
      v179 = *(void *)(v37 + 40);
      int v39 = *(unsigned __int8 *)(v37 + 48);
      uint64_t v40 = v11 + 56 * v36;
      uint64_t v41 = *(void *)(v40 + 32);
      Swift::Int v42 = *(void *)(v40 + 40);
      Swift::Int v43 = *(unsigned __int8 *)(v40 + 48);
      if (v39 == 1)
      {
        if ((v43 & 1) == 0)
        {
          a2 = v166;
          uint64_t v13 = v157;
          if (v23) {
            goto LABEL_58;
          }
          goto LABEL_130;
        }
      }
      else if (*(unsigned char *)(v40 + 48))
      {
        a2 = v166;
        uint64_t v13 = v157;
        if (!v23) {
          goto LABEL_58;
        }
        goto LABEL_109;
      }
      v170 = *(void *)v40;
      v173 = v38;
      v176 = v24;
      uint64_t v44 = *(void *)(v166 + 16);
      if (!v44)
      {
LABEL_57:
        double v23 = v168;
        uint64_t v11 = v165;
        a2 = v166;
        uint64_t v13 = v157;
        uint64_t v10 = v164;
        double v24 = v176;
        if (((v168 ^ (v173 < v170)) & 1) == 0) {
          goto LABEL_58;
        }
LABEL_108:
        Swift::Int v15 = v24;
        if (v23)
        {
LABEL_109:
          if (v24 >= v10)
          {
            if (v10 < v24)
            {
              uint64_t v54 = 56 * v24;
              uint64_t v55 = v24;
              double v56 = v10;
              double v57 = 56 * v10;
              while (1)
              {
                if (v56 != --v55)
                {
                  if (!v11) {
                    goto LABEL_278;
                  }
                  double v58 = v11 + v57;
                  double v59 = *(void *)(v11 + v57 + 16);
                  double v60 = v11 + v54;
                  uint64_t v61 = *(unsigned char *)(v11 + v57 + 24);
                  Swift::Int v62 = *(unsigned char *)(v11 + v57 + 48);
                  double v63 = *(_OWORD *)(v11 + v57);
                  double v64 = *(_OWORD *)(v11 + v57 + 32);
                  double v65 = *(_OWORD *)(v11 + v54 - 40);
                  uint64_t v66 = *(_OWORD *)(v11 + v54 - 24);
                  long long v67 = *(_OWORD *)(v11 + v54 - 56);
                  *(void *)(v58 + 48) = *(void *)(v11 + v54 - 8);
                  *(_OWORD *)(v58 + 16) = v65;
                  *(_OWORD *)(v58 + 32) = v66;
                  *(_OWORD *)double v58 = v67;
                  *(_OWORD *)(v60 - 56) = v63;
                  *(void *)(v60 - 40) = v59;
                  *(unsigned char *)(v60 - 32) = v61;
                  *(_OWORD *)(v60 - 24) = v64;
                  *(unsigned char *)(v60 - 8) = v62;
                }
                ++v56;
                v54 -= 56;
                v57 += 56;
                if (v56 >= v55) {
                  goto LABEL_130;
                }
              }
            }
            goto LABEL_130;
          }
          goto LABEL_274;
        }
        goto LABEL_117;
      }
      uint64_t v45 = 0;
      uint64_t v46 = v163;
      while (1)
      {
        long long v47 = *((void *)v46 - 2);
        long long v48 = *((void *)v46 - 1);
        if ((*v46 & 1) == 0) {
          break;
        }
        if (v39)
        {
          uint64_t v49 = v47 == v182 && v48 == v179;
          if (v49 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
            goto LABEL_90;
          }
        }
        if (v43) {
          goto LABEL_85;
        }
LABEL_68:
        ++v45;
        v46 += 24;
        if (v44 == v45) {
          goto LABEL_57;
        }
      }
      if ((v39 & 1) != 0
        || (v47 == v182 ? (long long v50 = v48 == v179) : (long long v50 = 0),
            !v50 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0))
      {
        if (v43) {
          goto LABEL_68;
        }
LABEL_85:
        Swift::Int v51 = v47 == v41 && v48 == v42;
        if (v51 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
          goto LABEL_90;
        }
        goto LABEL_68;
      }
LABEL_90:
      if (v45 >= v44) {
        goto LABEL_269;
      }
      double v52 = *((void *)v46 - 2);
      char v53 = *((void *)v46 - 1);
      uint64_t v11 = v165;
      if (*v46)
      {
        a2 = v166;
        uint64_t v10 = v164;
        double v24 = v176;
        if ((v39 & 1) == 0) {
          goto LABEL_97;
        }
        if (v52 == v182 && v53 == v179)
        {
          uint64_t v13 = v157;
          goto LABEL_105;
        }
LABEL_104:
        uint64_t v13 = v157;
        if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
          goto LABEL_98;
        }
LABEL_105:
        double v23 = v168;
        if (!v168) {
          goto LABEL_130;
        }
LABEL_58:
        double v35 = v24 + 1;
        double v36 = v24;
        if (v24 + 1 >= v13)
        {
          ++v24;
          goto LABEL_108;
        }
        continue;
      }
      break;
    }
    a2 = v166;
    uint64_t v10 = v164;
    double v24 = v176;
    if (v39)
    {
LABEL_97:
      uint64_t v13 = v157;
LABEL_98:
      double v23 = v168;
      if (!v168) {
        goto LABEL_58;
      }
      goto LABEL_109;
    }
    if (v52 != v182 || v53 != v179) {
      goto LABEL_104;
    }
    uint64_t v13 = v157;
    double v23 = v168;
    if (v168) {
      goto LABEL_58;
    }
LABEL_130:
    Swift::Int v15 = v24;
    if (v24 >= v13) {
      goto LABEL_183;
    }
LABEL_131:
    if (__OFSUB__(v15, v10)) {
      goto LABEL_270;
    }
    if (v15 - v10 < v153) {
      break;
    }
LABEL_183:
    if (v15 < v10) {
      goto LABEL_264;
    }
    v161 = v15;
    uint64_t v12 = v155;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v155 + 2) + 1, 1, v155);
    }
    uint64_t v91 = *((void *)v12 + 2);
    uint64_t v90 = *((void *)v12 + 3);
    Swift::Int v14 = v91 + 1;
    if (v91 >= v90 >> 1) {
      uint64_t v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v90 > 1), v91 + 1, 1, v12);
    }
    *((void *)v12 + 2) = v14;
    uint64_t v92 = &v12[16 * v91 + 32];
    *(void *)uint64_t v92 = v10;
    *((void *)v92 + 1) = v161;
    if (v91)
    {
      BOOL v93 = v12 + 32;
      while (1)
      {
        uint64_t v94 = v14 - 1;
        if (v14 >= 4)
        {
          uint64_t v99 = &v93[16 * v14];
          BOOL v100 = *((void *)v99 - 8);
          uint64_t v101 = *((void *)v99 - 7);
          uint64_t v105 = __OFSUB__(v101, v100);
          uint64_t v102 = v101 - v100;
          if (v105) {
            goto LABEL_253;
          }
          uint64_t v104 = *((void *)v99 - 6);
          v103 = *((void *)v99 - 5);
          uint64_t v105 = __OFSUB__(v103, v104);
          uint64_t v97 = v103 - v104;
          uint64_t v98 = v105;
          if (v105) {
            goto LABEL_254;
          }
          uint64_t v106 = v14 - 2;
          v107 = &v93[16 * v14 - 32];
          uint64_t v109 = *(void *)v107;
          uint64_t v108 = *((void *)v107 + 1);
          uint64_t v105 = __OFSUB__(v108, v109);
          uint64_t v110 = v108 - v109;
          if (v105) {
            goto LABEL_256;
          }
          uint64_t v105 = __OFADD__(v97, v110);
          unint64_t v111 = v97 + v110;
          if (v105) {
            goto LABEL_259;
          }
          if (v111 >= v102)
          {
            uint64_t v129 = &v93[16 * v94];
            Swift::Int v131 = *(void *)v129;
            Swift::Int v130 = *((void *)v129 + 1);
            uint64_t v105 = __OFSUB__(v130, v131);
            uint64_t v132 = v130 - v131;
            if (v105) {
              goto LABEL_263;
            }
            uint64_t v122 = v97 < v132;
            goto LABEL_221;
          }
        }
        else
        {
          if (v14 != 3)
          {
            uint64_t v123 = *((void *)v12 + 4);
            uint64_t v124 = *((void *)v12 + 5);
            uint64_t v105 = __OFSUB__(v124, v123);
            unint64_t v116 = v124 - v123;
            v117 = v105;
            goto LABEL_215;
          }
          uint64_t v96 = *((void *)v12 + 4);
          char v95 = *((void *)v12 + 5);
          uint64_t v105 = __OFSUB__(v95, v96);
          uint64_t v97 = v95 - v96;
          uint64_t v98 = v105;
        }
        if (v98) {
          goto LABEL_255;
        }
        uint64_t v106 = v14 - 2;
        BOOL v112 = &v93[16 * v14 - 32];
        int64_t v114 = *(void *)v112;
        uint64_t v113 = *((void *)v112 + 1);
        uint64_t v115 = __OFSUB__(v113, v114);
        unint64_t v116 = v113 - v114;
        v117 = v115;
        if (v115) {
          goto LABEL_258;
        }
        uint64_t v118 = &v93[16 * v94];
        uint64_t v120 = *(void *)v118;
        unint64_t v119 = *((void *)v118 + 1);
        uint64_t v105 = __OFSUB__(v119, v120);
        v121 = v119 - v120;
        if (v105) {
          goto LABEL_261;
        }
        if (__OFADD__(v116, v121)) {
          goto LABEL_262;
        }
        if (v116 + v121 >= v97)
        {
          uint64_t v122 = v97 < v121;
LABEL_221:
          if (v122) {
            uint64_t v94 = v106;
          }
          goto LABEL_223;
        }
LABEL_215:
        if (v117) {
          goto LABEL_257;
        }
        unint64_t v125 = &v93[16 * v94];
        uint64_t v127 = *(void *)v125;
        uint64_t v126 = *((void *)v125 + 1);
        uint64_t v105 = __OFSUB__(v126, v127);
        uint64_t v128 = v126 - v127;
        if (v105) {
          goto LABEL_260;
        }
        if (v128 < v116) {
          goto LABEL_15;
        }
LABEL_223:
        uint64_t v133 = v94 - 1;
        if (v94 - 1 >= v14) {
          goto LABEL_249;
        }
        if (!v11) {
          goto LABEL_277;
        }
        uint64_t v134 = &v93[16 * v133];
        uint64_t v135 = *(void *)v134;
        uint64_t v136 = v94;
        uint64_t v137 = &v93[16 * v94];
        uint64_t v138 = *((void *)v137 + 1);
        uint64_t v139 = (char *)(v11 + 56 * *(void *)v134);
        v140 = v11;
        uint64_t v141 = (char *)(v11 + 56 * *(void *)v137);
        v184 = v140 + 56 * v138;
        swift_bridgeObjectRetain();
        specialized _merge<A>(low:mid:high:buffer:by:)(v139, v141, v184, __dst, v166);
        if (v162)
        {
LABEL_231:
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          *(void *)(v152 + 16) = 0;
          goto LABEL_232;
        }
        swift_bridgeObjectRelease();
        if (v138 < v135) {
          goto LABEL_250;
        }
        if (v136 > *((void *)v12 + 2)) {
          goto LABEL_251;
        }
        *(void *)uint64_t v134 = v135;
        BOOL v93 = v12 + 32;
        *(void *)&v12[16 * v133 + 40] = v138;
        uint64_t v142 = *((void *)v12 + 2);
        if (v136 >= v142) {
          goto LABEL_252;
        }
        Swift::Int v14 = v142 - 1;
        memmove(v137, v137 + 16, 16 * (v142 - 1 - v136));
        *((void *)v12 + 2) = v142 - 1;
        uint64_t v122 = v142 > 2;
        uint64_t v11 = v165;
        if (!v122) {
          goto LABEL_15;
        }
      }
    }
    Swift::Int v14 = 1;
LABEL_15:
    uint64_t v13 = v157;
    uint64_t v10 = v161;
    a2 = v166;
    if (v161 >= v157) {
      goto LABEL_235;
    }
  }
  unint64_t v68 = v10 + v153;
  if (__OFADD__(v10, v153)) {
    goto LABEL_272;
  }
  if (v68 >= v13) {
    unint64_t v68 = v13;
  }
  if (v68 >= v10)
  {
    Swift::Int v154 = v68;
    if (v15 == v68) {
      goto LABEL_183;
    }
LABEL_140:
    v160 = v15;
    unint64_t v69 = v15;
    while (1)
    {
      uint64_t v70 = v11 + 56 * v69;
      v183 = *(void *)(v70 + 32);
      uint64_t v71 = *(unsigned __int8 *)(v70 + 48);
      unint64_t v72 = (_OWORD *)(v70 - 56);
      v177 = *(void *)(v70 - 24);
      v180 = *(void *)(v70 + 40);
      v174 = *(void *)(v70 - 16);
      uint64_t v73 = *(unsigned __int8 *)(v70 - 8);
      if (v71 == 1)
      {
        if ((v73 & 1) == 0) {
          goto LABEL_179;
        }
      }
      else if (v73)
      {
        goto LABEL_139;
      }
      v169 = *(void *)v70;
      v171 = v69;
      uint64_t v74 = *(void *)(a2 + 16);
      v167 = *(void *)(v70 - 56);
      if (!v74)
      {
LABEL_173:
        unint64_t v69 = v171;
        a2 = v166;
        uint64_t v10 = v164;
        uint64_t v11 = v165;
        if (v169 < v167) {
          goto LABEL_179;
        }
LABEL_139:
        Swift::Int v15 = v160 + 1;
        if (v160 + 1 == v154)
        {
          Swift::Int v15 = v154;
          goto LABEL_183;
        }
        goto LABEL_140;
      }
      uint64_t v75 = 0;
      char v76 = v163;
      while (1)
      {
        v77 = *((void *)v76 - 2);
        uint64_t v78 = *((void *)v76 - 1);
        if ((*v76 & 1) == 0) {
          break;
        }
        if (v71)
        {
          uint64_t v79 = v77 == v183 && v78 == v180;
          if (v79 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
            goto LABEL_169;
          }
        }
        if (v73) {
          goto LABEL_164;
        }
LABEL_147:
        ++v75;
        v76 += 24;
        if (v74 == v75) {
          goto LABEL_173;
        }
      }
      if (v71) {
        break;
      }
      uint64_t v80 = v77 == v183 && v78 == v180;
      if (!v80 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
        break;
      }
LABEL_169:
      if (v75 >= v74)
      {
        __break(1u);
LABEL_249:
        __break(1u);
LABEL_250:
        __break(1u);
LABEL_251:
        __break(1u);
LABEL_252:
        __break(1u);
LABEL_253:
        __break(1u);
LABEL_254:
        __break(1u);
LABEL_255:
        __break(1u);
LABEL_256:
        __break(1u);
LABEL_257:
        __break(1u);
LABEL_258:
        __break(1u);
LABEL_259:
        __break(1u);
LABEL_260:
        __break(1u);
LABEL_261:
        __break(1u);
LABEL_262:
        __break(1u);
LABEL_263:
        __break(1u);
LABEL_264:
        __break(1u);
LABEL_265:
        __break(1u);
LABEL_266:
        __break(1u);
LABEL_267:
        __break(1u);
LABEL_268:
        __break(1u);
LABEL_269:
        __break(1u);
LABEL_270:
        __break(1u);
LABEL_271:
        __break(1u);
LABEL_272:
        __break(1u);
        goto LABEL_273;
      }
      uint64_t v82 = *((void *)v76 - 2);
      BOOL v83 = *((void *)v76 - 1);
      if (*v76)
      {
        uint64_t v11 = v165;
        a2 = v166;
        uint64_t v10 = v164;
        unint64_t v69 = v171;
        if ((v71 & 1) == 0) {
          goto LABEL_139;
        }
      }
      else
      {
        uint64_t v11 = v165;
        a2 = v166;
        uint64_t v10 = v164;
        unint64_t v69 = v171;
        if (v71) {
          goto LABEL_139;
        }
      }
      if ((v82 != v183 || v83 != v180) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
        goto LABEL_139;
      }
LABEL_179:
      if (!v11) {
        goto LABEL_276;
      }
      --v69;
      unint64_t v84 = *(void *)(v70 + 16);
      uint64_t v85 = *(unsigned char *)(v70 + 24);
      uint64_t v86 = *(unsigned char *)(v70 + 48);
      uint64_t v87 = *(_OWORD *)v70;
      uint64_t v88 = *(_OWORD *)(v70 + 32);
      uint64_t v89 = *(_OWORD *)(v70 - 40);
      *(_OWORD *)uint64_t v70 = *v72;
      *(_OWORD *)(v70 + 16) = v89;
      *(_OWORD *)(v70 + 32) = *(_OWORD *)(v70 - 24);
      *(void *)(v70 + 48) = *(void *)(v70 - 8);
      *unint64_t v72 = v87;
      *(void *)(v70 - 40) = v84;
      *(unsigned char *)(v70 - 32) = v85;
      *(_OWORD *)(v70 - 24) = v88;
      *(unsigned char *)(v70 - 8) = v86;
      if (v69 == v10) {
        goto LABEL_139;
      }
    }
    if (v73) {
      goto LABEL_147;
    }
LABEL_164:
    uint64_t v81 = v77 == v177 && v78 == v174;
    if (v81 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
      goto LABEL_169;
    }
    goto LABEL_147;
  }
LABEL_273:
  __break(1u);
LABEL_274:
  __break(1u);
LABEL_275:
  __break(1u);
LABEL_276:
  swift_bridgeObjectRelease_n();
  __break(1u);
LABEL_277:
  swift_bridgeObjectRelease_n();
  __break(1u);
LABEL_278:
  swift_bridgeObjectRelease_n();
  __break(1u);
LABEL_279:
  swift_bridgeObjectRelease_n();
  __break(1u);
LABEL_280:
  swift_bridgeObjectRelease_n();
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

double _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay7SwiftUI26CodableAccessibilityActionVG_AF03AnygH0Vs5NeverOTg503_s7d4UI37g97ArchivableViewAttachment33_71F62EDC1DAE3BBC7A74521E45BA5A66LLV10propertiesAA0C10PropertiesVvgAA03i2C6H21VAA07CodablecR0VXEfU_AF0gmN10Attachment03_71pqrstuvW0LLVTf1cn_nTf4ngX_n(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  *(void *)&long long v34 = a2;
  *((void *)&v34 + 1) = a3;
  int64_t v5 = *(void *)(a1 + 16);
  if (v5)
  {
    uint64_t v47 = MEMORY[0x1E4FBC860];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5, 0);
    uint64_t v6 = v47;
    long long v7 = (long long *)(a1 + 32);
    do
    {
      uint64_t v35 = v6;
      int64_t v36 = v5;
      long long v8 = v7[3];
      long long v41 = v7[2];
      long long v42 = v8;
      uint64_t v43 = *((void *)v7 + 8);
      long long v9 = v7[1];
      long long v39 = *v7;
      long long v40 = v9;
      if (a4)
      {
        long long v37 = v34;
        outlined retain of CodableAccessibilityAction((uint64_t)&v39);
        outlined retain of CodableAccessibilityAction((uint64_t)&v39);
        outlined copy of Environment<AppIntentExecutor?>.Content(v34, *((uint64_t *)&v34 + 1), 1);
      }
      else
      {
        outlined retain of CodableAccessibilityAction((uint64_t)&v39);
        outlined copy of Environment<AppIntentExecutor?>.Content(v34, *((uint64_t *)&v34 + 1), 0);
        outlined retain of CodableAccessibilityAction((uint64_t)&v39);
        outlined copy of Environment<AppIntentExecutor?>.Content(v34, *((uint64_t *)&v34 + 1), 0);
        os_log_type_t v10 = static os_log_type_t.fault.getter();
        uint64_t v11 = static Log.runtimeIssuesLog.getter();
        if (os_log_type_enabled(v11, v10))
        {
          uint64_t v12 = swift_slowAlloc();
          uint64_t v13 = swift_slowAlloc();
          *(void *)&long long v37 = v13;
          *(_DWORD *)uint64_t v12 = 136315138;
          *(void *)(v12 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000001BLL, 0x8000000188327E20, (uint64_t *)&v37);
          _os_log_impl(&dword_1872C6000, v11, v10, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", (uint8_t *)v12, 0xCu);
          swift_arrayDestroy();
          MEMORY[0x18C119C60](v13, -1, -1);
          MEMORY[0x18C119C60](v12, -1, -1);
        }

        EnvironmentValues.init()();
        swift_getAtKeyPath();
        outlined consume of Environment<AppIntentExecutor?>.Content(v34, *((uint64_t *)&v34 + 1), 0);
        swift_release();
        swift_release();
        outlined consume of Environment<AppIntentExecutor?>.Content(v34, *((uint64_t *)&v34 + 1), 0);
      }
      long long v14 = v37;
      outlined init with take of CodableAccessibilityAction.ActionKind((uint64_t)&v39, (uint64_t)v44);
      outlined init with take of CodableAccessibilityAction.ActionKind((uint64_t)v44, (uint64_t)&v45);
      if (v46 <= 0xFAu)
      {
        long long v37 = v45;
        __int16 v38 = v46;
        uint64_t v15 = AccessibilityText.text.getter();
        uint64_t v16 = v19;
        uint64_t v18 = v20;
        uint64_t v17 = v21 & 1;
      }
      else
      {
        uint64_t v15 = 0;
        uint64_t v16 = 0;
        uint64_t v17 = 0;
        uint64_t v18 = 4 - (v46 + 5);
      }
      uint64_t v22 = swift_allocObject();
      *(_OWORD *)(v22 + 16) = v14;
      long long v23 = v42;
      *(_OWORD *)(v22 + 64) = v41;
      *(_OWORD *)(v22 + 80) = v23;
      *(void *)(v22 + 96) = v43;
      long long v24 = v40;
      *(_OWORD *)(v22 + 32) = v39;
      *(_OWORD *)(v22 + 48) = v24;
      Swift::UInt32 v25 = AccessibilityActionHandlerSeed++;
      type metadata accessor for AnyAccessibilityAction.ConcreteBase<AccessibilityActionStorage<AccessibilityVoidAction>>();
      uint64_t v27 = v26;
      uint64_t v28 = swift_allocObject();
      outlined release of CodableAccessibilityAction((uint64_t)&v39);
      *(void *)(v28 + 16) = v15;
      *(void *)(v28 + 24) = v16;
      *(void *)(v28 + 32) = v17;
      *(void *)(v28 + 40) = v18;
      *(void *)(v28 + 48) = 0;
      *(void *)(v28 + 56) = 0;
      *(void *)(v28 + 64) = 0;
      *(void *)(v28 + 72) = 2;
      *(_OWORD *)(v28 + 80) = 0u;
      *(_OWORD *)(v28 + 96) = 0u;
      *(void *)(v28 + 112) = 0;
      *(void *)(v28 + 120) = partial apply for closure #1 in AnyAccessibilityAction.init(_:appIntentExecutor:);
      *(void *)(v28 + 128) = v22;
      *(_DWORD *)(v28 + 136) = v25;
      uint64_t v6 = v35;
      unint64_t v30 = *(void *)(v35 + 16);
      unint64_t v29 = *(void *)(v35 + 24);
      uint64_t v47 = v35;
      if (v30 >= v29 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v29 > 1), v30 + 1, 1);
        uint64_t v6 = v47;
      }
      *(void *)(v6 + 16) = v30 + 1;
      uint64_t v31 = v6 + 48 * v30;
      *(void *)(v31 + 32) = v28;
      double result = *(double *)&v37;
      *(_OWORD *)(v31 + 40) = v37;
      *(void *)(v31 + 56) = v27;
      *(void *)(v31 + 64) = &protocol witness table for AnyAccessibilityAction.ConcreteBase<A>;
      *(unsigned char *)(v31 + 72) = 0;
      long long v7 = (long long *)((char *)v7 + 72);
      int64_t v5 = v36 - 1;
    }
    while (v36 != 1);
  }
  return result;
}

uint64_t specialized RandomAccessCollection.lowerBound(_:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = a4 - a3;
  if (__OFSUB__(a4, a3))
  {
LABEL_19:
    __break(1u);
    return result;
  }
  if ((uint64_t)v4 >= 1)
  {
    long long v7 = (uint64_t (*)(uint64_t *))result;
    uint64_t v8 = a3;
    while (1)
    {
      uint64_t v9 = v4 >> 1;
      uint64_t v10 = v8 + (v4 >> 1);
      if (__OFADD__(v8, v4 >> 1)) {
        break;
      }
      if (v10 < a3 || v10 > a4) {
        goto LABEL_17;
      }
      uint64_t v12 = v8 + (v4 >> 1);
      double result = v7(&v12);
      if (result)
      {
        if (v10 >= a4) {
          goto LABEL_18;
        }
        uint64_t v8 = v10 + 1;
        uint64_t v9 = v4 + ~v9;
      }
      unint64_t v4 = v9;
      if (v9 <= 0) {
        return v8;
      }
    }
    __break(1u);
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  return a3;
}

uint64_t _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs18EnumeratedSequenceVy7SwiftUI15NavigationStateV12StackContentV5ViewsV0lE0Vy___AH08ModifiedK0VyAH13_VariadicViewO4TreeVy_AH13_VStackLayoutVAH01_nO9_ChildrenVGAH16RootItemModifier33_0CB7C3A8C661577BDD4B07512497B9D9LLVGAH0juV0A1_LLVGG_AH0jU0A1_LLVs5NeverOTB503_s7f14UI25Multimodalhj23V4bodyQrvgAA0E4Item33_0wxyz35BDD4B07512497B9D9LLVSi6offset_AA0D5i4V0E7k13V14PositionedO18V7elementt_tXEfU0_Tf1cn_n(uint64_t a1)
{
  void (*v55)(void *__return_ptr, void *);
  uint64_t v56;
  unint64_t v57;
  char v58;
  char v59;
  unint64_t v60;
  unsigned char v61[168];
  uint64_t (*v62)(uint64_t);
  uint64_t v63;
  unsigned char v64[472];
  void v65[2];
  char v66;
  uint64_t v67;
  void v68[39];
  long long v69;
  unsigned char v70[48];
  char v71;
  uint64_t v72;
  _OWORD v73[4];
  char v74;
  char v75;
  unsigned char __src[416];
  uint64_t v77;
  unsigned char __dst[416];
  void v79[52];
  void v80[2];
  char v81;
  uint64_t v82;
  uint64_t v83;
  BOOL v84;
  unsigned char v85[304];
  uint64_t v86[38];
  void v87[8];
  unsigned __int16 v88;
  unsigned char v89[392];
  unsigned char v90[408];
  uint64_t v91;

  MEMORY[0x1F4188790](a1);
  uint64_t v2 = v1;
  v77 = MEMORY[0x1E4FBC860];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 0, 0);
  uint64_t v3 = v77;
  memcpy(__dst, v2, sizeof(__dst));
  memcpy(__src, v2, sizeof(__src));
  uint64_t v4 = outlined retain of NavigationState.StackContent.Views.ViewsSequence<A, B>((uint64_t)v2);
  double v60 = specialized NavigationState.StackContent.Views.ViewsSequence.startIndex.getter(v4);
  unint64_t v7 = v6;
  unsigned __int8 v8 = v5;
  char v10 = v9 & 1;
  v90[392] = v9 & 1;
  uint64_t v75 = v9 & 1;
  if ((v9 & 1) != 0 && v5 > 1u)
  {
LABEL_3:
    memcpy(v64, __src, 0x1A0uLL);
    outlined release of NavigationState.StackContent.Views.ViewsSequence<A, B>((uint64_t)v64);
    return v3;
  }
  else
  {
    uint64_t v12 = 0;
    while (1)
    {
      uint64_t v91 = v12;
      memcpy(v79, __src, sizeof(v79));
      outlined init with take of NavigationState.Base(v79, v89);
      outlined init with take of NavigationState.Base(v89, v90);
      int v13 = _s7SwiftUI15NavigationStateV4Base33_D6901E90061344656248AB2898527223LLOWOg((uint64_t)v90);
      double v59 = v8;
      if (v13)
      {
        double v57 = v7;
        if (v13 == 1)
        {
          long long v14 = (const void *)_s7SwiftUI15NavigationStateV4Base33_D6901E90061344656248AB2898527223LLOWOj0_((uint64_t)v90);
          memcpy(v64, v14, 0x188uLL);
          memcpy(v85, v14, 0x12BuLL);
          uint64_t v54 = *(void *)&v64[304];
          outlined retain of NavigationState.StackContent.Views.ViewsSequence<A, B>((uint64_t)v79);
          outlined retain of NavigationState.StackContent((uint64_t)v89, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))outlined copy of NavigationState.Base);
          outlined consume of ResolvedNavigationDestinations?(v54);
          unint64_t v15 = v60;
          if (v10 & 1 | (v60 != 0)) {
            goto LABEL_34;
          }
          specialized NavigationState.StackContent.Views.ViewsSequence.view(at:state:baseDepth:)(0, 0, v7, v8, (uint64_t)v85, 0, (uint64_t)&v69);
          uint64_t v16 = (uint64_t *)v64;
        }
        else
        {
          uint64_t v27 = _s7SwiftUI15NavigationStateV4Base33_D6901E90061344656248AB2898527223LLOWOj0_((uint64_t)v90);
          uint64_t v28 = *(void *)v27;
          uint64_t v29 = *(void *)(v27 + 8);
          uint64_t v31 = *(void *)(v27 + 16);
          uint64_t v30 = *(void *)(v27 + 24);
          uint64_t v33 = *(void *)(v27 + 32);
          uint64_t v32 = *(void *)(v27 + 40);
          uint64_t v34 = *(void *)(v27 + 48);
          uint64_t v35 = *(void *)(v27 + 56);
          uint64_t v36 = *(void *)(v27 + 64);
          unsigned __int16 v37 = *(_WORD *)(v27 + 72);
          v87[0] = v29;
          v87[1] = v31;
          v87[2] = v30;
          v87[3] = v33;
          v87[4] = v32;
          v87[5] = v34;
          v87[6] = v35;
          v87[7] = v36;
          uint64_t v88 = v37;
          if (v10) {
            goto LABEL_33;
          }
          unint64_t v15 = v60;
          if ((v60 & 0x8000000000000000) != 0) {
            goto LABEL_30;
          }
          if (*(void *)(v28 + 16) < v60) {
            goto LABEL_31;
          }
          unsigned __int16 v50 = v37;
          uint64_t v51 = v36;
          uint64_t v52 = v35;
          uint64_t v53 = v34;
          double v56 = v32;
          outlined retain of NavigationState.StackContent.Views.ViewsSequence<A, B>((uint64_t)v79);
          outlined retain of NavigationState.StackContent((uint64_t)v89, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))outlined copy of NavigationState.Base);
          uint64_t v38 = swift_bridgeObjectRetain();
          uint64_t v39 = specialized Collection<>.collapsedItemCount<A>(within:splitViewState:)(v38, (uint64_t)v87, 0, (2 * v60) | 1);
          swift_bridgeObjectRelease();
          if (v60 >= *(void *)(v28 + 16)) {
            goto LABEL_32;
          }
          memcpy(v86, (const void *)(v28 + 304 * v60 + 32), 0x12BuLL);
          outlined retain of NavigationColumnState(v86);
          swift_bridgeObjectRelease();
          specialized NavigationState.StackContent.Views.ViewsSequence.view(at:state:baseDepth:)(v60, 0, v57, v59, (uint64_t)v86, v39, (uint64_t)&v69);
          outlined copy of NavigationSplitViewState?(v29, v31, v30, v33, v56, v53, v52, v51, v50, (void (*)(uint64_t, uint64_t, uint64_t))outlined consume of Binding<NavigationSplitViewColumn>?, (void (*)(uint64_t, uint64_t))outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?);
          uint64_t v16 = v86;
        }
        outlined release of NavigationColumnState(v16);
        outlined release of NavigationState.StackContent.Views.ViewsSequence<A, B>((uint64_t)v79);
      }
      else
      {
        uint64_t v17 = _s7SwiftUI15NavigationStateV4Base33_D6901E90061344656248AB2898527223LLOWOj0_((uint64_t)v90);
        uint64_t v18 = *(void *)v17;
        uint64_t v19 = *(unsigned __int8 *)(v17 + 8);
        uint64_t v20 = *(void *)(v17 + 16);
        uint64_t v21 = v79[51];
        outlined retain of NavigationState.StackContent.Views.ViewsSequence<A, B>((uint64_t)v79);
        uint64_t v22 = static HorizontalAlignment.center.getter();
        if (!*(void *)(v21 + 16)) {
          goto LABEL_29;
        }
        uint64_t v23 = v22;
        outlined init with copy of ModifiedContent<_VariadicView.Tree<_VStackLayout, _VariadicView_Children>, RootItemModifier>(v21 + 32, (uint64_t)&v67, (uint64_t (*)(void))type metadata accessor for ModifiedContent<_VariadicView.Tree<_VStackLayout, _VariadicView_Children>, RootItemModifier>);
        v65[0] = v23;
        v65[1] = 0;
        uint64_t v66 = 1;
        v80[0] = 0;
        v80[1] = v18;
        uint64_t v81 = v19;
        uint64_t v82 = v20;
        BOOL v83 = 0;
        unint64_t v84 = v19 == 3;
        uint64_t v55 = (void (*)(void *__return_ptr, void *))v79[49];
        char v24 = v19 >= 3 ? 3 : v19;
        double v58 = v24;
        outlined init with copy of ModifiedContent<_VariadicView.Tree<_VStackLayout, _VariadicView_Children>, RootItemModifier>((uint64_t)v65, (uint64_t)v68, (uint64_t (*)(void))type metadata accessor for _VariadicView.Tree<_VStackLayout, ModifiedContent<_VariadicView.Tree<_VStackLayout, _VariadicView_Children>, RootItemModifier>>);
        v68[15] = 0;
        v68[16] = v18;
        v68[17] = v19;
        v68[18] = v20;
        v68[19] = 0;
        LOBYTE(v68[20]) = v19 == 3;
        BYTE1(v68[20]) = 1;
        uint64_t v25 = swift_allocObject();
        *(unsigned char *)(v25 + 16) = 1;
        outlined init with copy of ModifiedContent<_VariadicView.Tree<_VStackLayout, _VariadicView_Children>, RootItemModifier>((uint64_t)v68, (uint64_t)v61, (uint64_t (*)(void))type metadata accessor for ModifiedContent<_VariadicView.Tree<_VStackLayout, ModifiedContent<_VariadicView.Tree<_VStackLayout, _VariadicView_Children>, RootItemModifier>>, ReadDestinationsModifier<ResolvedNavigationDestinations>>);
        Swift::Int v62 = partial apply for closure #1 in View.readNavigationDestinations<A>(position:isActive:reader:);
        double v63 = v25;
        outlined destroy of ModifiedContent<_VariadicView.Tree<_VStackLayout, _VariadicView_Children>, RootItemModifier>((uint64_t)v68, (uint64_t (*)(void))type metadata accessor for ModifiedContent<_VariadicView.Tree<_VStackLayout, ModifiedContent<_VariadicView.Tree<_VStackLayout, _VariadicView_Children>, RootItemModifier>>, ReadDestinationsModifier<ResolvedNavigationDestinations>>);
        v55(v68, v80);
        outlined init with copy of ModifiedContent<_VariadicView.Tree<_VStackLayout, _VariadicView_Children>, RootItemModifier>((uint64_t)v61, (uint64_t)v64, (uint64_t (*)(void))type metadata accessor for ModifiedContent<ModifiedContent<_VariadicView.Tree<_VStackLayout, ModifiedContent<_VariadicView.Tree<_VStackLayout, _VariadicView_Children>, RootItemModifier>>, ReadDestinationsModifier<ResolvedNavigationDestinations>>, _PreferenceTransformModifier<NavigationDestinationKey>>);
        memcpy(&v64[184], v68, 0x120uLL);
        outlined destroy of ModifiedContent<_VariadicView.Tree<_VStackLayout, _VariadicView_Children>, RootItemModifier>((uint64_t)v61, (uint64_t (*)(void))type metadata accessor for ModifiedContent<ModifiedContent<_VariadicView.Tree<_VStackLayout, ModifiedContent<_VariadicView.Tree<_VStackLayout, _VariadicView_Children>, RootItemModifier>>, ReadDestinationsModifier<ResolvedNavigationDestinations>>, _PreferenceTransformModifier<NavigationDestinationKey>>);
        type metadata accessor for ModifiedContent<_VariadicView.Tree<_VStackLayout, _VariadicView_Children>, RootItemModifier>(0, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<_VariadicView.Tree<_VStackLayout, ModifiedContent<_VariadicView.Tree<_VStackLayout, _VariadicView_Children>, RootItemModifier>>, ReadDestinationsModifier<ResolvedNavigationDestinations>>, _PreferenceTransformModifier<NavigationDestinationKey>>, StackItemModifier>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<_VariadicView.Tree<_VStackLayout, ModifiedContent<_VariadicView.Tree<_VStackLayout, _VariadicView_Children>, RootItemModifier>>, ReadDestinationsModifier<ResolvedNavigationDestinations>>, _PreferenceTransformModifier<NavigationDestinationKey>>);
        lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<_VariadicView.Tree<_VStackLayout, ModifiedContent<_VariadicView.Tree<_VStackLayout, _VariadicView_Children>, RootItemModifier>>, ReadDestinationsModifier<ResolvedNavigationDestinations>>, _PreferenceTransformModifier<NavigationDestinationKey>>, StackItemModifier> and conformance <> ModifiedContent<A, B>();
        uint64_t v26 = AnyView.init<A>(_:)();
        outlined destroy of ModifiedContent<_VariadicView.Tree<_VStackLayout, _VariadicView_Children>, RootItemModifier>((uint64_t)v65, (uint64_t (*)(void))type metadata accessor for _VariadicView.Tree<_VStackLayout, ModifiedContent<_VariadicView.Tree<_VStackLayout, _VariadicView_Children>, RootItemModifier>>);
        memset(&v70[8], 0, 40);
        uint64_t v71 = 2;
        outlined release of NavigationState.StackContent.Views.ViewsSequence<A, B>((uint64_t)v79);
        *(void *)&unint64_t v69 = v26;
        BYTE8(v69) = v58;
        *(void *)uint64_t v70 = 0;
        unint64_t v15 = v60;
      }
      uint64_t v40 = specialized NavigationState.StackContent.Views.ViewsSequence.index(after:)(v15, v10 & 1);
      uint64_t v75 = v43 & 1;
      *(_OWORD *)&v64[40] = *(_OWORD *)&v70[16];
      *(_OWORD *)&v64[56] = *(_OWORD *)&v70[32];
      v64[72] = v71;
      *(_OWORD *)&v64[8] = v69;
      *(_OWORD *)&v64[24] = *(_OWORD *)v70;
      uint64_t v44 = v91;
      if (__OFADD__(v91, 1)) {
        break;
      }
      unint64_t v7 = v41;
      unsigned __int8 v8 = v42;
      double v60 = v40;
      v73[2] = *(_OWORD *)&v64[40];
      v73[3] = *(_OWORD *)&v64[56];
      uint64_t v74 = v64[72];
      v73[0] = *(_OWORD *)&v64[8];
      v73[1] = *(_OWORD *)&v64[24];
      unint64_t v72 = v91;
      *(void *)double v64 = v91;
      outlined init with copy of NavigationState.StackContent.PositionedView((uint64_t)v73, (uint64_t)&v64[8]);
      uint64_t v45 = *(void *)&v64[8];
      swift_retain();
      outlined destroy of NavigationState.StackContent.PositionedView((uint64_t)&v64[8]);
      uint64_t v46 = v72;
      outlined destroy of ModifiedContent<_VariadicView.Tree<_VStackLayout, _VariadicView_Children>, RootItemModifier>((uint64_t)&v72, (uint64_t (*)(void))type metadata accessor for (offset: Int, element: NavigationState.StackContent.PositionedView));
      uint64_t v3 = v77;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v3 + 16) + 1, 1);
        uint64_t v44 = v91;
        uint64_t v3 = v77;
      }
      unint64_t v48 = *(void *)(v3 + 16);
      unint64_t v47 = *(void *)(v3 + 24);
      if (v48 >= v47 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v47 > 1), v48 + 1, 1);
        uint64_t v44 = v91;
        uint64_t v3 = v77;
      }
      *(void *)(v3 + 16) = v48 + 1;
      uint64_t v49 = v3 + 16 * v48;
      *(void *)(v49 + 32) = v45;
      *(void *)(v49 + 40) = v46;
      char v10 = v75;
      uint64_t v12 = v44 + 1;
      if (v75 == 1 && v8 > 1u) {
        goto LABEL_3;
      }
    }
    __break(1u);
LABEL_29:
    __break(1u);
LABEL_30:
    __break(1u);
LABEL_31:
    __break(1u);
LABEL_32:
    __break(1u);
LABEL_33:
    __break(1u);
LABEL_34:
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

char *specialized Sequence.compactMap<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v28 = a3;
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3) {
    return (char *)MEMORY[0x1E4FBC860];
  }
  unsigned __int8 v5 = (void *)(a1 + 32);
  swift_bridgeObjectRetain();
  unint64_t v6 = (char *)MEMORY[0x1E4FBC860];
  do
  {
    uint64_t v8 = v5[3];
    uint64_t v9 = v5[4];
    __swift_project_boxed_opaque_existential_1(v5, v8);
    v21[0] = a2;
    v21[1] = v28;
    (*(void (**)(long long *__return_ptr, void *, uint64_t, uint64_t))(v9 + 96))(&v22, v21, v8, v9);
    if ((void)v26)
    {
      long long v20 = v26;
      __int16 v10 = v23;
      long long v18 = v22;
      long long v19 = v24;
      char v11 = v25;
      uint64_t v12 = v27;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        unint64_t v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v6 + 2) + 1, 1, v6);
      }
      unint64_t v14 = *((void *)v6 + 2);
      unint64_t v13 = *((void *)v6 + 3);
      long long v15 = v20;
      if (v14 >= v13 >> 1)
      {
        uint64_t v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v13 > 1), v14 + 1, 1, v6);
        long long v15 = v20;
        unint64_t v6 = v16;
      }
      *((void *)v6 + 2) = v14 + 1;
      unint64_t v7 = &v6[72 * v14];
      *((_OWORD *)v7 + 2) = v18;
      *((_WORD *)v7 + 24) = v10;
      *(_OWORD *)(v7 + 56) = v19;
      v7[72] = v11 & 1;
      *((_OWORD *)v7 + 5) = v15;
      *((void *)v7 + 12) = v12;
    }
    v5 += 6;
    --v3;
  }
  while (v3);
  swift_bridgeObjectRelease();
  return v6;
}

uint64_t specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5)
{
  uint64_t result = swift_allocObject();
  long long v11 = *(_OWORD *)(a5 + 48);
  *(_OWORD *)(result + 48) = *(_OWORD *)(a5 + 32);
  *(_OWORD *)(result + 64) = v11;
  *(unsigned char *)(result + 80) = *(unsigned char *)(a5 + 64);
  long long v12 = *(_OWORD *)(a5 + 16);
  *(_OWORD *)(result + 16) = *(_OWORD *)a5;
  *(_OWORD *)(result + 32) = v12;
  if (a3 == a2) {
    return swift_release();
  }
  uint64_t v13 = *a4;
  double v14 = *(double *)(a5 + 56);
  char v15 = *(unsigned char *)(a5 + 64);
  uint64_t v16 = *a4 + 40 * a3 - 16;
LABEL_5:
  uint64_t v17 = (double *)(v13 + 40 * a3);
  double v18 = v17[1];
  double v19 = v17[2];
  double v20 = v17[3];
  double v21 = v17[4];
  double v22 = vabdd_f64((v20 + v21) * 0.5, v14);
  uint64_t v23 = v16;
  uint64_t v24 = a1;
  while (1)
  {
    double v25 = vabdd_f64((*(double *)v23 + *(double *)(v23 + 8)) * 0.5, v14);
    if (v15)
    {
      double v26 = *(double *)(v23 - 16);
      if (v18 != v26)
      {
        if (v18 >= v26) {
          goto LABEL_4;
        }
        goto LABEL_14;
      }
LABEL_11:
      if (v22 >= v25) {
        goto LABEL_4;
      }
      goto LABEL_14;
    }
    double v27 = *(double *)(v23 - 8);
    if (v19 == v27) {
      goto LABEL_11;
    }
    if (v27 >= v19) {
      goto LABEL_4;
    }
LABEL_14:
    if (!v13) {
      break;
    }
    uint64_t v28 = *(void *)(v23 + 16);
    long long v29 = *(_OWORD *)(v23 - 8);
    *(_OWORD *)(v23 + 16) = *(_OWORD *)(v23 - 24);
    *(_OWORD *)(v23 + 32) = v29;
    *(void *)(v23 + 48) = *(void *)(v23 + 8);
    *(void *)(v23 - 24) = v28;
    *(double *)(v23 - 16) = v18;
    *(double *)(v23 - 8) = v19;
    *(double *)uint64_t v23 = v20;
    *(double *)(v23 + 8) = v21;
    v23 -= 40;
    if (a3 == ++v24)
    {
LABEL_4:
      ++a3;
      v16 += 40;
      if (a3 == a2) {
        return swift_release();
      }
      goto LABEL_5;
    }
  }
  __break(1u);
  return result;
}

uint64_t thunk for @escaping @callee_guaranteed @Sendable @async () -> ()(uint64_t a1, int *a2)
{
  unsigned __int8 v5 = (uint64_t (*)(void))((char *)a2 + *a2);
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v3;
  void *v3 = v2;
  v3[1] = partial apply for closure #1 in closure #1 in AppDelegate.application(_:handleEventsForBackgroundURLSession:completionHandler:);
  return v5();
}

unsigned __int8 *assignWithCopy for LazyState(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  if (a1 != a2)
  {
    if (*(void *)(v6 + 64) <= 0x10uLL) {
      uint64_t v7 = 16;
    }
    else {
      uint64_t v7 = *(void *)(v6 + 64);
    }
    unsigned int v8 = a1[v7];
    unsigned int v9 = v8 - 2;
    if (v8 >= 2)
    {
      if (v7 <= 3) {
        uint64_t v10 = v7;
      }
      else {
        uint64_t v10 = 4;
      }
      switch(v10)
      {
        case 1:
          int v11 = *a1;
          goto LABEL_14;
        case 2:
          int v11 = *(unsigned __int16 *)a1;
          goto LABEL_14;
        case 3:
          int v11 = *(unsigned __int16 *)a1 | (a1[2] << 16);
          goto LABEL_14;
        case 4:
          int v11 = *(_DWORD *)a1;
LABEL_14:
          int v12 = (v11 | (v9 << (8 * v7))) + 2;
          unsigned int v8 = v11 + 2;
          if (v7 < 4) {
            unsigned int v8 = v12;
          }
          break;
        default:
          break;
      }
    }
    if (v8 == 1) {
      (*(void (**)(unsigned __int8 *, uint64_t))(v6 + 8))(a1, v5);
    }
    else {
      swift_release();
    }
    unsigned int v13 = a2[v7];
    unsigned int v14 = v13 - 2;
    if (v13 >= 2)
    {
      if (v7 <= 3) {
        uint64_t v15 = v7;
      }
      else {
        uint64_t v15 = 4;
      }
      switch(v15)
      {
        case 1:
          int v16 = *a2;
          goto LABEL_28;
        case 2:
          int v16 = *(unsigned __int16 *)a2;
          goto LABEL_28;
        case 3:
          int v16 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          goto LABEL_28;
        case 4:
          int v16 = *(_DWORD *)a2;
LABEL_28:
          int v17 = (v16 | (v14 << (8 * v7))) + 2;
          unsigned int v13 = v16 + 2;
          if (v7 < 4) {
            unsigned int v13 = v17;
          }
          break;
        default:
          break;
      }
    }
    if (v13 == 1)
    {
      (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v6 + 16))(a1, a2, v5);
      a1[v7] = 1;
    }
    else
    {
      uint64_t v18 = *((void *)a2 + 1);
      *(void *)a1 = *(void *)a2;
      *((void *)a1 + 1) = v18;
      a1[v7] = 0;
      swift_retain();
    }
  }
  unint64_t v19 = *(void *)(v6 + 64);
  if (v19 <= 0x10) {
    unint64_t v19 = 16;
  }
  *(void *)((unint64_t)&a1[v19 + 8] & 0xFFFFFFFFFFFFFFF8) = *(void *)((unint64_t)&a2[v19 + 8] & 0xFFFFFFFFFFFFFFF8);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t destroy for BaseGauge(uint64_t a1, void *a2)
{
  uint64_t v3 = a2[2];
  uint64_t v4 = *(void *)(v3 - 8);
  unint64_t v5 = (a1 + *(unsigned __int8 *)(v4 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v4 + 48))(v5, 1, v3)) {
    (*(void (**)(unint64_t, uint64_t))(v4 + 8))(v5, v3);
  }
  int v6 = *(_DWORD *)(v4 + 84);
  uint64_t v7 = *(void *)(v4 + 64);
  uint64_t v8 = a2[3];
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = v7 + v5;
  if (!v6) {
    ++v10;
  }
  unint64_t v11 = (v10 + *(unsigned __int8 *)(v9 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(*(void *)(a2[3] - 8) + 48))(v11, 1, v8))(*(void (**)(unint64_t, uint64_t))(v9 + 8))(v11, v8); {
  uint64_t v12 = a2[4];
  }
  uint64_t v23 = *(void *)(v12 - 8);
  uint64_t v13 = *(unsigned __int8 *)(v23 + 80);
  unint64_t v14 = *(void *)(v9 + 64) + v11;
  if (!*(_DWORD *)(v9 + 84)) {
    ++v14;
  }
  uint64_t v15 = v14 + v13;
  uint64_t v16 = ~v13;
  unint64_t v17 = (v14 + v13) & ~v13;
  uint64_t v18 = *(unsigned int (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 48);
  if (!v18(v17, 1, v12)) {
    (*(void (**)(unint64_t, uint64_t))(v23 + 8))(v17, v12);
  }
  uint64_t v19 = (v15 | v13) + *(void *)(v23 + 64);
  if (!*(_DWORD *)(v23 + 84)) {
    ++v19;
  }
  uint64_t v20 = v19 & v16;
  uint64_t result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v18)(v19 & v16, 1, v12);
  if (!result)
  {
    double v22 = *(uint64_t (**)(uint64_t, uint64_t))(v23 + 8);
    return v22(v20, v12);
  }
  return result;
}

uint64_t assignWithTake for _JSONKey(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  return a1;
}

uint64_t assignWithCopy for _JSONKey(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(void *)(a1 + 16) = v4;
  return a1;
}

uint64_t static ForEach<>._makeRows(content:inputs:)(int *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v56 = *MEMORY[0x1E4F143B8];
  int v32 = *a1;
  long long v14 = *(_OWORD *)(a2 + 112);
  v53[6] = *(_OWORD *)(a2 + 96);
  v53[7] = v14;
  long long v54 = *(_OWORD *)(a2 + 128);
  uint64_t v55 = *(void *)(a2 + 144);
  long long v15 = *(_OWORD *)(a2 + 48);
  v53[2] = *(_OWORD *)(a2 + 32);
  v53[3] = v15;
  long long v16 = *(_OWORD *)(a2 + 80);
  v53[4] = *(_OWORD *)(a2 + 64);
  v53[5] = v16;
  long long v17 = *(_OWORD *)(a2 + 16);
  v53[0] = *(_OWORD *)a2;
  v53[1] = v17;
  *(void *)&long long v43 = a3;
  *((void *)&v43 + 1) = a4;
  *(void *)&long long v44 = a5;
  *((void *)&v44 + 1) = a6;
  *(void *)&long long v45 = a7;
  *((void *)&v45 + 1) = a8;
  type metadata accessor for TableRowForEachState();
  long long v18 = *(_OWORD *)(a2 + 112);
  long long v49 = *(_OWORD *)(a2 + 96);
  long long v50 = v18;
  long long v51 = *(_OWORD *)(a2 + 128);
  uint64_t v52 = *(void *)(a2 + 144);
  long long v19 = *(_OWORD *)(a2 + 48);
  long long v45 = *(_OWORD *)(a2 + 32);
  long long v46 = v19;
  long long v20 = *(_OWORD *)(a2 + 80);
  long long v47 = *(_OWORD *)(a2 + 64);
  long long v48 = v20;
  long long v21 = *(_OWORD *)(a2 + 16);
  long long v43 = *(_OWORD *)a2;
  long long v44 = v21;
  outlined retain of _TableRowInputs((uint64_t)v53);
  swift_allocObject();
  double v22 = TableRowForEachState.init(inputs:)(&v43);
  swift_retain();
  *(void *)&long long v43 = a3;
  *((void *)&v43 + 1) = a4;
  *(void *)&long long v44 = a5;
  *((void *)&v44 + 1) = a6;
  *(void *)&long long v45 = a7;
  type metadata accessor for ForEach();
  type metadata accessor for _GraphValue();
  uint64_t v33 = v22;
  int v34 = _GraphValue.value.getter();
  *(void *)&long long v43 = a3;
  *((void *)&v43 + 1) = a4;
  *(void *)&long long v44 = a5;
  *((void *)&v44 + 1) = a6;
  *(void *)&long long v45 = a7;
  *((void *)&v45 + 1) = a8;
  uint64_t v40 = type metadata accessor for TableRowForEachState.Info();
  *(void *)&long long v43 = a3;
  *((void *)&v43 + 1) = a4;
  *(void *)&long long v44 = a5;
  *((void *)&v44 + 1) = a6;
  *(void *)&long long v45 = a7;
  *((void *)&v45 + 1) = a8;
  uint64_t v41 = type metadata accessor for TableRowForEachState.Info.Init();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v23 = type metadata accessor for Attribute();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v33, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TA_4, (uint64_t)v39, v41, MEMORY[0x1E4FBC248], v23, MEMORY[0x1E4FBC278], v24);
  swift_release();
  v22[44] = v43;
  *((unsigned char *)v22 + 180) = 0;
  LODWORD(v43) = v32;
  swift_retain();
  int v25 = _GraphValue.value.getter();
  uint64_t v33 = v22;
  int v34 = v25;
  *(void *)&long long v43 = a3;
  *((void *)&v43 + 1) = a4;
  *(void *)&long long v44 = a5;
  *((void *)&v44 + 1) = a6;
  *(void *)&long long v45 = a7;
  *((void *)&v45 + 1) = a8;
  uint64_t List = type metadata accessor for ForEach<>.MakeList();
  uint64_t v37 = List;
  uint64_t v38 = swift_getWitnessTable();
  _s14AttributeGraph0A0Vy7SwiftUI12TableRowListVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for Attribute<TableRowList>, (uint64_t)&type metadata for TableRowList, MEMORY[0x1E4F4E740]);
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v33, (uint64_t)partial apply for closure #1 in Attribute.init<A>(_:), (uint64_t)v36, List, MEMORY[0x1E4FBC248], v27, MEMORY[0x1E4FBC278], v28);
  swift_release();
  int v29 = v43;
  v22[46] = v43;
  *((unsigned char *)v22 + 188) = 0;
  PreferencesOutputs.init()();
  *(void *)&long long v43 = *((void *)&v54 + 1);
  DWORD2(v43) = v55;
  int v35 = v29;
  swift_bridgeObjectRetain();
  PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t outlined init with copy of Button<Text>(uint64_t a1, uint64_t a2)
{
  _s7SwiftUI6ButtonVyAA09PrimitiveC18StyleConfigurationV5LabelVGMaTm_5(0, (unint64_t *)&lazy cache variable for type metadata for Button<Text>, MEMORY[0x1E4F41420], MEMORY[0x1E4F41418], (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for Button);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t Scene.onChange<A>(of:initial:_:)@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v47 = a7;
  uint64_t v46 = a5;
  uint64_t v52 = a8;
  uint64_t v53 = a3;
  int v48 = a2;
  uint64_t v11 = *(void *)(a6 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v42 = v12;
  uint64_t v13 = (char *)&v38 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v44 = v14;
  uint64_t v15 = type metadata accessor for _ValueActionModifier2();
  uint64_t v16 = *(void *)(v15 - 8);
  MEMORY[0x1F4188790](v15);
  long long v18 = (char *)&v38 - v17;
  uint64_t v19 = type metadata accessor for ModifiedContent();
  uint64_t v50 = *(void *)(v19 - 8);
  uint64_t v51 = v19;
  double v20 = MEMORY[0x1F4188790](v19);
  double v22 = (char *)&v38 - v21;
  uint64_t v23 = *(void (**)(char *, uint64_t, uint64_t))(v11 + 16);
  uint64_t v43 = a1;
  uint64_t v39 = v23;
  ((void (*)(char *, uint64_t, uint64_t, double))v23)(v13, a1, a6, v20);
  uint64_t v41 = v11;
  uint64_t v24 = *(void (**)(char *, char *, uint64_t))(v11 + 32);
  swift_retain();
  uint64_t v40 = v24;
  v24(v18, v13, a6);
  int v25 = &v18[*(int *)(v15 + 36)];
  *(void *)int v25 = v53;
  *((void *)v25 + 1) = a4;
  uint64_t v45 = a4;
  uint64_t v27 = v46;
  uint64_t v26 = v47;
  long long v49 = v22;
  Scene.modifier<A>(_:)(v18, v46, v15, v47);
  (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);
  uint64_t v28 = 0;
  int v29 = 0;
  if (v48)
  {
    v39(v13, v43, a6);
    unint64_t v30 = (*(unsigned __int8 *)(v41 + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(v41 + 80);
    int v29 = (void *)swift_allocObject();
    v29[2] = v27;
    v29[3] = a6;
    uint64_t v31 = v44;
    v29[4] = v26;
    v29[5] = v31;
    int v32 = (char *)v29 + v30;
    uint64_t v33 = v45;
    v29[6] = v53;
    v29[7] = v33;
    v40(v32, v13, a6);
    swift_retain();
    uint64_t v28 = partial apply for closure #1 in Scene.onChange<A>(of:initial:_:);
  }
  v56[0] = v28;
  v56[1] = v29;
  v56[2] = 0;
  v56[3] = 0;
  uint64_t v54 = v26;
  uint64_t v55 = &protocol witness table for _ValueActionModifier2<A>;
  uint64_t v34 = v51;
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v36 = v49;
  Scene.modifier<A>(_:)(v56, v34, MEMORY[0x1E4F40EE0], WitnessTable);
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?((uint64_t)v28);
  return (*(uint64_t (**)(char *, uint64_t))(v50 + 8))(v36, v34);
}

uint64_t destroy for Gauge(uint64_t a1, void *a2)
{
  uint64_t v3 = a2[2];
  uint64_t v4 = *(void *)(v3 - 8);
  unint64_t v5 = (a1 + *(unsigned __int8 *)(v4 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v4 + 48))(v5, 1, v3)) {
    (*(void (**)(unint64_t, uint64_t))(v4 + 8))(v5, v3);
  }
  int v6 = *(_DWORD *)(v4 + 84);
  uint64_t v7 = *(void *)(v4 + 64);
  uint64_t v8 = a2[3];
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = v7 + v5;
  if (!v6) {
    ++v10;
  }
  unint64_t v11 = (v10 + *(unsigned __int8 *)(v9 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(*(void *)(a2[3] - 8) + 48))(v11, 1, v8))(*(void (**)(unint64_t, uint64_t))(v9 + 8))(v11, v8); {
  int v12 = *(_DWORD *)(v9 + 84);
  }
  uint64_t v13 = *(void *)(v9 + 64);
  uint64_t v14 = a2[4];
  uint64_t v15 = *(void *)(v14 - 8);
  BOOL v16 = v12 == 0;
  uint64_t v17 = *(unsigned __int8 *)(v15 + 80);
  uint64_t v18 = v13 + v11;
  if (v16) {
    ++v18;
  }
  uint64_t v19 = v18 + v17;
  uint64_t v20 = (v18 + v17) & ~v17;
  uint64_t v21 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a2[4] - 8) + 48);
  if (!v21(v20, 1, v14)) {
    (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v20, v14);
  }
  if (*(_DWORD *)(v15 + 84)) {
    uint64_t v22 = *(void *)(v15 + 64);
  }
  else {
    uint64_t v22 = *(void *)(v15 + 64) + 1;
  }
  uint64_t v23 = ((v19 | v17) + v22) & ~v17;
  if (!v21(v23, 1, v14)) {
    (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v23, v14);
  }
  uint64_t v24 = a2[5];
  uint64_t v28 = *(void *)(v24 - 8);
  unint64_t v25 = (v23 + v22 + *(unsigned __int8 *)(v28 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v28 + 80);
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v28 + 48))(v25, 1, v24);
  if (!result)
  {
    uint64_t v27 = *(uint64_t (**)(unint64_t, uint64_t))(v28 + 8);
    return v27(v25, v24);
  }
  return result;
}

void CustomizableURLDocumentViewControllerRepresentable.updateUIViewController(_:context:)(void *a1)
{
  uint64_t v3 = *(void *)(v1 + 72);
  uint64_t v4 = *(void *)(v1 + 96);
  uint64_t v5 = *(void *)(v1 + 104);
  uint64_t v28 = *(void *)(v1 + 112);
  uint64_t v29 = *(void *)(v1 + 64);
  uint64_t v6 = *(void *)(v1 + 128);
  uint64_t v27 = *(void *)(v1 + 120);
  uint64_t v7 = *(void *)(v1 + 136);
  char v8 = *(unsigned char *)(v1 + 144);
  self;
  uint64_t v9 = swift_dynamicCastObjCClass();
  if (!v9) {
    return;
  }
  uint64_t v10 = (void *)v9;
  id v11 = a1;
  id v12 = objc_msgSend(v10, sel_viewControllers);
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIViewController);
  unint64_t v13 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v13 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v25 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v25) {
      goto LABEL_4;
    }
LABEL_15:

    swift_bridgeObjectRelease();
    return;
  }
  if (!*(void *)((v13 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
    goto LABEL_15;
  }
LABEL_4:
  if ((v13 & 0xC000000000000001) != 0)
  {
    id v14 = (id)MEMORY[0x18C117680](0, v13);
  }
  else
  {
    if (!*(void *)((v13 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      return;
    }
    id v14 = *(id *)(v13 + 32);
  }
  id v26 = v14;
  swift_bridgeObjectRelease();
  type metadata accessor for CustomizableURLDocumentViewController();
  uint64_t v15 = swift_dynamicCastClass();
  if (v15)
  {
    uint64_t v16 = v15;
    id v26 = v26;
    outlined copy of Environment<EnvironmentValues>.Content(v6, v7, v8);
    specialized Environment.wrappedValue.getter(v6, v7, v8, &v30);
    outlined consume of Environment<EnvironmentValues>.Content(v6, v7, v8);
    uint64_t v17 = Text.resolveString(in:with:idiom:)();
    uint64_t v19 = v18;
    swift_release();
    swift_release();
    uint64_t v20 = (uint64_t *)(v16 + OBJC_IVAR____TtC7SwiftUI34CustomizableDocumentViewController_cardTitle);
    *uint64_t v20 = v17;
    v20[1] = v19;

    swift_bridgeObjectRelease();
    *(void *)(v16 + OBJC_IVAR____TtC7SwiftUI34CustomizableDocumentViewController_actions) = v3;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    uint64_t v21 = (uint64_t *)(v16 + OBJC_IVAR____TtC7SwiftUI34CustomizableDocumentViewController_backgroundAccessoryView);
    uint64_t v22 = *(void *)(v16 + OBJC_IVAR____TtC7SwiftUI34CustomizableDocumentViewController_backgroundAccessoryView);
    *uint64_t v21 = v4;
    v21[1] = v5;
    outlined copy of AppIntentExecutor?(v4);
    outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v22);
    uint64_t v23 = (uint64_t *)(v16 + OBJC_IVAR____TtC7SwiftUI34CustomizableDocumentViewController_overlayAccessoryView);
    uint64_t v24 = *(void *)(v16 + OBJC_IVAR____TtC7SwiftUI34CustomizableDocumentViewController_overlayAccessoryView);
    *uint64_t v23 = v28;
    v23[1] = v27;
    outlined copy of AppIntentExecutor?(v28);
    outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v24);
    *(void *)(v16 + OBJC_IVAR____TtC7SwiftUI34CustomizableDocumentViewController_screenBackground) = v29;
    swift_retain();
    swift_release();
    CustomizableDocumentViewController.setupLaunchOptions()();
  }
  else
  {
  }
}

uint64_t closure #1 in View.draggable<A, B>(_:preview:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  type metadata accessor for NSItemProvider();
  uint64_t v16 = (void *)swift_allocObject();
  v16[2] = a3;
  v16[3] = a4;
  v16[4] = a5;
  v16[5] = a6;
  v16[6] = a7;
  v16[7] = a8;
  v16[8] = a1;
  v16[9] = a2;
  swift_retain();
  return NSItemProvider.init<A>(transferable:)();
}

uint64_t View.alert<A>(_:isPresented:actions:)@<X0>(uint64_t a1@<X4>, uint64_t a2@<X5>, int a3@<W6>, uint64_t (*a4)(uint64_t)@<X7>, uint64_t a5@<X8>, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v15 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v17 = v16;
  char v19 = v18 & 1;
  View.alert<A>(_:isPresented:actions:)(v15, v16, v18 & 1, v20, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10);
  outlined consume of Text.Storage(v15, v17, v19);

  return swift_bridgeObjectRelease();
}

uint64_t View.alert<A, B, C>(_:isPresented:presenting:actions:message:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, int a7@<W6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  uint64_t v48 = a14;
  uint64_t v49 = a15;
  uint64_t v50 = a16;
  uint64_t v51 = a17;
  uint64_t v52 = a18;
  uint64_t v53 = a19;
  uint64_t v54 = a20;
  uint64_t v55 = a5;
  uint64_t v56 = a6;
  char v57 = a7;
  uint64_t v58 = a8;
  uint64_t v59 = a10;
  uint64_t v60 = a11;
  uint64_t v34 = a14;
  uint64_t v35 = a15;
  uint64_t v36 = a16;
  uint64_t v37 = a17;
  uint64_t v38 = a18;
  uint64_t v39 = a19;
  uint64_t v40 = a20;
  uint64_t v41 = a5;
  uint64_t v42 = a6;
  char v43 = a7;
  uint64_t v44 = a8;
  uint64_t v45 = a12;
  uint64_t v46 = a13;
  uint64_t v24 = type metadata accessor for Optional();
  uint64_t v25 = type metadata accessor for Optional();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v27 = swift_getWitnessTable();
  return View.alert<A, B>(_:isPresented:actions:message:)(a1, a2, a3 & 1, a4, a5, a6, a7, (uint64_t (*)(uint64_t))partial apply for closure #1 in View.alert<A, B, C>(_:isPresented:presenting:actions:message:), a9, (uint64_t)v47, (void (*)(uint64_t))partial apply for closure #2 in View.alert<A, B, C>(_:isPresented:presenting:actions:message:), (uint64_t)v33, a14, v24, v25, a18, WitnessTable, v27);
}

uint64_t View.presentationBackgroundInteraction(_:for:)(uint64_t *a1, char *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  char v4 = *a2;
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = v2;
  *(void *)(v5 + 24) = v3;
  *(unsigned char *)(v5 + 32) = v4;
  View.transformPreference<A>(_:_:)();

  return swift_release();
}

uint64_t View.presentationCompactAdaptation(horizontal:vertical:)(char *a1, char *a2)
{
  char v2 = *a1;
  char v3 = *a2;
  uint64_t v4 = swift_allocObject();
  *(unsigned char *)(v4 + 16) = v2;
  *(unsigned char *)(v4 + 17) = v3;
  View.transformPreference<A>(_:_:)();

  return swift_release();
}

void View.hasSeamlessTitlebarInset(_:)()
{
}

uint64_t View.accessibilityDirectTouch(_:options:)(char a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = *a2;
  v8[0] = a1 & 1;
  v8[1] = v6;
  lazy protocol witness table accessor for type AccessibilityProperties.TouchInfoKey and conformance AccessibilityProperties.TouchInfoKey();
  return View.accessibility<A>(_:_:isEnabled:)((uint64_t)&type metadata for AccessibilityProperties.TouchInfoKey, (uint64_t)v8, 1, a3, (uint64_t)&type metadata for AccessibilityProperties.TouchInfoKey, a4);
}

uint64_t View.formRowIndentationLevel(_:)(uint64_t a1, char a2)
{
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = a1;
  *(unsigned char *)(v4 + 24) = a2 & 1;
  View.transformTrait<A>(_:transform:)();

  return swift_release();
}

void View.onModifierKeysChanged(mask:initial:_:)()
{
}

uint64_t View.fileExporter<A, B>(isPresented:items:contentTypes:onCompletion:onCancellation:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  uint64_t v26 = a10;
  uint64_t v27 = a11;
  uint64_t v28 = a12;
  uint64_t v29 = a13;
  uint64_t v30 = a14;
  uint64_t v31 = a15;
  uint64_t v20 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF((void (*)(char *, char *))partial apply for closure #1 in View.fileExporter<A, B>(isPresented:items:contentTypes:onCompletion:onCancellation:), (uint64_t)v25, a11, (uint64_t)&type metadata for AnyTransferable, MEMORY[0x1E4FBC248], a14, MEMORY[0x1E4FBC278], a7);
  View._fileExporter(isPresented:items:contentTypes:onCompletion:onCancellation:)(a1, a2, a3, v20, a4, a5, a6, a7, a8, a9, a10, a13);
  return swift_bridgeObjectRelease();
}

uint64_t closure #1 in View.contextMenu<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v50 = a4;
  uint64_t v47 = a2;
  uint64_t v54 = a6;
  type metadata accessor for StyleContextWriter<MenuStyleContext>();
  uint64_t v9 = type metadata accessor for ModifiedContent();
  uint64_t v56 = a5;
  unint64_t v57 = lazy protocol witness table accessor for type StyleContextWriter<MenuStyleContext> and conformance StyleContextWriter<A>();
  uint64_t v48 = v9;
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v10 = type metadata accessor for ZStack();
  uint64_t v53 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v10);
  char v43 = (char *)&v40 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v12);
  uint64_t v45 = (char *)&v40 - v13;
  uint64_t v46 = a3;
  uint64_t v49 = a5;
  uint64_t v14 = type metadata accessor for ContextMenu();
  uint64_t v15 = type metadata accessor for Optional();
  uint64_t v16 = *(void *)(v15 - 8);
  MEMORY[0x1F4188790](v15);
  char v18 = (char *)&v40 - v17;
  uint64_t v19 = *(void *)(v14 - 8);
  MEMORY[0x1F4188790](v20);
  uint64_t v51 = (char *)&v40 - v21;
  uint64_t v22 = type metadata accessor for Optional();
  uint64_t v23 = *(void *)(v22 - 8);
  MEMORY[0x1F4188790](v22);
  uint64_t v25 = (char *)&v40 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v27 = MEMORY[0x1F4188790](v26);
  uint64_t v52 = (uint64_t)&v40 - v28;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v16 + 16))(v18, a1, v15, v27);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v18, 1, v14) == 1)
  {
    (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v53 + 56))(v25, 1, 1, v10);
    swift_getWitnessTable();
    uint64_t v29 = v52;
    static ToolbarContentBuilder.buildIf<A>(_:)((uint64_t)v25, v52);
    uint64_t v30 = *(void (**)(char *, uint64_t))(v23 + 8);
    v30(v25, v22);
  }
  else
  {
    uint64_t v41 = v14;
    uint64_t v42 = v19;
    uint64_t v31 = v51;
    uint64_t v32 = (*(uint64_t (**)(void))(v19 + 32))();
    MEMORY[0x1F4188790](v32);
    uint64_t v33 = v46;
    *(&v40 - 6) = v47;
    *(&v40 - 5) = v33;
    uint64_t v34 = v49;
    *(&v40 - 4) = v50;
    *(&v40 - 3) = v34;
    *(&v40 - 2) = (uint64_t)v31;
    static Alignment.center.getter();
    uint64_t v35 = v43;
    ZStack.init(alignment:content:)();
    swift_getWitnessTable();
    uint64_t v36 = v45;
    static ViewBuilder.buildExpression<A>(_:)(v35);
    uint64_t v37 = v53;
    uint64_t v38 = *(void (**)(char *, uint64_t))(v53 + 8);
    v38(v35, v10);
    static ViewBuilder.buildExpression<A>(_:)(v36);
    v38(v36, v10);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v37 + 56))(v25, 0, 1, v10);
    uint64_t v29 = v52;
    static ToolbarContentBuilder.buildIf<A>(_:)((uint64_t)v25, v52);
    uint64_t v30 = *(void (**)(char *, uint64_t))(v23 + 8);
    v30(v25, v22);
    (*(void (**)(char *, uint64_t))(v42 + 8))(v51, v41);
  }
  uint64_t v55 = swift_getWitnessTable();
  swift_getWitnessTable();
  static ViewBuilder.buildExpression<A>(_:)(v29);
  return ((uint64_t (*)(uint64_t, uint64_t))v30)(v29, v22);
}

uint64_t associated type witness table accessor for View.Body : View in Link<A>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t initializeWithCopy for Link(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8) + 16;
  (*(void (**)(void))v4)();
  uint64_t v6 = *(void *)(v4 + 48);
  uint64_t v28 = type metadata accessor for URL();
  uint64_t v7 = *(void *)(v28 - 8);
  uint64_t v8 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v9 = (v8 | 7) + v6;
  uint64_t v10 = (v9 + a1) & ~(v8 | 7);
  uint64_t v11 = (v9 + a2) & ~(v8 | 7);
  uint64_t v12 = *(void *)v11;
  uint64_t v13 = *(void *)(v11 + 8);
  uint64_t v14 = *(void *)(v11 + 0x10);
  uint64_t v15 = *(void *)(v11 + 0x18);
  char v16 = *(unsigned char *)(v11 + 0x22);
  __int16 v17 = *(_WORD *)(v11 + 0x20);
  outlined copy of Environment<OpenURLAction>.Content(*(void *)v11, v13, v14, v15, v17, v16);
  *(void *)uint64_t v10 = v12;
  *(void *)(v10 + 8) = v13;
  *(void *)(v10 + 16) = v14;
  *(void *)(v10 + 24) = v15;
  *(_WORD *)(v10 + 32) = v17;
  *(unsigned char *)(v10 + 34) = v16;
  unint64_t v18 = (v10 + 42) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v19 = (v11 + 42) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v20 = *(void *)v19;
  uint64_t v21 = *(void *)(v19 + 8);
  uint64_t v22 = *(void *)(v19 + 16);
  uint64_t v23 = *(void *)(v19 + 24);
  char v24 = *(unsigned char *)(v19 + 34);
  __int16 v25 = *(_WORD *)(v19 + 32);
  outlined copy of Environment<OpenURLAction>.Content(*(void *)v19, v21, v22, v23, v25, v24);
  *(void *)unint64_t v18 = v20;
  *(void *)(v18 + 8) = v21;
  *(void *)(v18 + 16) = v22;
  *(void *)(v18 + 24) = v23;
  *(_WORD *)(v18 + 32) = v25;
  *(unsigned char *)(v18 + 34) = v24;
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v7 + 16))((v8 + 35 + v18) & ~v8, (v8 + 35 + v19) & ~v8, v28);
  *(unsigned char *)(*(void *)(v7 + 64) + ((v8 + 35 + v18) & ~v8)) = *(unsigned char *)(*(void *)(v7 + 64) + ((v8 + 35 + v19) & ~v8));
  return a1;
}

uint64_t *initializeBufferWithCopyOfBuffer for Link(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void *)(v6 + 64);
  uint64_t v8 = type metadata accessor for URL();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(_DWORD *)(v9 + 80);
  uint64_t v11 = (v10 | 7) + v7;
  uint64_t v12 = v10 | 7 | *(_DWORD *)(v6 + 80);
  if (v12 != 7
    || ((*(_DWORD *)(v6 + 80) | *(_DWORD *)(v9 + 80)) & 0x100000) != 0
    || *(void *)(*(void *)(v8 - 8) + 64) + ((v10 + 75) & ~v10) + (v11 & ~(v10 | 7uLL)) + 1 > 0x18)
  {
    uint64_t v15 = *a2;
    *a1 = *a2;
    uint64_t v32 = (uint64_t *)(v15 + ((v12 + 16) & ~v12));
    swift_retain();
  }
  else
  {
    uint64_t v16 = ~(v10 | 7);
    uint64_t v35 = *(void *)(*(void *)(v8 - 8) + 64);
    uint64_t v36 = v8;
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v6 + 16))(a1, a2, v5);
    uint64_t v37 = a1;
    unint64_t v17 = ((unint64_t)a1 + v11) & v16;
    unint64_t v18 = ((unint64_t)a2 + v11) & v16;
    uint64_t v19 = *(void *)v18;
    uint64_t v20 = *(void *)(v18 + 8);
    uint64_t v21 = *(void *)(v18 + 16);
    uint64_t v22 = *(void *)(v18 + 24);
    LOBYTE(v16) = *(unsigned char *)(v18 + 34);
    __int16 v23 = *(_WORD *)(v18 + 32);
    outlined copy of Environment<OpenURLAction>.Content(*(void *)v18, v20, v21, v22, v23, v16);
    *(void *)unint64_t v17 = v19;
    *(void *)(v17 + 8) = v20;
    *(void *)(v17 + 16) = v21;
    *(void *)(v17 + 24) = v22;
    *(_WORD *)(v17 + 32) = v23;
    *(unsigned char *)(v17 + 34) = v16;
    unint64_t v24 = (v17 + 42) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v25 = (v18 + 42) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v26 = *(void *)v25;
    uint64_t v27 = *(void *)(v25 + 8);
    uint64_t v28 = *(void *)(v25 + 16);
    uint64_t v29 = *(void *)(v25 + 24);
    LOBYTE(v16) = *(unsigned char *)(v25 + 34);
    __int16 v30 = *(_WORD *)(v25 + 32);
    outlined copy of Environment<OpenURLAction>.Content(*(void *)v25, v27, v28, v29, v30, v16);
    *(void *)unint64_t v24 = v26;
    *(void *)(v24 + 8) = v27;
    *(void *)(v24 + 16) = v28;
    *(void *)(v24 + 24) = v29;
    *(_WORD *)(v24 + 32) = v30;
    *(unsigned char *)(v24 + 34) = v16;
    unint64_t v31 = v10 + 35 + v24;
    uint64_t v32 = v37;
    unint64_t v33 = v31 & ~v10;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v9 + 16))(v33, (v10 + 35 + v25) & ~v10, v36);
    *(unsigned char *)(v33 + v35) = *(unsigned char *)(((v10 + 35 + v25) & ~v10) + v35);
  }
  return v32;
}

uint64_t assignWithCopy for CustomizableDocumentViewControllerRepresentable(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_retain();
  swift_release();
  uint64_t v4 = *(void *)(a2 + 24);
  if (*(void *)(a1 + 24))
  {
    if (v4)
    {
      uint64_t v5 = *(void *)(a2 + 32);
      *(void *)(a1 + 24) = v4;
      *(void *)(a1 + 32) = v5;
      swift_retain();
      swift_release();
      goto LABEL_8;
    }
    swift_release();
  }
  else if (v4)
  {
    uint64_t v6 = *(void *)(a2 + 32);
    *(void *)(a1 + 24) = v4;
    *(void *)(a1 + 32) = v6;
    swift_retain();
    goto LABEL_8;
  }
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
LABEL_8:
  uint64_t v7 = (_OWORD *)(a1 + 40);
  uint64_t v8 = (_OWORD *)(a2 + 40);
  uint64_t v9 = *(void *)(a2 + 64);
  if (*(void *)(a1 + 64))
  {
    if (v9)
    {
      uint64_t v10 = *(void *)(a2 + 40);
      uint64_t v11 = *(void *)(a2 + 48);
      char v12 = *(unsigned char *)(a2 + 56);
      outlined copy of Text.Storage(v10, v11, v12);
      uint64_t v13 = *(void *)(a1 + 40);
      uint64_t v14 = *(void *)(a1 + 48);
      char v15 = *(unsigned char *)(a1 + 56);
      *(void *)(a1 + 40) = v10;
      *(void *)(a1 + 48) = v11;
      *(unsigned char *)(a1 + 56) = v12;
      outlined consume of Text.Storage(v13, v14, v15);
      *(void *)(a1 + 64) = *(void *)(a2 + 64);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      outlined destroy of Text(a1 + 40);
      long long v19 = *(_OWORD *)(a2 + 56);
      *uint64_t v7 = *v8;
      *(_OWORD *)(a1 + 56) = v19;
    }
  }
  else if (v9)
  {
    uint64_t v16 = *(void *)(a2 + 40);
    uint64_t v17 = *(void *)(a2 + 48);
    char v18 = *(unsigned char *)(a2 + 56);
    outlined copy of Text.Storage(v16, v17, v18);
    *(void *)(a1 + 40) = v16;
    *(void *)(a1 + 48) = v17;
    *(unsigned char *)(a1 + 56) = v18;
    *(void *)(a1 + 64) = *(void *)(a2 + 64);
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v20 = *(_OWORD *)(a2 + 56);
    *uint64_t v7 = *v8;
    *(_OWORD *)(a1 + 56) = v20;
  }
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_retain();
  swift_release();
  uint64_t v21 = *(void *)(a2 + 80);
  if (*(void *)(a1 + 80))
  {
    if (v21)
    {
      uint64_t v22 = *(void *)(a2 + 88);
      *(void *)(a1 + 80) = v21;
      *(void *)(a1 + 88) = v22;
      swift_retain();
      swift_release();
      goto LABEL_22;
    }
    swift_release();
  }
  else if (v21)
  {
    uint64_t v23 = *(void *)(a2 + 88);
    *(void *)(a1 + 80) = v21;
    *(void *)(a1 + 88) = v23;
    swift_retain();
    goto LABEL_22;
  }
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
LABEL_22:
  uint64_t v24 = *(void *)(a2 + 96);
  if (*(void *)(a1 + 96))
  {
    if (v24)
    {
      uint64_t v25 = *(void *)(a2 + 104);
      *(void *)(a1 + 96) = v24;
      *(void *)(a1 + 104) = v25;
      swift_retain();
      swift_release();
      goto LABEL_29;
    }
    swift_release();
  }
  else if (v24)
  {
    uint64_t v26 = *(void *)(a2 + 104);
    *(void *)(a1 + 96) = v24;
    *(void *)(a1 + 104) = v26;
    swift_retain();
    goto LABEL_29;
  }
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
LABEL_29:
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 120) = *(_DWORD *)(a2 + 120);
  *(_DWORD *)(a1 + 124) = *(_DWORD *)(a2 + 124);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_weakCopyAssign();
  swift_weakCopyAssign();
  swift_weakCopyAssign();
  uint64_t v27 = (_OWORD *)(a1 + 160);
  uint64_t v28 = (_OWORD *)(a2 + 160);
  uint64_t v29 = *(void *)(a2 + 184);
  if (*(void *)(a1 + 184))
  {
    if (v29)
    {
      __swift_assign_boxed_opaque_existential_1((uint64_t *)(a1 + 160), (uint64_t *)(a2 + 160));
    }
    else
    {
      outlined destroy of AnyHashable(a1 + 160);
      uint64_t v30 = *(void *)(a2 + 192);
      long long v31 = *(_OWORD *)(a2 + 176);
      *uint64_t v27 = *v28;
      *(_OWORD *)(a1 + 176) = v31;
      *(void *)(a1 + 192) = v30;
    }
  }
  else if (v29)
  {
    *(void *)(a1 + 184) = v29;
    *(void *)(a1 + 192) = *(void *)(a2 + 192);
    (**(void (***)(uint64_t, uint64_t))(v29 - 8))(a1 + 160, a2 + 160);
  }
  else
  {
    long long v32 = *v28;
    long long v33 = *(_OWORD *)(a2 + 176);
    *(void *)(a1 + 192) = *(void *)(a2 + 192);
    *uint64_t v27 = v32;
    *(_OWORD *)(a1 + 176) = v33;
  }
  *(unsigned char *)(a1 + 200) = *(unsigned char *)(a2 + 200);
  uint64_t v34 = (long long *)(a1 + 208);
  uint64_t v35 = (long long *)(a2 + 208);
  int v36 = *(unsigned __int8 *)(a2 + 224);
  if (*(unsigned __int8 *)(a1 + 224) == 255)
  {
    if (v36 == 255)
    {
      long long v38 = *v35;
      *(unsigned char *)(a1 + 224) = *(unsigned char *)(a2 + 224);
      *uint64_t v34 = v38;
    }
    else
    {
      char v45 = v36 & 1;
      uint64_t v46 = *(void *)(a2 + 208);
      uint64_t v47 = *(void *)(a2 + 216);
      outlined copy of SceneID(v46, v47, v36 & 1);
      *(void *)(a1 + 208) = v46;
      *(void *)(a1 + 216) = v47;
      *(unsigned char *)(a1 + 224) = v45;
    }
  }
  else if (v36 == 255)
  {
    outlined destroy of SceneID(a1 + 208);
    char v37 = *(unsigned char *)(a2 + 224);
    *uint64_t v34 = *v35;
    *(unsigned char *)(a1 + 224) = v37;
  }
  else
  {
    char v39 = v36 & 1;
    uint64_t v40 = *(void *)(a2 + 208);
    uint64_t v41 = *(void *)(a2 + 216);
    outlined copy of SceneID(v40, v41, v36 & 1);
    uint64_t v42 = *(void *)(a1 + 208);
    uint64_t v43 = *(void *)(a1 + 216);
    char v44 = *(unsigned char *)(a1 + 224);
    *(void *)(a1 + 208) = v40;
    *(void *)(a1 + 216) = v41;
    *(unsigned char *)(a1 + 224) = v39;
    outlined consume of SceneID(v42, v43, v44);
  }
  *(void *)(a1 + 232) = *(void *)(a2 + 232);
  return a1;
}

void *protocol witness for static PreferenceKey.reduce(value:nextValue:) in conformance MultimodalNavigationTitleHorizontalPaddingKey(void *result, void *(*a2)(uint64_t *__return_ptr))
{
  char v2 = result;
  if (result[1])
  {
    uint64_t result = a2(&v5);
    uint64_t v3 = v5;
    char v4 = v6;
  }
  else
  {
    char v4 = 0;
    uint64_t v3 = *result;
  }
  *char v2 = v3;
  *((unsigned char *)v2 + 8) = v4;
  return result;
}

uint64_t static AccessibilityDetachedPropertyWriterModifier._makeView(modifier:inputs:body:)@<X0>(uint64_t *a1@<X1>, void (*a2)(uint64_t *__return_ptr)@<X2>, double *a3@<X8>)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *a1;
  int v4 = *((_DWORD *)a1 + 2);
  uint64_t v5 = a1[2];
  unsigned int v7 = *((_DWORD *)a1 + 6);
  unsigned int v6 = *((_DWORD *)a1 + 7);
  uint64_t v12 = a1[4];
  uint64_t v9 = a1[5];
  uint64_t v8 = a1[6];
  unsigned int v10 = *((_DWORD *)a1 + 14);
  unsigned int v13 = *((_DWORD *)a1 + 15);
  long long v14 = *((_OWORD *)a1 + 4);
  int v15 = *((_DWORD *)a1 + 20);
  *(void *)&long long v23 = v8;
  DWORD2(v23) = v10;
  if ((PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) == 0)
  {
    *(void *)&long long v23 = v8;
    DWORD2(v23) = v10;
    if ((PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) == 0) {
      goto LABEL_4;
    }
  }
  lazy protocol witness table accessor for type AccessibilityPropertyInput and conformance AccessibilityPropertyInput();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  PropertyList.subscript.getter();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  if ((BYTE8(v23) & 1) == 0)
  {
    *(void *)&long long v19 = v3;
    DWORD2(v19) = v4;
    *(void *)&long long v20 = v5;
    *((void *)&v20 + 1) = __PAIR64__(v6, v7);
    *(void *)&long long v21 = v12;
    *((void *)&v21 + 1) = v9;
    *(void *)&long long v22 = v8;
    *((void *)&v22 + 1) = __PAIR64__(v13, v10);
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    PropertyList.subscript.setter();
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    lazy protocol witness table accessor for type AccessibilityDetachedPropertyWriterModifier.MakeAttachmentModifier and conformance AccessibilityDetachedPropertyWriterModifier.MakeAttachmentModifier();
    Attribute.init<A>(body:value:flags:update:)();
    _GraphValue.init(_:)();
    long long v26 = v22;
    long long v27 = v14;
    int v28 = v15;
    long long v23 = v19;
    long long v24 = v20;
    long long v25 = v21;
    outlined retain of _ViewInputs((uint64_t)&v23);
    specialized static AccessibilityViewModifier._makeView(modifier:inputs:body:)(v18, (uint64_t)&v23, a2, a3);
    outlined release of _ViewInputs((uint64_t)&v23);
    return outlined release of _ViewInputs((uint64_t)&v23);
  }
  else
  {
LABEL_4:
    *(void *)&long long v23 = v3;
    DWORD2(v23) = v4;
    *(void *)&long long v24 = v5;
    *((void *)&v24 + 1) = __PAIR64__(v6, v7);
    *(void *)&long long v25 = v12;
    *((void *)&v25 + 1) = v9;
    *(void *)&long long v26 = v8;
    *((void *)&v26 + 1) = __PAIR64__(v13, v10);
    long long v27 = v14;
    int v28 = v15;
    return ((uint64_t (*)(void))a2)();
  }
}

uint64_t protocol witness for static PlatformViewThatFitsRepresentable.makeRepresentation(inputs:state:outputs:) in conformance PlatformItemListViewThatFitsRepresentable()
{
  return swift_bridgeObjectRelease();
}

uint64_t closure #1 in closure #1 in PlatformItemListViewThatFitsRepresentable.FittingChildrenPlatformItemList.value.getter(uint64_t *a1, uint64_t a2, void **a3)
{
  uint64_t v5 = type metadata accessor for PlatformItemList.Item();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5 - 8);
  uint64_t v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  int v9 = *((_DWORD *)a1 + 2);
  uint64_t v16 = *a1;
  int v17 = v9;
  if ((PreferencesOutputs.subscript.getter() & 0x100000000) == 0)
  {
    AGGraphGetValue();
    uint64_t v10 = swift_bridgeObjectRetain();
    PlatformItemList.mergedContentItem.getter(v10, (uint64_t)v8);
    swift_bridgeObjectRelease();
    uint64_t v11 = *a3;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *a3 = v11;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      uint64_t v11 = (void *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v11[2] + 1, 1, v11);
      *a3 = v11;
    }
    unint64_t v14 = v11[2];
    unint64_t v13 = v11[3];
    if (v14 >= v13 >> 1)
    {
      uint64_t v11 = (void *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v13 > 1, v14 + 1, 1, v11);
      *a3 = v11;
    }
    v11[2] = v14 + 1;
    outlined init with take of PlatformItemList.Item((uint64_t)v8, (uint64_t)v11+ ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))+ *(void *)(v6 + 72) * v14);
  }
  return 0;
}

unint64_t lazy protocol witness table accessor for type ListButtonStyleDisabledOpacityModifier and conformance ListButtonStyleDisabledOpacityModifier()
{
  unint64_t result = lazy protocol witness table cache variable for type ListButtonStyleDisabledOpacityModifier and conformance ListButtonStyleDisabledOpacityModifier;
  if (!lazy protocol witness table cache variable for type ListButtonStyleDisabledOpacityModifier and conformance ListButtonStyleDisabledOpacityModifier)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ListButtonStyleDisabledOpacityModifier and conformance ListButtonStyleDisabledOpacityModifier);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type HandGestureShortcutPaginationDirection and conformance HandGestureShortcutPaginationDirection()
{
  unint64_t result = lazy protocol witness table cache variable for type HandGestureShortcutPaginationDirection and conformance HandGestureShortcutPaginationDirection;
  if (!lazy protocol witness table cache variable for type HandGestureShortcutPaginationDirection and conformance HandGestureShortcutPaginationDirection)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HandGestureShortcutPaginationDirection and conformance HandGestureShortcutPaginationDirection);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AccessibilityHostedViewBridgeTransform and conformance AccessibilityHostedViewBridgeTransform()
{
  unint64_t result = lazy protocol witness table cache variable for type AccessibilityHostedViewBridgeTransform and conformance AccessibilityHostedViewBridgeTransform;
  if (!lazy protocol witness table cache variable for type AccessibilityHostedViewBridgeTransform and conformance AccessibilityHostedViewBridgeTransform)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityHostedViewBridgeTransform and conformance AccessibilityHostedViewBridgeTransform);
  }
  return result;
}

void protocol witness for ViewModifier.body(content:) in conformance NavigationPresentationAdaptorModifier()
{
}

uint64_t associated type witness table accessor for ViewModifier.Body : View in ScrollIndicatorFlashOnAppearModifier()
{
  return swift_getOpaqueTypeConformance2();
}

void partial apply for closure #1 in UICollectionViewListCoordinatorBase.Listener.fire()()
{
  uint64_t v1 = *(void **)(v0 + 16);
  uint64_t v2 = *(void *)((*MEMORY[0x1E4FBC8C8] & *v1) + 0xE8);
  char v3 = *((unsigned char *)v1 + v2);
  *((unsigned char *)v1 + v2) = 3;
  UICollectionViewListCoordinatorBase.initialLayoutAnimationPhase.didset(v3);
}

void UICollectionViewListCoordinatorBase.initialLayoutAnimationPhase.didset(char a1)
{
  if (a1 != 3 && *((unsigned char *)v1 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v1) + 0xE8)) == 3)
  {
    uint64_t v2 = (void *)MEMORY[0x18C119DF0]((char *)v1 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v1) + 0xF8));
    if (v2)
    {
      id v3 = v2;
      UICollectionViewListCoordinatorBase.updateListContents(_:)(v2);
    }
  }
}

void closure #3 in closure #1 in UICollectionViewListCoordinatorBase.destructiveAction(collectionView:indexPath:apply:)(char a1, uint64_t a2)
{
  uint64_t v2 = a2 + 16;
  if (a1)
  {
    swift_beginAccess();
    uint64_t v3 = MEMORY[0x18C119DF0](v2);
    if (!v3) {
      return;
    }
    int v4 = (void *)v3;
    UICollectionViewListCoordinatorBase.commitUpdates()();
  }
  else
  {
    swift_beginAccess();
    uint64_t v5 = MEMORY[0x18C119DF0](v2);
    if (!v5) {
      return;
    }
    int v4 = (void *)v5;
    swift_beginAccess();
    type metadata accessor for ShadowListDataSource();
    ShadowListDataSource.discardUpdatesForDeletion()();
    swift_endAccess();
  }
}

void closure #1 in closure #1 in UICollectionViewListCoordinatorBase.destructiveAction(collectionView:indexPath:apply:)(uint64_t a1, uint64_t a2)
{
  _s10Foundation9IndexPathVSgMaTm_1(0, &lazy cache variable for type metadata for IndexPath?, MEMORY[0x1E4F27DE8], MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = &v20[-v5];
  swift_beginAccess();
  uint64_t v7 = MEMORY[0x18C119DF0](a1 + 16);
  if (v7)
  {
    uint64_t v8 = (void *)v7;
    uint64_t v9 = type metadata accessor for IndexPath();
    uint64_t v10 = *(void *)(v9 - 8);
    (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(v10 + 56))(v6, 1, 1, v9);
    uint64_t v11 = (void *)MEMORY[0x1E4FBC8C8];
    uint64_t v12 = (uint64_t)v8 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v8) + 0xD8);
    swift_beginAccess();
    outlined assign with take of IndexPath?((uint64_t)v6, v12);
    swift_endAccess();
    swift_beginAccess();
    uint64_t v13 = type metadata accessor for ShadowListDataSource();
    uint64_t WitnessTable = swift_getWitnessTable();
    ListCoreDataSource.deleteCell(forRowAt:)(a2, v13, WitnessTable);
    swift_endAccess();
    uint64_t v15 = MEMORY[0x18C119DF0]((char *)v8 + *(void *)((*v11 & *v8) + 0xF8));
    if (v15)
    {
      uint64_t v16 = (void *)v15;
      _s10Foundation9IndexPathVSgMaTm_1(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<IndexPath>, MEMORY[0x1E4F27DE8], MEMORY[0x1E4FBBE00]);
      unint64_t v17 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
      uint64_t v18 = swift_allocObject();
      *(_OWORD *)(v18 + 16) = xmmword_18834BB80;
      (*(void (**)(unint64_t, uint64_t, uint64_t))(v10 + 16))(v18 + v17, a2, v9);
      Class isa = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      objc_msgSend(v16, sel_deleteItemsAtIndexPaths_, isa);
    }
    else
    {
      __break(1u);
    }
  }
}

uint64_t partial apply for closure #1 in UICollectionViewListCoordinatorBase.destructiveAction(collectionView:indexPath:apply:)()
{
  uint64_t v1 = v0[2];
  uint64_t v2 = v0[3];
  uint64_t v3 = v0[4];
  uint64_t v4 = v0[5];
  uint64_t v5 = *(void *)(type metadata accessor for IndexPath() - 8);
  unint64_t v6 = (*(unsigned __int8 *)(v5 + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v7 = v0[6];
  uint64_t v8 = (void *)v0[7];
  int v9 = *((unsigned __int8 *)v0 + v6 + *(void *)(v5 + 64));

  return closure #1 in UICollectionViewListCoordinatorBase.destructiveAction(collectionView:indexPath:apply:)(v7, v8, (uint64_t)v0 + v6, v9, v1, v2, v3, v4);
}

uint64_t specialized UICollectionViewListCoordinatorBase.listCollectionViewEditMenuInteraction(_:willPresentMenuFor:animator:)(void *a1, void *a2)
{
  _s10Foundation9IndexPathVSgMaTm_1(0, &lazy cache variable for type metadata for IndexPath?, MEMORY[0x1E4F27DE8], MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v5 - 8);
  uint64_t v7 = (char *)&v33 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v8);
  uint64_t v10 = (char *)&v33 - v9;
  MEMORY[0x1F4188790](v11);
  uint64_t v13 = (char *)&v33 - v12;
  uint64_t v14 = type metadata accessor for IndexPath();
  uint64_t v15 = *(void *)(v14 - 8);
  double v16 = MEMORY[0x1F4188790](v14);
  uint64_t v18 = (char *)&v33 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v19 = objc_msgSend(a1, sel_view, v16);
  if (v19)
  {
    long long v20 = v19;
    self;
    uint64_t v21 = swift_dynamicCastObjCClass();
    if (!v21)
    {

      goto LABEL_12;
    }
    uint64_t v22 = v21;
    long long v33 = a2;
    long long v23 = (void *)MEMORY[0x18C119DF0]((char *)v2 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v2) + 0xF8));
    if (!v23)
    {

      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v15 + 56))(v13, 1, 1, v14);
      a2 = v33;
LABEL_10:
      _s10Foundation9IndexPathVSgWOhTm_0((uint64_t)v13, &lazy cache variable for type metadata for IndexPath?, MEMORY[0x1E4F27DE8], MEMORY[0x1E4FBB718]);
      goto LABEL_12;
    }
    long long v24 = v23;
    id v25 = objc_msgSend(v23, sel_indexPathForCell_, v22);

    if (v25)
    {
      static IndexPath._unconditionallyBridgeFromObjectiveC(_:)();

      long long v26 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v15 + 56);
      v26(v10, 0, 1, v14);
    }
    else
    {

      long long v26 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v15 + 56);
      v26(v10, 1, 1, v14);
    }
    a2 = v33;
    _s7SwiftUI12SwipeActionsO5ValueVSgWObTm_0((uint64_t)v10, (uint64_t)v13, (uint64_t)&lazy cache variable for type metadata for IndexPath?, MEMORY[0x1E4F27DE8], MEMORY[0x1E4FBB718], (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))_s10Foundation9IndexPathVSgMaTm_1);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14) == 1) {
      goto LABEL_10;
    }
    long long v27 = *(void (**)(char *, char *, uint64_t))(v15 + 32);
    v27(v18, v13, v14);
    v27(v7, v18, v14);
    v26(v7, 0, 1, v14);
    uint64_t v28 = (uint64_t)v2 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v2) + 0xE0);
    swift_beginAccess();
    outlined assign with take of IndexPath?((uint64_t)v7, v28);
    swift_endAccess();
  }
LABEL_12:
  type metadata accessor for UIKitEditMenuConfiguration();
  uint64_t result = swift_dynamicCastClass();
  if (result)
  {
    if (*(void *)(result + OBJC_IVAR____TtC7SwiftUI26UIKitEditMenuConfiguration_responder))
    {
      uint64_t v30 = swift_allocObject();
      swift_weakInit();
      uint64_t v31 = swift_allocObject();
      *(void *)(v31 + 16) = v30;
      *(unsigned char *)(v31 + 24) = 1;
      id v32 = a2;
      swift_retain();
      swift_retain();
      static Update.enqueueAction(_:)();
      swift_release();

      swift_release();
      return swift_release();
    }
  }
  return result;
}

BOOL UICollectionViewListCoordinatorBase.collectionView(_:shouldHighlightItemAt:)(void *a1, uint64_t a2)
{
  void (*v24)(uint64_t *__return_ptr, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  id v48;
  void *v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void *v61;
  id v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;

  uint64_t v5 = (void *)(*MEMORY[0x1E4FBC8C8] & *v2);
  double v64 = v5[14];
  unint64_t v68 = v5[12];
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = type metadata accessor for Optional();
  uint64_t v66 = *(void *)(v7 - 8);
  long long v67 = v7;
  MEMORY[0x1F4188790](v7);
  double v65 = (uint64_t)&v54 - v8;
  uint64_t v9 = type metadata accessor for IndexPath();
  uint64_t v70 = *(void *)(v9 - 8);
  uint64_t v71 = v9;
  MEMORY[0x1F4188790](v9);
  unint64_t v69 = (char *)&v54 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = v5[15];
  uint64_t v12 = v5[13];
  double v63 = v11;
  swift_getAssociatedConformanceWitness();
  if ((WeakSelectionBasedStorage.$action.getter() & 0x100000000) == 0) {
    return 1;
  }
  uint64_t v14 = v12;
  Class isa = IndexPath._bridgeToObjectiveC()().super.isa;
  id v16 = objc_msgSend(a1, sel_cellForItemAtIndexPath_, isa);

  uint64_t v18 = a2;
  if (v16)
  {
    uint64_t v19 = v68;
    uint64_t v20 = swift_getAssociatedTypeWitness();
    uint64_t v21 = swift_dynamicCastUnknownClass();
    if (v21)
    {
      uint64_t v22 = v21;
      Swift::Int v62 = v16;
      uint64_t v61 = a1;
      uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
      long long v24 = *(void (**)(uint64_t *__return_ptr, uint64_t))(AssociatedConformanceWitness + 16);
      uint64_t v60 = AssociatedConformanceWitness;
      v24(&v73, v20);
      id v25 = v74;
      long long v26 = v77;
      if (v74)
      {
        if (v74 != 1)
        {
          long long v27 = v73;
          uint64_t v28 = v75;
          uint64_t v29 = v76;
          uint64_t v30 = v77;
          uint64_t v31 = v78;
          id v32 = swift_allocObject();
          *(void *)(v32 + 16) = v25;
          *(void *)(v32 + 24) = v28;
          outlined copy of AppIntentExecutor?(v25);
          outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?((uint64_t)partial apply for thunk for @callee_guaranteed () -> ());
          outlined consume of PlatformItemList.Item.SelectionBehavior?(v27, v25, v28, v29, v30, v31);

          return 1;
        }
      }
      else
      {
        uint64_t v55 = v73;
        long long v33 = v75;
        uint64_t v56 = v76;
        unint64_t v57 = v78;
        uint64_t v58 = v79;
        uint64_t v59 = v80;
        outlined copy of AppIntentExecutor?(0);
        outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(0);
        outlined consume of PlatformItemList.Item.SelectionBehavior?(v55, 0, v33, v56, v26, v57);
      }
      uint64_t v34 = specialized UICollectionViewListCoordinatorBase.editMenuResponder<A>(for:)(v22, v19, v14, v20, v64, v63, v60);
      a1 = v61;
      id v16 = v62;
      if (v34)
      {
        type metadata accessor for PlatformItemList?(0, &lazy cache variable for type metadata for PlatformItemList?, (uint64_t)&type metadata for PlatformItemList, MEMORY[0x1E4FBB718]);
        static Update.ensure<A>(_:)();
        uint64_t v35 = MEMORY[0x1E4FBC860];
        if (v73) {
          int v36 = v73;
        }
        else {
          int v36 = MEMORY[0x1E4FBC860];
        }
        if (*(void *)(v36 + 16))
        {
          unint64_t v72 = MEMORY[0x1E4FBC860];
          char v37 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
          LOBYTE(v73) = 0;
          _s10Foundation9IndexPathVSgMaTm_1(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<MenuVisitor.MenuStackGroup>, (uint64_t (*)(uint64_t))type metadata accessor for MenuVisitor.MenuStackGroup, MEMORY[0x1E4FBBE00]);
          long long v38 = type metadata accessor for MenuVisitor.MenuStackGroup();
          char v39 = (*(unsigned __int8 *)(*(void *)(v38 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v38 - 8) + 80);
          uint64_t v40 = swift_allocObject();
          *(_OWORD *)(v40 + 16) = xmmword_18834BB80;
          uint64_t v41 = v40 + v39;
          if (one-time initialization token for empty != -1) {
            swift_once();
          }
          uint64_t v42 = __swift_project_value_buffer(v38, (uint64_t)static MenuVisitor.MenuStackGroup.empty);
          _s7SwiftUI11MenuVisitor33_0F42DDF44729C152DA9EC9F6F4D00118LLV0C10StackGroupVWOcTm_0(v42, v41, (uint64_t (*)(void))type metadata accessor for MenuVisitor.MenuStackGroup);
          uint64_t v43 = v73;
          uint64_t v73 = 0;
          LOBYTE(v74) = 0;
          uint64_t v75 = MEMORY[0x1E4FBC868];
          char v76 = v37;
          v77 = v35;
          uint64_t v78 = MEMORY[0x1E4FBC868];
          LOBYTE(v79) = v43;
          uint64_t v80 = v40;
          MenuVisitor.visit(_:uniqueNames:)(v36, &v72);
          swift_bridgeObjectRelease();
          uint64_t v35 = v77;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          id v16 = v62;
          if (!(v35 >> 62)) {
            goto LABEL_17;
          }
        }
        else
        {
          swift_bridgeObjectRelease();
          if (!(v35 >> 62))
          {
LABEL_17:
            char v44 = *(void *)((v35 & 0xFFFFFFFFFFFFFF8) + 0x10);
            swift_bridgeObjectRelease();
            swift_release();

            return v44 != 0;
          }
        }
        swift_bridgeObjectRetain();
        char v44 = _CocoaArrayWrapper.endIndex.getter();
        swift_release();

        swift_bridgeObjectRelease_n();
        return v44 != 0;
      }
    }
  }
  if (UICollectionViewListCoordinatorBase.hasMultipleSelection.getter(v17))
  {
    uint64_t v46 = (uint64_t)v69;
    char v45 = v70;
    uint64_t v47 = v71;
    (*(void (**)(char *, uint64_t, uint64_t))(v70 + 16))(v69, v18, v71);
  }
  else
  {
    uint64_t v48 = objc_msgSend(a1, sel_indexPathsForSelectedItems);
    uint64_t v47 = v71;
    uint64_t v46 = (uint64_t)v69;
    if (v48)
    {
      uint64_t v49 = v48;
      uint64_t v50 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
    }
    else
    {
      uint64_t v50 = MEMORY[0x1E4FBC860];
    }
    uint64_t v51 = *(void *)(v50 + 16);
    swift_bridgeObjectRelease();
    char v45 = v70;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v70 + 16))(v46, v18, v47);
    if (v51 >= 2)
    {
      (*(void (**)(uint64_t, uint64_t))(v45 + 8))(v46, v47);
      return 0;
    }
  }
  uint64_t v52 = v65;
  UICollectionViewListCoordinatorBase.selectionValue(forRowAt:)(v46, v65);
  (*(void (**)(uint64_t, uint64_t))(v45 + 8))(v46, v47);
  BOOL v13 = (*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 48))(v52, 1, AssociatedTypeWitness) != 1;
  (*(void (**)(uint64_t, uint64_t))(v66 + 8))(v52, v67);
  return v13;
}

void UICollectionViewListCoordinatorBase.collectionView(_:didSelectItemAt:)(void *a1, uint64_t a2)
{
  void (*v35)(uint64_t *__return_ptr, uint64_t, uint64_t);
  uint64_t v36;
  char *v37;
  uint64_t v38;
  void (*v39)(char *, char *, uint64_t);
  uint64_t v40;
  void (*v41)(char *, uint64_t);
  uint64_t v42;
  uint64_t v43;
  int v44;
  char *v45;
  id v46;
  int v47;
  int v48;
  void (*v49)(void);
  uint64_t v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  char *v66;
  unsigned __int8 v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  void (*v78)(char *, uint64_t);
  uint64_t (*v79)(char *, uint64_t, uint64_t);
  void (*v80)(char *, char *, uint64_t);
  uint64_t v81;
  char *v82;
  uint64_t v83;
  void (*v84)(uint64_t *__return_ptr, uint64_t, uint64_t);
  void (*v85)(char *, uint64_t, uint64_t);
  uint64_t v86;
  int v87;
  uint64_t v88;
  void (*v89)(void *__return_ptr, void, void);
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  void (*v97)(char *, uint64_t);
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  void (*v103)(void);
  char *v104;
  char *v105;
  uint64_t v106;
  char *v107;
  char *v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  id v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  char *v122;
  id v123;
  uint64_t v124;
  void (*v125)(void);
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  void (*v130)(void *__return_ptr, void, void);
  uint64_t v131;
  unsigned __int8 v132;
  uint64_t vars8;

  uint64_t v3 = v2;
  unint64_t v111 = *MEMORY[0x1E4FBC8C8] & *v2;
  uint64_t v6 = v111;
  uint64_t v7 = *(void *)(v111 + 104);
  uint64_t v106 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v105 = (char *)&v75 - v8;
  uint64_t v9 = type metadata accessor for Binding();
  uint64_t v115 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9);
  uint64_t v104 = (char *)&v75 - v10;
  uint64_t v110 = *(void *)(v6 + 112);
  uint64_t v11 = *(void *)(v110 + 8);
  uint64_t v12 = *(void *)(v6 + 96);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  BOOL v112 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v108 = (char *)&v75 - v14;
  _s10Foundation9IndexPathVSgMaTm_1(0, &lazy cache variable for type metadata for IndexPath?, MEMORY[0x1E4F27DE8], MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v15 - 8);
  uint64_t v109 = (char *)&v75 - v16;
  unint64_t v116 = v9;
  int64_t v114 = type metadata accessor for Optional();
  v121 = *(void *)(v114 - 8);
  MEMORY[0x1F4188790](v114);
  v107 = (char *)&v75 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v18);
  uint64_t v20 = (char *)&v75 - v19;
  uint64_t v113 = AssociatedTypeWitness;
  uint64_t v21 = type metadata accessor for Optional();
  uint64_t v22 = *(void *)(v21 - 8);
  unint64_t v119 = v21;
  uint64_t v120 = v22;
  MEMORY[0x1F4188790](v21);
  long long v24 = (char *)&v75 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v25);
  long long v27 = (char *)&v75 - v26;
  MEMORY[0x1F4188790](v28);
  uint64_t v122 = (char *)&v75 - v29;
  v117 = a2;
  Class isa = IndexPath._bridgeToObjectiveC()().super.isa;
  uint64_t v118 = a1;
  uint64_t v123 = objc_msgSend(a1, sel_cellForItemAtIndexPath_, isa);

  if (v123)
  {
    uint64_t v31 = swift_getAssociatedTypeWitness();
    uint64_t v32 = swift_dynamicCastUnknownClass();
    if (v32)
    {
      long long v33 = (void *)v32;
      uint64_t v96 = v24;
      char v95 = v7;
      uint64_t v102 = v11;
      uint64_t v94 = v12;
      uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
      uint64_t v35 = *(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(AssociatedConformanceWitness + 16);
      BOOL v100 = v31;
      uint64_t v98 = AssociatedConformanceWitness;
      unint64_t v84 = v35;
      ((void (*)(uint64_t *__return_ptr, uint64_t))v35)(&v124, v31);
      BOOL v93 = v126;
      uint64_t v92 = v127;
      uint64_t v91 = v128;
      uint64_t v90 = v129;
      uint64_t v89 = v130;
      uint64_t v88 = v131;
      uint64_t v87 = v132;
      v103 = v125;
      uint64_t v101 = v124;
      LODWORD(v86) = (v125 != (void (*)(void))1) & v124;
      LODWORD(v83) = objc_msgSend(v118, sel_isEditing);
      int v36 = (uint64_t)v122;
      UICollectionViewListCoordinatorBase.selectionValue(forRowAt:)(v117, (uint64_t)v122);
      objc_msgSend(v33, sel_setNeedsUpdateConfiguration);
      uint64_t v99 = (uint64_t)v33;
      objc_msgSend(v33, sel_layoutIfNeeded);
      char v37 = (char *)v3 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v3) + 0x100);
      swift_beginAccess();
      long long v38 = v121;
      char v39 = *(void (**)(char *, char *, uint64_t))(v121 + 16);
      uint64_t v82 = v37;
      uint64_t v40 = v114;
      uint64_t v81 = v121 + 16;
      uint64_t v80 = v39;
      v39(v20, v37, v114);
      uint64_t v79 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v115 + 48);
      LODWORD(v33) = v79(v20, 1, v116);
      uint64_t v41 = *(void (**)(char *, uint64_t))(v38 + 8);
      v121 = v38 + 8;
      uint64_t v78 = v41;
      v41(v20, v40);
      uint64_t v42 = v119;
      uint64_t v43 = v120;
      uint64_t v85 = *(void (**)(char *, uint64_t, uint64_t))(v120 + 16);
      v85(v27, v36, v119);
      if (v33 == 1)
      {
        uint64_t v97 = *(void (**)(char *, uint64_t))(v43 + 8);
        v97(v27, v42);
        char v44 = v86;
        char v45 = v96;
        if (v86) {
          goto LABEL_17;
        }
      }
      else
      {
        uint64_t v47 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v112 + 48))(v27, 1, v113);
        uint64_t v97 = *(void (**)(char *, uint64_t))(v43 + 8);
        v97(v27, v42);
        uint64_t v48 = v83;
        if (v47 != 1) {
          uint64_t v48 = 1;
        }
        char v44 = v86;
        char v45 = v96;
        if ((v48 | v86))
        {
LABEL_16:
          if (v103 == (void (*)(void))1)
          {
LABEL_22:
            v85(v45, (uint64_t)v122, v42);
            uint64_t v59 = v112;
            uint64_t v60 = v113;
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v112 + 48))(v45, 1, v113) == 1)
            {
              v97(v45, v42);
            }
            else
            {
              uint64_t v61 = v108;
              (*(void (**)(char *, char *, uint64_t))(v59 + 32))(v108, v45, v60);
              Swift::Int v62 = v107;
              double v63 = v114;
              v80(v107, v82, v114);
              double v64 = v116;
              if (v79(v62, 1, v116) == 1)
              {
                (*(void (**)(char *, uint64_t))(v59 + 8))(v61, v60);
                v78(v62, v63);
              }
              else
              {
                double v65 = v62;
                uint64_t v66 = v104;
                (*(void (**)(char *, char *, uint64_t))(v115 + 32))(v104, v65, v64);
                long long v67 = objc_msgSend(v118, sel_isEditing);
                unint64_t v68 = v95;
                unint64_t v69 = v111;
                uint64_t v70 = v106;
                uint64_t v71 = v105;
                if ((v67 & 1) == 0)
                {
                  MEMORY[0x18C113DA0](v64);
                  (*(void (**)(uint64_t))(*(void *)(v69 + 120) + 48))(v68);
                  specialized Binding.wrappedValue.setter();
                  (*(void (**)(char *, uint64_t))(v70 + 8))(v71, v68);
                }
                MEMORY[0x18C113DA0](v64);
                (*(void (**)(char *, uint64_t))(*(void *)(v69 + 120) + 32))(v61, v68);
                specialized Binding.wrappedValue.setter();
                (*(void (**)(char *, uint64_t))(v70 + 8))(v71, v68);
                (*(void (**)(char *, uint64_t))(v115 + 8))(v66, v64);
                (*(void (**)(char *, uint64_t))(v59 + 8))(v61, v60);
                uint64_t v42 = v119;
              }
            }
LABEL_29:
            unint64_t v72 = *(void *)(v111 + 120);
            uint64_t v73 = v94;
            uint64_t v74 = v100;
            swift_getAssociatedConformanceWitness();
            specialized UICollectionViewListCoordinatorBase.presentEditMenu<A>(on:)(v99, v73, v95, v74, v110, v72, v98);

            outlined consume of PlatformItemList.Item.SelectionBehavior?(v101, (uint64_t)v103, v93, v92, v91, v90);
            v97(v122, v42);
            return;
          }
LABEL_17:
          if ((v101 & 0x10000) != 0) {
            uint64_t v58 = 0;
          }
          else {
            uint64_t v58 = v44;
          }
          if (v58 == 1 && !objc_msgSend(v118, sel_isEditing)) {
            goto LABEL_29;
          }
          goto LABEL_22;
        }
      }
      v84(&v124, v100, v98);
      uint64_t v49 = v125;
      if (v125 != (void (*)(void))1)
      {
        uint64_t v86 = v131;
        unint64_t v84 = v130;
        BOOL v83 = v129;
        v77 = v128;
        uint64_t v50 = v126;
        char v76 = v127;
        uint64_t v51 = v44;
        uint64_t v52 = v124;
        outlined copy of AppIntentExecutor?((uint64_t)v125);
        uint64_t v53 = v52;
        char v44 = v51;
        char v45 = v96;
        outlined consume of PlatformItemList.Item.SelectionBehavior?(v53, (uint64_t)v49, v50, v76, v77, v83);
        if (v49)
        {
          v49();
          outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?((uint64_t)v49);
        }
      }
      uint64_t v54 = type metadata accessor for IndexPath();
      uint64_t v55 = *(void *)(v54 - 8);
      uint64_t v56 = (uint64_t)v109;
      (*(void (**)(char *, uint64_t, uint64_t))(v55 + 16))(v109, v117, v54);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v55 + 56))(v56, 0, 1, v54);
      unint64_t v57 = (uint64_t)v3 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v3) + 0xD8);
      swift_beginAccess();
      outlined assign with take of IndexPath?(v56, v57);
      swift_endAccess();
      uint64_t v42 = v119;
      goto LABEL_16;
    }
    uint64_t v46 = v123;
  }
}

uint64_t initializeWithCopy for ArchivableAccessibilityViewModifier.Factory(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  uint64_t v5 = *(void *)(a2 + 8);
  char v6 = *(unsigned char *)(a2 + 16);
  outlined copy of Environment<AppIntentExecutor?>.Content(*(void *)a2, v5, v6);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  *(unsigned char *)(a1 + 16) = v6;
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for ArchivableAccessibilityViewModifier.Factory(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  uint64_t v5 = *(void *)(a2 + 8);
  char v6 = *(unsigned char *)(a2 + 16);
  outlined copy of Environment<AppIntentExecutor?>.Content(*(void *)a2, v5, v6);
  uint64_t v7 = *(void *)a1;
  uint64_t v8 = *(void *)(a1 + 8);
  char v9 = *(unsigned char *)(a1 + 16);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  *(unsigned char *)(a1 + 16) = v6;
  outlined consume of Environment<AppIntentExecutor?>.Content(v7, v8, v9);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  return a1;
}

void *specialized ArchivableAccessibilityViewModifier.init(from:)(void *a1)
{
  type metadata accessor for PropertiesTransform<AccessibilityAttachmentModifier>(0, &lazy cache variable for type metadata for KeyedDecodingContainer<ArchivableAccessibilityViewModifier.CodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type ArchivableAccessibilityViewModifier.CodingKeys and conformance ArchivableAccessibilityViewModifier.CodingKeys, (uint64_t)&unk_1ED461120, MEMORY[0x1E4FBBDC0]);
  uint64_t v4 = v3;
  uint64_t v5 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  uint64_t v7 = (char *)&v11 - v6;
  uint64_t v8 = __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type ArchivableAccessibilityViewModifier.CodingKeys and conformance ArchivableAccessibilityViewModifier.CodingKeys();
  char v9 = v8;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v1)
  {
    lazy protocol witness table accessor for type AccessibilityArchivableViewAttachment and conformance AccessibilityArchivableViewAttachment();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    char v9 = v11;
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  return v9;
}

void static AnimatedValueKeyframeInterpolation.cubic.getter(unsigned char *a1@<X8>)
{
  *a1 = 1;
}

uint64_t protocol witness for KeyedDecodingContainerProtocol.decodeIfPresent(_:forKey:) in conformance _DictionaryKeyedDecodingContainer<A>()
{
  uint64_t result = KeyedDecodingContainerProtocol.decodeIfPresent(_:forKey:)();
  if (v0) {
    return v2;
  }
  return result;
}

{
  return KeyedDecodingContainerProtocol.decodeIfPresent(_:forKey:)();
}

{
  return KeyedDecodingContainerProtocol.decodeIfPresent(_:forKey:)();
}

{
  uint64_t v0;
  uint64_t result;
  uint64_t v2;

  uint64_t result = KeyedDecodingContainerProtocol.decodeIfPresent(_:forKey:)();
  if (v0) {
    return v2;
  }
  return result;
}

{
  uint64_t v0;
  uint64_t result;
  uint64_t v2;

  uint64_t result = KeyedDecodingContainerProtocol.decodeIfPresent(_:forKey:)();
  if (v0) {
    return v2;
  }
  return result;
}

{
  uint64_t v0;
  uint64_t result;
  uint64_t v2;

  uint64_t result = KeyedDecodingContainerProtocol.decodeIfPresent(_:forKey:)();
  if (v0) {
    return v2;
  }
  return result;
}

{
  uint64_t v0;
  uint64_t result;
  uint64_t v2;

  uint64_t result = KeyedDecodingContainerProtocol.decodeIfPresent(_:forKey:)();
  if (v0) {
    return v2;
  }
  return result;
}

BOOL _DictionaryKeyedDecodingContainer.contains(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = dispatch thunk of CodingKey.stringValue.getter();
  if (*(void *)(a3 + 16) && (unint64_t v6 = specialized __RawDictionaryStorage.find<A>(_:)(v4, v5), (v7 & 1) != 0))
  {
    outlined init with copy of Any(*(void *)(a3 + 56) + 32 * v6, (uint64_t)&v10);
    swift_bridgeObjectRelease();
    BOOL v8 = *((void *)&v11 + 1) != 0;
  }
  else
  {
    long long v10 = 0u;
    long long v11 = 0u;
    swift_bridgeObjectRelease();
    BOOL v8 = 0;
  }
  outlined destroy of Any?((uint64_t)&v10);
  return v8;
}

uint64_t _DictionaryKeyedDecodingContainer.superDecoder(forKey:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t *a7@<X8>)
{
  v16[3] = a5;
  v16[4] = a6;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v16);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a5 - 8) + 16))(boxed_opaque_existential_1, a1, a5);
  return _DictionaryKeyedDecodingContainer._superDecoder(forKey:)(v16, a2, a3, a4, a5, a6, a7);
}

uint64_t PlatformItemListTextRepresentable.PlatformRepresentation.value.getter()
{
  uint64_t v0 = type metadata accessor for PlatformItemList.Item();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x1F4188790](v0);
  uint64_t v3 = (char *)&v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14[0] = *(void *)AGGraphGetValue();
  uint64_t v4 = PlatformTextRepresentableContext.text.getter();
  _s7SwiftUI5ImageVAAE8ResolvedVSgWOi0_((uint64_t)v14);
  _s7SwiftUI5ImageVAAE8ResolvedVSgWObTm_2((uint64_t)v14, (uint64_t)v13, (unint64_t *)&lazy cache variable for type metadata for Image.Resolved?, MEMORY[0x1E4F41550]);
  v11[0] = xmmword_18834BB90;
  memset(&v11[1], 0, 48);
  char v12 = 0;
  __n128 v9 = 0uLL;
  uint64_t v10 = 0;
  PlatformItemList.Item.init(text:image:selectionBehavior:accessibility:tint:imageColorResolver:)(v4, (uint64_t)v13, v11, &v9, 0, 0, (uint64_t)v3);
  type metadata accessor for CommandOperation?(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<PlatformItemList.Item>, (uint64_t (*)(uint64_t))type metadata accessor for PlatformItemList.Item, MEMORY[0x1E4FBBE00]);
  unint64_t v5 = (*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  uint64_t v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_18834BB80;
  outlined init with take of PlatformItemList.Item((uint64_t)v3, v6 + v5);
  return v6;
}

void UIGestureRecognizerRepresentable.makeCoordinator(proxy:)()
{
}

{
  UIGestureRecognizerRepresentable.makeCoordinator(proxy:)();
}

uint64_t closure #2 in DragReorderableLayoutCoordinator.childFrames()@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t *a3@<X4>, unsigned char *a4@<X8>)
{
  type metadata accessor for DragReorderableChildResponder();
  uint64_t result = swift_dynamicCastClass();
  if (result)
  {
    uint64_t v9 = result;
    long long v26 = 0u;
    long long v27 = 0u;
    unsigned __int8 v28 = 6;
    lazy protocol witness table accessor for type ReorderableChildCoordinateSpace and conformance ReorderableChildCoordinateSpace();
    swift_retain();
    AnyHashable.init<A>(_:)();
    LOBYTE(v33) = 0;
    MultiViewResponder.addContentPath(to:kind:in:observer:)();
    outlined destroy of CoordinateSpace((uint64_t)&v29);
    uint64_t v10 = *(void *)(v9 + 232);
    double v11 = *(double *)(v9 + 240);
    memset(v34, 0, sizeof(v34));
    char v35 = 6;
    outlined init with take of Path.Storage((uint64_t)v34, (uint64_t)v36);
    outlined release of Path?((uint64_t)v36, (void (*)(void, void, void, void, void))outlined copy of Path.Storage);
    Path.boundingRect.getter();
    uint64_t v13 = v12;
    double v15 = v14;
    uint64_t v17 = v16;
    uint64_t v19 = v18;
    outlined release of Path?((uint64_t)v34, (void (*)(void, void, void, void, void))outlined consume of Path.Storage);
    *(void *)&long long v29 = v10;
    *((double *)&v29 + 1) = v11;
    uint64_t v30 = v13;
    double v31 = v15;
    uint64_t v32 = v17;
    uint64_t v33 = v19;
    double v20 = v11 + v15;
    if (!(*(unsigned char *)(a1 + 8) & 1 | (v11 + v15 < *(double *)a1))) {
      double v20 = *(double *)a1;
    }
    *(double *)a1 = v20;
    *(unsigned char *)(a1 + 8) = 0;
    if (*(unsigned char *)(v9 + 248) != 1) {
      goto LABEL_6;
    }
    *(void *)a2 = v10;
    *(double *)(a2 + 8) = v11;
    *(void *)(a2 + 16) = v13;
    *(double *)(a2 + 24) = v15;
    *(void *)(a2 + 32) = v17;
    *(void *)(a2 + 40) = v19;
    *(unsigned char *)(a2 + 48) = 0;
    type metadata accessor for Binding<_DragReorderableView_DragState>(0, &lazy cache variable for type metadata for Binding<_DragReorderableView_DragState>, (uint64_t)&type metadata for _DragReorderableView_DragState, MEMORY[0x1E4F41638]);
    MEMORY[0x18C113DA0](&v24);
    if ((v25 & 1) == 0)
    {
      uint64_t v21 = v24;
    }
    else
    {
LABEL_6:
      if (*(unsigned char *)(v9 + 224) == 1)
      {
        outlined release of Path?((uint64_t)v34, (void (*)(void, void, void, void, void))outlined consume of Path.Storage);
        uint64_t result = swift_release();
        goto LABEL_11;
      }
      uint64_t v21 = *(void *)(v9 + 216);
    }
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v23 = *a3;
    *a3 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(&v29, v21, isUniquelyReferenced_nonNull_native);
    *a3 = v23;
    swift_release();
    swift_bridgeObjectRelease();
    uint64_t result = outlined consume of Path.Storage(v26, *((uint64_t *)&v26 + 1), v27, *((uint64_t *)&v27 + 1), v28);
  }
LABEL_11:
  *a4 = 0;
  return result;
}

uint64_t lazy protocol witness table accessor for type _DefaultForegroundStyleModifier<BorderlessButtonLabelShapeStyle<AnyShapeStyle>> and conformance _DefaultForegroundStyleModifier<A>(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ReorderableChildCoordinateSpace and conformance ReorderableChildCoordinateSpace()
{
  unint64_t result = lazy protocol witness table cache variable for type ReorderableChildCoordinateSpace and conformance ReorderableChildCoordinateSpace;
  if (!lazy protocol witness table cache variable for type ReorderableChildCoordinateSpace and conformance ReorderableChildCoordinateSpace)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ReorderableChildCoordinateSpace and conformance ReorderableChildCoordinateSpace);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ReorderableChildCoordinateSpace and conformance ReorderableChildCoordinateSpace;
  if (!lazy protocol witness table cache variable for type ReorderableChildCoordinateSpace and conformance ReorderableChildCoordinateSpace)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ReorderableChildCoordinateSpace and conformance ReorderableChildCoordinateSpace);
  }
  return result;
}

uint64_t static _DocumentIntroAccessoryBuilder.buildPartialBlock<A, B>(accumulated:next:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9 = *(void *)(a4 - 8);
  MEMORY[0x1F4188790](a1);
  double v11 = (char *)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v13 = MEMORY[0x1F4188790](v12);
  double v15 = (char *)&v18 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, double))(v16 + 16))(v15, v13);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, a4);
  return MergedDocumentIntroAccessory.init(first:second:)((uint64_t)v15, (uint64_t)v11, a3, a4, a5);
}

void *assignWithTake for SearchFieldConfigurationReader(void *a1, void *a2, uint64_t a3)
{
  unint64_t v6 = (unint64_t)a2 + 15;
  *a1 = *a2;
  swift_release();
  char v7 = (void *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  v6 &= 0xFFFFFFFFFFFFFFF8;
  *char v7 = *(void *)v6;
  swift_release();
  uint64_t v8 = type metadata accessor for AttributedString();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(_DWORD *)(v9 + 80);
  unint64_t v11 = *(_DWORD *)(v9 + 80) & 0xFC ^ 0xFFFFFFFFFFFFFFFCLL;
  uint64_t v12 = (unsigned char *)(((unint64_t)v7 + v10 + 8) & v11);
  double v13 = (unsigned char *)((v10 + 8 + v6) & v11);
  *uint64_t v12 = *v13;
  v12[1] = v13[1];
  v12[2] = v13[2];
  v12[3] = v13[3];
  unint64_t v14 = (unint64_t)(v12 + 7) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v15 = (unint64_t)(v13 + 7) & 0xFFFFFFFFFFFFFFFCLL;
  LOBYTE(v13) = *(unsigned char *)(v15 + 4);
  *(_DWORD *)unint64_t v14 = *(_DWORD *)v15;
  *(unsigned char *)(v14 + 4) = (_BYTE)v13;
  uint64_t v16 = (v10 + 5 + v14) & ~v10;
  uint64_t v17 = (v10 + 5 + v15) & ~v10;
  uint64_t v18 = v9 + 40;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 40))(v16, v17, v8);
  uint64_t v19 = *(void *)(v18 + 24);
  *(unsigned char *)(v19 + v16) = *(unsigned char *)(v19 + v17);
  unint64_t v20 = (v19 + v16) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v21 = (v19 + v17) & 0xFFFFFFFFFFFFFFFCLL;
  *(_DWORD *)(v20 + 4) = *(_DWORD *)(v21 + 4);
  *(unsigned char *)(v20 + 8) = *(unsigned char *)(v21 + 8);
  unint64_t v22 = ((v10 + 16) & v11) + ((v19 + ((v10 + 9) & ~v10)) & 0xFFFFFFFFFFFFFFFCLL) + 9;
  uint64_t v23 = (char *)a1 + v22;
  uint64_t v24 = (char *)a2 + v22;
  unint64_t v25 = ((unint64_t)a1 + v22 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v26 = (unint64_t)(v24 + 7) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v25 = *(void *)v26;
  swift_release();
  *(void *)(v25 + 8) = *(void *)(v26 + 8);
  swift_release();
  *(unsigned char *)(v25 + 16) = *(unsigned char *)(v26 + 16);
  long long v27 = (_OWORD *)((unint64_t)(v23 + 31) & 0xFFFFFFFFFFFFFFF8);
  unsigned __int8 v28 = (_OWORD *)((unint64_t)(v24 + 31) & 0xFFFFFFFFFFFFFFF8);
  *long long v27 = *v28;
  swift_release();
  uint64_t v29 = *(void *)(*(void *)(a3 + 24) - 8);
  (*(void (**)(unint64_t, unint64_t))(v29 + 40))(((unint64_t)v27 + *(unsigned __int8 *)(v29 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v29 + 80), ((unint64_t)v28 + *(unsigned __int8 *)(v29 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v29 + 80));
  return a1;
}

void *assignWithCopy for SearchFieldConfigurationReader(void *a1, void *a2, uint64_t a3)
{
  unint64_t v6 = (unint64_t)a2 + 15;
  *a1 = *a2;
  swift_retain();
  swift_release();
  char v7 = (void *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  v6 &= 0xFFFFFFFFFFFFFFF8;
  *char v7 = *(void *)v6;
  swift_retain();
  swift_release();
  uint64_t v8 = type metadata accessor for AttributedString();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(_DWORD *)(v9 + 80);
  unint64_t v11 = (unint64_t)v7 + v10 + 8;
  unint64_t v12 = *(_DWORD *)(v9 + 80) & 0xFC ^ 0xFFFFFFFFFFFFFFFCLL;
  double v13 = (unsigned char *)(v11 & v12);
  unint64_t v14 = (unsigned char *)((v10 + 8 + v6) & v12);
  *double v13 = *v14;
  v13[1] = v14[1];
  v13[2] = v14[2];
  v13[3] = v14[3];
  unint64_t v15 = (unint64_t)(v13 + 7) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v16 = (unint64_t)(v14 + 7) & 0xFFFFFFFFFFFFFFFCLL;
  LOBYTE(v14) = *(unsigned char *)(v16 + 4);
  *(_DWORD *)unint64_t v15 = *(_DWORD *)v16;
  *(unsigned char *)(v15 + 4) = (_BYTE)v14;
  uint64_t v17 = (v10 + 5 + v15) & ~v10;
  uint64_t v18 = (v10 + 5 + v16) & ~v10;
  uint64_t v19 = v9 + 24;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 24))(v17, v18, v8);
  uint64_t v20 = *(void *)(v19 + 40);
  *(unsigned char *)(v20 + v17) = *(unsigned char *)(v20 + v18);
  unint64_t v21 = (v20 + v17) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v22 = (v20 + v18) & 0xFFFFFFFFFFFFFFFCLL;
  *(_DWORD *)(v21 + 4) = *(_DWORD *)(v22 + 4);
  *(unsigned char *)(v21 + 8) = *(unsigned char *)(v22 + 8);
  unint64_t v23 = ((v10 + 16) & v12) + ((v20 + ((v10 + 9) & ~v10)) & 0xFFFFFFFFFFFFFFFCLL) + 9;
  uint64_t v24 = (char *)a1 + v23;
  unint64_t v25 = (char *)a2 + v23;
  unint64_t v26 = ((unint64_t)a1 + v23 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v27 = ((unint64_t)a2 + v23 + 7) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v26 = *(void *)v27;
  swift_retain();
  swift_release();
  *(void *)(v26 + 8) = *(void *)(v27 + 8);
  swift_retain();
  swift_release();
  *(unsigned char *)(v26 + 16) = *(unsigned char *)(v27 + 16);
  unsigned __int8 v28 = (void *)((unint64_t)(v24 + 31) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v29 = (void *)((unint64_t)(v25 + 31) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v30 = v29[1];
  *unsigned __int8 v28 = *v29;
  v28[1] = v30;
  swift_retain();
  swift_release();
  uint64_t v31 = *(void *)(*(void *)(a3 + 24) - 8);
  (*(void (**)(unint64_t, unint64_t))(v31 + 24))(((unint64_t)v28 + *(unsigned __int8 *)(v31 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v31 + 80), ((unint64_t)v29 + *(unsigned __int8 *)(v31 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v31 + 80));
  return a1;
}

void _JSONUnkeyedDecodingContainer.decodeNil()()
{
  uint64_t v1 = v0[1];
  uint64_t v2 = v0[3];
  if (v2 >= *(void *)(v1 + 16))
  {
    uint64_t v6 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v8 = v7;
    type metadata accessor for (@thick Any.Type, DecodingError.Context)();
    _sypSgMaTm_3(0, (unint64_t *)&lazy cache variable for type metadata for Any?, MEMORY[0x1E4FBC840] + 8, MEMORY[0x1E4FBB718]);
    void *v8 = v9;
    uint64_t v10 = *v0;
    swift_beginAccess();
    unint64_t v11 = *(void **)(v10 + 136);
    type metadata accessor for _ContiguousArrayStorage<CodingKey>();
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_18834BB80;
    uint64_t v13 = v0[3];
    unint64_t v18 = 0xE600000000000000;
    uint64_t v19 = v13;
    swift_bridgeObjectRetain();
    v14._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v14);
    swift_bridgeObjectRelease();
    *(void *)(inited + 56) = &unk_1ED468578;
    *(void *)(inited + 64) = lazy protocol witness table accessor for type _JSONKey and conformance _JSONKey();
    uint64_t v15 = swift_allocObject();
    *(void *)(inited + 32) = v15;
    *(void *)(v15 + 16) = 0x207865646E49;
    *(void *)(v15 + 24) = 0xE600000000000000;
    *(void *)(v15 + 32) = v13;
    *(unsigned char *)(v15 + 40) = 0;
    id v17 = v11;
    specialized Array.append<A>(contentsOf:)(inited);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(void *, void, uint64_t))(*(void *)(v6 - 8) + 104))(v8, *MEMORY[0x1E4FBBA80], v6);
    swift_willThrow();
    return;
  }
  if (v2 < 0)
  {
    __break(1u);
LABEL_9:
    __break(1u);
    return;
  }
  outlined init with copy of Any(v1 + 32 * v2 + 32, (uint64_t)v16);
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for NSNull);
  if (swift_dynamicCast())
  {

    uint64_t v3 = v0[3];
    BOOL v4 = __OFADD__(v3, 1);
    uint64_t v5 = v3 + 1;
    if (!v4)
    {
      v0[3] = v5;
      return;
    }
    goto LABEL_9;
  }
}

uint64_t _JSONUnkeyedDecodingContainer.nestedUnkeyedContainer()@<X0>(void *a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v3 = *v1;
  uint64_t v4 = v1[3];
  *(void *)&long long v32 = 0x207865646E49;
  *((void *)&v32 + 1) = 0xE600000000000000;
  v31[0] = v4;
  v5._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  uint64_t v6 = (void *)(v3 + 136);
  swift_beginAccess();
  char v7 = *(void **)(v3 + 136);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(void *)(v3 + 136) = v7;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    char v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v7[2] + 1, 1, v7);
    *uint64_t v6 = v7;
  }
  unint64_t v10 = v7[2];
  unint64_t v9 = v7[3];
  if (v10 >= v9 >> 1)
  {
    char v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v9 > 1), v10 + 1, 1, v7);
    *uint64_t v6 = v7;
  }
  uint64_t v33 = &unk_1ED468578;
  unint64_t v34 = lazy protocol witness table accessor for type _JSONKey and conformance _JSONKey();
  uint64_t v11 = swift_allocObject();
  *(void *)&long long v32 = v11;
  *(void *)(v11 + 16) = 0x207865646E49;
  *(void *)(v11 + 24) = 0xE600000000000000;
  *(void *)(v11 + 32) = v4;
  *(unsigned char *)(v11 + 40) = 0;
  v7[2] = v10 + 1;
  uint64_t result = outlined init with take of OptionalBinaryInteger(&v32, (uint64_t)&v7[5 * v10 + 4]);
  uint64_t v13 = v2[1];
  if (v4 >= *(void *)(v13 + 16))
  {
    uint64_t v19 = type metadata accessor for DecodingError();
    swift_allocError();
    unint64_t v21 = v20;
    type metadata accessor for (@thick Any.Type, DecodingError.Context)();
    *unint64_t v21 = type metadata accessor for CVarArg(0, (unint64_t *)&lazy cache variable for type metadata for UnkeyedDecodingContainer);
    swift_bridgeObjectRetain();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v19 - 8) + 104))(v21, *MEMORY[0x1E4FBBA80], v19);
    swift_willThrow();
    return $defer #1 <A>() in _JSONKeyedEncodingContainer.encode(_:forKey:)(v2);
  }
  if (v4 < 0)
  {
    __break(1u);
  }
  else
  {
    outlined init with copy of Any(v13 + 32 * v4 + 32, (uint64_t)&v32);
    outlined init with copy of Any((uint64_t)&v32, (uint64_t)v31);
    type metadata accessor for NSObject(0, &lazy cache variable for type metadata for NSNull);
    uint64_t v14 = MEMORY[0x1E4FBC840] + 8;
    if (swift_dynamicCast())
    {

      uint64_t v15 = type metadata accessor for DecodingError();
      swift_allocError();
      id v17 = v16;
      type metadata accessor for (@thick Any.Type, DecodingError.Context)();
      uint64_t *v17 = type metadata accessor for CVarArg(0, (unint64_t *)&lazy cache variable for type metadata for UnkeyedDecodingContainer);
      swift_bridgeObjectRetain();
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      unint64_t v18 = (unsigned int *)MEMORY[0x1E4FBBA80];
LABEL_14:
      (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v15 - 8) + 104))(v17, *v18, v15);
      swift_willThrow();
      goto LABEL_15;
    }
    outlined init with copy of Any((uint64_t)&v32, (uint64_t)v31);
    _sypSgMaTm_3(0, (unint64_t *)&lazy cache variable for type metadata for [Any], v14, MEMORY[0x1E4FBB320]);
    uint64_t result = swift_dynamicCast();
    if (!result)
    {
      uint64_t v15 = type metadata accessor for DecodingError();
      swift_allocError();
      id v17 = v29;
      type metadata accessor for (@thick Any.Type, DecodingError.Context)();
      uint64_t *v17 = type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
      swift_bridgeObjectRetain();
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      unint64_t v18 = (unsigned int *)MEMORY[0x1E4FBBA70];
      goto LABEL_14;
    }
    uint64_t v22 = v2[3];
    BOOL v23 = __OFADD__(v22, 1);
    uint64_t v24 = v22 + 1;
    if (!v23)
    {
      id v25 = v35;
      v2[3] = v24;
      uint64_t v26 = *v2;
      swift_beginAccess();
      uint64_t v27 = *(void *)(v26 + 136);
      a1[3] = &unk_1ED457BB0;
      a1[4] = lazy protocol witness table accessor for type _JSONUnkeyedDecodingContainer and conformance _JSONUnkeyedDecodingContainer();
      unsigned __int8 v28 = (void *)swift_allocObject();
      *a1 = v28;
      v28[2] = v26;
      v28[3] = v25;
      v28[4] = v27;
      v28[5] = 0;
      swift_retain();
      swift_bridgeObjectRetain();
LABEL_15:
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v32);
      return $defer #1 <A>() in _JSONKeyedEncodingContainer.encode(_:forKey:)(v2);
    }
  }
  __break(1u);
  return result;
}

uint64_t NavigationSplitViewVisibility.encode(to:)(void *a1)
{
  type metadata accessor for KeyedEncodingContainer<NavigationSplitViewVisibility.CodingKeys>(0, &lazy cache variable for type metadata for KeyedEncodingContainer<NavigationSplitViewVisibility.CodingKeys>, MEMORY[0x1E4FBBDE0]);
  uint64_t v5 = v4;
  uint64_t v6 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v8 = (char *)&v11 - v7;
  char v9 = *v1;
  int v12 = v1[1];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type NavigationSplitViewVisibility.CodingKeys and conformance NavigationSplitViewVisibility.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  char v15 = v9;
  char v14 = 0;
  lazy protocol witness table accessor for type NavigationSplitViewVisibility.Kind and conformance NavigationSplitViewVisibility.Kind();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    char v13 = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t specialized NavigationSplitViewVisibility.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 1684957547 && a2 == 0xE400000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x616D6F7475417369 && a2 == 0xEB00000000636974)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

void type metadata accessor for StyleContextAcceptsPredicate<MenuStyleContext>()
{
  if (!lazy cache variable for type metadata for StyleContextAcceptsPredicate<MenuStyleContext>)
  {
    unint64_t v0 = type metadata accessor for StyleContextAcceptsPredicate();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for StyleContextAcceptsPredicate<MenuStyleContext>);
    }
  }
}

uint64_t ResponderBasedHitTestTracing.traceHitTest(point:radius:options:result:)@<X0>(uint64_t *a1@<X0>, void *a2@<X1>, unsigned int a3@<W2>, void *a4@<X3>, char a5@<W4>, uint64_t a6@<X8>, double a7@<D0>, double a8@<D1>, double a9@<D2>)
{
  uint64_t v45 = *a1;
  if (a5)
  {
    uint64_t v15 = 0;
    uint64_t v56 = *a1;
    if (_BYTE)a3 != 0xFF && (a3)
    {
      swift_retain();
      uint64_t v15 = (uint64_t)a2;
    }
    swift_retain();
    ViewResponder.traceHitTest(point:radius:options:result:)(&v56, v15, (uint64_t)&v48, a7, a8, a9);
    swift_release();
    unint64_t v16 = v55;
    if (v55) {
      char v17 = 1;
    }
    else {
      char v17 = -1;
    }
    unsigned __int8 v42 = v17;
    uint64_t v18 = v53;
    uint64_t v19 = v54;
    uint64_t v21 = v51;
    uint64_t v20 = v52;
    id v22 = v48;
    uint64_t v47 = v49;
    uint64_t v23 = v50;
    swift_retain();
    uint64_t v41 = v23;
    swift_bridgeObjectRetain();
    uint64_t v24 = v20;
    swift_bridgeObjectRetain();
    uint64_t v40 = v16;
    swift_retain();
    uint64_t v25 = swift_bridgeObjectRetain();
    uint64_t v39 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay7SwiftUI12HitTestTrace33_DB5E6F06E13FF0259F656B4E03BE4F79LLVyAF13ViewResponderCGG_AIyAF0t5BasedfG7TracingAHLLOGs5NeverOTg503_s7d4UI12fg8Trace33_ijklmnopqr29LLV3mapyADyqd__Gqd__xXEAA0cD7v25ACLLRd__lFAfDyxGXEfU_AA13sT24C_AA0s5BasedcdQ0ACLLOTG5xq_Ri_zRi0_zRi__Ri0__r0_lyAkOIsgnr_Tf1cn_nTf4ng_n(v25, (void (*)(uint64_t *__return_ptr, uint64_t *))closure #2 in ResponderBasedHitTestTracing.traceHitTest(point:radius:options:result:), 0);
    swift_bridgeObjectRelease();
    uint64_t v26 = v21;
    outlined consume of ResponderBasedHitTestTracing(a4, 1);
    outlined release of HitTestTrace<ViewResponder>((uint64_t)&v48);
  }
  else
  {
    if (a3)
    {
      unsigned __int8 v28 = 0;
    }
    else
    {
      id v27 = a2;
      unsigned __int8 v28 = a2;
    }
    id v29 = a4;
    UIView.traceHitTest(point:radius:result:)(v28, (uint64_t)&v48, a7, a8, a9);

    uint64_t v30 = v55;
    if (v55) {
      char v31 = 0;
    }
    else {
      char v31 = -1;
    }
    unsigned __int8 v42 = v31;
    uint64_t v18 = v53;
    uint64_t v19 = v54;
    uint64_t v33 = v51;
    uint64_t v32 = v52;
    uint64_t v47 = v49;
    uint64_t v34 = v50;
    id v22 = v48;
    uint64_t v41 = v34;
    swift_bridgeObjectRetain();
    uint64_t v24 = v32;
    swift_bridgeObjectRetain();
    uint64_t v40 = v30;
    id v35 = v30;
    uint64_t v36 = swift_bridgeObjectRetain();
    uint64_t v39 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay7SwiftUI12HitTestTrace33_DB5E6F06E13FF0259F656B4E03BE4F79LLVySo6UIViewCGG_AIyAF014ResponderBasedfG7TracingAHLLOGs5NeverOTg503_s7d4UI12fg8Trace33_ijklmnopqr29LLV3mapyADyqd__Gqd__xXEAA0cD7v24ACLLRd__lFAfDyxGXEfU_So6s7C_AA014T17BasedcdQ0ACLLOTG5xq_Ri_zRi0_zRi__Ri0__r0_lyAkOIsgnr_Tf1cn_nTf4ng_n(v36, (void (*)(uint64_t *__return_ptr, id *))closure #1 in ResponderBasedHitTestTracing.traceHitTest(point:radius:options:result:), 0);
    swift_bridgeObjectRelease();
    uint64_t v26 = v33;
    outlined consume of ResponderBasedHitTestTracing(a4, 0);
    outlined release of HitTestTrace<UIView>((uint64_t)&v48);
  }
  uint64_t v56 = (uint64_t)v22;
  char v57 = a5 & 1;
  uint64_t v58 = v47;
  uint64_t v59 = v41;
  uint64_t v60 = v26;
  uint64_t v61 = v24;
  uint64_t v62 = v18;
  uint64_t v63 = v19;
  double v64 = v40;
  unsigned __int8 v65 = v42;
  uint64_t v66 = v39;
  outlined copy of ResponderBasedHitTestTracing(v22, a5 & 1);
  outlined copy of ResponderBasedHitTestTracing?(v40, v42);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v37 = closure #3 in ResponderBasedHitTestTracing.traceHitTest(point:radius:options:result:)(v39, &v56, v45, a2, a3, a7, a8, a9);
  outlined consume of ResponderBasedHitTestTracing(v22, a5 & 1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined consume of ResponderBasedHitTestTracing?(v40, v42);
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)a6 = v22;
  *(unsigned char *)(a6 + 8) = a5 & 1;
  *(void *)(a6 + 16) = v47;
  *(void *)(a6 + 24) = v41;
  *(void *)(a6 + 32) = v26;
  *(void *)(a6 + 40) = v24;
  *(void *)(a6 + 48) = v18;
  *(void *)(a6 + 56) = v19;
  *(void *)(a6 + 64) = v40;
  *(unsigned char *)(a6 + 72) = v42;
  *(void *)(a6 + 80) = v37;
  return result;
}

void *assignWithTake for NavigationPropertiesModifier(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_release();
  uint64_t v6 = *(void *)(a3 + 32);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(unsigned __int8 *)(v7 + 80);
  char v9 = (void *)(((unint64_t)a1 + v8 + 8) & ~v8);
  unint64_t v10 = (void *)(((unint64_t)a2 + v8 + 8) & ~v8);
  uint64_t v11 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v7 + 48);
  int v12 = v11(v9, 1, v6);
  int v13 = v11(v10, 1, v6);
  if (v12)
  {
    if (!v13)
    {
      (*(void (**)(void *, void *, uint64_t))(v7 + 32))(v9, v10, v6);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(v9, 0, 1, v6);
      return a1;
    }
    int v14 = *(_DWORD *)(v7 + 84);
    size_t v15 = *(void *)(v7 + 64);
  }
  else
  {
    if (!v13)
    {
      (*(void (**)(void *, void *, uint64_t))(v7 + 40))(v9, v10, v6);
      return a1;
    }
    char v17 = *(void (**)(void *, uint64_t))(v7 + 8);
    uint64_t v16 = v7 + 8;
    v17(v9, v6);
    int v14 = *(_DWORD *)(v16 + 76);
    size_t v15 = *(void *)(v16 + 56);
  }
  if (v14) {
    size_t v18 = v15;
  }
  else {
    size_t v18 = v15 + 1;
  }
  memcpy(v9, v10, v18);
  return a1;
}

unint64_t lazy protocol witness table accessor for type MenuPickerOptionSectionStyle and conformance MenuPickerOptionSectionStyle()
{
  unint64_t result = lazy protocol witness table cache variable for type MenuPickerOptionSectionStyle and conformance MenuPickerOptionSectionStyle;
  if (!lazy protocol witness table cache variable for type MenuPickerOptionSectionStyle and conformance MenuPickerOptionSectionStyle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MenuPickerOptionSectionStyle and conformance MenuPickerOptionSectionStyle);
  }
  return result;
}

uint64_t CollectionViewListScrollable.base.getter@<X0>(void *a1@<X8>)
{
  type metadata accessor for ShadowListDataSource();
  swift_getWitnessTable();
  uint64_t v3 = type metadata accessor for ListScrollable.DataSourceProvider();
  MEMORY[0x1F4188790](v3);
  uint64_t v5 = (char *)&v17 - v4;
  uint64_t v6 = CollectionViewListScrollable.coordinator.getter();
  if (v6)
  {
    uint64_t v7 = v6;
    uint64_t v8 = (char *)v6 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v6) + 0x88);
    swift_beginAccess();
    uint64_t v9 = swift_checkMetadataState();
    uint64_t v10 = *(void *)(v9 - 8);
    (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v5, v8, v9);

    (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v5, 0, 1, v9);
  }
  else
  {
    uint64_t v11 = swift_checkMetadataState();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56))(v5, 1, 1, v11);
  }
  uint64_t v12 = v1[1];
  swift_storeEnumTagMultiPayload();
  uint64_t v13 = v1[2];
  uint64_t v14 = v1[3];
  uint64_t v15 = v1[4];
  swift_checkMetadataState();
  ListScrollable.init(state:dataSourceProvider:scrollView:children:lastUpdateSeed:)(v12, (uint64_t)v5, v13, v14, v15, a1);
  return swift_retain();
}

void AnyAccessibilityViewModifier.isEqual(to:)()
{
}

void AnyAccessibilityViewModifier.visibility(for:nodes:)()
{
}

void type metadata accessor for AccessibilityPropertiesEntry<AccessibilityActivationPointStorage?>()
{
  if (!lazy cache variable for type metadata for AccessibilityPropertiesEntry<AccessibilityActivationPointStorage?>)
  {
    _s7SwiftUI25AccessibilityValueStorageVSgMaTm_0(255, (unint64_t *)&lazy cache variable for type metadata for AccessibilityActivationPointStorage?, MEMORY[0x1E4F412D8], MEMORY[0x1E4FBB718]);
    unint64_t v0 = type metadata accessor for AccessibilityPropertiesEntry();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for AccessibilityPropertiesEntry<AccessibilityActivationPointStorage?>);
    }
  }
}

void type metadata accessor for AccessibilityPropertiesEntry<AccessibilityScrollableContext?>(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    _sSay7SwiftUI25_LazyLayout_PlacedSubviewVGMaTm_2(255, a3, a4, MEMORY[0x1E4FBB718]);
    unint64_t v9 = a5(a1, v8);
    if (!v10) {
      atomic_store(v9, a2);
    }
  }
}

uint64_t specialized static PresentationDimmingBehavior.== infix(_:_:)(void *a1, void *a2)
{
  if (!a1)
  {
    if (!a2)
    {
LABEL_6:
      char v4 = 1;
      return v4 & 1;
    }
LABEL_8:
    char v4 = 0;
    return v4 & 1;
  }
  if (a1 == (void *)1)
  {
    if (a2 != (void *)1) {
      goto LABEL_8;
    }
    goto LABEL_6;
  }
  if ((unint64_t)a2 < 2) {
    goto LABEL_8;
  }
  uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v7 = v6;
  if (v5 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v7 == v8) {
    char v4 = 1;
  }
  else {
    char v4 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  outlined copy of Image.Location(a1);
  outlined copy of Image.Location(a2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined consume of Image.Location(a2);
  outlined consume of Image.Location(a1);
  return v4 & 1;
}

void type metadata accessor for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<UIKitCalendarViewRepresentable>>.Factory()
{
  if (!lazy cache variable for type metadata for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<UIKitCalendarViewRepresentable>>.Factory)
  {
    type metadata accessor for PlatformViewRepresentableAdaptor<UIKitCalendarViewRepresentable>(255);
    _s7SwiftUI22ArchivableLinkModifierVACSeAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type PlatformViewRepresentableAdaptor<UIKitCalendarViewRepresentable> and conformance PlatformViewRepresentableAdaptor<A>, type metadata accessor for PlatformViewRepresentableAdaptor<UIKitCalendarViewRepresentable>);
    unint64_t v0 = type metadata accessor for PlatformArchivedDisplayList.Factory();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<UIKitCalendarViewRepresentable>>.Factory);
    }
  }
}

unint64_t lazy protocol witness table accessor for type FocusSectionResponderFilter and conformance FocusSectionResponderFilter()
{
  unint64_t result = lazy protocol witness table cache variable for type FocusSectionResponderFilter and conformance FocusSectionResponderFilter;
  if (!lazy protocol witness table cache variable for type FocusSectionResponderFilter and conformance FocusSectionResponderFilter)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FocusSectionResponderFilter and conformance FocusSectionResponderFilter);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ContainerBackgroundModifier.CustomPreferenceValue and conformance ContainerBackgroundModifier.CustomPreferenceValue()
{
  unint64_t result = lazy protocol witness table cache variable for type ContainerBackgroundModifier.CustomPreferenceValue and conformance ContainerBackgroundModifier.CustomPreferenceValue;
  if (!lazy protocol witness table cache variable for type ContainerBackgroundModifier.CustomPreferenceValue and conformance ContainerBackgroundModifier.CustomPreferenceValue)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ContainerBackgroundModifier.CustomPreferenceValue and conformance ContainerBackgroundModifier.CustomPreferenceValue);
  }
  return result;
}

void *assignWithCopy for CircularPercentageGaugeRing.StartCap(void *a1, void *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  return a1;
}

ValueMetadata *type metadata accessor for IndexViewPlacementModifier()
{
  return &type metadata for IndexViewPlacementModifier;
}

uint64_t outlined release of CodableAccessibilityAction(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 24);
  uint64_t v3 = *(void *)(a1 + 32);
  char v4 = *(unsigned char *)(a1 + 40);
  uint64_t v5 = *(void **)(a1 + 48);
  outlined copy of CodableAccessibilityAction.ActionKind(*(void *)a1, *(void *)(a1 + 8), *(_WORD *)(a1 + 16), (uint64_t (*)(uint64_t, uint64_t, void))outlined consume of AccessibilityText.Storage);
  outlined consume of Environment<AppIntentExecutor?>.Content(v2, v3, v4);
  swift_release();

  return a1;
}

uint64_t outlined retain of CodableAccessibilityAction(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 24);
  uint64_t v3 = *(void *)(a1 + 32);
  char v4 = *(unsigned char *)(a1 + 40);
  uint64_t v5 = *(void **)(a1 + 48);
  outlined copy of CodableAccessibilityAction.ActionKind(*(void *)a1, *(void *)(a1 + 8), *(_WORD *)(a1 + 16), (uint64_t (*)(uint64_t, uint64_t, void))outlined copy of AccessibilityText.Storage);
  outlined copy of Environment<AppIntentExecutor?>.Content(v2, v3, v4);
  id v6 = v5;
  swift_retain();
  return a1;
}

uint64_t outlined copy of CodableAccessibilityAction.ActionKind(uint64_t result, uint64_t a2, unsigned __int8 a3, uint64_t (*a4)(uint64_t, uint64_t, void))
{
  if (a3 != 251 && (a3 & 0xFC | 2) != 0xFE) {
    return a4(result, a2, a3 & 1);
  }
  return result;
}

uint64_t type metadata accessor for SpringLoadedViewResponder()
{
  uint64_t result = type metadata singleton initialization cache for SpringLoadedViewResponder;
  if (!type metadata singleton initialization cache for SpringLoadedViewResponder) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t DragReorderableLayoutCore.init(adaptor:coordinator:state:placeholder:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v7 = type metadata accessor for DragReorderableLayoutAdaptor();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 32))(a5, a1, v7);
  uint64_t v8 = (int *)type metadata accessor for DragReorderableLayoutCore();
  *(void *)(a5 + v8[9]) = a2;
  unint64_t v9 = (_OWORD *)(a5 + v8[10]);
  long long v10 = a3[1];
  *unint64_t v9 = *a3;
  v9[1] = v10;
  *(_OWORD *)((char *)v9 + 25) = *(_OWORD *)((char *)a3 + 25);
  uint64_t v11 = a5 + v8[11];
  uint64_t v12 = type metadata accessor for Optional();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 32))(v11, a4, v12);
}

uint64_t specialized UIKitFocusableFillerItem.didUpdateFocus(in:with:)()
{
  type metadata accessor for Logger?();
  MEMORY[0x1F4188790](v1 - 8);
  uint64_t v3 = (char *)&v16 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  static Log.focus.getter();
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v5 = *(void *)(v4 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v3, 1, v4) == 1) {
    return outlined destroy of Logger?((uint64_t)v3);
  }
  id v7 = v0;
  uint64_t v8 = Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v8, v9))
  {
    long long v10 = (uint8_t *)swift_slowAlloc();
    uint64_t v17 = swift_slowAlloc();
    uint64_t v19 = v17;
    *(_DWORD *)long long v10 = 136315138;
    uint64_t v16 = v10 + 4;
    id v11 = v7;
    uint64_t v12 = specialized UIKitFocusItemDescription.init(_:)(v11);
    unint64_t v14 = v13;

    uint64_t v18 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v12, v14, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1872C6000, v8, v9, "focus changed for: %s", v10, 0xCu);
    uint64_t v15 = v17;
    swift_arrayDestroy();
    MEMORY[0x18C119C60](v15, -1, -1);
    MEMORY[0x18C119C60](v10, -1, -1);
  }
  else
  {
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v3, v4);
}

uint64_t *ScrollStateActionBinding.updateValue()()
{
  int v1 = *(_DWORD *)AGGraphGetValue() >> 1;
  if (v1 != *(_DWORD *)(v0 + 40))
  {
    *(_DWORD *)(v0 + 40) = v1;
    *(void *)(v0 + 28) = 0xFFFFFFFFLL;
    *(unsigned char *)(v0 + 36) = 0;
  }
  type metadata accessor for NavigationState.StackContent?(0, &lazy cache variable for type metadata for [ScrollGeometryState], MEMORY[0x1E4F40498], MEMORY[0x1E4FBB320]);
  uint64_t result = (uint64_t *)AGGraphGetValue();
  if (v3)
  {
    uint64_t v4 = *result;
    swift_bridgeObjectRetain();
    AGGraphClearUpdate();
    AGGraphGetValue();
    AGGraphSetUpdate();
    AGGraphClearUpdate();
    uint64_t Value = AGGraphGetValue();
    long long v31 = *(_OWORD *)Value;
    uint64_t v6 = *(void *)(Value + 16);
    uint64_t v7 = *(void *)(Value + 24);
    AGGraphSetUpdate();
    AGGraphClearUpdate();
    uint64_t v8 = AGGraphGetValue();
    uint64_t v9 = *(void *)v8;
    long long v30 = *(_OWORD *)(v8 + 8);
    uint64_t v10 = *(void *)(v8 + 24);
    uint64_t v11 = *(void *)(v8 + 32);
    swift_retain();
    uint64_t v12 = AGGraphSetUpdate();
    CGFloat v13 = MEMORY[0x18C10C240](v12);
    CGFloat v15 = v14;
    long long v33 = v31;
    *(void *)&long long v34 = v6;
    *((void *)&v34 + 1) = v7;
    CGFloat v16 = MEMORY[0x18C114450]();
    uint64_t v46 = v9;
    long long v47 = v30;
    uint64_t v48 = v10;
    uint64_t v49 = v11;
    ScrollStateActionBinding.findBestStates(in:position:size:transform:)(v4, &v46, &v33, v13, v15, v16, v17);
    swift_bridgeObjectRelease();
    uint64_t v18 = MEMORY[0x1E4F40498];
    _s7SwiftUI15NavigationStateV12StackContentVSgWObTm_1((uint64_t)&v33, (uint64_t)v44, &lazy cache variable for type metadata for ScrollGeometryState?, MEMORY[0x1E4F40498]);
    _s7SwiftUI15NavigationStateV12StackContentVSgWObTm_1((uint64_t)v44, (uint64_t)&v46, &lazy cache variable for type metadata for ScrollGeometryState?, v18);
    if (_s7SwiftUI19ScrollGeometryStateVSgWOg((uint64_t)&v46) != 1
      || (_s7SwiftUI15NavigationStateV12StackContentVSgWObTm_1((uint64_t)v41, (uint64_t)v43, &lazy cache variable for type metadata for ScrollGeometryState?, v18), _s7SwiftUI15NavigationStateV12StackContentVSgWObTm_1((uint64_t)v43, (uint64_t)v50, &lazy cache variable for type metadata for ScrollGeometryState?, v18), _s7SwiftUI19ScrollGeometryStateVSgWOg((uint64_t)v50) != 1))
    {
      if (UpdateCycleDetector.dispatch(label:isDebug:)())
      {
        AGGraphClearUpdate();
        uint64_t v19 = AGGraphGetValue();
        uint64_t v20 = *(void *)(v19 + 8);
        *(_OWORD *)uint64_t v32 = *(_OWORD *)(v19 + 16);
        *(_OWORD *)&v32[9] = *(_OWORD *)(v19 + 25);
        uint64_t v45 = *(void *)v19;
        uint64_t v21 = v45;
        outlined retain of ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?((uint64_t)&v45);
        swift_retain();
        AGGraphSetUpdate();
        uint64_t v22 = swift_allocObject();
        *(void *)(v22 + 16) = v21;
        *(void *)(v22 + 24) = v20;
        *(_OWORD *)(v22 + 32) = *(_OWORD *)v32;
        *(_OWORD *)(v22 + 41) = *(_OWORD *)&v32[9];
        long long v23 = v41[5];
        *(_OWORD *)(v22 + 256) = v41[4];
        *(_OWORD *)(v22 + 272) = v23;
        *(_OWORD *)(v22 + 288) = v42[0];
        *(_OWORD *)(v22 + 301) = *(_OWORD *)((char *)v42 + 13);
        long long v24 = v41[1];
        *(_OWORD *)(v22 + 192) = v41[0];
        *(_OWORD *)(v22 + 208) = v24;
        long long v25 = v41[3];
        *(_OWORD *)(v22 + 224) = v41[2];
        *(_OWORD *)(v22 + 240) = v25;
        long long v26 = v38;
        *(_OWORD *)(v22 + 128) = v37;
        *(_OWORD *)(v22 + 144) = v26;
        long long v27 = v40;
        *(_OWORD *)(v22 + 160) = v39;
        *(_OWORD *)(v22 + 176) = v27;
        long long v28 = v34;
        *(_OWORD *)(v22 + 64) = v33;
        *(_OWORD *)(v22 + 80) = v28;
        long long v29 = v36;
        *(_OWORD *)(v22 + 96) = v35;
        *(_OWORD *)(v22 + 112) = v29;
        outlined retain of ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?((uint64_t)&v45);
        swift_retain();
        static Update.enqueueAction(_:)();
        swift_release();
        outlined release of ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?((uint64_t)&v45);
        swift_release();
      }
    }
    return (uint64_t *)swift_release();
  }
  return result;
}

uint64_t type metadata completion function for _InspectorSplitViewRoot()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t outlined destroy of TokenFieldConfiguration(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t _s7SwiftUI23TokenFieldConfigurationVWOhTm_0(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t TableColumnForEachState.update(forEach:)(uint64_t a1)
{
  uint64_t v168 = a1;
  v165 = (void *)*v1;
  uint64_t v2 = v165;
  uint64_t v3 = v165[11];
  uint64_t v150 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v149 = (char *)&v137 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v5);
  v146 = (char *)&v137 - v6;
  int64_t v7 = v2[13];
  uint64_t v8 = (char *)v2[10];
  uint64_t v158 = *(void *)(*(void *)(v7 + 8) + 8);
  uint64_t AssociatedTypeWitness = (void (*)(char *, char *, char *))swift_getAssociatedTypeWitness();
  uint64_t v147 = *((void *)AssociatedTypeWitness - 1);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  v162 = (char *)&v137 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v10);
  v151 = (char *)&v137 - v11;
  uint64_t v12 = v2[12];
  CGFloat v13 = (uint64_t (*)(void, void, void))v2[14];
  int64_t v14 = v2[15];
  v177 = v8;
  uint64_t v178 = v3;
  uint64_t v179 = v12;
  uint64_t v180 = v7;
  v181 = v13;
  int64_t v182 = v14;
  uint64_t v164 = type metadata accessor for TableColumnForEachState.Item();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v160 = type metadata accessor for Optional();
  uint64_t v141 = *(void *)(v160 - 8);
  MEMORY[0x1F4188790](v160);
  uint64_t v163 = (uint64_t)&v137 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v17);
  uint64_t v159 = (void (**)(char *, uint64_t))((char *)&v137 - v18);
  uint64_t v144 = *((void *)v8 - 1);
  MEMORY[0x1F4188790](v19);
  uint64_t v142 = (char *)&v137 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v21);
  uint64_t v145 = (char *)&v137 - v22;
  MEMORY[0x1F4188790](v23);
  unint64_t v143 = (char *)&v137 - v24;
  uint64_t v25 = swift_getAssociatedTypeWitness();
  uint64_t v26 = swift_getAssociatedTypeWitness();
  v177 = v8;
  uint64_t v178 = v3;
  uint64_t v169 = v3;
  Swift::Int v153 = (void (*)(char *, char *))v25;
  uint64_t v179 = v25;
  uint64_t v180 = v26;
  uint64_t v152 = v26;
  unint64_t v155 = v12;
  v181 = (uint64_t (*)(void, void, void))v12;
  int64_t v182 = v7;
  int64_t v156 = v7;
  v167 = (uint64_t (*)(char *, uint64_t, uint64_t))v13;
  v183 = v13;
  uint64_t v184 = v14;
  uint64_t v154 = v14;
  uint64_t v27 = type metadata accessor for TableColumnForEach();
  uint64_t v28 = type metadata accessor for Optional();
  uint64_t v29 = *(void *)(v28 - 8);
  MEMORY[0x1F4188790](v28);
  long long v31 = (char *)&v137 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v32);
  long long v34 = (char *)&v137 - v33;
  uint64_t result = AGSubgraphIsValid();
  if (!result) {
    return result;
  }
  v140 = v31;
  uint64_t v36 = v165[23];
  int v157 = *(_DWORD *)((char *)v1 + v36);
  uint64_t v161 = v36;
  *(_DWORD *)((char *)v1 + v36) = v157 + 1;
  uint64_t v37 = *(void *)(*v1 + 160);
  v165 = v1;
  long long v38 = (char *)v1 + v37;
  swift_beginAccess();
  long long v39 = *(void (**)(char *, char *, uint64_t))(v29 + 16);
  v148 = v38;
  v39(v34, v38, v28);
  uint64_t v40 = *(void *)(v27 - 8);
  uint64_t v41 = v40 + 48;
  unsigned __int8 v42 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v40 + 48);
  LODWORD(v38) = v42(v34, 1, v27);
  uint64_t v43 = *(void (**)(char *, uint64_t))(v29 + 8);
  uint64_t v139 = v28;
  v43(v34, v28);
  uint64_t v44 = v27;
  uint64_t v45 = v169;
  uint64_t v46 = (uint64_t)v146;
  uint64_t v138 = v44;
  if (v38 != 1)
  {
    uint64_t v137 = v40;
    uint64_t result = v42(v148, 1, v44);
    if (result == 1) {
      goto LABEL_76;
    }
    uint64_t v40 = v137;
    if (!*(void *)&v148[*(int *)(v44 + 88)])
    {
      uint64_t v90 = v144;
      uint64_t v91 = *(void (**)(char *, char *, char *))(v144 + 16);
      v167 = v42;
      uint64_t v92 = v143;
      uint64_t AssociatedTypeWitness = v91;
      v91(v143, v148, v8);
      uint64_t v93 = dispatch thunk of Collection.count.getter();
      uint64_t v94 = *(void (**)(char *, char *))(v90 + 8);
      uint64_t v154 = v90 + 8;
      Swift::Int v153 = v94;
      v94(v92, v8);
      v162 = v8;
      BOOL v95 = v93 == dispatch thunk of Collection.count.getter();
      uint64_t v96 = v167;
      if (!v95)
      {
        uint64_t v175 = 0;
        unint64_t v176 = 0xE000000000000000;
        _StringGuts.grow(_:)(205);
        v97._countAndFlagsBits = _typeName(_:qualified:)();
        String.append(_:)(v97);
        swift_bridgeObjectRelease();
        v98._countAndFlagsBits = 0x2820746E756F6320;
        v98._object = (void *)0xE800000000000000;
        String.append(_:)(v98);
        uint64_t v99 = v162;
        uint64_t v172 = dispatch thunk of Collection.count.getter();
        v100._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v100);
        swift_bridgeObjectRelease();
        v101._object = (void *)0x80000001883383D0;
        v101._countAndFlagsBits = 0xD000000000000018;
        String.append(_:)(v101);
        uint64_t result = v96(v148, 1, v138);
        if (result == 1) {
          goto LABEL_79;
        }
        uint64_t v102 = v143;
        AssociatedTypeWitness(v143, v148, v99);
        uint64_t v103 = dispatch thunk of Collection.count.getter();
        v153(v102, v99);
        uint64_t v172 = v103;
        v104._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v104);
        swift_bridgeObjectRelease();
        v105._countAndFlagsBits = 0xD0000000000000A7;
        v105._object = (void *)0x80000001883383F0;
        String.append(_:)(v105);
        MEMORY[0x18C112B90](v175, v176);
        swift_bridgeObjectRelease();
      }
      uint64_t v106 = v138;
      uint64_t v158 = v41;
      uint64_t result = v96(v148, 1, v138);
      if (result == 1) {
        goto LABEL_77;
      }
      v107 = v148;
      uint64_t v108 = v162;
      uint64_t v109 = AssociatedTypeWitness;
      AssociatedTypeWitness(v145, v148, v162);
      uint64_t v110 = v140;
      (*(void (**)(char *, uint64_t, uint64_t))(v40 + 16))(v140, v168, v106);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v40 + 56))(v110, 0, 1, v106);
      swift_beginAccess();
      (*(void (**)(char *, char *, uint64_t))(v29 + 40))(v107, v110, v139);
      unint64_t v111 = v142;
      v109(v142, v145, v108);
      uint64_t result = v167(v107, 1, v106);
      if (result != 1)
      {
        (*(void (**)(char *, char *, char *))(v144 + 40))(v148, v111, v108);
        swift_endAccess();
        BOOL v112 = (void *)((char *)v165 + *(void *)(*v165 + 176));
        swift_beginAccess();
        unint64_t v113 = *v112;
        int64_t v114 = v108;
        if ((v113 & 0xC000000000000001) != 0)
        {
          uint64_t v115 = __CocoaDictionary.makeIterator()();
          unint64_t v155 = 0;
          uint64_t v116 = 0;
          unint64_t v117 = 0;
          unint64_t v118 = v115 | 0x8000000000000000;
        }
        else
        {
          uint64_t v119 = -1 << *(unsigned char *)(v113 + 32);
          uint64_t v116 = ~v119;
          uint64_t v120 = *(void *)(v113 + 64);
          unint64_t v155 = v113 + 64;
          uint64_t v121 = -v119;
          if (v121 < 64) {
            uint64_t v122 = ~(-1 << v121);
          }
          else {
            uint64_t v122 = -1;
          }
          unint64_t v117 = v122 & v120;
          unint64_t v118 = v113;
        }
        v167 = (uint64_t (*)(char *, uint64_t, uint64_t))(TupleTypeMetadata2 - 8);
        uint64_t v152 = v116;
        uint64_t v158 = v150 + 16;
        uint64_t v123 = (void (**)(void))(v141 + 32);
        uint64_t AssociatedTypeWitness = (void (*)(char *, char *, char *))(v150 + 8);
        int64_t v156 = (unint64_t)(v116 + 64) >> 6;
        v151 = (char *)(v156 - 1);
        uint64_t result = swift_bridgeObjectRetain();
        int64_t v124 = 0;
        uint64_t v168 = v118;
        while ((v118 & 0x8000000000000000) != 0)
        {
          if (__CocoaDictionary.Iterator.next()())
          {
            uint64_t v131 = v163;
            _forceBridgeFromObjectiveC<A>(_:_:)();
            swift_unknownObjectRelease();
            _forceBridgeFromObjectiveC<A>(_:_:)();
            swift_unknownObjectRelease();
            uint64_t v129 = *(void *)(TupleTypeMetadata2 - 8);
            (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v129 + 56))(v131, 0, 1, TupleTypeMetadata2);
          }
          else
          {
            uint64_t v129 = *(void *)(TupleTypeMetadata2 - 8);
            (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v129 + 56))(v163, 1, 1, TupleTypeMetadata2);
          }
          Swift::Int v130 = (char *)v124;
          uint64_t v125 = v117;
LABEL_69:
          uint64_t v134 = (char *)v159;
          (*v123)();
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v129 + 48))(v134, 1, TupleTypeMetadata2) == 1)
          {
            outlined consume of Set<UIPress>.Iterator._Variant();
            return ((uint64_t (*)(char *, char *))v153)(v145, v114);
          }
          uint64_t v135 = *(void *)&v134[*(int *)(TupleTypeMetadata2 + 48)];
          uint64_t v136 = *(void *)(*(void *)v135 + 176);
          unint64_t v118 = v168;
          if (*(_DWORD *)(v135 + v136) == v157) {
            *(_DWORD *)(v135 + v136) = *(_DWORD *)((char *)v165 + v161);
          }
          swift_release();
          uint64_t result = (*(uint64_t (**)(char *, uint64_t))AssociatedTypeWitness)(v134, v169);
          int64_t v124 = (int64_t)v130;
          unint64_t v117 = v125;
        }
        if (v117)
        {
          uint64_t v125 = (v117 - 1) & v117;
          unint64_t v126 = __clz(__rbit64(v117)) | (v124 << 6);
          int64_t v127 = v124;
LABEL_47:
          uint64_t v128 = v163;
          (*(void (**)(uint64_t, unint64_t, uint64_t))(v150 + 16))(v163, *(void *)(v118 + 48) + *(void *)(v150 + 72) * v126, v169);
          *(void *)(v128 + *(int *)(TupleTypeMetadata2 + 48)) = *(void *)(*(void *)(v118 + 56) + 8 * v126);
          uint64_t v129 = *(void *)(TupleTypeMetadata2 - 8);
          (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v129 + 56))(v128, 0, 1, TupleTypeMetadata2);
          swift_retain();
          Swift::Int v130 = (char *)v127;
LABEL_68:
          int64_t v114 = v162;
          goto LABEL_69;
        }
        int64_t v127 = v124 + 1;
        if (__OFADD__(v124, 1))
        {
          __break(1u);
          goto LABEL_75;
        }
        Swift::Int v130 = (char *)v124;
        if (v127 < v156)
        {
          unint64_t v132 = *(void *)(v155 + 8 * v127);
          if (v132)
          {
LABEL_53:
            uint64_t v125 = (v132 - 1) & v132;
            unint64_t v126 = __clz(__rbit64(v132)) + (v127 << 6);
            goto LABEL_47;
          }
          Swift::Int v130 = (char *)(v124 + 1);
          if (v124 + 2 < v156)
          {
            unint64_t v132 = *(void *)(v155 + 8 * (v124 + 2));
            if (v132)
            {
              int64_t v127 = v124 + 2;
              goto LABEL_53;
            }
            int64_t v133 = v124 + 3;
            Swift::Int v130 = (char *)(v124 + 2);
            if (v124 + 3 < v156)
            {
              unint64_t v132 = *(void *)(v155 + 8 * v133);
              if (!v132)
              {
                while (1)
                {
                  int64_t v127 = v133 + 1;
                  if (__OFADD__(v133, 1)) {
                    break;
                  }
                  if (v127 >= v156)
                  {
                    Swift::Int v130 = v151;
                    goto LABEL_67;
                  }
                  unint64_t v132 = *(void *)(v155 + 8 * v127);
                  ++v133;
                  if (v132) {
                    goto LABEL_53;
                  }
                }
LABEL_75:
                __break(1u);
LABEL_76:
                __break(1u);
LABEL_77:
                __break(1u);
                goto LABEL_78;
              }
              int64_t v127 = v124 + 3;
              goto LABEL_53;
            }
          }
        }
LABEL_67:
        uint64_t v129 = *(void *)(TupleTypeMetadata2 - 8);
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v129 + 56))(v163, 1, 1, TupleTypeMetadata2);
        uint64_t v125 = 0;
        goto LABEL_68;
      }
LABEL_78:
      __break(1u);
LABEL_79:
      __break(1u);
      return result;
    }
  }
  long long v47 = v140;
  (*(void (**)(char *, uint64_t, uint64_t))(v40 + 16))(v140, v168, v44);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v40 + 56))(v47, 0, 1, v44);
  uint64_t v48 = v148;
  swift_beginAccess();
  (*(void (**)(char *, char *, uint64_t))(v29 + 40))(v48, v47, v139);
  swift_endAccess();
  uint64_t v49 = v151;
  dispatch thunk of Collection.startIndex.getter();
  dispatch thunk of Collection.endIndex.getter();
  uint64_t v50 = (void *)((char *)v165 + *(void *)(*v165 + 176));
  swift_beginAccess();
  uint64_t v51 = swift_bridgeObjectRetain();
  uint64_t v52 = MEMORY[0x18C1153A0](v51, v45, v164, v167);
  swift_bridgeObjectRelease();
  if (!v52) {
    goto LABEL_29;
  }
  uint64_t v163 = *(void *)(swift_getAssociatedConformanceWitness() + 8);
  if (dispatch thunk of static Equatable.== infix(_:_:)())
  {
LABEL_13:
    uint64_t v60 = v164;
    uint64_t v171 = Array.init()();
    uint64_t v61 = swift_bridgeObjectRetain();
    uint64_t v62 = v167;
    uint64_t v63 = MEMORY[0x18C115320](v61, v45, v60, v167);
    uint64_t v65 = v64;
    char v67 = v66;
    swift_bridgeObjectRelease();
    uint64_t v172 = v63;
    uint64_t v173 = v65;
    char v174 = v67 & 1;
    uint64_t v68 = swift_bridgeObjectRetain();
    uint64_t v168 = MEMORY[0x18C1153F0](v68, v45, v60, v62);
    uint64_t v163 = v69;
    LODWORD(v160) = v70;
    swift_bridgeObjectRelease();
    int v71 = v160 & 1;
    outlined copy of [A : B].Index._Variant<A, B>(v63, v65, v67 & 1);
    LODWORD(v160) = v71;
    LOBYTE(v71) = static Dictionary.Index.== infix(_:_:)();
    outlined consume of Set<UIOpenURLContext>.Index._Variant(v63, v65, v67 & 1);
    if ((v71 & 1) == 0)
    {
      uint64_t v159 = (void (**)(char *, uint64_t))(v150 + 8);
      unint64_t v72 = v149;
      do
      {
        char v73 = v67 & 1;
        outlined copy of [A : B].Index._Variant<A, B>(v63, v65, v73);
        swift_bridgeObjectRetain();
        Dictionary.subscript.getter();
        swift_bridgeObjectRelease();
        outlined consume of Set<UIOpenURLContext>.Index._Variant(v63, v65, v73);
        (*v159)(v72, v45);
        if ((*(unsigned char *)(v170 + *(void *)(*(void *)v170 + 192)) & 1) == 0
          && *(_DWORD *)(v170 + *(void *)(*(void *)v170 + 176)) != *(_DWORD *)((char *)v165 + v161))
        {
          type metadata accessor for Array();
          swift_retain();
          Array.append(_:)();
          --v52;
        }
        uint64_t v74 = v167;
        uint64_t v75 = *v50;
        swift_bridgeObjectRetain();
        MEMORY[0x18C115400](&v172, v75, v45, v60, v74);
        swift_release();
        swift_bridgeObjectRelease();
        if (!v52) {
          break;
        }
        uint64_t v63 = v172;
        uint64_t v65 = v173;
        char v67 = v174;
        outlined copy of [A : B].Index._Variant<A, B>(v172, v173, v174);
        char v76 = static Dictionary.Index.== infix(_:_:)();
        outlined consume of Set<UIOpenURLContext>.Index._Variant(v63, v65, v67);
      }
      while ((v76 & 1) == 0);
    }
    uint64_t v77 = v171;
    uint64_t v78 = MEMORY[0x18C115CB0](v171, v60);
    uint64_t v79 = v147;
    uint64_t v49 = v151;
    if (v78)
    {
      uint64_t v80 = 4;
      do
      {
        uint64_t v81 = v80 - 4;
        Swift::Bool IsNativeType = Array._hoistableIsNativeTypeChecked()();
        Array._checkSubscript(_:wasNativeTypeChecked:)();
        if (IsNativeType)
        {
          uint64_t v83 = *(void *)(v77 + 8 * v80);
          swift_retain();
          BOOL v84 = __OFADD__(v81, 1);
          uint64_t v85 = v80 - 3;
          if (v84) {
            goto LABEL_28;
          }
        }
        else
        {
          uint64_t v83 = _ArrayBuffer._getElementSlowPath(_:)();
          BOOL v84 = __OFADD__(v81, 1);
          uint64_t v85 = v80 - 3;
          if (v84)
          {
LABEL_28:
            __break(1u);
            goto LABEL_29;
          }
        }
        TableColumnForEachState.eraseItem(_:)(v83);
        swift_release();
        ++v80;
      }
      while (v85 != MEMORY[0x18C115CB0](v77, v60));
    }
    outlined consume of Set<UIOpenURLContext>.Index._Variant(v168, v163, v160);
    swift_bridgeObjectRelease();
    outlined consume of Set<UIOpenURLContext>.Index._Variant(v172, v173, v174);
    uint64_t v88 = *(void (**)(char *, void (*)(char *, char *, char *)))(v79 + 8);
    uint64_t v89 = AssociatedTypeWitness;
    v88(v162, AssociatedTypeWitness);
    return ((uint64_t (*)(char *, void (*)(char *, char *, char *)))v88)(v49, v89);
  }
  else
  {
    uint64_t v53 = 0;
    uint64_t v160 = *(int *)(v138 + 88);
    uint64_t v54 = (void (**)(uint64_t, char *, void *))(v147 + 24);
    uint64_t v55 = (void (**)(uint64_t, uint64_t))(v150 + 8);
    while (1)
    {
      uint64_t v56 = v167;
      TableColumnForEach.IDGenerator.makeID(data:index:offset:)(v53, *(void *)(v168 + v160), v45, v46);
      swift_beginAccess();
      MEMORY[0x18C115450](&v171, v46, *v50, v45, v164, v56);
      uint64_t v57 = v171;
      if (v171)
      {
        swift_endAccess();
        uint64_t v58 = v57 + *(void *)(*(void *)v57 + 160);
        swift_beginAccess();
        uint64_t v59 = v58;
        uint64_t v49 = v151;
        (*v54)(v59, v151, AssociatedTypeWitness);
        swift_endAccess();
        *(void *)(v57 + *(void *)(*(void *)v57 + 168)) = v53;
        *(_DWORD *)(v57 + *(void *)(*(void *)v57 + 176)) = *(_DWORD *)((char *)v165 + v161);
        swift_release();
        --v52;
      }
      else
      {
        swift_endAccess();
      }
      dispatch thunk of Collection.formIndex(after:)();
      (*v55)(v46, v45);
      if (!v52) {
        break;
      }
      ++v53;
      if (dispatch thunk of static Equatable.== infix(_:_:)()) {
        goto LABEL_13;
      }
    }
LABEL_29:
    uint64_t v86 = *(void (**)(char *, void (*)(char *, char *, char *)))(v147 + 8);
    uint64_t v87 = AssociatedTypeWitness;
    v86(v162, AssociatedTypeWitness);
    return ((uint64_t (*)(char *, void (*)(char *, char *, char *)))v86)(v49, v87);
  }
}

ValueMetadata *type metadata accessor for GaugeStyleConfiguration()
{
  return &type metadata for GaugeStyleConfiguration;
}

unint64_t lazy protocol witness table accessor for type GaugeStyleConfiguration.Label and conformance GaugeStyleConfiguration.Label()
{
  unint64_t result = lazy protocol witness table cache variable for type GaugeStyleConfiguration.Label and conformance GaugeStyleConfiguration.Label;
  if (!lazy protocol witness table cache variable for type GaugeStyleConfiguration.Label and conformance GaugeStyleConfiguration.Label)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GaugeStyleConfiguration.Label and conformance GaugeStyleConfiguration.Label);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type GaugeStyleConfiguration.Label and conformance GaugeStyleConfiguration.Label;
  if (!lazy protocol witness table cache variable for type GaugeStyleConfiguration.Label and conformance GaugeStyleConfiguration.Label)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GaugeStyleConfiguration.Label and conformance GaugeStyleConfiguration.Label);
  }
  return result;
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance GaugeStyleConfiguration.Label(unsigned int *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  long long v3 = *(_OWORD *)(a2 + 48);
  v6[2] = *(_OWORD *)(a2 + 32);
  v6[3] = v3;
  v6[4] = *(_OWORD *)(a2 + 64);
  char v7 = *(unsigned char *)(a2 + 80);
  long long v4 = *(_OWORD *)(a2 + 16);
  v6[0] = *(_OWORD *)a2;
  v6[1] = v4;
  return specialized static ViewAlias._makeViewList(view:inputs:)(v2, (uint64_t)v6);
}

ValueMetadata *type metadata accessor for GaugeStyleConfiguration.MinimumValueLabel()
{
  return &type metadata for GaugeStyleConfiguration.MinimumValueLabel;
}

ValueMetadata *type metadata accessor for GaugeStyleConfiguration.MaximumValueLabel()
{
  return &type metadata for GaugeStyleConfiguration.MaximumValueLabel;
}

uint64_t protocol witness for ViewModifier.body(content:) in conformance DropDestinationModifier@<X0>(void *a1@<X8>)
{
  uint64_t v2 = *v1;
  uint64_t v3 = v1[1];
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[4];
  uint64_t v6 = v1[5];
  unsigned __int8 v7 = *((unsigned char *)v1 + 24);
  *a1 = v2;
  a1[1] = v3;
  a1[2] = v4;
  a1[3] = v7;
  a1[4] = v5;
  a1[5] = v6;
  swift_bridgeObjectRetain();
  outlined copy of Binding<NavigationSplitViewColumn>?(v3, v4);

  return swift_retain();
}

void storeEnumTagSinglePayload for DraggingPreviewModifier(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  unint64_t v10 = ((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 120;
  if (((v9 + 7) & 0xFFFFFFF8) == 0xFFFFFF88) {
    unsigned int v11 = a3 - v8 + 1;
  }
  else {
    unsigned int v11 = 2;
  }
  if (v11 >= 0x10000) {
    int v12 = 4;
  }
  else {
    int v12 = 2;
  }
  if (v11 < 0x100) {
    int v12 = 1;
  }
  if (v11 >= 2) {
    unsigned int v13 = v12;
  }
  else {
    unsigned int v13 = 0;
  }
  if (v8 < a3) {
    uint64_t v14 = v13;
  }
  else {
    uint64_t v14 = 0;
  }
  if (a2 <= v8)
  {
    switch(v14)
    {
      case 1:
        a1[v10] = 0;
        if (a2) {
          goto LABEL_33;
        }
        break;
      case 2:
        *(_WORD *)&a1[v10] = 0;
        if (a2) {
          goto LABEL_33;
        }
        break;
      case 3:
LABEL_43:
        __break(1u);
        break;
      case 4:
        *(_DWORD *)&a1[v10] = 0;
        goto LABEL_32;
      default:
LABEL_32:
        if (a2)
        {
LABEL_33:
          if (v7 < 0x7FFFFFFF)
          {
            unint64_t v18 = (unint64_t)&a1[v9 + 7] & 0xFFFFFFFFFFFFFFF8;
            if ((a2 & 0x80000000) != 0)
            {
              *(_OWORD *)(v18 + 104) = 0u;
              *(_OWORD *)(v18 + 88) = 0u;
              *(_OWORD *)(v18 + 72) = 0u;
              *(_OWORD *)(v18 + 56) = 0u;
              *(_OWORD *)(v18 + 40) = 0u;
              *(_OWORD *)(v18 + 24) = 0u;
              *(_OWORD *)(v18 + 8) = 0u;
              *(void *)unint64_t v18 = a2 ^ 0x80000000;
            }
            else
            {
              *(void *)(v18 + 104) = a2 - 1;
            }
          }
          else
          {
            uint64_t v17 = *(void (**)(void))(v6 + 56);
            v17();
          }
        }
        break;
    }
  }
  else
  {
    if (((v9 + 7) & 0xFFFFFFF8) == 0xFFFFFF88) {
      int v15 = a2 - v8;
    }
    else {
      int v15 = 1;
    }
    if (((v9 + 7) & 0xFFFFFFF8) != 0xFFFFFF88)
    {
      int v16 = ~v8 + a2;
      bzero(a1, ((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 120);
      *(_DWORD *)a1 = v16;
    }
    switch(v14)
    {
      case 1:
        a1[v10] = v15;
        break;
      case 2:
        *(_WORD *)&a1[v10] = v15;
        break;
      case 3:
        goto LABEL_43;
      case 4:
        *(_DWORD *)&a1[v10] = v15;
        break;
      default:
        return;
    }
  }
}

unint64_t lazy protocol witness table accessor for type AccessibilityProperties.TouchInfoKey and conformance AccessibilityProperties.TouchInfoKey()
{
  unint64_t result = lazy protocol witness table cache variable for type AccessibilityProperties.TouchInfoKey and conformance AccessibilityProperties.TouchInfoKey;
  if (!lazy protocol witness table cache variable for type AccessibilityProperties.TouchInfoKey and conformance AccessibilityProperties.TouchInfoKey)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityProperties.TouchInfoKey and conformance AccessibilityProperties.TouchInfoKey);
  }
  return result;
}

void outlined consume of AccessibilityAttachment.Tree(uint64_t a1, void *a2, char a3)
{
  if (a3 == 1)
  {
    swift_bridgeObjectRelease();
  }
  else if (!a3)
  {
    swift_bridgeObjectRelease();
  }
}

uint64_t _VariadicView_Children.tagIndex<A>(_:)()
{
  v2[6] = 0;
  uint64_t v3 = 0;
  char v4 = 1;
  v2[5] = 0;
  outlined init with copy of TableColumnList(v0, (uint64_t)v2);
  __swift_project_boxed_opaque_existential_1(v2, v2[3]);
  ViewList.applySublists(from:list:to:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v2);
  return v3;
}

{
  type metadata accessor for Binding();
  return Binding<A>.projectingTagIndex(viewList:)();
}

uint64_t specialized static _NavigationSplitReader.SplitPresentationModeLocation.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for _NavigationSplitReader.SplitPresentationModeLocation();
  MEMORY[0x1F4188790](v4);
  uint64_t v6 = &v19[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1F4188790](v7);
  uint64_t v9 = &v19[-v8];
  uint64_t v11 = *(int *)(v10 + 28);
  uint64_t v12 = *(void *)(a1 + v11);
  uint64_t v13 = *(void *)(a2 + v11);
  swift_beginAccess();
  int v15 = *(_DWORD *)(v12 + 16);
  int v14 = *(_DWORD *)(v12 + 20);
  swift_beginAccess();
  if (v15 != *(_DWORD *)(v13 + 16))
  {
    outlined init with copy of _NavigationSplitReader.SplitPresentationModeLocation(a1, (uint64_t)v9, (uint64_t (*)(void))type metadata accessor for _NavigationSplitReader.SplitPresentationModeLocation);
    outlined init with copy of _NavigationSplitReader.SplitPresentationModeLocation(a2, (uint64_t)v6, (uint64_t (*)(void))type metadata accessor for _NavigationSplitReader.SplitPresentationModeLocation);
    goto LABEL_5;
  }
  int v16 = *(_DWORD *)(v13 + 20);
  outlined init with copy of _NavigationSplitReader.SplitPresentationModeLocation(a1, (uint64_t)v9, (uint64_t (*)(void))type metadata accessor for _NavigationSplitReader.SplitPresentationModeLocation);
  outlined init with copy of _NavigationSplitReader.SplitPresentationModeLocation(a2, (uint64_t)v6, (uint64_t (*)(void))type metadata accessor for _NavigationSplitReader.SplitPresentationModeLocation);
  if (v14 != v16)
  {
LABEL_5:
    char v17 = 0;
    goto LABEL_6;
  }
  char v17 = static UUID.== infix(_:_:)();
LABEL_6:
  outlined destroy of _NavigationSplitReader.SplitPresentationModeLocation((uint64_t)v6, (uint64_t (*)(void))type metadata accessor for _NavigationSplitReader.SplitPresentationModeLocation);
  outlined destroy of _NavigationSplitReader.SplitPresentationModeLocation((uint64_t)v9, (uint64_t (*)(void))type metadata accessor for _NavigationSplitReader.SplitPresentationModeLocation);
  return v17 & 1;
}

uint64_t WrappedButtonStyleBody.archivedBody.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v40 = a2;
  uint64_t v3 = type metadata accessor for PrimitiveButtonStyleConfiguration(0);
  MEMORY[0x1F4188790](v3 - 8);
  uint64_t v37 = (uint64_t)v34 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = *(void *)(a1 + 16);
  v34[0] = a1;
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v7);
  uint64_t v9 = (char *)v34 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34[1] = *(void *)(a1 + 24);
  uint64_t v10 = type metadata accessor for WrappedButtonStyleBody.ArchiveBody();
  uint64_t v36 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v10);
  uint64_t v12 = (char *)v34 - v11;
  uint64_t v13 = type metadata accessor for ModifiedContent();
  uint64_t v38 = *(void *)(v13 - 8);
  MEMORY[0x1F4188790](v13);
  int v15 = (char *)v34 - v14;
  uint64_t v16 = type metadata accessor for ModifiedContent();
  uint64_t v39 = *(void *)(v16 - 8);
  MEMORY[0x1F4188790](v16);
  unint64_t v18 = (char *)v34 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v20 = MEMORY[0x1F4188790](v19);
  uint64_t v22 = (char *)v34 - v21;
  uint64_t v23 = *(void (**)(char *, uint64_t, uint64_t, double))(v6 + 16);
  uint64_t v24 = (uint64_t)v9;
  uint64_t v25 = v9;
  uint64_t v26 = v35;
  v23(v25, v35, v5, v20);
  uint64_t v27 = v26 + *(int *)(v34[0] + 36);
  uint64_t v28 = v37;
  _s7SwiftUI33PrimitiveButtonStyleConfigurationVWOcTm_6(v27, v37, type metadata accessor for PrimitiveButtonStyleConfiguration);
  WrappedButtonStyleBody.ArchiveBody.init(style:configuration:)(v24, v28, v5, (uint64_t)v12);
  uint64_t WitnessTable = swift_getWitnessTable();
  MEMORY[0x18C113660](WitnessTable, v10, &type metadata for ArchivesInteractiveControlsEffect, WitnessTable);
  (*(void (**)(char *, uint64_t))(v36 + 8))(v12, v10);
  uint64_t v43 = WitnessTable;
  uint64_t v44 = &protocol witness table for ArchivesInteractiveControlsEffect;
  uint64_t v30 = swift_getWitnessTable();
  MEMORY[0x18C113660](v30, v13, &type metadata for HandGestureShortcutInteractiveControl, v30);
  (*(void (**)(char *, uint64_t))(v38 + 8))(v15, v13);
  unint64_t v31 = lazy protocol witness table accessor for type HandGestureShortcutInteractiveControl and conformance HandGestureShortcutInteractiveControl();
  uint64_t v41 = v30;
  unint64_t v42 = v31;
  swift_getWitnessTable();
  static ViewBuilder.buildExpression<A>(_:)(v18);
  uint64_t v32 = *(void (**)(char *, uint64_t))(v39 + 8);
  v32(v18, v16);
  static ViewBuilder.buildExpression<A>(_:)(v22);
  return ((uint64_t (*)(char *, uint64_t))v32)(v22, v16);
}

uint64_t initializeWithCopy for StackScrollViewContent(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v4;
  (**(void (***)(void))(v4 - 8))();
  uint64_t v5 = *(void **)(a2 + 40);
  uint64_t v6 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = v5;
  *(void *)(a1 + 48) = v6;
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  id v7 = v5;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t outlined init with copy of StackScrollViewContent(uint64_t a1, uint64_t a2)
{
  return a2;
}

unint64_t lazy protocol witness table accessor for type PlatformItemsTransform<PlatformNewDocumentButtonTransform> and conformance PlatformItemsTransform<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type PlatformItemsTransform<PlatformNewDocumentButtonTransform> and conformance PlatformItemsTransform<A>;
  if (!lazy protocol witness table cache variable for type PlatformItemsTransform<PlatformNewDocumentButtonTransform> and conformance PlatformItemsTransform<A>)
  {
    type metadata accessor for PropertiesTransform<AccessibilityAttachmentModifier>(255, &lazy cache variable for type metadata for PlatformItemsTransform<PlatformNewDocumentButtonTransform>, (uint64_t (*)(void))lazy protocol witness table accessor for type PlatformNewDocumentButtonTransform and conformance PlatformNewDocumentButtonTransform, (uint64_t)&type metadata for PlatformNewDocumentButtonTransform, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PlatformItemsTransform);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlatformItemsTransform<PlatformNewDocumentButtonTransform> and conformance PlatformItemsTransform<A>);
  }
  return result;
}

uint64_t static PlatformItemListReader._makeView(view:inputs:)@<X0>(int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v58 = a9;
  uint64_t v109 = *MEMORY[0x1E4F143B8];
  int v11 = *a1;
  uint64_t v62 = *(void *)a2;
  int v61 = *(_DWORD *)(a2 + 8);
  uint64_t v12 = *(void *)(a2 + 16);
  unsigned int v13 = *(_DWORD *)(a2 + 24);
  unsigned int v14 = *(_DWORD *)(a2 + 28);
  unsigned int v15 = *(_DWORD *)(a2 + 32);
  unsigned int v16 = *(_DWORD *)(a2 + 36);
  uint64_t v17 = *(void *)(a2 + 40);
  uint64_t v72 = *(void *)(a2 + 48);
  int v18 = *(_DWORD *)(a2 + 56);
  int v70 = *(_DWORD *)(a2 + 60);
  int v71 = v18;
  int v19 = *(_DWORD *)(a2 + 64);
  int v68 = *(_DWORD *)(a2 + 68);
  int v69 = v19;
  int v20 = *(_DWORD *)(a2 + 72);
  int v66 = *(_DWORD *)(a2 + 76);
  int v67 = v20;
  int v65 = *(_DWORD *)(a2 + 80);
  uint64_t v59 = a4;
  uint64_t v60 = a3;
  uint64_t v77 = a3;
  uint64_t v78 = a4;
  uint64_t v79 = a5;
  uint64_t v80 = a6;
  uint64_t v63 = a7;
  uint64_t v64 = a6;
  uint64_t v81 = a7;
  uint64_t v82 = a8;
  LODWORD(v48) = v11;
  uint64_t v96 = a3;
  uint64_t v97 = a4;
  uint64_t v98 = a5;
  unint64_t v99 = a6;
  *(void *)&long long v100 = a7;
  *((void *)&v100 + 1) = a8;
  uint64_t v49 = type metadata accessor for PlatformItemListReader();
  uint64_t v50 = a5;
  uint64_t v51 = a8;
  uint64_t v47 = type metadata accessor for _GraphValue();
  uint64_t v21 = type metadata accessor for ZStack();
  _GraphValue.subscript.getter();
  uint64_t v45 = v21;
  type metadata accessor for _GraphValue();
  LODWORD(v46) = _GraphValue.value.getter();
  _ViewInputs.withoutGeometryDependencies.getter();
  uint64_t v83 = v62;
  LODWORD(KeyPath) = v61;
  uint64_t v57 = v12;
  uint64_t v85 = v12;
  unsigned int v55 = v14;
  unsigned int v56 = v13;
  unint64_t v86 = __PAIR64__(v14, v13);
  unsigned int v53 = v16;
  unsigned int v54 = v15;
  *(void *)&long long v87 = __PAIR64__(v16, v15);
  uint64_t v52 = v17;
  *((void *)&v87 + 1) = v17;
  uint64_t v88 = v72;
  int v89 = v71;
  int v90 = v70;
  int v91 = v69;
  int v92 = v68;
  int v93 = v67;
  int v94 = v66;
  int v95 = v65;
  PreferenceKeys.init()();
  unint64_t v76 = v73;
  char v75 = 0;
  _ViewInputs.intern<A>(_:id:)();
  swift_bridgeObjectRelease();
  PreferencesInputs.init(hostKeys:)();
  swift_bridgeObjectRelease();
  uint64_t v101 = v62;
  int v102 = v61;
  if (((*(uint64_t (**)(uint64_t))(v64 + 8))(v60) & 0x10) != 0)
  {
    uint64_t v83 = v72;
    LODWORD(KeyPath) = v71;
    if (PreferencesInputs.contains<A>(_:includeHostPreferences:)()) {
      PreferenceKeys.add(_:)();
    }
  }
  _ViewInputs.addPlatformItemListKey<A>(flags:editOperation:)(v60, 0, v60, v64);
  lazy protocol witness table accessor for type IsPlatformItemListSourceInput and conformance IsPlatformItemListSourceInput();
  PropertyList.subscript.setter();
  _GraphValue.init(_:)();
  uint64_t v85 = v98;
  unint64_t v86 = v99;
  LODWORD(v46) = DWORD1(v100);
  long long v87 = v100;
  uint64_t v43 = v101;
  uint64_t v44 = *((void *)&v100 + 1);
  uint64_t v88 = v101;
  int v41 = v103;
  int v42 = v102;
  int v89 = v102;
  int v90 = v103;
  int v39 = v105;
  int v40 = v104;
  int v91 = v104;
  int v92 = v105;
  int v37 = v107;
  int v38 = v106;
  int v93 = v106;
  int v94 = v107;
  HIDWORD(v36) = v108;
  int v95 = v108;
  swift_getWitnessTable();
  static View.makeDebuggableView(view:inputs:)();
  uint64_t v83 = v73;
  LODWORD(KeyPath) = v74;
  uint64_t v22 = PreferencesOutputs.subscript.getter();
  swift_bridgeObjectRelease();
  if ((v22 & 0x100000000) != 0)
  {
    uint64_t v83 = v96;
    LODWORD(KeyPath) = v97;
    uint64_t v85 = v98;
    unint64_t v86 = v99;
    *(void *)&long long v87 = __PAIR64__(v46, v100);
    *((void *)&v87 + 1) = v44;
    uint64_t v88 = v43;
    int v89 = v42;
    int v90 = v41;
    int v91 = v40;
    int v92 = v39;
    int v93 = v38;
    int v94 = v37;
    int v95 = HIDWORD(v36);
    unint64_t v73 = MEMORY[0x1E4FBC860];
    LOBYTE(v76) = 0;
    uint64_t v22 = _ViewInputs.intern<A>(_:id:)();
  }
  uint64_t v46 = v22;
  uint64_t v23 = _GraphValue.value.getter();
  int v24 = v23;
  MEMORY[0x1F4188790](v23);
  uint64_t v25 = v59;
  v32[0] = v60;
  v32[1] = v59;
  uint64_t v27 = v50;
  uint64_t v26 = v51;
  uint64_t v28 = v64;
  uint64_t v35 = v51;
  uint64_t v48 = &v36;
  LODWORD(v83) = v24;
  uint64_t KeyPath = swift_getKeyPath();
  MEMORY[0x1F4188790](KeyPath);
  v32[2] = swift_getFunctionTypeMetadata1();
  uint64_t v33 = type metadata accessor for Focus();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v29 = type metadata accessor for Attribute();
  swift_retain();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v83, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TA_4, (uint64_t)v32, v33, MEMORY[0x1E4FBC248], v29, MEMORY[0x1E4FBC278], v30);
  swift_release();
  swift_release();
  unint64_t v73 = __PAIR64__(v73, v46);
  uint64_t v83 = v60;
  uint64_t KeyPath = v25;
  uint64_t v85 = v27;
  unint64_t v86 = v28;
  *(void *)&long long v87 = v63;
  *((void *)&v87 + 1) = v26;
  type metadata accessor for PlatformItemListReader.Child();
  swift_getWitnessTable();
  _GraphValue.init<A>(_:)();
  uint64_t v83 = v62;
  LODWORD(KeyPath) = v61;
  uint64_t v85 = v57;
  unint64_t v86 = __PAIR64__(v55, v56);
  *(void *)&long long v87 = __PAIR64__(v53, v54);
  *((void *)&v87 + 1) = v52;
  uint64_t v88 = v72;
  int v89 = v71;
  int v90 = v70;
  int v91 = v69;
  int v92 = v68;
  int v93 = v67;
  int v94 = v66;
  int v95 = v65;
  static View.makeDebuggableView(view:inputs:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

unint64_t lazy protocol witness table accessor for type MenuStyleConfiguration.Label and conformance MenuStyleConfiguration.Label()
{
  unint64_t result = lazy protocol witness table cache variable for type MenuStyleConfiguration.Label and conformance MenuStyleConfiguration.Label;
  if (!lazy protocol witness table cache variable for type MenuStyleConfiguration.Label and conformance MenuStyleConfiguration.Label)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MenuStyleConfiguration.Label and conformance MenuStyleConfiguration.Label);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type MenuStyleConfiguration.Label and conformance MenuStyleConfiguration.Label;
  if (!lazy protocol witness table cache variable for type MenuStyleConfiguration.Label and conformance MenuStyleConfiguration.Label)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MenuStyleConfiguration.Label and conformance MenuStyleConfiguration.Label);
  }
  return result;
}

uint64_t HelpStyleConfiguration.text.getter()
{
  uint64_t v1 = *(void *)v0;
  outlined copy of Text.Storage(*(void *)v0, *(void *)(v0 + 8), *(unsigned char *)(v0 + 16));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t outlined destroy of CoordinateSpaceGesture<ScrollGesture.Value>(uint64_t a1)
{
  type metadata accessor for Attribute<_ScrollViewProxy>(0, &lazy cache variable for type metadata for CoordinateSpaceGesture<ScrollGesture.Value>, (uint64_t)&type metadata for ScrollGesture.Value, MEMORY[0x1E4F40910]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void type metadata accessor for _ViewModifier_Content<ScrollIndicatorFlashOnAppearModifier>(uint64_t a1, unint64_t *a2, void (*a3)(void))
{
  if (!*a2)
  {
    a3();
    unint64_t v4 = type metadata accessor for _ViewModifier_Content();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

unint64_t lazy protocol witness table accessor for type _ViewModifier_Content<ScrollIndicatorFlashOnAppearModifier> and conformance _ViewModifier_Content<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type _ViewModifier_Content<ScrollIndicatorFlashOnAppearModifier> and conformance _ViewModifier_Content<A>;
  if (!lazy protocol witness table cache variable for type _ViewModifier_Content<ScrollIndicatorFlashOnAppearModifier> and conformance _ViewModifier_Content<A>)
  {
    type metadata accessor for _ViewModifier_Content<ScrollIndicatorFlashOnAppearModifier>(255, &lazy cache variable for type metadata for _ViewModifier_Content<ScrollIndicatorFlashOnAppearModifier>, (void (*)(void))lazy protocol witness table accessor for type ScrollIndicatorFlashOnAppearModifier and conformance ScrollIndicatorFlashOnAppearModifier);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ViewModifier_Content<ScrollIndicatorFlashOnAppearModifier> and conformance _ViewModifier_Content<A>);
  }
  return result;
}

uint64_t static _ValueActionModifier2._makeScene(modifier:inputs:body:)@<X0>(_DWORD *a1@<X0>, uint64_t *a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t *)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  return static _ValueActionModifier._makeScene(modifier:inputs:body:)(a1, a2, a3, a4, a5, a6, MEMORY[0x1E4F408C8], a7, (uint64_t)closure #1 in Attribute.init<A>(_:)partial apply);
}

id UIKitTabBarController.init()()
{
  uint64_t v1 = v0;
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  uint64_t v3 = OBJC_IVAR____TtC7SwiftUI21UIKitTabBarController_popoverBridge;
  type metadata accessor for UIKitInspectorV3Bridge<TabItem.RootView>.PresentationKind(0, (unint64_t *)&lazy cache variable for type metadata for UIKitInspectorV3Bridge<TabItem.RootView>, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))type metadata accessor for UIKitInspectorV3Bridge);
  id v5 = objc_allocWithZone(v4);
  uint64_t v6 = v0;
  *(void *)&v1[v3] = objc_msgSend(v5, sel_init);
  uint64_t v7 = OBJC_IVAR____TtC7SwiftUI21UIKitTabBarController_update;
  type metadata accessor for PlatformBarUpdater();
  uint64_t v8 = (void *)swift_allocObject();
  void v8[2] = specialized InferredToolbarState.init()();
  v8[3] = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
  v8[5] = 0;
  swift_unknownObjectWeakInit();
  uint64_t v9 = MEMORY[0x1E4FBC870];
  v8[7] = 0;
  v8[8] = 0;
  v8[6] = v9;
  *(void *)&v6[v7] = v8;
  *(void *)&v6[OBJC_IVAR____TtC7SwiftUI21UIKitTabBarController_sidebarBottomBarHost] = 0;
  *(void *)&v6[OBJC_IVAR____TtC7SwiftUI21UIKitTabBarController_backgroundHost] = 0;

  v12.receiver = v6;
  v12.super_class = ObjectType;
  id v10 = objc_msgSendSuper2(&v12, sel_initWithNibName_bundle_, 0, 0);
  swift_unknownObjectWeakAssign();
  return v10;
}

uint64_t initializeWithCopy for TableColumnCollection.Entry(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = *(void *)v9;
  uint64_t v11 = *(void *)(v9 + 8);
  uint64_t v12 = *(void *)(v9 + 16);
  uint64_t v13 = *(void *)(v9 + 24);
  char v14 = *(unsigned char *)(v9 + 32);
  outlined copy of TableColumnCustomizationID.Base(*(void *)v9, v11, v12, v13, v14);
  *(void *)uint64_t v8 = v10;
  *(void *)(v8 + 8) = v11;
  *(void *)(v8 + 16) = v12;
  *(void *)(v8 + 24) = v13;
  *(unsigned char *)(v8 + 32) = v14;
  uint64_t v15 = a3[7];
  *(void *)(a1 + a3[6]) = *(void *)(a2 + a3[6]);
  uint64_t v16 = a1 + v15;
  uint64_t v17 = a2 + v15;
  long long v18 = *(_OWORD *)(v17 + 16);
  *(_OWORD *)uint64_t v16 = *(_OWORD *)v17;
  *(_OWORD *)(v16 + 16) = v18;
  *(unsigned char *)(v16 + 32) = *(unsigned char *)(v17 + 32);
  uint64_t v19 = a3[9];
  *(unsigned char *)(a1 + a3[8]) = *(unsigned char *)(a2 + a3[8]);
  *(unsigned char *)(a1 + v19) = *(unsigned char *)(a2 + v19);
  uint64_t v20 = a3[11];
  *(unsigned char *)(a1 + a3[10]) = *(unsigned char *)(a2 + a3[10]);
  uint64_t v21 = a1 + v20;
  uint64_t v22 = a2 + v20;
  uint64_t v23 = *(void *)(a2 + v20 + 24);
  if (v23)
  {
    *(void *)(v21 + 24) = v23;
    (**(void (***)(uint64_t, uint64_t))(v23 - 8))(v21, v22);
    long long v24 = *(_OWORD *)(v22 + 56);
    *(_OWORD *)(v21 + 56) = v24;
    (**(void (***)(uint64_t, uint64_t))(v24 - 8))(v21 + 32, v22 + 32);
    *(void *)(v21 + 72) = *(void *)(v22 + 72);
    uint64_t v25 = *(void *)(v22 + 112);
    long long v26 = *(_OWORD *)(v22 + 96);
    *(_OWORD *)(v21 + 80) = *(_OWORD *)(v22 + 80);
    *(_OWORD *)(v21 + 96) = v26;
    *(void *)(v21 + 112) = v25;
    swift_retain();
    swift_retain();
    swift_retain();
  }
  else
  {
    long long v27 = *(_OWORD *)(v22 + 80);
    *(_OWORD *)(v21 + 64) = *(_OWORD *)(v22 + 64);
    *(_OWORD *)(v21 + 80) = v27;
    *(_OWORD *)(v21 + 96) = *(_OWORD *)(v22 + 96);
    *(void *)(v21 + 112) = *(void *)(v22 + 112);
    long long v28 = *(_OWORD *)(v22 + 16);
    *(_OWORD *)uint64_t v21 = *(_OWORD *)v22;
    *(_OWORD *)(v21 + 16) = v28;
    long long v29 = *(_OWORD *)(v22 + 48);
    *(_OWORD *)(v21 + 32) = *(_OWORD *)(v22 + 32);
    *(_OWORD *)(v21 + 48) = v29;
  }
  *(void *)(a1 + a3[12]) = *(void *)(a2 + a3[12]);
  swift_retain();
  return a1;
}

void type metadata accessor for StateContainerGesture<TransformBasedMagnifyGesture.StateType, TransformEvent, MagnifyGesture.Value>()
{
  if (!lazy cache variable for type metadata for StateContainerGesture<TransformBasedMagnifyGesture.StateType, TransformEvent, MagnifyGesture.Value>)
  {
    type metadata accessor for MagnifyGesture.Value();
    lazy protocol witness table accessor for type TransformBasedMagnifyGesture.StateType and conformance TransformBasedMagnifyGesture.StateType();
    unint64_t v0 = type metadata accessor for StateContainerGesture();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for StateContainerGesture<TransformBasedMagnifyGesture.StateType, TransformEvent, MagnifyGesture.Value>);
    }
  }
}

uint64_t initializeWithCopy for ScaledClarityUIMetric(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)a2;
  char v7 = *(unsigned char *)(a2 + 8);
  outlined copy of Environment<Bool>.Content(*(void *)a2, v7);
  *(void *)a1 = v6;
  *(unsigned char *)(a1 + 8) = v7;
  unint64_t v8 = a1 & 0xFFFFFFFFFFFFFFF8;
  unint64_t v9 = a2 & 0xFFFFFFFFFFFFFFF8;
  uint64_t v10 = *(void *)((a2 & 0xFFFFFFFFFFFFFFF8) + 16);
  LOBYTE(v6) = *(unsigned char *)(v9 + 24);
  outlined copy of Environment<Bool>.Content(v10, v6);
  *(void *)(v8 + 16) = v10;
  *(unsigned char *)(v8 + 24) = v6;
  uint64_t v11 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v12 = v11 + 16;
  uint64_t v13 = *(unsigned __int8 *)(v11 + 80);
  unint64_t v14 = (v13 + 25 + (a1 & 0xFFFFFFFFFFFFFFF8)) & ~v13;
  uint64_t v15 = (v13 + 25 + v9) & ~v13;
  (*(void (**)(unint64_t, uint64_t))(v11 + 16))(v14, v15);
  *(unsigned char *)(*(void *)(v12 + 48) + v14) = *(unsigned char *)(*(void *)(v12 + 48) + v15);
  return a1;
}

uint64_t ScaledClarityUIMetric.init(wrappedValue:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)a3 = swift_getKeyPath();
  *(unsigned char *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = swift_getKeyPath();
  *(unsigned char *)(a3 + 24) = 0;
  uint64_t v6 = type metadata accessor for ScaledClarityUIMetric();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a2 - 8) + 32))(a3 + *(int *)(v6 + 40), a1, a2);
  *(unsigned char *)(a3 + *(int *)(v6 + 44)) = 6;
  return result;
}

uint64_t closure #1 in NavigationColumnState.ejectAll()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  type metadata accessor for Logger?();
  MEMORY[0x1F4188790](v6 - 8);
  unint64_t v8 = (char *)v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  static Log.navigation.getter();
  uint64_t v9 = type metadata accessor for Logger();
  uint64_t v10 = *(void *)(v9 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
  {
    uint64_t result = outlined destroy of Logger?((uint64_t)v8);
    if (!a2) {
      return result;
    }
    goto LABEL_7;
  }
  uint64_t v12 = Logger.logObject.getter();
  os_log_type_t v13 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v12, v13))
  {
    unint64_t v14 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)unint64_t v14 = 0;
    _os_log_impl(&dword_1872C6000, v12, v13, "<Navigation clientBoundPath>: Enqueueing removeAll", v14, 2u);
    MEMORY[0x18C119C60](v14, -1, -1);
  }

  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v8, v9);
  if (a2)
  {
LABEL_7:
    v19[0] = a1;
    v19[1] = a2;
    v19[2] = a3;
    type metadata accessor for Binding<AnyNavigationPath>(0, (unint64_t *)&lazy cache variable for type metadata for Binding<AnyNavigationPath>, (uint64_t)&type metadata for AnyNavigationPath, MEMORY[0x1E4F41638]);
    uint64_t v16 = v15;
    swift_retain();
    swift_retain();
    swift_retain();
    uint64_t v17 = MEMORY[0x18C113DA0](&v20, v16);
    uint64_t v18 = (*(uint64_t (**)(void *))(*(void *)v20 + 88))(v17);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      uint64_t v20 = (*(uint64_t (**)(void))(*(void *)v20 + 104))();
      swift_release();
    }
    (*(void (**)(uint64_t))(*(void *)v20 + 128))(v18);
    v19[0] = v20;
    dispatch thunk of AnyLocation.set(_:transaction:)();
    swift_release();
    swift_release();
    swift_release();
    return swift_release();
  }
  return result;
}

void NavigationColumnState.ejectAll()()
{
  uint64_t v1 = v0[11];
  uint64_t v2 = v0[12];
  uint64_t v3 = v0[13];
  Class v4 = (void *)swift_allocObject();
  v4[2] = v1;
  v4[3] = v2;
  v4[4] = v3;
  outlined copy of Binding<AnyNavigationPath>?(v1, v2);
  static Update.enqueueAction(_:)();
  swift_release();
  uint64_t v5 = v0[14];
  uint64_t v7 = v0[15];
  uint64_t v6 = v0 + 14;
  uint64_t v8 = v6[2];
  uint64_t v9 = v6[3];
  uint64_t v10 = v6[5];
  uint64_t v22 = v6[4];
  uint64_t v11 = v6[6];
  uint64_t v12 = v6[7];
  uint64_t v14 = v6[8];
  uint64_t v13 = v6[9];
  if (v12 < 0)
  {
    if ((~v5 & 0xF000000000000007) == 0) {
      goto LABEL_7;
    }
    if ((v5 & 0x8000000000000000) == 0) {
      goto LABEL_8;
    }
    uint64_t v18 = v6[4];
    uint64_t v20 = v6[5];
    outlined copy of NavigationColumnState.ReplacedRoot?(v5, v7, v8, v9);
LABEL_5:
    uint64_t v19 = (void *)swift_allocObject();
    v19[2] = v5 & 0x7FFFFFFFFFFFFFFFLL;
    void v19[3] = v7;
    v19[4] = v8;
    v19[5] = v9;
    v19[6] = v18;
    v19[7] = v20;
    v19[8] = v11;
    outlined copy of NavigationColumnState.ColumnContent(v5, v7, v8, v9, v18, v20, v11, v12);
    swift_retain();
    swift_retain();
    outlined copy of Text.LineStyle?(v8, v9);
    swift_retain();
    static Update.enqueueAction(_:)();
    swift_release();
    swift_release();
    outlined consume of Text.LineStyle?(v8, v9);
    swift_release();
    swift_release();
    uint64_t v10 = v20;
LABEL_7:
    outlined consume of NavigationColumnState.ColumnContent(v5, v7, v8, v9, v22, v10, v11, v12);
    goto LABEL_8;
  }
  uint64_t v21 = v6[7];
  uint64_t v15 = v6[5];
  outlined copy of NavigationColumnState.ReplacedRoot?(v5, v7, v8, v9);
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  specialized Collection<>.dismiss(from:)(0, v14, v13);
  uint64_t v16 = v15;
  uint64_t v17 = v15;
  uint64_t v12 = v21;
  outlined consume of NavigationColumnState.ColumnContent(v5, v7, v8, v9, v22, v17, v11, v21);
  if (v5 < 0 && (v5 & 0xF000000000000007) != 0xF000000000000007)
  {
    uint64_t v18 = v22;
    uint64_t v20 = v16;
    outlined copy of NavigationColumnState.ReplacedRoot(v5, v7, v8, v9);
    goto LABEL_5;
  }
LABEL_8:
  NavigationColumnState.ColumnContent.clearAll(popReplacedRoots:)(1);
}

uint64_t assignWithTake for MakeSubviewTransition(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_release();
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_release();
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  swift_release();
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  *(_DWORD *)(a1 + 144) = *(_DWORD *)(a2 + 144);
  *(unsigned char *)(a1 + 148) = *(unsigned char *)(a2 + 148);
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  return a1;
}

uint64_t destroy for GridScrollViewContent(uint64_t a1)
{
  __swift_destroy_boxed_opaque_existential_1(a1);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  outlined consume of Environment<Bool>.Content(*(void *)(a1 + 128), *(unsigned char *)(a1 + 136));
  uint64_t v2 = *(void *)(a1 + 144);
  char v3 = *(unsigned char *)(a1 + 152);

  return outlined consume of Environment<Bool>.Content(v2, v3);
}

uint64_t outlined destroy of GridScrollViewContent(uint64_t a1)
{
  return a1;
}

uint64_t protocol witness for static PreferenceKey.defaultValue.getter in conformance FocusableFillerBounds.Key@<X0>(void *a1@<X8>)
{
  return protocol witness for static PreferenceKey.defaultValue.getter in conformance FocusableBounds.Key(&one-time initialization token for defaultValue, &static FocusableFillerBounds.Key.defaultValue, a1);
}

uint64_t specialized FocusSectionResponder.__allocating_init(inputs:)()
{
  type metadata accessor for FocusSectionResponder(0);
  uint64_t v0 = swift_allocObject();
  swift_retain();
  ViewTransform.init()();
  *(void *)(v0 + 256) = 0;
  *(void *)(v0 + 264) = 0;
  *(_WORD *)(v0 + 272) = 512;
  *(unsigned char *)(v0 + 274) = 0;
  *(void *)(v0 + 280) = 0;
  swift_release();
  return DefaultLayoutViewResponder.init(inputs:)();
}

uint64_t specialized FocusSectionResponder.hostedItem.getter()
{
  uint64_t result = *(void *)(v0 + 280);
  if (!result)
  {
    int v2 = *(unsigned __int8 *)(v0 + 273);
    unsigned __int8 v3 = *(unsigned char *)(v0 + 274);
    if (v2 == 2) {
      unsigned __int8 v11 = 0;
    }
    else {
      unsigned __int8 v11 = v2 & 1;
    }
    swift_retain();
    uint64_t v4 = specialized UIRectEdge.init(_:layoutDirection:)(v3, &v11);
    uint64_t v5 = objc_allocWithZone((Class)type metadata accessor for UIKitFocusSectionResponderItem(0));
    *(void *)&v5[direct field offset for UIKitFocusSectionResponderItem._focusSpeedBumpEdges] = v4;
    swift_weakInit();
    swift_unknownObjectWeakInit();
    uint64_t v6 = &v5[direct field offset for UIKitContainerFocusResponderItem.frame];
    *uint64_t v6 = 0u;
    v6[1] = 0u;
    v5[direct field offset for UIKitContainerFocusResponderItem.isEnabled] = 1;
    *(void *)&v5[direct field offset for UIKitContainerFocusResponderItem.cachedCoordinateSpace] = 0;
    swift_weakAssign();
    type metadata accessor for UIKitContainerFocusResponderItem<FocusSectionResponder>();
    v10.receiver = v5;
    v10.super_class = v7;
    id v8 = objc_msgSendSuper2(&v10, sel_init);
    swift_release();
    uint64_t v9 = *(void **)(v0 + 280);
    *(void *)(v0 + 280) = v8;

    return *(void *)(v0 + 280);
  }
  return result;
}

__n128 assignWithTake for AnimatedValueKeyframe(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 40))(a1, a2, v5);
  unint64_t v7 = *(void *)(v6 + 64);
  uint64_t v8 = *(_DWORD *)(v6 + 80) & 0xF8 | 7;
  uint64_t v9 = v7 + v8 + a1;
  uint64_t v10 = ~v8;
  uint64_t v11 = v9 & ~v8;
  uint64_t v12 = v7 + v8 + a2;
  uint64_t v13 = v12 & ~v8;
  if (v7 <= 0x18) {
    uint64_t v14 = 24;
  }
  else {
    uint64_t v14 = *(void *)(v6 + 64);
  }
  if (v11 == v13)
  {
LABEL_58:
    if (v14 <= 3) {
      goto LABEL_75;
    }
    goto LABEL_59;
  }
  char v15 = 8 * v14;
  if (v14 > 3) {
    goto LABEL_8;
  }
  unsigned int v16 = ((1 << v15) + 1) >> v15;
  if (v16 > 0xFFFC)
  {
    unsigned int v17 = *(_DWORD *)(v11 + v14);
    unsigned int v18 = v17 - 3;
    if (v17 < 3) {
      goto LABEL_23;
    }
    goto LABEL_13;
  }
  if (v16 <= 0xFC)
  {
LABEL_8:
    unsigned int v17 = *(unsigned __int8 *)(v11 + v14);
    unsigned int v18 = v17 - 3;
    if (v17 < 3) {
      goto LABEL_23;
    }
LABEL_13:
    if (v14 <= 3) {
      uint64_t v19 = v14;
    }
    else {
      uint64_t v19 = 4;
    }
    switch(v19)
    {
      case 1:
        int v20 = *(unsigned __int8 *)v11;
        goto LABEL_21;
      case 2:
        int v20 = *(unsigned __int16 *)v11;
        goto LABEL_21;
      case 3:
        int v20 = *(unsigned __int16 *)v11 | (*(unsigned __int8 *)((v9 & ~v8) + 2) << 16);
        goto LABEL_21;
      case 4:
        int v20 = *(_DWORD *)v11;
LABEL_21:
        int v21 = (v20 | (v18 << v15)) + 3;
        unsigned int v17 = v20 + 3;
        if (v14 < 4) {
          unsigned int v17 = v21;
        }
        break;
      default:
        goto LABEL_23;
    }
    goto LABEL_23;
  }
  unsigned int v17 = *(unsigned __int16 *)(v11 + v14);
  unsigned int v18 = v17 - 3;
  if (v17 >= 3) {
    goto LABEL_13;
  }
LABEL_23:
  if (v17 - 1 <= 1) {
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v9 & ~v8, v5);
  }
  if (v14 > 3) {
    goto LABEL_28;
  }
  unsigned int v22 = ((1 << v15) + 1) >> v15;
  if (v22 > 0xFFFC)
  {
    unsigned int v23 = *(_DWORD *)(v13 + v14);
    unsigned int v24 = v23 - 3;
    if (v23 < 3) {
      goto LABEL_43;
    }
    goto LABEL_33;
  }
  if (v22 > 0xFC)
  {
    unsigned int v23 = *(unsigned __int16 *)(v13 + v14);
    unsigned int v24 = v23 - 3;
    if (v23 < 3) {
      goto LABEL_43;
    }
  }
  else
  {
LABEL_28:
    unsigned int v23 = *(unsigned __int8 *)(v13 + v14);
    unsigned int v24 = v23 - 3;
    if (v23 < 3) {
      goto LABEL_43;
    }
  }
LABEL_33:
  if (v14 <= 3) {
    uint64_t v25 = v14;
  }
  else {
    uint64_t v25 = 4;
  }
  switch(v25)
  {
    case 1:
      int v26 = *(unsigned __int8 *)v13;
      goto LABEL_41;
    case 2:
      int v26 = *(unsigned __int16 *)v13;
      goto LABEL_41;
    case 3:
      int v26 = *(unsigned __int16 *)v13 | (*(unsigned __int8 *)((v12 & ~v8) + 2) << 16);
      goto LABEL_41;
    case 4:
      int v26 = *(_DWORD *)v13;
LABEL_41:
      int v27 = (v26 | (v24 << v15)) + 3;
      unsigned int v23 = v26 + 3;
      if (v14 < 4) {
        unsigned int v23 = v27;
      }
      break;
    default:
      break;
  }
LABEL_43:
  if (v23 == 2)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 32))(v9 & ~v8, v12 & ~v8, v5);
    if (v14 <= 3)
    {
      unsigned int v29 = ((1 << v15) + 1) >> v15;
      if (v29 > 0xFFFC)
      {
        int v30 = 2;
        goto LABEL_71;
      }
      if (v29 > 0xFC)
      {
        LOWORD(v30) = 2;
        goto LABEL_74;
      }
    }
    *(unsigned char *)(v11 + v14) = 2;
    if (v14 <= 3) {
      goto LABEL_75;
    }
    goto LABEL_59;
  }
  if (v23 == 1)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 32))(v9 & ~v8, v12 & ~v8, v5);
    if (v14 > 3)
    {
LABEL_57:
      *(unsigned char *)(v11 + v14) = 1;
      goto LABEL_58;
    }
    int v30 = 1;
    unsigned int v31 = ((1 << v15) + 1) >> v15;
    if (v31 <= 0xFFFC)
    {
      if (v31 <= 0xFC) {
        goto LABEL_57;
      }
LABEL_74:
      *(_WORD *)(v11 + v14) = v30;
      goto LABEL_75;
    }
LABEL_71:
    *(_DWORD *)(v11 + v14) = v30;
    goto LABEL_75;
  }
  if (v23)
  {
    if (v14 > 3) {
      goto LABEL_64;
    }
    unsigned int v33 = ((1 << v15) + 1) >> v15;
    uint64_t v34 = 2;
    if (v33 > 0xFFFC) {
      uint64_t v34 = 4;
    }
    if (v33 <= 0xFC) {
LABEL_64:
    }
      uint64_t v34 = 1;
    memcpy((void *)(v9 & ~v8), (const void *)(v12 & ~v8), v34 + v14);
    if (v14 <= 3) {
      goto LABEL_75;
    }
  }
  else
  {
    long long v28 = *(_OWORD *)v13;
    *(void *)((v9 & ~v8) + 0x10) = *(void *)((v12 & ~v8) + 0x10);
    *(_OWORD *)uint64_t v11 = v28;
    if (v14 <= 3)
    {
      unsigned int v35 = ((1 << v15) + 1) >> v15;
      if (v35 > 0xFFFC)
      {
        *(_DWORD *)(v11 + v14) = 0;
        goto LABEL_75;
      }
      if (v35 > 0xFC)
      {
        *(_WORD *)(v11 + v14) = 0;
        goto LABEL_75;
      }
    }
    *(unsigned char *)(v11 + v14) = 0;
    if (v14 <= 3)
    {
LABEL_75:
      int v32 = 0;
      unsigned int v36 = ((1 << (8 * v14)) + 1) >> (8 * v14);
      uint64_t v37 = 2;
      if (v36 > 0xFFFC) {
        uint64_t v37 = 4;
      }
      if (v36 > 0xFC) {
        goto LABEL_79;
      }
      goto LABEL_78;
    }
  }
LABEL_59:
  int v32 = 1;
LABEL_78:
  uint64_t v37 = 1;
LABEL_79:
  uint64_t v38 = v37 + v14;
  int v39 = (void *)(((v9 | v8) + v38) & v10);
  int v40 = (void *)(((v12 | v8) + v38) & v10);
  char v41 = 8 * v14;
  if (v39 == v40) {
    goto LABEL_133;
  }
  if (v32) {
    goto LABEL_83;
  }
  unsigned int v42 = ((1 << v41) + 1) >> v41;
  if (v42 > 0xFFFC)
  {
    unsigned int v43 = *(_DWORD *)((char *)v39 + v14);
    unsigned int v44 = v43 - 3;
    if (v43 < 3) {
      goto LABEL_98;
    }
    goto LABEL_88;
  }
  if (v42 <= 0xFC)
  {
LABEL_83:
    unsigned int v43 = *((unsigned __int8 *)v39 + v14);
    unsigned int v44 = v43 - 3;
    if (v43 < 3) {
      goto LABEL_98;
    }
LABEL_88:
    if (v32) {
      uint64_t v45 = 4;
    }
    else {
      uint64_t v45 = v14;
    }
    switch(v45)
    {
      case 1:
        int v46 = *(unsigned __int8 *)v39;
        goto LABEL_96;
      case 2:
        int v46 = *(unsigned __int16 *)v39;
        goto LABEL_96;
      case 3:
        int v46 = *(unsigned __int16 *)v39 | (*((unsigned __int8 *)v39 + 2) << 16);
        goto LABEL_96;
      case 4:
        int v46 = *(_DWORD *)v39;
LABEL_96:
        int v47 = (v46 | (v44 << v41)) + 3;
        unsigned int v43 = v46 + 3;
        if (!v32) {
          unsigned int v43 = v47;
        }
        break;
      default:
        goto LABEL_98;
    }
    goto LABEL_98;
  }
  unsigned int v43 = *(unsigned __int16 *)((char *)v39 + v14);
  unsigned int v44 = v43 - 3;
  if (v43 >= 3) {
    goto LABEL_88;
  }
LABEL_98:
  if (v43 - 1 <= 1) {
    (*(void (**)(void *, uint64_t))(v6 + 8))(v39, v5);
  }
  if (v32) {
    goto LABEL_103;
  }
  unsigned int v48 = ((1 << v41) + 1) >> v41;
  if (v48 > 0xFFFC)
  {
    unsigned int v49 = *(_DWORD *)((char *)v40 + v14);
    unsigned int v50 = v49 - 3;
    if (v49 < 3) {
      goto LABEL_118;
    }
    goto LABEL_108;
  }
  if (v48 <= 0xFC)
  {
LABEL_103:
    unsigned int v49 = *((unsigned __int8 *)v40 + v14);
    unsigned int v50 = v49 - 3;
    if (v49 < 3) {
      goto LABEL_118;
    }
  }
  else
  {
    unsigned int v49 = *(unsigned __int16 *)((char *)v40 + v14);
    unsigned int v50 = v49 - 3;
    if (v49 < 3) {
      goto LABEL_118;
    }
  }
LABEL_108:
  if (v32) {
    uint64_t v51 = 4;
  }
  else {
    uint64_t v51 = v14;
  }
  switch(v51)
  {
    case 1:
      int v52 = *(unsigned __int8 *)v40;
      goto LABEL_116;
    case 2:
      int v52 = *(unsigned __int16 *)v40;
      goto LABEL_116;
    case 3:
      int v52 = *(unsigned __int16 *)v40 | (*((unsigned __int8 *)v40 + 2) << 16);
      goto LABEL_116;
    case 4:
      int v52 = *(_DWORD *)v40;
LABEL_116:
      int v53 = (v52 | (v50 << v41)) + 3;
      unsigned int v49 = v52 + 3;
      if (!v32) {
        unsigned int v49 = v53;
      }
      break;
    default:
      break;
  }
LABEL_118:
  if (v49 == 2)
  {
    (*(void (**)(void *, void *, uint64_t))(v6 + 32))(v39, v40, v5);
    if ((v32 & 1) == 0)
    {
      unsigned int v55 = ((1 << v41) + 1) >> v41;
      if (v55 > 0xFFFC)
      {
        int v56 = 2;
        goto LABEL_150;
      }
      if (v55 > 0xFC)
      {
        LOWORD(v56) = 2;
        goto LABEL_153;
      }
    }
    *((unsigned char *)v39 + v14) = 2;
    if (v32) {
      goto LABEL_134;
    }
LABEL_141:
    unsigned int v60 = ((1 << v41) + 1) >> v41;
    unsigned int v57 = v60 + 3;
    uint64_t v61 = 2;
    if (v60 > 0xFFFC) {
      uint64_t v61 = 4;
    }
    if (v60 > 0xFC)
    {
      uint64_t v62 = ~v8;
      goto LABEL_156;
    }
    goto LABEL_145;
  }
  if (v49 == 1)
  {
    (*(void (**)(void *, void *, uint64_t))(v6 + 32))(v39, v40, v5);
    if (v32)
    {
LABEL_132:
      *((unsigned char *)v39 + v14) = 1;
LABEL_133:
      if ((v32 & 1) == 0) {
        goto LABEL_141;
      }
      goto LABEL_134;
    }
    int v56 = 1;
    unsigned int v55 = ((1 << v41) + 1) >> v41;
    if (v55 <= 0xFFFC)
    {
      if (v55 <= 0xFC) {
        goto LABEL_132;
      }
LABEL_153:
      *(_WORD *)((char *)v39 + v14) = v56;
      goto LABEL_154;
    }
LABEL_150:
    *(_DWORD *)((char *)v39 + v14) = v56;
    goto LABEL_154;
  }
  if (v49)
  {
    if (v32) {
      goto LABEL_139;
    }
    unsigned int v58 = ((1 << v41) + 1) >> v41;
    uint64_t v59 = 2;
    if (v58 > 0xFFFC) {
      uint64_t v59 = 4;
    }
    if (v58 <= 0xFC) {
LABEL_139:
    }
      uint64_t v59 = 1;
    memcpy(v39, v40, v59 + v14);
    if (v32) {
      goto LABEL_134;
    }
    goto LABEL_141;
  }
  long long v54 = *(_OWORD *)v40;
  _OWORD v39[2] = v40[2];
  *(_OWORD *)int v39 = v54;
  if (v32) {
    goto LABEL_122;
  }
  unsigned int v55 = ((1 << v41) + 1) >> v41;
  if (v55 > 0xFFFC)
  {
    *(_DWORD *)((char *)v39 + v14) = 0;
  }
  else
  {
    if (v55 <= 0xFC)
    {
LABEL_122:
      *((unsigned char *)v39 + v14) = 0;
      if ((v32 & 1) == 0) {
        goto LABEL_141;
      }
LABEL_134:
      unsigned int v57 = 4;
LABEL_145:
      uint64_t v62 = ~v8;
      uint64_t v61 = 1;
      goto LABEL_156;
    }
    *(_WORD *)((char *)v39 + v14) = 0;
  }
LABEL_154:
  uint64_t v62 = ~v8;
  unsigned int v57 = v55 + 3;
  BOOL v63 = v55 > 0xFFFC;
  uint64_t v61 = 2;
  if (v63) {
    uint64_t v61 = 4;
  }
LABEL_156:
  uint64_t v64 = (v14 + v8 + v61) & v62;
  uint64_t v65 = 4;
  if (v57 < 0x10000) {
    uint64_t v65 = 2;
  }
  if (v57 < 0x100) {
    uint64_t v66 = 1;
  }
  else {
    uint64_t v66 = v65;
  }
  uint64_t v67 = v66 + v14 + v64;
  uint64_t v68 = (v11 | 7) + v67;
  unint64_t v69 = ((v13 | 7) + v67) & 0xFFFFFFFFFFFFFFF8;
  __n128 result = *(__n128 *)v69;
  long long v71 = *(_OWORD *)(v69 + 16);
  v68 &= 0xFFFFFFFFFFFFFFF8;
  *(unsigned char *)(v68 + 32) = *(unsigned char *)(v69 + 32);
  *(__n128 *)uint64_t v68 = result;
  *(_OWORD *)(v68 + 16) = v71;
  return result;
}

uint64_t AnimatedValueKeyframe.InterpolationParameters.init(incoming:outgoing:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = type metadata accessor for AnimatedValueKeyframe.InterpolationParameters.Mode();
  uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32);
  ((void (*)(void *__return_ptr, uint64_t, uint64_t, uint64_t))v9)((void *)(v6 - 8), a3, a1, v6);
  uint64_t v7 = a3 + *(int *)(type metadata accessor for AnimatedValueKeyframe.InterpolationParameters() + 28);

  return v9(v7, a2, v6);
}

uint64_t static AnimatedValueKeyframe.InterpolationParameters.catmullRom.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for AnimatedValueKeyframe.InterpolationParameters.Mode();
  MEMORY[0x1F4188790](v2);
  uint64_t v4 = (uint64_t *)((char *)&v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1F4188790](v5);
  uint64_t v7 = (uint64_t *)((char *)&v9 - v6);
  *uint64_t v7 = 0;
  v7[1] = 0;
  v7[2] = 0;
  swift_storeEnumTagMultiPayload();
  *uint64_t v4 = 0;
  v4[1] = 0;
  v4[2] = 0;
  swift_storeEnumTagMultiPayload();
  return AnimatedValueKeyframe.InterpolationParameters.init(incoming:outgoing:)((uint64_t)v7, (uint64_t)v4, a1);
}

uint64_t static _ValueActionModifier._makeScene(modifier:inputs:body:)@<X0>(_DWORD *a1@<X0>, uint64_t *a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t *)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, void (*a7)(uint64_t, uint64_t, uint64_t)@<X6>, uint64_t a8@<X8>, uint64_t a9)
{
  uint64_t v35 = a4;
  unsigned int v36 = a3;
  uint64_t v34 = a8;
  uint64_t v32 = a9;
  uint64_t v50 = *MEMORY[0x1E4F143B8];
  a7(255, a5, a6);
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v11 = type metadata accessor for ValueActionDispatcher();
  uint64_t v31 = *(void *)(v11 - 8);
  MEMORY[0x1F4188790](v11);
  uint64_t v13 = (char *)&v25 - v12;
  LODWORD(v12) = *a1;
  uint64_t v28 = *a2;
  uint64_t v14 = v28;
  int v29 = *((_DWORD *)a2 + 2);
  int v15 = v29;
  uint64_t v16 = a2[2];
  int v30 = *((_DWORD *)a2 + 6);
  int v17 = v30;
  int v18 = *((_DWORD *)a2 + 8);
  int v26 = *((_DWORD *)a2 + 7);
  int v25 = *((_DWORD *)a2 + 9);
  int v33 = *((_DWORD *)a2 + 14);
  LODWORD(v41) = v12;
  type metadata accessor for _GraphValue();
  long long v37 = *(_OWORD *)(a2 + 5);
  _GraphValue.value.getter();
  uint64_t v41 = v14;
  int v42 = v15;
  uint64_t v43 = v16;
  int v44 = v17;
  int v19 = v26;
  int v45 = v26;
  int v46 = v18;
  int v20 = v25;
  int v47 = v25;
  *(void *)&long long v48 = v37;
  _GraphInputs.phase.getter();
  ValueActionDispatcher.init(modifier:phase:)();
  uint64_t v39 = v11;
  uint64_t v40 = swift_getWitnessTable();
  type metadata accessor for Attribute<()>();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v13, v32, (uint64_t)v38, v11, MEMORY[0x1E4FBC248], v21, MEMORY[0x1E4FBC278], v22);
  (*(void (**)(char *, uint64_t))(v31 + 8))(v13, v11);
  static AGAttributeFlags.transactional.getter();
  uint64_t v23 = AGGraphSetFlags();
  uint64_t v41 = v28;
  int v42 = v29;
  uint64_t v43 = v16;
  int v44 = v30;
  int v45 = v19;
  int v46 = v18;
  int v47 = v20;
  long long v48 = v37;
  int v49 = v33;
  return v36(v23, &v41);
}

void *assignWithTake for TitleDocumentContent(void *a1, const void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    _s7SwiftUI14ToolbarStorageV20NavigationPropertiesVSgWOhTm_0((uint64_t)a1, (uint64_t (*)(void))type metadata accessor for TitleDocumentContent);
    if (swift_getEnumCaseMultiPayload())
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    }
    else
    {
      uint64_t v6 = type metadata accessor for URL();
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
      swift_storeEnumTagMultiPayload();
    }
  }
  return a1;
}

uint64_t static SegmentedPickerStyle._makeViewList<A>(value:inputs:)()
{
  return static ModifiedContent<>._makeViewList(view:inputs:)();
}

uint64_t assignWithTake for EditMenuPresentation(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  swift_release();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_release();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_release();
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_release();
  return a1;
}

uint64_t assignWithCopy for EditMenuPresentation(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_retain();
  swift_release();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_retain();
  swift_release();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_retain();
  swift_release();
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_retain();
  swift_release();
  return a1;
}

void storeEnumTagSinglePayload for EditMenuModifierCore(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(unsigned __int8 *)(v6 + 80);
  size_t v10 = ((*(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64) + ((v9 + 12) & ~v9) + 7) & 0xFFFFFFFFFFFFFFF8)
      + 17;
  char v11 = 8 * v10;
  if (v8 >= a3)
  {
    int v15 = 0;
    if (v8 >= a2)
    {
LABEL_17:
      switch(v15)
      {
        case 1:
          a1[v10] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_34;
        case 2:
          *(_WORD *)&a1[v10] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_34;
        case 3:
          goto LABEL_47;
        case 4:
          *(_DWORD *)&a1[v10] = 0;
          goto LABEL_33;
        default:
LABEL_33:
          if (a2)
          {
LABEL_34:
            if ((v7 & 0x80000000) != 0)
            {
              unint64_t v20 = (((unint64_t)(a1 + 11) & 0xFFFFFFFFFFFFFFFCLL) + v9 + 4) & ~v9;
              uint64_t v21 = *(void (**)(unint64_t))(v6 + 56);
              v21(v20);
            }
            else
            {
              if ((a2 & 0x80000000) != 0) {
                uint64_t v19 = a2 ^ 0x80000000;
              }
              else {
                uint64_t v19 = a2 - 1;
              }
              *(void *)a1 = v19;
            }
          }
          break;
      }
      return;
    }
  }
  else
  {
    unsigned int v12 = (a3 - v8 + 255) >> v11;
    if (v10 <= 3) {
      unsigned int v13 = v12 + 1;
    }
    else {
      unsigned int v13 = 2;
    }
    if (v13 >= 0x10000) {
      int v14 = 4;
    }
    else {
      int v14 = 2;
    }
    if (v13 < 0x100) {
      int v14 = 1;
    }
    if (v13 >= 2) {
      int v15 = v14;
    }
    else {
      int v15 = 0;
    }
    if (v8 >= a2) {
      goto LABEL_17;
    }
  }
  unsigned int v16 = (~v8 + a2) >> v11;
  if (v10 < 4) {
    int v17 = v16 + 1;
  }
  else {
    int v17 = 1;
  }
  if (v10 >= 4) {
    unsigned int v18 = ~v8 + a2;
  }
  else {
    unsigned int v18 = (~(_BYTE)v8 + a2);
  }
  bzero(a1, v10);
  if (v10 == 1) {
    *a1 = v18;
  }
  else {
    *(_DWORD *)a1 = v18;
  }
  switch(v15)
  {
    case 1:
      a1[v10] = v17;
      break;
    case 2:
      *(_WORD *)&a1[v10] = v17;
      break;
    case 3:
LABEL_47:
      __break(1u);
      break;
    case 4:
      *(_DWORD *)&a1[v10] = v17;
      break;
    default:
      return;
  }
}

unint64_t protocol witness for CustomStringConvertible.description.getter in conformance DisplayListTransform<A>()
{
  return 0xD000000000000021;
}

uint64_t type metadata accessor for DisplayListTransform()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t closure #1 in DisplayListTransform.value.getter(uint64_t *a1, uint64_t *a2, _OWORD *a3)
{
  uint64_t v4 = (void *)a2[1];
  uint64_t v22 = *a2;
  long long v5 = a3[1];
  v19[0] = *a3;
  v19[1] = v5;
  v20[0] = a3[2];
  *(_OWORD *)((char *)v20 + 12) = *(_OWORD *)((char *)a3 + 44);
  type metadata accessor for DisplayListTransform();
  DisplayListTransform.environment.getter(&v21);
  v19[0] = v21;
  id v6 = v4;
  swift_bridgeObjectRetain();
  uint64_t result = specialized AccessibilityArchivableViewAttachment.init(_:environment:)((uint64_t)&v22, (uint64_t *)v19);
  if (v10 != 1)
  {
    uint64_t v11 = result;
    uint64_t v12 = v8;
    uint64_t v13 = v10;
    uint64_t v14 = v9 & 1;
    uint64_t v15 = a1[3];
    if (v15 != 1)
    {
      uint64_t v16 = a1[1];
      uint64_t v23 = *a1;
      uint64_t v17 = a1[2] & 1;
      if (v15)
      {
        *(void *)&v19[0] = v15;
        if (v10)
        {
          uint64_t v18 = swift_bridgeObjectRetain();
          specialized Array.append<A>(contentsOf:)(v18);
          uint64_t v15 = *(void *)&v19[0];
        }
      }
      outlined consume of Environment<AppIntentExecutor?>.Content(v11, v12, v14);
      uint64_t result = swift_bridgeObjectRelease();
      uint64_t v11 = v23;
      uint64_t v12 = v16;
      uint64_t v14 = v17;
      uint64_t v13 = v15;
    }
    *a1 = v11;
    a1[1] = v12;
    a1[2] = v14;
    a1[3] = v13;
  }
  return result;
}

uint64_t specialized DisplayListTransform.value.getter@<X0>(uint64_t a1@<X8>)
{
  void (*v83)(long long *__return_ptr, uint64_t, uint64_t);
  id v84;
  id v85;
  int v86;
  uint64_t v87;
  uint64_t v88;
  void *v89;
  char *v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  __int16 v94;
  char v95;
  uint64_t v96;
  unint64_t v97;
  unint64_t v98;
  long long v99;
  char *v100;
  uint64_t v101;
  char *v102;
  uint64_t v103;
  BOOL v104;
  uint64_t v105;
  int64_t v106;
  char v107;
  uint64_t v108;
  int64_t v109;
  uint64_t v110;
  void **v111;
  void *v112;
  uint64_t v113;
  unint64_t v114;
  char v115;
  uint64_t v116;
  uint64_t v117;
  id v118;
  id v119;
  uint64_t v120;
  id v121;
  id v122;
  uint64_t (*v123)(void, uint64_t);
  uint64_t v124;
  uint64_t v125;
  char v126;
  char v127;
  uint64_t *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  unint64_t v132;
  unint64_t v133;
  uint64_t v134;
  int *v135;
  int v136;
  long long *v137;
  long long v138;
  uint64_t v139;
  uint64_t v140;
  unint64_t v141;
  int v142;
  uint64_t v143;
  __int16 v144;
  char v145;
  uint64_t v146;
  uint64_t v147;
  void *v148;
  int v149;
  long long *v150;
  long long v151;
  uint64_t v152;
  uint64_t v153;
  double v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  unint64_t v159;
  void *v160;
  uint64_t v161;
  int v162;
  int v163;
  void *v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  int *v168;
  uint64_t v169;
  char *v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  unint64_t v174;
  void *v175;
  unint64_t v176;
  id v177;
  int v178;
  int v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  long long v185;
  long long v186;
  long long v187;
  long long v188;
  long long v189;
  long long v190;
  uint64_t v191;
  uint64_t v192;
  long long v193;
  __int16 v194;
  char v195;
  int v196;
  long long v197;
  long long v198;
  uint64_t v199;
  uint64_t v200;
  long long v201;
  __int16 v202;
  char v203;
  int v204;
  long long v205;
  unsigned char v206[24];
  uint64_t v207;
  long long v208;
  uint64_t v209;
  uint64_t v210;
  long long v211;
  long long v212;
  uint64_t v213;
  char *v214;
  uint64_t v215;
  __int16 v216;
  char v217;

  uint64_t v3 = type metadata accessor for AccessibilityNodeAttachment();
  uint64_t v180 = *(void *)(v3 - 8);
  v181 = v3;
  MEMORY[0x1F4188790](v3);
  long long v5 = (uint64_t *)((char *)&v161 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1F4188790](v6);
  v183 = (uint64_t)&v161 - v7;
  uint64_t v168 = v1;
  LODWORD(v8) = *MEMORY[0x1E4F4E7A0];
  if (v1[12] == *MEMORY[0x1E4F4E7A0])
  {
    DisplayList.init()();
  }
  else
  {
    uint64_t Value = AGGraphGetValue();
    __int16 v10 = *(_WORD *)(Value + 8);
    char v11 = *(unsigned char *)(Value + 10);
    v215 = *(void *)Value;
    v216 = v10;
    v217 = v11;
    swift_bridgeObjectRetain();
  }
  uint64_t v12 = v168;
  uint64_t v13 = MEMORY[0x1E4FBC860];
  unint64_t v14 = MEMORY[0x1E4FBC860];
  if (v168[14] != v8)
  {
    unint64_t v14 = *(void *)AGGraphGetValue();
    swift_bridgeObjectRetain();
    uint64_t v12 = v168;
  }
  uint64_t v179 = v12[11];
  v205 = *(_OWORD *)AGGraphGetValue();
  if ((EnvironmentValues.accessibilityEnabled.getter() & 1) == 0)
  {
    uint64_t result = swift_bridgeObjectRelease();
    __int16 v28 = v216;
    char v29 = v217;
    *(void *)a1 = v215;
    *(_WORD *)(a1 + 8) = v28;
    *(unsigned char *)(a1 + 10) = v29;
    return result;
  }
  uint64_t v164 = (void *)a1;
  v214 = (char *)v13;
  uint64_t v15 = v14 >> 62;
  if (v14 >> 62)
  {
LABEL_151:
    swift_bridgeObjectRetain();
    _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  uint64_t v184 = v14;
  uint64_t v16 = (unsigned __int8 *)AGGraphGetValue();
  uint64_t v17 = *v16;
  int v18 = *((_DWORD *)v16 + 1);
  uint64_t v19 = (char *)*((void *)v16 + 1);
  LOBYTE(v197) = *v16;
  DWORD1(v197) = v18;
  *((void *)&v197 + 1) = v19;
  swift_bridgeObjectRetain();
  AccessibilityScrollableModifier.scrollableCollection.getter((uint64_t)&v205);
  uint64_t v20 = *(void *)&v206[8];
  _s7SwiftUI27AccessibilityNodeAttachmentVSgWOhTm_0((uint64_t)&v205, (uint64_t (*)(void))type metadata accessor for ScrollableCollection?);
  swift_bridgeObjectRelease();
  if (v20) {
    int v21 = v17;
  }
  else {
    int v21 = 0;
  }
  uint64_t v163 = v21;
  uint64_t v175 = v5;
  if (v21 == 1)
  {
    uint64_t v22 = AGGraphGetValue();
    int v23 = *(_DWORD *)(v22 + 4);
    uint64_t v24 = *(void *)(v22 + 8);
    LOBYTE(v189) = *(unsigned char *)v22;
    DWORD1(v189) = v23;
    *((void *)&v189 + 1) = v24;
    swift_bridgeObjectRetain();
    AccessibilityScrollableModifier.scrollableCollection.getter((uint64_t)&v197);
    if (*((void *)&v198 + 1))
    {
      outlined init with take of OptionalBinaryInteger(&v197, (uint64_t)&v205);
      *(void *)&v211 = v24;
      outlined init with copy of TableColumnList((uint64_t)&v205, (uint64_t)&v197);
      _s7SwiftUI27AccessibilityNodeAttachmentVWOcTm_0((uint64_t)&v197, (uint64_t)&v189, (uint64_t (*)(void))type metadata accessor for ScrollableCollection?);
      swift_bridgeObjectRetain();
      specialized AccessibilityProperties.subscript.setter((uint64_t)&v189);
      _s7SwiftUI27AccessibilityNodeAttachmentVSgWOhTm_0((uint64_t)&v197, (uint64_t (*)(void))type metadata accessor for ScrollableCollection?);
      _sSay7SwiftUI25_LazyLayout_PlacedSubviewVGMaTm_2(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<AccessibilityVisibility>, MEMORY[0x1E4F40BB8], MEMORY[0x1E4FBBE00]);
      uint64_t v25 = swift_allocObject();
      static AccessibilityVisibility.containerElement.getter();
      int v26 = *(_DWORD *)(v25 + 32);
      swift_setDeallocating();
      swift_deallocClassInstance();
      LODWORD(v197) = v26;
      DWORD1(v197) = v26;
      AccessibilityProperties.visibility.setter();
      *(void *)&v189 = v211;
      static AccessibilityAttachment.properties(_:)();
      swift_bridgeObjectRelease();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v205);
    }
    else
    {
      _s7SwiftUI27AccessibilityNodeAttachmentVSgWOhTm_0((uint64_t)&v197, (uint64_t (*)(void))type metadata accessor for ScrollableCollection?);
      *(void *)&v205 = v24;
      static AccessibilityAttachment.properties(_:)();
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v168[13] != v8)
    {
      uint64_t v56 = AGGraphGetValue();
      uint64_t v58 = *(void *)v56;
      unsigned int v57 = *(void **)(v56 + 8);
      if (!*(unsigned char *)(v56 + 16))
      {
        id v61 = v57;
        swift_bridgeObjectRetain();
        v167 = 0;
LABEL_63:
        *(void *)&v205 = v58;
        AccessibilityProperties.merge(with:)((uint64_t *)&v205);
        v205 = v197;
        uint64_t v62 = (void *)AccessibilityAttachment.platformElement.getter();

        if (!v62)
        {
          *(void *)&v205 = v58;
          *((void *)&v205 + 1) = v57;
          if (AccessibilityAttachment.platformElement.getter()) {
            AccessibilityAttachment.platformElement.setter();
          }
        }
        swift_bridgeObjectRelease();

LABEL_67:
        uint64_t v17 = *((void *)&v197 + 1);
        uint64_t v20 = v197;
        uint64_t v19 = (char *)*((id *)&v197 + 1);
        swift_bridgeObjectRetain();
        uint64_t v15 = MEMORY[0x1E4FBC860];
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          goto LABEL_155;
        }
        goto LABEL_68;
      }
      if (*(unsigned char *)(v56 + 16) == 1)
      {
        uint64_t v59 = swift_bridgeObjectRetain();
        unsigned int v60 = specialized Sequence.compactMap<A>(_:)(v59);
        v167 = 0;
        static AccessibilityAttachment.combine(_:)(v60, (uint64_t *)&v205);
        swift_bridgeObjectRelease();
        outlined consume of AccessibilityAttachment.Tree(v58, v57, 1);
        unsigned int v57 = (void *)*((void *)&v205 + 1);
        uint64_t v58 = v205;
        goto LABEL_63;
      }
    }
    v167 = 0;
    goto LABEL_67;
  }
  if (AGGraphGetCurrentAttribute() == v8) {
    goto LABEL_153;
  }
  AccessibilityAttachmentToken.init<A>(_:)();
  if (v15)
  {
    uint64_t v19 = (char *)v184;
    if (v184 < 0) {
      uint64_t v20 = v184;
    }
    else {
      uint64_t v20 = v184 & 0xFFFFFFFFFFFFFF8;
    }
    swift_bridgeObjectRetain();
    uint64_t v15 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v15 < 0) {
      goto LABEL_154;
    }
  }
  else
  {
    uint64_t v15 = *(void *)((v184 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  if (!v15)
  {
    swift_bridgeObjectRelease();
    v167 = 0;
    goto LABEL_71;
  }
  int v30 = v168[13];
  type metadata accessor for [Scrollable]();
  *(void *)&v187 = v31;
  v167 = 0;
  v185 = xmmword_18834BB80;
  LODWORD(v186) = v8;
  do
  {
    while (1)
    {
      uint64_t v32 = *(void *)(AGGraphGetValue() + 8);
      uint64_t v33 = AGGraphGetValue();
      if (!*(void *)(*(void *)v33 + 16))
      {
        swift_bridgeObjectRetain();
LABEL_31:
        *(void *)&v205 = v32;
        static AccessibilityAttachment.properties(_:)();
        goto LABEL_39;
      }
      outlined init with copy of TableColumnList(*(void *)v33 + 32, (uint64_t)&v189);
      type metadata accessor for CVarArg(0, (unint64_t *)&lazy cache variable for type metadata for Scrollable);
      type metadata accessor for CVarArg(0, (unint64_t *)&lazy cache variable for type metadata for ScrollableCollection);
      swift_bridgeObjectRetain();
      if ((swift_dynamicCast() & 1) == 0)
      {
        v213 = 0;
        v211 = 0u;
        v212 = 0u;
        _s7SwiftUI27AccessibilityNodeAttachmentVSgWOhTm_0((uint64_t)&v211, (uint64_t (*)(void))type metadata accessor for ScrollableCollection?);
        goto LABEL_31;
      }
      outlined init with take of OptionalBinaryInteger(&v211, (uint64_t)&v197);
      outlined init with take of OptionalBinaryInteger(&v197, (uint64_t)&v205);
      *(void *)&v188 = v32;
      outlined init with copy of TableColumnList((uint64_t)&v205, (uint64_t)&v197);
      _s7SwiftUI27AccessibilityNodeAttachmentVWOcTm_0((uint64_t)&v197, (uint64_t)&v189, (uint64_t (*)(void))type metadata accessor for ScrollableCollection?);
      _s7SwiftUI27AccessibilityNodeAttachmentVWOcTm_0((uint64_t)&v189, (uint64_t)&v211, (uint64_t (*)(void))type metadata accessor for ScrollableCollection?);
      if (*((void *)&v212 + 1))
      {
        swift_bridgeObjectRetain();
        _s7SwiftUI27AccessibilityNodeAttachmentVSgWOhTm_0((uint64_t)&v211, (uint64_t (*)(void))type metadata accessor for ScrollableCollection?);
        type metadata accessor for AccessibilityPropertiesEntry<ScrollableCollection?>(0);
        *((void *)&v212 + 1) = v34;
        v213 = _s7SwiftUI22ArchivableLinkModifierVACSeAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type AccessibilityPropertiesEntry<ScrollableCollection?> and conformance AccessibilityPropertiesEntry<A>, type metadata accessor for AccessibilityPropertiesEntry<ScrollableCollection?>);
        *(void *)&v211 = swift_allocObject();
        _s7SwiftUI27AccessibilityNodeAttachmentVWOcTm_0((uint64_t)&v189, v211 + 16, (uint64_t (*)(void))type metadata accessor for ScrollableCollection?);
        specialized Dictionary.subscript.setter((uint64_t)&v211, (uint64_t)&type metadata for AccessibilityProperties.ScrollableCollectionKey);
        uint64_t v35 = &v189;
        unsigned int v36 = type metadata accessor for ScrollableCollection?;
      }
      else
      {
        unint64_t v37 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&type metadata for AccessibilityProperties.ScrollableCollectionKey);
        if (v38)
        {
          unint64_t v39 = v37;
          swift_bridgeObjectRetain();
          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          v210 = v32;
          uint64_t v41 = v32;
          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          {
            specialized _NativeDictionary.copy()();
            uint64_t v41 = v210;
          }
          outlined init with take of OptionalBinaryInteger((long long *)(*(void *)(v41 + 56) + 40 * v39), (uint64_t)&v211);
          specialized _NativeDictionary._delete(at:)(v39, v41);
          *(void *)&v188 = v41;
          swift_bridgeObjectRelease();
        }
        else
        {
          v213 = 0;
          v211 = 0u;
          v212 = 0u;
          swift_bridgeObjectRetain();
        }
        _s7SwiftUI27AccessibilityNodeAttachmentVSgWOhTm_0((uint64_t)&v189, (uint64_t (*)(void))type metadata accessor for ScrollableCollection?);
        unsigned int v36 = type metadata accessor for AnyAccessibilityPropertiesEntry?;
        uint64_t v35 = &v211;
      }
      _s7SwiftUI27AccessibilityNodeAttachmentVSgWOhTm_0((uint64_t)v35, (uint64_t (*)(void))v36);
      _s7SwiftUI27AccessibilityNodeAttachmentVSgWOhTm_0((uint64_t)&v197, (uint64_t (*)(void))type metadata accessor for ScrollableCollection?);
      _sSay7SwiftUI25_LazyLayout_PlacedSubviewVGMaTm_2(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<AccessibilityVisibility>, MEMORY[0x1E4F40BB8], MEMORY[0x1E4FBBE00]);
      uint64_t v42 = swift_allocObject();
      *(_OWORD *)(v42 + 16) = v185;
      static AccessibilityVisibility.containerElement.getter();
      int v43 = *(_DWORD *)(v42 + 32);
      swift_bridgeObjectRelease();
      LODWORD(v197) = v43;
      DWORD1(v197) = v43;
      AccessibilityProperties.visibility.setter();
      *(void *)&v189 = v188;
      static AccessibilityAttachment.properties(_:)();
      swift_bridgeObjectRelease();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v205);
LABEL_39:
      swift_bridgeObjectRelease();
      if (v30 == v8) {
        goto LABEL_48;
      }
      uint64_t v44 = AGGraphGetValue();
      uint64_t v46 = *(void *)v44;
      int v45 = *(void **)(v44 + 8);
      if (*(unsigned char *)(v44 + 16))
      {
        if (*(unsigned char *)(v44 + 16) != 1) {
          goto LABEL_48;
        }
        uint64_t v47 = swift_bridgeObjectRetain();
        uint64_t v48 = v167;
        int v49 = specialized Sequence.compactMap<A>(_:)(v47);
        v167 = v48;
        static AccessibilityAttachment.combine(_:)(v49, (uint64_t *)&v205);
        swift_bridgeObjectRelease();
        outlined consume of AccessibilityAttachment.Tree(v46, v45, 1);
        int v45 = (void *)*((void *)&v205 + 1);
        uint64_t v46 = v205;
      }
      else
      {
        id v50 = v45;
        swift_bridgeObjectRetain();
      }
      *(void *)&v205 = v46;
      AccessibilityProperties.merge(with:)((uint64_t *)&v205);
      v205 = v197;
      uint64_t v51 = (void *)AccessibilityAttachment.platformElement.getter();

      if (!v51)
      {
        *(void *)&v205 = v46;
        *((void *)&v205 + 1) = v45;
        if (AccessibilityAttachment.platformElement.getter()) {
          AccessibilityAttachment.platformElement.setter();
        }
      }
      swift_bridgeObjectRelease();

LABEL_48:
      long long v52 = v197;
      v205 = v197;
      if ((AccessibilityAttachment.isEmpty.getter() & 1) == 0) {
        break;
      }
      swift_bridgeObjectRelease();

      if (!--v15) {
        goto LABEL_54;
      }
    }
    int v53 = v214;
    id v54 = *((id *)&v52 + 1);
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      int v53 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v53 + 2) + 1, 1, v53);
    }
    unint64_t v8 = *((void *)v53 + 2);
    unint64_t v55 = *((void *)v53 + 3);
    if (v8 >= v55 >> 1) {
      int v53 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v55 > 1), v8 + 1, 1, v53);
    }
    *((void *)v53 + 2) = v8 + 1;
    *(_OWORD *)&v53[16 * v8 + 32] = v52;

    swift_bridgeObjectRelease();
    v214 = v53;
    LODWORD(v8) = v186;
    --v15;
  }
  while (v15);
LABEL_54:
  swift_bridgeObjectRelease();
  long long v5 = v175;
LABEL_71:
  while (1)
  {
    uint64_t v66 = v168;
    v205 = *(_OWORD *)AGGraphGetValue();
    MEMORY[0x18C10C240]();
    v205 = *(_OWORD *)AGGraphGetValue();
    MEMORY[0x18C10C240]();
    v162 = v66[8];
    uint64_t v67 = (long long *)AGGraphGetValue();
    long long v68 = v67[1];
    v205 = *v67;
    *(_OWORD *)v206 = v68;
    CGFloat v69 = MEMORY[0x18C114450]();
    CGFloat v71 = v70;
    DisplayList.Version.init(forUpdate:)();
    uint64_t v178 = *((unsigned __int8 *)v66 + 4);
    v165 = v205;
    if ((v178 & 1) == 0) {
      break;
    }
    uint64_t v171 = *((void *)v214 + 2);
    if (!v171) {
      break;
    }
    uint64_t v170 = v214 + 32;
    uint64_t v161 = (uint64_t)v214;
    swift_bridgeObjectRetain_n();
    unint64_t v8 = 0;
    v166 = 0;
    unint64_t v14 = 1;
    uint64_t v169 = MEMORY[0x1E4FBC840] + 8;
    while (1)
    {
      uint64_t v72 = &v170[16 * v8];
      uint64_t v73 = *(void *)v72;
      int v74 = (void *)*((void *)v72 + 1);
      char v75 = (uint64_t *)AGGraphGetValue();
      uint64_t v17 = *v75;
      uint64_t v184 = v75[1];
      uint64_t KeyPath = swift_getKeyPath();
      uint64_t v77 = *(void *)(v73 + 16);
      int64_t v182 = v73;
      unint64_t v176 = v8;
      if (!v77) {
        goto LABEL_80;
      }
      unint64_t v78 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&type metadata for AccessibilityProperties.ActionsKey);
      if (v79)
      {
        outlined init with copy of TableColumnList(*(void *)(v73 + 56) + 40 * v78, (uint64_t)&v205);
        uint64_t v80 = *(void *)&v206[8];
        uint64_t v81 = *(void *)&v206[16];
        __swift_project_boxed_opaque_existential_1(&v205, *(uint64_t *)&v206[8]);
        unint64_t v82 = v14;
        uint64_t v83 = *(void (**)(long long *__return_ptr, uint64_t, uint64_t))(v81 + 8);
        swift_retain();
        swift_retain();
        swift_bridgeObjectRetain_n();
        BOOL v84 = v74;
        swift_retain();
        v83(&v197, v80, v81);
        unint64_t v14 = v82;
        unint64_t v8 = v176;
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v205);
      }
      else
      {
LABEL_80:
        v197 = 0u;
        v198 = 0u;
        swift_retain();
        swift_retain();
        swift_bridgeObjectRetain_n();
        uint64_t v85 = v74;
        swift_retain();
      }
      _sSay7SwiftUI25_LazyLayout_PlacedSubviewVGMaTm_2(0, (unint64_t *)&lazy cache variable for type metadata for Any?, v169, MEMORY[0x1E4FBB718]);
      _sSay7SwiftUI25_LazyLayout_PlacedSubviewVGMaTm_2(0, (unint64_t *)&lazy cache variable for type metadata for [AnyAccessibilityAction], (uint64_t)&type metadata for AnyAccessibilityAction, MEMORY[0x1E4FBB320]);
      unint64_t v86 = swift_dynamicCast();
      v177 = v74;
      if (v86)
      {
        long long v87 = v205;
      }
      else
      {
        *(void *)&v205 = 0;
        if (one-time initialization token for defaultValue != -1) {
          swift_once();
        }
        long long v87 = static AccessibilityProperties.ActionsKey.defaultValue;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
      }
      swift_bridgeObjectRelease();
      uint64_t v88 = *(void *)(v87 + 16);
      if (v88)
      {
        uint64_t v173 = KeyPath;
        char v174 = v14;
        int v89 = (void *)(v87 + 32);
        uint64_t v172 = v87;
        swift_bridgeObjectRetain();
        int v90 = (char *)MEMORY[0x1E4FBC860];
        do
        {
          int v93 = v89[3];
          int v92 = v89[4];
          __swift_project_boxed_opaque_existential_1(v89, v93);
          *(void *)&v197 = v17;
          *((void *)&v197 + 1) = v184;
          (*(void (**)(long long *__return_ptr, long long *, uint64_t, uint64_t))(v92 + 96))(&v205, &v197, v93, v92);
          if ((void)v208)
          {
            v187 = v208;
            int v94 = *(_WORD *)v206;
            v185 = v205;
            v186 = *(_OWORD *)&v206[8];
            int v95 = v207;
            uint64_t v96 = v209;
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              int v90 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v90 + 2) + 1, 1, v90);
            }
            uint64_t v98 = *((void *)v90 + 2);
            uint64_t v97 = *((void *)v90 + 3);
            unint64_t v99 = v187;
            if (v98 >= v97 >> 1)
            {
              long long v100 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v97 > 1), v98 + 1, 1, v90);
              unint64_t v99 = v187;
              int v90 = v100;
            }
            *((void *)v90 + 2) = v98 + 1;
            int v91 = &v90[72 * v98];
            *((_OWORD *)v91 + 2) = v185;
            *((_WORD *)v91 + 24) = v94;
            *(_OWORD *)(v91 + 56) = v186;
            v91[72] = v95 & 1;
            *((_OWORD *)v91 + 5) = v99;
            *((void *)v91 + 12) = v96;
          }
          v89 += 6;
          --v88;
        }
        while (v88);
        swift_bridgeObjectRelease();
        uint64_t KeyPath = v173;
        unint64_t v14 = v174;
        unint64_t v8 = v176;
      }
      else
      {
        int v90 = (char *)MEMORY[0x1E4FBC860];
      }
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
      uint64_t v101 = *((void *)v90 + 2);
      swift_release();
      long long v5 = v175;
      if (v101) {
        break;
      }
      swift_bridgeObjectRelease();
      swift_release();
      swift_bridgeObjectRelease();
LABEL_75:

LABEL_76:
      if (++v8 == v171)
      {
        swift_bridgeObjectRelease_n();
        goto LABEL_119;
      }
    }
    if (!v14)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_116;
    }
    if (v14 == 1)
    {
      swift_bridgeObjectRelease();

      v166 = KeyPath;
      unint64_t v14 = (unint64_t)v90;
      goto LABEL_76;
    }
    uint64_t v20 = *((void *)v90 + 2);
    uint64_t v19 = *(char **)(v14 + 16);
    uint64_t v15 = (uint64_t)&v19[v20];
    if (__OFADD__(v19, v20))
    {
      __break(1u);
LABEL_149:
      __break(1u);
LABEL_150:
      __break(1u);
      goto LABEL_151;
    }
    swift_bridgeObjectRetain();
    int v102 = (char *)swift_isUniquelyReferenced_nonNull_native();
    if (v102 && v15 <= *(void *)(v14 + 24) >> 1)
    {
      if (!*((void *)v90 + 2)) {
        goto LABEL_114;
      }
    }
    else
    {
      if ((uint64_t)v19 <= v15) {
        int v106 = (int64_t)&v19[v20];
      }
      else {
        int v106 = (int64_t)v19;
      }
      unint64_t v14 = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v102, v106, 1, (char *)v14);
      if (!*((void *)v90 + 2))
      {
LABEL_114:
        if (v20) {
          goto LABEL_149;
        }
LABEL_115:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease_n();
LABEL_116:
        swift_release();
        goto LABEL_75;
      }
    }
    if ((*(void *)(v14 + 24) >> 1) - *(void *)(v14 + 16) < v20) {
      goto LABEL_150;
    }
    swift_arrayInitWithCopy();
    if (!v20) {
      goto LABEL_115;
    }
    int v103 = *(void *)(v14 + 16);
    int v104 = __OFADD__(v103, v20);
    int v105 = v103 + v20;
    if (!v104)
    {
      *(void *)(v14 + 16) = v105;
      goto LABEL_115;
    }
    __break(1u);
LABEL_153:
    __break(1u);
LABEL_154:
    __break(1u);
LABEL_155:
    uint64_t v15 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v15 + 16) + 1, 1, (char *)v15);
LABEL_68:
    unint64_t v64 = *(void *)(v15 + 16);
    unint64_t v63 = *(void *)(v15 + 24);
    if (v64 >= v63 >> 1) {
      uint64_t v15 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v63 > 1), v64 + 1, 1, (char *)v15);
    }
    *(void *)(v15 + 16) = v64 + 1;
    uint64_t v65 = (char *)(v15 + 16 * v64);
    *((void *)v65 + 4) = v20;
    *((void *)v65 + 5) = v17;

    swift_bridgeObjectRelease();
    v214 = (char *)v15;
  }
  v166 = 0;
  unint64_t v14 = 1;
LABEL_119:
  char v174 = v14;
  if (v163) {
    int v107 = 1;
  }
  else {
    int v107 = specialized DisplayListTransform.mergeAttachments(list:attachments:frame:)(&v215, (uint64_t *)&v214, v69, v71);
  }
  int v108 = (uint64_t)v214;
  uint64_t v109 = *((void *)v214 + 2);
  uint64_t v110 = MEMORY[0x1E4FBC860];
  if (v109)
  {
    v210 = MEMORY[0x1E4FBC860];
    swift_bridgeObjectRetain();
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v109, 0);
    v211 = *(_OWORD *)(v168 + 2);
    LODWORD(v187) = v107 & 1;
    uint64_t v184 = v108;
    unint64_t v111 = (void **)(v108 + 40);
    *(void *)&v186 = MEMORY[0x1E4FBC840] + 8;
    while (1)
    {
      unint64_t v113 = (uint64_t)*(v111 - 1);
      BOOL v112 = *v111;
      if (*(void *)(v113 + 16)
        && (int64_t v114 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&type metadata for AccessibilityProperties.UIKitTraitsKey),
            (v115 & 1) != 0))
      {
        outlined init with copy of TableColumnList(*(void *)(v113 + 56) + 40 * v114, (uint64_t)&v205);
        uint64_t v116 = *(void *)&v206[8];
        unint64_t v117 = *(void *)&v206[16];
        __swift_project_boxed_opaque_existential_1(&v205, *(uint64_t *)&v206[8]);
        *(void *)&v185 = *(void *)(v117 + 8);
        unint64_t v118 = v112;
        swift_bridgeObjectRetain_n();
        uint64_t v119 = v118;
        uint64_t v120 = v117;
        long long v5 = v175;
        ((void (*)(long long *__return_ptr, uint64_t, uint64_t))v185)(&v197, v116, v120);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v205);
      }
      else
      {
        v197 = 0u;
        v198 = 0u;
        uint64_t v121 = v112;
        swift_bridgeObjectRetain_n();
        uint64_t v122 = v121;
      }
      uint64_t v123 = (uint64_t (*)(void, uint64_t))MEMORY[0x1E4FBB718];
      _sSay7SwiftUI25_LazyLayout_PlacedSubviewVGMaTm_2(0, (unint64_t *)&lazy cache variable for type metadata for Any?, v186, MEMORY[0x1E4FBB718]);
      _sSay7SwiftUI25_LazyLayout_PlacedSubviewVGMaTm_2(0, &lazy cache variable for type metadata for AccessibilityUIKitTraits?, (uint64_t)&type metadata for AccessibilityUIKitTraits, v123);
      if (swift_dynamicCast())
      {
        v206[1] = 0;
        uint64_t v125 = *((void *)&v205 + 1);
        int64_t v124 = v205;
        unint64_t v126 = v206[0];
        swift_bridgeObjectRelease();
        if ((v126 & 1) == 0)
        {
          int64_t v127 = 0;
          if ((v178 & 1) == 0) {
            goto LABEL_134;
          }
          goto LABEL_131;
        }
      }
      else
      {
        v205 = 0uLL;
        *(_WORD *)v206 = 256;
        swift_bridgeObjectRelease();
      }
      int64_t v124 = 0;
      uint64_t v125 = 0;
      int64_t v127 = 1;
      if ((v178 & 1) == 0)
      {
LABEL_134:
        *long long v5 = v113;
        v5[1] = v112;
        goto LABEL_135;
      }
LABEL_131:
      uint64_t v128 = (uint64_t *)AGGraphGetValue();
      Swift::Int v130 = *v128;
      uint64_t v129 = v128[1];
      *(void *)&v197 = v113;
      *((void *)&v197 + 1) = v112;
      v205 = 0u;
      *(_OWORD *)v206 = 0u;
      *(void *)&v206[16] = v124;
      v207 = v125;
      LOBYTE(v208) = v127;
      *(void *)&v189 = v130;
      *((void *)&v189 + 1) = v129;
      v188 = v211;
      swift_retain();
      swift_retain();
      CodableAccessibilityAttachmentStorage.init(_:platformStorage:in:idiom:)();
LABEL_135:
      type metadata accessor for AccessibilityNodeAttachment.Storage();
      swift_storeEnumTagMultiPayload();
      uint64_t v131 = v181;
      *((unsigned char *)v5 + *(int *)(v181 + 20)) = v187;
      *((unsigned char *)v5 + *(int *)(v131 + 24)) = 0;
      _s7SwiftUI27AccessibilityNodeAttachmentVWObTm_0((uint64_t)v5, v183, MEMORY[0x1E4F40FA8]);
      swift_bridgeObjectRelease();

      uint64_t v110 = v210;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v110 + 16) + 1, 1);
        uint64_t v110 = v210;
      }
      int64_t v133 = *(void *)(v110 + 16);
      unint64_t v132 = *(void *)(v110 + 24);
      if (v133 >= v132 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v132 > 1, v133 + 1, 1);
        uint64_t v110 = v210;
      }
      v111 += 2;
      *(void *)(v110 + 16) = v133 + 1;
      _s7SwiftUI27AccessibilityNodeAttachmentVWObTm_0(v183, v110+ ((*(unsigned __int8 *)(v180 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v180 + 80))+ *(void *)(v180 + 72) * v133, MEMORY[0x1E4F40FA8]);
      if (!--v109)
      {
        swift_bridgeObjectRelease();
        break;
      }
    }
  }
  swift_bridgeObjectRelease();
  uint64_t v134 = swift_allocObject();
  *(void *)(v134 + 16) = v110;
  *(void *)&v197 = v134;
  *((void *)&v197 + 1) = 0x4000000D00000000;
  *(void *)&v198 = v215;
  BYTE10(v198) = v217;
  WORD4(v198) = v216;
  if (v174 == 1)
  {
    uint64_t v135 = v168;
    uint64_t v136 = *v168;
    swift_bridgeObjectRetain();
  }
  else
  {
    uint64_t v137 = (long long *)AGGraphGetValue();
    uint64_t v138 = v137[1];
    v205 = *v137;
    *(_OWORD *)v206 = v138;
    uint64_t v139 = swift_bridgeObjectRetain();
    MEMORY[0x18C114450](v139);
    uint64_t v136 = 0;
    uint64_t v135 = v168;
  }
  LODWORD(v188) = v136;
  *(void *)&v189 = v165;
  DisplayList.Item.init(_:frame:identity:version:)();
  LODWORD(v187) = *((unsigned __int8 *)v135 + 24);
  LOBYTE(v197) = v187;
  DisplayList.Item.canonicalize(options:)();
  v140 = v207;
  uint64_t v141 = v208;
  uint64_t v142 = (unsigned __int16)v209 | (BYTE2(v209) << 16);
  v197 = v205;
  v198 = *(_OWORD *)v206;
  v199 = *(void *)&v206[16];
  v200 = v207;
  v201 = v208;
  v203 = BYTE2(v209);
  v202 = v209;
  v204 = HIDWORD(v209);
  outlined copy of DisplayList.Item.Value(v207, v208);
  DisplayList.init(_:)();
  swift_bridgeObjectRelease();
  unint64_t v143 = v189;
  uint64_t v144 = WORD4(v189);
  uint64_t v145 = BYTE10(v189);
  v146 = v174;
  if (v174 == 1)
  {
    uint64_t result = outlined consume of DisplayList.Item.Value(v140, v141);
  }
  else
  {
    uint64_t v147 = swift_allocObject();
    LODWORD(v186) = v142;
    v148 = (void *)v147;
    uint64_t v149 = *v135;
    uint64_t v150 = (long long *)AGGraphGetValue();
    v151 = v150[1];
    v197 = *v150;
    v198 = v151;
    swift_bridgeObjectRetain();
    *(void *)&v185 = v141;
    uint64_t v152 = v166;
    outlined copy of AccessibilityArchivableViewAttachment?(v166, 0, 0, v146);
    outlined copy of Environment<AppIntentExecutor?>.Content(v152, 0, 0);
    Swift::Int v153 = swift_bridgeObjectRetain();
    uint64_t v184 = v140;
    uint64_t v154 = MEMORY[0x18C114450](v153);
    int64_t v156 = v155;
    v148[5] = &type metadata for ArchivableAccessibilityViewModifier.Factory;
    v148[6] = lazy protocol witness table accessor for type ArchivableAccessibilityViewModifier.Factory and conformance ArchivableAccessibilityViewModifier.Factory();
    int v157 = swift_allocObject();
    v148[2] = v157;
    *(void *)(v157 + 16) = v152;
    *(void *)(v157 + 24) = 0;
    *(unsigned char *)(v157 + 32) = 0;
    *(void *)(v157 + 40) = v146;
    *(_DWORD *)(v157 + 48) = v149;
    *(double *)(v157 + 56) = v154;
    *(void *)(v157 + 64) = v156;
    *(void *)&v189 = v148;
    *((void *)&v189 + 1) = 0x4000000C00000000;
    *(void *)&v190 = v143;
    BYTE10(v190) = v145;
    WORD4(v190) = v144;
    LODWORD(v210) = v149;
    *(void *)&v188 = v165;
    swift_retain();
    DisplayList.Item.init(_:frame:identity:version:)();
    LOBYTE(v189) = v187;
    DisplayList.Item.canonicalize(options:)();
    uint64_t v158 = v200;
    uint64_t v159 = v201;
    v189 = v197;
    v190 = v198;
    v191 = v199;
    v192 = v200;
    v193 = v201;
    v195 = v203;
    v194 = v202;
    v196 = v204;
    outlined copy of DisplayList.Item.Value(v200, v201);
    DisplayList.init(_:)();
    swift_release();
    outlined consume of Environment<AppIntentExecutor?>.Content(v152, 0, 0);
    swift_bridgeObjectRelease();
    outlined consume of AccessibilityArchivableViewAttachment?(v152, 0, 0, v146);
    outlined consume of DisplayList.Item.Value(v158, v159);
    outlined consume of DisplayList.Item.Value(v184, v185);
    uint64_t result = swift_bridgeObjectRelease();
    unint64_t v143 = v188;
    uint64_t v144 = WORD4(v188);
    uint64_t v145 = BYTE10(v188);
  }
  uint64_t v160 = v164;
  *uint64_t v164 = v143;
  *((_WORD *)v160 + 4) = v144;
  *((unsigned char *)v160 + 10) = v145;
  return result;
}

{
  int *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t KeyPath;
  uint64_t Value;
  unsigned __int16 v11;
  char v12;
  int *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t result;
  unsigned __int16 v20;
  char v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t (*v26)(uint64_t);
  int64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t *v35;
  uint64_t v36;
  void *v37;
  id v38;
  uint64_t v39;
  id v40;
  void *v41;
  void *v42;
  void *v43;
  id v44;
  id v45;
  long long v46;
  void *v47;
  uint64_t v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  id v54;
  void *v55;
  char *v56;
  id v57;
  unint64_t v58;
  unint64_t v59;
  char *v60;
  char *v61;
  void *v62;
  void *v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  id v67;
  void *v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t v71;
  int *v72;
  long long *v73;
  long long v74;
  CGFloat v75;
  double v76;
  CGFloat v77;
  uint64_t v78;
  uint64_t *v79;
  uint64_t v80;
  void *v81;
  uint64_t *v82;
  uint64_t v83;
  unint64_t v84;
  char v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  void (*v89)(long long *__return_ptr, uint64_t, uint64_t);
  id v90;
  id v91;
  int v92;
  uint64_t v93;
  uint64_t v94;
  void *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  __int16 v99;
  char v100;
  uint64_t v101;
  unint64_t v102;
  unint64_t v103;
  long long v104;
  char *v105;
  uint64_t v106;
  char *isUniquelyReferenced_nonNull_native;
  uint64_t v108;
  BOOL v109;
  uint64_t v110;
  int64_t v111;
  char v112;
  uint64_t v113;
  int64_t v114;
  uint64_t v115;
  void **v116;
  void *v117;
  uint64_t v118;
  unint64_t v119;
  char v120;
  uint64_t v121;
  uint64_t v122;
  id v123;
  id v124;
  uint64_t v125;
  id v126;
  id v127;
  uint64_t (*v128)(void, uint64_t);
  uint64_t v129;
  uint64_t v130;
  char v131;
  char v132;
  uint64_t *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  unint64_t v137;
  unint64_t v138;
  uint64_t v139;
  uint64_t v140;
  int *v141;
  int v142;
  long long *v143;
  long long v144;
  uint64_t v145;
  uint64_t v146;
  unint64_t v147;
  uint64_t v148;
  __int16 v149;
  char v150;
  uint64_t v151;
  uint64_t v152;
  void *v153;
  int v154;
  long long *v155;
  long long v156;
  uint64_t v157;
  uint64_t v158;
  double v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  unint64_t v164;
  void *v165;
  void v166[2];
  int v167;
  int v168;
  void *v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  int *v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  id v182;
  int v183;
  int v184;
  uint64_t v185;
  uint64_t v186;
  int v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  long long v191;
  long long v192;
  long long v193;
  long long v194;
  long long v195;
  long long v196;
  uint64_t v197;
  uint64_t v198;
  long long v199;
  __int16 v200;
  char v201;
  int v202;
  long long v203;
  long long v204;
  uint64_t v205;
  uint64_t v206;
  long long v207;
  __int16 v208;
  char v209;
  int v210;
  long long v211;
  unsigned char v212[24];
  uint64_t v213;
  long long v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  unsigned __int16 v219;
  char v220;
  long long v221;

  uint64_t v4 = type metadata accessor for AccessibilityNodeAttachment();
  v185 = *(void *)(v4 - 8);
  v186 = v4;
  MEMORY[0x1F4188790](v4);
  uint64_t v6 = (uint64_t)v166 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v7);
  v189 = (uint64_t)v166 - v8;
  uint64_t v173 = v1;
  LODWORD(KeyPath) = *MEMORY[0x1E4F4E7A0];
  if (v1[12] == *MEMORY[0x1E4F4E7A0])
  {
    DisplayList.init()();
  }
  else
  {
    uint64_t Value = AGGraphGetValue();
    char v11 = *(_WORD *)(Value + 8);
    uint64_t v12 = *(unsigned char *)(Value + 10);
    v218 = *(void *)Value;
    v219 = v11;
    v220 = v12;
    swift_bridgeObjectRetain();
  }
  uint64_t v13 = v173;
  unint64_t v14 = MEMORY[0x1E4FBC860];
  uint64_t v15 = MEMORY[0x1E4FBC860];
  if (v173[14] != KeyPath)
  {
    uint64_t v15 = *(void *)AGGraphGetValue();
    swift_bridgeObjectRetain();
    uint64_t v13 = v173;
  }
  uint64_t v184 = v13[11];
  v211 = *(_OWORD *)AGGraphGetValue();
  if ((EnvironmentValues.accessibilityEnabled.getter() & 1) == 0)
  {
    uint64_t result = swift_bridgeObjectRelease();
    uint64_t v20 = v219;
    int v21 = v220;
    *(void *)a1 = v218;
    *(_WORD *)(a1 + 8) = v20;
    *(unsigned char *)(a1 + 10) = v21;
    return result;
  }
  uint64_t v169 = (void *)a1;
  v217 = v14;
  uint64_t v16 = (unint64_t)v15 >> 62;
  if ((unint64_t)v15 >> 62) {
    goto LABEL_168;
  }
  uint64_t v17 = *(void *)((v15 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    int v18 = v173[7];
    if (v17)
    {
      v187 = 0;
    }
    else
    {
      uint64_t v22 = AGGraphGetValue();
      v187 = 0;
      if (!*(void *)(v22 + 8)) {
        v187 = (v219 >> 1) & 1;
      }
    }
    LODWORD(v193) = v18;
    int v23 = (uint64_t *)AGGraphGetValue();
    uint64_t v25 = *v23;
    uint64_t v24 = v23[1];
    uint64_t v180 = v6;
    if (v24)
    {
      int v26 = *(uint64_t (**)(uint64_t))(*(void *)v24 + 80);
      uint64_t v2 = *(void *)v24 + 80;
      swift_retain();
      swift_retain_n();
      a1 = v26(v15);
      swift_release();
      swift_release_n();
      goto LABEL_16;
    }
    if (v16)
    {
      swift_bridgeObjectRetain();
      swift_retain();
      uint64_t v24 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (!v24)
      {
LABEL_76:
        swift_beginAccess();
        uint64_t v66 = *(void *)(v25 + 24);
        *(void *)&v211 = *(void *)(v25 + 16);
        *((void *)&v211 + 1) = v66;
        uint64_t v24 = AccessibilityAttachment.isEmpty.getter();
        swift_release();
        a1 = v24 ^ 1;
LABEL_16:
        int v27 = v193;
        if ((a1 | v187)) {
          goto LABEL_22;
        }
        goto LABEL_26;
      }
    }
    else
    {
      uint64_t v24 = *(void *)((v15 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_retain();
      if (!v24) {
        goto LABEL_76;
      }
    }
    swift_release();
    int v27 = v193;
    if (v187)
    {
      LODWORD(a1) = 0;
LABEL_22:
      uint64_t v168 = a1;
      __int16 v28 = (void *)AGGraphGetValue();
      char v29 = v28[1];
      *(void *)&v203 = *v28;
      *((void *)&v203 + 1) = v29;
      swift_retain();
      swift_retain();
      AccessibilityAttachmentModifier.initialAttachment(for:)(v15, (uint64_t *)&v211);
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      if (v173[13] != KeyPath)
      {
        int v30 = AGGraphGetValue();
        uint64_t v32 = *(void *)v30;
        uint64_t v31 = *(void **)(v30 + 8);
        if (!*(unsigned char *)(v30 + 16))
        {
          uint64_t v67 = v31;
          swift_bridgeObjectRetain();
          uint64_t v172 = 0;
LABEL_79:
          *(void *)&v203 = v32;
          AccessibilityProperties.merge(with:)((uint64_t *)&v203);
          v203 = v211;
          long long v68 = (void *)AccessibilityAttachment.platformElement.getter();

          if (!v68)
          {
            *(void *)&v203 = v32;
            *((void *)&v203 + 1) = v31;
            if (AccessibilityAttachment.platformElement.getter()) {
              AccessibilityAttachment.platformElement.setter();
            }
          }
          swift_bridgeObjectRelease();

LABEL_83:
          uint64_t v2 = *((void *)&v211 + 1);
          uint64_t v24 = v211;
          int v27 = (int64_t)*((id *)&v211 + 1);
          swift_bridgeObjectRetain();
          a1 = MEMORY[0x1E4FBC860];
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            goto LABEL_172;
          }
          goto LABEL_84;
        }
        if (*(unsigned char *)(v30 + 16) == 1)
        {
          uint64_t v33 = swift_bridgeObjectRetain();
          uint64_t v34 = specialized Sequence.compactMap<A>(_:)(v33);
          uint64_t v172 = 0;
          static AccessibilityAttachment.combine(_:)(v34, (uint64_t *)&v203);
          swift_bridgeObjectRelease();
          outlined consume of AccessibilityAttachment.Tree(v32, v31, 1);
          uint64_t v31 = (void *)*((void *)&v203 + 1);
          uint64_t v32 = v203;
          goto LABEL_79;
        }
      }
      uint64_t v172 = 0;
      goto LABEL_83;
    }
LABEL_26:
    if (AGGraphGetCurrentAttribute() == KeyPath) {
      goto LABEL_170;
    }
    AccessibilityAttachmentToken.init<A>(_:)();
    v188 = v211;
    v183 = BYTE8(v211);
    if (v16)
    {
      if (v15 < 0) {
        uint64_t v24 = v15;
      }
      else {
        uint64_t v24 = v15 & 0xFFFFFFFFFFFFFF8;
      }
      swift_bridgeObjectRetain();
      uint64_t v6 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v6 < 0) {
        goto LABEL_171;
      }
    }
    else
    {
      uint64_t v6 = *(void *)((v15 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    if (!v6)
    {
      swift_bridgeObjectRelease();
      uint64_t v168 = 0;
      uint64_t v172 = 0;
      uint64_t v6 = v180;
      goto LABEL_87;
    }
    *(void *)&v192 = v17;
    uint64_t v172 = 0;
    uint64_t v16 = v173[13];
    v190 = v15;
    v181 = v15 & 0xFFFFFFFFFFFFFF8;
    int64_t v182 = (id)(v15 & 0xC000000000000001);
    LODWORD(v191) = KeyPath;
LABEL_38:
    uint64_t v35 = (uint64_t *)AGGraphGetValue();
    uint64_t v15 = *v35;
    uint64_t v2 = v35[1];
    swift_beginAccess();
    unsigned int v36 = *(void *)(v15 + 16);
    unint64_t v37 = *(void **)(v15 + 24);
    *(void *)&v203 = v36;
    *((void *)&v203 + 1) = v37;
    if (!v2)
    {
      uint64_t v44 = v37;
      swift_bridgeObjectRetain();
      goto LABEL_54;
    }
    if ((void)v192 != 1)
    {
      int v45 = v37;
      swift_retain_n();
      swift_retain();
      swift_bridgeObjectRetain();
      goto LABEL_48;
    }
    *(void *)&v195 = v188;
    BYTE8(v195) = v183;
    a1 = *(void *)(*(void *)v2 + 120);
    uint64_t KeyPath = *(void *)v2 + 120;
    char v38 = v37;
    swift_retain_n();
    swift_retain();
    swift_bridgeObjectRetain();
    unint64_t v39 = v190;
    ((void (*)(long long *__return_ptr, long long *, uint64_t))a1)(&v221, &v195, v190);
    swift_release();
    if ((v221 & 0x40) != 0) {
      goto LABEL_48;
    }
    if (v182) {
      break;
    }
    if (*(void *)(v181 + 16))
    {
      uint64_t v40 = *(id *)(v39 + 32);
      goto LABEL_44;
    }
LABEL_166:
    __break(1u);
LABEL_167:
    __break(1u);
LABEL_168:
    swift_bridgeObjectRetain();
    uint64_t v17 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  uint64_t v40 = (id)MEMORY[0x18C117680](0, v39);
LABEL_44:
  uint64_t v41 = v40;
  AccessibilityNode.platformElement.getter();
  int v43 = v42;

  if (v43)
  {

LABEL_48:
    AccessibilityAttachment.init()();
    goto LABEL_49;
  }
  if (v182)
  {
    swift_retain();
    id v61 = (char *)MEMORY[0x18C117680](0, v39);
  }
  else
  {
    uint64_t v62 = *(void **)(v39 + 32);
    swift_retain();
    id v61 = v62;
  }
  unint64_t v63 = v61;
  unint64_t v64 = &v61[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_children];
  swift_beginAccess();
  uint64_t v65 = *(void *)v64;
  swift_bridgeObjectRetain();

  (*(void (**)(long long *__return_ptr, uint64_t))(*(void *)v2 + 88))(&v211, v65);
  swift_release();
  swift_bridgeObjectRelease();
LABEL_49:
  uint64_t v46 = v211;
  *(void *)&v195 = v211;
  AccessibilityProperties.merge(with:)((uint64_t *)&v195);
  unint64_t v37 = (void *)*((void *)&v203 + 1);
  unsigned int v36 = v203;
  v195 = v203;
  uint64_t v47 = (void *)AccessibilityAttachment.platformElement.getter();

  if (v47 || (v195 = v46, !AccessibilityAttachment.platformElement.getter()))
  {
    swift_release();
    swift_bridgeObjectRelease();
    swift_release_n();
  }
  else
  {
    AccessibilityAttachment.platformElement.setter();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release_n();

    unint64_t v37 = (void *)*((void *)&v203 + 1);
    unsigned int v36 = v203;
  }
  LODWORD(KeyPath) = v191;
LABEL_54:
  *(void *)&v211 = v36;
  *((void *)&v211 + 1) = v37;
  if (v16 == KeyPath) {
    goto LABEL_63;
  }
  uint64_t v48 = AGGraphGetValue();
  id v50 = *(void *)v48;
  int v49 = *(void **)(v48 + 8);
  if (*(unsigned char *)(v48 + 16))
  {
    if (*(unsigned char *)(v48 + 16) != 1) {
      goto LABEL_63;
    }
    uint64_t v51 = swift_bridgeObjectRetain();
    long long v52 = v172;
    int v53 = specialized Sequence.compactMap<A>(_:)(v51);
    uint64_t v172 = v52;
    static AccessibilityAttachment.combine(_:)(v53, (uint64_t *)&v203);
    swift_bridgeObjectRelease();
    outlined consume of AccessibilityAttachment.Tree(v50, v49, 1);
    int v49 = (void *)*((void *)&v203 + 1);
    id v50 = v203;
  }
  else
  {
    id v54 = v49;
    swift_bridgeObjectRetain();
  }
  *(void *)&v203 = v50;
  AccessibilityProperties.merge(with:)((uint64_t *)&v203);
  unint64_t v37 = (void *)*((void *)&v211 + 1);
  unsigned int v36 = v211;
  v203 = v211;
  unint64_t v55 = (void *)AccessibilityAttachment.platformElement.getter();

  if (v55 || (*(void *)&v203 = v50, *((void *)&v203 + 1) = v49, !AccessibilityAttachment.platformElement.getter()))
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    AccessibilityAttachment.platformElement.setter();
    swift_bridgeObjectRelease();

    unint64_t v37 = (void *)*((void *)&v211 + 1);
    unsigned int v36 = v211;
  }
LABEL_63:
  *(void *)&v203 = v36;
  *((void *)&v203 + 1) = v37;
  if (AccessibilityAttachment.isEmpty.getter())
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v56 = (char *)v217;
    unsigned int v57 = v37;
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v56 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v56 + 2) + 1, 1, v56);
    }
    uint64_t v59 = *((void *)v56 + 2);
    uint64_t v58 = *((void *)v56 + 3);
    if (v59 >= v58 >> 1) {
      uint64_t v56 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v58 > 1), v59 + 1, 1, v56);
    }
    *((void *)v56 + 2) = v59 + 1;
    unsigned int v60 = &v56[16 * v59];
    *((void *)v60 + 4) = v36;
    *((void *)v60 + 5) = v37;

    swift_bridgeObjectRelease();
    v217 = (uint64_t)v56;
  }
  if (--v6) {
    goto LABEL_38;
  }
  swift_bridgeObjectRelease();
  uint64_t v168 = 0;
  uint64_t v6 = v180;
LABEL_87:
  while (1)
  {
    uint64_t v72 = v173;
    v211 = *(_OWORD *)AGGraphGetValue();
    MEMORY[0x18C10C240]();
    v211 = *(_OWORD *)AGGraphGetValue();
    MEMORY[0x18C10C240]();
    v167 = v72[8];
    uint64_t v73 = (long long *)AGGraphGetValue();
    int v74 = v73[1];
    v211 = *v73;
    *(_OWORD *)v212 = v74;
    char v75 = MEMORY[0x18C114450]();
    uint64_t v77 = v76;
    DisplayList.Version.init(forUpdate:)();
    v183 = *((unsigned __int8 *)v72 + 4);
    uint64_t v170 = v211;
    if ((v183 & 1) == 0) {
      break;
    }
    unint64_t v176 = *(void *)(v217 + 16);
    if (!v176) {
      break;
    }
    uint64_t v175 = v217 + 32;
    v166[1] = v217;
    swift_bridgeObjectRetain_n();
    unint64_t v78 = 0;
    uint64_t v171 = 0;
    uint64_t v16 = 1;
    char v174 = MEMORY[0x1E4FBC840] + 8;
    while (1)
    {
      char v79 = (uint64_t *)(v175 + 16 * v78);
      uint64_t v80 = *v79;
      uint64_t v81 = (void *)v79[1];
      unint64_t v82 = (uint64_t *)AGGraphGetValue();
      uint64_t v2 = *v82;
      v190 = v82[1];
      uint64_t KeyPath = swift_getKeyPath();
      uint64_t v83 = *(void *)(v80 + 16);
      v188 = v80;
      v181 = v78;
      if (!v83) {
        goto LABEL_96;
      }
      BOOL v84 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&type metadata for AccessibilityProperties.ActionsKey);
      if (v85)
      {
        outlined init with copy of TableColumnList(*(void *)(v80 + 56) + 40 * v84, (uint64_t)&v211);
        unint64_t v86 = *(void *)&v212[8];
        long long v87 = *(void *)&v212[16];
        __swift_project_boxed_opaque_existential_1(&v211, *(uint64_t *)&v212[8]);
        uint64_t v88 = v16;
        int v89 = *(void (**)(long long *__return_ptr, uint64_t, uint64_t))(v87 + 8);
        swift_retain();
        swift_retain();
        swift_bridgeObjectRetain_n();
        int v90 = v81;
        swift_retain();
        v89(&v203, v86, v87);
        uint64_t v16 = v88;
        unint64_t v78 = v181;
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v211);
      }
      else
      {
LABEL_96:
        v203 = 0u;
        v204 = 0u;
        swift_retain();
        swift_retain();
        swift_bridgeObjectRetain_n();
        int v91 = v81;
        swift_retain();
      }
      _sSay7SwiftUI25_LazyLayout_PlacedSubviewVGMaTm_2(0, (unint64_t *)&lazy cache variable for type metadata for Any?, v174, MEMORY[0x1E4FBB718]);
      _sSay7SwiftUI25_LazyLayout_PlacedSubviewVGMaTm_2(0, (unint64_t *)&lazy cache variable for type metadata for [AnyAccessibilityAction], (uint64_t)&type metadata for AnyAccessibilityAction, MEMORY[0x1E4FBB320]);
      int v92 = swift_dynamicCast();
      int64_t v182 = v81;
      if (v92)
      {
        int v93 = v211;
      }
      else
      {
        *(void *)&v211 = 0;
        if (one-time initialization token for defaultValue != -1) {
          swift_once();
        }
        int v93 = static AccessibilityProperties.ActionsKey.defaultValue;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
      }
      swift_bridgeObjectRelease();
      int v94 = *(void *)(v93 + 16);
      if (v94)
      {
        uint64_t v178 = KeyPath;
        uint64_t v179 = v16;
        int v95 = (void *)(v93 + 32);
        v177 = v93;
        swift_bridgeObjectRetain();
        uint64_t v15 = MEMORY[0x1E4FBC860];
        do
        {
          uint64_t v98 = v95[3];
          uint64_t v97 = v95[4];
          __swift_project_boxed_opaque_existential_1(v95, v98);
          *(void *)&v203 = v2;
          *((void *)&v203 + 1) = v190;
          (*(void (**)(long long *__return_ptr, long long *, uint64_t, uint64_t))(v97 + 96))(&v211, &v203, v98, v97);
          if ((void)v214)
          {
            v193 = v214;
            unint64_t v99 = *(_WORD *)v212;
            v191 = v211;
            v192 = *(_OWORD *)&v212[8];
            long long v100 = v213;
            uint64_t v101 = v215;
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              uint64_t v15 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v15 + 16) + 1, 1, (char *)v15);
            }
            int v103 = *(void *)(v15 + 16);
            int v102 = *(void *)(v15 + 24);
            int v104 = v193;
            if (v103 >= v102 >> 1)
            {
              int v105 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v102 > 1), v103 + 1, 1, (char *)v15);
              int v104 = v193;
              uint64_t v15 = (uint64_t)v105;
            }
            *(void *)(v15 + 16) = v103 + 1;
            uint64_t v96 = v15 + 72 * v103;
            *(_OWORD *)(v96 + 32) = v191;
            *(_WORD *)(v96 + 48) = v99;
            *(_OWORD *)(v96 + 56) = v192;
            *(unsigned char *)(v96 + 72) = v100 & 1;
            *(_OWORD *)(v96 + 80) = v104;
            *(void *)(v96 + 96) = v101;
          }
          v95 += 6;
          --v94;
        }
        while (v94);
        swift_bridgeObjectRelease();
        uint64_t KeyPath = v178;
        uint64_t v16 = v179;
        unint64_t v78 = v181;
      }
      else
      {
        uint64_t v15 = MEMORY[0x1E4FBC860];
      }
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
      int v106 = *(void *)(v15 + 16);
      swift_release();
      uint64_t v6 = v180;
      if (v106) {
        break;
      }
      swift_bridgeObjectRelease();
      swift_release();
      swift_bridgeObjectRelease();
LABEL_91:

LABEL_92:
      if (++v78 == v176)
      {
        swift_bridgeObjectRelease_n();
        goto LABEL_135;
      }
    }
    if (!v16)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_132;
    }
    if (v16 == 1)
    {
      swift_bridgeObjectRelease();

      uint64_t v171 = KeyPath;
      uint64_t v16 = v15;
      goto LABEL_92;
    }
    uint64_t v24 = *(void *)(v15 + 16);
    int v27 = *(void *)(v16 + 16);
    a1 = v27 + v24;
    if (__OFADD__(v27, v24))
    {
      __break(1u);
LABEL_165:
      __break(1u);
      goto LABEL_166;
    }
    swift_bridgeObjectRetain();
    char isUniquelyReferenced_nonNull_native = (char *)swift_isUniquelyReferenced_nonNull_native();
    if (isUniquelyReferenced_nonNull_native && a1 <= *(void *)(v16 + 24) >> 1)
    {
      if (!*(void *)(v15 + 16)) {
        goto LABEL_130;
      }
    }
    else
    {
      if (v27 <= a1) {
        unint64_t v111 = v27 + v24;
      }
      else {
        unint64_t v111 = v27;
      }
      uint64_t v16 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v111, 1, (char *)v16);
      if (!*(void *)(v15 + 16))
      {
LABEL_130:
        if (v24) {
          goto LABEL_165;
        }
LABEL_131:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease_n();
LABEL_132:
        swift_release();
        goto LABEL_91;
      }
    }
    if ((*(void *)(v16 + 24) >> 1) - *(void *)(v16 + 16) < v24) {
      goto LABEL_167;
    }
    swift_arrayInitWithCopy();
    if (!v24) {
      goto LABEL_131;
    }
    int v108 = *(void *)(v16 + 16);
    uint64_t v109 = __OFADD__(v108, v24);
    uint64_t v110 = v108 + v24;
    if (!v109)
    {
      *(void *)(v16 + 16) = v110;
      goto LABEL_131;
    }
    __break(1u);
LABEL_170:
    __break(1u);
LABEL_171:
    __break(1u);
LABEL_172:
    a1 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(a1 + 16) + 1, 1, (char *)a1);
LABEL_84:
    double v70 = *(void *)(a1 + 16);
    CGFloat v69 = *(void *)(a1 + 24);
    if (v70 >= v69 >> 1) {
      a1 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v69 > 1), v70 + 1, 1, (char *)a1);
    }
    *(void *)(a1 + 16) = v70 + 1;
    CGFloat v71 = a1 + 16 * v70;
    *(void *)(v71 + 32) = v24;
    *(void *)(v71 + 40) = v2;

    swift_bridgeObjectRelease();
    v217 = a1;
  }
  uint64_t v171 = 0;
  uint64_t v16 = 1;
LABEL_135:
  uint64_t v179 = v16;
  if (v168) {
    BOOL v112 = 1;
  }
  else {
    BOOL v112 = specialized DisplayListTransform.mergeAttachments(list:attachments:frame:)(&v218, &v217, v75, v77);
  }
  unint64_t v113 = v217;
  int64_t v114 = *(void *)(v217 + 16);
  uint64_t v115 = MEMORY[0x1E4FBC860];
  if (v114)
  {
    v216 = MEMORY[0x1E4FBC860];
    swift_bridgeObjectRetain();
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v114, 0);
    v221 = *(_OWORD *)(v173 + 2);
    LODWORD(v193) = v112 & 1;
    v190 = v113;
    uint64_t v116 = (void **)(v113 + 40);
    *(void *)&v192 = MEMORY[0x1E4FBC840] + 8;
    while (1)
    {
      unint64_t v118 = (uint64_t)*(v116 - 1);
      unint64_t v117 = *v116;
      if (*(void *)(v118 + 16)
        && (uint64_t v119 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&type metadata for AccessibilityProperties.UIKitTraitsKey),
            (v120 & 1) != 0))
      {
        outlined init with copy of TableColumnList(*(void *)(v118 + 56) + 40 * v119, (uint64_t)&v211);
        uint64_t v121 = *(void *)&v212[8];
        uint64_t v122 = *(void *)&v212[16];
        __swift_project_boxed_opaque_existential_1(&v211, *(uint64_t *)&v212[8]);
        *(void *)&v191 = *(void *)(v122 + 8);
        uint64_t v123 = v117;
        swift_bridgeObjectRetain_n();
        int64_t v124 = v123;
        uint64_t v125 = v122;
        uint64_t v6 = v180;
        ((void (*)(long long *__return_ptr, uint64_t, uint64_t))v191)(&v203, v121, v125);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v211);
      }
      else
      {
        v203 = 0u;
        v204 = 0u;
        unint64_t v126 = v117;
        swift_bridgeObjectRetain_n();
        int64_t v127 = v126;
      }
      uint64_t v128 = (uint64_t (*)(void, uint64_t))MEMORY[0x1E4FBB718];
      _sSay7SwiftUI25_LazyLayout_PlacedSubviewVGMaTm_2(0, (unint64_t *)&lazy cache variable for type metadata for Any?, v192, MEMORY[0x1E4FBB718]);
      _sSay7SwiftUI25_LazyLayout_PlacedSubviewVGMaTm_2(0, &lazy cache variable for type metadata for AccessibilityUIKitTraits?, (uint64_t)&type metadata for AccessibilityUIKitTraits, v128);
      if (swift_dynamicCast())
      {
        v212[1] = 0;
        Swift::Int v130 = *((void *)&v211 + 1);
        uint64_t v129 = v211;
        uint64_t v131 = v212[0];
        swift_bridgeObjectRelease();
        if ((v131 & 1) == 0)
        {
          unint64_t v132 = 0;
          if ((v183 & 1) == 0) {
            goto LABEL_150;
          }
          goto LABEL_147;
        }
      }
      else
      {
        v211 = 0uLL;
        *(_WORD *)v212 = 256;
        swift_bridgeObjectRelease();
      }
      uint64_t v129 = 0;
      Swift::Int v130 = 0;
      unint64_t v132 = 1;
      if ((v183 & 1) == 0)
      {
LABEL_150:
        *(void *)uint64_t v6 = v118;
        *(void *)(v6 + 8) = v117;
        goto LABEL_151;
      }
LABEL_147:
      int64_t v133 = (uint64_t *)AGGraphGetValue();
      uint64_t v135 = *v133;
      uint64_t v134 = v133[1];
      *(void *)&v203 = v118;
      *((void *)&v203 + 1) = v117;
      v211 = 0u;
      *(_OWORD *)v212 = 0u;
      *(void *)&v212[16] = v129;
      v213 = v130;
      LOBYTE(v214) = v132;
      *(void *)&v195 = v135;
      *((void *)&v195 + 1) = v134;
      v194 = v221;
      swift_retain();
      swift_retain();
      CodableAccessibilityAttachmentStorage.init(_:platformStorage:in:idiom:)();
LABEL_151:
      type metadata accessor for AccessibilityNodeAttachment.Storage();
      swift_storeEnumTagMultiPayload();
      uint64_t v136 = v186;
      *(unsigned char *)(v6 + *(int *)(v186 + 20)) = v193;
      *(unsigned char *)(v6 + *(int *)(v136 + 24)) = v187;
      _s7SwiftUI27AccessibilityNodeAttachmentVWObTm_0(v6, v189, MEMORY[0x1E4F40FA8]);
      swift_bridgeObjectRelease();

      uint64_t v115 = v216;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v115 + 16) + 1, 1);
        uint64_t v115 = v216;
      }
      uint64_t v138 = *(void *)(v115 + 16);
      uint64_t v137 = *(void *)(v115 + 24);
      if (v138 >= v137 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v137 > 1, v138 + 1, 1);
        uint64_t v115 = v216;
      }
      v116 += 2;
      *(void *)(v115 + 16) = v138 + 1;
      _s7SwiftUI27AccessibilityNodeAttachmentVWObTm_0(v189, v115+ ((*(unsigned __int8 *)(v185 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v185 + 80))+ *(void *)(v185 + 72) * v138, MEMORY[0x1E4F40FA8]);
      if (!--v114)
      {
        swift_bridgeObjectRelease();
        break;
      }
    }
  }
  swift_bridgeObjectRelease();
  uint64_t v139 = swift_allocObject();
  *(void *)(v139 + 16) = v115;
  *(void *)&v203 = v139;
  *((void *)&v203 + 1) = 0x4000000D00000000;
  *(void *)&v204 = v218;
  BYTE10(v204) = v220;
  WORD4(v204) = v219;
  v140 = v170;
  if (v179 == 1)
  {
    uint64_t v141 = v173;
    uint64_t v142 = *v173;
    swift_bridgeObjectRetain();
  }
  else
  {
    unint64_t v143 = (long long *)AGGraphGetValue();
    uint64_t v144 = v143[1];
    v211 = *v143;
    *(_OWORD *)v212 = v144;
    uint64_t v145 = swift_bridgeObjectRetain();
    MEMORY[0x18C114450](v145);
    uint64_t v142 = 0;
    uint64_t v141 = v173;
  }
  LODWORD(v194) = v142;
  *(void *)&v195 = v140;
  DisplayList.Item.init(_:frame:identity:version:)();
  LODWORD(v192) = *((unsigned __int8 *)v141 + 24);
  LOBYTE(v203) = v192;
  DisplayList.Item.canonicalize(options:)();
  v146 = v213;
  uint64_t v147 = v214;
  v203 = v211;
  v204 = *(_OWORD *)v212;
  v205 = *(void *)&v212[16];
  v206 = v213;
  v207 = v214;
  v209 = BYTE2(v215);
  v208 = v215;
  v210 = HIDWORD(v215);
  LODWORD(v193) = (unsigned __int16)v215 | (BYTE2(v215) << 16);
  outlined copy of DisplayList.Item.Value(v213, v214);
  DisplayList.init(_:)();
  swift_bridgeObjectRelease();
  v148 = v195;
  uint64_t v149 = WORD4(v195);
  uint64_t v150 = BYTE10(v195);
  v151 = v179;
  if (v179 == 1)
  {
    uint64_t result = outlined consume of DisplayList.Item.Value(v146, v147);
  }
  else
  {
    uint64_t v152 = swift_allocObject();
    *(void *)&v191 = v147;
    Swift::Int v153 = (void *)v152;
    uint64_t v154 = *v141;
    unint64_t v155 = (long long *)AGGraphGetValue();
    int64_t v156 = v155[1];
    v203 = *v155;
    v204 = v156;
    swift_bridgeObjectRetain();
    int v157 = v171;
    outlined copy of AccessibilityArchivableViewAttachment?(v171, 0, 0, v151);
    outlined copy of Environment<AppIntentExecutor?>.Content(v157, 0, 0);
    uint64_t v158 = swift_bridgeObjectRetain();
    v190 = v146;
    uint64_t v159 = MEMORY[0x18C114450](v158);
    uint64_t v161 = v160;
    v153[5] = &type metadata for ArchivableAccessibilityViewModifier.Factory;
    v153[6] = lazy protocol witness table accessor for type ArchivableAccessibilityViewModifier.Factory and conformance ArchivableAccessibilityViewModifier.Factory();
    v162 = swift_allocObject();
    v153[2] = v162;
    *(void *)(v162 + 16) = v157;
    *(void *)(v162 + 24) = 0;
    *(unsigned char *)(v162 + 32) = 0;
    *(void *)(v162 + 40) = v151;
    *(_DWORD *)(v162 + 48) = v154;
    *(double *)(v162 + 56) = v159;
    *(void *)(v162 + 64) = v161;
    *(void *)&v195 = v153;
    *((void *)&v195 + 1) = 0x4000000C00000000;
    *(void *)&v196 = v148;
    BYTE10(v196) = v150;
    WORD4(v196) = v149;
    LODWORD(v216) = v154;
    *(void *)&v194 = v170;
    swift_retain();
    DisplayList.Item.init(_:frame:identity:version:)();
    LOBYTE(v195) = v192;
    DisplayList.Item.canonicalize(options:)();
    uint64_t v163 = v206;
    uint64_t v164 = v207;
    v195 = v203;
    v196 = v204;
    v197 = v205;
    v198 = v206;
    v199 = v207;
    v201 = v209;
    v200 = v208;
    v202 = v210;
    outlined copy of DisplayList.Item.Value(v206, v207);
    DisplayList.init(_:)();
    swift_release();
    outlined consume of Environment<AppIntentExecutor?>.Content(v157, 0, 0);
    swift_bridgeObjectRelease();
    outlined consume of AccessibilityArchivableViewAttachment?(v157, 0, 0, v151);
    outlined consume of DisplayList.Item.Value(v163, v164);
    outlined consume of DisplayList.Item.Value(v190, v191);
    uint64_t result = swift_bridgeObjectRelease();
    v148 = v194;
    uint64_t v149 = WORD4(v194);
    uint64_t v150 = BYTE10(v194);
  }
  v165 = v169;
  *uint64_t v169 = v148;
  *((_WORD *)v165 + 4) = v149;
  *((unsigned char *)v165 + 10) = v150;
  return result;
}

{
  int *v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t Value;
  __int16 v10;
  char v11;
  int *v12;
  uint64_t v13;
  unint64_t v14;
  int64_t v15;
  uint64_t result;
  uint64_t v17;
  __int16 v18;
  char v19;
  uint64_t v20;
  int v21;
  char *v22;
  int v23;
  id v24;
  void *v25;
  char *v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  id v33;
  void *v34;
  long long v35;
  id v36;
  unint64_t v37;
  unint64_t v38;
  char *v39;
  int *v40;
  long long *v41;
  long long v42;
  CGFloat v43;
  double v44;
  CGFloat v45;
  void *v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  char **v50;
  uint64_t KeyPath;
  uint64_t v52;
  unint64_t v53;
  char v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  void (*v59)(long long *__return_ptr, uint64_t, uint64_t);
  id v60;
  uint64_t v61;
  id v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  void *v66;
  char *v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  __int16 v71;
  char v72;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  long long v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char *isUniquelyReferenced_nonNull_native;
  uint64_t v82;
  BOOL v83;
  uint64_t v84;
  int64_t v85;
  char v86;
  uint64_t v87;
  int64_t v88;
  uint64_t v89;
  char v90;
  void **v91;
  void *v92;
  uint64_t v93;
  unint64_t v94;
  char v95;
  uint64_t v96;
  uint64_t v97;
  id v98;
  id v99;
  uint64_t v100;
  id v101;
  id v102;
  uint64_t (*v103)(void, uint64_t);
  uint64_t v104;
  uint64_t v105;
  char v106;
  char v107;
  uint64_t *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  unint64_t v113;
  uint64_t v114;
  int *v115;
  int v116;
  long long *v117;
  long long v118;
  uint64_t v119;
  uint64_t v120;
  unint64_t v121;
  int v122;
  uint64_t v123;
  __int16 v124;
  char v125;
  uint64_t v126;
  uint64_t v127;
  void *v128;
  int v129;
  long long *v130;
  long long v131;
  uint64_t v132;
  uint64_t v133;
  double v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  unint64_t v139;
  void *v140;
  char *v141;
  int v142;
  void *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  int *v147;
  uint64_t v148;
  char *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  void *v153;
  uint64_t v154;
  int v155;
  int v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  id v161;
  uint64_t v162;
  char *v163;
  long long v164;
  long long v165;
  long long v166;
  long long v167;
  long long v168;
  long long v169;
  uint64_t v170;
  uint64_t v171;
  long long v172;
  __int16 v173;
  char v174;
  int v175;
  long long v176;
  long long v177;
  uint64_t v178;
  uint64_t v179;
  long long v180;
  __int16 v181;
  char v182;
  int v183;
  long long v184;
  unsigned char v185[24];
  uint64_t v186;
  long long v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  __int16 v192;
  char v193;
  long long v194;

  uint64_t v3 = type metadata accessor for AccessibilityNodeAttachment();
  int v157 = *(void *)(v3 - 8);
  uint64_t v158 = v3;
  MEMORY[0x1F4188790](v3);
  long long v5 = (char *)&v141 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  v162 = (uint64_t)&v141 - v7;
  uint64_t v147 = v1;
  unint64_t v8 = v1[12];
  LODWORD(v166) = *MEMORY[0x1E4F4E7A0];
  if (v8 == v166)
  {
    DisplayList.init()();
  }
  else
  {
    uint64_t Value = AGGraphGetValue();
    __int16 v10 = *(_WORD *)(Value + 8);
    char v11 = *(unsigned char *)(Value + 10);
    v191 = *(void *)Value;
    v192 = v10;
    v193 = v11;
    swift_bridgeObjectRetain();
  }
  uint64_t v12 = v147;
  uint64_t v13 = MEMORY[0x1E4FBC860];
  unint64_t v14 = MEMORY[0x1E4FBC860];
  if (v147[14] != v166)
  {
    unint64_t v14 = *(void *)AGGraphGetValue();
    swift_bridgeObjectRetain();
    uint64_t v12 = v147;
  }
  int64_t v156 = v12[11];
  uint64_t v184 = *(_OWORD *)AGGraphGetValue();
  if ((EnvironmentValues.accessibilityEnabled.getter() & 1) == 0)
  {
    uint64_t result = swift_bridgeObjectRelease();
    int v18 = v192;
    uint64_t v19 = v193;
    *(void *)a1 = v191;
    *(_WORD *)(a1 + 8) = v18;
    *(unsigned char *)(a1 + 10) = v19;
    return result;
  }
  v190 = v13;
  uint64_t v15 = v14 >> 62;
  if (v14 >> 62) {
    goto LABEL_120;
  }
  while (1)
  {
    uint64_t result = AGGraphGetCurrentAttribute();
    if (result == v166)
    {
      __break(1u);
LABEL_122:
      __break(1u);
LABEL_123:
      __break(1u);
      return result;
    }
    Swift::Int v153 = v5;
    AccessibilityAttachmentToken.init<A>(_:)();
    if (v15)
    {
      swift_bridgeObjectRetain();
      uint64_t v17 = _CocoaArrayWrapper.endIndex.getter();
      uint64_t result = swift_bridgeObjectRelease();
      if (v17 < 0) {
        goto LABEL_122;
      }
    }
    else
    {
      uint64_t v17 = *(void *)((v14 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    unint64_t v143 = (void *)a1;
    if (v17)
    {
      uint64_t v20 = 0;
      v146 = 0;
      LODWORD(v165) = v147[7];
      int v21 = v147[13];
      *(void *)&uint64_t v164 = v14 & 0xC000000000000001;
      uint64_t v22 = (char *)MEMORY[0x1E4FBC860];
      while (1)
      {
        int v23 = *(_DWORD *)AGGraphGetValue();
        if ((void)v164) {
          uint64_t v24 = (id)MEMORY[0x18C117680](v20, v14);
        }
        else {
          uint64_t v24 = *(id *)(v14 + 8 * v20 + 32);
        }
        uint64_t v25 = v24;
        AccessibilityNode.visibility.getter((int *)&v184);

        if ((v184 & 4) != 0 || (v184 & 8) != 0 && (BYTE4(v184) & 4) == 0) {
          AccessibilityAttachment.init()();
        }
        else {
          AccessibilityGestureModifier.initialAttachment(for:)(v14, v23);
        }
        if (v21 == v166) {
          goto LABEL_35;
        }
        int v26 = v22;
        int v27 = AGGraphGetValue();
        char v29 = *(void *)v27;
        __int16 v28 = *(void **)(v27 + 8);
        if (!*(unsigned char *)(v27 + 16)) {
          break;
        }
        if (*(unsigned char *)(v27 + 16) == 1)
        {
          int v30 = swift_bridgeObjectRetain();
          uint64_t v31 = v146;
          uint64_t v32 = specialized Sequence.compactMap<A>(_:)(v30);
          v146 = v31;
          static AccessibilityAttachment.combine(_:)(v32, (uint64_t *)&v176);
          swift_bridgeObjectRelease();
          outlined consume of AccessibilityAttachment.Tree(v29, v28, 1);
          __int16 v28 = (void *)*((void *)&v176 + 1);
          char v29 = v176;
          goto LABEL_30;
        }
LABEL_34:
        uint64_t v22 = v26;
LABEL_35:
        uint64_t v35 = v184;
        unint64_t v176 = v184;
        if (AccessibilityAttachment.isEmpty.getter())
        {
          swift_bridgeObjectRelease();
        }
        else
        {
          unsigned int v36 = *((id *)&v35 + 1);
          swift_bridgeObjectRetain();
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v22 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v22 + 2) + 1, 1, v22);
          }
          char v38 = *((void *)v22 + 2);
          unint64_t v37 = *((void *)v22 + 3);
          unint64_t v39 = v22;
          if (v38 >= v37 >> 1) {
            unint64_t v39 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v37 > 1), v38 + 1, 1, v22);
          }
          *((void *)v39 + 2) = v38 + 1;
          uint64_t v22 = v39;
          *(_OWORD *)&v39[16 * v38 + 32] = v35;

          swift_bridgeObjectRelease();
          v190 = (uint64_t)v22;
        }
        if (v17 == ++v20) {
          goto LABEL_42;
        }
      }
      uint64_t v33 = v28;
      swift_bridgeObjectRetain();
LABEL_30:
      *(void *)&unint64_t v176 = v29;
      AccessibilityProperties.merge(with:)((uint64_t *)&v176);
      unint64_t v176 = v184;
      uint64_t v34 = (void *)AccessibilityAttachment.platformElement.getter();

      if (!v34)
      {
        *(void *)&unint64_t v176 = v29;
        *((void *)&v176 + 1) = v28;
        if (AccessibilityAttachment.platformElement.getter()) {
          AccessibilityAttachment.platformElement.setter();
        }
      }
      swift_bridgeObjectRelease();

      goto LABEL_34;
    }
    v146 = 0;
    uint64_t v22 = (char *)MEMORY[0x1E4FBC860];
LABEL_42:
    swift_bridgeObjectRelease();
    uint64_t v40 = v147;
    uint64_t v184 = *(_OWORD *)AGGraphGetValue();
    MEMORY[0x18C10C240]();
    uint64_t v184 = *(_OWORD *)AGGraphGetValue();
    MEMORY[0x18C10C240]();
    uint64_t v142 = v40[8];
    uint64_t v41 = (long long *)AGGraphGetValue();
    uint64_t v42 = v41[1];
    uint64_t v184 = *v41;
    *(_OWORD *)v185 = v42;
    int v43 = MEMORY[0x18C114450]();
    int v45 = v44;
    DisplayList.Version.init(forUpdate:)();
    unint64_t v155 = *((unsigned __int8 *)v40 + 4);
    uint64_t v144 = v184;
    if ((v155 & 1) == 0)
    {
      uint64_t v145 = 0;
      uint64_t v154 = 1;
      uint64_t v46 = v153;
      goto LABEL_91;
    }
    uint64_t v46 = v153;
    uint64_t v150 = *((void *)v22 + 2);
    if (!v150) {
      break;
    }
    uint64_t v149 = v22 + 32;
    uint64_t v141 = v22;
    swift_bridgeObjectRetain_n();
    uint64_t v47 = 0;
    uint64_t v145 = 0;
    a1 = 1;
    v148 = MEMORY[0x1E4FBC840] + 8;
    while (1)
    {
      uint64_t v48 = &v149[16 * v47];
      int v49 = *(void *)v48;
      uint64_t v161 = (id)*((void *)v48 + 1);
      id v50 = (char **)AGGraphGetValue();
      long long v5 = *v50;
      uint64_t v163 = v50[1];
      uint64_t KeyPath = swift_getKeyPath();
      long long v52 = *(void *)(v49 + 16);
      uint64_t v159 = KeyPath;
      uint64_t v160 = v49;
      if (!v52) {
        goto LABEL_52;
      }
      int v53 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&type metadata for AccessibilityProperties.ActionsKey);
      if (v54)
      {
        outlined init with copy of TableColumnList(*(void *)(v49 + 56) + 40 * v53, (uint64_t)&v184);
        unint64_t v55 = v47;
        uint64_t v56 = a1;
        unsigned int v57 = *(void *)&v185[8];
        uint64_t v58 = *(void *)&v185[16];
        __swift_project_boxed_opaque_existential_1(&v184, *(uint64_t *)&v185[8]);
        uint64_t v59 = *(void (**)(long long *__return_ptr, uint64_t, uint64_t))(v58 + 8);
        swift_retain();
        swift_retain();
        swift_bridgeObjectRetain_n();
        unsigned int v60 = v161;
        swift_retain();
        id v61 = v57;
        a1 = v56;
        uint64_t v47 = v55;
        v59(&v176, v61, v58);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v184);
      }
      else
      {
LABEL_52:
        unint64_t v176 = 0u;
        v177 = 0u;
        swift_retain();
        swift_retain();
        swift_bridgeObjectRetain_n();
        uint64_t v62 = v161;
        swift_retain();
      }
      _sSay7SwiftUI25_LazyLayout_PlacedSubviewVGMaTm_2(0, (unint64_t *)&lazy cache variable for type metadata for Any?, v148, MEMORY[0x1E4FBB718]);
      _sSay7SwiftUI25_LazyLayout_PlacedSubviewVGMaTm_2(0, (unint64_t *)&lazy cache variable for type metadata for [AnyAccessibilityAction], (uint64_t)&type metadata for AnyAccessibilityAction, MEMORY[0x1E4FBB320]);
      if (swift_dynamicCast())
      {
        unint64_t v63 = v184;
      }
      else
      {
        *(void *)&uint64_t v184 = 0;
        if (one-time initialization token for defaultValue != -1) {
          swift_once();
        }
        unint64_t v64 = static AccessibilityProperties.ActionsKey.defaultValue;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        unint64_t v63 = v64;
      }
      swift_bridgeObjectRelease();
      uint64_t v65 = *(void *)(v63 + 16);
      if (v65)
      {
        v151 = v63;
        uint64_t v152 = v47;
        uint64_t v154 = a1;
        uint64_t v66 = (void *)(v63 + 32);
        swift_bridgeObjectRetain();
        uint64_t v67 = (char *)MEMORY[0x1E4FBC860];
        do
        {
          CGFloat v69 = v66[3];
          double v70 = v66[4];
          __swift_project_boxed_opaque_existential_1(v66, v69);
          *(void *)&unint64_t v176 = v5;
          *((void *)&v176 + 1) = v163;
          (*(void (**)(long long *__return_ptr, long long *, uint64_t, uint64_t))(v70 + 96))(&v184, &v176, v69, v70);
          if ((void)v187)
          {
            v166 = v187;
            CGFloat v71 = *(_WORD *)v185;
            uint64_t v164 = v184;
            v165 = *(_OWORD *)&v185[8];
            uint64_t v72 = v186;
            uint64_t v73 = v188;
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              uint64_t v67 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v67 + 2) + 1, 1, v67);
            }
            char v75 = *((void *)v67 + 2);
            int v74 = *((void *)v67 + 3);
            unint64_t v76 = v166;
            if (v75 >= v74 >> 1)
            {
              uint64_t v77 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v74 > 1), v75 + 1, 1, v67);
              unint64_t v76 = v166;
              uint64_t v67 = v77;
            }
            *((void *)v67 + 2) = v75 + 1;
            long long v68 = &v67[72 * v75];
            *((_OWORD *)v68 + 2) = v164;
            *((_WORD *)v68 + 24) = v71;
            *(_OWORD *)(v68 + 56) = v165;
            v68[72] = v72 & 1;
            *((_OWORD *)v68 + 5) = v76;
            *((void *)v68 + 12) = v73;
          }
          v66 += 6;
          --v65;
        }
        while (v65);
        swift_bridgeObjectRelease();
        uint64_t v46 = v153;
        a1 = v154;
        uint64_t v47 = v152;
      }
      else
      {
        uint64_t v67 = (char *)MEMORY[0x1E4FBC860];
      }
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
      unint64_t v78 = *((void *)v67 + 2);
      char v79 = v159;
      swift_release();
      if (v78) {
        break;
      }
      swift_bridgeObjectRelease();
      swift_release();
      swift_bridgeObjectRelease();
LABEL_47:

LABEL_48:
      if (++v47 == v150)
      {
        uint64_t v154 = a1;
        swift_bridgeObjectRelease_n();
        goto LABEL_91;
      }
    }
    if (!a1)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_88:
      swift_release();
      goto LABEL_47;
    }
    if (a1 == 1)
    {
      swift_bridgeObjectRelease();

      uint64_t v145 = v79;
      a1 = (uint64_t)v67;
      goto LABEL_48;
    }
    uint64_t v80 = *((void *)v67 + 2);
    uint64_t v15 = *(void *)(a1 + 16);
    unint64_t v14 = v15 + v80;
    if (!__OFADD__(v15, v80))
    {
      swift_bridgeObjectRetain();
      char isUniquelyReferenced_nonNull_native = (char *)swift_isUniquelyReferenced_nonNull_native();
      if (isUniquelyReferenced_nonNull_native && (int64_t)v14 <= *(void *)(a1 + 24) >> 1)
      {
        if (*((void *)v67 + 2))
        {
LABEL_78:
          uint64_t v15 = v159;
          if ((*(void *)(a1 + 24) >> 1) - *(void *)(a1 + 16) < v80) {
            goto LABEL_119;
          }
          uint64_t result = swift_arrayInitWithCopy();
          if (v80)
          {
            unint64_t v82 = *(void *)(a1 + 16);
            uint64_t v83 = __OFADD__(v82, v80);
            BOOL v84 = v82 + v80;
            if (v83) {
              goto LABEL_123;
            }
            *(void *)(a1 + 16) = v84;
          }
LABEL_87:
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease_n();
          goto LABEL_88;
        }
      }
      else
      {
        if (v15 <= (uint64_t)v14) {
          uint64_t v85 = v15 + v80;
        }
        else {
          uint64_t v85 = v15;
        }
        a1 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v85, 1, (char *)a1);
        if (*((void *)v67 + 2)) {
          goto LABEL_78;
        }
      }
      uint64_t v15 = v159;
      if (v80) {
        goto LABEL_118;
      }
      goto LABEL_87;
    }
    __break(1u);
LABEL_118:
    __break(1u);
LABEL_119:
    __break(1u);
LABEL_120:
    swift_bridgeObjectRetain();
    _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  uint64_t v145 = 0;
  uint64_t v154 = 1;
LABEL_91:
  unint64_t v86 = specialized DisplayListTransform.mergeAttachments(list:attachments:frame:)(&v191, &v190, v43, v45);
  long long v87 = v190;
  uint64_t v88 = *(void *)(v190 + 16);
  int v89 = MEMORY[0x1E4FBC860];
  if (!v88) {
    goto LABEL_110;
  }
  int v90 = v86;
  v189 = MEMORY[0x1E4FBC860];
  swift_bridgeObjectRetain();
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v88, 0);
  v194 = *(_OWORD *)(v147 + 2);
  LODWORD(v166) = v90 & 1;
  uint64_t v163 = (char *)v87;
  int v91 = (void **)(v87 + 40);
  *(void *)&v165 = MEMORY[0x1E4FBC840] + 8;
  while (2)
  {
    int v93 = (uint64_t)*(v91 - 1);
    int v92 = *v91;
    if (*(void *)(v93 + 16)
      && (int v94 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&type metadata for AccessibilityProperties.UIKitTraitsKey),
          (v95 & 1) != 0))
    {
      outlined init with copy of TableColumnList(*(void *)(v93 + 56) + 40 * v94, (uint64_t)&v184);
      uint64_t v96 = *(void *)&v185[8];
      uint64_t v97 = *(void *)&v185[16];
      __swift_project_boxed_opaque_existential_1(&v184, *(uint64_t *)&v185[8]);
      *(void *)&uint64_t v164 = *(void *)(v97 + 8);
      uint64_t v98 = v92;
      swift_bridgeObjectRetain_n();
      unint64_t v99 = v98;
      long long v100 = v97;
      uint64_t v46 = v153;
      ((void (*)(long long *__return_ptr, uint64_t, uint64_t))v164)(&v176, v96, v100);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v184);
    }
    else
    {
      unint64_t v176 = 0u;
      v177 = 0u;
      uint64_t v101 = v92;
      swift_bridgeObjectRetain_n();
      int v102 = v101;
    }
    int v103 = (uint64_t (*)(void, uint64_t))MEMORY[0x1E4FBB718];
    _sSay7SwiftUI25_LazyLayout_PlacedSubviewVGMaTm_2(0, (unint64_t *)&lazy cache variable for type metadata for Any?, v165, MEMORY[0x1E4FBB718]);
    _sSay7SwiftUI25_LazyLayout_PlacedSubviewVGMaTm_2(0, &lazy cache variable for type metadata for AccessibilityUIKitTraits?, (uint64_t)&type metadata for AccessibilityUIKitTraits, v103);
    if (swift_dynamicCast())
    {
      v185[1] = 0;
      int v105 = *((void *)&v184 + 1);
      int v104 = v184;
      int v106 = v185[0];
      swift_bridgeObjectRelease();
      if ((v106 & 1) == 0)
      {
        int v107 = 0;
        if (v155) {
          goto LABEL_100;
        }
LABEL_103:
        *uint64_t v46 = v93;
        v46[1] = v92;
        goto LABEL_104;
      }
    }
    else
    {
      uint64_t v184 = 0uLL;
      *(_WORD *)v185 = 256;
      swift_bridgeObjectRelease();
    }
    int v104 = 0;
    int v105 = 0;
    int v107 = 1;
    if ((v155 & 1) == 0) {
      goto LABEL_103;
    }
LABEL_100:
    int v108 = (uint64_t *)AGGraphGetValue();
    uint64_t v110 = *v108;
    uint64_t v109 = v108[1];
    *(void *)&unint64_t v176 = v93;
    *((void *)&v176 + 1) = v92;
    uint64_t v184 = 0u;
    *(_OWORD *)v185 = 0u;
    *(void *)&v185[16] = v104;
    v186 = v105;
    LOBYTE(v187) = v107;
    *(void *)&uint64_t v168 = v110;
    *((void *)&v168 + 1) = v109;
    v167 = v194;
    swift_retain();
    swift_retain();
    CodableAccessibilityAttachmentStorage.init(_:platformStorage:in:idiom:)();
LABEL_104:
    type metadata accessor for AccessibilityNodeAttachment.Storage();
    swift_storeEnumTagMultiPayload();
    unint64_t v111 = v158;
    *((unsigned char *)v46 + *(int *)(v158 + 20)) = v166;
    *((unsigned char *)v46 + *(int *)(v111 + 24)) = 0;
    _s7SwiftUI27AccessibilityNodeAttachmentVWObTm_0((uint64_t)v46, v162, MEMORY[0x1E4F40FA8]);
    swift_bridgeObjectRelease();

    int v89 = v189;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v89 + 16) + 1, 1);
      int v89 = v189;
    }
    unint64_t v113 = *(void *)(v89 + 16);
    BOOL v112 = *(void *)(v89 + 24);
    if (v113 >= v112 >> 1)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v112 > 1, v113 + 1, 1);
      int v89 = v189;
    }
    v91 += 2;
    *(void *)(v89 + 16) = v113 + 1;
    _s7SwiftUI27AccessibilityNodeAttachmentVWObTm_0(v162, v89+ ((*(unsigned __int8 *)(v157 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v157 + 80))+ *(void *)(v157 + 72) * v113, MEMORY[0x1E4F40FA8]);
    if (--v88) {
      continue;
    }
    break;
  }
  swift_bridgeObjectRelease();
LABEL_110:
  swift_bridgeObjectRelease();
  int64_t v114 = swift_allocObject();
  *(void *)(v114 + 16) = v89;
  *(void *)&unint64_t v176 = v114;
  *((void *)&v176 + 1) = 0x4000000D00000000;
  *(void *)&v177 = v191;
  BYTE10(v177) = v193;
  WORD4(v177) = v192;
  if (v154 == 1)
  {
    uint64_t v115 = v147;
    uint64_t v116 = *v147;
    swift_bridgeObjectRetain();
  }
  else
  {
    unint64_t v117 = (long long *)AGGraphGetValue();
    unint64_t v118 = v117[1];
    uint64_t v184 = *v117;
    *(_OWORD *)v185 = v118;
    uint64_t v119 = swift_bridgeObjectRetain();
    MEMORY[0x18C114450](v119);
    uint64_t v116 = 0;
    uint64_t v115 = v147;
  }
  LODWORD(v167) = v116;
  *(void *)&uint64_t v168 = v144;
  DisplayList.Item.init(_:frame:identity:version:)();
  LODWORD(v166) = *((unsigned __int8 *)v115 + 24);
  LOBYTE(v176) = v166;
  DisplayList.Item.canonicalize(options:)();
  uint64_t v120 = v186;
  uint64_t v121 = v187;
  uint64_t v122 = (unsigned __int16)v188 | (BYTE2(v188) << 16);
  unint64_t v176 = v184;
  v177 = *(_OWORD *)v185;
  uint64_t v178 = *(void *)&v185[16];
  uint64_t v179 = v186;
  uint64_t v180 = v187;
  int64_t v182 = BYTE2(v188);
  v181 = v188;
  v183 = HIDWORD(v188);
  outlined copy of DisplayList.Item.Value(v186, v187);
  DisplayList.init(_:)();
  swift_bridgeObjectRelease();
  uint64_t v123 = v168;
  int64_t v124 = WORD4(v168);
  uint64_t v125 = BYTE10(v168);
  unint64_t v126 = v154;
  if (v154 == 1)
  {
    uint64_t result = outlined consume of DisplayList.Item.Value(v120, v121);
  }
  else
  {
    int64_t v127 = swift_allocObject();
    LODWORD(v165) = v122;
    uint64_t v128 = (void *)v127;
    uint64_t v129 = *v115;
    Swift::Int v130 = (long long *)AGGraphGetValue();
    uint64_t v131 = v130[1];
    unint64_t v176 = *v130;
    v177 = v131;
    swift_bridgeObjectRetain();
    *(void *)&uint64_t v164 = v121;
    unint64_t v132 = v145;
    outlined copy of AccessibilityArchivableViewAttachment?(v145, 0, 0, v126);
    outlined copy of Environment<AppIntentExecutor?>.Content(v132, 0, 0);
    int64_t v133 = swift_bridgeObjectRetain();
    uint64_t v163 = (char *)v120;
    uint64_t v134 = MEMORY[0x18C114450](v133);
    uint64_t v136 = v135;
    v128[5] = &type metadata for ArchivableAccessibilityViewModifier.Factory;
    v128[6] = lazy protocol witness table accessor for type ArchivableAccessibilityViewModifier.Factory and conformance ArchivableAccessibilityViewModifier.Factory();
    uint64_t v137 = swift_allocObject();
    v128[2] = v137;
    *(void *)(v137 + 16) = v132;
    *(void *)(v137 + 24) = 0;
    *(unsigned char *)(v137 + 32) = 0;
    *(void *)(v137 + 40) = v126;
    *(_DWORD *)(v137 + 48) = v129;
    *(double *)(v137 + 56) = v134;
    *(void *)(v137 + 64) = v136;
    *(void *)&uint64_t v168 = v128;
    *((void *)&v168 + 1) = 0x4000000C00000000;
    *(void *)&uint64_t v169 = v123;
    BYTE10(v169) = v125;
    WORD4(v169) = v124;
    LODWORD(v189) = v129;
    *(void *)&v167 = v144;
    swift_retain();
    DisplayList.Item.init(_:frame:identity:version:)();
    LOBYTE(v168) = v166;
    DisplayList.Item.canonicalize(options:)();
    uint64_t v138 = v179;
    uint64_t v139 = v180;
    uint64_t v168 = v176;
    uint64_t v169 = v177;
    uint64_t v170 = v178;
    uint64_t v171 = v179;
    uint64_t v172 = v180;
    char v174 = v182;
    uint64_t v173 = v181;
    uint64_t v175 = v183;
    outlined copy of DisplayList.Item.Value(v179, v180);
    DisplayList.init(_:)();
    swift_release();
    outlined consume of Environment<AppIntentExecutor?>.Content(v132, 0, 0);
    swift_bridgeObjectRelease();
    outlined consume of AccessibilityArchivableViewAttachment?(v132, 0, 0, v126);
    outlined consume of DisplayList.Item.Value(v138, v139);
    outlined consume of DisplayList.Item.Value((uint64_t)v163, v164);
    uint64_t result = swift_bridgeObjectRelease();
    uint64_t v123 = v167;
    int64_t v124 = WORD4(v167);
    uint64_t v125 = BYTE10(v167);
  }
  v140 = v143;
  *unint64_t v143 = v123;
  *((_WORD *)v140 + 4) = v124;
  *((unsigned char *)v140 + 10) = v125;
  return result;
}

{
  _DWORD *v1;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t Value;
  __int16 v10;
  char v11;
  _DWORD *v12;
  unint64_t v13;
  _DWORD *v14;
  uint64_t v15;
  void *v16;
  id v17;
  id v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t result;
  __int16 v25;
  char v26;
  id v27;
  void *v28;
  long long v29;
  id v30;
  char *v31;
  unint64_t v32;
  unint64_t v33;
  char *v34;
  _DWORD *v35;
  long long *v36;
  long long v37;
  int v38;
  _DWORD *v39;
  uint64_t v40;
  char *v41;
  void *v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t KeyPath;
  unint64_t v47;
  char v48;
  uint64_t v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  void (*v53)(long long *__return_ptr, void, uint64_t);
  id v54;
  id v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  char *v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  __int16 v65;
  char v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  long long v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  int64_t v74;
  int64_t v75;
  char *isUniquelyReferenced_nonNull_native;
  uint64_t v77;
  BOOL v78;
  uint64_t v79;
  int64_t v80;
  int64_t v81;
  _DWORD *v82;
  void **v83;
  uint64_t v84;
  void *v85;
  unint64_t v86;
  char v87;
  uint64_t v88;
  uint64_t v89;
  id v90;
  id v91;
  uint64_t v92;
  id v93;
  id v94;
  uint64_t (*v95)(void, uint64_t);
  uint64_t v96;
  uint64_t v97;
  char v98;
  char v99;
  uint64_t *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  unint64_t v105;
  unint64_t v106;
  uint64_t v107;
  uint64_t v108;
  int *v109;
  int v110;
  long long *v111;
  long long v112;
  uint64_t v113;
  uint64_t v114;
  unint64_t v115;
  uint64_t v116;
  __int16 v117;
  char v118;
  uint64_t v119;
  uint64_t v120;
  void *v121;
  int v122;
  long long *v123;
  long long v124;
  uint64_t v125;
  uint64_t v126;
  double v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  unint64_t v132;
  void *v133;
  uint64_t v134;
  uint64_t v135;
  char *v136;
  int v137;
  void *v138;
  uint64_t v139;
  uint64_t v140;
  _DWORD *v141;
  uint64_t v142;
  uint64_t v143;
  char *v144;
  uint64_t v145;
  uint64_t v146;
  void *v147;
  uint64_t v148;
  void *v149;
  int v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  int v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  long long v158;
  long long v159;
  long long v160;
  long long v161;
  long long v162;
  long long v163;
  uint64_t v164;
  uint64_t v165;
  long long v166;
  __int16 v167;
  char v168;
  int v169;
  long long v170;
  long long v171;
  uint64_t v172;
  uint64_t v173;
  long long v174;
  __int16 v175;
  char v176;
  int v177;
  long long v178;
  unsigned char v179[24];
  uint64_t v180;
  long long v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  __int16 v185;
  char v186;
  long long v187;

  uint64_t v3 = type metadata accessor for AccessibilityNodeAttachment();
  v151 = *(void *)(v3 - 8);
  uint64_t v152 = v3;
  MEMORY[0x1F4188790](v3);
  long long v5 = (uint64_t *)((char *)&v134 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1F4188790](v6);
  int64_t v156 = (uint64_t)&v134 - v7;
  uint64_t v141 = v1;
  LODWORD(v8) = *MEMORY[0x1E4F4E7A0];
  if (v1[12] == *MEMORY[0x1E4F4E7A0])
  {
    DisplayList.init()();
  }
  else
  {
    uint64_t Value = AGGraphGetValue();
    __int16 v10 = *(_WORD *)(Value + 8);
    char v11 = *(unsigned char *)(Value + 10);
    uint64_t v184 = *(void *)Value;
    v185 = v10;
    v186 = v11;
    swift_bridgeObjectRetain();
  }
  uint64_t v12 = v141;
  if (v141[14] == v8)
  {
    uint64_t v13 = MEMORY[0x1E4FBC860];
  }
  else
  {
    uint64_t v13 = *(void *)AGGraphGetValue();
    swift_bridgeObjectRetain();
    uint64_t v12 = v141;
  }
  uint64_t v154 = v12[11];
  uint64_t v178 = *(_OWORD *)AGGraphGetValue();
  if ((EnvironmentValues.accessibilityEnabled.getter() & 1) == 0)
  {
    uint64_t result = swift_bridgeObjectRelease();
    uint64_t v25 = v185;
    int v26 = v186;
    *(void *)a1 = v184;
    *(_WORD *)(a1 + 8) = v25;
    *(unsigned char *)(a1 + 10) = v26;
    return result;
  }
  uint64_t v138 = (void *)a1;
  if (v13 >> 62)
  {
LABEL_100:
    swift_bridgeObjectRetain();
    _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  unint64_t v14 = v141;
  uint64_t v15 = AGGraphGetValue();
  uint64_t v16 = *(void **)v15;
  *(void *)&uint64_t v170 = *(void *)(v15 + 8);
  uint64_t v17 = v16;
  swift_bridgeObjectRetain_n();
  int v18 = v17;
  AccessibilityAttachment.init(properties:platformElement:)();
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  if (v14[13] != v8)
  {
    uint64_t v19 = AGGraphGetValue();
    int v21 = *(void *)v19;
    uint64_t v20 = *(void **)(v19 + 8);
    if (!*(unsigned char *)(v19 + 16))
    {
      int v27 = v20;
      swift_bridgeObjectRetain();
      uint64_t v135 = 0;
LABEL_16:
      *(void *)&uint64_t v170 = v21;
      AccessibilityProperties.merge(with:)((uint64_t *)&v170);
      uint64_t v170 = v178;
      __int16 v28 = (void *)AccessibilityAttachment.platformElement.getter();

      if (!v28)
      {
        *(void *)&uint64_t v170 = v21;
        *((void *)&v170 + 1) = v20;
        if (AccessibilityAttachment.platformElement.getter()) {
          AccessibilityAttachment.platformElement.setter();
        }
      }
      swift_bridgeObjectRelease();

      goto LABEL_20;
    }
    if (*(unsigned char *)(v19 + 16) == 1)
    {
      uint64_t v22 = swift_bridgeObjectRetain();
      int v23 = specialized Sequence.compactMap<A>(_:)(v22);
      uint64_t v135 = 0;
      static AccessibilityAttachment.combine(_:)(v23, (uint64_t *)&v170);
      swift_bridgeObjectRelease();
      outlined consume of AccessibilityAttachment.Tree(v21, v20, 1);
      uint64_t v20 = (void *)*((void *)&v170 + 1);
      int v21 = v170;
      goto LABEL_16;
    }
  }
  uint64_t v135 = 0;
LABEL_20:
  char v29 = v178;
  swift_bridgeObjectRetain();
  int v30 = *((id *)&v29 + 1);
  uint64_t v31 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 1, MEMORY[0x1E4FBC860]);
  uint64_t v33 = *((void *)v31 + 2);
  uint64_t v32 = *((void *)v31 + 3);
  if (v33 >= v32 >> 1) {
    uint64_t v31 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v32 > 1), v33 + 1, 1, v31);
  }
  *((void *)v31 + 2) = v33 + 1;
  uint64_t v144 = v31 + 32;
  *(_OWORD *)&v31[16 * v33 + 32] = v29;
  uint64_t v34 = v31;

  swift_bridgeObjectRelease();
  uint64_t v35 = v141;
  uint64_t v178 = *(_OWORD *)AGGraphGetValue();
  MEMORY[0x18C10C240]();
  uint64_t v178 = *(_OWORD *)AGGraphGetValue();
  MEMORY[0x18C10C240]();
  uint64_t v137 = v35[8];
  unsigned int v36 = (long long *)AGGraphGetValue();
  unint64_t v37 = v36[1];
  uint64_t v178 = *v36;
  *(_OWORD *)uint64_t v179 = v37;
  MEMORY[0x18C114450]();
  DisplayList.Version.init(forUpdate:)();
  uint64_t v139 = v178;
  char v38 = *((unsigned __int8 *)v35 + 4);
  uint64_t v149 = v5;
  uint64_t v150 = v38;
  if ((v38 & 1) == 0)
  {
    unint64_t v39 = v35;
    v140 = 0;
    unint64_t v8 = 1;
    goto LABEL_69;
  }
  unint64_t v143 = *((void *)v34 + 2);
  if (!v143)
  {
    v140 = 0;
    unint64_t v155 = 1;
    goto LABEL_89;
  }
  uint64_t v136 = v34;
  swift_bridgeObjectRetain_n();
  uint64_t v40 = 0;
  v140 = 0;
  unint64_t v8 = 1;
  uint64_t v142 = MEMORY[0x1E4FBC840] + 8;
  do
  {
    unint64_t v155 = v8;
    uint64_t v41 = &v144[16 * v40];
    int v43 = *(void *)v41;
    uint64_t v42 = (void *)*((void *)v41 + 1);
    uint64_t v44 = (uint64_t *)AGGraphGetValue();
    int v45 = *v44;
    int v157 = v44[1];
    uint64_t KeyPath = swift_getKeyPath();
    if (*(void *)(v43 + 16)
      && (uint64_t v47 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&type metadata for AccessibilityProperties.ActionsKey),
          (v48 & 1) != 0))
    {
      outlined init with copy of TableColumnList(*(void *)(v43 + 56) + 40 * v47, (uint64_t)&v178);
      int v49 = *(void *)&v179[16];
      *(void *)&uint64_t v160 = *(void *)&v179[8];
      __swift_project_boxed_opaque_existential_1(&v178, *(uint64_t *)&v179[8]);
      id v50 = v42;
      uint64_t v51 = v43;
      long long v52 = KeyPath;
      int v53 = *(void (**)(long long *__return_ptr, void, uint64_t))(v49 + 8);
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain_n();
      id v54 = v50;
      swift_retain();
      v53(&v170, v160, v49);
      uint64_t KeyPath = v52;
      int v43 = v51;
      uint64_t v42 = v50;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v178);
    }
    else
    {
      uint64_t v170 = 0u;
      uint64_t v171 = 0u;
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain_n();
      unint64_t v55 = v42;
      swift_retain();
    }
    _sSay7SwiftUI25_LazyLayout_PlacedSubviewVGMaTm_2(0, (unint64_t *)&lazy cache variable for type metadata for Any?, v142, MEMORY[0x1E4FBB718]);
    _sSay7SwiftUI25_LazyLayout_PlacedSubviewVGMaTm_2(0, (unint64_t *)&lazy cache variable for type metadata for [AnyAccessibilityAction], (uint64_t)&type metadata for AnyAccessibilityAction, MEMORY[0x1E4FBB320]);
    uint64_t v56 = swift_dynamicCast();
    Swift::Int v153 = v43;
    if (v56)
    {
      unsigned int v57 = v178;
    }
    else
    {
      *(void *)&uint64_t v178 = 0;
      if (one-time initialization token for defaultValue != -1) {
        swift_once();
      }
      uint64_t v58 = static AccessibilityProperties.ActionsKey.defaultValue;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      unsigned int v57 = v58;
    }
    swift_bridgeObjectRelease();
    uint64_t v59 = *(void *)(v57 + 16);
    if (v59)
    {
      v146 = KeyPath;
      uint64_t v147 = v42;
      v148 = v40;
      unsigned int v60 = (void *)(v57 + 32);
      uint64_t v145 = v57;
      swift_bridgeObjectRetain();
      id v61 = (char *)MEMORY[0x1E4FBC860];
      do
      {
        unint64_t v64 = v60[3];
        unint64_t v63 = v60[4];
        __swift_project_boxed_opaque_existential_1(v60, v64);
        *(void *)&uint64_t v170 = v45;
        *((void *)&v170 + 1) = v157;
        (*(void (**)(long long *__return_ptr, long long *, uint64_t, uint64_t))(v63 + 96))(&v178, &v170, v64, v63);
        if ((void)v181)
        {
          uint64_t v160 = v181;
          uint64_t v65 = *(_WORD *)v179;
          uint64_t v158 = v178;
          uint64_t v159 = *(_OWORD *)&v179[8];
          uint64_t v66 = v180;
          uint64_t v67 = v182;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            id v61 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v61 + 2) + 1, 1, v61);
          }
          CGFloat v69 = *((void *)v61 + 2);
          long long v68 = *((void *)v61 + 3);
          double v70 = v160;
          if (v69 >= v68 >> 1)
          {
            CGFloat v71 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v68 > 1), v69 + 1, 1, v61);
            double v70 = v160;
            id v61 = v71;
          }
          *((void *)v61 + 2) = v69 + 1;
          uint64_t v62 = &v61[72 * v69];
          *((_OWORD *)v62 + 2) = v158;
          *((_WORD *)v62 + 24) = v65;
          *(_OWORD *)(v62 + 56) = v159;
          v62[72] = v66 & 1;
          *((_OWORD *)v62 + 5) = v70;
          *((void *)v62 + 12) = v67;
        }
        v60 += 6;
        --v59;
      }
      while (v59);
      swift_bridgeObjectRelease();
      uint64_t v42 = v147;
      uint64_t v40 = v148;
      uint64_t KeyPath = v146;
    }
    else
    {
      id v61 = (char *)MEMORY[0x1E4FBC860];
    }
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    uint64_t v72 = *((void *)v61 + 2);
    swift_release();
    long long v5 = v149;
    if (!v72)
    {
      swift_bridgeObjectRelease();
      swift_release();
      swift_bridgeObjectRelease();

      unint64_t v8 = v155;
      goto LABEL_27;
    }
    unint64_t v8 = v155;
    if (v155)
    {
      if (v155 == 1)
      {
        swift_bridgeObjectRelease();

        v140 = KeyPath;
        unint64_t v8 = (uint64_t)v61;
        goto LABEL_27;
      }
      uint64_t v73 = *((void *)v61 + 2);
      int v74 = *(void *)(v155 + 16);
      char v75 = v74 + v73;
      if (__OFADD__(v74, v73))
      {
        __break(1u);
LABEL_98:
        __break(1u);
LABEL_99:
        __break(1u);
        goto LABEL_100;
      }
      swift_bridgeObjectRetain();
      char isUniquelyReferenced_nonNull_native = (char *)swift_isUniquelyReferenced_nonNull_native();
      if (isUniquelyReferenced_nonNull_native && v75 <= *(void *)(v8 + 24) >> 1)
      {
        if (*((void *)v61 + 2)) {
          goto LABEL_57;
        }
      }
      else
      {
        if (v74 <= v75) {
          uint64_t v80 = v74 + v73;
        }
        else {
          uint64_t v80 = v74;
        }
        unint64_t v8 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v80, 1, (char *)v8);
        if (*((void *)v61 + 2))
        {
LABEL_57:
          if ((*(void *)(v8 + 24) >> 1) - *(void *)(v8 + 16) < v73) {
            goto LABEL_99;
          }
          uint64_t result = swift_arrayInitWithCopy();
          if (v73)
          {
            uint64_t v77 = *(void *)(v8 + 16);
            unint64_t v78 = __OFADD__(v77, v73);
            char v79 = v77 + v73;
            if (v78)
            {
              __break(1u);
              return result;
            }
            *(void *)(v8 + 16) = v79;
          }
          goto LABEL_66;
        }
      }
      if (v73) {
        goto LABEL_98;
      }
LABEL_66:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      goto LABEL_67;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_67:
    swift_release();

LABEL_27:
    ++v40;
  }
  while (v40 != v143);
  uint64_t v34 = v136;
  swift_bridgeObjectRelease_n();
  unint64_t v39 = v141;
LABEL_69:
  uint64_t v81 = *((void *)v34 + 2);
  unint64_t v155 = v8;
  if (v81)
  {
    v183 = MEMORY[0x1E4FBC860];
    unint64_t v82 = v39;
    swift_bridgeObjectRetain();
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v81, 0);
    v187 = *(_OWORD *)(v82 + 2);
    uint64_t v136 = v34;
    uint64_t v83 = (void **)(v34 + 40);
    *(void *)&uint64_t v160 = MEMORY[0x1E4FBC840] + 8;
    while (1)
    {
      BOOL v84 = (uint64_t)*(v83 - 1);
      uint64_t v85 = *v83;
      if (*(void *)(v84 + 16)
        && (unint64_t v86 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&type metadata for AccessibilityProperties.UIKitTraitsKey),
            (v87 & 1) != 0))
      {
        outlined init with copy of TableColumnList(*(void *)(v84 + 56) + 40 * v86, (uint64_t)&v178);
        uint64_t v88 = *(void *)&v179[8];
        int v89 = *(void *)&v179[16];
        __swift_project_boxed_opaque_existential_1(&v178, *(uint64_t *)&v179[8]);
        *(void *)&uint64_t v159 = *(void *)(v89 + 8);
        int v90 = v85;
        swift_bridgeObjectRetain_n();
        int v91 = v90;
        int v92 = v89;
        long long v5 = v149;
        ((void (*)(long long *__return_ptr, uint64_t, uint64_t))v159)(&v170, v88, v92);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v178);
      }
      else
      {
        uint64_t v170 = 0u;
        uint64_t v171 = 0u;
        int v93 = v85;
        swift_bridgeObjectRetain_n();
        int v94 = v93;
      }
      int v95 = (uint64_t (*)(void, uint64_t))MEMORY[0x1E4FBB718];
      _sSay7SwiftUI25_LazyLayout_PlacedSubviewVGMaTm_2(0, (unint64_t *)&lazy cache variable for type metadata for Any?, v160, MEMORY[0x1E4FBB718]);
      _sSay7SwiftUI25_LazyLayout_PlacedSubviewVGMaTm_2(0, &lazy cache variable for type metadata for AccessibilityUIKitTraits?, (uint64_t)&type metadata for AccessibilityUIKitTraits, v95);
      if (swift_dynamicCast())
      {
        v179[1] = 0;
        uint64_t v97 = *((void *)&v178 + 1);
        uint64_t v96 = v178;
        uint64_t v98 = v179[0];
        swift_bridgeObjectRelease();
        if ((v98 & 1) == 0)
        {
          unint64_t v99 = 0;
          if ((v150 & 1) == 0) {
            goto LABEL_81;
          }
          goto LABEL_78;
        }
      }
      else
      {
        uint64_t v178 = 0uLL;
        *(_WORD *)uint64_t v179 = 256;
        swift_bridgeObjectRelease();
      }
      uint64_t v96 = 0;
      uint64_t v97 = 0;
      unint64_t v99 = 1;
      if ((v150 & 1) == 0)
      {
LABEL_81:
        *long long v5 = v84;
        v5[1] = v85;
        goto LABEL_82;
      }
LABEL_78:
      long long v100 = (uint64_t *)AGGraphGetValue();
      int v102 = *v100;
      uint64_t v101 = v100[1];
      *(void *)&uint64_t v170 = v84;
      *((void *)&v170 + 1) = v85;
      uint64_t v178 = 0u;
      *(_OWORD *)uint64_t v179 = 0u;
      *(void *)&v179[16] = v96;
      uint64_t v180 = v97;
      LOBYTE(v181) = v99;
      *(void *)&v162 = v102;
      *((void *)&v162 + 1) = v101;
      uint64_t v161 = v187;
      swift_retain();
      swift_retain();
      CodableAccessibilityAttachmentStorage.init(_:platformStorage:in:idiom:)();
LABEL_82:
      type metadata accessor for AccessibilityNodeAttachment.Storage();
      swift_storeEnumTagMultiPayload();
      int v103 = v152;
      *((unsigned char *)v5 + *(int *)(v152 + 20)) = 1;
      *((unsigned char *)v5 + *(int *)(v103 + 24)) = 0;
      _s7SwiftUI27AccessibilityNodeAttachmentVWObTm_0((uint64_t)v5, v156, MEMORY[0x1E4F40FA8]);
      swift_bridgeObjectRelease();

      int v104 = v183;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v104 + 16) + 1, 1);
        int v104 = v183;
      }
      int v106 = *(void *)(v104 + 16);
      int v105 = *(void *)(v104 + 24);
      if (v106 >= v105 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v105 > 1, v106 + 1, 1);
        int v104 = v183;
      }
      v83 += 2;
      *(void *)(v104 + 16) = v106 + 1;
      _s7SwiftUI27AccessibilityNodeAttachmentVWObTm_0(v156, v104+ ((*(unsigned __int8 *)(v151 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v151 + 80))+ *(void *)(v151 + 72) * v106, MEMORY[0x1E4F40FA8]);
      if (!--v81)
      {
        swift_bridgeObjectRelease_n();
        int v107 = v139;
        goto LABEL_90;
      }
    }
  }
LABEL_89:
  int v107 = v139;
  swift_bridgeObjectRelease();
  int v104 = MEMORY[0x1E4FBC860];
LABEL_90:
  int v108 = swift_allocObject();
  *(void *)(v108 + 16) = v104;
  *(void *)&uint64_t v170 = v108;
  *((void *)&v170 + 1) = 0x4000000D00000000;
  *(void *)&uint64_t v171 = v184;
  BYTE10(v171) = v186;
  WORD4(v171) = v185;
  if (v155 == 1)
  {
    uint64_t v109 = v141;
    uint64_t v110 = *v141;
    swift_bridgeObjectRetain();
  }
  else
  {
    unint64_t v111 = (long long *)AGGraphGetValue();
    BOOL v112 = v111[1];
    uint64_t v178 = *v111;
    *(_OWORD *)uint64_t v179 = v112;
    unint64_t v113 = swift_bridgeObjectRetain();
    MEMORY[0x18C114450](v113);
    uint64_t v110 = 0;
    uint64_t v109 = v141;
  }
  LODWORD(v161) = v110;
  *(void *)&v162 = v107;
  DisplayList.Item.init(_:frame:identity:version:)();
  LODWORD(v159) = *((unsigned __int8 *)v109 + 24);
  LOBYTE(v170) = v159;
  DisplayList.Item.canonicalize(options:)();
  int64_t v114 = v180;
  uint64_t v115 = v181;
  uint64_t v170 = v178;
  uint64_t v171 = *(_OWORD *)v179;
  uint64_t v172 = *(void *)&v179[16];
  uint64_t v173 = v180;
  char v174 = v181;
  unint64_t v176 = BYTE2(v182);
  uint64_t v175 = v182;
  v177 = HIDWORD(v182);
  LODWORD(v160) = (unsigned __int16)v182 | (BYTE2(v182) << 16);
  outlined copy of DisplayList.Item.Value(v180, v181);
  DisplayList.init(_:)();
  swift_bridgeObjectRelease();
  uint64_t v116 = v162;
  unint64_t v117 = WORD4(v162);
  unint64_t v118 = BYTE10(v162);
  uint64_t v119 = v155;
  if (v155 == 1)
  {
    uint64_t result = outlined consume of DisplayList.Item.Value(v114, v115);
  }
  else
  {
    uint64_t v120 = swift_allocObject();
    *(void *)&uint64_t v158 = v115;
    uint64_t v121 = (void *)v120;
    uint64_t v122 = *v109;
    uint64_t v123 = (long long *)AGGraphGetValue();
    int64_t v124 = v123[1];
    uint64_t v170 = *v123;
    uint64_t v171 = v124;
    swift_bridgeObjectRetain();
    uint64_t v125 = v140;
    outlined copy of AccessibilityArchivableViewAttachment?(v140, 0, 0, v119);
    outlined copy of Environment<AppIntentExecutor?>.Content(v125, 0, 0);
    unint64_t v126 = swift_bridgeObjectRetain();
    int v157 = v114;
    int64_t v127 = MEMORY[0x18C114450](v126);
    uint64_t v129 = v128;
    v121[5] = &type metadata for ArchivableAccessibilityViewModifier.Factory;
    v121[6] = lazy protocol witness table accessor for type ArchivableAccessibilityViewModifier.Factory and conformance ArchivableAccessibilityViewModifier.Factory();
    Swift::Int v130 = swift_allocObject();
    v121[2] = v130;
    *(void *)(v130 + 16) = v125;
    *(void *)(v130 + 24) = 0;
    *(unsigned char *)(v130 + 32) = 0;
    *(void *)(v130 + 40) = v119;
    *(_DWORD *)(v130 + 48) = v122;
    *(double *)(v130 + 56) = v127;
    *(void *)(v130 + 64) = v129;
    *(void *)&v162 = v121;
    *((void *)&v162 + 1) = 0x4000000C00000000;
    *(void *)&uint64_t v163 = v116;
    BYTE10(v163) = v118;
    WORD4(v163) = v117;
    LODWORD(v183) = v122;
    *(void *)&uint64_t v161 = v139;
    swift_retain();
    DisplayList.Item.init(_:frame:identity:version:)();
    LOBYTE(v162) = v159;
    DisplayList.Item.canonicalize(options:)();
    uint64_t v131 = v173;
    unint64_t v132 = v174;
    v162 = v170;
    uint64_t v163 = v171;
    uint64_t v164 = v172;
    v165 = v173;
    v166 = v174;
    uint64_t v168 = v176;
    v167 = v175;
    uint64_t v169 = v177;
    outlined copy of DisplayList.Item.Value(v173, v174);
    DisplayList.init(_:)();
    swift_release();
    outlined consume of Environment<AppIntentExecutor?>.Content(v125, 0, 0);
    swift_bridgeObjectRelease();
    outlined consume of AccessibilityArchivableViewAttachment?(v125, 0, 0, v119);
    outlined consume of DisplayList.Item.Value(v131, v132);
    outlined consume of DisplayList.Item.Value(v157, v158);
    uint64_t result = swift_bridgeObjectRelease();
    uint64_t v116 = v161;
    unint64_t v117 = WORD4(v161);
    unint64_t v118 = BYTE10(v161);
  }
  int64_t v133 = v138;
  *uint64_t v138 = v116;
  *((_WORD *)v133 + 4) = v117;
  *((unsigned char *)v133 + 10) = v118;
  return result;
}

uint64_t DisplayListTransform.value.getter@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  void (*v111)(long long *__return_ptr, long long *, char *, uint64_t, uint64_t, uint64_t);
  unint64_t v112;
  uint64_t v113;
  uint64_t v114;
  char *v115;
  char *v116;
  uint64_t v117;
  unint64_t v118;
  uint64_t v119;
  char *v120;
  char *v121;
  int v122;
  uint64_t v123;
  long long v124;
  long long v125;
  long long v126;
  long long v127;
  unsigned __int16 v128;
  unsigned __int8 v129;
  int v130;
  char *v131;
  __int16 v132;
  char v133;
  int v134;
  long long v135;
  long long v136;
  long long v137;
  long long v138;
  unsigned __int16 v139;
  unsigned __int8 v140;
  int v141;
  long long v142;
  long long v143;
  _OWORD v144[2];
  unsigned __int16 v145;
  unsigned __int8 v146;
  int v147;
  char v148;
  char *v149;
  uint64_t v150;
  unsigned __int16 v151;
  char v152;
  long long v153;
  long long v154;
  unsigned char v155[28];

  uint64_t v3 = v2;
  int v108 = a2;
  uint64_t v5 = type metadata accessor for AccessibilityNodeAttachment();
  uint64_t v107 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5 - 8);
  uint64_t v120 = (char *)&v106 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = a1[2];
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v9);
  uint64_t v121 = (char *)&v106 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  long long v11 = v2[1];
  Swift::Int v153 = *v2;
  uint64_t v154 = v11;
  long long v13 = *v2;
  long long v12 = v2[1];
  *(_OWORD *)unint64_t v155 = v2[2];
  *(_OWORD *)&v155[12] = *(long long *)((char *)v2 + 44);
  uint64_t v142 = v13;
  unint64_t v143 = v12;
  v144[0] = v2[2];
  *(_OWORD *)((char *)v144 + 12) = *(long long *)((char *)v2 + 44);
  DisplayListTransform.content.getter((uint64_t)&v135);
  if ((void)v135)
  {
    uint64_t v150 = v135;
    v151 = WORD4(v135);
    uint64_t v152 = BYTE10(v135);
  }
  else
  {
    DisplayList.init()();
  }
  int v14 = *MEMORY[0x1E4F4E7A0];
  uint64_t v15 = (char *)MEMORY[0x1E4FBC860];
  if (*(_DWORD *)&v155[24] != *MEMORY[0x1E4F4E7A0])
  {
    uint64_t v15 = *(char **)AGGraphGetValue();
    swift_bridgeObjectRetain();
  }
  long long v16 = v2[1];
  uint64_t v142 = *v2;
  unint64_t v143 = v16;
  v144[0] = v2[2];
  *(_OWORD *)((char *)v144 + 12) = *(long long *)((char *)v2 + 44);
  DisplayListTransform.environment.getter(&v135);
  uint64_t v142 = v135;
  char v17 = EnvironmentValues.accessibilityEnabled.getter();
  swift_release();
  swift_release();
  if ((v17 & 1) == 0)
  {
    uint64_t result = swift_bridgeObjectRelease();
    unsigned __int16 v23 = v151;
    char v24 = v152;
    uint64_t v25 = v108;
    *int v108 = v150;
    *((_WORD *)v25 + 4) = v23;
    *((unsigned char *)v25 + 10) = v24;
    return result;
  }
  uint64_t v149 = (char *)MEMORY[0x1E4FBC860];
  BOOL v112 = (unint64_t)v15 >> 62;
  if ((unint64_t)v15 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v18 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v18 = *(void *)(((unint64_t)v15 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  LODWORD(v114) = HIDWORD(v154);
  if (v18)
  {
    uint64_t v122 = 0;
    uint64_t v19 = v8;
    uint64_t v20 = *(void (**)(char *, uint64_t, uint64_t))(v8 + 16);
    unint64_t v21 = (v8 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  }
  else
  {
    uint64_t v115 = v15;
    uint64_t Value = AGGraphGetValue();
    int v27 = *(void (**)(char *, uint64_t, uint64_t))(v8 + 16);
    unint64_t v118 = (v8 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
    uint64_t v119 = (uint64_t)v27;
    __int16 v28 = v121;
    v27(v121, Value, v7);
    char v29 = (*(uint64_t (**)(uint64_t))(a1[3] + 72))(v7);
    (*(void (**)(char *, uint64_t))(v8 + 8))(v28, v7);
    uint64_t v122 = 0;
    if (v29) {
      uint64_t v122 = (v151 >> 1) & 1;
    }
    uint64_t v19 = v8;
    uint64_t v15 = v115;
    unint64_t v21 = v118;
    uint64_t v20 = (void (*)(char *, uint64_t, uint64_t))v119;
  }
  uint64_t v30 = AGGraphGetValue();
  uint64_t v31 = v121;
  unint64_t v118 = v21;
  uint64_t v119 = (uint64_t)v20;
  v20(v121, v30, v7);
  uint64_t v32 = *(uint64_t (**)(char *, uint64_t))(a1[3] + 32);
  uint64_t v123 = a1[3];
  uint64_t v33 = v32(v15, v7);
  uint64_t v116 = *(char **)(v19 + 8);
  unint64_t v117 = v19 + 8;
  ((void (*)(char *, uint64_t))v116)(v31, v7);
  v148 = v33 & 1;
  if ((v33 & 1) != 0 || v122)
  {
    uint64_t v35 = AGGraphGetValue();
    unsigned int v36 = v121;
    ((void (*)(char *, uint64_t, uint64_t))v119)(v121, v35, v7);
    (*(void (**)(long long *__return_ptr, char *, uint64_t))(v123 + 40))(&v124, v15, v7);
    swift_bridgeObjectRelease();
    ((void (*)(char *, uint64_t))v116)(v36, v7);
    long long v37 = v3[1];
    uint64_t v142 = *v3;
    unint64_t v143 = v37;
    v144[0] = v3[2];
    *(_OWORD *)((char *)v144 + 12) = *(long long *)((char *)v3 + 44);
    DisplayListTransform.deferredAttachment.getter((uint64_t)&v135);
    if (v136 > 1u)
    {
      uint64_t v3 = 0;
    }
    else
    {
      char v38 = (void *)*((void *)&v135 + 1);
      uint64_t v39 = v135;
      uint64_t v3 = 0;
      if ((_BYTE)v136)
      {
        uint64_t v51 = specialized Sequence.compactMap<A>(_:)(v135);
        static AccessibilityAttachment.combine(_:)(v51, (uint64_t *)&v142);
        swift_bridgeObjectRelease();
        outlined consume of AccessibilityAttachment.Tree?(v39, v38, 1);
        char v38 = (void *)*((void *)&v142 + 1);
        uint64_t v39 = v142;
      }
      *(void *)&uint64_t v142 = v39;
      AccessibilityProperties.merge(with:)((uint64_t *)&v142);
      uint64_t v142 = v124;
      long long v52 = (void *)AccessibilityAttachment.platformElement.getter();

      if (!v52)
      {
        *(void *)&uint64_t v142 = v39;
        *((void *)&v142 + 1) = v38;
        if (AccessibilityAttachment.platformElement.getter()) {
          AccessibilityAttachment.platformElement.setter();
        }
      }
      swift_bridgeObjectRelease();
    }
    uint64_t v31 = (char *)*((void *)&v124 + 1);
    uint64_t v33 = v124;
    a1 = *((id *)&v124 + 1);
    swift_bridgeObjectRetain();
    uint64_t v15 = (char *)MEMORY[0x1E4FBC860];
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v21 = (unint64_t)v120;
    if (isUniquelyReferenced_nonNull_native) {
      goto LABEL_50;
    }
    goto LABEL_79;
  }
  if (AGGraphGetCurrentAttribute() == v14)
  {
    __break(1u);
LABEL_79:
    uint64_t v15 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v15 + 2) + 1, 1, v15);
LABEL_50:
    unint64_t v55 = *((void *)v15 + 2);
    unint64_t v54 = *((void *)v15 + 3);
    if (v55 >= v54 >> 1) {
      uint64_t v15 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v54 > 1), v55 + 1, 1, v15);
    }
    *((void *)v15 + 2) = v55 + 1;
    uint64_t v56 = &v15[16 * v55];
    *((void *)v56 + 4) = v33;
    *((void *)v56 + 5) = v31;

    swift_bridgeObjectRelease();
    uint64_t v149 = v15;
    goto LABEL_53;
  }
  AccessibilityAttachmentToken.init<A>(_:)();
  int64_t v114 = v142;
  LODWORD(v113) = BYTE8(v142);
  if (v112)
  {
    swift_bridgeObjectRetain();
    uint64_t v34 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v34 < 0)
    {
      __break(1u);
      goto LABEL_81;
    }
  }
  else
  {
    uint64_t v34 = *(void *)(((unint64_t)v15 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  if (v34)
  {
    uint64_t v115 = v15;
    uint64_t v40 = 0;
    uint64_t v3 = 0;
    unint64_t v111 = *(void (**)(long long *__return_ptr, long long *, char *, uint64_t, uint64_t, uint64_t))(v123 + 48);
    BOOL v112 = v123 + 48;
    uint64_t v15 = (char *)MEMORY[0x1E4FBC860];
    uint64_t v109 = a1;
    uint64_t v110 = v34;
    do
    {
      uint64_t v41 = AGGraphGetValue();
      uint64_t v42 = v121;
      ((void (*)(char *, uint64_t, uint64_t))v119)(v121, v41, v7);
      *(void *)&uint64_t v142 = v114;
      BYTE8(v142) = v113;
      v111(&v124, &v142, v115, v40, v7, v123);
      ((void (*)(char *, uint64_t))v116)(v42, v7);
      uint64_t v142 = v153;
      unint64_t v143 = v154;
      v144[0] = *(_OWORD *)v155;
      *(_OWORD *)((char *)v144 + 12) = *(_OWORD *)&v155[12];
      DisplayListTransform.deferredAttachment.getter((uint64_t)&v135);
      if (v136 <= 1u)
      {
        uint64_t v44 = (void *)*((void *)&v135 + 1);
        uint64_t v43 = v135;
        if ((_BYTE)v136)
        {
          int v45 = specialized Sequence.compactMap<A>(_:)(v135);
          static AccessibilityAttachment.combine(_:)(v45, (uint64_t *)&v142);
          swift_bridgeObjectRelease();
          outlined consume of AccessibilityAttachment.Tree?(v43, v44, 1);
          uint64_t v44 = (void *)*((void *)&v142 + 1);
          uint64_t v43 = v142;
        }
        *(void *)&uint64_t v142 = v43;
        AccessibilityProperties.merge(with:)((uint64_t *)&v142);
        uint64_t v142 = v124;
        uint64_t v46 = (void *)AccessibilityAttachment.platformElement.getter();

        if (!v46)
        {
          *(void *)&uint64_t v142 = v43;
          *((void *)&v142 + 1) = v44;
          if (AccessibilityAttachment.platformElement.getter()) {
            AccessibilityAttachment.platformElement.setter();
          }
        }
        swift_bridgeObjectRelease();

        uint64_t v34 = v110;
      }
      long long v47 = v124;
      uint64_t v142 = v124;
      if (AccessibilityAttachment.isEmpty.getter())
      {
        swift_bridgeObjectRelease();
      }
      else
      {
        id v48 = *((id *)&v47 + 1);
        swift_bridgeObjectRetain();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v15 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v15 + 2) + 1, 1, v15);
        }
        unint64_t v50 = *((void *)v15 + 2);
        unint64_t v49 = *((void *)v15 + 3);
        if (v50 >= v49 >> 1) {
          uint64_t v15 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v49 > 1), v50 + 1, 1, v15);
        }
        *((void *)v15 + 2) = v50 + 1;
        *(_OWORD *)&v15[16 * v50 + 32] = v47;

        swift_bridgeObjectRelease();
        uint64_t v149 = v15;
        uint64_t v34 = v110;
      }
      ++v40;
      unint64_t v21 = (unint64_t)v120;
    }
    while (v34 != v40);
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v3 = 0;
    uint64_t v15 = (char *)MEMORY[0x1E4FBC860];
    unint64_t v21 = (unint64_t)v120;
  }
LABEL_53:
  uint64_t v142 = *(_OWORD *)AGGraphGetValue();
  MEMORY[0x18C10C240]();
  uint64_t v142 = *(_OWORD *)AGGraphGetValue();
  MEMORY[0x18C10C240]();
  unsigned int v57 = (long long *)AGGraphGetValue();
  long long v58 = v57[1];
  uint64_t v142 = *v57;
  unint64_t v143 = v58;
  CGFloat v59 = MEMORY[0x18C114450]();
  CGFloat v61 = v60;
  DisplayList.Version.init(forUpdate:)();
  uint64_t v62 = (char *)v142;
  if (BYTE4(v153))
  {
    uint64_t v142 = 0uLL;
    *(void *)&unint64_t v143 = 0;
    *((void *)&v143 + 1) = 1;
    uint64_t v63 = *((void *)v15 + 2);
    if (!v63)
    {
      unint64_t v118 = 0;
      uint64_t v119 = 1;
      uint64_t v121 = 0;
      unint64_t v117 = 0;
      goto LABEL_61;
    }
    unint64_t v64 = v62;
    swift_bridgeObjectRetain_n();
    uint64_t v65 = (void **)(v15 + 40);
    while (1)
    {
      uint64_t v66 = *v65;
      *(void *)&uint64_t v135 = *(v65 - 1);
      *((void *)&v135 + 1) = v66;
      a1 = v66;
      swift_bridgeObjectRetain();
      closure #1 in DisplayListTransform.value.getter((uint64_t *)&v142, (uint64_t *)&v135, &v153);
      if (v3) {
        break;
      }
      v65 += 2;

      swift_bridgeObjectRelease();
      if (!--v63)
      {
        swift_bridgeObjectRelease_n();
        unint64_t v117 = *((void *)&v142 + 1);
        unint64_t v118 = v142;
        uint64_t v119 = *((void *)&v143 + 1);
        uint64_t v121 = (char *)v143;
        uint64_t v62 = v64;
        goto LABEL_61;
      }
    }
LABEL_81:
    outlined consume of AccessibilityArchivableViewAttachment?(v142, *((uint64_t *)&v142 + 1), v143, *((uint64_t *)&v143 + 1));
    swift_bridgeObjectRelease();

    uint64_t result = swift_bridgeObjectRelease();
    __break(1u);
    return result;
  }
  unint64_t v117 = 0;
  unint64_t v118 = 0;
  uint64_t v121 = 0;
  uint64_t v119 = 1;
LABEL_61:
  uint64_t v67 = v107;
  if ((v148 & 1) == 0) {
    v148 = specialized DisplayListTransform.mergeAttachments(list:attachments:frame:)(&v150, (uint64_t *)&v149, v59, v61) & 1;
  }
  long long v68 = v149;
  int64_t v69 = *((void *)v149 + 2);
  uint64_t v120 = v62;
  if (v69)
  {
    *(void *)&uint64_t v135 = MEMORY[0x1E4FBC860];
    swift_bridgeObjectRetain();
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v69, 0);
    uint64_t v70 = v135;
    uint64_t v116 = v68;
    CGFloat v71 = (uint64_t *)(v68 + 40);
    do
    {
      uint64_t v72 = *v71;
      *(void *)&uint64_t v142 = *(v71 - 1);
      *((void *)&v142 + 1) = v72;
      closure #2 in DisplayListTransform.value.getter((uint64_t *)&v142);
      *(void *)&uint64_t v135 = v70;
      uint64_t v73 = v21;
      unint64_t v75 = *(void *)(v70 + 16);
      unint64_t v74 = *(void *)(v70 + 24);
      if (v75 >= v74 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v74 > 1, v75 + 1, 1);
        uint64_t v70 = v135;
      }
      v71 += 2;
      *(void *)(v70 + 16) = v75 + 1;
      outlined init with take of AccessibilityNodeAttachment(v73, v70+ ((*(unsigned __int8 *)(v67 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v67 + 80))+ *(void *)(v67 + 72) * v75, MEMORY[0x1E4F40FA8]);
      --v69;
      unint64_t v21 = v73;
    }
    while (v69);
    swift_bridgeObjectRelease_n();
    uint64_t v62 = v120;
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v70 = MEMORY[0x1E4FBC860];
  }
  uint64_t v76 = swift_allocObject();
  *(void *)(v76 + 16) = v70;
  *(void *)&uint64_t v135 = v76;
  *((void *)&v135 + 1) = 0x4000000D00000000;
  *(void *)&uint64_t v136 = v150;
  BYTE10(v136) = v152;
  WORD4(v136) = v151;
  uint64_t v77 = v119;
  if (v119 == 1)
  {
    int v78 = v153;
    swift_bridgeObjectRetain();
  }
  else
  {
    char v79 = (long long *)AGGraphGetValue();
    long long v80 = v79[1];
    uint64_t v142 = *v79;
    unint64_t v143 = v80;
    uint64_t v81 = swift_bridgeObjectRetain();
    MEMORY[0x18C114450](v81);
    int v78 = 0;
  }
  LODWORD(v131) = v78;
  *(void *)&int64_t v124 = v62;
  DisplayList.Item.init(_:frame:identity:version:)();
  LODWORD(v123) = BYTE8(v154);
  LOBYTE(v135) = BYTE8(v154);
  DisplayList.Item.canonicalize(options:)();
  uint64_t v82 = *((void *)&v144[0] + 1);
  long long v83 = v144[1];
  int v84 = v145 | (v146 << 16);
  uint64_t v135 = v142;
  uint64_t v136 = v143;
  uint64_t v137 = v144[0];
  uint64_t v138 = v144[1];
  v140 = v146;
  uint64_t v139 = v145;
  uint64_t v141 = v147;
  outlined copy of DisplayList.Item.Value(*((uint64_t *)&v144[0] + 1), *(unint64_t *)&v144[1]);
  DisplayList.init(_:)();
  swift_bridgeObjectRelease();
  uint64_t v85 = (char *)v124;
  __int16 v86 = WORD4(v124);
  char v87 = BYTE10(v124);
  if (v77 == 1)
  {
    uint64_t result = outlined consume of DisplayList.Item.Value(v82, v83);
  }
  else
  {
    unint64_t v111 = (void (*)(long long *__return_ptr, long long *, char *, uint64_t, uint64_t, uint64_t))(v121 & 1);
    uint64_t v88 = v124;
    char v89 = (char)v121;
    uint64_t v90 = swift_allocObject();
    uint64_t v122 = v84;
    int v91 = (void *)v90;
    LODWORD(v112) = v153;
    int v92 = (long long *)AGGraphGetValue();
    long long v93 = v92[1];
    uint64_t v135 = *v92;
    uint64_t v136 = v93;
    unint64_t v113 = v88;
    swift_bridgeObjectRetain();
    uint64_t v115 = (char *)*((void *)&v83 + 1);
    uint64_t v116 = (char *)v83;
    uint64_t v95 = v117;
    uint64_t v94 = v118;
    outlined copy of AccessibilityArchivableViewAttachment?(v118, v117, v89, v77);
    char v96 = (char)v111;
    outlined copy of Environment<AppIntentExecutor?>.Content(v94, v95, (char)v111);
    uint64_t v97 = swift_bridgeObjectRetain();
    int64_t v114 = v82;
    double v98 = MEMORY[0x18C114450](v97);
    uint64_t v100 = v99;
    v91[5] = &type metadata for ArchivableAccessibilityViewModifier.Factory;
    v91[6] = lazy protocol witness table accessor for type ArchivableAccessibilityViewModifier.Factory and conformance ArchivableAccessibilityViewModifier.Factory();
    uint64_t v101 = swift_allocObject();
    v91[2] = v101;
    *(void *)(v101 + 16) = v94;
    *(void *)(v101 + 24) = v95;
    *(unsigned char *)(v101 + 32) = v96;
    *(void *)(v101 + 40) = v77;
    int v102 = v112;
    *(_DWORD *)(v101 + 48) = v112;
    *(double *)(v101 + 56) = v98;
    *(void *)(v101 + 64) = v100;
    *(void *)&int64_t v124 = v91;
    *((void *)&v124 + 1) = 0x4000000C00000000;
    *(void *)&uint64_t v125 = v88;
    BYTE10(v125) = v87;
    WORD4(v125) = v86;
    uint64_t v134 = v102;
    uint64_t v131 = v120;
    swift_retain();
    DisplayList.Item.init(_:frame:identity:version:)();
    LOBYTE(v124) = v123;
    DisplayList.Item.canonicalize(options:)();
    uint64_t v103 = *((void *)&v137 + 1);
    unint64_t v104 = v138;
    int64_t v124 = v135;
    uint64_t v125 = v136;
    unint64_t v126 = v137;
    int64_t v127 = v138;
    uint64_t v129 = v140;
    uint64_t v128 = v139;
    Swift::Int v130 = v141;
    outlined copy of DisplayList.Item.Value(*((uint64_t *)&v137 + 1), v138);
    DisplayList.init(_:)();
    swift_release();
    outlined consume of Environment<AppIntentExecutor?>.Content(v94, v95, v96);
    swift_bridgeObjectRelease();
    outlined consume of AccessibilityArchivableViewAttachment?(v94, v95, (char)v121, v77);
    outlined consume of DisplayList.Item.Value(v103, v104);
    outlined consume of DisplayList.Item.Value(v114, (unint64_t)v116);
    uint64_t result = swift_bridgeObjectRelease();
    uint64_t v85 = v131;
    __int16 v86 = v132;
    char v87 = v133;
  }
  int v105 = v108;
  *int v108 = v85;
  *((_WORD *)v105 + 4) = v86;
  *((unsigned char *)v105 + 10) = v87;
  return result;
}

uint64_t specialized DisplayListTransform.mergeAttachments(list:attachments:frame:)(uint64_t *a1, uint64_t *a2, CGFloat a3, CGFloat a4)
{
  type metadata accessor for AccessibilityNodeAttachment?();
  MEMORY[0x1F4188790](v8 - 8);
  uint64_t v10 = &v40[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v11 = type metadata accessor for AccessibilityNodeAttachment();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x1F4188790](v11);
  int v14 = &v40[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v15 = *a1;
  if (*(void *)(*a1 + 16) != 1) {
    return 0;
  }
  __int16 v16 = *(_WORD *)(v15 + 96);
  char v17 = *(unsigned char *)(v15 + 98);
  int v18 = *(_DWORD *)(v15 + 100);
  long long v19 = *(_OWORD *)(v15 + 48);
  long long v48 = *(_OWORD *)(v15 + 32);
  long long v49 = v19;
  long long v20 = *(_OWORD *)(v15 + 80);
  long long v50 = *(_OWORD *)(v15 + 64);
  long long v51 = v20;
  char v53 = v17;
  __int16 v52 = v16;
  int v54 = v18;
  DisplayList.Item.frame.getter();
  v56.origin.x = 0.0;
  v56.origin.y = 0.0;
  v56.size.width = a3;
  v56.size.height = a4;
  if (!CGRectEqualToRect(v55, v56)) {
    return 0;
  }
  unint64_t v21 = *(void *)(v15 + 80);
  if (v21 >> 62 != 1) {
    return 0;
  }
  uint64_t v22 = *(void *)(v15 + 72);
  int v23 = *(unsigned __int16 *)(v15 + 96) | (*(unsigned __int8 *)(v15 + 98) << 16);
  if (BYTE4(v21) != 13)
  {
    outlined copy of DisplayList.Item.Value(*(void *)(v15 + 72), *(void *)(v15 + 80));
    outlined consume of DisplayList.Effect(v22, v21, SBYTE4(v21));
LABEL_16:
    swift_bridgeObjectRelease();
    return 0;
  }
  char v24 = *(void **)(v22 + 16);
  uint64_t v25 = *(void *)(v15 + 72);
  unint64_t v26 = *(void *)(v15 + 80);
  uint64_t v45 = *(void *)(v15 + 88);
  long long v47 = a2;
  int v27 = v23;
  outlined copy of DisplayList.Item.Value(v25, v26);
  uint64_t v46 = v24;
  swift_bridgeObjectRetain();
  outlined consume of DisplayList.Effect(v22, v21, 13);
  uint64_t v28 = *v47;
  if (*(void *)(*v47 + 16) != 1 || (unsigned int v44 = v27, v46[2] != 1))
  {
LABEL_15:
    swift_bridgeObjectRelease();
    goto LABEL_16;
  }
  uint64_t v30 = *(void *)(v28 + 32);
  char v29 = *(void **)(v28 + 40);
  outlined init with copy of AccessibilityNodeAttachment((uint64_t)v46 + ((*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80)), (uint64_t)v10, MEMORY[0x1E4F40FA8]);
  (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v12 + 56))(v10, 0, 1, v11);
  id v42 = v29;
  uint64_t v43 = v30;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11) == 1)
  {

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined destroy of AccessibilityNodeAttachment?((uint64_t)v10, (uint64_t (*)(void))type metadata accessor for AccessibilityNodeAttachment?);
    return 0;
  }
  uint64_t v46 = v29;
  outlined init with take of AccessibilityNodeAttachment((uint64_t)v10, (uint64_t)v14, MEMORY[0x1E4F40FA8]);
  id v31 = v42;
  if (v14[*(int *)(v11 + 24)] == 1)
  {
    outlined destroy of AccessibilityNodeAttachment?((uint64_t)v14, MEMORY[0x1E4F40FA8]);

    goto LABEL_15;
  }
  unsigned int v41 = HIWORD(v44);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  type metadata accessor for _ContiguousArrayStorage<Swift.AnyObject>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<AccessibilityAttachment>, MEMORY[0x1E4F40A58], MEMORY[0x1E4FBBE00]);
  uint64_t v33 = swift_allocObject();
  *(_OWORD *)(v33 + 16) = xmmword_18834BB80;
  uint64_t inited = swift_initStackObject();
  uint64_t v35 = v43;
  unsigned int v36 = (void *)inited;
  *(_OWORD *)(inited + 16) = xmmword_18834BB70;
  AccessibilityNodeAttachment.attachment.getter((void *)(inited + 32));
  long long v37 = v46;
  v36[6] = v35;
  v36[7] = v37;
  swift_bridgeObjectRetain();
  id v38 = v31;
  static AccessibilityAttachment.combine(_:)(v36, (uint64_t *)(v33 + 32));
  swift_setDeallocating();
  swift_arrayDestroy();

  swift_bridgeObjectRelease();
  *long long v47 = v33;
  *a1 = v45;
  *((_WORD *)a1 + 4) = v44;
  *((unsigned char *)a1 + 10) = v41;
  uint64_t v39 = v14[*(int *)(v11 + 20)];
  outlined destroy of AccessibilityNodeAttachment?((uint64_t)v14, MEMORY[0x1E4F40FA8]);
  return v39;
}

{
  uint64_t v8;
  uint64_t v9;
  unsigned char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned char *v14;
  uint64_t v15;
  __int16 v16;
  char v17;
  int v18;
  long long v19;
  long long v20;
  unint64_t v21;
  uint64_t v22;
  int v23;
  void *v24;
  uint64_t v25;
  unint64_t v26;
  int v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  id v31;
  uint64_t v32;
  uint64_t v34;
  uint64_t inited;
  uint64_t v36;
  void *v37;
  void *v38;
  id v39;
  unsigned char v40[12];
  unsigned int v41;
  id v42;
  uint64_t v43;
  unsigned int v44;
  uint64_t v45;
  void *v46;
  uint64_t *v47;
  long long v48;
  long long v49;
  long long v50;
  long long v51;
  __int16 v52;
  char v53;
  int v54;
  CGRect v55;
  CGRect v56;

  type metadata accessor for AccessibilityNodeAttachment?();
  MEMORY[0x1F4188790](v8 - 8);
  uint64_t v10 = &v40[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v11 = type metadata accessor for AccessibilityNodeAttachment();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x1F4188790](v11);
  int v14 = &v40[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v15 = *a1;
  if (*(void *)(*a1 + 16) != 1) {
    return 0;
  }
  __int16 v16 = *(_WORD *)(v15 + 96);
  char v17 = *(unsigned char *)(v15 + 98);
  int v18 = *(_DWORD *)(v15 + 100);
  long long v19 = *(_OWORD *)(v15 + 48);
  long long v48 = *(_OWORD *)(v15 + 32);
  long long v49 = v19;
  long long v20 = *(_OWORD *)(v15 + 80);
  long long v50 = *(_OWORD *)(v15 + 64);
  long long v51 = v20;
  char v53 = v17;
  __int16 v52 = v16;
  int v54 = v18;
  DisplayList.Item.frame.getter();
  v56.origin.x = 0.0;
  v56.origin.y = 0.0;
  v56.size.width = a3;
  v56.size.height = a4;
  if (!CGRectEqualToRect(v55, v56)) {
    return 0;
  }
  unint64_t v21 = *(void *)(v15 + 80);
  if (v21 >> 62 != 1) {
    return 0;
  }
  uint64_t v22 = *(void *)(v15 + 72);
  int v23 = *(unsigned __int16 *)(v15 + 96) | (*(unsigned __int8 *)(v15 + 98) << 16);
  if (BYTE4(v21) != 13)
  {
    outlined copy of DisplayList.Item.Value(*(void *)(v15 + 72), *(void *)(v15 + 80));
    outlined consume of DisplayList.Effect(v22, v21, SBYTE4(v21));
LABEL_15:
    swift_bridgeObjectRelease();
    return 0;
  }
  char v24 = *(void **)(v22 + 16);
  uint64_t v25 = *(void *)(v15 + 72);
  unint64_t v26 = *(void *)(v15 + 80);
  uint64_t v45 = *(void *)(v15 + 88);
  long long v47 = a2;
  int v27 = v23;
  outlined copy of DisplayList.Item.Value(v25, v26);
  uint64_t v46 = v24;
  swift_bridgeObjectRetain();
  outlined consume of DisplayList.Effect(v22, v21, 13);
  uint64_t v28 = *v47;
  if (*(void *)(*v47 + 16) != 1 || (unsigned int v44 = v27, v46[2] != 1))
  {
LABEL_14:
    swift_bridgeObjectRelease();
    goto LABEL_15;
  }
  uint64_t v30 = *(void *)(v28 + 32);
  char v29 = *(void **)(v28 + 40);
  _s7SwiftUI27AccessibilityNodeAttachmentVWOcTm_0((uint64_t)v46 + ((*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80)), (uint64_t)v10, MEMORY[0x1E4F40FA8]);
  (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v12 + 56))(v10, 0, 1, v11);
  id v42 = v29;
  uint64_t v43 = v30;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11) != 1)
  {
    uint64_t v46 = v29;
    _s7SwiftUI27AccessibilityNodeAttachmentVWObTm_0((uint64_t)v10, (uint64_t)v14, MEMORY[0x1E4F40FA8]);
    id v31 = v42;
    if ((v14[*(int *)(v11 + 24)] & 1) == 0)
    {
      unsigned int v41 = HIWORD(v44);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      _sSay7SwiftUI25_LazyLayout_PlacedSubviewVGMaTm_2(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<AccessibilityAttachment>, MEMORY[0x1E4F40A58], MEMORY[0x1E4FBBE00]);
      uint64_t v34 = swift_allocObject();
      *(_OWORD *)(v34 + 16) = xmmword_18834BB80;
      uint64_t inited = swift_initStackObject();
      unsigned int v36 = v43;
      long long v37 = (void *)inited;
      *(_OWORD *)(inited + 16) = xmmword_18834BB70;
      specialized AccessibilityNodeAttachment.makeAttachment<A>(with:)((void *)(inited + 32));
      id v38 = v46;
      v37[6] = v36;
      v37[7] = v38;
      swift_bridgeObjectRetain();
      uint64_t v39 = v31;
      static AccessibilityAttachment.combine(_:)(v37, (uint64_t *)(v34 + 32));
      swift_setDeallocating();
      swift_arrayDestroy();

      swift_bridgeObjectRelease();
      *long long v47 = v34;
      *a1 = v45;
      *((_WORD *)a1 + 4) = v44;
      *((unsigned char *)a1 + 10) = v41;
      uint64_t v32 = v14[*(int *)(v11 + 20)];
      _s7SwiftUI27AccessibilityNodeAttachmentVSgWOhTm_0((uint64_t)v14, MEMORY[0x1E4F40FA8]);
      return v32;
    }
    _s7SwiftUI27AccessibilityNodeAttachmentVSgWOhTm_0((uint64_t)v14, MEMORY[0x1E4F40FA8]);

    goto LABEL_14;
  }

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  _s7SwiftUI27AccessibilityNodeAttachmentVSgWOhTm_0((uint64_t)v10, (uint64_t (*)(void))type metadata accessor for AccessibilityNodeAttachment?);
  return 0;
}

id AnyDragAndDropBridge.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for AnyDragAndDropBridge();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t protocol witness for SingleValueDecodingContainer.decode(_:) in conformance __DictionaryDecoder(uint64_t a1, uint64_t a2, void (*a3)(void), uint64_t (*a4)(unsigned char *))
{
  uint64_t v7 = *v4;
  a3();
  if (v5) {
    return v7;
  }
  swift_beginAccess();
  _DictionaryDecodingStorage.topContainer.getter(*(void *)(v7 + 16), (uint64_t)v9);
  uint64_t v7 = a4(v9);
  uint64_t result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v9);
  if ((v7 & 0x10000) == 0) {
    return v7;
  }
  __break(1u);
  return result;
}

{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t result;
  unsigned char v9[32];

  uint64_t v7 = *v4;
  a3();
  if (v5) {
    return v7;
  }
  swift_beginAccess();
  _DictionaryDecodingStorage.topContainer.getter(*(void *)(v7 + 16), (uint64_t)v9);
  uint64_t v7 = a4(v9);
  uint64_t result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v9);
  if ((v7 & 0x100) == 0) {
    return v7;
  }
  __break(1u);
  return result;
}

uint64_t specialized __DictionaryDecoder.unbox(_:as:)(uint64_t a1)
{
  outlined init with copy of Any(a1, (uint64_t)v18);
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for NSNull);
  if (swift_dynamicCast())
  {

    return 0;
  }
  outlined init with copy of Any(a1, (uint64_t)v18);
  uint64_t v4 = type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
  if (swift_dynamicCast())
  {
    if (*MEMORY[0x1E4F1CFD0]) {
      BOOL v5 = v16 == (id)*MEMORY[0x1E4F1CFD0];
    }
    else {
      BOOL v5 = 0;
    }
    if (!v5 && (!*MEMORY[0x1E4F1CFC8] || v16 != (id)*MEMORY[0x1E4F1CFC8]))
    {
      objc_msgSend(v16, sel_doubleValue);
      uint64_t v14 = v13;

      return v14;
    }
  }
  outlined init with copy of Any(a1, (uint64_t)v18);
  if ((swift_dynamicCast() & 1) == 0) {
    goto LABEL_18;
  }
  uint64_t v6 = v1[9];
  if (!v6)
  {
    swift_bridgeObjectRelease();
    goto LABEL_18;
  }
  id v8 = (id)v1[10];
  uint64_t v7 = v1[11];
  id v9 = (id)v1[12];
  if (v16 == (id)v1[8] && v6 == v17 || (uint64_t v19 = v1[13], (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    swift_bridgeObjectRelease();
    return 0x7FF0000000000000;
  }
  if (v16 == v8 && v7 == v17 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0xFFF0000000000000;
  }
  if (v16 == v9 && v19 == v17)
  {
    swift_bridgeObjectRelease();
    return 0x7FF8000000000000;
  }
  char v15 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if ((v15 & 1) == 0)
  {
LABEL_18:
    uint64_t v10 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v12 = v11;
    type metadata accessor for (@thick Any.Type, DecodingError.Context)();
    *uint64_t v12 = v4;
    swift_beginAccess();
    swift_bridgeObjectRetain();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v10 - 8) + 104))(v12, *MEMORY[0x1E4FBBA70], v10);
    return swift_willThrow();
  }
  return 0x7FF8000000000000;
}

{
  uint64_t result;
  uint64_t v3;
  id v4;
  BOOL v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  id v9;
  unsigned char v10[32];

  outlined init with copy of Any(a1, (uint64_t)v10);
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for NSNull);
  if (swift_dynamicCast())
  {

    return 2;
  }
  outlined init with copy of Any(a1, (uint64_t)v10);
  uint64_t v3 = type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
  uint64_t result = swift_dynamicCast();
  if (result)
  {
    if (*MEMORY[0x1E4F1CFD0])
    {
      if (v9 == (id)*MEMORY[0x1E4F1CFD0])
      {

        return 1;
      }
      if (*MEMORY[0x1E4F1CFC8])
      {
        if (v9 == (id)*MEMORY[0x1E4F1CFC8])
        {

          return 0;
        }
        uint64_t v4 = objc_msgSend(v9, sel_integerValue);

        BOOL v5 = v4 == 0;
        return !v5;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    return result;
  }
  outlined init with copy of Any(a1, (uint64_t)v10);
  if (swift_dynamicCast()) {
    return v9;
  }
  outlined init with copy of Any(a1, (uint64_t)v10);
  if (!swift_dynamicCast())
  {
    uint64_t v6 = type metadata accessor for DecodingError();
    swift_allocError();
    id v8 = v7;
    type metadata accessor for (@thick Any.Type, DecodingError.Context)();
    char *v8 = v3;
    swift_beginAccess();
    swift_bridgeObjectRetain();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v6 - 8) + 104))(v8, *MEMORY[0x1E4FBBA70], v6);
    return swift_willThrow();
  }
  BOOL v5 = v9 == 0;
  return !v5;
}

{
  uint64_t v3;
  uint64_t *v4;
  uint64_t *v5;
  void *v6;
  unsigned char v7[32];

  outlined init with copy of Any(a1, (uint64_t)v7);
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for NSNull);
  if (swift_dynamicCast())
  {

    return 0;
  }
  else
  {
    outlined init with copy of Any(a1, (uint64_t)v7);
    if (swift_dynamicCast())
    {
      return (uint64_t)v6;
    }
    else
    {
      uint64_t v3 = type metadata accessor for DecodingError();
      swift_allocError();
      BOOL v5 = v4;
      type metadata accessor for (@thick Any.Type, DecodingError.Context)();
      *BOOL v5 = type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
      swift_beginAccess();
      swift_bridgeObjectRetain();
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v3 - 8) + 104))(v5, *MEMORY[0x1E4FBBA70], v3);
      return swift_willThrow();
    }
  }
}

{
  uint64_t v3;
  uint64_t *v4;
  uint64_t *v5;
  void *v6;
  unsigned char v7[32];

  outlined init with copy of Any(a1, (uint64_t)v7);
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for NSNull);
  if (swift_dynamicCast())
  {

    return 0;
  }
  else
  {
    outlined init with copy of Any(a1, (uint64_t)v7);
    if (swift_dynamicCast())
    {
      return (uint64_t)v6;
    }
    else
    {
      uint64_t v3 = type metadata accessor for DecodingError();
      swift_allocError();
      BOOL v5 = v4;
      type metadata accessor for (@thick Any.Type, DecodingError.Context)();
      *BOOL v5 = type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
      swift_beginAccess();
      swift_bridgeObjectRetain();
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v3 - 8) + 104))(v5, *MEMORY[0x1E4FBBA70], v3);
      return swift_willThrow();
    }
  }
}

void type metadata accessor for ViewResponderFilter<PlatformViewRepresentableAdaptor<PlatformTextFieldAdaptor>>()
{
  if (!lazy cache variable for type metadata for ViewResponderFilter<PlatformViewRepresentableAdaptor<PlatformTextFieldAdaptor>>)
  {
    type metadata accessor for PlatformViewRepresentableAdaptor<UIKitRichTextEditor>(255, (unint64_t *)&lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<PlatformTextFieldAdaptor>, type metadata accessor for PlatformTextFieldAdaptor, (uint64_t)&protocol witness table for PlatformTextFieldAdaptor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<PlatformTextFieldAdaptor> and conformance PlatformViewRepresentableAdaptor<A>();
    unint64_t v0 = type metadata accessor for ViewResponderFilter();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ViewResponderFilter<PlatformViewRepresentableAdaptor<PlatformTextFieldAdaptor>>);
    }
  }
}

void type metadata accessor for ViewResponderFilter<PlatformViewRepresentableAdaptor<UIKitPagingView>>()
{
  if (!lazy cache variable for type metadata for ViewResponderFilter<PlatformViewRepresentableAdaptor<UIKitPagingView>>)
  {
    type metadata accessor for PlatformViewRepresentableAdaptor<UIKitPasteControl>(255, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<UIKitPagingView>, (uint64_t)&type metadata for UIKitPagingView, (uint64_t)&protocol witness table for UIKitPagingView, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<UIKitPagingView> and conformance PlatformViewRepresentableAdaptor<A>();
    unint64_t v0 = type metadata accessor for ViewResponderFilter();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ViewResponderFilter<PlatformViewRepresentableAdaptor<UIKitPagingView>>);
    }
  }
}

uint64_t PropertiesTransform.environment.getter@<X0>(void *a1@<X8>)
{
  uint64_t Value = (uint64_t *)AGGraphGetValue();
  uint64_t v4 = *Value;
  uint64_t v3 = Value[1];
  *a1 = v4;
  a1[1] = v3;
  swift_retain();

  return swift_retain();
}

uint64_t initializeWithTake for NavigationSplitView(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6 = *(void *)(a3[2] - 8) + 32;
  (*(void (**)(void))v6)();
  uint64_t v7 = *(void *)(a3[3] - 8);
  uint64_t v8 = v7 + 32;
  uint64_t v9 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v10 = *(void *)(v6 + 32) + v9;
  uint64_t v11 = (v10 + a1) & ~v9;
  uint64_t v12 = (v10 + a2) & ~v9;
  (*(void (**)(uint64_t, uint64_t))(v7 + 32))(v11, v12);
  uint64_t v13 = *(void *)(v8 + 32);
  uint64_t v14 = *(void *)(a3[4] - 8);
  uint64_t v15 = v14 + 32;
  uint64_t v16 = *(unsigned __int8 *)(v14 + 80);
  uint64_t v17 = v13 + v16;
  uint64_t v18 = (v17 + v11) & ~v16;
  uint64_t v19 = (v17 + v12) & ~v16;
  (*(void (**)(uint64_t, uint64_t))(v14 + 32))(v18, v19);
  uint64_t v20 = *(void *)(v15 + 32) + 7;
  unint64_t v21 = (v20 + v18) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v22 = (v20 + v19) & 0xFFFFFFFFFFFFFFF8;
  unsigned int v23 = *(unsigned __int8 *)(v22 + 18);
  if (v23 >= 2) {
    unsigned int v23 = *(_DWORD *)v22 + 2;
  }
  if (v23 == 1)
  {
    long long v24 = *(_OWORD *)v22;
    *(_WORD *)(v21 + 16) = *(_WORD *)(v22 + 16);
    *(_OWORD *)unint64_t v21 = v24;
    char v25 = 1;
  }
  else
  {
    char v25 = 0;
    *(_OWORD *)unint64_t v21 = *(_OWORD *)v22;
  }
  *(unsigned char *)(v21 + 18) = v25;
  unint64_t v26 = v21 + 26;
  unint64_t v27 = (v22 + 26) & 0xFFFFFFFFFFFFFFF8;
  unsigned int v28 = *(unsigned __int8 *)(v27 + 17);
  if (v28 >= 2) {
    unsigned int v28 = *(_DWORD *)v27 + 2;
  }
  unint64_t v29 = v26 & 0xFFFFFFFFFFFFFFF8;
  if (v28 == 1)
  {
    long long v30 = *(_OWORD *)v27;
    *(unsigned char *)(v29 + 16) = *(unsigned char *)(v27 + 16);
    *(_OWORD *)unint64_t v29 = v30;
    char v31 = 1;
  }
  else
  {
    char v31 = 0;
    *(_OWORD *)unint64_t v29 = *(_OWORD *)v27;
  }
  *(unsigned char *)(v29 + 17) = v31;
  *(_WORD *)(v29 + 18) = *(_WORD *)(v27 + 18);
  return a1;
}

uint64_t initializeWithCopy for LinearCapacityGauge(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  *(void *)a1 = *(void *)a2;
  *(_DWORD *)(a1 + 7) = *(_DWORD *)(a2 + 7);
  uint64_t v4 = *(void *)(a2 + 16);
  char v5 = *(unsigned char *)(a2 + 24);
  outlined copy of Environment<Bool>.Content(v4, v5);
  *(void *)(a1 + 16) = v4;
  *(unsigned char *)(a1 + 24) = v5;
  uint64_t v6 = *(void *)(v2 + 32);
  LOBYTE(v2) = *(unsigned char *)(v2 + 40);
  outlined copy of Environment<Bool>.Content(v6, v2);
  *(void *)(a1 + 32) = v6;
  *(unsigned char *)(a1 + 40) = v2;
  return a1;
}

uint64_t getEnumTagSinglePayload for FrameResizePosition(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xF9) {
    goto LABEL_17;
  }
  if (a2 + 7 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 7) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 7;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 7;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 7;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 8;
  int v8 = v6 - 8;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

_OWORD *initializeWithTake for DialogActionContext(_OWORD *a1, _OWORD *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[6];
  BOOL v7 = (_OWORD *)((char *)a1 + v6);
  int v8 = (_OWORD *)((char *)a2 + v6);
  uint64_t v9 = type metadata accessor for DialogActionContext.CancelType(0);
  uint64_t v92 = *(void *)(v9 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v92 + 48))(v8, 1, v9))
  {
    _s7SwiftUI16CommandOperationVSgMaTm_0(0, &lazy cache variable for type metadata for DialogActionContext.CancelType?, (void (*)(uint64_t))type metadata accessor for DialogActionContext.CancelType);
    memcpy(v7, v8, *(void *)(*(void *)(v10 - 8) + 64));
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      long long v11 = v8[1];
      *BOOL v7 = *v8;
      v7[1] = v11;
      *((unsigned char *)v7 + 32) = *((unsigned char *)v8 + 32);
      uint64_t v12 = *((void *)v8 + 6);
      *((void *)v7 + 5) = *((void *)v8 + 5);
      *((void *)v7 + 6) = v12;
      *((unsigned char *)v7 + 56) = *((unsigned char *)v8 + 56);
      long long v13 = v8[13];
      v7[12] = v8[12];
      v7[13] = v13;
      v7[14] = v8[14];
      *(_DWORD *)((char *)v7 + 239) = *(_DWORD *)((char *)v8 + 239);
      long long v14 = v8[9];
      v7[8] = v8[8];
      v7[9] = v14;
      long long v15 = v8[11];
      v7[10] = v8[10];
      v7[11] = v15;
      long long v16 = v8[5];
      v7[4] = v8[4];
      v7[5] = v16;
      long long v17 = v8[7];
      v7[6] = v8[6];
      v7[7] = v17;
      *(_OWORD *)((char *)v7 + 248) = *(_OWORD *)((char *)v8 + 248);
      long long v18 = *(_OWORD *)((char *)v8 + 280);
      *(_OWORD *)((char *)v7 + 264) = *(_OWORD *)((char *)v8 + 264);
      *(_OWORD *)((char *)v7 + 280) = v18;
      long long v19 = *(_OWORD *)((char *)v8 + 376);
      *(_OWORD *)((char *)v7 + 360) = *(_OWORD *)((char *)v8 + 360);
      *(_OWORD *)((char *)v7 + 376) = v19;
      *((void *)v7 + 49) = *((void *)v8 + 49);
      long long v20 = *(_OWORD *)((char *)v8 + 312);
      *(_OWORD *)((char *)v7 + 296) = *(_OWORD *)((char *)v8 + 296);
      *(_OWORD *)((char *)v7 + 312) = v20;
      long long v21 = *(_OWORD *)((char *)v8 + 344);
      *(_OWORD *)((char *)v7 + 328) = *(_OWORD *)((char *)v8 + 328);
      *(_OWORD *)((char *)v7 + 344) = v21;
      long long v22 = v8[28];
      v7[27] = v8[27];
      v7[28] = v22;
      *((unsigned char *)v7 + 464) = *((unsigned char *)v8 + 464);
      long long v23 = v8[26];
      v7[25] = v8[25];
      v7[26] = v23;
      *(_OWORD *)((char *)v7 + 472) = *(_OWORD *)((char *)v8 + 472);
      *(_OWORD *)((char *)v7 + 481) = *(_OWORD *)((char *)v8 + 481);
      uint64_t v24 = *((void *)v8 + 63);
      if (v24)
      {
        uint64_t v25 = *((void *)v8 + 64);
        *((void *)v7 + 63) = v24;
        *((void *)v7 + 64) = v25;
      }
      else
      {
        *(_OWORD *)((char *)v7 + 504) = *(_OWORD *)((char *)v8 + 504);
      }
      *((_WORD *)v7 + 260) = *((_WORD *)v8 + 260);
      v7[33] = v8[33];
      *((void *)v7 + 68) = *((void *)v8 + 68);
      *((void *)v7 + 71) = *((void *)v8 + 71);
      *(_OWORD *)((char *)v7 + 552) = *(_OWORD *)((char *)v8 + 552);
      *((void *)v7 + 72) = *((void *)v8 + 72);
      *(_OWORD *)((char *)v7 + 584) = *(_OWORD *)((char *)v8 + 584);
      *(_OWORD *)((char *)v7 + 600) = *(_OWORD *)((char *)v8 + 600);
      *((void *)v7 + 77) = *((void *)v8 + 77);
      *((void *)v7 + 78) = *((void *)v8 + 78);
      *((unsigned char *)v7 + 632) = *((unsigned char *)v8 + 632);
      *(_WORD *)((char *)v7 + 633) = *(_WORD *)((char *)v8 + 633);
      unsigned int v28 = (int *)type metadata accessor for PlatformItemList.Item();
      uint64_t v29 = v28[28];
      __dsta = (char *)v7 + v29;
      long long v30 = (char *)v8 + v29;
      uint64_t v31 = type metadata accessor for CommandOperation();
      uint64_t v32 = *(void *)(v31 - 8);
      if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v32 + 48))(v30, 1, v31))
      {
        _s7SwiftUI16CommandOperationVSgMaTm_0(0, &lazy cache variable for type metadata for CommandOperation?, (void (*)(uint64_t))type metadata accessor for CommandOperation);
        memcpy(__dsta, v30, *(void *)(*(void *)(v33 - 8) + 64));
      }
      else
      {
        uint64_t v86 = v32;
        uint64_t v88 = v9;
        unsigned char *__dsta = *v30;
        uint64_t v49 = *(int *)(v31 + 20);
        long long v50 = &__dsta[v49];
        long long v51 = &v30[v49];
        long long v52 = *(_OWORD *)&v30[v49 + 16];
        _OWORD *v50 = *(_OWORD *)&v30[v49];
        v50[1] = v52;
        uint64_t v53 = *(int *)(type metadata accessor for CommandGroupPlacement(0) + 20);
        int v54 = (char *)v50 + v53;
        CGRect v55 = &v51[v53];
        uint64_t v56 = type metadata accessor for UUID();
        (*(void (**)(char *, unsigned char *, uint64_t))(*(void *)(v56 - 8) + 32))(v54, v55, v56);
        uint64_t v57 = *(int *)(v31 + 24);
        long long v58 = &__dsta[v57];
        CGFloat v59 = (uint64_t *)&v30[v57];
        uint64_t v60 = *v59;
        if (*v59)
        {
          uint64_t v61 = v59[1];
          void *v58 = v60;
          v58[1] = v61;
        }
        else
        {
          *(_OWORD *)long long v58 = *(_OWORD *)v59;
        }
        uint64_t v9 = v88;
        (*(void (**)(void))(v86 + 56))();
      }
      *((unsigned char *)v7 + v28[29]) = *((unsigned char *)v8 + v28[29]);
      *((unsigned char *)v7 + v28[30]) = *((unsigned char *)v8 + v28[30]);
      *((unsigned char *)v7 + v28[31]) = *((unsigned char *)v8 + v28[31]);
      *((unsigned char *)v7 + v28[32]) = *((unsigned char *)v8 + v28[32]);
      *(void *)((char *)v7 + v28[33]) = *(void *)((char *)v8 + v28[33]);
    }
    else
    {
      unint64_t v26 = (int *)type metadata accessor for PlatformItemList.Item();
      __dst = (void *)*((void *)v26 - 1);
      if ((*((unsigned int (**)(_OWORD *, uint64_t, int *))__dst + 6))(v8, 1, v26))
      {
        _s7SwiftUI16CommandOperationVSgMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for PlatformItemList.Item?, (void (*)(uint64_t))type metadata accessor for PlatformItemList.Item);
        memcpy(v7, v8, *(void *)(*(void *)(v27 - 8) + 64));
      }
      else
      {
        long long v34 = v8[1];
        *BOOL v7 = *v8;
        v7[1] = v34;
        *((unsigned char *)v7 + 32) = *((unsigned char *)v8 + 32);
        uint64_t v35 = *((void *)v8 + 6);
        *((void *)v7 + 5) = *((void *)v8 + 5);
        *((void *)v7 + 6) = v35;
        *((unsigned char *)v7 + 56) = *((unsigned char *)v8 + 56);
        long long v36 = v8[13];
        v7[12] = v8[12];
        v7[13] = v36;
        v7[14] = v8[14];
        *(_DWORD *)((char *)v7 + 239) = *(_DWORD *)((char *)v8 + 239);
        long long v37 = v8[9];
        v7[8] = v8[8];
        v7[9] = v37;
        long long v38 = v8[11];
        v7[10] = v8[10];
        v7[11] = v38;
        long long v39 = v8[5];
        v7[4] = v8[4];
        v7[5] = v39;
        long long v40 = v8[7];
        v7[6] = v8[6];
        v7[7] = v40;
        *(_OWORD *)((char *)v7 + 248) = *(_OWORD *)((char *)v8 + 248);
        long long v41 = *(_OWORD *)((char *)v8 + 280);
        *(_OWORD *)((char *)v7 + 264) = *(_OWORD *)((char *)v8 + 264);
        *(_OWORD *)((char *)v7 + 280) = v41;
        long long v42 = *(_OWORD *)((char *)v8 + 376);
        *(_OWORD *)((char *)v7 + 360) = *(_OWORD *)((char *)v8 + 360);
        *(_OWORD *)((char *)v7 + 376) = v42;
        *((void *)v7 + 49) = *((void *)v8 + 49);
        long long v43 = *(_OWORD *)((char *)v8 + 312);
        *(_OWORD *)((char *)v7 + 296) = *(_OWORD *)((char *)v8 + 296);
        *(_OWORD *)((char *)v7 + 312) = v43;
        long long v44 = *(_OWORD *)((char *)v8 + 344);
        *(_OWORD *)((char *)v7 + 328) = *(_OWORD *)((char *)v8 + 328);
        *(_OWORD *)((char *)v7 + 344) = v44;
        long long v45 = v8[28];
        v7[27] = v8[27];
        v7[28] = v45;
        *((unsigned char *)v7 + 464) = *((unsigned char *)v8 + 464);
        long long v46 = v8[26];
        v7[25] = v8[25];
        v7[26] = v46;
        *(_OWORD *)((char *)v7 + 472) = *(_OWORD *)((char *)v8 + 472);
        *(_OWORD *)((char *)v7 + 481) = *(_OWORD *)((char *)v8 + 481);
        uint64_t v47 = *((void *)v8 + 63);
        if (v47)
        {
          uint64_t v48 = *((void *)v8 + 64);
          *((void *)v7 + 63) = v47;
          *((void *)v7 + 64) = v48;
        }
        else
        {
          *(_OWORD *)((char *)v7 + 504) = *(_OWORD *)((char *)v8 + 504);
        }
        *((_WORD *)v7 + 260) = *((_WORD *)v8 + 260);
        v7[33] = v8[33];
        *((void *)v7 + 68) = *((void *)v8 + 68);
        *((void *)v7 + 71) = *((void *)v8 + 71);
        *(_OWORD *)((char *)v7 + 552) = *(_OWORD *)((char *)v8 + 552);
        *((void *)v7 + 72) = *((void *)v8 + 72);
        *(_OWORD *)((char *)v7 + 584) = *(_OWORD *)((char *)v8 + 584);
        *(_OWORD *)((char *)v7 + 600) = *(_OWORD *)((char *)v8 + 600);
        *((void *)v7 + 77) = *((void *)v8 + 77);
        *((void *)v7 + 78) = *((void *)v8 + 78);
        *((unsigned char *)v7 + 632) = *((unsigned char *)v8 + 632);
        *(_WORD *)((char *)v7 + 633) = *(_WORD *)((char *)v8 + 633);
        uint64_t v62 = v26[28];
        char v89 = (char *)v7 + v62;
        uint64_t v63 = (char *)v8 + v62;
        uint64_t v64 = type metadata accessor for CommandOperation();
        uint64_t v65 = *(void *)(v64 - 8);
        char v87 = v63;
        uint64_t v66 = v63;
        uint64_t v67 = v64;
        if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v65 + 48))(v66, 1, v64))
        {
          _s7SwiftUI16CommandOperationVSgMaTm_0(0, &lazy cache variable for type metadata for CommandOperation?, (void (*)(uint64_t))type metadata accessor for CommandOperation);
          memcpy(v89, v87, *(void *)(*(void *)(v68 - 8) + 64));
        }
        else
        {
          uint64_t v85 = v65;
          *char v89 = *v87;
          uint64_t v69 = *(int *)(v67 + 20);
          uint64_t v70 = &v89[v69];
          uint64_t v71 = v67;
          uint64_t v72 = &v87[v69];
          long long v73 = *(_OWORD *)&v87[v69 + 16];
          *uint64_t v70 = *(_OWORD *)&v87[v69];
          v70[1] = v73;
          uint64_t v74 = *(int *)(type metadata accessor for CommandGroupPlacement(0) + 20);
          unint64_t v75 = (char *)v70 + v74;
          int v84 = &v72[v74];
          uint64_t v76 = type metadata accessor for UUID();
          (*(void (**)(char *, unsigned char *, uint64_t))(*(void *)(v76 - 8) + 32))(v75, v84, v76);
          uint64_t v77 = *(int *)(v71 + 24);
          int v78 = &v89[v77];
          char v79 = (uint64_t *)&v87[v77];
          uint64_t v80 = *v79;
          if (*v79)
          {
            uint64_t v81 = v79[1];
            *int v78 = v80;
            v78[1] = v81;
          }
          else
          {
            *(_OWORD *)int v78 = *(_OWORD *)v79;
          }
          (*(void (**)(void))(v85 + 56))();
        }
        *((unsigned char *)v7 + v26[29]) = *((unsigned char *)v8 + v26[29]);
        *((unsigned char *)v7 + v26[30]) = *((unsigned char *)v8 + v26[30]);
        *((unsigned char *)v7 + v26[31]) = *((unsigned char *)v8 + v26[31]);
        *((unsigned char *)v7 + v26[32]) = *((unsigned char *)v8 + v26[32]);
        *(void *)((char *)v7 + v26[33]) = *(void *)((char *)v8 + v26[33]);
        (*((void (**)(_OWORD *, void, uint64_t, int *))__dst + 7))(v7, 0, 1, v26);
      }
    }
    swift_storeEnumTagMultiPayload();
    (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v92 + 56))(v7, 0, 1, v9);
  }
  uint64_t v82 = a3[8];
  *(void *)((char *)a1 + a3[7]) = *(void *)((char *)a2 + a3[7]);
  *(void *)((char *)a1 + v82) = *(void *)((char *)a2 + v82);
  *(void *)((char *)a1 + a3[9]) = *(void *)((char *)a2 + a3[9]);
  return a1;
}

uint64_t _IntroDocumentView<>.init<A>(_:for:backgroundStyle:_:onDocumentOpen:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, void (*a7)(uint64_t)@<X6>, uint64_t a8@<X7>, void *a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  uint64_t v20 = a12;
  uint64_t v21 = a13;
  uint64_t v22 = a14;
  uint64_t v23 = a15;
  uint64_t v24 = a16;
  uint64_t v25 = a17;
  uint64_t v26 = a6;
  _IntroDocumentView.init<A>(_:for:_:onDocumentOpen:background:accessories:)(a1, a2, a3, a4, a5, a7, a8, a10, a9, a11, (void (*)(uint64_t))partial apply for closure #1 in _IntroDocumentView<>.init<A>(_:for:backgroundStyle:_:onDocumentOpen:), (uint64_t)v19, (void (*)(void))closure #3 in _IntroDocumentView<>.init(_:for:_:onDocumentOpen:), 0, a12, a13, MEMORY[0x1E4F41618], (uint64_t)&type metadata for EmptyDocumentIntroAccessory, a15,
    a16,
    MEMORY[0x1E4F41610],
    (uint64_t)&protocol witness table for EmptyDocumentIntroAccessory);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a14 - 8) + 8))(a6, a14);
}

uint64_t _IntroDocumentView<>.init<A>(_:for:backgroundStyle:_:onDocumentOpen:)@<X0>(uint64_t a1@<X4>, uint64_t a2@<X5>, void (*a3)(uint64_t)@<X6>, uint64_t a4@<X7>, void *a5@<X8>, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v15 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v24 = a8;
  uint64_t v25 = a9;
  uint64_t v26 = a10;
  uint64_t v27 = a11;
  uint64_t v28 = a12;
  uint64_t v29 = a13;
  uint64_t v30 = a2;
  _IntroDocumentView.init<A>(_:for:_:onDocumentOpen:background:accessories:)(v15, v17, v16 & 1, v18, a1, a3, a4, a6, a5, a7, (void (*)(uint64_t))partial apply for closure #1 in _IntroDocumentView<>.init<A>(_:for:backgroundStyle:_:onDocumentOpen:), (uint64_t)v23, (void (*)(void))destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation, 0, a8, a9, MEMORY[0x1E4F41618], (uint64_t)&type metadata for EmptyDocumentIntroAccessory, a11,
    a12,
    MEMORY[0x1E4F41610],
    (uint64_t)&protocol witness table for EmptyDocumentIntroAccessory);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a10 - 8) + 8))(a2, a10);
}

uint64_t _IntroDocumentView<>.init<A, B, C>(_:for:backgroundStyle:_:onDocumentOpen:accessories:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void (*a4)(uint64_t)@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, void (*a8)(void)@<X7>, void *a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  long long v36 = a8;
  uint64_t v37 = a7;
  uint64_t v40 = a5;
  uint64_t v41 = a6;
  long long v39 = a4;
  uint64_t v33 = a3;
  uint64_t v38 = a2;
  uint64_t v32 = a1;
  uint64_t v35 = a9;
  uint64_t v31 = a14;
  uint64_t v34 = a10;
  uint64_t v20 = *(void *)(a13 - 8);
  uint64_t v30 = a19;
  double v21 = MEMORY[0x1F4188790](a1);
  (*(void (**)(char *, double))(v20 + 16))((char *)&v30 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0), v21);
  uint64_t v23 = Text.init<A>(_:)();
  uint64_t v43 = a11;
  uint64_t v44 = a12;
  uint64_t v25 = v31;
  uint64_t v45 = a13;
  uint64_t v46 = v31;
  uint64_t v47 = a15;
  uint64_t v48 = a16;
  uint64_t v49 = a17;
  uint64_t v50 = a18;
  uint64_t v51 = v30;
  uint64_t v52 = a20;
  uint64_t v26 = v33;
  uint64_t v53 = v33;
  _IntroDocumentView.init<A>(_:for:_:onDocumentOpen:background:accessories:)(v23, v27, v24 & 1, v28, v38, v39, v40, v41, v35, v37, (void (*)(uint64_t))partial apply for closure #1 in _IntroDocumentView<>.init<A, B, C>(_:for:backgroundStyle:_:onDocumentOpen:accessories:), (uint64_t)v42, v36, v34, a11, a12, MEMORY[0x1E4F41618], a15, a16,
    a17,
    MEMORY[0x1E4F41610],
    a20);
  (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v32, a13);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v25 - 8) + 8))(v26, v25);
}

id UIKitPageIndexView.makeCoordinator()()
{
  uint64_t v1 = *v0;
  uint64_t v2 = v0[1];
  uint64_t v3 = v0[2];
  int v4 = (objc_class *)type metadata accessor for Coordinator();
  swift_retain();
  swift_retain();
  char v5 = (char *)objc_allocWithZone(v4);
  uint64_t v6 = OBJC_IVAR____TtC7SwiftUIP33_59ABB005D29F0E32A3A965407533FE0D11Coordinator_lastIndicators;
  *(void *)&v5[v6] = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
  BOOL v7 = &v5[OBJC_IVAR____TtC7SwiftUIP33_59ABB005D29F0E32A3A965407533FE0D11Coordinator_index];
  *(void *)BOOL v7 = v1;
  *((void *)v7 + 1) = v2;
  *((void *)v7 + 2) = v3;
  v9.receiver = v5;
  v9.super_class = v4;
  return objc_msgSendSuper2(&v9, sel_init);
}

void UIKitPageIndexView.updateUIView(_:context:)(void *a1, uint64_t a2, uint64_t a3)
{
  int v4 = v3;
  uint64_t v5 = a3;
  uint64_t v8 = *(void *)(a3 + 16);
  uint64_t v9 = *(void *)(*(void *)(*(void *)(a3 + 24) + 8) + 8);
  uint64_t v10 = *(uint64_t **)(v9 + 8);
  unint64_t v155 = (void *)type metadata accessor for EnumeratedSequence();
  MEMORY[0x1F4188790](v155);
  uint64_t v154 = (void *)((char *)v143 - v11);
  int64_t v156 = v10;
  uint64_t v152 = type metadata accessor for EnumeratedSequence.Iterator();
  v143[0] = *(void *)(v152 - 8);
  MEMORY[0x1F4188790](v152);
  int v157 = (char *)v143 - v12;
  long long v13 = *(char **)(a2 + 40);
  uint64_t v14 = v4[1];
  uint64_t v15 = v4[2];
  char v16 = &v13[OBJC_IVAR____TtC7SwiftUIP33_59ABB005D29F0E32A3A965407533FE0D11Coordinator_index];
  *(void *)char v16 = *v4;
  *((void *)v16 + 1) = v14;
  *((void *)v16 + 2) = v15;
  swift_retain();
  swift_retain();
  v148 = v13;
  uint64_t v17 = a1;
  swift_release();
  swift_release();
  uint64_t v147 = (char *)v4 + *(int *)(v5 + 36);
  v143[1] = v9;
  uint64_t v18 = dispatch thunk of Collection.count.getter();
  id v19 = objc_msgSend(a1, sel_numberOfPages);
  v151 = a1;
  uint64_t v145 = v4;
  uint64_t v146 = v8;
  uint64_t v144 = v5;
  if (v19 == (id)v18) {
    goto LABEL_32;
  }
  objc_msgSend(a1, sel_setNumberOfPages_, v18);
  uint64_t v20 = &v148[OBJC_IVAR____TtC7SwiftUIP33_59ABB005D29F0E32A3A965407533FE0D11Coordinator_lastIndicators];
  swift_beginAccess();
  uint64_t v21 = *(void *)v20;
  uint64_t v22 = *(void *)v20 + 64;
  uint64_t v23 = 1 << *(unsigned char *)(*(void *)v20 + 32);
  uint64_t v24 = -1;
  if (v23 < 64) {
    uint64_t v24 = ~(-1 << v23);
  }
  unint64_t v25 = v24 & *(void *)(*(void *)v20 + 64);
  int64_t v26 = (unint64_t)(v23 + 63) >> 6;
  swift_bridgeObjectRetain();
  int64_t v27 = 0;
  while (v25)
  {
    unint64_t v38 = __clz(__rbit64(v25));
    v25 &= v25 - 1;
    unint64_t v39 = v38 | (v27 << 6);
LABEL_27:
    uint64_t v43 = *(void *)(*(void *)(v21 + 48) + 8 * v39);
    if (v43 >= v18)
    {
      swift_beginAccess();
      unint64_t v44 = specialized __RawDictionaryStorage.find<A>(_:)(v43);
      if (v45)
      {
        unint64_t v46 = v44;
        int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v48 = *(void *)v20;
        v210[0] = *(void *)v20;
        *(void *)uint64_t v20 = 0x8000000000000000;
        if (!isUniquelyReferenced_nonNull_native)
        {
          specialized _NativeDictionary.copy()();
          uint64_t v48 = v210[0];
        }
        uint64_t v28 = *(void *)(v48 + 56) + 184 * v46;
        long long v30 = *(_OWORD *)(v28 + 32);
        long long v29 = *(_OWORD *)(v28 + 48);
        long long v31 = *(_OWORD *)(v28 + 16);
        long long v204 = *(_OWORD *)v28;
        v205[0] = v31;
        v205[1] = v30;
        v205[2] = v29;
        long long v32 = *(_OWORD *)(v28 + 64);
        long long v33 = *(_OWORD *)(v28 + 80);
        long long v34 = *(_OWORD *)(v28 + 96);
        v205[6] = *(_OWORD *)(v28 + 112);
        v205[5] = v34;
        v205[4] = v33;
        v205[3] = v32;
        long long v35 = *(_OWORD *)(v28 + 128);
        long long v36 = *(_OWORD *)(v28 + 144);
        long long v37 = *(_OWORD *)(v28 + 160);
        *(_DWORD *)&v206[15] = *(_DWORD *)(v28 + 175);
        *(_OWORD *)v206 = v37;
        v205[8] = v36;
        v205[7] = v35;
        specialized _NativeDictionary._delete(at:)(v46, v48);
        *(void *)uint64_t v20 = v48;
        swift_bridgeObjectRelease();
        outlined release of Image.Resolved((uint64_t)&v204);
      }
      swift_endAccess();
    }
  }
  int64_t v40 = v27 + 1;
  if (__OFADD__(v27, 1))
  {
    __break(1u);
LABEL_88:
    __break(1u);
LABEL_89:
    __break(1u);
    goto LABEL_90;
  }
  if (v40 >= v26) {
    goto LABEL_31;
  }
  unint64_t v41 = *(void *)(v22 + 8 * v40);
  ++v27;
  if (v41) {
    goto LABEL_26;
  }
  int64_t v27 = v40 + 1;
  if (v40 + 1 >= v26) {
    goto LABEL_31;
  }
  unint64_t v41 = *(void *)(v22 + 8 * v27);
  if (v41) {
    goto LABEL_26;
  }
  int64_t v27 = v40 + 2;
  if (v40 + 2 >= v26) {
    goto LABEL_31;
  }
  unint64_t v41 = *(void *)(v22 + 8 * v27);
  if (v41) {
    goto LABEL_26;
  }
  int64_t v27 = v40 + 3;
  if (v40 + 3 >= v26) {
    goto LABEL_31;
  }
  unint64_t v41 = *(void *)(v22 + 8 * v27);
  if (v41) {
    goto LABEL_26;
  }
  int64_t v27 = v40 + 4;
  if (v40 + 4 >= v26) {
    goto LABEL_31;
  }
  unint64_t v41 = *(void *)(v22 + 8 * v27);
  if (v41)
  {
LABEL_26:
    unint64_t v25 = (v41 - 1) & v41;
    unint64_t v39 = __clz(__rbit64(v41)) + (v27 << 6);
    goto LABEL_27;
  }
  int64_t v42 = v40 + 5;
  if (v42 >= v26)
  {
LABEL_31:
    swift_release();
    uint64_t v17 = v151;
    int v4 = v145;
    uint64_t v8 = v146;
    uint64_t v5 = v144;
LABEL_32:
    if (objc_msgSend(v17, sel_backgroundStyle) != *(id *)((char *)v4 + *(int *)(v5 + 40))) {
      objc_msgSend(v17, sel_setBackgroundStyle_);
    }
    unsigned __int8 v49 = objc_msgSend(v17, sel_allowsContinuousInteraction);
    uint64_t v50 = v152;
    if ((v49 & 1) == 0) {
      objc_msgSend(v17, sel_setAllowsContinuousInteraction_, 1);
    }
    int v51 = UIKitPageIndexView.displayMode.getter(v5);
    if ((v51 != 1) != objc_msgSend(v17, sel_hidesForSinglePage)) {
      objc_msgSend(v17, sel_setHidesForSinglePage_, v51 != 1);
    }
    MEMORY[0x18C115A30](v8, v156);
    EnumeratedSequence.makeIterator()();
    uint64_t v52 = &v148[OBJC_IVAR____TtC7SwiftUIP33_59ABB005D29F0E32A3A965407533FE0D11Coordinator_lastIndicators];
    swift_beginAccess();
    EnumeratedSequence.Iterator.next()();
    outlined init with take of (offset: Int, element: PlatformItem)?((uint64_t)&v204, (uint64_t)&v215);
    if (!v216)
    {
LABEL_82:
      (*(void (**)(char *, uint64_t))(v143[0] + 8))(v157, v50);
      id v140 = objc_msgSend(v17, sel_currentPage);
      if (v140 != (id)UIKitPageIndexView.index.getter()) {
        objc_msgSend(v17, sel_setCurrentPage_, UIKitPageIndexView.index.getter());
      }
      if (dispatch thunk of Collection.isEmpty.getter())
      {
      }
      else
      {
        v210[0] = UIKitPageIndexView.index.getter();
        uint64_t v141 = (void (*)(uint64_t *, void))dispatch thunk of Collection.subscript.read();
        outlined init with copy of PlatformItem(v142, (uint64_t)&v204);
        v141(&v215, 0);
        specialized PlatformItem.applyAccessibilityProperties(to:)(v17, (uint64_t)&v204);

        outlined destroy of PlatformItem((uint64_t)&v204);
      }
      return;
    }
    unint64_t v155 = &v210[3];
    int64_t v156 = &v216;
    Swift::Int v153 = &v207;
    uint64_t v154 = &v214;
    uint64_t v149 = (uint64_t)&v193 + 8;
    uint64_t v150 = (uint64_t)v205 + 8;
    uint64_t v53 = MEMORY[0x1E4F41550];
    while (1)
    {
      uint64_t v74 = v215;
      memcpy(v210, v156, sizeof(v210));
      _s7SwiftUI5ImageVAAE8ResolvedVSgWObTm_4((uint64_t)v155, (uint64_t)v212, (unint64_t *)&lazy cache variable for type metadata for PlatformItem.PrimaryContent?, (uint64_t)&type metadata for PlatformItem.PrimaryContent);
      _s7SwiftUI5ImageVAAE8ResolvedVSgWObTm_4((uint64_t)v212, (uint64_t)v213, (unint64_t *)&lazy cache variable for type metadata for PlatformItem.PrimaryContent?, (uint64_t)&type metadata for PlatformItem.PrimaryContent);
      if (_s7SwiftUI12PlatformItemV14PrimaryContentVSgWOg(v213) == 1)
      {
        _s7SwiftUI5ImageVAAE8ResolvedVSgWOi0_((uint64_t)&v204);
        unint64_t v75 = &v204;
      }
      else
      {
        uint64_t v76 = (uint64_t)v154;
        outlined retain of Image.Resolved?((uint64_t)v154, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, int))outlined copy of Image.Resolved?);
        unint64_t v75 = (long long *)v76;
      }
      _s7SwiftUI5ImageVAAE8ResolvedVSgWObTm_4((uint64_t)v75, (uint64_t)v211, (unint64_t *)&lazy cache variable for type metadata for Image.Resolved?, v53);
      uint64_t v77 = *(void *)v52;
      if (*(void *)(*(void *)v52 + 16)
        && (unint64_t v78 = specialized __RawDictionaryStorage.find<A>(_:)(v74), (v79 & 1) != 0))
      {
        uint64_t v80 = (char *)(*(void *)(v77 + 56) + 184 * v78);
        long long v82 = *((_OWORD *)v80 + 2);
        long long v81 = *((_OWORD *)v80 + 3);
        long long v83 = *((_OWORD *)v80 + 1);
        long long v192 = *(_OWORD *)v80;
        long long v193 = v83;
        long long v194 = v82;
        long long v195 = v81;
        long long v84 = *((_OWORD *)v80 + 4);
        long long v85 = *((_OWORD *)v80 + 5);
        long long v86 = *((_OWORD *)v80 + 7);
        long long v198 = *((_OWORD *)v80 + 6);
        long long v199 = v86;
        long long v196 = v84;
        long long v197 = v85;
        long long v87 = *((_OWORD *)v80 + 8);
        long long v88 = *((_OWORD *)v80 + 9);
        long long v89 = *((_OWORD *)v80 + 10);
        *(_DWORD *)((char *)v202 + 15) = *(_DWORD *)(v80 + 175);
        v202[0] = v89;
        long long v201 = v88;
        long long v200 = v87;
        memmove(&v204, v80, 0xB3uLL);
        destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(&v204, v90, v91, v92);
        outlined retain of Image.Resolved((uint64_t)&v192);
      }
      else
      {
        _s7SwiftUI5ImageVAAE8ResolvedVSgWOi0_((uint64_t)&v204);
      }
      _s7SwiftUI5ImageVAAE8ResolvedVSgWObTm_4((uint64_t)&v204, (uint64_t)v209, (unint64_t *)&lazy cache variable for type metadata for Image.Resolved?, v53);
      _s7SwiftUI5ImageVAAE8ResolvedVSgWObTm_4((uint64_t)v211, (uint64_t)v208, (unint64_t *)&lazy cache variable for type metadata for Image.Resolved?, v53);
      if (_s7SwiftUI5ImageVAAE8ResolvedVSgWOg((uint64_t)v208) == 1)
      {
        _s7SwiftUI5ImageVAAE8ResolvedVSgWObTm_4((uint64_t)v209, (uint64_t)&v204, (unint64_t *)&lazy cache variable for type metadata for Image.Resolved?, v53);
        if (_s7SwiftUI5ImageVAAE8ResolvedVSgWOg((uint64_t)&v204) == 1) {
          goto LABEL_43;
        }
      }
      else
      {
        _s7SwiftUI5ImageVAAE8ResolvedVSgWObTm_4((uint64_t)v211, (uint64_t)&v192, (unint64_t *)&lazy cache variable for type metadata for Image.Resolved?, v53);
        _s7SwiftUI5ImageVAAE8ResolvedVSgWObTm_4((uint64_t)v209, (uint64_t)&v204, (unint64_t *)&lazy cache variable for type metadata for Image.Resolved?, v53);
        if (_s7SwiftUI5ImageVAAE8ResolvedVSgWOg((uint64_t)&v204) != 1)
        {
          _s7SwiftUI5ImageVAAE8ResolvedVSgWObTm_4((uint64_t)v209, (uint64_t)&v172, (unint64_t *)&lazy cache variable for type metadata for Image.Resolved?, v53);
          long long v169 = v179;
          long long v170 = v180;
          v171[0] = v181[0];
          *(_DWORD *)((char *)v171 + 15) = *(_DWORD *)((char *)v181 + 15);
          long long v165 = v175;
          long long v166 = v176;
          long long v167 = v177;
          long long v168 = v178;
          long long v161 = v172;
          long long v162 = v173;
          long long v163 = v174[0];
          long long v164 = v174[1];
          outlined retain of Image.Resolved?((uint64_t)v211, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, int))outlined copy of Image.Resolved?);
          char v121 = specialized static Image.Resolved.== infix(_:_:)((uint64_t)&v192, (uint64_t)&v161);
          outlined retain of Image.Resolved?((uint64_t)v209, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, int))outlined consume of Image.Resolved?);
          long long v189 = v200;
          long long v190 = v201;
          v191[0] = v202[0];
          *(_DWORD *)((char *)v191 + 15) = *(_DWORD *)((char *)v202 + 15);
          long long v185 = v196;
          long long v186 = v197;
          long long v187 = v198;
          long long v188 = v199;
          long long v182 = v192;
          long long v183 = v193;
          v184[0] = v194;
          v184[1] = v195;
          outlined release of Image.Resolved((uint64_t)&v182);
          outlined retain of Image.Resolved?((uint64_t)v211, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, int))outlined consume of Image.Resolved?);
          if (v121) {
            goto LABEL_43;
          }
          goto LABEL_57;
        }
        long long v179 = v200;
        long long v180 = v201;
        v181[0] = v202[0];
        *(_DWORD *)((char *)v181 + 15) = *(_DWORD *)((char *)v202 + 15);
        long long v175 = v196;
        long long v176 = v197;
        long long v177 = v198;
        long long v178 = v199;
        long long v172 = v192;
        long long v173 = v193;
        v174[0] = v194;
        v174[1] = v195;
        _s7SwiftUI5ImageVAAE8ResolvedVSgWObTm_4((uint64_t)v211, (uint64_t)&v182, (unint64_t *)&lazy cache variable for type metadata for Image.Resolved?, v53);
        outlined retain of Image.Resolved((uint64_t)&v182);
        outlined release of Image.Resolved((uint64_t)&v172);
      }
      _s7SwiftUI5ImageVAAE8ResolvedVSgWObTm_4((uint64_t)v211, (uint64_t)&v204, (unint64_t *)&lazy cache variable for type metadata for Image.Resolved?, v53);
      _s7SwiftUI5ImageVAAE8ResolvedVSgWObTm_4((uint64_t)v209, (uint64_t)v153, (unint64_t *)&lazy cache variable for type metadata for Image.Resolved?, v53);
      outlined release of (Image.Resolved?, Image.Resolved?)((uint64_t)&v204);
LABEL_57:
      _s7SwiftUI5ImageVAAE8ResolvedVSgWObTm_4((uint64_t)v212, (uint64_t)&v204, (unint64_t *)&lazy cache variable for type metadata for PlatformItem.PrimaryContent?, (uint64_t)&type metadata for PlatformItem.PrimaryContent);
      if (_s7SwiftUI12PlatformItemV14PrimaryContentVSgWOg((uint64_t *)&v204) == 1
        || (_s7SwiftUI5ImageVAAE8ResolvedVSgWObTm_4(v150, (uint64_t)&v182, (unint64_t *)&lazy cache variable for type metadata for Image.Resolved?, v53), _s7SwiftUI5ImageVAAE8ResolvedVSgWOg((uint64_t)&v182) == 1))
      {
        long long v93 = 0;
      }
      else if (*((void *)&v189 + 1))
      {
        swift_unknownObjectRetain();
        self;
        long long v93 = (void *)swift_dynamicCastObjCClassUnconditional();
      }
      else
      {
        uint64_t v135 = (void *)v182;
        char v136 = BYTE8(v182);
        *(void *)&long long v172 = v182;
        BYTE8(v172) = BYTE8(v182);
        long long v173 = v183;
        *(void *)&v174[0] = *(void *)&v184[0];
        BYTE8(v174[0]) = BYTE8(v184[0]);
        *(_OWORD *)((char *)v174 + 12) = *(_OWORD *)((char *)v184 + 12);
        BYTE12(v174[1]) = BYTE12(v184[1]);
        long long v175 = v185;
        long long v176 = v186;
        LODWORD(v177) = v187;
        _s7SwiftUI5ImageVAAE8ResolvedVSgWObTm_4((uint64_t)v212, (uint64_t)&v192, (unint64_t *)&lazy cache variable for type metadata for PlatformItem.PrimaryContent?, (uint64_t)&type metadata for PlatformItem.PrimaryContent);
        uint64_t v137 = v203;
        uint64_t v138 = v150;
        outlined retain of Image.Resolved?(v150, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, int))outlined copy of Image.Resolved?);
        outlined copy of GraphicsImage.Contents?(v135, v136);
        swift_retain();
        long long v93 = GraphicsImage.makePlatformImage(fixedSymbolConfiguration:flattenMaskColor:colorResolver:)(0, 0, v137);
        uint64_t v50 = v152;
        swift_release();
        outlined retain of Image.Resolved?(v138, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, int))outlined consume of Image.Resolved?);
        char v139 = v136;
        uint64_t v17 = v151;
        outlined consume of GraphicsImage.Contents?(v135, v139);
      }
      objc_msgSend(v17, sel_setIndicatorImage_forPage_, v93, v74);

      _s7SwiftUI5ImageVAAE8ResolvedVSgWObTm_4((uint64_t)v212, (uint64_t)&v192, (unint64_t *)&lazy cache variable for type metadata for PlatformItem.PrimaryContent?, (uint64_t)&type metadata for PlatformItem.PrimaryContent);
      if (_s7SwiftUI12PlatformItemV14PrimaryContentVSgWOg((uint64_t *)&v192) == 1)
      {
        _s7SwiftUI5ImageVAAE8ResolvedVSgWOi0_((uint64_t)&v172);
        uint64_t v94 = &v172;
      }
      else
      {
        uint64_t v95 = v149;
        outlined retain of Image.Resolved?(v149, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, int))outlined copy of Image.Resolved?);
        uint64_t v94 = (long long *)v95;
      }
      _s7SwiftUI5ImageVAAE8ResolvedVSgWObTm_4((uint64_t)v94, (uint64_t)&v182, (unint64_t *)&lazy cache variable for type metadata for Image.Resolved?, v53);
      swift_beginAccess();
      _s7SwiftUI5ImageVAAE8ResolvedVSgWObTm_4((uint64_t)&v182, (uint64_t)&v172, (unint64_t *)&lazy cache variable for type metadata for Image.Resolved?, v53);
      if (_s7SwiftUI5ImageVAAE8ResolvedVSgWOg((uint64_t)&v172) == 1)
      {
        unint64_t v96 = specialized __RawDictionaryStorage.find<A>(_:)(v74);
        if (v97)
        {
          unint64_t v98 = v96;
          int v99 = swift_isUniquelyReferenced_nonNull_native();
          uint64_t v100 = *(void *)v52;
          *(void *)&v158[0] = *(void *)v52;
          *(void *)uint64_t v52 = 0x8000000000000000;
          if (!v99)
          {
            specialized _NativeDictionary.copy()();
            uint64_t v100 = *(void *)&v158[0];
          }
          uint64_t v101 = *(void *)(v100 + 56) + 184 * v98;
          long long v103 = *(_OWORD *)(v101 + 32);
          long long v102 = *(_OWORD *)(v101 + 48);
          long long v104 = *(_OWORD *)(v101 + 16);
          long long v161 = *(_OWORD *)v101;
          long long v162 = v104;
          long long v163 = v103;
          long long v164 = v102;
          long long v105 = *(_OWORD *)(v101 + 64);
          long long v106 = *(_OWORD *)(v101 + 80);
          long long v107 = *(_OWORD *)(v101 + 112);
          long long v167 = *(_OWORD *)(v101 + 96);
          long long v168 = v107;
          long long v165 = v105;
          long long v166 = v106;
          long long v108 = *(_OWORD *)(v101 + 128);
          long long v109 = *(_OWORD *)(v101 + 144);
          long long v110 = *(_OWORD *)(v101 + 160);
          *(_DWORD *)((char *)v171 + 15) = *(_DWORD *)(v101 + 175);
          long long v170 = v109;
          v171[0] = v110;
          long long v169 = v108;
          specialized _NativeDictionary._delete(at:)(v98, v100);
          *(void *)uint64_t v52 = v100;
          swift_bridgeObjectRelease();
          outlined release of Image.Resolved((uint64_t)&v161);
        }
      }
      else
      {
        char v111 = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v160 = *(void **)v52;
        BOOL v112 = v160;
        *(void *)uint64_t v52 = 0x8000000000000000;
        unint64_t v114 = specialized __RawDictionaryStorage.find<A>(_:)(v74);
        uint64_t v115 = v112[2];
        BOOL v116 = (v113 & 1) == 0;
        uint64_t v117 = v115 + v116;
        if (__OFADD__(v115, v116)) {
          goto LABEL_88;
        }
        char v118 = v113;
        if (v112[3] >= v117)
        {
          if ((v111 & 1) == 0) {
            specialized _NativeDictionary.copy()();
          }
        }
        else
        {
          specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v117, v111);
          unint64_t v119 = specialized __RawDictionaryStorage.find<A>(_:)(v74);
          if ((v118 & 1) != (v120 & 1)) {
            goto LABEL_91;
          }
          unint64_t v114 = v119;
        }
        uint64_t v50 = v152;
        _s7SwiftUI5ImageVAAE8ResolvedVSgWObTm_4((uint64_t)&v182, (uint64_t)&v161, (unint64_t *)&lazy cache variable for type metadata for Image.Resolved?, v53);
        if (v118)
        {
          int v54 = v160;
          uint64_t v55 = v160[7] + 184 * v114;
          long long v56 = *(_OWORD *)(v55 + 48);
          long long v58 = *(_OWORD *)v55;
          long long v57 = *(_OWORD *)(v55 + 16);
          v158[2] = *(_OWORD *)(v55 + 32);
          v158[3] = v56;
          v158[0] = v58;
          v158[1] = v57;
          long long v59 = *(_OWORD *)(v55 + 112);
          long long v61 = *(_OWORD *)(v55 + 64);
          long long v60 = *(_OWORD *)(v55 + 80);
          v158[6] = *(_OWORD *)(v55 + 96);
          v158[7] = v59;
          v158[4] = v61;
          v158[5] = v60;
          long long v63 = *(_OWORD *)(v55 + 144);
          long long v62 = *(_OWORD *)(v55 + 160);
          long long v64 = *(_OWORD *)(v55 + 128);
          *(_DWORD *)&v159[15] = *(_DWORD *)(v55 + 175);
          v158[9] = v63;
          *(_OWORD *)uint64_t v159 = v62;
          v158[8] = v64;
          outlined release of Image.Resolved((uint64_t)v158);
          long long v65 = v164;
          long long v67 = v161;
          long long v66 = v162;
          *(_OWORD *)(v55 + 32) = v163;
          *(_OWORD *)(v55 + 48) = v65;
          *(_OWORD *)uint64_t v55 = v67;
          *(_OWORD *)(v55 + 16) = v66;
          long long v68 = v168;
          long long v70 = v165;
          long long v69 = v166;
          *(_OWORD *)(v55 + 96) = v167;
          *(_OWORD *)(v55 + 112) = v68;
          *(_OWORD *)(v55 + 64) = v70;
          *(_OWORD *)(v55 + 80) = v69;
          long long v72 = v170;
          long long v71 = v171[0];
          long long v73 = v169;
          *(_DWORD *)(v55 + 175) = *(_DWORD *)((char *)v171 + 15);
          *(_OWORD *)(v55 + 144) = v72;
          *(_OWORD *)(v55 + 160) = v71;
          *(_OWORD *)(v55 + 128) = v73;
        }
        else
        {
          int v54 = v160;
          v160[(v114 >> 6) + 8] |= 1 << v114;
          *(void *)(v54[6] + 8 * v114) = v74;
          uint64_t v122 = v54[7] + 184 * v114;
          long long v123 = v164;
          long long v125 = v161;
          long long v124 = v162;
          *(_OWORD *)(v122 + 32) = v163;
          *(_OWORD *)(v122 + 48) = v123;
          *(_OWORD *)uint64_t v122 = v125;
          *(_OWORD *)(v122 + 16) = v124;
          long long v126 = v168;
          long long v128 = v165;
          long long v127 = v166;
          *(_OWORD *)(v122 + 96) = v167;
          *(_OWORD *)(v122 + 112) = v126;
          *(_OWORD *)(v122 + 64) = v128;
          *(_OWORD *)(v122 + 80) = v127;
          long long v129 = v169;
          long long v130 = v170;
          long long v131 = v171[0];
          *(_DWORD *)(v122 + 175) = *(_DWORD *)((char *)v171 + 15);
          *(_OWORD *)(v122 + 144) = v130;
          *(_OWORD *)(v122 + 160) = v131;
          *(_OWORD *)(v122 + 128) = v129;
          uint64_t v132 = v54[2];
          BOOL v133 = __OFADD__(v132, 1);
          uint64_t v134 = v132 + 1;
          if (v133) {
            goto LABEL_89;
          }
          v54[2] = v134;
        }
        *(void *)uint64_t v52 = v54;
        swift_bridgeObjectRelease();
        uint64_t v17 = v151;
      }
      swift_endAccess();
LABEL_43:
      outlined destroy of PlatformItem((uint64_t)v210);
      EnumeratedSequence.Iterator.next()();
      outlined init with take of (offset: Int, element: PlatformItem)?((uint64_t)&v204, (uint64_t)&v215);
      if (!v216) {
        goto LABEL_82;
      }
    }
  }
  unint64_t v41 = *(void *)(v22 + 8 * v42);
  if (v41)
  {
    int64_t v27 = v42;
    goto LABEL_26;
  }
  while (1)
  {
    int64_t v27 = v42 + 1;
    if (__OFADD__(v42, 1)) {
      break;
    }
    if (v27 >= v26) {
      goto LABEL_31;
    }
    unint64_t v41 = *(void *)(v22 + 8 * v27);
    ++v42;
    if (v41) {
      goto LABEL_26;
    }
  }
LABEL_90:
  __break(1u);
LABEL_91:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
}

uint64_t outlined consume of TabCustomizationID?(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  if (a3 != 255) {
    return outlined consume of TabCustomizationID.Base();
  }
  return result;
}

uint64_t SidebarButtonStyle._Body.SidebarButtonContent.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for PrimitiveButtonStyleConfiguration(0);
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = *(void *)(v4 + 64);
  MEMORY[0x1F4188790](v3 - 8);
  uint64_t v6 = (unsigned __int8 *)(v1
                         + *(int *)(type metadata accessor for SidebarButtonStyle._Body.SidebarButtonContent(0) + 24));
  _s7SwiftUI33PrimitiveButtonStyleConfigurationVWOcTm_5((uint64_t)v6, (uint64_t)&v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for PrimitiveButtonStyleConfiguration);
  unint64_t v7 = (*(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v8 = swift_allocObject();
  outlined init with take of SidebarButtonStyle._Body((uint64_t)&v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), v8 + v7, type metadata accessor for PrimitiveButtonStyleConfiguration);
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v24 = swift_getKeyPath();
  uint64_t v23 = swift_getKeyPath();
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(0);
  uint64_t v9 = swift_getKeyPath();
  uint64_t v10 = swift_getKeyPath();
  uint64_t v11 = *v6;
  int v12 = v6[1];
  uint64_t v13 = *(void *)v1;
  uint64_t v14 = *(unsigned __int8 *)(v1 + 8);
  outlined copy of Environment<Bool>.Content(*(void *)v1, *(unsigned char *)(v1 + 8));
  char v15 = specialized Environment.wrappedValue.getter(v13, v14);
  outlined consume of Environment<Bool?>.Content(v13, v14);
  uint64_t v16 = *(void *)(v1 + 16);
  uint64_t v17 = *(unsigned __int8 *)(v1 + 24);
  outlined copy of Environment<HoverEffect?>.Content(v16, v17);
  uint64_t v18 = specialized Environment.wrappedValue.getter(v16, v17);
  uint64_t result = outlined consume of Environment<AnyShapeStyle?>.Content(v16, v17);
  if (!v18)
  {
    uint64_t result = static HierarchicalShapeStyle.sharedPrimary.getter();
    uint64_t v18 = result;
  }
  __int16 v27 = 0;
  uint64_t v20 = 256;
  if (!v12) {
    uint64_t v20 = 0;
  }
  uint64_t v21 = 0x10000;
  char v26 = 0;
  if ((v15 & 1) == 0) {
    uint64_t v21 = 0;
  }
  *(void *)a1 = partial apply for implicit closure #2 in implicit closure #1 in FlexibleBorderedButtonStyle.makeBody(configuration:);
  *(void *)(a1 + 8) = v8;
  *(unsigned char *)(a1 + 16) = 1;
  *(void *)(a1 + 24) = KeyPath;
  *(unsigned char *)(a1 + 32) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 40) = v24;
  *(_WORD *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = v23;
  *(unsigned char *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = v9;
  *(unsigned char *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = v10;
  *(unsigned char *)(a1 + 112) = 0;
  *(void *)(a1 + 120) = v20 | v11 | v21;
  *(void *)(a1 + 128) = v18;
  return result;
}

uint64_t type metadata completion function for SceneStorageValues.Entry()
{
  return swift_initClassMetadata2();
}

uint64_t associated type witness table accessor for View.Body : View in ResolvedGaugeStyle()
{
  return swift_getOpaqueTypeConformance2();
}

unint64_t lazy protocol witness table accessor for type PresentationDetent.CustomPresentationDetentWrapper and conformance PresentationDetent.CustomPresentationDetentWrapper()
{
  unint64_t result = lazy protocol witness table cache variable for type PresentationDetent.CustomPresentationDetentWrapper and conformance PresentationDetent.CustomPresentationDetentWrapper;
  if (!lazy protocol witness table cache variable for type PresentationDetent.CustomPresentationDetentWrapper and conformance PresentationDetent.CustomPresentationDetentWrapper)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PresentationDetent.CustomPresentationDetentWrapper and conformance PresentationDetent.CustomPresentationDetentWrapper);
  }
  return result;
}

uint64_t assignWithTake for InspectorSplitView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v6 = *(unsigned char *)(a2 + 16);
  char v7 = *(unsigned char *)(a2 + 17);
  uint64_t v8 = *(void *)a1;
  uint64_t v9 = *(void *)(a1 + 8);
  char v10 = *(unsigned char *)(a1 + 17);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v11 = *(unsigned __int8 *)(a1 + 16);
  *(unsigned char *)(a1 + 16) = v6;
  *(unsigned char *)(a1 + 17) = v7;
  outlined consume of StateOrBinding<Bool>(v8, v9, v11, v10);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  uint64_t v12 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v13 = v12 + 40;
  uint64_t v14 = *(unsigned __int8 *)(v12 + 80);
  uint64_t v15 = (v14 + 57 + a1) & ~v14;
  uint64_t v16 = (v14 + 57 + a2) & ~v14;
  (*(void (**)(uint64_t, uint64_t))(v12 + 40))(v15, v16);
  uint64_t v17 = *(void *)(v13 + 24);
  uint64_t v18 = *(void *)(*(void *)(a3 + 24) - 8);
  uint64_t v19 = v18 + 40;
  uint64_t v20 = *(unsigned __int8 *)(v18 + 80);
  uint64_t v21 = v17 + v20;
  uint64_t v22 = (v21 + v15) & ~v20;
  uint64_t v23 = (v21 + v16) & ~v20;
  (*(void (**)(uint64_t, uint64_t))(v18 + 40))(v22, v23);
  uint64_t v24 = *(void *)(v19 + 24);
  unint64_t v25 = (unsigned char *)(v24 + v22);
  char v26 = (unsigned char *)(v24 + v23);
  *unint64_t v25 = *v26;
  v25[1] = v26[1];
  unint64_t v27 = (unint64_t)(v25 + 9) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v28 = (unint64_t)(v26 + 9) & 0xFFFFFFFFFFFFFFF8;
  long long v29 = (_OWORD *)(v28 + 8);
  *(void *)unint64_t v27 = *(void *)v28;
  swift_bridgeObjectRelease();
  long long v30 = (_OWORD *)(v27 + 8);
  if (*(void *)(v27 + 16))
  {
    if (*(void *)(v28 + 16))
    {
      *(void *)(v27 + 8) = *(void *)(v28 + 8);
      swift_release();
      *(void *)(v27 + 16) = *(void *)(v28 + 16);
      swift_release();
      *(_OWORD *)(v27 + 24) = *(_OWORD *)(v28 + 24);
    }
    else
    {
      outlined destroy of Binding<PresentationDetent>(v27 + 8);
      long long v32 = *(_OWORD *)(v28 + 24);
      _OWORD *v30 = *v29;
      *(_OWORD *)(v27 + 24) = v32;
    }
  }
  else
  {
    long long v31 = *(_OWORD *)(v28 + 24);
    _OWORD *v30 = *v29;
    *(_OWORD *)(v27 + 24) = v31;
  }
  long long v34 = (unint64_t *)(v27 + 48);
  long long v33 = *(void **)(v27 + 48);
  *(unsigned char *)(v27 + 40) = *(unsigned char *)(v28 + 40);
  *(unsigned char *)(v27 + 41) = *(unsigned char *)(v28 + 41);
  unint64_t v35 = *(void *)(v28 + 48);
  if (v33 == (void *)2)
  {
    if (v35 == 2) {
      unint64_t v35 = 2;
    }
    goto LABEL_15;
  }
  if (v35 == 2)
  {
    outlined destroy of PresentationDimmingBehavior(v27 + 48);
LABEL_14:
    unint64_t v35 = *(void *)(v28 + 48);
    goto LABEL_15;
  }
  if ((unint64_t)v33 < 2)
  {
LABEL_15:
    *long long v34 = v35;
    goto LABEL_16;
  }
  if (v35 < 2)
  {
    outlined destroy of ModifiedContent<HStack<TupleView<(InspectorColumnSeparator, ModifiedContent<_VariadicView_Children, _FlexFrameLayout>)>>, _BackgroundModifier<InspectorSeparatorShadow>>(v27 + 48, (uint64_t (*)(void))type metadata accessor for UISheetPresentationControllerDetentIdentifier);
    goto LABEL_14;
  }
  *long long v34 = v35;

LABEL_16:
  *(unsigned char *)(v27 + 56) = *(unsigned char *)(v28 + 56);
  *(unsigned char *)(v27 + 57) = *(unsigned char *)(v28 + 57);
  *(unsigned char *)(v27 + 58) = *(unsigned char *)(v28 + 58);
  uint64_t v36 = *(void *)(v28 + 64);
  *(unsigned char *)(v27 + 72) = *(unsigned char *)(v28 + 72);
  *(void *)(v27 + 64) = v36;
  uint64_t v37 = *(void *)(v28 + 80);
  *(unsigned char *)(v27 + 88) = *(unsigned char *)(v28 + 88);
  *(void *)(v27 + 80) = v37;
  if (*(void *)(v27 + 120)) {
    __swift_destroy_boxed_opaque_existential_1(v27 + 96);
  }
  long long v38 = *(_OWORD *)(v28 + 96);
  long long v39 = *(_OWORD *)(v28 + 112);
  *(void *)(v27 + 128) = *(void *)(v28 + 128);
  *(_OWORD *)(v27 + 96) = v38;
  *(_OWORD *)(v27 + 112) = v39;
  *(unsigned char *)(v27 + 136) = *(unsigned char *)(v28 + 136);
  return a1;
}

uint64_t associated type witness table accessor for StyleModifier.StyleBody : View in GaugeStyleModifier<A>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t *initializeBufferWithCopyOfBuffer for DocumentLaunchView(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(_DWORD *)(v5 + 80);
  uint64_t v7 = *(void *)(v5 + 64);
  int v8 = *(_DWORD *)(v5 + 80) & 0x100000;
  uint64_t v9 = *a2;
  *a1 = *a2;
  BOOL v10 = v6 <= 7 && v8 == 0;
  if (v10
    && (uint64_t v11 = v7 + 7,
        ((((((((((((v7 + 7 + ((v6 + 8) & ~v6)) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)
            + 39) & 0xFFFFFFFFFFFFFFF8)
          + 15) & 0xFFFFFFFFFFFFFFF8)
        + 23) & 0xFFFFFFFFFFFFFFF8)
      + 16 <= 0x18))
  {
    uint64_t v12 = ((unint64_t)a1 + v6 + 8) & ~v6;
    uint64_t v13 = ((unint64_t)a2 + v6 + 8) & ~v6;
    uint64_t v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
    swift_bridgeObjectRetain();
    v14(v12, v13, v4);
    uint64_t v15 = (void *)((v11 + v12) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v16 = (void *)((v11 + v13) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v17 = v16[1];
    void *v15 = *v16;
    v15[1] = v17;
    unint64_t v18 = ((unint64_t)v15 + 23) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v19 = (unint64_t *)(((unint64_t)v16 + 23) & 0xFFFFFFFFFFFFFFF8);
    unint64_t v20 = *v19;
    swift_retain();
    if (v20 < 0xFFFFFFFF)
    {
      *(_OWORD *)unint64_t v18 = *(_OWORD *)v19;
    }
    else
    {
      unint64_t v21 = v19[1];
      *(void *)unint64_t v18 = v20;
      *(void *)(v18 + 8) = v21;
      swift_retain();
    }
    unint64_t v22 = (v18 + 23) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v23 = ((unint64_t)v19 + 23) & 0xFFFFFFFFFFFFFFF8;
    if (*(void *)(v23 + 24) < 0xFFFFFFFFuLL)
    {
      long long v27 = *(_OWORD *)(v23 + 16);
      *(_OWORD *)unint64_t v22 = *(_OWORD *)v23;
      *(_OWORD *)(v22 + 16) = v27;
    }
    else
    {
      uint64_t v24 = *(void *)v23;
      uint64_t v25 = *(void *)(v23 + 8);
      char v26 = *(unsigned char *)(v23 + 16);
      outlined copy of Text.Storage(*(void *)v23, v25, v26);
      *(void *)unint64_t v22 = v24;
      *(void *)(v22 + 8) = v25;
      *(unsigned char *)(v22 + 16) = v26;
      *(void *)(v22 + 24) = *(void *)(v23 + 24);
      swift_bridgeObjectRetain();
    }
    unint64_t v28 = (void *)((v23 + 39) & 0xFFFFFFFFFFFFFFF8);
    long long v29 = (void *)((v22 + 39) & 0xFFFFFFFFFFFFFFF8);
    *long long v29 = *v28;
    unint64_t v30 = ((unint64_t)v29 + 15) & 0xFFFFFFFFFFFFFFF8;
    long long v31 = (unint64_t *)(((unint64_t)v28 + 15) & 0xFFFFFFFFFFFFFFF8);
    unint64_t v32 = *v31;
    swift_retain();
    if (v32 < 0xFFFFFFFF)
    {
      *(_OWORD *)unint64_t v30 = *(_OWORD *)v31;
    }
    else
    {
      unint64_t v33 = v31[1];
      *(void *)unint64_t v30 = v32;
      *(void *)(v30 + 8) = v33;
      swift_retain();
    }
    unint64_t v34 = (v30 + 23) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v35 = ((unint64_t)v31 + 23) & 0xFFFFFFFFFFFFFFF8;
    if (*(void *)v35 < 0xFFFFFFFFuLL)
    {
      *(_OWORD *)unint64_t v34 = *(_OWORD *)v35;
      return a1;
    }
    uint64_t v36 = *(void *)(v35 + 8);
    *(void *)unint64_t v34 = *(void *)v35;
    *(void *)(v34 + 8) = v36;
  }
  else
  {
    a1 = (uint64_t *)(v9 + ((v6 & 0xF8 ^ 0x1F8) & (v6 + 16)));
  }
  swift_retain();
  return a1;
}

uint64_t type metadata completion function for DocumentLaunchView()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t assignWithCopy for StackItemModifier(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_retain();
  swift_release();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_retain();
  swift_release();
  uint64_t v4 = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(void *)(a1 + 32) = v4;
  uint64_t v5 = *(void *)(a2 + 48);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  *(void *)(a1 + 48) = v5;
  uint64_t v6 = (long long *)(a1 + 64);
  uint64_t v7 = (long long *)(a2 + 64);
  uint64_t v8 = *(void *)(a1 + 88);
  uint64_t v9 = *(void *)(a2 + 88);
  if (v8 != 1)
  {
    if (v9 == 1)
    {
      outlined destroy of EquatableNavigationTitle(a1 + 64);
      long long v14 = *(_OWORD *)(a2 + 80);
      long long v13 = *(_OWORD *)(a2 + 96);
      long long v15 = *v7;
      *(_OWORD *)(a1 + 105) = *(_OWORD *)(a2 + 105);
      *(_OWORD *)(a1 + 80) = v14;
      *(_OWORD *)(a1 + 96) = v13;
      *uint64_t v6 = v15;
      goto LABEL_28;
    }
    if (v8)
    {
      if (v9)
      {
        uint64_t v16 = *(void *)(a2 + 64);
        uint64_t v17 = *(void *)(a2 + 72);
        char v18 = *(unsigned char *)(a2 + 80);
        outlined copy of Text.Storage(v16, v17, v18);
        uint64_t v19 = *(void *)(a1 + 64);
        uint64_t v20 = *(void *)(a1 + 72);
        char v21 = *(unsigned char *)(a1 + 80);
        *(void *)(a1 + 64) = v16;
        *(void *)(a1 + 72) = v17;
        *(unsigned char *)(a1 + 80) = v18;
        outlined consume of Text.Storage(v19, v20, v21);
        *(void *)(a1 + 88) = *(void *)(a2 + 88);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
      }
      else
      {
        outlined destroy of Text(a1 + 64);
        long long v30 = *(_OWORD *)(a2 + 80);
        *uint64_t v6 = *v7;
        *(_OWORD *)(a1 + 80) = v30;
      }
    }
    else if (v9)
    {
      uint64_t v27 = *(void *)(a2 + 64);
      uint64_t v28 = *(void *)(a2 + 72);
      char v29 = *(unsigned char *)(a2 + 80);
      outlined copy of Text.Storage(v27, v28, v29);
      *(void *)(a1 + 64) = v27;
      *(void *)(a1 + 72) = v28;
      *(unsigned char *)(a1 + 80) = v29;
      *(void *)(a1 + 88) = *(void *)(a2 + 88);
      swift_bridgeObjectRetain();
    }
    else
    {
      long long v31 = *(_OWORD *)(a2 + 80);
      *uint64_t v6 = *v7;
      *(_OWORD *)(a1 + 80) = v31;
    }
    unint64_t v32 = (uint64_t *)(a1 + 96);
    uint64_t v33 = *(void *)(a2 + 96);
    if (*(void *)(a1 + 96) == 1)
    {
      if (v33 != 1)
      {
        *unint64_t v32 = v33;
        swift_retain();
        goto LABEL_27;
      }
      uint64_t v34 = 1;
    }
    else
    {
      if (v33 != 1)
      {
        *unint64_t v32 = v33;
        swift_retain();
        swift_release();
        goto LABEL_27;
      }
      outlined destroy of Transaction(a1 + 96);
      uint64_t v34 = *(void *)(a2 + 96);
    }
    *unint64_t v32 = v34;
LABEL_27:
    *(unsigned char *)(a1 + 104) = *(unsigned char *)(a2 + 104);
    *(void *)(a1 + 112) = *(void *)(a2 + 112);
    swift_retain();
    swift_release();
    *(unsigned char *)(a1 + 120) = *(unsigned char *)(a2 + 120);
    goto LABEL_28;
  }
  if (v9)
  {
    if (v9 == 1)
    {
      long long v10 = *v7;
      long long v11 = *(_OWORD *)(a2 + 80);
      long long v12 = *(_OWORD *)(a2 + 96);
      *(_OWORD *)(a1 + 105) = *(_OWORD *)(a2 + 105);
      *(_OWORD *)(a1 + 80) = v11;
      *(_OWORD *)(a1 + 96) = v12;
      *uint64_t v6 = v10;
      goto LABEL_28;
    }
    uint64_t v23 = *(void *)(a2 + 64);
    uint64_t v24 = *(void *)(a2 + 72);
    char v25 = *(unsigned char *)(a2 + 80);
    outlined copy of Text.Storage(v23, v24, v25);
    *(void *)(a1 + 64) = v23;
    *(void *)(a1 + 72) = v24;
    *(unsigned char *)(a1 + 80) = v25;
    *(void *)(a1 + 88) = *(void *)(a2 + 88);
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v22 = *(_OWORD *)(a2 + 80);
    *uint64_t v6 = *v7;
    *(_OWORD *)(a1 + 80) = v22;
  }
  uint64_t v26 = *(void *)(a2 + 96);
  if (v26 != 1) {
    uint64_t v26 = swift_retain();
  }
  *(void *)(a1 + 96) = v26;
  *(unsigned char *)(a1 + 104) = *(unsigned char *)(a2 + 104);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(unsigned char *)(a1 + 120) = *(unsigned char *)(a2 + 120);
  swift_retain();
LABEL_28:
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  swift_retain();
  swift_release();
  uint64_t v35 = *(void *)(a2 + 136);
  *(unsigned char *)(a1 + 144) = *(unsigned char *)(a2 + 144);
  *(void *)(a1 + 136) = v35;
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  swift_retain();
  swift_release();
  uint64_t v36 = *(void *)(a2 + 160);
  *(unsigned char *)(a1 + 168) = *(unsigned char *)(a2 + 168);
  *(void *)(a1 + 160) = v36;
  *(void *)(a1 + 176) = *(void *)(a2 + 176);
  swift_retain();
  swift_release();
  uint64_t v37 = *(void *)(a2 + 184);
  *(unsigned char *)(a1 + 192) = *(unsigned char *)(a2 + 192);
  *(void *)(a1 + 184) = v37;
  LOBYTE(v37) = *(unsigned char *)(a2 + 208);
  *(void *)(a1 + 200) = *(void *)(a2 + 200);
  *(unsigned char *)(a1 + 208) = v37;
  *(void *)(a1 + 216) = *(void *)(a2 + 216);
  swift_retain();
  swift_release();
  long long v38 = *(void **)(a2 + 224);
  char v39 = *(unsigned char *)(a2 + 232);
  outlined copy of Environment<UISceneSession?>.Content(v38, v39);
  int64_t v40 = *(void **)(a1 + 224);
  char v41 = *(unsigned char *)(a1 + 232);
  *(void *)(a1 + 224) = v38;
  *(unsigned char *)(a1 + 232) = v39;
  outlined consume of Environment<UISceneSession?>.Content(v40, v41);
  uint64_t v42 = *(void *)(a2 + 240);
  char v43 = *(unsigned char *)(a2 + 248);
  outlined copy of Environment<Bool>.Content(v42, v43);
  uint64_t v44 = *(void *)(a1 + 240);
  char v45 = *(unsigned char *)(a1 + 248);
  *(void *)(a1 + 240) = v42;
  *(unsigned char *)(a1 + 248) = v43;
  outlined consume of Environment<Bool>.Content(v44, v45);
  uint64_t v46 = *(void *)(a2 + 256);
  char v47 = *(unsigned char *)(a2 + 264);
  outlined copy of Environment<Bool>.Content(v46, v47);
  uint64_t v48 = *(void *)(a1 + 256);
  char v49 = *(unsigned char *)(a1 + 264);
  *(void *)(a1 + 256) = v46;
  *(unsigned char *)(a1 + 264) = v47;
  outlined consume of Environment<Bool>.Content(v48, v49);
  *(void *)(a1 + 272) = *(void *)(a2 + 272);
  *(void *)(a1 + 280) = *(void *)(a2 + 280);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t NewDocumentButton<>.init(_:contentType:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, void *a6@<X8>)
{
  uint64_t v26 = a1;
  uint64_t v11 = type metadata accessor for UTType();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x1F4188790](v11);
  long long v14 = (char *)&v25 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v15);
  uint64_t v17 = (char *)&v25 - v16;
  _s22UniformTypeIdentifiers6UTTypeVSgMaTm_3(0, (unint64_t *)&lazy cache variable for type metadata for UTType?, MEMORY[0x1E4FBCEA8]);
  MEMORY[0x1F4188790](v18 - 8);
  uint64_t v20 = (char *)&v25 - v19;
  outlined init with copy of UTType?(a5, (uint64_t)&v25 - v19);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v20, 1, v11) == 1)
  {
    uint64_t v29 = 0;
    long long v27 = 0u;
    long long v28 = 0u;
    uint64_t v21 = v26;
LABEL_5:
    uint64_t v31 = type metadata accessor for DefaultDocumentCreationStrategy(0);
    uint64_t v32 = lazy protocol witness table accessor for type DefaultDocumentCreationStrategy and conformance DefaultDocumentCreationStrategy(&lazy protocol witness table cache variable for type DefaultDocumentCreationStrategy and conformance DefaultDocumentCreationStrategy, (void (*)(uint64_t))type metadata accessor for DefaultDocumentCreationStrategy);
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v30);
    DefaultDocumentCreationStrategy.init()((unint64_t *)boxed_opaque_existential_1);
    _s7SwiftUI24DocumentCreationStrategy_pSgWOhTm_0((uint64_t)&v27, (unint64_t *)&lazy cache variable for type metadata for DocumentCreationStrategy?, (void (*)(uint64_t))type metadata accessor for DocumentCreationStrategy);
    goto LABEL_6;
  }
  (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v17, v20, v11);
  (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v14, v17, v11);
  *((void *)&v28 + 1) = type metadata accessor for ContentTypeDocumentCreationStrategy(0);
  uint64_t v29 = lazy protocol witness table accessor for type DefaultDocumentCreationStrategy and conformance DefaultDocumentCreationStrategy(&lazy protocol witness table cache variable for type ContentTypeDocumentCreationStrategy and conformance ContentTypeDocumentCreationStrategy, (void (*)(uint64_t))type metadata accessor for ContentTypeDocumentCreationStrategy);
  long long v22 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v27);
  ContentTypeDocumentCreationStrategy.init(_:)((uint64_t)v14, (unint64_t *)v22);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v17, v11);
  uint64_t v21 = v26;
  if (!*((void *)&v28 + 1)) {
    goto LABEL_5;
  }
  outlined init with take of OptionalBinaryInteger(&v27, (uint64_t)&v30);
LABEL_6:
  _s7SwiftUI24DocumentCreationStrategy_pSgWOhTm_0(a5, (unint64_t *)&lazy cache variable for type metadata for UTType?, MEMORY[0x1E4FBCEA8]);
  *a6 = v21;
  a6[1] = a2;
  a6[2] = a3;
  a6[3] = a4;
  return outlined init with take of OptionalBinaryInteger(&v30, (uint64_t)(a6 + 4));
}

uint64_t key path getter for EnvironmentValues.dynamicTypeSize : EnvironmentValues@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = EnvironmentValues.dynamicTypeSize.getter();
  *a1 = v3;
  return result;
}

id closure #1 in closure #1 in DragAndDropBridge.dragItems(_:_:)(void (*a1)(void *__return_ptr))
{
  a1(v5);
  _sypSgWObTm_0((uint64_t)v5, (uint64_t)&v6, (unint64_t *)&lazy cache variable for type metadata for UIKitDragDropPreviewAdaptor?, (uint64_t)&type metadata for UIKitDragDropPreviewAdaptor);
  unint64_t v1 = v6;
  if (!v6) {
    return 0;
  }
  uint64_t v2 = v7;
  id v3 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1718]), sel_initWithView_parameters_, v6, v7);

  return v3;
}

void *DragAndDropBridge.springLoadedResponder(from:)(void *a1)
{
  uint64_t result = (void *)MEMORY[0x18C119DF0](v1 + direct field offset for DragAndDropBridge.host);
  if (result)
  {
    uint64_t v4 = result;
    id v5 = objc_msgSend(result, sel_window);

    objc_msgSend(a1, sel_locationInView_, v5);
    uint64_t result = (void *)DragAndDropBridge.hitTestedResponder(locationInWindow:)();
    if (result)
    {
      type metadata accessor for SpringLoadedViewResponder();
      ResponderNode.firstAncestor<A>(ofType:)();
      swift_release();
      uint64_t result = v6;
      if (v6)
      {
        if ((v6[216] & 1) == 0)
        {
          swift_release();
          return 0;
        }
      }
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

void @objc DragAndDropBridge.SpringLoadedBehavior.interactionDidFinish(_:)(void *a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  id v5 = a1;
  DragAndDropBridge.SpringLoadedBehavior.interactionDidFinish(_:)((UISpringLoadedInteraction)v4);
}

Swift::Void __swiftcall DragAndDropBridge.SpringLoadedBehavior.interactionDidFinish(_:)(UISpringLoadedInteraction a1)
{
  id v3 = *(void **)(v1 + direct field offset for DragAndDropBridge.SpringLoadedBehavior.base);
  if (objc_msgSend(v3, sel_respondsToSelector_, sel_interactionDidFinish_)) {
    objc_msgSend(v3, sel_interactionDidFinish_, a1.super.isa);
  }
  uint64_t v4 = MEMORY[0x18C119DF0](v1 + direct field offset for DragAndDropBridge.SpringLoadedBehavior.bridge);
  if (v4)
  {
    id v5 = (id)v4;
    specialized DragAndDropBridge.interactionDidFinish(_:)();
  }
}

void specialized DragAndDropBridge.SpringLoadedEffect.updateHighlightState(_:interaction:)(unsigned __int8 *a1)
{
  int v2 = *a1;
  if (*(unsigned __int8 *)(v1 + direct field offset for DragAndDropBridge.SpringLoadedEffect.previousHighlightState) != v2)
  {
    *(unsigned char *)(v1 + direct field offset for DragAndDropBridge.SpringLoadedEffect.previousHighlightState) = v2;
    uint64_t v3 = MEMORY[0x18C119DF0](v1 + direct field offset for DragAndDropBridge.SpringLoadedEffect.bridge);
    if (v3)
    {
      uint64_t v4 = (void *)v3;
      char v5 = v2;
      specialized DragAndDropBridge.springLoadedInteraction(_:highlightDidChange:)(&v5);
    }
  }
}

void DragAndDropBridge.SpringLoadedEffect.interaction(_:didChangeWith:)(void *a1, id a2)
{
  uint64_t v4 = *MEMORY[0x1E4FBC8C8] & *v2;
  switch((unint64_t)objc_msgSend(a2, sel_state))
  {
    case 0uLL:
    case 3uLL:
      LOBYTE(aBlock[0]) = 0;
      specialized DragAndDropBridge.SpringLoadedEffect.updateHighlightState(_:interaction:)((unsigned __int8 *)aBlock);
      char v5 = *(void **)((char *)v2 + direct field offset for DragAndDropBridge.SpringLoadedEffect.blinkTimer);
      if (v5)
      {
        id v6 = v5;
        objc_msgSend(v6, sel_invalidate);
        id v16 = *(id *)((char *)v2 + direct field offset for DragAndDropBridge.SpringLoadedEffect.blinkTimer);
        *(void *)((char *)v2 + direct field offset for DragAndDropBridge.SpringLoadedEffect.blinkTimer) = 0;
      }
      break;
    case 1uLL:
      LOBYTE(aBlock[0]) = 1;
      specialized DragAndDropBridge.SpringLoadedEffect.updateHighlightState(_:interaction:)((unsigned __int8 *)aBlock);
      break;
    case 2uLL:
      if (!*(void *)((char *)v2 + direct field offset for DragAndDropBridge.SpringLoadedEffect.blinkTimer))
      {
        LOBYTE(aBlock[0]) = 1;
        specialized DragAndDropBridge.SpringLoadedEffect.updateHighlightState(_:interaction:)((unsigned __int8 *)aBlock);
        uint64_t v7 = swift_allocObject();
        swift_unknownObjectWeakInit();
        uint64_t v8 = (void *)swift_allocObject();
        void v8[2] = *(void *)(v4 + 80);
        v8[3] = *(void *)(v4 + 88);
        v8[4] = v7;
        v8[5] = a1;
        aBlock[4] = partial apply for closure #1 in DragAndDropBridge.SpringLoadedEffect.interaction(_:didChangeWith:);
        aBlock[5] = v8;
        aBlock[0] = MEMORY[0x1E4F143A8];
        aBlock[1] = 1107296256;
        aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable (@guaranteed NSTimer) -> ();
        aBlock[3] = &block_descriptor_25;
        uint64_t v9 = _Block_copy(aBlock);
        long long v10 = self;
        swift_retain();
        id v11 = a1;
        id v12 = objc_msgSend(v10, sel_timerWithTimeInterval_repeats_block_, 1, v9, 0.1);
        _Block_release(v9);
        swift_release();
        swift_release();
        uint64_t v13 = *(void **)((char *)v2 + direct field offset for DragAndDropBridge.SpringLoadedEffect.blinkTimer);
        *(void *)((char *)v2 + direct field offset for DragAndDropBridge.SpringLoadedEffect.blinkTimer) = v12;
        id v14 = v12;

        id v15 = objc_msgSend(self, sel_mainRunLoop);
        objc_msgSend(v15, sel_addTimer_forMode_, v14, *MEMORY[0x1E4F1C4B0]);
      }
      break;
    default:
      return;
  }
}

uint64_t outlined init with take of CellConfiguration(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CellConfiguration();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t partial apply for specialized closure #1 in AccessibilityNode.hasAction<A>(_:)(void *a1)
{
  return specialized closure #1 in AccessibilityNode.hasAction<A>(_:)(a1, *(_OWORD **)(v1 + 16)) & 1;
}

uint64_t specialized closure #1 in AccessibilityNode.hasAction<A>(_:)(void *a1, _OWORD *a2)
{
  long long v2 = a2[1];
  v8[0] = *a2;
  v8[1] = v2;
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v3);
  char v5 = *(uint64_t (**)(_OWORD *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(v4 + 80);
  unint64_t v6 = lazy protocol witness table accessor for type AccessibilityVoidAction and conformance AccessibilityVoidAction();
  return v5(v8, &type metadata for AccessibilityVoidAction, v6, v3, v4) & 1;
}

uint64_t AccessibilityNode._accessibilityDataSeriesTitle(for:)(uint64_t a1)
{
  AccessibilityNode.attachment.getter(v21);

  uint64_t v2 = swift_bridgeObjectRetain();
  specialized AccessibilityProperties.subscript.getter(v2, (uint64_t)v19);
  swift_bridgeObjectRelease_n();
  uint64_t v3 = MEMORY[0x1E4F412F0];
  _s7SwiftUI4PathVSgWObTm_0((uint64_t)v19, (uint64_t)v20, (unint64_t *)&lazy cache variable for type metadata for AccessibilityDataSeriesConfiguration?, MEMORY[0x1E4F412F0]);
  _s7SwiftUI4PathVSgWObTm_0((uint64_t)v20, (uint64_t)v21, (unint64_t *)&lazy cache variable for type metadata for AccessibilityDataSeriesConfiguration?, v3);
  if (getEnumTag for AccessibilityActionCategory.Category((uint64_t)v21) == 1) {
    return 0;
  }
  if (a1 == 1)
  {
    uint64_t v4 = &v23;
  }
  else
  {
    if (a1)
    {
LABEL_11:
      outlined release of AccessibilityDataSeriesConfiguration?((uint64_t)v20);
      return 0;
    }
    uint64_t v4 = &v22;
  }
  uint64_t v5 = MEMORY[0x1E4F412E8];
  _s7SwiftUI4PathVSgWObTm_0((uint64_t)v4, (uint64_t)v18, (unint64_t *)&lazy cache variable for type metadata for AccessibilityDataSeriesConfiguration.AxisConfiguration?, MEMORY[0x1E4F412E8]);
  _s7SwiftUI4PathVSgWObTm_0((uint64_t)v18, (uint64_t)v15, (unint64_t *)&lazy cache variable for type metadata for AccessibilityDataSeriesConfiguration.AxisConfiguration?, v5);
  if (_s7SwiftUI36AccessibilityDataSeriesConfigurationV04AxisF0VSgWOg((uint64_t)v15) == 1) {
    goto LABEL_11;
  }
  uint64_t v6 = v17;
  if (!v17) {
    goto LABEL_11;
  }
  uint64_t v7 = v15[0];
  uint64_t v8 = v15[1];
  char v9 = v16;
  char v10 = v16 & 1;
  swift_bridgeObjectRetain();
  outlined retain of AccessibilityDataSeriesConfiguration.AxisConfiguration?(v18, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))outlined copy of AccessibilityDataSeriesConfiguration.AxisConfiguration?);
  outlined copy of Text?(v7, v8, v9, v6);
  outlined copy of Text.Storage(v7, v8, v10);
  id v11 = (void *)AccessibilityNode.resolvedAttributedText(_:includeDefaultAttributes:)(v7, v8, v9, v6);
  outlined consume of Text?(v7, v8, v9, v6);
  if (!v11)
  {
    outlined consume of Text.Storage(v7, v8, v9 & 1);
    swift_bridgeObjectRelease();
    outlined retain of AccessibilityDataSeriesConfiguration.AxisConfiguration?(v18, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))outlined consume of AccessibilityDataSeriesConfiguration.AxisConfiguration?);
    goto LABEL_11;
  }
  id v12 = objc_msgSend(v11, sel_string);
  uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  outlined consume of Text.Storage(v7, v8, v9 & 1);
  swift_bridgeObjectRelease();
  outlined retain of AccessibilityDataSeriesConfiguration.AxisConfiguration?(v18, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))outlined consume of AccessibilityDataSeriesConfiguration.AxisConfiguration?);
  outlined release of AccessibilityDataSeriesConfiguration?((uint64_t)v20);
  return v13;
}

uint64_t AccessibilityNode.accessibilityURL()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E4FBB718];
  type metadata accessor for Text.Style?(0, &lazy cache variable for type metadata for LinkDestination.Configuration?, MEMORY[0x1E4F3FB80], MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v3 - 8);
  uint64_t v5 = (char *)v15 - v4;
  type metadata accessor for Text.Style?(0, (unint64_t *)&lazy cache variable for type metadata for URL?, MEMORY[0x1E4F276F0], v2);
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v8 = (char *)v15 - v7;
  AccessibilityNode.attachment.getter(v15);

  uint64_t v9 = swift_bridgeObjectRetain();
  specialized AccessibilityProperties.subscript.getter(v9, (uint64_t)v5);
  swift_bridgeObjectRelease_n();
  uint64_t v10 = type metadata accessor for LinkDestination.Configuration();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v10 - 8) + 48))(v5, 1, v10) == 1)
  {
    outlined destroy of AccessibilityTableContext??((uint64_t)v5, (uint64_t)&lazy cache variable for type metadata for LinkDestination.Configuration?, MEMORY[0x1E4F3FB80], MEMORY[0x1E4FBB718], (uint64_t (*)(void))type metadata accessor for Text.Style?);
    uint64_t v11 = type metadata accessor for URL();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56))(v8, 1, 1, v11);
LABEL_4:
    outlined destroy of AccessibilityTableContext??((uint64_t)v8, (uint64_t)&lazy cache variable for type metadata for URL?, MEMORY[0x1E4F276F0], MEMORY[0x1E4FBB718], (uint64_t (*)(void))type metadata accessor for Text.Style?);
    type metadata accessor for URL();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56))(a1, 1, 1, v11);
  }
  LinkDestination.Configuration.url.getter();
  _s7SwiftUI22ImageResolutionContextVWOhTm_0((uint64_t)v5, MEMORY[0x1E4F3FB80]);
  uint64_t v11 = type metadata accessor for URL();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = *(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56);
  v13(v8, 0, 1, v11);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v8, 1, v11) == 1) {
    goto LABEL_4;
  }
  (*(void (**)(uint64_t, char *, uint64_t))(v12 + 32))(a1, v8, v11);
  return ((uint64_t (*)(uint64_t, void, uint64_t, uint64_t))v13)(a1, 0, 1, v11);
}

uint64_t assignWithCopy for AccessibilityCore.Notification.ScreenChanged(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a1;
  uint64_t v5 = *(void **)a2;
  *(void *)a1 = *(void *)a2;
  id v6 = v5;

  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  return a1;
}

void **assignWithTake for AccessibilityCore.Notification.LayoutChanged(void **a1, void **a2)
{
  uint64_t v3 = *a1;
  *a1 = *a2;

  return a1;
}

void **assignWithCopy for AccessibilityCore.Notification.LayoutChanged(void **a1, void **a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = *a2;
  *a1 = *a2;
  id v5 = v4;

  return a1;
}

uint64_t getEnumTagSinglePayload for _LazyStack_Cache(int *a1, unsigned int a2)
{
  uint64_t result = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(result - 8);
  uint64_t v6 = v5;
  uint64_t v7 = *(unsigned int *)(v5 + 84);
  if (v7) {
    unsigned int v8 = v7 - 1;
  }
  else {
    unsigned int v8 = 0;
  }
  if (v8 <= 0x7FFFFFFF) {
    unsigned int v9 = 0x7FFFFFFF;
  }
  else {
    unsigned int v9 = v8;
  }
  uint64_t v10 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v11 = *(void *)(*(void *)(result - 8) + 64);
  if (!v7) {
    ++v11;
  }
  if (!a2) {
    return 0;
  }
  uint64_t v12 = v11 + ((v10 + 16) & ~v10);
  if (v9 >= a2)
  {
LABEL_29:
    if (v8 < 0x7FFFFFFF)
    {
      unint64_t v22 = *(void *)(((((((((((((unint64_t)a1 + v12 + 23) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)
                             + 23) & 0xFFFFFFFFFFFFFFF8)
                           + 23) & 0xFFFFFFFFFFFFFFF8)
                         + 15) & 0xFFFFFFFFFFFFFFF8)
                       + 15) & 0xFFFFFFFFFFFFFFF8);
      if (v22 >= 0xFFFFFFFF) {
        LODWORD(v22) = -1;
      }
      return (v22 + 1);
    }
    if (v7)
    {
      int v20 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v6 + 48))(((((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8) + v10 + 8) & ~v10, v7, result);
      BOOL v21 = v20 != 0;
      uint64_t result = (v20 - 1);
      if (result != 0 && v21) {
        return result;
      }
    }
    return 0;
  }
  unint64_t v13 = ((((((((((((v12 + 23) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)
          + 15) & 0xFFFFFFFFFFFFFFF8)
        + 15) & 0xFFFFFFFFFFFFFFF8)
      + 16;
  uint64_t v14 = v13 & 0xFFFFFFF8;
  if ((v13 & 0xFFFFFFF8) != 0) {
    unsigned int v15 = 2;
  }
  else {
    unsigned int v15 = a2 - v9 + 1;
  }
  if (v15 >= 0x10000) {
    LODWORD(v16) = 4;
  }
  else {
    LODWORD(v16) = 2;
  }
  if (v15 < 0x100) {
    LODWORD(v16) = 1;
  }
  if (v15 >= 2) {
    uint64_t v16 = v16;
  }
  else {
    uint64_t v16 = 0;
  }
  switch(v16)
  {
    case 1:
      int v17 = *((unsigned __int8 *)a1 + v13);
      if (!v17) {
        goto LABEL_29;
      }
      goto LABEL_26;
    case 2:
      int v17 = *(unsigned __int16 *)((char *)a1 + v13);
      if (!v17) {
        goto LABEL_29;
      }
      goto LABEL_26;
    case 3:
      __break(1u);
      return result;
    case 4:
      int v17 = *(int *)((char *)a1 + v13);
      if (!v17) {
        goto LABEL_29;
      }
LABEL_26:
      int v18 = v17 - 1;
      if (v14)
      {
        int v18 = 0;
        int v19 = *a1;
      }
      else
      {
        int v19 = 0;
      }
      uint64_t result = v9 + (v19 | v18) + 1;
      break;
    default:
      goto LABEL_29;
  }
  return result;
}

uint64_t specialized RootItemModifier.localizedApplicationName()()
{
  id v0 = objc_msgSend(self, sel_mainBundle);
  uint64_t result = *MEMORY[0x1E4F1CC48];
  if (!*MEMORY[0x1E4F1CC48])
  {
    __break(1u);
    goto LABEL_69;
  }
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t result = *MEMORY[0x1E4F1D008];
  if (!*MEMORY[0x1E4F1D008])
  {
LABEL_69:
    __break(1u);
    return result;
  }
  uint64_t v4 = v2;
  uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v7 = v6;
  id v8 = objc_msgSend(v0, sel_localizedInfoDictionary);
  uint64_t v9 = MEMORY[0x1E4FBC840];
  if (!v8)
  {
    long long v40 = 0u;
    long long v41 = 0u;
    goto LABEL_11;
  }
  uint64_t v10 = v8;
  uint64_t v11 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  if (!*(void *)(v11 + 16)
    || (unint64_t v12 = specialized __RawDictionaryStorage.find<A>(_:)(0xD00000000000001CLL, 0x80000001883410B0), (v13 & 1) == 0))
  {
    long long v40 = 0u;
    long long v41 = 0u;
    swift_bridgeObjectRelease();
    goto LABEL_11;
  }
  outlined init with copy of Any(*(void *)(v11 + 56) + 32 * v12, (uint64_t)&v40);
  swift_bridgeObjectRelease();
  if (!*((void *)&v41 + 1))
  {
LABEL_11:
    outlined destroy of NavigationTitleStorage?((uint64_t)&v40, (unint64_t *)&lazy cache variable for type metadata for Any?, v9 + 8);
    goto LABEL_12;
  }
  if (swift_dynamicCast()) {
    goto LABEL_32;
  }
LABEL_12:
  id v14 = objc_msgSend(v0, sel_infoDictionary);
  if (!v14)
  {
    long long v40 = 0u;
    long long v41 = 0u;
LABEL_21:
    outlined destroy of NavigationTitleStorage?((uint64_t)&v40, (unint64_t *)&lazy cache variable for type metadata for Any?, v9 + 8);
    goto LABEL_22;
  }
  unsigned int v15 = v14;
  uint64_t v16 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  if (*(void *)(v16 + 16)
    && (unint64_t v17 = specialized __RawDictionaryStorage.find<A>(_:)(0xD00000000000001CLL, 0x80000001883410B0), (v18 & 1) != 0))
  {
    outlined init with copy of Any(*(void *)(v16 + 56) + 32 * v17, (uint64_t)&v40);
  }
  else
  {
    long long v40 = 0u;
    long long v41 = 0u;
  }
  swift_bridgeObjectRelease();
  if (!*((void *)&v41 + 1)) {
    goto LABEL_21;
  }
  if (swift_dynamicCast()) {
    goto LABEL_32;
  }
LABEL_22:
  id v19 = objc_msgSend(v0, sel_localizedInfoDictionary);
  if (!v19)
  {
    long long v40 = 0u;
    long long v41 = 0u;
LABEL_33:
    outlined destroy of NavigationTitleStorage?((uint64_t)&v40, (unint64_t *)&lazy cache variable for type metadata for Any?, v9 + 8);
    goto LABEL_34;
  }
  int v20 = v19;
  uint64_t v21 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  if (*(void *)(v21 + 16))
  {
    swift_bridgeObjectRetain();
    unint64_t v22 = specialized __RawDictionaryStorage.find<A>(_:)(v3, v4);
    if (v23)
    {
      outlined init with copy of Any(*(void *)(v21 + 56) + 32 * v22, (uint64_t)&v40);
    }
    else
    {
      long long v40 = 0u;
      long long v41 = 0u;
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    long long v40 = 0u;
    long long v41 = 0u;
  }
  swift_bridgeObjectRelease();
  if (!*((void *)&v41 + 1)) {
    goto LABEL_33;
  }
  if (swift_dynamicCast())
  {
LABEL_32:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_63:

    return v39;
  }
LABEL_34:
  id v24 = objc_msgSend(v0, sel_infoDictionary);
  if (!v24)
  {
    swift_bridgeObjectRelease();
    long long v40 = 0u;
    long long v41 = 0u;
LABEL_43:
    outlined destroy of NavigationTitleStorage?((uint64_t)&v40, (unint64_t *)&lazy cache variable for type metadata for Any?, v9 + 8);
    goto LABEL_44;
  }
  uint64_t v25 = v24;
  uint64_t v26 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  if (*(void *)(v26 + 16) && (unint64_t v27 = specialized __RawDictionaryStorage.find<A>(_:)(v3, v4), (v28 & 1) != 0))
  {
    outlined init with copy of Any(*(void *)(v26 + 56) + 32 * v27, (uint64_t)&v40);
  }
  else
  {
    long long v40 = 0u;
    long long v41 = 0u;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!*((void *)&v41 + 1)) {
    goto LABEL_43;
  }
  if (swift_dynamicCast()) {
    goto LABEL_54;
  }
LABEL_44:
  id v29 = objc_msgSend(v0, sel_localizedInfoDictionary);
  if (!v29)
  {
    long long v40 = 0u;
    long long v41 = 0u;
LABEL_55:
    outlined destroy of NavigationTitleStorage?((uint64_t)&v40, (unint64_t *)&lazy cache variable for type metadata for Any?, v9 + 8);
    goto LABEL_56;
  }
  long long v30 = v29;
  uint64_t v31 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  if (*(void *)(v31 + 16))
  {
    swift_bridgeObjectRetain();
    unint64_t v32 = specialized __RawDictionaryStorage.find<A>(_:)(v5, v7);
    if (v33)
    {
      outlined init with copy of Any(*(void *)(v31 + 56) + 32 * v32, (uint64_t)&v40);
    }
    else
    {
      long long v40 = 0u;
      long long v41 = 0u;
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    long long v40 = 0u;
    long long v41 = 0u;
  }
  swift_bridgeObjectRelease();
  if (!*((void *)&v41 + 1)) {
    goto LABEL_55;
  }
  if (swift_dynamicCast())
  {
LABEL_54:
    swift_bridgeObjectRelease();
    goto LABEL_63;
  }
LABEL_56:
  id v34 = objc_msgSend(v0, sel_infoDictionary);
  if (v34)
  {
    uint64_t v35 = v34;
    uint64_t v36 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

    if (*(void *)(v36 + 16) && (unint64_t v37 = specialized __RawDictionaryStorage.find<A>(_:)(v5, v7), (v38 & 1) != 0))
    {
      outlined init with copy of Any(*(void *)(v36 + 56) + 32 * v37, (uint64_t)&v40);
    }
    else
    {
      long long v40 = 0u;
      long long v41 = 0u;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (*((void *)&v41 + 1))
    {
      if (swift_dynamicCast()) {
        goto LABEL_63;
      }
      goto LABEL_66;
    }
  }
  else
  {
    swift_bridgeObjectRelease();
    long long v40 = 0u;
    long long v41 = 0u;
  }
  outlined destroy of NavigationTitleStorage?((uint64_t)&v40, (unint64_t *)&lazy cache variable for type metadata for Any?, v9 + 8);
LABEL_66:

  return 0;
}

char *initializeBufferWithCopyOfBuffer for PlatformItemList.Item(char *a1, char **a2, int *a3)
{
  int v4 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  uint64_t v5 = *a2;
  *(void *)a1 = *a2;
  if ((v4 & 0x20000) != 0)
  {
    a1 = &v5[(v4 + 16) & ~(unint64_t)v4];
    goto LABEL_47;
  }
  uint64_t v6 = a3;
  uint64_t v9 = a2[1];
  id v8 = a2[2];
  *((void *)a1 + 1) = v9;
  *((void *)a1 + 2) = v8;
  *((void *)a1 + 3) = a2[3];
  a1[32] = *((unsigned char *)a2 + 32);
  uint64_t v10 = a2[6];
  *((void *)a1 + 5) = a2[5];
  *((void *)a1 + 6) = v10;
  a1[56] = *((unsigned char *)a2 + 56);
  uint64_t v11 = (char **)(a1 + 64);
  unint64_t v12 = a2 + 8;
  unint64_t v13 = (unint64_t)a2[23];
  id v14 = v5;
  unsigned int v15 = v9;
  swift_bridgeObjectRetain();
  swift_retain();
  if (v13 >> 1 != 4294967294)
  {
    int v25 = *((unsigned __int8 *)a2 + 72);
    if (v25 == 255)
    {
      *uint64_t v11 = *v12;
      a1[72] = *((unsigned char *)v12 + 8);
    }
    else
    {
      uint64_t v26 = a2[8];
      outlined copy of GraphicsImage.Contents(v26, *((unsigned char *)a2 + 72));
      *((void *)a1 + 8) = v26;
      a1[72] = v25;
      unint64_t v13 = (unint64_t)a2[23];
    }
    *((void *)a1 + 10) = a2[10];
    *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 11);
    a1[104] = *((unsigned char *)a2 + 104);
    *(_OWORD *)(a1 + 108) = *(_OWORD *)((char *)a2 + 108);
    a1[124] = *((unsigned char *)a2 + 124);
    long long v27 = *((_OWORD *)a2 + 9);
    *((_OWORD *)a1 + 8) = *((_OWORD *)a2 + 8);
    *((_OWORD *)a1 + 9) = v27;
    *((_WORD *)a1 + 80) = *((_WORD *)a2 + 80);
    a1[162] = *((unsigned char *)a2 + 162);
    a1[163] = *((unsigned char *)a2 + 163);
    if (v13 >> 1 == 0xFFFFFFFF)
    {
      long long v28 = *(_OWORD *)(a2 + 23);
      *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 21);
      *(_OWORD *)(a1 + 184) = v28;
    }
    else
    {
      uint64_t v29 = (uint64_t)a2[21];
      uint64_t v30 = (uint64_t)a2[22];
      uint64_t v31 = a2[24];
      outlined copy of AccessibilityImageLabel(v29, v30, v13);
      *((void *)a1 + 21) = v29;
      *((void *)a1 + 22) = v30;
      *((void *)a1 + 23) = v13;
      *((void *)a1 + 24) = v31;
    }
    unint64_t v32 = a2[26];
    *((void *)a1 + 25) = a2[25];
    *((void *)a1 + 26) = v32;
    *((_WORD *)a1 + 108) = *((_WORD *)a2 + 108);
    *((_DWORD *)a1 + 55) = *((_DWORD *)a2 + 55);
    a1[224] = *((unsigned char *)a2 + 224);
    char v33 = a2[29];
    *((void *)a1 + 29) = v33;
    *((_WORD *)a1 + 120) = *((_WORD *)a2 + 120);
    a1[242] = *((unsigned char *)a2 + 242);
    swift_unknownObjectRetain();
    swift_retain();
    id v34 = v33;
    uint64_t v21 = a2[32];
    if (v21) {
      goto LABEL_4;
    }
LABEL_15:
    long long v35 = *(_OWORD *)(a2 + 33);
    *(_OWORD *)(a1 + 248) = *(_OWORD *)(a2 + 31);
    *(_OWORD *)(a1 + 264) = v35;
    *(_OWORD *)(a1 + 280) = *(_OWORD *)(a2 + 35);
    goto LABEL_16;
  }
  long long v16 = *((_OWORD *)v12 + 9);
  *((_OWORD *)a1 + 12) = *((_OWORD *)v12 + 8);
  *((_OWORD *)a1 + 13) = v16;
  *((_OWORD *)a1 + 14) = *((_OWORD *)v12 + 10);
  *(_DWORD *)(a1 + 239) = *(_DWORD *)((char *)v12 + 175);
  long long v17 = *((_OWORD *)v12 + 5);
  *((_OWORD *)a1 + 8) = *((_OWORD *)v12 + 4);
  *((_OWORD *)a1 + 9) = v17;
  long long v18 = *((_OWORD *)v12 + 7);
  *((_OWORD *)a1 + 10) = *((_OWORD *)v12 + 6);
  *((_OWORD *)a1 + 11) = v18;
  long long v19 = *((_OWORD *)v12 + 1);
  *(_OWORD *)uint64_t v11 = *(_OWORD *)v12;
  *((_OWORD *)a1 + 5) = v19;
  long long v20 = *((_OWORD *)v12 + 3);
  *((_OWORD *)a1 + 6) = *((_OWORD *)v12 + 2);
  *((_OWORD *)a1 + 7) = v20;
  uint64_t v21 = a2[32];
  if (!v21) {
    goto LABEL_15;
  }
LABEL_4:
  *((void *)a1 + 31) = a2[31];
  *((void *)a1 + 32) = v21;
  unint64_t v22 = a2[33];
  swift_bridgeObjectRetain();
  if ((unint64_t)v22 >= 2) {
    char v23 = v22;
  }
  *((void *)a1 + 33) = v22;
  *((_DWORD *)a1 + 68) = *((_DWORD *)a2 + 68);
  a1[276] = *((unsigned char *)a2 + 276);
  *(_WORD *)(a1 + 277) = *(_WORD *)((char *)a2 + 277);
  id v24 = a2[36];
  *((void *)a1 + 35) = a2[35];
  *((void *)a1 + 36) = v24;
  swift_retain();
  swift_retain();
LABEL_16:
  unint64_t v36 = (unint64_t)a2[41];
  unint64_t v98 = v6;
  if (v36 >> 2 == 0xFFFFFFFF)
  {
    long long v37 = *(_OWORD *)(a2 + 47);
    *(_OWORD *)(a1 + 360) = *(_OWORD *)(a2 + 45);
    *(_OWORD *)(a1 + 376) = v37;
    *((void *)a1 + 49) = a2[49];
    long long v38 = *(_OWORD *)(a2 + 39);
    *(_OWORD *)(a1 + 296) = *(_OWORD *)(a2 + 37);
    *(_OWORD *)(a1 + 312) = v38;
    long long v39 = *(_OWORD *)(a2 + 43);
    *(_OWORD *)(a1 + 328) = *(_OWORD *)(a2 + 41);
    *(_OWORD *)(a1 + 344) = v39;
  }
  else
  {
    long long v40 = a2[37];
    uint64_t v41 = (uint64_t)a2[38];
    uint64_t v42 = (uint64_t)a2[39];
    uint64_t v43 = (uint64_t)a2[40];
    uint64_t v44 = (uint64_t)a2[42];
    uint64_t v45 = (uint64_t)a2[43];
    uint64_t v46 = a2[44];
    uint64_t v89 = (uint64_t)a2[45];
    uint64_t v90 = (uint64_t)a2[46];
    uint64_t v91 = (uint64_t)a2[47];
    long long v93 = a2[48];
    __dsta = a2[49];
    outlined copy of PlatformItemList.Item.SystemItem(v40, v41, v42, v43, v36, v44, v45, (char)v46, v89, v90, v91, (char)v93, (uint64_t)__dsta);
    *((void *)a1 + 37) = v40;
    *((void *)a1 + 38) = v41;
    *((void *)a1 + 39) = v42;
    *((void *)a1 + 40) = v43;
    *((void *)a1 + 41) = v36;
    *((void *)a1 + 42) = v44;
    *((void *)a1 + 43) = v45;
    *((void *)a1 + 44) = v46;
    *((void *)a1 + 45) = v89;
    *((void *)a1 + 46) = v90;
    *((void *)a1 + 47) = v91;
    *((void *)a1 + 48) = v93;
    uint64_t v6 = v98;
    *((void *)a1 + 49) = __dsta;
  }
  char v47 = a2[51];
  if (v47 != (char *)1)
  {
    *((_DWORD *)a1 + 100) = *((_DWORD *)a2 + 100);
    a1[404] = *((unsigned char *)a2 + 404);
    if (v47)
    {
      uint64_t v50 = a2[52];
      *((void *)a1 + 51) = v47;
      *((void *)a1 + 52) = v50;
      swift_retain();
      int v51 = a2[53];
      if (v51) {
        goto LABEL_23;
      }
    }
    else
    {
      *(_OWORD *)(a1 + 408) = *(_OWORD *)(a2 + 51);
      int v51 = a2[53];
      if (v51)
      {
LABEL_23:
        uint64_t v52 = a2[54];
        *((void *)a1 + 53) = v51;
        *((void *)a1 + 54) = v52;
        swift_retain();
        uint64_t v53 = a2[55];
        if (v53)
        {
LABEL_24:
          int v54 = a2[56];
          *((void *)a1 + 55) = v53;
          *((void *)a1 + 56) = v54;
          swift_retain();
LABEL_28:
          *((void *)a1 + 57) = a2[57];
          a1[464] = *((unsigned char *)a2 + 464);
          goto LABEL_29;
        }
LABEL_27:
        *(_OWORD *)(a1 + 440) = *(_OWORD *)(a2 + 55);
        goto LABEL_28;
      }
    }
    *(_OWORD *)(a1 + 424) = *(_OWORD *)(a2 + 53);
    uint64_t v53 = a2[55];
    if (v53) {
      goto LABEL_24;
    }
    goto LABEL_27;
  }
  long long v48 = *((_OWORD *)a2 + 28);
  *((_OWORD *)a1 + 27) = *((_OWORD *)a2 + 27);
  *((_OWORD *)a1 + 28) = v48;
  a1[464] = *((unsigned char *)a2 + 464);
  long long v49 = *((_OWORD *)a2 + 26);
  *((_OWORD *)a1 + 25) = *((_OWORD *)a2 + 25);
  *((_OWORD *)a1 + 26) = v49;
LABEL_29:
  uint64_t v55 = a2[60];
  *((void *)a1 + 59) = a2[59];
  *((void *)a1 + 60) = v55;
  *((void *)a1 + 61) = a2[61];
  a1[496] = *((unsigned char *)a2 + 496);
  long long v56 = a2[63];
  swift_bridgeObjectRetain();
  if (v56)
  {
    long long v57 = a2[64];
    *((void *)a1 + 63) = v56;
    *((void *)a1 + 64) = v57;
    swift_retain();
  }
  else
  {
    *(_OWORD *)(a1 + 504) = *(_OWORD *)(a2 + 63);
  }
  *((_WORD *)a1 + 260) = *((_WORD *)a2 + 260);
  long long v58 = a2[66];
  if (v58)
  {
    *((void *)a1 + 66) = v58;
    *((void *)a1 + 67) = a2[67];
    *((void *)a1 + 68) = a2[68];
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
  }
  else
  {
    *((_OWORD *)a1 + 33) = *((_OWORD *)a2 + 33);
    *((void *)a1 + 68) = a2[68];
  }
  long long v59 = a2[69];
  if (v59 == (char *)1)
  {
    *(_OWORD *)(a1 + 552) = *(_OWORD *)(a2 + 69);
    *((void *)a1 + 71) = a2[71];
  }
  else
  {
    *((void *)a1 + 69) = v59;
    long long v60 = a2[70];
    swift_retain();
    if (v60)
    {
      long long v61 = a2[71];
      *((void *)a1 + 70) = v60;
      *((void *)a1 + 71) = v61;
      swift_retain();
    }
    else
    {
      *((_OWORD *)a1 + 35) = *((_OWORD *)a2 + 35);
    }
  }
  long long v62 = a2[72];
  *((void *)a1 + 72) = v62;
  *((void *)a1 + 73) = a2[73];
  *((void *)a1 + 74) = a2[74];
  *((void *)a1 + 75) = a2[75];
  *((void *)a1 + 76) = a2[76];
  *((void *)a1 + 77) = a2[77];
  long long v63 = a2[78];
  *((_WORD *)a1 + 316) = *((_WORD *)a2 + 316);
  a1[634] = *((unsigned char *)a2 + 634);
  uint64_t v64 = v6[28];
  __dst = &a1[v64];
  long long v65 = (char *)a2 + v64;
  *((void *)a1 + 78) = v63;
  uint64_t v66 = type metadata accessor for CommandOperation();
  uint64_t v92 = *(void *)(v66 - 8);
  uint64_t v94 = *(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v92 + 48);
  long long v67 = v62;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v94(v65, 1, v66))
  {
    type metadata accessor for CommandOperation?(0, &lazy cache variable for type metadata for CommandOperation?, (uint64_t (*)(uint64_t))type metadata accessor for CommandOperation, MEMORY[0x1E4FBB718]);
    memcpy(__dst, v65, *(void *)(*(void *)(v68 - 8) + 64));
    long long v69 = v98;
  }
  else
  {
    char *__dst = *v65;
    uint64_t v70 = *(int *)(v66 + 20);
    long long v71 = &__dst[v70];
    long long v72 = &v65[v70];
    uint64_t v95 = v65;
    uint64_t v73 = v66;
    uint64_t v74 = *(void *)v72;
    uint64_t v75 = *((void *)v72 + 1);
    char v76 = v72[16];
    outlined copy of Text.Storage(*(void *)v72, v75, v76);
    *(void *)long long v71 = v74;
    *((void *)v71 + 1) = v75;
    v71[16] = v76;
    *((void *)v71 + 3) = *((void *)v72 + 3);
    uint64_t v77 = *(int *)(type metadata accessor for CommandGroupPlacement(0) + 20);
    unint64_t v78 = &v71[v77];
    char v79 = &v72[v77];
    uint64_t v80 = type metadata accessor for UUID();
    long long v81 = *(void (**)(char *, unsigned char *, uint64_t))(*(void *)(v80 - 8) + 16);
    swift_bridgeObjectRetain();
    v81(v78, v79, v80);
    uint64_t v82 = *(int *)(v73 + 24);
    long long v83 = &__dst[v82];
    long long v84 = &v95[v82];
    if (*v84)
    {
      uint64_t v85 = v84[1];
      *(void *)long long v83 = *v84;
      *((void *)v83 + 1) = v85;
      swift_retain();
    }
    else
    {
      *(_OWORD *)long long v83 = *(_OWORD *)v84;
    }
    long long v69 = v98;
    (*(void (**)(char *, void, uint64_t, uint64_t))(v92 + 56))(__dst, 0, 1, v73);
  }
  uint64_t v86 = v69[30];
  a1[v69[29]] = *((unsigned char *)a2 + v69[29]);
  a1[v86] = *((unsigned char *)a2 + v86);
  uint64_t v87 = v69[32];
  a1[v69[31]] = *((unsigned char *)a2 + v69[31]);
  a1[v87] = *((unsigned char *)a2 + v87);
  *(void *)&a1[v69[33]] = *(char **)((char *)a2 + v69[33]);
LABEL_47:
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for PlatformItemList.Item.SelectionBehavior(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(unsigned char *)(a1 + 1) = *(unsigned char *)(a2 + 1);
  *(unsigned char *)(a1 + 2) = *(unsigned char *)(a2 + 2);
  *(unsigned char *)(a1 + 3) = *(unsigned char *)(a2 + 3);
  *(unsigned char *)(a1 + 4) = *(unsigned char *)(a2 + 4);
  int v4 = (_OWORD *)(a1 + 8);
  uint64_t v6 = (_OWORD *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 8);
  if (*(void *)(a1 + 8))
  {
    if (v5)
    {
      uint64_t v7 = *(void *)(a2 + 16);
      *(void *)(a1 + 8) = v5;
      *(void *)(a1 + 16) = v7;
      swift_retain();
      swift_release();
      goto LABEL_8;
    }
    swift_release();
  }
  else if (v5)
  {
    uint64_t v8 = *(void *)(a2 + 16);
    *(void *)(a1 + 8) = v5;
    *(void *)(a1 + 16) = v8;
    swift_retain();
    goto LABEL_8;
  }
  *int v4 = *v6;
LABEL_8:
  uint64_t v9 = *(void *)(a2 + 24);
  if (*(void *)(a1 + 24))
  {
    if (v9)
    {
      uint64_t v10 = *(void *)(a2 + 32);
      *(void *)(a1 + 24) = v9;
      *(void *)(a1 + 32) = v10;
      swift_retain();
      swift_release();
      goto LABEL_15;
    }
    swift_release();
  }
  else if (v9)
  {
    uint64_t v11 = *(void *)(a2 + 32);
    *(void *)(a1 + 24) = v9;
    *(void *)(a1 + 32) = v11;
    swift_retain();
    goto LABEL_15;
  }
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
LABEL_15:
  uint64_t v12 = *(void *)(a2 + 40);
  if (!*(void *)(a1 + 40))
  {
    if (v12)
    {
      uint64_t v14 = *(void *)(a2 + 48);
      *(void *)(a1 + 40) = v12;
      *(void *)(a1 + 48) = v14;
      swift_retain();
      goto LABEL_22;
    }
LABEL_21:
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
    goto LABEL_22;
  }
  if (!v12)
  {
    swift_release();
    goto LABEL_21;
  }
  uint64_t v13 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = v12;
  *(void *)(a1 + 48) = v13;
  swift_retain();
  swift_release();
LABEL_22:
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  return a1;
}

void outlined consume of PlatformItemList.Item.SystemItem(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7, char a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13)
{
  if (a5 >> 62 == 2)
  {
    outlined consume of AnyShareConfiguration.Storage((uint64_t)a1, a2, a3, a4, a5);
    outlined consume of Text?(a6, a7, a8, a9);
    outlined consume of Text?(a10, a11, a12, a13);
  }
  else if (a5 >> 62 == 1)
  {
  }
}

uint64_t destroy for MainMenuItemHost.RootView(uint64_t a1)
{
  swift_bridgeObjectRelease();
  uint64_t v2 = a1 + *(int *)(type metadata accessor for MainMenuItem(0) + 20);
  uint64_t v3 = type metadata accessor for UUID();
  uint64_t v4 = *(void *)(v3 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(v2, 10, v3)) {
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v2, v3);
  }

  return swift_bridgeObjectRelease();
}

uint64_t protocol witness for View.body.getter in conformance MainMenuItemHost.RootView@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v5 = *(void *)(a1 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  MEMORY[0x1F4188790](a1 - 8);
  uint64_t v7 = type metadata accessor for MainMenuItem.Content();
  MEMORY[0x1F4188790](v7 - 8);
  uint64_t v9 = (char *)&v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of MainMenuItem(v3, (uint64_t)v9, (uint64_t (*)(void))type metadata accessor for MainMenuItem.Content);
  outlined init with copy of MainMenuItem(v3, (uint64_t)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for MainMenuItemHost.RootView);
  unint64_t v10 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v11 = swift_allocObject();
  outlined init with take of MainMenuItemHost.RootView((uint64_t)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v11 + v10);
  outlined init with copy of MainMenuItem((uint64_t)v9, a2, (uint64_t (*)(void))type metadata accessor for MainMenuItem.Content);
  type metadata accessor for ModifiedContent<MainMenuItem.Content, PlatformItemListTransformModifier<AllPlatformItemListFlags>>();
  uint64_t v13 = (uint64_t (**)(unint64_t))(a2 + *(int *)(v12 + 36));
  *uint64_t v13 = partial apply for closure #1 in MainMenuItemHost.RootView.body.getter;
  v13[1] = (uint64_t (*)(unint64_t))v11;
  return outlined destroy of MainMenuItemHost.RootView((uint64_t)v9, (uint64_t (*)(void))type metadata accessor for MainMenuItem.Content);
}

void static HoverEffectGroup.Scope.global.getter()
{
}

void static HoverEffectGroup.Scope.local.getter()
{
}

uint64_t static AdaptableTabView.updateEntryCache(_:adding:)(void *a1, void *a2)
{
  uint64_t v4 = a2[3];
  uint64_t v5 = a2[4];
  outlined init with copy of TabItemGroup((uint64_t)a2, (uint64_t)__src);
  char v76 = 1;
  outlined copy of TabCustomizationID.Base();
  specialized Dictionary.subscript.setter((uint64_t)__src, v4, v5);
  long long v59 = a2;
  uint64_t v6 = a2[1];
  uint64_t v7 = *(void *)(v6 + 16);
  if (v7)
  {
    uint64_t v8 = v6 + 32;
    swift_bridgeObjectRetain();
    while (1)
    {
      outlined init with copy of TabEntry(v8, (uint64_t)__src);
      if ((v76 & 1) == 0) {
        break;
      }
      memcpy(__dst, __src, sizeof(__dst));
      static AdaptableTabView.updateEntryCache(_:adding:)(a1, __dst);
      outlined destroy of TabItemGroup((uint64_t)__dst);
LABEL_4:
      v8 += 272;
      if (!--v7)
      {
        swift_bridgeObjectRelease();
        goto LABEL_29;
      }
    }
    v70[4] = *(_OWORD *)&__src[64];
    long long v71 = *(_OWORD *)&__src[80];
    uint64_t v72 = *(void *)&__src[96];
    v70[0] = *(_OWORD *)__src;
    v70[1] = *(_OWORD *)&__src[16];
    v70[2] = *(_OWORD *)&__src[32];
    v70[3] = *(_OWORD *)&__src[48];
    __dst[0] = *(void *)&__src[96];
    uint64_t v9 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v11 = v10;
    uint64_t v12 = (void *)*((void *)&v71 + 1);
    long long v69 = (void *)*((void *)&v71 + 1);
    uint64_t v13 = one-time initialization token for defaultValue;
    swift_bridgeObjectRetain();
    if (v13 != -1) {
      swift_once();
    }
    __int16 v60 = static TabOptions.TraitKey.defaultValue;
    char v61 = byte_1E90FC582;
    long long v62 = *(_OWORD *)&qword_1E90FC588;
    __int16 v63 = word_1E90FC598;
    char v64 = byte_1E90FC59A;
    uint64_t v65 = qword_1E90FC5A0;
    __int16 v66 = word_1E90FC5A8;
    ViewTraitCollection.value<A>(for:defaultValue:)();
    swift_bridgeObjectRelease();
    char v14 = __dst[5];
    outlined consume of TabCustomizationID?(__dst[1], __dst[2], __dst[3]);
    swift_bridgeObjectRelease();
    if (v14)
    {
      __dst[0] = v12;
      if ((ViewTraitCollection.isAuxiliaryContent.getter() & 1) == 0
        && (TabItem.needsCustomizationIDForEnablement.getter() & 1) != 0)
      {
        long long v69 = v12;
        __int16 v60 = static TabOptions.TraitKey.defaultValue;
        char v61 = byte_1E90FC582;
        long long v62 = *(_OWORD *)&qword_1E90FC588;
        __int16 v63 = word_1E90FC598;
        char v64 = byte_1E90FC59A;
        uint64_t v65 = qword_1E90FC5A0;
        __int16 v66 = word_1E90FC5A8;
        ViewTraitCollection.value<A>(for:defaultValue:)();
        uint64_t v15 = __dst[1];
        uint64_t v16 = __dst[2];
        int v17 = LOBYTE(__dst[3]);
        outlined copy of TabCustomizationID?(__dst[1], __dst[2], __dst[3]);
        outlined consume of TabCustomizationID?(v15, v16, v17);
        swift_bridgeObjectRelease();
        if (v17 != 255)
        {
          swift_bridgeObjectRelease();
          uint64_t v9 = v15;
          uint64_t v11 = v16;
        }
      }
    }
    else
    {
      swift_bridgeObjectRelease();
      if (one-time initialization token for searchPlatformIdentifier != -1) {
        swift_once();
      }
      uint64_t v9 = static TabItem.searchPlatformIdentifier;
      uint64_t v11 = unk_1E90FC510;
      swift_bridgeObjectRetain();
    }
    outlined init with copy of TabItem((uint64_t)v70, (uint64_t)__dst);
    char v74 = 0;
    outlined init with take of TabEntry((uint64_t)__dst, (uint64_t)&v60);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    long long v69 = (void *)*a1;
    long long v19 = v69;
    *a1 = 0x8000000000000000;
    unint64_t v21 = specialized __RawDictionaryStorage.find<A>(_:)(v9, v11);
    uint64_t v22 = v19[2];
    BOOL v23 = (v20 & 1) == 0;
    uint64_t v24 = v22 + v23;
    if (__OFADD__(v22, v23)) {
      goto LABEL_57;
    }
    char v25 = v20;
    if (v19[3] < v24)
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v24, isUniquelyReferenced_nonNull_native);
      unint64_t v26 = specialized __RawDictionaryStorage.find<A>(_:)(v9, v11);
      if ((v25 & 1) != (v27 & 1)) {
        goto LABEL_60;
      }
      unint64_t v21 = v26;
      long long v28 = v69;
      if ((v25 & 1) == 0) {
        goto LABEL_25;
      }
LABEL_23:
      outlined assign with take of TabEntry((uint64_t)&v60, v28[7] + 272 * v21);
LABEL_27:
      *a1 = v28;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined destroy of TabItem((uint64_t)v70);
      goto LABEL_4;
    }
    if (isUniquelyReferenced_nonNull_native)
    {
      long long v28 = v69;
      if (v20) {
        goto LABEL_23;
      }
    }
    else
    {
      specialized _NativeDictionary.copy()();
      long long v28 = v69;
      if (v25) {
        goto LABEL_23;
      }
    }
LABEL_25:
    v28[(v21 >> 6) + 8] |= 1 << v21;
    uint64_t v29 = (uint64_t *)(v28[6] + 16 * v21);
    *uint64_t v29 = v9;
    v29[1] = v11;
    outlined init with take of TabEntry((uint64_t)&v60, v28[7] + 272 * v21);
    uint64_t v30 = v28[2];
    BOOL v31 = __OFADD__(v30, 1);
    uint64_t v32 = v30 + 1;
    if (v31) {
      goto LABEL_59;
    }
    v28[2] = v32;
    swift_bridgeObjectRetain();
    goto LABEL_27;
  }
LABEL_29:
  uint64_t result = v59[2];
  uint64_t v34 = *(void *)(result + 16);
  if (!v34) {
    return result;
  }
  uint64_t v35 = result + 32;
  swift_bridgeObjectRetain();
  while (1)
  {
    outlined init with copy of TabItem(v35, (uint64_t)&v60);
    *(void *)__src = v68;
    uint64_t v36 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v38 = v37;
    uint64_t v39 = v67;
    *(void *)&v70[0] = v67;
    uint64_t v40 = one-time initialization token for defaultValue;
    swift_bridgeObjectRetain();
    if (v40 != -1) {
      swift_once();
    }
    LOWORD(__dst[0]) = static TabOptions.TraitKey.defaultValue;
    BYTE2(__dst[0]) = byte_1E90FC582;
    *(_OWORD *)&__dst[1] = *(_OWORD *)&qword_1E90FC588;
    LOWORD(__dst[3]) = word_1E90FC598;
    BYTE2(__dst[3]) = byte_1E90FC59A;
    __dst[4] = qword_1E90FC5A0;
    LOWORD(__dst[5]) = word_1E90FC5A8;
    ViewTraitCollection.value<A>(for:defaultValue:)();
    swift_bridgeObjectRelease();
    char v41 = __src[40];
    outlined consume of TabCustomizationID?(*(uint64_t *)&__src[8], *(uint64_t *)&__src[16], __src[24]);
    swift_bridgeObjectRelease();
    if (v41)
    {
      *(void *)__src = v39;
      if ((ViewTraitCollection.isAuxiliaryContent.getter() & 1) == 0
        && (TabItem.needsCustomizationIDForEnablement.getter() & 1) != 0)
      {
        *(void *)&v70[0] = v39;
        LOWORD(__dst[0]) = static TabOptions.TraitKey.defaultValue;
        BYTE2(__dst[0]) = byte_1E90FC582;
        *(_OWORD *)&__dst[1] = *(_OWORD *)&qword_1E90FC588;
        LOWORD(__dst[3]) = word_1E90FC598;
        BYTE2(__dst[3]) = byte_1E90FC59A;
        __dst[4] = qword_1E90FC5A0;
        LOWORD(__dst[5]) = word_1E90FC5A8;
        ViewTraitCollection.value<A>(for:defaultValue:)();
        uint64_t v42 = *(void *)&__src[8];
        uint64_t v43 = *(void *)&__src[16];
        int v44 = __src[24];
        outlined copy of TabCustomizationID?(*(uint64_t *)&__src[8], *(uint64_t *)&__src[16], __src[24]);
        outlined consume of TabCustomizationID?(v42, v43, v44);
        swift_bridgeObjectRelease();
        if (v44 != 255)
        {
          swift_bridgeObjectRelease();
          uint64_t v36 = v42;
          uint64_t v38 = v43;
        }
      }
    }
    else
    {
      swift_bridgeObjectRelease();
      if (one-time initialization token for searchPlatformIdentifier != -1) {
        swift_once();
      }
      uint64_t v36 = static TabItem.searchPlatformIdentifier;
      uint64_t v38 = unk_1E90FC510;
      swift_bridgeObjectRetain();
    }
    outlined init with copy of TabItem((uint64_t)&v60, (uint64_t)__src);
    char v76 = 0;
    outlined init with take of TabEntry((uint64_t)__src, (uint64_t)__dst);
    char v45 = swift_isUniquelyReferenced_nonNull_native();
    *(void *)&v70[0] = *a1;
    uint64_t v46 = *(void *)&v70[0];
    *a1 = 0x8000000000000000;
    unint64_t v48 = specialized __RawDictionaryStorage.find<A>(_:)(v36, v38);
    uint64_t v49 = *(void *)(v46 + 16);
    BOOL v50 = (v47 & 1) == 0;
    uint64_t v51 = v49 + v50;
    if (__OFADD__(v49, v50)) {
      break;
    }
    char v52 = v47;
    if (*(void *)(v46 + 24) >= v51)
    {
      if (v45)
      {
        uint64_t v55 = *(void **)&v70[0];
        if ((v47 & 1) == 0) {
          goto LABEL_50;
        }
      }
      else
      {
        specialized _NativeDictionary.copy()();
        uint64_t v55 = *(void **)&v70[0];
        if ((v52 & 1) == 0) {
          goto LABEL_50;
        }
      }
    }
    else
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v51, v45);
      unint64_t v53 = specialized __RawDictionaryStorage.find<A>(_:)(v36, v38);
      if ((v52 & 1) != (v54 & 1)) {
        goto LABEL_60;
      }
      unint64_t v48 = v53;
      uint64_t v55 = *(void **)&v70[0];
      if ((v52 & 1) == 0)
      {
LABEL_50:
        v55[(v48 >> 6) + 8] |= 1 << v48;
        long long v56 = (uint64_t *)(v55[6] + 16 * v48);
        uint64_t *v56 = v36;
        v56[1] = v38;
        outlined init with take of TabEntry((uint64_t)__dst, v55[7] + 272 * v48);
        uint64_t v57 = v55[2];
        BOOL v31 = __OFADD__(v57, 1);
        uint64_t v58 = v57 + 1;
        if (v31) {
          goto LABEL_58;
        }
        v55[2] = v58;
        swift_bridgeObjectRetain();
        goto LABEL_32;
      }
    }
    outlined assign with take of TabEntry((uint64_t)__dst, v55[7] + 272 * v48);
LABEL_32:
    *a1 = v55;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined destroy of TabItem((uint64_t)&v60);
    v35 += 104;
    if (!--v34) {
      return swift_bridgeObjectRelease();
    }
  }
  __break(1u);
LABEL_57:
  __break(1u);
LABEL_58:
  __break(1u);
LABEL_59:
  __break(1u);
LABEL_60:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

void type metadata accessor for UIKitMenuButton<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content>()
{
  if (!lazy cache variable for type metadata for UIKitMenuButton<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content>)
  {
    unint64_t v0 = type metadata accessor for UIKitMenuButton();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for UIKitMenuButton<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content>);
    }
  }
}

uint64_t SheetPreference.Value.dismissalTransaction(for:)(uint64_t a1)
{
  outlined init with copy of SheetPreference.Value(v1, (uint64_t)v8);
  if (v9)
  {
    if (v9 == 1) {
      outlined destroy of SheetPreference.Value((uint64_t)v8);
    }
    return 1;
  }
  uint64_t v3 = v8[0];
  if (!*(void *)(v8[0] + 16) || (uint64_t v4 = specialized __RawDictionaryStorage.find<A>(_:)(a1), (v5 & 1) == 0))
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  uint64_t v6 = *(void *)(*(void *)(v3 + 56) + 8 * v4);
  swift_retain();
  swift_bridgeObjectRelease();
  return v6;
}

unint64_t SheetPreference.Value.debugDescription.getter()
{
  outlined init with copy of SheetPreference.Value(v0, (uint64_t)v9);
  if (v11)
  {
    if (v11 == 1)
    {
      v7[4] = v9[4];
      v8[0] = *(_OWORD *)v10;
      *(_OWORD *)((char *)v8 + 9) = *(_OWORD *)&v10[9];
      v7[0] = v9[0];
      v7[1] = v9[1];
      v7[2] = v9[2];
      v7[3] = v9[3];
      v4[0] = 0;
      v4[1] = 0xE000000000000000;
      _StringGuts.grow(_:)(20);
      swift_bridgeObjectRelease();
      unint64_t v5 = 0xD000000000000012;
      unint64_t v6 = 0x8000000188331550;
      outlined init with copy of SheetPreference((uint64_t)v7, (uint64_t)v4);
      v1._countAndFlagsBits = String.init<A>(describing:)();
      String.append(_:)(v1);
      swift_bridgeObjectRelease();
      unint64_t v2 = v5;
      outlined destroy of SheetPreference((uint64_t)v7);
    }
    else
    {
      return 0xD000000000000013;
    }
  }
  else
  {
    swift_bridgeObjectRelease();
    return 0xD000000000000016;
  }
  return v2;
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>, _HiddenModifier>, _PreferenceTransformModifier<AccessibilityAttachment.Key>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>, _HiddenModifier>, _PreferenceTransformModifier<AccessibilityAttachment.Key>>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, _ContainerValueWritingModifier<LabelItemRole?>>, AccessibilityAttachmentModifier>, DisableDeferredAccessibilityAttachmentModifier>, _BackgroundModifier<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>, _HiddenModifier>, _PreferenceTransformModifier<AccessibilityAttachment.Key>>>>, AccessibilityAttachmentModifier>, DetachDeferredAccessibilityAttachmentModifier>, EnableDeferredAccessibilityAttachmentModifier>, ViewInputFlagModifier<AccessibilityShowsLabelIcon>>, LabelIconPlatformItemModifier>(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>, _HiddenModifier>, type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>);
    type metadata accessor for ModifiedContent<LabelStyleConfiguration.Title, DetachedGeometryModifier>(255, (unint64_t *)&lazy cache variable for type metadata for _PreferenceTransformModifier<AccessibilityAttachment.Key>, (uint64_t)&type metadata for AccessibilityAttachment.Key, (uint64_t)&protocol witness table for AccessibilityAttachment.Key, MEMORY[0x1E4F41108]);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>, _HiddenModifier>, _PreferenceTransformModifier<AccessibilityAttachment.Key>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, OnPlatformContainerSelectionModifier>, ListButtonStyleDisabledOpacityModifier>, _DefaultForegroundStyleModifier<BorderlessButtonLabelShapeStyle<AnyShapeStyle>>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, OnPlatformContainerSelectionModifier>, ListButtonStyleDisabledOpacityModifier>, _DefaultForegroundStyleModifier<BorderlessButtonLabelShapeStyle<AnyShapeStyle>>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, OnPlatformContainerSelectionModifier>, ListButtonStyleDisabledOpacityModifier>, _DefaultForegroundStyleModifier<BorderlessButtonLabelShapeStyle<AnyShapeStyle>>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, OnPlatformContainerSelectionModifier>, ListButtonStyleDisabledOpacityModifier>, _DefaultForegroundStyleModifier<BorderlessButtonLabelShapeStyle<AnyShapeStyle>>>();
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, OnPlatformContainerSelectionModifier>, ListButtonStyleDisabledOpacityModifier> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, OnPlatformContainerSelectionModifier>, ListButtonStyleDisabledOpacityModifier> and conformance <> ModifiedContent<A, B>, type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, OnPlatformContainerSelectionModifier>, ListButtonStyleDisabledOpacityModifier>, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, OnPlatformContainerSelectionModifier> and conformance <> ModifiedContent<A, B>, (void (*)(void))lazy protocol witness table accessor for type ListButtonStyleDisabledOpacityModifier and conformance ListButtonStyleDisabledOpacityModifier);
    lazy protocol witness table accessor for type _DefaultForegroundStyleModifier<BorderlessButtonLabelShapeStyle<AnyShapeStyle>> and conformance _DefaultForegroundStyleModifier<A>(&lazy protocol witness table cache variable for type _DefaultForegroundStyleModifier<BorderlessButtonLabelShapeStyle<AnyShapeStyle>> and conformance _DefaultForegroundStyleModifier<A>, (void (*)(uint64_t))type metadata accessor for _DefaultForegroundStyleModifier<BorderlessButtonLabelShapeStyle<AnyShapeStyle>>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, OnPlatformContainerSelectionModifier>, ListButtonStyleDisabledOpacityModifier>, _DefaultForegroundStyleModifier<BorderlessButtonLabelShapeStyle<AnyShapeStyle>>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ControlGroup<ControlGroupStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, ControlGroupStyleModifier<MenuControlGroupStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, ControlGroupStyleModifier<ListControlGroupStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, ControlGroupStyleModifier<ListControlGroupStyle>, EmptyModifier>>, StaticIf<UseToolbarStyle, ControlGroupStyleModifier<ToolbarControlGroupStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ControlGroup<ControlGroupStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, ControlGroupStyleModifier<MenuControlGroupStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, ControlGroupStyleModifier<ListControlGroupStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, ControlGroupStyleModifier<ListControlGroupStyle>, EmptyModifier>>, StaticIf<UseToolbarStyle, ControlGroupStyleModifier<ToolbarControlGroupStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ControlGroup<ControlGroupStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, ControlGroupStyleModifier<MenuControlGroupStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, ControlGroupStyleModifier<ListControlGroupStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, ControlGroupStyleModifier<ListControlGroupStyle>, EmptyModifier>>, StaticIf<UseToolbarStyle, ControlGroupStyleModifier<ToolbarControlGroupStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ControlGroup<ControlGroupStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, ControlGroupStyleModifier<MenuControlGroupStyle>, EmptyModifier>>(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ControlGroup<ControlGroupStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, ControlGroupStyleModifier<MenuControlGroupStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, ControlGroupStyleModifier<ListControlGroupStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, ControlGroupStyleModifier<ListControlGroupStyle>, EmptyModifier>>, StaticIf<UseToolbarStyle, ControlGroupStyleModifier<ToolbarControlGroupStyle>, EmptyModifier>>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ControlGroup<ControlGroupStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, ControlGroupStyleModifier<MenuControlGroupStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, ControlGroupStyleModifier<ListControlGroupStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, ControlGroupStyleModifier<ListControlGroupStyle>, EmptyModifier>>, (void (*)(uint64_t))type metadata accessor for StaticIf<UseToolbarStyle, ControlGroupStyleModifier<ToolbarControlGroupStyle>, EmptyModifier>);
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ControlGroup<ControlGroupStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, ControlGroupStyleModifier<MenuControlGroupStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, ControlGroupStyleModifier<ListControlGroupStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, ControlGroupStyleModifier<ListControlGroupStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ControlGroup<ControlGroupStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, ControlGroupStyleModifier<MenuControlGroupStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, ControlGroupStyleModifier<ListControlGroupStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, ControlGroupStyleModifier<ListControlGroupStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ControlGroup<ControlGroupStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, ControlGroupStyleModifier<MenuControlGroupStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, ControlGroupStyleModifier<ListControlGroupStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, ControlGroupStyleModifier<ListControlGroupStyle>, EmptyModifier>>, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ControlGroup<ControlGroupStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, ControlGroupStyleModifier<MenuControlGroupStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, ControlGroupStyleModifier<ListControlGroupStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>, (void (*)(void))lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, ControlGroupStyleModifier<ListControlGroupStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>);
    lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, ControlGroupStyleModifier<MenuControlGroupStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>(&lazy protocol witness table cache variable for type StaticIf<UseToolbarStyle, ControlGroupStyleModifier<ToolbarControlGroupStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>, (void (*)(uint64_t))type metadata accessor for StaticIf<UseToolbarStyle, ControlGroupStyleModifier<ToolbarControlGroupStyle>, EmptyModifier>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ControlGroup<ControlGroupStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, ControlGroupStyleModifier<MenuControlGroupStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, ControlGroupStyleModifier<ListControlGroupStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, ControlGroupStyleModifier<ListControlGroupStyle>, EmptyModifier>>, StaticIf<UseToolbarStyle, ControlGroupStyleModifier<ToolbarControlGroupStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, OnPlatformContainerSelectionModifier>, ListButtonStyleDisabledOpacityModifier> and conformance <> ModifiedContent<A, B>(unint64_t *a1, void (*a2)(uint64_t), void (*a3)(void), void (*a4)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    a3();
    a4();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ControlGroup<ControlGroupStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, ControlGroupStyleModifier<MenuControlGroupStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, ControlGroupStyleModifier<ListControlGroupStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, ControlGroupStyleModifier<ListControlGroupStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>(unint64_t *a1, void (*a2)(uint64_t), void (*a3)(void), void (*a4)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    a3();
    a4();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void type metadata accessor for ModifiedContent<PrimitiveButtonStyleConfiguration.Label, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<PrimitiveButtonStyleConfiguration.Label, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>)
  {
    type metadata accessor for StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>();
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<PrimitiveButtonStyleConfiguration.Label, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<PrimitiveButtonStyleConfiguration.Label, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<PrimitiveButtonStyleConfiguration.Label, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<PrimitiveButtonStyleConfiguration.Label, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<PrimitiveButtonStyleConfiguration.Label, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>();
    lazy protocol witness table accessor for type StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<PrimitiveButtonStyleConfiguration.Label, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<LabelStyleConfiguration.Title, DetachedGeometryModifier>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = a5(0, a3, a4);
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<_ShapeView<Rectangle, Color>, _FrameLayout> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<_ShapeView<Rectangle, Color>, _FrameLayout> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<_ShapeView<Rectangle, Color>, _FrameLayout> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<_ShapeView<Rectangle, Color>, _FrameLayout>(255);
    _sSo7UIColorCAB7SwiftUI13ColorProviderACWlTm_3(&lazy protocol witness table cache variable for type _ShapeView<Rectangle, Color> and conformance _ShapeView<A, B>, (void (*)(uint64_t))type metadata accessor for _ShapeView<Rectangle, Color>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<_ShapeView<Rectangle, Color>, _FrameLayout> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<ListStyleContent, _EnvironmentKeyWritingModifier<MultimodalListStyle.IconStyle>>(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t a4)
{
  if (!*a2)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<MultimodalListStyle.IconStyle>(255, a3, a4, MEMORY[0x1E4F411E8]);
    unint64_t v5 = type metadata accessor for ModifiedContent();
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ListStyleContent, _EnvironmentKeyWritingModifier<MultimodalListStyle.IconStyle>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ListStyleContent, _EnvironmentKeyWritingModifier<MultimodalListStyle.IconStyle>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ListStyleContent, _EnvironmentKeyWritingModifier<MultimodalListStyle.IconStyle>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ListStyleContent, _EnvironmentKeyWritingModifier<MultimodalListStyle.IconStyle>>(255, &lazy cache variable for type metadata for ModifiedContent<ListStyleContent, _EnvironmentKeyWritingModifier<MultimodalListStyle.IconStyle>>, &lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<MultimodalListStyle.IconStyle>, (uint64_t)&type metadata for MultimodalListStyle.IconStyle);
    lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<MultimodalListStyle.IconStyle> and conformance _EnvironmentKeyWritingModifier<A>(&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<MultimodalListStyle.IconStyle> and conformance _EnvironmentKeyWritingModifier<A>, &lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<MultimodalListStyle.IconStyle>, (uint64_t)&type metadata for MultimodalListStyle.IconStyle);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ListStyleContent, _EnvironmentKeyWritingModifier<MultimodalListStyle.IconStyle>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<_ViewModifier_Content<ScrollIndicatorFlashOnAppearModifier>, _EnvironmentKeyTransformModifier<ScrollEnvironmentProperties>>(uint64_t a1, unint64_t *a2, unint64_t *a3, void (*a4)(void))
{
  if (!*a2)
  {
    type metadata accessor for _ViewModifier_Content<ScrollIndicatorFlashOnAppearModifier>(255, a3, a4);
    type metadata accessor for [HandGestureShortcutPaginationDirection](255, &lazy cache variable for type metadata for _EnvironmentKeyTransformModifier<ScrollEnvironmentProperties>, (uint64_t)&type metadata for ScrollEnvironmentProperties, MEMORY[0x1E4F41280]);
    unint64_t v5 = type metadata accessor for ModifiedContent();
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<_ViewModifier_Content<ScrollIndicatorFlashOnAppearModifier>, _EnvironmentKeyTransformModifier<ScrollEnvironmentProperties>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<ScrollIndicatorFlashOnAppearModifier>, _EnvironmentKeyTransformModifier<ScrollEnvironmentProperties>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<ScrollIndicatorFlashOnAppearModifier>, _EnvironmentKeyTransformModifier<ScrollEnvironmentProperties>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<_ViewModifier_Content<ScrollIndicatorFlashOnAppearModifier>, _EnvironmentKeyTransformModifier<ScrollEnvironmentProperties>>(255, &lazy cache variable for type metadata for ModifiedContent<_ViewModifier_Content<ScrollIndicatorFlashOnAppearModifier>, _EnvironmentKeyTransformModifier<ScrollEnvironmentProperties>>, &lazy cache variable for type metadata for _ViewModifier_Content<ScrollIndicatorFlashOnAppearModifier>, (void (*)(void))lazy protocol witness table accessor for type ScrollIndicatorFlashOnAppearModifier and conformance ScrollIndicatorFlashOnAppearModifier);
    lazy protocol witness table accessor for type _ViewModifier_Content<ScrollIndicatorFlashOnAppearModifier> and conformance _ViewModifier_Content<A>();
    lazy protocol witness table accessor for type _EnvironmentKeyTransformModifier<ScrollEnvironmentProperties> and conformance _EnvironmentKeyTransformModifier<A>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<ScrollIndicatorFlashOnAppearModifier>, _EnvironmentKeyTransformModifier<ScrollEnvironmentProperties>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t ModifiedContent<>.accessibilityDirectTouch(_:options:)@<X0>(char a1@<W0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6 = *a2;
  v8[0] = a1 & 1;
  v8[1] = v6;
  lazy protocol witness table accessor for type AccessibilityProperties.TouchInfoKey and conformance AccessibilityProperties.TouchInfoKey();
  return ModifiedContent<>.update<A>(_:replacing:isEnabled:)((uint64_t)&type metadata for AccessibilityProperties.TouchInfoKey, (uint64_t)v8, 1, a3, a4);
}

uint64_t MenuPickerStyle.Body.value.getter()
{
  type metadata accessor for PickerStyleConfiguration.Content();
  _s7SwiftUI20SectionStyleModifierVyAA016MenuPickerOptioncD0VGMaTm_0(255, &lazy cache variable for type metadata for SectionStyleModifier<MenuPickerOptionSectionStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type MenuPickerOptionSectionStyle and conformance MenuPickerOptionSectionStyle, (uint64_t)&type metadata for MenuPickerOptionSectionStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for SectionStyleModifier);
  type metadata accessor for ModifiedContent();
  uint64_t v0 = MEMORY[0x1E4F3FCF0];
  _s7SwiftUI18StyleContextWriterVyAA04MenucD0VGMaTm_0(255, (unint64_t *)&lazy cache variable for type metadata for StyleContextWriter<MenuStyleContext>, MEMORY[0x1E4F3FCF0], MEMORY[0x1E4F3FCE8], MEMORY[0x1E4F40318]);
  type metadata accessor for ModifiedContent();
  type metadata accessor for PickerStyleConfiguration.Label();
  type metadata accessor for PickerContentView();
  swift_getWitnessTable();
  type metadata accessor for Menu();
  _s7SwiftUI20SectionStyleModifierVyAA016MenuPickerOptioncD0VGMaTm_0(255, &lazy cache variable for type metadata for MenuStyleModifier<DefaultMenuStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type DefaultMenuStyle and conformance DefaultMenuStyle, (uint64_t)&type metadata for DefaultMenuStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for MenuStyleModifier);
  type metadata accessor for ModifiedContent();
  swift_getWitnessTable();
  lazy protocol witness table accessor for type StyleContextWriter<MenuStyleContext> and conformance StyleContextWriter<A>();
  swift_getWitnessTable();
  swift_getWitnessTable();
  swift_getWitnessTable();
  type metadata accessor for GroupElementsOfContent();
  uint64_t v1 = type metadata accessor for Group();
  type metadata accessor for PopUpButton();
  swift_getWitnessTable();
  type metadata accessor for GroupElementsOfContent();
  uint64_t v2 = type metadata accessor for Group();
  swift_getWitnessTable();
  swift_getWitnessTable();
  swift_getWitnessTable();
  swift_getWitnessTable();
  StaticIf<>.init<A>(in:then:else:)();
  _s7SwiftUI28StyleContextAcceptsPredicateVyAA04MenucD0VGMaTm_2(255, (unint64_t *)&lazy cache variable for type metadata for StyleContextAcceptsPredicate<MenuStyleContext>, v0, MEMORY[0x1E4F410E8]);
  v8[0] = v3;
  v8[1] = v1;
  void v8[2] = v2;
  v8[3] = lazy protocol witness table accessor for type StyleContextAcceptsPredicate<MenuStyleContext> and conformance StyleContextAcceptsPredicate<A>();
  uint64_t v4 = type metadata accessor for StaticIf();
  swift_getWitnessTable();
  static ViewBuilder.buildExpression<A>(_:)(v7);
  unint64_t v5 = *(void (**)(unsigned char *, uint64_t))(*(void *)(v4 - 8) + 8);
  v5(v7, v4);
  static ViewBuilder.buildExpression<A>(_:)(v8);
  return ((uint64_t (*)(void *, uint64_t))v5)(v8, v4);
}

uint64_t protocol witness for static PreferenceKey.defaultValue.getter in conformance FocusableBounds.Key@<X0>(void *a1@<X8>)
{
  return protocol witness for static PreferenceKey.defaultValue.getter in conformance FocusableBounds.Key(&one-time initialization token for defaultValue, &static FocusableBounds.Key.defaultValue, a1);
}

Swift::Void __swiftcall DropInfoAdaptor.setDropTargetLocation(_:at:)(CGPoint_optional _, Swift::Int at)
{
  uint64_t v5 = v4;
  unint64_t v6 = v3;
  char v7 = v2;
  double v9 = *(double *)&_.is_nil;
  uint64_t v10 = (void *)MEMORY[0x18C119DF0](v5, (__n128)_.value, *(__n128 *)&_.value.y);
  if (!v10) {
    return;
  }
  id v11 = objc_msgSend(v10, sel_items);
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIDragItem);
  uint64_t v12 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if ((v12 & 0xC000000000000001) == 0)
  {
    if ((v6 & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else if (*(void *)((v12 & 0xFFFFFFFFFFFFFF8) + 0x10) > v6)
    {
      id v13 = *(id *)(v12 + 8 * v6 + 32);
      goto LABEL_6;
    }
    __break(1u);
    return;
  }
  id v13 = (id)MEMORY[0x18C117680](v6, v12);
LABEL_6:
  id v20 = v13;
  swift_bridgeObjectRelease();
  uint64_t v14 = *(void *)(v5 + 8);
  if (v14)
  {
    uint64_t v15 = (uint64_t *)(v14 + 16);
    swift_beginAccess();
    if (v7)
    {
      id v19 = v20;
      specialized Dictionary._Variant.removeValue(forKey:)((uint64_t)v19);
    }
    else
    {
      double v16 = v9;
      id v17 = v20;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v21 = *v15;
      uint64_t *v15 = 0x8000000000000000;
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v17, isUniquelyReferenced_nonNull_native, v16, *(double *)&at);
      uint64_t *v15 = v21;

      swift_bridgeObjectRelease();
    }
    swift_endAccess();
    swift_unknownObjectRelease();
  }
  else
  {
    swift_unknownObjectRelease();
  }
}

uint64_t destroy for DropDestination(uint64_t a1)
{
  swift_weakDestroy();
  if (*(void *)(a1 + 40)) {
    __swift_destroy_boxed_opaque_existential_1(a1 + 16);
  }

  return swift_release();
}

void (*_UIHostingView.safeAreaRegions.modify(void *a1))(uint64_t a1)
{
  unint64_t v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = v1;
  uint64_t v4 = (void *)((char *)v1 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v1) + 0xB8));
  swift_beginAccess();
  v3[3] = *v4;
  return _UIHostingView.safeAreaRegions.modify;
}

uint64_t assignWithTake for StackItemsView(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (long long *)(a1 + 264);
  uint64_t v5 = (long long *)(a2 + 264);
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a2 + 392);
  uint64_t v7 = *(void *)(a1 + 8);
  uint64_t v8 = *(void *)(a1 + 16);
  uint64_t v9 = *(void *)(a1 + 24);
  uint64_t v10 = *(void *)(a1 + 32);
  uint64_t v11 = *(void *)(a1 + 40);
  uint64_t v12 = *(void *)(a1 + 48);
  uint64_t v13 = *(void *)(a1 + 56);
  uint64_t v14 = *(void *)(a1 + 64);
  long long v15 = *(_OWORD *)(a1 + 72);
  long long v16 = *(_OWORD *)(a1 + 88);
  long long v17 = *(_OWORD *)(a1 + 104);
  long long v18 = *(_OWORD *)(a1 + 120);
  long long v19 = *(_OWORD *)(a1 + 136);
  long long v20 = *(_OWORD *)(a1 + 152);
  long long v21 = *(_OWORD *)(a1 + 168);
  long long v22 = *(_OWORD *)(a1 + 184);
  long long v23 = *(_OWORD *)(a1 + 200);
  long long v24 = *(_OWORD *)(a1 + 216);
  long long v25 = *(_OWORD *)(a1 + 232);
  long long v26 = *(_OWORD *)(a1 + 248);
  long long v27 = *v4;
  long long v28 = v4[1];
  long long v29 = v4[2];
  long long v30 = v4[3];
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
  *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 184);
  *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 + 200);
  *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 216);
  *(_OWORD *)(a1 + 232) = *(_OWORD *)(a2 + 232);
  long long v31 = *v5;
  long long v32 = v5[1];
  long long v34 = v5[2];
  long long v33 = v5[3];
  long long v35 = v5[4];
  long long v36 = v5[5];
  long long v37 = v5[6];
  long long v38 = v5[7];
  *(_OWORD *)(a1 + 248) = *(_OWORD *)(a2 + 248);
  *uint64_t v4 = v31;
  v4[1] = v32;
  v4[2] = v34;
  v4[3] = v33;
  v4[4] = v35;
  v4[5] = v36;
  v4[6] = v37;
  v4[7] = v38;
  *(void *)(a1 + 392) = v6;
  outlined consume of NavigationState.Base(v7, v8, v9, v10, v11, v12, v13, v14, v15, WORD4(v15), v16, *((uint64_t *)&v16 + 1), v17, *((uint64_t *)&v17 + 1), v18, *((uint64_t *)&v18 + 1), v19, *((uint64_t *)&v19 + 1), v20,
    *((uint64_t *)&v20 + 1),
    v21,
    *((uint64_t *)&v21 + 1),
    v22,
    *((uint64_t *)&v22 + 1),
    v23,
    *((uint64_t *)&v23 + 1),
    v24,
    *((uint64_t *)&v24 + 1),
    v25,
    *((uint64_t *)&v25 + 1),
    v26,
    *((uint64_t *)&v26 + 1),
    v27,
    *((uint64_t *)&v27 + 1),
    v28,
    *((uint64_t *)&v28 + 1),
    v29,
    *((unint64_t *)&v29 + 1),
    v30);
  swift_weakTakeAssign();
  *(void *)(a1 + 408) = *(void *)(a2 + 408);
  swift_release();
  *(void *)(a1 + 416) = *(void *)(a2 + 416);
  swift_release();
  *(void *)(a1 + 424) = *(void *)(a2 + 424);
  *(unsigned char *)(a1 + 432) = *(unsigned char *)(a2 + 432);
  *(void *)(a1 + 440) = *(void *)(a2 + 440);
  *(unsigned char *)(a1 + 448) = *(unsigned char *)(a2 + 448);
  char v39 = *((unsigned char *)v5 + 200);
  uint64_t v40 = *(void *)(a1 + 456);
  char v41 = *((unsigned char *)v4 + 200);
  *(void *)(a1 + 456) = *(void *)(a2 + 456);
  *((unsigned char *)v4 + 200) = v39;
  outlined consume of Environment<Bool>.Content(v40, v41);
  char v42 = *((unsigned char *)v5 + 216);
  uint64_t v43 = *(void **)(a1 + 472);
  char v44 = *((unsigned char *)v4 + 216);
  *(void *)(a1 + 472) = *(void *)(a2 + 472);
  *((unsigned char *)v4 + 216) = v42;
  outlined consume of Environment<UISceneSession?>.Content(v43, v44);
  *(unsigned char *)(a1 + 488) = *((unsigned char *)v5 + 224);
  *(void *)(a1 + 496) = *(void *)(a2 + 496);
  swift_release();
  *(unsigned char *)(a1 + 504) = *((unsigned char *)v5 + 240);
  *(void *)(a1 + 512) = *(void *)(a2 + 512);
  swift_release();
  *(unsigned char *)(a1 + 520) = *(unsigned char *)(a2 + 520);
  *(void *)(a1 + 528) = *(void *)(a2 + 528);
  swift_release();
  *(void *)(a1 + 536) = *(void *)(a2 + 536);
  swift_release();
  *(void *)(a1 + 544) = *(void *)(a2 + 544);
  swift_release();
  return a1;
}

uint64_t assignWithCopy for StackItemsView(uint64_t a1, uint64_t a2)
{
  uint64_t v65 = (unsigned char *)(a2 + 464);
  uint64_t v66 = a1 + 464;
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v86 = *(void *)(a2 + 32);
  uint64_t v87 = *(void *)(a2 + 24);
  uint64_t v84 = *(void *)(a2 + 48);
  uint64_t v85 = *(void *)(a2 + 40);
  uint64_t v83 = *(void *)(a2 + 56);
  uint64_t v81 = *(void *)(a2 + 16);
  uint64_t v82 = *(void *)(a2 + 64);
  uint64_t v79 = *(void *)(a2 + 80);
  uint64_t v80 = *(void *)(a2 + 72);
  uint64_t v77 = *(void *)(a2 + 96);
  uint64_t v78 = *(void *)(a2 + 88);
  uint64_t v75 = *(void *)(a2 + 112);
  uint64_t v76 = *(void *)(a2 + 104);
  uint64_t v73 = *(void *)(a2 + 128);
  uint64_t v74 = *(void *)(a2 + 120);
  uint64_t v71 = *(void *)(a2 + 144);
  uint64_t v72 = *(void *)(a2 + 136);
  uint64_t v69 = *(void *)(a2 + 160);
  uint64_t v70 = *(void *)(a2 + 152);
  uint64_t v67 = *(void *)(a2 + 176);
  uint64_t v68 = *(void *)(a2 + 168);
  uint64_t v5 = *(void *)(a2 + 192);
  uint64_t v4 = *(void *)(a2 + 200);
  uint64_t v7 = *(void *)(a2 + 208);
  uint64_t v6 = *(void *)(a2 + 216);
  uint64_t v9 = *(void *)(a2 + 224);
  uint64_t v8 = *(void *)(a2 + 232);
  uint64_t v10 = *(void *)(a2 + 240);
  uint64_t v54 = *(void *)(a2 + 248);
  uint64_t v55 = *(void *)(a2 + 256);
  uint64_t v45 = *(void *)(a2 + 264);
  uint64_t v46 = *(void *)(a2 + 280);
  uint64_t v47 = *(void *)(a2 + 184);
  uint64_t v56 = *(void *)(a2 + 272);
  uint64_t v57 = *(void *)(a2 + 288);
  uint64_t v48 = *(void *)(a2 + 296);
  uint64_t v49 = *(void *)(a2 + 312);
  unint64_t v58 = *(void *)(a2 + 304);
  uint64_t v59 = *(void *)(a2 + 320);
  uint64_t v50 = *(void *)(a2 + 328);
  uint64_t v51 = *(void *)(a2 + 344);
  uint64_t v60 = *(void *)(a2 + 336);
  uint64_t v61 = *(void *)(a2 + 352);
  uint64_t v52 = *(void *)(a2 + 360);
  uint64_t v53 = *(void *)(a2 + 376);
  uint64_t v62 = *(void *)(a2 + 368);
  uint64_t v63 = *(void *)(a2 + 384);
  uint64_t v64 = *(void *)(a2 + 392);
  uint64_t v11 = *(void *)(a2 + 8);
  outlined copy of NavigationState.Base(v11, v81, v87, v86, v85, v84, v83, v82, v80, v79, v78, v77, v76, v75, v74, v73, v72, v71, v70,
    v69,
    v68,
    v67,
    v47,
    v5,
    v4,
    v7,
    v6,
    v9,
    v8,
    v10,
    v54,
    v55,
    v45,
    v56,
    v46,
    v57,
    v48,
    v58,
    v49);
  uint64_t v12 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = v11;
  long long v13 = *(_OWORD *)(a1 + 264);
  long long v14 = *(_OWORD *)(a1 + 280);
  *(void *)(a1 + 264) = v45;
  *(void *)(a1 + 280) = v46;
  long long v15 = *(_OWORD *)(a1 + 296);
  long long v16 = *(_OWORD *)(a1 + 312);
  *(void *)(a1 + 296) = v48;
  *(void *)(a1 + 312) = v49;
  *(void *)(a1 + 328) = v50;
  *(void *)(a1 + 344) = v51;
  *(void *)(a1 + 360) = v52;
  *(void *)(a1 + 376) = v53;
  uint64_t v17 = *(void *)(a1 + 16);
  uint64_t v18 = *(void *)(a1 + 24);
  *(void *)(a1 + 16) = v81;
  *(void *)(a1 + 24) = v87;
  uint64_t v19 = *(void *)(a1 + 32);
  uint64_t v20 = *(void *)(a1 + 40);
  *(void *)(a1 + 32) = v86;
  *(void *)(a1 + 40) = v85;
  uint64_t v21 = *(void *)(a1 + 48);
  uint64_t v22 = *(void *)(a1 + 56);
  *(void *)(a1 + 48) = v84;
  *(void *)(a1 + 56) = v83;
  long long v23 = *(_OWORD *)(a1 + 72);
  uint64_t v24 = *(void *)(a1 + 64);
  *(void *)(a1 + 64) = v82;
  *(void *)(a1 + 72) = v80;
  long long v25 = *(_OWORD *)(a1 + 88);
  *(void *)(a1 + 80) = v79;
  *(void *)(a1 + 88) = v78;
  long long v26 = *(_OWORD *)(a1 + 104);
  *(void *)(a1 + 96) = v77;
  *(void *)(a1 + 104) = v76;
  long long v27 = *(_OWORD *)(a1 + 120);
  *(void *)(a1 + 112) = v75;
  *(void *)(a1 + 120) = v74;
  long long v28 = *(_OWORD *)(a1 + 136);
  *(void *)(a1 + 128) = v73;
  *(void *)(a1 + 136) = v72;
  long long v29 = *(_OWORD *)(a1 + 152);
  *(void *)(a1 + 144) = v71;
  *(void *)(a1 + 152) = v70;
  long long v30 = *(_OWORD *)(a1 + 168);
  *(void *)(a1 + 160) = v69;
  *(void *)(a1 + 168) = v68;
  long long v31 = *(_OWORD *)(a1 + 184);
  *(void *)(a1 + 176) = v67;
  *(void *)(a1 + 184) = v47;
  long long v32 = *(_OWORD *)(a1 + 200);
  *(void *)(a1 + 192) = v5;
  *(void *)(a1 + 200) = v4;
  long long v33 = *(_OWORD *)(a1 + 216);
  *(void *)(a1 + 208) = v7;
  *(void *)(a1 + 216) = v6;
  long long v34 = *(_OWORD *)(a1 + 232);
  *(void *)(a1 + 224) = v9;
  *(void *)(a1 + 232) = v8;
  long long v35 = *(_OWORD *)(a1 + 248);
  *(void *)(a1 + 240) = v10;
  *(void *)(a1 + 248) = v54;
  *(void *)(a1 + 256) = v55;
  *(void *)(a1 + 272) = v56;
  *(void *)(a1 + 288) = v57;
  *(void *)(a1 + 304) = v58;
  *(void *)(a1 + 320) = v59;
  *(void *)(a1 + 336) = v60;
  *(void *)(a1 + 352) = v61;
  *(void *)(a1 + 368) = v62;
  *(void *)(a1 + 384) = v63;
  *(void *)(a1 + 392) = v64;
  outlined consume of NavigationState.Base(v12, v17, v18, v19, v20, v21, v22, v24, v23, WORD4(v23), v25, *((uint64_t *)&v25 + 1), v26, *((uint64_t *)&v26 + 1), v27, *((uint64_t *)&v27 + 1), v28, *((uint64_t *)&v28 + 1), v29,
    *((uint64_t *)&v29 + 1),
    v30,
    *((uint64_t *)&v30 + 1),
    v31,
    *((uint64_t *)&v31 + 1),
    v32,
    *((uint64_t *)&v32 + 1),
    v33,
    *((uint64_t *)&v33 + 1),
    v34,
    *((uint64_t *)&v34 + 1),
    v35,
    *((uint64_t *)&v35 + 1),
    v13,
    *((uint64_t *)&v13 + 1),
    v14,
    *((uint64_t *)&v14 + 1),
    v15,
    *((unint64_t *)&v15 + 1),
    v16);
  swift_weakCopyAssign();
  *(void *)(a1 + 408) = *(void *)(a2 + 408);
  swift_retain();
  swift_release();
  *(void *)(a1 + 416) = *(void *)(a2 + 416);
  swift_retain();
  swift_release();
  uint64_t v36 = *(void *)(a2 + 424);
  *(unsigned char *)(a1 + 432) = *(unsigned char *)(a2 + 432);
  *(void *)(a1 + 424) = v36;
  uint64_t v37 = *(void *)(a2 + 440);
  *(unsigned char *)(a1 + 448) = *(unsigned char *)(a2 + 448);
  *(void *)(a1 + 440) = v37;
  uint64_t v38 = *(void *)(a2 + 456);
  LOBYTE(v10) = *(unsigned char *)(a2 + 464);
  outlined copy of Environment<Bool>.Content(v38, v10);
  uint64_t v39 = *(void *)(a1 + 456);
  char v40 = *(unsigned char *)(a1 + 464);
  *(void *)(a1 + 456) = v38;
  *(unsigned char *)(a1 + 464) = v10;
  outlined consume of Environment<Bool>.Content(v39, v40);
  char v41 = *(void **)(a2 + 472);
  LOBYTE(v10) = v65[16];
  outlined copy of Environment<UISceneSession?>.Content(v41, v10);
  char v42 = *(void **)(a1 + 472);
  char v43 = *(unsigned char *)(v66 + 16);
  *(void *)(a1 + 472) = v41;
  *(unsigned char *)(v66 + 16) = v10;
  outlined consume of Environment<UISceneSession?>.Content(v42, v43);
  *(unsigned char *)(a1 + 488) = v65[24];
  *(void *)(a1 + 496) = *(void *)(a2 + 496);
  swift_retain();
  swift_release();
  *(unsigned char *)(a1 + 504) = v65[40];
  *(void *)(a1 + 512) = *(void *)(a2 + 512);
  swift_retain();
  swift_release();
  *(unsigned char *)(a1 + 520) = v65[56];
  *(void *)(a1 + 528) = *(void *)(a2 + 528);
  swift_retain();
  swift_release();
  *(void *)(a1 + 536) = *(void *)(a2 + 536);
  swift_retain();
  swift_release();
  *(void *)(a1 + 544) = *(void *)(a2 + 544);
  swift_retain();
  swift_release();
  return a1;
}

char *assignWithTake for PlaybackButton.Specs(char *a1, char *a2, int *a3)
{
  type metadata accessor for ClosedRange<Date>();
  uint64_t v6 = v5;
  uint64_t v7 = *(void *)(v5 - 8);
  uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  int v9 = v8(a1, 1, v5);
  int v10 = v8(a2, 1, v6);
  if (v9)
  {
    if (!v10)
    {
      uint64_t v11 = type metadata accessor for Date();
      uint64_t v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 32);
      v12(a1, a2, v11);
      v12(&a1[*(int *)(v6 + 36)], &a2[*(int *)(v6 + 36)], v11);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v10)
  {
    outlined destroy of ClosedRange<Date>((uint64_t)a1);
LABEL_6:
    _sSNy10Foundation4DateVGSgMaTm_1(0, &lazy cache variable for type metadata for ClosedRange<Date>?, (void (*)(uint64_t))type metadata accessor for ClosedRange<Date>);
    memcpy(a1, a2, *(void *)(*(void *)(v13 - 8) + 64));
    goto LABEL_7;
  }
  uint64_t v38 = type metadata accessor for Date();
  uint64_t v39 = *(void (**)(char *, char *, uint64_t))(*(void *)(v38 - 8) + 40);
  v39(a1, a2, v38);
  v39(&a1[*(int *)(v6 + 36)], &a2[*(int *)(v6 + 36)], v38);
LABEL_7:
  long long v14 = (int *)type metadata accessor for PlaybackButton.Configuration(0);
  uint64_t v15 = v14[5];
  long long v16 = &a1[v15];
  uint64_t v17 = &a2[v15];
  uint64_t v18 = type metadata accessor for Date();
  uint64_t v19 = *(void *)(v18 - 8);
  uint64_t v20 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v19 + 48);
  int v21 = v20(v16, 2, v18);
  int v22 = v20(v17, 2, v18);
  if (!v21)
  {
    if (!v22)
    {
      (*(void (**)(char *, char *, uint64_t))(v19 + 40))(v16, v17, v18);
      goto LABEL_13;
    }
    (*(void (**)(char *, uint64_t))(v19 + 8))(v16, v18);
    goto LABEL_12;
  }
  if (v22)
  {
LABEL_12:
    uint64_t v23 = type metadata accessor for PlaybackButton.State(0);
    memcpy(v16, v17, *(void *)(*(void *)(v23 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v19 + 32))(v16, v17, v18);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v19 + 56))(v16, 0, 2, v18);
LABEL_13:
  uint64_t v24 = v14[6];
  long long v25 = &a1[v24];
  long long v26 = &a2[v24];
  uint64_t v28 = *(void *)v26;
  uint64_t v27 = *((void *)v26 + 1);
  *(void *)long long v25 = v28;
  *((void *)v25 + 1) = v27;
  swift_bridgeObjectRelease();
  a1[v14[7]] = a2[v14[7]];
  a1[v14[8]] = a2[v14[8]];
  *(_OWORD *)&a1[v14[9]] = *(_OWORD *)&a2[v14[9]];
  uint64_t v29 = v14[10];
  long long v30 = &a1[v29];
  long long v31 = &a2[v29];
  LOBYTE(v29) = a2[v29 + 16];
  uint64_t v32 = *(void *)v30;
  uint64_t v33 = *((void *)v30 + 1);
  char v34 = v30[16];
  *(_OWORD *)long long v30 = *(_OWORD *)v31;
  v30[16] = v29;
  outlined consume of Environment<AppIntentExecutor?>.Content(v32, v33, v34);
  long long v35 = (void *)*((void *)v30 + 3);
  *((void *)v30 + 3) = *((void *)v31 + 3);

  *((_OWORD *)v30 + 2) = *((_OWORD *)v31 + 2);
  swift_release();
  uint64_t v36 = a3[6];
  *(void *)&a1[a3[5]] = *(void *)&a2[a3[5]];
  *(void *)&a1[v36] = *(void *)&a2[v36];
  *(void *)&a1[a3[7]] = *(void *)&a2[a3[7]];
  return a1;
}

uint64_t PlaybackButton.Specs.resolvedPauseDate.getter@<X0>(uint64_t a1@<X8>)
{
  _sSNy10Foundation4DateVGSgMaTm_1(0, &lazy cache variable for type metadata for ClosedRange<Date>?, (void (*)(uint64_t))type metadata accessor for ClosedRange<Date>);
  MEMORY[0x1F4188790](v3 - 8);
  uint64_t v5 = (char *)&v19 - v4;
  _sSNy10Foundation4DateVGSgMaTm_1(0, (unint64_t *)&lazy cache variable for type metadata for Date?, MEMORY[0x1E4F27928]);
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v8 = (char *)&v19 - v7;
  uint64_t v9 = type metadata accessor for PlaybackButton.State(0);
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v11 = (char *)&v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for PlaybackButton.Configuration(0);
  outlined init with copy of PlaybackButton.State(v1 + *(int *)(v12 + 20), (uint64_t)v11);
  uint64_t v13 = type metadata accessor for Date();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48);
  int v16 = v15(v11, 2, v13);
  if (!v16) {
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v14 + 32))(a1, v11, v13);
  }
  if (v16 != 1) {
    return static Date.now.getter();
  }
  outlined init with copy of ClosedRange<Date>?(v1, (uint64_t)v5);
  type metadata accessor for ClosedRange<Date>();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v17 - 8) + 48))(v5, 1, v17) == 1)
  {
    _sSNy10Foundation4DateVGSgWOhTm_1((uint64_t)v5, &lazy cache variable for type metadata for ClosedRange<Date>?, (void (*)(uint64_t))type metadata accessor for ClosedRange<Date>);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v14 + 56))(v8, 1, 1, v13);
LABEL_8:
    static Date.now.getter();
    return _sSNy10Foundation4DateVGSgWOhTm_1((uint64_t)v8, (unint64_t *)&lazy cache variable for type metadata for Date?, MEMORY[0x1E4F27928]);
  }
  (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v8, v5, v13);
  outlined destroy of ClosedRange<Date>((uint64_t)v5);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v8, 0, 1, v13);
  if (v15(v8, 1, v13) == 1) {
    goto LABEL_8;
  }
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v14 + 32))(a1, v8, v13);
}

uint64_t NavigationLink<>.init<A>(destination:title:isActive:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, int a5@<W4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v28 = a8;
  uint64_t v29 = a3;
  int v31 = a5;
  uint64_t v30 = a4;
  uint64_t v14 = *(void *)(a7 - 8);
  MEMORY[0x1F4188790](a1);
  int v16 = (char *)&v28 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = *(void *)(v17 - 8);
  double v20 = MEMORY[0x1F4188790](v19);
  int v22 = (char *)&v28 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v18 + 16))(v22, a1, v23, v20);
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v16, a2, a7);
  v32[0] = Text.init<A>(_:)();
  v32[1] = v24;
  char v33 = v25 & 1;
  uint64_t v34 = v26;
  NavigationLink.init(destination:label:isActive:)((uint64_t)v22, (uint64_t)v32, v29, v30, v31, MEMORY[0x1E4F41420], a6, a9);
  (*(void (**)(uint64_t, uint64_t))(v14 + 8))(a2, a7);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v18 + 8))(a1, a6);
}

uint64_t type metadata accessor for ListScrollable.DataSourceProvider()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t ListScrollable.dataSource.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v6 = type metadata accessor for ListScrollable.DataSourceProvider();
  double v7 = MEMORY[0x1F4188790](v6);
  uint64_t v9 = (char *)&v15 - v8;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v10 + 16))((char *)&v15 - v8, v2 + *(int *)(a1 + 36), v6, v7);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v11 = type metadata accessor for Optional();
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(void *)(v11 - 8) + 32))(a2, v9, v11);
  }
  else
  {
    Weakuint64_t Value = AGGraphGetWeakValue();
    if (WeakValue)
    {
      uint64_t v14 = *(void *)(v5 - 8);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 16))(a2, WeakValue, v5);
      return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v14 + 56))(a2, 0, 1, v5);
    }
    else
    {
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56))(a2, 1, 1, v5);
    }
  }
}

uint64_t protocol witness for Scrollable.scroll<A>(to:) in conformance LazyScrollable<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F40FF9E8](a1, a4, a2, WitnessTable, a3);
}

uint64_t closure #1 in LazyScrollable.makeTarget<A>(for:)@<X0>(const void *a1@<X1>, uint64_t *a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X8>)
{
  uint64_t v10 = *a2;
  memcpy(__dst, a1, 0x129uLL);
  LazyLayoutViewCache.subviews(context:)(*MEMORY[0x1E4F4E7A0], (uint64_t)v16);
  uint64_t v11 = (*(uint64_t (**)(uint64_t, unsigned char *, unsigned char *, uint64_t, uint64_t, void))(*(void *)(v10 + 328) + 104))(a3, v16, __dst, a4, a5, *(void *)(v10 + 320));
  char v13 = v12;
  uint64_t result = outlined destroy of _LazyLayout_Subviews((uint64_t)v16);
  *(void *)a6 = v11;
  *(unsigned char *)(a6 + 8) = v13 & 1;
  return result;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance FocusStoreList(uint64_t *a1, uint64_t *a2)
{
  return specialized static FocusStoreList.== infix(_:_:)(*a1, *a2);
}

uint64_t lazy protocol witness table accessor for type AppPreviewHost and conformance AppPreviewHost(unint64_t *a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a3(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t associated type witness table accessor for View.Body : View in ResolvedGauge()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t key path setter for FocusedValues.inspectorPresented : FocusedValues(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = a1[1];
  outlined copy of Binding<NavigationSplitViewColumn>?(*a1, v2);
  return FocusedValues.inspectorPresented.setter(v1, v2);
}

unint64_t lazy protocol witness table accessor for type EventListener<PhysicalButtonEvent> and conformance EventListener<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type EventListener<PhysicalButtonEvent> and conformance EventListener<A>;
  if (!lazy protocol witness table cache variable for type EventListener<PhysicalButtonEvent> and conformance EventListener<A>)
  {
    type metadata accessor for MapGesture<PhysicalButtonEvent, PhysicalButtonEvent.ButtonType>(255, &lazy cache variable for type metadata for EventListener<PhysicalButtonEvent>, MEMORY[0x1E4F40478], MEMORY[0x1E4F3F758]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EventListener<PhysicalButtonEvent> and conformance EventListener<A>);
  }
  return result;
}

void *type metadata accessor for BadgeModifier()
{
  return &unk_1ED4142C0;
}

uint64_t VisualEffect.saturation(_:)()
{
  return VisualEffect.rendererEffect<A>(_:)();
}

uint64_t TransformBox.writeValue(_:to:key:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = *v4;
  uint64_t v10 = *(void *)(*v4 + 112);
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](a1);
  char v13 = (char *)&v15 - v12;
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))((char *)&v15 - v12, (uint64_t)v4 + *(void *)(v9 + 128), v10);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v9 + 120) + 24))(a1, a2, a3, a4, v10);
  return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v13, v10);
}

uint64_t *initializeBufferWithCopyOfBuffer for TimelineView<>.UpdateFilter(uint64_t *a1, uint64_t *a2)
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  int v6 = *(_DWORD *)(v5 + 80);
  uint64_t v7 = v6;
  if (*(_DWORD *)(v5 + 84)) {
    size_t v8 = *(void *)(v5 + 64);
  }
  else {
    size_t v8 = *(void *)(v5 + 64) + 1;
  }
  size_t v9 = v8 + 7;
  int v10 = v6 & 0x100000;
  if (v7 > 7
    || v10 != 0
    || ((((v8 + 7 + ((v7 + 52) & ~v7)) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 9 > 0x18)
  {
    uint64_t v13 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v13 + ((v7 & 0xF8 ^ 0x1F8) & (v7 + 16)));
    swift_retain();
  }
  else
  {
    uint64_t v14 = AssociatedTypeWitness;
    *(_DWORD *)a1 = *(_DWORD *)a2;
    uint64_t v15 = (_DWORD *)(((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFFFCLL);
    int v16 = (_DWORD *)(((unint64_t)a2 + 7) & 0xFFFFFFFFFFFFFFFCLL);
    _DWORD *v15 = *v16;
    uint64_t v17 = (_DWORD *)(((unint64_t)v15 + 7) & 0xFFFFFFFFFFFFFFFCLL);
    uint64_t v18 = (_DWORD *)(((unint64_t)v16 + 7) & 0xFFFFFFFFFFFFFFFCLL);
    _DWORD *v17 = *v18;
    uint64_t v19 = (_DWORD *)(((unint64_t)v17 + 7) & 0xFFFFFFFFFFFFFFFCLL);
    double v20 = (_DWORD *)(((unint64_t)v18 + 7) & 0xFFFFFFFFFFFFFFFCLL);
    *uint64_t v19 = *v20;
    uint64_t v21 = (void *)(((unint64_t)v19 + 7) & 0xFFFFFFFFFFFFFFFCLL);
    int v22 = (void *)(((unint64_t)v20 + 7) & 0xFFFFFFFFFFFFFFFCLL);
    *uint64_t v21 = *v22;
    uint64_t v23 = (void *)(((unint64_t)v21 + 15) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v24 = (void **)(((unint64_t)v22 + 15) & 0xFFFFFFFFFFFFFFF8);
    char v25 = *v24;
    *uint64_t v23 = *v24;
    uint64_t v26 = (_DWORD *)(((unint64_t)v23 + 11) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v27 = (_DWORD *)(((unint64_t)v24 + 11) & 0xFFFFFFFFFFFFFFF8);
    unint64_t v28 = (unint64_t)v27 + 19;
    _DWORD *v26 = *v27;
    unint64_t v29 = (unint64_t)v26 + 19;
    v26[1] = v27[1];
    unint64_t v30 = ((unint64_t)v26 + 11) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v31 = ((unint64_t)v27 + 11) & 0xFFFFFFFFFFFFFFF8;
    *(_DWORD *)unint64_t v30 = *(_DWORD *)v31;
    *(unsigned char *)(v30 + 4) = *(unsigned char *)(v31 + 4);
    *(_DWORD *)(v29 & 0xFFFFFFFFFFFFFFF8) = *(_DWORD *)(v28 & 0xFFFFFFFFFFFFFFF8);
    uint64_t v32 = (void *)((v7 + (v29 & 0xFFFFFFFFFFFFFFF8) + 4) & ~v7);
    char v33 = (const void *)((v7 + (v28 & 0xFFFFFFFFFFFFFFF8) + 4) & ~v7);
    uint64_t v34 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v5 + 48);
    id v35 = v25;
    if (v34(v33, 1, v14))
    {
      memcpy(v32, v33, v8);
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v5 + 16))(v32, v33, v14);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v5 + 56))(v32, 0, 1, v14);
    }
    uint64_t v36 = (void *)(((unint64_t)v32 + v9) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v37 = (void *)(((unint64_t)v33 + v9) & 0xFFFFFFFFFFFFFFF8);
    void *v36 = *v37;
    unint64_t v38 = ((unint64_t)v36 + 15) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v39 = ((unint64_t)v37 + 15) & 0xFFFFFFFFFFFFFFF8;
    *(void *)unint64_t v38 = *(void *)v39;
    *(unsigned char *)(v38 + 8) = *(unsigned char *)(v39 + 8);
  }
  return a1;
}

uint64_t _ViewInputs.requestedDividerRepresentation.getter()
{
  lazy protocol witness table accessor for type _GraphInputs.DividerRepresentationKey and conformance _GraphInputs.DividerRepresentationKey();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  PropertyList.subscript.getter();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return v1;
}

uint64_t type metadata completion function for PageTabView()
{
  type metadata accessor for Binding();
  uint64_t result = type metadata accessor for Optional();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t outlined copy of Environment<OpenURLAction>.Content(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, char a6)
{
  if (a6) {
    return outlined copy of OpenURLAction.Handler(a1, a2, a3, a4, a5 & 1);
  }
  else {
    return swift_retain();
  }
}

uint64_t DragPayload.resolve()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + 152;
  swift_beginAccess();
  uint64_t result = outlined init with copy of DragContext?(v1 + 152, (uint64_t)&v15, &lazy cache variable for type metadata for DragContext?, (uint64_t)&type metadata for DragContext);
  if (*((void *)&v20 + 1))
  {
    long long v5 = v19[1];
    *(_OWORD *)(a1 + 64) = v19[0];
    *(_OWORD *)(a1 + 80) = v5;
    *(_OWORD *)(a1 + 96) = v20;
    long long v6 = v16;
    *(_OWORD *)a1 = v15;
    *(_OWORD *)(a1 + 16) = v6;
    long long v7 = v18;
    *(_OWORD *)(a1 + 32) = v17;
    *(_OWORD *)(a1 + 48) = v7;
  }
  else
  {
    outlined destroy of _DraggingModifier?((uint64_t)&v15, &lazy cache variable for type metadata for DragContext?, (uint64_t)&type metadata for DragContext);
    swift_beginAccess();
    uint64_t result = outlined init with copy of DragContext?(v1 + 32, (uint64_t)&v15, &lazy cache variable for type metadata for _DraggingModifier?, (uint64_t)&type metadata for _DraggingModifier);
    if (*((void *)&v20 + 1))
    {
      MEMORY[0x1F4188790](result);
      type metadata accessor for _DraggingModifier?(0, (unint64_t *)&lazy cache variable for type metadata for [DraggingItem], (uint64_t)&type metadata for DraggingItem, MEMORY[0x1E4FBB320]);
      static Update.dispatchImmediately<A>(_:)();
      char v13 = v15;
      uint64_t v8 = *((void *)&v15 + 1);
      long long v9 = v16;
      long long v10 = v17;
      long long v12 = v18;
      uint64_t v11 = *(void *)&v19[0];
      outlined init with copy of DragContext?((uint64_t)v19 + 8, a1 + 72, (unint64_t *)&lazy cache variable for type metadata for Any?, MEMORY[0x1E4FBC840] + 8);
      *(unsigned char *)a1 = v13;
      *(void *)(a1 + 8) = v8;
      *(_OWORD *)(a1 + 16) = v9;
      *(_OWORD *)(a1 + 32) = v10;
      *(_OWORD *)(a1 + 48) = v12;
      *(void *)(a1 + 64) = v11;
      *(void *)(a1 + 104) = v14;
      outlined copy of AppIntentExecutor?(v8);
      outlined copy of AppIntentExecutor?(*((uint64_t *)&v9 + 1));
      outlined copy of AppIntentExecutor?(*((uint64_t *)&v10 + 1));
      outlined copy of AppIntentExecutor?(*((uint64_t *)&v12 + 1));
      outlined destroy of _DraggingModifier((uint64_t)&v15);
      outlined init with copy of DragContext(a1, (uint64_t)&v15);
      swift_beginAccess();
      outlined assign with take of _DraggingModifier?((uint64_t)&v15, v3, &lazy cache variable for type metadata for DragContext?, (uint64_t)&type metadata for DragContext);
      return swift_endAccess();
    }
    else
    {
      __break(1u);
    }
  }
  return result;
}

uint64_t type metadata accessor for Coordinator()
{
  return self;
}

{
  return self;
}

{
  return self;
}

{
  return self;
}

{
  return self;
}

uint64_t TabContent.badge(_:)@<X0>(uint64_t a1@<X4>, uint64_t a2@<X8>)
{
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v4 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v7 = v4;
  uint64_t v8 = v5;
  uint64_t v10 = v9 & 1;
  unint64_t v11 = v10 | 0x8000000000000000;
  if (v6) {
    uint64_t v12 = v4;
  }
  else {
    uint64_t v12 = 0;
  }
  if (v6) {
    uint64_t v13 = v5;
  }
  else {
    uint64_t v13 = 0;
  }
  v15[0] = v12;
  v15[1] = v13;
  if (!v6) {
    unint64_t v11 = 0x1FFFFFFFELL;
  }
  uint64_t v15[2] = v11;
  v15[3] = v6;
  TabContent.modifier<A>(_:)((uint64_t)v15, a1, (uint64_t)&unk_1ED4142C0, a2);
  outlined consume of Text.Storage(v7, v8, v10);
  return swift_bridgeObjectRelease();
}

uint64_t specialized SwiftUIAccessibilityTextResolver.resolveDefaultAttributes(_:)(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (!*(void *)(*a1 + 16))
  {
    long long v55 = 0u;
    long long v56 = 0u;
    goto LABEL_8;
  }
  id v3 = (id)*MEMORY[0x1E4FB06F8];
  unint64_t v4 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v3);
  if ((v5 & 1) == 0)
  {
    long long v55 = 0u;
    long long v56 = 0u;

    goto LABEL_8;
  }
  outlined init with copy of Any(*(void *)(v2 + 56) + 32 * v4, (uint64_t)&v55);

  if (!*((void *)&v56 + 1))
  {
LABEL_8:
    outlined destroy of Any?((uint64_t)&v55);
    goto LABEL_9;
  }
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIFont);
  if (swift_dynamicCast())
  {
    uint64_t v6 = (void *)static NSAttributedStringKey.coreAXFontName.getter();
    id v7 = objc_msgSend(v54, sel_fontName);
    uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v10 = v9;

    uint64_t v11 = MEMORY[0x1E4FBB1A0];
    *((void *)&v56 + 1) = MEMORY[0x1E4FBB1A0];
    *(void *)&long long v55 = v8;
    *((void *)&v55 + 1) = v10;
    specialized Dictionary.subscript.setter((uint64_t)&v55, v6);
    uint64_t v12 = (void *)static NSAttributedStringKey.coreAXFontSize.getter();
    objc_msgSend(v54, sel_pointSize);
    *((void *)&v56 + 1) = MEMORY[0x1E4FBC958];
    *(void *)&long long v55 = v13;
    specialized Dictionary.subscript.setter((uint64_t)&v55, v12);
    uint64_t v14 = (void *)static NSAttributedStringKey.coreAXFontFamily.getter();
    id v15 = objc_msgSend(v54, sel_familyName);
    uint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v18 = v17;

    *((void *)&v56 + 1) = v11;
    *(void *)&long long v55 = v16;
    *((void *)&v55 + 1) = v18;
    specialized Dictionary.subscript.setter((uint64_t)&v55, v14);
  }
LABEL_9:
  uint64_t v19 = *a1;
  if (!*(void *)(*a1 + 16))
  {
    long long v55 = 0u;
    long long v56 = 0u;
LABEL_17:
    outlined destroy of Any?((uint64_t)&v55);
    goto LABEL_18;
  }
  id v20 = (id)*MEMORY[0x1E4FB0700];
  unint64_t v21 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v20);
  if (v22)
  {
    outlined init with copy of Any(*(void *)(v19 + 56) + 32 * v21, (uint64_t)&v55);
  }
  else
  {
    long long v55 = 0u;
    long long v56 = 0u;
  }

  if (!*((void *)&v56 + 1)) {
    goto LABEL_17;
  }
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIColor);
  if (swift_dynamicCast())
  {
    uint64_t v23 = (void *)static NSAttributedStringKey.coreAXForegroundColor.getter();
    id v24 = objc_msgSend(v54, sel_CGColor);
    type metadata accessor for CGColorRef(0);
    *((void *)&v56 + 1) = v25;
    *(void *)&long long v55 = v24;
    specialized Dictionary.subscript.setter((uint64_t)&v55, v23);
  }
LABEL_18:
  uint64_t v26 = *a1;
  if (*(void *)(*a1 + 16))
  {
    id v27 = (id)*MEMORY[0x1E4FB0768];
    unint64_t v28 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v27);
    if (v29)
    {
      outlined init with copy of Any(*(void *)(v26 + 56) + 32 * v28, (uint64_t)&v55);
    }
    else
    {
      long long v55 = 0u;
      long long v56 = 0u;
    }

    if (*((void *)&v56 + 1))
    {
      outlined destroy of Any?((uint64_t)&v55);
      unint64_t v30 = (void *)static NSAttributedStringKey.coreAXStrikethrough.getter();
      *((void *)&v56 + 1) = MEMORY[0x1E4FBB390];
      LOBYTE(v55) = 1;
      specialized Dictionary.subscript.setter((uint64_t)&v55, v30);
      goto LABEL_26;
    }
  }
  else
  {
    long long v55 = 0u;
    long long v56 = 0u;
  }
  outlined destroy of Any?((uint64_t)&v55);
LABEL_26:
  uint64_t v31 = *a1;
  if (*(void *)(*a1 + 16))
  {
    id v32 = (id)*MEMORY[0x1E4FB0808];
    unint64_t v33 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v32);
    if (v34)
    {
      outlined init with copy of Any(*(void *)(v31 + 56) + 32 * v33, (uint64_t)&v55);
    }
    else
    {
      long long v55 = 0u;
      long long v56 = 0u;
    }

    if (*((void *)&v56 + 1))
    {
      outlined destroy of Any?((uint64_t)&v55);
      id v35 = (void *)static NSAttributedStringKey.coreAXUnderline.getter();
      *((void *)&v56 + 1) = MEMORY[0x1E4FBB390];
      LOBYTE(v55) = 1;
      specialized Dictionary.subscript.setter((uint64_t)&v55, v35);
      goto LABEL_34;
    }
  }
  else
  {
    long long v55 = 0u;
    long long v56 = 0u;
  }
  outlined destroy of Any?((uint64_t)&v55);
LABEL_34:
  uint64_t v36 = *a1;
  if (!*(void *)(*a1 + 16))
  {
    long long v55 = 0u;
    long long v56 = 0u;
LABEL_42:
    outlined destroy of Any?((uint64_t)&v55);
    goto LABEL_43;
  }
  id v37 = (id)*MEMORY[0x1E4FB0738];
  unint64_t v38 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v37);
  if (v39)
  {
    outlined init with copy of Any(*(void *)(v36 + 56) + 32 * v38, (uint64_t)&v55);
  }
  else
  {
    long long v55 = 0u;
    long long v56 = 0u;
  }

  if (!*((void *)&v56 + 1)) {
    goto LABEL_42;
  }
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for NSParagraphStyle);
  if (swift_dynamicCast())
  {
    char v40 = (void *)static NSAttributedStringKey.coreAXAlignment.getter();
    id v41 = objc_msgSend(v54, sel_horizontalAlignment);
    *((void *)&v56 + 1) = MEMORY[0x1E4FBB550];
    *(void *)&long long v55 = v41;
    specialized Dictionary.subscript.setter((uint64_t)&v55, v40);
  }
LABEL_43:
  uint64_t v42 = *a1;
  if (!*(void *)(*a1 + 16))
  {
    long long v55 = 0u;
    long long v56 = 0u;
LABEL_51:
    outlined destroy of Any?((uint64_t)&v55);
    goto LABEL_52;
  }
  id v43 = (id)*MEMORY[0x1E4FB06B8];
  unint64_t v44 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v43);
  if (v45)
  {
    outlined init with copy of Any(*(void *)(v42 + 56) + 32 * v44, (uint64_t)&v55);
  }
  else
  {
    long long v55 = 0u;
    long long v56 = 0u;
  }

  if (!*((void *)&v56 + 1)) {
    goto LABEL_51;
  }
  uint64_t v46 = type metadata accessor for NSObject(0, &lazy cache variable for type metadata for NSTextAttachment);
  if (swift_dynamicCast())
  {
    uint64_t v47 = (void *)static NSAttributedStringKey.coreAXAttachment.getter();
    *((void *)&v56 + 1) = v46;
    *(void *)&long long v55 = v54;
    specialized Dictionary.subscript.setter((uint64_t)&v55, v47);
  }
LABEL_52:
  uint64_t v48 = *a1;
  if (*(void *)(*a1 + 16))
  {
    id v49 = (id)*MEMORY[0x1E4FB0720];
    unint64_t v50 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v49);
    if (v51)
    {
      outlined init with copy of Any(*(void *)(v48 + 56) + 32 * v50, (uint64_t)&v55);
    }
    else
    {
      long long v55 = 0u;
      long long v56 = 0u;
    }

    if (*((void *)&v56 + 1))
    {
      outlined destroy of Any?((uint64_t)&v55);
      uint64_t v52 = (void *)static NSAttributedStringKey.coreAXLink.getter();
      *((void *)&v56 + 1) = MEMORY[0x1E4FBB390];
      LOBYTE(v55) = 1;
      return specialized Dictionary.subscript.setter((uint64_t)&v55, v52);
    }
  }
  else
  {
    long long v55 = 0u;
    long long v56 = 0u;
  }
  return outlined destroy of Any?((uint64_t)&v55);
}

uint64_t specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t a4, uint64_t a5)
{
  return swift_bridgeObjectRelease();
}

void type metadata accessor for Attribute<_ScrollViewProxy>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

BOOL _AXSwiftUIIsAnyStringEmpty(void *a1)
{
  id v1 = a1;
  if (!v1) {
    goto LABEL_7;
  }
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    goto LABEL_7;
  }
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    objc_opt_class();
    if (objc_opt_isKindOfClass())
    {
      BOOL v3 = [v1 length] == 0;
      goto LABEL_8;
    }
LABEL_7:
    BOOL v3 = 1;
    goto LABEL_8;
  }
  uint64_t v2 = [v1 string];
  BOOL v3 = [v2 length] == 0;

LABEL_8:
  return v3;
}

id _AXSwiftUIGetObjectFromSelectorAsAny(void *a1, const char *a2)
{
  id v3 = a1;
  if (objc_opt_respondsToSelector())
  {
    unint64_t v4 = NSStringFromSelector(a2);
    unint64_t v5 = [v3 valueForKey:v4];
  }
  else
  {
    unint64_t v5 = 0;
  }

  return v5;
}

uint64_t _AXSwiftUIUnarchiveChartDescriptor(uint64_t a1)
{
  return [MEMORY[0x1E4F28DC0] unarchiveTopLevelObjectWithData:a1 error:0];
}

id AXSwiftUIInteractionLocationDescriptorDefaultName()
{
  uint64_t v4 = 0;
  unint64_t v5 = &v4;
  uint64_t v6 = 0x2020000000;
  uint64_t v0 = (void **)getAXInteractionLocationDescriptorDefaultNameSymbolLoc_ptr;
  uint64_t v7 = getAXInteractionLocationDescriptorDefaultNameSymbolLoc_ptr;
  if (!getAXInteractionLocationDescriptorDefaultNameSymbolLoc_ptr)
  {
    id v1 = (void *)AXRuntimeLibrary();
    v5[3] = (uint64_t)dlsym(v1, "AXInteractionLocationDescriptorDefaultName");
    getAXInteractionLocationDescriptorDefaultNameSymbolLoc_ptr = v5[3];
    uint64_t v0 = (void **)v5[3];
  }
  _Block_object_dispose(&v4, 8);
  if (!v0) {
    AXSwiftUIInteractionLocationDescriptorDefaultName_cold_1();
  }
  uint64_t v2 = *v0;

  return v2;
}

void sub_18769585C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id AXAttributedStringConvert(void *a1)
{
  id v1 = a1;
  uint64_t v8 = 0;
  uint64_t v9 = &v8;
  uint64_t v10 = 0x2020000000;
  uint64_t v2 = (uint64_t (*)(id))getAXGetCFAttributedStringFromAXAttributedStringSymbolLoc_ptr;
  uint64_t v11 = getAXGetCFAttributedStringFromAXAttributedStringSymbolLoc_ptr;
  if (!getAXGetCFAttributedStringFromAXAttributedStringSymbolLoc_ptr)
  {
    id v3 = (void *)AXRuntimeLibrary();
    v9[3] = (uint64_t)dlsym(v3, "AXGetCFAttributedStringFromAXAttributedString");
    getAXGetCFAttributedStringFromAXAttributedStringSymbolLoc_ptr = (_UNKNOWN *)v9[3];
    uint64_t v2 = (uint64_t (*)(id))v9[3];
  }
  _Block_object_dispose(&v8, 8);
  if (!v2) {
    AXSwiftUIInteractionLocationDescriptorDefaultName_cold_1();
  }
  uint64_t v4 = (void *)v2(v1);
  if (v4) {
    id v5 = v4;
  }
  else {
    id v5 = (id)[objc_alloc(MEMORY[0x1E4F28B18]) initWithString:v1];
  }
  uint64_t v6 = v5;

  return v6;
}

void sub_1876959A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id AXAttributedStringCreate(void *a1)
{
  id v1 = a1;
  uint64_t v6 = 0;
  uint64_t v7 = &v6;
  uint64_t v8 = 0x2020000000;
  uint64_t v2 = (void (*)(id))getAXCreateAXAttributedStringFromCFAttributedStringSymbolLoc_ptr;
  uint64_t v9 = getAXCreateAXAttributedStringFromCFAttributedStringSymbolLoc_ptr;
  if (!getAXCreateAXAttributedStringFromCFAttributedStringSymbolLoc_ptr)
  {
    id v3 = (void *)AXRuntimeLibrary();
    v7[3] = (uint64_t)dlsym(v3, "AXCreateAXAttributedStringFromCFAttributedString");
    getAXCreateAXAttributedStringFromCFAttributedStringSymbolLoc_ptr = (_UNKNOWN *)v7[3];
    uint64_t v2 = (void (*)(id))v7[3];
  }
  _Block_object_dispose(&v6, 8);
  if (!v2) {
    AXSwiftUIInteractionLocationDescriptorDefaultName_cold_1();
  }
  v2(v1);
  id v4 = (id)objc_claimAutoreleasedReturnValue();

  return v4;
}

void sub_187695B60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id AXSwiftUIMoveToElementNotificationKeyElement()
{
  uint64_t v4 = 0;
  id v5 = &v4;
  uint64_t v6 = 0x2020000000;
  uint64_t v0 = (void **)getkAXMoveToElementNotificationKeyElementSymbolLoc_ptr;
  uint64_t v7 = getkAXMoveToElementNotificationKeyElementSymbolLoc_ptr;
  if (!getkAXMoveToElementNotificationKeyElementSymbolLoc_ptr)
  {
    id v1 = (void *)AXRuntimeLibrary();
    v5[3] = (uint64_t)dlsym(v1, "kAXMoveToElementNotificationKeyElement");
    getkAXMoveToElementNotificationKeyElementSymbolLoc_ptr = v5[3];
    uint64_t v0 = (void **)v5[3];
  }
  _Block_object_dispose(&v4, 8);
  if (!v0) {
    AXSwiftUIInteractionLocationDescriptorDefaultName_cold_1();
  }
  uint64_t v2 = *v0;

  return v2;
}

void sub_187695C68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id AXSwiftUIPerformElementUpdateImmediatelyToken()
{
  uint64_t v4 = 0;
  id v5 = &v4;
  uint64_t v6 = 0x2020000000;
  uint64_t v0 = (void **)getkAXPerformElementUpdateImmediatelyTokenSymbolLoc_ptr;
  uint64_t v7 = getkAXPerformElementUpdateImmediatelyTokenSymbolLoc_ptr;
  if (!getkAXPerformElementUpdateImmediatelyTokenSymbolLoc_ptr)
  {
    id v1 = (void *)AXRuntimeLibrary();
    v5[3] = (uint64_t)dlsym(v1, "kAXPerformElementUpdateImmediatelyToken");
    getkAXPerformElementUpdateImmediatelyTokenSymbolLoc_ptr = v5[3];
    uint64_t v0 = (void **)v5[3];
  }
  _Block_object_dispose(&v4, 8);
  if (!v0) {
    AXSwiftUIInteractionLocationDescriptorDefaultName_cold_1();
  }
  uint64_t v2 = *v0;

  return v2;
}

void sub_187695D70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *__getAXInteractionLocationDescriptorDefaultNameSymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v2 = (void *)AXRuntimeLibrary();
  uint64_t result = dlsym(v2, "AXInteractionLocationDescriptorDefaultName");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getAXInteractionLocationDescriptorDefaultNameSymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t AXRuntimeLibrary()
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  v3[0] = 0;
  if (!AXRuntimeLibraryCore_frameworkLibrary)
  {
    v3[1] = MEMORY[0x1E4F143A8];
    v3[2] = 3221225472;
    v3[3] = __AXRuntimeLibraryCore_block_invoke;
    v3[4] = &__block_descriptor_40_e5_v8__0l;
    v3[5] = v3;
    long long v4 = xmmword_1E53B8580;
    uint64_t v5 = 0;
    AXRuntimeLibraryCore_frameworkLibrary = _sl_dlopen();
  }
  uint64_t v0 = AXRuntimeLibraryCore_frameworkLibrary;
  id v1 = (void *)v3[0];
  if (!AXRuntimeLibraryCore_frameworkLibrary)
  {
    id v1 = (void *)abort_report_np();
    goto LABEL_7;
  }
  if (v3[0]) {
LABEL_7:
  }
    free(v1);
  return v0;
}

uint64_t __AXRuntimeLibraryCore_block_invoke()
{
  uint64_t result = _sl_dlopen();
  AXRuntimeLibraryCore_frameworkLibrary = result;
  return result;
}

void *__getAXGetCFAttributedStringFromAXAttributedStringSymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v2 = (void *)AXRuntimeLibrary();
  uint64_t result = dlsym(v2, "AXGetCFAttributedStringFromAXAttributedString");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getAXGetCFAttributedStringFromAXAttributedStringSymbolLoc_ptr = *(_UNKNOWN **)(*(void *)(*(void *)(a1 + 32) + 8)
                                                                               + 24);
  return result;
}

void *__getAXCreateAXAttributedStringFromCFAttributedStringSymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v2 = (void *)AXRuntimeLibrary();
  uint64_t result = dlsym(v2, "AXCreateAXAttributedStringFromCFAttributedString");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getAXCreateAXAttributedStringFromCFAttributedStringSymbolLoc_ptr = *(_UNKNOWN **)(*(void *)(*(void *)(a1 + 32)
                                                                                              + 8)
                                                                                  + 24);
  return result;
}

void *__getkAXMoveToElementNotificationKeyElementSymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v2 = (void *)AXRuntimeLibrary();
  uint64_t result = dlsym(v2, "kAXMoveToElementNotificationKeyElement");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getkAXMoveToElementNotificationKeyElementSymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getkAXPerformElementUpdateImmediatelyTokenSymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v2 = (void *)AXRuntimeLibrary();
  uint64_t result = dlsym(v2, "kAXPerformElementUpdateImmediatelyToken");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getkAXPerformElementUpdateImmediatelyTokenSymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void sub_187696268(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getBGTaskSchedulerClass_block_invoke(uint64_t a1)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  v3[0] = 0;
  if (!BackgroundTasksLibraryCore_frameworkLibrary)
  {
    v3[1] = (void *)MEMORY[0x1E4F143A8];
    v3[2] = (void *)3221225472;
    v3[3] = __BackgroundTasksLibraryCore_block_invoke;
    v3[4] = &__block_descriptor_40_e5_v8__0l;
    v3[5] = v3;
    long long v4 = xmmword_1E53B85B8;
    uint64_t v5 = 0;
    BackgroundTasksLibraryCore_frameworkLibrary = _sl_dlopen();
    if (!BackgroundTasksLibraryCore_frameworkLibrary)
    {
      abort_report_np();
LABEL_8:
      __getBGTaskSchedulerClass_block_invoke_cold_1();
    }
    if (v3[0]) {
      free(v3[0]);
    }
  }
  Class result = objc_getClass("BGTaskScheduler");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
    goto LABEL_8;
  }
  getBGTaskSchedulerClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t __BackgroundTasksLibraryCore_block_invoke()
{
  uint64_t result = _sl_dlopen();
  BackgroundTasksLibraryCore_frameworkLibrary = result;
  return result;
}

void sub_18769687C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void _SwizzleMethods(objc_class *a1, const char *a2, const char *a3)
{
  InstanceMethod = class_getInstanceMethod(a1, a2);
  uint64_t v7 = class_getInstanceMethod(a1, a3);
  Implementation = method_getImplementation(v7);
  TypeEncoding = method_getTypeEncoding(v7);
  if (class_addMethod(a1, a2, Implementation, TypeEncoding))
  {
    uint64_t v10 = method_getImplementation(InstanceMethod);
    uint64_t v11 = method_getTypeEncoding(InstanceMethod);
    class_replaceMethod(a1, a3, v10, v11);
  }
  else
  {
    method_exchangeImplementations(InstanceMethod, v7);
  }
}

void _PerformTestingSwizzles()
{
  if (_PerformTestingSwizzles_onceToken != -1) {
    dispatch_once(&_PerformTestingSwizzles_onceToken, &__block_literal_global);
  }
}

uint64_t _CATransactionCompletionItem()
{
  return [MEMORY[0x1E4F39D08] completionItem];
}

Class __getLPLinkMetadataClass_block_invoke(uint64_t a1)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  v3[0] = 0;
  if (!LinkPresentationLibraryCore_frameworkLibrary)
  {
    v3[1] = (void *)MEMORY[0x1E4F143A8];
    v3[2] = (void *)3221225472;
    v3[3] = __LinkPresentationLibraryCore_block_invoke;
    v3[4] = &__block_descriptor_40_e5_v8__0l;
    v3[5] = v3;
    long long v4 = xmmword_1E53B85F0;
    uint64_t v5 = 0;
    LinkPresentationLibraryCore_frameworkLibrary = _sl_dlopen();
    if (!LinkPresentationLibraryCore_frameworkLibrary)
    {
      abort_report_np();
LABEL_8:
      __getLPLinkMetadataClass_block_invoke_cold_1();
    }
    if (v3[0]) {
      free(v3[0]);
    }
  }
  Class result = objc_getClass("LPLinkMetadata");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
    goto LABEL_8;
  }
  getLPLinkMetadataClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t __LinkPresentationLibraryCore_block_invoke()
{
  uint64_t result = _sl_dlopen();
  LinkPresentationLibraryCore_frameworkLibrary = result;
  return result;
}

BOOL _DirectionForCharIsRTL()
{
  return MEMORY[0x18C119F00]() == 1;
}

id _NSTextLayoutFragmentLayoutFragmentWithKeyframe(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  if (objc_opt_respondsToSelector())
  {
    uint64_t v5 = [v3 layoutFragmentWithKeyframe:v4];
    [v5 layout];
    if (v5) {
      uint64_t v6 = v5;
    }
    else {
      uint64_t v6 = v3;
    }
    id v7 = v6;
  }
  else
  {
    id v7 = v3;
  }

  return v7;
}

ProtocolDescriptor *_sceneProtocolDescriptor()
{
  return &protocol descriptor for Scene;
}

ProtocolDescriptor *_widgetProtocolDescriptor()
{
  return &protocol descriptor for Widget;
}

ProtocolDescriptor *_controlWidgetProtocolDescriptor()
{
  return &protocol descriptor for ControlWidget;
}

ProtocolDescriptor *_previewProviderProtocolDescriptor()
{
  return &protocol descriptor for PreviewProvider;
}

ProtocolDescriptor *_printContentDescriptor()
{
  return &protocol descriptor for PrintContent;
}

ProtocolDescriptor *_accessibilityRotorContentProtocolDescriptor()
{
  return &protocol descriptor for AccessibilityRotorContent;
}

ProtocolDescriptor *_navigationDestinationProtocolDescriptor()
{
  return &protocol descriptor for NavigationDestination;
}

ProtocolDescriptor *_tableColumnProtocolDescriptor()
{
  return &protocol descriptor for TableColumnContent;
}

ProtocolDescriptor *_tableRowProtocolDescriptor()
{
  return &protocol descriptor for TableRowContent;
}

uint64_t _HighFrameRateReasonMake(int a1)
{
  return a1 | 0x270000u;
}

uint64_t key path setter for EnvironmentValues._defaultMinListRowHeight : EnvironmentValues(uint64_t a1)
{
  return EnvironmentValues._defaultMinListRowHeight.setter(*(void *)a1, *(unsigned __int8 *)(a1 + 8));
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance SidebarListBody<A, B>.CollectionViewBody()
{
  return static View._viewListCount(inputs:)();
}

uint64_t static SidebarListBody.TableViewRoot._viewListOptions.getter()
{
  return 44;
}

uint64_t SidebarListBody.TableViewRoot.body(children:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v48 = a3;
  uint64_t v5 = *(void *)(a2 + 24);
  uint64_t v43 = a2;
  type metadata accessor for Binding();
  uint64_t v7 = type metadata accessor for Optional();
  uint64_t v46 = *(void *)(v7 - 8);
  uint64_t v47 = v7;
  MEMORY[0x1F4188790](v7);
  unint64_t v44 = (char *)v37 - v8;
  uint64_t v9 = *(void *)(a2 + 40);
  _OWORD v37[2] = swift_getAssociatedTypeWitness();
  uint64_t v41 = v5;
  uint64_t v42 = v9;
  v37[1] = swift_getAssociatedConformanceWitness();
  uint64_t v10 = type metadata accessor for TableViewListDataSource();
  uint64_t v40 = v10;
  uint64_t WitnessTable = swift_getWitnessTable();
  v51[0] = v10;
  v51[1] = v5;
  v51[2] = WitnessTable;
  void v51[3] = v9;
  uint64_t v11 = type metadata accessor for TableViewListCore();
  uint64_t v45 = *(void *)(v11 - 8);
  MEMORY[0x1F4188790](v11);
  uint64_t v13 = (char *)v37 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  unint64_t v38 = (char *)v37 - v15;
  outlined init with copy of _VariadicView_Children(a1, (uint64_t)v50);
  uint64_t v16 = *(void *)v3;
  uint64_t v17 = *(unsigned __int8 *)(v3 + 8);
  int v18 = *(unsigned __int8 *)(v3 + 9);
  outlined copy of Environment<CGFloat?>.Content(*(void *)v3, v17, *(unsigned char *)(v3 + 9));
  v37[0] = specialized Environment.wrappedValue.getter(v16, v17 | (v18 << 8));
  char v20 = v19 & 1;
  outlined consume of Environment<CGFloat?>.Content(v16, v17, v18);
  uint64_t v21 = *(void *)(v3 + 16);
  uint64_t v22 = *(unsigned __int8 *)(v3 + 24);
  int v23 = *(unsigned __int8 *)(v3 + 25);
  outlined copy of Environment<CGFloat?>.Content(v21, v22, *(unsigned char *)(v3 + 25));
  uint64_t v24 = specialized Environment.wrappedValue.getter(v21, v22 | (v23 << 8));
  LOBYTE(v9) = v25;
  outlined consume of Environment<CGFloat?>.Content(v21, v22, v23);
  double v26 = *(double *)&v24;
  if (v9) {
    double v26 = 44.0;
  }
  double v27 = TableViewListDataSource.init(_:style:minRowHeight:minHeaderHeight:)((uint64_t)v50, 0, v37[0], v20, (uint64_t)v51, v26);
  uint64_t v28 = (uint64_t)v44;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v46 + 16))(v44, v3 + *(int *)(v43 + 60), v47, v27);
  uint64_t v29 = *(void *)(v3 + 32);
  char v30 = *(unsigned char *)(v3 + 40);
  outlined copy of Environment<Bool>.Content(v29, v30);
  char v31 = specialized Environment.wrappedValue.getter(v29, v30);
  outlined consume of Environment<Bool>.Content(v29, v30);
  char v32 = v31 & 1;
  uint64_t v33 = v40;
  static TableViewListCore.Configuration.sidebar(isInExpandedSplitView:)(v32, v49);
  TableViewListCore.init(dataSource:selection:configuration:)((uint64_t)v51, v28, v49, v33, (uint64_t)v13);
  char v34 = v38;
  static ViewBuilder.buildExpression<A>(_:)(v13);
  id v35 = *(void (**)(char *, uint64_t))(v45 + 8);
  v35(v13, v11);
  static ViewBuilder.buildExpression<A>(_:)(v34);
  return ((uint64_t (*)(char *, uint64_t))v35)(v34, v11);
}

uint64_t protocol witness for static _VariadicView_ViewRoot._makeViewList(root:inputs:body:) in conformance SidebarListBody<A, B>.TableViewRoot(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F40FD028](a1, a2, a3, a4, a5, WitnessTable);
}

uint64_t protocol witness for static _VariadicView_ViewRoot._viewListCount(inputs:body:) in conformance SidebarListBody<A, B>.TableViewRoot()
{
  return 1;
}

uint64_t protocol witness for static _VariadicView_Root._viewListOptions.getter in conformance SidebarListBody<A, B>.TableViewRoot()
{
  return static SidebarListBody.TableViewRoot._viewListOptions.getter();
}

void protocol witness for Gesture.body.getter in conformance SequenceGesture<A, B>()
{
}

void protocol witness for View.body.getter in conformance SubscriptionView<A, B>()
{
}

void protocol witness for Gesture.body.getter in conformance GestureStateGesture<A, B>()
{
}

uint64_t protocol witness for static ViewModifier._viewListCount(inputs:body:) in conformance _GeometryActionModifier<A>()
{
  return 1;
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance _GeometryActionModifier2<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F40FF3F8](a1, a2, a3, a4, a5, WitnessTable);
}

uint64_t protocol witness for static ViewModifier._viewListCount(inputs:body:) in conformance _GeometryActionModifier2<A>()
{
  return 1;
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance _PositionLayout(int *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8 = *a2;
  int v9 = *((_DWORD *)a2 + 2);
  uint64_t v10 = a2[2];
  int v11 = *((_DWORD *)a2 + 20);
  int v23 = *a1;
  uint64_t v15 = v8;
  int v16 = v9;
  uint64_t v17 = v10;
  long long v12 = *(_OWORD *)(a2 + 5);
  long long v18 = *(_OWORD *)(a2 + 3);
  long long v19 = v12;
  long long v20 = *(_OWORD *)(a2 + 7);
  uint64_t v21 = a2[9];
  int v22 = v11;
  unint64_t v13 = lazy protocol witness table accessor for type _PositionLayout and conformance _PositionLayout();
  return (*(uint64_t (**)(int *, uint64_t *, uint64_t, uint64_t, uint64_t, unint64_t))(v13 + 80))(&v23, &v15, a3, a4, a5, v13);
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance ViewThatFits<A>()
{
  return protocol witness for static View._viewListCount(inputs:) in conformance ViewThatFits<A>();
}

{
  swift_getWitnessTable();
  return static UnaryView._viewListCount(inputs:)();
}

void protocol witness for View.body.getter in conformance ViewThatFits<A>()
{
}

uint64_t protocol witness for static ViewModifier._viewListCount(inputs:body:) in conformance _BackdropGroupEffect(long long *a1, uint64_t (*a2)(long long *))
{
  int v2 = *((_DWORD *)a1 + 4);
  uint64_t v3 = *((void *)a1 + 3);
  long long v5 = *a1;
  int v6 = v2;
  uint64_t v7 = v3;
  return a2(&v5);
}

uint64_t protocol witness for static ViewModifier._viewListCount(inputs:body:) in conformance _CoordinateSpaceModifier<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  return MEMORY[0x18C110D90](a1, a2, a3, a4, WitnessTable);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance EquatableView<A>()
{
  swift_getWitnessTable();

  return static UnaryView._makeViewList(view:inputs:)();
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance EquatableView<A>()
{
  return protocol witness for static View._viewListCount(inputs:) in conformance ViewThatFits<A>();
}

void protocol witness for View.body.getter in conformance EquatableView<A>()
{
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance _ScrollViewBoundsModifier<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F40FF3A0](a1, a2, a3, a4, a5, WitnessTable);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance _ScrollViewBoundsModifier2<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F40FF3A0](a1, a2, a3, a4, a5, WitnessTable);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance Grid<A>()
{
  swift_getWitnessTable();

  return static UnaryView._makeViewList(view:inputs:)();
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance Grid<A>()
{
  return protocol witness for static View._viewListCount(inputs:) in conformance ViewThatFits<A>();
}

void protocol witness for View.body.getter in conformance Grid<A>()
{
}

void protocol witness for View.body.getter in conformance GridRow<A>()
{
}

void protocol witness for static Layout.layoutProperties.getter in conformance GridLayout(uint64_t a1@<X8>)
{
  *(_WORD *)a1 = 2;
  *(unsigned char *)(a1 + 2) = 0;
}

void protocol witness for static Layout.layoutProperties.getter in conformance _GridLayout(uint64_t a1@<X8>)
{
  *(_WORD *)a1 = 2;
  *(unsigned char *)(a1 + 2) = 0;
}

uint64_t protocol witness for Layout.makeCache(subviews:) in conformance _GridLayout@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  int v4 = *a1;
  uint64_t v5 = *((void *)a1 + 1);
  char v6 = *((unsigned char *)a1 + 16);
  char v7 = *((unsigned char *)a1 + 17);
  uint64_t v8 = *(void *)(v2 + 16);
  char v9 = *(unsigned char *)(v2 + 24);
  uint64_t v10 = *(void *)(v2 + 32);
  char v11 = *(unsigned char *)(v2 + 40);
  *(void *)(a2 + 72) = 0x7FF8000000000000;
  *(unsigned char *)(a2 + 80) = 0;
  *(void *)(a2 + 88) = 0;
  *(unsigned char *)(a2 + 96) = 1;
  uint64_t v12 = MEMORY[0x1E4FBC860];
  *(void *)(a2 + 104) = MEMORY[0x1E4FBC860];
  *(void *)(a2 + 112) = v12;
  *(void *)(a2 + 120) = v12;
  *(void *)(a2 + 128) = v12;
  uint64_t v13 = MEMORY[0x1E4FBC868];
  *(void *)(a2 + 136) = v12;
  *(void *)(a2 + 144) = v13;
  *(_OWORD *)a2 = *(_OWORD *)v2;
  *(void *)(a2 + 16) = v8;
  *(unsigned char *)(a2 + 24) = v9;
  *(void *)(a2 + 32) = v10;
  *(unsigned char *)(a2 + 40) = v11;
  *(_DWORD *)(a2 + 48) = v4;
  *(void *)(a2 + 56) = v5;
  *(unsigned char *)(a2 + 64) = v6;
  *(unsigned char *)(a2 + 65) = v7;
  swift_bridgeObjectRetain();
  GridLayout.Cache.assignSubviews()();
  GridLayout.Cache.assignSpacing(in:)(0);
  return GridLayout.Cache.assignSpacing(in:)(1);
}

uint64_t protocol witness for Layout.updateCache(_:subviews:) in conformance _GridLayout(uint64_t a1, int *a2)
{
  int v4 = *a2;
  uint64_t v5 = *((void *)a2 + 1);
  char v6 = *((unsigned char *)a2 + 16);
  char v7 = *((unsigned char *)a2 + 17);
  uint64_t v8 = *(void *)(v2 + 16);
  char v9 = *(unsigned char *)(v2 + 24);
  uint64_t v10 = *(void *)(v2 + 32);
  char v11 = *(unsigned char *)(v2 + 40);
  *(_OWORD *)a1 = *(_OWORD *)v2;
  *(void *)(a1 + 16) = v8;
  *(unsigned char *)(a1 + 24) = v9;
  *(void *)(a1 + 32) = v10;
  *(unsigned char *)(a1 + 40) = v11;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 48) = v4;
  *(void *)(a1 + 56) = v5;
  *(unsigned char *)(a1 + 64) = v6;
  *(unsigned char *)(a1 + 65) = v7;
  *(void *)(a1 + 88) = 0x7FF8000000000000;
  *(unsigned char *)(a1 + 96) = 0;
  GridLayout.Cache.assignSubviews()();
  GridLayout.Cache.assignSpacing(in:)(0);
  return GridLayout.Cache.assignSpacing(in:)(1);
}

uint64_t protocol witness for Layout.spacing(subviews:cache:) in conformance _GridLayout@<X0>(uint64_t a1@<X8>)
{
  return GridLayout.Cache.spacing()(a1);
}

uint64_t protocol witness for Layout.sizeThatFits(proposal:subviews:cache:) in conformance _GridLayout(uint64_t a1)
{
  lazy protocol witness table accessor for type _GridLayout and conformance _GridLayout();

  return MEMORY[0x1F40FDE08](a1);
}

uint64_t protocol witness for Layout.placeSubviews(in:proposal:subviews:cache:) in conformance _GridLayout(uint64_t a1, double a2, double a3, double a4, double a5)
{
  lazy protocol witness table accessor for type _GridLayout and conformance _GridLayout();
  v10.n128_f64[0] = a2;
  v11.n128_f64[0] = a3;
  v12.n128_f64[0] = a4;
  v13.n128_f64[0] = a5;

  return MEMORY[0x1F40FDE10](a1, v10, v11, v12, v13);
}

uint64_t protocol witness for Layout.explicitAlignment(of:in:proposal:subviews:cache:) in conformance _GridLayout(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9, double a10, double a11, double a12, uint64_t a13)
{
  return protocol witness for Layout.explicitAlignment(of:in:proposal:subviews:cache:) in conformance _GridLayout(a1, a2, a9, a10, a11, a12, a3, a4, a5, a6, a7, a8, a13, MEMORY[0x1E4F3F728]);
}

{
  return protocol witness for Layout.explicitAlignment(of:in:proposal:subviews:cache:) in conformance _GridLayout(a1, a2, a9, a10, a11, a12, a3, a4, a5, a6, a7, a8, a13, MEMORY[0x1E4F3F730]);
}

uint64_t protocol witness for Layout.explicitAlignment(of:in:proposal:subviews:cache:) in conformance _GridLayout(uint64_t a1, uint64_t a2, double a3, double a4, double a5, double a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t (*a14)(uint64_t, uint64_t, double, double, double, double))
{
  return a14(a1, a2, a3, a4, a5, a6);
}

uint64_t default argument 1 of View.hidden(_:allowingDisplayList:)()
{
  return 0;
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance _IdentifiedModifier<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F40FF3A0](a1, a2, a3, a4, a5, WitnessTable);
}

uint64_t default argument 1 of View.hiddenAllowingHostPreferences(_:allowingDisplayList:)()
{
  return 0;
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance _ShadowView<A>()
{
  swift_getWitnessTable();

  return static UnaryView._makeViewList(view:inputs:)();
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance _ShadowView<A>()
{
  return protocol witness for static View._viewListCount(inputs:) in conformance ViewThatFits<A>();
}

void protocol witness for View.body.getter in conformance _ShadowView<A>()
{
}

NSNumber protocol witness for _ObjectiveCBridgeable._bridgeToObjectiveC() in conformance AGAttribute()
{
  return UInt32._bridgeToObjectiveC()();
}

uint64_t protocol witness for static _ObjectiveCBridgeable._forceBridgeFromObjectiveC(_:result:) in conformance AGAttribute(uint64_t a1, uint64_t a2)
{
  int v6 = 0;
  char v7 = 1;
  uint64_t result = MEMORY[0x18C118410](a1, &v6);
  int v4 = v6;
  char v5 = v7;
  if (v7) {
    int v4 = 0;
  }
  *(_DWORD *)a2 = v4;
  *(unsigned char *)(a2 + 4) = v5;
  return result;
}

uint64_t protocol witness for static _ObjectiveCBridgeable._conditionallyBridgeFromObjectiveC(_:result:) in conformance AGAttribute(uint64_t a1, uint64_t a2)
{
  char v3 = static UInt32._conditionallyBridgeFromObjectiveC(_:result:)();
  *(_DWORD *)a2 = 0;
  *(unsigned char *)(a2 + 4) = 1;
  return v3 & 1;
}

uint64_t protocol witness for static _ObjectiveCBridgeable._unconditionallyBridgeFromObjectiveC(_:) in conformance AGAttribute@<X0>(_DWORD *a1@<X8>)
{
  uint64_t result = static UInt32._unconditionallyBridgeFromObjectiveC(_:)();
  *a1 = result;
  return result;
}

void *protocol witness for SetAlgebra.union(_:) in conformance UIRectEdge@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *v2 | *result;
  return result;
}

void *protocol witness for SetAlgebra.symmetricDifference(_:) in conformance UIRectEdge@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *v2 ^ *result;
  return result;
}

BOOL protocol witness for SetAlgebra.insert(_:) in conformance UIRectEdge(void *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = *v2 & *a2;
  if (v4 != *a2) {
    *v2 |= v3;
  }
  *a1 = v3;
  return v4 != v3;
}

void *protocol witness for SetAlgebra.remove(_:) in conformance UIRectEdge@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *v2 & *result;
  if (v3) {
    *v2 &= ~*result;
  }
  *(void *)a2 = v3;
  *(unsigned char *)(a2 + 8) = v3 == 0;
  return result;
}

uint64_t *protocol witness for SetAlgebra.update(with:) in conformance UIRectEdge@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *result;
  uint64_t v4 = *v2;
  *v2 |= *result;
  uint64_t v5 = v4 & v3;
  *(void *)a2 = v5;
  *(unsigned char *)(a2 + 8) = v5 == 0;
  return result;
}

void *protocol witness for SetAlgebra.formIntersection(_:) in conformance UIRectEdge(void *result)
{
  *v1 &= *result;
  return result;
}

void *protocol witness for SetAlgebra.formSymmetricDifference(_:) in conformance UIRectEdge(void *result)
{
  *v1 ^= *result;
  return result;
}

void *protocol witness for SetAlgebra.subtracting(_:) in conformance UIRectEdge@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *v2 & ~*result;
  return result;
}

BOOL protocol witness for SetAlgebra.isSubset(of:) in conformance UIRectEdge(void *a1)
{
  return (*v1 & ~*a1) == 0;
}

BOOL protocol witness for SetAlgebra.isDisjoint(with:) in conformance UIRectEdge(void *a1)
{
  return (*v1 & *a1) == 0;
}

BOOL protocol witness for SetAlgebra.isSuperset(of:) in conformance UIRectEdge(void *a1)
{
  return (*a1 & ~*v1) == 0;
}

BOOL protocol witness for SetAlgebra.isEmpty.getter in conformance UIRectEdge()
{
  return *v0 == 0;
}

uint64_t protocol witness for SetAlgebra.init<A>(_:) in conformance UIRectEdge(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return MEMORY[0x1F4184B08](a1, a4, a2, a5, a3);
}

void *protocol witness for SetAlgebra.subtract(_:) in conformance UIRectEdge(void *result)
{
  *v1 &= ~*result;
  return result;
}

NSNumber protocol witness for _ObjectiveCBridgeable._bridgeToObjectiveC() in conformance AXSwiftUITraits()
{
  return UInt64._bridgeToObjectiveC()();
}

uint64_t protocol witness for static _ObjectiveCBridgeable._unconditionallyBridgeFromObjectiveC(_:) in conformance AXSwiftUITraits@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = static UInt64._unconditionallyBridgeFromObjectiveC(_:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for static _ObjectiveCBridgeable._forceBridgeFromObjectiveC(_:result:) in conformance AXSwiftUITraits(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = 0;
  char v7 = 1;
  uint64_t result = MEMORY[0x18C118450](a1, &v6);
  uint64_t v4 = v6;
  char v5 = v7;
  if (v7) {
    uint64_t v4 = 0;
  }
  *(void *)a2 = v4;
  *(unsigned char *)(a2 + 8) = v5;
  return result;
}

uint64_t protocol witness for static _ObjectiveCBridgeable._conditionallyBridgeFromObjectiveC(_:result:) in conformance AXSwiftUITraits(uint64_t a1, uint64_t a2)
{
  char v3 = static UInt64._conditionallyBridgeFromObjectiveC(_:result:)();
  *(void *)a2 = 0;
  *(unsigned char *)(a2 + 8) = 1;
  return v3 & 1;
}

uint64_t protocol witness for static _ObjectiveCBridgeable._unconditionallyBridgeFromObjectiveC(_:) in conformance NSNotificationName@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v3 = MEMORY[0x18C115780](v2);
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v3;
  return result;
}

void protocol witness for Hashable.hash(into:) in conformance UITableViewStyle()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance UIKeyboardHIDUsage()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance UIKeyboardHIDUsage()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t protocol witness for ExpressibleByArrayLiteral.init(arrayLiteral:) in conformance UIRectEdge@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = specialized SetAlgebra<>.init(arrayLiteral:)();
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v2;
  return result;
}

void *protocol witness for RawRepresentable.init(rawValue:) in conformance UIRectEdge@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = *result;
  *(unsigned char *)(a2 + 8) = 0;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance UIRectEdge(void *a1@<X8>)
{
  *a1 = *v1;
}

uint64_t protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance NSNotificationName()
{
  lazy protocol witness table accessor for type NSRunLoopMode and conformance NSRunLoopMode(&lazy protocol witness table cache variable for type NSNotificationName and conformance NSNotificationName, type metadata accessor for NSNotificationName);
  lazy protocol witness table accessor for type NSRunLoopMode and conformance NSRunLoopMode((unint64_t *)&lazy protocol witness table cache variable for type NSNotificationName and conformance NSNotificationName, type metadata accessor for NSNotificationName);

  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()();
}

_DWORD *protocol witness for RawRepresentable.init(rawValue:) in conformance AGAttribute@<X0>(_DWORD *result@<X0>, uint64_t a2@<X8>)
{
  *(_DWORD *)a2 = *result;
  *(unsigned char *)(a2 + 4) = 0;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance AGAttribute(_DWORD *a1@<X8>)
{
  *a1 = *v1;
}

uint64_t protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance AGAttribute()
{
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()();
}

uint64_t protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance UIMenuIdentifier()
{
  lazy protocol witness table accessor for type NSRunLoopMode and conformance NSRunLoopMode(&lazy protocol witness table cache variable for type UIMenuIdentifier and conformance UIMenuIdentifier, type metadata accessor for UIMenuIdentifier);
  lazy protocol witness table accessor for type NSRunLoopMode and conformance NSRunLoopMode(&lazy protocol witness table cache variable for type UIMenuIdentifier and conformance UIMenuIdentifier, type metadata accessor for UIMenuIdentifier);

  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()();
}

uint64_t protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance NSAttributedStringKey()
{
  lazy protocol witness table accessor for type NSRunLoopMode and conformance NSRunLoopMode((unint64_t *)&lazy protocol witness table cache variable for type NSAttributedStringKey and conformance NSAttributedStringKey, type metadata accessor for NSAttributedStringKey);
  lazy protocol witness table accessor for type NSRunLoopMode and conformance NSRunLoopMode(&lazy protocol witness table cache variable for type NSAttributedStringKey and conformance NSAttributedStringKey, type metadata accessor for NSAttributedStringKey);

  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()();
}

uint64_t protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance _UIImageNamedColorStyle()
{
  lazy protocol witness table accessor for type NSRunLoopMode and conformance NSRunLoopMode((unint64_t *)&lazy protocol witness table cache variable for type _UIImageNamedColorStyle and conformance _UIImageNamedColorStyle, type metadata accessor for _UIImageNamedColorStyle);
  lazy protocol witness table accessor for type NSRunLoopMode and conformance NSRunLoopMode((unint64_t *)&lazy protocol witness table cache variable for type _UIImageNamedColorStyle and conformance _UIImageNamedColorStyle, type metadata accessor for _UIImageNamedColorStyle);

  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()();
}

uint64_t protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance UIApplicationOpenExternalURLOptionsKey()
{
  lazy protocol witness table accessor for type NSRunLoopMode and conformance NSRunLoopMode(&lazy protocol witness table cache variable for type UIApplicationOpenExternalURLOptionsKey and conformance UIApplicationOpenExternalURLOptionsKey, type metadata accessor for UIApplicationOpenExternalURLOptionsKey);
  lazy protocol witness table accessor for type NSRunLoopMode and conformance NSRunLoopMode((unint64_t *)&lazy protocol witness table cache variable for type UIApplicationOpenExternalURLOptionsKey and conformance UIApplicationOpenExternalURLOptionsKey, type metadata accessor for UIApplicationOpenExternalURLOptionsKey);

  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()();
}

uint64_t protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance UIApplicationLaunchOptionsKey()
{
  lazy protocol witness table accessor for type NSRunLoopMode and conformance NSRunLoopMode(&lazy protocol witness table cache variable for type UIApplicationLaunchOptionsKey and conformance UIApplicationLaunchOptionsKey, type metadata accessor for UIApplicationLaunchOptionsKey);
  lazy protocol witness table accessor for type NSRunLoopMode and conformance NSRunLoopMode(&lazy protocol witness table cache variable for type UIApplicationLaunchOptionsKey and conformance UIApplicationLaunchOptionsKey, type metadata accessor for UIApplicationLaunchOptionsKey);

  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()();
}

uint64_t protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance NSKeyValueChangeKey()
{
  lazy protocol witness table accessor for type NSRunLoopMode and conformance NSRunLoopMode((unint64_t *)&lazy protocol witness table cache variable for type NSKeyValueChangeKey and conformance NSKeyValueChangeKey, type metadata accessor for NSKeyValueChangeKey);
  lazy protocol witness table accessor for type NSRunLoopMode and conformance NSRunLoopMode(&lazy protocol witness table cache variable for type NSKeyValueChangeKey and conformance NSKeyValueChangeKey, type metadata accessor for NSKeyValueChangeKey);

  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()();
}

uint64_t protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance AXSwiftUITraits()
{
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()();
}

uint64_t protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance UIActivityType()
{
  lazy protocol witness table accessor for type NSRunLoopMode and conformance NSRunLoopMode(&lazy protocol witness table cache variable for type UIActivityType and conformance UIActivityType, type metadata accessor for UIActivityType);
  lazy protocol witness table accessor for type NSRunLoopMode and conformance NSRunLoopMode((unint64_t *)&lazy protocol witness table cache variable for type UIActivityType and conformance UIActivityType, type metadata accessor for UIActivityType);

  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()();
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance NSRunLoopMode@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance NSRunLoopMode()
{
  lazy protocol witness table accessor for type NSRunLoopMode and conformance NSRunLoopMode(&lazy protocol witness table cache variable for type NSRunLoopMode and conformance NSRunLoopMode, type metadata accessor for NSRunLoopMode);
  lazy protocol witness table accessor for type NSRunLoopMode and conformance NSRunLoopMode((unint64_t *)&lazy protocol witness table cache variable for type NSRunLoopMode and conformance NSRunLoopMode, type metadata accessor for NSRunLoopMode);

  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()();
}

uint64_t protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance UIAccessibilityTraits()
{
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()();
}

uint64_t protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance NSURLResourceKey()
{
  lazy protocol witness table accessor for type NSRunLoopMode and conformance NSRunLoopMode(&lazy protocol witness table cache variable for type NSURLResourceKey and conformance NSURLResourceKey, type metadata accessor for NSURLResourceKey);
  lazy protocol witness table accessor for type NSRunLoopMode and conformance NSRunLoopMode(&lazy protocol witness table cache variable for type NSURLResourceKey and conformance NSURLResourceKey, type metadata accessor for NSURLResourceKey);

  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()();
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance UIMenuIdentifier@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = MEMORY[0x18C115780](*a1, a1[1]);
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v3;
  return result;
}

uint64_t protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance UIAccessibilityTextualContext()
{
  lazy protocol witness table accessor for type NSRunLoopMode and conformance NSRunLoopMode(&lazy protocol witness table cache variable for type UIAccessibilityTextualContext and conformance UIAccessibilityTextualContext, type metadata accessor for UIAccessibilityTextualContext);
  lazy protocol witness table accessor for type NSRunLoopMode and conformance NSRunLoopMode(&lazy protocol witness table cache variable for type UIAccessibilityTextualContext and conformance UIAccessibilityTextualContext, type metadata accessor for UIAccessibilityTextualContext);

  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()();
}

uint64_t protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance UISheetPresentationControllerDetentIdentifier()
{
  lazy protocol witness table accessor for type NSRunLoopMode and conformance NSRunLoopMode(&lazy protocol witness table cache variable for type UISheetPresentationControllerDetentIdentifier and conformance UISheetPresentationControllerDetentIdentifier, type metadata accessor for UISheetPresentationControllerDetentIdentifier);
  lazy protocol witness table accessor for type NSRunLoopMode and conformance NSRunLoopMode((unint64_t *)&lazy protocol witness table cache variable for type UISheetPresentationControllerDetentIdentifier and conformance UISheetPresentationControllerDetentIdentifier, type metadata accessor for UISheetPresentationControllerDetentIdentifier);

  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()();
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance AXSwiftUITraits()
{
  return MEMORY[0x1F4185F88](*v0);
}

void protocol witness for Hashable.hash(into:) in conformance AXSwiftUITraits()
{
  Hasher._combine(_:)(*v0);
}

uint64_t protocol witness for Hashable._rawHashValue(seed:) in conformance AXSwiftUITraits()
{
  return static Hasher._hash(seed:_:)();
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance NSRunLoopMode(uint64_t a1, uint64_t a2)
{
  return protocol witness for _ObjectiveCBridgeable._bridgeToObjectiveC() in conformance NSNotificationName(a1, a2, MEMORY[0x1E4FBB198]);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance NSAttributedStringKey()
{
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

void specialized PrimitiveView.body.getter()
{
}

void specialized PrimitiveGesture.body.getter()
{
  _StringGuts.grow(_:)(32);
  swift_bridgeObjectRelease();
  v0._countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  v1._countAndFlagsBits = 46;
  v1._object = (void *)0xE100000000000000;
  String.append(_:)(v1);
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

unint64_t lazy protocol witness table accessor for type _PositionLayout and conformance _PositionLayout()
{
  unint64_t result = lazy protocol witness table cache variable for type _PositionLayout and conformance _PositionLayout;
  if (!lazy protocol witness table cache variable for type _PositionLayout and conformance _PositionLayout)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _PositionLayout and conformance _PositionLayout);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type _PositionLayout and conformance _PositionLayout;
  if (!lazy protocol witness table cache variable for type _PositionLayout and conformance _PositionLayout)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _PositionLayout and conformance _PositionLayout);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type _PositionLayout and conformance _PositionLayout;
  if (!lazy protocol witness table cache variable for type _PositionLayout and conformance _PositionLayout)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _PositionLayout and conformance _PositionLayout);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type _PositionLayout and conformance _PositionLayout;
  if (!lazy protocol witness table cache variable for type _PositionLayout and conformance _PositionLayout)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _PositionLayout and conformance _PositionLayout);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _GridLayout and conformance _GridLayout()
{
  unint64_t result = lazy protocol witness table cache variable for type _GridLayout and conformance _GridLayout;
  if (!lazy protocol witness table cache variable for type _GridLayout and conformance _GridLayout)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _GridLayout and conformance _GridLayout);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type _GridLayout and conformance _GridLayout;
  if (!lazy protocol witness table cache variable for type _GridLayout and conformance _GridLayout)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _GridLayout and conformance _GridLayout);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type _GridLayout and conformance _GridLayout;
  if (!lazy protocol witness table cache variable for type _GridLayout and conformance _GridLayout)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _GridLayout and conformance _GridLayout);
  }
  return result;
}

void type metadata accessor for _DUIPreviewMode(uint64_t a1)
{
}

void type metadata accessor for RPTTestRunnerPPTLifetimeEvent(uint64_t a1)
{
}

void type metadata accessor for UIDatePickerStyle(uint64_t a1)
{
}

void type metadata accessor for UIGestureRecognizerState(uint64_t a1)
{
}

void type metadata accessor for UIAlertControllerStyle(uint64_t a1)
{
}

void type metadata accessor for UISheetPresentationControllerDetentIdentifier(uint64_t a1)
{
}

void type metadata accessor for UIPopoverArrowDirection(uint64_t a1)
{
}

void type metadata accessor for CFDictionaryRef(uint64_t a1)
{
}

__n128 __swift_memcpy32_16(_OWORD *a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

uint64_t storeEnumTagSinglePayload for SPRotation3D(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)__n128 result = (a2 - 1);
    *(void *)(result + 8) = 0;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 32) = v3;
  return result;
}

void type metadata accessor for SPRotation3D(uint64_t a1)
{
}

void type metadata accessor for UIRectEdge(uint64_t a1)
{
}

void type metadata accessor for UISceneActivationState(uint64_t a1)
{
}

uint64_t getEnumTagSinglePayload for CGAffineTransform(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 48)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for CGAffineTransform(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 48) = v3;
  return result;
}

void type metadata accessor for CGAffineTransform(uint64_t a1)
{
}

void type metadata accessor for UIKeyboardType(uint64_t a1)
{
}

void type metadata accessor for CGVector(uint64_t a1)
{
}

void type metadata accessor for AXAutomationType(uint64_t a1)
{
}

void type metadata accessor for UIAccessibilityContainerType(uint64_t a1)
{
}

void type metadata accessor for UIAccessibilityTraits(uint64_t a1)
{
}

void type metadata accessor for _NSRange(uint64_t a1)
{
}

void type metadata accessor for NSRunLoopMode(uint64_t a1)
{
}

void *initializeBufferWithCopyOfBuffer for SidebarListBody(void *__dst, void *__src, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 24);
  uint64_t v6 = *(void *)(v5 - 8);
  unint64_t v7 = *(_DWORD *)(v6 + 80);
  size_t v8 = ((v7 + 16) & ~v7) + *(void *)(v6 + 64);
  uint64_t v9 = *(void *)(a3 + 16) - 8;
  uint64_t v10 = *(void *)v9;
  uint64_t v11 = *(_DWORD *)(*(void *)v9 + 80);
  if ((v11 | v7) <= 7
    && ((*(_DWORD *)(*(void *)v9 + 80) | *(_DWORD *)(v6 + 80)) & 0x100000) == 0
    && ((v11 + ((v8 + 7) & 0xFFFFFFFFFFFFFFF8) + 8) & ~v11) + *(void *)(*(void *)v9 + 64) <= 0x18)
  {
    uint64_t v15 = (uint64_t *)(((unint64_t)__src + 15) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v24 = ~v7;
    uint64_t v25 = *(void *)(a3 + 16);
    if ((*(_DWORD *)(v6 + 84) & 0x80000000) != 0)
    {
      uint64_t v17 = ~v11;
      if ((*(unsigned int (**)(unint64_t))(v6 + 48))(((unint64_t)v15 + v7 + 8) & ~v7))
      {
LABEL_14:
        memcpy(__dst, __src, v8);
LABEL_17:
        long long v20 = (void *)(((unint64_t)__dst + v8 + 7) & 0xFFFFFFFFFFFFFFF8);
        uint64_t v21 = (void *)(((unint64_t)__src + v8 + 7) & 0xFFFFFFFFFFFFFFF8);
        *long long v20 = *v21;
        (*(void (**)(unint64_t, unint64_t, uint64_t))(v10 + 16))(((unint64_t)v20 + v11 + 8) & v17, ((unint64_t)v21 + v11 + 8) & v17, v25);
        return __dst;
      }
    }
    else
    {
      uint64_t v16 = *v15;
      if ((unint64_t)*v15 >= 0xFFFFFFFF) {
        LODWORD(v16) = -1;
      }
      uint64_t v17 = ~v11;
      if (v16 != -1) {
        goto LABEL_14;
      }
    }
    char *__dst = *__src;
    long long v18 = (void *)(((unint64_t)__dst + 15) & 0xFFFFFFFFFFFFFFF8);
    *long long v18 = *v15;
    uint64_t v23 = ((unint64_t)v18 + v7 + 8) & v24;
    long long v19 = *(void (**)(uint64_t, unint64_t, uint64_t))(v6 + 16);
    swift_retain();
    swift_retain();
    v19(v23, ((unint64_t)v15 + v7 + 8) & v24, v5);
    goto LABEL_17;
  }
  uint64_t v14 = *__src;
  char *__dst = *__src;
  __dst = (void *)(v14 + (((v11 | v7) & 0xF8 ^ 0x1F8) & ((v11 | v7) + 16)));
  swift_retain();
  return __dst;
}

void *assignWithCopy for SidebarListBody(void *a1, void *a2, uint64_t a3)
{
  uint64_t v3 = a3;
  uint64_t v4 = a2;
  uint64_t v5 = a1;
  uint64_t v6 = *(void *)(a3 + 24);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(unsigned int *)(v7 + 84);
  uint64_t v9 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v10 = *(void *)(v7 + 64);
  size_t v11 = ((v9 + 16) & ~v9) + v10;
  __n128 v12 = (void *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v37 = ~v9;
  if ((v8 & 0x80000000) != 0)
  {
    size_t v35 = ((v9 + 16) & ~v9) + v10;
    uint64_t v17 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v7 + 48);
    int v18 = v17(((unint64_t)v12 + v9 + 8) & ~v9, v8, v6);
    long long v19 = v17;
    int v33 = v18;
    __n128 v13 = (void *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v4 = a2;
    uint64_t v5 = a1;
    int v15 = v19(((unint64_t)v13 + v9 + 8) & ~v9, v8, v6);
    size_t v11 = v35;
    uint64_t v3 = a3;
    if (!v33)
    {
LABEL_5:
      if (!v15)
      {
        *uint64_t v5 = *v4;
        swift_retain();
        swift_release();
        *__n128 v12 = *v13;
        swift_retain();
        swift_release();
        (*(void (**)(unint64_t, unint64_t, uint64_t))(v7 + 24))(((unint64_t)v12 + v9 + 8) & v37, ((unint64_t)v13 + v9 + 8) & v37, v6);
        goto LABEL_12;
      }
      swift_release();
      swift_release();
      (*(void (**)(unint64_t, uint64_t))(v7 + 8))(((unint64_t)v12 + v9 + 8) & v37, v6);
      goto LABEL_9;
    }
  }
  else
  {
    __n128 v13 = (void *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v14 = *v13;
    if (*v13 >= 0xFFFFFFFFuLL) {
      LODWORD(v14) = -1;
    }
    int v15 = v14 + 1;
    if (*v12 > 0xFFFFFFFEuLL) {
      goto LABEL_5;
    }
  }
  if (!v15)
  {
    *uint64_t v5 = *v4;
    *__n128 v12 = *v13;
    uint64_t v20 = v9 + 8;
    unint64_t v21 = (unint64_t)v12 + v9 + 8;
    int v22 = v5;
    uint64_t v23 = v4;
    uint64_t v24 = v6;
    unint64_t v25 = v21 & v37;
    unint64_t v26 = ((unint64_t)v13 + v20) & v37;
    double v27 = *(void (**)(unint64_t, unint64_t, uint64_t))(v7 + 16);
    swift_retain();
    swift_retain();
    uint64_t v28 = v24;
    uint64_t v4 = v23;
    uint64_t v5 = v22;
    v27(v25, v26, v28);
    goto LABEL_12;
  }
LABEL_9:
  memcpy(v5, v4, v11);
LABEL_12:
  uint64_t v29 = (void *)(((unint64_t)v5 + v11 + 7) & 0xFFFFFFFFFFFFFFF8);
  char v30 = (void *)(((unint64_t)v4 + v11 + 7) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v29 = *v30;
  uint64_t v31 = *(void *)(*(void *)(v3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v31 + 24))(((unint64_t)v29 + *(unsigned __int8 *)(v31 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v31 + 80), ((unint64_t)v30 + *(unsigned __int8 *)(v31 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v31 + 80));
  return v5;
}

void *initializeWithTake for SidebarListBody(void *__dst, void *__src, uint64_t a3)
{
  uint64_t v6 = *(void *)(a3 + 24);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v9 = ~v8;
  uint64_t v10 = (v8 + 16) & ~v8;
  uint64_t v11 = *(void *)(v7 + 64);
  __n128 v12 = (uint64_t *)(((unint64_t)__src + 15) & 0xFFFFFFFFFFFFFFF8);
  if ((*(_DWORD *)(v7 + 84) & 0x80000000) == 0)
  {
    uint64_t v13 = *v12;
    if ((unint64_t)*v12 >= 0xFFFFFFFF) {
      LODWORD(v13) = -1;
    }
    size_t v14 = v10 + v11;
    if (v13 != -1) {
      goto LABEL_5;
    }
LABEL_7:
    char *__dst = *__src;
    int v15 = (void *)(((unint64_t)__dst + 15) & 0xFFFFFFFFFFFFFFF8);
    void *v15 = *v12;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v7 + 32))(((unint64_t)v15 + v8 + 8) & v9, ((unint64_t)v12 + v8 + 8) & v9, v6);
    goto LABEL_8;
  }
  size_t v14 = v10 + v11;
  if (!(*(unsigned int (**)(unint64_t))(v7 + 48))(((unint64_t)v12 + v8 + 8) & v9)) {
    goto LABEL_7;
  }
LABEL_5:
  memcpy(__dst, __src, v14);
LABEL_8:
  uint64_t v16 = (void *)(((unint64_t)__dst + v14 + 7) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v17 = (void *)(((unint64_t)__src + v14 + 7) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v16 = *v17;
  uint64_t v18 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v18 + 32))(((unint64_t)v16 + *(unsigned __int8 *)(v18 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80), ((unint64_t)v17 + *(unsigned __int8 *)(v18 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80));
  return __dst;
}

void *assignWithTake for SidebarListBody(void *a1, void *a2, uint64_t a3)
{
  uint64_t v3 = a3;
  uint64_t v5 = a1;
  uint64_t v6 = *(void *)(*(void *)(a3 + 24) - 8);
  uint64_t v7 = *(unsigned int *)(v6 + 84);
  uint64_t v8 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v9 = *(void *)(v6 + 64);
  size_t v10 = ((v8 + 16) & ~v8) + v9;
  uint64_t v11 = (void *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v30 = ~v8;
  if ((v7 & 0x80000000) != 0)
  {
    size_t v28 = ((v8 + 16) & ~v8) + v9;
    uint64_t v16 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v6 + 48);
    uint64_t v17 = *(void *)(a3 + 24);
    int v18 = v16(((unint64_t)v11 + v8 + 8) & ~v8, v7, v17);
    long long v19 = v16;
    int v26 = v18;
    uint64_t v13 = (void *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v20 = v7;
    uint64_t v12 = v17;
    uint64_t v21 = v17;
    uint64_t v5 = a1;
    size_t v10 = v28;
    int v15 = v19(((unint64_t)v13 + v8 + 8) & ~v8, v20, v21);
    uint64_t v3 = a3;
    if (!v26)
    {
LABEL_5:
      if (!v15)
      {
        *uint64_t v5 = *a2;
        swift_release();
        *uint64_t v11 = *v13;
        swift_release();
        (*(void (**)(unint64_t, unint64_t, uint64_t))(v6 + 40))(((unint64_t)v11 + v8 + 8) & v30, ((unint64_t)v13 + v8 + 8) & v30, v12);
        goto LABEL_12;
      }
      swift_release();
      swift_release();
      (*(void (**)(unint64_t, uint64_t))(v6 + 8))(((unint64_t)v11 + v8 + 8) & v30, v12);
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v12 = *(void *)(a3 + 24);
    uint64_t v13 = (void *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v14 = *v13;
    if (*v13 >= 0xFFFFFFFFuLL) {
      LODWORD(v14) = -1;
    }
    int v15 = v14 + 1;
    if (*v11 > 0xFFFFFFFEuLL) {
      goto LABEL_5;
    }
  }
  if (!v15)
  {
    *uint64_t v5 = *a2;
    *uint64_t v11 = *v13;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v6 + 32))(((unint64_t)v11 + v8 + 8) & v30, ((unint64_t)v13 + v8 + 8) & v30, v12);
    goto LABEL_12;
  }
LABEL_9:
  memcpy(v5, a2, v10);
LABEL_12:
  int v22 = (void *)(((unint64_t)v5 + v10 + 7) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v23 = (void *)(((unint64_t)a2 + v10 + 7) & 0xFFFFFFFFFFFFFFF8);
  *int v22 = *v23;
  uint64_t v24 = *(void *)(*(void *)(v3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v24 + 40))(((unint64_t)v22 + *(unsigned __int8 *)(v24 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v24 + 80), ((unint64_t)v23 + *(unsigned __int8 *)(v24 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v24 + 80));
  return v5;
}

uint64_t getEnumTagSinglePayload for SidebarListBody(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 24) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF) {
    int v6 = 0x7FFFFFFF;
  }
  else {
    int v6 = *(_DWORD *)(v4 + 84);
  }
  unsigned int v7 = v6 - 1;
  uint64_t v8 = *(void *)(a3 + 16);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(unsigned int *)(v9 + 84);
  uint64_t v11 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v12 = *(unsigned __int8 *)(v9 + 80);
  if (v10 <= v7) {
    unsigned int v13 = v7;
  }
  else {
    unsigned int v13 = *(_DWORD *)(v9 + 84);
  }
  if (!a2) {
    return 0;
  }
  uint64_t v14 = ((v11 + 16) & ~v11) + *(void *)(*(void *)(*(void *)(a3 + 24) - 8) + 64);
  uint64_t v15 = v12 + 8;
  int v16 = a2 - v13;
  if (a2 <= v13) {
    goto LABEL_28;
  }
  unint64_t v17 = ((v15 + ((v14 + 7) & 0xFFFFFFFFFFFFFFF8)) & ~v12) + *(void *)(*(void *)(v8 - 8) + 64);
  char v18 = 8 * v17;
  if (v17 <= 3)
  {
    unsigned int v21 = ((v16 + ~(-1 << v18)) >> v18) + 1;
    if (HIWORD(v21))
    {
      int v19 = *(_DWORD *)((char *)a1 + v17);
      if (!v19) {
        goto LABEL_28;
      }
      goto LABEL_18;
    }
    if (v21 > 0xFF)
    {
      int v19 = *(unsigned __int16 *)((char *)a1 + v17);
      if (!*(unsigned __int16 *)((char *)a1 + v17)) {
        goto LABEL_28;
      }
      goto LABEL_18;
    }
    if (v21 < 2)
    {
LABEL_28:
      if (v7 >= v10)
      {
        double v27 = (unint64_t *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
        if ((v5 & 0x80000000) != 0)
        {
          unsigned int v29 = (*(uint64_t (**)(unint64_t))(v4 + 48))(((unint64_t)v27 + v11 + 8) & ~v11);
        }
        else
        {
          unint64_t v28 = *v27;
          if (v28 >= 0xFFFFFFFF) {
            LODWORD(v28) = -1;
          }
          unsigned int v29 = v28 + 1;
        }
        if (v29 >= 2) {
          return v29 - 1;
        }
        else {
          return 0;
        }
      }
      else
      {
        unint64_t v25 = (v15 + (((unint64_t)a1 + v14 + 7) & 0xFFFFFFFFFFFFFFF8)) & ~v12;
        int v26 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v9 + 48);
        return v26(v25, v10, v8);
      }
    }
  }
  int v19 = *((unsigned __int8 *)a1 + v17);
  if (!*((unsigned char *)a1 + v17)) {
    goto LABEL_28;
  }
LABEL_18:
  int v22 = (v19 - 1) << v18;
  if (v17 > 3) {
    int v22 = 0;
  }
  if (v17)
  {
    if (v17 <= 3) {
      int v23 = v17;
    }
    else {
      int v23 = 4;
    }
    switch(v23)
    {
      case 2:
        int v24 = *a1;
        break;
      case 3:
        int v24 = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        int v24 = *(_DWORD *)a1;
        break;
      default:
        int v24 = *(unsigned __int8 *)a1;
        break;
    }
  }
  else
  {
    int v24 = 0;
  }
  return v13 + (v24 | v22) + 1;
}

void storeEnumTagSinglePayload for SidebarListBody(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 24) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  uint64_t v8 = *(void *)(*(void *)(a4 + 16) - 8);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v9 = 0x7FFFFFFF;
  }
  else {
    unsigned int v9 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v10 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v11 = *(_DWORD *)(v8 + 84);
  uint64_t v12 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v13 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v14 = *(void *)(v8 + 64);
  unsigned int v15 = v9 - 1;
  if (v11 <= v9 - 1) {
    unsigned int v16 = v9 - 1;
  }
  else {
    unsigned int v16 = *(_DWORD *)(v8 + 84);
  }
  size_t v17 = ((v12 + 16) & ~v12) + *(void *)(*(void *)(*(void *)(a4 + 24) - 8) + 64);
  uint64_t v18 = v13 + 8;
  size_t v19 = ((v13 + 8 + ((v17 + 7) & 0xFFFFFFFFFFFFFFF8)) & ~v13) + v14;
  BOOL v20 = a3 >= v16;
  unsigned int v21 = a3 - v16;
  if (v21 != 0 && v20)
  {
    if (v19 <= 3)
    {
      unsigned int v26 = ((v21 + ~(-1 << (8 * v19))) >> (8 * v19)) + 1;
      if (HIWORD(v26))
      {
        int v22 = 4;
      }
      else if (v26 >= 0x100)
      {
        int v22 = 2;
      }
      else
      {
        int v22 = v26 > 1;
      }
    }
    else
    {
      int v22 = 1;
    }
  }
  else
  {
    int v22 = 0;
  }
  if (v16 < a2)
  {
    unsigned int v23 = ~v16 + a2;
    if (v19 < 4)
    {
      int v24 = (v23 >> (8 * v19)) + 1;
      if (v19)
      {
        int v27 = v23 & ~(-1 << (8 * v19));
        bzero(a1, v19);
        if (v19 == 3)
        {
          *(_WORD *)a1 = v27;
          a1[2] = BYTE2(v27);
        }
        else if (v19 == 2)
        {
          *(_WORD *)a1 = v27;
        }
        else
        {
          *a1 = v27;
        }
      }
    }
    else
    {
      bzero(a1, v19);
      *(_DWORD *)a1 = v23;
      int v24 = 1;
    }
    switch(v22)
    {
      case 1:
        a1[v19] = v24;
        return;
      case 2:
        *(_WORD *)&a1[v19] = v24;
        return;
      case 3:
        goto LABEL_72;
      case 4:
        *(_DWORD *)&a1[v19] = v24;
        return;
      default:
        return;
    }
  }
  uint64_t v25 = ~v13;
  switch(v22)
  {
    case 1:
      a1[v19] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_27;
    case 2:
      *(_WORD *)&a1[v19] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_27;
    case 3:
LABEL_72:
      __break(1u);
      JUMPOUT(0x18769A768);
    case 4:
      *(_DWORD *)&a1[v19] = 0;
      goto LABEL_26;
    default:
LABEL_26:
      if (a2)
      {
LABEL_27:
        if (v15 >= v11)
        {
          if (v15 >= a2)
          {
            if (a2 + 1 <= v9)
            {
              if (a2 != -1)
              {
                size_t v35 = (void *)((unint64_t)(a1 + 15) & 0xFFFFFFFFFFFFFFF8);
                if ((v7 & 0x80000000) != 0)
                {
                  uint64_t v37 = *(void (**)(unint64_t, uint64_t))(v6 + 56);
                  uint64_t v38 = a2 + 1;
                  v37(((unint64_t)v35 + v12 + 8) & ~v12, v38);
                }
                else
                {
                  if (((a2 + 1) & 0x80000000) != 0) {
                    uint64_t v36 = a2 - 0x7FFFFFFF;
                  }
                  else {
                    uint64_t v36 = a2;
                  }
                  *size_t v35 = v36;
                }
              }
            }
            else
            {
              if (v17 <= 3) {
                int v33 = ~(-1 << (8 * v17));
              }
              else {
                int v33 = -1;
              }
              if (v17)
              {
                int v31 = v33 & (a2 - v9);
                if (v17 <= 3) {
                  int v34 = v17;
                }
                else {
                  int v34 = 4;
                }
                bzero(a1, v17);
                switch(v34)
                {
                  case 2:
LABEL_64:
                    *(_WORD *)a1 = v31;
                    break;
                  case 3:
LABEL_65:
                    *(_WORD *)a1 = v31;
                    a1[2] = BYTE2(v31);
                    break;
                  case 4:
LABEL_66:
                    *(_DWORD *)a1 = v31;
                    break;
                  default:
LABEL_52:
                    *a1 = v31;
                    break;
                }
              }
            }
          }
          else
          {
            if (v17 <= 3) {
              int v30 = ~(-1 << (8 * v17));
            }
            else {
              int v30 = -1;
            }
            if (v17)
            {
              int v31 = v30 & (a2 - v9);
              if (v17 <= 3) {
                int v32 = v17;
              }
              else {
                int v32 = 4;
              }
              bzero(a1, v17);
              switch(v32)
              {
                case 2:
                  goto LABEL_64;
                case 3:
                  goto LABEL_65;
                case 4:
                  goto LABEL_66;
                default:
                  goto LABEL_52;
              }
            }
          }
        }
        else
        {
          unint64_t v28 = (v18 + ((unint64_t)&a1[v17 + 7] & 0xFFFFFFFFFFFFFFF8)) & v25;
          unsigned int v29 = *(void (**)(unint64_t))(v10 + 56);
          v29(v28);
        }
      }
      return;
  }
}

uint64_t base witness table accessor for RawRepresentable in NSRunLoopMode()
{
  return lazy protocol witness table accessor for type NSRunLoopMode and conformance NSRunLoopMode(&lazy protocol witness table cache variable for type NSRunLoopMode and conformance NSRunLoopMode, type metadata accessor for NSRunLoopMode);
}

uint64_t base witness table accessor for _HasCustomAnyHashableRepresentation in NSRunLoopMode()
{
  return lazy protocol witness table accessor for type NSRunLoopMode and conformance NSRunLoopMode(&lazy protocol witness table cache variable for type NSRunLoopMode and conformance NSRunLoopMode, type metadata accessor for NSRunLoopMode);
}

uint64_t base witness table accessor for Equatable in NSRunLoopMode()
{
  return lazy protocol witness table accessor for type NSRunLoopMode and conformance NSRunLoopMode((unint64_t *)&lazy protocol witness table cache variable for type NSRunLoopMode and conformance NSRunLoopMode, type metadata accessor for NSRunLoopMode);
}

uint64_t base witness table accessor for RawRepresentable in NSAttributedStringKey()
{
  return lazy protocol witness table accessor for type NSRunLoopMode and conformance NSRunLoopMode(&lazy protocol witness table cache variable for type NSAttributedStringKey and conformance NSAttributedStringKey, type metadata accessor for NSAttributedStringKey);
}

uint64_t base witness table accessor for _HasCustomAnyHashableRepresentation in NSAttributedStringKey()
{
  return lazy protocol witness table accessor for type NSRunLoopMode and conformance NSRunLoopMode((unint64_t *)&lazy protocol witness table cache variable for type NSAttributedStringKey and conformance NSAttributedStringKey, type metadata accessor for NSAttributedStringKey);
}

uint64_t base witness table accessor for RawRepresentable in UIAccessibilityTraits()
{
  return lazy protocol witness table accessor for type NSRunLoopMode and conformance NSRunLoopMode(&lazy protocol witness table cache variable for type UIAccessibilityTraits and conformance UIAccessibilityTraits, type metadata accessor for UIAccessibilityTraits);
}

uint64_t base witness table accessor for _HasCustomAnyHashableRepresentation in UIAccessibilityTraits()
{
  return lazy protocol witness table accessor for type NSRunLoopMode and conformance NSRunLoopMode(&lazy protocol witness table cache variable for type UIAccessibilityTraits and conformance UIAccessibilityTraits, type metadata accessor for UIAccessibilityTraits);
}

uint64_t base witness table accessor for Equatable in UIAccessibilityTraits()
{
  return lazy protocol witness table accessor for type NSRunLoopMode and conformance NSRunLoopMode(&lazy protocol witness table cache variable for type UIAccessibilityTraits and conformance UIAccessibilityTraits, type metadata accessor for UIAccessibilityTraits);
}

uint64_t base witness table accessor for RawRepresentable in AGAttribute()
{
  return lazy protocol witness table accessor for type NSRunLoopMode and conformance NSRunLoopMode(&lazy protocol witness table cache variable for type AGAttribute and conformance AGAttribute, type metadata accessor for AGAttribute);
}

uint64_t base witness table accessor for _HasCustomAnyHashableRepresentation in AGAttribute()
{
  return lazy protocol witness table accessor for type NSRunLoopMode and conformance NSRunLoopMode(&lazy protocol witness table cache variable for type AGAttribute and conformance AGAttribute, type metadata accessor for AGAttribute);
}

uint64_t base witness table accessor for Equatable in UIRectEdge()
{
  return lazy protocol witness table accessor for type NSRunLoopMode and conformance NSRunLoopMode(&lazy protocol witness table cache variable for type UIRectEdge and conformance UIRectEdge, type metadata accessor for UIRectEdge);
}

uint64_t base witness table accessor for ExpressibleByArrayLiteral in UIRectEdge()
{
  return lazy protocol witness table accessor for type NSRunLoopMode and conformance NSRunLoopMode(&lazy protocol witness table cache variable for type UIRectEdge and conformance UIRectEdge, type metadata accessor for UIRectEdge);
}

uint64_t base witness table accessor for RawRepresentable in UIRectEdge()
{
  return lazy protocol witness table accessor for type NSRunLoopMode and conformance NSRunLoopMode(&lazy protocol witness table cache variable for type UIRectEdge and conformance UIRectEdge, type metadata accessor for UIRectEdge);
}

uint64_t base witness table accessor for SetAlgebra in UIRectEdge()
{
  return lazy protocol witness table accessor for type NSRunLoopMode and conformance NSRunLoopMode(&lazy protocol witness table cache variable for type UIRectEdge and conformance UIRectEdge, type metadata accessor for UIRectEdge);
}

uint64_t base witness table accessor for Equatable in UIPopoverArrowDirection()
{
  return lazy protocol witness table accessor for type NSRunLoopMode and conformance NSRunLoopMode(&lazy protocol witness table cache variable for type UIPopoverArrowDirection and conformance UIPopoverArrowDirection, type metadata accessor for UIPopoverArrowDirection);
}

uint64_t base witness table accessor for ExpressibleByArrayLiteral in UIPopoverArrowDirection()
{
  return lazy protocol witness table accessor for type NSRunLoopMode and conformance NSRunLoopMode(&lazy protocol witness table cache variable for type UIPopoverArrowDirection and conformance UIPopoverArrowDirection, type metadata accessor for UIPopoverArrowDirection);
}

uint64_t base witness table accessor for RawRepresentable in UIPopoverArrowDirection()
{
  return lazy protocol witness table accessor for type NSRunLoopMode and conformance NSRunLoopMode(&lazy protocol witness table cache variable for type UIPopoverArrowDirection and conformance UIPopoverArrowDirection, type metadata accessor for UIPopoverArrowDirection);
}

uint64_t base witness table accessor for SetAlgebra in UIPopoverArrowDirection()
{
  return lazy protocol witness table accessor for type NSRunLoopMode and conformance NSRunLoopMode(&lazy protocol witness table cache variable for type UIPopoverArrowDirection and conformance UIPopoverArrowDirection, type metadata accessor for UIPopoverArrowDirection);
}

uint64_t base witness table accessor for RawRepresentable in UISheetPresentationControllerDetentIdentifier()
{
  return lazy protocol witness table accessor for type NSRunLoopMode and conformance NSRunLoopMode(&lazy protocol witness table cache variable for type UISheetPresentationControllerDetentIdentifier and conformance UISheetPresentationControllerDetentIdentifier, type metadata accessor for UISheetPresentationControllerDetentIdentifier);
}

uint64_t base witness table accessor for _HasCustomAnyHashableRepresentation in UISheetPresentationControllerDetentIdentifier()
{
  return lazy protocol witness table accessor for type NSRunLoopMode and conformance NSRunLoopMode(&lazy protocol witness table cache variable for type UISheetPresentationControllerDetentIdentifier and conformance UISheetPresentationControllerDetentIdentifier, type metadata accessor for UISheetPresentationControllerDetentIdentifier);
}

uint64_t base witness table accessor for Equatable in UISheetPresentationControllerDetentIdentifier()
{
  return lazy protocol witness table accessor for type NSRunLoopMode and conformance NSRunLoopMode(&lazy protocol witness table cache variable for type UISheetPresentationControllerDetentIdentifier and conformance UISheetPresentationControllerDetentIdentifier, type metadata accessor for UISheetPresentationControllerDetentIdentifier);
}

void type metadata accessor for UIApplicationOpenExternalURLOptionsKey(uint64_t a1)
{
}

void type metadata accessor for CTCompositionLanguage(uint64_t a1)
{
}

void type metadata accessor for CGImageRef(uint64_t a1)
{
}

void type metadata accessor for UITransition(uint64_t a1)
{
}

void type metadata accessor for UIKeyboardHIDUsage(uint64_t a1)
{
}

void type metadata accessor for UIUserInterfaceIdiom(uint64_t a1)
{
}

void type metadata accessor for UIUserInterfaceSizeClass(uint64_t a1)
{
}

void type metadata accessor for NSUnderlineStyle(uint64_t a1)
{
}

void type metadata accessor for UITableViewCellEditingStyle(uint64_t a1)
{
}

void type metadata accessor for UIActivityType(uint64_t a1)
{
}

void type metadata accessor for NSKeyValueChangeKey(uint64_t a1)
{
}

void type metadata accessor for AXSwiftUITraits(uint64_t a1)
{
}

void type metadata accessor for UISplitViewControllerDisplayMode(uint64_t a1)
{
}

void type metadata accessor for UIDocumentBrowserImportMode(uint64_t a1)
{
}

void type metadata accessor for NSURLResourceKey(uint64_t a1)
{
}

uint64_t getEnumTagSinglePayload for NSDecimal(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 20)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for NSDecimal(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(_DWORD *)(result + 16) = 0;
    *(void *)__n128 result = (a2 - 1);
    *(void *)(result + 8) = 0;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 20) = v3;
  return result;
}

void type metadata accessor for NSDecimal(uint64_t a1)
{
}

void type metadata accessor for CTFontRef(uint64_t a1)
{
}

uint64_t initializeBufferWithCopyOfBuffer for SidebarListBody.TableViewRoot(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 24) - 8);
  uint64_t v6 = *(_DWORD *)(v5 + 80);
  uint64_t v7 = ~(v6 | 7);
  size_t v8 = ((v6 + 16) & ~v6) + *(void *)(v5 + 64);
  if (v6 <= 7 && (*(_DWORD *)(v5 + 80) & 0x100000) == 0 && (((v6 | 7) + 41) & ~(v6 | 7)) + v8 <= 0x18)
  {
    uint64_t v36 = *(void *)(a3 + 24);
    uint64_t v12 = *(void *)a2;
    char v13 = *(unsigned char *)(a2 + 9);
    unsigned __int8 v14 = *(unsigned char *)(a2 + 8);
    int v35 = *(_DWORD *)(v5 + 84);
    outlined copy of Environment<CGFloat?>.Content(*(void *)a2, v14, v13);
    *(void *)a1 = v12;
    *(unsigned char *)(a1 + 8) = v14;
    *(unsigned char *)(a1 + 9) = v13;
    unint64_t v15 = (a1 + 17) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v16 = (a2 + 17) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v17 = *(void *)v16;
    LOBYTE(v12) = *(unsigned char *)(v16 + 9);
    unsigned __int8 v18 = *(unsigned char *)(v16 + 8);
    outlined copy of Environment<CGFloat?>.Content(*(void *)v16, v18, v12);
    *(void *)unint64_t v15 = v17;
    *(unsigned char *)(v15 + 8) = v18;
    *(unsigned char *)(v15 + 9) = v12;
    unint64_t v19 = (v15 + 17) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v20 = (v16 + 17) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v21 = *(void *)v20;
    char v22 = *(unsigned char *)(v20 + 8);
    outlined copy of Environment<Bool>.Content(*(void *)v20, v22);
    *(void *)unint64_t v19 = v21;
    *(unsigned char *)(v19 + 8) = v22;
    unsigned int v23 = (void *)((v15 + 33) & v7);
    int v24 = (void *)((v16 + 33) & v7);
    uint64_t v25 = (uint64_t *)(((unint64_t)v24 + 15) & 0xFFFFFFFFFFFFFFF8);
    if (v35 < 0)
    {
      uint64_t v27 = v36;
      int v29 = (*(uint64_t (**)(unint64_t))(v5 + 48))(((unint64_t)v25 + v6 + 8) & ~v6);
      uint64_t v28 = ~v6;
      if (v29)
      {
LABEL_14:
        memcpy(v23, v24, v8);
        return a1;
      }
    }
    else
    {
      uint64_t v26 = *v25;
      if ((unint64_t)*v25 >= 0xFFFFFFFF) {
        LODWORD(v26) = -1;
      }
      uint64_t v27 = v36;
      uint64_t v28 = ~v6;
      if (v26 != -1) {
        goto LABEL_14;
      }
    }
    *unsigned int v23 = *v24;
    int v30 = (void *)(((unint64_t)v23 + 15) & 0xFFFFFFFFFFFFFFF8);
    void *v30 = *v25;
    uint64_t v31 = ((unint64_t)v30 + v6 + 8) & v28;
    uint64_t v32 = ((unint64_t)v25 + v6 + 8) & v28;
    int v33 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
    swift_retain();
    swift_retain();
    v33(v31, v32, v27);
    return a1;
  }
  uint64_t v11 = *(void *)a2;
  *(void *)a1 = *(void *)a2;
  a1 = v11 + ((v6 + 16) & v7);
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for SidebarListBody.TableViewRoot(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)a2;
  char v7 = *(unsigned char *)(a2 + 9);
  unsigned __int8 v8 = *(unsigned char *)(a2 + 8);
  outlined copy of Environment<CGFloat?>.Content(*(void *)a2, v8, v7);
  uint64_t v9 = *(void *)a1;
  char v10 = *(unsigned char *)(a1 + 9);
  *(void *)a1 = v6;
  uint64_t v11 = *(unsigned __int8 *)(a1 + 8);
  *(unsigned char *)(a1 + 8) = v8;
  *(unsigned char *)(a1 + 9) = v7;
  outlined consume of Environment<CGFloat?>.Content(v9, v11, v10);
  unint64_t v12 = (a1 + 17) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v13 = (a2 + 17) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v14 = *(void *)v13;
  LOBYTE(v6) = *(unsigned char *)(v13 + 9);
  unsigned __int8 v15 = *(unsigned char *)(v13 + 8);
  outlined copy of Environment<CGFloat?>.Content(*(void *)v13, v15, v6);
  uint64_t v16 = *(void *)v12;
  char v17 = *(unsigned char *)(v12 + 9);
  *(void *)unint64_t v12 = v14;
  uint64_t v18 = *(unsigned __int8 *)(v12 + 8);
  *(unsigned char *)(v12 + 8) = v15;
  *(unsigned char *)(v12 + 9) = v6;
  outlined consume of Environment<CGFloat?>.Content(v16, v18, v17);
  unint64_t v19 = (v12 + 17) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v20 = (v13 + 17) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v21 = *(void *)v20;
  LOBYTE(v6) = *(unsigned char *)(v20 + 8);
  outlined copy of Environment<Bool>.Content(*(void *)v20, v6);
  uint64_t v22 = *(void *)v19;
  char v23 = *(unsigned char *)(v19 + 8);
  *(void *)unint64_t v19 = v21;
  *(unsigned char *)(v19 + 8) = v6;
  outlined consume of Environment<Bool>.Content(v22, v23);
  uint64_t v24 = *(void *)(a3 + 24);
  uint64_t v25 = *(void *)(v24 - 8);
  uint64_t v26 = *(unsigned __int8 *)(v25 + 80);
  uint64_t v27 = (v26 | 7) + 9;
  uint64_t v28 = (void *)((v27 + v19) & ~(v26 | 7));
  unint64_t v29 = v27 + v20;
  int v30 = (void *)(v29 & ~(v26 | 7));
  uint64_t v31 = *(unsigned int *)(v25 + 84);
  uint64_t v32 = ~v26;
  size_t v33 = ((v26 + 16) & ~v26) + *(void *)(v25 + 64);
  int v34 = (void *)(((unint64_t)v28 + 15) & 0xFFFFFFFFFFFFFFF8);
  if ((v31 & 0x80000000) != 0)
  {
    uint64_t v51 = v29 & ~(v26 | 7);
    uint64_t v41 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v25 + 48);
    uint64_t v50 = ((v26 + 16) & ~v26) + *(void *)(v25 + 64);
    int v42 = v41(((unint64_t)v34 + v26 + 8) & ~v26, v31, v24);
    uint64_t v43 = v41;
    int v49 = v42;
    int v35 = (void *)((v51 + 15) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v32 = ~v26;
    int v37 = v43(((unint64_t)v35 + v26 + 8) & ~v26, v31, v24);
    size_t v33 = v50;
    int v30 = (void *)v51;
    if (!v49)
    {
LABEL_5:
      if (!v37)
      {
        *uint64_t v28 = *v30;
        swift_retain();
        swift_release();
        *int v34 = *v35;
        swift_retain();
        swift_release();
        (*(void (**)(unint64_t, unint64_t, uint64_t))(v25 + 24))(((unint64_t)v34 + v26 + 8) & v32, ((unint64_t)v35 + v26 + 8) & v32, v24);
        return a1;
      }
      size_t v38 = v33;
      swift_release();
      swift_release();
      (*(void (**)(unint64_t, uint64_t))(v25 + 8))(((unint64_t)v34 + v26 + 8) & v32, v24);
      char v39 = v28;
      uint64_t v40 = v30;
      size_t v33 = v38;
      goto LABEL_10;
    }
  }
  else
  {
    int v35 = (void *)(((unint64_t)v30 + 15) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v36 = *v35;
    if (*v35 >= 0xFFFFFFFFuLL) {
      LODWORD(v36) = -1;
    }
    int v37 = v36 + 1;
    if (*v34 > 0xFFFFFFFEuLL) {
      goto LABEL_5;
    }
  }
  if (!v37)
  {
    *uint64_t v28 = *v30;
    *int v34 = *v35;
    uint64_t v44 = v32;
    uint64_t v45 = ((unint64_t)v34 + v26 + 8) & v32;
    uint64_t v46 = ((unint64_t)v35 + v26 + 8) & v44;
    uint64_t v47 = *(void (**)(uint64_t, uint64_t, uint64_t))(v25 + 16);
    swift_retain();
    swift_retain();
    v47(v45, v46, v24);
    return a1;
  }
  char v39 = v28;
  uint64_t v40 = v30;
LABEL_10:
  memcpy(v39, v40, v33);
  return a1;
}

uint64_t initializeWithTake for SidebarListBody.TableViewRoot(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(_WORD *)(a1 + 8) = *(_WORD *)(a2 + 8);
  unint64_t v4 = (a1 + 17) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v5 = (a2 + 17) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v6 = *(void *)v5;
  *(_WORD *)(v4 + 8) = *(_WORD *)(v5 + 8);
  *(void *)unint64_t v4 = v6;
  unint64_t v7 = (v4 + 17) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v8 = (v5 + 17) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v9 = *(void *)v8;
  *(unsigned char *)(v7 + 8) = *(unsigned char *)(v8 + 8);
  *(void *)unint64_t v7 = v9;
  uint64_t v10 = *(void *)(a3 + 24);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(unsigned __int8 *)(v11 + 80);
  uint64_t v13 = (v12 | 7) + 9;
  uint64_t v14 = (char *)((v13 + v7) & ~(v12 | 7));
  unsigned __int8 v15 = (void *)((v13 + v8) & ~(v12 | 7));
  uint64_t v16 = ~v12;
  uint64_t v17 = *(void *)(v11 + 64);
  uint64_t v18 = (uint64_t *)(((unint64_t)v15 + 15) & 0xFFFFFFFFFFFFFFF8);
  if ((*(_DWORD *)(v11 + 84) & 0x80000000) == 0)
  {
    uint64_t v19 = *v18;
    if ((unint64_t)*v18 >= 0xFFFFFFFF) {
      LODWORD(v19) = -1;
    }
    if (v19 != -1) {
      goto LABEL_5;
    }
LABEL_7:
    *(void *)uint64_t v14 = *v15;
    unint64_t v20 = (unint64_t)(v14 + 15);
    *(void *)(v20 & 0xFFFFFFFFFFFFFFF8) = *v18;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v11 + 32))((v12 + 8 + (v20 & 0xFFFFFFFFFFFFFFF8)) & v16, ((unint64_t)v18 + v12 + 8) & v16, v10);
    return a1;
  }
  if (!(*(unsigned int (**)(unint64_t))(v11 + 48))(((unint64_t)v18 + v12 + 8) & v16)) {
    goto LABEL_7;
  }
LABEL_5:
  memcpy(v14, v15, ((v12 + 16) & ~v12) + v17);
  return a1;
}

uint64_t assignWithTake for SidebarListBody.TableViewRoot(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v6 = *(unsigned char *)(a2 + 8);
  char v7 = *(unsigned char *)(a2 + 9);
  uint64_t v8 = *(void *)a1;
  char v9 = *(unsigned char *)(a1 + 9);
  *(void *)a1 = *(void *)a2;
  uint64_t v10 = *(unsigned __int8 *)(a1 + 8);
  *(unsigned char *)(a1 + 8) = v6;
  *(unsigned char *)(a1 + 9) = v7;
  outlined consume of Environment<CGFloat?>.Content(v8, v10, v9);
  unint64_t v11 = (a1 + 17) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v12 = (a2 + 17) & 0xFFFFFFFFFFFFFFF8;
  char v13 = *(unsigned char *)(v12 + 8);
  char v14 = *(unsigned char *)(v12 + 9);
  uint64_t v15 = *(void *)v11;
  char v16 = *(unsigned char *)(v11 + 9);
  *(void *)unint64_t v11 = *(void *)v12;
  uint64_t v17 = *(unsigned __int8 *)(v11 + 8);
  *(unsigned char *)(v11 + 8) = v13;
  *(unsigned char *)(v11 + 9) = v14;
  outlined consume of Environment<CGFloat?>.Content(v15, v17, v16);
  unint64_t v18 = (v11 + 17) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v19 = (v12 + 17) & 0xFFFFFFFFFFFFFFF8;
  char v20 = *(unsigned char *)(v19 + 8);
  uint64_t v21 = *(void *)v18;
  char v22 = *(unsigned char *)(v18 + 8);
  *(void *)unint64_t v18 = *(void *)v19;
  *(unsigned char *)(v18 + 8) = v20;
  outlined consume of Environment<Bool>.Content(v21, v22);
  uint64_t v23 = *(void *)(a3 + 24);
  uint64_t v24 = *(void *)(v23 - 8);
  uint64_t v25 = *(unsigned __int8 *)(v24 + 80);
  uint64_t v26 = (v25 | 7) + 9;
  uint64_t v27 = (void *)((v26 + v18) & ~(v25 | 7));
  unint64_t v28 = v26 + v19;
  unint64_t v29 = (void *)(v28 & ~(v25 | 7));
  uint64_t v30 = *(unsigned int *)(v24 + 84);
  uint64_t v31 = ~v25;
  size_t v32 = ((v25 + 16) & ~v25) + *(void *)(v24 + 64);
  size_t v33 = (void *)(((unint64_t)v27 + 15) & 0xFFFFFFFFFFFFFFF8);
  if ((v30 & 0x80000000) != 0)
  {
    uint64_t v46 = v28 & ~(v25 | 7);
    uint64_t v40 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v24 + 48);
    uint64_t v45 = ((v25 + 16) & ~v25) + *(void *)(*(void *)(v23 - 8) + 64);
    int v41 = v40(((unint64_t)v33 + v25 + 8) & ~v25, v30, v23);
    int v42 = v40;
    int v44 = v41;
    int v34 = (void *)((v46 + 15) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v31 = ~v25;
    int v36 = v42(((unint64_t)v34 + v25 + 8) & ~v25, v30, v23);
    size_t v32 = v45;
    unint64_t v29 = (void *)v46;
    if (!v44)
    {
LABEL_5:
      if (!v36)
      {
        *uint64_t v27 = *v29;
        swift_release();
        *size_t v33 = *v34;
        swift_release();
        (*(void (**)(unint64_t, unint64_t, uint64_t))(v24 + 40))(((unint64_t)v33 + v25 + 8) & v31, ((unint64_t)v34 + v25 + 8) & v31, v23);
        return a1;
      }
      size_t v37 = v32;
      swift_release();
      swift_release();
      (*(void (**)(unint64_t, uint64_t))(v24 + 8))(((unint64_t)v33 + v25 + 8) & v31, v23);
      size_t v38 = v27;
      char v39 = v29;
      size_t v32 = v37;
      goto LABEL_10;
    }
  }
  else
  {
    int v34 = (void *)(((unint64_t)v29 + 15) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v35 = *v34;
    if (*v34 >= 0xFFFFFFFFuLL) {
      LODWORD(v35) = -1;
    }
    int v36 = v35 + 1;
    if (*v33 > 0xFFFFFFFEuLL) {
      goto LABEL_5;
    }
  }
  if (!v36)
  {
    *uint64_t v27 = *v29;
    *size_t v33 = *v34;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v24 + 32))(((unint64_t)v33 + v25 + 8) & v31, ((unint64_t)v34 + v25 + 8) & v31, v23);
    return a1;
  }
  size_t v38 = v27;
  char v39 = v29;
LABEL_10:
  memcpy(v38, v39, v32);
  return a1;
}

uint64_t getEnumTagSinglePayload for SidebarListBody.TableViewRoot(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 24) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  if (v5 <= 0x7FFFFFFF) {
    int v7 = 0x7FFFFFFF;
  }
  else {
    int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  uint64_t v8 = v6 | 7;
  if (v7 - 1 >= a2) {
    goto LABEL_25;
  }
  uint64_t v9 = ((v6 + 16) & ~v6) + *(void *)(*(void *)(*(void *)(a3 + 24) - 8) + 64) + ((v8 + 41) & ~v8);
  char v10 = 8 * v9;
  if (v9 > 3) {
    goto LABEL_7;
  }
  unsigned int v13 = (((1 << v10) + a2 - v7) >> v10) + 1;
  if (HIWORD(v13))
  {
    int v11 = *(_DWORD *)((char *)a1 + v9);
    if (v11) {
      goto LABEL_15;
    }
LABEL_25:
    uint64_t v17 = (unint64_t *)(((((((((unint64_t)a1 + 17) & 0xFFFFFFFFFFFFFFF8) + 17) & 0xFFFFFFFFFFFFFFF8)
                                + v8
                                + 9) & ~v8)
                              + 15) & 0xFFFFFFFFFFFFFFF8);
    if ((v5 & 0x80000000) != 0)
    {
      unsigned int v19 = (*(uint64_t (**)(unint64_t))(v4 + 48))(((unint64_t)v17 + v6 + 8) & ~v6);
    }
    else
    {
      unint64_t v18 = *v17;
      if (v18 >= 0xFFFFFFFF) {
        LODWORD(v18) = -1;
      }
      unsigned int v19 = v18 + 1;
    }
    if (v19 >= 2) {
      return v19 - 1;
    }
    else {
      return 0;
    }
  }
  if (v13 > 0xFF)
  {
    int v11 = *(unsigned __int16 *)((char *)a1 + v9);
    if (*(unsigned __int16 *)((char *)a1 + v9)) {
      goto LABEL_15;
    }
    goto LABEL_25;
  }
  if (v13 < 2) {
    goto LABEL_25;
  }
LABEL_7:
  int v11 = *((unsigned __int8 *)a1 + v9);
  if (!*((unsigned char *)a1 + v9)) {
    goto LABEL_25;
  }
LABEL_15:
  int v14 = (v11 - 1) << v10;
  if (v9 > 3) {
    int v14 = 0;
  }
  if (v9)
  {
    if (v9 <= 3) {
      int v15 = ((v6 + 16) & ~v6)
    }
          + *(_DWORD *)(*(void *)(*(void *)(a3 + 24) - 8) + 64)
          + ((v8 + 41) & ~v8);
    else {
      int v15 = 4;
    }
    switch(v15)
    {
      case 2:
        int v16 = *a1;
        break;
      case 3:
        int v16 = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        int v16 = *(_DWORD *)a1;
        break;
      default:
        int v16 = *(unsigned __int8 *)a1;
        break;
    }
  }
  else
  {
    int v16 = 0;
  }
  return (v16 | v14) + v7;
}

void storeEnumTagSinglePayload for SidebarListBody.TableViewRoot(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 24) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  unsigned int v9 = v8 - 1;
  uint64_t v10 = *(unsigned __int8 *)(v6 + 80);
  size_t v12 = ((v10 + 16) & ~v10) + *(void *)(*(void *)(*(void *)(a4 + 24) - 8) + 64);
  size_t v13 = (((v10 | 7) + 41) & ~(v10 | 7)) + v12;
  if (v8 - 1 >= a3)
  {
    int v14 = 0;
LABEL_13:
    if (v9 >= a2) {
      goto LABEL_21;
    }
    goto LABEL_14;
  }
  int v14 = 1;
  if (v13 > 3) {
    goto LABEL_13;
  }
  unsigned int v15 = (((1 << (8 * v13)) + a3 - v8) >> (8 * v13)) + 1;
  if (HIWORD(v15))
  {
    int v14 = 4;
    if (v9 >= a2) {
      goto LABEL_21;
    }
  }
  else
  {
    if (v15 >= 0x100) {
      int v14 = 2;
    }
    else {
      int v14 = v15 > 1;
    }
    if (v9 >= a2)
    {
LABEL_21:
      switch(v14)
      {
        case 1:
          a1[v13] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_26;
        case 2:
          *(_WORD *)&a1[v13] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_26;
        case 3:
          goto LABEL_57;
        case 4:
          *(_DWORD *)&a1[v13] = 0;
          goto LABEL_25;
        default:
LABEL_25:
          if (a2)
          {
LABEL_26:
            uint64_t v11 = v10 | 7;
            unint64_t v19 = (((((unint64_t)(a1 + 17) & 0xFFFFFFFFFFFFFFF8) + 17) & 0xFFFFFFFFFFFFFFF8) + v11 + 9) & ~v11;
            if (a2 + 1 <= v8)
            {
              if (a2 != -1)
              {
                uint64_t v23 = (void *)((v19 + 15) & 0xFFFFFFFFFFFFFFF8);
                if ((v7 & 0x80000000) != 0)
                {
                  uint64_t v25 = *(void (**)(unint64_t, uint64_t))(v6 + 56);
                  uint64_t v26 = a2 + 1;
                  v25(((unint64_t)v23 + v10 + 8) & ~v10, v26);
                }
                else
                {
                  if (((a2 + 1) & 0x80000000) != 0) {
                    uint64_t v24 = a2 - 0x7FFFFFFF;
                  }
                  else {
                    uint64_t v24 = a2;
                  }
                  *uint64_t v23 = v24;
                }
              }
            }
            else
            {
              if (v12 <= 3) {
                int v20 = ~(-1 << (8 * v12));
              }
              else {
                int v20 = -1;
              }
              if (v12)
              {
                int v21 = v20 & (a2 - v8);
                if (v12 <= 3) {
                  int v22 = v12;
                }
                else {
                  int v22 = 4;
                }
                bzero((void *)((((((unint64_t)(a1 + 17) & 0xFFFFFFFFFFFFFFF8) + 17) & 0xFFFFFFFFFFFFFFF8)+ v11+ 9) & ~v11), v12);
                switch(v22)
                {
                  case 2:
                    *(_WORD *)unint64_t v19 = v21;
                    break;
                  case 3:
                    *(_WORD *)unint64_t v19 = v21;
                    *(unsigned char *)(v19 + 2) = BYTE2(v21);
                    break;
                  case 4:
                    *(_DWORD *)unint64_t v19 = v21;
                    break;
                  default:
                    *(unsigned char *)unint64_t v19 = v21;
                    break;
                }
              }
            }
          }
          break;
      }
      return;
    }
  }
LABEL_14:
  unsigned int v16 = a2 - v8;
  if (v13 < 4)
  {
    int v17 = (v16 >> (8 * v13)) + 1;
    if (v13)
    {
      int v18 = v16 & ~(-1 << (8 * v13));
      bzero(a1, v13);
      if (v13 == 3)
      {
        *(_WORD *)a1 = v18;
        a1[2] = BYTE2(v18);
      }
      else if (v13 == 2)
      {
        *(_WORD *)a1 = v18;
      }
      else
      {
        *a1 = v18;
      }
    }
  }
  else
  {
    bzero(a1, (((v10 | 7) + 41) & ~(v10 | 7)) + v12);
    *(_DWORD *)a1 = v16;
    int v17 = 1;
  }
  switch(v14)
  {
    case 1:
      a1[v13] = v17;
      break;
    case 2:
      *(_WORD *)&a1[v13] = v17;
      break;
    case 3:
LABEL_57:
      __break(1u);
      JUMPOUT(0x18769BEBCLL);
    case 4:
      *(_DWORD *)&a1[v13] = v17;
      break;
    default:
      return;
  }
}

unint64_t initializeBufferWithCopyOfBuffer for SidebarListBody.CollectionViewBody(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 24);
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8);
  unint64_t v7 = *(_DWORD *)(v6 + 80);
  uint64_t v8 = *(void *)(v5 - 8);
  uint64_t v9 = *(_DWORD *)(v8 + 80);
  if ((v9 | v7) <= 7
    && ((*(_DWORD *)(v8 + 80) | *(_DWORD *)(v6 + 80)) & 0x100000) == 0
    && ((v9 + 16) & ~v9)
     + *(void *)(*(void *)(v5 - 8) + 64)
     + (((v9 | 7) + *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) + ((v7 + 114) & ~v7)) & ~(v9 | 7)) <= 0x18)
  {
    uint64_t __n = ((v9 + 16) & ~v9) + *(void *)(*(void *)(v5 - 8) + 64);
    uint64_t v61 = *(void *)(v5 - 8);
    uint64_t v62 = *(void *)(a3 + 24);
    uint64_t v56 = v9 | 7;
    uint64_t v57 = ~(v9 | 7);
    uint64_t v59 = ~v9;
    uint64_t v14 = *(void *)a2;
    char v15 = *(unsigned char *)(a2 + 9);
    unsigned __int8 v16 = *(unsigned char *)(a2 + 8);
    uint64_t v53 = *(void *)(*(void *)(a3 + 16) - 8);
    uint64_t v54 = *(void *)(a3 + 16);
    int v60 = *(_DWORD *)(v8 + 84);
    uint64_t v55 = *(void *)(v53 + 64);
    outlined copy of Environment<CGFloat?>.Content(*(void *)a2, v16, v15);
    *(void *)a1 = v14;
    *(unsigned char *)(a1 + 8) = v16;
    *(unsigned char *)(a1 + 9) = v15;
    uint64_t v63 = a1;
    unint64_t v17 = (a1 + 17) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v58 = v9;
    unint64_t v18 = (a2 + 17) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v19 = *(void *)v18;
    LOBYTE(v14) = *(unsigned char *)(v18 + 9);
    unsigned __int8 v20 = *(unsigned char *)(v18 + 8);
    outlined copy of Environment<CGFloat?>.Content(*(void *)v18, v20, v14);
    *(void *)unint64_t v17 = v19;
    *(unsigned char *)(v17 + 8) = v20;
    *(unsigned char *)(v17 + 9) = v14;
    unint64_t v21 = (v17 + 17) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v22 = (v18 + 17) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v23 = *(void *)v22;
    LOBYTE(v14) = *(unsigned char *)(v22 + 8);
    outlined copy of Environment<Bool>.Content(*(void *)v22, v14);
    *(void *)unint64_t v21 = v23;
    *(unsigned char *)(v21 + 8) = v14;
    unint64_t v24 = (v17 + 33) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v25 = (v18 + 33) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v26 = *(void *)v25;
    uint64_t v27 = *(void *)(v25 + 8);
    uint64_t v28 = *(void *)(v25 + 16);
    uint64_t v29 = *(void *)(v25 + 24);
    uint64_t v31 = *(void *)(v25 + 32);
    uint64_t v30 = *(void *)(v25 + 40);
    uint64_t v32 = *(void *)(v25 + 56);
    uint64_t v50 = *(void *)(v25 + 48);
    char v51 = *(unsigned char *)(v25 + 64);
    char v52 = *(unsigned char *)(v25 + 65);
    outlined copy of Environment<ListPadding>.Content(*(void *)v25, v27, v28, v29, v31, v30, v50, v32, v51, v52);
    *(void *)unint64_t v24 = v26;
    *(void *)(v24 + 8) = v27;
    *(void *)(v24 + 16) = v28;
    *(void *)(v24 + 24) = v29;
    *(void *)(v24 + 32) = v31;
    *(void *)(v24 + 40) = v30;
    *(void *)(v24 + 48) = v50;
    *(void *)(v24 + 56) = v32;
    *(unsigned char *)(v24 + 64) = v51;
    *(unsigned char *)(v24 + 65) = v52;
    uint64_t v33 = (v25 + v7 + 66) & ~v7;
    (*(void (**)(unint64_t, uint64_t, uint64_t))(v53 + 16))((v24 + v7 + 66) & ~v7, v33, v54);
    int v34 = (void *)((((v24 + v7 + 66) & ~v7) + v55 + v56) & v57);
    uint64_t v35 = (void *)((v33 + v55 + v56) & v57);
    int v36 = (uint64_t *)(((unint64_t)v35 + 15) & 0xFFFFFFFFFFFFFFF8);
    if (v60 < 0)
    {
      uint64_t v39 = v61;
      uint64_t v38 = v62;
      int v42 = (*(uint64_t (**)(unint64_t))(v61 + 48))(((unint64_t)v36 + v58 + 8) & v59);
      uint64_t v40 = v58;
      uint64_t v41 = v59;
      if (v42)
      {
LABEL_14:
        memcpy(v34, v35, __n);
        return v63;
      }
    }
    else
    {
      uint64_t v37 = *v36;
      if ((unint64_t)*v36 >= 0xFFFFFFFF) {
        LODWORD(v37) = -1;
      }
      uint64_t v38 = v62;
      uint64_t v39 = v61;
      uint64_t v40 = v58;
      uint64_t v41 = v59;
      if (v37 != -1) {
        goto LABEL_14;
      }
    }
    *int v34 = *v35;
    uint64_t v43 = (void *)(((unint64_t)v34 + 15) & 0xFFFFFFFFFFFFFFF8);
    *uint64_t v43 = *v36;
    uint64_t v44 = v40 + 8;
    unint64_t v45 = ((unint64_t)v43 + v44) & v41;
    unint64_t v46 = ((unint64_t)v36 + v44) & v41;
    uint64_t v47 = *(void (**)(unint64_t, unint64_t, uint64_t))(v39 + 16);
    swift_retain();
    swift_retain();
    v47(v45, v46, v38);
    return v63;
  }
  uint64_t v12 = *(void *)a2;
  *(void *)a1 = *(void *)a2;
  unint64_t v13 = v12 + (((v9 | v7) & 0xF8 ^ 0x1F8) & ((v9 | v7) + 16));
  swift_retain();
  return v13;
}

uint64_t assignWithCopy for SidebarListBody.CollectionViewBody(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)a2;
  char v6 = *(unsigned char *)(a2 + 9);
  unsigned __int8 v7 = *(unsigned char *)(a2 + 8);
  outlined copy of Environment<CGFloat?>.Content(*(void *)a2, v7, v6);
  uint64_t v8 = *(void *)a1;
  char v9 = *(unsigned char *)(a1 + 9);
  *(void *)a1 = v5;
  uint64_t v10 = *(unsigned __int8 *)(a1 + 8);
  *(unsigned char *)(a1 + 8) = v7;
  *(unsigned char *)(a1 + 9) = v6;
  outlined consume of Environment<CGFloat?>.Content(v8, v10, v9);
  uint64_t v68 = a1;
  unint64_t v11 = (a1 + 17) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v12 = (a2 + 17) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v13 = *(void *)v12;
  LOBYTE(v5) = *(unsigned char *)(v12 + 9);
  unsigned __int8 v14 = *(unsigned char *)(v12 + 8);
  outlined copy of Environment<CGFloat?>.Content(*(void *)v12, v14, v5);
  uint64_t v15 = *(void *)v11;
  char v16 = *(unsigned char *)(v11 + 9);
  *(void *)unint64_t v11 = v13;
  uint64_t v17 = *(unsigned __int8 *)(v11 + 8);
  *(unsigned char *)(v11 + 8) = v14;
  *(unsigned char *)(v11 + 9) = v5;
  outlined consume of Environment<CGFloat?>.Content(v15, v17, v16);
  unint64_t v18 = (v11 + 17) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v19 = (v12 + 17) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v20 = *(void *)v19;
  LOBYTE(v5) = *(unsigned char *)(v19 + 8);
  outlined copy of Environment<Bool>.Content(*(void *)v19, v5);
  uint64_t v21 = *(void *)v18;
  char v22 = *(unsigned char *)(v18 + 8);
  *(void *)unint64_t v18 = v20;
  *(unsigned char *)(v18 + 8) = v5;
  outlined consume of Environment<Bool>.Content(v21, v22);
  unint64_t v23 = (v12 + 33) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v24 = *(void *)v23;
  uint64_t v25 = *(void *)(v23 + 8);
  unint64_t v26 = (v11 + 33) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v27 = *(void *)(v23 + 16);
  uint64_t v28 = *(void *)(v23 + 24);
  uint64_t v29 = *(void *)(v23 + 32);
  uint64_t v30 = *(void *)(v23 + 40);
  uint64_t v31 = *(void *)(v23 + 48);
  uint64_t v32 = *(void *)(v23 + 56);
  char v69 = *(unsigned char *)(v23 + 64);
  char v71 = *(unsigned char *)(v23 + 65);
  outlined copy of Environment<ListPadding>.Content(*(void *)v23, v25, v27, v28, v29, v30, v31, v32, v69, v71);
  uint64_t v33 = *(void *)v26;
  uint64_t v34 = *(void *)(v26 + 8);
  uint64_t v35 = *(void *)(v26 + 16);
  uint64_t v36 = *(void *)(v26 + 24);
  uint64_t v37 = *(void *)(v26 + 32);
  uint64_t v38 = *(void *)(v26 + 40);
  uint64_t v39 = *(void *)(v26 + 48);
  uint64_t v40 = *(void *)(v26 + 56);
  char v41 = *(unsigned char *)(v26 + 64);
  char v42 = *(unsigned char *)(v26 + 65);
  *(void *)unint64_t v26 = v24;
  *(void *)(v26 + 8) = v25;
  *(void *)(v26 + 16) = v27;
  *(void *)(v26 + 24) = v28;
  *(void *)(v26 + 32) = v29;
  *(void *)(v26 + 40) = v30;
  *(void *)(v26 + 48) = v31;
  *(void *)(v26 + 56) = v32;
  *(unsigned char *)(v26 + 64) = v69;
  *(unsigned char *)(v26 + 65) = v71;
  outlined consume of Environment<ListPadding>.Content(v33, v34, v35, v36, v37, v38, v39, v40, v41, v42);
  uint64_t v43 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v44 = v43 + 24;
  uint64_t v45 = *(unsigned __int8 *)(v43 + 80);
  uint64_t v46 = (v45 + 66 + v26) & ~v45;
  uint64_t v47 = (v45 + 66 + v23) & ~v45;
  (*(void (**)(uint64_t, uint64_t))(v43 + 24))(v46, v47);
  uint64_t v48 = *(void *)(a3 + 24);
  uint64_t v49 = *(void *)(v48 - 8);
  uint64_t v50 = *(unsigned __int8 *)(v49 + 80);
  uint64_t v51 = (v50 | 7) + *(void *)(v44 + 40);
  char v52 = (void *)((v51 + v46) & ~(v50 | 7));
  uint64_t v53 = (void *)((v51 + v47) & ~(v50 | 7));
  uint64_t v54 = *(unsigned int *)(v49 + 84);
  uint64_t v55 = ~v50;
  size_t v56 = ((v50 + 16) & ~v50) + *(void *)(v49 + 64);
  uint64_t v57 = (void *)(((unint64_t)v52 + 15) & 0xFFFFFFFFFFFFFFF8);
  if ((v54 & 0x80000000) != 0)
  {
    uint64_t v70 = ((v50 + 16) & ~v50) + *(void *)(v49 + 64);
    uint64_t v61 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v49 + 48);
    int v67 = v61(((unint64_t)v57 + v50 + 8) & ~v50, v54, v48);
    uint64_t v58 = (void *)(((unint64_t)v53 + 15) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v55 = ~v50;
    int v60 = v61(((unint64_t)v58 + v50 + 8) & ~v50, v54, v48);
    size_t v56 = v70;
    if (!v67)
    {
LABEL_5:
      if (!v60)
      {
        *char v52 = *v53;
        swift_retain();
        swift_release();
        void *v57 = *v58;
        swift_retain();
        swift_release();
        (*(void (**)(unint64_t, unint64_t, uint64_t))(v49 + 24))(((unint64_t)v57 + v50 + 8) & v55, ((unint64_t)v58 + v50 + 8) & v55, v48);
        return v68;
      }
      swift_release();
      swift_release();
      (*(void (**)(unint64_t, uint64_t))(v49 + 8))(((unint64_t)v57 + v50 + 8) & v55, v48);
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v58 = (void *)(((unint64_t)v53 + 15) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v59 = *v58;
    if (*v58 >= 0xFFFFFFFFuLL) {
      LODWORD(v59) = -1;
    }
    int v60 = v59 + 1;
    if (*v57 > 0xFFFFFFFEuLL) {
      goto LABEL_5;
    }
  }
  if (!v60)
  {
    *char v52 = *v53;
    void *v57 = *v58;
    uint64_t v62 = v55;
    uint64_t v63 = ((unint64_t)v57 + v50 + 8) & v55;
    uint64_t v64 = ((unint64_t)v58 + v50 + 8) & v62;
    uint64_t v65 = *(void (**)(uint64_t, uint64_t, uint64_t))(v49 + 16);
    swift_retain();
    swift_retain();
    v65(v63, v64, v48);
    return v68;
  }
LABEL_9:
  memcpy(v52, v53, v56);
  return v68;
}

uint64_t initializeWithTake for SidebarListBody.CollectionViewBody(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(_WORD *)(a1 + 8) = *(_WORD *)(a2 + 8);
  unint64_t v5 = (a1 + 17) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v6 = (a2 + 17) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v7 = *(void *)v6;
  *(_WORD *)(v5 + 8) = *(_WORD *)(v6 + 8);
  *(void *)unint64_t v5 = v7;
  unint64_t v8 = (v5 + 17) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v9 = (v6 + 17) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v10 = *(void *)v9;
  *(unsigned char *)(v8 + 8) = *(unsigned char *)(v9 + 8);
  *(void *)unint64_t v8 = v10;
  unint64_t v11 = (v5 + 33) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v12 = (v6 + 33) & 0xFFFFFFFFFFFFFFF8;
  long long v14 = *(_OWORD *)(v12 + 32);
  long long v13 = *(_OWORD *)(v12 + 48);
  long long v15 = *(_OWORD *)(v12 + 16);
  *(_WORD *)(v11 + 64) = *(_WORD *)(v12 + 64);
  *(_OWORD *)(v11 + 32) = v14;
  *(_OWORD *)(v11 + 48) = v13;
  *(_OWORD *)(v11 + 16) = v15;
  *(_OWORD *)unint64_t v11 = *(_OWORD *)v12;
  uint64_t v16 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v17 = v16 + 32;
  uint64_t v18 = *(unsigned __int8 *)(v16 + 80);
  uint64_t v19 = (v18 + 66 + v11) & ~v18;
  uint64_t v20 = (v18 + 66 + v12) & ~v18;
  (*(void (**)(uint64_t, uint64_t))(v16 + 32))(v19, v20);
  uint64_t v21 = *(void *)(v17 + 32);
  uint64_t v22 = *(void *)(a3 + 24);
  uint64_t v23 = *(void *)(v22 - 8);
  uint64_t v24 = *(unsigned __int8 *)(v23 + 80);
  uint64_t v25 = (v24 | 7) + v21;
  unint64_t v26 = (char *)((v25 + v19) & ~(v24 | 7));
  uint64_t v27 = (void *)((v25 + v20) & ~(v24 | 7));
  uint64_t v28 = ~v24;
  uint64_t v29 = *(void *)(v23 + 64);
  uint64_t v30 = (uint64_t *)(((unint64_t)v27 + 15) & 0xFFFFFFFFFFFFFFF8);
  if ((*(_DWORD *)(v23 + 84) & 0x80000000) == 0)
  {
    uint64_t v31 = *v30;
    if ((unint64_t)*v30 >= 0xFFFFFFFF) {
      LODWORD(v31) = -1;
    }
    if (v31 != -1) {
      goto LABEL_5;
    }
LABEL_7:
    *(void *)unint64_t v26 = *v27;
    unint64_t v32 = (unint64_t)(v26 + 15);
    *(void *)(v32 & 0xFFFFFFFFFFFFFFF8) = *v30;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v23 + 32))((v24 + 8 + (v32 & 0xFFFFFFFFFFFFFFF8)) & v28, ((unint64_t)v30 + v24 + 8) & v28, v22);
    return a1;
  }
  if (!(*(unsigned int (**)(unint64_t))(v23 + 48))(((unint64_t)v30 + v24 + 8) & v28)) {
    goto LABEL_7;
  }
LABEL_5:
  memcpy(v26, v27, ((v24 + 16) & ~v24) + v29);
  return a1;
}

uint64_t assignWithTake for SidebarListBody.CollectionViewBody(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v6 = *(unsigned char *)(a2 + 8);
  char v7 = *(unsigned char *)(a2 + 9);
  uint64_t v8 = *(void *)a1;
  char v9 = *(unsigned char *)(a1 + 9);
  *(void *)a1 = *(void *)a2;
  uint64_t v10 = *(unsigned __int8 *)(a1 + 8);
  *(unsigned char *)(a1 + 8) = v6;
  *(unsigned char *)(a1 + 9) = v7;
  outlined consume of Environment<CGFloat?>.Content(v8, v10, v9);
  unint64_t v11 = (a1 + 17) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v12 = (a2 + 17) & 0xFFFFFFFFFFFFFFF8;
  char v13 = *(unsigned char *)(v12 + 8);
  char v14 = *(unsigned char *)(v12 + 9);
  uint64_t v15 = *(void *)v11;
  char v16 = *(unsigned char *)(v11 + 9);
  *(void *)unint64_t v11 = *(void *)v12;
  uint64_t v17 = *(unsigned __int8 *)(v11 + 8);
  *(unsigned char *)(v11 + 8) = v13;
  *(unsigned char *)(v11 + 9) = v14;
  outlined consume of Environment<CGFloat?>.Content(v15, v17, v16);
  unint64_t v18 = (v11 + 17) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v19 = (v12 + 17) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v20 = *(void *)v19;
  LOBYTE(v19) = *(unsigned char *)(v19 + 8);
  uint64_t v21 = *(void *)v18;
  char v22 = *(unsigned char *)(v18 + 8);
  *(void *)unint64_t v18 = v20;
  *(unsigned char *)(v18 + 8) = v19;
  outlined consume of Environment<Bool>.Content(v21, v22);
  unint64_t v23 = (v12 + 33) & 0xFFFFFFFFFFFFFFF8;
  char v24 = *(unsigned char *)(v23 + 64);
  char v25 = *(unsigned char *)(v23 + 65);
  unint64_t v26 = (v11 + 33) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v27 = *(void *)v26;
  uint64_t v28 = *(void *)(v26 + 8);
  uint64_t v29 = *(void *)(v26 + 16);
  uint64_t v30 = *(void *)(v26 + 24);
  uint64_t v31 = *(void *)(v26 + 32);
  uint64_t v32 = *(void *)(v26 + 40);
  uint64_t v33 = *(void *)(v26 + 48);
  uint64_t v34 = *(void *)(v26 + 56);
  char v35 = *(unsigned char *)(v26 + 64);
  char v36 = *(unsigned char *)(v26 + 65);
  long long v37 = *(_OWORD *)(v23 + 16);
  long long v38 = *(_OWORD *)(v23 + 32);
  long long v39 = *(_OWORD *)(v23 + 48);
  *(_OWORD *)unint64_t v26 = *(_OWORD *)v23;
  *(_OWORD *)(v26 + 16) = v37;
  *(_OWORD *)(v26 + 32) = v38;
  *(_OWORD *)(v26 + 48) = v39;
  *(unsigned char *)(v26 + 64) = v24;
  *(unsigned char *)(v26 + 65) = v25;
  outlined consume of Environment<ListPadding>.Content(v27, v28, v29, v30, v31, v32, v33, v34, v35, v36);
  uint64_t v40 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v41 = v40 + 40;
  uint64_t v42 = *(unsigned __int8 *)(v40 + 80);
  uint64_t v43 = (v42 + 66 + v26) & ~v42;
  uint64_t v44 = (v42 + 66 + v23) & ~v42;
  (*(void (**)(uint64_t, uint64_t))(v40 + 40))(v43, v44);
  uint64_t v45 = *(void *)(a3 + 24);
  uint64_t v46 = *(void *)(v45 - 8);
  uint64_t v47 = *(unsigned __int8 *)(v46 + 80);
  uint64_t v48 = (v47 | 7) + *(void *)(v41 + 24);
  uint64_t v49 = (void *)((v48 + v43) & ~(v47 | 7));
  uint64_t v50 = (void *)((v48 + v44) & ~(v47 | 7));
  uint64_t v51 = *(unsigned int *)(v46 + 84);
  uint64_t v52 = ~v47;
  size_t v53 = ((v47 + 16) & ~v47) + *(void *)(v46 + 64);
  uint64_t v54 = (void *)(((unint64_t)v49 + 15) & 0xFFFFFFFFFFFFFFF8);
  if ((v51 & 0x80000000) != 0)
  {
    uint64_t v61 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v46 + 48);
    uint64_t v66 = ((v47 + 16) & ~v47) + *(void *)(*(void *)(v45 - 8) + 64);
    int v62 = v61(((unint64_t)v54 + v47 + 8) & ~v47, v51, v45);
    uint64_t v63 = v61;
    int v65 = v62;
    uint64_t v55 = (void *)(((unint64_t)v50 + 15) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v52 = ~v47;
    int v57 = v63(((unint64_t)v55 + v47 + 8) & ~v47, v51, v45);
    size_t v53 = v66;
    if (!v65)
    {
LABEL_5:
      if (!v57)
      {
        *uint64_t v49 = *v50;
        swift_release();
        *uint64_t v54 = *v55;
        swift_release();
        (*(void (**)(unint64_t, unint64_t, uint64_t))(v46 + 40))(((unint64_t)v54 + v47 + 8) & v52, ((unint64_t)v55 + v47 + 8) & v52, v45);
        return a1;
      }
      size_t v58 = v53;
      swift_release();
      swift_release();
      (*(void (**)(unint64_t, uint64_t))(v46 + 8))(((unint64_t)v54 + v47 + 8) & v52, v45);
      uint64_t v59 = v49;
      int v60 = v50;
      size_t v53 = v58;
      goto LABEL_10;
    }
  }
  else
  {
    uint64_t v55 = (void *)(((unint64_t)v50 + 15) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v56 = *v55;
    if (*v55 >= 0xFFFFFFFFuLL) {
      LODWORD(v56) = -1;
    }
    int v57 = v56 + 1;
    if (*v54 > 0xFFFFFFFEuLL) {
      goto LABEL_5;
    }
  }
  if (!v57)
  {
    *uint64_t v49 = *v50;
    *uint64_t v54 = *v55;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v46 + 32))(((unint64_t)v54 + v47 + 8) & v52, ((unint64_t)v55 + v47 + 8) & v52, v45);
    return a1;
  }
  uint64_t v59 = v49;
  int v60 = v50;
LABEL_10:
  memcpy(v59, v60, v53);
  return a1;
}

uint64_t getEnumTagSinglePayload for SidebarListBody.CollectionViewBody(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(unsigned int *)(v5 + 84);
  uint64_t v7 = *(void *)(*(void *)(a3 + 24) - 8);
  uint64_t v8 = v7;
  unsigned int v9 = *(_DWORD *)(v7 + 84);
  if (v9 <= 0x7FFFFFFF) {
    int v10 = 0x7FFFFFFF;
  }
  else {
    int v10 = *(_DWORD *)(v7 + 84);
  }
  unsigned int v11 = v10 - 1;
  uint64_t v12 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v13 = *(void *)(*(void *)(v4 - 8) + 64);
  uint64_t v14 = *(unsigned __int8 *)(v7 + 80);
  if (v6 <= v11) {
    unsigned int v15 = v11;
  }
  else {
    unsigned int v15 = *(_DWORD *)(v5 + 84);
  }
  if (!a2) {
    return 0;
  }
  uint64_t v16 = v14 | 7;
  int v17 = a2 - v15;
  if (a2 <= v15) {
    goto LABEL_28;
  }
  uint64_t v18 = ((v14 + 16) & ~v14)
      + *(void *)(*(void *)(*(void *)(a3 + 24) - 8) + 64)
      + ((v16 + v13 + ((v12 + 114) & ~v12)) & ~v16);
  char v19 = 8 * v18;
  if (v18 <= 3)
  {
    unsigned int v22 = ((v17 + ~(-1 << v19)) >> v19) + 1;
    if (HIWORD(v22))
    {
      int v20 = *(_DWORD *)((char *)a1 + v18);
      if (!v20) {
        goto LABEL_28;
      }
      goto LABEL_18;
    }
    if (v22 > 0xFF)
    {
      int v20 = *(unsigned __int16 *)((char *)a1 + v18);
      if (!*(unsigned __int16 *)((char *)a1 + v18)) {
        goto LABEL_28;
      }
      goto LABEL_18;
    }
    if (v22 < 2)
    {
LABEL_28:
      unint64_t v26 = ((((((unint64_t)a1 + 17) & 0xFFFFFFFFFFFFFFF8) + 33) & 0xFFFFFFFFFFFFFFF8) + v12 + 66) & ~v12;
      if (v6 >= v11)
      {
        uint64_t v30 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v5 + 48);
        return v30(v26, v6, v4);
      }
      else
      {
        uint64_t v27 = (unint64_t *)((((v26 + v13 + v16) & ~v16) + 15) & 0xFFFFFFFFFFFFFFF8);
        if ((v9 & 0x80000000) != 0)
        {
          unsigned int v29 = (*(uint64_t (**)(unint64_t))(v8 + 48))(((unint64_t)v27 + v14 + 8) & ~v14);
        }
        else
        {
          unint64_t v28 = *v27;
          if (v28 >= 0xFFFFFFFF) {
            LODWORD(v28) = -1;
          }
          unsigned int v29 = v28 + 1;
        }
        if (v29 >= 2) {
          return v29 - 1;
        }
        else {
          return 0;
        }
      }
    }
  }
  int v20 = *((unsigned __int8 *)a1 + v18);
  if (!*((unsigned char *)a1 + v18)) {
    goto LABEL_28;
  }
LABEL_18:
  int v23 = (v20 - 1) << v19;
  if (v18 > 3) {
    int v23 = 0;
  }
  if (v18)
  {
    if (v18 <= 3) {
      int v24 = ((v14 + 16) & ~v14)
    }
          + *(_DWORD *)(*(void *)(*(void *)(a3 + 24) - 8) + 64)
          + ((v16 + v13 + ((v12 + 114) & ~v12)) & ~v16);
    else {
      int v24 = 4;
    }
    switch(v24)
    {
      case 2:
        int v25 = *a1;
        break;
      case 3:
        int v25 = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        int v25 = *(_DWORD *)a1;
        break;
      default:
        int v25 = *(unsigned __int8 *)a1;
        break;
    }
  }
  else
  {
    int v25 = 0;
  }
  return v15 + (v25 | v23) + 1;
}

void storeEnumTagSinglePayload for SidebarListBody.CollectionViewBody(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  uint64_t v8 = *(void *)(*(void *)(a4 + 24) - 8);
  unsigned int v9 = *(_DWORD *)(v8 + 84);
  uint64_t v10 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v11 = *(void *)(v6 + 64);
  uint64_t v12 = *(unsigned __int8 *)(v8 + 80);
  if (v9 <= 0x7FFFFFFF) {
    unsigned int v13 = 0x7FFFFFFF;
  }
  else {
    unsigned int v13 = *(_DWORD *)(v8 + 84);
  }
  unsigned int v14 = v13 - 1;
  if (v7 <= v13 - 1) {
    unsigned int v15 = v13 - 1;
  }
  else {
    unsigned int v15 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v16 = v12 | 7;
  size_t v17 = ((v12 + 16) & ~v12) + *(void *)(v8 + 64);
  size_t v18 = (((v12 | 7) + v11 + ((v10 + 114) & ~v10)) & ~(v12 | 7)) + v17;
  BOOL v19 = a3 >= v15;
  unsigned int v20 = a3 - v15;
  if (v20 != 0 && v19)
  {
    if (v18 <= 3)
    {
      unsigned int v25 = ((v20 + ~(-1 << (8 * v18))) >> (8 * v18)) + 1;
      if (HIWORD(v25))
      {
        int v21 = 4;
      }
      else if (v25 >= 0x100)
      {
        int v21 = 2;
      }
      else
      {
        int v21 = v25 > 1;
      }
    }
    else
    {
      int v21 = 1;
    }
  }
  else
  {
    int v21 = 0;
  }
  if (v15 < a2)
  {
    unsigned int v22 = ~v15 + a2;
    if (v18 < 4)
    {
      int v23 = (v22 >> (8 * v18)) + 1;
      if (v18)
      {
        int v26 = v22 & ~(-1 << (8 * v18));
        bzero(a1, v18);
        if (v18 == 3)
        {
          *(_WORD *)a1 = v26;
          a1[2] = BYTE2(v26);
        }
        else if (v18 == 2)
        {
          *(_WORD *)a1 = v26;
        }
        else
        {
          *a1 = v26;
        }
      }
    }
    else
    {
      bzero(a1, v18);
      *(_DWORD *)a1 = v22;
      int v23 = 1;
    }
    switch(v21)
    {
      case 1:
        a1[v18] = v23;
        return;
      case 2:
        *(_WORD *)&a1[v18] = v23;
        return;
      case 3:
        goto LABEL_72;
      case 4:
        *(_DWORD *)&a1[v18] = v23;
        return;
      default:
        return;
    }
  }
  uint64_t v24 = ~v16;
  switch(v21)
  {
    case 1:
      a1[v18] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_27;
    case 2:
      *(_WORD *)&a1[v18] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_27;
    case 3:
LABEL_72:
      __break(1u);
      JUMPOUT(0x18769D394);
    case 4:
      *(_DWORD *)&a1[v18] = 0;
      goto LABEL_26;
    default:
LABEL_26:
      if (a2)
      {
LABEL_27:
        unint64_t v27 = (((((unint64_t)(a1 + 17) & 0xFFFFFFFFFFFFFFF8) + 33) & 0xFFFFFFFFFFFFFFF8) + v10 + 66) & ~v10;
        if (v7 >= v14)
        {
          uint64_t v32 = *(void (**)(unint64_t))(v6 + 56);
          v32(v27);
        }
        else
        {
          unint64_t v28 = (v27 + v11 + v16) & v24;
          if (v14 >= a2)
          {
            if (a2 + 1 <= v13)
            {
              if (a2 != -1)
              {
                char v35 = (void *)((v28 + 15) & 0xFFFFFFFFFFFFFFF8);
                if ((v9 & 0x80000000) != 0)
                {
                  long long v37 = *(void (**)(unint64_t, uint64_t))(v8 + 56);
                  uint64_t v38 = a2 + 1;
                  v37(((unint64_t)v35 + v12 + 8) & ~v12, v38);
                }
                else
                {
                  if (((a2 + 1) & 0x80000000) != 0) {
                    uint64_t v36 = a2 - 0x7FFFFFFF;
                  }
                  else {
                    uint64_t v36 = a2;
                  }
                  *char v35 = v36;
                }
              }
            }
            else
            {
              if (v17 <= 3) {
                int v33 = ~(-1 << (8 * v17));
              }
              else {
                int v33 = -1;
              }
              if (v17)
              {
                int v30 = v33 & (a2 - v13);
                if (v17 <= 3) {
                  int v34 = v17;
                }
                else {
                  int v34 = 4;
                }
                bzero((void *)((v27 + v11 + v16) & v24), v17);
                switch(v34)
                {
                  case 2:
LABEL_64:
                    *(_WORD *)unint64_t v28 = v30;
                    break;
                  case 3:
LABEL_65:
                    *(_WORD *)unint64_t v28 = v30;
                    *(unsigned char *)(v28 + 2) = BYTE2(v30);
                    break;
                  case 4:
LABEL_66:
                    *(_DWORD *)unint64_t v28 = v30;
                    break;
                  default:
LABEL_52:
                    *(unsigned char *)unint64_t v28 = v30;
                    break;
                }
              }
            }
          }
          else
          {
            if (v17 <= 3) {
              int v29 = ~(-1 << (8 * v17));
            }
            else {
              int v29 = -1;
            }
            if (v17)
            {
              int v30 = v29 & (a2 - v13);
              if (v17 <= 3) {
                int v31 = v17;
              }
              else {
                int v31 = 4;
              }
              bzero((void *)((v27 + v11 + v16) & v24), v17);
              switch(v31)
              {
                case 2:
                  goto LABEL_64;
                case 3:
                  goto LABEL_65;
                case 4:
                  goto LABEL_66;
                default:
                  goto LABEL_52;
              }
            }
          }
        }
      }
      return;
  }
}

void type metadata accessor for CGColorRef(uint64_t a1)
{
}

void type metadata accessor for UIPageControlBackgroundStyle(uint64_t a1)
{
}

void type metadata accessor for UIMenuIdentifier(uint64_t a1)
{
}

void type metadata accessor for UIDropOperation(uint64_t a1)
{
}

void type metadata accessor for UITableViewStyle(uint64_t a1)
{
}

void type metadata accessor for NSComparisonResult(uint64_t a1)
{
}

uint64_t sub_18769D454()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for Equatable in UITableViewStyle()
{
  return lazy protocol witness table accessor for type NSRunLoopMode and conformance NSRunLoopMode(&lazy protocol witness table cache variable for type UITableViewStyle and conformance UITableViewStyle, type metadata accessor for UITableViewStyle);
}

uint64_t base witness table accessor for RawRepresentable in UIMenuIdentifier()
{
  return lazy protocol witness table accessor for type NSRunLoopMode and conformance NSRunLoopMode(&lazy protocol witness table cache variable for type UIMenuIdentifier and conformance UIMenuIdentifier, type metadata accessor for UIMenuIdentifier);
}

uint64_t base witness table accessor for _HasCustomAnyHashableRepresentation in UIMenuIdentifier()
{
  return lazy protocol witness table accessor for type NSRunLoopMode and conformance NSRunLoopMode(&lazy protocol witness table cache variable for type UIMenuIdentifier and conformance UIMenuIdentifier, type metadata accessor for UIMenuIdentifier);
}

uint64_t instantiation function for generic protocol witness table for SidebarListBody<A, B>.TableViewRoot(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t base witness table accessor for RawRepresentable in NSNotificationName()
{
  return lazy protocol witness table accessor for type NSRunLoopMode and conformance NSRunLoopMode(&lazy protocol witness table cache variable for type NSNotificationName and conformance NSNotificationName, type metadata accessor for NSNotificationName);
}

uint64_t base witness table accessor for _HasCustomAnyHashableRepresentation in NSNotificationName()
{
  return lazy protocol witness table accessor for type NSRunLoopMode and conformance NSRunLoopMode(&lazy protocol witness table cache variable for type NSNotificationName and conformance NSNotificationName, type metadata accessor for NSNotificationName);
}

uint64_t base witness table accessor for Equatable in NSNotificationName()
{
  return lazy protocol witness table accessor for type NSRunLoopMode and conformance NSRunLoopMode(&lazy protocol witness table cache variable for type NSNotificationName and conformance NSNotificationName, type metadata accessor for NSNotificationName);
}

uint64_t base witness table accessor for RawRepresentable in NSURLResourceKey()
{
  return lazy protocol witness table accessor for type NSRunLoopMode and conformance NSRunLoopMode(&lazy protocol witness table cache variable for type NSURLResourceKey and conformance NSURLResourceKey, type metadata accessor for NSURLResourceKey);
}

uint64_t base witness table accessor for _HasCustomAnyHashableRepresentation in NSURLResourceKey()
{
  return lazy protocol witness table accessor for type NSRunLoopMode and conformance NSRunLoopMode(&lazy protocol witness table cache variable for type NSURLResourceKey and conformance NSURLResourceKey, type metadata accessor for NSURLResourceKey);
}

uint64_t base witness table accessor for RawRepresentable in AXSwiftUITraits()
{
  return lazy protocol witness table accessor for type NSRunLoopMode and conformance NSRunLoopMode(&lazy protocol witness table cache variable for type AXSwiftUITraits and conformance AXSwiftUITraits, type metadata accessor for AXSwiftUITraits);
}

uint64_t base witness table accessor for _HasCustomAnyHashableRepresentation in AXSwiftUITraits()
{
  return lazy protocol witness table accessor for type NSRunLoopMode and conformance NSRunLoopMode(&lazy protocol witness table cache variable for type AXSwiftUITraits and conformance AXSwiftUITraits, type metadata accessor for AXSwiftUITraits);
}

uint64_t base witness table accessor for Equatable in AXSwiftUITraits()
{
  return lazy protocol witness table accessor for type NSRunLoopMode and conformance NSRunLoopMode(&lazy protocol witness table cache variable for type AXSwiftUITraits and conformance AXSwiftUITraits, type metadata accessor for AXSwiftUITraits);
}

uint64_t base witness table accessor for RawRepresentable in NSKeyValueChangeKey()
{
  return lazy protocol witness table accessor for type NSRunLoopMode and conformance NSRunLoopMode(&lazy protocol witness table cache variable for type NSKeyValueChangeKey and conformance NSKeyValueChangeKey, type metadata accessor for NSKeyValueChangeKey);
}

uint64_t base witness table accessor for _HasCustomAnyHashableRepresentation in NSKeyValueChangeKey()
{
  return lazy protocol witness table accessor for type NSRunLoopMode and conformance NSRunLoopMode(&lazy protocol witness table cache variable for type NSKeyValueChangeKey and conformance NSKeyValueChangeKey, type metadata accessor for NSKeyValueChangeKey);
}

uint64_t base witness table accessor for RawRepresentable in UIActivityType()
{
  return lazy protocol witness table accessor for type NSRunLoopMode and conformance NSRunLoopMode(&lazy protocol witness table cache variable for type UIActivityType and conformance UIActivityType, type metadata accessor for UIActivityType);
}

uint64_t base witness table accessor for _HasCustomAnyHashableRepresentation in UIActivityType()
{
  return lazy protocol witness table accessor for type NSRunLoopMode and conformance NSRunLoopMode(&lazy protocol witness table cache variable for type UIActivityType and conformance UIActivityType, type metadata accessor for UIActivityType);
}

uint64_t base witness table accessor for Equatable in UIActivityType()
{
  return lazy protocol witness table accessor for type NSRunLoopMode and conformance NSRunLoopMode(&lazy protocol witness table cache variable for type UIActivityType and conformance UIActivityType, type metadata accessor for UIActivityType);
}

uint64_t base witness table accessor for RawRepresentable in UIApplicationLaunchOptionsKey()
{
  return lazy protocol witness table accessor for type NSRunLoopMode and conformance NSRunLoopMode(&lazy protocol witness table cache variable for type UIApplicationLaunchOptionsKey and conformance UIApplicationLaunchOptionsKey, type metadata accessor for UIApplicationLaunchOptionsKey);
}

uint64_t base witness table accessor for _HasCustomAnyHashableRepresentation in UIApplicationLaunchOptionsKey()
{
  return lazy protocol witness table accessor for type NSRunLoopMode and conformance NSRunLoopMode(&lazy protocol witness table cache variable for type UIApplicationLaunchOptionsKey and conformance UIApplicationLaunchOptionsKey, type metadata accessor for UIApplicationLaunchOptionsKey);
}

uint64_t base witness table accessor for RawRepresentable in _UIImageNamedColorStyle()
{
  return lazy protocol witness table accessor for type NSRunLoopMode and conformance NSRunLoopMode(&lazy protocol witness table cache variable for type _UIImageNamedColorStyle and conformance _UIImageNamedColorStyle, type metadata accessor for _UIImageNamedColorStyle);
}

uint64_t base witness table accessor for _HasCustomAnyHashableRepresentation in _UIImageNamedColorStyle()
{
  return lazy protocol witness table accessor for type NSRunLoopMode and conformance NSRunLoopMode(&lazy protocol witness table cache variable for type _UIImageNamedColorStyle and conformance _UIImageNamedColorStyle, type metadata accessor for _UIImageNamedColorStyle);
}

uint64_t base witness table accessor for RawRepresentable in UIApplicationOpenExternalURLOptionsKey()
{
  return lazy protocol witness table accessor for type NSRunLoopMode and conformance NSRunLoopMode(&lazy protocol witness table cache variable for type UIApplicationOpenExternalURLOptionsKey and conformance UIApplicationOpenExternalURLOptionsKey, type metadata accessor for UIApplicationOpenExternalURLOptionsKey);
}

uint64_t base witness table accessor for _HasCustomAnyHashableRepresentation in UIApplicationOpenExternalURLOptionsKey()
{
  return lazy protocol witness table accessor for type NSRunLoopMode and conformance NSRunLoopMode(&lazy protocol witness table cache variable for type UIApplicationOpenExternalURLOptionsKey and conformance UIApplicationOpenExternalURLOptionsKey, type metadata accessor for UIApplicationOpenExternalURLOptionsKey);
}

uint64_t base witness table accessor for Equatable in UIApplicationOpenExternalURLOptionsKey()
{
  return lazy protocol witness table accessor for type NSRunLoopMode and conformance NSRunLoopMode((unint64_t *)&lazy protocol witness table cache variable for type UIApplicationOpenExternalURLOptionsKey and conformance UIApplicationOpenExternalURLOptionsKey, type metadata accessor for UIApplicationOpenExternalURLOptionsKey);
}

uint64_t base witness table accessor for Equatable in UIKeyboardHIDUsage()
{
  return lazy protocol witness table accessor for type NSRunLoopMode and conformance NSRunLoopMode((unint64_t *)&lazy protocol witness table cache variable for type UIKeyboardHIDUsage and conformance UIKeyboardHIDUsage, type metadata accessor for UIKeyboardHIDUsage);
}

uint64_t base witness table accessor for Equatable in NSKeyValueChangeKey()
{
  return lazy protocol witness table accessor for type NSRunLoopMode and conformance NSRunLoopMode(&lazy protocol witness table cache variable for type NSKeyValueChangeKey and conformance NSKeyValueChangeKey, type metadata accessor for NSKeyValueChangeKey);
}

uint64_t base witness table accessor for Equatable in NSURLResourceKey()
{
  return lazy protocol witness table accessor for type NSRunLoopMode and conformance NSRunLoopMode((unint64_t *)&lazy protocol witness table cache variable for type NSURLResourceKey and conformance NSURLResourceKey, type metadata accessor for NSURLResourceKey);
}

uint64_t base witness table accessor for Equatable in UIMenuIdentifier()
{
  return lazy protocol witness table accessor for type NSRunLoopMode and conformance NSRunLoopMode((unint64_t *)&lazy protocol witness table cache variable for type UIMenuIdentifier and conformance UIMenuIdentifier, type metadata accessor for UIMenuIdentifier);
}

uint64_t associated type witness table accessor for _VariadicView_ViewRoot.Body : View in SidebarListBody<A, B>.TableViewRoot()
{
  return associated type witness table accessor for View.Body : View in SidebarListBody<A, B>();
}

void type metadata accessor for UIAccessibilityTextualContext(uint64_t a1)
{
}

void type metadata accessor for UISplitViewControllerSplitBehavior(uint64_t a1)
{
}

void type metadata accessor for UIButtonType(uint64_t a1)
{
}

void type metadata accessor for UINotificationFeedbackType(uint64_t a1)
{
}

void type metadata accessor for UITableViewCellSeparatorStyle(uint64_t a1)
{
}

void type metadata accessor for UITextBorderStyle(uint64_t a1)
{
}

uint64_t sub_18769DDEC()
{
  return swift_getWitnessTable();
}

_UNKNOWN **sub_18769DE64()
{
  return &protocol witness table for TableViewListCore<A, B>;
}

uint64_t base witness table accessor for Equatable in UITableViewCellSeparatorStyle()
{
  return lazy protocol witness table accessor for type NSRunLoopMode and conformance NSRunLoopMode(&lazy protocol witness table cache variable for type UITableViewCellSeparatorStyle and conformance UITableViewCellSeparatorStyle, type metadata accessor for UITableViewCellSeparatorStyle);
}

uint64_t base witness table accessor for RawRepresentable in UIAccessibilityTextualContext()
{
  return lazy protocol witness table accessor for type NSRunLoopMode and conformance NSRunLoopMode(&lazy protocol witness table cache variable for type UIAccessibilityTextualContext and conformance UIAccessibilityTextualContext, type metadata accessor for UIAccessibilityTextualContext);
}

uint64_t base witness table accessor for _HasCustomAnyHashableRepresentation in UIAccessibilityTextualContext()
{
  return lazy protocol witness table accessor for type NSRunLoopMode and conformance NSRunLoopMode(&lazy protocol witness table cache variable for type UIAccessibilityTextualContext and conformance UIAccessibilityTextualContext, type metadata accessor for UIAccessibilityTextualContext);
}

uint64_t base witness table accessor for Equatable in UIAccessibilityTextualContext()
{
  return lazy protocol witness table accessor for type NSRunLoopMode and conformance NSRunLoopMode(&lazy protocol witness table cache variable for type UIAccessibilityTextualContext and conformance UIAccessibilityTextualContext, type metadata accessor for UIAccessibilityTextualContext);
}

void type metadata accessor for UITableViewRowAnimation(uint64_t a1)
{
}

uint64_t View.accessibilityValue(_:isEnabled:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7)
{
  outlined copy of Text.Storage(a1, a2, a3 & 1);
  swift_bridgeObjectRetain();
  AccessibilityValueStorage.init(description:)();
  View.accessibility<A>(_:_:isEnabled:)(MEMORY[0x1E4F40B98], (uint64_t)v11, a5, a6, MEMORY[0x1E4F40B98], a7);
  return outlined destroy of AccessibilityValueStorage?((uint64_t)v11, &lazy cache variable for type metadata for AccessibilityValueStorage?);
}

uint64_t View.accessibilityValue(_:isEnabled:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return View.accessibilityValue(_:isEnabled:)(a1, a2, a3, a4, a5, a6, a7, (void (*)(uint64_t, uint64_t))View.accessibilityValue(_:isEnabled:));
}

uint64_t View.accessibilityValue<A>(_:isEnabled:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return View.accessibilityValue<A>(_:isEnabled:)(a1, a2, a3, a4, a5, a6, (void (*)(void))View.accessibilityValue(_:isEnabled:));
}

uint64_t ModifiedContent<>.accessibilityValue<A>(_:isEnabled:)@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  double v7 = MEMORY[0x1F4188790](a1);
  (*(void (**)(char *, double))(v9 + 16))((char *)&v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), v7);
  uint64_t v10 = Text.init<A>(_:)();
  uint64_t v12 = v11;
  char v14 = v13 & 1;
  ModifiedContent<>.accessibilityValue(_:isEnabled:)(v10, v11, v13 & 1, a2, a3, a4);
  outlined consume of Text.Storage(v10, v12, v14);
  return swift_bridgeObjectRelease();
}

uint64_t TabContent.accessibilityValue(_:isEnabled:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, int a4@<W4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X8>)
{
  outlined copy of Text.Storage(a1, a2, a3 & 1);
  swift_bridgeObjectRetain();
  AccessibilityValueStorage.init(description:)();
  lazy protocol witness table accessor for type AccessibilityValueStorage? and conformance <A> A?();
  TabContent.accessibility<A>(_:_:isEnabled:)((uint64_t)v12, a4, a5, a6, a7);
  return outlined destroy of AccessibilityValueStorage?((uint64_t)v12, &lazy cache variable for type metadata for AccessibilityValueStorage?);
}

uint64_t TabContent.accessibilityValue(_:isEnabled:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return View.accessibilityValue(_:isEnabled:)(a1, a2, a3, a4, a5, a6, a7, (void (*)(uint64_t, uint64_t))TabContent.accessibilityValue(_:isEnabled:));
}

uint64_t View.accessibilityValue(_:isEnabled:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void (*a8)(uint64_t, uint64_t))
{
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v9 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v11 = v10;
  char v13 = v12 & 1;
  a8(v9, v10);
  outlined consume of Text.Storage(v9, v11, v13);

  return swift_bridgeObjectRelease();
}

uint64_t TabContent.accessibilityValue<A>(_:isEnabled:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return View.accessibilityValue<A>(_:isEnabled:)(a1, a2, a3, a4, a5, a6, (void (*)(void))TabContent.accessibilityValue(_:isEnabled:));
}

uint64_t View.accessibilityValue<A>(_:isEnabled:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void (*a7)(void))
{
  double v8 = MEMORY[0x1F4188790](a1);
  (*(void (**)(char *, double))(v10 + 16))((char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), v8);
  uint64_t v11 = Text.init<A>(_:)();
  uint64_t v13 = v12;
  char v15 = v14 & 1;
  a7();
  outlined consume of Text.Storage(v11, v13, v15);
  return swift_bridgeObjectRelease();
}

uint64_t View.accessibilityValue(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v8 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v10 = v9;
  char v12 = v11 & 1;
  View.accessibilityValue(_:)(v8, v9, v11 & 1, v13, a5, a6);
  outlined consume of Text.Storage(v8, v10, v12);

  return swift_bridgeObjectRelease();
}

uint64_t ModifiedContent<>.accessibilityValue(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  outlined copy of Text.Storage(a1, a2, a3 & 1);
  swift_bridgeObjectRetain();
  AccessibilityValueStorage.init(description:)();
  ModifiedContent<>.accessibilityValue(_:)((uint64_t)v8, a4, a5);
  return outlined destroy of AccessibilityValueStorage((uint64_t)v8);
}

uint64_t ModifiedContent<>.accessibilityValue(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  outlined init with copy of AccessibilityValueStorage(a1, (uint64_t)v7);
  unint64_t v5 = lazy protocol witness table accessor for type AccessibilityValueStorage? and conformance <A> A?();
  ModifiedContent<>.update<A>(_:combining:isEnabled:)(MEMORY[0x1E4F40B98], (uint64_t)v7, 1, a2, MEMORY[0x1E4F40B98], MEMORY[0x1E4F40B90], v5, a3);
  return outlined destroy of AccessibilityValueStorage?((uint64_t)v7, &lazy cache variable for type metadata for AccessibilityValueStorage?);
}

uint64_t ModifiedContent<>.accessibilityValue(_:)@<X0>(uint64_t a1@<X4>, uint64_t a2@<X8>)
{
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v4 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v6 = v5;
  char v8 = v7 & 1;
  ModifiedContent<>.accessibilityValue(_:)(v4, v5, v7 & 1, a1, a2);
  outlined consume of Text.Storage(v4, v6, v8);

  return swift_bridgeObjectRelease();
}

uint64_t ModifiedContent<>.accessibilityValue<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  double v5 = MEMORY[0x1F4188790](a1);
  (*(void (**)(char *, double))(v7 + 16))((char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v5);
  uint64_t v8 = Text.init<A>(_:)();
  uint64_t v10 = v9;
  char v12 = v11 & 1;
  ModifiedContent<>.accessibilityValue(_:)(v8, v9, v11 & 1, a2, a3);
  outlined consume of Text.Storage(v8, v10, v12);
  return swift_bridgeObjectRelease();
}

uint64_t View.accessibilityValue(percentage:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, double a4@<D0>)
{
  double v9 = a4;
  uint64_t v7 = 0;
  char v8 = 0;
  uint64_t v5 = 0x3FF0000000000000;
  char v6 = 0;
  return View.accessibilityValue<A>(_:from:to:description:)((uint64_t)&v9, (uint64_t)&v7, (uint64_t)&v5, 0, 0, 0, 0, a1, a3, MEMORY[0x1E4FBB3D0], a2, MEMORY[0x1E4FBB410]);
}

uint64_t View.accessibilityValue<A>(_:from:to:description:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, char a6@<W5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v35 = a8;
  uint64_t v29 = a2;
  uint64_t v30 = a3;
  uint64_t v34 = a9;
  uint64_t v31 = a12;
  uint64_t v32 = a7;
  uint64_t v33 = a11;
  uint64_t v16 = type metadata accessor for Optional();
  uint64_t v17 = *(void *)(v16 - 8);
  MEMORY[0x1F4188790](v16);
  BOOL v19 = (char *)&v29 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v20);
  unsigned int v22 = (char *)&v29 - v21;
  double v24 = MEMORY[0x1F4188790](v23);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v26 + 16))((char *)&v29 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0), a1, a10, v24);
  unint64_t v27 = *(void (**)(char *, uint64_t, uint64_t))(v17 + 16);
  v27(v22, v29, v16);
  v27(v19, v30, v16);
  outlined copy of Text?(a4, a5, a6, v32);
  AccessibilityValueStorage.init<A>(_:from:to:description:)();
  View.accessibilityValue(_:)((uint64_t)v36, v35, v33);
  return outlined destroy of AccessibilityValueStorage((uint64_t)v36);
}

uint64_t ModifiedContent<>.accessibilityValue(_:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  AccessibilityValueStorage.init<A>(_:description:)();
  ModifiedContent<>.accessibilityValue(_:)((uint64_t)v5, a1, a2);
  return outlined destroy of AccessibilityValueStorage((uint64_t)v5);
}

uint64_t ModifiedContent<>.accessibilityValue(percentage:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>)
{
  double v8 = a3;
  uint64_t v6 = 0;
  char v7 = 0;
  uint64_t v4 = 0x3FF0000000000000;
  char v5 = 0;
  return ModifiedContent<>.accessibilityValue<A>(_:from:to:description:)((uint64_t)&v8, (uint64_t)&v6, (uint64_t)&v4, 0, 0, 0, 0, a1, a2, MEMORY[0x1E4FBB3D0], MEMORY[0x1E4FBB410]);
}

uint64_t ModifiedContent<>.accessibilityValue<A>(_:from:to:description:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, char a6@<W5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11)
{
  uint64_t v34 = a8;
  uint64_t v32 = a7;
  uint64_t v33 = a9;
  uint64_t v29 = a2;
  uint64_t v30 = a3;
  uint64_t v31 = a11;
  uint64_t v15 = type metadata accessor for Optional();
  uint64_t v16 = *(void *)(v15 - 8);
  MEMORY[0x1F4188790](v15);
  uint64_t v18 = (char *)&v28 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v19);
  uint64_t v21 = (char *)&v28 - v20;
  double v23 = MEMORY[0x1F4188790](v22);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v25 + 16))((char *)&v28 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0), a1, a10, v23);
  uint64_t v26 = *(void (**)(char *, uint64_t, uint64_t))(v16 + 16);
  v26(v21, v29, v15);
  v26(v18, v30, v15);
  outlined copy of Text?(a4, a5, a6, v32);
  AccessibilityValueStorage.init<A>(_:from:to:description:)();
  ModifiedContent<>.accessibilityValue(_:)((uint64_t)v35, v34, v33);
  return outlined destroy of AccessibilityValueStorage((uint64_t)v35);
}

uint64_t View.accessibilityValue<A>(_:description:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10)
{
  uint64_t v24 = a8;
  v22[2] = a9;
  uint64_t v23 = a6;
  v22[1] = a10;
  uint64_t v16 = type metadata accessor for Optional();
  v17.n128_f64[0] = MEMORY[0x1F4188790](v16 - 8);
  uint64_t v19 = (char *)v22 - v18;
  uint64_t v20 = *(void *)(a7 - 8);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v20 + 16))((char *)v22 - v18, a1, a7, v17);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v20 + 56))(v19, 0, 1, a7);
  outlined copy of Text?(a2, a3, a4, a5);
  AccessibilityValueStorage.init<A>(_:description:)();
  View.accessibilityValue(_:)((uint64_t)v25, v23, v24);
  return outlined destroy of AccessibilityValueStorage((uint64_t)v25);
}

uint64_t View.accessibilityValue<A>(value:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X8>)
{
  uint64_t v11 = *(void *)(a3 - 8);
  double v12 = MEMORY[0x1F4188790](a1);
  uint64_t v14 = (char *)&v17 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15(v12);
  View.accessibilityAttachment<A>(content:_:)((uint64_t)v14, (uint64_t)closure #1 in View.accessibilityValue<A>(value:), 0, a2, a3, a4, a5, a6);
  return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v14, a3);
}

uint64_t closure #1 in View.accessibilityValue<A>(value:)(uint64_t a1)
{
  uint64_t v3 = *(void *)a1;
  uint64_t v2 = *(void **)(a1 + 8);
  if (!*(unsigned char *)(a1 + 16))
  {
    *(void *)&v18[0] = *(void *)a1;
    *((void *)&v18[0] + 1) = v2;
    AccessibilityAttachment.mergedProperties.getter((uint64_t *)v16);
    if (*(void *)&v16[0]) {
      goto LABEL_4;
    }
LABEL_12:
    long long v19 = 0u;
    memset(v18, 0, sizeof(v18));
    goto LABEL_13;
  }
  if (*(unsigned char *)(a1 + 16) != 1) {
    goto LABEL_12;
  }
  uint64_t v4 = swift_bridgeObjectRetain();
  char v5 = specialized Sequence.compactMap<A>(_:)(v4);
  static AccessibilityChildBehavior.defaultCombine(childProperties:createsCustomActions:)((uint64_t)v5, 1, (uint64_t *)v18);
  swift_bridgeObjectRelease();
  outlined consume of AccessibilityAttachment.Tree(v3, v2, 1);
  if (!*(void *)&v18[0]) {
    goto LABEL_12;
  }
LABEL_4:
  uint64_t v6 = swift_bridgeObjectRetain();
  specialized AccessibilityProperties.subscript.getter(v6, v18);
  swift_bridgeObjectRelease();
  uint64_t v7 = swift_bridgeObjectRetain();
  specialized AccessibilityProperties.subscript.getter(v7, (uint64_t)v16);
  swift_bridgeObjectRelease_n();
  uint64_t v8 = *(void *)&v16[0];
  if (!*(void *)&v16[0])
  {
LABEL_13:
    outlined consume of AccessibilityAttachment.Tree(*(void *)a1, *(void **)(a1 + 8), *(unsigned char *)(a1 + 16));
    goto LABEL_14;
  }
  if (!*(void *)(*(void *)&v16[0] + 16))
  {
LABEL_10:
    outlined consume of AccessibilityAttachment.Tree(*(void *)a1, *(void **)(a1 + 8), *(unsigned char *)(a1 + 16));
    swift_bridgeObjectRelease();
LABEL_14:
    AccessibilityAttachment.init()();
    outlined init with copy of AccessibilityValueStorage?((uint64_t)v18, (uint64_t)v16, &lazy cache variable for type metadata for AccessibilityValueStorage?);
    specialized AccessibilityProperties.subscript.setter((uint64_t)v16);
    uint64_t v12 = *((void *)&v13 + 1);
    *(void *)a1 = v13;
    *(void *)(a1 + 8) = v12;
    *(unsigned char *)(a1 + 16) = 0;
    return outlined destroy of AccessibilityValueStorage?((uint64_t)v18, &lazy cache variable for type metadata for AccessibilityValueStorage?);
  }
  outlined init with copy of AccessibilityValueStorage?((uint64_t)v18, (uint64_t)v16, &lazy cache variable for type metadata for AccessibilityValueStorage?);
  uint64_t v9 = *((void *)&v17 + 1);
  outlined destroy of AccessibilityValueStorage?((uint64_t)v16, &lazy cache variable for type metadata for AccessibilityValueStorage?);
  if (!v9)
  {
    outlined consume of AccessibilityAttachment.Tree(*(void *)a1, *(void **)(a1 + 8), *(unsigned char *)(a1 + 16));
    *(void *)&long long v15 = 0;
    long long v13 = 0u;
    long long v14 = 0u;
    outlined destroy of AccessibilityValueStorage?((uint64_t)&v13, &lazy cache variable for type metadata for AnyAccessibilityValue?);
    long long v13 = 0u;
    long long v14 = 0u;
    *(void *)&long long v15 = 0;
    *((void *)&v15 + 1) = v8;
    memset(v16, 0, sizeof(v16));
    long long v17 = v15;
    outlined assign with take of AccessibilityValueStorage?((uint64_t)v16, (uint64_t)v18);
    goto LABEL_14;
  }
  outlined init with copy of AccessibilityValueStorage?((uint64_t)v18, (uint64_t)v16, &lazy cache variable for type metadata for AccessibilityValueStorage?);
  if (!*((void *)&v17 + 1))
  {
    swift_bridgeObjectRelease();
    outlined destroy of AccessibilityValueStorage?((uint64_t)v16, &lazy cache variable for type metadata for AccessibilityValueStorage?);
    goto LABEL_13;
  }
  uint64_t result = outlined destroy of AccessibilityValueStorage?((uint64_t)v16, &lazy cache variable for type metadata for AccessibilityValueStorage?);
  if (*((void *)&v19 + 1))
  {
    uint64_t v11 = *(void *)(AccessibilityValueStorage.valueDescription.getter() + 16);
    uint64_t result = swift_bridgeObjectRelease();
    if (v11) {
      goto LABEL_10;
    }
    if (*((void *)&v19 + 1))
    {
      outlined consume of AccessibilityAttachment.Tree(*(void *)a1, *(void **)(a1 + 8), *(unsigned char *)(a1 + 16));
      swift_bridgeObjectRelease();
      *((void *)&v19 + 1) = v8;
      goto LABEL_14;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t ModifiedContent<>.accessibilityValue<A>(_:description:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v22 = a6;
  v21[0] = a9;
  v21[1] = a8;
  uint64_t v15 = type metadata accessor for Optional();
  v16.n128_f64[0] = MEMORY[0x1F4188790](v15 - 8);
  uint64_t v18 = (char *)v21 - v17;
  uint64_t v19 = *(void *)(a7 - 8);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v19 + 16))((char *)v21 - v17, a1, a7, v16);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v19 + 56))(v18, 0, 1, a7);
  outlined copy of Text?(a2, a3, a4, a5);
  AccessibilityValueStorage.init<A>(_:description:)();
  ModifiedContent<>.accessibilityValue(_:)((uint64_t)v23, v22, v21[0]);
  return outlined destroy of AccessibilityValueStorage((uint64_t)v23);
}

uint64_t View.accessibility(value:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return View.accessibilityValue(_:)(a1, a2, a3 & 1, a4, a5, a6);
}

uint64_t ModifiedContent<>.accessibility(value:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  return ModifiedContent<>.accessibilityValue(_:)(a1, a2, a3 & 1, a4, a5);
}

uint64_t sub_18769F6A8()
{
  return swift_getWitnessTable();
}

void type metadata accessor for AccessibilityDetachedPropertyModifier<AccessibilityProperties.ValueKey>()
{
  if (!lazy cache variable for type metadata for AccessibilityDetachedPropertyModifier<AccessibilityProperties.ValueKey>)
  {
    lazy protocol witness table accessor for type AccessibilityValueStorage? and conformance <A> A?();
    unint64_t v0 = type metadata accessor for AccessibilityDetachedPropertyModifier();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for AccessibilityDetachedPropertyModifier<AccessibilityProperties.ValueKey>);
    }
  }
}

uint64_t sub_18769F778()
{
  return swift_getWitnessTable();
}

uint64_t AccessibilityValueStorage.impliedRole(for:)(uint64_t *a1)
{
  uint64_t v3 = *a1;
  uint64_t v2 = a1[1];
  outlined init with copy of AccessibilityValueStorage?(v1, (uint64_t)&v6, &lazy cache variable for type metadata for AnyAccessibilityValue?);
  if (v8)
  {
    AnyAccessibilityValue.type.getter();
    outlined destroy of AnyAccessibilityValue((uint64_t)&v6);
    switch(v5)
    {
      case 4:
        uint64_t v6 = v3;
        uint64_t v7 = v2;
        if (AccessibilityNullableOptionSet<>.subscript.getter()) {
          goto LABEL_4;
        }
        return 0;
      case 5:
        uint64_t v6 = v3;
        uint64_t v7 = v2;
        if (AccessibilityNullableOptionSet<>.subscript.getter()) {
          return 1048577;
        }
        uint64_t v6 = v3;
        uint64_t v7 = v2;
        if (AccessibilityNullableOptionSet<>.subscript.getter() != 2) {
          return 0;
        }
        uint64_t v6 = v3;
        uint64_t v7 = v2;
        if (AccessibilityNullableOptionSet<>.subscript.getter())
        {
          uint64_t result = 0x20000000000000;
        }
        else
        {
          uint64_t v6 = v3;
          uint64_t v7 = v2;
          if (AccessibilityNullableOptionSet<>.subscript.getter())
          {
            uint64_t result = 0x20000000000000;
          }
          else
          {
            uint64_t v6 = v3;
            uint64_t v7 = v2;
            if (AccessibilityNullableOptionSet<>.subscript.getter()) {
              uint64_t result = 0x20000000000001;
            }
            else {
LABEL_4:
            }
              uint64_t result = 0;
          }
        }
        break;
      case 6:
        return 4096;
      case 7:
        return 4096;
      case 8:
        AccessibilityValueStorage.isBounded.getter();
        return 0;
      default:
        return 0;
    }
  }
  else
  {
    outlined destroy of AccessibilityValueStorage?((uint64_t)&v6, &lazy cache variable for type metadata for AnyAccessibilityValue?);
    return 0;
  }
  return result;
}

uint64_t outlined assign with take of AccessibilityValueStorage?(uint64_t a1, uint64_t a2)
{
  type metadata accessor for AccessibilityValueStorage?(0, &lazy cache variable for type metadata for AccessibilityValueStorage?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t outlined copy of AccessibilityAttachment.Tree(uint64_t a1, void *a2, char a3)
{
  if (a3 != 1)
  {
    if (a3) {
      return result;
    }
    id v3 = a2;
  }

  return swift_bridgeObjectRetain();
}

void outlined consume of AccessibilityAttachment?(uint64_t a1, void *a2)
{
  if (a1)
  {
    swift_bridgeObjectRelease();
  }
}

uint64_t outlined destroy of AnyAccessibilityValue(uint64_t a1)
{
  return a1;
}

uint64_t type metadata completion function for CapsuleSlider.ScrollState()
{
  return swift_initClassMetadata2();
}

void protocol witness for static Equatable.== infix(_:_:) in conformance CapsuleSlider<A>.ScrollState.Orientation()
{
}

void protocol witness for Hashable._rawHashValue(seed:) in conformance CapsuleSlider<A>.ScrollState.Orientation()
{
}

void CapsuleSlider.ScrollState.__deallocating_deinit()
{
}

uint64_t type metadata accessor for CapsuleSlider.ScrollState()
{
  return __swift_instantiateGenericMetadata();
}

unsigned char *storeEnumTagSinglePayload for CapsuleSlider.ScrollState.Orientation(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x18769FF5CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

unsigned char *destructiveInjectEnumTag for CapsuleSlider.ScrollState.Orientation(unsigned char *result, char a2)
{
  *uint64_t result = a2 & 1;
  return result;
}

uint64_t type metadata accessor for CapsuleSlider.ScrollState.Orientation()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata completion function for CapsuleSlider()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for CapsuleSlider(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a3 + 16);
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = *(_DWORD *)(v4 + 80);
  uint64_t v6 = *(void *)(v4 + 64) + 7;
  int v7 = *(_DWORD *)(v4 + 80) & 0x100000;
  uint64_t v8 = *a2;
  *a1 = *a2;
  if (v5 > 7
    || v7 != 0
    || ((((v6 + ((v5 + 56) & ~v5)) & 0xFFFFFFFFFFFFFFF8) + 143) & 0xFFFFFFFFFFFFFFF8) + 32 > 0x18)
  {
    uint64_t v11 = (uint64_t *)(v8 + ((v5 & 0xF8 ^ 0x1F8) & (v5 + 16)));
  }
  else
  {
    uint64_t v11 = a1;
    uint64_t v12 = a2[2];
    a1[1] = a2[1];
    a1[2] = v12;
    long long v13 = (_OWORD *)(((unint64_t)a1 + 31) & 0xFFFFFFFFFFFFFFF8);
    long long v14 = (_OWORD *)(((unint64_t)a2 + 31) & 0xFFFFFFFFFFFFFFF8);
    *long long v13 = *v14;
    uint64_t v15 = (void *)(((unint64_t)v13 + 23) & 0xFFFFFFFFFFFFFFF8);
    __n128 v16 = (void *)(((unint64_t)v14 + 23) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v17 = v16[1];
    void *v15 = *v16;
    v15[1] = v17;
    uint64_t v18 = ((unint64_t)v15 + v5 + 16) & ~v5;
    uint64_t v19 = ((unint64_t)v16 + v5 + 16) & ~v5;
    uint64_t v20 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
    swift_retain();
    swift_retain();
    swift_retain();
    v20(v18, v19, v3);
    unint64_t v21 = (v6 + v18) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v22 = (v6 + v19) & 0xFFFFFFFFFFFFFFF8;
    *(unsigned char *)unint64_t v21 = *(unsigned char *)v22;
    *(void *)(v21 + 8) = *(void *)(v22 + 8);
    unint64_t v23 = (v21 + 23) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v24 = (v22 + 23) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v25 = *(void *)v24;
    char v26 = *(unsigned char *)(v24 + 8);
    swift_retain();
    outlined copy of Environment<Bool>.Content(v25, v26);
    *(void *)unint64_t v23 = v25;
    *(unsigned char *)(v23 + 8) = v26;
    unint64_t v27 = (v21 + 39) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v28 = (v22 + 39) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v29 = *(void *)v28;
    char v30 = *(unsigned char *)(v28 + 8);
    outlined copy of Environment<Bool>.Content(*(void *)v28, v30);
    *(void *)unint64_t v27 = v29;
    *(unsigned char *)(v27 + 8) = v30;
    unint64_t v31 = (v21 + 55) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v32 = (v22 + 55) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v33 = *(void *)v32;
    char v34 = *(unsigned char *)(v32 + 8);
    outlined copy of Environment<Bool>.Content(*(void *)v32, v34);
    *(void *)unint64_t v31 = v33;
    *(unsigned char *)(v31 + 8) = v34;
    unint64_t v35 = (v21 + 71) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v36 = (v22 + 71) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v37 = *(void *)v36;
    char v38 = *(unsigned char *)(v36 + 8);
    outlined copy of Environment<Bool>.Content(*(void *)v36, v38);
    *(void *)unint64_t v35 = v37;
    *(unsigned char *)(v35 + 8) = v38;
    unint64_t v39 = (v21 + 87) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v40 = (v22 + 87) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v41 = *(void *)v40;
    char v42 = *(unsigned char *)(v40 + 8);
    outlined copy of Environment<Bool>.Content(*(void *)v40, v42);
    *(void *)unint64_t v39 = v41;
    *(unsigned char *)(v39 + 8) = v42;
    unint64_t v43 = (v21 + 103) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v44 = (v22 + 103) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v45 = *(void *)v44;
    char v46 = *(unsigned char *)(v44 + 8);
    outlined copy of Environment<Bool>.Content(*(void *)v44, v46);
    *(void *)unint64_t v43 = v45;
    *(unsigned char *)(v43 + 8) = v46;
    unint64_t v47 = (v21 + 119) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v48 = (v22 + 119) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v49 = *(void *)v48;
    uint64_t v50 = *(void *)(v48 + 8);
    LOBYTE(v43) = *(unsigned char *)(v48 + 16);
    outlined copy of Environment<Material?>.Content(*(void *)v48, v50, v43);
    *(void *)unint64_t v47 = v49;
    *(void *)(v47 + 8) = v50;
    *(unsigned char *)(v47 + 16) = v43;
    uint64_t v51 = (void *)((v21 + 143) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v52 = (void *)((v22 + 143) & 0xFFFFFFFFFFFFFFF8);
    *uint64_t v51 = *v52;
    v51[1] = v52[1];
    uint64_t v53 = v52[3];
    v51[2] = v52[2];
    void v51[3] = v53;
    swift_retain();
    swift_retain();
  }
  swift_retain();
  return v11;
}

uint64_t destroy for CapsuleSlider(uint64_t a1, uint64_t a2)
{
  swift_release();
  swift_release();
  swift_release();
  uint64_t v4 = *(void *)(*(void *)(a2 + 16) - 8);
  uint64_t v5 = v4 + 8;
  unint64_t v6 = (((((a1 + 31) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + *(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  (*(void (**)(unint64_t))(v4 + 8))(v6);
  unint64_t v7 = (*(void *)(v5 + 56) + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_release();
  outlined consume of Environment<Bool>.Content(*(void *)((v7 + 23) & 0xFFFFFFFFFFFFFFF8), *(unsigned char *)(((v7 + 23) & 0xFFFFFFFFFFFFFFF8) + 8));
  outlined consume of Environment<Bool>.Content(*(void *)((v7 + 39) & 0xFFFFFFFFFFFFFFF8), *(unsigned char *)(((v7 + 39) & 0xFFFFFFFFFFFFFFF8) + 8));
  outlined consume of Environment<Bool>.Content(*(void *)((v7 + 55) & 0xFFFFFFFFFFFFFFF8), *(unsigned char *)(((v7 + 55) & 0xFFFFFFFFFFFFFFF8) + 8));
  outlined consume of Environment<Bool>.Content(*(void *)((v7 + 71) & 0xFFFFFFFFFFFFFFF8), *(unsigned char *)(((v7 + 71) & 0xFFFFFFFFFFFFFFF8) + 8));
  outlined consume of Environment<Bool>.Content(*(void *)((v7 + 87) & 0xFFFFFFFFFFFFFFF8), *(unsigned char *)(((v7 + 87) & 0xFFFFFFFFFFFFFFF8) + 8));
  outlined consume of Environment<Bool>.Content(*(void *)((v7 + 103) & 0xFFFFFFFFFFFFFFF8), *(unsigned char *)(((v7 + 103) & 0xFFFFFFFFFFFFFFF8) + 8));
  outlined consume of Environment<Material?>.Content(*(void *)((v7 + 119) & 0xFFFFFFFFFFFFFFF8), *(void *)(((v7 + 119) & 0xFFFFFFFFFFFFFFF8) + 8), *(unsigned char *)(((v7 + 119) & 0xFFFFFFFFFFFFFFF8) + 16));
  swift_release();
  swift_release();

  return swift_release();
}

void *initializeWithCopy for CapsuleSlider(void *a1, void *a2, uint64_t a3)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  a1[2] = a2[2];
  uint64_t v5 = (_OWORD *)(((unint64_t)a1 + 31) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v6 = (_OWORD *)(((unint64_t)a2 + 31) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v5 = *v6;
  unint64_t v7 = (void *)(((unint64_t)v5 + 23) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v8 = (void *)(((unint64_t)v6 + 23) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v9 = v8[1];
  *unint64_t v7 = *v8;
  v7[1] = v9;
  uint64_t v10 = *(void *)(a3 + 16);
  uint64_t v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16);
  uint64_t v12 = *(void *)(v10 - 8) + 16;
  uint64_t v13 = *(unsigned __int8 *)(*(void *)(v10 - 8) + 80);
  uint64_t v14 = ((unint64_t)v7 + v13 + 16) & ~v13;
  uint64_t v15 = ((unint64_t)v8 + v13 + 16) & ~v13;
  swift_retain();
  swift_retain();
  swift_retain();
  v11(v14, v15, v10);
  uint64_t v16 = *(void *)(v12 + 48) + 7;
  unint64_t v17 = (v16 + v14) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v18 = (v16 + v15) & 0xFFFFFFFFFFFFFFF8;
  *(unsigned char *)unint64_t v17 = *(unsigned char *)v18;
  *(void *)(v17 + 8) = *(void *)(v18 + 8);
  unint64_t v19 = (v17 + 23) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v20 = (v18 + 23) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v21 = *(void *)v20;
  LOBYTE(v9) = *(unsigned char *)(v20 + 8);
  swift_retain();
  outlined copy of Environment<Bool>.Content(v21, v9);
  *(void *)unint64_t v19 = v21;
  *(unsigned char *)(v19 + 8) = v9;
  unint64_t v22 = (v17 + 39) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v23 = (v18 + 39) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v24 = *(void *)v23;
  LOBYTE(v9) = *(unsigned char *)(v23 + 8);
  outlined copy of Environment<Bool>.Content(*(void *)v23, v9);
  *(void *)unint64_t v22 = v24;
  *(unsigned char *)(v22 + 8) = v9;
  unint64_t v25 = (v17 + 55) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v26 = (v18 + 55) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v27 = *(void *)v26;
  LOBYTE(v9) = *(unsigned char *)(v26 + 8);
  outlined copy of Environment<Bool>.Content(*(void *)v26, v9);
  *(void *)unint64_t v25 = v27;
  *(unsigned char *)(v25 + 8) = v9;
  unint64_t v28 = (v17 + 71) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v29 = (v18 + 71) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v30 = *(void *)v29;
  LOBYTE(v9) = *(unsigned char *)(v29 + 8);
  outlined copy of Environment<Bool>.Content(*(void *)v29, v9);
  *(void *)unint64_t v28 = v30;
  *(unsigned char *)(v28 + 8) = v9;
  unint64_t v31 = (v17 + 87) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v32 = (v18 + 87) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v33 = *(void *)v32;
  LOBYTE(v9) = *(unsigned char *)(v32 + 8);
  outlined copy of Environment<Bool>.Content(*(void *)v32, v9);
  *(void *)unint64_t v31 = v33;
  *(unsigned char *)(v31 + 8) = v9;
  unint64_t v34 = (v17 + 103) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v35 = (v18 + 103) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v36 = *(void *)v35;
  LOBYTE(v9) = *(unsigned char *)(v35 + 8);
  outlined copy of Environment<Bool>.Content(*(void *)v35, v9);
  *(void *)unint64_t v34 = v36;
  *(unsigned char *)(v34 + 8) = v9;
  unint64_t v37 = (v17 + 119) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v38 = (v18 + 119) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v39 = *(void *)v38;
  uint64_t v40 = *(void *)(v38 + 8);
  LOBYTE(v34) = *(unsigned char *)(v38 + 16);
  outlined copy of Environment<Material?>.Content(*(void *)v38, v40, v34);
  *(void *)unint64_t v37 = v39;
  *(void *)(v37 + 8) = v40;
  *(unsigned char *)(v37 + 16) = v34;
  uint64_t v41 = (void *)((v17 + 143) & 0xFFFFFFFFFFFFFFF8);
  char v42 = (void *)((v18 + 143) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v41 = *v42;
  v41[1] = v42[1];
  uint64_t v43 = v42[3];
  v41[2] = v42[2];
  v41[3] = v43;
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

void *assignWithCopy for CapsuleSlider(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  a1[2] = a2[2];
  unint64_t v6 = (void *)(((unint64_t)a1 + 31) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v7 = (void *)(((unint64_t)a2 + 31) & 0xFFFFFFFFFFFFFFF8);
  *unint64_t v6 = *v7;
  v6[1] = v7[1];
  uint64_t v8 = (void *)(((unint64_t)v6 + 23) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v9 = (void *)(((unint64_t)v7 + 23) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v10 = v9[1];
  void *v8 = *v9;
  v8[1] = v10;
  swift_retain();
  swift_release();
  uint64_t v11 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v12 = v11 + 24;
  uint64_t v13 = *(unsigned __int8 *)(v11 + 80);
  uint64_t v14 = ((unint64_t)v8 + v13 + 16) & ~v13;
  uint64_t v15 = ((unint64_t)v9 + v13 + 16) & ~v13;
  (*(void (**)(uint64_t, uint64_t))(v11 + 24))(v14, v15);
  uint64_t v16 = *(void *)(v12 + 40) + 7;
  unint64_t v17 = (v16 + v14) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v18 = (v16 + v15) & 0xFFFFFFFFFFFFFFF8;
  *(unsigned char *)unint64_t v17 = *(unsigned char *)v18;
  *(void *)(v17 + 8) = *(void *)(v18 + 8);
  swift_retain();
  swift_release();
  unint64_t v19 = (v17 + 23) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v20 = (v18 + 23) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v21 = *(void *)v20;
  LOBYTE(v15) = *(unsigned char *)(v20 + 8);
  outlined copy of Environment<Bool>.Content(*(void *)v20, v15);
  uint64_t v22 = *(void *)v19;
  char v23 = *(unsigned char *)(v19 + 8);
  *(void *)unint64_t v19 = v21;
  *(unsigned char *)(v19 + 8) = v15;
  outlined consume of Environment<Bool>.Content(v22, v23);
  unint64_t v24 = (v17 + 39) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v25 = (v18 + 39) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v26 = *(void *)v25;
  LOBYTE(v15) = *(unsigned char *)(v25 + 8);
  outlined copy of Environment<Bool>.Content(*(void *)v25, v15);
  uint64_t v27 = *(void *)v24;
  char v28 = *(unsigned char *)(v24 + 8);
  *(void *)unint64_t v24 = v26;
  *(unsigned char *)(v24 + 8) = v15;
  outlined consume of Environment<Bool>.Content(v27, v28);
  unint64_t v29 = (v17 + 55) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v30 = (v18 + 55) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v31 = *(void *)v30;
  LOBYTE(v15) = *(unsigned char *)(v30 + 8);
  outlined copy of Environment<Bool>.Content(*(void *)v30, v15);
  uint64_t v32 = *(void *)v29;
  char v33 = *(unsigned char *)(v29 + 8);
  *(void *)unint64_t v29 = v31;
  *(unsigned char *)(v29 + 8) = v15;
  outlined consume of Environment<Bool>.Content(v32, v33);
  unint64_t v34 = (v17 + 71) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v35 = (v18 + 71) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v36 = *(void *)v35;
  LOBYTE(v15) = *(unsigned char *)(v35 + 8);
  outlined copy of Environment<Bool>.Content(*(void *)v35, v15);
  uint64_t v37 = *(void *)v34;
  char v38 = *(unsigned char *)(v34 + 8);
  *(void *)unint64_t v34 = v36;
  *(unsigned char *)(v34 + 8) = v15;
  outlined consume of Environment<Bool>.Content(v37, v38);
  unint64_t v39 = (v17 + 87) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v40 = (v18 + 87) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v41 = *(void *)v40;
  LOBYTE(v15) = *(unsigned char *)(v40 + 8);
  outlined copy of Environment<Bool>.Content(*(void *)v40, v15);
  uint64_t v42 = *(void *)v39;
  char v43 = *(unsigned char *)(v39 + 8);
  *(void *)unint64_t v39 = v41;
  *(unsigned char *)(v39 + 8) = v15;
  outlined consume of Environment<Bool>.Content(v42, v43);
  unint64_t v44 = (v17 + 103) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v45 = (v18 + 103) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v46 = *(void *)v45;
  LOBYTE(v15) = *(unsigned char *)(v45 + 8);
  outlined copy of Environment<Bool>.Content(*(void *)v45, v15);
  uint64_t v47 = *(void *)v44;
  char v48 = *(unsigned char *)(v44 + 8);
  *(void *)unint64_t v44 = v46;
  *(unsigned char *)(v44 + 8) = v15;
  outlined consume of Environment<Bool>.Content(v47, v48);
  unint64_t v49 = (v17 + 119) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v50 = (v18 + 119) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v51 = *(void *)v50;
  uint64_t v52 = *(void *)(v50 + 8);
  LOBYTE(v44) = *(unsigned char *)(v50 + 16);
  outlined copy of Environment<Material?>.Content(*(void *)v50, v52, v44);
  uint64_t v53 = *(void *)v49;
  uint64_t v54 = *(void *)(v49 + 8);
  char v55 = *(unsigned char *)(v49 + 16);
  *(void *)unint64_t v49 = v51;
  *(void *)(v49 + 8) = v52;
  *(unsigned char *)(v49 + 16) = v44;
  outlined consume of Environment<Material?>.Content(v53, v54, v55);
  uint64_t v56 = (void *)((v17 + 143) & 0xFFFFFFFFFFFFFFF8);
  int v57 = (void *)((v18 + 143) & 0xFFFFFFFFFFFFFFF8);
  void *v56 = *v57;
  swift_retain();
  swift_release();
  v56[1] = v57[1];
  swift_retain();
  swift_release();
  uint64_t v58 = v57[3];
  v56[2] = v57[2];
  v56[3] = v58;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t initializeWithTake for CapsuleSlider(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  uint64_t v4 = (_OWORD *)((a1 + 31) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v5 = (_OWORD *)((a2 + 31) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v4 = *v5;
  unint64_t v6 = (_OWORD *)(((unint64_t)v4 + 23) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v7 = (_OWORD *)(((unint64_t)v5 + 23) & 0xFFFFFFFFFFFFFFF8);
  *unint64_t v6 = *v7;
  uint64_t v8 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v9 = v8 + 32;
  uint64_t v10 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v11 = ((unint64_t)v6 + v10 + 16) & ~v10;
  uint64_t v12 = ((unint64_t)v7 + v10 + 16) & ~v10;
  (*(void (**)(uint64_t, uint64_t))(v8 + 32))(v11, v12);
  uint64_t v13 = *(void *)(v9 + 32) + 7;
  uint64_t v14 = (_OWORD *)((v13 + v11) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v15 = (_OWORD *)((v13 + v12) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v14 = *v15;
  unint64_t v16 = ((unint64_t)v14 + 23) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v17 = ((unint64_t)v15 + 23) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v18 = *(void *)v17;
  *(unsigned char *)(v16 + 8) = *(unsigned char *)(v17 + 8);
  *(void *)unint64_t v16 = v18;
  unint64_t v19 = ((unint64_t)v14 + 39) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v20 = ((unint64_t)v15 + 39) & 0xFFFFFFFFFFFFFFF8;
  LOBYTE(v18) = *(unsigned char *)(v20 + 8);
  *(void *)unint64_t v19 = *(void *)v20;
  *(unsigned char *)(v19 + 8) = v18;
  unint64_t v21 = ((unint64_t)v14 + 55) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v22 = ((unint64_t)v15 + 55) & 0xFFFFFFFFFFFFFFF8;
  LOBYTE(v18) = *(unsigned char *)(v22 + 8);
  *(void *)unint64_t v21 = *(void *)v22;
  *(unsigned char *)(v21 + 8) = v18;
  unint64_t v23 = ((unint64_t)v14 + 71) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v24 = ((unint64_t)v15 + 71) & 0xFFFFFFFFFFFFFFF8;
  LOBYTE(v18) = *(unsigned char *)(v24 + 8);
  *(void *)unint64_t v23 = *(void *)v24;
  *(unsigned char *)(v23 + 8) = v18;
  unint64_t v25 = ((unint64_t)v14 + 87) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v26 = ((unint64_t)v15 + 87) & 0xFFFFFFFFFFFFFFF8;
  LOBYTE(v18) = *(unsigned char *)(v26 + 8);
  *(void *)unint64_t v25 = *(void *)v26;
  *(unsigned char *)(v25 + 8) = v18;
  unint64_t v27 = ((unint64_t)v14 + 103) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v28 = ((unint64_t)v15 + 103) & 0xFFFFFFFFFFFFFFF8;
  LOBYTE(v18) = *(unsigned char *)(v28 + 8);
  *(void *)unint64_t v27 = *(void *)v28;
  *(unsigned char *)(v27 + 8) = v18;
  unint64_t v29 = ((unint64_t)v14 + 119) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v30 = ((unint64_t)v15 + 119) & 0xFFFFFFFFFFFFFFF8;
  LOBYTE(v18) = *(unsigned char *)(v30 + 16);
  *(_OWORD *)unint64_t v29 = *(_OWORD *)v30;
  *(unsigned char *)(v29 + 16) = v18;
  uint64_t v31 = (_OWORD *)(((unint64_t)v14 + 143) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v32 = (_OWORD *)(((unint64_t)v15 + 143) & 0xFFFFFFFFFFFFFFF8);
  long long v33 = v32[1];
  _OWORD *v31 = *v32;
  v31[1] = v33;
  return a1;
}

void *assignWithTake for CapsuleSlider(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_release();
  a1[1] = a2[1];
  swift_release();
  a1[2] = a2[2];
  unint64_t v6 = (void *)(((unint64_t)a1 + 31) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v7 = (void *)(((unint64_t)a2 + 31) & 0xFFFFFFFFFFFFFFF8);
  *unint64_t v6 = *v7;
  v6[1] = v7[1];
  uint64_t v8 = (_OWORD *)(((unint64_t)v6 + 23) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v9 = (_OWORD *)(((unint64_t)v7 + 23) & 0xFFFFFFFFFFFFFFF8);
  _OWORD *v8 = *v9;
  swift_release();
  uint64_t v10 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v11 = v10 + 40;
  uint64_t v12 = *(unsigned __int8 *)(v10 + 80);
  uint64_t v13 = ((unint64_t)v8 + v12 + 16) & ~v12;
  uint64_t v14 = ((unint64_t)v9 + v12 + 16) & ~v12;
  (*(void (**)(uint64_t, uint64_t))(v10 + 40))(v13, v14);
  uint64_t v15 = *(void *)(v11 + 24) + 7;
  unint64_t v16 = (v15 + v13) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v17 = (v15 + v14) & 0xFFFFFFFFFFFFFFF8;
  *(unsigned char *)unint64_t v16 = *(unsigned char *)v17;
  *(void *)(v16 + 8) = *(void *)(v17 + 8);
  swift_release();
  unint64_t v18 = (v16 + 23) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v19 = (v17 + 23) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v20 = *(void *)v19;
  LOBYTE(v19) = *(unsigned char *)(v19 + 8);
  uint64_t v21 = *(void *)v18;
  char v22 = *(unsigned char *)(v18 + 8);
  *(void *)unint64_t v18 = v20;
  *(unsigned char *)(v18 + 8) = v19;
  outlined consume of Environment<Bool>.Content(v21, v22);
  unint64_t v23 = (v16 + 39) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v24 = (v17 + 39) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v25 = *(void *)v24;
  LOBYTE(v24) = *(unsigned char *)(v24 + 8);
  uint64_t v26 = *(void *)v23;
  char v27 = *(unsigned char *)(v23 + 8);
  *(void *)unint64_t v23 = v25;
  *(unsigned char *)(v23 + 8) = v24;
  outlined consume of Environment<Bool>.Content(v26, v27);
  unint64_t v28 = (v16 + 55) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v29 = (v17 + 55) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v30 = *(void *)v29;
  LOBYTE(v29) = *(unsigned char *)(v29 + 8);
  uint64_t v31 = *(void *)v28;
  char v32 = *(unsigned char *)(v28 + 8);
  *(void *)unint64_t v28 = v30;
  *(unsigned char *)(v28 + 8) = v29;
  outlined consume of Environment<Bool>.Content(v31, v32);
  unint64_t v33 = (v16 + 71) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v34 = (v17 + 71) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v35 = *(void *)v34;
  LOBYTE(v34) = *(unsigned char *)(v34 + 8);
  uint64_t v36 = *(void *)v33;
  char v37 = *(unsigned char *)(v33 + 8);
  *(void *)unint64_t v33 = v35;
  *(unsigned char *)(v33 + 8) = v34;
  outlined consume of Environment<Bool>.Content(v36, v37);
  unint64_t v38 = (v16 + 87) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v39 = (v17 + 87) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v40 = *(void *)v39;
  LOBYTE(v39) = *(unsigned char *)(v39 + 8);
  uint64_t v41 = *(void *)v38;
  char v42 = *(unsigned char *)(v38 + 8);
  *(void *)unint64_t v38 = v40;
  *(unsigned char *)(v38 + 8) = v39;
  outlined consume of Environment<Bool>.Content(v41, v42);
  unint64_t v43 = (v16 + 103) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v44 = (v17 + 103) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v45 = *(void *)v44;
  LOBYTE(v44) = *(unsigned char *)(v44 + 8);
  uint64_t v46 = *(void *)v43;
  char v47 = *(unsigned char *)(v43 + 8);
  *(void *)unint64_t v43 = v45;
  *(unsigned char *)(v43 + 8) = v44;
  outlined consume of Environment<Bool>.Content(v46, v47);
  unint64_t v48 = (v16 + 119) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v49 = (v17 + 119) & 0xFFFFFFFFFFFFFFF8;
  char v50 = *(unsigned char *)(v49 + 16);
  uint64_t v51 = *(void *)v48;
  uint64_t v52 = *(void *)(v48 + 8);
  char v53 = *(unsigned char *)(v48 + 16);
  *(_OWORD *)unint64_t v48 = *(_OWORD *)v49;
  *(unsigned char *)(v48 + 16) = v50;
  outlined consume of Environment<Material?>.Content(v51, v52, v53);
  unint64_t v54 = (v16 + 143) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v55 = (v17 + 143) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v54 = *(void *)v55;
  swift_release();
  *(void *)(v54 + 8) = *(void *)(v55 + 8);
  swift_release();
  *(_OWORD *)(v54 + 16) = *(_OWORD *)(v55 + 16);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for CapsuleSlider(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  if (v5 <= 0x7FFFFFFF) {
    unsigned int v7 = 0x7FFFFFFF;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  if (v7 < a2)
  {
    unint64_t v8 = ((((*(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) + ((v6 + 56) & ~v6) + 7) & 0xFFFFFFFFFFFFFFF8)
         + 143) & 0xFFFFFFFFFFFFFFF8)
       + 32;
    unsigned int v9 = a2 - v7;
    uint64_t v10 = v8 & 0xFFFFFFF8;
    if ((v8 & 0xFFFFFFF8) != 0) {
      unsigned int v11 = 2;
    }
    else {
      unsigned int v11 = v9 + 1;
    }
    if (v11 >= 0x10000) {
      unsigned int v12 = 4;
    }
    else {
      unsigned int v12 = 2;
    }
    if (v11 < 0x100) {
      unsigned int v12 = 1;
    }
    if (v11 >= 2) {
      uint64_t v13 = v12;
    }
    else {
      uint64_t v13 = 0;
    }
    switch(v13)
    {
      case 1:
        int v14 = *(unsigned __int8 *)(a1 + v8);
        if (!v14) {
          break;
        }
        goto LABEL_22;
      case 2:
        int v14 = *(unsigned __int16 *)(a1 + v8);
        if (v14) {
          goto LABEL_22;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x1876A1060);
      case 4:
        int v14 = *(_DWORD *)(a1 + v8);
        if (!v14) {
          break;
        }
LABEL_22:
        int v16 = v14 - 1;
        if (v10)
        {
          int v16 = 0;
          LODWORD(v10) = *(_DWORD *)a1;
        }
        return v7 + (v10 | v16) + 1;
      default:
        break;
    }
  }
  if ((v5 & 0x80000000) != 0) {
    return (*(uint64_t (**)(unint64_t))(v4 + 48))((((((a1 + 31) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)
  }
                                                                  + v6
                                                                  + 16) & ~v6);
  unint64_t v17 = *(void *)(a1 + 8);
  if (v17 >= 0xFFFFFFFF) {
    LODWORD(v17) = -1;
  }
  return (v17 + 1);
}

void storeEnumTagSinglePayload for CapsuleSlider(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(unsigned __int8 *)(v6 + 80);
  size_t v10 = ((((*(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64) + ((v9 + 56) & ~v9) + 7) & 0xFFFFFFFFFFFFFFF8)
        + 143) & 0xFFFFFFFFFFFFFFF8)
      + 32;
  if (v8 >= a3)
  {
    int v14 = 0;
    int v15 = a2 - v8;
    if (a2 <= v8)
    {
LABEL_17:
      switch(v14)
      {
        case 1:
          a1[v10] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_30;
        case 2:
          *(_WORD *)&a1[v10] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_30;
        case 3:
          goto LABEL_42;
        case 4:
          *(_DWORD *)&a1[v10] = 0;
          goto LABEL_29;
        default:
LABEL_29:
          if (a2)
          {
LABEL_30:
            if ((v7 & 0x80000000) != 0)
            {
              unint64_t v18 = (((((unint64_t)(a1 + 31) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + v9 + 16) & ~v9;
              unint64_t v19 = *(void (**)(unint64_t))(v6 + 56);
              v19(v18);
            }
            else if ((a2 & 0x80000000) != 0)
            {
              *((void *)a1 + 1) = 0;
              *((void *)a1 + 2) = 0;
              *(void *)a1 = a2 ^ 0x80000000;
            }
            else
            {
              *((void *)a1 + 1) = a2 - 1;
            }
          }
          break;
      }
      return;
    }
  }
  else
  {
    unsigned int v11 = a3 - v8;
    if (((((*(_DWORD *)(*(void *)(*(void *)(a4 + 16) - 8) + 64) + ((v9 + 56) & ~v9) + 7) & 0xFFFFFFF8)
         + 143) & 0xFFFFFFF8) == 0xFFFFFFE0)
      unsigned int v12 = v11 + 1;
    else {
      unsigned int v12 = 2;
    }
    if (v12 >= 0x10000) {
      int v13 = 4;
    }
    else {
      int v13 = 2;
    }
    if (v12 < 0x100) {
      int v13 = 1;
    }
    if (v12 >= 2) {
      int v14 = v13;
    }
    else {
      int v14 = 0;
    }
    int v15 = a2 - v8;
    if (a2 <= v8) {
      goto LABEL_17;
    }
  }
  if (((((*(_DWORD *)(*(void *)(*(void *)(a4 + 16) - 8) + 64) + ((v9 + 56) & ~v9) + 7) & 0xFFFFFFF8)
       + 143) & 0xFFFFFFF8) == 0xFFFFFFE0)
    int v16 = v15;
  else {
    int v16 = 1;
  }
  if (((((*(_DWORD *)(*(void *)(*(void *)(a4 + 16) - 8) + 64) + ((v9 + 56) & ~v9) + 7) & 0xFFFFFFF8)
       + 143) & 0xFFFFFFF8) != 0xFFFFFFE0)
  {
    int v17 = ~v8 + a2;
    bzero(a1, v10);
    *(_DWORD *)a1 = v17;
  }
  switch(v14)
  {
    case 1:
      a1[v10] = v16;
      break;
    case 2:
      *(_WORD *)&a1[v10] = v16;
      break;
    case 3:
LABEL_42:
      __break(1u);
      JUMPOUT(0x1876A1284);
    case 4:
      *(_DWORD *)&a1[v10] = v16;
      break;
    default:
      return;
  }
}

uint64_t type metadata accessor for CapsuleSlider()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t base witness table accessor for Equatable in CapsuleSlider<A>.ScrollState.Orientation()
{
  return swift_getWitnessTable();
}

uint64_t associated type witness table accessor for View.Body : View in CapsuleSlider<A>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1876A1324()
{
  return swift_getWitnessTable();
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Rectangle, Color>, _MaskEffect<Image>>, _BlendModeEffect>, _FlexFrameLayout>, DisableAccessibilityNodesModifier>(uint64_t a1)
{
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Rectangle, Color>, _MaskEffect<Image>>, _BlendModeEffect>, _FlexFrameLayout>(uint64_t a1)
{
}

void type metadata accessor for ModifiedContent<ModifiedContent<_ShapeView<Rectangle, Color>, _MaskEffect<Image>>, _BlendModeEffect>(uint64_t a1)
{
}

void type metadata accessor for ModifiedContent<_ShapeView<Rectangle, Color>, _MaskEffect<Image>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<_ShapeView<Rectangle, Color>, _MaskEffect<Image>>)
  {
    type metadata accessor for _ShapeView<Rectangle, Color>();
    type metadata accessor for _MaskEffect<Image>(255, &lazy cache variable for type metadata for _MaskEffect<Image>, MEMORY[0x1E4F41538], MEMORY[0x1E4F3F5B8]);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<_ShapeView<Rectangle, Color>, _MaskEffect<Image>>);
    }
  }
}

void type metadata accessor for _ShapeView<Rectangle, Color>()
{
  if (!lazy cache variable for type metadata for _ShapeView<Rectangle, Color>)
  {
    lazy protocol witness table accessor for type Rectangle and conformance Rectangle();
    unint64_t v0 = type metadata accessor for _ShapeView();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ShapeView<Rectangle, Color>);
    }
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<Image, _MaskEffect<Image>>, _FlexFrameLayout>, DisableAccessibilityNodesModifier>(uint64_t a1)
{
}

void type metadata accessor for ModifiedContent<ModifiedContent<Image, _MaskEffect<Image>>, _FlexFrameLayout>(uint64_t a1)
{
}

void type metadata accessor for ModifiedContent<Image, _MaskEffect<Image>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<Image, _MaskEffect<Image>>)
  {
    type metadata accessor for _MaskEffect<Image>(255, &lazy cache variable for type metadata for _MaskEffect<Image>, MEMORY[0x1E4F41538], MEMORY[0x1E4F3F5B8]);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<Image, _MaskEffect<Image>>);
    }
  }
}

void type metadata accessor for HStack<ModifiedContent<ModifiedContent<ModifiedContent<Image, _FrameLayout>, DisableAccessibilityNodesModifier>, _EnvironmentKeyWritingModifier<Bool>>>()
{
  if (!lazy cache variable for type metadata for HStack<ModifiedContent<ModifiedContent<ModifiedContent<Image, _FrameLayout>, DisableAccessibilityNodesModifier>, _EnvironmentKeyWritingModifier<Bool>>>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Rectangle, Color>, _MaskEffect<Image>>, _BlendModeEffect>, _FlexFrameLayout>, DisableAccessibilityNodesModifier>, _EnvironmentKeyWritingModifier<Bool>>(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<Image, _FrameLayout>, DisableAccessibilityNodesModifier>, _EnvironmentKeyWritingModifier<Bool>>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<Image, _FrameLayout>, DisableAccessibilityNodesModifier>);
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<Image, _FrameLayout>, DisableAccessibilityNodesModifier>, _EnvironmentKeyWritingModifier<Bool>> and conformance <> ModifiedContent<A, B>();
    unint64_t v0 = type metadata accessor for HStack();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for HStack<ModifiedContent<ModifiedContent<ModifiedContent<Image, _FrameLayout>, DisableAccessibilityNodesModifier>, _EnvironmentKeyWritingModifier<Bool>>>);
    }
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Rectangle, Color>, _MaskEffect<Image>>, _BlendModeEffect>, _FlexFrameLayout>, DisableAccessibilityNodesModifier>, _EnvironmentKeyWritingModifier<Bool>>(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Bool>, MEMORY[0x1E4FBB390], MEMORY[0x1E4F411E8]);
    unint64_t v4 = type metadata accessor for ModifiedContent();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<Image, _FrameLayout>, DisableAccessibilityNodesModifier>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<Image, _FrameLayout>, DisableAccessibilityNodesModifier>)
  {
    type metadata accessor for _MaskEffect<Image>(255, &lazy cache variable for type metadata for ModifiedContent<Image, _FrameLayout>, MEMORY[0x1E4F3F6A0], MEMORY[0x1E4F3FBA0]);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<Image, _FrameLayout>, DisableAccessibilityNodesModifier>);
    }
  }
}

void type metadata accessor for _MaskEffect<Image>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, void))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, MEMORY[0x1E4F41558]);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<Image, _FrameLayout>, DisableAccessibilityNodesModifier>, _EnvironmentKeyWritingModifier<Bool>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<Image, _FrameLayout>, DisableAccessibilityNodesModifier>, _EnvironmentKeyWritingModifier<Bool>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<Image, _FrameLayout>, DisableAccessibilityNodesModifier>, _EnvironmentKeyWritingModifier<Bool>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Rectangle, Color>, _MaskEffect<Image>>, _BlendModeEffect>, _FlexFrameLayout>, DisableAccessibilityNodesModifier>, _EnvironmentKeyWritingModifier<Bool>>(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<Image, _FrameLayout>, DisableAccessibilityNodesModifier>, _EnvironmentKeyWritingModifier<Bool>>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<Image, _FrameLayout>, DisableAccessibilityNodesModifier>);
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Image, _FrameLayout>, DisableAccessibilityNodesModifier> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<Image, _FrameLayout>, DisableAccessibilityNodesModifier> and conformance <> ModifiedContent<A, B>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<Image, _FrameLayout>, DisableAccessibilityNodesModifier>, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<Image, _FrameLayout> and conformance <> ModifiedContent<A, B>);
    lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<Bool> and conformance _EnvironmentKeyWritingModifier<A>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<Image, _FrameLayout>, DisableAccessibilityNodesModifier>, _EnvironmentKeyWritingModifier<Bool>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<Image, _FrameLayout> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<Image, _FrameLayout> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<Image, _FrameLayout> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for _MaskEffect<Image>(255, &lazy cache variable for type metadata for ModifiedContent<Image, _FrameLayout>, MEMORY[0x1E4F3F6A0], MEMORY[0x1E4F3FBA0]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<Image, _FrameLayout> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for AddGestureModifier<_EndedGesture<_ChangedGesture<DragGesture>>>()
{
  if (!lazy cache variable for type metadata for AddGestureModifier<_EndedGesture<_ChangedGesture<DragGesture>>>)
  {
    type metadata accessor for _EndedGesture<_ChangedGesture<DragGesture>>(255);
    lazy protocol witness table accessor for type _OverlayModifier<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image?, _OpacityEffect>, _FlexFrameLayout>, _FixedSizeLayout>, AccessibilityAttachmentModifier>, _PaddingLayout>, _FlexFrameLayout>, _AllowsHitTestingModifier>> and conformance _OverlayModifier<A>(&lazy protocol witness table cache variable for type _EndedGesture<_ChangedGesture<DragGesture>> and conformance _EndedGesture<A>, type metadata accessor for _EndedGesture<_ChangedGesture<DragGesture>>);
    unint64_t v0 = type metadata accessor for AddGestureModifier();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for AddGestureModifier<_EndedGesture<_ChangedGesture<DragGesture>>>);
    }
  }
}

void type metadata accessor for _EndedGesture<_ChangedGesture<DragGesture>>(uint64_t a1)
{
}

void type metadata accessor for _EndedGesture<_ChangedGesture<IndirectScrollGesture>>(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t), unint64_t *a4, void (*a5)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    lazy protocol witness table accessor for type _OverlayModifier<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image?, _OpacityEffect>, _FlexFrameLayout>, _FixedSizeLayout>, AccessibilityAttachmentModifier>, _PaddingLayout>, _FlexFrameLayout>, _AllowsHitTestingModifier>> and conformance _OverlayModifier<A>(a4, a5);
    unint64_t v8 = type metadata accessor for _EndedGesture();
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

void type metadata accessor for _ChangedGesture<DragGesture>()
{
  if (!lazy cache variable for type metadata for _ChangedGesture<DragGesture>)
  {
    lazy protocol witness table accessor for type _OverlayModifier<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image?, _OpacityEffect>, _FlexFrameLayout>, _FixedSizeLayout>, AccessibilityAttachmentModifier>, _PaddingLayout>, _FlexFrameLayout>, _AllowsHitTestingModifier>> and conformance _OverlayModifier<A>(&lazy protocol witness table cache variable for type DragGesture.Value and conformance DragGesture.Value, (void (*)(uint64_t))type metadata accessor for DragGesture.Value);
    unint64_t v0 = type metadata accessor for _ChangedGesture();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ChangedGesture<DragGesture>);
    }
  }
}

void type metadata accessor for _EndedGesture<_ChangedGesture<IndirectScrollGesture>>(uint64_t a1)
{
}

void type metadata accessor for _ChangedGesture<IndirectScrollGesture>()
{
  if (!lazy cache variable for type metadata for _ChangedGesture<IndirectScrollGesture>)
  {
    lazy protocol witness table accessor for type IndirectScrollGesture and conformance IndirectScrollGesture();
    lazy protocol witness table accessor for type _OverlayModifier<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image?, _OpacityEffect>, _FlexFrameLayout>, _FixedSizeLayout>, AccessibilityAttachmentModifier>, _PaddingLayout>, _FlexFrameLayout>, _AllowsHitTestingModifier>> and conformance _OverlayModifier<A>(&lazy protocol witness table cache variable for type CGSize and conformance CGSize, type metadata accessor for CGSize);
    unint64_t v0 = type metadata accessor for _ChangedGesture();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ChangedGesture<IndirectScrollGesture>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type IndirectScrollGesture and conformance IndirectScrollGesture()
{
  unint64_t result = lazy protocol witness table cache variable for type IndirectScrollGesture and conformance IndirectScrollGesture;
  if (!lazy protocol witness table cache variable for type IndirectScrollGesture and conformance IndirectScrollGesture)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IndirectScrollGesture and conformance IndirectScrollGesture);
  }
  return result;
}

void type metadata accessor for _OverlayModifier<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image?, _OpacityEffect>, _FlexFrameLayout>, _FixedSizeLayout>, AccessibilityAttachmentModifier>, _PaddingLayout>, _FlexFrameLayout>, _AllowsHitTestingModifier>>()
{
  if (!lazy cache variable for type metadata for _OverlayModifier<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image?, _OpacityEffect>, _FlexFrameLayout>, _FixedSizeLayout>, AccessibilityAttachmentModifier>, _PaddingLayout>, _FlexFrameLayout>, _AllowsHitTestingModifier>>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image?, _OpacityEffect>, _FlexFrameLayout>, _FixedSizeLayout>, AccessibilityAttachmentModifier>, _PaddingLayout>, _FlexFrameLayout>, _AllowsHitTestingModifier>(255);
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Image, _FrameLayout>, DisableAccessibilityNodesModifier> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image?, _OpacityEffect>, _FlexFrameLayout>, _FixedSizeLayout>, AccessibilityAttachmentModifier>, _PaddingLayout>, _FlexFrameLayout>, _AllowsHitTestingModifier> and conformance <> ModifiedContent<A, B>, type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image?, _OpacityEffect>, _FlexFrameLayout>, _FixedSizeLayout>, AccessibilityAttachmentModifier>, _PaddingLayout>, _FlexFrameLayout>, _AllowsHitTestingModifier>, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image?, _OpacityEffect>, _FlexFrameLayout>, _FixedSizeLayout>, AccessibilityAttachmentModifier>, _PaddingLayout>, _FlexFrameLayout> and conformance <> ModifiedContent<A, B>);
    unint64_t v0 = type metadata accessor for _OverlayModifier();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _OverlayModifier<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image?, _OpacityEffect>, _FlexFrameLayout>, _FixedSizeLayout>, AccessibilityAttachmentModifier>, _PaddingLayout>, _FlexFrameLayout>, _AllowsHitTestingModifier>>);
    }
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image?, _OpacityEffect>, _FlexFrameLayout>, _FixedSizeLayout>, AccessibilityAttachmentModifier>, _PaddingLayout>, _FlexFrameLayout>, _AllowsHitTestingModifier>(uint64_t a1)
{
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image?, _OpacityEffect>, _FlexFrameLayout>, _FixedSizeLayout>, AccessibilityAttachmentModifier>, _PaddingLayout>, _FlexFrameLayout>(uint64_t a1)
{
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image?, _OpacityEffect>, _FlexFrameLayout>, _FixedSizeLayout>, AccessibilityAttachmentModifier>, _PaddingLayout>(uint64_t a1)
{
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image?, _OpacityEffect>, _FlexFrameLayout>, _FixedSizeLayout>, AccessibilityAttachmentModifier>(uint64_t a1)
{
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<Image?, _OpacityEffect>, _FlexFrameLayout>, _FixedSizeLayout>(uint64_t a1)
{
}

void type metadata accessor for ModifiedContent<ModifiedContent<Image?, _OpacityEffect>, _FlexFrameLayout>(uint64_t a1)
{
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Rectangle, Color>, _MaskEffect<Image>>, _BlendModeEffect>, _FlexFrameLayout>, DisableAccessibilityNodesModifier>(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = type metadata accessor for ModifiedContent();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

void type metadata accessor for ModifiedContent<Image?, _OpacityEffect>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<Image?, _OpacityEffect>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for Image?, MEMORY[0x1E4F41558], MEMORY[0x1E4FBB718]);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<Image?, _OpacityEffect>);
    }
  }
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image?, _OpacityEffect>, _FlexFrameLayout>, _FixedSizeLayout>, AccessibilityAttachmentModifier>, _PaddingLayout>, _FlexFrameLayout> and conformance <> ModifiedContent<A, B>()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Image, _FrameLayout>, DisableAccessibilityNodesModifier> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image?, _OpacityEffect>, _FlexFrameLayout>, _FixedSizeLayout>, AccessibilityAttachmentModifier>, _PaddingLayout>, _FlexFrameLayout> and conformance <> ModifiedContent<A, B>, type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image?, _OpacityEffect>, _FlexFrameLayout>, _FixedSizeLayout>, AccessibilityAttachmentModifier>, _PaddingLayout>, _FlexFrameLayout>, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image?, _OpacityEffect>, _FlexFrameLayout>, _FixedSizeLayout>, AccessibilityAttachmentModifier>, _PaddingLayout> and conformance <> ModifiedContent<A, B>);
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image?, _OpacityEffect>, _FlexFrameLayout>, _FixedSizeLayout>, AccessibilityAttachmentModifier>, _PaddingLayout> and conformance <> ModifiedContent<A, B>()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Image, _FrameLayout>, DisableAccessibilityNodesModifier> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image?, _OpacityEffect>, _FlexFrameLayout>, _FixedSizeLayout>, AccessibilityAttachmentModifier>, _PaddingLayout> and conformance <> ModifiedContent<A, B>, type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image?, _OpacityEffect>, _FlexFrameLayout>, _FixedSizeLayout>, AccessibilityAttachmentModifier>, _PaddingLayout>, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image?, _OpacityEffect>, _FlexFrameLayout>, _FixedSizeLayout>, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>);
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image?, _OpacityEffect>, _FlexFrameLayout>, _FixedSizeLayout>, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Image, _FrameLayout>, DisableAccessibilityNodesModifier> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image?, _OpacityEffect>, _FlexFrameLayout>, _FixedSizeLayout>, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>, type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image?, _OpacityEffect>, _FlexFrameLayout>, _FixedSizeLayout>, AccessibilityAttachmentModifier>, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<Image?, _OpacityEffect>, _FlexFrameLayout>, _FixedSizeLayout> and conformance <> ModifiedContent<A, B>);
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<Image?, _OpacityEffect>, _FlexFrameLayout>, _FixedSizeLayout> and conformance <> ModifiedContent<A, B>()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Image, _FrameLayout>, DisableAccessibilityNodesModifier> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<Image?, _OpacityEffect>, _FlexFrameLayout>, _FixedSizeLayout> and conformance <> ModifiedContent<A, B>, type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<Image?, _OpacityEffect>, _FlexFrameLayout>, _FixedSizeLayout>, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Image?, _OpacityEffect>, _FlexFrameLayout> and conformance <> ModifiedContent<A, B>);
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Image?, _OpacityEffect>, _FlexFrameLayout> and conformance <> ModifiedContent<A, B>()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Image, _FrameLayout>, DisableAccessibilityNodesModifier> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<Image?, _OpacityEffect>, _FlexFrameLayout> and conformance <> ModifiedContent<A, B>, type metadata accessor for ModifiedContent<ModifiedContent<Image?, _OpacityEffect>, _FlexFrameLayout>, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<Image?, _OpacityEffect> and conformance <> ModifiedContent<A, B>);
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<Image?, _OpacityEffect> and conformance <> ModifiedContent<A, B>()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Image, _FrameLayout>, DisableAccessibilityNodesModifier> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<Image?, _OpacityEffect> and conformance <> ModifiedContent<A, B>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<Image?, _OpacityEffect>, (void (*)(void))lazy protocol witness table accessor for type Image? and conformance <A> A?);
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Image, _FrameLayout>, DisableAccessibilityNodesModifier> and conformance <> ModifiedContent<A, B>(unint64_t *a1, void (*a2)(uint64_t), void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    a3();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Image? and conformance <A> A?()
{
  unint64_t result = lazy protocol witness table cache variable for type Image? and conformance <A> A?;
  if (!lazy protocol witness table cache variable for type Image? and conformance <A> A?)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for Image?, MEMORY[0x1E4F41558], MEMORY[0x1E4FBB718]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Image? and conformance <A> A?);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type _OverlayModifier<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image?, _OpacityEffect>, _FlexFrameLayout>, _FixedSizeLayout>, AccessibilityAttachmentModifier>, _PaddingLayout>, _FlexFrameLayout>, _AllowsHitTestingModifier>> and conformance _OverlayModifier<A>(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void type metadata accessor for _ContentShapeModifier<RoundedRectangle>()
{
  if (!lazy cache variable for type metadata for _ContentShapeModifier<RoundedRectangle>)
  {
    lazy protocol witness table accessor for type RoundedRectangle and conformance RoundedRectangle();
    unint64_t v0 = type metadata accessor for _ContentShapeModifier();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ContentShapeModifier<RoundedRectangle>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type RoundedRectangle and conformance RoundedRectangle()
{
  unint64_t result = lazy protocol witness table cache variable for type RoundedRectangle and conformance RoundedRectangle;
  if (!lazy protocol witness table cache variable for type RoundedRectangle and conformance RoundedRectangle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RoundedRectangle and conformance RoundedRectangle);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type RoundedRectangle and conformance RoundedRectangle;
  if (!lazy protocol witness table cache variable for type RoundedRectangle and conformance RoundedRectangle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RoundedRectangle and conformance RoundedRectangle);
  }
  return result;
}

BOOL AccessibilityLargeContentViewTree.hasValue.getter()
{
  outlined init with take of AccessibilityLargeContentViewTree(v0, v14);
  outlined init with take of AccessibilityLargeContentViewTree(v14, v15);
  int Enum = getEnumTag for AccessibilityLargeContentViewTree((uint64_t)v15);
  if (!Enum) {
    return *(unsigned char *)(destructiveProjectEnumData for AccessibilityLargeContentViewTree((uint64_t)v15) + 232) == 2;
  }
  if (Enum == 1)
  {
    uint64_t v2 = destructiveProjectEnumData for AccessibilityLargeContentViewTree((uint64_t)v15);
    uint64_t v3 = *(void *)v2;
    uint64_t v4 = *(void *)(*(void *)v2 + 16);
    if (v4)
    {
      outlined init with take of AccessibilityLargeContentViewTree(v14, v13);
      destructiveProjectEnumData for AccessibilityLargeContentViewTree((uint64_t)v13);
      swift_bridgeObjectRetain();
      outlined init with take of AccessibilityLargeContentViewTree((long long *)(v3 + 32), v12);
      uint64_t v5 = outlined init with take of AccessibilityLargeContentViewTree(v12, v11);
      if (AccessibilityLargeContentViewTree.hasValue.getter(v5))
      {
LABEL_8:
        outlined release of AccessibilityLargeContentViewTree((uint64_t)v14, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, char))outlined consume of AccessibilityLargeContentViewTree);
        return 1;
      }
      uint64_t v6 = (long long *)(v3 + 272);
      while (--v4)
      {
        unsigned int v7 = v6 + 15;
        outlined init with take of AccessibilityLargeContentViewTree(v6, v12);
        unint64_t v8 = outlined init with take of AccessibilityLargeContentViewTree(v12, v11);
        char v9 = AccessibilityLargeContentViewTree.hasValue.getter(v8);
        uint64_t v6 = v7;
        if (v9) {
          goto LABEL_8;
        }
      }
      outlined release of AccessibilityLargeContentViewTree((uint64_t)v14, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, char))outlined consume of AccessibilityLargeContentViewTree);
    }
  }
  return 0;
}

uint64_t AccessibilityLargeContentViewTree.hitTest(at:)@<X0>(_OWORD *a1@<X8>, CGFloat a2@<D0>, CGFloat a3@<D1>)
{
  outlined init with take of AccessibilityLargeContentViewTree(v3, v58);
  outlined init with take of AccessibilityLargeContentViewTree(v58, v59);
  int Enum = getEnumTag for AccessibilityLargeContentViewTree((uint64_t)v59);
  if (!Enum)
  {
    uint64_t v15 = destructiveProjectEnumData for AccessibilityLargeContentViewTree((uint64_t)v59);
    if (*(unsigned char *)(v15 + 232) == 2)
    {
      int v16 = (long long *)v15;
      CGFloat v17 = *(double *)(v15 + 200);
      CGFloat v18 = *(double *)(v15 + 208);
      CGFloat v19 = *(double *)(v15 + 216);
      CGFloat v20 = *(double *)(v15 + 224);
      outlined init with take of AccessibilityLargeContentViewTree(v58, v57);
      uint64_t v21 = destructiveProjectEnumData for AccessibilityLargeContentViewTree((uint64_t)v57);
      outlined retain of AccessibilityLargeContentViewItem(v21);
      v61.origin.x = v17;
      v61.origin.y = v18;
      v61.size.width = v19;
      v61.size.height = v20;
      v60.x = a2;
      v60.y = a3;
      if (CGRectContainsPoint(v61, v60))
      {
        long long v25 = *v16;
        long long v26 = v16[1];
        v55[2] = v16[2];
        v55[1] = v26;
        v55[0] = v25;
        long long v27 = v16[3];
        long long v28 = v16[4];
        long long v29 = v16[5];
        v55[6] = v16[6];
        v55[5] = v29;
        v55[4] = v28;
        v55[3] = v27;
        long long v30 = v16[7];
        long long v31 = v16[8];
        long long v32 = v16[9];
        v55[10] = v16[10];
        v55[9] = v32;
        v55[8] = v31;
        v55[7] = v30;
        long long v33 = v16[11];
        long long v34 = v16[12];
        long long v35 = v16[13];
        *(_OWORD *)((char *)v56 + 9) = *(long long *)((char *)v16 + 217);
        v56[0] = v35;
        v55[12] = v34;
        v55[11] = v33;
        destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(v55, v22, v23, v24);
        uint64_t v36 = v55;
        return outlined init with take of Image.Resolved?((uint64_t)v36, (uint64_t)a1, (unint64_t *)&lazy cache variable for type metadata for AccessibilityLargeContentViewItem?, (uint64_t)&type metadata for AccessibilityLargeContentViewItem);
      }
LABEL_11:
      outlined release of AccessibilityLargeContentViewTree((uint64_t)v58, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, char))outlined consume of AccessibilityLargeContentViewTree);
    }
LABEL_12:
    _s7SwiftUI33AccessibilityLargeContentViewItemVSgWOi0_(v57);
    uint64_t v36 = v57;
    return outlined init with take of Image.Resolved?((uint64_t)v36, (uint64_t)a1, (unint64_t *)&lazy cache variable for type metadata for AccessibilityLargeContentViewItem?, (uint64_t)&type metadata for AccessibilityLargeContentViewItem);
  }
  if (Enum != 1) {
    goto LABEL_12;
  }
  uint64_t v8 = destructiveProjectEnumData for AccessibilityLargeContentViewTree((uint64_t)v59);
  uint64_t v9 = *(void *)v8;
  uint64_t v10 = *(void *)(*(void *)v8 + 16);
  if (!v10) {
    goto LABEL_12;
  }
  unsigned int v11 = (long long *)(v9 + 32);
  outlined init with take of AccessibilityLargeContentViewTree(v58, v57);
  destructiveProjectEnumData for AccessibilityLargeContentViewTree((uint64_t)v57);
  swift_bridgeObjectRetain();
  for (unint64_t i = 0; ; ++i)
  {
    outlined init with take of AccessibilityLargeContentViewTree(v11, v53);
    int v13 = outlined init with take of AccessibilityLargeContentViewTree(v53, v51);
    AccessibilityLargeContentViewTree.hitTest(at:)(v52, v13, a2, a3);
    outlined init with take of Image.Resolved?((uint64_t)v52, (uint64_t)v54, (unint64_t *)&lazy cache variable for type metadata for AccessibilityLargeContentViewItem?, (uint64_t)&type metadata for AccessibilityLargeContentViewItem);
    outlined release of AccessibilityLargeContentViewTree((uint64_t)v54, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, char))outlined consume of AccessibilityLargeContentViewItem?);
    outlined init with take of Image.Resolved?((uint64_t)v54, (uint64_t)v55, (unint64_t *)&lazy cache variable for type metadata for AccessibilityLargeContentViewItem?, (uint64_t)&type metadata for AccessibilityLargeContentViewItem);
    uint64_t result = _s7SwiftUI33AccessibilityLargeContentViewItemVSgWOg((uint64_t)v55);
    if (result != 1) {
      break;
    }
    if (v10 - 1 == i) {
      goto LABEL_11;
    }
    v11 += 15;
  }
  if (i >= *(void *)(v9 + 16))
  {
    __break(1u);
  }
  else
  {
    outlined init with take of AccessibilityLargeContentViewTree(v11, v50);
    char v37 = outlined init with take of AccessibilityLargeContentViewTree(v50, v51);
    AccessibilityLargeContentViewTree.hitTest(at:)(v52, v37, a2, a3);
    outlined init with take of Image.Resolved?((uint64_t)v52, (uint64_t)v51, (unint64_t *)&lazy cache variable for type metadata for AccessibilityLargeContentViewItem?, (uint64_t)&type metadata for AccessibilityLargeContentViewItem);
    outlined init with take of Image.Resolved?((uint64_t)v51, (uint64_t)v52, (unint64_t *)&lazy cache variable for type metadata for AccessibilityLargeContentViewItem?, (uint64_t)&type metadata for AccessibilityLargeContentViewItem);
    uint64_t result = _s7SwiftUI33AccessibilityLargeContentViewItemVSgWOg((uint64_t)v52);
    if (result != 1)
    {
      outlined init with take of Image.Resolved?((uint64_t)v51, (uint64_t)v48, (unint64_t *)&lazy cache variable for type metadata for AccessibilityLargeContentViewItem?, (uint64_t)&type metadata for AccessibilityLargeContentViewItem);
      long long v38 = v49[0];
      a1[12] = v48[12];
      a1[13] = v38;
      *(_OWORD *)((char *)a1 + 217) = *(_OWORD *)((char *)v49 + 9);
      long long v39 = v48[9];
      a1[8] = v48[8];
      a1[9] = v39;
      long long v40 = v48[11];
      a1[10] = v48[10];
      a1[11] = v40;
      long long v41 = v48[5];
      a1[4] = v48[4];
      a1[5] = v41;
      long long v42 = v48[7];
      a1[6] = v48[6];
      a1[7] = v42;
      long long v43 = v48[1];
      *a1 = v48[0];
      a1[1] = v43;
      long long v44 = v48[3];
      a1[2] = v48[2];
      a1[3] = v44;
      destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(a1, v45, v46, v47);
      return outlined release of AccessibilityLargeContentViewTree((uint64_t)v58, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, char))outlined consume of AccessibilityLargeContentViewTree);
    }
  }
  __break(1u);
  return result;
}

uint64_t protocol witness for static ViewModifier._viewListCount(inputs:body:) in conformance AccessibilityLargeContentViewModifier<A>()
{
  return MEMORY[0x18C10D3A0]();
}

void protocol witness for ViewModifier.body(content:) in conformance AccessibilityLargeContentViewModifier<A>()
{
}

_OWORD *closure #1 in AccessibilityLargeContentViewHitTestingTransform.value.getter(long long *a1)
{
  uint64_t result = (_OWORD *)AGGraphGetValue();
  if ((*(unsigned char *)result & 1) == 0)
  {
    outlined init with take of AccessibilityLargeContentViewTree(a1, v3);
    outlined release of AccessibilityLargeContentViewTree((uint64_t)v3, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, char))outlined consume of AccessibilityLargeContentViewTree);
    _s7SwiftUI33AccessibilityLargeContentViewTreeOWOi1_((uint64_t)v4);
    return outlined init with take of AccessibilityLargeContentViewTree(v4, a1);
  }
  return result;
}

uint64_t protocol witness for Rule.value.getter in conformance AccessibilityLargeContentViewHitTestingTransform@<X0>(void *a1@<X8>)
{
  int v3 = *v1;
  uint64_t v4 = swift_allocObject();
  *(_DWORD *)(v4 + 16) = v3;
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = partial apply for closure #1 in AccessibilityLargeContentViewHitTestingTransform.value.getter;
  *(void *)(result + 24) = v4;
  *a1 = thunk for @escaping @callee_guaranteed (@inout AccessibilityLargeContentViewTree) -> ()partial apply;
  a1[1] = result;
  return result;
}

uint64_t (*AccessibilityLargeContentViewTransform.value.getter())(long long *a1)
{
  uint64_t v0 = type metadata accessor for PlatformItemList.Item();
  MEMORY[0x1F4188790](v0 - 8);
  uint64_t v2 = (char *)&v35 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v3);
  uint64_t v5 = (id *)((char *)&v35 - v4);
  uint64_t Value = AGGraphGetValue();
  uint64_t v55 = *(void *)Value;
  long long v56 = *(_OWORD *)(Value + 8);
  long long v57 = *(_OWORD *)(Value + 24);
  long long v39 = *(_OWORD *)AGGraphGetValue();
  uint64_t v7 = swift_retain();
  *(double *)&unint64_t v8 = MEMORY[0x18C10C240](v7);
  ViewTransform.appendPosition(_:)((CGPoint)__PAIR128__(v9, v8));
  uint64_t v10 = (long long *)AGGraphGetValue();
  long long v11 = v10[1];
  long long v39 = *v10;
  long long v40 = v11;
  double v12 = MEMORY[0x18C114450]();
  long long v52 = 0uLL;
  double v53 = v12;
  uint64_t v54 = v13;
  *(void *)&long long v41 = 0;
  long long v39 = 0u;
  long long v40 = 0u;
  BYTE8(v41) = 2;
  uint64_t v36 = v55;
  long long v37 = v56;
  long long v38 = v57;
  CGRect.convert(to:transform:)();
  outlined destroy of CoordinateSpace((uint64_t)&v39);
  AGGraphGetValue();
  uint64_t v14 = swift_bridgeObjectRetain();
  PlatformItemList.mergedContentItem.getter(v14, (uint64_t)v5);
  swift_bridgeObjectRelease();
  if (!*v5)
  {
    outlined init with copy of PlatformItemList.Item((uint64_t)v5, (uint64_t)v2);
    CGFloat v19 = (void *)*((void *)v2 + 72);
    if (v19) {
      goto LABEL_4;
    }
    goto LABEL_6;
  }
  id v15 = objc_msgSend(*v5, sel_string);
  uint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v18 = v17;

  outlined init with copy of PlatformItemList.Item((uint64_t)v5, (uint64_t)v2);
  if (!v18)
  {
    CGFloat v19 = (void *)*((void *)v2 + 72);
    if (v19)
    {
LABEL_4:
      id v20 = objc_msgSend(v19, sel_string);
      uint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v18 = v21;

      goto LABEL_7;
    }
LABEL_6:
    uint64_t v16 = 0;
    uint64_t v18 = 0;
  }
LABEL_7:
  outlined destroy of PlatformItemList.Item((uint64_t)v2);
  uint64_t v22 = MEMORY[0x1E4F41550];
  outlined init with take of Image.Resolved?((uint64_t)(v5 + 8), (uint64_t)&v36, (unint64_t *)&lazy cache variable for type metadata for Image.Resolved?, MEMORY[0x1E4F41550]);
  long long v35 = v52;
  double v23 = v53;
  uint64_t v24 = v54;
  char v25 = *(unsigned char *)AGGraphGetValue();
  outlined retain of Image.Resolved?((uint64_t)&v36, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, int))outlined copy of Image.Resolved?);
  outlined destroy of PlatformItemList.Item((uint64_t)v5);
  swift_release();
  *(void *)&long long v39 = v16;
  *((void *)&v39 + 1) = v18;
  outlined init with take of Image.Resolved?((uint64_t)&v36, (uint64_t)&v40, (unint64_t *)&lazy cache variable for type metadata for Image.Resolved?, v22);
  *(_OWORD *)((char *)v51 + 8) = v35;
  *((double *)&v51[1] + 1) = v23;
  *(void *)&v51[2] = v24;
  BYTE8(v51[2]) = v25;
  long long v26 = (_OWORD *)swift_allocObject();
  long long v27 = v51[1];
  v26[13] = v51[0];
  v26[14] = v27;
  *(_OWORD *)((char *)v26 + 233) = *(_OWORD *)((char *)&v51[1] + 9);
  long long v28 = v48;
  v26[9] = v47;
  v26[10] = v28;
  long long v29 = v50;
  v26[11] = v49;
  v26[12] = v29;
  long long v30 = v44;
  v26[5] = v43;
  v26[6] = v30;
  long long v31 = v46;
  v26[7] = v45;
  v26[8] = v31;
  long long v32 = v40;
  v26[1] = v39;
  v26[2] = v32;
  long long v33 = v42;
  v26[3] = v41;
  v26[4] = v33;
  return partial apply for closure #1 in AccessibilityLargeContentViewTransform.value.getter;
}

uint64_t closure #1 in AccessibilityLargeContentViewTransform.value.getter(long long *a1, long long *a2)
{
  long long v17 = a2[12];
  *(_OWORD *)uint64_t v18 = a2[13];
  *(_OWORD *)&v18[9] = *(long long *)((char *)a2 + 217);
  long long v13 = a2[8];
  long long v14 = a2[9];
  long long v15 = a2[10];
  long long v16 = a2[11];
  long long v9 = a2[4];
  long long v10 = a2[5];
  long long v11 = a2[6];
  long long v12 = a2[7];
  long long v5 = *a2;
  long long v6 = a2[1];
  long long v7 = a2[2];
  long long v8 = a2[3];
  outlined init with take of AccessibilityLargeContentViewTree(a1, v19);
  outlined release of AccessibilityLargeContentViewTree((uint64_t)v19, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, char))outlined consume of AccessibilityLargeContentViewTree);
  v20[12] = v17;
  v21[0] = *(_OWORD *)v18;
  *(_OWORD *)((char *)v21 + 9) = *(_OWORD *)&v18[9];
  v20[8] = v13;
  v20[9] = v14;
  v20[10] = v15;
  v20[11] = v16;
  v20[4] = v9;
  v20[5] = v10;
  v20[6] = v11;
  v20[7] = v12;
  v20[0] = v5;
  v20[1] = v6;
  _OWORD v20[2] = v7;
  v20[3] = v8;
  _s7SwiftUI33AccessibilityLargeContentViewTreeOWOi_((uint64_t)v20);
  outlined init with take of AccessibilityLargeContentViewTree(v20, a1);
  return outlined retain of AccessibilityLargeContentViewItem((uint64_t)a2);
}

uint64_t protocol witness for Rule.value.getter in conformance AccessibilityLargeContentViewTransform@<X0>(uint64_t (**a1)(uint64_t a1)@<X8>)
{
  uint64_t v2 = AccessibilityLargeContentViewTransform.value.getter();
  uint64_t v4 = v3;
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = v2;
  *(void *)(result + 24) = v4;
  *a1 = partial apply for thunk for @escaping @callee_guaranteed (@inout AccessibilityLargeContentViewTree) -> ();
  a1[1] = (uint64_t (*)(uint64_t))result;
  return result;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AccessibilityLargeContentViewBehavior()
{
  Swift::UInt8 v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance AccessibilityLargeContentViewBehavior()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AccessibilityLargeContentViewBehavior()
{
  Swift::UInt8 v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

unsigned __int8 *protocol witness for RawRepresentable.init(rawValue:) in conformance AccessibilityLargeContentViewBehavior@<X0>(unsigned __int8 *result@<X0>, unsigned char *a2@<X8>)
{
  unsigned int v2 = *result;
  if (v2 >= 3) {
    LOBYTE(v2) = 3;
  }
  *a2 = v2;
  return result;
}

uint64_t EnvironmentValues.accessibilityLargeContentViewerEnabled.getter()
{
  if (*(void *)(v0 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>, (uint64_t)&type metadata for AccessibilityLargeContentViewerKey, (uint64_t)&protocol witness table for AccessibilityLargeContentViewerKey, MEMORY[0x1E4F40930]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<AccessibilityLargeContentViewerKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>, (uint64_t)&type metadata for AccessibilityLargeContentViewerKey, (uint64_t)&protocol witness table for AccessibilityLargeContentViewerKey, MEMORY[0x1E4F40930]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<AccessibilityLargeContentViewerKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  return v2;
}

uint64_t EnvironmentValues.accessibilityLargeContentViewerEnabled.setter()
{
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>, (uint64_t)&type metadata for AccessibilityLargeContentViewerKey, (uint64_t)&protocol witness table for AccessibilityLargeContentViewerKey, MEMORY[0x1E4F40930]);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<AccessibilityLargeContentViewerKey> and conformance EnvironmentPropertyKey<A>();
  swift_retain();
  PropertyList.subscript.setter();
  if (*(void *)(v0 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  return swift_release();
}

uint64_t EnvironmentValues._accessibilityLargeContentViewerEnabled.getter()
{
  if (*(void *)(v0 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>, (uint64_t)&type metadata for AccessibilityLargeContentViewerKey, (uint64_t)&protocol witness table for AccessibilityLargeContentViewerKey, MEMORY[0x1E4F40930]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<AccessibilityLargeContentViewerKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>, (uint64_t)&type metadata for AccessibilityLargeContentViewerKey, (uint64_t)&protocol witness table for AccessibilityLargeContentViewerKey, MEMORY[0x1E4F40930]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<AccessibilityLargeContentViewerKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  return v2;
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<AccessibilityLargeContentViewerKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<AccessibilityLargeContentViewerKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<AccessibilityLargeContentViewerKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>, (uint64_t)&type metadata for AccessibilityLargeContentViewerKey, (uint64_t)&protocol witness table for AccessibilityLargeContentViewerKey, MEMORY[0x1E4F40930]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<AccessibilityLargeContentViewerKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

uint64_t EnvironmentValues._accessibilityLargeContentViewerEnabled.setter()
{
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>, (uint64_t)&type metadata for AccessibilityLargeContentViewerKey, (uint64_t)&protocol witness table for AccessibilityLargeContentViewerKey, MEMORY[0x1E4F40930]);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<AccessibilityLargeContentViewerKey> and conformance EnvironmentPropertyKey<A>();
  swift_retain();
  PropertyList.subscript.setter();
  if (*(void *)(v0 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  return swift_release();
}

uint64_t (*EnvironmentValues._accessibilityLargeContentViewerEnabled.modify(uint64_t a1))(uint64_t *a1)
{
  *(void *)a1 = v1;
  if (*(void *)(v1 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>, (uint64_t)&type metadata for AccessibilityLargeContentViewerKey, (uint64_t)&protocol witness table for AccessibilityLargeContentViewerKey, MEMORY[0x1E4F40930]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<AccessibilityLargeContentViewerKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>, (uint64_t)&type metadata for AccessibilityLargeContentViewerKey, (uint64_t)&protocol witness table for AccessibilityLargeContentViewerKey, MEMORY[0x1E4F40930]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<AccessibilityLargeContentViewerKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a1 + 9);
  return EnvironmentValues._accessibilityLargeContentViewerEnabled.modify;
}

uint64_t EnvironmentValues._accessibilityLargeContentViewerEnabled.modify(uint64_t *a1)
{
  uint64_t v1 = *a1;
  *((unsigned char *)a1 + 9) = *((unsigned char *)a1 + 8);
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>, (uint64_t)&type metadata for AccessibilityLargeContentViewerKey, (uint64_t)&protocol witness table for AccessibilityLargeContentViewerKey, MEMORY[0x1E4F40930]);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<AccessibilityLargeContentViewerKey> and conformance EnvironmentPropertyKey<A>();
  swift_retain();
  PropertyList.subscript.setter();
  if (*(void *)(v1 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }

  return swift_release();
}

uint64_t View.accessibilityShowsLargeContentViewer()()
{
  return View.accessibilityShowsLargeContentViewer(_:)(2);
}

uint64_t View.accessibilityShowsLargeContentViewer(_:)(char a1)
{
  *(unsigned char *)(swift_allocObject() + 16) = a1;
  View.transformPreference<A>(_:_:)();

  return swift_release();
}

uint64_t sub_1876A3B4C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  return keypath_getTm(a1, a2, (uint64_t (*)(uint64_t, uint64_t))EnvironmentValues.accessibilityLargeContentViewerEnabled.getter, a3);
}

uint64_t sub_1876A3B64()
{
  return EnvironmentValues.accessibilityLargeContentViewerEnabled.setter();
}

uint64_t sub_1876A3B8C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  return keypath_getTm(a1, a2, (uint64_t (*)(uint64_t, uint64_t))EnvironmentValues._accessibilityLargeContentViewerEnabled.getter, a3);
}

uint64_t sub_1876A3BA4()
{
  return EnvironmentValues._accessibilityLargeContentViewerEnabled.setter();
}

uint64_t sub_1876A3BCC()
{
  return swift_getWitnessTable();
}

uint64_t sub_1876A3C3C()
{
  return swift_getWitnessTable();
}

void type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = a5(0, a3, a4);
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

unint64_t lazy protocol witness table accessor for type _PreferenceTransformModifier<AccessibilityLargeContentViewTree.Key> and conformance _PreferenceTransformModifier<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type _PreferenceTransformModifier<AccessibilityLargeContentViewTree.Key> and conformance _PreferenceTransformModifier<A>;
  if (!lazy protocol witness table cache variable for type _PreferenceTransformModifier<AccessibilityLargeContentViewTree.Key> and conformance _PreferenceTransformModifier<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for _PreferenceTransformModifier<AccessibilityLargeContentViewTree.Key>, (uint64_t)&type metadata for AccessibilityLargeContentViewTree.Key, (uint64_t)&protocol witness table for AccessibilityLargeContentViewTree.Key, MEMORY[0x1E4F41108]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _PreferenceTransformModifier<AccessibilityLargeContentViewTree.Key> and conformance _PreferenceTransformModifier<A>);
  }
  return result;
}

void outlined copy of AccessibilityLargeContentViewTree(uint64_t a1, uint64_t a2, void *a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, unint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,unsigned __int8 a30)
{
  int v30 = a30 >> 6;
  if (v30 == 1)
  {
    swift_bridgeObjectRetain();
  }
  else if (!v30)
  {
    swift_bridgeObjectRetain();
    outlined copy of Image.Resolved?(a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21,
      a22,
      a23,
      a24);
  }
}

void *outlined copy of Image.Resolved?(void *result, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, unint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22)
{
  if (a16 >> 1 != 4294967294)
  {
    outlined copy of GraphicsImage.Contents?(result, a2);
    outlined copy of AccessibilityImageLabel?(a14, a15, a16);
    id v22 = a22;
    swift_unknownObjectRetain();
    return (void *)swift_retain();
  }
  return result;
}

void destroy for AccessibilityLargeContentViewTree(uint64_t a1)
{
  outlined consume of AccessibilityLargeContentViewTree(*(void *)a1, *(void *)(a1 + 8), *(void **)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 72), *(void *)(a1 + 80), *(void *)(a1 + 88), *(void *)(a1 + 96), *(void *)(a1 + 104), *(void *)(a1 + 112), *(void *)(a1 + 120), *(void *)(a1 + 128), *(void *)(a1 + 136), *(void *)(a1 + 144),
    *(void *)(a1 + 152),
    *(void *)(a1 + 160),
    *(void *)(a1 + 168),
    *(void *)(a1 + 176),
    *(void **)(a1 + 184),
    *(void *)(a1 + 192),
    *(void *)(a1 + 200),
    *(void *)(a1 + 208),
    *(void *)(a1 + 216),
    *(void *)(a1 + 224),
    *(unsigned char *)(a1 + 232));
}

uint64_t initializeWithCopy for AccessibilityLargeContentViewTree(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)(a2 + 16);
  uint64_t v4 = *(void *)(a2 + 24);
  uint64_t v5 = *(void *)(a2 + 32);
  uint64_t v6 = *(void *)(a2 + 40);
  uint64_t v7 = *(void *)(a2 + 48);
  uint64_t v8 = *(void *)(a2 + 56);
  uint64_t v13 = *(void *)(a2 + 72);
  uint64_t v14 = *(void *)(a2 + 80);
  uint64_t v15 = *(void *)(a2 + 88);
  uint64_t v16 = *(void *)(a2 + 96);
  uint64_t v17 = *(void *)(a2 + 104);
  uint64_t v18 = *(void *)(a2 + 112);
  uint64_t v19 = *(void *)(a2 + 120);
  uint64_t v20 = *(void *)(a2 + 128);
  unint64_t v21 = *(void *)(a2 + 136);
  uint64_t v22 = *(void *)(a2 + 144);
  uint64_t v23 = *(void *)(a2 + 152);
  uint64_t v24 = *(void *)(a2 + 160);
  uint64_t v25 = *(void *)(a2 + 168);
  uint64_t v26 = *(void *)(a2 + 176);
  long long v27 = *(void **)(a2 + 184);
  uint64_t v28 = *(void *)(a2 + 192);
  uint64_t v29 = *(void *)(a2 + 200);
  uint64_t v30 = *(void *)(a2 + 208);
  uint64_t v31 = *(void *)(a2 + 216);
  uint64_t v32 = *(void *)(a2 + 224);
  unsigned __int8 v33 = *(unsigned char *)(a2 + 232);
  uint64_t v9 = *(void *)(a2 + 64);
  uint64_t v11 = *(void *)(a2 + 8);
  uint64_t v10 = *(void *)a2;
  outlined copy of AccessibilityLargeContentViewTree(*(void *)a2, v11, v3, v4, v5, v6, v7, v8, v9, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22,
    v23,
    v24,
    v25,
    v26,
    v27,
    v28,
    v29,
    v30,
    v31,
    v32,
    v33);
  *(void *)a1 = v10;
  *(void *)(a1 + 8) = v11;
  *(void *)(a1 + 16) = v3;
  *(void *)(a1 + 24) = v4;
  *(void *)(a1 + 32) = v5;
  *(void *)(a1 + 40) = v6;
  *(void *)(a1 + 48) = v7;
  *(void *)(a1 + 56) = v8;
  *(void *)(a1 + 64) = v9;
  *(void *)(a1 + 72) = v13;
  *(void *)(a1 + 80) = v14;
  *(void *)(a1 + 88) = v15;
  *(void *)(a1 + 96) = v16;
  *(void *)(a1 + 104) = v17;
  *(void *)(a1 + 112) = v18;
  *(void *)(a1 + 120) = v19;
  *(void *)(a1 + 128) = v20;
  *(void *)(a1 + 136) = v21;
  *(void *)(a1 + 144) = v22;
  *(void *)(a1 + 152) = v23;
  *(void *)(a1 + 160) = v24;
  *(void *)(a1 + 168) = v25;
  *(void *)(a1 + 176) = v26;
  *(void *)(a1 + 184) = v27;
  *(void *)(a1 + 192) = v28;
  *(void *)(a1 + 200) = v29;
  *(void *)(a1 + 208) = v30;
  *(void *)(a1 + 216) = v31;
  *(void *)(a1 + 224) = v32;
  *(unsigned char *)(a1 + 232) = v33;
  return a1;
}

uint64_t assignWithCopy for AccessibilityLargeContentViewTree(uint64_t a1, uint64_t a2)
{
  uint64_t v52 = *(void *)a2;
  uint64_t v53 = *(void *)(a2 + 8);
  uint64_t v33 = *(void *)(a2 + 72);
  uint64_t v34 = *(void *)(a2 + 80);
  uint64_t v35 = *(void *)(a2 + 88);
  uint64_t v36 = *(void *)(a2 + 96);
  uint64_t v37 = *(void *)(a2 + 104);
  uint64_t v38 = *(void *)(a2 + 112);
  uint64_t v39 = *(void *)(a2 + 120);
  uint64_t v40 = *(void *)(a2 + 128);
  uint64_t v3 = *(void *)(a2 + 144);
  uint64_t v4 = *(void *)(a2 + 152);
  unint64_t v41 = *(void *)(a2 + 136);
  uint64_t v42 = *(void *)(a2 + 160);
  uint64_t v43 = *(void *)(a2 + 168);
  uint64_t v44 = *(void *)(a2 + 176);
  long long v45 = *(void **)(a2 + 184);
  uint64_t v46 = *(void *)(a2 + 192);
  uint64_t v47 = *(void *)(a2 + 200);
  uint64_t v48 = *(void *)(a2 + 208);
  uint64_t v49 = *(void *)(a2 + 216);
  uint64_t v50 = *(void *)(a2 + 224);
  unsigned __int8 v51 = *(unsigned char *)(a2 + 232);
  uint64_t v5 = *(void *)(a2 + 64);
  uint64_t v6 = *(void **)(a2 + 16);
  uint64_t v7 = *(void *)(a2 + 24);
  uint64_t v8 = *(void *)(a2 + 32);
  uint64_t v9 = *(void *)(a2 + 40);
  uint64_t v10 = *(void *)(a2 + 48);
  uint64_t v11 = *(void *)(a2 + 56);
  outlined copy of AccessibilityLargeContentViewTree(*(void *)a2, v53, v6, v7, v8, v9, v10, v11, v5, v33, v34, v35, v36, v37, v38, v39, v40, v41, v3,
    v4,
    v42,
    v43,
    v44,
    v45,
    v46,
    v47,
    v48,
    v49,
    v50,
    v51);
  uint64_t v12 = *(void *)a1;
  uint64_t v13 = *(void *)(a1 + 8);
  *(void *)a1 = v52;
  uint64_t v14 = *(void **)(a1 + 16);
  uint64_t v15 = *(void *)(a1 + 24);
  *(void *)(a1 + 8) = v53;
  *(void *)(a1 + 16) = v6;
  uint64_t v16 = *(void *)(a1 + 32);
  uint64_t v17 = *(void *)(a1 + 40);
  *(void *)(a1 + 24) = v7;
  *(void *)(a1 + 32) = v8;
  uint64_t v18 = *(void *)(a1 + 48);
  uint64_t v19 = *(void *)(a1 + 56);
  *(void *)(a1 + 40) = v9;
  *(void *)(a1 + 48) = v10;
  long long v20 = *(_OWORD *)(a1 + 64);
  long long v21 = *(_OWORD *)(a1 + 80);
  *(void *)(a1 + 56) = v11;
  *(void *)(a1 + 64) = v5;
  *(void *)(a1 + 72) = v33;
  *(void *)(a1 + 80) = v34;
  *(void *)(a1 + 88) = v35;
  long long v22 = *(_OWORD *)(a1 + 96);
  long long v23 = *(_OWORD *)(a1 + 112);
  *(void *)(a1 + 96) = v36;
  *(void *)(a1 + 104) = v37;
  *(void *)(a1 + 112) = v38;
  *(void *)(a1 + 120) = v39;
  long long v24 = *(_OWORD *)(a1 + 128);
  long long v25 = *(_OWORD *)(a1 + 144);
  *(void *)(a1 + 128) = v40;
  *(void *)(a1 + 136) = v41;
  *(void *)(a1 + 144) = v3;
  long long v26 = *(_OWORD *)(a1 + 160);
  long long v27 = *(_OWORD *)(a1 + 176);
  *(void *)(a1 + 152) = v4;
  *(void *)(a1 + 160) = v42;
  *(void *)(a1 + 168) = v43;
  *(void *)(a1 + 176) = v44;
  *(void *)(a1 + 184) = v45;
  long long v28 = *(_OWORD *)(a1 + 192);
  long long v29 = *(_OWORD *)(a1 + 208);
  *(void *)(a1 + 192) = v46;
  *(void *)(a1 + 200) = v47;
  *(void *)(a1 + 208) = v48;
  *(void *)(a1 + 216) = v49;
  uint64_t v30 = *(void *)(a1 + 224);
  *(void *)(a1 + 224) = v50;
  unsigned __int8 v31 = *(unsigned char *)(a1 + 232);
  *(unsigned char *)(a1 + 232) = v51;
  outlined consume of AccessibilityLargeContentViewTree(v12, v13, v14, v15, v16, v17, v18, v19, v20, *((uint64_t *)&v20 + 1), v21, *((uint64_t *)&v21 + 1), v22, *((uint64_t *)&v22 + 1), v23, *((uint64_t *)&v23 + 1), v24, *((unint64_t *)&v24 + 1), v25,
    *((uint64_t *)&v25 + 1),
    v26,
    *((uint64_t *)&v26 + 1),
    v27,
    *((void **)&v27 + 1),
    v28,
    *((uint64_t *)&v28 + 1),
    v29,
    *((uint64_t *)&v29 + 1),
    v30,
    v31);
  return a1;
}

uint64_t assignWithTake for AccessibilityLargeContentViewTree(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 224);
  char v5 = *(unsigned char *)(a2 + 232);
  uint64_t v6 = *(void *)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  uint64_t v8 = *(void **)(a1 + 16);
  uint64_t v9 = *(void *)(a1 + 24);
  uint64_t v10 = *(void *)(a1 + 32);
  uint64_t v11 = *(void *)(a1 + 40);
  uint64_t v12 = *(void *)(a1 + 48);
  uint64_t v13 = *(void *)(a1 + 56);
  long long v14 = *(_OWORD *)(a1 + 64);
  long long v15 = *(_OWORD *)(a1 + 80);
  long long v16 = *(_OWORD *)(a1 + 96);
  long long v17 = *(_OWORD *)(a1 + 112);
  long long v18 = *(_OWORD *)(a1 + 128);
  long long v19 = *(_OWORD *)(a1 + 144);
  long long v20 = *(_OWORD *)(a1 + 160);
  long long v21 = *(_OWORD *)(a1 + 176);
  long long v22 = *(_OWORD *)(a1 + 192);
  long long v23 = *(_OWORD *)(a1 + 208);
  uint64_t v24 = *(void *)(a1 + 224);
  unsigned __int8 v25 = *(unsigned char *)(a1 + 232);
  long long v26 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v26;
  long long v27 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v27;
  long long v28 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v28;
  long long v29 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = v29;
  long long v30 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v30;
  long long v31 = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 176) = v31;
  long long v32 = *(_OWORD *)(a2 + 208);
  *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 208) = v32;
  *(void *)(a1 + 224) = v4;
  *(unsigned char *)(a1 + 232) = v5;
  outlined consume of AccessibilityLargeContentViewTree(v6, v7, v8, v9, v10, v11, v12, v13, v14, *((uint64_t *)&v14 + 1), v15, *((uint64_t *)&v15 + 1), v16, *((uint64_t *)&v16 + 1), v17, *((uint64_t *)&v17 + 1), v18, *((unint64_t *)&v18 + 1), v19,
    *((uint64_t *)&v19 + 1),
    v20,
    *((uint64_t *)&v20 + 1),
    v21,
    *((void **)&v21 + 1),
    v22,
    *((uint64_t *)&v22 + 1),
    v23,
    *((uint64_t *)&v23 + 1),
    v24,
    v25);
  return a1;
}

uint64_t getEnumTag for AccessibilityLargeContentViewTree(uint64_t a1)
{
  unsigned int v1 = *(unsigned __int8 *)(a1 + 232);
  int v2 = (char)v1;
  unsigned int v3 = v1 >> 6;
  if (v2 >= 0) {
    return v3;
  }
  else {
    return (*(_DWORD *)a1 + 2);
  }
}

uint64_t destructiveProjectEnumData for AccessibilityLargeContentViewTree(uint64_t result)
{
  *(unsigned char *)(result + 232) &= 0x3Fu;
  return result;
}

uint64_t destructiveInjectEnumTag for AccessibilityLargeContentViewTree(uint64_t result, unsigned int a2)
{
  if (a2 < 2)
  {
    char v2 = *(unsigned char *)(result + 232) & 3 | ((_BYTE)a2 << 6);
    *(void *)(result + 192) &= 0xFFFFFFuLL;
    *(unsigned char *)(result + 232) = v2;
  }
  else
  {
    *(void *)unint64_t result = a2 - 2;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(unsigned char *)(result + 232) = 0x80;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for AccessibilityLargeContentViewModifier(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  unsigned int v3 = a1;
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v5 = *(_DWORD *)(v4 + 80);
  uint64_t v6 = ~v5;
  if (v5 > 7
    || (*(_DWORD *)(v4 + 80) & 0x100000) != 0
    || ((v5 + 1) & (unint64_t)~v5) + *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) > 0x18)
  {
    uint64_t v9 = *a2;
    uint64_t *v3 = *a2;
    unsigned int v3 = (uint64_t *)(v9 + ((v5 + 16) & v6));
    swift_retain();
  }
  else
  {
    *(unsigned char *)a1 = *(unsigned char *)a2;
    (*(void (**)(unint64_t, unint64_t))(v4 + 16))(((unint64_t)a1 + v5 + 1) & v6, ((unint64_t)a2 + v5 + 1) & v6);
  }
  return v3;
}

unsigned char *initializeWithTake for AccessibilityLargeContentViewModifier(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v4 + 32))((unint64_t)&a1[*(unsigned __int8 *)(v4 + 80) + 1] & ~(unint64_t)*(unsigned __int8 *)(v4 + 80), (unint64_t)&a2[*(unsigned __int8 *)(v4 + 80) + 1] & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  return a1;
}

unsigned char *assignWithTake for AccessibilityLargeContentViewModifier(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v4 + 40))((unint64_t)&a1[*(unsigned __int8 *)(v4 + 80) + 1] & ~(unint64_t)*(unsigned __int8 *)(v4 + 80), (unint64_t)&a2[*(unsigned __int8 *)(v4 + 80) + 1] & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  return a1;
}

uint64_t getEnumTagSinglePayload for AccessibilityLargeContentViewModifier(unsigned __int8 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  if (v5 <= 0xFD) {
    unsigned int v7 = 253;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  int v8 = a2 - v7;
  if (a2 <= v7) {
    goto LABEL_23;
  }
  uint64_t v9 = ((v6 + 1) & ~v6) + *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  char v10 = 8 * v9;
  if (v9 <= 3)
  {
    unsigned int v13 = ((v8 + ~(-1 << v10)) >> v10) + 1;
    if (HIWORD(v13))
    {
      int v11 = *(_DWORD *)&a1[v9];
      if (!v11) {
        goto LABEL_23;
      }
      goto LABEL_15;
    }
    if (v13 > 0xFF)
    {
      int v11 = *(unsigned __int16 *)&a1[v9];
      if (!*(_WORD *)&a1[v9]) {
        goto LABEL_23;
      }
      goto LABEL_15;
    }
    if (v13 < 2)
    {
LABEL_23:
      if (v5 > 0xFD) {
        return (*(uint64_t (**)(unint64_t))(v4 + 48))((unint64_t)&a1[v6 + 1] & ~v6);
      }
      unsigned int v15 = *a1;
      if (v15 >= 3) {
        return v15 - 2;
      }
      else {
        return 0;
      }
    }
  }
  int v11 = a1[v9];
  if (!a1[v9]) {
    goto LABEL_23;
  }
LABEL_15:
  int v14 = (v11 - 1) << v10;
  if (v9 > 3) {
    int v14 = 0;
  }
  if (v9)
  {
    if (v9 > 3) {
      LODWORD(v9) = 4;
    }
    switch((int)v9)
    {
      case 2:
        LODWORD(v9) = *(unsigned __int16 *)a1;
        break;
      case 3:
        LODWORD(v9) = *(unsigned __int16 *)a1 | (a1[2] << 16);
        break;
      case 4:
        LODWORD(v9) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v9) = *a1;
        break;
    }
  }
  return v7 + (v9 | v14) + 1;
}

void storeEnumTagSinglePayload for AccessibilityLargeContentViewModifier(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0xFD) {
    unsigned int v8 = 253;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(unsigned __int8 *)(v6 + 80);
  size_t v10 = ((v9 + 1) & ~v9) + *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  BOOL v11 = a3 >= v8;
  unsigned int v12 = a3 - v8;
  if (v12 != 0 && v11)
  {
    if (v10 <= 3)
    {
      unsigned int v16 = ((v12 + ~(-1 << (8 * v10))) >> (8 * v10)) + 1;
      if (HIWORD(v16))
      {
        int v13 = 4;
      }
      else if (v16 >= 0x100)
      {
        int v13 = 2;
      }
      else
      {
        int v13 = v16 > 1;
      }
    }
    else
    {
      int v13 = 1;
    }
  }
  else
  {
    int v13 = 0;
  }
  if (v8 < a2)
  {
    unsigned int v14 = ~v8 + a2;
    if (v10 < 4)
    {
      int v15 = (v14 >> (8 * v10)) + 1;
      if (v10)
      {
        int v17 = v14 & ~(-1 << (8 * v10));
        bzero(a1, v10);
        if (v10 == 3)
        {
          *(_WORD *)a1 = v17;
          a1[2] = BYTE2(v17);
        }
        else if (v10 == 2)
        {
          *(_WORD *)a1 = v17;
        }
        else
        {
          *a1 = v17;
        }
      }
    }
    else
    {
      bzero(a1, v10);
      *(_DWORD *)a1 = v14;
      int v15 = 1;
    }
    switch(v13)
    {
      case 1:
        a1[v10] = v15;
        return;
      case 2:
        *(_WORD *)&a1[v10] = v15;
        return;
      case 3:
        goto LABEL_39;
      case 4:
        *(_DWORD *)&a1[v10] = v15;
        return;
      default:
        return;
    }
  }
  switch(v13)
  {
    case 1:
      a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 2:
      *(_WORD *)&a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 3:
LABEL_39:
      __break(1u);
      JUMPOUT(0x1876A4BACLL);
    case 4:
      *(_DWORD *)&a1[v10] = 0;
      goto LABEL_23;
    default:
LABEL_23:
      if (a2)
      {
LABEL_24:
        if (v7 > 0xFD)
        {
          unint64_t v18 = (unint64_t)&a1[v9 + 1] & ~v9;
          long long v19 = *(void (**)(unint64_t))(v6 + 56);
          v19(v18);
        }
        else
        {
          *a1 = a2 + 2;
        }
      }
      return;
  }
}

ValueMetadata *type metadata accessor for AccessibilityLargeContentViewerKey()
{
  return &type metadata for AccessibilityLargeContentViewerKey;
}

uint64_t associated type witness table accessor for ViewModifier.Body : View in AccessibilityLargeContentViewModifier<A>()
{
  return MEMORY[0x1E4F418E8];
}

uint64_t modify #1 <A>(_:) in closure #1 in View.accessibilityShowsLargeContentViewer(_:)(long long *a1, uint64_t a2)
{
  outlined init with take of AccessibilityLargeContentViewTree(a1, v19);
  outlined init with take of AccessibilityLargeContentViewTree(v19, v20);
  uint64_t result = getEnumTag for AccessibilityLargeContentViewTree((uint64_t)v20);
  if (!result)
  {
    uint64_t result = destructiveProjectEnumData for AccessibilityLargeContentViewTree((uint64_t)v20);
    if (a2 == 1) {
      return result;
    }
    uint64_t v10 = *(void *)(result + 200);
    uint64_t v11 = *(void *)(result + 224);
    long long v12 = *(_OWORD *)(result + 208);
    long long v13 = *(_OWORD *)result;
    outlined init with take of Image.Resolved?(result + 16, (uint64_t)v14, (unint64_t *)&lazy cache variable for type metadata for Image.Resolved?, MEMORY[0x1E4F41550]);
    *((void *)&v15 + 1) = v10;
    *(_OWORD *)unsigned int v16 = v12;
    *(void *)&v16[16] = v11;
    v16[24] = a2;
    v17[8] = v14[7];
    v17[9] = v14[8];
    v17[10] = v14[9];
    v17[11] = v14[10];
    v17[4] = v14[3];
    v17[5] = v14[4];
    v17[6] = v14[5];
    v17[7] = v14[6];
    v17[0] = v13;
    v17[1] = v14[0];
    v17[2] = v14[1];
    v17[3] = v14[2];
    v17[12] = v15;
    v18[0] = v12;
    *(_OWORD *)((char *)v18 + 9) = *(_OWORD *)&v16[9];
    _s7SwiftUI33AccessibilityLargeContentViewTreeOWOi_((uint64_t)v17);
    return (uint64_t)outlined init with take of AccessibilityLargeContentViewTree(v17, a1);
  }
  if (result != 1) {
    return result;
  }
  uint64_t v5 = destructiveProjectEnumData for AccessibilityLargeContentViewTree((uint64_t)v20);
  uint64_t v6 = *(void *)v5;
  uint64_t v7 = *(void *)(*(void *)v5 + 16);
  if (!v7)
  {
LABEL_12:
    *(void *)&v17[0] = v6;
    _s7SwiftUI33AccessibilityLargeContentViewTreeOWOi0_((uint64_t)v17);
    return (uint64_t)outlined init with take of AccessibilityLargeContentViewTree(v17, a1);
  }
  unint64_t v8 = 0;
  uint64_t v9 = 32;
  while (1)
  {
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v6);
      uint64_t v6 = result;
    }
    if (v8 >= *(void *)(v6 + 16)) {
      break;
    }
    ++v8;
    modify #1 <A>(_:) in closure #1 in View.accessibilityShowsLargeContentViewer(_:)(v6 + v9, a2);
    v9 += 240;
    if (v7 == v8) {
      goto LABEL_12;
    }
  }
  __break(1u);
  return result;
}

uint64_t specialized static IndirectOptional<A>.== infix(_:_:)(unint64_t a1, unint64_t a2)
{
  char v2 = (a1 | a2) == 0;
  if (a1 && a2)
  {
    long long v3 = *(_OWORD *)(a1 + 32);
    v9[0] = *(_OWORD *)(a1 + 16);
    v9[1] = v3;
    long long v4 = *(_OWORD *)(a1 + 64);
    v9[2] = *(_OWORD *)(a1 + 48);
    v9[3] = v4;
    long long v5 = *(_OWORD *)(a2 + 32);
    v8[0] = *(_OWORD *)(a2 + 16);
    v8[1] = v5;
    long long v6 = *(_OWORD *)(a2 + 64);
    void v8[2] = *(_OWORD *)(a2 + 48);
    v8[3] = v6;
    char v2 = MEMORY[0x18C113A20](v9, v8);
  }
  return v2 & 1;
}

uint64_t _s7SwiftUI33AccessibilityLargeContentViewTreeOWOi0_(uint64_t result)
{
  char v1 = *(unsigned char *)(result + 232);
  *(void *)(result + 192) &= 0xFFFFFFuLL;
  *(unsigned char *)(result + 232) = v1 & 3 | 0x40;
  return result;
}

uint64_t _s7SwiftUI33AccessibilityLargeContentViewTreeOWOi_(uint64_t result)
{
  char v1 = *(unsigned char *)(result + 232) & 3;
  *(void *)(result + 192) &= 0xFFFFFFuLL;
  *(unsigned char *)(result + 232) = v1;
  return result;
}

uint64_t specialized static Image.Resolved.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  char v2 = *(unsigned char *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 32);
  char v4 = *(unsigned char *)(a1 + 40);
  char v5 = *(unsigned char *)(a1 + 60);
  char v6 = *(unsigned char *)(a1 + 96);
  char v7 = *(unsigned char *)(a1 + 97);
  __int16 v8 = *(_WORD *)(a1 + 98);
  uint64_t v10 = *(void *)(a1 + 104);
  uint64_t v9 = *(void *)(a1 + 112);
  unint64_t v12 = *(void *)(a1 + 120);
  uint64_t v11 = *(void *)(a1 + 128);
  unint64_t v52 = *(void *)(a1 + 144);
  uint64_t v53 = *(void *)(a1 + 136);
  int v51 = *(unsigned __int8 *)(a1 + 152);
  int v49 = *(unsigned __int8 *)(a1 + 153);
  float v13 = *(float *)(a1 + 156);
  char v47 = *(unsigned char *)(a1 + 160);
  uint64_t v45 = *(void *)(a1 + 168);
  char v43 = *(unsigned char *)(a1 + 178);
  __int16 v44 = *(_WORD *)(a1 + 176);
  uint64_t v14 = *(void *)a2;
  char v15 = *(unsigned char *)(a2 + 8);
  uint64_t v16 = *(void *)(a2 + 32);
  uint64_t v66 = *(void *)a1;
  char v17 = *(unsigned char *)(a2 + 40);
  LOBYTE(v67) = v2;
  char v18 = *(unsigned char *)(a2 + 60);
  char v70 = v4;
  char v19 = *(unsigned char *)(a2 + 96);
  char v72 = v5;
  char v20 = *(unsigned char *)(a2 + 97);
  long long v21 = *(_OWORD *)(a1 + 16);
  long long v71 = *(_OWORD *)(a1 + 44);
  long long v22 = *(_OWORD *)(a1 + 64);
  long long v23 = *(_OWORD *)(a1 + 80);
  __int16 v24 = *(_WORD *)(a2 + 98);
  long long v73 = v22;
  long long v74 = v23;
  char v75 = v6;
  uint64_t v26 = *(void *)(a2 + 104);
  uint64_t v25 = *(void *)(a2 + 112);
  char v76 = v7;
  __int16 v77 = v8;
  unint64_t v28 = *(void *)(a2 + 120);
  uint64_t v27 = *(void *)(a2 + 128);
  uint64_t v54 = v14;
  LOBYTE(v55) = v15;
  uint64_t v29 = *(void *)(a2 + 136);
  unint64_t v30 = *(void *)(a2 + 144);
  char v58 = v17;
  int v50 = *(unsigned __int8 *)(a2 + 152);
  char v60 = v18;
  int v48 = *(unsigned __int8 *)(a2 + 153);
  float v31 = *(float *)(a2 + 156);
  char v63 = v19;
  int v46 = *(unsigned __int8 *)(a2 + 160);
  char v64 = v20;
  uint64_t v42 = *(void *)(a2 + 168);
  __int16 v65 = v24;
  __int16 v32 = *(_WORD *)(a2 + 176);
  long long v68 = v21;
  uint64_t v69 = v3;
  long long v56 = *(_OWORD *)(a2 + 16);
  uint64_t v57 = v16;
  long long v33 = *(_OWORD *)(a2 + 64);
  long long v34 = *(_OWORD *)(a2 + 80);
  char v40 = *(unsigned char *)(a2 + 178);
  __int16 v41 = v32;
  long long v59 = *(_OWORD *)(a2 + 44);
  long long v61 = v33;
  long long v62 = v34;
  if ((MEMORY[0x18C10DAE0](&v66, &v54) & 1) == 0) {
    goto LABEL_14;
  }
  if (v12 >> 1 == 0xFFFFFFFF)
  {
    if (v28 >> 1 == 0xFFFFFFFF) {
      goto LABEL_9;
    }
LABEL_7:
    outlined copy of AccessibilityImageLabel?(v26, v25, v28);
    outlined consume of AccessibilityImageLabel?(v10, v9, v12);
    outlined consume of AccessibilityImageLabel?(v26, v25, v28);
    goto LABEL_14;
  }
  uint64_t v66 = v10;
  uint64_t v67 = v9;
  *(void *)&long long v68 = v12;
  *((void *)&v68 + 1) = v11;
  if (v28 >> 1 == 0xFFFFFFFF)
  {
    outlined copy of AccessibilityImageLabel(v10, v9, v12);
    outlined copy of AccessibilityImageLabel(v10, v9, v12);
    outlined consume of AccessibilityImageLabel(v10, v9, v12);
    goto LABEL_7;
  }
  uint64_t v54 = v26;
  uint64_t v55 = v25;
  *(void *)&long long v56 = v28;
  *((void *)&v56 + 1) = v27;
  outlined copy of AccessibilityImageLabel(v10, v9, v12);
  outlined copy of AccessibilityImageLabel(v10, v9, v12);
  char v35 = MEMORY[0x18C111D10](&v66, &v54);
  outlined consume of AccessibilityImageLabel(v66, v67, v68);
  outlined consume of AccessibilityImageLabel?(v10, v9, v12);
  if ((v35 & 1) == 0) {
    goto LABEL_14;
  }
LABEL_9:
  if (!v53)
  {
    if (v29) {
      goto LABEL_14;
    }
    goto LABEL_16;
  }
  char v36 = 0;
  if (v29 && v53 == v29)
  {
LABEL_16:
    char v38 = specialized static IndirectOptional<A>.== infix(_:_:)(v52, v30);
    char v36 = 0;
    if (v38 & 1) == 0 || ((v51 ^ v50)) {
      return v36 & 1;
    }
    if (v49 == 3)
    {
      if (v48 != 3) {
        goto LABEL_14;
      }
    }
    else
    {
      char v36 = 0;
      if (v48 == 3 || v49 != v48) {
        return v36 & 1;
      }
    }
    if ((v47 & 1) == 0)
    {
      char v39 = v46;
      if (v13 != v31) {
        char v39 = 1;
      }
      if (v39) {
        goto LABEL_14;
      }
LABEL_29:
      uint64_t v66 = v45;
      LOWORD(v67) = v44;
      BYTE2(v67) = v43;
      uint64_t v54 = v42;
      LOWORD(v55) = v41;
      BYTE2(v55) = v40;
      char v36 = MEMORY[0x18C1121C0](&v66, &v54);
      return v36 & 1;
    }
    if (v46) {
      goto LABEL_29;
    }
LABEL_14:
    char v36 = 0;
  }
  return v36 & 1;
}

BOOL specialized static AccessibilityLargeContentViewItem.== infix(_:_:)(double *a1, double *a2)
{
  double v4 = *a1;
  uint64_t v5 = *((void *)a1 + 1);
  uint64_t v6 = MEMORY[0x1E4F41550];
  outlined init with take of Image.Resolved?((uint64_t)(a1 + 2), (uint64_t)v46, (unint64_t *)&lazy cache variable for type metadata for Image.Resolved?, MEMORY[0x1E4F41550]);
  CGFloat v7 = a1[25];
  CGFloat v8 = a1[26];
  CGFloat v9 = a1[27];
  CGFloat v10 = a1[28];
  int v11 = *((unsigned __int8 *)a1 + 232);
  double v13 = *a2;
  uint64_t v12 = *((void *)a2 + 1);
  outlined init with take of Image.Resolved?((uint64_t)(a2 + 2), (uint64_t)v47, (unint64_t *)&lazy cache variable for type metadata for Image.Resolved?, v6);
  CGFloat v14 = a2[25];
  CGFloat v15 = a2[26];
  CGFloat v16 = a2[27];
  CGFloat v17 = a2[28];
  int v18 = *((unsigned __int8 *)a2 + 232);
  if (!v5)
  {
    if (v12) {
      return 0;
    }
    goto LABEL_9;
  }
  if (!v12) {
    return 0;
  }
  if (*(void *)&v4 == *(void *)&v13 && v5 == v12
    || (char v19 = _stringCompareWithSmolCheck(_:_:expecting:)(), result = 0, (v19 & 1) != 0))
  {
LABEL_9:
    outlined init with take of Image.Resolved?((uint64_t)v46, (uint64_t)v45, (unint64_t *)&lazy cache variable for type metadata for Image.Resolved?, MEMORY[0x1E4F41550]);
    if (_s7SwiftUI5ImageVAAE8ResolvedVSgWOg((uint64_t)v45) == 1)
    {
      outlined init with take of Image.Resolved?((uint64_t)v47, (uint64_t)v43, (unint64_t *)&lazy cache variable for type metadata for Image.Resolved?, MEMORY[0x1E4F41550]);
      if (_s7SwiftUI5ImageVAAE8ResolvedVSgWOg((uint64_t)v43) == 1)
      {
LABEL_16:
        v48.origin.x = v7;
        v48.origin.y = v8;
        v48.size.width = v9;
        v48.size.height = v10;
        v49.origin.x = v14;
        v49.origin.y = v15;
        v49.size.width = v16;
        v49.size.height = v17;
        BOOL result = CGRectEqualToRect(v48, v49);
        if (result) {
          return v11 == v18;
        }
        return result;
      }
LABEL_14:
      uint64_t v22 = MEMORY[0x1E4F41550];
      outlined init with take of Image.Resolved?((uint64_t)v46, (uint64_t)v43, (unint64_t *)&lazy cache variable for type metadata for Image.Resolved?, MEMORY[0x1E4F41550]);
      outlined init with take of Image.Resolved?((uint64_t)v47, (uint64_t)&v44, (unint64_t *)&lazy cache variable for type metadata for Image.Resolved?, v22);
      outlined retain of Image.Resolved?((uint64_t)v47, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, int))outlined copy of Image.Resolved?);
      outlined release of (Image.Resolved?, Image.Resolved?)((uint64_t)v43);
      return 0;
    }
    uint64_t v21 = MEMORY[0x1E4F41550];
    outlined init with take of Image.Resolved?((uint64_t)v46, (uint64_t)&v32, (unint64_t *)&lazy cache variable for type metadata for Image.Resolved?, MEMORY[0x1E4F41550]);
    outlined init with take of Image.Resolved?((uint64_t)v47, (uint64_t)v43, (unint64_t *)&lazy cache variable for type metadata for Image.Resolved?, v21);
    if (_s7SwiftUI5ImageVAAE8ResolvedVSgWOg((uint64_t)v43) == 1)
    {
      v28[8] = v40;
      v28[9] = v41;
      v29[0] = *(_OWORD *)v42;
      *(_DWORD *)((char *)v29 + 15) = *(_DWORD *)&v42[15];
      v28[4] = v36;
      v28[5] = v37;
      v28[6] = v38;
      v28[7] = v39;
      v28[0] = v32;
      v28[1] = v33;
      v28[2] = v34;
      v28[3] = v35;
      outlined init with take of Image.Resolved?((uint64_t)v46, (uint64_t)v30, (unint64_t *)&lazy cache variable for type metadata for Image.Resolved?, MEMORY[0x1E4F41550]);
      outlined retain of Image.Resolved((uint64_t)v30);
      outlined retain of Image.Resolved((uint64_t)v30);
      outlined release of Image.Resolved((uint64_t)v28);
      goto LABEL_14;
    }
    outlined init with take of Image.Resolved?((uint64_t)v47, (uint64_t)v26, (unint64_t *)&lazy cache variable for type metadata for Image.Resolved?, v21);
    v24[8] = v26[8];
    v24[9] = v26[9];
    *(_OWORD *)uint64_t v25 = *(_OWORD *)v27;
    *(_DWORD *)&v25[15] = *(_DWORD *)&v27[15];
    v24[4] = v26[4];
    v24[5] = v26[5];
    v24[6] = v26[6];
    v24[7] = v26[7];
    v24[0] = v26[0];
    v24[1] = v26[1];
    uint64_t v24[2] = v26[2];
    v24[3] = v26[3];
    outlined init with take of Image.Resolved?((uint64_t)v46, (uint64_t)v28, (unint64_t *)&lazy cache variable for type metadata for Image.Resolved?, v21);
    outlined retain of Image.Resolved?((uint64_t)v46, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, int))outlined copy of Image.Resolved?);
    outlined retain of Image.Resolved((uint64_t)v28);
    char v23 = specialized static Image.Resolved.== infix(_:_:)((uint64_t)&v32, (uint64_t)v24);
    v30[8] = v40;
    v30[9] = v41;
    v31[0] = *(_OWORD *)v42;
    *(_DWORD *)((char *)v31 + 15) = *(_DWORD *)&v42[15];
    v30[4] = v36;
    v30[5] = v37;
    v30[6] = v38;
    _OWORD v30[7] = v39;
    v30[0] = v32;
    v30[1] = v33;
    v30[2] = v34;
    v30[3] = v35;
    outlined release of Image.Resolved((uint64_t)v30);
    outlined retain of Image.Resolved?((uint64_t)v46, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, int))outlined consume of Image.Resolved?);
    if (v23) {
      goto LABEL_16;
    }
    return 0;
  }
  return result;
}

uint64_t specialized static AccessibilityLargeContentViewTree.== infix(_:_:)(long long *a1, long long *a2)
{
  outlined init with take of AccessibilityLargeContentViewTree(a1, v29);
  outlined init with take of AccessibilityLargeContentViewTree(a2, v30);
  outlined init with take of AccessibilityLargeContentViewTree(v29, v31);
  outlined init with take of AccessibilityLargeContentViewTree(v30, v32);
  outlined init with take of AccessibilityLargeContentViewTree(v29, v33);
  int Enum = getEnumTag for AccessibilityLargeContentViewTree((uint64_t)v33);
  if (!Enum)
  {
    CGFloat v7 = (_OWORD *)destructiveProjectEnumData for AccessibilityLargeContentViewTree((uint64_t)v33);
    outlined init with take of AccessibilityLargeContentViewTree(v30, v28);
    if (!getEnumTag for AccessibilityLargeContentViewTree((uint64_t)v28))
    {
      CGFloat v8 = (_OWORD *)destructiveProjectEnumData for AccessibilityLargeContentViewTree((uint64_t)v28);
      long long v9 = v7[13];
      v26[12] = v7[12];
      v27[0] = v9;
      *(_OWORD *)((char *)v27 + 9) = *(_OWORD *)((char *)v7 + 217);
      long long v10 = v7[9];
      v26[8] = v7[8];
      v26[9] = v10;
      long long v11 = v7[11];
      _OWORD v26[10] = v7[10];
      v26[11] = v11;
      long long v12 = v7[5];
      v26[4] = v7[4];
      v26[5] = v12;
      long long v13 = v7[7];
      v26[6] = v7[6];
      v26[7] = v13;
      long long v14 = v7[1];
      v26[0] = *v7;
      v26[1] = v14;
      long long v15 = v7[3];
      v26[2] = v7[2];
      v26[3] = v15;
      long long v16 = v8[13];
      v24[12] = v8[12];
      v25[0] = v16;
      *(_OWORD *)((char *)v25 + 9) = *(_OWORD *)((char *)v8 + 217);
      long long v17 = v8[9];
      v24[8] = v8[8];
      v24[9] = v17;
      long long v18 = v8[11];
      _OWORD v24[10] = v8[10];
      v24[11] = v18;
      long long v19 = v8[5];
      v24[4] = v8[4];
      v24[5] = v19;
      long long v20 = v8[7];
      v24[6] = v8[6];
      v24[7] = v20;
      long long v21 = v8[1];
      v24[0] = *v8;
      v24[1] = v21;
      long long v22 = v8[3];
      uint64_t v24[2] = v8[2];
      v24[3] = v22;
      outlined release of AccessibilityLargeContentViewTree((uint64_t)v30, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, char))outlined copy of AccessibilityLargeContentViewTree);
      outlined release of AccessibilityLargeContentViewTree((uint64_t)v29, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, char))outlined copy of AccessibilityLargeContentViewTree);
      outlined release of AccessibilityLargeContentViewTree((uint64_t)v30, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, char))outlined copy of AccessibilityLargeContentViewTree);
      outlined release of AccessibilityLargeContentViewTree((uint64_t)v29, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, char))outlined copy of AccessibilityLargeContentViewTree);
      char v6 = specialized static AccessibilityLargeContentViewItem.== infix(_:_:)((double *)v26, (double *)v24);
      outlined release of (AccessibilityLargeContentViewTree, AccessibilityLargeContentViewTree)((uint64_t)v31);
      outlined release of AccessibilityLargeContentViewTree((uint64_t)v30, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, char))outlined consume of AccessibilityLargeContentViewTree);
      outlined release of AccessibilityLargeContentViewTree((uint64_t)v29, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, char))outlined consume of AccessibilityLargeContentViewTree);
      return v6 & 1;
    }
LABEL_9:
    outlined release of AccessibilityLargeContentViewTree((uint64_t)v30, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, char))outlined copy of AccessibilityLargeContentViewTree);
    outlined release of AccessibilityLargeContentViewTree((uint64_t)v29, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, char))outlined copy of AccessibilityLargeContentViewTree);
    outlined release of (AccessibilityLargeContentViewTree, AccessibilityLargeContentViewTree)((uint64_t)v31);
    char v6 = 0;
    return v6 & 1;
  }
  if (Enum != 1)
  {
    outlined init with take of AccessibilityLargeContentViewTree(v30, v28);
    if (getEnumTag for AccessibilityLargeContentViewTree((uint64_t)v28) == 2)
    {
      outlined release of (AccessibilityLargeContentViewTree, AccessibilityLargeContentViewTree)((uint64_t)v31);
      char v6 = 1;
      return v6 & 1;
    }
    goto LABEL_9;
  }
  uint64_t v4 = *(void *)destructiveProjectEnumData for AccessibilityLargeContentViewTree((uint64_t)v33);
  outlined init with take of AccessibilityLargeContentViewTree(v30, v28);
  if (getEnumTag for AccessibilityLargeContentViewTree((uint64_t)v28) != 1) {
    goto LABEL_9;
  }
  uint64_t v5 = *(void *)destructiveProjectEnumData for AccessibilityLargeContentViewTree((uint64_t)v28);
  outlined release of AccessibilityLargeContentViewTree((uint64_t)v30, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, char))outlined copy of AccessibilityLargeContentViewTree);
  outlined release of AccessibilityLargeContentViewTree((uint64_t)v29, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, char))outlined copy of AccessibilityLargeContentViewTree);
  char v6 = specialized static Array<A>.== infix(_:_:)(v4, v5);
  outlined release of (AccessibilityLargeContentViewTree, AccessibilityLargeContentViewTree)((uint64_t)v31);
  return v6 & 1;
}

_OWORD *specialized static AccessibilityLargeContentViewTree.Key.reduce(value:nextValue:)(long long *a1, void (*a2)(long long *__return_ptr, uint64_t))
{
  outlined init with take of AccessibilityLargeContentViewTree(a1, v20);
  uint64_t v4 = outlined release of AccessibilityLargeContentViewTree((uint64_t)v20, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, char))outlined copy of AccessibilityLargeContentViewTree);
  a2(v19, v4);
  outlined init with take of AccessibilityLargeContentViewTree(v19, v21);
  outlined init with take of AccessibilityLargeContentViewTree(v21, v22);
  if (getEnumTag for AccessibilityLargeContentViewTree((uint64_t)v22) == 2) {
    return (_OWORD *)outlined release of AccessibilityLargeContentViewTree((uint64_t)v20, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, char))outlined consume of AccessibilityLargeContentViewTree);
  }
  outlined release of AccessibilityLargeContentViewTree((uint64_t)v20, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, char))outlined consume of AccessibilityLargeContentViewTree);
  outlined init with take of AccessibilityLargeContentViewTree(v20, v18);
  int Enum = getEnumTag for AccessibilityLargeContentViewTree((uint64_t)v18);
  if (!Enum)
  {
    destructiveProjectEnumData for AccessibilityLargeContentViewTree((uint64_t)v18);
    outlined init with take of AccessibilityLargeContentViewTree(v21, v17);
    if (getEnumTag for AccessibilityLargeContentViewTree((uint64_t)v17) == 1)
    {
      uint64_t v9 = *(void *)destructiveProjectEnumData for AccessibilityLargeContentViewTree((uint64_t)v17);
      type metadata accessor for Image.Resolved?(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<AccessibilityLargeContentViewTree>, (uint64_t)&type metadata for AccessibilityLargeContentViewTree, MEMORY[0x1E4FBBE00]);
      uint64_t v10 = swift_allocObject();
      *(_OWORD *)(v10 + 16) = xmmword_18834BB80;
      outlined init with take of AccessibilityLargeContentViewTree(v20, (_OWORD *)(v10 + 32));
      v16[0] = v10;
      uint64_t v8 = v9;
      goto LABEL_9;
    }
    type metadata accessor for Image.Resolved?(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<AccessibilityLargeContentViewTree>, (uint64_t)&type metadata for AccessibilityLargeContentViewTree, MEMORY[0x1E4FBBE00]);
    uint64_t v7 = swift_allocObject();
    *(_OWORD *)(v7 + 16) = xmmword_18834BB70;
    outlined init with take of AccessibilityLargeContentViewTree(v20, (_OWORD *)(v7 + 32));
    outlined init with take of AccessibilityLargeContentViewTree(v21, (_OWORD *)(v7 + 272));
LABEL_17:
    v16[0] = v7;
    goto LABEL_18;
  }
  if (Enum == 1)
  {
    uint64_t v7 = *(void *)destructiveProjectEnumData for AccessibilityLargeContentViewTree((uint64_t)v18);
    outlined init with take of AccessibilityLargeContentViewTree(v21, v17);
    if (getEnumTag for AccessibilityLargeContentViewTree((uint64_t)v17) == 1)
    {
      uint64_t v8 = *(void *)destructiveProjectEnumData for AccessibilityLargeContentViewTree((uint64_t)v17);
      v16[0] = v7;
LABEL_9:
      specialized Array.append<A>(contentsOf:)(v8);
LABEL_18:
      _s7SwiftUI33AccessibilityLargeContentViewTreeOWOi0_((uint64_t)v16);
      long long v11 = (long long *)v16;
      return outlined init with take of AccessibilityLargeContentViewTree(v11, a1);
    }
    outlined release of AccessibilityLargeContentViewTree((uint64_t)v21, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, char))outlined copy of AccessibilityLargeContentViewTree);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v7 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v7 + 16) + 1, 1, (char *)v7);
    }
    unint64_t v13 = *(void *)(v7 + 16);
    unint64_t v12 = *(void *)(v7 + 24);
    unint64_t v14 = v13 + 1;
    if (v13 >= v12 >> 1)
    {
      long long v15 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v12 > 1), v13 + 1, 1, (char *)v7);
      unint64_t v14 = v13 + 1;
      uint64_t v7 = (uint64_t)v15;
    }
    *(void *)(v7 + 16) = v14;
    outlined init with take of AccessibilityLargeContentViewTree(v21, (_OWORD *)(v7 + 240 * v13 + 32));
    outlined release of AccessibilityLargeContentViewTree((uint64_t)v21, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, char))outlined consume of AccessibilityLargeContentViewTree);
    goto LABEL_17;
  }
  long long v11 = v21;
  return outlined init with take of AccessibilityLargeContentViewTree(v11, a1);
}

uint64_t sub_1876A5B20()
{
  swift_bridgeObjectRelease();
  uint64_t v1 = *(void *)(v0 + 152);
  unint64_t v2 = v1 & 0xFFFFFFFFFFFFFFFELL;
  if ((v1 & 0xFFFFFFFFFFFFFFFELL) != 0x1FFFFFFFCLL)
  {
    int v3 = *(unsigned __int8 *)(v0 + 40);
    if (v3 != 255)
    {
      outlined consume of GraphicsImage.Contents(*(void **)(v0 + 32), v3);
      uint64_t v1 = *(void *)(v0 + 152);
      unint64_t v2 = v1 & 0xFFFFFFFFFFFFFFFELL;
    }
    if (v2 != 0x1FFFFFFFELL) {
      outlined consume of AccessibilityImageLabel(*(void *)(v0 + 136), *(void *)(v0 + 144), v1);
    }
    swift_unknownObjectRelease();
    swift_release();
  }

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in AccessibilityLargeContentViewTransform.value.getter(long long *a1)
{
  return closure #1 in AccessibilityLargeContentViewTransform.value.getter(a1, (long long *)(v1 + 16));
}

uint64_t outlined retain of AccessibilityLargeContentViewItem(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v17 = *(void *)(a1 + 24);
  long long v18 = *(void **)(a1 + 16);
  uint64_t v3 = *(void *)(a1 + 40);
  uint64_t v4 = *(void *)(a1 + 48);
  uint64_t v5 = *(void *)(a1 + 56);
  uint64_t v6 = *(void *)(a1 + 64);
  uint64_t v7 = *(void *)(a1 + 72);
  long long v15 = *(_OWORD *)(a1 + 96);
  long long v16 = *(_OWORD *)(a1 + 80);
  long long v14 = *(_OWORD *)(a1 + 112);
  long long v12 = *(_OWORD *)(a1 + 144);
  long long v13 = *(_OWORD *)(a1 + 128);
  long long v11 = *(_OWORD *)(a1 + 160);
  uint64_t v8 = *(void *)(a1 + 176);
  uint64_t v9 = *(void **)(a1 + 184);
  swift_bridgeObjectRetain();
  outlined copy of Image.Resolved?(v18, v17, v2, v3, v4, v5, v6, v7, v16, *((uint64_t *)&v16 + 1), v15, *((uint64_t *)&v15 + 1), v14, *((uint64_t *)&v14 + 1), v13, *((unint64_t *)&v13 + 1), v12, *((uint64_t *)&v12 + 1), v11,
    *((uint64_t *)&v11 + 1),
    v8,
    v9);
  return a1;
}

uint64_t outlined release of (AccessibilityLargeContentViewTree, AccessibilityLargeContentViewTree)(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 248);
  uint64_t v22 = *(void *)(a1 + 240);
  uint64_t v3 = *(void **)(a1 + 256);
  uint64_t v4 = *(void *)(a1 + 264);
  uint64_t v5 = *(void *)(a1 + 272);
  uint64_t v6 = *(void *)(a1 + 280);
  uint64_t v7 = *(void *)(a1 + 288);
  uint64_t v8 = *(void *)(a1 + 296);
  long long v20 = *(_OWORD *)(a1 + 320);
  long long v21 = *(_OWORD *)(a1 + 304);
  long long v18 = *(_OWORD *)(a1 + 352);
  long long v19 = *(_OWORD *)(a1 + 336);
  long long v16 = *(_OWORD *)(a1 + 384);
  long long v17 = *(_OWORD *)(a1 + 368);
  long long v15 = *(_OWORD *)(a1 + 400);
  long long v13 = *(_OWORD *)(a1 + 432);
  long long v14 = *(_OWORD *)(a1 + 416);
  long long v12 = *(_OWORD *)(a1 + 448);
  uint64_t v9 = *(void *)(a1 + 464);
  unsigned __int8 v10 = *(unsigned char *)(a1 + 472);
  outlined consume of AccessibilityLargeContentViewTree(*(void *)a1, *(void *)(a1 + 8), *(void **)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 72), *(void *)(a1 + 80), *(void *)(a1 + 88), *(void *)(a1 + 96), *(void *)(a1 + 104), *(void *)(a1 + 112), *(void *)(a1 + 120), *(void *)(a1 + 128), *(void *)(a1 + 136), *(void *)(a1 + 144),
    *(void *)(a1 + 152),
    *(void *)(a1 + 160),
    *(void *)(a1 + 168),
    *(void *)(a1 + 176),
    *(void **)(a1 + 184),
    *(void *)(a1 + 192),
    *(void *)(a1 + 200),
    *(void *)(a1 + 208),
    *(void *)(a1 + 216),
    *(void *)(a1 + 224),
    *(unsigned char *)(a1 + 232));
  outlined consume of AccessibilityLargeContentViewTree(v22, v2, v3, v4, v5, v6, v7, v8, v21, *((uint64_t *)&v21 + 1), v20, *((uint64_t *)&v20 + 1), v19, *((uint64_t *)&v19 + 1), v18, *((uint64_t *)&v18 + 1), v17, *((unint64_t *)&v17 + 1), v16,
    *((uint64_t *)&v16 + 1),
    v15,
    *((uint64_t *)&v15 + 1),
    v14,
    *((void **)&v14 + 1),
    v13,
    *((uint64_t *)&v13 + 1),
    v12,
    *((uint64_t *)&v12 + 1),
    v9,
    v10);
  return a1;
}

uint64_t outlined release of (Image.Resolved?, Image.Resolved?)(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 200);
  uint64_t v17 = *(void *)(a1 + 192);
  long long v18 = *(void **)(a1 + 184);
  uint64_t v3 = *(void *)(a1 + 208);
  uint64_t v4 = *(void *)(a1 + 216);
  uint64_t v5 = *(void *)(a1 + 224);
  uint64_t v6 = *(void *)(a1 + 232);
  uint64_t v7 = *(void *)(a1 + 240);
  long long v15 = *(_OWORD *)(a1 + 264);
  long long v16 = *(_OWORD *)(a1 + 248);
  long long v14 = *(_OWORD *)(a1 + 280);
  long long v12 = *(_OWORD *)(a1 + 312);
  long long v13 = *(_OWORD *)(a1 + 296);
  long long v11 = *(_OWORD *)(a1 + 328);
  uint64_t v8 = *(void *)(a1 + 344);
  uint64_t v9 = *(void **)(a1 + 352);
  outlined consume of Image.Resolved?(*(void **)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 72), *(void *)(a1 + 80), *(void *)(a1 + 88), *(void *)(a1 + 96), *(void *)(a1 + 104), *(void *)(a1 + 112), *(void *)(a1 + 120), *(void *)(a1 + 128), *(void *)(a1 + 136), *(void *)(a1 + 144),
    *(void *)(a1 + 152),
    *(void *)(a1 + 160),
    *(void **)(a1 + 168));
  outlined consume of Image.Resolved?(v18, v17, v2, v3, v4, v5, v6, v7, v16, *((uint64_t *)&v16 + 1), v15, *((uint64_t *)&v15 + 1), v14, *((uint64_t *)&v14 + 1), v13, *((unint64_t *)&v13 + 1), v12, *((uint64_t *)&v12 + 1), v11,
    *((uint64_t *)&v11 + 1),
    v8,
    v9);
  return a1;
}

uint64_t outlined release of Image.Resolved(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 104);
  uint64_t v3 = *(void *)(a1 + 112);
  uint64_t v4 = *(void *)(a1 + 120);
  uint64_t v5 = *(void **)(a1 + 168);
  outlined consume of GraphicsImage.Contents?(*(void **)a1, *(unsigned char *)(a1 + 8));
  outlined consume of AccessibilityImageLabel?(v2, v3, v4);
  swift_unknownObjectRelease();
  swift_release();

  return a1;
}

void outlined consume of AccessibilityLargeContentViewItem?(uint64_t a1, uint64_t a2, void *a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, unint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24)
{
  if (a2 != 1)
  {
    swift_bridgeObjectRelease();
    outlined consume of Image.Resolved?(a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21,
      a22,
      a23,
      a24);
  }
}

uint64_t _s7SwiftUI33AccessibilityLargeContentViewItemVSgWOg(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 8);
  if (v1 >= 0xFFFFFFFF) {
    LODWORD(v1) = -1;
  }
  int v2 = v1 - 1;
  if (v2 < 0) {
    int v2 = -1;
  }
  return (v2 + 1);
}

double _s7SwiftUI33AccessibilityLargeContentViewItemVSgWOi0_(_OWORD *a1)
{
  double result = 0.0;
  *a1 = xmmword_18834BB90;
  a1[1] = 0u;
  a1[2] = 0u;
  a1[3] = 0u;
  a1[4] = 0u;
  a1[5] = 0u;
  a1[6] = 0u;
  a1[7] = 0u;
  a1[8] = 0u;
  a1[9] = 0u;
  a1[10] = 0u;
  a1[11] = 0u;
  a1[12] = 0u;
  a1[13] = 0u;
  *(_OWORD *)((char *)a1 + 217) = 0u;
  return result;
}

uint64_t sub_1876A61A4()
{
  return swift_deallocObject();
}

_OWORD *partial apply for closure #1 in AccessibilityLargeContentViewHitTestingTransform.value.getter(long long *a1)
{
  return closure #1 in AccessibilityLargeContentViewHitTestingTransform.value.getter(a1);
}

uint64_t sub_1876A61BC()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_1876A61F4()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in View.accessibilityShowsLargeContentViewer(_:)(long long *a1)
{
  return modify #1 <A>(_:) in closure #1 in View.accessibilityShowsLargeContentViewer(_:)(a1, *(unsigned __int8 *)(v1 + 16));
}

void *type metadata accessor for AccessibilityLargeContentViewHitTestingTransform()
{
  return &unk_1ED465C50;
}

void *type metadata accessor for AccessibilityLargeContentViewTransform()
{
  return &unk_1ED4637C0;
}

void destroy for AccessibilityLargeContentViewItem(uint64_t a1)
{
  swift_bridgeObjectRelease();
  uint64_t v2 = *(void *)(a1 + 136);
  if ((v2 & 0xFFFFFFFFFFFFFFFELL) != 0x1FFFFFFFCLL)
  {
    int v3 = *(unsigned __int8 *)(a1 + 24);
    if (v3 != 255) {
      outlined consume of GraphicsImage.Contents(*(void **)(a1 + 16), v3);
    }
    if ((v2 & 0xFFFFFFFFFFFFFFFELL) != 0x1FFFFFFFELL) {
      outlined consume of AccessibilityImageLabel(*(void *)(a1 + 120), *(void *)(a1 + 128), v2);
    }
    swift_unknownObjectRelease();
    swift_release();
    uint64_t v4 = *(void **)(a1 + 184);
  }
}

uint64_t initializeWithCopy for AccessibilityLargeContentViewItem(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  uint64_t v5 = (_OWORD *)(a1 + 16);
  uint64_t v6 = (uint64_t *)(a2 + 16);
  uint64_t v7 = *(void *)(a2 + 136);
  swift_bridgeObjectRetain();
  if ((v7 & 0xFFFFFFFFFFFFFFFELL) == 0x1FFFFFFFCLL)
  {
    long long v8 = *((_OWORD *)v6 + 9);
    *(_OWORD *)(a1 + 144) = *((_OWORD *)v6 + 8);
    *(_OWORD *)(a1 + 160) = v8;
    *(_OWORD *)(a1 + 176) = *((_OWORD *)v6 + 10);
    *(_DWORD *)(a1 + 191) = *(_DWORD *)((char *)v6 + 175);
    long long v9 = *((_OWORD *)v6 + 5);
    *(_OWORD *)(a1 + 80) = *((_OWORD *)v6 + 4);
    *(_OWORD *)(a1 + 96) = v9;
    long long v10 = *((_OWORD *)v6 + 7);
    *(_OWORD *)(a1 + 112) = *((_OWORD *)v6 + 6);
    *(_OWORD *)(a1 + 128) = v10;
    long long v11 = *((_OWORD *)v6 + 1);
    *uint64_t v5 = *(_OWORD *)v6;
    *(_OWORD *)(a1 + 32) = v11;
    long long v12 = *((_OWORD *)v6 + 3);
    *(_OWORD *)(a1 + 48) = *((_OWORD *)v6 + 2);
    *(_OWORD *)(a1 + 64) = v12;
  }
  else
  {
    int v13 = *(unsigned __int8 *)(a2 + 24);
    if (v13 == 255)
    {
      *(void *)uint64_t v5 = *v6;
      *(unsigned char *)(a1 + 24) = *((unsigned char *)v6 + 8);
    }
    else
    {
      uint64_t v14 = *v6;
      outlined copy of GraphicsImage.Contents((id)*v6, *(unsigned char *)(a2 + 24));
      *(void *)(a1 + 16) = v14;
      *(unsigned char *)(a1 + 24) = v13;
    }
    *(void *)(a1 + 32) = *(void *)(a2 + 32);
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
    *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
    *(_OWORD *)(a1 + 60) = *(_OWORD *)(a2 + 60);
    *(unsigned char *)(a1 + 76) = *(unsigned char *)(a2 + 76);
    long long v15 = *(_OWORD *)(a2 + 80);
    long long v16 = *(_OWORD *)(a2 + 96);
    *(_WORD *)(a1 + 112) = *(_WORD *)(a2 + 112);
    *(unsigned char *)(a1 + 114) = *(unsigned char *)(a2 + 114);
    *(unsigned char *)(a1 + 115) = *(unsigned char *)(a2 + 115);
    *(_OWORD *)(a1 + 80) = v15;
    *(_OWORD *)(a1 + 96) = v16;
    if ((v7 & 0xFFFFFFFFFFFFFFFELL) == 0x1FFFFFFFELL)
    {
      long long v17 = *(_OWORD *)(a2 + 136);
      *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
      *(_OWORD *)(a1 + 136) = v17;
    }
    else
    {
      uint64_t v18 = *(void *)(a2 + 120);
      uint64_t v19 = *(void *)(a2 + 128);
      uint64_t v20 = *(void *)(a2 + 144);
      outlined copy of AccessibilityImageLabel(v18, v19, v7);
      *(void *)(a1 + 120) = v18;
      *(void *)(a1 + 128) = v19;
      *(void *)(a1 + 136) = v7;
      *(void *)(a1 + 144) = v20;
    }
    uint64_t v21 = *(void *)(a2 + 160);
    *(void *)(a1 + 152) = *(void *)(a2 + 152);
    *(void *)(a1 + 160) = v21;
    *(_WORD *)(a1 + 168) = *(_WORD *)(a2 + 168);
    *(_DWORD *)(a1 + 172) = *(_DWORD *)(a2 + 172);
    *(unsigned char *)(a1 + 176) = *(unsigned char *)(a2 + 176);
    uint64_t v22 = *(void **)(a2 + 184);
    *(void *)(a1 + 184) = v22;
    *(_WORD *)(a1 + 192) = *(_WORD *)(a2 + 192);
    *(unsigned char *)(a1 + 194) = *(unsigned char *)(a2 + 194);
    swift_unknownObjectRetain();
    swift_retain();
    id v23 = v22;
  }
  *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 + 200);
  *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 216);
  *(unsigned char *)(a1 + 232) = *(unsigned char *)(a2 + 232);
  return a1;
}

uint64_t assignWithCopy for AccessibilityLargeContentViewItem(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = (_OWORD *)(a1 + 16);
  uint64_t v5 = (id *)(a2 + 16);
  unint64_t v6 = *(void *)(a2 + 136) & 0xFFFFFFFFFFFFFFFELL;
  if (*(void *)(a1 + 136) >> 1 == 4294967294)
  {
    if (v6 == 0x1FFFFFFFCLL)
    {
      long long v7 = *(_OWORD *)v5;
      long long v8 = *(_OWORD *)(a2 + 32);
      long long v9 = *(_OWORD *)(a2 + 64);
      *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
      *(_OWORD *)(a1 + 64) = v9;
      *uint64_t v4 = v7;
      *(_OWORD *)(a1 + 32) = v8;
      long long v10 = *(_OWORD *)(a2 + 80);
      long long v11 = *(_OWORD *)(a2 + 96);
      long long v12 = *(_OWORD *)(a2 + 128);
      *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
      *(_OWORD *)(a1 + 128) = v12;
      *(_OWORD *)(a1 + 80) = v10;
      *(_OWORD *)(a1 + 96) = v11;
      long long v13 = *(_OWORD *)(a2 + 144);
      long long v14 = *(_OWORD *)(a2 + 160);
      long long v15 = *(_OWORD *)(a2 + 176);
      *(_DWORD *)(a1 + 191) = *(_DWORD *)(a2 + 191);
      *(_OWORD *)(a1 + 160) = v14;
      *(_OWORD *)(a1 + 176) = v15;
      *(_OWORD *)(a1 + 144) = v13;
    }
    else
    {
      int v25 = *(unsigned __int8 *)(a2 + 24);
      if (v25 == 255)
      {
        id v31 = *v5;
        *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
        *(void *)uint64_t v4 = v31;
      }
      else
      {
        id v26 = *v5;
        outlined copy of GraphicsImage.Contents(*v5, *(unsigned char *)(a2 + 24));
        *(void *)(a1 + 16) = v26;
        *(unsigned char *)(a1 + 24) = v25;
      }
      *(void *)(a1 + 32) = *(void *)(a2 + 32);
      *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
      *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
      long long v32 = *(_OWORD *)(a2 + 60);
      *(unsigned char *)(a1 + 76) = *(unsigned char *)(a2 + 76);
      *(_OWORD *)(a1 + 60) = v32;
      long long v33 = *(_OWORD *)(a2 + 80);
      long long v34 = *(_OWORD *)(a2 + 96);
      *(unsigned char *)(a1 + 112) = *(unsigned char *)(a2 + 112);
      *(_OWORD *)(a1 + 80) = v33;
      *(_OWORD *)(a1 + 96) = v34;
      *(unsigned char *)(a1 + 113) = *(unsigned char *)(a2 + 113);
      *(unsigned char *)(a1 + 114) = *(unsigned char *)(a2 + 114);
      *(unsigned char *)(a1 + 115) = *(unsigned char *)(a2 + 115);
      unint64_t v35 = *(void *)(a2 + 136);
      if (v35 >> 1 == 0xFFFFFFFF)
      {
        long long v36 = *(_OWORD *)(a2 + 136);
        *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
        *(_OWORD *)(a1 + 136) = v36;
      }
      else
      {
        uint64_t v37 = *(void *)(a2 + 120);
        uint64_t v38 = *(void *)(a2 + 128);
        uint64_t v39 = *(void *)(a2 + 144);
        outlined copy of AccessibilityImageLabel(v37, v38, *(void *)(a2 + 136));
        *(void *)(a1 + 120) = v37;
        *(void *)(a1 + 128) = v38;
        *(void *)(a1 + 136) = v35;
        *(void *)(a1 + 144) = v39;
      }
      *(void *)(a1 + 152) = *(void *)(a2 + 152);
      *(void *)(a1 + 160) = *(void *)(a2 + 160);
      *(unsigned char *)(a1 + 168) = *(unsigned char *)(a2 + 168);
      *(unsigned char *)(a1 + 169) = *(unsigned char *)(a2 + 169);
      int v40 = *(_DWORD *)(a2 + 172);
      *(unsigned char *)(a1 + 176) = *(unsigned char *)(a2 + 176);
      *(_DWORD *)(a1 + 172) = v40;
      long long v41 = *(void **)(a2 + 184);
      *(void *)(a1 + 184) = v41;
      *(_WORD *)(a1 + 192) = *(_WORD *)(a2 + 192);
      *(unsigned char *)(a1 + 194) = *(unsigned char *)(a2 + 194);
      swift_unknownObjectRetain();
      swift_retain();
      id v42 = v41;
    }
  }
  else if (v6 == 0x1FFFFFFFCLL)
  {
    outlined destroy of Image.Resolved(a1 + 16);
    long long v16 = *(_OWORD *)(a2 + 64);
    long long v18 = *(_OWORD *)v5;
    long long v17 = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 64) = v16;
    *uint64_t v4 = v18;
    *(_OWORD *)(a1 + 32) = v17;
    long long v19 = *(_OWORD *)(a2 + 128);
    long long v21 = *(_OWORD *)(a2 + 80);
    long long v20 = *(_OWORD *)(a2 + 96);
    *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
    *(_OWORD *)(a1 + 128) = v19;
    *(_OWORD *)(a1 + 80) = v21;
    *(_OWORD *)(a1 + 96) = v20;
    long long v23 = *(_OWORD *)(a2 + 160);
    long long v22 = *(_OWORD *)(a2 + 176);
    long long v24 = *(_OWORD *)(a2 + 144);
    *(_DWORD *)(a1 + 191) = *(_DWORD *)(a2 + 191);
    *(_OWORD *)(a1 + 160) = v23;
    *(_OWORD *)(a1 + 176) = v22;
    *(_OWORD *)(a1 + 144) = v24;
  }
  else
  {
    int v27 = *(unsigned __int8 *)(a2 + 24);
    if (*(unsigned __int8 *)(a1 + 24) == 255)
    {
      if (v27 == 255)
      {
        id v45 = *v5;
        *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
        *(void *)uint64_t v4 = v45;
      }
      else
      {
        id v43 = *v5;
        outlined copy of GraphicsImage.Contents(*v5, *(unsigned char *)(a2 + 24));
        *(void *)(a1 + 16) = v43;
        *(unsigned char *)(a1 + 24) = v27;
      }
    }
    else if (v27 == 255)
    {
      outlined destroy of GraphicsImage.Contents(a1 + 16);
      char v44 = *(unsigned char *)(a2 + 24);
      *(void *)uint64_t v4 = *v5;
      *(unsigned char *)(a1 + 24) = v44;
    }
    else
    {
      id v28 = *v5;
      outlined copy of GraphicsImage.Contents(*v5, *(unsigned char *)(a2 + 24));
      uint64_t v29 = *(void **)(a1 + 16);
      *(void *)(a1 + 16) = v28;
      char v30 = *(unsigned char *)(a1 + 24);
      *(unsigned char *)(a1 + 24) = v27;
      outlined consume of GraphicsImage.Contents(v29, v30);
    }
    *(void *)(a1 + 32) = *(void *)(a2 + 32);
    *(void *)(a1 + 40) = *(void *)(a2 + 40);
    *(void *)(a1 + 48) = *(void *)(a2 + 48);
    *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
    long long v46 = *(_OWORD *)(a2 + 60);
    *(unsigned char *)(a1 + 76) = *(unsigned char *)(a2 + 76);
    *(_OWORD *)(a1 + 60) = v46;
    long long v47 = *(_OWORD *)(a2 + 80);
    long long v48 = *(_OWORD *)(a2 + 96);
    *(unsigned char *)(a1 + 112) = *(unsigned char *)(a2 + 112);
    *(_OWORD *)(a1 + 80) = v47;
    *(_OWORD *)(a1 + 96) = v48;
    *(unsigned char *)(a1 + 113) = *(unsigned char *)(a2 + 113);
    *(unsigned char *)(a1 + 114) = *(unsigned char *)(a2 + 114);
    *(unsigned char *)(a1 + 115) = *(unsigned char *)(a2 + 115);
    CGRect v49 = (_OWORD *)(a1 + 120);
    int v50 = (_OWORD *)(a2 + 120);
    uint64_t v51 = *(void *)(a2 + 136);
    unint64_t v52 = v51 & 0xFFFFFFFFFFFFFFFELL;
    if (*(void *)(a1 + 136) >> 1 == 0xFFFFFFFFLL)
    {
      if (v52 == 0x1FFFFFFFELL)
      {
        long long v53 = *(_OWORD *)(a2 + 136);
        *CGRect v49 = *v50;
        *(_OWORD *)(a1 + 136) = v53;
      }
      else
      {
        uint64_t v55 = *(void *)(a2 + 120);
        uint64_t v56 = *(void *)(a2 + 128);
        uint64_t v57 = *(void *)(a2 + 144);
        outlined copy of AccessibilityImageLabel(v55, v56, *(void *)(a2 + 136));
        *(void *)(a1 + 120) = v55;
        *(void *)(a1 + 128) = v56;
        *(void *)(a1 + 136) = v51;
        *(void *)(a1 + 144) = v57;
      }
    }
    else if (v52 == 0x1FFFFFFFELL)
    {
      outlined destroy of AccessibilityImageLabel(a1 + 120);
      long long v54 = *(_OWORD *)(a2 + 136);
      *CGRect v49 = *v50;
      *(_OWORD *)(a1 + 136) = v54;
    }
    else
    {
      uint64_t v58 = *(void *)(a2 + 120);
      uint64_t v59 = *(void *)(a2 + 128);
      uint64_t v60 = *(void *)(a2 + 144);
      outlined copy of AccessibilityImageLabel(v58, v59, *(void *)(a2 + 136));
      uint64_t v61 = *(void *)(a1 + 120);
      uint64_t v62 = *(void *)(a1 + 128);
      uint64_t v63 = *(void *)(a1 + 136);
      *(void *)(a1 + 120) = v58;
      *(void *)(a1 + 128) = v59;
      *(void *)(a1 + 136) = v51;
      *(void *)(a1 + 144) = v60;
      outlined consume of AccessibilityImageLabel(v61, v62, v63);
    }
    *(void *)(a1 + 152) = *(void *)(a2 + 152);
    swift_unknownObjectRetain();
    swift_unknownObjectRelease();
    *(void *)(a1 + 160) = *(void *)(a2 + 160);
    swift_retain();
    swift_release();
    *(unsigned char *)(a1 + 168) = *(unsigned char *)(a2 + 168);
    *(unsigned char *)(a1 + 169) = *(unsigned char *)(a2 + 169);
    int v64 = *(_DWORD *)(a2 + 172);
    *(unsigned char *)(a1 + 176) = *(unsigned char *)(a2 + 176);
    *(_DWORD *)(a1 + 172) = v64;
    __int16 v65 = *(void **)(a1 + 184);
    uint64_t v66 = *(void **)(a2 + 184);
    *(void *)(a1 + 184) = v66;
    id v67 = v66;

    *(_WORD *)(a1 + 192) = *(_WORD *)(a2 + 192);
    *(unsigned char *)(a1 + 194) = *(unsigned char *)(a2 + 194);
  }
  *(void *)(a1 + 200) = *(void *)(a2 + 200);
  *(void *)(a1 + 208) = *(void *)(a2 + 208);
  *(void *)(a1 + 216) = *(void *)(a2 + 216);
  *(void *)(a1 + 224) = *(void *)(a2 + 224);
  *(unsigned char *)(a1 + 232) = *(unsigned char *)(a2 + 232);
  return a1;
}

uint64_t outlined destroy of GraphicsImage.Contents(uint64_t a1)
{
  return a1;
}

uint64_t outlined destroy of AccessibilityImageLabel(uint64_t a1)
{
  return a1;
}

uint64_t outlined destroy of Image.Resolved(uint64_t a1)
{
  return a1;
}

uint64_t assignWithTake for AccessibilityLargeContentViewItem(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = (void *)(a1 + 16);
  unint64_t v6 = (void *)(a2 + 16);
  if (*(void *)(a1 + 136) >> 1 == 4294967294) {
    goto LABEL_4;
  }
  uint64_t v7 = *(void *)(a2 + 136);
  if ((v7 & 0xFFFFFFFFFFFFFFFELL) != 0x1FFFFFFFCLL)
  {
    int v13 = *(unsigned __int8 *)(a1 + 24);
    if (v13 != 255)
    {
      int v14 = *(unsigned __int8 *)(a2 + 24);
      if (v14 != 255)
      {
        long long v15 = *(void **)(a1 + 16);
        *(void *)(a1 + 16) = *v6;
        *(unsigned char *)(a1 + 24) = v14;
        outlined consume of GraphicsImage.Contents(v15, v13);
        goto LABEL_10;
      }
      outlined destroy of GraphicsImage.Contents(a1 + 16);
    }
    *uint64_t v5 = *v6;
    *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
LABEL_10:
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(void *)(a1 + 48) = *(void *)(a2 + 48);
    *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
    *(_OWORD *)(a1 + 60) = *(_OWORD *)(a2 + 60);
    *(unsigned char *)(a1 + 76) = *(unsigned char *)(a2 + 76);
    long long v16 = *(_OWORD *)(a2 + 96);
    *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 96) = v16;
    *(unsigned char *)(a1 + 112) = *(unsigned char *)(a2 + 112);
    *(unsigned char *)(a1 + 113) = *(unsigned char *)(a2 + 113);
    unint64_t v17 = *(void *)(a1 + 136);
    *(_WORD *)(a1 + 114) = *(_WORD *)(a2 + 114);
    if (v17 >> 1 != 0xFFFFFFFF)
    {
      if ((v7 & 0xFFFFFFFFFFFFFFFELL) != 0x1FFFFFFFELL)
      {
        uint64_t v19 = *(void *)(a2 + 144);
        uint64_t v20 = *(void *)(a1 + 120);
        uint64_t v21 = *(void *)(a1 + 128);
        *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
        *(void *)(a1 + 136) = v7;
        *(void *)(a1 + 144) = v19;
        outlined consume of AccessibilityImageLabel(v20, v21, v17);
        goto LABEL_15;
      }
      outlined destroy of AccessibilityImageLabel(a1 + 120);
    }
    long long v18 = *(_OWORD *)(a2 + 136);
    *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
    *(_OWORD *)(a1 + 136) = v18;
LABEL_15:
    *(void *)(a1 + 152) = *(void *)(a2 + 152);
    swift_unknownObjectRelease();
    *(void *)(a1 + 160) = *(void *)(a2 + 160);
    swift_release();
    *(unsigned char *)(a1 + 168) = *(unsigned char *)(a2 + 168);
    *(unsigned char *)(a1 + 169) = *(unsigned char *)(a2 + 169);
    *(_DWORD *)(a1 + 172) = *(_DWORD *)(a2 + 172);
    *(unsigned char *)(a1 + 176) = *(unsigned char *)(a2 + 176);
    long long v22 = *(void **)(a1 + 184);
    *(void *)(a1 + 184) = *(void *)(a2 + 184);

    *(_WORD *)(a1 + 192) = *(_WORD *)(a2 + 192);
    *(unsigned char *)(a1 + 194) = *(unsigned char *)(a2 + 194);
    goto LABEL_16;
  }
  outlined destroy of Image.Resolved(a1 + 16);
LABEL_4:
  long long v8 = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 160) = v8;
  *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 176);
  *(_DWORD *)(a1 + 191) = *(_DWORD *)(a2 + 191);
  long long v9 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 96) = v9;
  long long v10 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = v10;
  long long v11 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)uint64_t v5 = *(_OWORD *)v6;
  *(_OWORD *)(a1 + 32) = v11;
  long long v12 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v12;
LABEL_16:
  *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 + 200);
  *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 216);
  *(unsigned char *)(a1 + 232) = *(unsigned char *)(a2 + 232);
  return a1;
}

uint64_t getEnumTagSinglePayload for AccessibilityLargeContentViewItem(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 233)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for AccessibilityLargeContentViewItem(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 232) = 0;
    *(void *)double result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 233) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 233) = 0;
    }
    if (a2) {
      *(void *)(result + 8) = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AccessibilityLargeContentViewItem()
{
  return &type metadata for AccessibilityLargeContentViewItem;
}

unsigned char *storeEnumTagSinglePayload for AccessibilityLargeContentViewBehavior(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *double result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1876A6DE4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *double result = a2 + 2;
        break;
    }
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AccessibilityLargeContentViewBehavior and conformance AccessibilityLargeContentViewBehavior()
{
  unint64_t result = lazy protocol witness table cache variable for type AccessibilityLargeContentViewBehavior and conformance AccessibilityLargeContentViewBehavior;
  if (!lazy protocol witness table cache variable for type AccessibilityLargeContentViewBehavior and conformance AccessibilityLargeContentViewBehavior)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityLargeContentViewBehavior and conformance AccessibilityLargeContentViewBehavior);
  }
  return result;
}

uint64_t AsOptional.init(_:transform:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a4 - 8) + 32))(a5, a1, a4);
  uint64_t result = type metadata accessor for AsOptional();
  long long v9 = (void *)(a5 + *(int *)(result + 52));
  *long long v9 = a2;
  v9[1] = a3;
  return result;
}

uint64_t type metadata accessor for AsOptional()
{
  return swift_getGenericMetadata();
}

uint64_t static AsOptional._makeViewList(view:inputs:)(int *a1, uint64_t *a2, uint64_t a3, uint64_t a4, unint64_t a5, unint64_t a6)
{
  int v20 = *a1;
  unint64_t v10 = a2[2];
  unsigned int v29 = *((_DWORD *)a2 + 6);
  int v30 = *((_DWORD *)a2 + 2);
  int v27 = *((_DWORD *)a2 + 8);
  unsigned int v28 = *((_DWORD *)a2 + 7);
  int v26 = *((_DWORD *)a2 + 9);
  uint64_t v11 = a2[5];
  uint64_t v24 = a2[7];
  uint64_t v25 = a2[6];
  uint64_t v12 = a2[9];
  char v22 = *((unsigned char *)a2 + 80);
  int v23 = *((_DWORD *)a2 + 16);
  uint64_t v21 = *a2;
  int v35 = v27;
  int v36 = v26;
  uint64_t v37 = v11;
  uint64_t v38 = v25;
  uint64_t v39 = v24;
  int v40 = v23;
  uint64_t v41 = v12;
  char v42 = v22;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  _ViewListCountInputs.init(_:)();
  long long v32 = v43;
  unint64_t v33 = __PAIR64__(HIDWORD(v10), v44);
  unint64_t v34 = v45;
  uint64_t v13 = (*(uint64_t (**)(long long *, uint64_t, unint64_t))(a5 + 40))(&v32, a3, a5);
  char v15 = v14;
  swift_bridgeObjectRelease();
  swift_release();
  LODWORD(v43) = v20;
  BOOL v17 = (v15 & 1) == 0 && v13 == 0;
  *(void *)&long long v32 = a3;
  *((void *)&v32 + 1) = a4;
  unint64_t v33 = a5;
  unint64_t v34 = a6;
  type metadata accessor for AsOptional();
  type metadata accessor for _GraphValue();
  int v18 = _GraphValue.value.getter();
  LOBYTE(v43) = v17;
  DWORD1(v43) = v18;
  *(void *)&long long v32 = a3;
  *((void *)&v32 + 1) = a4;
  unint64_t v33 = a5;
  unint64_t v34 = a6;
  type metadata accessor for AsOptional.Child();
  swift_getWitnessTable();
  _GraphValue.init<A>(_:)();
  *(void *)&long long v32 = v21;
  DWORD2(v32) = v30;
  unint64_t v33 = v10;
  unint64_t v34 = __PAIR64__(v28, v29);
  int v35 = v27;
  int v36 = v26;
  uint64_t v37 = v11;
  uint64_t v38 = v25;
  uint64_t v39 = v24;
  int v40 = v23;
  uint64_t v41 = v12;
  char v42 = v22;
  return (*(uint64_t (**)(unsigned char *, long long *, uint64_t, unint64_t))(a6 + 32))(v31, &v32, a4, a6);
}

uint64_t type metadata accessor for AsOptional.Child()
{
  return swift_getGenericMetadata();
}

uint64_t AsOptional.Child.view.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for AsOptional();
  uint64_t Value = AGGraphGetValue();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16))(a1, Value, v2);
}

uint64_t AsOptional.Child.value.getter@<X0>(char a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v28 = a6;
  uint64_t v11 = type metadata accessor for Optional();
  uint64_t v29 = *(void *)(v11 - 8);
  uint64_t v30 = v11;
  MEMORY[0x1F4188790](v11);
  int v27 = (char *)v25 - v12;
  uint64_t v31 = a2;
  uint64_t v32 = a3;
  uint64_t v33 = a4;
  uint64_t v34 = a5;
  uint64_t v13 = type metadata accessor for AsOptional();
  uint64_t v14 = *(void *)(v13 - 8);
  MEMORY[0x1F4188790](v13);
  long long v16 = (char *)v25 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v17);
  uint64_t v19 = (char *)v25 - v18;
  v25[0] = a3;
  v25[1] = a4;
  _OWORD v25[2] = a5;
  AsOptional.Child.view.getter((uint64_t)v25 - v18);
  int v26 = *(void (**)(char *))&v19[*(int *)(v13 + 52)];
  int v20 = *(void (**)(char *, uint64_t))(v14 + 8);
  swift_retain();
  v20(v19, v13);
  if (a1)
  {
    uint64_t v21 = *(void *)(a2 - 8);
    uint64_t v23 = 1;
    char v22 = v27;
  }
  else
  {
    AsOptional.Child.view.getter((uint64_t)v16);
    uint64_t v21 = *(void *)(a2 - 8);
    char v22 = v27;
    (*(void (**)(char *, char *, uint64_t))(v21 + 16))(v27, v16, a2);
    v20(v16, v13);
    uint64_t v23 = 0;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v21 + 56))(v22, v23, 1, a2);
  v26(v22);
  swift_release();
  return (*(uint64_t (**)(char *, uint64_t))(v29 + 8))(v22, v30);
}

uint64_t protocol witness for static Rule.initialValue.getter in conformance AsOptional<A, B>.Child@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 24) - 8) + 56))(a2, 1, 1);
}

uint64_t protocol witness for Rule.value.getter in conformance AsOptional<A, B>.Child@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return AsOptional.Child.value.getter(*v2, a1[2], a1[3], a1[4], a1[5], a2);
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance AsOptional<A, B>()
{
  swift_getWitnessTable();

  return static MultiView._makeView(view:inputs:)();
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance AsOptional<A, B>(int *a1, uint64_t *a2, uint64_t a3)
{
  return static AsOptional._makeViewList(view:inputs:)(a1, a2, *(void *)(a3 + 16), *(void *)(a3 + 24), *(void *)(a3 + 32), *(void *)(a3 + 40));
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance AsOptional<A, B>()
{
  return static MultiView._viewListCount(inputs:)();
}

void protocol witness for View.body.getter in conformance AsOptional<A, B>()
{
}

_UNKNOWN **base witness table accessor for View in AsOptional<A, B>()
{
  return &protocol witness table for AsOptional<A, B>;
}

uint64_t *initializeBufferWithCopyOfBuffer for AsOptional(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  unsigned int v4 = a1;
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  int v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0 || ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 16 > 0x18)
  {
    uint64_t v9 = *a2;
    *unsigned int v4 = *a2;
    unsigned int v4 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    unint64_t v10 = (void *)(((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v11 = v10[1];
    uint64_t v12 = (void *)(((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
    *uint64_t v12 = *v10;
    v12[1] = v11;
  }
  swift_retain();
  return v4;
}

uint64_t initializeWithTake for AsOptional(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 32;
  (*(void (**)(void))v5)();
  *(_OWORD *)((*(void *)(v5 + 32) + 7 + a1) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)((*(void *)(v5 + 32) + 7 + a2) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

uint64_t assignWithTake for AsOptional(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 40;
  (*(void (**)(void))v5)();
  *(_OWORD *)((*(void *)(v5 + 24) + 7 + a1) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)((*(void *)(v5 + 24) + 7 + a2) & 0xFFFFFFFFFFFFFFF8);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for AsOptional(_DWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (v5 <= 0x7FFFFFFF) {
    unsigned int v7 = 0x7FFFFFFF;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  if (v7 < a2)
  {
    unint64_t v8 = ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
    unsigned int v9 = a2 - v7;
    uint64_t v10 = v8 & 0xFFFFFFF8;
    if ((v8 & 0xFFFFFFF8) != 0) {
      unsigned int v11 = 2;
    }
    else {
      unsigned int v11 = v9 + 1;
    }
    if (v11 >= 0x10000) {
      unsigned int v12 = 4;
    }
    else {
      unsigned int v12 = 2;
    }
    if (v11 < 0x100) {
      unsigned int v12 = 1;
    }
    if (v11 >= 2) {
      uint64_t v13 = v12;
    }
    else {
      uint64_t v13 = 0;
    }
    switch(v13)
    {
      case 1:
        int v14 = *((unsigned __int8 *)a1 + v8);
        if (!v14) {
          break;
        }
        goto LABEL_22;
      case 2:
        int v14 = *(unsigned __int16 *)((char *)a1 + v8);
        if (v14) {
          goto LABEL_22;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x1876A79D8);
      case 4:
        int v14 = *(_DWORD *)((char *)a1 + v8);
        if (!v14) {
          break;
        }
LABEL_22:
        int v16 = v14 - 1;
        if (v10)
        {
          int v16 = 0;
          LODWORD(v10) = *a1;
        }
        return v7 + (v10 | v16) + 1;
      default:
        break;
    }
  }
  if (v5 >= 0x7FFFFFFF) {
    return (*(uint64_t (**)(void))(v4 + 48))();
  }
  unint64_t v17 = *(void *)(((unint64_t)a1 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
  if (v17 >= 0xFFFFFFFF) {
    LODWORD(v17) = -1;
  }
  return (v17 + 1);
}

void storeEnumTagSinglePayload for AsOptional(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  unint64_t v10 = ((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
  if (((v9 + 7) & 0xFFFFFFF8) == 0xFFFFFFF0) {
    unsigned int v11 = a3 - v8 + 1;
  }
  else {
    unsigned int v11 = 2;
  }
  if (v11 >= 0x10000) {
    int v12 = 4;
  }
  else {
    int v12 = 2;
  }
  if (v11 < 0x100) {
    int v12 = 1;
  }
  if (v11 >= 2) {
    unsigned int v13 = v12;
  }
  else {
    unsigned int v13 = 0;
  }
  if (v8 < a3) {
    uint64_t v14 = v13;
  }
  else {
    uint64_t v14 = 0;
  }
  if (a2 > v8)
  {
    if (((v9 + 7) & 0xFFFFFFF8) == 0xFFFFFFF0) {
      int v15 = a2 - v8;
    }
    else {
      int v15 = 1;
    }
    if (((v9 + 7) & 0xFFFFFFF8) != 0xFFFFFFF0)
    {
      int v16 = ~v8 + a2;
      bzero(a1, ((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 16);
      *(_DWORD *)a1 = v16;
    }
    switch(v14)
    {
      case 1:
        a1[v10] = v15;
        return;
      case 2:
        *(_WORD *)&a1[v10] = v15;
        return;
      case 3:
        goto LABEL_44;
      case 4:
        *(_DWORD *)&a1[v10] = v15;
        return;
      default:
        return;
    }
  }
  switch(v14)
  {
    case 1:
      a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_33;
    case 2:
      *(_WORD *)&a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_33;
    case 3:
LABEL_44:
      __break(1u);
      JUMPOUT(0x1876A7BCCLL);
    case 4:
      *(_DWORD *)&a1[v10] = 0;
      goto LABEL_32;
    default:
LABEL_32:
      if (a2)
      {
LABEL_33:
        if (v7 < 0x7FFFFFFF)
        {
          uint64_t v18 = (void *)((unint64_t)&a1[v9 + 7] & 0xFFFFFFFFFFFFFFF8);
          if ((a2 & 0x80000000) != 0)
          {
            uint64_t v19 = a2 ^ 0x80000000;
            v18[1] = 0;
          }
          else
          {
            uint64_t v19 = a2 - 1;
          }
          *uint64_t v18 = v19;
        }
        else
        {
          unint64_t v17 = *(void (**)(void))(v6 + 56);
          v17();
        }
      }
      return;
  }
}

uint64_t getEnumTagSinglePayload for AsOptional.Child(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && a1[8]) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *a1;
  BOOL v4 = v3 >= 2;
  int v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for AsOptional.Child(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(void *)uint64_t result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 8) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 8) = 0;
    }
    if (a2) {
      *(unsigned char *)uint64_t result = a2 + 1;
    }
  }
  return result;
}

uint64_t base witness table accessor for _AttributeBody in AsOptional<A, B>.Child()
{
  return swift_getWitnessTable();
}

uint64_t OptionalFormatInputToString.get(base:)(uint64_t a1)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v3 = type metadata accessor for Optional();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  uint64_t v6 = (char *)&v13 - v5;
  uint64_t v7 = *(void *)(AssociatedTypeWitness - 8);
  double v9 = MEMORY[0x1F4188790](v8);
  unsigned int v11 = (char *)&v13 - v10;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v4 + 16))(v6, a1, v3, v9);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v6, 1, AssociatedTypeWitness) == 1)
  {
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    return 0;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v11, v6, AssociatedTypeWitness);
    dispatch thunk of FormatStyle.format(_:)();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v11, AssociatedTypeWitness);
    return v13;
  }
}

uint64_t OptionalFormatInputToString.set(base:newValue:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v16 = a2;
  uint64_t v17 = a3;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v18 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v6 = (char *)&v15 - v5;
  uint64_t v7 = swift_getAssociatedTypeWitness();
  uint64_t v8 = type metadata accessor for Optional();
  uint64_t v9 = *(void *)(v8 - 8);
  double v10 = MEMORY[0x1F4188790](v8);
  int v12 = (char *)&v15 - v11;
  uint64_t v13 = *(void (**)(uint64_t, uint64_t, double))(v9 + 8);
  uint64_t v19 = a1;
  v13(a1, v8, v10);
  dispatch thunk of ParseableFormatStyle.parseStrategy.getter();
  uint64_t v20 = v16;
  uint64_t v21 = v17;
  swift_getAssociatedConformanceWitness();
  dispatch thunk of ParseStrategy.parse(_:)();
  (*(void (**)(char *, uint64_t))(v18 + 8))(v6, AssociatedTypeWitness);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(v12, 0, 1, v7);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v9 + 32))(v19, v12, v8);
}

uint64_t protocol witness for Projection.get(base:) in conformance OptionalFormatInputToString<A>@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = OptionalFormatInputToString.get(base:)(a1);
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t protocol witness for Projection.set(base:newValue:) in conformance OptionalFormatInputToString<A>(uint64_t a1, uint64_t *a2)
{
  return OptionalFormatInputToString.set(base:newValue:)(a1, *a2, a2[1]);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance OptionalFormatInputToString<A>()
{
  return OptionalFormatInputToString.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance OptionalFormatInputToString<A>()
{
  return OptionalFormatInputToString.hash(into:)();
}

uint64_t FormatInputToString.get(base:)()
{
  dispatch thunk of FormatStyle.format(_:)();
  return v1;
}

uint64_t FormatInputToString.set(base:newValue:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v16 = a3;
  uint64_t v14 = a1;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v7 = (char *)&v14 - v6;
  uint64_t v8 = swift_getAssociatedTypeWitness();
  uint64_t v15 = type metadata accessor for Optional();
  MEMORY[0x1F4188790](v15);
  double v10 = (char *)&v14 - v9;
  dispatch thunk of ParseableFormatStyle.parseStrategy.getter();
  uint64_t v17 = a2;
  uint64_t v18 = v16;
  swift_getAssociatedConformanceWitness();
  dispatch thunk of ParseStrategy.parse(_:)();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, AssociatedTypeWitness);
  uint64_t v11 = *(void *)(v8 - 8);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v10, 0, 1, v8);
  uint64_t v12 = v14;
  (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v14, v8);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v11 + 32))(v12, v10, v8);
}

uint64_t OptionalFormatInputToString.hash(into:)()
{
  return dispatch thunk of Hashable.hash(into:)();
}

uint64_t static OptionalFormatInputToString.== infix(_:_:)()
{
  return dispatch thunk of static Equatable.== infix(_:_:)() & 1;
}

Swift::Int OptionalFormatInputToString.hashValue.getter()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for Projection.get(base:) in conformance FormatInputToString<A>@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = FormatInputToString.get(base:)();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t protocol witness for Projection.set(base:newValue:) in conformance FormatInputToString<A>(uint64_t a1, uint64_t *a2)
{
  return FormatInputToString.set(base:newValue:)(a1, *a2, a2[1]);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance OptionalFormatInputToString<A>()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance FormatInputToString<A>()
{
  return static OptionalFormatInputToString.== infix(_:_:)() & 1;
}

uint64_t Optional<A>.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  dispatch thunk of BinaryFloatingPoint.init(_:)();
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(a1 - 8) + 56))(a2, 0, 1, a1);
  uint64_t v4 = type metadata accessor for Optional();
  uint64_t v5 = *(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);

  return v5(a2, 0, 1, v4);
}

uint64_t protocol witness for OptionalBinaryFloatingPoint.init(_:) in conformance <A> A?@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return Optional<A>.init(_:)(*(void *)(a1 + 16), a2);
}

uint64_t Optional<A>.init(_:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  lazy protocol witness table accessor for type Int and conformance Int();
  dispatch thunk of BinaryInteger.init<A>(_:)();
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(a1 - 8) + 56))(a2, 0, 1, a1);
  uint64_t v4 = type metadata accessor for Optional();
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56))(a2, 0, 1, v4);
}

uint64_t protocol witness for OptionalBinaryInteger.init(_:) in conformance <A> A?@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  return Optional<A>.init(_:)(*(void *)(a1 + 16), a2);
}

uint64_t AnyToFormattedString.__allocating_init(_:)(void *a1)
{
  uint64_t v2 = swift_allocObject();
  AnyToFormattedString.init(_:)(a1);
  return v2;
}

uint64_t AnyToFormattedString.init(_:)(void *a1)
{
  objc_msgSend(a1, sel_copy);
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();

  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for NSFormatter);
  swift_dynamicCast();
  *(void *)(v1 + 16) = v4;
  return v1;
}

void AnyToFormattedString.hash(into:)()
{
  id v1 = *(id *)(v0 + 16);
  NSObject.hash(into:)();
}

uint64_t static AnyToFormattedString.== infix(_:_:)()
{
  return static NSObject.== infix(_:_:)() & 1;
}

uint64_t AnyToFormattedString.get(base:)()
{
  id v1 = objc_msgSend(*(id *)(v0 + 16), sel_stringForObjectValue_, _bridgeAnythingToObjectiveC<A>(_:)());
  swift_unknownObjectRelease();
  if (!v1) {
    return 0;
  }
  uint64_t v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v2;
}

void AnyToFormattedString.set(base:newValue:)(uint64_t a1, uint64_t a2, unint64_t a3)
{
  static AnyToFormattedString.applyFormatting(to:string:formatter:)(a1, a2, a3, *(void **)(v3 + 16));
}

void static AnyToFormattedString.applyFormatting(to:string:formatter:)(uint64_t a1, uint64_t a2, unint64_t a3, void *a4)
{
  uint64_t v97 = a1;
  uint64_t v108 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = *(void *)(v4 + 80);
  uint64_t v9 = type metadata accessor for Optional();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9);
  uint64_t v12 = (char *)&v94 - v11;
  uint64_t v99 = v8;
  uint64_t v98 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v13);
  uint64_t v95 = (char *)&v94 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v15);
  uint64_t v17 = (char *)&v94 - v16;
  MEMORY[0x1F4188790](v18);
  uint64_t v20 = (char *)&v94 - v19;
  MEMORY[0x1F4188790](v21);
  unint64_t v96 = (char *)&v94 - v22;
  double v24 = MEMORY[0x1F4188790](v23);
  int v26 = (char *)&v94 - v25;
  int v27 = (void *)MEMORY[0x18C115780](a2, a3, v24);
  v105[0] = 0;
  *(void *)&long long v102 = 0;
  LODWORD(a4) = objc_msgSend(a4, sel_getObjectValue_forString_errorDescription_, v105, v27, &v102);

  uint64_t v28 = v105[0];
  id v100 = (id)v102;
  if (!a4)
  {
    id v39 = (id)v102;
    swift_unknownObjectRetain();
    static Semantics.v3.getter();
    if (isLinkedOnOrAfter(_:)()) {
      goto LABEL_20;
    }
    if (v39)
    {
      id v40 = v39;
      static os_log_type_t.fault.getter();
      uint64_t v41 = (void *)static Log.runtimeIssuesLog.getter();
      type metadata accessor for _ContiguousArrayStorage<CVarArg>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<CVarArg>, (unint64_t *)&lazy cache variable for type metadata for CVarArg, MEMORY[0x1E4FBC5A0], MEMORY[0x1E4FBBE00]);
      uint64_t v42 = swift_allocObject();
      *(_OWORD *)(v42 + 16) = xmmword_18834BB80;
      uint64_t v43 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v45 = v44;
      *(void *)(v42 + 56) = MEMORY[0x1E4FBB1A0];
      *(void *)(v42 + 64) = lazy protocol witness table accessor for type String and conformance String();
      *(void *)(v42 + 32) = v43;
      *(void *)(v42 + 40) = v45;
      os_log(_:dso:log:_:_:)();
    }
    else
    {
      static os_log_type_t.fault.getter();
      uint64_t v61 = (void *)static Log.runtimeIssuesLog.getter();
      type metadata accessor for _ContiguousArrayStorage<CVarArg>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<CVarArg>, (unint64_t *)&lazy cache variable for type metadata for CVarArg, MEMORY[0x1E4FBC5A0], MEMORY[0x1E4FBBE00]);
      uint64_t v62 = swift_allocObject();
      *(_OWORD *)(v62 + 16) = xmmword_18834BB70;
      uint64_t v63 = MEMORY[0x1E4FBB1A0];
      *(void *)(v62 + 56) = MEMORY[0x1E4FBB1A0];
      unint64_t v64 = lazy protocol witness table accessor for type String and conformance String();
      *(void *)(v62 + 64) = v64;
      *(void *)(v62 + 32) = a2;
      *(void *)(v62 + 40) = a3;
      v105[0] = v99;
      swift_getMetatypeMetadata();
      swift_bridgeObjectRetain();
      uint64_t v65 = String.init<A>(describing:)();
      *(void *)(v62 + 96) = v63;
      *(void *)(v62 + 104) = v64;
      *(void *)(v62 + 72) = v65;
      *(void *)(v62 + 80) = v66;
      os_log(_:dso:log:_:_:)();
    }
LABEL_19:
    swift_bridgeObjectRelease();
    goto LABEL_20;
  }
  id v29 = (id)v102;
  if (v28)
  {
    swift_unknownObjectRetain_n();
    self;
    uint64_t v30 = (void *)swift_dynamicCastObjCClass();
    if (v30)
    {
      id v94 = v30;
      uint64_t v31 = v97;
      uint64_t v32 = v98;
      uint64_t v33 = *(void (**)(char *, uint64_t, uint64_t))(v98 + 16);
      uint64_t v34 = v99;
      v33(v26, v97, v99);
      type metadata accessor for CVarArg(0, &lazy cache variable for type metadata for BinaryFloatingPoint);
      uint64_t v35 = v34;
      if (swift_dynamicCast())
      {
        (*(void (**)(uint64_t, uint64_t))(v32 + 8))(v31, v34);
        outlined init with take of OptionalBinaryInteger(&v102, (uint64_t)v105);
        __swift_project_boxed_opaque_existential_1(v105, v106);
        uint64_t DynamicType = swift_getDynamicType();
        uint64_t v37 = v107;
        objc_msgSend(v94, sel_doubleValue);
        *((void *)&v103 + 1) = DynamicType;
        uint64_t v104 = v37;
        __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v102);
        dispatch thunk of BinaryFloatingPoint.init(_:)();
        swift_unknownObjectRelease();
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v105);
        uint64_t v38 = v96;
        swift_dynamicCast();
        (*(void (**)(uint64_t, char *, uint64_t))(v32 + 32))(v31, v38, v34);
      }
      else
      {
        uint64_t v104 = 0;
        long long v102 = 0u;
        long long v103 = 0u;
        outlined destroy of BinaryFloatingPoint?((uint64_t)&v102, &lazy cache variable for type metadata for BinaryFloatingPoint?, &lazy cache variable for type metadata for BinaryFloatingPoint, MEMORY[0x1E4FBADE8]);
        v33(v20, v31, v34);
        type metadata accessor for CVarArg(0, &lazy cache variable for type metadata for BinaryInteger);
        if (swift_dynamicCast())
        {
          uint64_t v57 = v98;
          (*(void (**)(uint64_t, uint64_t))(v98 + 8))(v31, v35);
          outlined init with take of OptionalBinaryInteger(&v102, (uint64_t)v105);
          __swift_project_boxed_opaque_existential_1(v105, v106);
          uint64_t v58 = swift_getDynamicType();
          uint64_t v59 = v107;
          id v101 = objc_msgSend(v94, sel_integerValue);
          *((void *)&v103 + 1) = v58;
          uint64_t v104 = v59;
          __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v102);
          lazy protocol witness table accessor for type Int and conformance Int();
          dispatch thunk of BinaryInteger.init<A>(_:)();
          swift_unknownObjectRelease();
          __swift_destroy_boxed_opaque_existential_1((uint64_t)v105);
          uint64_t v60 = v96;
          swift_dynamicCast();
          (*(void (**)(uint64_t, char *, uint64_t))(v57 + 32))(v31, v60, v35);
        }
        else
        {
          uint64_t v104 = 0;
          long long v102 = 0u;
          long long v103 = 0u;
          outlined destroy of BinaryFloatingPoint?((uint64_t)&v102, &lazy cache variable for type metadata for BinaryInteger?, &lazy cache variable for type metadata for BinaryInteger, MEMORY[0x1E4FBB8E8]);
          v33(v17, v31, v34);
          type metadata accessor for CVarArg(0, &lazy cache variable for type metadata for OptionalBinaryFloatingPoint);
          if (swift_dynamicCast())
          {
            uint64_t v67 = v98;
            (*(void (**)(uint64_t, uint64_t))(v98 + 8))(v31, v34);
            outlined init with take of OptionalBinaryInteger(&v102, (uint64_t)v105);
            __swift_project_boxed_opaque_existential_1(v105, v106);
            uint64_t v68 = swift_getDynamicType();
            uint64_t v69 = v107;
            objc_msgSend(v94, sel_doubleValue);
            double v71 = v70;
            char v72 = *(void (**)(uint64_t, uint64_t, double))(v69 + 8);
            uint64_t v73 = type metadata accessor for Optional();
            uint64_t v74 = *(void *)(v73 - 8);
            MEMORY[0x1F4188790](v73);
            char v76 = (char *)&v94 - v75;
            v72(v68, v69, v71);
            uint64_t v77 = *(void *)(v68 - 8);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v77 + 48))(v76, 1, v68) == 1)
            {
              __swift_destroy_boxed_opaque_existential_1((uint64_t)v105);
              swift_unknownObjectRelease();
              (*(void (**)(char *, uint64_t))(v74 + 8))(v76, v73);
              uint64_t v104 = 0;
              long long v102 = 0u;
              long long v103 = 0u;
            }
            else
            {
              *((void *)&v103 + 1) = v68;
              uint64_t v104 = v69;
              boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v102);
              (*(void (**)(uint64_t *, char *, uint64_t))(v77 + 32))(boxed_opaque_existential_1, v76, v68);
              swift_unknownObjectRelease();
              __swift_destroy_boxed_opaque_existential_1((uint64_t)v105);
            }
            type metadata accessor for _ContiguousArrayStorage<CVarArg>(0, &lazy cache variable for type metadata for OptionalBinaryFloatingPoint?, &lazy cache variable for type metadata for OptionalBinaryFloatingPoint, (uint64_t)&protocol descriptor for OptionalBinaryFloatingPoint, MEMORY[0x1E4FBB718]);
            uint64_t v89 = v96;
            uint64_t v90 = v99;
            swift_dynamicCast();
            (*(void (**)(uint64_t, char *, uint64_t))(v67 + 32))(v97, v89, v90);
          }
          else
          {
            uint64_t v104 = 0;
            long long v102 = 0u;
            long long v103 = 0u;
            outlined destroy of BinaryFloatingPoint?((uint64_t)&v102, &lazy cache variable for type metadata for OptionalBinaryFloatingPoint?, &lazy cache variable for type metadata for OptionalBinaryFloatingPoint, (uint64_t)&protocol descriptor for OptionalBinaryFloatingPoint);
            v33(v95, v31, v34);
            type metadata accessor for CVarArg(0, &lazy cache variable for type metadata for OptionalBinaryInteger);
            if (swift_dynamicCast())
            {
              (*(void (**)(uint64_t, uint64_t))(v98 + 8))(v31, v34);
              outlined init with take of OptionalBinaryInteger(&v102, (uint64_t)v105);
              __swift_project_boxed_opaque_existential_1(v105, v106);
              uint64_t v78 = swift_getDynamicType();
              uint64_t v79 = v107;
              id v80 = objc_msgSend(v94, sel_integerValue);
              uint64_t v81 = *(void (**)(id, uint64_t, uint64_t, double))(v79 + 8);
              uint64_t v82 = type metadata accessor for Optional();
              uint64_t v83 = *(void *)(v82 - 8);
              double v84 = MEMORY[0x1F4188790](v82);
              uint64_t v86 = (char *)&v94 - v85;
              v81(v80, v78, v79, v84);
              uint64_t v87 = *(void *)(v78 - 8);
              if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v87 + 48))(v86, 1, v78) == 1)
              {
                __swift_destroy_boxed_opaque_existential_1((uint64_t)v105);
                swift_unknownObjectRelease();
                (*(void (**)(char *, uint64_t))(v83 + 8))(v86, v82);
                uint64_t v104 = 0;
                long long v102 = 0u;
                long long v103 = 0u;
              }
              else
              {
                *((void *)&v103 + 1) = v78;
                uint64_t v104 = v79;
                uint64_t v91 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v102);
                (*(void (**)(uint64_t *, char *, uint64_t))(v87 + 32))(v91, v86, v78);
                swift_unknownObjectRelease();
                __swift_destroy_boxed_opaque_existential_1((uint64_t)v105);
              }
              type metadata accessor for _ContiguousArrayStorage<CVarArg>(0, &lazy cache variable for type metadata for OptionalBinaryInteger?, &lazy cache variable for type metadata for OptionalBinaryInteger, (uint64_t)&protocol descriptor for OptionalBinaryInteger, MEMORY[0x1E4FBB718]);
              uint64_t v92 = v96;
              uint64_t v93 = v99;
              swift_dynamicCast();
              (*(void (**)(uint64_t, char *, uint64_t))(v98 + 32))(v97, v92, v93);
            }
            else
            {
              uint64_t v104 = 0;
              long long v102 = 0u;
              long long v103 = 0u;
              swift_unknownObjectRelease();
              outlined destroy of BinaryFloatingPoint?((uint64_t)&v102, &lazy cache variable for type metadata for OptionalBinaryInteger?, &lazy cache variable for type metadata for OptionalBinaryInteger, (uint64_t)&protocol descriptor for OptionalBinaryInteger);
            }
          }
        }
      }
      goto LABEL_20;
    }
    swift_unknownObjectRelease();
  }
  v105[0] = v28;
  type metadata accessor for Swift.AnyObject?();
  swift_unknownObjectRetain();
  uint64_t v46 = v99;
  int v47 = swift_dynamicCast();
  uint64_t v48 = v98;
  CGRect v49 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v98 + 56);
  if (v47)
  {
    v49(v12, 0, 1, v46);
    uint64_t v50 = v97;
    (*(void (**)(uint64_t, uint64_t))(v48 + 8))(v97, v46);
    (*(void (**)(uint64_t, char *, uint64_t))(v48 + 32))(v50, v12, v46);
    goto LABEL_20;
  }
  v49(v12, 1, 1, v46);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  uint64_t v51 = HIBYTE(a3) & 0xF;
  if ((a3 & 0x2000000000000000) == 0) {
    uint64_t v51 = a2 & 0xFFFFFFFFFFFFLL;
  }
  if (v51)
  {
    v105[0] = v99;
    swift_getMetatypeMetadata();
    uint64_t v52 = String.init<A>(describing:)();
    uint64_t v54 = v53;
    static os_log_type_t.fault.getter();
    uint64_t v55 = (void *)static Log.runtimeIssuesLog.getter();
    type metadata accessor for _ContiguousArrayStorage<CVarArg>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<CVarArg>, (unint64_t *)&lazy cache variable for type metadata for CVarArg, MEMORY[0x1E4FBC5A0], MEMORY[0x1E4FBBE00]);
    uint64_t v56 = swift_allocObject();
    *(_OWORD *)(v56 + 16) = xmmword_18834BB80;
    *(void *)(v56 + 56) = MEMORY[0x1E4FBB1A0];
    *(void *)(v56 + 64) = lazy protocol witness table accessor for type String and conformance String();
    *(void *)(v56 + 32) = v52;
    *(void *)(v56 + 40) = v54;
    os_log(_:dso:log:_:_:)();

    goto LABEL_19;
  }
LABEL_20:
  swift_unknownObjectRelease();
}

uint64_t AnyToFormattedString.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

Swift::Int AnyToFormattedString.hashValue.getter()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for Projection.get(base:) in conformance AnyToFormattedString<A>@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = AnyToFormattedString.get(base:)();
  *a1 = result;
  a1[1] = v3;
  return result;
}

void protocol witness for Projection.set(base:newValue:) in conformance AnyToFormattedString<A>(uint64_t a1, uint64_t a2)
{
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AnyToFormattedString<A>()
{
  return AnyToFormattedString.hashValue.getter();
}

void protocol witness for Hashable.hash(into:) in conformance AnyToFormattedString<A>()
{
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AnyToFormattedString<A1>()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance AnyToFormattedString<A>()
{
  return static AnyToFormattedString.== infix(_:_:)() & 1;
}

uint64_t TextField<>.init<A>(_:value:format:prompt:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v32 = a7;
  uint64_t v33 = a8;
  uint64_t v28 = a4;
  int v27 = a3;
  uint64_t v25 = a1;
  uint64_t v26 = a2;
  uint64_t v31 = a9;
  uint64_t v24 = a13;
  uint64_t v15 = *(void *)(a12 - 8);
  uint64_t v29 = a10;
  uint64_t v30 = a11;
  MEMORY[0x1F4188790](a1);
  uint64_t v17 = (char *)&v24 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_getAssociatedTypeWitness();
  type metadata accessor for Optional();
  uint64_t v18 = type metadata accessor for Binding();
  uint64_t v19 = *(void *)(v18 - 8);
  double v20 = MEMORY[0x1F4188790](v18);
  uint64_t v22 = (char *)&v24 - v21;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v19 + 16))((char *)&v24 - v21, a5, v18, v20);
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v17, a6, a12);
  uint64_t v35 = v25;
  uint64_t v36 = v26;
  char v37 = v27;
  uint64_t v38 = v28;
  TextField.init<A>(_:format:prompt:label:)((uint64_t)v22, (uint64_t)v17, v32, v33, v29, v30, (void (*)(uint64_t))partial apply for closure #1 in TextField<>.init<A>(_:value:format:prompt:), (uint64_t)v34, v31, MEMORY[0x1E4F41420], a12, MEMORY[0x1E4F41418], v24);
  (*(void (**)(uint64_t, uint64_t))(v15 + 8))(a6, a12);
  (*(void (**)(uint64_t, uint64_t))(v19 + 8))(a5, v18);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

{
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  double v20;
  uint64_t v21;
  char *v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned char v34[16];
  uint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v38;

  uint64_t v32 = a7;
  uint64_t v33 = a8;
  uint64_t v24 = a5;
  uint64_t v25 = a1;
  uint64_t v28 = a4;
  int v27 = a3;
  uint64_t v26 = a2;
  uint64_t v31 = a9;
  uint64_t v15 = *(void *)(a12 - 8);
  uint64_t v29 = a10;
  uint64_t v30 = a11;
  MEMORY[0x1F4188790](a1);
  uint64_t v17 = (char *)&v24 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_getAssociatedTypeWitness();
  uint64_t v18 = type metadata accessor for Binding();
  uint64_t v19 = *(void *)(v18 - 8);
  double v20 = MEMORY[0x1F4188790](v18);
  uint64_t v22 = (char *)&v24 - v21;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v19 + 16))((char *)&v24 - v21, a5, v18, v20);
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v17, a6, a12);
  uint64_t v35 = v25;
  uint64_t v36 = v26;
  char v37 = v27;
  uint64_t v38 = v28;
  TextField.init<A>(_:format:prompt:label:)((uint64_t)v22, (uint64_t)v17, v32, v33, v29, v30, (void (*)(uint64_t))partial apply for closure #1 in TextField<>.init<A>(_:value:format:prompt:), (uint64_t)v34, v31, MEMORY[0x1E4F41420], a12, MEMORY[0x1E4F41418], a13);
  (*(void (**)(uint64_t, uint64_t))(v15 + 8))(a6, a12);
  (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v24, v18);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t TextField<>.init<A, B>(_:value:format:prompt:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v31 = a6;
  uint64_t v32 = a7;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v27 = a1;
  uint64_t v28 = a9;
  uint64_t v25 = a2;
  uint64_t v26 = a11;
  uint64_t v15 = *(void *)(a10 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v17 = (char *)&v25 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_getAssociatedTypeWitness();
  type metadata accessor for Optional();
  uint64_t v18 = type metadata accessor for Binding();
  uint64_t v19 = *(void *)(v18 - 8);
  double v20 = MEMORY[0x1F4188790](v18);
  uint64_t v22 = (char *)&v25 - v21;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v19 + 16))((char *)&v25 - v21, a2, v18, v20);
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v17, a3, a10);
  uint64_t v34 = a8;
  uint64_t v35 = a10;
  uint64_t v23 = v27;
  uint64_t v36 = v26;
  uint64_t v37 = a12;
  uint64_t v38 = v27;
  TextField.init<A>(_:format:prompt:label:)((uint64_t)v22, (uint64_t)v17, v29, v30, v31, v32, (void (*)(uint64_t))partial apply for closure #1 in TextField<>.init<A, B>(_:value:format:prompt:), (uint64_t)v33, v28, MEMORY[0x1E4F41420], a10, MEMORY[0x1E4F41418], a12);
  (*(void (**)(uint64_t, uint64_t))(v15 + 8))(a3, a10);
  (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v25, v18);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a8 - 8) + 8))(v23, a8);
}

{
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  double v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned char v33[16];
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  uint64_t v27 = a8;
  uint64_t v28 = a9;
  uint64_t v31 = a6;
  uint64_t v32 = a7;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v25 = a2;
  uint64_t v26 = a11;
  uint64_t v15 = *(void *)(a10 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v17 = (char *)&v25 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_getAssociatedTypeWitness();
  uint64_t v18 = type metadata accessor for Binding();
  uint64_t v19 = *(void *)(v18 - 8);
  double v20 = MEMORY[0x1F4188790](v18);
  uint64_t v22 = (char *)&v25 - v21;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v19 + 16))((char *)&v25 - v21, a2, v18, v20);
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v17, a3, a10);
  uint64_t v23 = v27;
  uint64_t v34 = v27;
  uint64_t v35 = a10;
  uint64_t v36 = v26;
  uint64_t v37 = a12;
  uint64_t v38 = a1;
  TextField.init<A>(_:format:prompt:label:)((uint64_t)v22, (uint64_t)v17, v29, v30, v31, v32, (void (*)(uint64_t))partial apply for closure #1 in TextField<>.init<A, B>(_:value:format:prompt:), (uint64_t)v33, v28, MEMORY[0x1E4F41420], a10, MEMORY[0x1E4F41418], a12);
  (*(void (**)(uint64_t, uint64_t))(v15 + 8))(a3, a10);
  (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v25, v18);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v23 - 8) + 8))(a1, v23);
}

uint64_t partial apply for closure #1 in TextField<>.init<A>(_:value:format:prompt:)@<X0>(uint64_t a1@<X8>)
{
  return closure #1 in TextField<>.init<A>(_:value:format:prompt:)(a1);
}

uint64_t closure #1 in TextField<>.init<A, B>(_:value:format:prompt:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  double v3 = MEMORY[0x1F4188790](a1);
  (*(void (**)(char *, double))(v5 + 16))((char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v3);
  uint64_t result = Text.init<A>(_:)();
  *(void *)a2 = result;
  *(void *)(a2 + 8) = v7;
  *(unsigned char *)(a2 + 16) = v8 & 1;
  *(void *)(a2 + 24) = v9;
  return result;
}

uint64_t partial apply for closure #1 in TextField<>.init<A, B>(_:value:format:prompt:)@<X0>(uint64_t a1@<X8>)
{
  return closure #1 in TextField<>.init<A, B>(_:value:format:prompt:)(*(void *)(v1 + 48), a1);
}

uint64_t TextField.init<A>(value:format:prompt:label:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, void (*a7)(uint64_t)@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v30 = a7;
  uint64_t v31 = a8;
  uint64_t v28 = a5;
  uint64_t v29 = a6;
  uint64_t v26 = a3;
  uint64_t v27 = a4;
  uint64_t v25 = a9;
  uint64_t v24 = a10;
  uint64_t v15 = *(void *)(a11 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v17 = (char *)&v24 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_getAssociatedTypeWitness();
  type metadata accessor for Optional();
  uint64_t v18 = type metadata accessor for Binding();
  uint64_t v19 = *(void *)(v18 - 8);
  double v20 = MEMORY[0x1F4188790](v18);
  uint64_t v22 = (char *)&v24 - v21;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v19 + 16))((char *)&v24 - v21, a1, v18, v20);
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v17, a2, a11);
  TextField.init<A>(_:format:prompt:label:)((uint64_t)v22, (uint64_t)v17, v26, v27, v28, v29, v30, v31, v25, v24, a11, a12, a13);
  (*(void (**)(uint64_t, uint64_t))(v15 + 8))(a2, a11);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v19 + 8))(a1, v18);
}

{
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  double v20;
  uint64_t v21;
  char *v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(uint64_t);
  uint64_t v31;

  uint64_t v30 = a7;
  uint64_t v31 = a8;
  uint64_t v28 = a5;
  uint64_t v29 = a6;
  uint64_t v26 = a3;
  uint64_t v27 = a4;
  uint64_t v25 = a9;
  uint64_t v24 = a10;
  uint64_t v15 = *(void *)(a11 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v17 = (char *)&v24 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_getAssociatedTypeWitness();
  uint64_t v18 = type metadata accessor for Binding();
  uint64_t v19 = *(void *)(v18 - 8);
  double v20 = MEMORY[0x1F4188790](v18);
  uint64_t v22 = (char *)&v24 - v21;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v19 + 16))((char *)&v24 - v21, a1, v18, v20);
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v17, a2, a11);
  TextField.init<A>(_:format:prompt:label:)((uint64_t)v22, (uint64_t)v17, v26, v27, v28, v29, v30, v31, v25, v24, a11, a12, a13);
  (*(void (**)(uint64_t, uint64_t))(v15 + 8))(a2, a11);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v19 + 8))(a1, v18);
}

uint64_t TextField<>.init<A>(_:value:formatter:prompt:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, void *a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v28 = a7;
  uint64_t v29 = a8;
  uint64_t v26 = a10;
  uint64_t v27 = a6;
  uint64_t v25 = a11;
  uint64_t v18 = type metadata accessor for Binding();
  uint64_t v19 = *(void *)(v18 - 8);
  double v20 = MEMORY[0x1F4188790](v18);
  uint64_t v22 = (char *)&v24 - v21;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v19 + 16))((char *)&v24 - v21, a5, v18, v20);
  uint64_t v31 = a1;
  uint64_t v32 = a2;
  char v33 = a3;
  uint64_t v34 = a4;
  TextField.init<A>(_:formatter:prompt:onEditingChanged:onCommit:label:)((uint64_t)v22, v27, v28, v29, v26, v25, (uint64_t)destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation, 0, a9, 0, 0, (void (*)(uint64_t))partial apply for closure #1 in TextField<>.init<A>(_:value:format:prompt:), (uint64_t)v30, MEMORY[0x1E4F41420], a12, MEMORY[0x1E4F41418]);
  (*(void (**)(uint64_t, uint64_t))(v19 + 8))(a5, v18);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t TextField<>.init<A, B>(_:value:formatter:prompt:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11)
{
  uint64_t v24 = a6;
  uint64_t v25 = a7;
  uint64_t v22 = a4;
  uint64_t v23 = a5;
  uint64_t v16 = type metadata accessor for Binding();
  uint64_t v17 = *(void *)(v16 - 8);
  double v18 = MEMORY[0x1F4188790](v16);
  double v20 = (char *)&v22 - v19;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v17 + 16))((char *)&v22 - v19, a2, v16, v18);
  uint64_t v27 = a8;
  uint64_t v28 = a10;
  uint64_t v29 = a11;
  uint64_t v30 = a1;
  TextField.init<A>(_:formatter:prompt:onEditingChanged:onCommit:label:)((uint64_t)v20, a3, v22, v23, v24, v25, (uint64_t)destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation, 0, a9, 0, 0, (void (*)(uint64_t))partial apply for closure #2 in TextField<>.init<A, B>(_:value:formatter:prompt:), (uint64_t)v26, MEMORY[0x1E4F41420], a10, MEMORY[0x1E4F41418]);
  (*(void (**)(uint64_t, uint64_t))(v17 + 8))(a2, v16);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a8 - 8) + 8))(a1, a8);
}

uint64_t TextField.init<A>(value:formatter:prompt:label:)@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, void (*a7)(uint64_t)@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v23 = a8;
  uint64_t v24 = a3;
  uint64_t v26 = a5;
  uint64_t v27 = a6;
  uint64_t v25 = a4;
  uint64_t v16 = type metadata accessor for Binding();
  uint64_t v17 = *(void *)(v16 - 8);
  double v18 = MEMORY[0x1F4188790](v16);
  double v20 = (char *)&v22 - v19;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v17 + 16))((char *)&v22 - v19, a1, v16, v18);
  TextField.init<A>(_:formatter:prompt:onEditingChanged:onCommit:label:)((uint64_t)v20, a2, v24, v25, v26, v27, (uint64_t)destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation, 0, a9, 0, 0, a7, v23, a10, a11, a12);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v17 + 8))(a1, v16);
}

uint64_t TextField<>.init<A>(_:value:formatter:onEditingChanged:onCommit:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, void *a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v27 = a6;
  uint64_t v28 = a7;
  int v24 = a3;
  uint64_t v26 = a9;
  uint64_t v25 = a10;
  uint64_t v17 = type metadata accessor for Binding();
  uint64_t v18 = *(void *)(v17 - 8);
  double v19 = MEMORY[0x1F4188790](v17);
  uint64_t v21 = &v23[-v20];
  (*(void (**)(unsigned char *, uint64_t, uint64_t, double))(v18 + 16))(&v23[-v20], a5, v17, v19);
  uint64_t v30 = a1;
  uint64_t v31 = a2;
  char v32 = v24;
  uint64_t v33 = a4;
  swift_retain();
  swift_retain();
  TextField.init<A>(_:formatter:prompt:onEditingChanged:onCommit:label:)((uint64_t)v21, v27, 0, 0, 0, 0, v28, a8, v26, v25, a11, (void (*)(uint64_t))partial apply for closure #1 in TextField<>.init<A>(_:value:format:prompt:), (uint64_t)v29, MEMORY[0x1E4F41420], a12, MEMORY[0x1E4F41418]);
  swift_release();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v18 + 8))(a5, v17);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t TextField<>.init<A, B>(_:value:formatter:onEditingChanged:onCommit:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11)
{
  uint64_t v23 = a6;
  int v24 = a3;
  uint64_t v25 = a4;
  uint64_t v22 = a9;
  uint64_t v16 = type metadata accessor for Binding();
  uint64_t v17 = *(void *)(v16 - 8);
  double v18 = MEMORY[0x1F4188790](v16);
  uint64_t v20 = (char *)&v22 - v19;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v17 + 16))((char *)&v22 - v19, a2, v16, v18);
  uint64_t v27 = a8;
  uint64_t v28 = a10;
  uint64_t v29 = a11;
  uint64_t v30 = a1;
  swift_retain();
  swift_retain();
  TextField.init<A>(_:formatter:prompt:onEditingChanged:onCommit:label:)((uint64_t)v20, v24, 0, 0, 0, 0, v25, a5, v22, v23, a7, (void (*)(uint64_t))partial apply for closure #1 in TextField<>.init<A, B>(_:value:formatter:onEditingChanged:onCommit:), (uint64_t)v26, MEMORY[0x1E4F41420], a10, MEMORY[0x1E4F41418]);
  swift_release();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v17 + 8))(a2, v16);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a8 - 8) + 8))(a1, a8);
}

uint64_t closure #1 in TextField<>.init<A>(_:value:format:prompt:)@<X0>(uint64_t a1@<X8>)
{
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t result = Text.init(_:tableName:bundle:comment:)();
  *(void *)a1 = result;
  *(void *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 16) = v4 & 1;
  *(void *)(a1 + 24) = v5;
  return result;
}

uint64_t partial apply for closure #1 in TextField<>.init<A, B>(_:value:formatter:onEditingChanged:onCommit:)@<X0>(uint64_t a1@<X8>)
{
  return closure #1 in TextField<>.init<A, B>(_:value:format:prompt:)(*(void *)(v1 + 40), a1);
}

uint64_t type metadata completion function for AnyToFormattedString()
{
  return swift_initClassMetadata2();
}

uint64_t type metadata accessor for AnyToFormattedString()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t base witness table accessor for Equatable in AnyToFormattedString<A>()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for Hashable in AnyToFormattedString<A>()
{
  return swift_getWitnessTable();
}

unint64_t lazy protocol witness table accessor for type String and conformance String()
{
  unint64_t result = lazy protocol witness table cache variable for type String and conformance String;
  if (!lazy protocol witness table cache variable for type String and conformance String)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String and conformance String);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type String and conformance String;
  if (!lazy protocol witness table cache variable for type String and conformance String)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String and conformance String);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type String and conformance String;
  if (!lazy protocol witness table cache variable for type String and conformance String)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String and conformance String);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type String and conformance String;
  if (!lazy protocol witness table cache variable for type String and conformance String)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String and conformance String);
  }
  return result;
}

void type metadata accessor for Swift.AnyObject?()
{
  if (!lazy cache variable for type metadata for Swift.AnyObject?)
  {
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Swift.AnyObject?);
    }
  }
}

uint64_t outlined destroy of BinaryFloatingPoint?(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t a4)
{
  type metadata accessor for _ContiguousArrayStorage<CVarArg>(0, a2, a3, a4, MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(a1, v5);
  return a1;
}

unint64_t lazy protocol witness table accessor for type Int and conformance Int()
{
  unint64_t result = lazy protocol witness table cache variable for type Int and conformance Int;
  if (!lazy protocol witness table cache variable for type Int and conformance Int)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Int and conformance Int);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Int and conformance Int;
  if (!lazy protocol witness table cache variable for type Int and conformance Int)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Int and conformance Int);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Int and conformance Int;
  if (!lazy protocol witness table cache variable for type Int and conformance Int)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Int and conformance Int);
  }
  return result;
}

uint64_t type metadata accessor for OptionalFormatInputToString()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t getEnumTagSinglePayload for OptionalFormatInputToString(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (!a2) {
    return 0;
  }
  unsigned int v7 = a2 - v5;
  if (a2 <= v5) {
    goto LABEL_19;
  }
  char v8 = 8 * v6;
  if (v6 <= 3)
  {
    unsigned int v10 = ((v7 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      int v9 = *(_DWORD *)((char *)a1 + v6);
      if (!v9) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      int v9 = *(unsigned __int16 *)((char *)a1 + v6);
      if (!*(unsigned __int16 *)((char *)a1 + v6)) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_19:
      if (v5) {
        return (*(uint64_t (**)(void))(v4 + 48))();
      }
      return 0;
    }
  }
  int v9 = *((unsigned __int8 *)a1 + v6);
  if (!*((unsigned char *)a1 + v6)) {
    goto LABEL_19;
  }
LABEL_11:
  int v11 = (v9 - 1) << v8;
  if (v6 > 3) {
    int v11 = 0;
  }
  if (v6)
  {
    if (v6 > 3) {
      LODWORD(v6) = 4;
    }
    switch((int)v6)
    {
      case 2:
        LODWORD(v6) = *a1;
        break;
      case 3:
        LODWORD(v6) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v6) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v6) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v5 + (v6 | v11) + 1;
}

void storeEnumTagSinglePayload for OptionalFormatInputToString(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = *(void *)(v6 + 64);
  BOOL v9 = a3 >= v7;
  unsigned int v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      unsigned int v14 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v14))
      {
        int v11 = 4;
      }
      else if (v14 >= 0x100)
      {
        int v11 = 2;
      }
      else
      {
        int v11 = v14 > 1;
      }
    }
    else
    {
      int v11 = 1;
    }
  }
  else
  {
    int v11 = 0;
  }
  if (v7 < a2)
  {
    unsigned int v12 = ~v7 + a2;
    if (v8 < 4)
    {
      int v13 = (v12 >> (8 * v8)) + 1;
      if (v8)
      {
        int v15 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if (v8 == 3)
        {
          *(_WORD *)a1 = v15;
          a1[2] = BYTE2(v15);
        }
        else if (v8 == 2)
        {
          *(_WORD *)a1 = v15;
        }
        else
        {
          *a1 = v15;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v12;
      int v13 = 1;
    }
    switch(v11)
    {
      case 1:
        a1[v8] = v13;
        return;
      case 2:
        *(_WORD *)&a1[v8] = v13;
        return;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v8] = v13;
        return;
      default:
        return;
    }
  }
  switch(v11)
  {
    case 1:
      a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 2:
      *(_WORD *)&a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 3:
LABEL_34:
      __break(1u);
      JUMPOUT(0x1876AB790);
    case 4:
      *(_DWORD *)&a1[v8] = 0;
      goto LABEL_20;
    default:
LABEL_20:
      if (a2)
      {
LABEL_21:
        uint64_t v16 = *(void (**)(void))(v6 + 56);
        v16();
      }
      return;
  }
}

uint64_t type metadata accessor for FormatInputToString()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t base witness table accessor for Equatable in FormatInputToString<A>()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for Equatable in OptionalFormatInputToString<A>()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for Hashable in OptionalFormatInputToString<A>()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for Hashable in FormatInputToString<A>()
{
  return swift_getWitnessTable();
}

uint64_t PickerContent.onHover(perform:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v9 = *(void *)(a3 - 8);
  double v10 = MEMORY[0x1F4188790](a1);
  unsigned int v12 = (char *)&v15 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, double))(v9 + 16))(v12, v4, v10);
  (*(void (**)(uint64_t, char *, uint64_t))(v9 + 32))(a4, v12, a3);
  int v13 = (void *)(a4 + *(int *)(type metadata accessor for _OnHoverPickerContent() + 36));
  *int v13 = a1;
  v13[1] = a2;
  return swift_retain();
}

uint64_t _OnHoverPickerContent._identifiedView.getter(uint64_t a1)
{
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v3 = *(void *)(a1 + 24);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v6 = *(void *)(AssociatedTypeWitness - 8);
  double v7 = MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v9 = (char *)&v14 - v8;
  (*(void (**)(uint64_t, uint64_t, double))(v3 + 56))(v4, v3, v7);
  double v10 = (uint64_t *)(v1 + *(int *)(a1 + 36));
  uint64_t v11 = *v10;
  uint64_t v12 = v10[1];
  swift_getAssociatedConformanceWitness();
  View.onHover(perform:)(v11, v12, AssociatedTypeWitness);
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v9, AssociatedTypeWitness);
}

uint64_t associated type witness table accessor for PickerContent.Body : PickerContent in _OnHoverPickerContent<A>()
{
  return swift_getWitnessTable();
}

uint64_t associated type witness table accessor for PickerContent.SelectionValue : Hashable in _OnHoverPickerContent<A>()
{
  return swift_getAssociatedConformanceWitness();
}

uint64_t associated type witness table accessor for PickerContent._IdentifiedView : View in _OnHoverPickerContent<A>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t instantiation function for generic protocol witness table for _OnHoverPickerContent<A>(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t getEnumTagSinglePayload for _OnHoverPickerContent(_DWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (v5 <= 0x7FFFFFFF) {
    unsigned int v7 = 0x7FFFFFFF;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  if (v7 < a2)
  {
    unint64_t v8 = ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
    unsigned int v9 = a2 - v7;
    uint64_t v10 = v8 & 0xFFFFFFF8;
    if ((v8 & 0xFFFFFFF8) != 0) {
      unsigned int v11 = 2;
    }
    else {
      unsigned int v11 = v9 + 1;
    }
    if (v11 >= 0x10000) {
      unsigned int v12 = 4;
    }
    else {
      unsigned int v12 = 2;
    }
    if (v11 < 0x100) {
      unsigned int v12 = 1;
    }
    if (v11 >= 2) {
      uint64_t v13 = v12;
    }
    else {
      uint64_t v13 = 0;
    }
    switch(v13)
    {
      case 1:
        int v14 = *((unsigned __int8 *)a1 + v8);
        if (!v14) {
          break;
        }
        goto LABEL_22;
      case 2:
        int v14 = *(unsigned __int16 *)((char *)a1 + v8);
        if (v14) {
          goto LABEL_22;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x1876ABCC0);
      case 4:
        int v14 = *(_DWORD *)((char *)a1 + v8);
        if (!v14) {
          break;
        }
LABEL_22:
        int v16 = v14 - 1;
        if (v10)
        {
          int v16 = 0;
          LODWORD(v10) = *a1;
        }
        return v7 + (v10 | v16) + 1;
      default:
        break;
    }
  }
  if (v5 >= 0x7FFFFFFF) {
    return (*(uint64_t (**)(void))(v4 + 48))();
  }
  unint64_t v17 = *(void *)(((unint64_t)a1 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
  if (v17 >= 0xFFFFFFFF) {
    LODWORD(v17) = -1;
  }
  return (v17 + 1);
}

void storeEnumTagSinglePayload for _OnHoverPickerContent(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  unint64_t v10 = ((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
  if (((v9 + 7) & 0xFFFFFFF8) == 0xFFFFFFF0) {
    unsigned int v11 = a3 - v8 + 1;
  }
  else {
    unsigned int v11 = 2;
  }
  if (v11 >= 0x10000) {
    int v12 = 4;
  }
  else {
    int v12 = 2;
  }
  if (v11 < 0x100) {
    int v12 = 1;
  }
  if (v11 >= 2) {
    unsigned int v13 = v12;
  }
  else {
    unsigned int v13 = 0;
  }
  if (v8 < a3) {
    uint64_t v14 = v13;
  }
  else {
    uint64_t v14 = 0;
  }
  if (a2 > v8)
  {
    if (((v9 + 7) & 0xFFFFFFF8) == 0xFFFFFFF0) {
      int v15 = a2 - v8;
    }
    else {
      int v15 = 1;
    }
    if (((v9 + 7) & 0xFFFFFFF8) != 0xFFFFFFF0)
    {
      int v16 = ~v8 + a2;
      bzero(a1, ((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 16);
      *(_DWORD *)a1 = v16;
    }
    switch(v14)
    {
      case 1:
        a1[v10] = v15;
        return;
      case 2:
        *(_WORD *)&a1[v10] = v15;
        return;
      case 3:
        goto LABEL_44;
      case 4:
        *(_DWORD *)&a1[v10] = v15;
        return;
      default:
        return;
    }
  }
  switch(v14)
  {
    case 1:
      a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_33;
    case 2:
      *(_WORD *)&a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_33;
    case 3:
LABEL_44:
      __break(1u);
      JUMPOUT(0x1876ABEB4);
    case 4:
      *(_DWORD *)&a1[v10] = 0;
      goto LABEL_32;
    default:
LABEL_32:
      if (a2)
      {
LABEL_33:
        if (v7 < 0x7FFFFFFF)
        {
          double v18 = (void *)((unint64_t)&a1[v9 + 7] & 0xFFFFFFFFFFFFFFF8);
          if ((a2 & 0x80000000) != 0)
          {
            uint64_t v19 = a2 ^ 0x80000000;
            v18[1] = 0;
          }
          else
          {
            uint64_t v19 = a2 - 1;
          }
          *double v18 = v19;
        }
        else
        {
          unint64_t v17 = *(void (**)(void))(v6 + 56);
          v17();
        }
      }
      return;
  }
}

uint64_t type metadata accessor for _OnHoverPickerContent()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_1876ABEF4()
{
  return swift_getWitnessTable();
}

uint64_t RichTextEditor.init(text:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return outlined init with take of Binding<AttributedString>(a1, a2);
}

uint64_t RichTextEditor.body.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of Binding<AttributedString>(v1, a1);
}

uint64_t outlined init with copy of Binding<AttributedString>(uint64_t a1, uint64_t a2)
{
  type metadata accessor for Binding<AttributedString>();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t associated type witness table accessor for View.Body : View in RichTextEditor()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance RichTextEditor()
{
  return 0;
}

uint64_t protocol witness for View.body.getter in conformance RichTextEditor@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of Binding<AttributedString>(v1, a1);
}

uint64_t *initializeBufferWithCopyOfBuffer for RichTextEditor(uint64_t *a1, uint64_t *a2)
{
  type metadata accessor for Binding<AttributedString>();
  int v5 = *(_DWORD *)(*(void *)(v4 - 8) + 80);
  uint64_t v6 = *a2;
  *a1 = *a2;
  if ((v5 & 0x20000) != 0)
  {
    a1 = (uint64_t *)(v6 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    a1[1] = a2[1];
    uint64_t v7 = *(int *)(v4 + 32);
    unsigned int v8 = (char *)a1 + v7;
    uint64_t v9 = (char *)a2 + v7;
    uint64_t v10 = type metadata accessor for AttributedString();
    unsigned int v11 = *(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16);
    swift_retain();
    swift_retain();
    v11(v8, v9, v10);
  }
  return a1;
}

uint64_t destroy for RichTextEditor(uint64_t a1)
{
  swift_release();
  swift_release();
  type metadata accessor for Binding<AttributedString>();
  uint64_t v3 = a1 + *(int *)(v2 + 32);
  uint64_t v4 = type metadata accessor for AttributedString();
  int v5 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8);

  return v5(v3, v4);
}

void *initializeWithCopy for RichTextEditor(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  type metadata accessor for Binding<AttributedString>();
  uint64_t v6 = *(int *)(v5 + 32);
  uint64_t v7 = (char *)a1 + v6;
  unsigned int v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for AttributedString();
  uint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16);
  swift_retain();
  swift_retain();
  v10(v7, v8, v9);
  return a1;
}

void *assignWithCopy for RichTextEditor(void *a1, void *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  type metadata accessor for Binding<AttributedString>();
  uint64_t v5 = *(int *)(v4 + 32);
  uint64_t v6 = (char *)a1 + v5;
  uint64_t v7 = (char *)a2 + v5;
  uint64_t v8 = type metadata accessor for AttributedString();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 24))(v6, v7, v8);
  return a1;
}

void *initializeWithTake for RichTextEditor(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  type metadata accessor for Binding<AttributedString>();
  uint64_t v6 = *(int *)(v5 + 32);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for AttributedString();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32))(v7, v8, v9);
  return a1;
}

void *assignWithTake for RichTextEditor(void *a1, void *a2)
{
  *a1 = *a2;
  swift_release();
  a1[1] = a2[1];
  swift_release();
  type metadata accessor for Binding<AttributedString>();
  uint64_t v5 = *(int *)(v4 + 32);
  uint64_t v6 = (char *)a1 + v5;
  uint64_t v7 = (char *)a2 + v5;
  uint64_t v8 = type metadata accessor for AttributedString();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 40))(v6, v7, v8);
  return a1;
}

uint64_t getEnumTagSinglePayload for RichTextEditor(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1876AC47C);
}

uint64_t sub_1876AC47C(uint64_t a1, uint64_t a2)
{
  type metadata accessor for Binding<AttributedString>();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48);

  return v5(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for RichTextEditor(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1876AC4FC);
}

uint64_t sub_1876AC4FC(uint64_t a1, uint64_t a2)
{
  type metadata accessor for Binding<AttributedString>();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);

  return v5(a1, a2, a2, v4);
}

uint64_t type metadata accessor for RichTextEditor()
{
  uint64_t result = type metadata singleton initialization cache for RichTextEditor;
  if (!type metadata singleton initialization cache for RichTextEditor) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void type metadata completion function for RichTextEditor()
{
  type metadata accessor for Binding<AttributedString>();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

_UNKNOWN **sub_1876AC644()
{
  return &protocol witness table for UIKitRichTextEditor;
}

uint64_t TableDataSourceAdaptor.init(rowList:columnList:cellFormulas:hasSelection:sortOrder:columnCustomization:showsFirstColumnOnly:tableColumnHeadersVisibility:accessibilityEnabled:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, long long a11, char a12, char a13, char a14)
{
  char v17 = a14;
  *(void *)(a9 + 160) = 0;
  *(_OWORD *)(a9 + 128) = 0u;
  *(_OWORD *)(a9 + 144) = 0u;
  *(_OWORD *)(a9 + 112) = 0u;
  outlined init with copy of TableColumnList(a2, (uint64_t)v34);
  v34[40] = 0;
  if (a10)
  {
    *(void *)&long long v31 = a8;
    *((void *)&v31 + 1) = a10;
    long long v32 = a11;
    type metadata accessor for TableRowList?(0, &lazy cache variable for type metadata for Binding<AnyTableColumnCustomization>, (uint64_t)&type metadata for AnyTableColumnCustomization, MEMORY[0x1E4F41638]);
    uint64_t v19 = v18;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    MEMORY[0x18C113DA0](v30, v19);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    size_t v20 = specialized static AnyTableColumnCustomization.arrangedColumns<A, B>(_:customization:includeHidden:defaultVisibility:id:)((uint64_t)v34, v30[0], v30[1], 0, specialized implicit closure #1 in TableDataSourceAdaptor.init(rowList:columnList:cellFormulas:hasSelection:sortOrder:columnCustomization:showsFirstColumnOnly:tableColumnHeadersVisibility:accessibilityEnabled:), 0, (uint64_t)specialized implicit closure #2 in TableDataSourceAdaptor.init(rowList:columnList:cellFormulas:hasSelection:sortOrder:columnCustomization:showsFirstColumnOnly:tableColumnHeadersVisibility:accessibilityEnabled:), 0);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    *(void *)(a9 + 48) = v20;
    *(unsigned char *)(a9 + 88) = 1;
  }
  else
  {
    outlined init with copy of TableColumnCollection((uint64_t)v34, a9 + 48);
  }
  if (a14)
  {
    uint64_t v21 = Array<A>.withResolvedOffsets.getter(a3);
    swift_bridgeObjectRelease();
    a3 = v21;
    char v17 = a14;
  }
  *(void *)(a9 + 96) = a3;
  outlined init with copy of TableRowList(a1, (uint64_t)v30);
  TableSections.init(list:)(v30, (uint64_t)&v31);
  __swift_destroy_boxed_opaque_existential_1(a2);
  outlined destroy of TableRowList(a1);
  outlined destroy of TableColumnCollection((uint64_t)v34);
  long long v22 = v32;
  *(_OWORD *)a9 = v31;
  *(_OWORD *)(a9 + 16) = v22;
  *(_OWORD *)(a9 + 32) = v33;
  *(unsigned char *)(a9 + 104) = a4 & 1;
  outlined consume of Binding<[SwiftUIAnySortComparator]>?(*(void *)(a9 + 112), *(void *)(a9 + 120));
  *(void *)(a9 + 112) = a5;
  *(void *)(a9 + 120) = a6;
  *(void *)(a9 + 128) = a7;
  uint64_t result = outlined consume of Binding<AnyTableColumnCustomization>?(*(void *)(a9 + 136), *(void *)(a9 + 144));
  *(void *)(a9 + 136) = a8;
  *(void *)(a9 + 144) = a10;
  *(_OWORD *)(a9 + 152) = a11;
  *(unsigned char *)(a9 + 168) = a12 & 1;
  *(unsigned char *)(a9 + 170) = v17 & 1;
  *(unsigned char *)(a9 + 169) = a13;
  return result;
}

uint64_t specialized implicit closure #1 in TableDataSourceAdaptor.init(rowList:columnList:cellFormulas:hasSelection:sortOrder:columnCustomization:showsFirstColumnOnly:tableColumnHeadersVisibility:accessibilityEnabled:)(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + *(int *)(type metadata accessor for TableColumnCollection.Entry(0) + 40));
}

uint64_t specialized implicit closure #2 in TableDataSourceAdaptor.init(rowList:columnList:cellFormulas:hasSelection:sortOrder:columnCustomization:showsFirstColumnOnly:tableColumnHeadersVisibility:accessibilityEnabled:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = a1 + *(int *)(type metadata accessor for TableColumnCollection.Entry(0) + 20);
  uint64_t v4 = *(void *)v3;
  uint64_t v5 = *(void *)(v3 + 8);
  uint64_t v6 = *(void *)(v3 + 16);
  uint64_t v7 = *(void *)(v3 + 24);
  char v8 = *(unsigned char *)(v3 + 32);
  uint64_t result = outlined copy of TableColumnCustomizationID.Base(*(void *)v3, v5, v6, v7, v8);
  *(void *)a2 = v4;
  *(void *)(a2 + 8) = v5;
  *(void *)(a2 + 16) = v6;
  *(void *)(a2 + 24) = v7;
  *(unsigned char *)(a2 + 32) = v8;
  return result;
}

uint64_t Array<A>.withResolvedOffsets.getter(uint64_t a1)
{
  uint64_t v47 = type metadata accessor for TableCellFormula();
  uint64_t v2 = *(void *)(v47 - 8);
  MEMORY[0x1F4188790](v47);
  uint64_t v46 = (uint64_t)&v37 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v4);
  uint64_t v6 = (char *)&v37 - v5;
  type metadata accessor for (offset: Int, element: TableCellFormula)();
  uint64_t v45 = v7;
  MEMORY[0x1F4188790](v7);
  uint64_t v44 = (char *)&v37 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v9);
  uint64_t v43 = (uint64_t *)((char *)&v37 - v10);
  MEMORY[0x1F4188790](v11);
  uint64_t v42 = (char *)&v37 - v12;
  uint64_t v50 = MEMORY[0x1E4FBC860];
  swift_bridgeObjectRetain();
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 0, 0);
  uint64_t v13 = v50;
  uint64_t v14 = *(void *)(a1 + 16);
  swift_bridgeObjectRetain();
  uint64_t v41 = v14;
  uint64_t v37 = a1;
  if (v14)
  {
    uint64_t v15 = 0;
    unint64_t v16 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
    uint64_t v38 = *(void *)(v2 + 72);
    unint64_t v39 = v16;
    uint64_t v17 = a1 + v16;
    id v40 = v6;
    uint64_t v18 = v44;
    uint64_t v19 = (uint64_t *)v42;
    do
    {
      uint64_t v48 = v17;
      uint64_t v49 = v13;
      uint64_t v20 = v45;
      uint64_t v21 = (uint64_t)v18 + *(int *)(v45 + 48);
      outlined init with copy of ModifiedContent<ModifiedContent<_ViewList_View, CollectionViewCellModifier>, EditModeScopeModifier>(v17, v21, (uint64_t (*)(void))type metadata accessor for TableCellFormula);
      uint64_t v22 = (uint64_t)v43;
      uint64_t v23 = (uint64_t)v43 + *(int *)(v20 + 48);
      *uint64_t v43 = v15;
      outlined init with take of UIHostingConfigurationStorage(v21, v23, (uint64_t (*)(void))type metadata accessor for TableCellFormula);
      outlined init with take of UIHostingConfigurationStorage(v22, (uint64_t)v19, (uint64_t (*)(void))type metadata accessor for (offset: Int, element: TableCellFormula));
      uint64_t v24 = *(int *)(v20 + 48);
      uint64_t v25 = (uint64_t)v18 + v24;
      uint64_t v26 = (uint64_t)v19 + v24;
      uint64_t v27 = *v19;
      outlined init with copy of ModifiedContent<ModifiedContent<_ViewList_View, CollectionViewCellModifier>, EditModeScopeModifier>((uint64_t)v19 + v24, (uint64_t)v18 + v24, (uint64_t (*)(void))type metadata accessor for TableCellFormula);
      uint64_t v28 = v46;
      outlined init with take of UIHostingConfigurationStorage(v25, v46, (uint64_t (*)(void))type metadata accessor for TableCellFormula);
      uint64_t v29 = (uint64_t)v18 + *(int *)(v20 + 48);
      *uint64_t v18 = v27;
      outlined init with copy of ModifiedContent<ModifiedContent<_ViewList_View, CollectionViewCellModifier>, EditModeScopeModifier>(v26, v29, (uint64_t (*)(void))type metadata accessor for TableCellFormula);
      uint64_t v30 = v28 + *(int *)(v47 + 40);
      *(void *)uint64_t v30 = v27;
      *(unsigned char *)(v30 + 8) = 0;
      outlined destroy of ModifiedContent<ModifiedContent<_ViewList_View, CollectionViewCellModifier>, EditModeScopeModifier>(v29, (uint64_t (*)(void))type metadata accessor for TableCellFormula);
      uint64_t v31 = v28;
      uint64_t v32 = (uint64_t)v40;
      uint64_t v13 = v49;
      outlined init with take of UIHostingConfigurationStorage(v31, (uint64_t)v40, (uint64_t (*)(void))type metadata accessor for TableCellFormula);
      outlined destroy of ModifiedContent<ModifiedContent<_ViewList_View, CollectionViewCellModifier>, EditModeScopeModifier>((uint64_t)v19, (uint64_t (*)(void))type metadata accessor for (offset: Int, element: TableCellFormula));
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v13 + 16) + 1, 1);
        uint64_t v13 = v50;
      }
      unint64_t v34 = *(void *)(v13 + 16);
      unint64_t v33 = *(void *)(v13 + 24);
      if (v34 >= v33 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v33 > 1, v34 + 1, 1);
        uint64_t v13 = v50;
      }
      ++v15;
      *(void *)(v13 + 16) = v34 + 1;
      uint64_t v35 = v38;
      outlined init with take of UIHostingConfigurationStorage(v32, v13 + v39 + v34 * v38, (uint64_t (*)(void))type metadata accessor for TableCellFormula);
      uint64_t v17 = v48 + v35;
    }
    while (v41 != v15);
  }
  swift_bridgeObjectRelease_n();
  return v13;
}

Swift::Bool __swiftcall TableDataSourceAdaptor.hasHeader(forSectionAt:)(Swift::Int forSectionAt)
{
  if (forSectionAt < 0)
  {
    __break(1u);
    goto LABEL_11;
  }
  Swift::Int v2 = forSectionAt;
  uint64_t v3 = *(void *)(v1 + 40);
  if (*(void *)(v3 + 16) <= (unint64_t)forSectionAt)
  {
LABEL_11:
    __break(1u);
    return forSectionAt;
  }
  int v4 = *(unsigned __int8 *)(v3 + 96 * forSectionAt + 40);
  outlined init with copy of TableDataSourceAdaptor(v1, (uint64_t)v10);
  if (v4 == 1)
  {
    outlined destroy of TableDataSourceAdaptor((uint64_t)v10);
    char v5 = 1;
  }
  else
  {
    outlined init with copy of TableDataSourceAdaptor((uint64_t)v10, (uint64_t)v9);
    if (v2)
    {
      char v5 = 0;
    }
    else
    {
      char v6 = v9[168];
      outlined init with copy of TableDataSourceAdaptor((uint64_t)v9, (uint64_t)v8);
      char v5 = (v8[169] != 2) & ~v6;
      outlined destroy of TableDataSourceAdaptor((uint64_t)v8);
    }
    outlined destroy of TableDataSourceAdaptor((uint64_t)v9);
    outlined destroy of TableDataSourceAdaptor((uint64_t)v10);
  }
  LOBYTE(forSectionAt) = v5;
  return forSectionAt;
}

uint64_t TableDataSourceAdaptor.headerDisplayMode.getter()
{
  uint64_t v1 = *(void *)(v0 + 40);
  if (*(void *)(v1 + 16))
  {
    outlined init with copy of TableSections.Item(v1 + 32, (uint64_t)v9);
  }
  else
  {
    memset(v9, 0, sizeof(v9));
    long long v11 = 0u;
    long long v12 = 0u;
    uint64_t v10 = 1;
    uint64_t v13 = 0;
  }
  outlined init with copy of TableRowList?((uint64_t)v9, (uint64_t)v5, (uint64_t)&lazy cache variable for type metadata for TableSections.Item?, (uint64_t)&type metadata for TableSections.Item, MEMORY[0x1E4FBB718], (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))type metadata accessor for TableRowList?);
  if ((void)v6 == 1)
  {
    outlined destroy of TableRowList?((uint64_t)v9, (uint64_t)&lazy cache variable for type metadata for TableSections.Item?, (uint64_t)&type metadata for TableSections.Item, MEMORY[0x1E4FBB718], (uint64_t (*)(void))type metadata accessor for TableRowList?);
    return 2;
  }
  v4[2] = v5[2];
  v4[3] = v6;
  v4[4] = v7;
  v4[5] = v8;
  v4[0] = v5[0];
  v4[1] = v5[1];
  uint64_t v2 = *(void *)&v5[0];
  outlined destroy of TableSections.Item((uint64_t)v4);
  outlined destroy of TableRowList?((uint64_t)v9, (uint64_t)&lazy cache variable for type metadata for TableSections.Item?, (uint64_t)&type metadata for TableSections.Item, MEMORY[0x1E4FBB718], (uint64_t (*)(void))type metadata accessor for TableRowList?);
  if (v2) {
    return 2;
  }
  return 1;
}

uint64_t TableDataSourceAdaptor.configureHeader(_:transaction:forSectionAt:)(uint64_t result, uint64_t a2, unint64_t a3)
{
  if ((a3 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_8;
  }
  uint64_t v4 = *(void *)(v3 + 40);
  if (*(void *)(v4 + 16) <= a3)
  {
LABEL_8:
    __break(1u);
    return result;
  }
  long long v6 = (void *)result;
  uint64_t v7 = v4 + 96 * a3;
  uint64_t v8 = *(void *)(v7 + 32);
  outlined init with copy of TableColumnCollection(v3 + 48, (uint64_t)v19);
  uint64_t v9 = *(void *)(v3 + 112);
  uint64_t v10 = *(void *)(v3 + 120);
  uint64_t v11 = *(void *)(v3 + 128);
  char v12 = *(unsigned char *)(v3 + 104);
  v18[0] = v6;
  v18[1] = a2;
  v19[6] = v9;
  v19[7] = v10;
  v19[8] = v11;
  char v20 = v12;
  BOOL v21 = v8 == 0;
  if (*(unsigned char *)(v7 + 40) == 1)
  {
    uint64_t v13 = outlined init with copy of TableRowList(v3, (uint64_t)v16);
    MEMORY[0x1F4188790](v13);
    id v14 = v6;
    outlined copy of Transaction?(a2);
    outlined copy of Binding<[SwiftUIAnySortComparator]>?(v9, v10);
    static Update.ensure<A>(_:)();
    outlined destroy of TableRowList((uint64_t)v16);
  }
  else
  {
    id v15 = v6;
    outlined copy of Transaction?(a2);
    outlined copy of Binding<[SwiftUIAnySortComparator]>?(v9, v10);
    ViewTraitCollection.init()();
    uint64_t v17 = v16[0];
    CollectionViewTableHeaderVisitor.visitCommon(view:traits:)(0, &v17);
    swift_bridgeObjectRelease();
  }
  return outlined destroy of CollectionViewTableHeaderVisitor((uint64_t)v18);
}

uint64_t TableDataSourceAdaptor.configureCell(_:transaction:context:)(unsigned char *a1, unint64_t a2, uint64_t a3)
{
  outlined init with copy of TableRowList?(a3 + 160, (uint64_t)&v17, (uint64_t)&lazy cache variable for type metadata for AnyHashable?, MEMORY[0x1E4FBB960], MEMORY[0x1E4FBB718], (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))type metadata accessor for TableRowList?);
  if (*((void *)&v18 + 1))
  {
    v14[0] = v17;
    v14[1] = v18;
    uint64_t v15 = v19;
    static _ViewList_ID.explicit<A>(_:)();
    long long v13 = v17;
    _ViewList_ID.canonicalID.getter();
    swift_bridgeObjectRelease();
    outlined destroy of AnyHashable((uint64_t)v14);
    uint64_t v6 = *((void *)&v20 + 1);
    uint64_t v7 = v20;
  }
  else
  {
    outlined destroy of TableRowList?((uint64_t)&v17, (uint64_t)&lazy cache variable for type metadata for AnyHashable?, MEMORY[0x1E4FBB960], MEMORY[0x1E4FBB718], (uint64_t (*)(void))type metadata accessor for TableRowList?);
    *(void *)&long long v20 = *(void *)(a3 + 152);
    *(void *)&long long v17 = 0;
    BYTE8(v17) = 1;
    ViewTraitCollection.value<A>(for:defaultValue:)();
    _ViewList_ID.init(implicitID:)();
    long long v20 = v14[0];
    _ViewList_ID.canonicalID.getter();
    swift_bridgeObjectRelease();
    uint64_t v6 = *((void *)&v17 + 1);
    uint64_t v7 = v17;
  }
  LOBYTE(v13) = 0;
  *(void *)&long long v20 = *(void *)(a3 + 152);
  *(void *)&v14[0] = v7;
  *((void *)&v14[0] + 1) = v6;
  swift_retain();
  swift_bridgeObjectRetain();
  CollectionViewCellModifier.init(position:traits:minHeight:id:alignment:shouldHugContent:)((unsigned __int8 *)&v13, (uint64_t *)v14, 0, 0, (uint64_t)&v17, 44.0);
  uint64_t v8 = &a1[direct field offset for ListCollectionViewCellBase.viewListID];
  void *v8 = 0;
  v8[1] = 0;
  swift_bridgeObjectRelease();
  uint64_t v9 = direct field offset for TableCollectionViewCell.isHeader;
  int v10 = a1[direct field offset for TableCollectionViewCell.isHeader];
  a1[direct field offset for TableCollectionViewCell.isHeader] = 0;
  if (v10 == 1)
  {
    objc_msgSend(a1, sel_setNeedsUpdateConfiguration, (void)v13);
    objc_msgSend(a1, sel_setAutomaticallyUpdatesBackgroundConfiguration_, a1[v9]);
  }
  outlined init with copy of TableRowView(a3 + 16, (uint64_t)v14);
  outlined init with copy of CollectionViewCellModifier((uint64_t)&v17, (uint64_t)&v16);
  specialized ListCollectionViewCellBase.configureContent(_:transaction:)((uint64_t)v14, a2);
  outlined destroy of TableRowList?((uint64_t)v14, (uint64_t)&lazy cache variable for type metadata for ModifiedContent<TableRowView, CollectionViewCellModifier>, (uint64_t)&type metadata for TableRowView, (uint64_t)&type metadata for CollectionViewCellModifier, (uint64_t (*)(void))type metadata accessor for ModifiedContent<TableRowView, CollectionViewCellModifier>);
  *(void *)&v14[0] = *(void *)(a3 + 152);
  LOBYTE(v20) = 0;
  unint64_t v11 = ViewTraitCollection.listItemBackground(kind:)((unsigned __int8 *)&v20);
  swift_bridgeObjectRetain();
  specialized PlatformListViewBase<>.configureBackground(_:traits:transaction:)(v11, a2);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return outlined destroy of CollectionViewCellModifier((uint64_t)&v17);
}

uint64_t specialized TableSections.firstIndexPath<A>(for:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *(void *)(v2 + 40);
  uint64_t v12 = v4 + 32;
  unint64_t v5 = *(void *)(v4 + 16);
  uint64_t v13 = v4;
  uint64_t result = swift_bridgeObjectRetain();
  unint64_t i = 0;
  uint64_t v15 = a1;
  if (v5) {
    goto LABEL_3;
  }
LABEL_2:
  memset(v24, 0, 56);
  *((void *)&v24[3] + 1) = 1;
  memset(&v24[4], 0, 40);
  for (unint64_t i = v5; ; ++i)
  {
    outlined init with take of (offset: Int, element: TableSections.Item)?((uint64_t)v24, (uint64_t)&v25);
    if ((void)v29 == 1)
    {
      swift_bridgeObjectRelease();
      uint64_t v9 = type metadata accessor for IndexPath();
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(a2, 1, 1, v9);
    }
    uint64_t v14 = v25;
    uint64_t v24[2] = v28;
    v24[3] = v29;
    v24[4] = v30;
    v24[5] = v31;
    v24[0] = v26;
    v24[1] = v27;
    uint64_t v19 = a1;
    uint64_t v20 = v27;
    char v21 = 0;
    uint64_t v22 = 0;
    outlined init with copy of TableRowList?((uint64_t)&v24[1] + 8, (uint64_t)&v16, (uint64_t)&lazy cache variable for type metadata for TableRowList?, (uint64_t)&type metadata for TableRowList, MEMORY[0x1E4FBB718], (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))type metadata accessor for TableRowList?);
    if (*((void *)&v17 + 1))
    {
      v23[0] = v16;
      v23[1] = v17;
      *(void *)&v23[2] = v18;
      MEMORY[0x1F4188790](a1);
      swift_retain();
      static Update.ensure<A>(_:)();
      outlined destroy of TableRowList((uint64_t)v23);
    }
    else
    {
      swift_retain();
      uint64_t v8 = outlined destroy of TableRowList?((uint64_t)&v16, (uint64_t)&lazy cache variable for type metadata for TableRowList?, (uint64_t)&type metadata for TableRowList, MEMORY[0x1E4FBB718], (uint64_t (*)(void))type metadata accessor for TableRowList?);
      MEMORY[0x1F4188790](v8);
      static Update.ensure<A>(_:)();
    }
    if (v21 == 1)
    {
      swift_bridgeObjectRelease();
      MEMORY[0x18C10A8A0](v22, v14);
      swift_release();
      outlined destroy of TableSections.Item((uint64_t)v24);
      uint64_t v10 = type metadata accessor for IndexPath();
      return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56))(a2, 0, 1, v10);
    }
    swift_release();
    uint64_t result = outlined destroy of TableSections.Item((uint64_t)v24);
    a1 = v15;
    if (i == v5) {
      goto LABEL_2;
    }
LABEL_3:
    if (i >= *(void *)(v13 + 16)) {
      break;
    }
    outlined init with copy of TableSections.Item(v12 + 96 * i, (uint64_t)v23 + 8);
    *(void *)&v24[0] = i;
    *(_OWORD *)((char *)&v24[2] + 8) = *(_OWORD *)((char *)&v23[2] + 8);
    *(_OWORD *)((char *)&v24[3] + 8) = *(_OWORD *)((char *)&v23[3] + 8);
    *(_OWORD *)((char *)&v24[4] + 8) = *(_OWORD *)((char *)&v23[4] + 8);
    *(_OWORD *)((char *)&v24[5] + 8) = *(_OWORD *)((char *)&v23[5] + 8);
    *(_OWORD *)((char *)v24 + 8) = *(_OWORD *)((char *)v23 + 8);
    *(_OWORD *)((char *)&v24[1] + 8) = *(_OWORD *)((char *)&v23[1] + 8);
  }
  __break(1u);
  return result;
}

uint64_t TableDataSourceAdaptor.applyCollectionViewIDs(from:to:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = a2;
  *(void *)(v6 + 24) = a3;
  unint64_t v11 = partial apply for thunk for @callee_guaranteed (@in_guaranteed _ViewList_ID.Canonical, @inout Bool) -> ();
  uint64_t v12 = v6;
  unsigned __int8 v13 = 0;
  outlined init with copy of TableRowList(v3, (uint64_t)v10);
  swift_retain();
  static Update.ensure<A>(_:)();
  outlined destroy of TableRowList((uint64_t)v10);
  int v7 = v13;
  swift_release();
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  uint64_t result = swift_release();
  if ((isEscapingClosureAtFileLocation & 1) == 0) {
    return v7 ^ 1u;
  }
  __break(1u);
  return result;
}

uint64_t thunk for @callee_guaranteed (@in_guaranteed _ViewList_ID.Canonical, @inout Bool) -> ()(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  return a3();
}

unint64_t TableDataSourceAdaptor.contextForItem(index:)@<X0>(unint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if ((result & 0x8000000000000000) != 0)
  {
LABEL_32:
    __break(1u);
    goto LABEL_33;
  }
  unint64_t v4 = result;
  uint64_t v6 = *(void *)(v3 + 40);
  if (*(void *)(v6 + 16) <= result)
  {
LABEL_33:
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  outlined init with copy of TableSections.Item(v6 + 96 * result + 32, (uint64_t)v43);
  int v8 = *(unsigned __int8 *)(v3 + 170);
  if (v8 == 1)
  {
    uint64_t v28 = a3;
    int v9 = *(unsigned __int8 *)(v3 + 168);
    outlined init with copy of TableDataSourceAdaptor(v3, (uint64_t)v34);
    if (v9 == 1)
    {
      uint64_t result = outlined destroy of TableDataSourceAdaptor((uint64_t)v34);
      BOOL v10 = 0;
    }
    else
    {
      BOOL v10 = BYTE9(v38) != 2;
      uint64_t result = outlined destroy of TableDataSourceAdaptor((uint64_t)v34);
    }
    uint64_t v12 = *(void *)(v3 + 40);
    if (*(void *)(v12 + 16) <= v4) {
      goto LABEL_34;
    }
    uint64_t v13 = v12 + 32;
    uint64_t v14 = v12 + 32 + 96 * v4;
    uint64_t v15 = *(void *)(v14 + 80);
    uint64_t v16 = *(void *)(v14 + 88);
    BOOL v17 = __OFADD__(v15, v16);
    uint64_t v18 = v15 + v16;
    if (v17)
    {
LABEL_35:
      __break(1u);
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v18 < a2 || v15 > a2 || v18 < v15) {
      goto LABEL_36;
    }
    BOOL v17 = __OFSUB__(a2, v15);
    uint64_t v21 = a2 - v15;
    if (v17)
    {
LABEL_37:
      __break(1u);
      goto LABEL_38;
    }
    uint64_t v22 = v10 + v21;
    if (__OFADD__(v10, v21))
    {
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }
    if (!v4)
    {
      uint64_t v23 = 0;
LABEL_25:
      uint64_t v11 = v22 + v23;
      if (!__OFADD__(v22, v23))
      {
        a3 = v28;
        goto LABEL_27;
      }
LABEL_39:
      __break(1u);
      return result;
    }
    swift_bridgeObjectRetain();
    uint64_t v23 = 0;
    unint64_t v24 = v4;
    while (1)
    {
      uint64_t result = outlined init with copy of TableSections.Item(v13, (uint64_t)v34);
      BOOL v17 = __OFADD__(v23, v35);
      v23 += v35;
      if (v17) {
        break;
      }
      outlined destroy of TableSections.Item((uint64_t)v34);
      v13 += 96;
      if (!--v24)
      {
        uint64_t result = swift_bridgeObjectRelease();
        goto LABEL_25;
      }
    }
    __break(1u);
    goto LABEL_32;
  }
  uint64_t v11 = 0;
LABEL_27:
  long long v40 = 0u;
  memset(v41, 0, sizeof(v41));
  long long v38 = 0u;
  long long v39 = 0u;
  memset(v37, 0, sizeof(v37));
  uint64_t v25 = *(void *)(v3 + 96);
  v34[0] = v4;
  v34[1] = a2;
  uint64_t v35 = v11;
  char v36 = v8 ^ 1;
  uint64_t v42 = v25;
  uint64_t v26 = outlined init with copy of TableRowList?((uint64_t)&v44, (uint64_t)&v29, (uint64_t)&lazy cache variable for type metadata for TableRowList?, (uint64_t)&type metadata for TableRowList, MEMORY[0x1E4FBB718], (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))type metadata accessor for TableRowList?);
  if (*((void *)&v30 + 1))
  {
    v32[0] = v29;
    v32[1] = v30;
    uint64_t v33 = v31;
    MEMORY[0x1F4188790](v26);
    swift_bridgeObjectRetain();
  }
  else
  {
    swift_bridgeObjectRetain();
    outlined destroy of TableRowList?((uint64_t)&v29, (uint64_t)&lazy cache variable for type metadata for TableRowList?, (uint64_t)&type metadata for TableRowList, MEMORY[0x1E4FBB718], (uint64_t (*)(void))type metadata accessor for TableRowList?);
    uint64_t v27 = outlined init with copy of TableRowList(v3, (uint64_t)v32);
    MEMORY[0x1F4188790](v27);
  }
  static Update.ensure<A>(_:)();
  outlined destroy of TableRowList((uint64_t)v32);
  outlined destroy of TableSections.Item((uint64_t)v43);
  outlined init with copy of ModifiedContent<ModifiedContent<_ViewList_View, CollectionViewCellModifier>, EditModeScopeModifier>((uint64_t)v37, a3, (uint64_t (*)(void))type metadata accessor for _RowVisitationContext<TableDataSourceAdaptor>?);
  return outlined destroy of TableContentVisitor<TableDataSourceAdaptor>((uint64_t)v34, (uint64_t)&lazy cache variable for type metadata for TableContentVisitor<TableDataSourceAdaptor>, (uint64_t)type metadata accessor for TableContentVisitor, (uint64_t (*)(void))type metadata accessor for _RowVisitationContext<TableDataSourceAdaptor>);
}

uint64_t protocol witness for CollectionViewListDataSourceBase.style.getter in conformance TableDataSourceAdaptor@<X0>(uint64_t a1@<X8>)
{
  int v3 = *(unsigned __int8 *)(v1 + 168);
  uint64_t v4 = type metadata accessor for UICollectionLayoutListConfiguration.Appearance();
  unint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 104);
  uint64_t v6 = (unsigned int *)MEMORY[0x1E4FB10D0];
  if (!v3) {
    uint64_t v6 = (unsigned int *)MEMORY[0x1E4FB10C8];
  }
  uint64_t v7 = *v6;

  return v5(a1, v7, v4);
}

uint64_t protocol witness for CollectionViewListDataSourceBase.sectionIndexLabel(forSectionAt:) in conformance TableDataSourceAdaptor()
{
  return 0;
}

uint64_t protocol witness for ListCoreDataSource.hasGlobalHeader.getter in conformance TableDataSourceAdaptor()
{
  int v1 = *(unsigned __int8 *)(v0 + 168);
  outlined init with copy of TableDataSourceAdaptor(v0, (uint64_t)v4);
  uint64_t v2 = (v4[169] != 2) & ~v1;
  outlined destroy of TableDataSourceAdaptor((uint64_t)v4);
  return v2;
}

uint64_t protocol witness for ListCoreDataSource.configureHeader(_:transaction:forSectionAt:) in conformance TableDataSourceAdaptor(uint64_t a1, uint64_t a2, unint64_t *a3)
{
  return TableDataSourceAdaptor.configureHeader(_:transaction:forSectionAt:)(a1, a2, *a3);
}

void protocol witness for ListCoreDataSource.configureFooter(_:transaction:forSectionAt:) in conformance TableDataSourceAdaptor()
{
}

uint64_t protocol witness for ListCoreDataSource.configureCell(_:transaction:context:) in conformance TableDataSourceAdaptor(unsigned char *a1, unint64_t a2, uint64_t a3)
{
  return TableDataSourceAdaptor.configureCell(_:transaction:context:)(a1, a2, a3);
}

uint64_t protocol witness for ListCoreDataSource.firstIndexPath(viewListID:) in conformance TableDataSourceAdaptor@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (*(void *)(a1 + 8))
  {
    uint64_t v3 = swift_retain();
    specialized TableSections.firstIndexPath<A>(for:)(v3, a2);
    return swift_release();
  }
  else
  {
    uint64_t v5 = type metadata accessor for IndexPath();
    uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56);
    return v6(a2, 1, 1, v5);
  }
}

unint64_t protocol witness for ListCoreDataSource.contextForItem(index:) in conformance TableDataSourceAdaptor@<X0>(unint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  return TableDataSourceAdaptor.contextForItem(index:)(*a1, *a2, a3);
}

uint64_t protocol witness for ListCoreDataSource.separatorConfiguration(forRowAt:) in conformance TableDataSourceAdaptor(void *a1, void *a2)
{
  if (*a1) {
    unsigned int v2 = 1;
  }
  else {
    unsigned int v2 = 2;
  }
  if (*a2) {
    return 0;
  }
  else {
    return v2;
  }
}

uint64_t protocol witness for ListDiffable.sectionIDs.getter in conformance TableDataSourceAdaptor@<X0>(void *a1@<X8>)
{
  *a1 = *(void *)(v1 + 40);
  a1[1] = protocol witness for OptionSet.init(rawValue:) in conformance UIRectEdge;
  a1[2] = 0;
  return swift_bridgeObjectRetain();
}

BOOL protocol witness for ListDiffable.hasHeader(forSectionAt:) in conformance TableDataSourceAdaptor(Swift::Int *a1)
{
  return TableDataSourceAdaptor.hasHeader(forSectionAt:)(*a1);
}

unint64_t *protocol witness for ListDiffable.rowIDs(forSectionAt:) in conformance TableDataSourceAdaptor@<X0>(unint64_t *result@<X0>, uint64_t a2@<X8>)
{
  unint64_t v3 = *result;
  if ((*result & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else
  {
    uint64_t v4 = *(void *)(v2 + 40);
    if (v3 < *(void *)(v4 + 16))
    {
      uint64_t v5 = v4 + 96 * v3;
      uint64_t v6 = *(void *)(v5 + 96);
      char v7 = *(unsigned char *)(v5 + 104);
      *(void *)a2 = v6;
      *(unsigned char *)(a2 + 8) = v7;
      *(_OWORD *)(a2 + 16) = *(_OWORD *)(v5 + 112);
      return (unint64_t *)outlined copy of ResolvedTableRowIDs.Storage(v6, v7);
    }
  }
  __break(1u);
  return result;
}

uint64_t outlined init with copy of TableSections.Item(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t outlined init with copy of TableRowList(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t specialized _UIHostingView.setRootView(_:transaction:)(uint64_t a1)
{
  outlined init with copy of TableRowList?(a1, (uint64_t)v4, (uint64_t)&lazy cache variable for type metadata for ModifiedContent<TableRowView, CollectionViewCellModifier>, (uint64_t)&type metadata for TableRowView, (uint64_t)&type metadata for CollectionViewCellModifier, (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))type metadata accessor for ModifiedContent<TableRowView, CollectionViewCellModifier>);
  uint64_t v2 = (uint64_t)v1 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v1) + 0x60);
  swift_beginAccess();
  outlined assign with take of ModifiedContent<TableRowView, CollectionViewCellModifier>((uint64_t)v4, v2, (uint64_t)&lazy cache variable for type metadata for ModifiedContent<TableRowView, CollectionViewCellModifier>, (uint64_t)&type metadata for TableRowView, (uint64_t)&type metadata for CollectionViewCellModifier, (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))type metadata accessor for ModifiedContent<TableRowView, CollectionViewCellModifier>);
  swift_endAccess();
  swift_allocObject();
  swift_unknownObjectWeakInit();
  swift_retain();
  swift_retain();
  default argument 1 of GraphHost.asyncTransaction(_:id:_:)();
  GraphHost.asyncTransaction(_:id:_:)();
  swift_release();
  return swift_release_n();
}

{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  unsigned char v5[440];

  uint64_t v2 = MEMORY[0x1E4F3F308];
  outlined init with copy of TableRowList?(a1, (uint64_t)v5, (uint64_t)&lazy cache variable for type metadata for ModifiedContent<_ViewList_View, CollectionViewCellModifier>, MEMORY[0x1E4F3F308], (uint64_t)&type metadata for CollectionViewCellModifier, (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))type metadata accessor for ModifiedContent<TableRowView, CollectionViewCellModifier>);
  unint64_t v3 = (uint64_t)v1 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v1) + 0x60);
  swift_beginAccess();
  outlined assign with take of ModifiedContent<TableRowView, CollectionViewCellModifier>((uint64_t)v5, v3, (uint64_t)&lazy cache variable for type metadata for ModifiedContent<_ViewList_View, CollectionViewCellModifier>, v2, (uint64_t)&type metadata for CollectionViewCellModifier, (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))type metadata accessor for ModifiedContent<TableRowView, CollectionViewCellModifier>);
  swift_endAccess();
  swift_allocObject();
  swift_unknownObjectWeakInit();
  swift_retain();
  swift_retain();
  default argument 1 of GraphHost.asyncTransaction(_:id:_:)();
  GraphHost.asyncTransaction(_:id:_:)();
  swift_release();
  return swift_release_n();
}

{
  void *v1;
  uint64_t v2;
  unsigned char v4[112];

  outlined init with copy of TabItem.RootView(a1, (uint64_t)v4);
  uint64_t v2 = (uint64_t)v1 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v1) + 0x60);
  swift_beginAccess();
  outlined assign with take of TabItem.RootView((uint64_t)v4, v2);
  swift_endAccess();
  swift_allocObject();
  swift_unknownObjectWeakInit();
  swift_retain();
  swift_retain();
  default argument 1 of GraphHost.asyncTransaction(_:id:_:)();
  GraphHost.asyncTransaction(_:id:_:)();
  swift_release();
  return swift_release_n();
}

{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  unsigned char v5[256];

  uint64_t v2 = MEMORY[0x1E4F3F308];
  outlined init with copy of TableRowList?(a1, (uint64_t)v5, (uint64_t)&lazy cache variable for type metadata for ModifiedContent<_ViewList_View, ListTableCellModifier>, MEMORY[0x1E4F3F308], (uint64_t)&type metadata for ListTableCellModifier, (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))type metadata accessor for ModifiedContent<TableRowView, CollectionViewCellModifier>);
  unint64_t v3 = (uint64_t)v1 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v1) + 0x60);
  swift_beginAccess();
  outlined assign with take of ModifiedContent<TableRowView, CollectionViewCellModifier>((uint64_t)v5, v3, (uint64_t)&lazy cache variable for type metadata for ModifiedContent<_ViewList_View, ListTableCellModifier>, v2, (uint64_t)&type metadata for ListTableCellModifier, (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))type metadata accessor for ModifiedContent<TableRowView, CollectionViewCellModifier>);
  swift_endAccess();
  swift_allocObject();
  swift_unknownObjectWeakInit();
  swift_retain();
  swift_retain();
  default argument 1 of GraphHost.asyncTransaction(_:id:_:)();
  GraphHost.asyncTransaction(_:id:_:)();
  swift_release();
  return swift_release_n();
}

{
  void *v1;
  uint64_t v2;
  unsigned char v4[96];

  outlined init with copy of BridgedNavigationView.RootView(a1, (uint64_t)v4);
  uint64_t v2 = (uint64_t)v1 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v1) + 0x60);
  swift_beginAccess();
  outlined assign with take of BridgedNavigationView.RootView((uint64_t)v4, v2);
  swift_endAccess();
  swift_allocObject();
  swift_unknownObjectWeakInit();
  swift_retain();
  swift_retain();
  default argument 1 of GraphHost.asyncTransaction(_:id:_:)();
  GraphHost.asyncTransaction(_:id:_:)();
  swift_release();
  return swift_release_n();
}

void *specialized _UIHostingView.as<A>(_:)()
{
  uint64_t v1 = type metadata accessor for ContainerBackgroundHost(0, (unint64_t *)&lazy cache variable for type metadata for ContainerBackgroundHost);
  uint64_t v2 = specialized _UIHostingView.base.getter();
  if (v1 == type metadata accessor for ContainerBackgroundHost(0, (unint64_t *)&lazy cache variable for type metadata for ViewGraphRenderDelegate))
  {
    lazy protocol witness table accessor for type _UIHostingView<ModifiedContent<AnyView, EmptyModifier>> and conformance _UIHostingView<A>(&lazy protocol witness table cache variable for type UIHostingViewBase and conformance UIHostingViewBase, (void (*)(uint64_t))type metadata accessor for UIHostingViewBase);
    return v2;
  }
  swift_release();
  uint64_t result = (void *)type metadata accessor for DisplayList.ViewRenderer();
  if ((void *)v1 == result)
  {
    __break(1u);
    goto LABEL_24;
  }
  if (v1 == type metadata accessor for ContainerBackgroundHost(0, (unint64_t *)&lazy cache variable for type metadata for FocusHost))
  {
    uint64_t v5 = (unint64_t *)&lazy protocol witness table cache variable for type _UIHostingView<ModifiedContent<AnyView, EmptyModifier>> and conformance _UIHostingView<A>;
LABEL_16:
    lazy protocol witness table accessor for type _UIHostingView<ModifiedContent<AnyView, EmptyModifier>> and conformance _UIHostingView<A>(v5, (void (*)(uint64_t))type metadata accessor for _UIHostingView<ModifiedContent<AnyView, EmptyModifier>>);
    swift_unknownObjectRetain();
    return v0;
  }
  if (v1 == type metadata accessor for ContainerBackgroundHost(0, (unint64_t *)&lazy cache variable for type metadata for PlatformItemListHost)|| v1 == type metadata accessor for ContainerBackgroundHost(0, &lazy cache variable for type metadata for AccessibilityHost)|| v1 == type metadata accessor for ContainerBackgroundHost(0, (unint64_t *)&lazy cache variable for type metadata for UIViewControllerProvider))
  {
    goto LABEL_20;
  }
  if (v1 == type metadata accessor for ContainerBackgroundHost(0, (unint64_t *)&lazy cache variable for type metadata for EventGraphHost))
  {
    uint64_t v5 = (unint64_t *)&lazy protocol witness table cache variable for type _UIHostingView<ModifiedContent<AnyView, EmptyModifier>> and conformance _UIHostingView<A>;
    goto LABEL_16;
  }
  if (v1 == type metadata accessor for ContainerBackgroundHost(0, (unint64_t *)&lazy cache variable for type metadata for PointerHost)|| v1 == type metadata accessor for ContainerBackgroundHost(0, &lazy cache variable for type metadata for WindowLayoutHost))
  {
LABEL_20:
    swift_unknownObjectRetain();
    return v0;
  }
  unint64_t v4 = type metadata accessor for UIView();
  uint64_t result = (void *)type metadata accessor for ContainerBackgroundHost(0, (unint64_t *)&lazy cache variable for type metadata for CurrentEventProvider);
  if (v1 != v4 && (void *)v1 != result)
  {
    if (v1 != type metadata accessor for ContainerBackgroundHost(0, (unint64_t *)&lazy cache variable for type metadata for FallbackResponderProvider))return v0; {
    goto LABEL_20;
    }
  }
LABEL_24:
  __break(1u);
  return result;
}

uint64_t specialized _UIHostingView.updateRootView()()
{
  uint64_t v1 = (void *)MEMORY[0x1E4FBC8C8];
  uint64_t v2 = (void *)MEMORY[0x18C119DF0]((char *)v0 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v0) + 0xC0));
  swift_retain();
  if (v2) {

  }
  uint64_t v3 = (uint64_t)v0 + *(void *)((*v1 & *v0) + 0x60);
  swift_beginAccess();
  outlined init with copy of TableRowList?(v3, (uint64_t)v5, (uint64_t)&lazy cache variable for type metadata for ModifiedContent<TableRowView, CollectionViewCellModifier>, (uint64_t)&type metadata for TableRowView, (uint64_t)&type metadata for CollectionViewCellModifier, (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))type metadata accessor for ModifiedContent<TableRowView, CollectionViewCellModifier>);
  v5[488] = v2 != 0;
  v5[496] = 0;
  uint64_t v6 = 0;
  outlined init with copy of ModifiedContent<ModifiedContent<_ViewList_View, CollectionViewCellModifier>, EditModeScopeModifier>((uint64_t)v5, (uint64_t)v7, (uint64_t (*)(void))type metadata accessor for ModifiedContent<ModifiedContent<TableRowView, CollectionViewCellModifier>, EditModeScopeModifier>);
  outlined destroy of ModifiedContent<ModifiedContent<_ViewList_View, CollectionViewCellModifier>, EditModeScopeModifier>((uint64_t)v5, (uint64_t (*)(void))type metadata accessor for ModifiedContent<ModifiedContent<TableRowView, CollectionViewCellModifier>, EditModeScopeModifier>);
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<AnyView, EmptyModifier>, EditModeScopeModifier>, HitTestBindingModifier>(0, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<TableRowView, CollectionViewCellModifier>, EditModeScopeModifier>, HitTestBindingModifier>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<TableRowView, CollectionViewCellModifier>, EditModeScopeModifier>);
  lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<AnyView, EmptyModifier>, EditModeScopeModifier>, HitTestBindingModifier> and conformance <> ModifiedContent<A, B>((unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<TableRowView, CollectionViewCellModifier>, EditModeScopeModifier>, HitTestBindingModifier> and conformance <> ModifiedContent<A, B>, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<TableRowView, CollectionViewCellModifier>, EditModeScopeModifier>, HitTestBindingModifier>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<TableRowView, CollectionViewCellModifier>, EditModeScopeModifier>, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<TableRowView, CollectionViewCellModifier>, EditModeScopeModifier> and conformance <> ModifiedContent<A, B>);
  ViewGraph.setRootView<A>(_:)();
  swift_release();
  return outlined destroy of ModifiedContent<ModifiedContent<ModifiedContent<_ViewList_View, CollectionViewCellModifier>, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v7, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<TableRowView, CollectionViewCellModifier>, EditModeScopeModifier>, HitTestBindingModifier>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<TableRowView, CollectionViewCellModifier>, EditModeScopeModifier>);
}

{
  void *v0;
  void *v1;
  void *v2;
  uint64_t v3;
  unsigned char v5[456];
  uint64_t v6;
  unsigned char v7[464];

  uint64_t v1 = (void *)MEMORY[0x1E4FBC8C8];
  uint64_t v2 = (void *)MEMORY[0x18C119DF0]((char *)v0 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v0) + 0xC0));
  swift_retain();
  if (v2) {

  }
  uint64_t v3 = (uint64_t)v0 + *(void *)((*v1 & *v0) + 0x60);
  swift_beginAccess();
  outlined init with copy of TableRowList?(v3, (uint64_t)v5, (uint64_t)&lazy cache variable for type metadata for ModifiedContent<_ViewList_View, CollectionViewCellModifier>, MEMORY[0x1E4F3F308], (uint64_t)&type metadata for CollectionViewCellModifier, (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))type metadata accessor for ModifiedContent<TableRowView, CollectionViewCellModifier>);
  v5[440] = v2 != 0;
  v5[448] = 0;
  uint64_t v6 = 0;
  outlined init with copy of ModifiedContent<ModifiedContent<_ViewList_View, CollectionViewCellModifier>, EditModeScopeModifier>((uint64_t)v5, (uint64_t)v7, (uint64_t (*)(void))type metadata accessor for ModifiedContent<ModifiedContent<_ViewList_View, CollectionViewCellModifier>, EditModeScopeModifier>);
  outlined destroy of ModifiedContent<ModifiedContent<_ViewList_View, CollectionViewCellModifier>, EditModeScopeModifier>((uint64_t)v5, (uint64_t (*)(void))type metadata accessor for ModifiedContent<ModifiedContent<_ViewList_View, CollectionViewCellModifier>, EditModeScopeModifier>);
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<AnyView, EmptyModifier>, EditModeScopeModifier>, HitTestBindingModifier>(0, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<_ViewList_View, CollectionViewCellModifier>, EditModeScopeModifier>, HitTestBindingModifier>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<_ViewList_View, CollectionViewCellModifier>, EditModeScopeModifier>);
  lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<AnyView, EmptyModifier>, EditModeScopeModifier>, HitTestBindingModifier> and conformance <> ModifiedContent<A, B>((unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<_ViewList_View, CollectionViewCellModifier>, EditModeScopeModifier>, HitTestBindingModifier> and conformance <> ModifiedContent<A, B>, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<_ViewList_View, CollectionViewCellModifier>, EditModeScopeModifier>, HitTestBindingModifier>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<_ViewList_View, CollectionViewCellModifier>, EditModeScopeModifier>, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<_ViewList_View, CollectionViewCellModifier>, EditModeScopeModifier> and conformance <> ModifiedContent<A, B>);
  ViewGraph.setRootView<A>(_:)();
  swift_release();
  return outlined destroy of ModifiedContent<ModifiedContent<ModifiedContent<_ViewList_View, CollectionViewCellModifier>, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v7, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<_ViewList_View, CollectionViewCellModifier>, EditModeScopeModifier>, HitTestBindingModifier>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<_ViewList_View, CollectionViewCellModifier>, EditModeScopeModifier>);
}

{
  void *v0;
  void *v1;
  void *v2;
  uint64_t v3;
  unsigned char v5[128];
  uint64_t v6;
  unsigned char v7[136];

  uint64_t v1 = (void *)MEMORY[0x1E4FBC8C8];
  uint64_t v2 = (void *)MEMORY[0x18C119DF0]((char *)v0 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v0) + 0xC0));
  swift_retain();
  if (v2) {

  }
  uint64_t v3 = (uint64_t)v0 + *(void *)((*v1 & *v0) + 0x60);
  swift_beginAccess();
  outlined init with copy of TabItem.RootView(v3, (uint64_t)v5);
  v5[112] = v2 != 0;
  v5[120] = 0;
  uint64_t v6 = 0;
  outlined init with copy of TableRowList?((uint64_t)v5, (uint64_t)v7, (uint64_t)&lazy cache variable for type metadata for ModifiedContent<TabItem.RootView, EditModeScopeModifier>, (uint64_t)&type metadata for TabItem.RootView, (uint64_t)&type metadata for EditModeScopeModifier, (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))type metadata accessor for ModifiedContent<TableRowView, CollectionViewCellModifier>);
  outlined destroy of TableRowList?((uint64_t)v5, (uint64_t)&lazy cache variable for type metadata for ModifiedContent<TabItem.RootView, EditModeScopeModifier>, (uint64_t)&type metadata for TabItem.RootView, (uint64_t)&type metadata for EditModeScopeModifier, (uint64_t (*)(void))type metadata accessor for ModifiedContent<TableRowView, CollectionViewCellModifier>);
  type metadata accessor for ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>();
  lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier> and conformance <> ModifiedContent<A, B>();
  ViewGraph.setRootView<A>(_:)();
  swift_release();
  return outlined destroy of ModifiedContent<ModifiedContent<_ViewList_View, CollectionViewCellModifier>, EditModeScopeModifier>((uint64_t)v7, (uint64_t (*)(void))type metadata accessor for ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>);
}

{
  void *v0;
  void *v1;
  void *v2;
  uint64_t v3;
  unsigned char v5[272];
  uint64_t v6;
  unsigned char v7[280];

  uint64_t v1 = (void *)MEMORY[0x1E4FBC8C8];
  uint64_t v2 = (void *)MEMORY[0x18C119DF0]((char *)v0 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v0) + 0xC0));
  swift_retain();
  if (v2) {

  }
  uint64_t v3 = (uint64_t)v0 + *(void *)((*v1 & *v0) + 0x60);
  swift_beginAccess();
  outlined init with copy of TableRowList?(v3, (uint64_t)v5, (uint64_t)&lazy cache variable for type metadata for ModifiedContent<_ViewList_View, ListTableCellModifier>, MEMORY[0x1E4F3F308], (uint64_t)&type metadata for ListTableCellModifier, (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))type metadata accessor for ModifiedContent<TableRowView, CollectionViewCellModifier>);
  v5[256] = v2 != 0;
  v5[264] = 0;
  uint64_t v6 = 0;
  outlined init with copy of ModifiedContent<ModifiedContent<_ViewList_View, CollectionViewCellModifier>, EditModeScopeModifier>((uint64_t)v5, (uint64_t)v7, (uint64_t (*)(void))type metadata accessor for ModifiedContent<ModifiedContent<_ViewList_View, ListTableCellModifier>, EditModeScopeModifier>);
  outlined destroy of ModifiedContent<ModifiedContent<_ViewList_View, CollectionViewCellModifier>, EditModeScopeModifier>((uint64_t)v5, (uint64_t (*)(void))type metadata accessor for ModifiedContent<ModifiedContent<_ViewList_View, ListTableCellModifier>, EditModeScopeModifier>);
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<AnyView, EmptyModifier>, EditModeScopeModifier>, HitTestBindingModifier>(0, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<_ViewList_View, ListTableCellModifier>, EditModeScopeModifier>, HitTestBindingModifier>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<_ViewList_View, ListTableCellModifier>, EditModeScopeModifier>);
  lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<AnyView, EmptyModifier>, EditModeScopeModifier>, HitTestBindingModifier> and conformance <> ModifiedContent<A, B>((unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<_ViewList_View, ListTableCellModifier>, EditModeScopeModifier>, HitTestBindingModifier> and conformance <> ModifiedContent<A, B>, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<_ViewList_View, ListTableCellModifier>, EditModeScopeModifier>, HitTestBindingModifier>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<_ViewList_View, ListTableCellModifier>, EditModeScopeModifier>, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<_ViewList_View, ListTableCellModifier>, EditModeScopeModifier> and conformance <> ModifiedContent<A, B>);
  ViewGraph.setRootView<A>(_:)();
  swift_release();
  return outlined destroy of ModifiedContent<ModifiedContent<ModifiedContent<_ViewList_View, CollectionViewCellModifier>, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v7, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<_ViewList_View, ListTableCellModifier>, EditModeScopeModifier>, HitTestBindingModifier>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<_ViewList_View, ListTableCellModifier>, EditModeScopeModifier>);
}

{
  void *v0;
  void *v1;
  void *v2;
  uint64_t v3;
  unsigned char v5[112];
  uint64_t v6;
  unsigned char v7[120];

  uint64_t v1 = (void *)MEMORY[0x1E4FBC8C8];
  uint64_t v2 = (void *)MEMORY[0x18C119DF0]((char *)v0 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v0) + 0xC0));
  swift_retain();
  if (v2) {

  }
  uint64_t v3 = (uint64_t)v0 + *(void *)((*v1 & *v0) + 0x60);
  swift_beginAccess();
  outlined init with copy of BridgedNavigationView.RootView(v3, (uint64_t)v5);
  v5[96] = v2 != 0;
  v5[104] = 0;
  uint64_t v6 = 0;
  outlined init with copy of TableRowList?((uint64_t)v5, (uint64_t)v7, (uint64_t)&lazy cache variable for type metadata for ModifiedContent<BridgedNavigationView.RootView, EditModeScopeModifier>, (uint64_t)&type metadata for BridgedNavigationView.RootView, (uint64_t)&type metadata for EditModeScopeModifier, (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))type metadata accessor for ModifiedContent<TableRowView, CollectionViewCellModifier>);
  outlined destroy of TableRowList?((uint64_t)v5, (uint64_t)&lazy cache variable for type metadata for ModifiedContent<BridgedNavigationView.RootView, EditModeScopeModifier>, (uint64_t)&type metadata for BridgedNavigationView.RootView, (uint64_t)&type metadata for EditModeScopeModifier, (uint64_t (*)(void))type metadata accessor for ModifiedContent<TableRowView, CollectionViewCellModifier>);
  type metadata accessor for ModifiedContent<ModifiedContent<BridgedNavigationView.RootView, EditModeScopeModifier>, HitTestBindingModifier>();
  lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<BridgedNavigationView.RootView, EditModeScopeModifier>, HitTestBindingModifier> and conformance <> ModifiedContent<A, B>();
  ViewGraph.setRootView<A>(_:)();
  swift_release();
  return outlined destroy of ModifiedContent<ModifiedContent<_ViewList_View, CollectionViewCellModifier>, EditModeScopeModifier>((uint64_t)v7, (uint64_t (*)(void))type metadata accessor for ModifiedContent<ModifiedContent<BridgedNavigationView.RootView, EditModeScopeModifier>, HitTestBindingModifier>);
}

void specialized PlatformListViewBase<>.backgroundHost.setter(void *a1, void (*a2)(void), void (*a3)(char *))
{
  uint64_t v21 = a3;
  uint64_t v5 = type metadata accessor for UIBackgroundConfiguration();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  int v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for (offset: Int, element: TableSections.Item)?(0, (unint64_t *)&lazy cache variable for type metadata for UIBackgroundConfiguration?, MEMORY[0x1E4FB0F28]);
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v11 = (char *)&v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v12);
  uint64_t v14 = (char *)&v20 - v13;
  uint64_t v15 = a1;
  a2();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v14, 1, v5))
  {
    outlined destroy of TableContentVisitor<TableDataSourceAdaptor>((uint64_t)v14, (uint64_t)&lazy cache variable for type metadata for UIBackgroundConfiguration?, MEMORY[0x1E4FB0F28], (uint64_t (*)(void))type metadata accessor for (offset: Int, element: TableSections.Item)?);
LABEL_3:
    uint64_t v16 = 0;
    goto LABEL_4;
  }
  uint64_t v19 = (void *)UIBackgroundConfiguration.customView.getter();
  outlined destroy of TableContentVisitor<TableDataSourceAdaptor>((uint64_t)v14, (uint64_t)&lazy cache variable for type metadata for UIBackgroundConfiguration?, MEMORY[0x1E4FB0F28], (uint64_t (*)(void))type metadata accessor for (offset: Int, element: TableSections.Item)?);
  if (!v19) {
    goto LABEL_3;
  }
  type metadata accessor for _UIHostingView<ModifiedContent<AnyView, EmptyModifier>>();
  uint64_t v16 = (void *)swift_dynamicCastClass();
  if (!v16) {

  }
LABEL_4:
  if (a1)
  {

    if (v16 && (v16, v15 == v16))
    {
    }
    else
    {
      *(unsigned char *)(*(void *)((char *)v15 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v15) + 0x68)) + 220) = 1;
      BOOL v17 = v15;
      UIHostingViewBase.updateRemovedState(uiView:)(0);
      static UIBackgroundConfiguration.clear()();
      uint64_t v18 = v17;
      UIBackgroundConfiguration.customView.setter();
      (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v11, v8, v5);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v6 + 56))(v11, 0, 1, v5);
      v21(v11);

      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    }
  }
  else if (v16)
  {

    static UIBackgroundConfiguration.listCell()();
    (*(void (**)(char *, void, uint64_t, uint64_t))(v6 + 56))(v11, 0, 1, v5);
    v21(v11);
  }
}

uint64_t partial apply for specialized closure #1 in TableRowList.visitRows<A>(applying:from:)()
{
  return specialized closure #1 in TableRowList.visitRows<A>(applying:from:)(*(void *)(v0 + 16), *(void **)(v0 + 24), *(void *)(v0 + 32));
}

{
  uint64_t v0;

  return specialized closure #1 in TableRowList.visitRows<A>(applying:from:)(*(void *)(v0 + 16), *(void **)(v0 + 24), *(void *)(v0 + 32));
}

{
  uint64_t v0;

  return specialized closure #1 in TableRowList.visitRows<A>(applying:from:)(*(void *)(v0 + 16), *(void **)(v0 + 24), *(void *)(v0 + 32));
}

{
  uint64_t v0;

  return specialized closure #1 in TableRowList.visitRows<A>(applying:from:)(*(void *)(v0 + 16), *(void **)(v0 + 24), *(void *)(v0 + 32));
}

{
  uint64_t v0;

  return specialized closure #1 in TableRowList.visitRows<A>(applying:from:)(*(void *)(v0 + 16), *(void **)(v0 + 24), *(void *)(v0 + 32));
}

{
  uint64_t v0;

  return specialized closure #1 in TableRowList.visitRows<A>(applying:from:)(*(void *)(v0 + 16), *(void **)(v0 + 24), *(void *)(v0 + 32));
}

{
  uint64_t v0;

  return specialized closure #1 in TableRowList.visitRows<A>(applying:from:)(*(void *)(v0 + 16), *(void **)(v0 + 24), *(void *)(v0 + 32));
}

{
  uint64_t v0;

  return specialized closure #1 in TableRowList.visitRows<A>(applying:from:)(*(void *)(v0 + 16), *(void **)(v0 + 24), *(void *)(v0 + 32));
}

uint64_t outlined destroy of TableRowList(uint64_t a1)
{
  return a1;
}

uint64_t outlined destroy of TableSections.Item(uint64_t a1)
{
  return a1;
}

void type metadata accessor for _RowVisitationContext<TableDataSourceAdaptor>?()
{
  if (!lazy cache variable for type metadata for _RowVisitationContext<TableDataSourceAdaptor>?)
  {
    type metadata accessor for _RowVisitationContext<TableDataSourceAdaptor>(255, (unint64_t *)&lazy cache variable for type metadata for _RowVisitationContext<TableDataSourceAdaptor>, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))type metadata accessor for _RowVisitationContext);
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _RowVisitationContext<TableDataSourceAdaptor>?);
    }
  }
}

unint64_t lazy protocol witness table accessor for type TableDataSourceAdaptor and conformance TableDataSourceAdaptor()
{
  unint64_t result = lazy protocol witness table cache variable for type TableDataSourceAdaptor and conformance TableDataSourceAdaptor;
  if (!lazy protocol witness table cache variable for type TableDataSourceAdaptor and conformance TableDataSourceAdaptor)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TableDataSourceAdaptor and conformance TableDataSourceAdaptor);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TableDataSourceAdaptor and conformance TableDataSourceAdaptor;
  if (!lazy protocol witness table cache variable for type TableDataSourceAdaptor and conformance TableDataSourceAdaptor)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TableDataSourceAdaptor and conformance TableDataSourceAdaptor);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TableDataSourceAdaptor and conformance TableDataSourceAdaptor;
  if (!lazy protocol witness table cache variable for type TableDataSourceAdaptor and conformance TableDataSourceAdaptor)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TableDataSourceAdaptor and conformance TableDataSourceAdaptor);
  }
  return result;
}

void type metadata accessor for _RowVisitationContext<TableDataSourceAdaptor>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, unint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = lazy protocol witness table accessor for type TableDataSourceAdaptor and conformance TableDataSourceAdaptor();
    unint64_t v7 = a3(a1, &type metadata for TableDataSourceAdaptor, v6);
    if (!v8) {
      atomic_store(v7, a2);
    }
  }
}

uint64_t outlined init with copy of TableDataSourceAdaptor(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t outlined destroy of TableDataSourceAdaptor(uint64_t a1)
{
  return a1;
}

void specialized closure #1 in _UIHostingView.setRootView(_:transaction:)(uint64_t a1, void (*a2)(void))
{
  uint64_t v3 = a1 + 16;
  swift_beginAccess();
  uint64_t v4 = MEMORY[0x18C119DF0](v3);
  if (v4)
  {
    uint64_t v5 = (void *)v4;
    a2();
  }
}

uint64_t outlined init with copy of TableRowView(uint64_t a1, uint64_t a2)
{
  return a2;
}

void specialized TableDataSourceAdaptor.configureGlobalHeader(_:transaction:)(void *a1)
{
  type metadata accessor for TableGlobalHeader();
  uint64_t v3 = swift_dynamicCastClass();
  if (v3)
  {
    uint64_t v4 = (void *)v3;
    id v5 = a1;
    objc_msgSend(v4, sel_setAutomaticallyUpdatesContentConfiguration_, 0);
    uint64_t v6 = *(void *)(v1 + 112);
    uint64_t v7 = *(void *)(v1 + 120);
    uint64_t v8 = *(void *)(v1 + 128);
    outlined init with copy of TableColumnCollection(v1 + 48, (uint64_t)v13);
    outlined copy of Binding<[SwiftUIAnySortComparator]>?(v6, v7);
    char v9 = TableDataSourceAdaptor.headerDisplayMode.getter();
    char v10 = *(unsigned char *)(v1 + 104);
    v12[0] = v6;
    v12[1] = v7;
    v12[2] = v8;
    v13[41] = v9;
    v13[42] = v10;
    uint64_t v11 = (uint64_t)v4 + OBJC_IVAR____TtC7SwiftUI17TableGlobalHeader_globalHeader;
    swift_beginAccess();
    outlined assign with take of ModifiedContent<TableRowView, CollectionViewCellModifier>((uint64_t)v12, v11, (uint64_t)&lazy cache variable for type metadata for TableHeaderView?, (uint64_t)&type metadata for TableHeaderView, MEMORY[0x1E4FBB718], (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))type metadata accessor for TableRowList?);
    swift_endAccess();
    objc_msgSend(v4, sel_setNeedsUpdateConfiguration);
  }
}

void type metadata accessor for _UIHostingView<ModifiedContent<AnyView, EmptyModifier>>()
{
  if (!lazy cache variable for type metadata for _UIHostingView<ModifiedContent<AnyView, EmptyModifier>>)
  {
    type metadata accessor for ModifiedContent<TableRowView, CollectionViewCellModifier>(255, &lazy cache variable for type metadata for ModifiedContent<AnyView, EmptyModifier>);
    lazy protocol witness table accessor for type ModifiedContent<AnyView, EmptyModifier> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<AnyView, EmptyModifier> and conformance <> ModifiedContent<A, B>, &lazy cache variable for type metadata for ModifiedContent<AnyView, EmptyModifier>);
    unint64_t v0 = type metadata accessor for _UIHostingView();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _UIHostingView<ModifiedContent<AnyView, EmptyModifier>>);
    }
  }
}

uint64_t sub_1876B0CCC()
{
  swift_unknownObjectWeakDestroy();

  return swift_deallocObject();
}

void type metadata accessor for ModifiedContent<ModifiedContent<AnyView, EmptyModifier>, EditModeScopeModifier>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<AnyView, EmptyModifier>, EditModeScopeModifier>)
  {
    type metadata accessor for ModifiedContent<TableRowView, CollectionViewCellModifier>(255, &lazy cache variable for type metadata for ModifiedContent<AnyView, EmptyModifier>);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<AnyView, EmptyModifier>, EditModeScopeModifier>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<AnyView, EmptyModifier>, EditModeScopeModifier> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<AnyView, EmptyModifier>, EditModeScopeModifier> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<AnyView, EmptyModifier>, EditModeScopeModifier> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<AnyView, EmptyModifier>, EditModeScopeModifier>();
    lazy protocol witness table accessor for type ModifiedContent<AnyView, EmptyModifier> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<AnyView, EmptyModifier> and conformance <> ModifiedContent<A, B>, &lazy cache variable for type metadata for ModifiedContent<AnyView, EmptyModifier>);
    lazy protocol witness table accessor for type EditModeScopeModifier and conformance EditModeScopeModifier();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<AnyView, EmptyModifier>, EditModeScopeModifier> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t type metadata accessor for UIView()
{
  unint64_t result = lazy cache variable for type metadata for UIView;
  if (!lazy cache variable for type metadata for UIView)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for UIView);
  }
  return result;
}

void type metadata accessor for UIHostingConfiguration<ModifiedContent<TableRowView, CollectionViewCellModifier>, EmptyView>()
{
  if (!lazy cache variable for type metadata for UIHostingConfiguration<ModifiedContent<TableRowView, CollectionViewCellModifier>, EmptyView>)
  {
    type metadata accessor for ModifiedContent<TableRowView, CollectionViewCellModifier>(255, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<TableRowView, CollectionViewCellModifier>);
    lazy protocol witness table accessor for type ModifiedContent<TableRowView, CollectionViewCellModifier> and conformance <> ModifiedContent<A, B>();
    unint64_t v0 = type metadata accessor for UIHostingConfiguration();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for UIHostingConfiguration<ModifiedContent<TableRowView, CollectionViewCellModifier>, EmptyView>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<TableRowView, CollectionViewCellModifier> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<TableRowView, CollectionViewCellModifier> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<TableRowView, CollectionViewCellModifier> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<TableRowView, CollectionViewCellModifier>(255, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<TableRowView, CollectionViewCellModifier>);
    lazy protocol witness table accessor for type TableRowView and conformance TableRowView();
    lazy protocol witness table accessor for type CollectionViewCellModifier and conformance CollectionViewCellModifier();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<TableRowView, CollectionViewCellModifier> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type TableRowView and conformance TableRowView()
{
  unint64_t result = lazy protocol witness table cache variable for type TableRowView and conformance TableRowView;
  if (!lazy protocol witness table cache variable for type TableRowView and conformance TableRowView)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TableRowView and conformance TableRowView);
  }
  return result;
}

uint64_t outlined destroy of ModifiedContent<ModifiedContent<_ViewList_View, CollectionViewCellModifier>, EditModeScopeModifier>(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

void type metadata accessor for CellHostingView<ModifiedContent<TableRowView, CollectionViewCellModifier>>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, unint64_t))
{
  if (!*a2)
  {
    type metadata accessor for ModifiedContent<TableRowView, CollectionViewCellModifier>(255, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<TableRowView, CollectionViewCellModifier>);
    uint64_t v7 = v6;
    unint64_t v8 = lazy protocol witness table accessor for type ModifiedContent<TableRowView, CollectionViewCellModifier> and conformance <> ModifiedContent<A, B>();
    unint64_t v9 = a3(a1, v7, v8);
    if (!v10) {
      atomic_store(v9, a2);
    }
  }
}

unint64_t lazy protocol witness table accessor for type _UIHostingView<ModifiedContent<TableRowView, CollectionViewCellModifier>> and conformance _UIHostingView<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type _UIHostingView<ModifiedContent<TableRowView, CollectionViewCellModifier>> and conformance _UIHostingView<A>;
  if (!lazy protocol witness table cache variable for type _UIHostingView<ModifiedContent<TableRowView, CollectionViewCellModifier>> and conformance _UIHostingView<A>)
  {
    type metadata accessor for CellHostingView<ModifiedContent<TableRowView, CollectionViewCellModifier>>(255, (unint64_t *)&lazy cache variable for type metadata for _UIHostingView<ModifiedContent<TableRowView, CollectionViewCellModifier>>, (uint64_t (*)(uint64_t, uint64_t, unint64_t))type metadata accessor for _UIHostingView);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _UIHostingView<ModifiedContent<TableRowView, CollectionViewCellModifier>> and conformance _UIHostingView<A>);
  }
  return result;
}

void partial apply for specialized closure #1 in _UIHostingView.setRootView(_:transaction:)()
{
  specialized closure #1 in _UIHostingView.setRootView(_:transaction:)(v0, (void (*)(void))specialized _UIHostingView.updateRootView());
}

{
  uint64_t v0;

  specialized closure #1 in _UIHostingView.setRootView(_:transaction:)(v0, (void (*)(void))specialized _UIHostingView.updateRootView());
}

{
  uint64_t v0;

  specialized closure #1 in _UIHostingView.setRootView(_:transaction:)(v0, (void (*)(void))specialized _UIHostingView.updateRootView());
}

{
  uint64_t v0;

  specialized closure #1 in _UIHostingView.setRootView(_:transaction:)(v0, (void (*)(void))specialized _UIHostingView.updateRootView());
}

{
  uint64_t v0;

  specialized closure #1 in _UIHostingView.setRootView(_:transaction:)(v0, (void (*)(void))specialized _UIHostingView.updateRootView());
}

void type metadata accessor for ModifiedContent<ModifiedContent<TableRowView, CollectionViewCellModifier>, EditModeScopeModifier>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<TableRowView, CollectionViewCellModifier>, EditModeScopeModifier>)
  {
    type metadata accessor for ModifiedContent<TableRowView, CollectionViewCellModifier>(255, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<TableRowView, CollectionViewCellModifier>);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<TableRowView, CollectionViewCellModifier>, EditModeScopeModifier>);
    }
  }
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<AnyView, EmptyModifier>, EditModeScopeModifier>, HitTestBindingModifier> and conformance <> ModifiedContent<A, B>(unint64_t *a1, unint64_t *a2, void (*a3)(uint64_t), void (*a4)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<AnyView, EmptyModifier>, EditModeScopeModifier>, HitTestBindingModifier>(255, a2, a3);
    a4();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<TableRowView, CollectionViewCellModifier>, EditModeScopeModifier> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<TableRowView, CollectionViewCellModifier>, EditModeScopeModifier> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<TableRowView, CollectionViewCellModifier>, EditModeScopeModifier> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<TableRowView, CollectionViewCellModifier>, EditModeScopeModifier>();
    lazy protocol witness table accessor for type ModifiedContent<TableRowView, CollectionViewCellModifier> and conformance <> ModifiedContent<A, B>();
    lazy protocol witness table accessor for type EditModeScopeModifier and conformance EditModeScopeModifier();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<TableRowView, CollectionViewCellModifier>, EditModeScopeModifier> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t outlined destroy of ModifiedContent<ModifiedContent<ModifiedContent<_ViewList_View, CollectionViewCellModifier>, EditModeScopeModifier>, HitTestBindingModifier>(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<AnyView, EmptyModifier>, EditModeScopeModifier>, HitTestBindingModifier>(0, a2, a3);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  return a1;
}

uint64_t outlined init with copy of TableColumnCollection(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t outlined copy of Binding<[SwiftUIAnySortComparator]>?(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    swift_retain();
    swift_retain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t outlined destroy of CollectionViewTableHeaderVisitor(uint64_t a1)
{
  return a1;
}

uint64_t outlined destroy of TableColumnCollection(uint64_t a1)
{
  return a1;
}

uint64_t outlined consume of Binding<[SwiftUIAnySortComparator]>?(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    swift_release();
    swift_bridgeObjectRelease();
    return swift_release();
  }
  return result;
}

uint64_t outlined consume of Binding<AnyTableColumnCustomization>?(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t outlined copy of TableColumnCustomizationID.Base(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  if (a5)
  {
    swift_bridgeObjectRetain();
    uint64_t v5 = vars8;
  }
  return swift_bridgeObjectRetain();
}

void type metadata accessor for (offset: Int, element: TableCellFormula)()
{
  if (!lazy cache variable for type metadata for (offset: Int, element: TableCellFormula))
  {
    type metadata accessor for TableCellFormula();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (offset: Int, element: TableCellFormula));
    }
  }
}

uint64_t destroy for TableDataSourceAdaptor(uint64_t a1)
{
  __swift_destroy_boxed_opaque_existential_1(a1);
  swift_bridgeObjectRelease();
  if (*(unsigned char *)(a1 + 88)) {
    swift_bridgeObjectRelease();
  }
  else {
    __swift_destroy_boxed_opaque_existential_1(a1 + 48);
  }
  uint64_t result = swift_bridgeObjectRelease();
  if (*(void *)(a1 + 120))
  {
    swift_release();
    swift_release();
    uint64_t result = swift_bridgeObjectRelease();
  }
  if (*(void *)(a1 + 144))
  {
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t initializeWithCopy for TableDataSourceAdaptor(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v4;
  (**(void (***)(void))(v4 - 8))();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  char v5 = *(unsigned char *)(a2 + 88);
  swift_bridgeObjectRetain();
  if (v5)
  {
    *(void *)(a1 + 48) = *(void *)(a2 + 48);
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v6 = *(_OWORD *)(a2 + 72);
    *(_OWORD *)(a1 + 72) = v6;
    (**(void (***)(uint64_t, uint64_t))(v6 - 8))(a1 + 48, a2 + 48);
  }
  *(unsigned char *)(a1 + 88) = v5;
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(unsigned char *)(a1 + 104) = *(unsigned char *)(a2 + 104);
  uint64_t v7 = *(void *)(a2 + 120);
  swift_bridgeObjectRetain();
  if (!v7)
  {
    *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
    *(void *)(a1 + 128) = *(void *)(a2 + 128);
    uint64_t v8 = *(void *)(a2 + 144);
    if (v8) {
      goto LABEL_6;
    }
LABEL_8:
    long long v10 = *(_OWORD *)(a2 + 152);
    *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
    *(_OWORD *)(a1 + 152) = v10;
    goto LABEL_9;
  }
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a1 + 120) = v7;
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v8 = *(void *)(a2 + 144);
  if (!v8) {
    goto LABEL_8;
  }
LABEL_6:
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  *(void *)(a1 + 144) = v8;
  uint64_t v9 = *(void *)(a2 + 160);
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  *(void *)(a1 + 160) = v9;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
LABEL_9:
  *(unsigned char *)(a1 + 168) = *(unsigned char *)(a2 + 168);
  *(_WORD *)(a1 + 169) = *(_WORD *)(a2 + 169);
  return a1;
}

uint64_t assignWithCopy for TableDataSourceAdaptor(uint64_t a1, uint64_t a2)
{
  __swift_assign_boxed_opaque_existential_1((uint64_t *)a1, (uint64_t *)a2);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  if (a1 != a2)
  {
    outlined destroy of TableColumnCollection.Backing(a1 + 48);
    if (*(unsigned char *)(a2 + 88))
    {
      *(void *)(a1 + 48) = *(void *)(a2 + 48);
      *(unsigned char *)(a1 + 88) = 1;
      swift_bridgeObjectRetain();
    }
    else
    {
      uint64_t v4 = *(void *)(a2 + 72);
      *(void *)(a1 + 72) = v4;
      *(void *)(a1 + 80) = *(void *)(a2 + 80);
      (**(void (***)(uint64_t, uint64_t))(v4 - 8))(a1 + 48, a2 + 48);
      *(unsigned char *)(a1 + 88) = 0;
    }
  }
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 104) = *(unsigned char *)(a2 + 104);
  char v5 = (_OWORD *)(a1 + 112);
  long long v6 = (_OWORD *)(a2 + 112);
  uint64_t v7 = *(void *)(a2 + 120);
  if (*(void *)(a1 + 120))
  {
    if (v7)
    {
      *(void *)(a1 + 112) = *(void *)(a2 + 112);
      swift_retain();
      swift_release();
      *(void *)(a1 + 120) = *(void *)(a2 + 120);
      swift_retain();
      swift_release();
      *(void *)(a1 + 128) = *(void *)(a2 + 128);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      outlined destroy of ModifiedContent<ModifiedContent<_ViewList_View, CollectionViewCellModifier>, EditModeScopeModifier>(a1 + 112, (uint64_t (*)(void))type metadata accessor for Binding<[SwiftUIAnySortComparator]>);
      uint64_t v8 = *(void *)(a2 + 128);
      *char v5 = *v6;
      *(void *)(a1 + 128) = v8;
    }
  }
  else if (v7)
  {
    *(void *)(a1 + 112) = *(void *)(a2 + 112);
    *(void *)(a1 + 120) = *(void *)(a2 + 120);
    *(void *)(a1 + 128) = *(void *)(a2 + 128);
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v9 = *v6;
    *(void *)(a1 + 128) = *(void *)(a2 + 128);
    *char v5 = v9;
  }
  long long v10 = (_OWORD *)(a1 + 136);
  uint64_t v11 = (_OWORD *)(a2 + 136);
  uint64_t v12 = *(void *)(a2 + 144);
  if (*(void *)(a1 + 144))
  {
    if (v12)
    {
      *(void *)(a1 + 136) = *(void *)(a2 + 136);
      swift_retain();
      swift_release();
      *(void *)(a1 + 144) = *(void *)(a2 + 144);
      swift_retain();
      swift_release();
      *(void *)(a1 + 152) = *(void *)(a2 + 152);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 160) = *(void *)(a2 + 160);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      outlined destroy of TableRowList?(a1 + 136, (uint64_t)&lazy cache variable for type metadata for Binding<AnyTableColumnCustomization>, (uint64_t)&type metadata for AnyTableColumnCustomization, MEMORY[0x1E4F41638], (uint64_t (*)(void))type metadata accessor for TableRowList?);
      long long v13 = *(_OWORD *)(a2 + 152);
      *long long v10 = *v11;
      *(_OWORD *)(a1 + 152) = v13;
    }
  }
  else if (v12)
  {
    *(void *)(a1 + 136) = *(void *)(a2 + 136);
    *(void *)(a1 + 144) = *(void *)(a2 + 144);
    *(void *)(a1 + 152) = *(void *)(a2 + 152);
    *(void *)(a1 + 160) = *(void *)(a2 + 160);
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v14 = *(_OWORD *)(a2 + 152);
    *long long v10 = *v11;
    *(_OWORD *)(a1 + 152) = v14;
  }
  *(unsigned char *)(a1 + 168) = *(unsigned char *)(a2 + 168);
  *(unsigned char *)(a1 + 169) = *(unsigned char *)(a2 + 169);
  *(unsigned char *)(a1 + 170) = *(unsigned char *)(a2 + 170);
  return a1;
}

uint64_t outlined destroy of TableColumnCollection.Backing(uint64_t a1)
{
  return a1;
}

void type metadata accessor for Binding<[SwiftUIAnySortComparator]>()
{
  if (!lazy cache variable for type metadata for Binding<[SwiftUIAnySortComparator]>)
  {
    type metadata accessor for TableRowList?(255, (unint64_t *)&lazy cache variable for type metadata for [SwiftUIAnySortComparator], (uint64_t)&type metadata for SwiftUIAnySortComparator, MEMORY[0x1E4FBB320]);
    unint64_t v0 = type metadata accessor for Binding();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Binding<[SwiftUIAnySortComparator]>);
    }
  }
}

__n128 __swift_memcpy171_8(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  long long v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  long long v4 = a2[3];
  long long v5 = a2[4];
  long long v6 = a2[6];
  *(_OWORD *)(a1 + 80) = a2[5];
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  __n128 result = (__n128)a2[7];
  long long v8 = a2[8];
  long long v9 = a2[9];
  *(_OWORD *)(a1 + 155) = *(long long *)((char *)a2 + 155);
  *(_OWORD *)(a1 + 128) = v8;
  *(_OWORD *)(a1 + 144) = v9;
  *(__n128 *)(a1 + 112) = result;
  return result;
}

uint64_t assignWithTake for TableDataSourceAdaptor(uint64_t a1, uint64_t a2)
{
  __swift_destroy_boxed_opaque_existential_1(a1);
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  uint64_t v5 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v5;
  swift_bridgeObjectRelease();
  if (a1 != a2)
  {
    outlined destroy of TableColumnCollection.Backing(a1 + 48);
    long long v6 = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 64) = v6;
    *(_OWORD *)(a1 + 73) = *(_OWORD *)(a2 + 73);
  }
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 104) = *(unsigned char *)(a2 + 104);
  if (*(void *)(a1 + 120))
  {
    if (*(void *)(a2 + 120))
    {
      *(void *)(a1 + 112) = *(void *)(a2 + 112);
      swift_release();
      *(void *)(a1 + 120) = *(void *)(a2 + 120);
      swift_release();
      *(void *)(a1 + 128) = *(void *)(a2 + 128);
      swift_bridgeObjectRelease();
      goto LABEL_8;
    }
    outlined destroy of ModifiedContent<ModifiedContent<_ViewList_View, CollectionViewCellModifier>, EditModeScopeModifier>(a1 + 112, (uint64_t (*)(void))type metadata accessor for Binding<[SwiftUIAnySortComparator]>);
  }
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
LABEL_8:
  if (!*(void *)(a1 + 144))
  {
LABEL_12:
    long long v7 = *(_OWORD *)(a2 + 152);
    *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
    *(_OWORD *)(a1 + 152) = v7;
    goto LABEL_13;
  }
  if (!*(void *)(a2 + 144))
  {
    outlined destroy of TableRowList?(a1 + 136, (uint64_t)&lazy cache variable for type metadata for Binding<AnyTableColumnCustomization>, (uint64_t)&type metadata for AnyTableColumnCustomization, MEMORY[0x1E4F41638], (uint64_t (*)(void))type metadata accessor for TableRowList?);
    goto LABEL_12;
  }
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  swift_release();
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  swift_release();
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  swift_bridgeObjectRelease();
LABEL_13:
  *(unsigned char *)(a1 + 168) = *(unsigned char *)(a2 + 168);
  *(unsigned char *)(a1 + 169) = *(unsigned char *)(a2 + 169);
  *(unsigned char *)(a1 + 170) = *(unsigned char *)(a2 + 170);
  return a1;
}

uint64_t getEnumTagSinglePayload for TableDataSourceAdaptor(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 171)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for TableDataSourceAdaptor(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 170) = 0;
    *(_WORD *)(result + 168) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 171) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 24) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 171) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for TableDataSourceAdaptor()
{
  return &type metadata for TableDataSourceAdaptor;
}

unint64_t lazy protocol witness table accessor for type ResolvedTableRowIDs and conformance ResolvedTableRowIDs()
{
  unint64_t result = lazy protocol witness table cache variable for type ResolvedTableRowIDs and conformance ResolvedTableRowIDs;
  if (!lazy protocol witness table cache variable for type ResolvedTableRowIDs and conformance ResolvedTableRowIDs)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ResolvedTableRowIDs and conformance ResolvedTableRowIDs);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ResolvedTableRowIDs and conformance ResolvedTableRowIDs;
  if (!lazy protocol witness table cache variable for type ResolvedTableRowIDs and conformance ResolvedTableRowIDs)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ResolvedTableRowIDs and conformance ResolvedTableRowIDs);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ResolvedTableRowIDs and conformance ResolvedTableRowIDs;
  if (!lazy protocol witness table cache variable for type ResolvedTableRowIDs and conformance ResolvedTableRowIDs)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ResolvedTableRowIDs and conformance ResolvedTableRowIDs);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ResolvedTableRowIDs and conformance ResolvedTableRowIDs;
  if (!lazy protocol witness table cache variable for type ResolvedTableRowIDs and conformance ResolvedTableRowIDs)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ResolvedTableRowIDs and conformance ResolvedTableRowIDs);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type LazyMapSequence<[TableSections.Item], Int> and conformance <> LazyMapSequence<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type LazyMapSequence<[TableSections.Item], Int> and conformance <> LazyMapSequence<A, B>;
  if (!lazy protocol witness table cache variable for type LazyMapSequence<[TableSections.Item], Int> and conformance <> LazyMapSequence<A, B>)
  {
    type metadata accessor for LazyMapSequence<[TableSections.Item], Int>();
    lazy protocol witness table accessor for type [TableSections.Item] and conformance [A](&lazy protocol witness table cache variable for type [TableSections.Item] and conformance [A]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LazyMapSequence<[TableSections.Item], Int> and conformance <> LazyMapSequence<A, B>);
  }
  return result;
}

void type metadata accessor for LazyMapSequence<[TableSections.Item], Int>()
{
  if (!lazy cache variable for type metadata for LazyMapSequence<[TableSections.Item], Int>)
  {
    type metadata accessor for TableRowList?(255, &lazy cache variable for type metadata for [TableSections.Item], (uint64_t)&type metadata for TableSections.Item, MEMORY[0x1E4FBB320]);
    lazy protocol witness table accessor for type [TableSections.Item] and conformance [A](&lazy protocol witness table cache variable for type [TableSections.Item] and conformance [A]);
    unint64_t v0 = type metadata accessor for LazyMapSequence();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for LazyMapSequence<[TableSections.Item], Int>);
    }
  }
}

void type metadata accessor for TableRowList?(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

uint64_t lazy protocol witness table accessor for type [TableSections.Item] and conformance [A](unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for TableRowList?(255, &lazy cache variable for type metadata for [TableSections.Item], (uint64_t)&type metadata for TableSections.Item, MEMORY[0x1E4FBB320]);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type TableRowID and conformance TableRowID()
{
  unint64_t result = lazy protocol witness table cache variable for type TableRowID and conformance TableRowID;
  if (!lazy protocol witness table cache variable for type TableRowID and conformance TableRowID)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TableRowID and conformance TableRowID);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TableRowID and conformance TableRowID;
  if (!lazy protocol witness table cache variable for type TableRowID and conformance TableRowID)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TableRowID and conformance TableRowID);
  }
  return result;
}

uint64_t associated type witness table accessor for ListDiffable.SectionIDs.Sequence.Element : Hashable in TableDataSourceAdaptor()
{
  return MEMORY[0x1E4FBB560];
}

uint64_t associated type witness table accessor for ListCoreDataSource.Cell : PlatformListCell in TableDataSourceAdaptor()
{
  return lazy protocol witness table accessor for type _UIHostingView<ModifiedContent<AnyView, EmptyModifier>> and conformance _UIHostingView<A>(&lazy protocol witness table cache variable for type TableCollectionViewCell and conformance ListCollectionViewCellBase<A>, (void (*)(uint64_t))type metadata accessor for TableCollectionViewCell);
}

_UNKNOWN **associated type witness table accessor for ListCoreDataSource.Cell : UIHostingViewDelegate in TableDataSourceAdaptor()
{
  return &protocol witness table for ListCollectionViewCellBase<A>;
}

uint64_t associated type witness table accessor for ListCoreDataSource.HeaderFooter : PlatformListHeaderFooter in TableDataSourceAdaptor()
{
  return lazy protocol witness table accessor for type _UIHostingView<ModifiedContent<AnyView, EmptyModifier>> and conformance _UIHostingView<A>(&lazy protocol witness table cache variable for type TableCollectionViewCell and conformance ListCollectionViewCellBase<A>, (void (*)(uint64_t))type metadata accessor for TableCollectionViewCell);
}

uint64_t associated type witness table accessor for ListCoreDataSource.SelectionValue : Hashable in TableDataSourceAdaptor()
{
  return MEMORY[0x1E4FBB968];
}

unint64_t instantiation function for generic protocol witness table for TableDataSourceAdaptor(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type TableDataSourceAdaptor and conformance TableDataSourceAdaptor();
  *(void *)(a1 + 8) = result;
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table accessor for type TableDataSourceAdaptor and conformance TableDataSourceAdaptor();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1876B22B4()
{
  return swift_deallocObject();
}

uint64_t partial apply for thunk for @callee_guaranteed (@in_guaranteed _ViewList_ID.Canonical, @inout Bool) -> ()()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t outlined init with take of (offset: Int, element: TableSections.Item)?(uint64_t a1, uint64_t a2)
{
  type metadata accessor for (offset: Int, element: TableSections.Item)?(0, &lazy cache variable for type metadata for (offset: Int, element: TableSections.Item)?, (void (*)(uint64_t))type metadata accessor for (offset: Int, element: TableSections.Item));
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void type metadata accessor for (offset: Int, element: TableSections.Item)()
{
  if (!lazy cache variable for type metadata for (offset: Int, element: TableSections.Item))
  {
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (offset: Int, element: TableSections.Item));
    }
  }
}

uint64_t outlined init with copy of BridgedNavigationView.RootView(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t outlined assign with take of BridgedNavigationView.RootView(uint64_t a1, uint64_t a2)
{
  return a2;
}

void type metadata accessor for ModifiedContent<ModifiedContent<BridgedNavigationView.RootView, EditModeScopeModifier>, HitTestBindingModifier>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<BridgedNavigationView.RootView, EditModeScopeModifier>, HitTestBindingModifier>)
  {
    type metadata accessor for ModifiedContent<TableRowView, CollectionViewCellModifier>(255, &lazy cache variable for type metadata for ModifiedContent<BridgedNavigationView.RootView, EditModeScopeModifier>);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<BridgedNavigationView.RootView, EditModeScopeModifier>, HitTestBindingModifier>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<BridgedNavigationView.RootView, EditModeScopeModifier>, HitTestBindingModifier> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<BridgedNavigationView.RootView, EditModeScopeModifier>, HitTestBindingModifier> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<BridgedNavigationView.RootView, EditModeScopeModifier>, HitTestBindingModifier> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<BridgedNavigationView.RootView, EditModeScopeModifier>, HitTestBindingModifier>();
    lazy protocol witness table accessor for type ModifiedContent<TabItem.RootView, EditModeScopeModifier> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<BridgedNavigationView.RootView, EditModeScopeModifier> and conformance <> ModifiedContent<A, B>, &lazy cache variable for type metadata for ModifiedContent<BridgedNavigationView.RootView, EditModeScopeModifier>, (uint64_t)&type metadata for BridgedNavigationView.RootView, (void (*)(void))lazy protocol witness table accessor for type BridgedNavigationView.RootView and conformance BridgedNavigationView.RootView);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<BridgedNavigationView.RootView, EditModeScopeModifier>, HitTestBindingModifier> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<TabItem.RootView, EditModeScopeModifier> and conformance <> ModifiedContent<A, B>(unint64_t *a1, unint64_t *a2, uint64_t a3, void (*a4)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for ModifiedContent<TableRowView, CollectionViewCellModifier>(255, a2);
    a4();
    lazy protocol witness table accessor for type EditModeScopeModifier and conformance EditModeScopeModifier();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type BridgedNavigationView.RootView and conformance BridgedNavigationView.RootView()
{
  unint64_t result = lazy protocol witness table cache variable for type BridgedNavigationView.RootView and conformance BridgedNavigationView.RootView;
  if (!lazy protocol witness table cache variable for type BridgedNavigationView.RootView and conformance BridgedNavigationView.RootView)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BridgedNavigationView.RootView and conformance BridgedNavigationView.RootView);
  }
  return result;
}

void type metadata accessor for CellHostingView<ModifiedContent<_ViewList_View, ListTableCellModifier>>()
{
  if (!lazy cache variable for type metadata for CellHostingView<ModifiedContent<_ViewList_View, ListTableCellModifier>>)
  {
    type metadata accessor for ModifiedContent<TableRowView, CollectionViewCellModifier>(255, &lazy cache variable for type metadata for ModifiedContent<_ViewList_View, ListTableCellModifier>);
    lazy protocol witness table accessor for type ModifiedContent<_ViewList_View, ListTableCellModifier> and conformance <> ModifiedContent<A, B>((unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<_ViewList_View, ListTableCellModifier> and conformance <> ModifiedContent<A, B>, &lazy cache variable for type metadata for ModifiedContent<_ViewList_View, ListTableCellModifier>, (uint64_t)&type metadata for ListTableCellModifier, (void (*)(void))lazy protocol witness table accessor for type ListTableCellModifier and conformance ListTableCellModifier);
    unint64_t v0 = type metadata accessor for CellHostingView();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for CellHostingView<ModifiedContent<_ViewList_View, ListTableCellModifier>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type ListTableCellModifier and conformance ListTableCellModifier()
{
  unint64_t result = lazy protocol witness table cache variable for type ListTableCellModifier and conformance ListTableCellModifier;
  if (!lazy protocol witness table cache variable for type ListTableCellModifier and conformance ListTableCellModifier)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ListTableCellModifier and conformance ListTableCellModifier);
  }
  return result;
}

void type metadata accessor for _UIHostingView<ModifiedContent<_ViewList_View, ListTableCellModifier>>()
{
  if (!lazy cache variable for type metadata for _UIHostingView<ModifiedContent<_ViewList_View, ListTableCellModifier>>)
  {
    type metadata accessor for ModifiedContent<TableRowView, CollectionViewCellModifier>(255, &lazy cache variable for type metadata for ModifiedContent<_ViewList_View, ListTableCellModifier>);
    lazy protocol witness table accessor for type ModifiedContent<_ViewList_View, ListTableCellModifier> and conformance <> ModifiedContent<A, B>((unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<_ViewList_View, ListTableCellModifier> and conformance <> ModifiedContent<A, B>, &lazy cache variable for type metadata for ModifiedContent<_ViewList_View, ListTableCellModifier>, (uint64_t)&type metadata for ListTableCellModifier, (void (*)(void))lazy protocol witness table accessor for type ListTableCellModifier and conformance ListTableCellModifier);
    unint64_t v0 = type metadata accessor for _UIHostingView();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _UIHostingView<ModifiedContent<_ViewList_View, ListTableCellModifier>>);
    }
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<_ViewList_View, ListTableCellModifier>, EditModeScopeModifier>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<_ViewList_View, ListTableCellModifier>, EditModeScopeModifier>)
  {
    type metadata accessor for ModifiedContent<TableRowView, CollectionViewCellModifier>(255, &lazy cache variable for type metadata for ModifiedContent<_ViewList_View, ListTableCellModifier>);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<_ViewList_View, ListTableCellModifier>, EditModeScopeModifier>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<_ViewList_View, ListTableCellModifier>, EditModeScopeModifier> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<_ViewList_View, ListTableCellModifier>, EditModeScopeModifier> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<_ViewList_View, ListTableCellModifier>, EditModeScopeModifier> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<_ViewList_View, ListTableCellModifier>, EditModeScopeModifier>();
    lazy protocol witness table accessor for type ModifiedContent<_ViewList_View, ListTableCellModifier> and conformance <> ModifiedContent<A, B>((unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<_ViewList_View, ListTableCellModifier> and conformance <> ModifiedContent<A, B>, &lazy cache variable for type metadata for ModifiedContent<_ViewList_View, ListTableCellModifier>, (uint64_t)&type metadata for ListTableCellModifier, (void (*)(void))lazy protocol witness table accessor for type ListTableCellModifier and conformance ListTableCellModifier);
    lazy protocol witness table accessor for type EditModeScopeModifier and conformance EditModeScopeModifier();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<_ViewList_View, ListTableCellModifier>, EditModeScopeModifier> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t outlined init with copy of TabItem.RootView(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t outlined assign with take of TabItem.RootView(uint64_t a1, uint64_t a2)
{
  return a2;
}

void type metadata accessor for ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>)
  {
    type metadata accessor for ModifiedContent<TableRowView, CollectionViewCellModifier>(255, &lazy cache variable for type metadata for ModifiedContent<TabItem.RootView, EditModeScopeModifier>);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>();
    lazy protocol witness table accessor for type ModifiedContent<TabItem.RootView, EditModeScopeModifier> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<TabItem.RootView, EditModeScopeModifier> and conformance <> ModifiedContent<A, B>, &lazy cache variable for type metadata for ModifiedContent<TabItem.RootView, EditModeScopeModifier>, (uint64_t)&type metadata for TabItem.RootView, (void (*)(void))lazy protocol witness table accessor for type TabItem.RootView and conformance TabItem.RootView);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type TabItem.RootView and conformance TabItem.RootView()
{
  unint64_t result = lazy protocol witness table cache variable for type TabItem.RootView and conformance TabItem.RootView;
  if (!lazy protocol witness table cache variable for type TabItem.RootView and conformance TabItem.RootView)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TabItem.RootView and conformance TabItem.RootView);
  }
  return result;
}

uint64_t outlined init with copy of ModifiedContent<ModifiedContent<_ViewList_View, CollectionViewCellModifier>, EditModeScopeModifier>(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<_ViewList_View, CollectionViewCellModifier>, EditModeScopeModifier> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<_ViewList_View, CollectionViewCellModifier>, EditModeScopeModifier> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<_ViewList_View, CollectionViewCellModifier>, EditModeScopeModifier> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<_ViewList_View, CollectionViewCellModifier>, EditModeScopeModifier>();
    lazy protocol witness table accessor for type ModifiedContent<_ViewList_View, ListTableCellModifier> and conformance <> ModifiedContent<A, B>((unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<_ViewList_View, CollectionViewCellModifier> and conformance <> ModifiedContent<A, B>, &lazy cache variable for type metadata for ModifiedContent<_ViewList_View, CollectionViewCellModifier>, (uint64_t)&type metadata for CollectionViewCellModifier, (void (*)(void))lazy protocol witness table accessor for type CollectionViewCellModifier and conformance CollectionViewCellModifier);
    lazy protocol witness table accessor for type EditModeScopeModifier and conformance EditModeScopeModifier();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<_ViewList_View, CollectionViewCellModifier>, EditModeScopeModifier> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void specialized PlatformListViewBase<>.configureBackground(_:traits:transaction:)(uint64_t a1, uint64_t a2, void (*a3)(void), void (*a4)(void), void (*a5)(char *), void *a6)
{
  uint64_t v11 = v6;
  type metadata accessor for (offset: Int, element: TableSections.Item)?(0, (unint64_t *)&lazy cache variable for type metadata for UIBackgroundConfiguration?, MEMORY[0x1E4FB0F28]);
  MEMORY[0x1F4188790](v14 - 8);
  uint64_t v16 = (char *)v36 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v17);
  uint64_t v19 = (char *)v36 - v18;
  if (!a1)
  {
    specialized PlatformListViewBase<>.backgroundHost.setter(0, a4, a5);
    return;
  }
  v36[1] = a6;
  uint64_t v20 = swift_retain();
  ((void (*)(uint64_t))a3)(v20);
  uint64_t v21 = type metadata accessor for UIBackgroundConfiguration();
  uint64_t v22 = *(void *)(v21 - 8);
  uint64_t v23 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48);
  _OWORD v36[2] = (id)(v22 + 48);
  uint64_t v37 = v23;
  if (v23(v19, 1, v21))
  {
    outlined destroy of TableContentVisitor<TableDataSourceAdaptor>((uint64_t)v19, (uint64_t)&lazy cache variable for type metadata for UIBackgroundConfiguration?, MEMORY[0x1E4FB0F28], (uint64_t (*)(void))type metadata accessor for (offset: Int, element: TableSections.Item)?);
LABEL_4:
    type metadata accessor for _UIHostingView<ModifiedContent<AnyView, EmptyModifier>>();
    id v25 = objc_allocWithZone(v24);
    uint64_t v26 = swift_retain();
    uint64_t v27 = (void *)specialized _UIHostingView.init(rootView:)(v26);
    swift_release();
    *(unsigned char *)(*(void *)((char *)v27 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v27) + 0x68)) + 220) = 1;
    UIHostingViewBase.updateRemovedState(uiView:)(0);
    uint64_t v28 = v27;
    specialized PlatformListViewBase<>.backgroundHost.setter(v27, a4, a5);

    goto LABEL_5;
  }
  uint64_t v33 = (void *)UIBackgroundConfiguration.customView.getter();
  outlined destroy of TableContentVisitor<TableDataSourceAdaptor>((uint64_t)v19, (uint64_t)&lazy cache variable for type metadata for UIBackgroundConfiguration?, MEMORY[0x1E4FB0F28], (uint64_t (*)(void))type metadata accessor for (offset: Int, element: TableSections.Item)?);
  if (!v33) {
    goto LABEL_4;
  }
  type metadata accessor for _UIHostingView<ModifiedContent<AnyView, EmptyModifier>>();
  unint64_t v34 = (void *)swift_dynamicCastClass();
  if (!v34)
  {

    goto LABEL_4;
  }
  v36[0] = v33;
  uint64_t v35 = (void *)((char *)v34 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v34) + 0x60));
  swift_beginAccess();
  *uint64_t v35 = a1;
  if (a2 == 1)
  {
    swift_retain_n();
    swift_release();
    __int16 v38 = 1;
    lazy protocol witness table accessor for type _UIHostingView<ModifiedContent<AnyView, EmptyModifier>> and conformance _UIHostingView<A>(&lazy protocol witness table cache variable for type _UIHostingView<ModifiedContent<AnyView, EmptyModifier>> and conformance _UIHostingView<A>, (void (*)(uint64_t))type metadata accessor for _UIHostingView<ModifiedContent<AnyView, EmptyModifier>>);
    ViewRendererHost.invalidateProperties(_:mayDeferUpdate:)();

    swift_release();
  }
  else
  {
    swift_retain();
    outlined copy of Transaction?(a2);
    swift_release();
    swift_allocObject();
    swift_unknownObjectWeakInit();
    swift_retain();
    swift_retain();
    default argument 1 of GraphHost.asyncTransaction(_:id:_:)();
    GraphHost.asyncTransaction(_:id:_:)();

    swift_release();
    swift_release_n();
    outlined consume of Transaction?(a2);
  }
LABEL_5:
  a3();
  if (v37(v16, 1, v21))
  {
    outlined destroy of TableContentVisitor<TableDataSourceAdaptor>((uint64_t)v16, (uint64_t)&lazy cache variable for type metadata for UIBackgroundConfiguration?, MEMORY[0x1E4FB0F28], (uint64_t (*)(void))type metadata accessor for (offset: Int, element: TableSections.Item)?);
    goto LABEL_19;
  }
  a3 = (void (*)(void))UIBackgroundConfiguration.customView.getter();
  outlined destroy of TableContentVisitor<TableDataSourceAdaptor>((uint64_t)v16, (uint64_t)&lazy cache variable for type metadata for UIBackgroundConfiguration?, MEMORY[0x1E4FB0F28], (uint64_t (*)(void))type metadata accessor for (offset: Int, element: TableSections.Item)?);
  if (!a3)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  type metadata accessor for _UIHostingView<ModifiedContent<AnyView, EmptyModifier>>();
  if (!swift_dynamicCastClass())
  {
LABEL_20:

    __break(1u);
    return;
  }
  long long v29 = specialized _UIHostingView.as<A>(_:)();
  uint64_t v31 = v30;

  if (v29)
  {
    uint64_t ObjectType = swift_getObjectType();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v31 + 8))(16, 1, ObjectType, v31);
    swift_unknownObjectRelease();
  }
  objc_msgSend(v11, sel_setBackgroundColor_, 0, v36[0]);
  swift_release();
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<AnyView, EmptyModifier>, EditModeScopeModifier>, HitTestBindingModifier>(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = type metadata accessor for ModifiedContent();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>, EditModeScopeModifier>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>, EditModeScopeModifier>)
  {
    type metadata accessor for ModifiedContent<TableRowView, CollectionViewCellModifier>(255, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>, EditModeScopeModifier>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>, EditModeScopeModifier> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>, EditModeScopeModifier> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>, EditModeScopeModifier> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>, EditModeScopeModifier>();
    lazy protocol witness table accessor for type ModifiedContent<AnyView, EmptyModifier> and conformance <> ModifiedContent<A, B>((unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier> and conformance <> ModifiedContent<A, B>, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>);
    lazy protocol witness table accessor for type EditModeScopeModifier and conformance EditModeScopeModifier();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>, EditModeScopeModifier> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<AnyView, EmptyModifier> and conformance <> ModifiedContent<A, B>(unint64_t *a1, unint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for ModifiedContent<TableRowView, CollectionViewCellModifier>(255, a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t closure #1 in TableRowList.visitRows<A>(applying:from:)specialized partial apply()
{
  return partial apply for specialized closure #1 in TableRowList.visitRows<A>(applying:from:)();
}

{
  return partial apply for specialized closure #1 in TableRowList.visitRows<A>(applying:from:)();
}

{
  return partial apply for specialized closure #1 in TableRowList.visitRows<A>(applying:from:)();
}

{
  return partial apply for specialized closure #1 in TableRowList.visitRows<A>(applying:from:)();
}

void static SceneRestorationBehavior.automatic.getter(unsigned char *a1@<X8>)
{
  *a1 = 0;
}

void static SceneRestorationBehavior.disabled.getter()
{
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance SceneRestorationBehavior.Role()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance SceneRestorationBehavior.Role()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance SceneRestorationBehavior.Role()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t Scene.restorationBehavior(_:)(char *a1, uint64_t a2, uint64_t a3)
{
  char v4 = *a1;
  return Scene.modifier<A>(_:)(&v4, a2, &type metadata for RestorationBehaviorModifier, a3);
}

void Scene.stateRestorationBehavior(_:)()
{
}

ValueMetadata *type metadata accessor for SceneRestorationBehavior()
{
  return &type metadata for SceneRestorationBehavior;
}

ValueMetadata *type metadata accessor for StateRestorationBehavior()
{
  return &type metadata for StateRestorationBehavior;
}

uint64_t sub_1876B3C3C()
{
  return swift_getWitnessTable();
}

uint64_t sub_1876B3CA0(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

ValueMetadata *type metadata accessor for SceneRestorationBehavior.Role()
{
  return &type metadata for SceneRestorationBehavior.Role;
}

unsigned char *storeEnumTagSinglePayload for SceneRestorationBehavior(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1876B3D84);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for RestorationBehaviorModifier()
{
  return &type metadata for RestorationBehaviorModifier;
}

unint64_t lazy protocol witness table accessor for type SceneRestorationBehavior.Role and conformance SceneRestorationBehavior.Role()
{
  unint64_t result = lazy protocol witness table cache variable for type SceneRestorationBehavior.Role and conformance SceneRestorationBehavior.Role;
  if (!lazy protocol witness table cache variable for type SceneRestorationBehavior.Role and conformance SceneRestorationBehavior.Role)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SceneRestorationBehavior.Role and conformance SceneRestorationBehavior.Role);
  }
  return result;
}

_UNKNOWN **associated type witness table accessor for _SceneModifier.Body : Scene in RestorationBehaviorModifier()
{
  return &protocol witness table for Never;
}

uint64_t static RestorationBehaviorModifier._makeScene(modifier:inputs:body:)@<X0>(int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(unint64_t *__return_ptr)@<X2>, uint64_t a4@<X8>)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  int v5 = *a1;
  int v6 = *(_DWORD *)(a2 + 8);
  uint64_t v7 = *(void *)(a2 + 16);
  uint64_t v8 = *(void *)(a2 + 40);
  unint64_t v9 = *(void *)(a2 + 48);
  int v10 = *(_DWORD *)(a2 + 56);
  unint64_t v18 = *(void *)a2;
  int v19 = v6;
  uint64_t v20 = v7;
  long long v21 = *(_OWORD *)(a2 + 24);
  uint64_t v22 = v8;
  unint64_t v23 = v9;
  int v24 = v10;
  a3(&v16);
  unint64_t v18 = v9;
  int v19 = v10;
  uint64_t result = PreferencesInputs.contains<A>(_:includeHostPreferences:)();
  if (result)
  {
    LODWORD(v18) = v5;
    type metadata accessor for _GraphValue<RestorationBehaviorModifier>();
    unsigned int v12 = _GraphValue.value.getter();
    unint64_t v18 = v16;
    int v19 = v17;
    uint64_t v13 = PreferencesOutputs.subscript.getter();
    unsigned int v14 = *MEMORY[0x1E4F4E7A0];
    if ((v13 & 0x100000000) == 0) {
      unsigned int v14 = v13;
    }
    unint64_t v18 = __PAIR64__(v14, v12);
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    lazy protocol witness table accessor for type RestorationBehaviorModifier.UpdateSceneList and conformance RestorationBehaviorModifier.UpdateSceneList();
    Attribute.init<A>(body:value:flags:update:)();
    LOBYTE(v18) = 0;
    uint64_t result = PreferencesOutputs.subscript.setter();
  }
  int v15 = v17;
  *(void *)a4 = v16;
  *(_DWORD *)(a4 + 8) = v15;
  return result;
}

uint64_t protocol witness for Rule.value.getter in conformance RestorationBehaviorModifier.UpdateSceneList@<X0>(uint64_t *a1@<X8>)
{
  if (*(_DWORD *)(v1 + 4) == *MEMORY[0x1E4F4E7A0])
  {
    uint64_t v3 = MEMORY[0x1E4FBC860];
  }
  else
  {
    AGGraphGetValue();
    uint64_t v3 = swift_bridgeObjectRetain();
  }
  uint64_t v5 = v3;
  uint64_t result = specialized SceneList.modify(_:)((uint64_t)&v5);
  *a1 = v5;
  return result;
}

void type metadata accessor for _GraphValue<RestorationBehaviorModifier>()
{
  if (!lazy cache variable for type metadata for _GraphValue<RestorationBehaviorModifier>)
  {
    unint64_t v0 = type metadata accessor for _GraphValue();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _GraphValue<RestorationBehaviorModifier>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type RestorationBehaviorModifier.UpdateSceneList and conformance RestorationBehaviorModifier.UpdateSceneList()
{
  unint64_t result = lazy protocol witness table cache variable for type RestorationBehaviorModifier.UpdateSceneList and conformance RestorationBehaviorModifier.UpdateSceneList;
  if (!lazy protocol witness table cache variable for type RestorationBehaviorModifier.UpdateSceneList and conformance RestorationBehaviorModifier.UpdateSceneList)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RestorationBehaviorModifier.UpdateSceneList and conformance RestorationBehaviorModifier.UpdateSceneList);
  }
  return result;
}

void *type metadata accessor for RestorationBehaviorModifier.UpdateSceneList()
{
  return &unk_1ED450328;
}

void static StateRestorationBehavior.automatic.getter()
{
}

void static StateRestorationBehavior.enabled.getter()
{
}

void static StateRestorationBehavior.disabled.getter()
{
}

uint64_t destroy for TableHeaderView(uint64_t a1)
{
  if (*(void *)(a1 + 8))
  {
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
  }
  if ((*(unsigned char *)(a1 + 64) & 1) == 0) {
    return __swift_destroy_boxed_opaque_existential_1(a1 + 24);
  }

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for TableHeaderView(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  if (v4)
  {
    *(void *)a1 = *(void *)a2;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = *(void *)(a2 + 16);
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(void *)(a1 + 16) = *(void *)(a2 + 16);
  }
  uint64_t v5 = (void *)(a1 + 24);
  int v6 = (void *)(a2 + 24);
  char v7 = *(unsigned char *)(a2 + 64);
  if (v7)
  {
    *uint64_t v5 = *v6;
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v8 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 48) = v8;
    (**(void (***)(void *, void *))(v8 - 8))(v5, v6);
  }
  *(unsigned char *)(a1 + 64) = v7;
  *(_WORD *)(a1 + 65) = *(_WORD *)(a2 + 65);
  return a1;
}

uint64_t assignWithCopy for TableHeaderView(uint64_t a1, long long *a2)
{
  uint64_t v4 = *((void *)a2 + 1);
  if (*(void *)(a1 + 8))
  {
    if (v4)
    {
      *(void *)a1 = *(void *)a2;
      swift_retain();
      swift_release();
      *(void *)(a1 + 8) = *((void *)a2 + 1);
      swift_retain();
      swift_release();
      *(void *)(a1 + 16) = *((void *)a2 + 2);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      if ((long long *)a1 == a2) {
        goto LABEL_14;
      }
    }
    else
    {
      outlined destroy of Binding<[SwiftUIAnySortComparator]>(a1, (uint64_t (*)(void))type metadata accessor for Binding<[SwiftUIAnySortComparator]>);
      uint64_t v5 = *((void *)a2 + 2);
      *(_OWORD *)a1 = *a2;
      *(void *)(a1 + 16) = v5;
      if ((long long *)a1 == a2) {
        goto LABEL_14;
      }
    }
  }
  else if (v4)
  {
    *(void *)a1 = *(void *)a2;
    *(void *)(a1 + 8) = *((void *)a2 + 1);
    *(void *)(a1 + 16) = *((void *)a2 + 2);
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    if ((long long *)a1 == a2) {
      goto LABEL_14;
    }
  }
  else
  {
    long long v6 = *a2;
    *(void *)(a1 + 16) = *((void *)a2 + 2);
    *(_OWORD *)a1 = v6;
    if ((long long *)a1 == a2) {
      goto LABEL_14;
    }
  }
  outlined destroy of TableColumnCollection.Backing(a1 + 24);
  if (a2[4])
  {
    *(void *)(a1 + 24) = *((void *)a2 + 3);
    *(unsigned char *)(a1 + 64) = 1;
    swift_bridgeObjectRetain();
  }
  else
  {
    uint64_t v7 = *((void *)a2 + 6);
    *(void *)(a1 + 48) = v7;
    *(void *)(a1 + 56) = *((void *)a2 + 7);
    (**(void (***)(uint64_t, uint64_t))(v7 - 8))(a1 + 24, (uint64_t)a2 + 24);
    *(unsigned char *)(a1 + 64) = 0;
  }
LABEL_14:
  *(unsigned char *)(a1 + 65) = *((unsigned char *)a2 + 65);
  *(unsigned char *)(a1 + 66) = *((unsigned char *)a2 + 66);
  return a1;
}

__n128 __swift_memcpy67_8(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  __n128 result = *(__n128 *)(a2 + 16);
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 63) = *(_DWORD *)(a2 + 63);
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

uint64_t assignWithTake for TableHeaderView(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 8))
  {
    uint64_t v4 = *(void *)(a2 + 8);
    if (v4)
    {
      *(void *)a1 = *(void *)a2;
      swift_release();
      *(void *)(a1 + 8) = v4;
      swift_release();
      *(void *)(a1 + 16) = *(void *)(a2 + 16);
      swift_bridgeObjectRelease();
      if (a1 == a2) {
        goto LABEL_8;
      }
      goto LABEL_7;
    }
    outlined destroy of Binding<[SwiftUIAnySortComparator]>(a1, (uint64_t (*)(void))type metadata accessor for Binding<[SwiftUIAnySortComparator]>);
  }
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  if (a1 != a2)
  {
LABEL_7:
    outlined destroy of TableColumnCollection.Backing(a1 + 24);
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
    *(_OWORD *)(a1 + 49) = *(_OWORD *)(a2 + 49);
  }
LABEL_8:
  *(unsigned char *)(a1 + 65) = *(unsigned char *)(a2 + 65);
  *(unsigned char *)(a1 + 66) = *(unsigned char *)(a2 + 66);
  return a1;
}

uint64_t storeEnumTagSinglePayload for TableHeaderView(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 66) = 0;
    *(_WORD *)(result + 64) = 0;
    *(void *)__n128 result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 67) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 67) = 0;
    }
    if (a2) {
      *(void *)(result + 8) = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for TableHeaderView()
{
  return &type metadata for TableHeaderView;
}

uint64_t associated type witness table accessor for View.Body : View in TableHeaderView()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t TableHeaderView.body.getter@<X0>(uint64_t a1@<X8>)
{
  *(void *)a1 = static HorizontalAlignment.center.getter();
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 1;
  uint64_t v3 = *(void *)v1;
  uint64_t v4 = *(void *)(v1 + 8);
  uint64_t v5 = *(void *)(v1 + 16);
  outlined init with copy of TableColumnCollection(v1 + 24, (uint64_t)&v12);
  char v6 = *(unsigned char *)(v1 + 65);
  char v7 = *(unsigned char *)(v1 + 66);
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v9 = swift_getKeyPath();
  *(void *)(a1 + 24) = KeyPath;
  *(unsigned char *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = v9;
  *(unsigned char *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = v3;
  *(void *)(a1 + 64) = v4;
  *(void *)(a1 + 72) = v5;
  long long v10 = v13[0];
  *(_OWORD *)(a1 + 80) = v12;
  *(_OWORD *)(a1 + 96) = v10;
  *(_OWORD *)(a1 + 105) = *(_OWORD *)((char *)v13 + 9);
  *(unsigned char *)(a1 + 121) = v6;
  *(unsigned char *)(a1 + 122) = v7;
  return outlined copy of Binding<[SwiftUIAnySortComparator]>?(v3, v4);
}

uint64_t TableHeaderViewCore.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v40 = a1;
  type metadata accessor for HStack<_ConditionalContent<_ConditionalContent<TupleView<(ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>>)>>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>>>();
  MEMORY[0x1F4188790](v3 - 8);
  uint64_t v5 = (char *)&v37 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for ModifiedContent<HStack<_ConditionalContent<_ConditionalContent<TupleView<(ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>>)>>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>>>, _PaddingLayout>(0);
  uint64_t v7 = v6;
  MEMORY[0x1F4188790](v6);
  uint64_t v9 = (char *)&v37 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for ModifiedContent<ModifiedContent<HStack<_ConditionalContent<_ConditionalContent<TupleView<(ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>>)>>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>>>, _PaddingLayout>, _EnvironmentKeyWritingModifier<Font?>>();
  uint64_t v38 = v10;
  MEMORY[0x1F4188790](v10);
  long long v12 = (char *)&v37 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<HStack<_ConditionalContent<_ConditionalContent<TupleView<(ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>>)>>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>>>, _PaddingLayout>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Int?>>();
  uint64_t v39 = v13;
  MEMORY[0x1F4188790](v13);
  int v15 = (char *)&v37 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<_ConditionalContent<_ConditionalContent<TupleView<(ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>>)>>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>>>, _PaddingLayout>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Int?>>, StyleContextWriter<TableStyleContext>>();
  MEMORY[0x1F4188790](v16 - 8);
  unint64_t v18 = (char *)&v37 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)uint64_t v5 = static VerticalAlignment.firstTextBaseline.getter();
  *((void *)v5 + 1) = 0;
  v5[16] = 1;
  type metadata accessor for _VariadicView.Tree<_HStackLayout, _ConditionalContent<_ConditionalContent<TupleView<(ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>>)>>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>>>();
  closure #1 in TableHeaderViewCore.body.getter(v2, (uint64_t)&v5[*(int *)(v19 + 44)]);
  unint64_t v20 = *(void *)(v2 + 16);
  char v21 = *(unsigned char *)(v2 + 24);
  outlined copy of Environment<Bool>.Content(v20, v21);
  specialized Environment.wrappedValue.getter(v20, v21);
  outlined consume of Environment<Bool>.Content(v20, v21);
  outlined init with copy of TableHeaderViewCore(v2, (uint64_t)v41);
  outlined destroy of TableHeaderViewCore((uint64_t)v41);
  EdgeInsets.init(_all:)();
  uint64_t v23 = v22;
  uint64_t v25 = v24;
  uint64_t v27 = v26;
  uint64_t v29 = v28;
  outlined init with copy of Button<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _PaddingLayout>, _FlexFrameLayout>>((uint64_t)v5, (uint64_t)v9, (uint64_t (*)(void))type metadata accessor for HStack<_ConditionalContent<_ConditionalContent<TupleView<(ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>>)>>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>>>);
  uint64_t v30 = &v9[*(int *)(v7 + 36)];
  char *v30 = 2;
  *((void *)v30 + 1) = v23;
  *((void *)v30 + 2) = v25;
  *((void *)v30 + 3) = v27;
  *((void *)v30 + 4) = v29;
  v30[40] = 0;
  outlined destroy of Binding<[SwiftUIAnySortComparator]>((uint64_t)v5, (uint64_t (*)(void))type metadata accessor for HStack<_ConditionalContent<_ConditionalContent<TupleView<(ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>>)>>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>>>);
  if (one-time initialization token for tableHeaderFont != -1) {
    swift_once();
  }
  uint64_t v31 = static ListMetrics.tableHeaderFont;
  uint64_t KeyPath = swift_getKeyPath();
  outlined init with copy of Button<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _PaddingLayout>, _FlexFrameLayout>>((uint64_t)v9, (uint64_t)v12, (uint64_t (*)(void))type metadata accessor for ModifiedContent<HStack<_ConditionalContent<_ConditionalContent<TupleView<(ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>>)>>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>>>, _PaddingLayout>);
  uint64_t v33 = (uint64_t *)&v12[*(int *)(v38 + 36)];
  *uint64_t v33 = KeyPath;
  v33[1] = v31;
  swift_retain();
  outlined destroy of Binding<[SwiftUIAnySortComparator]>((uint64_t)v9, (uint64_t (*)(void))type metadata accessor for ModifiedContent<HStack<_ConditionalContent<_ConditionalContent<TupleView<(ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>>)>>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>>>, _PaddingLayout>);
  uint64_t v34 = swift_getKeyPath();
  outlined init with copy of Button<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _PaddingLayout>, _FlexFrameLayout>>((uint64_t)v12, (uint64_t)v15, (uint64_t (*)(void))type metadata accessor for ModifiedContent<ModifiedContent<HStack<_ConditionalContent<_ConditionalContent<TupleView<(ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>>)>>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>>>, _PaddingLayout>, _EnvironmentKeyWritingModifier<Font?>>);
  uint64_t v35 = &v15[*(int *)(v39 + 36)];
  *(void *)uint64_t v35 = v34;
  *((void *)v35 + 1) = 1;
  v35[16] = 0;
  outlined destroy of Binding<[SwiftUIAnySortComparator]>((uint64_t)v12, (uint64_t (*)(void))type metadata accessor for ModifiedContent<ModifiedContent<HStack<_ConditionalContent<_ConditionalContent<TupleView<(ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>>)>>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>>>, _PaddingLayout>, _EnvironmentKeyWritingModifier<Font?>>);
  outlined init with copy of Button<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _PaddingLayout>, _FlexFrameLayout>>((uint64_t)v15, (uint64_t)v18, (uint64_t (*)(void))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<HStack<_ConditionalContent<_ConditionalContent<TupleView<(ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>>)>>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>>>, _PaddingLayout>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Int?>>);
  outlined destroy of Binding<[SwiftUIAnySortComparator]>((uint64_t)v15, (uint64_t (*)(void))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<HStack<_ConditionalContent<_ConditionalContent<TupleView<(ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>>)>>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>>>, _PaddingLayout>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Int?>>);
  return outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<_ConditionalContent<_ConditionalContent<TupleView<(ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>>)>>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>>>, _PaddingLayout>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Int?>>, StyleContextWriter<TableStyleContext>>((uint64_t)v18, v40, (uint64_t (*)(void))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<_ConditionalContent<_ConditionalContent<TupleView<(ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>>)>>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>>>, _PaddingLayout>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Int?>>, StyleContextWriter<TableStyleContext>>);
}

uint64_t closure #1 in TableHeaderViewCore.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v114 = a2;
  type metadata accessor for TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>(0);
  MEMORY[0x1F4188790](v3 - 8);
  uint64_t v104 = (char *)&v101 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>>)>(0);
  MEMORY[0x1F4188790](v5 - 8);
  uint64_t v108 = (char *)&v101 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>();
  uint64_t v113 = v7;
  uint64_t v110 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  long long v105 = (uint64_t *)((char *)&v101 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  type metadata accessor for VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?(0);
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v103 = (uint64_t)&v101 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v11);
  long long v109 = (char *)&v101 - v12;
  MEMORY[0x1F4188790](v13);
  uint64_t v107 = (char *)&v101 - v14;
  type metadata accessor for _ConditionalContent<TupleView<(ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>>)>>(0);
  MEMORY[0x1F4188790](v15 - 8);
  uint64_t v111 = (uint64_t)&v101 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for TableColumnCollection.Entry?(0);
  MEMORY[0x1F4188790](v17 - 8);
  uint64_t v19 = (char *)&v101 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v20);
  uint64_t v22 = (char *)&v101 - v21;
  MEMORY[0x1F4188790](v23);
  uint64_t v25 = (char *)&v101 - v24;
  uint64_t v26 = type metadata accessor for TableColumnCollection.Entry(0);
  uint64_t v27 = *(void *)(v26 - 8);
  MEMORY[0x1F4188790](v26);
  uint64_t v102 = (uint64_t)&v101 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v29);
  uint64_t v31 = (char *)&v101 - v30;
  MEMORY[0x1F4188790](v32);
  uint64_t v106 = (uint64_t)&v101 - v33;
  outlined init with copy of TableColumnCollection(a1 + 56, (uint64_t)&v120);
  specialized Collection.dropFirst(_:)(1, v149);
  uint64_t v112 = a1;
  if (!*(unsigned char *)(a1 + 97))
  {
    uint64_t v35 = (uint64_t)v107;
    uint64_t v34 = (uint64_t)v108;
    specialized Collection.first.getter((uint64_t)v22);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48))(v22, 1, v26) == 1)
    {
      outlined destroy of Binding<[SwiftUIAnySortComparator]>((uint64_t)v22, (uint64_t (*)(void))type metadata accessor for TableColumnCollection.Entry?);
      uint64_t v36 = 1;
    }
    else
    {
      outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<_ConditionalContent<_ConditionalContent<TupleView<(ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>>)>>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>>>, _PaddingLayout>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Int?>>, StyleContextWriter<TableStyleContext>>((uint64_t)v22, (uint64_t)v31, type metadata accessor for TableColumnCollection.Entry);
      uint64_t v53 = (void *)v112;
      uint64_t v54 = *(void *)v112;
      char v55 = *(unsigned char *)(v112 + 8);
      outlined copy of Environment<Bool>.Content(*(void *)v112, v55);
      double v56 = specialized Environment.wrappedValue.getter(v54, v55);
      outlined consume of Environment<Bool>.Content(v54, v55);
      uint64_t v57 = static HorizontalAlignment.center.getter();
      uint64_t v58 = (uint64_t)v105;
      uint64_t *v105 = v57;
      *(void *)(v58 + 8) = 0;
      *(unsigned char *)(v58 + 16) = 1;
      type metadata accessor for _VariadicView.Tree<_VStackLayout, _ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>();
      closure #1 in TableHeaderViewCore.headerButton(entry:leadingMargin:column:)(v53, (uint64_t)v31, 0, v58 + *(int *)(v59 + 44), v56);
      outlined destroy of Binding<[SwiftUIAnySortComparator]>((uint64_t)v31, type metadata accessor for TableColumnCollection.Entry);
      outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<_ConditionalContent<_ConditionalContent<TupleView<(ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>>)>>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>>>, _PaddingLayout>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Int?>>, StyleContextWriter<TableStyleContext>>(v58, v35, (uint64_t (*)(void))type metadata accessor for VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>);
      uint64_t v36 = 0;
    }
    uint64_t v60 = v114;
    uint64_t v61 = (uint64_t)v109;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v110 + 56))(v35, v36, 1, v113);
    outlined init with copy of Slice<TableColumnCollection>((uint64_t)v149, (uint64_t)v148);
    type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for Slice<TableColumnCollection>, (uint64_t (*)(void))lazy protocol witness table accessor for type TableColumnCollection and conformance TableColumnCollection, (uint64_t)&type metadata for TableColumnCollection, MEMORY[0x1E4FBC320]);
    type metadata accessor for UUID();
    type metadata accessor for ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>();
    lazy protocol witness table accessor for type Slice<TableColumnCollection> and conformance <> Slice<A>();
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout> and conformance <> ModifiedContent<A, B>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<Color, _FlexFrameLayout> and conformance <> ModifiedContent<A, B>);
    lazy protocol witness table accessor for type Button<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _PaddingLayout>, _FlexFrameLayout>> and conformance Button<A>(&lazy protocol witness table cache variable for type TableColumnCollection.Entry and conformance TableColumnCollection.Entry, (void (*)(uint64_t))type metadata accessor for TableColumnCollection.Entry);
    ForEach<>.init(_:content:)();
    outlined init with copy of Button<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _PaddingLayout>, _FlexFrameLayout>>(v35, v61, (uint64_t (*)(void))type metadata accessor for VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?);
    outlined init with copy of Button<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _PaddingLayout>, _FlexFrameLayout>>((uint64_t)&v120, (uint64_t)v148, (uint64_t (*)(void))type metadata accessor for ForEach<Slice<TableColumnCollection>, UUID, ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>>);
    outlined init with copy of Button<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _PaddingLayout>, _FlexFrameLayout>>(v61, v34, (uint64_t (*)(void))type metadata accessor for VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?);
    type metadata accessor for (VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>>)(0);
    outlined init with copy of Button<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _PaddingLayout>, _FlexFrameLayout>>((uint64_t)v148, v34 + *(int *)(v62 + 48), (uint64_t (*)(void))type metadata accessor for ForEach<Slice<TableColumnCollection>, UUID, ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>>);
    outlined destroy of Binding<[SwiftUIAnySortComparator]>((uint64_t)v148, (uint64_t (*)(void))type metadata accessor for ForEach<Slice<TableColumnCollection>, UUID, ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>>);
    outlined destroy of Binding<[SwiftUIAnySortComparator]>(v61, (uint64_t (*)(void))type metadata accessor for VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?);
    uint64_t v63 = v111;
    outlined init with copy of Button<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _PaddingLayout>, _FlexFrameLayout>>(v34, v111, (uint64_t (*)(void))type metadata accessor for TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>>)>);
    unint64_t v64 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E4F40568];
    type metadata accessor for _ConditionalContent<_ConditionalContent<TupleView<(ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>>)>>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>>(0, &lazy cache variable for type metadata for _ConditionalContent<TupleView<(ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>>)>>.Storage, (uint64_t (*)(uint64_t))type metadata accessor for TupleView<(ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>, (uint64_t (*)(uint64_t))type metadata accessor for TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>>)>, MEMORY[0x1E4F40568]);
    swift_storeEnumTagMultiPayload();
    outlined destroy of Binding<[SwiftUIAnySortComparator]>(v34, (uint64_t (*)(void))type metadata accessor for TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>>)>);
    outlined init with copy of Button<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _PaddingLayout>, _FlexFrameLayout>>(v63, v60, (uint64_t (*)(void))type metadata accessor for _ConditionalContent<TupleView<(ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>>)>>);
    type metadata accessor for _ConditionalContent<_ConditionalContent<TupleView<(ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>>)>>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>>(0, &lazy cache variable for type metadata for _ConditionalContent<_ConditionalContent<TupleView<(ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>>)>>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>>.Storage, (uint64_t (*)(uint64_t))type metadata accessor for _ConditionalContent<TupleView<(ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>>)>>, (uint64_t (*)(uint64_t))type metadata accessor for TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>, v64);
    swift_storeEnumTagMultiPayload();
    outlined destroy of Binding<[SwiftUIAnySortComparator]>(v63, (uint64_t (*)(void))type metadata accessor for _ConditionalContent<TupleView<(ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>>)>>);
    outlined destroy of Binding<[SwiftUIAnySortComparator]>((uint64_t)&v120, (uint64_t (*)(void))type metadata accessor for ForEach<Slice<TableColumnCollection>, UUID, ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>>);
    uint64_t v65 = (unsigned char *)v35;
    goto LABEL_16;
  }
  if (*(unsigned char *)(a1 + 97) != 1)
  {
    specialized Collection.first.getter((uint64_t)v19);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48))(v19, 1, v26) == 1)
    {
      outlined destroy of Binding<[SwiftUIAnySortComparator]>((uint64_t)v19, (uint64_t (*)(void))type metadata accessor for TableColumnCollection.Entry?);
      uint64_t v37 = 1;
      uint64_t v38 = (void *)v112;
      uint64_t v39 = v113;
      uint64_t v40 = (uint64_t)v109;
      uint64_t v41 = v103;
      uint64_t v42 = (uint64_t)v104;
    }
    else
    {
      uint64_t v66 = v102;
      outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<_ConditionalContent<_ConditionalContent<TupleView<(ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>>)>>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>>>, _PaddingLayout>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Int?>>, StyleContextWriter<TableStyleContext>>((uint64_t)v19, v102, type metadata accessor for TableColumnCollection.Entry);
      uint64_t v38 = (void *)v112;
      uint64_t v67 = *(void *)v112;
      char v68 = *(unsigned char *)(v112 + 8);
      outlined copy of Environment<Bool>.Content(*(void *)v112, v68);
      double v69 = specialized Environment.wrappedValue.getter(v67, v68);
      outlined consume of Environment<Bool>.Content(v67, v68);
      uint64_t v70 = static HorizontalAlignment.center.getter();
      uint64_t v71 = (uint64_t)v105;
      uint64_t *v105 = v70;
      *(void *)(v71 + 8) = 0;
      *(unsigned char *)(v71 + 16) = 1;
      type metadata accessor for _VariadicView.Tree<_VStackLayout, _ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>();
      closure #1 in TableHeaderViewCore.headerButton(entry:leadingMargin:column:)(v38, v66, 0, v71 + *(int *)(v72 + 44), v69);
      outlined destroy of Binding<[SwiftUIAnySortComparator]>(v66, type metadata accessor for TableColumnCollection.Entry);
      uint64_t v41 = v103;
      outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<_ConditionalContent<_ConditionalContent<TupleView<(ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>>)>>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>>>, _PaddingLayout>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Int?>>, StyleContextWriter<TableStyleContext>>(v71, v103, (uint64_t (*)(void))type metadata accessor for VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>);
      uint64_t v37 = 0;
      uint64_t v39 = v113;
      uint64_t v40 = (uint64_t)v109;
      uint64_t v42 = (uint64_t)v104;
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v110 + 56))(v41, v37, 1, v39);
    outlined init with copy of Slice<TableColumnCollection>((uint64_t)v149, (uint64_t)v148);
    outlined init with copy of TableHeaderViewCore((uint64_t)v38, (uint64_t)&v120);
    uint64_t v73 = swift_allocObject();
    long long v74 = *(_OWORD *)v125;
    *(_OWORD *)(v73 + 80) = v124;
    *(_OWORD *)(v73 + 96) = v74;
    *(_DWORD *)(v73 + 111) = *(_DWORD *)&v125[15];
    long long v75 = v121;
    *(_OWORD *)(v73 + 16) = v120;
    *(_OWORD *)(v73 + 32) = v75;
    long long v76 = v123;
    *(_OWORD *)(v73 + 48) = v122;
    *(_OWORD *)(v73 + 64) = v76;
    type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for Slice<TableColumnCollection>, (uint64_t (*)(void))lazy protocol witness table accessor for type TableColumnCollection and conformance TableColumnCollection, (uint64_t)&type metadata for TableColumnCollection, MEMORY[0x1E4FBC320]);
    type metadata accessor for UUID();
    lazy protocol witness table accessor for type Slice<TableColumnCollection> and conformance <> Slice<A>();
    lazy protocol witness table accessor for type Button<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _PaddingLayout>, _FlexFrameLayout>> and conformance Button<A>(&lazy protocol witness table cache variable for type VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>> and conformance VStack<A>, (void (*)(uint64_t))type metadata accessor for VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>);
    lazy protocol witness table accessor for type Button<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _PaddingLayout>, _FlexFrameLayout>> and conformance Button<A>(&lazy protocol witness table cache variable for type TableColumnCollection.Entry and conformance TableColumnCollection.Entry, (void (*)(uint64_t))type metadata accessor for TableColumnCollection.Entry);
    ForEach<>.init(_:content:)();
    outlined init with copy of Button<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _PaddingLayout>, _FlexFrameLayout>>(v41, v40, (uint64_t (*)(void))type metadata accessor for VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?);
    outlined init with copy of Button<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _PaddingLayout>, _FlexFrameLayout>>((uint64_t)&v120, (uint64_t)v148, (uint64_t (*)(void))type metadata accessor for ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>);
    outlined init with copy of Button<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _PaddingLayout>, _FlexFrameLayout>>(v40, v42, (uint64_t (*)(void))type metadata accessor for VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?);
    type metadata accessor for (VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)(0);
    outlined init with copy of Button<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _PaddingLayout>, _FlexFrameLayout>>((uint64_t)v148, v42 + *(int *)(v77 + 48), (uint64_t (*)(void))type metadata accessor for ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>);
    outlined destroy of Binding<[SwiftUIAnySortComparator]>((uint64_t)v148, (uint64_t (*)(void))type metadata accessor for ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>);
    outlined destroy of Binding<[SwiftUIAnySortComparator]>(v40, (uint64_t (*)(void))type metadata accessor for VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?);
    outlined init with copy of Button<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _PaddingLayout>, _FlexFrameLayout>>(v42, v114, (uint64_t (*)(void))type metadata accessor for TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>);
    type metadata accessor for _ConditionalContent<_ConditionalContent<TupleView<(ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>>)>>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>>(0, &lazy cache variable for type metadata for _ConditionalContent<_ConditionalContent<TupleView<(ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>>)>>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>>.Storage, (uint64_t (*)(uint64_t))type metadata accessor for _ConditionalContent<TupleView<(ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>>)>>, (uint64_t (*)(uint64_t))type metadata accessor for TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>, MEMORY[0x1E4F40568]);
    swift_storeEnumTagMultiPayload();
    outlined destroy of Binding<[SwiftUIAnySortComparator]>(v42, (uint64_t (*)(void))type metadata accessor for TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>);
    outlined destroy of Binding<[SwiftUIAnySortComparator]>((uint64_t)&v120, (uint64_t (*)(void))type metadata accessor for ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>);
    uint64_t v65 = (unsigned char *)v41;
LABEL_16:
    uint64_t v78 = type metadata accessor for VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?;
    goto LABEL_33;
  }
  specialized Collection.first.getter((uint64_t)v25);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48))(v25, 1, v26) == 1)
  {
    outlined destroy of Binding<[SwiftUIAnySortComparator]>((uint64_t)v25, (uint64_t (*)(void))type metadata accessor for TableColumnCollection.Entry?);
    _s7SwiftUI15ModifiedContentVyACyAA5ColorVAA16_FlexFrameLayoutVGAA01_gH0VGSgWOi0_((uint64_t)&v120);
  }
  else
  {
    uint64_t v43 = v106;
    outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<_ConditionalContent<_ConditionalContent<TupleView<(ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>>)>>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>>>, _PaddingLayout>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Int?>>, StyleContextWriter<TableStyleContext>>((uint64_t)v25, v106, type metadata accessor for TableColumnCollection.Entry);
    uint64_t v44 = static Color.clear.getter();
    uint64_t v45 = v43 + *(int *)(v26 + 28);
    double v46 = *(double *)v45;
    uint64_t v47 = *(void *)(v45 + 8);
    double v48 = *(double *)(v45 + 16);
    double v49 = *(double *)(v45 + 24);
    char v50 = *(unsigned char *)(v45 + 32);
    if (*(unsigned char *)(v43 + *(int *)(v26 + 36)))
    {
      if (*(unsigned char *)(v43 + *(int *)(v26 + 36)) == 1) {
        uint64_t v51 = static Alignment.center.getter();
      }
      else {
        uint64_t v51 = static Alignment.trailing.getter();
      }
    }
    else
    {
      uint64_t v51 = static Alignment.leading.getter();
    }
    if (v50) {
      double v79 = 0.0;
    }
    else {
      double v79 = v49;
    }
    if (v50) {
      double v80 = 0.0;
    }
    else {
      double v80 = v46;
    }
    if (v50) {
      char v81 = 1;
    }
    else {
      char v81 = v47 & 1;
    }
    if (v50) {
      double v82 = 0.0;
    }
    else {
      double v82 = v48;
    }
    specialized View.frame(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)(v82, v50, v80, v81, v79, v50, 0.0, 1, (uint64_t)v134, 0.0, 1, 0.0, 1, v51, v52, v44);
    swift_release();
    long long v109 = (char *)v134[1];
    uint64_t v110 = v134[0];
    char v83 = v135;
    char v84 = v137;
    uint64_t v107 = v138;
    uint64_t v108 = v136;
    char v85 = v139;
    char v86 = v141;
    uint64_t v104 = v142;
    long long v105 = v140;
    char v87 = v143;
    uint64_t v103 = v144;
    char v88 = v145;
    uint64_t v89 = v146;
    uint64_t v90 = v147;
    static Alignment.center.getter();
    _FrameLayout.init(width:height:alignment:)();
    v119[0] = v83;
    v132[0] = v84;
    v118[0] = v85;
    char v117 = v86;
    char v116 = v87;
    char v115 = v88;
    outlined destroy of Binding<[SwiftUIAnySortComparator]>(v106, type metadata accessor for TableColumnCollection.Entry);
    long long v128 = v133[0];
    *(void *)&long long v120 = v110;
    *((void *)&v120 + 1) = v109;
    LOBYTE(v121) = v119[0];
    *((void *)&v121 + 1) = v108;
    LOBYTE(v122) = v132[0];
    *((void *)&v122 + 1) = v107;
    LOBYTE(v123) = v118[0];
    *((void *)&v123 + 1) = v105;
    LOBYTE(v124) = v117;
    *((void *)&v124 + 1) = v104;
    v125[0] = v116;
    *(void *)&v125[8] = v103;
    v125[16] = v115;
    uint64_t v126 = v89;
    uint64_t v127 = v90;
    long long v129 = v133[1];
    long long v130 = v133[2];
    destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(&v120, v91, v92, v93);
  }
  outlined init with take of ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?((uint64_t)&v120, (uint64_t)v148);
  outlined init with copy of Slice<TableColumnCollection>((uint64_t)v149, (uint64_t)v134);
  outlined init with copy of TableHeaderViewCore(v112, (uint64_t)&v120);
  uint64_t v94 = swift_allocObject();
  long long v95 = *(_OWORD *)v125;
  *(_OWORD *)(v94 + 80) = v124;
  *(_OWORD *)(v94 + 96) = v95;
  *(_DWORD *)(v94 + 111) = *(_DWORD *)&v125[15];
  long long v96 = v121;
  *(_OWORD *)(v94 + 16) = v120;
  *(_OWORD *)(v94 + 32) = v96;
  long long v97 = v123;
  *(_OWORD *)(v94 + 48) = v122;
  *(_OWORD *)(v94 + 64) = v97;
  type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for Slice<TableColumnCollection>, (uint64_t (*)(void))lazy protocol witness table accessor for type TableColumnCollection and conformance TableColumnCollection, (uint64_t)&type metadata for TableColumnCollection, MEMORY[0x1E4FBC320]);
  type metadata accessor for UUID();
  lazy protocol witness table accessor for type Slice<TableColumnCollection> and conformance <> Slice<A>();
  lazy protocol witness table accessor for type Button<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _PaddingLayout>, _FlexFrameLayout>> and conformance Button<A>(&lazy protocol witness table cache variable for type VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>> and conformance VStack<A>, (void (*)(uint64_t))type metadata accessor for VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>);
  lazy protocol witness table accessor for type Button<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _PaddingLayout>, _FlexFrameLayout>> and conformance Button<A>(&lazy protocol witness table cache variable for type TableColumnCollection.Entry and conformance TableColumnCollection.Entry, (void (*)(uint64_t))type metadata accessor for TableColumnCollection.Entry);
  ForEach<>.init(_:content:)();
  outlined init with take of ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?((uint64_t)v148, (uint64_t)v119);
  outlined init with copy of Button<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _PaddingLayout>, _FlexFrameLayout>>((uint64_t)v132, (uint64_t)v118, (uint64_t (*)(void))type metadata accessor for ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>);
  outlined init with take of ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?((uint64_t)v119, (uint64_t)v133);
  outlined init with take of ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?((uint64_t)v133, (uint64_t)&v120);
  outlined init with copy of Button<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _PaddingLayout>, _FlexFrameLayout>>((uint64_t)v118, (uint64_t)&v131, (uint64_t (*)(void))type metadata accessor for ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>);
  outlined retain of ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?((uint64_t)v133);
  outlined destroy of Binding<[SwiftUIAnySortComparator]>((uint64_t)v118, (uint64_t (*)(void))type metadata accessor for ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>);
  outlined init with take of ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?((uint64_t)v119, (uint64_t)v134);
  outlined release of ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?((uint64_t)v134);
  uint64_t v98 = v111;
  outlined init with copy of Button<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _PaddingLayout>, _FlexFrameLayout>>((uint64_t)&v120, v111, (uint64_t (*)(void))type metadata accessor for TupleView<(ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>);
  uint64_t v99 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E4F40568];
  type metadata accessor for _ConditionalContent<_ConditionalContent<TupleView<(ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>>)>>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>>(0, &lazy cache variable for type metadata for _ConditionalContent<TupleView<(ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>>)>>.Storage, (uint64_t (*)(uint64_t))type metadata accessor for TupleView<(ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>, (uint64_t (*)(uint64_t))type metadata accessor for TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>>)>, MEMORY[0x1E4F40568]);
  swift_storeEnumTagMultiPayload();
  outlined destroy of Binding<[SwiftUIAnySortComparator]>((uint64_t)&v120, (uint64_t (*)(void))type metadata accessor for TupleView<(ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>);
  outlined init with copy of Button<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _PaddingLayout>, _FlexFrameLayout>>(v98, v114, (uint64_t (*)(void))type metadata accessor for _ConditionalContent<TupleView<(ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>>)>>);
  type metadata accessor for _ConditionalContent<_ConditionalContent<TupleView<(ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>>)>>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>>(0, &lazy cache variable for type metadata for _ConditionalContent<_ConditionalContent<TupleView<(ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>>)>>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>>.Storage, (uint64_t (*)(uint64_t))type metadata accessor for _ConditionalContent<TupleView<(ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>>)>>, (uint64_t (*)(uint64_t))type metadata accessor for TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>, v99);
  swift_storeEnumTagMultiPayload();
  outlined destroy of Binding<[SwiftUIAnySortComparator]>(v98, (uint64_t (*)(void))type metadata accessor for _ConditionalContent<TupleView<(ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>>)>>);
  uint64_t v65 = v132;
  uint64_t v78 = type metadata accessor for ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>;
LABEL_33:
  outlined destroy of Binding<[SwiftUIAnySortComparator]>((uint64_t)v65, (uint64_t (*)(void))v78);
  return outlined destroy of Slice<TableColumnCollection>((uint64_t)v149);
}

uint64_t specialized Collection.dropFirst(_:)@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  if (result < 0)
  {
    __break(1u);
  }
  else
  {
    uint64_t v3 = v2;
    uint64_t v4 = result;
    outlined init with copy of TableColumnCollection.Backing(v2, (uint64_t)v23);
    if (v24)
    {
      uint64_t v6 = *(void *)(*(void *)&v23[0] + 16);
      swift_bridgeObjectRelease();
    }
    else
    {
      outlined init with take of OptionalBinaryInteger(v23, (uint64_t)&v19);
      uint64_t v7 = v20;
      uint64_t v8 = v21;
      __swift_project_boxed_opaque_existential_1(&v19, v20);
      uint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 8))(v7, v8);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v19);
    }
    uint64_t v9 = specialized RandomAccessCollection<>.distance(from:to:)(0, v6);
    if (!v4 || v9 < 0 || v9 >= v4)
    {
      uint64_t v10 = specialized RandomAccessCollection<>.index(_:offsetBy:)(0, v4);
      outlined init with copy of TableColumnCollection(v3, (uint64_t)v23);
    }
    else
    {
      outlined init with copy of TableColumnCollection(v3, (uint64_t)v23);
      outlined init with copy of TableColumnCollection.Backing((uint64_t)v23, (uint64_t)&v19);
      if (v22)
      {
        uint64_t v10 = *(void *)(v19 + 16);
        swift_bridgeObjectRelease();
      }
      else
      {
        outlined init with take of OptionalBinaryInteger(&v19, (uint64_t)v16);
        uint64_t v14 = v17;
        uint64_t v15 = v18;
        __swift_project_boxed_opaque_existential_1(v16, v17);
        uint64_t v10 = (*(uint64_t (**)(uint64_t, uint64_t))(v15 + 8))(v14, v15);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v16);
      }
    }
    outlined destroy of TableColumnCollection((uint64_t)v23);
    outlined init with copy of TableColumnCollection.Backing(v3, (uint64_t)v23);
    if (v24)
    {
      uint64_t v11 = *(void *)(*(void *)&v23[0] + 16);
      __n128 result = swift_bridgeObjectRelease();
    }
    else
    {
      outlined init with take of OptionalBinaryInteger(v23, (uint64_t)&v19);
      uint64_t v12 = v20;
      uint64_t v13 = v21;
      __swift_project_boxed_opaque_existential_1(&v19, v20);
      uint64_t v11 = (*(uint64_t (**)(uint64_t, uint64_t))(v13 + 8))(v12, v13);
      __n128 result = __swift_destroy_boxed_opaque_existential_1((uint64_t)&v19);
    }
    if (v11 >= v10)
    {
      specialized Collection<>.subscript.getter(v10, v11, a2);
      return outlined destroy of TableColumnCollection(v3);
    }
  }
  __break(1u);
  return result;
}

double closure #2 in closure #1 in TableHeaderViewCore.body.getter@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = static Color.clear.getter();
  uint64_t v5 = type metadata accessor for TableColumnCollection.Entry(0);
  uint64_t v6 = a1 + *(int *)(v5 + 28);
  double v7 = *(double *)v6;
  uint64_t v8 = *(void *)(v6 + 8);
  double v10 = *(double *)(v6 + 16);
  double v9 = *(double *)(v6 + 24);
  char v11 = *(unsigned char *)(v6 + 32);
  if (!*(unsigned char *)(a1 + *(int *)(v5 + 36)))
  {
    uint64_t v12 = static Alignment.leading.getter();
    if ((v11 & 1) == 0) {
      goto LABEL_6;
    }
LABEL_8:
    double v9 = 0.0;
    double v7 = 0.0;
    double v10 = 0.0;
    char v14 = 1;
    goto LABEL_9;
  }
  if (*(unsigned char *)(a1 + *(int *)(v5 + 36)) != 1)
  {
    uint64_t v12 = static Alignment.trailing.getter();
    if ((v11 & 1) == 0) {
      goto LABEL_6;
    }
    goto LABEL_8;
  }
  uint64_t v12 = static Alignment.center.getter();
  if (v11) {
    goto LABEL_8;
  }
LABEL_6:
  char v14 = v8 & 1;
LABEL_9:
  specialized View.frame(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)(v10, v11, v7, v14, v9, v11, 0.0, 1, (uint64_t)v35, 0.0, 1, 0.0, 1, v12, v13, v4);
  swift_release();
  uint64_t v29 = v35[1];
  uint64_t v30 = v35[0];
  char v15 = v36;
  uint64_t v16 = v37;
  char v17 = v38;
  uint64_t v18 = v39;
  char v19 = v40;
  uint64_t v20 = v41;
  char v21 = v42;
  char v22 = v44;
  uint64_t v27 = v45;
  uint64_t v28 = v43;
  char v23 = v46;
  uint64_t v31 = v48;
  uint64_t v32 = v47;
  static Alignment.center.getter();
  _FrameLayout.init(width:height:alignment:)();
  uint64_t v24 = v49;
  uint64_t v25 = v51;
  char v34 = v50;
  char v33 = v52;
  *(void *)a2 = v30;
  *(void *)(a2 + 8) = v29;
  *(unsigned char *)(a2 + 16) = v15;
  *(void *)(a2 + 24) = v16;
  *(unsigned char *)(a2 + 32) = v17;
  *(void *)(a2 + 40) = v18;
  *(unsigned char *)(a2 + 48) = v19;
  *(void *)(a2 + 56) = v20;
  *(unsigned char *)(a2 + 64) = v21;
  *(void *)(a2 + 72) = v28;
  *(unsigned char *)(a2 + 80) = v22;
  *(void *)(a2 + 88) = v27;
  *(unsigned char *)(a2 + 96) = v23;
  *(void *)(a2 + 104) = v32;
  *(void *)(a2 + 112) = v31;
  *(void *)(a2 + 120) = v24;
  *(unsigned char *)(a2 + 128) = v34;
  *(void *)(a2 + 136) = v25;
  *(unsigned char *)(a2 + 144) = v33;
  double result = v53[0];
  *(_OWORD *)(a2 + 152) = *(_OWORD *)v53;
  return result;
}

uint64_t closure #1 in closure #1 in TableHeaderViewCore.body.getter@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = *(void *)(a1 + *(int *)(type metadata accessor for TableColumnCollection.Entry(0) + 24));
  *(void *)a3 = static HorizontalAlignment.center.getter();
  *(void *)(a3 + 8) = 0;
  *(unsigned char *)(a3 + 16) = 1;
  type metadata accessor for _VariadicView.Tree<_VStackLayout, _ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>();
  return closure #1 in TableHeaderViewCore.headerButton(entry:leadingMargin:column:)(a2, a1, v6, a3 + *(int *)(v7 + 44), 0.0);
}

uint64_t closure #1 in TableHeaderViewCore.headerButton(entry:leadingMargin:column:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>, double a5@<D0>)
{
  uint64_t v10 = type metadata accessor for StaticTableHeaderButton(0);
  MEMORY[0x1F4188790](v10);
  uint64_t v12 = &v25[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  uint64_t v13 = (int *)type metadata accessor for SortableTableHeaderButton(0);
  MEMORY[0x1F4188790](v13);
  char v15 = &v25[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  uint64_t v16 = a1[5];
  if (!v16) {
    goto LABEL_5;
  }
  uint64_t v17 = a1[4];
  uint64_t v18 = a1[6];
  uint64_t v19 = type metadata accessor for TableColumnCollection.Entry(0);
  outlined init with copy of SwiftUIAnySortComparator?(a2 + *(int *)(v19 + 44), (uint64_t)v25, (unint64_t *)&lazy cache variable for type metadata for SwiftUIAnySortComparator?, (uint64_t)&type metadata for SwiftUIAnySortComparator);
  if (!v26)
  {
    outlined destroy of AccessibilityTableContext?((uint64_t)v25, (unint64_t *)&lazy cache variable for type metadata for SwiftUIAnySortComparator?, (uint64_t)&type metadata for SwiftUIAnySortComparator);
LABEL_5:
    outlined init with copy of Button<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _PaddingLayout>, _FlexFrameLayout>>(a2, (uint64_t)v12, type metadata accessor for TableColumnCollection.Entry);
    *(double *)&v12[*(int *)(v10 + 20)] = a5;
    *(void *)&v12[*(int *)(v10 + 24)] = a3;
    outlined init with copy of Button<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _PaddingLayout>, _FlexFrameLayout>>((uint64_t)v12, a4, type metadata accessor for StaticTableHeaderButton);
    type metadata accessor for _ConditionalContent<_ConditionalContent<TupleView<(ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>>)>>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>>(0, &lazy cache variable for type metadata for _ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>.Storage, type metadata accessor for SortableTableHeaderButton, type metadata accessor for StaticTableHeaderButton, MEMORY[0x1E4F40568]);
    swift_storeEnumTagMultiPayload();
    char v21 = type metadata accessor for StaticTableHeaderButton;
    uint64_t v22 = (uint64_t)v12;
    return outlined destroy of Binding<[SwiftUIAnySortComparator]>(v22, v21);
  }
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  outlined destroy of AccessibilityTableContext?((uint64_t)v25, (unint64_t *)&lazy cache variable for type metadata for SwiftUIAnySortComparator?, (uint64_t)&type metadata for SwiftUIAnySortComparator);
  outlined init with copy of Button<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _PaddingLayout>, _FlexFrameLayout>>(a2, (uint64_t)v15, type metadata accessor for TableColumnCollection.Entry);
  *(double *)&v15[v13[5]] = a5;
  uint64_t v20 = &v15[v13[6]];
  *uint64_t v20 = v17;
  v20[1] = v16;
  _OWORD v20[2] = v18;
  *(void *)&v15[v13[7]] = a3;
  outlined init with copy of Button<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _PaddingLayout>, _FlexFrameLayout>>((uint64_t)v15, a4, type metadata accessor for SortableTableHeaderButton);
  type metadata accessor for _ConditionalContent<_ConditionalContent<TupleView<(ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>>)>>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>>(0, &lazy cache variable for type metadata for _ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>.Storage, type metadata accessor for SortableTableHeaderButton, type metadata accessor for StaticTableHeaderButton, MEMORY[0x1E4F40568]);
  swift_storeEnumTagMultiPayload();
  char v21 = type metadata accessor for SortableTableHeaderButton;
  uint64_t v22 = (uint64_t)v15;
  return outlined destroy of Binding<[SwiftUIAnySortComparator]>(v22, v21);
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance TableHeaderViewCore()
{
  return static ModifiedContent<>._viewListCount(inputs:)();
}

uint64_t SortableTableHeaderButton.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v38 = a1;
  uint64_t v3 = type metadata accessor for SortableTableHeaderButton(0);
  uint64_t v4 = v3 - 8;
  uint64_t v5 = *(void *)(v3 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  MEMORY[0x1F4188790](v3);
  uint64_t v7 = (char *)&v31 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Button<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _PaddingLayout>, _FlexFrameLayout>>();
  uint64_t v9 = v8 - 8;
  MEMORY[0x1F4188790](v8);
  uint64_t v11 = (_WORD *)((char *)&v31 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  type metadata accessor for ModifiedContent<Button<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _PaddingLayout>, _FlexFrameLayout>>, AccessibilityAttachmentModifier>(0);
  MEMORY[0x1F4188790](v12 - 8);
  uint64_t v14 = (char *)&v31 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _PaddingLayout>, _FlexFrameLayout>>, AccessibilityAttachmentModifier>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>>();
  MEMORY[0x1F4188790](v15 - 8);
  uint64_t v17 = (char *)&v31 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v37 = type metadata accessor for SortableTableHeaderButton;
  outlined init with copy of Button<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _PaddingLayout>, _FlexFrameLayout>>(v2, (uint64_t)v7, type metadata accessor for SortableTableHeaderButton);
  uint64_t v18 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v19 = (v18 + 16) & ~v18;
  uint64_t v35 = v18 | 7;
  uint64_t v36 = v19 + v6;
  uint64_t v20 = swift_allocObject();
  char v34 = type metadata accessor for SortableTableHeaderButton;
  outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<_ConditionalContent<_ConditionalContent<TupleView<(ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>>)>>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>>>, _PaddingLayout>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Int?>>, StyleContextWriter<TableStyleContext>>((uint64_t)v7, v20 + v19, type metadata accessor for SortableTableHeaderButton);
  *uint64_t v11 = 256;
  char v21 = (void *)((char *)v11 + *(int *)(v9 + 44));
  *char v21 = partial apply for closure #1 in SortableTableHeaderButton.sortableButton.getter;
  v21[1] = v20;
  uint64_t v33 = type metadata accessor for ButtonAction();
  swift_storeEnumTagMultiPayload();
  uint64_t v22 = v32;
  closure #2 in SortableTableHeaderButton.sortableButton.getter(v32, (uint64_t)v11 + *(int *)(v9 + 48));
  uint64_t v23 = *(int *)(v4 + 36);
  v39[0] = *(void *)(v22 + v23);
  char v40 = 3;
  specialized View.accessibilityTableContext(_:)((uint64_t)v39, (uint64_t)v14);
  outlined destroy of AccessibilityTableContext?((uint64_t)v39, &lazy cache variable for type metadata for AccessibilityTableContext?, (uint64_t)&type metadata for AccessibilityTableContext);
  outlined destroy of Binding<[SwiftUIAnySortComparator]>((uint64_t)v11, (uint64_t (*)(void))type metadata accessor for Button<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _PaddingLayout>, _FlexFrameLayout>>);
  outlined init with copy of Button<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _PaddingLayout>, _FlexFrameLayout>>((uint64_t)v14, (uint64_t)v17, (uint64_t (*)(void))type metadata accessor for ModifiedContent<Button<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _PaddingLayout>, _FlexFrameLayout>>, AccessibilityAttachmentModifier>);
  outlined destroy of Binding<[SwiftUIAnySortComparator]>((uint64_t)v14, (uint64_t (*)(void))type metadata accessor for ModifiedContent<Button<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _PaddingLayout>, _FlexFrameLayout>>, AccessibilityAttachmentModifier>);
  uint64_t v24 = (uint64_t)v17;
  uint64_t v25 = v38;
  outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<_ConditionalContent<_ConditionalContent<TupleView<(ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>>)>>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>>>, _PaddingLayout>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Int?>>, StyleContextWriter<TableStyleContext>>(v24, v38, (uint64_t (*)(void))type metadata accessor for ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _PaddingLayout>, _FlexFrameLayout>>, AccessibilityAttachmentModifier>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>>);
  type metadata accessor for StaticIf<IsVisionEnabledPredicate, ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _PaddingLayout>, _FlexFrameLayout>>, AccessibilityAttachmentModifier>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>>, ModifiedContent<Button<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _PaddingLayout>, _FlexFrameLayout>>, AccessibilityAttachmentModifier>>();
  uint64_t v27 = v25 + *(int *)(v26 + 52);
  outlined init with copy of Button<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _PaddingLayout>, _FlexFrameLayout>>(v22, (uint64_t)v7, v37);
  uint64_t v28 = swift_allocObject();
  outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<_ConditionalContent<_ConditionalContent<TupleView<(ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>>)>>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>>>, _PaddingLayout>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Int?>>, StyleContextWriter<TableStyleContext>>((uint64_t)v7, v28 + v19, v34);
  *uint64_t v11 = 256;
  uint64_t v29 = (void *)((char *)v11 + *(int *)(v9 + 44));
  *uint64_t v29 = partial apply for closure #1 in SortableTableHeaderButton.sortableButton.getter;
  v29[1] = v28;
  swift_storeEnumTagMultiPayload();
  closure #2 in SortableTableHeaderButton.sortableButton.getter(v22, (uint64_t)v11 + *(int *)(v9 + 48));
  v39[0] = *(void *)(v22 + v23);
  char v40 = 3;
  specialized View.accessibilityTableContext(_:)((uint64_t)v39, (uint64_t)v14);
  outlined destroy of AccessibilityTableContext?((uint64_t)v39, &lazy cache variable for type metadata for AccessibilityTableContext?, (uint64_t)&type metadata for AccessibilityTableContext);
  outlined destroy of Binding<[SwiftUIAnySortComparator]>((uint64_t)v11, (uint64_t (*)(void))type metadata accessor for Button<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _PaddingLayout>, _FlexFrameLayout>>);
  return outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<_ConditionalContent<_ConditionalContent<TupleView<(ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>>)>>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>>>, _PaddingLayout>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Int?>>, StyleContextWriter<TableStyleContext>>((uint64_t)v14, v27, (uint64_t (*)(void))type metadata accessor for ModifiedContent<Button<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _PaddingLayout>, _FlexFrameLayout>>, AccessibilityAttachmentModifier>);
}

uint64_t closure #1 in SortableTableHeaderButton.sortableButton.getter(uint64_t a1)
{
  uint64_t v2 = (uint64_t *)(a1 + *(int *)(type metadata accessor for SortableTableHeaderButton(0) + 24));
  uint64_t v3 = *v2;
  uint64_t v4 = v2[1];
  uint64_t v5 = v2[2];
  uint64_t v6 = type metadata accessor for TableColumnCollection.Entry(0);
  uint64_t result = outlined init with copy of SwiftUIAnySortComparator?(a1 + *(int *)(v6 + 44), (uint64_t)v8, (unint64_t *)&lazy cache variable for type metadata for SwiftUIAnySortComparator?, (uint64_t)&type metadata for SwiftUIAnySortComparator);
  if (v9)
  {
    sort(_:comparator:)(v3, v4, v5, (uint64_t)v8);
    return outlined destroy of SwiftUIAnySortComparator((uint64_t)v8);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sort(_:comparator:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void (*v12)(long long *__return_ptr, long long *, BOOL);
  BOOL v13;
  unint64_t v14;
  char v15;
  char v16;
  uint64_t v17;
  char v18;
  void (*v19)(long long *__return_ptr, long long *, BOOL);
  BOOL v20;
  char v21;
  char v22;
  _OWORD v23[2];
  _OWORD v24[5];
  uint64_t v25;
  unsigned char v26[32];
  uint64_t v27;
  long long v28;
  long long v29;
  _OWORD v30[3];
  long long v31;
  long long v32;
  uint64_t v33;
  long long v34;
  long long v35;
  long long v36;
  long long v37;
  long long v38;
  long long v39;
  long long v40;
  uint64_t v41;
  void v42[15];
  long long v43;
  long long v44;
  long long v45;
  long long v46;
  long long v47;
  long long v48;
  long long v49;
  uint64_t v50;
  void v51[3];

  if (a2)
  {
    uint64_t v7 = result;
    *(void *)&uint64_t v28 = result;
    *((void *)&v28 + 1) = a2;
    *(void *)&uint64_t v29 = a3;
    type metadata accessor for Binding<[SwiftUIAnySortComparator]>();
    uint64_t v9 = v8;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    MEMORY[0x18C113DA0](v51, v9);
    if (*(void *)(v51[0] + 16))
    {
      outlined init with copy of SwiftUIAnySortComparator(v51[0] + 32, (uint64_t)&v43);
    }
    else
    {
      char v50 = 0;
      uint64_t v48 = 0u;
      uint64_t v49 = 0u;
      char v46 = 0u;
      uint64_t v47 = 0u;
      char v44 = 0u;
      uint64_t v45 = 0u;
      uint64_t v43 = 0u;
    }
    swift_bridgeObjectRelease();
    outlined init with copy of SwiftUIAnySortComparator(a4, (uint64_t)v42);
    outlined init with copy of SwiftUIAnySortComparator?((uint64_t)&v43, (uint64_t)&v28, (unint64_t *)&lazy cache variable for type metadata for SwiftUIAnySortComparator?, (uint64_t)&type metadata for SwiftUIAnySortComparator);
    outlined init with copy of SwiftUIAnySortComparator?((uint64_t)v42, (uint64_t)&v34, (unint64_t *)&lazy cache variable for type metadata for SwiftUIAnySortComparator?, (uint64_t)&type metadata for SwiftUIAnySortComparator);
    if (*((void *)&v29 + 1))
    {
      outlined init with copy of SwiftUIAnySortComparator?((uint64_t)&v28, (uint64_t)v26, (unint64_t *)&lazy cache variable for type metadata for SwiftUIAnySortComparator?, (uint64_t)&type metadata for SwiftUIAnySortComparator);
      if (*((void *)&v35 + 1))
      {
        uint64_t v24[2] = v38;
        v24[3] = v39;
        v24[4] = v40;
        uint64_t v25 = v41;
        v23[0] = v34;
        v23[1] = v35;
        v24[0] = v36;
        v24[1] = v37;
        char v10 = MEMORY[0x18C1174E0](&v27, v24);
        outlined destroy of SwiftUIAnySortComparator((uint64_t)v23);
        outlined destroy of AccessibilityTableContext?((uint64_t)v42, (unint64_t *)&lazy cache variable for type metadata for SwiftUIAnySortComparator?, (uint64_t)&type metadata for SwiftUIAnySortComparator);
        outlined destroy of AccessibilityTableContext?((uint64_t)&v43, (unint64_t *)&lazy cache variable for type metadata for SwiftUIAnySortComparator?, (uint64_t)&type metadata for SwiftUIAnySortComparator);
        outlined destroy of SwiftUIAnySortComparator((uint64_t)v26);
        outlined destroy of AccessibilityTableContext?((uint64_t)&v28, (unint64_t *)&lazy cache variable for type metadata for SwiftUIAnySortComparator?, (uint64_t)&type metadata for SwiftUIAnySortComparator);
        if ((v10 & 1) == 0)
        {
LABEL_14:
          *(void *)&uint64_t v28 = v7;
          *((void *)&v28 + 1) = a2;
          *(void *)&uint64_t v29 = a3;
          MEMORY[0x18C113DA0](&v43, v9);
          uint64_t v14 = specialized Collection<>.firstIndex(of:)(a4, v43);
          uint64_t v16 = v15;
          swift_bridgeObjectRelease();
          if ((v16 & 1) == 0) {
            goto LABEL_16;
          }
          *(void *)&uint64_t v28 = v7;
          *((void *)&v28 + 1) = a2;
          *(void *)&uint64_t v29 = a3;
          MEMORY[0x18C113DA0](v42, v9);
          uint64_t v17 = v42[0];
          outlined init with copy of SwiftUIAnySortComparator(a4, (uint64_t)&v28);
          uint64_t v18 = (*(uint64_t (**)(uint64_t))(a4 + 104))(a4);
          uint64_t v19 = (void (*)(long long *__return_ptr, long long *, BOOL))*((void *)&v31 + 1);
          uint64_t v20 = (v18 & 1) == 0;
          swift_retain();
          v19(&v43, &v28, v20);
          swift_release();
          outlined assign with take of AnyHashable((uint64_t)&v43, (uint64_t)v30);
          uint64_t v14 = specialized Collection<>.firstIndex(of:)((uint64_t)&v28, v17);
          uint64_t v22 = v21;
          outlined destroy of SwiftUIAnySortComparator((uint64_t)&v28);
          swift_bridgeObjectRelease();
          if ((v22 & 1) == 0)
          {
LABEL_16:
            *(void *)&uint64_t v28 = v7;
            *((void *)&v28 + 1) = a2;
            *(void *)&uint64_t v29 = a3;
            MEMORY[0x18C113DA0](&v43, v9);
            specialized Array.remove(at:)(v14, (uint64_t)&v28);
            outlined destroy of SwiftUIAnySortComparator((uint64_t)&v28);
            v42[0] = v43;
            swift_retain();
            swift_bridgeObjectRetain();
            swift_retain();
            dispatch thunk of AnyLocation.set(_:transaction:)();
            swift_bridgeObjectRelease();
            swift_release();
            swift_release();
            swift_bridgeObjectRelease();
          }
          *(void *)&uint64_t v28 = v7;
          *((void *)&v28 + 1) = a2;
          *(void *)&uint64_t v29 = a3;
          MEMORY[0x18C113DA0](&v43, v9);
          outlined init with copy of SwiftUIAnySortComparator(a4, (uint64_t)&v28);
          specialized Array.replaceSubrange<A>(_:with:)(0, 0, (uint64_t)&v28);
          *(void *)&uint64_t v28 = v43;
          swift_retain();
          swift_bridgeObjectRetain();
          swift_retain();
          goto LABEL_18;
        }
LABEL_11:
        *(void *)&uint64_t v28 = v7;
        *((void *)&v28 + 1) = a2;
        *(void *)&uint64_t v29 = a3;
        MEMORY[0x18C113DA0](&v43, v9);
        specialized Array.remove(at:)(0, (uint64_t)&v28);
        outlined destroy of SwiftUIAnySortComparator((uint64_t)&v28);
        v42[0] = v43;
        swift_retain();
        swift_bridgeObjectRetain();
        swift_retain();
        dispatch thunk of AnyLocation.set(_:transaction:)();
        swift_bridgeObjectRelease();
        swift_release();
        swift_release();
        swift_bridgeObjectRelease();
        outlined init with copy of SwiftUIAnySortComparator(a4, (uint64_t)&v28);
        char v11 = (*(uint64_t (**)(uint64_t))(a4 + 104))(a4);
        uint64_t v12 = (void (*)(long long *__return_ptr, long long *, BOOL))*((void *)&v31 + 1);
        uint64_t v13 = (v11 & 1) == 0;
        swift_retain();
        v12(&v43, &v28, v13);
        swift_release();
        outlined assign with take of AnyHashable((uint64_t)&v43, (uint64_t)v30);
        *(void *)&uint64_t v43 = v7;
        *((void *)&v43 + 1) = a2;
        *(void *)&char v44 = a3;
        MEMORY[0x18C113DA0](v42, v9);
        uint64_t v47 = v30[2];
        uint64_t v48 = v31;
        uint64_t v49 = v32;
        char v50 = v33;
        uint64_t v43 = v28;
        char v44 = v29;
        uint64_t v45 = v30[0];
        char v46 = v30[1];
        specialized Array.replaceSubrange<A>(_:with:)(0, 0, (uint64_t)&v43);
        *(void *)&uint64_t v43 = v42[0];
        swift_retain();
        swift_bridgeObjectRetain();
        swift_retain();
LABEL_18:
        dispatch thunk of AnyLocation.set(_:transaction:)();
        swift_bridgeObjectRelease_n();
        swift_release_n();
        swift_release_n();
        return swift_bridgeObjectRelease();
      }
      outlined destroy of AccessibilityTableContext?((uint64_t)v42, (unint64_t *)&lazy cache variable for type metadata for SwiftUIAnySortComparator?, (uint64_t)&type metadata for SwiftUIAnySortComparator);
      outlined destroy of AccessibilityTableContext?((uint64_t)&v43, (unint64_t *)&lazy cache variable for type metadata for SwiftUIAnySortComparator?, (uint64_t)&type metadata for SwiftUIAnySortComparator);
      outlined destroy of SwiftUIAnySortComparator((uint64_t)v26);
    }
    else
    {
      outlined destroy of AccessibilityTableContext?((uint64_t)v42, (unint64_t *)&lazy cache variable for type metadata for SwiftUIAnySortComparator?, (uint64_t)&type metadata for SwiftUIAnySortComparator);
      outlined destroy of AccessibilityTableContext?((uint64_t)&v43, (unint64_t *)&lazy cache variable for type metadata for SwiftUIAnySortComparator?, (uint64_t)&type metadata for SwiftUIAnySortComparator);
      if (!*((void *)&v35 + 1))
      {
        outlined destroy of AccessibilityTableContext?((uint64_t)&v28, (unint64_t *)&lazy cache variable for type metadata for SwiftUIAnySortComparator?, (uint64_t)&type metadata for SwiftUIAnySortComparator);
        goto LABEL_11;
      }
    }
    outlined destroy of Binding<[SwiftUIAnySortComparator]>((uint64_t)&v28, (uint64_t (*)(void))type metadata accessor for (SwiftUIAnySortComparator?, SwiftUIAnySortComparator?));
    goto LABEL_14;
  }
  return result;
}

__n128 closure #2 in SortableTableHeaderButton.sortableButton.getter@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = static VerticalAlignment.center.getter();
  closure #1 in closure #2 in SortableTableHeaderButton.sortableButton.getter(a1, (uint64_t)&v28);
  long long v5 = v28;
  uint64_t v6 = v29;
  char v7 = BYTE8(v29);
  uint64_t KeyPath = swift_getKeyPath();
  type metadata accessor for SortableTableHeaderButton(0);
  EdgeInsets.init(_all:)();
  uint64_t v43 = v4;
  uint64_t v44 = 0;
  char v45 = 1;
  long long v46 = v5;
  uint64_t v47 = v6;
  char v48 = v7;
  uint64_t v49 = KeyPath;
  char v50 = 0;
  char v51 = 2;
  uint64_t v52 = v9;
  uint64_t v53 = v10;
  uint64_t v54 = v11;
  uint64_t v55 = v12;
  char v56 = 0;
  uint64_t v13 = type metadata accessor for TableColumnCollection.Entry(0);
  uint64_t v14 = a1 + *(int *)(v13 + 28);
  double v16 = *(double *)v14;
  uint64_t v15 = *(void *)(v14 + 8);
  double v18 = *(double *)(v14 + 16);
  double v17 = *(double *)(v14 + 24);
  char v19 = *(unsigned char *)(v14 + 32);
  if (!*(unsigned char *)(a1 + *(int *)(v13 + 36)))
  {
    static Alignment.leading.getter();
    if ((v19 & 1) == 0) {
      goto LABEL_6;
    }
LABEL_8:
    double v17 = 0.0;
    double v16 = 0.0;
    double v18 = 0.0;
    char v20 = 1;
    goto LABEL_9;
  }
  if (*(unsigned char *)(a1 + *(int *)(v13 + 36)) != 1)
  {
    static Alignment.trailing.getter();
    if ((v19 & 1) == 0) {
      goto LABEL_6;
    }
    goto LABEL_8;
  }
  static Alignment.center.getter();
  if (v19) {
    goto LABEL_8;
  }
LABEL_6:
  char v20 = v15 & 1;
LABEL_9:
  specialized View.frame(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)(v18, v19, v16, v20, v17, v19, 0.0, 1, (uint64_t)&v28, 0.0, 1, 0.0, 1);
  swift_release();
  outlined consume of _ConditionalContent<Image, Image>?(v6, v7);
  swift_release();
  long long v21 = v41;
  *(_OWORD *)(a2 + 192) = v40;
  *(_OWORD *)(a2 + 208) = v21;
  *(void *)(a2 + 224) = v42;
  long long v22 = v37;
  *(_OWORD *)(a2 + 128) = v36;
  *(_OWORD *)(a2 + 144) = v22;
  long long v23 = v39;
  *(_OWORD *)(a2 + 160) = v38;
  *(_OWORD *)(a2 + 176) = v23;
  long long v24 = v33;
  *(_OWORD *)(a2 + 64) = v32;
  *(_OWORD *)(a2 + 80) = v24;
  long long v25 = v35;
  *(_OWORD *)(a2 + 96) = v34;
  *(_OWORD *)(a2 + 112) = v25;
  long long v26 = v29;
  *(_OWORD *)a2 = v28;
  *(_OWORD *)(a2 + 16) = v26;
  __n128 result = v31;
  *(_OWORD *)(a2 + 32) = v30;
  *(__n128 *)(a2 + 48) = result;
  return result;
}

uint64_t closure #1 in closure #2 in SortableTableHeaderButton.sortableButton.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  void (*v17)(uint64_t *__return_ptr, _OWORD *, BOOL);
  BOOL v18;
  char v19;
  long long v20;
  long long v21;
  long long v22;
  long long v23;
  long long v24;
  long long v25;
  long long v26;
  uint64_t v27;
  unsigned char v28[32];
  unsigned char v29[88];
  uint64_t v30;
  long long v31;
  uint64_t v32;
  long long v33;
  long long v34;
  long long v35;
  long long v36;
  long long v37;
  long long v38;
  long long v39;
  uint64_t v40;
  long long v41;
  long long v42;
  long long v43;
  long long v44;
  long long v45;
  long long v46;
  long long v47;
  uint64_t v48;
  _OWORD v49[2];
  _OWORD v50[3];
  long long v51;
  long long v52;
  uint64_t v53;
  long long v54;
  long long v55;
  long long v56;
  long long v57;
  long long v58;
  long long v59;
  long long v60;
  uint64_t v61;
  uint64_t v62;

  uint64_t v4 = type metadata accessor for TableColumnCollection.Entry(0);
  uint64_t v5 = *(void *)(a1 + *(int *)(v4 + 48));
  uint64_t v6 = (uint64_t *)(a1 + *(int *)(type metadata accessor for SortableTableHeaderButton(0) + 24));
  long long v30 = *v6;
  __n128 v31 = *(_OWORD *)(v6 + 1);
  type metadata accessor for Binding<[SwiftUIAnySortComparator]>();
  uint64_t v8 = v7;
  swift_retain();
  MEMORY[0x18C113DA0](&v62, v8);
  if (*(void *)(v62 + 16))
  {
    outlined init with copy of SwiftUIAnySortComparator(v62 + 32, (uint64_t)&v54);
  }
  else
  {
    uint64_t v61 = 0;
    uint64_t v59 = 0u;
    uint64_t v60 = 0u;
    uint64_t v57 = 0u;
    uint64_t v58 = 0u;
    uint64_t v55 = 0u;
    char v56 = 0u;
    uint64_t v54 = 0u;
  }
  swift_bridgeObjectRelease();
  uint64_t v9 = a1 + *(int *)(v4 + 44);
  uint64_t result = outlined init with copy of SwiftUIAnySortComparator?(v9, (uint64_t)&v41, (unint64_t *)&lazy cache variable for type metadata for SwiftUIAnySortComparator?, (uint64_t)&type metadata for SwiftUIAnySortComparator);
  if (!*((void *)&v42 + 1))
  {
    __break(1u);
    goto LABEL_31;
  }
  v50[2] = v45;
  char v51 = v46;
  uint64_t v52 = v47;
  uint64_t v53 = v48;
  v49[0] = v41;
  v49[1] = v42;
  v50[0] = v43;
  v50[1] = v44;
  outlined init with copy of SwiftUIAnySortComparator?((uint64_t)&v54, (uint64_t)&v30, (unint64_t *)&lazy cache variable for type metadata for SwiftUIAnySortComparator?, (uint64_t)&type metadata for SwiftUIAnySortComparator);
  outlined init with copy of SwiftUIAnySortComparator?((uint64_t)v49, (uint64_t)&v33, (unint64_t *)&lazy cache variable for type metadata for SwiftUIAnySortComparator?, (uint64_t)&type metadata for SwiftUIAnySortComparator);
  if (!v32)
  {
    outlined destroy of AccessibilityTableContext?((uint64_t)v49, (unint64_t *)&lazy cache variable for type metadata for SwiftUIAnySortComparator?, (uint64_t)&type metadata for SwiftUIAnySortComparator);
    outlined destroy of AccessibilityTableContext?((uint64_t)&v54, (unint64_t *)&lazy cache variable for type metadata for SwiftUIAnySortComparator?, (uint64_t)&type metadata for SwiftUIAnySortComparator);
    if (!*((void *)&v34 + 1))
    {
      outlined destroy of AccessibilityTableContext?((uint64_t)&v30, (unint64_t *)&lazy cache variable for type metadata for SwiftUIAnySortComparator?, (uint64_t)&type metadata for SwiftUIAnySortComparator);
      goto LABEL_11;
    }
LABEL_13:
    outlined destroy of Binding<[SwiftUIAnySortComparator]>((uint64_t)&v30, (uint64_t (*)(void))type metadata accessor for (SwiftUIAnySortComparator?, SwiftUIAnySortComparator?));
    goto LABEL_14;
  }
  outlined init with copy of SwiftUIAnySortComparator?((uint64_t)&v30, (uint64_t)v28, (unint64_t *)&lazy cache variable for type metadata for SwiftUIAnySortComparator?, (uint64_t)&type metadata for SwiftUIAnySortComparator);
  if (!*((void *)&v34 + 1))
  {
    outlined destroy of AccessibilityTableContext?((uint64_t)v49, (unint64_t *)&lazy cache variable for type metadata for SwiftUIAnySortComparator?, (uint64_t)&type metadata for SwiftUIAnySortComparator);
    outlined destroy of AccessibilityTableContext?((uint64_t)&v54, (unint64_t *)&lazy cache variable for type metadata for SwiftUIAnySortComparator?, (uint64_t)&type metadata for SwiftUIAnySortComparator);
    outlined destroy of SwiftUIAnySortComparator((uint64_t)v28);
    goto LABEL_13;
  }
  long long v24 = v37;
  long long v25 = v38;
  long long v26 = v39;
  uint64_t v27 = v40;
  char v20 = v33;
  long long v21 = v34;
  long long v22 = v35;
  long long v23 = v36;
  char v11 = MEMORY[0x18C1174E0](v29, &v22);
  outlined destroy of SwiftUIAnySortComparator((uint64_t)&v20);
  outlined destroy of AccessibilityTableContext?((uint64_t)v49, (unint64_t *)&lazy cache variable for type metadata for SwiftUIAnySortComparator?, (uint64_t)&type metadata for SwiftUIAnySortComparator);
  outlined destroy of AccessibilityTableContext?((uint64_t)&v54, (unint64_t *)&lazy cache variable for type metadata for SwiftUIAnySortComparator?, (uint64_t)&type metadata for SwiftUIAnySortComparator);
  outlined destroy of SwiftUIAnySortComparator((uint64_t)v28);
  outlined destroy of AccessibilityTableContext?((uint64_t)&v30, (unint64_t *)&lazy cache variable for type metadata for SwiftUIAnySortComparator?, (uint64_t)&type metadata for SwiftUIAnySortComparator);
  if (v11)
  {
LABEL_11:
    type metadata accessor for VStack<TableHeaderViewCore>(0, (unint64_t *)&lazy cache variable for type metadata for ImageProviderBox<Image.NamedImageProvider>, (uint64_t (*)(void))lazy protocol witness table accessor for type Image.NamedImageProvider and conformance Image.NamedImageProvider, MEMORY[0x1E4F41508], MEMORY[0x1E4F3FCE0]);
    uint64_t v12 = swift_allocObject();
    uint64_t v13 = v12;
    char v14 = 0;
    *(void *)(v12 + 16) = 0x2E6E6F7276656863;
    *(void *)(v12 + 24) = 0xEA00000000007075;
    *(unsigned char *)(v12 + 36) = 1;
    *(_OWORD *)(v12 + 40) = xmmword_18834C6B0;
    *(_OWORD *)(v12 + 56) = xmmword_18834C6E0;
    long long v15 = xmmword_18834C6D0;
    *(_DWORD *)(v12 + 32) = 0;
LABEL_25:
    *(_OWORD *)(v12 + 72) = v15;
    *(unsigned char *)(v12 + 88) = 0;
LABEL_29:
    *(void *)a2 = v5;
    *(void *)(a2 + 8) = 0x3FF0000000000000;
    *(void *)(a2 + 16) = v13;
    *(unsigned char *)(a2 + 24) = v14;
    swift_retain();
    outlined copy of _ConditionalContent<Image, Image>?(v13, v14);
    outlined consume of _ConditionalContent<Image, Image>?(v13, v14);
    return swift_release();
  }
LABEL_14:
  long long v30 = *v6;
  __n128 v31 = *(_OWORD *)(v6 + 1);
  MEMORY[0x18C113DA0](&v62, v8);
  if (*(void *)(v62 + 16))
  {
    outlined init with copy of SwiftUIAnySortComparator(v62 + 32, (uint64_t)&v54);
  }
  else
  {
    uint64_t v61 = 0;
    uint64_t v59 = 0u;
    uint64_t v60 = 0u;
    uint64_t v57 = 0u;
    uint64_t v58 = 0u;
    uint64_t v55 = 0u;
    char v56 = 0u;
    uint64_t v54 = 0u;
  }
  swift_bridgeObjectRelease();
  uint64_t result = outlined init with copy of SwiftUIAnySortComparator?(v9, (uint64_t)&v41, (unint64_t *)&lazy cache variable for type metadata for SwiftUIAnySortComparator?, (uint64_t)&type metadata for SwiftUIAnySortComparator);
  if (*((void *)&v42 + 1))
  {
    outlined init with copy of SwiftUIAnySortComparator((uint64_t)&v41, (uint64_t)v49);
    char v16 = (*((uint64_t (**)(long long *))&v47 + 1))(&v41);
    double v17 = (void (*)(uint64_t *__return_ptr, _OWORD *, BOOL))*((void *)&v51 + 1);
    double v18 = (v16 & 1) == 0;
    swift_retain();
    v17(&v30, v49, v18);
    swift_release();
    outlined assign with take of AnyHashable((uint64_t)&v30, (uint64_t)v50);
    outlined destroy of SwiftUIAnySortComparator((uint64_t)&v41);
    outlined init with copy of SwiftUIAnySortComparator?((uint64_t)&v54, (uint64_t)&v30, (unint64_t *)&lazy cache variable for type metadata for SwiftUIAnySortComparator?, (uint64_t)&type metadata for SwiftUIAnySortComparator);
    outlined init with copy of SwiftUIAnySortComparator?((uint64_t)v49, (uint64_t)&v33, (unint64_t *)&lazy cache variable for type metadata for SwiftUIAnySortComparator?, (uint64_t)&type metadata for SwiftUIAnySortComparator);
    if (v32)
    {
      outlined init with copy of SwiftUIAnySortComparator?((uint64_t)&v30, (uint64_t)v28, (unint64_t *)&lazy cache variable for type metadata for SwiftUIAnySortComparator?, (uint64_t)&type metadata for SwiftUIAnySortComparator);
      if (*((void *)&v34 + 1))
      {
        long long v24 = v37;
        long long v25 = v38;
        long long v26 = v39;
        uint64_t v27 = v40;
        char v20 = v33;
        long long v21 = v34;
        long long v22 = v35;
        long long v23 = v36;
        char v19 = MEMORY[0x18C1174E0](v29, &v22);
        outlined destroy of SwiftUIAnySortComparator((uint64_t)&v20);
        outlined destroy of AccessibilityTableContext?((uint64_t)v49, (unint64_t *)&lazy cache variable for type metadata for SwiftUIAnySortComparator?, (uint64_t)&type metadata for SwiftUIAnySortComparator);
        outlined destroy of AccessibilityTableContext?((uint64_t)&v54, (unint64_t *)&lazy cache variable for type metadata for SwiftUIAnySortComparator?, (uint64_t)&type metadata for SwiftUIAnySortComparator);
        outlined destroy of SwiftUIAnySortComparator((uint64_t)v28);
        outlined destroy of AccessibilityTableContext?((uint64_t)&v30, (unint64_t *)&lazy cache variable for type metadata for SwiftUIAnySortComparator?, (uint64_t)&type metadata for SwiftUIAnySortComparator);
        if ((v19 & 1) == 0) {
          goto LABEL_28;
        }
        goto LABEL_24;
      }
      outlined destroy of AccessibilityTableContext?((uint64_t)v49, (unint64_t *)&lazy cache variable for type metadata for SwiftUIAnySortComparator?, (uint64_t)&type metadata for SwiftUIAnySortComparator);
      outlined destroy of AccessibilityTableContext?((uint64_t)&v54, (unint64_t *)&lazy cache variable for type metadata for SwiftUIAnySortComparator?, (uint64_t)&type metadata for SwiftUIAnySortComparator);
      outlined destroy of SwiftUIAnySortComparator((uint64_t)v28);
    }
    else
    {
      outlined destroy of AccessibilityTableContext?((uint64_t)v49, (unint64_t *)&lazy cache variable for type metadata for SwiftUIAnySortComparator?, (uint64_t)&type metadata for SwiftUIAnySortComparator);
      outlined destroy of AccessibilityTableContext?((uint64_t)&v54, (unint64_t *)&lazy cache variable for type metadata for SwiftUIAnySortComparator?, (uint64_t)&type metadata for SwiftUIAnySortComparator);
      if (!*((void *)&v34 + 1))
      {
        outlined destroy of AccessibilityTableContext?((uint64_t)&v30, (unint64_t *)&lazy cache variable for type metadata for SwiftUIAnySortComparator?, (uint64_t)&type metadata for SwiftUIAnySortComparator);
LABEL_24:
        type metadata accessor for VStack<TableHeaderViewCore>(0, (unint64_t *)&lazy cache variable for type metadata for ImageProviderBox<Image.NamedImageProvider>, (uint64_t (*)(void))lazy protocol witness table accessor for type Image.NamedImageProvider and conformance Image.NamedImageProvider, MEMORY[0x1E4F41508], MEMORY[0x1E4F3FCE0]);
        uint64_t v12 = swift_allocObject();
        uint64_t v13 = v12;
        strcpy((char *)(v12 + 16), "chevron.down");
        *(unsigned char *)(v12 + 29) = 0;
        *(_WORD *)(v12 + 30) = -5120;
        *(_DWORD *)(v12 + 32) = 0;
        char v14 = 1;
        *(unsigned char *)(v12 + 36) = 1;
        *(_OWORD *)(v12 + 40) = xmmword_18834C6B0;
        *(_OWORD *)(v12 + 56) = xmmword_18834C6C0;
        long long v15 = xmmword_18834C6D0;
        goto LABEL_25;
      }
    }
    outlined destroy of Binding<[SwiftUIAnySortComparator]>((uint64_t)&v30, (uint64_t (*)(void))type metadata accessor for (SwiftUIAnySortComparator?, SwiftUIAnySortComparator?));
LABEL_28:
    uint64_t v13 = 0;
    char v14 = -1;
    goto LABEL_29;
  }
LABEL_31:
  __break(1u);
  return result;
}

void specialized View.accessibilityTableContext(_:)(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  if (*(unsigned __int8 *)(a1 + 40) == 255)
  {
    type metadata accessor for AnyAccessibilityPropertiesEntry();
    v16[0] = Dictionary.init(minimumCapacity:)();
    AccessibilityAttachment.init(properties:)();
    uint64_t v11 = v19;
    type metadata accessor for [SwiftUIAnySortComparator](0, (unint64_t *)&lazy cache variable for type metadata for MutableBox<AccessibilityAttachment>, MEMORY[0x1E4F40A58], MEMORY[0x1E4F3F398]);
    uint64_t v12 = swift_allocObject();
    *(void *)(v12 + 16) = v18;
    *(void *)(v12 + 24) = v11;
    outlined init with copy of Button<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _PaddingLayout>, _FlexFrameLayout>>(v3, a2, (uint64_t (*)(void))type metadata accessor for Button<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _PaddingLayout>, _FlexFrameLayout>>);
    type metadata accessor for ModifiedContent<Button<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _PaddingLayout>, _FlexFrameLayout>>, AccessibilityAttachmentModifier>(0);
    uint64_t v10 = (uint64_t *)(a2 + *(int *)(v13 + 36));
    *uint64_t v10 = v12;
    goto LABEL_5;
  }
  outlined init with copy of SwiftUIAnySortComparator?(a1, (uint64_t)v16, &lazy cache variable for type metadata for AccessibilityTableContext?, (uint64_t)&type metadata for AccessibilityTableContext);
  if (v17 != 255)
  {
    outlined init with take of AccessibilityTableContext((uint64_t)v16, (uint64_t)&v18);
    type metadata accessor for AnyAccessibilityPropertiesEntry();
    uint64_t v15 = Dictionary.init(minimumCapacity:)();
    type metadata accessor for _EnvironmentKeyWritingModifier<Font?>(0, (unint64_t *)&lazy cache variable for type metadata for AccessibilityPropertiesEntry<AccessibilityTableContext?>, &lazy cache variable for type metadata for AccessibilityTableContext?, (uint64_t)&type metadata for AccessibilityTableContext, MEMORY[0x1E4F41090]);
    v14[3] = v5;
    v14[4] = lazy protocol witness table accessor for type AccessibilityPropertiesEntry<AccessibilityTableContext?> and conformance AccessibilityPropertiesEntry<A>();
    v14[0] = swift_allocObject();
    outlined init with copy of SwiftUIAnySortComparator?((uint64_t)&v18, v14[0] + 16, &lazy cache variable for type metadata for AccessibilityTableContext?, (uint64_t)&type metadata for AccessibilityTableContext);
    specialized Dictionary.subscript.setter((uint64_t)v14, (uint64_t)&type metadata for AccessibilityProperties.TableContextKey);
    outlined destroy of AccessibilityTableContext?((uint64_t)&v18, &lazy cache variable for type metadata for AccessibilityTableContext?, (uint64_t)&type metadata for AccessibilityTableContext);
    v16[0] = v15;
    static AccessibilityAttachment.properties(_:)();
    uint64_t v6 = v18;
    uint64_t v7 = v19;
    type metadata accessor for [SwiftUIAnySortComparator](0, (unint64_t *)&lazy cache variable for type metadata for MutableBox<AccessibilityAttachment>, MEMORY[0x1E4F40A58], MEMORY[0x1E4F3F398]);
    uint64_t v8 = swift_allocObject();
    *(void *)(v8 + 16) = v6;
    *(void *)(v8 + 24) = v7;
    outlined init with copy of Button<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _PaddingLayout>, _FlexFrameLayout>>(v2, a2, (uint64_t (*)(void))type metadata accessor for Button<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _PaddingLayout>, _FlexFrameLayout>>);
    swift_bridgeObjectRelease();
    type metadata accessor for ModifiedContent<Button<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _PaddingLayout>, _FlexFrameLayout>>, AccessibilityAttachmentModifier>(0);
    uint64_t v10 = (uint64_t *)(a2 + *(int *)(v9 + 36));
    *uint64_t v10 = v8;
LABEL_5:
    v10[1] = 0;
    return;
  }
  __break(1u);
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance SortableTableHeaderButton()
{
  return static StaticIf<>._viewListCount(inputs:)();
}

uint64_t StaticTableHeaderButton.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = static VerticalAlignment.center.getter();
  uint64_t v4 = (int *)type metadata accessor for TableColumnCollection.Entry(0);
  uint64_t v5 = *(void *)(v1 + v4[12]);
  swift_retain();
  uint64_t v6 = AnyShapeStyle.init<A>(_:)();
  uint64_t v32 = type metadata accessor for StaticTableHeaderButton(0);
  EdgeInsets.init(_all:)();
  uint64_t v54 = v3;
  uint64_t v55 = 0;
  char v56 = 1;
  uint64_t v57 = v5;
  uint64_t v58 = v6;
  char v59 = 2;
  uint64_t v60 = v7;
  uint64_t v61 = v8;
  uint64_t v62 = v9;
  uint64_t v63 = v10;
  char v64 = 0;
  uint64_t v11 = v1 + v4[7];
  double v13 = *(double *)v11;
  uint64_t v12 = *(void *)(v11 + 8);
  double v15 = *(double *)(v11 + 16);
  double v14 = *(double *)(v11 + 24);
  char v16 = *(unsigned char *)(v11 + 32);
  if (*(unsigned char *)(v1 + v4[9]))
  {
    if (*(unsigned char *)(v1 + v4[9]) == 1) {
      static Alignment.center.getter();
    }
    else {
      static Alignment.trailing.getter();
    }
  }
  else
  {
    static Alignment.leading.getter();
  }
  if (v16) {
    double v17 = 0.0;
  }
  else {
    double v17 = v14;
  }
  if (v16) {
    double v18 = 0.0;
  }
  else {
    double v18 = v13;
  }
  if (v16) {
    char v19 = 1;
  }
  else {
    char v19 = v12 & 1;
  }
  if (v16) {
    double v20 = 0.0;
  }
  else {
    double v20 = v15;
  }
  specialized View.frame(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)(v20, v16, v18, v19, v17, v16, 0.0, 1, (uint64_t)v38, 0.0, 1, 0.0, 1);
  swift_release();
  swift_release();
  type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for AccessibilityChildBehaviorBox<AccessibilityChildBehavior.Combine>, (uint64_t (*)(void))lazy protocol witness table accessor for type AccessibilityChildBehavior.Combine and conformance AccessibilityChildBehavior.Combine, (uint64_t)&type metadata for AccessibilityChildBehavior.Combine, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AccessibilityChildBehaviorBox);
  uint64_t v21 = swift_allocObject();
  *(unsigned char *)(v21 + 16) = 0;
  type metadata accessor for AnyAccessibilityPropertiesEntry();
  swift_retain();
  uint64_t v36 = Dictionary.init(minimumCapacity:)();
  static AccessibilityAttachment.properties(_:)();
  swift_bridgeObjectRelease();
  long long v22 = v40;
  type metadata accessor for [SwiftUIAnySortComparator](0, (unint64_t *)&lazy cache variable for type metadata for MutableBox<AccessibilityAttachment>, MEMORY[0x1E4F40A58], MEMORY[0x1E4F3F398]);
  uint64_t v23 = swift_allocObject();
  *(_OWORD *)(v23 + 16) = v22;
  outlined retain of ModifiedContent<ModifiedContent<ModifiedContent<HStack<AnyView>, _DefaultForegroundStyleModifier<AnyShapeStyle>>, _PaddingLayout>, _FlexFrameLayout>((uint64_t)v38);
  swift_release();
  long long v50 = v38[10];
  long long v51 = v38[11];
  long long v46 = v38[6];
  long long v47 = v38[7];
  long long v48 = v38[8];
  long long v49 = v38[9];
  long long v42 = v38[2];
  long long v43 = v38[3];
  long long v44 = v38[4];
  long long v45 = v38[5];
  long long v40 = v38[0];
  long long v41 = v38[1];
  *(void *)&long long v52 = v39;
  *((void *)&v52 + 1) = v23;
  uint64_t v53 = v21;
  AccessibilityTraitSet.init(traits:)();
  swift_beginAccess();
  swift_retain();
  swift_retain();
  specialized closure #1 in ModifiedContent<>.update<A>(_:combining:isEnabled:)(v23 + 16);
  swift_endAccess();
  swift_release();
  swift_release();
  uint64_t v24 = dword_1ED466160;
  swift_beginAccess();
  swift_retain();
  swift_retain();
  specialized closure #1 in ModifiedContent<>.update<A>(_:combining:isEnabled:)(v23 + 16, v24 | (v24 << 32));
  swift_endAccess();
  swift_release();
  swift_release();
  outlined release of ModifiedContent<ModifiedContent<ModifiedContent<HStack<AnyView>, _DefaultForegroundStyleModifier<AnyShapeStyle>>, _PaddingLayout>, _FlexFrameLayout>((uint64_t)v38);
  uint64_t v36 = *(void *)(v1 + *(int *)(v32 + 24));
  char v37 = 3;
  uint64_t result = outlined init with copy of SwiftUIAnySortComparator?((uint64_t)&v36, (uint64_t)v34, &lazy cache variable for type metadata for AccessibilityTableContext?, (uint64_t)&type metadata for AccessibilityTableContext);
  if (v34[40] == 255)
  {
    __break(1u);
  }
  else
  {
    outlined init with take of AccessibilityTableContext((uint64_t)v34, (uint64_t)v35);
    swift_beginAccess();
    outlined init with copy of SwiftUIAnySortComparator?((uint64_t)v35, (uint64_t)&v33, &lazy cache variable for type metadata for AccessibilityTableContext?, (uint64_t)&type metadata for AccessibilityTableContext);
    swift_retain();
    swift_retain();
    specialized AccessibilityProperties.subscript.setter((uint64_t)&v33);
    swift_endAccess();
    swift_release();
    swift_release();
    outlined retain of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<AnyView>, _DefaultForegroundStyleModifier<AnyShapeStyle>>, _PaddingLayout>, _FlexFrameLayout>, AccessibilityAttachmentModifier>((uint64_t)&v40);
    outlined destroy of AccessibilityTableContext?((uint64_t)v35, &lazy cache variable for type metadata for AccessibilityTableContext?, (uint64_t)&type metadata for AccessibilityTableContext);
    outlined destroy of AccessibilityTableContext?((uint64_t)&v36, &lazy cache variable for type metadata for AccessibilityTableContext?, (uint64_t)&type metadata for AccessibilityTableContext);
    uint64_t result = outlined release of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<AnyView>, _DefaultForegroundStyleModifier<AnyShapeStyle>>, _PaddingLayout>, _FlexFrameLayout>, AccessibilityAttachmentModifier>((uint64_t)&v40);
    long long v26 = v51;
    *(_OWORD *)(a1 + 160) = v50;
    *(_OWORD *)(a1 + 176) = v26;
    *(_OWORD *)(a1 + 192) = v52;
    *(void *)(a1 + 208) = v53;
    long long v27 = v47;
    *(_OWORD *)(a1 + 96) = v46;
    *(_OWORD *)(a1 + 112) = v27;
    long long v28 = v49;
    *(_OWORD *)(a1 + 128) = v48;
    *(_OWORD *)(a1 + 144) = v28;
    long long v29 = v43;
    *(_OWORD *)(a1 + 32) = v42;
    *(_OWORD *)(a1 + 48) = v29;
    long long v30 = v45;
    *(_OWORD *)(a1 + 64) = v44;
    *(_OWORD *)(a1 + 80) = v30;
    long long v31 = v41;
    *(_OWORD *)a1 = v40;
    *(_OWORD *)(a1 + 16) = v31;
  }
  return result;
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance StaticTableHeaderButton()
{
  return static ModifiedContent<>._viewListCount(inputs:)();
}

uint64_t TableSectionHeaderView.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *(void *)(v1 + 48);
  unint64_t v4 = *(void *)(v1 + 16);
  char v5 = *(unsigned char *)(v1 + 24);
  swift_retain();
  outlined copy of Environment<Bool>.Content(v4, v5);
  specialized Environment.wrappedValue.getter(v4, v5);
  outlined consume of Environment<Bool>.Content(v4, v5);
  uint64_t v6 = *(void *)v1;
  char v7 = *(unsigned char *)(v1 + 8);
  outlined copy of Environment<Bool>.Content(v6, v7);
  specialized Environment.wrappedValue.getter(v6, v7);
  outlined consume of Environment<Bool>.Content(v6, v7);
  EdgeInsets.init(_all:)();
  uint64_t v9 = v8;
  uint64_t v11 = v10;
  uint64_t v13 = v12;
  uint64_t v15 = v14;
  uint64_t v24 = 0;
  memset(v23, 0, sizeof(v23));
  char v25 = 4;
  memset(v22, 0, 40);
  v22[40] = -1;
  outlined init with take of AccessibilityTableContext((uint64_t)v23, (uint64_t)&v26);
  outlined destroy of AccessibilityTableContext?((uint64_t)v22, &lazy cache variable for type metadata for AccessibilityTableContext?, (uint64_t)&type metadata for AccessibilityTableContext);
  outlined init with take of AccessibilityTableContext((uint64_t)&v26, (uint64_t)v22);
  long long v26 = *(_OWORD *)v22;
  *(_OWORD *)long long v27 = *(_OWORD *)&v22[16];
  *(_OWORD *)&v27[9] = *(_OWORD *)&v22[25];
  type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for AccessibilityChildBehaviorBox<AccessibilityChildBehavior.Combine>, (uint64_t (*)(void))lazy protocol witness table accessor for type AccessibilityChildBehavior.Combine and conformance AccessibilityChildBehavior.Combine, (uint64_t)&type metadata for AccessibilityChildBehavior.Combine, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AccessibilityChildBehaviorBox);
  uint64_t v16 = swift_allocObject();
  *(unsigned char *)(v16 + 16) = 0;
  type metadata accessor for AnyAccessibilityPropertiesEntry();
  swift_retain();
  *(void *)long long v22 = Dictionary.init(minimumCapacity:)();
  static AccessibilityAttachment.properties(_:)();
  swift_bridgeObjectRelease();
  long long v17 = v23[0];
  type metadata accessor for [SwiftUIAnySortComparator](0, (unint64_t *)&lazy cache variable for type metadata for MutableBox<AccessibilityAttachment>, MEMORY[0x1E4F40A58], MEMORY[0x1E4F3F398]);
  uint64_t v18 = swift_allocObject();
  *(_OWORD *)(v18 + 16) = v17;
  swift_retain();
  swift_release();
  AccessibilityTraitSet.init(traits:)();
  swift_beginAccess();
  swift_retain();
  swift_retain();
  specialized closure #1 in ModifiedContent<>.update<A>(_:combining:isEnabled:)(v18 + 16);
  swift_endAccess();
  swift_release();
  swift_release();
  uint64_t v19 = dword_1ED466070;
  swift_beginAccess();
  swift_retain();
  swift_retain();
  specialized closure #1 in ModifiedContent<>.update<A>(_:combining:isEnabled:)(v18 + 16, v19 | (v19 << 32));
  swift_endAccess();
  swift_release();
  swift_release();
  if (v27[24] == 255) {
    goto LABEL_4;
  }
  uint64_t result = outlined init with copy of SwiftUIAnySortComparator?((uint64_t)&v26, (uint64_t)v22, &lazy cache variable for type metadata for AccessibilityTableContext?, (uint64_t)&type metadata for AccessibilityTableContext);
  if (v22[40] != 255)
  {
    outlined init with take of AccessibilityTableContext((uint64_t)v22, (uint64_t)v23);
    swift_beginAccess();
    outlined init with copy of SwiftUIAnySortComparator?((uint64_t)v23, (uint64_t)v21, &lazy cache variable for type metadata for AccessibilityTableContext?, (uint64_t)&type metadata for AccessibilityTableContext);
    swift_retain();
    swift_retain();
    specialized AccessibilityProperties.subscript.setter((uint64_t)v21);
    swift_endAccess();
    swift_release();
    swift_release();
    outlined destroy of AccessibilityTableContext?((uint64_t)v23, &lazy cache variable for type metadata for AccessibilityTableContext?, (uint64_t)&type metadata for AccessibilityTableContext);
LABEL_4:
    outlined destroy of Binding<[SwiftUIAnySortComparator]>((uint64_t)&v26, (uint64_t (*)(void))type metadata accessor for AccessibilityTableCellModifier<ModifiedContent<AnyView, _PaddingLayout>>);
    uint64_t result = swift_release();
    *(void *)a1 = v3;
    *(unsigned char *)(a1 + 8) = 2;
    *(void *)(a1 + 16) = v9;
    *(void *)(a1 + 24) = v11;
    *(void *)(a1 + 32) = v13;
    *(void *)(a1 + 40) = v15;
    *(unsigned char *)(a1 + 48) = 0;
    *(void *)(a1 + 56) = v18;
    *(void *)(a1 + 64) = v16;
    return result;
  }
  __break(1u);
  return result;
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance TableSectionHeaderView()
{
  return static ModifiedContent<>._viewListCount(inputs:)();
}

double EnvironmentValues.tableHeaderLeadingMargin.getter()
{
  if (*(void *)(v0 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<TableHeaderLeadingMarginKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<TableHeaderLeadingMarginKey>, (uint64_t)&type metadata for TableHeaderLeadingMarginKey, (uint64_t)&protocol witness table for TableHeaderLeadingMarginKey, MEMORY[0x1E4F40930]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<TableHeaderLeadingMarginKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<TableHeaderLeadingMarginKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<TableHeaderLeadingMarginKey>, (uint64_t)&type metadata for TableHeaderLeadingMarginKey, (uint64_t)&protocol witness table for TableHeaderLeadingMarginKey, MEMORY[0x1E4F40930]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<TableHeaderLeadingMarginKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  return v2;
}

uint64_t EnvironmentValues.tableHeaderLeadingMargin.setter()
{
  type metadata accessor for EnvironmentPropertyKey<TableHeaderLeadingMarginKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<TableHeaderLeadingMarginKey>, (uint64_t)&type metadata for TableHeaderLeadingMarginKey, (uint64_t)&protocol witness table for TableHeaderLeadingMarginKey, MEMORY[0x1E4F40930]);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<TableHeaderLeadingMarginKey> and conformance EnvironmentPropertyKey<A>();
  swift_retain();
  PropertyList.subscript.setter();
  if (*(void *)(v0 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  return swift_release();
}

BOOL protocol witness for static EnvironmentKey._valuesEqual(_:_:) in conformance TableHeaderLeadingMarginKey(double *a1, double *a2)
{
  return *a1 == *a2;
}

__n128 closure #1 in TableHeaderLabelStyle.makeBody(configuration:)@<Q0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  char v5 = a2 & 1;
  outlined copy of Environment<Bool>.Content(a1, a2 & 1);
  char v6 = specialized Environment.wrappedValue.getter(a1, v5);
  outlined consume of Environment<Bool>.Content(a1, v5);
  if ((v6 & 1) == 0) {
    LODWORD(v8) = 1;
  }
  AnyShapeStyle.init<A>(_:)();
  static Font.Weight.regular.getter();
  type metadata accessor for ModifiedContent<LabelStyleConfiguration.Icon, _DefaultForegroundStyleModifier<AnyShapeStyle>>();
  lazy protocol witness table accessor for type ModifiedContent<LabelStyleConfiguration.Icon, _DefaultForegroundStyleModifier<AnyShapeStyle>> and conformance <> ModifiedContent<A, B>();
  View.fontWeight(_:)();
  swift_release();
  __n128 result = v9;
  *(void *)a3 = v8;
  *(__n128 *)(a3 + 8) = v9;
  *(void *)(a3 + 24) = v10;
  return result;
}

__n128 protocol witness for LabelStyle.makeBody(configuration:) in conformance TableHeaderLabelStyle@<Q0>(__n128 *a1@<X8>)
{
  uint64_t v3 = *(void *)v1;
  char v4 = *(unsigned char *)(v1 + 8);
  uint64_t v5 = *(void *)(v1 + 16);
  uint64_t v6 = *(unsigned __int8 *)(v1 + 24);
  int v7 = *(unsigned __int8 *)(v1 + 25);
  uint64_t v8 = static VerticalAlignment.firstTextLineCenter.getter();
  outlined copy of Environment<CGFloat?>.Content(v5, v6, v7);
  uint64_t v9 = specialized Environment.wrappedValue.getter(v5, v6 | (v7 << 8));
  char v11 = v10;
  outlined consume of Environment<CGFloat?>.Content(v5, v6, v7);
  if (v11) {
    uint64_t v9 = 0x4024000000000000;
  }
  LOBYTE(v15) = v4;
  closure #1 in TableHeaderLabelStyle.makeBody(configuration:)(v3, v4, (uint64_t)&v15);
  unint64_t v12 = v15;
  unint64_t v13 = v17;
  __n128 result = v16;
  a1->n128_u64[0] = v8;
  a1->n128_u64[1] = v9;
  a1[1].n128_u8[0] = 0;
  a1[1].n128_u64[1] = v12;
  a1[2] = result;
  a1[3].n128_u64[0] = v13;
  return result;
}

void key path getter for EnvironmentValues.tableHeaderLeadingMargin : EnvironmentValues(double *a1@<X8>)
{
  *a1 = EnvironmentValues.tableHeaderLeadingMargin.getter();
}

void sub_1876B89DC(double *a1@<X8>)
{
  *a1 = EnvironmentValues.tableHeaderLeadingMargin.getter();
}

uint64_t key path setter for EnvironmentValues.tableHeaderLeadingMargin : EnvironmentValues()
{
  return EnvironmentValues.tableHeaderLeadingMargin.setter();
}

uint64_t sub_1876B8A40()
{
  return EnvironmentValues.tableHeaderLeadingMargin.setter();
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<TableHeaderLeadingMarginKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<TableHeaderLeadingMarginKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<TableHeaderLeadingMarginKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<TableHeaderLeadingMarginKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<TableHeaderLeadingMarginKey>, (uint64_t)&type metadata for TableHeaderLeadingMarginKey, (uint64_t)&protocol witness table for TableHeaderLeadingMarginKey, MEMORY[0x1E4F40930]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<TableHeaderLeadingMarginKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

uint64_t outlined init with copy of SwiftUIAnySortComparator(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t outlined destroy of AccessibilityTableContext?(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  type metadata accessor for [SwiftUIAnySortComparator](0, a2, a3, MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  return a1;
}

void type metadata accessor for (SwiftUIAnySortComparator?, SwiftUIAnySortComparator?)()
{
  if (!lazy cache variable for type metadata for (SwiftUIAnySortComparator?, SwiftUIAnySortComparator?))
  {
    type metadata accessor for [SwiftUIAnySortComparator](255, (unint64_t *)&lazy cache variable for type metadata for SwiftUIAnySortComparator?, (uint64_t)&type metadata for SwiftUIAnySortComparator, MEMORY[0x1E4FBB718]);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (SwiftUIAnySortComparator?, SwiftUIAnySortComparator?));
    }
  }
}

uint64_t outlined assign with take of AnyHashable(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t outlined destroy of SwiftUIAnySortComparator(uint64_t a1)
{
  return a1;
}

ValueMetadata *type metadata accessor for TableHeaderLeadingMarginKey()
{
  return &type metadata for TableHeaderLeadingMarginKey;
}

uint64_t destroy for TableHeaderViewCore(uint64_t a1)
{
  outlined consume of Environment<Bool>.Content(*(void *)a1, *(unsigned char *)(a1 + 8));
  outlined consume of Environment<Bool>.Content(*(void *)(a1 + 16), *(unsigned char *)(a1 + 24));
  if (*(void *)(a1 + 40))
  {
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
  }
  if ((*(unsigned char *)(a1 + 96) & 1) == 0) {
    return __swift_destroy_boxed_opaque_existential_1(a1 + 56);
  }

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for TableHeaderViewCore(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  char v5 = *(unsigned char *)(a2 + 8);
  outlined copy of Environment<Bool>.Content(*(void *)a2, v5);
  *(void *)a1 = v4;
  *(unsigned char *)(a1 + 8) = v5;
  uint64_t v6 = *(void *)(a2 + 16);
  char v7 = *(unsigned char *)(a2 + 24);
  outlined copy of Environment<Bool>.Content(v6, v7);
  *(void *)(a1 + 16) = v6;
  *(unsigned char *)(a1 + 24) = v7;
  uint64_t v8 = *(void *)(a2 + 40);
  if (v8)
  {
    *(void *)(a1 + 32) = *(void *)(a2 + 32);
    *(void *)(a1 + 40) = v8;
    *(void *)(a1 + 48) = *(void *)(a2 + 48);
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
  }
  else
  {
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(void *)(a1 + 48) = *(void *)(a2 + 48);
  }
  uint64_t v9 = (void *)(a1 + 56);
  char v10 = (void *)(a2 + 56);
  char v11 = *(unsigned char *)(a2 + 96);
  if (v11)
  {
    *uint64_t v9 = *v10;
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v12 = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 80) = v12;
    (**(void (***)(void *, void *))(v12 - 8))(v9, v10);
  }
  *(unsigned char *)(a1 + 96) = v11;
  *(_WORD *)(a1 + 97) = *(_WORD *)(a2 + 97);
  return a1;
}

uint64_t assignWithCopy for TableHeaderViewCore(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  char v5 = *(unsigned char *)(a2 + 8);
  outlined copy of Environment<Bool>.Content(*(void *)a2, v5);
  uint64_t v6 = *(void *)a1;
  char v7 = *(unsigned char *)(a1 + 8);
  *(void *)a1 = v4;
  *(unsigned char *)(a1 + 8) = v5;
  outlined consume of Environment<Bool>.Content(v6, v7);
  uint64_t v8 = *(void *)(a2 + 16);
  char v9 = *(unsigned char *)(a2 + 24);
  outlined copy of Environment<Bool>.Content(v8, v9);
  uint64_t v10 = *(void *)(a1 + 16);
  char v11 = *(unsigned char *)(a1 + 24);
  *(void *)(a1 + 16) = v8;
  *(unsigned char *)(a1 + 24) = v9;
  outlined consume of Environment<Bool>.Content(v10, v11);
  long long v12 = (_OWORD *)(a1 + 32);
  unint64_t v13 = (_OWORD *)(a2 + 32);
  uint64_t v14 = *(void *)(a2 + 40);
  if (*(void *)(a1 + 40))
  {
    if (v14)
    {
      *(void *)(a1 + 32) = *(void *)(a2 + 32);
      swift_retain();
      swift_release();
      *(void *)(a1 + 40) = *(void *)(a2 + 40);
      swift_retain();
      swift_release();
      *(void *)(a1 + 48) = *(void *)(a2 + 48);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      if (a1 == a2) {
        goto LABEL_14;
      }
    }
    else
    {
      outlined destroy of Binding<[SwiftUIAnySortComparator]>(a1 + 32, (uint64_t (*)(void))type metadata accessor for Binding<[SwiftUIAnySortComparator]>);
      uint64_t v15 = *(void *)(a2 + 48);
      *long long v12 = *v13;
      *(void *)(a1 + 48) = v15;
      if (a1 == a2) {
        goto LABEL_14;
      }
    }
  }
  else if (v14)
  {
    *(void *)(a1 + 32) = *(void *)(a2 + 32);
    *(void *)(a1 + 40) = *(void *)(a2 + 40);
    *(void *)(a1 + 48) = *(void *)(a2 + 48);
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    if (a1 == a2) {
      goto LABEL_14;
    }
  }
  else
  {
    long long v16 = *v13;
    *(void *)(a1 + 48) = *(void *)(a2 + 48);
    *long long v12 = v16;
    if (a1 == a2) {
      goto LABEL_14;
    }
  }
  outlined destroy of TableColumnCollection.Backing(a1 + 56);
  if (*(unsigned char *)(a2 + 96))
  {
    *(void *)(a1 + 56) = *(void *)(a2 + 56);
    *(unsigned char *)(a1 + 96) = 1;
    swift_bridgeObjectRetain();
  }
  else
  {
    uint64_t v17 = *(void *)(a2 + 80);
    *(void *)(a1 + 80) = v17;
    *(void *)(a1 + 88) = *(void *)(a2 + 88);
    (**(void (***)(uint64_t, uint64_t))(v17 - 8))(a1 + 56, a2 + 56);
    *(unsigned char *)(a1 + 96) = 0;
  }
LABEL_14:
  *(unsigned char *)(a1 + 97) = *(unsigned char *)(a2 + 97);
  *(unsigned char *)(a1 + 98) = *(unsigned char *)(a2 + 98);
  return a1;
}

__n128 __swift_memcpy99_8(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  long long v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  __n128 result = (__n128)a2[3];
  long long v5 = a2[4];
  long long v6 = a2[5];
  *(_DWORD *)(a1 + 95) = *(_DWORD *)((char *)a2 + 95);
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  *(__n128 *)(a1 + 48) = result;
  return result;
}

uint64_t assignWithTake for TableHeaderViewCore(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  char v5 = *((unsigned char *)a2 + 8);
  uint64_t v6 = *(void *)a1;
  char v7 = *(unsigned char *)(a1 + 8);
  *(void *)a1 = v4;
  *(unsigned char *)(a1 + 8) = v5;
  outlined consume of Environment<Bool>.Content(v6, v7);
  char v8 = *((unsigned char *)a2 + 24);
  uint64_t v9 = *(void *)(a1 + 16);
  char v10 = *(unsigned char *)(a1 + 24);
  *(void *)(a1 + 16) = a2[2];
  *(unsigned char *)(a1 + 24) = v8;
  outlined consume of Environment<Bool>.Content(v9, v10);
  if (*(void *)(a1 + 40))
  {
    uint64_t v11 = a2[5];
    if (v11)
    {
      *(void *)(a1 + 32) = a2[4];
      swift_release();
      *(void *)(a1 + 40) = v11;
      swift_release();
      *(void *)(a1 + 48) = a2[6];
      swift_bridgeObjectRelease();
      if ((uint64_t *)a1 == a2) {
        goto LABEL_8;
      }
      goto LABEL_7;
    }
    outlined destroy of Binding<[SwiftUIAnySortComparator]>(a1 + 32, (uint64_t (*)(void))type metadata accessor for Binding<[SwiftUIAnySortComparator]>);
  }
  *(_OWORD *)(a1 + 32) = *((_OWORD *)a2 + 2);
  *(void *)(a1 + 48) = a2[6];
  if ((uint64_t *)a1 != a2)
  {
LABEL_7:
    outlined destroy of TableColumnCollection.Backing(a1 + 56);
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 7);
    *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 9);
    *(_OWORD *)(a1 + 81) = *(_OWORD *)((char *)a2 + 81);
  }
LABEL_8:
  *(unsigned char *)(a1 + 97) = *((unsigned char *)a2 + 97);
  *(unsigned char *)(a1 + 98) = *((unsigned char *)a2 + 98);
  return a1;
}

uint64_t getEnumTagSinglePayload for TableHeaderViewCore(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 99)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 40);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for TableHeaderViewCore(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 88) = 0;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 98) = 0;
    *(_WORD *)(result + 96) = 0;
    *(void *)__n128 result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 99) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 99) = 0;
    }
    if (a2) {
      *(void *)(result + 40) = a2;
    }
  }
  return result;
}

void *type metadata accessor for TableHeaderViewCore()
{
  return &unk_1ED42E4F0;
}

uint64_t destroy for TableHeaderLabelStyle(uint64_t a1)
{
  outlined consume of Environment<Bool>.Content(*(void *)a1, *(unsigned char *)(a1 + 8));
  uint64_t v2 = *(void *)(a1 + 16);
  char v3 = *(unsigned char *)(a1 + 25);
  uint64_t v4 = *(unsigned __int8 *)(a1 + 24);

  return outlined consume of Environment<CGFloat?>.Content(v2, v4, v3);
}

uint64_t initializeWithCopy for TableHeaderLabelStyle(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  char v5 = *(unsigned char *)(a2 + 8);
  outlined copy of Environment<Bool>.Content(*(void *)a2, v5);
  *(void *)a1 = v4;
  *(unsigned char *)(a1 + 8) = v5;
  uint64_t v6 = *(void *)(a2 + 16);
  char v7 = *(unsigned char *)(a2 + 25);
  uint64_t v8 = *(unsigned __int8 *)(a2 + 24);
  outlined copy of Environment<CGFloat?>.Content(v6, v8, v7);
  *(void *)(a1 + 16) = v6;
  *(unsigned char *)(a1 + 24) = v8;
  *(unsigned char *)(a1 + 25) = v7;
  return a1;
}

uint64_t assignWithCopy for TableHeaderLabelStyle(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  char v5 = *(unsigned char *)(a2 + 8);
  outlined copy of Environment<Bool>.Content(*(void *)a2, v5);
  uint64_t v6 = *(void *)a1;
  char v7 = *(unsigned char *)(a1 + 8);
  *(void *)a1 = v4;
  *(unsigned char *)(a1 + 8) = v5;
  outlined consume of Environment<Bool>.Content(v6, v7);
  uint64_t v8 = *(void *)(a2 + 16);
  char v9 = *(unsigned char *)(a2 + 25);
  uint64_t v10 = *(unsigned __int8 *)(a2 + 24);
  outlined copy of Environment<CGFloat?>.Content(v8, v10, v9);
  uint64_t v11 = *(void *)(a1 + 16);
  char v12 = *(unsigned char *)(a1 + 25);
  *(void *)(a1 + 16) = v8;
  uint64_t v13 = *(unsigned __int8 *)(a1 + 24);
  *(unsigned char *)(a1 + 24) = v10;
  *(unsigned char *)(a1 + 25) = v9;
  outlined consume of Environment<CGFloat?>.Content(v11, v13, v12);
  return a1;
}

__n128 __swift_memcpy26_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  *(_OWORD *)(a1 + 10) = *(_OWORD *)(a2 + 10);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for TableHeaderLabelStyle(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  char v5 = *((unsigned char *)a2 + 8);
  uint64_t v6 = *(void *)a1;
  char v7 = *(unsigned char *)(a1 + 8);
  *(void *)a1 = v4;
  *(unsigned char *)(a1 + 8) = v5;
  outlined consume of Environment<Bool>.Content(v6, v7);
  char v8 = *((unsigned char *)a2 + 24);
  char v9 = *((unsigned char *)a2 + 25);
  uint64_t v10 = *(void *)(a1 + 16);
  char v11 = *(unsigned char *)(a1 + 25);
  *(void *)(a1 + 16) = a2[2];
  uint64_t v12 = *(unsigned __int8 *)(a1 + 24);
  *(unsigned char *)(a1 + 24) = v8;
  *(unsigned char *)(a1 + 25) = v9;
  outlined consume of Environment<CGFloat?>.Content(v10, v12, v11);
  return a1;
}

uint64_t getEnumTagSinglePayload for TableHeaderLabelStyle(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 26)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 8);
  if (v3 <= 1) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for TableHeaderLabelStyle(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(_WORD *)(result + 24) = 0;
    *(void *)__n128 result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 26) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 26) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 8) = -(char)a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for TableHeaderLabelStyle()
{
  return &type metadata for TableHeaderLabelStyle;
}

uint64_t destroy for TableSectionHeaderView(uint64_t a1)
{
  outlined consume of Environment<Bool>.Content(*(void *)a1, *(unsigned char *)(a1 + 8));
  outlined consume of Environment<Bool>.Content(*(void *)(a1 + 16), *(unsigned char *)(a1 + 24));
  outlined consume of Environment<Bool>.Content(*(void *)(a1 + 32), *(unsigned char *)(a1 + 40));

  return swift_release();
}

uint64_t initializeWithCopy for TableSectionHeaderView(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  char v5 = *(unsigned char *)(a2 + 8);
  outlined copy of Environment<Bool>.Content(*(void *)a2, v5);
  *(void *)a1 = v4;
  *(unsigned char *)(a1 + 8) = v5;
  uint64_t v6 = *(void *)(a2 + 16);
  char v7 = *(unsigned char *)(a2 + 24);
  outlined copy of Environment<Bool>.Content(v6, v7);
  *(void *)(a1 + 16) = v6;
  *(unsigned char *)(a1 + 24) = v7;
  uint64_t v8 = *(void *)(a2 + 32);
  char v9 = *(unsigned char *)(a2 + 40);
  outlined copy of Environment<Bool>.Content(v8, v9);
  *(void *)(a1 + 32) = v8;
  *(unsigned char *)(a1 + 40) = v9;
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for TableSectionHeaderView(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  char v5 = *(unsigned char *)(a2 + 8);
  outlined copy of Environment<Bool>.Content(*(void *)a2, v5);
  uint64_t v6 = *(void *)a1;
  char v7 = *(unsigned char *)(a1 + 8);
  *(void *)a1 = v4;
  *(unsigned char *)(a1 + 8) = v5;
  outlined consume of Environment<Bool>.Content(v6, v7);
  uint64_t v8 = *(void *)(a2 + 16);
  char v9 = *(unsigned char *)(a2 + 24);
  outlined copy of Environment<Bool>.Content(v8, v9);
  uint64_t v10 = *(void *)(a1 + 16);
  char v11 = *(unsigned char *)(a1 + 24);
  *(void *)(a1 + 16) = v8;
  *(unsigned char *)(a1 + 24) = v9;
  outlined consume of Environment<Bool>.Content(v10, v11);
  uint64_t v12 = *(void *)(a2 + 32);
  char v13 = *(unsigned char *)(a2 + 40);
  outlined copy of Environment<Bool>.Content(v12, v13);
  uint64_t v14 = *(void *)(a1 + 32);
  char v15 = *(unsigned char *)(a1 + 40);
  *(void *)(a1 + 32) = v12;
  *(unsigned char *)(a1 + 40) = v13;
  outlined consume of Environment<Bool>.Content(v14, v15);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_retain();
  swift_release();
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  return a1;
}

uint64_t assignWithTake for TableSectionHeaderView(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  char v5 = *((unsigned char *)a2 + 8);
  uint64_t v6 = *(void *)a1;
  char v7 = *(unsigned char *)(a1 + 8);
  *(void *)a1 = v4;
  *(unsigned char *)(a1 + 8) = v5;
  outlined consume of Environment<Bool>.Content(v6, v7);
  char v8 = *((unsigned char *)a2 + 24);
  uint64_t v9 = *(void *)(a1 + 16);
  char v10 = *(unsigned char *)(a1 + 24);
  *(void *)(a1 + 16) = a2[2];
  *(unsigned char *)(a1 + 24) = v8;
  outlined consume of Environment<Bool>.Content(v9, v10);
  char v11 = *((unsigned char *)a2 + 40);
  uint64_t v12 = *(void *)(a1 + 32);
  char v13 = *(unsigned char *)(a1 + 40);
  *(void *)(a1 + 32) = a2[4];
  *(unsigned char *)(a1 + 40) = v11;
  outlined consume of Environment<Bool>.Content(v12, v13);
  *(void *)(a1 + 48) = a2[6];
  swift_release();
  *(unsigned char *)(a1 + 56) = *((unsigned char *)a2 + 56);
  return a1;
}

uint64_t getEnumTagSinglePayload for TableSectionHeaderView(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 57)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 48);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for TableSectionHeaderView(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 56) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 57) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 48) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 57) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for TableSectionHeaderView()
{
  return &type metadata for TableSectionHeaderView;
}

unsigned char *storeEnumTagSinglePayload for TableHeaderView.ColumnDisplayMode(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *__n128 result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1876B98FCLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for TableHeaderView.ColumnDisplayMode()
{
  return &type metadata for TableHeaderView.ColumnDisplayMode;
}

unint64_t lazy protocol witness table accessor for type VStack<TableHeaderViewCore> and conformance VStack<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type VStack<TableHeaderViewCore> and conformance VStack<A>;
  if (!lazy protocol witness table cache variable for type VStack<TableHeaderViewCore> and conformance VStack<A>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for VStack<TableHeaderViewCore>, (uint64_t (*)(void))lazy protocol witness table accessor for type TableHeaderViewCore and conformance TableHeaderViewCore, (uint64_t)&unk_1ED42E4F0, MEMORY[0x1E4F415E8]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type VStack<TableHeaderViewCore> and conformance VStack<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type TableHeaderViewCore and conformance TableHeaderViewCore()
{
  unint64_t result = lazy protocol witness table cache variable for type TableHeaderViewCore and conformance TableHeaderViewCore;
  if (!lazy protocol witness table cache variable for type TableHeaderViewCore and conformance TableHeaderViewCore)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TableHeaderViewCore and conformance TableHeaderViewCore);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type TableHeaderView.ColumnDisplayMode and conformance TableHeaderView.ColumnDisplayMode()
{
  unint64_t result = lazy protocol witness table cache variable for type TableHeaderView.ColumnDisplayMode and conformance TableHeaderView.ColumnDisplayMode;
  if (!lazy protocol witness table cache variable for type TableHeaderView.ColumnDisplayMode and conformance TableHeaderView.ColumnDisplayMode)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TableHeaderView.ColumnDisplayMode and conformance TableHeaderView.ColumnDisplayMode);
  }
  return result;
}

uint64_t associated type witness table accessor for View.Body : View in TableHeaderViewCore()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for LabelStyle.Body : View in TableHeaderLabelStyle()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for View.Body : View in TableSectionHeaderView()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t outlined init with take of AccessibilityTableContext(uint64_t a1, uint64_t a2)
{
  return a2;
}

void type metadata accessor for AccessibilityTableCellModifier<ModifiedContent<AnyView, _PaddingLayout>>()
{
  if (!lazy cache variable for type metadata for AccessibilityTableCellModifier<ModifiedContent<AnyView, _PaddingLayout>>)
  {
    type metadata accessor for EnvironmentPropertyKey<TableHeaderLeadingMarginKey>(255, &lazy cache variable for type metadata for ModifiedContent<AnyView, _PaddingLayout>, MEMORY[0x1E4F41618], MEMORY[0x1E4F3FA80], MEMORY[0x1E4F3FBA0]);
    lazy protocol witness table accessor for type ModifiedContent<AnyView, _PaddingLayout> and conformance <> ModifiedContent<A, B>();
    unint64_t v0 = type metadata accessor for AccessibilityTableCellModifier();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for AccessibilityTableCellModifier<ModifiedContent<AnyView, _PaddingLayout>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<AnyView, _PaddingLayout> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<AnyView, _PaddingLayout> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<AnyView, _PaddingLayout> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for EnvironmentPropertyKey<TableHeaderLeadingMarginKey>(255, &lazy cache variable for type metadata for ModifiedContent<AnyView, _PaddingLayout>, MEMORY[0x1E4F41618], MEMORY[0x1E4F3FA80], MEMORY[0x1E4F3FBA0]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<AnyView, _PaddingLayout> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t outlined init with copy of SwiftUIAnySortComparator?(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t a4)
{
  type metadata accessor for [SwiftUIAnySortComparator](0, a3, a4, MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a2, a1, v6);
  return a2;
}

void type metadata accessor for ModifiedContent<LabelStyleConfiguration.Icon, _DefaultForegroundStyleModifier<AnyShapeStyle>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<LabelStyleConfiguration.Icon, _DefaultForegroundStyleModifier<AnyShapeStyle>>)
  {
    type metadata accessor for EnvironmentPropertyKey<TableHeaderLeadingMarginKey>(255, &lazy cache variable for type metadata for _DefaultForegroundStyleModifier<AnyShapeStyle>, MEMORY[0x1E4F3F700], MEMORY[0x1E4F3F6F8], MEMORY[0x1E4F41250]);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<LabelStyleConfiguration.Icon, _DefaultForegroundStyleModifier<AnyShapeStyle>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<LabelStyleConfiguration.Icon, _DefaultForegroundStyleModifier<AnyShapeStyle>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<LabelStyleConfiguration.Icon, _DefaultForegroundStyleModifier<AnyShapeStyle>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<LabelStyleConfiguration.Icon, _DefaultForegroundStyleModifier<AnyShapeStyle>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<LabelStyleConfiguration.Icon, _DefaultForegroundStyleModifier<AnyShapeStyle>>();
    lazy protocol witness table accessor for type _DefaultForegroundStyleModifier<AnyShapeStyle> and conformance _DefaultForegroundStyleModifier<A>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<LabelStyleConfiguration.Icon, _DefaultForegroundStyleModifier<AnyShapeStyle>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _DefaultForegroundStyleModifier<AnyShapeStyle> and conformance _DefaultForegroundStyleModifier<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type _DefaultForegroundStyleModifier<AnyShapeStyle> and conformance _DefaultForegroundStyleModifier<A>;
  if (!lazy protocol witness table cache variable for type _DefaultForegroundStyleModifier<AnyShapeStyle> and conformance _DefaultForegroundStyleModifier<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<TableHeaderLeadingMarginKey>(255, &lazy cache variable for type metadata for _DefaultForegroundStyleModifier<AnyShapeStyle>, MEMORY[0x1E4F3F700], MEMORY[0x1E4F3F6F8], MEMORY[0x1E4F41250]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _DefaultForegroundStyleModifier<AnyShapeStyle> and conformance _DefaultForegroundStyleModifier<A>);
  }
  return result;
}

void type metadata accessor for HStack<_ConditionalContent<_ConditionalContent<TupleView<(ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>>)>>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>>>()
{
  if (!lazy cache variable for type metadata for HStack<_ConditionalContent<_ConditionalContent<TupleView<(ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>>)>>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>>>)
  {
    type metadata accessor for _ConditionalContent<_ConditionalContent<TupleView<(ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>>)>>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>>(255, &lazy cache variable for type metadata for _ConditionalContent<_ConditionalContent<TupleView<(ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>>)>>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>>, (uint64_t (*)(uint64_t))type metadata accessor for _ConditionalContent<TupleView<(ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>>)>>, (uint64_t (*)(uint64_t))type metadata accessor for TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>, MEMORY[0x1E4F40578]);
    lazy protocol witness table accessor for type _ConditionalContent<_ConditionalContent<TupleView<(ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>>)>>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>> and conformance <> _ConditionalContent<A, B>();
    unint64_t v0 = type metadata accessor for HStack();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for HStack<_ConditionalContent<_ConditionalContent<TupleView<(ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>>)>>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>>>);
    }
  }
}

void type metadata accessor for _ConditionalContent<TupleView<(ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>>)>>(uint64_t a1)
{
}

void type metadata accessor for _ConditionalContent<_ConditionalContent<TupleView<(ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>>)>>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t), uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v9 = a3(255);
    uint64_t v10 = a4(255);
    unint64_t v11 = a5(a1, v9, v10);
    if (!v12) {
      atomic_store(v11, a2);
    }
  }
}

void type metadata accessor for TupleView<(ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>(uint64_t a1)
{
}

void type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

void type metadata accessor for (ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)()
{
  if (!lazy cache variable for type metadata for (ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>))
  {
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>, MEMORY[0x1E4FBB718]);
    type metadata accessor for ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>(255);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>));
    }
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>)
  {
    type metadata accessor for EnvironmentPropertyKey<TableHeaderLeadingMarginKey>(255, &lazy cache variable for type metadata for ModifiedContent<Color, _FlexFrameLayout>, MEMORY[0x1E4F414E0], MEMORY[0x1E4F3FE58], MEMORY[0x1E4F3FBA0]);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>);
    }
  }
}

void type metadata accessor for ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>(uint64_t a1)
{
}

unint64_t lazy protocol witness table accessor for type TableColumnCollection and conformance TableColumnCollection()
{
  unint64_t result = lazy protocol witness table cache variable for type TableColumnCollection and conformance TableColumnCollection;
  if (!lazy protocol witness table cache variable for type TableColumnCollection and conformance TableColumnCollection)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TableColumnCollection and conformance TableColumnCollection);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TableColumnCollection and conformance TableColumnCollection;
  if (!lazy protocol witness table cache variable for type TableColumnCollection and conformance TableColumnCollection)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TableColumnCollection and conformance TableColumnCollection);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TableColumnCollection and conformance TableColumnCollection;
  if (!lazy protocol witness table cache variable for type TableColumnCollection and conformance TableColumnCollection)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TableColumnCollection and conformance TableColumnCollection);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TableColumnCollection and conformance TableColumnCollection;
  if (!lazy protocol witness table cache variable for type TableColumnCollection and conformance TableColumnCollection)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TableColumnCollection and conformance TableColumnCollection);
  }
  return result;
}

void type metadata accessor for VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>()
{
  if (!lazy cache variable for type metadata for VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>)
  {
    type metadata accessor for _ConditionalContent<_ConditionalContent<TupleView<(ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>>)>>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>>(255, &lazy cache variable for type metadata for _ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>, type metadata accessor for SortableTableHeaderButton, type metadata accessor for StaticTableHeaderButton, MEMORY[0x1E4F40578]);
    lazy protocol witness table accessor for type _ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton> and conformance <> _ConditionalContent<A, B>();
    unint64_t v0 = type metadata accessor for VStack();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>);
    }
  }
}

uint64_t type metadata accessor for SortableTableHeaderButton(uint64_t a1)
{
  return type metadata accessor for SortableTableHeaderButton(a1, (uint64_t *)&type metadata singleton initialization cache for SortableTableHeaderButton);
}

uint64_t type metadata accessor for StaticTableHeaderButton(uint64_t a1)
{
  return type metadata accessor for SortableTableHeaderButton(a1, (uint64_t *)&type metadata singleton initialization cache for StaticTableHeaderButton);
}

unint64_t lazy protocol witness table accessor for type _ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton> and conformance <> _ConditionalContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type _ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton> and conformance <> _ConditionalContent<A, B>;
  if (!lazy protocol witness table cache variable for type _ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton> and conformance <> _ConditionalContent<A, B>)
  {
    type metadata accessor for _ConditionalContent<_ConditionalContent<TupleView<(ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>>)>>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>>(255, &lazy cache variable for type metadata for _ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>, type metadata accessor for SortableTableHeaderButton, type metadata accessor for StaticTableHeaderButton, MEMORY[0x1E4F40578]);
    lazy protocol witness table accessor for type Button<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _PaddingLayout>, _FlexFrameLayout>> and conformance Button<A>(&lazy protocol witness table cache variable for type SortableTableHeaderButton and conformance SortableTableHeaderButton, (void (*)(uint64_t))type metadata accessor for SortableTableHeaderButton);
    lazy protocol witness table accessor for type Button<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _PaddingLayout>, _FlexFrameLayout>> and conformance Button<A>(&lazy protocol witness table cache variable for type StaticTableHeaderButton and conformance StaticTableHeaderButton, (void (*)(uint64_t))type metadata accessor for StaticTableHeaderButton);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton> and conformance <> _ConditionalContent<A, B>);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type Button<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _PaddingLayout>, _FlexFrameLayout>> and conformance Button<A>(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Slice<TableColumnCollection> and conformance <> Slice<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type Slice<TableColumnCollection> and conformance <> Slice<A>;
  if (!lazy protocol witness table cache variable for type Slice<TableColumnCollection> and conformance <> Slice<A>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for Slice<TableColumnCollection>, (uint64_t (*)(void))lazy protocol witness table accessor for type TableColumnCollection and conformance TableColumnCollection, (uint64_t)&type metadata for TableColumnCollection, MEMORY[0x1E4FBC320]);
    lazy protocol witness table accessor for type TableColumnCollection and conformance TableColumnCollection();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Slice<TableColumnCollection> and conformance <> Slice<A>);
  }
  return result;
}

void type metadata accessor for TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>>)>(uint64_t a1)
{
}

void type metadata accessor for (VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>>)(uint64_t a1)
{
}

void type metadata accessor for VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?(uint64_t a1)
{
}

void type metadata accessor for ForEach<Slice<TableColumnCollection>, UUID, ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>>(uint64_t a1)
{
}

void type metadata accessor for ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for Slice<TableColumnCollection>, (uint64_t (*)(void))lazy protocol witness table accessor for type TableColumnCollection and conformance TableColumnCollection, (uint64_t)&type metadata for TableColumnCollection, MEMORY[0x1E4FBC320]);
    type metadata accessor for UUID();
    a3(255);
    lazy protocol witness table accessor for type Slice<TableColumnCollection> and conformance <> Slice<A>();
    lazy protocol witness table accessor for type Button<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _PaddingLayout>, _FlexFrameLayout>> and conformance Button<A>((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E4F27990]);
    unint64_t v5 = type metadata accessor for ForEach();
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

void type metadata accessor for TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>(uint64_t a1)
{
}

void type metadata accessor for (VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)(uint64_t a1)
{
}

unint64_t lazy protocol witness table accessor for type _ConditionalContent<_ConditionalContent<TupleView<(ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>>)>>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>> and conformance <> _ConditionalContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type _ConditionalContent<_ConditionalContent<TupleView<(ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>>)>>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>> and conformance <> _ConditionalContent<A, B>;
  if (!lazy protocol witness table cache variable for type _ConditionalContent<_ConditionalContent<TupleView<(ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>>)>>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>> and conformance <> _ConditionalContent<A, B>)
  {
    type metadata accessor for _ConditionalContent<_ConditionalContent<TupleView<(ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>>)>>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>>(255, &lazy cache variable for type metadata for _ConditionalContent<_ConditionalContent<TupleView<(ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>>)>>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>>, (uint64_t (*)(uint64_t))type metadata accessor for _ConditionalContent<TupleView<(ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>>)>>, (uint64_t (*)(uint64_t))type metadata accessor for TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>, MEMORY[0x1E4F40578]);
    lazy protocol witness table accessor for type _ConditionalContent<TupleView<(ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>>)>> and conformance <> _ConditionalContent<A, B>();
    lazy protocol witness table accessor for type Button<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _PaddingLayout>, _FlexFrameLayout>> and conformance Button<A>(&lazy protocol witness table cache variable for type TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)> and conformance TupleView<A>, type metadata accessor for TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ConditionalContent<_ConditionalContent<TupleView<(ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>>)>>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>> and conformance <> _ConditionalContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _ConditionalContent<TupleView<(ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>>)>> and conformance <> _ConditionalContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type _ConditionalContent<TupleView<(ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>>)>> and conformance <> _ConditionalContent<A, B>;
  if (!lazy protocol witness table cache variable for type _ConditionalContent<TupleView<(ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>>)>> and conformance <> _ConditionalContent<A, B>)
  {
    type metadata accessor for _ConditionalContent<TupleView<(ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>>)>>(255);
    lazy protocol witness table accessor for type Button<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _PaddingLayout>, _FlexFrameLayout>> and conformance Button<A>(&lazy protocol witness table cache variable for type TupleView<(ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)> and conformance TupleView<A>, type metadata accessor for TupleView<(ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>);
    lazy protocol witness table accessor for type Button<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _PaddingLayout>, _FlexFrameLayout>> and conformance Button<A>(&lazy protocol witness table cache variable for type TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>>)> and conformance TupleView<A>, type metadata accessor for TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>>)>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ConditionalContent<TupleView<(ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>>)>> and conformance <> _ConditionalContent<A, B>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<HStack<_ConditionalContent<_ConditionalContent<TupleView<(ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>>)>>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>>>, _PaddingLayout>(uint64_t a1)
{
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<AnyView>, _DefaultForegroundStyleModifier<AnyShapeStyle>>, _PaddingLayout>, _FlexFrameLayout>, AccessibilityAttachmentModifier>(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = type metadata accessor for ModifiedContent();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<HStack<_ConditionalContent<_ConditionalContent<TupleView<(ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>>)>>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>>>, _PaddingLayout>, _EnvironmentKeyWritingModifier<Font?>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<HStack<_ConditionalContent<_ConditionalContent<TupleView<(ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>>)>>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>>>, _PaddingLayout>, _EnvironmentKeyWritingModifier<Font?>>)
  {
    type metadata accessor for ModifiedContent<HStack<_ConditionalContent<_ConditionalContent<TupleView<(ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>>)>>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>>>, _PaddingLayout>(255);
    type metadata accessor for _EnvironmentKeyWritingModifier<Font?>(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Font?>, (unint64_t *)&lazy cache variable for type metadata for Font?, MEMORY[0x1E4F41390], MEMORY[0x1E4F411E8]);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<HStack<_ConditionalContent<_ConditionalContent<TupleView<(ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>>)>>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>>>, _PaddingLayout>, _EnvironmentKeyWritingModifier<Font?>>);
    }
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<HStack<_ConditionalContent<_ConditionalContent<TupleView<(ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>>)>>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>>>, _PaddingLayout>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Int?>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<HStack<_ConditionalContent<_ConditionalContent<TupleView<(ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>>)>>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>>>, _PaddingLayout>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Int?>>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<HStack<_ConditionalContent<_ConditionalContent<TupleView<(ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>>)>>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>>>, _PaddingLayout>, _EnvironmentKeyWritingModifier<Font?>>();
    type metadata accessor for _EnvironmentKeyWritingModifier<Font?>(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Int?>, (unint64_t *)&lazy cache variable for type metadata for Int?, MEMORY[0x1E4FBB550], MEMORY[0x1E4F411E8]);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<HStack<_ConditionalContent<_ConditionalContent<TupleView<(ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>>)>>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>>>, _PaddingLayout>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Int?>>);
    }
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<_ConditionalContent<_ConditionalContent<TupleView<(ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>>)>>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>>>, _PaddingLayout>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Int?>>, StyleContextWriter<TableStyleContext>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<_ConditionalContent<_ConditionalContent<TupleView<(ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>>)>>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>>>, _PaddingLayout>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Int?>>, StyleContextWriter<TableStyleContext>>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<HStack<_ConditionalContent<_ConditionalContent<TupleView<(ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>>)>>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>>>, _PaddingLayout>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Int?>>();
    type metadata accessor for EnvironmentPropertyKey<TableHeaderLeadingMarginKey>(255, &lazy cache variable for type metadata for StyleContextWriter<TableStyleContext>, MEMORY[0x1E4F401A8], MEMORY[0x1E4F401A0], MEMORY[0x1E4F40318]);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<_ConditionalContent<_ConditionalContent<TupleView<(ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>>)>>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>>>, _PaddingLayout>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Int?>>, StyleContextWriter<TableStyleContext>>);
    }
  }
}

void type metadata accessor for _VariadicView.Tree<_HStackLayout, _ConditionalContent<_ConditionalContent<TupleView<(ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>>)>>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>>>()
{
  if (!lazy cache variable for type metadata for _VariadicView.Tree<_HStackLayout, _ConditionalContent<_ConditionalContent<TupleView<(ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>>)>>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>>>)
  {
    type metadata accessor for _ConditionalContent<_ConditionalContent<TupleView<(ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>>)>>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>>(255, &lazy cache variable for type metadata for _ConditionalContent<_ConditionalContent<TupleView<(ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>>)>>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>>, (uint64_t (*)(uint64_t))type metadata accessor for _ConditionalContent<TupleView<(ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>>)>>, (uint64_t (*)(uint64_t))type metadata accessor for TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>, MEMORY[0x1E4F40578]);
    unint64_t v0 = type metadata accessor for _VariadicView.Tree();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _VariadicView.Tree<_HStackLayout, _ConditionalContent<_ConditionalContent<TupleView<(ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>>)>>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>>>);
    }
  }
}

uint64_t outlined init with copy of TableHeaderViewCore(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t outlined destroy of TableHeaderViewCore(uint64_t a1)
{
  return a1;
}

uint64_t outlined init with copy of Button<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _PaddingLayout>, _FlexFrameLayout>>(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

void type metadata accessor for TableColumnCollection.Entry?(uint64_t a1)
{
}

uint64_t outlined init with copy of Slice<TableColumnCollection>(uint64_t a1, uint64_t a2)
{
  type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for Slice<TableColumnCollection>, (uint64_t (*)(void))lazy protocol witness table accessor for type TableColumnCollection and conformance TableColumnCollection, (uint64_t)&type metadata for TableColumnCollection, MEMORY[0x1E4FBC320]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t partial apply for closure #3 in closure #1 in TableHeaderViewCore.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return closure #1 in closure #1 in TableHeaderViewCore.body.getter(a1, (void *)(v2 + 16), a2);
}

uint64_t outlined destroy of Slice<TableColumnCollection>(uint64_t a1)
{
  type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for Slice<TableColumnCollection>, (uint64_t (*)(void))lazy protocol witness table accessor for type TableColumnCollection and conformance TableColumnCollection, (uint64_t)&type metadata for TableColumnCollection, MEMORY[0x1E4FBC320]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void type metadata accessor for _VariadicView.Tree<_VStackLayout, _ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>()
{
  if (!lazy cache variable for type metadata for _VariadicView.Tree<_VStackLayout, _ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>)
  {
    type metadata accessor for _ConditionalContent<_ConditionalContent<TupleView<(ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>>)>>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>>(255, &lazy cache variable for type metadata for _ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>, type metadata accessor for SortableTableHeaderButton, type metadata accessor for StaticTableHeaderButton, MEMORY[0x1E4F40578]);
    unint64_t v0 = type metadata accessor for _VariadicView.Tree();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _VariadicView.Tree<_VStackLayout, _ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<Color, _FlexFrameLayout> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<Color, _FlexFrameLayout> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<Color, _FlexFrameLayout> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for EnvironmentPropertyKey<TableHeaderLeadingMarginKey>(255, &lazy cache variable for type metadata for ModifiedContent<Color, _FlexFrameLayout>, MEMORY[0x1E4F414E0], MEMORY[0x1E4F3FE58], MEMORY[0x1E4F3FBA0]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<Color, _FlexFrameLayout> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

double _s7SwiftUI15ModifiedContentVyACyAA5ColorVAA16_FlexFrameLayoutVGAA01_gH0VGSgWOi0_(uint64_t a1)
{
  *(void *)(a1 + 160) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

uint64_t outlined init with take of ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?(uint64_t a1, uint64_t a2)
{
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>, MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with copy of TableColumnCollection.Backing(uint64_t a1, uint64_t a2)
{
  return a2;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<HStack<_ConditionalContent<_ConditionalContent<TupleView<(ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>>)>>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>>>, _PaddingLayout>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Int?>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<HStack<_ConditionalContent<_ConditionalContent<TupleView<(ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>>)>>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>>>, _PaddingLayout>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Int?>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<HStack<_ConditionalContent<_ConditionalContent<TupleView<(ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>>)>>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>>>, _PaddingLayout>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Int?>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<HStack<_ConditionalContent<_ConditionalContent<TupleView<(ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>>)>>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>>>, _PaddingLayout>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Int?>>();
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<HStack<_ConditionalContent<_ConditionalContent<TupleView<(ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>>)>>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>>>, _PaddingLayout>, _EnvironmentKeyWritingModifier<Font?>> and conformance <> ModifiedContent<A, B>();
    lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<Font?> and conformance _EnvironmentKeyWritingModifier<A>(&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<Int?> and conformance _EnvironmentKeyWritingModifier<A>, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Int?>, (unint64_t *)&lazy cache variable for type metadata for Int?, MEMORY[0x1E4FBB550]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<HStack<_ConditionalContent<_ConditionalContent<TupleView<(ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>>)>>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>>>, _PaddingLayout>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Int?>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<HStack<_ConditionalContent<_ConditionalContent<TupleView<(ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>>)>>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>>>, _PaddingLayout>, _EnvironmentKeyWritingModifier<Font?>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<HStack<_ConditionalContent<_ConditionalContent<TupleView<(ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>>)>>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>>>, _PaddingLayout>, _EnvironmentKeyWritingModifier<Font?>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<HStack<_ConditionalContent<_ConditionalContent<TupleView<(ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>>)>>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>>>, _PaddingLayout>, _EnvironmentKeyWritingModifier<Font?>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<HStack<_ConditionalContent<_ConditionalContent<TupleView<(ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>>)>>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>>>, _PaddingLayout>, _EnvironmentKeyWritingModifier<Font?>>();
    lazy protocol witness table accessor for type ModifiedContent<HStack<_ConditionalContent<_ConditionalContent<TupleView<(ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>>)>>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>>>, _PaddingLayout> and conformance <> ModifiedContent<A, B>();
    lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<Font?> and conformance _EnvironmentKeyWritingModifier<A>((unint64_t *)&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<Font?> and conformance _EnvironmentKeyWritingModifier<A>, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Font?>, (unint64_t *)&lazy cache variable for type metadata for Font?, MEMORY[0x1E4F41390]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<HStack<_ConditionalContent<_ConditionalContent<TupleView<(ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>>)>>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>>>, _PaddingLayout>, _EnvironmentKeyWritingModifier<Font?>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<HStack<_ConditionalContent<_ConditionalContent<TupleView<(ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>>)>>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>>>, _PaddingLayout> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<HStack<_ConditionalContent<_ConditionalContent<TupleView<(ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>>)>>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>>>, _PaddingLayout> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<HStack<_ConditionalContent<_ConditionalContent<TupleView<(ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>>)>>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>>>, _PaddingLayout> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<HStack<_ConditionalContent<_ConditionalContent<TupleView<(ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>>)>>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>>>, _PaddingLayout>(255);
    lazy protocol witness table accessor for type Button<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _PaddingLayout>, _FlexFrameLayout>> and conformance Button<A>(&lazy protocol witness table cache variable for type HStack<_ConditionalContent<_ConditionalContent<TupleView<(ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>>)>>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>>> and conformance HStack<A>, (void (*)(uint64_t))type metadata accessor for HStack<_ConditionalContent<_ConditionalContent<TupleView<(ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>>)>>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>>>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<HStack<_ConditionalContent<_ConditionalContent<TupleView<(ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>>)>>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>>>, _PaddingLayout> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type StyleContextWriter<TableStyleContext> and conformance StyleContextWriter<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type StyleContextWriter<TableStyleContext> and conformance StyleContextWriter<A>;
  if (!lazy protocol witness table cache variable for type StyleContextWriter<TableStyleContext> and conformance StyleContextWriter<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<TableHeaderLeadingMarginKey>(255, &lazy cache variable for type metadata for StyleContextWriter<TableStyleContext>, MEMORY[0x1E4F401A8], MEMORY[0x1E4F401A0], MEMORY[0x1E4F40318]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StyleContextWriter<TableStyleContext> and conformance StyleContextWriter<A>);
  }
  return result;
}

void *initializeBufferWithCopyOfBuffer for StaticTableHeaderButton(void *a1, void *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v28 = *a2;
    *a1 = *a2;
    a1 = (void *)(v28 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    uint64_t v7 = type metadata accessor for UUID();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    unint64_t v8 = (int *)type metadata accessor for TableColumnCollection.Entry(0);
    uint64_t v9 = v8[5];
    uint64_t v10 = (char *)a1 + v9;
    unint64_t v11 = (char *)a2 + v9;
    uint64_t v12 = *(void *)v11;
    uint64_t v13 = *((void *)v11 + 1);
    uint64_t v14 = *((void *)v11 + 2);
    uint64_t v15 = *((void *)v11 + 3);
    char v16 = v11[32];
    outlined copy of TableColumnCustomizationID.Base(*(void *)v11, v13, v14, v15, v16);
    *(void *)uint64_t v10 = v12;
    *((void *)v10 + 1) = v13;
    *((void *)v10 + 2) = v14;
    *((void *)v10 + 3) = v15;
    v10[32] = v16;
    *(void *)((char *)a1 + v8[6]) = *(void *)((char *)a2 + v8[6]);
    uint64_t v17 = v8[7];
    uint64_t v18 = (char *)a1 + v17;
    uint64_t v19 = (char *)a2 + v17;
    long long v20 = *((_OWORD *)v19 + 1);
    *(_OWORD *)uint64_t v18 = *(_OWORD *)v19;
    *((_OWORD *)v18 + 1) = v20;
    unsigned char v18[32] = v19[32];
    *((unsigned char *)a1 + v8[8]) = *((unsigned char *)a2 + v8[8]);
    *((unsigned char *)a1 + v8[9]) = *((unsigned char *)a2 + v8[9]);
    *((unsigned char *)a1 + v8[10]) = *((unsigned char *)a2 + v8[10]);
    uint64_t v21 = v8[11];
    long long v22 = (char *)a1 + v21;
    uint64_t v23 = (char *)a2 + v21;
    uint64_t v24 = *(void *)((char *)a2 + v21 + 24);
    if (v24)
    {
      *((void *)v22 + 3) = v24;
      (**(void (***)(char *, char *))(v24 - 8))(v22, v23);
      long long v25 = *(_OWORD *)(v23 + 56);
      *(_OWORD *)(v22 + 56) = v25;
      (**(void (***)(uint64_t, uint64_t))(v25 - 8))((uint64_t)(v22 + 32), (uint64_t)(v23 + 32));
      *((void *)v22 + 9) = *((void *)v23 + 9);
      uint64_t v26 = *((void *)v23 + 14);
      long long v27 = *((_OWORD *)v23 + 6);
      *((_OWORD *)v22 + 5) = *((_OWORD *)v23 + 5);
      *((_OWORD *)v22 + 6) = v27;
      *((void *)v22 + 14) = v26;
      swift_retain();
      swift_retain();
      swift_retain();
    }
    else
    {
      long long v29 = *((_OWORD *)v23 + 5);
      *((_OWORD *)v22 + 4) = *((_OWORD *)v23 + 4);
      *((_OWORD *)v22 + 5) = v29;
      *((_OWORD *)v22 + 6) = *((_OWORD *)v23 + 6);
      *((void *)v22 + 14) = *((void *)v23 + 14);
      long long v30 = *((_OWORD *)v23 + 1);
      *(_OWORD *)long long v22 = *(_OWORD *)v23;
      *((_OWORD *)v22 + 1) = v30;
      long long v31 = *((_OWORD *)v23 + 3);
      *((_OWORD *)v22 + 2) = *((_OWORD *)v23 + 2);
      *((_OWORD *)v22 + 3) = v31;
    }
    *(void *)((char *)a1 + v8[12]) = *(void *)((char *)a2 + v8[12]);
    uint64_t v32 = *(int *)(a3 + 24);
    *(void *)((char *)a1 + *(int *)(a3 + 20)) = *(void *)((char *)a2 + *(int *)(a3 + 20));
    *(void *)((char *)a1 + v32) = *(void *)((char *)a2 + v32);
  }
  swift_retain();
  return a1;
}

uint64_t destroy for StaticTableHeaderButton(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  uint64_t v3 = type metadata accessor for TableColumnCollection.Entry(0);
  uint64_t v4 = a1 + *(int *)(v3 + 20);
  outlined consume of TableColumnCustomizationID.Base(*(void *)v4, *(void *)(v4 + 8), *(void *)(v4 + 16), *(void *)(v4 + 24), *(unsigned char *)(v4 + 32));
  uint64_t v5 = a1 + *(int *)(v3 + 44);
  if (*(void *)(v5 + 24))
  {
    __swift_destroy_boxed_opaque_existential_1(a1 + *(int *)(v3 + 44));
    __swift_destroy_boxed_opaque_existential_1(v5 + 32);
    swift_release();
    swift_release();
    swift_release();
  }

  return swift_release();
}

uint64_t outlined consume of TableColumnCustomizationID.Base(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t result = swift_bridgeObjectRelease();
  if (a5)
  {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t initializeWithCopy for StaticTableHeaderButton(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = (int *)type metadata accessor for TableColumnCollection.Entry(0);
  uint64_t v8 = v7[5];
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  uint64_t v11 = *(void *)v10;
  uint64_t v12 = *(void *)(v10 + 8);
  uint64_t v13 = *(void *)(v10 + 16);
  uint64_t v14 = *(void *)(v10 + 24);
  char v15 = *(unsigned char *)(v10 + 32);
  outlined copy of TableColumnCustomizationID.Base(*(void *)v10, v12, v13, v14, v15);
  *(void *)uint64_t v9 = v11;
  *(void *)(v9 + 8) = v12;
  *(void *)(v9 + 16) = v13;
  *(void *)(v9 + 24) = v14;
  *(unsigned char *)(v9 + 32) = v15;
  *(void *)(a1 + v7[6]) = *(void *)(a2 + v7[6]);
  uint64_t v16 = v7[7];
  uint64_t v17 = a1 + v16;
  uint64_t v18 = a2 + v16;
  long long v19 = *(_OWORD *)(v18 + 16);
  *(_OWORD *)uint64_t v17 = *(_OWORD *)v18;
  *(_OWORD *)(v17 + 16) = v19;
  *(unsigned char *)(v17 + 32) = *(unsigned char *)(v18 + 32);
  *(unsigned char *)(a1 + v7[8]) = *(unsigned char *)(a2 + v7[8]);
  *(unsigned char *)(a1 + v7[9]) = *(unsigned char *)(a2 + v7[9]);
  *(unsigned char *)(a1 + v7[10]) = *(unsigned char *)(a2 + v7[10]);
  uint64_t v20 = v7[11];
  uint64_t v21 = a1 + v20;
  uint64_t v22 = a2 + v20;
  uint64_t v23 = *(void *)(a2 + v20 + 24);
  if (v23)
  {
    *(void *)(v21 + 24) = v23;
    (**(void (***)(uint64_t, uint64_t))(v23 - 8))(v21, v22);
    long long v24 = *(_OWORD *)(v22 + 56);
    *(_OWORD *)(v21 + 56) = v24;
    (**(void (***)(uint64_t, uint64_t))(v24 - 8))(v21 + 32, v22 + 32);
    *(void *)(v21 + 72) = *(void *)(v22 + 72);
    uint64_t v25 = *(void *)(v22 + 112);
    long long v26 = *(_OWORD *)(v22 + 96);
    *(_OWORD *)(v21 + 80) = *(_OWORD *)(v22 + 80);
    *(_OWORD *)(v21 + 96) = v26;
    *(void *)(v21 + 112) = v25;
    swift_retain();
    swift_retain();
    swift_retain();
  }
  else
  {
    long long v27 = *(_OWORD *)(v22 + 80);
    *(_OWORD *)(v21 + 64) = *(_OWORD *)(v22 + 64);
    *(_OWORD *)(v21 + 80) = v27;
    *(_OWORD *)(v21 + 96) = *(_OWORD *)(v22 + 96);
    *(void *)(v21 + 112) = *(void *)(v22 + 112);
    long long v28 = *(_OWORD *)(v22 + 16);
    *(_OWORD *)uint64_t v21 = *(_OWORD *)v22;
    *(_OWORD *)(v21 + 16) = v28;
    long long v29 = *(_OWORD *)(v22 + 48);
    *(_OWORD *)(v21 + 32) = *(_OWORD *)(v22 + 32);
    *(_OWORD *)(v21 + 48) = v29;
  }
  *(void *)(a1 + v7[12]) = *(void *)(a2 + v7[12]);
  uint64_t v30 = *(int *)(a3 + 24);
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  *(void *)(a1 + v30) = *(void *)(a2 + v30);
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for StaticTableHeaderButton(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = (int *)type metadata accessor for TableColumnCollection.Entry(0);
  uint64_t v8 = v7[5];
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  uint64_t v11 = *(void *)v10;
  uint64_t v12 = *(void *)(v10 + 8);
  uint64_t v13 = *(void *)(v10 + 16);
  uint64_t v14 = *(void *)(v10 + 24);
  char v15 = *(unsigned char *)(v10 + 32);
  outlined copy of TableColumnCustomizationID.Base(*(void *)v10, v12, v13, v14, v15);
  uint64_t v16 = *(void *)v9;
  uint64_t v17 = *(void *)(v9 + 8);
  uint64_t v18 = *(void *)(v9 + 16);
  uint64_t v19 = *(void *)(v9 + 24);
  char v20 = *(unsigned char *)(v9 + 32);
  *(void *)uint64_t v9 = v11;
  *(void *)(v9 + 8) = v12;
  *(void *)(v9 + 16) = v13;
  *(void *)(v9 + 24) = v14;
  *(unsigned char *)(v9 + 32) = v15;
  outlined consume of TableColumnCustomizationID.Base(v16, v17, v18, v19, v20);
  *(void *)(a1 + v7[6]) = *(void *)(a2 + v7[6]);
  uint64_t v21 = v7[7];
  uint64_t v22 = a1 + v21;
  uint64_t v23 = a2 + v21;
  char v24 = *(unsigned char *)(v23 + 32);
  long long v25 = *(_OWORD *)(v23 + 16);
  *(_OWORD *)uint64_t v22 = *(_OWORD *)v23;
  *(_OWORD *)(v22 + 16) = v25;
  *(unsigned char *)(v22 + 32) = v24;
  *(unsigned char *)(a1 + v7[8]) = *(unsigned char *)(a2 + v7[8]);
  *(unsigned char *)(a1 + v7[9]) = *(unsigned char *)(a2 + v7[9]);
  *(unsigned char *)(a1 + v7[10]) = *(unsigned char *)(a2 + v7[10]);
  uint64_t v26 = v7[11];
  uint64_t v27 = a1 + v26;
  long long v28 = (uint64_t *)(a2 + v26);
  uint64_t v29 = *(void *)(a2 + v26 + 24);
  if (*(void *)(a1 + v26 + 24))
  {
    if (v29)
    {
      __swift_assign_boxed_opaque_existential_0((uint64_t *)v27, v28);
      __swift_assign_boxed_opaque_existential_1((uint64_t *)(v27 + 32), v28 + 4);
      uint64_t v30 = v28[10];
      *(void *)(v27 + 72) = v28[9];
      *(void *)(v27 + 80) = v30;
      swift_retain();
      swift_release();
      uint64_t v31 = v28[12];
      *(void *)(v27 + 88) = v28[11];
      *(void *)(v27 + 96) = v31;
      swift_retain();
      swift_release();
      uint64_t v32 = v28[14];
      *(void *)(v27 + 104) = v28[13];
      *(void *)(v27 + 112) = v32;
      swift_retain();
      swift_release();
    }
    else
    {
      outlined destroy of SwiftUIAnySortComparator(v27);
      long long v38 = *((_OWORD *)v28 + 3);
      long long v40 = *(_OWORD *)v28;
      long long v39 = *((_OWORD *)v28 + 1);
      *(_OWORD *)(v27 + 32) = *((_OWORD *)v28 + 2);
      *(_OWORD *)(v27 + 48) = v38;
      *(_OWORD *)uint64_t v27 = v40;
      *(_OWORD *)(v27 + 16) = v39;
      long long v42 = *((_OWORD *)v28 + 5);
      long long v41 = *((_OWORD *)v28 + 6);
      long long v43 = *((_OWORD *)v28 + 4);
      *(void *)(v27 + 112) = v28[14];
      *(_OWORD *)(v27 + 80) = v42;
      *(_OWORD *)(v27 + 96) = v41;
      *(_OWORD *)(v27 + 64) = v43;
    }
  }
  else if (v29)
  {
    *(void *)(v27 + 24) = v29;
    (**(void (***)(uint64_t, long long *))(v29 - 8))(v27, (long long *)v28);
    uint64_t v33 = v28[7];
    *(void *)(v27 + 56) = v33;
    *(void *)(v27 + 64) = v28[8];
    (**(void (***)(uint64_t, uint64_t))(v33 - 8))(v27 + 32, (uint64_t)(v28 + 4));
    uint64_t v34 = v28[10];
    *(void *)(v27 + 72) = v28[9];
    *(void *)(v27 + 80) = v34;
    uint64_t v35 = v28[12];
    *(void *)(v27 + 88) = v28[11];
    *(void *)(v27 + 96) = v35;
    uint64_t v36 = v28[13];
    uint64_t v37 = v28[14];
    *(void *)(v27 + 104) = v36;
    *(void *)(v27 + 112) = v37;
    swift_retain();
    swift_retain();
    swift_retain();
  }
  else
  {
    long long v44 = *(_OWORD *)v28;
    long long v45 = *((_OWORD *)v28 + 1);
    long long v46 = *((_OWORD *)v28 + 3);
    *(_OWORD *)(v27 + 32) = *((_OWORD *)v28 + 2);
    *(_OWORD *)(v27 + 48) = v46;
    *(_OWORD *)uint64_t v27 = v44;
    *(_OWORD *)(v27 + 16) = v45;
    long long v47 = *((_OWORD *)v28 + 4);
    long long v48 = *((_OWORD *)v28 + 5);
    long long v49 = *((_OWORD *)v28 + 6);
    *(void *)(v27 + 112) = v28[14];
    *(_OWORD *)(v27 + 80) = v48;
    *(_OWORD *)(v27 + 96) = v49;
    *(_OWORD *)(v27 + 64) = v47;
  }
  *(void *)(a1 + v7[12]) = *(void *)(a2 + v7[12]);
  swift_retain();
  swift_release();
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  *(void *)(a1 + *(int *)(a3 + 24)) = *(void *)(a2 + *(int *)(a3 + 24));
  return a1;
}

uint64_t *__swift_assign_boxed_opaque_existential_0(uint64_t *result, uint64_t *a2)
{
  if (result != a2)
  {
    uint64_t v3 = result;
    uint64_t v4 = result[3];
    uint64_t v5 = a2[3];
    if (v4 == v5)
    {
      uint64_t v10 = *(void *)(v4 - 8);
      if ((*(unsigned char *)(v10 + 82) & 2) != 0)
      {
        uint64_t v12 = *a2;
        swift_retain();
        uint64_t result = (uint64_t *)swift_release();
        uint64_t *v3 = v12;
      }
      else
      {
        uint64_t v11 = *(uint64_t (**)(void))(v10 + 24);
        return (uint64_t *)v11();
      }
    }
    else
    {
      result[3] = v5;
      uint64_t v6 = *(void *)(v4 - 8);
      uint64_t v7 = *(void *)(v5 - 8);
      uint64_t v8 = v7;
      int v9 = *(_DWORD *)(v7 + 80);
      if ((*(unsigned char *)(v6 + 82) & 2) != 0)
      {
        if ((v9 & 0x20000) != 0)
        {
          *uint64_t result = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(result, a2, v5);
        }
        return (uint64_t *)swift_release();
      }
      else
      {
        (*(void (**)(unsigned char *, uint64_t *, uint64_t))(v6 + 32))(v13, result, v4);
        if ((v9 & 0x20000) != 0)
        {
          uint64_t *v3 = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(v3, a2, v5);
        }
        return (uint64_t *)(*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v13, v4);
      }
    }
  }
  return result;
}

uint64_t initializeWithTake for StaticTableHeaderButton(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = (int *)type metadata accessor for TableColumnCollection.Entry(0);
  uint64_t v8 = v7[5];
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  long long v11 = *(_OWORD *)(v10 + 16);
  *(_OWORD *)uint64_t v9 = *(_OWORD *)v10;
  *(_OWORD *)(v9 + 16) = v11;
  *(unsigned char *)(v9 + 32) = *(unsigned char *)(v10 + 32);
  *(void *)(a1 + v7[6]) = *(void *)(a2 + v7[6]);
  uint64_t v12 = v7[7];
  uint64_t v13 = a1 + v12;
  uint64_t v14 = a2 + v12;
  long long v15 = *(_OWORD *)(v14 + 16);
  *(_OWORD *)uint64_t v13 = *(_OWORD *)v14;
  *(_OWORD *)(v13 + 16) = v15;
  *(unsigned char *)(v13 + 32) = *(unsigned char *)(v14 + 32);
  *(unsigned char *)(a1 + v7[8]) = *(unsigned char *)(a2 + v7[8]);
  *(unsigned char *)(a1 + v7[9]) = *(unsigned char *)(a2 + v7[9]);
  *(unsigned char *)(a1 + v7[10]) = *(unsigned char *)(a2 + v7[10]);
  uint64_t v16 = v7[11];
  uint64_t v17 = a1 + v16;
  uint64_t v18 = a2 + v16;
  long long v19 = *(_OWORD *)(v18 + 16);
  *(_OWORD *)uint64_t v17 = *(_OWORD *)v18;
  *(_OWORD *)(v17 + 16) = v19;
  long long v20 = *(_OWORD *)(v18 + 48);
  *(_OWORD *)(v17 + 32) = *(_OWORD *)(v18 + 32);
  *(_OWORD *)(v17 + 48) = v20;
  *(void *)(v17 + 112) = *(void *)(v18 + 112);
  long long v21 = *(_OWORD *)(v18 + 96);
  long long v22 = *(_OWORD *)(v18 + 64);
  *(_OWORD *)(v17 + 80) = *(_OWORD *)(v18 + 80);
  *(_OWORD *)(v17 + 96) = v21;
  *(_OWORD *)(v17 + 64) = v22;
  *(void *)(a1 + v7[12]) = *(void *)(a2 + v7[12]);
  uint64_t v23 = *(int *)(a3 + 24);
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  *(void *)(a1 + v23) = *(void *)(a2 + v23);
  return a1;
}

uint64_t assignWithTake for StaticTableHeaderButton(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = (int *)type metadata accessor for TableColumnCollection.Entry(0);
  uint64_t v8 = v7[5];
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  char v11 = *(unsigned char *)(v10 + 32);
  uint64_t v12 = *(void *)v9;
  uint64_t v13 = *(void *)(v9 + 8);
  uint64_t v14 = *(void *)(v9 + 16);
  uint64_t v15 = *(void *)(v9 + 24);
  char v16 = *(unsigned char *)(v9 + 32);
  long long v17 = *(_OWORD *)(v10 + 16);
  *(_OWORD *)uint64_t v9 = *(_OWORD *)v10;
  *(_OWORD *)(v9 + 16) = v17;
  *(unsigned char *)(v9 + 32) = v11;
  outlined consume of TableColumnCustomizationID.Base(v12, v13, v14, v15, v16);
  *(void *)(a1 + v7[6]) = *(void *)(a2 + v7[6]);
  uint64_t v18 = v7[7];
  uint64_t v19 = a1 + v18;
  uint64_t v20 = a2 + v18;
  long long v21 = *(_OWORD *)(v20 + 16);
  *(_OWORD *)uint64_t v19 = *(_OWORD *)v20;
  *(_OWORD *)(v19 + 16) = v21;
  *(unsigned char *)(v19 + 32) = *(unsigned char *)(v20 + 32);
  *(unsigned char *)(a1 + v7[8]) = *(unsigned char *)(a2 + v7[8]);
  *(unsigned char *)(a1 + v7[9]) = *(unsigned char *)(a2 + v7[9]);
  *(unsigned char *)(a1 + v7[10]) = *(unsigned char *)(a2 + v7[10]);
  uint64_t v22 = v7[11];
  uint64_t v23 = a1 + v22;
  uint64_t v24 = a2 + v22;
  if (!*(void *)(a1 + v22 + 24)) {
    goto LABEL_5;
  }
  if (!*(void *)(v24 + 24))
  {
    outlined destroy of SwiftUIAnySortComparator(v23);
LABEL_5:
    long long v27 = *(_OWORD *)(v24 + 80);
    *(_OWORD *)(v23 + 64) = *(_OWORD *)(v24 + 64);
    *(_OWORD *)(v23 + 80) = v27;
    *(_OWORD *)(v23 + 96) = *(_OWORD *)(v24 + 96);
    *(void *)(v23 + 112) = *(void *)(v24 + 112);
    long long v28 = *(_OWORD *)(v24 + 16);
    *(_OWORD *)uint64_t v23 = *(_OWORD *)v24;
    *(_OWORD *)(v23 + 16) = v28;
    long long v29 = *(_OWORD *)(v24 + 48);
    *(_OWORD *)(v23 + 32) = *(_OWORD *)(v24 + 32);
    *(_OWORD *)(v23 + 48) = v29;
    goto LABEL_6;
  }
  __swift_destroy_boxed_opaque_existential_1(v23);
  long long v25 = *(_OWORD *)(v24 + 16);
  *(_OWORD *)uint64_t v23 = *(_OWORD *)v24;
  *(_OWORD *)(v23 + 16) = v25;
  __swift_destroy_boxed_opaque_existential_1(v23 + 32);
  long long v26 = *(_OWORD *)(v24 + 48);
  *(_OWORD *)(v23 + 32) = *(_OWORD *)(v24 + 32);
  *(_OWORD *)(v23 + 48) = v26;
  *(void *)(v23 + 64) = *(void *)(v24 + 64);
  *(_OWORD *)(v23 + 72) = *(_OWORD *)(v24 + 72);
  swift_release();
  *(_OWORD *)(v23 + 88) = *(_OWORD *)(v24 + 88);
  swift_release();
  *(_OWORD *)(v23 + 104) = *(_OWORD *)(v24 + 104);
  swift_release();
LABEL_6:
  *(void *)(a1 + v7[12]) = *(void *)(a2 + v7[12]);
  swift_release();
  uint64_t v30 = *(int *)(a3 + 24);
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  *(void *)(a1 + v30) = *(void *)(a2 + v30);
  return a1;
}

uint64_t getEnumTagSinglePayload for StaticTableHeaderButton(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1876BC174);
}

uint64_t sub_1876BC174(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for TableColumnCollection.Entry(0);
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48);

  return v5(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for StaticTableHeaderButton(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1876BC1F4);
}

uint64_t sub_1876BC1F4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for TableColumnCollection.Entry(0);
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);

  return v5(a1, a2, a2, v4);
}

uint64_t type metadata completion function for StaticTableHeaderButton()
{
  uint64_t result = type metadata accessor for TableColumnCollection.Entry(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

void *initializeBufferWithCopyOfBuffer for SortableTableHeaderButton(void *a1, void *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v28 = *a2;
    *a1 = *a2;
    a1 = (void *)(v28 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for UUID();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = (int *)type metadata accessor for TableColumnCollection.Entry(0);
    uint64_t v9 = v8[5];
    uint64_t v10 = (char *)a1 + v9;
    char v11 = (char *)a2 + v9;
    uint64_t v12 = *(void *)v11;
    uint64_t v13 = *((void *)v11 + 1);
    uint64_t v14 = *((void *)v11 + 2);
    uint64_t v15 = *((void *)v11 + 3);
    char v16 = v11[32];
    outlined copy of TableColumnCustomizationID.Base(*(void *)v11, v13, v14, v15, v16);
    *(void *)uint64_t v10 = v12;
    *((void *)v10 + 1) = v13;
    *((void *)v10 + 2) = v14;
    *((void *)v10 + 3) = v15;
    v10[32] = v16;
    *(void *)((char *)a1 + v8[6]) = *(void *)((char *)a2 + v8[6]);
    uint64_t v17 = v8[7];
    uint64_t v18 = (char *)a1 + v17;
    uint64_t v19 = (char *)a2 + v17;
    long long v20 = *((_OWORD *)v19 + 1);
    *(_OWORD *)uint64_t v18 = *(_OWORD *)v19;
    *((_OWORD *)v18 + 1) = v20;
    unsigned char v18[32] = v19[32];
    *((unsigned char *)a1 + v8[8]) = *((unsigned char *)a2 + v8[8]);
    *((unsigned char *)a1 + v8[9]) = *((unsigned char *)a2 + v8[9]);
    *((unsigned char *)a1 + v8[10]) = *((unsigned char *)a2 + v8[10]);
    uint64_t v21 = v8[11];
    uint64_t v22 = (char *)a1 + v21;
    uint64_t v23 = (char *)a2 + v21;
    uint64_t v24 = *(void *)((char *)a2 + v21 + 24);
    if (v24)
    {
      *((void *)v22 + 3) = v24;
      (**(void (***)(char *, char *))(v24 - 8))(v22, v23);
      long long v25 = *(_OWORD *)(v23 + 56);
      *(_OWORD *)(v22 + 56) = v25;
      (**(void (***)(uint64_t, uint64_t))(v25 - 8))((uint64_t)(v22 + 32), (uint64_t)(v23 + 32));
      *((void *)v22 + 9) = *((void *)v23 + 9);
      uint64_t v26 = *((void *)v23 + 14);
      long long v27 = *((_OWORD *)v23 + 6);
      *((_OWORD *)v22 + 5) = *((_OWORD *)v23 + 5);
      *((_OWORD *)v22 + 6) = v27;
      *((void *)v22 + 14) = v26;
      swift_retain();
      swift_retain();
      swift_retain();
    }
    else
    {
      long long v29 = *((_OWORD *)v23 + 5);
      *((_OWORD *)v22 + 4) = *((_OWORD *)v23 + 4);
      *((_OWORD *)v22 + 5) = v29;
      *((_OWORD *)v22 + 6) = *((_OWORD *)v23 + 6);
      *((void *)v22 + 14) = *((void *)v23 + 14);
      long long v30 = *((_OWORD *)v23 + 1);
      *(_OWORD *)uint64_t v22 = *(_OWORD *)v23;
      *((_OWORD *)v22 + 1) = v30;
      long long v31 = *((_OWORD *)v23 + 3);
      *((_OWORD *)v22 + 2) = *((_OWORD *)v23 + 2);
      *((_OWORD *)v22 + 3) = v31;
    }
    *(void *)((char *)a1 + v8[12]) = *(void *)((char *)a2 + v8[12]);
    uint64_t v32 = a3[6];
    *(void *)((char *)a1 + a3[5]) = *(void *)((char *)a2 + a3[5]);
    uint64_t v33 = (void *)((char *)a1 + v32);
    uint64_t v34 = (void *)((char *)a2 + v32);
    uint64_t v35 = v34[1];
    *uint64_t v33 = *v34;
    v33[1] = v35;
    v33[2] = v34[2];
    *(void *)((char *)a1 + a3[7]) = *(void *)((char *)a2 + a3[7]);
    swift_retain();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t destroy for SortableTableHeaderButton(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  uint64_t v3 = type metadata accessor for TableColumnCollection.Entry(0);
  uint64_t v4 = a1 + *(int *)(v3 + 20);
  outlined consume of TableColumnCustomizationID.Base(*(void *)v4, *(void *)(v4 + 8), *(void *)(v4 + 16), *(void *)(v4 + 24), *(unsigned char *)(v4 + 32));
  uint64_t v5 = a1 + *(int *)(v3 + 44);
  if (*(void *)(v5 + 24))
  {
    __swift_destroy_boxed_opaque_existential_1(a1 + *(int *)(v3 + 44));
    __swift_destroy_boxed_opaque_existential_1(v5 + 32);
    swift_release();
    swift_release();
    swift_release();
  }
  swift_release();
  swift_release();
  swift_release();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for SortableTableHeaderButton(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = (int *)type metadata accessor for TableColumnCollection.Entry(0);
  uint64_t v8 = v7[5];
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  uint64_t v11 = *(void *)v10;
  uint64_t v12 = *(void *)(v10 + 8);
  uint64_t v13 = *(void *)(v10 + 16);
  uint64_t v14 = *(void *)(v10 + 24);
  char v15 = *(unsigned char *)(v10 + 32);
  outlined copy of TableColumnCustomizationID.Base(*(void *)v10, v12, v13, v14, v15);
  *(void *)uint64_t v9 = v11;
  *(void *)(v9 + 8) = v12;
  *(void *)(v9 + 16) = v13;
  *(void *)(v9 + 24) = v14;
  *(unsigned char *)(v9 + 32) = v15;
  *(void *)(a1 + v7[6]) = *(void *)(a2 + v7[6]);
  uint64_t v16 = v7[7];
  uint64_t v17 = a1 + v16;
  uint64_t v18 = a2 + v16;
  long long v19 = *(_OWORD *)(v18 + 16);
  *(_OWORD *)uint64_t v17 = *(_OWORD *)v18;
  *(_OWORD *)(v17 + 16) = v19;
  *(unsigned char *)(v17 + 32) = *(unsigned char *)(v18 + 32);
  *(unsigned char *)(a1 + v7[8]) = *(unsigned char *)(a2 + v7[8]);
  *(unsigned char *)(a1 + v7[9]) = *(unsigned char *)(a2 + v7[9]);
  *(unsigned char *)(a1 + v7[10]) = *(unsigned char *)(a2 + v7[10]);
  uint64_t v20 = v7[11];
  uint64_t v21 = a1 + v20;
  uint64_t v22 = a2 + v20;
  uint64_t v23 = *(void *)(a2 + v20 + 24);
  if (v23)
  {
    *(void *)(v21 + 24) = v23;
    (**(void (***)(uint64_t, uint64_t))(v23 - 8))(v21, v22);
    long long v24 = *(_OWORD *)(v22 + 56);
    *(_OWORD *)(v21 + 56) = v24;
    (**(void (***)(uint64_t, uint64_t))(v24 - 8))(v21 + 32, v22 + 32);
    *(void *)(v21 + 72) = *(void *)(v22 + 72);
    uint64_t v25 = *(void *)(v22 + 112);
    long long v26 = *(_OWORD *)(v22 + 96);
    *(_OWORD *)(v21 + 80) = *(_OWORD *)(v22 + 80);
    *(_OWORD *)(v21 + 96) = v26;
    *(void *)(v21 + 112) = v25;
    swift_retain();
    swift_retain();
    swift_retain();
  }
  else
  {
    long long v27 = *(_OWORD *)(v22 + 80);
    *(_OWORD *)(v21 + 64) = *(_OWORD *)(v22 + 64);
    *(_OWORD *)(v21 + 80) = v27;
    *(_OWORD *)(v21 + 96) = *(_OWORD *)(v22 + 96);
    *(void *)(v21 + 112) = *(void *)(v22 + 112);
    long long v28 = *(_OWORD *)(v22 + 16);
    *(_OWORD *)uint64_t v21 = *(_OWORD *)v22;
    *(_OWORD *)(v21 + 16) = v28;
    long long v29 = *(_OWORD *)(v22 + 48);
    *(_OWORD *)(v21 + 32) = *(_OWORD *)(v22 + 32);
    *(_OWORD *)(v21 + 48) = v29;
  }
  *(void *)(a1 + v7[12]) = *(void *)(a2 + v7[12]);
  uint64_t v30 = a3[6];
  *(void *)(a1 + a3[5]) = *(void *)(a2 + a3[5]);
  long long v31 = (void *)(a1 + v30);
  uint64_t v32 = (void *)(a2 + v30);
  uint64_t v33 = v32[1];
  void *v31 = *v32;
  v31[1] = v33;
  _OWORD v31[2] = v32[2];
  *(void *)(a1 + a3[7]) = *(void *)(a2 + a3[7]);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for SortableTableHeaderButton(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = (int *)type metadata accessor for TableColumnCollection.Entry(0);
  uint64_t v8 = v7[5];
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  uint64_t v11 = *(void *)v10;
  uint64_t v12 = *(void *)(v10 + 8);
  uint64_t v13 = *(void *)(v10 + 16);
  uint64_t v14 = *(void *)(v10 + 24);
  char v15 = *(unsigned char *)(v10 + 32);
  outlined copy of TableColumnCustomizationID.Base(*(void *)v10, v12, v13, v14, v15);
  uint64_t v16 = *(void *)v9;
  uint64_t v17 = *(void *)(v9 + 8);
  uint64_t v18 = *(void *)(v9 + 16);
  uint64_t v19 = *(void *)(v9 + 24);
  char v20 = *(unsigned char *)(v9 + 32);
  *(void *)uint64_t v9 = v11;
  *(void *)(v9 + 8) = v12;
  *(void *)(v9 + 16) = v13;
  *(void *)(v9 + 24) = v14;
  *(unsigned char *)(v9 + 32) = v15;
  outlined consume of TableColumnCustomizationID.Base(v16, v17, v18, v19, v20);
  *(void *)(a1 + v7[6]) = *(void *)(a2 + v7[6]);
  uint64_t v21 = v7[7];
  uint64_t v22 = a1 + v21;
  uint64_t v23 = a2 + v21;
  char v24 = *(unsigned char *)(v23 + 32);
  long long v25 = *(_OWORD *)(v23 + 16);
  *(_OWORD *)uint64_t v22 = *(_OWORD *)v23;
  *(_OWORD *)(v22 + 16) = v25;
  *(unsigned char *)(v22 + 32) = v24;
  *(unsigned char *)(a1 + v7[8]) = *(unsigned char *)(a2 + v7[8]);
  *(unsigned char *)(a1 + v7[9]) = *(unsigned char *)(a2 + v7[9]);
  *(unsigned char *)(a1 + v7[10]) = *(unsigned char *)(a2 + v7[10]);
  uint64_t v26 = v7[11];
  uint64_t v27 = a1 + v26;
  long long v28 = (uint64_t *)(a2 + v26);
  uint64_t v29 = *(void *)(a2 + v26 + 24);
  if (*(void *)(a1 + v26 + 24))
  {
    if (v29)
    {
      __swift_assign_boxed_opaque_existential_0((uint64_t *)v27, v28);
      __swift_assign_boxed_opaque_existential_1((uint64_t *)(v27 + 32), v28 + 4);
      uint64_t v30 = v28[10];
      *(void *)(v27 + 72) = v28[9];
      *(void *)(v27 + 80) = v30;
      swift_retain();
      swift_release();
      uint64_t v31 = v28[12];
      *(void *)(v27 + 88) = v28[11];
      *(void *)(v27 + 96) = v31;
      swift_retain();
      swift_release();
      uint64_t v32 = v28[14];
      *(void *)(v27 + 104) = v28[13];
      *(void *)(v27 + 112) = v32;
      swift_retain();
      swift_release();
    }
    else
    {
      outlined destroy of SwiftUIAnySortComparator(v27);
      long long v38 = *((_OWORD *)v28 + 3);
      long long v40 = *(_OWORD *)v28;
      long long v39 = *((_OWORD *)v28 + 1);
      *(_OWORD *)(v27 + 32) = *((_OWORD *)v28 + 2);
      *(_OWORD *)(v27 + 48) = v38;
      *(_OWORD *)uint64_t v27 = v40;
      *(_OWORD *)(v27 + 16) = v39;
      long long v42 = *((_OWORD *)v28 + 5);
      long long v41 = *((_OWORD *)v28 + 6);
      long long v43 = *((_OWORD *)v28 + 4);
      *(void *)(v27 + 112) = v28[14];
      *(_OWORD *)(v27 + 80) = v42;
      *(_OWORD *)(v27 + 96) = v41;
      *(_OWORD *)(v27 + 64) = v43;
    }
  }
  else if (v29)
  {
    *(void *)(v27 + 24) = v29;
    (**(void (***)(uint64_t, long long *))(v29 - 8))(v27, (long long *)v28);
    uint64_t v33 = v28[7];
    *(void *)(v27 + 56) = v33;
    *(void *)(v27 + 64) = v28[8];
    (**(void (***)(uint64_t, uint64_t))(v33 - 8))(v27 + 32, (uint64_t)(v28 + 4));
    uint64_t v34 = v28[10];
    *(void *)(v27 + 72) = v28[9];
    *(void *)(v27 + 80) = v34;
    uint64_t v35 = v28[12];
    *(void *)(v27 + 88) = v28[11];
    *(void *)(v27 + 96) = v35;
    uint64_t v36 = v28[13];
    uint64_t v37 = v28[14];
    *(void *)(v27 + 104) = v36;
    *(void *)(v27 + 112) = v37;
    swift_retain();
    swift_retain();
    swift_retain();
  }
  else
  {
    long long v44 = *(_OWORD *)v28;
    long long v45 = *((_OWORD *)v28 + 1);
    long long v46 = *((_OWORD *)v28 + 3);
    *(_OWORD *)(v27 + 32) = *((_OWORD *)v28 + 2);
    *(_OWORD *)(v27 + 48) = v46;
    *(_OWORD *)uint64_t v27 = v44;
    *(_OWORD *)(v27 + 16) = v45;
    long long v47 = *((_OWORD *)v28 + 4);
    long long v48 = *((_OWORD *)v28 + 5);
    long long v49 = *((_OWORD *)v28 + 6);
    *(void *)(v27 + 112) = v28[14];
    *(_OWORD *)(v27 + 80) = v48;
    *(_OWORD *)(v27 + 96) = v49;
    *(_OWORD *)(v27 + 64) = v47;
  }
  *(void *)(a1 + v7[12]) = *(void *)(a2 + v7[12]);
  swift_retain();
  swift_release();
  *(void *)(a1 + a3[5]) = *(void *)(a2 + a3[5]);
  uint64_t v50 = a3[6];
  uint64_t v51 = a1 + v50;
  uint64_t v52 = a2 + v50;
  *(void *)(a1 + v50) = *(void *)(a2 + v50);
  swift_retain();
  swift_release();
  *(void *)(v51 + 8) = *(void *)(v52 + 8);
  swift_retain();
  swift_release();
  *(void *)(v51 + 16) = *(void *)(v52 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + a3[7]) = *(void *)(a2 + a3[7]);
  return a1;
}

uint64_t initializeWithTake for SortableTableHeaderButton(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = (int *)type metadata accessor for TableColumnCollection.Entry(0);
  uint64_t v8 = v7[5];
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  long long v11 = *(_OWORD *)(v10 + 16);
  *(_OWORD *)uint64_t v9 = *(_OWORD *)v10;
  *(_OWORD *)(v9 + 16) = v11;
  *(unsigned char *)(v9 + 32) = *(unsigned char *)(v10 + 32);
  *(void *)(a1 + v7[6]) = *(void *)(a2 + v7[6]);
  uint64_t v12 = v7[7];
  uint64_t v13 = a1 + v12;
  uint64_t v14 = a2 + v12;
  long long v15 = *(_OWORD *)(v14 + 16);
  *(_OWORD *)uint64_t v13 = *(_OWORD *)v14;
  *(_OWORD *)(v13 + 16) = v15;
  *(unsigned char *)(v13 + 32) = *(unsigned char *)(v14 + 32);
  *(unsigned char *)(a1 + v7[8]) = *(unsigned char *)(a2 + v7[8]);
  *(unsigned char *)(a1 + v7[9]) = *(unsigned char *)(a2 + v7[9]);
  *(unsigned char *)(a1 + v7[10]) = *(unsigned char *)(a2 + v7[10]);
  uint64_t v16 = v7[11];
  uint64_t v17 = a1 + v16;
  uint64_t v18 = a2 + v16;
  long long v19 = *(_OWORD *)(v18 + 16);
  *(_OWORD *)uint64_t v17 = *(_OWORD *)v18;
  *(_OWORD *)(v17 + 16) = v19;
  long long v20 = *(_OWORD *)(v18 + 48);
  *(_OWORD *)(v17 + 32) = *(_OWORD *)(v18 + 32);
  *(_OWORD *)(v17 + 48) = v20;
  *(void *)(v17 + 112) = *(void *)(v18 + 112);
  long long v21 = *(_OWORD *)(v18 + 96);
  long long v22 = *(_OWORD *)(v18 + 64);
  *(_OWORD *)(v17 + 80) = *(_OWORD *)(v18 + 80);
  *(_OWORD *)(v17 + 96) = v21;
  *(_OWORD *)(v17 + 64) = v22;
  *(void *)(a1 + v7[12]) = *(void *)(a2 + v7[12]);
  uint64_t v23 = a3[6];
  *(void *)(a1 + a3[5]) = *(void *)(a2 + a3[5]);
  uint64_t v24 = a1 + v23;
  uint64_t v25 = a2 + v23;
  *(_OWORD *)uint64_t v24 = *(_OWORD *)v25;
  *(void *)(v24 + 16) = *(void *)(v25 + 16);
  *(void *)(a1 + a3[7]) = *(void *)(a2 + a3[7]);
  return a1;
}

uint64_t assignWithTake for SortableTableHeaderButton(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = (int *)type metadata accessor for TableColumnCollection.Entry(0);
  uint64_t v8 = v7[5];
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  char v11 = *(unsigned char *)(v10 + 32);
  uint64_t v12 = *(void *)v9;
  uint64_t v13 = *(void *)(v9 + 8);
  uint64_t v14 = *(void *)(v9 + 16);
  uint64_t v15 = *(void *)(v9 + 24);
  char v16 = *(unsigned char *)(v9 + 32);
  long long v17 = *(_OWORD *)(v10 + 16);
  *(_OWORD *)uint64_t v9 = *(_OWORD *)v10;
  *(_OWORD *)(v9 + 16) = v17;
  *(unsigned char *)(v9 + 32) = v11;
  outlined consume of TableColumnCustomizationID.Base(v12, v13, v14, v15, v16);
  *(void *)(a1 + v7[6]) = *(void *)(a2 + v7[6]);
  uint64_t v18 = v7[7];
  uint64_t v19 = a1 + v18;
  uint64_t v20 = a2 + v18;
  long long v21 = *(_OWORD *)(v20 + 16);
  *(_OWORD *)uint64_t v19 = *(_OWORD *)v20;
  *(_OWORD *)(v19 + 16) = v21;
  *(unsigned char *)(v19 + 32) = *(unsigned char *)(v20 + 32);
  *(unsigned char *)(a1 + v7[8]) = *(unsigned char *)(a2 + v7[8]);
  *(unsigned char *)(a1 + v7[9]) = *(unsigned char *)(a2 + v7[9]);
  *(unsigned char *)(a1 + v7[10]) = *(unsigned char *)(a2 + v7[10]);
  uint64_t v22 = v7[11];
  uint64_t v23 = a1 + v22;
  uint64_t v24 = a2 + v22;
  if (!*(void *)(a1 + v22 + 24)) {
    goto LABEL_5;
  }
  if (!*(void *)(v24 + 24))
  {
    outlined destroy of SwiftUIAnySortComparator(v23);
LABEL_5:
    long long v27 = *(_OWORD *)(v24 + 80);
    *(_OWORD *)(v23 + 64) = *(_OWORD *)(v24 + 64);
    *(_OWORD *)(v23 + 80) = v27;
    *(_OWORD *)(v23 + 96) = *(_OWORD *)(v24 + 96);
    *(void *)(v23 + 112) = *(void *)(v24 + 112);
    long long v28 = *(_OWORD *)(v24 + 16);
    *(_OWORD *)uint64_t v23 = *(_OWORD *)v24;
    *(_OWORD *)(v23 + 16) = v28;
    long long v29 = *(_OWORD *)(v24 + 48);
    *(_OWORD *)(v23 + 32) = *(_OWORD *)(v24 + 32);
    *(_OWORD *)(v23 + 48) = v29;
    goto LABEL_6;
  }
  __swift_destroy_boxed_opaque_existential_1(v23);
  long long v25 = *(_OWORD *)(v24 + 16);
  *(_OWORD *)uint64_t v23 = *(_OWORD *)v24;
  *(_OWORD *)(v23 + 16) = v25;
  __swift_destroy_boxed_opaque_existential_1(v23 + 32);
  long long v26 = *(_OWORD *)(v24 + 48);
  *(_OWORD *)(v23 + 32) = *(_OWORD *)(v24 + 32);
  *(_OWORD *)(v23 + 48) = v26;
  *(void *)(v23 + 64) = *(void *)(v24 + 64);
  *(_OWORD *)(v23 + 72) = *(_OWORD *)(v24 + 72);
  swift_release();
  *(_OWORD *)(v23 + 88) = *(_OWORD *)(v24 + 88);
  swift_release();
  *(_OWORD *)(v23 + 104) = *(_OWORD *)(v24 + 104);
  swift_release();
LABEL_6:
  *(void *)(a1 + v7[12]) = *(void *)(a2 + v7[12]);
  swift_release();
  uint64_t v30 = a3[6];
  *(void *)(a1 + a3[5]) = *(void *)(a2 + a3[5]);
  uint64_t v31 = a1 + v30;
  uint64_t v32 = a2 + v30;
  *(void *)(a1 + v30) = *(void *)(a2 + v30);
  swift_release();
  *(void *)(v31 + 8) = *(void *)(v32 + 8);
  swift_release();
  *(void *)(v31 + 16) = *(void *)(v32 + 16);
  swift_bridgeObjectRelease();
  *(void *)(a1 + a3[7]) = *(void *)(a2 + a3[7]);
  return a1;
}

uint64_t getEnumTagSinglePayload for SortableTableHeaderButton(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1876BCFEC);
}

uint64_t sub_1876BCFEC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for TableColumnCollection.Entry(0);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 24) + 8);
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    return (v10 + 1);
  }
}

uint64_t storeEnumTagSinglePayload for SortableTableHeaderButton(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1876BD0C4);
}

uint64_t sub_1876BD0C4(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for TableColumnCollection.Entry(0);
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 24) + 8) = (a2 - 1);
  }
  return result;
}

uint64_t type metadata completion function for SortableTableHeaderButton()
{
  uint64_t result = type metadata accessor for TableColumnCollection.Entry(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_1876BD228()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<AnyView, _PaddingLayout>, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<AnyView, _PaddingLayout>, AccessibilityAttachmentModifier>, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<AnyView, _PaddingLayout> and conformance <> ModifiedContent<A, B>);
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout> and conformance <> ModifiedContent<A, B>(unint64_t *a1, void (*a2)(uint64_t), void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    a3();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void type metadata accessor for ModifiedContent<ModifiedContent<AnyView, _PaddingLayout>, AccessibilityAttachmentModifier>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<AnyView, _PaddingLayout>, AccessibilityAttachmentModifier>)
  {
    type metadata accessor for EnvironmentPropertyKey<TableHeaderLeadingMarginKey>(255, &lazy cache variable for type metadata for ModifiedContent<AnyView, _PaddingLayout>, MEMORY[0x1E4F41618], MEMORY[0x1E4F3FA80], MEMORY[0x1E4F3FBA0]);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<AnyView, _PaddingLayout>, AccessibilityAttachmentModifier>);
    }
  }
}

uint64_t sub_1876BD384()
{
  return lazy protocol witness table accessor for type Button<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _PaddingLayout>, _FlexFrameLayout>> and conformance Button<A>(&lazy protocol witness table cache variable for type HStack<TupleView<(ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, _DefaultForegroundStyleModifier<AnyShapeStyle>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>, LabelStyleConfiguration.Title)>> and conformance HStack<A>, type metadata accessor for HStack<TupleView<(ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, _DefaultForegroundStyleModifier<AnyShapeStyle>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>, LabelStyleConfiguration.Title)>>);
}

void type metadata accessor for HStack<TupleView<(ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, _DefaultForegroundStyleModifier<AnyShapeStyle>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>, LabelStyleConfiguration.Title)>>(uint64_t a1)
{
}

void type metadata accessor for HStack<TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>>(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t), unint64_t *a4, void (*a5)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    lazy protocol witness table accessor for type Button<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _PaddingLayout>, _FlexFrameLayout>> and conformance Button<A>(a4, a5);
    unint64_t v8 = type metadata accessor for HStack();
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

void type metadata accessor for TupleView<(ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, _DefaultForegroundStyleModifier<AnyShapeStyle>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>, LabelStyleConfiguration.Title)>(uint64_t a1)
{
}

void type metadata accessor for (ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, _DefaultForegroundStyleModifier<AnyShapeStyle>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>, LabelStyleConfiguration.Title)()
{
  if (!lazy cache variable for type metadata for (ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, _DefaultForegroundStyleModifier<AnyShapeStyle>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>, LabelStyleConfiguration.Title))
  {
    type metadata accessor for _ConditionalContent<_ConditionalContent<TupleView<(ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>>)>>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>>(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, _DefaultForegroundStyleModifier<AnyShapeStyle>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<LabelStyleConfiguration.Icon, _DefaultForegroundStyleModifier<AnyShapeStyle>>, (uint64_t (*)(uint64_t))type metadata accessor for _EnvironmentKeyTransformModifier<[AnyFontModifier]>, MEMORY[0x1E4F3FBA0]);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, _DefaultForegroundStyleModifier<AnyShapeStyle>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>, LabelStyleConfiguration.Title));
    }
  }
}

void type metadata accessor for _EnvironmentKeyTransformModifier<[AnyFontModifier]>(uint64_t a1)
{
}

void type metadata accessor for [AnyFontModifier](uint64_t a1)
{
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<_ConditionalContent<_ConditionalContent<TupleView<(ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>>)>>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>>>, _PaddingLayout>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Int?>>, StyleContextWriter<TableStyleContext>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<_ConditionalContent<_ConditionalContent<TupleView<(ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>>)>>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>>>, _PaddingLayout>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Int?>>, StyleContextWriter<TableStyleContext>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<_ConditionalContent<_ConditionalContent<TupleView<(ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>>)>>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>>>, _PaddingLayout>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Int?>>, StyleContextWriter<TableStyleContext>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<_ConditionalContent<_ConditionalContent<TupleView<(ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>>)>>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>>>, _PaddingLayout>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Int?>>, StyleContextWriter<TableStyleContext>>();
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<HStack<_ConditionalContent<_ConditionalContent<TupleView<(ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>>)>>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>>>, _PaddingLayout>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Int?>> and conformance <> ModifiedContent<A, B>();
    lazy protocol witness table accessor for type StyleContextWriter<TableStyleContext> and conformance StyleContextWriter<A>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<_ConditionalContent<_ConditionalContent<TupleView<(ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>>)>>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>>>, _PaddingLayout>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Int?>>, StyleContextWriter<TableStyleContext>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t associated type witness table accessor for View.Body : View in StaticTableHeaderButton()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for View.Body : View in SortableTableHeaderButton()
{
  return swift_getOpaqueTypeConformance2();
}

void type metadata accessor for Button<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _PaddingLayout>, _FlexFrameLayout>>()
{
  if (!lazy cache variable for type metadata for Button<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _PaddingLayout>, _FlexFrameLayout>>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<AnyView>, _DefaultForegroundStyleModifier<AnyShapeStyle>>, _PaddingLayout>, _FlexFrameLayout>, AccessibilityAttachmentModifier>(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _PaddingLayout>, _FlexFrameLayout>, type metadata accessor for ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _PaddingLayout>);
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _PaddingLayout>, _FlexFrameLayout> and conformance <> ModifiedContent<A, B>();
    unint64_t v0 = type metadata accessor for Button();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Button<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _PaddingLayout>, _FlexFrameLayout>>);
    }
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _PaddingLayout>(uint64_t a1)
{
}

void type metadata accessor for ModifiedContent<HStack<TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>>, _EnvironmentKeyWritingModifier<Image.Scale>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<HStack<TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>>, _EnvironmentKeyWritingModifier<Image.Scale>>)
  {
    type metadata accessor for HStack<TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>>(255);
    type metadata accessor for [SwiftUIAnySortComparator](255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Image.Scale>, MEMORY[0x1E4F41528], MEMORY[0x1E4F411E8]);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<HStack<TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>>, _EnvironmentKeyWritingModifier<Image.Scale>>);
    }
  }
}

void type metadata accessor for HStack<TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>>(uint64_t a1)
{
}

void type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(uint64_t a1)
{
}

void type metadata accessor for (ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)(uint64_t a1)
{
}

void type metadata accessor for (VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>>)(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t), void (*a4)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    a4(255);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v7) {
      atomic_store(TupleTypeMetadata2, a2);
    }
  }
}

void type metadata accessor for ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>)
  {
    type metadata accessor for EnvironmentPropertyKey<TableHeaderLeadingMarginKey>(255, &lazy cache variable for type metadata for _TraitWritingModifier<LayoutPriorityTraitKey>, MEMORY[0x1E4F40980], MEMORY[0x1E4F40978], MEMORY[0x1E4F408B8]);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>);
    }
  }
}

void type metadata accessor for _ConditionalContent<Image, Image>?()
{
  if (!lazy cache variable for type metadata for _ConditionalContent<Image, Image>?)
  {
    type metadata accessor for EnvironmentPropertyKey<TableHeaderLeadingMarginKey>(255, &lazy cache variable for type metadata for _ConditionalContent<Image, Image>, MEMORY[0x1E4F41558], MEMORY[0x1E4F41558], MEMORY[0x1E4F40578]);
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ConditionalContent<Image, Image>?);
    }
  }
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _PaddingLayout>, _FlexFrameLayout> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _PaddingLayout>, _FlexFrameLayout> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _PaddingLayout>, _FlexFrameLayout> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<AnyView>, _DefaultForegroundStyleModifier<AnyShapeStyle>>, _PaddingLayout>, _FlexFrameLayout>, AccessibilityAttachmentModifier>(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _PaddingLayout>, _FlexFrameLayout>, type metadata accessor for ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _PaddingLayout>);
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _PaddingLayout> and conformance <> ModifiedContent<A, B>, type metadata accessor for ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _PaddingLayout>, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<HStack<TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>>, _EnvironmentKeyWritingModifier<Image.Scale>> and conformance <> ModifiedContent<A, B>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _PaddingLayout>, _FlexFrameLayout> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<HStack<TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>>, _EnvironmentKeyWritingModifier<Image.Scale>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<HStack<TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>>, _EnvironmentKeyWritingModifier<Image.Scale>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<HStack<TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>>, _EnvironmentKeyWritingModifier<Image.Scale>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<HStack<TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>>, _EnvironmentKeyWritingModifier<Image.Scale>>();
    lazy protocol witness table accessor for type Button<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _PaddingLayout>, _FlexFrameLayout>> and conformance Button<A>(&lazy protocol witness table cache variable for type HStack<TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>> and conformance HStack<A>, type metadata accessor for HStack<TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>>);
    lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<Image.Scale> and conformance _EnvironmentKeyWritingModifier<A>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<HStack<TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>>, _EnvironmentKeyWritingModifier<Image.Scale>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<Button<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _PaddingLayout>, _FlexFrameLayout>>, AccessibilityAttachmentModifier>(uint64_t a1)
{
}

void type metadata accessor for ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _PaddingLayout>, _FlexFrameLayout>>, AccessibilityAttachmentModifier>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _PaddingLayout>, _FlexFrameLayout>>, AccessibilityAttachmentModifier>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>>)
  {
    type metadata accessor for ModifiedContent<Button<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _PaddingLayout>, _FlexFrameLayout>>, AccessibilityAttachmentModifier>(255);
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type PlainButtonStyle and conformance PlainButtonStyle, (uint64_t)&type metadata for PlainButtonStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PrimitiveButtonStyleContainerModifier);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _PaddingLayout>, _FlexFrameLayout>>, AccessibilityAttachmentModifier>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>>);
    }
  }
}

void type metadata accessor for StaticIf<IsVisionEnabledPredicate, ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _PaddingLayout>, _FlexFrameLayout>>, AccessibilityAttachmentModifier>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>>, ModifiedContent<Button<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _PaddingLayout>, _FlexFrameLayout>>, AccessibilityAttachmentModifier>>()
{
  if (!lazy cache variable for type metadata for StaticIf<IsVisionEnabledPredicate, ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _PaddingLayout>, _FlexFrameLayout>>, AccessibilityAttachmentModifier>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>>, ModifiedContent<Button<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _PaddingLayout>, _FlexFrameLayout>>, AccessibilityAttachmentModifier>>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _PaddingLayout>, _FlexFrameLayout>>, AccessibilityAttachmentModifier>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>>();
    type metadata accessor for ModifiedContent<Button<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _PaddingLayout>, _FlexFrameLayout>>, AccessibilityAttachmentModifier>(255);
    unint64_t v0 = type metadata accessor for StaticIf();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for StaticIf<IsVisionEnabledPredicate, ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _PaddingLayout>, _FlexFrameLayout>>, AccessibilityAttachmentModifier>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>>, ModifiedContent<Button<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _PaddingLayout>, _FlexFrameLayout>>, AccessibilityAttachmentModifier>>);
    }
  }
}

uint64_t objectdestroy_33Tm()
{
  uint64_t v1 = *(void *)(type metadata accessor for SortableTableHeaderButton(0) - 8);
  uint64_t v2 = v0 + ((*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80));
  uint64_t v3 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(v2, v3);
  uint64_t v4 = type metadata accessor for TableColumnCollection.Entry(0);
  uint64_t v5 = v2 + *(int *)(v4 + 20);
  outlined consume of TableColumnCustomizationID.Base(*(void *)v5, *(void *)(v5 + 8), *(void *)(v5 + 16), *(void *)(v5 + 24), *(unsigned char *)(v5 + 32));
  uint64_t v6 = v2 + *(int *)(v4 + 44);
  if (*(void *)(v6 + 24))
  {
    __swift_destroy_boxed_opaque_existential_1(v2 + *(int *)(v4 + 44));
    __swift_destroy_boxed_opaque_existential_1(v6 + 32);
    swift_release();
    swift_release();
    swift_release();
  }
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in SortableTableHeaderButton.sortableButton.getter()
{
  uint64_t v1 = *(void *)(type metadata accessor for SortableTableHeaderButton(0) - 8);
  uint64_t v2 = v0 + ((*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80));

  return closure #1 in SortableTableHeaderButton.sortableButton.getter(v2);
}

uint64_t outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<_ConditionalContent<_ConditionalContent<TupleView<(ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>>)>>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>>>, _PaddingLayout>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Int?>>, StyleContextWriter<TableStyleContext>>(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

unint64_t lazy protocol witness table accessor for type AccessibilityPropertiesEntry<AccessibilityTableContext?> and conformance AccessibilityPropertiesEntry<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type AccessibilityPropertiesEntry<AccessibilityTableContext?> and conformance AccessibilityPropertiesEntry<A>;
  if (!lazy protocol witness table cache variable for type AccessibilityPropertiesEntry<AccessibilityTableContext?> and conformance AccessibilityPropertiesEntry<A>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Font?>(255, (unint64_t *)&lazy cache variable for type metadata for AccessibilityPropertiesEntry<AccessibilityTableContext?>, &lazy cache variable for type metadata for AccessibilityTableContext?, (uint64_t)&type metadata for AccessibilityTableContext, MEMORY[0x1E4F41090]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityPropertiesEntry<AccessibilityTableContext?> and conformance AccessibilityPropertiesEntry<A>);
  }
  return result;
}

uint64_t sub_1876BDF98()
{
  if (!*(unsigned char *)(v0 + 56)) {
    __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  }

  return swift_deallocObject();
}

uint64_t outlined consume of _ConditionalContent<Image, Image>?(uint64_t a1, char a2)
{
  if (a2 != -1) {
    return swift_release();
  }
  return result;
}

uint64_t outlined copy of _ConditionalContent<Image, Image>?(uint64_t a1, char a2)
{
  if (a2 != -1) {
    return swift_retain();
  }
  return result;
}

void type metadata accessor for VStack<TableHeaderViewCore>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void), uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v9 = a3();
    unint64_t v10 = a5(a1, a4, v9);
    if (!v11) {
      atomic_store(v10, a2);
    }
  }
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _PaddingLayout>, _FlexFrameLayout>>, AccessibilityAttachmentModifier>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _PaddingLayout>, _FlexFrameLayout>>, AccessibilityAttachmentModifier>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _PaddingLayout>, _FlexFrameLayout>>, AccessibilityAttachmentModifier>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _PaddingLayout>, _FlexFrameLayout>>, AccessibilityAttachmentModifier>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>>();
    lazy protocol witness table accessor for type ModifiedContent<Button<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _PaddingLayout>, _FlexFrameLayout>>, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>();
    lazy protocol witness table accessor for type PrimitiveButtonStyleContainerModifier<PlainButtonStyle> and conformance PrimitiveButtonStyleContainerModifier<A>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _PaddingLayout>, _FlexFrameLayout>>, AccessibilityAttachmentModifier>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<Button<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _PaddingLayout>, _FlexFrameLayout>>, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<Button<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _PaddingLayout>, _FlexFrameLayout>>, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<Button<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _PaddingLayout>, _FlexFrameLayout>>, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<Button<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _PaddingLayout>, _FlexFrameLayout>>, AccessibilityAttachmentModifier>(255);
    lazy protocol witness table accessor for type Button<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _PaddingLayout>, _FlexFrameLayout>> and conformance Button<A>(&lazy protocol witness table cache variable for type Button<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _PaddingLayout>, _FlexFrameLayout>> and conformance Button<A>, (void (*)(uint64_t))type metadata accessor for Button<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _PaddingLayout>, _FlexFrameLayout>>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<Button<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _PaddingLayout>, _FlexFrameLayout>>, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PrimitiveButtonStyleContainerModifier<PlainButtonStyle> and conformance PrimitiveButtonStyleContainerModifier<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type PrimitiveButtonStyleContainerModifier<PlainButtonStyle> and conformance PrimitiveButtonStyleContainerModifier<A>;
  if (!lazy protocol witness table cache variable for type PrimitiveButtonStyleContainerModifier<PlainButtonStyle> and conformance PrimitiveButtonStyleContainerModifier<A>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type PlainButtonStyle and conformance PlainButtonStyle, (uint64_t)&type metadata for PlainButtonStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PrimitiveButtonStyleContainerModifier);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PrimitiveButtonStyleContainerModifier<PlainButtonStyle> and conformance PrimitiveButtonStyleContainerModifier<A>);
  }
  return result;
}

uint64_t outlined retain of ModifiedContent<ModifiedContent<ModifiedContent<HStack<AnyView>, _DefaultForegroundStyleModifier<AnyShapeStyle>>, _PaddingLayout>, _FlexFrameLayout>(uint64_t a1)
{
  return a1;
}

uint64_t outlined release of ModifiedContent<ModifiedContent<ModifiedContent<HStack<AnyView>, _DefaultForegroundStyleModifier<AnyShapeStyle>>, _PaddingLayout>, _FlexFrameLayout>(uint64_t a1)
{
  return a1;
}

uint64_t outlined retain of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<AnyView>, _DefaultForegroundStyleModifier<AnyShapeStyle>>, _PaddingLayout>, _FlexFrameLayout>, AccessibilityAttachmentModifier>(uint64_t a1)
{
  return a1;
}

uint64_t outlined release of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<AnyView>, _DefaultForegroundStyleModifier<AnyShapeStyle>>, _PaddingLayout>, _FlexFrameLayout>, AccessibilityAttachmentModifier>(uint64_t a1)
{
  return a1;
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<HStack<AnyView>, _DefaultForegroundStyleModifier<AnyShapeStyle>>, _PaddingLayout>, _FlexFrameLayout>(uint64_t a1)
{
}

void type metadata accessor for ModifiedContent<ModifiedContent<HStack<AnyView>, _DefaultForegroundStyleModifier<AnyShapeStyle>>, _PaddingLayout>(uint64_t a1)
{
}

void type metadata accessor for ModifiedContent<HStack<AnyView>, _DefaultForegroundStyleModifier<AnyShapeStyle>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<HStack<AnyView>, _DefaultForegroundStyleModifier<AnyShapeStyle>>)
  {
    type metadata accessor for EnvironmentPropertyKey<TableHeaderLeadingMarginKey>(255, &lazy cache variable for type metadata for HStack<AnyView>, MEMORY[0x1E4F41618], MEMORY[0x1E4F41610], MEMORY[0x1E4F415B8]);
    type metadata accessor for EnvironmentPropertyKey<TableHeaderLeadingMarginKey>(255, &lazy cache variable for type metadata for _DefaultForegroundStyleModifier<AnyShapeStyle>, MEMORY[0x1E4F3F700], MEMORY[0x1E4F3F6F8], MEMORY[0x1E4F41250]);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<HStack<AnyView>, _DefaultForegroundStyleModifier<AnyShapeStyle>>);
    }
  }
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<HStack<AnyView>, _DefaultForegroundStyleModifier<AnyShapeStyle>>, _PaddingLayout> and conformance <> ModifiedContent<A, B>()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<HStack<AnyView>, _DefaultForegroundStyleModifier<AnyShapeStyle>>, _PaddingLayout> and conformance <> ModifiedContent<A, B>, type metadata accessor for ModifiedContent<ModifiedContent<HStack<AnyView>, _DefaultForegroundStyleModifier<AnyShapeStyle>>, _PaddingLayout>, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<HStack<AnyView>, _DefaultForegroundStyleModifier<AnyShapeStyle>> and conformance <> ModifiedContent<A, B>);
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<HStack<AnyView>, _DefaultForegroundStyleModifier<AnyShapeStyle>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<HStack<AnyView>, _DefaultForegroundStyleModifier<AnyShapeStyle>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<HStack<AnyView>, _DefaultForegroundStyleModifier<AnyShapeStyle>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<HStack<AnyView>, _DefaultForegroundStyleModifier<AnyShapeStyle>>();
    lazy protocol witness table accessor for type HStack<AnyView> and conformance HStack<A>();
    lazy protocol witness table accessor for type _DefaultForegroundStyleModifier<AnyShapeStyle> and conformance _DefaultForegroundStyleModifier<A>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<HStack<AnyView>, _DefaultForegroundStyleModifier<AnyShapeStyle>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type HStack<AnyView> and conformance HStack<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type HStack<AnyView> and conformance HStack<A>;
  if (!lazy protocol witness table cache variable for type HStack<AnyView> and conformance HStack<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<TableHeaderLeadingMarginKey>(255, &lazy cache variable for type metadata for HStack<AnyView>, MEMORY[0x1E4F41618], MEMORY[0x1E4F41610], MEMORY[0x1E4F415B8]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HStack<AnyView> and conformance HStack<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type StaticIf<IsVisionEnabledPredicate, ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _PaddingLayout>, _FlexFrameLayout>>, AccessibilityAttachmentModifier>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>>, ModifiedContent<Button<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _PaddingLayout>, _FlexFrameLayout>>, AccessibilityAttachmentModifier>> and conformance <> StaticIf<A, B, C>()
{
  unint64_t result = lazy protocol witness table cache variable for type StaticIf<IsVisionEnabledPredicate, ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _PaddingLayout>, _FlexFrameLayout>>, AccessibilityAttachmentModifier>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>>, ModifiedContent<Button<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _PaddingLayout>, _FlexFrameLayout>>, AccessibilityAttachmentModifier>> and conformance <> StaticIf<A, B, C>;
  if (!lazy protocol witness table cache variable for type StaticIf<IsVisionEnabledPredicate, ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _PaddingLayout>, _FlexFrameLayout>>, AccessibilityAttachmentModifier>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>>, ModifiedContent<Button<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _PaddingLayout>, _FlexFrameLayout>>, AccessibilityAttachmentModifier>> and conformance <> StaticIf<A, B, C>)
  {
    type metadata accessor for StaticIf<IsVisionEnabledPredicate, ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _PaddingLayout>, _FlexFrameLayout>>, AccessibilityAttachmentModifier>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>>, ModifiedContent<Button<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _PaddingLayout>, _FlexFrameLayout>>, AccessibilityAttachmentModifier>>();
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _PaddingLayout>, _FlexFrameLayout>>, AccessibilityAttachmentModifier>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>> and conformance <> ModifiedContent<A, B>();
    lazy protocol witness table accessor for type ModifiedContent<Button<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _PaddingLayout>, _FlexFrameLayout>>, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StaticIf<IsVisionEnabledPredicate, ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _PaddingLayout>, _FlexFrameLayout>>, AccessibilityAttachmentModifier>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>>, ModifiedContent<Button<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _PaddingLayout>, _FlexFrameLayout>>, AccessibilityAttachmentModifier>> and conformance <> StaticIf<A, B, C>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<AnyView>, _DefaultForegroundStyleModifier<AnyShapeStyle>>, _PaddingLayout>, _FlexFrameLayout>, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<AnyView>, _DefaultForegroundStyleModifier<AnyShapeStyle>>, _PaddingLayout>, _FlexFrameLayout>, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<AnyView>, _DefaultForegroundStyleModifier<AnyShapeStyle>>, _PaddingLayout>, _FlexFrameLayout>, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<AnyView>, _DefaultForegroundStyleModifier<AnyShapeStyle>>, _PaddingLayout>, _FlexFrameLayout>, AccessibilityAttachmentModifier>(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<AnyView>, _DefaultForegroundStyleModifier<AnyShapeStyle>>, _PaddingLayout>, _FlexFrameLayout>, AccessibilityAttachmentModifier>, type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<HStack<AnyView>, _DefaultForegroundStyleModifier<AnyShapeStyle>>, _PaddingLayout>, _FlexFrameLayout>);
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<HStack<AnyView>, _DefaultForegroundStyleModifier<AnyShapeStyle>>, _PaddingLayout>, _FlexFrameLayout> and conformance <> ModifiedContent<A, B>, type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<HStack<AnyView>, _DefaultForegroundStyleModifier<AnyShapeStyle>>, _PaddingLayout>, _FlexFrameLayout>, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<HStack<AnyView>, _DefaultForegroundStyleModifier<AnyShapeStyle>>, _PaddingLayout> and conformance <> ModifiedContent<A, B>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<AnyView>, _DefaultForegroundStyleModifier<AnyShapeStyle>>, _PaddingLayout>, _FlexFrameLayout>, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

SwiftUI::CarouselTabViewStyle __swiftcall CarouselTabViewStyle.init()()
{
  SwiftUI::CarouselTabViewStyle v0 = (SwiftUI::CarouselTabViewStyle)_diagnoseUnavailableCodeReached()();
  __break(1u);
  return v0;
}

SwiftUI::CarouselTabViewStyle __swiftcall CarouselTabViewStyle.init(crownIndicatorMode:)(SwiftUI::CarouselTabViewStyle::CrownIndicatorMode crownIndicatorMode)
{
  SwiftUI::CarouselTabViewStyle v1 = (SwiftUI::CarouselTabViewStyle)_diagnoseUnavailableCodeReached()();
  __break(1u);
  return v1;
}

void static TabViewStyle<>.carousel(pagingStyle:)()
{
}

SwiftUI::CarouselTabViewStyle __swiftcall CarouselTabViewStyle.init(pagingStyle:)(SwiftUI::CarouselTabViewStyle::PagingStyle pagingStyle)
{
  SwiftUI::CarouselTabViewStyle v1 = (SwiftUI::CarouselTabViewStyle)_diagnoseUnavailableCodeReached()();
  __break(1u);
  return v1;
}

void static CarouselTabViewStyle.PagingStyle.blur.getter()
{
}

void static CarouselTabViewStyle._makeView<A>(value:inputs:)()
{
}

void static CarouselTabViewStyle._makeViewList<A>(value:inputs:)()
{
}

uint64_t getEnumTagSinglePayload for CarouselTabViewStyle(unsigned __int16 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFE) {
    goto LABEL_17;
  }
  if (a2 + 65282 <= 0xFFFEFFFF) {
    int v2 = 2;
  }
  else {
    int v2 = 4;
  }
  if (a2 + 65282 < 0xFF0000) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 16)) - 65282;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 16)) - 65282;
    }
    int v4 = *((unsigned __int8 *)a1 + 2);
    if (*((unsigned char *)a1 + 2)) {
      return (*a1 | (v4 << 16)) - 65282;
    }
  }
LABEL_17:
  unsigned int v6 = *(unsigned __int8 *)a1;
  BOOL v7 = v6 >= 3;
  int v8 = v6 - 3;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for CarouselTabViewStyle(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a3 + 65282 <= 0xFFFEFFFF) {
    int v3 = 2;
  }
  else {
    int v3 = 4;
  }
  if (a3 + 65282 < 0xFF0000) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 16) + 1;
    *(_WORD *)unint64_t result = a2 - 254;
    switch(v5)
    {
      case 1:
        *(unsigned char *)(result + 2) = v6;
        break;
      case 2:
        *(_WORD *)(result + 2) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1876BE8BCLL);
      case 4:
        *(_DWORD *)(result + 2) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        *(unsigned char *)(result + 2) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 2) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 2) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *(unsigned char *)unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CarouselTabViewStyle()
{
  return &type metadata for CarouselTabViewStyle;
}

ValueMetadata *type metadata accessor for CarouselTabViewStyle.CrownIndicatorMode()
{
  return &type metadata for CarouselTabViewStyle.CrownIndicatorMode;
}

ValueMetadata *type metadata accessor for CarouselTabViewStyle.PagingStyle()
{
  return &type metadata for CarouselTabViewStyle.PagingStyle;
}

ValueMetadata *type metadata accessor for CarouselTabViewStyle.PagingStyle.Backing()
{
  return &type metadata for CarouselTabViewStyle.PagingStyle.Backing;
}

unsigned char *storeEnumTagSinglePayload for CarouselTabViewStyle.CrownIndicatorMode(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1876BE9F4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CarouselTabViewStyle.CrownIndicatorMode.CarouselCrownIndicatorMode()
{
  return &type metadata for CarouselTabViewStyle.CrownIndicatorMode.CarouselCrownIndicatorMode;
}

unint64_t lazy protocol witness table accessor for type CarouselTabViewStyle.CrownIndicatorMode.CarouselCrownIndicatorMode and conformance CarouselTabViewStyle.CrownIndicatorMode.CarouselCrownIndicatorMode()
{
  unint64_t result = lazy protocol witness table cache variable for type CarouselTabViewStyle.CrownIndicatorMode.CarouselCrownIndicatorMode and conformance CarouselTabViewStyle.CrownIndicatorMode.CarouselCrownIndicatorMode;
  if (!lazy protocol witness table cache variable for type CarouselTabViewStyle.CrownIndicatorMode.CarouselCrownIndicatorMode and conformance CarouselTabViewStyle.CrownIndicatorMode.CarouselCrownIndicatorMode)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CarouselTabViewStyle.CrownIndicatorMode.CarouselCrownIndicatorMode and conformance CarouselTabViewStyle.CrownIndicatorMode.CarouselCrownIndicatorMode);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type CarouselTabViewStyle.PagingStyle.Backing and conformance CarouselTabViewStyle.PagingStyle.Backing()
{
  unint64_t result = lazy protocol witness table cache variable for type CarouselTabViewStyle.PagingStyle.Backing and conformance CarouselTabViewStyle.PagingStyle.Backing;
  if (!lazy protocol witness table cache variable for type CarouselTabViewStyle.PagingStyle.Backing and conformance CarouselTabViewStyle.PagingStyle.Backing)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CarouselTabViewStyle.PagingStyle.Backing and conformance CarouselTabViewStyle.PagingStyle.Backing);
  }
  return result;
}

void static CarouselTabViewStyle.CrownIndicatorMode.pageDots.getter()
{
}

void static CarouselTabViewStyle.CrownIndicatorMode.default.getter()
{
}

void static CarouselTabViewStyle.CrownIndicatorMode.system.getter()
{
}

void static CarouselTabViewStyle.PagingStyle.default.getter()
{
}

void static CarouselTabViewStyle.PagingStyle.rotate.getter()
{
}

void static CarouselTabViewStyle.PagingStyle.plain.getter()
{
}

void static TabViewStyle<>.carousel(crownIndicatorMode:)()
{
}

uint64_t PlatformDocument.documentBox.getter()
{
  return swift_unknownObjectRetain();
}

char *PlatformDocument.__allocating_init(fileURL:documentBoxType:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v7 = objc_allocWithZone(v3);
  return PlatformDocument.init(fileURL:documentBoxType:)(a1, a2, a3);
}

char *PlatformDocument.init(fileURL:documentBoxType:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  type metadata accessor for URL?(0, (unint64_t *)&lazy cache variable for type metadata for URL?, MEMORY[0x1E4F276F0]);
  MEMORY[0x1F4188790](v7 - 8);
  uint64_t v9 = (char *)&v35 - v8;
  *(void *)&v3[OBJC_IVAR____TtC7SwiftUI16PlatformDocument_notificationObserver] = 0;
  unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t))(a3 + 16);
  uint64_t v11 = v3;
  uint64_t v12 = v10(a2, a3);
  uint64_t v13 = (uint64_t *)&v11[OBJC_IVAR____TtC7SwiftUI16PlatformDocument_documentBox];
  *uint64_t v13 = v12;
  v13[1] = a3;

  uint64_t v36 = a1;
  URL._bridgeToObjectiveC()(v14);
  char v16 = v15;
  long long v17 = (objc_class *)type metadata accessor for PlatformDocument();
  v38.receiver = v11;
  v38.super_class = v17;
  uint64_t v18 = (char *)objc_msgSendSuper2(&v38, sel_initWithFileURL_, v16);

  uint64_t v19 = &v18[OBJC_IVAR____TtC7SwiftUI16PlatformDocument_documentBox];
  uint64_t v20 = *(void *)&v18[OBJC_IVAR____TtC7SwiftUI16PlatformDocument_documentBox + 8];
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v22 = type metadata accessor for URL();
  uint64_t v23 = *(void *)(v22 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v23 + 16))(v9, a1, v22);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v23 + 56))(v9, 0, 1, v22);
  uint64_t v24 = *(void (**)(char *, uint64_t, uint64_t))(v20 + 64);
  long long v25 = v18;
  v24(v9, ObjectType, v20);
  swift_unknownObjectRetain();
  (*(void (**)(BOOL, uint64_t, uint64_t))(v20 + 88))(objc_msgSend(v25, sel_documentState) == 0, ObjectType, v20);
  swift_unknownObjectRelease();
  uint64_t v26 = *((void *)v19 + 1);
  uint64_t v27 = swift_getObjectType();
  swift_unknownObjectRetain();
  (*(void (**)(id, uint64_t, uint64_t))(v26 + 112))(objc_msgSend(v25, sel_undoManager), v27, v26);
  swift_unknownObjectRelease();
  id v28 = objc_msgSend(self, sel_defaultCenter);
  uint64_t v29 = *MEMORY[0x1E4FB2840];
  uint64_t v30 = swift_allocObject();
  swift_unknownObjectWeakInit();
  aBlock[4] = partial apply for closure #1 in PlatformDocument.init(fileURL:documentBoxType:);
  aBlock[5] = v30;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable (@in_guaranteed Notification) -> ();
  aBlock[3] = &block_descriptor;
  uint64_t v31 = _Block_copy(aBlock);
  uint64_t v32 = v25;
  swift_release();
  id v33 = objc_msgSend(v28, sel_addObserverForName_object_queue_usingBlock_, v29, v32, 0, v31);

  _Block_release(v31);
  (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v36, v22);
  *(void *)&v32[OBJC_IVAR____TtC7SwiftUI16PlatformDocument_notificationObserver] = v33;
  swift_unknownObjectRelease();
  return v32;
}

uint64_t type metadata accessor for PlatformDocument()
{
  return self;
}

uint64_t closure #1 in PlatformDocument.init(fileURL:documentBoxType:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2 + 16;
  swift_beginAccess();
  uint64_t result = MEMORY[0x18C119DF0](v2);
  if (result)
  {
    unsigned int v4 = (void *)result;
    uint64_t v5 = *(void *)(result + OBJC_IVAR____TtC7SwiftUI16PlatformDocument_documentBox + 8);
    uint64_t ObjectType = swift_getObjectType();
    swift_unknownObjectRetain();
    (*(void (**)(BOOL, uint64_t, uint64_t))(v5 + 88))(objc_msgSend(v4, sel_documentState) == 0, ObjectType, v5);

    return swift_unknownObjectRelease();
  }
  return result;
}

id PlatformDocument.__deallocating_deinit()
{
  uint64_t v1 = *(void *)&v0[OBJC_IVAR____TtC7SwiftUI16PlatformDocument_notificationObserver];
  if (v1)
  {
    uint64_t v2 = self;
    swift_unknownObjectRetain();
    id v3 = objc_msgSend(v2, sel_defaultCenter);
    objc_msgSend(v3, sel_removeObserver_, v1);
    swift_unknownObjectRelease();
  }
  v5.receiver = v0;
  v5.super_class = (Class)type metadata accessor for PlatformDocument();
  return objc_msgSendSuper2(&v5, sel_dealloc);
}

id PlatformDocument.__allocating_init(fileURL:)(uint64_t a1)
{
  id v3 = objc_allocWithZone(v1);
  URL._bridgeToObjectiveC()(v4);
  unsigned int v6 = v5;
  id v7 = objc_msgSend(v3, sel_initWithFileURL_, v5);

  uint64_t v8 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8))(a1, v8);
  return v7;
}

void PlatformDocument.init(fileURL:)()
{
}

uint64_t FileWrapperPlatformDocument.contents(forType:)@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v7 = type metadata accessor for URL();
  MEMORY[0x1F4188790](v7 - 8);
  uint64_t v9 = (char *)&v33 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for URL?(0, (unint64_t *)&lazy cache variable for type metadata for UTType?, MEMORY[0x1E4FBCEA8]);
  MEMORY[0x1F4188790](v10 - 8);
  uint64_t v12 = (char *)&v33 - v11;
  uint64_t v13 = type metadata accessor for UTType();
  uint64_t v14 = *(void *)(v13 - 8);
  MEMORY[0x1F4188790](v13);
  char v16 = (char *)&v33 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_bridgeObjectRetain();
  UTType.init(_:)();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13) == 1)
  {
    outlined destroy of UTType?((uint64_t)v12);
    uint64_t v35 = 0;
    unint64_t v36 = 0xE000000000000000;
    _StringGuts.grow(_:)(122);
    v17._countAndFlagsBits = 0x20746E65746E6F43;
    v17._object = (void *)0xED00002065707974;
    String.append(_:)(v17);
    v18._countAndFlagsBits = a1;
    v18._object = a2;
    String.append(_:)(v18);
    v19._countAndFlagsBits = 0xD00000000000006BLL;
    v19._object = (void *)0x80000001883263C0;
    String.append(_:)(v19);
    MEMORY[0x18C112B90](v35, v36);
    swift_bridgeObjectRelease();
    specialized static DocumentUtils.contentTypeNotRegisteredError()();
    return swift_willThrow();
  }
  else
  {
    id v33 = a3;
    (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v16, v12, v13);
    id v34 = v3;
    uint64_t ObjectType = swift_getObjectType();
    uint64_t result = swift_conformsToProtocol2();
    if (result)
    {
      uint64_t v22 = result;
      uint64_t v23 = *(uint64_t (**)(char *, uint64_t, uint64_t))(result + 24);
      swift_unknownObjectRetain();
      uint64_t v24 = v37;
      uint64_t v25 = v23(v16, ObjectType, v22);
      if (v24)
      {
        (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
        return swift_unknownObjectRelease();
      }
      else
      {
        uint64_t v26 = (uint64_t (*)(id))v25;
        swift_unknownObjectRelease();
        if (v26)
        {
          id v27 = objc_msgSend(v34, sel_fileURL);
          static URL._unconditionallyBridgeFromObjectiveC(_:)();

          id v28 = objc_allocWithZone(MEMORY[0x1E4F28CF0]);
          id v29 = @nonobjc NSFileWrapper.init(url:options:)((uint64_t)v9, 0);
          uint64_t v30 = v26(v29);
          uint64_t v31 = type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSFileWrapper);
          uint64_t v32 = v33;
          v33[3] = v31;
          outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?((uint64_t)v26);

          *uint64_t v32 = v30;
        }
        else
        {
          MEMORY[0x18C112B90](0xD000000000000036, 0x8000000188326430);
          specialized static DocumentUtils.serializationFailed.getter();
          swift_willThrow();
        }
        return (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v16, v13);
      }
    }
    else
    {
      __break(1u);
    }
  }
  return result;
}

uint64_t FileWrapperPlatformDocument.read(from:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for CocoaError.Code();
  MEMORY[0x1F4188790](v2 - 8);
  long long v46 = (char *)&v43 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for CocoaError();
  uint64_t v47 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  unsigned int v6 = (char *)&v43 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v48 = type metadata accessor for URL();
  uint64_t v45 = *(void *)(v48 - 8);
  MEMORY[0x1F4188790](v48);
  long long v43 = (char *)&v43 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v8);
  uint64_t v10 = (char *)&v43 - v9;
  type metadata accessor for URL?(0, (unint64_t *)&lazy cache variable for type metadata for UTType?, MEMORY[0x1E4FBCEA8]);
  MEMORY[0x1F4188790](v11 - 8);
  uint64_t v13 = (char *)&v43 - v12;
  uint64_t v14 = type metadata accessor for UTType();
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = *(void *)(v15 + 64);
  MEMORY[0x1F4188790](v14);
  Swift::String v17 = (char *)&v43 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v18);
  uint64_t v50 = (char *)&v43 - v19;
  if (URL.isFileURL.getter())
  {
    URL.swiftUI_contentType.getter();
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14) == 1)
    {
      uint64_t v20 = outlined destroy of UTType?((uint64_t)v13);
      MEMORY[0x18C109980](v20);
      specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
      lazy protocol witness table accessor for type URL and conformance URL(&lazy protocol witness table cache variable for type CocoaError and conformance CocoaError, MEMORY[0x1E4F26C20]);
      _BridgedStoredNSError.init(_:userInfo:)();
      CocoaError._nsError.getter();
      (*(void (**)(char *, uint64_t))(v47 + 8))(v6, v4);
      return swift_willThrow();
    }
    else
    {
      uint64_t v22 = v50;
      uint64_t v47 = *(void *)(v15 + 32);
      ((void (*)(char *, char *, uint64_t))v47)(v50, v13, v14);
      (*(void (**)(char *, uint64_t, uint64_t))(v45 + 16))(v10, a1, v48);
      id v23 = objc_allocWithZone(MEMORY[0x1E4F28CF0]);
      uint64_t v24 = v49;
      id v25 = @nonobjc NSFileWrapper.init(url:options:)((uint64_t)v10, 1);
      uint64_t v26 = v14;
      if (v24)
      {
        return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v22, v14);
      }
      else
      {
        id v27 = v25;
        id v57 = 0;
        uint64_t v49 = v15;
        (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v17, v22, v14);
        unint64_t v28 = (*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80);
        uint64_t v29 = v16 + v28 + 7;
        uint64_t v30 = v26;
        unint64_t v31 = v29 & 0xFFFFFFFFFFFFFFF8;
        uint64_t v32 = swift_allocObject();
        *(void *)(v32 + 16) = v44;
        *(void *)(v32 + 24) = v27;
        unint64_t v33 = v32 + v28;
        uint64_t v34 = v30;
        ((void (*)(unint64_t, char *, uint64_t))v47)(v33, v17, v30);
        *(void *)(v32 + v31) = &v57;
        uint64_t v35 = swift_allocObject();
        *(void *)(v35 + 16) = partial apply for closure #1 in FileWrapperPlatformDocument.read(from:);
        *(void *)(v35 + 24) = v32;
        uint64_t v55 = partial apply for thunk for @callee_guaranteed () -> ();
        uint64_t v56 = v35;
        uint64_t aBlock = MEMORY[0x1E4F143A8];
        unint64_t v52 = 1107296256;
        uint64_t v53 = thunk for @escaping @callee_guaranteed () -> ();
        uint64_t v54 = &block_descriptor_18;
        unint64_t v36 = _Block_copy(&aBlock);
        id v37 = v44;
        id v38 = v27;
        swift_release();
        id v39 = objc_msgSend(v37, sel__fileOpeningQueue);
        if (!v39)
        {
          type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
          id v39 = (id)static OS_dispatch_queue.main.getter();
        }
        objc_msgSend(v37, sel__performBlock_synchronouslyOnQueue_, v36, v39);
        _Block_release(v36);

        if (v57)
        {
          id v40 = v57;
          swift_willThrow();

          (*(void (**)(char *, uint64_t))(v49 + 8))(v50, v34);
          return swift_release();
        }
        else
        {
          (*(void (**)(char *, uint64_t))(v49 + 8))(v50, v34);

          return swift_release();
        }
      }
    }
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v45 + 16))(v43, a1, v48);
    uint64_t aBlock = 0;
    unint64_t v52 = 0xE000000000000000;
    _StringGuts.grow(_:)(59);
    v41._object = (void *)0x8000000188326380;
    v41._countAndFlagsBits = 0xD000000000000039;
    String.append(_:)(v41);
    lazy protocol witness table accessor for type URL and conformance URL((unint64_t *)&lazy protocol witness table cache variable for type URL and conformance URL, MEMORY[0x1E4F276F0]);
    v42._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v42);
    swift_bridgeObjectRelease();
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

uint64_t closure #1 in FileWrapperPlatformDocument.read(from:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t ObjectType = swift_getObjectType();
  uint64_t result = swift_conformsToProtocol2();
  if (result)
  {
    uint64_t v7 = result;
    uint64_t v8 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(result + 16);
    swift_unknownObjectRetain();
    v8(a2, a3, ObjectType, v7);
    return swift_unknownObjectRelease();
  }
  else
  {
    __break(1u);
  }
  return result;
}

char *FileWrapperPlatformDocument.__allocating_init(fileURL:documentBoxType:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = type metadata accessor for URL();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  uint64_t v10 = (char *)&v14 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v11 = objc_allocWithZone(v3);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, a1, v7);
  uint64_t v12 = PlatformDocument.init(fileURL:documentBoxType:)((uint64_t)v10, a2, a3);
  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(a1, v7);
  return v12;
}

id @nonobjc NSFileWrapper.init(url:options:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  Swift::String v17 = (NSURL *)*MEMORY[0x1E4F143B8];
  URL._bridgeToObjectiveC()(v17);
  uint64_t v7 = v6;
  id v16 = 0;
  id v8 = objc_msgSend(v3, sel_initWithURL_options_error_, v6, a2, &v16);

  id v9 = v16;
  if (v8)
  {
    uint64_t v10 = type metadata accessor for URL();
    id v11 = *(void (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8);
    id v12 = v9;
    v11(a1, v10);
  }
  else
  {
    id v13 = v16;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    uint64_t v14 = type metadata accessor for URL();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v14 - 8) + 8))(a1, v14);
  }
  return v8;
}

uint64_t sub_1876C03C8()
{
  swift_unknownObjectWeakDestroy();

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in PlatformDocument.init(fileURL:documentBoxType:)(uint64_t a1)
{
  return closure #1 in PlatformDocument.init(fileURL:documentBoxType:)(a1, v1);
}

uint64_t method lookup function for PlatformDocument(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for PlatformDocument);
}

uint64_t dispatch thunk of PlatformDocument.__allocating_init(fileURL:documentBoxType:)()
{
  return (*(uint64_t (**)(void))(v0 + 120))();
}

uint64_t type metadata accessor for FileWrapperPlatformDocument()
{
  return self;
}

uint64_t outlined destroy of UTType?(uint64_t a1)
{
  type metadata accessor for URL?(0, (unint64_t *)&lazy cache variable for type metadata for UTType?, MEMORY[0x1E4FBCEA8]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1876C0640()
{
  uint64_t v1 = type metadata accessor for UTType();
  uint64_t v2 = *(void *)(v1 - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);

  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in FileWrapperPlatformDocument.read(from:)()
{
  uint64_t v1 = *(void *)(type metadata accessor for UTType() - 8);
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v3 = *(void *)(v0 + 24);
  uint64_t v4 = v0 + ((*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80));

  return closure #1 in FileWrapperPlatformDocument.read(from:)(v2, v3, v4);
}

uint64_t sub_1876C07B0()
{
  return swift_deallocObject();
}

uint64_t outlined init with copy of (String, Any)(uint64_t a1, uint64_t a2)
{
  type metadata accessor for (String, Any)();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void type metadata accessor for (String, Any)()
{
  if (!lazy cache variable for type metadata for (String, Any))
  {
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (String, Any));
    }
  }
}

double static MapKitDynamicPropertyCache.fields(of:)@<D0>(uint64_t a1@<X8>)
{
  static DynamicPropertyCache.fields(of:)();
  double result = *(double *)&v3;
  *(_OWORD *)a1 = v3;
  *(unsigned char *)(a1 + 16) = v4;
  *(_DWORD *)(a1 + 20) = v5;
  return result;
}

uint64_t Transformer.updateBody(of:changed:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)(a3 + 24) + 24))(a1, a2, *(void *)(a3 + 16));
}

uint64_t MapKitBodyAccessor.makeBody(container:inputs:fields:)(_DWORD *a1, void *a2, _DWORD *a3, uint64_t *a4, uint64_t *a5, uint64_t a6)
{
  unint64_t v36 = a1;
  id v37 = a2;
  uint64_t v10 = *(void *)(a6 - 8);
  MEMORY[0x1F4188790](a1);
  id v12 = &v32[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v13 = type metadata accessor for Transformer();
  uint64_t v14 = *(void *)(v13 - 8);
  MEMORY[0x1F4188790](v13);
  id v16 = &v32[-v15];
  LODWORD(a3) = *a3;
  uint64_t v17 = *a5;
  uint64_t v34 = a5[1];
  int v33 = *((unsigned __int8 *)a5 + 16);
  LODWORD(a5) = *((_DWORD *)a5 + 5);
  int v18 = *((_DWORD *)a4 + 2);
  uint64_t v19 = a4[2];
  uint64_t v20 = a4[5];
  uint64_t v47 = *a4;
  int v48 = v18;
  uint64_t v49 = v19;
  long long v50 = *(_OWORD *)(a4 + 3);
  uint64_t v51 = v20;
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v10 + 16))(v12, v35, a6);
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v10 + 32))(v16, v12, a6);
  int v42 = (int)a3;
  uint64_t v38 = v17;
  uint64_t v39 = v34;
  char v40 = v33;
  int v41 = (int)a5;
  swift_getWitnessTable();
  BodyAccessor.makeBody(container:inputs:fields:)();
  uint64_t result = (*(uint64_t (**)(unsigned char *, uint64_t))(v14 + 8))(v16, v13);
  int v22 = v46;
  uint64_t v23 = v43;
  uint64_t v24 = v44;
  int v25 = v45;
  int v26 = v48;
  uint64_t v27 = v49;
  uint64_t v28 = v51;
  *a4 = v47;
  *((_DWORD *)a4 + 2) = v26;
  a4[2] = v27;
  *(_OWORD *)(a4 + 3) = v50;
  a4[5] = v28;
  _DWORD *v36 = v22;
  if (v25) {
    uint64_t v29 = 0;
  }
  else {
    uint64_t v29 = v23;
  }
  if (v25) {
    uint64_t v30 = 0;
  }
  else {
    uint64_t v30 = v24;
  }
  unint64_t v31 = v37;
  *id v37 = v29;
  v31[1] = v30;
  *((unsigned char *)v31 + 16) = v25;
  return result;
}

uint64_t type metadata accessor for Transformer()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t MapKitBodyAccessor.setBody(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for Transformer();
  uint64_t v9 = *(void *)(v8 - 8);
  double v10 = MEMORY[0x1F4188790](v8);
  id v12 = (char *)&v14 - v11;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v5 + 16))(v7, v3, a3, v10);
  (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v12, v7, a3);
  swift_getWitnessTable();
  BodyAccessor.setBody(_:)();
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v12, v8);
}

uint64_t MapKitDynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)()
{
  return _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)();
}

ValueMetadata *type metadata accessor for MapKitDynamicPropertyCache()
{
  return &type metadata for MapKitDynamicPropertyCache;
}

uint64_t destroy for MapKitDynamicPropertyCache.Fields()
{
  return outlined consume of DynamicPropertyCache.Fields.Layout();
}

uint64_t initializeBufferWithCopyOfBuffer for MapKitDynamicPropertyCache.Fields(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v5 = a2[1];
  char v6 = *((unsigned char *)a2 + 16);
  outlined copy of DynamicPropertyCache.Fields.Layout();
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  *(unsigned char *)(a1 + 16) = v6;
  *(_DWORD *)(a1 + 20) = *((_DWORD *)a2 + 5);
  return a1;
}

uint64_t assignWithCopy for MapKitDynamicPropertyCache.Fields(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v5 = a2[1];
  char v6 = *((unsigned char *)a2 + 16);
  outlined copy of DynamicPropertyCache.Fields.Layout();
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  *(unsigned char *)(a1 + 16) = v6;
  outlined consume of DynamicPropertyCache.Fields.Layout();
  *(_DWORD *)(a1 + 20) = *((_DWORD *)a2 + 5);
  return a1;
}

uint64_t assignWithTake for MapKitDynamicPropertyCache.Fields(uint64_t a1, uint64_t a2)
{
  char v4 = *(unsigned char *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(unsigned char *)(a1 + 16) = v4;
  outlined consume of DynamicPropertyCache.Fields.Layout();
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  return a1;
}

uint64_t getEnumTagSinglePayload for MapKitDynamicPropertyCache.Fields(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 24)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 1) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for MapKitDynamicPropertyCache.Fields(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)uint64_t result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 24) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 24) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 16) = -(char)a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for MapKitDynamicPropertyCache.Fields()
{
  return &type metadata for MapKitDynamicPropertyCache.Fields;
}

uint64_t dispatch thunk of MapKitBodyAccessor.updateBody(of:changed:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 24))();
}

ValueMetadata *type metadata accessor for MapKitDynamicPropertyBuffer()
{
  return &type metadata for MapKitDynamicPropertyBuffer;
}

uint64_t getEnumTagSinglePayload for Transformer(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (!a2) {
    return 0;
  }
  unsigned int v7 = a2 - v5;
  if (a2 <= v5) {
    goto LABEL_19;
  }
  char v8 = 8 * v6;
  if (v6 <= 3)
  {
    unsigned int v10 = ((v7 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      int v9 = *(_DWORD *)((char *)a1 + v6);
      if (!v9) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      int v9 = *(unsigned __int16 *)((char *)a1 + v6);
      if (!*(unsigned __int16 *)((char *)a1 + v6)) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_19:
      if (v5) {
        return (*(uint64_t (**)(void))(v4 + 48))();
      }
      return 0;
    }
  }
  int v9 = *((unsigned __int8 *)a1 + v6);
  if (!*((unsigned char *)a1 + v6)) {
    goto LABEL_19;
  }
LABEL_11:
  int v11 = (v9 - 1) << v8;
  if (v6 > 3) {
    int v11 = 0;
  }
  if (v6)
  {
    if (v6 > 3) {
      LODWORD(v6) = 4;
    }
    switch((int)v6)
    {
      case 2:
        LODWORD(v6) = *a1;
        break;
      case 3:
        LODWORD(v6) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v6) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v6) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v5 + (v6 | v11) + 1;
}

void storeEnumTagSinglePayload for Transformer(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = *(void *)(v6 + 64);
  BOOL v9 = a3 >= v7;
  unsigned int v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      unsigned int v14 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v14))
      {
        int v11 = 4;
      }
      else if (v14 >= 0x100)
      {
        int v11 = 2;
      }
      else
      {
        int v11 = v14 > 1;
      }
    }
    else
    {
      int v11 = 1;
    }
  }
  else
  {
    int v11 = 0;
  }
  if (v7 < a2)
  {
    unsigned int v12 = ~v7 + a2;
    if (v8 < 4)
    {
      int v13 = (v12 >> (8 * v8)) + 1;
      if (v8)
      {
        int v15 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if (v8 == 3)
        {
          *(_WORD *)a1 = v15;
          a1[2] = BYTE2(v15);
        }
        else if (v8 == 2)
        {
          *(_WORD *)a1 = v15;
        }
        else
        {
          *a1 = v15;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v12;
      int v13 = 1;
    }
    switch(v11)
    {
      case 1:
        a1[v8] = v13;
        return;
      case 2:
        *(_WORD *)&a1[v8] = v13;
        return;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v8] = v13;
        return;
      default:
        return;
    }
  }
  switch(v11)
  {
    case 1:
      a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 2:
      *(_WORD *)&a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 3:
LABEL_34:
      __break(1u);
      JUMPOUT(0x1876C1330);
    case 4:
      *(_DWORD *)&a1[v8] = 0;
      goto LABEL_20;
    default:
LABEL_20:
      if (a2)
      {
LABEL_21:
        id v16 = *(void (**)(void))(v6 + 56);
        v16();
      }
      return;
  }
}

uint64_t UIHostingController.safeAreaRegions.getter()
{
  return _UIHostingView.safeAreaRegions.getter();
}

void (*UIHostingController.safeAreaRegions.modify(uint64_t *a1))(uint64_t *a1)
{
  a1[1] = v1;
  specialized UIHostingController.host.getter();
  *a1 = _UIHostingView.safeAreaRegions.getter();
  return UIHostingController.safeAreaRegions.modify;
}

void UIHostingController.safeAreaRegions.modify(uint64_t *a1)
{
}

uint64_t sub_1876C13F4@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = UIHostingController.safeAreaRegions.getter();
  *a1 = result;
  return result;
}

void sub_1876C1420(uint64_t *a1)
{
}

uint64_t sub_1876C1448()
{
  return 16;
}

__n128 sub_1876C1454(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t View.navigationSplitViewColumnWidth(_:)()
{
  return View._trait<A>(_:_:)();
}

uint64_t View.navigationSplitColumnWidth(min:ideal:max:)()
{
  return View.navigationSplitViewColumnWidth(min:ideal:max:)();
}

uint64_t View.navigationSplitViewColumnWidth(min:ideal:max:)()
{
  return View._trait<A>(_:_:)();
}

uint64_t sub_1876C159C()
{
  return swift_getWitnessTable();
}

void type metadata accessor for _TraitWritingModifier<NavigationSplitViewColumnWidth.TraitKey>()
{
  if (!lazy cache variable for type metadata for _TraitWritingModifier<NavigationSplitViewColumnWidth.TraitKey>)
  {
    unint64_t v0 = type metadata accessor for _TraitWritingModifier();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _TraitWritingModifier<NavigationSplitViewColumnWidth.TraitKey>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type _TraitWritingModifier<NavigationSplitViewColumnWidth.TraitKey> and conformance _TraitWritingModifier<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type _TraitWritingModifier<NavigationSplitViewColumnWidth.TraitKey> and conformance _TraitWritingModifier<A>;
  if (!lazy protocol witness table cache variable for type _TraitWritingModifier<NavigationSplitViewColumnWidth.TraitKey> and conformance _TraitWritingModifier<A>)
  {
    type metadata accessor for _TraitWritingModifier<NavigationSplitViewColumnWidth.TraitKey>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _TraitWritingModifier<NavigationSplitViewColumnWidth.TraitKey> and conformance _TraitWritingModifier<A>);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for NavigationSplitViewColumnWidth(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 33)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *(void *)(a1 + 8) >> 1;
  if (v2 > 0x80000000) {
    int v3 = ~v2;
  }
  else {
    int v3 = -1;
  }
  return (v3 + 1);
}

uint64_t storeEnumTagSinglePayload for NavigationSplitViewColumnWidth(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(unsigned char *)(result + 32) = 0;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 33) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)unint64_t result = 0;
      *(void *)(result + 8) = 2 * -a2;
      *(void *)(result + 16) = 0;
      *(void *)(result + 24) = 0;
      *(unsigned char *)(result + 32) = 0;
      return result;
    }
    *(unsigned char *)(result + 33) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t getEnumTag for NavigationSplitViewColumnWidth(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 32) >> 7;
}

uint64_t destructiveProjectEnumData for NavigationSplitViewColumnWidth(uint64_t result)
{
  *(unsigned char *)(result + 32) &= ~0x80u;
  return result;
}

uint64_t destructiveInjectEnumTag for NavigationSplitViewColumnWidth(uint64_t result, char a2)
{
  char v2 = *(unsigned char *)(result + 32) & 1 | (a2 << 7);
  *(void *)(result + 8) &= 1uLL;
  *(unsigned char *)(result + 32) = v2;
  return result;
}

ValueMetadata *type metadata accessor for NavigationSplitViewColumnWidth.TraitKey()
{
  return &type metadata for NavigationSplitViewColumnWidth.TraitKey;
}

double protocol witness for static _ViewTraitKey.defaultValue.getter in conformance NavigationSplitViewColumnWidth.TraitKey@<D0>(uint64_t a1@<X8>)
{
  double result = 0.0;
  *(_OWORD *)a1 = xmmword_18834CC80;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(unsigned char *)(a1 + 32) = 0;
  return result;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance NavigationSplitViewColumnWidth(long long *a1, long long *a2)
{
  outlined init with take of NavigationSplitViewColumnWidth(a1, (uint64_t)v4);
  outlined init with take of NavigationSplitViewColumnWidth(a2, (uint64_t)v5);
  return specialized static NavigationSplitViewColumnWidth.== infix(_:_:)(v4, v5);
}

uint64_t outlined init with take of NavigationSplitViewColumnWidth(long long *a1, uint64_t a2)
{
  long long v2 = *a1;
  long long v3 = a1[1];
  *(unsigned char *)(a2 + 32) = *((unsigned char *)a1 + 32);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

BOOL specialized static NavigationSplitViewColumnWidth.== infix(_:_:)(long long *a1, long long *a2)
{
  outlined init with take of NavigationSplitViewColumnWidth(a1, (uint64_t)&v17);
  char v3 = v21;
  if ((v21 & 0x80) == 0)
  {
    double v4 = v17;
    outlined init with take of NavigationSplitViewColumnWidth(a2, (uint64_t)&v12);
    if ((v16 & 0x80000000) == 0) {
      return v4 == v12;
    }
    return 0;
  }
  v21 &= ~0x80u;
  double v6 = v17;
  char v7 = v18;
  double v9 = v19;
  double v8 = v20;
  outlined init with take of NavigationSplitViewColumnWidth(a2, (uint64_t)&v12);
  if ((v16 & 0x80) == 0) {
    return 0;
  }
  int v10 = v13;
  if (v7)
  {
    if (v9 != v14) {
      int v10 = 0;
    }
    if (v10 != 1) {
      return 0;
    }
  }
  else
  {
    if (v13) {
      return 0;
    }
    if (v6 != v12 || v9 != v14) {
      return 0;
    }
  }
  if (v3)
  {
    if ((v16 & 1) == 0) {
      return 0;
    }
  }
  else if ((v16 & 1) != 0 || v8 != v15)
  {
    return 0;
  }
  return 1;
}

uint64_t Table.init(columns:rows:)@<X0>(void (*a1)(uint64_t)@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  memset(v10, 0, 57);
  return Table.init(of:selection:columnCustomization:columns:rows:)(a5, (uint64_t)v10, a1, a2, a3, a4, a5, a9, a6, a7, a8);
}

uint64_t Table.init(selection:columns:rows:)@<X0>(uint64_t a1@<X0>, void (*a2)(uint64_t)@<X1>, uint64_t a3@<X2>, uint64_t (*a4)(uint64_t)@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10)
{
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(AssociatedTypeWitness, AssociatedConformanceWitness, v17, v18);
  type metadata accessor for Optional();
  uint64_t v19 = type metadata accessor for Binding();
  type metadata accessor for OptionalToAnySelectionManager();
  swift_getWitnessTable();
  Binding.projecting<A>(_:)();
  Table.init(of:selection:columnCustomization:columns:rows:)(a6, (uint64_t)v25, a2, a3, a4, a5, a6, a9, a7, a8, a10);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v19 - 8) + 8))(a1, v19);
}

uint64_t Table.init(selection:columns:rows:)@<X0>(void (*a1)(uint64_t)@<X3>, uint64_t a2@<X4>, uint64_t (*a3)(uint64_t)@<X5>, uint64_t a4@<X6>, uint64_t a5@<X7>, uint64_t a6@<X8>, uint64_t a7, uint64_t a8, uint64_t a9)
{
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(AssociatedTypeWitness, AssociatedConformanceWitness, v12, v13);
  type metadata accessor for Set();
  type metadata accessor for Binding();
  type metadata accessor for SetToAnySelectionManager();
  swift_getWitnessTable();
  Binding.projecting<A>(_:)();
  Table.init(of:selection:columnCustomization:columns:rows:)(a5, (uint64_t)v20, a1, a2, a3, a4, a5, a6, a7, a8, a9);
  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

BOOL static AccessibilityLabeledPairRole.== infix(_:_:)(int a1, int a2)
{
  return ((a2 ^ a1) & 1) == 0;
}

void AccessibilityLabeledPairRole.hash(into:)(uint64_t a1, char a2)
{
}

Swift::Int AccessibilityLabeledPairRole.hashValue.getter(char a1)
{
  return Hasher._finalize()();
}

uint64_t View.accessibilityLabeledPair<A>(role:id:in:)(char a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return View.accessibilityRelationship<A>(_:id:in:)(a1 & 1, a2, a3, a4, a5, a6);
}

unint64_t lazy protocol witness table accessor for type AccessibilityLabeledPairRole and conformance AccessibilityLabeledPairRole()
{
  unint64_t result = lazy protocol witness table cache variable for type AccessibilityLabeledPairRole and conformance AccessibilityLabeledPairRole;
  if (!lazy protocol witness table cache variable for type AccessibilityLabeledPairRole and conformance AccessibilityLabeledPairRole)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityLabeledPairRole and conformance AccessibilityLabeledPairRole);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for AccessibilityLabeledPairRole(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1876C1E80);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AccessibilityLabeledPairRole()
{
  return &type metadata for AccessibilityLabeledPairRole;
}

uint64_t RelationshipModifier.description.getter()
{
  _StringGuts.grow(_:)(70);
  v0._object = (void *)0x8000000188326560;
  v0._countAndFlagsBits = 0xD000000000000030;
  String.append(_:)(v0);
  _print_unlocked<A, B>(_:_:)();
  v1._countAndFlagsBits = 543451424;
  v1._object = (void *)0xE400000000000000;
  String.append(_:)(v1);
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  v2._countAndFlagsBits = 0x617073656D616E20;
  v2._object = (void *)0xEC000000203A6563;
  String.append(_:)(v2);
  _print_unlocked<A, B>(_:_:)();
  return 0;
}

BOOL static RelationshipModifier.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  int v4 = *a1;
  int v5 = *a2;
  switch(v4)
  {
    case 2:
      if (v5 != 2) {
        return 0;
      }
      break;
    case 3:
      if (v5 != 3) {
        return 0;
      }
      break;
    case 4:
      if (v5 != 4) {
        return 0;
      }
      break;
    default:
      if (v5 - 2) < 3 || ((v5 ^ v4)) {
        return 0;
      }
      break;
  }
  uint64_t v6 = type metadata accessor for RelationshipModifier();
  if (dispatch thunk of static Equatable.== infix(_:_:)()) {
    return *(void *)&a1[*(int *)(v6 + 40)] == *(void *)&a2[*(int *)(v6 + 40)];
  }
  return 0;
}

Swift::Int static Transform.State.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  if (!static RelationshipModifier.== infix(_:_:)(a1, a2)) {
    return 0;
  }
  uint64_t v4 = *(int *)(type metadata accessor for Transform.State() + 36);
  Swift::Int v5 = *(void *)&a1[v4];
  uint64_t v6 = *(void *)&a2[v4];

  return specialized static Set.== infix(_:_:)(v5, v6);
}

uint64_t Transform.State.init(modifier:nodeIDs:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = type metadata accessor for RelationshipModifier();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a3, a1, v6);
  uint64_t result = type metadata accessor for Transform.State();
  *(void *)(a3 + *(int *)(result + 36)) = a2;
  return result;
}

uint64_t Transform.modifier.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for RelationshipModifier();
  uint64_t Value = AGGraphGetValue();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16);

  return v4(a1, Value, v2);
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance RelationshipModifier<A>(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return static RelationshipModifier.== infix(_:_:)(a1, a2);
}

Swift::Int protocol witness for static Equatable.== infix(_:_:) in conformance Transform<A>.State(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return static Transform.State.== infix(_:_:)(a1, a2);
}

uint64_t Transform.updateValue()(uint64_t a1)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  if (*(unsigned char *)AGGraphGetValue() == 1 && (*(unsigned char *)(v1 + *(int *)(a1 + 56)) & 1) == 0)
  {
    int v6 = *(_DWORD *)(v1 + 12);
    if (v6 == *MEMORY[0x1E4F4E7A0])
    {
      int CurrentAttribute = AGGraphGetCurrentAttribute();
      if (CurrentAttribute == v6) {
        __break(1u);
      }
      *(_DWORD *)(v1 + 12) = CurrentAttribute;
    }
    uint64_t Value = (unint64_t *)AGGraphGetValue();
    unint64_t v9 = *Value;
    unint64_t v10 = Value[1];
    int v12 = v11 & 1;
    unint64_t v14 = *Value;
    unint64_t v15 = v10;
    swift_bridgeObjectRetain();
    if (Transform.updateScope(nodeList:changed:)(&v14, v12, a1))
    {
      DisplayList.Version.init(forUpdate:)();
      unint64_t v10 = v14;
    }
    unint64_t v14 = v9;
    unint64_t v15 = v10;
    AGGraphSetOutputValue();
  }
  else
  {
    int v3 = (unint64_t *)AGGraphGetValue();
    unint64_t v4 = *v3;
    unint64_t v5 = v3[1];
    swift_bridgeObjectRetain();
    unint64_t v14 = v4;
    unint64_t v15 = v5;
    AGGraphSetOutputValue();
  }
  return swift_bridgeObjectRelease();
}

uint64_t Transform.updateScope(nodeList:changed:)(unint64_t *a1, int a2, uint64_t a3)
{
  int v96 = a2;
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v93 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v92 = (char *)&v79 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *(void *)(v7 + 24);
  uint64_t v101 = v7;
  uint64_t v104 = v8;
  uint64_t v105 = v5;
  uint64_t v9 = type metadata accessor for Transform.State();
  uint64_t v10 = type metadata accessor for Optional();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v95 = *(void *)(TupleTypeMetadata2 - 8);
  MEMORY[0x1F4188790](TupleTypeMetadata2);
  uint64_t v107 = (char *)&v79 - v11;
  uint64_t v100 = *(void *)(v10 - 8);
  uint64_t v97 = v100;
  MEMORY[0x1F4188790](v12);
  uint64_t v98 = (unsigned __int8 *)&v79 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  uint64_t v102 = (char *)&v79 - v15;
  MEMORY[0x1F4188790](v16);
  uint64_t v18 = (char *)&v79 - v17;
  uint64_t v19 = type metadata accessor for RelationshipModifier();
  uint64_t v90 = *(void *)(v19 - 8);
  uint64_t v91 = v19;
  MEMORY[0x1F4188790](v19);
  uint64_t v89 = (uint64_t)&v79 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v21);
  uint64_t v88 = (uint64_t)&v79 - v22;
  MEMORY[0x1F4188790](v23);
  int v25 = (char *)&v79 - v24;
  uint64_t v26 = v9;
  uint64_t v27 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v28);
  double v80 = (unsigned __int8 *)&v79 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v30);
  uint64_t v32 = (char *)&v79 - v31;
  unint64_t v33 = *a1;
  Transform.modifier.getter((uint64_t)v25);
  unint64_t v34 = swift_bridgeObjectRetain();
  uint64_t v35 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay7SwiftUI17AccessibilityNodeCG_AF8UniqueIDVs5NeverOTg503_s7d87UI9Transform33_725F422359ECCADDAF5CC82A425651EELLV11updateScope8nodeList7changedSbAA017fg11L0V_SbtFAA8H62IDVAA0nO0Ccfu_33_2f504ee4f610784b00e9281caac81f7cAmKTf3nnnpk_nTf1cn_n(v34);
  unint64_t v82 = v33;
  swift_bridgeObjectRelease();
  uint64_t v36 = specialized Set.init<A>(_:)((uint64_t)v35);
  swift_bridgeObjectRelease();
  char v87 = (unsigned __int8 *)v25;
  uint64_t v37 = (uint64_t)v25;
  uint64_t v38 = v26;
  Transform.State.init(modifier:nodeIDs:)(v37, v36, (uint64_t)v32);
  uint64_t v39 = *(void (**)(uint64_t, char *, uint64_t))(v27 + 16);
  uint64_t v99 = v32;
  uint64_t v85 = v27 + 16;
  char v83 = v39;
  v39((uint64_t)v18, v32, v26);
  char v40 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(v27 + 56);
  uint64_t v86 = v27 + 56;
  char v84 = v40;
  v40((uint64_t)v18, 0, 1, v26);
  uint64_t v41 = *(int *)(v101 + 52);
  uint64_t v94 = v3;
  int v42 = (char *)(v3 + v41);
  uint64_t v43 = *(void (**)(char *))(v100 + 16);
  uint64_t v44 = v102;
  char v81 = v42;
  v43(v102);
  unsigned __int8 v45 = v107;
  int v46 = &v107[*(int *)(TupleTypeMetadata2 + 48)];
  ((void (*)(char *, char *, uint64_t))v43)(v107, v18, v10);
  uint64_t v47 = v44;
  uint64_t v106 = v10;
  ((void (*)(char *, char *, uint64_t))v43)(v46, v44, v10);
  int v48 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48);
  if (v48(v45, 1, v38) == 1)
  {
    uint64_t v49 = *(void (**)(char *, uint64_t))(v97 + 8);
    long long v50 = v47;
    uint64_t v52 = v106;
    uint64_t v51 = v107;
    v49(v50, v106);
    v49(v18, v52);
    BOOL v53 = v48(v46, 1, v38) == 1;
    uint64_t v54 = v38;
    uint64_t v55 = v51;
    if (v53)
    {
      v49(v51, v106);
      uint64_t v56 = 0;
LABEL_21:
      (*(void (**)(char *, uint64_t))(v27 + 8))(v99, v54);
      return v56;
    }
    uint64_t v58 = v106;
  }
  else
  {
    uint64_t v57 = v97;
    ((void (*)(unsigned __int8 *, char *, uint64_t))v43)(v98, v107, v106);
    if (v48(v46, 1, v38) != 1)
    {
      char v59 = v80;
      (*(void (**)(unsigned __int8 *, char *, uint64_t))(v27 + 32))(v80, v46, v38);
      uint64_t v60 = v98;
      LODWORD(TupleTypeMetadata2) = static Transform.State.== infix(_:_:)(v98, v59);
      uint64_t v61 = *(void (**)(unsigned __int8 *, uint64_t))(v27 + 8);
      v61(v59, v38);
      uint64_t v49 = *(void (**)(char *, uint64_t))(v57 + 8);
      uint64_t v58 = v106;
      v49(v102, v106);
      v49(v18, v58);
      v61(v60, v38);
      v49(v107, v58);
      uint64_t v56 = 0;
      uint64_t v54 = v38;
      if ((TupleTypeMetadata2 & 1) != 0 || (v96 & 1) == 0) {
        goto LABEL_21;
      }
      goto LABEL_11;
    }
    uint64_t v49 = *(void (**)(char *, uint64_t))(v57 + 8);
    uint64_t v58 = v106;
    v49(v102, v106);
    v49(v18, v58);
    (*(void (**)(unsigned __int8 *, uint64_t))(v27 + 8))(v98, v38);
    uint64_t v54 = v38;
    uint64_t v55 = v107;
  }
  (*(void (**)(char *, uint64_t))(v95 + 8))(v55, TupleTypeMetadata2);
  if ((v96 & 1) == 0)
  {
    uint64_t v56 = 0;
    goto LABEL_21;
  }
LABEL_11:
  uint64_t v79 = v27;
  uint64_t v62 = v81;
  v49(v81, v58);
  v83((uint64_t)v62, v99, v54);
  v84((uint64_t)v62, 0, 1, v54);
  uint64_t v63 = v94;
  uint64_t v107 = *(char **)(v94 + 16);
  AccessibilityRelationshipScope.clear(from:)(*(_DWORD *)(v94 + 12));
  char v64 = v87;
  Transform.modifier.getter((uint64_t)v87);
  uint64_t v65 = v91;
  TupleTypeMetadata2 = *(void *)(v90 + 8);
  LODWORD(v106) = *v64;
  ((void (*)(unsigned __int8 *, uint64_t))TupleTypeMetadata2)(v64, v91);
  uint64_t v66 = v88;
  Transform.modifier.getter(v88);
  uint64_t v68 = (uint64_t)v92;
  uint64_t v67 = v93;
  uint64_t v69 = v105;
  (*(void (**)(char *, uint64_t, uint64_t))(v93 + 32))(v92, v66 + *(int *)(v65 + 36), v105);
  uint64_t v70 = v89;
  Transform.modifier.getter(v89);
  uint64_t v71 = *(void *)(v70 + *(int *)(v65 + 40));
  ((void (*)(uint64_t, uint64_t))TupleTypeMetadata2)(v70, v65);
  unint64_t v72 = v82;
  AccessibilityRelationshipScope.update<A>(_:nodes:identifier:in:from:)(v106, v82, v68, v71, *(_DWORD *)(v63 + 12), v69);
  (*(void (**)(uint64_t, uint64_t))(v67 + 8))(v68, v69);
  if (!(v72 >> 62))
  {
    uint64_t v73 = *(void *)((v72 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain();
    if (v73) {
      goto LABEL_13;
    }
LABEL_20:
    swift_bridgeObjectRelease();
    uint64_t v56 = 1;
    uint64_t v27 = v79;
    goto LABEL_21;
  }
  swift_bridgeObjectRetain();
  uint64_t result = _CocoaArrayWrapper.endIndex.getter();
  uint64_t v73 = result;
  if (!result) {
    goto LABEL_20;
  }
LABEL_13:
  if (v73 >= 1)
  {
    uint64_t v75 = 0;
    uint64_t v76 = *(void *)(v63 + 16);
    do
    {
      if ((v72 & 0xC000000000000001) != 0) {
        uint64_t v77 = (char *)MEMORY[0x18C117680](v75, v72);
      }
      else {
        uint64_t v77 = (char *)*(id *)(v72 + 8 * v75 + 32);
      }
      uint64_t v78 = v77;
      ++v75;
      *(void *)&v77[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_relationshipScope] = v76;
      swift_retain();

      swift_release();
    }
    while (v73 != v75);
    goto LABEL_20;
  }
  __break(1u);
  return result;
}

char *_sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay7SwiftUI17AccessibilityNodeCG_AF8UniqueIDVs5NeverOTg503_s7d87UI9Transform33_725F422359ECCADDAF5CC82A425651EELLV11updateScope8nodeList7changedSbAA017fg11L0V_SbtFAA8H62IDVAA0nO0Ccfu_33_2f504ee4f610784b00e9281caac81f7cAmKTf3nnnpk_nTf1cn_n(unint64_t a1)
{
  if (a1 >> 62) {
    goto LABEL_15;
  }
  uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    uint64_t v3 = MEMORY[0x1E4FBC860];
    if (!v2) {
      return (char *)v3;
    }
    uint64_t v10 = MEMORY[0x1E4FBC860];
    uint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2 & ~(v2 >> 63), 0);
    if (v2 < 0) {
      break;
    }
    uint64_t v5 = 0;
    uint64_t v3 = v10;
    while (v2 != v5)
    {
      if ((a1 & 0xC000000000000001) != 0) {
        uint64_t v6 = (char *)MEMORY[0x18C117680](v5, a1);
      }
      else {
        uint64_t v6 = (char *)*(id *)(a1 + 8 * v5 + 32);
      }
      uint64_t v7 = *(void *)&v6[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_id];

      unint64_t v9 = *(void *)(v10 + 16);
      unint64_t v8 = *(void *)(v10 + 24);
      if (v9 >= v8 >> 1) {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v8 > 1), v9 + 1, 1);
      }
      ++v5;
      *(void *)(v10 + 16) = v9 + 1;
      *(void *)(v10 + 8 * v9 + 32) = v7;
      if (v2 == v5) {
        return (char *)v3;
      }
    }
    __break(1u);
LABEL_15:
    swift_bridgeObjectRetain();
    uint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  __break(1u);
  return result;
}

uint64_t AccessibilityRelationshipScope.clear(from:)(unsigned int a1)
{
  uint64_t v3 = v1;
  swift_beginAccess();
  specialized Dictionary.removeValue(forKey:)(a1, &v53);
  swift_endAccess();
  if (!*((void *)&v54 + 1)) {
    return outlined destroy of (key: AccessibilityRelationshipScope.Key, relationship: AccessibilityRelationshipScope.Relationship, nodes: [AccessibilityNode])?((uint64_t)&v53, (uint64_t)&lazy cache variable for type metadata for (key: AccessibilityRelationshipScope.Key, relationship: AccessibilityRelationshipScope.Relationship, nodes: [AccessibilityNode])?, (uint64_t)type metadata accessor for (key: AccessibilityRelationshipScope.Key, relationship: AccessibilityRelationshipScope.Relationship, nodes: [AccessibilityNode]), MEMORY[0x1E4FBB718], (uint64_t (*)(void))type metadata accessor for (key: AccessibilityRelationshipScope.Key, relationship: AccessibilityRelationshipScope.Relationship, nodes: [AccessibilityNode])?);
  }
  v64[0] = v53;
  v64[1] = v54;
  v64[2] = v55;
  char v65 = v56;
  unint64_t v66 = (unint64_t)v57;
  outlined init with copy of AccessibilityRelationshipScope.Key((uint64_t)v64, (uint64_t)&v53);
  v62[0] = v53;
  v62[1] = v54;
  long long v63 = v55;
  uint64_t v61 = (char *)MEMORY[0x1E4FBC860];
  swift_beginAccess();
  outlined init with copy of AccessibilityRelationshipScope.Key((uint64_t)v62, (uint64_t)&v53);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  outlined init with copy of AccessibilityRelationshipScope.Key((uint64_t)&v53, (uint64_t)v60);
  uint64_t v6 = v1[2];
  char v59 = (void *)v3[2];
  v3[2] = 0x8000000000000000;
  unint64_t v8 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v60);
  uint64_t v9 = *(void *)(v6 + 16);
  BOOL v10 = (v7 & 1) == 0;
  uint64_t v11 = v9 + v10;
  if (__OFADD__(v9, v10))
  {
    __break(1u);
LABEL_12:
    specialized _NativeDictionary.copy()();
    if (v2) {
      goto LABEL_10;
    }
    goto LABEL_13;
  }
  char v2 = v7;
  if (*(void *)(v6 + 24) < v11)
  {
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v11, isUniquelyReferenced_nonNull_native);
    unint64_t v12 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v60);
    if ((v2 & 1) != (v13 & 1)) {
      goto LABEL_55;
    }
    unint64_t v8 = v12;
    if ((v2 & 1) == 0) {
      goto LABEL_13;
    }
LABEL_10:
    uint64_t v15 = *(void *)(v59[7] + 8 * v8);
    goto LABEL_14;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
    goto LABEL_12;
  }
  if (v7) {
    goto LABEL_10;
  }
LABEL_13:
  uint64_t v15 = 0;
LABEL_14:
  uint64_t v58 = v15;
  specialized updateRelatedNodesByKey #1 (_:) in AccessibilityRelationshipScope.clear(from:)(&v58, (uint64_t)v64, &v61);
  specialized $defer #1 <A, B>() in _NativeDictionary.subscript.modify(&v58, v2 & 1, (uint64_t *)&v59, v8, (uint64_t)v60);
  swift_bridgeObjectRelease();
  outlined destroy of AccessibilityRelationshipScope.Key((uint64_t)v60);
  v3[2] = (uint64_t)v59;
  outlined destroy of AccessibilityRelationshipScope.Key((uint64_t)&v53);
  swift_endAccess();
  unint64_t v16 = v66;
  if (v66 >> 62) {
    goto LABEL_52;
  }
  uint64_t v17 = *(void *)((v66 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  uint64_t v47 = v17;
  if (!v17)
  {
LABEL_53:
    swift_bridgeObjectRelease();
    outlined destroy of AccessibilityRelationshipScope.Key((uint64_t)v62);
    swift_bridgeObjectRelease();
    return outlined destroy of (AccessibilityRelationshipScope.Key?, AccessibilityRelationshipScope.Key?)((uint64_t)v64, (uint64_t (*)(void))type metadata accessor for (key: AccessibilityRelationshipScope.Key, relationship: AccessibilityRelationshipScope.Relationship, nodes: [AccessibilityNode]));
  }
LABEL_16:
  v3 += 4;
  unint64_t v46 = v16 & 0xC000000000000001;
  swift_beginAccess();
  uint64_t v18 = 0;
  uint64_t v44 = (void *)(v16 + 32);
  unsigned __int8 v45 = (void *)v16;
  while (1)
  {
    if (v46) {
      uint64_t v19 = (char *)MEMORY[0x18C117680](v18, v16);
    }
    else {
      uint64_t v19 = (char *)(id)v44[v18];
    }
    uint64_t v52 = v19;
    if (__OFADD__(v18++, 1))
    {
LABEL_51:
      __break(1u);
LABEL_52:
      swift_bridgeObjectRetain_n();
      uint64_t v43 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      uint64_t v47 = v43;
      if (!v43) {
        goto LABEL_53;
      }
      goto LABEL_16;
    }
    uint64_t v51 = *((void *)v61 + 2);
    if (v51) {
      break;
    }

LABEL_18:
    if (v18 == v47) {
      goto LABEL_53;
    }
  }
  uint64_t v48 = v18;
  uint64_t v49 = v61 + 32;
  uint64_t v50 = OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_id;
  swift_bridgeObjectRetain();
  uint64_t v21 = 0;
  while (1)
  {
    unsigned __int8 v22 = v49[v21];
    Swift::UInt v23 = *(void *)&v52[v50];
    swift_beginAccess();
    char v24 = swift_isUniquelyReferenced_nonNull_native();
    char v59 = (void *)*v3;
    int v25 = v59;
    uint64_t *v3 = 0x8000000000000000;
    unint64_t v16 = (unint64_t)v25;
    unint64_t v27 = specialized __RawDictionaryStorage.find<A>(_:)(v23, v22);
    uint64_t v28 = v25[2];
    BOOL v29 = (v26 & 1) == 0;
    uint64_t v30 = v28 + v29;
    if (__OFADD__(v28, v29))
    {
      __break(1u);
      goto LABEL_51;
    }
    char v31 = v26;
    if (v25[3] < v30) {
      break;
    }
    if (v24)
    {
      if ((v26 & 1) == 0) {
        goto LABEL_27;
      }
    }
    else
    {
      specialized _NativeDictionary.copy()();
      int v25 = v59;
      if ((v31 & 1) == 0) {
        goto LABEL_27;
      }
    }
LABEL_35:
    uint64_t v34 = *(void *)(v25[7] + 8 * v27);
    if (v34)
    {
      Hasher.init(_seed:)();
      swift_bridgeObjectRetain();
      AnyHashable.hash(into:)();
      Hasher._combine(_:)(*((Swift::UInt *)&v63 + 1));
      Swift::Int v35 = Hasher._finalize()();
      uint64_t v36 = -1 << *(unsigned char *)(v34 + 32);
      unint64_t v37 = v35 & ~v36;
      if ((*(void *)(v34 + 56 + ((v37 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v37))
      {
        uint64_t v38 = ~v36;
        while (1)
        {
          outlined init with copy of AccessibilityRelationshipScope.Key(*(void *)(v34 + 48) + 48 * v37, (uint64_t)&v53);
          if ((MEMORY[0x18C1174E0](&v53, v62) & 1) != 0 && *((void *)&v55 + 1) == *((void *)&v63 + 1)) {
            break;
          }
          outlined destroy of AccessibilityRelationshipScope.Key((uint64_t)&v53);
          unint64_t v37 = (v37 + 1) & v38;
          if (((*(void *)(v34 + 56 + ((v37 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v37) & 1) == 0) {
            goto LABEL_44;
          }
        }
        outlined destroy of AccessibilityRelationshipScope.Key((uint64_t)&v53);
        swift_bridgeObjectRelease();
        int v39 = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v58 = v34;
        if (!v39)
        {
          specialized _NativeSet.copy()();
          uint64_t v34 = v58;
        }
        char v40 = (long long *)(*(void *)(v34 + 48) + 48 * v37);
        long long v42 = v40[1];
        long long v41 = v40[2];
        long long v53 = *v40;
        long long v54 = v42;
        long long v55 = v41;
        specialized _NativeSet._delete(at:)(v37);
        uint64_t v34 = v58;
        swift_bridgeObjectRelease();
      }
      else
      {
LABEL_44:
        swift_bridgeObjectRelease();
        long long v54 = 0u;
        long long v55 = 0u;
        long long v53 = 0u;
      }
      outlined destroy of (key: AccessibilityRelationshipScope.Key, relationship: AccessibilityRelationshipScope.Relationship, nodes: [AccessibilityNode])?((uint64_t)&v53, (uint64_t)&lazy cache variable for type metadata for AccessibilityRelationshipScope.Key?, (uint64_t)&type metadata for AccessibilityRelationshipScope.Key, MEMORY[0x1E4FBB718], (uint64_t (*)(void))type metadata accessor for Attribute<AccessibilityNodeList>);
      if (*(void *)(v34 + 16))
      {
        *(void *)(v25[7] + 8 * v27) = v34;
        goto LABEL_27;
      }
      swift_bridgeObjectRelease();
    }
    specialized _NativeDictionary._delete(at:)(v27, (uint64_t)v25);
LABEL_27:
    ++v21;
    uint64_t *v3 = (uint64_t)v25;
    swift_endAccess();
    if (v21 == v51)
    {

      swift_bridgeObjectRelease();
      unint64_t v16 = (unint64_t)v45;
      uint64_t v18 = v48;
      goto LABEL_18;
    }
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v30, v24);
  int v25 = v59;
  unint64_t v32 = specialized __RawDictionaryStorage.find<A>(_:)(v23, v22);
  if ((v31 & 1) == (v33 & 1))
  {
    unint64_t v27 = v32;
    if ((v31 & 1) == 0) {
      goto LABEL_27;
    }
    goto LABEL_35;
  }
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
LABEL_55:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t AccessibilityRelationshipScope.update<A>(_:nodes:identifier:in:from:)(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, uint64_t a6)
{
  char v7 = v6;
  int v12 = a1;
  double v13 = MEMORY[0x1F4188790](a1);
  uint64_t v15 = (char *)&v74 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v16 + 16))(v15, v17, v18, v13);
  AccessibilityRelationshipScope.Key.init<A>(identifier:in:)((uint64_t)v15, a4, a6, (uint64_t)v85);
  outlined init with copy of AccessibilityRelationshipScope.Key((uint64_t)v85, (uint64_t)v83);
  int v76 = v12;
  v83[48] = v12;
  unint64_t v84 = a2;
  swift_beginAccess();
  swift_bridgeObjectRetain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v20 = v6[3];
  v78[0] = v20;
  v7[3] = 0x8000000000000000;
  unint64_t v22 = specialized __RawDictionaryStorage.find<A>(_:)(a5);
  uint64_t v23 = *(void *)(v20 + 16);
  BOOL v24 = (v21 & 1) == 0;
  uint64_t v25 = v23 + v24;
  if (__OFADD__(v23, v24))
  {
    __break(1u);
LABEL_10:
    specialized _NativeDictionary.copy()();
    if (a4) {
      goto LABEL_8;
    }
    goto LABEL_11;
  }
  LOBYTE(a4) = v21;
  if (*(void *)(v20 + 24) < v25)
  {
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v25, isUniquelyReferenced_nonNull_native);
    unint64_t v26 = specialized __RawDictionaryStorage.find<A>(_:)(a5);
    if ((a4 & 1) != (v27 & 1)) {
      goto LABEL_52;
    }
    unint64_t v22 = v26;
    if ((a4 & 1) == 0) {
      goto LABEL_11;
    }
LABEL_8:
    uint64_t v28 = (long long *)(*(void *)(v78[0] + 56) + (v22 << 6));
    long long v29 = v28[3];
    long long v31 = *v28;
    long long v30 = v28[1];
    long long v81 = v28[2];
    long long v82 = v29;
    long long v79 = v31;
    long long v80 = v30;
    goto LABEL_12;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
    goto LABEL_10;
  }
  if (v21) {
    goto LABEL_8;
  }
LABEL_11:
  long long v81 = 0u;
  long long v82 = 0u;
  long long v80 = 0u;
  long long v79 = 0u;
LABEL_12:
  char v32 = updateRecordsByAttribute #1 <A>(_:) in AccessibilityRelationshipScope.update<A>(_:nodes:identifier:in:from:)((uint64_t)&v79, (uint64_t)v83);
  specialized $defer #1 <A, B>() in _NativeDictionary.subscript.modify((uint64_t)&v79, a4 & 1, v78, v22, a5);
  outlined destroy of (key: AccessibilityRelationshipScope.Key, relationship: AccessibilityRelationshipScope.Relationship, nodes: [AccessibilityNode])?((uint64_t)&v79, (uint64_t)&lazy cache variable for type metadata for (key: AccessibilityRelationshipScope.Key, relationship: AccessibilityRelationshipScope.Relationship, nodes: [AccessibilityNode])?, (uint64_t)type metadata accessor for (key: AccessibilityRelationshipScope.Key, relationship: AccessibilityRelationshipScope.Relationship, nodes: [AccessibilityNode]), MEMORY[0x1E4FBB718], (uint64_t (*)(void))type metadata accessor for (key: AccessibilityRelationshipScope.Key, relationship: AccessibilityRelationshipScope.Relationship, nodes: [AccessibilityNode])?);
  v7[3] = v78[0];
  swift_endAccess();
  if ((v32 & 1) == 0)
  {
    uint64_t v44 = 0;
    unsigned __int8 v45 = 0;
LABEL_50:
    outlined destroy of (AccessibilityRelationshipScope.Key?, AccessibilityRelationshipScope.Key?)((uint64_t)v83, (uint64_t (*)(void))type metadata accessor for (key: AccessibilityRelationshipScope.Key, relationship: AccessibilityRelationshipScope.Relationship, nodes: [AccessibilityNode]));
    outlined destroy of AccessibilityRelationshipScope.Key((uint64_t)v85);
    outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?((uint64_t)v44);
    return outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?((uint64_t)v45);
  }
  outlined init with copy of AccessibilityRelationshipScope.Key((uint64_t)v85, (uint64_t)&v79);
  char v33 = v7 + 2;
  swift_beginAccess();
  char v34 = swift_isUniquelyReferenced_nonNull_native();
  *(void *)&v77[0] = v7[2];
  uint64_t v35 = *(void *)&v77[0];
  v7[2] = 0x8000000000000000;
  unint64_t v37 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&v79);
  uint64_t v38 = *(void *)(v35 + 16);
  BOOL v39 = (v36 & 1) == 0;
  uint64_t v40 = v38 + v39;
  if (__OFADD__(v38, v39))
  {
LABEL_47:
    __break(1u);
    goto LABEL_48;
  }
  char v41 = v36;
  if (*(void *)(v35 + 24) >= v40)
  {
    if ((v34 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      uint64_t v35 = *(void *)&v77[0];
    }
  }
  else
  {
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v40, v34);
    uint64_t v35 = *(void *)&v77[0];
    unint64_t v42 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&v79);
    if ((v41 & 1) != (v43 & 1)) {
      goto LABEL_53;
    }
    unint64_t v37 = v42;
  }
  *char v33 = v35;
  swift_bridgeObjectRelease();
  unint64_t v46 = (void *)*v33;
  swift_bridgeObjectRetain();
  if ((v41 & 1) == 0)
  {
    unint64_t v47 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
    outlined init with copy of AccessibilityRelationshipScope.Key((uint64_t)&v79, (uint64_t)v77);
    specialized _NativeDictionary._insert(at:key:value:)(v37, v77, v47, v46);
  }
  uint64_t v48 = v46[7];
  swift_bridgeObjectRelease();
  updateRelatedNodesByKey #1 <A>(_:) in AccessibilityRelationshipScope.update<A>(_:nodes:identifier:in:from:)((void **)(v48 + 8 * v37), a2, v76);
  swift_endAccess();
  outlined destroy of AccessibilityRelationshipScope.Key((uint64_t)&v79);
  if (a2 >> 62)
  {
LABEL_48:
    swift_bridgeObjectRetain();
    uint64_t v49 = _CocoaArrayWrapper.endIndex.getter();
    unsigned __int8 v45 = 0;
    if (v49) {
      goto LABEL_24;
    }
    goto LABEL_49;
  }
  uint64_t v49 = *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  unsigned __int8 v45 = 0;
  if (!v49)
  {
LABEL_49:
    swift_bridgeObjectRelease();
    uint64_t v44 = specialized thunk for @callee_guaranteed () -> (@owned [AccessibilityRelationshipScope.Relationship : [AccessibilityNode]]);
    goto LABEL_50;
  }
LABEL_24:
  v7 += 4;
  unint64_t v74 = a2 & 0xC000000000000001;
  uint64_t v50 = 4;
  while (1)
  {
    uint64_t v53 = v50 - 4;
    if (v74)
    {
      long long v54 = (char *)MEMORY[0x18C117680](v50 - 4, a2);
      uint64_t v55 = v50 - 3;
      if (__OFADD__(v53, 1)) {
        goto LABEL_44;
      }
    }
    else
    {
      long long v54 = (char *)*(id *)(a2 + 8 * v50);
      uint64_t v55 = v50 - 3;
      if (__OFADD__(v53, 1))
      {
LABEL_44:
        __break(1u);
LABEL_45:
        __break(1u);
LABEL_46:
        __break(1u);
        goto LABEL_47;
      }
    }
    uint64_t v75 = v55;
    unint64_t v56 = a2;
    uint64_t v57 = v54;
    Swift::UInt v58 = *(void *)&v54[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_id];
    swift_beginAccess();
    outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?((uint64_t)v45);
    a2 = swift_isUniquelyReferenced_nonNull_native();
    *(void *)&v77[0] = *v7;
    uint64_t v59 = *(void *)&v77[0];
    *char v7 = 0x8000000000000000;
    unint64_t v61 = specialized __RawDictionaryStorage.find<A>(_:)(v58, v76);
    uint64_t v62 = *(void *)(v59 + 16);
    BOOL v63 = (v60 & 1) == 0;
    uint64_t v64 = v62 + v63;
    if (__OFADD__(v62, v63)) {
      goto LABEL_45;
    }
    char v65 = v60;
    if (*(void *)(v59 + 24) < v64) {
      break;
    }
    if ((a2 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      uint64_t v59 = *(void *)&v77[0];
    }
LABEL_38:
    a2 = v56;
    *char v7 = v59;
    swift_bridgeObjectRelease();
    uint64_t v68 = (void *)*v7;
    if (v65)
    {
      uint64_t v51 = swift_bridgeObjectRetain();
    }
    else
    {
      v68[(v61 >> 6) + 8] |= 1 << v61;
      uint64_t v69 = v68[6] + 16 * v61;
      *(void *)uint64_t v69 = v58;
      *(unsigned char *)(v69 + 8) = v76;
      *(void *)(v68[7] + 8 * v61) = MEMORY[0x1E4FBC870];
      uint64_t v70 = v68[2];
      uint64_t v71 = v70 + 1;
      BOOL v72 = __OFADD__(v70, 1);
      uint64_t v51 = swift_bridgeObjectRetain();
      if (v72) {
        goto LABEL_46;
      }
      *(void *)(v51 + 16) = v71;
    }
    uint64_t v52 = *(void *)(v51 + 56);
    swift_bridgeObjectRelease();
    updateKeysByNodeRelation #1 <A>(_:) in AccessibilityRelationshipScope.update<A>(_:nodes:identifier:in:from:)((uint64_t *)(v52 + 8 * v61), (uint64_t)v85);
    swift_endAccess();

    ++v50;
    unsigned __int8 v45 = specialized thunk for @callee_guaranteed () -> (@owned Set<AccessibilityRelationshipScope.Key>);
    if (v75 == v49) {
      goto LABEL_49;
    }
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v64, a2);
  uint64_t v59 = *(void *)&v77[0];
  unint64_t v66 = specialized __RawDictionaryStorage.find<A>(_:)(v58, v76);
  if ((v65 & 1) == (v67 & 1))
  {
    unint64_t v61 = v66;
    goto LABEL_38;
  }
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
LABEL_52:
  type metadata accessor for AGAttribute(0);
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
LABEL_53:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t Transform.destroy()(uint64_t a1)
{
  *(unsigned char *)(v1 + *(int *)(a1 + 56)) = 1;
  return AccessibilityRelationshipScope.clear(from:)(*(_DWORD *)(v1 + 12));
}

uint64_t static Transform.willRemove(attribute:)()
{
  AGGraphGetAttributeInfo();
  uint64_t v1 = v0;
  *(unsigned char *)(v0 + *(int *)(type metadata accessor for Transform() + 56)) = 1;
  return AccessibilityRelationshipScope.clear(from:)(*(_DWORD *)(v1 + 12));
}

uint64_t protocol witness for static RemovableAttribute.willRemove(attribute:) in conformance Transform<A>()
{
  return static Transform.willRemove(attribute:)();
}

unint64_t protocol witness for CustomStringConvertible.description.getter in conformance Transform<A>()
{
  return 0xD000000000000022;
}

uint64_t protocol witness for static _AttributeBody._destroySelf(_:) in conformance Transform<A>(uint64_t a1, uint64_t a2)
{
  return Transform.destroy()(a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AccessibilityRelationshipScope.Relationship()
{
  char v1 = *v0;
  Hasher.init(_seed:)();
  if ((v1 - 2) >= 3u)
  {
    Swift::UInt v2 = v1 & 1;
    Hasher._combine(_:)(0);
  }
  else
  {
    Swift::UInt v2 = (v1 - 2) + 1;
  }
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance AccessibilityRelationshipScope.Relationship()
{
  if ((*v0 - 2) >= 3u)
  {
    Swift::UInt v1 = *v0 & 1;
    Hasher._combine(_:)(0);
  }
  else
  {
    Swift::UInt v1 = (*v0 - 2) + 1;
  }
  Hasher._combine(_:)(v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AccessibilityRelationshipScope.Relationship()
{
  char v1 = *v0;
  Hasher.init(_seed:)();
  if ((v1 - 2) >= 3u)
  {
    Swift::UInt v2 = v1 & 1;
    Hasher._combine(_:)(0);
  }
  else
  {
    Swift::UInt v2 = (v1 - 2) + 1;
  }
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance AccessibilityRelationshipScope.Relationship(unsigned __int8 *a1, unsigned __int8 *a2)
{
  int v2 = *a1;
  int v3 = *a2;
  unsigned int v4 = v3 - 2;
  BOOL v5 = v3 == 2;
  BOOL v6 = v3 == 3;
  BOOL v7 = v3 == 4;
  BOOL v8 = ((v3 ^ v2) & 1) == 0;
  if (v4 < 3) {
    BOOL v8 = 0;
  }
  if (v2 == 4) {
    BOOL v8 = v7;
  }
  if (v2 == 3) {
    BOOL v8 = v6;
  }
  if (v2 == 2) {
    return v5;
  }
  else {
    return v8;
  }
}

double AccessibilityRelationshipScope.Key.init<A>(identifier:in:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = *(void *)(a3 - 8);
  double v9 = MEMORY[0x1F4188790](a1);
  (*(void (**)(char *, uint64_t, double))(v8 + 16))((char *)&v13 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v9);
  AnyHashable.init<A>(_:)();
  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(a1, a3);
  double result = *(double *)&v14;
  long long v12 = v15;
  *(_OWORD *)a4 = v14;
  *(_OWORD *)(a4 + 16) = v12;
  *(void *)(a4 + 32) = v16;
  *(void *)(a4 + 40) = a2;
  return result;
}

Swift::Int AccessibilityRelationshipScope.NodeRelation.hashValue.getter()
{
  Swift::UInt v1 = *(void *)v0;
  char v2 = *(unsigned char *)(v0 + 8);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  if ((v2 - 2) >= 3u)
  {
    Swift::UInt v3 = v2 & 1;
    Hasher._combine(_:)(0);
  }
  else
  {
    Swift::UInt v3 = (v2 - 2) + 1;
  }
  Hasher._combine(_:)(v3);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AccessibilityRelationshipScope.Key()
{
  Hasher.init(_seed:)();
  AnyHashable.hash(into:)();
  Hasher._combine(_:)(*(void *)(v0 + 40));
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance AccessibilityRelationshipScope.Key()
{
  AnyHashable.hash(into:)();
  Hasher._combine(_:)(*(void *)(v0 + 40));
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AccessibilityRelationshipScope.Key()
{
  Hasher.init(_seed:)();
  AnyHashable.hash(into:)();
  Hasher._combine(_:)(*(void *)(v0 + 40));
  return Hasher._finalize()();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance AccessibilityRelationshipScope.Key(uint64_t a1, uint64_t a2)
{
  return (MEMORY[0x18C1174E0]() & 1) != 0 && *(void *)(a1 + 40) == *(void *)(a2 + 40);
}

void protocol witness for Hashable.hash(into:) in conformance AccessibilityRelationshipScope.NodeRelation()
{
  char v1 = *(unsigned char *)(v0 + 8);
  Hasher._combine(_:)(*(void *)v0);
  if ((v1 - 2) >= 3u)
  {
    Swift::UInt v2 = v1 & 1;
    Hasher._combine(_:)(0);
  }
  else
  {
    Swift::UInt v2 = (v1 - 2) + 1;
  }
  Hasher._combine(_:)(v2);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AccessibilityRelationshipScope.NodeRelation()
{
  Swift::UInt v1 = *(void *)v0;
  char v2 = *(unsigned char *)(v0 + 8);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  if ((v2 - 2) >= 3u)
  {
    Swift::UInt v3 = v2 & 1;
    Hasher._combine(_:)(0);
  }
  else
  {
    Swift::UInt v3 = (v2 - 2) + 1;
  }
  Hasher._combine(_:)(v3);
  return Hasher._finalize()();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance AccessibilityRelationshipScope.NodeRelation(uint64_t a1, uint64_t a2)
{
  if (*(void *)a1 != *(void *)a2) {
    return 0;
  }
  int v2 = *(unsigned __int8 *)(a1 + 8);
  int v3 = *(unsigned __int8 *)(a2 + 8);
  if (v2 == 2) {
    return v3 == 2;
  }
  if (v2 == 3) {
    return v3 == 3;
  }
  if (v2 != 4) {
    return (v3 - 2) >= 3 && ((v3 ^ v2) & 1) == 0;
  }
  return v3 == 4;
}

uint64_t updateRecordsByAttribute #1 <A>(_:) in AccessibilityRelationshipScope.update<A>(_:nodes:identifier:in:from:)(uint64_t a1, uint64_t a2)
{
  outlined init with copy of AccessibilityRelationshipScope.Key(a2, (uint64_t)v33);
  char v34 = *(unsigned char *)(a2 + 48);
  uint64_t v35 = *(void *)(a2 + 56);
  v24[0] = v33[0];
  v24[1] = v33[1];
  uint64_t v24[2] = v33[2];
  if (*(void *)(a1 + 24)) {
    outlined init with copy of AccessibilityRelationshipScope.Key(a1, (uint64_t)v32);
  }
  else {
    memset(v32, 0, sizeof(v32));
  }
  outlined init with copy of AccessibilityRelationshipScope.Key?((uint64_t)v24, (uint64_t)v27);
  outlined init with copy of AccessibilityRelationshipScope.Key?((uint64_t)v32, (uint64_t)&v29);
  if (v28)
  {
    outlined init with copy of AccessibilityRelationshipScope.Key?((uint64_t)v27, (uint64_t)v22);
    if (*((void *)&v30 + 1))
    {
      v20[0] = v29;
      v20[1] = v30;
      long long v21 = v31;
      char v4 = MEMORY[0x18C1174E0](v22, v20);
      char v5 = v4 & (v23 == *((void *)&v21 + 1));
      outlined destroy of AccessibilityRelationshipScope.Key((uint64_t)v20);
      uint64_t v6 = MEMORY[0x1E4FBB718];
      outlined destroy of (key: AccessibilityRelationshipScope.Key, relationship: AccessibilityRelationshipScope.Relationship, nodes: [AccessibilityNode])?((uint64_t)v32, (uint64_t)&lazy cache variable for type metadata for AccessibilityRelationshipScope.Key?, (uint64_t)&type metadata for AccessibilityRelationshipScope.Key, MEMORY[0x1E4FBB718], (uint64_t (*)(void))type metadata accessor for Attribute<AccessibilityNodeList>);
      outlined destroy of (key: AccessibilityRelationshipScope.Key, relationship: AccessibilityRelationshipScope.Relationship, nodes: [AccessibilityNode])?((uint64_t)v24, (uint64_t)&lazy cache variable for type metadata for AccessibilityRelationshipScope.Key?, (uint64_t)&type metadata for AccessibilityRelationshipScope.Key, v6, (uint64_t (*)(void))type metadata accessor for Attribute<AccessibilityNodeList>);
      outlined destroy of AccessibilityRelationshipScope.Key((uint64_t)v22);
      outlined destroy of (key: AccessibilityRelationshipScope.Key, relationship: AccessibilityRelationshipScope.Relationship, nodes: [AccessibilityNode])?((uint64_t)v27, (uint64_t)&lazy cache variable for type metadata for AccessibilityRelationshipScope.Key?, (uint64_t)&type metadata for AccessibilityRelationshipScope.Key, v6, (uint64_t (*)(void))type metadata accessor for Attribute<AccessibilityNodeList>);
      goto LABEL_11;
    }
    uint64_t v8 = MEMORY[0x1E4FBB718];
    outlined destroy of (key: AccessibilityRelationshipScope.Key, relationship: AccessibilityRelationshipScope.Relationship, nodes: [AccessibilityNode])?((uint64_t)v32, (uint64_t)&lazy cache variable for type metadata for AccessibilityRelationshipScope.Key?, (uint64_t)&type metadata for AccessibilityRelationshipScope.Key, MEMORY[0x1E4FBB718], (uint64_t (*)(void))type metadata accessor for Attribute<AccessibilityNodeList>);
    outlined destroy of (key: AccessibilityRelationshipScope.Key, relationship: AccessibilityRelationshipScope.Relationship, nodes: [AccessibilityNode])?((uint64_t)v24, (uint64_t)&lazy cache variable for type metadata for AccessibilityRelationshipScope.Key?, (uint64_t)&type metadata for AccessibilityRelationshipScope.Key, v8, (uint64_t (*)(void))type metadata accessor for Attribute<AccessibilityNodeList>);
    outlined destroy of AccessibilityRelationshipScope.Key((uint64_t)v22);
  }
  else
  {
    uint64_t v7 = MEMORY[0x1E4FBB718];
    outlined destroy of (key: AccessibilityRelationshipScope.Key, relationship: AccessibilityRelationshipScope.Relationship, nodes: [AccessibilityNode])?((uint64_t)v32, (uint64_t)&lazy cache variable for type metadata for AccessibilityRelationshipScope.Key?, (uint64_t)&type metadata for AccessibilityRelationshipScope.Key, MEMORY[0x1E4FBB718], (uint64_t (*)(void))type metadata accessor for Attribute<AccessibilityNodeList>);
    outlined destroy of (key: AccessibilityRelationshipScope.Key, relationship: AccessibilityRelationshipScope.Relationship, nodes: [AccessibilityNode])?((uint64_t)v24, (uint64_t)&lazy cache variable for type metadata for AccessibilityRelationshipScope.Key?, (uint64_t)&type metadata for AccessibilityRelationshipScope.Key, v7, (uint64_t (*)(void))type metadata accessor for Attribute<AccessibilityNodeList>);
    if (!*((void *)&v30 + 1))
    {
      outlined destroy of (key: AccessibilityRelationshipScope.Key, relationship: AccessibilityRelationshipScope.Relationship, nodes: [AccessibilityNode])?((uint64_t)v27, (uint64_t)&lazy cache variable for type metadata for AccessibilityRelationshipScope.Key?, (uint64_t)&type metadata for AccessibilityRelationshipScope.Key, MEMORY[0x1E4FBB718], (uint64_t (*)(void))type metadata accessor for Attribute<AccessibilityNodeList>);
      char v5 = 1;
      goto LABEL_11;
    }
  }
  outlined destroy of (AccessibilityRelationshipScope.Key?, AccessibilityRelationshipScope.Key?)((uint64_t)v27, (uint64_t (*)(void))type metadata accessor for (AccessibilityRelationshipScope.Key?, AccessibilityRelationshipScope.Key?));
  char v5 = 0;
LABEL_11:
  outlined init with copy of AccessibilityRelationshipScope.Key(a2, (uint64_t)v27);
  int v9 = *(unsigned __int8 *)(a2 + 48);
  LOBYTE(v29) = *(unsigned char *)(a2 + 48);
  uint64_t v10 = *(void *)(a2 + 56);
  *((void *)&v29 + 1) = v10;
  if ((v5 & 1) == 0)
  {
    swift_bridgeObjectRetain();
    outlined destroy of (AccessibilityRelationshipScope.Key?, AccessibilityRelationshipScope.Key?)((uint64_t)v27, (uint64_t (*)(void))type metadata accessor for (key: AccessibilityRelationshipScope.Key, relationship: AccessibilityRelationshipScope.Relationship, nodes: [AccessibilityNode]));
    int v14 = 1;
    goto LABEL_27;
  }
  outlined init with copy of AccessibilityRelationshipScope.Key((uint64_t)v27, (uint64_t)v33);
  swift_bridgeObjectRetain();
  outlined destroy of (AccessibilityRelationshipScope.Key?, AccessibilityRelationshipScope.Key?)((uint64_t)v27, (uint64_t (*)(void))type metadata accessor for (key: AccessibilityRelationshipScope.Key, relationship: AccessibilityRelationshipScope.Relationship, nodes: [AccessibilityNode]));
  char v34 = v9;
  uint64_t v35 = v10;
  uint64_t v11 = *(void *)(a1 + 24);
  if (v11)
  {
    int v12 = *(unsigned __int8 *)(a1 + 48);
    switch(v9)
    {
      case 2:
        BOOL v13 = v12 == 2;
        break;
      case 3:
        BOOL v13 = v12 == 3;
        break;
      case 4:
        BOOL v13 = v12 == 4;
        break;
      default:
        if ((v12 - 2) < 3)
        {
          LODWORD(v11) = 0;
          goto LABEL_26;
        }
        BOOL v13 = ((v12 ^ v9) & 1) == 0;
        break;
    }
    LODWORD(v11) = v13;
  }
LABEL_26:
  int v14 = v11 ^ 1;
  outlined destroy of AccessibilityRelationshipScope.Key((uint64_t)v33);
LABEL_27:
  outlined init with copy of AccessibilityRelationshipScope.Key(a2, (uint64_t)v33);
  char v15 = *(unsigned char *)(a2 + 48);
  char v34 = v15;
  uint64_t v16 = *(void *)(a2 + 56);
  uint64_t v35 = v16;
  if (v14)
  {
    swift_bridgeObjectRetain();
    outlined destroy of (AccessibilityRelationshipScope.Key?, AccessibilityRelationshipScope.Key?)((uint64_t)v33, (uint64_t (*)(void))type metadata accessor for (key: AccessibilityRelationshipScope.Key, relationship: AccessibilityRelationshipScope.Relationship, nodes: [AccessibilityNode]));
  }
  else
  {
    outlined init with copy of AccessibilityRelationshipScope.Key((uint64_t)v33, (uint64_t)v24);
    char v25 = v15;
    uint64_t v26 = v16;
    if (*(void *)(a1 + 24))
    {
      uint64_t v17 = *(void *)(a1 + 56);
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain();
      char v18 = specialized static Array<A>.== infix(_:_:)(v16, v17);
      swift_bridgeObjectRelease();
      outlined destroy of (AccessibilityRelationshipScope.Key?, AccessibilityRelationshipScope.Key?)((uint64_t)v33, (uint64_t (*)(void))type metadata accessor for (key: AccessibilityRelationshipScope.Key, relationship: AccessibilityRelationshipScope.Relationship, nodes: [AccessibilityNode]));
      swift_bridgeObjectRelease();
      outlined destroy of AccessibilityRelationshipScope.Key((uint64_t)v24);
      if (v18) {
        return 0;
      }
    }
    else
    {
      swift_bridgeObjectRetain();
      outlined destroy of (AccessibilityRelationshipScope.Key?, AccessibilityRelationshipScope.Key?)((uint64_t)v33, (uint64_t (*)(void))type metadata accessor for (key: AccessibilityRelationshipScope.Key, relationship: AccessibilityRelationshipScope.Relationship, nodes: [AccessibilityNode]));
      outlined destroy of AccessibilityRelationshipScope.Key((uint64_t)v24);
    }
  }
  outlined destroy of (key: AccessibilityRelationshipScope.Key, relationship: AccessibilityRelationshipScope.Relationship, nodes: [AccessibilityNode])?(a1, (uint64_t)&lazy cache variable for type metadata for (key: AccessibilityRelationshipScope.Key, relationship: AccessibilityRelationshipScope.Relationship, nodes: [AccessibilityNode])?, (uint64_t)type metadata accessor for (key: AccessibilityRelationshipScope.Key, relationship: AccessibilityRelationshipScope.Relationship, nodes: [AccessibilityNode]), MEMORY[0x1E4FBB718], (uint64_t (*)(void))type metadata accessor for (key: AccessibilityRelationshipScope.Key, relationship: AccessibilityRelationshipScope.Relationship, nodes: [AccessibilityNode])?);
  outlined init with copy of (key: AccessibilityRelationshipScope.Key, relationship: AccessibilityRelationshipScope.Relationship, nodes: [AccessibilityNode])(a2, a1);
  return 1;
}

uint64_t updateRelatedNodesByKey #1 <A>(_:) in AccessibilityRelationshipScope.update<A>(_:nodes:identifier:in:from:)(void **a1, unint64_t a2, char a3)
{
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v8 = *a1;
  uint64_t v19 = *a1;
  *a1 = (void *)0x8000000000000000;
  unint64_t v10 = specialized __RawDictionaryStorage.find<A>(_:)(a3);
  uint64_t v11 = v8[2];
  BOOL v12 = (v9 & 1) == 0;
  uint64_t v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
    goto LABEL_12;
  }
  char v3 = v9;
  if (v8[3] >= v13)
  {
    if (isUniquelyReferenced_nonNull_native) {
      goto LABEL_6;
    }
LABEL_12:
    specialized _NativeDictionary.copy()();
    uint64_t v8 = v19;
    goto LABEL_6;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v13, isUniquelyReferenced_nonNull_native);
  uint64_t v8 = v19;
  unint64_t v14 = specialized __RawDictionaryStorage.find<A>(_:)(a3);
  if ((v3 & 1) != (v15 & 1))
  {
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v10 = v14;
LABEL_6:
  *a1 = v8;
  swift_bridgeObjectRelease();
  uint64_t v16 = *a1;
  if ((v3 & 1) == 0) {
    specialized _NativeDictionary._insert(at:key:value:)(v10, a3, MEMORY[0x1E4FBC860], *a1);
  }
  uint64_t v17 = (uint64_t *)(v16[7] + 8 * v10);

  return updateRelatedNodes #1 <A>(_:) in updateRelatedNodesByKey #1 <A>(_:) in AccessibilityRelationshipScope.update<A>(_:nodes:identifier:in:from:)(v17, a2);
}

uint64_t updateRelatedNodes #1 <A>(_:) in updateRelatedNodesByKey #1 <A>(_:) in AccessibilityRelationshipScope.update<A>(_:nodes:identifier:in:from:)(uint64_t *a1, unint64_t a2)
{
  uint64_t v2 = a2;
  if (a2 >> 62) {
    goto LABEL_46;
  }
  uint64_t v4 = *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v4; uint64_t v4 = _CocoaArrayWrapper.endIndex.getter())
  {
    unint64_t v5 = 0;
    uint64_t v29 = v4;
    unint64_t v30 = v2 & 0xC000000000000001;
    uint64_t v26 = v2 + 32;
    uint64_t v27 = v2 & 0xFFFFFFFFFFFFFF8;
    uint64_t v28 = v2;
    while (1)
    {
      if (v30)
      {
        id v7 = (id)MEMORY[0x18C117680](v5, v2);
      }
      else
      {
        if (v5 >= *(void *)(v27 + 16)) {
          goto LABEL_44;
        }
        id v7 = *(id *)(v26 + 8 * v5);
      }
      uint64_t v8 = v7;
      if (__OFADD__(v5++, 1))
      {
        __break(1u);
LABEL_43:
        __break(1u);
LABEL_44:
        __break(1u);
        goto LABEL_45;
      }
      uint64_t v10 = *a1;
      if ((unint64_t)*a1 >> 62)
      {
        swift_bridgeObjectRetain_n();
        uint64_t v11 = _CocoaArrayWrapper.endIndex.getter();
        if (!v11) {
          goto LABEL_18;
        }
      }
      else
      {
        uint64_t v11 = *(void *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain_n();
        if (!v11) {
          goto LABEL_18;
        }
      }
      if ((v10 & 0xC000000000000001) != 0) {
        id v12 = (id)MEMORY[0x18C117680](0, v10);
      }
      else {
        id v12 = *(id *)(v10 + 32);
      }
      uint64_t v13 = v12;
      type metadata accessor for AccessibilityNode();
      char v14 = static NSObject.== infix(_:_:)();

      if (v14)
      {
LABEL_4:
        swift_bridgeObjectRelease_n();
LABEL_5:
        uint64_t v6 = v29;
        goto LABEL_6;
      }
      if (v11 != 1)
      {
        if ((v10 & 0xC000000000000001) != 0)
        {
          MEMORY[0x18C117680](1, v10);
          char v16 = static NSObject.== infix(_:_:)();
          swift_unknownObjectRelease();
          if (v16) {
            goto LABEL_4;
          }
          if (v11 != 2)
          {
            uint64_t v17 = 2;
            while (1)
            {
              MEMORY[0x18C117680](v17, v10);
              uint64_t v2 = v17 + 1;
              if (__OFADD__(v17, 1)) {
                goto LABEL_43;
              }
              char v18 = static NSObject.== infix(_:_:)();
              swift_unknownObjectRelease();
              if (v18) {
                goto LABEL_38;
              }
              ++v17;
              BOOL v19 = v2 == v11;
              uint64_t v2 = v28;
              if (v19) {
                goto LABEL_18;
              }
            }
          }
          goto LABEL_18;
        }
        id v20 = *(id *)(v10 + 40);
        char v21 = static NSObject.== infix(_:_:)();

        if (v21) {
          goto LABEL_4;
        }
        if (v11 != 2) {
          break;
        }
      }
LABEL_18:
      swift_bridgeObjectRelease_n();
      id v15 = v8;
      MEMORY[0x18C115B40]();
      uint64_t v6 = v29;
      if (*(void *)((*a1 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*a1 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
LABEL_6:

      if (v5 == v6) {
        goto LABEL_47;
      }
    }
    uint64_t v22 = 6;
    while (1)
    {
      uint64_t v2 = v22 - 3;
      if (__OFADD__(v22 - 4, 1)) {
        break;
      }
      id v23 = *(id *)(v10 + 8 * v22);
      char v24 = static NSObject.== infix(_:_:)();

      if (v24)
      {
LABEL_38:
        swift_bridgeObjectRelease_n();
        uint64_t v2 = v28;
        goto LABEL_5;
      }
      ++v22;
      BOOL v19 = v2 == v11;
      uint64_t v2 = v28;
      if (v19) {
        goto LABEL_18;
      }
    }
LABEL_45:
    __break(1u);
LABEL_46:
    swift_bridgeObjectRetain();
  }
LABEL_47:

  return swift_bridgeObjectRelease();
}

uint64_t updateKeysByNodeRelation #1 <A>(_:) in AccessibilityRelationshipScope.update<A>(_:nodes:identifier:in:from:)(uint64_t *a1, uint64_t a2)
{
  outlined init with copy of AccessibilityRelationshipScope.Key(a2, (uint64_t)v13);
  uint64_t v3 = *a1;
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  AnyHashable.hash(into:)();
  Hasher._combine(_:)(v14);
  Swift::Int v4 = Hasher._finalize()();
  uint64_t v5 = -1 << *(unsigned char *)(v3 + 32);
  unint64_t v6 = v4 & ~v5;
  if ((*(void *)(v3 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6))
  {
    uint64_t v7 = ~v5;
    while (1)
    {
      outlined init with copy of AccessibilityRelationshipScope.Key(*(void *)(v3 + 48) + 48 * v6, (uint64_t)v11);
      if ((MEMORY[0x18C1174E0](v11, v13) & 1) != 0 && v12 == v14) {
        break;
      }
      outlined destroy of AccessibilityRelationshipScope.Key((uint64_t)v11);
      unint64_t v6 = (v6 + 1) & v7;
      if (((*(void *)(v3 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
        goto LABEL_7;
      }
    }
    outlined destroy of AccessibilityRelationshipScope.Key((uint64_t)v11);
  }
  else
  {
LABEL_7:
    swift_bridgeObjectRelease();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    outlined init with copy of AccessibilityRelationshipScope.Key((uint64_t)v13, (uint64_t)v11);
    uint64_t v10 = *a1;
    *a1 = 0x8000000000000000;
    specialized _NativeSet.insertNew(_:at:isUnique:)((Swift::Int)v11, v6, isUniquelyReferenced_nonNull_native);
    *a1 = v10;
  }
  swift_bridgeObjectRelease();
  return outlined destroy of AccessibilityRelationshipScope.Key((uint64_t)v13);
}

void specialized thunk for @callee_guaranteed () -> (@owned Set<AccessibilityRelationshipScope.Key>)(void *a1@<X8>)
{
  *a1 = MEMORY[0x1E4FBC870];
}

void *specialized updateRelatedNodesByKey #1 (_:) in AccessibilityRelationshipScope.clear(from:)(void *result, uint64_t a2, char **a3)
{
  uint64_t v3 = *result;
  if (!*result) {
    return result;
  }
  unint64_t v37 = result;
  uint64_t v38 = v3 + 64;
  uint64_t v6 = 1 << *(unsigned char *)(v3 + 32);
  uint64_t v7 = -1;
  if (v6 < 64) {
    uint64_t v7 = ~(-1 << v6);
  }
  unint64_t v8 = v7 & *(void *)(v3 + 64);
  swift_bridgeObjectRetain();
  swift_beginAccess();
  int64_t v9 = 0;
  int64_t v39 = (unint64_t)(v6 + 63) >> 6;
  uint64_t v10 = (void *)v3;
  while (1)
  {
    if (v8)
    {
      unint64_t v11 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      unint64_t v12 = v11 | (v9 << 6);
      goto LABEL_25;
    }
    int64_t v13 = v9 + 1;
    if (__OFADD__(v9, 1)) {
      goto LABEL_54;
    }
    if (v13 >= v39)
    {
LABEL_51:
      uint64_t result = (void *)swift_release();
      *unint64_t v37 = v10;
      return result;
    }
    unint64_t v14 = *(void *)(v38 + 8 * v13);
    ++v9;
    if (!v14)
    {
      int64_t v9 = v13 + 1;
      if (v13 + 1 >= v39) {
        goto LABEL_51;
      }
      unint64_t v14 = *(void *)(v38 + 8 * v9);
      if (!v14)
      {
        int64_t v9 = v13 + 2;
        if (v13 + 2 >= v39) {
          goto LABEL_51;
        }
        unint64_t v14 = *(void *)(v38 + 8 * v9);
        if (!v14)
        {
          int64_t v9 = v13 + 3;
          if (v13 + 3 >= v39) {
            goto LABEL_51;
          }
          unint64_t v14 = *(void *)(v38 + 8 * v9);
          if (!v14)
          {
            int64_t v9 = v13 + 4;
            if (v13 + 4 >= v39) {
              goto LABEL_51;
            }
            unint64_t v14 = *(void *)(v38 + 8 * v9);
            if (!v14) {
              break;
            }
          }
        }
      }
    }
LABEL_24:
    unint64_t v8 = (v14 - 1) & v14;
    unint64_t v12 = __clz(__rbit64(v14)) + (v9 << 6);
LABEL_25:
    unsigned __int8 v16 = *(unsigned char *)(*(void *)(v3 + 48) + v12);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    char v41 = v10;
    unint64_t v19 = specialized __RawDictionaryStorage.find<A>(_:)(v16);
    uint64_t v20 = v10[2];
    BOOL v21 = (v18 & 1) == 0;
    uint64_t v22 = v20 + v21;
    if (__OFADD__(v20, v21))
    {
      __break(1u);
LABEL_54:
      __break(1u);
LABEL_55:
      __break(1u);
      goto LABEL_56;
    }
    char v23 = v18;
    if (v10[3] >= v22)
    {
      if (isUniquelyReferenced_nonNull_native)
      {
        if ((v18 & 1) == 0) {
          goto LABEL_34;
        }
      }
      else
      {
        specialized _NativeDictionary.copy()();
        if ((v23 & 1) == 0) {
          goto LABEL_34;
        }
      }
    }
    else
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v22, isUniquelyReferenced_nonNull_native);
      unint64_t v24 = specialized __RawDictionaryStorage.find<A>(_:)(v16);
      if ((v23 & 1) != (v25 & 1)) {
        goto LABEL_57;
      }
      unint64_t v19 = v24;
      if ((v23 & 1) == 0)
      {
LABEL_34:
        uint64_t v26 = 0;
        goto LABEL_35;
      }
    }
    uint64_t v26 = *(void *)(v41[7] + 8 * v19);
LABEL_35:
    uint64_t v40 = v26;
    char v27 = updateRelatedNodes #1 (removing:from:) in updateRelatedNodesByKey #1 (_:) in AccessibilityRelationshipScope.clear(from:)(v16, &v40, a2);
    char v28 = v27;
    uint64_t v29 = v40;
    if (v40)
    {
      uint64_t v10 = v41;
      if (v23)
      {
        *(void *)(v41[7] + 8 * v19) = v40;
        if (v27) {
          goto LABEL_46;
        }
      }
      else
      {
        v41[(v19 >> 6) + 8] |= 1 << v19;
        *(unsigned char *)(v10[6] + v19) = v16;
        *(void *)(v10[7] + 8 * v19) = v29;
        uint64_t v30 = v10[2];
        BOOL v31 = __OFADD__(v30, 1);
        uint64_t v32 = v30 + 1;
        if (v31) {
          goto LABEL_55;
        }
        v10[2] = v32;
        if (v27)
        {
LABEL_46:
          char v33 = *a3;
          char v34 = swift_isUniquelyReferenced_nonNull_native();
          *a3 = v33;
          if ((v34 & 1) == 0)
          {
            char v33 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v33 + 2) + 1, 1, v33);
            *a3 = v33;
          }
          unint64_t v36 = *((void *)v33 + 2);
          unint64_t v35 = *((void *)v33 + 3);
          if (v36 >= v35 >> 1)
          {
            char v33 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v35 > 1), v36 + 1, 1, v33);
            *a3 = v33;
          }
          *((void *)v33 + 2) = v36 + 1;
          v33[v36 + 32] = v16;
        }
      }
    }
    else
    {
      uint64_t v10 = v41;
      if (v23)
      {
        specialized _NativeDictionary._delete(at:)(v19, (uint64_t)v41);
        if (v28) {
          goto LABEL_46;
        }
      }
      else if (v27)
      {
        goto LABEL_46;
      }
    }
  }
  int64_t v15 = v13 + 5;
  if (v15 >= v39) {
    goto LABEL_51;
  }
  unint64_t v14 = *(void *)(v38 + 8 * v15);
  if (v14)
  {
    int64_t v9 = v15;
    goto LABEL_24;
  }
  while (1)
  {
    int64_t v9 = v15 + 1;
    if (__OFADD__(v15, 1)) {
      break;
    }
    if (v9 >= v39) {
      goto LABEL_51;
    }
    unint64_t v14 = *(void *)(v38 + 8 * v9);
    ++v15;
    if (v14) {
      goto LABEL_24;
    }
  }
LABEL_56:
  __break(1u);
LABEL_57:
  uint64_t result = (void *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t updateRelatedNodes #1 (removing:from:) in updateRelatedNodesByKey #1 (_:) in AccessibilityRelationshipScope.clear(from:)(unsigned __int8 a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = *a2;
  if (!*a2) {
    return 0;
  }
  unint64_t v52 = *a2;
  int v7 = *(unsigned __int8 *)(a3 + 48);
  BOOL v8 = (v7 - 2) >= 3 && ((v7 ^ a1) & 1) == 0;
  if (a1 == 4) {
    BOOL v8 = v7 == 4;
  }
  if (a1 == 3) {
    BOOL v8 = v7 == 3;
  }
  if (a1 == 2) {
    BOOL v9 = v7 == 2;
  }
  else {
    BOOL v9 = v8;
  }
  outlined init with copy of AccessibilityRelationshipScope.Key(a3, (uint64_t)v50);
  v50[48] = v7;
  uint64_t v10 = *(void *)(a3 + 56);
  uint64_t v51 = v10;
  if (v9)
  {
    outlined init with copy of AccessibilityRelationshipScope.Key((uint64_t)v50, (uint64_t)v47);
    char v48 = v7;
    uint64_t v49 = v10;
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    char v11 = specialized static Array<A>.== infix(_:_:)(v4, v10);
    swift_bridgeObjectRelease();
    outlined destroy of (AccessibilityRelationshipScope.Key?, AccessibilityRelationshipScope.Key?)((uint64_t)v50, (uint64_t (*)(void))type metadata accessor for (key: AccessibilityRelationshipScope.Key, relationship: AccessibilityRelationshipScope.Relationship, nodes: [AccessibilityNode]));
    swift_bridgeObjectRelease();
    outlined destroy of AccessibilityRelationshipScope.Key((uint64_t)v47);
    if (v11)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      *a2 = 0;
      return 1;
    }
  }
  else
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    outlined destroy of (AccessibilityRelationshipScope.Key?, AccessibilityRelationshipScope.Key?)((uint64_t)v50, (uint64_t (*)(void))type metadata accessor for (key: AccessibilityRelationshipScope.Key, relationship: AccessibilityRelationshipScope.Relationship, nodes: [AccessibilityNode]));
  }
  char v41 = a2;
  outlined init with copy of AccessibilityRelationshipScope.Key(a3, (uint64_t)v47);
  char v48 = *(unsigned char *)(a3 + 48);
  uint64_t v49 = *(void *)(a3 + 56);
  unint64_t v12 = v49;
  swift_bridgeObjectRetain();
  outlined destroy of AccessibilityRelationshipScope.Key((uint64_t)v47);
  uint64_t v42 = a3;
  if (!(v12 >> 62))
  {
    uint64_t v13 = *(void *)((v12 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v13) {
      goto LABEL_18;
    }
LABEL_61:
    swift_bridgeObjectRelease();
    outlined init with copy of AccessibilityRelationshipScope.Key(v42, (uint64_t)v47);
    char v48 = *(unsigned char *)(v42 + 48);
    uint64_t v49 = *(void *)(v42 + 56);
    MEMORY[0x1F4188790](v49);
    _OWORD v36[2] = v47;
    swift_bridgeObjectRetain();
    uint64_t result = specialized MutableCollection._halfStablePartition(isSuffixElement:)((uint64_t (*)(id *))partial apply for closure #1 in updateRelatedNodes #1 (removing:from:) in updateRelatedNodesByKey #1 (_:) in AccessibilityRelationshipScope.clear(from:), (uint64_t)v36);
    uint64_t v4 = result;
    if (v52 >> 62) {
      goto LABEL_70;
    }
    uint64_t v34 = *(void *)((v52 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v34 >= result) {
      goto LABEL_63;
    }
LABEL_71:
    __break(1u);
    return result;
  }
LABEL_60:
  swift_bridgeObjectRetain();
  uint64_t v13 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v13) {
    goto LABEL_61;
  }
LABEL_18:
  unint64_t v45 = v12 & 0xC000000000000001;
  if ((v12 & 0xC000000000000001) != 0)
  {
    id v14 = (id)MEMORY[0x18C117680](0, v12);
  }
  else
  {
    if (!*(void *)((v12 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
LABEL_67:
      swift_bridgeObjectRetain_n();
      uint64_t v15 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v15) {
        goto LABEL_23;
      }
      goto LABEL_55;
    }
    id v14 = *(id *)(v12 + 32);
  }
  uint64_t v3 = v14;
  unint64_t v44 = (unint64_t)v4 >> 62;
  if ((unint64_t)v4 >> 62) {
    goto LABEL_67;
  }
  uint64_t v15 = *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain_n();
  if (!v15)
  {
LABEL_55:
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();

    return 0;
  }
LABEL_23:
  type metadata accessor for AccessibilityNode();
  unint64_t v46 = v4 & 0xC000000000000001;
  uint64_t v38 = v12 & 0xFFFFFFFFFFFFFF8;
  unint64_t v37 = v12 + 32;
  uint64_t v16 = v4 & 0xFFFFFFFFFFFFFF8;
  uint64_t v40 = v4 & 0xFFFFFFFFFFFFFF8;
  if (v4 < 0) {
    uint64_t v16 = v4;
  }
  uint64_t v39 = v16;
  unint64_t v17 = 1;
  uint64_t v43 = v13;
  while (1)
  {
    if (v46) {
      id v18 = (id)MEMORY[0x18C117680](0, v4);
    }
    else {
      id v18 = *(id *)(v4 + 32);
    }
    unint64_t v19 = v18;
    char v20 = static NSObject.== infix(_:_:)();

    if ((v20 & 1) == 0)
    {
      if (v15 == 1) {
        goto LABEL_55;
      }
      if (v46)
      {
        MEMORY[0x18C117680](1, v4);
        char v21 = static NSObject.== infix(_:_:)();
        swift_unknownObjectRelease();
        if ((v21 & 1) == 0)
        {
          if (v15 == 2) {
            goto LABEL_55;
          }
          uint64_t v22 = 2;
          while (1)
          {
            MEMORY[0x18C117680](v22, v4);
            uint64_t v23 = v22 + 1;
            if (__OFADD__(v22, 1)) {
              break;
            }
            char v24 = static NSObject.== infix(_:_:)();
            swift_unknownObjectRelease();
            if (v24) {
              goto LABEL_41;
            }
            ++v22;
            if (v23 == v15) {
              goto LABEL_55;
            }
          }
          __break(1u);
LABEL_58:
          __break(1u);
LABEL_59:
          __break(1u);
          goto LABEL_60;
        }
      }
      else
      {
        id v25 = *(id *)(v4 + 40);
        char v26 = static NSObject.== infix(_:_:)();

        if ((v26 & 1) == 0)
        {
          if (v15 == 2) {
            goto LABEL_55;
          }
          uint64_t v29 = 6;
          while (1)
          {
            uint64_t v30 = v29 - 3;
            if (__OFADD__(v29 - 4, 1)) {
              goto LABEL_58;
            }
            id v31 = *(id *)(v4 + 8 * v29);
            char v32 = static NSObject.== infix(_:_:)();

            if (v32) {
              break;
            }
            ++v29;
            if (v30 == v15) {
              goto LABEL_55;
            }
          }
        }
      }
    }
LABEL_41:
    swift_bridgeObjectRelease_n();

    if (v17 == v43) {
      goto LABEL_61;
    }
    if (v45)
    {
      id v27 = (id)MEMORY[0x18C117680](v17, v12);
      goto LABEL_46;
    }
    if (v17 >= *(void *)(v38 + 16)) {
      break;
    }
    id v27 = *(id *)(v37 + 8 * v17);
LABEL_46:
    uint64_t v3 = v27;
    if (__OFADD__(v17++, 1)) {
      goto LABEL_59;
    }
    if (v44)
    {
      swift_bridgeObjectRetain_n();
      uint64_t v15 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (!v15) {
        goto LABEL_55;
      }
    }
    else
    {
      uint64_t v15 = *(void *)(v40 + 16);
      swift_bridgeObjectRetain_n();
      if (!v15) {
        goto LABEL_55;
      }
    }
  }
  __break(1u);
LABEL_70:
  swift_bridgeObjectRetain();
  uint64_t v34 = _CocoaArrayWrapper.endIndex.getter();
  uint64_t result = swift_bridgeObjectRelease();
  if (v34 < v4) {
    goto LABEL_71;
  }
LABEL_63:
  specialized Array.replaceSubrange<A>(_:with:)(v4, v34);
  unint64_t v35 = v41;
  swift_bridgeObjectRelease();
  outlined destroy of (AccessibilityRelationshipScope.Key?, AccessibilityRelationshipScope.Key?)((uint64_t)v47, (uint64_t (*)(void))type metadata accessor for (key: AccessibilityRelationshipScope.Key, relationship: AccessibilityRelationshipScope.Relationship, nodes: [AccessibilityNode]));
  *unint64_t v35 = v52;
  return 1;
}

uint64_t sub_1876C5748()
{
  return swift_getWitnessTable();
}

uint64_t getEnumTagSinglePayload for AccessibilityRelationshipScope.NodeRelation(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFC && *(unsigned char *)(a1 + 9)) {
    return (*(_DWORD *)a1 + 252);
  }
  if (*(unsigned __int8 *)(a1 + 8) <= 4u) {
    int v3 = 4;
  }
  else {
    int v3 = *(unsigned __int8 *)(a1 + 8);
  }
  int v4 = v3 - 5;
  if (*(unsigned __int8 *)(a1 + 8) < 2u) {
    int v5 = -1;
  }
  else {
    int v5 = v4;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for AccessibilityRelationshipScope.NodeRelation(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFB)
  {
    *(unsigned char *)(result + 8) = 0;
    *(void *)uint64_t result = a2 - 252;
    if (a3 >= 0xFC) {
      *(unsigned char *)(result + 9) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFC) {
      *(unsigned char *)(result + 9) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 8) = a2 + 4;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AccessibilityRelationshipScope.NodeRelation()
{
  return &type metadata for AccessibilityRelationshipScope.NodeRelation;
}

uint64_t getEnumTagSinglePayload for AccessibilityRelationshipScope.Relationship(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFC)
  {
    unsigned int v2 = a2 + 4;
    if (a2 + 4 >= 0xFFFF00) {
      unsigned int v3 = 4;
    }
    else {
      unsigned int v3 = 2;
    }
    if (v2 >> 8 < 0xFF) {
      unsigned int v3 = 1;
    }
    if (v2 >= 0x100) {
      uint64_t v4 = v3;
    }
    else {
      uint64_t v4 = 0;
    }
    switch(v4)
    {
      case 1:
        int v5 = a1[1];
        if (!a1[1]) {
          break;
        }
        return (*a1 | (v5 << 8)) - 4;
      case 2:
        int v5 = *(unsigned __int16 *)(a1 + 1);
        if (*(_WORD *)(a1 + 1)) {
          return (*a1 | (v5 << 8)) - 4;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x1876C5910);
      case 4:
        int v5 = *(_DWORD *)(a1 + 1);
        if (!v5) {
          break;
        }
        return (*a1 | (v5 << 8)) - 4;
      default:
        break;
    }
  }
  unsigned int v7 = *a1;
  if (v7 >= 2) {
    unsigned int v8 = v7 - 1;
  }
  else {
    unsigned int v8 = 0;
  }
  if (v8 >= 4) {
    return v8 - 3;
  }
  else {
    return 0;
  }
}

unsigned char *storeEnumTagSinglePayload for AccessibilityRelationshipScope.Relationship(unsigned char *result, unsigned int a2, unsigned int a3)
{
  unsigned int v3 = a3 + 4;
  if (a3 + 4 >= 0xFFFF00) {
    int v4 = 4;
  }
  else {
    int v4 = 2;
  }
  if (v3 >> 8 < 0xFF) {
    int v4 = 1;
  }
  if (v3 >= 0x100) {
    unsigned int v5 = v4;
  }
  else {
    unsigned int v5 = 0;
  }
  if (a3 >= 0xFC) {
    uint64_t v6 = v5;
  }
  else {
    uint64_t v6 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v7 = ((a2 - 252) >> 8) + 1;
    *uint64_t result = a2 + 4;
    switch(v6)
    {
      case 1:
        result[1] = v7;
        break;
      case 2:
        *(_WORD *)(result + 1) = v7;
        break;
      case 3:
LABEL_25:
        __break(1u);
        JUMPOUT(0x1876C59F8);
      case 4:
        *(_DWORD *)(result + 1) = v7;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v6)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_20;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_19;
      case 3:
        goto LABEL_25;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_20;
      default:
LABEL_19:
        if (a2) {
LABEL_20:
        }
          *uint64_t result = a2 + 4;
        break;
    }
  }
  return result;
}

uint64_t getEnumTag for AccessibilityRelationshipScope.Relationship(unsigned __int8 *a1)
{
  unsigned int v1 = *a1;
  if (v1 >= 2) {
    return v1 - 1;
  }
  else {
    return 0;
  }
}

unsigned char *destructiveInjectEnumTag for AccessibilityRelationshipScope.Relationship(unsigned char *result, int a2)
{
  if (a2) {
    *uint64_t result = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for AccessibilityRelationshipScope.Relationship()
{
  return &type metadata for AccessibilityRelationshipScope.Relationship;
}

uint64_t initializeWithCopy for AccessibilityRelationshipScope.Key(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v4;
  (**(void (***)(void))(v4 - 8))();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  return a1;
}

uint64_t *assignWithCopy for AccessibilityRelationshipScope.Key(uint64_t *a1, uint64_t *a2)
{
  a1[5] = a2[5];
  return a1;
}

uint64_t assignWithTake for AccessibilityRelationshipScope.Key(uint64_t a1, uint64_t a2)
{
  __swift_destroy_boxed_opaque_existential_1(a1);
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  uint64_t v5 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v5;
  return a1;
}

ValueMetadata *type metadata accessor for AccessibilityRelationshipScope.Key()
{
  return &type metadata for AccessibilityRelationshipScope.Key;
}

uint64_t *initializeBufferWithCopyOfBuffer for RelationshipModifier(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  unsigned int v3 = a1;
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v5 = *(_DWORD *)(v4 + 80);
  uint64_t v6 = *(void *)(v4 + 64) + 7;
  if (v5 > 7
    || (*(_DWORD *)(v4 + 80) & 0x100000) != 0
    || ((v6 + ((v5 + 1) & ~v5)) & 0xFFFFFFFFFFFFFFF8) + 8 > 0x18)
  {
    uint64_t v9 = *a2;
    uint64_t *v3 = *a2;
    unsigned int v3 = (uint64_t *)(v9 + ((v5 & 0xF8 ^ 0x1F8) & (v5 + 16)));
    swift_retain();
  }
  else
  {
    *(unsigned char *)a1 = *(unsigned char *)a2;
    uint64_t v10 = ((unint64_t)a1 + v5 + 1) & ~v5;
    uint64_t v11 = ((unint64_t)a2 + v5 + 1) & ~v5;
    (*(void (**)(uint64_t, uint64_t))(v4 + 16))(v10, v11);
    *(void *)((v6 + v10) & 0xFFFFFFFFFFFFFFF8) = *(void *)((v6 + v11) & 0xFFFFFFFFFFFFFFF8);
  }
  return v3;
}

unsigned char *initializeWithTake for RelationshipModifier(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v5 = v4 + 32;
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v7 = (unint64_t)&a1[v6 + 1] & ~v6;
  uint64_t v8 = (unint64_t)&a2[v6 + 1] & ~v6;
  (*(void (**)(uint64_t, uint64_t))(v4 + 32))(v7, v8);
  *(void *)((*(void *)(v5 + 32) + 7 + v7) & 0xFFFFFFFFFFFFFFF8) = *(void *)((*(void *)(v5 + 32) + 7 + v8) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

unsigned char *assignWithTake for RelationshipModifier(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v5 = v4 + 40;
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v7 = (unint64_t)&a1[v6 + 1] & ~v6;
  uint64_t v8 = (unint64_t)&a2[v6 + 1] & ~v6;
  (*(void (**)(uint64_t, uint64_t))(v4 + 40))(v7, v8);
  *(void *)((*(void *)(v5 + 24) + 7 + v7) & 0xFFFFFFFFFFFFFFF8) = *(void *)((*(void *)(v5 + 24) + 7 + v8) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

uint64_t getEnumTagSinglePayload for RelationshipModifier(_DWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  if (v5 <= 0xFB) {
    unsigned int v7 = 251;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  if (v7 < a2)
  {
    unint64_t v8 = ((*(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) + ((v6 + 1) & ~v6) + 7) & 0xFFFFFFFFFFFFFFF8)
       + 8;
    unsigned int v9 = a2 - v7;
    uint64_t v10 = v8 & 0xFFFFFFF8;
    if ((v8 & 0xFFFFFFF8) != 0) {
      unsigned int v11 = 2;
    }
    else {
      unsigned int v11 = v9 + 1;
    }
    if (v11 >= 0x10000) {
      unsigned int v12 = 4;
    }
    else {
      unsigned int v12 = 2;
    }
    if (v11 < 0x100) {
      unsigned int v12 = 1;
    }
    if (v11 >= 2) {
      uint64_t v13 = v12;
    }
    else {
      uint64_t v13 = 0;
    }
    switch(v13)
    {
      case 1:
        int v14 = *((unsigned __int8 *)a1 + v8);
        if (!v14) {
          break;
        }
        goto LABEL_22;
      case 2:
        int v14 = *(unsigned __int16 *)((char *)a1 + v8);
        if (v14) {
          goto LABEL_22;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x1876C5EFCLL);
      case 4:
        int v14 = *(_DWORD *)((char *)a1 + v8);
        if (!v14) {
          break;
        }
LABEL_22:
        int v16 = v14 - 1;
        if (v10)
        {
          int v16 = 0;
          LODWORD(v10) = *a1;
        }
        return v7 + (v10 | v16) + 1;
      default:
        break;
    }
  }
  if (v5 > 0xFB) {
    return (*(uint64_t (**)(unint64_t))(v4 + 48))(((unint64_t)a1 + v6 + 1) & ~v6);
  }
  unsigned int v17 = *(unsigned __int8 *)a1;
  if (v17 >= 2) {
    unsigned int v18 = v17 - 1;
  }
  else {
    unsigned int v18 = 0;
  }
  if (v18 >= 4) {
    return v18 - 3;
  }
  else {
    return 0;
  }
}

void storeEnumTagSinglePayload for RelationshipModifier(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0xFB) {
    unsigned int v8 = 251;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(unsigned __int8 *)(v6 + 80);
  size_t v10 = ((*(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64) + ((v9 + 1) & ~v9) + 7) & 0xFFFFFFFFFFFFFFF8)
      + 8;
  if (v8 >= a3)
  {
    int v14 = 0;
    int v15 = a2 - v8;
    if (a2 <= v8)
    {
LABEL_17:
      switch(v14)
      {
        case 1:
          a1[v10] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_30;
        case 2:
          *(_WORD *)&a1[v10] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_30;
        case 3:
          goto LABEL_39;
        case 4:
          *(_DWORD *)&a1[v10] = 0;
          goto LABEL_29;
        default:
LABEL_29:
          if (a2)
          {
LABEL_30:
            if (v7 > 0xFB)
            {
              unint64_t v18 = (unint64_t)&a1[v9 + 1] & ~v9;
              unint64_t v19 = *(void (**)(unint64_t))(v6 + 56);
              v19(v18);
            }
            else
            {
              *a1 = a2 + 4;
            }
          }
          break;
      }
      return;
    }
  }
  else
  {
    unsigned int v11 = a3 - v8;
    if (((*(_DWORD *)(*(void *)(*(void *)(a4 + 16) - 8) + 64) + ((v9 + 1) & ~v9) + 7) & 0xFFFFFFF8) == 0xFFFFFFF8) {
      unsigned int v12 = v11 + 1;
    }
    else {
      unsigned int v12 = 2;
    }
    if (v12 >= 0x10000) {
      int v13 = 4;
    }
    else {
      int v13 = 2;
    }
    if (v12 < 0x100) {
      int v13 = 1;
    }
    if (v12 >= 2) {
      int v14 = v13;
    }
    else {
      int v14 = 0;
    }
    int v15 = a2 - v8;
    if (a2 <= v8) {
      goto LABEL_17;
    }
  }
  if (((*(_DWORD *)(*(void *)(*(void *)(a4 + 16) - 8) + 64) + ((v9 + 1) & ~v9) + 7) & 0xFFFFFFF8) == 0xFFFFFFF8) {
    int v16 = v15;
  }
  else {
    int v16 = 1;
  }
  if (((*(_DWORD *)(*(void *)(*(void *)(a4 + 16) - 8) + 64) + ((v9 + 1) & ~v9) + 7) & 0xFFFFFFF8) != 0xFFFFFFF8)
  {
    int v17 = ~v8 + a2;
    bzero(a1, v10);
    *(_DWORD *)a1 = v17;
  }
  switch(v14)
  {
    case 1:
      a1[v10] = v16;
      break;
    case 2:
      *(_WORD *)&a1[v10] = v16;
      break;
    case 3:
LABEL_39:
      __break(1u);
      JUMPOUT(0x1876C60FCLL);
    case 4:
      *(_DWORD *)&a1[v10] = v16;
      break;
    default:
      return;
  }
}

unint64_t lazy protocol witness table accessor for type AccessibilityRelationshipScope.Key and conformance AccessibilityRelationshipScope.Key()
{
  unint64_t result = lazy protocol witness table cache variable for type AccessibilityRelationshipScope.Key and conformance AccessibilityRelationshipScope.Key;
  if (!lazy protocol witness table cache variable for type AccessibilityRelationshipScope.Key and conformance AccessibilityRelationshipScope.Key)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityRelationshipScope.Key and conformance AccessibilityRelationshipScope.Key);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AccessibilityRelationshipScope.Key and conformance AccessibilityRelationshipScope.Key;
  if (!lazy protocol witness table cache variable for type AccessibilityRelationshipScope.Key and conformance AccessibilityRelationshipScope.Key)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityRelationshipScope.Key and conformance AccessibilityRelationshipScope.Key);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AccessibilityRelationshipScope.Relationship and conformance AccessibilityRelationshipScope.Relationship()
{
  unint64_t result = lazy protocol witness table cache variable for type AccessibilityRelationshipScope.Relationship and conformance AccessibilityRelationshipScope.Relationship;
  if (!lazy protocol witness table cache variable for type AccessibilityRelationshipScope.Relationship and conformance AccessibilityRelationshipScope.Relationship)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityRelationshipScope.Relationship and conformance AccessibilityRelationshipScope.Relationship);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AccessibilityRelationshipScope.Relationship and conformance AccessibilityRelationshipScope.Relationship;
  if (!lazy protocol witness table cache variable for type AccessibilityRelationshipScope.Relationship and conformance AccessibilityRelationshipScope.Relationship)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityRelationshipScope.Relationship and conformance AccessibilityRelationshipScope.Relationship);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AccessibilityRelationshipScope.NodeRelation and conformance AccessibilityRelationshipScope.NodeRelation()
{
  unint64_t result = lazy protocol witness table cache variable for type AccessibilityRelationshipScope.NodeRelation and conformance AccessibilityRelationshipScope.NodeRelation;
  if (!lazy protocol witness table cache variable for type AccessibilityRelationshipScope.NodeRelation and conformance AccessibilityRelationshipScope.NodeRelation)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityRelationshipScope.NodeRelation and conformance AccessibilityRelationshipScope.NodeRelation);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AccessibilityRelationshipScope.NodeRelation and conformance AccessibilityRelationshipScope.NodeRelation;
  if (!lazy protocol witness table cache variable for type AccessibilityRelationshipScope.NodeRelation and conformance AccessibilityRelationshipScope.NodeRelation)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityRelationshipScope.NodeRelation and conformance AccessibilityRelationshipScope.NodeRelation);
  }
  return result;
}

void protocol witness for static GraphInput.makeReusable(indirectMap:value:) in conformance AccessibilityRelationshipScope()
{
}

uint64_t protocol witness for static PropertyKey.valuesEqual(_:_:) in conformance AccessibilityRelationshipScope(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F40FD528](a1, a2, v2);
}

uint64_t base witness table accessor for PropertyKey in AccessibilityRelationshipScope()
{
  return lazy protocol witness table accessor for type AccessibilityRelationshipScope and conformance AccessibilityRelationshipScope((unint64_t *)&lazy protocol witness table cache variable for type AccessibilityRelationshipScope and conformance AccessibilityRelationshipScope);
}

uint64_t base witness table accessor for GraphInput in AccessibilityRelationshipScope()
{
  return lazy protocol witness table accessor for type AccessibilityRelationshipScope and conformance AccessibilityRelationshipScope(&lazy protocol witness table cache variable for type AccessibilityRelationshipScope and conformance AccessibilityRelationshipScope);
}

void *initializeBufferWithCopyOfBuffer for Transform(_DWORD *a1, int *a2, uint64_t a3)
{
  unsigned int v3 = a1;
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  int v5 = *(_DWORD *)(v4 + 80);
  uint64_t v6 = *(unsigned int *)(v4 + 84);
  uint64_t v7 = v5;
  unint64_t v8 = v5 & 0xF8 ^ 0xFFFFFFFFFFFFFFF8;
  uint64_t v9 = v5 + 1;
  unint64_t v10 = (*(void *)(v4 + 64) + 7 + ((v7 + 1) & ~v7)) & 0xFFFFFFFFFFFFFFF8;
  size_t v11 = ((v10 + 15) & 0xFFFFFFFFFFFFFFF8) + 8;
  int v12 = v5 & 0x100000;
  if (v7 <= 7 && v12 == 0 && ((v11 + (v8 & (v7 + 24))) | 1) <= 0x18)
  {
    uint64_t v39 = *(void *)(a3 + 16);
    uint64_t v37 = *(void *)(v4 + 64) + 7;
    uint64_t v38 = ~v7;
    unint64_t v16 = v10 + 8;
    if (v6 <= 0x7FFFFFFF) {
      int v17 = 0x7FFFFFFF;
    }
    else {
      int v17 = *(_DWORD *)(v4 + 84);
    }
    int v20 = *a2;
    unint64_t v18 = (unint64_t)a2 + 7;
    int v19 = v20;
    if (v6 <= 0xFB) {
      int v21 = 251;
    }
    else {
      int v21 = *(_DWORD *)(v4 + 84);
    }
    *a1 = v19;
    uint64_t v22 = (_DWORD *)(((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFFFCLL);
    *uint64_t v22 = *(_DWORD *)(v18 & 0xFFFFFFFFFFFFFFFCLL);
    uint64_t v23 = (_DWORD *)(((unint64_t)v22 + 7) & 0xFFFFFFFFFFFFFFFCLL);
    char v24 = (_DWORD *)(((v18 & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL);
    *uint64_t v23 = *v24;
    id v25 = (_DWORD *)(((unint64_t)v23 + 7) & 0xFFFFFFFFFFFFFFFCLL);
    char v26 = (_DWORD *)(((unint64_t)v24 + 7) & 0xFFFFFFFFFFFFFFFCLL);
    *id v25 = *v26;
    id v27 = (void *)(((unint64_t)v25 + 11) & 0xFFFFFFFFFFFFFFF8);
    char v28 = (void *)(((unint64_t)v26 + 11) & 0xFFFFFFFFFFFFFFF8);
    *id v27 = *v28;
    uint64_t v29 = (unsigned char *)(v8 & ((unint64_t)v27 + 15));
    uint64_t v30 = (unsigned char *)(v8 & ((unint64_t)v28 + 15));
    swift_retain();
    if (v21 == v17)
    {
      if (v6 <= 0xFB)
      {
        unsigned int v31 = *v30;
        unsigned int v32 = v31 - 1;
        if (v31 < 2) {
          unsigned int v32 = 0;
        }
        if (v32 >= 4) {
          goto LABEL_25;
        }
LABEL_28:
        *uint64_t v29 = v31;
        unint64_t v34 = (unint64_t)&v29[v9] & v38;
        unint64_t v35 = (unint64_t)&v30[v9] & v38;
        (*(void (**)(unint64_t, unint64_t, uint64_t))(v4 + 16))(v34, v35, v39);
        *(void *)((v37 + v34) & 0xFFFFFFFFFFFFFFF8) = *(void *)((v37 + v35) & 0xFFFFFFFFFFFFFFF8);
        *(void *)&v29[v16] = *(void *)&v30[v16];
        swift_bridgeObjectRetain();
        goto LABEL_29;
      }
      if ((*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v4 + 48))((unint64_t)&v30[v9] & v38, v6, v39))
      {
LABEL_25:
        memcpy(v29, v30, v11);
LABEL_29:
        v29[v11] = v30[v11];
        return v3;
      }
    }
    else
    {
      unint64_t v33 = *(void *)&v30[v16];
      if (v33 >= 0xFFFFFFFF) {
        LODWORD(v33) = -1;
      }
      if (v33 != -1) {
        goto LABEL_25;
      }
    }
    LOBYTE(v31) = *v30;
    goto LABEL_28;
  }
  uint64_t v15 = *(void *)a2;
  void *v3 = *(void *)a2;
  unsigned int v3 = (void *)(v15 + (v8 & (v7 + 16)));
  swift_retain();
  return v3;
}

_DWORD *assignWithCopy for Transform(_DWORD *a1, int *a2, uint64_t a3)
{
  int v6 = *a2;
  unint64_t v5 = (unint64_t)a2 + 7;
  *a1 = v6;
  uint64_t v7 = (_DWORD *)(((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *uint64_t v7 = *(_DWORD *)(v5 & 0xFFFFFFFFFFFFFFFCLL);
  unint64_t v8 = (_DWORD *)(((unint64_t)v7 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  uint64_t v9 = (_DWORD *)(((v5 & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL);
  _DWORD *v8 = *v9;
  unint64_t v10 = (_DWORD *)(((unint64_t)v8 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  size_t v11 = (_DWORD *)(((unint64_t)v9 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *unint64_t v10 = *v11;
  int v12 = (void *)(((unint64_t)v10 + 11) & 0xFFFFFFFFFFFFFFF8);
  int v13 = (void *)(((unint64_t)v11 + 11) & 0xFFFFFFFFFFFFFFF8);
  *int v12 = *v13;
  swift_retain();
  swift_release();
  uint64_t v14 = *(void *)(a3 + 16);
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = v15;
  uint64_t v17 = *(unsigned int *)(v15 + 84);
  uint64_t v18 = *(_DWORD *)(v15 + 80);
  unint64_t v19 = *(_DWORD *)(v15 + 80) & 0xF8 ^ 0xFFFFFFFFFFFFFFF8;
  int v20 = (unsigned char *)(((unint64_t)v12 + v18 + 8) & v19);
  int v21 = (unsigned char *)(((unint64_t)v13 + v18 + 8) & v19);
  if (v17 <= 0xFB) {
    int v22 = 251;
  }
  else {
    int v22 = *(_DWORD *)(v15 + 84);
  }
  if (v17 <= 0x7FFFFFFF) {
    int v23 = 0x7FFFFFFF;
  }
  else {
    int v23 = *(_DWORD *)(v15 + 84);
  }
  uint64_t v24 = ~v18;
  uint64_t v25 = v18 + 1;
  uint64_t v26 = *(void *)(v15 + 64) + 7;
  unint64_t v27 = (v26 + ((v18 + 1) & ~v18)) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v28 = v27 + 8;
  size_t v29 = ((v27 + 15) & 0xFFFFFFFFFFFFFFF8) + 8;
  if (v22 != v23)
  {
    unint64_t v35 = *(void *)&v21[v28];
    if (v35 >= 0xFFFFFFFF) {
      LODWORD(v35) = -1;
    }
    unsigned int v33 = v35 + 1;
    if (*(void *)&v20[v28] > 0xFFFFFFFEuLL) {
      goto LABEL_22;
    }
    goto LABEL_27;
  }
  if (v17 > 0xFB)
  {
    unint64_t v45 = ((v27 + 15) & 0xFFFFFFFFFFFFFFF8) + 8;
    unint64_t v36 = *(uint64_t (**)(unint64_t, uint64_t))(v16 + 48);
    uint64_t v44 = v26;
    uint64_t v37 = v14;
    int v43 = v36((unint64_t)&v20[v25] & v24, v17);
    unsigned int v33 = ((uint64_t (*)(unint64_t, uint64_t, uint64_t))v36)((unint64_t)&v21[v25] & v24, v17, v37);
    uint64_t v14 = v37;
    uint64_t v26 = v44;
    size_t v29 = v45;
    if (!v43) {
      goto LABEL_22;
    }
LABEL_27:
    if (v33) {
      goto LABEL_28;
    }
    LOBYTE(v31) = *v21;
LABEL_30:
    *int v20 = v31;
    unint64_t v40 = (unint64_t)&v20[v25] & v24;
    unint64_t v41 = (unint64_t)&v21[v25] & v24;
    (*(void (**)(unint64_t, unint64_t))(v16 + 16))(v40, v41);
    *(void *)((v26 + v40) & 0xFFFFFFFFFFFFFFF8) = *(void *)((v26 + v41) & 0xFFFFFFFFFFFFFFF8);
    *(void *)&v20[v28] = *(void *)&v21[v28];
    swift_bridgeObjectRetain();
    goto LABEL_31;
  }
  unsigned int v30 = *v20;
  unsigned int v31 = *v21;
  unsigned int v32 = v31 - 1;
  if (v31 < 2) {
    unsigned int v32 = 0;
  }
  unsigned int v33 = v32 - 3;
  if (v30 >= 2 && v30 - 1 >= 4)
  {
    if (v32 < 4) {
      goto LABEL_30;
    }
    goto LABEL_27;
  }
  if (v32 < 4) {
    goto LABEL_25;
  }
LABEL_22:
  if (v33)
  {
    (*(void (**)(unint64_t, uint64_t))(v16 + 8))((unint64_t)&v20[v25] & v24, v14);
    swift_bridgeObjectRelease();
LABEL_28:
    memcpy(v20, v21, v29);
    goto LABEL_31;
  }
  LOBYTE(v31) = *v21;
LABEL_25:
  *int v20 = v31;
  unint64_t v38 = (unint64_t)&v20[v25] & v24;
  unint64_t v39 = (unint64_t)&v21[v25] & v24;
  (*(void (**)(unint64_t, unint64_t))(v16 + 24))(v38, v39);
  *(void *)((v26 + v38) & 0xFFFFFFFFFFFFFFF8) = *(void *)((v26 + v39) & 0xFFFFFFFFFFFFFFF8);
  *(void *)&v20[v28] = *(void *)&v21[v28];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
LABEL_31:
  v20[v29] = v21[v29];
  return a1;
}

_DWORD *initializeWithTake for Transform(_DWORD *a1, int *a2, uint64_t a3)
{
  unsigned int v3 = a1;
  int v5 = *a2;
  unint64_t v4 = (unint64_t)a2 + 7;
  *a1 = v5;
  int v6 = (_DWORD *)(((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *int v6 = *(_DWORD *)(v4 & 0xFFFFFFFFFFFFFFFCLL);
  uint64_t v7 = (_DWORD *)(((unint64_t)v6 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  unint64_t v8 = (_DWORD *)(((v4 & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *uint64_t v7 = *v8;
  uint64_t v9 = (_DWORD *)(((unint64_t)v7 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  unint64_t v10 = (_DWORD *)(((unint64_t)v8 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *uint64_t v9 = *v10;
  size_t v11 = (void *)(((unint64_t)v9 + 11) & 0xFFFFFFFFFFFFFFF8);
  int v12 = (void *)(((unint64_t)v10 + 11) & 0xFFFFFFFFFFFFFFF8);
  *size_t v11 = *v12;
  uint64_t v13 = *(void *)(a3 + 16);
  uint64_t v14 = *(void *)(v13 - 8);
  unsigned int v15 = *(_DWORD *)(v14 + 84);
  uint64_t v16 = *(_DWORD *)(v14 + 80);
  unint64_t v17 = *(_DWORD *)(v14 + 80) & 0xF8 ^ 0xFFFFFFFFFFFFFFF8;
  uint64_t v18 = (unsigned char *)(((unint64_t)v11 + v16 + 8) & v17);
  unint64_t v19 = (unsigned char *)(((unint64_t)v12 + v16 + 8) & v17);
  if (v15 <= 0xFB) {
    int v20 = 251;
  }
  else {
    int v20 = *(_DWORD *)(v14 + 84);
  }
  if (v15 <= 0x7FFFFFFF) {
    int v21 = 0x7FFFFFFF;
  }
  else {
    int v21 = *(_DWORD *)(v14 + 84);
  }
  uint64_t v22 = ~v16;
  uint64_t v23 = v16 + 1;
  uint64_t v24 = *(void *)(*(void *)(v13 - 8) + 64) + 7;
  unint64_t v25 = (v24 + ((v16 + 1) & ~v16)) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v26 = v25 + 8;
  size_t v27 = ((v25 + 15) & 0xFFFFFFFFFFFFFFF8) + 8;
  if (v20 != v21)
  {
    unint64_t v30 = *(void *)&v19[v26];
    if (v30 >= 0xFFFFFFFF) {
      LODWORD(v30) = -1;
    }
    if (v30 != -1) {
      goto LABEL_16;
    }
    goto LABEL_18;
  }
  if (v15 <= 0xFB)
  {
    unsigned int v28 = *v19;
    unsigned int v29 = v28 - 1;
    if (v28 < 2) {
      unsigned int v29 = 0;
    }
    if (v29 >= 4) {
      goto LABEL_16;
    }
LABEL_19:
    *uint64_t v18 = v28;
    unsigned int v33 = v3;
    unint64_t v34 = (unint64_t)&v18[v23] & v22;
    unint64_t v35 = (unint64_t)&v19[v23] & v22;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v14 + 32))(v34, v35, v13);
    unint64_t v36 = v24 + v34;
    unsigned int v3 = v33;
    *(void *)(v36 & 0xFFFFFFFFFFFFFFF8) = *(void *)((v24 + v35) & 0xFFFFFFFFFFFFFFF8);
    *(void *)&v18[v26] = *(void *)&v19[v26];
    goto LABEL_20;
  }
  uint64_t v31 = v13;
  int v32 = (*(uint64_t (**)(unint64_t))(v14 + 48))((unint64_t)&v19[v23] & v22);
  uint64_t v13 = v31;
  if (!v32)
  {
LABEL_18:
    LOBYTE(v28) = *v19;
    goto LABEL_19;
  }
LABEL_16:
  memcpy(v18, v19, v27);
LABEL_20:
  v18[v27] = v19[v27];
  return v3;
}

_DWORD *assignWithTake for Transform(_DWORD *a1, int *a2, uint64_t a3)
{
  unint64_t v4 = a1;
  int v6 = *a2;
  unint64_t v5 = (unint64_t)a2 + 7;
  *a1 = v6;
  uint64_t v7 = (_DWORD *)(((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *uint64_t v7 = *(_DWORD *)(v5 & 0xFFFFFFFFFFFFFFFCLL);
  unint64_t v8 = (_DWORD *)(((unint64_t)v7 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  uint64_t v9 = (_DWORD *)(((v5 & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL);
  _DWORD *v8 = *v9;
  unint64_t v10 = (_DWORD *)(((unint64_t)v8 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  size_t v11 = (_DWORD *)(((unint64_t)v9 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *unint64_t v10 = *v11;
  int v12 = (void *)(((unint64_t)v10 + 11) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v13 = (void *)(((unint64_t)v11 + 11) & 0xFFFFFFFFFFFFFFF8);
  *int v12 = *v13;
  swift_release();
  uint64_t v14 = *(void *)(a3 + 16);
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = v15;
  uint64_t v17 = *(unsigned int *)(v15 + 84);
  uint64_t v18 = *(_DWORD *)(v15 + 80);
  unint64_t v19 = *(_DWORD *)(v15 + 80) & 0xF8 ^ 0xFFFFFFFFFFFFFFF8;
  int v20 = (unsigned char *)(((unint64_t)v12 + v18 + 8) & v19);
  int v21 = (unsigned char *)(((unint64_t)v13 + v18 + 8) & v19);
  if (v17 <= 0xFB) {
    int v22 = 251;
  }
  else {
    int v22 = *(_DWORD *)(v15 + 84);
  }
  if (v17 <= 0x7FFFFFFF) {
    int v23 = 0x7FFFFFFF;
  }
  else {
    int v23 = *(_DWORD *)(v15 + 84);
  }
  uint64_t v24 = ~v18;
  uint64_t v25 = v18 + 1;
  uint64_t v26 = *(void *)(v15 + 64) + 7;
  unint64_t v27 = (v26 + ((v18 + 1) & ~v18)) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v28 = v27 + 8;
  size_t v29 = ((v27 + 15) & 0xFFFFFFFFFFFFFFF8) + 8;
  if (v22 != v23)
  {
    unint64_t v35 = *(void *)&v21[v28];
    if (v35 >= 0xFFFFFFFF) {
      LODWORD(v35) = -1;
    }
    unsigned int v33 = v35 + 1;
    if (*(void *)&v20[v28] > 0xFFFFFFFEuLL) {
      goto LABEL_22;
    }
    goto LABEL_27;
  }
  if (v17 > 0xFB)
  {
    unint64_t v45 = v4;
    unint64_t v36 = *(uint64_t (**)(unint64_t, uint64_t))(v16 + 48);
    uint64_t v44 = v26;
    uint64_t v37 = v14;
    int v43 = v36((unint64_t)&v20[v25] & v24, v17);
    unsigned int v33 = ((uint64_t (*)(unint64_t, uint64_t, uint64_t))v36)((unint64_t)&v21[v25] & v24, v17, v37);
    uint64_t v14 = v37;
    uint64_t v26 = v44;
    unint64_t v4 = v45;
    if (!v43) {
      goto LABEL_22;
    }
LABEL_27:
    if (v33) {
      goto LABEL_28;
    }
    LOBYTE(v31) = *v21;
LABEL_30:
    *int v20 = v31;
    unint64_t v40 = (unint64_t)&v20[v25] & v24;
    unint64_t v41 = (unint64_t)&v21[v25] & v24;
    (*(void (**)(unint64_t, unint64_t))(v16 + 32))(v40, v41);
    *(void *)((v26 + v40) & 0xFFFFFFFFFFFFFFF8) = *(void *)((v26 + v41) & 0xFFFFFFFFFFFFFFF8);
    *(void *)&v20[v28] = *(void *)&v21[v28];
    goto LABEL_31;
  }
  unsigned int v30 = *v20;
  unsigned int v31 = *v21;
  unsigned int v32 = v31 - 1;
  if (v31 < 2) {
    unsigned int v32 = 0;
  }
  unsigned int v33 = v32 - 3;
  if (v30 >= 2 && v30 - 1 >= 4)
  {
    if (v32 < 4) {
      goto LABEL_30;
    }
    goto LABEL_27;
  }
  if (v32 < 4) {
    goto LABEL_25;
  }
LABEL_22:
  if (v33)
  {
    (*(void (**)(unint64_t, uint64_t))(v16 + 8))((unint64_t)&v20[v25] & v24, v14);
    swift_bridgeObjectRelease();
LABEL_28:
    memcpy(v20, v21, v29);
    goto LABEL_31;
  }
  LOBYTE(v31) = *v21;
LABEL_25:
  *int v20 = v31;
  unint64_t v38 = (unint64_t)&v20[v25] & v24;
  unint64_t v39 = (unint64_t)&v21[v25] & v24;
  (*(void (**)(unint64_t, unint64_t))(v16 + 40))(v38, v39);
  *(void *)((v26 + v38) & 0xFFFFFFFFFFFFFFF8) = *(void *)((v26 + v39) & 0xFFFFFFFFFFFFFFF8);
  *(void *)&v20[v28] = *(void *)&v21[v28];
  swift_bridgeObjectRelease();
LABEL_31:
  v20[v29] = v21[v29];
  return v4;
}

uint64_t getEnumTagSinglePayload for Transform(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v5 = v4;
  unsigned int v6 = *(_DWORD *)(v4 + 84);
  if (v6 <= 0xFB) {
    int v7 = 251;
  }
  else {
    int v7 = *(_DWORD *)(v4 + 84);
  }
  if (v6 <= 0x7FFFFFFF) {
    int v8 = 0x7FFFFFFF;
  }
  else {
    int v8 = *(_DWORD *)(v4 + 84);
  }
  uint64_t v9 = *(unsigned __int8 *)(v4 + 80);
  if ((v8 - 1) <= 0x7FFFFFFF) {
    unsigned int v10 = 0x7FFFFFFF;
  }
  else {
    unsigned int v10 = v8 - 1;
  }
  if (!a2) {
    return 0;
  }
  uint64_t v11 = v9 | 7;
  unint64_t v12 = (*(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) + ((v9 + 1) & ~v9) + 7) & 0xFFFFFFFFFFFFFFF8;
  int v13 = a2 - v10;
  if (a2 <= v10) {
    goto LABEL_30;
  }
  unint64_t v14 = ((v9 + 24) & ~v11) + ((v12 + 15) & 0xFFFFFFFFFFFFFFF8) + 9;
  char v15 = 8 * v14;
  if (v14 <= 3)
  {
    unsigned int v18 = (v13 + ~(-1 << v15)) >> v15;
    if (v18 > 0xFFFE)
    {
      int v16 = *(_DWORD *)((char *)a1 + v14);
      if (!v16) {
        goto LABEL_30;
      }
      goto LABEL_21;
    }
    if (v18 > 0xFE)
    {
      int v16 = *(unsigned __int16 *)((char *)a1 + v14);
      if (!*(unsigned __int16 *)((char *)a1 + v14)) {
        goto LABEL_30;
      }
      goto LABEL_21;
    }
    if (!v18)
    {
LABEL_30:
      int v21 = (unint64_t *)(((((((((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL)
                                  + 7) & 0xFFFFFFFFFFFFFFFCLL)
                                + 11) & 0xFFFFFFFFFFFFFFF8);
      if (v8 - 1 < 0)
      {
        int v23 = (unsigned __int8 *)(((unint64_t)v21 + v11 + 8) & ~v11);
        if (v7 == v8)
        {
          if (v6 > 0xFB)
          {
            unsigned int v26 = (*(uint64_t (**)(unint64_t))(v5 + 48))((unint64_t)&v23[v9 + 1] & ~v9);
          }
          else
          {
            unsigned int v24 = *v23;
            if (v24 >= 2) {
              unsigned int v25 = v24 - 1;
            }
            else {
              unsigned int v25 = 0;
            }
            if (v25 >= 4) {
              unsigned int v26 = v25 - 3;
            }
            else {
              unsigned int v26 = 0;
            }
          }
        }
        else
        {
          unint64_t v27 = *(void *)&v23[v12 + 8];
          if (v27 >= 0xFFFFFFFF) {
            LODWORD(v27) = -1;
          }
          unsigned int v26 = v27 + 1;
        }
        if (v26 >= 2) {
          return v26 - 1;
        }
        else {
          return 0;
        }
      }
      else
      {
        unint64_t v22 = *v21;
        if (v22 >= 0xFFFFFFFF) {
          LODWORD(v22) = -1;
        }
        return (v22 + 1);
      }
    }
  }
  int v16 = *((unsigned __int8 *)a1 + v14);
  if (!*((unsigned char *)a1 + v14)) {
    goto LABEL_30;
  }
LABEL_21:
  int v19 = (v16 - 1) << v15;
  if (v14 > 3)
  {
    int v19 = 0;
    LODWORD(v14) = 4;
  }
  switch((int)v14)
  {
    case 2:
      int v20 = *a1;
      break;
    case 3:
      int v20 = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
      break;
    case 4:
      int v20 = *(_DWORD *)a1;
      break;
    default:
      int v20 = *(unsigned __int8 *)a1;
      break;
  }
  return v10 + (v20 | v19) + 1;
}

void storeEnumTagSinglePayload for Transform(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  uint64_t v7 = v6;
  unsigned int v8 = *(_DWORD *)(v6 + 84);
  if (v8 <= 0xFB) {
    int v9 = 251;
  }
  else {
    int v9 = *(_DWORD *)(v6 + 84);
  }
  if (v8 <= 0x7FFFFFFF) {
    unsigned int v10 = 0x7FFFFFFF;
  }
  else {
    unsigned int v10 = *(_DWORD *)(v6 + 84);
  }
  unsigned int v11 = v10 - 1;
  if (v10 - 1 <= 0x7FFFFFFF) {
    unsigned int v12 = 0x7FFFFFFF;
  }
  else {
    unsigned int v12 = v10 - 1;
  }
  uint64_t v13 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v14 = v13 | 7;
  uint64_t v15 = v13 + 1;
  unint64_t v16 = (*(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64) + ((v13 + 1) & ~v13) + 7) & 0xFFFFFFFFFFFFFFF8;
  size_t v17 = ((v16 + 15) & 0xFFFFFFFFFFFFFFF8) + 8;
  size_t v18 = (v17 + ((v13 + 24) & ~(v13 | 7))) | 1;
  BOOL v19 = a3 >= v12;
  unsigned int v20 = a3 - v12;
  if (v20 != 0 && v19)
  {
    if (v18 <= 3)
    {
      unsigned int v26 = (v20 + ~(-1 << (8 * v18))) >> (8 * v18);
      if (v26 > 0xFFFE)
      {
        int v21 = 4;
      }
      else if (v26 >= 0xFF)
      {
        int v21 = 2;
      }
      else
      {
        int v21 = v26 != 0;
      }
    }
    else
    {
      int v21 = 1;
    }
  }
  else
  {
    int v21 = 0;
  }
  if (v12 < a2)
  {
    unsigned int v22 = ~v12 + a2;
    if (v18 < 4)
    {
      int v23 = (v22 >> (8 * v18)) + 1;
      bzero(a1, v18);
      *a1 = v22 & ~(-1 << (8 * v18));
    }
    else
    {
      bzero(a1, v18);
      *(_DWORD *)a1 = v22;
      int v23 = 1;
    }
    switch(v21)
    {
      case 1:
        a1[v18] = v23;
        return;
      case 2:
        *(_WORD *)&a1[v18] = v23;
        return;
      case 3:
        goto LABEL_54;
      case 4:
        *(_DWORD *)&a1[v18] = v23;
        return;
      default:
        return;
    }
  }
  unint64_t v24 = v16 + 8;
  uint64_t v25 = ~v13;
  switch(v21)
  {
    case 1:
      a1[v18] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_29;
    case 2:
      *(_WORD *)&a1[v18] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_29;
    case 3:
LABEL_54:
      __break(1u);
      JUMPOUT(0x1876C7368);
    case 4:
      *(_DWORD *)&a1[v18] = 0;
      goto LABEL_28;
    default:
LABEL_28:
      if (a2)
      {
LABEL_29:
        unint64_t v27 = (void *)((((((((unint64_t)(a1 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL)
                        + 11) & 0xFFFFFFFFFFFFFFF8);
        if ((v11 & 0x80000000) != 0)
        {
          size_t v29 = (unsigned char *)(((unint64_t)v27 + v14 + 8) & ~v14);
          if (v11 >= a2 && a2 + 1 <= v10)
          {
            if (a2 != -1)
            {
              if (v9 == v10)
              {
                if (v8 > 0xFB)
                {
                  unint64_t v31 = (unint64_t)&v29[v15] & v25;
                  unsigned int v32 = *(void (**)(unint64_t, uint64_t))(v7 + 56);
                  uint64_t v33 = a2 + 1;
                  v32(v31, v33);
                }
                else
                {
                  *size_t v29 = a2 + 5;
                }
              }
              else if (((a2 + 1) & 0x80000000) != 0)
              {
                *(void *)&v29[v24] = a2 - 0x7FFFFFFF;
              }
              else
              {
                *(void *)&v29[v24] = a2;
              }
            }
          }
          else if (v17)
          {
            unsigned int v30 = a2 - v10;
            bzero((void *)(((unint64_t)v27 + v14 + 8) & ~v14), v17);
            *(_DWORD *)size_t v29 = v30;
          }
        }
        else
        {
          if ((a2 & 0x80000000) != 0) {
            uint64_t v28 = a2 ^ 0x80000000;
          }
          else {
            uint64_t v28 = a2 - 1;
          }
          *unint64_t v27 = v28;
        }
      }
      return;
  }
}

uint64_t *initializeBufferWithCopyOfBuffer for Transform.State(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v6 = *(_DWORD *)(v5 + 80);
  uint64_t v7 = *(void *)(v5 + 64) + 7;
  unint64_t v8 = ((v7 + ((v6 + 1) & ~v6)) & 0xFFFFFFFFFFFFFFF8) + 15;
  if (v6 > 7 || (*(_DWORD *)(v5 + 80) & 0x100000) != 0 || (v8 & 0xFFFFFFFFFFFFFFF8) + 8 > 0x18)
  {
    uint64_t v11 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (uint64_t *)(v11 + ((v6 & 0xF8 ^ 0x1F8) & (v6 + 16)));
    swift_retain();
  }
  else
  {
    *(unsigned char *)a1 = *(unsigned char *)a2;
    uint64_t v12 = ((unint64_t)a1 + v6 + 1) & ~v6;
    uint64_t v13 = ((unint64_t)a2 + v6 + 1) & ~v6;
    (*(void (**)(uint64_t, uint64_t))(v5 + 16))(v12, v13);
    *(void *)((v7 + v12) & 0xFFFFFFFFFFFFFFF8) = *(void *)((v7 + v13) & 0xFFFFFFFFFFFFFFF8);
    *(void *)(((unint64_t)v4 + v8) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)a2 + v8) & 0xFFFFFFFFFFFFFFF8);
    swift_bridgeObjectRetain();
  }
  return v4;
}

uint64_t destroy for Transform.State(uint64_t a1, uint64_t a2)
{
  (*(void (**)(unint64_t))(*(void *)(*(void *)(a2 + 16) - 8) + 8))((*(unsigned __int8 *)(*(void *)(*(void *)(a2 + 16) - 8) + 80)
                                                                                            + 1
                                                                                            + a1) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(*(void *)(a2 + 16) - 8) + 80));

  return swift_bridgeObjectRelease();
}

unsigned char *initializeWithCopy for Transform.State(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v6 = v5 + 16;
  uint64_t v7 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v8 = (unint64_t)&a1[v7 + 1] & ~v7;
  uint64_t v9 = (unint64_t)&a2[v7 + 1] & ~v7;
  (*(void (**)(uint64_t, uint64_t))(v5 + 16))(v8, v9);
  uint64_t v10 = *(void *)(v6 + 48) + 7;
  *(void *)((v10 + v8) & 0xFFFFFFFFFFFFFFF8) = *(void *)((v10 + v9) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v11 = ((v10 + ((v7 + 1) & ~v7)) & 0xFFFFFFFFFFFFFFF8) + 15;
  *(void *)((unint64_t)&a1[v11] & 0xFFFFFFFFFFFFFFF8) = *(void *)((unint64_t)&a2[v11] & 0xFFFFFFFFFFFFFFF8);
  swift_bridgeObjectRetain();
  return a1;
}

unsigned char *assignWithCopy for Transform.State(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v6 = v5 + 24;
  uint64_t v7 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v8 = (unint64_t)&a1[v7 + 1] & ~v7;
  uint64_t v9 = (unint64_t)&a2[v7 + 1] & ~v7;
  (*(void (**)(uint64_t, uint64_t))(v5 + 24))(v8, v9);
  uint64_t v10 = *(void *)(v6 + 40) + 7;
  *(void *)((v10 + v8) & 0xFFFFFFFFFFFFFFF8) = *(void *)((v10 + v9) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v11 = ((v10 + ((v7 + 1) & ~v7)) & 0xFFFFFFFFFFFFFFF8) + 15;
  *(void *)((unint64_t)&a1[v11] & 0xFFFFFFFFFFFFFFF8) = *(void *)((unint64_t)&a2[v11] & 0xFFFFFFFFFFFFFFF8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

unsigned char *initializeWithTake for Transform.State(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v6 = v5 + 32;
  uint64_t v7 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v8 = (unint64_t)&a1[v7 + 1] & ~v7;
  uint64_t v9 = (unint64_t)&a2[v7 + 1] & ~v7;
  (*(void (**)(uint64_t, uint64_t))(v5 + 32))(v8, v9);
  uint64_t v10 = *(void *)(v6 + 32) + 7;
  *(void *)((v10 + v8) & 0xFFFFFFFFFFFFFFF8) = *(void *)((v10 + v9) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v11 = ((v10 + ((v7 + 1) & ~v7)) & 0xFFFFFFFFFFFFFFF8) + 15;
  *(void *)((unint64_t)&a1[v11] & 0xFFFFFFFFFFFFFFF8) = *(void *)((unint64_t)&a2[v11] & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

unsigned char *assignWithTake for Transform.State(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v6 = v5 + 40;
  uint64_t v7 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v8 = (unint64_t)&a1[v7 + 1] & ~v7;
  uint64_t v9 = (unint64_t)&a2[v7 + 1] & ~v7;
  (*(void (**)(uint64_t, uint64_t))(v5 + 40))(v8, v9);
  uint64_t v10 = *(void *)(v6 + 24) + 7;
  *(void *)((v10 + v8) & 0xFFFFFFFFFFFFFFF8) = *(void *)((v10 + v9) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v11 = ((v10 + ((v7 + 1) & ~v7)) & 0xFFFFFFFFFFFFFFF8) + 15;
  *(void *)((unint64_t)&a1[v11] & 0xFFFFFFFFFFFFFFF8) = *(void *)((unint64_t)&a2[v11] & 0xFFFFFFFFFFFFFFF8);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for Transform.State(_DWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v5 = v4;
  unsigned int v6 = *(_DWORD *)(v4 + 84);
  if (v6 <= 0xFB) {
    int v7 = 251;
  }
  else {
    int v7 = *(_DWORD *)(v4 + 84);
  }
  uint64_t v8 = *(unsigned __int8 *)(v4 + 80);
  if (v6 <= 0x7FFFFFFF) {
    unsigned int v9 = 0x7FFFFFFF;
  }
  else {
    unsigned int v9 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  unint64_t v10 = (*(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) + ((v8 + 1) & ~v8) + 7) & 0xFFFFFFFFFFFFFFF8;
  if (v9 < a2)
  {
    unint64_t v11 = ((v10 + 15) & 0xFFFFFFFFFFFFFFF8) + 8;
    unsigned int v12 = a2 - v9;
    uint64_t v13 = v11 & 0xFFFFFFF8;
    if ((v11 & 0xFFFFFFF8) != 0) {
      unsigned int v14 = 2;
    }
    else {
      unsigned int v14 = v12 + 1;
    }
    if (v14 >= 0x10000) {
      unsigned int v15 = 4;
    }
    else {
      unsigned int v15 = 2;
    }
    if (v14 < 0x100) {
      unsigned int v15 = 1;
    }
    if (v14 >= 2) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = 0;
    }
    switch(v16)
    {
      case 1:
        int v17 = *((unsigned __int8 *)a1 + v11);
        if (!v17) {
          break;
        }
        goto LABEL_25;
      case 2:
        int v17 = *(unsigned __int16 *)((char *)a1 + v11);
        if (v17) {
          goto LABEL_25;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x1876C7AA8);
      case 4:
        int v17 = *(_DWORD *)((char *)a1 + v11);
        if (!v17) {
          break;
        }
LABEL_25:
        int v19 = v17 - 1;
        if (v13)
        {
          int v19 = 0;
          LODWORD(v13) = *a1;
        }
        return v9 + (v13 | v19) + 1;
      default:
        break;
    }
  }
  if (v7 == v9)
  {
    if (v6 > 0xFB)
    {
      return (*(uint64_t (**)(unint64_t))(v5 + 48))(((unint64_t)a1 + v8 + 1) & ~v8);
    }
    else
    {
      unsigned int v20 = *(unsigned __int8 *)a1;
      if (v20 >= 2) {
        unsigned int v21 = v20 - 1;
      }
      else {
        unsigned int v21 = 0;
      }
      if (v21 >= 4) {
        return v21 - 3;
      }
      else {
        return 0;
      }
    }
  }
  else
  {
    unint64_t v22 = *(void *)(((unint64_t)a1 + v10 + 15) & 0xFFFFFFFFFFFFFFF8);
    if (v22 >= 0xFFFFFFFF) {
      LODWORD(v22) = -1;
    }
    return (v22 + 1);
  }
}

uint64_t outlined init with copy of AccessibilityRelationshipScope.Key(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 24) = v4;
  (**(void (***)(uint64_t, uint64_t))(v4 - 8))(a2, a1);
  *(void *)(a2 + 40) = *(void *)(a1 + 40);
  return a2;
}

void type metadata accessor for (key: AccessibilityRelationshipScope.Key, relationship: AccessibilityRelationshipScope.Relationship, nodes: [AccessibilityNode])()
{
  if (!lazy cache variable for type metadata for (key: AccessibilityRelationshipScope.Key, relationship: AccessibilityRelationshipScope.Relationship, nodes: [AccessibilityNode]))
  {
    type metadata accessor for (key: AccessibilityRelationshipScope.Key, relationship: AccessibilityRelationshipScope.Relationship, nodes: [AccessibilityNode])?(255, (unint64_t *)&lazy cache variable for type metadata for [AccessibilityNode], (uint64_t (*)(uint64_t))type metadata accessor for AccessibilityNode, MEMORY[0x1E4FBB320]);
    TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
    if (!v1) {
      atomic_store(TupleTypeMetadata3, (unint64_t *)&lazy cache variable for type metadata for (key: AccessibilityRelationshipScope.Key, relationship: AccessibilityRelationshipScope.Relationship, nodes: [AccessibilityNode]));
    }
  }
}

void type metadata accessor for (key: AccessibilityRelationshipScope.Key, relationship: AccessibilityRelationshipScope.Relationship, nodes: [AccessibilityNode])?(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

uint64_t outlined destroy of (AccessibilityRelationshipScope.Key?, AccessibilityRelationshipScope.Key?)(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t outlined init with copy of AccessibilityRelationshipScope.Key?(uint64_t a1, uint64_t a2)
{
  type metadata accessor for Attribute<AccessibilityNodeList>(0, &lazy cache variable for type metadata for AccessibilityRelationshipScope.Key?, (uint64_t)&type metadata for AccessibilityRelationshipScope.Key, MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of (key: AccessibilityRelationshipScope.Key, relationship: AccessibilityRelationshipScope.Relationship, nodes: [AccessibilityNode])?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  uint64_t v6 = a5(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(a1, v6);
  return a1;
}

void type metadata accessor for (AccessibilityRelationshipScope.Key?, AccessibilityRelationshipScope.Key?)()
{
  if (!lazy cache variable for type metadata for (AccessibilityRelationshipScope.Key?, AccessibilityRelationshipScope.Key?))
  {
    type metadata accessor for Attribute<AccessibilityNodeList>(255, &lazy cache variable for type metadata for AccessibilityRelationshipScope.Key?, (uint64_t)&type metadata for AccessibilityRelationshipScope.Key, MEMORY[0x1E4FBB718]);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (AccessibilityRelationshipScope.Key?, AccessibilityRelationshipScope.Key?));
    }
  }
}

uint64_t outlined init with copy of (key: AccessibilityRelationshipScope.Key, relationship: AccessibilityRelationshipScope.Relationship, nodes: [AccessibilityNode])(uint64_t a1, uint64_t a2)
{
  type metadata accessor for (key: AccessibilityRelationshipScope.Key, relationship: AccessibilityRelationshipScope.Relationship, nodes: [AccessibilityNode])();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t partial apply for closure #1 in updateRelatedNodes #1 (removing:from:) in updateRelatedNodesByKey #1 (_:) in AccessibilityRelationshipScope.clear(from:)(uint64_t *a1)
{
  return specialized Sequence<>.contains(_:)(*a1, *(void *)(*(void *)(v1 + 16) + 56)) & 1;
}

uint64_t associated type witness table accessor for TupleProtocol.Tail : TupleProtocol in Tuple<A, B>(uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + 32);
}

_UNKNOWN **associated type witness table accessor for TupleProtocol.Tail : TupleProtocol in EmptyTuple()
{
  return &protocol witness table for EmptyTuple;
}

uint64_t base witness table accessor for Equatable in <> Tuple<A, B>()
{
  return swift_getWitnessTable();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance EmptyTuple()
{
  return Hasher._finalize()();
}

uint64_t static Tuple<>.== infix(_:_:)()
{
  if ((dispatch thunk of static Equatable.== infix(_:_:)() & 1) == 0) {
    return 0;
  }
  type metadata accessor for Tuple();
  return dispatch thunk of static Equatable.== infix(_:_:)() & 1;
}

uint64_t Tuple<>.hash(into:)()
{
  return dispatch thunk of Hashable.hash(into:)();
}

Swift::Int Tuple<>.hashValue.getter()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance <> Tuple<A, B>()
{
  return static Tuple<>.== infix(_:_:)();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance <> Tuple<A, B>()
{
  return Tuple<>.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance <> Tuple<A, B>()
{
  return Tuple<>.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance <> Tuple<A, B>()
{
  return Hasher._finalize()();
}

uint64_t type metadata accessor for Tuple()
{
  return __swift_instantiateGenericMetadata();
}

ValueMetadata *type metadata accessor for EmptyTuple.Head()
{
  return &type metadata for EmptyTuple.Head;
}

ValueMetadata *type metadata accessor for EmptyTuple()
{
  return &type metadata for EmptyTuple;
}

uint64_t *initializeBufferWithCopyOfBuffer for Tuple(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  uint64_t v7 = *(void *)(a3 + 24);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(_DWORD *)(v8 + 80);
  uint64_t v10 = v6 + v9;
  unint64_t v11 = ((v6 + v9) & ~v9) + *(void *)(v8 + 64);
  uint64_t v12 = (*(unsigned char *)(v5 + 80) | *(unsigned char *)(v8 + 80));
  if (v12 > 7 || ((*(_DWORD *)(v5 + 80) | *(_DWORD *)(v8 + 80)) & 0x100000) != 0 || v11 > 0x18)
  {
    uint64_t v15 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (uint64_t *)(v15 + ((v12 + 16) & ~v12));
    swift_retain();
  }
  else
  {
    uint64_t v16 = ~v9;
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v8 + 16))(((unint64_t)v4 + v10) & v16, ((unint64_t)a2 + v10) & v16, v7);
  }
  return v4;
}

uint64_t assignWithTake for Tuple(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8) + 40;
  (*(void (**)(void))v6)();
  uint64_t v7 = *(void *)(*(void *)(a3 + 24) - 8);
  (*(void (**)(unint64_t, unint64_t))(v7 + 40))((*(void *)(v6 + 24) + *(unsigned __int8 *)(v7 + 80) + a1) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80), (*(void *)(v6 + 24) + *(unsigned __int8 *)(v7 + 80) + a2) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
  return a1;
}

uint64_t getEnumTagSinglePayload for Tuple(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v5 = *(void *)(a3 + 24);
  unsigned int v6 = *(_DWORD *)(v4 + 84);
  uint64_t v7 = *(void *)(v5 - 8);
  uint64_t v8 = *(unsigned int *)(v7 + 84);
  uint64_t v9 = *(unsigned __int8 *)(v7 + 80);
  if (v8 <= v6) {
    unsigned int v10 = *(_DWORD *)(v4 + 84);
  }
  else {
    unsigned int v10 = *(_DWORD *)(v7 + 84);
  }
  if (!a2) {
    return 0;
  }
  uint64_t v11 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) + v9;
  unsigned int v12 = a2 - v10;
  if (a2 <= v10) {
    goto LABEL_24;
  }
  uint64_t v13 = (v11 & ~v9) + *(void *)(*(void *)(v5 - 8) + 64);
  char v14 = 8 * v13;
  if (v13 <= 3)
  {
    unsigned int v16 = ((v12 + ~(-1 << v14)) >> v14) + 1;
    if (HIWORD(v16))
    {
      int v15 = *(_DWORD *)((char *)a1 + v13);
      if (!v15) {
        goto LABEL_24;
      }
      goto LABEL_14;
    }
    if (v16 > 0xFF)
    {
      int v15 = *(unsigned __int16 *)((char *)a1 + v13);
      if (!*(unsigned __int16 *)((char *)a1 + v13)) {
        goto LABEL_24;
      }
      goto LABEL_14;
    }
    if (v16 < 2)
    {
LABEL_24:
      if (v10)
      {
        if (v6 >= v8) {
          return (*(uint64_t (**)(void))(v4 + 48))();
        }
        else {
          return (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v7 + 48))(((unint64_t)a1 + v11) & ~v9, v8, v5);
        }
      }
      return 0;
    }
  }
  int v15 = *((unsigned __int8 *)a1 + v13);
  if (!*((unsigned char *)a1 + v13)) {
    goto LABEL_24;
  }
LABEL_14:
  int v17 = (v15 - 1) << v14;
  if (v13 > 3) {
    int v17 = 0;
  }
  if (v13)
  {
    if (v13 <= 3) {
      int v18 = v13;
    }
    else {
      int v18 = 4;
    }
    switch(v18)
    {
      case 2:
        int v19 = *a1;
        break;
      case 3:
        int v19 = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        int v19 = *(_DWORD *)a1;
        break;
      default:
        int v19 = *(unsigned __int8 *)a1;
        break;
    }
  }
  else
  {
    int v19 = 0;
  }
  return v10 + (v19 | v17) + 1;
}

void storeEnumTagSinglePayload for Tuple(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  uint64_t v8 = *(void *)(a4 + 24);
  uint64_t v9 = *(void *)(v8 - 8);
  unsigned int v10 = *(_DWORD *)(v9 + 84);
  uint64_t v11 = *(unsigned __int8 *)(v9 + 80);
  if (v10 <= v7) {
    unsigned int v12 = *(_DWORD *)(v6 + 84);
  }
  else {
    unsigned int v12 = *(_DWORD *)(v9 + 84);
  }
  uint64_t v13 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64) + v11;
  size_t v14 = (v13 & ~v11) + *(void *)(*(void *)(v8 - 8) + 64);
  BOOL v15 = a3 >= v12;
  unsigned int v16 = a3 - v12;
  if (v16 != 0 && v15)
  {
    if (v14 <= 3)
    {
      unsigned int v20 = ((v16 + ~(-1 << (8 * v14))) >> (8 * v14)) + 1;
      if (HIWORD(v20))
      {
        int v17 = 4;
      }
      else if (v20 >= 0x100)
      {
        int v17 = 2;
      }
      else
      {
        int v17 = v20 > 1;
      }
    }
    else
    {
      int v17 = 1;
    }
  }
  else
  {
    int v17 = 0;
  }
  if (v12 < a2)
  {
    unsigned int v18 = ~v12 + a2;
    if (v14 < 4)
    {
      int v19 = (v18 >> (8 * v14)) + 1;
      if (v14)
      {
        int v21 = v18 & ~(-1 << (8 * v14));
        bzero(a1, v14);
        if (v14 == 3)
        {
          *(_WORD *)a1 = v21;
          a1[2] = BYTE2(v21);
        }
        else if (v14 == 2)
        {
          *(_WORD *)a1 = v21;
        }
        else
        {
          *a1 = v21;
        }
      }
    }
    else
    {
      bzero(a1, v14);
      *(_DWORD *)a1 = v18;
      int v19 = 1;
    }
    switch(v17)
    {
      case 1:
        a1[v14] = v19;
        return;
      case 2:
        *(_WORD *)&a1[v14] = v19;
        return;
      case 3:
        goto LABEL_41;
      case 4:
        *(_DWORD *)&a1[v14] = v19;
        return;
      default:
        return;
    }
  }
  switch(v17)
  {
    case 1:
      a1[v14] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 2:
      *(_WORD *)&a1[v14] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 3:
LABEL_41:
      __break(1u);
      JUMPOUT(0x1876C8830);
    case 4:
      *(_DWORD *)&a1[v14] = 0;
      goto LABEL_23;
    default:
LABEL_23:
      if (a2)
      {
LABEL_24:
        if (v7 >= v10)
        {
          unint64_t v24 = *(void (**)(void))(v6 + 56);
          v24();
        }
        else
        {
          unint64_t v22 = (unint64_t)&a1[v13] & ~v11;
          int v23 = *(void (**)(unint64_t))(v9 + 56);
          v23(v22);
        }
      }
      return;
  }
}

unint64_t lazy protocol witness table accessor for type EmptyTuple and conformance EmptyTuple()
{
  unint64_t result = lazy protocol witness table cache variable for type EmptyTuple and conformance EmptyTuple;
  if (!lazy protocol witness table cache variable for type EmptyTuple and conformance EmptyTuple)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EmptyTuple and conformance EmptyTuple);
  }
  return result;
}

void MenuButton.init(label:content:)()
{
}

void MenuButton.body.getter()
{
}

void MenuButton<>.init(_:content:)()
{
}

uint64_t associated type witness table accessor for View.Body : View in MenuButton<A, B>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t getEnumTagSinglePayload for MenuButton(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v5 = *(void *)(a3 + 24);
  unsigned int v6 = *(_DWORD *)(v4 + 84);
  uint64_t v7 = *(void *)(v5 - 8);
  uint64_t v8 = *(unsigned int *)(v7 + 84);
  uint64_t v9 = *(unsigned __int8 *)(v7 + 80);
  if (v8 <= v6) {
    unsigned int v10 = *(_DWORD *)(v4 + 84);
  }
  else {
    unsigned int v10 = *(_DWORD *)(v7 + 84);
  }
  if (!a2) {
    return 0;
  }
  uint64_t v11 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) + v9;
  unsigned int v12 = a2 - v10;
  if (a2 <= v10) {
    goto LABEL_24;
  }
  uint64_t v13 = (v11 & ~v9) + *(void *)(*(void *)(v5 - 8) + 64);
  char v14 = 8 * v13;
  if (v13 <= 3)
  {
    unsigned int v16 = ((v12 + ~(-1 << v14)) >> v14) + 1;
    if (HIWORD(v16))
    {
      int v15 = *(_DWORD *)((char *)a1 + v13);
      if (!v15) {
        goto LABEL_24;
      }
      goto LABEL_14;
    }
    if (v16 > 0xFF)
    {
      int v15 = *(unsigned __int16 *)((char *)a1 + v13);
      if (!*(unsigned __int16 *)((char *)a1 + v13)) {
        goto LABEL_24;
      }
      goto LABEL_14;
    }
    if (v16 < 2)
    {
LABEL_24:
      if (v10)
      {
        if (v6 >= v8) {
          return (*(uint64_t (**)(void))(v4 + 48))();
        }
        else {
          return (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v7 + 48))(((unint64_t)a1 + v11) & ~v9, v8, v5);
        }
      }
      return 0;
    }
  }
  int v15 = *((unsigned __int8 *)a1 + v13);
  if (!*((unsigned char *)a1 + v13)) {
    goto LABEL_24;
  }
LABEL_14:
  int v17 = (v15 - 1) << v14;
  if (v13 > 3) {
    int v17 = 0;
  }
  if (v13)
  {
    if (v13 <= 3) {
      int v18 = v13;
    }
    else {
      int v18 = 4;
    }
    switch(v18)
    {
      case 2:
        int v19 = *a1;
        break;
      case 3:
        int v19 = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        int v19 = *(_DWORD *)a1;
        break;
      default:
        int v19 = *(unsigned __int8 *)a1;
        break;
    }
  }
  else
  {
    int v19 = 0;
  }
  return v10 + (v19 | v17) + 1;
}

void storeEnumTagSinglePayload for MenuButton(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  uint64_t v8 = *(void *)(a4 + 24);
  uint64_t v9 = *(void *)(v8 - 8);
  unsigned int v10 = *(_DWORD *)(v9 + 84);
  uint64_t v11 = *(unsigned __int8 *)(v9 + 80);
  if (v10 <= v7) {
    unsigned int v12 = *(_DWORD *)(v6 + 84);
  }
  else {
    unsigned int v12 = *(_DWORD *)(v9 + 84);
  }
  uint64_t v13 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64) + v11;
  size_t v14 = (v13 & ~v11) + *(void *)(*(void *)(v8 - 8) + 64);
  BOOL v15 = a3 >= v12;
  unsigned int v16 = a3 - v12;
  if (v16 != 0 && v15)
  {
    if (v14 <= 3)
    {
      unsigned int v20 = ((v16 + ~(-1 << (8 * v14))) >> (8 * v14)) + 1;
      if (HIWORD(v20))
      {
        int v17 = 4;
      }
      else if (v20 >= 0x100)
      {
        int v17 = 2;
      }
      else
      {
        int v17 = v20 > 1;
      }
    }
    else
    {
      int v17 = 1;
    }
  }
  else
  {
    int v17 = 0;
  }
  if (v12 < a2)
  {
    unsigned int v18 = ~v12 + a2;
    if (v14 < 4)
    {
      int v19 = (v18 >> (8 * v14)) + 1;
      if (v14)
      {
        int v21 = v18 & ~(-1 << (8 * v14));
        bzero(a1, v14);
        if (v14 == 3)
        {
          *(_WORD *)a1 = v21;
          a1[2] = BYTE2(v21);
        }
        else if (v14 == 2)
        {
          *(_WORD *)a1 = v21;
        }
        else
        {
          *a1 = v21;
        }
      }
    }
    else
    {
      bzero(a1, v14);
      *(_DWORD *)a1 = v18;
      int v19 = 1;
    }
    switch(v17)
    {
      case 1:
        a1[v14] = v19;
        return;
      case 2:
        *(_WORD *)&a1[v14] = v19;
        return;
      case 3:
        goto LABEL_41;
      case 4:
        *(_DWORD *)&a1[v14] = v19;
        return;
      default:
        return;
    }
  }
  switch(v17)
  {
    case 1:
      a1[v14] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 2:
      *(_WORD *)&a1[v14] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 3:
LABEL_41:
      __break(1u);
      JUMPOUT(0x1876C8E0CLL);
    case 4:
      *(_DWORD *)&a1[v14] = 0;
      goto LABEL_23;
    default:
LABEL_23:
      if (a2)
      {
LABEL_24:
        if (v7 >= v10)
        {
          unint64_t v24 = *(void (**)(void))(v6 + 56);
          v24();
        }
        else
        {
          unint64_t v22 = (unint64_t)&a1[v13] & ~v11;
          int v23 = *(void (**)(unint64_t))(v9 + 56);
          v23(v22);
        }
      }
      return;
  }
}

uint64_t type metadata accessor for MenuButton()
{
  return swift_getGenericMetadata();
}

uint64_t sub_1876C8E4C()
{
  return swift_getWitnessTable();
}

unint64_t lazy protocol witness table accessor for type _MenuButtonStyleConfiguration.Label and conformance _MenuButtonStyleConfiguration.Label()
{
  unint64_t result = lazy protocol witness table cache variable for type _MenuButtonStyleConfiguration.Label and conformance _MenuButtonStyleConfiguration.Label;
  if (!lazy protocol witness table cache variable for type _MenuButtonStyleConfiguration.Label and conformance _MenuButtonStyleConfiguration.Label)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _MenuButtonStyleConfiguration.Label and conformance _MenuButtonStyleConfiguration.Label);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type _MenuButtonStyleConfiguration.Label and conformance _MenuButtonStyleConfiguration.Label;
  if (!lazy protocol witness table cache variable for type _MenuButtonStyleConfiguration.Label and conformance _MenuButtonStyleConfiguration.Label)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _MenuButtonStyleConfiguration.Label and conformance _MenuButtonStyleConfiguration.Label);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _MenuButtonStyleConfiguration.Content and conformance _MenuButtonStyleConfiguration.Content()
{
  unint64_t result = lazy protocol witness table cache variable for type _MenuButtonStyleConfiguration.Content and conformance _MenuButtonStyleConfiguration.Content;
  if (!lazy protocol witness table cache variable for type _MenuButtonStyleConfiguration.Content and conformance _MenuButtonStyleConfiguration.Content)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _MenuButtonStyleConfiguration.Content and conformance _MenuButtonStyleConfiguration.Content);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type _MenuButtonStyleConfiguration.Content and conformance _MenuButtonStyleConfiguration.Content;
  if (!lazy protocol witness table cache variable for type _MenuButtonStyleConfiguration.Content and conformance _MenuButtonStyleConfiguration.Content)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _MenuButtonStyleConfiguration.Content and conformance _MenuButtonStyleConfiguration.Content);
  }
  return result;
}

void MenuButton<>.init<A>(_:content:)()
{
}

uint64_t LimitedAvailabilityTableColumnContent.init<A>(erasing:)(uint64_t a1)
{
  return LimitedAvailabilityTableColumnContentStorage.__allocating_init(_:)(a1);
}

uint64_t type metadata accessor for LimitedAvailabilityTableColumnContentStorage()
{
  return swift_getGenericMetadata();
}

uint64_t LimitedAvailabilityTableColumnContentStorage.__allocating_init(_:)(uint64_t a1)
{
  uint64_t v2 = swift_allocObject();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(*(void *)(*(void *)v2 + 144) - 8) + 32))(v2 + *(void *)(*(void *)v2 + 160), a1);
  return v2;
}

uint64_t static LimitedAvailabilityTableColumnContent._makeContent(content:inputs:)@<X0>(int *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, void *a7@<X8>, __n128 a8@<Q0>)
{
  unint64_t v41 = a7;
  uint64_t v60 = *MEMORY[0x1E4F143B8];
  int v12 = *a1;
  uint64_t v36 = *a2;
  int v35 = *((_DWORD *)a2 + 2);
  uint64_t v13 = a2[2];
  uint64_t v14 = a2[3];
  uint64_t v15 = a2[4];
  uint64_t v17 = a2[5];
  uint64_t v16 = a2[6];
  a8.n128_u64[0] = a2[7];
  uint64_t v18 = a2[8];
  uint64_t v19 = a2[9];
  int v33 = *((_DWORD *)a2 + 20);
  uint64_t v38 = v16;
  *(void *)((char *)&v44 + 4) = __PAIR64__(a8.n128_u32[0], HIDWORD(v16));
  __n128 v34 = a8;
  PreferencesInputs.makeIndirectOutputs()();
  uint64_t v20 = v52;
  int v42 = DWORD2(v52);
  LODWORD(v44) = v12;
  uint64_t v37 = a3;
  *(void *)&long long v52 = a3;
  *((void *)&v52 + 1) = a4;
  uint64_t v39 = a4;
  *(void *)&long long v40 = a5;
  *(void *)&long long v53 = a5;
  *((void *)&v53 + 1) = a6;
  *((void *)&v40 + 1) = a6;
  type metadata accessor for LimitedAvailabilityTableColumnContent();
  type metadata accessor for _GraphValue();
  int v21 = _GraphValue.value.getter();
  id v22 = (id)AGSubgraphGetCurrent();
  if (!v22) {
    __break(1u);
  }
  uint64_t v32 = (uint64_t)&v32;
  LODWORD(v44) = v21;
  *((void *)&v44 + 1) = v22;
  *(void *)&long long v45 = v36;
  DWORD2(v45) = v35;
  *(void *)&long long v46 = v13;
  *((void *)&v46 + 1) = v14;
  *(void *)&long long v47 = v15;
  *((void *)&v47 + 1) = v17;
  *(void *)&long long v48 = v38;
  *((void *)&v48 + 1) = v34.n128_u64[0];
  *(void *)&long long v49 = v18;
  *((void *)&v49 + 1) = v19;
  LODWORD(v50) = v33;
  *((void *)&v50 + 1) = v20;
  LODWORD(v51) = v42;
  *((void *)&v51 + 1) = 0;
  MEMORY[0x1F4188790](v22);
  *(void *)&long long v52 = v37;
  *((void *)&v52 + 1) = v39;
  long long v53 = v40;
  uint64_t v30 = type metadata accessor for LimitedAvailabilityTableColumnContent.IndirectOutputs();
  uint64_t WitnessTable = swift_getWitnessTable();
  type metadata accessor for Attribute<()>(0, (unint64_t *)&lazy cache variable for type metadata for Attribute<()>, MEMORY[0x1E4FBC848] + 8, MEMORY[0x1E4F4E740]);
  uint64_t v24 = v23;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v44, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA12StatefulRuleRd__lufcADSPyqd__GXEfU_TA_1, (uint64_t)&v29, v30, MEMORY[0x1E4FBC248], v24, MEMORY[0x1E4FBC278], v25);
  long long v56 = v48;
  long long v57 = v49;
  long long v58 = v50;
  long long v59 = v51;
  long long v52 = v44;
  long long v53 = v45;
  long long v54 = v46;
  long long v55 = v47;
  outlined release of LimitedAvailabilityTableColumnContent<A, B>.IndirectOutputs((uint64_t)&v52);
  *(void *)&long long v44 = v20;
  int v26 = v42;
  DWORD2(v44) = v42;
  char v43 = 0;
  uint64_t result = PreferencesOutputs.setIndirectDependency(_:)();
  uint64_t v28 = v41;
  *unint64_t v41 = v20;
  *((_DWORD *)v28 + 2) = v26;
  return result;
}

uint64_t type metadata accessor for LimitedAvailabilityTableColumnContent()
{
  return swift_getGenericMetadata();
}

void LimitedAvailabilityTableColumnContent.IndirectOutputs.updateValue()(uint64_t *a1)
{
  if (!*(void *)(v1 + 120))
  {
    id v3 = (id)AGSubgraphGetGraph();
    uint64_t v4 = (void *)AGSubgraphCreate();

    *(void *)(v1 + 120) = v4;
    id v6 = v4;
    AGSubgraphAddChild();
    AGGraphClearUpdate();
    id v5 = (id)AGSubgraphGetCurrent();
    AGSubgraphSetCurrent();
    closure #1 in LimitedAvailabilityTableColumnContent.IndirectOutputs.updateValue()(v1, a1[2], a1[3], a1[4], a1[5]);
    AGSubgraphSetCurrent();

    AGGraphSetUpdate();
  }
}

uint64_t closure #1 in LimitedAvailabilityTableColumnContent.IndirectOutputs.updateValue()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void (*v26)(uint64_t *__return_ptr, uint64_t *, uint64_t *);
  long long v28;
  uint64_t v29;
  long long v30;
  long long v31;
  long long v36;
  unsigned int v37;
  int v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  long long v50;
  long long v51;
  long long v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  int v56;
  uint64_t v57;

  uint64_t v6 = *(void *)(a1 + 32);
  uint64_t v29 = *(void *)(a1 + 16);
  uint64_t v30 = *(_OWORD *)(a1 + 56);
  uint64_t v37 = *(_DWORD *)(a1 + 24);
  uint64_t v38 = *(_DWORD *)(a1 + 96);
  uint64_t v7 = *(void *)(a1 + 40);
  uint64_t v8 = *(void *)(a1 + 48);
  uint64_t v36 = *(_OWORD *)(a1 + 72);
  uint64_t v9 = *(void *)(a1 + 88);
  swift_beginAccess();
  int v10 = *(_DWORD *)(v6 + 16);
  uint64_t v11 = *(void *)(v6 + 24);
  unint64_t v31 = *(_OWORD *)(v6 + 32);
  uint64_t v28 = *(_OWORD *)(v6 + 48);
  uint64_t v12 = *(void *)(v6 + 64);
  uint64_t v13 = *(void *)(v6 + 72);
  char v14 = *(unsigned char *)(v6 + 80);
  char v15 = *(unsigned char *)(v6 + 81);
  uint64_t v16 = *(void *)(v6 + 88);
  type metadata accessor for Attribute<()>(0, (unint64_t *)&lazy cache variable for type metadata for MutableBox<CachedEnvironment>, MEMORY[0x1E4F3FEE0], MEMORY[0x1E4F3F398]);
  uint64_t v17 = swift_allocObject();
  *(_DWORD *)(v17 + 16) = v10;
  *(void *)(v17 + 24) = v11;
  *(_OWORD *)(v17 + 32) = v31;
  *(_OWORD *)(v17 + 48) = v28;
  *(void *)(v17 + 64) = v12;
  *(void *)(v17 + 72) = v13;
  *(unsigned char *)(v17 + 80) = v14;
  *(unsigned char *)(v17 + 81) = v15;
  *(void *)(v17 + 88) = v16;
  swift_retain();
  uint64_t v18 = *(void *)(a1 + 104);
  LODWORD(v12) = *(_DWORD *)(a1 + 112);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  unint64_t v19 = *(void *)(a1 + 8);
  uint64_t v20 = *(void *)(a1 + 16);
  int v21 = *(_DWORD *)(a1 + 24);
  uint64_t v22 = *(void *)(a1 + 32);
  int v23 = *(_DWORD *)(a1 + 96);
  uint64_t v24 = *(void *)(a1 + 120);
  LODWORD(v45) = *(_DWORD *)a1;
  long long v46 = v19;
  long long v47 = v20;
  LODWORD(v48) = v21;
  long long v49 = v22;
  long long v50 = *(_OWORD *)(a1 + 40);
  long long v51 = *(_OWORD *)(a1 + 56);
  long long v52 = *(_OWORD *)(a1 + 72);
  long long v53 = *(void *)(a1 + 88);
  long long v54 = v23;
  long long v55 = v18;
  long long v56 = v12;
  long long v57 = v24;
  unint64_t v41 = a2;
  int v42 = a3;
  char v43 = a4;
  long long v44 = a5;
  type metadata accessor for LimitedAvailabilityTableColumnContent.IndirectOutputs();
  uint64_t v25 = specialized LimitedAvailabilityTableColumnContent.IndirectOutputs.content.getter();
  swift_retain();
  swift_bridgeObjectRetain();
  type metadata accessor for LimitedAvailabilityTableColumnContent();
  _GraphValue.init(_:)();
  long long v45 = v29;
  long long v46 = __PAIR64__(HIDWORD(a3), v37);
  long long v47 = v17;
  long long v48 = v7;
  long long v49 = v8;
  long long v50 = v30;
  long long v51 = v36;
  *(void *)&long long v52 = v9;
  DWORD2(v52) = v38;
  int v26 = *(void (**)(uint64_t *__return_ptr, uint64_t *, uint64_t *))(*(void *)v25 + 112);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v26(&v41, &v39, &v45);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  long long v45 = v18;
  LODWORD(v46) = v12;
  uint64_t v39 = v41;
  long long v40 = v42;
  PreferencesOutputs.attachIndirectOutputs(to:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void LimitedAvailabilityTableColumnContent.tableColumnBody.getter()
{
}

void protocol witness for TableColumnContent.tableColumnBody.getter in conformance LimitedAvailabilityTableColumnContent<A, B>()
{
}

uint64_t protocol witness for static TableColumnContent._makeContent(content:inputs:) in conformance LimitedAvailabilityTableColumnContent<A, B>@<X0>(int *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, void *a4@<X8>, __n128 a5@<Q0>)
{
  return static LimitedAvailabilityTableColumnContent._makeContent(content:inputs:)(a1, a2, a3[2], a3[3], a3[4], a3[5], a4, a5);
}

uint64_t protocol witness for static TableColumnContent._tableColumnCount(inputs:) in conformance LimitedAvailabilityTableColumnContent<A, B>()
{
  return protocol witness for static View._viewListCount(inputs:) in conformance RichTextEditor();
}

void LimitedAvailabilityTableColumnContentStorageBase.makeContent(content:inputs:)()
{
}

uint64_t LimitedAvailabilityTableColumnContentStorageBase.deinit()
{
  return v0;
}

uint64_t LimitedAvailabilityTableColumnContentStorageBase.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t LimitedAvailabilityTableColumnContentStorage.makeContent(content:inputs:)(int *a1, uint64_t *a2)
{
  uint64_t v4 = *(void **)v2;
  uint64_t v5 = *a2;
  unsigned int v6 = *((_DWORD *)a2 + 2);
  uint64_t v7 = a2[2];
  int v17 = *((_DWORD *)a2 + 20);
  uint64_t v8 = *(void *)(*(void *)v2 + 144);
  int v28 = *a1;
  unint64_t v9 = v4[17];
  uint64_t v10 = v4[19];
  uint64_t v18 = v4[16];
  unint64_t v19 = v9;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v21 = swift_getAssociatedConformanceWitness();
  type metadata accessor for LimitedAvailabilityTableColumnContent();
  type metadata accessor for _GraphValue();
  uint64_t v11 = a2[3];
  uint64_t v12 = a2[4];
  long long v15 = *(_OWORD *)(a2 + 7);
  long long v16 = *(_OWORD *)(a2 + 5);
  uint64_t v13 = a2[9];
  int v28 = _GraphValue.value.getter();
  type metadata accessor for LimitedAvailabilityTableColumnContentStorage.Child();
  swift_getWitnessTable();
  _GraphValue.init<A>(_:)();
  uint64_t v18 = v5;
  unint64_t v19 = __PAIR64__(HIDWORD(v9), v6);
  uint64_t AssociatedConformanceWitness = v7;
  uint64_t v21 = v11;
  uint64_t v22 = v12;
  long long v23 = v16;
  long long v24 = v15;
  uint64_t v25 = v13;
  int v26 = v17;
  return (*(uint64_t (**)(unsigned char *, uint64_t *, uint64_t, uint64_t))(v10 + 64))(v27, &v18, v8, v10);
}

uint64_t LimitedAvailabilityTableColumnContentStorage.Child.value.getter@<X0>(uint64_t a1@<X3>, uint64_t a2@<X8>)
{
  specialized LimitedAvailabilityTableColumnContentStorage.Child.content.getter();
  type metadata accessor for LimitedAvailabilityTableColumnContentStorage();
  uint64_t v4 = swift_dynamicCastClassUnconditional();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a1 - 8) + 16))(a2, v4 + *(void *)(*(void *)v4 + 160), a1);
}

uint64_t protocol witness for static Rule.initialValue.getter in conformance LimitedAvailabilityTableColumnContentStorage<A, B, C>.Child@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 32) - 8) + 56))(a2, 1, 1);
}

uint64_t protocol witness for Rule.value.getter in conformance LimitedAvailabilityTableColumnContentStorage<A, B, C>.Child@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return LimitedAvailabilityTableColumnContentStorage.Child.value.getter(*(void *)(a1 + 32), a2);
}

uint64_t LimitedAvailabilityTableColumnContentStorage.__ivar_destroyer()
{
  return (*(uint64_t (**)(uint64_t))(*(void *)(*(void *)(*(void *)v0 + 144) - 8) + 8))(v0 + *(void *)(*(void *)v0 + 160));
}

uint64_t LimitedAvailabilityTableColumnContentStorage.__deallocating_deinit()
{
  (*(void (**)(uint64_t))(*(void *)(*(void *)(*(void *)v0 + 144) - 8) + 8))(v0 + *(void *)(*(void *)v0 + 160));

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for LimitedAvailabilityTableColumnContent.IndirectOutputs()
{
  return swift_getGenericMetadata();
}

uint64_t outlined release of LimitedAvailabilityTableColumnContent<A, B>.IndirectOutputs(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 8);
  id v3 = *(void **)(a1 + 120);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();

  swift_release();
  return a1;
}

_UNKNOWN **associated type witness table accessor for TableColumnContent.TableColumnBody : TableColumnContent in LimitedAvailabilityTableColumnContent<A, B>()
{
  return &protocol witness table for Never;
}

uint64_t associated type witness table accessor for TableColumnContent.TableColumnSortComparator : SortComparator in LimitedAvailabilityTableColumnContent<A, B>(uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + 40);
}

uint64_t instantiation function for generic protocol witness table for LimitedAvailabilityTableColumnContent<A, B>(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t type metadata completion function for LimitedAvailabilityTableColumnContentStorageBase()
{
  return swift_initClassMetadata2();
}

uint64_t type metadata accessor for LimitedAvailabilityTableColumnContentStorageBase()
{
  return swift_getGenericMetadata();
}

uint64_t method lookup function for LimitedAvailabilityTableColumnContentStorageBase(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for LimitedAvailabilityTableColumnContentStorageBase);
}

uint64_t type metadata completion function for LimitedAvailabilityTableColumnContentStorage()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_initClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

void destroy for LimitedAvailabilityTableColumnContent.IndirectOutputs(uint64_t a1)
{
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v2 = *(void **)(a1 + 120);
}

uint64_t initializeWithCopy for LimitedAvailabilityTableColumnContent.IndirectOutputs(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  id v3 = *(void **)(a2 + 8);
  uint64_t v4 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = v4;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  uint64_t v5 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 112);
  unsigned int v6 = *(void **)(a2 + 120);
  *(void *)(a1 + 120) = v6;
  id v7 = v3;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v8 = v6;
  return a1;
}

uint64_t assignWithCopy for LimitedAvailabilityTableColumnContent.IndirectOutputs(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  uint64_t v4 = *(void **)(a2 + 8);
  uint64_t v5 = *(void **)(a1 + 8);
  *(void *)(a1 + 8) = v4;
  id v6 = v4;

  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(_DWORD *)(a1 + 92) = *(_DWORD *)(a2 + 92);
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 112);
  id v7 = *(void **)(a1 + 120);
  id v8 = *(void **)(a2 + 120);
  *(void *)(a1 + 120) = v8;
  id v9 = v8;

  return a1;
}

__n128 __swift_memcpy128_8(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  long long v3 = a2[1];
  long long v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  __n128 result = (__n128)a2[4];
  long long v6 = a2[5];
  long long v7 = a2[7];
  *(_OWORD *)(a1 + 96) = a2[6];
  *(_OWORD *)(a1 + 112) = v7;
  *(__n128 *)(a1 + 64) = result;
  *(_OWORD *)(a1 + 80) = v6;
  return result;
}

uint64_t assignWithTake for LimitedAvailabilityTableColumnContent.IndirectOutputs(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;

  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_release();
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_release();
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 112);
  long long v4 = *(void **)(a1 + 120);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);

  return a1;
}

uint64_t getEnumTagSinglePayload for LimitedAvailabilityTableColumnContent.IndirectOutputs(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 128)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for LimitedAvailabilityTableColumnContent.IndirectOutputs(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 120) = 0;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 128) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 128) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t base witness table accessor for _AttributeBody in LimitedAvailabilityTableColumnContent<A, B>.IndirectOutputs()
{
  return swift_getWitnessTable();
}

void type metadata accessor for Attribute<()>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

uint64_t specialized LimitedAvailabilityTableColumnContent.IndirectOutputs.content.getter()
{
  return *(void *)AGGraphGetValue();
}

uint64_t type metadata accessor for LimitedAvailabilityTableColumnContentStorage.Child()
{
  return swift_getGenericMetadata();
}

uint64_t specialized LimitedAvailabilityTableColumnContentStorage.Child.content.getter()
{
  return *(void *)AGGraphGetValue();
}

uint64_t sub_1876CA4B0()
{
  return swift_deallocObject();
}

uint64_t base witness table accessor for _AttributeBody in LimitedAvailabilityTableColumnContentStorage<A, B, C>.Child()
{
  return swift_getWitnessTable();
}

void static _DigitalCrownDecelerationRate.== infix(_:_:)()
{
}

void _DigitalCrownDecelerationRate.hash(into:)()
{
}

void _DigitalCrownDecelerationRate.hashValue.getter()
{
}

void _DigitalCrownConfiguration.crownHapticsConfiguration.getter()
{
}

void _DigitalCrownConfiguration.crownHapticsConfiguration.setter()
{
}

void _DigitalCrownConfiguration.crownHapticsConfiguration.modify()
{
}

void _DigitalCrownConfiguration._isScrollIndicatorAlwaysOnScreen.getter()
{
}

void _DigitalCrownConfiguration._onlyUseMinorDetents.getter()
{
}

void _DigitalCrownConfiguration._decelerationRate.getter()
{
}

void _DigitalCrownConfiguration._hapticsStrength.getter()
{
}

void _DigitalCrownConfiguration.isContinuous.getter()
{
}

void _DigitalCrownConfiguration.isContinuous.setter()
{
}

void _DigitalCrownConfiguration.shouldShowScrollIndicator.getter()
{
}

void _DigitalCrownConfiguration.isHapticFeedbackEnabled.getter()
{
}

void _DigitalCrownConfiguration.rotationalSensitivity.getter()
{
}

void _DigitalCrownConfiguration.init(minValue:maxValue:stride:)()
{
}

void _DigitalCrownConfiguration.init(minValue:maxValue:stride:isRubberBandingEnabled:)()
{
}

unint64_t lazy protocol witness table accessor for type _DigitalCrownDecelerationRate and conformance _DigitalCrownDecelerationRate()
{
  unint64_t result = lazy protocol witness table cache variable for type _DigitalCrownDecelerationRate and conformance _DigitalCrownDecelerationRate;
  if (!lazy protocol witness table cache variable for type _DigitalCrownDecelerationRate and conformance _DigitalCrownDecelerationRate)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _DigitalCrownDecelerationRate and conformance _DigitalCrownDecelerationRate);
  }
  return result;
}

void sub_1876CA688(uint64_t a1)
{
}

void sub_1876CA6AC(uint64_t a1)
{
}

void sub_1876CA6D0(uint64_t a1)
{
}

void sub_1876CA6E0(uint64_t a1)
{
}

void sub_1876CA6F0(uint64_t a1)
{
}

void keypath_get_5Tm(uint64_t a1)
{
}

void sub_1876CA724()
{
}

unsigned char *storeEnumTagSinglePayload for _DigitalCrownDecelerationRate(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1876CA804);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for _DigitalCrownDecelerationRate()
{
  return &type metadata for _DigitalCrownDecelerationRate;
}

uint64_t outlined copy of _CrownHapticsConfiguration(uint64_t a1, uint64_t a2, char a3)
{
  if (a3 == 3) {
    return swift_retain();
  }
  if (a3 == 2 || a3 == 1) {
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t destroy for _DigitalCrownConfiguration(uint64_t result)
{
  int v1 = *(unsigned __int8 *)(result + 80);
  if (v1 != 255) {
    return outlined consume of _CrownHapticsConfiguration(*(void *)(result + 64), *(void *)(result + 72), v1);
  }
  return result;
}

uint64_t outlined consume of _CrownHapticsConfiguration(uint64_t a1, uint64_t a2, char a3)
{
  if (a3 == 3) {
    return swift_release();
  }
  if (a3 == 2 || a3 == 1) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t initializeWithCopy for _DigitalCrownConfiguration(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_WORD *)(a1 + 24) = *(_WORD *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(_DWORD *)(a1 + 41) = *(_DWORD *)(a2 + 41);
  *(unsigned char *)(a1 + 45) = *(unsigned char *)(a2 + 45);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  *(unsigned char *)(a1 + 57) = *(unsigned char *)(a2 + 57);
  int v4 = *(unsigned __int8 *)(a2 + 80);
  if (v4 == 255)
  {
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    *(unsigned char *)(a1 + 80) = *(unsigned char *)(a2 + 80);
  }
  else
  {
    uint64_t v5 = *(void *)(a2 + 64);
    uint64_t v6 = *(void *)(a2 + 72);
    outlined copy of _CrownHapticsConfiguration(v5, v6, v4);
    *(void *)(a1 + 64) = v5;
    *(void *)(a1 + 72) = v6;
    *(unsigned char *)(a1 + 80) = v4;
  }
  *(_DWORD *)(a1 + 81) = *(_DWORD *)(a2 + 81);
  *(unsigned char *)(a1 + 85) = *(unsigned char *)(a2 + 85);
  return a1;
}

uint64_t assignWithCopy for _DigitalCrownConfiguration(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  uint64_t v4 = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(void *)(a1 + 16) = v4;
  *(unsigned char *)(a1 + 25) = *(unsigned char *)(a2 + 25);
  uint64_t v5 = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(void *)(a1 + 32) = v5;
  *(unsigned char *)(a1 + 41) = *(unsigned char *)(a2 + 41);
  *(unsigned char *)(a1 + 42) = *(unsigned char *)(a2 + 42);
  *(unsigned char *)(a1 + 43) = *(unsigned char *)(a2 + 43);
  *(unsigned char *)(a1 + 44) = *(unsigned char *)(a2 + 44);
  *(unsigned char *)(a1 + 45) = *(unsigned char *)(a2 + 45);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  *(unsigned char *)(a1 + 57) = *(unsigned char *)(a2 + 57);
  uint64_t v6 = a1 + 64;
  long long v7 = (long long *)(a2 + 64);
  int v8 = *(unsigned __int8 *)(a2 + 80);
  if (*(unsigned __int8 *)(a1 + 80) == 255)
  {
    if (v8 == 255)
    {
      long long v17 = *v7;
      *(unsigned char *)(a1 + 80) = *(unsigned char *)(a2 + 80);
      *(_OWORD *)uint64_t v6 = v17;
    }
    else
    {
      uint64_t v14 = *(void *)(a2 + 64);
      uint64_t v15 = *(void *)(a2 + 72);
      outlined copy of _CrownHapticsConfiguration(v14, v15, v8);
      *(void *)(a1 + 64) = v14;
      *(void *)(a1 + 72) = v15;
      *(unsigned char *)(a1 + 80) = v8;
    }
  }
  else if (v8 == 255)
  {
    outlined destroy of _CrownHapticsConfiguration(a1 + 64);
    char v16 = *((unsigned char *)v7 + 16);
    *(_OWORD *)uint64_t v6 = *v7;
    *(unsigned char *)(v6 + 16) = v16;
  }
  else
  {
    uint64_t v9 = *(void *)(a2 + 64);
    uint64_t v10 = *(void *)(a2 + 72);
    outlined copy of _CrownHapticsConfiguration(v9, v10, v8);
    uint64_t v11 = *(void *)(a1 + 64);
    uint64_t v12 = *(void *)(a1 + 72);
    *(void *)(a1 + 64) = v9;
    *(void *)(a1 + 72) = v10;
    char v13 = *(unsigned char *)(a1 + 80);
    *(unsigned char *)(a1 + 80) = v8;
    outlined consume of _CrownHapticsConfiguration(v11, v12, v13);
  }
  *(unsigned char *)(a1 + 81) = *(unsigned char *)(a2 + 81);
  *(unsigned char *)(a1 + 82) = *(unsigned char *)(a2 + 82);
  *(unsigned char *)(a1 + 83) = *(unsigned char *)(a2 + 83);
  *(unsigned char *)(a1 + 84) = *(unsigned char *)(a2 + 84);
  *(unsigned char *)(a1 + 85) = *(unsigned char *)(a2 + 85);
  return a1;
}

uint64_t outlined destroy of _CrownHapticsConfiguration(uint64_t a1)
{
  return a1;
}

__n128 __swift_memcpy86_8(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  __n128 result = *(__n128 *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  long long v5 = *(_OWORD *)(a2 + 64);
  *(void *)(a1 + 78) = *(void *)(a2 + 78);
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  *(__n128 *)(a1 + 32) = result;
  return result;
}

uint64_t assignWithTake for _DigitalCrownConfiguration(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(unsigned char *)(a1 + 25) = *(unsigned char *)(a2 + 25);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(unsigned char *)(a1 + 41) = *(unsigned char *)(a2 + 41);
  *(unsigned char *)(a1 + 42) = *(unsigned char *)(a2 + 42);
  *(unsigned char *)(a1 + 43) = *(unsigned char *)(a2 + 43);
  *(unsigned char *)(a1 + 44) = *(unsigned char *)(a2 + 44);
  *(unsigned char *)(a1 + 45) = *(unsigned char *)(a2 + 45);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  *(unsigned char *)(a1 + 57) = *(unsigned char *)(a2 + 57);
  uint64_t v4 = a1 + 64;
  uint64_t v5 = a2 + 64;
  int v6 = *(unsigned __int8 *)(a1 + 80);
  if (v6 == 255) {
    goto LABEL_5;
  }
  int v7 = *(unsigned __int8 *)(a2 + 80);
  if (v7 == 255)
  {
    outlined destroy of _CrownHapticsConfiguration(a1 + 64);
LABEL_5:
    *(_OWORD *)uint64_t v4 = *(_OWORD *)v5;
    *(unsigned char *)(v4 + 16) = *(unsigned char *)(v5 + 16);
    goto LABEL_6;
  }
  uint64_t v8 = *(void *)(a1 + 64);
  uint64_t v9 = *(void *)(a1 + 72);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)v5;
  *(unsigned char *)(a1 + 80) = v7;
  outlined consume of _CrownHapticsConfiguration(v8, v9, v6);
LABEL_6:
  *(unsigned char *)(a1 + 81) = *(unsigned char *)(a2 + 81);
  *(_WORD *)(a1 + 82) = *(_WORD *)(a2 + 82);
  *(unsigned char *)(a1 + 84) = *(unsigned char *)(a2 + 84);
  *(unsigned char *)(a1 + 85) = *(unsigned char *)(a2 + 85);
  return a1;
}

uint64_t getEnumTagSinglePayload for _DigitalCrownConfiguration(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 86)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 25);
  BOOL v4 = v3 >= 2;
  int v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for _DigitalCrownConfiguration(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(void *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_WORD *)(result + 84) = 0;
    *(_DWORD *)(result + 80) = 0;
    *(void *)__n128 result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 86) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 86) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 25) = a2 + 1;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for _DigitalCrownConfiguration()
{
  return &type metadata for _DigitalCrownConfiguration;
}

uint64_t outlined copy of _CrownHapticsConfiguration?(uint64_t a1, uint64_t a2, char a3)
{
  if (a3 != -1) {
    return outlined copy of _CrownHapticsConfiguration(a1, a2, a3);
  }
  return a1;
}

void _DigitalCrownConfiguration._isScrollIndicatorAlwaysOnScreen.setter()
{
}

void _DigitalCrownConfiguration._onlyUseMinorDetents.setter()
{
}

void _DigitalCrownConfiguration.shouldShowScrollIndicator.setter()
{
}

void _DigitalCrownConfiguration.isHapticFeedbackEnabled.setter()
{
}

void sub_1876CADA4()
{
}

void sub_1876CADB4()
{
}

void _DigitalCrownConfiguration._decelerationRate.setter()
{
}

void _DigitalCrownConfiguration._hapticsStrength.setter()
{
}

void _DigitalCrownConfiguration.rotationalSensitivity.setter()
{
}

void View.navigationSplitViewOpaqueBackground()()
{
  protocol witness for static Equatable.== infix(_:_:) in conformance CapsuleSlider<A>.ScrollState.Orientation();
}

void static NavigationSplitViewOpaqueBackgroundTraitKey.defaultValue.getter()
{
  protocol witness for static Equatable.== infix(_:_:) in conformance CapsuleSlider<A>.ScrollState.Orientation();
}

ValueMetadata *type metadata accessor for NavigationSplitViewOpaqueBackgroundTraitKey()
{
  return &type metadata for NavigationSplitViewOpaqueBackgroundTraitKey;
}

uint64_t sub_1876CAE4C()
{
  return swift_getWitnessTable();
}

void type metadata accessor for _TraitWritingModifier<NavigationSplitViewOpaqueBackgroundTraitKey>()
{
  if (!lazy cache variable for type metadata for _TraitWritingModifier<NavigationSplitViewOpaqueBackgroundTraitKey>)
  {
    unint64_t v0 = type metadata accessor for _TraitWritingModifier();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _TraitWritingModifier<NavigationSplitViewOpaqueBackgroundTraitKey>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type _TraitWritingModifier<NavigationSplitViewOpaqueBackgroundTraitKey> and conformance _TraitWritingModifier<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type _TraitWritingModifier<NavigationSplitViewOpaqueBackgroundTraitKey> and conformance _TraitWritingModifier<A>;
  if (!lazy protocol witness table cache variable for type _TraitWritingModifier<NavigationSplitViewOpaqueBackgroundTraitKey> and conformance _TraitWritingModifier<A>)
  {
    type metadata accessor for _TraitWritingModifier<NavigationSplitViewOpaqueBackgroundTraitKey>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _TraitWritingModifier<NavigationSplitViewOpaqueBackgroundTraitKey> and conformance _TraitWritingModifier<A>);
  }
  return result;
}

uint64_t View.handGestureShortcut(_:isEnabled:)(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  type metadata accessor for ModifiedContent();
  uint64_t v7 = type metadata accessor for _ConditionalContent();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  uint64_t v10 = (char *)v15 - v9;
  View.handGestureShortcutBuilder(_:isEnabled:)(a2, a3, a4, (uint64_t)v15 - v9);
  unint64_t v11 = lazy protocol witness table accessor for type ExternalGestureActionModifier and conformance ExternalGestureActionModifier();
  uint64_t v15[2] = a4;
  v15[3] = v11;
  v15[0] = swift_getWitnessTable();
  v15[1] = a4;
  uint64_t WitnessTable = swift_getWitnessTable();
  unint64_t IsHandGestureShortcut = lazy protocol witness table accessor for type IsHandGestureShortcut and conformance IsHandGestureShortcut();
  View.input<A>(_:)((uint64_t)&unk_1ED435330, v7, (uint64_t)&unk_1ED435330, WitnessTable, IsHandGestureShortcut);
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
}

uint64_t View.handGestureShortcutBuilder(_:isEnabled:)@<X0>(char a1@<W1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v24 = a4;
  uint64_t v7 = type metadata accessor for ModifiedContent();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  uint64_t v10 = (char *)&v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v11);
  char v13 = (char *)&v22 - v12;
  uint64_t v14 = type metadata accessor for _ConditionalContent();
  uint64_t v23 = *(void *)(v14 - 8);
  double v15 = MEMORY[0x1F4188790](v14);
  long long v17 = (char *)&v22 - v16;
  char v29 = a1;
  MEMORY[0x18C113660](&v29, a2, &type metadata for ExternalGestureActionModifier, a3, v15);
  unint64_t v18 = lazy protocol witness table accessor for type ExternalGestureActionModifier and conformance ExternalGestureActionModifier();
  uint64_t v27 = a3;
  unint64_t v28 = v18;
  uint64_t WitnessTable = swift_getWitnessTable();
  static ViewBuilder.buildExpression<A>(_:)(v10);
  uint64_t v20 = *(void (**)(char *, uint64_t))(v8 + 8);
  v20(v10, v7);
  static ViewBuilder.buildExpression<A>(_:)(v13);
  static ViewBuilder.buildEither<A, B>(first:)((uint64_t)v10, v7);
  v20(v10, v7);
  v20(v13, v7);
  uint64_t v25 = WitnessTable;
  uint64_t v26 = a3;
  swift_getWitnessTable();
  static ViewBuilder.buildExpression<A>(_:)(v17);
  return (*(uint64_t (**)(char *, uint64_t))(v23 + 8))(v17, v14);
}

unint64_t lazy protocol witness table accessor for type ExternalGestureActionModifier and conformance ExternalGestureActionModifier()
{
  unint64_t result = lazy protocol witness table cache variable for type ExternalGestureActionModifier and conformance ExternalGestureActionModifier;
  if (!lazy protocol witness table cache variable for type ExternalGestureActionModifier and conformance ExternalGestureActionModifier)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ExternalGestureActionModifier and conformance ExternalGestureActionModifier);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type IsHandGestureShortcut and conformance IsHandGestureShortcut()
{
  unint64_t result = lazy protocol witness table cache variable for type IsHandGestureShortcut and conformance IsHandGestureShortcut;
  if (!lazy protocol witness table cache variable for type IsHandGestureShortcut and conformance IsHandGestureShortcut)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IsHandGestureShortcut and conformance IsHandGestureShortcut);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type IsHandGestureShortcut and conformance IsHandGestureShortcut;
  if (!lazy protocol witness table cache variable for type IsHandGestureShortcut and conformance IsHandGestureShortcut)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IsHandGestureShortcut and conformance IsHandGestureShortcut);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type IsHandGestureShortcut and conformance IsHandGestureShortcut;
  if (!lazy protocol witness table cache variable for type IsHandGestureShortcut and conformance IsHandGestureShortcut)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IsHandGestureShortcut and conformance IsHandGestureShortcut);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type IsHandGestureShortcut and conformance IsHandGestureShortcut;
  if (!lazy protocol witness table cache variable for type IsHandGestureShortcut and conformance IsHandGestureShortcut)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IsHandGestureShortcut and conformance IsHandGestureShortcut);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type IsHandGestureShortcut and conformance IsHandGestureShortcut;
  if (!lazy protocol witness table cache variable for type IsHandGestureShortcut and conformance IsHandGestureShortcut)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IsHandGestureShortcut and conformance IsHandGestureShortcut);
  }
  return result;
}

void protocol witness for Hashable.hash(into:) in conformance HandGestureShortcut.Storage()
{
}

uint64_t static HandGestureShortcut.== infix(_:_:)()
{
  return 1;
}

uint64_t EnvironmentValues.isHandGestureShortcutEnabled.getter()
{
  if (*(void *)(v0 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<IsHandGestureShortcutEnabled>();
    lazy protocol witness table accessor for type EnvironmentPropertyKey<IsHandGestureShortcutEnabled> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<IsHandGestureShortcutEnabled> and conformance EnvironmentPropertyKey<A>, (void (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<IsHandGestureShortcutEnabled>);
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<IsHandGestureShortcutEnabled>();
    lazy protocol witness table accessor for type EnvironmentPropertyKey<IsHandGestureShortcutEnabled> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<IsHandGestureShortcutEnabled> and conformance EnvironmentPropertyKey<A>, (void (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<IsHandGestureShortcutEnabled>);
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  return v2;
}

uint64_t EnvironmentValues.isHandGestureShortcutEnabled.setter()
{
  type metadata accessor for EnvironmentPropertyKey<IsHandGestureShortcutEnabled>();
  lazy protocol witness table accessor for type EnvironmentPropertyKey<IsHandGestureShortcutEnabled> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<IsHandGestureShortcutEnabled> and conformance EnvironmentPropertyKey<A>, (void (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<IsHandGestureShortcutEnabled>);
  swift_retain();
  PropertyList.subscript.setter();
  if (*(void *)(v0 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  return swift_release();
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance ExternalGestureActionModifier.ContentView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = lazy protocol witness table accessor for type ExternalGestureActionModifier.ContentView and conformance ExternalGestureActionModifier.ContentView();

  return MEMORY[0x1F41003C0](a1, a2, a3, v6);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance ExternalGestureActionModifier.ContentView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = lazy protocol witness table accessor for type ExternalGestureActionModifier.ContentView and conformance ExternalGestureActionModifier.ContentView();

  return MEMORY[0x1F41003C8](a1, a2, a3, v6);
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance ExternalGestureActionModifier.ContentView()
{
  return static ConditionallyArchivableView._viewListCount(inputs:)();
}

uint64_t protocol witness for ViewModifier.body(content:) in conformance ExternalGestureActionModifier@<X0>(uint64_t a1@<X8>)
{
  char v3 = *v1;
  uint64_t result = swift_getKeyPath();
  *(unsigned char *)a1 = v3;
  *(void *)(a1 + 8) = result;
  *(unsigned char *)(a1 + 16) = v3;
  return result;
}

uint64_t protocol witness for static ViewInputPredicate.evaluate(inputs:) in conformance IsHandGestureShortcut()
{
  lazy protocol witness table accessor for type IsHandGestureShortcut and conformance IsHandGestureShortcut();
  PropertyList.subscript.getter();
  return v1;
}

uint64_t protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance IsHandGestureShortcut()
{
  return PropertyList.subscript.setter();
}

uint64_t protocol witness for static ViewInputPredicate.evaluate(inputs:) in conformance IsArchivingHandGesture()
{
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  PropertyList.subscript.getter();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return v1 & 1;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance HandGestureShortcutInteractiveControl.HandGestureShortcutPreferenceWriter.CodingKeys()
{
  return 0x68536E6F74747562;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance HandGestureShortcutInteractiveControl.HandGestureShortcutPreferenceWriter.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  if (a1 == 0x68536E6F74747562 && a2 == 0xEB00000000657061)
  {
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = 0;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance HandGestureShortcutInteractiveControl.HandGestureShortcutPreferenceWriter.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type HandGestureShortcutInteractiveControl.HandGestureShortcutPreferenceWriter.CodingKeys and conformance HandGestureShortcutInteractiveControl.HandGestureShortcutPreferenceWriter.CodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance HandGestureShortcutInteractiveControl.HandGestureShortcutPreferenceWriter.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type HandGestureShortcutInteractiveControl.HandGestureShortcutPreferenceWriter.CodingKeys and conformance HandGestureShortcutInteractiveControl.HandGestureShortcutPreferenceWriter.CodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t HandGestureShortcutInteractiveControl.HandGestureShortcutPreferenceWriter.encode(to:)(void *a1, uint64_t a2, __int16 a3)
{
  type metadata accessor for ViewInputFlagModifier<IsHandGestureShortcut>(0, &lazy cache variable for type metadata for KeyedEncodingContainer<HandGestureShortcutInteractiveControl.HandGestureShortcutPreferenceWriter.CodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type HandGestureShortcutInteractiveControl.HandGestureShortcutPreferenceWriter.CodingKeys and conformance HandGestureShortcutInteractiveControl.HandGestureShortcutPreferenceWriter.CodingKeys, (uint64_t)&unk_1ED462DB8, MEMORY[0x1E4FBBDE0]);
  uint64_t v7 = v6;
  uint64_t v8 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v10 = (char *)&v12 - v9;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type HandGestureShortcutInteractiveControl.HandGestureShortcutPreferenceWriter.CodingKeys and conformance HandGestureShortcutInteractiveControl.HandGestureShortcutPreferenceWriter.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  uint64_t v12 = a2;
  __int16 v13 = a3 & 0x1FF;
  lazy protocol witness table accessor for type HandGestureShortcutInteractiveControl.BorderShape and conformance HandGestureShortcutInteractiveControl.BorderShape();
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
}

void *protocol witness for Decodable.init(from:) in conformance HandGestureShortcutInteractiveControl.HandGestureShortcutPreferenceWriter@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = specialized HandGestureShortcutInteractiveControl.HandGestureShortcutPreferenceWriter.init(from:)(a1);
  if (!v2)
  {
    *(void *)a2 = result;
    *(unsigned char *)(a2 + 8) = v5;
    *(unsigned char *)(a2 + 9) = HIBYTE(v5) & 1;
  }
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance HandGestureShortcutInteractiveControl.HandGestureShortcutPreferenceWriter(void *a1)
{
  return HandGestureShortcutInteractiveControl.HandGestureShortcutPreferenceWriter.encode(to:)(a1, *(void *)v1, *(unsigned __int8 *)(v1 + 8) | (unsigned __int16)(*(unsigned __int8 *)(v1 + 9) << 8));
}

uint64_t HandGestureShortcutInteractiveControl.HandGestureShortcutEnvironmentReader.body(content:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *(void *)v1;
  char v4 = *(unsigned char *)(v1 + 8);
  uint64_t v5 = *(void *)(v1 + 16);
  uint64_t v6 = *(unsigned __int8 *)(v1 + 24);
  int v7 = *(unsigned __int8 *)(v1 + 25);
  outlined copy of Environment<Bool>.Content(*(void *)v1, v4);
  outlined copy of Environment<CGFloat?>.Content(v5, v6, v7);
  outlined copy of Environment<Bool>.Content(v3, v4);
  char v8 = specialized Environment.wrappedValue.getter(v3, v4);
  outlined consume of Environment<Bool>.Content(v3, v4);
  outlined consume of Environment<Bool>.Content(v3, v4);
  uint64_t result = outlined consume of Environment<CGFloat?>.Content(v5, v6, v7);
  if ((v8 & 1) == 0)
  {
    uint64_t v10 = 0;
    goto LABEL_6;
  }
  outlined copy of Environment<Bool>.Content(v3, v4);
  outlined copy of Environment<CGFloat?>.Content(v5, v6, v7);
  outlined copy of Environment<CGFloat?>.Content(v5, v6, v7);
  specialized Environment.wrappedValue.getter(v5, v6 | (v7 << 8), (uint64_t)&v12);
  outlined consume of Environment<CGFloat?>.Content(v5, v6, v7);
  outlined consume of Environment<Bool>.Content(v3, v4);
  uint64_t result = outlined consume of Environment<CGFloat?>.Content(v5, v6, v7);
  uint64_t v10 = v12;
  if (v13 != 1)
  {
LABEL_6:
    __int16 v11 = 0;
    goto LABEL_7;
  }
  switch(v12)
  {
    case 1:
      uint64_t v10 = 1;
      goto LABEL_11;
    case 2:
      __int16 v11 = 1;
      uint64_t v10 = 2;
      break;
    case 3:
      __int16 v11 = 1;
      uint64_t v10 = 3;
      break;
    default:
      uint64_t v10 = 0;
LABEL_11:
      __int16 v11 = 1;
      break;
  }
LABEL_7:
  *(void *)a1 = v10;
  *(_WORD *)(a1 + 8) = v11;
  *(unsigned char *)(a1 + 10) = (v8 & 1) == 0;
  return result;
}

unint64_t HandGestureShortcutInteractiveControl.BorderShape.CodingKeys.stringValue.getter(char a1)
{
  unint64_t result = 0x6974616D6F747561;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x656C7573706163;
      break;
    case 2:
      unint64_t result = 0xD000000000000019;
      break;
    case 3:
      unint64_t result = 0xD000000000000010;
      break;
    case 4:
      unint64_t result = 0x656C63726963;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t HandGestureShortcutInteractiveControl.BorderShape.encode(to:)(void *a1, uint64_t a2, int a3)
{
  uint64_t v42 = a2;
  int v41 = a3;
  char v4 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E4FBBDE0];
  type metadata accessor for ViewInputFlagModifier<IsHandGestureShortcut>(0, &lazy cache variable for type metadata for KeyedEncodingContainer<HandGestureShortcutInteractiveControl.BorderShape.CircleCodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type HandGestureShortcutInteractiveControl.BorderShape.CircleCodingKeys and conformance HandGestureShortcutInteractiveControl.BorderShape.CircleCodingKeys, (uint64_t)&unk_1ED477488, MEMORY[0x1E4FBBDE0]);
  uint64_t v36 = *(void *)(v5 - 8);
  uint64_t v37 = v5;
  MEMORY[0x1F4188790](v5);
  int v35 = (char *)&v27 - v6;
  type metadata accessor for ViewInputFlagModifier<IsHandGestureShortcut>(0, &lazy cache variable for type metadata for KeyedEncodingContainer<HandGestureShortcutInteractiveControl.BorderShape.RoundedRectangleCodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type HandGestureShortcutInteractiveControl.BorderShape.RoundedRectangleCodingKeys and conformance HandGestureShortcutInteractiveControl.BorderShape.RoundedRectangleCodingKeys, (uint64_t)&unk_1ED477468, v4);
  uint64_t v38 = *(void *)(v7 - 8);
  uint64_t v39 = v7;
  MEMORY[0x1F4188790](v7);
  uint64_t v9 = (char *)&v27 - v8;
  type metadata accessor for ViewInputFlagModifier<IsHandGestureShortcut>(0, &lazy cache variable for type metadata for KeyedEncodingContainer<HandGestureShortcutInteractiveControl.BorderShape.RoundedRectangleAutomaticCodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type HandGestureShortcutInteractiveControl.BorderShape.RoundedRectangleAutomaticCodingKeys and conformance HandGestureShortcutInteractiveControl.BorderShape.RoundedRectangleAutomaticCodingKeys, (uint64_t)&unk_1ED4773D8, v4);
  uint64_t v33 = *(void *)(v10 - 8);
  uint64_t v34 = v10;
  MEMORY[0x1F4188790](v10);
  uint64_t v32 = (char *)&v27 - v11;
  type metadata accessor for ViewInputFlagModifier<IsHandGestureShortcut>(0, &lazy cache variable for type metadata for KeyedEncodingContainer<HandGestureShortcutInteractiveControl.BorderShape.CapsuleCodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type HandGestureShortcutInteractiveControl.BorderShape.CapsuleCodingKeys and conformance HandGestureShortcutInteractiveControl.BorderShape.CapsuleCodingKeys, (uint64_t)&unk_1ED4773B8, v4);
  uint64_t v30 = *(void *)(v12 - 8);
  uint64_t v31 = v12;
  MEMORY[0x1F4188790](v12);
  char v29 = (char *)&v27 - v13;
  type metadata accessor for ViewInputFlagModifier<IsHandGestureShortcut>(0, &lazy cache variable for type metadata for KeyedEncodingContainer<HandGestureShortcutInteractiveControl.BorderShape.AutomaticCodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type HandGestureShortcutInteractiveControl.BorderShape.AutomaticCodingKeys and conformance HandGestureShortcutInteractiveControl.BorderShape.AutomaticCodingKeys, (uint64_t)&unk_1ED477398, v4);
  uint64_t v15 = v14;
  uint64_t v28 = *(void *)(v14 - 8);
  MEMORY[0x1F4188790](v14);
  long long v17 = (char *)&v27 - v16;
  type metadata accessor for ViewInputFlagModifier<IsHandGestureShortcut>(0, &lazy cache variable for type metadata for KeyedEncodingContainer<HandGestureShortcutInteractiveControl.BorderShape.CodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type HandGestureShortcutInteractiveControl.BorderShape.CodingKeys and conformance HandGestureShortcutInteractiveControl.BorderShape.CodingKeys, (uint64_t)&unk_1ED477378, v4);
  uint64_t v19 = v18;
  uint64_t v40 = *(void *)(v18 - 8);
  MEMORY[0x1F4188790](v18);
  uint64_t v21 = (char *)&v27 - v20;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type HandGestureShortcutInteractiveControl.BorderShape.CodingKeys and conformance HandGestureShortcutInteractiveControl.BorderShape.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  if (v41)
  {
    switch(v42)
    {
      case 1:
        char v45 = 1;
        lazy protocol witness table accessor for type HandGestureShortcutInteractiveControl.BorderShape.CapsuleCodingKeys and conformance HandGestureShortcutInteractiveControl.BorderShape.CapsuleCodingKeys();
        uint64_t v24 = v29;
        KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
        uint64_t v26 = v30;
        uint64_t v25 = v31;
        goto LABEL_8;
      case 2:
        char v46 = 2;
        lazy protocol witness table accessor for type HandGestureShortcutInteractiveControl.BorderShape.RoundedRectangleAutomaticCodingKeys and conformance HandGestureShortcutInteractiveControl.BorderShape.RoundedRectangleAutomaticCodingKeys();
        uint64_t v24 = v32;
        KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
        uint64_t v26 = v33;
        uint64_t v25 = v34;
        goto LABEL_8;
      case 3:
        char v48 = 4;
        lazy protocol witness table accessor for type HandGestureShortcutInteractiveControl.BorderShape.CircleCodingKeys and conformance HandGestureShortcutInteractiveControl.BorderShape.CircleCodingKeys();
        uint64_t v24 = v35;
        KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
        uint64_t v26 = v36;
        uint64_t v25 = v37;
LABEL_8:
        (*(void (**)(char *, uint64_t))(v26 + 8))(v24, v25);
        break;
      default:
        char v44 = 0;
        lazy protocol witness table accessor for type HandGestureShortcutInteractiveControl.BorderShape.AutomaticCodingKeys and conformance HandGestureShortcutInteractiveControl.BorderShape.AutomaticCodingKeys();
        KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
        (*(void (**)(char *, uint64_t))(v28 + 8))(v17, v15);
        break;
    }
    return (*(uint64_t (**)(char *, uint64_t))(v40 + 8))(v21, v19);
  }
  else
  {
    char v47 = 3;
    lazy protocol witness table accessor for type HandGestureShortcutInteractiveControl.BorderShape.RoundedRectangleCodingKeys and conformance HandGestureShortcutInteractiveControl.BorderShape.RoundedRectangleCodingKeys();
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    uint64_t v43 = v42;
    lazy protocol witness table accessor for type CGFloat and conformance CGFloat();
    uint64_t v22 = v39;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v38 + 8))(v9, v22);
    return (*(uint64_t (**)(char *, uint64_t))(v40 + 8))(v21, v19);
  }
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance HandGestureShortcutInteractiveControl.BorderShape.AutomaticCodingKeys()
{
  return 0;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance HandGestureShortcutInteractiveControl.BorderShape.AutomaticCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type HandGestureShortcutInteractiveControl.BorderShape.AutomaticCodingKeys and conformance HandGestureShortcutInteractiveControl.BorderShape.AutomaticCodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance HandGestureShortcutInteractiveControl.BorderShape.AutomaticCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type HandGestureShortcutInteractiveControl.BorderShape.AutomaticCodingKeys and conformance HandGestureShortcutInteractiveControl.BorderShape.AutomaticCodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance HandGestureShortcutInteractiveControl.BorderShape.CapsuleCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type HandGestureShortcutInteractiveControl.BorderShape.CapsuleCodingKeys and conformance HandGestureShortcutInteractiveControl.BorderShape.CapsuleCodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance HandGestureShortcutInteractiveControl.BorderShape.CapsuleCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type HandGestureShortcutInteractiveControl.BorderShape.CapsuleCodingKeys and conformance HandGestureShortcutInteractiveControl.BorderShape.CapsuleCodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance HandGestureShortcutInteractiveControl.BorderShape.CircleCodingKeys@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance HandGestureShortcutInteractiveControl.BorderShape.CircleCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type HandGestureShortcutInteractiveControl.BorderShape.CircleCodingKeys and conformance HandGestureShortcutInteractiveControl.BorderShape.CircleCodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance HandGestureShortcutInteractiveControl.BorderShape.CircleCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type HandGestureShortcutInteractiveControl.BorderShape.CircleCodingKeys and conformance HandGestureShortcutInteractiveControl.BorderShape.CircleCodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

unint64_t protocol witness for CodingKey.stringValue.getter in conformance HandGestureShortcutInteractiveControl.BorderShape.CodingKeys()
{
  return HandGestureShortcutInteractiveControl.BorderShape.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance HandGestureShortcutInteractiveControl.BorderShape.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized HandGestureShortcutInteractiveControl.BorderShape.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance HandGestureShortcutInteractiveControl.BorderShape.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type HandGestureShortcutInteractiveControl.BorderShape.CodingKeys and conformance HandGestureShortcutInteractiveControl.BorderShape.CodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance HandGestureShortcutInteractiveControl.BorderShape.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type HandGestureShortcutInteractiveControl.BorderShape.CodingKeys and conformance HandGestureShortcutInteractiveControl.BorderShape.CodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance HandGestureShortcutInteractiveControl.BorderShape.RoundedRectangleAutomaticCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type HandGestureShortcutInteractiveControl.BorderShape.RoundedRectangleAutomaticCodingKeys and conformance HandGestureShortcutInteractiveControl.BorderShape.RoundedRectangleAutomaticCodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance HandGestureShortcutInteractiveControl.BorderShape.RoundedRectangleAutomaticCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type HandGestureShortcutInteractiveControl.BorderShape.RoundedRectangleAutomaticCodingKeys and conformance HandGestureShortcutInteractiveControl.BorderShape.RoundedRectangleAutomaticCodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance HandGestureShortcut.Storage()
{
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance HandGestureShortcut.Storage()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance HandGestureShortcutInteractiveControl.BorderShape.RoundedRectangleCodingKeys()
{
  return 0x737569646172;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance HandGestureShortcutInteractiveControl.BorderShape.RoundedRectangleCodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  if (a1 == 0x737569646172 && a2 == 0xE600000000000000)
  {
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = 0;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance HandGestureShortcutInteractiveControl.BorderShape.RoundedRectangleCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type HandGestureShortcutInteractiveControl.BorderShape.RoundedRectangleCodingKeys and conformance HandGestureShortcutInteractiveControl.BorderShape.RoundedRectangleCodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance HandGestureShortcutInteractiveControl.BorderShape.RoundedRectangleCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type HandGestureShortcutInteractiveControl.BorderShape.RoundedRectangleCodingKeys and conformance HandGestureShortcutInteractiveControl.BorderShape.RoundedRectangleCodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t protocol witness for Decodable.init(from:) in conformance HandGestureShortcutInteractiveControl.BorderShape@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = specialized HandGestureShortcutInteractiveControl.BorderShape.init(from:)(a1);
  if (!v2)
  {
    *(void *)a2 = result;
    *(unsigned char *)(a2 + 8) = v5 & 1;
  }
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance HandGestureShortcutInteractiveControl.BorderShape(void *a1)
{
  return HandGestureShortcutInteractiveControl.BorderShape.encode(to:)(a1, *(void *)v1, *(unsigned __int8 *)(v1 + 8));
}

uint64_t protocol witness for static ViewModifier._viewListCount(inputs:body:) in conformance ExternalGestureActionModifier()
{
  return static ViewModifier.viewListCount(inputs:body:)();
}

uint64_t protocol witness for ViewModifier.body(content:) in conformance HandGestureShortcutInteractiveControl@<X0>(uint64_t a1@<X8>)
{
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t result = swift_getKeyPath();
  *(void *)a1 = KeyPath;
  *(unsigned char *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = result;
  *(_WORD *)(a1 + 24) = 0;
  return result;
}

uint64_t View.addingHandGestureShortcutPlatformLayer()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a1 - 8) + 16))(a2, v2, a1);
}

ValueMetadata *type metadata accessor for HandGestureShortcut()
{
  return &type metadata for HandGestureShortcut;
}

uint64_t sub_1876CCA90()
{
  return swift_getWitnessTable();
}

uint64_t sub_1876CCBB4(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

ValueMetadata *type metadata accessor for HandGestureShortcut.Storage()
{
  return &type metadata for HandGestureShortcut.Storage;
}

void *type metadata accessor for IsHandGestureShortcut()
{
  return &unk_1ED435330;
}

ValueMetadata *type metadata accessor for ExternalGestureActionModifier()
{
  return &type metadata for ExternalGestureActionModifier;
}

unint64_t lazy protocol witness table accessor for type HandGestureShortcut.Storage and conformance HandGestureShortcut.Storage()
{
  unint64_t result = lazy protocol witness table cache variable for type HandGestureShortcut.Storage and conformance HandGestureShortcut.Storage;
  if (!lazy protocol witness table cache variable for type HandGestureShortcut.Storage and conformance HandGestureShortcut.Storage)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HandGestureShortcut.Storage and conformance HandGestureShortcut.Storage);
  }
  return result;
}

uint64_t associated type witness table accessor for ViewModifier.Body : View in HandGestureShortcutInteractiveControl()
{
  return swift_getOpaqueTypeConformance2();
}

_UNKNOWN **base witness table accessor for _GraphInputsModifier in IsHandGestureShortcut()
{
  return &protocol witness table for IsHandGestureShortcut;
}

uint64_t associated type witness table accessor for ViewInputFlag.Input.PropertyKey.Value : Equatable in IsHandGestureShortcut()
{
  return MEMORY[0x1E4FBB3A8];
}

uint64_t associated type witness table accessor for ViewModifier.Body : View in ExternalGestureActionModifier()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1876CCE0C@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = EnvironmentValues.isHandGestureShortcutEnabled.getter();
  *a1 = result & 1;
  return result;
}

uint64_t sub_1876CCE4C()
{
  return EnvironmentValues.isHandGestureShortcutEnabled.setter();
}

void type metadata accessor for EnvironmentPropertyKey<IsHandGestureShortcutEnabled>()
{
  if (!lazy cache variable for type metadata for EnvironmentPropertyKey<IsHandGestureShortcutEnabled>)
  {
    unint64_t v0 = type metadata accessor for EnvironmentPropertyKey();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<IsHandGestureShortcutEnabled>);
    }
  }
}

uint64_t storeEnumTagSinglePayload for HandGestureShortcutInteractiveControl.HandGestureShortcutPreferenceWriter(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(_WORD *)(result + 8) = 0;
    *(void *)uint64_t result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 10) = v3;
  return result;
}

ValueMetadata *type metadata accessor for HandGestureShortcutInteractiveControl.HandGestureShortcutPreferenceWriter()
{
  return &type metadata for HandGestureShortcutInteractiveControl.HandGestureShortcutPreferenceWriter;
}

void *type metadata accessor for IsHandGestureShortcutEnabled()
{
  return &unk_1ED4532C8;
}

uint64_t getEnumTagSinglePayload for ExternalGestureActionModifier(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFF) {
    goto LABEL_17;
  }
  if (a2 + 1 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 1) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 1;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 2;
  int v8 = (v6 + 2147483646) & 0x7FFFFFFF;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for ExternalGestureActionModifier(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1876CD090);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ExternalGestureActionModifier.ContentView()
{
  return &type metadata for ExternalGestureActionModifier.ContentView;
}

ValueMetadata *type metadata accessor for HandGestureShortcutInteractiveControl.HandGestureShortcutEnvironmentReader()
{
  return &type metadata for HandGestureShortcutInteractiveControl.HandGestureShortcutEnvironmentReader;
}

void *type metadata accessor for IsArchivingHandGesture()
{
  return &unk_1ED439A78;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ExternalGestureActionModifier.ContentView, _EnvironmentKeyWritingModifier<Bool>>, ViewInputFlagModifier<IsHandGestureShortcut>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ExternalGestureActionModifier.ContentView, _EnvironmentKeyWritingModifier<Bool>>, ViewInputFlagModifier<IsHandGestureShortcut>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ExternalGestureActionModifier.ContentView, _EnvironmentKeyWritingModifier<Bool>>, ViewInputFlagModifier<IsHandGestureShortcut>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ExternalGestureActionModifier.ContentView, _EnvironmentKeyWritingModifier<Bool>>, ViewInputFlagModifier<IsHandGestureShortcut>>();
    lazy protocol witness table accessor for type ModifiedContent<ExternalGestureActionModifier.ContentView, _EnvironmentKeyWritingModifier<Bool>> and conformance <> ModifiedContent<A, B>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ExternalGestureActionModifier.ContentView, _EnvironmentKeyWritingModifier<Bool>>, ViewInputFlagModifier<IsHandGestureShortcut>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<ModifiedContent<ExternalGestureActionModifier.ContentView, _EnvironmentKeyWritingModifier<Bool>>, ViewInputFlagModifier<IsHandGestureShortcut>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ExternalGestureActionModifier.ContentView, _EnvironmentKeyWritingModifier<Bool>>, ViewInputFlagModifier<IsHandGestureShortcut>>)
  {
    type metadata accessor for ModifiedContent<ExternalGestureActionModifier.ContentView, _EnvironmentKeyWritingModifier<Bool>>();
    type metadata accessor for ViewInputFlagModifier<IsHandGestureShortcut>(255, &lazy cache variable for type metadata for ViewInputFlagModifier<IsHandGestureShortcut>, (uint64_t (*)(void))lazy protocol witness table accessor for type IsHandGestureShortcut and conformance IsHandGestureShortcut, (uint64_t)&unk_1ED435330, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ViewInputFlagModifier);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ExternalGestureActionModifier.ContentView, _EnvironmentKeyWritingModifier<Bool>>, ViewInputFlagModifier<IsHandGestureShortcut>>);
    }
  }
}

void type metadata accessor for ModifiedContent<ExternalGestureActionModifier.ContentView, _EnvironmentKeyWritingModifier<Bool>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ExternalGestureActionModifier.ContentView, _EnvironmentKeyWritingModifier<Bool>>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>();
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ExternalGestureActionModifier.ContentView, _EnvironmentKeyWritingModifier<Bool>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ExternalGestureActionModifier.ContentView, _EnvironmentKeyWritingModifier<Bool>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ExternalGestureActionModifier.ContentView, _EnvironmentKeyWritingModifier<Bool>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ExternalGestureActionModifier.ContentView, _EnvironmentKeyWritingModifier<Bool>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ExternalGestureActionModifier.ContentView, _EnvironmentKeyWritingModifier<Bool>>();
    lazy protocol witness table accessor for type ExternalGestureActionModifier.ContentView and conformance ExternalGestureActionModifier.ContentView();
    lazy protocol witness table accessor for type EnvironmentPropertyKey<IsHandGestureShortcutEnabled> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<Bool> and conformance _EnvironmentKeyWritingModifier<A>, (void (*)(uint64_t))type metadata accessor for _EnvironmentKeyWritingModifier<Bool>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ExternalGestureActionModifier.ContentView, _EnvironmentKeyWritingModifier<Bool>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ExternalGestureActionModifier.ContentView and conformance ExternalGestureActionModifier.ContentView()
{
  unint64_t result = lazy protocol witness table cache variable for type ExternalGestureActionModifier.ContentView and conformance ExternalGestureActionModifier.ContentView;
  if (!lazy protocol witness table cache variable for type ExternalGestureActionModifier.ContentView and conformance ExternalGestureActionModifier.ContentView)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ExternalGestureActionModifier.ContentView and conformance ExternalGestureActionModifier.ContentView);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ExternalGestureActionModifier.ContentView and conformance ExternalGestureActionModifier.ContentView;
  if (!lazy protocol witness table cache variable for type ExternalGestureActionModifier.ContentView and conformance ExternalGestureActionModifier.ContentView)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ExternalGestureActionModifier.ContentView and conformance ExternalGestureActionModifier.ContentView);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<IsHandGestureShortcutEnabled> and conformance EnvironmentPropertyKey<A>(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<_ViewModifier_Content<HandGestureShortcutInteractiveControl>, StaticIf<AndOperationViewInputPredicate<IsHandGestureShortcut, IsArchivingHandGesture>, HandGestureShortcutInteractiveControl.HandGestureShortcutEnvironmentReader, EmptyModifier>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<HandGestureShortcutInteractiveControl>, StaticIf<AndOperationViewInputPredicate<IsHandGestureShortcut, IsArchivingHandGesture>, HandGestureShortcutInteractiveControl.HandGestureShortcutEnvironmentReader, EmptyModifier>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<HandGestureShortcutInteractiveControl>, StaticIf<AndOperationViewInputPredicate<IsHandGestureShortcut, IsArchivingHandGesture>, HandGestureShortcutInteractiveControl.HandGestureShortcutEnvironmentReader, EmptyModifier>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<_ViewModifier_Content<HandGestureShortcutInteractiveControl>, StaticIf<AndOperationViewInputPredicate<IsHandGestureShortcut, IsArchivingHandGesture>, HandGestureShortcutInteractiveControl.HandGestureShortcutEnvironmentReader, EmptyModifier>>();
    lazy protocol witness table accessor for type _ViewModifier_Content<HandGestureShortcutInteractiveControl.HandGestureShortcutEnvironmentReader> and conformance _ViewModifier_Content<A>(&lazy protocol witness table cache variable for type _ViewModifier_Content<HandGestureShortcutInteractiveControl> and conformance _ViewModifier_Content<A>, &lazy cache variable for type metadata for _ViewModifier_Content<HandGestureShortcutInteractiveControl>, (uint64_t (*)(void))lazy protocol witness table accessor for type HandGestureShortcutInteractiveControl and conformance HandGestureShortcutInteractiveControl, (uint64_t)&type metadata for HandGestureShortcutInteractiveControl);
    lazy protocol witness table accessor for type StaticIf<AndOperationViewInputPredicate<IsHandGestureShortcut, IsArchivingHandGesture>, HandGestureShortcutInteractiveControl.HandGestureShortcutEnvironmentReader, EmptyModifier> and conformance <> StaticIf<A, B, C>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<HandGestureShortcutInteractiveControl>, StaticIf<AndOperationViewInputPredicate<IsHandGestureShortcut, IsArchivingHandGesture>, HandGestureShortcutInteractiveControl.HandGestureShortcutEnvironmentReader, EmptyModifier>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<_ViewModifier_Content<HandGestureShortcutInteractiveControl>, StaticIf<AndOperationViewInputPredicate<IsHandGestureShortcut, IsArchivingHandGesture>, HandGestureShortcutInteractiveControl.HandGestureShortcutEnvironmentReader, EmptyModifier>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<_ViewModifier_Content<HandGestureShortcutInteractiveControl>, StaticIf<AndOperationViewInputPredicate<IsHandGestureShortcut, IsArchivingHandGesture>, HandGestureShortcutInteractiveControl.HandGestureShortcutEnvironmentReader, EmptyModifier>>)
  {
    type metadata accessor for ViewInputFlagModifier<IsHandGestureShortcut>(255, &lazy cache variable for type metadata for _ViewModifier_Content<HandGestureShortcutInteractiveControl>, (uint64_t (*)(void))lazy protocol witness table accessor for type HandGestureShortcutInteractiveControl and conformance HandGestureShortcutInteractiveControl, (uint64_t)&type metadata for HandGestureShortcutInteractiveControl, MEMORY[0x1E4F408E0]);
    type metadata accessor for StaticIf<AndOperationViewInputPredicate<IsHandGestureShortcut, IsArchivingHandGesture>, HandGestureShortcutInteractiveControl.HandGestureShortcutEnvironmentReader, EmptyModifier>();
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<_ViewModifier_Content<HandGestureShortcutInteractiveControl>, StaticIf<AndOperationViewInputPredicate<IsHandGestureShortcut, IsArchivingHandGesture>, HandGestureShortcutInteractiveControl.HandGestureShortcutEnvironmentReader, EmptyModifier>>);
    }
  }
}

void type metadata accessor for StaticIf<AndOperationViewInputPredicate<IsHandGestureShortcut, IsArchivingHandGesture>, HandGestureShortcutInteractiveControl.HandGestureShortcutEnvironmentReader, EmptyModifier>()
{
  if (!lazy cache variable for type metadata for StaticIf<AndOperationViewInputPredicate<IsHandGestureShortcut, IsArchivingHandGesture>, HandGestureShortcutInteractiveControl.HandGestureShortcutEnvironmentReader, EmptyModifier>)
  {
    type metadata accessor for AndOperationViewInputPredicate<IsHandGestureShortcut, IsArchivingHandGesture>();
    lazy protocol witness table accessor for type EnvironmentPropertyKey<IsHandGestureShortcutEnabled> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type AndOperationViewInputPredicate<IsHandGestureShortcut, IsArchivingHandGesture> and conformance AndOperationViewInputPredicate<A, B>, (void (*)(uint64_t))type metadata accessor for AndOperationViewInputPredicate<IsHandGestureShortcut, IsArchivingHandGesture>);
    unint64_t v0 = type metadata accessor for StaticIf();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for StaticIf<AndOperationViewInputPredicate<IsHandGestureShortcut, IsArchivingHandGesture>, HandGestureShortcutInteractiveControl.HandGestureShortcutEnvironmentReader, EmptyModifier>);
    }
  }
}

void type metadata accessor for AndOperationViewInputPredicate<IsHandGestureShortcut, IsArchivingHandGesture>()
{
  if (!lazy cache variable for type metadata for AndOperationViewInputPredicate<IsHandGestureShortcut, IsArchivingHandGesture>)
  {
    lazy protocol witness table accessor for type IsHandGestureShortcut and conformance IsHandGestureShortcut();
    lazy protocol witness table accessor for type IsArchivingHandGesture and conformance IsArchivingHandGesture();
    unint64_t v0 = type metadata accessor for AndOperationViewInputPredicate();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for AndOperationViewInputPredicate<IsHandGestureShortcut, IsArchivingHandGesture>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type IsArchivingHandGesture and conformance IsArchivingHandGesture()
{
  unint64_t result = lazy protocol witness table cache variable for type IsArchivingHandGesture and conformance IsArchivingHandGesture;
  if (!lazy protocol witness table cache variable for type IsArchivingHandGesture and conformance IsArchivingHandGesture)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IsArchivingHandGesture and conformance IsArchivingHandGesture);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type _ViewModifier_Content<HandGestureShortcutInteractiveControl.HandGestureShortcutEnvironmentReader> and conformance _ViewModifier_Content<A>(unint64_t *a1, unint64_t *a2, uint64_t (*a3)(void), uint64_t a4)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for ViewInputFlagModifier<IsHandGestureShortcut>(255, a2, a3, a4, MEMORY[0x1E4F408E0]);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type StaticIf<AndOperationViewInputPredicate<IsHandGestureShortcut, IsArchivingHandGesture>, HandGestureShortcutInteractiveControl.HandGestureShortcutEnvironmentReader, EmptyModifier> and conformance <> StaticIf<A, B, C>()
{
  unint64_t result = lazy protocol witness table cache variable for type StaticIf<AndOperationViewInputPredicate<IsHandGestureShortcut, IsArchivingHandGesture>, HandGestureShortcutInteractiveControl.HandGestureShortcutEnvironmentReader, EmptyModifier> and conformance <> StaticIf<A, B, C>;
  if (!lazy protocol witness table cache variable for type StaticIf<AndOperationViewInputPredicate<IsHandGestureShortcut, IsArchivingHandGesture>, HandGestureShortcutInteractiveControl.HandGestureShortcutEnvironmentReader, EmptyModifier> and conformance <> StaticIf<A, B, C>)
  {
    type metadata accessor for StaticIf<AndOperationViewInputPredicate<IsHandGestureShortcut, IsArchivingHandGesture>, HandGestureShortcutInteractiveControl.HandGestureShortcutEnvironmentReader, EmptyModifier>();
    lazy protocol witness table accessor for type HandGestureShortcutInteractiveControl.HandGestureShortcutEnvironmentReader and conformance HandGestureShortcutInteractiveControl.HandGestureShortcutEnvironmentReader();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StaticIf<AndOperationViewInputPredicate<IsHandGestureShortcut, IsArchivingHandGesture>, HandGestureShortcutInteractiveControl.HandGestureShortcutEnvironmentReader, EmptyModifier> and conformance <> StaticIf<A, B, C>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type HandGestureShortcutInteractiveControl.HandGestureShortcutEnvironmentReader and conformance HandGestureShortcutInteractiveControl.HandGestureShortcutEnvironmentReader()
{
  unint64_t result = lazy protocol witness table cache variable for type HandGestureShortcutInteractiveControl.HandGestureShortcutEnvironmentReader and conformance HandGestureShortcutInteractiveControl.HandGestureShortcutEnvironmentReader;
  if (!lazy protocol witness table cache variable for type HandGestureShortcutInteractiveControl.HandGestureShortcutEnvironmentReader and conformance HandGestureShortcutInteractiveControl.HandGestureShortcutEnvironmentReader)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HandGestureShortcutInteractiveControl.HandGestureShortcutEnvironmentReader and conformance HandGestureShortcutInteractiveControl.HandGestureShortcutEnvironmentReader);
  }
  return result;
}

uint64_t associated type witness table accessor for ViewModifier.Body : View in HandGestureShortcutInteractiveControl.HandGestureShortcutEnvironmentReader()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for View.Body : View in ExternalGestureActionModifier.ContentView()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for ConditionallyArchivableView.ArchivedBody : View in ExternalGestureActionModifier.ContentView()
{
  return swift_getOpaqueTypeConformance2();
}

unint64_t instantiation function for generic protocol witness table for ExternalGestureActionModifier.ContentView(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type ExternalGestureActionModifier.ContentView and conformance ExternalGestureActionModifier.ContentView();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t instantiation function for generic protocol witness table for HandGestureShortcutInteractiveControl.HandGestureShortcutPreferenceWriter(void *a1)
{
  a1[1] = lazy protocol witness table accessor for type HandGestureShortcutInteractiveControl.HandGestureShortcutPreferenceWriter and conformance HandGestureShortcutInteractiveControl.HandGestureShortcutPreferenceWriter();
  a1[2] = lazy protocol witness table accessor for type HandGestureShortcutInteractiveControl.HandGestureShortcutPreferenceWriter and conformance HandGestureShortcutInteractiveControl.HandGestureShortcutPreferenceWriter();
  unint64_t result = lazy protocol witness table accessor for type HandGestureShortcutInteractiveControl.HandGestureShortcutPreferenceWriter and conformance HandGestureShortcutInteractiveControl.HandGestureShortcutPreferenceWriter();
  a1[3] = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type HandGestureShortcutInteractiveControl.HandGestureShortcutPreferenceWriter and conformance HandGestureShortcutInteractiveControl.HandGestureShortcutPreferenceWriter()
{
  unint64_t result = lazy protocol witness table cache variable for type HandGestureShortcutInteractiveControl.HandGestureShortcutPreferenceWriter and conformance HandGestureShortcutInteractiveControl.HandGestureShortcutPreferenceWriter;
  if (!lazy protocol witness table cache variable for type HandGestureShortcutInteractiveControl.HandGestureShortcutPreferenceWriter and conformance HandGestureShortcutInteractiveControl.HandGestureShortcutPreferenceWriter)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HandGestureShortcutInteractiveControl.HandGestureShortcutPreferenceWriter and conformance HandGestureShortcutInteractiveControl.HandGestureShortcutPreferenceWriter);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type HandGestureShortcutInteractiveControl.HandGestureShortcutPreferenceWriter and conformance HandGestureShortcutInteractiveControl.HandGestureShortcutPreferenceWriter;
  if (!lazy protocol witness table cache variable for type HandGestureShortcutInteractiveControl.HandGestureShortcutPreferenceWriter and conformance HandGestureShortcutInteractiveControl.HandGestureShortcutPreferenceWriter)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HandGestureShortcutInteractiveControl.HandGestureShortcutPreferenceWriter and conformance HandGestureShortcutInteractiveControl.HandGestureShortcutPreferenceWriter);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type HandGestureShortcutInteractiveControl.HandGestureShortcutPreferenceWriter and conformance HandGestureShortcutInteractiveControl.HandGestureShortcutPreferenceWriter;
  if (!lazy protocol witness table cache variable for type HandGestureShortcutInteractiveControl.HandGestureShortcutPreferenceWriter and conformance HandGestureShortcutInteractiveControl.HandGestureShortcutPreferenceWriter)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HandGestureShortcutInteractiveControl.HandGestureShortcutPreferenceWriter and conformance HandGestureShortcutInteractiveControl.HandGestureShortcutPreferenceWriter);
  }
  return result;
}

uint64_t associated type witness table accessor for ViewModifier.Body : View in HandGestureShortcutInteractiveControl.HandGestureShortcutPreferenceWriter()
{
  return swift_getOpaqueTypeConformance2();
}

void *specialized HandGestureShortcutInteractiveControl.HandGestureShortcutPreferenceWriter.init(from:)(void *a1)
{
  type metadata accessor for ViewInputFlagModifier<IsHandGestureShortcut>(0, &lazy cache variable for type metadata for KeyedDecodingContainer<HandGestureShortcutInteractiveControl.HandGestureShortcutPreferenceWriter.CodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type HandGestureShortcutInteractiveControl.HandGestureShortcutPreferenceWriter.CodingKeys and conformance HandGestureShortcutInteractiveControl.HandGestureShortcutPreferenceWriter.CodingKeys, (uint64_t)&unk_1ED462DB8, MEMORY[0x1E4FBBDC0]);
  uint64_t v4 = v3;
  uint64_t v5 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  BOOL v7 = (char *)&v11 - v6;
  int v8 = __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type HandGestureShortcutInteractiveControl.HandGestureShortcutPreferenceWriter.CodingKeys and conformance HandGestureShortcutInteractiveControl.HandGestureShortcutPreferenceWriter.CodingKeys();
  uint64_t v9 = v8;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v1)
  {
    lazy protocol witness table accessor for type HandGestureShortcutInteractiveControl.BorderShape and conformance HandGestureShortcutInteractiveControl.BorderShape();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    uint64_t v9 = v11;
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  return v9;
}

unint64_t lazy protocol witness table accessor for type HandGestureShortcutInteractiveControl.HandGestureShortcutPreferenceWriter.CodingKeys and conformance HandGestureShortcutInteractiveControl.HandGestureShortcutPreferenceWriter.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type HandGestureShortcutInteractiveControl.HandGestureShortcutPreferenceWriter.CodingKeys and conformance HandGestureShortcutInteractiveControl.HandGestureShortcutPreferenceWriter.CodingKeys;
  if (!lazy protocol witness table cache variable for type HandGestureShortcutInteractiveControl.HandGestureShortcutPreferenceWriter.CodingKeys and conformance HandGestureShortcutInteractiveControl.HandGestureShortcutPreferenceWriter.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HandGestureShortcutInteractiveControl.HandGestureShortcutPreferenceWriter.CodingKeys and conformance HandGestureShortcutInteractiveControl.HandGestureShortcutPreferenceWriter.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type HandGestureShortcutInteractiveControl.HandGestureShortcutPreferenceWriter.CodingKeys and conformance HandGestureShortcutInteractiveControl.HandGestureShortcutPreferenceWriter.CodingKeys;
  if (!lazy protocol witness table cache variable for type HandGestureShortcutInteractiveControl.HandGestureShortcutPreferenceWriter.CodingKeys and conformance HandGestureShortcutInteractiveControl.HandGestureShortcutPreferenceWriter.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HandGestureShortcutInteractiveControl.HandGestureShortcutPreferenceWriter.CodingKeys and conformance HandGestureShortcutInteractiveControl.HandGestureShortcutPreferenceWriter.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type HandGestureShortcutInteractiveControl.HandGestureShortcutPreferenceWriter.CodingKeys and conformance HandGestureShortcutInteractiveControl.HandGestureShortcutPreferenceWriter.CodingKeys;
  if (!lazy protocol witness table cache variable for type HandGestureShortcutInteractiveControl.HandGestureShortcutPreferenceWriter.CodingKeys and conformance HandGestureShortcutInteractiveControl.HandGestureShortcutPreferenceWriter.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HandGestureShortcutInteractiveControl.HandGestureShortcutPreferenceWriter.CodingKeys and conformance HandGestureShortcutInteractiveControl.HandGestureShortcutPreferenceWriter.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type HandGestureShortcutInteractiveControl.HandGestureShortcutPreferenceWriter.CodingKeys and conformance HandGestureShortcutInteractiveControl.HandGestureShortcutPreferenceWriter.CodingKeys;
  if (!lazy protocol witness table cache variable for type HandGestureShortcutInteractiveControl.HandGestureShortcutPreferenceWriter.CodingKeys and conformance HandGestureShortcutInteractiveControl.HandGestureShortcutPreferenceWriter.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HandGestureShortcutInteractiveControl.HandGestureShortcutPreferenceWriter.CodingKeys and conformance HandGestureShortcutInteractiveControl.HandGestureShortcutPreferenceWriter.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type HandGestureShortcutInteractiveControl.BorderShape and conformance HandGestureShortcutInteractiveControl.BorderShape()
{
  unint64_t result = lazy protocol witness table cache variable for type HandGestureShortcutInteractiveControl.BorderShape and conformance HandGestureShortcutInteractiveControl.BorderShape;
  if (!lazy protocol witness table cache variable for type HandGestureShortcutInteractiveControl.BorderShape and conformance HandGestureShortcutInteractiveControl.BorderShape)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HandGestureShortcutInteractiveControl.BorderShape and conformance HandGestureShortcutInteractiveControl.BorderShape);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type HandGestureShortcutInteractiveControl.BorderShape and conformance HandGestureShortcutInteractiveControl.BorderShape;
  if (!lazy protocol witness table cache variable for type HandGestureShortcutInteractiveControl.BorderShape and conformance HandGestureShortcutInteractiveControl.BorderShape)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HandGestureShortcutInteractiveControl.BorderShape and conformance HandGestureShortcutInteractiveControl.BorderShape);
  }
  return result;
}

void *type metadata accessor for HandGestureShortcutInteractiveControl.HandGestureShortcutPreferenceWriter.CodingKeys()
{
  return &unk_1ED462DB8;
}

ValueMetadata *type metadata accessor for HandGestureShortcutInteractiveControl.BorderShape()
{
  return &type metadata for HandGestureShortcutInteractiveControl.BorderShape;
}

uint64_t sub_1876CDCA8()
{
  return lazy protocol witness table accessor for type _ViewModifier_Content<HandGestureShortcutInteractiveControl.HandGestureShortcutEnvironmentReader> and conformance _ViewModifier_Content<A>(&lazy protocol witness table cache variable for type _ViewModifier_Content<HandGestureShortcutInteractiveControl.HandGestureShortcutPreferenceWriter> and conformance _ViewModifier_Content<A>, &lazy cache variable for type metadata for _ViewModifier_Content<HandGestureShortcutInteractiveControl.HandGestureShortcutPreferenceWriter>, (uint64_t (*)(void))lazy protocol witness table accessor for type HandGestureShortcutInteractiveControl.HandGestureShortcutPreferenceWriter and conformance HandGestureShortcutInteractiveControl.HandGestureShortcutPreferenceWriter, (uint64_t)&type metadata for HandGestureShortcutInteractiveControl.HandGestureShortcutPreferenceWriter);
}

uint64_t sub_1876CDCEC()
{
  return lazy protocol witness table accessor for type _ViewModifier_Content<HandGestureShortcutInteractiveControl.HandGestureShortcutEnvironmentReader> and conformance _ViewModifier_Content<A>(&lazy protocol witness table cache variable for type _ViewModifier_Content<ExternalGestureActionModifier> and conformance _ViewModifier_Content<A>, &lazy cache variable for type metadata for _ViewModifier_Content<ExternalGestureActionModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type ExternalGestureActionModifier and conformance ExternalGestureActionModifier, (uint64_t)&type metadata for ExternalGestureActionModifier);
}

unint64_t lazy protocol witness table accessor for type _ConditionalContent<ModifiedContent<_ViewModifier_Content<HandGestureShortcutInteractiveControl.HandGestureShortcutEnvironmentReader>, HandGestureShortcutInteractiveControl.HandGestureShortcutPreferenceWriter>, _ViewModifier_Content<HandGestureShortcutInteractiveControl.HandGestureShortcutEnvironmentReader>> and conformance <> _ConditionalContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type _ConditionalContent<ModifiedContent<_ViewModifier_Content<HandGestureShortcutInteractiveControl.HandGestureShortcutEnvironmentReader>, HandGestureShortcutInteractiveControl.HandGestureShortcutPreferenceWriter>, _ViewModifier_Content<HandGestureShortcutInteractiveControl.HandGestureShortcutEnvironmentReader>> and conformance <> _ConditionalContent<A, B>;
  if (!lazy protocol witness table cache variable for type _ConditionalContent<ModifiedContent<_ViewModifier_Content<HandGestureShortcutInteractiveControl.HandGestureShortcutEnvironmentReader>, HandGestureShortcutInteractiveControl.HandGestureShortcutPreferenceWriter>, _ViewModifier_Content<HandGestureShortcutInteractiveControl.HandGestureShortcutEnvironmentReader>> and conformance <> _ConditionalContent<A, B>)
  {
    type metadata accessor for _ConditionalContent<ModifiedContent<_ViewModifier_Content<HandGestureShortcutInteractiveControl.HandGestureShortcutEnvironmentReader>, HandGestureShortcutInteractiveControl.HandGestureShortcutPreferenceWriter>, _ViewModifier_Content<HandGestureShortcutInteractiveControl.HandGestureShortcutEnvironmentReader>>();
    lazy protocol witness table accessor for type ModifiedContent<_ViewModifier_Content<HandGestureShortcutInteractiveControl.HandGestureShortcutEnvironmentReader>, HandGestureShortcutInteractiveControl.HandGestureShortcutPreferenceWriter> and conformance <> ModifiedContent<A, B>();
    lazy protocol witness table accessor for type _ViewModifier_Content<HandGestureShortcutInteractiveControl.HandGestureShortcutEnvironmentReader> and conformance _ViewModifier_Content<A>(&lazy protocol witness table cache variable for type _ViewModifier_Content<HandGestureShortcutInteractiveControl.HandGestureShortcutEnvironmentReader> and conformance _ViewModifier_Content<A>, &lazy cache variable for type metadata for _ViewModifier_Content<HandGestureShortcutInteractiveControl.HandGestureShortcutEnvironmentReader>, (uint64_t (*)(void))lazy protocol witness table accessor for type HandGestureShortcutInteractiveControl.HandGestureShortcutEnvironmentReader and conformance HandGestureShortcutInteractiveControl.HandGestureShortcutEnvironmentReader, (uint64_t)&type metadata for HandGestureShortcutInteractiveControl.HandGestureShortcutEnvironmentReader);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ConditionalContent<ModifiedContent<_ViewModifier_Content<HandGestureShortcutInteractiveControl.HandGestureShortcutEnvironmentReader>, HandGestureShortcutInteractiveControl.HandGestureShortcutPreferenceWriter>, _ViewModifier_Content<HandGestureShortcutInteractiveControl.HandGestureShortcutEnvironmentReader>> and conformance <> _ConditionalContent<A, B>);
  }
  return result;
}

void type metadata accessor for _ConditionalContent<ModifiedContent<_ViewModifier_Content<HandGestureShortcutInteractiveControl.HandGestureShortcutEnvironmentReader>, HandGestureShortcutInteractiveControl.HandGestureShortcutPreferenceWriter>, _ViewModifier_Content<HandGestureShortcutInteractiveControl.HandGestureShortcutEnvironmentReader>>()
{
  if (!lazy cache variable for type metadata for _ConditionalContent<ModifiedContent<_ViewModifier_Content<HandGestureShortcutInteractiveControl.HandGestureShortcutEnvironmentReader>, HandGestureShortcutInteractiveControl.HandGestureShortcutPreferenceWriter>, _ViewModifier_Content<HandGestureShortcutInteractiveControl.HandGestureShortcutEnvironmentReader>>)
  {
    type metadata accessor for ModifiedContent<_ViewModifier_Content<HandGestureShortcutInteractiveControl.HandGestureShortcutEnvironmentReader>, HandGestureShortcutInteractiveControl.HandGestureShortcutPreferenceWriter>();
    type metadata accessor for ViewInputFlagModifier<IsHandGestureShortcut>(255, &lazy cache variable for type metadata for _ViewModifier_Content<HandGestureShortcutInteractiveControl.HandGestureShortcutEnvironmentReader>, (uint64_t (*)(void))lazy protocol witness table accessor for type HandGestureShortcutInteractiveControl.HandGestureShortcutEnvironmentReader and conformance HandGestureShortcutInteractiveControl.HandGestureShortcutEnvironmentReader, (uint64_t)&type metadata for HandGestureShortcutInteractiveControl.HandGestureShortcutEnvironmentReader, MEMORY[0x1E4F408E0]);
    unint64_t v0 = type metadata accessor for _ConditionalContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ConditionalContent<ModifiedContent<_ViewModifier_Content<HandGestureShortcutInteractiveControl.HandGestureShortcutEnvironmentReader>, HandGestureShortcutInteractiveControl.HandGestureShortcutPreferenceWriter>, _ViewModifier_Content<HandGestureShortcutInteractiveControl.HandGestureShortcutEnvironmentReader>>);
    }
  }
}

void type metadata accessor for ModifiedContent<_ViewModifier_Content<HandGestureShortcutInteractiveControl.HandGestureShortcutEnvironmentReader>, HandGestureShortcutInteractiveControl.HandGestureShortcutPreferenceWriter>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<_ViewModifier_Content<HandGestureShortcutInteractiveControl.HandGestureShortcutEnvironmentReader>, HandGestureShortcutInteractiveControl.HandGestureShortcutPreferenceWriter>)
  {
    type metadata accessor for ViewInputFlagModifier<IsHandGestureShortcut>(255, &lazy cache variable for type metadata for _ViewModifier_Content<HandGestureShortcutInteractiveControl.HandGestureShortcutEnvironmentReader>, (uint64_t (*)(void))lazy protocol witness table accessor for type HandGestureShortcutInteractiveControl.HandGestureShortcutEnvironmentReader and conformance HandGestureShortcutInteractiveControl.HandGestureShortcutEnvironmentReader, (uint64_t)&type metadata for HandGestureShortcutInteractiveControl.HandGestureShortcutEnvironmentReader, MEMORY[0x1E4F408E0]);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<_ViewModifier_Content<HandGestureShortcutInteractiveControl.HandGestureShortcutEnvironmentReader>, HandGestureShortcutInteractiveControl.HandGestureShortcutPreferenceWriter>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<_ViewModifier_Content<HandGestureShortcutInteractiveControl.HandGestureShortcutEnvironmentReader>, HandGestureShortcutInteractiveControl.HandGestureShortcutPreferenceWriter> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<HandGestureShortcutInteractiveControl.HandGestureShortcutEnvironmentReader>, HandGestureShortcutInteractiveControl.HandGestureShortcutPreferenceWriter> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<HandGestureShortcutInteractiveControl.HandGestureShortcutEnvironmentReader>, HandGestureShortcutInteractiveControl.HandGestureShortcutPreferenceWriter> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<_ViewModifier_Content<HandGestureShortcutInteractiveControl.HandGestureShortcutEnvironmentReader>, HandGestureShortcutInteractiveControl.HandGestureShortcutPreferenceWriter>();
    lazy protocol witness table accessor for type _ViewModifier_Content<HandGestureShortcutInteractiveControl.HandGestureShortcutEnvironmentReader> and conformance _ViewModifier_Content<A>(&lazy protocol witness table cache variable for type _ViewModifier_Content<HandGestureShortcutInteractiveControl.HandGestureShortcutEnvironmentReader> and conformance _ViewModifier_Content<A>, &lazy cache variable for type metadata for _ViewModifier_Content<HandGestureShortcutInteractiveControl.HandGestureShortcutEnvironmentReader>, (uint64_t (*)(void))lazy protocol witness table accessor for type HandGestureShortcutInteractiveControl.HandGestureShortcutEnvironmentReader and conformance HandGestureShortcutInteractiveControl.HandGestureShortcutEnvironmentReader, (uint64_t)&type metadata for HandGestureShortcutInteractiveControl.HandGestureShortcutEnvironmentReader);
    lazy protocol witness table accessor for type HandGestureShortcutInteractiveControl.HandGestureShortcutPreferenceWriter and conformance HandGestureShortcutInteractiveControl.HandGestureShortcutPreferenceWriter();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<HandGestureShortcutInteractiveControl.HandGestureShortcutEnvironmentReader>, HandGestureShortcutInteractiveControl.HandGestureShortcutPreferenceWriter> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t specialized HandGestureShortcutInteractiveControl.BorderShape.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x6974616D6F747561 && a2 == 0xE900000000000063;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x656C7573706163 && a2 == 0xE700000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000019 && a2 == 0x8000000188326670 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x8000000188326690 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x656C63726963 && a2 == 0xE600000000000000)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 4;
    }
    else {
      return 5;
    }
  }
}

uint64_t specialized HandGestureShortcutInteractiveControl.BorderShape.init(from:)(uint64_t a1)
{
  BOOL v2 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E4FBBDC0];
  type metadata accessor for ViewInputFlagModifier<IsHandGestureShortcut>(0, &lazy cache variable for type metadata for KeyedDecodingContainer<HandGestureShortcutInteractiveControl.BorderShape.CircleCodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type HandGestureShortcutInteractiveControl.BorderShape.CircleCodingKeys and conformance HandGestureShortcutInteractiveControl.BorderShape.CircleCodingKeys, (uint64_t)&unk_1ED477488, MEMORY[0x1E4FBBDC0]);
  uint64_t v49 = v3;
  uint64_t v41 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  char v48 = (char *)&v34 - v4;
  type metadata accessor for ViewInputFlagModifier<IsHandGestureShortcut>(0, &lazy cache variable for type metadata for KeyedDecodingContainer<HandGestureShortcutInteractiveControl.BorderShape.RoundedRectangleCodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type HandGestureShortcutInteractiveControl.BorderShape.RoundedRectangleCodingKeys and conformance HandGestureShortcutInteractiveControl.BorderShape.RoundedRectangleCodingKeys, (uint64_t)&unk_1ED477468, v2);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v42 = v5;
  uint64_t v43 = v6;
  MEMORY[0x1F4188790](v5);
  char v45 = (char *)&v34 - v7;
  type metadata accessor for ViewInputFlagModifier<IsHandGestureShortcut>(0, &lazy cache variable for type metadata for KeyedDecodingContainer<HandGestureShortcutInteractiveControl.BorderShape.RoundedRectangleAutomaticCodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type HandGestureShortcutInteractiveControl.BorderShape.RoundedRectangleAutomaticCodingKeys and conformance HandGestureShortcutInteractiveControl.BorderShape.RoundedRectangleAutomaticCodingKeys, (uint64_t)&unk_1ED4773D8, v2);
  uint64_t v39 = *(void *)(v8 - 8);
  uint64_t v40 = v8;
  MEMORY[0x1F4188790](v8);
  char v47 = (char *)&v34 - v9;
  type metadata accessor for ViewInputFlagModifier<IsHandGestureShortcut>(0, &lazy cache variable for type metadata for KeyedDecodingContainer<HandGestureShortcutInteractiveControl.BorderShape.CapsuleCodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type HandGestureShortcutInteractiveControl.BorderShape.CapsuleCodingKeys and conformance HandGestureShortcutInteractiveControl.BorderShape.CapsuleCodingKeys, (uint64_t)&unk_1ED4773B8, v2);
  uint64_t v37 = *(void *)(v10 - 8);
  uint64_t v38 = v10;
  MEMORY[0x1F4188790](v10);
  char v44 = (char *)&v34 - v11;
  type metadata accessor for ViewInputFlagModifier<IsHandGestureShortcut>(0, &lazy cache variable for type metadata for KeyedDecodingContainer<HandGestureShortcutInteractiveControl.BorderShape.AutomaticCodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type HandGestureShortcutInteractiveControl.BorderShape.AutomaticCodingKeys and conformance HandGestureShortcutInteractiveControl.BorderShape.AutomaticCodingKeys, (uint64_t)&unk_1ED477398, v2);
  uint64_t v13 = v12;
  uint64_t v36 = *(void *)(v12 - 8);
  MEMORY[0x1F4188790](v12);
  uint64_t v15 = (char *)&v34 - v14;
  type metadata accessor for ViewInputFlagModifier<IsHandGestureShortcut>(0, &lazy cache variable for type metadata for KeyedDecodingContainer<HandGestureShortcutInteractiveControl.BorderShape.CodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type HandGestureShortcutInteractiveControl.BorderShape.CodingKeys and conformance HandGestureShortcutInteractiveControl.BorderShape.CodingKeys, (uint64_t)&unk_1ED477378, v2);
  uint64_t v17 = v16;
  uint64_t v46 = *(void *)(v16 - 8);
  MEMORY[0x1F4188790](v16);
  uint64_t v19 = (char *)&v34 - v18;
  __swift_project_boxed_opaque_existential_1((void *)a1, *(void *)(a1 + 24));
  lazy protocol witness table accessor for type HandGestureShortcutInteractiveControl.BorderShape.CodingKeys and conformance HandGestureShortcutInteractiveControl.BorderShape.CodingKeys();
  uint64_t v20 = v50;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v20) {
    goto LABEL_6;
  }
  int v35 = v15;
  uint64_t v22 = v47;
  uint64_t v21 = v48;
  uint64_t v23 = v49;
  uint64_t v50 = a1;
  uint64_t v24 = KeyedDecodingContainer.allKeys.getter();
  if (*(void *)(v24 + 16) != 1)
  {
    uint64_t v26 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v28 = v27;
    type metadata accessor for (@thick Any.Type, DecodingError.Context)();
    *uint64_t v28 = &type metadata for HandGestureShortcutInteractiveControl.BorderShape;
    KeyedDecodingContainer.codingPath.getter();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(void *, void, uint64_t))(*(void *)(v26 - 8) + 104))(v28, *MEMORY[0x1E4FBBA70], v26);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v46 + 8))(v19, v17);
    a1 = v50;
LABEL_6:
    __swift_destroy_boxed_opaque_existential_1(a1);
    return a1;
  }
  switch(*(unsigned char *)(v24 + 32))
  {
    case 1:
      char v53 = 1;
      lazy protocol witness table accessor for type HandGestureShortcutInteractiveControl.BorderShape.CapsuleCodingKeys and conformance HandGestureShortcutInteractiveControl.BorderShape.CapsuleCodingKeys();
      uint64_t v30 = v44;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      (*(void (**)(char *, uint64_t))(v37 + 8))(v30, v38);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v46 + 8))(v19, v17);
      a1 = 1;
      break;
    case 2:
      char v54 = 2;
      lazy protocol witness table accessor for type HandGestureShortcutInteractiveControl.BorderShape.RoundedRectangleAutomaticCodingKeys and conformance HandGestureShortcutInteractiveControl.BorderShape.RoundedRectangleAutomaticCodingKeys();
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      (*(void (**)(char *, uint64_t))(v39 + 8))(v22, v40);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v46 + 8))(v19, v17);
      a1 = 2;
      break;
    case 3:
      char v55 = 3;
      lazy protocol witness table accessor for type HandGestureShortcutInteractiveControl.BorderShape.RoundedRectangleCodingKeys and conformance HandGestureShortcutInteractiveControl.BorderShape.RoundedRectangleCodingKeys();
      uint64_t v31 = v45;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      lazy protocol witness table accessor for type CGFloat and conformance CGFloat();
      uint64_t v32 = v42;
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      uint64_t v33 = v46;
      (*(void (**)(char *, uint64_t))(v43 + 8))(v31, v32);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v33 + 8))(v19, v17);
      a1 = v51;
      break;
    case 4:
      char v56 = 4;
      lazy protocol witness table accessor for type HandGestureShortcutInteractiveControl.BorderShape.CircleCodingKeys and conformance HandGestureShortcutInteractiveControl.BorderShape.CircleCodingKeys();
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      (*(void (**)(char *, uint64_t))(v41 + 8))(v21, v23);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v46 + 8))(v19, v17);
      a1 = 3;
      break;
    default:
      char v52 = 0;
      lazy protocol witness table accessor for type HandGestureShortcutInteractiveControl.BorderShape.AutomaticCodingKeys and conformance HandGestureShortcutInteractiveControl.BorderShape.AutomaticCodingKeys();
      uint64_t v25 = v35;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      (*(void (**)(char *, uint64_t))(v36 + 8))(v25, v13);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v46 + 8))(v19, v17);
      a1 = 0;
      break;
  }
  __swift_destroy_boxed_opaque_existential_1(v50);
  return a1;
}

unint64_t lazy protocol witness table accessor for type HandGestureShortcutInteractiveControl.BorderShape.CircleCodingKeys and conformance HandGestureShortcutInteractiveControl.BorderShape.CircleCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type HandGestureShortcutInteractiveControl.BorderShape.CircleCodingKeys and conformance HandGestureShortcutInteractiveControl.BorderShape.CircleCodingKeys;
  if (!lazy protocol witness table cache variable for type HandGestureShortcutInteractiveControl.BorderShape.CircleCodingKeys and conformance HandGestureShortcutInteractiveControl.BorderShape.CircleCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HandGestureShortcutInteractiveControl.BorderShape.CircleCodingKeys and conformance HandGestureShortcutInteractiveControl.BorderShape.CircleCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type HandGestureShortcutInteractiveControl.BorderShape.CircleCodingKeys and conformance HandGestureShortcutInteractiveControl.BorderShape.CircleCodingKeys;
  if (!lazy protocol witness table cache variable for type HandGestureShortcutInteractiveControl.BorderShape.CircleCodingKeys and conformance HandGestureShortcutInteractiveControl.BorderShape.CircleCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HandGestureShortcutInteractiveControl.BorderShape.CircleCodingKeys and conformance HandGestureShortcutInteractiveControl.BorderShape.CircleCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type HandGestureShortcutInteractiveControl.BorderShape.CircleCodingKeys and conformance HandGestureShortcutInteractiveControl.BorderShape.CircleCodingKeys;
  if (!lazy protocol witness table cache variable for type HandGestureShortcutInteractiveControl.BorderShape.CircleCodingKeys and conformance HandGestureShortcutInteractiveControl.BorderShape.CircleCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HandGestureShortcutInteractiveControl.BorderShape.CircleCodingKeys and conformance HandGestureShortcutInteractiveControl.BorderShape.CircleCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type HandGestureShortcutInteractiveControl.BorderShape.RoundedRectangleCodingKeys and conformance HandGestureShortcutInteractiveControl.BorderShape.RoundedRectangleCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type HandGestureShortcutInteractiveControl.BorderShape.RoundedRectangleCodingKeys and conformance HandGestureShortcutInteractiveControl.BorderShape.RoundedRectangleCodingKeys;
  if (!lazy protocol witness table cache variable for type HandGestureShortcutInteractiveControl.BorderShape.RoundedRectangleCodingKeys and conformance HandGestureShortcutInteractiveControl.BorderShape.RoundedRectangleCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HandGestureShortcutInteractiveControl.BorderShape.RoundedRectangleCodingKeys and conformance HandGestureShortcutInteractiveControl.BorderShape.RoundedRectangleCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type HandGestureShortcutInteractiveControl.BorderShape.RoundedRectangleCodingKeys and conformance HandGestureShortcutInteractiveControl.BorderShape.RoundedRectangleCodingKeys;
  if (!lazy protocol witness table cache variable for type HandGestureShortcutInteractiveControl.BorderShape.RoundedRectangleCodingKeys and conformance HandGestureShortcutInteractiveControl.BorderShape.RoundedRectangleCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HandGestureShortcutInteractiveControl.BorderShape.RoundedRectangleCodingKeys and conformance HandGestureShortcutInteractiveControl.BorderShape.RoundedRectangleCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type HandGestureShortcutInteractiveControl.BorderShape.RoundedRectangleCodingKeys and conformance HandGestureShortcutInteractiveControl.BorderShape.RoundedRectangleCodingKeys;
  if (!lazy protocol witness table cache variable for type HandGestureShortcutInteractiveControl.BorderShape.RoundedRectangleCodingKeys and conformance HandGestureShortcutInteractiveControl.BorderShape.RoundedRectangleCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HandGestureShortcutInteractiveControl.BorderShape.RoundedRectangleCodingKeys and conformance HandGestureShortcutInteractiveControl.BorderShape.RoundedRectangleCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type HandGestureShortcutInteractiveControl.BorderShape.RoundedRectangleCodingKeys and conformance HandGestureShortcutInteractiveControl.BorderShape.RoundedRectangleCodingKeys;
  if (!lazy protocol witness table cache variable for type HandGestureShortcutInteractiveControl.BorderShape.RoundedRectangleCodingKeys and conformance HandGestureShortcutInteractiveControl.BorderShape.RoundedRectangleCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HandGestureShortcutInteractiveControl.BorderShape.RoundedRectangleCodingKeys and conformance HandGestureShortcutInteractiveControl.BorderShape.RoundedRectangleCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type HandGestureShortcutInteractiveControl.BorderShape.RoundedRectangleAutomaticCodingKeys and conformance HandGestureShortcutInteractiveControl.BorderShape.RoundedRectangleAutomaticCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type HandGestureShortcutInteractiveControl.BorderShape.RoundedRectangleAutomaticCodingKeys and conformance HandGestureShortcutInteractiveControl.BorderShape.RoundedRectangleAutomaticCodingKeys;
  if (!lazy protocol witness table cache variable for type HandGestureShortcutInteractiveControl.BorderShape.RoundedRectangleAutomaticCodingKeys and conformance HandGestureShortcutInteractiveControl.BorderShape.RoundedRectangleAutomaticCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HandGestureShortcutInteractiveControl.BorderShape.RoundedRectangleAutomaticCodingKeys and conformance HandGestureShortcutInteractiveControl.BorderShape.RoundedRectangleAutomaticCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type HandGestureShortcutInteractiveControl.BorderShape.RoundedRectangleAutomaticCodingKeys and conformance HandGestureShortcutInteractiveControl.BorderShape.RoundedRectangleAutomaticCodingKeys;
  if (!lazy protocol witness table cache variable for type HandGestureShortcutInteractiveControl.BorderShape.RoundedRectangleAutomaticCodingKeys and conformance HandGestureShortcutInteractiveControl.BorderShape.RoundedRectangleAutomaticCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HandGestureShortcutInteractiveControl.BorderShape.RoundedRectangleAutomaticCodingKeys and conformance HandGestureShortcutInteractiveControl.BorderShape.RoundedRectangleAutomaticCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type HandGestureShortcutInteractiveControl.BorderShape.RoundedRectangleAutomaticCodingKeys and conformance HandGestureShortcutInteractiveControl.BorderShape.RoundedRectangleAutomaticCodingKeys;
  if (!lazy protocol witness table cache variable for type HandGestureShortcutInteractiveControl.BorderShape.RoundedRectangleAutomaticCodingKeys and conformance HandGestureShortcutInteractiveControl.BorderShape.RoundedRectangleAutomaticCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HandGestureShortcutInteractiveControl.BorderShape.RoundedRectangleAutomaticCodingKeys and conformance HandGestureShortcutInteractiveControl.BorderShape.RoundedRectangleAutomaticCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type HandGestureShortcutInteractiveControl.BorderShape.CapsuleCodingKeys and conformance HandGestureShortcutInteractiveControl.BorderShape.CapsuleCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type HandGestureShortcutInteractiveControl.BorderShape.CapsuleCodingKeys and conformance HandGestureShortcutInteractiveControl.BorderShape.CapsuleCodingKeys;
  if (!lazy protocol witness table cache variable for type HandGestureShortcutInteractiveControl.BorderShape.CapsuleCodingKeys and conformance HandGestureShortcutInteractiveControl.BorderShape.CapsuleCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HandGestureShortcutInteractiveControl.BorderShape.CapsuleCodingKeys and conformance HandGestureShortcutInteractiveControl.BorderShape.CapsuleCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type HandGestureShortcutInteractiveControl.BorderShape.CapsuleCodingKeys and conformance HandGestureShortcutInteractiveControl.BorderShape.CapsuleCodingKeys;
  if (!lazy protocol witness table cache variable for type HandGestureShortcutInteractiveControl.BorderShape.CapsuleCodingKeys and conformance HandGestureShortcutInteractiveControl.BorderShape.CapsuleCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HandGestureShortcutInteractiveControl.BorderShape.CapsuleCodingKeys and conformance HandGestureShortcutInteractiveControl.BorderShape.CapsuleCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type HandGestureShortcutInteractiveControl.BorderShape.CapsuleCodingKeys and conformance HandGestureShortcutInteractiveControl.BorderShape.CapsuleCodingKeys;
  if (!lazy protocol witness table cache variable for type HandGestureShortcutInteractiveControl.BorderShape.CapsuleCodingKeys and conformance HandGestureShortcutInteractiveControl.BorderShape.CapsuleCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HandGestureShortcutInteractiveControl.BorderShape.CapsuleCodingKeys and conformance HandGestureShortcutInteractiveControl.BorderShape.CapsuleCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type HandGestureShortcutInteractiveControl.BorderShape.AutomaticCodingKeys and conformance HandGestureShortcutInteractiveControl.BorderShape.AutomaticCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type HandGestureShortcutInteractiveControl.BorderShape.AutomaticCodingKeys and conformance HandGestureShortcutInteractiveControl.BorderShape.AutomaticCodingKeys;
  if (!lazy protocol witness table cache variable for type HandGestureShortcutInteractiveControl.BorderShape.AutomaticCodingKeys and conformance HandGestureShortcutInteractiveControl.BorderShape.AutomaticCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HandGestureShortcutInteractiveControl.BorderShape.AutomaticCodingKeys and conformance HandGestureShortcutInteractiveControl.BorderShape.AutomaticCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type HandGestureShortcutInteractiveControl.BorderShape.AutomaticCodingKeys and conformance HandGestureShortcutInteractiveControl.BorderShape.AutomaticCodingKeys;
  if (!lazy protocol witness table cache variable for type HandGestureShortcutInteractiveControl.BorderShape.AutomaticCodingKeys and conformance HandGestureShortcutInteractiveControl.BorderShape.AutomaticCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HandGestureShortcutInteractiveControl.BorderShape.AutomaticCodingKeys and conformance HandGestureShortcutInteractiveControl.BorderShape.AutomaticCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type HandGestureShortcutInteractiveControl.BorderShape.AutomaticCodingKeys and conformance HandGestureShortcutInteractiveControl.BorderShape.AutomaticCodingKeys;
  if (!lazy protocol witness table cache variable for type HandGestureShortcutInteractiveControl.BorderShape.AutomaticCodingKeys and conformance HandGestureShortcutInteractiveControl.BorderShape.AutomaticCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HandGestureShortcutInteractiveControl.BorderShape.AutomaticCodingKeys and conformance HandGestureShortcutInteractiveControl.BorderShape.AutomaticCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type HandGestureShortcutInteractiveControl.BorderShape.CodingKeys and conformance HandGestureShortcutInteractiveControl.BorderShape.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type HandGestureShortcutInteractiveControl.BorderShape.CodingKeys and conformance HandGestureShortcutInteractiveControl.BorderShape.CodingKeys;
  if (!lazy protocol witness table cache variable for type HandGestureShortcutInteractiveControl.BorderShape.CodingKeys and conformance HandGestureShortcutInteractiveControl.BorderShape.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HandGestureShortcutInteractiveControl.BorderShape.CodingKeys and conformance HandGestureShortcutInteractiveControl.BorderShape.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type HandGestureShortcutInteractiveControl.BorderShape.CodingKeys and conformance HandGestureShortcutInteractiveControl.BorderShape.CodingKeys;
  if (!lazy protocol witness table cache variable for type HandGestureShortcutInteractiveControl.BorderShape.CodingKeys and conformance HandGestureShortcutInteractiveControl.BorderShape.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HandGestureShortcutInteractiveControl.BorderShape.CodingKeys and conformance HandGestureShortcutInteractiveControl.BorderShape.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type HandGestureShortcutInteractiveControl.BorderShape.CodingKeys and conformance HandGestureShortcutInteractiveControl.BorderShape.CodingKeys;
  if (!lazy protocol witness table cache variable for type HandGestureShortcutInteractiveControl.BorderShape.CodingKeys and conformance HandGestureShortcutInteractiveControl.BorderShape.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HandGestureShortcutInteractiveControl.BorderShape.CodingKeys and conformance HandGestureShortcutInteractiveControl.BorderShape.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type HandGestureShortcutInteractiveControl.BorderShape.CodingKeys and conformance HandGestureShortcutInteractiveControl.BorderShape.CodingKeys;
  if (!lazy protocol witness table cache variable for type HandGestureShortcutInteractiveControl.BorderShape.CodingKeys and conformance HandGestureShortcutInteractiveControl.BorderShape.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HandGestureShortcutInteractiveControl.BorderShape.CodingKeys and conformance HandGestureShortcutInteractiveControl.BorderShape.CodingKeys);
  }
  return result;
}

void type metadata accessor for (@thick Any.Type, DecodingError.Context)()
{
  if (!lazy cache variable for type metadata for (@thick Any.Type, DecodingError.Context))
  {
    type metadata accessor for @thick Any.Type();
    type metadata accessor for DecodingError.Context();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    }
  }
}

unint64_t type metadata accessor for @thick Any.Type()
{
  unint64_t result = lazy cache variable for type metadata for @thick Any.Type;
  if (!lazy cache variable for type metadata for @thick Any.Type)
  {
    unint64_t result = swift_getExistentialMetatypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for @thick Any.Type);
  }
  return result;
}

void type metadata accessor for ViewInputFlagModifier<IsHandGestureShortcut>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void), uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v9 = a3();
    unint64_t v10 = a5(a1, a4, v9);
    if (!v11) {
      atomic_store(v10, a2);
    }
  }
}

unsigned char *storeEnumTagSinglePayload for HandGestureShortcutInteractiveControl.BorderShape.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *unint64_t result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1876CF050);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 4;
        break;
    }
  }
  return result;
}

void *type metadata accessor for HandGestureShortcutInteractiveControl.BorderShape.CodingKeys()
{
  return &unk_1ED477378;
}

void *type metadata accessor for HandGestureShortcutInteractiveControl.BorderShape.AutomaticCodingKeys()
{
  return &unk_1ED477398;
}

void *type metadata accessor for HandGestureShortcutInteractiveControl.BorderShape.CapsuleCodingKeys()
{
  return &unk_1ED4773B8;
}

void *type metadata accessor for HandGestureShortcutInteractiveControl.BorderShape.RoundedRectangleAutomaticCodingKeys()
{
  return &unk_1ED4773D8;
}

uint64_t getEnumTagSinglePayload for HandGestureShortcut.Storage(unsigned int *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if ((a2 + 1) >= 0x10000) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 1) < 0x100) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4) {
    return *a1;
  }
  if (v3 == 2) {
    return *(unsigned __int16 *)a1;
  }
  return *(unsigned __int8 *)a1;
}

unsigned char *storeEnumTagSinglePayload for HandGestureShortcut.Storage(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x1876CF1A4);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

void *type metadata accessor for HandGestureShortcutInteractiveControl.BorderShape.RoundedRectangleCodingKeys()
{
  return &unk_1ED477468;
}

void *type metadata accessor for HandGestureShortcutInteractiveControl.BorderShape.CircleCodingKeys()
{
  return &unk_1ED477488;
}

double one-time initialization function for defaultCornerRadius()
{
  if (one-time initialization token for componentCornerRadius != -1) {
    swift_once();
  }
  double result = *(double *)&static ClarityUIMetrics.componentCornerRadius;
  defaultCornerRadius = static ClarityUIMetrics.componentCornerRadius;
  return result;
}

double PlatterButtonStyleView.ClippingShape.effectiveDisplayCornerRadius.getter()
{
  if (*(unsigned char *)(v0 + 24)) {
    goto LABEL_5;
  }
  double v1 = *(double *)(v0 + 16);
  if (one-time initialization token for minimumDisplayCornerRadius != -1) {
    swift_once();
  }
  if (*(double *)&static ClarityUIMetrics.minimumDisplayCornerRadius > v1)
  {
LABEL_5:
    if (one-time initialization token for fallbackDisplayCornerRadius != -1) {
      swift_once();
    }
    return *(double *)&static ClarityUIMetrics.fallbackDisplayCornerRadius;
  }
  return v1;
}

void PlatterButtonStyleView.ClippingShape.actualShape.getter(uint64_t a1@<X8>)
{
  uint64_t v3 = *v1;
  if (*((unsigned char *)v1 + 8) == 1)
  {
    if (v3)
    {
      double v4 = PlatterButtonStyleView.ClippingShape.effectiveDisplayCornerRadius.getter();
      if (one-time initialization token for componentHorizontalPadding != -1) {
        swift_once();
      }
      double v5 = v4 - *(double *)&static ClarityUIMetrics.componentHorizontalPadding;
      *(unsigned char *)(a1 + 16) = 1;
    }
    else
    {
      if (one-time initialization token for defaultCornerRadius != -1) {
        swift_once();
      }
      double v5 = *(double *)&defaultCornerRadius;
      *(unsigned char *)(a1 + 16) = 1;
    }
    *(double *)a1 = v5;
    *(double *)(a1 + 8) = v5;
  }
  else
  {
    *(unsigned char *)(a1 + 16) = 1;
    *(void *)a1 = v3;
    *(void *)(a1 + 8) = v3;
  }
}

double PlatterButtonStyleView.ClippingShape.path(in:)@<D0>(uint64_t a1@<X8>)
{
  char v3 = *(unsigned char *)(v1 + 8);
  uint64_t v4 = *(void *)(v1 + 16);
  char v5 = *(unsigned char *)(v1 + 24);
  *(void *)&long long v9 = *(void *)v1;
  BYTE8(v9) = v3;
  *(void *)&long long v10 = v4;
  BYTE8(v10) = v5;
  PlatterButtonStyleView.ClippingShape.actualShape.getter((uint64_t)&v8);
  RoundedRectangle.path(in:)();
  double result = *(double *)&v9;
  long long v7 = v10;
  *(_OWORD *)a1 = v9;
  *(_OWORD *)(a1 + 16) = v7;
  *(unsigned char *)(a1 + 32) = v11;
  return result;
}

double PlatterButtonStyleView.ClippingShape.inset(by:)@<D0>(uint64_t a1@<X8>, double a2@<D0>)
{
  PlatterButtonStyleView.ClippingShape.actualShape.getter((uint64_t)&v6);
  char v4 = v7;
  double result = *(double *)&v6;
  *(_OWORD *)a1 = v6;
  *(unsigned char *)(a1 + 16) = v4;
  *(double *)(a1 + 24) = a2;
  return result;
}

double protocol witness for Shape.path(in:) in conformance PlatterButtonStyleView<A>.ClippingShape@<D0>(uint64_t a1@<X8>)
{
  PlatterButtonStyleView.ClippingShape.path(in:)((uint64_t)v4);
  double result = *(double *)v4;
  long long v3 = v4[1];
  *(_OWORD *)a1 = v4[0];
  *(_OWORD *)(a1 + 16) = v3;
  *(unsigned char *)(a1 + 32) = v5;
  return result;
}

uint64_t protocol witness for static Shape.role.getter in conformance PlatterButtonStyleView<A>.ClippingShape()
{
  return MEMORY[0x1F4100E78]();
}

uint64_t protocol witness for Shape.layoutDirectionBehavior.getter in conformance PlatterButtonStyleView<A>.ClippingShape()
{
  return MEMORY[0x1F4100E68]();
}

void (*protocol witness for Animatable.animatableData.modify in conformance PlatterButtonStyleView<A>.ClippingShape(void *a1))(void *a1)
{
  int v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = Animatable<>.animatableData.modify();
  return protocol witness for Animatable.animatableData.modify in conformance PlatterButtonStyleView<A>.ClippingShape;
}

uint64_t protocol witness for static Animatable._makeAnimatable(value:inputs:) in conformance PlatterButtonStyleView<A>.ClippingShape()
{
  return MEMORY[0x1F40FD038]();
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance PlatterButtonStyleView<A>.ClippingShape(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F4100E80](a1, a2, a3, WitnessTable);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance PlatterButtonStyleView<A>.ClippingShape(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F4100E58](a1, a2, a3, WitnessTable);
}

uint64_t protocol witness for View.body.getter in conformance PlatterButtonStyleView<A>.ClippingShape(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F4100E70](a1, WitnessTable);
}

uint64_t PlatterButtonStyleView.displayCornerRadius.getter(uint64_t a1)
{
  uint64_t v2 = v1 + *(int *)(a1 + 52);
  uint64_t v3 = *(void *)v2;
  uint64_t v4 = *(unsigned __int8 *)(v2 + 8);
  int v5 = *(unsigned __int8 *)(v2 + 9);
  outlined copy of Environment<CGFloat?>.Content(*(void *)v2, v4, *(unsigned char *)(v2 + 9));
  uint64_t v6 = specialized Environment.wrappedValue.getter(v3, v4 | (v5 << 8));
  outlined consume of Environment<CGFloat?>.Content(v3, v4, v5);
  return v6;
}

uint64_t PlatterButtonStyleView.padding.getter(uint64_t a1)
{
  if ((*(unsigned char *)(v1 + *(int *)(a1 + 48)) & 1) == 0) {
    return static EdgeInsets.zero.getter();
  }
  if (one-time initialization token for buttonVerticalPadding != -1) {
    swift_once();
  }
  static Edge.Set.vertical.getter();
  EdgeInsets.init(_:edges:)();
  if (one-time initialization token for buttonHorizontalPadding != -1) {
    swift_once();
  }
  static Edge.Set.horizontal.getter();
  return EdgeInsets.init(_:edges:)();
}

uint64_t PlatterButtonStyleView.body.getter@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t v39 = a2;
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(Spacer?, ButtonStyleConfiguration.Label, Spacer?)>>, _EnvironmentKeyWritingModifier<Font?>>, _PaddingLayout>, _FlexFrameLayout>(255);
  uint64_t v38 = a1;
  uint64_t v4 = *(void *)(a1 + 24);
  uint64_t v37 = *(void *)(a1 + 16);
  uint64_t v36 = v4;
  type metadata accessor for _BackgroundStyleModifier();
  type metadata accessor for ModifiedContent();
  type metadata accessor for _OverlayModifier<Color>();
  type metadata accessor for ModifiedContent();
  uint64_t v5 = MEMORY[0x1E4F414E0];
  type metadata accessor for _EnvironmentKeyWritingModifier<Color?>(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Color?>, (unint64_t *)&lazy cache variable for type metadata for Color?, MEMORY[0x1E4F414E0]);
  uint64_t v6 = type metadata accessor for ModifiedContent();
  uint64_t v7 = type metadata accessor for PlatterButtonStyleView.ClippingShape();
  uint64_t v54 = lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(Spacer?, ButtonStyleConfiguration.Label, Spacer?)>>, _EnvironmentKeyWritingModifier<Font?>>, _PaddingLayout>, _FlexFrameLayout> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(Spacer?, ButtonStyleConfiguration.Label, Spacer?)>>, _EnvironmentKeyWritingModifier<Font?>>, _PaddingLayout>, _FlexFrameLayout> and conformance <> ModifiedContent<A, B>, type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(Spacer?, ButtonStyleConfiguration.Label, Spacer?)>>, _EnvironmentKeyWritingModifier<Font?>>, _PaddingLayout>, _FlexFrameLayout>, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<HStack<TupleView<(Spacer?, ButtonStyleConfiguration.Label, Spacer?)>>, _EnvironmentKeyWritingModifier<Font?>>, _PaddingLayout> and conformance <> ModifiedContent<A, B>);
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v8 = MEMORY[0x1E4F3FBC0];
  uint64_t v52 = swift_getWitnessTable();
  uint64_t v53 = lazy protocol witness table accessor for type TupleView<(Spacer?, ButtonStyleConfiguration.Label, Spacer?)> and conformance TupleView<A>(&lazy protocol witness table cache variable for type _OverlayModifier<Color> and conformance _OverlayModifier<A>, (void (*)(uint64_t))type metadata accessor for _OverlayModifier<Color>);
  uint64_t v35 = v8;
  uint64_t v50 = swift_getWitnessTable();
  uint64_t v51 = _s7SwiftUI30_EnvironmentKeyWritingModifierVyAA4FontVSgGACyxGAA04ViewF0AAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<Color?> and conformance _EnvironmentKeyWritingModifier<A>, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Color?>, (unint64_t *)&lazy cache variable for type metadata for Color?, v5);
  uint64_t v34 = v6;
  uint64_t v32 = swift_getWitnessTable();
  uint64_t v33 = v7;
  uint64_t v31 = swift_getWitnessTable();
  uint64_t v46 = v6;
  uint64_t v47 = v7;
  uint64_t v48 = v32;
  uint64_t v49 = v31;
  uint64_t v9 = type metadata accessor for PlatterShadowedContent();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9);
  uint64_t v12 = (char *)&v30 - v11;
  uint64_t v13 = type metadata accessor for ModifiedContent();
  uint64_t v14 = *(void *)(v13 - 8);
  MEMORY[0x1F4188790](v13);
  uint64_t v16 = (char *)&v30 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v17);
  uint64_t v19 = (char *)&v30 - v18;
  uint64_t v20 = v2 + *(int *)(v38 + 44);
  uint64_t v21 = *(void *)v20;
  char v22 = *(unsigned char *)(v20 + 8);
  uint64_t v23 = PlatterButtonStyleView.displayCornerRadius.getter(v38);
  uint64_t v46 = v21;
  LOBYTE(v47) = v22;
  uint64_t v48 = v23;
  LOBYTE(v49) = v24 & 1;
  int v25 = *(unsigned __int8 *)(v2 + 2);
  uint64_t v41 = v37;
  uint64_t v42 = v36;
  uint64_t v43 = v2;
  PlatterShadowedContent.init(shape:isPressed:content:)((uint64_t)&v46, v25, (void (*)(uint64_t))partial apply for closure #1 in PlatterButtonStyleView.body.getter, (uint64_t)v40, v34, v33, (uint64_t)v12);
  static UnitPoint.center.getter();
  uint64_t v26 = swift_getWitnessTable();
  View.scaleEffect(_:anchor:)();
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  uint64_t v44 = v26;
  uint64_t v45 = MEMORY[0x1E4F3F6C8];
  swift_getWitnessTable();
  uint64_t v27 = *(void (**)(char *, char *, uint64_t))(v14 + 16);
  v27(v19, v16, v13);
  uint64_t v28 = *(void (**)(char *, uint64_t))(v14 + 8);
  v28(v16, v13);
  v27(v39, v19, v13);
  return ((uint64_t (*)(char *, uint64_t))v28)(v19, v13);
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(Spacer?, ButtonStyleConfiguration.Label, Spacer?)>>, _EnvironmentKeyWritingModifier<Font?>>, _PaddingLayout>, _FlexFrameLayout>(uint64_t a1)
{
}

void type metadata accessor for ModifiedContent<ModifiedContent<HStack<TupleView<(Spacer?, ButtonStyleConfiguration.Label, Spacer?)>>, _EnvironmentKeyWritingModifier<Font?>>, _PaddingLayout>(uint64_t a1)
{
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(Spacer?, ButtonStyleConfiguration.Label, Spacer?)>>, _EnvironmentKeyWritingModifier<Font?>>, _PaddingLayout>, _FlexFrameLayout>(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = type metadata accessor for ModifiedContent();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

void type metadata accessor for ModifiedContent<HStack<TupleView<(Spacer?, ButtonStyleConfiguration.Label, Spacer?)>>, _EnvironmentKeyWritingModifier<Font?>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<HStack<TupleView<(Spacer?, ButtonStyleConfiguration.Label, Spacer?)>>, _EnvironmentKeyWritingModifier<Font?>>)
  {
    type metadata accessor for HStack<TupleView<(Spacer?, ButtonStyleConfiguration.Label, Spacer?)>>();
    type metadata accessor for _EnvironmentKeyWritingModifier<Color?>(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Font?>, (unint64_t *)&lazy cache variable for type metadata for Font?, MEMORY[0x1E4F41390]);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<HStack<TupleView<(Spacer?, ButtonStyleConfiguration.Label, Spacer?)>>, _EnvironmentKeyWritingModifier<Font?>>);
    }
  }
}

void type metadata accessor for HStack<TupleView<(Spacer?, ButtonStyleConfiguration.Label, Spacer?)>>()
{
  if (!lazy cache variable for type metadata for HStack<TupleView<(Spacer?, ButtonStyleConfiguration.Label, Spacer?)>>)
  {
    type metadata accessor for TupleView<(Spacer?, ButtonStyleConfiguration.Label, Spacer?)>();
    lazy protocol witness table accessor for type TupleView<(Spacer?, ButtonStyleConfiguration.Label, Spacer?)> and conformance TupleView<A>(&lazy protocol witness table cache variable for type TupleView<(Spacer?, ButtonStyleConfiguration.Label, Spacer?)> and conformance TupleView<A>, (void (*)(uint64_t))type metadata accessor for TupleView<(Spacer?, ButtonStyleConfiguration.Label, Spacer?)>);
    unint64_t v0 = type metadata accessor for HStack();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for HStack<TupleView<(Spacer?, ButtonStyleConfiguration.Label, Spacer?)>>);
    }
  }
}

void type metadata accessor for TupleView<(Spacer?, ButtonStyleConfiguration.Label, Spacer?)>()
{
  if (!lazy cache variable for type metadata for TupleView<(Spacer?, ButtonStyleConfiguration.Label, Spacer?)>)
  {
    type metadata accessor for (Spacer?, ButtonStyleConfiguration.Label, Spacer?)();
    unint64_t v0 = type metadata accessor for TupleView();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TupleView<(Spacer?, ButtonStyleConfiguration.Label, Spacer?)>);
    }
  }
}

void type metadata accessor for (Spacer?, ButtonStyleConfiguration.Label, Spacer?)()
{
  if (!lazy cache variable for type metadata for (Spacer?, ButtonStyleConfiguration.Label, Spacer?))
  {
    type metadata accessor for Spacer?(255, &lazy cache variable for type metadata for Spacer?, MEMORY[0x1E4F415E0], MEMORY[0x1E4FBB718]);
    TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
    if (!v1) {
      atomic_store(TupleTypeMetadata3, (unint64_t *)&lazy cache variable for type metadata for (Spacer?, ButtonStyleConfiguration.Label, Spacer?));
    }
  }
}

void type metadata accessor for _EnvironmentKeyWritingModifier<Color?>(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t a4)
{
  if (!*a2)
  {
    type metadata accessor for Spacer?(255, a3, a4, MEMORY[0x1E4FBB718]);
    unint64_t v5 = type metadata accessor for _EnvironmentKeyWritingModifier();
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

void type metadata accessor for _OverlayModifier<Color>()
{
  if (!lazy cache variable for type metadata for _OverlayModifier<Color>)
  {
    unint64_t v0 = type metadata accessor for _OverlayModifier();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _OverlayModifier<Color>);
    }
  }
}

uint64_t type metadata accessor for PlatterButtonStyleView.ClippingShape()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<HStack<TupleView<(Spacer?, ButtonStyleConfiguration.Label, Spacer?)>>, _EnvironmentKeyWritingModifier<Font?>>, _PaddingLayout> and conformance <> ModifiedContent<A, B>()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(Spacer?, ButtonStyleConfiguration.Label, Spacer?)>>, _EnvironmentKeyWritingModifier<Font?>>, _PaddingLayout>, _FlexFrameLayout> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<HStack<TupleView<(Spacer?, ButtonStyleConfiguration.Label, Spacer?)>>, _EnvironmentKeyWritingModifier<Font?>>, _PaddingLayout> and conformance <> ModifiedContent<A, B>, type metadata accessor for ModifiedContent<ModifiedContent<HStack<TupleView<(Spacer?, ButtonStyleConfiguration.Label, Spacer?)>>, _EnvironmentKeyWritingModifier<Font?>>, _PaddingLayout>, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<HStack<TupleView<(Spacer?, ButtonStyleConfiguration.Label, Spacer?)>>, _EnvironmentKeyWritingModifier<Font?>> and conformance <> ModifiedContent<A, B>);
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(Spacer?, ButtonStyleConfiguration.Label, Spacer?)>>, _EnvironmentKeyWritingModifier<Font?>>, _PaddingLayout>, _FlexFrameLayout> and conformance <> ModifiedContent<A, B>(unint64_t *a1, void (*a2)(uint64_t), void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    a3();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<HStack<TupleView<(Spacer?, ButtonStyleConfiguration.Label, Spacer?)>>, _EnvironmentKeyWritingModifier<Font?>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<HStack<TupleView<(Spacer?, ButtonStyleConfiguration.Label, Spacer?)>>, _EnvironmentKeyWritingModifier<Font?>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<HStack<TupleView<(Spacer?, ButtonStyleConfiguration.Label, Spacer?)>>, _EnvironmentKeyWritingModifier<Font?>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<HStack<TupleView<(Spacer?, ButtonStyleConfiguration.Label, Spacer?)>>, _EnvironmentKeyWritingModifier<Font?>>();
    lazy protocol witness table accessor for type TupleView<(Spacer?, ButtonStyleConfiguration.Label, Spacer?)> and conformance TupleView<A>(&lazy protocol witness table cache variable for type HStack<TupleView<(Spacer?, ButtonStyleConfiguration.Label, Spacer?)>> and conformance HStack<A>, (void (*)(uint64_t))type metadata accessor for HStack<TupleView<(Spacer?, ButtonStyleConfiguration.Label, Spacer?)>>);
    _s7SwiftUI30_EnvironmentKeyWritingModifierVyAA4FontVSgGACyxGAA04ViewF0AAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<Font?> and conformance _EnvironmentKeyWritingModifier<A>, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Font?>, (unint64_t *)&lazy cache variable for type metadata for Font?, MEMORY[0x1E4F41390]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<HStack<TupleView<(Spacer?, ButtonStyleConfiguration.Label, Spacer?)>>, _EnvironmentKeyWritingModifier<Font?>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type TupleView<(Spacer?, ButtonStyleConfiguration.Label, Spacer?)> and conformance TupleView<A>(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t type metadata accessor for PlatterShadowedContent()
{
  return swift_getGenericMetadata();
}

uint64_t closure #1 in PlatterButtonStyleView.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  long long v59 = a3;
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(Spacer?, ButtonStyleConfiguration.Label, Spacer?)>>, _EnvironmentKeyWritingModifier<Font?>>, _PaddingLayout>, _FlexFrameLayout>(255);
  uint64_t v48 = v5;
  uint64_t v49 = type metadata accessor for _BackgroundStyleModifier();
  uint64_t v6 = type metadata accessor for ModifiedContent();
  uint64_t v52 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v8 = &v44[-v7];
  type metadata accessor for _OverlayModifier<Color>();
  uint64_t v50 = v6;
  uint64_t v9 = type metadata accessor for ModifiedContent();
  uint64_t v56 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9);
  uint64_t v51 = &v44[-v10];
  type metadata accessor for _EnvironmentKeyWritingModifier<Color?>(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Color?>, (unint64_t *)&lazy cache variable for type metadata for Color?, MEMORY[0x1E4F414E0]);
  uint64_t v57 = v9;
  uint64_t v54 = type metadata accessor for ModifiedContent();
  uint64_t v58 = *(void *)(v54 - 8);
  MEMORY[0x1F4188790](v54);
  uint64_t v53 = &v44[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1F4188790](v12);
  char v55 = &v44[-v13];
  uint64_t v46 = static VerticalAlignment.center.getter();
  uint64_t v47 = a2;
  uint64_t v14 = type metadata accessor for PlatterButtonStyleView();
  char v15 = *(unsigned char *)(a1 + *(int *)(v14 + 48));
  if (one-time initialization token for clarityUIButtonTitle != -1) {
    swift_once();
  }
  uint64_t v16 = static Font.clarityUIButtonTitle;
  uint64_t KeyPath = swift_getKeyPath();
  swift_retain();
  uint64_t v60 = v14;
  PlatterButtonStyleView.padding.getter(v14);
  uint64_t v19 = v18;
  uint64_t v21 = v20;
  uint64_t v23 = v22;
  uint64_t v25 = v24;
  int v45 = static Edge.Set.all.getter();
  if (one-time initialization token for minimumComponentHeight != -1) {
    swift_once();
  }
  static Alignment.center.getter();
  _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)();
  char v106 = 1;
  char v105 = v15 ^ 1;
  char v104 = v15 ^ 1;
  char v103 = 0;
  char v102 = v108;
  char v101 = v110;
  char v100 = v112;
  char v99 = v114;
  char v98 = v116;
  char v97 = v118;
  uint64_t v67 = v46;
  uint64_t v68 = 0;
  char v69 = 1;
  uint64_t v70 = 0;
  char v71 = 0;
  uint64_t v73 = 0;
  char v74 = 0;
  char v75 = v15 ^ 1;
  uint64_t v76 = KeyPath;
  uint64_t v77 = v16;
  char v78 = v45;
  uint64_t v79 = v19;
  uint64_t v80 = v21;
  uint64_t v81 = v23;
  uint64_t v82 = v25;
  char v83 = 0;
  uint64_t v84 = v107;
  char v85 = v108;
  uint64_t v86 = v109;
  char v87 = v110;
  uint64_t v88 = v111;
  char v89 = v112;
  uint64_t v90 = v113;
  char v91 = v114;
  uint64_t v92 = v115;
  char v93 = v116;
  uint64_t v94 = v117;
  char v95 = v118;
  long long v96 = v119;
  char v72 = v15 ^ 1;
  static Edge.Set.all.getter();
  uint64_t v26 = lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(Spacer?, ButtonStyleConfiguration.Label, Spacer?)>>, _EnvironmentKeyWritingModifier<Font?>>, _PaddingLayout>, _FlexFrameLayout> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(Spacer?, ButtonStyleConfiguration.Label, Spacer?)>>, _EnvironmentKeyWritingModifier<Font?>>, _PaddingLayout>, _FlexFrameLayout> and conformance <> ModifiedContent<A, B>, type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(Spacer?, ButtonStyleConfiguration.Label, Spacer?)>>, _EnvironmentKeyWritingModifier<Font?>>, _PaddingLayout>, _FlexFrameLayout>, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<HStack<TupleView<(Spacer?, ButtonStyleConfiguration.Label, Spacer?)>>, _EnvironmentKeyWritingModifier<Font?>>, _PaddingLayout> and conformance <> ModifiedContent<A, B>);
  View.background<A>(_:ignoresSafeAreaEdges:)();
  swift_release();
  uint64_t v27 = swift_release();
  uint64_t v48 = v44;
  MEMORY[0x1F4188790](v27);
  static Alignment.center.getter();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v65 = v26;
  uint64_t v66 = WitnessTable;
  uint64_t v29 = v50;
  uint64_t v30 = swift_getWitnessTable();
  uint64_t v31 = v51;
  uint64_t v32 = MEMORY[0x1E4F414E0];
  View.overlay<A>(alignment:content:)();
  (*(void (**)(unsigned char *, uint64_t))(v52 + 8))(v8, v29);
  uint64_t v33 = lazy protocol witness table accessor for type TupleView<(Spacer?, ButtonStyleConfiguration.Label, Spacer?)> and conformance TupleView<A>(&lazy protocol witness table cache variable for type _OverlayModifier<Color> and conformance _OverlayModifier<A>, (void (*)(uint64_t))type metadata accessor for _OverlayModifier<Color>);
  uint64_t v63 = v30;
  uint64_t v64 = v33;
  uint64_t v34 = v57;
  uint64_t v35 = swift_getWitnessTable();
  uint64_t v36 = v53;
  View.foregroundColor(_:)();
  (*(void (**)(unsigned char *, uint64_t))(v56 + 8))(v31, v34);
  uint64_t v37 = _s7SwiftUI30_EnvironmentKeyWritingModifierVyAA4FontVSgGACyxGAA04ViewF0AAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<Color?> and conformance _EnvironmentKeyWritingModifier<A>, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Color?>, (unint64_t *)&lazy cache variable for type metadata for Color?, v32);
  uint64_t v61 = v35;
  uint64_t v62 = v37;
  uint64_t v38 = v54;
  swift_getWitnessTable();
  uint64_t v39 = v58;
  uint64_t v40 = *(void (**)(unsigned char *, unsigned char *, uint64_t))(v58 + 16);
  uint64_t v41 = v55;
  v40(v55, v36, v38);
  uint64_t v42 = *(void (**)(unsigned char *, uint64_t))(v39 + 8);
  v42(v36, v38);
  v40(v59, v41, v38);
  return ((uint64_t (*)(unsigned char *, uint64_t))v42)(v41, v38);
}

uint64_t partial apply for closure #1 in PlatterButtonStyleView.body.getter@<X0>(unsigned char *a1@<X8>)
{
  return closure #1 in PlatterButtonStyleView.body.getter(*(void *)(v1 + 32), *(void *)(v1 + 16), a1);
}

uint64_t closure #2 in closure #1 in PlatterButtonStyleView.body.getter@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  if (*(unsigned char *)(a1 + 2) == 1)
  {
    if (one-time initialization token for clarityUIPressedButtonOverlay != -1) {
      swift_once();
    }
    uint64_t result = swift_retain();
  }
  else
  {
    uint64_t result = static Color.clear.getter();
  }
  *a2 = result;
  return result;
}

uint64_t PlatterShadowedContent.init(shape:isPressed:content:)@<X0>(uint64_t a1@<X0>, int a2@<W1>, void (*a3)(uint64_t)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v30 = a4;
  uint64_t v31 = a3;
  int v29 = a2;
  uint64_t v28 = a1;
  uint64_t v10 = *(void *)(a5 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v12 = (char *)&v28 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v32 = v13;
  uint64_t v33 = v14;
  uint64_t v34 = v15;
  uint64_t v35 = v16;
  uint64_t v17 = (int *)type metadata accessor for PlatterShadowedContent();
  uint64_t v18 = v17[15];
  *(void *)(a7 + v18) = static Color.black.getter();
  *(_DWORD *)(a7 + v17[16]) = 1045220557;
  *(void *)(a7 + v17[17]) = 0x4000000000000000;
  *(void *)(a7 + v17[18]) = 0xBFF0000000000000;
  uint64_t v19 = v17[19];
  *(void *)(a7 + v19) = static Color.white.getter();
  *(_DWORD *)(a7 + v17[20]) = 1045220557;
  *(void *)(a7 + v17[21]) = 0x3FF0000000000000;
  *(void *)(a7 + v17[22]) = 0x3FF0000000000000;
  uint64_t v20 = v17[23];
  static Color.white.getter();
  uint64_t v21 = Color.opacity(_:)();
  swift_release();
  *(void *)(a7 + v20) = v21;
  uint64_t v22 = v17[24];
  static Color.black.getter();
  uint64_t v23 = Color.opacity(_:)();
  swift_release();
  *(void *)(a7 + v22) = v23;
  *(void *)(a7 + v17[25]) = 0x3FF0000000000000;
  uint64_t v24 = *(void *)(a6 - 8);
  uint64_t v25 = v28;
  uint64_t v26 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v24 + 16))(a7, v28, a6);
  *(unsigned char *)(a7 + v17[13]) = v29;
  v31(v26);
  (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v25, a6);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v10 + 32))(a7 + v17[14], v12, a5);
}

uint64_t PlatterButtonStyleView.init(configuration:background:foregroundColor:type:includesPadding:)@<X0>(char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, char a5@<W4>, uint64_t a6@<X5>, unsigned char *a7@<X8>)
{
  char v10 = *a1;
  char v11 = a1[1];
  char v12 = a1[2];
  uint64_t v13 = *a4;
  char v14 = *((unsigned char *)a4 + 8);
  uint64_t v15 = (int *)type metadata accessor for PlatterButtonStyleView();
  uint64_t v16 = &a7[v15[13]];
  *(void *)uint64_t v16 = swift_getKeyPath();
  *((_WORD *)v16 + 4) = 0;
  *a7 = v10;
  a7[1] = v11;
  a7[2] = v12;
  uint64_t result = (*(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(*(void *)(a6 - 8) + 32))(&a7[v15[9]], a2, a6);
  *(void *)&a7[v15[10]] = a3;
  uint64_t v18 = &a7[v15[11]];
  *(void *)uint64_t v18 = v13;
  v18[8] = v14;
  a7[v15[12]] = a5;
  return result;
}

uint64_t type metadata accessor for PlatterButtonStyleView()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t PlatterShadowedContent.body.getter@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  char v91 = a2;
  uint64_t v3 = *(void *)(a1 + 40);
  uint64_t v4 = *(void *)(a1 + 24);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v87 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v82 = (char *)v62 - v6;
  uint64_t v7 = *(void *)(swift_getAssociatedConformanceWitness() + 8);
  uint64_t v88 = AssociatedTypeWitness;
  _OWORD v62[2] = v7;
  uint64_t v8 = type metadata accessor for _ShadowView();
  uint64_t v89 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  uint64_t v86 = (uint64_t)v62 - v9;
  uint64_t v10 = *(void *)(a1 + 16);
  uint64_t v84 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v11);
  uint64_t v13 = (char *)v62 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v70 = *(void *)(v3 + 8);
  type metadata accessor for _ShadowView();
  type metadata accessor for ModifiedContent();
  swift_getTupleTypeMetadata2();
  type metadata accessor for TupleView();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v72 = type metadata accessor for _OverlayModifier();
  uint64_t v14 = type metadata accessor for ModifiedContent();
  uint64_t v74 = *(void *)(v14 - 8);
  MEMORY[0x1F4188790](v14);
  uint64_t v65 = (char *)v62 - v15;
  uint64_t v110 = v4;
  uint64_t v111 = MEMORY[0x1E4F3F990];
  uint64_t v112 = MEMORY[0x1E4F417F8];
  uint64_t v113 = v3;
  uint64_t v114 = MEMORY[0x1E4F3F980];
  uint64_t v115 = MEMORY[0x1E4F417F0];
  uint64_t v68 = type metadata accessor for StrokeBorderShapeView();
  uint64_t v67 = swift_getWitnessTable();
  uint64_t v71 = type metadata accessor for _OverlayModifier();
  uint64_t v66 = type metadata accessor for ModifiedContent();
  uint64_t v73 = *(void *)(v66 - 8);
  MEMORY[0x1F4188790](v66);
  uint64_t v64 = (char *)v62 - v16;
  v62[1] = type metadata accessor for _ClipEffect();
  uint64_t v17 = type metadata accessor for ModifiedContent();
  uint64_t v79 = *(void *)(v17 - 8);
  MEMORY[0x1F4188790](v17);
  uint64_t v63 = (char *)v62 - v18;
  uint64_t v90 = v8;
  uint64_t v19 = type metadata accessor for _BackgroundModifier();
  uint64_t v80 = v17;
  uint64_t v76 = v19;
  uint64_t v83 = type metadata accessor for ModifiedContent();
  uint64_t v81 = *(void *)(v83 - 8);
  MEMORY[0x1F4188790](v83);
  uint64_t v77 = (char *)v62 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v22 = MEMORY[0x1F4188790](v21);
  char v78 = (char *)v62 - v23;
  uint64_t v24 = a1;
  uint64_t v25 = v75;
  uint64_t v26 = v75 + *(int *)(a1 + 56);
  uint64_t v27 = v84;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v84 + 16))(v13, v26, v10, v22);
  uint64_t v97 = v10;
  uint64_t v98 = v4;
  uint64_t v85 = v24;
  uint64_t v28 = *(void *)(v24 + 32);
  uint64_t v99 = v28;
  uint64_t v100 = v3;
  uint64_t v101 = v25;
  static Alignment.center.getter();
  int v29 = v65;
  View.overlay<A>(alignment:content:)();
  uint64_t v30 = v27;
  uint64_t v31 = v4;
  (*(void (**)(char *, uint64_t))(v30 + 8))(v13, v10);
  uint64_t v92 = v10;
  uint64_t v93 = v4;
  uint64_t v94 = v28;
  uint64_t v84 = v3;
  uint64_t v95 = v3;
  uint64_t v96 = v25;
  static Alignment.center.getter();
  uint64_t v32 = swift_getWitnessTable();
  uint64_t v108 = v28;
  uint64_t v109 = v32;
  uint64_t v33 = swift_getWitnessTable();
  uint64_t v34 = v64;
  View.overlay<A>(alignment:content:)();
  (*(void (**)(char *, uint64_t))(v74 + 8))(v29, v14);
  uint64_t v35 = v63;
  uint64_t v36 = swift_getWitnessTable();
  uint64_t v106 = v33;
  uint64_t v107 = v36;
  uint64_t v37 = v25;
  uint64_t v38 = v66;
  uint64_t v39 = swift_getWitnessTable();
  View.clipShape<A>(_:style:)();
  (*(void (**)(char *, uint64_t))(v73 + 8))(v34, v38);
  if (one-time initialization token for buttonShadowSpread != -1) {
    swift_once();
  }
  uint64_t v40 = v82;
  (*(void (**)(uint64_t, double))(v84 + 32))(v31, -*(double *)&static ClarityUIMetrics.buttonShadowSpread);
  uint64_t v41 = v40;
  if (one-time initialization token for clarityUIButtonShadowColor != -1) {
    swift_once();
  }
  uint64_t v42 = static Color.clarityUIButtonShadowColor;
  uint64_t v43 = v85;
  double v44 = 0.0;
  if (*(unsigned char *)(v37 + *(int *)(v85 + 52)))
  {
    double v45 = 0.0;
    double v46 = 0.0;
  }
  else
  {
    if (one-time initialization token for buttonShadowRadius == -1)
    {
      double v46 = *(double *)&static ClarityUIMetrics.buttonShadowRadius;
    }
    else
    {
      swift_once();
      double v46 = *(double *)&static ClarityUIMetrics.buttonShadowRadius;
      if (*(unsigned char *)(v37 + *(int *)(v43 + 52)))
      {
        double v45 = 0.0;
        goto LABEL_12;
      }
    }
    if (one-time initialization token for buttonShadowOffset == -1)
    {
      double v45 = *(double *)&static ClarityUIMetrics.buttonShadowOffset;
    }
    else
    {
      swift_once();
      double v45 = *(double *)&static ClarityUIMetrics.buttonShadowOffset;
      if (*(unsigned char *)(v37 + *(int *)(v43 + 52))) {
        goto LABEL_12;
      }
    }
    double v44 = *((double *)&static ClarityUIMetrics.buttonShadowOffset + 1);
  }
LABEL_12:
  uint64_t v47 = v86;
  uint64_t v48 = v42;
  uint64_t v49 = v88;
  Shape.fillShadow(color:radius:x:y:)(v48, v88, v86, v46, v45, v44);
  (*(void (**)(char *, uint64_t))(v87 + 8))(v41, v49);
  static Alignment.center.getter();
  uint64_t v50 = swift_getWitnessTable();
  uint64_t v104 = v39;
  uint64_t v105 = v50;
  uint64_t v51 = v80;
  uint64_t v52 = swift_getWitnessTable();
  uint64_t v53 = v77;
  uint64_t v54 = v90;
  View.background<A>(_:alignment:)();
  (*(void (**)(uint64_t, uint64_t))(v89 + 8))(v47, v54);
  (*(void (**)(char *, uint64_t))(v79 + 8))(v35, v51);
  uint64_t v55 = swift_getWitnessTable();
  uint64_t v102 = v52;
  uint64_t v103 = v55;
  uint64_t v56 = v83;
  swift_getWitnessTable();
  uint64_t v57 = v81;
  uint64_t v58 = *(void (**)(char *, char *, uint64_t))(v81 + 16);
  long long v59 = v78;
  v58(v78, v53, v56);
  uint64_t v60 = *(void (**)(char *, uint64_t))(v57 + 8);
  v60(v53, v56);
  v58(v91, v59, v56);
  return ((uint64_t (*)(char *, uint64_t))v60)(v59, v56);
}

uint64_t closure #1 in PlatterShadowedContent.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t WitnessTable = a4;
  uint64_t v44 = a6;
  uint64_t v39 = *(void *)(a5 + 8);
  uint64_t v45 = type metadata accessor for _ShadowView();
  uint64_t v47 = *(void *)(v45 - 8);
  MEMORY[0x1F4188790](v45);
  uint64_t v11 = (char *)&v37 - v10;
  uint64_t v12 = type metadata accessor for ModifiedContent();
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x1F4188790](v12);
  uint64_t v43 = (char *)&v37 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v15);
  uint64_t v42 = (char *)&v37 - v16;
  MEMORY[0x1F4188790](v17);
  uint64_t v19 = (char *)&v37 - v18;
  MEMORY[0x1F4188790](v20);
  double v46 = (char *)&v37 - v21;
  *(void *)uint64_t v64 = a2;
  *(void *)&v64[8] = a3;
  uint64_t v22 = a3;
  uint64_t v40 = a3;
  *(void *)&v64[16] = WitnessTable;
  *(void *)&v64[24] = a5;
  uint64_t v23 = (int *)type metadata accessor for PlatterShadowedContent();
  Shape.fillShadow(color:radius:x:y:)(*(void *)(a1 + v23[15]), v22, (uint64_t)v11, *(double *)(a1 + v23[17]), 0.0, *(double *)(a1 + v23[18]));
  float v24 = *(float *)(a1 + v23[16]);
  *(_OWORD *)&v64[4] = 0uLL;
  *(_OWORD *)&v64[20] = 0x3F80000000000000uLL;
  uint64_t v65 = 0;
  uint64_t v66 = 0x3F80000000000000;
  uint64_t v67 = 0;
  uint64_t v68 = 0;
  *(_DWORD *)uint64_t v64 = 1065353216;
  int v69 = 0;
  float v70 = -v24;
  float v71 = v24;
  uint64_t v25 = v45;
  View._colorMatrix(_:)();
  uint64_t v26 = *(void (**)(char *, uint64_t))(v47 + 8);
  v47 += 8;
  uint64_t v38 = v26;
  v26(v11, v25);
  v51[2] = &protocol witness table for _ShadowView<A>;
  _OWORD v51[3] = MEMORY[0x1E4F40390];
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v27 = *(void (**)(char *, char *, uint64_t))(v13 + 16);
  v27(v46, v19, v12);
  uint64_t v28 = *(void (**)(char *, uint64_t))(v13 + 8);
  v28(v19, v12);
  Shape.fillShadow(color:radius:x:y:)(*(void *)(a1 + v23[19]), v40, (uint64_t)v11, *(double *)(a1 + v23[21]), 0.0, *(double *)(a1 + v23[22]));
  float v29 = *(float *)(a1 + v23[20]);
  int v52 = 1065353216;
  uint64_t v54 = 0;
  uint64_t v53 = 0;
  uint64_t v55 = 0x3F80000000000000;
  uint64_t v57 = 0;
  uint64_t v56 = 0;
  uint64_t v58 = 0x3F80000000000000;
  uint64_t v60 = 0;
  uint64_t v59 = 0;
  int v61 = 0;
  float v62 = -v29;
  float v63 = v29;
  uint64_t v30 = v42;
  uint64_t v31 = v45;
  View._colorMatrix(_:)();
  v38(v11, v31);
  uint64_t v32 = v30;
  v27(v19, v30, v12);
  v28(v30, v12);
  uint64_t v33 = v30;
  uint64_t v34 = v46;
  v27(v33, v46, v12);
  v51[0] = v32;
  uint64_t v35 = v43;
  v27(v43, v19, v12);
  v51[1] = v35;
  v50[0] = v12;
  v50[1] = v12;
  uint64_t v48 = WitnessTable;
  uint64_t v49 = WitnessTable;
  static ViewBuilder.buildBlock<each A>(_:)((uint64_t)v51, 2uLL, (uint64_t)v50);
  v28(v19, v12);
  v28(v34, v12);
  v28(v35, v12);
  return ((uint64_t (*)(char *, uint64_t))v28)(v32, v12);
}

uint64_t closure #2 in PlatterShadowedContent.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, char *a6@<X8>)
{
  uint64_t v35 = a6;
  uint64_t v36 = a3;
  uint64_t v37 = MEMORY[0x1E4F3F990];
  uint64_t v34 = a3;
  uint64_t v38 = MEMORY[0x1E4F417F8];
  uint64_t v39 = a5;
  uint64_t v33 = a5;
  uint64_t v40 = MEMORY[0x1E4F3F980];
  uint64_t v41 = MEMORY[0x1E4F417F0];
  uint64_t v11 = type metadata accessor for StrokeBorderShapeView();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x1F4188790](v11);
  uint64_t v14 = (char *)&v32 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v15);
  uint64_t v17 = (char *)&v32 - v16;
  type metadata accessor for Spacer?(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Color>, MEMORY[0x1E4F414E0], MEMORY[0x1E4FBBE00]);
  uint64_t v18 = swift_allocObject();
  *(_OWORD *)(v18 + 16) = xmmword_18834BB70;
  uint64_t v36 = a2;
  uint64_t v37 = a3;
  uint64_t v38 = a4;
  uint64_t v39 = a5;
  uint64_t v19 = type metadata accessor for PlatterShadowedContent();
  *(void *)(v18 + 32) = *(void *)(a1 + *(int *)(v19 + 92));
  *(void *)(v18 + 40) = *(void *)(a1 + *(int *)(v19 + 96));
  uint64_t v36 = v18;
  specialized Array._endMutation()();
  uint64_t v20 = v36;
  swift_retain();
  swift_retain();
  static UnitPoint.top.getter();
  uint64_t v22 = v21;
  uint64_t v24 = v23;
  static UnitPoint.bottom.getter();
  uint64_t v26 = v25;
  uint64_t v28 = v27;
  uint64_t v36 = MEMORY[0x18C114170](v20);
  uint64_t v37 = v22;
  uint64_t v38 = v24;
  uint64_t v39 = v26;
  uint64_t v40 = v28;
  InsettableShape.strokeBorder<A>(_:lineWidth:antialiased:)((uint64_t)&v36, 1, v34, MEMORY[0x1E4F3F990], v33, MEMORY[0x1E4F3F980], (uint64_t)v14);
  swift_bridgeObjectRelease();
  swift_getWitnessTable();
  float v29 = *(void (**)(char *, char *, uint64_t))(v12 + 16);
  v29(v17, v14, v11);
  uint64_t v30 = *(void (**)(char *, uint64_t))(v12 + 8);
  v30(v14, v11);
  v29(v35, v17, v11);
  return ((uint64_t (*)(char *, uint64_t))v30)(v17, v11);
}

uint64_t InsettableShape.strokeBorder<A>(_:lineWidth:antialiased:)@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  StrokeStyle.init(lineWidth:lineCap:lineJoin:miterLimit:dash:dashPhase:)();
  InsettableShape.strokeBorder<A>(_:style:antialiased:)(a1, v15, a2, a3, a4, a5, a6, a7);
  return outlined release of StrokeStyle((uint64_t)v15);
}

uint64_t key path getter for EnvironmentValues.displayCornerRadius : EnvironmentValues@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = EnvironmentValues.displayCornerRadius.getter();
  *(void *)a1 = result;
  *(unsigned char *)(a1 + 8) = v3 & 1;
  return result;
}

uint64_t sub_1876D27CC@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = EnvironmentValues.displayCornerRadius.getter();
  *(void *)a1 = result;
  *(unsigned char *)(a1 + 8) = v3 & 1;
  return result;
}

uint64_t key path setter for EnvironmentValues.displayCornerRadius : EnvironmentValues()
{
  return EnvironmentValues.displayCornerRadius.setter();
}

uint64_t sub_1876D2840()
{
  return EnvironmentValues.displayCornerRadius.setter();
}

uint64_t partial apply for closure #1 in PlatterShadowedContent.body.getter()
{
  return partial apply for closure #1 in PlatterShadowedContent.body.getter((uint64_t (*)(void, void, void, void, void))closure #1 in PlatterShadowedContent.body.getter);
}

uint64_t partial apply for closure #2 in PlatterShadowedContent.body.getter()
{
  return partial apply for closure #1 in PlatterShadowedContent.body.getter((uint64_t (*)(void, void, void, void, void))closure #2 in PlatterShadowedContent.body.getter);
}

uint64_t partial apply for closure #1 in PlatterShadowedContent.body.getter(uint64_t (*a1)(void, void, void, void, void))
{
  return a1(v1[6], v1[2], v1[3], v1[4], v1[5]);
}

uint64_t associated type witness table accessor for View.Body : View in PlatterButtonStyleView<A>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for View.Body : View in PlatterShadowedContent<A, B>()
{
  return swift_getOpaqueTypeConformance2();
}

ValueMetadata *type metadata accessor for PlatterButtonType()
{
  return &type metadata for PlatterButtonType;
}

uint64_t type metadata completion function for PlatterButtonStyleView()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

void *initializeBufferWithCopyOfBuffer for PlatterButtonStyleView(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  char v3 = (void *)a1;
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v5 = *(_DWORD *)(v4 + 80);
  uint64_t v6 = *(void *)(v4 + 64) + 7;
  if (v5 > 7
    || (*(_DWORD *)(v4 + 80) & 0x100000) != 0
    || ((((((v6 + ((v5 + 3) & ~v5)) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 17) & 0xFFFFFFFFFFFFFFF8)
     + 10 > 0x18)
  {
    uint64_t v9 = *a2;
    void *v3 = *a2;
    char v3 = (void *)(v9 + ((v5 & 0xF8 ^ 0x1F8) & (v5 + 16)));
    swift_retain();
  }
  else
  {
    *(_WORD *)a1 = *(_WORD *)a2;
    *(unsigned char *)(a1 + 2) = *((unsigned char *)a2 + 2);
    uint64_t v10 = (a1 + v5 + 3) & ~v5;
    uint64_t v11 = ((unint64_t)a2 + v5 + 3) & ~v5;
    (*(void (**)(uint64_t, uint64_t))(v4 + 16))(v10, v11);
    uint64_t v12 = (void *)((v6 + v11) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v13 = (void *)((v6 + v10) & 0xFFFFFFFFFFFFFFF8);
    *uint64_t v13 = *v12;
    unint64_t v14 = ((unint64_t)v13 + 15) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v15 = ((unint64_t)v12 + 15) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v16 = *(void *)v15;
    *(unsigned char *)(v14 + 8) = *(unsigned char *)(v15 + 8);
    *(void *)unint64_t v14 = v16;
    *(unsigned char *)(v14 + 9) = *(unsigned char *)(v15 + 9);
    unint64_t v17 = (v14 + 17) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v18 = (v15 + 17) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v19 = *(void *)v18;
    LOBYTE(v11) = *(unsigned char *)(v18 + 9);
    uint64_t v20 = *(unsigned __int8 *)(v18 + 8);
    swift_retain();
    outlined copy of Environment<CGFloat?>.Content(v19, v20, v11);
    *(void *)unint64_t v17 = v19;
    *(unsigned char *)(v17 + 8) = v20;
    *(unsigned char *)(v17 + 9) = v11;
  }
  return v3;
}

uint64_t destroy for PlatterButtonStyleView(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(*(void *)(a2 + 16) - 8);
  uint64_t v3 = v2 + 8;
  unint64_t v4 = (a1 + *(unsigned __int8 *)(v2 + 80) + 3) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  (*(void (**)(unint64_t))(v2 + 8))(v4);
  unint64_t v5 = ((*(void *)(v3 + 56) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 15;
  swift_release();
  unint64_t v6 = ((v5 & 0xFFFFFFFFFFFFFFF8) + 17) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v7 = *(void *)v6;
  char v8 = *(unsigned char *)(v6 + 9);
  uint64_t v9 = *(unsigned __int8 *)(v6 + 8);

  return outlined consume of Environment<CGFloat?>.Content(v7, v9, v8);
}

uint64_t initializeWithCopy for PlatterButtonStyleView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_WORD *)a1 = *(_WORD *)a2;
  *(unsigned char *)(a1 + 2) = *(unsigned char *)(a2 + 2);
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v5 = v4 + 16;
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v7 = (v6 + 3 + a1) & ~v6;
  uint64_t v8 = (v6 + 3 + a2) & ~v6;
  (*(void (**)(uint64_t, uint64_t))(v4 + 16))(v7, v8);
  uint64_t v9 = *(void *)(v5 + 48) + 7;
  unint64_t v10 = v9 + v7;
  uint64_t v11 = (void *)((v9 + v8) & 0xFFFFFFFFFFFFFFF8);
  v10 &= 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v10 = *v11;
  unint64_t v12 = (v10 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v13 = ((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFFFF8;
  char v14 = *(unsigned char *)(v13 + 8);
  *(void *)unint64_t v12 = *(void *)v13;
  *(unsigned char *)(v12 + 8) = v14;
  *(unsigned char *)(v12 + 9) = *(unsigned char *)(v13 + 9);
  unint64_t v15 = (v12 + 17) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v16 = (v13 + 17) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v17 = *(void *)v16;
  LOBYTE(v8) = *(unsigned char *)(v16 + 9);
  uint64_t v18 = *(unsigned __int8 *)(v16 + 8);
  swift_retain();
  outlined copy of Environment<CGFloat?>.Content(v17, v18, v8);
  *(void *)unint64_t v15 = v17;
  *(unsigned char *)(v15 + 8) = v18;
  *(unsigned char *)(v15 + 9) = v8;
  return a1;
}

uint64_t assignWithCopy for PlatterButtonStyleView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_WORD *)a1 = *(_WORD *)a2;
  *(unsigned char *)(a1 + 2) = *(unsigned char *)(a2 + 2);
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v5 = v4 + 24;
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v7 = (v6 + 3 + a1) & ~v6;
  uint64_t v8 = (v6 + 3 + a2) & ~v6;
  (*(void (**)(uint64_t, uint64_t))(v4 + 24))(v7, v8);
  uint64_t v9 = *(void *)(v5 + 40) + 7;
  unint64_t v10 = (void *)((v9 + v7) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v11 = v9 + v8;
  unint64_t v12 = (v11 & 0xFFFFFFFFFFFFFFF8) + 15;
  *unint64_t v10 = *(void *)(v11 & 0xFFFFFFFFFFFFFFF8);
  swift_retain();
  swift_release();
  unint64_t v13 = ((unint64_t)v10 + 15) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v14 = *(void *)(v12 & 0xFFFFFFFFFFFFFFF8);
  *(unsigned char *)(v13 + 8) = *(unsigned char *)((v12 & 0xFFFFFFFFFFFFFFF8) + 8);
  *(void *)unint64_t v13 = v14;
  *(unsigned char *)(v13 + 9) = *(unsigned char *)((v12 & 0xFFFFFFFFFFFFFFF8) + 9);
  unint64_t v15 = (v13 + 17) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v16 = ((v12 & 0xFFFFFFFFFFFFFFF8) + 17) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v17 = *(void *)v16;
  LOBYTE(v12) = *(unsigned char *)(v16 + 9);
  LOBYTE(v10) = *(unsigned char *)(v16 + 8);
  outlined copy of Environment<CGFloat?>.Content(*(void *)v16, v10, v12);
  uint64_t v18 = *(void *)v15;
  char v19 = *(unsigned char *)(v15 + 9);
  *(void *)unint64_t v15 = v17;
  uint64_t v20 = *(unsigned __int8 *)(v15 + 8);
  *(unsigned char *)(v15 + 8) = (_BYTE)v10;
  *(unsigned char *)(v15 + 9) = v12;
  outlined consume of Environment<CGFloat?>.Content(v18, v20, v19);
  return a1;
}

uint64_t initializeWithTake for PlatterButtonStyleView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_WORD *)a1 = *(_WORD *)a2;
  *(unsigned char *)(a1 + 2) = *(unsigned char *)(a2 + 2);
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v5 = v4 + 32;
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v7 = (v6 + 3 + a1) & ~v6;
  uint64_t v8 = (v6 + 3 + a2) & ~v6;
  (*(void (**)(uint64_t, uint64_t))(v4 + 32))(v7, v8);
  uint64_t v9 = *(void *)(v5 + 32) + 7;
  unint64_t v10 = (void *)((v9 + v7) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v11 = (void *)((v9 + v8) & 0xFFFFFFFFFFFFFFF8);
  *unint64_t v10 = *v11;
  unint64_t v12 = ((unint64_t)v10 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v13 = ((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFFFF8;
  char v14 = *(unsigned char *)(v13 + 8);
  *(void *)unint64_t v12 = *(void *)v13;
  *(unsigned char *)(v12 + 8) = v14;
  *(unsigned char *)(v12 + 9) = *(unsigned char *)(v13 + 9);
  unint64_t v15 = (v12 + 17) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v16 = (v13 + 17) & 0xFFFFFFFFFFFFFFF8;
  __int16 v17 = *(_WORD *)(v16 + 8);
  *(void *)unint64_t v15 = *(void *)v16;
  *(_WORD *)(v15 + 8) = v17;
  return a1;
}

uint64_t assignWithTake for PlatterButtonStyleView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_WORD *)a1 = *(_WORD *)a2;
  *(unsigned char *)(a1 + 2) = *(unsigned char *)(a2 + 2);
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v5 = v4 + 40;
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v7 = (v6 + 3 + a1) & ~v6;
  uint64_t v8 = (v6 + 3 + a2) & ~v6;
  (*(void (**)(uint64_t, uint64_t))(v4 + 40))(v7, v8);
  uint64_t v9 = *(void *)(v5 + 24) + 7;
  unint64_t v10 = (void *)((v9 + v7) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v11 = (v9 + v8) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v12 = *(void *)v11;
  v11 += 15;
  *unint64_t v10 = v12;
  swift_release();
  unint64_t v13 = ((unint64_t)v10 + 15) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v14 = *(void *)(v11 & 0xFFFFFFFFFFFFFFF8);
  *(unsigned char *)(v13 + 8) = *(unsigned char *)((v11 & 0xFFFFFFFFFFFFFFF8) + 8);
  *(void *)unint64_t v13 = v14;
  *(unsigned char *)(v13 + 9) = *(unsigned char *)((v11 & 0xFFFFFFFFFFFFFFF8) + 9);
  unint64_t v15 = (v13 + 17) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v16 = ((v11 & 0xFFFFFFFFFFFFFFF8) + 17) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v17 = *(void *)v16;
  char v18 = *(unsigned char *)(v16 + 8);
  LOBYTE(v16) = *(unsigned char *)(v16 + 9);
  uint64_t v19 = *(void *)v15;
  char v20 = *(unsigned char *)(v15 + 9);
  *(void *)unint64_t v15 = v17;
  uint64_t v21 = *(unsigned __int8 *)(v15 + 8);
  *(unsigned char *)(v15 + 8) = v18;
  *(unsigned char *)(v15 + 9) = v16;
  outlined consume of Environment<CGFloat?>.Content(v19, v21, v20);
  return a1;
}

uint64_t getEnumTagSinglePayload for PlatterButtonStyleView(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  if (v5 <= 0x7FFFFFFF) {
    unsigned int v7 = 0x7FFFFFFF;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  uint64_t v8 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) + 7;
  if (v7 < a2)
  {
    unint64_t v9 = ((((((v8 + ((v6 + 3) & ~v6)) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 17) & 0xFFFFFFFFFFFFFFF8)
       + 10;
    unsigned int v10 = (a2 - v7 + 0xFFFF) >> (8 * v9);
    if (v9 <= 3) {
      unsigned int v11 = v10 + 1;
    }
    else {
      unsigned int v11 = 2;
    }
    if (v11 >= 0x10000) {
      unsigned int v12 = 4;
    }
    else {
      unsigned int v12 = 2;
    }
    if (v11 < 0x100) {
      unsigned int v12 = 1;
    }
    if (v11 >= 2) {
      uint64_t v13 = v12;
    }
    else {
      uint64_t v13 = 0;
    }
    switch(v13)
    {
      case 1:
        int v14 = *((unsigned __int8 *)a1 + v9);
        if (!*((unsigned char *)a1 + v9)) {
          break;
        }
        goto LABEL_22;
      case 2:
        int v14 = *(unsigned __int16 *)((char *)a1 + v9);
        if (*(unsigned __int16 *)((char *)a1 + v9)) {
          goto LABEL_22;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x1876D3208);
      case 4:
        int v14 = *(_DWORD *)((char *)a1 + v9);
        if (!v14) {
          break;
        }
LABEL_22:
        int v16 = (v14 - 1) << (8 * v9);
        if (v9 <= 3)
        {
          int v17 = *a1;
        }
        else
        {
          int v16 = 0;
          int v17 = *(_DWORD *)a1;
        }
        return v7 + (v17 | v16) + 1;
      default:
        break;
    }
  }
  uint64_t v18 = ((unint64_t)a1 + v6 + 3) & ~v6;
  if (v5 >= 0x7FFFFFFF) {
    return (*(uint64_t (**)(uint64_t))(v4 + 48))(v18);
  }
  unint64_t v19 = *(void *)((v8 + v18) & 0xFFFFFFFFFFFFFFF8);
  if (v19 >= 0xFFFFFFFF) {
    LODWORD(v19) = -1;
  }
  return (v19 + 1);
}

void storeEnumTagSinglePayload for PlatterButtonStyleView(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v10 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64) + 7;
  unint64_t v11 = ((((((v10 + ((v9 + 3) & ~v9)) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 17) & 0xFFFFFFFFFFFFFFF8)
      + 10;
  char v12 = 8 * v11;
  if (v8 >= a3)
  {
    int v16 = 0;
    if (v8 >= a2)
    {
LABEL_17:
      switch(v16)
      {
        case 1:
          a1[v11] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_31;
        case 2:
          *(_WORD *)&a1[v11] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_31;
        case 3:
          goto LABEL_44;
        case 4:
          *(_DWORD *)&a1[v11] = 0;
          goto LABEL_30;
        default:
LABEL_30:
          if (a2)
          {
LABEL_31:
            unint64_t v20 = (unint64_t)&a1[v9 + 3] & ~v9;
            if (v7 < 0x7FFFFFFF)
            {
              uint64_t v22 = (void *)((v10 + v20) & 0xFFFFFFFFFFFFFFF8);
              if ((a2 & 0x80000000) != 0) {
                uint64_t v23 = a2 ^ 0x80000000;
              }
              else {
                uint64_t v23 = a2 - 1;
              }
              *uint64_t v22 = v23;
            }
            else
            {
              uint64_t v21 = *(void (**)(unint64_t))(v6 + 56);
              v21(v20);
            }
          }
          break;
      }
      return;
    }
  }
  else
  {
    unsigned int v13 = (a3 - v8 + 0xFFFF) >> v12;
    if (v11 <= 3) {
      unsigned int v14 = v13 + 1;
    }
    else {
      unsigned int v14 = 2;
    }
    if (v14 >= 0x10000) {
      int v15 = 4;
    }
    else {
      int v15 = 2;
    }
    if (v14 < 0x100) {
      int v15 = 1;
    }
    if (v14 >= 2) {
      int v16 = v15;
    }
    else {
      int v16 = 0;
    }
    if (v8 >= a2) {
      goto LABEL_17;
    }
  }
  unsigned int v17 = ~v8 + a2;
  unsigned int v18 = v17 >> v12;
  bzero(a1, ((((((v10 + ((v9 + 3) & ~v9)) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 17) & 0xFFFFFFFFFFFFFFF8)+ 10);
  if (v11 <= 3) {
    int v19 = v18 + 1;
  }
  else {
    int v19 = 1;
  }
  if (v11 > 3) {
    *(_DWORD *)a1 = v17;
  }
  else {
    *(_WORD *)a1 = v17;
  }
  switch(v16)
  {
    case 1:
      a1[v11] = v19;
      break;
    case 2:
      *(_WORD *)&a1[v11] = v19;
      break;
    case 3:
LABEL_44:
      __break(1u);
      JUMPOUT(0x1876D344CLL);
    case 4:
      *(_DWORD *)&a1[v11] = v19;
      break;
    default:
      return;
  }
}

uint64_t type metadata completion function for PlatterShadowedContent()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

void *initializeBufferWithCopyOfBuffer for PlatterShadowedContent(void *a1, void *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  uint64_t v5 = *(void *)(*(void *)(a3 + 24) - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  uint64_t v7 = *(void *)(a3 + 16);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(_DWORD *)(v8 + 80);
  uint64_t v10 = *(void *)(v8 + 64);
  unsigned int v11 = v9 | *(_DWORD *)(v5 + 80) & 0xF8;
  BOOL v12 = v11 <= 7 && ((*(_DWORD *)(v5 + 80) | *(_DWORD *)(v8 + 80)) & 0x100000) == 0;
  if (v12
    && (uint64_t v13 = v10 + 7,
        ((((((((((((((((((((((v10 + 7 + ((v9 + v6 + 1) & ~v9)) & 0xFFFFFFFFFFFFFFF8) + 11) & 0xFFFFFFFFFFFFFFF8) + 11) & 0xFFFFFFFFFFFFFFF8)
                      + 15) & 0xFFFFFFFFFFFFFFF8)
                    + 15) & 0xFFFFFFFFFFFFFFF8)
                  + 11) & 0xFFFFFFFFFFFFFFF8)
                + 11) & 0xFFFFFFFFFFFFFFF8)
              + 15) & 0xFFFFFFFFFFFFFFF8)
            + 15) & 0xFFFFFFFFFFFFFFF8)
          + 15) & 0xFFFFFFFFFFFFFFF8)
        + 15) & 0xFFFFFFFFFFFFFFF8)
      + 8 <= 0x18))
  {
    (*(void (**)(void *, void *))(v5 + 16))(a1, a2);
    *((unsigned char *)v4 + v6) = *((unsigned char *)a2 + v6);
    unsigned int v14 = (char *)a2 + v6 + v9;
    uint64_t v15 = ((unint64_t)v4 + v6 + v9 + 1) & ~v9;
    uint64_t v16 = (unint64_t)(v14 + 1) & ~v9;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16))(v15, v16, v7);
    unsigned int v17 = (void *)((v13 + v15) & 0xFFFFFFFFFFFFFFF8);
    unsigned int v18 = (void *)((v13 + v16) & 0xFFFFFFFFFFFFFFF8);
    void *v17 = *v18;
    int v19 = (_DWORD *)(((unint64_t)v17 + 11) & 0xFFFFFFFFFFFFFFF8);
    unint64_t v20 = (_DWORD *)(((unint64_t)v18 + 11) & 0xFFFFFFFFFFFFFFF8);
    *int v19 = *v20;
    uint64_t v21 = (void *)(((unint64_t)v19 + 11) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v22 = (void *)(((unint64_t)v20 + 11) & 0xFFFFFFFFFFFFFFF8);
    *uint64_t v21 = *v22;
    uint64_t v23 = (void *)(((unint64_t)v21 + 15) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v24 = (void *)(((unint64_t)v22 + 15) & 0xFFFFFFFFFFFFFFF8);
    *uint64_t v23 = *v24;
    uint64_t v25 = (void *)(((unint64_t)v23 + 15) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v26 = (void *)(((unint64_t)v24 + 15) & 0xFFFFFFFFFFFFFFF8);
    *uint64_t v25 = *v26;
    uint64_t v27 = (_DWORD *)(((unint64_t)v25 + 11) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v28 = (_DWORD *)(((unint64_t)v26 + 11) & 0xFFFFFFFFFFFFFFF8);
    *uint64_t v27 = *v28;
    float v29 = (void *)(((unint64_t)v27 + 11) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v30 = (void *)(((unint64_t)v28 + 11) & 0xFFFFFFFFFFFFFFF8);
    *float v29 = *v30;
    uint64_t v31 = (void *)(((unint64_t)v29 + 15) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v32 = (void *)(((unint64_t)v30 + 15) & 0xFFFFFFFFFFFFFFF8);
    void *v31 = *v32;
    uint64_t v33 = (void *)(((unint64_t)v31 + 15) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v34 = (void *)(((unint64_t)v32 + 15) & 0xFFFFFFFFFFFFFFF8);
    *uint64_t v33 = *v34;
    uint64_t v35 = (void *)(((unint64_t)v33 + 15) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v36 = (void *)(((unint64_t)v34 + 15) & 0xFFFFFFFFFFFFFFF8);
    *uint64_t v35 = *v36;
    *(void *)(((unint64_t)v35 + 15) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v36 + 15) & 0xFFFFFFFFFFFFFFF8);
    swift_retain();
    swift_retain();
    swift_retain();
  }
  else
  {
    uint64_t v37 = *a2;
    *a1 = *a2;
    uint64_t v4 = (void *)(v37 + (((v11 | 7) + 16) & ~(unint64_t)(v11 | 7)));
  }
  swift_retain();
  return v4;
}

uint64_t destroy for PlatterShadowedContent(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(*(void *)(a2 + 24) - 8) + 8;
  (*(void (**)(void))v4)();
  (*(void (**)(unint64_t))(*(void *)(*(void *)(a2 + 16) - 8) + 8))((a1
                                                                                            + *(void *)(v4 + 56)
                                                                                            + *(unsigned __int8 *)(*(void *)(*(void *)(a2 + 16) - 8) + 80)
                                                                                            + 1) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(*(void *)(a2 + 16) - 8) + 80));
  swift_release();
  swift_release();
  swift_release();

  return swift_release();
}

uint64_t initializeWithCopy for PlatterShadowedContent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(*(void *)(a3 + 24) - 8) + 16;
  (*(void (**)(void))v6)();
  uint64_t v7 = *(void *)(v6 + 48);
  uint64_t v8 = (unsigned char *)(v7 + a1);
  uint64_t v9 = (unsigned char *)(v7 + a2);
  unsigned char *v8 = *v9;
  uint64_t v10 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v11 = v10 + 16;
  uint64_t v12 = *(unsigned __int8 *)(v10 + 80);
  uint64_t v13 = (unint64_t)&v8[v12 + 1] & ~v12;
  uint64_t v14 = (unint64_t)&v9[v12 + 1] & ~v12;
  (*(void (**)(uint64_t, uint64_t))(v10 + 16))(v13, v14);
  uint64_t v15 = *(void *)(v11 + 48) + 7;
  uint64_t v16 = (void *)((v15 + v13) & 0xFFFFFFFFFFFFFFF8);
  unsigned int v17 = (void *)((v15 + v14) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v16 = *v17;
  unsigned int v18 = (_DWORD *)(((unint64_t)v16 + 11) & 0xFFFFFFFFFFFFFFF8);
  int v19 = (_DWORD *)(((unint64_t)v17 + 11) & 0xFFFFFFFFFFFFFFF8);
  *unsigned int v18 = *v19;
  unint64_t v20 = (void *)(((unint64_t)v18 + 11) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v21 = (void *)(((unint64_t)v19 + 11) & 0xFFFFFFFFFFFFFFF8);
  *unint64_t v20 = *v21;
  uint64_t v22 = (void *)(((unint64_t)v20 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v23 = (void *)(((unint64_t)v21 + 15) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v22 = *v23;
  uint64_t v24 = (void *)(((unint64_t)v22 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v25 = (void *)(((unint64_t)v23 + 15) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v24 = *v25;
  uint64_t v26 = (_DWORD *)(((unint64_t)v24 + 11) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v27 = (_DWORD *)(((unint64_t)v25 + 11) & 0xFFFFFFFFFFFFFFF8);
  _DWORD *v26 = *v27;
  uint64_t v28 = (void *)(((unint64_t)v26 + 11) & 0xFFFFFFFFFFFFFFF8);
  float v29 = (void *)(((unint64_t)v27 + 11) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v28 = *v29;
  uint64_t v30 = (void *)(((unint64_t)v28 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v31 = (void *)(((unint64_t)v29 + 15) & 0xFFFFFFFFFFFFFFF8);
  void *v30 = *v31;
  uint64_t v32 = (void *)(((unint64_t)v30 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v33 = (void *)(((unint64_t)v31 + 15) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v32 = *v33;
  uint64_t v34 = (void *)(((unint64_t)v32 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v35 = (void *)(((unint64_t)v33 + 15) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v34 = *v35;
  *(void *)(((unint64_t)v34 + 15) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v35 + 15) & 0xFFFFFFFFFFFFFFF8);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for PlatterShadowedContent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(*(void *)(a3 + 24) - 8) + 24;
  (*(void (**)(void))v6)();
  uint64_t v7 = *(void *)(v6 + 40);
  uint64_t v8 = (unsigned char *)(v7 + a1);
  uint64_t v9 = (unsigned char *)(v7 + a2);
  unsigned char *v8 = *v9;
  uint64_t v10 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v11 = v10 + 24;
  uint64_t v12 = *(unsigned __int8 *)(v10 + 80);
  uint64_t v13 = (unint64_t)&v8[v12 + 1] & ~v12;
  uint64_t v14 = (unint64_t)&v9[v12 + 1] & ~v12;
  (*(void (**)(uint64_t, uint64_t))(v10 + 24))(v13, v14);
  uint64_t v15 = *(void *)(v11 + 40) + 7;
  unint64_t v16 = (v15 + v13) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v17 = v15 + v14;
  unint64_t v18 = (v17 & 0xFFFFFFFFFFFFFFF8) + 11;
  *(void *)unint64_t v16 = *(void *)(v17 & 0xFFFFFFFFFFFFFFF8);
  v16 += 11;
  swift_retain();
  swift_release();
  *(_DWORD *)(v16 & 0xFFFFFFFFFFFFFFF8) = *(_DWORD *)(v18 & 0xFFFFFFFFFFFFFFF8);
  int v19 = (void *)(((v16 & 0xFFFFFFFFFFFFFFF8) + 11) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v20 = (void *)(((v18 & 0xFFFFFFFFFFFFFFF8) + 11) & 0xFFFFFFFFFFFFFFF8);
  *int v19 = *v20;
  unint64_t v21 = ((unint64_t)v19 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v22 = ((unint64_t)v20 + 15) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v23 = *(void *)v22;
  v22 += 15;
  *(void *)unint64_t v21 = v23;
  v21 += 15;
  unint64_t v24 = (v22 & 0xFFFFFFFFFFFFFFF8) + 11;
  *(void *)(v21 & 0xFFFFFFFFFFFFFFF8) = *(void *)(v22 & 0xFFFFFFFFFFFFFFF8);
  unint64_t v25 = (v21 & 0xFFFFFFFFFFFFFFF8) + 11;
  swift_retain();
  swift_release();
  *(_DWORD *)(v25 & 0xFFFFFFFFFFFFFFF8) = *(_DWORD *)(v24 & 0xFFFFFFFFFFFFFFF8);
  uint64_t v26 = (void *)(((v25 & 0xFFFFFFFFFFFFFFF8) + 11) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v27 = (void *)(((v24 & 0xFFFFFFFFFFFFFFF8) + 11) & 0xFFFFFFFFFFFFFFF8);
  void *v26 = *v27;
  unint64_t v28 = ((unint64_t)v26 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v29 = ((unint64_t)v27 + 15) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v30 = *(void *)v29;
  v29 += 15;
  *(void *)unint64_t v28 = v30;
  v28 += 15;
  unint64_t v31 = (v29 & 0xFFFFFFFFFFFFFFF8) + 15;
  *(void *)(v28 & 0xFFFFFFFFFFFFFFF8) = *(void *)(v29 & 0xFFFFFFFFFFFFFFF8);
  unint64_t v32 = (v28 & 0xFFFFFFFFFFFFFFF8) + 15;
  swift_retain();
  swift_release();
  v32 &= 0xFFFFFFFFFFFFFFF8;
  v31 &= 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v32 = *(void *)v31;
  swift_retain();
  swift_release();
  *(void *)((v32 + 15) & 0xFFFFFFFFFFFFFFF8) = *(void *)((v31 + 15) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

uint64_t initializeWithTake for PlatterShadowedContent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(*(void *)(a3 + 24) - 8) + 32;
  (*(void (**)(void))v6)();
  uint64_t v7 = *(void *)(v6 + 32);
  uint64_t v8 = (unsigned char *)(v7 + a1);
  uint64_t v9 = (unsigned char *)(v7 + a2);
  unsigned char *v8 = *v9;
  uint64_t v10 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v11 = v10 + 32;
  uint64_t v12 = *(unsigned __int8 *)(v10 + 80);
  uint64_t v13 = (unint64_t)&v8[v12 + 1] & ~v12;
  uint64_t v14 = (unint64_t)&v9[v12 + 1] & ~v12;
  (*(void (**)(uint64_t, uint64_t))(v10 + 32))(v13, v14);
  uint64_t v15 = *(void *)(v11 + 32) + 7;
  unint64_t v16 = (void *)((v15 + v13) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v17 = (void *)((v15 + v14) & 0xFFFFFFFFFFFFFFF8);
  *unint64_t v16 = *v17;
  unint64_t v18 = (_DWORD *)(((unint64_t)v16 + 11) & 0xFFFFFFFFFFFFFFF8);
  int v19 = (_DWORD *)(((unint64_t)v17 + 11) & 0xFFFFFFFFFFFFFFF8);
  *unint64_t v18 = *v19;
  unint64_t v20 = (void *)(((unint64_t)v18 + 11) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v21 = (void *)(((unint64_t)v19 + 11) & 0xFFFFFFFFFFFFFFF8);
  *unint64_t v20 = *v21;
  unint64_t v22 = (void *)(((unint64_t)v20 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v23 = (void *)(((unint64_t)v21 + 15) & 0xFFFFFFFFFFFFFFF8);
  *unint64_t v22 = *v23;
  unint64_t v24 = (void *)(((unint64_t)v22 + 15) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v25 = (void *)(((unint64_t)v23 + 15) & 0xFFFFFFFFFFFFFFF8);
  *unint64_t v24 = *v25;
  uint64_t v26 = (_DWORD *)(((unint64_t)v24 + 11) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v27 = (_DWORD *)(((unint64_t)v25 + 11) & 0xFFFFFFFFFFFFFFF8);
  _DWORD *v26 = *v27;
  unint64_t v28 = (void *)(((unint64_t)v26 + 11) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v29 = (void *)(((unint64_t)v27 + 11) & 0xFFFFFFFFFFFFFFF8);
  *unint64_t v28 = *v29;
  uint64_t v30 = (void *)(((unint64_t)v28 + 15) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v31 = (void *)(((unint64_t)v29 + 15) & 0xFFFFFFFFFFFFFFF8);
  void *v30 = *v31;
  unint64_t v32 = (void *)(((unint64_t)v30 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v33 = (void *)(((unint64_t)v31 + 15) & 0xFFFFFFFFFFFFFFF8);
  *unint64_t v32 = *v33;
  uint64_t v34 = (void *)(((unint64_t)v32 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v35 = (void *)(((unint64_t)v33 + 15) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v34 = *v35;
  *(void *)(((unint64_t)v34 + 15) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v35 + 15) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

uint64_t assignWithTake for PlatterShadowedContent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(*(void *)(a3 + 24) - 8) + 40;
  (*(void (**)(void))v6)();
  uint64_t v7 = *(void *)(v6 + 24);
  uint64_t v8 = (unsigned char *)(v7 + a1);
  uint64_t v9 = (unsigned char *)(v7 + a2);
  unsigned char *v8 = *v9;
  uint64_t v10 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v11 = v10 + 40;
  uint64_t v12 = *(unsigned __int8 *)(v10 + 80);
  uint64_t v13 = (unint64_t)&v8[v12 + 1] & ~v12;
  uint64_t v14 = (unint64_t)&v9[v12 + 1] & ~v12;
  (*(void (**)(uint64_t, uint64_t))(v10 + 40))(v13, v14);
  uint64_t v15 = *(void *)(v11 + 24) + 7;
  unint64_t v16 = (v15 + v13) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v17 = (v15 + v14) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v18 = *(void *)v17;
  v17 += 11;
  *(void *)unint64_t v16 = v18;
  v16 += 11;
  swift_release();
  *(_DWORD *)(v16 & 0xFFFFFFFFFFFFFFF8) = *(_DWORD *)(v17 & 0xFFFFFFFFFFFFFFF8);
  int v19 = (void *)(((v16 & 0xFFFFFFFFFFFFFFF8) + 11) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v20 = (void *)(((v17 & 0xFFFFFFFFFFFFFFF8) + 11) & 0xFFFFFFFFFFFFFFF8);
  *int v19 = *v20;
  unint64_t v21 = (void *)(((unint64_t)v19 + 15) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v22 = ((unint64_t)v20 + 15) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v23 = *(void *)v22;
  v22 += 15;
  *unint64_t v21 = v23;
  unint64_t v24 = ((unint64_t)v21 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v25 = (v22 & 0xFFFFFFFFFFFFFFF8) + 11;
  *(void *)unint64_t v24 = *(void *)(v22 & 0xFFFFFFFFFFFFFFF8);
  v24 += 11;
  swift_release();
  *(_DWORD *)(v24 & 0xFFFFFFFFFFFFFFF8) = *(_DWORD *)(v25 & 0xFFFFFFFFFFFFFFF8);
  uint64_t v26 = (void *)(((v24 & 0xFFFFFFFFFFFFFFF8) + 11) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v27 = (void *)(((v25 & 0xFFFFFFFFFFFFFFF8) + 11) & 0xFFFFFFFFFFFFFFF8);
  void *v26 = *v27;
  unint64_t v28 = (void *)(((unint64_t)v26 + 15) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v29 = ((unint64_t)v27 + 15) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v30 = *(void *)v29;
  v29 += 15;
  *unint64_t v28 = v30;
  unint64_t v31 = (void *)(((unint64_t)v28 + 15) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v32 = (v29 & 0xFFFFFFFFFFFFFFF8) + 15;
  void *v31 = *(void *)(v29 & 0xFFFFFFFFFFFFFFF8);
  swift_release();
  uint64_t v33 = (void *)(((unint64_t)v31 + 15) & 0xFFFFFFFFFFFFFFF8);
  v32 &= 0xFFFFFFFFFFFFFFF8;
  *uint64_t v33 = *(void *)v32;
  swift_release();
  *(void *)(((unint64_t)v33 + 15) & 0xFFFFFFFFFFFFFFF8) = *(void *)((v32 + 15) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

uint64_t getEnumTagSinglePayload for PlatterShadowedContent(int *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 24) - 8);
  uint64_t v5 = *(unsigned int *)(v4 + 84);
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  uint64_t v8 = *(void *)(v4 + 64);
  uint64_t v9 = *(unsigned __int8 *)(v6 + 80);
  if (v5 <= v7) {
    unsigned int v10 = *(_DWORD *)(v6 + 84);
  }
  else {
    unsigned int v10 = *(_DWORD *)(v4 + 84);
  }
  if (v10 <= 0x7FFFFFFF) {
    unsigned int v10 = 0x7FFFFFFF;
  }
  if (!a2) {
    return 0;
  }
  uint64_t v11 = *(void *)(v6 + 64) + 7;
  if (v10 < a2)
  {
    unint64_t v12 = ((((((((((((((((((((((v11 + ((v8 + v9 + 1) & ~v9)) & 0xFFFFFFFFFFFFFFF8) + 11) & 0xFFFFFFFFFFFFFFF8) + 11) & 0xFFFFFFFFFFFFFFF8)
                        + 15) & 0xFFFFFFFFFFFFFFF8)
                      + 15) & 0xFFFFFFFFFFFFFFF8)
                    + 11) & 0xFFFFFFFFFFFFFFF8)
                  + 11) & 0xFFFFFFFFFFFFFFF8)
                + 15) & 0xFFFFFFFFFFFFFFF8)
              + 15) & 0xFFFFFFFFFFFFFFF8)
            + 15) & 0xFFFFFFFFFFFFFFF8)
          + 15) & 0xFFFFFFFFFFFFFFF8)
        + 8;
    unsigned int v13 = a2 - v10;
    uint64_t v14 = v12 & 0xFFFFFFF8;
    if ((v12 & 0xFFFFFFF8) != 0) {
      unsigned int v15 = 2;
    }
    else {
      unsigned int v15 = v13 + 1;
    }
    if (v15 >= 0x10000) {
      unsigned int v16 = 4;
    }
    else {
      unsigned int v16 = 2;
    }
    if (v15 < 0x100) {
      unsigned int v16 = 1;
    }
    if (v15 >= 2) {
      uint64_t v17 = v16;
    }
    else {
      uint64_t v17 = 0;
    }
    switch(v17)
    {
      case 1:
        int v18 = *((unsigned __int8 *)a1 + v12);
        if (!v18) {
          break;
        }
        goto LABEL_24;
      case 2:
        int v18 = *(unsigned __int16 *)((char *)a1 + v12);
        if (v18) {
          goto LABEL_24;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x1876D420CLL);
      case 4:
        int v18 = *(int *)((char *)a1 + v12);
        if (!v18) {
          break;
        }
LABEL_24:
        int v20 = v18 - 1;
        if (v14)
        {
          int v20 = 0;
          int v21 = *a1;
        }
        else
        {
          int v21 = 0;
        }
        return v10 + (v21 | v20) + 1;
      default:
        break;
    }
  }
  if (v5 == v10) {
    return (*(uint64_t (**)(int *, uint64_t, void))(v4 + 48))(a1, v5, *(void *)(a3 + 24));
  }
  uint64_t v22 = ((unint64_t)a1 + v8 + v9 + 1) & ~v9;
  if (v7 == v10) {
    return (*(uint64_t (**)(uint64_t))(v6 + 48))(v22);
  }
  unint64_t v23 = *(void *)((v11 + v22) & 0xFFFFFFFFFFFFFFF8);
  if (v23 >= 0xFFFFFFFF) {
    LODWORD(v23) = -1;
  }
  return (v23 + 1);
}

void storeEnumTagSinglePayload for PlatterShadowedContent(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 24) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  uint64_t v8 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v9 = *(_DWORD *)(v8 + 84);
  uint64_t v10 = *(void *)(v6 + 64);
  uint64_t v11 = *(unsigned __int8 *)(v8 + 80);
  if (v7 <= v9) {
    unsigned int v12 = *(_DWORD *)(v8 + 84);
  }
  else {
    unsigned int v12 = *(_DWORD *)(v6 + 84);
  }
  if (v12 <= 0x7FFFFFFF) {
    unsigned int v12 = 0x7FFFFFFF;
  }
  uint64_t v13 = *(void *)(v8 + 64) + 7;
  unint64_t v14 = ((((((((((((((((((((((v13 + ((v10 + v11 + 1) & ~v11)) & 0xFFFFFFFFFFFFFFF8) + 11) & 0xFFFFFFFFFFFFFFF8) + 11) & 0xFFFFFFFFFFFFFFF8)
                      + 15) & 0xFFFFFFFFFFFFFFF8)
                    + 15) & 0xFFFFFFFFFFFFFFF8)
                  + 11) & 0xFFFFFFFFFFFFFFF8)
                + 11) & 0xFFFFFFFFFFFFFFF8)
              + 15) & 0xFFFFFFFFFFFFFFF8)
            + 15) & 0xFFFFFFFFFFFFFFF8)
          + 15) & 0xFFFFFFFFFFFFFFF8)
        + 15) & 0xFFFFFFFFFFFFFFF8)
      + 8;
  if (v12 >= a3)
  {
    int v18 = 0;
    int v19 = a2 - v12;
    if (a2 <= v12)
    {
LABEL_19:
      switch(v18)
      {
        case 1:
          a1[v14] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_32;
        case 2:
          *(_WORD *)&a1[v14] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_32;
        case 3:
          goto LABEL_49;
        case 4:
          *(_DWORD *)&a1[v14] = 0;
          goto LABEL_31;
        default:
LABEL_31:
          if (a2)
          {
LABEL_32:
            if (v7 == v12)
            {
              uint64_t v22 = *(void (**)(void))(v6 + 56);
              v22();
            }
            else
            {
              unint64_t v23 = (unint64_t)&a1[v10 + 1 + v11] & ~v11;
              if (v9 == v12)
              {
                unint64_t v24 = *(void (**)(unint64_t))(v8 + 56);
                v24(v23);
              }
              else
              {
                if ((a2 & 0x80000000) != 0) {
                  uint64_t v25 = a2 ^ 0x80000000;
                }
                else {
                  uint64_t v25 = a2 - 1;
                }
                *(void *)((v13 + v23) & 0xFFFFFFFFFFFFFFF8) = v25;
              }
            }
          }
          break;
      }
      return;
    }
  }
  else
  {
    unsigned int v15 = a3 - v12;
    if (((((((((((((((((((((((v13 + ((v10 + v11 + 1) & ~v11)) & 0xFFFFFFF8) + 11) & 0xFFFFFFF8)
                         + 11) & 0xFFFFFFF8)
                       + 15) & 0xFFFFFFF8)
                     + 15) & 0xFFFFFFF8)
                   + 11) & 0xFFFFFFF8)
                 + 11) & 0xFFFFFFF8)
               + 15) & 0xFFFFFFF8)
             + 15) & 0xFFFFFFF8)
           + 15) & 0xFFFFFFF8)
         + 15) & 0xFFFFFFF8) == 0xFFFFFFF8)
      unsigned int v16 = v15 + 1;
    else {
      unsigned int v16 = 2;
    }
    if (v16 >= 0x10000) {
      int v17 = 4;
    }
    else {
      int v17 = 2;
    }
    if (v16 < 0x100) {
      int v17 = 1;
    }
    if (v16 >= 2) {
      int v18 = v17;
    }
    else {
      int v18 = 0;
    }
    int v19 = a2 - v12;
    if (a2 <= v12) {
      goto LABEL_19;
    }
  }
  if (((((((((((((((((((((((v13 + ((v10 + v11 + 1) & ~v11)) & 0xFFFFFFF8) + 11) & 0xFFFFFFF8)
                       + 11) & 0xFFFFFFF8)
                     + 15) & 0xFFFFFFF8)
                   + 15) & 0xFFFFFFF8)
                 + 11) & 0xFFFFFFF8)
               + 11) & 0xFFFFFFF8)
             + 15) & 0xFFFFFFF8)
           + 15) & 0xFFFFFFF8)
         + 15) & 0xFFFFFFF8)
       + 15) & 0xFFFFFFF8) == 0xFFFFFFF8)
    int v20 = v19;
  else {
    int v20 = 1;
  }
  if (((((((((((((((((((((((v13 + ((v10 + v11 + 1) & ~v11)) & 0xFFFFFFF8) + 11) & 0xFFFFFFF8)
                       + 11) & 0xFFFFFFF8)
                     + 15) & 0xFFFFFFF8)
                   + 15) & 0xFFFFFFF8)
                 + 11) & 0xFFFFFFF8)
               + 11) & 0xFFFFFFF8)
             + 15) & 0xFFFFFFF8)
           + 15) & 0xFFFFFFF8)
         + 15) & 0xFFFFFFF8)
       + 15) & 0xFFFFFFF8) != 0xFFFFFFF8)
  {
    int v21 = ~v12 + a2;
    bzero(a1, ((((((((((((((((((((((v13 + ((v10 + v11 + 1) & ~v11)) & 0xFFFFFFFFFFFFFFF8) + 11) & 0xFFFFFFFFFFFFFFF8) + 11) & 0xFFFFFFFFFFFFFFF8)+ 15) & 0xFFFFFFFFFFFFFFF8)+ 15) & 0xFFFFFFFFFFFFFFF8)+ 11) & 0xFFFFFFFFFFFFFFF8)+ 11) & 0xFFFFFFFFFFFFFFF8)+ 15) & 0xFFFFFFFFFFFFFFF8)+ 15) & 0xFFFFFFFFFFFFFFF8)+ 15) & 0xFFFFFFFFFFFFFFF8)+ 15) & 0xFFFFFFFFFFFFFFF8)+ 8);
    *(_DWORD *)a1 = v21;
  }
  switch(v18)
  {
    case 1:
      a1[v14] = v20;
      break;
    case 2:
      *(_WORD *)&a1[v14] = v20;
      break;
    case 3:
LABEL_49:
      __break(1u);
      JUMPOUT(0x1876D4508);
    case 4:
      *(_DWORD *)&a1[v14] = v20;
      break;
    default:
      return;
  }
}

uint64_t sub_1876D4530()
{
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(Spacer?, ButtonStyleConfiguration.Label, Spacer?)>>, _EnvironmentKeyWritingModifier<Font?>>, _PaddingLayout>, _FlexFrameLayout>(255);
  type metadata accessor for _BackgroundStyleModifier();
  type metadata accessor for ModifiedContent();
  type metadata accessor for _OverlayModifier<Color>();
  type metadata accessor for ModifiedContent();
  uint64_t v0 = MEMORY[0x1E4F414E0];
  type metadata accessor for _EnvironmentKeyWritingModifier<Color?>(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Color?>, (unint64_t *)&lazy cache variable for type metadata for Color?, MEMORY[0x1E4F414E0]);
  type metadata accessor for ModifiedContent();
  type metadata accessor for PlatterButtonStyleView.ClippingShape();
  lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(Spacer?, ButtonStyleConfiguration.Label, Spacer?)>>, _EnvironmentKeyWritingModifier<Font?>>, _PaddingLayout>, _FlexFrameLayout> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(Spacer?, ButtonStyleConfiguration.Label, Spacer?)>>, _EnvironmentKeyWritingModifier<Font?>>, _PaddingLayout>, _FlexFrameLayout> and conformance <> ModifiedContent<A, B>, type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(Spacer?, ButtonStyleConfiguration.Label, Spacer?)>>, _EnvironmentKeyWritingModifier<Font?>>, _PaddingLayout>, _FlexFrameLayout>, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<HStack<TupleView<(Spacer?, ButtonStyleConfiguration.Label, Spacer?)>>, _EnvironmentKeyWritingModifier<Font?>>, _PaddingLayout> and conformance <> ModifiedContent<A, B>);
  swift_getWitnessTable();
  swift_getWitnessTable();
  lazy protocol witness table accessor for type TupleView<(Spacer?, ButtonStyleConfiguration.Label, Spacer?)> and conformance TupleView<A>(&lazy protocol witness table cache variable for type _OverlayModifier<Color> and conformance _OverlayModifier<A>, (void (*)(uint64_t))type metadata accessor for _OverlayModifier<Color>);
  swift_getWitnessTable();
  _s7SwiftUI30_EnvironmentKeyWritingModifierVyAA4FontVSgGACyxGAA04ViewF0AAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<Color?> and conformance _EnvironmentKeyWritingModifier<A>, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Color?>, (unint64_t *)&lazy cache variable for type metadata for Color?, v0);
  swift_getWitnessTable();
  swift_getWitnessTable();
  type metadata accessor for PlatterShadowedContent();
  type metadata accessor for ModifiedContent();
  swift_getWitnessTable();
  return swift_getWitnessTable();
}

uint64_t sub_1876D47A4()
{
  return swift_getWitnessTable();
}

uint64_t getEnumTagSinglePayload for PlatterButtonStyleView.ClippingShape(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 25)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for PlatterButtonStyleView.ClippingShape(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(unsigned char *)(result + 24) = 0;
    *(void *)uint64_t result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 25) = v3;
  return result;
}

uint64_t associated type witness table accessor for View.Body : View in PlatterButtonStyleView<A>.ClippingShape()
{
  return swift_getWitnessTable();
}

unint64_t lazy protocol witness table accessor for type EmptyAnimatableData and conformance EmptyAnimatableData()
{
  unint64_t result = lazy protocol witness table cache variable for type EmptyAnimatableData and conformance EmptyAnimatableData;
  if (!lazy protocol witness table cache variable for type EmptyAnimatableData and conformance EmptyAnimatableData)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EmptyAnimatableData and conformance EmptyAnimatableData);
  }
  return result;
}

uint64_t instantiation function for generic protocol witness table for PlatterButtonStyleView<A>.ClippingShape(uint64_t a1)
{
  *(void *)(a1 + 8) = swift_getWitnessTable();
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 16) = result;
  return result;
}

{
  uint64_t result;

  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t associated type witness table accessor for InsettableShape.InsetShape : InsettableShape in PlatterButtonStyleView<A>.ClippingShape()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t InsettableShape.strokeBorder<A>(_:style:antialiased:)@<X0>(uint64_t a1@<X0>, double *a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  int v28 = a3;
  uint64_t v15 = *(void *)(a5 - 8);
  MEMORY[0x1F4188790](a1);
  int v17 = &v27[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  double v19 = MEMORY[0x1F4188790](v18);
  int v21 = &v27[-((v20 + 15) & 0xFFFFFFFFFFFFFFF0)];
  (*(void (**)(unsigned char *, uint64_t, uint64_t, double))(v22 + 16))(v21, v24, v23, v19);
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v15 + 16))(v17, a1, a5);
  swift_bridgeObjectRetain();
  return StrokeBorderShapeView.init(shape:style:strokeStyle:isAntialiased:background:)((uint64_t)v21, (uint64_t)v17, a2, v28, v25, a4, a5, MEMORY[0x1E4F417F8], a8, a6, a7, MEMORY[0x1E4F417F0]);
}

uint64_t StrokeBorderShapeView.init(shape:style:strokeStyle:isAntialiased:background:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, double *a3@<X2>, int a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v52 = a5;
  LODWORD(v50) = a4;
  uint64_t v45 = a3;
  uint64_t v47 = a2;
  uint64_t v56 = a1;
  uint64_t v57 = a9;
  uint64_t v40 = a11;
  uint64_t v46 = a8;
  uint64_t v49 = *(void *)(a8 - 8);
  uint64_t v53 = a12;
  MEMORY[0x1F4188790](a1);
  uint64_t v48 = (char *)&v37 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v54 = type metadata accessor for _BackgroundModifier();
  MEMORY[0x1F4188790](v54);
  uint64_t v51 = (char *)&v37 - v15;
  uint64_t v37 = a7;
  uint64_t v44 = *(void *)(a7 - 8);
  MEMORY[0x1F4188790](v16);
  uint64_t v42 = (char *)&v37 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v55 = a10;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v41 = *(void *)(swift_getAssociatedConformanceWitness() + 8);
  uint64_t v19 = type metadata accessor for _StrokedShape();
  MEMORY[0x1F4188790](v19);
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v58 = v19;
  uint64_t v59 = a7;
  uint64_t v60 = WitnessTable;
  uint64_t v61 = a11;
  uint64_t v43 = type metadata accessor for _ShapeView();
  v21.n128_f64[0] = MEMORY[0x1F4188790](v43);
  uint64_t v39 = (char *)&v37 - v22;
  uint64_t v23 = *(void *)(a6 - 8);
  uint64_t v24 = *(void (**)(uint64_t, uint64_t, uint64_t, __n128))(v23 + 16);
  uint64_t v38 = a6;
  v24(v57, v56, a6, v21);
  (*(void (**)(uint64_t, double))(v55 + 32))(a6, *v45 * 0.5);
  _StrokedShape.init(shape:style:)();
  uint64_t v25 = v44;
  uint64_t v26 = v47;
  uint64_t v27 = v37;
  (*(void (**)(char *, uint64_t, uint64_t))(v44 + 16))(v42, v47, v37);
  uint64_t v28 = v27;
  uint64_t v29 = v40;
  _ShapeView.init(shape:style:fillStyle:)();
  uint64_t v30 = v49;
  uint64_t v31 = v52;
  uint64_t v32 = v46;
  (*(void (**)(char *, uint64_t, uint64_t))(v49 + 16))(v48, v52, v46);
  static Alignment.center.getter();
  uint64_t v50 = v33;
  (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v31, v32);
  (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v26, v27);
  uint64_t v34 = v38;
  (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v56, v38);
  uint64_t v35 = v53;
  _BackgroundModifier.init(background:alignment:)();
  uint64_t v58 = v34;
  uint64_t v59 = v28;
  uint64_t v60 = v32;
  uint64_t v61 = v55;
  uint64_t v62 = v29;
  uint64_t v63 = v35;
  type metadata accessor for StrokeBorderShapeView();
  return ModifiedContent.init(content:modifier:)();
}

void type metadata accessor for Spacer?(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

uint64_t partial apply for closure #2 in closure #1 in PlatterButtonStyleView.body.getter@<X0>(uint64_t *a1@<X8>)
{
  return closure #2 in closure #1 in PlatterButtonStyleView.body.getter(*(void *)(v1 + 32), a1);
}

unint64_t lazy protocol witness table accessor for type RoundedRectangle._Inset and conformance RoundedRectangle._Inset()
{
  unint64_t result = lazy protocol witness table cache variable for type RoundedRectangle._Inset and conformance RoundedRectangle._Inset;
  if (!lazy protocol witness table cache variable for type RoundedRectangle._Inset and conformance RoundedRectangle._Inset)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RoundedRectangle._Inset and conformance RoundedRectangle._Inset);
  }
  return result;
}

void Settings.init(content:)()
{
}

void Settings.body.getter()
{
}

uint64_t associated type witness table accessor for Scene.Body : Scene in Settings<A>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t type metadata completion function for Settings()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for Settings(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  int v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0 || ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 9 > 0x18)
  {
    uint64_t v9 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
    swift_retain();
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    unint64_t v10 = ((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v11 = ((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v12 = *(void *)v11;
    char v13 = *(unsigned char *)(v11 + 8);
    outlined copy of ResolvedTableRowIDs.Storage(*(void *)v11, v13);
    *(void *)unint64_t v10 = v12;
    *(unsigned char *)(v10 + 8) = v13;
  }
  return v4;
}

uint64_t destroy for Settings(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(*(void *)(a2 + 16) - 8) + 8;
  (*(void (**)(void))v3)();
  unint64_t v4 = (a1 + *(void *)(v3 + 56) + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v5 = *(void *)v4;
  char v6 = *(unsigned char *)(v4 + 8);

  return outlined consume of Environment<[SceneID : KeyboardShortcut]>.Content(v5, v6);
}

uint64_t initializeWithCopy for Settings(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 16;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 48) + 7;
  unint64_t v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v9 = *(void *)v8;
  LOBYTE(v5) = *(unsigned char *)(v8 + 8);
  outlined copy of ResolvedTableRowIDs.Storage(*(void *)v8, v5);
  *(void *)unint64_t v7 = v9;
  *(unsigned char *)(v7 + 8) = v5;
  return a1;
}

uint64_t assignWithCopy for Settings(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 24;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 40) + 7;
  unint64_t v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v9 = *(void *)v8;
  LOBYTE(v5) = *(unsigned char *)(v8 + 8);
  outlined copy of ResolvedTableRowIDs.Storage(*(void *)v8, v5);
  uint64_t v10 = *(void *)v7;
  char v11 = *(unsigned char *)(v7 + 8);
  *(void *)unint64_t v7 = v9;
  *(unsigned char *)(v7 + 8) = v5;
  outlined consume of Environment<[SceneID : KeyboardShortcut]>.Content(v10, v11);
  return a1;
}

uint64_t initializeWithTake for Settings(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 32;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 32) + 7;
  unint64_t v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  char v9 = *(unsigned char *)(v8 + 8);
  *(void *)unint64_t v7 = *(void *)v8;
  *(unsigned char *)(v7 + 8) = v9;
  return a1;
}

uint64_t assignWithTake for Settings(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 40;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 24) + 7;
  unint64_t v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v9 = *(void *)v8;
  LOBYTE(v8) = *(unsigned char *)(v8 + 8);
  uint64_t v10 = *(void *)v7;
  char v11 = *(unsigned char *)(v7 + 8);
  *(void *)unint64_t v7 = v9;
  *(unsigned char *)(v7 + 8) = v8;
  outlined consume of Environment<[SceneID : KeyboardShortcut]>.Content(v10, v11);
  return a1;
}

uint64_t getEnumTagSinglePayload for Settings(unsigned __int8 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (v5 <= 0xFE) {
    unsigned int v7 = 254;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  if (v7 < a2)
  {
    unint64_t v8 = ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 9;
    unsigned int v9 = (a2 - v7 + 255) >> (8 * v8);
    if (v8 < 4) {
      unsigned int v10 = v9 + 1;
    }
    else {
      unsigned int v10 = 2;
    }
    if (v10 >= 0x10000) {
      unsigned int v11 = 4;
    }
    else {
      unsigned int v11 = 2;
    }
    if (v10 < 0x100) {
      unsigned int v11 = 1;
    }
    if (v10 >= 2) {
      uint64_t v12 = v11;
    }
    else {
      uint64_t v12 = 0;
    }
    switch(v12)
    {
      case 1:
        int v13 = a1[v8];
        if (!a1[v8]) {
          break;
        }
        goto LABEL_22;
      case 2:
        int v13 = *(unsigned __int16 *)&a1[v8];
        if (*(_WORD *)&a1[v8]) {
          goto LABEL_22;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x1876D59D4);
      case 4:
        int v13 = *(_DWORD *)&a1[v8];
        if (!v13) {
          break;
        }
LABEL_22:
        int v15 = (v13 - 1) << (8 * v8);
        if (v8 >= 4) {
          int v15 = 0;
        }
        if (((v6 + 7) & 0xFFFFFFF8) == 0xFFFFFFF8) {
          int v16 = *a1;
        }
        else {
          int v16 = *(_DWORD *)a1;
        }
        return v7 + (v16 | v15) + 1;
      default:
        break;
    }
  }
  if (v5 >= 0xFE) {
    return (*(uint64_t (**)(void))(v4 + 48))();
  }
  unsigned int v17 = *(unsigned __int8 *)(((unint64_t)&a1[v6 + 7] & 0xFFFFFFFFFFFFFFF8) + 8);
  if (v17 > 1) {
    return (v17 ^ 0xFF) + 1;
  }
  else {
    return 0;
  }
}

void storeEnumTagSinglePayload for Settings(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0xFE) {
    unsigned int v8 = 254;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  size_t v10 = ((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 9;
  char v11 = 8 * v10;
  if (v8 >= a3)
  {
    int v15 = 0;
    if (v8 >= a2)
    {
LABEL_17:
      switch(v15)
      {
        case 1:
          a1[v10] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_34;
        case 2:
          *(_WORD *)&a1[v10] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_34;
        case 3:
          goto LABEL_46;
        case 4:
          *(_DWORD *)&a1[v10] = 0;
          goto LABEL_33;
        default:
LABEL_33:
          if (a2)
          {
LABEL_34:
            if (v7 < 0xFE)
            {
              unint64_t v21 = (unint64_t)&a1[v9 + 7] & 0xFFFFFFFFFFFFFFF8;
              if (a2 > 0xFE)
              {
                *(unsigned char *)(v21 + 8) = 0;
                *(void *)unint64_t v21 = a2 - 255;
              }
              else
              {
                *(unsigned char *)(v21 + 8) = -(char)a2;
              }
            }
            else
            {
              uint64_t v20 = *(void (**)(void))(v6 + 56);
              v20();
            }
          }
          break;
      }
      return;
    }
  }
  else
  {
    unsigned int v12 = (a3 - v8 + 255) >> v11;
    if (v10 <= 3) {
      unsigned int v13 = v12 + 1;
    }
    else {
      unsigned int v13 = 2;
    }
    if (v13 >= 0x10000) {
      int v14 = 4;
    }
    else {
      int v14 = 2;
    }
    if (v13 < 0x100) {
      int v14 = 1;
    }
    if (v13 >= 2) {
      int v15 = v14;
    }
    else {
      int v15 = 0;
    }
    if (v8 >= a2) {
      goto LABEL_17;
    }
  }
  unsigned int v16 = ~v8 + a2;
  unsigned int v17 = (~(_BYTE)v8 + a2);
  if (v10 < 4) {
    int v18 = (v16 >> v11) + 1;
  }
  else {
    int v18 = 1;
  }
  if (v10 >= 4) {
    unsigned int v19 = v16;
  }
  else {
    unsigned int v19 = v17;
  }
  bzero(a1, v10);
  if (v10 == 1) {
    *a1 = v19;
  }
  else {
    *(_DWORD *)a1 = v19;
  }
  switch(v15)
  {
    case 1:
      a1[v10] = v18;
      break;
    case 2:
      *(_WORD *)&a1[v10] = v18;
      break;
    case 3:
LABEL_46:
      __break(1u);
      JUMPOUT(0x1876D5C00);
    case 4:
      *(_DWORD *)&a1[v10] = v18;
      break;
    default:
      return;
  }
}

uint64_t type metadata accessor for Settings()
{
  return __swift_instantiateGenericMetadata();
}

_UNKNOWN **sub_1876D5C40()
{
  return &protocol witness table for _EmptyScene;
}

void type metadata accessor for State<TextFieldState>()
{
  if (!lazy cache variable for type metadata for State<TextFieldState>)
  {
    unint64_t v0 = type metadata accessor for State();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for State<TextFieldState>);
    }
  }
}

uint64_t static __App._registerPerformanceTests(_:)(uint64_t a1)
{
  static TestingAppDelegate.performanceTests = a1;
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRetain();
}

void _BenchmarkHost._started(test:)(void *a1, uint64_t a2, uint64_t a3)
{
}

void _BenchmarkHost._finished(test:)(void *a1, uint64_t a2, uint64_t a3)
{
}

void _BenchmarkHost._started(test:)(void *a1, uint64_t a2, uint64_t a3, SEL *a4)
{
  uint64_t v5 = a1[3];
  uint64_t v6 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v5);
  uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 16))(v5, v6);
  uint64_t v9 = v8;
  id v10 = objc_msgSend(self, sel_sharedApplication);
  id v11 = (id)MEMORY[0x18C115780](v7, v9);
  objc_msgSend(v10, *a4, v11);
  swift_bridgeObjectRelease();
}

void _BenchmarkHost._failed(test:)(void *a1)
{
  uint64_t v1 = a1[3];
  uint64_t v2 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v1);
  uint64_t v3 = (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 16))(v1, v2);
  uint64_t v5 = v4;
  id v6 = objc_msgSend(self, sel_sharedApplication);
  id v7 = (id)MEMORY[0x18C115780](v3, v5);
  objc_msgSend(v6, sel_failedTest_withFailure_, v7, 0);
  swift_bridgeObjectRelease();
}

void *protocol witness for static PreferenceKey.reduce(value:nextValue:) in conformance ExtendedLaunchTestNameKey(void *result, void *(*a2)(void *__return_ptr))
{
  uint64_t v2 = result;
  uint64_t v3 = result[1];
  if (v3)
  {
    uint64_t v4 = *result;
  }
  else
  {
    uint64_t result = a2(v5);
    uint64_t v4 = v5[0];
    uint64_t v3 = v5[1];
  }
  *uint64_t v2 = v4;
  v2[1] = v3;
  return result;
}

uint64_t dispatch thunk of _PerformanceTest.name.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of _PerformanceTest.runTest(host:options:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 24))();
}

uint64_t sub_1876D5F10()
{
  return swift_getWitnessTable();
}

uint64_t type metadata accessor for ClarityUIWindowScene()
{
  return self;
}

uint64_t ClarityUIWindowScene.loadWindowWithRootView()()
{
  uint64_t v1 = v0;
  id v2 = objc_msgSend(self, sel_sharedApplication);
  id v3 = objc_msgSend(v2, sel_delegate);

  if (!v3) {
    goto LABEL_37;
  }
  swift_getObjectType();
  uint64_t v4 = swift_conformsToProtocol2();
  if (v4) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (v4) {
    id v6 = v3;
  }
  else {
    id v6 = 0;
  }
  if (v6)
  {
    uint64_t ObjectType = swift_getObjectType();
    swift_unknownObjectRetain();
    ClarityUIApplicationDelegate.makeRootViewForSimplifiedApplication()(ObjectType, v5);
    swift_unknownObjectRelease();
    goto LABEL_10;
  }
  type metadata accessor for AppDelegate();
  if (!swift_dynamicCastClass())
  {
    if (!objc_msgSend((id)swift_unknownObjectRetain(), sel_respondsToSelector_, sel_swiftui_rootViewForSimplifiedApplicationProvider))
    {
      swift_unknownObjectRelease();
      goto LABEL_37;
    }
    id v30 = objc_msgSend((id)swift_unknownObjectRetain(), sel_performSelector_, sel_swiftui_rootViewForSimplifiedApplicationProvider);
    id v31 = v3;
    if (v30
      && (swift_unknownObjectRetain(),
          type metadata accessor for RootViewForSimplifiedApplicationProvider(),
          (swift_dynamicCast() & 1) != 0))
    {
      if (*((void *)&v35 + 1))
      {
        outlined init with take of OptionalBinaryInteger(&v34, (uint64_t)v37);
        uint64_t v32 = v38;
        uint64_t v33 = v39;
        __swift_project_boxed_opaque_existential_1(v37, v38);
        RootViewForSimplifiedApplicationProvider.makeRootViewForSimplifiedApplication()(v32, v33);
        swift_unknownObjectRelease();
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v37);
LABEL_10:
        swift_retain();
        if (!objc_msgSend(v1, sel_delegate))
        {
LABEL_33:
          swift_release();
LABEL_37:
          uint64_t result = _assertionFailure(_:_:file:line:flags:)();
          __break(1u);
          return result;
        }
        uint64_t v8 = (void *)swift_dynamicCastObjCProtocolConditional();
        if (!v8)
        {
LABEL_32:
          swift_unknownObjectRelease();
          goto LABEL_33;
        }
        uint64_t v9 = v8;
        if ((objc_msgSend(v8, sel_respondsToSelector_, sel_window) & 1) != 0
          && (id v10 = objc_msgSend(v9, sel_window)) != 0)
        {
          id v11 = v10;
          objc_msgSend(v11, sel_setWindowScene_, v1);
          objc_msgSend(objc_msgSend(v1, sel_coordinateSpace), sel_bounds);
          double v13 = v12;
          double v15 = v14;
          double v17 = v16;
          double v19 = v18;
          swift_unknownObjectRelease();
          objc_msgSend(v11, sel_setFrame_, v13, v15, v17, v19);
        }
        else
        {
          id v20 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1F48]), sel_initWithWindowScene_, v1);
          unint64_t v21 = *(void **)&v1[OBJC_IVAR____TtC7SwiftUI20ClarityUIWindowScene_defaultCreatedWindow];
          *(void *)&v1[OBJC_IVAR____TtC7SwiftUI20ClarityUIWindowScene_defaultCreatedWindow] = v20;
          id v11 = v20;

          if (objc_msgSend(v9, sel_respondsToSelector_, sel_setWindow_))
          {
            objc_msgSend((id)swift_unknownObjectRetain(), sel_performSelector_withObject_, sel_setWindow_, v11);

            id v22 = v9;
LABEL_18:
            type metadata accessor for UIHostingController<ModifiedContent<AnyView, ClarityUIInterfaceIdiomModifier>>();
            id v24 = objc_allocWithZone(v23);
            swift_retain();
            id v25 = specialized UIHostingController.init(rootView:)();
            swift_release();
            id v26 = objc_msgSend(v25, sel_view);
            if (v26)
            {
              uint64_t v27 = v26;
              if (one-time initialization token for clarityUIContentBackground != -1) {
                swift_once();
              }
              objc_msgSend(v27, sel_setBackgroundColor_, static UIColor.clarityUIContentBackground);

              id v28 = v25;
              objc_msgSend(v11, sel_setRootViewController_, v28);
              swift_unknownObjectRelease();

              swift_unknownObjectRelease();
              return swift_release_n();
            }
            swift_release();
            __break(1u);
            goto LABEL_32;
          }
        }

        goto LABEL_18;
      }
    }
    else
    {
      uint64_t v36 = 0;
      long long v34 = 0u;
      long long v35 = 0u;
    }
    outlined destroy of RootViewForSimplifiedApplicationProvider?((uint64_t)&v34);
    goto LABEL_37;
  }

  return swift_unknownObjectRelease();
}

unint64_t type metadata accessor for UIWindow()
{
  unint64_t result = lazy cache variable for type metadata for UIWindow;
  if (!lazy cache variable for type metadata for UIWindow)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for UIWindow);
  }
  return result;
}

id ClarityUIWindowScene.__allocating_init(session:connectionOptions:)(void *a1, void *a2)
{
  id v5 = objc_msgSend(objc_allocWithZone(v2), sel_initWithSession_connectionOptions_, a1, a2);

  return v5;
}

id ClarityUIWindowScene.init(session:connectionOptions:)(void *a1, void *a2)
{
  *(void *)&v2[OBJC_IVAR____TtC7SwiftUI20ClarityUIWindowScene_defaultCreatedWindow] = 0;
  v7.receiver = v2;
  v7.super_class = (Class)type metadata accessor for ClarityUIWindowScene();
  id v5 = objc_msgSendSuper2(&v7, sel_initWithSession_connectionOptions_, a1, a2);

  return v5;
}

id ClarityUIWindowScene.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ClarityUIWindowScene();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t method lookup function for ClarityUIWindowScene(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for ClarityUIWindowScene);
}

uint64_t outlined destroy of RootViewForSimplifiedApplicationProvider?(uint64_t a1)
{
  type metadata accessor for RootViewForSimplifiedApplicationProvider?();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void type metadata accessor for RootViewForSimplifiedApplicationProvider?()
{
  if (!lazy cache variable for type metadata for RootViewForSimplifiedApplicationProvider?)
  {
    type metadata accessor for RootViewForSimplifiedApplicationProvider();
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for RootViewForSimplifiedApplicationProvider?);
    }
  }
}

unint64_t type metadata accessor for RootViewForSimplifiedApplicationProvider()
{
  unint64_t result = lazy cache variable for type metadata for RootViewForSimplifiedApplicationProvider;
  if (!lazy cache variable for type metadata for RootViewForSimplifiedApplicationProvider)
  {
    unint64_t result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for RootViewForSimplifiedApplicationProvider);
  }
  return result;
}

void type metadata accessor for UIHostingController<ModifiedContent<AnyView, ClarityUIInterfaceIdiomModifier>>()
{
  if (!lazy cache variable for type metadata for UIHostingController<ModifiedContent<AnyView, ClarityUIInterfaceIdiomModifier>>)
  {
    type metadata accessor for ModifiedContent<AnyView, ClarityUIInterfaceIdiomModifier>();
    lazy protocol witness table accessor for type ModifiedContent<AnyView, ClarityUIInterfaceIdiomModifier> and conformance <> ModifiedContent<A, B>();
    unint64_t v0 = type metadata accessor for UIHostingController();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for UIHostingController<ModifiedContent<AnyView, ClarityUIInterfaceIdiomModifier>>);
    }
  }
}

void type metadata accessor for ModifiedContent<AnyView, ClarityUIInterfaceIdiomModifier>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<AnyView, ClarityUIInterfaceIdiomModifier>)
  {
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<AnyView, ClarityUIInterfaceIdiomModifier>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<AnyView, ClarityUIInterfaceIdiomModifier> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<AnyView, ClarityUIInterfaceIdiomModifier> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<AnyView, ClarityUIInterfaceIdiomModifier> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<AnyView, ClarityUIInterfaceIdiomModifier>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<AnyView, ClarityUIInterfaceIdiomModifier> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void static WindowResizability.automatic.getter(unsigned char *a1@<X8>)
{
  *a1 = 0;
}

uint64_t (*static WindowResizability.automatic.modify(unsigned char *a1))()
{
  *a1 = 0;
  return static WindowResizability.automatic.modify;
}

void static WindowResizability.contentSize.getter(unsigned char *a1@<X8>)
{
  *a1 = 1;
}

uint64_t (*static WindowResizability.contentSize.modify(unsigned char *a1))()
{
  *a1 = 1;
  return static WindowResizability.automatic.modify;
}

void static WindowResizability.contentMinSize.getter(unsigned char *a1@<X8>)
{
  *a1 = 2;
}

void static WindowResizability.automatic.setter()
{
  static os_log_type_t.fault.getter();
  id v0 = (id)static Log.runtimeIssuesLog.getter();
  os_log(_:dso:log:_:_:)();
}

uint64_t (*static WindowResizability.contentMinSize.modify(unsigned char *a1))()
{
  *a1 = 2;
  return static WindowResizability.automatic.modify;
}

uint64_t Scene.windowResizability(_:)(char *a1, uint64_t a2, uint64_t a3)
{
  char v4 = *a1;
  return Scene.modifier<A>(_:)(&v4, a2, &unk_1ED44D4C0, a3);
}

ValueMetadata *type metadata accessor for WindowResizability()
{
  return &type metadata for WindowResizability;
}

uint64_t sub_1876D6C60()
{
  return swift_getWitnessTable();
}

ValueMetadata *type metadata accessor for WindowResizability.Role()
{
  return &type metadata for WindowResizability.Role;
}

unsigned char *storeEnumTagSinglePayload for WindowResizability(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *unint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1876D6DA0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

void *type metadata accessor for WindowResizabilityModifier()
{
  return &unk_1ED44D4C0;
}

unint64_t lazy protocol witness table accessor for type WindowResizability.Role and conformance WindowResizability.Role()
{
  unint64_t result = lazy protocol witness table cache variable for type WindowResizability.Role and conformance WindowResizability.Role;
  if (!lazy protocol witness table cache variable for type WindowResizability.Role and conformance WindowResizability.Role)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WindowResizability.Role and conformance WindowResizability.Role);
  }
  return result;
}

uint64_t static WindowResizabilityModifier._makeScene(modifier:inputs:body:)@<X0>(int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(unint64_t *__return_ptr)@<X2>, uint64_t a4@<X8>)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  int v5 = *a1;
  int v6 = *(_DWORD *)(a2 + 8);
  uint64_t v7 = *(void *)(a2 + 16);
  uint64_t v8 = *(void *)(a2 + 40);
  unint64_t v9 = *(void *)(a2 + 48);
  int v10 = *(_DWORD *)(a2 + 56);
  unint64_t v18 = *(void *)a2;
  int v19 = v6;
  uint64_t v20 = v7;
  long long v21 = *(_OWORD *)(a2 + 24);
  uint64_t v22 = v8;
  unint64_t v23 = v9;
  int v24 = v10;
  a3(&v16);
  unint64_t v18 = v9;
  int v19 = v10;
  uint64_t result = PreferencesInputs.contains<A>(_:includeHostPreferences:)();
  if (result)
  {
    LODWORD(v18) = v5;
    type metadata accessor for _GraphValue<WindowResizabilityModifier>();
    unsigned int v12 = _GraphValue.value.getter();
    unint64_t v18 = v16;
    int v19 = v17;
    uint64_t v13 = PreferencesOutputs.subscript.getter();
    unsigned int v14 = *MEMORY[0x1E4F4E7A0];
    if ((v13 & 0x100000000) == 0) {
      unsigned int v14 = v13;
    }
    unint64_t v18 = __PAIR64__(v14, v12);
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    lazy protocol witness table accessor for type WindowResizabilityModifier.UpdateSceneList and conformance WindowResizabilityModifier.UpdateSceneList();
    Attribute.init<A>(body:value:flags:update:)();
    LOBYTE(v18) = 0;
    uint64_t result = PreferencesOutputs.subscript.setter();
  }
  int v15 = v17;
  *(void *)a4 = v16;
  *(_DWORD *)(a4 + 8) = v15;
  return result;
}

char *WindowResizabilityModifier.UpdateSceneList.value.getter(uint64_t a1)
{
  if (*MEMORY[0x1E4F4E7A0] == HIDWORD(a1)) {
    return (char *)MEMORY[0x1E4FBC860];
  }
  uint64_t Value = AGGraphGetValue();
  uint64_t v2 = *(void *)(*(void *)Value + 16);
  if (!v2) {
    return (char *)MEMORY[0x1E4FBC860];
  }
  uint64_t v3 = *(void *)Value + 32;
  swift_bridgeObjectRetain();
  unsigned int v4 = (char *)MEMORY[0x1E4FBC860];
  do
  {
    outlined init with copy of SceneList.Item(v3, (uint64_t)v9);
    v9[208] = *(unsigned char *)AGGraphGetValue();
    outlined init with copy of SceneList.Item((uint64_t)v9, (uint64_t)v8);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      unsigned int v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v4 + 2) + 1, 1, v4);
    }
    unint64_t v6 = *((void *)v4 + 2);
    unint64_t v5 = *((void *)v4 + 3);
    if (v6 >= v5 >> 1) {
      unsigned int v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v5 > 1), v6 + 1, 1, v4);
    }
    *((void *)v4 + 2) = v6 + 1;
    memcpy(&v4[280 * v6 + 32], v8, 0x118uLL);
    outlined destroy of SceneList.Item((uint64_t)v9);
    v3 += 280;
    --v2;
  }
  while (v2);
  swift_bridgeObjectRelease();
  return v4;
}

char *protocol witness for Rule.value.getter in conformance WindowResizabilityModifier.UpdateSceneList@<X0>(char **a1@<X8>)
{
  uint64_t result = WindowResizabilityModifier.UpdateSceneList.value.getter(*v1);
  *a1 = result;
  return result;
}

void type metadata accessor for _GraphValue<WindowResizabilityModifier>()
{
  if (!lazy cache variable for type metadata for _GraphValue<WindowResizabilityModifier>)
  {
    unint64_t v0 = type metadata accessor for _GraphValue();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _GraphValue<WindowResizabilityModifier>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type WindowResizabilityModifier.UpdateSceneList and conformance WindowResizabilityModifier.UpdateSceneList()
{
  unint64_t result = lazy protocol witness table cache variable for type WindowResizabilityModifier.UpdateSceneList and conformance WindowResizabilityModifier.UpdateSceneList;
  if (!lazy protocol witness table cache variable for type WindowResizabilityModifier.UpdateSceneList and conformance WindowResizabilityModifier.UpdateSceneList)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WindowResizabilityModifier.UpdateSceneList and conformance WindowResizabilityModifier.UpdateSceneList);
  }
  return result;
}

void *type metadata accessor for WindowResizabilityModifier.UpdateSceneList()
{
  return &unk_1ED44D430;
}

void static __App.run<A>(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 - 8);
  MEMORY[0x1F4188790](a1);
  unint64_t v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for __App.ShoeboxAdaptor();
  double v8 = MEMORY[0x1F4188790](v7);
  int v10 = (char *)&v11 - v9;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v4 + 16))(v6, a1, a2, v8);
  (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v10, v6, a2);
  swift_getWitnessTable();
  runApp<A>(_:)();
}

uint64_t type metadata accessor for __App.ShoeboxAdaptor()
{
  return __swift_instantiateGenericMetadata();
}

ValueMetadata *type metadata accessor for __App()
{
  return &type metadata for __App;
}

uint64_t getEnumTagSinglePayload for __App.ShoeboxAdaptor(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (!a2) {
    return 0;
  }
  unsigned int v7 = a2 - v5;
  if (a2 <= v5) {
    goto LABEL_19;
  }
  char v8 = 8 * v6;
  if (v6 <= 3)
  {
    unsigned int v10 = ((v7 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      int v9 = *(_DWORD *)((char *)a1 + v6);
      if (!v9) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      int v9 = *(unsigned __int16 *)((char *)a1 + v6);
      if (!*(unsigned __int16 *)((char *)a1 + v6)) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_19:
      if (v5) {
        return (*(uint64_t (**)(void))(v4 + 48))();
      }
      return 0;
    }
  }
  int v9 = *((unsigned __int8 *)a1 + v6);
  if (!*((unsigned char *)a1 + v6)) {
    goto LABEL_19;
  }
LABEL_11:
  int v11 = (v9 - 1) << v8;
  if (v6 > 3) {
    int v11 = 0;
  }
  if (v6)
  {
    if (v6 > 3) {
      LODWORD(v6) = 4;
    }
    switch((int)v6)
    {
      case 2:
        LODWORD(v6) = *a1;
        break;
      case 3:
        LODWORD(v6) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v6) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v6) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v5 + (v6 | v11) + 1;
}

void storeEnumTagSinglePayload for __App.ShoeboxAdaptor(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = *(void *)(v6 + 64);
  BOOL v9 = a3 >= v7;
  unsigned int v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      unsigned int v14 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v14))
      {
        int v11 = 4;
      }
      else if (v14 >= 0x100)
      {
        int v11 = 2;
      }
      else
      {
        int v11 = v14 > 1;
      }
    }
    else
    {
      int v11 = 1;
    }
  }
  else
  {
    int v11 = 0;
  }
  if (v7 < a2)
  {
    unsigned int v12 = ~v7 + a2;
    if (v8 < 4)
    {
      int v13 = (v12 >> (8 * v8)) + 1;
      if (v8)
      {
        int v15 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if (v8 == 3)
        {
          *(_WORD *)a1 = v15;
          a1[2] = BYTE2(v15);
        }
        else if (v8 == 2)
        {
          *(_WORD *)a1 = v15;
        }
        else
        {
          *a1 = v15;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v12;
      int v13 = 1;
    }
    switch(v11)
    {
      case 1:
        a1[v8] = v13;
        return;
      case 2:
        *(_WORD *)&a1[v8] = v13;
        return;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v8] = v13;
        return;
      default:
        return;
    }
  }
  switch(v11)
  {
    case 1:
      a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 2:
      *(_WORD *)&a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 3:
LABEL_34:
      __break(1u);
      JUMPOUT(0x1876D7724);
    case 4:
      *(_DWORD *)&a1[v8] = 0;
      goto LABEL_20;
    default:
LABEL_20:
      if (a2)
      {
LABEL_21:
        unint64_t v16 = *(void (**)(void))(v6 + 56);
        v16();
      }
      return;
  }
}

uint64_t associated type witness table accessor for App.Body : Scene in __App.ShoeboxAdaptor<A>()
{
  return swift_getOpaqueTypeConformance2();
}

void __App.ShoeboxAdaptor.init()()
{
}

uint64_t __App.ShoeboxAdaptor.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v23 = a2;
  uint64_t v5 = *(void *)(a1 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  MEMORY[0x1F4188790](a1);
  unsigned int v7 = (char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *(void *)(v8 + 16);
  uint64_t v9 = *(void *)(v8 + 24);
  uint64_t v11 = type metadata accessor for WindowGroup();
  uint64_t v22 = *(void *)(v11 - 8);
  MEMORY[0x1F4188790](v11);
  int v13 = (char *)&v22 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v15 = MEMORY[0x1F4188790](v14);
  int v17 = (char *)&v22 - v16;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v5 + 16))(v7, v3, a1, v15);
  unint64_t v18 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v19 = swift_allocObject();
  *(void *)(v19 + 16) = v10;
  *(void *)(v19 + 24) = v9;
  (*(void (**)(unint64_t, char *, uint64_t))(v5 + 32))(v19 + v18, v7, a1);
  WindowGroup.init(makeContent:)((uint64_t)partial apply for closure #1 in __App.ShoeboxAdaptor.body.getter, v19, v13);
  swift_getWitnessTable();
  static ViewBuilder.buildExpression<A>(_:)((uint64_t)v13, v11, (uint64_t)v17);
  uint64_t v20 = *(uint64_t (**)(char *, uint64_t))(v22 + 8);
  v20(v13, v11);
  static SceneBuilder.buildBlock<A>(_:)((uint64_t)v17, v11, v23);
  return v20(v17, v11);
}

uint64_t closure #1 in __App.ShoeboxAdaptor.body.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 - 8);
  uint64_t v4 = MEMORY[0x1F4188790](a1);
  uint64_t v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  static ViewBuilder.buildExpression<A>(_:)(v4);
  static ViewBuilder.buildExpression<A>(_:)(v6);
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v6, a2);
}

void protocol witness for App.init() in conformance __App.ShoeboxAdaptor<A>()
{
}

uint64_t sub_1876D7B3C()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)(type metadata accessor for __App.ShoeboxAdaptor() - 8) + 80);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v1 - 8) + 8))(v0 + ((v2 + 32) & ~v2), v1);

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in __App.ShoeboxAdaptor.body.getter()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = *(void *)(type metadata accessor for __App.ShoeboxAdaptor() - 8);
  uint64_t v3 = v0 + ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));

  return closure #1 in __App.ShoeboxAdaptor.body.getter(v3, v1);
}

uint64_t sub_1876D7C9C()
{
  type metadata accessor for WindowGroup();

  return swift_getWitnessTable();
}

void protocol witness for View.body.getter in conformance ListStyleContent()
{
}

uint64_t protocol witness for static Rule.initialValue.getter in conformance _ListValue<A, B>.Init1@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for _ListValue();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56))(a1, 1, 1, v2);
}

uint64_t protocol witness for static ViewModifier._viewListCount(inputs:body:) in conformance ListStyleWriter<A>()
{
  return static ViewModifier<>._viewListCount(inputs:body:)();
}

BOOL protocol witness for static StyleContext.accepts<A>(_:at:) in conformance AnyListStyleContext(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return specialized static AnyListStyleContext.accepts<A>(_:at:)(a3);
}

uint64_t protocol witness for static StyleContext.acceptsAny<A>(_:) in conformance AnyListStyleContext(uint64_t a1, uint64_t a2)
{
  MEMORY[0x1F4188790](a1);
  if (a2) {
    memcpy((char *)&v6 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v3, v4);
  }
  return static StyleContext.acceptsAny<A>(_:)() & 1;
}

uint64_t protocol witness for static StyleContext.visitStyle<A>(_:) in conformance AnyListStyleContext(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return MEMORY[0x1F40FDA08](a1, a4, a2, a5, a3);
}

uint64_t static ResolvedList._makeView(view:inputs:)@<X0>(int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  int v5 = *a1;
  uint64_t v6 = *(void *)a2;
  int v7 = *(_DWORD *)(a2 + 8);
  uint64_t v8 = *(void *)(a2 + 16);
  int v10 = *(_DWORD *)(a2 + 24);
  int v9 = *(_DWORD *)(a2 + 28);
  int v11 = *(_DWORD *)(a2 + 32);
  uint64_t v12 = *(void *)(a2 + 40);
  uint64_t v13 = *(void *)(a2 + 48);
  int v16 = *(_DWORD *)(a2 + 36);
  int v17 = *(_DWORD *)(a2 + 56);
  int v18 = *(_DWORD *)(a2 + 60);
  int v19 = *(_DWORD *)(a2 + 64);
  int v20 = *(_DWORD *)(a2 + 68);
  int v21 = *(_DWORD *)(a2 + 72);
  int v22 = *(_DWORD *)(a2 + 76);
  int v23 = *(_DWORD *)(a2 + 80);
  lazy protocol witness table accessor for type ListStyleInput and conformance ListStyleInput();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  PropertyList.subscript.getter();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  if (v27)
  {
    uint64_t v14 = v28;
    v43[0] = v5;
    uint64_t v27 = v6;
    LODWORD(v28) = v7;
    uint64_t v29 = v8;
    int v30 = v10;
    int v31 = v9;
    int v32 = v11;
    int v33 = v16;
    uint64_t v34 = v12;
    uint64_t v35 = v13;
    int v36 = v17;
    int v37 = v18;
    int v38 = v19;
    int v39 = v20;
    int v40 = v21;
    int v41 = v22;
    int v42 = v23;
    return (*(uint64_t (**)(int *))(v14 + 8))(v43);
  }
  else
  {
    v43[0] = v5;
    uint64_t v27 = v6;
    LODWORD(v28) = v7;
    uint64_t v29 = v8;
    int v30 = v10;
    int v31 = v9;
    int v32 = v11;
    int v33 = v16;
    uint64_t v34 = v12;
    uint64_t v35 = v13;
    int v36 = v17;
    int v37 = v18;
    int v38 = v19;
    int v39 = v20;
    int v40 = v21;
    int v41 = v22;
    int v42 = v23;
    return static ResolvedList.makeView<A>(view:style:inputs:)(v43, 0, &v27, a3, (uint64_t)&type metadata for DefaultListStyle, a4, (uint64_t)&protocol witness table for DefaultListStyle, a5);
  }
}

uint64_t static ResolvedList.makeView<A>(view:style:inputs:)@<X0>(int *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v36 = a2;
  int v40 = a1;
  uint64_t v41 = a8;
  uint64_t v13 = *(void *)(a5 - 8);
  MEMORY[0x1F4188790](a1);
  double v15 = (char *)&v33 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v42 = v17;
  uint64_t v43 = v16;
  uint64_t v44 = v19;
  uint64_t v45 = v18;
  uint64_t v20 = type metadata accessor for _ListValue.Init1();
  uint64_t v34 = *(void *)(v20 - 8);
  MEMORY[0x1F4188790](v20);
  int v22 = (char *)&v33 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v23);
  uint64_t v25 = (char *)&v33 - v24;
  int v26 = *v40;
  uint64_t v39 = *a3;
  int v38 = *((_DWORD *)a3 + 2);
  uint64_t v37 = a3[2];
  LODWORD(v40) = *((_DWORD *)a3 + 20);
  LODWORD(v42) = v26;
  type metadata accessor for ResolvedList();
  type metadata accessor for _GraphValue();
  long long v35 = *(_OWORD *)(a3 + 5);
  uint64_t v27 = a3[3];
  uint64_t v28 = a3[4];
  long long v33 = *(_OWORD *)(a3 + 7);
  uint64_t v29 = a3[9];
  LODWORD(a3) = _GraphValue.value.getter();
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v15, v36, a5);
  *(_DWORD *)uint64_t v25 = a3;
  uint64_t v42 = a5;
  uint64_t v43 = a4;
  uint64_t v44 = a7;
  uint64_t v45 = a6;
  uint64_t v30 = type metadata accessor for _ListValue.Init1();
  (*(void (**)(char *, char *, uint64_t))(v13 + 32))(&v25[*(int *)(v30 + 52)], v15, a5);
  uint64_t v31 = v34;
  (*(void (**)(char *, char *, uint64_t))(v34 + 16))(v22, v25, v20);
  uint64_t v42 = a5;
  uint64_t v43 = a4;
  uint64_t v44 = a7;
  uint64_t v45 = a6;
  type metadata accessor for _ListValue();
  swift_getWitnessTable();
  _GraphValue.init<A>(_:)();
  uint64_t v42 = v39;
  LODWORD(v43) = v38;
  uint64_t v44 = v37;
  uint64_t v45 = v27;
  uint64_t v46 = v28;
  long long v47 = v35;
  long long v48 = v33;
  uint64_t v49 = v29;
  int v50 = (int)v40;
  (*(void (**)(char *, uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t))(a7 + 8))(v51, &v42, a4, a6, a5, a7);
  return (*(uint64_t (**)(char *, uint64_t))(v31 + 8))(v25, v20);
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance ResolvedList<A>@<X0>(int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return static ResolvedList._makeView(view:inputs:)(a1, a2, *(void *)(a3 + 16), *(void *)(a3 + 24), a4);
}

void protocol witness for View.body.getter in conformance ResolvedList<A>()
{
}

uint64_t static StyleType.makeView<A>(view:style:inputs:)(_DWORD *a1, uint64_t a2, uint64_t a3, int a4, uint64_t *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v14 = *a5;
  int v15 = *((_DWORD *)a5 + 2);
  uint64_t v16 = a5[2];
  int v17 = *((_DWORD *)a5 + 20);
  LODWORD(v24) = *a1;
  type metadata accessor for ResolvedList();
  type metadata accessor for _GraphValue();
  uint64_t v18 = a5[3];
  uint64_t v19 = a5[4];
  long long v22 = *(_OWORD *)(a5 + 7);
  long long v23 = *(_OWORD *)(a5 + 5);
  uint64_t v20 = a5[9];
  int v35 = _GraphValue.value.getter();
  int v36 = a4;
  type metadata accessor for _ListValue();
  int v26 = HIDWORD(a7);
  type metadata accessor for _ListValue.Init2();
  swift_getWitnessTable();
  _GraphValue.init<A>(_:)();
  uint64_t v24 = v14;
  int v25 = v15;
  uint64_t v27 = v16;
  uint64_t v28 = v18;
  uint64_t v29 = v19;
  long long v30 = v23;
  long long v31 = v22;
  uint64_t v32 = v20;
  int v33 = v17;
  return (*(uint64_t (**)(unsigned char *, uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t))(a8 + 8))(v34, &v24, a7, a9, a6, a8);
}

{
  uint64_t v14;
  int v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  long long v22;
  long long v23;
  uint64_t v24;
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  long long v30;
  long long v31;
  uint64_t v32;
  int v33;
  unsigned char v34[4];
  int v35;
  int v36;

  uint64_t v14 = *a5;
  int v15 = *((_DWORD *)a5 + 2);
  uint64_t v16 = a5[2];
  int v17 = *((_DWORD *)a5 + 20);
  LODWORD(v24) = *a1;
  type metadata accessor for ResolvedTabView();
  type metadata accessor for _GraphValue();
  uint64_t v18 = a5[3];
  uint64_t v19 = a5[4];
  long long v22 = *(_OWORD *)(a5 + 7);
  long long v23 = *(_OWORD *)(a5 + 5);
  uint64_t v20 = a5[9];
  int v35 = _GraphValue.value.getter();
  int v36 = a4;
  type metadata accessor for _TabViewValue();
  int v26 = HIDWORD(a7);
  type metadata accessor for _TabViewValue.Init2();
  swift_getWitnessTable();
  _GraphValue.init<A>(_:)();
  uint64_t v24 = v14;
  int v25 = v15;
  uint64_t v27 = v16;
  uint64_t v28 = v18;
  uint64_t v29 = v19;
  long long v30 = v23;
  long long v31 = v22;
  uint64_t v32 = v20;
  int v33 = v17;
  return (*(uint64_t (**)(unsigned char *, uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t))(a8 + 8))(v34, &v24, a7, a9, a6, a8);
}

{
  uint64_t v14;
  int v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  long long v22;
  long long v23;
  uint64_t v24;
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  long long v30;
  long long v31;
  uint64_t v32;
  int v33;
  unsigned char v34[4];
  int v35;
  int v36;

  uint64_t v14 = *a5;
  int v15 = *((_DWORD *)a5 + 2);
  uint64_t v16 = a5[2];
  int v17 = *((_DWORD *)a5 + 20);
  LODWORD(v24) = *a1;
  type metadata accessor for ResolvedPicker();
  type metadata accessor for _GraphValue();
  uint64_t v18 = a5[3];
  uint64_t v19 = a5[4];
  long long v22 = *(_OWORD *)(a5 + 7);
  long long v23 = *(_OWORD *)(a5 + 5);
  uint64_t v20 = a5[9];
  int v35 = _GraphValue.value.getter();
  int v36 = a4;
  type metadata accessor for _PickerValue();
  int v26 = HIDWORD(a7);
  type metadata accessor for _PickerValue.Init2();
  swift_getWitnessTable();
  _GraphValue.init<A>(_:)();
  uint64_t v24 = v14;
  int v25 = v15;
  uint64_t v27 = v16;
  uint64_t v28 = v18;
  uint64_t v29 = v19;
  long long v30 = v23;
  long long v31 = v22;
  uint64_t v32 = v20;
  int v33 = v17;
  return (*(uint64_t (**)(unsigned char *, uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t))(a8 + 8))(v34, &v24, a7, a9, a6, a8);
}

uint64_t protocol witness for static AnyStyleType.makeView<A>(view:style:inputs:) in conformance StyleType<A>(_DWORD *a1, uint64_t a2, uint64_t a3, int a4, uint64_t *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return static StyleType.makeView<A>(view:style:inputs:)(a1, a2, a3, a4, a5, *(void *)(a8 + 16), a6, *(void *)(a8 + 24), a7);
}

{
  return static StyleType.makeView<A>(view:style:inputs:)(a1, a2, a3, a4, a5, *(void *)(a8 + 16), a6, *(void *)(a8 + 24), a7);
}

{
  return static StyleType.makeView<A>(view:style:inputs:)(a1, a2, a3, a4, a5, *(void *)(a8 + 16), a6, *(void *)(a8 + 24), a7);
}

void View.drawsRowSeparators(_:)()
{
}

uint64_t dispatch thunk of static ListStyle._makeView<A>(value:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 8))();
}

uint64_t dispatch thunk of static ListStyle._makeViewList<A>(value:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 16))();
}

uint64_t *initializeBufferWithCopyOfBuffer for _ListValue(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  size_t v4 = a1;
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  uint64_t v7 = *(void *)(a3 + 24);
  uint64_t v8 = *(void *)(v7 - 8);
  int v9 = *(_DWORD *)(v8 + 80);
  uint64_t v10 = v9 & 0xF8 | 7;
  uint64_t v11 = v6 + v10;
  uint64_t v12 = (v6 + v10) & ~v10;
  unint64_t v13 = *(void *)(v8 + 64);
  if (*(_DWORD *)(v8 + 84)) {
    size_t v14 = *(void *)(v8 + 64);
  }
  else {
    size_t v14 = v13 + 1;
  }
  if (v14 > v13) {
    unint64_t v13 = v14;
  }
  if (v13 <= 8) {
    uint64_t v15 = 8;
  }
  else {
    uint64_t v15 = v13;
  }
  size_t v16 = v15 + (((v9 & 0xF8) + 23) & ~v10) + 1;
  unint64_t v17 = v16 + v12;
  uint64_t v18 = *(_DWORD *)(v5 + 80) & 0xF8 | v10;
  if (v18 != 7 || ((*(_DWORD *)(v5 + 80) | v9) & 0x100000) != 0 || v17 > 0x18)
  {
    uint64_t v21 = *a2;
    *size_t v4 = *a2;
    size_t v4 = (uint64_t *)(v21 + ((v18 + 16) & ~v18));
    swift_retain();
  }
  else
  {
    uint64_t v22 = ~v10;
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    long long v23 = (void *)(((unint64_t)v4 + v11) & v22);
    uint64_t v24 = (void *)(((unint64_t)a2 + v11) & v22);
    int v25 = (void *)(((unint64_t)v24 + 15) & 0xFFFFFFFFFFFFFFF8);
    if (*v25 < 0xFFFFFFFFuLL)
    {
      memcpy(v23, v24, v16);
    }
    else
    {
      *long long v23 = *v24;
      int v26 = (void *)(((unint64_t)v23 + 15) & 0xFFFFFFFFFFFFFFF8);
      void *v26 = *v25;
      uint64_t v27 = (void *)(((unint64_t)v26 + v10 + 8) & v22);
      uint64_t v28 = (unsigned __int8 *)(((unint64_t)v25 + v10 + 8) & v22);
      unsigned int v29 = v28[v15];
      swift_retain();
      swift_retain();
      if (v29 >= 3)
      {
        if (v15 <= 3) {
          uint64_t v30 = v15;
        }
        else {
          uint64_t v30 = 4;
        }
        switch(v30)
        {
          case 1:
            int v31 = *v28;
            goto LABEL_29;
          case 2:
            int v31 = *(unsigned __int16 *)v28;
            goto LABEL_29;
          case 3:
            int v31 = *(unsigned __int16 *)v28 | (v28[2] << 16);
            goto LABEL_29;
          case 4:
            int v31 = *(_DWORD *)v28;
LABEL_29:
            int v32 = (v31 | ((v29 - 3) << (8 * v15))) + 3;
            unsigned int v33 = v31 + 3;
            if (v15 >= 4) {
              unsigned int v29 = v33;
            }
            else {
              unsigned int v29 = v32;
            }
            break;
          default:
            break;
        }
      }
      if (v29 == 2)
      {
        (*(void (**)(void *, unsigned __int8 *, uint64_t))(v8 + 16))(v27, v28, v7);
        char v34 = 2;
LABEL_40:
        *((unsigned char *)v27 + v15) = v34;
        return v4;
      }
      if (v29 == 1)
      {
        if ((*(unsigned int (**)(unsigned __int8 *, uint64_t, uint64_t))(v8 + 48))(v28, 1, v7))
        {
          memcpy(v27, v28, v14);
        }
        else
        {
          (*(void (**)(void *, unsigned __int8 *, uint64_t))(v8 + 16))(v27, v28, v7);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v8 + 56))(v27, 0, 1, v7);
        }
        char v34 = 1;
        goto LABEL_40;
      }
      *uint64_t v27 = *(void *)v28;
      *((unsigned char *)v27 + v15) = 0;
      swift_bridgeObjectRetain();
    }
  }
  return v4;
}

uint64_t assignWithCopy for _ListValue(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8) + 24;
  (*(void (**)(void))v6)();
  uint64_t v64 = *(void *)(a3 + 24);
  uint64_t v7 = *(void *)(v64 - 8);
  int v8 = *(_DWORD *)(v7 + 84);
  uint64_t v62 = v7;
  uint64_t v9 = *(_DWORD *)(v7 + 80) & 0xF8;
  uint64_t v10 = v9 | 7;
  uint64_t v11 = *(void *)(v6 + 40) + (v9 | 7);
  uint64_t v12 = ~(v9 | 7);
  unint64_t v13 = (void *)((v11 + a1) & v12);
  size_t v14 = (void *)((v11 + a2) & v12);
  size_t v15 = *(void *)(v7 + 64);
  uint64_t v16 = (v9 + 23) & v12;
  unint64_t v17 = (void *)(((unint64_t)v13 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v18 = (unint64_t *)(((unint64_t)v14 + 15) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v19 = *v18;
  if (*v17 >= 0xFFFFFFFFuLL)
  {
    uint64_t v63 = a1;
    if (v19 >= 0xFFFFFFFF)
    {
      *unint64_t v13 = *v14;
      swift_retain();
      swift_release();
      void *v17 = *v18;
      swift_retain();
      swift_release();
      unint64_t v20 = (unint64_t)v17 + v10 + 8;
      uint64_t v21 = (unsigned __int8 *)(v20 & v12);
      unint64_t v22 = (unint64_t)v18 + v10 + 8;
      long long v23 = (unsigned __int8 *)(v22 & v12);
      if ((v20 & v12) == (v22 & v12)) {
        return a1;
      }
      if (v8) {
        size_t v24 = v15;
      }
      else {
        size_t v24 = v15 + 1;
      }
      if (v24 <= v15) {
        unint64_t v25 = v15;
      }
      else {
        unint64_t v25 = v24;
      }
      if (v25 <= 8) {
        uint64_t v26 = 8;
      }
      else {
        uint64_t v26 = v25;
      }
      unsigned int v27 = v21[v26];
      unsigned int v28 = v27 - 3;
      if (v27 < 3)
      {
        uint64_t v30 = v62;
        uint64_t v31 = v64;
LABEL_67:
        if (v27 == 2) {
          goto LABEL_100;
        }
      }
      else
      {
        if (v26 <= 3) {
          uint64_t v29 = v26;
        }
        else {
          uint64_t v29 = 4;
        }
        uint64_t v30 = v62;
        uint64_t v31 = v64;
        switch(v29)
        {
          case 1:
            int v32 = *v21;
            break;
          case 2:
            int v32 = *(unsigned __int16 *)v21;
            break;
          case 3:
            int v32 = *(unsigned __int16 *)v21 | (v21[2] << 16);
            break;
          case 4:
            int v32 = *(_DWORD *)v21;
            break;
          default:
            goto LABEL_67;
        }
        int v56 = (v32 | (v28 << (8 * v26))) + 3;
        unsigned int v27 = v32 + 3;
        if (v26 < 4) {
          unsigned int v27 = v56;
        }
        if (v27 == 2) {
          goto LABEL_100;
        }
      }
      if (v27 != 1)
      {
        swift_bridgeObjectRelease();
        goto LABEL_102;
      }
      if ((*(unsigned int (**)(unsigned __int8 *, uint64_t, uint64_t))(v30 + 48))(v21, 1, v31))
      {
LABEL_102:
        unsigned int v57 = v23[v26];
        unsigned int v58 = v57 - 3;
        if (v57 >= 3)
        {
          if (v26 <= 3) {
            uint64_t v59 = v26;
          }
          else {
            uint64_t v59 = 4;
          }
          switch(v59)
          {
            case 1:
              int v60 = *v23;
              goto LABEL_111;
            case 2:
              int v60 = *(unsigned __int16 *)v23;
              goto LABEL_111;
            case 3:
              int v60 = *(unsigned __int16 *)v23 | (v23[2] << 16);
              goto LABEL_111;
            case 4:
              int v60 = *(_DWORD *)v23;
LABEL_111:
              int v61 = (v60 | (v58 << (8 * v26))) + 3;
              unsigned int v57 = v60 + 3;
              if (v26 < 4) {
                unsigned int v57 = v61;
              }
              break;
            default:
              break;
          }
        }
        if (v57 != 2)
        {
          if (v57 == 1)
          {
            if ((*(unsigned int (**)(unsigned __int8 *, uint64_t, uint64_t))(v30 + 48))(v23, 1, v31))
            {
              memcpy(v21, v23, v24);
            }
            else
            {
              (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v30 + 16))(v21, v23, v31);
              (*(void (**)(unsigned __int8 *, void, uint64_t, uint64_t))(v30 + 56))(v21, 0, 1, v31);
            }
            a1 = v63;
            v21[v26] = 1;
          }
          else
          {
            a1 = v63;
            *(void *)uint64_t v21 = *(void *)v23;
            v21[v26] = 0;
            swift_bridgeObjectRetain();
          }
          return a1;
        }
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v30 + 16))(v21, v23, v31);
        v21[v26] = 2;
        return v63;
      }
LABEL_100:
      (*(void (**)(unsigned __int8 *, uint64_t))(v30 + 8))(v21, v31);
      goto LABEL_102;
    }
    swift_release();
    swift_release();
    uint64_t v42 = (unsigned __int8 *)(((unint64_t)v17 + v10 + 8) & v12);
    if (v8) {
      unint64_t v43 = v15;
    }
    else {
      unint64_t v43 = v15 + 1;
    }
    if (v43 <= v15) {
      unint64_t v43 = v15;
    }
    if (v43 <= 8) {
      uint64_t v44 = 8;
    }
    else {
      uint64_t v44 = v43;
    }
    unsigned int v45 = v42[v44];
    unsigned int v46 = v45 - 3;
    if (v45 < 3)
    {
      uint64_t v48 = v62;
      uint64_t v49 = v64;
LABEL_63:
      if (v45 == 2) {
        goto LABEL_87;
      }
    }
    else
    {
      if (v44 <= 3) {
        uint64_t v47 = v44;
      }
      else {
        uint64_t v47 = 4;
      }
      uint64_t v48 = v62;
      uint64_t v49 = v64;
      switch(v47)
      {
        case 1:
          int v50 = *v42;
          break;
        case 2:
          int v50 = *(unsigned __int16 *)v42;
          break;
        case 3:
          int v50 = *(unsigned __int16 *)v42 | (v42[2] << 16);
          break;
        case 4:
          int v50 = *(_DWORD *)v42;
          break;
        default:
          goto LABEL_63;
      }
      int v54 = (v50 | (v46 << (8 * v44))) + 3;
      unsigned int v45 = v50 + 3;
      if (v44 < 4) {
        unsigned int v45 = v54;
      }
      if (v45 == 2) {
        goto LABEL_87;
      }
    }
    if (v45 != 1)
    {
      swift_bridgeObjectRelease();
      goto LABEL_89;
    }
    if ((*(unsigned int (**)(unsigned __int8 *, uint64_t, uint64_t))(v48 + 48))(v42, 1, v49))
    {
LABEL_89:
      memcpy(v13, v14, (v16 | 1) + v44);
      return v63;
    }
LABEL_87:
    (*(void (**)(unsigned __int8 *, uint64_t))(v48 + 8))(v42, v49);
    goto LABEL_89;
  }
  if (v19 < 0xFFFFFFFF)
  {
    if (v8) {
      unint64_t v51 = *(void *)(*(void *)(v64 - 8) + 64);
    }
    else {
      unint64_t v51 = v15 + 1;
    }
    if (v51 <= v15) {
      unint64_t v51 = *(void *)(*(void *)(v64 - 8) + 64);
    }
    if (v51 <= 8) {
      unint64_t v51 = 8;
    }
    memcpy(v13, v14, (v16 | 1) + v51);
  }
  else
  {
    uint64_t v63 = a1;
    *unint64_t v13 = *v14;
    void *v17 = *v18;
    unsigned int v33 = (void *)(((unint64_t)v17 + v10 + 8) & v12);
    char v34 = (unsigned __int8 *)(((unint64_t)v18 + v10 + 8) & v12);
    if (v8) {
      size_t v35 = v15;
    }
    else {
      size_t v35 = v15 + 1;
    }
    if (v35 <= v15) {
      unint64_t v36 = v15;
    }
    else {
      unint64_t v36 = v35;
    }
    if (v36 <= 8) {
      uint64_t v37 = 8;
    }
    else {
      uint64_t v37 = v36;
    }
    unsigned int v38 = v34[v37];
    swift_retain();
    swift_retain();
    if (v38 < 3)
    {
      uint64_t v40 = v64;
LABEL_58:
      if (v38 == 2)
      {
LABEL_78:
        (*(void (**)(void *, unsigned __int8 *, uint64_t))(v62 + 16))(v33, v34, v40);
        *((unsigned char *)v33 + v37) = 2;
        return v63;
      }
    }
    else
    {
      if (v37 <= 3) {
        uint64_t v39 = v37;
      }
      else {
        uint64_t v39 = 4;
      }
      uint64_t v40 = v64;
      switch(v39)
      {
        case 1:
          int v41 = *v34;
          break;
        case 2:
          int v41 = *(unsigned __int16 *)v34;
          break;
        case 3:
          int v41 = *(unsigned __int16 *)v34 | (v34[2] << 16);
          break;
        case 4:
          int v41 = *(_DWORD *)v34;
          break;
        default:
          goto LABEL_58;
      }
      int v52 = (v41 | ((v38 - 3) << (8 * v37))) + 3;
      unsigned int v53 = v41 + 3;
      if (v37 >= 4) {
        unsigned int v38 = v53;
      }
      else {
        unsigned int v38 = v52;
      }
      if (v38 == 2) {
        goto LABEL_78;
      }
    }
    if (v38 == 1)
    {
      if ((*(unsigned int (**)(unsigned __int8 *, uint64_t, uint64_t))(v62 + 48))(v34, 1, v40))
      {
        memcpy(v33, v34, v35);
      }
      else
      {
        (*(void (**)(void *, unsigned __int8 *, uint64_t))(v62 + 16))(v33, v34, v40);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v62 + 56))(v33, 0, 1, v40);
      }
      a1 = v63;
      *((unsigned char *)v33 + v37) = 1;
    }
    else
    {
      a1 = v63;
      *unsigned int v33 = *(void *)v34;
      *((unsigned char *)v33 + v37) = 0;
      swift_bridgeObjectRetain();
    }
  }
  return a1;
}

uint64_t initializeWithTake for _ListValue(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8) + 32;
  (*(void (**)(void))v6)();
  uint64_t v7 = *(void *)(a3 + 24);
  uint64_t v8 = *(void *)(v7 - 8);
  int v9 = *(_DWORD *)(v8 + 84);
  uint64_t v10 = *(_DWORD *)(v8 + 80) & 0xF8 | 7;
  uint64_t v11 = *(void *)(v6 + 32) + v10;
  uint64_t v12 = ~v10;
  unint64_t v13 = (char *)((v11 + a1) & ~v10);
  size_t v14 = (void *)((v11 + a2) & ~v10);
  unint64_t v15 = *(void *)(v8 + 64);
  uint64_t v16 = (void *)(((unint64_t)v14 + 15) & 0xFFFFFFFFFFFFFFF8);
  if (*v16 < 0xFFFFFFFFuLL)
  {
    uint64_t v27 = (v10 + 16) & v12;
    if (v9) {
      unint64_t v28 = *(void *)(*(void *)(v7 - 8) + 64);
    }
    else {
      unint64_t v28 = v15 + 1;
    }
    if (v28 > v15) {
      unint64_t v15 = v28;
    }
    if (v15 <= 8) {
      unint64_t v15 = 8;
    }
    memcpy(v13, v14, (v27 | 1) + v15);
  }
  else
  {
    *(void *)unint64_t v13 = *v14;
    unint64_t v17 = (unint64_t)(v13 + 15);
    *(void *)(v17 & 0xFFFFFFFFFFFFFFF8) = *v16;
    uint64_t v18 = v10 + 8;
    unint64_t v19 = (void *)((v18 + (v17 & 0xFFFFFFFFFFFFFFF8)) & v12);
    unint64_t v20 = (unsigned __int8 *)(((unint64_t)v16 + v18) & v12);
    if (v9) {
      size_t v21 = v15;
    }
    else {
      size_t v21 = v15 + 1;
    }
    if (v21 > v15) {
      unint64_t v15 = v21;
    }
    if (v15 <= 8) {
      uint64_t v22 = 8;
    }
    else {
      uint64_t v22 = v15;
    }
    unsigned int v23 = v20[v22];
    unsigned int v24 = v23 - 3;
    if (v23 >= 3)
    {
      if (v22 <= 3) {
        uint64_t v25 = v22;
      }
      else {
        uint64_t v25 = 4;
      }
      switch(v25)
      {
        case 1:
          int v26 = *v20;
          goto LABEL_27;
        case 2:
          int v26 = *(unsigned __int16 *)v20;
          goto LABEL_27;
        case 3:
          int v26 = *(unsigned __int16 *)v20 | (v20[2] << 16);
          goto LABEL_27;
        case 4:
          int v26 = *(_DWORD *)v20;
LABEL_27:
          int v29 = (v26 | (v24 << (8 * v22))) + 3;
          unsigned int v23 = v26 + 3;
          if (v22 < 4) {
            unsigned int v23 = v29;
          }
          break;
        default:
          break;
      }
    }
    if (v23 == 2)
    {
      (*(void (**)(void *, unsigned __int8 *, uint64_t))(v8 + 32))(v19, v20, v7);
      char v30 = 2;
LABEL_37:
      *((unsigned char *)v19 + v22) = v30;
      return a1;
    }
    if (v23 == 1)
    {
      if ((*(unsigned int (**)(unsigned __int8 *, uint64_t, uint64_t))(v8 + 48))(v20, 1, v7))
      {
        memcpy(v19, v20, v21);
      }
      else
      {
        (*(void (**)(void *, unsigned __int8 *, uint64_t))(v8 + 32))(v19, v20, v7);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v8 + 56))(v19, 0, 1, v7);
      }
      char v30 = 1;
      goto LABEL_37;
    }
    *unint64_t v19 = *(void *)v20;
    *((unsigned char *)v19 + v22) = 0;
  }
  return a1;
}

uint64_t assignWithTake for _ListValue(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8) + 40;
  (*(void (**)(void))v6)();
  uint64_t v7 = *(void *)(a3 + 24);
  uint64_t v8 = *(void *)(v7 - 8);
  int v9 = *(_DWORD *)(v8 + 84);
  uint64_t v10 = *(_DWORD *)(v8 + 80) & 0xF8;
  uint64_t v11 = v10 | 7;
  uint64_t v12 = *(void *)(v6 + 24) + (v10 | 7);
  uint64_t v60 = a1;
  uint64_t v13 = ~(v10 | 7);
  size_t v14 = (void *)((v12 + a1) & v13);
  unint64_t v15 = (void *)((v12 + a2) & v13);
  size_t v16 = *(void *)(v8 + 64);
  uint64_t v17 = (v10 + 23) & v13;
  uint64_t v18 = (void *)(((unint64_t)v14 + 15) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v19 = (unint64_t *)(((unint64_t)v15 + 15) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v20 = *v19;
  if (*v18 < 0xFFFFFFFFuLL)
  {
    if (v20 >= 0xFFFFFFFF)
    {
      *size_t v14 = *v15;
      *uint64_t v18 = *v19;
      uint64_t v22 = (unsigned __int8 *)(((unint64_t)v18 + v11 + 8) & v13);
      unsigned int v24 = (unsigned __int8 *)(((unint64_t)v19 + v11 + 8) & v13);
      if (v9) {
        size_t v25 = v16;
      }
      else {
        size_t v25 = v16 + 1;
      }
      if (v25 <= v16) {
        unint64_t v33 = v16;
      }
      else {
        unint64_t v33 = v25;
      }
      if (v33 <= 8) {
        uint64_t v27 = 8;
      }
      else {
        uint64_t v27 = v33;
      }
      unsigned int v34 = v24[v27];
      unsigned int v35 = v34 - 3;
      if (v34 >= 3)
      {
        if (v27 <= 3) {
          uint64_t v36 = v27;
        }
        else {
          uint64_t v36 = 4;
        }
        switch(v36)
        {
          case 1:
            int v37 = *v24;
            goto LABEL_69;
          case 2:
            int v37 = *(unsigned __int16 *)v24;
            goto LABEL_69;
          case 3:
            int v37 = *(unsigned __int16 *)v24 | (v24[2] << 16);
            goto LABEL_69;
          case 4:
            int v37 = *(_DWORD *)v24;
LABEL_69:
            int v48 = (v37 | (v35 << (8 * v27))) + 3;
            unsigned int v34 = v37 + 3;
            if (v27 < 4) {
              unsigned int v34 = v48;
            }
            break;
          default:
            break;
        }
      }
      if (v34 == 2) {
        goto LABEL_114;
      }
      if (v34 == 1)
      {
        uint64_t v49 = v7;
        if (!(*(unsigned int (**)(unsigned __int8 *, uint64_t))(v8 + 48))(v24, 1))
        {
LABEL_105:
          (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v8 + 32))(v22, v24, v49);
          (*(void (**)(unsigned __int8 *, void, uint64_t, uint64_t))(v8 + 56))(v22, 0, 1, v49);
          goto LABEL_106;
        }
LABEL_74:
        memcpy(v22, v24, v25);
LABEL_106:
        char v56 = 1;
LABEL_115:
        v22[v27] = v56;
        return v60;
      }
      goto LABEL_107;
    }
    if (v9) {
      unint64_t v46 = *(void *)(v8 + 64);
    }
    else {
      unint64_t v46 = v16 + 1;
    }
    if (v46 <= v16) {
      unint64_t v46 = *(void *)(v8 + 64);
    }
    if (v46 <= 8) {
      unint64_t v46 = 8;
    }
    size_t v47 = (v17 | 1) + v46;
    goto LABEL_87;
  }
  uint64_t v59 = v7;
  if (v20 < 0xFFFFFFFF)
  {
    swift_release();
    swift_release();
    unsigned int v38 = (unsigned __int8 *)(((unint64_t)v18 + v11 + 8) & v13);
    if (v9) {
      unint64_t v39 = v16;
    }
    else {
      unint64_t v39 = v16 + 1;
    }
    if (v39 <= v16) {
      unint64_t v39 = v16;
    }
    if (v39 <= 8) {
      uint64_t v40 = 8;
    }
    else {
      uint64_t v40 = v39;
    }
    unsigned int v41 = v38[v40];
    unsigned int v42 = v41 - 3;
    if (v41 < 3)
    {
      uint64_t v44 = v59;
LABEL_58:
      if (v41 == 2) {
        goto LABEL_84;
      }
    }
    else
    {
      if (v40 <= 3) {
        uint64_t v43 = v40;
      }
      else {
        uint64_t v43 = 4;
      }
      uint64_t v44 = v59;
      switch(v43)
      {
        case 1:
          int v45 = *v38;
          break;
        case 2:
          int v45 = *(unsigned __int16 *)v38;
          break;
        case 3:
          int v45 = *(unsigned __int16 *)v38 | (v38[2] << 16);
          break;
        case 4:
          int v45 = *(_DWORD *)v38;
          break;
        default:
          goto LABEL_58;
      }
      int v50 = (v45 | (v42 << (8 * v40))) + 3;
      unsigned int v41 = v45 + 3;
      if (v40 < 4) {
        unsigned int v41 = v50;
      }
      if (v41 == 2) {
        goto LABEL_84;
      }
    }
    if (v41 != 1)
    {
      swift_bridgeObjectRelease();
      goto LABEL_86;
    }
    if ((*(unsigned int (**)(unsigned __int8 *, uint64_t, uint64_t))(v8 + 48))(v38, 1, v44))
    {
LABEL_86:
      size_t v47 = (v17 | 1) + v40;
LABEL_87:
      memcpy(v14, v15, v47);
      return v60;
    }
LABEL_84:
    (*(void (**)(unsigned __int8 *, uint64_t))(v8 + 8))(v38, v44);
    goto LABEL_86;
  }
  *size_t v14 = *v15;
  swift_release();
  *uint64_t v18 = *v19;
  swift_release();
  unint64_t v21 = (unint64_t)v18 + v11 + 8;
  uint64_t v22 = (unsigned __int8 *)(v21 & v13);
  unint64_t v23 = (unint64_t)v19 + v11 + 8;
  unsigned int v24 = (unsigned __int8 *)(v23 & v13);
  if ((v21 & v13) != (v23 & v13))
  {
    if (v9) {
      size_t v25 = v16;
    }
    else {
      size_t v25 = v16 + 1;
    }
    if (v25 <= v16) {
      unint64_t v26 = v16;
    }
    else {
      unint64_t v26 = v25;
    }
    if (v26 <= 8) {
      uint64_t v27 = 8;
    }
    else {
      uint64_t v27 = v26;
    }
    unsigned int v28 = v22[v27];
    unsigned int v29 = v28 - 3;
    if (v28 < 3)
    {
      uint64_t v31 = v59;
LABEL_61:
      if (v28 == 2)
      {
LABEL_94:
        (*(void (**)(unsigned __int8 *, uint64_t))(v8 + 8))(v22, v31);
        goto LABEL_95;
      }
    }
    else
    {
      if (v27 <= 3) {
        uint64_t v30 = v27;
      }
      else {
        uint64_t v30 = 4;
      }
      uint64_t v31 = v59;
      switch(v30)
      {
        case 1:
          int v32 = *v22;
          break;
        case 2:
          int v32 = *(unsigned __int16 *)v22;
          break;
        case 3:
          int v32 = *(unsigned __int16 *)v22 | (v22[2] << 16);
          break;
        case 4:
          int v32 = *(_DWORD *)v22;
          break;
        default:
          goto LABEL_61;
      }
      int v51 = (v32 | (v29 << (8 * v27))) + 3;
      unsigned int v28 = v32 + 3;
      if (v27 < 4) {
        unsigned int v28 = v51;
      }
      if (v28 == 2) {
        goto LABEL_94;
      }
    }
    if (v28 == 1)
    {
      if (!(*(unsigned int (**)(unsigned __int8 *, uint64_t, uint64_t))(v8 + 48))(v22, 1, v31)) {
        (*(void (**)(unsigned __int8 *, uint64_t))(v8 + 8))(v22, v59);
      }
    }
    else
    {
      swift_bridgeObjectRelease();
    }
LABEL_95:
    unsigned int v52 = v24[v27];
    unsigned int v53 = v52 - 3;
    if (v52 < 3)
    {
      uint64_t v49 = v59;
LABEL_102:
      if (v52 == 2)
      {
LABEL_114:
        (*(void (**)(unsigned __int8 *, unsigned __int8 *))(v8 + 32))(v22, v24);
        char v56 = 2;
        goto LABEL_115;
      }
    }
    else
    {
      if (v27 <= 3) {
        uint64_t v54 = v27;
      }
      else {
        uint64_t v54 = 4;
      }
      uint64_t v49 = v59;
      switch(v54)
      {
        case 1:
          int v55 = *v24;
          break;
        case 2:
          int v55 = *(unsigned __int16 *)v24;
          break;
        case 3:
          int v55 = *(unsigned __int16 *)v24 | (v24[2] << 16);
          break;
        case 4:
          int v55 = *(_DWORD *)v24;
          break;
        default:
          goto LABEL_102;
      }
      int v57 = (v55 | (v53 << (8 * v27))) + 3;
      unsigned int v52 = v55 + 3;
      if (v27 < 4) {
        unsigned int v52 = v57;
      }
      if (v52 == 2) {
        goto LABEL_114;
      }
    }
    if (v52 == 1)
    {
      if (!(*(unsigned int (**)(unsigned __int8 *, uint64_t, uint64_t))(v8 + 48))(v24, 1, v49)) {
        goto LABEL_105;
      }
      goto LABEL_74;
    }
LABEL_107:
    *(void *)uint64_t v22 = *(void *)v24;
    v22[v27] = 0;
  }
  return v60;
}

uint64_t getEnumTagSinglePayload for _ListValue(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(*(void *)(a3 + 24) - 8);
  unint64_t v7 = *(void *)(v6 + 64);
  if (v5 <= 0x7FFFFFFE) {
    unsigned int v8 = 2147483646;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v4 + 84);
  }
  if (*(_DWORD *)(v6 + 84)) {
    unint64_t v9 = *(void *)(v6 + 64);
  }
  else {
    unint64_t v9 = v7 + 1;
  }
  if (v9 <= v7) {
    unint64_t v9 = *(void *)(v6 + 64);
  }
  if (v9 <= 8) {
    unint64_t v9 = 8;
  }
  if (!a2) {
    return 0;
  }
  uint64_t v10 = *(_DWORD *)(v6 + 80) & 0xF8;
  uint64_t v11 = v10 | 7;
  uint64_t v12 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) + (v10 | 7);
  int v13 = a2 - v8;
  if (a2 <= v8) {
    goto LABEL_30;
  }
  uint64_t v14 = v9 + ((v10 + 23) & ~v11) + (v12 & ~v11) + 1;
  char v15 = 8 * v14;
  if (v14 <= 3)
  {
    unsigned int v18 = ((v13 + ~(-1 << v15)) >> v15) + 1;
    if (HIWORD(v18))
    {
      int v16 = *(_DWORD *)((char *)a1 + v14);
      if (!v16) {
        goto LABEL_30;
      }
      goto LABEL_22;
    }
    if (v18 > 0xFF)
    {
      int v16 = *(unsigned __int16 *)((char *)a1 + v14);
      if (!*(unsigned __int16 *)((char *)a1 + v14)) {
        goto LABEL_30;
      }
      goto LABEL_22;
    }
    if (v18 < 2)
    {
LABEL_30:
      if (v5 >= 0x7FFFFFFE) {
        return (*(uint64_t (**)(void))(v4 + 48))();
      }
      unint64_t v20 = *(void *)(((((unint64_t)a1 + v12) & ~v11) + 15) & 0xFFFFFFFFFFFFFFF8);
      if (v20 >= 0xFFFFFFFF) {
        LODWORD(v20) = -1;
      }
      if ((v20 + 1) >= 2) {
        return v20;
      }
      else {
        return 0;
      }
    }
  }
  int v16 = *((unsigned __int8 *)a1 + v14);
  if (!*((unsigned char *)a1 + v14)) {
    goto LABEL_30;
  }
LABEL_22:
  int v19 = (v16 - 1) << v15;
  if (v14 > 3) {
    int v19 = 0;
  }
  if (v14)
  {
    if (v14 > 3) {
      LODWORD(v14) = 4;
    }
    switch((int)v14)
    {
      case 2:
        LODWORD(v14) = *a1;
        break;
      case 3:
        LODWORD(v14) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v14) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v14) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v8 + (v14 | v19) + 1;
}

void storeEnumTagSinglePayload for _ListValue(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  uint64_t v8 = *(void *)(*(void *)(a4 + 24) - 8);
  unint64_t v9 = *(void *)(v8 + 64);
  if (v7 <= 0x7FFFFFFE) {
    unsigned int v10 = 2147483646;
  }
  else {
    unsigned int v10 = *(_DWORD *)(v6 + 84);
  }
  BOOL v11 = *(_DWORD *)(v8 + 84) == 0;
  uint64_t v12 = *(_DWORD *)(v8 + 80) & 0xF8;
  uint64_t v13 = v12 | 7;
  uint64_t v14 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64) + (v12 | 7);
  uint64_t v15 = v14 & ~(v12 | 7);
  uint64_t v16 = (v12 + 23) & ~(v12 | 7);
  if (v11) {
    unint64_t v17 = v9 + 1;
  }
  else {
    unint64_t v17 = v9;
  }
  if (v17 > v9) {
    unint64_t v9 = v17;
  }
  if (v9 <= 8) {
    unint64_t v9 = 8;
  }
  size_t v18 = v9 + v16 + 1;
  size_t v19 = v18 + v15;
  BOOL v20 = a3 >= v10;
  unsigned int v21 = a3 - v10;
  if (v21 != 0 && v20)
  {
    if (v19 <= 3)
    {
      unsigned int v25 = ((v21 + ~(-1 << (8 * v19))) >> (8 * v19)) + 1;
      if (HIWORD(v25))
      {
        int v22 = 4;
      }
      else if (v25 >= 0x100)
      {
        int v22 = 2;
      }
      else
      {
        int v22 = v25 > 1;
      }
    }
    else
    {
      int v22 = 1;
    }
  }
  else
  {
    int v22 = 0;
  }
  if (v10 < a2)
  {
    unsigned int v23 = ~v10 + a2;
    if (v19 < 4)
    {
      int v24 = (v23 >> (8 * v19)) + 1;
      if (v19)
      {
        int v26 = v23 & ~(-1 << (8 * v19));
        bzero(a1, v19);
        if (v19 == 3)
        {
          *(_WORD *)a1 = v26;
          a1[2] = BYTE2(v26);
        }
        else if (v19 == 2)
        {
          *(_WORD *)a1 = v26;
        }
        else
        {
          *a1 = v26;
        }
      }
    }
    else
    {
      bzero(a1, v19);
      *(_DWORD *)a1 = v23;
      int v24 = 1;
    }
    switch(v22)
    {
      case 1:
        a1[v19] = v24;
        return;
      case 2:
        *(_WORD *)&a1[v19] = v24;
        return;
      case 3:
        goto LABEL_59;
      case 4:
        *(_DWORD *)&a1[v19] = v24;
        return;
      default:
        return;
    }
  }
  switch(v22)
  {
    case 1:
      a1[v19] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_31;
    case 2:
      *(_WORD *)&a1[v19] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_31;
    case 3:
LABEL_59:
      __break(1u);
      JUMPOUT(0x1876D9FD4);
    case 4:
      *(_DWORD *)&a1[v19] = 0;
      goto LABEL_30;
    default:
LABEL_30:
      if (a2)
      {
LABEL_31:
        if (v7 < 0x7FFFFFFE)
        {
          unsigned int v28 = (unsigned char *)((unint64_t)&a1[v14] & ~v13);
          if (a2 > 0x7FFFFFFE)
          {
            if (v18 <= 3) {
              int v29 = ~(-1 << (8 * v18));
            }
            else {
              int v29 = -1;
            }
            if (v18)
            {
              int v30 = v29 & (a2 - 0x7FFFFFFF);
              if (v18 <= 3) {
                int v31 = v18;
              }
              else {
                int v31 = 4;
              }
              bzero(v28, v18);
              switch(v31)
              {
                case 2:
                  *(_WORD *)unsigned int v28 = v30;
                  break;
                case 3:
                  *(_WORD *)unsigned int v28 = v30;
                  v28[2] = BYTE2(v30);
                  break;
                case 4:
                  *(_DWORD *)unsigned int v28 = v30;
                  break;
                default:
                  *unsigned int v28 = v30;
                  break;
              }
            }
          }
          else
          {
            *(void *)((unint64_t)(v28 + 15) & 0xFFFFFFFFFFFFFFF8) = a2;
          }
        }
        else
        {
          uint64_t v27 = *(void (**)(void))(v6 + 56);
          v27();
        }
      }
      return;
  }
}

_UNKNOWN **sub_1876DA00C()
{
  return &protocol witness table for ListStyleContent;
}

uint64_t sub_1876DA018()
{
  return swift_getWitnessTable();
}

uint64_t sub_1876DA088()
{
  return swift_getWitnessTable();
}

uint64_t *initializeBufferWithCopyOfBuffer for ResolvedList(uint64_t *__dst, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = __dst;
  uint64_t v4 = *(void *)(a3 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  int v6 = *(_DWORD *)(v5 + 80);
  unint64_t v7 = *(void *)(v5 + 64);
  unint64_t v8 = ~(unint64_t)(v6 & 0xF8) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v9 = ((v6 & 0xF8) + 23) & v8;
  if (*(_DWORD *)(v5 + 84)) {
    size_t v10 = *(void *)(v5 + 64);
  }
  else {
    size_t v10 = v7 + 1;
  }
  if (v10 > v7) {
    unint64_t v7 = v10;
  }
  if (v7 <= 8) {
    uint64_t v11 = 8;
  }
  else {
    uint64_t v11 = v7;
  }
  size_t v12 = v11 + v9 + 1;
  if ((v6 & 0x1000F8) != 0 || v12 > 0x18)
  {
    uint64_t v14 = *a2;
    uint64_t *v3 = *a2;
    uint64_t v3 = (uint64_t *)(v14 + v9);
    swift_retain();
  }
  else
  {
    uint64_t v15 = (uint64_t *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v16 = *v15;
    if ((unint64_t)*v15 < 0xFFFFFFFF)
    {
      memcpy(__dst, a2, v12);
    }
    else
    {
      char *__dst = *a2;
      unint64_t v17 = (void *)(((unint64_t)__dst + 15) & 0xFFFFFFFFFFFFFFF8);
      void *v17 = v16;
      size_t v18 = (void *)(((unint64_t)v17 + 15) & v8);
      size_t v19 = (unsigned __int8 *)(((unint64_t)v15 + 15) & v8);
      unsigned int v20 = v19[v11];
      swift_retain();
      swift_retain();
      if (v20 >= 3)
      {
        if (v11 <= 3) {
          uint64_t v21 = v11;
        }
        else {
          uint64_t v21 = 4;
        }
        switch(v21)
        {
          case 1:
            int v22 = *v19;
            goto LABEL_26;
          case 2:
            int v22 = *(unsigned __int16 *)v19;
            goto LABEL_26;
          case 3:
            int v22 = *(unsigned __int16 *)v19 | (v19[2] << 16);
            goto LABEL_26;
          case 4:
            int v22 = *(_DWORD *)v19;
LABEL_26:
            int v23 = (v22 | ((v20 - 3) << (8 * v11))) + 3;
            unsigned int v24 = v22 + 3;
            if (v11 >= 4) {
              unsigned int v20 = v24;
            }
            else {
              unsigned int v20 = v23;
            }
            break;
          default:
            break;
        }
      }
      if (v20 == 2)
      {
        (*(void (**)(void *, unsigned __int8 *, uint64_t))(v5 + 16))(v18, v19, v4);
        char v25 = 2;
LABEL_37:
        *((unsigned char *)v18 + v11) = v25;
        return v3;
      }
      if (v20 == 1)
      {
        if ((*(unsigned int (**)(unsigned __int8 *, uint64_t, uint64_t))(v5 + 48))(v19, 1, v4))
        {
          memcpy(v18, v19, v10);
        }
        else
        {
          (*(void (**)(void *, unsigned __int8 *, uint64_t))(v5 + 16))(v18, v19, v4);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v5 + 56))(v18, 0, 1, v4);
        }
        char v25 = 1;
        goto LABEL_37;
      }
      *size_t v18 = *(void *)v19;
      *((unsigned char *)v18 + v11) = 0;
      swift_bridgeObjectRetain();
    }
  }
  return v3;
}

void *initializeWithTake for ResolvedList(void *__dst, void *a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  int v6 = *(_DWORD *)(v5 + 84);
  unint64_t v7 = *(void *)(v5 + 64);
  uint64_t v8 = *(_DWORD *)(v5 + 80) & 0xF8 | 7;
  uint64_t v9 = ~v8;
  size_t v10 = (uint64_t *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v11 = *v10;
  if ((unint64_t)*v10 < 0xFFFFFFFF)
  {
    uint64_t v22 = (v8 + 16) & v9;
    if (v6) {
      unint64_t v23 = *(void *)(v5 + 64);
    }
    else {
      unint64_t v23 = v7 + 1;
    }
    if (v23 > v7) {
      unint64_t v7 = v23;
    }
    if (v7 <= 8) {
      unint64_t v7 = 8;
    }
    memcpy(__dst, a2, v7 + v22 + 1);
  }
  else
  {
    char *__dst = *a2;
    BOOL v12 = v6 == 0;
    uint64_t v13 = (void *)(((unint64_t)__dst + 15) & 0xFFFFFFFFFFFFFFF8);
    *uint64_t v13 = v11;
    uint64_t v14 = (void *)(((unint64_t)v13 + v8 + 8) & v9);
    uint64_t v15 = (unsigned __int8 *)(((unint64_t)v10 + v8 + 8) & v9);
    if (v12) {
      size_t v16 = v7 + 1;
    }
    else {
      size_t v16 = v7;
    }
    if (v16 > v7) {
      unint64_t v7 = v16;
    }
    if (v7 <= 8) {
      uint64_t v17 = 8;
    }
    else {
      uint64_t v17 = v7;
    }
    unsigned int v18 = v15[v17];
    unsigned int v19 = v18 - 3;
    if (v18 >= 3)
    {
      if (v17 <= 3) {
        uint64_t v20 = v17;
      }
      else {
        uint64_t v20 = 4;
      }
      switch(v20)
      {
        case 1:
          int v21 = *v15;
          goto LABEL_27;
        case 2:
          int v21 = *(unsigned __int16 *)v15;
          goto LABEL_27;
        case 3:
          int v21 = *(unsigned __int16 *)v15 | (v15[2] << 16);
          goto LABEL_27;
        case 4:
          int v21 = *(_DWORD *)v15;
LABEL_27:
          int v24 = (v21 | (v19 << (8 * v17))) + 3;
          unsigned int v18 = v21 + 3;
          if (v17 < 4) {
            unsigned int v18 = v24;
          }
          break;
        default:
          break;
      }
    }
    if (v18 == 2)
    {
      (*(void (**)(void *, unsigned __int8 *, uint64_t))(v5 + 32))(v14, v15, v4);
      char v25 = 2;
LABEL_37:
      *((unsigned char *)v14 + v17) = v25;
      return __dst;
    }
    if (v18 == 1)
    {
      if ((*(unsigned int (**)(unsigned __int8 *, uint64_t, uint64_t))(v5 + 48))(v15, 1, v4))
      {
        memcpy(v14, v15, v16);
      }
      else
      {
        (*(void (**)(void *, unsigned __int8 *, uint64_t))(v5 + 32))(v14, v15, v4);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v5 + 56))(v14, 0, 1, v4);
      }
      char v25 = 1;
      goto LABEL_37;
    }
    *uint64_t v14 = *(void *)v15;
    *((unsigned char *)v14 + v17) = 0;
  }
  return __dst;
}

void *assignWithTake for ResolvedList(void *__dst, void *__src, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = *(void *)(v6 + 64);
  uint64_t v9 = *(_DWORD *)(v6 + 80) & 0xF8;
  uint64_t v10 = v9 | 7;
  uint64_t v11 = ~(v9 | 7);
  uint64_t v12 = (v9 + 23) & v11;
  uint64_t v13 = (void *)(((unint64_t)__dst + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v14 = (unint64_t *)(((unint64_t)__src + 15) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v15 = *v14;
  if (*v13 < 0xFFFFFFFFuLL)
  {
    if (v15 >= 0xFFFFFFFF)
    {
      char *__dst = *__src;
      *uint64_t v13 = *v14;
      size_t v16 = (unsigned __int8 *)(((unint64_t)v13 + v10 + 8) & v11);
      uint64_t v17 = (unsigned __int8 *)(((unint64_t)v14 + v10 + 8) & v11);
      if (v7) {
        size_t v18 = v8;
      }
      else {
        size_t v18 = v8 + 1;
      }
      if (v18 <= v8) {
        unint64_t v26 = v8;
      }
      else {
        unint64_t v26 = v18;
      }
      if (v26 <= 8) {
        uint64_t v20 = 8;
      }
      else {
        uint64_t v20 = v26;
      }
      unsigned int v27 = v17[v20];
      unsigned int v28 = v27 - 3;
      if (v27 >= 3)
      {
        if (v20 <= 3) {
          uint64_t v29 = v20;
        }
        else {
          uint64_t v29 = 4;
        }
        switch(v29)
        {
          case 1:
            int v30 = *v17;
            goto LABEL_69;
          case 2:
            int v30 = *(unsigned __int16 *)v17;
            goto LABEL_69;
          case 3:
            int v30 = *(unsigned __int16 *)v17 | (v17[2] << 16);
            goto LABEL_69;
          case 4:
            int v30 = *(_DWORD *)v17;
LABEL_69:
            int v41 = (v30 | (v28 << (8 * v20))) + 3;
            unsigned int v27 = v30 + 3;
            if (v20 < 4) {
              unsigned int v27 = v41;
            }
            break;
          default:
            break;
        }
      }
      if (v27 == 2)
      {
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v6 + 32))(v16, v17, v5);
LABEL_115:
        char v49 = 2;
        goto LABEL_116;
      }
      if (v27 == 1)
      {
        uint64_t v42 = v5;
        if (!(*(unsigned int (**)(unsigned __int8 *, uint64_t))(v6 + 48))(v17, 1))
        {
LABEL_105:
          (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v6 + 32))(v16, v17, v42);
          (*(void (**)(unsigned __int8 *, void, uint64_t, uint64_t))(v6 + 56))(v16, 0, 1, v42);
          goto LABEL_106;
        }
LABEL_74:
        memcpy(v16, v17, v18);
LABEL_106:
        char v49 = 1;
LABEL_116:
        v16[v20] = v49;
        return __dst;
      }
      goto LABEL_107;
    }
    if (v7) {
      unint64_t v39 = *(void *)(*(void *)(v5 - 8) + 64);
    }
    else {
      unint64_t v39 = v8 + 1;
    }
    if (v39 <= v8) {
      unint64_t v39 = *(void *)(*(void *)(v5 - 8) + 64);
    }
    if (v39 <= 8) {
      unint64_t v39 = 8;
    }
    uint64_t v40 = v39 + v12;
    goto LABEL_87;
  }
  uint64_t v52 = v5;
  if (v15 < 0xFFFFFFFF)
  {
    swift_release();
    swift_release();
    int v31 = (unsigned __int8 *)(((unint64_t)v13 + v10 + 8) & v11);
    if (v7) {
      unint64_t v32 = v8;
    }
    else {
      unint64_t v32 = v8 + 1;
    }
    if (v32 <= v8) {
      unint64_t v32 = v8;
    }
    if (v32 <= 8) {
      uint64_t v33 = 8;
    }
    else {
      uint64_t v33 = v32;
    }
    unsigned int v34 = v31[v33];
    unsigned int v35 = v34 - 3;
    if (v34 < 3)
    {
      uint64_t v37 = v52;
LABEL_58:
      if (v34 == 2) {
        goto LABEL_84;
      }
    }
    else
    {
      if (v33 <= 3) {
        uint64_t v36 = v33;
      }
      else {
        uint64_t v36 = 4;
      }
      uint64_t v37 = v52;
      switch(v36)
      {
        case 1:
          int v38 = *v31;
          break;
        case 2:
          int v38 = *(unsigned __int16 *)v31;
          break;
        case 3:
          int v38 = *(unsigned __int16 *)v31 | (v31[2] << 16);
          break;
        case 4:
          int v38 = *(_DWORD *)v31;
          break;
        default:
          goto LABEL_58;
      }
      int v43 = (v38 | (v35 << (8 * v33))) + 3;
      unsigned int v34 = v38 + 3;
      if (v33 < 4) {
        unsigned int v34 = v43;
      }
      if (v34 == 2) {
        goto LABEL_84;
      }
    }
    if (v34 != 1)
    {
      swift_bridgeObjectRelease();
      goto LABEL_86;
    }
    if ((*(unsigned int (**)(unsigned __int8 *, uint64_t, uint64_t))(v6 + 48))(v31, 1, v37))
    {
LABEL_86:
      uint64_t v40 = v33 + v12;
LABEL_87:
      memcpy(__dst, __src, v40 + 1);
      return __dst;
    }
LABEL_84:
    (*(void (**)(unsigned __int8 *, uint64_t))(v6 + 8))(v31, v37);
    goto LABEL_86;
  }
  char *__dst = *__src;
  swift_release();
  *uint64_t v13 = *v14;
  swift_release();
  size_t v16 = (unsigned __int8 *)(((unint64_t)v13 + v10 + 8) & v11);
  uint64_t v17 = (unsigned __int8 *)(((unint64_t)v14 + v10 + 8) & v11);
  if (v16 != v17)
  {
    if (v7) {
      size_t v18 = v8;
    }
    else {
      size_t v18 = v8 + 1;
    }
    if (v18 <= v8) {
      unint64_t v19 = v8;
    }
    else {
      unint64_t v19 = v18;
    }
    if (v19 <= 8) {
      uint64_t v20 = 8;
    }
    else {
      uint64_t v20 = v19;
    }
    unsigned int v21 = v16[v20];
    unsigned int v22 = v21 - 3;
    if (v21 < 3)
    {
      uint64_t v24 = v52;
LABEL_61:
      if (v21 == 2)
      {
LABEL_94:
        (*(void (**)(unsigned __int8 *, uint64_t))(v6 + 8))(v16, v24);
        goto LABEL_95;
      }
    }
    else
    {
      if (v20 <= 3) {
        uint64_t v23 = v20;
      }
      else {
        uint64_t v23 = 4;
      }
      uint64_t v24 = v52;
      switch(v23)
      {
        case 1:
          int v25 = *v16;
          break;
        case 2:
          int v25 = *(unsigned __int16 *)v16;
          break;
        case 3:
          int v25 = *(unsigned __int16 *)v16 | (v16[2] << 16);
          break;
        case 4:
          int v25 = *(_DWORD *)v16;
          break;
        default:
          goto LABEL_61;
      }
      int v44 = (v25 | (v22 << (8 * v20))) + 3;
      unsigned int v21 = v25 + 3;
      if (v20 < 4) {
        unsigned int v21 = v44;
      }
      if (v21 == 2) {
        goto LABEL_94;
      }
    }
    if (v21 == 1)
    {
      if (!(*(unsigned int (**)(unsigned __int8 *, uint64_t, uint64_t))(v6 + 48))(v16, 1, v24)) {
        (*(void (**)(unsigned __int8 *, uint64_t))(v6 + 8))(v16, v52);
      }
    }
    else
    {
      swift_bridgeObjectRelease();
    }
LABEL_95:
    unsigned int v45 = v17[v20];
    unsigned int v46 = v45 - 3;
    if (v45 < 3)
    {
      uint64_t v42 = v52;
LABEL_102:
      if (v45 == 2)
      {
LABEL_114:
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v6 + 32))(v16, v17, v42);
        goto LABEL_115;
      }
    }
    else
    {
      if (v20 <= 3) {
        uint64_t v47 = v20;
      }
      else {
        uint64_t v47 = 4;
      }
      uint64_t v42 = v52;
      switch(v47)
      {
        case 1:
          int v48 = *v17;
          break;
        case 2:
          int v48 = *(unsigned __int16 *)v17;
          break;
        case 3:
          int v48 = *(unsigned __int16 *)v17 | (v17[2] << 16);
          break;
        case 4:
          int v48 = *(_DWORD *)v17;
          break;
        default:
          goto LABEL_102;
      }
      int v50 = (v48 | (v46 << (8 * v20))) + 3;
      unsigned int v45 = v48 + 3;
      if (v20 < 4) {
        unsigned int v45 = v50;
      }
      if (v45 == 2) {
        goto LABEL_114;
      }
    }
    if (v45 == 1)
    {
      if (!(*(unsigned int (**)(unsigned __int8 *, uint64_t, uint64_t))(v6 + 48))(v17, 1, v42)) {
        goto LABEL_105;
      }
      goto LABEL_74;
    }
LABEL_107:
    *(void *)size_t v16 = *(void *)v17;
    v16[v20] = 0;
  }
  return __dst;
}

uint64_t getEnumTagSinglePayload for ResolvedList(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(*(void *)(a3 + 16) - 8);
  unint64_t v4 = *(void *)(v3 + 64);
  if (*(_DWORD *)(v3 + 84)) {
    unint64_t v5 = *(void *)(v3 + 64);
  }
  else {
    unint64_t v5 = v4 + 1;
  }
  if (v5 <= v4) {
    unint64_t v5 = *(void *)(v3 + 64);
  }
  if (v5 <= 8) {
    unint64_t v5 = 8;
  }
  if (!a2) {
    return 0;
  }
  if (a2 < 0x7FFFFFFF) {
    goto LABEL_27;
  }
  uint64_t v6 = v5
     + ((unsigned __int16)((*(_WORD *)(v3 + 80) & 0xF8) + 23) & (unsigned __int16)~(*(_WORD *)(v3 + 80) & 0xF8) & 0x1F8)
     + 1;
  char v7 = 8 * v6;
  if (v6 > 3) {
    goto LABEL_11;
  }
  unsigned int v10 = (a2 - 2147483646 + ~(-1 << v7)) >> v7;
  if (v10 > 0xFFFE)
  {
    int v8 = *(_DWORD *)((char *)a1 + v6);
    if (v8) {
      goto LABEL_19;
    }
LABEL_27:
    unint64_t v12 = *(void *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
    if (v12 >= 0xFFFFFFFF) {
      LODWORD(v12) = -1;
    }
    if ((v12 + 1) >= 2) {
      return v12;
    }
    else {
      return 0;
    }
  }
  if (v10 > 0xFE)
  {
    int v8 = *(unsigned __int16 *)((char *)a1 + v6);
    if (*(unsigned __int16 *)((char *)a1 + v6)) {
      goto LABEL_19;
    }
    goto LABEL_27;
  }
  if (!v10) {
    goto LABEL_27;
  }
LABEL_11:
  int v8 = *((unsigned __int8 *)a1 + v6);
  if (!*((unsigned char *)a1 + v6)) {
    goto LABEL_27;
  }
LABEL_19:
  int v11 = (v8 - 1) << v7;
  if (v6 > 3) {
    int v11 = 0;
  }
  if (v6)
  {
    if (v6 > 3) {
      LODWORD(v6) = 4;
    }
    switch((int)v6)
    {
      case 2:
        LODWORD(v6) = *a1;
        break;
      case 3:
        LODWORD(v6) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v6) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v6) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return (v6 | v11) + 0x7FFFFFFF;
}

void storeEnumTagSinglePayload for ResolvedList(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5 = *(void *)(*(void *)(a4 + 16) - 8);
  unint64_t v6 = *(void *)(v5 + 64);
  if (*(_DWORD *)(v5 + 84)) {
    unint64_t v7 = *(void *)(v5 + 64);
  }
  else {
    unint64_t v7 = v6 + 1;
  }
  if (v7 <= v6) {
    unint64_t v7 = *(void *)(v5 + 64);
  }
  if (v7 <= 8) {
    unint64_t v7 = 8;
  }
  size_t v8 = v7
     + ((unsigned __int16)((*(_WORD *)(v5 + 80) & 0xF8) + 23) & (unsigned __int16)~(*(_WORD *)(v5 + 80) & 0xF8) & 0x1F8)
     + 1;
  if (a3 < 0x7FFFFFFF)
  {
    int v9 = 0;
  }
  else if (v8 <= 3)
  {
    unsigned int v12 = (a3 - 2147483646 + ~(-1 << (8 * v8))) >> (8 * v8);
    if (v12 > 0xFFFE)
    {
      int v9 = 4;
    }
    else if (v12 >= 0xFF)
    {
      int v9 = 2;
    }
    else
    {
      int v9 = v12 != 0;
    }
  }
  else
  {
    int v9 = 1;
  }
  if (a2 > 0x7FFFFFFE)
  {
    unsigned int v10 = a2 - 0x7FFFFFFF;
    if (v8 < 4)
    {
      int v11 = (v10 >> (8 * v8)) + 1;
      if (v7
         + ((unsigned __int16)((*(_WORD *)(v5 + 80) & 0xF8) + 23) & (unsigned __int16)~(*(_WORD *)(v5 + 80) & 0xF8) & 0x1F8) != -1)
      {
        int v13 = v10 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if (v8 == 3)
        {
          *(_WORD *)a1 = v13;
          a1[2] = BYTE2(v13);
        }
        else if (v8 == 2)
        {
          *(_WORD *)a1 = v13;
        }
        else
        {
          *a1 = v13;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v10;
      int v11 = 1;
    }
    switch(v9)
    {
      case 1:
        a1[v8] = v11;
        break;
      case 2:
        *(_WORD *)&a1[v8] = v11;
        break;
      case 3:
LABEL_39:
        __break(1u);
        JUMPOUT(0x1876DB094);
      case 4:
        *(_DWORD *)&a1[v8] = v11;
        break;
      default:
        return;
    }
  }
  else
  {
    switch(v9)
    {
      case 1:
        a1[v8] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_28;
      case 2:
        *(_WORD *)&a1[v8] = 0;
        goto LABEL_27;
      case 3:
        goto LABEL_39;
      case 4:
        *(_DWORD *)&a1[v8] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_28;
      default:
LABEL_27:
        if (a2) {
LABEL_28:
        }
          *(void *)((unint64_t)(a1 + 15) & 0xFFFFFFFFFFFFFFF8) = a2;
        break;
    }
  }
}

void *initializeBufferWithCopyOfBuffer for _ListStyleConfiguration(void *__dst, void *__src, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = v6;
  uint64_t v8 = *(_DWORD *)(v6 + 80);
  size_t v9 = ((v8 + 16) & ~v8) + *(void *)(v6 + 64);
  if (v8 <= 7 && (*(_DWORD *)(v6 + 80) & 0x100000) == 0 && v9 <= 0x18)
  {
    uint64_t v13 = ~v8;
    uint64_t v14 = (uint64_t *)(((unint64_t)__src + 15) & 0xFFFFFFFFFFFFFFF8);
    if ((*(_DWORD *)(v6 + 84) & 0x80000000) != 0)
    {
      if ((*(unsigned int (**)(unint64_t))(v6 + 48))(((unint64_t)v14 + v8 + 8) & v13))
      {
LABEL_14:
        memcpy(__dst, __src, v9);
        return __dst;
      }
    }
    else
    {
      uint64_t v15 = *v14;
      if ((unint64_t)*v14 >= 0xFFFFFFFF) {
        LODWORD(v15) = -1;
      }
      if (v15 != -1) {
        goto LABEL_14;
      }
    }
    char *__dst = *__src;
    size_t v16 = (void *)(((unint64_t)__dst + 15) & 0xFFFFFFFFFFFFFFF8);
    *size_t v16 = *v14;
    uint64_t v17 = ((unint64_t)v16 + v8 + 8) & v13;
    size_t v18 = *(void (**)(uint64_t, unint64_t, uint64_t))(v7 + 16);
    swift_retain();
    swift_retain();
    v18(v17, ((unint64_t)v14 + v8 + 8) & v13, v5);
    return __dst;
  }
  uint64_t v12 = *__src;
  char *__dst = *__src;
  __dst = (void *)(v12 + ((v8 & 0xF8 ^ 0x1F8) & (v8 + 16)));
  swift_retain();
  return __dst;
}

void *initializeWithTake for _ListStyleConfiguration(void *__dst, void *__src, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v8 = ~v7;
  uint64_t v9 = *(void *)(v6 + 64);
  unsigned int v10 = (uint64_t *)(((unint64_t)__src + 15) & 0xFFFFFFFFFFFFFFF8);
  if ((*(_DWORD *)(v6 + 84) & 0x80000000) == 0)
  {
    uint64_t v11 = *v10;
    if ((unint64_t)*v10 >= 0xFFFFFFFF) {
      LODWORD(v11) = -1;
    }
    if (v11 != -1) {
      goto LABEL_5;
    }
LABEL_7:
    char *__dst = *__src;
    uint64_t v12 = (void *)(((unint64_t)__dst + 15) & 0xFFFFFFFFFFFFFFF8);
    *uint64_t v12 = *v10;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v6 + 32))(((unint64_t)v12 + v7 + 8) & v8, ((unint64_t)v10 + v7 + 8) & v8, v5);
    return __dst;
  }
  if (!(*(unsigned int (**)(unint64_t))(v6 + 48))(((unint64_t)v10 + v7 + 8) & v8)) {
    goto LABEL_7;
  }
LABEL_5:
  memcpy(__dst, __src, ((v7 + 16) & ~v7) + v9);
  return __dst;
}

void *assignWithTake for _ListStyleConfiguration(void *a1, void *a2, uint64_t a3)
{
  uint64_t v3 = a2;
  unint64_t v4 = a1;
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(unsigned int *)(v6 + 84);
  uint64_t v8 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v9 = ~v8;
  size_t v10 = ((v8 + 16) & ~v8) + *(void *)(v6 + 64);
  uint64_t v11 = (void *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  if ((v7 & 0x80000000) != 0)
  {
    size_t v16 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v6 + 48);
    int v18 = v16(((unint64_t)v11 + v8 + 8) & ~v8, v7, v5);
    uint64_t v12 = (void *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v9 = ~v8;
    int v14 = v16(((unint64_t)v12 + v8 + 8) & ~v8, v7, v5);
    uint64_t v3 = a2;
    unint64_t v4 = a1;
    if (!v18)
    {
LABEL_5:
      if (!v14)
      {
        *unint64_t v4 = *v3;
        swift_release();
        *uint64_t v11 = *v12;
        swift_release();
        (*(void (**)(unint64_t, unint64_t, uint64_t))(v6 + 40))(((unint64_t)v11 + v8 + 8) & v9, ((unint64_t)v12 + v8 + 8) & v9, v5);
        return v4;
      }
      swift_release();
      swift_release();
      (*(void (**)(unint64_t, uint64_t))(v6 + 8))(((unint64_t)v11 + v8 + 8) & v9, v5);
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v12 = (void *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v13 = *v12;
    if (*v12 >= 0xFFFFFFFFuLL) {
      LODWORD(v13) = -1;
    }
    int v14 = v13 + 1;
    if (*v11 > 0xFFFFFFFEuLL) {
      goto LABEL_5;
    }
  }
  if (!v14)
  {
    *unint64_t v4 = *v3;
    *uint64_t v11 = *v12;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v6 + 32))(((unint64_t)v11 + v8 + 8) & v9, ((unint64_t)v12 + v8 + 8) & v9, v5);
    return v4;
  }
LABEL_9:
  memcpy(v4, v3, v10);
  return v4;
}

uint64_t getEnumTagSinglePayload for _ListStyleConfiguration(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  if (v5 <= 0x7FFFFFFF) {
    int v7 = 0x7FFFFFFF;
  }
  else {
    int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  if (v7 - 1 >= a2) {
    goto LABEL_25;
  }
  uint64_t v8 = ((v6 + 16) & ~v6) + *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  char v9 = 8 * v8;
  if (v8 > 3) {
    goto LABEL_7;
  }
  unsigned int v12 = (((1 << v9) + a2 - v7) >> v9) + 1;
  if (HIWORD(v12))
  {
    int v10 = *(_DWORD *)((char *)a1 + v8);
    if (v10) {
      goto LABEL_15;
    }
LABEL_25:
    size_t v16 = (unint64_t *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
    if ((v5 & 0x80000000) != 0)
    {
      unsigned int v18 = (*(uint64_t (**)(unint64_t))(v4 + 48))(((unint64_t)v16 + v6 + 8) & ~v6);
    }
    else
    {
      unint64_t v17 = *v16;
      if (v17 >= 0xFFFFFFFF) {
        LODWORD(v17) = -1;
      }
      unsigned int v18 = v17 + 1;
    }
    if (v18 >= 2) {
      return v18 - 1;
    }
    else {
      return 0;
    }
  }
  if (v12 > 0xFF)
  {
    int v10 = *(unsigned __int16 *)((char *)a1 + v8);
    if (*(unsigned __int16 *)((char *)a1 + v8)) {
      goto LABEL_15;
    }
    goto LABEL_25;
  }
  if (v12 < 2) {
    goto LABEL_25;
  }
LABEL_7:
  int v10 = *((unsigned __int8 *)a1 + v8);
  if (!*((unsigned char *)a1 + v8)) {
    goto LABEL_25;
  }
LABEL_15:
  int v13 = (v10 - 1) << v9;
  if (v8 > 3) {
    int v13 = 0;
  }
  if (v8)
  {
    if (v8 <= 3) {
      int v14 = ((v6 + 16) & ~v6) + *(_DWORD *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
    }
    else {
      int v14 = 4;
    }
    switch(v14)
    {
      case 2:
        int v15 = *a1;
        break;
      case 3:
        int v15 = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        int v15 = *(_DWORD *)a1;
        break;
      default:
        int v15 = *(unsigned __int8 *)a1;
        break;
    }
  }
  else
  {
    int v15 = 0;
  }
  return (v15 | v13) + v7;
}

void storeEnumTagSinglePayload for _ListStyleConfiguration(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  unsigned int v9 = v8 - 1;
  uint64_t v10 = *(unsigned __int8 *)(v6 + 80);
  size_t v11 = ((v10 + 16) & ~v10) + *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  if (v8 - 1 >= a3)
  {
    int v12 = 0;
LABEL_13:
    if (v9 >= a2) {
      goto LABEL_21;
    }
    goto LABEL_14;
  }
  int v12 = 1;
  if (v11 > 3) {
    goto LABEL_13;
  }
  unsigned int v13 = (((1 << (8 * v11)) + a3 - v8) >> (8 * v11)) + 1;
  if (HIWORD(v13))
  {
    int v12 = 4;
    if (v9 >= a2) {
      goto LABEL_21;
    }
  }
  else
  {
    if (v13 >= 0x100) {
      int v12 = 2;
    }
    else {
      int v12 = v13 > 1;
    }
    if (v9 >= a2)
    {
LABEL_21:
      switch(v12)
      {
        case 1:
          a1[v11] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_26;
        case 2:
          *(_WORD *)&a1[v11] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_26;
        case 3:
          goto LABEL_57;
        case 4:
          *(_DWORD *)&a1[v11] = 0;
          goto LABEL_25;
        default:
LABEL_25:
          if (a2)
          {
LABEL_26:
            if (a2 + 1 <= v8)
            {
              if (a2 != -1)
              {
                uint64_t v20 = (void *)((unint64_t)(a1 + 15) & 0xFFFFFFFFFFFFFFF8);
                if ((v7 & 0x80000000) != 0)
                {
                  unsigned int v22 = *(void (**)(unint64_t, uint64_t))(v6 + 56);
                  uint64_t v23 = a2 + 1;
                  v22(((unint64_t)v20 + v10 + 8) & ~v10, v23);
                }
                else
                {
                  if (((a2 + 1) & 0x80000000) != 0) {
                    uint64_t v21 = a2 - 0x7FFFFFFF;
                  }
                  else {
                    uint64_t v21 = a2;
                  }
                  *uint64_t v20 = v21;
                }
              }
            }
            else
            {
              if (v11 <= 3) {
                int v17 = ~(-1 << (8 * v11));
              }
              else {
                int v17 = -1;
              }
              if (v11)
              {
                int v18 = v17 & (a2 - v8);
                if (v11 <= 3) {
                  int v19 = v11;
                }
                else {
                  int v19 = 4;
                }
                bzero(a1, v11);
                switch(v19)
                {
                  case 2:
                    *(_WORD *)a1 = v18;
                    break;
                  case 3:
                    *(_WORD *)a1 = v18;
                    a1[2] = BYTE2(v18);
                    break;
                  case 4:
                    *(_DWORD *)a1 = v18;
                    break;
                  default:
                    *a1 = v18;
                    break;
                }
              }
            }
          }
          break;
      }
      return;
    }
  }
LABEL_14:
  unsigned int v14 = a2 - v8;
  if (v11 < 4)
  {
    int v15 = (v14 >> (8 * v11)) + 1;
    if (v11)
    {
      int v16 = v14 & ~(-1 << (8 * v11));
      bzero(a1, v11);
      if (v11 == 3)
      {
        *(_WORD *)a1 = v16;
        a1[2] = BYTE2(v16);
      }
      else if (v11 == 2)
      {
        *(_WORD *)a1 = v16;
      }
      else
      {
        *a1 = v16;
      }
    }
  }
  else
  {
    bzero(a1, v11);
    *(_DWORD *)a1 = v14;
    int v15 = 1;
  }
  switch(v12)
  {
    case 1:
      a1[v11] = v15;
      break;
    case 2:
      *(_WORD *)&a1[v11] = v15;
      break;
    case 3:
LABEL_57:
      __break(1u);
      JUMPOUT(0x1876DBAA0);
    case 4:
      *(_DWORD *)&a1[v11] = v15;
      break;
    default:
      return;
  }
}

uint64_t getEnumTagSinglePayload for ListStyleWriter(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (!a2) {
    return 0;
  }
  unsigned int v7 = a2 - v5;
  if (a2 <= v5) {
    goto LABEL_19;
  }
  char v8 = 8 * v6;
  if (v6 <= 3)
  {
    unsigned int v10 = ((v7 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      int v9 = *(_DWORD *)((char *)a1 + v6);
      if (!v9) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      int v9 = *(unsigned __int16 *)((char *)a1 + v6);
      if (!*(unsigned __int16 *)((char *)a1 + v6)) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_19:
      if (v5) {
        return (*(uint64_t (**)(void))(v4 + 48))();
      }
      return 0;
    }
  }
  int v9 = *((unsigned __int8 *)a1 + v6);
  if (!*((unsigned char *)a1 + v6)) {
    goto LABEL_19;
  }
LABEL_11:
  int v11 = (v9 - 1) << v8;
  if (v6 > 3) {
    int v11 = 0;
  }
  if (v6)
  {
    if (v6 > 3) {
      LODWORD(v6) = 4;
    }
    switch((int)v6)
    {
      case 2:
        LODWORD(v6) = *a1;
        break;
      case 3:
        LODWORD(v6) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v6) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v6) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v5 + (v6 | v11) + 1;
}

void storeEnumTagSinglePayload for ListStyleWriter(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = *(void *)(v6 + 64);
  BOOL v9 = a3 >= v7;
  unsigned int v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      unsigned int v14 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v14))
      {
        int v11 = 4;
      }
      else if (v14 >= 0x100)
      {
        int v11 = 2;
      }
      else
      {
        int v11 = v14 > 1;
      }
    }
    else
    {
      int v11 = 1;
    }
  }
  else
  {
    int v11 = 0;
  }
  if (v7 < a2)
  {
    unsigned int v12 = ~v7 + a2;
    if (v8 < 4)
    {
      int v13 = (v12 >> (8 * v8)) + 1;
      if (v8)
      {
        int v15 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if (v8 == 3)
        {
          *(_WORD *)a1 = v15;
          a1[2] = BYTE2(v15);
        }
        else if (v8 == 2)
        {
          *(_WORD *)a1 = v15;
        }
        else
        {
          *a1 = v15;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v12;
      int v13 = 1;
    }
    switch(v11)
    {
      case 1:
        a1[v8] = v13;
        return;
      case 2:
        *(_WORD *)&a1[v8] = v13;
        return;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v8] = v13;
        return;
      default:
        return;
    }
  }
  switch(v11)
  {
    case 1:
      a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 2:
      *(_WORD *)&a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 3:
LABEL_34:
      __break(1u);
      JUMPOUT(0x1876DBE4CLL);
    case 4:
      *(_DWORD *)&a1[v8] = 0;
      goto LABEL_20;
    default:
LABEL_20:
      if (a2)
      {
LABEL_21:
        int v16 = *(void (**)(void))(v6 + 56);
        v16();
      }
      return;
  }
}

_UNKNOWN **base witness table accessor for ViewModifier in ListStyleWriter<A>()
{
  return &protocol witness table for ListStyleWriter<A>;
}

unint64_t instantiation function for generic protocol witness table for AnyListStyleContext(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type AnyListStyleContext and conformance AnyListStyleContext();
  *(void *)(a1 + 8) = result;
  return result;
}

_UNKNOWN **base witness table accessor for View in ResolvedList<A>()
{
  return &protocol witness table for ResolvedList<A>;
}

BOOL specialized static AnyListStyleContext.accepts<A>(_:at:)(uint64_t a1)
{
  if (swift_conformsToProtocol2()) {
    uint64_t v2 = a1;
  }
  else {
    uint64_t v2 = 0;
  }
  return v2 != 0;
}

uint64_t *initializeBufferWithCopyOfBuffer for _ListValue.Init1(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = a1;
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v5 = *(_DWORD *)(v4 + 80);
  if ((v5 | 3uLL) > 7
    || (*(_DWORD *)(v4 + 80) & 0x100000) != 0
    || ((v5 + 4) & (unint64_t)~v5) + *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) > 0x18)
  {
    uint64_t v8 = *a2;
    uint64_t *v3 = *a2;
    uint64_t v3 = (uint64_t *)(v8 + ((v5 + 16) & ~(v5 | 3)));
    swift_retain();
  }
  else
  {
    *(_DWORD *)a1 = *(_DWORD *)a2;
    (*(void (**)(unint64_t, unint64_t))(v4 + 16))(((unint64_t)a1 + v5 + 4) & ~v5, ((unint64_t)a2 + v5 + 4) & ~v5);
  }
  return v3;
}

uint64_t destroy for _ListValue.Init1(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(unint64_t))(*(void *)(*(void *)(a2 + 16) - 8) + 8))((a1 + *(unsigned __int8 *)(*(void *)(*(void *)(a2 + 16) - 8) + 80) + 4) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(*(void *)(a2 + 16) - 8) + 80));
}

_DWORD *initializeWithCopy for _ListValue.Init1(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v4 + 16))(((unint64_t)a1 + *(unsigned __int8 *)(v4 + 80) + 4) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80), ((unint64_t)a2 + *(unsigned __int8 *)(v4 + 80) + 4) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  return a1;
}

_DWORD *assignWithCopy for _ListValue.Init1(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v4 + 24))(((unint64_t)a1 + *(unsigned __int8 *)(v4 + 80) + 4) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80), ((unint64_t)a2 + *(unsigned __int8 *)(v4 + 80) + 4) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  return a1;
}

_DWORD *initializeWithTake for _ListValue.Init1(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v4 + 32))(((unint64_t)a1 + *(unsigned __int8 *)(v4 + 80) + 4) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80), ((unint64_t)a2 + *(unsigned __int8 *)(v4 + 80) + 4) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  return a1;
}

_DWORD *assignWithTake for _ListValue.Init1(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v4 + 40))(((unint64_t)a1 + *(unsigned __int8 *)(v4 + 80) + 4) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80), ((unint64_t)a2 + *(unsigned __int8 *)(v4 + 80) + 4) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  return a1;
}

uint64_t getEnumTagSinglePayload for _ListValue.Init1(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  if (!a2) {
    return 0;
  }
  unsigned int v7 = a2 - v5;
  if (a2 <= v5) {
    goto LABEL_19;
  }
  uint64_t v8 = ((v6 + 4) & ~v6) + *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  char v9 = 8 * v8;
  if (v8 <= 3)
  {
    unsigned int v11 = ((v7 + ~(-1 << v9)) >> v9) + 1;
    if (HIWORD(v11))
    {
      int v10 = *(_DWORD *)((char *)a1 + v8);
      if (!v10) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v11 > 0xFF)
    {
      int v10 = *(unsigned __int16 *)((char *)a1 + v8);
      if (!*(unsigned __int16 *)((char *)a1 + v8)) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v11 < 2)
    {
LABEL_19:
      if (v5) {
        return (*(uint64_t (**)(unint64_t))(v4 + 48))(((unint64_t)a1 + v6 + 4) & ~v6);
      }
      return 0;
    }
  }
  int v10 = *((unsigned __int8 *)a1 + v8);
  if (!*((unsigned char *)a1 + v8)) {
    goto LABEL_19;
  }
LABEL_11:
  int v12 = (v10 - 1) << v9;
  if (v8 > 3) {
    int v12 = 0;
  }
  if (v8)
  {
    if (v8 > 3) {
      LODWORD(v8) = 4;
    }
    switch((int)v8)
    {
      case 2:
        LODWORD(v8) = *a1;
        break;
      case 3:
        LODWORD(v8) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v8) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v8) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v5 + (v8 | v12) + 1;
}

void storeEnumTagSinglePayload for _ListValue.Init1(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  uint64_t v8 = *(unsigned __int8 *)(v6 + 80);
  size_t v9 = ((v8 + 4) & ~v8) + *(void *)(v6 + 64);
  BOOL v10 = a3 >= v7;
  unsigned int v11 = a3 - v7;
  if (v11 != 0 && v10)
  {
    if (v9 <= 3)
    {
      unsigned int v15 = ((v11 + ~(-1 << (8 * v9))) >> (8 * v9)) + 1;
      if (HIWORD(v15))
      {
        int v12 = 4;
      }
      else if (v15 >= 0x100)
      {
        int v12 = 2;
      }
      else
      {
        int v12 = v15 > 1;
      }
    }
    else
    {
      int v12 = 1;
    }
  }
  else
  {
    int v12 = 0;
  }
  if (v7 < a2)
  {
    unsigned int v13 = ~v7 + a2;
    if (v9 < 4)
    {
      int v14 = (v13 >> (8 * v9)) + 1;
      if (v9)
      {
        int v16 = v13 & ~(-1 << (8 * v9));
        bzero(a1, v9);
        if (v9 == 3)
        {
          *(_WORD *)a1 = v16;
          a1[2] = BYTE2(v16);
        }
        else if (v9 == 2)
        {
          *(_WORD *)a1 = v16;
        }
        else
        {
          *a1 = v16;
        }
      }
    }
    else
    {
      bzero(a1, v9);
      *(_DWORD *)a1 = v13;
      int v14 = 1;
    }
    switch(v12)
    {
      case 1:
        a1[v9] = v14;
        return;
      case 2:
        *(_WORD *)&a1[v9] = v14;
        return;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v9] = v14;
        return;
      default:
        return;
    }
  }
  switch(v12)
  {
    case 1:
      a1[v9] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 2:
      *(_WORD *)&a1[v9] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 3:
LABEL_34:
      __break(1u);
      JUMPOUT(0x1876DC590);
    case 4:
      *(_DWORD *)&a1[v9] = 0;
      goto LABEL_20;
    default:
LABEL_20:
      if (a2)
      {
LABEL_21:
        unint64_t v17 = (unint64_t)&a1[v8 + 4] & ~v8;
        int v18 = *(void (**)(unint64_t))(v6 + 56);
        v18(v17);
      }
      return;
  }
}

void *type metadata accessor for ListStyleInput()
{
  return &unk_1ED4173C0;
}

uint64_t type metadata completion function for AppIntentExecutingLocation()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for AppIntentExecutingLocation(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  int v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0 || ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 48 > 0x18)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    uint64_t v4 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    unint64_t v10 = ((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v11 = ((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v12 = *(void *)v11;
    uint64_t v13 = *(void *)(v11 + 8);
    char v14 = *(unsigned char *)(v11 + 16);
    outlined copy of Environment<AppIntentExecutor?>.Content(*(void *)v11, v13, v14);
    *(void *)unint64_t v10 = v12;
    *(void *)(v10 + 8) = v13;
    *(unsigned char *)(v10 + 16) = v14;
    unsigned int v15 = *(void **)(v11 + 24);
    *(void *)(v10 + 24) = v15;
    uint64_t v16 = *(void *)(v11 + 40);
    *(void *)(v10 + 32) = *(void *)(v11 + 32);
    *(void *)(v10 + 40) = v16;
    id v17 = v15;
  }
  swift_retain();
  return v4;
}

uint64_t destroy for AppIntentExecutingLocation(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(*(void *)(a2 + 16) - 8) + 8;
  (*(void (**)(void))v3)();
  unint64_t v4 = (a1 + *(void *)(v3 + 56) + 7) & 0xFFFFFFFFFFFFFFF8;
  outlined consume of Environment<AppIntentExecutor?>.Content(*(void *)v4, *(void *)(v4 + 8), *(unsigned char *)(v4 + 16));

  return swift_release();
}

uint64_t initializeWithCopy for AppIntentExecutingLocation(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 16;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 48) + 7;
  unint64_t v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v9 = *(void *)v8;
  uint64_t v10 = *(void *)(v8 + 8);
  char v11 = *(unsigned char *)(v8 + 16);
  outlined copy of Environment<AppIntentExecutor?>.Content(*(void *)v8, v10, v11);
  *(void *)unint64_t v7 = v9;
  *(void *)(v7 + 8) = v10;
  *(unsigned char *)(v7 + 16) = v11;
  uint64_t v12 = *(void **)(v8 + 24);
  *(void *)(v7 + 24) = v12;
  uint64_t v13 = *(void *)(v8 + 40);
  *(void *)(v7 + 32) = *(void *)(v8 + 32);
  *(void *)(v7 + 40) = v13;
  id v14 = v12;
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for AppIntentExecutingLocation(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 24;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 40) + 7;
  unint64_t v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v9 = *(void *)v8;
  uint64_t v10 = *(void *)(v8 + 8);
  char v11 = *(unsigned char *)(v8 + 16);
  outlined copy of Environment<AppIntentExecutor?>.Content(*(void *)v8, v10, v11);
  uint64_t v12 = *(void *)v7;
  uint64_t v13 = *(void *)(v7 + 8);
  char v14 = *(unsigned char *)(v7 + 16);
  *(void *)unint64_t v7 = v9;
  *(void *)(v7 + 8) = v10;
  *(unsigned char *)(v7 + 16) = v11;
  outlined consume of Environment<AppIntentExecutor?>.Content(v12, v13, v14);
  unsigned int v15 = *(void **)(v8 + 24);
  uint64_t v16 = *(void **)(v7 + 24);
  *(void *)(v7 + 24) = v15;
  id v17 = v15;

  uint64_t v18 = *(void *)(v8 + 40);
  *(void *)(v7 + 32) = *(void *)(v8 + 32);
  *(void *)(v7 + 40) = v18;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t initializeWithTake for AppIntentExecutingLocation(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 32;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 32) + 7;
  unint64_t v7 = (_OWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v8 = (_OWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  long long v10 = v8[1];
  long long v9 = v8[2];
  *unint64_t v7 = *v8;
  v7[1] = v10;
  v7[2] = v9;
  return a1;
}

uint64_t assignWithTake for AppIntentExecutingLocation(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 40;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 24) + 7;
  unint64_t v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  LOBYTE(v6) = *(unsigned char *)(v8 + 16);
  uint64_t v9 = *(void *)v7;
  uint64_t v10 = *(void *)(v7 + 8);
  char v11 = *(unsigned char *)(v7 + 16);
  *(_OWORD *)unint64_t v7 = *(_OWORD *)v8;
  *(unsigned char *)(v7 + 16) = v6;
  outlined consume of Environment<AppIntentExecutor?>.Content(v9, v10, v11);
  uint64_t v12 = *(void **)(v7 + 24);
  *(void *)(v7 + 24) = *(void *)(v8 + 24);

  *(_OWORD *)(v7 + 32) = *(_OWORD *)(v8 + 32);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for AppIntentExecutingLocation(_DWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (v5 <= 0x7FFFFFFF) {
    unsigned int v7 = 0x7FFFFFFF;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  if (v7 < a2)
  {
    unint64_t v8 = ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 48;
    unsigned int v9 = a2 - v7;
    uint64_t v10 = v8 & 0xFFFFFFF8;
    if ((v8 & 0xFFFFFFF8) != 0) {
      unsigned int v11 = 2;
    }
    else {
      unsigned int v11 = v9 + 1;
    }
    if (v11 >= 0x10000) {
      unsigned int v12 = 4;
    }
    else {
      unsigned int v12 = 2;
    }
    if (v11 < 0x100) {
      unsigned int v12 = 1;
    }
    if (v11 >= 2) {
      uint64_t v13 = v12;
    }
    else {
      uint64_t v13 = 0;
    }
    switch(v13)
    {
      case 1:
        int v14 = *((unsigned __int8 *)a1 + v8);
        if (!v14) {
          break;
        }
        goto LABEL_22;
      case 2:
        int v14 = *(unsigned __int16 *)((char *)a1 + v8);
        if (v14) {
          goto LABEL_22;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x1876DCC7CLL);
      case 4:
        int v14 = *(_DWORD *)((char *)a1 + v8);
        if (!v14) {
          break;
        }
LABEL_22:
        int v16 = v14 - 1;
        if (v10)
        {
          int v16 = 0;
          LODWORD(v10) = *a1;
        }
        return v7 + (v10 | v16) + 1;
      default:
        break;
    }
  }
  if (v5 >= 0x7FFFFFFF) {
    return (*(uint64_t (**)(void))(v4 + 48))();
  }
  unint64_t v17 = *(void *)((((unint64_t)a1 + v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 24);
  if (v17 >= 0xFFFFFFFF) {
    LODWORD(v17) = -1;
  }
  return (v17 + 1);
}

double storeEnumTagSinglePayload for AppIntentExecutingLocation(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  unint64_t v10 = ((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 48;
  if (((v9 + 7) & 0xFFFFFFF8) == 0xFFFFFFD0) {
    unsigned int v11 = a3 - v8 + 1;
  }
  else {
    unsigned int v11 = 2;
  }
  if (v11 >= 0x10000) {
    int v12 = 4;
  }
  else {
    int v12 = 2;
  }
  if (v11 < 0x100) {
    int v12 = 1;
  }
  if (v11 >= 2) {
    unsigned int v13 = v12;
  }
  else {
    unsigned int v13 = 0;
  }
  if (v8 < a3) {
    uint64_t v14 = v13;
  }
  else {
    uint64_t v14 = 0;
  }
  if (a2 > v8)
  {
    if (((v9 + 7) & 0xFFFFFFF8) == 0xFFFFFFD0) {
      int v15 = a2 - v8;
    }
    else {
      int v15 = 1;
    }
    if (((v9 + 7) & 0xFFFFFFF8) != 0xFFFFFFD0)
    {
      int v16 = ~v8 + a2;
      bzero(a1, ((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 48);
      *(_DWORD *)a1 = v16;
    }
    switch(v14)
    {
      case 1:
        a1[v10] = v15;
        return result;
      case 2:
        *(_WORD *)&a1[v10] = v15;
        return result;
      case 3:
        goto LABEL_43;
      case 4:
        *(_DWORD *)&a1[v10] = v15;
        return result;
      default:
        return result;
    }
  }
  switch(v14)
  {
    case 1:
      a1[v10] = 0;
      if (!a2) {
        return result;
      }
      goto LABEL_33;
    case 2:
      *(_WORD *)&a1[v10] = 0;
      if (!a2) {
        return result;
      }
      goto LABEL_33;
    case 3:
LABEL_43:
      __break(1u);
      JUMPOUT(0x1876DCE80);
    case 4:
      *(_DWORD *)&a1[v10] = 0;
      goto LABEL_32;
    default:
LABEL_32:
      if (a2)
      {
LABEL_33:
        if (v7 < 0x7FFFFFFF)
        {
          unint64_t v19 = (unint64_t)&a1[v9 + 7] & 0xFFFFFFFFFFFFFFF8;
          if ((a2 & 0x80000000) != 0)
          {
            *(void *)(v19 + 40) = 0;
            double result = 0.0;
            *(_OWORD *)(v19 + 24) = 0u;
            *(_OWORD *)(v19 + 8) = 0u;
            *(void *)unint64_t v19 = a2 ^ 0x80000000;
          }
          else
          {
            *(void *)(v19 + 24) = a2 - 1;
          }
        }
        else
        {
          uint64_t v18 = *(void (**)(void))(v6 + 56);
          v18();
        }
      }
      return result;
  }
}

uint64_t type metadata accessor for AppIntentExecutingLocation()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t protocol witness for Location.wasRead.setter in conformance AppIntentExecutingLocation<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(a2, a2, a3, a4);
}

uint64_t (*protocol witness for Location.wasRead.modify in conformance AppIntentExecutingLocation<A>(uint64_t a1, uint64_t a2))(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)a1 = v2;
  *(void *)(a1 + 8) = a2;
  *(unsigned char *)(a1 + 16) = 1;
  return protocol witness for Location.wasRead.modify in conformance AppIntentExecutingLocation<A>;
}

uint64_t protocol witness for Location.wasRead.modify in conformance AppIntentExecutingLocation<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(*(void *)(a1 + 8), a2, a3, a4);
}

uint64_t protocol witness for Location.set(_:transaction:) in conformance AppIntentExecutingLocation<A>()
{
  return specialized AppIntentExecutingLocation.set(_:transaction:)();
}

uint64_t protocol witness for Location.update() in conformance AppIntentExecutingLocation<A>()
{
  return MEMORY[0x1F41011E8]();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance AppIntentExecutingLocation<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return static AppIntentExecutingLocation.== infix(_:_:)(a1, a2, *(void *)(a3 + 16));
}

uint64_t base witness table accessor for Equatable in AppIntentExecutingLocation<A>()
{
  return swift_getWitnessTable();
}

uint64_t static AppIntentExecutingLocation.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = type metadata accessor for AppIntentExecutingLocation();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v9 = &v25[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1F4188790](v10);
  int v12 = &v25[-v11];
  uint64_t v27 = a3;
  uint64_t v28 = a2;
  int v29 = 3;
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(a1, (uint64_t)partial apply for closure #1 in compareValues<A>(_:_:options:), (uint64_t)v26, a3, MEMORY[0x1E4FBC248], MEMORY[0x1E4FBB390], MEMORY[0x1E4FBC278], v13);
  LODWORD(a3) = v34;
  uint64_t v14 = *(void (**)(unsigned char *, uint64_t, uint64_t))(v7 + 16);
  v14(v12, a1, v6);
  v14(v9, a2, v6);
  if (a3 == 1)
  {
    uint64_t v15 = *(int *)(v6 + 28);
    int v16 = (long long *)&v12[v15];
    char v17 = v12[v15 + 16];
    uint64_t v18 = *(void *)&v12[v15 + 40];
    unint64_t v19 = &v9[v15];
    char v20 = v19[16];
    uint64_t v21 = *((void *)v19 + 5);
    long long v34 = *v16;
    char v35 = v17;
    long long v36 = *(long long *)((char *)v16 + 24);
    uint64_t v37 = v18;
    long long v30 = *(_OWORD *)v19;
    char v31 = v20;
    long long v32 = *(_OWORD *)(v19 + 24);
    uint64_t v33 = v21;
    uint64_t v22 = AGCompareValues();
  }
  else
  {
    uint64_t v22 = 0;
  }
  uint64_t v23 = *(void (**)(unsigned char *, uint64_t))(v7 + 8);
  v23(v9, v6);
  v23(v12, v6);
  return v22;
}

uint64_t specialized AppIntentExecutingLocation.set(_:transaction:)()
{
  return static MainActor.assumeIsolatedIfLinkedOnOrAfter<A>(_:context:_:file:line:)();
}

uint64_t partial apply for closure #1 in AppIntentAction.perform()()
{
  return closure #1 in AppIntentAction.perform()(*(void *)(v0 + 16));
}

_UNKNOWN **associated type witness table accessor for ControlWidgetConfiguration.Body : ControlWidgetConfiguration in EmptyControlWidgetConfiguration()
{
  return &protocol witness table for Never;
}

ValueMetadata *type metadata accessor for EmptyControlWidgetConfiguration()
{
  return &type metadata for EmptyControlWidgetConfiguration;
}

void UIKitKeyPressResponder.pressesBegan(_:with:)(uint64_t a1, void *a2)
{
  uint64_t v3 = v2;
  if (a2)
  {
    uint64_t v6 = one-time initialization token for monitor;
    id v7 = a2;
    if (v6 != -1) {
      swift_once();
    }
    uint64_t v8 = static DefaultModifierKeySource.monitor;
    uint64_t v9 = specialized EventModifiers.init(_:)((int)objc_msgSend(v7, sel_modifierFlags));
    uint64_t v10 = *(void *)(v8 + 24);
    *(void *)(v8 + 24) = v9;
    ModifierKeyMonitor.value.didset(v10);
  }
  if (!swift_weakLoadStrong()) {
    goto LABEL_10;
  }
  uint64_t v11 = (void *)specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
  id v12 = v3;
  uint64_t v13 = specialized Sequence.reduce<A>(into:_:)(v11, a1, 0, (uint64_t)v12);

  if (!*(void *)(v13 + 16))
  {
    swift_release();
    swift_bridgeObjectRelease();
    goto LABEL_10;
  }
  Swift::Int v14 = EventBindingManager.send(_:)();
  uint64_t v15 = specialized Set.init<A>(_:)(v13);
  char v16 = specialized static Set.== infix(_:_:)(v14, v15);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v16 & 1) == 0)
  {
LABEL_10:
    type metadata accessor for UIPress();
    lazy protocol witness table accessor for type UIPress and conformance NSObject();
    Class isa = Set._bridgeToObjectiveC()().super.isa;
    v18.receiver = v3;
    v18.super_class = (Class)type metadata accessor for UIKitKeyPressResponder();
    objc_msgSendSuper2(&v18, sel_pressesBegan_withEvent_, isa, a2);
  }
}

void UIKitKeyPressResponder.pressesChanged(_:with:)(uint64_t a1, void *a2)
{
  uint64_t v3 = v2;
  if (a2)
  {
    uint64_t v6 = one-time initialization token for monitor;
    id v7 = a2;
    if (v6 != -1) {
      swift_once();
    }
    uint64_t v8 = static DefaultModifierKeySource.monitor;
    uint64_t v9 = specialized EventModifiers.init(_:)((int)objc_msgSend(v7, sel_modifierFlags));
    uint64_t v10 = *(void *)(v8 + 24);
    *(void *)(v8 + 24) = v9;
    ModifierKeyMonitor.value.didset(v10);
  }
  if (!swift_weakLoadStrong()) {
    goto LABEL_10;
  }
  uint64_t v11 = (void *)specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
  id v12 = v3;
  uint64_t v13 = specialized Sequence.reduce<A>(into:_:)(v11, a1, 1, (uint64_t)v12);

  if (!*(void *)(v13 + 16))
  {
    swift_release();
    swift_bridgeObjectRelease();
    goto LABEL_10;
  }
  Swift::Int v14 = EventBindingManager.send(_:)();
  uint64_t v15 = specialized Set.init<A>(_:)(v13);
  char v16 = specialized static Set.== infix(_:_:)(v14, v15);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v16 & 1) == 0)
  {
LABEL_10:
    type metadata accessor for UIPress();
    lazy protocol witness table accessor for type UIPress and conformance NSObject();
    Class isa = Set._bridgeToObjectiveC()().super.isa;
    v18.receiver = v3;
    v18.super_class = (Class)type metadata accessor for UIKitKeyPressResponder();
    objc_msgSendSuper2(&v18, sel_pressesChanged_withEvent_, isa, a2);
  }
}

void UIKitKeyPressResponder.pressesEnded(_:with:)(uint64_t a1, void *a2)
{
  uint64_t v3 = v2;
  if (a2)
  {
    uint64_t v6 = one-time initialization token for monitor;
    id v7 = a2;
    if (v6 != -1) {
      swift_once();
    }
    uint64_t v8 = static DefaultModifierKeySource.monitor;
    uint64_t v9 = specialized EventModifiers.init(_:)((int)objc_msgSend(v7, sel_modifierFlags));
    uint64_t v10 = *(void *)(v8 + 24);
    *(void *)(v8 + 24) = v9;
    ModifierKeyMonitor.value.didset(v10);
  }
  if (!swift_weakLoadStrong()) {
    goto LABEL_10;
  }
  uint64_t v11 = (void *)specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
  id v12 = v3;
  uint64_t v13 = specialized Sequence.reduce<A>(into:_:)(v11, a1, 2, (uint64_t)v12);

  if (!*(void *)(v13 + 16))
  {
    swift_release();
    swift_bridgeObjectRelease();
    goto LABEL_10;
  }
  Swift::Int v14 = EventBindingManager.send(_:)();
  uint64_t v15 = specialized Set.init<A>(_:)(v13);
  char v16 = specialized static Set.== infix(_:_:)(v14, v15);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v16 & 1) == 0)
  {
LABEL_10:
    type metadata accessor for UIPress();
    lazy protocol witness table accessor for type UIPress and conformance NSObject();
    Class isa = Set._bridgeToObjectiveC()().super.isa;
    v18.receiver = v3;
    v18.super_class = (Class)type metadata accessor for UIKitKeyPressResponder();
    objc_msgSendSuper2(&v18, sel_pressesEnded_withEvent_, isa, a2);
  }
}

void UIKitKeyPressResponder.pressesCancelled(_:with:)(uint64_t a1, void *a2)
{
  uint64_t v3 = v2;
  if (a2)
  {
    uint64_t v6 = one-time initialization token for monitor;
    id v7 = a2;
    if (v6 != -1) {
      swift_once();
    }
    uint64_t v8 = static DefaultModifierKeySource.monitor;
    uint64_t v9 = specialized EventModifiers.init(_:)((int)objc_msgSend(v7, sel_modifierFlags));
    uint64_t v10 = *(void *)(v8 + 24);
    *(void *)(v8 + 24) = v9;
    ModifierKeyMonitor.value.didset(v10);
  }
  if (!swift_weakLoadStrong()) {
    goto LABEL_10;
  }
  uint64_t v11 = (void *)specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
  id v12 = v3;
  uint64_t v13 = specialized Sequence.reduce<A>(into:_:)(v11, a1, 3, (uint64_t)v12);

  if (!*(void *)(v13 + 16))
  {
    swift_release();
    swift_bridgeObjectRelease();
    goto LABEL_10;
  }
  Swift::Int v14 = EventBindingManager.send(_:)();
  uint64_t v15 = specialized Set.init<A>(_:)(v13);
  char v16 = specialized static Set.== infix(_:_:)(v14, v15);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v16 & 1) == 0)
  {
LABEL_10:
    type metadata accessor for UIPress();
    lazy protocol witness table accessor for type UIPress and conformance NSObject();
    Class isa = Set._bridgeToObjectiveC()().super.isa;
    v18.receiver = v3;
    v18.super_class = (Class)type metadata accessor for UIKitKeyPressResponder();
    objc_msgSendSuper2(&v18, sel_pressesCancelled_withEvent_, isa, a2);
  }
}

uint64_t @objc UIKitKeyPressResponder.pressesBegan(_:with:)(void *a1, uint64_t a2, uint64_t a3, void *a4, void (*a5)(uint64_t, void *))
{
  type metadata accessor for UIPress();
  lazy protocol witness table accessor for type UIPress and conformance NSObject();
  uint64_t v8 = static Set._unconditionallyBridgeFromObjectiveC(_:)();
  id v9 = a4;
  id v10 = a1;
  a5(v8, a4);

  return swift_bridgeObjectRelease();
}

id UIKitKeyPressResponder.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for UIKitKeyPressResponder();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

unint64_t type metadata accessor for UIPress()
{
  unint64_t result = lazy cache variable for type metadata for UIPress;
  if (!lazy cache variable for type metadata for UIPress)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for UIPress);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type UIPress and conformance NSObject()
{
  unint64_t result = lazy protocol witness table cache variable for type UIPress and conformance NSObject;
  if (!lazy protocol witness table cache variable for type UIPress and conformance NSObject)
  {
    type metadata accessor for UIPress();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UIPress and conformance NSObject);
  }
  return result;
}

uint64_t specialized Sequence.reduce<A>(into:_:)(void *a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v52 = a4;
  int v53 = a3;
  uint64_t v4 = a2;
  if ((a2 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    type metadata accessor for UIPress();
    lazy protocol witness table accessor for type UIPress and conformance NSObject();
    Set.Iterator.init(_cocoa:)();
    uint64_t v4 = v70;
    uint64_t v50 = v71;
    uint64_t v6 = v72;
    uint64_t v7 = v73;
    unint64_t v8 = v74;
  }
  else
  {
    uint64_t v9 = -1 << *(unsigned char *)(a2 + 32);
    uint64_t v10 = *(void *)(a2 + 56);
    uint64_t v50 = a2 + 56;
    uint64_t v11 = ~v9;
    uint64_t v12 = -v9;
    if (v12 < 64) {
      uint64_t v13 = ~(-1 << v12);
    }
    else {
      uint64_t v13 = -1;
    }
    unint64_t v8 = v13 & v10;
    swift_bridgeObjectRetain();
    uint64_t v6 = v11;
    uint64_t v7 = 0;
  }
  v48[0] = v6;
  v48[3] = v4 & 0x7FFFFFFFFFFFFFFFLL;
  int64_t v49 = (unint64_t)(v6 + 64) >> 6;
  v48[2] = MEMORY[0x1E4FBC838] + 8;
  uint64_t v51 = v4;
  if ((v4 & 0x8000000000000000) == 0) {
    goto LABEL_13;
  }
LABEL_10:
  uint64_t v14 = __CocoaSet.Iterator.next()();
  if (!v14) {
    goto LABEL_46;
  }
  *(void *)&long long v61 = v14;
  type metadata accessor for UIPress();
  swift_unknownObjectRetain();
  swift_dynamicCast();
  id v15 = *(id *)&v68[0];
  swift_unknownObjectRelease();
  uint64_t v16 = v7;
  uint64_t v17 = v8;
  if (!v15) {
    goto LABEL_46;
  }
  while (1)
  {
    LOBYTE(v59) = v53;
    UIPress.resolve(phase:)((char *)&v59, (uint64_t)&v61);
    if (!*((void *)&v63 + 1))
    {
      outlined destroy of KeyEvent?((uint64_t)&v61);

      uint64_t v7 = v16;
      unint64_t v8 = v17;
      if (v4 < 0) {
        goto LABEL_10;
      }
      goto LABEL_13;
    }
    unint64_t v54 = v17;
    uint64_t v75 = v16;
    v68[4] = v65;
    v68[5] = v66;
    uint64_t v69 = v67;
    v68[0] = v61;
    v68[1] = v62;
    v68[2] = v63;
    v68[3] = v64;
    swift_beginAccess();
    Swift::UInt v22 = KeyEvent.Tracker.serial(for:)(v68);
    swift_endAccess();
    *((void *)&v62 + 1) = &type metadata for KeyEvent;
    unint64_t v23 = lazy protocol witness table accessor for type KeyEvent and conformance KeyEvent();
    *(void *)&long long v63 = v23;
    *(void *)&long long v61 = swift_allocObject();
    outlined init with copy of KeyEvent((uint64_t)v68, v61 + 16);
    outlined init with take of OptionalBinaryInteger(&v61, (uint64_t)&v59);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    unsigned int v58 = a1;
    unint64_t v26 = specialized __RawDictionaryStorage.find<A>(_:)((Swift::UInt)&type metadata for KeyEvent, v22);
    uint64_t v27 = a1[2];
    BOOL v28 = (v25 & 1) == 0;
    uint64_t v29 = v27 + v28;
    if (__OFADD__(v27, v28))
    {
      __break(1u);
LABEL_48:
      __break(1u);
LABEL_49:
      __break(1u);
LABEL_50:
      uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
      return result;
    }
    char v30 = v25;
    if (a1[3] >= v29)
    {
      if (isUniquelyReferenced_nonNull_native)
      {
        a1 = v58;
        if ((v25 & 1) == 0) {
          goto LABEL_42;
        }
      }
      else
      {
        specialized _NativeDictionary.copy()();
        a1 = v58;
        if ((v30 & 1) == 0) {
          goto LABEL_42;
        }
      }
    }
    else
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v29, isUniquelyReferenced_nonNull_native);
      unint64_t v31 = specialized __RawDictionaryStorage.find<A>(_:)((Swift::UInt)&type metadata for KeyEvent, v22);
      if ((v30 & 1) != (v32 & 1)) {
        goto LABEL_50;
      }
      unint64_t v26 = v31;
      a1 = v58;
      if ((v30 & 1) == 0)
      {
LABEL_42:
        uint64_t v34 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v59, v60);
        double v35 = MEMORY[0x1F4188790](v34);
        uint64_t v37 = (char *)v48 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
        (*(void (**)(char *, double))(v38 + 16))(v37, v35);
        char v56 = &type metadata for KeyEvent;
        unint64_t v57 = v23;
        uint64_t v39 = swift_allocObject();
        *(void *)&long long v55 = v39;
        long long v40 = *((_OWORD *)v37 + 1);
        *(_OWORD *)(v39 + 16) = *(_OWORD *)v37;
        *(_OWORD *)(v39 + 32) = v40;
        *(void *)(v39 + 112) = *((void *)v37 + 12);
        long long v41 = *((_OWORD *)v37 + 5);
        *(_OWORD *)(v39 + 80) = *((_OWORD *)v37 + 4);
        *(_OWORD *)(v39 + 96) = v41;
        long long v42 = *((_OWORD *)v37 + 3);
        *(_OWORD *)(v39 + 48) = *((_OWORD *)v37 + 2);
        *(_OWORD *)(v39 + 64) = v42;
        a1[(v26 >> 6) + 8] |= 1 << v26;
        int v43 = (void *)(a1[6] + 16 * v26);
        *int v43 = &type metadata for KeyEvent;
        v43[1] = v22;
        outlined init with take of OptionalBinaryInteger(&v55, a1[7] + 40 * v26);
        uint64_t v44 = a1[2];
        BOOL v45 = __OFADD__(v44, 1);
        uint64_t v46 = v44 + 1;
        if (v45) {
          goto LABEL_48;
        }
        a1[2] = v46;
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v59);
        goto LABEL_44;
      }
    }
    uint64_t v33 = a1[7] + 40 * v26;
    __swift_destroy_boxed_opaque_existential_1(v33);
    outlined init with take of OptionalBinaryInteger(&v59, v33);
LABEL_44:
    swift_bridgeObjectRelease();
    outlined destroy of KeyEvent((uint64_t)v68);

    uint64_t v7 = v75;
    unint64_t v8 = v54;
    uint64_t v4 = v51;
    if (v51 < 0) {
      goto LABEL_10;
    }
LABEL_13:
    if (!v8) {
      break;
    }
    uint64_t v17 = (v8 - 1) & v8;
    unint64_t v18 = __clz(__rbit64(v8)) | (v7 << 6);
    uint64_t v16 = v7;
LABEL_31:
    id v15 = *(id *)(*(void *)(v4 + 48) + 8 * v18);
    if (!v15) {
      goto LABEL_46;
    }
  }
  int64_t v19 = v7 + 1;
  if (__OFADD__(v7, 1)) {
    goto LABEL_49;
  }
  if (v19 >= v49) {
    goto LABEL_46;
  }
  unint64_t v20 = *(void *)(v50 + 8 * v19);
  uint64_t v16 = v7 + 1;
  if (v20) {
    goto LABEL_30;
  }
  uint64_t v16 = v7 + 2;
  if (v7 + 2 >= v49) {
    goto LABEL_46;
  }
  unint64_t v20 = *(void *)(v50 + 8 * v16);
  if (v20) {
    goto LABEL_30;
  }
  uint64_t v16 = v7 + 3;
  if (v7 + 3 >= v49) {
    goto LABEL_46;
  }
  unint64_t v20 = *(void *)(v50 + 8 * v16);
  if (v20) {
    goto LABEL_30;
  }
  uint64_t v16 = v7 + 4;
  if (v7 + 4 >= v49) {
    goto LABEL_46;
  }
  unint64_t v20 = *(void *)(v50 + 8 * v16);
  if (v20) {
    goto LABEL_30;
  }
  uint64_t v16 = v7 + 5;
  if (v7 + 5 >= v49) {
    goto LABEL_46;
  }
  unint64_t v20 = *(void *)(v50 + 8 * v16);
  if (v20)
  {
LABEL_30:
    uint64_t v17 = (v20 - 1) & v20;
    unint64_t v18 = __clz(__rbit64(v20)) + (v16 << 6);
    goto LABEL_31;
  }
  uint64_t v21 = v7 + 6;
  while (v49 != v21)
  {
    unint64_t v20 = *(void *)(v50 + 8 * v21++);
    if (v20)
    {
      uint64_t v16 = v21 - 1;
      goto LABEL_30;
    }
  }
LABEL_46:
  outlined consume of Set<UIPress>.Iterator._Variant();
  return (uint64_t)a1;
}

uint64_t outlined destroy of KeyEvent?(uint64_t a1)
{
  type metadata accessor for KeyEvent?();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void type metadata accessor for KeyEvent?()
{
  if (!lazy cache variable for type metadata for KeyEvent?)
  {
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for KeyEvent?);
    }
  }
}

uint64_t sub_1876DE1DC()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(v0 + 80);

  return swift_deallocObject();
}

uint64_t outlined init with copy of KeyEvent(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t outlined destroy of KeyEvent(uint64_t a1)
{
  return a1;
}

void static WindowLevel.normal.getter()
{
}

void WindowLevel.hash(into:)()
{
}

void static WindowLevel.== infix(_:_:)()
{
}

void WindowLevel.hashValue.getter()
{
}

void Scene.windowLevel(_:)()
{
}

unint64_t lazy protocol witness table accessor for type WindowLevel and conformance WindowLevel()
{
  unint64_t result = lazy protocol witness table cache variable for type WindowLevel and conformance WindowLevel;
  if (!lazy protocol witness table cache variable for type WindowLevel and conformance WindowLevel)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WindowLevel and conformance WindowLevel);
  }
  return result;
}

ValueMetadata *type metadata accessor for WindowLevel()
{
  return &type metadata for WindowLevel;
}

uint64_t sub_1876DE3AC(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

unsigned char *storeEnumTagSinglePayload for WindowLevel(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1876DE480);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for WindowLevel.Storage()
{
  return &type metadata for WindowLevel.Storage;
}

unint64_t lazy protocol witness table accessor for type WindowLevel.Storage and conformance WindowLevel.Storage()
{
  unint64_t result = lazy protocol witness table cache variable for type WindowLevel.Storage and conformance WindowLevel.Storage;
  if (!lazy protocol witness table cache variable for type WindowLevel.Storage and conformance WindowLevel.Storage)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WindowLevel.Storage and conformance WindowLevel.Storage);
  }
  return result;
}

void static WindowLevel.automatic.getter()
{
}

void static WindowLevel.floating.getter()
{
}

void static WindowLevel.desktop.getter()
{
}

void _TestApp.run()()
{
  type metadata accessor for <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0(0, &lazy cache variable for type metadata for <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0);
  uint64_t v46 = *(void *)(v0 - 8);
  uint64_t v47 = v0;
  MEMORY[0x1F4188790](v0);
  uint64_t v44 = (char *)&v41 - v1;
  type metadata accessor for TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>(0, &lazy cache variable for type metadata for TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>, &lazy cache variable for type metadata for <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0);
  uint64_t v3 = v2;
  uint64_t v45 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v45 + 64);
  MEMORY[0x1F4188790](v2);
  uint64_t v48 = (uint64_t)&v41 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v5);
  uint64_t v7 = (long long *)((char *)&v41 - v6);
  type metadata accessor for TestIDView<<<opaque return type of View.truePreference<A>(_:)>>.0, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>();
  uint64_t v42 = *(void *)(v8 - 8);
  uint64_t v9 = *(void *)(v42 + 64);
  MEMORY[0x1F4188790](v8);
  uint64_t v43 = (uint64_t)&v41 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v10);
  uint64_t v12 = (char *)&v41 - v11;
  uint64_t v13 = static CommandLine.arguments.getter();
  *(void *)&long long v53 = 0x746E616D65732D2DLL;
  *((void *)&v53 + 1) = 0xEB00000000736369;
  uint64_t v50 = &v53;
  uint64_t v14 = specialized BidirectionalCollection.lastIndex(where:)(partial apply for specialized closure #1 in BidirectionalCollection<>.lastIndex(of:), (uint64_t)v49, v13);
  char v16 = v15;
  swift_bridgeObjectRelease();
  if (v16) {
    goto LABEL_9;
  }
  BOOL v17 = __OFADD__(v14, 1);
  unint64_t v18 = v14 + 1;
  if (!v17)
  {
    uint64_t v19 = *(void *)(static CommandLine.arguments.getter() + 16);
    swift_bridgeObjectRelease();
    if (v18 == v19)
    {
LABEL_9:
      v21._countAndFlagsBits = 0x74736574616CLL;
      v21._object = (void *)0xE600000000000000;
      _TestApp.setSemantics(_:)(v21);
      goto LABEL_11;
    }
    uint64_t v20 = static CommandLine.arguments.getter();
    if ((v18 & 0x8000000000000000) != 0)
    {
LABEL_8:
      __break(1u);
      goto LABEL_9;
    }
    if (v18 < *(void *)(v20 + 16))
    {
      uint64_t v22 = v20 + 16 * v18;
      uint64_t v23 = *(void *)(v22 + 32);
      uint64_t v24 = *(void **)(v22 + 40);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v25._countAndFlagsBits = v23;
      v25._object = v24;
      _TestApp.setSemantics(_:)(v25);
      swift_bridgeObjectRelease();
LABEL_11:
      unint64_t v26 = (__CFString *)MEMORY[0x18C115780](0x6E614C656C707041, 0xEE00736567617567);
      Class isa = Array._bridgeToObjectiveC()().super.isa;
      CFPreferencesSetAppValue(v26, isa, (CFStringRef)*MEMORY[0x1E4F1D3D8]);

      _CTClearFontFallbacksCache();
      static Color.Resolved.legacyInterpolation.setter();
      _TestApp.RootView.init()();
      long long v51 = v53;
      long long v41 = v54;
      long long v52 = v54;
      lazy protocol witness table accessor for type _TestApp.RootView and conformance _TestApp.RootView();
      View.truePreference<A>(_:)();
      swift_release();
      swift_release();
      static _TestApp.rootViewIdentifier.getter();
      _TestApp.RootView.init()();
      long long v41 = v53;
      long long v28 = v54;
      uint64_t v29 = v44;
      static _TestApp.comparisonViewIdentifier.getter();
      char v30 = (char *)v7 + *(int *)(v3 + 52);
      uint64_t v32 = v46;
      uint64_t v31 = v47;
      (*(void (**)(char *, char *, uint64_t))(v46 + 16))(v30, v29, v47);
      *uint64_t v7 = v41;
      v7[1] = v28;
      (*(void (**)(char *, uint64_t))(v32 + 8))(v29, v31);
      uint64_t v33 = v43;
      outlined init with copy of TestIDView<<<opaque return type of View.truePreference<A>(_:)>>.0, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>((uint64_t)v12, v43);
      uint64_t v34 = v48;
      outlined init with copy of TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>((uint64_t)v7, v48, &lazy cache variable for type metadata for TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>, &lazy cache variable for type metadata for <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0);
      unint64_t v35 = (*(unsigned __int8 *)(v42 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v42 + 80);
      unint64_t v36 = (v9 + *(unsigned __int8 *)(v45 + 80) + v35) & ~(unint64_t)*(unsigned __int8 *)(v45 + 80);
      uint64_t v37 = swift_allocObject();
      outlined init with take of TestIDView<<<opaque return type of View.truePreference<A>(_:)>>.0, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>(v33, v37 + v35);
      outlined init with take of TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>(v34, v37 + v36);
      uint64_t v38 = (uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v37 + ((v4 + v36 + 7) & 0xFFFFFFFFFFFFFFF8));
      *uint64_t v38 = closure #1 in _TestApp.run();
      v38[1] = 0;
      uint64_t v39 = static TestingSceneDelegate.connectCallback;
      static TestingSceneDelegate.connectCallback = partial apply for specialized closure #1 in runTestingApp<A, B>(rootView:comparisonView:didLaunch:);
      qword_1E90FC898 = v37;
      outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?((uint64_t)v39);
      type metadata accessor for TestingAppDelegate();
      long long v40 = (char **)MEMORY[0x18C117520]();
      closure #1 in KitRendererCommon(_:)(v40);
    }
    __break(1u);
  }
  __break(1u);
  goto LABEL_8;
}

unint64_t lazy protocol witness table accessor for type _TestApp.RootView and conformance _TestApp.RootView()
{
  unint64_t result = lazy protocol witness table cache variable for type _TestApp.RootView and conformance _TestApp.RootView;
  if (!lazy protocol witness table cache variable for type _TestApp.RootView and conformance _TestApp.RootView)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _TestApp.RootView and conformance _TestApp.RootView);
  }
  return result;
}

void type metadata accessor for TestIDView<<<opaque return type of View.truePreference<A>(_:)>>.0, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>()
{
  if (!lazy cache variable for type metadata for TestIDView<<<opaque return type of View.truePreference<A>(_:)>>.0, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>)
  {
    type metadata accessor for <<opaque return type of View.truePreference<A>(_:)>>.0();
    type metadata accessor for <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0(255, (unint64_t *)&lazy cache variable for type metadata for <<opaque return type of static _TestApp.rootViewIdentifier>>.0);
    lazy protocol witness table accessor for type _TestApp.RootView and conformance _TestApp.RootView();
    swift_getOpaqueTypeConformance2();
    swift_getOpaqueTypeConformance2();
    unint64_t v0 = type metadata accessor for TestIDView();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TestIDView<<<opaque return type of View.truePreference<A>(_:)>>.0, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>);
    }
  }
}

void type metadata accessor for <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0(uint64_t a1, unint64_t *a2)
{
  if (!*a2)
  {
    OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
    if (!v4) {
      atomic_store(OpaqueTypeMetadata2, a2);
    }
  }
}

uint64_t specialized Array.count.getter(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

uint64_t closure #1 in _TestApp.run()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  swift_unknownObjectRetain();
  static _TestApp.host.setter();
  swift_unknownObjectRetain();
  static _TestApp.comparisonHost.setter();
  static _TestApp.defaultEnvironment.getter();
  static _TestApp.environmentOverride.setter();
  uint64_t ObjectType = swift_getObjectType();
  static _TestApp.defaultEnvironment.getter();
  long long v9 = v10;
  (*(void (**)(long long *, uint64_t, uint64_t))(a2 + 64))(&v9, ObjectType, a2);
  uint64_t v7 = swift_getObjectType();
  static _TestApp.defaultEnvironment.getter();
  long long v9 = v10;
  return (*(uint64_t (**)(long long *, uint64_t, uint64_t))(a4 + 64))(&v9, v7, a4);
}

uint64_t specialized BidirectionalCollection.lastIndex(where:)(uint64_t (*a1)(void *), uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 + 16);
  if (v4)
  {
    uint64_t v6 = (uint64_t *)(a3 + 16 * v4 + 24);
    do
    {
      uint64_t v7 = *v6;
      v10[0] = *(v6 - 1);
      v10[1] = v7;
      swift_bridgeObjectRetain();
      char v8 = a1(v10);
      swift_bridgeObjectRelease();
      if (v3) {
        break;
      }
      v6 -= 2;
      --v4;
    }
    while (!(v8 & 1 | (v4 == 0)));
  }
  return v4;
}

void specialized closure #1 in runTestingApp<A, B>(rootView:comparisonView:didLaunch:)(void *a1, void *a2, uint64_t a3, uint64_t a4, void (*a5)(id, uint64_t, id, uint64_t), uint64_t a6)
{
  uint64_t v33 = a6;
  uint64_t v34 = a5;
  uint64_t v32 = a4;
  type metadata accessor for TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>(0, &lazy cache variable for type metadata for TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>, &lazy cache variable for type metadata for <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0);
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v11 = (char *)&v31 - v10;
  type metadata accessor for TestIDView<<<opaque return type of View.truePreference<A>(_:)>>.0, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>();
  MEMORY[0x1F4188790](v12 - 8);
  uint64_t v14 = (char *)&v31 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  static CoreTesting.isRunning.setter();
  outlined init with copy of TestIDView<<<opaque return type of View.truePreference<A>(_:)>>.0, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>(a3, (uint64_t)v14);
  type metadata accessor for UIHostingController<TestIDView<<<opaque return type of View.truePreference<A>(_:)>>.0, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>>(0, &lazy cache variable for type metadata for UIHostingController<TestIDView<<<opaque return type of View.truePreference<A>(_:)>>.0, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UIHostingController);
  id v16 = objc_allocWithZone(v15);
  BOOL v17 = (char *)specialized UIHostingController.init(rootView:)((uint64_t)v14);
  id v18 = *(id *)&v17[direct field offset for UIHostingController.host];
  objc_msgSend(a1, sel_setRootViewController_, v17);
  objc_msgSend(a1, sel_makeKeyAndVisible);
  uint64_t v19 = lazy protocol witness table accessor for type TestIDView<<<opaque return type of View.truePreference<A>(_:)>>.0, <<opaque return type of static _TestApp.rootViewIdentifier>>.0> and conformance TestIDView<A, B>(&lazy protocol witness table cache variable for type _UIHostingView<TestIDView<<<opaque return type of View.truePreference<A>(_:)>>.0, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>> and conformance _UIHostingView<A>, type metadata accessor for _UIHostingView<TestIDView<<<opaque return type of View.truePreference<A>(_:)>>.0, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>>);
  uint64_t v20 = (void *)static TestingAppDelegate.testHost;
  static TestingAppDelegate.testHost = (uint64_t)v18;
  qword_1E90FC868 = v19;
  id v21 = v18;

  outlined init with copy of TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>(v32, (uint64_t)v11, &lazy cache variable for type metadata for TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>, &lazy cache variable for type metadata for <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0);
  type metadata accessor for UIHostingController<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>>(0, (unint64_t *)&lazy cache variable for type metadata for UIHostingController<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UIHostingController);
  id v23 = objc_allocWithZone(v22);
  uint64_t v24 = (char *)specialized UIHostingController.init(rootView:)((uint64_t)v11);
  id v25 = *(id *)&v24[direct field offset for UIHostingController.host];
  objc_msgSend(a2, sel_setRootViewController_, v24);
  objc_msgSend(a2, sel_setHidden_, 0);
  objc_msgSend(a2, sel_setHidden_, 1);
  uint64_t v26 = lazy protocol witness table accessor for type _UIHostingView<EmptyView> and conformance _UIHostingView<A>(&lazy protocol witness table cache variable for type _UIHostingView<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>> and conformance _UIHostingView<A>, (uint64_t)&lazy cache variable for type metadata for _UIHostingView<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>>, (void (*)(uint64_t, uint64_t, uint64_t (*)()))type metadata accessor for UIHostingController<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>>);
  uint64_t v27 = (void *)static TestingAppDelegate.comparisonHost;
  static TestingAppDelegate.comparisonHost = (uint64_t)v25;
  *(void *)algn_1E90FC878 = v26;
  id v28 = v25;

  id v29 = v21;
  id v30 = v28;
  v34(v29, v19, v30, v26);
}

void specialized closure #1 in runTestingApp<A, B>(rootView:comparisonView:didLaunch:)(void *a1, void *a2, uint64_t a3, void (*a4)(id, uint64_t, id, uint64_t))
{
  uint64_t v27 = a4;
  type metadata accessor for TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>(0, (unint64_t *)&lazy cache variable for type metadata for TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>, (unint64_t *)&lazy cache variable for type metadata for <<opaque return type of static _TestApp.rootViewIdentifier>>.0);
  MEMORY[0x1F4188790](v7 - 8);
  uint64_t v9 = (char *)&v26 - v8;
  static CoreTesting.isRunning.setter();
  outlined init with copy of TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>(a3, (uint64_t)v9, (unint64_t *)&lazy cache variable for type metadata for TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>, (unint64_t *)&lazy cache variable for type metadata for <<opaque return type of static _TestApp.rootViewIdentifier>>.0);
  type metadata accessor for UIHostingController<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>>(0, (unint64_t *)&lazy cache variable for type metadata for UIHostingController<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UIHostingController);
  id v11 = objc_allocWithZone(v10);
  uint64_t v12 = (char *)specialized UIHostingController.init(rootView:)((uint64_t)v9);
  id v13 = *(id *)&v12[direct field offset for UIHostingController.host];
  objc_msgSend(a1, sel_setRootViewController_, v12);
  objc_msgSend(a1, sel_makeKeyAndVisible);
  uint64_t v14 = lazy protocol witness table accessor for type _UIHostingView<EmptyView> and conformance _UIHostingView<A>(&lazy protocol witness table cache variable for type _UIHostingView<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>> and conformance _UIHostingView<A>, (uint64_t)&lazy cache variable for type metadata for _UIHostingView<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>>, (void (*)(uint64_t, uint64_t, uint64_t (*)()))type metadata accessor for UIHostingController<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>>);
  Class v15 = (void *)static TestingAppDelegate.testHost;
  static TestingAppDelegate.testHost = (uint64_t)v13;
  qword_1E90FC868 = v14;
  id v16 = v13;

  type metadata accessor for UIHostingController<EmptyView>(0, &lazy cache variable for type metadata for UIHostingController<EmptyView>, (uint64_t (*)(void, void, void))type metadata accessor for UIHostingController);
  id v18 = objc_allocWithZone(v17);
  uint64_t v19 = (char *)specialized UIHostingController.init(rootView:)();
  id v20 = *(id *)&v19[direct field offset for UIHostingController.host];
  objc_msgSend(a2, sel_setRootViewController_, v19);
  objc_msgSend(a2, sel_setHidden_, 0);
  objc_msgSend(a2, sel_setHidden_, 1);
  uint64_t v21 = lazy protocol witness table accessor for type _UIHostingView<EmptyView> and conformance _UIHostingView<A>(&lazy protocol witness table cache variable for type _UIHostingView<EmptyView> and conformance _UIHostingView<A>, (uint64_t)&lazy cache variable for type metadata for _UIHostingView<EmptyView>, (void (*)(uint64_t, uint64_t, uint64_t (*)()))type metadata accessor for UIHostingController<EmptyView>);
  Class v22 = (void *)static TestingAppDelegate.comparisonHost;
  static TestingAppDelegate.comparisonHost = (uint64_t)v20;
  *(void *)algn_1E90FC878 = v21;
  id v23 = v20;

  id v24 = v16;
  id v25 = v23;
  v27(v24, v14, v25, v21);
}

unint64_t specialized Array._checkSubscript(_:wasNativeTypeChecked:)(unint64_t result, char a2, uint64_t a3)
{
  if (a2)
  {
    if ((result & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else if (*(void *)(a3 + 16) > result)
    {
      return result;
    }
    __break(1u);
  }
  return result;
}

{
  if (a2)
  {
    if ((result & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else if (*(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10) > result)
    {
      return result;
    }
    __break(1u);
  }
  return result;
}

uint64_t specialized Array._getCount()(unint64_t a1)
{
  if (!(a1 >> 62)) {
    return *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  swift_bridgeObjectRetain();
  uint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  return v2;
}

uint64_t partial apply for specialized closure #1 in BidirectionalCollection<>.lastIndex(of:)(void *a1)
{
  uint64_t v2 = *(void **)(v1 + 16);
  if (*a1 == *v2 && a1[1] == v2[1]) {
    return 1;
  }
  else {
    return _stringCompareWithSmolCheck(_:_:expecting:)() & 1;
  }
}

uint64_t outlined init with copy of TestIDView<<<opaque return type of View.truePreference<A>(_:)>>.0, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>(uint64_t a1, uint64_t a2)
{
  type metadata accessor for TestIDView<<<opaque return type of View.truePreference<A>(_:)>>.0, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1876DF574()
{
  type metadata accessor for TestIDView<<<opaque return type of View.truePreference<A>(_:)>>.0, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>();
  uint64_t v2 = v1 - 8;
  uint64_t v3 = *(unsigned __int8 *)(*(void *)(v1 - 8) + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v4 + *(void *)(*(void *)(v1 - 8) + 64);
  type metadata accessor for TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>(0, &lazy cache variable for type metadata for TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>, &lazy cache variable for type metadata for <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0);
  uint64_t v7 = v6 - 8;
  uint64_t v8 = *(unsigned __int8 *)(*(void *)(v6 - 8) + 80);
  uint64_t v9 = (v5 + v8) & ~v8;
  uint64_t v10 = v0 + v4;
  type metadata accessor for <<opaque return type of View.truePreference<A>(_:)>>.0();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v11 - 8) + 8))(v10, v11);
  uint64_t v12 = v10 + *(int *)(v2 + 60);
  type metadata accessor for <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0(0, (unint64_t *)&lazy cache variable for type metadata for <<opaque return type of static _TestApp.rootViewIdentifier>>.0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v13 - 8) + 8))(v12, v13);
  swift_release();
  swift_release();
  uint64_t v14 = v0 + v9 + *(int *)(v7 + 60);
  type metadata accessor for <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0(0, &lazy cache variable for type metadata for <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v15 - 8) + 8))(v14, v15);
  swift_release();

  return swift_deallocObject();
}

uint64_t outlined init with take of TestIDView<<<opaque return type of View.truePreference<A>(_:)>>.0, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>(uint64_t a1, uint64_t a2)
{
  type metadata accessor for TestIDView<<<opaque return type of View.truePreference<A>(_:)>>.0, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with take of TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>(uint64_t a1, uint64_t a2)
{
  type metadata accessor for TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>(0, &lazy cache variable for type metadata for TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>, &lazy cache variable for type metadata for <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void partial apply for specialized closure #1 in runTestingApp<A, B>(rootView:comparisonView:didLaunch:)(void *a1, void *a2)
{
  type metadata accessor for TestIDView<<<opaque return type of View.truePreference<A>(_:)>>.0, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>();
  unint64_t v6 = (*(unsigned __int8 *)(*(void *)(v5 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v5 - 8) + 80);
  unint64_t v7 = v6 + *(void *)(*(void *)(v5 - 8) + 64);
  type metadata accessor for TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>(0, &lazy cache variable for type metadata for TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>, &lazy cache variable for type metadata for <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0);
  uint64_t v9 = *(void *)(v8 - 8);
  unint64_t v10 = (v7 + *(unsigned __int8 *)(v9 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  uint64_t v11 = v2 + v10;
  uint64_t v12 = v2 + ((*(void *)(v9 + 64) + v10 + 7) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v13 = *(void (**)(id, uint64_t, id, uint64_t))v12;
  uint64_t v14 = *(void *)(v12 + 8);

  specialized closure #1 in runTestingApp<A, B>(rootView:comparisonView:didLaunch:)(a1, a2, v2 + v6, v11, v13, v14);
}

{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  void (*v8)(id, uint64_t, id, uint64_t);
  uint64_t vars8;

  type metadata accessor for TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>();
  unint64_t v6 = *(void *)(v5 - 8);
  unint64_t v7 = (*(unsigned __int8 *)(v6 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  uint64_t v8 = *(void (**)(id, uint64_t, id, uint64_t))(v2 + ((*(void *)(v6 + 64) + v7 + 7) & 0xFFFFFFFFFFFFFFF8));

  specialized closure #1 in runTestingApp<A, B>(rootView:comparisonView:didLaunch:)(a1, a2, v2 + v7, v8);
}

void type metadata accessor for TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>(uint64_t a1, unint64_t *a2, unint64_t *a3)
{
  if (!*a2)
  {
    type metadata accessor for <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0(255, a3);
    lazy protocol witness table accessor for type _TestApp.RootView and conformance _TestApp.RootView();
    swift_getOpaqueTypeConformance2();
    unint64_t v4 = type metadata accessor for TestIDView();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t outlined init with copy of TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>(uint64_t a1, uint64_t a2, unint64_t *a3, unint64_t *a4)
{
  type metadata accessor for TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>(0, a3, a4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a2, a1, v6);
  return a2;
}

void type metadata accessor for UIHostingController<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    type metadata accessor for TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>(255, (unint64_t *)&lazy cache variable for type metadata for TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>, (unint64_t *)&lazy cache variable for type metadata for <<opaque return type of static _TestApp.rootViewIdentifier>>.0);
    uint64_t v7 = v6;
    uint64_t v8 = lazy protocol witness table accessor for type TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0> and conformance TestIDView<A, B>(&lazy protocol witness table cache variable for type TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0> and conformance TestIDView<A, B>, (unint64_t *)&lazy cache variable for type metadata for TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>, (unint64_t *)&lazy cache variable for type metadata for <<opaque return type of static _TestApp.rootViewIdentifier>>.0);
    unint64_t v9 = a3(a1, v7, v8);
    if (!v10) {
      atomic_store(v9, a2);
    }
  }
}

void type metadata accessor for UIHostingController<EmptyView>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void, void, void))
{
  if (!*a2)
  {
    unint64_t v4 = a3(0, MEMORY[0x1E4F417F8], MEMORY[0x1E4F417F0]);
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

void type metadata accessor for _UIHostingView<TestIDView<<<opaque return type of View.truePreference<A>(_:)>>.0, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>>(uint64_t a1)
{
  type metadata accessor for UIHostingController<TestIDView<<<opaque return type of View.truePreference<A>(_:)>>.0, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>>(a1, &lazy cache variable for type metadata for _UIHostingView<TestIDView<<<opaque return type of View.truePreference<A>(_:)>>.0, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _UIHostingView);
}

void type metadata accessor for UIHostingController<TestIDView<<<opaque return type of View.truePreference<A>(_:)>>.0, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    type metadata accessor for TestIDView<<<opaque return type of View.truePreference<A>(_:)>>.0, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>();
    uint64_t v7 = v6;
    uint64_t v8 = lazy protocol witness table accessor for type TestIDView<<<opaque return type of View.truePreference<A>(_:)>>.0, <<opaque return type of static _TestApp.rootViewIdentifier>>.0> and conformance TestIDView<A, B>(&lazy protocol witness table cache variable for type TestIDView<<<opaque return type of View.truePreference<A>(_:)>>.0, <<opaque return type of static _TestApp.rootViewIdentifier>>.0> and conformance TestIDView<A, B>, (void (*)(uint64_t))type metadata accessor for TestIDView<<<opaque return type of View.truePreference<A>(_:)>>.0, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>);
    unint64_t v9 = a3(a1, v7, v8);
    if (!v10) {
      atomic_store(v9, a2);
    }
  }
}

uint64_t lazy protocol witness table accessor for type TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0> and conformance TestIDView<A, B>(unint64_t *a1, unint64_t *a2, unint64_t *a3)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>(255, a2, a3);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type _UIHostingView<EmptyView> and conformance _UIHostingView<A>(unint64_t *a1, uint64_t a2, void (*a3)(uint64_t, uint64_t, uint64_t (*)()))
{
  uint64_t result = *a1;
  if (!result)
  {
    a3(255, a2, type metadata accessor for _UIHostingView);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void type metadata accessor for UIHostingController<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    type metadata accessor for TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>(255, &lazy cache variable for type metadata for TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>, &lazy cache variable for type metadata for <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0);
    uint64_t v7 = v6;
    uint64_t v8 = lazy protocol witness table accessor for type TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0> and conformance TestIDView<A, B>(&lazy protocol witness table cache variable for type TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0> and conformance TestIDView<A, B>, &lazy cache variable for type metadata for TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>, &lazy cache variable for type metadata for <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0);
    unint64_t v9 = a3(a1, v7, v8);
    if (!v10) {
      atomic_store(v9, a2);
    }
  }
}

uint64_t specialized Sequence<>.max()(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return 0;
  }
  double v2 = *(double *)(a1 + 32);
  uint64_t v3 = v1 - 1;
  if (v1 != 1)
  {
    unint64_t v4 = (double *)(a1 + 40);
    do
    {
      double v5 = *v4++;
      double v6 = v5;
      if (v2 < v5) {
        double v2 = v6;
      }
      --v3;
    }
    while (v3);
  }
  return *(void *)&v2;
}

uint64_t specialized Sequence<>.min()@<X0>(uint64_t result@<X0>, unsigned __int8 *a2@<X8>)
{
  uint64_t v2 = result + 64;
  char v3 = *(unsigned char *)(result + 32);
  uint64_t v4 = 1 << v3;
  uint64_t v5 = -1;
  if (1 << v3 < 64) {
    uint64_t v5 = ~(-1 << (1 << v3));
  }
  unint64_t v6 = v5 & *(void *)(result + 64);
  if (v6)
  {
    uint64_t v7 = 0;
    unint64_t v8 = __clz(__rbit64(v6));
    unint64_t v9 = (v6 - 1) & v6;
    int64_t v10 = (unint64_t)(v4 + 63) >> 6;
  }
  else
  {
    LODWORD(v7) = v3 & 0x3F;
    if (v7 <= 6) {
      goto LABEL_48;
    }
    int64_t v10 = (unint64_t)(v4 + 63) >> 6;
    unint64_t v19 = *(void *)(result + 72);
    if (v19)
    {
      uint64_t v7 = 1;
    }
    else
    {
      if (v7 < 8) {
        goto LABEL_48;
      }
      unint64_t v19 = *(void *)(result + 80);
      if (v19)
      {
        uint64_t v7 = 2;
      }
      else
      {
        unint64_t v19 = *(void *)(result + 88);
        if (v19)
        {
          uint64_t v7 = 3;
        }
        else
        {
LABEL_36:
          if (v7 < 9) {
            goto LABEL_48;
          }
          unint64_t v19 = *(void *)(result + 96);
          if (v19)
          {
            uint64_t v7 = 4;
          }
          else
          {
            unint64_t v19 = *(void *)(result + 104);
            if (!v19) {
              goto LABEL_42;
            }
            uint64_t v7 = 5;
          }
        }
      }
    }
LABEL_29:
    unint64_t v9 = (v19 - 1) & v19;
    unint64_t v8 = __clz(__rbit64(v19)) + (v7 << 6);
  }
  uint64_t v11 = *(void *)(result + 56);
  unsigned __int8 v12 = *(unsigned char *)(v11 + v8);
  while (v9)
  {
    unint64_t v13 = __clz(__rbit64(v9));
    v9 &= v9 - 1;
    unint64_t v14 = v13 | (v7 << 6);
LABEL_7:
    unsigned int v15 = *(unsigned __int8 *)(v11 + v14);
    if (v15 < v12) {
      unsigned __int8 v12 = v15;
    }
  }
  int64_t v16 = v7 + 1;
  if (__OFADD__(v7, 1))
  {
    __break(1u);
    goto LABEL_36;
  }
  if (v16 >= v10) {
    goto LABEL_49;
  }
  unint64_t v17 = *(void *)(v2 + 8 * v16);
  ++v7;
  if (v17) {
    goto LABEL_25;
  }
  uint64_t v7 = v16 + 1;
  if (v16 + 1 >= v10) {
    goto LABEL_49;
  }
  unint64_t v17 = *(void *)(v2 + 8 * v7);
  if (v17) {
    goto LABEL_25;
  }
  uint64_t v7 = v16 + 2;
  if (v16 + 2 >= v10) {
    goto LABEL_49;
  }
  unint64_t v17 = *(void *)(v2 + 8 * v7);
  if (v17) {
    goto LABEL_25;
  }
  uint64_t v7 = v16 + 3;
  if (v16 + 3 >= v10) {
    goto LABEL_49;
  }
  unint64_t v17 = *(void *)(v2 + 8 * v7);
  if (v17)
  {
LABEL_25:
    unint64_t v9 = (v17 - 1) & v17;
    unint64_t v14 = __clz(__rbit64(v17)) + (v7 << 6);
    goto LABEL_7;
  }
  int64_t v18 = v16 + 4;
  if (v18 >= v10) {
    goto LABEL_49;
  }
  unint64_t v17 = *(void *)(v2 + 8 * v18);
  if (v17)
  {
    uint64_t v7 = v18;
    goto LABEL_25;
  }
  while (1)
  {
    uint64_t v7 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    if (v7 >= v10) {
      goto LABEL_49;
    }
    unint64_t v17 = *(void *)(v2 + 8 * v7);
    ++v18;
    if (v17) {
      goto LABEL_25;
    }
  }
  __break(1u);
LABEL_42:
  uint64_t v20 = 0;
  uint64_t v21 = 6;
  if (v10 > 6) {
    uint64_t v21 = v10;
  }
  uint64_t v22 = v21 - 6;
  while (v22 != v20)
  {
    unint64_t v19 = *(void *)(result + 112 + 8 * v20++);
    if (v19)
    {
      uint64_t v7 = v20 + 5;
      goto LABEL_29;
    }
  }
LABEL_48:
  unsigned __int8 v12 = 3;
LABEL_49:
  *a2 = v12;
  return result;
}

uint64_t PlatformSceneCache.removeHost(_:id:)(uint64_t a1, Swift::UInt a2, uint64_t a3, char a4)
{
  unint64_t v9 = (uint64_t *)(v4 + 16);
  swift_beginAccess();
  uint64_t v10 = *(void *)(v4 + 16);
  if (!*(void *)(v10 + 16)) {
    return swift_endAccess();
  }
  char v11 = a4 & 1;
  outlined copy of SceneID(a2, a3, v11);
  unint64_t v12 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3, v11);
  if ((v13 & 1) == 0)
  {
    outlined consume of SceneID(a2, a3, v11);
    return swift_endAccess();
  }
  uint64_t v14 = *(void *)(*(void *)(v10 + 56) + 8 * v12);
  uint64_t v24 = v14;
  swift_endAccess();
  swift_bridgeObjectRetain();
  outlined consume of SceneID(a2, a3, v11);
  swift_unknownObjectWeakInit();
  swift_unknownObjectWeakAssign();
  uint64_t v23 = a1;
  outlined init with take of HashableWeakBox<UIViewController>((uint64_t)v22, (uint64_t)v21);
  if (!*(void *)(v14 + 16)) {
    goto LABEL_9;
  }
  swift_bridgeObjectRetain();
  specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v21);
  char v16 = v15;
  swift_bridgeObjectRelease();
  if ((v16 & 1) == 0) {
    goto LABEL_9;
  }
  specialized Dictionary._Variant.removeValue(forKey:)((uint64_t)v21, v22);
  uint64_t v17 = v24;
  if (!*(void *)(v24 + 16))
  {
    swift_bridgeObjectRelease();
    swift_beginAccess();
    specialized Dictionary._Variant.removeValue(forKey:)(a2, a3, v11);
    swift_endAccess();
LABEL_9:
    swift_bridgeObjectRelease();
    return outlined destroy of HashableWeakBox<UIViewController>((uint64_t)v21);
  }
  swift_beginAccess();
  outlined copy of SceneID(a2, a3, v11);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v20 = *v9;
  *unint64_t v9 = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v17, a2, a3, v11, isUniquelyReferenced_nonNull_native);
  *unint64_t v9 = v20;
  swift_bridgeObjectRelease();
  outlined consume of SceneID(a2, a3, v11);
  swift_endAccess();
  return outlined destroy of HashableWeakBox<UIViewController>((uint64_t)v21);
}

uint64_t PlatformSceneCache.__deallocating_deinit()
{
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

ValueMetadata *type metadata accessor for PlatformSceneCache.Info()
{
  return &type metadata for PlatformSceneCache.Info;
}

uint64_t View.avKitOnCaptureButtonPress(isEnabled:perform:)(char a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = swift_allocObject();
  *(unsigned char *)(v6 + 16) = a1;
  *(void *)(v6 + 24) = a2;
  *(void *)(v6 + 32) = a3;
  swift_retain();
  View.transformPreference<A>(_:_:)();

  return swift_release();
}

uint64_t closure #1 in View.avKitOnCaptureButtonPress(isEnabled:perform:)(uint64_t (**a1)(), char a2, uint64_t (*a3)(uint64_t a1, uint64_t a2), uint64_t a4)
{
  unint64_t v8 = *a1;
  if (*a1)
  {
    unint64_t v9 = a1[1];
    uint64_t v10 = swift_allocObject();
    *(void *)(v10 + 16) = v8;
    *(void *)(v10 + 24) = v9;
    char v11 = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed AVKitPressableCaptureButton, @in_guaranteed AVKitPressableCaptureButton.Phase) -> (@out ());
    if ((a2 & 1) == 0)
    {
      a3 = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed AVKitPressableCaptureButton, @in_guaranteed AVKitPressableCaptureButton.Phase) -> (@out ());
      a4 = v10;
LABEL_6:
      uint64_t result = swift_allocObject();
      *(void *)(result + 16) = a3;
      *(void *)(result + 24) = a4;
      unint64_t v12 = partial apply for thunk for @callee_guaranteed (@in_guaranteed _ViewList_ID.Canonical, @inout Bool) -> ();
      goto LABEL_7;
    }
LABEL_5:
    outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?((uint64_t)v11);
    swift_retain();
    goto LABEL_6;
  }
  char v11 = 0;
  unint64_t v12 = 0;
  uint64_t result = 0;
  if (a2) {
    goto LABEL_5;
  }
LABEL_7:
  *a1 = v12;
  a1[1] = (uint64_t (*)())result;
  return result;
}

uint64_t sub_1876E0484()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in View.avKitOnCaptureButtonPress(isEnabled:perform:)(uint64_t (**a1)())
{
  return closure #1 in View.avKitOnCaptureButtonPress(isEnabled:perform:)(a1, *(unsigned char *)(v1 + 16), *(uint64_t (**)(uint64_t, uint64_t))(v1 + 24), *(void *)(v1 + 32));
}

void static AVKitPressableCaptureButton.primary.getter(unsigned char *a1@<X8>)
{
  *a1 = 0;
}

void static AVKitPressableCaptureButton.secondary.getter(unsigned char *a1@<X8>)
{
  *a1 = 1;
}

void AVKitPressableCaptureButton.Phase.hash(into:)()
{
  Hasher._combine(_:)(*v0);
}

BOOL static AVKitPressableCaptureButton.Phase.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

Swift::Int AVKitPressableCaptureButton.Phase.hashValue.getter()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

BOOL static AVKitPressableCaptureButton.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

void AVKitPressableCaptureButton.hash(into:)()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int AVKitPressableCaptureButton.hashValue.getter()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

unint64_t lazy protocol witness table accessor for type AVKitPressableCaptureButton.Phase and conformance AVKitPressableCaptureButton.Phase()
{
  unint64_t result = lazy protocol witness table cache variable for type AVKitPressableCaptureButton.Phase and conformance AVKitPressableCaptureButton.Phase;
  if (!lazy protocol witness table cache variable for type AVKitPressableCaptureButton.Phase and conformance AVKitPressableCaptureButton.Phase)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AVKitPressableCaptureButton.Phase and conformance AVKitPressableCaptureButton.Phase);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AVKitPressableCaptureButton and conformance AVKitPressableCaptureButton()
{
  unint64_t result = lazy protocol witness table cache variable for type AVKitPressableCaptureButton and conformance AVKitPressableCaptureButton;
  if (!lazy protocol witness table cache variable for type AVKitPressableCaptureButton and conformance AVKitPressableCaptureButton)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AVKitPressableCaptureButton and conformance AVKitPressableCaptureButton);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for AVKitPressableCaptureButton.Phase(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *unint64_t result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1876E0774);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 4;
        break;
    }
  }
  return result;
}

uint64_t sub_1876E079C()
{
  return swift_getWitnessTable();
}

void type metadata accessor for _PreferenceTransformModifier<AVKitCaptureButtonPreference>()
{
  if (!lazy cache variable for type metadata for _PreferenceTransformModifier<AVKitCaptureButtonPreference>)
  {
    unint64_t v0 = type metadata accessor for _PreferenceTransformModifier();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _PreferenceTransformModifier<AVKitCaptureButtonPreference>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type _PreferenceTransformModifier<AVKitCaptureButtonPreference> and conformance _PreferenceTransformModifier<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type _PreferenceTransformModifier<AVKitCaptureButtonPreference> and conformance _PreferenceTransformModifier<A>;
  if (!lazy protocol witness table cache variable for type _PreferenceTransformModifier<AVKitCaptureButtonPreference> and conformance _PreferenceTransformModifier<A>)
  {
    type metadata accessor for _PreferenceTransformModifier<AVKitCaptureButtonPreference>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _PreferenceTransformModifier<AVKitCaptureButtonPreference> and conformance _PreferenceTransformModifier<A>);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for AVKitPressableCaptureButton(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1876E098CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AVKitPressableCaptureButton.Guts()
{
  return &type metadata for AVKitPressableCaptureButton.Guts;
}

ValueMetadata *type metadata accessor for AVKitCaptureButtonPreference()
{
  return &type metadata for AVKitCaptureButtonPreference;
}

unint64_t lazy protocol witness table accessor for type AVKitPressableCaptureButton.Guts and conformance AVKitPressableCaptureButton.Guts()
{
  unint64_t result = lazy protocol witness table cache variable for type AVKitPressableCaptureButton.Guts and conformance AVKitPressableCaptureButton.Guts;
  if (!lazy protocol witness table cache variable for type AVKitPressableCaptureButton.Guts and conformance AVKitPressableCaptureButton.Guts)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AVKitPressableCaptureButton.Guts and conformance AVKitPressableCaptureButton.Guts);
  }
  return result;
}

void *protocol witness for static PreferenceKey.reduce(value:nextValue:) in conformance AVKitCaptureButtonPreference(void *result, void *(*a2)(void *__return_ptr))
{
  uint64_t v2 = result;
  uint64_t v3 = *result;
  if (*result)
  {
    uint64_t v4 = result[1];
  }
  else
  {
    unint64_t result = a2(v5);
    uint64_t v3 = v5[0];
    uint64_t v4 = v5[1];
  }
  *uint64_t v2 = v3;
  v2[1] = v4;
  return result;
}

uint64_t sub_1876E0A7C()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed AVKitPressableCaptureButton, @in_guaranteed AVKitPressableCaptureButton.Phase) -> (@out ())(uint64_t a1, uint64_t a2)
{
  return thunk for @escaping @callee_guaranteed (@in_guaranteed AVKitPressableCaptureButton, @in_guaranteed AVKitPressableCaptureButton.Phase) -> (@out ())(a1, a2, *(uint64_t (**)(void))(v2 + 16));
}

uint64_t AttributedSubstring.transformingEquivalentAttributes(from:to:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for AttributedSubstring();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  unsigned int v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for AttributedString();
  uint64_t v8 = *(void *)(v7 - 8);
  double v9 = MEMORY[0x1F4188790](v7);
  char v11 = (char *)&v13 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v4 + 16))(v6, v1, v3, v9);
  AttributedString.init(_:)();
  AttributedString.transformingUIKitAttributedForSwiftUI()(a1);
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v11, v7);
}

uint64_t sub_1876E0C3C@<X0>(uint64_t *a1@<X8>)
{
  AttributeScopes.uiKit.getter();
  uint64_t result = type metadata accessor for AttributeScopes.UIKitAttributes();
  *a1 = result;
  return result;
}

void sub_1876E0C6C()
{
}

void sub_1876E0C88()
{
}

void sub_1876E0CA4()
{
}

void sub_1876E0CC0()
{
}

void sub_1876E0CDC()
{
}

void sub_1876E0CF8()
{
}

void sub_1876E0D14()
{
}

void sub_1876E0D30()
{
}

void sub_1876E0D4C()
{
}

uint64_t key path index equality operator for (KeyPath<AttributeScopes.SwiftUIAttributes, AttributeScopes.SwiftUIAttributes.EmojiTextAttachmentAttribute>)()
{
  return dispatch thunk of static Equatable.== infix(_:_:)() & 1;
}

void sub_1876E0DC0()
{
}

unint64_t lazy protocol witness table accessor for type AttributeScopes.SwiftUIAttributes.AdaptiveImageGlyphAttribute and conformance AttributeScopes.SwiftUIAttributes.AdaptiveImageGlyphAttribute()
{
  unint64_t result = lazy protocol witness table cache variable for type AttributeScopes.SwiftUIAttributes.AdaptiveImageGlyphAttribute and conformance AttributeScopes.SwiftUIAttributes.AdaptiveImageGlyphAttribute;
  if (!lazy protocol witness table cache variable for type AttributeScopes.SwiftUIAttributes.AdaptiveImageGlyphAttribute and conformance AttributeScopes.SwiftUIAttributes.AdaptiveImageGlyphAttribute)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.SwiftUIAttributes.AdaptiveImageGlyphAttribute and conformance AttributeScopes.SwiftUIAttributes.AdaptiveImageGlyphAttribute);
  }
  return result;
}

uint64_t sub_1876E0E40()
{
  return 8;
}

uint64_t sub_1876E0E4C()
{
  return swift_release();
}

uint64_t sub_1876E0E54(void *a1, void *a2)
{
  *a2 = *a1;
  return swift_retain();
}

void *sub_1876E0E68(void *result, void *a2)
{
  *a2 = *result;
  return result;
}

unint64_t lazy protocol witness table accessor for type AttributeScopes.SwiftUIAttributes.EmojiTextAttachmentAttribute and conformance AttributeScopes.SwiftUIAttributes.EmojiTextAttachmentAttribute()
{
  unint64_t result = lazy protocol witness table cache variable for type AttributeScopes.SwiftUIAttributes.EmojiTextAttachmentAttribute and conformance AttributeScopes.SwiftUIAttributes.EmojiTextAttachmentAttribute;
  if (!lazy protocol witness table cache variable for type AttributeScopes.SwiftUIAttributes.EmojiTextAttachmentAttribute and conformance AttributeScopes.SwiftUIAttributes.EmojiTextAttachmentAttribute)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.SwiftUIAttributes.EmojiTextAttachmentAttribute and conformance AttributeScopes.SwiftUIAttributes.EmojiTextAttachmentAttribute);
  }
  return result;
}

void sub_1876E0ED0()
{
}

uint64_t sub_1876E0EF8()
{
  return 8;
}

uint64_t sub_1876E0F08()
{
  return dispatch thunk of Hashable.hashValue.getter();
}

unint64_t lazy protocol witness table accessor for type AttributeScopes.SwiftUIAttributes.UnderlineStyleAttribute and conformance AttributeScopes.SwiftUIAttributes.UnderlineStyleAttribute()
{
  unint64_t result = lazy protocol witness table cache variable for type AttributeScopes.SwiftUIAttributes.UnderlineStyleAttribute and conformance AttributeScopes.SwiftUIAttributes.UnderlineStyleAttribute;
  if (!lazy protocol witness table cache variable for type AttributeScopes.SwiftUIAttributes.UnderlineStyleAttribute and conformance AttributeScopes.SwiftUIAttributes.UnderlineStyleAttribute)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.SwiftUIAttributes.UnderlineStyleAttribute and conformance AttributeScopes.SwiftUIAttributes.UnderlineStyleAttribute);
  }
  return result;
}

void sub_1876E0FA4()
{
}

unint64_t lazy protocol witness table accessor for type AttributeScopes.UIKitAttributes.UnderlineColorAttribute and conformance AttributeScopes.UIKitAttributes.UnderlineColorAttribute()
{
  unint64_t result = lazy protocol witness table cache variable for type AttributeScopes.UIKitAttributes.UnderlineColorAttribute and conformance AttributeScopes.UIKitAttributes.UnderlineColorAttribute;
  if (!lazy protocol witness table cache variable for type AttributeScopes.UIKitAttributes.UnderlineColorAttribute and conformance AttributeScopes.UIKitAttributes.UnderlineColorAttribute)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.UIKitAttributes.UnderlineColorAttribute and conformance AttributeScopes.UIKitAttributes.UnderlineColorAttribute);
  }
  return result;
}

uint64_t sub_1876E101C()
{
  return 8;
}

unint64_t lazy protocol witness table accessor for type AttributeScopes.SwiftUIAttributes.StrikethroughStyleAttribute and conformance AttributeScopes.SwiftUIAttributes.StrikethroughStyleAttribute()
{
  unint64_t result = lazy protocol witness table cache variable for type AttributeScopes.SwiftUIAttributes.StrikethroughStyleAttribute and conformance AttributeScopes.SwiftUIAttributes.StrikethroughStyleAttribute;
  if (!lazy protocol witness table cache variable for type AttributeScopes.SwiftUIAttributes.StrikethroughStyleAttribute and conformance AttributeScopes.SwiftUIAttributes.StrikethroughStyleAttribute)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.SwiftUIAttributes.StrikethroughStyleAttribute and conformance AttributeScopes.SwiftUIAttributes.StrikethroughStyleAttribute);
  }
  return result;
}

void sub_1876E1088()
{
}

unint64_t lazy protocol witness table accessor for type AttributeScopes.UIKitAttributes.StrikethroughColorAttribute and conformance AttributeScopes.UIKitAttributes.StrikethroughColorAttribute()
{
  unint64_t result = lazy protocol witness table cache variable for type AttributeScopes.UIKitAttributes.StrikethroughColorAttribute and conformance AttributeScopes.UIKitAttributes.StrikethroughColorAttribute;
  if (!lazy protocol witness table cache variable for type AttributeScopes.UIKitAttributes.StrikethroughColorAttribute and conformance AttributeScopes.UIKitAttributes.StrikethroughColorAttribute)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.UIKitAttributes.StrikethroughColorAttribute and conformance AttributeScopes.UIKitAttributes.StrikethroughColorAttribute);
  }
  return result;
}

uint64_t sub_1876E1100()
{
  return 8;
}

uint64_t sub_1876E1120()
{
  return 8;
}

unint64_t lazy protocol witness table accessor for type AttributeScopes.SwiftUIAttributes.TrackingAttribute and conformance AttributeScopes.SwiftUIAttributes.TrackingAttribute()
{
  unint64_t result = lazy protocol witness table cache variable for type AttributeScopes.SwiftUIAttributes.TrackingAttribute and conformance AttributeScopes.SwiftUIAttributes.TrackingAttribute;
  if (!lazy protocol witness table cache variable for type AttributeScopes.SwiftUIAttributes.TrackingAttribute and conformance AttributeScopes.SwiftUIAttributes.TrackingAttribute)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.SwiftUIAttributes.TrackingAttribute and conformance AttributeScopes.SwiftUIAttributes.TrackingAttribute);
  }
  return result;
}

uint64_t sub_1876E1194()
{
  return 8;
}

unint64_t lazy protocol witness table accessor for type AttributeScopes.SwiftUIAttributes.KerningAttribute and conformance AttributeScopes.SwiftUIAttributes.KerningAttribute()
{
  unint64_t result = lazy protocol witness table cache variable for type AttributeScopes.SwiftUIAttributes.KerningAttribute and conformance AttributeScopes.SwiftUIAttributes.KerningAttribute;
  if (!lazy protocol witness table cache variable for type AttributeScopes.SwiftUIAttributes.KerningAttribute and conformance AttributeScopes.SwiftUIAttributes.KerningAttribute)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.SwiftUIAttributes.KerningAttribute and conformance AttributeScopes.SwiftUIAttributes.KerningAttribute);
  }
  return result;
}

uint64_t sub_1876E1208()
{
  return 8;
}

uint64_t sub_1876E1228()
{
  return 8;
}

uint64_t sub_1876E1248()
{
  return 8;
}

unint64_t lazy protocol witness table accessor for type AttributeScopes.SwiftUIAttributes.BackgroundColorAttribute and conformance AttributeScopes.SwiftUIAttributes.BackgroundColorAttribute()
{
  unint64_t result = lazy protocol witness table cache variable for type AttributeScopes.SwiftUIAttributes.BackgroundColorAttribute and conformance AttributeScopes.SwiftUIAttributes.BackgroundColorAttribute;
  if (!lazy protocol witness table cache variable for type AttributeScopes.SwiftUIAttributes.BackgroundColorAttribute and conformance AttributeScopes.SwiftUIAttributes.BackgroundColorAttribute)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.SwiftUIAttributes.BackgroundColorAttribute and conformance AttributeScopes.SwiftUIAttributes.BackgroundColorAttribute);
  }
  return result;
}

uint64_t sub_1876E12BC()
{
  return 8;
}

void type metadata accessor for KeyPath<AttributeScopes.SwiftUIAttributes, AttributeScopes.SwiftUIAttributes.EmojiTextAttachmentAttribute>()
{
  if (!lazy cache variable for type metadata for KeyPath<AttributeScopes.SwiftUIAttributes, AttributeScopes.SwiftUIAttributes.EmojiTextAttachmentAttribute>)
  {
    type metadata accessor for AttributeScopes.SwiftUIAttributes();
    unint64_t v0 = type metadata accessor for KeyPath();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for KeyPath<AttributeScopes.SwiftUIAttributes, AttributeScopes.SwiftUIAttributes.EmojiTextAttachmentAttribute>);
    }
  }
}

double static AccessibilityActionCategory.default.getter@<D0>(_OWORD *a1@<X8>)
{
  double result = 0.0;
  *a1 = 0u;
  a1[1] = 0u;
  return result;
}

void static AccessibilityActionCategory.edit.getter(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  a1[3] = 1;
}

uint64_t AccessibilityActionCategory.init(_:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  *a5 = result;
  a5[1] = a2;
  a5[2] = a3 & 1;
  a5[3] = a4;
  return result;
}

uint64_t AccessibilityActionCategory.init(_:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = Text.init(_:tableName:bundle:comment:)();
  *a1 = result;
  a1[1] = v3;
  a1[2] = v4 & 1;
  a1[3] = v5;
  return result;
}

uint64_t AccessibilityActionCategory.init<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6 = *(void *)(a2 - 8);
  double v7 = MEMORY[0x1F4188790](a1);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v6 + 16))((char *)&v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), a1, a2, v7);
  uint64_t v9 = Text.init<A>(_:)();
  uint64_t v11 = v10;
  uint64_t v13 = v12;
  uint64_t v15 = v14 & 1;
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(a1, a2);
  *a3 = v9;
  a3[1] = v11;
  a3[2] = v15;
  a3[3] = v13;
  return result;
}

BOOL static AccessibilityActionCategory.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  unint64_t v2 = a1[3];
  unint64_t v3 = a2[3];
  if (v2)
  {
    if (v2 == 1)
    {
      if (v3 != 1) {
        return 0;
      }
    }
    else
    {
      if (v3 < 2) {
        return 0;
      }
      uint64_t v4 = *a1;
      uint64_t v5 = a1[1];
      uint64_t v6 = a1[2];
      uint64_t v7 = *a2;
      uint64_t v8 = a2[1];
      uint64_t v9 = a2[2];
      outlined copy of AccessibilityActionCategory.Category(*a1, v5, v6, v2);
      outlined copy of AccessibilityActionCategory.Category(v7, v8, v9, v3);
      char v10 = static Text.== infix(_:_:)();
      outlined consume of AccessibilityActionCategory.Category(v7, v8, v9, v3);
      outlined consume of AccessibilityActionCategory.Category(v4, v5, v6, v2);
      if ((v10 & 1) == 0) {
        return 0;
      }
    }
    return 1;
  }
  return !v3;
}

uint64_t outlined copy of AccessibilityActionCategory.Category(uint64_t result, uint64_t a2, char a3, unint64_t a4)
{
  if (a4 >= 2)
  {
    outlined copy of Text.Storage(result, a2, a3 & 1);
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t outlined consume of AccessibilityActionCategory.Category(uint64_t result, uint64_t a2, char a3, unint64_t a4)
{
  if (a4 >= 2)
  {
    outlined consume of Text.Storage(result, a2, a3 & 1);
    return swift_bridgeObjectRelease();
  }
  return result;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance AccessibilityActionCategory(uint64_t *a1, uint64_t *a2)
{
  unint64_t v2 = a1[3];
  unint64_t v3 = a2[3];
  if (v2)
  {
    if (v2 == 1)
    {
      if (v3 != 1) {
        return 0;
      }
    }
    else
    {
      if (v3 < 2) {
        return 0;
      }
      uint64_t v4 = *a1;
      uint64_t v5 = a1[1];
      uint64_t v6 = a1[2];
      uint64_t v7 = *a2;
      uint64_t v8 = a2[1];
      uint64_t v9 = a2[2];
      outlined copy of AccessibilityActionCategory.Category(*a1, v5, v6, v2);
      outlined copy of AccessibilityActionCategory.Category(v7, v8, v9, v3);
      char v10 = static Text.== infix(_:_:)();
      outlined consume of AccessibilityActionCategory.Category(v7, v8, v9, v3);
      outlined consume of AccessibilityActionCategory.Category(v4, v5, v6, v2);
      if ((v10 & 1) == 0) {
        return 0;
      }
    }
    return 1;
  }
  return !v3;
}

uint64_t View.accessibilityActions<A>(category:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X4>, uint64_t a4@<X5>, uint64_t a5@<X6>, uint64_t a6@<X8>)
{
  uint64_t v22 = a5;
  uint64_t v20 = a2;
  uint64_t v21 = a4;
  uint64_t v8 = *(void *)(a3 - 8);
  double v9 = MEMORY[0x1F4188790](a1);
  uint64_t v11 = (char *)&v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = *v12;
  uint64_t v14 = v12[1];
  uint64_t v15 = v12[2];
  unint64_t v16 = v12[3];
  v17(v9);
  int64_t v18 = (void *)swift_allocObject();
  void v18[2] = v13;
  v18[3] = v14;
  v18[4] = v15;
  v18[5] = v16;
  outlined copy of AccessibilityActionCategory.Category(v13, v14, v15, v16);
  View.accessibilityAttachment<A>(content:_:)((uint64_t)v11, (uint64_t)partial apply for closure #1 in View.accessibilityActions<A>(category:_:), (uint64_t)v18, v20, a3, v21, v22, a6);
  swift_release();
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v11, a3);
}

uint64_t closure #1 in View.accessibilityActions<A>(category:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t result = AccessibilityAttachment.init()();
  uint64_t v12 = *(void *)a1;
  uint64_t v11 = *(void **)(a1 + 8);
  if (!*(unsigned char *)(a1 + 16))
  {
    id v15 = v11;
    swift_bridgeObjectRetain();
    goto LABEL_5;
  }
  if (*(unsigned char *)(a1 + 16) == 1)
  {
    uint64_t v13 = swift_bridgeObjectRetain();
    uint64_t v14 = specialized Sequence.compactMap<A>(_:)(v13);
    static AccessibilityAttachment.combine(_:)(v14, &v21);
    swift_bridgeObjectRelease();
    outlined consume of AccessibilityAttachment.Tree(v12, v11, 1);
    uint64_t v12 = v21;
    id v15 = v22;
    uint64_t v11 = v22;
LABEL_5:
    uint64_t v21 = v12;
    uint64_t v22 = v11;
    AccessibilityAttachment.mergedProperties.getter(&v20);

    swift_bridgeObjectRelease();
    uint64_t v16 = swift_bridgeObjectRetain();
    uint64_t v17 = specialized AccessibilityProperties.subscript.getter(v16);
    swift_bridgeObjectRelease_n();
    outlined copy of AccessibilityActionCategory.Category(a2, a3, a4, a5);
    uint64_t v18 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay7SwiftUI22AnyAccessibilityActionVG_AHs5NeverOTg503_s7d49UI4ViewPAAE20accessibilityActions8category_QrAA27gH77CategoryV_qd__yXEtAaBRd__lFyAA0G10AttachmentVAAE4TreeOzcfU_AA03AnygH0VAMXEfU_AF0ghQ0VTf1cn_nTf4ng_n(v17, a2, a3, a4, a5);
    outlined consume of AccessibilityActionCategory.Category(a2, a3, a4, a5);
    outlined consume of AccessibilityAttachment.Tree(*(void *)a1, *(void **)(a1 + 8), *(unsigned char *)(a1 + 16));
    swift_bridgeObjectRelease();
    uint64_t result = specialized AccessibilityProperties.subscript.setter(v18);
  }
  uint64_t v19 = v24;
  *(void *)a1 = v23;
  *(void *)(a1 + 8) = v19;
  *(unsigned char *)(a1 + 16) = 0;
  return result;
}

uint64_t sub_1876E1AC8()
{
  if (*(void *)(v0 + 40) >= 2uLL)
  {
    outlined consume of Text.Storage(*(void *)(v0 + 16), *(void *)(v0 + 24), *(unsigned char *)(v0 + 32));
    swift_bridgeObjectRelease();
  }

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in View.accessibilityActions<A>(category:_:)(uint64_t a1)
{
  return closure #1 in View.accessibilityActions<A>(category:_:)(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40));
}

uint64_t destroy for AccessibilityActionCategory(uint64_t result)
{
  if (*(void *)(result + 24) >= 2uLL)
  {
    outlined consume of Text.Storage(*(void *)result, *(void *)(result + 8), *(unsigned char *)(result + 16));
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t initializeWithCopy for AccessibilityActionCategory(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 24);
  if (v3 >= 2)
  {
    uint64_t v5 = *(void *)a2;
    uint64_t v6 = *(void *)(a2 + 8);
    char v7 = *(unsigned char *)(a2 + 16);
    outlined copy of Text.Storage(*(void *)a2, v6, v7);
    *(void *)a1 = v5;
    *(void *)(a1 + 8) = v6;
    *(unsigned char *)(a1 + 16) = v7;
    *(void *)(a1 + 24) = v3;
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v4 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v4;
  }
  return a1;
}

uint64_t assignWithCopy for AccessibilityActionCategory(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(void *)(a2 + 24);
  if (*(void *)(a1 + 24) >= 2uLL)
  {
    if (v4 >= 2)
    {
      uint64_t v10 = *(void *)a2;
      uint64_t v11 = *(void *)(a2 + 8);
      char v12 = *(unsigned char *)(a2 + 16);
      outlined copy of Text.Storage(*(void *)a2, v11, v12);
      uint64_t v13 = *(void *)a1;
      uint64_t v14 = *(void *)(a1 + 8);
      char v15 = *(unsigned char *)(a1 + 16);
      *(void *)a1 = v10;
      *(void *)(a1 + 8) = v11;
      *(unsigned char *)(a1 + 16) = v12;
      outlined consume of Text.Storage(v13, v14, v15);
      *(void *)(a1 + 24) = *(void *)(a2 + 24);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      outlined destroy of Text(a1);
      long long v6 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v6;
    }
  }
  else if (v4 >= 2)
  {
    uint64_t v7 = *(void *)a2;
    uint64_t v8 = *(void *)(a2 + 8);
    char v9 = *(unsigned char *)(a2 + 16);
    outlined copy of Text.Storage(*(void *)a2, v8, v9);
    *(void *)a1 = v7;
    *(void *)(a1 + 8) = v8;
    *(unsigned char *)(a1 + 16) = v9;
    *(void *)(a1 + 24) = *(void *)(a2 + 24);
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v5 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v5;
  }
  return a1;
}

uint64_t outlined destroy of Text(uint64_t a1)
{
  return a1;
}

uint64_t assignWithTake for AccessibilityActionCategory(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 24) >= 2uLL)
  {
    unint64_t v4 = *(void *)(a2 + 24);
    if (v4 >= 2)
    {
      char v6 = *(unsigned char *)(a2 + 16);
      uint64_t v7 = *(void *)a1;
      uint64_t v8 = *(void *)(a1 + 8);
      char v9 = *(unsigned char *)(a1 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(unsigned char *)(a1 + 16) = v6;
      outlined consume of Text.Storage(v7, v8, v9);
      *(void *)(a1 + 24) = v4;
      swift_bridgeObjectRelease();
      return a1;
    }
    outlined destroy of Text(a1);
  }
  long long v5 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v5;
  return a1;
}

uint64_t getEnumTagSinglePayload for AccessibilityActionCategory(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 > 0x7FFFFFFD && *(unsigned char *)(a1 + 32)) {
    return (*(_DWORD *)a1 + 2147483646);
  }
  unint64_t v3 = *(void *)(a1 + 24);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 2;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for AccessibilityActionCategory(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFD)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)uint64_t result = a2 - 2147483646;
    *(void *)(result + 8) = 0;
    if (a3 > 0x7FFFFFFD) {
      *(unsigned char *)(result + 32) = 1;
    }
  }
  else
  {
    if (a3 > 0x7FFFFFFD) {
      *(unsigned char *)(result + 32) = 0;
    }
    if (a2) {
      *(void *)(result + 24) = a2 + 1;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AccessibilityActionCategory()
{
  return &type metadata for AccessibilityActionCategory;
}

uint64_t sub_1876E1E74()
{
  return swift_getWitnessTable();
}

uint64_t destroy for AccessibilityActionCategory.Category(uint64_t result)
{
  if (*(void *)(result + 24) >= 0xFFFFFFFFuLL)
  {
    outlined consume of Text.Storage(*(void *)result, *(void *)(result + 8), *(unsigned char *)(result + 16));
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t initializeWithCopy for AccessibilityActionCategory.Category(uint64_t a1, uint64_t *a2)
{
  unint64_t v3 = a2[3];
  if (v3 < 0xFFFFFFFF)
  {
    long long v7 = *((_OWORD *)a2 + 1);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v7;
  }
  else
  {
    uint64_t v4 = *a2;
    uint64_t v5 = a2[1];
    char v6 = *((unsigned char *)a2 + 16);
    outlined copy of Text.Storage(*a2, v5, v6);
    *(void *)a1 = v4;
    *(void *)(a1 + 8) = v5;
    *(unsigned char *)(a1 + 16) = v6;
    *(void *)(a1 + 24) = v3;
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t assignWithCopy for AccessibilityActionCategory.Category(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(void *)(a2 + 24);
  if (*(void *)(a1 + 24) < 0xFFFFFFFFuLL)
  {
    if (v4 >= 0xFFFFFFFF)
    {
      uint64_t v11 = *(void *)a2;
      uint64_t v12 = *(void *)(a2 + 8);
      char v13 = *(unsigned char *)(a2 + 16);
      outlined copy of Text.Storage(*(void *)a2, v12, v13);
      *(void *)a1 = v11;
      *(void *)(a1 + 8) = v12;
      *(unsigned char *)(a1 + 16) = v13;
      *(void *)(a1 + 24) = *(void *)(a2 + 24);
      swift_bridgeObjectRetain();
      return a1;
    }
LABEL_7:
    long long v14 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v14;
    return a1;
  }
  if (v4 < 0xFFFFFFFF)
  {
    outlined consume of Text.Storage(*(void *)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16));
    swift_bridgeObjectRelease();
    goto LABEL_7;
  }
  uint64_t v5 = *(void *)a2;
  uint64_t v6 = *(void *)(a2 + 8);
  char v7 = *(unsigned char *)(a2 + 16);
  outlined copy of Text.Storage(*(void *)a2, v6, v7);
  uint64_t v8 = *(void *)a1;
  uint64_t v9 = *(void *)(a1 + 8);
  char v10 = *(unsigned char *)(a1 + 16);
  *(void *)a1 = v5;
  *(void *)(a1 + 8) = v6;
  *(unsigned char *)(a1 + 16) = v7;
  outlined consume of Text.Storage(v8, v9, v10);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for AccessibilityActionCategory.Category(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 24) < 0xFFFFFFFFuLL) {
    goto LABEL_5;
  }
  unint64_t v4 = *(void *)(a2 + 24);
  if (v4 < 0xFFFFFFFF)
  {
    outlined consume of Text.Storage(*(void *)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16));
    swift_bridgeObjectRelease();
LABEL_5:
    long long v9 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v9;
    return a1;
  }
  char v5 = *(unsigned char *)(a2 + 16);
  uint64_t v6 = *(void *)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  char v8 = *(unsigned char *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(unsigned char *)(a1 + 16) = v5;
  outlined consume of Text.Storage(v6, v7, v8);
  *(void *)(a1 + 24) = v4;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for AccessibilityActionCategory.Category(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFE && *(unsigned char *)(a1 + 32)) {
    return (*(_DWORD *)a1 + 2147483646);
  }
  unint64_t v3 = *(void *)(a1 + 24);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  unsigned int v4 = v3 + 1;
  unsigned int v5 = v3 - 1;
  if (v4 >= 3) {
    return v5;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for AccessibilityActionCategory.Category(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFD)
  {
    *(_OWORD *)uint64_t result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_DWORD *)uint64_t result = a2 - 2147483646;
    if (a3 >= 0x7FFFFFFE) {
      *(unsigned char *)(result + 32) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFE) {
      *(unsigned char *)(result + 32) = 0;
    }
    if (a2) {
      *(void *)(result + 24) = a2 + 1;
    }
  }
  return result;
}

void *destructiveInjectEnumTag for AccessibilityActionCategory.Category(void *result, int a2)
{
  if (a2 < 0)
  {
    result[2] = 0;
    result[3] = 0;
    *uint64_t result = a2 ^ 0x80000000;
    result[1] = 0;
  }
  else if (a2)
  {
    result[3] = (a2 - 1);
  }
  return result;
}

ValueMetadata *type metadata accessor for AccessibilityActionCategory.Category()
{
  return &type metadata for AccessibilityActionCategory.Category;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance AccessibilityActionCategory.Category(uint64_t *a1, uint64_t *a2)
{
  unint64_t v2 = a1[3];
  unint64_t v3 = a2[3];
  if (!v2) {
    return !v3;
  }
  if (v2 == 1) {
    return v3 == 1;
  }
  if (v3 < 2) {
    return 0;
  }
  uint64_t v5 = *a1;
  uint64_t v6 = a1[1];
  uint64_t v7 = a1[2];
  uint64_t v8 = *a2;
  uint64_t v9 = a2[1];
  uint64_t v10 = a2[2];
  outlined copy of AccessibilityActionCategory.Category(*a1, v6, v7, v2);
  outlined copy of AccessibilityActionCategory.Category(v8, v9, v10, v3);
  char v11 = static Text.== infix(_:_:)();
  outlined consume of AccessibilityActionCategory.Category(v8, v9, v10, v3);
  outlined consume of AccessibilityActionCategory.Category(v5, v6, v7, v2);
  return v11 & 1;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay7SwiftUI22AnyAccessibilityActionVG_AHs5NeverOTg503_s7d49UI4ViewPAAE20accessibilityActions8category_QrAA27gH77CategoryV_qd__yXEtAaBRd__lFyAA0G10AttachmentVAAE4TreeOzcfU_AA03AnygH0VAMXEfU_AF0ghQ0VTf1cn_nTf4ng_n(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int64_t v5 = *(void *)(a1 + 16);
  uint64_t v6 = MEMORY[0x1E4FBC860];
  if (v5)
  {
    uint64_t v27 = MEMORY[0x1E4FBC860];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5, 0);
    uint64_t v12 = (void *)(a1 + 32);
    do
    {
      uint64_t v14 = v12[3];
      uint64_t v13 = v12[4];
      __swift_project_boxed_opaque_existential_1(v12, v14);
      *(void *)&long long v25 = a2;
      *((void *)&v25 + 1) = a3;
      *(void *)&v26[0] = a4;
      *((void *)&v26[0] + 1) = a5;
      (*(void (**)(long long *__return_ptr, long long *, uint64_t, uint64_t))(v13 + 64))(&v23, &v25, v14, v13);
      outlined init with copy of AnyAccessibilityAction((uint64_t)v12, (uint64_t)&v21);
      if (*(void *)&v24[8])
      {
        outlined destroy of AnyAccessibilityAction((uint64_t)&v21);
        long long v25 = v23;
        v26[0] = *(_OWORD *)v24;
        *(_OWORD *)((char *)v26 + 9) = *(_OWORD *)&v24[9];
      }
      else
      {
        long long v25 = v21;
        v26[0] = v22[0];
        *(_OWORD *)((char *)v26 + 9) = *(_OWORD *)((char *)v22 + 9);
        outlined destroy of AnyAccessibilityAction?((uint64_t)&v23);
      }
      uint64_t v6 = v27;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v6 + 16) + 1, 1);
        uint64_t v6 = v27;
      }
      unint64_t v16 = *(void *)(v6 + 16);
      unint64_t v15 = *(void *)(v6 + 24);
      if (v16 >= v15 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v15 > 1), v16 + 1, 1);
        uint64_t v6 = v27;
      }
      *(void *)(v6 + 16) = v16 + 1;
      uint64_t v17 = (_OWORD *)(v6 + 48 * v16);
      long long v18 = v25;
      long long v19 = v26[0];
      *(_OWORD *)((char *)v17 + 57) = *(_OWORD *)((char *)v26 + 9);
      v17[2] = v18;
      v17[3] = v19;
      v12 += 6;
      --v5;
    }
    while (v5);
  }
  return v6;
}

uint64_t outlined init with copy of AnyAccessibilityAction(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t outlined destroy of AnyAccessibilityAction?(uint64_t a1)
{
  type metadata accessor for AnyAccessibilityAction?();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void type metadata accessor for AnyAccessibilityAction?()
{
  if (!lazy cache variable for type metadata for AnyAccessibilityAction?)
  {
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for AnyAccessibilityAction?);
    }
  }
}

uint64_t outlined destroy of AnyAccessibilityAction(uint64_t a1)
{
  return a1;
}

uint64_t ActionSheet.init(title:message:buttons:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10)
{
  *(void *)a9 = result;
  *(void *)(a9 + 8) = a2;
  *(unsigned char *)(a9 + 16) = a3 & 1;
  *(void *)(a9 + 24) = a4;
  *(void *)(a9 + 32) = a5;
  *(void *)(a9 + 40) = a6;
  *(void *)(a9 + 48) = a7;
  *(void *)(a9 + 56) = a8;
  *(void *)(a9 + 64) = a10;
  return result;
}

uint64_t protocol witness for static PreferenceKey.reduce(value:nextValue:) in conformance ActionSheet.Presentation.Key(uint64_t a1, void (*a2)(_OWORD *__return_ptr, uint64_t))
{
  uint64_t v4 = outlined init with take of ActionSheet.Presentation?(a1, (uint64_t)&v6, &lazy cache variable for type metadata for ActionSheet.Presentation?, (uint64_t)&type metadata for ActionSheet.Presentation);
  if (*((void *)&v7 + 1))
  {
    v17[8] = v14;
    v17[9] = v15;
    uint64_t v18 = v16;
    v17[4] = v10;
    v17[5] = v11;
    v17[6] = v12;
    v17[7] = v13;
    v17[0] = v6;
    v17[1] = v7;
    v17[2] = v8;
    v17[3] = v9;
  }
  else
  {
    a2(v17, v4);
    outlined destroy of AnyHashable?((uint64_t)&v6, &lazy cache variable for type metadata for ActionSheet.Presentation?, (uint64_t)&type metadata for ActionSheet.Presentation);
  }
  return outlined init with take of ActionSheet.Presentation?((uint64_t)v17, a1, &lazy cache variable for type metadata for ActionSheet.Presentation?, (uint64_t)&type metadata for ActionSheet.Presentation);
}

uint64_t protocol witness for AlertControllerConvertible.title.getter in conformance ActionSheet.Presentation()
{
  uint64_t v1 = *(void *)v0;
  outlined copy of Text.Storage(*(void *)v0, *(void *)(v0 + 8), *(unsigned char *)(v0 + 16));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t protocol witness for AlertControllerConvertible.message.getter in conformance ActionSheet.Presentation()
{
  uint64_t v1 = v0[4];
  outlined copy of Text?(v1, v0[5], v0[6], v0[7]);
  return v1;
}

uint64_t protocol witness for AlertControllerConvertible.buttons.getter in conformance ActionSheet.Presentation()
{
  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for AlertControllerConvertible.onDismiss.getter in conformance ActionSheet.Presentation()
{
  uint64_t v1 = *(void *)(v0 + 72);
  outlined copy of AppIntentExecutor?(v1);
  return v1;
}

uint64_t protocol witness for AlertControllerConvertible.itemID.getter in conformance ActionSheet.Presentation@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of AnyHashable?(v1 + 96, a1);
}

double protocol witness for AlertControllerConvertible.sourceRect.getter in conformance ActionSheet.Presentation()
{
  return *(double *)(v0 + 136);
}

uint64_t View.actionSheet<A>(item:content:)@<X0>(uint64_t a1@<X0>, void (*a2)(char *, uint64_t)@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v43 = a8;
  uint64_t v38 = a4;
  uint64_t v39 = a7;
  uint64_t v42 = a3;
  long long v40 = a2;
  uint64_t v37 = a5;
  uint64_t v44 = type metadata accessor for Optional();
  uint64_t v13 = type metadata accessor for Binding();
  uint64_t v41 = *(void *)(v13 - 8);
  MEMORY[0x1F4188790](v13);
  uint64_t v45 = (char *)&v36 - v14;
  uint64_t v46 = *(void *)(v44 - 8);
  double v16 = MEMORY[0x1F4188790](v15);
  uint64_t v18 = (char *)&v36 - v17;
  uint64_t v20 = v19;
  uint64_t v36 = a1;
  MEMORY[0x18C113DA0](v16);
  v48[2] = a4;
  v48[3] = a5;
  void v48[4] = a6;
  v48[5] = a7;
  v48[6] = v40;
  v48[7] = v42;
  uint64_t v21 = v44;
  _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((void (*)(char *, char *))partial apply for closure #1 in View.actionSheet<A>(item:content:), (uint64_t)v48, MEMORY[0x1E4FBC248], (uint64_t)&type metadata for ActionSheet, v22, (uint64_t)v55);
  uint64_t v42 = 0;
  long long v23 = *(void (**)(char *, uint64_t))(v46 + 8);
  v46 += 8;
  long long v40 = v23;
  v23(v18, v21);
  long long v50 = v55[0];
  long long v51 = v55[1];
  long long v52 = v55[2];
  long long v53 = v55[3];
  uint64_t v54 = v56;
  uint64_t v24 = v41;
  uint64_t v25 = v20;
  (*(void (**)(char *, uint64_t, uint64_t))(v41 + 16))(v45, a1, v20);
  uint64_t v26 = v24;
  unint64_t v27 = (*(unsigned __int8 *)(v24 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v24 + 80);
  id v28 = (char *)swift_allocObject();
  uint64_t v29 = v37;
  uint64_t v30 = v38;
  *((void *)v28 + 2) = v38;
  *((void *)v28 + 3) = v29;
  uint64_t v31 = v39;
  *((void *)v28 + 4) = a6;
  *((void *)v28 + 5) = v31;
  (*(void (**)(char *, char *, uint64_t))(v26 + 32))(&v28[v27], v45, v25);
  MEMORY[0x18C113DA0](v25);
  v47[2] = v30;
  v47[3] = v29;
  v47[4] = a6;
  v47[5] = v31;
  uint64_t v32 = MEMORY[0x1E4FBB960];
  uint64_t v33 = v44;
  _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((void (*)(char *, char *))partial apply for closure #3 in View.actionSheet<A>(item:content:), (uint64_t)v47, MEMORY[0x1E4FBC248], MEMORY[0x1E4FBB960], v34, (uint64_t)v49);
  v40(v18, v33);
  View.presentationCommon(_:onDismiss:id:)((uint64_t)&v50, (uint64_t)partial apply for closure #2 in View.actionSheet<A>(item:content:), (uint64_t)v28, (uint64_t)v49, v30, a6);
  swift_release();
  outlined destroy of AnyHashable?((uint64_t)v49, (unint64_t *)&lazy cache variable for type metadata for AnyHashable?, v32);
  return outlined consume of ActionSheet?(v50, *((uint64_t *)&v50 + 1), v51, *((uint64_t *)&v51 + 1), v52, *((uint64_t *)&v52 + 1), v53, *((uint64_t *)&v53 + 1));
}

uint64_t closure #2 in View.actionSheet<A>(item:content:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = type metadata accessor for Optional();
  uint64_t v5 = *(void *)(v4 - 8);
  double v6 = MEMORY[0x1F4188790](v4);
  long long v8 = (char *)&v10 - v7;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t, double))(*(void *)(a3 - 8) + 56))((char *)&v10 - v7, 1, 1, a3, v6);
  type metadata accessor for Binding();
  specialized Binding.wrappedValue.setter();
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v8, v4);
}

uint64_t sub_1876E31DC()
{
  uint64_t v1 = *(void *)(v0 + 24);
  type metadata accessor for Optional();
  uint64_t v2 = (int *)(type metadata accessor for Binding() - 8);
  uint64_t v3 = v0
     + ((*(unsigned __int8 *)(*(void *)v2 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v2 + 80));
  swift_release();
  swift_release();
  uint64_t v4 = v3 + v2[10];
  uint64_t v5 = *(void *)(v1 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(v4, 1, v1)) {
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v1);
  }

  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in View.actionSheet<A>(item:content:)()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = *(void *)(v0 + 24);
  type metadata accessor for Optional();
  uint64_t v3 = *(void *)(type metadata accessor for Binding() - 8);
  uint64_t v4 = v0 + ((*(unsigned __int8 *)(v3 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));

  return closure #2 in View.actionSheet<A>(item:content:)(v4, v1, v2);
}

uint64_t closure #3 in View.actionSheet<A>(item:content:)()
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v1 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v3 = (char *)&v5 - v2;
  dispatch thunk of Identifiable.id.getter();
  swift_getAssociatedConformanceWitness();
  _convertToAnyHashable<A>(_:)();
  return (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v3, AssociatedTypeWitness);
}

uint64_t partial apply for closure #3 in View.actionSheet<A>(item:content:)()
{
  return closure #3 in View.actionSheet<A>(item:content:)();
}

uint64_t outlined consume of ActionSheet?(uint64_t result, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7, uint64_t a8)
{
  if (a4)
  {
    outlined consume of Text.Storage(result, a2, a3 & 1);
    swift_bridgeObjectRelease();
    outlined consume of Text?(a5, a6, a7, a8);
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t View.actionSheet(isPresented:content:)(uint64_t a1, uint64_t a2, char a3, void (*a4)(long long *__return_ptr, void *, __n128, __n128, __n128), uint64_t a5, uint64_t a6, uint64_t a7)
{
  *(void *)&long long v24 = a1;
  *((void *)&v24 + 1) = a2;
  LOBYTE(v25) = a3;
  char v12 = a3 & 1;
  type metadata accessor for AnyHashable?(0, (unint64_t *)&lazy cache variable for type metadata for Binding<Bool>, MEMORY[0x1E4FBB390], MEMORY[0x1E4F41638]);
  uint64_t v13 = MEMORY[0x18C113DA0](v22);
  uint64_t v14 = 0;
  uint64_t v15 = 0;
  uint64_t v16 = 0;
  long long v17 = 0uLL;
  long long v18 = 0uLL;
  long long v19 = 0uLL;
  if (LOBYTE(v22[0]) == 1)
  {
    a4(&v24, v13, (__n128)0, (__n128)0, (__n128)0);
    long long v17 = v24;
    uint64_t v14 = v25;
    uint64_t v15 = v26;
    long long v18 = v27;
    long long v19 = v28;
    uint64_t v16 = v29;
  }
  long long v24 = v17;
  uint64_t v25 = v14;
  uint64_t v26 = v15;
  long long v27 = v18;
  long long v28 = v19;
  uint64_t v29 = v16;
  uint64_t v20 = swift_allocObject();
  *(void *)(v20 + 16) = a1;
  *(void *)(v20 + 24) = a2;
  *(unsigned char *)(v20 + 32) = v12;
  uint64_t v23 = 0;
  memset(v22, 0, sizeof(v22));
  swift_retain();
  swift_retain();
  View.presentationCommon(_:onDismiss:id:)((uint64_t)&v24, (uint64_t)partial apply for closure #1 in View.actionSheet(isPresented:content:), v20, (uint64_t)v22, a6, a7);
  swift_release();
  outlined destroy of AnyHashable?((uint64_t)v22, (unint64_t *)&lazy cache variable for type metadata for AnyHashable?, MEMORY[0x1E4FBB960]);
  return outlined consume of ActionSheet?(v24, *((uint64_t *)&v24 + 1), v25, v26, v27, *((uint64_t *)&v27 + 1), v28, *((uint64_t *)&v28 + 1));
}

uint64_t closure #1 in View.actionSheet(isPresented:content:)()
{
  return swift_release();
}

uint64_t sub_1876E37A4()
{
  swift_release();
  swift_release();

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in View.actionSheet(isPresented:content:)()
{
  return closure #1 in View.actionSheet(isPresented:content:)();
}

uint64_t destroy for ActionSheet(uint64_t a1)
{
  outlined consume of Text.Storage(*(void *)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16));
  swift_bridgeObjectRelease();
  if (*(void *)(a1 + 56))
  {
    outlined consume of Text.Storage(*(void *)(a1 + 32), *(void *)(a1 + 40), *(unsigned char *)(a1 + 48));
    swift_bridgeObjectRelease();
  }

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for ActionSheet(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  uint64_t v5 = *(void *)(a2 + 8);
  char v6 = *(unsigned char *)(a2 + 16);
  outlined copy of Text.Storage(*(void *)a2, v5, v6);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  *(unsigned char *)(a1 + 16) = v6;
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(a2 + 56);
  swift_bridgeObjectRetain();
  if (v7)
  {
    uint64_t v8 = *(void *)(a2 + 32);
    uint64_t v9 = *(void *)(a2 + 40);
    char v10 = *(unsigned char *)(a2 + 48);
    outlined copy of Text.Storage(v8, v9, v10);
    *(void *)(a1 + 32) = v8;
    *(void *)(a1 + 40) = v9;
    *(unsigned char *)(a1 + 48) = v10;
    *(void *)(a1 + 56) = v7;
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v11 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 48) = v11;
  }
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for ActionSheet(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  uint64_t v5 = *(void *)(a2 + 8);
  char v6 = *(unsigned char *)(a2 + 16);
  outlined copy of Text.Storage(*(void *)a2, v5, v6);
  uint64_t v7 = *(void *)a1;
  uint64_t v8 = *(void *)(a1 + 8);
  char v9 = *(unsigned char *)(a1 + 16);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  *(unsigned char *)(a1 + 16) = v6;
  outlined consume of Text.Storage(v7, v8, v9);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  char v10 = (_OWORD *)(a1 + 32);
  long long v11 = (_OWORD *)(a2 + 32);
  uint64_t v12 = *(void *)(a2 + 56);
  if (*(void *)(a1 + 56))
  {
    if (v12)
    {
      uint64_t v13 = *(void *)(a2 + 32);
      uint64_t v14 = *(void *)(a2 + 40);
      char v15 = *(unsigned char *)(a2 + 48);
      outlined copy of Text.Storage(v13, v14, v15);
      uint64_t v16 = *(void *)(a1 + 32);
      uint64_t v17 = *(void *)(a1 + 40);
      char v18 = *(unsigned char *)(a1 + 48);
      *(void *)(a1 + 32) = v13;
      *(void *)(a1 + 40) = v14;
      *(unsigned char *)(a1 + 48) = v15;
      outlined consume of Text.Storage(v16, v17, v18);
      *(void *)(a1 + 56) = *(void *)(a2 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      outlined destroy of Text(a1 + 32);
      long long v22 = *(_OWORD *)(a2 + 48);
      *char v10 = *v11;
      *(_OWORD *)(a1 + 48) = v22;
    }
  }
  else if (v12)
  {
    uint64_t v19 = *(void *)(a2 + 32);
    uint64_t v20 = *(void *)(a2 + 40);
    char v21 = *(unsigned char *)(a2 + 48);
    outlined copy of Text.Storage(v19, v20, v21);
    *(void *)(a1 + 32) = v19;
    *(void *)(a1 + 40) = v20;
    *(unsigned char *)(a1 + 48) = v21;
    *(void *)(a1 + 56) = *(void *)(a2 + 56);
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v23 = *(_OWORD *)(a2 + 48);
    *char v10 = *v11;
    *(_OWORD *)(a1 + 48) = v23;
  }
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for ActionSheet(uint64_t a1, uint64_t a2)
{
  char v4 = *(unsigned char *)(a2 + 16);
  uint64_t v5 = *(void *)a1;
  uint64_t v6 = *(void *)(a1 + 8);
  char v7 = *(unsigned char *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(unsigned char *)(a1 + 16) = v4;
  outlined consume of Text.Storage(v5, v6, v7);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRelease();
  if (!*(void *)(a1 + 56)) {
    goto LABEL_5;
  }
  uint64_t v8 = *(void *)(a2 + 56);
  if (!v8)
  {
    outlined destroy of Text(a1 + 32);
LABEL_5:
    long long v13 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 48) = v13;
    goto LABEL_6;
  }
  char v9 = *(unsigned char *)(a2 + 48);
  uint64_t v10 = *(void *)(a1 + 32);
  uint64_t v11 = *(void *)(a1 + 40);
  char v12 = *(unsigned char *)(a1 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(unsigned char *)(a1 + 48) = v9;
  outlined consume of Text.Storage(v10, v11, v12);
  *(void *)(a1 + 56) = v8;
  swift_bridgeObjectRelease();
LABEL_6:
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for ActionSheet()
{
  return &type metadata for ActionSheet;
}

uint64_t sub_1876E3B30()
{
  return swift_getWitnessTable();
}

void type metadata accessor for AlertTransformModifier<ActionSheet.Presentation.Key>()
{
  if (!lazy cache variable for type metadata for AlertTransformModifier<ActionSheet.Presentation.Key>)
  {
    unint64_t v0 = type metadata accessor for AlertTransformModifier();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for AlertTransformModifier<ActionSheet.Presentation.Key>);
    }
  }
}

uint64_t sub_1876E3C00()
{
  return swift_getWitnessTable();
}

uint64_t destroy for ActionSheet.Presentation(uint64_t a1)
{
  outlined consume of Text.Storage(*(void *)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16));
  swift_bridgeObjectRelease();
  if (*(void *)(a1 + 56))
  {
    outlined consume of Text.Storage(*(void *)(a1 + 32), *(void *)(a1 + 40), *(unsigned char *)(a1 + 48));
    swift_bridgeObjectRelease();
  }
  uint64_t result = swift_bridgeObjectRelease();
  if (*(void *)(a1 + 72)) {
    uint64_t result = swift_release();
  }
  if (*(void *)(a1 + 120))
  {
    return __swift_destroy_boxed_opaque_existential_1(a1 + 96);
  }
  return result;
}

uint64_t initializeWithCopy for ActionSheet.Presentation(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  uint64_t v5 = *(void *)(a2 + 8);
  char v6 = *(unsigned char *)(a2 + 16);
  outlined copy of Text.Storage(*(void *)a2, v5, v6);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  *(unsigned char *)(a1 + 16) = v6;
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(a2 + 56);
  swift_bridgeObjectRetain();
  if (v7)
  {
    uint64_t v8 = *(void *)(a2 + 32);
    uint64_t v9 = *(void *)(a2 + 40);
    char v10 = *(unsigned char *)(a2 + 48);
    outlined copy of Text.Storage(v8, v9, v10);
    *(void *)(a1 + 32) = v8;
    *(void *)(a1 + 40) = v9;
    *(unsigned char *)(a1 + 48) = v10;
    *(void *)(a1 + 56) = v7;
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v11 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 48) = v11;
  }
  uint64_t v12 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_bridgeObjectRetain();
  if (v12)
  {
    uint64_t v13 = *(void *)(a2 + 80);
    *(void *)(a1 + 72) = v12;
    *(void *)(a1 + 80) = v13;
    swift_retain();
  }
  else
  {
    *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  }
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  uint64_t v14 = (_OWORD *)(a1 + 96);
  char v15 = (_OWORD *)(a2 + 96);
  uint64_t v16 = *(void *)(a2 + 120);
  if (v16)
  {
    uint64_t v17 = *(void *)(a2 + 128);
    *(void *)(a1 + 120) = v16;
    *(void *)(a1 + 128) = v17;
    (**(void (***)(_OWORD *, _OWORD *))(v16 - 8))(v14, v15);
  }
  else
  {
    long long v18 = *(_OWORD *)(a2 + 112);
    *uint64_t v14 = *v15;
    *(_OWORD *)(a1 + 112) = v18;
    *(void *)(a1 + 128) = *(void *)(a2 + 128);
  }
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  return a1;
}

uint64_t assignWithCopy for ActionSheet.Presentation(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  uint64_t v5 = *(void *)(a2 + 8);
  char v6 = *(unsigned char *)(a2 + 16);
  outlined copy of Text.Storage(*(void *)a2, v5, v6);
  uint64_t v7 = *(void *)a1;
  uint64_t v8 = *(void *)(a1 + 8);
  char v9 = *(unsigned char *)(a1 + 16);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  *(unsigned char *)(a1 + 16) = v6;
  outlined consume of Text.Storage(v7, v8, v9);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  char v10 = (_OWORD *)(a1 + 32);
  long long v11 = (_OWORD *)(a2 + 32);
  uint64_t v12 = *(void *)(a2 + 56);
  if (*(void *)(a1 + 56))
  {
    if (v12)
    {
      uint64_t v13 = *(void *)(a2 + 32);
      uint64_t v14 = *(void *)(a2 + 40);
      char v15 = *(unsigned char *)(a2 + 48);
      outlined copy of Text.Storage(v13, v14, v15);
      uint64_t v16 = *(void *)(a1 + 32);
      uint64_t v17 = *(void *)(a1 + 40);
      char v18 = *(unsigned char *)(a1 + 48);
      *(void *)(a1 + 32) = v13;
      *(void *)(a1 + 40) = v14;
      *(unsigned char *)(a1 + 48) = v15;
      outlined consume of Text.Storage(v16, v17, v18);
      *(void *)(a1 + 56) = *(void *)(a2 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      outlined destroy of Text(a1 + 32);
      long long v22 = *(_OWORD *)(a2 + 48);
      *char v10 = *v11;
      *(_OWORD *)(a1 + 48) = v22;
    }
  }
  else if (v12)
  {
    uint64_t v19 = *(void *)(a2 + 32);
    uint64_t v20 = *(void *)(a2 + 40);
    char v21 = *(unsigned char *)(a2 + 48);
    outlined copy of Text.Storage(v19, v20, v21);
    *(void *)(a1 + 32) = v19;
    *(void *)(a1 + 40) = v20;
    *(unsigned char *)(a1 + 48) = v21;
    *(void *)(a1 + 56) = *(void *)(a2 + 56);
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v23 = *(_OWORD *)(a2 + 48);
    *char v10 = *v11;
    *(_OWORD *)(a1 + 48) = v23;
  }
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v24 = *(void *)(a2 + 72);
  if (*(void *)(a1 + 72))
  {
    if (v24)
    {
      uint64_t v25 = *(void *)(a2 + 80);
      *(void *)(a1 + 72) = v24;
      *(void *)(a1 + 80) = v25;
      swift_retain();
      swift_release();
      goto LABEL_15;
    }
    swift_release();
  }
  else if (v24)
  {
    uint64_t v26 = *(void *)(a2 + 80);
    *(void *)(a1 + 72) = v24;
    *(void *)(a1 + 80) = v26;
    swift_retain();
    goto LABEL_15;
  }
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
LABEL_15:
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  long long v27 = (_OWORD *)(a1 + 96);
  long long v28 = (_OWORD *)(a2 + 96);
  uint64_t v29 = *(void *)(a2 + 120);
  if (*(void *)(a1 + 120))
  {
    if (v29)
    {
      __swift_assign_boxed_opaque_existential_1((uint64_t *)(a1 + 96), (uint64_t *)(a2 + 96));
    }
    else
    {
      outlined destroy of AnyHashable(a1 + 96);
      uint64_t v30 = *(void *)(a2 + 128);
      long long v31 = *(_OWORD *)(a2 + 112);
      *long long v27 = *v28;
      *(_OWORD *)(a1 + 112) = v31;
      *(void *)(a1 + 128) = v30;
    }
  }
  else if (v29)
  {
    *(void *)(a1 + 120) = v29;
    *(void *)(a1 + 128) = *(void *)(a2 + 128);
    (**(void (***)(uint64_t, uint64_t))(v29 - 8))(a1 + 96, a2 + 96);
  }
  else
  {
    long long v32 = *v28;
    long long v33 = *(_OWORD *)(a2 + 112);
    *(void *)(a1 + 128) = *(void *)(a2 + 128);
    *long long v27 = v32;
    *(_OWORD *)(a1 + 112) = v33;
  }
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  return a1;
}

__n128 __swift_memcpy168_8(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  long long v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  long long v4 = a2[3];
  long long v5 = a2[4];
  long long v6 = a2[6];
  *(_OWORD *)(a1 + 80) = a2[5];
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  __n128 result = (__n128)a2[7];
  long long v8 = a2[8];
  long long v9 = a2[9];
  *(void *)(a1 + 160) = *((void *)a2 + 20);
  *(_OWORD *)(a1 + 128) = v8;
  *(_OWORD *)(a1 + 144) = v9;
  *(__n128 *)(a1 + 112) = result;
  return result;
}

uint64_t assignWithTake for ActionSheet.Presentation(uint64_t a1, uint64_t a2)
{
  char v4 = *(unsigned char *)(a2 + 16);
  uint64_t v5 = *(void *)a1;
  uint64_t v6 = *(void *)(a1 + 8);
  char v7 = *(unsigned char *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(unsigned char *)(a1 + 16) = v4;
  outlined consume of Text.Storage(v5, v6, v7);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRelease();
  if (*(void *)(a1 + 56))
  {
    uint64_t v8 = *(void *)(a2 + 56);
    if (v8)
    {
      char v9 = *(unsigned char *)(a2 + 48);
      uint64_t v10 = *(void *)(a1 + 32);
      uint64_t v11 = *(void *)(a1 + 40);
      char v12 = *(unsigned char *)(a1 + 48);
      *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
      *(unsigned char *)(a1 + 48) = v9;
      outlined consume of Text.Storage(v10, v11, v12);
      *(void *)(a1 + 56) = v8;
      swift_bridgeObjectRelease();
      goto LABEL_6;
    }
    outlined destroy of Text(a1 + 32);
  }
  long long v13 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v13;
LABEL_6:
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_bridgeObjectRelease();
  uint64_t v14 = *(void *)(a2 + 72);
  if (*(void *)(a1 + 72))
  {
    if (v14)
    {
      uint64_t v15 = *(void *)(a2 + 80);
      *(void *)(a1 + 72) = v14;
      *(void *)(a1 + 80) = v15;
      swift_release();
      goto LABEL_13;
    }
    swift_release();
  }
  else if (v14)
  {
    uint64_t v16 = *(void *)(a2 + 80);
    *(void *)(a1 + 72) = v14;
    *(void *)(a1 + 80) = v16;
    goto LABEL_13;
  }
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
LABEL_13:
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  if (*(void *)(a1 + 120))
  {
    if (*(void *)(a2 + 120)) {
      __swift_destroy_boxed_opaque_existential_1(a1 + 96);
    }
    else {
      outlined destroy of AnyHashable(a1 + 96);
    }
  }
  long long v17 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = v17;
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  return a1;
}

_UNKNOWN **associated type witness table accessor for AlertControllerConvertible.Action : AlertActionConvertible in ActionSheet.Presentation()
{
  return &protocol witness table for Alert.Button;
}

uint64_t outlined init with take of ActionSheet.Presentation?(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t a4)
{
  type metadata accessor for AnyHashable?(0, a3, a4, MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a2, a1, v6);
  return a2;
}

uint64_t sub_1876E42D8()
{
  if (*(void *)(v0 + 40))
  {
    outlined consume of Text.Storage(*(void *)(v0 + 16), *(void *)(v0 + 24), *(unsigned char *)(v0 + 32));
    swift_bridgeObjectRelease();
    if (*(void *)(v0 + 72))
    {
      outlined consume of Text.Storage(*(void *)(v0 + 48), *(void *)(v0 + 56), *(unsigned char *)(v0 + 64));
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
  }
  if (*(void *)(v0 + 88)) {
    swift_release();
  }
  if (*(void *)(v0 + 128)) {
    __swift_destroy_boxed_opaque_existential_1(v0 + 104);
  }

  return swift_deallocObject();
}

uint64_t *outlined retain of ActionSheet?(uint64_t *a1)
{
  return a1;
}

uint64_t outlined copy of ActionSheet?(uint64_t result, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7, uint64_t a8)
{
  if (a4)
  {
    outlined copy of Text.Storage(result, a2, a3 & 1);
    swift_bridgeObjectRetain();
    outlined copy of Text?(a5, a6, a7, a8);
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t outlined init with take of Text.Storage(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t outlined retain of Text.Storage(uint64_t a1)
{
  return a1;
}

uint64_t *outlined retain of Text?(uint64_t *a1)
{
  return a1;
}

uint64_t _ConditionalContent<>.init(storage:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for _ConditionalContent.Storage();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32);

  return v5(a2, a1, v4);
}

uint64_t static _ConditionalContent<>._makeContent(content:inputs:)@<X0>(int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v50 = *MEMORY[0x1E4F143B8];
  int v9 = *a1;
  uint64_t v27 = *(void *)(a2 + 40);
  int v21 = *(_DWORD *)(a2 + 80);
  uint64_t v32 = *(void *)(a2 + 48);
  uint64_t v20 = *(void *)(a2 + 56);
  LODWORD(v33) = v20;
  PreferencesInputs.makeIndirectOutputs()();
  uint64_t v10 = v45;
  int v25 = v46;
  LODWORD(v45) = v9;
  type metadata accessor for _ConditionalContent();
  type metadata accessor for _GraphValue();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v11 = *(void *)(a2 + 32);
  uint64_t v12 = *(void *)(a2 + 64);
  uint64_t v13 = *(void *)(a2 + 72);
  _GraphValue.value.getter();
  uint64_t v36 = v11;
  uint64_t v37 = v27;
  uint64_t v38 = v32;
  uint64_t v39 = v20;
  uint64_t v40 = v12;
  uint64_t v41 = v13;
  int v42 = v21;
  uint64_t v43 = v10;
  int v44 = v46;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v45 = a3;
  uint64_t v46 = a4;
  uint64_t v47 = a5;
  uint64_t v48 = a6;
  uint64_t v14 = type metadata accessor for _ConditionalContent<>.TableColumnProvider();
  uint64_t WitnessTable = swift_getWitnessTable();
  _ConditionalContent.Container.init(content:provider:)();
  uint64_t v29 = type metadata accessor for _ConditionalContent.Info();
  uint64_t v32 = a3;
  uint64_t v33 = a4;
  uint64_t v34 = v14;
  uint64_t v35 = WitnessTable;
  uint64_t v30 = type metadata accessor for _ConditionalContent.Container();
  uint64_t v31 = swift_getWitnessTable();
  uint64_t v16 = type metadata accessor for Attribute();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v17 = v49;
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v45, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA12StatefulRuleRd__lufcADSPyqd__GXEfU_TA_2, (uint64_t)v28, v30, MEMORY[0x1E4FBC248], v16, MEMORY[0x1E4FBC278], v18);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  uint64_t v45 = v10;
  LODWORD(v46) = v25;
  LOBYTE(v32) = 0;
  PreferencesOutputs.setIndirectDependency(_:)();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t result = swift_release();
  *(void *)a7 = v10;
  *(_DWORD *)(a7 + 8) = v25;
  return result;
}

uint64_t static _ConditionalContent<>._tableColumnCount(inputs:)(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = *a1;
  int v6 = *((_DWORD *)a1 + 2);
  uint64_t v7 = a1[2];
  int v8 = *((_DWORD *)a1 + 6);
  int v9 = *((_DWORD *)a1 + 7);
  int v11 = *((_DWORD *)a1 + 8);
  int v10 = *((_DWORD *)a1 + 9);
  uint64_t v13 = a1[5];
  uint64_t v12 = a1[6];
  int v14 = *((_DWORD *)a1 + 14);
  int v15 = *((_DWORD *)a1 + 15);
  int v16 = *((_DWORD *)a1 + 16);
  int v17 = *((_DWORD *)a1 + 17);
  int v18 = *((_DWORD *)a1 + 18);
  int v19 = *((_DWORD *)a1 + 19);
  int v20 = *((_DWORD *)a1 + 20);
  uint64_t v35 = *a1;
  int v36 = v6;
  uint64_t v37 = v7;
  int v38 = v8;
  int v39 = v9;
  int v40 = v11;
  int v41 = v10;
  uint64_t v42 = v13;
  uint64_t v43 = v12;
  uint64_t v33 = v12;
  int v31 = v15;
  int v32 = v14;
  int v44 = v14;
  int v45 = v15;
  int v29 = v17;
  int v30 = v16;
  int v46 = v16;
  int v47 = v17;
  int v27 = v19;
  int v28 = v18;
  int v48 = v18;
  int v49 = v19;
  int v26 = v20;
  int v50 = v20;
  uint64_t v21 = (*(uint64_t (**)(uint64_t *))(a4 + 72))(&v35);
  if ((v22 & 1) == 0)
  {
    uint64_t v35 = v5;
    int v36 = v6;
    uint64_t v37 = v7;
    int v38 = v8;
    int v39 = v9;
    int v40 = v11;
    int v41 = v10;
    uint64_t v42 = v13;
    uint64_t v43 = v33;
    int v44 = v32;
    int v45 = v31;
    int v46 = v30;
    int v47 = v29;
    int v48 = v28;
    int v49 = v27;
    int v50 = v26;
    BOOL v23 = v21 != (*(uint64_t (**)(uint64_t *))(a5 + 72))(&v35);
    if ((v24 | v23)) {
      return 0;
    }
  }
  return v21;
}

void _ConditionalContent<>.TableColumnProvider.detachOutputs()()
{
}

uint64_t _ConditionalContent<>.TableColumnProvider.attachOutputs(to:)()
{
  return PreferencesOutputs.attachIndirectOutputs(to:)();
}

uint64_t _ConditionalContent<>.TableColumnProvider.makeChildInputs()@<X0>(uint64_t a1@<X8>)
{
  int v17 = *(_DWORD *)(v1 + 8);
  uint64_t v3 = *(void *)(v1 + 16);
  uint64_t v18 = *(void *)(v1 + 40);
  int v4 = *(_DWORD *)(v1 + 80);
  *(void *)(a1 + 48) = *(void *)(v1 + 48);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(v1 + 56);
  *(void *)(a1 + 72) = *(void *)(v1 + 72);
  *(_DWORD *)(a1 + 80) = v4;
  swift_beginAccess();
  int v5 = *(_DWORD *)(v3 + 16);
  uint64_t v6 = *(void *)(v3 + 24);
  long long v15 = *(_OWORD *)(v3 + 48);
  long long v16 = *(_OWORD *)(v3 + 32);
  uint64_t v8 = *(void *)(v3 + 64);
  uint64_t v7 = *(void *)(v3 + 72);
  char v9 = *(unsigned char *)(v3 + 80);
  char v10 = *(unsigned char *)(v3 + 81);
  uint64_t v11 = *(void *)(v3 + 88);
  type metadata accessor for MutableBox<CachedEnvironment>();
  uint64_t v12 = swift_allocObject();
  *(_DWORD *)(v12 + 16) = v5;
  *(void *)(v12 + 24) = v6;
  *(_OWORD *)(v12 + 32) = v16;
  *(_OWORD *)(v12 + 48) = v15;
  *(void *)(v12 + 64) = v8;
  *(void *)(v12 + 72) = v7;
  *(unsigned char *)(v12 + 80) = v9;
  *(unsigned char *)(v12 + 81) = v10;
  *(void *)(v12 + 88) = v11;
  *(void *)a1 = swift_retain();
  *(_DWORD *)(a1 + 8) = v17;
  *(void *)(a1 + 16) = v12;
  uint64_t v13 = *(void *)(v1 + 32);
  *(void *)(a1 + 24) = *(void *)(v1 + 24);
  *(void *)(a1 + 32) = v13;
  *(void *)(a1 + 40) = v18;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

uint64_t _ConditionalContent<>.TableColumnProvider.makeColumnOutputs<A>(child:inputs:)(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8 = *a2;
  int v9 = *((_DWORD *)a2 + 2);
  uint64_t v10 = a2[2];
  int v11 = *((_DWORD *)a2 + 20);
  _GraphValue.init(_:)();
  uint64_t v14 = v8;
  int v15 = v9;
  uint64_t v16 = v10;
  long long v12 = *(_OWORD *)(a2 + 5);
  long long v17 = *(_OWORD *)(a2 + 3);
  long long v18 = v12;
  long long v19 = *(_OWORD *)(a2 + 7);
  uint64_t v20 = a2[9];
  int v21 = v11;
  return (*(uint64_t (**)(unsigned char *, uint64_t *, uint64_t, uint64_t))(a5 + 64))(v22, &v14, a4, a5);
}

uint64_t _ConditionalContent<>.TableColumnProvider.makeTrueOutputs(child:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(a2 + 8);
  uint64_t v4 = *(void *)(a2 + 16);
  int v5 = *(_DWORD *)(a2 + 80);
  uint64_t v7 = *(void *)a2;
  int v8 = v3;
  uint64_t v9 = v4;
  long long v10 = *(_OWORD *)(a2 + 24);
  long long v11 = *(_OWORD *)(a2 + 40);
  long long v12 = *(_OWORD *)(a2 + 56);
  uint64_t v13 = *(void *)(a2 + 72);
  int v14 = v5;
  return _ConditionalContent<>.TableColumnProvider.makeColumnOutputs<A>(child:inputs:)(a1, &v7, a3, *(void *)(a3 + 16), *(void *)(a3 + 32));
}

uint64_t _ConditionalContent<>.TableColumnProvider.makeFalseOutputs(child:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(a2 + 8);
  uint64_t v4 = *(void *)(a2 + 16);
  int v5 = *(_DWORD *)(a2 + 80);
  uint64_t v7 = *(void *)a2;
  int v8 = v3;
  uint64_t v9 = v4;
  long long v10 = *(_OWORD *)(a2 + 24);
  long long v11 = *(_OWORD *)(a2 + 40);
  long long v12 = *(_OWORD *)(a2 + 56);
  uint64_t v13 = *(void *)(a2 + 72);
  int v14 = v5;
  return _ConditionalContent<>.TableColumnProvider.makeColumnOutputs<A>(child:inputs:)(a1, &v7, a3, *(void *)(a3 + 24), *(void *)(a3 + 40));
}

uint64_t protocol witness for ConditionalContentProvider.inputs.getter in conformance _ConditionalContent<A, B><>.TableColumnProvider@<X0>(uint64_t a1@<X8>)
{
  int v2 = *(_DWORD *)(v1 + 8);
  uint64_t v3 = *(void *)(v1 + 16);
  uint64_t v4 = *(void *)(v1 + 40);
  uint64_t v5 = *(void *)(v1 + 48);
  int v6 = *(_DWORD *)(v1 + 80);
  *(void *)a1 = *(void *)v1;
  *(_DWORD *)(a1 + 8) = v2;
  *(void *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(v1 + 24);
  *(void *)(a1 + 40) = v4;
  *(void *)(a1 + 48) = v5;
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(v1 + 56);
  *(void *)(a1 + 72) = *(void *)(v1 + 72);
  *(_DWORD *)(a1 + 80) = v6;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();

  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for ConditionalContentProvider.outputs.getter in conformance _ConditionalContent<A, B><>.TableColumnProvider@<X0>(uint64_t a1@<X8>)
{
  int v2 = *(_DWORD *)(v1 + 96);
  *(void *)a1 = *(void *)(v1 + 88);
  *(_DWORD *)(a1 + 8) = v2;
  return swift_bridgeObjectRetain();
}

uint64_t _ConditionalContent.init(__storage:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for _ConditionalContent.Storage();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32);

  return v5(a2, a1, v4);
}

uint64_t type metadata accessor for _ConditionalContent<>.TableColumnProvider()
{
  return swift_getGenericMetadata();
}

uint64_t protocol witness for static TableColumnContent._makeContent(content:inputs:) in conformance <> _ConditionalContent<A, B>@<X0>(int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return static _ConditionalContent<>._makeContent(content:inputs:)(a1, a2, *(void *)(a3 + 16), *(void *)(a3 + 24), *(void *)(a4 - 8), *(void *)(a4 - 16), a5);
}

uint64_t protocol witness for static TableColumnContent._tableColumnCount(inputs:) in conformance <> _ConditionalContent<A, B>(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  return static _ConditionalContent<>._tableColumnCount(inputs:)(a1, *(void *)(a2 + 16), *(void *)(a2 + 24), *(void *)(a3 - 8), *(void *)(a3 - 16));
}

uint64_t Optional<A>.ChildTableColumn.value.getter@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v23 = a3;
  uint64_t v5 = type metadata accessor for Optional();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  int v8 = (char *)&v20 - v7;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v22 = type metadata accessor for EmptyTableColumnContent();
  uint64_t v9 = type metadata accessor for _ConditionalContent.Storage();
  uint64_t v10 = type metadata accessor for Optional();
  uint64_t v20 = *(void *)(v10 - 8);
  uint64_t v21 = v10;
  MEMORY[0x1F4188790](v10);
  long long v12 = (char *)&v20 - v11;
  uint64_t v13 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v14);
  uint64_t v16 = (char *)&v20 - v15;
  Optional<A>.ChildTableColumn.content.getter((uint64_t)v8);
  uint64_t v25 = a1;
  uint64_t v26 = a2;
  _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((void (*)(char *, char *))partial apply for closure #1 in Optional<A>.ChildTableColumn.value.getter, (uint64_t)v24, MEMORY[0x1E4FBC248], v9, v17, (uint64_t)v12);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v12, 1, v9) == 1)
  {
    swift_storeEnumTagMultiPayload();
    (*(void (**)(char *, uint64_t))(v20 + 8))(v12, v21);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v16, v12, v9);
  }
  swift_checkMetadataState();
  swift_getWitnessTable();
  uint64_t v18 = type metadata accessor for _ConditionalContent.Storage();
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(void *)(v18 - 8) + 32))(v23, v16, v18);
}

uint64_t closure #1 in Optional<A>.ChildTableColumn.value.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return swift_storeEnumTagMultiPayload();
}

uint64_t protocol witness for static Rule.initialValue.getter in conformance A?<A>.ChildTableColumn@<X0>(uint64_t a1@<X8>)
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for EmptyTableColumnContent();
  uint64_t v2 = type metadata accessor for _ConditionalContent();
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56);

  return v3(a1, 1, 1, v2);
}

uint64_t protocol witness for Rule.value.getter in conformance A?<A>.ChildTableColumn@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return Optional<A>.ChildTableColumn.value.getter(*(void *)(a1 + 16), *(void *)(a1 + 24), a2);
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance A?<A>.ChildTableColumn(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F40FE388](a1, WitnessTable);
}

uint64_t static Optional<A>._makeContent(content:inputs:)@<X0>(_DWORD *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9 = *a2;
  int v10 = *((_DWORD *)a2 + 2);
  uint64_t v11 = a2[2];
  int v12 = *((_DWORD *)a2 + 20);
  LODWORD(v21) = *a1;
  type metadata accessor for Optional();
  type metadata accessor for _GraphValue();
  uint64_t v13 = a2[3];
  uint64_t v14 = a2[4];
  long long v19 = *(_OWORD *)(a2 + 7);
  long long v20 = *(_OWORD *)(a2 + 5);
  uint64_t v15 = a2[9];
  _GraphValue.value.getter();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v16 = type metadata accessor for EmptyTableColumnContent();
  type metadata accessor for _ConditionalContent();
  type metadata accessor for Optional<A>.ChildTableColumn();
  swift_getWitnessTable();
  _GraphValue.init<A>(_:)();
  uint64_t v21 = v9;
  int v22 = v10;
  uint64_t v23 = v11;
  uint64_t v24 = v13;
  uint64_t v25 = v14;
  long long v26 = v20;
  long long v27 = v19;
  uint64_t v28 = v15;
  int v29 = v12;
  uint64_t WitnessTable = swift_getWitnessTable();
  return static _ConditionalContent<>._makeContent(content:inputs:)(v30, (uint64_t)&v21, a3, v16, a4, WitnessTable, a5);
}

uint64_t static Optional<A>._tableColumnCount(inputs:)(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  int v3 = *((_DWORD *)a1 + 2);
  uint64_t v4 = a1[2];
  int v5 = *((_DWORD *)a1 + 20);
  uint64_t v8 = *a1;
  int v9 = v3;
  uint64_t v10 = v4;
  long long v6 = *(_OWORD *)(a1 + 5);
  long long v11 = *(_OWORD *)(a1 + 3);
  long long v12 = v6;
  long long v13 = *(_OWORD *)(a1 + 7);
  uint64_t v14 = a1[9];
  int v15 = v5;
  (*(uint64_t (**)(uint64_t *))(a3 + 72))(&v8);
  return 0;
}

uint64_t protocol witness for static TableColumnContent._makeContent(content:inputs:) in conformance <A> A?@<X0>(_DWORD *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return static Optional<A>._makeContent(content:inputs:)(a1, a2, *(void *)(a3 + 16), *(void *)(a4 - 8), a5);
}

uint64_t protocol witness for static TableColumnContent._tableColumnCount(inputs:) in conformance <A> A?(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  return 0;
}

uint64_t protocol witness for TableColumnList.visitColumns<A>(applying:from:) in conformance EmptyTableColumnContent<A>.EmptyTableColumnList()
{
  return protocol witness for static PreferenceKey._isReadableByHost.getter in conformance AccessibilityLargeContentViewTree.Key();
}

uint64_t static EmptyTableColumnContent._makeContent(content:inputs:)@<X0>(uint64_t a1@<X8>)
{
  PreferencesOutputs.init()();
  swift_bridgeObjectRetain();
  PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)a1 = v3;
  *(_DWORD *)(a1 + 8) = v4;
  return result;
}

uint64_t implicit closure #1 in static EmptyTableColumnContent._makeContent(content:inputs:)()
{
  v2[5] = *MEMORY[0x1E4F143B8];
  v2[3] = type metadata accessor for EmptyTableColumnContent.EmptyTableColumnList();
  v2[4] = &protocol witness table for EmptyTableColumnContent<A>.EmptyTableColumnList;
  type metadata accessor for TableColumnList();
  type metadata accessor for External<TableColumnList>();
  lazy protocol witness table accessor for type External<TableColumnList> and conformance External<A>();
  uint64_t v0 = Attribute.init<A>(body:value:flags:update:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v2);
  return v0;
}

uint64_t static EmptyTableColumnContent._tableColumnCount(inputs:)()
{
  return 0;
}

uint64_t protocol witness for static TableColumnContent._makeContent(content:inputs:) in conformance EmptyTableColumnContent<A>@<X0>(uint64_t a1@<X8>)
{
  return static EmptyTableColumnContent._makeContent(content:inputs:)(a1);
}

uint64_t protocol witness for static TableColumnContent._tableColumnCount(inputs:) in conformance EmptyTableColumnContent<A>()
{
  return 0;
}

uint64_t type metadata accessor for EmptyTableColumnContent()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for Optional<A>.ChildTableColumn()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t partial apply for implicit closure #1 in static EmptyTableColumnContent._makeContent(content:inputs:)()
{
  return implicit closure #1 in static EmptyTableColumnContent._makeContent(content:inputs:)();
}

uint64_t associated type witness table accessor for TableColumnContent.TableColumnSortComparator : SortComparator in <> _ConditionalContent<A, B>()
{
  return swift_getAssociatedConformanceWitness();
}

uint64_t associated type witness table accessor for TableColumnContent.TableRowValue : Identifiable in <> _ConditionalContent<A, B>()
{
  return swift_getAssociatedConformanceWitness();
}

uint64_t instantiation function for generic protocol witness table for <> _ConditionalContent<A, B>(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

{
  uint64_t result;

  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

{
  uint64_t result;

  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

{
  uint64_t result;

  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

{
  uint64_t result;

  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t instantiation function for generic protocol witness table for <A> A?(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

{
  uint64_t result;

  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

{
  uint64_t result;

  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

{
  uint64_t result;

  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

{
  uint64_t result;

  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t associated type witness table accessor for TableColumnContent.TableColumnSortComparator : SortComparator in EmptyTableColumnContent<A>()
{
  return MEMORY[0x1E4F28138];
}

uint64_t instantiation function for generic protocol witness table for EmptyTableColumnContent<A>(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t destroy for _ConditionalContent<>.TableColumnProvider()
{
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for _ConditionalContent<>.TableColumnProvider(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  uint64_t v3 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v3;
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for _ConditionalContent<>.TableColumnProvider(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  return a1;
}

__n128 __swift_memcpy100_8(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  long long v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  __n128 result = (__n128)a2[3];
  long long v5 = a2[4];
  long long v6 = a2[5];
  *(_DWORD *)(a1 + 96) = *((_DWORD *)a2 + 24);
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  *(__n128 *)(a1 + 48) = result;
  return result;
}

uint64_t assignWithTake for _ConditionalContent<>.TableColumnProvider(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_release();
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_release();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  return a1;
}

uint64_t getEnumTagSinglePayload for _ConditionalContent<>.TableColumnProvider(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 100)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for _ConditionalContent<>.TableColumnProvider(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 88) = 0;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_DWORD *)(result + 96) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 100) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 16) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 100) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t base witness table accessor for _AttributeBody in A?<A>.ChildTableColumn()
{
  return swift_getWitnessTable();
}

void type metadata accessor for MutableBox<CachedEnvironment>()
{
  if (!lazy cache variable for type metadata for MutableBox<CachedEnvironment>)
  {
    unint64_t v0 = type metadata accessor for MutableBox();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for MutableBox<CachedEnvironment>);
    }
  }
}

uint64_t partial apply for closure #1 in Optional<A>.ChildTableColumn.value.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return closure #1 in Optional<A>.ChildTableColumn.value.getter(a1, *(void *)(v2 + 16), a2);
}

uint64_t type metadata accessor for EmptyTableColumnContent.EmptyTableColumnList()
{
  return __swift_instantiateGenericMetadata();
}

unint64_t type metadata accessor for TableColumnList()
{
  unint64_t result = lazy cache variable for type metadata for TableColumnList;
  if (!lazy cache variable for type metadata for TableColumnList)
  {
    unint64_t result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for TableColumnList);
  }
  return result;
}

void type metadata accessor for External<TableColumnList>()
{
  if (!lazy cache variable for type metadata for External<TableColumnList>)
  {
    type metadata accessor for TableColumnList();
    unint64_t v0 = type metadata accessor for External();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for External<TableColumnList>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type External<TableColumnList> and conformance External<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type External<TableColumnList> and conformance External<A>;
  if (!lazy protocol witness table cache variable for type External<TableColumnList> and conformance External<A>)
  {
    type metadata accessor for External<TableColumnList>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type External<TableColumnList> and conformance External<A>);
  }
  return result;
}

ValueMetadata *type metadata accessor for ListControlGroupStyle()
{
  return &type metadata for ListControlGroupStyle;
}

uint64_t associated type witness table accessor for ControlGroupStyle.Body : View in ListControlGroupStyle()
{
  return swift_getOpaqueTypeConformance2();
}

void protocol witness for ControlGroupStyle.makeBody(configuration:) in conformance ListControlGroupStyle(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 256;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<Section<ControlGroupStyleConfiguration.Label, ControlGroupStyleConfiguration.Content, EmptyView>, _TraitWritingModifier<UseCompactSectionSpacingTraitKey>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<Section<ControlGroupStyleConfiguration.Label, ControlGroupStyleConfiguration.Content, EmptyView>, _TraitWritingModifier<UseCompactSectionSpacingTraitKey>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<Section<ControlGroupStyleConfiguration.Label, ControlGroupStyleConfiguration.Content, EmptyView>, _TraitWritingModifier<UseCompactSectionSpacingTraitKey>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<Section<ControlGroupStyleConfiguration.Label, ControlGroupStyleConfiguration.Content, EmptyView>, _TraitWritingModifier<UseCompactSectionSpacingTraitKey>>();
    lazy protocol witness table accessor for type Section<ControlGroupStyleConfiguration.Label, ControlGroupStyleConfiguration.Content, EmptyView> and conformance <> Section<A, B, C>();
    lazy protocol witness table accessor for type _TraitWritingModifier<UseCompactSectionSpacingTraitKey> and conformance _TraitWritingModifier<A>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<Section<ControlGroupStyleConfiguration.Label, ControlGroupStyleConfiguration.Content, EmptyView>, _TraitWritingModifier<UseCompactSectionSpacingTraitKey>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<Section<ControlGroupStyleConfiguration.Label, ControlGroupStyleConfiguration.Content, EmptyView>, _TraitWritingModifier<UseCompactSectionSpacingTraitKey>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<Section<ControlGroupStyleConfiguration.Label, ControlGroupStyleConfiguration.Content, EmptyView>, _TraitWritingModifier<UseCompactSectionSpacingTraitKey>>)
  {
    type metadata accessor for Section<ControlGroupStyleConfiguration.Label, ControlGroupStyleConfiguration.Content, EmptyView>();
    type metadata accessor for _TraitWritingModifier<UseCompactSectionSpacingTraitKey>();
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<Section<ControlGroupStyleConfiguration.Label, ControlGroupStyleConfiguration.Content, EmptyView>, _TraitWritingModifier<UseCompactSectionSpacingTraitKey>>);
    }
  }
}

void type metadata accessor for Section<ControlGroupStyleConfiguration.Label, ControlGroupStyleConfiguration.Content, EmptyView>()
{
  if (!lazy cache variable for type metadata for Section<ControlGroupStyleConfiguration.Label, ControlGroupStyleConfiguration.Content, EmptyView>)
  {
    unint64_t v0 = type metadata accessor for Section();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Section<ControlGroupStyleConfiguration.Label, ControlGroupStyleConfiguration.Content, EmptyView>);
    }
  }
}

void type metadata accessor for _TraitWritingModifier<UseCompactSectionSpacingTraitKey>()
{
  if (!lazy cache variable for type metadata for _TraitWritingModifier<UseCompactSectionSpacingTraitKey>)
  {
    unint64_t v0 = type metadata accessor for _TraitWritingModifier();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _TraitWritingModifier<UseCompactSectionSpacingTraitKey>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type Section<ControlGroupStyleConfiguration.Label, ControlGroupStyleConfiguration.Content, EmptyView> and conformance <> Section<A, B, C>()
{
  unint64_t result = lazy protocol witness table cache variable for type Section<ControlGroupStyleConfiguration.Label, ControlGroupStyleConfiguration.Content, EmptyView> and conformance <> Section<A, B, C>;
  if (!lazy protocol witness table cache variable for type Section<ControlGroupStyleConfiguration.Label, ControlGroupStyleConfiguration.Content, EmptyView> and conformance <> Section<A, B, C>)
  {
    type metadata accessor for Section<ControlGroupStyleConfiguration.Label, ControlGroupStyleConfiguration.Content, EmptyView>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Section<ControlGroupStyleConfiguration.Label, ControlGroupStyleConfiguration.Content, EmptyView> and conformance <> Section<A, B, C>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _TraitWritingModifier<UseCompactSectionSpacingTraitKey> and conformance _TraitWritingModifier<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type _TraitWritingModifier<UseCompactSectionSpacingTraitKey> and conformance _TraitWritingModifier<A>;
  if (!lazy protocol witness table cache variable for type _TraitWritingModifier<UseCompactSectionSpacingTraitKey> and conformance _TraitWritingModifier<A>)
  {
    type metadata accessor for _TraitWritingModifier<UseCompactSectionSpacingTraitKey>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _TraitWritingModifier<UseCompactSectionSpacingTraitKey> and conformance _TraitWritingModifier<A>);
  }
  return result;
}

uint64_t destroy for NavigationState(void *a1)
{
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  if (a1[5])
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  uint64_t result = a1[12];
  if (result)
  {
    if (result == 1) {
      return result;
    }
    swift_release();
    swift_release();
  }
  if (a1[14]) {
    swift_release();
  }
  uint64_t result = a1[17];
  if (result)
  {
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t initializeWithCopy for NavigationState(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  uint64_t v6 = *(void *)(a2 + 40);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  if (v6)
  {
    *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
    uint64_t v7 = *(void *)(a2 + 48);
    uint64_t v8 = *(void *)(a2 + 56);
    *(void *)(a1 + 40) = v6;
    *(void *)(a1 + 48) = v7;
    uint64_t v9 = *(void *)(a2 + 64);
    *(void *)(a1 + 56) = v8;
    *(void *)(a1 + 64) = v9;
    *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v10 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 48) = v10;
    *(_OWORD *)(a1 + 60) = *(_OWORD *)(a2 + 60);
  }
  uint64_t v11 = *(void *)(a2 + 96);
  if (v11 != 1)
  {
    *(void *)(a1 + 80) = *(void *)(a2 + 80);
    if (v11)
    {
      *(void *)(a1 + 88) = *(void *)(a2 + 88);
      *(void *)(a1 + 96) = v11;
      *(unsigned char *)(a1 + 104) = *(unsigned char *)(a2 + 104);
      swift_retain();
      swift_retain();
    }
    else
    {
      *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
      *(unsigned char *)(a1 + 104) = *(unsigned char *)(a2 + 104);
    }
    uint64_t v14 = *(void *)(a2 + 112);
    *(unsigned char *)(a1 + 105) = *(unsigned char *)(a2 + 105);
    if (v14)
    {
      uint64_t v15 = *(void *)(a2 + 120);
      *(void *)(a1 + 112) = v14;
      *(void *)(a1 + 120) = v15;
      swift_retain();
      uint64_t v16 = *(void *)(a2 + 136);
      if (v16)
      {
LABEL_11:
        *(void *)(a1 + 128) = *(void *)(a2 + 128);
        *(void *)(a1 + 136) = v16;
        *(unsigned char *)(a1 + 144) = *(unsigned char *)(a2 + 144);
        swift_retain();
        swift_retain();
LABEL_14:
        *(unsigned char *)(a1 + 145) = *(unsigned char *)(a2 + 145);
        return a1;
      }
    }
    else
    {
      *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
      uint64_t v16 = *(void *)(a2 + 136);
      if (v16) {
        goto LABEL_11;
      }
    }
    *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
    *(unsigned char *)(a1 + 144) = *(unsigned char *)(a2 + 144);
    goto LABEL_14;
  }
  long long v12 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = v12;
  *(_WORD *)(a1 + 144) = *(_WORD *)(a2 + 144);
  long long v13 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 96) = v13;
  return a1;
}

uint64_t assignWithCopy for NavigationState(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_retain();
  swift_release();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = (_OWORD *)(a1 + 32);
  uint64_t v5 = (_OWORD *)(a2 + 32);
  uint64_t v6 = *(void *)(a2 + 40);
  if (*(void *)(a1 + 40))
  {
    if (v6)
    {
      *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
      *(void *)(a1 + 40) = *(void *)(a2 + 40);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 48) = *(void *)(a2 + 48);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 56) = *(void *)(a2 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 64) = *(void *)(a2 + 64);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
    }
    else
    {
      outlined destroy of NavigationListState(a1 + 32);
      long long v7 = *(_OWORD *)(a2 + 60);
      long long v8 = *(_OWORD *)(a2 + 48);
      *uint64_t v4 = *v5;
      *(_OWORD *)(a1 + 48) = v8;
      *(_OWORD *)(a1 + 60) = v7;
    }
  }
  else if (v6)
  {
    *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
    *(void *)(a1 + 40) = *(void *)(a2 + 40);
    *(void *)(a1 + 48) = *(void *)(a2 + 48);
    *(void *)(a1 + 56) = *(void *)(a2 + 56);
    *(void *)(a1 + 64) = *(void *)(a2 + 64);
    *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v9 = *v5;
    long long v10 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 60) = *(_OWORD *)(a2 + 60);
    *uint64_t v4 = v9;
    *(_OWORD *)(a1 + 48) = v10;
  }
  uint64_t v11 = (_OWORD *)(a1 + 80);
  long long v12 = (_OWORD *)(a2 + 80);
  uint64_t v13 = *(void *)(a1 + 96);
  uint64_t v14 = *(void *)(a2 + 96);
  if (v13 != 1)
  {
    if (v14 == 1)
    {
      outlined destroy of NavigationSplitViewState(a1 + 80);
      *uint64_t v11 = *v12;
      long long v19 = *(_OWORD *)(a2 + 112);
      long long v18 = *(_OWORD *)(a2 + 128);
      long long v20 = *(_OWORD *)(a2 + 96);
      *(_WORD *)(a1 + 144) = *(_WORD *)(a2 + 144);
      *(_OWORD *)(a1 + 112) = v19;
      *(_OWORD *)(a1 + 128) = v18;
      *(_OWORD *)(a1 + 96) = v20;
      return a1;
    }
    *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
    *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
    uint64_t v21 = (_OWORD *)(a1 + 88);
    int v22 = (_OWORD *)(a2 + 88);
    uint64_t v23 = *(void *)(a2 + 96);
    if (v13)
    {
      if (v23)
      {
        *(void *)(a1 + 88) = *(void *)(a2 + 88);
        swift_retain();
        swift_release();
        *(void *)(a1 + 96) = *(void *)(a2 + 96);
        swift_retain();
        swift_release();
        *(unsigned char *)(a1 + 104) = *(unsigned char *)(a2 + 104);
      }
      else
      {
        outlined destroy of Binding<NavigationSplitViewColumn>(a1 + 88, (uint64_t)&lazy cache variable for type metadata for Binding<NavigationSplitViewColumn>, (uint64_t)&type metadata for NavigationSplitViewColumn, MEMORY[0x1E4F41638], (uint64_t (*)(void))type metadata accessor for Binding<NavigationSplitViewColumn>);
        char v28 = *(unsigned char *)(a2 + 104);
        *uint64_t v21 = *v22;
        *(unsigned char *)(a1 + 104) = v28;
      }
    }
    else if (v23)
    {
      *(void *)(a1 + 88) = *(void *)(a2 + 88);
      *(void *)(a1 + 96) = *(void *)(a2 + 96);
      *(unsigned char *)(a1 + 104) = *(unsigned char *)(a2 + 104);
      swift_retain();
      swift_retain();
    }
    else
    {
      long long v29 = *v22;
      *(unsigned char *)(a1 + 104) = *(unsigned char *)(a2 + 104);
      *uint64_t v21 = v29;
    }
    uint64_t v30 = *(void *)(a1 + 112);
    *(unsigned char *)(a1 + 105) = *(unsigned char *)(a2 + 105);
    uint64_t v31 = *(void *)(a2 + 112);
    if (v30)
    {
      if (v31)
      {
        uint64_t v32 = *(void *)(a2 + 120);
        *(void *)(a1 + 112) = v31;
        *(void *)(a1 + 120) = v32;
        swift_retain();
        swift_release();
        goto LABEL_35;
      }
      swift_release();
    }
    else if (v31)
    {
      uint64_t v33 = *(void *)(a2 + 120);
      *(void *)(a1 + 112) = v31;
      *(void *)(a1 + 120) = v33;
      swift_retain();
      goto LABEL_35;
    }
    *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
LABEL_35:
    uint64_t v34 = (_OWORD *)(a1 + 128);
    uint64_t v35 = (_OWORD *)(a2 + 128);
    uint64_t v36 = *(void *)(a2 + 136);
    if (*(void *)(a1 + 136))
    {
      if (v36)
      {
        *(void *)(a1 + 128) = *(void *)(a2 + 128);
        swift_retain();
        swift_release();
        *(void *)(a1 + 136) = *(void *)(a2 + 136);
        swift_retain();
        swift_release();
        *(unsigned char *)(a1 + 144) = *(unsigned char *)(a2 + 144);
      }
      else
      {
        outlined destroy of Binding<NavigationSplitViewColumn>(a1 + 128, (uint64_t)&lazy cache variable for type metadata for Binding<NavigationSplitViewColumn>, (uint64_t)&type metadata for NavigationSplitViewColumn, MEMORY[0x1E4F41638], (uint64_t (*)(void))type metadata accessor for Binding<NavigationSplitViewColumn>);
        char v37 = *(unsigned char *)(a2 + 144);
        *uint64_t v34 = *v35;
        *(unsigned char *)(a1 + 144) = v37;
      }
      goto LABEL_42;
    }
    if (!v36)
    {
      long long v38 = *v35;
      *(unsigned char *)(a1 + 144) = *(unsigned char *)(a2 + 144);
      *uint64_t v34 = v38;
      goto LABEL_42;
    }
    goto LABEL_39;
  }
  if (v14 != 1)
  {
    *(void *)(a1 + 80) = *(void *)(a2 + 80);
    if (*(void *)(a2 + 96))
    {
      *(void *)(a1 + 88) = *(void *)(a2 + 88);
      *(void *)(a1 + 96) = *(void *)(a2 + 96);
      *(unsigned char *)(a1 + 104) = *(unsigned char *)(a2 + 104);
      swift_retain();
      swift_retain();
    }
    else
    {
      long long v24 = *(_OWORD *)(a2 + 88);
      *(unsigned char *)(a1 + 104) = *(unsigned char *)(a2 + 104);
      *(_OWORD *)(a1 + 88) = v24;
    }
    *(unsigned char *)(a1 + 105) = *(unsigned char *)(a2 + 105);
    uint64_t v25 = *(void *)(a2 + 112);
    if (v25)
    {
      uint64_t v26 = *(void *)(a2 + 120);
      *(void *)(a1 + 112) = v25;
      *(void *)(a1 + 120) = v26;
      swift_retain();
      if (!*(void *)(a2 + 136)) {
        goto LABEL_25;
      }
    }
    else
    {
      *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
      if (!*(void *)(a2 + 136))
      {
LABEL_25:
        long long v27 = *(_OWORD *)(a2 + 128);
        *(unsigned char *)(a1 + 144) = *(unsigned char *)(a2 + 144);
        *(_OWORD *)(a1 + 128) = v27;
LABEL_42:
        *(unsigned char *)(a1 + 145) = *(unsigned char *)(a2 + 145);
        return a1;
      }
    }
LABEL_39:
    *(void *)(a1 + 128) = *(void *)(a2 + 128);
    *(void *)(a1 + 136) = *(void *)(a2 + 136);
    *(unsigned char *)(a1 + 144) = *(unsigned char *)(a2 + 144);
    swift_retain();
    swift_retain();
    goto LABEL_42;
  }
  *uint64_t v11 = *v12;
  long long v15 = *(_OWORD *)(a2 + 96);
  long long v16 = *(_OWORD *)(a2 + 112);
  long long v17 = *(_OWORD *)(a2 + 128);
  *(_WORD *)(a1 + 144) = *(_WORD *)(a2 + 144);
  *(_OWORD *)(a1 + 112) = v16;
  *(_OWORD *)(a1 + 128) = v17;
  *(_OWORD *)(a1 + 96) = v15;
  return a1;
}

uint64_t outlined destroy of NavigationListState(uint64_t a1)
{
  return a1;
}

uint64_t outlined destroy of NavigationSplitViewState(uint64_t a1)
{
  return a1;
}

__n128 __swift_memcpy146_8(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  long long v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  __n128 result = *(__n128 *)(a2 + 96);
  long long v7 = *(_OWORD *)(a2 + 112);
  long long v8 = *(_OWORD *)(a2 + 128);
  *(_WORD *)(a1 + 144) = *(_WORD *)(a2 + 144);
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 128) = v8;
  *(__n128 *)(a1 + 96) = result;
  return result;
}

uint64_t assignWithTake for NavigationState(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_release();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_release();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRelease();
  if (*(void *)(a1 + 40))
  {
    uint64_t v4 = *(void *)(a2 + 40);
    if (v4)
    {
      *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
      *(void *)(a1 + 40) = v4;
      swift_bridgeObjectRelease();
      *(void *)(a1 + 48) = *(void *)(a2 + 48);
      swift_bridgeObjectRelease();
      *(void *)(a1 + 56) = *(void *)(a2 + 56);
      swift_bridgeObjectRelease();
      *(void *)(a1 + 64) = *(void *)(a2 + 64);
      swift_bridgeObjectRelease();
      *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
      goto LABEL_6;
    }
    outlined destroy of NavigationListState(a1 + 32);
  }
  long long v5 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v5;
  *(_OWORD *)(a1 + 60) = *(_OWORD *)(a2 + 60);
LABEL_6:
  uint64_t v6 = *(void *)(a1 + 96);
  if (v6 != 1)
  {
    uint64_t v7 = *(void *)(a2 + 96);
    if (v7 == 1)
    {
      outlined destroy of NavigationSplitViewState(a1 + 80);
      goto LABEL_9;
    }
    *(void *)(a1 + 80) = *(void *)(a2 + 80);
    if (v6)
    {
      if (v7)
      {
        *(void *)(a1 + 88) = *(void *)(a2 + 88);
        swift_release();
        *(void *)(a1 + 96) = v7;
        swift_release();
        *(unsigned char *)(a1 + 104) = *(unsigned char *)(a2 + 104);
        goto LABEL_15;
      }
      outlined destroy of Binding<NavigationSplitViewColumn>(a1 + 88, (uint64_t)&lazy cache variable for type metadata for Binding<NavigationSplitViewColumn>, (uint64_t)&type metadata for NavigationSplitViewColumn, MEMORY[0x1E4F41638], (uint64_t (*)(void))type metadata accessor for Binding<NavigationSplitViewColumn>);
    }
    *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
    *(unsigned char *)(a1 + 104) = *(unsigned char *)(a2 + 104);
LABEL_15:
    uint64_t v10 = *(void *)(a2 + 112);
    uint64_t v11 = *(void *)(a1 + 112);
    *(unsigned char *)(a1 + 105) = *(unsigned char *)(a2 + 105);
    if (v11)
    {
      if (v10)
      {
        uint64_t v12 = *(void *)(a2 + 120);
        *(void *)(a1 + 112) = v10;
        *(void *)(a1 + 120) = v12;
        swift_release();
        goto LABEL_22;
      }
      swift_release();
    }
    else if (v10)
    {
      uint64_t v13 = *(void *)(a2 + 120);
      *(void *)(a1 + 112) = v10;
      *(void *)(a1 + 120) = v13;
      goto LABEL_22;
    }
    *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
LABEL_22:
    if (*(void *)(a1 + 136))
    {
      uint64_t v14 = *(void *)(a2 + 136);
      if (v14)
      {
        *(void *)(a1 + 128) = *(void *)(a2 + 128);
        swift_release();
        *(void *)(a1 + 136) = v14;
        swift_release();
        *(unsigned char *)(a1 + 144) = *(unsigned char *)(a2 + 144);
LABEL_27:
        *(unsigned char *)(a1 + 145) = *(unsigned char *)(a2 + 145);
        return a1;
      }
      outlined destroy of Binding<NavigationSplitViewColumn>(a1 + 128, (uint64_t)&lazy cache variable for type metadata for Binding<NavigationSplitViewColumn>, (uint64_t)&type metadata for NavigationSplitViewColumn, MEMORY[0x1E4F41638], (uint64_t (*)(void))type metadata accessor for Binding<NavigationSplitViewColumn>);
    }
    *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
    *(unsigned char *)(a1 + 144) = *(unsigned char *)(a2 + 144);
    goto LABEL_27;
  }
LABEL_9:
  long long v8 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = v8;
  *(_WORD *)(a1 + 144) = *(_WORD *)(a2 + 144);
  long long v9 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 96) = v9;
  return a1;
}

uint64_t getEnumTagSinglePayload for NavigationState(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 146)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for NavigationState(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 136) = 0;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_WORD *)(result + 144) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 146) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 24) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 146) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t outlined copy of NavigationColumnState.ReplacedRoot(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a1 < 0)
  {
    swift_retain();
    swift_retain();
    outlined copy of Text.LineStyle?(a3, a4);
  }

  return swift_retain();
}

uint64_t outlined consume of NavigationColumnState.ReplacedRoot(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a1 < 0)
  {
    swift_release();
    swift_release();
    outlined consume of Text.LineStyle?(a3, a4);
  }

  return swift_release();
}

void *__swift_memcpy392_8(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x188uLL);
}

ValueMetadata *type metadata accessor for NavigationState.StackContent()
{
  return &type metadata for NavigationState.StackContent;
}

void (*specialized Dictionary.subscript.modify(void *a1, uint64_t a2))(uint64_t a1)
{
  uint64_t v4 = malloc(0x50uLL);
  *a1 = v4;
  outlined init with copy of ToolbarPlacement.Role(a2, (uint64_t)v4);
  v4[9] = specialized Dictionary._Variant.subscript.modify(v4 + 5, (uint64_t)v4);
  return Dictionary.subscript.modifyspecialized ;
}

{
  void *v4;

  uint64_t v4 = malloc(0x58uLL);
  *a1 = v4;
  v4[9] = a2;
  outlined init with take of TableColumnCustomizationID.Base(a2, (uint64_t)v4);
  outlined retain of TableColumnCustomizationID.Base((uint64_t)v4, (void (*)(void, void, void, void, void))outlined copy of TableColumnCustomizationID.Base);
  v4[10] = specialized Dictionary._Variant.subscript.modify(v4 + 5, a2);
  return Dictionary.subscript.modifyspecialized ;
}

{
  void *v4;

  uint64_t v4 = malloc(0xA8uLL);
  *a1 = v4;
  outlined init with copy of IdentifiedDocumentGroupConfiguration(a2, (uint64_t)v4);
  v4[20] = specialized Dictionary._Variant.subscript.modify(v4 + 16, (uint64_t)v4);
  return Dictionary.subscript.modifyspecialized ;
}

void Dictionary.subscript.modifyspecialized (uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  (*(void (**)(void))(*(void *)a1 + 72))();
  outlined destroy of ToolbarPlacement.Role((uint64_t)v1);

  free(v1);
}

{
  void *v1;
  uint64_t v2;
  uint64_t vars8;

  uint64_t v1 = *(void **)a1;
  unint64_t v2 = *(void *)(*(void *)a1 + 72);
  (*(void (**)(void))(*(void *)a1 + 80))();
  outlined retain of TableColumnCustomizationID.Base(v2, (void (*)(void, void, void, void, void))outlined consume of TableColumnCustomizationID.Base);

  free(v1);
}

{
  void *v1;
  uint64_t vars8;

  uint64_t v1 = *(void **)a1;
  (*(void (**)(void))(*(void *)a1 + 160))();
  outlined destroy of IdentifiedDocumentGroupConfiguration((uint64_t)v1);

  free(v1);
}

void (*specialized Dictionary.subscript.modify(void *a1, uint64_t a2, uint64_t a3, char a4))(void *a1)
{
  long long v8 = malloc(0x40uLL);
  *a1 = v8;
  v8[56] = a4;
  *((void *)v8 + 4) = a2;
  *((void *)v8 + 5) = a3;
  outlined copy of TabCustomizationID.Base();
  *((void *)v8 + 6) = specialized Dictionary._Variant.subscript.modify(v8, a2, a3, a4 & 1);
  return Dictionary.subscript.modifyspecialized ;
}

uint64_t (*specialized Dictionary.subscript.modify(void *a1, unint64_t a2, unint64_t a3))()
{
  uint64_t v6 = malloc(0x28uLL);
  *a1 = v6;
  v6[4] = specialized Dictionary._Variant.subscript.modify(v6, a2, a3);
  return Dictionary.subscript.modifyspecialized ;
}

void (*specialized Dictionary.subscript.modify(void *a1, uint64_t a2, uint64_t a3, Swift::UInt a4, unsigned __int8 a5))(void *a1)
{
  uint64_t v10 = malloc(0x30uLL);
  *a1 = v10;
  _OWORD v10[4] = a3;
  swift_bridgeObjectRetain();
  v10[5] = specialized Dictionary._Variant.subscript.modify(v10, a2, a3, a4, a5);
  return Dictionary.subscript.modifyspecialized ;
}

uint64_t (*specialized Dictionary.subscript.modify(void *a1, Swift::UInt32 a2))()
{
  uint64_t v4 = malloc(0x28uLL);
  *a1 = v4;
  v4[4] = specialized Dictionary._Variant.subscript.modify(v4, a2);
  return Dictionary.subscript.modifyspecialized ;
}

uint64_t NavigationState.isPresentingView(_:from:)(uint64_t *a1, uint64_t a2)
{
  outlined init with take of NavigationRequest.KeyKind(a2, (uint64_t)v86);
  Swift::UInt v5 = v86[0];
  Swift::UInt v6 = v86[2];
  Swift::UInt v7 = v86[3];
  unint64_t v8 = v86[4];
  uint64_t v9 = *a1;
  uint64_t v77 = a1[1];
  Swift::UInt v78 = v86[1];
  uint64_t v73 = a1[3];
  uint64_t v79 = *(void *)(v2 + 24);
  uint64_t v80 = a1[2];
  outlined init with take of NavigationRequest.KeyKind(a2, (uint64_t)v87);
  if ((unint64_t)v88 >> 62)
  {
    if ((unint64_t)v88 >> 62 != 1) {
      return 0;
    }
    *(void *)&long long v88 = v88 & 0x3FFFFFFFFFFFFFFFLL;
    v89[0] = v87[0];
    v89[1] = v87[1];
    v89[2] = v88;
    outlined init with take of NavigationState.StackContent.Key?((uint64_t)v89 + 8, (uint64_t)v90, &lazy cache variable for type metadata for NavigationState.StackContent.Key?, (uint64_t)&type metadata for NavigationState.StackContent.Key);
    outlined init with take of NavigationState.StackContent.Key?((uint64_t)v90, (uint64_t)v91, &lazy cache variable for type metadata for NavigationState.StackContent.Key?, (uint64_t)&type metadata for NavigationState.StackContent.Key);
    unsigned __int8 v10 = v92;
    if (v92 == 6) {
      return 0;
    }
    uint64_t v12 = (Swift::UInt *)v91;
  }
  else
  {
    *(void *)&long long v88 = v88 & 0x3FFFFFFFFFFFFFFFLL;
    uint64_t v12 = (Swift::UInt *)v87;
    unsigned __int8 v10 = BYTE8(v87[0]);
  }
  Swift::UInt v13 = v12[2];
  unint64_t v14 = v8 >> 62;
  Swift::UInt v15 = *v12;
  uint64_t v66 = v9;
  while (1)
  {
    if (!*(void *)(v79 + 16)) {
      return 0;
    }
    char v71 = v14;
    unint64_t v16 = specialized __RawDictionaryStorage.find<A>(_:)(v15, v10, v13);
    if ((v17 & 1) == 0) {
      return 0;
    }
    memcpy(__dst, (const void *)(*(void *)(v79 + 56) + 304 * v16), 0x12BuLL);
    uint64_t v18 = __dst[14];
    uint64_t v19 = __dst[15];
    uint64_t v20 = __dst[16];
    uint64_t v21 = __dst[17];
    uint64_t v22 = __dst[18];
    uint64_t v72 = __dst[19];
    uint64_t v74 = __dst[22];
    uint64_t v75 = __dst[21];
    uint64_t v76 = __dst[20];
    Swift::UInt v68 = v7;
    if ((__dst[21] & 0x8000000000000000) == 0) {
      break;
    }
    if (__dst[14] < 0 && (__dst[14] & 0xF000000000000007) != 0xF000000000000007)
    {
      if (__dst[15] && v66)
      {
        long long v64 = *(uint64_t (**)(uint64_t))(*(void *)__dst[15] + 176);
        uint64_t v70 = __dst[14];
        outlined retain of NavigationColumnState(__dst);
        outlined copy of NavigationColumnState.ColumnContent(v18, v19, v20, v21, v22, v72, v76, v75);
        swift_retain();
        swift_retain();
        outlined copy of Text.LineStyle?(v20, v21);
        swift_retain();
        uint64_t v28 = v20;
        char v29 = v64(v66);
        swift_release();
        swift_release_n();
        outlined consume of Text.LineStyle?(v28, v21);
        outlined consume of NavigationColumnState.ColumnContent(v70, v19, v28, v21, v22, v72, v76, v75);
        outlined release of NavigationColumnState(__dst);
        if (v29) {
          return 1;
        }
      }
      else if (__dst[17] == 1 || v80 == 1)
      {
        if (__dst[18] == v73) {
          return 1;
        }
      }
      else
      {
        uint64_t v83 = __dst[16];
        uint64_t v84 = __dst[17];
        uint64_t v81 = v77;
        uint64_t v82 = v80;
        if (MEMORY[0x18C10D6E0](&v83, &v81)) {
          return 1;
        }
      }
    }
LABEL_45:
    if (v71)
    {
      if (v71 != 1) {
        return 0;
      }
      Swift::UInt v15 = v78;
      Swift::UInt v78 = v6;
      Swift::UInt v45 = v68;
      if (v6 == 6) {
        return 0;
      }
    }
    else
    {
      Swift::UInt v15 = v5;
      Swift::UInt v45 = v6;
    }
    unsigned __int8 v10 = 2;
    switch(v78)
    {
      case 1uLL:
        break;
      case 2uLL:
      case 3uLL:
      case 4uLL:
      case 5uLL:
        return 0;
      default:
        if (v45 == 3) {
          unsigned __int8 v10 = 1;
        }
        else {
          unsigned __int8 v10 = 2;
        }
        break;
    }
    LOBYTE(v14) = 0;
    Swift::UInt v78 = v10;
    Swift::UInt v13 = v45;
    Swift::UInt v5 = v15;
    Swift::UInt v6 = v45;
    Swift::UInt v7 = 0;
  }
  Swift::UInt v63 = v5;
  uint64_t v23 = __dst[17];
  Swift::UInt v67 = v6;
  uint64_t v65 = __dst[16];
  uint64_t v69 = __dst[14];
  if ((~__dst[14] & 0xF000000000000007) == 0)
  {
    uint64_t v24 = __dst[14];
    outlined retain of NavigationColumnState(__dst);
    uint64_t v25 = v74;
    uint64_t v26 = v21;
    uint64_t v27 = v22;
    outlined copy of NavigationColumnState.ColumnContent(v24, v19, v20, v26, v22, v72, v76, v75);
LABEL_23:
    uint64_t v35 = v66;
    goto LABEL_24;
  }
  uint64_t v27 = __dst[18];
  if ((__dst[14] & 0x8000000000000000) == 0)
  {
    outlined retain of NavigationColumnState(__dst);
    uint64_t v30 = v19;
    outlined copy of NavigationColumnState.ColumnContent(v18, v19, v20, v23, v27, v72, v76, v75);
    uint64_t v31 = v18;
    uint64_t v25 = v74;
    uint64_t v32 = v19;
    uint64_t v33 = v20;
    uint64_t v34 = v23;
LABEL_22:
    uint64_t v19 = v30;
    outlined copy of NavigationColumnState.ReplacedRoot?(v31, v32, v33, v34);
    goto LABEL_23;
  }
  if (__dst[15] && v66)
  {
    uint64_t v46 = __dst[17];
    uint64_t v60 = *(uint64_t (**)(uint64_t))(*(void *)__dst[15] + 176);
    outlined retain of NavigationColumnState(__dst);
    uint64_t v47 = v23;
    uint64_t v48 = v22;
    outlined copy of NavigationColumnState.ColumnContent(v18, v19, v20, v47, v22, v72, v76, v75);
    uint64_t v49 = v18;
    uint64_t v25 = v74;
    outlined copy of NavigationColumnState.ReplacedRoot?(v49, v19, v20, v46);
    swift_retain();
    outlined copy of Text.LineStyle?(v20, v46);
    swift_retain();
    uint64_t v35 = v66;
    uint64_t v50 = swift_retain();
    uint64_t v51 = v20;
    char v52 = v60(v50);
    swift_release();
    swift_release_n();
    uint64_t v27 = v48;
    uint64_t v23 = v46;
    outlined consume of Text.LineStyle?(v51, v46);
    if (v52) {
      goto LABEL_73;
    }
  }
  else
  {
    if (__dst[17] == 1 || v80 == 1)
    {
      if (__dst[18] == v73) {
        return 1;
      }
      outlined retain of NavigationColumnState(__dst);
      uint64_t v27 = v22;
      uint64_t v30 = v19;
      outlined copy of NavigationColumnState.ColumnContent(v18, v19, v20, v23, v22, v72, v76, v75);
      uint64_t v31 = v18;
      uint64_t v25 = v74;
      uint64_t v32 = v19;
      uint64_t v33 = v20;
      uint64_t v34 = v23;
      goto LABEL_22;
    }
    uint64_t v83 = __dst[16];
    uint64_t v84 = __dst[17];
    uint64_t v81 = v77;
    uint64_t v82 = v80;
    outlined retain of NavigationColumnState(__dst);
    outlined copy of NavigationColumnState.ColumnContent(v18, v19, v20, v23, v27, v72, v76, v75);
    uint64_t v53 = v18;
    uint64_t v25 = v74;
    outlined copy of NavigationColumnState.ReplacedRoot?(v53, v19, v20, v23);
    uint64_t v35 = v66;
    if (MEMORY[0x18C10D6E0](&v83, &v81))
    {
LABEL_73:
      uint64_t v56 = v69;
      uint64_t v54 = v65;
      uint64_t v55 = v72;
      uint64_t v58 = v76;
      outlined consume of NavigationColumnState.ReplacedRoot?(v69, v19, v65, v23);
      goto LABEL_71;
    }
  }
LABEL_24:
  uint64_t v36 = *(void *)(v25 + 16);
  if (!v36)
  {
LABEL_44:
    outlined consume of NavigationColumnState.ReplacedRoot?(v69, v19, v65, v23);
    outlined consume of NavigationColumnState.ColumnContent(v69, v19, v65, v23, v27, v72, v76, v75);
    outlined release of NavigationColumnState(__dst);
    Swift::UInt v5 = v63;
    goto LABEL_45;
  }
  uint64_t v61 = v27;
  uint64_t v62 = v19;
  uint64_t v59 = v23;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  char v37 = (void *)(v25 + 40);
  uint64_t v38 = v80;
  while (1)
  {
    uint64_t v40 = v37[1];
    uint64_t v41 = v37[2];
    if (!*v37 || v35 == 0) {
      break;
    }
    int v39 = *(uint64_t (**)(uint64_t))(*(void *)*v37 + 176);
    swift_retain();
    swift_retain();
    swift_retain();
    outlined copy of Text.LineStyle?(v40, v41);
    swift_retain();
    swift_retain();
    outlined copy of Text.LineStyle?(v40, v41);
    swift_retain();
    uint64_t v38 = v80;
    LOBYTE(v39) = v39(v35);
    swift_release();
    swift_release_n();
    outlined consume of Text.LineStyle?(v40, v41);
    if (v39) {
      goto LABEL_70;
    }
LABEL_27:
    swift_release();
    swift_release();
    outlined consume of Text.LineStyle?(v40, v41);
    swift_release();
LABEL_28:
    v37 += 7;
    if (!--v36)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      Swift::UInt v6 = v67;
      uint64_t v23 = v59;
      uint64_t v27 = v61;
      uint64_t v19 = v62;
      goto LABEL_44;
    }
  }
  if (v41 != 1 && v38 != 1)
  {
    uint64_t v83 = v37[1];
    uint64_t v84 = v41;
    uint64_t v81 = v77;
    uint64_t v82 = v38;
    swift_retain();
    swift_retain();
    outlined copy of Text.LineStyle?(v40, v41);
    swift_retain();
    char v44 = MEMORY[0x18C10D6E0](&v83, &v81);
    if (v44) {
      goto LABEL_70;
    }
    goto LABEL_27;
  }
  if (v37[3] != v73) {
    goto LABEL_28;
  }
  swift_retain();
  swift_retain();
  outlined copy of Text.LineStyle?(v40, v41);
  swift_retain();
LABEL_70:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v54 = v65;
  uint64_t v55 = v72;
  outlined consume of NavigationColumnState.ReplacedRoot?(v69, v62, v65, v59);
  uint64_t v56 = v69;
  swift_release();
  uint64_t v27 = v61;
  uint64_t v23 = v59;
  uint64_t v19 = v62;
  swift_release();
  uint64_t v57 = v41;
  uint64_t v58 = v76;
  outlined consume of Text.LineStyle?(v40, v57);
  swift_release();
LABEL_71:
  outlined consume of NavigationColumnState.ColumnContent(v56, v19, v54, v23, v27, v55, v58, v75);
  outlined release of NavigationColumnState(__dst);
  return 1;
}

uint64_t NavigationState.StackContent.topKey.getter()
{
  outlined init with take of NavigationState.Base(v0, __src);
  outlined init with take of NavigationState.Base(__src, v25);
  int v1 = _s7SwiftUI15NavigationStateV4Base33_D6901E90061344656248AB2898527223LLOWOg((uint64_t)v25);
  if (!v1) {
    return *(void *)_s7SwiftUI15NavigationStateV4Base33_D6901E90061344656248AB2898527223LLOWOj0_((uint64_t)v25);
  }
  if (v1 == 1)
  {
    uint64_t v2 = (uint64_t *)_s7SwiftUI15NavigationStateV4Base33_D6901E90061344656248AB2898527223LLOWOj0_((uint64_t)v25);
    uint64_t v3 = v2[38];
    outlined init with take of NavigationState.Base(__src, __dst);
    uint64_t v4 = (uint64_t *)_s7SwiftUI15NavigationStateV4Base33_D6901E90061344656248AB2898527223LLOWOj0_((uint64_t)__dst);
    outlined retain of (NavigationColumnState, precedingDestinations: ResolvedNavigationDestinations?)(v4);
    outlined consume of ResolvedNavigationDestinations?(v3);
    outlined release of NavigationColumnState(v2);
    return v2[2];
  }
  uint64_t v6 = _s7SwiftUI15NavigationStateV4Base33_D6901E90061344656248AB2898527223LLOWOj0_((uint64_t)v25);
  uint64_t v7 = *(void *)v6;
  uint64_t v9 = *(void *)(v6 + 16);
  uint64_t v10 = *(void *)(v6 + 24);
  uint64_t v11 = *(void *)(v6 + 32);
  uint64_t v12 = *(void *)(v6 + 40);
  uint64_t v13 = *(void *)(v6 + 48);
  uint64_t v14 = *(void *)(v6 + 56);
  uint64_t v15 = *(void *)(v6 + 64);
  unsigned __int16 v16 = *(_WORD *)(v6 + 72);
  v22[0] = *(void *)(v6 + 8);
  uint64_t v8 = v22[0];
  v22[1] = v9;
  _OWORD v22[2] = v10;
  void v22[3] = v11;
  unsigned char v22[4] = v12;
  v22[5] = v13;
  v22[6] = v14;
  v22[7] = v15;
  unsigned __int16 v23 = v16;
  uint64_t v19 = v9;
  uint64_t v20 = *(void *)(v7 + 16);
  outlined retain of NavigationState.Base((uint64_t)__src, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))outlined copy of NavigationState.Base);
  swift_bridgeObjectRetain();
  outlined copy of NavigationSplitViewState?(v22[0], v9, v10, v11, v12, v13, v14, v15, v16, (void (*)(uint64_t, uint64_t, uint64_t))outlined copy of Binding<NavigationSplitViewColumn>?, (void (*)(uint64_t, uint64_t))outlined copy of AppIntentExecutor?);
  unint64_t v17 = specialized BidirectionalCollection.lastIndex(where:)(0, v20, v7, (uint64_t)v22);
  LOBYTE(v20) = v18;
  outlined copy of NavigationSplitViewState?(v8, v19, v10, v11, v12, v13, v14, v15, v16, (void (*)(uint64_t, uint64_t, uint64_t))outlined consume of Binding<NavigationSplitViewColumn>?, (void (*)(uint64_t, uint64_t))outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?);
  swift_bridgeObjectRelease();
  if (v20)
  {
LABEL_12:
    __break(1u);
    JUMPOUT(0x1876E825CLL);
  }
  if ((v17 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_11;
  }
  if (v17 >= *(void *)(v7 + 16))
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  memcpy(__dst, (const void *)(v7 + 304 * v17 + 32), 0x12BuLL);
  outlined retain of NavigationColumnState(__dst);
  outlined copy of NavigationSplitViewState?(v8, v19, v10, v11, v12, v13, v14, v15, v16, (void (*)(uint64_t, uint64_t, uint64_t))outlined consume of Binding<NavigationSplitViewColumn>?, (void (*)(uint64_t, uint64_t))outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?);
  swift_bridgeObjectRelease();
  outlined release of NavigationColumnState(__dst);
  return __dst[2];
}

uint64_t NavigationState.StackContent.canPop.getter()
{
  memcpy(v50, v0, sizeof(v50));
  outlined init with take of NavigationState.Base(v50, v51);
  int v1 = _s7SwiftUI15NavigationStateV4Base33_D6901E90061344656248AB2898527223LLOWOg((uint64_t)v51);
  if (!v1)
  {
LABEL_8:
    _s7SwiftUI15NavigationStateV4Base33_D6901E90061344656248AB2898527223LLOWOj0_((uint64_t)v51);
    outlined retain of NavigationState.Base((uint64_t)v50, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))outlined consume of NavigationState.Base);
    goto LABEL_9;
  }
  if (v1 != 1)
  {
    uint64_t v21 = _s7SwiftUI15NavigationStateV4Base33_D6901E90061344656248AB2898527223LLOWOj0_((uint64_t)v51);
    uint64_t v46 = (uint64_t (*)(uint64_t))&v37;
    uint64_t v22 = *(void *)v21;
    uint64_t v23 = *(void *)(v21 + 8);
    uint64_t v24 = *(void *)(v21 + 16);
    uint64_t v25 = *(void *)(v21 + 24);
    uint64_t v43 = v23;
    uint64_t v44 = v24;
    uint64_t v26 = *(void *)(v21 + 32);
    uint64_t v27 = *(void *)(v21 + 40);
    uint64_t v28 = *(void *)(v21 + 48);
    uint64_t v29 = *(void *)(v21 + 56);
    uint64_t v30 = *(void *)(v21 + 64);
    unsigned __int16 v31 = *(_WORD *)(v21 + 72);
    v48[0] = v23;
    v48[1] = v24;
    v48[2] = v25;
    v48[3] = v26;
    void v48[4] = v27;
    v48[5] = v28;
    v48[6] = v29;
    v48[7] = v30;
    unsigned __int16 v49 = v31;
    uint64_t v47 = v22;
    uint64_t v45 = *(void *)(v22 + 16);
    MEMORY[0x1F4188790](v21);
    uint64_t v35 = &v47;
    uint64_t v36 = v48;
    outlined retain of NavigationState.Base((uint64_t)v50, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))outlined copy of NavigationState.Base);
    uint64_t v32 = v23;
    uint64_t v33 = v44;
    outlined copy of NavigationSplitViewState?(v32, v44, v25, v26, v27, v28, v29, v30, v31, (void (*)(uint64_t, uint64_t, uint64_t))outlined copy of Binding<NavigationSplitViewColumn>?, (void (*)(uint64_t, uint64_t))outlined copy of AppIntentExecutor?);
    uint64_t v20 = (uint64_t)specialized Sequence.reduce<A>(_:_:)(0, (void *(*)(void **__return_ptr, void **, uint64_t *))partial apply for specialized closure #1 in Collection<>.collapsedItemCount<A>(within:splitViewState:), (uint64_t)&v34, 0, v45);
    outlined copy of NavigationSplitViewState?(v43, v33, v25, v26, v27, v28, v29, v30, v31, (void (*)(uint64_t, uint64_t, uint64_t))outlined consume of Binding<NavigationSplitViewColumn>?, (void (*)(uint64_t, uint64_t))outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?);
    outlined retain of NavigationState.Base((uint64_t)v50, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))outlined consume of NavigationState.Base);
    return v20 > 1;
  }
  uint64_t v2 = (uint64_t *)_s7SwiftUI15NavigationStateV4Base33_D6901E90061344656248AB2898527223LLOWOj0_((uint64_t)v51);
  uint64_t v3 = v2[21];
  if (v3 < 0)
  {
LABEL_9:
    uint64_t v20 = 1;
    return v20 > 1;
  }
  uint64_t v4 = v2;
  uint64_t v6 = v2[14];
  uint64_t v5 = v2[15];
  uint64_t v7 = v2[17];
  uint64_t v43 = v2[16];
  uint64_t v44 = v5;
  uint64_t v9 = v2[18];
  uint64_t v8 = v2[19];
  uint64_t v10 = v2[20];
  uint64_t v11 = (uint64_t *)v2[22];
  uint64_t v12 = (void *)v2[23];
  uint64_t v13 = *(uint64_t (**)(uint64_t))(*(void *)v3 + 88);
  uint64_t v45 = *(void *)v3 + 88;
  uint64_t v46 = v13;
  outlined retain of NavigationState.Base((uint64_t)v50, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))outlined copy of NavigationState.Base);
  outlined retain of NavigationColumnState(v4);
  uint64_t v35 = v11;
  uint64_t v36 = v12;
  uint64_t v41 = v9;
  uint64_t v42 = v6;
  uint64_t v38 = v7;
  uint64_t v39 = v10;
  uint64_t v40 = v8;
  outlined copy of NavigationColumnState.ColumnContent(v6, v44, v43, v7, v9, v8, v10, v3);
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v14 = swift_bridgeObjectRetain();
  uint64_t v15 = v46(v14);
  uint64_t result = swift_release();
  BOOL v17 = __OFADD__(v15, 1);
  uint64_t v18 = v15 + 1;
  if (!v17)
  {
    uint64_t v19 = v11[2];
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v35 = v11;
    uint64_t v36 = v12;
    outlined consume of NavigationColumnState.ColumnContent(v42, v44, v43, v38, v41, v40, v39, v3);
    outlined release of NavigationColumnState(v4);
    outlined retain of NavigationState.Base((uint64_t)v50, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))outlined consume of NavigationState.Base);
    uint64_t v20 = v18 + v19;
    if (!__OFADD__(v18, v19)) {
      return v20 > 1;
    }
    __break(1u);
    goto LABEL_8;
  }
  __break(1u);
  return result;
}

uint64_t NavigationState.StackContent.pathSeed.getter@<X0>(_DWORD *a1@<X8>)
{
  outlined init with take of NavigationState.Base(v1, __dst);
  outlined init with take of NavigationState.Base(__dst, v41);
  int v3 = _s7SwiftUI15NavigationStateV4Base33_D6901E90061344656248AB2898527223LLOWOg((uint64_t)v41);
  if (v3)
  {
    uint64_t v38 = a1;
    if (v3 == 1)
    {
      uint64_t v4 = _s7SwiftUI15NavigationStateV4Base33_D6901E90061344656248AB2898527223LLOWOj0_((uint64_t)v41);
      uint64_t v5 = *(void *)(v4 + 304);
      outlined init with take of NavigationState.Base(__dst, v39);
      uint64_t v6 = (uint64_t *)_s7SwiftUI15NavigationStateV4Base33_D6901E90061344656248AB2898527223LLOWOj0_((uint64_t)v39);
      outlined retain of (NavigationColumnState, precedingDestinations: ResolvedNavigationDestinations?)(v6);
      outlined consume of ResolvedNavigationDestinations?(v5);
      uint64_t result = (uint64_t)outlined release of NavigationColumnState((uint64_t *)v4);
      *a1 = *(_DWORD *)(v4 + 84);
    }
    else
    {
      uint64_t v8 = _s7SwiftUI15NavigationStateV4Base33_D6901E90061344656248AB2898527223LLOWOj0_((uint64_t)v41);
      uint64_t v36 = *(void *)(v8 + 8);
      uint64_t v37 = *(void *)v8;
      uint64_t v34 = *(void *)(v8 + 24);
      uint64_t v35 = *(void *)(v8 + 16);
      uint64_t v32 = *(void *)(v8 + 40);
      uint64_t v33 = *(void *)(v8 + 32);
      uint64_t v30 = *(void *)(v8 + 56);
      uint64_t v31 = *(void *)(v8 + 48);
      uint64_t v29 = *(void *)(v8 + 64);
      unsigned __int16 v9 = *(_WORD *)(v8 + 72);
      outlined init with take of NavigationState.Base(__dst, v39);
      uint64_t v10 = _s7SwiftUI15NavigationStateV4Base33_D6901E90061344656248AB2898527223LLOWOj0_((uint64_t)v39);
      uint64_t v11 = *(void *)(v10 + 8);
      uint64_t v12 = *(void *)(v10 + 16);
      uint64_t v13 = *(void *)(v10 + 24);
      uint64_t v14 = *(void *)(v10 + 32);
      uint64_t v15 = *(void *)(v10 + 40);
      uint64_t v16 = *(void *)(v10 + 48);
      uint64_t v17 = *(void *)(v10 + 56);
      uint64_t v18 = *(void *)(v10 + 64);
      unsigned __int16 v19 = *(_WORD *)(v10 + 72);
      swift_bridgeObjectRetain();
      outlined copy of NavigationSplitViewState?(v11, v12, v13, v14, v15, v16, v17, v18, v19, (void (*)(uint64_t, uint64_t, uint64_t))outlined copy of Binding<NavigationSplitViewColumn>?, (void (*)(uint64_t, uint64_t))outlined copy of AppIntentExecutor?);
      outlined copy of NavigationSplitViewState?(v36, v35, v34, v33, v32, v31, v30, v29, v9, (void (*)(uint64_t, uint64_t, uint64_t))outlined consume of Binding<NavigationSplitViewColumn>?, (void (*)(uint64_t, uint64_t))outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?);
      uint64_t v20 = *(void *)(v37 + 16);
      if (v20)
      {
        uint64_t v21 = 0;
        uint64_t v22 = (unsigned int *)(v37 + 116);
        uint64_t v23 = v38;
        do
        {
          uint64_t v24 = *v22;
          if (v21 != 0xFFFFFFFFLL && v24 != 0)
          {
            if (!v21 || v24 == 0xFFFFFFFFLL)
            {
              uint64_t v21 = *v22;
            }
            else
            {
              unint64_t v26 = (v24 | (v21 << 32)) + ~(v24 << 32);
              unint64_t v27 = (v26 ^ (v26 >> 22)) + ~((v26 ^ (v26 >> 22)) << 13);
              unint64_t v28 = (9 * (v27 ^ (v27 >> 8))) ^ ((9 * (v27 ^ (v27 >> 8))) >> 15);
              uint64_t v21 = ((v28 + ~(v28 << 27)) >> 31) ^ (v28 + ~(v28 << 27));
            }
          }
          v22 += 76;
          --v20;
        }
        while (v20);
      }
      else
      {
        LODWORD(v21) = 0;
        uint64_t v23 = v38;
      }
      uint64_t result = swift_bridgeObjectRelease();
      *uint64_t v23 = v21;
    }
  }
  else
  {
    uint64_t result = _s7SwiftUI15NavigationStateV4Base33_D6901E90061344656248AB2898527223LLOWOj0_((uint64_t)v41);
    *a1 = 0;
  }
  return result;
}

uint64_t NavigationState.StackContent.animationSeed.getter@<X0>(void *a1@<X8>)
{
  outlined init with take of NavigationState.Base(v1, __dst);
  outlined init with take of NavigationState.Base(__dst, v46);
  int v3 = _s7SwiftUI15NavigationStateV4Base33_D6901E90061344656248AB2898527223LLOWOg((uint64_t)v46);
  if (v3)
  {
    uint64_t v43 = a1;
    if (v3 == 1)
    {
      uint64_t v4 = (uint64_t *)_s7SwiftUI15NavigationStateV4Base33_D6901E90061344656248AB2898527223LLOWOj0_((uint64_t)v46);
      uint64_t v5 = v4[38];
      outlined init with take of NavigationState.Base(__dst, v44);
      uint64_t v6 = (uint64_t *)_s7SwiftUI15NavigationStateV4Base33_D6901E90061344656248AB2898527223LLOWOj0_((uint64_t)v44);
      outlined retain of (NavigationColumnState, precedingDestinations: ResolvedNavigationDestinations?)(v6);
      outlined consume of ResolvedNavigationDestinations?(v5);
      uint64_t result = (uint64_t)outlined release of NavigationColumnState(v4);
      *a1 = v4[35];
      return result;
    }
    uint64_t v8 = _s7SwiftUI15NavigationStateV4Base33_D6901E90061344656248AB2898527223LLOWOj0_((uint64_t)v46);
    uint64_t v41 = *(void *)(v8 + 8);
    uint64_t v42 = *(void *)v8;
    uint64_t v39 = *(void *)(v8 + 24);
    uint64_t v40 = *(void *)(v8 + 16);
    uint64_t v37 = *(void *)(v8 + 40);
    uint64_t v38 = *(void *)(v8 + 32);
    uint64_t v35 = *(void *)(v8 + 56);
    uint64_t v36 = *(void *)(v8 + 48);
    uint64_t v34 = *(void *)(v8 + 64);
    unsigned __int16 v9 = *(_WORD *)(v8 + 72);
    outlined init with take of NavigationState.Base(__dst, v44);
    uint64_t v10 = _s7SwiftUI15NavigationStateV4Base33_D6901E90061344656248AB2898527223LLOWOj0_((uint64_t)v44);
    uint64_t v11 = *(void *)(v10 + 8);
    uint64_t v12 = *(void *)(v10 + 16);
    uint64_t v13 = *(void *)(v10 + 24);
    uint64_t v14 = *(void *)(v10 + 32);
    uint64_t v15 = *(void *)(v10 + 40);
    uint64_t v16 = *(void *)(v10 + 48);
    uint64_t v17 = *(void *)(v10 + 56);
    uint64_t v18 = *(void *)(v10 + 64);
    unsigned __int16 v19 = *(_WORD *)(v10 + 72);
    swift_bridgeObjectRetain();
    outlined copy of NavigationSplitViewState?(v11, v12, v13, v14, v15, v16, v17, v18, v19, (void (*)(uint64_t, uint64_t, uint64_t))outlined copy of Binding<NavigationSplitViewColumn>?, (void (*)(uint64_t, uint64_t))outlined copy of AppIntentExecutor?);
    outlined copy of NavigationSplitViewState?(v41, v40, v39, v38, v37, v36, v35, v34, v9, (void (*)(uint64_t, uint64_t, uint64_t))outlined consume of Binding<NavigationSplitViewColumn>?, (void (*)(uint64_t, uint64_t))outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?);
    uint64_t v20 = *(void *)(v42 + 16);
    if (v20)
    {
      uint64_t v21 = 0;
      uint64_t v22 = 0;
      uint64_t v23 = (_DWORD *)(v42 + 316);
      uint64_t v24 = v43;
      while (1)
      {
        uint64_t v25 = *(v23 - 1);
        if (v22 == 0xFFFFFFFFLL || v25 == 0) {
          goto LABEL_18;
        }
        if (!v22) {
          break;
        }
        if (v25 == 0xFFFFFFFFLL)
        {
          uint64_t v22 = *(v23 - 1);
          if (v21 != 0xFFFFFFFFLL)
          {
LABEL_19:
            uint64_t v30 = *v23;
            if (*v23)
            {
              if (!v21 || v30 == 0xFFFFFFFFLL)
              {
                uint64_t v21 = *v23;
              }
              else
              {
                unint64_t v31 = (v30 | (v21 << 32)) + ~(v30 << 32);
                unint64_t v32 = (v31 ^ (v31 >> 22)) + ~((v31 ^ (v31 >> 22)) << 13);
                unint64_t v33 = (9 * (v32 ^ (v32 >> 8))) ^ ((9 * (v32 ^ (v32 >> 8))) >> 15);
                uint64_t v21 = ((v33 + ~(v33 << 27)) >> 31) ^ (v33 + ~(v33 << 27));
              }
            }
          }
        }
        else
        {
          unint64_t v27 = (v25 | (v22 << 32)) + ~(v25 << 32);
          unint64_t v28 = (v27 ^ (v27 >> 22)) + ~((v27 ^ (v27 >> 22)) << 13);
          unint64_t v29 = (9 * (v28 ^ (v28 >> 8))) ^ ((9 * (v28 ^ (v28 >> 8))) >> 15);
          uint64_t v22 = ((v29 + ~(v29 << 27)) >> 31) ^ (v29 + ~(v29 << 27));
          if (v21 != 0xFFFFFFFFLL) {
            goto LABEL_19;
          }
        }
LABEL_8:
        v23 += 76;
        if (!--v20) {
          goto LABEL_26;
        }
      }
      uint64_t v22 = *(v23 - 1);
LABEL_18:
      if (v21 != 0xFFFFFFFFLL) {
        goto LABEL_19;
      }
      goto LABEL_8;
    }
    LODWORD(v21) = 0;
    LODWORD(v22) = 0;
    uint64_t v24 = v43;
LABEL_26:
    uint64_t result = swift_bridgeObjectRelease();
    *uint64_t v24 = v22;
    v24[1] = v21;
  }
  else
  {
    uint64_t result = _s7SwiftUI15NavigationStateV4Base33_D6901E90061344656248AB2898527223LLOWOj0_((uint64_t)v46);
    *a1 = 0;
  }
  return result;
}

uint64_t NavigationState.StackContent.Key.debugDescription.getter(uint64_t a1, char a2)
{
  _StringGuts.grow(_:)(38);
  swift_bridgeObjectRelease();
  v3._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  v4._countAndFlagsBits = 0x3A6E6D756C6F6320;
  v4._object = (void *)0xE900000000000020;
  String.append(_:)(v4);
  unint64_t v5 = 0xE700000000000000;
  uint64_t v6 = 0x72616265646973;
  switch(a2)
  {
    case 1:
      uint64_t v6 = 0x746E65746E6F63;
      break;
    case 2:
      unint64_t v5 = 0xE600000000000000;
      uint64_t v6 = 0x6C6961746564;
      break;
    case 3:
      unint64_t v5 = 0xE500000000000000;
      uint64_t v6 = 0x6B63617473;
      break;
    case 4:
      unint64_t v5 = 0xE900000000000064;
      uint64_t v6 = 0x657370616C6C6F63;
      break;
    case 5:
      unint64_t v5 = 0xE900000000000072;
      uint64_t v6 = 0x6F74636570736E69;
      break;
    default:
      break;
  }
  unint64_t v7 = v5;
  String.append(_:)(*(Swift::String *)&v6);
  swift_bridgeObjectRelease();
  v8._countAndFlagsBits = 0x436E6D756C6F6320;
  v8._object = (void *)0xEE00203A746E756FLL;
  String.append(_:)(v8);
  v9._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v9);
  swift_bridgeObjectRelease();
  v10._countAndFlagsBits = 62;
  v10._object = (void *)0xE100000000000000;
  String.append(_:)(v10);
  return 0x203A64693C79654BLL;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance NavigationState.StackContent.Key()
{
  Swift::UInt v1 = *(void *)v0;
  Swift::UInt v2 = *(unsigned __int8 *)(v0 + 8);
  Swift::UInt v3 = *(void *)(v0 + 16);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance NavigationState.StackContent.Key()
{
  Swift::UInt v1 = *(unsigned __int8 *)(v0 + 8);
  Swift::UInt v2 = *(void *)(v0 + 16);
  Hasher._combine(_:)(*(void *)v0);
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance NavigationState.StackContent.Key()
{
  Swift::UInt v1 = *(void *)v0;
  Swift::UInt v2 = *(unsigned __int8 *)(v0 + 8);
  Swift::UInt v3 = *(void *)(v0 + 16);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  return Hasher._finalize()();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance NavigationState.StackContent.Key()
{
  return NavigationState.StackContent.Key.debugDescription.getter(*(void *)v0, *(unsigned char *)(v0 + 8));
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance NavigationState.StackContent.Key(uint64_t a1, uint64_t a2)
{
  return *(void *)a1 == *(void *)a2
      && *(unsigned __int8 *)(a1 + 8) == *(unsigned __int8 *)(a2 + 8)
      && *(void *)(a1 + 16) == *(void *)(a2 + 16);
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance NavigationState.StackContent.ChangeKind(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  unint64_t v3 = *(void *)a2;
  if (*((unsigned char *)a1 + 8) == 1)
  {
    switch(v2)
    {
      case 1:
        BOOL v4 = v3 == 1;
        goto LABEL_13;
      case 2:
        BOOL v4 = v3 == 2;
        goto LABEL_13;
      case 3:
        if (v3 > 2) {
          int v6 = *(unsigned __int8 *)(a2 + 8);
        }
        else {
          int v6 = 0;
        }
        if (v6 != 1) {
          return 0;
        }
        goto LABEL_17;
      default:
        BOOL v4 = v3 == 0;
LABEL_13:
        if (v4) {
          char v7 = *(unsigned char *)(a2 + 8);
        }
        else {
          char v7 = 0;
        }
        if ((v7 & 1) == 0) {
          return 0;
        }
LABEL_17:
        BOOL result = 1;
        break;
    }
  }
  else
  {
    return (*(unsigned char *)(a2 + 8) & 1) == 0 && v2 == v3;
  }
  return result;
}

uint64_t NavigationState.StackContent.Views.ViewsSequence.startIndex.getter()
{
  outlined init with take of NavigationState.Base(v0, __src);
  outlined init with take of NavigationState.Base(__src, v56);
  int v1 = _s7SwiftUI15NavigationStateV4Base33_D6901E90061344656248AB2898527223LLOWOg((uint64_t)v56);
  if (!v1)
  {
    _s7SwiftUI15NavigationStateV4Base33_D6901E90061344656248AB2898527223LLOWOj0_((uint64_t)v56);
    return 0;
  }
  if (v1 == 1)
  {
    uint64_t v2 = (uint64_t *)_s7SwiftUI15NavigationStateV4Base33_D6901E90061344656248AB2898527223LLOWOj0_((uint64_t)v56);
    outlined init with take of NavigationState.Base(__src, v46);
    unint64_t v3 = (uint64_t *)_s7SwiftUI15NavigationStateV4Base33_D6901E90061344656248AB2898527223LLOWOj0_((uint64_t)v46);
    uint64_t v4 = v2[38];
    outlined retain of (NavigationColumnState, precedingDestinations: ResolvedNavigationDestinations?)(v3);
    outlined consume of ResolvedNavigationDestinations?(v4);
    outlined release of NavigationColumnState(v2);
    return 0;
  }
  uint64_t v7 = _s7SwiftUI15NavigationStateV4Base33_D6901E90061344656248AB2898527223LLOWOj0_((uint64_t)v56);
  uint64_t v8 = *(void *)v7;
  uint64_t v10 = *(void *)(v7 + 16);
  uint64_t v9 = *(void *)(v7 + 24);
  uint64_t v11 = *(void *)(v7 + 32);
  uint64_t v12 = *(void *)(v7 + 40);
  uint64_t v14 = *(void *)(v7 + 48);
  uint64_t v13 = *(void *)(v7 + 56);
  unsigned __int16 v15 = *(_WORD *)(v7 + 72);
  uint64_t v42 = *(void *)(v7 + 64);
  uint64_t v43 = *(void *)(v7 + 8);
  v48[0] = v43;
  v48[1] = v10;
  v48[2] = v9;
  v48[3] = v11;
  void v48[4] = v12;
  v48[5] = v14;
  v48[6] = v13;
  v48[7] = v42;
  unsigned __int16 v49 = v15;
  if (!*(void *)(v8 + 16))
  {
    outlined init with take of NavigationState.Base(__src, v46);
    uint64_t v25 = _s7SwiftUI15NavigationStateV4Base33_D6901E90061344656248AB2898527223LLOWOj0_((uint64_t)v46);
    uint64_t v40 = *(void *)(v25 + 8);
    uint64_t v26 = *(void *)(v25 + 16);
    uint64_t v35 = *(void *)(v25 + 32);
    uint64_t v36 = *(void *)(v25 + 24);
    uint64_t v33 = *(void *)(v25 + 48);
    uint64_t v34 = *(void *)(v25 + 40);
    uint64_t v45 = v13;
    uint64_t v27 = *(void *)(v25 + 64);
    uint64_t v32 = *(void *)(v25 + 56);
    uint64_t v28 = v14;
    unsigned __int16 v29 = *(_WORD *)(v25 + 72);
    swift_bridgeObjectRetain();
    outlined copy of NavigationSplitViewState?(v40, v26, v36, v35, v34, v33, v32, v27, v29, (void (*)(uint64_t, uint64_t, uint64_t))outlined copy of Binding<NavigationSplitViewColumn>?, (void (*)(uint64_t, uint64_t))outlined copy of AppIntentExecutor?);
    outlined copy of NavigationSplitViewState?(v43, v10, v9, v11, v12, v28, v45, v42, v15, (void (*)(uint64_t, uint64_t, uint64_t))outlined consume of Binding<NavigationSplitViewColumn>?, (void (*)(uint64_t, uint64_t))outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?);
    goto LABEL_58;
  }
  uint64_t v39 = v11;
  uint64_t v41 = v12;
  unint64_t v16 = *(void *)(v8 + 16);
  outlined retain of NavigationState.Base((uint64_t)__src, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))outlined copy of NavigationState.Base);
  swift_bridgeObjectRetain();
  memcpy(__dst, (const void *)(v8 + 32), 0x12BuLL);
  uint64_t v5 = 0;
  unint64_t v44 = v16;
  unint64_t v17 = v16 - 1;
  uint64_t v18 = v8;
  uint64_t v38 = v9;
  uint64_t v19 = v10;
  uint64_t v20 = v43;
  while (2)
  {
    memcpy(v50, (const void *)(v18 + 32), 0x12BuLL);
    switch(LOBYTE(v50[3]))
    {
      case 1:
        outlined retain of NavigationColumnState(__dst);
        outlined retain of NavigationColumnState(v50);
        if (specialized hasContent #1 <A>() in static NavigationColumnState.isElidedInCollapsedSplit<A>(column:within:splitViewState:)((uint64_t)v48, (uint64_t)v50, v5, v8))goto LABEL_62; {
        if (v5 + 1 >= v44)
        }
          goto LABEL_40;
        break;
      case 2:
        outlined retain of NavigationColumnState(__dst);
        outlined retain of NavigationColumnState(v50);
        char v22 = specialized hasContent #1 <A>() in static NavigationColumnState.isElidedInCollapsedSplit<A>(column:within:splitViewState:)((uint64_t)v48, (uint64_t)v50, v5, v8);
LABEL_28:
        outlined release of NavigationColumnState(v50);
        if (v22) {
          goto LABEL_63;
        }
        goto LABEL_41;
      case 5:
        goto LABEL_42;
      default:
        outlined retain of NavigationColumnState(__dst);
        goto LABEL_63;
    }
    memcpy(v51, (const void *)(v18 + 336), 0x12BuLL);
    switch(LOBYTE(v51[3]))
    {
      case 1:
        outlined retain of NavigationColumnState(v51);
        if (specialized hasContent #1 <A>() in static NavigationColumnState.isElidedInCollapsedSplit<A>(column:within:splitViewState:)((uint64_t)v48, (uint64_t)v51, v5 + 1, v8))goto LABEL_61; {
        if (v5 + 2 >= v44)
        }
          goto LABEL_39;
        if ((unint64_t)(v5 + 2) >= *(void *)(v8 + 16))
        {
          __break(1u);
LABEL_66:
          unsigned __int16 v37 = v15;
          uint64_t v30 = v20;
          uint64_t v31 = v19;
          outlined release of NavigationColumnState(v54);
LABEL_67:
          outlined release of NavigationColumnState(v53);
          outlined release of NavigationColumnState(v52);
          outlined release of NavigationColumnState(v51);
          outlined release of NavigationColumnState(v50);
          uint64_t v19 = v31;
          uint64_t v20 = v30;
          unsigned __int16 v15 = v37;
LABEL_63:
          outlined release of NavigationColumnState(__dst);
          swift_bridgeObjectRelease();
          outlined copy of NavigationSplitViewState?(v20, v19, v38, v39, v41, v14, v13, v42, v15, (void (*)(uint64_t, uint64_t, uint64_t))outlined consume of Binding<NavigationSplitViewColumn>?, (void (*)(uint64_t, uint64_t))outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?);
          swift_bridgeObjectRelease();
          return v5;
        }
        memcpy(v52, (const void *)(v18 + 640), 0x12BuLL);
        switch(LOBYTE(v52[3]))
        {
          case 1:
            outlined retain of NavigationColumnState(v52);
            if (specialized hasContent #1 <A>() in static NavigationColumnState.isElidedInCollapsedSplit<A>(column:within:splitViewState:)((uint64_t)v48, (uint64_t)v52, v5 + 2, v8))goto LABEL_60; {
            if ((unint64_t)(v5 + 3) >= *(void *)(v8 + 16))
            }
              goto LABEL_38;
            break;
          case 2:
            outlined retain of NavigationColumnState(v52);
            char v22 = specialized hasContent #1 <A>() in static NavigationColumnState.isElidedInCollapsedSplit<A>(column:within:splitViewState:)((uint64_t)v48, (uint64_t)v52, v5 + 2, v8);
LABEL_33:
            outlined release of NavigationColumnState(v52);
            goto LABEL_31;
          case 5:
            goto LABEL_39;
          default:
            goto LABEL_61;
        }
        break;
      case 2:
        outlined retain of NavigationColumnState(v51);
        char v22 = specialized hasContent #1 <A>() in static NavigationColumnState.isElidedInCollapsedSplit<A>(column:within:splitViewState:)((uint64_t)v48, (uint64_t)v51, v5 + 1, v8);
LABEL_31:
        outlined release of NavigationColumnState(v51);
        goto LABEL_28;
      case 5:
        goto LABEL_40;
      default:
        goto LABEL_62;
    }
    memcpy(v53, (const void *)(v18 + 944), 0x12BuLL);
    switch(LOBYTE(v53[3]))
    {
      case 1:
        outlined retain of NavigationColumnState(v53);
        if (specialized hasContent #1 <A>() in static NavigationColumnState.isElidedInCollapsedSplit<A>(column:within:splitViewState:)((uint64_t)v48, (uint64_t)v53, v5 + 3, v8))
        {
          outlined release of NavigationColumnState(v53);
LABEL_60:
          outlined release of NavigationColumnState(v52);
LABEL_61:
          outlined release of NavigationColumnState(v51);
LABEL_62:
          outlined release of NavigationColumnState(v50);
          goto LABEL_63;
        }
        if ((unint64_t)(v5 + 4) >= *(void *)(v8 + 16))
        {
LABEL_37:
          outlined release of NavigationColumnState(v53);
LABEL_38:
          outlined release of NavigationColumnState(v52);
LABEL_39:
          outlined release of NavigationColumnState(v51);
LABEL_40:
          outlined release of NavigationColumnState(v50);
        }
        else
        {
          memcpy(v54, (const void *)(v18 + 1248), 0x12BuLL);
          switch(LOBYTE(v54[3]))
          {
            case 1:
              outlined retain of NavigationColumnState(v54);
              if (specialized hasContent #1 <A>() in static NavigationColumnState.isElidedInCollapsedSplit<A>(column:within:splitViewState:)((uint64_t)v48, (uint64_t)v54, v5 + 4, v8))goto LABEL_66; {
              if ((unint64_t)(v5 + 5) >= *(void *)(v8 + 16))
              }
              {
                outlined release of NavigationColumnState(v54);
                goto LABEL_37;
              }
              memcpy(v46, (const void *)(v18 + 1552), 0x12BuLL);
              switch(LOBYTE(v46[3]))
              {
                case 1:
                  outlined retain of NavigationColumnState(v46);
                  if (specialized hasContent #1 <A>() in static NavigationColumnState.isElidedInCollapsedSplit<A>(column:within:splitViewState:)((uint64_t)v48, (uint64_t)v46, v5 + 5, v8))
                  {
                    outlined release of NavigationColumnState(v46);
                    outlined release of NavigationColumnState(v54);
                    outlined release of NavigationColumnState(v53);
                    char v21 = 0;
                  }
                  else if ((unint64_t)(v5 + 6) >= *(void *)(v8 + 16))
                  {
                    outlined release of NavigationColumnState(v46);
                    outlined release of NavigationColumnState(v54);
                    outlined release of NavigationColumnState(v53);
                    char v21 = 1;
                  }
                  else
                  {
                    char v21 = specialized static NavigationColumnState.isElidedInCollapsedSplit<A>(column:within:splitViewState:)(v5 + 6, v8, (uint64_t)v48);
                    outlined release of NavigationColumnState(v46);
                    outlined release of NavigationColumnState(v54);
                    outlined release of NavigationColumnState(v53);
                  }
                  uint64_t v20 = v43;
                  break;
                case 2:
                  outlined retain of NavigationColumnState(v46);
                  char v24 = specialized hasContent #1 <A>() in static NavigationColumnState.isElidedInCollapsedSplit<A>(column:within:splitViewState:)((uint64_t)v48, (uint64_t)v46, v5 + 5, v8);
                  outlined release of NavigationColumnState(v46);
                  outlined release of NavigationColumnState(v54);
                  outlined release of NavigationColumnState(v53);
                  char v21 = v24 ^ 1;
                  break;
                case 5:
                  outlined release of NavigationColumnState(v54);
                  outlined release of NavigationColumnState(v53);
                  char v21 = 1;
                  break;
                default:
                  outlined release of NavigationColumnState(v54);
                  outlined release of NavigationColumnState(v53);
                  char v21 = 0;
                  break;
              }
              outlined release of NavigationColumnState(v52);
LABEL_53:
              outlined release of NavigationColumnState(v51);
              outlined release of NavigationColumnState(v50);
              if ((v21 & 1) == 0) {
                goto LABEL_63;
              }
              break;
            case 2:
              outlined retain of NavigationColumnState(v54);
              char v23 = specialized hasContent #1 <A>() in static NavigationColumnState.isElidedInCollapsedSplit<A>(column:within:splitViewState:)((uint64_t)v48, (uint64_t)v54, v5 + 4, v8);
              outlined release of NavigationColumnState(v54);
              outlined release of NavigationColumnState(v53);
              outlined release of NavigationColumnState(v52);
              char v21 = v23 ^ 1;
              goto LABEL_53;
            case 5:
              goto LABEL_37;
            default:
              unsigned __int16 v37 = v15;
              uint64_t v30 = v20;
              uint64_t v31 = v19;
              goto LABEL_67;
          }
        }
LABEL_41:
        outlined release of NavigationColumnState(__dst);
LABEL_42:
        if (v17 != v5)
        {
          memcpy(__dst, (const void *)(v18 + 336), 0x12BuLL);
          v18 += 304;
          ++v5;
          continue;
        }
        swift_bridgeObjectRelease();
        outlined copy of NavigationSplitViewState?(v20, v19, v38, v39, v41, v14, v13, v42, v15, (void (*)(uint64_t, uint64_t, uint64_t))outlined consume of Binding<NavigationSplitViewColumn>?, (void (*)(uint64_t, uint64_t))outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?);
LABEL_58:
        swift_bridgeObjectRelease();
        return 0;
      case 2:
        outlined retain of NavigationColumnState(v53);
        char v22 = specialized hasContent #1 <A>() in static NavigationColumnState.isElidedInCollapsedSplit<A>(column:within:splitViewState:)((uint64_t)v48, (uint64_t)v53, v5 + 3, v8);
        outlined release of NavigationColumnState(v53);
        goto LABEL_33;
      case 5:
        goto LABEL_38;
      default:
        goto LABEL_60;
    }
  }
}

uint64_t NavigationState.StackContent.Views.ViewsSequence.index(after:)(unint64_t a1, char a2, uint64_t a3, char a4)
{
  uint64_t v5 = v4;
  outlined init with take of NavigationState.Base(v5, __src);
  outlined init with take of NavigationState.Base(__src, v112);
  int v9 = _s7SwiftUI15NavigationStateV4Base33_D6901E90061344656248AB2898527223LLOWOg((uint64_t)v112);
  if (!v9)
  {
    _s7SwiftUI15NavigationStateV4Base33_D6901E90061344656248AB2898527223LLOWOj0_((uint64_t)v112);
    return 0;
  }
  uint64_t v98 = a3;
  char v95 = a4;
  if (v9 == 1)
  {
    uint64_t v10 = (void *)_s7SwiftUI15NavigationStateV4Base33_D6901E90061344656248AB2898527223LLOWOj0_((uint64_t)v112);
    outlined init with take of NavigationState.Base(__src, v104);
    uint64_t v11 = (uint64_t *)_s7SwiftUI15NavigationStateV4Base33_D6901E90061344656248AB2898527223LLOWOj0_((uint64_t)v104);
    uint64_t v12 = v10[38];
    outlined retain of (NavigationColumnState, precedingDestinations: ResolvedNavigationDestinations?)(v11);
    outlined consume of ResolvedNavigationDestinations?(v12);
    memcpy(__dst, v10, 0x12BuLL);
    a3 = specialized NavigationState.StackContent.Views.ViewsSequence.index(after:for:)(a1, a2 & 1, a3, a4, (uint64_t)__dst);
    int v14 = ~v13;
    outlined release of NavigationColumnState(v10);
    if (!v14) {
      return 0;
    }
    return a3;
  }
  uint64_t v15 = _s7SwiftUI15NavigationStateV4Base33_D6901E90061344656248AB2898527223LLOWOj0_((uint64_t)v112);
  uint64_t v17 = *(void *)v15;
  uint64_t v16 = *(void *)(v15 + 8);
  uint64_t v19 = *(void *)(v15 + 16);
  uint64_t v18 = *(void *)(v15 + 24);
  uint64_t v20 = *(void *)(v15 + 32);
  uint64_t v21 = *(void *)(v15 + 40);
  uint64_t v23 = *(void *)(v15 + 48);
  uint64_t v22 = *(void *)(v15 + 56);
  uint64_t v24 = *(void *)(v15 + 64);
  unsigned int v25 = *(unsigned __int16 *)(v15 + 72);
  v105[0] = v16;
  v105[1] = v19;
  v105[2] = v18;
  uint64_t v92 = v20;
  void v105[3] = v20;
  v105[4] = v21;
  v105[5] = v23;
  v105[6] = v22;
  v105[7] = v24;
  unsigned int v91 = v25;
  __int16 v106 = v25;
  if (a2)
  {
    __break(1u);
    JUMPOUT(0x1876EA990);
  }
  if ((a1 & 0x8000000000000000) != 0) {
    goto LABEL_103;
  }
  if (*(void *)(v17 + 16) <= a1) {
    goto LABEL_104;
  }
  uint64_t v85 = v16;
  uint64_t v86 = v19;
  uint64_t v94 = v18;
  uint64_t v87 = v21;
  uint64_t v88 = v23;
  uint64_t v89 = v22;
  uint64_t v90 = v24;
  memcpy(__dst, (const void *)(v17 + 304 * a1 + 32), 0x12BuLL);
  outlined init with take of NavigationState.Base(__src, v104);
  uint64_t v26 = _s7SwiftUI15NavigationStateV4Base33_D6901E90061344656248AB2898527223LLOWOj0_((uint64_t)v104);
  a3 = *(void *)(v26 + 8);
  uint64_t v27 = *(void *)(v26 + 16);
  uint64_t v28 = *(void *)(v26 + 24);
  uint64_t v93 = v17;
  uint64_t v29 = *(void *)(v26 + 32);
  uint64_t v30 = *(void *)(v26 + 40);
  uint64_t v31 = *(void *)(v26 + 48);
  uint64_t v32 = *(void *)(v26 + 56);
  uint64_t v33 = *(void *)(v26 + 64);
  unsigned __int16 v34 = *(_WORD *)(v26 + 72);
  swift_bridgeObjectRetain();
  outlined copy of NavigationSplitViewState?(a3, v27, v28, v29, v30, v31, v32, v33, v34, (void (*)(uint64_t, uint64_t, uint64_t))outlined copy of Binding<NavigationSplitViewColumn>?, (void (*)(uint64_t, uint64_t))outlined copy of AppIntentExecutor?);
  uint64_t v35 = specialized NavigationState.StackContent.Views.ViewsSequence.index(after:for:)(a1, 0, v98, v95, (uint64_t)__dst);
  if (v36 != -1)
  {
    a3 = v35;
    outlined copy of NavigationSplitViewState?(v85, v86, v94, v92, v87, v88, v89, v90, v91, (void (*)(uint64_t, uint64_t, uint64_t))outlined consume of Binding<NavigationSplitViewColumn>?, (void (*)(uint64_t, uint64_t))outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?);
    swift_bridgeObjectRelease();
    return a3;
  }
  uint64_t v37 = v93;
  uint64_t v38 = v94;
  int64_t v39 = *(void *)(v93 + 16);
  if (v39 <= a1) {
    goto LABEL_107;
  }
  if (a1 + 1 == v39) {
    goto LABEL_99;
  }
  swift_bridgeObjectRetain();
  if (a1 + 1 >= v39)
  {
LABEL_96:
    __break(1u);
LABEL_97:
    outlined retain of NavigationColumnState(v102);
    goto LABEL_115;
  }
  unsigned int v40 = v91 >> 8;
  if (v91 >> 8 == 2) {
    char v41 = 1;
  }
  else {
    char v41 = 2;
  }
  if (v40 == 3) {
    char v41 = 0;
  }
  char v84 = v41;
  uint64_t v42 = 304 * a1;
  uint64_t v43 = a1 + 3;
  int64_t v99 = 2 - v39;
  int64_t v81 = v39;
  while (2)
  {
    memcpy(v102, (const void *)(v37 + v42 + 336), 0x12BuLL);
    a3 = v43 - 2;
    if ((unint64_t)(v43 - 2) >= *(void *)(v37 + 16))
    {
      __break(1u);
LABEL_103:
      __break(1u);
LABEL_104:
      __break(1u);
LABEL_105:
      __break(1u);
LABEL_106:
      __break(1u);
LABEL_107:
      __break(1u);
LABEL_108:
      __break(1u);
LABEL_109:
      __break(1u);
LABEL_110:
      outlined release of NavigationColumnState(__dst);
      uint64_t v38 = v94;
LABEL_111:
      outlined release of NavigationColumnState(v109);
LABEL_112:
      outlined release of NavigationColumnState(v108);
LABEL_113:
      outlined release of NavigationColumnState(v107);
LABEL_114:
      outlined release of NavigationColumnState(v103);
LABEL_115:
      outlined release of NavigationColumnState(v102);
      swift_bridgeObjectRelease();
      outlined copy of NavigationSplitViewState?(v85, v86, v38, v92, v87, v88, v89, v90, v91, (void (*)(uint64_t, uint64_t, uint64_t))outlined consume of Binding<NavigationSplitViewColumn>?, (void (*)(uint64_t, uint64_t))outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?);
      swift_bridgeObjectRelease();
      return a3;
    }
    uint64_t v44 = v43 - 3;
    int64_t v45 = v99 + v43;
    memcpy(v103, (const void *)(v37 + v42 + 336), 0x12BuLL);
    switch(LOBYTE(v103[3]))
    {
      case 1:
        int64_t v101 = v99 + v43;
        if (v38 == 1) {
          goto LABEL_24;
        }
        if (v40)
        {
          if (v40 != 3 || BYTE1(v92) && BYTE1(v92) != 3) {
            goto LABEL_97;
          }
LABEL_24:
          if (LOBYTE(v103[37]))
          {
            outlined retain of NavigationColumnState(v102);
            outlined retain of NavigationColumnState(v103);
            char v46 = 1;
          }
          else
          {
            uint64_t v96 = v103[21];
            if (v103[21] < 0)
            {
              outlined retain of NavigationColumnState(v102);
              outlined retain of NavigationColumnState(v103);
              char v46 = 0;
            }
            else
            {
              uint64_t v47 = v103[14];
              uint64_t v48 = v103[15];
              uint64_t v82 = v103[16];
              uint64_t v49 = v103[17];
              uint64_t v76 = v103[17];
              uint64_t v50 = v103[18];
              uint64_t v77 = v103[18];
              uint64_t v79 = v103[15];
              uint64_t v51 = v103[19];
              uint64_t v73 = v103[20];
              uint64_t v52 = v103[22];
              outlined retain of NavigationColumnState(v103);
              outlined copy of NavigationColumnState.ColumnContent(v47, v48, v82, v49, v50, v51, v73, v96);
              outlined retain of NavigationColumnState(v102);
              outlined retain of NavigationColumnState(v103);
              outlined copy of NavigationColumnState.ColumnContent(v47, v79, v82, v76, v77, v51, v73, v96);
              swift_release();
              outlined consume of NavigationColumnState.ReplacedRoot?(v47, v79, v82, v76);
              uint64_t v70 = *(void *)(v52 + 16);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              outlined consume of NavigationColumnState.ColumnContent(v47, v79, v82, v76, v77, v51, v73, v96);
              outlined release of NavigationColumnState(v103);
              if (v70)
              {
                char v46 = 1;
              }
              else
              {
                outlined copy of NavigationColumnState.ColumnContent(v47, v79, v82, v76, v77, v51, v73, v96);
                outlined retain of NavigationColumnState(v103);
                outlined copy of NavigationColumnState.ColumnContent(v47, v79, v82, v76, v77, v51, v73, v96);
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                uint64_t v59 = outlined consume of NavigationColumnState.ReplacedRoot?(v47, v79, v82, v76);
                uint64_t v71 = (*(unsigned __int8 (**)(uint64_t))(*(void *)v96 + 80))(v59);
                swift_release();
                outlined consume of NavigationColumnState.ColumnContent(v47, v79, v82, v76, v77, v51, v73, v96);
                outlined release of NavigationColumnState(v103);
                char v46 = v71 ^ 1;
              }
              uint64_t v37 = v93;
              uint64_t v38 = v94;
              int64_t v39 = v81;
              unsigned int v40 = v91 >> 8;
              uint64_t v44 = v43 - 3;
            }
          }
          if (v44 >= *(void *)(v37 + 16)) {
            goto LABEL_105;
          }
          if (*(void *)(v37 + v42 + 80))
          {
            char v60 = NavigationListState.hasNonEmptySelection.getter();
            if (v46 & 1) != 0 || (v60) {
              goto LABEL_114;
            }
          }
          else if (v46)
          {
            goto LABEL_114;
          }
        }
        else
        {
          outlined retain of NavigationColumnState(v102);
          outlined retain of NavigationColumnState(v103);
        }
        if (v43 - 1 >= v39)
        {
LABEL_92:
          outlined release of NavigationColumnState(v103);
        }
        else
        {
          if ((unint64_t)(v43 - 1) >= *(void *)(v37 + 16)) {
            goto LABEL_108;
          }
          memcpy(v107, (const void *)(v37 + v42 + 640), 0x12BuLL);
          switch(LOBYTE(v107[3]))
          {
            case 1:
              outlined retain of NavigationColumnState(v107);
              if (specialized hasContent #1 <A>() in static NavigationColumnState.isElidedInCollapsedSplit<A>(column:within:splitViewState:)((uint64_t)v105, (uint64_t)v107, v43 - 1, v37))goto LABEL_113; {
              if (v43 >= v39)
              }
                goto LABEL_91;
              if ((unint64_t)v43 >= *(void *)(v37 + 16)) {
                goto LABEL_109;
              }
              memcpy(v108, (const void *)(v37 + v42 + 944), 0x12BuLL);
              switch(LOBYTE(v108[3]))
              {
                case 1:
                  outlined retain of NavigationColumnState(v108);
                  if (specialized hasContent #1 <A>() in static NavigationColumnState.isElidedInCollapsedSplit<A>(column:within:splitViewState:)((uint64_t)v105, (uint64_t)v108, v43, v37))goto LABEL_112; {
                  if ((unint64_t)(v43 + 1) >= *(void *)(v37 + 16))
                  }
                    goto LABEL_90;
                  memcpy(v109, (const void *)(v37 + v42 + 1248), 0x12BuLL);
                  switch(LOBYTE(v109[3]))
                  {
                    case 1:
                      outlined retain of NavigationColumnState(v109);
                      if (specialized hasContent #1 <A>() in static NavigationColumnState.isElidedInCollapsedSplit<A>(column:within:splitViewState:)((uint64_t)v105, (uint64_t)v109, v43 + 1, v37))goto LABEL_111; {
                      if ((unint64_t)(v43 + 2) >= *(void *)(v37 + 16))
                      }
                        goto LABEL_89;
                      break;
                    case 2:
                      outlined retain of NavigationColumnState(v109);
                      char v62 = specialized hasContent #1 <A>() in static NavigationColumnState.isElidedInCollapsedSplit<A>(column:within:splitViewState:)((uint64_t)v105, (uint64_t)v109, v43 + 1, v37);
                      outlined release of NavigationColumnState(v109);
                      goto LABEL_83;
                    case 5:
                      goto LABEL_90;
                    default:
                      goto LABEL_112;
                  }
                  break;
                case 2:
                  outlined retain of NavigationColumnState(v108);
                  char v62 = specialized hasContent #1 <A>() in static NavigationColumnState.isElidedInCollapsedSplit<A>(column:within:splitViewState:)((uint64_t)v105, (uint64_t)v108, v43, v37);
LABEL_83:
                  outlined release of NavigationColumnState(v108);
                  goto LABEL_72;
                case 5:
                  goto LABEL_91;
                default:
                  goto LABEL_113;
              }
              break;
            case 2:
              outlined retain of NavigationColumnState(v107);
              char v62 = specialized hasContent #1 <A>() in static NavigationColumnState.isElidedInCollapsedSplit<A>(column:within:splitViewState:)((uint64_t)v105, (uint64_t)v107, v43 - 1, v37);
LABEL_72:
              outlined release of NavigationColumnState(v107);
              outlined release of NavigationColumnState(v103);
              if (v62) {
                goto LABEL_115;
              }
              goto LABEL_93;
            case 5:
              goto LABEL_92;
            default:
              goto LABEL_114;
          }
          memcpy(__dst, (const void *)(v37 + v42 + 1552), 0x12BuLL);
          switch(LOBYTE(__dst[3]))
          {
            case 1:
              outlined retain of NavigationColumnState(__dst);
              if (specialized hasContent #1 <A>() in static NavigationColumnState.isElidedInCollapsedSplit<A>(column:within:splitViewState:)((uint64_t)v105, (uint64_t)__dst, v43 + 2, v37))goto LABEL_110; {
              if ((unint64_t)(v43 + 3) >= *(void *)(v37 + 16))
              }
              {
                outlined release of NavigationColumnState(__dst);
                uint64_t v38 = v94;
                int64_t v39 = v81;
LABEL_89:
                outlined release of NavigationColumnState(v109);
LABEL_90:
                outlined release of NavigationColumnState(v108);
LABEL_91:
                outlined release of NavigationColumnState(v107);
                goto LABEL_92;
              }
              char v61 = specialized static NavigationColumnState.isElidedInCollapsedSplit<A>(column:within:splitViewState:)(v43 + 3, v37, (uint64_t)v105);
              outlined release of NavigationColumnState(__dst);
              outlined release of NavigationColumnState(v109);
              outlined release of NavigationColumnState(v108);
              uint64_t v38 = v94;
              int64_t v39 = v81;
LABEL_86:
              outlined release of NavigationColumnState(v107);
              outlined release of NavigationColumnState(v103);
              if ((v61 & 1) == 0) {
                goto LABEL_115;
              }
              break;
            case 2:
              outlined retain of NavigationColumnState(__dst);
              char v65 = specialized hasContent #1 <A>() in static NavigationColumnState.isElidedInCollapsedSplit<A>(column:within:splitViewState:)((uint64_t)v105, (uint64_t)__dst, v43 + 2, v37);
              outlined release of NavigationColumnState(__dst);
              outlined release of NavigationColumnState(v109);
              outlined release of NavigationColumnState(v108);
              char v61 = v65 ^ 1;
              goto LABEL_86;
            case 5:
              goto LABEL_89;
            default:
              goto LABEL_111;
          }
        }
LABEL_93:
        outlined release of NavigationColumnState(v102);
        int64_t v45 = v101;
LABEL_94:
        if (v45 != 3)
        {
          v42 += 304;
          uint64_t v66 = v43++ - 1;
          if (v66 >= v39) {
            goto LABEL_96;
          }
          continue;
        }
        swift_bridgeObjectRelease();
LABEL_99:
        outlined copy of NavigationSplitViewState?(v85, v86, v38, v92, v87, v88, v89, v90, v91, (void (*)(uint64_t, uint64_t, uint64_t))outlined consume of Binding<NavigationSplitViewColumn>?, (void (*)(uint64_t, uint64_t))outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?);
        swift_bridgeObjectRelease();
        return 0;
      case 2:
        int64_t v101 = v99 + v43;
        if (v38 == 1) {
          goto LABEL_39;
        }
        if (v84)
        {
          if (v84 != 2) {
            goto LABEL_97;
          }
          outlined retain of NavigationColumnState(v102);
        }
        else
        {
          if ((v92 & 0xFF00) == 0x200) {
            goto LABEL_97;
          }
LABEL_39:
          if (LOBYTE(v103[37]))
          {
            outlined retain of NavigationColumnState(v102);
            outlined retain of NavigationColumnState(v103);
            int v53 = 1;
          }
          else
          {
            uint64_t v97 = v103[21];
            if (v103[21] < 0)
            {
              outlined retain of NavigationColumnState(v102);
              outlined retain of NavigationColumnState(v103);
              int v53 = 0;
            }
            else
            {
              uint64_t v54 = v103[14];
              uint64_t v55 = v103[15];
              uint64_t v56 = v103[16];
              uint64_t v74 = v103[16];
              uint64_t v75 = v103[15];
              uint64_t v83 = v103[17];
              uint64_t v57 = v103[19];
              uint64_t v72 = v103[19];
              uint64_t v78 = v103[20];
              uint64_t v80 = v103[18];
              uint64_t v58 = v103[22];
              outlined retain of NavigationColumnState(v103);
              outlined copy of NavigationColumnState.ColumnContent(v54, v55, v56, v83, v80, v57, v78, v97);
              outlined retain of NavigationColumnState(v102);
              outlined retain of NavigationColumnState(v103);
              outlined copy of NavigationColumnState.ColumnContent(v54, v75, v74, v83, v80, v72, v78, v97);
              swift_release();
              outlined consume of NavigationColumnState.ReplacedRoot?(v54, v75, v74, v83);
              uint64_t v68 = *(void *)(v58 + 16);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              outlined consume of NavigationColumnState.ColumnContent(v54, v75, v74, v83, v80, v72, v78, v97);
              outlined release of NavigationColumnState(v103);
              if (v68)
              {
                int v53 = 1;
              }
              else
              {
                outlined copy of NavigationColumnState.ColumnContent(v54, v75, v74, v83, v80, v72, v78, v97);
                outlined retain of NavigationColumnState(v103);
                outlined copy of NavigationColumnState.ColumnContent(v54, v75, v74, v83, v80, v72, v78, v97);
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                uint64_t v63 = outlined consume of NavigationColumnState.ReplacedRoot?(v54, v75, v74, v83);
                int v69 = (*(uint64_t (**)(uint64_t))(*(void *)v97 + 80))(v63);
                swift_release();
                outlined consume of NavigationColumnState.ColumnContent(v54, v75, v74, v83, v80, v72, v78, v97);
                outlined release of NavigationColumnState(v103);
                int v53 = v69 ^ 1;
              }
              uint64_t v37 = v93;
              uint64_t v38 = v94;
              int64_t v39 = v81;
              unsigned int v40 = v91 >> 8;
            }
          }
          if (v44 >= *(void *)(v37 + 16)) {
            goto LABEL_106;
          }
          if (*(void *)(v37 + v42 + 80))
          {
            int v64 = NavigationListState.hasNonEmptySelection.getter();
            outlined release of NavigationColumnState(v103);
            if ((v53 | v64)) {
              goto LABEL_115;
            }
          }
          else
          {
            outlined release of NavigationColumnState(v103);
            if (v53) {
              goto LABEL_115;
            }
          }
        }
        goto LABEL_93;
      case 5:
        goto LABEL_94;
      default:
        goto LABEL_97;
    }
  }
}

uint64_t NavigationState.StackContent.Views.ViewsSequence.index(before:)(unint64_t a1, char a2, uint64_t a3, char a4)
{
  uint64_t v5 = v4;
  memcpy(__dst, v5, sizeof(__dst));
  outlined init with take of NavigationState.Base(__dst, v127);
  int v10 = _s7SwiftUI15NavigationStateV4Base33_D6901E90061344656248AB2898527223LLOWOg((uint64_t)v127);
  if (!v10) {
    goto LABEL_6;
  }
  if (v10 != 1)
  {
    uint64_t v17 = _s7SwiftUI15NavigationStateV4Base33_D6901E90061344656248AB2898527223LLOWOj0_((uint64_t)v127);
    uint64_t v18 = *(void *)v17;
    uint64_t v20 = *(void *)(v17 + 16);
    uint64_t v19 = *(void *)(v17 + 24);
    uint64_t v22 = *(void *)(v17 + 32);
    uint64_t v21 = *(void *)(v17 + 40);
    uint64_t v24 = *(void *)(v17 + 48);
    uint64_t v23 = *(void *)(v17 + 56);
    uint64_t v25 = *(void *)(v17 + 64);
    unsigned int v26 = *(unsigned __int16 *)(v17 + 72);
    v119[0] = *(void *)(v17 + 8);
    v119[1] = v20;
    uint64_t v109 = v19;
    v119[2] = v19;
    uint64_t v105 = v22;
    v119[3] = v22;
    v119[4] = v21;
    v119[5] = v24;
    v119[6] = v23;
    v119[7] = v25;
    unsigned int v104 = v26;
    __int16 v120 = v26;
    uint64_t v110 = v18;
    uint64_t v100 = v23;
    uint64_t v101 = v25;
    uint64_t v98 = v21;
    uint64_t v99 = v24;
    uint64_t v96 = v119[0];
    uint64_t v97 = v20;
    if (a2)
    {
      uint64_t v115 = *(void *)(v18 + 16);
      outlined init with take of NavigationState.Base(__dst, v118);
      uint64_t v42 = _s7SwiftUI15NavigationStateV4Base33_D6901E90061344656248AB2898527223LLOWOj0_((uint64_t)v118);
      uint64_t v43 = *(void *)(v42 + 8);
      uint64_t v44 = *(void *)(v42 + 16);
      uint64_t v45 = *(void *)(v42 + 24);
      uint64_t v46 = *(void *)(v42 + 32);
      uint64_t v47 = *(void *)(v42 + 40);
      uint64_t v48 = *(void *)(v42 + 48);
      uint64_t v49 = *(void *)(v42 + 56);
      uint64_t v50 = *(void *)(v42 + 64);
      unsigned __int16 v51 = *(_WORD *)(v42 + 72);
      swift_bridgeObjectRetain();
      uint64_t v52 = v47;
      uint64_t v38 = v115;
      outlined copy of NavigationSplitViewState?(v43, v44, v45, v46, v52, v48, v49, v50, v51, (void (*)(uint64_t, uint64_t, uint64_t))outlined copy of Binding<NavigationSplitViewColumn>?, (void (*)(uint64_t, uint64_t))outlined copy of AppIntentExecutor?);
    }
    else
    {
      if ((a1 & 0x8000000000000000) != 0)
      {
LABEL_123:
        __break(1u);
        goto LABEL_124;
      }
      uint64_t v106 = a3;
      char __src = a4;
      if (*(void *)(v18 + 16) <= a1)
      {
LABEL_124:
        __break(1u);
LABEL_125:
        __break(1u);
LABEL_126:
        __break(1u);
LABEL_127:
        __break(1u);
        goto LABEL_128;
      }
      memcpy(v125, (const void *)(v18 + 304 * a1 + 32), 0x12BuLL);
      outlined init with take of NavigationState.Base(__dst, v118);
      uint64_t v27 = _s7SwiftUI15NavigationStateV4Base33_D6901E90061344656248AB2898527223LLOWOj0_((uint64_t)v118);
      uint64_t v28 = *(void *)(v27 + 8);
      uint64_t v29 = *(void *)(v27 + 16);
      uint64_t v30 = *(void *)(v27 + 24);
      uint64_t v114 = a1;
      uint64_t v31 = *(void *)(v27 + 32);
      uint64_t v32 = *(void *)(v27 + 40);
      uint64_t v33 = *(void *)(v27 + 48);
      uint64_t v34 = *(void *)(v27 + 56);
      uint64_t v35 = *(void *)(v27 + 64);
      unsigned __int16 v36 = *(_WORD *)(v27 + 72);
      swift_bridgeObjectRetain();
      uint64_t v37 = v32;
      uint64_t v38 = v114;
      outlined copy of NavigationSplitViewState?(v28, v29, v30, v31, v37, v33, v34, v35, v36, (void (*)(uint64_t, uint64_t, uint64_t))outlined copy of Binding<NavigationSplitViewColumn>?, (void (*)(uint64_t, uint64_t))outlined copy of AppIntentExecutor?);
      uint64_t v39 = specialized NavigationState.StackContent.Views.ViewsSequence.index(before:for:)(v114, 0, v106, __src, (uint64_t)v125);
      if (v40 != -1)
      {
LABEL_11:
        uint64_t v16 = v39;
        outlined copy of NavigationSplitViewState?(v96, v97, v109, v105, v98, v99, v100, v101, v104, (void (*)(uint64_t, uint64_t, uint64_t))outlined consume of Binding<NavigationSplitViewColumn>?, (void (*)(uint64_t, uint64_t))outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?);
        swift_bridgeObjectRelease();
        return v16;
      }
    }
    if (!v38)
    {
LABEL_120:
      swift_bridgeObjectRelease();
      memcpy(v118, __dst, sizeof(v118));
      outlined retain of NavigationState.StackContent.Views.ViewsSequence<A, B>((uint64_t)__dst);
      uint64_t v16 = NavigationState.StackContent.Views.ViewsSequence.startIndex.getter();
      outlined copy of NavigationSplitViewState?(v96, v97, v109, v105, v98, v99, v100, v101, v104, (void (*)(uint64_t, uint64_t, uint64_t))outlined consume of Binding<NavigationSplitViewColumn>?, (void (*)(uint64_t, uint64_t))outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?);
      outlined release of NavigationState.StackContent.Views.ViewsSequence<A, B>((uint64_t)__dst);
      return v16;
    }
    uint64_t v53 = v110;
    if ((unint64_t)(v38 - 1) < *(void *)(v110 + 16))
    {
      if (v104 >> 8 == 2) {
        char v54 = 1;
      }
      else {
        char v54 = 2;
      }
      if (v104 >> 8 == 3) {
        char v54 = 0;
      }
      char v94 = v54;
      unsigned int v95 = v104 >> 8;
      uint64_t v55 = 304 * v38;
      while (1)
      {
        uint64_t v56 = v38 - 1;
        __srca = (void *)(v53 + v55 - 272);
        uint64_t v116 = v38;
        memcpy(v118, __srca, 0x12BuLL);
        uint64_t v57 = v118[14];
        uint64_t v58 = v118[16];
        uint64_t v59 = v118[17];
        uint64_t v60 = v118[18];
        uint64_t v61 = v118[19];
        uint64_t v62 = v118[21];
        uint64_t v63 = v118[22];
        switch(LOBYTE(v118[3]))
        {
          case 1:
            if (v109 == 1) {
              goto LABEL_29;
            }
            if (v95 - 1 < 2) {
              goto LABEL_24;
            }
            if (!v95)
            {
              outlined retain of NavigationColumnState(v118);
              uint64_t v65 = v116;
              uint64_t v66 = v110;
              goto LABEL_77;
            }
            if (BYTE1(v105) && BYTE1(v105) != 3) {
              goto LABEL_24;
            }
LABEL_29:
            if (LOBYTE(v118[37]))
            {
              outlined retain of NavigationColumnState(v118);
LABEL_31:
              uint64_t v65 = v116;
              uint64_t v66 = v110;
              if (v56 < 1) {
                goto LABEL_79;
              }
              int v67 = 1;
LABEL_33:
              if ((unint64_t)(v65 - 2) >= *(void *)(v66 + 16)) {
                goto LABEL_125;
              }
              uint64_t v68 = v66 + v55;
              uint64_t v69 = *(void *)(v66 + v55 - 528);
              if (v69)
              {
                int v70 = *(_DWORD *)(v68 - 496);
                uint64_t v71 = *(void *)(v68 - 504);
                LODWORD(v117[0]) = *(void *)(v68 - 536);
                *((void *)&v117[0] + 1) = v69;
                v117[1] = *(_OWORD *)(v68 - 520);
                *(void *)&v117[2] = v71;
                DWORD2(v117[2]) = v70;
                if ((v67 | NavigationListState.hasNonEmptySelection.getter())) {
                  goto LABEL_79;
                }
              }
              else if (v67)
              {
                goto LABEL_79;
              }
              goto LABEL_77;
            }
            if (v118[21] < 0)
            {
              outlined retain of NavigationColumnState(v118);
              uint64_t v65 = v116;
              uint64_t v66 = v110;
              if (v56 < 1) {
                goto LABEL_77;
              }
              int v67 = 0;
              goto LABEL_33;
            }
            uint64_t v102 = v118[15];
            uint64_t v107 = v118[20];
            outlined retain of NavigationColumnState(v118);
            outlined copy of NavigationColumnState.ColumnContent(v57, v102, v58, v59, v60, v61, v107, v62);
            outlined retain of NavigationColumnState(v118);
            outlined copy of NavigationColumnState.ColumnContent(v57, v102, v58, v59, v60, v61, v107, v62);
            swift_release();
            outlined consume of NavigationColumnState.ReplacedRoot?(v57, v102, v58, v59);
            uint64_t v90 = *(void *)(v63 + 16);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            outlined consume of NavigationColumnState.ColumnContent(v57, v102, v58, v59, v60, v61, v107, v62);
            outlined release of NavigationColumnState(v118);
            if (v90) {
              goto LABEL_31;
            }
            outlined copy of NavigationColumnState.ColumnContent(v57, v102, v58, v59, v60, v61, v107, v62);
            outlined retain of NavigationColumnState(v118);
            outlined copy of NavigationColumnState.ColumnContent(v57, v102, v58, v59, v60, v61, v107, v62);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            uint64_t v75 = outlined consume of NavigationColumnState.ReplacedRoot?(v57, v102, v58, v59);
            int v91 = (*(uint64_t (**)(uint64_t))(*(void *)v62 + 80))(v75);
            swift_release();
            outlined consume of NavigationColumnState.ColumnContent(v57, v102, v58, v59, v60, v61, v107, v62);
            outlined release of NavigationColumnState(v118);
            if (v56 > 0)
            {
              int v67 = v91 ^ 1;
              uint64_t v65 = v116;
              uint64_t v66 = v110;
              goto LABEL_33;
            }
            uint64_t v65 = v116;
            uint64_t v66 = v110;
            if ((v91 & 1) == 0) {
              goto LABEL_79;
            }
LABEL_77:
            uint64_t v82 = *(void *)(v66 + 16);
            if (v65 >= v82)
            {
LABEL_111:
              outlined release of NavigationColumnState(v118);
            }
            else
            {
              memcpy(v121, (const void *)(v66 + v55 + 32), 0x12BuLL);
              switch(LOBYTE(v121[3]))
              {
                case 1:
                  outlined retain of NavigationColumnState(v121);
                  if (specialized hasContent #1 <A>() in static NavigationColumnState.isElidedInCollapsedSplit<A>(column:within:splitViewState:)((uint64_t)v119, (uint64_t)v121, v65, v66))goto LABEL_81; {
                  if (v65 + 1 >= v82)
                  }
                    goto LABEL_110;
                  if (v65 + 1 >= *(void *)(v66 + 16)) {
                    goto LABEL_127;
                  }
                  memcpy(v122, (const void *)(v66 + v55 + 336), 0x12BuLL);
                  switch(LOBYTE(v122[3]))
                  {
                    case 1:
                      outlined retain of NavigationColumnState(v122);
                      if (specialized hasContent #1 <A>() in static NavigationColumnState.isElidedInCollapsedSplit<A>(column:within:splitViewState:)((uint64_t)v119, (uint64_t)v122, v65 + 1, v66))goto LABEL_91; {
                      if (v65 + 2 >= *(void *)(v66 + 16))
                      }
                        goto LABEL_109;
                      memcpy(v123, (const void *)(v66 + v55 + 640), 0x12BuLL);
                      switch(LOBYTE(v123[3]))
                      {
                        case 1:
                          outlined retain of NavigationColumnState(v123);
                          if (specialized hasContent #1 <A>() in static NavigationColumnState.isElidedInCollapsedSplit<A>(column:within:splitViewState:)((uint64_t)v119, (uint64_t)v123, v65 + 2, v66))goto LABEL_97; {
                          uint64_t v84 = v116 + 3;
                          }
                          if (v116 + 3 >= *(void *)(v110 + 16)) {
                            goto LABEL_108;
                          }
                          break;
                        case 2:
                          outlined retain of NavigationColumnState(v123);
                          char v83 = specialized hasContent #1 <A>() in static NavigationColumnState.isElidedInCollapsedSplit<A>(column:within:splitViewState:)((uint64_t)v119, (uint64_t)v123, v65 + 2, v66);
                          outlined release of NavigationColumnState(v123);
                          goto LABEL_93;
                        case 5:
                          goto LABEL_109;
                        default:
                          goto LABEL_91;
                      }
                      break;
                    case 2:
                      outlined retain of NavigationColumnState(v122);
                      char v83 = specialized hasContent #1 <A>() in static NavigationColumnState.isElidedInCollapsedSplit<A>(column:within:splitViewState:)((uint64_t)v119, (uint64_t)v122, v65 + 1, v66);
LABEL_93:
                      outlined release of NavigationColumnState(v122);
                      goto LABEL_83;
                    case 5:
                      goto LABEL_110;
                    default:
                      goto LABEL_81;
                  }
                  break;
                case 2:
                  outlined retain of NavigationColumnState(v121);
                  char v83 = specialized hasContent #1 <A>() in static NavigationColumnState.isElidedInCollapsedSplit<A>(column:within:splitViewState:)((uint64_t)v119, (uint64_t)v121, v65, v66);
LABEL_83:
                  outlined release of NavigationColumnState(v121);
                  outlined release of NavigationColumnState(v118);
                  if ((v83 & 1) == 0) {
                    goto LABEL_25;
                  }
                  goto LABEL_24;
                case 5:
                  goto LABEL_111;
                default:
                  goto LABEL_79;
              }
              memcpy(v124, (const void *)(v110 + v55 + 944), 0x12BuLL);
              switch(LOBYTE(v124[3]))
              {
                case 1:
                  outlined retain of NavigationColumnState(v124);
                  if (specialized hasContent #1 <A>() in static NavigationColumnState.isElidedInCollapsedSplit<A>(column:within:splitViewState:)((uint64_t)v119, (uint64_t)v124, v84, v110))
                  {
                    outlined release of NavigationColumnState(v124);
LABEL_97:
                    outlined release of NavigationColumnState(v123);
LABEL_91:
                    outlined release of NavigationColumnState(v122);
LABEL_81:
                    outlined release of NavigationColumnState(v121);
                    goto LABEL_79;
                  }
                  uint64_t v87 = v116 + 4;
                  if (v116 + 4 >= *(void *)(v110 + 16))
                  {
                    outlined release of NavigationColumnState(v124);
LABEL_108:
                    outlined release of NavigationColumnState(v123);
LABEL_109:
                    outlined release of NavigationColumnState(v122);
LABEL_110:
                    outlined release of NavigationColumnState(v121);
                    goto LABEL_111;
                  }
                  memcpy(v125, (const void *)(v110 + v55 + 1248), 0x12BuLL);
                  switch(LOBYTE(v125[3]))
                  {
                    case 1:
                      outlined retain of NavigationColumnState(v125);
                      if (specialized hasContent #1 <A>() in static NavigationColumnState.isElidedInCollapsedSplit<A>(column:within:splitViewState:)((uint64_t)v119, (uint64_t)v125, v87, v110))
                      {
                        outlined release of NavigationColumnState(v125);
                        goto LABEL_106;
                      }
                      if (v116 + 5 >= *(void *)(v110 + 16))
                      {
                        outlined release of NavigationColumnState(v125);
                        goto LABEL_118;
                      }
                      char v86 = specialized static NavigationColumnState.isElidedInCollapsedSplit<A>(column:within:splitViewState:)(v116 + 5, v110, (uint64_t)v119);
                      outlined release of NavigationColumnState(v125);
                      outlined release of NavigationColumnState(v124);
                      outlined release of NavigationColumnState(v123);
                      break;
                    case 2:
                      outlined retain of NavigationColumnState(v125);
                      char v88 = specialized hasContent #1 <A>() in static NavigationColumnState.isElidedInCollapsedSplit<A>(column:within:splitViewState:)((uint64_t)v119, (uint64_t)v125, v87, v110);
                      outlined release of NavigationColumnState(v125);
                      outlined release of NavigationColumnState(v124);
                      outlined release of NavigationColumnState(v123);
                      char v86 = v88 ^ 1;
                      break;
                    case 5:
LABEL_118:
                      outlined release of NavigationColumnState(v124);
                      outlined release of NavigationColumnState(v123);
                      char v86 = 1;
                      break;
                    default:
LABEL_106:
                      outlined release of NavigationColumnState(v124);
                      outlined release of NavigationColumnState(v123);
                      char v86 = 0;
                      break;
                  }
                  outlined release of NavigationColumnState(v122);
LABEL_102:
                  outlined release of NavigationColumnState(v121);
                  outlined release of NavigationColumnState(v118);
                  if ((v86 & 1) == 0) {
                    goto LABEL_24;
                  }
                  break;
                case 2:
                  outlined retain of NavigationColumnState(v124);
                  char v85 = specialized hasContent #1 <A>() in static NavigationColumnState.isElidedInCollapsedSplit<A>(column:within:splitViewState:)((uint64_t)v119, (uint64_t)v124, v84, v110);
                  outlined release of NavigationColumnState(v124);
                  outlined release of NavigationColumnState(v123);
                  outlined release of NavigationColumnState(v122);
                  char v86 = v85 ^ 1;
                  goto LABEL_102;
                case 5:
                  goto LABEL_108;
                default:
                  goto LABEL_97;
              }
            }
            goto LABEL_25;
          case 2:
            if (v109 == 1) {
              goto LABEL_38;
            }
            if (v94)
            {
              if (v94 != 1) {
                goto LABEL_25;
              }
              goto LABEL_24;
            }
            if ((v105 & 0xFF00) == 0x200) {
              goto LABEL_24;
            }
LABEL_38:
            if (LOBYTE(v118[37]))
            {
              outlined retain of NavigationColumnState(v118);
            }
            else
            {
              if (v118[21] < 0)
              {
                if (v116 == 1) {
                  goto LABEL_120;
                }
                outlined retain of NavigationColumnState(v118);
                int v74 = 0;
                uint64_t v72 = v116;
LABEL_69:
                uint64_t v73 = v110;
                goto LABEL_70;
              }
              uint64_t v103 = v118[15];
              uint64_t v108 = v118[20];
              outlined retain of NavigationColumnState(v118);
              outlined copy of NavigationColumnState.ColumnContent(v57, v103, v58, v59, v60, v61, v108, v62);
              outlined retain of NavigationColumnState(v118);
              outlined copy of NavigationColumnState.ColumnContent(v57, v103, v58, v59, v60, v61, v108, v62);
              swift_release();
              outlined consume of NavigationColumnState.ReplacedRoot?(v57, v103, v58, v59);
              uint64_t v92 = *(void *)(v63 + 16);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              outlined consume of NavigationColumnState.ColumnContent(v57, v103, v58, v59, v60, v61, v108, v62);
              outlined release of NavigationColumnState(v118);
              if (!v92)
              {
                outlined copy of NavigationColumnState.ColumnContent(v57, v103, v58, v59, v60, v61, v108, v62);
                outlined retain of NavigationColumnState(v118);
                outlined copy of NavigationColumnState.ColumnContent(v57, v103, v58, v59, v60, v61, v108, v62);
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                uint64_t v76 = outlined consume of NavigationColumnState.ReplacedRoot?(v57, v103, v58, v59);
                int v93 = (*(uint64_t (**)(uint64_t))(*(void *)v62 + 80))(v76);
                swift_release();
                outlined consume of NavigationColumnState.ColumnContent(v57, v103, v58, v59, v60, v61, v108, v62);
                outlined release of NavigationColumnState(v118);
                uint64_t v72 = v116;
                if (v116 == 1)
                {
                  outlined release of NavigationColumnState(v118);
                  if (v93) {
                    goto LABEL_120;
                  }
                  goto LABEL_24;
                }
                int v74 = v93 ^ 1;
                goto LABEL_69;
              }
            }
            uint64_t v72 = v116;
            uint64_t v73 = v110;
            if (v116 == 1)
            {
LABEL_79:
              outlined release of NavigationColumnState(v118);
LABEL_24:
              memcpy(v117, __srca, 0x12BuLL);
              uint64_t v39 = specialized NavigationState.StackContent.Views.ViewsSequence.lastIndex(for:stateIndex:)(v117, v56);
              if (v64 != -1) {
                goto LABEL_11;
              }
LABEL_25:
              if (v56 < 1) {
                goto LABEL_120;
              }
              goto LABEL_26;
            }
            int v74 = 1;
LABEL_70:
            if ((unint64_t)(v72 - 2) >= *(void *)(v73 + 16)) {
              goto LABEL_126;
            }
            uint64_t v77 = v73 + v55;
            uint64_t v78 = *(void *)(v73 + v55 - 528);
            if (v78)
            {
              int v79 = *(_DWORD *)(v77 - 496);
              uint64_t v80 = *(void *)(v77 - 504);
              LODWORD(v117[0]) = *(void *)(v77 - 536);
              *((void *)&v117[0] + 1) = v78;
              v117[1] = *(_OWORD *)(v77 - 520);
              *(void *)&v117[2] = v80;
              DWORD2(v117[2]) = v79;
              int v81 = NavigationListState.hasNonEmptySelection.getter();
              outlined release of NavigationColumnState(v118);
              if ((v74 | v81)) {
                goto LABEL_24;
              }
            }
            else
            {
              outlined release of NavigationColumnState(v118);
              if (v74) {
                goto LABEL_24;
              }
            }
LABEL_26:
            uint64_t v53 = v110;
            v55 -= 304;
            uint64_t v38 = v56;
            if ((unint64_t)(v116 - 2) >= *(void *)(v110 + 16)) {
              goto LABEL_122;
            }
            break;
          case 5:
            goto LABEL_25;
          default:
            goto LABEL_24;
        }
      }
    }
LABEL_122:
    __break(1u);
    goto LABEL_123;
  }
  uint64_t v113 = a1;
  uint64_t v11 = (void *)_s7SwiftUI15NavigationStateV4Base33_D6901E90061344656248AB2898527223LLOWOj0_((uint64_t)v127);
  outlined init with take of NavigationState.Base(__dst, v118);
  uint64_t v12 = (uint64_t *)_s7SwiftUI15NavigationStateV4Base33_D6901E90061344656248AB2898527223LLOWOj0_((uint64_t)v118);
  uint64_t v13 = v11[38];
  outlined retain of (NavigationColumnState, precedingDestinations: ResolvedNavigationDestinations?)(v12);
  outlined consume of ResolvedNavigationDestinations?(v13);
  if (a2)
  {
    memcpy(v125, v11, 0x12BuLL);
    uint64_t v14 = specialized NavigationState.StackContent.Views.ViewsSequence.lastIndex(for:stateIndex:)(v125, 0);
    if (v41 != -1) {
      goto LABEL_13;
    }
LABEL_128:
    __break(1u);
    JUMPOUT(0x1876EBA34);
  }
  memcpy(v125, v11, 0x12BuLL);
  uint64_t v14 = specialized NavigationState.StackContent.Views.ViewsSequence.index(before:for:)(v113, 0, a3, a4, (uint64_t)v125);
  if (v15 != -1)
  {
LABEL_13:
    uint64_t v16 = v14;
    outlined release of NavigationColumnState(v11);
    return v16;
  }
  __break(1u);
LABEL_6:
  _s7SwiftUI15NavigationStateV4Base33_D6901E90061344656248AB2898527223LLOWOj0_((uint64_t)v127);
  memcpy(v118, __dst, sizeof(v118));
  return NavigationState.StackContent.Views.ViewsSequence.startIndex.getter();
}

void NavigationState.StackContent.Views.ViewsSequence.subscript.getter(unint64_t a1@<X0>, char a2@<W1>, unint64_t a3@<X2>, char a4@<W3>, void *a5@<X4>, uint64_t *a6@<X8>)
{
  uint64_t v7 = v6;
  memcpy(__dst, v7, sizeof(__dst));
  outlined init with take of NavigationState.Base(__dst, v50);
  int v14 = _s7SwiftUI15NavigationStateV4Base33_D6901E90061344656248AB2898527223LLOWOg((uint64_t)v50);
  if (!v14)
  {
    uint64_t v19 = _s7SwiftUI15NavigationStateV4Base33_D6901E90061344656248AB2898527223LLOWOj0_((uint64_t)v50);
    uint64_t v20 = *(void *)v19;
    uint64_t v21 = *(void *)(v19 + 16);
    unsigned __int8 v22 = *(unsigned char *)(v19 + 8);
    memcpy(v51, __dst, sizeof(v51));
    NavigationState.StackContent.Views.ViewsSequence.nonReplacedRoot(stateIndex:baseDepth:key:isStacked:)(0, 0, v20, v22, v21, a5, (uint64_t)a6);
    return;
  }
  char v43 = a2;
  char v41 = a6;
  uint64_t v42 = a5;
  if (v14 != 1)
  {
    uint64_t v23 = _s7SwiftUI15NavigationStateV4Base33_D6901E90061344656248AB2898527223LLOWOj0_((uint64_t)v50);
    uint64_t v24 = *(void *)v23;
    uint64_t v25 = *(void *)(v23 + 8);
    uint64_t v26 = *(void *)(v23 + 16);
    uint64_t v27 = *(void *)(v23 + 24);
    uint64_t v29 = *(void *)(v23 + 32);
    uint64_t v28 = *(void *)(v23 + 40);
    uint64_t v30 = *(void *)(v23 + 48);
    uint64_t v31 = *(void *)(v23 + 56);
    uint64_t v32 = *(void *)(v23 + 64);
    unsigned __int16 v33 = *(_WORD *)(v23 + 72);
    v47[0] = v25;
    v47[1] = v26;
    v47[2] = v27;
    v47[3] = v29;
    v47[4] = v28;
    v47[5] = v30;
    void v47[6] = v31;
    v47[7] = v32;
    unsigned __int16 v48 = v33;
    if (v43)
    {
LABEL_17:
      __break(1u);
LABEL_18:
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      return;
    }
    if ((a1 & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else if (*(void *)(v24 + 16) >= a1)
    {
      uint64_t v38 = v32;
      uint64_t v39 = v31;
      uint64_t v40 = v30;
      uint64_t v44 = v28;
      outlined retain of NavigationState.Base((uint64_t)__dst, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))outlined copy of NavigationState.Base);
      uint64_t v34 = swift_bridgeObjectRetain();
      unint64_t v35 = a1;
      uint64_t v36 = specialized Collection<>.collapsedItemCount<A>(within:splitViewState:)(v34, (uint64_t)v47, 0, (2 * a1) | 1);
      swift_bridgeObjectRelease();
      memcpy(v51, __dst, sizeof(v51));
      if (*(void *)(v24 + 16) > v35)
      {
        memcpy(__src, (const void *)(v24 + 304 * v35 + 32), 0x12BuLL);
        outlined retain of NavigationColumnState(__src);
        swift_bridgeObjectRelease();
        memcpy(v46, __src, 0x12BuLL);
        NavigationState.StackContent.Views.ViewsSequence.view(at:state:baseDepth:)(v35, 0, a3, a4, (uint64_t)v46, v36, v42, v41);
        outlined copy of NavigationSplitViewState?(v25, v26, v27, v29, v44, v40, v39, v38, v33, (void (*)(uint64_t, uint64_t, uint64_t))outlined consume of Binding<NavigationSplitViewColumn>?, (void (*)(uint64_t, uint64_t))outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?);
        uint64_t v18 = __src;
        goto LABEL_12;
      }
      goto LABEL_16;
    }
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  unint64_t v37 = a1;
  char v15 = (void *)_s7SwiftUI15NavigationStateV4Base33_D6901E90061344656248AB2898527223LLOWOj0_((uint64_t)v50);
  outlined init with take of NavigationState.Base(__dst, __src);
  uint64_t v16 = (uint64_t *)_s7SwiftUI15NavigationStateV4Base33_D6901E90061344656248AB2898527223LLOWOj0_((uint64_t)__src);
  uint64_t v17 = v15[38];
  outlined retain of (NavigationColumnState, precedingDestinations: ResolvedNavigationDestinations?)(v16);
  outlined consume of ResolvedNavigationDestinations?(v17);
  if ((v43 & 1) != 0 || v37) {
    goto LABEL_18;
  }
  memcpy(v51, __dst, sizeof(v51));
  memcpy(v46, v15, 0x12BuLL);
  NavigationState.StackContent.Views.ViewsSequence.view(at:state:baseDepth:)(0, 0, a3, a4, (uint64_t)v46, 0, a5, a6);
  uint64_t v18 = v15;
LABEL_12:
  outlined release of NavigationColumnState(v18);
}

void NavigationState.StackContent.Views.ViewsSequence.view(at:state:baseDepth:)(uint64_t a1@<X0>, char a2@<W1>, unint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X5>, void *a7@<X6>, uint64_t *a8@<X8>)
{
  int v9 = v8;
  uint64_t v12 = *(void **)(a5 + 16);
  unsigned int v13 = *(unsigned __int8 *)(a5 + 24);
  uint64_t v14 = *(void *)(a5 + 32);
  uint64_t v15 = *(void *)(a5 + 168);
  uint64_t v17 = v8[49];
  uint64_t v16 = v8[50];
  if (a4)
  {
    uint64_t v109 = *(void *)(a5 + 32);
    uint64_t v110 = a7;
    if (a4 == 1)
    {
      if ((v15 & 0x8000000000000000) == 0)
      {
        uint64_t v19 = v12;
        uint64_t v108 = v17;
        uint64_t v111 = v16;
        LODWORD(v107) = v13;
        uint64_t v20 = *(void *)(a5 + 176);
        uint64_t v21 = *(uint64_t (**)(uint64_t))(*(void *)v15 + 88);
        uint64_t v22 = swift_retain();
        uint64_t v23 = v21(v22);
        uint64_t v24 = v23 + 1;
        if (!__OFADD__(v23, 1))
        {
          uint64_t v25 = (void *)(v24 + a3);
          if (!__OFADD__(v24, a3))
          {
            if ((a3 & 0x8000000000000000) == 0)
            {
              if (*(void *)(v20 + 16) > a3)
              {
                uint64_t v26 = (char *)v25 + a6;
                if (!__OFADD__(a6, v25))
                {
                  uint64_t v27 = a8;
                  uint64_t v28 = (void *)(v20 + 56 * a3);
                  uint64_t v29 = v28[4];
                  v125[0] = v25;
                  v125[1] = v19;
                  LOBYTE(v125[2]) = (_BYTE)v107;
                  v125[3] = v109;
                  v125[4] = v26;
                  LOBYTE(v125[5]) = 1;
                  uint64_t v30 = v110[3];
                  uint64_t v31 = v110[5];
                  uint64_t v110 = v25;
                  swift_retain();
                  uint64_t v111 = AnyNavigationLinkPresentedView.view<A>(at:applying:)((uint64_t)v125, v108, v111, v29, v30, v31);
                  swift_release();
                  if (v107 >= 3) {
                    char v32 = 3;
                  }
                  else {
                    char v32 = (char)v107;
                  }
                  uint64_t v33 = v28[5];
                  uint64_t v34 = v28[6];
                  uint64_t v35 = v28[7];
                  uint64_t v36 = v28[8];
                  swift_retain();
                  swift_retain();
                  outlined copy of Text.LineStyle?(v34, v35);
                  swift_retain();
                  swift_release();
                  swift_retain();
                  outlined copy of Text.LineStyle?(v34, v35);
                  swift_release();
                  swift_release();
                  outlined consume of Text.LineStyle?(v34, v35);
                  swift_release();
                  unsigned char v27[4] = v34;
                  v27[5] = v35;
                  v27[6] = v36;
                  *((unsigned char *)v27 + 64) = 1;
                  *uint64_t v27 = v111;
                  *((unsigned char *)v27 + 8) = v32;
                  _OWORD v27[2] = (uint64_t)v110;
                  v27[3] = v33;
                  return;
                }
                goto LABEL_48;
              }
LABEL_47:
              __break(1u);
LABEL_48:
              __break(1u);
              goto LABEL_49;
            }
LABEL_46:
            __break(1u);
            goto LABEL_47;
          }
          goto LABEL_44;
        }
        __break(1u);
LABEL_43:
        __break(1u);
LABEL_44:
        __break(1u);
        goto LABEL_45;
      }
LABEL_52:
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      return;
    }
    uint64_t v59 = *(void *)(a5 + 112);
    uint64_t v58 = *(void *)(a5 + 120);
    uint64_t v61 = *(void *)(a5 + 128);
    uint64_t v60 = *(void *)(a5 + 136);
    uint64_t v62 = *(void *)(a5 + 144);
    uint64_t v63 = *(uint64_t **)(a5 + 160);
    uint64_t v64 = v9[51];
    unint64_t v65 = v59 & 0xF000000000000007;
    if (v15 < 0)
    {
      uint64_t v108 = v9[51];
      uint64_t v78 = v17;
      uint64_t v79 = v16;
      if (v65 == 0xF000000000000007)
      {
        int v81 = v12;
        memcpy(v125, v9, sizeof(v125));
        uint64_t v126 = v78;
        uint64_t v127 = v79;
        uint64_t v128 = v108;
        if (a2)
        {
LABEL_51:
          __break(1u);
          goto LABEL_52;
        }
        uint64_t v72 = (uint64_t)a8;
        uint64_t v73 = a1;
        uint64_t v74 = a6;
        uint64_t v75 = (uint64_t)v81;
        unsigned __int8 v76 = v13;
        uint64_t v77 = v109;
        goto LABEL_27;
      }
      uint64_t v105 = a6;
      uint64_t v107 = v12;
      if (v59 < 0)
      {
        uint64_t v111 = v58;
        uint64_t v103 = v60;
        uint64_t v104 = v61;
        uint64_t v101 = v63;
        uint64_t v102 = v62;
        outlined copy of NavigationColumnState.ReplacedRoot?(v59, v58, v61, v60);
        goto LABEL_37;
      }
    }
    else
    {
      if (v65 == 0xF000000000000007)
      {
        int v67 = v12;
        uint64_t v68 = v9;
        uint64_t v69 = v16;
        uint64_t v70 = v17;
        uint64_t v71 = v64;
        memcpy(v125, v68, sizeof(v125));
        uint64_t v126 = v70;
        uint64_t v127 = v69;
        uint64_t v128 = v71;
        if (a2)
        {
LABEL_49:
          __break(1u);
          goto LABEL_50;
        }
        uint64_t v72 = (uint64_t)a8;
        uint64_t v73 = a1;
        uint64_t v74 = a6;
        uint64_t v75 = (uint64_t)v67;
        unsigned __int8 v76 = v13;
        uint64_t v77 = v109;
LABEL_27:
        NavigationState.StackContent.Views.ViewsSequence.nonReplacedRoot(stateIndex:baseDepth:key:isStacked:)(v73, v74, v75, v76, v77, v110, v72);
        return;
      }
      uint64_t v107 = v12;
      uint64_t v108 = v64;
      uint64_t v105 = a6;
      uint64_t v78 = v17;
      uint64_t v79 = v16;
      if (v59 < 0)
      {
        uint64_t v111 = v58;
        uint64_t v103 = v60;
        uint64_t v104 = v61;
        uint64_t v101 = v63;
        uint64_t v102 = v62;
        outlined copy of NavigationColumnState.ReplacedRoot(v59, v58, v61, v60);
LABEL_37:
        uint64_t v100 = v59 & 0x7FFFFFFFFFFFFFFFLL;
        uint64_t v129 = 0;
        long long v130 = v107;
        LOBYTE(v131) = v13;
        uint64_t v132 = v109;
        uint64_t v133 = v105;
        LOBYTE(v134) = v15 >= 0;
        memcpy(v125, v9, sizeof(v125));
        uint64_t v126 = v78;
        uint64_t v127 = v79;
        uint64_t v128 = v108;
        uint64_t v90 = NavigationState.StackContent.Views.ViewsSequence.replacedRootModifier(key:)((uint64_t)v107, v13, v109, (uint64_t)v110);
        uint64_t v92 = v91;
        uint64_t v93 = type metadata accessor for ModifiedContent();
        uint64_t v112 = v110[5];
        uint64_t v113 = &protocol witness table for ReplacedRootDismissModifier;
        uint64_t WitnessTable = swift_getWitnessTable();
        uint64_t v95 = AnyNavigationLinkPresentedView.view<A>(at:applying:)((uint64_t)&v129, (uint64_t)v90, v92, v59 & 0x7FFFFFFFFFFFFFFFLL, v93, WitnessTable);
        swift_release();
        if (v13 >= 3) {
          char v96 = 3;
        }
        else {
          char v96 = v13;
        }
        uint64_t v97 = v111;
        swift_retain();
        uint64_t v98 = v103;
        outlined copy of Text.LineStyle?(v104, v103);
        swift_release();
        swift_release();
        outlined consume of Text.LineStyle?(v104, v103);
        swift_release();
        a8[4] = v104;
        a8[5] = v98;
        a8[6] = v102;
        *((unsigned char *)a8 + 64) = 1;
        *a8 = v95;
        *((unsigned char *)a8 + 8) = v96;
        a8[2] = 0;
        a8[3] = v97;
        return;
      }
    }
    swift_retain();
    memcpy(v125, v9, sizeof(v125));
    uint64_t v126 = v78;
    uint64_t v111 = v79;
    uint64_t v127 = v79;
    uint64_t v128 = v108;
    if (a2)
    {
LABEL_50:
      __break(1u);
      goto LABEL_51;
    }
    NavigationState.StackContent.Views.ViewsSequence.destinations(before:)(a1, (uint64_t)&v129);
    uint64_t v100 = v131;
    uint64_t v101 = v130;
    uint64_t v102 = v134;
    uint64_t v103 = v129;
    uint64_t v104 = v135;
    v99[1] = v136;
    v99[2] = v133;
    v116[0] = v129;
    v116[1] = v130;
    v116[2] = v131;
    uint64_t v117 = v132;
    uint64_t v118 = v133;
    uint64_t v119 = v134;
    uint64_t v120 = v135;
    uint64_t v121 = v136;
    uint64_t v122 = v137;
    char v123 = v138;
    uint64_t v124 = v139;
    memcpy(v125, v9, sizeof(v125));
    uint64_t v126 = v78;
    uint64_t v127 = v111;
    uint64_t v128 = v108;
    uint64_t v82 = NavigationState.StackContent.Views.ViewsSequence.replacedRootModifier(key:)((uint64_t)v107, v13, v109, (uint64_t)v110);
    uint64_t v84 = v83;
    v125[0] = 0;
    v125[1] = v107;
    LOBYTE(v125[2]) = v13;
    v125[3] = v109;
    v125[4] = v105;
    LOBYTE(v125[5]) = v15 >= 0;
    uint64_t v85 = type metadata accessor for ModifiedContent();
    uint64_t v114 = v110[5];
    uint64_t v115 = &protocol witness table for ReplacedRootDismissModifier;
    uint64_t v86 = swift_getWitnessTable();
    uint64_t v87 = AnyNavigationLinkPresentedValue.view<A>(basedOn:applying:apparentPosition:)((uint64_t)v116, (uint64_t)v82, v84, (uint64_t)v125, v59, v85, v86);
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    uint64_t v88 = swift_release();
    if (v13 >= 3) {
      char v89 = 3;
    }
    else {
      char v89 = v13;
    }
    (*(void (**)(uint64_t))(*(void *)v59 + 96))(v88);
    swift_release();
    *((unsigned char *)a8 + 64) = 0;
    *a8 = v87;
    *((unsigned char *)a8 + 8) = v89;
    a8[2] = 0;
  }
  else
  {
    if (v15 < 0) {
      goto LABEL_52;
    }
    unint64_t v37 = (void *)(a3 + 1);
    if (__OFADD__(a3, 1)) {
      goto LABEL_43;
    }
    uint64_t v38 = *(void *)(a5 + 168);
    unsigned int v39 = *(unsigned __int8 *)(a5 + 24);
    uint64_t v107 = a8;
    uint64_t v40 = *(void *)(a5 + 200);
    uint64_t v42 = *(void *)(a5 + 208);
    uint64_t v41 = *(void *)(a5 + 216);
    uint64_t v44 = *(void *)(a5 + 224);
    uint64_t v43 = *(void *)(a5 + 232);
    uint64_t v46 = *(void *)(a5 + 240);
    uint64_t v45 = *(void *)(a5 + 248);
    uint64_t v47 = *(void *)(a5 + 256);
    char v48 = *(unsigned char *)(a5 + 264);
    uint64_t v49 = *(void *)(a5 + 272);
    v125[0] = *(void *)(a5 + 192);
    v125[1] = v40;
    v125[2] = v42;
    v125[3] = v41;
    v125[4] = v44;
    v125[5] = v43;
    v125[6] = v46;
    v125[7] = v45;
    v125[8] = v47;
    LOBYTE(v125[9]) = v48;
    v125[10] = v49;
    if (__OFADD__(a6, v37))
    {
LABEL_45:
      __break(1u);
      goto LABEL_46;
    }
    uint64_t v129 = a3 + 1;
    long long v130 = v12;
    LOBYTE(v131) = v39;
    uint64_t v132 = v14;
    uint64_t v133 = (uint64_t)v37 + a6;
    LOBYTE(v134) = 1;
    uint64_t v109 = a7[3];
    uint64_t v110 = v37;
    uint64_t v105 = a7[5];
    uint64_t v106 = v38;
    uint64_t v111 = v16;
    uint64_t v108 = v17;
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    swift_retain();
    uint64_t v111 = AnyNavigationPath.view<A>(basedOn:applying:index:apparentPosition:)((uint64_t)v116, (uint64_t)v125, v108, v111, a3, (uint64_t)&v129, v106, v109, v105);
    swift_release();
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v39 >= 3) {
      char v50 = 3;
    }
    else {
      char v50 = v39;
    }
    unsigned __int16 v51 = __swift_project_boxed_opaque_existential_1(v116, v117);
    double v52 = MEMORY[0x1F4188790](v51);
    (*(void (**)(char *, double))(v54 + 16))((char *)v99 - ((v53 + 15) & 0xFFFFFFFFFFFFFFF0), v52);
    AnyHashable.init<A>(_:)();
    swift_release();
    LOBYTE(v125[5]) = 0;
    uint64_t v55 = v107;
    uint64_t *v107 = v111;
    *((unsigned char *)v55 + 8) = v50;
    v55[2] = (uint64_t)v110;
    outlined init with take of NavigationStackViewSource((uint64_t)v125, (uint64_t)(v55 + 3));
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v116);
  }
}

double NavigationState.StackContent.Views.ViewsSequence.nonReplacedRoot(stateIndex:baseDepth:key:isStacked:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unsigned __int8 a4@<W3>, uint64_t a5@<X4>, void *a6@<X6>, uint64_t a7@<X8>)
{
  uint64_t v25 = a2;
  uint64_t v26 = a5;
  uint64_t v23 = a1;
  uint64_t v24 = a3;
  unsigned int v11 = a4;
  uint64_t v12 = type metadata accessor for _VariadicView.Tree();
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x1F4188790](v12);
  uint64_t v15 = (char *)&v22 - v14;
  memcpy(v29, (const void *)v7, 0x188uLL);
  uint64_t v16 = *(void (**)(uint64_t *))(v7 + 392);
  v29[49] = (uint64_t)v16;
  long long v22 = *(_OWORD *)(v7 + 400);
  long long v30 = v22;
  NavigationState.StackContent.Views.ViewsSequence.formattedRoot(_:)(v23);
  v29[0] = 0;
  v29[1] = v24;
  LOBYTE(v29[2]) = a4;
  v29[3] = v26;
  v29[4] = v25;
  LOBYTE(v29[5]) = v11 == 3;
  uint64_t v18 = a6[3];
  uint64_t v17 = a6[4];
  uint64_t v27 = MEMORY[0x1E4F3F8C0];
  uint64_t v28 = v17;
  if (v11 >= 3) {
    LOBYTE(v11) = 3;
  }
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v20 = specialized static ResolvedNavigationDestinations.prepareToPresent<A, B>(view:at:shouldUpdateDestinations:applying:)((uint64_t)v15, v29, v16, v22, v12, v18, WitnessTable, a6[5]);
  (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
  *(void *)(a7 + 56) = 0;
  double result = 0.0;
  *(_OWORD *)(a7 + 40) = 0u;
  *(_OWORD *)(a7 + 24) = 0u;
  *(unsigned char *)(a7 + 64) = 2;
  *(void *)a7 = v20;
  *(unsigned char *)(a7 + 8) = v11;
  *(void *)(a7 + 16) = 0;
  return result;
}

uint64_t (*NavigationState.StackContent.Views.ViewsSequence.replacedRootModifier(key:)(uint64_t a1, char a2, uint64_t a3, uint64_t a4))(uint64_t a1)
{
  memcpy(__dst, v4, 0x1A0uLL);
  uint64_t v9 = swift_allocObject();
  long long v10 = *(_OWORD *)(a4 + 32);
  *(_OWORD *)(v9 + 16) = *(_OWORD *)(a4 + 16);
  *(_OWORD *)(v9 + 32) = v10;
  memcpy((void *)(v9 + 48), v4, 0x1A0uLL);
  *(void *)(v9 + 464) = a1;
  *(unsigned char *)(v9 + 472) = a2;
  *(void *)(v9 + 480) = a3;
  outlined retain of NavigationState.StackContent.Views.ViewsSequence<A, B>((uint64_t)__dst);
  return partial apply for closure #1 in NavigationState.StackContent.Views.ViewsSequence.replacedRootModifier(key:);
}

uint64_t NavigationState.StackContent.Views.ViewsSequence.destinations(before:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v3 = v2;
  outlined init with take of NavigationState.Base(v3, __dst);
  outlined init with take of NavigationState.Base(__dst, v36);
  int v6 = _s7SwiftUI15NavigationStateV4Base33_D6901E90061344656248AB2898527223LLOWOg((uint64_t)v36);
  if (v6 == 1)
  {
    uint64_t v7 = (void *)_s7SwiftUI15NavigationStateV4Base33_D6901E90061344656248AB2898527223LLOWOj0_((uint64_t)v36);
    uint64_t v8 = v7[38];
    if (v8) {
      BOOL v9 = a1 == 0;
    }
    else {
      BOOL v9 = 0;
    }
    if (!v9) {
      goto LABEL_15;
    }
    uint64_t v11 = v7[43];
    uint64_t v10 = v7[44];
    uint64_t v13 = v7[47];
    uint64_t v12 = v7[48];
    uint64_t v15 = v7[45];
    uint64_t v14 = v7[46];
    uint64_t v16 = v7[41];
    uint64_t v17 = v7[42];
    uint64_t v19 = v7[39];
    uint64_t v18 = v7[40];
    *(void *)a2 = v8;
    *(void *)(a2 + 8) = v19;
    *(void *)(a2 + 16) = v18;
    *(void *)(a2 + 24) = v16;
    *(void *)(a2 + 32) = v17;
    *(void *)(a2 + 40) = v11;
    *(void *)(a2 + 48) = v10;
    *(void *)(a2 + 56) = v15;
    *(void *)(a2 + 64) = v14;
    *(unsigned char *)(a2 + 72) = v13;
    *(void *)(a2 + 80) = v12;
LABEL_12:
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return swift_retain();
  }
  if (v6 != 2) {
    goto LABEL_14;
  }
  uint64_t v20 = _s7SwiftUI15NavigationStateV4Base33_D6901E90061344656248AB2898527223LLOWOj0_((uint64_t)v36);
  unint64_t v21 = a1 - 1;
  if (a1 >= 1)
  {
    if (v21 < *(void *)(*(void *)v20 + 16))
    {
      uint64_t v22 = *(void *)v20 + 304 * v21;
      uint64_t v24 = *(void *)(v22 + 224);
      uint64_t v23 = *(void *)(v22 + 232);
      uint64_t v26 = *(void *)(v22 + 240);
      uint64_t v25 = *(void *)(v22 + 248);
      uint64_t v28 = *(void *)(v22 + 256);
      uint64_t v27 = *(void *)(v22 + 264);
      uint64_t v29 = *(void *)(v22 + 272);
      uint64_t v30 = *(void *)(v22 + 280);
      uint64_t v31 = *(void *)(v22 + 288);
      char v32 = *(unsigned char *)(v22 + 296);
      uint64_t v33 = *(void *)(v22 + 304);
      *(void *)a2 = v24;
      *(void *)(a2 + 8) = v23;
      *(void *)(a2 + 16) = v26;
      *(void *)(a2 + 24) = v25;
      *(void *)(a2 + 32) = v28;
      *(void *)(a2 + 40) = v27;
      *(void *)(a2 + 48) = v29;
      *(void *)(a2 + 56) = v30;
      *(void *)(a2 + 64) = v31;
      *(unsigned char *)(a2 + 72) = v32;
      *(void *)(a2 + 80) = v33;
      goto LABEL_12;
    }
    __break(1u);
LABEL_14:
    _s7SwiftUI15NavigationStateV4Base33_D6901E90061344656248AB2898527223LLOWOj0_((uint64_t)v36);
  }
LABEL_15:
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t NavigationState.StackContent.Views.ViewsSequence.formattedRoot(_:)(uint64_t a1)
{
  return _VariadicView.Tree.init(root:content:)();
}

uint64_t closure #1 in NavigationState.StackContent.Views.ViewsSequence.replacedRootModifier(key:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v13 = *(void *)(a7 - 8);
  uint64_t v14 = MEMORY[0x1F4188790](a1);
  uint64_t v16 = (char *)&v19 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(uint64_t))(v17 + 392))(v14);
  uint64_t v20 = a3;
  char v21 = a4;
  uint64_t v22 = a5;
  MEMORY[0x18C10D370](&v20, a7, &type metadata for ReplacedRootDismissModifier, a9);
  return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v16, a7);
}

uint64_t static NavigationState.StackContent.Views.ViewsSequence.Index.< infix(_:_:)(uint64_t a1, int a2, uint64_t a3, char a4, uint64_t a5, int a6, uint64_t a7, char a8)
{
  if ((a6 | a2)) {
    return a6 & ((a2 & 1) == 0);
  }
  if (a1 < a5) {
    return 1;
  }
  if (a5 < a1) {
    return 0;
  }
  if (a4)
  {
    BOOL v10 = a8 == 1 && a3 < a7;
    BOOL v12 = a8 != 2 || a7 != 0;
    if (a4 == 1) {
      return v10;
    }
    else {
      return v12;
    }
  }
  else if (a8)
  {
    return a8 == 1;
  }
  else
  {
    return a3 < a7;
  }
}

BOOL static NavigationState.StackContent.Views.ViewsSequence.Index.Kind.< infix(_:_:)(uint64_t a1, char a2, uint64_t a3, char a4)
{
  if (a2)
  {
    BOOL v5 = a4 == 1 && a1 < a3;
    BOOL v7 = a4 != 2 || a3 != 0;
    if (a2 == 1) {
      return v5;
    }
    else {
      return v7;
    }
  }
  else if (a4)
  {
    return a4 == 1;
  }
  else
  {
    return a1 < a3;
  }
}

uint64_t static NavigationState.StackContent.Views.ViewsSequence.Index.Kind.== infix(_:_:)(uint64_t a1, char a2, uint64_t a3, char a4)
{
  if (a2)
  {
    if (a2 == 1)
    {
      if (a4 != 1) {
        return 0;
      }
      return a1 == a3;
    }
    if (a4 == 2 && !a3) {
      return 1;
    }
  }
  else if (!a4)
  {
    return a1 == a3;
  }
  return 0;
}

BOOL protocol witness for static Comparable.< infix(_:_:) in conformance NavigationState.StackContent.Views.ViewsSequence<A, B>.Index.Kind(uint64_t a1, uint64_t a2)
{
  return static NavigationState.StackContent.Views.ViewsSequence.Index.Kind.< infix(_:_:)(*(void *)a1, *(unsigned char *)(a1 + 8), *(void *)a2, *(unsigned char *)(a2 + 8));
}

uint64_t protocol witness for static Comparable.<= infix(_:_:) in conformance NavigationState.StackContent.Views.ViewsSequence<A, B>.Index.Kind()
{
  return MEMORY[0x1F4183768]();
}

uint64_t protocol witness for static Comparable.>= infix(_:_:) in conformance NavigationState.StackContent.Views.ViewsSequence<A, B>.Index.Kind()
{
  return MEMORY[0x1F4183760]();
}

uint64_t protocol witness for static Comparable.> infix(_:_:) in conformance NavigationState.StackContent.Views.ViewsSequence<A, B>.Index.Kind()
{
  return MEMORY[0x1F4183758]();
}

BOOL static NavigationState.StackContent.Views.ViewsSequence.Index.== infix(_:_:)(uint64_t a1, char a2, uint64_t a3, char a4, uint64_t a5, char a6, uint64_t a7, char a8)
{
  if (a2)
  {
    if ((a6 & 1) == 0) {
      return 0;
    }
LABEL_6:
    if (a4)
    {
      if (a4 != 1) {
        return a8 == 2 && !a7;
      }
      if (a8 != 1) {
        return 0;
      }
    }
    else if (a8)
    {
      return 0;
    }
    return a3 == a7;
  }
  BOOL result = 0;
  if ((a6 & 1) == 0 && a1 == a5) {
    goto LABEL_6;
  }
  return result;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance NavigationState.StackContent.Views.ViewsSequence<A, B>.Index.Kind(uint64_t a1, uint64_t a2)
{
  return static NavigationState.StackContent.Views.ViewsSequence.Index.Kind.== infix(_:_:)(*(void *)a1, *(unsigned char *)(a1 + 8), *(void *)a2, *(unsigned char *)(a2 + 8));
}

uint64_t protocol witness for static Comparable.< infix(_:_:) in conformance NavigationState.StackContent.Views.ViewsSequence<A, B>.Index(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static Comparable.< infix(_:_:) in conformance NavigationState.StackContent.Views.ViewsSequence<A, B>.Index(a1, a2, a3, a4, (uint64_t (*)(void, void, void, void, void, void, void, void))static NavigationState.StackContent.Views.ViewsSequence.Index.< infix(_:_:));
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance NavigationState.StackContent.Views.ViewsSequence<A, B>.Index(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static Comparable.< infix(_:_:) in conformance NavigationState.StackContent.Views.ViewsSequence<A, B>.Index(a1, a2, a3, a4, (uint64_t (*)(void, void, void, void, void, void, void, void))static NavigationState.StackContent.Views.ViewsSequence.Index.== infix(_:_:));
}

uint64_t protocol witness for static Comparable.< infix(_:_:) in conformance NavigationState.StackContent.Views.ViewsSequence<A, B>.Index(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, void, void, void, void, void, void, void))
{
  return a5(*(void *)a1, *(unsigned __int8 *)(a1 + 8), *(void *)(a1 + 16), *(unsigned __int8 *)(a1 + 24), *(void *)a2, *(unsigned __int8 *)(a2 + 8), *(void *)(a2 + 16), *(unsigned __int8 *)(a2 + 24)) & 1;
}

uint64_t protocol witness for BidirectionalCollection.index(before:) in conformance NavigationState.StackContent.Views.ViewsSequence<A, B>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return protocol witness for BidirectionalCollection.index(before:) in conformance NavigationState.StackContent.Views.ViewsSequence<A, B>(a1, a2, (uint64_t (*)(void, void, void, void, uint64_t))NavigationState.StackContent.Views.ViewsSequence.index(before:), a3);
}

uint64_t protocol witness for BidirectionalCollection.formIndex(before:) in conformance NavigationState.StackContent.Views.ViewsSequence<A, B>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for BidirectionalCollection.formIndex(before:) in conformance NavigationState.StackContent.Views.ViewsSequence<A, B>(a1, a2, a3, (uint64_t (*)(void, void, void, void, uint64_t))NavigationState.StackContent.Views.ViewsSequence.index(before:));
}

uint64_t protocol witness for BidirectionalCollection.index(_:offsetBy:limitedBy:) in conformance NavigationState.StackContent.Views.ViewsSequence<A, B>()
{
  return MEMORY[0x1F41836E8]();
}

uint64_t protocol witness for Collection.startIndex.getter in conformance NavigationState.StackContent.Views.ViewsSequence<A, B>@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = NavigationState.StackContent.Views.ViewsSequence.startIndex.getter();
  *(void *)a1 = result;
  *(unsigned char *)(a1 + 8) = v3 & 1;
  *(void *)(a1 + 16) = v4;
  *(unsigned char *)(a1 + 24) = v5;
  return result;
}

uint64_t protocol witness for Collection.endIndex.getter in conformance NavigationState.StackContent.Views.ViewsSequence<A, B>@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = specialized NavigationState.StackContent.Views.ViewsSequence.endIndex.getter();
  *(void *)a1 = result;
  *(unsigned char *)(a1 + 8) = v3 & 1;
  *(void *)(a1 + 16) = v4;
  *(unsigned char *)(a1 + 24) = v5;
  return result;
}

void (*protocol witness for Collection.subscript.read in conformance NavigationState.StackContent.Views.ViewsSequence<A, B>(uint64_t ***a1, uint64_t a2, void *a3))(void *a1)
{
  int v6 = (uint64_t **)malloc(0x28uLL);
  *a1 = v6;
  v6[4] = (uint64_t *)NavigationState.StackContent.Views.ViewsSequence.subscript.read(v6, *(void *)a2, *(unsigned char *)(a2 + 8), *(void *)(a2 + 16), *(unsigned char *)(a2 + 24), a3);
  return protocol witness for Collection.subscript.read in conformance NavigationState.StackContent.Views.ViewsSequence<A, B>;
}

void (*NavigationState.StackContent.Views.ViewsSequence.subscript.read(uint64_t **a1, unint64_t a2, char a3, unint64_t a4, char a5, void *a6))(uint64_t *a1)
{
  BOOL v12 = (uint64_t *)malloc(0x41uLL);
  *a1 = v12;
  NavigationState.StackContent.Views.ViewsSequence.subscript.getter(a2, a3 & 1, a4, a5, a6, v12);
  return NavigationState.StackContent.Views.ViewsSequence.subscript.read;
}

void NavigationState.StackContent.Views.ViewsSequence.subscript.read(uint64_t *a1)
{
  int v1 = (void *)*a1;
  outlined destroy of NavigationState.StackContent.PositionedView(*a1);

  free(v1);
}

uint64_t protocol witness for Collection.subscript.getter in conformance NavigationState.StackContent.Views.ViewsSequence<A, B>()
{
  return MEMORY[0x1F4184430]();
}

void protocol witness for Collection._customIndexOfEquatableElement(_:) in conformance NavigationState.StackContent.Views.ViewsSequence<A, B>(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 24) = -2;
}

uint64_t protocol witness for Collection.index(_:offsetBy:) in conformance NavigationState.StackContent.Views.ViewsSequence<A, B>()
{
  swift_getWitnessTable();

  return BidirectionalCollection.index(_:offsetBy:)();
}

uint64_t protocol witness for Collection.index(_:offsetBy:limitedBy:) in conformance NavigationState.StackContent.Views.ViewsSequence<A, B>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F41836E8](a1, a2, a3, a4, WitnessTable);
}

void protocol witness for Collection.distance(from:to:) in conformance NavigationState.StackContent.Views.ViewsSequence<A, B>()
{
  swift_getWitnessTable();

  JUMPOUT(0x18C1155A0);
}

uint64_t protocol witness for Collection.index(after:) in conformance NavigationState.StackContent.Views.ViewsSequence<A, B>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return protocol witness for BidirectionalCollection.index(before:) in conformance NavigationState.StackContent.Views.ViewsSequence<A, B>(a1, a2, (uint64_t (*)(void, void, void, void, uint64_t))NavigationState.StackContent.Views.ViewsSequence.index(after:), a3);
}

uint64_t protocol witness for BidirectionalCollection.index(before:) in conformance NavigationState.StackContent.Views.ViewsSequence<A, B>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(void, void, void, void, uint64_t)@<X3>, uint64_t a4@<X8>)
{
  uint64_t result = a3(*(void *)a1, *(unsigned __int8 *)(a1 + 8), *(void *)(a1 + 16), *(unsigned __int8 *)(a1 + 24), a2);
  *(void *)a4 = result;
  *(unsigned char *)(a4 + 8) = v6 & 1;
  *(void *)(a4 + 16) = v7;
  *(unsigned char *)(a4 + 24) = v8;
  return result;
}

uint64_t protocol witness for Collection.formIndex(after:) in conformance NavigationState.StackContent.Views.ViewsSequence<A, B>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for BidirectionalCollection.formIndex(before:) in conformance NavigationState.StackContent.Views.ViewsSequence<A, B>(a1, a2, a3, (uint64_t (*)(void, void, void, void, uint64_t))NavigationState.StackContent.Views.ViewsSequence.index(after:));
}

uint64_t protocol witness for BidirectionalCollection.formIndex(before:) in conformance NavigationState.StackContent.Views.ViewsSequence<A, B>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void, void, void, void, uint64_t))
{
  uint64_t result = a4(*(void *)a1, *(unsigned __int8 *)(a1 + 8), *(void *)(a1 + 16), *(unsigned __int8 *)(a1 + 24), a2);
  *(void *)a1 = result;
  *(unsigned char *)(a1 + 8) = v6 & 1;
  *(void *)(a1 + 16) = v7;
  *(unsigned char *)(a1 + 24) = v8;
  return result;
}

void *protocol witness for Sequence.makeIterator() in conformance NavigationState.StackContent.Views.ViewsSequence<A, B>@<X0>(uint64_t a1@<X8>)
{
  memcpy(__dst, v1, sizeof(__dst));
  uint64_t v3 = NavigationState.StackContent.Views.ViewsSequence.startIndex.getter();
  uint64_t v5 = v4;
  char v7 = v6;
  char v10 = v8 & 1;
  uint64_t result = memcpy((void *)a1, __dst, 0x1A0uLL);
  *(void *)(a1 + 416) = v3;
  *(unsigned char *)(a1 + 424) = v10;
  *(void *)(a1 + 432) = v5;
  *(unsigned char *)(a1 + 440) = v7;
  return result;
}

uint64_t protocol witness for Sequence.underestimatedCount.getter in conformance NavigationState.StackContent.Views.ViewsSequence<A, B>(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F4184360](a1, WitnessTable);
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance NavigationState.StackContent.Views.ViewsSequence<A, B>(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F4184380](a1, WitnessTable);
}

uint64_t NavigationState.ListKey.description.getter()
{
  uint64_t v13 = 0;
  unint64_t v14 = 0xE000000000000000;
  _StringGuts.grow(_:)(50);
  v1._countAndFlagsBits = 0x3A79654B7473694CLL;
  v1._object = (void *)0xEE00203A64695B20;
  String.append(_:)(v1);
  uint64_t v13 = *(void *)v0;
  _print_unlocked<A, B>(_:_:)();
  v2._object = (void *)0x8000000188326B90;
  v2._countAndFlagsBits = 0xD000000000000011;
  String.append(_:)(v2);
  if (*(unsigned char *)(v0 + 32)) {
    uint64_t v3 = 1702195828;
  }
  else {
    uint64_t v3 = 0x65736C6166;
  }
  if (*(unsigned char *)(v0 + 32)) {
    unint64_t v4 = 0xE400000000000000;
  }
  else {
    unint64_t v4 = 0xE500000000000000;
  }
  unint64_t v5 = v4;
  String.append(_:)(*(Swift::String *)&v3);
  swift_bridgeObjectRelease();
  v6._countAndFlagsBits = 0x6B636174735B205DLL;
  v6._object = (void *)0xED0000203A79654BLL;
  String.append(_:)(v6);
  outlined init with take of NavigationState.StackContent.Key?(v0 + 8, (uint64_t)v12, &lazy cache variable for type metadata for NavigationState.StackContent.Key?, (uint64_t)&type metadata for NavigationState.StackContent.Key);
  outlined init with take of NavigationState.StackContent.Key?((uint64_t)v12, (uint64_t)&v13, &lazy cache variable for type metadata for NavigationState.StackContent.Key?, (uint64_t)&type metadata for NavigationState.StackContent.Key);
  if (v14 == 6)
  {
    unint64_t v7 = 0xEB0000000079654BLL;
    uint64_t v8 = 0x6B63617453206F4ELL;
  }
  else
  {
    uint64_t v8 = NavigationState.StackContent.Key.debugDescription.getter(v13, v14);
    unint64_t v7 = v9;
  }
  unint64_t v10 = v7;
  String.append(_:)(*(Swift::String *)&v8);
  swift_bridgeObjectRelease();
  return 0;
}

Swift::Int NavigationState.ListKey.hashValue.getter()
{
  Swift::UInt v2 = *(void *)v0;
  Swift::UInt v1 = *(void *)(v0 + 8);
  Swift::UInt v3 = *(unsigned __int8 *)(v0 + 16);
  Swift::UInt v4 = *(void *)(v0 + 24);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v2);
  if (v3 == 6)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v1);
    Hasher._combine(_:)(v3);
    Hasher._combine(_:)(v4);
  }
  Hasher._combine(_:)(*(unsigned char *)(v0 + 32) & 1);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance NavigationState.ListKey()
{
  Swift::UInt v1 = *(void *)(v0 + 8);
  Swift::UInt v2 = *(unsigned __int8 *)(v0 + 16);
  Swift::UInt v3 = *(void *)(v0 + 24);
  Swift::UInt8 v4 = *(unsigned char *)(v0 + 32);
  Hasher._combine(_:)(*(void *)v0);
  if (v2 == 6)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v1);
    Hasher._combine(_:)(v2);
    Hasher._combine(_:)(v3);
  }
  Hasher._combine(_:)(v4);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance NavigationState.ListKey()
{
  Swift::UInt v2 = *(void *)v0;
  Swift::UInt v1 = *(void *)(v0 + 8);
  Swift::UInt v3 = *(unsigned __int8 *)(v0 + 16);
  Swift::UInt v4 = *(void *)(v0 + 24);
  Swift::UInt8 v5 = *(unsigned char *)(v0 + 32);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v2);
  if (v3 == 6)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v1);
    Hasher._combine(_:)(v3);
    Hasher._combine(_:)(v4);
  }
  Hasher._combine(_:)(v5);
  return Hasher._finalize()();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance NavigationState.ListKey()
{
  return NavigationState.ListKey.description.getter();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance NavigationState.ListKey(uint64_t a1, uint64_t a2)
{
  if (*(void *)a1 != *(void *)a2) {
    return 0;
  }
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(void *)(a2 + 16);
  if (v2 == 6)
  {
    if (v3 != 6) {
      return 0;
    }
  }
  else
  {
    if (v3 == 6) {
      return 0;
    }
    uint64_t v4 = (v3 ^ v2);
    BOOL v5 = *(void *)(a1 + 8) == *(void *)(a2 + 8) && v4 == 0;
    if (!v5 || *(void *)(a1 + 24) != *(void *)(a2 + 24)) {
      return 0;
    }
  }
  return *(unsigned __int8 *)(a1 + 32) ^ *(unsigned __int8 *)(a2 + 32) ^ 1u;
}

uint64_t specialized closure #1 in Collection<>.collapsedItemCount<A>(within:splitViewState:)(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = specialized static NavigationColumnState.isElidedInCollapsedSplit<A>(column:within:splitViewState:)(a2, a3, a4);
  if (result) {
    return a1;
  }
  if ((a2 & 0x8000000000000000) != 0) {
    goto LABEL_13;
  }
  if (*(void *)(a3 + 16) <= a2)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  memcpy(__dst, (const void *)(a3 + 304 * a2 + 32), 0x12BuLL);
  uint64_t v8 = __dst[21];
  if ((__dst[21] & 0x8000000000000000) == 0)
  {
    uint64_t v22 = a1;
    uint64_t v9 = __dst[14];
    uint64_t v25 = __dst[15];
    uint64_t v10 = __dst[16];
    uint64_t v11 = __dst[17];
    uint64_t v12 = __dst[18];
    uint64_t v13 = __dst[19];
    uint64_t v14 = __dst[20];
    uint64_t v15 = __dst[22];
    uint64_t v27 = *(uint64_t (**)(uint64_t))(*(void *)__dst[21] + 88);
    outlined retain of NavigationColumnState(__dst);
    uint64_t v24 = v11;
    uint64_t v23 = v12;
    uint64_t v16 = v12;
    uint64_t v17 = v13;
    outlined copy of NavigationColumnState.ColumnContent(v9, v25, v10, v11, v16, v13, v14, v8);
    swift_retain();
    swift_bridgeObjectRetain();
    uint64_t v18 = swift_bridgeObjectRetain();
    uint64_t result = v27(v18);
    uint64_t v19 = result + 1;
    if (__OFADD__(result, 1))
    {
LABEL_15:
      __break(1u);
      goto LABEL_16;
    }
    uint64_t v20 = *(void *)(v15 + 16);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    outlined consume of NavigationColumnState.ColumnContent(v9, v25, v10, v24, v23, v17, v14, v8);
    uint64_t result = (uint64_t)outlined release of NavigationColumnState(__dst);
    uint64_t v21 = v19 + v20;
    if (__OFADD__(v19, v20))
    {
LABEL_16:
      __break(1u);
      return result;
    }
    uint64_t result = v22 + v21;
    if (!__OFADD__(v22, v21)) {
      return result;
    }
    goto LABEL_12;
  }
  uint64_t result = a1 + 1;
  if (__OFADD__(a1, 1))
  {
LABEL_12:
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  return result;
}

void (*specialized Dictionary._Variant.subscript.modify(void *a1, uint64_t a2))(uint64_t a1)
{
  uint64_t v4 = malloc(0x78uLL);
  *a1 = v4;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  outlined init with copy of ToolbarPlacement.Role(a2, (uint64_t)v4);
  v4[13] = specialized Dictionary._Variant.asNative.modify(v4 + 5);
  void v4[14] = specialized _NativeDictionary.subscript.modify(v4 + 9, (uint64_t)v4, isUniquelyReferenced_nonNull_native);
  return Dictionary._Variant.subscript.modifyspecialized ;
}

{
  void *v4;
  char isUniquelyReferenced_nonNull_native;

  uint64_t v4 = malloc(0x80uLL);
  *a1 = v4;
  v4[13] = a2;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  outlined init with take of TableColumnCustomizationID.Base(a2, (uint64_t)v4);
  outlined retain of TableColumnCustomizationID.Base((uint64_t)v4, (void (*)(void, void, void, void, void))outlined copy of TableColumnCustomizationID.Base);
  void v4[14] = specialized Dictionary._Variant.asNative.modify(v4 + 5);
  long long v4[15] = specialized _NativeDictionary.subscript.modify(v4 + 9, a2, isUniquelyReferenced_nonNull_native);
  return Dictionary._Variant.subscript.modifyspecialized ;
}

{
  void *v4;
  char isUniquelyReferenced_nonNull_native;

  uint64_t v4 = malloc(0xD0uLL);
  *a1 = v4;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  outlined init with copy of IdentifiedDocumentGroupConfiguration(a2, (uint64_t)v4);
  v4[24] = specialized Dictionary._Variant.asNative.modify(v4 + 16);
  v4[25] = specialized _NativeDictionary.subscript.modify(v4 + 20, (uint64_t)v4, isUniquelyReferenced_nonNull_native);
  return Dictionary._Variant.subscript.modifyspecialized ;
}

void (*specialized Dictionary._Variant.subscript.modify(void *a1, uint64_t a2, uint64_t a3, char a4))(uint64_t a1)
{
  uint64_t v8 = malloc(0x68uLL);
  *a1 = v8;
  v8[96] = a4;
  *((void *)v8 + 8) = a2;
  *((void *)v8 + 9) = a3;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  outlined copy of TabCustomizationID.Base();
  *((void *)v8 + 10) = specialized Dictionary._Variant.asNative.modify(v8);
  *((void *)v8 + 11) = specialized _NativeDictionary.subscript.modify((void *)v8 + 4, a2, a3, a4 & 1, isUniquelyReferenced_nonNull_native);
  return Dictionary._Variant.subscript.modifyspecialized ;
}

uint64_t (*specialized Dictionary._Variant.subscript.modify(void *a1, unint64_t a2, unint64_t a3))()
{
  Swift::String v6 = malloc(0x50uLL);
  *a1 = v6;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v6[8] = specialized Dictionary._Variant.asNative.modify(v6);
  v6[9] = specialized _NativeDictionary.subscript.modify(v6 + 4, a2, a3, isUniquelyReferenced_nonNull_native);
  return Dictionary._Variant.subscript.modifyspecialized ;
}

void (*specialized Dictionary._Variant.subscript.modify(void *a1, uint64_t a2, uint64_t a3, Swift::UInt a4, unsigned __int8 a5))(uint64_t a1)
{
  uint64_t v10 = malloc(0x58uLL);
  *a1 = v10;
  v10[8] = a3;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  swift_bridgeObjectRetain();
  v10[9] = specialized Dictionary._Variant.asNative.modify(v10);
  v10[10] = specialized _NativeDictionary.subscript.modify(v10 + 4, a2, a3, a4, a5, isUniquelyReferenced_nonNull_native);
  return Dictionary._Variant.subscript.modifyspecialized ;
}

uint64_t (*specialized Dictionary._Variant.subscript.modify(void *a1, Swift::UInt32 a2))()
{
  uint64_t v4 = malloc(0x50uLL);
  *a1 = v4;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v4[8] = specialized Dictionary._Variant.asNative.modify(v4);
  v4[9] = specialized _NativeDictionary.subscript.modify(v4 + 4, a2, isUniquelyReferenced_nonNull_native);
  return Dictionary._Variant.subscript.modifyspecialized ;
}

void (*specialized _NativeDictionary.subscript.modify(void *a1, uint64_t a2, char a3))(uint64_t *a1)
{
  uint64_t v4 = v3;
  uint64_t v8 = (char *)malloc(0x68uLL);
  *a1 = v8;
  *((void *)v8 + 10) = a2;
  *((void *)v8 + 11) = v3;
  uint64_t v9 = *v3;
  uint64_t v11 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  v8[73] = v10 & 1;
  uint64_t v12 = *(void *)(v9 + 16);
  BOOL v13 = (v10 & 1) == 0;
  uint64_t v14 = v12 + v13;
  if (__OFADD__(v12, v13))
  {
    __break(1u);
  }
  else
  {
    char v15 = v10;
    uint64_t v16 = *(void *)(v9 + 24);
    if (v16 >= v14 && (a3 & 1) != 0)
    {
LABEL_7:
      *((void *)v8 + 12) = v11;
      if (v15)
      {
LABEL_8:
        uint64_t v17 = (unsigned __int8 *)(*(void *)(*v4 + 56) + 80 * v11);
        uint64_t v18 = *v17;
        long long v19 = *(_OWORD *)(v17 + 8);
        uint64_t v20 = v17[24];
        uint64_t v21 = *((void *)v17 + 4);
        uint64_t v22 = v17[40];
        uint64_t v23 = *((void *)v17 + 6);
        uint64_t v24 = v17[56];
        uint64_t v25 = v17[57];
        uint64_t v26 = v17[58];
        uint64_t v27 = *((void *)v17 + 8);
        unsigned __int8 v28 = v17[72];
        uint64_t v29 = v24 | (v25 << 8) | (v26 << 16);
LABEL_12:
        *(void *)uint64_t v8 = v18;
        *(_OWORD *)(v8 + 8) = v19;
        *((void *)v8 + 3) = v20;
        *((void *)v8 + 4) = v21;
        *((void *)v8 + 5) = v22;
        *((void *)v8 + 6) = v23;
        *((void *)v8 + 7) = v29;
        *((void *)v8 + 8) = v27;
        v8[72] = v28;
        return _NativeDictionary.subscript.modifyspecialized ;
      }
LABEL_11:
      uint64_t v18 = 0;
      uint64_t v20 = 0;
      uint64_t v21 = 0;
      uint64_t v22 = 0;
      uint64_t v23 = 0;
      uint64_t v29 = 0;
      uint64_t v27 = 0;
      unsigned __int8 v28 = 0;
      long long v19 = xmmword_18834FC50;
      goto LABEL_12;
    }
    if (v16 >= v14 && (a3 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v14, a3 & 1);
    uint64_t v30 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
    if ((v15 & 1) == (v31 & 1))
    {
      uint64_t v11 = v30;
      *((void *)v8 + 12) = v30;
      if (v15) {
        goto LABEL_8;
      }
      goto LABEL_11;
    }
  }
  uint64_t result = (void (*)(uint64_t *))KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

void _NativeDictionary.subscript.modifyspecialized (uint64_t *a1)
{
  Swift::UInt v1 = (uint64_t *)*a1;
  specialized $defer #1 <A, B>() in _NativeDictionary.subscript.modify(*a1, *(unsigned char *)(*a1 + 73), *(uint64_t **)(*a1 + 88), *(void *)(*a1 + 96), *(void *)(*a1 + 80));
  outlined consume of ToolbarAppearanceConfiguration?(*v1, v1[1]);

  free(v1);
}

{
  uint64_t v1;
  __int16 v2;
  char v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  void **v7;
  uint64_t vars8;

  Swift::UInt v1 = *a1;
  uint64_t v2 = *(_WORD *)(*a1 + 32);
  uint64_t v3 = *(unsigned char *)(*a1 + 35);
  if (v2 == 3)
  {
    if (*(unsigned char *)(*a1 + 35))
    {
      uint64_t v4 = *(void *)(v1 + 24);
      BOOL v5 = **(void **)(v1 + 16);
      swift_arrayDestroy();
      specialized _NativeDictionary._delete(at:)(v4, v5);
    }
  }
  else
  {
    unint64_t v7 = *(void ***)(v1 + 16);
    Swift::String v6 = *(void *)(v1 + 24);
    if (v3)
    {
      *(_WORD *)((*v7)[7] + 2 * v6) = v2;
    }
    else
    {
      specialized _NativeDictionary._insert(at:key:value:)(v6, *(void *)v1, *(void *)(v1 + 8), *(unsigned char *)(v1 + 34) & 1, v2, *v7);
      outlined copy of TabCustomizationID.Base();
    }
  }

  free((void *)v1);
}

{
  void **v1;
  uint64_t vars8;

  Swift::UInt v1 = (void **)*a1;
  specialized $defer #1 <A, B>() in _NativeDictionary.subscript.modify(*a1, *(unsigned char *)(*a1 + 65), *(uint64_t **)(*a1 + 48), *(void *)(*a1 + 56), *(void *)(*a1 + 24), *(void *)(*a1 + 32), *(void *)(*a1 + 40), *(unsigned char *)(*a1 + 64));
  outlined consume of KeyboardShortcutBridge.Shortcut?(*v1);

  free(v1);
}

{
  void *v1;
  uint64_t vars8;

  Swift::UInt v1 = (void *)*a1;
  specialized $defer #1 <A, B>() in _NativeDictionary.subscript.modify(*a1, *(unsigned char *)(*a1 + 177), *(uint64_t **)(*a1 + 184), *(void *)(*a1 + 192), *(_DWORD *)(*a1 + 180));
  outlined destroy of Binding<NavigationSplitViewColumn>((uint64_t)v1, (uint64_t)&lazy cache variable for type metadata for ConfirmationDialog?, (uint64_t)&type metadata for ConfirmationDialog, MEMORY[0x1E4FBB718], (uint64_t (*)(void))type metadata accessor for Binding<NavigationSplitViewColumn>);

  free(v1);
}

void (*specialized _NativeDictionary.subscript.modify(void *a1, uint64_t a2, uint64_t a3, char a4, char a5))(uint64_t *a1)
{
  Swift::String v6 = v5;
  uint64_t v12 = malloc(0x28uLL);
  *a1 = v12;
  v12[1] = a3;
  v12[2] = v6;
  *((unsigned char *)v12 + 34) = a4;
  *uint64_t v12 = a2;
  char v13 = a4 & 1;
  uint64_t v14 = *v6;
  unint64_t v16 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3, v13);
  *((unsigned char *)v12 + 35) = v15 & 1;
  uint64_t v17 = *(void *)(v14 + 16);
  BOOL v18 = (v15 & 1) == 0;
  uint64_t v19 = v17 + v18;
  if (__OFADD__(v17, v18))
  {
    __break(1u);
    goto LABEL_14;
  }
  char v20 = v15;
  uint64_t v21 = *(void *)(v14 + 24);
  if (v21 < v19 || (a5 & 1) == 0)
  {
    if (v21 >= v19 && (a5 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_9;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v19, a5 & 1);
    unint64_t v22 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3, v13);
    if ((v20 & 1) == (v23 & 1))
    {
      unint64_t v16 = v22;
      goto LABEL_9;
    }
LABEL_14:
    uint64_t result = (void (*)(uint64_t *))KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
LABEL_9:
  void v12[3] = v16;
  if (v20) {
    __int16 v24 = *(_WORD *)(*(void *)(*v6 + 56) + 2 * v16);
  }
  else {
    __int16 v24 = 3;
  }
  *((_WORD *)v12 + 16) = v24;
  return _NativeDictionary.subscript.modifyspecialized ;
}

void (*specialized _NativeDictionary.subscript.modify(void *a1, unint64_t a2, unint64_t a3, char a4))(void ***a1)
{
  BOOL v5 = v4;
  char v10 = malloc(0x38uLL);
  *a1 = v10;
  v10[3] = a3;
  _OWORD v10[4] = v4;
  void v10[2] = a2;
  uint64_t v11 = *v4;
  unint64_t v13 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  *((unsigned char *)v10 + 48) = v12 & 1;
  uint64_t v14 = *(void *)(v11 + 16);
  BOOL v15 = (v12 & 1) == 0;
  uint64_t v16 = v14 + v15;
  if (__OFADD__(v14, v15))
  {
    __break(1u);
    goto LABEL_13;
  }
  char v17 = v12;
  uint64_t v18 = *(void *)(v11 + 24);
  if (v18 < v16 || (a4 & 1) == 0)
  {
    if (v18 >= v16 && (a4 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_9;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v16, a4 & 1);
    unint64_t v19 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
    if ((v17 & 1) == (v20 & 1))
    {
      unint64_t v13 = v19;
      goto LABEL_9;
    }
LABEL_13:
    uint64_t result = (void (*)(void ***))KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
LABEL_9:
  v10[5] = v13;
  long long v21 = 0uLL;
  if (v17) {
    long long v21 = *(_OWORD *)(*(void *)(*v5 + 56) + 16 * v13);
  }
  *(_OWORD *)char v10 = v21;
  return _NativeDictionary.subscript.modifyspecialized ;
}

void _NativeDictionary.subscript.modifyspecialized (void ***a1)
{
  Swift::UInt v1 = *a1;
  uint64_t v2 = **a1;
  uint64_t v3 = (uint64_t)(*a1)[1];
  char v4 = *((unsigned char *)*a1 + 48);
  if (v2)
  {
    unint64_t v5 = (unint64_t)v1[5];
    Swift::String v6 = *(void **)v1[4];
    if (v4)
    {
      unint64_t v7 = (void *)(v6[7] + 16 * v5);
      *unint64_t v7 = v2;
      v7[1] = v3;
    }
    else
    {
      specialized _NativeDictionary._insert(at:key:value:)(v5, (uint64_t)v1[2], (uint64_t)v1[3], (uint64_t)v2, v3, v6);
    }
  }
  else if ((_BYTE)(*a1)[6])
  {
    specialized _NativeDictionary._delete(at:)((unint64_t)v1[5], *(void *)v1[4]);
  }
  uint64_t v8 = *v1;
  outlined copy of DisplayList.AccessibilityUpdater.CacheValue?(v2);
  outlined consume of DisplayList.AccessibilityUpdater.CacheValue?(v8);

  free(v1);
}

void (*specialized _NativeDictionary.subscript.modify(void *a1, uint64_t a2, char a3))(uint64_t *a1, char a2)
{
  char v4 = v3;
  uint64_t v8 = malloc(0x78uLL);
  *a1 = v8;
  v8[12] = a2;
  void v8[13] = v3;
  uint64_t v9 = *v3;
  unint64_t v11 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  *((unsigned char *)v8 + 33) = v10 & 1;
  uint64_t v12 = *(void *)(v9 + 16);
  BOOL v13 = (v10 & 1) == 0;
  uint64_t v14 = v12 + v13;
  if (__OFADD__(v12, v13))
  {
    __break(1u);
    goto LABEL_14;
  }
  char v15 = v10;
  uint64_t v16 = *(void *)(v9 + 24);
  if (v16 < v14 || (a3 & 1) == 0)
  {
    if (v16 >= v14 && (a3 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_9;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v14, a3 & 1);
    unint64_t v17 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
    if ((v15 & 1) == (v18 & 1))
    {
      unint64_t v11 = v17;
      goto LABEL_9;
    }
LABEL_14:
    uint64_t result = (void (*)(uint64_t *, char))KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
LABEL_9:
  v8[14] = v11;
  if (v15)
  {
    uint64_t v19 = *(void *)(*v4 + 56) + 16 * v11;
    uint64_t v20 = *(void *)v19;
    __int16 v21 = *(unsigned __int8 *)(v19 + 8) | (*(unsigned __int8 *)(v19 + 9) << 8);
  }
  else
  {
    uint64_t v20 = 0;
    __int16 v21 = 768;
  }
  v8[10] = v20;
  *((_WORD *)v8 + 44) = v21;
  return _NativeDictionary.subscript.modifyspecialized ;
}

void _NativeDictionary.subscript.modifyspecialized (uint64_t *a1, char a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *(void *)(*a1 + 80);
  __int16 v4 = *(_WORD *)(*a1 + 88);
  int v5 = v4 & 0xFF00;
  char v6 = *(unsigned char *)(*a1 + 33);
  if (a2)
  {
    if (v5 != 768)
    {
      unint64_t v7 = *(void *)(v2 + 112);
      uint64_t v8 = **(void ***)(v2 + 104);
      if ((v6 & 1) == 0)
      {
        uint64_t v9 = *(void *)(v2 + 96);
        specialized _NativeDictionary._insert(at:key:value:)(v7, v9, v3, v4 & 0xFF01, v8);
        outlined init with take of TableColumnCustomizationID.Base(v9, v2);
        uint64_t v10 = v2;
LABEL_11:
        outlined retain of TableColumnCustomizationID.Base(v10, (void (*)(void, void, void, void, void))outlined copy of TableColumnCustomizationID.Base);
        goto LABEL_12;
      }
      goto LABEL_9;
    }
  }
  else if (v5 != 768)
  {
    unint64_t v7 = *(void *)(v2 + 112);
    uint64_t v8 = **(void ***)(v2 + 104);
    if ((v6 & 1) == 0)
    {
      uint64_t v14 = *(void *)(v2 + 96);
      specialized _NativeDictionary._insert(at:key:value:)(v7, v14, v3, v4 & 0xFF01, v8);
      outlined init with take of TableColumnCustomizationID.Base(v14, v2 + 40);
      uint64_t v10 = v2 + 40;
      goto LABEL_11;
    }
LABEL_9:
    uint64_t v13 = v8[7] + 16 * v7;
    *(void *)uint64_t v13 = v3;
    *(unsigned char *)(v13 + 8) = v4 & 1;
    *(unsigned char *)(v13 + 9) = HIBYTE(v4);
    goto LABEL_12;
  }
  if (*(unsigned char *)(*a1 + 33))
  {
    unint64_t v11 = *(void *)(v2 + 112);
    uint64_t v12 = **(void **)(v2 + 104);
    swift_arrayDestroy();
    specialized _NativeDictionary._delete(at:)(v11, v12);
  }
LABEL_12:

  free((void *)v2);
}

void (*specialized _NativeDictionary.subscript.modify(void *a1, uint64_t a2, uint64_t a3, Swift::UInt a4, unsigned __int8 a5, char a6))(uint64_t *a1)
{
  unint64_t v7 = v6;
  uint64_t v14 = malloc(0x48uLL);
  *a1 = v14;
  v14[64] = a5;
  *((void *)v14 + 5) = a4;
  *((void *)v14 + 6) = v6;
  *((void *)v14 + 3) = a2;
  *((void *)v14 + 4) = a3;
  uint64_t v15 = *v6;
  unint64_t v17 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3, a4, a5);
  v14[65] = v16 & 1;
  uint64_t v18 = *(void *)(v15 + 16);
  BOOL v19 = (v16 & 1) == 0;
  uint64_t v20 = v18 + v19;
  if (__OFADD__(v18, v19))
  {
    __break(1u);
  }
  else
  {
    char v21 = v16;
    uint64_t v22 = *(void *)(v15 + 24);
    if (v22 >= v20 && (a6 & 1) != 0)
    {
LABEL_7:
      *((void *)v14 + 7) = v17;
      if (v21)
      {
LABEL_8:
        uint64_t v23 = *(void *)(*v7 + 56) + 24 * v17;
        long long v24 = *(_OWORD *)v23;
        uint64_t v25 = *(void *)(v23 + 16);
LABEL_12:
        *(_OWORD *)uint64_t v14 = v24;
        *((void *)v14 + 2) = v25;
        return _NativeDictionary.subscript.modifyspecialized ;
      }
LABEL_11:
      uint64_t v25 = 0;
      long long v24 = 0uLL;
      goto LABEL_12;
    }
    if (v22 >= v20 && (a6 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v20, a6 & 1);
    unint64_t v26 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3, a4, a5);
    if ((v21 & 1) == (v27 & 1))
    {
      unint64_t v17 = v26;
      *((void *)v14 + 7) = v26;
      if (v21) {
        goto LABEL_8;
      }
      goto LABEL_11;
    }
  }
  uint64_t result = (void (*)(uint64_t *))KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

void (*specialized _NativeDictionary.subscript.modify(void *a1, Swift::UInt32 a2, char a3))(uint64_t *a1)
{
  __int16 v4 = v3;
  uint64_t v8 = malloc(0xC8uLL);
  *a1 = v8;
  v8[23] = v3;
  *((_DWORD *)v8 + 45) = a2;
  uint64_t v9 = *v3;
  unint64_t v11 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  *((unsigned char *)v8 + 177) = v10 & 1;
  uint64_t v12 = *(void *)(v9 + 16);
  BOOL v13 = (v10 & 1) == 0;
  uint64_t v14 = v12 + v13;
  if (__OFADD__(v12, v13))
  {
    __break(1u);
  }
  else
  {
    char v15 = v10;
    uint64_t v16 = *(void *)(v9 + 24);
    if (v16 >= v14 && (a3 & 1) != 0)
    {
LABEL_7:
      unsigned char v8[24] = v11;
      if (v15)
      {
LABEL_8:
        outlined init with take of ConfirmationDialog(*(void *)(*v4 + 56) + 184 * v11, (uint64_t)v8);
        return _NativeDictionary.subscript.modifyspecialized ;
      }
LABEL_11:
      *((unsigned char *)v8 + 176) = 0;
      *((_OWORD *)v8 + 9) = 0u;
      *((_OWORD *)v8 + 10) = 0u;
      *((_OWORD *)v8 + 7) = 0u;
      *((_OWORD *)v8 + 8) = 0u;
      *((_OWORD *)v8 + 5) = 0u;
      *((_OWORD *)v8 + 6) = 0u;
      *((_OWORD *)v8 + 3) = 0u;
      *((_OWORD *)v8 + 4) = 0u;
      *((_OWORD *)v8 + 1) = 0u;
      *((_OWORD *)v8 + 2) = 0u;
      *(_OWORD *)uint64_t v8 = 0u;
      return _NativeDictionary.subscript.modifyspecialized ;
    }
    if (v16 >= v14 && (a3 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v14, a3 & 1);
    unint64_t v17 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
    if ((v15 & 1) == (v18 & 1))
    {
      unint64_t v11 = v17;
      unsigned char v8[24] = v17;
      if (v15) {
        goto LABEL_8;
      }
      goto LABEL_11;
    }
  }
  uint64_t result = (void (*)(uint64_t *))KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

void (*specialized _NativeDictionary.subscript.modify(void *a1, uint64_t a2, char a3))(uint64_t **a1)
{
  __int16 v4 = v3;
  uint64_t v8 = malloc(0x28uLL);
  *a1 = v8;
  v8[1] = a2;
  void v8[2] = v3;
  uint64_t v9 = *v3;
  unint64_t v11 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  *((unsigned char *)v8 + 32) = v10 & 1;
  uint64_t v12 = *(void *)(v9 + 16);
  BOOL v13 = (v10 & 1) == 0;
  uint64_t v14 = v12 + v13;
  if (__OFADD__(v12, v13))
  {
    __break(1u);
  }
  else
  {
    char v15 = v10;
    uint64_t v16 = *(void *)(v9 + 24);
    if (v16 >= v14 && (a3 & 1) != 0)
    {
LABEL_7:
      v8[3] = v11;
      if (v15)
      {
LABEL_8:
        uint64_t v17 = *(void *)(*(void *)(*v4 + 56) + 8 * v11);
LABEL_12:
        void *v8 = v17;
        return _NativeDictionary.subscript.modifyspecialized ;
      }
LABEL_11:
      uint64_t v17 = 0;
      goto LABEL_12;
    }
    if (v16 >= v14 && (a3 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v14, a3 & 1);
    unint64_t v18 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
    if ((v15 & 1) == (v19 & 1))
    {
      unint64_t v11 = v18;
      v8[3] = v18;
      if (v15) {
        goto LABEL_8;
      }
      goto LABEL_11;
    }
  }
  uint64_t result = (void (*)(uint64_t **))KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

void _NativeDictionary.subscript.modifyspecialized (uint64_t **a1)
{
  Swift::UInt v1 = *a1;
  specialized $defer #1 <A, B>() in _NativeDictionary.subscript.modify(*a1, *((unsigned char *)*a1 + 32), (uint64_t *)(*a1)[2], (*a1)[3], (*a1)[1]);
  swift_bridgeObjectRelease();

  free(v1);
}

uint64_t (*specialized Dictionary._Variant.asNative.modify(void *a1))(uint64_t result)
{
  *a1 = *v1;
  a1[1] = v1;
  *Swift::UInt v1 = 0x8000000000000000;
  return Dictionary._Variant.asNative.modifyspecialized ;
}

uint64_t specialized $defer #1 <A, B>() in _NativeDictionary.subscript.modify(uint64_t *a1, char a2, uint64_t *a3, unint64_t a4, uint64_t a5)
{
  uint64_t v7 = *a1;
  if (*a1)
  {
    uint64_t v8 = (void *)*a3;
    if (a2)
    {
      *(void *)(v8[7] + 8 * a4) = v7;
    }
    else
    {
      outlined init with copy of AccessibilityRelationshipScope.Key(a5, (uint64_t)v10);
      specialized _NativeDictionary._insert(at:key:value:)(a4, v10, v7, v8);
    }
  }
  else if (a2)
  {
    swift_arrayDestroy();
    specialized _NativeDictionary._delete(at:)(a4, *a3);
  }
  return swift_bridgeObjectRetain();
}

{
  uint64_t v7;
  void *v8;
  _OWORD v10[8];

  uint64_t v7 = *a1;
  if (*a1)
  {
    uint64_t v8 = (void *)*a3;
    if (a2)
    {
      *(void *)(v8[7] + 8 * a4) = v7;
    }
    else
    {
      outlined init with copy of IdentifiedDocumentGroupConfiguration(a5, (uint64_t)v10);
      specialized _NativeDictionary._insert(at:key:value:)(a4, v10, v7, v8);
    }
  }
  else if (a2)
  {
    swift_arrayDestroy();
    specialized _NativeDictionary._delete(at:)(a4, *a3);
  }
  return swift_bridgeObjectRetain();
}

uint64_t specialized $defer #1 <A, B>() in _NativeDictionary.subscript.modify(uint64_t a1, char a2, uint64_t *a3, unint64_t a4, int a5)
{
  uint64_t result = outlined init with copy of (key: AccessibilityRelationshipScope.Key, relationship: AccessibilityRelationshipScope.Relationship, nodes: [AccessibilityNode])?(a1, (uint64_t)&v14, (uint64_t)&lazy cache variable for type metadata for (key: AccessibilityRelationshipScope.Key, relationship: AccessibilityRelationshipScope.Relationship, nodes: [AccessibilityNode])?, (uint64_t)type metadata accessor for (key: AccessibilityRelationshipScope.Key, relationship: AccessibilityRelationshipScope.Relationship, nodes: [AccessibilityNode]), MEMORY[0x1E4FBB718], (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))type metadata accessor for (key: AccessibilityRelationshipScope.Key, relationship: AccessibilityRelationshipScope.Relationship, nodes: [AccessibilityNode])?);
  if (*((void *)&v15 + 1))
  {
    long long v18 = v14;
    long long v19 = v15;
    long long v20 = v16;
    long long v21 = v17;
    char v10 = (void *)*a3;
    if (a2)
    {
      unint64_t v11 = (_OWORD *)(v10[7] + (a4 << 6));
      long long v12 = v19;
      *unint64_t v11 = v18;
      v11[1] = v12;
      long long v13 = v21;
      v11[2] = v20;
      v11[3] = v13;
    }
    else
    {
      long long v14 = v18;
      long long v15 = v19;
      long long v16 = v20;
      long long v17 = v21;
      return specialized _NativeDictionary._insert(at:key:value:)(a4, a5, &v14, v10);
    }
  }
  else
  {
    uint64_t result = outlined destroy of Binding<NavigationSplitViewColumn>((uint64_t)&v14, (uint64_t)&lazy cache variable for type metadata for (key: AccessibilityRelationshipScope.Key, relationship: AccessibilityRelationshipScope.Relationship, nodes: [AccessibilityNode])?, (uint64_t)type metadata accessor for (key: AccessibilityRelationshipScope.Key, relationship: AccessibilityRelationshipScope.Relationship, nodes: [AccessibilityNode]), MEMORY[0x1E4FBB718], (uint64_t (*)(void))type metadata accessor for (key: AccessibilityRelationshipScope.Key, relationship: AccessibilityRelationshipScope.Relationship, nodes: [AccessibilityNode])?);
    if (a2) {
      return specialized _NativeDictionary._delete(at:)(a4, *a3);
    }
  }
  return result;
}

uint64_t specialized $defer #1 <A, B>() in _NativeDictionary.subscript.modify(uint64_t a1, char a2, uint64_t *a3, unint64_t a4, uint64_t a5)
{
  uint64_t v6 = *(void *)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  uint64_t v9 = *(void *)(a1 + 16);
  uint64_t v8 = *(void *)(a1 + 24);
  uint64_t v11 = *(void *)(a1 + 32);
  uint64_t v10 = *(void *)(a1 + 40);
  uint64_t v13 = *(void *)(a1 + 48);
  uint64_t v12 = *(void *)(a1 + 56);
  uint64_t v14 = *(void *)(a1 + 64);
  char v15 = *(unsigned char *)(a1 + 72);
  if (v7 == 1)
  {
    if (a2)
    {
      uint64_t v23 = *(void *)a1;
      swift_arrayDestroy();
      specialized _NativeDictionary._delete(at:)(a4, *a3);
LABEL_7:
      uint64_t v6 = v23;
    }
  }
  else
  {
    LOBYTE(v25) = *(void *)a1;
    *((void *)&v25 + 1) = v7;
    *(void *)&long long v26 = v9;
    BYTE8(v26) = v8;
    *(void *)&long long v27 = v11;
    BYTE8(v27) = v10 & 1;
    *(void *)unsigned __int8 v28 = v13;
    *(_WORD *)&v28[8] = v12 & 0xFF01;
    _OWORD v28[10] = BYTE2(v12);
    *(void *)&unsigned char v28[16] = v14;
    v28[24] = v15;
    long long v16 = (void *)*a3;
    if ((a2 & 1) == 0)
    {
      uint64_t v23 = v6;
      outlined init with copy of ToolbarPlacement.Role(a5, (uint64_t)v24);
      specialized _NativeDictionary._insert(at:key:value:)(a4, (uint64_t)v24, &v25, v16);
      goto LABEL_7;
    }
    long long v17 = (_OWORD *)(v16[7] + 80 * a4);
    long long v18 = *(_OWORD *)v28;
    v17[2] = v27;
    v17[3] = v18;
    *(_OWORD *)((char *)v17 + 57) = *(_OWORD *)&v28[9];
    long long v19 = v26;
    _OWORD *v17 = v25;
    v17[1] = v19;
  }
  return outlined copy of ToolbarAppearanceConfiguration?(v6, v7);
}

uint64_t specialized $defer #1 <A, B>() in _NativeDictionary.subscript.modify(uint64_t *a1, char a2, uint64_t *a3, unint64_t a4, void *a5)
{
  uint64_t v7 = *a1;
  if (*a1)
  {
    uint64_t v8 = (void *)*a3;
    if (a2)
    {
      *(void *)(v8[7] + 8 * a4) = v7;
    }
    else
    {
      specialized _NativeDictionary._insert(at:key:value:)(a4, (uint64_t)a5, v7, v8);
      id v10 = a5;
    }
  }
  else if (a2)
  {
    type metadata accessor for UINavigationController();
    swift_arrayDestroy();
    specialized _NativeDictionary._delete(at:)(a4, *a3);
  }

  return swift_bridgeObjectRetain();
}

void *specialized $defer #1 <A, B>() in _NativeDictionary.subscript.modify(uint64_t a1, char a2, uint64_t *a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8)
{
  id v10 = *(void **)a1;
  uint64_t v11 = *(void *)(a1 + 8);
  uint64_t v12 = *(void *)(a1 + 16);
  if (*(void *)a1)
  {
    if (a2)
    {
      uint64_t v13 = (void *)(*(void *)(*a3 + 56) + 24 * a4);
      *uint64_t v13 = v10;
      v13[1] = v11;
      _OWORD v13[2] = v12;
    }
    else
    {
      specialized _NativeDictionary._insert(at:key:value:)(a4, a5, a6, a7, a8, (uint64_t)v10, v11, v12, (void *)*a3);
      swift_bridgeObjectRetain();
    }
  }
  else if (a2)
  {
    swift_arrayDestroy();
    specialized _NativeDictionary._delete(at:)(a4, *a3);
  }

  return outlined copy of KeyboardShortcutBridge.Shortcut?(v10);
}

unint64_t specialized $defer #1 <A, B>() in _NativeDictionary.subscript.modify(uint64_t a1, char a2, uint64_t *a3, unint64_t a4, int a5)
{
  outlined init with copy of (key: AccessibilityRelationshipScope.Key, relationship: AccessibilityRelationshipScope.Relationship, nodes: [AccessibilityNode])?(a1, (uint64_t)v11, (uint64_t)&lazy cache variable for type metadata for ConfirmationDialog?, (uint64_t)&type metadata for ConfirmationDialog, MEMORY[0x1E4FBB718], (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))type metadata accessor for Binding<NavigationSplitViewColumn>);
  if (v11[2])
  {
    outlined init with take of ConfirmationDialog((uint64_t)v11, (uint64_t)v12);
    uint64_t v9 = (void *)*a3;
    if (a2)
    {
      return outlined init with take of ConfirmationDialog((uint64_t)v12, v9[7] + 184 * a4);
    }
    else
    {
      outlined init with take of ConfirmationDialog((uint64_t)v12, (uint64_t)v11);
      return specialized _NativeDictionary._insert(at:key:value:)(a4, a5, (uint64_t)v11, v9);
    }
  }
  else
  {
    unint64_t result = outlined destroy of Binding<NavigationSplitViewColumn>((uint64_t)v11, (uint64_t)&lazy cache variable for type metadata for ConfirmationDialog?, (uint64_t)&type metadata for ConfirmationDialog, MEMORY[0x1E4FBB718], (uint64_t (*)(void))type metadata accessor for Binding<NavigationSplitViewColumn>);
    if (a2) {
      return specialized _NativeDictionary._delete(at:)(a4, *a3);
    }
  }
  return result;
}

uint64_t specialized closure #1 in Collection<>.collapsedItemCount<A>(within:splitViewState:)@<X0>(uint64_t *a1@<X0>, unint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t result = specialized closure #1 in Collection<>.collapsedItemCount<A>(within:splitViewState:)(*a1, *a2, *a3, a4);
  if (!v5) {
    *a5 = result;
  }
  return result;
}

uint64_t specialized NavigationState.StackContent.Views.ViewsSequence.endIndex.getter()
{
  return 0;
}

uint64_t specialized NavigationState.StackContent.Views.ViewsSequence.index(before:for:)(uint64_t a1, char a2, uint64_t a3, char a4, uint64_t a5)
{
  if ((a2 & 1) == 0)
  {
    if (a4)
    {
      if (a4 != 1) {
        return 0;
      }
      uint64_t v7 = a3 - 1;
      if (!__OFSUB__(a3, 1))
      {
        if ((v7 & 0x8000000000000000) == 0) {
          return a1;
        }
        uint64_t v8 = *(void *)(a5 + 168);
        if (v8 < 0 || a3) {
          return 0;
        }
        id v10 = *(uint64_t (**)(uint64_t))(*(void *)v8 + 80);
        uint64_t v11 = swift_retain();
        if (v10(v11))
        {
          swift_release();
          return a1;
        }
        uint64_t v12 = (*(uint64_t (**)(void))(*(void *)v8 + 88))();
        swift_release();
        if (!__OFSUB__(v12, 1)) {
          return a1;
        }
        __break(1u);
      }
      __break(1u);
    }
    else if (!__OFSUB__(a3, 1))
    {
      if (a3 - 1 < 0 && a3) {
        return 0;
      }
      return a1;
    }
    __break(1u);
  }
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t (*v10)(uint64_t);
  uint64_t v11;
  uint64_t v12;
  unsigned char v13[80];
  unsigned char v14[56];
  uint64_t v15;

  if ((a2 & 1) == 0)
  {
    if (a4)
    {
      if (a4 != 1) {
        return 0;
      }
      uint64_t v7 = a3 - 1;
      if (!__OFSUB__(a3, 1))
      {
        if ((v7 & 0x8000000000000000) == 0) {
          return a1;
        }
        outlined init with take of NavigationColumnState.ColumnContent(a5 + 112, (uint64_t)v13);
        outlined init with take of NavigationColumnState.ColumnContent((uint64_t)v13, (uint64_t)v14);
        uint64_t v8 = v15;
        if (v15 < 0 || a3) {
          return 0;
        }
        id v10 = *(uint64_t (**)(uint64_t))(*(void *)v15 + 80);
        uint64_t v11 = swift_retain();
        if (v10(v11))
        {
          swift_release();
          return a1;
        }
        uint64_t v12 = (*(uint64_t (**)(void))(*(void *)v8 + 88))();
        swift_release();
        if (!__OFSUB__(v12, 1)) {
          return a1;
        }
        __break(1u);
      }
      __break(1u);
    }
    else if (!__OFSUB__(a3, 1))
    {
      if (a3 - 1 < 0 && a3) {
        return 0;
      }
      return a1;
    }
    __break(1u);
  }
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized NavigationState.StackContent.Views.ViewsSequence.lastIndex(for:stateIndex:)(void *a1, uint64_t a2)
{
  uint64_t v2 = a1[21];
  if (v2 < 0) {
    return a2;
  }
  uint64_t v12 = a2;
  uint64_t v3 = a1[22];
  uint64_t v4 = a1[17];
  uint64_t v6 = a1[15];
  uint64_t v5 = a1[16];
  uint64_t v7 = a1[14];
  outlined copy of NavigationColumnState.ReplacedRoot?(v7, v6, v5, v4);
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  outlined consume of NavigationColumnState.ReplacedRoot?(v7, v6, v5, v4);
  uint64_t v8 = *(void *)(v3 + 16);
  swift_bridgeObjectRelease();
  uint64_t v9 = swift_bridgeObjectRelease();
  if (v8 || ((*(uint64_t (**)(uint64_t))(*(void *)v2 + 80))(v9) & 1) != 0)
  {
    swift_release();
    return v12;
  }
  uint64_t v10 = (*(uint64_t (**)(void))(*(void *)v2 + 88))();
  uint64_t result = swift_release();
  if (!__OFSUB__(v10, 1)) {
    return v12;
  }
  __break(1u);
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;

  uint64_t v2 = a1[21];
  if (v2 < 0) {
    return a2;
  }
  uint64_t v12 = a2;
  uint64_t v3 = a1[22];
  uint64_t v4 = a1[17];
  uint64_t v6 = a1[15];
  uint64_t v5 = a1[16];
  uint64_t v7 = a1[14];
  outlined copy of NavigationColumnState.ReplacedRoot?(v7, v6, v5, v4);
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  outlined consume of NavigationColumnState.ReplacedRoot?(v7, v6, v5, v4);
  uint64_t v8 = *(void *)(v3 + 16);
  swift_bridgeObjectRelease();
  uint64_t v9 = swift_bridgeObjectRelease();
  if (v8 || ((*(uint64_t (**)(uint64_t))(*(void *)v2 + 80))(v9) & 1) != 0)
  {
    swift_release();
    return v12;
  }
  uint64_t v10 = (*(uint64_t (**)(void))(*(void *)v2 + 88))();
  uint64_t result = swift_release();
  if (!__OFSUB__(v10, 1)) {
    return v12;
  }
  __break(1u);
  return result;
}

double _s7SwiftUI21NavigationColumnStateVSgWOi0_(_OWORD *a1)
{
  double result = 0.0;
  a1[16] = 0u;
  a1[17] = 0u;
  a1[14] = 0u;
  a1[15] = 0u;
  a1[12] = 0u;
  a1[13] = 0u;
  a1[10] = 0u;
  a1[11] = 0u;
  a1[8] = 0u;
  a1[9] = 0u;
  a1[6] = 0u;
  a1[7] = 0u;
  a1[4] = 0u;
  a1[5] = 0u;
  a1[2] = 0u;
  a1[3] = 0u;
  *a1 = 0u;
  a1[1] = 0u;
  *(_OWORD *)((char *)a1 + 283) = 0u;
  return result;
}

uint64_t sub_1876EFE44()
{
  long long v5 = *(_OWORD *)(v0 + 336);
  long long v3 = *(_OWORD *)(v0 + 304);
  long long v4 = *(_OWORD *)(v0 + 320);
  long long v2 = *(_OWORD *)(v0 + 272);
  outlined consume of NavigationState.Base(*(void *)(v0 + 48), *(void *)(v0 + 56), *(void *)(v0 + 64), *(void *)(v0 + 72), *(void *)(v0 + 80), *(void *)(v0 + 88), *(void *)(v0 + 96), *(void *)(v0 + 104), *(void *)(v0 + 112), *(void *)(v0 + 120), *(void *)(v0 + 128), *(void *)(v0 + 136), *(void *)(v0 + 144), *(void *)(v0 + 152), *(void *)(v0 + 160), *(void *)(v0 + 168), *(void *)(v0 + 176), *(void *)(v0 + 184), *(void *)(v0 + 192),
    *(void *)(v0 + 200),
    *(void *)(v0 + 208),
    *(void *)(v0 + 216),
    *(void *)(v0 + 224),
    *(void *)(v0 + 232),
    *(void *)(v0 + 240),
    *(void *)(v0 + 248),
    *(void *)(v0 + 256),
    *(void *)(v0 + 264),
    v2,
    *((uint64_t *)&v2 + 1),
    *(void *)(v0 + 288),
    *(void *)(v0 + 296),
    v3,
    *((uint64_t *)&v3 + 1),
    v4,
    *((uint64_t *)&v4 + 1),
    v5,
    *((unint64_t *)&v5 + 1),
    *(void *)(v0 + 352));
  swift_release();
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in NavigationState.StackContent.Views.ViewsSequence.replacedRootModifier(key:)(uint64_t a1)
{
  return closure #1 in NavigationState.StackContent.Views.ViewsSequence.replacedRootModifier(key:)(a1, v1 + 48, *(void *)(v1 + 464), *(unsigned char *)(v1 + 472), *(void *)(v1 + 480), *(void *)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40));
}

void *outlined copy of DisplayList.AccessibilityUpdater.CacheValue?(void *result)
{
  if (result)
  {
    id v1 = result;
    return (void *)swift_bridgeObjectRetain();
  }
  return result;
}

void *outlined consume of DisplayList.AccessibilityUpdater.CacheValue?(void *result)
{
  if (result)
  {

    return (void *)swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t specialized BidirectionalCollection.lastIndex(where:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  if (a2 == a1) {
    return 0;
  }
  uint64_t v12 = *(void *)(a3 + 16);
  uint64_t v13 = a3 + 304 * a2 - 272;
  uint64_t v6 = a2;
  while (v6 > a1)
  {
    uint64_t v14 = v6;
    if (v6-- < 1) {
      goto LABEL_42;
    }
    if (v12 < a2) {
      goto LABEL_43;
    }
    memcpy(__dst, (const void *)v13, 0x12BuLL);
    switch(LOBYTE(__dst[3]))
    {
      case 1:
        outlined retain of NavigationColumnState(__dst);
        if (specialized hasContent #1 <A>() in static NavigationColumnState.isElidedInCollapsedSplit<A>(column:within:splitViewState:)(a4, (uint64_t)__dst, v6, a3))goto LABEL_48; {
        if (v14 >= v12)
        }
          goto LABEL_9;
        memcpy(v21, (const void *)(v13 + 304), 0x12BuLL);
        switch(LOBYTE(v21[3]))
        {
          case 1:
            uint64_t v25 = v5;
            outlined retain of NavigationColumnState(v21);
            if (specialized hasContent #1 <A>() in static NavigationColumnState.isElidedInCollapsedSplit<A>(column:within:splitViewState:)(a4, (uint64_t)v21, v14, a3))goto LABEL_47; {
            if (v14 + 1 >= v12)
            }
              goto LABEL_8;
            memcpy(v22, (const void *)(v13 + 608), 0x12BuLL);
            switch(LOBYTE(v22[3]))
            {
              case 1:
                outlined retain of NavigationColumnState(v22);
                if (specialized hasContent #1 <A>() in static NavigationColumnState.isElidedInCollapsedSplit<A>(column:within:splitViewState:)(a4, (uint64_t)v22, v14 + 1, a3))goto LABEL_46; {
                if (v14 + 2 >= v12)
                }
                  goto LABEL_7;
                memcpy(v23, (const void *)(v13 + 912), 0x12BuLL);
                switch(LOBYTE(v23[3]))
                {
                  case 1:
                    outlined retain of NavigationColumnState(v23);
                    if (specialized hasContent #1 <A>() in static NavigationColumnState.isElidedInCollapsedSplit<A>(column:within:splitViewState:)(a4, (uint64_t)v23, v14 + 2, a3))goto LABEL_45; {
                    if (v14 + 3 >= v12)
                    }
                      goto LABEL_6;
                    break;
                  case 2:
                    outlined retain of NavigationColumnState(v23);
                    char v18 = specialized hasContent #1 <A>() in static NavigationColumnState.isElidedInCollapsedSplit<A>(column:within:splitViewState:)(a4, (uint64_t)v23, v14 + 2, a3);
                    outlined release of NavigationColumnState(v23);
                    goto LABEL_35;
                  case 5:
                    goto LABEL_7;
                  default:
                    goto LABEL_46;
                }
                break;
              case 2:
                outlined retain of NavigationColumnState(v22);
                char v18 = specialized hasContent #1 <A>() in static NavigationColumnState.isElidedInCollapsedSplit<A>(column:within:splitViewState:)(a4, (uint64_t)v22, v14 + 1, a3);
LABEL_35:
                outlined release of NavigationColumnState(v22);
                outlined release of NavigationColumnState(v21);
                outlined release of NavigationColumnState(__dst);
                uint64_t v5 = v25;
                if (v18) {
                  return v6;
                }
                goto LABEL_10;
              case 5:
                goto LABEL_8;
              default:
                goto LABEL_47;
            }
            break;
          case 2:
            outlined retain of NavigationColumnState(v21);
            char v17 = specialized hasContent #1 <A>() in static NavigationColumnState.isElidedInCollapsedSplit<A>(column:within:splitViewState:)(a4, (uint64_t)v21, v14, a3);
            outlined release of NavigationColumnState(v21);
            goto LABEL_31;
          case 5:
            goto LABEL_9;
          default:
            goto LABEL_48;
        }
        break;
      case 2:
        outlined retain of NavigationColumnState(__dst);
        char v17 = specialized hasContent #1 <A>() in static NavigationColumnState.isElidedInCollapsedSplit<A>(column:within:splitViewState:)(a4, (uint64_t)__dst, v6, a3);
LABEL_31:
        outlined release of NavigationColumnState(__dst);
        if (v17) {
          return v6;
        }
        goto LABEL_10;
      case 5:
        goto LABEL_10;
      default:
        return v6;
    }
    memcpy(v24, (const void *)(v13 + 1216), 0x12BuLL);
    switch(LOBYTE(v24[3]))
    {
      case 1:
        outlined retain of NavigationColumnState(v24);
        if (specialized hasContent #1 <A>() in static NavigationColumnState.isElidedInCollapsedSplit<A>(column:within:splitViewState:)(a4, (uint64_t)v24, v14 + 3, a3))goto LABEL_44; {
        if (v14 + 4 >= v12)
        }
        {
          outlined release of NavigationColumnState(v24);
LABEL_6:
          outlined release of NavigationColumnState(v23);
LABEL_7:
          outlined release of NavigationColumnState(v22);
LABEL_8:
          outlined release of NavigationColumnState(v21);
          uint64_t v5 = v25;
LABEL_9:
          outlined release of NavigationColumnState(__dst);
        }
        else
        {
          char v16 = specialized static NavigationColumnState.isElidedInCollapsedSplit<A>(column:within:splitViewState:)(v14 + 4, a3, a4);
          outlined release of NavigationColumnState(v24);
          outlined release of NavigationColumnState(v23);
          outlined release of NavigationColumnState(v22);
LABEL_39:
          uint64_t v5 = v25;
          outlined release of NavigationColumnState(v21);
          outlined release of NavigationColumnState(__dst);
          if ((v16 & 1) == 0) {
            return v6;
          }
        }
LABEL_10:
        v13 -= 304;
        if (a1 == v6) {
          return 0;
        }
        break;
      case 2:
        outlined retain of NavigationColumnState(v24);
        char v19 = specialized hasContent #1 <A>() in static NavigationColumnState.isElidedInCollapsedSplit<A>(column:within:splitViewState:)(a4, (uint64_t)v24, v14 + 3, a3);
        outlined release of NavigationColumnState(v24);
        outlined release of NavigationColumnState(v23);
        outlined release of NavigationColumnState(v22);
        char v16 = v19 ^ 1;
        goto LABEL_39;
      case 5:
        goto LABEL_6;
      default:
        goto LABEL_45;
    }
  }
  __break(1u);
LABEL_42:
  __break(1u);
LABEL_43:
  __break(1u);
LABEL_44:
  outlined release of NavigationColumnState(v24);
LABEL_45:
  outlined release of NavigationColumnState(v23);
LABEL_46:
  outlined release of NavigationColumnState(v22);
LABEL_47:
  outlined release of NavigationColumnState(v21);
LABEL_48:
  outlined release of NavigationColumnState(__dst);
  return v6;
}

uint64_t outlined destroy of IdentifiedDocumentGroupConfiguration(uint64_t a1)
{
  return a1;
}

uint64_t outlined copy of ToolbarAppearanceConfiguration?(uint64_t a1, uint64_t a2)
{
  if (a2 != 1)
  {
    swift_retain();
    swift_retain();
    return swift_retain();
  }
  return result;
}

uint64_t outlined copy of TabCustomizationID.Base()
{
  return swift_bridgeObjectRetain();
}

void *outlined consume of KeyboardShortcutBridge.Shortcut?(void *result)
{
  if (result)
  {

    return (void *)swift_release();
  }
  return result;
}

void *outlined copy of KeyboardShortcutBridge.Shortcut?(void *result)
{
  if (result)
  {
    id v1 = result;
    return (void *)swift_retain();
  }
  return result;
}

uint64_t outlined init with take of TableColumnCustomizationID.Base(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t outlined retain of TableColumnCustomizationID.Base(uint64_t a1, void (*a2)(void, void, void, void, void))
{
  return a1;
}

uint64_t assignWithCopy for NavigationState.StackContent.PositionedView(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_retain();
  swift_release();
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  if (a1 != a2)
  {
    outlined destroy of NavigationStackViewSource(a1 + 24);
    if (*(unsigned char *)(a2 + 64) == 1)
    {
      *(void *)(a1 + 24) = *(void *)(a2 + 24);
      uint64_t v6 = *(void *)(a2 + 40);
      swift_retain();
      if (v6 == 1)
      {
        *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
      }
      else
      {
        *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
        *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
        *(void *)(a1 + 40) = *(void *)(a2 + 40);
        swift_retain();
      }
      *(void *)(a1 + 48) = *(void *)(a2 + 48);
      *(unsigned char *)(a1 + 64) = 1;
    }
    else
    {
      uint64_t v4 = (long long *)(a2 + 24);
      if (*(unsigned char *)(a2 + 64))
      {
        long long v7 = *v4;
        long long v8 = *(_OWORD *)(a2 + 40);
        *(_OWORD *)(a1 + 49) = *(_OWORD *)(a2 + 49);
        *(_OWORD *)(a1 + 24) = v7;
        *(_OWORD *)(a1 + 40) = v8;
      }
      else
      {
        uint64_t v5 = *(void *)(a2 + 48);
        *(void *)(a1 + 48) = v5;
        *(void *)(a1 + 56) = *(void *)(a2 + 56);
        (**(void (***)(uint64_t, long long *))(v5 - 8))(a1 + 24, v4);
        *(unsigned char *)(a1 + 64) = 0;
      }
    }
  }
  return a1;
}

uint64_t outlined destroy of NavigationStackViewSource(uint64_t a1)
{
  return a1;
}

uint64_t assignWithTake for NavigationState.StackContent.PositionedView(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_release();
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  if (a1 != a2)
  {
    outlined destroy of NavigationStackViewSource(a1 + 24);
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
    *(_OWORD *)(a1 + 49) = *(_OWORD *)(a2 + 49);
  }
  return a1;
}

ValueMetadata *type metadata accessor for NavigationState.StackContent.PositionedView()
{
  return &type metadata for NavigationState.StackContent.PositionedView;
}

uint64_t *destroy for NavigationState.UpdateResult(uint64_t *result)
{
  if (((unint64_t)result[13] >> 1) <= 0x80000000)
  {
    id v1 = result;
    outlined consume of NavigationRequest.Action(*result, v1[1], v1[2], v1[3], v1[4], v1[5], v1[6], v1[7], *((unsigned char *)v1 + 64));
    uint64_t result = (uint64_t *)swift_release();
    if (*((unsigned __int8 *)v1 + 248) != 255) {
      return (uint64_t *)outlined consume of NavigationRequest.Action(v1[23], v1[24], v1[25], v1[26], v1[27], v1[28], v1[29], v1[30], *((unsigned char *)v1 + 248));
    }
  }
  return result;
}

uint64_t initializeWithCopy for NavigationState.UpdateResult(uint64_t a1, uint64_t *a2)
{
  if (((unint64_t)a2[13] >> 1) > 0x80000000)
  {
    long long v21 = *((_OWORD *)a2 + 13);
    *(_OWORD *)(a1 + 192) = *((_OWORD *)a2 + 12);
    *(_OWORD *)(a1 + 208) = v21;
    *(_OWORD *)(a1 + 224) = *((_OWORD *)a2 + 14);
    *(_OWORD *)(a1 + 233) = *(_OWORD *)((char *)a2 + 233);
    long long v22 = *((_OWORD *)a2 + 9);
    *(_OWORD *)(a1 + 128) = *((_OWORD *)a2 + 8);
    *(_OWORD *)(a1 + 144) = v22;
    long long v23 = *((_OWORD *)a2 + 11);
    *(_OWORD *)(a1 + 160) = *((_OWORD *)a2 + 10);
    *(_OWORD *)(a1 + 176) = v23;
    long long v24 = *((_OWORD *)a2 + 5);
    *(_OWORD *)(a1 + 64) = *((_OWORD *)a2 + 4);
    *(_OWORD *)(a1 + 80) = v24;
    long long v25 = *((_OWORD *)a2 + 7);
    *(_OWORD *)(a1 + 96) = *((_OWORD *)a2 + 6);
    *(_OWORD *)(a1 + 112) = v25;
    long long v26 = *((_OWORD *)a2 + 1);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v26;
    long long v27 = *((_OWORD *)a2 + 3);
    *(_OWORD *)(a1 + 32) = *((_OWORD *)a2 + 2);
    *(_OWORD *)(a1 + 48) = v27;
  }
  else
  {
    uint64_t v4 = *a2;
    uint64_t v5 = a2[1];
    uint64_t v6 = a2[2];
    uint64_t v7 = a2[3];
    uint64_t v8 = a2[4];
    uint64_t v9 = a2[5];
    uint64_t v10 = a2[6];
    uint64_t v11 = a2[7];
    char v31 = *((unsigned char *)a2 + 64);
    outlined copy of NavigationRequest.Action(*a2, v5, v6, v7, v8, v9, v10, v11, v31);
    *(void *)a1 = v4;
    *(void *)(a1 + 8) = v5;
    *(void *)(a1 + 16) = v6;
    *(void *)(a1 + 24) = v7;
    *(void *)(a1 + 32) = v8;
    *(void *)(a1 + 40) = v9;
    *(void *)(a1 + 48) = v10;
    *(void *)(a1 + 56) = v11;
    *(unsigned char *)(a1 + 64) = v31;
    *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 9);
    *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 11);
    *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 13);
    *(unsigned char *)(a1 + 120) = *((unsigned char *)a2 + 120);
    *(void *)(a1 + 128) = a2[16];
    *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 17);
    *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 19);
    *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 21);
    int v12 = *((unsigned __int8 *)a2 + 248);
    swift_retain();
    if (v12 == 255)
    {
      long long v28 = *(_OWORD *)(a2 + 29);
      *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 27);
      *(_OWORD *)(a1 + 232) = v28;
      *(unsigned char *)(a1 + 248) = *((unsigned char *)a2 + 248);
      long long v29 = *(_OWORD *)(a2 + 25);
      *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 23);
      *(_OWORD *)(a1 + 200) = v29;
    }
    else
    {
      uint64_t v13 = a2[23];
      uint64_t v14 = a2[24];
      uint64_t v15 = a2[25];
      uint64_t v16 = a2[26];
      uint64_t v17 = a2[27];
      uint64_t v18 = a2[28];
      uint64_t v20 = a2[29];
      uint64_t v19 = a2[30];
      outlined copy of NavigationRequest.Action(v13, v14, v15, v16, v17, v18, v20, v19, v12);
      *(void *)(a1 + 184) = v13;
      *(void *)(a1 + 192) = v14;
      *(void *)(a1 + 200) = v15;
      *(void *)(a1 + 208) = v16;
      *(void *)(a1 + 216) = v17;
      *(void *)(a1 + 224) = v18;
      *(void *)(a1 + 232) = v20;
      *(void *)(a1 + 240) = v19;
      *(unsigned char *)(a1 + 248) = v12;
    }
  }
  return a1;
}

uint64_t assignWithCopy for NavigationState.UpdateResult(uint64_t a1, long long *a2)
{
  uint64_t v4 = (_OWORD *)(a1 + 72);
  uint64_t v5 = *((void *)a2 + 13) >> 1;
  if ((*(void *)(a1 + 104) >> 1) > 0x80000000)
  {
    if (v5 <= 0x80000000)
    {
      uint64_t v46 = *((void *)a2 + 1);
      uint64_t v88 = *(void *)a2;
      uint64_t v47 = *((void *)a2 + 2);
      uint64_t v48 = *((void *)a2 + 3);
      uint64_t v49 = *((void *)a2 + 4);
      uint64_t v50 = *((void *)a2 + 5);
      uint64_t v51 = *((void *)a2 + 6);
      uint64_t v52 = *((void *)a2 + 7);
      char v90 = *((unsigned char *)a2 + 64);
      outlined copy of NavigationRequest.Action(*(void *)a2, v46, v47, v48, v49, v50, v51, v52, v90);
      *(void *)a1 = v88;
      *(void *)(a1 + 8) = v46;
      *(void *)(a1 + 16) = v47;
      *(void *)(a1 + 24) = v48;
      *(void *)(a1 + 32) = v49;
      *(void *)(a1 + 40) = v50;
      *(void *)(a1 + 48) = v51;
      *(void *)(a1 + 56) = v52;
      *(unsigned char *)(a1 + 64) = v90;
      long long v53 = *(long long *)((char *)a2 + 72);
      long long v54 = *(long long *)((char *)a2 + 104);
      v4[1] = *(long long *)((char *)a2 + 88);
      _OWORD v4[2] = v54;
      *uint64_t v4 = v53;
      *(unsigned char *)(a1 + 120) = *((unsigned char *)a2 + 120);
      *(void *)(a1 + 128) = *((void *)a2 + 16);
      long long v55 = *(long long *)((char *)a2 + 136);
      long long v56 = *(long long *)((char *)a2 + 152);
      *(_OWORD *)(a1 + 168) = *(long long *)((char *)a2 + 168);
      *(_OWORD *)(a1 + 152) = v56;
      *(_OWORD *)(a1 + 136) = v55;
      int v28 = *((unsigned __int8 *)a2 + 248);
      swift_retain();
      if (v28 == 255)
      {
        *(_OWORD *)(a1 + 184) = *(long long *)((char *)a2 + 184);
        long long v57 = *(long long *)((char *)a2 + 200);
        long long v58 = *(long long *)((char *)a2 + 216);
        long long v59 = *(long long *)((char *)a2 + 232);
        *(unsigned char *)(a1 + 248) = *((unsigned char *)a2 + 248);
        *(_OWORD *)(a1 + 216) = v58;
        *(_OWORD *)(a1 + 232) = v59;
        *(_OWORD *)(a1 + 200) = v57;
        return a1;
      }
LABEL_13:
      uint64_t v72 = *((void *)a2 + 23);
      uint64_t v73 = *((void *)a2 + 24);
      uint64_t v74 = *((void *)a2 + 25);
      uint64_t v75 = *((void *)a2 + 26);
      uint64_t v76 = *((void *)a2 + 27);
      uint64_t v77 = *((void *)a2 + 28);
      uint64_t v79 = *((void *)a2 + 29);
      uint64_t v78 = *((void *)a2 + 30);
      outlined copy of NavigationRequest.Action(v72, v73, v74, v75, v76, v77, v79, v78, v28);
      *(void *)(a1 + 184) = v72;
      *(void *)(a1 + 192) = v73;
      *(void *)(a1 + 200) = v74;
      *(void *)(a1 + 208) = v75;
      *(void *)(a1 + 216) = v76;
      *(void *)(a1 + 224) = v77;
      *(void *)(a1 + 232) = v79;
      *(void *)(a1 + 240) = v78;
      *(unsigned char *)(a1 + 248) = v28;
      return a1;
    }
LABEL_11:
    long long v60 = *a2;
    long long v61 = a2[1];
    long long v62 = a2[3];
    *(_OWORD *)(a1 + 32) = a2[2];
    *(_OWORD *)(a1 + 48) = v62;
    *(_OWORD *)a1 = v60;
    *(_OWORD *)(a1 + 16) = v61;
    long long v63 = a2[4];
    long long v64 = a2[5];
    long long v65 = a2[7];
    *(_OWORD *)(a1 + 96) = a2[6];
    *(_OWORD *)(a1 + 112) = v65;
    *(_OWORD *)(a1 + 64) = v63;
    *(_OWORD *)(a1 + 80) = v64;
    long long v66 = a2[8];
    long long v67 = a2[9];
    long long v68 = a2[11];
    *(_OWORD *)(a1 + 160) = a2[10];
    *(_OWORD *)(a1 + 176) = v68;
    *(_OWORD *)(a1 + 128) = v66;
    *(_OWORD *)(a1 + 144) = v67;
    long long v69 = a2[12];
    long long v70 = a2[13];
    long long v71 = a2[14];
    *(_OWORD *)(a1 + 233) = *(long long *)((char *)a2 + 233);
    *(_OWORD *)(a1 + 208) = v70;
    *(_OWORD *)(a1 + 224) = v71;
    *(_OWORD *)(a1 + 192) = v69;
    return a1;
  }
  if (v5 > 0x80000000)
  {
    outlined consume of NavigationRequest.Action(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(unsigned char *)(a1 + 64));
    swift_release();
    if (*(unsigned __int8 *)(a1 + 248) != 255) {
      outlined consume of NavigationRequest.Action(*(void *)(a1 + 184), *(void *)(a1 + 192), *(void *)(a1 + 200), *(void *)(a1 + 208), *(void *)(a1 + 216), *(void *)(a1 + 224), *(void *)(a1 + 232), *(void *)(a1 + 240), *(unsigned char *)(a1 + 248));
    }
    goto LABEL_11;
  }
  uint64_t v6 = *((void *)a2 + 1);
  uint64_t v87 = *(void *)a2;
  uint64_t v7 = *((void *)a2 + 2);
  uint64_t v8 = *((void *)a2 + 3);
  uint64_t v9 = *((void *)a2 + 4);
  uint64_t v10 = *((void *)a2 + 5);
  uint64_t v11 = *((void *)a2 + 6);
  uint64_t v12 = *((void *)a2 + 7);
  char v89 = *((unsigned char *)a2 + 64);
  outlined copy of NavigationRequest.Action(*(void *)a2, v6, v7, v8, v9, v10, v11, v12, v89);
  uint64_t v13 = *(void *)a1;
  uint64_t v14 = *(void *)(a1 + 8);
  uint64_t v15 = *(void *)(a1 + 16);
  uint64_t v16 = *(void *)(a1 + 24);
  uint64_t v17 = *(void *)(a1 + 32);
  uint64_t v18 = *(void *)(a1 + 40);
  uint64_t v19 = *(void *)(a1 + 48);
  uint64_t v20 = *(void *)(a1 + 56);
  char v21 = *(unsigned char *)(a1 + 64);
  *(void *)a1 = v87;
  *(void *)(a1 + 8) = v6;
  *(void *)(a1 + 16) = v7;
  *(void *)(a1 + 24) = v8;
  *(void *)(a1 + 32) = v9;
  *(void *)(a1 + 40) = v10;
  *(void *)(a1 + 48) = v11;
  *(void *)(a1 + 56) = v12;
  *(unsigned char *)(a1 + 64) = v89;
  outlined consume of NavigationRequest.Action(v13, v14, v15, v16, v17, v18, v19, v20, v21);
  long long v22 = *(long long *)((char *)a2 + 72);
  long long v23 = *(long long *)((char *)a2 + 104);
  v4[1] = *(long long *)((char *)a2 + 88);
  _OWORD v4[2] = v23;
  *uint64_t v4 = v22;
  *(unsigned char *)(a1 + 120) = *((unsigned char *)a2 + 120);
  *(void *)(a1 + 128) = *((void *)a2 + 16);
  swift_retain();
  swift_release();
  long long v24 = *(long long *)((char *)a2 + 136);
  long long v25 = *(long long *)((char *)a2 + 152);
  *(_OWORD *)(a1 + 168) = *(long long *)((char *)a2 + 168);
  *(_OWORD *)(a1 + 152) = v25;
  *(_OWORD *)(a1 + 136) = v24;
  long long v26 = (_OWORD *)(a1 + 184);
  long long v27 = (long long *)((char *)a2 + 184);
  int v28 = *((unsigned __int8 *)a2 + 248);
  if (*(unsigned __int8 *)(a1 + 248) == 255)
  {
    if (v28 == 255)
    {
      _OWORD *v26 = *v27;
      long long v83 = *(long long *)((char *)a2 + 200);
      long long v84 = *(long long *)((char *)a2 + 216);
      long long v85 = *(long long *)((char *)a2 + 232);
      *(unsigned char *)(a1 + 248) = *((unsigned char *)a2 + 248);
      *(_OWORD *)(a1 + 216) = v84;
      *(_OWORD *)(a1 + 232) = v85;
      *(_OWORD *)(a1 + 200) = v83;
      return a1;
    }
    goto LABEL_13;
  }
  if (v28 == 255)
  {
    outlined destroy of NavigationRequest.Action(a1 + 184);
    _OWORD *v26 = *v27;
    long long v81 = *(long long *)((char *)a2 + 216);
    long long v80 = *(long long *)((char *)a2 + 232);
    long long v82 = *(long long *)((char *)a2 + 200);
    *(unsigned char *)(a1 + 248) = *((unsigned char *)a2 + 248);
    *(_OWORD *)(a1 + 216) = v81;
    *(_OWORD *)(a1 + 232) = v80;
    *(_OWORD *)(a1 + 200) = v82;
  }
  else
  {
    uint64_t v29 = *((void *)a2 + 23);
    uint64_t v30 = *((void *)a2 + 24);
    uint64_t v31 = *((void *)a2 + 25);
    uint64_t v32 = *((void *)a2 + 26);
    uint64_t v33 = *((void *)a2 + 27);
    uint64_t v34 = *((void *)a2 + 28);
    uint64_t v36 = *((void *)a2 + 29);
    uint64_t v35 = *((void *)a2 + 30);
    outlined copy of NavigationRequest.Action(v29, v30, v31, v32, v33, v34, v36, v35, v28);
    uint64_t v37 = *(void *)(a1 + 184);
    uint64_t v38 = *(void *)(a1 + 192);
    uint64_t v39 = *(void *)(a1 + 200);
    uint64_t v40 = *(void *)(a1 + 208);
    uint64_t v41 = *(void *)(a1 + 216);
    uint64_t v42 = *(void *)(a1 + 224);
    uint64_t v43 = *(void *)(a1 + 232);
    uint64_t v44 = *(void *)(a1 + 240);
    char v45 = *(unsigned char *)(a1 + 248);
    *(void *)(a1 + 184) = v29;
    *(void *)(a1 + 192) = v30;
    *(void *)(a1 + 200) = v31;
    *(void *)(a1 + 208) = v32;
    *(void *)(a1 + 216) = v33;
    *(void *)(a1 + 224) = v34;
    *(void *)(a1 + 232) = v36;
    *(void *)(a1 + 240) = v35;
    *(unsigned char *)(a1 + 248) = v28;
    outlined consume of NavigationRequest.Action(v37, v38, v39, v40, v41, v42, v43, v44, v45);
  }
  return a1;
}

uint64_t outlined destroy of NavigationRequest.Action(uint64_t a1)
{
  return a1;
}

uint64_t assignWithTake for NavigationState.UpdateResult(uint64_t a1, uint64_t a2)
{
  if ((*(void *)(a1 + 104) >> 1) > 0x80000000)
  {
LABEL_8:
    long long v28 = *(_OWORD *)(a2 + 208);
    *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
    *(_OWORD *)(a1 + 208) = v28;
    *(_OWORD *)(a1 + 224) = *(_OWORD *)(a2 + 224);
    *(_OWORD *)(a1 + 233) = *(_OWORD *)(a2 + 233);
    long long v29 = *(_OWORD *)(a2 + 144);
    *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
    *(_OWORD *)(a1 + 144) = v29;
    long long v30 = *(_OWORD *)(a2 + 176);
    *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
    *(_OWORD *)(a1 + 176) = v30;
    long long v31 = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 80) = v31;
    long long v32 = *(_OWORD *)(a2 + 112);
    *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
    *(_OWORD *)(a1 + 112) = v32;
    long long v33 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v33;
    long long v34 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 48) = v34;
    return a1;
  }
  if ((*(void *)(a2 + 104) >> 1) > 0x80000000)
  {
    outlined consume of NavigationRequest.Action(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(unsigned char *)(a1 + 64));
    swift_release();
    if (*(unsigned __int8 *)(a1 + 248) != 255) {
      outlined consume of NavigationRequest.Action(*(void *)(a1 + 184), *(void *)(a1 + 192), *(void *)(a1 + 200), *(void *)(a1 + 208), *(void *)(a1 + 216), *(void *)(a1 + 224), *(void *)(a1 + 232), *(void *)(a1 + 240), *(unsigned char *)(a1 + 248));
    }
    goto LABEL_8;
  }
  uint64_t v4 = (_OWORD *)(a1 + 72);
  char v5 = *(unsigned char *)(a2 + 64);
  uint64_t v6 = *(void *)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  uint64_t v8 = *(void *)(a1 + 16);
  uint64_t v9 = *(void *)(a1 + 24);
  uint64_t v10 = *(void *)(a1 + 32);
  uint64_t v11 = *(void *)(a1 + 40);
  uint64_t v12 = *(void *)(a1 + 48);
  uint64_t v13 = *(void *)(a1 + 56);
  char v14 = *(unsigned char *)(a1 + 64);
  long long v15 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v15;
  long long v16 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v16;
  *(unsigned char *)(a1 + 64) = v5;
  outlined consume of NavigationRequest.Action(v6, v7, v8, v9, v10, v11, v12, v13, v14);
  long long v17 = *(_OWORD *)(a2 + 88);
  *uint64_t v4 = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 88) = v17;
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(unsigned char *)(a1 + 120) = *(unsigned char *)(a2 + 120);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  swift_release();
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
  int v18 = *(unsigned __int8 *)(a1 + 248);
  if (v18 == 255)
  {
LABEL_11:
    long long v36 = *(_OWORD *)(a2 + 232);
    *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 216);
    *(_OWORD *)(a1 + 232) = v36;
    *(unsigned char *)(a1 + 248) = *(unsigned char *)(a2 + 248);
    long long v37 = *(_OWORD *)(a2 + 200);
    *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 184);
    *(_OWORD *)(a1 + 200) = v37;
    return a1;
  }
  int v19 = *(unsigned __int8 *)(a2 + 248);
  if (v19 == 255)
  {
    outlined destroy of NavigationRequest.Action(a1 + 184);
    goto LABEL_11;
  }
  uint64_t v20 = *(void *)(a1 + 184);
  uint64_t v21 = *(void *)(a1 + 192);
  uint64_t v22 = *(void *)(a1 + 200);
  uint64_t v23 = *(void *)(a1 + 208);
  uint64_t v24 = *(void *)(a1 + 216);
  uint64_t v25 = *(void *)(a1 + 224);
  uint64_t v26 = *(void *)(a1 + 232);
  uint64_t v27 = *(void *)(a1 + 240);
  *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 184);
  *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 + 200);
  *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 216);
  *(_OWORD *)(a1 + 232) = *(_OWORD *)(a2 + 232);
  *(unsigned char *)(a1 + 248) = v19;
  outlined consume of NavigationRequest.Action(v20, v21, v22, v23, v24, v25, v26, v27, v18);
  return a1;
}

uint64_t getEnumTagSinglePayload for NavigationState.UpdateResult(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFE && *(unsigned char *)(a1 + 249)) {
    return (*(_DWORD *)a1 + 2147483646);
  }
  uint64_t v3 = *(void *)(a1 + 104) >> 1;
  if (v3 > 0x80000000) {
    unsigned int v4 = -(int)v3;
  }
  else {
    unsigned int v4 = 0;
  }
  if (v4 >= 3) {
    return v4 - 2;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for NavigationState.UpdateResult(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFD)
  {
    *(_OWORD *)(result + 233) = 0u;
    *(_OWORD *)(result + 208) = 0u;
    *(_OWORD *)(result + 224) = 0u;
    *(_OWORD *)(result + 176) = 0u;
    *(_OWORD *)(result + 192) = 0u;
    *(_OWORD *)(result + 144) = 0u;
    *(_OWORD *)(result + 160) = 0u;
    *(_OWORD *)(result + 112) = 0u;
    *(_OWORD *)(result + 128) = 0u;
    *(_OWORD *)(result + 80) = 0u;
    *(_OWORD *)(result + 96) = 0u;
    *(_OWORD *)(result + 48) = 0u;
    *(_OWORD *)(result + 64) = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_OWORD *)(result + 32) = 0u;
    *(_OWORD *)uint64_t result = 0u;
    *(_DWORD *)uint64_t result = a2 - 2147483646;
    if (a3 >= 0x7FFFFFFE) {
      *(unsigned char *)(result + 249) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFE) {
      *(unsigned char *)(result + 249) = 0;
    }
    if (a2)
    {
      *(_OWORD *)(result + 88) = 0u;
      *(_OWORD *)(result + 72) = 0u;
      *(void *)(result + 104) = 2 * (-2 - a2);
      *(void *)(result + 112) = 0;
    }
  }
  return result;
}

double destructiveInjectEnumTag for NavigationState.UpdateResult(uint64_t a1, int a2)
{
  if (a2 < 0)
  {
    double result = 0.0;
    *(_OWORD *)(a1 + 232) = 0u;
    *(_OWORD *)(a1 + 216) = 0u;
    *(_OWORD *)(a1 + 200) = 0u;
    *(_OWORD *)(a1 + 184) = 0u;
    *(_OWORD *)(a1 + 168) = 0u;
    *(_OWORD *)(a1 + 152) = 0u;
    *(_OWORD *)(a1 + 136) = 0u;
    *(_OWORD *)(a1 + 120) = 0u;
    *(_OWORD *)(a1 + 104) = 0u;
    *(_OWORD *)(a1 + 88) = 0u;
    *(_OWORD *)(a1 + 72) = 0u;
    *(_OWORD *)(a1 + 56) = 0u;
    *(_OWORD *)(a1 + 40) = 0u;
    *(_OWORD *)(a1 + 24) = 0u;
    *(_OWORD *)(a1 + 8) = 0u;
    *(unsigned char *)(a1 + 248) = 0;
    *(void *)a1 = a2 ^ 0x80000000;
  }
  else if (a2)
  {
    double result = 0.0;
    *(_OWORD *)(a1 + 88) = 0u;
    *(_OWORD *)(a1 + 72) = 0u;
    *(void *)(a1 + 104) = 2 * -a2;
    *(void *)(a1 + 112) = 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for NavigationState.UpdateResult()
{
  return &type metadata for NavigationState.UpdateResult;
}

void *destructiveInjectEnumTag for NavigationState.Base(void *result, uint64_t a2)
{
  uint64_t v2 = result[31] & 0xFFFFFFFFFFFFFF8;
  uint64_t v3 = result[33] & 7;
  uint64_t v4 = result[37] & 0xFFFF03;
  result[21] &= 0x8FFFFFFFFFFFFFF8;
  result[31] = v2;
  result[33] = v3;
  result[37] = v4 | (a2 << 62);
  return result;
}

ValueMetadata *type metadata accessor for NavigationState.Base()
{
  return &type metadata for NavigationState.Base;
}

uint64_t outlined destroy of Binding<NavigationSplitViewColumn>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  uint64_t v6 = a5(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(a1, v6);
  return a1;
}

uint64_t outlined init with take of ConfirmationDialog(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t outlined init with copy of (key: AccessibilityRelationshipScope.Key, relationship: AccessibilityRelationshipScope.Relationship, nodes: [AccessibilityNode])?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(void, uint64_t, uint64_t, uint64_t))
{
  uint64_t v8 = a6(0, a3, a4, a5);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 16))(a2, a1, v8);
  return a2;
}

uint64_t outlined init with take of NavigationRequest.KeyKind(uint64_t a1, uint64_t a2)
{
  return a2;
}

unint64_t type metadata accessor for UINavigationController()
{
  unint64_t result = lazy cache variable for type metadata for UINavigationController;
  if (!lazy cache variable for type metadata for UINavigationController)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for UINavigationController);
  }
  return result;
}

uint64_t partial apply for specialized closure #1 in Collection<>.collapsedItemCount<A>(within:splitViewState:)@<X0>(uint64_t *a1@<X0>, unint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result = specialized closure #1 in Collection<>.collapsedItemCount<A>(within:splitViewState:)(*a1, *a2, **(void **)(v3 + 16), *(void *)(v3 + 24));
  if (!v4) {
    *a3 = result;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for NavigationState.StackContent.Views.ViewsSequence.Index.Kind(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFE && *(unsigned char *)(a1 + 9)) {
    return (*(_DWORD *)a1 + 254);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 8);
  if (v3 <= 2) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for NavigationState.StackContent.Views.ViewsSequence.Index.Kind(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(unsigned char *)(result + 8) = 0;
    *(void *)uint64_t result = a2 - 254;
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 9) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 9) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 8) = -(char)a2;
    }
  }
  return result;
}

uint64_t getEnumTag for NavigationState.StackContent.Views.ViewsSequence.Index.Kind(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 8) <= 1u) {
    return *(unsigned __int8 *)(a1 + 8);
  }
  else {
    return (*(_DWORD *)a1 + 2);
  }
}

uint64_t destructiveInjectEnumTag for NavigationState.StackContent.Views.ViewsSequence.Index.Kind(uint64_t result, unsigned int a2)
{
  if (a2 >= 2)
  {
    *(void *)uint64_t result = a2 - 2;
    LOBYTE(a2) = 2;
  }
  *(unsigned char *)(result + 8) = a2;
  return result;
}

uint64_t type metadata accessor for NavigationState.StackContent.Views.ViewsSequence.Index.Kind()
{
  return swift_getGenericMetadata();
}

ValueMetadata *type metadata accessor for NavigationState.StackContent.ChangeKind()
{
  return &type metadata for NavigationState.StackContent.ChangeKind;
}

uint64_t destroy for NavigationState.StackContent.Views.ViewsSequence(uint64_t a1)
{
  long long v5 = *(_OWORD *)(a1 + 288);
  long long v3 = *(_OWORD *)(a1 + 256);
  long long v4 = *(_OWORD *)(a1 + 272);
  long long v2 = *(_OWORD *)(a1 + 224);
  outlined consume of NavigationState.Base(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 72), *(void *)(a1 + 80), *(void *)(a1 + 88), *(void *)(a1 + 96), *(void *)(a1 + 104), *(void *)(a1 + 112), *(void *)(a1 + 120), *(void *)(a1 + 128), *(void *)(a1 + 136), *(void *)(a1 + 144),
    *(void *)(a1 + 152),
    *(void *)(a1 + 160),
    *(void *)(a1 + 168),
    *(void *)(a1 + 176),
    *(void *)(a1 + 184),
    *(void *)(a1 + 192),
    *(void *)(a1 + 200),
    *(void *)(a1 + 208),
    *(void *)(a1 + 216),
    v2,
    *((uint64_t *)&v2 + 1),
    *(void *)(a1 + 240),
    *(void *)(a1 + 248),
    v3,
    *((uint64_t *)&v3 + 1),
    v4,
    *((uint64_t *)&v4 + 1),
    v5,
    *((unint64_t *)&v5 + 1),
    *(void *)(a1 + 304));
  swift_release();

  return swift_bridgeObjectRelease();
}

uint64_t *initializeWithCopy for NavigationState.StackContent.Views.ViewsSequence(uint64_t *a1, uint64_t *a2)
{
  uint64_t v53 = a2[9];
  uint64_t v54 = a2[8];
  uint64_t v51 = a2[11];
  uint64_t v52 = a2[10];
  uint64_t v49 = a2[13];
  uint64_t v50 = a2[12];
  uint64_t v47 = a2[15];
  uint64_t v48 = a2[14];
  uint64_t v45 = a2[17];
  uint64_t v46 = a2[16];
  uint64_t v43 = a2[19];
  uint64_t v44 = a2[18];
  uint64_t v41 = a2[21];
  uint64_t v42 = a2[20];
  uint64_t v14 = a2[22];
  uint64_t v15 = a2[23];
  uint64_t v16 = a2[24];
  uint64_t v17 = a2[25];
  uint64_t v18 = a2[26];
  uint64_t v19 = a2[27];
  uint64_t v20 = a2[28];
  uint64_t v21 = a2[29];
  uint64_t v22 = a2[30];
  uint64_t v23 = a2[31];
  uint64_t v24 = a2[32];
  uint64_t v25 = a2[33];
  uint64_t v26 = a2[34];
  uint64_t v27 = a2[35];
  uint64_t v28 = a2[36];
  unint64_t v29 = a2[37];
  uint64_t v30 = a2[38];
  uint64_t v31 = a2[39];
  uint64_t v32 = a2[40];
  uint64_t v33 = a2[41];
  uint64_t v34 = a2[42];
  uint64_t v35 = a2[43];
  uint64_t v36 = a2[44];
  uint64_t v37 = a2[45];
  uint64_t v38 = a2[46];
  uint64_t v39 = a2[47];
  uint64_t v40 = a2[48];
  uint64_t v5 = a2[1];
  uint64_t v4 = *a2;
  uint64_t v6 = a2[2];
  uint64_t v7 = a2[3];
  uint64_t v8 = a2[4];
  uint64_t v9 = a2[5];
  uint64_t v10 = a2[6];
  uint64_t v11 = a2[7];
  outlined copy of NavigationState.Base(*a2, v5, v6, v7, v8, v9, v10, v11, v54, v53, v52, v51, v50, v49, v48, v47, v46, v45, v44,
    v43,
    v42,
    v41,
    v14,
    v15,
    v16,
    v17,
    v18,
    v19,
    v20,
    v21,
    v22,
    v23,
    v24,
    v25,
    v26,
    v27,
    v28,
    v29,
    v30);
  *a1 = v4;
  a1[1] = v5;
  a1[2] = v6;
  a1[3] = v7;
  a1[4] = v8;
  a1[5] = v9;
  a1[6] = v10;
  a1[7] = v11;
  a1[8] = v54;
  a1[9] = v53;
  a1[10] = v52;
  a1[11] = v51;
  a1[12] = v50;
  a1[13] = v49;
  a1[14] = v48;
  a1[15] = v47;
  a1[16] = v46;
  a1[17] = v45;
  a1[18] = v44;
  a1[19] = v43;
  a1[20] = v42;
  a1[21] = v41;
  a1[22] = v14;
  a1[23] = v15;
  a1[24] = v16;
  a1[25] = v17;
  a1[26] = v18;
  a1[27] = v19;
  a1[28] = v20;
  a1[29] = v21;
  a1[30] = v22;
  a1[31] = v23;
  a1[32] = v24;
  a1[33] = v25;
  a1[34] = v26;
  a1[35] = v27;
  a1[36] = v28;
  a1[37] = v29;
  a1[38] = v30;
  a1[39] = v31;
  a1[40] = v32;
  a1[41] = v33;
  a1[42] = v34;
  a1[43] = v35;
  a1[44] = v36;
  a1[45] = v37;
  a1[46] = v38;
  a1[47] = v39;
  a1[48] = v40;
  uint64_t v12 = a2[50];
  a1[49] = a2[49];
  a1[50] = v12;
  a1[51] = a2[51];
  swift_retain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for NavigationState.StackContent.Views.ViewsSequence(uint64_t a1, uint64_t *a2)
{
  uint64_t v77 = a2[1];
  uint64_t v78 = *a2;
  uint64_t v75 = a2[3];
  uint64_t v76 = a2[2];
  uint64_t v73 = a2[5];
  uint64_t v74 = a2[4];
  uint64_t v71 = a2[7];
  uint64_t v72 = a2[6];
  uint64_t v69 = a2[9];
  uint64_t v70 = a2[8];
  uint64_t v67 = a2[11];
  uint64_t v68 = a2[10];
  uint64_t v65 = a2[13];
  uint64_t v66 = a2[12];
  uint64_t v63 = a2[15];
  uint64_t v64 = a2[14];
  uint64_t v61 = a2[17];
  uint64_t v62 = a2[16];
  uint64_t v59 = a2[19];
  uint64_t v60 = a2[18];
  uint64_t v58 = a2[20];
  uint64_t v4 = a2[22];
  uint64_t v57 = a2[21];
  uint64_t v5 = a2[23];
  uint64_t v6 = a2[24];
  uint64_t v7 = a2[25];
  uint64_t v9 = a2[27];
  uint64_t v8 = a2[28];
  uint64_t v11 = a2[29];
  uint64_t v10 = a2[30];
  uint64_t v38 = a2[26];
  uint64_t v39 = a2[31];
  uint64_t v40 = a2[32];
  uint64_t v41 = a2[33];
  uint64_t v42 = a2[34];
  uint64_t v43 = a2[35];
  uint64_t v44 = a2[36];
  unint64_t v45 = a2[37];
  uint64_t v46 = a2[38];
  uint64_t v47 = a2[39];
  uint64_t v48 = a2[40];
  uint64_t v49 = a2[41];
  uint64_t v50 = a2[42];
  uint64_t v51 = a2[43];
  uint64_t v52 = a2[44];
  uint64_t v53 = a2[45];
  uint64_t v54 = a2[46];
  uint64_t v55 = a2[47];
  uint64_t v56 = a2[48];
  outlined copy of NavigationState.Base(*a2, v77, v76, v75, v74, v73, v72, v71, v70, v69, v68, v67, v66, v65, v64, v63, v62, v61, v60,
    v59,
    v58,
    v57,
    v4,
    v5,
    v6,
    v7,
    v38,
    v9,
    v8,
    v11,
    v10,
    v39,
    v40,
    v41,
    v42,
    v43,
    v44,
    v45,
    v46);
  uint64_t v12 = *(void *)a1;
  uint64_t v13 = *(void *)(a1 + 8);
  *(void *)a1 = v78;
  *(void *)(a1 + 8) = v77;
  uint64_t v14 = *(void *)(a1 + 16);
  uint64_t v15 = *(void *)(a1 + 24);
  *(void *)(a1 + 16) = v76;
  *(void *)(a1 + 24) = v75;
  uint64_t v16 = *(void *)(a1 + 32);
  uint64_t v17 = *(void *)(a1 + 40);
  *(void *)(a1 + 32) = v74;
  *(void *)(a1 + 40) = v73;
  uint64_t v18 = *(void *)(a1 + 48);
  uint64_t v19 = *(void *)(a1 + 56);
  *(void *)(a1 + 48) = v72;
  *(void *)(a1 + 56) = v71;
  long long v20 = *(_OWORD *)(a1 + 64);
  long long v21 = *(_OWORD *)(a1 + 80);
  *(void *)(a1 + 64) = v70;
  *(void *)(a1 + 72) = v69;
  *(void *)(a1 + 80) = v68;
  *(void *)(a1 + 88) = v67;
  long long v22 = *(_OWORD *)(a1 + 96);
  long long v23 = *(_OWORD *)(a1 + 112);
  *(void *)(a1 + 96) = v66;
  *(void *)(a1 + 104) = v65;
  *(void *)(a1 + 112) = v64;
  *(void *)(a1 + 120) = v63;
  long long v24 = *(_OWORD *)(a1 + 128);
  long long v25 = *(_OWORD *)(a1 + 144);
  *(void *)(a1 + 128) = v62;
  *(void *)(a1 + 136) = v61;
  *(void *)(a1 + 144) = v60;
  *(void *)(a1 + 152) = v59;
  long long v26 = *(_OWORD *)(a1 + 160);
  long long v27 = *(_OWORD *)(a1 + 176);
  *(void *)(a1 + 160) = v58;
  *(void *)(a1 + 168) = v57;
  *(void *)(a1 + 176) = v4;
  long long v28 = *(_OWORD *)(a1 + 192);
  long long v29 = *(_OWORD *)(a1 + 208);
  *(void *)(a1 + 184) = v5;
  *(void *)(a1 + 192) = v6;
  *(void *)(a1 + 200) = v7;
  *(void *)(a1 + 208) = v38;
  long long v30 = *(_OWORD *)(a1 + 224);
  long long v31 = *(_OWORD *)(a1 + 240);
  *(void *)(a1 + 216) = v9;
  *(void *)(a1 + 224) = v8;
  *(void *)(a1 + 232) = v11;
  *(void *)(a1 + 240) = v10;
  *(void *)(a1 + 248) = v39;
  long long v32 = *(_OWORD *)(a1 + 256);
  long long v33 = *(_OWORD *)(a1 + 272);
  *(void *)(a1 + 256) = v40;
  *(void *)(a1 + 264) = v41;
  *(void *)(a1 + 272) = v42;
  *(void *)(a1 + 280) = v43;
  long long v34 = *(_OWORD *)(a1 + 288);
  long long v35 = *(_OWORD *)(a1 + 304);
  *(void *)(a1 + 288) = v44;
  *(void *)(a1 + 296) = v45;
  *(void *)(a1 + 304) = v46;
  *(void *)(a1 + 312) = v47;
  *(void *)(a1 + 320) = v48;
  *(void *)(a1 + 328) = v49;
  *(void *)(a1 + 336) = v50;
  *(void *)(a1 + 344) = v51;
  *(void *)(a1 + 352) = v52;
  *(void *)(a1 + 360) = v53;
  *(void *)(a1 + 368) = v54;
  *(void *)(a1 + 376) = v55;
  *(void *)(a1 + 384) = v56;
  outlined consume of NavigationState.Base(v12, v13, v14, v15, v16, v17, v18, v19, v20, WORD4(v20), v21, *((uint64_t *)&v21 + 1), v22, *((uint64_t *)&v22 + 1), v23, *((uint64_t *)&v23 + 1), v24, *((uint64_t *)&v24 + 1), v25,
    *((uint64_t *)&v25 + 1),
    v26,
    *((uint64_t *)&v26 + 1),
    v27,
    *((uint64_t *)&v27 + 1),
    v28,
    *((uint64_t *)&v28 + 1),
    v29,
    *((uint64_t *)&v29 + 1),
    v30,
    *((uint64_t *)&v30 + 1),
    v31,
    *((uint64_t *)&v31 + 1),
    v32,
    *((uint64_t *)&v32 + 1),
    v33,
    *((uint64_t *)&v33 + 1),
    v34,
    *((unint64_t *)&v34 + 1),
    v35);
  uint64_t v36 = a2[50];
  *(void *)(a1 + 392) = a2[49];
  *(void *)(a1 + 400) = v36;
  swift_retain();
  swift_release();
  *(void *)(a1 + 408) = a2[51];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

void *__swift_memcpy416_8(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x1A0uLL);
}

uint64_t assignWithTake for NavigationState.StackContent.Views.ViewsSequence(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 384);
  uint64_t v5 = *(void *)a1;
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v7 = *(void *)(a1 + 16);
  uint64_t v8 = *(void *)(a1 + 24);
  uint64_t v9 = *(void *)(a1 + 32);
  uint64_t v10 = *(void *)(a1 + 40);
  uint64_t v11 = *(void *)(a1 + 48);
  uint64_t v12 = *(void *)(a1 + 56);
  long long v13 = *(_OWORD *)(a1 + 64);
  long long v14 = *(_OWORD *)(a1 + 80);
  long long v15 = *(_OWORD *)(a1 + 96);
  long long v16 = *(_OWORD *)(a1 + 112);
  long long v17 = *(_OWORD *)(a1 + 128);
  long long v18 = *(_OWORD *)(a1 + 144);
  long long v19 = *(_OWORD *)(a1 + 160);
  long long v20 = *(_OWORD *)(a1 + 176);
  long long v21 = *(_OWORD *)(a1 + 192);
  long long v22 = *(_OWORD *)(a1 + 208);
  long long v23 = *(_OWORD *)(a1 + 224);
  long long v24 = *(_OWORD *)(a1 + 240);
  long long v25 = *(_OWORD *)(a1 + 256);
  long long v26 = *(_OWORD *)(a1 + 272);
  long long v27 = *(_OWORD *)(a1 + 288);
  long long v28 = *(_OWORD *)(a1 + 304);
  long long v29 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v29;
  long long v30 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v30;
  long long v31 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v31;
  long long v32 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = v32;
  long long v33 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v33;
  long long v34 = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 176) = v34;
  long long v35 = *(_OWORD *)(a2 + 208);
  *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 208) = v35;
  long long v36 = *(_OWORD *)(a2 + 240);
  long long v37 = *(_OWORD *)(a2 + 256);
  long long v38 = *(_OWORD *)(a2 + 272);
  long long v39 = *(_OWORD *)(a2 + 288);
  long long v40 = *(_OWORD *)(a2 + 304);
  long long v41 = *(_OWORD *)(a2 + 320);
  long long v42 = *(_OWORD *)(a2 + 336);
  long long v43 = *(_OWORD *)(a2 + 352);
  long long v44 = *(_OWORD *)(a2 + 368);
  *(_OWORD *)(a1 + 224) = *(_OWORD *)(a2 + 224);
  *(_OWORD *)(a1 + 240) = v36;
  *(_OWORD *)(a1 + 256) = v37;
  *(_OWORD *)(a1 + 272) = v38;
  *(_OWORD *)(a1 + 288) = v39;
  *(_OWORD *)(a1 + 304) = v40;
  *(_OWORD *)(a1 + 320) = v41;
  *(_OWORD *)(a1 + 336) = v42;
  *(_OWORD *)(a1 + 352) = v43;
  *(_OWORD *)(a1 + 368) = v44;
  *(void *)(a1 + 384) = v4;
  outlined consume of NavigationState.Base(v5, v6, v7, v8, v9, v10, v11, v12, v13, WORD4(v13), v14, *((uint64_t *)&v14 + 1), v15, *((uint64_t *)&v15 + 1), v16, *((uint64_t *)&v16 + 1), v17, *((uint64_t *)&v17 + 1), v18,
    *((uint64_t *)&v18 + 1),
    v19,
    *((uint64_t *)&v19 + 1),
    v20,
    *((uint64_t *)&v20 + 1),
    v21,
    *((uint64_t *)&v21 + 1),
    v22,
    *((uint64_t *)&v22 + 1),
    v23,
    *((uint64_t *)&v23 + 1),
    v24,
    *((uint64_t *)&v24 + 1),
    v25,
    *((uint64_t *)&v25 + 1),
    v26,
    *((uint64_t *)&v26 + 1),
    v27,
    *((unint64_t *)&v27 + 1),
    v28);
  *(_OWORD *)(a1 + 392) = *(_OWORD *)(a2 + 392);
  swift_release();
  *(void *)(a1 + 408) = *(void *)(a2 + 408);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for NavigationState.StackContent.Views.ViewsSequence(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 416)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unsigned int v2 = (*(void *)(a1 + 168) >> 57) & 0x38 | *(void *)(a1 + 168) & 7 | (*(void *)(a1 + 248) >> 51) & 0x1E00 | ((*(void *)(a1 + 248) & 7) << 6) & 0x1FFF | (*(_DWORD *)(a1 + 264) >> 3 << 13);
  if (v2 > 0x80000000) {
    int v3 = ~v2;
  }
  else {
    int v3 = -1;
  }
  return (v3 + 1);
}

double storeEnumTagSinglePayload for NavigationState.StackContent.Views.ViewsSequence(uint64_t a1, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(a1 + 408) = 0;
    double result = 0.0;
    *(_OWORD *)(a1 + 248) = 0u;
    *(_OWORD *)(a1 + 232) = 0u;
    *(_OWORD *)(a1 + 216) = 0u;
    *(_OWORD *)(a1 + 200) = 0u;
    *(_OWORD *)(a1 + 184) = 0u;
    *(_OWORD *)(a1 + 168) = 0u;
    *(_OWORD *)(a1 + 152) = 0u;
    *(_OWORD *)(a1 + 136) = 0u;
    *(_OWORD *)(a1 + 120) = 0u;
    *(_OWORD *)(a1 + 104) = 0u;
    *(_OWORD *)(a1 + 88) = 0u;
    *(_OWORD *)(a1 + 72) = 0u;
    *(_OWORD *)(a1 + 56) = 0u;
    *(_OWORD *)(a1 + 40) = 0u;
    *(_OWORD *)(a1 + 24) = 0u;
    *(_OWORD *)(a1 + 8) = 0u;
    *(_OWORD *)(a1 + 392) = 0u;
    *(_OWORD *)(a1 + 376) = 0u;
    *(_OWORD *)(a1 + 360) = 0u;
    *(_OWORD *)(a1 + 344) = 0u;
    *(_OWORD *)(a1 + 328) = 0u;
    *(_OWORD *)(a1 + 312) = 0u;
    *(_OWORD *)(a1 + 296) = 0u;
    *(_OWORD *)(a1 + 280) = 0u;
    *(_OWORD *)(a1 + 264) = 0u;
    *(void *)a1 = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(a1 + 416) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      unint64_t v4 = -a2;
      double result = 0.0;
      *(_OWORD *)(a1 + 128) = 0u;
      *(_OWORD *)(a1 + 144) = 0u;
      *(_OWORD *)(a1 + 96) = 0u;
      *(_OWORD *)(a1 + 112) = 0u;
      *(_OWORD *)(a1 + 64) = 0u;
      *(_OWORD *)(a1 + 80) = 0u;
      *(_OWORD *)(a1 + 32) = 0u;
      *(_OWORD *)(a1 + 48) = 0u;
      *(_OWORD *)a1 = 0u;
      *(_OWORD *)(a1 + 16) = 0u;
      *(void *)(a1 + 160) = 0;
      *(void *)(a1 + 168) = (v4 | (v4 << 57)) & 0x7000000000000007;
      *(_OWORD *)(a1 + 176) = 0u;
      *(_OWORD *)(a1 + 192) = 0u;
      *(_OWORD *)(a1 + 208) = 0u;
      *(_OWORD *)(a1 + 224) = 0u;
      *(void *)(a1 + 240) = 0;
      *(void *)(a1 + 248) = ((v4 >> 6) | (v4 << 51)) & 0xF000000000000007;
      *(void *)(a1 + 256) = 0;
      *(void *)(a1 + 264) = (v4 >> 10) & 0x3FFFF8;
      *(_OWORD *)(a1 + 272) = 0u;
      *(_OWORD *)(a1 + 288) = 0u;
      *(_OWORD *)(a1 + 304) = 0u;
      *(_OWORD *)(a1 + 320) = 0u;
      *(_OWORD *)(a1 + 336) = 0u;
      *(_OWORD *)(a1 + 352) = 0u;
      *(_OWORD *)(a1 + 368) = 0u;
      *(void *)(a1 + 384) = 0;
      return result;
    }
    *(unsigned char *)(a1 + 416) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t associated type witness table accessor for Sequence.Iterator : IteratorProtocol in NavigationState.StackContent.Views.ViewsSequence<A, B>()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for Collection in NavigationState.StackContent.Views.ViewsSequence<A, B>()
{
  return swift_getWitnessTable();
}

uint64_t associated type witness table accessor for Collection.Indices : BidirectionalCollection in NavigationState.StackContent.Views.ViewsSequence<A, B>()
{
  return swift_getWitnessTable();
}

uint64_t associated type witness table accessor for Collection.SubSequence : BidirectionalCollection in NavigationState.StackContent.Views.ViewsSequence<A, B>()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for Equatable in NavigationState.StackContent.Views.ViewsSequence<A, B>.Index.Kind()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for Sequence in NavigationState.StackContent.Views.ViewsSequence<A, B>()
{
  return swift_getWitnessTable();
}

uint64_t associated type witness table accessor for Collection.Index : Comparable in NavigationState.StackContent.Views.ViewsSequence<A, B>()
{
  return swift_getWitnessTable();
}

uint64_t associated type witness table accessor for Collection.Indices : Collection in NavigationState.StackContent.Views.ViewsSequence<A, B>()
{
  return swift_getWitnessTable();
}

uint64_t associated type witness table accessor for Collection.SubSequence : Collection in NavigationState.StackContent.Views.ViewsSequence<A, B>()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for Equatable in NavigationState.StackContent.Views.ViewsSequence<A, B>.Index()
{
  return swift_getWitnessTable();
}

uint64_t outlined init with take of NavigationStackViewSource(uint64_t a1, uint64_t a2)
{
  return a2;
}

void destroy for NavigationState.StackContent(uint64_t a1)
{
  long long v5 = *(_OWORD *)(a1 + 288);
  long long v3 = *(_OWORD *)(a1 + 256);
  long long v4 = *(_OWORD *)(a1 + 272);
  long long v1 = *(_OWORD *)(a1 + 224);
  long long v2 = *(_OWORD *)(a1 + 240);
  outlined consume of NavigationState.Base(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 72), *(void *)(a1 + 80), *(void *)(a1 + 88), *(void *)(a1 + 96), *(void *)(a1 + 104), *(void *)(a1 + 112), *(void *)(a1 + 120), *(void *)(a1 + 128), *(void *)(a1 + 136), *(void *)(a1 + 144),
    *(void *)(a1 + 152),
    *(void *)(a1 + 160),
    *(void *)(a1 + 168),
    *(void *)(a1 + 176),
    *(void *)(a1 + 184),
    *(void *)(a1 + 192),
    *(void *)(a1 + 200),
    *(void *)(a1 + 208),
    *(void *)(a1 + 216),
    v1,
    *((uint64_t *)&v1 + 1),
    v2,
    *((uint64_t *)&v2 + 1),
    v3,
    *((uint64_t *)&v3 + 1),
    v4,
    *((uint64_t *)&v4 + 1),
    v5,
    *((unint64_t *)&v5 + 1),
    *(void *)(a1 + 304));
}

uint64_t *initializeWithCopy for NavigationState.StackContent(uint64_t *a1, uint64_t *a2)
{
  uint64_t v51 = a2[9];
  uint64_t v52 = a2[8];
  uint64_t v49 = a2[11];
  uint64_t v50 = a2[10];
  uint64_t v47 = a2[13];
  uint64_t v48 = a2[12];
  uint64_t v45 = a2[15];
  uint64_t v46 = a2[14];
  uint64_t v43 = a2[17];
  uint64_t v44 = a2[16];
  uint64_t v41 = a2[19];
  uint64_t v42 = a2[18];
  uint64_t v40 = a2[20];
  uint64_t v13 = a2[21];
  uint64_t v14 = a2[22];
  uint64_t v15 = a2[23];
  uint64_t v16 = a2[24];
  uint64_t v17 = a2[25];
  uint64_t v18 = a2[26];
  uint64_t v19 = a2[27];
  uint64_t v20 = a2[28];
  uint64_t v3 = a2[30];
  uint64_t v21 = a2[29];
  uint64_t v22 = a2[31];
  uint64_t v23 = a2[32];
  uint64_t v24 = a2[33];
  uint64_t v25 = a2[34];
  uint64_t v26 = a2[35];
  uint64_t v27 = a2[36];
  unint64_t v28 = a2[37];
  uint64_t v29 = a2[38];
  uint64_t v30 = a2[39];
  uint64_t v31 = a2[40];
  uint64_t v32 = a2[41];
  uint64_t v33 = a2[42];
  uint64_t v34 = a2[43];
  uint64_t v35 = a2[44];
  uint64_t v36 = a2[45];
  uint64_t v37 = a2[46];
  uint64_t v38 = a2[47];
  uint64_t v39 = a2[48];
  uint64_t v5 = a2[1];
  uint64_t v4 = *a2;
  uint64_t v7 = a2[3];
  uint64_t v6 = a2[2];
  uint64_t v8 = a2[4];
  uint64_t v9 = a2[5];
  uint64_t v10 = a2[6];
  uint64_t v11 = a2[7];
  outlined copy of NavigationState.Base(*a2, v5, v6, v7, v8, v9, v10, v11, v52, v51, v50, v49, v48, v47, v46, v45, v44, v43, v42,
    v41,
    v40,
    v13,
    v14,
    v15,
    v16,
    v17,
    v18,
    v19,
    v20,
    v21,
    v3,
    v22,
    v23,
    v24,
    v25,
    v26,
    v27,
    v28,
    v29);
  *a1 = v4;
  a1[1] = v5;
  a1[2] = v6;
  a1[3] = v7;
  a1[4] = v8;
  a1[5] = v9;
  a1[6] = v10;
  a1[7] = v11;
  a1[8] = v52;
  a1[9] = v51;
  a1[10] = v50;
  a1[11] = v49;
  a1[12] = v48;
  a1[13] = v47;
  a1[14] = v46;
  a1[15] = v45;
  a1[16] = v44;
  a1[17] = v43;
  a1[18] = v42;
  a1[19] = v41;
  a1[20] = v40;
  a1[21] = v13;
  a1[22] = v14;
  a1[23] = v15;
  a1[24] = v16;
  a1[25] = v17;
  a1[26] = v18;
  a1[27] = v19;
  a1[28] = v20;
  a1[29] = v21;
  a1[30] = v3;
  a1[31] = v22;
  a1[32] = v23;
  a1[33] = v24;
  a1[34] = v25;
  a1[35] = v26;
  a1[36] = v27;
  a1[37] = v28;
  a1[38] = v29;
  a1[39] = v30;
  a1[40] = v31;
  a1[41] = v32;
  a1[42] = v33;
  a1[43] = v34;
  a1[44] = v35;
  a1[45] = v36;
  a1[46] = v37;
  a1[47] = v38;
  a1[48] = v39;
  return a1;
}

uint64_t assignWithCopy for NavigationState.StackContent(uint64_t a1, uint64_t *a2)
{
  uint64_t v75 = *a2;
  uint64_t v76 = a2[1];
  uint64_t v73 = a2[3];
  uint64_t v74 = a2[2];
  uint64_t v71 = a2[5];
  uint64_t v72 = a2[4];
  uint64_t v69 = a2[7];
  uint64_t v70 = a2[6];
  uint64_t v67 = a2[9];
  uint64_t v68 = a2[8];
  uint64_t v65 = a2[11];
  uint64_t v66 = a2[10];
  uint64_t v63 = a2[13];
  uint64_t v64 = a2[12];
  uint64_t v61 = a2[15];
  uint64_t v62 = a2[14];
  uint64_t v59 = a2[17];
  uint64_t v60 = a2[16];
  uint64_t v57 = a2[19];
  uint64_t v58 = a2[18];
  uint64_t v3 = a2[21];
  uint64_t v56 = a2[20];
  uint64_t v4 = a2[22];
  uint64_t v5 = a2[23];
  uint64_t v6 = a2[24];
  uint64_t v7 = a2[25];
  uint64_t v8 = a2[27];
  uint64_t v10 = a2[28];
  uint64_t v9 = a2[29];
  uint64_t v11 = a2[30];
  uint64_t v37 = a2[26];
  uint64_t v38 = a2[31];
  uint64_t v39 = a2[32];
  uint64_t v40 = a2[33];
  uint64_t v41 = a2[34];
  uint64_t v42 = a2[35];
  uint64_t v43 = a2[36];
  unint64_t v44 = a2[37];
  uint64_t v45 = a2[38];
  uint64_t v46 = a2[39];
  uint64_t v47 = a2[40];
  uint64_t v48 = a2[41];
  uint64_t v49 = a2[42];
  uint64_t v50 = a2[43];
  uint64_t v51 = a2[44];
  uint64_t v52 = a2[45];
  uint64_t v53 = a2[46];
  uint64_t v54 = a2[47];
  uint64_t v55 = a2[48];
  outlined copy of NavigationState.Base(*a2, v76, v74, v73, v72, v71, v70, v69, v68, v67, v66, v65, v64, v63, v62, v61, v60, v59, v58,
    v57,
    v56,
    v3,
    v4,
    v5,
    v6,
    v7,
    v37,
    v8,
    v10,
    v9,
    v11,
    v38,
    v39,
    v40,
    v41,
    v42,
    v43,
    v44,
    v45);
  uint64_t v12 = *(void *)a1;
  uint64_t v13 = *(void *)(a1 + 8);
  *(void *)a1 = v75;
  *(void *)(a1 + 8) = v76;
  uint64_t v14 = *(void *)(a1 + 16);
  uint64_t v15 = *(void *)(a1 + 24);
  *(void *)(a1 + 16) = v74;
  *(void *)(a1 + 24) = v73;
  uint64_t v16 = *(void *)(a1 + 32);
  uint64_t v17 = *(void *)(a1 + 40);
  *(void *)(a1 + 32) = v72;
  *(void *)(a1 + 40) = v71;
  uint64_t v18 = *(void *)(a1 + 48);
  uint64_t v19 = *(void *)(a1 + 56);
  *(void *)(a1 + 48) = v70;
  *(void *)(a1 + 56) = v69;
  long long v20 = *(_OWORD *)(a1 + 64);
  long long v21 = *(_OWORD *)(a1 + 80);
  *(void *)(a1 + 64) = v68;
  *(void *)(a1 + 72) = v67;
  *(void *)(a1 + 80) = v66;
  *(void *)(a1 + 88) = v65;
  long long v22 = *(_OWORD *)(a1 + 96);
  long long v23 = *(_OWORD *)(a1 + 112);
  *(void *)(a1 + 96) = v64;
  *(void *)(a1 + 104) = v63;
  *(void *)(a1 + 112) = v62;
  *(void *)(a1 + 120) = v61;
  long long v24 = *(_OWORD *)(a1 + 128);
  long long v25 = *(_OWORD *)(a1 + 144);
  *(void *)(a1 + 128) = v60;
  *(void *)(a1 + 136) = v59;
  *(void *)(a1 + 144) = v58;
  *(void *)(a1 + 152) = v57;
  long long v26 = *(_OWORD *)(a1 + 160);
  long long v27 = *(_OWORD *)(a1 + 176);
  *(void *)(a1 + 160) = v56;
  *(void *)(a1 + 168) = v3;
  *(void *)(a1 + 176) = v4;
  *(void *)(a1 + 184) = v5;
  long long v28 = *(_OWORD *)(a1 + 192);
  long long v29 = *(_OWORD *)(a1 + 208);
  *(void *)(a1 + 192) = v6;
  *(void *)(a1 + 200) = v7;
  *(void *)(a1 + 208) = v37;
  *(void *)(a1 + 216) = v8;
  long long v30 = *(_OWORD *)(a1 + 224);
  long long v31 = *(_OWORD *)(a1 + 240);
  *(void *)(a1 + 224) = v10;
  *(void *)(a1 + 232) = v9;
  *(void *)(a1 + 240) = v11;
  *(void *)(a1 + 248) = v38;
  long long v32 = *(_OWORD *)(a1 + 256);
  long long v33 = *(_OWORD *)(a1 + 272);
  *(void *)(a1 + 256) = v39;
  *(void *)(a1 + 264) = v40;
  *(void *)(a1 + 272) = v41;
  *(void *)(a1 + 280) = v42;
  long long v34 = *(_OWORD *)(a1 + 288);
  long long v35 = *(_OWORD *)(a1 + 304);
  *(void *)(a1 + 288) = v43;
  *(void *)(a1 + 296) = v44;
  *(void *)(a1 + 304) = v45;
  *(void *)(a1 + 312) = v46;
  *(void *)(a1 + 320) = v47;
  *(void *)(a1 + 328) = v48;
  *(void *)(a1 + 336) = v49;
  *(void *)(a1 + 344) = v50;
  *(void *)(a1 + 352) = v51;
  *(void *)(a1 + 360) = v52;
  *(void *)(a1 + 368) = v53;
  *(void *)(a1 + 376) = v54;
  *(void *)(a1 + 384) = v55;
  outlined consume of NavigationState.Base(v12, v13, v14, v15, v16, v17, v18, v19, v20, WORD4(v20), v21, *((uint64_t *)&v21 + 1), v22, *((uint64_t *)&v22 + 1), v23, *((uint64_t *)&v23 + 1), v24, *((uint64_t *)&v24 + 1), v25,
    *((uint64_t *)&v25 + 1),
    v26,
    *((uint64_t *)&v26 + 1),
    v27,
    *((uint64_t *)&v27 + 1),
    v28,
    *((uint64_t *)&v28 + 1),
    v29,
    *((uint64_t *)&v29 + 1),
    v30,
    *((uint64_t *)&v30 + 1),
    v31,
    *((uint64_t *)&v31 + 1),
    v32,
    *((uint64_t *)&v32 + 1),
    v33,
    *((uint64_t *)&v33 + 1),
    v34,
    *((unint64_t *)&v34 + 1),
    v35);
  return a1;
}

uint64_t assignWithTake for NavigationState.StackContent(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 384);
  uint64_t v5 = *(void *)a1;
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v7 = *(void *)(a1 + 16);
  uint64_t v8 = *(void *)(a1 + 24);
  uint64_t v9 = *(void *)(a1 + 32);
  uint64_t v10 = *(void *)(a1 + 40);
  uint64_t v11 = *(void *)(a1 + 48);
  uint64_t v12 = *(void *)(a1 + 56);
  long long v13 = *(_OWORD *)(a1 + 64);
  long long v14 = *(_OWORD *)(a1 + 80);
  long long v15 = *(_OWORD *)(a1 + 96);
  long long v16 = *(_OWORD *)(a1 + 112);
  long long v17 = *(_OWORD *)(a1 + 128);
  long long v18 = *(_OWORD *)(a1 + 144);
  long long v19 = *(_OWORD *)(a1 + 160);
  long long v20 = *(_OWORD *)(a1 + 176);
  long long v21 = *(_OWORD *)(a1 + 192);
  long long v22 = *(_OWORD *)(a1 + 208);
  long long v23 = *(_OWORD *)(a1 + 224);
  long long v24 = *(_OWORD *)(a1 + 240);
  long long v25 = *(_OWORD *)(a1 + 256);
  long long v26 = *(_OWORD *)(a1 + 272);
  long long v27 = *(_OWORD *)(a1 + 288);
  long long v28 = *(_OWORD *)(a1 + 304);
  long long v29 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v29;
  long long v30 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v30;
  long long v31 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v31;
  long long v32 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = v32;
  long long v33 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v33;
  long long v34 = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 176) = v34;
  long long v35 = *(_OWORD *)(a2 + 208);
  *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 208) = v35;
  long long v36 = *(_OWORD *)(a2 + 240);
  long long v37 = *(_OWORD *)(a2 + 256);
  long long v38 = *(_OWORD *)(a2 + 272);
  long long v39 = *(_OWORD *)(a2 + 288);
  long long v40 = *(_OWORD *)(a2 + 304);
  long long v41 = *(_OWORD *)(a2 + 320);
  long long v42 = *(_OWORD *)(a2 + 336);
  long long v43 = *(_OWORD *)(a2 + 352);
  long long v44 = *(_OWORD *)(a2 + 368);
  *(_OWORD *)(a1 + 224) = *(_OWORD *)(a2 + 224);
  *(_OWORD *)(a1 + 240) = v36;
  *(_OWORD *)(a1 + 256) = v37;
  *(_OWORD *)(a1 + 272) = v38;
  *(_OWORD *)(a1 + 288) = v39;
  *(_OWORD *)(a1 + 304) = v40;
  *(_OWORD *)(a1 + 320) = v41;
  *(_OWORD *)(a1 + 336) = v42;
  *(_OWORD *)(a1 + 352) = v43;
  *(_OWORD *)(a1 + 368) = v44;
  *(void *)(a1 + 384) = v4;
  outlined consume of NavigationState.Base(v5, v6, v7, v8, v9, v10, v11, v12, v13, WORD4(v13), v14, *((uint64_t *)&v14 + 1), v15, *((uint64_t *)&v15 + 1), v16, *((uint64_t *)&v16 + 1), v17, *((uint64_t *)&v17 + 1), v18,
    *((uint64_t *)&v18 + 1),
    v19,
    *((uint64_t *)&v19 + 1),
    v20,
    *((uint64_t *)&v20 + 1),
    v21,
    *((uint64_t *)&v21 + 1),
    v22,
    *((uint64_t *)&v22 + 1),
    v23,
    *((uint64_t *)&v23 + 1),
    v24,
    *((uint64_t *)&v24 + 1),
    v25,
    *((uint64_t *)&v25 + 1),
    v26,
    *((uint64_t *)&v26 + 1),
    v27,
    *((unint64_t *)&v27 + 1),
    v28);
  return a1;
}

uint64_t getEnumTagSinglePayload for NavigationState.StackContent(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 392)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unsigned int v2 = (*(void *)(a1 + 168) >> 57) & 0x38 | *(void *)(a1 + 168) & 7 | (*(void *)(a1 + 248) >> 51) & 0x1E00 | ((*(void *)(a1 + 248) & 7) << 6) & 0x1FFF | (*(_DWORD *)(a1 + 264) >> 3 << 13);
  if (v2 > 0x80000000) {
    int v3 = ~v2;
  }
  else {
    int v3 = -1;
  }
  return (v3 + 1);
}

double storeEnumTagSinglePayload for NavigationState.StackContent(uint64_t a1, int a2, int a3)
{
  if (a2 < 0)
  {
    double result = 0.0;
    *(_OWORD *)(a1 + 248) = 0u;
    *(_OWORD *)(a1 + 232) = 0u;
    *(_OWORD *)(a1 + 216) = 0u;
    *(_OWORD *)(a1 + 200) = 0u;
    *(_OWORD *)(a1 + 184) = 0u;
    *(_OWORD *)(a1 + 168) = 0u;
    *(_OWORD *)(a1 + 152) = 0u;
    *(_OWORD *)(a1 + 136) = 0u;
    *(_OWORD *)(a1 + 120) = 0u;
    *(_OWORD *)(a1 + 104) = 0u;
    *(_OWORD *)(a1 + 88) = 0u;
    *(_OWORD *)(a1 + 72) = 0u;
    *(_OWORD *)(a1 + 56) = 0u;
    *(_OWORD *)(a1 + 40) = 0u;
    *(_OWORD *)(a1 + 24) = 0u;
    *(_OWORD *)(a1 + 8) = 0u;
    *(_OWORD *)(a1 + 360) = 0u;
    *(_OWORD *)(a1 + 344) = 0u;
    *(_OWORD *)(a1 + 328) = 0u;
    *(_OWORD *)(a1 + 312) = 0u;
    *(_OWORD *)(a1 + 296) = 0u;
    *(_OWORD *)(a1 + 280) = 0u;
    *(_OWORD *)(a1 + 264) = 0u;
    *(_OWORD *)(a1 + 376) = 0u;
    *(void *)a1 = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(a1 + 392) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      unint64_t v4 = -a2;
      double result = 0.0;
      *(_OWORD *)(a1 + 128) = 0u;
      *(_OWORD *)(a1 + 144) = 0u;
      *(_OWORD *)(a1 + 96) = 0u;
      *(_OWORD *)(a1 + 112) = 0u;
      *(_OWORD *)(a1 + 64) = 0u;
      *(_OWORD *)(a1 + 80) = 0u;
      *(_OWORD *)(a1 + 32) = 0u;
      *(_OWORD *)(a1 + 48) = 0u;
      *(_OWORD *)a1 = 0u;
      *(_OWORD *)(a1 + 16) = 0u;
      *(void *)(a1 + 160) = 0;
      *(void *)(a1 + 168) = (v4 | (v4 << 57)) & 0x7000000000000007;
      *(_OWORD *)(a1 + 176) = 0u;
      *(_OWORD *)(a1 + 192) = 0u;
      *(_OWORD *)(a1 + 208) = 0u;
      *(_OWORD *)(a1 + 224) = 0u;
      *(void *)(a1 + 240) = 0;
      *(void *)(a1 + 248) = ((v4 >> 6) | (v4 << 51)) & 0xF000000000000007;
      *(void *)(a1 + 256) = 0;
      *(void *)(a1 + 264) = (v4 >> 10) & 0x3FFFF8;
      *(_OWORD *)(a1 + 272) = 0u;
      *(_OWORD *)(a1 + 288) = 0u;
      *(_OWORD *)(a1 + 304) = 0u;
      *(_OWORD *)(a1 + 320) = 0u;
      *(_OWORD *)(a1 + 336) = 0u;
      *(_OWORD *)(a1 + 352) = 0u;
      *(_OWORD *)(a1 + 368) = 0u;
      *(void *)(a1 + 384) = 0;
      return result;
    }
    *(unsigned char *)(a1 + 392) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for NavigationState.StackContent.Views()
{
  return &type metadata for NavigationState.StackContent.Views;
}

uint64_t getEnumTagSinglePayload for NavigationState.StackContent.Views.ViewsSequence.Index(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFE && *(unsigned char *)(a1 + 25)) {
    return (*(_DWORD *)a1 + 254);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 24);
  if (v3 <= 2) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for NavigationState.StackContent.Views.ViewsSequence.Index(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(unsigned char *)(result + 24) = 0;
    *(void *)double result = a2 - 254;
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 25) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 25) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 24) = -(char)a2;
    }
  }
  return result;
}

uint64_t type metadata accessor for NavigationState.StackContent.Views.ViewsSequence.Index()
{
  return swift_getGenericMetadata();
}

uint64_t View.accessibilityLabel(_:isEnabled:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7)
{
  type metadata accessor for _ContiguousArrayStorage<Text>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Text>, MEMORY[0x1E4F41420], MEMORY[0x1E4FBBE00]);
  uint64_t v14 = swift_allocObject();
  *(_OWORD *)(v14 + 16) = xmmword_18834BB80;
  *(void *)(v14 + 32) = a1;
  *(void *)(v14 + 40) = a2;
  *(unsigned char *)(v14 + 48) = a3 & 1;
  *(void *)(v14 + 56) = a4;
  uint64_t v16 = v14;
  char v17 = 2;
  outlined copy of Text.Storage(a1, a2, a3 & 1);
  swift_bridgeObjectRetain();
  View.accessibility<A>(_:_:isEnabled:)(MEMORY[0x1E4F40B88], (uint64_t)&v16, a5, a6, MEMORY[0x1E4F40B88], a7);
  return swift_bridgeObjectRelease();
}

uint64_t View.accessibilityLabel(_:isEnabled:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return View.accessibilityLabel(_:isEnabled:)(a1, a2, a3, a4, a5, a6, a7, (void (*)(uint64_t, uint64_t))View.accessibilityLabel(_:isEnabled:));
}

uint64_t View.accessibilityLabel<A>(_:isEnabled:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return View.accessibilityLabel<A>(_:isEnabled:)(a1, a2, a3, a4, a5, a6, (void (*)(void))View.accessibilityLabel(_:isEnabled:));
}

uint64_t ModifiedContent<>.accessibilityLabel(_:isEnabled:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, char a5@<W4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  type metadata accessor for _ContiguousArrayStorage<Text>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Text>, MEMORY[0x1E4F41420], MEMORY[0x1E4FBBE00]);
  uint64_t v14 = swift_allocObject();
  *(_OWORD *)(v14 + 16) = xmmword_18834BB80;
  *(void *)(v14 + 32) = a1;
  *(void *)(v14 + 40) = a2;
  *(unsigned char *)(v14 + 48) = a3 & 1;
  *(void *)(v14 + 56) = a4;
  uint64_t v16 = v14;
  char v17 = 2;
  outlined copy of Text.Storage(a1, a2, a3 & 1);
  swift_bridgeObjectRetain();
  ModifiedContent<>.update<A>(_:replacing:isEnabled:)(MEMORY[0x1E4F40B88], (uint64_t)&v16, a5, a6, a7);
  return swift_bridgeObjectRelease();
}

uint64_t ModifiedContent<>.accessibilityLabel(_:isEnabled:)@<X0>(char a1@<W4>, uint64_t a2@<X5>, uint64_t a3@<X8>)
{
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v6 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v8 = v7;
  char v10 = v9 & 1;
  ModifiedContent<>.accessibilityLabel(_:isEnabled:)(v6, v7, v9 & 1, v11, a1, a2, a3);
  outlined consume of Text.Storage(v6, v8, v10);

  return swift_bridgeObjectRelease();
}

uint64_t ModifiedContent<>.accessibilityLabel<A>(_:isEnabled:)@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  double v7 = MEMORY[0x1F4188790](a1);
  (*(void (**)(char *, double))(v9 + 16))((char *)&v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), v7);
  uint64_t v10 = Text.init<A>(_:)();
  uint64_t v12 = v11;
  char v14 = v13 & 1;
  ModifiedContent<>.accessibilityLabel(_:isEnabled:)(v10, v11, v13 & 1, v15, a2, a3, a4);
  outlined consume of Text.Storage(v10, v12, v14);
  return swift_bridgeObjectRelease();
}

uint64_t TabContent.accessibilityLabel(_:isEnabled:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, int a5@<W4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  type metadata accessor for _ContiguousArrayStorage<Text>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Text>, MEMORY[0x1E4F41420], MEMORY[0x1E4FBBE00]);
  uint64_t v16 = swift_allocObject();
  *(_OWORD *)(v16 + 16) = xmmword_18834BB80;
  *(void *)(v16 + 32) = a1;
  *(void *)(v16 + 40) = a2;
  *(unsigned char *)(v16 + 48) = a3 & 1;
  *(void *)(v16 + 56) = a4;
  uint64_t v18 = v16;
  char v19 = 2;
  outlined copy of Text.Storage(a1, a2, a3 & 1);
  lazy protocol witness table accessor for type AccessibilityLabelStorage? and conformance <A> A?();
  swift_bridgeObjectRetain();
  TabContent.accessibility<A>(_:_:isEnabled:)((uint64_t)&v18, a5, a6, a7, a8);
  return swift_bridgeObjectRelease();
}

unint64_t lazy protocol witness table accessor for type AccessibilityLabelStorage? and conformance <A> A?()
{
  unint64_t result = lazy protocol witness table cache variable for type AccessibilityLabelStorage? and conformance <A> A?;
  if (!lazy protocol witness table cache variable for type AccessibilityLabelStorage? and conformance <A> A?)
  {
    type metadata accessor for _ContiguousArrayStorage<Text>(255, &lazy cache variable for type metadata for AccessibilityLabelStorage?, MEMORY[0x1E4F40E40], MEMORY[0x1E4FBB718]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityLabelStorage? and conformance <A> A?);
  }
  return result;
}

uint64_t TabContent.accessibilityLabel(_:isEnabled:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return View.accessibilityLabel(_:isEnabled:)(a1, a2, a3, a4, a5, a6, a7, (void (*)(uint64_t, uint64_t))TabContent.accessibilityLabel(_:isEnabled:));
}

uint64_t View.accessibilityLabel(_:isEnabled:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void (*a8)(uint64_t, uint64_t))
{
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v9 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v11 = v10;
  char v13 = v12 & 1;
  a8(v9, v10);
  outlined consume of Text.Storage(v9, v11, v13);

  return swift_bridgeObjectRelease();
}

uint64_t TabContent.accessibilityLabel<A>(_:isEnabled:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return View.accessibilityLabel<A>(_:isEnabled:)(a1, a2, a3, a4, a5, a6, (void (*)(void))TabContent.accessibilityLabel(_:isEnabled:));
}

uint64_t View.accessibilityLabel<A>(_:isEnabled:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void (*a7)(void))
{
  double v8 = MEMORY[0x1F4188790](a1);
  (*(void (**)(char *, double))(v10 + 16))((char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), v8);
  uint64_t v11 = Text.init<A>(_:)();
  uint64_t v13 = v12;
  char v15 = v14 & 1;
  a7();
  outlined consume of Text.Storage(v11, v13, v15);
  return swift_bridgeObjectRelease();
}

uint64_t sub_1876F35BC()
{
  return swift_getWitnessTable();
}

uint64_t sub_1876F3654()
{
  return swift_getWitnessTable();
}

void type metadata accessor for AccessibilityDetachedPropertyModifier<AccessibilityProperties.LabelKey>()
{
  if (!lazy cache variable for type metadata for AccessibilityDetachedPropertyModifier<AccessibilityProperties.LabelKey>)
  {
    lazy protocol witness table accessor for type AccessibilityLabelStorage? and conformance <A> A?();
    unint64_t v0 = type metadata accessor for AccessibilityDetachedPropertyModifier();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for AccessibilityDetachedPropertyModifier<AccessibilityProperties.LabelKey>);
    }
  }
}

uint64_t sub_1876F3724()
{
  return swift_getWitnessTable();
}

uint64_t closure #1 in View.accessibilityLabel<A>(_:label:)(uint64_t a1, char a2)
{
  uint64_t v5 = *(void *)a1;
  int v4 = *(void **)(a1 + 8);
  if (!*(unsigned char *)(a1 + 16))
  {
    uint64_t v11 = *(void *)a1;
    uint64_t v12 = v4;
    AccessibilityAttachment.mergedProperties.getter(&v13);
    outlined consume of AccessibilityAttachment.Tree(v5, v4, 0);
    if (v13) {
      goto LABEL_4;
    }
LABEL_7:
    a2 = 0;
    uint64_t v8 = 0;
    goto LABEL_8;
  }
  if (*(unsigned char *)(a1 + 16) != 1) {
    goto LABEL_7;
  }
  uint64_t v6 = specialized Sequence.compactMap<A>(_:)(*(void *)a1);
  static AccessibilityChildBehavior.defaultCombine(childProperties:createsCustomActions:)((uint64_t)v6, 1, &v11);
  swift_bridgeObjectRelease();
  outlined consume of AccessibilityAttachment.Tree(v5, v4, 1);
  if (!v11) {
    goto LABEL_7;
  }
LABEL_4:
  uint64_t v7 = swift_bridgeObjectRetain();
  specialized AccessibilityProperties.subscript.getter(v7, (uint64_t)&v13);
  swift_bridgeObjectRelease_n();
  uint64_t v8 = v13;
  if (!v13) {
    a2 = v14;
  }
LABEL_8:
  AccessibilityAttachment.init()();
  uint64_t result = specialized AccessibilityProperties.subscript.setter(v8, a2);
  uint64_t v10 = v12;
  *(void *)a1 = v11;
  *(void *)(a1 + 8) = v10;
  *(unsigned char *)(a1 + 16) = 0;
  return result;
}

Swift::Int specialized static Set.== infix(_:_:)(Swift::Int result, uint64_t a2)
{
  if (result == a2) {
    return 1;
  }
  Swift::Int v3 = result;
  if (*(void *)(result + 16) != *(void *)(a2 + 16)) {
    return 0;
  }
  int64_t v4 = 0;
  Swift::Int v5 = result + 56;
  uint64_t v6 = 1 << *(unsigned char *)(result + 32);
  if (v6 < 64) {
    uint64_t v7 = ~(-1 << v6);
  }
  else {
    uint64_t v7 = -1;
  }
  unint64_t v8 = v7 & *(void *)(result + 56);
  int64_t v9 = (unint64_t)(v6 + 63) >> 6;
  uint64_t v10 = a2 + 56;
  do
  {
LABEL_7:
    if (v8)
    {
      unint64_t v11 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      unint64_t v12 = v11 | (v4 << 6);
      goto LABEL_23;
    }
    int64_t v13 = v4 + 1;
    if (__OFADD__(v4, 1))
    {
      __break(1u);
LABEL_33:
      __break(1u);
      return result;
    }
    if (v13 >= v9) {
      return 1;
    }
    unint64_t v14 = *(void *)(v5 + 8 * v13);
    ++v4;
    if (v14) {
      goto LABEL_22;
    }
    int64_t v4 = v13 + 1;
    if (v13 + 1 >= v9) {
      return 1;
    }
    unint64_t v14 = *(void *)(v5 + 8 * v4);
    if (v14) {
      goto LABEL_22;
    }
    int64_t v4 = v13 + 2;
    if (v13 + 2 >= v9) {
      return 1;
    }
    unint64_t v14 = *(void *)(v5 + 8 * v4);
    if (v14) {
      goto LABEL_22;
    }
    int64_t v15 = v13 + 3;
    if (v15 >= v9) {
      return 1;
    }
    unint64_t v14 = *(void *)(v5 + 8 * v15);
    if (!v14)
    {
      while (1)
      {
        int64_t v4 = v15 + 1;
        if (__OFADD__(v15, 1)) {
          goto LABEL_33;
        }
        if (v4 >= v9) {
          return 1;
        }
        unint64_t v14 = *(void *)(v5 + 8 * v4);
        ++v15;
        if (v14) {
          goto LABEL_22;
        }
      }
    }
    int64_t v4 = v15;
LABEL_22:
    unint64_t v8 = (v14 - 1) & v14;
    unint64_t v12 = __clz(__rbit64(v14)) + (v4 << 6);
LABEL_23:
    Swift::UInt v16 = *(void *)(*(void *)(v3 + 48) + 8 * v12);
    Hasher.init(_seed:)();
    Hasher._combine(_:)(v16);
    uint64_t result = Hasher._finalize()();
    uint64_t v17 = -1 << *(unsigned char *)(a2 + 32);
    unint64_t v18 = result & ~v17;
    if (((*(void *)(v10 + ((v18 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v18) & 1) == 0) {
      return 0;
    }
    uint64_t v19 = *(void *)(a2 + 48);
  }
  while (*(void *)(v19 + 8 * v18) == v16);
  uint64_t v20 = ~v17;
  while (1)
  {
    unint64_t v18 = (v18 + 1) & v20;
    if (((*(void *)(v10 + ((v18 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v18) & 1) == 0) {
      return 0;
    }
    if (*(void *)(v19 + 8 * v18) == v16) {
      goto LABEL_7;
    }
  }
}

{
  Swift::Int v3;
  int64_t v4;
  Swift::Int v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  int64_t v12;
  unint64_t v13;
  int64_t v14;
  Swift::UInt *v15;
  Swift::UInt v16;
  Swift::UInt v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  void *v21;
  int64_t v23;

  if (result == a2) {
    return 1;
  }
  Swift::Int v3 = result;
  if (*(void *)(result + 16) != *(void *)(a2 + 16)) {
    return 0;
  }
  int64_t v4 = 0;
  Swift::Int v5 = result + 56;
  uint64_t v6 = 1 << *(unsigned char *)(result + 32);
  if (v6 < 64) {
    uint64_t v7 = ~(-1 << v6);
  }
  else {
    uint64_t v7 = -1;
  }
  unint64_t v8 = v7 & *(void *)(result + 56);
  long long v23 = (unint64_t)(v6 + 63) >> 6;
  int64_t v9 = a2 + 56;
  while (1)
  {
    if (v8)
    {
      uint64_t v10 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      unint64_t v11 = v10 | (v4 << 6);
      goto LABEL_25;
    }
    unint64_t v12 = v4 + 1;
    if (__OFADD__(v4, 1))
    {
      __break(1u);
      goto LABEL_36;
    }
    if (v12 >= v23) {
      return 1;
    }
    int64_t v13 = *(void *)(v5 + 8 * v12);
    ++v4;
    if (!v13)
    {
      int64_t v4 = v12 + 1;
      if (v12 + 1 >= v23) {
        return 1;
      }
      int64_t v13 = *(void *)(v5 + 8 * v4);
      if (!v13)
      {
        int64_t v4 = v12 + 2;
        if (v12 + 2 >= v23) {
          return 1;
        }
        int64_t v13 = *(void *)(v5 + 8 * v4);
        if (!v13)
        {
          int64_t v4 = v12 + 3;
          if (v12 + 3 >= v23) {
            return 1;
          }
          int64_t v13 = *(void *)(v5 + 8 * v4);
          if (!v13) {
            break;
          }
        }
      }
    }
LABEL_24:
    unint64_t v8 = (v13 - 1) & v13;
    unint64_t v11 = __clz(__rbit64(v13)) + (v4 << 6);
LABEL_25:
    int64_t v15 = (Swift::UInt *)(*(void *)(v3 + 48) + 16 * v11);
    Swift::UInt v16 = *v15;
    uint64_t v17 = v15[1];
    Hasher.init(_seed:)();
    Hasher._combine(_:)(v16);
    Hasher._combine(_:)(v17);
    uint64_t result = Hasher._finalize()();
    unint64_t v18 = -1 << *(unsigned char *)(a2 + 32);
    uint64_t v19 = result & ~v18;
    if (((*(void *)(v9 + ((v19 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v19) & 1) == 0) {
      return 0;
    }
    uint64_t v20 = ~v18;
    while (1)
    {
      long long v21 = (void *)(*(void *)(a2 + 48) + 16 * v19);
      if (v21[1] == v17 && *v21 == v16) {
        break;
      }
      uint64_t v19 = (v19 + 1) & v20;
      if (((*(void *)(v9 + ((v19 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v19) & 1) == 0) {
        return 0;
      }
    }
  }
  unint64_t v14 = v12 + 4;
  if (v14 >= v23) {
    return 1;
  }
  int64_t v13 = *(void *)(v5 + 8 * v14);
  if (v13)
  {
    int64_t v4 = v14;
    goto LABEL_24;
  }
  while (1)
  {
    int64_t v4 = v14 + 1;
    if (__OFADD__(v14, 1)) {
      break;
    }
    if (v4 >= v23) {
      return 1;
    }
    int64_t v13 = *(void *)(v5 + 8 * v4);
    ++v14;
    if (v13) {
      goto LABEL_24;
    }
  }
LABEL_36:
  __break(1u);
  return result;
}

uint64_t specialized static Set.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    if (*(void *)(a1 + 16) != *(void *)(a2 + 16)) {
      return 0;
    }
    int64_t v4 = 0;
    uint64_t v5 = a1 + 56;
    uint64_t v6 = 1 << *(unsigned char *)(a1 + 32);
    if (v6 < 64) {
      uint64_t v7 = ~(-1 << v6);
    }
    else {
      uint64_t v7 = -1;
    }
    unint64_t v8 = v7 & *(void *)(a1 + 56);
    int64_t v34 = (unint64_t)(v6 + 63) >> 6;
    uint64_t v9 = a2 + 56;
LABEL_7:
    if (v8)
    {
      unint64_t v10 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      unint64_t v11 = v10 | (v4 << 6);
      goto LABEL_25;
    }
    int64_t v12 = v4 + 1;
    if (__OFADD__(v4, 1))
    {
      __break(1u);
      goto LABEL_68;
    }
    if (v12 < v34)
    {
      unint64_t v13 = *(void *)(v5 + 8 * v12);
      ++v4;
      if (v13) {
        goto LABEL_24;
      }
      int64_t v4 = v12 + 1;
      if (v12 + 1 >= v34) {
        return 1;
      }
      unint64_t v13 = *(void *)(v5 + 8 * v4);
      if (v13) {
        goto LABEL_24;
      }
      int64_t v4 = v12 + 2;
      if (v12 + 2 >= v34) {
        return 1;
      }
      unint64_t v13 = *(void *)(v5 + 8 * v4);
      if (v13) {
        goto LABEL_24;
      }
      int64_t v4 = v12 + 3;
      if (v12 + 3 >= v34) {
        return 1;
      }
      unint64_t v13 = *(void *)(v5 + 8 * v4);
      if (v13)
      {
LABEL_24:
        unint64_t v8 = (v13 - 1) & v13;
        unint64_t v11 = __clz(__rbit64(v13)) + (v4 << 6);
LABEL_25:
        uint64_t v15 = *(void *)(a1 + 48) + 16 * v11;
        double v16 = *(double *)v15;
        unint64_t v17 = *(void *)(v15 + 8);
        Hasher.init(_seed:)();
        PresentationDetent.Identifier.hash(into:)((uint64_t)v35, *(Swift::UInt *)&v16, v17);
        Swift::Int v18 = Hasher._finalize()();
        uint64_t v19 = -1 << *(unsigned char *)(a2 + 32);
        unint64_t v20 = v18 & ~v19;
        if ((*(void *)(v9 + ((v20 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v20))
        {
          uint64_t v21 = ~v19;
          BOOL v22 = v17 != 0xC000000000000000 || *(void *)&v16 != 2;
          BOOL v23 = v17 != 0xC000000000000000 || *(void *)&v16 != 1;
          BOOL v24 = v17 != 0xC000000000000000 || *(void *)&v16 != 0;
          unint64_t v25 = v17 & 0xC000000000000000;
          int v26 = v17 >> 62 != 3 || v22;
          char v27 = v17 >> 62 != 3 || v23;
          char v28 = v17 >> 62 != 3 || v24;
          while (1)
          {
            uint64_t v29 = *(void *)(a2 + 48) + 16 * v20;
            double v30 = *(double *)v29;
            unint64_t v31 = *(void *)(v29 + 8);
            switch(v31 >> 62)
            {
              case 1uLL:
                if (v25 != 0x4000000000000000) {
                  goto LABEL_46;
                }
                goto LABEL_45;
              case 2uLL:
                if (v25 == 0x8000000000000000 && *(void *)&v30 == *(void *)&v16) {
                  goto LABEL_7;
                }
                goto LABEL_46;
              case 3uLL:
                if (*(void *)&v30 | v31 ^ 0xC000000000000000)
                {
                  if (v31 == 0xC000000000000000 && *(void *)&v30 == 1)
                  {
                    if ((v27 & 1) == 0) {
                      goto LABEL_7;
                    }
                  }
                  else if (!v26)
                  {
                    goto LABEL_7;
                  }
                }
                else if ((v28 & 1) == 0)
                {
                  goto LABEL_7;
                }
LABEL_46:
                unint64_t v20 = (v20 + 1) & v21;
                if (((*(void *)(v9 + ((v20 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v20) & 1) == 0) {
                  return 0;
                }
                break;
              default:
                if (v17 >> 62) {
                  goto LABEL_46;
                }
LABEL_45:
                if (v30 != v16) {
                  goto LABEL_46;
                }
                goto LABEL_7;
            }
          }
        }
        return 0;
      }
      int64_t v14 = v12 + 4;
      if (v14 < v34)
      {
        unint64_t v13 = *(void *)(v5 + 8 * v14);
        if (v13)
        {
          int64_t v4 = v14;
          goto LABEL_24;
        }
        while (1)
        {
          int64_t v4 = v14 + 1;
          if (__OFADD__(v14, 1)) {
            break;
          }
          if (v4 >= v34) {
            return 1;
          }
          unint64_t v13 = *(void *)(v5 + 8 * v4);
          ++v14;
          if (v13) {
            goto LABEL_24;
          }
        }
LABEL_68:
        __break(1u);
        JUMPOUT(0x1876F4298);
      }
    }
  }
  return 1;
}

{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  int64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  Swift::Int v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  void *v22;
  BOOL v23;
  uint64_t v24;
  unint64_t i;
  uint64_t v26;
  void *v27;
  BOOL v28;
  uint64_t v30;
  int64_t v31;
  int64_t v32;

  if (a1 == a2) {
    return 1;
  }
  if (*(void *)(a1 + 16) != *(void *)(a2 + 16)) {
    return 0;
  }
  Swift::Int v3 = 0;
  double v30 = a1 + 56;
  int64_t v4 = 1 << *(unsigned char *)(a1 + 32);
  if (v4 < 64) {
    uint64_t v5 = ~(-1 << v4);
  }
  else {
    uint64_t v5 = -1;
  }
  uint64_t v6 = v5 & *(void *)(a1 + 56);
  unint64_t v31 = (unint64_t)(v4 + 63) >> 6;
  uint64_t v7 = a2 + 56;
  while (1)
  {
    if (v6)
    {
      unint64_t v8 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      long long v32 = v3;
      uint64_t v9 = v8 | (v3 << 6);
      goto LABEL_26;
    }
    unint64_t v10 = v3 + 1;
    if (__OFADD__(v3, 1))
    {
      __break(1u);
      goto LABEL_45;
    }
    if (v10 >= v31) {
      return 1;
    }
    unint64_t v11 = *(void *)(v30 + 8 * v10);
    int64_t v12 = v3 + 1;
    if (v11) {
      goto LABEL_25;
    }
    int64_t v12 = v3 + 2;
    if (v3 + 2 >= v31) {
      return 1;
    }
    unint64_t v11 = *(void *)(v30 + 8 * v12);
    if (v11) {
      goto LABEL_25;
    }
    int64_t v12 = v3 + 3;
    if (v3 + 3 >= v31) {
      return 1;
    }
    unint64_t v11 = *(void *)(v30 + 8 * v12);
    if (v11) {
      goto LABEL_25;
    }
    int64_t v12 = v3 + 4;
    if (v3 + 4 >= v31) {
      return 1;
    }
    unint64_t v11 = *(void *)(v30 + 8 * v12);
    if (v11) {
      goto LABEL_25;
    }
    unint64_t v13 = v3 + 5;
    if (v3 + 5 >= v31) {
      return 1;
    }
    unint64_t v11 = *(void *)(v30 + 8 * v13);
    if (!v11)
    {
      while (1)
      {
        int64_t v12 = v13 + 1;
        if (__OFADD__(v13, 1)) {
          break;
        }
        if (v12 >= v31) {
          return 1;
        }
        unint64_t v11 = *(void *)(v30 + 8 * v12);
        ++v13;
        if (v11) {
          goto LABEL_25;
        }
      }
LABEL_45:
      __break(1u);
      JUMPOUT(0x1876F454CLL);
    }
    int64_t v12 = v3 + 5;
LABEL_25:
    uint64_t v6 = (v11 - 1) & v11;
    long long v32 = v12;
    uint64_t v9 = __clz(__rbit64(v11)) + (v12 << 6);
LABEL_26:
    int64_t v14 = a1;
    uint64_t v15 = (uint64_t *)(*(void *)(a1 + 48) + 16 * v9);
    unint64_t v17 = *v15;
    double v16 = v15[1];
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    Swift::Int v18 = Hasher._finalize()();
    uint64_t v19 = -1 << *(unsigned char *)(a2 + 32);
    unint64_t v20 = v18 & ~v19;
    if (((*(void *)(v7 + ((v20 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v20) & 1) == 0) {
      goto LABEL_41;
    }
    uint64_t v21 = *(void *)(a2 + 48);
    BOOL v22 = (void *)(v21 + 16 * v20);
    BOOL v23 = *v22 == v17 && v22[1] == v16;
    if (!v23 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
      break;
    }
LABEL_7:
    swift_bridgeObjectRelease();
    a1 = v14;
    Swift::Int v3 = v32;
  }
  BOOL v24 = ~v19;
  for (unint64_t i = v20 + 1; ; unint64_t i = v26 + 1)
  {
    int v26 = i & v24;
    if (((*(void *)(v7 + (((i & v24) >> 3) & 0xFFFFFFFFFFFFFF8)) >> (i & v24)) & 1) == 0) {
      break;
    }
    char v27 = (void *)(v21 + 16 * v26);
    char v28 = *v27 == v17 && v27[1] == v16;
    if (v28 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
      goto LABEL_7;
    }
  }
LABEL_41:
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t ResolvedNavigationDestinations.popDestinationStack(_:)(uint64_t result)
{
  if (result < 1) {
    return 0;
  }
  unsigned int v2 = v1;
  uint64_t v3 = v1[3];
  uint64_t v4 = v3 - result;
  if (__OFSUB__(v3, result))
  {
LABEL_58:
    __break(1u);
    goto LABEL_59;
  }
  if (v3 >= v4)
  {
    if (v4 == v3)
    {
      BOOL v5 = 0;
LABEL_6:
      v2[3] = v4;
      return v5;
    }
    if (v4 < v3)
    {
      LOBYTE(v5) = 0;
      uint64_t v6 = v3 - result;
      uint64_t v55 = v3 - result;
      uint64_t v56 = v1[3];
      do
      {
        uint64_t v7 = v2[2];
        if (*(void *)(v7 + 16) && (uint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v6), (v8 & 1) != 0))
        {
          BOOL v57 = v5;
          uint64_t v9 = *(void *)(*(void *)(v7 + 56) + 8 * result);
          unint64_t v10 = specialized __RawDictionaryStorage.find<A>(_:)(v6);
          char v12 = v11;
          swift_bridgeObjectRetain_n();
          if (v12)
          {
            int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
            uint64_t v14 = v2[2];
            v2[2] = 0x8000000000000000;
            if (!isUniquelyReferenced_nonNull_native) {
              specialized _NativeDictionary.copy()();
            }
            specialized _NativeDictionary._delete(at:)(v10, v14);
            v2[2] = v14;
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
          }
          uint64_t v15 = *(void *)(v9 + 16);
          if (v15)
          {
            swift_bridgeObjectRetain();
            uint64_t v16 = 0;
            while (1)
            {
              uint64_t v17 = *(void *)(v9 + 8 * v16 + 32);
              if (v6 == -1)
              {
                uint64_t v31 = v2[1];
                if (*(void *)(v31 + 16))
                {
                  unint64_t v32 = specialized __RawDictionaryStorage.find<A>(_:)(*(void *)(v9 + 8 * v16 + 32));
                  if (v33)
                  {
                    int64_t v34 = *(uint64_t (**)(uint64_t))(**(void **)(*(void *)(v31 + 56) + 8 * v32) + 96);
                    uint64_t v35 = swift_retain();
                    uint64_t v36 = v34(v35);
                    uint64_t v38 = v37;
                    swift_release();
                    if (v38)
                    {
                      swift_bridgeObjectRetain();
                      unint64_t v39 = specialized __RawDictionaryStorage.find<A>(_:)(v36, v38);
                      char v41 = v40;
                      swift_bridgeObjectRelease();
                      if (v41)
                      {
                        char v42 = swift_isUniquelyReferenced_nonNull_native();
                        uint64_t v43 = v2[4];
                        v2[4] = 0x8000000000000000;
                        if ((v42 & 1) == 0) {
                          specialized _NativeDictionary.copy()();
                        }
                        swift_bridgeObjectRelease();
                        specialized _NativeDictionary._delete(at:)(v39, v43);
                        v2[4] = v43;
                        swift_bridgeObjectRelease();
                      }
                      swift_bridgeObjectRelease();
                    }
                  }
                }
                unint64_t v49 = specialized __RawDictionaryStorage.find<A>(_:)(v17);
                if ((v50 & 1) == 0) {
                  goto LABEL_21;
                }
                unint64_t v51 = v49;
                int v52 = swift_isUniquelyReferenced_nonNull_native();
                uint64_t v53 = v2[1];
                v2[1] = 0x8000000000000000;
                if (!v52) {
                  specialized _NativeDictionary.copy()();
                }
                specialized _NativeDictionary._delete(at:)(v51, v53);
                v2[1] = v53;
              }
              else
              {
                uint64_t v18 = *v2;
                if (*(void *)(*v2 + 16))
                {
                  unint64_t v19 = specialized __RawDictionaryStorage.find<A>(_:)(*(void *)(v9 + 8 * v16 + 32));
                  if (v20)
                  {
                    uint64_t v21 = *(uint64_t (**)(uint64_t))(**(void **)(*(void *)(v18 + 56) + 8 * v19) + 96);
                    uint64_t v22 = swift_retain();
                    uint64_t v23 = v21(v22);
                    uint64_t v25 = v24;
                    swift_release();
                    if (v25)
                    {
                      swift_bridgeObjectRetain();
                      unint64_t v26 = specialized __RawDictionaryStorage.find<A>(_:)(v23, v25);
                      char v28 = v27;
                      swift_bridgeObjectRelease();
                      if (v28)
                      {
                        char v29 = swift_isUniquelyReferenced_nonNull_native();
                        uint64_t v30 = v2[4];
                        v2[4] = 0x8000000000000000;
                        if ((v29 & 1) == 0) {
                          specialized _NativeDictionary.copy()();
                        }
                        swift_bridgeObjectRelease();
                        specialized _NativeDictionary._delete(at:)(v26, v30);
                        v2[4] = v30;
                        swift_bridgeObjectRelease();
                      }
                      swift_bridgeObjectRelease();
                    }
                  }
                }
                unint64_t v44 = specialized __RawDictionaryStorage.find<A>(_:)(v17);
                if ((v45 & 1) == 0) {
                  goto LABEL_21;
                }
                unint64_t v46 = v44;
                int v47 = swift_isUniquelyReferenced_nonNull_native();
                uint64_t v48 = *v2;
                uint64_t v58 = *v2;
                *unsigned int v2 = 0x8000000000000000;
                if (!v47)
                {
                  specialized _NativeDictionary.copy()();
                  uint64_t v48 = v58;
                }
                specialized _NativeDictionary._delete(at:)(v46, v48);
                *unsigned int v2 = v48;
              }
              swift_release();
              swift_bridgeObjectRelease();
LABEL_21:
              if (v15 == ++v16)
              {
                swift_bridgeObjectRelease();
                uint64_t v4 = v55;
                break;
              }
            }
          }
          uint64_t result = swift_bridgeObjectRelease();
          uint64_t v3 = v56;
          ++v6;
          if (!v57)
          {
LABEL_51:
            if (v9)
            {
              uint64_t v54 = *(void *)(v9 + 16);
              uint64_t result = swift_bridgeObjectRelease();
              BOOL v5 = v54 != 0;
              if (v6 == v3) {
                goto LABEL_6;
              }
            }
            else
            {
              BOOL v5 = 0;
              if (v6 == v3) {
                goto LABEL_6;
              }
            }
            continue;
          }
        }
        else
        {
          uint64_t v9 = 0;
          ++v6;
          if (!v5) {
            goto LABEL_51;
          }
        }
        uint64_t result = swift_bridgeObjectRelease();
        BOOL v5 = 1;
        if (v6 == v3) {
          goto LABEL_6;
        }
      }
      while (v6 >= v4 && v6 < v3);
    }
    __break(1u);
    goto LABEL_58;
  }
LABEL_59:
  __break(1u);
  return result;
}

uint64_t ResolvedNavigationDestinations.validateValue(_:)(uint64_t a1)
{
  uint64_t v3 = *v1;
  uint64_t v2 = v1[1];
  uint64_t v4 = (*(uint64_t (**)(void))(*(void *)a1 + 80))();
  uint64_t v5 = v4;
  if (*(void *)(v3 + 16) && (specialized __RawDictionaryStorage.find<A>(_:)(v4), (v6 & 1) != 0))
  {
    char v7 = 1;
  }
  else if (*(void *)(v2 + 16) && (specialized __RawDictionaryStorage.find<A>(_:)(v5), (v8 & 1) != 0))
  {
    char v7 = 0;
  }
  else
  {
    lazy protocol witness table accessor for type AnyNavigationPath.Error and conformance AnyNavigationPath.Error();
    swift_allocError();
    *uint64_t v9 = v5;
    v9[1] = 0x4000000000000000;
    swift_willThrow();
  }
  return v7 & 1;
}

uint64_t ResolvedNavigationDestinations.view<A, B>(presenting:at:applying:)(uint64_t a1, uint64_t a2, void (*a3)(uint64_t), uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  char v8 = v7;
  uint64_t v29 = a4;
  uint64_t v30 = a7;
  char v28 = a3;
  uint64_t v13 = *(void *)(a6 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v15 = (char *)&v28 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for ModifiedContent();
  MEMORY[0x1F4188790](v16);
  uint64_t v17 = *v7;
  uint64_t v18 = v8[1];
  if (*(void *)(v17 + 16))
  {
    unint64_t v19 = specialized __RawDictionaryStorage.find<A>(_:)(a5);
    if (v20) {
      goto LABEL_6;
    }
  }
  if (*(void *)(v18 + 16))
  {
    unint64_t v19 = specialized __RawDictionaryStorage.find<A>(_:)(a5);
    if (v21)
    {
      uint64_t v17 = v18;
LABEL_6:
      uint64_t v22 = *(uint64_t (**)(uint64_t, uint64_t, void (*)(uint64_t), uint64_t, uint64_t, uint64_t, uint64_t))(**(void **)(*(void *)(v17 + 56) + 8 * v19) + 112);
      swift_retain_n();
      uint64_t v23 = v22(a1, a2, v28, v29, a5, a6, v30);
      swift_release_n();
      return v23;
    }
  }
  type metadata accessor for ImageProviderBox<Image.NamedImageProvider>();
  uint64_t v25 = swift_allocObject();
  *(void *)(v25 + 16) = 0xD00000000000001DLL;
  *(void *)(v25 + 24) = 0x8000000188326ED0;
  *(_DWORD *)(v25 + 32) = 0;
  *(unsigned char *)(v25 + 36) = 1;
  *(_OWORD *)(v25 + 40) = xmmword_18834C6B0;
  *(void *)(v25 + 56) = 0xD00000000000001DLL;
  *(void *)(v25 + 64) = 0x8000000188326ED0;
  *(_OWORD *)(v25 + 72) = xmmword_18834C6D0;
  *(unsigned char *)(v25 + 88) = 0;
  LOBYTE(v33) = 1;
  uint64_t v26 = Image.symbolRenderingMode(_:)();
  swift_release();
  uint64_t v33 = v26;
  v28(a2);
  uint64_t v27 = MEMORY[0x1E4F41538];
  MEMORY[0x18C113660](v15, MEMORY[0x1E4F41558], a6, MEMORY[0x1E4F41538]);
  (*(void (**)(char *, uint64_t))(v13 + 8))(v15, a6);
  swift_release();
  uint64_t v31 = v27;
  uint64_t v32 = v30;
  swift_getWitnessTable();
  return AnyView.init<A>(_:)();
}

unint64_t ResolvedNavigationDestinations.pushResolvers<A>(for:pathIndex:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v6 = *v3;
  if (*(void *)(v6 + 16) && (unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(a3), (v10 & 1) != 0))
  {
    uint64_t v11 = a2 + 1;
    if (__OFADD__(a2, 1))
    {
      __break(1u);
    }
    else
    {
      char v12 = *(void (**)(void *, uint64_t, uint64_t, uint64_t))(**(void **)(*(void *)(v6 + 56) + 8 * result)
                                                                       + 120);
      swift_retain();
      v12(v4, a1, v11, a3);
      return swift_release();
    }
  }
  else
  {
    lazy protocol witness table accessor for type AnyNavigationPath.Error and conformance AnyNavigationPath.Error();
    swift_allocError();
    *uint64_t v13 = a3;
    v13[1] = 0x4000000000000000;
    return swift_willThrow();
  }
  return result;
}

uint64_t ResolvedNavigationDestinations.possibilities<A>(from:depth:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  type metadata accessor for Logger?();
  MEMORY[0x1F4188790](v9 - 8);
  char v12 = (char *)&v45 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  long long v13 = *(_OWORD *)(v4 + 48);
  v59[2] = *(_OWORD *)(v4 + 32);
  v59[3] = v13;
  v59[4] = *(_OWORD *)(v4 + 64);
  uint64_t v60 = *(void *)(v4 + 80);
  long long v14 = *(_OWORD *)(v4 + 16);
  v59[0] = *(_OWORD *)v4;
  v59[1] = v14;
  if (a2 == -1) {
    return MEMORY[0x1E4FBC860];
  }
  MEMORY[0x1F4188790](v10);
  *(&v45 - 4) = a3;
  *(&v45 - 3) = a4;
  *(&v45 - 2) = a1;
  MEMORY[0x1F4188790](v15);
  *(&v45 - 4) = a3;
  *(&v45 - 3) = a4;
  *(&v45 - 2) = a1;
  *(&v45 - 1) = (uint64_t)v59;
  uint64_t v17 = (char *)NavigationHostingControllerCache_UIKit.prerenderHostingController(configureExisting:makeNew:)((void (*)(void))partial apply for closure #1 in ResolvedNavigationDestinations.possibilities<A>(from:depth:), v16, (uint64_t (*)(void))partial apply for closure #2 in ResolvedNavigationDestinations.possibilities<A>(from:depth:));
  uint64_t v18 = direct field offset for UIHostingController.host;
  unint64_t v19 = *(void **)&v17[direct field offset for UIHostingController.host];
  type metadata accessor for _SetStorage<ObjectIdentifier>(0, (unint64_t *)&lazy cache variable for type metadata for _UIHostingView<AnyView>, MEMORY[0x1E4F41618], MEMORY[0x1E4F41610], (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for _UIHostingView);
  uint64_t v21 = v20;
  unint64_t v22 = lazy protocol witness table accessor for type _UIHostingView<AnyView> and conformance _UIHostingView<A>();
  id v23 = v19;
  ViewRendererHost.preferenceValue<A>(_:)();

  unint64_t v24 = v57;
  static Log.navigation.getter();
  uint64_t v25 = type metadata accessor for Logger();
  uint64_t v26 = *(void *)(v25 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v26 + 48))(v12, 1, v25) == 1)
  {
    outlined destroy of Logger?((uint64_t)v12, (uint64_t (*)(void))type metadata accessor for Logger?);
LABEL_20:
    char v40 = v17;
    uint64_t v41 = AnyView.init<A>(_:)();
    char v42 = *(void **)&v17[v18];
    uint64_t v43 = (void *)((char *)v42 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v42) + 0x60));
    swift_beginAccess();
    *uint64_t v43 = v41;
    swift_retain_n();
    unint64_t v44 = v42;
    swift_release();
    LOWORD(v55._countAndFlagsBits) = 1;
    ViewRendererHost.invalidateProperties(_:mayDeferUpdate:)();

    swift_release_n();
    return v24;
  }
  swift_bridgeObjectRetain_n();
  uint64_t v27 = Logger.logObject.getter();
  int v54 = static os_log_type_t.debug.getter();
  if (!os_log_type_enabled(v27, (os_log_type_t)v54))
  {
    swift_bridgeObjectRelease_n();

LABEL_19:
    (*(void (**)(char *, uint64_t))(v26 + 8))(v12, v25);
    goto LABEL_20;
  }
  uint64_t v53 = v21;
  uint64_t v28 = swift_slowAlloc();
  uint64_t v46 = swift_slowAlloc();
  uint64_t v56 = v46;
  uint64_t v57 = a2;
  *(_DWORD *)uint64_t v28 = 134218242;
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  int v47 = (uint8_t *)v28;
  *(_WORD *)(v28 + 12) = 2080;
  uint64_t v57 = 91;
  unint64_t v58 = 0xE100000000000000;
  os_log_t v48 = v27;
  if (v24 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t result = _CocoaArrayWrapper.endIndex.getter();
    uint64_t v29 = result;
  }
  else
  {
    uint64_t v29 = *(void *)((v24 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain();
  }
  unint64_t v51 = v17;
  unint64_t v52 = v22;
  uint64_t v50 = v18;
  uint64_t v49 = v26;
  if (!v29)
  {
    swift_bridgeObjectRelease();
    uint64_t v35 = (void *)0xE100000000000000;
    uint64_t v34 = 91;
LABEL_18:
    uint64_t v36 = v47;
    uint64_t v57 = 93;
    unint64_t v58 = 0xE100000000000000;
    v55._countAndFlagsBits = v34;
    v55._object = v35;
    swift_bridgeObjectRetain();
    v55._countAndFlagsBits = String.init<A>(_:)();
    v55._object = v37;
    String.append<A>(contentsOf:)();
    swift_bridgeObjectRelease();
    uint64_t v57 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v55._countAndFlagsBits, (unint64_t)v55._object, &v56);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    os_log_t v38 = v48;
    _os_log_impl(&dword_1872C6000, v48, (os_log_type_t)v54, "Extracting pre-render navigation destinations at depth: %ld\nReader: NascentViewDestinationsExtractor\nDestinations: %s", v36, 0x16u);
    uint64_t v39 = v46;
    swift_arrayDestroy();
    MEMORY[0x18C119C60](v39, -1, -1);
    MEMORY[0x18C119C60](v36, -1, -1);

    uint64_t v17 = v51;
    uint64_t v18 = v50;
    uint64_t v26 = v49;
    goto LABEL_19;
  }
  uint64_t v45 = v25;
  if (v29 >= 1)
  {
    uint64_t v31 = 0;
    do
    {
      if ((v24 & 0xC000000000000001) != 0)
      {
        uint64_t v32 = MEMORY[0x18C117680](v31, v24);
      }
      else
      {
        uint64_t v32 = *(void *)(v24 + 8 * v31 + 32);
        swift_retain();
      }
      ++v31;
      v33._countAndFlagsBits = (*(uint64_t (**)(void))(*(void *)v32 + 128))();
      v55._countAndFlagsBits = 2314;
      v55._object = (void *)0xE200000000000000;
      String.append(_:)(v33);
      swift_bridgeObjectRelease();
      String.append(_:)(v55);
      swift_release();
      swift_bridgeObjectRelease();
    }
    while (v29 != v31);
    swift_bridgeObjectRelease();
    uint64_t v34 = v57;
    uint64_t v35 = (void *)v58;
    uint64_t v25 = v45;
    goto LABEL_18;
  }
  __break(1u);
  return result;
}

uint64_t closure #1 in ResolvedNavigationDestinations.possibilities<A>(from:depth:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for ModifiedContent();
  double v3 = MEMORY[0x1F4188790](v2);
  MEMORY[0x18C113660](v3);
  swift_getWitnessTable();
  uint64_t v4 = AnyView.init<A>(_:)();
  uint64_t v5 = *(void **)(a1 + direct field offset for UIHostingController.host);
  uint64_t v6 = (void *)((char *)v5 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v5) + 0x60));
  swift_beginAccess();
  *uint64_t v6 = v4;
  swift_retain_n();
  char v7 = v5;
  swift_release();
  type metadata accessor for _SetStorage<ObjectIdentifier>(0, (unint64_t *)&lazy cache variable for type metadata for _UIHostingView<AnyView>, MEMORY[0x1E4F41618], MEMORY[0x1E4F41610], (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for _UIHostingView);
  lazy protocol witness table accessor for type _UIHostingView<AnyView> and conformance _UIHostingView<A>();
  ViewRendererHost.invalidateProperties(_:mayDeferUpdate:)();

  return swift_release_n();
}

char *closure #2 in ResolvedNavigationDestinations.possibilities<A>(from:depth:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = type metadata accessor for ModifiedContent();
  double v7 = MEMORY[0x1F4188790](v6);
  MEMORY[0x18C113660](v7);
  uint64_t v24 = a4;
  uint64_t v25 = &protocol witness table for NascentViewDestinationsExtractor;
  swift_getWitnessTable();
  uint64_t v8 = AnyView.init<A>(_:)();
  uint64_t v9 = MEMORY[0x1E4F41618];
  uint64_t v10 = MEMORY[0x1E4F41610];
  type metadata accessor for _SetStorage<ObjectIdentifier>(0, &lazy cache variable for type metadata for NavigationStackHostingController<AnyView>, MEMORY[0x1E4F41618], MEMORY[0x1E4F41610], (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for NavigationStackHostingController);
  char v12 = objc_allocWithZone(v11);
  long long v13 = (void *)MEMORY[0x1E4FBC8C8];
  *((unsigned char *)v12 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v12) + 0x3D0)) = 6;
  *(void *)((char *)v12 + *(void *)((*v13 & *v12) + 0x3D8)) = 0;
  type metadata accessor for _SetStorage<ObjectIdentifier>(0, &lazy cache variable for type metadata for NavigationStackHostingController<AnyView>.HostingView, v9, v10, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for NavigationStackHostingController.HostingView);
  id v15 = objc_allocWithZone(v14);
  uint64_t v16 = (void *)specialized _UIHostingView.init(rootView:)(v8);
  uint64_t v17 = (char *)specialized UIHostingController.init(_hostingView:)(v16);
  swift_release();
  uint64_t v18 = *(void **)&v17[direct field offset for UIHostingController.host];
  uint64_t v19 = *(void *)((char *)v18 + *(void *)((*v13 & *v18) + 0x68));
  uint64_t v20 = *(void *)(v19 + 136);
  *(void *)(v19 + 136) = *(void *)(a2 + 40);
  *(void *)(v19 + 144) = 0;
  swift_retain_n();
  uint64_t v21 = v18;
  outlined consume of EnvironmentValues?(v20);
  if (MEMORY[0x18C119DF0](v19 + 24))
  {
    swift_getObjectType();
    __int16 v23 = 2;
    ViewRendererHost.invalidateProperties(_:mayDeferUpdate:)();

    swift_release();
    swift_unknownObjectRelease();
  }
  else
  {

    swift_release();
  }
  return v17;
}

void NavigationDestinationResolverBase.inputIdentifier.getter()
{
}

void NavigationDestinationResolverBase.inputTypeTagForLogging.getter()
{
}

void NavigationDestinationResolverBase.inputTypeTag.getter()
{
}

void NavigationDestinationResolverBase.inputType.getter()
{
}

void NavigationDestinationResolverBase.view<A, B>(for:at:applying:)()
{
}

void NavigationDestinationResolverBase.pushDestinationResolvers<A>(onto:for:depth:)()
{
}

void NavigationDestinationResolverBase.description.getter()
{
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance NavigationDestinationResolverBase()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 128))();
}

uint64_t NavigationDestinationResolver.inputTypeTagForLogging.getter()
{
  return _typeName(_:qualified:)();
}

uint64_t NavigationDestinationResolver.inputType.getter()
{
  return dynamic_cast_existential_2_conditional(*(void *)(*(void *)v0 + 144));
}

uint64_t NavigationDestinationResolver.view<A, B>(for:at:applying:)(uint64_t a1, uint64_t *a2, void (*a3)(uint64_t *), uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v55 = a6;
  uint64_t v56 = a7;
  uint64_t v53 = a3;
  uint64_t v54 = a4;
  unint64_t v52 = a2;
  uint64_t v46 = a1;
  uint64_t v9 = *(void *)(*v7 + 144);
  uint64_t v10 = *(void *)(*v7 + 152);
  uint64_t v47 = *(void *)(*v7 + 160);
  uint64_t v48 = v10;
  uint64_t v11 = type metadata accessor for ParameterizedLazyView();
  uint64_t v50 = *(void *)(v11 - 8);
  uint64_t v51 = v11;
  MEMORY[0x1F4188790](v11);
  uint64_t v49 = (uint64_t)&v42 - v12;
  uint64_t v13 = type metadata accessor for Optional();
  uint64_t v43 = *(void *)(v13 - 8);
  uint64_t v44 = v13;
  MEMORY[0x1F4188790](v13);
  id v15 = (char *)&v42 - v14;
  uint64_t v16 = *(void *)(a5 - 8);
  MEMORY[0x1F4188790](v17);
  uint64_t v45 = (char *)&v42 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v19);
  uint64_t v21 = (char *)&v42 - v20;
  uint64_t v22 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v23);
  uint64_t v25 = (char *)&v42 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v27 = MEMORY[0x1F4188790](v26);
  uint64_t v29 = (char *)&v42 - v28;
  uint64_t v30 = *(void (**)(char *, uint64_t, uint64_t, double))(v16 + 16);
  v30(v21, v46, a5, v27);
  int v31 = swift_dynamicCast();
  uint64_t v32 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v22 + 56);
  if (v31)
  {
    v32(v15, 0, 1, v9);
    (*(void (**)(char *, char *, uint64_t))(v22 + 32))(v29, v15, v9);
    (*(void (**)(char *, char *, uint64_t))(v22 + 16))(v25, v29, v9);
    uint64_t v33 = v49;
    ParameterizedLazyView.init(value:content:)((uint64_t)v25, v7[2], v7[3], v9, v49);
    swift_retain();
    uint64_t v34 = v51;
    uint64_t WitnessTable = swift_getWitnessTable();
    uint64_t v36 = specialized static ResolvedNavigationDestinations.prepareToPresent<A, B>(view:at:shouldUpdateDestinations:applying:)(v33, v52, v53, v54, v34, v55, WitnessTable, v56);
    (*(void (**)(uint64_t, uint64_t))(v50 + 8))(v33, v34);
    (*(void (**)(char *, uint64_t))(v22 + 8))(v29, v9);
    return v36;
  }
  else
  {
    v32(v15, 1, 1, v9);
    (*(void (**)(char *, uint64_t))(v43 + 8))(v15, v44);
    ((void (*)(char *, uint64_t, uint64_t))v30)(v45, v46, a5);
    uint64_t v58 = 0;
    unint64_t v59 = 0xE000000000000000;
    _StringGuts.grow(_:)(46);
    swift_bridgeObjectRelease();
    uint64_t v58 = 0x100000000000001BLL;
    unint64_t v59 = 0x8000000188326FB0;
    uint64_t DynamicType = v9;
    swift_getMetatypeMetadata();
    v38._countAndFlagsBits = String.init<A>(describing:)();
    String.append(_:)(v38);
    swift_bridgeObjectRelease();
    v39._countAndFlagsBits = 0x746F67202C9D80E2;
    v39._object = (void *)0xAC0000009C80E220;
    String.append(_:)(v39);
    uint64_t DynamicType = swift_getDynamicType();
    swift_getMetatypeMetadata();
    v40._countAndFlagsBits = String.init<A>(describing:)();
    String.append(_:)(v40);
    swift_bridgeObjectRelease();
    v41._countAndFlagsBits = 10322146;
    v41._object = (void *)0xA300000000000000;
    String.append(_:)(v41);
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

uint64_t NavigationDestinationResolver.pushDestinationResolvers<A>(onto:for:depth:)(long long *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v56 = a3;
  uint64_t v50 = a2;
  uint64_t v7 = *(void *)(*v4 + 144);
  uint64_t v8 = *(void *)(*v4 + 152);
  uint64_t v51 = *(void *)(*v4 + 160);
  uint64_t v52 = v8;
  uint64_t v9 = type metadata accessor for ParameterizedLazyView();
  uint64_t v54 = *(void *)(v9 - 8);
  uint64_t v55 = v9;
  MEMORY[0x1F4188790](v9);
  uint64_t v53 = (uint64_t)&v45 - v10;
  uint64_t v48 = type metadata accessor for Optional();
  uint64_t v47 = *(void *)(v48 - 8);
  MEMORY[0x1F4188790](v48);
  uint64_t v12 = (char *)&v45 - v11;
  uint64_t v13 = *(void *)(a4 - 8);
  MEMORY[0x1F4188790](v14);
  uint64_t v49 = (char *)&v45 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v16);
  uint64_t v18 = (char *)&v45 - v17;
  uint64_t v19 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v20);
  uint64_t v22 = (char *)&v45 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v24 = MEMORY[0x1F4188790](v23);
  uint64_t v26 = (char *)&v45 - v25;
  uint64_t v46 = *(void (**)(char *, uint64_t, uint64_t, double))(v13 + 16);
  v46(v18, v50, a4, v24);
  int v27 = swift_dynamicCast();
  uint64_t v28 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v19 + 56);
  if (v27)
  {
    v28(v12, 0, 1, v7);
    (*(void (**)(char *, char *, uint64_t))(v19 + 32))(v26, v12, v7);
    (*(void (**)(char *, char *, uint64_t))(v19 + 16))(v22, v26, v7);
    uint64_t v29 = v53;
    ParameterizedLazyView.init(value:content:)((uint64_t)v22, v4[2], v4[3], v7, v53);
    uint64_t v30 = *((void *)a1 + 4);
    uint64_t v31 = *((void *)a1 + 7);
    uint64_t v32 = *((void *)a1 + 8);
    char v33 = *((unsigned char *)a1 + 72);
    uint64_t v34 = *((void *)a1 + 10);
    long long v35 = a1[1];
    long long v57 = *a1;
    long long v58 = v35;
    uint64_t v59 = v30;
    long long v60 = *(long long *)((char *)a1 + 40);
    uint64_t v61 = v31;
    uint64_t v62 = v32;
    char v63 = v33;
    uint64_t v64 = v34;
    swift_retain();
    uint64_t v36 = v55;
    uint64_t WitnessTable = swift_getWitnessTable();
    uint64_t v38 = v56;
    unint64_t v39 = ResolvedNavigationDestinations.possibilities<A>(from:depth:)(v29, v56, v36, WitnessTable);
    ResolvedNavigationDestinations.setPossibilities(_:depth:)(v39, v38);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v54 + 8))(v29, v36);
    return (*(uint64_t (**)(char *, uint64_t))(v19 + 8))(v26, v7);
  }
  else
  {
    v28(v12, 1, 1, v7);
    (*(void (**)(char *, uint64_t))(v47 + 8))(v12, v48);
    ((void (*)(char *, uint64_t, uint64_t))v46)(v49, v50, a4);
    *(void *)&long long v57 = 0;
    *((void *)&v57 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(46);
    swift_bridgeObjectRelease();
    *(void *)&long long v57 = 0x100000000000001BLL;
    *((void *)&v57 + 1) = 0x8000000188326FB0;
    uint64_t DynamicType = v7;
    swift_getMetatypeMetadata();
    v41._countAndFlagsBits = String.init<A>(describing:)();
    String.append(_:)(v41);
    swift_bridgeObjectRelease();
    v42._countAndFlagsBits = 0x746F67202C9D80E2;
    v42._object = (void *)0xAC0000009C80E220;
    String.append(_:)(v42);
    uint64_t DynamicType = swift_getDynamicType();
    swift_getMetatypeMetadata();
    v43._countAndFlagsBits = String.init<A>(describing:)();
    String.append(_:)(v43);
    swift_bridgeObjectRelease();
    v44._countAndFlagsBits = 10322146;
    v44._object = (void *)0xA300000000000000;
    String.append(_:)(v44);
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

uint64_t NavigationDestinationResolver.description.getter()
{
  _StringGuts.grow(_:)(32);
  _print_unlocked<A, B>(_:_:)();
  v0._object = (void *)0x8000000188326F60;
  v0._countAndFlagsBits = 0x100000000000001CLL;
  String.append(_:)(v0);
  swift_getMetatypeMetadata();
  v1._countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v1);
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t NavigationDestinationResolver.__ivar_destroyer()
{
  return swift_release();
}

uint64_t NavigationDestinationResolver.__deallocating_deinit()
{
  swift_release();

  return swift_deallocClassInstance();
}

uint64_t static NascentViewDestinationsExtractor._makeView(modifier:inputs:body:)@<X0>(uint64_t *a1@<X1>, void (*a2)(uint64_t *__return_ptr, uint64_t, uint64_t *)@<X2>, uint64_t a3@<X8>)
{
  unsigned int v3 = *((_DWORD *)a1 + 2);
  uint64_t v4 = a1[2];
  unsigned int v5 = *((_DWORD *)a1 + 6);
  unsigned int v6 = *((_DWORD *)a1 + 7);
  unsigned int v7 = *((_DWORD *)a1 + 9);
  unsigned int v24 = *((_DWORD *)a1 + 8);
  uint64_t v8 = a1[6];
  uint64_t v23 = a1[5];
  unsigned int v9 = *((_DWORD *)a1 + 14);
  unsigned int v22 = *((_DWORD *)a1 + 15);
  unsigned int v21 = *((_DWORD *)a1 + 16);
  unsigned int v20 = *((_DWORD *)a1 + 17);
  unsigned int v19 = *((_DWORD *)a1 + 18);
  unsigned int v18 = *((_DWORD *)a1 + 19);
  int v17 = *((_DWORD *)a1 + 20);
  uint64_t v42 = *a1;
  unsigned int v43 = v3;
  uint64_t v44 = v4;
  *(void *)&long long v45 = __PAIR64__(v6, v5);
  *((void *)&v45 + 1) = __PAIR64__(v7, v24);
  uint64_t v46 = v23;
  *((void *)&v48 + 1) = __PAIR64__(v20, v21);
  unint64_t v49 = __PAIR64__(v18, v19);
  int v50 = v17;
  PreferenceKeys.init()();
  uint64_t v28 = v31;
  char v41 = 0;
  _ViewInputs.intern<A>(_:id:)();
  swift_bridgeObjectRelease();
  uint64_t v25 = v8;
  unsigned int v10 = v9;
  _ViewInputs.withoutGeometryDependencies.getter();
  PreferencesInputs.init(hostKeys:)();
  swift_bridgeObjectRelease();
  uint64_t v47 = v42;
  *(void *)&long long v48 = __PAIR64__(v22, v3);
  PreferenceKeys.add(_:)();
  lazy protocol witness table accessor for type IsInNavigationV4Context and conformance IsInNavigationV4Context();
  PropertyList.subscript.setter();
  lazy protocol witness table accessor for type IsInLazyContainer and conformance IsInLazyContainer();
  PropertyList.subscript.setter();
  lazy protocol witness table accessor for type IsExtractingNavigationDestinations and conformance IsExtractingNavigationDestinations();
  PropertyList.subscript.setter();
  uint64_t v31 = v42;
  unsigned int v32 = v3;
  uint64_t v34 = v4;
  long long v35 = v45;
  uint64_t v36 = v23;
  uint64_t v37 = v42;
  long long v38 = v48;
  unint64_t v39 = __PAIR64__(v18, v19);
  int v40 = v17;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v11 = swift_bridgeObjectRetain();
  a2(&v28, v11, &v31);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  uint64_t v12 = v28;
  unsigned int v13 = v29;
  int v14 = v30;
  uint64_t v31 = v28;
  unsigned int v32 = v29;
  int v33 = v30;
  uint64_t v15 = _ViewOutputs.subscript.getter();
  if ((v15 & 0x100000000) != 0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    uint64_t result = swift_release();
  }
  else
  {
    uint64_t v31 = v25;
    unsigned int v32 = v10;
    MEMORY[0x1F4188790](v15);
    swift_bridgeObjectRetain();
    PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    uint64_t result = swift_bridgeObjectRelease();
    uint64_t v12 = v28;
    unsigned int v13 = v29;
    int v14 = v30;
  }
  *(void *)a3 = v12;
  *(_DWORD *)(a3 + 8) = v13;
  *(_DWORD *)(a3 + 12) = v14;
  return result;
}

uint64_t protocol witness for static PreferenceKey.defaultValue.getter in conformance NascentViewDestinationsExtractor.Key@<X0>(void *a1@<X8>)
{
  if (one-time initialization token for defaultValue != -1) {
    swift_once();
  }
  *a1 = static NascentViewDestinationsExtractor.Key.defaultValue;

  return swift_bridgeObjectRetain();
}

void protocol witness for ViewModifier.body(content:) in conformance NascentViewDestinationsExtractor()
{
}

unint64_t lazy protocol witness table accessor for type AnyNavigationPath.Error and conformance AnyNavigationPath.Error()
{
  unint64_t result = lazy protocol witness table cache variable for type AnyNavigationPath.Error and conformance AnyNavigationPath.Error;
  if (!lazy protocol witness table cache variable for type AnyNavigationPath.Error and conformance AnyNavigationPath.Error)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnyNavigationPath.Error and conformance AnyNavigationPath.Error);
  }
  return result;
}

uint64_t specialized static ResolvedNavigationDestinations.prepareToPresent<A, B>(view:at:shouldUpdateDestinations:applying:)(uint64_t a1, uint64_t *a2, void (*a3)(uint64_t *), uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v36 = a8;
  uint64_t v33 = a4;
  uint64_t v34 = a3;
  uint64_t v31 = *a2;
  uint64_t v32 = a1;
  uint64_t v11 = a2[1];
  uint64_t v29 = *((unsigned __int8 *)a2 + 16);
  uint64_t v30 = v11;
  uint64_t v28 = a2[3];
  uint64_t v27 = a2[4];
  LOBYTE(v11) = *((unsigned char *)a2 + 40);
  uint64_t v25 = a6;
  uint64_t v35 = *(void *)(a6 - 8);
  int v26 = v11 & 1;
  MEMORY[0x1F4188790](a1);
  unsigned int v13 = (char *)&v24 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for _SetStorage<ObjectIdentifier>(255, &lazy cache variable for type metadata for ReadDestinationsModifier<ResolvedNavigationDestinations>, (uint64_t)&type metadata for ResolvedNavigationDestinations, (uint64_t)&protocol witness table for ResolvedNavigationDestinations, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for ReadDestinationsModifier);
  type metadata accessor for ModifiedContent();
  type metadata accessor for _SetStorage<ObjectIdentifier>(255, (unint64_t *)&lazy cache variable for type metadata for _PreferenceTransformModifier<NavigationDestinationKey>, (uint64_t)&type metadata for NavigationDestinationKey, (uint64_t)&protocol witness table for NavigationDestinationKey, MEMORY[0x1E4F41108]);
  uint64_t v14 = type metadata accessor for ModifiedContent();
  uint64_t v15 = *(void *)(v14 - 8);
  MEMORY[0x1F4188790](v14);
  int v17 = (char *)&v24 - v16;
  uint64_t v18 = type metadata accessor for ModifiedContent();
  MEMORY[0x1F4188790](v18);
  v43[0] = v31;
  v43[1] = v30;
  v43[2] = v29;
  int v43[3] = v28;
  v43[4] = v27;
  char v44 = v26;
  View.readNavigationDestinations<A>(position:isActive:reader:)((uint64_t)v43, 1, (uint64_t)&type metadata for ResolvedNavigationDestinations, a5, (uint64_t)&type metadata for ResolvedNavigationDestinations, a7);
  v34(a2);
  uint64_t v41 = a7;
  uint64_t v42 = &protocol witness table for ReadDestinationsModifier<A>;
  uint64_t WitnessTable = swift_getWitnessTable();
  unint64_t v20 = lazy protocol witness table accessor for type _PreferenceTransformModifier<NavigationDestinationKey> and conformance _PreferenceTransformModifier<A>();
  uint64_t v39 = WitnessTable;
  unint64_t v40 = v20;
  uint64_t v21 = swift_getWitnessTable();
  uint64_t v22 = v25;
  MEMORY[0x18C113660](v13, v14, v25, v21);
  (*(void (**)(char *, uint64_t))(v35 + 8))(v13, v22);
  (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v14);
  uint64_t v37 = v21;
  uint64_t v38 = v36;
  swift_getWitnessTable();
  return AnyView.init<A>(_:)();
}

void type metadata accessor for ImageProviderBox<Image.NamedImageProvider>()
{
  if (!lazy cache variable for type metadata for ImageProviderBox<Image.NamedImageProvider>)
  {
    lazy protocol witness table accessor for type Image.NamedImageProvider and conformance Image.NamedImageProvider();
    unint64_t v0 = type metadata accessor for ImageProviderBox();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ImageProviderBox<Image.NamedImageProvider>);
    }
  }
}

uint64_t partial apply for closure #1 in ResolvedNavigationDestinations.possibilities<A>(from:depth:)(uint64_t a1)
{
  return closure #1 in ResolvedNavigationDestinations.possibilities<A>(from:depth:)(a1);
}

char *partial apply for closure #2 in ResolvedNavigationDestinations.possibilities<A>(from:depth:)()
{
  return closure #2 in ResolvedNavigationDestinations.possibilities<A>(from:depth:)(v0[4], v0[5], v0[2], v0[3]);
}

ValueMetadata *type metadata accessor for NascentViewDestinationsExtractor()
{
  return &type metadata for NascentViewDestinationsExtractor;
}

ValueMetadata *type metadata accessor for NascentViewDestinationsExtractor.Key()
{
  return &type metadata for NascentViewDestinationsExtractor.Key;
}

uint64_t destroy for ResolvedNavigationDestinations()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();

  return swift_release();
}

uint64_t initializeWithCopy for ResolvedNavigationDestinations(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  uint64_t v5 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v5;
  uint64_t v6 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v6;
  long long v7 = *(_OWORD *)(a2 + 64);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = v7;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for ResolvedNavigationDestinations(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_retain();
  swift_release();
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_retain();
  swift_release();
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_retain();
  swift_release();
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  return a1;
}

__n128 __swift_memcpy88_8(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  __n128 result = *(__n128 *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  long long v5 = *(_OWORD *)(a2 + 64);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  *(__n128 *)(a1 + 32) = result;
  return result;
}

uint64_t assignWithTake for ResolvedNavigationDestinations(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  swift_release();
  swift_release();
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  swift_release();
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  return a1;
}

_UNKNOWN **base witness table accessor for ViewModifier in NascentViewDestinationsExtractor()
{
  return &protocol witness table for NascentViewDestinationsExtractor;
}

double static SensoryFeedback.success.getter@<D0>(_OWORD *a1@<X8>)
{
  double result = -0.0;
  *a1 = xmmword_18834C6D0;
  return result;
}

double static SensoryFeedback.warning.getter@<D0>(_OWORD *a1@<X8>)
{
  *(void *)&double result = 0x8000000000000001;
  *a1 = xmmword_188350300;
  return result;
}

double static SensoryFeedback.error.getter@<D0>(_OWORD *a1@<X8>)
{
  *(void *)&double result = 0x8000000000000002;
  *a1 = xmmword_188350310;
  return result;
}

double static SensoryFeedback.selection.getter@<D0>(_OWORD *a1@<X8>)
{
  *(void *)&double result = 0x8000000000000001;
  *a1 = xmmword_188350320;
  return result;
}

double static SensoryFeedback.increase.getter@<D0>(_OWORD *a1@<X8>)
{
  *(void *)&double result = 0x8000000000000003;
  *a1 = xmmword_188350330;
  return result;
}

double static SensoryFeedback.decrease.getter@<D0>(_OWORD *a1@<X8>)
{
  double result = -0.0;
  *a1 = xmmword_188350340;
  return result;
}

double static SensoryFeedback.start.getter@<D0>(_OWORD *a1@<X8>)
{
  double result = -0.0;
  *a1 = xmmword_188350350;
  return result;
}

double static SensoryFeedback.stop.getter@<D0>(_OWORD *a1@<X8>)
{
  *(void *)&double result = 0x8000000000000001;
  *a1 = xmmword_188350360;
  return result;
}

double static SensoryFeedback.alignment.getter@<D0>(_OWORD *a1@<X8>)
{
  *(void *)&double result = 0x8000000000000002;
  *a1 = xmmword_188350370;
  return result;
}

double static SensoryFeedback.levelChange.getter@<D0>(_OWORD *a1@<X8>)
{
  *(void *)&double result = 0x8000000000000003;
  *a1 = xmmword_188350380;
  return result;
}

double static SensoryFeedback.pathComplete.getter@<D0>(_OWORD *a1@<X8>)
{
  *(void *)&double result = 0x8000000000000002;
  *a1 = xmmword_188350390;
  return result;
}

unsigned __int8 *static SensoryFeedback.impact(weight:intensity:)@<X0>(unsigned __int8 *result@<X0>, uint64_t a2@<X8>, double a3@<D0>)
{
  *(void *)a2 = *result;
  *(double *)(a2 + 8) = a3;
  return result;
}

double static SensoryFeedback.impact.getter@<D0>(_OWORD *a1@<X8>)
{
  double result = 0.0;
  *a1 = xmmword_1883503A0;
  return result;
}

unsigned __int8 *static SensoryFeedback.impact(flexibility:intensity:)@<X0>(unsigned __int8 *result@<X0>, uint64_t a2@<X8>, double a3@<D0>)
{
  *(void *)a2 = *result | 0x4000000000000000;
  *(double *)(a2 + 8) = a3;
  return result;
}

void static SensoryFeedback.Flexibility.rigid.getter(unsigned char *a1@<X8>)
{
  *a1 = 0;
}

void static SensoryFeedback.Flexibility.solid.getter(unsigned char *a1@<X8>)
{
  *a1 = 1;
}

void static SensoryFeedback.Flexibility.soft.getter(unsigned char *a1@<X8>)
{
  *a1 = 2;
}

BOOL static SensoryFeedback.Flexibility.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

void SensoryFeedback.FeedbackType.hash(into:)(uint64_t a1, unint64_t a2, Swift::UInt64 a3)
{
  unsigned __int8 v4 = a2;
  if (!(a2 >> 62))
  {
    Swift::UInt v5 = 10;
    goto LABEL_5;
  }
  if (a2 >> 62 == 1)
  {
    Swift::UInt v5 = 11;
LABEL_5:
    Hasher._combine(_:)(v5);
    Hasher._combine(_:)(v4);
    if ((a3 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
      Swift::UInt64 v6 = a3;
    }
    else {
      Swift::UInt64 v6 = 0;
    }
    Hasher._combine(_:)(v6);
    return;
  }
  if ((__int128)__PAIR128__(1, 0x7FFFFFFFFFFFFFFFLL) >= (__int128)__PAIR128__(a3, a2))
  {
    switch(a2)
    {
      case 0x8000000000000001:
        Swift::UInt v7 = 1;
        break;
      case 0x8000000000000002:
        Swift::UInt v7 = 2;
        break;
      case 0x8000000000000003:
        Swift::UInt v7 = 3;
        break;
      default:
        Swift::UInt v7 = 0;
        break;
    }
  }
  else if ((__int128)__PAIR128__(2, 0x7FFFFFFFFFFFFFFFLL) < (__int128)__PAIR128__(a3, a2))
  {
    if (a3 == 2 && a2 == 0x8000000000000000)
    {
      Swift::UInt v7 = 8;
    }
    else if (a3 == 2 && a2 == 0x8000000000000001)
    {
      Swift::UInt v7 = 9;
    }
    else
    {
      Swift::UInt v7 = 12;
    }
  }
  else
  {
    switch(a2)
    {
      case 0x8000000000000001:
        Swift::UInt v7 = 5;
        break;
      case 0x8000000000000002:
        Swift::UInt v7 = 6;
        break;
      case 0x8000000000000003:
        Swift::UInt v7 = 7;
        break;
      default:
        Swift::UInt v7 = 4;
        break;
    }
  }
  Hasher._combine(_:)(v7);
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance SensoryFeedback.FeedbackType(unint64_t *a1, uint64_t a2)
{
  return specialized static SensoryFeedback.FeedbackType.== infix(_:_:)(*a1, a1[1], *(void *)a2, *(void *)(a2 + 8));
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance SensoryFeedback.FeedbackType()
{
  unint64_t v1 = *v0;
  Swift::UInt64 v2 = v0[1];
  Hasher.init(_seed:)();
  SensoryFeedback.FeedbackType.hash(into:)((uint64_t)v4, v1, v2);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance SensoryFeedback.FeedbackType(uint64_t a1)
{
  SensoryFeedback.FeedbackType.hash(into:)(a1, *v1, v1[1]);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance SensoryFeedback.FeedbackType()
{
  unint64_t v1 = *v0;
  Swift::UInt64 v2 = v0[1];
  Hasher.init(_seed:)();
  SensoryFeedback.FeedbackType.hash(into:)((uint64_t)v4, v1, v2);
  return Hasher._finalize()();
}

BOOL static SensoryFeedback.== infix(_:_:)(unint64_t *a1, uint64_t a2)
{
  return specialized static SensoryFeedback.FeedbackType.== infix(_:_:)(*a1, a1[1], *(void *)a2, *(void *)(a2 + 8));
}

BOOL specialized static SensoryFeedback.FeedbackType.== infix(_:_:)(unint64_t a1, unint64_t a2, unint64_t a3, uint64_t a4)
{
  if (!(a1 >> 62))
  {
    if (a3 >> 62) {
      return 0;
    }
    return a3 == a1 && *(double *)&a2 == *(double *)&a4;
  }
  if (a1 >> 62 == 1)
  {
    if (a3 >> 62 != 1) {
      return 0;
    }
    return a3 == a1 && *(double *)&a2 == *(double *)&a4;
  }
  if ((__int128)__PAIR128__(1, 0x7FFFFFFFFFFFFFFFLL) >= (__int128)__PAIR128__(a2, a1))
  {
    switch(a1)
    {
      case 0x8000000000000001:
        if (a3 >> 62 != 2 || a3 != 0x8000000000000001 || *(double *)&a4 != 0.0) {
          return 0;
        }
        BOOL result = 1;
        break;
      case 0x8000000000000002:
        if (a3 >> 62 != 2 || a3 != 0x8000000000000002 || *(double *)&a4 != 0.0) {
          return 0;
        }
        BOOL result = 1;
        break;
      case 0x8000000000000003:
        if (a3 >> 62 != 2 || a3 != 0x8000000000000003 || *(double *)&a4 != 0.0) {
          return 0;
        }
        BOOL result = 1;
        break;
      default:
        if (a3 >> 62 != 2 || a3 != 0x8000000000000000 || *(double *)&a4 != 0.0) {
          return 0;
        }
        BOOL result = 1;
        break;
    }
  }
  else
  {
    if ((__int128)__PAIR128__(2, 0x7FFFFFFFFFFFFFFFLL) < (__int128)__PAIR128__(a2, a1))
    {
      if (a2 == 2 && a1 == 0x8000000000000000)
      {
        if (a3 >> 62 == 2 && a3 == 0x8000000000000000 && a4 == 2) {
          return 1;
        }
      }
      else if (a2 == 2 && a1 == 0x8000000000000001)
      {
        if (a3 >> 62 == 2 && a3 == 0x8000000000000001 && a4 == 2) {
          return 1;
        }
      }
      else if (a3 >> 62 == 2 && a3 == 0x8000000000000002 && a4 == 2)
      {
        return 1;
      }
      return 0;
    }
    switch(a1)
    {
      case 0x8000000000000001:
        if (a3 >> 62 != 2 || a3 != 0x8000000000000001 || a4 != 1) {
          return 0;
        }
        BOOL result = 1;
        break;
      case 0x8000000000000002:
        if (a3 >> 62 != 2 || a3 != 0x8000000000000002 || a4 != 1) {
          return 0;
        }
        BOOL result = 1;
        break;
      case 0x8000000000000003:
        if (a3 >> 62 != 2 || a3 != 0x8000000000000003 || a4 != 1) {
          return 0;
        }
        BOOL result = 1;
        break;
      default:
        if (a3 >> 62 != 2 || a3 != 0x8000000000000000 || a4 != 1) {
          return 0;
        }
        BOOL result = 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SensoryFeedback()
{
  return &type metadata for SensoryFeedback;
}

ValueMetadata *type metadata accessor for SensoryFeedback.Weight()
{
  return &type metadata for SensoryFeedback.Weight;
}

ValueMetadata *type metadata accessor for SensoryFeedback.Flexibility()
{
  return &type metadata for SensoryFeedback.Flexibility;
}

ValueMetadata *type metadata accessor for SensoryFeedback.Flexibility.Storage()
{
  return &type metadata for SensoryFeedback.Flexibility.Storage;
}

unsigned char *storeEnumTagSinglePayload for SensoryFeedback.Weight(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *BOOL result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1876F80D4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *BOOL result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SensoryFeedback.Weight.Storage()
{
  return &type metadata for SensoryFeedback.Weight.Storage;
}

uint64_t getEnumTagSinglePayload for SensoryFeedback(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 16)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *(void *)a1 >> 2;
  if (v2 > 0x80000000) {
    int v3 = ~v2;
  }
  else {
    int v3 = -1;
  }
  return (v3 + 1);
}

uint64_t storeEnumTagSinglePayload for SensoryFeedback(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)BOOL result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)BOOL result = 4 * -a2;
      *(void *)(result + 8) = 0;
      return result;
    }
    *(unsigned char *)(result + 16) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t getEnumTag for SensoryFeedback.FeedbackType(uint64_t a1)
{
  uint64_t v1 = *(void *)a1 >> 62;
  if (v1 <= 1) {
    return v1;
  }
  else {
    return (*(void *)a1 & 3 | (4 * *(_DWORD *)(a1 + 8))) + 2;
  }
}

void *destructiveInjectEnumTag for SensoryFeedback.FeedbackType(void *result, uint64_t a2)
{
  if (a2 < 2)
  {
    *BOOL result = *result & 3 | (a2 << 62);
  }
  else
  {
    *BOOL result = ((_BYTE)a2 - 2) & 3 | 0x8000000000000000;
    result[1] = (unint64_t)(a2 - 2) >> 2;
  }
  return result;
}

ValueMetadata *type metadata accessor for SensoryFeedback.FeedbackType()
{
  return &type metadata for SensoryFeedback.FeedbackType;
}

unint64_t lazy protocol witness table accessor for type SensoryFeedback.FeedbackType and conformance SensoryFeedback.FeedbackType()
{
  unint64_t result = lazy protocol witness table cache variable for type SensoryFeedback.FeedbackType and conformance SensoryFeedback.FeedbackType;
  if (!lazy protocol witness table cache variable for type SensoryFeedback.FeedbackType and conformance SensoryFeedback.FeedbackType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SensoryFeedback.FeedbackType and conformance SensoryFeedback.FeedbackType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SensoryFeedback.FeedbackType and conformance SensoryFeedback.FeedbackType;
  if (!lazy protocol witness table cache variable for type SensoryFeedback.FeedbackType and conformance SensoryFeedback.FeedbackType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SensoryFeedback.FeedbackType and conformance SensoryFeedback.FeedbackType);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type SensoryFeedback.Weight.Storage and conformance SensoryFeedback.Weight.Storage()
{
  unint64_t result = lazy protocol witness table cache variable for type SensoryFeedback.Weight.Storage and conformance SensoryFeedback.Weight.Storage;
  if (!lazy protocol witness table cache variable for type SensoryFeedback.Weight.Storage and conformance SensoryFeedback.Weight.Storage)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SensoryFeedback.Weight.Storage and conformance SensoryFeedback.Weight.Storage);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type SensoryFeedback.Flexibility.Storage and conformance SensoryFeedback.Flexibility.Storage()
{
  unint64_t result = lazy protocol witness table cache variable for type SensoryFeedback.Flexibility.Storage and conformance SensoryFeedback.Flexibility.Storage;
  if (!lazy protocol witness table cache variable for type SensoryFeedback.Flexibility.Storage and conformance SensoryFeedback.Flexibility.Storage)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SensoryFeedback.Flexibility.Storage and conformance SensoryFeedback.Flexibility.Storage);
  }
  return result;
}

uint64_t UIKitButton.init(configuration:label:)@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(void)@<X1>, uint64_t a3@<X8>)
{
  char v4 = *(unsigned char *)(a1 + 1);
  char v5 = *(unsigned char *)(a1 + 24);
  char v6 = *(unsigned char *)(a1 + 25);
  uint64_t v7 = *(void *)(a1 + 28);
  char v8 = *(unsigned char *)(a1 + 36);
  __int16 v9 = *(_WORD *)(a1 + 37);
  uint64_t v10 = *(void *)(a1 + 40);
  char v11 = *(unsigned char *)(a1 + 48);
  char v12 = *(unsigned char *)(a1 + 49);
  *(unsigned char *)a3 = *(unsigned char *)a1;
  *(unsigned char *)(a3 + 1) = v4;
  *(_OWORD *)(a3 + 8) = *(_OWORD *)(a1 + 8);
  *(unsigned char *)(a3 + 24) = v5;
  *(unsigned char *)(a3 + 25) = v6;
  *(void *)(a3 + 28) = v7;
  *(unsigned char *)(a3 + 36) = v8;
  *(_WORD *)(a3 + 37) = v9;
  *(void *)(a3 + 40) = v10;
  *(unsigned char *)(a3 + 48) = v11;
  *(unsigned char *)(a3 + 49) = v12;
  *(_OWORD *)(a3 + 56) = *(_OWORD *)(a1 + 56);
  type metadata accessor for UIKitButton();
  return a2();
}

uint64_t UIKitButton.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  v31[1] = a2;
  uint64_t v4 = *(void *)(a1 + 16);
  unint64_t v5 = lazy protocol witness table accessor for type UIKitButtonConfiguration.Label and conformance UIKitButtonConfiguration.Label();
  uint64_t v6 = *(void *)(a1 + 24);
  uint64_t v38 = &type metadata for UIKitButtonConfiguration.Label;
  uint64_t v39 = v4;
  unint64_t v40 = v5;
  *(void *)uint64_t v41 = v6;
  type metadata accessor for StaticSourceWriter();
  uint64_t v7 = type metadata accessor for ModifiedContent();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  uint64_t v10 = (char *)v31 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v11);
  unsigned int v13 = (char *)v31 - v12;
  char v14 = *(unsigned char *)(v2 + 1);
  uint64_t v15 = *(void *)(v2 + 8);
  unint64_t v16 = *(void *)(v2 + 16);
  char v17 = *(unsigned char *)(v2 + 24);
  char v18 = *(unsigned char *)(v2 + 25);
  uint64_t v19 = *(void *)(v2 + 28);
  char v20 = *(unsigned char *)(v2 + 36);
  __int16 v21 = *(_WORD *)(v2 + 37);
  uint64_t v22 = *(void *)(v2 + 40);
  char v23 = *(unsigned char *)(v2 + 48);
  char v24 = *(unsigned char *)(v2 + 49);
  uint64_t v26 = *(void *)(v2 + 56);
  uint64_t v25 = *(void *)(v2 + 64);
  LOBYTE(v38) = *(unsigned char *)v2;
  BYTE1(v38) = v14;
  uint64_t v39 = v15;
  unint64_t v40 = v16;
  v41[0] = v17;
  v41[1] = v18;
  *(void *)&v41[4] = v19;
  char v42 = v20;
  __int16 v43 = v21;
  uint64_t v44 = v22;
  char v45 = v23;
  char v46 = v24;
  uint64_t v47 = v26;
  uint64_t v48 = v25;
  uint64_t v33 = v4;
  uint64_t v34 = v6;
  uint64_t v35 = v2;
  outlined copy of AppIntentExecutor?(v15);
  outlined copy of AppIntentExecutor?(v26);
  unint64_t v27 = lazy protocol witness table accessor for type ResolvedUIKitButtonBody and conformance ResolvedUIKitButtonBody();
  View.viewAlias<A, B>(_:_:)((uint64_t)&type metadata for UIKitButtonConfiguration.Label, (void (*)(double))partial apply for closure #1 in UIKitButton.body.getter, (uint64_t)v32, (uint64_t)&unk_1ED43FE50, (uint64_t)&type metadata for UIKitButtonConfiguration.Label, v4, v27);
  uint64_t v28 = v47;
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v39);
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v28);
  unint64_t v36 = v27;
  uint64_t v37 = &protocol witness table for StaticSourceWriter<A, B>;
  swift_getWitnessTable();
  static ViewBuilder.buildExpression<A>(_:)(v10);
  uint64_t v29 = *(void (**)(char *, uint64_t))(v8 + 8);
  v29(v10, v7);
  static ViewBuilder.buildExpression<A>(_:)(v13);
  return ((uint64_t (*)(char *, uint64_t))v29)(v13, v7);
}

uint64_t closure #1 in UIKitButton.body.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for UIKitButton();
  static ViewBuilder.buildExpression<A>(_:)(a1 + *(int *)(v7 + 36));
  static ViewBuilder.buildExpression<A>(_:)(v6);
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, a2);
}

uint64_t protocol witness for StyleableView.configuration.getter in conformance ResolvedUIKitButtonBody@<X0>(uint64_t a1@<X8>)
{
  char v2 = *v1;
  char v3 = v1[1];
  uint64_t v4 = *((void *)v1 + 1);
  uint64_t v5 = *((void *)v1 + 2);
  char v6 = v1[24];
  char v7 = v1[25];
  uint64_t v8 = *(void *)(v1 + 28);
  char v9 = v1[36];
  __int16 v10 = *(_WORD *)(v1 + 37);
  uint64_t v11 = *((void *)v1 + 5);
  char v12 = v1[48];
  char v13 = v1[49];
  uint64_t v14 = *((void *)v1 + 7);
  uint64_t v15 = *((void *)v1 + 8);
  *(unsigned char *)a1 = v2;
  *(unsigned char *)(a1 + 1) = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(unsigned char *)(a1 + 24) = v6;
  *(unsigned char *)(a1 + 25) = v7;
  *(void *)(a1 + 28) = v8;
  *(unsigned char *)(a1 + 36) = v9;
  *(_WORD *)(a1 + 37) = v10;
  *(void *)(a1 + 40) = v11;
  *(unsigned char *)(a1 + 48) = v12;
  *(unsigned char *)(a1 + 49) = v13;
  *(void *)(a1 + 56) = v14;
  *(void *)(a1 + 64) = v15;
  outlined copy of AppIntentExecutor?(v4);

  return outlined copy of AppIntentExecutor?(v14);
}

uint64_t protocol witness for static StyleableView.defaultStyleModifier.getter in conformance ResolvedUIKitButtonBody@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for defaultStyleModifier != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for UIKitSystemButtonConfigurationModifier(0);
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)static ResolvedUIKitButtonBody.defaultStyleModifier);
  return outlined init with copy of WeakBox<UIButton>?(v3, a1, type metadata accessor for UIKitSystemButtonConfigurationModifier);
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance ResolvedUIKitButtonBody(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = lazy protocol witness table accessor for type ResolvedUIKitButtonBody and conformance ResolvedUIKitButtonBody();

  return MEMORY[0x1F40FDF90](a1, a2, a3, v6);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance ResolvedUIKitButtonBody(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = lazy protocol witness table accessor for type ResolvedUIKitButtonBody and conformance ResolvedUIKitButtonBody();

  return MEMORY[0x1F40FDF98](a1, a2, a3, v6);
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance ResolvedUIKitButtonBody()
{
  return static StyleableView._viewListCount(inputs:)();
}

void protocol witness for View.body.getter in conformance UIKitButtonConfiguration.Label()
{
}

uint64_t UIKitButtonConfiguration.label.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = static VerticalAlignment.center.getter();
  *(void *)a1 = result;
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 1;
  return result;
}

uint64_t UIKitMenuButton.init(action:isPopUpButton:flexibleDimensions:menuTitleVisibility:menuIndicatorVisibility:onPresentationChanged:menuContent:label:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, char a4@<W3>, char a5@<W4>, char a6@<W5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, void (*a10)(uint64_t), uint64_t a11, void (*a12)(uint64_t))
{
  if ((a3 & 1) != 0 && a1)
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    char v18 = (int *)type metadata accessor for UIKitMenuButton();
    uint64_t v19 = (uint64_t *)(a9 + v18[19]);
    *(void *)a9 = a1;
    *(void *)(a9 + 8) = a2;
    *(unsigned char *)(a9 + 16) = a3 & 1;
    *(unsigned char *)(a9 + 17) = a4;
    uint64_t v20 = outlined copy of AppIntentExecutor?(a1);
    a12(v20);
    *uint64_t v19 = a7;
    v19[1] = a8;
    uint64_t v21 = outlined copy of AppIntentExecutor?(a7);
    a10(v21);
    outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(a7);
    uint64_t result = outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(a1);
    *(unsigned char *)(a9 + v18[17]) = a5;
    *(unsigned char *)(a9 + v18[18]) = a6;
  }
  return result;
}

double static UIKitMenuButton._makeView(view:inputs:)@<D0>(int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, unint64_t *a7@<X8>)
{
  uint64_t v70 = a7;
  uint64_t v121 = *MEMORY[0x1E4F143B8];
  int v11 = *a1;
  unint64_t v85 = *(void *)a2;
  int v12 = *(_DWORD *)(a2 + 8);
  uint64_t v13 = *(void *)(a2 + 16);
  unsigned int v14 = *(_DWORD *)(a2 + 24);
  unsigned int v15 = *(_DWORD *)(a2 + 28);
  unsigned int v89 = *(_DWORD *)(a2 + 32);
  unsigned int v90 = v14;
  unsigned int v86 = *(_DWORD *)(a2 + 36);
  unsigned int v87 = v15;
  uint64_t v88 = *(void *)(a2 + 40);
  unint64_t v91 = *(void *)(a2 + 48);
  unsigned int v16 = *(_DWORD *)(a2 + 56);
  unsigned int v81 = *(_DWORD *)(a2 + 60);
  int v82 = v12;
  unsigned int v17 = *(_DWORD *)(a2 + 64);
  unsigned int v79 = *(_DWORD *)(a2 + 68);
  unsigned int v80 = v17;
  unsigned int v18 = *(_DWORD *)(a2 + 72);
  unsigned int v77 = *(_DWORD *)(a2 + 76);
  unsigned int v78 = v18;
  int v76 = *(_DWORD *)(a2 + 80);
  swift_unknownObjectWeakInit();
  outlined init with take of BridgedPopUpButtonProvider();
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  type metadata accessor for WeakBox<UIButton>?(0);
  lazy protocol witness table accessor for type BridgedPopUpButtonProvider and conformance BridgedPopUpButtonProvider();
  unsigned int v71 = Attribute.init<A>(body:value:flags:update:)();
  outlined destroy of weak FallbackResponderProvider?((uint64_t)&v109);
  LODWORD(v73) = v11;
  LODWORD(v96) = v11;
  unint64_t v109 = a3;
  uint64_t v110 = a4;
  uint64_t v111 = a5;
  unint64_t v112 = a6;
  v67[2] = type metadata accessor for UIKitMenuButton();
  uint64_t v72 = type metadata accessor for _GraphValue();
  _GraphValue.value.getter();
  uint64_t v19 = *(void *)(*(void *)(a4 - 8) + 64);
  uint64_t v74 = a5;
  uint64_t v75 = a3;
  if (v19) {
    closure #1 in static UIKitMenuButton._makeView(view:inputs:)(1, a3, a4, a5, a6);
  }
  int OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
  unint64_t v96 = v85;
  LODWORD(v97) = v82;
  uint64_t v98 = v13;
  int v99 = v90;
  unsigned int v100 = v87;
  unint64_t v101 = __PAIR64__(v86, v89);
  *(void *)&long long v102 = v88;
  *((void *)&v102 + 1) = v91;
  unsigned int v83 = v16;
  *(void *)&long long v103 = __PAIR64__(v81, v16);
  *((void *)&v103 + 1) = __PAIR64__(v79, v80);
  *(void *)&long long v104 = __PAIR64__(v77, v78);
  DWORD2(v104) = v76;
  id v21 = PlatformItemListGenerator<>.init(content:inputs:inputsIncludeGeometry:)(OffsetAttribute2, (uint64_t *)&v96, 1, (uint64_t)&v109);
  uint64_t v68 = v67;
  unint64_t v96 = v109;
  LODWORD(v97) = v110;
  uint64_t v98 = v111;
  int v99 = v112;
  unint64_t v101 = v113;
  long long v102 = v114;
  long long v103 = v115;
  long long v104 = v116;
  uint64_t v105 = v117;
  int v106 = v118;
  char v107 = v119;
  int v108 = v120;
  MEMORY[0x1F4188790](v21);
  uint64_t v92 = &type metadata for AllPlatformItemListFlags;
  uint64_t v93 = a4;
  char v94 = &protocol witness table for AllPlatformItemListFlags;
  uint64_t v95 = a6;
  uint64_t v65 = type metadata accessor for PlatformItemListGenerator();
  uint64_t WitnessTable = swift_getWitnessTable();
  type metadata accessor for Attribute<PlatformItemList>(0, &lazy cache variable for type metadata for Attribute<PlatformItemList>, (uint64_t)&type metadata for PlatformItemList, MEMORY[0x1E4F4E740]);
  uint64_t v23 = v22;
  swift_retain();
  uint64_t v84 = v13;
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v96, (uint64_t)partial apply for closure #1 in Attribute.init<A>(_:), (uint64_t)v64, v65, MEMORY[0x1E4FBC248], v23, MEMORY[0x1E4FBC278], v24);
  v67[1] = 0;
  uint64_t v25 = (void *)v96;
  uint64_t v26 = a4;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();

  swift_release();
  unsigned int v27 = v92;
  int v28 = (int)v73;
  LODWORD(v109) = v73;
  unsigned int v29 = _GraphValue.value.getter();
  LODWORD(v109) = v28;
  _GraphValue.value.getter();
  uint64_t v30 = v75;
  uint64_t v31 = v74;
  if (*(void *)(*(void *)(v75 - 8) + 64)) {
    closure #2 in static UIKitMenuButton._makeView(view:inputs:)(1, v75, a4, v74, a6);
  }
  unsigned int v32 = v71;
  unsigned int v33 = AGGraphCreateOffsetAttribute2();
  type metadata accessor for UIKitButton();
  unint64_t v96 = __PAIR64__(v27, v29);
  LODWORD(v68) = v27;
  double v97 = COERCE_DOUBLE(__PAIR64__(v32, v33));
  unint64_t v109 = v30;
  uint64_t v110 = v26;
  uint64_t v111 = v31;
  unint64_t v112 = a6;
  uint64_t v69 = a6;
  type metadata accessor for UIKitMenuButton.Child();
  swift_getWitnessTable();
  _GraphValue.init<A>(_:)();
  unint64_t v34 = v85;
  unint64_t v109 = v85;
  int v35 = v82;
  LODWORD(v110) = v82;
  uint64_t v111 = v84;
  unint64_t v112 = __PAIR64__(v87, v90);
  unint64_t v113 = __PAIR64__(v86, v89);
  *(void *)&long long v114 = v88;
  *((void *)&v114 + 1) = v91;
  *(void *)&long long v115 = __PAIR64__(v81, v83);
  *((void *)&v115 + 1) = __PAIR64__(v79, v80);
  *(void *)&long long v116 = __PAIR64__(v77, v78);
  DWORD2(v116) = v76;
  swift_getWitnessTable();
  static View._makeView(view:inputs:)();
  lazy protocol witness table accessor for type ShouldProvideBridgedPopUpButton and conformance ShouldProvideBridgedPopUpButton();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  PropertyList.subscript.getter();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  uint64_t v36 = v31;
  if (v109 == 1)
  {
    unint64_t v109 = v91;
    LODWORD(v110) = v83;
    MEMORY[0x1F4188790](v91);
    *(_DWORD *)&v64[-16] = v71;
    swift_bridgeObjectRetain();
    PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
    swift_bridgeObjectRelease();
  }
  unint64_t v109 = v34;
  LODWORD(v110) = v35;
  uint64_t v111 = v84;
  unsigned int v37 = v87;
  unint64_t v112 = __PAIR64__(v87, v90);
  unint64_t v113 = __PAIR64__(v86, v89);
  *(void *)&long long v114 = v88;
  if (static StyleContextAcceptsPredicate.evaluate(inputs:)())
  {
    int v38 = (int)v73;
    LODWORD(v109) = v73;
    v67[0] = v26;
    _GraphValue.value.getter();
    uint64_t v39 = v30;
    uint64_t v40 = v36;
    uint64_t v41 = v36;
    int v42 = v35;
    uint64_t v43 = v69;
    closure #3 in static UIKitMenuButton._makeView(view:inputs:)(1, v39, v26, v40, v69);
    unsigned int v71 = AGGraphCreateOffsetAttribute2();
    LODWORD(v109) = v38;
    uint64_t v44 = _GraphValue.value.getter();
    int v45 = v44;
    unsigned int v46 = v37;
    MEMORY[0x1F4188790](v44);
    *(void *)&v64[-32] = v75;
    *(void *)&v64[-24] = v26;
    *(void *)&v64[-16] = v41;
    *(void *)&v64[-8] = v43;
    uint64_t KeyPath = swift_getKeyPath();
    uint64_t v73 = v64;
    LODWORD(v109) = v45;
    uint64_t v110 = KeyPath;
    MEMORY[0x1F4188790](KeyPath);
    type metadata accessor for (())?(255);
    uint64_t v48 = type metadata accessor for Focus();
    *(void *)&v64[-16] = v48;
    *(void *)&v64[-8] = swift_getWitnessTable();
    type metadata accessor for WeakBox<UIButton>?(0, &lazy cache variable for type metadata for Attribute<(())?>, (uint64_t (*)(uint64_t))type metadata accessor for (())?, MEMORY[0x1E4F4E740]);
    uint64_t v50 = v49;
    swift_retain();
    _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v109, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TA_0, (uint64_t)&v64[-32], v48, MEMORY[0x1E4FBC248], v50, MEMORY[0x1E4FBC278], v51);
    swift_release();
    swift_release();
    LODWORD(v73) = v92;
    unint64_t v109 = v85;
    LODWORD(v110) = v42;
    uint64_t v111 = v84;
    unint64_t v112 = __PAIR64__(v46, v90);
    unsigned int v52 = v86;
    unint64_t v113 = __PAIR64__(v86, v89);
    *(void *)&long long v114 = v88;
    *((void *)&v114 + 1) = v91;
    LODWORD(v50) = v80;
    LODWORD(v48) = v81;
    *(void *)&long long v115 = __PAIR64__(v81, v83);
    LODWORD(v41) = v78;
    unsigned int v53 = v79;
    *((void *)&v115 + 1) = __PAIR64__(v79, v80);
    int v54 = v76;
    unsigned int v55 = v77;
    *(void *)&long long v116 = __PAIR64__(v77, v78);
    DWORD2(v116) = v76;
    swift_getKeyPath();
    LODWORD(v72) = _ViewInputs.mapEnvironment<A>(_:)();
    swift_release();
    unint64_t v109 = v85;
    LODWORD(v110) = v82;
    uint64_t v111 = v84;
    unint64_t v112 = __PAIR64__(v87, v90);
    unint64_t v113 = __PAIR64__(v52, v89);
    *(void *)&long long v114 = v88;
    *((void *)&v114 + 1) = v91;
    unsigned int v56 = v83;
    *(void *)&long long v115 = __PAIR64__(v48, v83);
    *((void *)&v115 + 1) = __PAIR64__(v53, v50);
    *(void *)&long long v116 = __PAIR64__(v55, v41);
    DWORD2(v116) = v54;
    swift_getKeyPath();
    int v57 = _ViewInputs.mapEnvironment<A>(_:)();
    uint64_t v58 = swift_release();
    MEMORY[0x1F4188790](v58);
    uint64_t v59 = v67[0];
    *(void *)&v64[-64] = v75;
    *(void *)&v64[-56] = v59;
    uint64_t v60 = v69;
    *(void *)&v64[-48] = v74;
    *(void *)&v64[-40] = v60;
    LODWORD(v60) = v71;
    *(_DWORD *)&v64[-32] = v68;
    *(_DWORD *)&v64[-28] = v60;
    LODWORD(v60) = v72;
    *(_DWORD *)&v64[-24] = v73;
    *(_DWORD *)&v64[-20] = v60;
    *(_DWORD *)&v64[-16] = v57;
    unint64_t v109 = v91;
    LODWORD(v110) = v56;
    MEMORY[0x1F4188790](v91);
    *(void *)&v64[-16] = partial apply for implicit closure #2 in static UIKitMenuButton._makeView(view:inputs:);
    *(void *)&v64[-8] = v61;
    swift_bridgeObjectRetain();
    PreferencesOutputs.makePreferenceTransformer<A>(inputs:key:transform:)();
    swift_bridgeObjectRelease();
  }
  uint64_t v62 = v70;
  *uint64_t v70 = v96;
  double result = v97;
  *((double *)v62 + 1) = v97;
  return result;
}